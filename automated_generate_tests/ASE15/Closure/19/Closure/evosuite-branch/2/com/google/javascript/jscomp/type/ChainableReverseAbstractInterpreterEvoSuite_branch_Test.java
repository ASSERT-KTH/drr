/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 20:17:58 GMT 2014
 */

package com.google.javascript.jscomp.type;

import static org.junit.Assert.*; import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.junit.Test;
import com.google.javascript.jscomp.ClosureCodingConvention;
import com.google.javascript.jscomp.CodingConvention;
import com.google.javascript.jscomp.GoogleCodingConvention;
import com.google.javascript.jscomp.JqueryCodingConvention;
import com.google.javascript.jscomp.type.ChainableReverseAbstractInterpreter;
import com.google.javascript.jscomp.type.ClosureReverseAbstractInterpreter;
import com.google.javascript.jscomp.type.FlowScope;
import com.google.javascript.jscomp.type.SemanticReverseAbstractInterpreter;
import com.google.javascript.rhino.ErrorReporter;
import com.google.javascript.rhino.Node;
import com.google.javascript.rhino.SimpleErrorReporter;
import com.google.javascript.rhino.jstype.AllType;
import com.google.javascript.rhino.jstype.BooleanLiteralSet;
import com.google.javascript.rhino.jstype.BooleanType;
import com.google.javascript.rhino.jstype.EnumType;
import com.google.javascript.rhino.jstype.FunctionType;
import com.google.javascript.rhino.jstype.JSType;
import com.google.javascript.rhino.jstype.JSTypeNative;
import com.google.javascript.rhino.jstype.JSTypeRegistry;
import com.google.javascript.rhino.jstype.NoObjectType;
import com.google.javascript.rhino.jstype.NoType;
import com.google.javascript.rhino.jstype.NullType;
import com.google.javascript.rhino.jstype.NumberType;
import com.google.javascript.rhino.jstype.ObjectType;
import com.google.javascript.rhino.jstype.ParameterizedType;
import com.google.javascript.rhino.jstype.StringType;
import com.google.javascript.rhino.jstype.TemplateType;
import com.google.javascript.rhino.jstype.UnionType;
import com.google.javascript.rhino.jstype.UnknownType;
import com.google.javascript.rhino.jstype.VoidType;
import java.util.LinkedList;
import java.util.List;




import org.junit.runner.RunWith;


public class ChainableReverseAbstractInterpreterEvoSuite_branch_Test  {

  @Test
  public void test00()  throws Throwable  {
      JqueryCodingConvention jqueryCodingConvention0 = new JqueryCodingConvention();
      assertNotNull(jqueryCodingConvention0);
      assertEquals("window", jqueryCodingConvention0.getGlobalObject());
      
      String string0 = "Y0";
      boolean boolean0 = jqueryCodingConvention0.isValidEnumKey(string0);
      assertTrue(boolean0);
      assertEquals("window", jqueryCodingConvention0.getGlobalObject());
      
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter((CodingConvention) jqueryCodingConvention0, jSTypeRegistry0);
      assertNotNull(semanticReverseAbstractInterpreter0);
      assertEquals("window", jqueryCodingConvention0.getGlobalObject());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter((CodingConvention) jqueryCodingConvention0, jSTypeRegistry0);
      assertNotNull(closureReverseAbstractInterpreter0);
      assertEquals("window", jqueryCodingConvention0.getGlobalObject());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      JSTypeNative jSTypeNative0 = JSTypeNative.BOOLEAN_TYPE;
      BooleanType booleanType0 = (BooleanType)closureReverseAbstractInterpreter0.getNativeType(jSTypeNative0);
      assertNotNull(booleanType0);
      assertEquals(false, booleanType0.isInterface());
      assertEquals(false, booleanType0.isNumberValueType());
      assertEquals(false, booleanType0.isUnionType());
      assertEquals(true, booleanType0.isBooleanValueType());
      assertEquals(false, booleanType0.isNoResolvedType());
      assertEquals(false, booleanType0.isEnumType());
      assertEquals(true, booleanType0.matchesNumberContext());
      assertEquals(true, booleanType0.matchesObjectContext());
      assertEquals(BooleanLiteralSet.BOTH, booleanType0.getPossibleToBooleanOutcomes());
      assertEquals(false, booleanType0.isNominalConstructor());
      assertEquals(false, booleanType0.isEnumElementType());
      assertEquals(false, booleanType0.isCheckedUnknownType());
      assertEquals(false, booleanType0.isOrdinaryFunction());
      assertEquals(false, booleanType0.isNoObjectType());
      assertEquals(false, booleanType0.isFunctionPrototypeType());
      assertEquals(true, booleanType0.matchesStringContext());
      assertEquals(false, booleanType0.isNoType());
      assertEquals(false, booleanType0.isTemplateType());
      assertEquals(false, booleanType0.isAllType());
      assertEquals(false, booleanType0.isVoidType());
      assertEquals(false, booleanType0.isNullable());
      assertEquals(false, booleanType0.isParameterizedType());
      assertEquals(false, booleanType0.isNominalType());
      assertEquals(false, booleanType0.isRecordType());
      assertEquals("boolean", booleanType0.getDisplayName());
      assertEquals(false, booleanType0.isConstructor());
      assertEquals(false, booleanType0.isStringValueType());
      assertEquals(false, booleanType0.isNullType());
      assertEquals(false, booleanType0.isFunctionType());
      assertEquals(false, booleanType0.isResolved());
      assertEquals("window", jqueryCodingConvention0.getGlobalObject());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      TemplateType templateType0 = JSType.toMaybeTemplateType((JSType) booleanType0);
      assertNull(templateType0);
      assertEquals(false, booleanType0.isInterface());
      assertEquals(false, booleanType0.isNumberValueType());
      assertEquals(false, booleanType0.isUnionType());
      assertEquals(true, booleanType0.isBooleanValueType());
      assertEquals(false, booleanType0.isNoResolvedType());
      assertEquals(false, booleanType0.isEnumType());
      assertEquals(true, booleanType0.matchesNumberContext());
      assertEquals(true, booleanType0.matchesObjectContext());
      assertEquals(BooleanLiteralSet.BOTH, booleanType0.getPossibleToBooleanOutcomes());
      assertEquals(false, booleanType0.isNominalConstructor());
      assertEquals(false, booleanType0.isEnumElementType());
      assertEquals(false, booleanType0.isCheckedUnknownType());
      assertEquals(false, booleanType0.isOrdinaryFunction());
      assertEquals(false, booleanType0.isNoObjectType());
      assertEquals(false, booleanType0.isFunctionPrototypeType());
      assertEquals(true, booleanType0.matchesStringContext());
      assertEquals(false, booleanType0.isNoType());
      assertEquals(false, booleanType0.isTemplateType());
      assertEquals(false, booleanType0.isAllType());
      assertEquals(false, booleanType0.isVoidType());
      assertEquals(false, booleanType0.isNullable());
      assertEquals(false, booleanType0.isParameterizedType());
      assertEquals(false, booleanType0.isNominalType());
      assertEquals(false, booleanType0.isRecordType());
      assertEquals("boolean", booleanType0.getDisplayName());
      assertEquals(false, booleanType0.isConstructor());
      assertEquals(false, booleanType0.isStringValueType());
      assertEquals(false, booleanType0.isNullType());
      assertEquals(false, booleanType0.isFunctionType());
      assertEquals(false, booleanType0.isResolved());
      assertEquals("window", jqueryCodingConvention0.getGlobalObject());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      JSType jSType0 = closureReverseAbstractInterpreter0.getRestrictedWithoutUndefined(templateType0);
      assertNull(jSType0);
      assertEquals(false, booleanType0.isInterface());
      assertEquals(false, booleanType0.isNumberValueType());
      assertEquals(false, booleanType0.isUnionType());
      assertEquals(true, booleanType0.isBooleanValueType());
      assertEquals(false, booleanType0.isNoResolvedType());
      assertEquals(false, booleanType0.isEnumType());
      assertEquals(true, booleanType0.matchesNumberContext());
      assertEquals(true, booleanType0.matchesObjectContext());
      assertEquals(BooleanLiteralSet.BOTH, booleanType0.getPossibleToBooleanOutcomes());
      assertEquals(false, booleanType0.isNominalConstructor());
      assertEquals(false, booleanType0.isEnumElementType());
      assertEquals(false, booleanType0.isCheckedUnknownType());
      assertEquals(false, booleanType0.isOrdinaryFunction());
      assertEquals(false, booleanType0.isNoObjectType());
      assertEquals(false, booleanType0.isFunctionPrototypeType());
      assertEquals(true, booleanType0.matchesStringContext());
      assertEquals(false, booleanType0.isNoType());
      assertEquals(false, booleanType0.isTemplateType());
      assertEquals(false, booleanType0.isAllType());
      assertEquals(false, booleanType0.isVoidType());
      assertEquals(false, booleanType0.isNullable());
      assertEquals(false, booleanType0.isParameterizedType());
      assertEquals(false, booleanType0.isNominalType());
      assertEquals(false, booleanType0.isRecordType());
      assertEquals("boolean", booleanType0.getDisplayName());
      assertEquals(false, booleanType0.isConstructor());
      assertEquals(false, booleanType0.isStringValueType());
      assertEquals(false, booleanType0.isNullType());
      assertEquals(false, booleanType0.isFunctionType());
      assertEquals(false, booleanType0.isResolved());
      assertEquals("window", jqueryCodingConvention0.getGlobalObject());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      String string1 = "string";
      assertNotSame(string1, string0);
      
      StringType stringType0 = (StringType)semanticReverseAbstractInterpreter0.getRestrictedByTypeOfResult(jSType0, string1, boolean0);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertNotNull(stringType0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertEquals(false, booleanType0.isInterface());
      assertEquals(false, booleanType0.isNumberValueType());
      assertEquals(false, booleanType0.isUnionType());
      assertEquals(true, booleanType0.isBooleanValueType());
      assertEquals(false, booleanType0.isNoResolvedType());
      assertEquals(false, booleanType0.isEnumType());
      assertEquals(true, booleanType0.matchesNumberContext());
      assertEquals(true, booleanType0.matchesObjectContext());
      assertEquals(BooleanLiteralSet.BOTH, booleanType0.getPossibleToBooleanOutcomes());
      assertEquals(false, booleanType0.isNominalConstructor());
      assertEquals(false, booleanType0.isEnumElementType());
      assertEquals(false, booleanType0.isCheckedUnknownType());
      assertEquals(false, booleanType0.isOrdinaryFunction());
      assertEquals(false, booleanType0.isNoObjectType());
      assertEquals(false, booleanType0.isFunctionPrototypeType());
      assertEquals(true, booleanType0.matchesStringContext());
      assertEquals(false, booleanType0.isNoType());
      assertEquals(false, booleanType0.isTemplateType());
      assertEquals(false, booleanType0.isAllType());
      assertEquals(false, booleanType0.isVoidType());
      assertEquals(false, booleanType0.isNullable());
      assertEquals(false, booleanType0.isParameterizedType());
      assertEquals(false, booleanType0.isNominalType());
      assertEquals(false, booleanType0.isRecordType());
      assertEquals("boolean", booleanType0.getDisplayName());
      assertEquals(false, booleanType0.isConstructor());
      assertEquals(false, booleanType0.isStringValueType());
      assertEquals(false, booleanType0.isNullType());
      assertEquals(false, booleanType0.isFunctionType());
      assertEquals(false, booleanType0.isResolved());
      assertEquals("window", jqueryCodingConvention0.getGlobalObject());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, stringType0.isVoidType());
      assertEquals(false, stringType0.isOrdinaryFunction());
      assertEquals(false, stringType0.isNullType());
      assertEquals(true, stringType0.isStringValueType());
      assertEquals(true, stringType0.matchesObjectContext());
      assertEquals(BooleanLiteralSet.BOTH, stringType0.getPossibleToBooleanOutcomes());
      assertEquals(false, stringType0.isNoResolvedType());
      assertEquals(false, stringType0.isEnumType());
      assertEquals(true, stringType0.matchesStringContext());
      assertEquals(false, stringType0.isUnionType());
      assertEquals(false, stringType0.isFunctionPrototypeType());
      assertEquals(false, stringType0.isNoObjectType());
      assertEquals(false, stringType0.isResolved());
      assertEquals("string", stringType0.getDisplayName());
      assertEquals(false, stringType0.isConstructor());
      assertEquals(false, stringType0.isParameterizedType());
      assertEquals(false, stringType0.isNoType());
      assertEquals(false, stringType0.isAllType());
      assertEquals(false, stringType0.isNominalType());
      assertEquals(false, stringType0.isCheckedUnknownType());
      assertEquals(false, stringType0.isNominalConstructor());
      assertEquals(false, stringType0.isBooleanValueType());
      assertEquals(false, stringType0.isTemplateType());
      assertEquals(false, stringType0.isNumberValueType());
      assertEquals(true, stringType0.matchesNumberContext());
      assertEquals(false, stringType0.isFunctionType());
      assertEquals(false, stringType0.isRecordType());
      assertEquals(false, stringType0.isInterface());
      assertEquals(false, stringType0.isEnumElementType());
  }

  @Test
  public void test01()  throws Throwable  {
      GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
      assertNotNull(googleCodingConvention0);
      
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      assertNotNull(linkedList0);
      assertEquals("[]", linkedList0.toString());
      assertEquals(0, linkedList0.size());
      
      Node node0 = jSTypeRegistry0.createParameters((List<JSType>) linkedList0);
      assertNotNull(node0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isStringKey());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.hasOneChild());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isScript());
      assertEquals(false, node0.isIf());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isInstanceOf());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isTry());
      assertEquals(true, node0.isParamList());
      assertEquals(83, node0.getType());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isString());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isVoid());
      assertEquals(0, node0.getLength());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals("[]", linkedList0.toString());
      assertEquals(0, linkedList0.size());
      
      ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter((CodingConvention) googleCodingConvention0, jSTypeRegistry0);
      assertNotNull(closureReverseAbstractInterpreter0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      FlowScope flowScope0 = null;
      JSType jSType0 = closureReverseAbstractInterpreter0.getTypeIfRefinable(node0, flowScope0);
      assertNull(jSType0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isStringKey());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.hasOneChild());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isScript());
      assertEquals(false, node0.isIf());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isInstanceOf());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isTry());
      assertEquals(true, node0.isParamList());
      assertEquals(83, node0.getType());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isString());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isVoid());
      assertEquals(0, node0.getLength());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals("[]", linkedList0.toString());
      assertEquals(0, linkedList0.size());
      
      SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter((CodingConvention) googleCodingConvention0, jSTypeRegistry0);
      assertNotNull(semanticReverseAbstractInterpreter0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      String string0 = "boolean";
      boolean boolean0 = true;
      BooleanType booleanType0 = (BooleanType)semanticReverseAbstractInterpreter0.getRestrictedByTypeOfResult(jSType0, string0, boolean0);
      assertNotNull(booleanType0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isStringKey());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.hasOneChild());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isScript());
      assertEquals(false, node0.isIf());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isInstanceOf());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isTry());
      assertEquals(true, node0.isParamList());
      assertEquals(83, node0.getType());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isString());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isVoid());
      assertEquals(0, node0.getLength());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(false, booleanType0.isCheckedUnknownType());
      assertEquals(false, booleanType0.isNullable());
      assertEquals(false, booleanType0.isNominalConstructor());
      assertEquals(false, booleanType0.isFunctionPrototypeType());
      assertEquals(false, booleanType0.isOrdinaryFunction());
      assertEquals(false, booleanType0.isUnionType());
      assertEquals(false, booleanType0.isNoObjectType());
      assertEquals(false, booleanType0.isNoResolvedType());
      assertEquals(false, booleanType0.isNoType());
      assertEquals(false, booleanType0.isRecordType());
      assertEquals(BooleanLiteralSet.BOTH, booleanType0.getPossibleToBooleanOutcomes());
      assertEquals(false, booleanType0.isEnumElementType());
      assertEquals(false, booleanType0.isAllType());
      assertEquals(true, booleanType0.matchesStringContext());
      assertEquals(false, booleanType0.isNullType());
      assertEquals(false, booleanType0.isTemplateType());
      assertEquals(false, booleanType0.isEnumType());
      assertEquals(false, booleanType0.isStringValueType());
      assertEquals(false, booleanType0.isNominalType());
      assertEquals("boolean", booleanType0.getDisplayName());
      assertEquals(false, booleanType0.isParameterizedType());
      assertEquals(true, booleanType0.isBooleanValueType());
      assertEquals(false, booleanType0.isResolved());
      assertEquals(true, booleanType0.matchesNumberContext());
      assertEquals(false, booleanType0.isConstructor());
      assertEquals(false, booleanType0.isNumberValueType());
      assertEquals(false, booleanType0.isInterface());
      assertEquals(false, booleanType0.isFunctionType());
      assertEquals(false, booleanType0.isVoidType());
      assertEquals(true, booleanType0.matchesObjectContext());
      assertEquals("[]", linkedList0.toString());
      assertEquals(0, linkedList0.size());
  }

  @Test
  public void test02()  throws Throwable  {
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      assertNotNull(closureCodingConvention0);
      assertEquals("goog.global", closureCodingConvention0.getGlobalObject());
      assertEquals("goog.abstractMethod", closureCodingConvention0.getAbstractMethodName());
      assertEquals("goog.exportProperty", closureCodingConvention0.getExportPropertyFunction());
      assertEquals("goog.exportSymbol", closureCodingConvention0.getExportSymbolFunction());
      
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      boolean boolean0 = true;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0, boolean0);
      assertNotNull(jSTypeRegistry0);
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter((CodingConvention) closureCodingConvention0, jSTypeRegistry0);
      assertNotNull(closureReverseAbstractInterpreter0);
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals("goog.global", closureCodingConvention0.getGlobalObject());
      assertEquals("goog.abstractMethod", closureCodingConvention0.getAbstractMethodName());
      assertEquals("goog.exportProperty", closureCodingConvention0.getExportPropertyFunction());
      assertEquals("goog.exportSymbol", closureCodingConvention0.getExportSymbolFunction());
      
      String string0 = closureCodingConvention0.getExportPropertyFunction();
      assertEquals("goog.exportProperty", string0);
      assertNotNull(string0);
      assertEquals("goog.global", closureCodingConvention0.getGlobalObject());
      assertEquals("goog.abstractMethod", closureCodingConvention0.getAbstractMethodName());
      assertEquals("goog.exportProperty", closureCodingConvention0.getExportPropertyFunction());
      assertEquals("goog.exportSymbol", closureCodingConvention0.getExportSymbolFunction());
      
      JSType jSType0 = null;
      UnknownType unknownType0 = (UnknownType)closureReverseAbstractInterpreter0.getRestrictedByTypeOfResult(jSType0, string0, boolean0);
      assertNotNull(unknownType0);
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals("goog.global", closureCodingConvention0.getGlobalObject());
      assertEquals("goog.abstractMethod", closureCodingConvention0.getAbstractMethodName());
      assertEquals("goog.exportProperty", closureCodingConvention0.getExportPropertyFunction());
      assertEquals("goog.exportSymbol", closureCodingConvention0.getExportSymbolFunction());
      assertEquals("?", unknownType0.getReferenceName());
      assertEquals(false, unknownType0.isFunctionPrototypeType());
      assertEquals(BooleanLiteralSet.BOTH, unknownType0.getPossibleToBooleanOutcomes());
      assertEquals(2147483647, unknownType0.getPropertiesCount());
      assertEquals(false, unknownType0.isEnumElementType());
      assertEquals(false, unknownType0.isStringValueType());
      assertEquals(false, unknownType0.isEnumType());
      assertEquals(true, unknownType0.matchesObjectContext());
      assertEquals(false, unknownType0.isNumberValueType());
      assertEquals(false, unknownType0.isNoType());
      assertEquals(false, unknownType0.isCheckedUnknownType());
      assertEquals(false, unknownType0.hasCachedValues());
      assertEquals(false, unknownType0.isNativeObjectType());
      assertEquals(false, unknownType0.isNoResolvedType());
      assertEquals(false, unknownType0.isResolved());
      assertEquals(false, unknownType0.isVoidType());
      assertEquals(false, unknownType0.isBooleanValueType());
      assertEquals(false, unknownType0.isConstructor());
      assertEquals(false, unknownType0.hasReferenceName());
      assertEquals(false, unknownType0.isInterface());
      assertEquals(false, unknownType0.isUnionType());
      assertEquals(false, unknownType0.isOrdinaryFunction());
      assertEquals(false, unknownType0.isRecordType());
      assertEquals(false, unknownType0.isNominalType());
      assertEquals(true, unknownType0.isUnknownType());
      assertEquals(true, unknownType0.matchesStringContext());
      assertEquals(false, unknownType0.isNullType());
      assertEquals(false, unknownType0.isNominalConstructor());
      assertEquals(false, unknownType0.isAllType());
      assertEquals(false, unknownType0.isNoObjectType());
      assertEquals(false, unknownType0.isTemplateType());
      assertEquals(true, unknownType0.hasDisplayName());
      assertEquals("Unknown", unknownType0.getDisplayName());
      assertEquals(true, unknownType0.matchesNumberContext());
      assertEquals(false, unknownType0.isParameterizedType());
      assertEquals(false, unknownType0.isFunctionType());
      assertEquals(true, unknownType0.canBeCalled());
      assertEquals(true, unknownType0.isNullable());
      
      String string1 = "number";
      assertNotSame(string1, string0);
      assertFalse(string1.equals((Object)string0));
      
      NumberType numberType0 = (NumberType)closureReverseAbstractInterpreter0.getRestrictedByTypeOfResult(unknownType0, string1, boolean0);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertNotNull(numberType0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertEquals(true, numberType0.matchesObjectContext());
      assertEquals(false, numberType0.isTemplateType());
      assertEquals(false, numberType0.isCheckedUnknownType());
      assertEquals(false, numberType0.isOrdinaryFunction());
      assertEquals(false, numberType0.isBooleanValueType());
      assertEquals(false, numberType0.isNoType());
      assertEquals(false, numberType0.isNullable());
      assertEquals(false, numberType0.isNominalType());
      assertEquals(false, numberType0.isEnumType());
      assertEquals(false, numberType0.isStringValueType());
      assertEquals(false, numberType0.isConstructor());
      assertEquals(true, numberType0.isNumberValueType());
      assertEquals(false, numberType0.isNominalConstructor());
      assertEquals(false, numberType0.isUnionType());
      assertEquals(true, numberType0.matchesNumberContext());
      assertEquals(false, numberType0.isResolved());
      assertEquals(BooleanLiteralSet.BOTH, numberType0.getPossibleToBooleanOutcomes());
      assertEquals(false, numberType0.isEnumElementType());
      assertEquals(false, numberType0.isAllType());
      assertEquals(false, numberType0.isFunctionType());
      assertEquals(false, numberType0.isVoidType());
      assertEquals(false, numberType0.isParameterizedType());
      assertEquals(false, numberType0.isNoObjectType());
      assertEquals(false, numberType0.isFunctionPrototypeType());
      assertEquals(false, numberType0.isRecordType());
      assertEquals(false, numberType0.isInterface());
      assertEquals(false, numberType0.isNoResolvedType());
      assertEquals("number", numberType0.getDisplayName());
      assertEquals(true, numberType0.matchesStringContext());
      assertEquals(false, numberType0.isNullType());
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals("goog.global", closureCodingConvention0.getGlobalObject());
      assertEquals("goog.abstractMethod", closureCodingConvention0.getAbstractMethodName());
      assertEquals("goog.exportProperty", closureCodingConvention0.getExportPropertyFunction());
      assertEquals("goog.exportSymbol", closureCodingConvention0.getExportSymbolFunction());
      assertEquals("?", unknownType0.getReferenceName());
      assertEquals(false, unknownType0.isFunctionPrototypeType());
      assertEquals(BooleanLiteralSet.BOTH, unknownType0.getPossibleToBooleanOutcomes());
      assertEquals(2147483647, unknownType0.getPropertiesCount());
      assertEquals(false, unknownType0.isEnumElementType());
      assertEquals(false, unknownType0.isStringValueType());
      assertEquals(false, unknownType0.isEnumType());
      assertEquals(true, unknownType0.matchesObjectContext());
      assertEquals(false, unknownType0.isNumberValueType());
      assertEquals(false, unknownType0.isNoType());
      assertEquals(false, unknownType0.isCheckedUnknownType());
      assertEquals(false, unknownType0.hasCachedValues());
      assertEquals(false, unknownType0.isNativeObjectType());
      assertEquals(false, unknownType0.isNoResolvedType());
      assertEquals(false, unknownType0.isResolved());
      assertEquals(false, unknownType0.isVoidType());
      assertEquals(false, unknownType0.isBooleanValueType());
      assertEquals(false, unknownType0.isConstructor());
      assertEquals(false, unknownType0.hasReferenceName());
      assertEquals(false, unknownType0.isInterface());
      assertEquals(false, unknownType0.isUnionType());
      assertEquals(false, unknownType0.isOrdinaryFunction());
      assertEquals(false, unknownType0.isRecordType());
      assertEquals(false, unknownType0.isNominalType());
      assertEquals(true, unknownType0.isUnknownType());
      assertEquals(true, unknownType0.matchesStringContext());
      assertEquals(false, unknownType0.isNullType());
      assertEquals(false, unknownType0.isNominalConstructor());
      assertEquals(false, unknownType0.isAllType());
      assertEquals(false, unknownType0.isNoObjectType());
      assertEquals(false, unknownType0.isTemplateType());
      assertEquals(true, unknownType0.hasDisplayName());
      assertEquals("Unknown", unknownType0.getDisplayName());
      assertEquals(true, unknownType0.matchesNumberContext());
      assertEquals(false, unknownType0.isParameterizedType());
      assertEquals(false, unknownType0.isFunctionType());
      assertEquals(true, unknownType0.canBeCalled());
      assertEquals(true, unknownType0.isNullable());
  }

  @Test
  public void test03()  throws Throwable  {
      GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
      assertNotNull(googleCodingConvention0);
      
      JqueryCodingConvention jqueryCodingConvention0 = new JqueryCodingConvention((CodingConvention) googleCodingConvention0);
      assertNotNull(jqueryCodingConvention0);
      assertEquals("window", jqueryCodingConvention0.getGlobalObject());
      
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter((CodingConvention) jqueryCodingConvention0, jSTypeRegistry0);
      assertNotNull(semanticReverseAbstractInterpreter0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals("window", jqueryCodingConvention0.getGlobalObject());
      
      JSType jSType0 = null;
      String string0 = "function";
      boolean boolean0 = true;
      JSType jSType1 = semanticReverseAbstractInterpreter0.getRestrictedByTypeOfResult(jSType0, string0, boolean0);
      assertNotNull(jSType1);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals("window", jqueryCodingConvention0.getGlobalObject());
      assertEquals(false, jSType1.isInterface());
      assertEquals(false, jSType1.isFunctionPrototypeType());
      assertEquals(false, jSType1.isNoObjectType());
      assertEquals(false, jSType1.isNoType());
      assertEquals(false, jSType1.isEnumElementType());
      assertEquals(false, jSType1.isVoidType());
      assertEquals(false, jSType1.isStringValueType());
      assertEquals(false, jSType1.isParameterizedType());
      assertEquals(false, jSType1.isUnionType());
      assertEquals(false, jSType1.isNoResolvedType());
      assertEquals(false, jSType1.isTemplateType());
      assertEquals(false, jSType1.isNumberValueType());
      assertEquals(true, jSType1.matchesObjectContext());
      assertEquals(false, jSType1.isBooleanValueType());
      assertEquals(false, jSType1.isOrdinaryFunction());
      assertEquals(true, jSType1.isFunctionType());
      assertEquals(true, jSType1.isNominalConstructor());
      assertEquals(false, jSType1.isAllType());
      assertEquals(false, jSType1.isRecordType());
      assertEquals(true, jSType1.isConstructor());
      assertEquals(false, jSType1.isCheckedUnknownType());
      assertEquals(false, jSType1.isNominalType());
      assertEquals(false, jSType1.isEnumType());
      assertEquals(false, jSType1.isNullType());
      assertEquals(false, jSType1.isResolved());
  }

  @Test
  public void test04()  throws Throwable  {
      JqueryCodingConvention jqueryCodingConvention0 = new JqueryCodingConvention();
      assertNotNull(jqueryCodingConvention0);
      assertEquals("window", jqueryCodingConvention0.getGlobalObject());
      
      JSTypeRegistry jSTypeRegistry0 = null;
      String string0 = "kNJZ*58=':>$p0];Z";
      SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter((CodingConvention) jqueryCodingConvention0, jSTypeRegistry0);
      assertNotNull(semanticReverseAbstractInterpreter0);
      assertEquals("window", jqueryCodingConvention0.getGlobalObject());
      
      String string1 = jqueryCodingConvention0.getAbstractMethodName();
      assertNull(string1);
      assertEquals("window", jqueryCodingConvention0.getGlobalObject());
      
      JSType jSType0 = null;
      JSType jSType1 = semanticReverseAbstractInterpreter0.getRestrictedWithoutNull(jSType0);
      assertNull(jSType1);
      assertEquals("window", jqueryCodingConvention0.getGlobalObject());
      
      boolean boolean0 = jqueryCodingConvention0.isPrivate(string0);
      assertFalse(boolean0);
      assertEquals("window", jqueryCodingConvention0.getGlobalObject());
      
      JSType jSType2 = semanticReverseAbstractInterpreter0.getRestrictedByTypeOfResult(jSType1, string1, boolean0);
      assertNull(jSType2);
      assertEquals("window", jqueryCodingConvention0.getGlobalObject());
  }

  @Test
  public void test05()  throws Throwable  {
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      assertNotNull(closureCodingConvention0);
      assertEquals("goog.exportSymbol", closureCodingConvention0.getExportSymbolFunction());
      assertEquals("goog.exportProperty", closureCodingConvention0.getExportPropertyFunction());
      assertEquals("goog.global", closureCodingConvention0.getGlobalObject());
      assertEquals("goog.abstractMethod", closureCodingConvention0.getAbstractMethodName());
      
      JqueryCodingConvention jqueryCodingConvention0 = new JqueryCodingConvention((CodingConvention) closureCodingConvention0);
      assertNotNull(jqueryCodingConvention0);
      assertEquals("goog.exportSymbol", closureCodingConvention0.getExportSymbolFunction());
      assertEquals("goog.exportProperty", closureCodingConvention0.getExportPropertyFunction());
      assertEquals("goog.global", closureCodingConvention0.getGlobalObject());
      assertEquals("goog.abstractMethod", closureCodingConvention0.getAbstractMethodName());
      assertEquals("window", jqueryCodingConvention0.getGlobalObject());
      
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      boolean boolean0 = true;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0, boolean0);
      assertNotNull(jSTypeRegistry0);
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter((CodingConvention) jqueryCodingConvention0, jSTypeRegistry0);
      assertNotNull(closureReverseAbstractInterpreter0);
      assertEquals("goog.exportSymbol", closureCodingConvention0.getExportSymbolFunction());
      assertEquals("goog.exportProperty", closureCodingConvention0.getExportPropertyFunction());
      assertEquals("goog.global", closureCodingConvention0.getGlobalObject());
      assertEquals("goog.abstractMethod", closureCodingConvention0.getAbstractMethodName());
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals("window", jqueryCodingConvention0.getGlobalObject());
      
      JSTypeNative jSTypeNative0 = JSTypeNative.FUNCTION_PROTOTYPE;
      JSType jSType0 = closureReverseAbstractInterpreter0.getNativeType(jSTypeNative0);
      assertNotNull(jSType0);
      assertEquals("goog.exportSymbol", closureCodingConvention0.getExportSymbolFunction());
      assertEquals("goog.exportProperty", closureCodingConvention0.getExportPropertyFunction());
      assertEquals("goog.global", closureCodingConvention0.getGlobalObject());
      assertEquals("goog.abstractMethod", closureCodingConvention0.getAbstractMethodName());
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, jSType0.isTemplateType());
      assertEquals(false, jSType0.isNoResolvedType());
      assertEquals(false, jSType0.isNominalType());
      assertEquals(false, jSType0.isEnumType());
      assertEquals(false, jSType0.isUnionType());
      assertEquals(false, jSType0.isNominalConstructor());
      assertEquals(false, jSType0.isEnumElementType());
      assertEquals(true, jSType0.isFunctionPrototypeType());
      assertEquals(false, jSType0.isNoObjectType());
      assertEquals(false, jSType0.isNullType());
      assertEquals(true, jSType0.matchesObjectContext());
      assertEquals(false, jSType0.isNoType());
      assertEquals(false, jSType0.isInterface());
      assertEquals(false, jSType0.isOrdinaryFunction());
      assertEquals(false, jSType0.isBooleanValueType());
      assertEquals(false, jSType0.isConstructor());
      assertEquals(false, jSType0.isParameterizedType());
      assertEquals(false, jSType0.isCheckedUnknownType());
      assertEquals(false, jSType0.isRecordType());
      assertEquals(false, jSType0.isResolved());
      assertEquals(false, jSType0.isNumberValueType());
      assertEquals(false, jSType0.isAllType());
      assertEquals(false, jSType0.isFunctionType());
      assertEquals(false, jSType0.isVoidType());
      assertEquals(false, jSType0.isStringValueType());
      assertEquals("window", jqueryCodingConvention0.getGlobalObject());
      
      String string0 = "function";
      boolean boolean1 = false;
      JSType jSType1 = closureReverseAbstractInterpreter0.getRestrictedByTypeOfResult(jSType0, string0, boolean1);
      assertNull(jSType1);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean0 == boolean1);
      assertEquals("goog.exportSymbol", closureCodingConvention0.getExportSymbolFunction());
      assertEquals("goog.exportProperty", closureCodingConvention0.getExportPropertyFunction());
      assertEquals("goog.global", closureCodingConvention0.getGlobalObject());
      assertEquals("goog.abstractMethod", closureCodingConvention0.getAbstractMethodName());
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, jSType0.isTemplateType());
      assertEquals(false, jSType0.isNoResolvedType());
      assertEquals(false, jSType0.isNominalType());
      assertEquals(false, jSType0.isEnumType());
      assertEquals(false, jSType0.isUnionType());
      assertEquals(false, jSType0.isNominalConstructor());
      assertEquals(false, jSType0.isEnumElementType());
      assertEquals(true, jSType0.isFunctionPrototypeType());
      assertEquals(false, jSType0.isNoObjectType());
      assertEquals(false, jSType0.isNullType());
      assertEquals(true, jSType0.matchesObjectContext());
      assertEquals(false, jSType0.isNoType());
      assertEquals(false, jSType0.isInterface());
      assertEquals(false, jSType0.isOrdinaryFunction());
      assertEquals(false, jSType0.isBooleanValueType());
      assertEquals(false, jSType0.isConstructor());
      assertEquals(false, jSType0.isParameterizedType());
      assertEquals(false, jSType0.isCheckedUnknownType());
      assertEquals(false, jSType0.isRecordType());
      assertEquals(false, jSType0.isResolved());
      assertEquals(false, jSType0.isNumberValueType());
      assertEquals(false, jSType0.isAllType());
      assertEquals(false, jSType0.isFunctionType());
      assertEquals(false, jSType0.isVoidType());
      assertEquals(false, jSType0.isStringValueType());
      assertEquals("window", jqueryCodingConvention0.getGlobalObject());
  }

  @Test
  public void test06()  throws Throwable  {
      GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
      //  // Unstable assertion: assertNotNull(googleCodingConvention0);
      
      ErrorReporter errorReporter0 = null;
      boolean boolean0 = false;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(errorReporter0, boolean0);
      //  // Unstable assertion: assertNotNull(jSTypeRegistry0);
      //  // Unstable assertion: assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter((CodingConvention) googleCodingConvention0, jSTypeRegistry0);
      //  // Unstable assertion: assertNotNull(semanticReverseAbstractInterpreter0);
      //  // Unstable assertion: assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter((CodingConvention) googleCodingConvention0, jSTypeRegistry0);
      //  // Unstable assertion: assertNotNull(closureReverseAbstractInterpreter0);
      //  // Unstable assertion: assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      JSTypeNative jSTypeNative0 = JSTypeNative.OBJECT_NUMBER_STRING_BOOLEAN;
      UnionType unionType0 = (UnionType)closureReverseAbstractInterpreter0.getNativeType(jSTypeNative0);
      //  // Unstable assertion: assertNotNull(unionType0);
      //  // Unstable assertion: assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      //  // Unstable assertion: assertEquals(false, unionType0.isVoidType());
      //  // Unstable assertion: assertEquals(false, unionType0.isAllType());
      //  // Unstable assertion: assertEquals(false, unionType0.isTemplateType());
      //  // Unstable assertion: assertEquals(false, unionType0.isCheckedUnknownType());
      //  // Unstable assertion: assertEquals(false, unionType0.isNullType());
      //  // Unstable assertion: assertEquals(false, unionType0.isConstructor());
      //  // Unstable assertion: assertEquals(false, unionType0.isNoObjectType());
      //  // Unstable assertion: assertEquals(false, unionType0.isEnumElementType());
      //  // Unstable assertion: assertEquals(false, unionType0.isNoResolvedType());
      //  // Unstable assertion: assertEquals(false, unionType0.isNoType());
      //  // Unstable assertion: assertEquals(false, unionType0.isNumberValueType());
      //  // Unstable assertion: assertEquals(false, unionType0.isEnumType());
      //  // Unstable assertion: assertEquals(false, unionType0.isFunctionType());
      //  // Unstable assertion: assertEquals(false, unionType0.isFunctionPrototypeType());
      //  // Unstable assertion: assertEquals(false, unionType0.isRecordType());
      //  // Unstable assertion: assertEquals(false, unionType0.isInterface());
      //  // Unstable assertion: assertEquals(false, unionType0.isOrdinaryFunction());
      //  // Unstable assertion: assertEquals(false, unionType0.isBooleanValueType());
      //  // Unstable assertion: assertEquals(false, unionType0.isStringValueType());
      //  // Unstable assertion: assertEquals(false, unionType0.isParameterizedType());
      //  // Unstable assertion: assertEquals(false, unionType0.isNominalType());
      //  // Unstable assertion: assertEquals(false, unionType0.isNominalConstructor());
      //  // Unstable assertion: assertEquals(false, unionType0.isResolved());
      //  // Unstable assertion: assertEquals(true, unionType0.isUnionType());
      
      String string0 = "boolegn";
      JSType jSType0 = semanticReverseAbstractInterpreter0.getRestrictedByTypeOfResult(unionType0, string0, boolean0);
      //  // Unstable assertion: assertNull(jSType0);
      //  // Unstable assertion: assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      //  // Unstable assertion: assertEquals(false, unionType0.isVoidType());
      //  // Unstable assertion: assertEquals(false, unionType0.isAllType());
      //  // Unstable assertion: assertEquals(false, unionType0.isTemplateType());
      //  // Unstable assertion: assertEquals(false, unionType0.isCheckedUnknownType());
      //  // Unstable assertion: assertEquals(false, unionType0.isNullType());
      //  // Unstable assertion: assertEquals(false, unionType0.isConstructor());
      //  // Unstable assertion: assertEquals(false, unionType0.isNoObjectType());
      //  // Unstable assertion: assertEquals(false, unionType0.isEnumElementType());
      //  // Unstable assertion: assertEquals(false, unionType0.isNoResolvedType());
      //  // Unstable assertion: assertEquals(false, unionType0.isNoType());
      //  // Unstable assertion: assertEquals(false, unionType0.isNumberValueType());
      //  // Unstable assertion: assertEquals(false, unionType0.isEnumType());
      //  // Unstable assertion: assertEquals(false, unionType0.isFunctionType());
      //  // Unstable assertion: assertEquals(false, unionType0.isFunctionPrototypeType());
      //  // Unstable assertion: assertEquals(false, unionType0.isRecordType());
      //  // Unstable assertion: assertEquals(false, unionType0.isInterface());
      //  // Unstable assertion: assertEquals(false, unionType0.isOrdinaryFunction());
      //  // Unstable assertion: assertEquals(false, unionType0.isBooleanValueType());
      //  // Unstable assertion: assertEquals(false, unionType0.isStringValueType());
      //  // Unstable assertion: assertEquals(false, unionType0.isParameterizedType());
      //  // Unstable assertion: assertEquals(false, unionType0.isNominalType());
      //  // Unstable assertion: assertEquals(false, unionType0.isNominalConstructor());
      //  // Unstable assertion: assertEquals(false, unionType0.isResolved());
      //  // Unstable assertion: assertEquals(true, unionType0.isUnionType());
  }

  @Test
  public void test07()  throws Throwable  {
      GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
      //  // Unstable assertion: assertNotNull(googleCodingConvention0);
      
      ErrorReporter errorReporter0 = null;
      boolean boolean0 = false;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(errorReporter0, boolean0);
      //  // Unstable assertion: assertNotNull(jSTypeRegistry0);
      //  // Unstable assertion: assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter((CodingConvention) googleCodingConvention0, jSTypeRegistry0);
      //  // Unstable assertion: assertNotNull(semanticReverseAbstractInterpreter0);
      //  // Unstable assertion: assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter((CodingConvention) googleCodingConvention0, jSTypeRegistry0);
      //  // Unstable assertion: assertNotNull(closureReverseAbstractInterpreter0);
      //  // Unstable assertion: assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      JSTypeNative jSTypeNative0 = JSTypeNative.NULL_VOID;
      UnionType unionType0 = (UnionType)closureReverseAbstractInterpreter0.getNativeType(jSTypeNative0);
      //  // Unstable assertion: assertNotNull(unionType0);
      //  // Unstable assertion: assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      //  // Unstable assertion: assertEquals(false, unionType0.isResolved());
      //  // Unstable assertion: assertEquals(false, unionType0.isEnumElementType());
      //  // Unstable assertion: assertEquals(false, unionType0.isNominalConstructor());
      //  // Unstable assertion: assertEquals(false, unionType0.isVoidType());
      //  // Unstable assertion: assertEquals(false, unionType0.isInterface());
      //  // Unstable assertion: assertEquals(false, unionType0.isOrdinaryFunction());
      //  // Unstable assertion: assertEquals(false, unionType0.isNumberValueType());
      //  // Unstable assertion: assertEquals(false, unionType0.isRecordType());
      //  // Unstable assertion: assertEquals(false, unionType0.isNoObjectType());
      //  // Unstable assertion: assertEquals(false, unionType0.isCheckedUnknownType());
      //  // Unstable assertion: assertEquals(false, unionType0.isFunctionType());
      //  // Unstable assertion: assertEquals(false, unionType0.isEnumType());
      //  // Unstable assertion: assertEquals(false, unionType0.isConstructor());
      //  // Unstable assertion: assertEquals(false, unionType0.isBooleanValueType());
      //  // Unstable assertion: assertEquals(false, unionType0.isNoType());
      //  // Unstable assertion: assertEquals(false, unionType0.isFunctionPrototypeType());
      //  // Unstable assertion: assertEquals(false, unionType0.isAllType());
      //  // Unstable assertion: assertEquals(false, unionType0.isStringValueType());
      //  // Unstable assertion: assertEquals(false, unionType0.isNoResolvedType());
      //  // Unstable assertion: assertEquals(false, unionType0.isParameterizedType());
      //  // Unstable assertion: assertEquals(true, unionType0.isUnionType());
      //  // Unstable assertion: assertEquals(false, unionType0.isNullType());
      //  // Unstable assertion: assertEquals(false, unionType0.isTemplateType());
      //  // Unstable assertion: assertEquals(false, unionType0.isNominalType());
      
      String string0 = "v";
      JSType jSType0 = semanticReverseAbstractInterpreter0.getRestrictedByTypeOfResult(unionType0, string0, boolean0);
      //  // Unstable assertion: assertNull(jSType0);
      //  // Unstable assertion: assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      //  // Unstable assertion: assertEquals(false, unionType0.isResolved());
      //  // Unstable assertion: assertEquals(false, unionType0.isEnumElementType());
      //  // Unstable assertion: assertEquals(false, unionType0.isNominalConstructor());
      //  // Unstable assertion: assertEquals(false, unionType0.isVoidType());
      //  // Unstable assertion: assertEquals(false, unionType0.isInterface());
      //  // Unstable assertion: assertEquals(false, unionType0.isOrdinaryFunction());
      //  // Unstable assertion: assertEquals(false, unionType0.isNumberValueType());
      //  // Unstable assertion: assertEquals(false, unionType0.isRecordType());
      //  // Unstable assertion: assertEquals(false, unionType0.isNoObjectType());
      //  // Unstable assertion: assertEquals(false, unionType0.isCheckedUnknownType());
      //  // Unstable assertion: assertEquals(false, unionType0.isFunctionType());
      //  // Unstable assertion: assertEquals(false, unionType0.isEnumType());
      //  // Unstable assertion: assertEquals(false, unionType0.isConstructor());
      //  // Unstable assertion: assertEquals(false, unionType0.isBooleanValueType());
      //  // Unstable assertion: assertEquals(false, unionType0.isNoType());
      //  // Unstable assertion: assertEquals(false, unionType0.isFunctionPrototypeType());
      //  // Unstable assertion: assertEquals(false, unionType0.isAllType());
      //  // Unstable assertion: assertEquals(false, unionType0.isStringValueType());
      //  // Unstable assertion: assertEquals(false, unionType0.isNoResolvedType());
      //  // Unstable assertion: assertEquals(false, unionType0.isParameterizedType());
      //  // Unstable assertion: assertEquals(true, unionType0.isUnionType());
      //  // Unstable assertion: assertEquals(false, unionType0.isNullType());
      //  // Unstable assertion: assertEquals(false, unionType0.isTemplateType());
      //  // Unstable assertion: assertEquals(false, unionType0.isNominalType());
  }

  @Test
  public void test08()  throws Throwable  {
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      //  // Unstable assertion: assertNotNull(closureCodingConvention0);
      //  // Unstable assertion: assertEquals("goog.exportProperty", closureCodingConvention0.getExportPropertyFunction());
      //  // Unstable assertion: assertEquals("goog.global", closureCodingConvention0.getGlobalObject());
      //  // Unstable assertion: assertEquals("goog.exportSymbol", closureCodingConvention0.getExportSymbolFunction());
      //  // Unstable assertion: assertEquals("goog.abstractMethod", closureCodingConvention0.getAbstractMethodName());
      
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      //  // Unstable assertion: assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0);
      //  // Unstable assertion: assertNotNull(jSTypeRegistry0);
      //  // Unstable assertion: assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter((CodingConvention) closureCodingConvention0, jSTypeRegistry0);
      //  // Unstable assertion: assertNotNull(closureReverseAbstractInterpreter0);
      //  // Unstable assertion: assertEquals("goog.exportProperty", closureCodingConvention0.getExportPropertyFunction());
      //  // Unstable assertion: assertEquals("goog.global", closureCodingConvention0.getGlobalObject());
      //  // Unstable assertion: assertEquals("goog.exportSymbol", closureCodingConvention0.getExportSymbolFunction());
      //  // Unstable assertion: assertEquals("goog.abstractMethod", closureCodingConvention0.getAbstractMethodName());
      //  // Unstable assertion: assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      JSTypeNative jSTypeNative0 = JSTypeNative.FUNCTION_INSTANCE_TYPE;
      JSType jSType0 = closureReverseAbstractInterpreter0.getNativeType(jSTypeNative0);
      //  // Unstable assertion: assertNotNull(jSType0);
      //  // Unstable assertion: assertEquals("goog.exportProperty", closureCodingConvention0.getExportPropertyFunction());
      //  // Unstable assertion: assertEquals("goog.global", closureCodingConvention0.getGlobalObject());
      //  // Unstable assertion: assertEquals("goog.exportSymbol", closureCodingConvention0.getExportSymbolFunction());
      //  // Unstable assertion: assertEquals("goog.abstractMethod", closureCodingConvention0.getAbstractMethodName());
      //  // Unstable assertion: assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      //  // Unstable assertion: assertEquals(false, jSType0.isNoType());
      //  // Unstable assertion: assertEquals(false, jSType0.isBooleanValueType());
      //  // Unstable assertion: assertEquals(false, jSType0.isOrdinaryFunction());
      //  // Unstable assertion: assertEquals(false, jSType0.isResolved());
      //  // Unstable assertion: assertEquals(false, jSType0.isNumberValueType());
      //  // Unstable assertion: assertEquals(false, jSType0.isEnumType());
      //  // Unstable assertion: assertEquals(false, jSType0.isTemplateType());
      //  // Unstable assertion: assertEquals(false, jSType0.isFunctionPrototypeType());
      //  // Unstable assertion: assertEquals(false, jSType0.isEnumElementType());
      //  // Unstable assertion: assertEquals(false, jSType0.isInterface());
      //  // Unstable assertion: assertEquals(false, jSType0.isVoidType());
      //  // Unstable assertion: assertEquals(false, jSType0.isNoObjectType());
      //  // Unstable assertion: assertEquals(false, jSType0.isUnionType());
      //  // Unstable assertion: assertEquals(true, jSType0.isConstructor());
      //  // Unstable assertion: assertEquals(false, jSType0.isParameterizedType());
      //  // Unstable assertion: assertEquals(false, jSType0.isNominalType());
      //  // Unstable assertion: assertEquals(true, jSType0.matchesObjectContext());
      //  // Unstable assertion: assertEquals(true, jSType0.isNominalConstructor());
      //  // Unstable assertion: assertEquals(false, jSType0.isRecordType());
      //  // Unstable assertion: assertEquals(false, jSType0.isNullType());
      //  // Unstable assertion: assertEquals(false, jSType0.isStringValueType());
      //  // Unstable assertion: assertEquals(false, jSType0.isNoResolvedType());
      //  // Unstable assertion: assertEquals(true, jSType0.isFunctionType());
      //  // Unstable assertion: assertEquals(false, jSType0.isAllType());
      //  // Unstable assertion: assertEquals(false, jSType0.isCheckedUnknownType());
      
      String string0 = "number";
      boolean boolean0 = false;
      JSType jSType1 = closureReverseAbstractInterpreter0.getRestrictedByTypeOfResult(jSType0, string0, boolean0);
      //  // Unstable assertion: assertNull(jSType1);
      //  // Unstable assertion: assertEquals("goog.exportProperty", closureCodingConvention0.getExportPropertyFunction());
      //  // Unstable assertion: assertEquals("goog.global", closureCodingConvention0.getGlobalObject());
      //  // Unstable assertion: assertEquals("goog.exportSymbol", closureCodingConvention0.getExportSymbolFunction());
      //  // Unstable assertion: assertEquals("goog.abstractMethod", closureCodingConvention0.getAbstractMethodName());
      //  // Unstable assertion: assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      //  // Unstable assertion: assertEquals(false, jSType0.isNoType());
      //  // Unstable assertion: assertEquals(false, jSType0.isBooleanValueType());
      //  // Unstable assertion: assertEquals(false, jSType0.isOrdinaryFunction());
      //  // Unstable assertion: assertEquals(false, jSType0.isResolved());
      //  // Unstable assertion: assertEquals(false, jSType0.isNumberValueType());
      //  // Unstable assertion: assertEquals(false, jSType0.isEnumType());
      //  // Unstable assertion: assertEquals(false, jSType0.isTemplateType());
      //  // Unstable assertion: assertEquals(false, jSType0.isFunctionPrototypeType());
      //  // Unstable assertion: assertEquals(false, jSType0.isEnumElementType());
      //  // Unstable assertion: assertEquals(false, jSType0.isInterface());
      //  // Unstable assertion: assertEquals(false, jSType0.isVoidType());
      //  // Unstable assertion: assertEquals(false, jSType0.isNoObjectType());
      //  // Unstable assertion: assertEquals(false, jSType0.isUnionType());
      //  // Unstable assertion: assertEquals(true, jSType0.isConstructor());
      //  // Unstable assertion: assertEquals(false, jSType0.isParameterizedType());
      //  // Unstable assertion: assertEquals(false, jSType0.isNominalType());
      //  // Unstable assertion: assertEquals(true, jSType0.matchesObjectContext());
      //  // Unstable assertion: assertEquals(true, jSType0.isNominalConstructor());
      //  // Unstable assertion: assertEquals(false, jSType0.isRecordType());
      //  // Unstable assertion: assertEquals(false, jSType0.isNullType());
      //  // Unstable assertion: assertEquals(false, jSType0.isStringValueType());
      //  // Unstable assertion: assertEquals(false, jSType0.isNoResolvedType());
      //  // Unstable assertion: assertEquals(true, jSType0.isFunctionType());
      //  // Unstable assertion: assertEquals(false, jSType0.isAllType());
      //  // Unstable assertion: assertEquals(false, jSType0.isCheckedUnknownType());
  }

  @Test
  public void test09()  throws Throwable  {
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      assertNotNull(closureCodingConvention0);
      assertEquals("goog.abstractMethod", closureCodingConvention0.getAbstractMethodName());
      assertEquals("goog.exportProperty", closureCodingConvention0.getExportPropertyFunction());
      assertEquals("goog.global", closureCodingConvention0.getGlobalObject());
      assertEquals("goog.exportSymbol", closureCodingConvention0.getExportSymbolFunction());
      
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter((CodingConvention) closureCodingConvention0, jSTypeRegistry0);
      assertNotNull(closureReverseAbstractInterpreter0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals("goog.abstractMethod", closureCodingConvention0.getAbstractMethodName());
      assertEquals("goog.exportProperty", closureCodingConvention0.getExportPropertyFunction());
      assertEquals("goog.global", closureCodingConvention0.getGlobalObject());
      assertEquals("goog.exportSymbol", closureCodingConvention0.getExportSymbolFunction());
      
      JSTypeNative jSTypeNative0 = JSTypeNative.OBJECT_NUMBER_STRING_BOOLEAN;
      UnionType unionType0 = (UnionType)closureReverseAbstractInterpreter0.getNativeType(jSTypeNative0);
      assertNotNull(unionType0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals("goog.abstractMethod", closureCodingConvention0.getAbstractMethodName());
      assertEquals("goog.exportProperty", closureCodingConvention0.getExportPropertyFunction());
      assertEquals("goog.global", closureCodingConvention0.getGlobalObject());
      assertEquals("goog.exportSymbol", closureCodingConvention0.getExportSymbolFunction());
      assertEquals(false, unionType0.isConstructor());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isNoResolvedType());
      assertEquals(false, unionType0.isFunctionPrototypeType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isCheckedUnknownType());
      assertEquals(false, unionType0.isNominalConstructor());
      assertEquals(false, unionType0.isEnumType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isOrdinaryFunction());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isParameterizedType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isEnumElementType());
      assertEquals(false, unionType0.isNominalType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isInterface());
      assertEquals(true, unionType0.isUnionType());
      
      String string0 = "function";
      boolean boolean0 = true;
      JSType jSType0 = closureReverseAbstractInterpreter0.getRestrictedByTypeOfResult(unionType0, string0, boolean0);
      assertNotNull(jSType0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals("goog.abstractMethod", closureCodingConvention0.getAbstractMethodName());
      assertEquals("goog.exportProperty", closureCodingConvention0.getExportPropertyFunction());
      assertEquals("goog.global", closureCodingConvention0.getGlobalObject());
      assertEquals("goog.exportSymbol", closureCodingConvention0.getExportSymbolFunction());
      assertEquals(false, unionType0.isConstructor());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isNoResolvedType());
      assertEquals(false, unionType0.isFunctionPrototypeType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isCheckedUnknownType());
      assertEquals(false, unionType0.isNominalConstructor());
      assertEquals(false, unionType0.isEnumType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isOrdinaryFunction());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isParameterizedType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isEnumElementType());
      assertEquals(false, unionType0.isNominalType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isInterface());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, jSType0.isVoidType());
      assertEquals(false, jSType0.isTemplateType());
      assertEquals(false, jSType0.isBooleanValueType());
      assertEquals(false, jSType0.isNoResolvedType());
      assertEquals(false, jSType0.isCheckedUnknownType());
      assertEquals(false, jSType0.isInterface());
      assertEquals(false, jSType0.isFunctionPrototypeType());
      assertEquals(false, jSType0.isResolved());
      assertEquals(false, jSType0.isEnumType());
      assertEquals(false, jSType0.isNoObjectType());
      assertEquals(false, jSType0.isNumberValueType());
      assertEquals(false, jSType0.isParameterizedType());
      assertEquals(true, jSType0.isFunctionType());
      assertEquals(true, jSType0.matchesObjectContext());
      assertEquals(false, jSType0.isNullType());
      assertEquals(false, jSType0.isOrdinaryFunction());
      assertEquals(false, jSType0.isEnumElementType());
      assertEquals(true, jSType0.isNominalConstructor());
      assertEquals(false, jSType0.isUnionType());
      assertEquals(false, jSType0.isStringValueType());
      assertEquals(false, jSType0.isAllType());
      assertEquals(true, jSType0.isConstructor());
      assertEquals(false, jSType0.isNoType());
      assertEquals(false, jSType0.isNominalType());
      assertEquals(false, jSType0.isRecordType());
  }

  @Test
  public void test10()  throws Throwable  {
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      assertNotNull(closureCodingConvention0);
      assertEquals("goog.abstractMethod", closureCodingConvention0.getAbstractMethodName());
      assertEquals("goog.exportProperty", closureCodingConvention0.getExportPropertyFunction());
      assertEquals("goog.exportSymbol", closureCodingConvention0.getExportSymbolFunction());
      assertEquals("goog.global", closureCodingConvention0.getGlobalObject());
      
      GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention((CodingConvention) closureCodingConvention0);
      assertNotNull(googleCodingConvention0);
      assertEquals("goog.abstractMethod", closureCodingConvention0.getAbstractMethodName());
      assertEquals("goog.exportProperty", closureCodingConvention0.getExportPropertyFunction());
      assertEquals("goog.exportSymbol", closureCodingConvention0.getExportSymbolFunction());
      assertEquals("goog.global", closureCodingConvention0.getGlobalObject());
      
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      boolean boolean0 = false;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0, boolean0);
      assertNotNull(jSTypeRegistry0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter((CodingConvention) googleCodingConvention0, jSTypeRegistry0);
      assertNotNull(closureReverseAbstractInterpreter0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals("goog.abstractMethod", closureCodingConvention0.getAbstractMethodName());
      assertEquals("goog.exportProperty", closureCodingConvention0.getExportPropertyFunction());
      assertEquals("goog.exportSymbol", closureCodingConvention0.getExportSymbolFunction());
      assertEquals("goog.global", closureCodingConvention0.getGlobalObject());
      
      JSTypeNative jSTypeNative0 = JSTypeNative.NO_OBJECT_TYPE;
      NoObjectType noObjectType0 = (NoObjectType)jSTypeRegistry0.getNativeType(jSTypeNative0);
      assertNotNull(noObjectType0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(2147483647, noObjectType0.getMaxArguments());
      assertEquals(false, noObjectType0.isCheckedUnknownType());
      assertEquals(false, noObjectType0.isAllType());
      assertEquals(true, noObjectType0.hasInstanceType());
      assertEquals(false, noObjectType0.isTemplateType());
      assertEquals(2147483647, noObjectType0.getPropertiesCount());
      assertEquals(false, noObjectType0.isNullType());
      assertEquals(false, noObjectType0.isOrdinaryFunction());
      assertEquals(true, noObjectType0.matchesStringContext());
      assertEquals(true, noObjectType0.canBeCalled());
      assertNull(noObjectType0.getReferenceName());
      assertEquals(false, noObjectType0.isInterface());
      assertEquals(false, noObjectType0.isNoResolvedType());
      assertEquals(false, noObjectType0.isReturnTypeInferred());
      assertEquals(false, noObjectType0.isNumberValueType());
      assertEquals(false, noObjectType0.isResolved());
      assertEquals(true, noObjectType0.isNoObjectType());
      assertEquals(false, noObjectType0.isNominalType());
      assertEquals(false, noObjectType0.isNoType());
      assertEquals(false, noObjectType0.isFunctionPrototypeType());
      assertEquals(0, noObjectType0.getExtendedInterfacesCount());
      assertEquals(false, noObjectType0.isUnionType());
      assertEquals(false, noObjectType0.isVoidType());
      assertEquals(false, noObjectType0.isEnumType());
      assertEquals(BooleanLiteralSet.TRUE, noObjectType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noObjectType0.hasCachedValues());
      assertEquals(false, noObjectType0.isRecordType());
      assertEquals(false, noObjectType0.isStringValueType());
      assertEquals(false, noObjectType0.isFunctionType());
      assertEquals(true, noObjectType0.isConstructor());
      assertEquals(true, noObjectType0.matchesObjectContext());
      assertEquals(true, noObjectType0.matchesNumberContext());
      assertEquals(false, noObjectType0.isNominalConstructor());
      assertEquals(false, noObjectType0.isBooleanValueType());
      assertEquals(false, noObjectType0.isEnumElementType());
      assertEquals(false, noObjectType0.isParameterizedType());
      
      String string0 = "string";
      NoObjectType noObjectType1 = (NoObjectType)closureReverseAbstractInterpreter0.getRestrictedByTypeOfResult(noObjectType0, string0, boolean0);
      assertSame(noObjectType1, noObjectType0);
      assertSame(noObjectType0, noObjectType1);
      assertNotNull(noObjectType1);
      assertEquals(false, noObjectType1.isAllType());
      assertEquals(false, noObjectType1.isEnumElementType());
      assertEquals(true, noObjectType1.canBeCalled());
      assertEquals(false, noObjectType1.isOrdinaryFunction());
      assertEquals(false, noObjectType1.isNoType());
      assertEquals(true, noObjectType1.isConstructor());
      assertEquals(false, noObjectType1.isResolved());
      assertEquals(false, noObjectType1.isNoResolvedType());
      assertEquals(false, noObjectType1.isInterface());
      assertEquals(0, noObjectType1.getExtendedInterfacesCount());
      assertEquals(false, noObjectType1.isVoidType());
      assertEquals(false, noObjectType1.isBooleanValueType());
      assertEquals(false, noObjectType1.isTemplateType());
      assertEquals(BooleanLiteralSet.TRUE, noObjectType1.getPossibleToBooleanOutcomes());
      assertEquals(2147483647, noObjectType1.getPropertiesCount());
      assertEquals(false, noObjectType1.isEnumType());
      assertEquals(false, noObjectType1.isReturnTypeInferred());
      assertEquals(false, noObjectType1.hasCachedValues());
      assertEquals(false, noObjectType1.isUnionType());
      assertEquals(false, noObjectType1.isCheckedUnknownType());
      assertEquals(true, noObjectType1.matchesNumberContext());
      assertEquals(false, noObjectType1.isParameterizedType());
      assertEquals(false, noObjectType1.isStringValueType());
      assertEquals(false, noObjectType1.isNumberValueType());
      assertEquals(2147483647, noObjectType1.getMaxArguments());
      assertNull(noObjectType1.getReferenceName());
      assertEquals(false, noObjectType1.isNominalConstructor());
      assertEquals(true, noObjectType1.matchesStringContext());
      assertEquals(false, noObjectType1.isRecordType());
      assertEquals(false, noObjectType1.isNominalType());
      assertEquals(true, noObjectType1.hasInstanceType());
      assertEquals(false, noObjectType1.isFunctionPrototypeType());
      assertEquals(false, noObjectType1.isFunctionType());
      assertEquals(false, noObjectType1.isNullType());
      assertEquals(true, noObjectType1.isNoObjectType());
      assertEquals(true, noObjectType1.matchesObjectContext());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals("goog.abstractMethod", closureCodingConvention0.getAbstractMethodName());
      assertEquals("goog.exportProperty", closureCodingConvention0.getExportPropertyFunction());
      assertEquals("goog.exportSymbol", closureCodingConvention0.getExportSymbolFunction());
      assertEquals("goog.global", closureCodingConvention0.getGlobalObject());
      assertEquals(2147483647, noObjectType0.getMaxArguments());
      assertEquals(false, noObjectType0.isCheckedUnknownType());
      assertEquals(false, noObjectType0.isAllType());
      assertEquals(true, noObjectType0.hasInstanceType());
      assertEquals(false, noObjectType0.isTemplateType());
      assertEquals(2147483647, noObjectType0.getPropertiesCount());
      assertEquals(false, noObjectType0.isNullType());
      assertEquals(false, noObjectType0.isOrdinaryFunction());
      assertEquals(true, noObjectType0.matchesStringContext());
      assertEquals(true, noObjectType0.canBeCalled());
      assertNull(noObjectType0.getReferenceName());
      assertEquals(false, noObjectType0.isInterface());
      assertEquals(false, noObjectType0.isNoResolvedType());
      assertEquals(false, noObjectType0.isReturnTypeInferred());
      assertEquals(false, noObjectType0.isNumberValueType());
      assertEquals(false, noObjectType0.isResolved());
      assertEquals(true, noObjectType0.isNoObjectType());
      assertEquals(false, noObjectType0.isNominalType());
      assertEquals(false, noObjectType0.isNoType());
      assertEquals(false, noObjectType0.isFunctionPrototypeType());
      assertEquals(0, noObjectType0.getExtendedInterfacesCount());
      assertEquals(false, noObjectType0.isUnionType());
      assertEquals(false, noObjectType0.isVoidType());
      assertEquals(false, noObjectType0.isEnumType());
      assertEquals(BooleanLiteralSet.TRUE, noObjectType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noObjectType0.hasCachedValues());
      assertEquals(false, noObjectType0.isRecordType());
      assertEquals(false, noObjectType0.isStringValueType());
      assertEquals(false, noObjectType0.isFunctionType());
      assertEquals(true, noObjectType0.isConstructor());
      assertEquals(true, noObjectType0.matchesObjectContext());
      assertEquals(true, noObjectType0.matchesNumberContext());
      assertEquals(false, noObjectType0.isNominalConstructor());
      assertEquals(false, noObjectType0.isBooleanValueType());
      assertEquals(false, noObjectType0.isEnumElementType());
      assertEquals(false, noObjectType0.isParameterizedType());
  }

  @Test
  public void test11()  throws Throwable  {
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      assertNotNull(closureCodingConvention0);
      assertEquals("goog.exportProperty", closureCodingConvention0.getExportPropertyFunction());
      assertEquals("goog.exportSymbol", closureCodingConvention0.getExportSymbolFunction());
      assertEquals("goog.abstractMethod", closureCodingConvention0.getAbstractMethodName());
      assertEquals("goog.global", closureCodingConvention0.getGlobalObject());
      
      GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention((CodingConvention) closureCodingConvention0);
      assertNotNull(googleCodingConvention0);
      assertEquals("goog.exportProperty", closureCodingConvention0.getExportPropertyFunction());
      assertEquals("goog.exportSymbol", closureCodingConvention0.getExportSymbolFunction());
      assertEquals("goog.abstractMethod", closureCodingConvention0.getAbstractMethodName());
      assertEquals("goog.global", closureCodingConvention0.getGlobalObject());
      
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      boolean boolean0 = false;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0, boolean0);
      assertNotNull(jSTypeRegistry0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter((CodingConvention) googleCodingConvention0, jSTypeRegistry0);
      assertNotNull(semanticReverseAbstractInterpreter0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals("goog.exportProperty", closureCodingConvention0.getExportPropertyFunction());
      assertEquals("goog.exportSymbol", closureCodingConvention0.getExportSymbolFunction());
      assertEquals("goog.abstractMethod", closureCodingConvention0.getAbstractMethodName());
      assertEquals("goog.global", closureCodingConvention0.getGlobalObject());
      
      JSTypeNative jSTypeNative0 = JSTypeNative.NO_OBJECT_TYPE;
      NoObjectType noObjectType0 = (NoObjectType)jSTypeRegistry0.getNativeType(jSTypeNative0);
      assertNotNull(noObjectType0);
      assertEquals(false, noObjectType0.isCheckedUnknownType());
      assertEquals(false, noObjectType0.isVoidType());
      assertEquals(0, noObjectType0.getExtendedInterfacesCount());
      assertEquals(false, noObjectType0.isReturnTypeInferred());
      assertEquals(2147483647, noObjectType0.getMaxArguments());
      assertEquals(true, noObjectType0.canBeCalled());
      assertEquals(true, noObjectType0.hasInstanceType());
      assertEquals(false, noObjectType0.isNominalType());
      assertEquals(true, noObjectType0.matchesStringContext());
      assertEquals(false, noObjectType0.isUnionType());
      assertEquals(true, noObjectType0.isNoObjectType());
      assertEquals(false, noObjectType0.isBooleanValueType());
      assertEquals(false, noObjectType0.isEnumType());
      assertEquals(false, noObjectType0.isNumberValueType());
      assertEquals(2147483647, noObjectType0.getPropertiesCount());
      assertEquals(false, noObjectType0.isTemplateType());
      assertEquals(true, noObjectType0.matchesObjectContext());
      assertEquals(true, noObjectType0.matchesNumberContext());
      assertEquals(false, noObjectType0.isOrdinaryFunction());
      assertEquals(true, noObjectType0.isConstructor());
      assertEquals(BooleanLiteralSet.TRUE, noObjectType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noObjectType0.isResolved());
      assertNull(noObjectType0.getReferenceName());
      assertEquals(false, noObjectType0.isNullType());
      assertEquals(false, noObjectType0.isNoResolvedType());
      assertEquals(false, noObjectType0.isNominalConstructor());
      assertEquals(false, noObjectType0.isAllType());
      assertEquals(false, noObjectType0.isEnumElementType());
      assertEquals(false, noObjectType0.isFunctionPrototypeType());
      assertEquals(false, noObjectType0.hasCachedValues());
      assertEquals(false, noObjectType0.isRecordType());
      assertEquals(false, noObjectType0.isNoType());
      assertEquals(false, noObjectType0.isInterface());
      assertEquals(false, noObjectType0.isStringValueType());
      assertEquals(false, noObjectType0.isFunctionType());
      assertEquals(false, noObjectType0.isParameterizedType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      String string0 = "function";
      JSType jSType0 = semanticReverseAbstractInterpreter0.getRestrictedByTypeOfResult(noObjectType0, string0, boolean0);
      assertNull(jSType0);
      assertEquals(false, noObjectType0.isCheckedUnknownType());
      assertEquals(false, noObjectType0.isVoidType());
      assertEquals(0, noObjectType0.getExtendedInterfacesCount());
      assertEquals(false, noObjectType0.isReturnTypeInferred());
      assertEquals(2147483647, noObjectType0.getMaxArguments());
      assertEquals(true, noObjectType0.canBeCalled());
      assertEquals(true, noObjectType0.hasInstanceType());
      assertEquals(false, noObjectType0.isNominalType());
      assertEquals(true, noObjectType0.matchesStringContext());
      assertEquals(false, noObjectType0.isUnionType());
      assertEquals(true, noObjectType0.isNoObjectType());
      assertEquals(false, noObjectType0.isBooleanValueType());
      assertEquals(false, noObjectType0.isEnumType());
      assertEquals(false, noObjectType0.isNumberValueType());
      assertEquals(2147483647, noObjectType0.getPropertiesCount());
      assertEquals(false, noObjectType0.isTemplateType());
      assertEquals(true, noObjectType0.matchesObjectContext());
      assertEquals(true, noObjectType0.matchesNumberContext());
      assertEquals(false, noObjectType0.isOrdinaryFunction());
      assertEquals(true, noObjectType0.isConstructor());
      assertEquals(BooleanLiteralSet.TRUE, noObjectType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noObjectType0.isResolved());
      assertNull(noObjectType0.getReferenceName());
      assertEquals(false, noObjectType0.isNullType());
      assertEquals(false, noObjectType0.isNoResolvedType());
      assertEquals(false, noObjectType0.isNominalConstructor());
      assertEquals(false, noObjectType0.isAllType());
      assertEquals(false, noObjectType0.isEnumElementType());
      assertEquals(false, noObjectType0.isFunctionPrototypeType());
      assertEquals(false, noObjectType0.hasCachedValues());
      assertEquals(false, noObjectType0.isRecordType());
      assertEquals(false, noObjectType0.isNoType());
      assertEquals(false, noObjectType0.isInterface());
      assertEquals(false, noObjectType0.isStringValueType());
      assertEquals(false, noObjectType0.isFunctionType());
      assertEquals(false, noObjectType0.isParameterizedType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals("goog.exportProperty", closureCodingConvention0.getExportPropertyFunction());
      assertEquals("goog.exportSymbol", closureCodingConvention0.getExportSymbolFunction());
      assertEquals("goog.abstractMethod", closureCodingConvention0.getAbstractMethodName());
      assertEquals("goog.global", closureCodingConvention0.getGlobalObject());
  }

  @Test
  public void test12()  throws Throwable  {
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      assertNotNull(closureCodingConvention0);
      assertEquals("goog.abstractMethod", closureCodingConvention0.getAbstractMethodName());
      assertEquals("goog.global", closureCodingConvention0.getGlobalObject());
      assertEquals("goog.exportSymbol", closureCodingConvention0.getExportSymbolFunction());
      assertEquals("goog.exportProperty", closureCodingConvention0.getExportPropertyFunction());
      
      GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention((CodingConvention) closureCodingConvention0);
      assertNotNull(googleCodingConvention0);
      assertEquals("goog.abstractMethod", closureCodingConvention0.getAbstractMethodName());
      assertEquals("goog.global", closureCodingConvention0.getGlobalObject());
      assertEquals("goog.exportSymbol", closureCodingConvention0.getExportSymbolFunction());
      assertEquals("goog.exportProperty", closureCodingConvention0.getExportPropertyFunction());
      
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      boolean boolean0 = false;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0, boolean0);
      assertNotNull(jSTypeRegistry0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter((CodingConvention) googleCodingConvention0, jSTypeRegistry0);
      assertNotNull(closureReverseAbstractInterpreter0);
      assertEquals("goog.abstractMethod", closureCodingConvention0.getAbstractMethodName());
      assertEquals("goog.global", closureCodingConvention0.getGlobalObject());
      assertEquals("goog.exportSymbol", closureCodingConvention0.getExportSymbolFunction());
      assertEquals("goog.exportProperty", closureCodingConvention0.getExportPropertyFunction());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      JSTypeNative jSTypeNative0 = JSTypeNative.NO_OBJECT_TYPE;
      NoObjectType noObjectType0 = (NoObjectType)jSTypeRegistry0.getNativeType(jSTypeNative0);
      assertNotNull(noObjectType0);
      assertEquals(false, noObjectType0.isInterface());
      assertEquals(false, noObjectType0.isEnumType());
      assertEquals(true, noObjectType0.isConstructor());
      assertEquals(true, noObjectType0.hasInstanceType());
      assertEquals(true, noObjectType0.matchesStringContext());
      assertEquals(false, noObjectType0.hasCachedValues());
      assertEquals(false, noObjectType0.isNullType());
      assertEquals(false, noObjectType0.isUnionType());
      assertEquals(false, noObjectType0.isFunctionPrototypeType());
      assertEquals(0, noObjectType0.getExtendedInterfacesCount());
      assertEquals(false, noObjectType0.isNoType());
      assertEquals(false, noObjectType0.isStringValueType());
      assertEquals(false, noObjectType0.isRecordType());
      assertEquals(false, noObjectType0.isTemplateType());
      assertEquals(BooleanLiteralSet.TRUE, noObjectType0.getPossibleToBooleanOutcomes());
      assertEquals(true, noObjectType0.matchesNumberContext());
      assertEquals(false, noObjectType0.isVoidType());
      assertEquals(true, noObjectType0.isNoObjectType());
      assertEquals(false, noObjectType0.isCheckedUnknownType());
      assertEquals(true, noObjectType0.matchesObjectContext());
      assertEquals(false, noObjectType0.isBooleanValueType());
      assertEquals(false, noObjectType0.isNumberValueType());
      assertEquals(2147483647, noObjectType0.getMaxArguments());
      assertEquals(false, noObjectType0.isAllType());
      assertEquals(true, noObjectType0.canBeCalled());
      assertEquals(2147483647, noObjectType0.getPropertiesCount());
      assertEquals(false, noObjectType0.isEnumElementType());
      assertEquals(false, noObjectType0.isNominalConstructor());
      assertNull(noObjectType0.getReferenceName());
      assertEquals(false, noObjectType0.isParameterizedType());
      assertEquals(false, noObjectType0.isResolved());
      assertEquals(false, noObjectType0.isNominalType());
      assertEquals(false, noObjectType0.isOrdinaryFunction());
      assertEquals(false, noObjectType0.isNoResolvedType());
      assertEquals(false, noObjectType0.isReturnTypeInferred());
      assertEquals(false, noObjectType0.isFunctionType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      String string0 = "object";
      JSType jSType0 = closureReverseAbstractInterpreter0.getRestrictedByTypeOfResult(noObjectType0, string0, boolean0);
      assertNull(jSType0);
      assertEquals("goog.abstractMethod", closureCodingConvention0.getAbstractMethodName());
      assertEquals("goog.global", closureCodingConvention0.getGlobalObject());
      assertEquals("goog.exportSymbol", closureCodingConvention0.getExportSymbolFunction());
      assertEquals("goog.exportProperty", closureCodingConvention0.getExportPropertyFunction());
      assertEquals(false, noObjectType0.isInterface());
      assertEquals(false, noObjectType0.isEnumType());
      assertEquals(true, noObjectType0.isConstructor());
      assertEquals(true, noObjectType0.hasInstanceType());
      assertEquals(true, noObjectType0.matchesStringContext());
      assertEquals(false, noObjectType0.hasCachedValues());
      assertEquals(false, noObjectType0.isNullType());
      assertEquals(false, noObjectType0.isUnionType());
      assertEquals(false, noObjectType0.isFunctionPrototypeType());
      assertEquals(0, noObjectType0.getExtendedInterfacesCount());
      assertEquals(false, noObjectType0.isNoType());
      assertEquals(false, noObjectType0.isStringValueType());
      assertEquals(false, noObjectType0.isRecordType());
      assertEquals(false, noObjectType0.isTemplateType());
      assertEquals(BooleanLiteralSet.TRUE, noObjectType0.getPossibleToBooleanOutcomes());
      assertEquals(true, noObjectType0.matchesNumberContext());
      assertEquals(false, noObjectType0.isVoidType());
      assertEquals(true, noObjectType0.isNoObjectType());
      assertEquals(false, noObjectType0.isCheckedUnknownType());
      assertEquals(true, noObjectType0.matchesObjectContext());
      assertEquals(false, noObjectType0.isBooleanValueType());
      assertEquals(false, noObjectType0.isNumberValueType());
      assertEquals(2147483647, noObjectType0.getMaxArguments());
      assertEquals(false, noObjectType0.isAllType());
      assertEquals(true, noObjectType0.canBeCalled());
      assertEquals(2147483647, noObjectType0.getPropertiesCount());
      assertEquals(false, noObjectType0.isEnumElementType());
      assertEquals(false, noObjectType0.isNominalConstructor());
      assertNull(noObjectType0.getReferenceName());
      assertEquals(false, noObjectType0.isParameterizedType());
      assertEquals(false, noObjectType0.isResolved());
      assertEquals(false, noObjectType0.isNominalType());
      assertEquals(false, noObjectType0.isOrdinaryFunction());
      assertEquals(false, noObjectType0.isNoResolvedType());
      assertEquals(false, noObjectType0.isReturnTypeInferred());
      assertEquals(false, noObjectType0.isFunctionType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
  }

  @Test
  public void test13()  throws Throwable  {
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      assertNotNull(closureCodingConvention0);
      assertEquals("goog.exportProperty", closureCodingConvention0.getExportPropertyFunction());
      assertEquals("goog.global", closureCodingConvention0.getGlobalObject());
      assertEquals("goog.abstractMethod", closureCodingConvention0.getAbstractMethodName());
      assertEquals("goog.exportSymbol", closureCodingConvention0.getExportSymbolFunction());
      
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      boolean boolean0 = true;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0, boolean0);
      assertNotNull(jSTypeRegistry0);
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter((CodingConvention) closureCodingConvention0, jSTypeRegistry0);
      assertNotNull(closureReverseAbstractInterpreter0);
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals("goog.exportProperty", closureCodingConvention0.getExportPropertyFunction());
      assertEquals("goog.global", closureCodingConvention0.getGlobalObject());
      assertEquals("goog.abstractMethod", closureCodingConvention0.getAbstractMethodName());
      assertEquals("goog.exportSymbol", closureCodingConvention0.getExportSymbolFunction());
      
      String string0 = closureCodingConvention0.getExportPropertyFunction();
      assertEquals("goog.exportProperty", string0);
      assertNotNull(string0);
      assertEquals("goog.exportProperty", closureCodingConvention0.getExportPropertyFunction());
      assertEquals("goog.global", closureCodingConvention0.getGlobalObject());
      assertEquals("goog.abstractMethod", closureCodingConvention0.getAbstractMethodName());
      assertEquals("goog.exportSymbol", closureCodingConvention0.getExportSymbolFunction());
      
      JSType jSType0 = null;
      UnknownType unknownType0 = (UnknownType)closureReverseAbstractInterpreter0.getRestrictedByTypeOfResult(jSType0, string0, boolean0);
      assertNotNull(unknownType0);
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, unknownType0.isNativeObjectType());
      assertEquals(true, unknownType0.hasDisplayName());
      assertEquals(false, unknownType0.isEnumElementType());
      assertEquals(false, unknownType0.isNullType());
      assertEquals(BooleanLiteralSet.BOTH, unknownType0.getPossibleToBooleanOutcomes());
      assertEquals(false, unknownType0.isTemplateType());
      assertEquals(false, unknownType0.isNumberValueType());
      assertEquals(true, unknownType0.matchesNumberContext());
      assertEquals("?", unknownType0.getReferenceName());
      assertEquals(false, unknownType0.isFunctionType());
      assertEquals(2147483647, unknownType0.getPropertiesCount());
      assertEquals(true, unknownType0.isUnknownType());
      assertEquals(false, unknownType0.isUnionType());
      assertEquals(false, unknownType0.isEnumType());
      assertEquals(false, unknownType0.isInterface());
      assertEquals(true, unknownType0.canBeCalled());
      assertEquals(false, unknownType0.isNominalConstructor());
      assertEquals(false, unknownType0.isFunctionPrototypeType());
      assertEquals(false, unknownType0.isOrdinaryFunction());
      assertEquals(false, unknownType0.isNoResolvedType());
      assertEquals(false, unknownType0.isVoidType());
      assertEquals(false, unknownType0.isCheckedUnknownType());
      assertEquals(false, unknownType0.isNominalType());
      assertEquals(false, unknownType0.isBooleanValueType());
      assertEquals(true, unknownType0.matchesStringContext());
      assertEquals(false, unknownType0.isParameterizedType());
      assertEquals(true, unknownType0.isNullable());
      assertEquals(false, unknownType0.isNoObjectType());
      assertEquals("Unknown", unknownType0.getDisplayName());
      assertEquals(false, unknownType0.isResolved());
      assertEquals(false, unknownType0.hasReferenceName());
      assertEquals(true, unknownType0.matchesObjectContext());
      assertEquals(false, unknownType0.isAllType());
      assertEquals(false, unknownType0.isConstructor());
      assertEquals(false, unknownType0.isNoType());
      assertEquals(false, unknownType0.isStringValueType());
      assertEquals(false, unknownType0.isRecordType());
      assertEquals(false, unknownType0.hasCachedValues());
      assertEquals("goog.exportProperty", closureCodingConvention0.getExportPropertyFunction());
      assertEquals("goog.global", closureCodingConvention0.getGlobalObject());
      assertEquals("goog.abstractMethod", closureCodingConvention0.getAbstractMethodName());
      assertEquals("goog.exportSymbol", closureCodingConvention0.getExportSymbolFunction());
      
      UnknownType unknownType1 = (UnknownType)closureReverseAbstractInterpreter0.getRestrictedByTypeOfResult(unknownType0, string0, boolean0);
      assertSame(unknownType1, unknownType0);
      assertSame(unknownType0, unknownType1);
      assertNotNull(unknownType1);
      assertEquals(false, unknownType1.isBooleanValueType());
      assertEquals(false, unknownType1.isCheckedUnknownType());
      assertEquals(true, unknownType1.matchesNumberContext());
      assertEquals(false, unknownType1.isStringValueType());
      assertEquals(false, unknownType1.isNoType());
      assertEquals(false, unknownType1.isParameterizedType());
      assertEquals(false, unknownType1.isNominalConstructor());
      assertEquals(false, unknownType1.isNominalType());
      assertEquals(false, unknownType1.hasCachedValues());
      assertEquals(false, unknownType1.isEnumType());
      assertEquals(true, unknownType1.matchesStringContext());
      assertEquals(false, unknownType1.isOrdinaryFunction());
      assertEquals(true, unknownType1.isNullable());
      assertEquals(true, unknownType1.matchesObjectContext());
      assertEquals(false, unknownType1.isNumberValueType());
      assertEquals(false, unknownType1.isNoResolvedType());
      assertEquals(false, unknownType1.hasReferenceName());
      assertEquals(false, unknownType1.isNativeObjectType());
      assertEquals(2147483647, unknownType1.getPropertiesCount());
      assertEquals(false, unknownType1.isFunctionPrototypeType());
      assertEquals(false, unknownType1.isInterface());
      assertEquals(false, unknownType1.isResolved());
      assertEquals(false, unknownType1.isRecordType());
      assertEquals("Unknown", unknownType1.getDisplayName());
      assertEquals(false, unknownType1.isAllType());
      assertEquals(false, unknownType1.isEnumElementType());
      assertEquals(true, unknownType1.hasDisplayName());
      assertEquals(false, unknownType1.isConstructor());
      assertEquals(false, unknownType1.isFunctionType());
      assertEquals(BooleanLiteralSet.BOTH, unknownType1.getPossibleToBooleanOutcomes());
      assertEquals(false, unknownType1.isNoObjectType());
      assertEquals(true, unknownType1.isUnknownType());
      assertEquals("?", unknownType1.getReferenceName());
      assertEquals(false, unknownType1.isTemplateType());
      assertEquals(false, unknownType1.isNullType());
      assertEquals(false, unknownType1.isVoidType());
      assertEquals(true, unknownType1.canBeCalled());
      assertEquals(false, unknownType1.isUnionType());
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, unknownType0.isNativeObjectType());
      assertEquals(true, unknownType0.hasDisplayName());
      assertEquals(false, unknownType0.isEnumElementType());
      assertEquals(false, unknownType0.isNullType());
      assertEquals(BooleanLiteralSet.BOTH, unknownType0.getPossibleToBooleanOutcomes());
      assertEquals(false, unknownType0.isTemplateType());
      assertEquals(false, unknownType0.isNumberValueType());
      assertEquals(true, unknownType0.matchesNumberContext());
      assertEquals("?", unknownType0.getReferenceName());
      assertEquals(false, unknownType0.isFunctionType());
      assertEquals(2147483647, unknownType0.getPropertiesCount());
      assertEquals(true, unknownType0.isUnknownType());
      assertEquals(false, unknownType0.isUnionType());
      assertEquals(false, unknownType0.isEnumType());
      assertEquals(false, unknownType0.isInterface());
      assertEquals(true, unknownType0.canBeCalled());
      assertEquals(false, unknownType0.isNominalConstructor());
      assertEquals(false, unknownType0.isFunctionPrototypeType());
      assertEquals(false, unknownType0.isOrdinaryFunction());
      assertEquals(false, unknownType0.isNoResolvedType());
      assertEquals(false, unknownType0.isVoidType());
      assertEquals(false, unknownType0.isCheckedUnknownType());
      assertEquals(false, unknownType0.isNominalType());
      assertEquals(false, unknownType0.isBooleanValueType());
      assertEquals(true, unknownType0.matchesStringContext());
      assertEquals(false, unknownType0.isParameterizedType());
      assertEquals(true, unknownType0.isNullable());
      assertEquals(false, unknownType0.isNoObjectType());
      assertEquals("Unknown", unknownType0.getDisplayName());
      assertEquals(false, unknownType0.isResolved());
      assertEquals(false, unknownType0.hasReferenceName());
      assertEquals(true, unknownType0.matchesObjectContext());
      assertEquals(false, unknownType0.isAllType());
      assertEquals(false, unknownType0.isConstructor());
      assertEquals(false, unknownType0.isNoType());
      assertEquals(false, unknownType0.isStringValueType());
      assertEquals(false, unknownType0.isRecordType());
      assertEquals(false, unknownType0.hasCachedValues());
      assertEquals("goog.exportProperty", closureCodingConvention0.getExportPropertyFunction());
      assertEquals("goog.global", closureCodingConvention0.getGlobalObject());
      assertEquals("goog.abstractMethod", closureCodingConvention0.getAbstractMethodName());
      assertEquals("goog.exportSymbol", closureCodingConvention0.getExportSymbolFunction());
  }

  @Test
  public void test14()  throws Throwable  {
      GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
      assertNotNull(googleCodingConvention0);
      
      JSTypeRegistry jSTypeRegistry0 = null;
      ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter((CodingConvention) googleCodingConvention0, jSTypeRegistry0);
      assertNotNull(closureReverseAbstractInterpreter0);
      
      double double0 = (-2886.3278452862564);
      Node node0 = Node.newNumber(double0);
      assertNotNull(node0);
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isRegExp());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isStringKey());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isScript());
      assertEquals(false, node0.isObjectLit());
      assertEquals(true, node0.isNumber());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isAdd());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isQuotedString());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isLabel());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isVar());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isString());
      assertEquals(false, node0.isTrue());
      assertEquals(39, node0.getType());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isIn());
      
      FlowScope flowScope0 = null;
      JSType jSType0 = closureReverseAbstractInterpreter0.getTypeIfRefinable(node0, flowScope0);
      assertNull(jSType0);
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isRegExp());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isStringKey());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isScript());
      assertEquals(false, node0.isObjectLit());
      assertEquals(true, node0.isNumber());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isAdd());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isQuotedString());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isLabel());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isVar());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isString());
      assertEquals(false, node0.isTrue());
      assertEquals(39, node0.getType());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isIn());
      
      boolean boolean0 = false;
      FlowScope flowScope1 = closureReverseAbstractInterpreter0.firstPreciserScopeKnowingConditionOutcome(node0, flowScope0, boolean0);
      assertNull(flowScope1);
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isRegExp());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isStringKey());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isScript());
      assertEquals(false, node0.isObjectLit());
      assertEquals(true, node0.isNumber());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isAdd());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isQuotedString());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isLabel());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isVar());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isString());
      assertEquals(false, node0.isTrue());
      assertEquals(39, node0.getType());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isIn());
      
      // Undeclared exception!
      try {
        closureReverseAbstractInterpreter0.declareNameInScope(flowScope1, node0, jSType0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Node cannot be refined. 
         // NUMBER -2886.3278452862564
         //
      }
  }

  @Test
  public void test15()  throws Throwable  {
      JqueryCodingConvention jqueryCodingConvention0 = new JqueryCodingConvention();
      assertNotNull(jqueryCodingConvention0);
      assertEquals("window", jqueryCodingConvention0.getGlobalObject());
      
      GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention((CodingConvention) jqueryCodingConvention0);
      assertNotNull(googleCodingConvention0);
      assertEquals("window", jqueryCodingConvention0.getGlobalObject());
      
      JSTypeRegistry jSTypeRegistry0 = null;
      ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter((CodingConvention) googleCodingConvention0, jSTypeRegistry0);
      assertNotNull(closureReverseAbstractInterpreter0);
      assertEquals("window", jqueryCodingConvention0.getGlobalObject());
      
      SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter((CodingConvention) jqueryCodingConvention0, jSTypeRegistry0);
      assertNotNull(semanticReverseAbstractInterpreter0);
      assertEquals("window", jqueryCodingConvention0.getGlobalObject());
      
      int int0 = 33;
      String string0 = "";
      Node node0 = Node.newString(int0, string0);
      assertNotNull(node0);
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(33, node0.getType());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isString());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(0, node0.getChildCount());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isQuotedString());
      assertEquals(true, node0.isGetProp());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isScript());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isStringKey());
      assertEquals(false, node0.hasOneChild());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isNot());
      assertEquals(-1, node0.getSourcePosition());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isDelProp());
      
      FlowScope flowScope0 = null;
      boolean boolean0 = false;
      FlowScope flowScope1 = closureReverseAbstractInterpreter0.firstPreciserScopeKnowingConditionOutcome(node0, flowScope0, boolean0);
      assertNull(flowScope1);
      assertEquals("window", jqueryCodingConvention0.getGlobalObject());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(33, node0.getType());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isString());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(0, node0.getChildCount());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isQuotedString());
      assertEquals(true, node0.isGetProp());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isScript());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isStringKey());
      assertEquals(false, node0.hasOneChild());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isNot());
      assertEquals(-1, node0.getSourcePosition());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isDelProp());
      
      // Undeclared exception!
      try {
        FlowScope flowScope2 = semanticReverseAbstractInterpreter0.firstPreciserScopeKnowingConditionOutcome(node0, flowScope1, boolean0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test16()  throws Throwable  {
      GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
      assertNotNull(googleCodingConvention0);
      
      JSTypeRegistry jSTypeRegistry0 = null;
      ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter((CodingConvention) googleCodingConvention0, jSTypeRegistry0);
      assertNotNull(closureReverseAbstractInterpreter0);
      
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0);
      assertNotNull(jSTypeRegistry1);
      assertEquals(false, jSTypeRegistry1.shouldTolerateUndefinedValues());
      
      double double0 = (-2886.3278452862564);
      Node node0 = Node.newNumber(double0);
      assertNotNull(node0);
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isWith());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isScript());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isFor());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isTrue());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isDec());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isString());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isQuotedString());
      assertEquals(39, node0.getType());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isParamList());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isStringKey());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isIf());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isName());
      assertEquals(true, node0.isNumber());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isNull());
      
      SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter((CodingConvention) googleCodingConvention0, jSTypeRegistry1);
      assertNotNull(semanticReverseAbstractInterpreter0);
      assertEquals(false, jSTypeRegistry1.shouldTolerateUndefinedValues());
      
      ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter1 = (ClosureReverseAbstractInterpreter)semanticReverseAbstractInterpreter0.append((ChainableReverseAbstractInterpreter) closureReverseAbstractInterpreter0);
      assertSame(closureReverseAbstractInterpreter1, closureReverseAbstractInterpreter0);
      assertSame(closureReverseAbstractInterpreter0, closureReverseAbstractInterpreter1);
      assertNotNull(closureReverseAbstractInterpreter1);
      assertEquals(false, jSTypeRegistry1.shouldTolerateUndefinedValues());
      
      FlowScope flowScope0 = null;
      boolean boolean0 = false;
      FlowScope flowScope1 = closureReverseAbstractInterpreter0.firstPreciserScopeKnowingConditionOutcome(node0, flowScope0, boolean0);
      assertSame(closureReverseAbstractInterpreter0, closureReverseAbstractInterpreter1);
      assertNull(flowScope1);
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isWith());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isScript());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isFor());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isTrue());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isDec());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isString());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isQuotedString());
      assertEquals(39, node0.getType());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isParamList());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isStringKey());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isIf());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isName());
      assertEquals(true, node0.isNumber());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isNull());
  }

  @Test
  public void test17()  throws Throwable  {
      JqueryCodingConvention jqueryCodingConvention0 = new JqueryCodingConvention();
      assertNotNull(jqueryCodingConvention0);
      assertEquals("window", jqueryCodingConvention0.getGlobalObject());
      
      JSTypeRegistry jSTypeRegistry0 = null;
      SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter((CodingConvention) jqueryCodingConvention0, jSTypeRegistry0);
      assertNotNull(semanticReverseAbstractInterpreter0);
      assertEquals("window", jqueryCodingConvention0.getGlobalObject());
      
      ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter((CodingConvention) jqueryCodingConvention0, jSTypeRegistry0);
      assertNotNull(closureReverseAbstractInterpreter0);
      assertEquals("window", jqueryCodingConvention0.getGlobalObject());
      
      SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter1 = (SemanticReverseAbstractInterpreter)closureReverseAbstractInterpreter0.append((ChainableReverseAbstractInterpreter) semanticReverseAbstractInterpreter0);
      assertSame(semanticReverseAbstractInterpreter1, semanticReverseAbstractInterpreter0);
      assertSame(semanticReverseAbstractInterpreter0, semanticReverseAbstractInterpreter1);
      assertNotNull(semanticReverseAbstractInterpreter1);
      assertEquals("window", jqueryCodingConvention0.getGlobalObject());
      
      // Undeclared exception!
      try {
        ChainableReverseAbstractInterpreter chainableReverseAbstractInterpreter0 = closureReverseAbstractInterpreter0.append((ChainableReverseAbstractInterpreter) closureReverseAbstractInterpreter0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test18()  throws Throwable  {
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      assertNotNull(closureCodingConvention0);
      assertEquals("goog.exportSymbol", closureCodingConvention0.getExportSymbolFunction());
      assertEquals("goog.abstractMethod", closureCodingConvention0.getAbstractMethodName());
      assertEquals("goog.global", closureCodingConvention0.getGlobalObject());
      assertEquals("goog.exportProperty", closureCodingConvention0.getExportPropertyFunction());
      
      JqueryCodingConvention jqueryCodingConvention0 = new JqueryCodingConvention((CodingConvention) closureCodingConvention0);
      assertNotNull(jqueryCodingConvention0);
      assertEquals("goog.exportSymbol", closureCodingConvention0.getExportSymbolFunction());
      assertEquals("goog.abstractMethod", closureCodingConvention0.getAbstractMethodName());
      assertEquals("goog.global", closureCodingConvention0.getGlobalObject());
      assertEquals("goog.exportProperty", closureCodingConvention0.getExportPropertyFunction());
      assertEquals("window", jqueryCodingConvention0.getGlobalObject());
      
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      boolean boolean0 = true;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0, boolean0);
      assertNotNull(jSTypeRegistry0);
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter((CodingConvention) jqueryCodingConvention0, jSTypeRegistry0);
      assertNotNull(closureReverseAbstractInterpreter0);
      assertEquals("goog.exportSymbol", closureCodingConvention0.getExportSymbolFunction());
      assertEquals("goog.abstractMethod", closureCodingConvention0.getAbstractMethodName());
      assertEquals("goog.global", closureCodingConvention0.getGlobalObject());
      assertEquals("goog.exportProperty", closureCodingConvention0.getExportPropertyFunction());
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals("window", jqueryCodingConvention0.getGlobalObject());
      
      JSType jSType0 = null;
      String string0 = "\\)fg,l9:l1Oy";
      NoType noType0 = (NoType)jSTypeRegistry0.getGreatestSubtypeWithProperty(jSType0, string0);
      assertNotNull(noType0);
      assertEquals(false, noType0.isNominalConstructor());
      assertEquals(false, noType0.isNullType());
      assertEquals(true, noType0.matchesStringContext());
      assertEquals(false, noType0.isInterface());
      assertEquals(false, noType0.isAllType());
      assertEquals(false, noType0.isResolved());
      assertEquals(true, noType0.matchesNumberContext());
      assertEquals(false, noType0.isNominalType());
      assertEquals(true, noType0.isConstructor());
      assertEquals(true, noType0.hasInstanceType());
      assertEquals(false, noType0.isEnumType());
      assertEquals(false, noType0.isReturnTypeInferred());
      assertNull(noType0.getReferenceName());
      assertEquals(false, noType0.isUnionType());
      assertEquals(false, noType0.isNumberValueType());
      assertEquals(0, noType0.getExtendedInterfacesCount());
      assertEquals(false, noType0.isCheckedUnknownType());
      assertEquals(true, noType0.matchesObjectContext());
      assertEquals(true, noType0.isNullable());
      assertEquals(false, noType0.isBooleanValueType());
      assertEquals(false, noType0.isFunctionType());
      assertEquals(false, noType0.isNoObjectType());
      assertEquals(false, noType0.isVoidType());
      assertEquals(true, noType0.isNoType());
      assertEquals(false, noType0.hasCachedValues());
      assertEquals(2147483647, noType0.getPropertiesCount());
      assertEquals(true, noType0.canBeCalled());
      assertEquals(2147483647, noType0.getMaxArguments());
      assertEquals(false, noType0.isOrdinaryFunction());
      assertEquals(false, noType0.isEnumElementType());
      assertEquals(false, noType0.isParameterizedType());
      assertEquals(false, noType0.isFunctionPrototypeType());
      assertEquals(false, noType0.isNoResolvedType());
      assertEquals(false, noType0.isStringValueType());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noType0.isRecordType());
      assertEquals(false, noType0.isTemplateType());
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      NoType noType1 = (NoType)closureReverseAbstractInterpreter0.getRestrictedByTypeOfResult(noType0, string0, boolean0);
      assertSame(noType0, noType1);
      assertSame(noType1, noType0);
      assertNotNull(noType1);
      assertEquals(false, noType0.isNominalConstructor());
      assertEquals(false, noType0.isNullType());
      assertEquals(true, noType0.matchesStringContext());
      assertEquals(false, noType0.isInterface());
      assertEquals(false, noType0.isAllType());
      assertEquals(false, noType0.isResolved());
      assertEquals(true, noType0.matchesNumberContext());
      assertEquals(false, noType0.isNominalType());
      assertEquals(true, noType0.isConstructor());
      assertEquals(true, noType0.hasInstanceType());
      assertEquals(false, noType0.isEnumType());
      assertEquals(false, noType0.isReturnTypeInferred());
      assertNull(noType0.getReferenceName());
      assertEquals(false, noType0.isUnionType());
      assertEquals(false, noType0.isNumberValueType());
      assertEquals(0, noType0.getExtendedInterfacesCount());
      assertEquals(false, noType0.isCheckedUnknownType());
      assertEquals(true, noType0.matchesObjectContext());
      assertEquals(true, noType0.isNullable());
      assertEquals(false, noType0.isBooleanValueType());
      assertEquals(false, noType0.isFunctionType());
      assertEquals(false, noType0.isNoObjectType());
      assertEquals(false, noType0.isVoidType());
      assertEquals(true, noType0.isNoType());
      assertEquals(false, noType0.hasCachedValues());
      assertEquals(2147483647, noType0.getPropertiesCount());
      assertEquals(true, noType0.canBeCalled());
      assertEquals(2147483647, noType0.getMaxArguments());
      assertEquals(false, noType0.isOrdinaryFunction());
      assertEquals(false, noType0.isEnumElementType());
      assertEquals(false, noType0.isParameterizedType());
      assertEquals(false, noType0.isFunctionPrototypeType());
      assertEquals(false, noType0.isNoResolvedType());
      assertEquals(false, noType0.isStringValueType());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noType0.isRecordType());
      assertEquals(false, noType0.isTemplateType());
      assertEquals(false, noType1.hasCachedValues());
      assertEquals(false, noType1.isEnumElementType());
      assertNull(noType1.getReferenceName());
      assertEquals(true, noType1.isNullable());
      assertEquals(false, noType1.isReturnTypeInferred());
      assertEquals(false, noType1.isCheckedUnknownType());
      assertEquals(false, noType1.isVoidType());
      assertEquals(true, noType1.matchesStringContext());
      assertEquals(false, noType1.isTemplateType());
      assertEquals(true, noType1.matchesNumberContext());
      assertEquals(false, noType1.isFunctionPrototypeType());
      assertEquals(false, noType1.isStringValueType());
      assertEquals(false, noType1.isNullType());
      assertEquals(BooleanLiteralSet.EMPTY, noType1.getPossibleToBooleanOutcomes());
      assertEquals(false, noType1.isInterface());
      assertEquals(true, noType1.hasInstanceType());
      assertEquals(true, noType1.matchesObjectContext());
      assertEquals(false, noType1.isBooleanValueType());
      assertEquals(2147483647, noType1.getPropertiesCount());
      assertEquals(false, noType1.isNominalConstructor());
      assertEquals(false, noType1.isNoObjectType());
      assertEquals(false, noType1.isNominalType());
      assertEquals(2147483647, noType1.getMaxArguments());
      assertEquals(false, noType1.isEnumType());
      assertEquals(true, noType1.isConstructor());
      assertEquals(true, noType1.isNoType());
      assertEquals(false, noType1.isRecordType());
      assertEquals(0, noType1.getExtendedInterfacesCount());
      assertEquals(false, noType1.isNumberValueType());
      assertEquals(false, noType1.isAllType());
      assertEquals(false, noType1.isResolved());
      assertEquals(false, noType1.isNoResolvedType());
      assertEquals(false, noType1.isOrdinaryFunction());
      assertEquals(false, noType1.isParameterizedType());
      assertEquals(true, noType1.canBeCalled());
      assertEquals(false, noType1.isUnionType());
      assertEquals(false, noType1.isFunctionType());
      assertEquals("goog.exportSymbol", closureCodingConvention0.getExportSymbolFunction());
      assertEquals("goog.abstractMethod", closureCodingConvention0.getAbstractMethodName());
      assertEquals("goog.global", closureCodingConvention0.getGlobalObject());
      assertEquals("goog.exportProperty", closureCodingConvention0.getExportPropertyFunction());
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals("window", jqueryCodingConvention0.getGlobalObject());
  }

  @Test
  public void test19()  throws Throwable  {
      JqueryCodingConvention jqueryCodingConvention0 = new JqueryCodingConvention();
      assertNotNull(jqueryCodingConvention0);
      assertEquals("window", jqueryCodingConvention0.getGlobalObject());
      
      String string0 = jqueryCodingConvention0.getDelegateSuperclassName();
      assertNull(string0);
      assertEquals("window", jqueryCodingConvention0.getGlobalObject());
      
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      boolean boolean0 = jqueryCodingConvention0.isSuperClassReference(string0);
      assertFalse(boolean0);
      assertEquals("window", jqueryCodingConvention0.getGlobalObject());
      
      SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter((CodingConvention) jqueryCodingConvention0, jSTypeRegistry0);
      assertNotNull(semanticReverseAbstractInterpreter0);
      assertEquals("window", jqueryCodingConvention0.getGlobalObject());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      ObjectType objectType0 = null;
      ParameterizedType parameterizedType0 = jSTypeRegistry0.createParameterizedType(objectType0, (JSType) objectType0);
      assertNotNull(parameterizedType0);
      assertEquals(false, parameterizedType0.isVoidType());
      assertEquals(false, parameterizedType0.isNumberValueType());
      assertEquals(false, parameterizedType0.isFunctionPrototypeType());
      assertEquals(true, parameterizedType0.isParameterizedType());
      assertEquals(false, parameterizedType0.hasCachedValues());
      assertEquals(false, parameterizedType0.isResolved());
      assertEquals(false, parameterizedType0.isNullType());
      assertEquals(BooleanLiteralSet.TRUE, parameterizedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, parameterizedType0.isStringValueType());
      assertEquals(false, parameterizedType0.isBooleanValueType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      // Undeclared exception!
      try {
        JSType jSType0 = semanticReverseAbstractInterpreter0.getRestrictedByTypeOfResult(parameterizedType0, string0, boolean0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // StringEquals is not supposed to work on a null caller
         //
      }
  }

  @Test
  public void test20()  throws Throwable  {
      GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
      assertNotNull(googleCodingConvention0);
      
      ErrorReporter errorReporter0 = null;
      boolean boolean0 = true;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(errorReporter0, boolean0);
      assertNotNull(jSTypeRegistry0);
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter((CodingConvention) googleCodingConvention0, jSTypeRegistry0);
      assertNotNull(semanticReverseAbstractInterpreter0);
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter((CodingConvention) googleCodingConvention0, jSTypeRegistry0);
      assertNotNull(closureReverseAbstractInterpreter0);
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      JSTypeNative jSTypeNative0 = JSTypeNative.ALL_TYPE;
      AllType allType0 = (AllType)closureReverseAbstractInterpreter0.getNativeType(jSTypeNative0);
      assertNotNull(allType0);
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, allType0.isNoObjectType());
      assertEquals(false, allType0.isConstructor());
      assertEquals(false, allType0.isNominalConstructor());
      assertEquals("<Any Type>", allType0.getDisplayName());
      assertEquals(false, allType0.canBeCalled());
      assertEquals(false, allType0.isParameterizedType());
      assertEquals(false, allType0.isNoResolvedType());
      assertEquals(false, allType0.isBooleanValueType());
      assertEquals(false, allType0.isFunctionType());
      assertEquals(BooleanLiteralSet.BOTH, allType0.getPossibleToBooleanOutcomes());
      assertEquals(false, allType0.isUnionType());
      assertEquals(false, allType0.isEnumElementType());
      assertEquals(false, allType0.isNumberValueType());
      assertEquals(false, allType0.isInterface());
      assertEquals(false, allType0.isRecordType());
      assertEquals(false, allType0.isOrdinaryFunction());
      assertEquals(true, allType0.matchesObjectContext());
      assertEquals(false, allType0.isNoType());
      assertEquals(false, allType0.isFunctionPrototypeType());
      assertEquals(false, allType0.isStringValueType());
      assertEquals(true, allType0.hasDisplayName());
      assertEquals(false, allType0.isResolved());
      assertEquals(false, allType0.isEnumType());
      assertEquals(true, allType0.isAllType());
      assertEquals(false, allType0.isTemplateType());
      assertEquals(false, allType0.isNominalType());
      assertEquals(false, allType0.isCheckedUnknownType());
      assertEquals(false, allType0.isVoidType());
      assertEquals(true, allType0.matchesStringContext());
      assertEquals(false, allType0.isNullType());
      
      String string0 = "undefined";
      VoidType voidType0 = (VoidType)semanticReverseAbstractInterpreter0.getRestrictedByTypeOfResult(allType0, string0, boolean0);
      assertNotNull(voidType0);
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, voidType0.isNumberValueType());
      assertEquals(false, voidType0.isParameterizedType());
      assertEquals(false, voidType0.isResolved());
      assertEquals(false, voidType0.isEnumType());
      assertEquals(false, voidType0.matchesNumberContext());
      assertEquals(false, voidType0.isNominalType());
      assertEquals(false, voidType0.isInterface());
      assertEquals(true, voidType0.isVoidType());
      assertEquals(false, voidType0.isFunctionType());
      assertEquals(false, voidType0.isUnionType());
      assertEquals(false, voidType0.matchesObjectContext());
      assertEquals(false, voidType0.isBooleanValueType());
      assertEquals(false, voidType0.isNoResolvedType());
      assertEquals(false, voidType0.isEnumElementType());
      assertEquals(false, voidType0.isOrdinaryFunction());
      assertEquals(false, voidType0.isTemplateType());
      assertEquals(false, voidType0.isAllType());
      assertEquals(false, voidType0.isCheckedUnknownType());
      assertEquals(false, voidType0.isRecordType());
      assertEquals(false, voidType0.isStringValueType());
      assertEquals(false, voidType0.isFunctionPrototypeType());
      assertEquals(false, voidType0.isNominalConstructor());
      assertEquals(false, voidType0.isNullType());
      assertEquals(true, voidType0.matchesStringContext());
      assertEquals(false, voidType0.isNoObjectType());
      assertEquals(BooleanLiteralSet.FALSE, voidType0.getPossibleToBooleanOutcomes());
      assertEquals("undefined", voidType0.getDisplayName());
      assertEquals(false, voidType0.isNoType());
      assertEquals(false, voidType0.isConstructor());
      assertEquals(false, allType0.isNoObjectType());
      assertEquals(false, allType0.isConstructor());
      assertEquals(false, allType0.isNominalConstructor());
      assertEquals("<Any Type>", allType0.getDisplayName());
      assertEquals(false, allType0.canBeCalled());
      assertEquals(false, allType0.isParameterizedType());
      assertEquals(false, allType0.isNoResolvedType());
      assertEquals(false, allType0.isBooleanValueType());
      assertEquals(false, allType0.isFunctionType());
      assertEquals(BooleanLiteralSet.BOTH, allType0.getPossibleToBooleanOutcomes());
      assertEquals(false, allType0.isUnionType());
      assertEquals(false, allType0.isEnumElementType());
      assertEquals(false, allType0.isNumberValueType());
      assertEquals(false, allType0.isInterface());
      assertEquals(false, allType0.isRecordType());
      assertEquals(false, allType0.isOrdinaryFunction());
      assertEquals(true, allType0.matchesObjectContext());
      assertEquals(false, allType0.isNoType());
      assertEquals(false, allType0.isFunctionPrototypeType());
      assertEquals(false, allType0.isStringValueType());
      assertEquals(true, allType0.hasDisplayName());
      assertEquals(false, allType0.isResolved());
      assertEquals(false, allType0.isEnumType());
      assertEquals(true, allType0.isAllType());
      assertEquals(false, allType0.isTemplateType());
      assertEquals(false, allType0.isNominalType());
      assertEquals(false, allType0.isCheckedUnknownType());
      assertEquals(false, allType0.isVoidType());
      assertEquals(true, allType0.matchesStringContext());
      assertEquals(false, allType0.isNullType());
  }

  @Test
  public void test21()  throws Throwable  {
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      assertNotNull(closureCodingConvention0);
      assertEquals("goog.abstractMethod", closureCodingConvention0.getAbstractMethodName());
      assertEquals("goog.exportProperty", closureCodingConvention0.getExportPropertyFunction());
      assertEquals("goog.exportSymbol", closureCodingConvention0.getExportSymbolFunction());
      assertEquals("goog.global", closureCodingConvention0.getGlobalObject());
      
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      boolean boolean0 = true;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0, boolean0);
      assertNotNull(jSTypeRegistry0);
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter((CodingConvention) closureCodingConvention0, jSTypeRegistry0);
      assertNotNull(closureReverseAbstractInterpreter0);
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals("goog.abstractMethod", closureCodingConvention0.getAbstractMethodName());
      assertEquals("goog.exportProperty", closureCodingConvention0.getExportPropertyFunction());
      assertEquals("goog.exportSymbol", closureCodingConvention0.getExportSymbolFunction());
      assertEquals("goog.global", closureCodingConvention0.getGlobalObject());
      
      JSTypeNative jSTypeNative0 = JSTypeNative.NUMBER_TYPE;
      NumberType numberType0 = (NumberType)closureReverseAbstractInterpreter0.getNativeType(jSTypeNative0);
      assertNotNull(numberType0);
      assertEquals(false, numberType0.isAllType());
      assertEquals(false, numberType0.isUnionType());
      assertEquals(false, numberType0.isNullable());
      assertEquals(false, numberType0.isVoidType());
      assertEquals(false, numberType0.isNominalType());
      assertEquals("number", numberType0.getDisplayName());
      assertEquals(false, numberType0.isOrdinaryFunction());
      assertEquals(false, numberType0.isRecordType());
      assertEquals(BooleanLiteralSet.BOTH, numberType0.getPossibleToBooleanOutcomes());
      assertEquals(false, numberType0.isConstructor());
      assertEquals(false, numberType0.isParameterizedType());
      assertEquals(false, numberType0.isBooleanValueType());
      assertEquals(false, numberType0.isInterface());
      assertEquals(true, numberType0.isNumberValueType());
      assertEquals(false, numberType0.isNoType());
      assertEquals(true, numberType0.matchesStringContext());
      assertEquals(false, numberType0.isTemplateType());
      assertEquals(false, numberType0.isNoResolvedType());
      assertEquals(false, numberType0.isFunctionType());
      assertEquals(false, numberType0.isNullType());
      assertEquals(true, numberType0.matchesObjectContext());
      assertEquals(true, numberType0.matchesNumberContext());
      assertEquals(false, numberType0.isNominalConstructor());
      assertEquals(false, numberType0.isFunctionPrototypeType());
      assertEquals(false, numberType0.isEnumType());
      assertEquals(false, numberType0.isNoObjectType());
      assertEquals(false, numberType0.isEnumElementType());
      assertEquals(false, numberType0.isCheckedUnknownType());
      assertEquals(false, numberType0.isResolved());
      assertEquals(false, numberType0.isStringValueType());
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals("goog.abstractMethod", closureCodingConvention0.getAbstractMethodName());
      assertEquals("goog.exportProperty", closureCodingConvention0.getExportPropertyFunction());
      assertEquals("goog.exportSymbol", closureCodingConvention0.getExportSymbolFunction());
      assertEquals("goog.global", closureCodingConvention0.getGlobalObject());
      
      NumberType numberType1 = (NumberType)closureReverseAbstractInterpreter0.getRestrictedWithoutNull(numberType0);
      assertSame(numberType0, numberType1);
      assertSame(numberType1, numberType0);
      assertNotNull(numberType1);
      assertEquals(false, numberType0.isAllType());
      assertEquals(false, numberType0.isUnionType());
      assertEquals(false, numberType0.isNullable());
      assertEquals(false, numberType0.isVoidType());
      assertEquals(false, numberType0.isNominalType());
      assertEquals("number", numberType0.getDisplayName());
      assertEquals(false, numberType0.isOrdinaryFunction());
      assertEquals(false, numberType0.isRecordType());
      assertEquals(BooleanLiteralSet.BOTH, numberType0.getPossibleToBooleanOutcomes());
      assertEquals(false, numberType0.isConstructor());
      assertEquals(false, numberType0.isParameterizedType());
      assertEquals(false, numberType0.isBooleanValueType());
      assertEquals(false, numberType0.isInterface());
      assertEquals(true, numberType0.isNumberValueType());
      assertEquals(false, numberType0.isNoType());
      assertEquals(true, numberType0.matchesStringContext());
      assertEquals(false, numberType0.isTemplateType());
      assertEquals(false, numberType0.isNoResolvedType());
      assertEquals(false, numberType0.isFunctionType());
      assertEquals(false, numberType0.isNullType());
      assertEquals(true, numberType0.matchesObjectContext());
      assertEquals(true, numberType0.matchesNumberContext());
      assertEquals(false, numberType0.isNominalConstructor());
      assertEquals(false, numberType0.isFunctionPrototypeType());
      assertEquals(false, numberType0.isEnumType());
      assertEquals(false, numberType0.isNoObjectType());
      assertEquals(false, numberType0.isEnumElementType());
      assertEquals(false, numberType0.isCheckedUnknownType());
      assertEquals(false, numberType0.isResolved());
      assertEquals(false, numberType0.isStringValueType());
      assertEquals(false, numberType1.isResolved());
      assertEquals(false, numberType1.isNominalConstructor());
      assertEquals(true, numberType1.isNumberValueType());
      assertEquals(false, numberType1.isNoType());
      assertEquals(true, numberType1.matchesObjectContext());
      assertEquals(false, numberType1.isInterface());
      assertEquals(false, numberType1.isTemplateType());
      assertEquals(false, numberType1.isCheckedUnknownType());
      assertEquals(false, numberType1.isStringValueType());
      assertEquals(false, numberType1.isNoObjectType());
      assertEquals(false, numberType1.isAllType());
      assertEquals(false, numberType1.isBooleanValueType());
      assertEquals(false, numberType1.isNominalType());
      assertEquals("number", numberType1.getDisplayName());
      assertEquals(false, numberType1.isFunctionPrototypeType());
      assertEquals(false, numberType1.isFunctionType());
      assertEquals(false, numberType1.isConstructor());
      assertEquals(BooleanLiteralSet.BOTH, numberType1.getPossibleToBooleanOutcomes());
      assertEquals(false, numberType1.isVoidType());
      assertEquals(true, numberType1.matchesNumberContext());
      assertEquals(false, numberType1.isRecordType());
      assertEquals(true, numberType1.matchesStringContext());
      assertEquals(false, numberType1.isOrdinaryFunction());
      assertEquals(false, numberType1.isEnumType());
      assertEquals(false, numberType1.isParameterizedType());
      assertEquals(false, numberType1.isNullable());
      assertEquals(false, numberType1.isUnionType());
      assertEquals(false, numberType1.isEnumElementType());
      assertEquals(false, numberType1.isNullType());
      assertEquals(false, numberType1.isNoResolvedType());
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals("goog.abstractMethod", closureCodingConvention0.getAbstractMethodName());
      assertEquals("goog.exportProperty", closureCodingConvention0.getExportPropertyFunction());
      assertEquals("goog.exportSymbol", closureCodingConvention0.getExportSymbolFunction());
      assertEquals("goog.global", closureCodingConvention0.getGlobalObject());
  }

  @Test
  public void test22()  throws Throwable  {
      GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
      assertNotNull(googleCodingConvention0);
      
      ErrorReporter errorReporter0 = null;
      boolean boolean0 = true;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(errorReporter0, boolean0);
      assertNotNull(jSTypeRegistry0);
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter((CodingConvention) googleCodingConvention0, jSTypeRegistry0);
      assertNotNull(semanticReverseAbstractInterpreter0);
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter((CodingConvention) googleCodingConvention0, jSTypeRegistry0);
      assertNotNull(closureReverseAbstractInterpreter0);
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      JSTypeNative jSTypeNative0 = JSTypeNative.ALL_TYPE;
      AllType allType0 = (AllType)closureReverseAbstractInterpreter0.getNativeType(jSTypeNative0);
      assertNotNull(allType0);
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, allType0.isNominalConstructor());
      assertEquals(false, allType0.isNoResolvedType());
      assertEquals(false, allType0.isEnumType());
      assertEquals(false, allType0.canBeCalled());
      assertEquals(false, allType0.isEnumElementType());
      assertEquals(false, allType0.isNominalType());
      assertEquals(true, allType0.matchesObjectContext());
      assertEquals(false, allType0.isInterface());
      assertEquals(false, allType0.isNullType());
      assertEquals(false, allType0.isFunctionType());
      assertEquals(true, allType0.hasDisplayName());
      assertEquals(false, allType0.isNumberValueType());
      assertEquals(BooleanLiteralSet.BOTH, allType0.getPossibleToBooleanOutcomes());
      assertEquals(false, allType0.isResolved());
      assertEquals(false, allType0.isOrdinaryFunction());
      assertEquals(false, allType0.isTemplateType());
      assertEquals(false, allType0.isFunctionPrototypeType());
      assertEquals(false, allType0.isRecordType());
      assertEquals("<Any Type>", allType0.getDisplayName());
      assertEquals(false, allType0.isCheckedUnknownType());
      assertEquals(true, allType0.matchesStringContext());
      assertEquals(false, allType0.isParameterizedType());
      assertEquals(false, allType0.isStringValueType());
      assertEquals(false, allType0.isVoidType());
      assertEquals(false, allType0.isNoType());
      assertEquals(false, allType0.isBooleanValueType());
      assertEquals(false, allType0.isNoObjectType());
      assertEquals(true, allType0.isAllType());
      assertEquals(false, allType0.isConstructor());
      assertEquals(false, allType0.isUnionType());
      
      UnionType unionType0 = (UnionType)semanticReverseAbstractInterpreter0.getRestrictedWithoutNull(allType0);
      assertNotNull(unionType0);
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isInterface());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isOrdinaryFunction());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isNoResolvedType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isParameterizedType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isConstructor());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isNominalType());
      assertEquals(false, unionType0.isNominalConstructor());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isCheckedUnknownType());
      assertEquals(false, unionType0.isEnumElementType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isFunctionPrototypeType());
      assertEquals(false, unionType0.isEnumType());
      assertEquals(false, allType0.isNominalConstructor());
      assertEquals(false, allType0.isNoResolvedType());
      assertEquals(false, allType0.isEnumType());
      assertEquals(false, allType0.canBeCalled());
      assertEquals(false, allType0.isEnumElementType());
      assertEquals(false, allType0.isNominalType());
      assertEquals(true, allType0.matchesObjectContext());
      assertEquals(false, allType0.isInterface());
      assertEquals(false, allType0.isNullType());
      assertEquals(false, allType0.isFunctionType());
      assertEquals(true, allType0.hasDisplayName());
      assertEquals(false, allType0.isNumberValueType());
      assertEquals(BooleanLiteralSet.BOTH, allType0.getPossibleToBooleanOutcomes());
      assertEquals(false, allType0.isResolved());
      assertEquals(false, allType0.isOrdinaryFunction());
      assertEquals(false, allType0.isTemplateType());
      assertEquals(false, allType0.isFunctionPrototypeType());
      assertEquals(false, allType0.isRecordType());
      assertEquals("<Any Type>", allType0.getDisplayName());
      assertEquals(false, allType0.isCheckedUnknownType());
      assertEquals(true, allType0.matchesStringContext());
      assertEquals(false, allType0.isParameterizedType());
      assertEquals(false, allType0.isStringValueType());
      assertEquals(false, allType0.isVoidType());
      assertEquals(false, allType0.isNoType());
      assertEquals(false, allType0.isBooleanValueType());
      assertEquals(false, allType0.isNoObjectType());
      assertEquals(true, allType0.isAllType());
      assertEquals(false, allType0.isConstructor());
      assertEquals(false, allType0.isUnionType());
  }

  @Test
  public void test23()  throws Throwable  {
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      assertNotNull(closureCodingConvention0);
      assertEquals("goog.exportProperty", closureCodingConvention0.getExportPropertyFunction());
      assertEquals("goog.abstractMethod", closureCodingConvention0.getAbstractMethodName());
      assertEquals("goog.exportSymbol", closureCodingConvention0.getExportSymbolFunction());
      assertEquals("goog.global", closureCodingConvention0.getGlobalObject());
      
      GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention((CodingConvention) closureCodingConvention0);
      assertNotNull(googleCodingConvention0);
      assertEquals("goog.exportProperty", closureCodingConvention0.getExportPropertyFunction());
      assertEquals("goog.abstractMethod", closureCodingConvention0.getAbstractMethodName());
      assertEquals("goog.exportSymbol", closureCodingConvention0.getExportSymbolFunction());
      assertEquals("goog.global", closureCodingConvention0.getGlobalObject());
      
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      boolean boolean0 = false;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0, boolean0);
      assertNotNull(jSTypeRegistry0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter((CodingConvention) googleCodingConvention0, jSTypeRegistry0);
      assertNotNull(semanticReverseAbstractInterpreter0);
      assertEquals("goog.exportProperty", closureCodingConvention0.getExportPropertyFunction());
      assertEquals("goog.abstractMethod", closureCodingConvention0.getAbstractMethodName());
      assertEquals("goog.exportSymbol", closureCodingConvention0.getExportSymbolFunction());
      assertEquals("goog.global", closureCodingConvention0.getGlobalObject());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      JSTypeNative jSTypeNative0 = JSTypeNative.NO_OBJECT_TYPE;
      NoObjectType noObjectType0 = (NoObjectType)jSTypeRegistry0.getNativeType(jSTypeNative0);
      assertNotNull(noObjectType0);
      assertEquals(false, noObjectType0.isNumberValueType());
      assertEquals(false, noObjectType0.hasCachedValues());
      assertEquals(false, noObjectType0.isUnionType());
      assertEquals(false, noObjectType0.isInterface());
      assertEquals(false, noObjectType0.isReturnTypeInferred());
      assertEquals(false, noObjectType0.isFunctionPrototypeType());
      assertEquals(true, noObjectType0.hasInstanceType());
      assertEquals(true, noObjectType0.isNoObjectType());
      assertEquals(false, noObjectType0.isBooleanValueType());
      assertEquals(false, noObjectType0.isEnumElementType());
      assertEquals(false, noObjectType0.isNullType());
      assertEquals(false, noObjectType0.isNominalType());
      assertEquals(2147483647, noObjectType0.getMaxArguments());
      assertEquals(true, noObjectType0.canBeCalled());
      assertEquals(false, noObjectType0.isAllType());
      assertEquals(false, noObjectType0.isCheckedUnknownType());
      assertEquals(false, noObjectType0.isParameterizedType());
      assertEquals(false, noObjectType0.isTemplateType());
      assertEquals(false, noObjectType0.isResolved());
      assertEquals(false, noObjectType0.isNominalConstructor());
      assertEquals(BooleanLiteralSet.TRUE, noObjectType0.getPossibleToBooleanOutcomes());
      assertEquals(2147483647, noObjectType0.getPropertiesCount());
      assertNull(noObjectType0.getReferenceName());
      assertEquals(false, noObjectType0.isStringValueType());
      assertEquals(false, noObjectType0.isNoResolvedType());
      assertEquals(true, noObjectType0.matchesObjectContext());
      assertEquals(false, noObjectType0.isEnumType());
      assertEquals(true, noObjectType0.matchesStringContext());
      assertEquals(false, noObjectType0.isFunctionType());
      assertEquals(false, noObjectType0.isVoidType());
      assertEquals(false, noObjectType0.isRecordType());
      assertEquals(0, noObjectType0.getExtendedInterfacesCount());
      assertEquals(true, noObjectType0.matchesNumberContext());
      assertEquals(true, noObjectType0.isConstructor());
      assertEquals(false, noObjectType0.isOrdinaryFunction());
      assertEquals(false, noObjectType0.isNoType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      NoObjectType noObjectType1 = (NoObjectType)semanticReverseAbstractInterpreter0.getRestrictedWithoutNull(noObjectType0);
      assertSame(noObjectType0, noObjectType1);
      assertSame(noObjectType1, noObjectType0);
      assertNotNull(noObjectType1);
      assertEquals(false, noObjectType0.isNumberValueType());
      assertEquals(false, noObjectType0.hasCachedValues());
      assertEquals(false, noObjectType0.isUnionType());
      assertEquals(false, noObjectType0.isInterface());
      assertEquals(false, noObjectType0.isReturnTypeInferred());
      assertEquals(false, noObjectType0.isFunctionPrototypeType());
      assertEquals(true, noObjectType0.hasInstanceType());
      assertEquals(true, noObjectType0.isNoObjectType());
      assertEquals(false, noObjectType0.isBooleanValueType());
      assertEquals(false, noObjectType0.isEnumElementType());
      assertEquals(false, noObjectType0.isNullType());
      assertEquals(false, noObjectType0.isNominalType());
      assertEquals(2147483647, noObjectType0.getMaxArguments());
      assertEquals(true, noObjectType0.canBeCalled());
      assertEquals(false, noObjectType0.isAllType());
      assertEquals(false, noObjectType0.isCheckedUnknownType());
      assertEquals(false, noObjectType0.isParameterizedType());
      assertEquals(false, noObjectType0.isTemplateType());
      assertEquals(false, noObjectType0.isResolved());
      assertEquals(false, noObjectType0.isNominalConstructor());
      assertEquals(BooleanLiteralSet.TRUE, noObjectType0.getPossibleToBooleanOutcomes());
      assertEquals(2147483647, noObjectType0.getPropertiesCount());
      assertNull(noObjectType0.getReferenceName());
      assertEquals(false, noObjectType0.isStringValueType());
      assertEquals(false, noObjectType0.isNoResolvedType());
      assertEquals(true, noObjectType0.matchesObjectContext());
      assertEquals(false, noObjectType0.isEnumType());
      assertEquals(true, noObjectType0.matchesStringContext());
      assertEquals(false, noObjectType0.isFunctionType());
      assertEquals(false, noObjectType0.isVoidType());
      assertEquals(false, noObjectType0.isRecordType());
      assertEquals(0, noObjectType0.getExtendedInterfacesCount());
      assertEquals(true, noObjectType0.matchesNumberContext());
      assertEquals(true, noObjectType0.isConstructor());
      assertEquals(false, noObjectType0.isOrdinaryFunction());
      assertEquals(false, noObjectType0.isNoType());
      assertEquals("goog.exportProperty", closureCodingConvention0.getExportPropertyFunction());
      assertEquals("goog.abstractMethod", closureCodingConvention0.getAbstractMethodName());
      assertEquals("goog.exportSymbol", closureCodingConvention0.getExportSymbolFunction());
      assertEquals("goog.global", closureCodingConvention0.getGlobalObject());
      assertEquals(false, noObjectType1.isParameterizedType());
      assertEquals(false, noObjectType1.isNominalConstructor());
      assertEquals(true, noObjectType1.isConstructor());
      assertEquals(false, noObjectType1.isCheckedUnknownType());
      assertEquals(false, noObjectType1.isNoResolvedType());
      assertEquals(0, noObjectType1.getExtendedInterfacesCount());
      assertEquals(true, noObjectType1.canBeCalled());
      assertEquals(false, noObjectType1.isRecordType());
      assertEquals(false, noObjectType1.isReturnTypeInferred());
      assertEquals(false, noObjectType1.isBooleanValueType());
      assertEquals(false, noObjectType1.isVoidType());
      assertEquals(false, noObjectType1.isInterface());
      assertEquals(true, noObjectType1.matchesStringContext());
      assertEquals(false, noObjectType1.isEnumElementType());
      assertEquals(false, noObjectType1.isNumberValueType());
      assertNull(noObjectType1.getReferenceName());
      assertEquals(false, noObjectType1.isStringValueType());
      assertEquals(true, noObjectType1.matchesObjectContext());
      assertEquals(false, noObjectType1.isNoType());
      assertEquals(false, noObjectType1.isNominalType());
      assertEquals(true, noObjectType1.isNoObjectType());
      assertEquals(false, noObjectType1.isAllType());
      assertEquals(true, noObjectType1.matchesNumberContext());
      assertEquals(false, noObjectType1.isNullType());
      assertEquals(false, noObjectType1.isFunctionType());
      assertEquals(false, noObjectType1.isFunctionPrototypeType());
      assertEquals(2147483647, noObjectType1.getMaxArguments());
      assertEquals(false, noObjectType1.hasCachedValues());
      assertEquals(false, noObjectType1.isTemplateType());
      assertEquals(2147483647, noObjectType1.getPropertiesCount());
      assertEquals(BooleanLiteralSet.TRUE, noObjectType1.getPossibleToBooleanOutcomes());
      assertEquals(true, noObjectType1.hasInstanceType());
      assertEquals(false, noObjectType1.isOrdinaryFunction());
      assertEquals(false, noObjectType1.isUnionType());
      assertEquals(false, noObjectType1.isResolved());
      assertEquals(false, noObjectType1.isEnumType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
  }

  @Test
  public void test24()  throws Throwable  {
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      assertNotNull(closureCodingConvention0);
      assertEquals("goog.exportProperty", closureCodingConvention0.getExportPropertyFunction());
      assertEquals("goog.abstractMethod", closureCodingConvention0.getAbstractMethodName());
      assertEquals("goog.global", closureCodingConvention0.getGlobalObject());
      assertEquals("goog.exportSymbol", closureCodingConvention0.getExportSymbolFunction());
      
      ErrorReporter errorReporter0 = null;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(errorReporter0);
      assertNotNull(jSTypeRegistry0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter((CodingConvention) closureCodingConvention0, jSTypeRegistry0);
      assertNotNull(closureReverseAbstractInterpreter0);
      assertEquals("goog.exportProperty", closureCodingConvention0.getExportPropertyFunction());
      assertEquals("goog.abstractMethod", closureCodingConvention0.getAbstractMethodName());
      assertEquals("goog.global", closureCodingConvention0.getGlobalObject());
      assertEquals("goog.exportSymbol", closureCodingConvention0.getExportSymbolFunction());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter((CodingConvention) closureCodingConvention0, jSTypeRegistry0);
      assertNotNull(semanticReverseAbstractInterpreter0);
      assertEquals("goog.exportProperty", closureCodingConvention0.getExportPropertyFunction());
      assertEquals("goog.abstractMethod", closureCodingConvention0.getAbstractMethodName());
      assertEquals("goog.global", closureCodingConvention0.getGlobalObject());
      assertEquals("goog.exportSymbol", closureCodingConvention0.getExportSymbolFunction());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      JSTypeNative jSTypeNative0 = JSTypeNative.BOOLEAN_TYPE;
      BooleanType booleanType0 = (BooleanType)semanticReverseAbstractInterpreter0.getNativeType(jSTypeNative0);
      assertNotNull(booleanType0);
      assertEquals("goog.exportProperty", closureCodingConvention0.getExportPropertyFunction());
      assertEquals("goog.abstractMethod", closureCodingConvention0.getAbstractMethodName());
      assertEquals("goog.global", closureCodingConvention0.getGlobalObject());
      assertEquals("goog.exportSymbol", closureCodingConvention0.getExportSymbolFunction());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals("boolean", booleanType0.getDisplayName());
      assertEquals(false, booleanType0.isNullable());
      assertEquals(false, booleanType0.isCheckedUnknownType());
      assertEquals(false, booleanType0.isNoType());
      assertEquals(true, booleanType0.isBooleanValueType());
      assertEquals(false, booleanType0.isEnumElementType());
      assertEquals(false, booleanType0.isStringValueType());
      assertEquals(false, booleanType0.isRecordType());
      assertEquals(false, booleanType0.isEnumType());
      assertEquals(false, booleanType0.isAllType());
      assertEquals(BooleanLiteralSet.BOTH, booleanType0.getPossibleToBooleanOutcomes());
      assertEquals(false, booleanType0.isResolved());
      assertEquals(false, booleanType0.isConstructor());
      assertEquals(false, booleanType0.isOrdinaryFunction());
      assertEquals(false, booleanType0.isUnionType());
      assertEquals(false, booleanType0.isTemplateType());
      assertEquals(false, booleanType0.isParameterizedType());
      assertEquals(false, booleanType0.isVoidType());
      assertEquals(true, booleanType0.matchesStringContext());
      assertEquals(true, booleanType0.matchesObjectContext());
      assertEquals(false, booleanType0.isNoObjectType());
      assertEquals(false, booleanType0.isNoResolvedType());
      assertEquals(false, booleanType0.isNominalConstructor());
      assertEquals(false, booleanType0.isInterface());
      assertEquals(false, booleanType0.isFunctionPrototypeType());
      assertEquals(false, booleanType0.isNominalType());
      assertEquals(false, booleanType0.isNullType());
      assertEquals(false, booleanType0.isNumberValueType());
      assertEquals(true, booleanType0.matchesNumberContext());
      assertEquals(false, booleanType0.isFunctionType());
      
      BooleanType booleanType1 = (BooleanType)closureReverseAbstractInterpreter0.getRestrictedWithoutNull(booleanType0);
      assertSame(booleanType1, booleanType0);
      assertSame(booleanType0, booleanType1);
      assertNotNull(booleanType1);
      assertEquals(false, booleanType1.isFunctionType());
      assertEquals(true, booleanType1.matchesNumberContext());
      assertEquals(false, booleanType1.isResolved());
      assertEquals(false, booleanType1.isNumberValueType());
      assertEquals(false, booleanType1.isCheckedUnknownType());
      assertEquals(true, booleanType1.isBooleanValueType());
      assertEquals(false, booleanType1.isNullable());
      assertEquals(false, booleanType1.isNoObjectType());
      assertEquals(false, booleanType1.isUnionType());
      assertEquals(false, booleanType1.isEnumType());
      assertEquals(BooleanLiteralSet.BOTH, booleanType1.getPossibleToBooleanOutcomes());
      assertEquals(false, booleanType1.isTemplateType());
      assertEquals(false, booleanType1.isNoResolvedType());
      assertEquals("boolean", booleanType1.getDisplayName());
      assertEquals(false, booleanType1.isAllType());
      assertEquals(false, booleanType1.isNominalConstructor());
      assertEquals(false, booleanType1.isFunctionPrototypeType());
      assertEquals(false, booleanType1.isNoType());
      assertEquals(true, booleanType1.matchesObjectContext());
      assertEquals(false, booleanType1.isRecordType());
      assertEquals(false, booleanType1.isParameterizedType());
      assertEquals(false, booleanType1.isNominalType());
      assertEquals(false, booleanType1.isOrdinaryFunction());
      assertEquals(false, booleanType1.isStringValueType());
      assertEquals(false, booleanType1.isNullType());
      assertEquals(false, booleanType1.isEnumElementType());
      assertEquals(true, booleanType1.matchesStringContext());
      assertEquals(false, booleanType1.isVoidType());
      assertEquals(false, booleanType1.isConstructor());
      assertEquals(false, booleanType1.isInterface());
      assertEquals("goog.exportProperty", closureCodingConvention0.getExportPropertyFunction());
      assertEquals("goog.abstractMethod", closureCodingConvention0.getAbstractMethodName());
      assertEquals("goog.global", closureCodingConvention0.getGlobalObject());
      assertEquals("goog.exportSymbol", closureCodingConvention0.getExportSymbolFunction());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals("boolean", booleanType0.getDisplayName());
      assertEquals(false, booleanType0.isNullable());
      assertEquals(false, booleanType0.isCheckedUnknownType());
      assertEquals(false, booleanType0.isNoType());
      assertEquals(true, booleanType0.isBooleanValueType());
      assertEquals(false, booleanType0.isEnumElementType());
      assertEquals(false, booleanType0.isStringValueType());
      assertEquals(false, booleanType0.isRecordType());
      assertEquals(false, booleanType0.isEnumType());
      assertEquals(false, booleanType0.isAllType());
      assertEquals(BooleanLiteralSet.BOTH, booleanType0.getPossibleToBooleanOutcomes());
      assertEquals(false, booleanType0.isResolved());
      assertEquals(false, booleanType0.isConstructor());
      assertEquals(false, booleanType0.isOrdinaryFunction());
      assertEquals(false, booleanType0.isUnionType());
      assertEquals(false, booleanType0.isTemplateType());
      assertEquals(false, booleanType0.isParameterizedType());
      assertEquals(false, booleanType0.isVoidType());
      assertEquals(true, booleanType0.matchesStringContext());
      assertEquals(true, booleanType0.matchesObjectContext());
      assertEquals(false, booleanType0.isNoObjectType());
      assertEquals(false, booleanType0.isNoResolvedType());
      assertEquals(false, booleanType0.isNominalConstructor());
      assertEquals(false, booleanType0.isInterface());
      assertEquals(false, booleanType0.isFunctionPrototypeType());
      assertEquals(false, booleanType0.isNominalType());
      assertEquals(false, booleanType0.isNullType());
      assertEquals(false, booleanType0.isNumberValueType());
      assertEquals(true, booleanType0.matchesNumberContext());
      assertEquals(false, booleanType0.isFunctionType());
  }

  @Test
  public void test25()  throws Throwable  {
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      assertNotNull(closureCodingConvention0);
      assertEquals("goog.exportSymbol", closureCodingConvention0.getExportSymbolFunction());
      assertEquals("goog.global", closureCodingConvention0.getGlobalObject());
      assertEquals("goog.abstractMethod", closureCodingConvention0.getAbstractMethodName());
      assertEquals("goog.exportProperty", closureCodingConvention0.getExportPropertyFunction());
      
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter((CodingConvention) closureCodingConvention0, jSTypeRegistry0);
      assertNotNull(semanticReverseAbstractInterpreter0);
      assertEquals("goog.exportSymbol", closureCodingConvention0.getExportSymbolFunction());
      assertEquals("goog.global", closureCodingConvention0.getGlobalObject());
      assertEquals("goog.abstractMethod", closureCodingConvention0.getAbstractMethodName());
      assertEquals("goog.exportProperty", closureCodingConvention0.getExportPropertyFunction());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter((CodingConvention) closureCodingConvention0, jSTypeRegistry0);
      assertNotNull(closureReverseAbstractInterpreter0);
      assertEquals("goog.exportSymbol", closureCodingConvention0.getExportSymbolFunction());
      assertEquals("goog.global", closureCodingConvention0.getGlobalObject());
      assertEquals("goog.abstractMethod", closureCodingConvention0.getAbstractMethodName());
      assertEquals("goog.exportProperty", closureCodingConvention0.getExportPropertyFunction());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      JSTypeNative jSTypeNative0 = JSTypeNative.VOID_TYPE;
      VoidType voidType0 = (VoidType)closureReverseAbstractInterpreter0.getNativeType(jSTypeNative0);
      assertNotNull(voidType0);
      assertEquals("goog.exportSymbol", closureCodingConvention0.getExportSymbolFunction());
      assertEquals("goog.global", closureCodingConvention0.getGlobalObject());
      assertEquals("goog.abstractMethod", closureCodingConvention0.getAbstractMethodName());
      assertEquals("goog.exportProperty", closureCodingConvention0.getExportPropertyFunction());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, voidType0.isNullType());
      assertEquals(false, voidType0.isBooleanValueType());
      assertEquals(false, voidType0.isParameterizedType());
      assertEquals(false, voidType0.matchesObjectContext());
      assertEquals(false, voidType0.isStringValueType());
      assertEquals("undefined", voidType0.getDisplayName());
      assertEquals(BooleanLiteralSet.FALSE, voidType0.getPossibleToBooleanOutcomes());
      assertEquals(true, voidType0.isVoidType());
      assertEquals(false, voidType0.isConstructor());
      assertEquals(false, voidType0.isOrdinaryFunction());
      assertEquals(false, voidType0.isNoType());
      assertEquals(false, voidType0.isCheckedUnknownType());
      assertEquals(false, voidType0.matchesNumberContext());
      assertEquals(false, voidType0.isTemplateType());
      assertEquals(false, voidType0.isNominalConstructor());
      assertEquals(false, voidType0.isEnumElementType());
      assertEquals(false, voidType0.isUnionType());
      assertEquals(false, voidType0.isEnumType());
      assertEquals(false, voidType0.isNoResolvedType());
      assertEquals(false, voidType0.isNoObjectType());
      assertEquals(false, voidType0.isResolved());
      assertEquals(false, voidType0.isNumberValueType());
      assertEquals(false, voidType0.isNominalType());
      assertEquals(false, voidType0.isAllType());
      assertEquals(false, voidType0.isFunctionPrototypeType());
      assertEquals(true, voidType0.matchesStringContext());
      assertEquals(false, voidType0.isInterface());
      assertEquals(false, voidType0.isRecordType());
      assertEquals(false, voidType0.isFunctionType());
      
      VoidType voidType1 = (VoidType)semanticReverseAbstractInterpreter0.getRestrictedWithoutNull(voidType0);
      assertSame(voidType1, voidType0);
      assertSame(voidType0, voidType1);
      assertNotNull(voidType1);
      assertEquals(false, voidType1.isOrdinaryFunction());
      assertEquals(false, voidType1.isUnionType());
      assertEquals(false, voidType1.isNoObjectType());
      assertEquals(false, voidType1.isEnumElementType());
      assertEquals(false, voidType1.matchesNumberContext());
      assertEquals(true, voidType1.matchesStringContext());
      assertEquals(false, voidType1.isNumberValueType());
      assertEquals(false, voidType1.isFunctionPrototypeType());
      assertEquals(false, voidType1.isParameterizedType());
      assertEquals(false, voidType1.isNoType());
      assertEquals(false, voidType1.isNominalType());
      assertEquals(false, voidType1.isInterface());
      assertEquals(false, voidType1.matchesObjectContext());
      assertEquals(false, voidType1.isTemplateType());
      assertEquals(false, voidType1.isStringValueType());
      assertEquals(false, voidType1.isConstructor());
      assertEquals("undefined", voidType1.getDisplayName());
      assertEquals(false, voidType1.isCheckedUnknownType());
      assertEquals(false, voidType1.isResolved());
      assertEquals(BooleanLiteralSet.FALSE, voidType1.getPossibleToBooleanOutcomes());
      assertEquals(false, voidType1.isRecordType());
      assertEquals(false, voidType1.isNullType());
      assertEquals(false, voidType1.isNominalConstructor());
      assertEquals(false, voidType1.isEnumType());
      assertEquals(false, voidType1.isBooleanValueType());
      assertEquals(false, voidType1.isNoResolvedType());
      assertEquals(false, voidType1.isAllType());
      assertEquals(false, voidType1.isFunctionType());
      assertEquals(true, voidType1.isVoidType());
      assertEquals("goog.exportSymbol", closureCodingConvention0.getExportSymbolFunction());
      assertEquals("goog.global", closureCodingConvention0.getGlobalObject());
      assertEquals("goog.abstractMethod", closureCodingConvention0.getAbstractMethodName());
      assertEquals("goog.exportProperty", closureCodingConvention0.getExportPropertyFunction());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, voidType0.isNullType());
      assertEquals(false, voidType0.isBooleanValueType());
      assertEquals(false, voidType0.isParameterizedType());
      assertEquals(false, voidType0.matchesObjectContext());
      assertEquals(false, voidType0.isStringValueType());
      assertEquals("undefined", voidType0.getDisplayName());
      assertEquals(BooleanLiteralSet.FALSE, voidType0.getPossibleToBooleanOutcomes());
      assertEquals(true, voidType0.isVoidType());
      assertEquals(false, voidType0.isConstructor());
      assertEquals(false, voidType0.isOrdinaryFunction());
      assertEquals(false, voidType0.isNoType());
      assertEquals(false, voidType0.isCheckedUnknownType());
      assertEquals(false, voidType0.matchesNumberContext());
      assertEquals(false, voidType0.isTemplateType());
      assertEquals(false, voidType0.isNominalConstructor());
      assertEquals(false, voidType0.isEnumElementType());
      assertEquals(false, voidType0.isUnionType());
      assertEquals(false, voidType0.isEnumType());
      assertEquals(false, voidType0.isNoResolvedType());
      assertEquals(false, voidType0.isNoObjectType());
      assertEquals(false, voidType0.isResolved());
      assertEquals(false, voidType0.isNumberValueType());
      assertEquals(false, voidType0.isNominalType());
      assertEquals(false, voidType0.isAllType());
      assertEquals(false, voidType0.isFunctionPrototypeType());
      assertEquals(true, voidType0.matchesStringContext());
      assertEquals(false, voidType0.isInterface());
      assertEquals(false, voidType0.isRecordType());
      assertEquals(false, voidType0.isFunctionType());
  }

  @Test
  public void test26()  throws Throwable  {
      GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
      assertNotNull(googleCodingConvention0);
      
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      boolean boolean0 = false;
      ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter((CodingConvention) googleCodingConvention0, jSTypeRegistry0);
      assertNotNull(closureReverseAbstractInterpreter0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      String string0 = "nand";
      int int0 = (-1825);
      Node node0 = new Node(int0);
      assertNotNull(node0);
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isScript());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isRegExp());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(false, node0.isStringKey());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isDelProp());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isBreak());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isObjectLit());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isString());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isHook());
      assertEquals(-1825, node0.getType());
      assertEquals(false, node0.isTrue());
      assertEquals(-1, node0.getLineno());
      assertEquals(-1, node0.getCharno());
      
      JSTypeNative jSTypeNative0 = JSTypeNative.UNKNOWN_TYPE;
      UnknownType unknownType0 = (UnknownType)closureReverseAbstractInterpreter0.getNativeType(jSTypeNative0);
      assertNotNull(unknownType0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(true, unknownType0.hasDisplayName());
      assertEquals("Unknown", unknownType0.getDisplayName());
      assertEquals(false, unknownType0.isTemplateType());
      assertEquals(false, unknownType0.isNullType());
      assertEquals(false, unknownType0.isConstructor());
      assertEquals(false, unknownType0.isResolved());
      assertEquals(false, unknownType0.isNativeObjectType());
      assertEquals(false, unknownType0.isInterface());
      assertEquals(BooleanLiteralSet.BOTH, unknownType0.getPossibleToBooleanOutcomes());
      assertEquals(false, unknownType0.isOrdinaryFunction());
      assertEquals(false, unknownType0.isNominalType());
      assertEquals(false, unknownType0.isAllType());
      assertEquals(false, unknownType0.isNoType());
      assertEquals(false, unknownType0.isFunctionType());
      assertEquals(true, unknownType0.isNullable());
      assertEquals("?", unknownType0.getReferenceName());
      assertEquals(false, unknownType0.isStringValueType());
      assertEquals(false, unknownType0.isEnumType());
      assertEquals(true, unknownType0.matchesNumberContext());
      assertEquals(2147483647, unknownType0.getPropertiesCount());
      assertEquals(true, unknownType0.isUnknownType());
      assertEquals(false, unknownType0.isUnionType());
      assertEquals(false, unknownType0.isCheckedUnknownType());
      assertEquals(false, unknownType0.isVoidType());
      assertEquals(false, unknownType0.isParameterizedType());
      assertEquals(false, unknownType0.isNoObjectType());
      assertEquals(false, unknownType0.isEnumElementType());
      assertEquals(false, unknownType0.isNumberValueType());
      assertEquals(false, unknownType0.hasReferenceName());
      assertEquals(false, unknownType0.isFunctionPrototypeType());
      assertEquals(true, unknownType0.matchesStringContext());
      assertEquals(true, unknownType0.matchesObjectContext());
      assertEquals(false, unknownType0.isNoResolvedType());
      assertEquals(false, unknownType0.isRecordType());
      assertEquals(false, unknownType0.isNominalConstructor());
      assertEquals(true, unknownType0.canBeCalled());
      assertEquals(false, unknownType0.hasCachedValues());
      assertEquals(false, unknownType0.isBooleanValueType());
      
      EnumType enumType0 = jSTypeRegistry0.createEnumType(string0, node0, (JSType) unknownType0);
      assertNotNull(enumType0);
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isScript());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isRegExp());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(false, node0.isStringKey());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isDelProp());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isBreak());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isObjectLit());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isString());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isHook());
      assertEquals(-1825, node0.getType());
      assertEquals(false, node0.isTrue());
      assertEquals(-1, node0.getLineno());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, enumType0.isRecordType());
      assertEquals(false, enumType0.isNoObjectType());
      assertEquals(false, enumType0.isVoidType());
      assertEquals(false, enumType0.isNominalConstructor());
      assertEquals(false, enumType0.isNoResolvedType());
      assertEquals(false, enumType0.isAllType());
      assertEquals(false, enumType0.matchesNumberContext());
      assertEquals(false, enumType0.isStringValueType());
      assertEquals(false, enumType0.isNominalType());
      assertEquals(false, enumType0.isTemplateType());
      assertEquals(false, enumType0.isUnionType());
      assertEquals(true, enumType0.matchesStringContext());
      assertEquals(false, enumType0.isCheckedUnknownType());
      assertEquals(BooleanLiteralSet.TRUE, enumType0.getPossibleToBooleanOutcomes());
      assertEquals(false, enumType0.isNumberValueType());
      assertEquals(false, enumType0.isResolved());
      assertEquals(false, enumType0.isNoType());
      assertEquals(false, enumType0.isParameterizedType());
      assertEquals(true, enumType0.matchesObjectContext());
      assertEquals(false, enumType0.isConstructor());
      assertEquals(false, enumType0.isEnumElementType());
      assertEquals(false, enumType0.isBooleanValueType());
      assertEquals(true, enumType0.isEnumType());
      assertEquals(false, enumType0.isInterface());
      assertEquals(false, enumType0.isOrdinaryFunction());
      assertEquals(false, enumType0.isFunctionType());
      assertEquals(false, enumType0.isNullType());
      assertEquals(false, enumType0.isFunctionPrototypeType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(true, unknownType0.hasDisplayName());
      assertEquals("Unknown", unknownType0.getDisplayName());
      assertEquals(false, unknownType0.isTemplateType());
      assertEquals(false, unknownType0.isNullType());
      assertEquals(false, unknownType0.isConstructor());
      assertEquals(false, unknownType0.isResolved());
      assertEquals(false, unknownType0.isNativeObjectType());
      assertEquals(false, unknownType0.isInterface());
      assertEquals(BooleanLiteralSet.BOTH, unknownType0.getPossibleToBooleanOutcomes());
      assertEquals(false, unknownType0.isOrdinaryFunction());
      assertEquals(false, unknownType0.isNominalType());
      assertEquals(false, unknownType0.isAllType());
      assertEquals(false, unknownType0.isNoType());
      assertEquals(false, unknownType0.isFunctionType());
      assertEquals(true, unknownType0.isNullable());
      assertEquals("?", unknownType0.getReferenceName());
      assertEquals(false, unknownType0.isStringValueType());
      assertEquals(false, unknownType0.isEnumType());
      assertEquals(true, unknownType0.matchesNumberContext());
      assertEquals(2147483647, unknownType0.getPropertiesCount());
      assertEquals(true, unknownType0.isUnknownType());
      assertEquals(false, unknownType0.isUnionType());
      assertEquals(false, unknownType0.isCheckedUnknownType());
      assertEquals(false, unknownType0.isVoidType());
      assertEquals(false, unknownType0.isParameterizedType());
      assertEquals(false, unknownType0.isNoObjectType());
      assertEquals(false, unknownType0.isEnumElementType());
      assertEquals(false, unknownType0.isNumberValueType());
      assertEquals(false, unknownType0.hasReferenceName());
      assertEquals(false, unknownType0.isFunctionPrototypeType());
      assertEquals(true, unknownType0.matchesStringContext());
      assertEquals(true, unknownType0.matchesObjectContext());
      assertEquals(false, unknownType0.isNoResolvedType());
      assertEquals(false, unknownType0.isRecordType());
      assertEquals(false, unknownType0.isNominalConstructor());
      assertEquals(true, unknownType0.canBeCalled());
      assertEquals(false, unknownType0.hasCachedValues());
      assertEquals(false, unknownType0.isBooleanValueType());
      
      FunctionType functionType0 = JSType.toMaybeFunctionType((JSType) enumType0);
      assertNull(functionType0);
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isScript());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isRegExp());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(false, node0.isStringKey());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isDelProp());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isBreak());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isObjectLit());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isString());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isHook());
      assertEquals(-1825, node0.getType());
      assertEquals(false, node0.isTrue());
      assertEquals(-1, node0.getLineno());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, enumType0.isRecordType());
      assertEquals(false, enumType0.isNoObjectType());
      assertEquals(false, enumType0.isVoidType());
      assertEquals(false, enumType0.isNominalConstructor());
      assertEquals(false, enumType0.isNoResolvedType());
      assertEquals(false, enumType0.isAllType());
      assertEquals(false, enumType0.matchesNumberContext());
      assertEquals(false, enumType0.isStringValueType());
      assertEquals(false, enumType0.isNominalType());
      assertEquals(false, enumType0.isTemplateType());
      assertEquals(false, enumType0.isUnionType());
      assertEquals(true, enumType0.matchesStringContext());
      assertEquals(false, enumType0.isCheckedUnknownType());
      assertEquals(BooleanLiteralSet.TRUE, enumType0.getPossibleToBooleanOutcomes());
      assertEquals(false, enumType0.isNumberValueType());
      assertEquals(false, enumType0.isResolved());
      assertEquals(false, enumType0.isNoType());
      assertEquals(false, enumType0.isParameterizedType());
      assertEquals(true, enumType0.matchesObjectContext());
      assertEquals(false, enumType0.isConstructor());
      assertEquals(false, enumType0.isEnumElementType());
      assertEquals(false, enumType0.isBooleanValueType());
      assertEquals(true, enumType0.isEnumType());
      assertEquals(false, enumType0.isInterface());
      assertEquals(false, enumType0.isOrdinaryFunction());
      assertEquals(false, enumType0.isFunctionType());
      assertEquals(false, enumType0.isNullType());
      assertEquals(false, enumType0.isFunctionPrototypeType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(true, unknownType0.hasDisplayName());
      assertEquals("Unknown", unknownType0.getDisplayName());
      assertEquals(false, unknownType0.isTemplateType());
      assertEquals(false, unknownType0.isNullType());
      assertEquals(false, unknownType0.isConstructor());
      assertEquals(false, unknownType0.isResolved());
      assertEquals(false, unknownType0.isNativeObjectType());
      assertEquals(false, unknownType0.isInterface());
      assertEquals(BooleanLiteralSet.BOTH, unknownType0.getPossibleToBooleanOutcomes());
      assertEquals(false, unknownType0.isOrdinaryFunction());
      assertEquals(false, unknownType0.isNominalType());
      assertEquals(false, unknownType0.isAllType());
      assertEquals(false, unknownType0.isNoType());
      assertEquals(false, unknownType0.isFunctionType());
      assertEquals(true, unknownType0.isNullable());
      assertEquals("?", unknownType0.getReferenceName());
      assertEquals(false, unknownType0.isStringValueType());
      assertEquals(false, unknownType0.isEnumType());
      assertEquals(true, unknownType0.matchesNumberContext());
      assertEquals(2147483647, unknownType0.getPropertiesCount());
      assertEquals(true, unknownType0.isUnknownType());
      assertEquals(false, unknownType0.isUnionType());
      assertEquals(false, unknownType0.isCheckedUnknownType());
      assertEquals(false, unknownType0.isVoidType());
      assertEquals(false, unknownType0.isParameterizedType());
      assertEquals(false, unknownType0.isNoObjectType());
      assertEquals(false, unknownType0.isEnumElementType());
      assertEquals(false, unknownType0.isNumberValueType());
      assertEquals(false, unknownType0.hasReferenceName());
      assertEquals(false, unknownType0.isFunctionPrototypeType());
      assertEquals(true, unknownType0.matchesStringContext());
      assertEquals(true, unknownType0.matchesObjectContext());
      assertEquals(false, unknownType0.isNoResolvedType());
      assertEquals(false, unknownType0.isRecordType());
      assertEquals(false, unknownType0.isNominalConstructor());
      assertEquals(true, unknownType0.canBeCalled());
      assertEquals(false, unknownType0.hasCachedValues());
      assertEquals(false, unknownType0.isBooleanValueType());
      
      JSType[] jSTypeArray0 = new JSType[7];
      FunctionType functionType1 = jSTypeRegistry0.createFunctionType((JSType) functionType0, boolean0, jSTypeArray0);
      assertNotNull(functionType1);
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isScript());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isRegExp());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(false, node0.isStringKey());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isDelProp());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isBreak());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isObjectLit());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isString());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isHook());
      assertEquals(-1825, node0.getType());
      assertEquals(false, node0.isTrue());
      assertEquals(-1, node0.getLineno());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, enumType0.isRecordType());
      assertEquals(false, enumType0.isNoObjectType());
      assertEquals(false, enumType0.isVoidType());
      assertEquals(false, enumType0.isNominalConstructor());
      assertEquals(false, enumType0.isNoResolvedType());
      assertEquals(false, enumType0.isAllType());
      assertEquals(false, enumType0.matchesNumberContext());
      assertEquals(false, enumType0.isStringValueType());
      assertEquals(false, enumType0.isNominalType());
      assertEquals(false, enumType0.isTemplateType());
      assertEquals(false, enumType0.isUnionType());
      assertEquals(true, enumType0.matchesStringContext());
      assertEquals(false, enumType0.isCheckedUnknownType());
      assertEquals(BooleanLiteralSet.TRUE, enumType0.getPossibleToBooleanOutcomes());
      assertEquals(false, enumType0.isNumberValueType());
      assertEquals(false, enumType0.isResolved());
      assertEquals(false, enumType0.isNoType());
      assertEquals(false, enumType0.isParameterizedType());
      assertEquals(true, enumType0.matchesObjectContext());
      assertEquals(false, enumType0.isConstructor());
      assertEquals(false, enumType0.isEnumElementType());
      assertEquals(false, enumType0.isBooleanValueType());
      assertEquals(true, enumType0.isEnumType());
      assertEquals(false, enumType0.isInterface());
      assertEquals(false, enumType0.isOrdinaryFunction());
      assertEquals(false, enumType0.isFunctionType());
      assertEquals(false, enumType0.isNullType());
      assertEquals(false, enumType0.isFunctionPrototypeType());
      assertEquals(false, functionType1.isTemplateType());
      assertEquals(true, functionType1.isFunctionType());
      assertEquals(false, functionType1.isNominalType());
      assertEquals(false, functionType1.isUnionType());
      assertEquals(false, functionType1.isParameterizedType());
      assertEquals(false, functionType1.isConstructor());
      assertEquals(false, functionType1.isNominalConstructor());
      assertEquals(false, functionType1.isVoidType());
      assertEquals(false, functionType1.hasCachedValues());
      assertEquals(false, functionType1.isBooleanValueType());
      assertEquals(false, functionType1.isNumberValueType());
      assertEquals(BooleanLiteralSet.TRUE, functionType1.getPossibleToBooleanOutcomes());
      assertEquals(false, functionType1.isStringValueType());
      assertEquals(false, functionType1.isNoType());
      assertEquals(false, functionType1.isNullType());
      assertEquals(false, functionType1.isNoResolvedType());
      assertEquals(false, functionType1.isNoObjectType());
      assertEquals(false, functionType1.isInterface());
      assertEquals(false, functionType1.isResolved());
      assertEquals(false, functionType1.isReturnTypeInferred());
      assertEquals(0, functionType1.getExtendedInterfacesCount());
      assertEquals(false, functionType1.isRecordType());
      assertEquals(false, functionType1.hasInstanceType());
      assertEquals(true, functionType1.isOrdinaryFunction());
      assertEquals(true, functionType1.canBeCalled());
      assertEquals(false, functionType1.isAllType());
      assertEquals(false, functionType1.isEnumType());
      assertEquals(false, functionType1.isFunctionPrototypeType());
      assertEquals(false, functionType1.isEnumElementType());
      assertEquals(false, functionType1.isCheckedUnknownType());
      assertEquals(7, functionType1.getMaxArguments());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(true, unknownType0.hasDisplayName());
      assertEquals("Unknown", unknownType0.getDisplayName());
      assertEquals(false, unknownType0.isTemplateType());
      assertEquals(false, unknownType0.isNullType());
      assertEquals(false, unknownType0.isConstructor());
      assertEquals(false, unknownType0.isResolved());
      assertEquals(false, unknownType0.isNativeObjectType());
      assertEquals(false, unknownType0.isInterface());
      assertEquals(BooleanLiteralSet.BOTH, unknownType0.getPossibleToBooleanOutcomes());
      assertEquals(false, unknownType0.isOrdinaryFunction());
      assertEquals(false, unknownType0.isNominalType());
      assertEquals(false, unknownType0.isAllType());
      assertEquals(false, unknownType0.isNoType());
      assertEquals(false, unknownType0.isFunctionType());
      assertEquals(true, unknownType0.isNullable());
      assertEquals("?", unknownType0.getReferenceName());
      assertEquals(false, unknownType0.isStringValueType());
      assertEquals(false, unknownType0.isEnumType());
      assertEquals(true, unknownType0.matchesNumberContext());
      assertEquals(2147483647, unknownType0.getPropertiesCount());
      assertEquals(true, unknownType0.isUnknownType());
      assertEquals(false, unknownType0.isUnionType());
      assertEquals(false, unknownType0.isCheckedUnknownType());
      assertEquals(false, unknownType0.isVoidType());
      assertEquals(false, unknownType0.isParameterizedType());
      assertEquals(false, unknownType0.isNoObjectType());
      assertEquals(false, unknownType0.isEnumElementType());
      assertEquals(false, unknownType0.isNumberValueType());
      assertEquals(false, unknownType0.hasReferenceName());
      assertEquals(false, unknownType0.isFunctionPrototypeType());
      assertEquals(true, unknownType0.matchesStringContext());
      assertEquals(true, unknownType0.matchesObjectContext());
      assertEquals(false, unknownType0.isNoResolvedType());
      assertEquals(false, unknownType0.isRecordType());
      assertEquals(false, unknownType0.isNominalConstructor());
      assertEquals(true, unknownType0.canBeCalled());
      assertEquals(false, unknownType0.hasCachedValues());
      assertEquals(false, unknownType0.isBooleanValueType());
      
      UnknownType unknownType1 = (UnknownType)functionType1.getPrototype();
      assertSame(unknownType1, unknownType0);
      assertSame(unknownType0, unknownType1);
      assertNotNull(unknownType1);
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isScript());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isRegExp());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(false, node0.isStringKey());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isDelProp());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isBreak());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isObjectLit());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isString());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isHook());
      assertEquals(-1825, node0.getType());
      assertEquals(false, node0.isTrue());
      assertEquals(-1, node0.getLineno());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, enumType0.isRecordType());
      assertEquals(false, enumType0.isNoObjectType());
      assertEquals(false, enumType0.isVoidType());
      assertEquals(false, enumType0.isNominalConstructor());
      assertEquals(false, enumType0.isNoResolvedType());
      assertEquals(false, enumType0.isAllType());
      assertEquals(false, enumType0.matchesNumberContext());
      assertEquals(false, enumType0.isStringValueType());
      assertEquals(false, enumType0.isNominalType());
      assertEquals(false, enumType0.isTemplateType());
      assertEquals(false, enumType0.isUnionType());
      assertEquals(true, enumType0.matchesStringContext());
      assertEquals(false, enumType0.isCheckedUnknownType());
      assertEquals(BooleanLiteralSet.TRUE, enumType0.getPossibleToBooleanOutcomes());
      assertEquals(false, enumType0.isNumberValueType());
      assertEquals(false, enumType0.isResolved());
      assertEquals(false, enumType0.isNoType());
      assertEquals(false, enumType0.isParameterizedType());
      assertEquals(true, enumType0.matchesObjectContext());
      assertEquals(false, enumType0.isConstructor());
      assertEquals(false, enumType0.isEnumElementType());
      assertEquals(false, enumType0.isBooleanValueType());
      assertEquals(true, enumType0.isEnumType());
      assertEquals(false, enumType0.isInterface());
      assertEquals(false, enumType0.isOrdinaryFunction());
      assertEquals(false, enumType0.isFunctionType());
      assertEquals(false, enumType0.isNullType());
      assertEquals(false, enumType0.isFunctionPrototypeType());
      assertEquals(false, unknownType1.hasReferenceName());
      assertEquals(false, unknownType1.isNoObjectType());
      assertEquals(true, unknownType1.matchesNumberContext());
      assertEquals(false, unknownType1.isUnionType());
      assertEquals(BooleanLiteralSet.BOTH, unknownType1.getPossibleToBooleanOutcomes());
      assertEquals(false, unknownType1.isEnumType());
      assertEquals(false, unknownType1.isNullType());
      assertEquals(true, unknownType1.matchesObjectContext());
      assertEquals(false, unknownType1.isBooleanValueType());
      assertEquals(false, unknownType1.isEnumElementType());
      assertEquals(false, unknownType1.isNominalType());
      assertEquals(true, unknownType1.canBeCalled());
      assertEquals(false, unknownType1.isResolved());
      assertEquals(false, unknownType1.hasCachedValues());
      assertEquals(false, unknownType1.isCheckedUnknownType());
      assertEquals(false, unknownType1.isStringValueType());
      assertEquals(false, unknownType1.isRecordType());
      assertEquals("?", unknownType1.getReferenceName());
      assertEquals(false, unknownType1.isNativeObjectType());
      assertEquals(false, unknownType1.isAllType());
      assertEquals(true, unknownType1.isUnknownType());
      assertEquals(false, unknownType1.isInterface());
      assertEquals(false, unknownType1.isNoType());
      assertEquals(true, unknownType1.matchesStringContext());
      assertEquals(false, unknownType1.isOrdinaryFunction());
      assertEquals(false, unknownType1.isNoResolvedType());
      assertEquals(true, unknownType1.hasDisplayName());
      assertEquals(false, unknownType1.isTemplateType());
      assertEquals(false, unknownType1.isFunctionPrototypeType());
      assertEquals(false, unknownType1.isVoidType());
      assertEquals(true, unknownType1.isNullable());
      assertEquals(false, unknownType1.isFunctionType());
      assertEquals(2147483647, unknownType1.getPropertiesCount());
      assertEquals("Unknown", unknownType1.getDisplayName());
      assertEquals(false, unknownType1.isParameterizedType());
      assertEquals(false, unknownType1.isConstructor());
      assertEquals(false, unknownType1.isNumberValueType());
      assertEquals(false, unknownType1.isNominalConstructor());
      assertEquals(false, functionType1.isTemplateType());
      assertEquals(true, functionType1.isFunctionType());
      assertEquals(false, functionType1.isNominalType());
      assertEquals(false, functionType1.isUnionType());
      assertEquals(false, functionType1.isParameterizedType());
      assertEquals(false, functionType1.isConstructor());
      assertEquals(false, functionType1.isNominalConstructor());
      assertEquals(false, functionType1.isVoidType());
      assertEquals(false, functionType1.isBooleanValueType());
      assertEquals(true, functionType1.hasCachedValues());
      assertEquals(false, functionType1.isNumberValueType());
      assertEquals(BooleanLiteralSet.TRUE, functionType1.getPossibleToBooleanOutcomes());
      assertEquals(false, functionType1.isStringValueType());
      assertEquals(false, functionType1.isNoType());
      assertEquals(false, functionType1.isNullType());
      assertEquals(false, functionType1.isNoResolvedType());
      assertEquals(false, functionType1.isNoObjectType());
      assertEquals(false, functionType1.isInterface());
      assertEquals(false, functionType1.isResolved());
      assertEquals(false, functionType1.isReturnTypeInferred());
      assertEquals(0, functionType1.getExtendedInterfacesCount());
      assertEquals(false, functionType1.isRecordType());
      assertEquals(false, functionType1.hasInstanceType());
      assertEquals(true, functionType1.isOrdinaryFunction());
      assertEquals(true, functionType1.canBeCalled());
      assertEquals(false, functionType1.isAllType());
      assertEquals(false, functionType1.isEnumType());
      assertEquals(false, functionType1.isFunctionPrototypeType());
      assertEquals(false, functionType1.isEnumElementType());
      assertEquals(false, functionType1.isCheckedUnknownType());
      assertEquals(7, functionType1.getMaxArguments());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(true, unknownType0.hasDisplayName());
      assertEquals("Unknown", unknownType0.getDisplayName());
      assertEquals(false, unknownType0.isTemplateType());
      assertEquals(false, unknownType0.isNullType());
      assertEquals(false, unknownType0.isConstructor());
      assertEquals(false, unknownType0.isResolved());
      assertEquals(false, unknownType0.isNativeObjectType());
      assertEquals(false, unknownType0.isInterface());
      assertEquals(BooleanLiteralSet.BOTH, unknownType0.getPossibleToBooleanOutcomes());
      assertEquals(false, unknownType0.isOrdinaryFunction());
      assertEquals(false, unknownType0.isNominalType());
      assertEquals(false, unknownType0.isAllType());
      assertEquals(false, unknownType0.isNoType());
      assertEquals(false, unknownType0.isFunctionType());
      assertEquals(true, unknownType0.isNullable());
      assertEquals("?", unknownType0.getReferenceName());
      assertEquals(false, unknownType0.isStringValueType());
      assertEquals(false, unknownType0.isEnumType());
      assertEquals(true, unknownType0.matchesNumberContext());
      assertEquals(2147483647, unknownType0.getPropertiesCount());
      assertEquals(true, unknownType0.isUnknownType());
      assertEquals(false, unknownType0.isUnionType());
      assertEquals(false, unknownType0.isCheckedUnknownType());
      assertEquals(false, unknownType0.isVoidType());
      assertEquals(false, unknownType0.isParameterizedType());
      assertEquals(false, unknownType0.isNoObjectType());
      assertEquals(false, unknownType0.isEnumElementType());
      assertEquals(false, unknownType0.isNumberValueType());
      assertEquals(false, unknownType0.hasReferenceName());
      assertEquals(false, unknownType0.isFunctionPrototypeType());
      assertEquals(true, unknownType0.matchesStringContext());
      assertEquals(true, unknownType0.matchesObjectContext());
      assertEquals(false, unknownType0.isNoResolvedType());
      assertEquals(false, unknownType0.isRecordType());
      assertEquals(false, unknownType0.isNominalConstructor());
      assertEquals(true, unknownType0.canBeCalled());
      assertEquals(false, unknownType0.hasCachedValues());
      assertEquals(false, unknownType0.isBooleanValueType());
      
      UnknownType unknownType2 = (UnknownType)closureReverseAbstractInterpreter0.getRestrictedWithoutNull(unknownType1);
      assertSame(unknownType1, unknownType2);
      assertSame(unknownType1, unknownType0);
      assertSame(unknownType2, unknownType0);
      assertSame(unknownType2, unknownType1);
      assertSame(unknownType0, unknownType2);
      assertSame(unknownType0, unknownType1);
      assertNotNull(unknownType2);
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isScript());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isRegExp());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(false, node0.isStringKey());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isDelProp());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isBreak());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isObjectLit());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isString());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isHook());
      assertEquals(-1825, node0.getType());
      assertEquals(false, node0.isTrue());
      assertEquals(-1, node0.getLineno());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, enumType0.isRecordType());
      assertEquals(false, enumType0.isNoObjectType());
      assertEquals(false, enumType0.isVoidType());
      assertEquals(false, enumType0.isNominalConstructor());
      assertEquals(false, enumType0.isNoResolvedType());
      assertEquals(false, enumType0.isAllType());
      assertEquals(false, enumType0.matchesNumberContext());
      assertEquals(false, enumType0.isStringValueType());
      assertEquals(false, enumType0.isNominalType());
      assertEquals(false, enumType0.isTemplateType());
      assertEquals(false, enumType0.isUnionType());
      assertEquals(true, enumType0.matchesStringContext());
      assertEquals(false, enumType0.isCheckedUnknownType());
      assertEquals(BooleanLiteralSet.TRUE, enumType0.getPossibleToBooleanOutcomes());
      assertEquals(false, enumType0.isNumberValueType());
      assertEquals(false, enumType0.isResolved());
      assertEquals(false, enumType0.isNoType());
      assertEquals(false, enumType0.isParameterizedType());
      assertEquals(true, enumType0.matchesObjectContext());
      assertEquals(false, enumType0.isConstructor());
      assertEquals(false, enumType0.isEnumElementType());
      assertEquals(false, enumType0.isBooleanValueType());
      assertEquals(true, enumType0.isEnumType());
      assertEquals(false, enumType0.isInterface());
      assertEquals(false, enumType0.isOrdinaryFunction());
      assertEquals(false, enumType0.isFunctionType());
      assertEquals(false, enumType0.isNullType());
      assertEquals(false, enumType0.isFunctionPrototypeType());
      assertEquals(false, unknownType1.hasReferenceName());
      assertEquals(false, unknownType1.isNoObjectType());
      assertEquals(true, unknownType1.matchesNumberContext());
      assertEquals(false, unknownType1.isUnionType());
      assertEquals(BooleanLiteralSet.BOTH, unknownType1.getPossibleToBooleanOutcomes());
      assertEquals(false, unknownType1.isEnumType());
      assertEquals(false, unknownType1.isNullType());
      assertEquals(true, unknownType1.matchesObjectContext());
      assertEquals(false, unknownType1.isBooleanValueType());
      assertEquals(false, unknownType1.isEnumElementType());
      assertEquals(false, unknownType1.isNominalType());
      assertEquals(true, unknownType1.canBeCalled());
      assertEquals(false, unknownType1.isResolved());
      assertEquals(false, unknownType1.hasCachedValues());
      assertEquals(false, unknownType1.isCheckedUnknownType());
      assertEquals(false, unknownType1.isStringValueType());
      assertEquals(false, unknownType1.isRecordType());
      assertEquals("?", unknownType1.getReferenceName());
      assertEquals(false, unknownType1.isNativeObjectType());
      assertEquals(false, unknownType1.isAllType());
      assertEquals(true, unknownType1.isUnknownType());
      assertEquals(false, unknownType1.isInterface());
      assertEquals(false, unknownType1.isNoType());
      assertEquals(true, unknownType1.matchesStringContext());
      assertEquals(false, unknownType1.isOrdinaryFunction());
      assertEquals(false, unknownType1.isNoResolvedType());
      assertEquals(true, unknownType1.hasDisplayName());
      assertEquals(false, unknownType1.isTemplateType());
      assertEquals(false, unknownType1.isFunctionPrototypeType());
      assertEquals(false, unknownType1.isVoidType());
      assertEquals(true, unknownType1.isNullable());
      assertEquals(false, unknownType1.isFunctionType());
      assertEquals(2147483647, unknownType1.getPropertiesCount());
      assertEquals("Unknown", unknownType1.getDisplayName());
      assertEquals(false, unknownType1.isParameterizedType());
      assertEquals(false, unknownType1.isConstructor());
      assertEquals(false, unknownType1.isNumberValueType());
      assertEquals(false, unknownType1.isNominalConstructor());
      assertEquals(false, functionType1.isTemplateType());
      assertEquals(true, functionType1.isFunctionType());
      assertEquals(false, functionType1.isNominalType());
      assertEquals(false, functionType1.isUnionType());
      assertEquals(false, functionType1.isParameterizedType());
      assertEquals(false, functionType1.isConstructor());
      assertEquals(false, functionType1.isNominalConstructor());
      assertEquals(false, functionType1.isVoidType());
      assertEquals(false, functionType1.isBooleanValueType());
      assertEquals(true, functionType1.hasCachedValues());
      assertEquals(false, functionType1.isNumberValueType());
      assertEquals(BooleanLiteralSet.TRUE, functionType1.getPossibleToBooleanOutcomes());
      assertEquals(false, functionType1.isStringValueType());
      assertEquals(false, functionType1.isNoType());
      assertEquals(false, functionType1.isNullType());
      assertEquals(false, functionType1.isNoResolvedType());
      assertEquals(false, functionType1.isNoObjectType());
      assertEquals(false, functionType1.isInterface());
      assertEquals(false, functionType1.isResolved());
      assertEquals(false, functionType1.isReturnTypeInferred());
      assertEquals(0, functionType1.getExtendedInterfacesCount());
      assertEquals(false, functionType1.isRecordType());
      assertEquals(false, functionType1.hasInstanceType());
      assertEquals(true, functionType1.isOrdinaryFunction());
      assertEquals(true, functionType1.canBeCalled());
      assertEquals(false, functionType1.isAllType());
      assertEquals(false, functionType1.isEnumType());
      assertEquals(false, functionType1.isFunctionPrototypeType());
      assertEquals(false, functionType1.isEnumElementType());
      assertEquals(false, functionType1.isCheckedUnknownType());
      assertEquals(7, functionType1.getMaxArguments());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, unknownType2.isOrdinaryFunction());
      assertEquals(false, unknownType2.isVoidType());
      assertEquals(false, unknownType2.isNominalConstructor());
      assertEquals(false, unknownType2.hasCachedValues());
      assertEquals(false, unknownType2.isAllType());
      assertEquals("?", unknownType2.getReferenceName());
      assertEquals(false, unknownType2.isEnumType());
      assertEquals(false, unknownType2.isParameterizedType());
      assertEquals(true, unknownType2.canBeCalled());
      assertEquals(false, unknownType2.isInterface());
      assertEquals(false, unknownType2.isFunctionPrototypeType());
      assertEquals(false, unknownType2.isNominalType());
      assertEquals(false, unknownType2.isNativeObjectType());
      assertEquals(false, unknownType2.isTemplateType());
      assertEquals(2147483647, unknownType2.getPropertiesCount());
      assertEquals(false, unknownType2.isBooleanValueType());
      assertEquals(true, unknownType2.matchesStringContext());
      assertEquals(false, unknownType2.hasReferenceName());
      assertEquals(false, unknownType2.isRecordType());
      assertEquals(false, unknownType2.isFunctionType());
      assertEquals(false, unknownType2.isNoResolvedType());
      assertEquals(false, unknownType2.isNoObjectType());
      assertEquals(false, unknownType2.isNoType());
      assertEquals(false, unknownType2.isNullType());
      assertEquals(BooleanLiteralSet.BOTH, unknownType2.getPossibleToBooleanOutcomes());
      assertEquals(true, unknownType2.matchesObjectContext());
      assertEquals(false, unknownType2.isConstructor());
      assertEquals(false, unknownType2.isCheckedUnknownType());
      assertEquals(false, unknownType2.isResolved());
      assertEquals(false, unknownType2.isNumberValueType());
      assertEquals(true, unknownType2.isNullable());
      assertEquals(false, unknownType2.isStringValueType());
      assertEquals(true, unknownType2.isUnknownType());
      assertEquals("Unknown", unknownType2.getDisplayName());
      assertEquals(false, unknownType2.isEnumElementType());
      assertEquals(true, unknownType2.matchesNumberContext());
      assertEquals(false, unknownType2.isUnionType());
      assertEquals(true, unknownType2.hasDisplayName());
      assertEquals(true, unknownType0.hasDisplayName());
      assertEquals("Unknown", unknownType0.getDisplayName());
      assertEquals(false, unknownType0.isTemplateType());
      assertEquals(false, unknownType0.isNullType());
      assertEquals(false, unknownType0.isConstructor());
      assertEquals(false, unknownType0.isResolved());
      assertEquals(false, unknownType0.isNativeObjectType());
      assertEquals(false, unknownType0.isInterface());
      assertEquals(BooleanLiteralSet.BOTH, unknownType0.getPossibleToBooleanOutcomes());
      assertEquals(false, unknownType0.isOrdinaryFunction());
      assertEquals(false, unknownType0.isNominalType());
      assertEquals(false, unknownType0.isAllType());
      assertEquals(false, unknownType0.isNoType());
      assertEquals(false, unknownType0.isFunctionType());
      assertEquals(true, unknownType0.isNullable());
      assertEquals("?", unknownType0.getReferenceName());
      assertEquals(false, unknownType0.isStringValueType());
      assertEquals(false, unknownType0.isEnumType());
      assertEquals(true, unknownType0.matchesNumberContext());
      assertEquals(2147483647, unknownType0.getPropertiesCount());
      assertEquals(true, unknownType0.isUnknownType());
      assertEquals(false, unknownType0.isUnionType());
      assertEquals(false, unknownType0.isCheckedUnknownType());
      assertEquals(false, unknownType0.isVoidType());
      assertEquals(false, unknownType0.isParameterizedType());
      assertEquals(false, unknownType0.isNoObjectType());
      assertEquals(false, unknownType0.isEnumElementType());
      assertEquals(false, unknownType0.isNumberValueType());
      assertEquals(false, unknownType0.hasReferenceName());
      assertEquals(false, unknownType0.isFunctionPrototypeType());
      assertEquals(true, unknownType0.matchesStringContext());
      assertEquals(true, unknownType0.matchesObjectContext());
      assertEquals(false, unknownType0.isNoResolvedType());
      assertEquals(false, unknownType0.isRecordType());
      assertEquals(false, unknownType0.isNominalConstructor());
      assertEquals(true, unknownType0.canBeCalled());
      assertEquals(false, unknownType0.hasCachedValues());
      assertEquals(false, unknownType0.isBooleanValueType());
  }

  @Test
  public void test27()  throws Throwable  {
      JqueryCodingConvention jqueryCodingConvention0 = new JqueryCodingConvention();
      assertNotNull(jqueryCodingConvention0);
      assertEquals("window", jqueryCodingConvention0.getGlobalObject());
      
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter((CodingConvention) jqueryCodingConvention0, jSTypeRegistry0);
      assertNotNull(closureReverseAbstractInterpreter0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals("window", jqueryCodingConvention0.getGlobalObject());
      
      ObjectType objectType0 = null;
      ParameterizedType parameterizedType0 = jSTypeRegistry0.createParameterizedType(objectType0, (JSType) objectType0);
      assertNotNull(parameterizedType0);
      assertEquals(false, parameterizedType0.isStringValueType());
      assertEquals(false, parameterizedType0.isResolved());
      assertEquals(false, parameterizedType0.isNullType());
      assertEquals(false, parameterizedType0.hasCachedValues());
      assertEquals(false, parameterizedType0.isFunctionPrototypeType());
      assertEquals(false, parameterizedType0.isBooleanValueType());
      assertEquals(false, parameterizedType0.isVoidType());
      assertEquals(false, parameterizedType0.isNumberValueType());
      assertEquals(true, parameterizedType0.isParameterizedType());
      assertEquals(BooleanLiteralSet.TRUE, parameterizedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      ParameterizedType parameterizedType1 = (ParameterizedType)closureReverseAbstractInterpreter0.getRestrictedWithoutNull(parameterizedType0);
      assertSame(parameterizedType0, parameterizedType1);
      assertSame(parameterizedType1, parameterizedType0);
      assertNotNull(parameterizedType1);
      assertEquals(false, parameterizedType0.isStringValueType());
      assertEquals(false, parameterizedType0.isResolved());
      assertEquals(false, parameterizedType0.isNullType());
      assertEquals(false, parameterizedType0.hasCachedValues());
      assertEquals(false, parameterizedType0.isFunctionPrototypeType());
      assertEquals(false, parameterizedType0.isBooleanValueType());
      assertEquals(false, parameterizedType0.isVoidType());
      assertEquals(false, parameterizedType0.isNumberValueType());
      assertEquals(true, parameterizedType0.isParameterizedType());
      assertEquals(BooleanLiteralSet.TRUE, parameterizedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals("window", jqueryCodingConvention0.getGlobalObject());
      assertEquals(false, parameterizedType1.isStringValueType());
      assertEquals(false, parameterizedType1.isFunctionPrototypeType());
      assertEquals(false, parameterizedType1.hasCachedValues());
      assertEquals(false, parameterizedType1.isResolved());
      assertEquals(false, parameterizedType1.isNullType());
      assertEquals(true, parameterizedType1.isParameterizedType());
      assertEquals(false, parameterizedType1.isNumberValueType());
      assertEquals(false, parameterizedType1.isVoidType());
      assertEquals(false, parameterizedType1.isBooleanValueType());
      assertEquals(BooleanLiteralSet.TRUE, parameterizedType1.getPossibleToBooleanOutcomes());
  }

  @Test
  public void test28()  throws Throwable  {
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      assertNotNull(closureCodingConvention0);
      assertEquals("goog.global", closureCodingConvention0.getGlobalObject());
      assertEquals("goog.exportProperty", closureCodingConvention0.getExportPropertyFunction());
      assertEquals("goog.exportSymbol", closureCodingConvention0.getExportSymbolFunction());
      assertEquals("goog.abstractMethod", closureCodingConvention0.getAbstractMethodName());
      
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      boolean boolean0 = false;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0, boolean0);
      assertNotNull(jSTypeRegistry0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter((CodingConvention) closureCodingConvention0, jSTypeRegistry0);
      assertNotNull(closureReverseAbstractInterpreter0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals("goog.global", closureCodingConvention0.getGlobalObject());
      assertEquals("goog.exportProperty", closureCodingConvention0.getExportPropertyFunction());
      assertEquals("goog.exportSymbol", closureCodingConvention0.getExportSymbolFunction());
      assertEquals("goog.abstractMethod", closureCodingConvention0.getAbstractMethodName());
      
      JSTypeNative jSTypeNative0 = JSTypeNative.NULL_TYPE;
      NullType nullType0 = (NullType)closureReverseAbstractInterpreter0.getNativeType(jSTypeNative0);
      assertNotNull(nullType0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals("goog.global", closureCodingConvention0.getGlobalObject());
      assertEquals("goog.exportProperty", closureCodingConvention0.getExportPropertyFunction());
      assertEquals("goog.exportSymbol", closureCodingConvention0.getExportSymbolFunction());
      assertEquals("goog.abstractMethod", closureCodingConvention0.getAbstractMethodName());
      assertEquals(false, nullType0.isNoResolvedType());
      assertEquals(false, nullType0.matchesObjectContext());
      assertEquals("null", nullType0.getDisplayName());
      assertEquals(true, nullType0.matchesNumberContext());
      assertEquals(false, nullType0.isNominalType());
      assertEquals(false, nullType0.isFunctionPrototypeType());
      assertEquals(false, nullType0.isNominalConstructor());
      assertEquals(false, nullType0.isCheckedUnknownType());
      assertEquals(false, nullType0.isFunctionType());
      assertEquals(false, nullType0.isVoidType());
      assertEquals(false, nullType0.isStringValueType());
      assertEquals(true, nullType0.isNullType());
      assertEquals(false, nullType0.isUnionType());
      assertEquals(false, nullType0.isParameterizedType());
      assertEquals(true, nullType0.matchesStringContext());
      assertEquals(false, nullType0.isEnumElementType());
      assertEquals(false, nullType0.isEnumType());
      assertEquals(false, nullType0.isRecordType());
      assertEquals(false, nullType0.isNoObjectType());
      assertEquals(false, nullType0.isNoType());
      assertEquals(BooleanLiteralSet.FALSE, nullType0.getPossibleToBooleanOutcomes());
      assertEquals(false, nullType0.isConstructor());
      assertEquals(false, nullType0.isInterface());
      assertEquals(false, nullType0.isResolved());
      assertEquals(false, nullType0.isNumberValueType());
      assertEquals(false, nullType0.isOrdinaryFunction());
      assertEquals(false, nullType0.isAllType());
      assertEquals(false, nullType0.isBooleanValueType());
      assertEquals(true, nullType0.isNullable());
      assertEquals(false, nullType0.isTemplateType());
      
      JSType jSType0 = closureReverseAbstractInterpreter0.getRestrictedWithoutNull(nullType0);
      assertNull(jSType0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals("goog.global", closureCodingConvention0.getGlobalObject());
      assertEquals("goog.exportProperty", closureCodingConvention0.getExportPropertyFunction());
      assertEquals("goog.exportSymbol", closureCodingConvention0.getExportSymbolFunction());
      assertEquals("goog.abstractMethod", closureCodingConvention0.getAbstractMethodName());
      assertEquals(false, nullType0.isNoResolvedType());
      assertEquals(false, nullType0.matchesObjectContext());
      assertEquals("null", nullType0.getDisplayName());
      assertEquals(true, nullType0.matchesNumberContext());
      assertEquals(false, nullType0.isNominalType());
      assertEquals(false, nullType0.isFunctionPrototypeType());
      assertEquals(false, nullType0.isNominalConstructor());
      assertEquals(false, nullType0.isCheckedUnknownType());
      assertEquals(false, nullType0.isFunctionType());
      assertEquals(false, nullType0.isVoidType());
      assertEquals(false, nullType0.isStringValueType());
      assertEquals(true, nullType0.isNullType());
      assertEquals(false, nullType0.isUnionType());
      assertEquals(false, nullType0.isParameterizedType());
      assertEquals(true, nullType0.matchesStringContext());
      assertEquals(false, nullType0.isEnumElementType());
      assertEquals(false, nullType0.isEnumType());
      assertEquals(false, nullType0.isRecordType());
      assertEquals(false, nullType0.isNoObjectType());
      assertEquals(false, nullType0.isNoType());
      assertEquals(BooleanLiteralSet.FALSE, nullType0.getPossibleToBooleanOutcomes());
      assertEquals(false, nullType0.isConstructor());
      assertEquals(false, nullType0.isInterface());
      assertEquals(false, nullType0.isResolved());
      assertEquals(false, nullType0.isNumberValueType());
      assertEquals(false, nullType0.isOrdinaryFunction());
      assertEquals(false, nullType0.isAllType());
      assertEquals(false, nullType0.isBooleanValueType());
      assertEquals(true, nullType0.isNullable());
      assertEquals(false, nullType0.isTemplateType());
  }

  @Test
  public void test29()  throws Throwable  {
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      assertNotNull(closureCodingConvention0);
      assertEquals("goog.exportProperty", closureCodingConvention0.getExportPropertyFunction());
      assertEquals("goog.abstractMethod", closureCodingConvention0.getAbstractMethodName());
      assertEquals("goog.global", closureCodingConvention0.getGlobalObject());
      assertEquals("goog.exportSymbol", closureCodingConvention0.getExportSymbolFunction());
      
      JqueryCodingConvention jqueryCodingConvention0 = new JqueryCodingConvention((CodingConvention) closureCodingConvention0);
      assertNotNull(jqueryCodingConvention0);
      assertEquals("goog.exportProperty", closureCodingConvention0.getExportPropertyFunction());
      assertEquals("goog.abstractMethod", closureCodingConvention0.getAbstractMethodName());
      assertEquals("goog.global", closureCodingConvention0.getGlobalObject());
      assertEquals("goog.exportSymbol", closureCodingConvention0.getExportSymbolFunction());
      assertEquals("window", jqueryCodingConvention0.getGlobalObject());
      
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      boolean boolean0 = true;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0, boolean0);
      assertNotNull(jSTypeRegistry0);
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter((CodingConvention) jqueryCodingConvention0, jSTypeRegistry0);
      assertNotNull(closureReverseAbstractInterpreter0);
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals("goog.exportProperty", closureCodingConvention0.getExportPropertyFunction());
      assertEquals("goog.abstractMethod", closureCodingConvention0.getAbstractMethodName());
      assertEquals("goog.global", closureCodingConvention0.getGlobalObject());
      assertEquals("goog.exportSymbol", closureCodingConvention0.getExportSymbolFunction());
      assertEquals("window", jqueryCodingConvention0.getGlobalObject());
      
      JSType jSType0 = null;
      String string0 = "\\)fg,l9:l1Oy";
      NoType noType0 = (NoType)jSTypeRegistry0.getGreatestSubtypeWithProperty(jSType0, string0);
      assertNotNull(noType0);
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, noType0.hasCachedValues());
      assertEquals(true, noType0.isNullable());
      assertEquals(2147483647, noType0.getMaxArguments());
      assertEquals(false, noType0.isEnumElementType());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertEquals(true, noType0.hasInstanceType());
      assertEquals(false, noType0.isParameterizedType());
      assertEquals(false, noType0.isBooleanValueType());
      assertEquals(false, noType0.isRecordType());
      assertEquals(false, noType0.isNoObjectType());
      assertEquals(true, noType0.matchesNumberContext());
      assertEquals(false, noType0.isFunctionPrototypeType());
      assertEquals(false, noType0.isReturnTypeInferred());
      assertEquals(true, noType0.matchesObjectContext());
      assertEquals(true, noType0.isNoType());
      assertEquals(false, noType0.isStringValueType());
      assertEquals(false, noType0.isFunctionType());
      assertEquals(false, noType0.isResolved());
      assertEquals(false, noType0.isInterface());
      assertEquals(false, noType0.isVoidType());
      assertEquals(true, noType0.canBeCalled());
      assertEquals(false, noType0.isNominalType());
      assertEquals(false, noType0.isOrdinaryFunction());
      assertEquals(false, noType0.isAllType());
      assertNull(noType0.getReferenceName());
      assertEquals(false, noType0.isCheckedUnknownType());
      assertEquals(false, noType0.isNoResolvedType());
      assertEquals(true, noType0.matchesStringContext());
      assertEquals(0, noType0.getExtendedInterfacesCount());
      assertEquals(false, noType0.isNullType());
      assertEquals(false, noType0.isTemplateType());
      assertEquals(false, noType0.isUnionType());
      assertEquals(true, noType0.isConstructor());
      assertEquals(false, noType0.isNominalConstructor());
      assertEquals(2147483647, noType0.getPropertiesCount());
      assertEquals(false, noType0.isEnumType());
      assertEquals(false, noType0.isNumberValueType());
      
      NoType noType1 = (NoType)closureReverseAbstractInterpreter0.getRestrictedWithoutNull(noType0);
      assertSame(noType0, noType1);
      assertSame(noType1, noType0);
      assertNotNull(noType1);
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals("goog.exportProperty", closureCodingConvention0.getExportPropertyFunction());
      assertEquals("goog.abstractMethod", closureCodingConvention0.getAbstractMethodName());
      assertEquals("goog.global", closureCodingConvention0.getGlobalObject());
      assertEquals("goog.exportSymbol", closureCodingConvention0.getExportSymbolFunction());
      assertEquals(false, noType0.hasCachedValues());
      assertEquals(true, noType0.isNullable());
      assertEquals(2147483647, noType0.getMaxArguments());
      assertEquals(false, noType0.isEnumElementType());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertEquals(true, noType0.hasInstanceType());
      assertEquals(false, noType0.isParameterizedType());
      assertEquals(false, noType0.isBooleanValueType());
      assertEquals(false, noType0.isRecordType());
      assertEquals(false, noType0.isNoObjectType());
      assertEquals(true, noType0.matchesNumberContext());
      assertEquals(false, noType0.isFunctionPrototypeType());
      assertEquals(false, noType0.isReturnTypeInferred());
      assertEquals(true, noType0.matchesObjectContext());
      assertEquals(true, noType0.isNoType());
      assertEquals(false, noType0.isStringValueType());
      assertEquals(false, noType0.isFunctionType());
      assertEquals(false, noType0.isResolved());
      assertEquals(false, noType0.isInterface());
      assertEquals(false, noType0.isVoidType());
      assertEquals(true, noType0.canBeCalled());
      assertEquals(false, noType0.isNominalType());
      assertEquals(false, noType0.isOrdinaryFunction());
      assertEquals(false, noType0.isAllType());
      assertNull(noType0.getReferenceName());
      assertEquals(false, noType0.isCheckedUnknownType());
      assertEquals(false, noType0.isNoResolvedType());
      assertEquals(true, noType0.matchesStringContext());
      assertEquals(0, noType0.getExtendedInterfacesCount());
      assertEquals(false, noType0.isNullType());
      assertEquals(false, noType0.isTemplateType());
      assertEquals(false, noType0.isUnionType());
      assertEquals(true, noType0.isConstructor());
      assertEquals(false, noType0.isNominalConstructor());
      assertEquals(2147483647, noType0.getPropertiesCount());
      assertEquals(false, noType0.isEnumType());
      assertEquals(false, noType0.isNumberValueType());
      assertEquals("window", jqueryCodingConvention0.getGlobalObject());
      assertEquals(false, noType1.isNullType());
      assertEquals(false, noType1.isStringValueType());
      assertEquals(false, noType1.isNoResolvedType());
      assertEquals(true, noType1.canBeCalled());
      assertEquals(false, noType1.isUnionType());
      assertEquals(false, noType1.isVoidType());
      assertEquals(0, noType1.getExtendedInterfacesCount());
      assertEquals(false, noType1.isFunctionType());
      assertEquals(true, noType1.isNullable());
      assertEquals(false, noType1.isTemplateType());
      assertEquals(false, noType1.isFunctionPrototypeType());
      assertEquals(false, noType1.hasCachedValues());
      assertEquals(false, noType1.isInterface());
      assertEquals(false, noType1.isAllType());
      assertEquals(true, noType1.matchesObjectContext());
      assertEquals(false, noType1.isOrdinaryFunction());
      assertEquals(BooleanLiteralSet.EMPTY, noType1.getPossibleToBooleanOutcomes());
      assertEquals(false, noType1.isRecordType());
      assertEquals(true, noType1.isConstructor());
      assertEquals(false, noType1.isParameterizedType());
      assertEquals(false, noType1.isNumberValueType());
      assertEquals(false, noType1.isEnumElementType());
      assertEquals(false, noType1.isBooleanValueType());
      assertEquals(true, noType1.hasInstanceType());
      assertEquals(false, noType1.isResolved());
      assertEquals(true, noType1.matchesNumberContext());
      assertEquals(2147483647, noType1.getPropertiesCount());
      assertEquals(false, noType1.isNoObjectType());
      assertEquals(true, noType1.isNoType());
      assertEquals(2147483647, noType1.getMaxArguments());
      assertEquals(false, noType1.isEnumType());
      assertEquals(false, noType1.isReturnTypeInferred());
      assertEquals(false, noType1.isCheckedUnknownType());
      assertEquals(false, noType1.isNominalConstructor());
      assertNull(noType1.getReferenceName());
      assertEquals(true, noType1.matchesStringContext());
      assertEquals(false, noType1.isNominalType());
  }

  @Test
  public void test30()  throws Throwable  {
      GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
      assertNotNull(googleCodingConvention0);
      
      ErrorReporter errorReporter0 = null;
      boolean boolean0 = false;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(errorReporter0, boolean0);
      assertNotNull(jSTypeRegistry0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter((CodingConvention) googleCodingConvention0, jSTypeRegistry0);
      assertNotNull(closureReverseAbstractInterpreter0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      JSTypeNative jSTypeNative0 = JSTypeNative.NULL_VOID;
      UnionType unionType0 = (UnionType)closureReverseAbstractInterpreter0.getNativeType(jSTypeNative0);
      assertNotNull(unionType0);
      assertEquals(false, unionType0.isInterface());
      assertEquals(false, unionType0.isOrdinaryFunction());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isNoResolvedType());
      assertEquals(false, unionType0.isParameterizedType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isFunctionPrototypeType());
      assertEquals(false, unionType0.isNominalType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isCheckedUnknownType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isConstructor());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isNominalConstructor());
      assertEquals(false, unionType0.isEnumType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isEnumElementType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      VoidType voidType0 = (VoidType)closureReverseAbstractInterpreter0.getRestrictedWithoutNull(unionType0);
      assertNotNull(voidType0);
      assertEquals(false, unionType0.isInterface());
      assertEquals(false, unionType0.isOrdinaryFunction());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isNoResolvedType());
      assertEquals(false, unionType0.isParameterizedType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isFunctionPrototypeType());
      assertEquals(false, unionType0.isNominalType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isCheckedUnknownType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isConstructor());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isNominalConstructor());
      assertEquals(false, unionType0.isEnumType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isEnumElementType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, voidType0.isFunctionPrototypeType());
      assertEquals(true, voidType0.matchesStringContext());
      assertEquals(false, voidType0.isOrdinaryFunction());
      assertEquals(false, voidType0.isStringValueType());
      assertEquals(BooleanLiteralSet.FALSE, voidType0.getPossibleToBooleanOutcomes());
      assertEquals(false, voidType0.isNoObjectType());
      assertEquals(false, voidType0.isNullType());
      assertEquals(false, voidType0.isEnumType());
      assertEquals(false, voidType0.matchesObjectContext());
      assertEquals(false, voidType0.isNoType());
      assertEquals(false, voidType0.isNumberValueType());
      assertEquals(false, voidType0.matchesNumberContext());
      assertEquals(false, voidType0.isInterface());
      assertEquals(false, voidType0.isResolved());
      assertEquals(false, voidType0.isNominalConstructor());
      assertEquals(false, voidType0.isEnumElementType());
      assertEquals(false, voidType0.isConstructor());
      assertEquals(true, voidType0.isVoidType());
      assertEquals(false, voidType0.isCheckedUnknownType());
      assertEquals(false, voidType0.isTemplateType());
      assertEquals(false, voidType0.isAllType());
      assertEquals(false, voidType0.isParameterizedType());
      assertEquals(false, voidType0.isNoResolvedType());
      assertEquals(false, voidType0.isUnionType());
      assertEquals("undefined", voidType0.getDisplayName());
      assertEquals(false, voidType0.isRecordType());
      assertEquals(false, voidType0.isFunctionType());
      assertEquals(false, voidType0.isBooleanValueType());
      assertEquals(false, voidType0.isNominalType());
  }

  @Test
  public void test31()  throws Throwable  {
      JqueryCodingConvention jqueryCodingConvention0 = new JqueryCodingConvention();
      assertNotNull(jqueryCodingConvention0);
      assertEquals("window", jqueryCodingConvention0.getGlobalObject());
      
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      boolean boolean0 = false;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0, boolean0);
      assertNotNull(jSTypeRegistry0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter((CodingConvention) jqueryCodingConvention0, jSTypeRegistry0);
      assertNotNull(closureReverseAbstractInterpreter0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals("window", jqueryCodingConvention0.getGlobalObject());
      
      JSTypeNative jSTypeNative0 = JSTypeNative.GREATEST_FUNCTION_TYPE;
      FunctionType functionType0 = (FunctionType)closureReverseAbstractInterpreter0.getNativeType(jSTypeNative0);
      assertNotNull(functionType0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals("window", jqueryCodingConvention0.getGlobalObject());
      assertEquals(false, functionType0.isTemplateType());
      assertEquals(false, functionType0.isParameterizedType());
      assertEquals(true, functionType0.isFunctionType());
      assertEquals(false, functionType0.isNoObjectType());
      assertEquals(false, functionType0.isConstructor());
      assertEquals(false, functionType0.isUnionType());
      assertEquals(false, functionType0.isBooleanValueType());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertEquals(false, functionType0.isVoidType());
      assertEquals(true, functionType0.isOrdinaryFunction());
      assertEquals(false, functionType0.isNoType());
      assertEquals(false, functionType0.isEnumType());
      assertEquals(false, functionType0.isNoResolvedType());
      assertEquals(false, functionType0.isRecordType());
      assertEquals(false, functionType0.hasInstanceType());
      assertEquals(false, functionType0.isNominalConstructor());
      assertEquals(false, functionType0.isCheckedUnknownType());
      assertEquals(false, functionType0.isResolved());
      assertEquals(false, functionType0.isReturnTypeInferred());
      assertEquals(2147483647, functionType0.getMaxArguments());
      assertEquals(false, functionType0.isInterface());
      assertEquals(false, functionType0.hasCachedValues());
      assertEquals(false, functionType0.isNullType());
      assertEquals(false, functionType0.isEnumElementType());
      assertEquals(false, functionType0.isNumberValueType());
      assertEquals(false, functionType0.isStringValueType());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, functionType0.isNominalType());
      assertEquals(false, functionType0.isFunctionPrototypeType());
      assertEquals(true, functionType0.canBeCalled());
      assertEquals(false, functionType0.isAllType());
      
      SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter((CodingConvention) jqueryCodingConvention0, jSTypeRegistry0);
      assertNotNull(semanticReverseAbstractInterpreter0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals("window", jqueryCodingConvention0.getGlobalObject());
      
      FunctionType functionType1 = (FunctionType)semanticReverseAbstractInterpreter0.getRestrictedWithoutNull(functionType0);
      assertSame(functionType1, functionType0);
      assertSame(functionType0, functionType1);
      assertNotNull(functionType1);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, functionType1.isTemplateType());
      assertEquals(false, functionType1.hasInstanceType());
      assertEquals(false, functionType1.isParameterizedType());
      assertEquals(false, functionType1.isBooleanValueType());
      assertEquals(false, functionType1.isNominalType());
      assertEquals(false, functionType1.isVoidType());
      assertEquals(false, functionType1.hasCachedValues());
      assertEquals(false, functionType1.isEnumElementType());
      assertEquals(2147483647, functionType1.getMaxArguments());
      assertEquals(0, functionType1.getExtendedInterfacesCount());
      assertEquals(false, functionType1.isStringValueType());
      assertEquals(true, functionType1.canBeCalled());
      assertEquals(false, functionType1.isFunctionPrototypeType());
      assertEquals(false, functionType1.isUnionType());
      assertEquals(false, functionType1.isNoObjectType());
      assertEquals(false, functionType1.isEnumType());
      assertEquals(false, functionType1.isNumberValueType());
      assertEquals(true, functionType1.isOrdinaryFunction());
      assertEquals(BooleanLiteralSet.TRUE, functionType1.getPossibleToBooleanOutcomes());
      assertEquals(false, functionType1.isRecordType());
      assertEquals(false, functionType1.isNominalConstructor());
      assertEquals(false, functionType1.isAllType());
      assertEquals(false, functionType1.isNoResolvedType());
      assertEquals(false, functionType1.isConstructor());
      assertEquals(false, functionType1.isReturnTypeInferred());
      assertEquals(false, functionType1.isNullType());
      assertEquals(true, functionType1.isFunctionType());
      assertEquals(false, functionType1.isInterface());
      assertEquals(false, functionType1.isNoType());
      assertEquals(false, functionType1.isCheckedUnknownType());
      assertEquals(false, functionType1.isResolved());
      assertEquals("window", jqueryCodingConvention0.getGlobalObject());
      assertEquals(false, functionType0.isTemplateType());
      assertEquals(false, functionType0.isParameterizedType());
      assertEquals(true, functionType0.isFunctionType());
      assertEquals(false, functionType0.isNoObjectType());
      assertEquals(false, functionType0.isConstructor());
      assertEquals(false, functionType0.isUnionType());
      assertEquals(false, functionType0.isBooleanValueType());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertEquals(false, functionType0.isVoidType());
      assertEquals(true, functionType0.isOrdinaryFunction());
      assertEquals(false, functionType0.isNoType());
      assertEquals(false, functionType0.isEnumType());
      assertEquals(false, functionType0.isNoResolvedType());
      assertEquals(false, functionType0.isRecordType());
      assertEquals(false, functionType0.hasInstanceType());
      assertEquals(false, functionType0.isNominalConstructor());
      assertEquals(false, functionType0.isCheckedUnknownType());
      assertEquals(false, functionType0.isResolved());
      assertEquals(false, functionType0.isReturnTypeInferred());
      assertEquals(2147483647, functionType0.getMaxArguments());
      assertEquals(false, functionType0.isInterface());
      assertEquals(false, functionType0.hasCachedValues());
      assertEquals(false, functionType0.isNullType());
      assertEquals(false, functionType0.isEnumElementType());
      assertEquals(false, functionType0.isNumberValueType());
      assertEquals(false, functionType0.isStringValueType());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, functionType0.isNominalType());
      assertEquals(false, functionType0.isFunctionPrototypeType());
      assertEquals(true, functionType0.canBeCalled());
      assertEquals(false, functionType0.isAllType());
  }

  @Test
  public void test32()  throws Throwable  {
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      assertNotNull(closureCodingConvention0);
      assertEquals("goog.global", closureCodingConvention0.getGlobalObject());
      assertEquals("goog.exportSymbol", closureCodingConvention0.getExportSymbolFunction());
      assertEquals("goog.exportProperty", closureCodingConvention0.getExportPropertyFunction());
      assertEquals("goog.abstractMethod", closureCodingConvention0.getAbstractMethodName());
      
      ErrorReporter errorReporter0 = null;
      boolean boolean0 = false;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(errorReporter0, boolean0);
      assertNotNull(jSTypeRegistry0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter((CodingConvention) closureCodingConvention0, jSTypeRegistry0);
      assertNotNull(semanticReverseAbstractInterpreter0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals("goog.global", closureCodingConvention0.getGlobalObject());
      assertEquals("goog.exportSymbol", closureCodingConvention0.getExportSymbolFunction());
      assertEquals("goog.exportProperty", closureCodingConvention0.getExportPropertyFunction());
      assertEquals("goog.abstractMethod", closureCodingConvention0.getAbstractMethodName());
      
      JSTypeNative jSTypeNative0 = JSTypeNative.STRING_TYPE;
      StringType stringType0 = (StringType)semanticReverseAbstractInterpreter0.getNativeType(jSTypeNative0);
      assertNotNull(stringType0);
      assertEquals(false, stringType0.isNumberValueType());
      assertEquals(false, stringType0.isAllType());
      assertEquals(false, stringType0.isBooleanValueType());
      assertEquals(false, stringType0.isUnionType());
      assertEquals(false, stringType0.isNoObjectType());
      assertEquals(true, stringType0.isStringValueType());
      assertEquals(false, stringType0.isResolved());
      assertEquals(false, stringType0.isOrdinaryFunction());
      assertEquals(false, stringType0.isTemplateType());
      assertEquals(false, stringType0.isNominalConstructor());
      assertEquals(false, stringType0.isEnumType());
      assertEquals(false, stringType0.isConstructor());
      assertEquals(true, stringType0.matchesObjectContext());
      assertEquals(BooleanLiteralSet.BOTH, stringType0.getPossibleToBooleanOutcomes());
      assertEquals(false, stringType0.isRecordType());
      assertEquals(false, stringType0.isEnumElementType());
      assertEquals(false, stringType0.isCheckedUnknownType());
      assertEquals(true, stringType0.matchesNumberContext());
      assertEquals(false, stringType0.isParameterizedType());
      assertEquals(false, stringType0.isInterface());
      assertEquals(false, stringType0.isNoResolvedType());
      assertEquals(false, stringType0.isVoidType());
      assertEquals("string", stringType0.getDisplayName());
      assertEquals(false, stringType0.isNullType());
      assertEquals(false, stringType0.isFunctionType());
      assertEquals(false, stringType0.isNoType());
      assertEquals(true, stringType0.matchesStringContext());
      assertEquals(false, stringType0.isNominalType());
      assertEquals(false, stringType0.isFunctionPrototypeType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals("goog.global", closureCodingConvention0.getGlobalObject());
      assertEquals("goog.exportSymbol", closureCodingConvention0.getExportSymbolFunction());
      assertEquals("goog.exportProperty", closureCodingConvention0.getExportPropertyFunction());
      assertEquals("goog.abstractMethod", closureCodingConvention0.getAbstractMethodName());
      
      StringType stringType1 = (StringType)semanticReverseAbstractInterpreter0.getRestrictedWithoutUndefined(stringType0);
      assertSame(stringType1, stringType0);
      assertSame(stringType0, stringType1);
      assertNotNull(stringType1);
      assertEquals(false, stringType1.isNominalType());
      assertEquals(false, stringType1.isFunctionType());
      assertEquals(false, stringType1.isEnumElementType());
      assertEquals(false, stringType1.isNominalConstructor());
      assertEquals(false, stringType1.isParameterizedType());
      assertEquals(false, stringType1.isUnionType());
      assertEquals(false, stringType1.isCheckedUnknownType());
      assertEquals(true, stringType1.isStringValueType());
      assertEquals(false, stringType1.isNoType());
      assertEquals(false, stringType1.isNoObjectType());
      assertEquals(true, stringType1.matchesObjectContext());
      assertEquals(true, stringType1.matchesNumberContext());
      assertEquals(false, stringType1.isTemplateType());
      assertEquals(false, stringType1.isRecordType());
      assertEquals(false, stringType1.isEnumType());
      assertEquals(false, stringType1.isOrdinaryFunction());
      assertEquals("string", stringType1.getDisplayName());
      assertEquals(false, stringType1.isFunctionPrototypeType());
      assertEquals(false, stringType1.isNumberValueType());
      assertEquals(BooleanLiteralSet.BOTH, stringType1.getPossibleToBooleanOutcomes());
      assertEquals(false, stringType1.isConstructor());
      assertEquals(false, stringType1.isNullType());
      assertEquals(false, stringType1.isVoidType());
      assertEquals(false, stringType1.isNoResolvedType());
      assertEquals(false, stringType1.isInterface());
      assertEquals(false, stringType1.isResolved());
      assertEquals(true, stringType1.matchesStringContext());
      assertEquals(false, stringType1.isAllType());
      assertEquals(false, stringType1.isBooleanValueType());
      assertEquals(false, stringType0.isNumberValueType());
      assertEquals(false, stringType0.isAllType());
      assertEquals(false, stringType0.isBooleanValueType());
      assertEquals(false, stringType0.isUnionType());
      assertEquals(false, stringType0.isNoObjectType());
      assertEquals(true, stringType0.isStringValueType());
      assertEquals(false, stringType0.isResolved());
      assertEquals(false, stringType0.isOrdinaryFunction());
      assertEquals(false, stringType0.isTemplateType());
      assertEquals(false, stringType0.isNominalConstructor());
      assertEquals(false, stringType0.isEnumType());
      assertEquals(false, stringType0.isConstructor());
      assertEquals(true, stringType0.matchesObjectContext());
      assertEquals(BooleanLiteralSet.BOTH, stringType0.getPossibleToBooleanOutcomes());
      assertEquals(false, stringType0.isRecordType());
      assertEquals(false, stringType0.isEnumElementType());
      assertEquals(false, stringType0.isCheckedUnknownType());
      assertEquals(true, stringType0.matchesNumberContext());
      assertEquals(false, stringType0.isParameterizedType());
      assertEquals(false, stringType0.isInterface());
      assertEquals(false, stringType0.isNoResolvedType());
      assertEquals(false, stringType0.isVoidType());
      assertEquals("string", stringType0.getDisplayName());
      assertEquals(false, stringType0.isNullType());
      assertEquals(false, stringType0.isFunctionType());
      assertEquals(false, stringType0.isNoType());
      assertEquals(true, stringType0.matchesStringContext());
      assertEquals(false, stringType0.isNominalType());
      assertEquals(false, stringType0.isFunctionPrototypeType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals("goog.global", closureCodingConvention0.getGlobalObject());
      assertEquals("goog.exportSymbol", closureCodingConvention0.getExportSymbolFunction());
      assertEquals("goog.exportProperty", closureCodingConvention0.getExportPropertyFunction());
      assertEquals("goog.abstractMethod", closureCodingConvention0.getAbstractMethodName());
  }

  @Test
  public void test33()  throws Throwable  {
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      assertNotNull(closureCodingConvention0);
      assertEquals("goog.global", closureCodingConvention0.getGlobalObject());
      assertEquals("goog.abstractMethod", closureCodingConvention0.getAbstractMethodName());
      assertEquals("goog.exportProperty", closureCodingConvention0.getExportPropertyFunction());
      assertEquals("goog.exportSymbol", closureCodingConvention0.getExportSymbolFunction());
      
      JqueryCodingConvention jqueryCodingConvention0 = new JqueryCodingConvention((CodingConvention) closureCodingConvention0);
      assertNotNull(jqueryCodingConvention0);
      assertEquals("goog.global", closureCodingConvention0.getGlobalObject());
      assertEquals("goog.abstractMethod", closureCodingConvention0.getAbstractMethodName());
      assertEquals("goog.exportProperty", closureCodingConvention0.getExportPropertyFunction());
      assertEquals("goog.exportSymbol", closureCodingConvention0.getExportSymbolFunction());
      assertEquals("window", jqueryCodingConvention0.getGlobalObject());
      
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      boolean boolean0 = true;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0, boolean0);
      assertNotNull(jSTypeRegistry0);
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter((CodingConvention) jqueryCodingConvention0, jSTypeRegistry0);
      assertNotNull(closureReverseAbstractInterpreter0);
      assertEquals("goog.global", closureCodingConvention0.getGlobalObject());
      assertEquals("goog.abstractMethod", closureCodingConvention0.getAbstractMethodName());
      assertEquals("goog.exportProperty", closureCodingConvention0.getExportPropertyFunction());
      assertEquals("goog.exportSymbol", closureCodingConvention0.getExportSymbolFunction());
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals("window", jqueryCodingConvention0.getGlobalObject());
      
      JSType jSType0 = null;
      String string0 = "\\)fg,l9:l1Oy";
      NoType noType0 = (NoType)jSTypeRegistry0.getGreatestSubtypeWithProperty(jSType0, string0);
      assertNotNull(noType0);
      assertEquals(false, noType0.isInterface());
      assertEquals(false, noType0.isParameterizedType());
      assertEquals(true, noType0.matchesNumberContext());
      assertEquals(false, noType0.isEnumType());
      assertEquals(false, noType0.isReturnTypeInferred());
      assertEquals(false, noType0.isNumberValueType());
      assertEquals(true, noType0.canBeCalled());
      assertEquals(false, noType0.isResolved());
      assertEquals(false, noType0.hasCachedValues());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noType0.isEnumElementType());
      assertEquals(true, noType0.isNoType());
      assertEquals(false, noType0.isRecordType());
      assertEquals(false, noType0.isOrdinaryFunction());
      assertEquals(false, noType0.isFunctionType());
      assertEquals(2147483647, noType0.getPropertiesCount());
      assertEquals(true, noType0.matchesObjectContext());
      assertEquals(false, noType0.isCheckedUnknownType());
      assertEquals(false, noType0.isBooleanValueType());
      assertEquals(0, noType0.getExtendedInterfacesCount());
      assertEquals(false, noType0.isAllType());
      assertEquals(true, noType0.isNullable());
      assertEquals(false, noType0.isUnionType());
      assertEquals(false, noType0.isNullType());
      assertEquals(false, noType0.isVoidType());
      assertEquals(false, noType0.isNoResolvedType());
      assertEquals(false, noType0.isNominalConstructor());
      assertEquals(false, noType0.isFunctionPrototypeType());
      assertEquals(true, noType0.isConstructor());
      assertEquals(false, noType0.isTemplateType());
      assertEquals(true, noType0.matchesStringContext());
      assertEquals(true, noType0.hasInstanceType());
      assertNull(noType0.getReferenceName());
      assertEquals(false, noType0.isNominalType());
      assertEquals(false, noType0.isStringValueType());
      assertEquals(2147483647, noType0.getMaxArguments());
      assertEquals(false, noType0.isNoObjectType());
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      NoType noType1 = (NoType)closureReverseAbstractInterpreter0.getRestrictedWithoutUndefined(noType0);
      assertSame(noType0, noType1);
      assertSame(noType1, noType0);
      assertNotNull(noType1);
      assertEquals(false, noType0.isInterface());
      assertEquals(false, noType0.isParameterizedType());
      assertEquals(true, noType0.matchesNumberContext());
      assertEquals(false, noType0.isEnumType());
      assertEquals(false, noType0.isReturnTypeInferred());
      assertEquals(false, noType0.isNumberValueType());
      assertEquals(true, noType0.canBeCalled());
      assertEquals(false, noType0.isResolved());
      assertEquals(false, noType0.hasCachedValues());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noType0.isEnumElementType());
      assertEquals(true, noType0.isNoType());
      assertEquals(false, noType0.isRecordType());
      assertEquals(false, noType0.isOrdinaryFunction());
      assertEquals(false, noType0.isFunctionType());
      assertEquals(2147483647, noType0.getPropertiesCount());
      assertEquals(true, noType0.matchesObjectContext());
      assertEquals(false, noType0.isCheckedUnknownType());
      assertEquals(false, noType0.isBooleanValueType());
      assertEquals(0, noType0.getExtendedInterfacesCount());
      assertEquals(false, noType0.isAllType());
      assertEquals(true, noType0.isNullable());
      assertEquals(false, noType0.isUnionType());
      assertEquals(false, noType0.isNullType());
      assertEquals(false, noType0.isVoidType());
      assertEquals(false, noType0.isNoResolvedType());
      assertEquals(false, noType0.isNominalConstructor());
      assertEquals(false, noType0.isFunctionPrototypeType());
      assertEquals(true, noType0.isConstructor());
      assertEquals(false, noType0.isTemplateType());
      assertEquals(true, noType0.matchesStringContext());
      assertEquals(true, noType0.hasInstanceType());
      assertNull(noType0.getReferenceName());
      assertEquals(false, noType0.isNominalType());
      assertEquals(false, noType0.isStringValueType());
      assertEquals(2147483647, noType0.getMaxArguments());
      assertEquals(false, noType0.isNoObjectType());
      assertEquals("goog.global", closureCodingConvention0.getGlobalObject());
      assertEquals("goog.abstractMethod", closureCodingConvention0.getAbstractMethodName());
      assertEquals("goog.exportProperty", closureCodingConvention0.getExportPropertyFunction());
      assertEquals("goog.exportSymbol", closureCodingConvention0.getExportSymbolFunction());
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(0, noType1.getExtendedInterfacesCount());
      assertEquals(false, noType1.isOrdinaryFunction());
      assertEquals(false, noType1.isParameterizedType());
      assertEquals(true, noType1.matchesObjectContext());
      assertEquals(false, noType1.isTemplateType());
      assertEquals(false, noType1.isResolved());
      assertEquals(false, noType1.isBooleanValueType());
      assertEquals(false, noType1.isFunctionPrototypeType());
      assertEquals(false, noType1.isEnumElementType());
      assertEquals(BooleanLiteralSet.EMPTY, noType1.getPossibleToBooleanOutcomes());
      assertEquals(true, noType1.isConstructor());
      assertEquals(false, noType1.isNumberValueType());
      assertEquals(false, noType1.isRecordType());
      assertEquals(true, noType1.hasInstanceType());
      assertEquals(false, noType1.isInterface());
      assertEquals(false, noType1.isVoidType());
      assertEquals(false, noType1.isEnumType());
      assertEquals(false, noType1.isNominalType());
      assertEquals(false, noType1.isReturnTypeInferred());
      assertEquals(false, noType1.isNoResolvedType());
      assertEquals(false, noType1.isUnionType());
      assertEquals(false, noType1.isAllType());
      assertEquals(true, noType1.isNoType());
      assertEquals(false, noType1.isNullType());
      assertEquals(true, noType1.matchesStringContext());
      assertEquals(false, noType1.isCheckedUnknownType());
      assertEquals(true, noType1.isNullable());
      assertEquals(true, noType1.matchesNumberContext());
      assertNull(noType1.getReferenceName());
      assertEquals(2147483647, noType1.getPropertiesCount());
      assertEquals(2147483647, noType1.getMaxArguments());
      assertEquals(false, noType1.isFunctionType());
      assertEquals(false, noType1.isNoObjectType());
      assertEquals(false, noType1.isNominalConstructor());
      assertEquals(true, noType1.canBeCalled());
      assertEquals(false, noType1.isStringValueType());
      assertEquals(false, noType1.hasCachedValues());
      assertEquals("window", jqueryCodingConvention0.getGlobalObject());
  }

  @Test
  public void test34()  throws Throwable  {
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      assertNotNull(closureCodingConvention0);
      assertEquals("goog.exportProperty", closureCodingConvention0.getExportPropertyFunction());
      assertEquals("goog.exportSymbol", closureCodingConvention0.getExportSymbolFunction());
      assertEquals("goog.abstractMethod", closureCodingConvention0.getAbstractMethodName());
      assertEquals("goog.global", closureCodingConvention0.getGlobalObject());
      
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      boolean boolean0 = true;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0, boolean0);
      assertNotNull(jSTypeRegistry0);
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter((CodingConvention) closureCodingConvention0, jSTypeRegistry0);
      assertNotNull(closureReverseAbstractInterpreter0);
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals("goog.exportProperty", closureCodingConvention0.getExportPropertyFunction());
      assertEquals("goog.exportSymbol", closureCodingConvention0.getExportSymbolFunction());
      assertEquals("goog.abstractMethod", closureCodingConvention0.getAbstractMethodName());
      assertEquals("goog.global", closureCodingConvention0.getGlobalObject());
      
      String string0 = closureCodingConvention0.getExportPropertyFunction();
      assertEquals("goog.exportProperty", string0);
      assertNotNull(string0);
      assertEquals("goog.exportProperty", closureCodingConvention0.getExportPropertyFunction());
      assertEquals("goog.exportSymbol", closureCodingConvention0.getExportSymbolFunction());
      assertEquals("goog.abstractMethod", closureCodingConvention0.getAbstractMethodName());
      assertEquals("goog.global", closureCodingConvention0.getGlobalObject());
      
      JSType jSType0 = null;
      SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter((CodingConvention) closureCodingConvention0, jSTypeRegistry0);
      assertNotNull(semanticReverseAbstractInterpreter0);
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals("goog.exportProperty", closureCodingConvention0.getExportPropertyFunction());
      assertEquals("goog.exportSymbol", closureCodingConvention0.getExportSymbolFunction());
      assertEquals("goog.abstractMethod", closureCodingConvention0.getAbstractMethodName());
      assertEquals("goog.global", closureCodingConvention0.getGlobalObject());
      
      UnknownType unknownType0 = (UnknownType)closureReverseAbstractInterpreter0.getRestrictedByTypeOfResult(jSType0, string0, boolean0);
      assertNotNull(unknownType0);
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, unknownType0.isFunctionPrototypeType());
      assertEquals(false, unknownType0.isNumberValueType());
      assertEquals("Unknown", unknownType0.getDisplayName());
      assertEquals(false, unknownType0.isNominalConstructor());
      assertEquals(false, unknownType0.isInterface());
      assertEquals(false, unknownType0.isConstructor());
      assertEquals(false, unknownType0.isNullType());
      assertEquals(false, unknownType0.hasReferenceName());
      assertEquals(false, unknownType0.isParameterizedType());
      assertEquals(false, unknownType0.isVoidType());
      assertEquals(false, unknownType0.isNoType());
      assertEquals(false, unknownType0.isNoObjectType());
      assertEquals(true, unknownType0.hasDisplayName());
      assertEquals(false, unknownType0.isRecordType());
      assertEquals(false, unknownType0.isOrdinaryFunction());
      assertEquals(true, unknownType0.isNullable());
      assertEquals(2147483647, unknownType0.getPropertiesCount());
      assertEquals(false, unknownType0.isEnumElementType());
      assertEquals(true, unknownType0.canBeCalled());
      assertEquals(true, unknownType0.matchesNumberContext());
      assertEquals(false, unknownType0.isEnumType());
      assertEquals(false, unknownType0.isCheckedUnknownType());
      assertEquals(false, unknownType0.hasCachedValues());
      assertEquals(false, unknownType0.isAllType());
      assertEquals(false, unknownType0.isNominalType());
      assertEquals(false, unknownType0.isStringValueType());
      assertEquals(false, unknownType0.isNoResolvedType());
      assertEquals(false, unknownType0.isFunctionType());
      assertEquals(false, unknownType0.isBooleanValueType());
      assertEquals(false, unknownType0.isResolved());
      assertEquals(false, unknownType0.isNativeObjectType());
      assertEquals(false, unknownType0.isTemplateType());
      assertEquals(false, unknownType0.isUnionType());
      assertEquals(true, unknownType0.matchesObjectContext());
      assertEquals("?", unknownType0.getReferenceName());
      assertEquals(BooleanLiteralSet.BOTH, unknownType0.getPossibleToBooleanOutcomes());
      assertEquals(true, unknownType0.isUnknownType());
      assertEquals(true, unknownType0.matchesStringContext());
      assertEquals("goog.exportProperty", closureCodingConvention0.getExportPropertyFunction());
      assertEquals("goog.exportSymbol", closureCodingConvention0.getExportSymbolFunction());
      assertEquals("goog.abstractMethod", closureCodingConvention0.getAbstractMethodName());
      assertEquals("goog.global", closureCodingConvention0.getGlobalObject());
      
      UnknownType unknownType1 = (UnknownType)semanticReverseAbstractInterpreter0.getRestrictedWithoutUndefined(unknownType0);
      assertSame(unknownType1, unknownType0);
      assertSame(unknownType0, unknownType1);
      assertNotNull(unknownType1);
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, unknownType1.isEnumType());
      assertEquals(true, unknownType1.matchesNumberContext());
      assertEquals(false, unknownType1.hasReferenceName());
      assertEquals(false, unknownType1.isNominalType());
      assertEquals(false, unknownType1.isAllType());
      assertEquals(false, unknownType1.isNominalConstructor());
      assertEquals(true, unknownType1.isUnknownType());
      assertEquals(true, unknownType1.isNullable());
      assertEquals(false, unknownType1.isParameterizedType());
      assertEquals(false, unknownType1.isResolved());
      assertEquals(false, unknownType1.isNumberValueType());
      assertEquals(false, unknownType1.isNoResolvedType());
      assertEquals(true, unknownType1.hasDisplayName());
      assertEquals(false, unknownType1.isFunctionType());
      assertEquals(false, unknownType1.isRecordType());
      assertEquals(false, unknownType1.isNoType());
      assertEquals(false, unknownType1.isVoidType());
      assertEquals(false, unknownType1.hasCachedValues());
      assertEquals(false, unknownType1.isNoObjectType());
      assertEquals(false, unknownType1.isUnionType());
      assertEquals(true, unknownType1.matchesObjectContext());
      assertEquals(false, unknownType1.isOrdinaryFunction());
      assertEquals(false, unknownType1.isFunctionPrototypeType());
      assertEquals("Unknown", unknownType1.getDisplayName());
      assertEquals(false, unknownType1.isConstructor());
      assertEquals(false, unknownType1.isInterface());
      assertEquals(false, unknownType1.isNativeObjectType());
      assertEquals(true, unknownType1.canBeCalled());
      assertEquals(false, unknownType1.isNullType());
      assertEquals(false, unknownType1.isTemplateType());
      assertEquals(false, unknownType1.isEnumElementType());
      assertEquals(BooleanLiteralSet.BOTH, unknownType1.getPossibleToBooleanOutcomes());
      assertEquals(false, unknownType1.isBooleanValueType());
      assertEquals(false, unknownType1.isStringValueType());
      assertEquals(2147483647, unknownType1.getPropertiesCount());
      assertEquals("?", unknownType1.getReferenceName());
      assertEquals(false, unknownType1.isCheckedUnknownType());
      assertEquals(true, unknownType1.matchesStringContext());
      assertEquals(false, unknownType0.isFunctionPrototypeType());
      assertEquals(false, unknownType0.isNumberValueType());
      assertEquals("Unknown", unknownType0.getDisplayName());
      assertEquals(false, unknownType0.isNominalConstructor());
      assertEquals(false, unknownType0.isInterface());
      assertEquals(false, unknownType0.isConstructor());
      assertEquals(false, unknownType0.isNullType());
      assertEquals(false, unknownType0.hasReferenceName());
      assertEquals(false, unknownType0.isParameterizedType());
      assertEquals(false, unknownType0.isVoidType());
      assertEquals(false, unknownType0.isNoType());
      assertEquals(false, unknownType0.isNoObjectType());
      assertEquals(true, unknownType0.hasDisplayName());
      assertEquals(false, unknownType0.isRecordType());
      assertEquals(false, unknownType0.isOrdinaryFunction());
      assertEquals(true, unknownType0.isNullable());
      assertEquals(2147483647, unknownType0.getPropertiesCount());
      assertEquals(false, unknownType0.isEnumElementType());
      assertEquals(true, unknownType0.canBeCalled());
      assertEquals(true, unknownType0.matchesNumberContext());
      assertEquals(false, unknownType0.isEnumType());
      assertEquals(false, unknownType0.isCheckedUnknownType());
      assertEquals(false, unknownType0.hasCachedValues());
      assertEquals(false, unknownType0.isAllType());
      assertEquals(false, unknownType0.isNominalType());
      assertEquals(false, unknownType0.isStringValueType());
      assertEquals(false, unknownType0.isNoResolvedType());
      assertEquals(false, unknownType0.isFunctionType());
      assertEquals(false, unknownType0.isBooleanValueType());
      assertEquals(false, unknownType0.isResolved());
      assertEquals(false, unknownType0.isNativeObjectType());
      assertEquals(false, unknownType0.isTemplateType());
      assertEquals(false, unknownType0.isUnionType());
      assertEquals(true, unknownType0.matchesObjectContext());
      assertEquals("?", unknownType0.getReferenceName());
      assertEquals(BooleanLiteralSet.BOTH, unknownType0.getPossibleToBooleanOutcomes());
      assertEquals(true, unknownType0.isUnknownType());
      assertEquals(true, unknownType0.matchesStringContext());
      assertEquals("goog.exportProperty", closureCodingConvention0.getExportPropertyFunction());
      assertEquals("goog.exportSymbol", closureCodingConvention0.getExportSymbolFunction());
      assertEquals("goog.abstractMethod", closureCodingConvention0.getAbstractMethodName());
      assertEquals("goog.global", closureCodingConvention0.getGlobalObject());
  }

  @Test
  public void test35()  throws Throwable  {
      JqueryCodingConvention jqueryCodingConvention0 = new JqueryCodingConvention();
      assertNotNull(jqueryCodingConvention0);
      assertEquals("window", jqueryCodingConvention0.getGlobalObject());
      
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter((CodingConvention) jqueryCodingConvention0, jSTypeRegistry0);
      assertNotNull(semanticReverseAbstractInterpreter0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals("window", jqueryCodingConvention0.getGlobalObject());
      
      ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter((CodingConvention) jqueryCodingConvention0, jSTypeRegistry0);
      assertNotNull(closureReverseAbstractInterpreter0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals("window", jqueryCodingConvention0.getGlobalObject());
      
      JSTypeNative jSTypeNative0 = JSTypeNative.BOOLEAN_TYPE;
      BooleanType booleanType0 = (BooleanType)closureReverseAbstractInterpreter0.getNativeType(jSTypeNative0);
      assertNotNull(booleanType0);
      assertEquals(BooleanLiteralSet.BOTH, booleanType0.getPossibleToBooleanOutcomes());
      assertEquals(false, booleanType0.isNoType());
      assertEquals(true, booleanType0.isBooleanValueType());
      assertEquals(false, booleanType0.isNullType());
      assertEquals(false, booleanType0.isUnionType());
      assertEquals(false, booleanType0.isNumberValueType());
      assertEquals(false, booleanType0.isAllType());
      assertEquals(true, booleanType0.matchesNumberContext());
      assertEquals(false, booleanType0.isNominalType());
      assertEquals(false, booleanType0.isInterface());
      assertEquals(true, booleanType0.matchesStringContext());
      assertEquals(false, booleanType0.isRecordType());
      assertEquals(false, booleanType0.isOrdinaryFunction());
      assertEquals(false, booleanType0.isFunctionPrototypeType());
      assertEquals(false, booleanType0.isFunctionType());
      assertEquals(false, booleanType0.isNoResolvedType());
      assertEquals(false, booleanType0.isStringValueType());
      assertEquals(true, booleanType0.matchesObjectContext());
      assertEquals(false, booleanType0.isResolved());
      assertEquals("boolean", booleanType0.getDisplayName());
      assertEquals(false, booleanType0.isVoidType());
      assertEquals(false, booleanType0.isEnumType());
      assertEquals(false, booleanType0.isNoObjectType());
      assertEquals(false, booleanType0.isNullable());
      assertEquals(false, booleanType0.isConstructor());
      assertEquals(false, booleanType0.isParameterizedType());
      assertEquals(false, booleanType0.isTemplateType());
      assertEquals(false, booleanType0.isCheckedUnknownType());
      assertEquals(false, booleanType0.isNominalConstructor());
      assertEquals(false, booleanType0.isEnumElementType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals("window", jqueryCodingConvention0.getGlobalObject());
      
      BooleanType booleanType1 = (BooleanType)semanticReverseAbstractInterpreter0.getRestrictedWithoutUndefined(booleanType0);
      assertSame(booleanType1, booleanType0);
      assertSame(booleanType0, booleanType1);
      assertNotNull(booleanType1);
      assertEquals(false, booleanType1.isEnumType());
      assertEquals(false, booleanType1.isTemplateType());
      assertEquals(false, booleanType1.isUnionType());
      assertEquals("boolean", booleanType1.getDisplayName());
      assertEquals(false, booleanType1.isStringValueType());
      assertEquals(false, booleanType1.isResolved());
      assertEquals(false, booleanType1.isVoidType());
      assertEquals(BooleanLiteralSet.BOTH, booleanType1.getPossibleToBooleanOutcomes());
      assertEquals(false, booleanType1.isNullType());
      assertEquals(false, booleanType1.isFunctionPrototypeType());
      assertEquals(false, booleanType1.isNoObjectType());
      assertEquals(false, booleanType1.isConstructor());
      assertEquals(false, booleanType1.isAllType());
      assertEquals(false, booleanType1.isRecordType());
      assertEquals(true, booleanType1.matchesObjectContext());
      assertEquals(false, booleanType1.isFunctionType());
      assertEquals(true, booleanType1.matchesNumberContext());
      assertEquals(false, booleanType1.isNoResolvedType());
      assertEquals(false, booleanType1.isNominalConstructor());
      assertEquals(false, booleanType1.isNominalType());
      assertEquals(false, booleanType1.isNumberValueType());
      assertEquals(false, booleanType1.isParameterizedType());
      assertEquals(false, booleanType1.isNullable());
      assertEquals(false, booleanType1.isNoType());
      assertEquals(true, booleanType1.matchesStringContext());
      assertEquals(false, booleanType1.isOrdinaryFunction());
      assertEquals(false, booleanType1.isEnumElementType());
      assertEquals(true, booleanType1.isBooleanValueType());
      assertEquals(false, booleanType1.isInterface());
      assertEquals(false, booleanType1.isCheckedUnknownType());
      assertEquals(BooleanLiteralSet.BOTH, booleanType0.getPossibleToBooleanOutcomes());
      assertEquals(false, booleanType0.isNoType());
      assertEquals(true, booleanType0.isBooleanValueType());
      assertEquals(false, booleanType0.isNullType());
      assertEquals(false, booleanType0.isUnionType());
      assertEquals(false, booleanType0.isNumberValueType());
      assertEquals(false, booleanType0.isAllType());
      assertEquals(true, booleanType0.matchesNumberContext());
      assertEquals(false, booleanType0.isNominalType());
      assertEquals(false, booleanType0.isInterface());
      assertEquals(true, booleanType0.matchesStringContext());
      assertEquals(false, booleanType0.isRecordType());
      assertEquals(false, booleanType0.isOrdinaryFunction());
      assertEquals(false, booleanType0.isFunctionPrototypeType());
      assertEquals(false, booleanType0.isFunctionType());
      assertEquals(false, booleanType0.isNoResolvedType());
      assertEquals(false, booleanType0.isStringValueType());
      assertEquals(true, booleanType0.matchesObjectContext());
      assertEquals(false, booleanType0.isResolved());
      assertEquals("boolean", booleanType0.getDisplayName());
      assertEquals(false, booleanType0.isVoidType());
      assertEquals(false, booleanType0.isEnumType());
      assertEquals(false, booleanType0.isNoObjectType());
      assertEquals(false, booleanType0.isNullable());
      assertEquals(false, booleanType0.isConstructor());
      assertEquals(false, booleanType0.isParameterizedType());
      assertEquals(false, booleanType0.isTemplateType());
      assertEquals(false, booleanType0.isCheckedUnknownType());
      assertEquals(false, booleanType0.isNominalConstructor());
      assertEquals(false, booleanType0.isEnumElementType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals("window", jqueryCodingConvention0.getGlobalObject());
  }

  @Test
  public void test36()  throws Throwable  {
      GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
      assertNotNull(googleCodingConvention0);
      
      ErrorReporter errorReporter0 = null;
      boolean boolean0 = true;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(errorReporter0, boolean0);
      assertNotNull(jSTypeRegistry0);
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter((CodingConvention) googleCodingConvention0, jSTypeRegistry0);
      assertNotNull(closureReverseAbstractInterpreter0);
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      JSTypeNative jSTypeNative0 = JSTypeNative.ALL_TYPE;
      AllType allType0 = (AllType)closureReverseAbstractInterpreter0.getNativeType(jSTypeNative0);
      assertNotNull(allType0);
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, allType0.isNullType());
      assertEquals(false, allType0.isFunctionType());
      assertEquals(false, allType0.isCheckedUnknownType());
      assertEquals(false, allType0.isBooleanValueType());
      assertEquals(BooleanLiteralSet.BOTH, allType0.getPossibleToBooleanOutcomes());
      assertEquals(false, allType0.isNoObjectType());
      assertEquals(true, allType0.isAllType());
      assertEquals(false, allType0.isResolved());
      assertEquals(false, allType0.isNoType());
      assertEquals(true, allType0.matchesStringContext());
      assertEquals(false, allType0.isConstructor());
      assertEquals(false, allType0.isNoResolvedType());
      assertEquals(false, allType0.isOrdinaryFunction());
      assertEquals(false, allType0.isFunctionPrototypeType());
      assertEquals(false, allType0.isParameterizedType());
      assertEquals(false, allType0.isEnumType());
      assertEquals(false, allType0.isNominalType());
      assertEquals(false, allType0.isTemplateType());
      assertEquals(false, allType0.isEnumElementType());
      assertEquals(false, allType0.canBeCalled());
      assertEquals(false, allType0.isNumberValueType());
      assertEquals(false, allType0.isVoidType());
      assertEquals(false, allType0.isInterface());
      assertEquals(false, allType0.isUnionType());
      assertEquals(true, allType0.matchesObjectContext());
      assertEquals(false, allType0.isNominalConstructor());
      assertEquals(true, allType0.hasDisplayName());
      assertEquals(false, allType0.isStringValueType());
      assertEquals("<Any Type>", allType0.getDisplayName());
      assertEquals(false, allType0.isRecordType());
      
      UnionType unionType0 = (UnionType)closureReverseAbstractInterpreter0.getRestrictedWithoutUndefined(allType0);
      assertNotNull(unionType0);
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isConstructor());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isNominalConstructor());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isParameterizedType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isFunctionPrototypeType());
      assertEquals(false, unionType0.isEnumType());
      assertEquals(false, unionType0.isNominalType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isOrdinaryFunction());
      assertEquals(false, unionType0.isNoResolvedType());
      assertEquals(false, unionType0.isInterface());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isCheckedUnknownType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isEnumElementType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, allType0.isNullType());
      assertEquals(false, allType0.isFunctionType());
      assertEquals(false, allType0.isCheckedUnknownType());
      assertEquals(false, allType0.isBooleanValueType());
      assertEquals(BooleanLiteralSet.BOTH, allType0.getPossibleToBooleanOutcomes());
      assertEquals(false, allType0.isNoObjectType());
      assertEquals(true, allType0.isAllType());
      assertEquals(false, allType0.isResolved());
      assertEquals(false, allType0.isNoType());
      assertEquals(true, allType0.matchesStringContext());
      assertEquals(false, allType0.isConstructor());
      assertEquals(false, allType0.isNoResolvedType());
      assertEquals(false, allType0.isOrdinaryFunction());
      assertEquals(false, allType0.isFunctionPrototypeType());
      assertEquals(false, allType0.isParameterizedType());
      assertEquals(false, allType0.isEnumType());
      assertEquals(false, allType0.isNominalType());
      assertEquals(false, allType0.isTemplateType());
      assertEquals(false, allType0.isEnumElementType());
      assertEquals(false, allType0.canBeCalled());
      assertEquals(false, allType0.isNumberValueType());
      assertEquals(false, allType0.isVoidType());
      assertEquals(false, allType0.isInterface());
      assertEquals(false, allType0.isUnionType());
      assertEquals(true, allType0.matchesObjectContext());
      assertEquals(false, allType0.isNominalConstructor());
      assertEquals(true, allType0.hasDisplayName());
      assertEquals(false, allType0.isStringValueType());
      assertEquals("<Any Type>", allType0.getDisplayName());
      assertEquals(false, allType0.isRecordType());
  }

  @Test
  public void test37()  throws Throwable  {
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      assertNotNull(closureCodingConvention0);
      assertEquals("goog.abstractMethod", closureCodingConvention0.getAbstractMethodName());
      assertEquals("goog.global", closureCodingConvention0.getGlobalObject());
      assertEquals("goog.exportProperty", closureCodingConvention0.getExportPropertyFunction());
      assertEquals("goog.exportSymbol", closureCodingConvention0.getExportSymbolFunction());
      
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      boolean boolean0 = true;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0, boolean0);
      assertNotNull(jSTypeRegistry0);
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter((CodingConvention) closureCodingConvention0, jSTypeRegistry0);
      assertNotNull(closureReverseAbstractInterpreter0);
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals("goog.abstractMethod", closureCodingConvention0.getAbstractMethodName());
      assertEquals("goog.global", closureCodingConvention0.getGlobalObject());
      assertEquals("goog.exportProperty", closureCodingConvention0.getExportPropertyFunction());
      assertEquals("goog.exportSymbol", closureCodingConvention0.getExportSymbolFunction());
      
      JSTypeNative jSTypeNative0 = JSTypeNative.NUMBER_TYPE;
      NumberType numberType0 = (NumberType)closureReverseAbstractInterpreter0.getNativeType(jSTypeNative0);
      assertNotNull(numberType0);
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, numberType0.isEnumElementType());
      assertEquals(false, numberType0.isUnionType());
      assertEquals(false, numberType0.isNullable());
      assertEquals(true, numberType0.matchesNumberContext());
      assertEquals(false, numberType0.isOrdinaryFunction());
      assertEquals(false, numberType0.isParameterizedType());
      assertEquals(false, numberType0.isNominalType());
      assertEquals(false, numberType0.isNoType());
      assertEquals(true, numberType0.isNumberValueType());
      assertEquals(false, numberType0.isInterface());
      assertEquals(false, numberType0.isStringValueType());
      assertEquals(true, numberType0.matchesStringContext());
      assertEquals(true, numberType0.matchesObjectContext());
      assertEquals(BooleanLiteralSet.BOTH, numberType0.getPossibleToBooleanOutcomes());
      assertEquals(false, numberType0.isAllType());
      assertEquals(false, numberType0.isNullType());
      assertEquals(false, numberType0.isBooleanValueType());
      assertEquals(false, numberType0.isConstructor());
      assertEquals(false, numberType0.isResolved());
      assertEquals(false, numberType0.isRecordType());
      assertEquals(false, numberType0.isFunctionPrototypeType());
      assertEquals(false, numberType0.isNoResolvedType());
      assertEquals(false, numberType0.isEnumType());
      assertEquals(false, numberType0.isNominalConstructor());
      assertEquals(false, numberType0.isVoidType());
      assertEquals(false, numberType0.isCheckedUnknownType());
      assertEquals(false, numberType0.isTemplateType());
      assertEquals(false, numberType0.isFunctionType());
      assertEquals(false, numberType0.isNoObjectType());
      assertEquals("number", numberType0.getDisplayName());
      assertEquals("goog.abstractMethod", closureCodingConvention0.getAbstractMethodName());
      assertEquals("goog.global", closureCodingConvention0.getGlobalObject());
      assertEquals("goog.exportProperty", closureCodingConvention0.getExportPropertyFunction());
      assertEquals("goog.exportSymbol", closureCodingConvention0.getExportSymbolFunction());
      
      SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter((CodingConvention) closureCodingConvention0, jSTypeRegistry0);
      assertNotNull(semanticReverseAbstractInterpreter0);
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals("goog.abstractMethod", closureCodingConvention0.getAbstractMethodName());
      assertEquals("goog.global", closureCodingConvention0.getGlobalObject());
      assertEquals("goog.exportProperty", closureCodingConvention0.getExportPropertyFunction());
      assertEquals("goog.exportSymbol", closureCodingConvention0.getExportSymbolFunction());
      
      NumberType numberType1 = (NumberType)semanticReverseAbstractInterpreter0.getRestrictedWithoutUndefined(numberType0);
      assertSame(numberType0, numberType1);
      assertSame(numberType1, numberType0);
      assertNotNull(numberType1);
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, numberType0.isEnumElementType());
      assertEquals(false, numberType0.isUnionType());
      assertEquals(false, numberType0.isNullable());
      assertEquals(true, numberType0.matchesNumberContext());
      assertEquals(false, numberType0.isOrdinaryFunction());
      assertEquals(false, numberType0.isParameterizedType());
      assertEquals(false, numberType0.isNominalType());
      assertEquals(false, numberType0.isNoType());
      assertEquals(true, numberType0.isNumberValueType());
      assertEquals(false, numberType0.isInterface());
      assertEquals(false, numberType0.isStringValueType());
      assertEquals(true, numberType0.matchesStringContext());
      assertEquals(true, numberType0.matchesObjectContext());
      assertEquals(BooleanLiteralSet.BOTH, numberType0.getPossibleToBooleanOutcomes());
      assertEquals(false, numberType0.isAllType());
      assertEquals(false, numberType0.isNullType());
      assertEquals(false, numberType0.isBooleanValueType());
      assertEquals(false, numberType0.isConstructor());
      assertEquals(false, numberType0.isResolved());
      assertEquals(false, numberType0.isRecordType());
      assertEquals(false, numberType0.isFunctionPrototypeType());
      assertEquals(false, numberType0.isNoResolvedType());
      assertEquals(false, numberType0.isEnumType());
      assertEquals(false, numberType0.isNominalConstructor());
      assertEquals(false, numberType0.isVoidType());
      assertEquals(false, numberType0.isCheckedUnknownType());
      assertEquals(false, numberType0.isTemplateType());
      assertEquals(false, numberType0.isFunctionType());
      assertEquals(false, numberType0.isNoObjectType());
      assertEquals("number", numberType0.getDisplayName());
      assertEquals("goog.abstractMethod", closureCodingConvention0.getAbstractMethodName());
      assertEquals("goog.global", closureCodingConvention0.getGlobalObject());
      assertEquals("goog.exportProperty", closureCodingConvention0.getExportPropertyFunction());
      assertEquals("goog.exportSymbol", closureCodingConvention0.getExportSymbolFunction());
      assertEquals(false, numberType1.isUnionType());
      assertEquals(true, numberType1.matchesObjectContext());
      assertEquals("number", numberType1.getDisplayName());
      assertEquals(false, numberType1.isNoResolvedType());
      assertEquals(BooleanLiteralSet.BOTH, numberType1.getPossibleToBooleanOutcomes());
      assertEquals(false, numberType1.isParameterizedType());
      assertEquals(false, numberType1.isNoType());
      assertEquals(false, numberType1.isRecordType());
      assertEquals(false, numberType1.isNoObjectType());
      assertEquals(false, numberType1.isConstructor());
      assertEquals(false, numberType1.isNominalType());
      assertEquals(false, numberType1.isAllType());
      assertEquals(false, numberType1.isEnumElementType());
      assertEquals(false, numberType1.isNominalConstructor());
      assertEquals(false, numberType1.isNullable());
      assertEquals(false, numberType1.isBooleanValueType());
      assertEquals(false, numberType1.isNullType());
      assertEquals(true, numberType1.isNumberValueType());
      assertEquals(false, numberType1.isResolved());
      assertEquals(false, numberType1.isVoidType());
      assertEquals(false, numberType1.isInterface());
      assertEquals(false, numberType1.isEnumType());
      assertEquals(true, numberType1.matchesNumberContext());
      assertEquals(false, numberType1.isCheckedUnknownType());
      assertEquals(false, numberType1.isOrdinaryFunction());
      assertEquals(false, numberType1.isFunctionType());
      assertEquals(false, numberType1.isTemplateType());
      assertEquals(false, numberType1.isFunctionPrototypeType());
      assertEquals(false, numberType1.isStringValueType());
      assertEquals(true, numberType1.matchesStringContext());
  }

  @Test
  public void test38()  throws Throwable  {
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      assertNotNull(closureCodingConvention0);
      assertEquals("goog.abstractMethod", closureCodingConvention0.getAbstractMethodName());
      assertEquals("goog.exportSymbol", closureCodingConvention0.getExportSymbolFunction());
      assertEquals("goog.exportProperty", closureCodingConvention0.getExportPropertyFunction());
      assertEquals("goog.global", closureCodingConvention0.getGlobalObject());
      
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter((CodingConvention) closureCodingConvention0, jSTypeRegistry0);
      assertNotNull(semanticReverseAbstractInterpreter0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals("goog.abstractMethod", closureCodingConvention0.getAbstractMethodName());
      assertEquals("goog.exportSymbol", closureCodingConvention0.getExportSymbolFunction());
      assertEquals("goog.exportProperty", closureCodingConvention0.getExportPropertyFunction());
      assertEquals("goog.global", closureCodingConvention0.getGlobalObject());
      
      ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter((CodingConvention) closureCodingConvention0, jSTypeRegistry0);
      assertNotNull(closureReverseAbstractInterpreter0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals("goog.abstractMethod", closureCodingConvention0.getAbstractMethodName());
      assertEquals("goog.exportSymbol", closureCodingConvention0.getExportSymbolFunction());
      assertEquals("goog.exportProperty", closureCodingConvention0.getExportPropertyFunction());
      assertEquals("goog.global", closureCodingConvention0.getGlobalObject());
      
      JSTypeNative jSTypeNative0 = JSTypeNative.VOID_TYPE;
      VoidType voidType0 = (VoidType)closureReverseAbstractInterpreter0.getNativeType(jSTypeNative0);
      assertNotNull(voidType0);
      assertEquals(false, voidType0.isNoResolvedType());
      assertEquals(false, voidType0.isBooleanValueType());
      assertEquals(false, voidType0.isParameterizedType());
      assertEquals(false, voidType0.isNullType());
      assertEquals(false, voidType0.isResolved());
      assertEquals(false, voidType0.isInterface());
      assertEquals(true, voidType0.matchesStringContext());
      assertEquals(false, voidType0.matchesNumberContext());
      assertEquals(false, voidType0.isOrdinaryFunction());
      assertEquals(false, voidType0.matchesObjectContext());
      assertEquals(false, voidType0.isStringValueType());
      assertEquals(false, voidType0.isNominalType());
      assertEquals(false, voidType0.isUnionType());
      assertEquals(false, voidType0.isNoObjectType());
      assertEquals(false, voidType0.isAllType());
      assertEquals(true, voidType0.isVoidType());
      assertEquals(false, voidType0.isCheckedUnknownType());
      assertEquals("undefined", voidType0.getDisplayName());
      assertEquals(BooleanLiteralSet.FALSE, voidType0.getPossibleToBooleanOutcomes());
      assertEquals(false, voidType0.isTemplateType());
      assertEquals(false, voidType0.isEnumType());
      assertEquals(false, voidType0.isEnumElementType());
      assertEquals(false, voidType0.isNominalConstructor());
      assertEquals(false, voidType0.isNumberValueType());
      assertEquals(false, voidType0.isNoType());
      assertEquals(false, voidType0.isFunctionPrototypeType());
      assertEquals(false, voidType0.isConstructor());
      assertEquals(false, voidType0.isRecordType());
      assertEquals(false, voidType0.isFunctionType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals("goog.abstractMethod", closureCodingConvention0.getAbstractMethodName());
      assertEquals("goog.exportSymbol", closureCodingConvention0.getExportSymbolFunction());
      assertEquals("goog.exportProperty", closureCodingConvention0.getExportPropertyFunction());
      assertEquals("goog.global", closureCodingConvention0.getGlobalObject());
      
      JSType jSType0 = semanticReverseAbstractInterpreter0.getRestrictedWithoutUndefined(voidType0);
      assertNull(jSType0);
      assertEquals(false, voidType0.isNoResolvedType());
      assertEquals(false, voidType0.isBooleanValueType());
      assertEquals(false, voidType0.isParameterizedType());
      assertEquals(false, voidType0.isNullType());
      assertEquals(false, voidType0.isResolved());
      assertEquals(false, voidType0.isInterface());
      assertEquals(true, voidType0.matchesStringContext());
      assertEquals(false, voidType0.matchesNumberContext());
      assertEquals(false, voidType0.isOrdinaryFunction());
      assertEquals(false, voidType0.matchesObjectContext());
      assertEquals(false, voidType0.isStringValueType());
      assertEquals(false, voidType0.isNominalType());
      assertEquals(false, voidType0.isUnionType());
      assertEquals(false, voidType0.isNoObjectType());
      assertEquals(false, voidType0.isAllType());
      assertEquals(true, voidType0.isVoidType());
      assertEquals(false, voidType0.isCheckedUnknownType());
      assertEquals("undefined", voidType0.getDisplayName());
      assertEquals(BooleanLiteralSet.FALSE, voidType0.getPossibleToBooleanOutcomes());
      assertEquals(false, voidType0.isTemplateType());
      assertEquals(false, voidType0.isEnumType());
      assertEquals(false, voidType0.isEnumElementType());
      assertEquals(false, voidType0.isNominalConstructor());
      assertEquals(false, voidType0.isNumberValueType());
      assertEquals(false, voidType0.isNoType());
      assertEquals(false, voidType0.isFunctionPrototypeType());
      assertEquals(false, voidType0.isConstructor());
      assertEquals(false, voidType0.isRecordType());
      assertEquals(false, voidType0.isFunctionType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals("goog.abstractMethod", closureCodingConvention0.getAbstractMethodName());
      assertEquals("goog.exportSymbol", closureCodingConvention0.getExportSymbolFunction());
      assertEquals("goog.exportProperty", closureCodingConvention0.getExportPropertyFunction());
      assertEquals("goog.global", closureCodingConvention0.getGlobalObject());
  }

  @Test
  public void test39()  throws Throwable  {
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      assertNotNull(closureCodingConvention0);
      assertEquals("goog.exportSymbol", closureCodingConvention0.getExportSymbolFunction());
      assertEquals("goog.exportProperty", closureCodingConvention0.getExportPropertyFunction());
      assertEquals("goog.global", closureCodingConvention0.getGlobalObject());
      assertEquals("goog.abstractMethod", closureCodingConvention0.getAbstractMethodName());
      
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      boolean boolean0 = false;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0, boolean0);
      assertNotNull(jSTypeRegistry0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter((CodingConvention) closureCodingConvention0, jSTypeRegistry0);
      assertNotNull(closureReverseAbstractInterpreter0);
      assertEquals("goog.exportSymbol", closureCodingConvention0.getExportSymbolFunction());
      assertEquals("goog.exportProperty", closureCodingConvention0.getExportPropertyFunction());
      assertEquals("goog.global", closureCodingConvention0.getGlobalObject());
      assertEquals("goog.abstractMethod", closureCodingConvention0.getAbstractMethodName());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      JSTypeNative jSTypeNative0 = JSTypeNative.NULL_TYPE;
      NullType nullType0 = (NullType)closureReverseAbstractInterpreter0.getNativeType(jSTypeNative0);
      assertNotNull(nullType0);
      assertEquals(false, nullType0.isNominalType());
      assertEquals(false, nullType0.isInterface());
      assertEquals(false, nullType0.isConstructor());
      assertEquals(false, nullType0.isOrdinaryFunction());
      assertEquals(false, nullType0.isNoObjectType());
      assertEquals(false, nullType0.isCheckedUnknownType());
      assertEquals(false, nullType0.isEnumType());
      assertEquals(true, nullType0.isNullType());
      assertEquals(false, nullType0.isFunctionType());
      assertEquals(false, nullType0.isParameterizedType());
      assertEquals(false, nullType0.isNumberValueType());
      assertEquals(BooleanLiteralSet.FALSE, nullType0.getPossibleToBooleanOutcomes());
      assertEquals(true, nullType0.isNullable());
      assertEquals(false, nullType0.isVoidType());
      assertEquals(false, nullType0.isUnionType());
      assertEquals(false, nullType0.isTemplateType());
      assertEquals(true, nullType0.matchesNumberContext());
      assertEquals(false, nullType0.isFunctionPrototypeType());
      assertEquals(false, nullType0.isNoType());
      assertEquals(true, nullType0.matchesStringContext());
      assertEquals(false, nullType0.isAllType());
      assertEquals(false, nullType0.isEnumElementType());
      assertEquals(false, nullType0.isRecordType());
      assertEquals(false, nullType0.isStringValueType());
      assertEquals("null", nullType0.getDisplayName());
      assertEquals(false, nullType0.isNoResolvedType());
      assertEquals(false, nullType0.isResolved());
      assertEquals(false, nullType0.isNominalConstructor());
      assertEquals(false, nullType0.isBooleanValueType());
      assertEquals(false, nullType0.matchesObjectContext());
      assertEquals("goog.exportSymbol", closureCodingConvention0.getExportSymbolFunction());
      assertEquals("goog.exportProperty", closureCodingConvention0.getExportPropertyFunction());
      assertEquals("goog.global", closureCodingConvention0.getGlobalObject());
      assertEquals("goog.abstractMethod", closureCodingConvention0.getAbstractMethodName());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter((CodingConvention) closureCodingConvention0, jSTypeRegistry0);
      assertNotNull(semanticReverseAbstractInterpreter0);
      assertEquals("goog.exportSymbol", closureCodingConvention0.getExportSymbolFunction());
      assertEquals("goog.exportProperty", closureCodingConvention0.getExportPropertyFunction());
      assertEquals("goog.global", closureCodingConvention0.getGlobalObject());
      assertEquals("goog.abstractMethod", closureCodingConvention0.getAbstractMethodName());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      NullType nullType1 = (NullType)semanticReverseAbstractInterpreter0.getRestrictedWithoutUndefined(nullType0);
      assertSame(nullType0, nullType1);
      assertSame(nullType1, nullType0);
      assertNotNull(nullType1);
      assertEquals(false, nullType0.isNominalType());
      assertEquals(false, nullType0.isInterface());
      assertEquals(false, nullType0.isConstructor());
      assertEquals(false, nullType0.isOrdinaryFunction());
      assertEquals(false, nullType0.isNoObjectType());
      assertEquals(false, nullType0.isCheckedUnknownType());
      assertEquals(false, nullType0.isEnumType());
      assertEquals(true, nullType0.isNullType());
      assertEquals(false, nullType0.isFunctionType());
      assertEquals(false, nullType0.isParameterizedType());
      assertEquals(false, nullType0.isNumberValueType());
      assertEquals(BooleanLiteralSet.FALSE, nullType0.getPossibleToBooleanOutcomes());
      assertEquals(true, nullType0.isNullable());
      assertEquals(false, nullType0.isVoidType());
      assertEquals(false, nullType0.isUnionType());
      assertEquals(false, nullType0.isTemplateType());
      assertEquals(true, nullType0.matchesNumberContext());
      assertEquals(false, nullType0.isFunctionPrototypeType());
      assertEquals(false, nullType0.isNoType());
      assertEquals(true, nullType0.matchesStringContext());
      assertEquals(false, nullType0.isAllType());
      assertEquals(false, nullType0.isEnumElementType());
      assertEquals(false, nullType0.isRecordType());
      assertEquals(false, nullType0.isStringValueType());
      assertEquals("null", nullType0.getDisplayName());
      assertEquals(false, nullType0.isNoResolvedType());
      assertEquals(false, nullType0.isResolved());
      assertEquals(false, nullType0.isNominalConstructor());
      assertEquals(false, nullType0.isBooleanValueType());
      assertEquals(false, nullType0.matchesObjectContext());
      assertEquals(false, nullType1.isNumberValueType());
      assertEquals(false, nullType1.isNominalConstructor());
      assertEquals("null", nullType1.getDisplayName());
      assertEquals(false, nullType1.isStringValueType());
      assertEquals(false, nullType1.isNominalType());
      assertEquals(false, nullType1.isCheckedUnknownType());
      assertEquals(BooleanLiteralSet.FALSE, nullType1.getPossibleToBooleanOutcomes());
      assertEquals(false, nullType1.isEnumElementType());
      assertEquals(false, nullType1.isRecordType());
      assertEquals(true, nullType1.matchesStringContext());
      assertEquals(false, nullType1.isNoResolvedType());
      assertEquals(false, nullType1.isResolved());
      assertEquals(false, nullType1.isEnumType());
      assertEquals(true, nullType1.isNullType());
      assertEquals(false, nullType1.isUnionType());
      assertEquals(true, nullType1.matchesNumberContext());
      assertEquals(false, nullType1.isParameterizedType());
      assertEquals(false, nullType1.isInterface());
      assertEquals(false, nullType1.isFunctionPrototypeType());
      assertEquals(false, nullType1.isOrdinaryFunction());
      assertEquals(false, nullType1.isVoidType());
      assertEquals(false, nullType1.matchesObjectContext());
      assertEquals(false, nullType1.isTemplateType());
      assertEquals(true, nullType1.isNullable());
      assertEquals(false, nullType1.isNoObjectType());
      assertEquals(false, nullType1.isAllType());
      assertEquals(false, nullType1.isBooleanValueType());
      assertEquals(false, nullType1.isNoType());
      assertEquals(false, nullType1.isFunctionType());
      assertEquals(false, nullType1.isConstructor());
      assertEquals("goog.exportSymbol", closureCodingConvention0.getExportSymbolFunction());
      assertEquals("goog.exportProperty", closureCodingConvention0.getExportPropertyFunction());
      assertEquals("goog.global", closureCodingConvention0.getGlobalObject());
      assertEquals("goog.abstractMethod", closureCodingConvention0.getAbstractMethodName());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
  }

  @Test
  public void test40()  throws Throwable  {
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      assertNotNull(closureCodingConvention0);
      assertEquals("goog.global", closureCodingConvention0.getGlobalObject());
      assertEquals("goog.exportProperty", closureCodingConvention0.getExportPropertyFunction());
      assertEquals("goog.abstractMethod", closureCodingConvention0.getAbstractMethodName());
      assertEquals("goog.exportSymbol", closureCodingConvention0.getExportSymbolFunction());
      
      GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention((CodingConvention) closureCodingConvention0);
      assertNotNull(googleCodingConvention0);
      assertEquals("goog.global", closureCodingConvention0.getGlobalObject());
      assertEquals("goog.exportProperty", closureCodingConvention0.getExportPropertyFunction());
      assertEquals("goog.abstractMethod", closureCodingConvention0.getAbstractMethodName());
      assertEquals("goog.exportSymbol", closureCodingConvention0.getExportSymbolFunction());
      
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      boolean boolean0 = false;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0, boolean0);
      assertNotNull(jSTypeRegistry0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter((CodingConvention) googleCodingConvention0, jSTypeRegistry0);
      assertNotNull(semanticReverseAbstractInterpreter0);
      assertEquals("goog.global", closureCodingConvention0.getGlobalObject());
      assertEquals("goog.exportProperty", closureCodingConvention0.getExportPropertyFunction());
      assertEquals("goog.abstractMethod", closureCodingConvention0.getAbstractMethodName());
      assertEquals("goog.exportSymbol", closureCodingConvention0.getExportSymbolFunction());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      JSTypeNative jSTypeNative0 = JSTypeNative.NO_OBJECT_TYPE;
      NoObjectType noObjectType0 = (NoObjectType)jSTypeRegistry0.getNativeObjectType(jSTypeNative0);
      assertNotNull(noObjectType0);
      assertEquals(true, noObjectType0.canBeCalled());
      assertEquals(false, noObjectType0.isUnionType());
      assertEquals(false, noObjectType0.isNominalType());
      assertEquals(false, noObjectType0.isCheckedUnknownType());
      assertEquals(false, noObjectType0.isNullType());
      assertEquals(false, noObjectType0.isParameterizedType());
      assertEquals(false, noObjectType0.isResolved());
      assertEquals(2147483647, noObjectType0.getMaxArguments());
      assertEquals(2147483647, noObjectType0.getPropertiesCount());
      assertEquals(false, noObjectType0.isEnumElementType());
      assertEquals(false, noObjectType0.isTemplateType());
      assertEquals(true, noObjectType0.hasInstanceType());
      assertEquals(0, noObjectType0.getExtendedInterfacesCount());
      assertEquals(false, noObjectType0.isStringValueType());
      assertEquals(false, noObjectType0.isFunctionType());
      assertEquals(false, noObjectType0.hasCachedValues());
      assertEquals(false, noObjectType0.isInterface());
      assertEquals(false, noObjectType0.isEnumType());
      assertEquals(false, noObjectType0.isReturnTypeInferred());
      assertEquals(true, noObjectType0.matchesStringContext());
      assertEquals(false, noObjectType0.isAllType());
      assertEquals(false, noObjectType0.isRecordType());
      assertEquals(false, noObjectType0.isBooleanValueType());
      assertEquals(true, noObjectType0.isNoObjectType());
      assertEquals(true, noObjectType0.matchesNumberContext());
      assertEquals(true, noObjectType0.isConstructor());
      assertEquals(false, noObjectType0.isNominalConstructor());
      assertEquals(true, noObjectType0.matchesObjectContext());
      assertEquals(false, noObjectType0.isNoType());
      assertNull(noObjectType0.getReferenceName());
      assertEquals(false, noObjectType0.isNumberValueType());
      assertEquals(false, noObjectType0.isFunctionPrototypeType());
      assertEquals(false, noObjectType0.isVoidType());
      assertEquals(false, noObjectType0.isOrdinaryFunction());
      assertEquals(false, noObjectType0.isNoResolvedType());
      assertEquals(BooleanLiteralSet.TRUE, noObjectType0.getPossibleToBooleanOutcomes());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      NoObjectType noObjectType1 = (NoObjectType)semanticReverseAbstractInterpreter0.getRestrictedWithoutUndefined(noObjectType0);
      assertSame(noObjectType0, noObjectType1);
      assertSame(noObjectType1, noObjectType0);
      assertNotNull(noObjectType1);
      assertEquals(true, noObjectType0.canBeCalled());
      assertEquals(false, noObjectType0.isUnionType());
      assertEquals(false, noObjectType0.isNominalType());
      assertEquals(false, noObjectType0.isCheckedUnknownType());
      assertEquals(false, noObjectType0.isNullType());
      assertEquals(false, noObjectType0.isParameterizedType());
      assertEquals(false, noObjectType0.isResolved());
      assertEquals(2147483647, noObjectType0.getMaxArguments());
      assertEquals(2147483647, noObjectType0.getPropertiesCount());
      assertEquals(false, noObjectType0.isEnumElementType());
      assertEquals(false, noObjectType0.isTemplateType());
      assertEquals(true, noObjectType0.hasInstanceType());
      assertEquals(0, noObjectType0.getExtendedInterfacesCount());
      assertEquals(false, noObjectType0.isStringValueType());
      assertEquals(false, noObjectType0.isFunctionType());
      assertEquals(false, noObjectType0.hasCachedValues());
      assertEquals(false, noObjectType0.isInterface());
      assertEquals(false, noObjectType0.isEnumType());
      assertEquals(false, noObjectType0.isReturnTypeInferred());
      assertEquals(true, noObjectType0.matchesStringContext());
      assertEquals(false, noObjectType0.isAllType());
      assertEquals(false, noObjectType0.isRecordType());
      assertEquals(false, noObjectType0.isBooleanValueType());
      assertEquals(true, noObjectType0.isNoObjectType());
      assertEquals(true, noObjectType0.matchesNumberContext());
      assertEquals(true, noObjectType0.isConstructor());
      assertEquals(false, noObjectType0.isNominalConstructor());
      assertEquals(true, noObjectType0.matchesObjectContext());
      assertEquals(false, noObjectType0.isNoType());
      assertNull(noObjectType0.getReferenceName());
      assertEquals(false, noObjectType0.isNumberValueType());
      assertEquals(false, noObjectType0.isFunctionPrototypeType());
      assertEquals(false, noObjectType0.isVoidType());
      assertEquals(false, noObjectType0.isOrdinaryFunction());
      assertEquals(false, noObjectType0.isNoResolvedType());
      assertEquals(BooleanLiteralSet.TRUE, noObjectType0.getPossibleToBooleanOutcomes());
      assertEquals("goog.global", closureCodingConvention0.getGlobalObject());
      assertEquals("goog.exportProperty", closureCodingConvention0.getExportPropertyFunction());
      assertEquals("goog.abstractMethod", closureCodingConvention0.getAbstractMethodName());
      assertEquals("goog.exportSymbol", closureCodingConvention0.getExportSymbolFunction());
      assertEquals(false, noObjectType1.isResolved());
      assertEquals(0, noObjectType1.getExtendedInterfacesCount());
      assertEquals(true, noObjectType1.isNoObjectType());
      assertEquals(true, noObjectType1.isConstructor());
      assertEquals(false, noObjectType1.isNullType());
      assertEquals(false, noObjectType1.isRecordType());
      assertEquals(false, noObjectType1.isNoResolvedType());
      assertEquals(false, noObjectType1.isFunctionType());
      assertEquals(true, noObjectType1.canBeCalled());
      assertEquals(false, noObjectType1.isBooleanValueType());
      assertEquals(false, noObjectType1.isInterface());
      assertEquals(false, noObjectType1.isCheckedUnknownType());
      assertEquals(false, noObjectType1.isFunctionPrototypeType());
      assertNull(noObjectType1.getReferenceName());
      assertEquals(false, noObjectType1.isEnumType());
      assertEquals(2147483647, noObjectType1.getMaxArguments());
      assertEquals(false, noObjectType1.isAllType());
      assertEquals(false, noObjectType1.isNumberValueType());
      assertEquals(true, noObjectType1.matchesObjectContext());
      assertEquals(false, noObjectType1.isReturnTypeInferred());
      assertEquals(false, noObjectType1.isNominalType());
      assertEquals(false, noObjectType1.isUnionType());
      assertEquals(true, noObjectType1.matchesStringContext());
      assertEquals(true, noObjectType1.hasInstanceType());
      assertEquals(false, noObjectType1.isStringValueType());
      assertEquals(false, noObjectType1.isVoidType());
      assertEquals(2147483647, noObjectType1.getPropertiesCount());
      assertEquals(false, noObjectType1.isTemplateType());
      assertEquals(false, noObjectType1.hasCachedValues());
      assertEquals(false, noObjectType1.isEnumElementType());
      assertEquals(false, noObjectType1.isNominalConstructor());
      assertEquals(false, noObjectType1.isParameterizedType());
      assertEquals(BooleanLiteralSet.TRUE, noObjectType1.getPossibleToBooleanOutcomes());
      assertEquals(true, noObjectType1.matchesNumberContext());
      assertEquals(false, noObjectType1.isNoType());
      assertEquals(false, noObjectType1.isOrdinaryFunction());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
  }

  @Test
  public void test41()  throws Throwable  {
      GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
      assertNotNull(googleCodingConvention0);
      
      ErrorReporter errorReporter0 = null;
      boolean boolean0 = true;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(errorReporter0, boolean0);
      assertNotNull(jSTypeRegistry0);
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter((CodingConvention) googleCodingConvention0, jSTypeRegistry0);
      assertNotNull(closureReverseAbstractInterpreter0);
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      JSTypeNative jSTypeNative0 = JSTypeNative.NUMBER_STRING_BOOLEAN;
      UnionType unionType0 = (UnionType)closureReverseAbstractInterpreter0.getNativeType(jSTypeNative0);
      assertNotNull(unionType0);
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isFunctionPrototypeType());
      assertEquals(false, unionType0.isEnumElementType());
      assertEquals(false, unionType0.isInterface());
      assertEquals(false, unionType0.isOrdinaryFunction());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isParameterizedType());
      assertEquals(false, unionType0.isEnumType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isConstructor());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isNominalConstructor());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isNoResolvedType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isCheckedUnknownType());
      assertEquals(false, unionType0.isNominalType());
      
      UnionType unionType1 = (UnionType)closureReverseAbstractInterpreter0.getRestrictedWithoutUndefined(unionType0);
      assertNotSame(unionType1, unionType0);
      assertNotSame(unionType0, unionType1);
      assertNotNull(unionType1);
      assertTrue(unionType1.equals((Object)unionType0));
      assertTrue(unionType0.equals((Object)unionType1));
      assertEquals(false, unionType1.isBooleanValueType());
      assertEquals(false, unionType1.isNullType());
      assertEquals(false, unionType1.isInterface());
      assertEquals(true, unionType1.isUnionType());
      assertEquals(false, unionType1.isNoType());
      assertEquals(false, unionType1.isNominalType());
      assertEquals(false, unionType1.isNoObjectType());
      assertEquals(false, unionType1.isEnumElementType());
      assertEquals(false, unionType1.isTemplateType());
      assertEquals(false, unionType1.isEnumType());
      assertEquals(false, unionType1.isNumberValueType());
      assertEquals(false, unionType1.isResolved());
      assertEquals(false, unionType1.isStringValueType());
      assertEquals(false, unionType1.isConstructor());
      assertEquals(false, unionType1.isFunctionType());
      assertEquals(false, unionType1.isRecordType());
      assertEquals(false, unionType1.isFunctionPrototypeType());
      assertEquals(false, unionType1.isParameterizedType());
      assertEquals(false, unionType1.isNoResolvedType());
      assertEquals(false, unionType1.isVoidType());
      assertEquals(false, unionType1.isNominalConstructor());
      assertEquals(false, unionType1.isOrdinaryFunction());
      assertEquals(false, unionType1.isCheckedUnknownType());
      assertEquals(false, unionType1.isAllType());
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isFunctionPrototypeType());
      assertEquals(false, unionType0.isEnumElementType());
      assertEquals(false, unionType0.isInterface());
      assertEquals(false, unionType0.isOrdinaryFunction());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isParameterizedType());
      assertEquals(false, unionType0.isEnumType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isConstructor());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isNominalConstructor());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isNoResolvedType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isCheckedUnknownType());
      assertEquals(false, unionType0.isNominalType());
  }

  @Test
  public void test42()  throws Throwable  {
      JqueryCodingConvention jqueryCodingConvention0 = new JqueryCodingConvention();
      assertNotNull(jqueryCodingConvention0);
      assertEquals("window", jqueryCodingConvention0.getGlobalObject());
      
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter((CodingConvention) jqueryCodingConvention0, jSTypeRegistry0);
      assertNotNull(closureReverseAbstractInterpreter0);
      assertEquals("window", jqueryCodingConvention0.getGlobalObject());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      ObjectType objectType0 = null;
      ParameterizedType parameterizedType0 = jSTypeRegistry0.createParameterizedType(objectType0, (JSType) objectType0);
      assertNotNull(parameterizedType0);
      assertEquals(false, parameterizedType0.isFunctionPrototypeType());
      assertEquals(false, parameterizedType0.isResolved());
      assertEquals(BooleanLiteralSet.TRUE, parameterizedType0.getPossibleToBooleanOutcomes());
      assertEquals(true, parameterizedType0.isParameterizedType());
      assertEquals(false, parameterizedType0.isVoidType());
      assertEquals(false, parameterizedType0.isBooleanValueType());
      assertEquals(false, parameterizedType0.isStringValueType());
      assertEquals(false, parameterizedType0.isNumberValueType());
      assertEquals(false, parameterizedType0.isNullType());
      assertEquals(false, parameterizedType0.hasCachedValues());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      ParameterizedType parameterizedType1 = (ParameterizedType)closureReverseAbstractInterpreter0.getRestrictedWithoutUndefined(parameterizedType0);
      assertSame(parameterizedType1, parameterizedType0);
      assertSame(parameterizedType0, parameterizedType1);
      assertNotNull(parameterizedType1);
      assertEquals(false, parameterizedType1.isFunctionPrototypeType());
      assertEquals(false, parameterizedType1.isStringValueType());
      assertEquals(true, parameterizedType1.isParameterizedType());
      assertEquals(false, parameterizedType1.isNullType());
      assertEquals(false, parameterizedType1.hasCachedValues());
      assertEquals(false, parameterizedType1.isVoidType());
      assertEquals(false, parameterizedType1.isNumberValueType());
      assertEquals(false, parameterizedType1.isResolved());
      assertEquals(false, parameterizedType1.isBooleanValueType());
      assertEquals(BooleanLiteralSet.TRUE, parameterizedType1.getPossibleToBooleanOutcomes());
      assertEquals(false, parameterizedType0.isFunctionPrototypeType());
      assertEquals(false, parameterizedType0.isResolved());
      assertEquals(BooleanLiteralSet.TRUE, parameterizedType0.getPossibleToBooleanOutcomes());
      assertEquals(true, parameterizedType0.isParameterizedType());
      assertEquals(false, parameterizedType0.isVoidType());
      assertEquals(false, parameterizedType0.isBooleanValueType());
      assertEquals(false, parameterizedType0.isStringValueType());
      assertEquals(false, parameterizedType0.isNumberValueType());
      assertEquals(false, parameterizedType0.isNullType());
      assertEquals(false, parameterizedType0.hasCachedValues());
      assertEquals("window", jqueryCodingConvention0.getGlobalObject());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
  }

  @Test
  public void test43()  throws Throwable  {
      JqueryCodingConvention jqueryCodingConvention0 = new JqueryCodingConvention();
      assertNotNull(jqueryCodingConvention0);
      assertEquals("window", jqueryCodingConvention0.getGlobalObject());
      
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      boolean boolean0 = false;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0, boolean0);
      assertNotNull(jSTypeRegistry0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter((CodingConvention) jqueryCodingConvention0, jSTypeRegistry0);
      assertNotNull(closureReverseAbstractInterpreter0);
      assertEquals("window", jqueryCodingConvention0.getGlobalObject());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      JSTypeNative jSTypeNative0 = JSTypeNative.GREATEST_FUNCTION_TYPE;
      FunctionType functionType0 = (FunctionType)closureReverseAbstractInterpreter0.getNativeType(jSTypeNative0);
      assertNotNull(functionType0);
      assertEquals(true, functionType0.isOrdinaryFunction());
      assertEquals(false, functionType0.isStringValueType());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertEquals(false, functionType0.isTemplateType());
      assertEquals(false, functionType0.isNumberValueType());
      assertEquals(false, functionType0.isConstructor());
      assertEquals(false, functionType0.isNullType());
      assertEquals(false, functionType0.isEnumType());
      assertEquals(false, functionType0.isInterface());
      assertEquals(false, functionType0.isCheckedUnknownType());
      assertEquals(false, functionType0.isResolved());
      assertEquals(false, functionType0.isVoidType());
      assertEquals(false, functionType0.isNominalConstructor());
      assertEquals(false, functionType0.isFunctionPrototypeType());
      assertEquals(false, functionType0.hasCachedValues());
      assertEquals(false, functionType0.isAllType());
      assertEquals(false, functionType0.isNoType());
      assertEquals(false, functionType0.isUnionType());
      assertEquals(false, functionType0.isNoResolvedType());
      assertEquals(true, functionType0.canBeCalled());
      assertEquals(false, functionType0.isEnumElementType());
      assertEquals(true, functionType0.isFunctionType());
      assertEquals(false, functionType0.isNominalType());
      assertEquals(2147483647, functionType0.getMaxArguments());
      assertEquals(false, functionType0.isRecordType());
      assertEquals(false, functionType0.isNoObjectType());
      assertEquals(false, functionType0.isReturnTypeInferred());
      assertEquals(false, functionType0.isBooleanValueType());
      assertEquals(false, functionType0.hasInstanceType());
      assertEquals(false, functionType0.isParameterizedType());
      assertEquals("window", jqueryCodingConvention0.getGlobalObject());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      FunctionType functionType1 = (FunctionType)closureReverseAbstractInterpreter0.getRestrictedWithoutUndefined(functionType0);
      assertSame(functionType0, functionType1);
      assertSame(functionType1, functionType0);
      assertNotNull(functionType1);
      assertEquals(true, functionType0.isOrdinaryFunction());
      assertEquals(false, functionType0.isStringValueType());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertEquals(false, functionType0.isTemplateType());
      assertEquals(false, functionType0.isNumberValueType());
      assertEquals(false, functionType0.isConstructor());
      assertEquals(false, functionType0.isNullType());
      assertEquals(false, functionType0.isEnumType());
      assertEquals(false, functionType0.isInterface());
      assertEquals(false, functionType0.isCheckedUnknownType());
      assertEquals(false, functionType0.isResolved());
      assertEquals(false, functionType0.isVoidType());
      assertEquals(false, functionType0.isNominalConstructor());
      assertEquals(false, functionType0.isFunctionPrototypeType());
      assertEquals(false, functionType0.hasCachedValues());
      assertEquals(false, functionType0.isAllType());
      assertEquals(false, functionType0.isNoType());
      assertEquals(false, functionType0.isUnionType());
      assertEquals(false, functionType0.isNoResolvedType());
      assertEquals(true, functionType0.canBeCalled());
      assertEquals(false, functionType0.isEnumElementType());
      assertEquals(true, functionType0.isFunctionType());
      assertEquals(false, functionType0.isNominalType());
      assertEquals(2147483647, functionType0.getMaxArguments());
      assertEquals(false, functionType0.isRecordType());
      assertEquals(false, functionType0.isNoObjectType());
      assertEquals(false, functionType0.isReturnTypeInferred());
      assertEquals(false, functionType0.isBooleanValueType());
      assertEquals(false, functionType0.hasInstanceType());
      assertEquals(false, functionType0.isParameterizedType());
      assertEquals("window", jqueryCodingConvention0.getGlobalObject());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(true, functionType1.isFunctionType());
      assertEquals(false, functionType1.isNominalType());
      assertEquals(false, functionType1.isNullType());
      assertEquals(false, functionType1.isEnumElementType());
      assertEquals(false, functionType1.isBooleanValueType());
      assertEquals(false, functionType1.isCheckedUnknownType());
      assertEquals(false, functionType1.isResolved());
      assertEquals(false, functionType1.isNoObjectType());
      assertEquals(false, functionType1.hasInstanceType());
      assertEquals(2147483647, functionType1.getMaxArguments());
      assertEquals(false, functionType1.isNoType());
      assertEquals(false, functionType1.isRecordType());
      assertEquals(false, functionType1.isFunctionPrototypeType());
      assertEquals(false, functionType1.isEnumType());
      assertEquals(false, functionType1.isTemplateType());
      assertEquals(true, functionType1.canBeCalled());
      assertEquals(false, functionType1.isAllType());
      assertEquals(true, functionType1.isOrdinaryFunction());
      assertEquals(false, functionType1.isUnionType());
      assertEquals(false, functionType1.isConstructor());
      assertEquals(false, functionType1.isNominalConstructor());
      assertEquals(false, functionType1.isNumberValueType());
      assertEquals(BooleanLiteralSet.TRUE, functionType1.getPossibleToBooleanOutcomes());
      assertEquals(0, functionType1.getExtendedInterfacesCount());
      assertEquals(false, functionType1.hasCachedValues());
      assertEquals(false, functionType1.isVoidType());
      assertEquals(false, functionType1.isInterface());
      assertEquals(false, functionType1.isReturnTypeInferred());
      assertEquals(false, functionType1.isNoResolvedType());
      assertEquals(false, functionType1.isStringValueType());
      assertEquals(false, functionType1.isParameterizedType());
  }

  @Test
  public void test44()  throws Throwable  {
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      assertNotNull(closureCodingConvention0);
      assertEquals("goog.exportSymbol", closureCodingConvention0.getExportSymbolFunction());
      assertEquals("goog.abstractMethod", closureCodingConvention0.getAbstractMethodName());
      assertEquals("goog.exportProperty", closureCodingConvention0.getExportPropertyFunction());
      assertEquals("goog.global", closureCodingConvention0.getGlobalObject());
      
      ErrorReporter errorReporter0 = null;
      boolean boolean0 = false;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(errorReporter0, boolean0);
      assertNotNull(jSTypeRegistry0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      String string0 = "j@\\uag\"Q# `Sb3";
      ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter((CodingConvention) closureCodingConvention0, jSTypeRegistry0);
      assertNotNull(closureReverseAbstractInterpreter0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals("goog.exportSymbol", closureCodingConvention0.getExportSymbolFunction());
      assertEquals("goog.abstractMethod", closureCodingConvention0.getAbstractMethodName());
      assertEquals("goog.exportProperty", closureCodingConvention0.getExportPropertyFunction());
      assertEquals("goog.global", closureCodingConvention0.getGlobalObject());
      
      SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter((CodingConvention) closureCodingConvention0, jSTypeRegistry0);
      assertNotNull(semanticReverseAbstractInterpreter0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals("goog.exportSymbol", closureCodingConvention0.getExportSymbolFunction());
      assertEquals("goog.abstractMethod", closureCodingConvention0.getAbstractMethodName());
      assertEquals("goog.exportProperty", closureCodingConvention0.getExportPropertyFunction());
      assertEquals("goog.global", closureCodingConvention0.getGlobalObject());
      
      JSTypeNative jSTypeNative0 = JSTypeNative.UNKNOWN_TYPE;
      UnknownType unknownType0 = (UnknownType)semanticReverseAbstractInterpreter0.getNativeType(jSTypeNative0);
      assertNotNull(unknownType0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals("goog.exportSymbol", closureCodingConvention0.getExportSymbolFunction());
      assertEquals("goog.abstractMethod", closureCodingConvention0.getAbstractMethodName());
      assertEquals("goog.exportProperty", closureCodingConvention0.getExportPropertyFunction());
      assertEquals("goog.global", closureCodingConvention0.getGlobalObject());
      assertEquals(false, unknownType0.isNativeObjectType());
      assertEquals(false, unknownType0.isAllType());
      assertEquals(false, unknownType0.isEnumElementType());
      assertEquals(false, unknownType0.isConstructor());
      assertEquals(false, unknownType0.isOrdinaryFunction());
      assertEquals(false, unknownType0.isNominalConstructor());
      assertEquals("?", unknownType0.getReferenceName());
      assertEquals(false, unknownType0.isNoResolvedType());
      assertEquals(true, unknownType0.matchesNumberContext());
      assertEquals(false, unknownType0.isNumberValueType());
      assertEquals(false, unknownType0.isVoidType());
      assertEquals(false, unknownType0.hasCachedValues());
      assertEquals(false, unknownType0.isCheckedUnknownType());
      assertEquals(false, unknownType0.isNominalType());
      assertEquals(false, unknownType0.isResolved());
      assertEquals(false, unknownType0.isFunctionPrototypeType());
      assertEquals(false, unknownType0.isRecordType());
      assertEquals(false, unknownType0.isNoType());
      assertEquals(true, unknownType0.matchesObjectContext());
      assertEquals(false, unknownType0.isNoObjectType());
      assertEquals(false, unknownType0.isStringValueType());
      assertEquals(false, unknownType0.isTemplateType());
      assertEquals(false, unknownType0.isFunctionType());
      assertEquals(2147483647, unknownType0.getPropertiesCount());
      assertEquals(BooleanLiteralSet.BOTH, unknownType0.getPossibleToBooleanOutcomes());
      assertEquals(true, unknownType0.isUnknownType());
      assertEquals(false, unknownType0.hasReferenceName());
      assertEquals(true, unknownType0.matchesStringContext());
      assertEquals(true, unknownType0.isNullable());
      assertEquals("Unknown", unknownType0.getDisplayName());
      assertEquals(false, unknownType0.isEnumType());
      assertEquals(true, unknownType0.hasDisplayName());
      assertEquals(false, unknownType0.isInterface());
      assertEquals(false, unknownType0.isParameterizedType());
      assertEquals(false, unknownType0.isNullType());
      assertEquals(false, unknownType0.isBooleanValueType());
      assertEquals(true, unknownType0.canBeCalled());
      assertEquals(false, unknownType0.isUnionType());
      
      UnknownType unknownType1 = (UnknownType)closureReverseAbstractInterpreter0.getRestrictedByTypeOfResult(unknownType0, string0, boolean0);
      assertSame(unknownType1, unknownType0);
      assertSame(unknownType0, unknownType1);
      assertNotNull(unknownType1);
      assertEquals(false, unknownType1.isAllType());
      assertEquals(false, unknownType1.isFunctionPrototypeType());
      assertEquals(false, unknownType1.hasCachedValues());
      assertEquals(false, unknownType1.isNativeObjectType());
      assertEquals(false, unknownType1.isNumberValueType());
      assertEquals(false, unknownType1.isNullType());
      assertEquals(false, unknownType1.isBooleanValueType());
      assertEquals(false, unknownType1.isNominalConstructor());
      assertEquals(false, unknownType1.isNominalType());
      assertEquals(false, unknownType1.isNoObjectType());
      assertEquals(false, unknownType1.isUnionType());
      assertEquals("Unknown", unknownType1.getDisplayName());
      assertEquals(false, unknownType1.isResolved());
      assertEquals(false, unknownType1.isEnumElementType());
      assertEquals(false, unknownType1.isTemplateType());
      assertEquals(false, unknownType1.isVoidType());
      assertEquals(true, unknownType1.matchesNumberContext());
      assertEquals(false, unknownType1.hasReferenceName());
      assertEquals(true, unknownType1.canBeCalled());
      assertEquals(false, unknownType1.isEnumType());
      assertEquals(false, unknownType1.isNoResolvedType());
      assertEquals(2147483647, unknownType1.getPropertiesCount());
      assertEquals("?", unknownType1.getReferenceName());
      assertEquals(false, unknownType1.isRecordType());
      assertEquals(false, unknownType1.isCheckedUnknownType());
      assertEquals(true, unknownType1.hasDisplayName());
      assertEquals(BooleanLiteralSet.BOTH, unknownType1.getPossibleToBooleanOutcomes());
      assertEquals(false, unknownType1.isParameterizedType());
      assertEquals(false, unknownType1.isInterface());
      assertEquals(false, unknownType1.isOrdinaryFunction());
      assertEquals(true, unknownType1.isNullable());
      assertEquals(false, unknownType1.isFunctionType());
      assertEquals(true, unknownType1.matchesObjectContext());
      assertEquals(false, unknownType1.isNoType());
      assertEquals(false, unknownType1.isConstructor());
      assertEquals(true, unknownType1.matchesStringContext());
      assertEquals(false, unknownType1.isStringValueType());
      assertEquals(true, unknownType1.isUnknownType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals("goog.exportSymbol", closureCodingConvention0.getExportSymbolFunction());
      assertEquals("goog.abstractMethod", closureCodingConvention0.getAbstractMethodName());
      assertEquals("goog.exportProperty", closureCodingConvention0.getExportPropertyFunction());
      assertEquals("goog.global", closureCodingConvention0.getGlobalObject());
      assertEquals(false, unknownType0.isNativeObjectType());
      assertEquals(false, unknownType0.isAllType());
      assertEquals(false, unknownType0.isEnumElementType());
      assertEquals(false, unknownType0.isConstructor());
      assertEquals(false, unknownType0.isOrdinaryFunction());
      assertEquals(false, unknownType0.isNominalConstructor());
      assertEquals("?", unknownType0.getReferenceName());
      assertEquals(false, unknownType0.isNoResolvedType());
      assertEquals(true, unknownType0.matchesNumberContext());
      assertEquals(false, unknownType0.isNumberValueType());
      assertEquals(false, unknownType0.isVoidType());
      assertEquals(false, unknownType0.hasCachedValues());
      assertEquals(false, unknownType0.isCheckedUnknownType());
      assertEquals(false, unknownType0.isNominalType());
      assertEquals(false, unknownType0.isResolved());
      assertEquals(false, unknownType0.isFunctionPrototypeType());
      assertEquals(false, unknownType0.isRecordType());
      assertEquals(false, unknownType0.isNoType());
      assertEquals(true, unknownType0.matchesObjectContext());
      assertEquals(false, unknownType0.isNoObjectType());
      assertEquals(false, unknownType0.isStringValueType());
      assertEquals(false, unknownType0.isTemplateType());
      assertEquals(false, unknownType0.isFunctionType());
      assertEquals(2147483647, unknownType0.getPropertiesCount());
      assertEquals(BooleanLiteralSet.BOTH, unknownType0.getPossibleToBooleanOutcomes());
      assertEquals(true, unknownType0.isUnknownType());
      assertEquals(false, unknownType0.hasReferenceName());
      assertEquals(true, unknownType0.matchesStringContext());
      assertEquals(true, unknownType0.isNullable());
      assertEquals("Unknown", unknownType0.getDisplayName());
      assertEquals(false, unknownType0.isEnumType());
      assertEquals(true, unknownType0.hasDisplayName());
      assertEquals(false, unknownType0.isInterface());
      assertEquals(false, unknownType0.isParameterizedType());
      assertEquals(false, unknownType0.isNullType());
      assertEquals(false, unknownType0.isBooleanValueType());
      assertEquals(true, unknownType0.canBeCalled());
      assertEquals(false, unknownType0.isUnionType());
  }

  @Test
  public void test45()  throws Throwable  {
      JqueryCodingConvention jqueryCodingConvention0 = new JqueryCodingConvention();
      assertNotNull(jqueryCodingConvention0);
      assertEquals("window", jqueryCodingConvention0.getGlobalObject());
      
      JSTypeRegistry jSTypeRegistry0 = null;
      ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter((CodingConvention) jqueryCodingConvention0, jSTypeRegistry0);
      assertNotNull(closureReverseAbstractInterpreter0);
      assertEquals("window", jqueryCodingConvention0.getGlobalObject());
      
      ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter1 = (ClosureReverseAbstractInterpreter)closureReverseAbstractInterpreter0.getFirst();
      assertSame(closureReverseAbstractInterpreter1, closureReverseAbstractInterpreter0);
      assertSame(closureReverseAbstractInterpreter0, closureReverseAbstractInterpreter1);
      assertNotNull(closureReverseAbstractInterpreter1);
      assertEquals("window", jqueryCodingConvention0.getGlobalObject());
  }
}
