/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 21:02:50 GMT 2014
 */

package com.google.javascript.jscomp;

import static org.junit.Assert.*; import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.junit.Test;
import com.google.javascript.jscomp.CodeChangeHandler;
import com.google.javascript.jscomp.Compiler;
import com.google.javascript.jscomp.CompilerInput;
import com.google.javascript.jscomp.CompilerOptions;
import com.google.javascript.jscomp.ControlFlowGraph;
import com.google.javascript.jscomp.CssRenamingMap;
import com.google.javascript.jscomp.DefaultPassConfig;
import com.google.javascript.jscomp.ErrorManager;
import com.google.javascript.jscomp.GlobalVarReferenceMap;
import com.google.javascript.jscomp.JSModule;
import com.google.javascript.jscomp.JSModuleGraph;
import com.google.javascript.jscomp.JSSourceFile;
import com.google.javascript.jscomp.LoggerErrorManager;
import com.google.javascript.jscomp.MemoizedScopeCreator;
import com.google.javascript.jscomp.PassConfig;
import com.google.javascript.jscomp.ReferenceCollectingCallback;
import com.google.javascript.jscomp.Region;
import com.google.javascript.jscomp.Result;
import com.google.javascript.jscomp.Scope;
import com.google.javascript.jscomp.SourceFile;
import com.google.javascript.jscomp.SourceMap;
import com.google.javascript.jscomp.SyntheticAst;
import com.google.javascript.jscomp.TypeInferencePass;
import com.google.javascript.jscomp.TypeValidator;
import com.google.javascript.jscomp.VariableMap;
import com.google.javascript.rhino.InputId;
import com.google.javascript.rhino.Node;
import java.io.File;
import java.io.OutputStream;
import java.io.PipedOutputStream;
import java.io.PrintStream;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;
import java.util.Vector;
import java.util.logging.Level;



import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.lang.MockIllegalStateException;
import org.evosuite.runtime.mock.java.lang.MockRuntimeException;
import org.junit.runner.RunWith;


public class CompilerEvoSuite_branch_Test  {

  @Test
  public void test00()  throws Throwable  {
      PrintStream printStream0 = null;
      Compiler compiler0 = new Compiler(printStream0);
      assertNotNull(compiler0);
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      
      double double0 = 2316.147;
      compiler0.setProgress(double0);
      assertEquals(1.0, compiler0.getProgress(), 0.01D);
  }

  @Test
  public void test01()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      assertNotNull(compiler0);
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      
      // Undeclared exception!
      try {
        CompilerInput compilerInput0 = compiler0.getSynthesizedExternsInput();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test02()  throws Throwable  {
      PrintStream printStream0 = null;
      Compiler compiler0 = new Compiler(printStream0);
      assertNotNull(compiler0);
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      
      LoggerErrorManager loggerErrorManager0 = (LoggerErrorManager)compiler0.getErrorManager();
      assertNotNull(loggerErrorManager0);
      assertEquals(0.0, loggerErrorManager0.getTypedPercent(), 0.01D);
      assertEquals(0, loggerErrorManager0.getWarningCount());
      assertEquals(0, loggerErrorManager0.getErrorCount());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(0, compiler0.getErrorCount());
      
      LoggerErrorManager loggerErrorManager1 = (LoggerErrorManager)compiler0.getErrorManager();
      assertNotNull(loggerErrorManager1);
      assertSame(loggerErrorManager1, loggerErrorManager0);
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(0, loggerErrorManager1.getWarningCount());
      assertEquals(0, loggerErrorManager1.getErrorCount());
      assertEquals(0.0, loggerErrorManager1.getTypedPercent(), 0.01D);
  }

  @Test
  public void test03()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      assertNotNull(compiler0);
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      
      String string0 = compiler0.getAstDotGraph();
      assertNotNull(string0);
      assertEquals("", string0);
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
  }

  @Test
  public void test04()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      assertNotNull(compiler0);
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      
      String string0 = "Exceeded max number of code motion~iterations: {0}";
      int int0 = 0;
      Region region0 = compiler0.getSourceRegion(string0, int0);
      assertNull(region0);
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
  }

  @Test
  public void test05()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      assertNotNull(compiler0);
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      
      String string0 = "base";
      Node node0 = compiler0.parseTestCode(string0);
      assertNotNull(node0);
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(true, node0.hasChildren());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isVar());
      assertEquals(0, node0.getCharno());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isNE());
      assertEquals("[testcode]", node0.getSourceFileName());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(4096, node0.getSourcePosition());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(1, node0.getChildCount());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isWhile());
      assertEquals(1, node0.getLineno());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isWith());
      assertEquals(132, node0.getType());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isString());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.isDo());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isTry());
      assertEquals(true, node0.isSyntheticBlock());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isTrue());
      assertEquals(true, node0.hasOneChild());
      assertEquals(true, node0.isScript());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(false, compiler0.hasErrors());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(0, compiler0.getWarningCount());
      
      // Undeclared exception!
      try {
        compiler0.check();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // INTERNAL COMPILER ERROR.
         // Please report this problem.
         // null
         //
      }
  }

  @Test
  public void test06()  throws Throwable  {
      PrintStream printStream0 = null;
      Compiler compiler0 = new Compiler(printStream0);
      assertNotNull(compiler0);
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      
      LoggerErrorManager loggerErrorManager0 = (LoggerErrorManager)compiler0.getErrorManager();
      assertNotNull(loggerErrorManager0);
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(0, loggerErrorManager0.getWarningCount());
      assertEquals(0.0, loggerErrorManager0.getTypedPercent(), 0.01D);
      assertEquals(0, loggerErrorManager0.getErrorCount());
      
      boolean boolean0 = compiler0.acceptEcmaScript5();
      assertFalse(boolean0);
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(0, compiler0.getErrorCount());
  }

  @Test
  public void test07()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      assertNotNull(compiler0);
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      
      String string0 = "base";
      Node node0 = compiler0.parseTestCode(string0);
      assertNotNull(node0);
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isCall());
      assertEquals(132, node0.getType());
      assertEquals(false, node0.isArrayLit());
      assertEquals(true, node0.hasOneChild());
      assertEquals(false, node0.isIn());
      assertEquals(true, node0.hasChildren());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(1, node0.getChildCount());
      assertEquals(true, node0.isScript());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isAnd());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(0, node0.getCharno());
      assertEquals(true, node0.isSyntheticBlock());
      assertEquals(1, node0.getLineno());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isString());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isParamList());
      assertEquals(4096, node0.getSourcePosition());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals("[testcode]", node0.getSourceFileName());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isNew());
      
      boolean boolean0 = compiler0.isInliningForbidden();
      assertFalse(boolean0);
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(0, compiler0.getWarningCount());
  }

  @Test
  public void test08()  throws Throwable  {
      String string0 = "AVqj0vTkcc#Jg`FhOc";
      Compiler.CodeBuilder compiler_CodeBuilder0 = new Compiler.CodeBuilder();
      assertNotNull(compiler_CodeBuilder0);
      
      String string1 = "com.google.protobuf.TextFormat$InvalidEscapeSequenceException";
      assertNotSame(string1, string0);
      
      Compiler.CodeBuilder compiler_CodeBuilder1 = compiler_CodeBuilder0.append(string1);
      assertNotNull(compiler_CodeBuilder1);
      assertFalse(string1.equals((Object)string0));
      assertSame(compiler_CodeBuilder1, compiler_CodeBuilder0);
      assertNotSame(string1, string0);
      assertSame(compiler_CodeBuilder0, compiler_CodeBuilder1);
      
      boolean boolean0 = compiler_CodeBuilder1.endsWith(string0);
      assertFalse(boolean0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotSame(string0, string1);
      assertSame(compiler_CodeBuilder1, compiler_CodeBuilder0);
      assertNotSame(string1, string0);
      assertSame(compiler_CodeBuilder0, compiler_CodeBuilder1);
  }

  @Test
  public void test09()  throws Throwable  {
      Compiler.CodeBuilder compiler_CodeBuilder0 = new Compiler.CodeBuilder();
      assertNotNull(compiler_CodeBuilder0);
      
      String string0 = "aTts";
      boolean boolean0 = compiler_CodeBuilder0.endsWith(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test10()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      assertNotNull(compiler0);
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      
      ArrayList<SourceFile> arrayList0 = new ArrayList<SourceFile>();
      assertNotNull(arrayList0);
      assertEquals("[]", arrayList0.toString());
      assertEquals(0, arrayList0.size());
      assertEquals(true, arrayList0.isEmpty());
      
      CompilerOptions compilerOptions0 = new CompilerOptions();
      assertNotNull(compilerOptions0);
      assertFalse(compilerOptions0.collapseProperties);
      assertFalse(compilerOptions0.aliasAllStrings);
      assertFalse(compilerOptions0.foldConstants);
      assertFalse(compilerOptions0.markNoSideEffectCalls);
      assertFalse(compilerOptions0.aliasKeywords);
      assertFalse(compilerOptions0.crossModuleMethodMotion);
      assertFalse(compilerOptions0.gatherCssNames);
      assertFalse(compilerOptions0.jqueryPass);
      assertFalse(compilerOptions0.crossModuleCodeMotion);
      assertFalse(compilerOptions0.disambiguateProperties);
      assertFalse(compilerOptions0.markAsCompiled);
      assertFalse(compilerOptions0.deadAssignmentElimination);
      assertFalse(compilerOptions0.preferLineBreakAtEndOfFile);
      assertFalse(compilerOptions0.inlineFunctions);
      assertFalse(compilerOptions0.checkSuspiciousCode);
      assertFalse(compilerOptions0.printInputDelimiter);
      assertFalse(compilerOptions0.prettyPrint);
      assertFalse(compilerOptions0.recordFunctionInformation);
      assertFalse(compilerOptions0.closurePass);
      assertFalse(compilerOptions0.ideMode);
      assertFalse(compilerOptions0.generateExports);
      assertFalse(compilerOptions0.computeFunctionSideEffects);
      assertFalse(compilerOptions0.inlineLocalFunctions);
      assertFalse(compilerOptions0.optimizeCalls);
      assertFalse(compilerOptions0.removeTryCatchFinally);
      assertFalse(compilerOptions0.optimizeArgumentsArray);
      assertFalse(compilerOptions0.inlineGetters);
      assertFalse(compilerOptions0.inlineVariables);
      assertFalse(compilerOptions0.checkControlStructures);
      assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
      assertFalse(compilerOptions0.removeDeadCode);
      assertFalse(compilerOptions0.ambiguateProperties);
      assertFalse(compilerOptions0.moveFunctionDeclarations);
      assertFalse(compilerOptions0.optimizeReturns);
      assertFalse(compilerOptions0.labelRenaming);
      assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
      assertFalse(compilerOptions0.smartNameRemoval);
      assertFalse(compilerOptions0.collapseAnonymousFunctions);
      assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
      assertFalse(compilerOptions0.convertToDottedProperties);
      assertFalse(compilerOptions0.aliasExternals);
      assertFalse(compilerOptions0.lineBreak);
      assertFalse(compilerOptions0.reserveRawExports);
      assertFalse(compilerOptions0.exportTestFunctions);
      assertFalse(compilerOptions0.coalesceVariableNames);
      assertFalse(compilerOptions0.flowSensitiveInlineVariables);
      assertFalse(compilerOptions0.removeUnusedVars);
      assertFalse(compilerOptions0.generatePseudoNames);
      assertFalse(compilerOptions0.inlineConstantVars);
      assertFalse(compilerOptions0.devirtualizePrototypeMethods);
      assertFalse(compilerOptions0.checkSymbols);
      assertFalse(compilerOptions0.removeUnusedLocalVars);
      assertFalse(compilerOptions0.collapseVariableDeclarations);
      assertFalse(compilerOptions0.checkTypes);
      assertFalse(compilerOptions0.optimizeParameters);
      assertFalse(compilerOptions0.rewriteFunctionExpressions);
      assertEquals(CompilerOptions.TracerMode.OFF, compilerOptions0.getTracerMode());
      assertEquals(CompilerOptions.TweakProcessing.OFF, compilerOptions0.getTweakProcessing());
      assertEquals(false, compilerOptions0.assumeClosuresOnlyCaptureReferences());
      assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
      assertEquals(false, compilerOptions0.isExternExportsEnabled());
      assertNull(compilerOptions0.getLanguageOut());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compilerOptions0.getLanguageIn());
      assertEquals(false, compilerOptions0.getInferTypes());
      assertEquals(false, compilerOptions0.assumeStrictThis());
      
      compiler0.init((List<SourceFile>) arrayList0, (List<SourceFile>) arrayList0, compilerOptions0);
      assertFalse(compilerOptions0.collapseProperties);
      assertFalse(compilerOptions0.aliasAllStrings);
      assertFalse(compilerOptions0.foldConstants);
      assertFalse(compilerOptions0.markNoSideEffectCalls);
      assertFalse(compilerOptions0.aliasKeywords);
      assertFalse(compilerOptions0.crossModuleMethodMotion);
      assertFalse(compilerOptions0.gatherCssNames);
      assertFalse(compilerOptions0.jqueryPass);
      assertFalse(compilerOptions0.crossModuleCodeMotion);
      assertFalse(compilerOptions0.disambiguateProperties);
      assertFalse(compilerOptions0.markAsCompiled);
      assertFalse(compilerOptions0.deadAssignmentElimination);
      assertFalse(compilerOptions0.preferLineBreakAtEndOfFile);
      assertFalse(compilerOptions0.inlineFunctions);
      assertFalse(compilerOptions0.checkSuspiciousCode);
      assertFalse(compilerOptions0.printInputDelimiter);
      assertFalse(compilerOptions0.prettyPrint);
      assertFalse(compilerOptions0.recordFunctionInformation);
      assertFalse(compilerOptions0.closurePass);
      assertFalse(compilerOptions0.ideMode);
      assertFalse(compilerOptions0.generateExports);
      assertFalse(compilerOptions0.computeFunctionSideEffects);
      assertFalse(compilerOptions0.inlineLocalFunctions);
      assertFalse(compilerOptions0.optimizeCalls);
      assertFalse(compilerOptions0.removeTryCatchFinally);
      assertFalse(compilerOptions0.optimizeArgumentsArray);
      assertFalse(compilerOptions0.inlineGetters);
      assertFalse(compilerOptions0.inlineVariables);
      assertFalse(compilerOptions0.checkControlStructures);
      assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
      assertFalse(compilerOptions0.removeDeadCode);
      assertFalse(compilerOptions0.ambiguateProperties);
      assertFalse(compilerOptions0.moveFunctionDeclarations);
      assertFalse(compilerOptions0.optimizeReturns);
      assertFalse(compilerOptions0.labelRenaming);
      assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
      assertFalse(compilerOptions0.smartNameRemoval);
      assertFalse(compilerOptions0.collapseAnonymousFunctions);
      assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
      assertFalse(compilerOptions0.convertToDottedProperties);
      assertFalse(compilerOptions0.aliasExternals);
      assertFalse(compilerOptions0.lineBreak);
      assertFalse(compilerOptions0.reserveRawExports);
      assertFalse(compilerOptions0.exportTestFunctions);
      assertFalse(compilerOptions0.coalesceVariableNames);
      assertFalse(compilerOptions0.flowSensitiveInlineVariables);
      assertFalse(compilerOptions0.removeUnusedVars);
      assertFalse(compilerOptions0.generatePseudoNames);
      assertFalse(compilerOptions0.inlineConstantVars);
      assertFalse(compilerOptions0.devirtualizePrototypeMethods);
      assertFalse(compilerOptions0.checkSymbols);
      assertFalse(compilerOptions0.removeUnusedLocalVars);
      assertFalse(compilerOptions0.collapseVariableDeclarations);
      assertFalse(compilerOptions0.checkTypes);
      assertFalse(compilerOptions0.optimizeParameters);
      assertFalse(compilerOptions0.rewriteFunctionExpressions);
      assertEquals("[]", arrayList0.toString());
      assertEquals(0, arrayList0.size());
      assertEquals(true, arrayList0.isEmpty());
      assertEquals(CompilerOptions.TracerMode.OFF, compilerOptions0.getTracerMode());
      assertEquals(CompilerOptions.TweakProcessing.OFF, compilerOptions0.getTweakProcessing());
      assertEquals(false, compilerOptions0.assumeClosuresOnlyCaptureReferences());
      assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
      assertEquals(false, compilerOptions0.isExternExportsEnabled());
      assertNull(compilerOptions0.getLanguageOut());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compilerOptions0.getLanguageIn());
      assertEquals(false, compilerOptions0.getInferTypes());
      assertEquals(false, compilerOptions0.assumeStrictThis());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.acceptConstKeyword());
      
      compiler0.processAMDAndCommonJSModules();
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.acceptConstKeyword());
  }

  @Test
  public void test11()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      assertNotNull(compiler0);
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      
      // Undeclared exception!
      try {
        TypeValidator typeValidator0 = compiler0.getTypeValidator();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test12()  throws Throwable  {
      PrintStream printStream0 = null;
      Compiler compiler0 = new Compiler(printStream0);
      assertNotNull(compiler0);
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      
      LoggerErrorManager loggerErrorManager0 = (LoggerErrorManager)compiler0.getErrorManager();
      assertNotNull(loggerErrorManager0);
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(0, loggerErrorManager0.getErrorCount());
      assertEquals(0, loggerErrorManager0.getWarningCount());
      assertEquals(0.0, loggerErrorManager0.getTypedPercent(), 0.01D);
      
      DefaultPassConfig defaultPassConfig0 = compiler0.ensureDefaultPassConfig();
      assertNotNull(defaultPassConfig0);
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(false, compiler0.acceptConstKeyword());
      
      TypeInferencePass typeInferencePass0 = defaultPassConfig0.makeTypeInference(compiler0);
      assertNotNull(typeInferencePass0);
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(false, compiler0.acceptConstKeyword());
      
      TypeInferencePass typeInferencePass1 = defaultPassConfig0.makeTypeInference(compiler0);
      assertNotNull(typeInferencePass1);
      assertFalse(typeInferencePass1.equals((Object)typeInferencePass0));
      assertNotSame(typeInferencePass1, typeInferencePass0);
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(false, compiler0.acceptConstKeyword());
  }

  @Test
  public void test13()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      assertNotNull(compiler0);
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      
      // Undeclared exception!
      try {
        JSModuleGraph jSModuleGraph0 = compiler0.getDegenerateModuleGraph();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test14()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      assertNotNull(compiler0);
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      
      compiler0.reportCodeChange();
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      
      // Undeclared exception!
      try {
        ControlFlowGraph<Node> controlFlowGraph0 = compiler0.computeCFG();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test15()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      assertNotNull(compiler0);
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      
      // Undeclared exception!
      try {
        compiler0.endPass();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Tracer should not be null at the end of a pass.
         //
      }
  }

  @Test
  public void test16()  throws Throwable  {
      String string0 = "\"-P087`SyRl";
      MockPrintStream mockPrintStream0 = new MockPrintStream(string0);
      assertNotNull(mockPrintStream0);
      
      Compiler compiler0 = new Compiler((PrintStream) mockPrintStream0);
      assertNotNull(compiler0);
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      
      CompilerOptions compilerOptions0 = compiler0.newCompilerOptions();
      assertNotNull(compilerOptions0);
      assertFalse(compilerOptions0.removeUnusedLocalVars);
      assertFalse(compilerOptions0.preferLineBreakAtEndOfFile);
      assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
      assertFalse(compilerOptions0.deadAssignmentElimination);
      assertFalse(compilerOptions0.computeFunctionSideEffects);
      assertFalse(compilerOptions0.closurePass);
      assertFalse(compilerOptions0.inlineGetters);
      assertFalse(compilerOptions0.recordFunctionInformation);
      assertFalse(compilerOptions0.checkTypes);
      assertFalse(compilerOptions0.disambiguateProperties);
      assertFalse(compilerOptions0.checkSuspiciousCode);
      assertFalse(compilerOptions0.convertToDottedProperties);
      assertFalse(compilerOptions0.removeTryCatchFinally);
      assertFalse(compilerOptions0.generateExports);
      assertFalse(compilerOptions0.inlineConstantVars);
      assertFalse(compilerOptions0.checkSymbols);
      assertFalse(compilerOptions0.markNoSideEffectCalls);
      assertFalse(compilerOptions0.moveFunctionDeclarations);
      assertFalse(compilerOptions0.collapseAnonymousFunctions);
      assertFalse(compilerOptions0.generatePseudoNames);
      assertFalse(compilerOptions0.labelRenaming);
      assertFalse(compilerOptions0.collapseVariableDeclarations);
      assertFalse(compilerOptions0.foldConstants);
      assertFalse(compilerOptions0.ambiguateProperties);
      assertFalse(compilerOptions0.removeUnusedVars);
      assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
      assertFalse(compilerOptions0.lineBreak);
      assertFalse(compilerOptions0.jqueryPass);
      assertFalse(compilerOptions0.printInputDelimiter);
      assertFalse(compilerOptions0.exportTestFunctions);
      assertFalse(compilerOptions0.reserveRawExports);
      assertFalse(compilerOptions0.optimizeReturns);
      assertFalse(compilerOptions0.removeDeadCode);
      assertFalse(compilerOptions0.rewriteFunctionExpressions);
      assertFalse(compilerOptions0.crossModuleMethodMotion);
      assertFalse(compilerOptions0.devirtualizePrototypeMethods);
      assertFalse(compilerOptions0.inlineVariables);
      assertFalse(compilerOptions0.gatherCssNames);
      assertFalse(compilerOptions0.ideMode);
      assertFalse(compilerOptions0.prettyPrint);
      assertFalse(compilerOptions0.inlineFunctions);
      assertFalse(compilerOptions0.optimizeParameters);
      assertFalse(compilerOptions0.checkControlStructures);
      assertFalse(compilerOptions0.collapseProperties);
      assertFalse(compilerOptions0.inlineLocalFunctions);
      assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
      assertFalse(compilerOptions0.flowSensitiveInlineVariables);
      assertFalse(compilerOptions0.smartNameRemoval);
      assertFalse(compilerOptions0.crossModuleCodeMotion);
      assertFalse(compilerOptions0.coalesceVariableNames);
      assertFalse(compilerOptions0.aliasKeywords);
      assertFalse(compilerOptions0.optimizeArgumentsArray);
      assertFalse(compilerOptions0.aliasAllStrings);
      assertFalse(compilerOptions0.aliasExternals);
      assertFalse(compilerOptions0.optimizeCalls);
      assertFalse(compilerOptions0.markAsCompiled);
      assertNull(compilerOptions0.getLanguageOut());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compilerOptions0.getLanguageIn());
      assertEquals(false, compilerOptions0.isExternExportsEnabled());
      assertEquals(false, compilerOptions0.getInferTypes());
      assertEquals(false, compilerOptions0.assumeStrictThis());
      assertEquals(CompilerOptions.TracerMode.OFF, compilerOptions0.getTracerMode());
      assertEquals(CompilerOptions.TweakProcessing.OFF, compilerOptions0.getTweakProcessing());
      assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
      assertEquals(false, compilerOptions0.assumeClosuresOnlyCaptureReferences());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      
      DefaultPassConfig defaultPassConfig0 = new DefaultPassConfig(compilerOptions0);
      assertNotNull(defaultPassConfig0);
      assertFalse(compilerOptions0.removeUnusedLocalVars);
      assertFalse(compilerOptions0.preferLineBreakAtEndOfFile);
      assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
      assertFalse(compilerOptions0.deadAssignmentElimination);
      assertFalse(compilerOptions0.computeFunctionSideEffects);
      assertFalse(compilerOptions0.closurePass);
      assertFalse(compilerOptions0.inlineGetters);
      assertFalse(compilerOptions0.recordFunctionInformation);
      assertFalse(compilerOptions0.checkTypes);
      assertFalse(compilerOptions0.disambiguateProperties);
      assertFalse(compilerOptions0.checkSuspiciousCode);
      assertFalse(compilerOptions0.convertToDottedProperties);
      assertFalse(compilerOptions0.removeTryCatchFinally);
      assertFalse(compilerOptions0.generateExports);
      assertFalse(compilerOptions0.inlineConstantVars);
      assertFalse(compilerOptions0.checkSymbols);
      assertFalse(compilerOptions0.markNoSideEffectCalls);
      assertFalse(compilerOptions0.moveFunctionDeclarations);
      assertFalse(compilerOptions0.collapseAnonymousFunctions);
      assertFalse(compilerOptions0.generatePseudoNames);
      assertFalse(compilerOptions0.labelRenaming);
      assertFalse(compilerOptions0.collapseVariableDeclarations);
      assertFalse(compilerOptions0.foldConstants);
      assertFalse(compilerOptions0.ambiguateProperties);
      assertFalse(compilerOptions0.removeUnusedVars);
      assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
      assertFalse(compilerOptions0.lineBreak);
      assertFalse(compilerOptions0.jqueryPass);
      assertFalse(compilerOptions0.printInputDelimiter);
      assertFalse(compilerOptions0.exportTestFunctions);
      assertFalse(compilerOptions0.reserveRawExports);
      assertFalse(compilerOptions0.optimizeReturns);
      assertFalse(compilerOptions0.removeDeadCode);
      assertFalse(compilerOptions0.rewriteFunctionExpressions);
      assertFalse(compilerOptions0.crossModuleMethodMotion);
      assertFalse(compilerOptions0.devirtualizePrototypeMethods);
      assertFalse(compilerOptions0.inlineVariables);
      assertFalse(compilerOptions0.gatherCssNames);
      assertFalse(compilerOptions0.ideMode);
      assertFalse(compilerOptions0.prettyPrint);
      assertFalse(compilerOptions0.inlineFunctions);
      assertFalse(compilerOptions0.optimizeParameters);
      assertFalse(compilerOptions0.checkControlStructures);
      assertFalse(compilerOptions0.collapseProperties);
      assertFalse(compilerOptions0.inlineLocalFunctions);
      assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
      assertFalse(compilerOptions0.flowSensitiveInlineVariables);
      assertFalse(compilerOptions0.smartNameRemoval);
      assertFalse(compilerOptions0.crossModuleCodeMotion);
      assertFalse(compilerOptions0.coalesceVariableNames);
      assertFalse(compilerOptions0.aliasKeywords);
      assertFalse(compilerOptions0.optimizeArgumentsArray);
      assertFalse(compilerOptions0.aliasAllStrings);
      assertFalse(compilerOptions0.aliasExternals);
      assertFalse(compilerOptions0.optimizeCalls);
      assertFalse(compilerOptions0.markAsCompiled);
      assertNull(compilerOptions0.getLanguageOut());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compilerOptions0.getLanguageIn());
      assertEquals(false, compilerOptions0.isExternExportsEnabled());
      assertEquals(false, compilerOptions0.getInferTypes());
      assertEquals(false, compilerOptions0.assumeStrictThis());
      assertEquals(CompilerOptions.TracerMode.OFF, compilerOptions0.getTracerMode());
      assertEquals(CompilerOptions.TweakProcessing.OFF, compilerOptions0.getTweakProcessing());
      assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
      assertEquals(false, compilerOptions0.assumeClosuresOnlyCaptureReferences());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      
      compiler0.setPassConfig((PassConfig) defaultPassConfig0);
      assertFalse(compilerOptions0.removeUnusedLocalVars);
      assertFalse(compilerOptions0.preferLineBreakAtEndOfFile);
      assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
      assertFalse(compilerOptions0.deadAssignmentElimination);
      assertFalse(compilerOptions0.computeFunctionSideEffects);
      assertFalse(compilerOptions0.closurePass);
      assertFalse(compilerOptions0.inlineGetters);
      assertFalse(compilerOptions0.recordFunctionInformation);
      assertFalse(compilerOptions0.checkTypes);
      assertFalse(compilerOptions0.disambiguateProperties);
      assertFalse(compilerOptions0.checkSuspiciousCode);
      assertFalse(compilerOptions0.convertToDottedProperties);
      assertFalse(compilerOptions0.removeTryCatchFinally);
      assertFalse(compilerOptions0.generateExports);
      assertFalse(compilerOptions0.inlineConstantVars);
      assertFalse(compilerOptions0.checkSymbols);
      assertFalse(compilerOptions0.markNoSideEffectCalls);
      assertFalse(compilerOptions0.moveFunctionDeclarations);
      assertFalse(compilerOptions0.collapseAnonymousFunctions);
      assertFalse(compilerOptions0.generatePseudoNames);
      assertFalse(compilerOptions0.labelRenaming);
      assertFalse(compilerOptions0.collapseVariableDeclarations);
      assertFalse(compilerOptions0.foldConstants);
      assertFalse(compilerOptions0.ambiguateProperties);
      assertFalse(compilerOptions0.removeUnusedVars);
      assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
      assertFalse(compilerOptions0.lineBreak);
      assertFalse(compilerOptions0.jqueryPass);
      assertFalse(compilerOptions0.printInputDelimiter);
      assertFalse(compilerOptions0.exportTestFunctions);
      assertFalse(compilerOptions0.reserveRawExports);
      assertFalse(compilerOptions0.optimizeReturns);
      assertFalse(compilerOptions0.removeDeadCode);
      assertFalse(compilerOptions0.rewriteFunctionExpressions);
      assertFalse(compilerOptions0.crossModuleMethodMotion);
      assertFalse(compilerOptions0.devirtualizePrototypeMethods);
      assertFalse(compilerOptions0.inlineVariables);
      assertFalse(compilerOptions0.gatherCssNames);
      assertFalse(compilerOptions0.ideMode);
      assertFalse(compilerOptions0.prettyPrint);
      assertFalse(compilerOptions0.inlineFunctions);
      assertFalse(compilerOptions0.optimizeParameters);
      assertFalse(compilerOptions0.checkControlStructures);
      assertFalse(compilerOptions0.collapseProperties);
      assertFalse(compilerOptions0.inlineLocalFunctions);
      assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
      assertFalse(compilerOptions0.flowSensitiveInlineVariables);
      assertFalse(compilerOptions0.smartNameRemoval);
      assertFalse(compilerOptions0.crossModuleCodeMotion);
      assertFalse(compilerOptions0.coalesceVariableNames);
      assertFalse(compilerOptions0.aliasKeywords);
      assertFalse(compilerOptions0.optimizeArgumentsArray);
      assertFalse(compilerOptions0.aliasAllStrings);
      assertFalse(compilerOptions0.aliasExternals);
      assertFalse(compilerOptions0.optimizeCalls);
      assertFalse(compilerOptions0.markAsCompiled);
      assertNull(compilerOptions0.getLanguageOut());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compilerOptions0.getLanguageIn());
      assertEquals(false, compilerOptions0.isExternExportsEnabled());
      assertEquals(false, compilerOptions0.getInferTypes());
      assertEquals(false, compilerOptions0.assumeStrictThis());
      assertEquals(CompilerOptions.TracerMode.OFF, compilerOptions0.getTracerMode());
      assertEquals(CompilerOptions.TweakProcessing.OFF, compilerOptions0.getTweakProcessing());
      assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
      assertEquals(false, compilerOptions0.assumeClosuresOnlyCaptureReferences());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
  }

  @Test
  public void test17()  throws Throwable  {
      PrintStream printStream0 = null;
      Compiler compiler0 = new Compiler(printStream0);
      assertNotNull(compiler0);
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      
      DefaultPassConfig defaultPassConfig0 = compiler0.ensureDefaultPassConfig();
      assertNotNull(defaultPassConfig0);
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      
      compiler0.disableThreads();
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      
      Vector<SourceFile> vector0 = new Vector<SourceFile>();
      assertNotNull(vector0);
      assertEquals(true, vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      
      CompilerOptions compilerOptions0 = new CompilerOptions();
      assertNotNull(compilerOptions0);
      assertFalse(compilerOptions0.generatePseudoNames);
      assertFalse(compilerOptions0.markNoSideEffectCalls);
      assertFalse(compilerOptions0.ambiguateProperties);
      assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
      assertFalse(compilerOptions0.printInputDelimiter);
      assertFalse(compilerOptions0.closurePass);
      assertFalse(compilerOptions0.optimizeCalls);
      assertFalse(compilerOptions0.checkTypes);
      assertFalse(compilerOptions0.rewriteFunctionExpressions);
      assertFalse(compilerOptions0.aliasKeywords);
      assertFalse(compilerOptions0.markAsCompiled);
      assertFalse(compilerOptions0.aliasAllStrings);
      assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
      assertFalse(compilerOptions0.removeUnusedVars);
      assertFalse(compilerOptions0.checkSymbols);
      assertFalse(compilerOptions0.ideMode);
      assertFalse(compilerOptions0.preferLineBreakAtEndOfFile);
      assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
      assertFalse(compilerOptions0.foldConstants);
      assertFalse(compilerOptions0.generateExports);
      assertFalse(compilerOptions0.gatherCssNames);
      assertFalse(compilerOptions0.moveFunctionDeclarations);
      assertFalse(compilerOptions0.optimizeArgumentsArray);
      assertFalse(compilerOptions0.flowSensitiveInlineVariables);
      assertFalse(compilerOptions0.collapseAnonymousFunctions);
      assertFalse(compilerOptions0.checkControlStructures);
      assertFalse(compilerOptions0.checkSuspiciousCode);
      assertFalse(compilerOptions0.convertToDottedProperties);
      assertFalse(compilerOptions0.deadAssignmentElimination);
      assertFalse(compilerOptions0.coalesceVariableNames);
      assertFalse(compilerOptions0.optimizeParameters);
      assertFalse(compilerOptions0.smartNameRemoval);
      assertFalse(compilerOptions0.removeTryCatchFinally);
      assertFalse(compilerOptions0.collapseProperties);
      assertFalse(compilerOptions0.aliasExternals);
      assertFalse(compilerOptions0.optimizeReturns);
      assertFalse(compilerOptions0.jqueryPass);
      assertFalse(compilerOptions0.inlineVariables);
      assertFalse(compilerOptions0.recordFunctionInformation);
      assertFalse(compilerOptions0.prettyPrint);
      assertFalse(compilerOptions0.reserveRawExports);
      assertFalse(compilerOptions0.inlineConstantVars);
      assertFalse(compilerOptions0.devirtualizePrototypeMethods);
      assertFalse(compilerOptions0.computeFunctionSideEffects);
      assertFalse(compilerOptions0.removeUnusedLocalVars);
      assertFalse(compilerOptions0.disambiguateProperties);
      assertFalse(compilerOptions0.crossModuleCodeMotion);
      assertFalse(compilerOptions0.crossModuleMethodMotion);
      assertFalse(compilerOptions0.labelRenaming);
      assertFalse(compilerOptions0.inlineLocalFunctions);
      assertFalse(compilerOptions0.inlineFunctions);
      assertFalse(compilerOptions0.inlineGetters);
      assertFalse(compilerOptions0.removeDeadCode);
      assertFalse(compilerOptions0.exportTestFunctions);
      assertFalse(compilerOptions0.collapseVariableDeclarations);
      assertFalse(compilerOptions0.lineBreak);
      assertEquals(CompilerOptions.TracerMode.OFF, compilerOptions0.getTracerMode());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compilerOptions0.getLanguageIn());
      assertEquals(false, compilerOptions0.assumeClosuresOnlyCaptureReferences());
      assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
      assertEquals(false, compilerOptions0.getInferTypes());
      assertEquals(CompilerOptions.TweakProcessing.OFF, compilerOptions0.getTweakProcessing());
      assertEquals(false, compilerOptions0.isExternExportsEnabled());
      assertEquals(false, compilerOptions0.assumeStrictThis());
      assertNull(compilerOptions0.getLanguageOut());
      
      // Undeclared exception!
      try {
        Result result0 = compiler0.compile((List<SourceFile>) vector0, (List<SourceFile>) vector0, compilerOptions0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.lang.NullPointerException
         //
      }
  }

  @Test
  public void test18()  throws Throwable  {
      String string0 = "this.passes has already been assigned";
      PrintStream printStream0 = null;
      Compiler compiler0 = new Compiler(printStream0);
      assertNotNull(compiler0);
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      
      Node node0 = compiler0.parseTestCode(string0);
      assertNotNull(node0);
      assertEquals(true, compiler0.hasErrors());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(1, compiler0.getErrorCount());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isCase());
      assertEquals(true, node0.isScript());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isQuotedString());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.isName());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isDo());
      assertEquals(132, node0.getType());
      assertEquals(false, node0.isString());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.hasChildren());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isIf());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isLabel());
      assertEquals("[testcode]", node0.getSourceFileName());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isNoSideEffectsCall());
      
      Vector<SourceFile> vector0 = new Vector<SourceFile>();
      assertNotNull(vector0);
      assertEquals("[]", vector0.toString());
      assertEquals(true, vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      
      CompilerOptions compilerOptions0 = new CompilerOptions();
      assertNotNull(compilerOptions0);
      assertFalse(compilerOptions0.recordFunctionInformation);
      assertFalse(compilerOptions0.optimizeReturns);
      assertFalse(compilerOptions0.preferLineBreakAtEndOfFile);
      assertFalse(compilerOptions0.crossModuleMethodMotion);
      assertFalse(compilerOptions0.optimizeParameters);
      assertFalse(compilerOptions0.checkControlStructures);
      assertFalse(compilerOptions0.flowSensitiveInlineVariables);
      assertFalse(compilerOptions0.collapseVariableDeclarations);
      assertFalse(compilerOptions0.deadAssignmentElimination);
      assertFalse(compilerOptions0.smartNameRemoval);
      assertFalse(compilerOptions0.jqueryPass);
      assertFalse(compilerOptions0.devirtualizePrototypeMethods);
      assertFalse(compilerOptions0.prettyPrint);
      assertFalse(compilerOptions0.markAsCompiled);
      assertFalse(compilerOptions0.removeDeadCode);
      assertFalse(compilerOptions0.inlineLocalFunctions);
      assertFalse(compilerOptions0.checkSymbols);
      assertFalse(compilerOptions0.coalesceVariableNames);
      assertFalse(compilerOptions0.moveFunctionDeclarations);
      assertFalse(compilerOptions0.generateExports);
      assertFalse(compilerOptions0.optimizeArgumentsArray);
      assertFalse(compilerOptions0.gatherCssNames);
      assertFalse(compilerOptions0.checkTypes);
      assertFalse(compilerOptions0.computeFunctionSideEffects);
      assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
      assertFalse(compilerOptions0.ideMode);
      assertFalse(compilerOptions0.foldConstants);
      assertFalse(compilerOptions0.rewriteFunctionExpressions);
      assertFalse(compilerOptions0.aliasAllStrings);
      assertFalse(compilerOptions0.reserveRawExports);
      assertFalse(compilerOptions0.inlineGetters);
      assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
      assertFalse(compilerOptions0.generatePseudoNames);
      assertFalse(compilerOptions0.collapseProperties);
      assertFalse(compilerOptions0.inlineConstantVars);
      assertFalse(compilerOptions0.ambiguateProperties);
      assertFalse(compilerOptions0.convertToDottedProperties);
      assertFalse(compilerOptions0.collapseAnonymousFunctions);
      assertFalse(compilerOptions0.markNoSideEffectCalls);
      assertFalse(compilerOptions0.aliasKeywords);
      assertFalse(compilerOptions0.closurePass);
      assertFalse(compilerOptions0.labelRenaming);
      assertFalse(compilerOptions0.lineBreak);
      assertFalse(compilerOptions0.exportTestFunctions);
      assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
      assertFalse(compilerOptions0.crossModuleCodeMotion);
      assertFalse(compilerOptions0.removeTryCatchFinally);
      assertFalse(compilerOptions0.aliasExternals);
      assertFalse(compilerOptions0.disambiguateProperties);
      assertFalse(compilerOptions0.inlineFunctions);
      assertFalse(compilerOptions0.inlineVariables);
      assertFalse(compilerOptions0.optimizeCalls);
      assertFalse(compilerOptions0.removeUnusedVars);
      assertFalse(compilerOptions0.printInputDelimiter);
      assertFalse(compilerOptions0.removeUnusedLocalVars);
      assertFalse(compilerOptions0.checkSuspiciousCode);
      assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compilerOptions0.getLanguageIn());
      assertEquals(CompilerOptions.TweakProcessing.OFF, compilerOptions0.getTweakProcessing());
      assertEquals(false, compilerOptions0.assumeStrictThis());
      assertEquals(false, compilerOptions0.getInferTypes());
      assertEquals(CompilerOptions.TracerMode.OFF, compilerOptions0.getTracerMode());
      assertNull(compilerOptions0.getLanguageOut());
      assertEquals(false, compilerOptions0.assumeClosuresOnlyCaptureReferences());
      assertEquals(false, compilerOptions0.isExternExportsEnabled());
      
      Result result0 = compiler0.compile((List<SourceFile>) vector0, (List<SourceFile>) vector0, compilerOptions0);
      assertNotNull(result0);
      assertFalse(compilerOptions0.recordFunctionInformation);
      assertFalse(compilerOptions0.optimizeReturns);
      assertFalse(compilerOptions0.preferLineBreakAtEndOfFile);
      assertFalse(compilerOptions0.crossModuleMethodMotion);
      assertFalse(compilerOptions0.optimizeParameters);
      assertFalse(compilerOptions0.checkControlStructures);
      assertFalse(compilerOptions0.flowSensitiveInlineVariables);
      assertFalse(compilerOptions0.collapseVariableDeclarations);
      assertFalse(compilerOptions0.deadAssignmentElimination);
      assertFalse(compilerOptions0.smartNameRemoval);
      assertFalse(compilerOptions0.jqueryPass);
      assertFalse(compilerOptions0.devirtualizePrototypeMethods);
      assertFalse(compilerOptions0.prettyPrint);
      assertFalse(compilerOptions0.markAsCompiled);
      assertFalse(compilerOptions0.removeDeadCode);
      assertFalse(compilerOptions0.inlineLocalFunctions);
      assertFalse(compilerOptions0.checkSymbols);
      assertFalse(compilerOptions0.coalesceVariableNames);
      assertFalse(compilerOptions0.moveFunctionDeclarations);
      assertFalse(compilerOptions0.generateExports);
      assertFalse(compilerOptions0.optimizeArgumentsArray);
      assertFalse(compilerOptions0.gatherCssNames);
      assertFalse(compilerOptions0.checkTypes);
      assertFalse(compilerOptions0.computeFunctionSideEffects);
      assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
      assertFalse(compilerOptions0.ideMode);
      assertFalse(compilerOptions0.foldConstants);
      assertFalse(compilerOptions0.rewriteFunctionExpressions);
      assertFalse(compilerOptions0.aliasAllStrings);
      assertFalse(compilerOptions0.reserveRawExports);
      assertFalse(compilerOptions0.inlineGetters);
      assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
      assertFalse(compilerOptions0.generatePseudoNames);
      assertFalse(compilerOptions0.collapseProperties);
      assertFalse(compilerOptions0.inlineConstantVars);
      assertFalse(compilerOptions0.ambiguateProperties);
      assertFalse(compilerOptions0.convertToDottedProperties);
      assertFalse(compilerOptions0.collapseAnonymousFunctions);
      assertFalse(compilerOptions0.markNoSideEffectCalls);
      assertFalse(compilerOptions0.aliasKeywords);
      assertFalse(compilerOptions0.closurePass);
      assertFalse(compilerOptions0.labelRenaming);
      assertFalse(compilerOptions0.lineBreak);
      assertFalse(compilerOptions0.exportTestFunctions);
      assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
      assertFalse(compilerOptions0.crossModuleCodeMotion);
      assertFalse(compilerOptions0.removeTryCatchFinally);
      assertFalse(compilerOptions0.aliasExternals);
      assertFalse(compilerOptions0.disambiguateProperties);
      assertFalse(compilerOptions0.inlineFunctions);
      assertFalse(compilerOptions0.inlineVariables);
      assertFalse(compilerOptions0.optimizeCalls);
      assertFalse(compilerOptions0.removeUnusedVars);
      assertFalse(compilerOptions0.printInputDelimiter);
      assertFalse(compilerOptions0.removeUnusedLocalVars);
      assertFalse(compilerOptions0.checkSuspiciousCode);
      assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compilerOptions0.getLanguageIn());
      assertEquals(CompilerOptions.TweakProcessing.OFF, compilerOptions0.getTweakProcessing());
      assertEquals(false, compilerOptions0.assumeStrictThis());
      assertEquals(false, compilerOptions0.getInferTypes());
      assertEquals(CompilerOptions.TracerMode.OFF, compilerOptions0.getTracerMode());
      assertNull(compilerOptions0.getLanguageOut());
      assertEquals(false, compilerOptions0.assumeClosuresOnlyCaptureReferences());
      assertEquals(false, compilerOptions0.isExternExportsEnabled());
      assertEquals("[]", vector0.toString());
      assertEquals(true, vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertEquals(true, compiler0.hasErrors());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(1, compiler0.getErrorCount());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
  }

  @Test
  public void test19() {}
//   @Test
//   public void test19()  throws Throwable  {
//       Compiler compiler0 = new Compiler();
//       assertNotNull(compiler0);
//       assertEquals(0.0, compiler0.getProgress(), 0.01D);
//       
//       LoggerErrorManager loggerErrorManager0 = (LoggerErrorManager)compiler0.getErrorManager();
//       assertNotNull(loggerErrorManager0);
//       assertEquals(0, compiler0.getErrorCount());
//       assertEquals(0.0, compiler0.getProgress(), 0.01D);
//       assertEquals(false, compiler0.acceptConstKeyword());
//       assertEquals(false, compiler0.hasErrors());
//       assertEquals(false, compiler0.isIdeMode());
//       assertEquals(0, compiler0.getWarningCount());
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
//       assertEquals(false, compiler0.isTypeCheckingEnabled());
//       assertEquals(0, loggerErrorManager0.getErrorCount());
//       assertEquals(0, loggerErrorManager0.getWarningCount());
//       assertEquals(0.0, loggerErrorManager0.getTypedPercent(), 0.01D);
//       
//       LinkedList<SourceFile> linkedList0 = new LinkedList<SourceFile>();
//       assertNotNull(linkedList0);
//       assertEquals(0, linkedList0.size());
//       assertEquals("[]", linkedList0.toString());
//       
//       CompilerOptions compilerOptions0 = new CompilerOptions();
//       assertNotNull(compilerOptions0);
//       assertFalse(compilerOptions0.gatherCssNames);
//       assertFalse(compilerOptions0.jqueryPass);
//       assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
//       assertFalse(compilerOptions0.inlineVariables);
//       assertFalse(compilerOptions0.removeDeadCode);
//       assertFalse(compilerOptions0.foldConstants);
//       assertFalse(compilerOptions0.generatePseudoNames);
//       assertFalse(compilerOptions0.removeUnusedVars);
//       assertFalse(compilerOptions0.exportTestFunctions);
//       assertFalse(compilerOptions0.closurePass);
//       assertFalse(compilerOptions0.removeUnusedLocalVars);
//       assertFalse(compilerOptions0.markAsCompiled);
//       assertFalse(compilerOptions0.aliasExternals);
//       assertFalse(compilerOptions0.lineBreak);
//       assertFalse(compilerOptions0.checkSuspiciousCode);
//       assertFalse(compilerOptions0.checkTypes);
//       assertFalse(compilerOptions0.rewriteFunctionExpressions);
//       assertFalse(compilerOptions0.inlineGetters);
//       assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
//       assertFalse(compilerOptions0.collapseProperties);
//       assertFalse(compilerOptions0.crossModuleMethodMotion);
//       assertFalse(compilerOptions0.checkControlStructures);
//       assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
//       assertFalse(compilerOptions0.optimizeReturns);
//       assertFalse(compilerOptions0.collapseVariableDeclarations);
//       assertFalse(compilerOptions0.preferLineBreakAtEndOfFile);
//       assertFalse(compilerOptions0.computeFunctionSideEffects);
//       assertFalse(compilerOptions0.ambiguateProperties);
//       assertFalse(compilerOptions0.markNoSideEffectCalls);
//       assertFalse(compilerOptions0.deadAssignmentElimination);
//       assertFalse(compilerOptions0.inlineLocalFunctions);
//       assertFalse(compilerOptions0.recordFunctionInformation);
//       assertFalse(compilerOptions0.moveFunctionDeclarations);
//       assertFalse(compilerOptions0.aliasAllStrings);
//       assertFalse(compilerOptions0.labelRenaming);
//       assertFalse(compilerOptions0.aliasKeywords);
//       assertFalse(compilerOptions0.devirtualizePrototypeMethods);
//       assertFalse(compilerOptions0.optimizeParameters);
//       assertFalse(compilerOptions0.convertToDottedProperties);
//       assertFalse(compilerOptions0.ideMode);
//       assertFalse(compilerOptions0.printInputDelimiter);
//       assertFalse(compilerOptions0.disambiguateProperties);
//       assertFalse(compilerOptions0.optimizeArgumentsArray);
//       assertFalse(compilerOptions0.prettyPrint);
//       assertFalse(compilerOptions0.removeTryCatchFinally);
//       assertFalse(compilerOptions0.checkSymbols);
//       assertFalse(compilerOptions0.coalesceVariableNames);
//       assertFalse(compilerOptions0.optimizeCalls);
//       assertFalse(compilerOptions0.flowSensitiveInlineVariables);
//       assertFalse(compilerOptions0.reserveRawExports);
//       assertFalse(compilerOptions0.collapseAnonymousFunctions);
//       assertFalse(compilerOptions0.inlineFunctions);
//       assertFalse(compilerOptions0.smartNameRemoval);
//       assertFalse(compilerOptions0.crossModuleCodeMotion);
//       assertFalse(compilerOptions0.generateExports);
//       assertFalse(compilerOptions0.inlineConstantVars);
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compilerOptions0.getLanguageIn());
//       assertEquals(false, compilerOptions0.getInferTypes());
//       assertEquals(CompilerOptions.TracerMode.OFF, compilerOptions0.getTracerMode());
//       assertEquals(false, compilerOptions0.isExternExportsEnabled());
//       assertEquals(false, compilerOptions0.assumeClosuresOnlyCaptureReferences());
//       assertNull(compilerOptions0.getLanguageOut());
//       assertEquals(false, compilerOptions0.assumeStrictThis());
//       assertEquals(CompilerOptions.TweakProcessing.OFF, compilerOptions0.getTweakProcessing());
//       assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
//       
//       Vector<JSModule> vector0 = new Vector<JSModule>();
//       assertNotNull(vector0);
//       assertEquals(10, vector0.capacity());
//       assertEquals(0, vector0.size());
//       assertEquals(true, vector0.isEmpty());
//       assertEquals("[]", vector0.toString());
//       
//       Result result0 = compiler0.compileModules((List<SourceFile>) linkedList0, (List<JSModule>) vector0, compilerOptions0);
//       assertNotNull(result0);
//       assertFalse(compilerOptions0.gatherCssNames);
//       assertFalse(compilerOptions0.jqueryPass);
//       assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
//       assertFalse(compilerOptions0.inlineVariables);
//       assertFalse(compilerOptions0.removeDeadCode);
//       assertFalse(compilerOptions0.foldConstants);
//       assertFalse(compilerOptions0.generatePseudoNames);
//       assertFalse(compilerOptions0.removeUnusedVars);
//       assertFalse(compilerOptions0.exportTestFunctions);
//       assertFalse(compilerOptions0.closurePass);
//       assertFalse(compilerOptions0.removeUnusedLocalVars);
//       assertFalse(compilerOptions0.markAsCompiled);
//       assertFalse(compilerOptions0.aliasExternals);
//       assertFalse(compilerOptions0.lineBreak);
//       assertFalse(compilerOptions0.checkSuspiciousCode);
//       assertFalse(compilerOptions0.checkTypes);
//       assertFalse(compilerOptions0.rewriteFunctionExpressions);
//       assertFalse(compilerOptions0.inlineGetters);
//       assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
//       assertFalse(compilerOptions0.collapseProperties);
//       assertFalse(compilerOptions0.crossModuleMethodMotion);
//       assertFalse(compilerOptions0.checkControlStructures);
//       assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
//       assertFalse(compilerOptions0.optimizeReturns);
//       assertFalse(compilerOptions0.collapseVariableDeclarations);
//       assertFalse(compilerOptions0.preferLineBreakAtEndOfFile);
//       assertFalse(compilerOptions0.computeFunctionSideEffects);
//       assertFalse(compilerOptions0.ambiguateProperties);
//       assertFalse(compilerOptions0.markNoSideEffectCalls);
//       assertFalse(compilerOptions0.deadAssignmentElimination);
//       assertFalse(compilerOptions0.inlineLocalFunctions);
//       assertFalse(compilerOptions0.recordFunctionInformation);
//       assertFalse(compilerOptions0.moveFunctionDeclarations);
//       assertFalse(compilerOptions0.aliasAllStrings);
//       assertFalse(compilerOptions0.labelRenaming);
//       assertFalse(compilerOptions0.aliasKeywords);
//       assertFalse(compilerOptions0.devirtualizePrototypeMethods);
//       assertFalse(compilerOptions0.optimizeParameters);
//       assertFalse(compilerOptions0.convertToDottedProperties);
//       assertFalse(compilerOptions0.ideMode);
//       assertFalse(compilerOptions0.printInputDelimiter);
//       assertFalse(compilerOptions0.disambiguateProperties);
//       assertFalse(compilerOptions0.optimizeArgumentsArray);
//       assertFalse(compilerOptions0.prettyPrint);
//       assertFalse(compilerOptions0.removeTryCatchFinally);
//       assertFalse(compilerOptions0.checkSymbols);
//       assertFalse(compilerOptions0.coalesceVariableNames);
//       assertFalse(compilerOptions0.optimizeCalls);
//       assertFalse(compilerOptions0.flowSensitiveInlineVariables);
//       assertFalse(compilerOptions0.reserveRawExports);
//       assertFalse(compilerOptions0.collapseAnonymousFunctions);
//       assertFalse(compilerOptions0.inlineFunctions);
//       assertFalse(compilerOptions0.smartNameRemoval);
//       assertFalse(compilerOptions0.crossModuleCodeMotion);
//       assertFalse(compilerOptions0.generateExports);
//       assertFalse(compilerOptions0.inlineConstantVars);
//       assertEquals(true, compiler0.hasErrors());
//       assertEquals(1, compiler0.getErrorCount());
//       assertEquals(0.0, compiler0.getProgress(), 0.01D);
//       assertEquals(false, compiler0.acceptConstKeyword());
//       assertEquals(false, compiler0.isIdeMode());
//       assertEquals(0, compiler0.getWarningCount());
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
//       assertEquals(false, compiler0.isTypeCheckingEnabled());
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compilerOptions0.getLanguageIn());
//       assertEquals(false, compilerOptions0.getInferTypes());
//       assertEquals(CompilerOptions.TracerMode.OFF, compilerOptions0.getTracerMode());
//       assertEquals(false, compilerOptions0.isExternExportsEnabled());
//       assertEquals(false, compilerOptions0.assumeClosuresOnlyCaptureReferences());
//       assertNull(compilerOptions0.getLanguageOut());
//       assertEquals(false, compilerOptions0.assumeStrictThis());
//       assertEquals(CompilerOptions.TweakProcessing.OFF, compilerOptions0.getTweakProcessing());
//       assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
//       assertEquals(0, linkedList0.size());
//       assertEquals("[]", linkedList0.toString());
//       assertEquals(10, vector0.capacity());
//       assertEquals(0, vector0.size());
//       assertEquals(true, vector0.isEmpty());
//       assertEquals("[]", vector0.toString());
//   }

  @Test
  public void test20()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      assertNotNull(compiler0);
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      
      Node node0 = compiler0.getRoot();
      assertNull(node0);
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
  }

  @Test
  public void test21()  throws Throwable  {
      PrintStream printStream0 = null;
      Compiler compiler0 = new Compiler(printStream0);
      assertNotNull(compiler0);
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      
      // Undeclared exception!
      try {
        int int0 = compiler0.getWarningCount();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test22()  throws Throwable  {
      String string0 = "\"-P087`SyRl";
      MockPrintStream mockPrintStream0 = new MockPrintStream(string0);
      assertNotNull(mockPrintStream0);
      
      Compiler compiler0 = new Compiler((PrintStream) mockPrintStream0);
      assertNotNull(compiler0);
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      
      // Undeclared exception!
      try {
        compiler0.processDefines();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test23()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      assertNotNull(compiler0);
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      
      List<CompilerInput> list0 = compiler0.getExternsForTesting();
      assertNull(list0);
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
  }

  @Test
  public void test24()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      assertNotNull(compiler0);
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      
      JSModuleGraph jSModuleGraph0 = compiler0.getModuleGraph();
      assertNull(jSModuleGraph0);
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
  }

  @Test
  public void test25()  throws Throwable  {
      PrintStream printStream0 = null;
      Compiler compiler0 = new Compiler(printStream0);
      assertNotNull(compiler0);
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      
      compiler0.resetUniqueNameId();
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
  }

  @Test
  public void test26()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      assertNotNull(pipedOutputStream0);
      
      boolean boolean0 = false;
      MockPrintStream mockPrintStream0 = new MockPrintStream((OutputStream) pipedOutputStream0, boolean0);
      assertNotNull(mockPrintStream0);
      
      Compiler compiler0 = new Compiler((PrintStream) mockPrintStream0);
      assertNotNull(compiler0);
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      
      // Undeclared exception!
      try {
        compiler0.recordFunctionInformation();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test27()  throws Throwable  {
      PrintStream printStream0 = null;
      Compiler compiler0 = new Compiler(printStream0);
      assertNotNull(compiler0);
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      
      boolean boolean0 = false;
      compiler0.setHasRegExpGlobalReferences(boolean0);
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
  }

  @Test
  public void test28()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      assertNotNull(compiler0);
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      
      String string0 = "-yt2\\L]<n";
      SyntheticAst syntheticAst0 = new SyntheticAst(string0);
      assertNotNull(syntheticAst0);
      
      InputId inputId0 = syntheticAst0.getInputId();
      assertNotNull(inputId0);
      assertEquals("-yt2\\L]<n", inputId0.getIdName());
      
      // Undeclared exception!
      try {
        CompilerInput compilerInput0 = compiler0.getInput(inputId0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test29()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      assertNotNull(compiler0);
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      
      String string0 = "JSC_OPTIMIZE_LOOP_ERROR";
      Node node0 = compiler0.parseTestCode(string0);
      assertNotNull(node0);
      assertEquals(true, node0.hasChildren());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isString());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isIn());
      assertEquals(4096, node0.getSourcePosition());
      assertEquals(132, node0.getType());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isTry());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isWith());
      assertEquals(0, node0.getCharno());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isQuotedString());
      assertEquals(true, node0.isScript());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(true, node0.hasOneChild());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isFor());
      assertEquals(1, node0.getLineno());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isInc());
      assertEquals("[testcode]", node0.getSourceFileName());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isVoid());
      assertEquals(true, node0.isSyntheticBlock());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isHook());
      assertEquals(1, node0.getChildCount());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isThrow());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isLabel());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(0, compiler0.getErrorCount());
      
      // Undeclared exception!
      try {
        Node node1 = compiler0.ensureLibraryInjected(string0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test30()  throws Throwable  {
      String string0 = "The use of scope variable {0} is not allowed within a catch block with a catch exception of the same name.";
      MockFile mockFile0 = (MockFile)MockFile.createTempFile(string0, string0);
      assertNotNull(mockFile0);
      
      MockPrintStream mockPrintStream0 = new MockPrintStream((File) mockFile0);
      assertNotNull(mockPrintStream0);
      
      Compiler compiler0 = new Compiler((PrintStream) mockPrintStream0);
      assertNotNull(compiler0);
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      
      // Undeclared exception!
      try {
        compiler0.removeTryCatchFinally();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test31()  throws Throwable  {
      PrintStream printStream0 = null;
      Compiler compiler0 = new Compiler(printStream0);
      assertNotNull(compiler0);
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      
      MemoizedScopeCreator memoizedScopeCreator0 = compiler0.getTypedScopeCreator();
      assertNull(memoizedScopeCreator0);
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
  }

  @Test
  public void test32()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      assertNotNull(compiler0);
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      
      LoggerErrorManager loggerErrorManager0 = (LoggerErrorManager)compiler0.getErrorManager();
      assertNotNull(loggerErrorManager0);
      assertEquals(0, loggerErrorManager0.getErrorCount());
      assertEquals(0.0, loggerErrorManager0.getTypedPercent(), 0.01D);
      assertEquals(0, loggerErrorManager0.getWarningCount());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(false, compiler0.acceptConstKeyword());
      
      Compiler compiler1 = new Compiler((ErrorManager) loggerErrorManager0);
      assertNotNull(compiler1);
      assertFalse(compiler1.equals((Object)compiler0));
      assertFalse(compiler0.equals((Object)compiler1));
      assertNotSame(compiler1, compiler0);
      assertNotSame(compiler0, compiler1);
      assertEquals(0, loggerErrorManager0.getErrorCount());
      assertEquals(0.0, loggerErrorManager0.getTypedPercent(), 0.01D);
      assertEquals(0, loggerErrorManager0.getWarningCount());
      assertEquals(0, compiler1.getErrorCount());
      assertEquals(0, compiler1.getWarningCount());
      assertEquals(0.0, compiler1.getProgress(), 0.01D);
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(false, compiler0.acceptConstKeyword());
  }

  @Test
  public void test33()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      assertNotNull(compiler0);
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      
      List<CompilerInput> list0 = compiler0.getInputsForTesting();
      assertNull(list0);
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
  }

  @Test
  public void test34()  throws Throwable  {
      String string0 = "\"-P087`SyRl";
      MockPrintStream mockPrintStream0 = new MockPrintStream(string0);
      assertNotNull(mockPrintStream0);
      
      Compiler compiler0 = new Compiler((PrintStream) mockPrintStream0);
      assertNotNull(compiler0);
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      
      Node node0 = compiler0.parseSyntheticCode(string0, string0);
      assertNotNull(node0);
      assertEquals(false, node0.isInc());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isFunction());
      assertEquals(132, node0.getType());
      assertEquals(true, node0.isScript());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isLabelName());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isReturn());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isString());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isArrayLit());
      assertEquals("\"-P087`SyRl", node0.getSourceFileName());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isNew());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isParamList());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isRegExp());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(true, compiler0.hasErrors());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(1, compiler0.getErrorCount());
  }

  @Test
  public void test35()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      assertNotNull(compiler0);
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      
      // Undeclared exception!
      try {
        compiler0.rebuildInputsFromModules();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test36()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      assertNotNull(compiler0);
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      
      // Undeclared exception!
      try {
        CssRenamingMap cssRenamingMap0 = compiler0.getCssRenamingMap();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test37()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      assertNotNull(compiler0);
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      
      JSSourceFile[] jSSourceFileArray0 = new JSSourceFile[1];
      CompilerOptions compilerOptions0 = null;
      // Undeclared exception!
      try {
        compiler0.init(jSSourceFileArray0, jSSourceFileArray0, compilerOptions0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test38()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      assertNotNull(compiler0);
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      
      VariableMap variableMap0 = compiler0.getPropertyMap();
      assertNull(variableMap0);
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
  }

  @Test
  public void test39()  throws Throwable  {
      PrintStream printStream0 = null;
      Compiler compiler0 = new Compiler(printStream0);
      assertNotNull(compiler0);
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      
      Compiler.IntermediateState compiler_IntermediateState0 = compiler0.getState();
      assertNotNull(compiler_IntermediateState0);
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      
      compiler0.setState(compiler_IntermediateState0);
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
  }

  @Test
  public void test40()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      assertNotNull(compiler0);
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      
      Scope scope0 = compiler0.getTopScope();
      assertNull(scope0);
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
  }

  @Test
  public void test41()  throws Throwable  {
      PrintStream printStream0 = null;
      Compiler compiler0 = new Compiler(printStream0);
      assertNotNull(compiler0);
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      
      // Undeclared exception!
      try {
        CompilerOptions.LanguageMode compilerOptions_LanguageMode0 = compiler0.languageMode();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test42()  throws Throwable  {
      PrintStream printStream0 = null;
      Compiler compiler0 = new Compiler(printStream0);
      assertNotNull(compiler0);
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      
      Vector<SourceFile> vector0 = new Vector<SourceFile>();
      assertNotNull(vector0);
      assertEquals(0, vector0.size());
      assertEquals(true, vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      
      CompilerOptions compilerOptions0 = new CompilerOptions();
      assertNotNull(compilerOptions0);
      assertFalse(compilerOptions0.flowSensitiveInlineVariables);
      assertFalse(compilerOptions0.inlineGetters);
      assertFalse(compilerOptions0.checkTypes);
      assertFalse(compilerOptions0.smartNameRemoval);
      assertFalse(compilerOptions0.ambiguateProperties);
      assertFalse(compilerOptions0.collapseProperties);
      assertFalse(compilerOptions0.convertToDottedProperties);
      assertFalse(compilerOptions0.lineBreak);
      assertFalse(compilerOptions0.rewriteFunctionExpressions);
      assertFalse(compilerOptions0.checkSuspiciousCode);
      assertFalse(compilerOptions0.removeUnusedVars);
      assertFalse(compilerOptions0.optimizeParameters);
      assertFalse(compilerOptions0.closurePass);
      assertFalse(compilerOptions0.optimizeReturns);
      assertFalse(compilerOptions0.removeTryCatchFinally);
      assertFalse(compilerOptions0.devirtualizePrototypeMethods);
      assertFalse(compilerOptions0.jqueryPass);
      assertFalse(compilerOptions0.aliasAllStrings);
      assertFalse(compilerOptions0.generatePseudoNames);
      assertFalse(compilerOptions0.crossModuleCodeMotion);
      assertFalse(compilerOptions0.removeDeadCode);
      assertFalse(compilerOptions0.aliasExternals);
      assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
      assertFalse(compilerOptions0.inlineFunctions);
      assertFalse(compilerOptions0.optimizeArgumentsArray);
      assertFalse(compilerOptions0.checkControlStructures);
      assertFalse(compilerOptions0.markAsCompiled);
      assertFalse(compilerOptions0.collapseVariableDeclarations);
      assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
      assertFalse(compilerOptions0.markNoSideEffectCalls);
      assertFalse(compilerOptions0.ideMode);
      assertFalse(compilerOptions0.moveFunctionDeclarations);
      assertFalse(compilerOptions0.generateExports);
      assertFalse(compilerOptions0.removeUnusedLocalVars);
      assertFalse(compilerOptions0.printInputDelimiter);
      assertFalse(compilerOptions0.checkSymbols);
      assertFalse(compilerOptions0.prettyPrint);
      assertFalse(compilerOptions0.disambiguateProperties);
      assertFalse(compilerOptions0.optimizeCalls);
      assertFalse(compilerOptions0.inlineConstantVars);
      assertFalse(compilerOptions0.reserveRawExports);
      assertFalse(compilerOptions0.computeFunctionSideEffects);
      assertFalse(compilerOptions0.deadAssignmentElimination);
      assertFalse(compilerOptions0.inlineVariables);
      assertFalse(compilerOptions0.foldConstants);
      assertFalse(compilerOptions0.labelRenaming);
      assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
      assertFalse(compilerOptions0.collapseAnonymousFunctions);
      assertFalse(compilerOptions0.coalesceVariableNames);
      assertFalse(compilerOptions0.exportTestFunctions);
      assertFalse(compilerOptions0.gatherCssNames);
      assertFalse(compilerOptions0.aliasKeywords);
      assertFalse(compilerOptions0.preferLineBreakAtEndOfFile);
      assertFalse(compilerOptions0.recordFunctionInformation);
      assertFalse(compilerOptions0.inlineLocalFunctions);
      assertFalse(compilerOptions0.crossModuleMethodMotion);
      assertNull(compilerOptions0.getLanguageOut());
      assertEquals(CompilerOptions.TracerMode.OFF, compilerOptions0.getTracerMode());
      assertEquals(CompilerOptions.TweakProcessing.OFF, compilerOptions0.getTweakProcessing());
      assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
      assertEquals(false, compilerOptions0.assumeStrictThis());
      assertEquals(false, compilerOptions0.assumeClosuresOnlyCaptureReferences());
      assertEquals(false, compilerOptions0.isExternExportsEnabled());
      assertEquals(false, compilerOptions0.getInferTypes());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compilerOptions0.getLanguageIn());
      
      Result result0 = compiler0.compile((List<SourceFile>) vector0, (List<SourceFile>) vector0, compilerOptions0);
      assertNotNull(result0);
      assertFalse(compilerOptions0.flowSensitiveInlineVariables);
      assertFalse(compilerOptions0.inlineGetters);
      assertFalse(compilerOptions0.checkTypes);
      assertFalse(compilerOptions0.smartNameRemoval);
      assertFalse(compilerOptions0.ambiguateProperties);
      assertFalse(compilerOptions0.collapseProperties);
      assertFalse(compilerOptions0.convertToDottedProperties);
      assertFalse(compilerOptions0.lineBreak);
      assertFalse(compilerOptions0.rewriteFunctionExpressions);
      assertFalse(compilerOptions0.checkSuspiciousCode);
      assertFalse(compilerOptions0.removeUnusedVars);
      assertFalse(compilerOptions0.optimizeParameters);
      assertFalse(compilerOptions0.closurePass);
      assertFalse(compilerOptions0.optimizeReturns);
      assertFalse(compilerOptions0.removeTryCatchFinally);
      assertFalse(compilerOptions0.devirtualizePrototypeMethods);
      assertFalse(compilerOptions0.jqueryPass);
      assertFalse(compilerOptions0.aliasAllStrings);
      assertFalse(compilerOptions0.generatePseudoNames);
      assertFalse(compilerOptions0.crossModuleCodeMotion);
      assertFalse(compilerOptions0.removeDeadCode);
      assertFalse(compilerOptions0.aliasExternals);
      assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
      assertFalse(compilerOptions0.inlineFunctions);
      assertFalse(compilerOptions0.optimizeArgumentsArray);
      assertFalse(compilerOptions0.checkControlStructures);
      assertFalse(compilerOptions0.markAsCompiled);
      assertFalse(compilerOptions0.collapseVariableDeclarations);
      assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
      assertFalse(compilerOptions0.markNoSideEffectCalls);
      assertFalse(compilerOptions0.ideMode);
      assertFalse(compilerOptions0.moveFunctionDeclarations);
      assertFalse(compilerOptions0.generateExports);
      assertFalse(compilerOptions0.removeUnusedLocalVars);
      assertFalse(compilerOptions0.printInputDelimiter);
      assertFalse(compilerOptions0.checkSymbols);
      assertFalse(compilerOptions0.prettyPrint);
      assertFalse(compilerOptions0.disambiguateProperties);
      assertFalse(compilerOptions0.optimizeCalls);
      assertFalse(compilerOptions0.inlineConstantVars);
      assertFalse(compilerOptions0.reserveRawExports);
      assertFalse(compilerOptions0.computeFunctionSideEffects);
      assertFalse(compilerOptions0.deadAssignmentElimination);
      assertFalse(compilerOptions0.inlineVariables);
      assertFalse(compilerOptions0.foldConstants);
      assertFalse(compilerOptions0.labelRenaming);
      assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
      assertFalse(compilerOptions0.collapseAnonymousFunctions);
      assertFalse(compilerOptions0.coalesceVariableNames);
      assertFalse(compilerOptions0.exportTestFunctions);
      assertFalse(compilerOptions0.gatherCssNames);
      assertFalse(compilerOptions0.aliasKeywords);
      assertFalse(compilerOptions0.preferLineBreakAtEndOfFile);
      assertFalse(compilerOptions0.recordFunctionInformation);
      assertFalse(compilerOptions0.inlineLocalFunctions);
      assertFalse(compilerOptions0.crossModuleMethodMotion);
      assertEquals(0, vector0.size());
      assertEquals(true, vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(1.0, compiler0.getProgress(), 0.01D);
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertNull(compilerOptions0.getLanguageOut());
      assertEquals(CompilerOptions.TracerMode.OFF, compilerOptions0.getTracerMode());
      assertEquals(CompilerOptions.TweakProcessing.OFF, compilerOptions0.getTweakProcessing());
      assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
      assertEquals(false, compilerOptions0.assumeStrictThis());
      assertEquals(false, compilerOptions0.assumeClosuresOnlyCaptureReferences());
      assertEquals(false, compilerOptions0.isExternExportsEnabled());
      assertEquals(false, compilerOptions0.getInferTypes());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compilerOptions0.getLanguageIn());
      
      HashMap<Scope.Var, ReferenceCollectingCallback.ReferenceCollection> hashMap0 = new HashMap<Scope.Var, ReferenceCollectingCallback.ReferenceCollection>();
      assertNotNull(hashMap0);
      assertEquals(true, hashMap0.isEmpty());
      assertEquals("{}", hashMap0.toString());
      assertEquals(0, hashMap0.size());
      
      Node node0 = compiler0.externAndJsRoot;
      assertNotNull(node0);
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(1.0, compiler0.getProgress(), 0.01D);
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(true, node0.isBlock());
      assertEquals(false, node0.isContinue());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isArrayLit());
      assertEquals(2, node0.getChildCount());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isParamList());
      assertEquals(125, node0.getType());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isLabelName());
      assertNull(node0.getSourceFileName());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isSetterDef());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isFor());
      assertEquals(true, node0.isSyntheticBlock());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isScript());
      assertEquals(false, node0.isIf());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isNE());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isString());
      assertEquals(true, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isTypeOf());
      assertEquals(true, node0.hasChildren());
      
      compiler0.updateGlobalVarReferences(hashMap0, node0);
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(1.0, compiler0.getProgress(), 0.01D);
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(true, node0.isBlock());
      assertEquals(false, node0.isContinue());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isArrayLit());
      assertEquals(2, node0.getChildCount());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isParamList());
      assertEquals(125, node0.getType());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isLabelName());
      assertNull(node0.getSourceFileName());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isSetterDef());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isFor());
      assertEquals(true, node0.isSyntheticBlock());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isScript());
      assertEquals(false, node0.isIf());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isNE());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isString());
      assertEquals(true, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isTypeOf());
      assertEquals(true, node0.hasChildren());
      assertEquals(true, hashMap0.isEmpty());
      assertEquals("{}", hashMap0.toString());
      assertEquals(0, hashMap0.size());
  }

  @Test
  public void test43()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      assertNotNull(compiler0);
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      
      double double0 = (-1977.0111594);
      int int0 = 1847;
      Node node0 = Node.newNumber(double0, int0, int0);
      assertNotNull(node0);
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isQuotedString());
      assertEquals(1847, node0.getCharno());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isCase());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isNot());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isScript());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isWith());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(7567159, node0.getSourcePosition());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isName());
      assertEquals(1847, node0.getLineno());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isContinue());
      assertEquals(39, node0.getType());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isString());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isGetElem());
      assertEquals(true, node0.isNumber());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isDec());
      
      String string0 = compiler0.toSource(node0);
      assertNotNull(string0);
      assertEquals("-1977.0111594", string0);
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isQuotedString());
      assertEquals(1847, node0.getCharno());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isCase());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isNot());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isScript());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isWith());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(7567159, node0.getSourcePosition());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isName());
      assertEquals(1847, node0.getLineno());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isContinue());
      assertEquals(39, node0.getType());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isString());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isGetElem());
      assertEquals(true, node0.isNumber());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isDec());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(false, compiler0.acceptConstKeyword());
  }

  @Test
  public void test44()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      assertNotNull(compiler0);
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      
      CodeChangeHandler.RecentChange codeChangeHandler_RecentChange0 = compiler0.recentChange;
      assertNotNull(codeChangeHandler_RecentChange0);
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      
      compiler0.removeChangeHandler(codeChangeHandler_RecentChange0);
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
  }

  @Test
  public void test45()  throws Throwable  {
      Level level0 = Level.WARNING;
      assertNotNull(level0);
      assertEquals(900, level0.intValue());
      assertEquals("WARNING", level0.getName());
      assertEquals("WARNING", level0.toString());
      assertEquals("sun.util.logging.resources.logging", level0.getResourceBundleName());
      
      Compiler.setLoggingLevel(level0);
      assertEquals(900, level0.intValue());
      assertEquals("WARNING", level0.getName());
      assertEquals("WARNING", level0.toString());
      assertEquals("sun.util.logging.resources.logging", level0.getResourceBundleName());
  }

  @Test
  public void test46()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      assertNotNull(compiler0);
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      
      boolean boolean0 = compiler0.hasRegExpGlobalReferences();
      assertTrue(boolean0);
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
  }

  @Test
  public void test47()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      assertNotNull(compiler0);
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      
      // Undeclared exception!
      try {
        Map<InputId, CompilerInput> map0 = compiler0.getInputsById();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test48()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      assertNotNull(compiler0);
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      
      VariableMap variableMap0 = compiler0.getVariableMap();
      assertNull(variableMap0);
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
  }

  @Test
  public void test49()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      assertNotNull(compiler0);
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      
      GlobalVarReferenceMap globalVarReferenceMap0 = compiler0.getGlobalVarReferences();
      assertNull(globalVarReferenceMap0);
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
  }

  @Test
  public void test50()  throws Throwable  {
      PrintStream printStream0 = null;
      Compiler compiler0 = new Compiler(printStream0);
      assertNotNull(compiler0);
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      
      SourceMap sourceMap0 = compiler0.getSourceMap();
      assertNull(sourceMap0);
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
  }

  @Test
  public void test51()  throws Throwable  {
      PrintStream printStream0 = null;
      Compiler compiler0 = new Compiler(printStream0);
      assertNotNull(compiler0);
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      
      compiler0.disableThreads();
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      
      Vector<SourceFile> vector0 = new Vector<SourceFile>();
      assertNotNull(vector0);
      assertEquals(true, vector0.isEmpty());
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      
      CompilerOptions compilerOptions0 = new CompilerOptions();
      assertNotNull(compilerOptions0);
      assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
      assertFalse(compilerOptions0.closurePass);
      assertFalse(compilerOptions0.inlineGetters);
      assertFalse(compilerOptions0.preferLineBreakAtEndOfFile);
      assertFalse(compilerOptions0.generatePseudoNames);
      assertFalse(compilerOptions0.disambiguateProperties);
      assertFalse(compilerOptions0.crossModuleMethodMotion);
      assertFalse(compilerOptions0.labelRenaming);
      assertFalse(compilerOptions0.devirtualizePrototypeMethods);
      assertFalse(compilerOptions0.crossModuleCodeMotion);
      assertFalse(compilerOptions0.removeUnusedVars);
      assertFalse(compilerOptions0.ambiguateProperties);
      assertFalse(compilerOptions0.collapseProperties);
      assertFalse(compilerOptions0.optimizeReturns);
      assertFalse(compilerOptions0.optimizeArgumentsArray);
      assertFalse(compilerOptions0.inlineLocalFunctions);
      assertFalse(compilerOptions0.generateExports);
      assertFalse(compilerOptions0.inlineConstantVars);
      assertFalse(compilerOptions0.exportTestFunctions);
      assertFalse(compilerOptions0.reserveRawExports);
      assertFalse(compilerOptions0.collapseAnonymousFunctions);
      assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
      assertFalse(compilerOptions0.optimizeCalls);
      assertFalse(compilerOptions0.coalesceVariableNames);
      assertFalse(compilerOptions0.checkControlStructures);
      assertFalse(compilerOptions0.lineBreak);
      assertFalse(compilerOptions0.removeDeadCode);
      assertFalse(compilerOptions0.jqueryPass);
      assertFalse(compilerOptions0.inlineVariables);
      assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
      assertFalse(compilerOptions0.smartNameRemoval);
      assertFalse(compilerOptions0.aliasKeywords);
      assertFalse(compilerOptions0.flowSensitiveInlineVariables);
      assertFalse(compilerOptions0.computeFunctionSideEffects);
      assertFalse(compilerOptions0.markAsCompiled);
      assertFalse(compilerOptions0.moveFunctionDeclarations);
      assertFalse(compilerOptions0.inlineFunctions);
      assertFalse(compilerOptions0.foldConstants);
      assertFalse(compilerOptions0.removeUnusedLocalVars);
      assertFalse(compilerOptions0.convertToDottedProperties);
      assertFalse(compilerOptions0.rewriteFunctionExpressions);
      assertFalse(compilerOptions0.checkSuspiciousCode);
      assertFalse(compilerOptions0.aliasAllStrings);
      assertFalse(compilerOptions0.gatherCssNames);
      assertFalse(compilerOptions0.optimizeParameters);
      assertFalse(compilerOptions0.ideMode);
      assertFalse(compilerOptions0.removeTryCatchFinally);
      assertFalse(compilerOptions0.printInputDelimiter);
      assertFalse(compilerOptions0.recordFunctionInformation);
      assertFalse(compilerOptions0.deadAssignmentElimination);
      assertFalse(compilerOptions0.checkSymbols);
      assertFalse(compilerOptions0.aliasExternals);
      assertFalse(compilerOptions0.markNoSideEffectCalls);
      assertFalse(compilerOptions0.prettyPrint);
      assertFalse(compilerOptions0.collapseVariableDeclarations);
      assertFalse(compilerOptions0.checkTypes);
      assertNull(compilerOptions0.getLanguageOut());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compilerOptions0.getLanguageIn());
      assertEquals(false, compilerOptions0.assumeStrictThis());
      assertEquals(false, compilerOptions0.getInferTypes());
      assertEquals(false, compilerOptions0.isExternExportsEnabled());
      assertEquals(CompilerOptions.TracerMode.OFF, compilerOptions0.getTracerMode());
      assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
      assertEquals(CompilerOptions.TweakProcessing.OFF, compilerOptions0.getTweakProcessing());
      assertEquals(false, compilerOptions0.assumeClosuresOnlyCaptureReferences());
      
      Result result0 = compiler0.compile((List<SourceFile>) vector0, (List<SourceFile>) vector0, compilerOptions0);
      assertNotNull(result0);
      assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
      assertFalse(compilerOptions0.closurePass);
      assertFalse(compilerOptions0.inlineGetters);
      assertFalse(compilerOptions0.preferLineBreakAtEndOfFile);
      assertFalse(compilerOptions0.generatePseudoNames);
      assertFalse(compilerOptions0.disambiguateProperties);
      assertFalse(compilerOptions0.crossModuleMethodMotion);
      assertFalse(compilerOptions0.labelRenaming);
      assertFalse(compilerOptions0.devirtualizePrototypeMethods);
      assertFalse(compilerOptions0.crossModuleCodeMotion);
      assertFalse(compilerOptions0.removeUnusedVars);
      assertFalse(compilerOptions0.ambiguateProperties);
      assertFalse(compilerOptions0.collapseProperties);
      assertFalse(compilerOptions0.optimizeReturns);
      assertFalse(compilerOptions0.optimizeArgumentsArray);
      assertFalse(compilerOptions0.inlineLocalFunctions);
      assertFalse(compilerOptions0.generateExports);
      assertFalse(compilerOptions0.inlineConstantVars);
      assertFalse(compilerOptions0.exportTestFunctions);
      assertFalse(compilerOptions0.reserveRawExports);
      assertFalse(compilerOptions0.collapseAnonymousFunctions);
      assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
      assertFalse(compilerOptions0.optimizeCalls);
      assertFalse(compilerOptions0.coalesceVariableNames);
      assertFalse(compilerOptions0.checkControlStructures);
      assertFalse(compilerOptions0.lineBreak);
      assertFalse(compilerOptions0.removeDeadCode);
      assertFalse(compilerOptions0.jqueryPass);
      assertFalse(compilerOptions0.inlineVariables);
      assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
      assertFalse(compilerOptions0.smartNameRemoval);
      assertFalse(compilerOptions0.aliasKeywords);
      assertFalse(compilerOptions0.flowSensitiveInlineVariables);
      assertFalse(compilerOptions0.computeFunctionSideEffects);
      assertFalse(compilerOptions0.markAsCompiled);
      assertFalse(compilerOptions0.moveFunctionDeclarations);
      assertFalse(compilerOptions0.inlineFunctions);
      assertFalse(compilerOptions0.foldConstants);
      assertFalse(compilerOptions0.removeUnusedLocalVars);
      assertFalse(compilerOptions0.convertToDottedProperties);
      assertFalse(compilerOptions0.rewriteFunctionExpressions);
      assertFalse(compilerOptions0.checkSuspiciousCode);
      assertFalse(compilerOptions0.aliasAllStrings);
      assertFalse(compilerOptions0.gatherCssNames);
      assertFalse(compilerOptions0.optimizeParameters);
      assertFalse(compilerOptions0.ideMode);
      assertFalse(compilerOptions0.removeTryCatchFinally);
      assertFalse(compilerOptions0.printInputDelimiter);
      assertFalse(compilerOptions0.recordFunctionInformation);
      assertFalse(compilerOptions0.deadAssignmentElimination);
      assertFalse(compilerOptions0.checkSymbols);
      assertFalse(compilerOptions0.aliasExternals);
      assertFalse(compilerOptions0.markNoSideEffectCalls);
      assertFalse(compilerOptions0.prettyPrint);
      assertFalse(compilerOptions0.collapseVariableDeclarations);
      assertFalse(compilerOptions0.checkTypes);
      assertNull(compilerOptions0.getLanguageOut());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compilerOptions0.getLanguageIn());
      assertEquals(false, compilerOptions0.assumeStrictThis());
      assertEquals(false, compilerOptions0.getInferTypes());
      assertEquals(false, compilerOptions0.isExternExportsEnabled());
      assertEquals(CompilerOptions.TracerMode.OFF, compilerOptions0.getTracerMode());
      assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
      assertEquals(CompilerOptions.TweakProcessing.OFF, compilerOptions0.getTweakProcessing());
      assertEquals(false, compilerOptions0.assumeClosuresOnlyCaptureReferences());
      assertEquals(true, vector0.isEmpty());
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(1.0, compiler0.getProgress(), 0.01D);
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
  }

  @Test
  public void test52()  throws Throwable  {
      PrintStream printStream0 = null;
      Compiler compiler0 = new Compiler(printStream0);
      assertNotNull(compiler0);
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      
      // Undeclared exception!
      try {
        String string0 = compiler0.toSource();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test53()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      assertNotNull(compiler0);
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      
      // Undeclared exception!
      try {
        String[] stringArray0 = compiler0.toSourceArray();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test54()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      assertNotNull(compiler0);
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      
      String string0 = "#\"4z;vNS";
      JSModule jSModule0 = new JSModule(string0);
      assertNotNull(jSModule0);
      assertEquals("#\"4z;vNS", jSModule0.toString());
      assertEquals("#\"4z;vNS", jSModule0.getName());
      assertEquals(-1, jSModule0.getDepth());
      
      // Undeclared exception!
      try {
        String string1 = compiler0.toSource(jSModule0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test55()  throws Throwable  {
      Compiler.CodeBuilder compiler_CodeBuilder0 = new Compiler.CodeBuilder();
      assertNotNull(compiler_CodeBuilder0);
      
      int int0 = compiler_CodeBuilder0.getLineIndex();
      assertEquals(0, int0);
  }

  @Test
  public void test56()  throws Throwable  {
      Compiler.CodeBuilder compiler_CodeBuilder0 = new Compiler.CodeBuilder();
      assertNotNull(compiler_CodeBuilder0);
      
      String string0 = compiler_CodeBuilder0.toString();
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test
  public void test57()  throws Throwable  {
      Compiler.CodeBuilder compiler_CodeBuilder0 = new Compiler.CodeBuilder();
      assertNotNull(compiler_CodeBuilder0);
      
      int int0 = compiler_CodeBuilder0.getLength();
      assertEquals(0, int0);
  }

  @Test
  public void test58()  throws Throwable  {
      Compiler.CodeBuilder compiler_CodeBuilder0 = new Compiler.CodeBuilder();
      assertNotNull(compiler_CodeBuilder0);
      
      int int0 = compiler_CodeBuilder0.getColumnIndex();
      assertEquals(0, int0);
  }
}
