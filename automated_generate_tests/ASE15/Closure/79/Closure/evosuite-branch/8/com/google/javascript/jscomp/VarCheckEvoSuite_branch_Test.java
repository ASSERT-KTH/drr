/*
 * This file was automatically generated by EvoSuite
 * Fri Dec 12 00:23:39 GMT 2014
 */

package com.google.javascript.jscomp;

import static org.junit.Assert.*;
import org.junit.Test;
import com.google.javascript.jscomp.CodingConvention;
import com.google.javascript.jscomp.Compiler;
import com.google.javascript.jscomp.CompilerOptions;
import com.google.javascript.jscomp.GoogleCodingConvention;
import com.google.javascript.jscomp.JSSourceFile;
import com.google.javascript.jscomp.Normalize;
import com.google.javascript.jscomp.Result;
import com.google.javascript.jscomp.VarCheck;
import com.google.javascript.rhino.Node;
import java.io.PrintStream;
import java.util.LinkedList;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;

import org.evosuite.runtime.mock.java.lang.MockRuntimeException;
import org.junit.runner.RunWith;


public class VarCheckEvoSuite_branch_Test  {

  @Test
  public void test0() {}
//   @Test
//   public void test0()  throws Throwable  {
//       Compiler compiler0 = new Compiler();
//       assertNotNull(compiler0);
//       
//       String string0 = "X";
//       String string1 = "SI.nGGS>JsET.J;bL";
//       assertNotSame(string1, string0);
//       
//       Node node0 = compiler0.parseSyntheticCode(string0, string1);
//       assertEquals(0, compiler0.getWarningCount());
//       assertEquals(false, compiler0.hasErrors());
//       assertEquals(false, compiler0.acceptEcmaScript5());
//       assertEquals(false, compiler0.isIdeMode());
//       assertEquals(0, compiler0.getErrorCount());
//       assertEquals(false, compiler0.isTypeCheckingEnabled());
//       assertEquals(false, compiler0.acceptConstKeyword());
//       assertEquals(0, node0.getSideEffectFlags());
//       assertEquals(false, node0.isVarArgs());
//       assertEquals(false, node0.hasOneChild());
//       assertEquals(false, node0.isNoSideEffectsCall());
//       assertEquals(false, node0.isUnscopedQualifiedName());
//       assertEquals(true, node0.hasMoreThanOneChild());
//       assertEquals(false, node0.isLocalResultCall());
//       assertEquals(1, node0.getLineno());
//       assertEquals(false, node0.isQualifiedName());
//       assertEquals(false, node0.isOnlyModifiesThisCall());
//       assertEquals(false, node0.isQuotedString());
//       assertEquals(false, node0.wasEmptyNode());
//       assertEquals(false, node0.isOptionalArg());
//       assertEquals(true, node0.isSyntheticBlock());
//       assertEquals(true, node0.hasChildren());
//       assertEquals(0, node0.getCharno());
//       assertEquals(2, node0.getChildCount());
//       assertEquals(132, node0.getType());
//       assertNotNull(node0);
//       assertNotSame(string0, string1);
//       assertNotSame(string1, string0);
//       assertFalse(string0.equals((Object)string1));
//       assertFalse(string1.equals((Object)string0));
//       
//       LinkedList<JSSourceFile> linkedList0 = new LinkedList<JSSourceFile>();
//       assertEquals(0, linkedList0.size());
//       assertEquals("[]", linkedList0.toString());
//       assertNotNull(linkedList0);
//       
//       CompilerOptions compilerOptions0 = compiler0.options;
//       assertEquals(0, compiler0.getWarningCount());
//       assertEquals(false, compiler0.hasErrors());
//       assertEquals(false, compiler0.acceptEcmaScript5());
//       assertEquals(false, compiler0.isIdeMode());
//       assertEquals(0, compiler0.getErrorCount());
//       assertEquals(false, compiler0.isTypeCheckingEnabled());
//       assertEquals(false, compiler0.acceptConstKeyword());
//       assertEquals(false, compilerOptions0.isExternExportsEnabled());
//       assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
//       assertEquals(CompilerOptions.TweakProcessing.OFF, compilerOptions0.getTweakProcessing());
//       assertFalse(compilerOptions0.collapseVariableDeclarations);
//       assertFalse(compilerOptions0.markAsCompiled);
//       assertFalse(compilerOptions0.foldConstants);
//       assertFalse(compilerOptions0.labelRenaming);
//       assertFalse(compilerOptions0.aliasAllStrings);
//       assertFalse(compilerOptions0.exportTestFunctions);
//       assertFalse(compilerOptions0.optimizeCalls);
//       assertFalse(compilerOptions0.generateExports);
//       assertFalse(compilerOptions0.deadAssignmentElimination);
//       assertFalse(compilerOptions0.checkEs5Strict);
//       assertFalse(compilerOptions0.collapseProperties);
//       assertFalse(compilerOptions0.inlineGetters);
//       assertFalse(compilerOptions0.decomposeExpressions);
//       assertFalse(compilerOptions0.collapseAnonymousFunctions);
//       assertFalse(compilerOptions0.optimizeParameters);
//       assertFalse(compilerOptions0.convertToDottedProperties);
//       assertFalse(compilerOptions0.checkTypedPropertyCalls);
//       assertFalse(compilerOptions0.instrumentForCoverage);
//       assertFalse(compilerOptions0.reserveRawExports);
//       assertFalse(compilerOptions0.crossModuleMethodMotion);
//       assertFalse(compilerOptions0.inlineConstantVars);
//       assertFalse(compilerOptions0.closurePass);
//       assertFalse(compilerOptions0.allowLegacyJsMessages);
//       assertFalse(compilerOptions0.removeTryCatchFinally);
//       assertFalse(compilerOptions0.removeEmptyFunctions);
//       assertFalse(compilerOptions0.checkControlStructures);
//       assertFalse(compilerOptions0.inlineVariables);
//       assertFalse(compilerOptions0.ambiguateProperties);
//       assertFalse(compilerOptions0.groupVariableDeclarations);
//       assertFalse(compilerOptions0.optimizeReturns);
//       assertFalse(compilerOptions0.aliasExternals);
//       assertFalse(compilerOptions0.checkDuplicateMessages);
//       assertFalse(compilerOptions0.strictMessageReplacement);
//       assertFalse(compilerOptions0.disambiguateProperties);
//       assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
//       assertFalse(compilerOptions0.computeFunctionSideEffects);
//       assertFalse(compilerOptions0.inlineLocalVariables);
//       assertFalse(compilerOptions0.generatePseudoNames);
//       assertFalse(compilerOptions0.removeUnusedLocalVars);
//       assertFalse(compilerOptions0.checkCaja);
//       assertFalse(compilerOptions0.removeDeadCode);
//       assertFalse(compilerOptions0.printInputDelimiter);
//       assertFalse(compilerOptions0.inlineLocalFunctions);
//       assertFalse(compilerOptions0.coalesceVariableNames);
//       assertFalse(compilerOptions0.devirtualizePrototypeMethods);
//       assertFalse(compilerOptions0.optimizeArgumentsArray);
//       assertFalse(compilerOptions0.inlineAnonymousFunctionExpressions);
//       assertFalse(compilerOptions0.checkUnusedPropertiesEarly);
//       assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
//       assertFalse(compilerOptions0.prettyPrint);
//       assertFalse(compilerOptions0.tightenTypes);
//       assertFalse(compilerOptions0.inlineFunctions);
//       assertFalse(compilerOptions0.crossModuleCodeMotion);
//       assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
//       assertFalse(compilerOptions0.lineBreak);
//       assertFalse(compilerOptions0.moveFunctionDeclarations);
//       assertFalse(compilerOptions0.gatherCssNames);
//       assertFalse(compilerOptions0.checkSuspiciousCode);
//       assertFalse(compilerOptions0.checkSymbols);
//       assertFalse(compilerOptions0.inferTypesInGlobalScope);
//       assertFalse(compilerOptions0.recordFunctionInformation);
//       assertFalse(compilerOptions0.smartNameRemoval);
//       assertFalse(compilerOptions0.flowSensitiveInlineVariables);
//       assertFalse(compilerOptions0.instrumentForCoverageOnly);
//       assertFalse(compilerOptions0.markNoSideEffectCalls);
//       assertFalse(compilerOptions0.specializeInitialModule);
//       assertFalse(compilerOptions0.removeUnusedVars);
//       assertFalse(compilerOptions0.ideMode);
//       assertFalse(compilerOptions0.ignoreCajaProperties);
//       assertFalse(compilerOptions0.checkTypes);
//       assertFalse(compilerOptions0.rewriteFunctionExpressions);
//       assertFalse(compilerOptions0.aliasKeywords);
//       assertNotNull(compilerOptions0);
//       
//       Result result0 = compiler0.compile((List<JSSourceFile>) linkedList0, (List<JSSourceFile>) linkedList0, compilerOptions0);
//       assertEquals(0, compiler0.getWarningCount());
//       assertEquals(false, compiler0.hasErrors());
//       assertEquals(false, compiler0.acceptEcmaScript5());
//       assertEquals(false, compiler0.isIdeMode());
//       assertEquals(0, compiler0.getErrorCount());
//       assertEquals(false, compiler0.isTypeCheckingEnabled());
//       assertEquals(false, compiler0.acceptConstKeyword());
//       assertEquals(0, linkedList0.size());
//       assertEquals("[]", linkedList0.toString());
//       assertEquals(false, compilerOptions0.isExternExportsEnabled());
//       assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
//       assertEquals(CompilerOptions.TweakProcessing.OFF, compilerOptions0.getTweakProcessing());
//       assertFalse(compilerOptions0.collapseVariableDeclarations);
//       assertFalse(compilerOptions0.markAsCompiled);
//       assertFalse(compilerOptions0.foldConstants);
//       assertFalse(compilerOptions0.labelRenaming);
//       assertFalse(compilerOptions0.aliasAllStrings);
//       assertFalse(compilerOptions0.exportTestFunctions);
//       assertFalse(compilerOptions0.optimizeCalls);
//       assertFalse(compilerOptions0.generateExports);
//       assertFalse(compilerOptions0.deadAssignmentElimination);
//       assertFalse(compilerOptions0.checkEs5Strict);
//       assertFalse(compilerOptions0.collapseProperties);
//       assertFalse(compilerOptions0.inlineGetters);
//       assertFalse(compilerOptions0.decomposeExpressions);
//       assertFalse(compilerOptions0.collapseAnonymousFunctions);
//       assertFalse(compilerOptions0.optimizeParameters);
//       assertFalse(compilerOptions0.convertToDottedProperties);
//       assertFalse(compilerOptions0.checkTypedPropertyCalls);
//       assertFalse(compilerOptions0.instrumentForCoverage);
//       assertFalse(compilerOptions0.reserveRawExports);
//       assertFalse(compilerOptions0.crossModuleMethodMotion);
//       assertFalse(compilerOptions0.inlineConstantVars);
//       assertFalse(compilerOptions0.closurePass);
//       assertFalse(compilerOptions0.allowLegacyJsMessages);
//       assertFalse(compilerOptions0.removeTryCatchFinally);
//       assertFalse(compilerOptions0.removeEmptyFunctions);
//       assertFalse(compilerOptions0.checkControlStructures);
//       assertFalse(compilerOptions0.inlineVariables);
//       assertFalse(compilerOptions0.ambiguateProperties);
//       assertFalse(compilerOptions0.groupVariableDeclarations);
//       assertFalse(compilerOptions0.optimizeReturns);
//       assertFalse(compilerOptions0.aliasExternals);
//       assertFalse(compilerOptions0.checkDuplicateMessages);
//       assertFalse(compilerOptions0.strictMessageReplacement);
//       assertFalse(compilerOptions0.disambiguateProperties);
//       assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
//       assertFalse(compilerOptions0.computeFunctionSideEffects);
//       assertFalse(compilerOptions0.inlineLocalVariables);
//       assertFalse(compilerOptions0.generatePseudoNames);
//       assertFalse(compilerOptions0.removeUnusedLocalVars);
//       assertFalse(compilerOptions0.checkCaja);
//       assertFalse(compilerOptions0.removeDeadCode);
//       assertFalse(compilerOptions0.printInputDelimiter);
//       assertFalse(compilerOptions0.inlineLocalFunctions);
//       assertFalse(compilerOptions0.coalesceVariableNames);
//       assertFalse(compilerOptions0.devirtualizePrototypeMethods);
//       assertFalse(compilerOptions0.optimizeArgumentsArray);
//       assertFalse(compilerOptions0.inlineAnonymousFunctionExpressions);
//       assertFalse(compilerOptions0.checkUnusedPropertiesEarly);
//       assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
//       assertFalse(compilerOptions0.prettyPrint);
//       assertFalse(compilerOptions0.tightenTypes);
//       assertFalse(compilerOptions0.inlineFunctions);
//       assertFalse(compilerOptions0.crossModuleCodeMotion);
//       assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
//       assertFalse(compilerOptions0.lineBreak);
//       assertFalse(compilerOptions0.moveFunctionDeclarations);
//       assertFalse(compilerOptions0.gatherCssNames);
//       assertFalse(compilerOptions0.checkSuspiciousCode);
//       assertFalse(compilerOptions0.checkSymbols);
//       assertFalse(compilerOptions0.inferTypesInGlobalScope);
//       assertFalse(compilerOptions0.recordFunctionInformation);
//       assertFalse(compilerOptions0.smartNameRemoval);
//       assertFalse(compilerOptions0.flowSensitiveInlineVariables);
//       assertFalse(compilerOptions0.instrumentForCoverageOnly);
//       assertFalse(compilerOptions0.markNoSideEffectCalls);
//       assertFalse(compilerOptions0.specializeInitialModule);
//       assertFalse(compilerOptions0.removeUnusedVars);
//       assertFalse(compilerOptions0.ideMode);
//       assertFalse(compilerOptions0.ignoreCajaProperties);
//       assertFalse(compilerOptions0.checkTypes);
//       assertFalse(compilerOptions0.rewriteFunctionExpressions);
//       assertFalse(compilerOptions0.aliasKeywords);
//       assertNotNull(result0);
//       
//       int int0 = 1875;
//       VarCheck varCheck0 = new VarCheck(compiler0);
//       assertEquals(0, compiler0.getWarningCount());
//       assertEquals(false, compiler0.hasErrors());
//       assertEquals(false, compiler0.acceptEcmaScript5());
//       assertEquals(false, compiler0.isIdeMode());
//       assertEquals(0, compiler0.getErrorCount());
//       assertEquals(false, compiler0.isTypeCheckingEnabled());
//       assertEquals(false, compiler0.acceptConstKeyword());
//       assertNotNull(varCheck0);
//       
//       Node node1 = new Node(int0, node0, int0, int0);
//       assertEquals(false, node1.isNoSideEffectsCall());
//       assertEquals(false, node1.isQualifiedName());
//       assertEquals(1875, node1.getType());
//       assertEquals(1875, node1.getLineno());
//       assertEquals(false, node1.isLocalResultCall());
//       assertEquals(false, node1.isQuotedString());
//       assertEquals(true, node1.hasOneChild());
//       assertEquals(false, node1.isOptionalArg());
//       assertEquals(false, node1.hasMoreThanOneChild());
//       assertEquals(false, node1.isUnscopedQualifiedName());
//       assertEquals(1875, node1.getCharno());
//       assertEquals(false, node1.isSyntheticBlock());
//       assertEquals(true, node1.hasChildren());
//       assertEquals(false, node1.wasEmptyNode());
//       assertEquals(false, node1.isVarArgs());
//       assertEquals(false, node1.isOnlyModifiesThisCall());
//       assertEquals(0, node1.getSideEffectFlags());
//       assertEquals(1, node1.getChildCount());
//       assertEquals(0, compiler0.getWarningCount());
//       assertEquals(false, compiler0.hasErrors());
//       assertEquals(false, compiler0.acceptEcmaScript5());
//       assertEquals(false, compiler0.isIdeMode());
//       assertEquals(0, compiler0.getErrorCount());
//       assertEquals(false, compiler0.isTypeCheckingEnabled());
//       assertEquals(false, compiler0.acceptConstKeyword());
//       assertEquals(0, node0.getSideEffectFlags());
//       assertEquals(false, node0.isVarArgs());
//       assertEquals(false, node0.hasOneChild());
//       assertEquals(false, node0.isNoSideEffectsCall());
//       assertEquals(false, node0.isUnscopedQualifiedName());
//       assertEquals(true, node0.hasMoreThanOneChild());
//       assertEquals(false, node0.isLocalResultCall());
//       assertEquals(1, node0.getLineno());
//       assertEquals(false, node0.isQualifiedName());
//       assertEquals(false, node0.isOnlyModifiesThisCall());
//       assertEquals(false, node0.isQuotedString());
//       assertEquals(false, node0.wasEmptyNode());
//       assertEquals(false, node0.isOptionalArg());
//       assertEquals(true, node0.isSyntheticBlock());
//       assertEquals(true, node0.hasChildren());
//       assertEquals(0, node0.getCharno());
//       assertEquals(2, node0.getChildCount());
//       assertEquals(132, node0.getType());
//       assertNotNull(node1);
//       assertNotSame(string0, string1);
//       assertNotSame(node1, node0);
//       assertNotSame(string1, string0);
//       assertNotSame(node0, node1);
//       assertFalse(string0.equals((Object)string1));
//       assertFalse(node1.equals((Object)node0));
//       assertFalse(string1.equals((Object)string0));
//       assertFalse(node0.equals((Object)node1));
//       
//       varCheck0.process(node0, node0);
//       assertEquals(true, compiler0.hasErrors());
//       assertEquals(3, compiler0.getWarningCount());
//       assertEquals(false, compiler0.acceptEcmaScript5());
//       assertEquals(false, compiler0.isIdeMode());
//       assertEquals(false, compiler0.isTypeCheckingEnabled());
//       assertEquals(3, compiler0.getErrorCount());
//       assertEquals(false, compiler0.acceptConstKeyword());
//       assertEquals(0, node0.getSideEffectFlags());
//       assertEquals(false, node0.isVarArgs());
//       assertEquals(false, node0.hasOneChild());
//       assertEquals(false, node0.isNoSideEffectsCall());
//       assertEquals(false, node0.isUnscopedQualifiedName());
//       assertEquals(true, node0.hasMoreThanOneChild());
//       assertEquals(false, node0.isLocalResultCall());
//       assertEquals(1, node0.getLineno());
//       assertEquals(false, node0.isQualifiedName());
//       assertEquals(false, node0.isOnlyModifiesThisCall());
//       assertEquals(false, node0.isQuotedString());
//       assertEquals(false, node0.wasEmptyNode());
//       assertEquals(false, node0.isOptionalArg());
//       assertEquals(true, node0.isSyntheticBlock());
//       assertEquals(true, node0.hasChildren());
//       assertEquals(0, node0.getCharno());
//       assertEquals(2, node0.getChildCount());
//       assertEquals(132, node0.getType());
//       assertNotSame(string0, string1);
//       assertNotSame(string1, string0);
//       assertNotSame(node0, node1);
//       assertFalse(string0.equals((Object)string1));
//       assertFalse(string1.equals((Object)string0));
//       assertFalse(node0.equals((Object)node1));
//   }

  @Test
  public void test1()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      assertNotNull(compiler0);
      
      GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
      assertEquals("goog.exportSymbol", googleCodingConvention0.getExportSymbolFunction());
      assertEquals("goog.global", googleCodingConvention0.getGlobalObject());
      assertEquals("goog.abstractMethod", googleCodingConvention0.getAbstractMethodName());
      assertNull(googleCodingConvention0.getDelegateSuperclassName());
      assertEquals("goog.exportProperty", googleCodingConvention0.getExportPropertyFunction());
      assertNotNull(googleCodingConvention0);
      
      compiler0.defaultCodingConvention = (CodingConvention) googleCodingConvention0;
      assertEquals("goog.abstractMethod", compiler0.defaultCodingConvention.getAbstractMethodName());
      assertNull(compiler0.defaultCodingConvention.getDelegateSuperclassName());
      assertEquals("goog.global", compiler0.defaultCodingConvention.getGlobalObject());
      assertEquals("goog.exportSymbol", compiler0.defaultCodingConvention.getExportSymbolFunction());
      assertEquals("goog.exportProperty", compiler0.defaultCodingConvention.getExportPropertyFunction());
      assertEquals("goog.exportSymbol", googleCodingConvention0.getExportSymbolFunction());
      assertEquals("goog.global", googleCodingConvention0.getGlobalObject());
      assertEquals("goog.abstractMethod", googleCodingConvention0.getAbstractMethodName());
      assertNull(googleCodingConvention0.getDelegateSuperclassName());
      assertEquals("goog.exportProperty", googleCodingConvention0.getExportPropertyFunction());
      assertNotNull(compiler0.defaultCodingConvention);
      
      String string0 = "X";
      String string1 = "SI.nGGS>JsET.J;bL";
      assertNotSame(string1, string0);
      
      Node node0 = compiler0.parseSyntheticCode(string0, string1);
      assertEquals(2, node0.getChildCount());
      assertEquals(0, node0.getCharno());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(true, node0.isSyntheticBlock());
      assertEquals(1, node0.getLineno());
      assertEquals(true, node0.hasMoreThanOneChild());
      assertEquals(132, node0.getType());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(true, node0.hasChildren());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.acceptEcmaScript5());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertNotNull(node0);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      
      int int0 = 1875;
      VarCheck varCheck0 = new VarCheck(compiler0);
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.acceptEcmaScript5());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertNotNull(varCheck0);
      
      Node node1 = new Node(int0, node0, int0, int0);
      assertEquals(1875, node1.getLineno());
      assertEquals(true, node1.hasOneChild());
      assertEquals(false, node1.isOnlyModifiesThisCall());
      assertEquals(false, node1.isQuotedString());
      assertEquals(1875, node1.getCharno());
      assertEquals(false, node1.isOptionalArg());
      assertEquals(true, node1.hasChildren());
      assertEquals(0, node1.getSideEffectFlags());
      assertEquals(false, node1.isUnscopedQualifiedName());
      assertEquals(false, node1.wasEmptyNode());
      assertEquals(false, node1.hasMoreThanOneChild());
      assertEquals(false, node1.isLocalResultCall());
      assertEquals(false, node1.isVarArgs());
      assertEquals(1, node1.getChildCount());
      assertEquals(false, node1.isSyntheticBlock());
      assertEquals(1875, node1.getType());
      assertEquals(false, node1.isNoSideEffectsCall());
      assertEquals(false, node1.isQualifiedName());
      assertEquals(2, node0.getChildCount());
      assertEquals(0, node0.getCharno());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(true, node0.isSyntheticBlock());
      assertEquals(1, node0.getLineno());
      assertEquals(true, node0.hasMoreThanOneChild());
      assertEquals(132, node0.getType());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(true, node0.hasChildren());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.acceptEcmaScript5());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertNotNull(node1);
      assertNotSame(string0, string1);
      assertNotSame(node1, node0);
      assertNotSame(node0, node1);
      assertNotSame(string1, string0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(node1.equals((Object)node0));
      assertFalse(node0.equals((Object)node1));
      assertFalse(string1.equals((Object)string0));
      
      // Undeclared exception!
      try {
        varCheck0.process(node0, node0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test2() {}
//   @Test
//   public void test2()  throws Throwable  {
//       Compiler compiler0 = new Compiler();
//       assertNotNull(compiler0);
//       
//       String string0 = "X";
//       Node node0 = compiler0.parseSyntheticCode(string0, string0);
//       assertEquals(false, node0.isVarArgs());
//       assertEquals(false, node0.wasEmptyNode());
//       assertEquals(false, node0.isOnlyModifiesThisCall());
//       assertEquals(false, node0.isNoSideEffectsCall());
//       assertEquals(1, node0.getChildCount());
//       assertEquals(0, node0.getSideEffectFlags());
//       assertEquals(false, node0.isQuotedString());
//       assertEquals(false, node0.isOptionalArg());
//       assertEquals(true, node0.isSyntheticBlock());
//       assertEquals(true, node0.hasChildren());
//       assertEquals(0, node0.getCharno());
//       assertEquals(false, node0.isUnscopedQualifiedName());
//       assertEquals(1, node0.getLineno());
//       assertEquals(false, node0.hasMoreThanOneChild());
//       assertEquals(false, node0.isQualifiedName());
//       assertEquals(true, node0.hasOneChild());
//       assertEquals(false, node0.isLocalResultCall());
//       assertEquals(132, node0.getType());
//       assertEquals(0, compiler0.getWarningCount());
//       assertEquals(false, compiler0.isIdeMode());
//       assertEquals(0, compiler0.getErrorCount());
//       assertEquals(false, compiler0.acceptEcmaScript5());
//       assertEquals(false, compiler0.hasErrors());
//       assertEquals(false, compiler0.isTypeCheckingEnabled());
//       assertEquals(false, compiler0.acceptConstKeyword());
//       assertNotNull(node0);
//       
//       LinkedList<JSSourceFile> linkedList0 = new LinkedList<JSSourceFile>();
//       assertEquals(0, linkedList0.size());
//       assertEquals("[]", linkedList0.toString());
//       assertNotNull(linkedList0);
//       
//       CompilerOptions compilerOptions0 = compiler0.options;
//       assertEquals(0, compiler0.getWarningCount());
//       assertEquals(false, compiler0.isIdeMode());
//       assertEquals(0, compiler0.getErrorCount());
//       assertEquals(false, compiler0.acceptEcmaScript5());
//       assertEquals(false, compiler0.hasErrors());
//       assertEquals(false, compiler0.isTypeCheckingEnabled());
//       assertEquals(false, compiler0.acceptConstKeyword());
//       assertEquals(CompilerOptions.TweakProcessing.OFF, compilerOptions0.getTweakProcessing());
//       assertEquals(false, compilerOptions0.isExternExportsEnabled());
//       assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
//       assertFalse(compilerOptions0.inlineGetters);
//       assertFalse(compilerOptions0.prettyPrint);
//       assertFalse(compilerOptions0.optimizeArgumentsArray);
//       assertFalse(compilerOptions0.convertToDottedProperties);
//       assertFalse(compilerOptions0.instrumentForCoverageOnly);
//       assertFalse(compilerOptions0.checkControlStructures);
//       assertFalse(compilerOptions0.disambiguateProperties);
//       assertFalse(compilerOptions0.removeUnusedLocalVars);
//       assertFalse(compilerOptions0.closurePass);
//       assertFalse(compilerOptions0.checkTypes);
//       assertFalse(compilerOptions0.inlineVariables);
//       assertFalse(compilerOptions0.moveFunctionDeclarations);
//       assertFalse(compilerOptions0.collapseAnonymousFunctions);
//       assertFalse(compilerOptions0.ignoreCajaProperties);
//       assertFalse(compilerOptions0.checkSymbols);
//       assertFalse(compilerOptions0.checkUnusedPropertiesEarly);
//       assertFalse(compilerOptions0.collapseVariableDeclarations);
//       assertFalse(compilerOptions0.aliasAllStrings);
//       assertFalse(compilerOptions0.gatherCssNames);
//       assertFalse(compilerOptions0.checkCaja);
//       assertFalse(compilerOptions0.crossModuleMethodMotion);
//       assertFalse(compilerOptions0.inlineFunctions);
//       assertFalse(compilerOptions0.specializeInitialModule);
//       assertFalse(compilerOptions0.removeEmptyFunctions);
//       assertFalse(compilerOptions0.inlineLocalFunctions);
//       assertFalse(compilerOptions0.coalesceVariableNames);
//       assertFalse(compilerOptions0.rewriteFunctionExpressions);
//       assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
//       assertFalse(compilerOptions0.labelRenaming);
//       assertFalse(compilerOptions0.exportTestFunctions);
//       assertFalse(compilerOptions0.groupVariableDeclarations);
//       assertFalse(compilerOptions0.optimizeParameters);
//       assertFalse(compilerOptions0.crossModuleCodeMotion);
//       assertFalse(compilerOptions0.optimizeCalls);
//       assertFalse(compilerOptions0.computeFunctionSideEffects);
//       assertFalse(compilerOptions0.inlineAnonymousFunctionExpressions);
//       assertFalse(compilerOptions0.printInputDelimiter);
//       assertFalse(compilerOptions0.flowSensitiveInlineVariables);
//       assertFalse(compilerOptions0.strictMessageReplacement);
//       assertFalse(compilerOptions0.removeUnusedVars);
//       assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
//       assertFalse(compilerOptions0.foldConstants);
//       assertFalse(compilerOptions0.collapseProperties);
//       assertFalse(compilerOptions0.aliasExternals);
//       assertFalse(compilerOptions0.lineBreak);
//       assertFalse(compilerOptions0.checkEs5Strict);
//       assertFalse(compilerOptions0.decomposeExpressions);
//       assertFalse(compilerOptions0.instrumentForCoverage);
//       assertFalse(compilerOptions0.checkDuplicateMessages);
//       assertFalse(compilerOptions0.smartNameRemoval);
//       assertFalse(compilerOptions0.generatePseudoNames);
//       assertFalse(compilerOptions0.recordFunctionInformation);
//       assertFalse(compilerOptions0.checkTypedPropertyCalls);
//       assertFalse(compilerOptions0.generateExports);
//       assertFalse(compilerOptions0.optimizeReturns);
//       assertFalse(compilerOptions0.markNoSideEffectCalls);
//       assertFalse(compilerOptions0.inferTypesInGlobalScope);
//       assertFalse(compilerOptions0.removeDeadCode);
//       assertFalse(compilerOptions0.allowLegacyJsMessages);
//       assertFalse(compilerOptions0.ambiguateProperties);
//       assertFalse(compilerOptions0.inlineLocalVariables);
//       assertFalse(compilerOptions0.tightenTypes);
//       assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
//       assertFalse(compilerOptions0.removeTryCatchFinally);
//       assertFalse(compilerOptions0.aliasKeywords);
//       assertFalse(compilerOptions0.ideMode);
//       assertFalse(compilerOptions0.markAsCompiled);
//       assertFalse(compilerOptions0.deadAssignmentElimination);
//       assertFalse(compilerOptions0.reserveRawExports);
//       assertFalse(compilerOptions0.inlineConstantVars);
//       assertFalse(compilerOptions0.checkSuspiciousCode);
//       assertFalse(compilerOptions0.devirtualizePrototypeMethods);
//       assertNotNull(compilerOptions0);
//       
//       Result result0 = compiler0.compile((List<JSSourceFile>) linkedList0, (List<JSSourceFile>) linkedList0, compilerOptions0);
//       assertEquals(0, linkedList0.size());
//       assertEquals("[]", linkedList0.toString());
//       assertEquals(0, compiler0.getWarningCount());
//       assertEquals(false, compiler0.isIdeMode());
//       assertEquals(0, compiler0.getErrorCount());
//       assertEquals(false, compiler0.acceptEcmaScript5());
//       assertEquals(false, compiler0.hasErrors());
//       assertEquals(false, compiler0.isTypeCheckingEnabled());
//       assertEquals(false, compiler0.acceptConstKeyword());
//       assertEquals(CompilerOptions.TweakProcessing.OFF, compilerOptions0.getTweakProcessing());
//       assertEquals(false, compilerOptions0.isExternExportsEnabled());
//       assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
//       assertFalse(compilerOptions0.inlineGetters);
//       assertFalse(compilerOptions0.prettyPrint);
//       assertFalse(compilerOptions0.optimizeArgumentsArray);
//       assertFalse(compilerOptions0.convertToDottedProperties);
//       assertFalse(compilerOptions0.instrumentForCoverageOnly);
//       assertFalse(compilerOptions0.checkControlStructures);
//       assertFalse(compilerOptions0.disambiguateProperties);
//       assertFalse(compilerOptions0.removeUnusedLocalVars);
//       assertFalse(compilerOptions0.closurePass);
//       assertFalse(compilerOptions0.checkTypes);
//       assertFalse(compilerOptions0.inlineVariables);
//       assertFalse(compilerOptions0.moveFunctionDeclarations);
//       assertFalse(compilerOptions0.collapseAnonymousFunctions);
//       assertFalse(compilerOptions0.ignoreCajaProperties);
//       assertFalse(compilerOptions0.checkSymbols);
//       assertFalse(compilerOptions0.checkUnusedPropertiesEarly);
//       assertFalse(compilerOptions0.collapseVariableDeclarations);
//       assertFalse(compilerOptions0.aliasAllStrings);
//       assertFalse(compilerOptions0.gatherCssNames);
//       assertFalse(compilerOptions0.checkCaja);
//       assertFalse(compilerOptions0.crossModuleMethodMotion);
//       assertFalse(compilerOptions0.inlineFunctions);
//       assertFalse(compilerOptions0.specializeInitialModule);
//       assertFalse(compilerOptions0.removeEmptyFunctions);
//       assertFalse(compilerOptions0.inlineLocalFunctions);
//       assertFalse(compilerOptions0.coalesceVariableNames);
//       assertFalse(compilerOptions0.rewriteFunctionExpressions);
//       assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
//       assertFalse(compilerOptions0.labelRenaming);
//       assertFalse(compilerOptions0.exportTestFunctions);
//       assertFalse(compilerOptions0.groupVariableDeclarations);
//       assertFalse(compilerOptions0.optimizeParameters);
//       assertFalse(compilerOptions0.crossModuleCodeMotion);
//       assertFalse(compilerOptions0.optimizeCalls);
//       assertFalse(compilerOptions0.computeFunctionSideEffects);
//       assertFalse(compilerOptions0.inlineAnonymousFunctionExpressions);
//       assertFalse(compilerOptions0.printInputDelimiter);
//       assertFalse(compilerOptions0.flowSensitiveInlineVariables);
//       assertFalse(compilerOptions0.strictMessageReplacement);
//       assertFalse(compilerOptions0.removeUnusedVars);
//       assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
//       assertFalse(compilerOptions0.foldConstants);
//       assertFalse(compilerOptions0.collapseProperties);
//       assertFalse(compilerOptions0.aliasExternals);
//       assertFalse(compilerOptions0.lineBreak);
//       assertFalse(compilerOptions0.checkEs5Strict);
//       assertFalse(compilerOptions0.decomposeExpressions);
//       assertFalse(compilerOptions0.instrumentForCoverage);
//       assertFalse(compilerOptions0.checkDuplicateMessages);
//       assertFalse(compilerOptions0.smartNameRemoval);
//       assertFalse(compilerOptions0.generatePseudoNames);
//       assertFalse(compilerOptions0.recordFunctionInformation);
//       assertFalse(compilerOptions0.checkTypedPropertyCalls);
//       assertFalse(compilerOptions0.generateExports);
//       assertFalse(compilerOptions0.optimizeReturns);
//       assertFalse(compilerOptions0.markNoSideEffectCalls);
//       assertFalse(compilerOptions0.inferTypesInGlobalScope);
//       assertFalse(compilerOptions0.removeDeadCode);
//       assertFalse(compilerOptions0.allowLegacyJsMessages);
//       assertFalse(compilerOptions0.ambiguateProperties);
//       assertFalse(compilerOptions0.inlineLocalVariables);
//       assertFalse(compilerOptions0.tightenTypes);
//       assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
//       assertFalse(compilerOptions0.removeTryCatchFinally);
//       assertFalse(compilerOptions0.aliasKeywords);
//       assertFalse(compilerOptions0.ideMode);
//       assertFalse(compilerOptions0.markAsCompiled);
//       assertFalse(compilerOptions0.deadAssignmentElimination);
//       assertFalse(compilerOptions0.reserveRawExports);
//       assertFalse(compilerOptions0.inlineConstantVars);
//       assertFalse(compilerOptions0.checkSuspiciousCode);
//       assertFalse(compilerOptions0.devirtualizePrototypeMethods);
//       assertNotNull(result0);
//       
//       Node node1 = Normalize.parseAndNormalizeTestCode(compiler0, string0, string0);
//       assertEquals(false, node1.wasEmptyNode());
//       assertEquals(false, node1.isOnlyModifiesThisCall());
//       assertEquals(false, node1.isNoSideEffectsCall());
//       assertEquals(true, node1.isSyntheticBlock());
//       assertEquals(0, node1.getCharno());
//       assertEquals(132, node1.getType());
//       assertEquals(0, node1.getSideEffectFlags());
//       assertEquals(false, node1.isVarArgs());
//       assertEquals(false, node1.isOptionalArg());
//       assertEquals(true, node1.hasChildren());
//       assertEquals(false, node1.isLocalResultCall());
//       assertEquals(false, node1.isUnscopedQualifiedName());
//       assertEquals(true, node1.hasOneChild());
//       assertEquals(false, node1.isQualifiedName());
//       assertEquals(1, node1.getLineno());
//       assertEquals(false, node1.isQuotedString());
//       assertEquals(false, node1.hasMoreThanOneChild());
//       assertEquals(1, node1.getChildCount());
//       assertEquals(0, compiler0.getWarningCount());
//       assertEquals(false, compiler0.isIdeMode());
//       assertEquals(0, compiler0.getErrorCount());
//       assertEquals(false, compiler0.acceptEcmaScript5());
//       assertEquals(false, compiler0.hasErrors());
//       assertEquals(false, compiler0.isTypeCheckingEnabled());
//       assertEquals(false, compiler0.acceptConstKeyword());
//       assertNotNull(node1);
//       assertNotSame(node1, node0);
//       assertFalse(node1.equals((Object)node0));
//       
//       node0.addChildToBack(node1);
//       assertEquals(false, node0.isVarArgs());
//       assertEquals(false, node0.wasEmptyNode());
//       assertEquals(true, node0.hasMoreThanOneChild());
//       assertEquals(false, node0.isOnlyModifiesThisCall());
//       assertEquals(false, node0.isNoSideEffectsCall());
//       assertEquals(0, node0.getSideEffectFlags());
//       assertEquals(false, node0.isQuotedString());
//       assertEquals(false, node0.isOptionalArg());
//       assertEquals(true, node0.isSyntheticBlock());
//       assertEquals(true, node0.hasChildren());
//       assertEquals(2, node0.getChildCount());
//       assertEquals(0, node0.getCharno());
//       assertEquals(false, node0.isUnscopedQualifiedName());
//       assertEquals(1, node0.getLineno());
//       assertEquals(false, node0.isQualifiedName());
//       assertEquals(false, node0.isLocalResultCall());
//       assertEquals(false, node0.hasOneChild());
//       assertEquals(132, node0.getType());
//       assertEquals(false, node1.wasEmptyNode());
//       assertEquals(false, node1.isOnlyModifiesThisCall());
//       assertEquals(false, node1.isNoSideEffectsCall());
//       assertEquals(true, node1.isSyntheticBlock());
//       assertEquals(0, node1.getCharno());
//       assertEquals(132, node1.getType());
//       assertEquals(0, node1.getSideEffectFlags());
//       assertEquals(false, node1.isVarArgs());
//       assertEquals(false, node1.isOptionalArg());
//       assertEquals(true, node1.hasChildren());
//       assertEquals(false, node1.isLocalResultCall());
//       assertEquals(false, node1.isUnscopedQualifiedName());
//       assertEquals(true, node1.hasOneChild());
//       assertEquals(false, node1.isQualifiedName());
//       assertEquals(1, node1.getLineno());
//       assertEquals(false, node1.isQuotedString());
//       assertEquals(false, node1.hasMoreThanOneChild());
//       assertEquals(1, node1.getChildCount());
//       assertEquals(0, compiler0.getWarningCount());
//       assertEquals(false, compiler0.isIdeMode());
//       assertEquals(0, compiler0.getErrorCount());
//       assertEquals(false, compiler0.acceptEcmaScript5());
//       assertEquals(false, compiler0.hasErrors());
//       assertEquals(false, compiler0.isTypeCheckingEnabled());
//       assertEquals(false, compiler0.acceptConstKeyword());
//       assertNotSame(node0, node1);
//       assertNotSame(node1, node0);
//       assertFalse(node0.equals((Object)node1));
//       assertFalse(node1.equals((Object)node0));
//       
//       int int0 = 1875;
//       VarCheck varCheck0 = new VarCheck(compiler0);
//       assertEquals(0, compiler0.getWarningCount());
//       assertEquals(false, compiler0.isIdeMode());
//       assertEquals(0, compiler0.getErrorCount());
//       assertEquals(false, compiler0.acceptEcmaScript5());
//       assertEquals(false, compiler0.hasErrors());
//       assertEquals(false, compiler0.isTypeCheckingEnabled());
//       assertEquals(false, compiler0.acceptConstKeyword());
//       assertNotNull(varCheck0);
//       
//       Node node2 = new Node(int0, node0, int0, int0);
//       assertEquals(false, node0.isVarArgs());
//       assertEquals(false, node0.wasEmptyNode());
//       assertEquals(true, node0.hasMoreThanOneChild());
//       assertEquals(false, node0.isOnlyModifiesThisCall());
//       assertEquals(false, node0.isNoSideEffectsCall());
//       assertEquals(0, node0.getSideEffectFlags());
//       assertEquals(false, node0.isQuotedString());
//       assertEquals(false, node0.isOptionalArg());
//       assertEquals(true, node0.isSyntheticBlock());
//       assertEquals(true, node0.hasChildren());
//       assertEquals(2, node0.getChildCount());
//       assertEquals(0, node0.getCharno());
//       assertEquals(false, node0.isUnscopedQualifiedName());
//       assertEquals(1, node0.getLineno());
//       assertEquals(false, node0.isQualifiedName());
//       assertEquals(false, node0.isLocalResultCall());
//       assertEquals(false, node0.hasOneChild());
//       assertEquals(132, node0.getType());
//       assertEquals(false, node2.isVarArgs());
//       assertEquals(false, node2.wasEmptyNode());
//       assertEquals(false, node2.hasMoreThanOneChild());
//       assertEquals(1, node2.getChildCount());
//       assertEquals(false, node2.isLocalResultCall());
//       assertEquals(false, node2.isUnscopedQualifiedName());
//       assertEquals(0, node2.getSideEffectFlags());
//       assertEquals(true, node2.hasChildren());
//       assertEquals(false, node2.isOnlyModifiesThisCall());
//       assertEquals(false, node2.isQuotedString());
//       assertEquals(1875, node2.getCharno());
//       assertEquals(false, node2.isOptionalArg());
//       assertEquals(false, node2.isSyntheticBlock());
//       assertEquals(1875, node2.getLineno());
//       assertEquals(1875, node2.getType());
//       assertEquals(false, node2.isNoSideEffectsCall());
//       assertEquals(true, node2.hasOneChild());
//       assertEquals(false, node2.isQualifiedName());
//       assertEquals(0, compiler0.getWarningCount());
//       assertEquals(false, compiler0.isIdeMode());
//       assertEquals(0, compiler0.getErrorCount());
//       assertEquals(false, compiler0.acceptEcmaScript5());
//       assertEquals(false, compiler0.hasErrors());
//       assertEquals(false, compiler0.isTypeCheckingEnabled());
//       assertEquals(false, compiler0.acceptConstKeyword());
//       assertNotNull(node2);
//       assertNotSame(node0, node1);
//       assertNotSame(node0, node2);
//       assertNotSame(node2, node1);
//       assertNotSame(node2, node0);
//       assertFalse(node0.equals((Object)node1));
//       assertFalse(node0.equals((Object)node2));
//       assertFalse(node2.equals((Object)node1));
//       assertFalse(node2.equals((Object)node0));
//       
//       varCheck0.process(node0, node0);
//       assertEquals(false, node0.isVarArgs());
//       assertEquals(false, node0.wasEmptyNode());
//       assertEquals(true, node0.hasMoreThanOneChild());
//       assertEquals(false, node0.isOnlyModifiesThisCall());
//       assertEquals(false, node0.isNoSideEffectsCall());
//       assertEquals(0, node0.getSideEffectFlags());
//       assertEquals(false, node0.isQuotedString());
//       assertEquals(false, node0.isOptionalArg());
//       assertEquals(true, node0.isSyntheticBlock());
//       assertEquals(true, node0.hasChildren());
//       assertEquals(2, node0.getChildCount());
//       assertEquals(0, node0.getCharno());
//       assertEquals(false, node0.isUnscopedQualifiedName());
//       assertEquals(1, node0.getLineno());
//       assertEquals(false, node0.isQualifiedName());
//       assertEquals(false, node0.isLocalResultCall());
//       assertEquals(false, node0.hasOneChild());
//       assertEquals(132, node0.getType());
//       assertEquals(true, compiler0.hasErrors());
//       assertEquals(false, compiler0.isIdeMode());
//       assertEquals(false, compiler0.acceptEcmaScript5());
//       assertEquals(2, compiler0.getWarningCount());
//       assertEquals(1, compiler0.getErrorCount());
//       assertEquals(false, compiler0.isTypeCheckingEnabled());
//       assertEquals(false, compiler0.acceptConstKeyword());
//       assertNotSame(node0, node1);
//       assertNotSame(node0, node2);
//       assertFalse(node0.equals((Object)node1));
//       assertFalse(node0.equals((Object)node2));
//   }

  @Test
  public void test3()  throws Throwable  {
      Node node0 = null;
      PrintStream printStream0 = null;
      Compiler compiler0 = new Compiler(printStream0);
      assertNotNull(compiler0);
      
      String string0 = "sXp{C@RrjYT";
      Node node1 = compiler0.parseTestCode(string0);
      assertEquals(false, node1.hasOneChild());
      assertEquals(false, node1.isQualifiedName());
      assertEquals(false, node1.isUnscopedQualifiedName());
      assertEquals(false, node1.wasEmptyNode());
      assertEquals(-1, node1.getCharno());
      assertEquals(false, node1.isOnlyModifiesThisCall());
      assertEquals(false, node1.isLocalResultCall());
      assertEquals(false, node1.isNoSideEffectsCall());
      assertEquals(0, node1.getSideEffectFlags());
      assertEquals(false, node1.isOptionalArg());
      assertEquals(false, node1.hasChildren());
      assertEquals(-1, node1.getLineno());
      assertEquals(0, node1.getChildCount());
      assertEquals(false, node1.isSyntheticBlock());
      assertEquals(125, node1.getType());
      assertEquals(false, node1.isQuotedString());
      assertEquals(false, node1.isVarArgs());
      assertEquals(false, node1.hasMoreThanOneChild());
      assertEquals(1, compiler0.getErrorCount());
      assertEquals(true, compiler0.hasErrors());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(false, compiler0.acceptEcmaScript5());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(0, compiler0.getWarningCount());
      assertNotNull(node1);
      
      boolean boolean0 = true;
      VarCheck varCheck0 = new VarCheck(compiler0, boolean0);
      assertEquals(1, compiler0.getErrorCount());
      assertEquals(true, compiler0.hasErrors());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(false, compiler0.acceptEcmaScript5());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(0, compiler0.getWarningCount());
      assertNotNull(varCheck0);
      
      // Undeclared exception!
      try {
        varCheck0.process(node0, node1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // INTERNAL COMPILER ERROR.
         // Please report this problem.
         // null
         //
      }
  }
}
