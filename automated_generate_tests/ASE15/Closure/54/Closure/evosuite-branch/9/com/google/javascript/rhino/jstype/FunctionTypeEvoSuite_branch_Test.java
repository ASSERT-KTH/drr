/*
 * This file was automatically generated by EvoSuite
 * Fri Dec 12 03:54:02 GMT 2014
 */

package com.google.javascript.rhino.jstype;

import static org.junit.Assert.*; import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.junit.Test;
import com.google.javascript.rhino.ErrorReporter;
import com.google.javascript.rhino.Node;
import com.google.javascript.rhino.SimpleErrorReporter;
import com.google.javascript.rhino.jstype.ArrowType;
import com.google.javascript.rhino.jstype.BooleanLiteralSet;
import com.google.javascript.rhino.jstype.ErrorFunctionType;
import com.google.javascript.rhino.jstype.FunctionType;
import com.google.javascript.rhino.jstype.InstanceObjectType;
import com.google.javascript.rhino.jstype.JSType;
import com.google.javascript.rhino.jstype.JSTypeNative;
import com.google.javascript.rhino.jstype.JSTypeRegistry;
import com.google.javascript.rhino.jstype.NamedType;
import com.google.javascript.rhino.jstype.NoObjectType;
import com.google.javascript.rhino.jstype.NoResolvedType;
import com.google.javascript.rhino.jstype.NoType;
import com.google.javascript.rhino.jstype.ObjectType;
import com.google.javascript.rhino.jstype.PrototypeObjectType;
import com.google.javascript.rhino.jstype.StaticScope;
import com.google.javascript.rhino.jstype.StringType;
import com.google.javascript.rhino.jstype.TemplateType;
import com.google.javascript.rhino.jstype.UnionType;
import com.google.javascript.rhino.jstype.UnknownType;
import java.util.List;
import java.util.Set;
import java.util.Stack;
import java.util.Vector;




import org.evosuite.runtime.mock.java.lang.MockIllegalStateException;
import org.junit.runner.RunWith;


public class FunctionTypeEvoSuite_branch_Test  {

  @Test
  public void test00() {}
//   @Test
//   public void test00()  throws Throwable  {
//       String string0 = "<No stack trace available>";
//       SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
//       assertNotNull(simpleErrorReporter0);
//       
//       JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0);
//       assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
//       assertNotNull(jSTypeRegistry0);
//       
//       TemplateType templateType0 = new TemplateType(jSTypeRegistry0, string0);
//       assertEquals(false, templateType0.isUnionType());
//       assertEquals("<No stack trace available>", templateType0.getReferenceName());
//       assertEquals(false, templateType0.isFunctionType());
//       assertEquals(false, templateType0.isEnumElementType());
//       assertEquals(false, templateType0.isStringValueType());
//       assertEquals(false, templateType0.isAllType());
//       assertEquals("<No stack trace available>", templateType0.toString());
//       assertEquals(false, templateType0.isVoidType());
//       assertEquals(false, templateType0.hasCachedValues());
//       assertEquals(false, templateType0.isFunctionPrototypeType());
//       assertEquals(false, templateType0.isRecordType());
//       assertEquals(BooleanLiteralSet.TRUE, templateType0.getPossibleToBooleanOutcomes());
//       assertEquals(false, templateType0.isResolved());
//       assertEquals(false, templateType0.isBooleanValueType());
//       assertEquals(false, templateType0.isNullType());
//       assertEquals(false, templateType0.isNumberValueType());
//       assertEquals(true, templateType0.isTemplateType());
//       assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
//       assertNotNull(templateType0);
//       
//       Stack<JSType> stack0 = new Stack<JSType>();
//       assertEquals("[]", stack0.toString());
//       assertEquals(true, stack0.empty());
//       assertEquals(0, stack0.size());
//       assertEquals(10, stack0.capacity());
//       assertEquals(true, stack0.isEmpty());
//       assertNotNull(stack0);
//       
//       boolean boolean0 = stack0.add((JSType) templateType0);
//       assertTrue(boolean0);
//       assertEquals(false, templateType0.isUnionType());
//       assertEquals("<No stack trace available>", templateType0.getReferenceName());
//       assertEquals(false, templateType0.isFunctionType());
//       assertEquals(false, templateType0.isEnumElementType());
//       assertEquals(false, templateType0.isStringValueType());
//       assertEquals(false, templateType0.isAllType());
//       assertEquals("<No stack trace available>", templateType0.toString());
//       assertEquals(false, templateType0.isVoidType());
//       assertEquals(false, templateType0.hasCachedValues());
//       assertEquals(false, templateType0.isFunctionPrototypeType());
//       assertEquals(false, templateType0.isRecordType());
//       assertEquals(BooleanLiteralSet.TRUE, templateType0.getPossibleToBooleanOutcomes());
//       assertEquals(false, templateType0.isResolved());
//       assertEquals(false, templateType0.isBooleanValueType());
//       assertEquals(false, templateType0.isNullType());
//       assertEquals(false, templateType0.isNumberValueType());
//       assertEquals(true, templateType0.isTemplateType());
//       assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
//       assertEquals(false, stack0.isEmpty());
//       assertEquals(false, stack0.empty());
//       assertEquals(1, stack0.size());
//       assertEquals(10, stack0.capacity());
//       assertEquals("[<No stack trace available>]", stack0.toString());
//       
//       FunctionType functionType0 = jSTypeRegistry0.createFunctionType((JSType) templateType0, (List<JSType>) stack0);
//       assertEquals(false, templateType0.isUnionType());
//       assertEquals("<No stack trace available>", templateType0.getReferenceName());
//       assertEquals(false, templateType0.isFunctionType());
//       assertEquals(false, templateType0.isEnumElementType());
//       assertEquals(false, templateType0.isStringValueType());
//       assertEquals(false, templateType0.isAllType());
//       assertEquals("<No stack trace available>", templateType0.toString());
//       assertEquals(false, templateType0.isVoidType());
//       assertEquals(false, templateType0.hasCachedValues());
//       assertEquals(false, templateType0.isFunctionPrototypeType());
//       assertEquals(false, templateType0.isRecordType());
//       assertEquals(BooleanLiteralSet.TRUE, templateType0.getPossibleToBooleanOutcomes());
//       assertEquals(false, templateType0.isResolved());
//       assertEquals(false, templateType0.isBooleanValueType());
//       assertEquals(false, templateType0.isNullType());
//       assertEquals(false, templateType0.isNumberValueType());
//       assertEquals(true, templateType0.isTemplateType());
//       assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
//       assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
//       assertEquals(false, functionType0.isCheckedUnknownType());
//       assertEquals(false, functionType0.hasInstanceType());
//       assertEquals(false, functionType0.isStringValueType());
//       assertEquals(false, functionType0.isNominalType());
//       assertEquals(false, functionType0.isConstructor());
//       assertEquals(false, functionType0.isFunctionPrototypeType());
//       assertEquals(false, functionType0.isNullType());
//       assertEquals(false, functionType0.isTemplateType());
//       assertEquals(1, functionType0.getMaxArguments());
//       assertEquals(false, functionType0.hasCachedValues());
//       assertEquals(false, functionType0.isAllType());
//       assertEquals(0, functionType0.getExtendedInterfacesCount());
//       assertEquals(false, functionType0.isNoType());
//       assertEquals(false, functionType0.isEnumType());
//       assertEquals(false, functionType0.isInterface());
//       assertEquals(false, functionType0.isBooleanValueType());
//       assertEquals(false, functionType0.isNumberValueType());
//       assertEquals(false, functionType0.isUnionType());
//       assertEquals(true, functionType0.isOrdinaryFunction());
//       assertEquals(false, functionType0.isReturnTypeInferred());
//       assertEquals(false, functionType0.isRecordType());
//       assertEquals(false, functionType0.isVoidType());
//       assertEquals(true, functionType0.canBeCalled());
//       assertEquals(false, functionType0.isEnumElementType());
//       assertEquals(true, functionType0.isFunctionType());
//       assertEquals(false, functionType0.isResolved());
//       assertEquals(false, functionType0.isNoObjectType());
//       assertEquals(false, functionType0.isNoResolvedType());
//       assertNull(functionType0.getTemplateTypeName());
//       assertEquals(false, stack0.isEmpty());
//       assertEquals(false, stack0.empty());
//       assertEquals(1, stack0.size());
//       assertEquals(10, stack0.capacity());
//       assertEquals("[<No stack trace available>]", stack0.toString());
//       assertNotNull(functionType0);
//       
//       String string1 = functionType0.toDebugHashCodeString();
//       assertEquals("function ({proxy:{9}}): {proxy:{9}}", string1);
//       assertFalse(string1.equals((Object)string0));
//       assertFalse(string0.equals((Object)string1));
//       assertEquals(false, templateType0.isUnionType());
//       assertEquals("<No stack trace available>", templateType0.getReferenceName());
//       assertEquals(false, templateType0.isFunctionType());
//       assertEquals(false, templateType0.isEnumElementType());
//       assertEquals(false, templateType0.isStringValueType());
//       assertEquals(false, templateType0.isAllType());
//       assertEquals("<No stack trace available>", templateType0.toString());
//       assertEquals(false, templateType0.isVoidType());
//       assertEquals(false, templateType0.hasCachedValues());
//       assertEquals(false, templateType0.isFunctionPrototypeType());
//       assertEquals(false, templateType0.isRecordType());
//       assertEquals(BooleanLiteralSet.TRUE, templateType0.getPossibleToBooleanOutcomes());
//       assertEquals(false, templateType0.isResolved());
//       assertEquals(false, templateType0.isBooleanValueType());
//       assertEquals(false, templateType0.isNullType());
//       assertEquals(false, templateType0.isNumberValueType());
//       assertEquals(true, templateType0.isTemplateType());
//       assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
//       assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
//       assertEquals(false, functionType0.isCheckedUnknownType());
//       assertEquals(false, functionType0.hasInstanceType());
//       assertEquals(false, functionType0.isStringValueType());
//       assertEquals(false, functionType0.isNominalType());
//       assertEquals(false, functionType0.isConstructor());
//       assertEquals(false, functionType0.isFunctionPrototypeType());
//       assertEquals(false, functionType0.isNullType());
//       assertEquals(false, functionType0.isTemplateType());
//       assertEquals(1, functionType0.getMaxArguments());
//       assertEquals(false, functionType0.hasCachedValues());
//       assertEquals(false, functionType0.isAllType());
//       assertEquals(0, functionType0.getExtendedInterfacesCount());
//       assertEquals(false, functionType0.isNoType());
//       assertEquals(false, functionType0.isEnumType());
//       assertEquals(false, functionType0.isInterface());
//       assertEquals(false, functionType0.isBooleanValueType());
//       assertEquals(false, functionType0.isNumberValueType());
//       assertEquals(false, functionType0.isUnionType());
//       assertEquals(true, functionType0.isOrdinaryFunction());
//       assertEquals(false, functionType0.isReturnTypeInferred());
//       assertEquals(false, functionType0.isRecordType());
//       assertEquals(false, functionType0.isVoidType());
//       assertEquals(true, functionType0.canBeCalled());
//       assertEquals(false, functionType0.isEnumElementType());
//       assertEquals(true, functionType0.isFunctionType());
//       assertEquals(false, functionType0.isResolved());
//       assertEquals(false, functionType0.isNoObjectType());
//       assertEquals(false, functionType0.isNoResolvedType());
//       assertNull(functionType0.getTemplateTypeName());
//       assertEquals(false, stack0.isEmpty());
//       assertEquals(false, stack0.empty());
//       assertEquals(1, stack0.size());
//       assertEquals(10, stack0.capacity());
//       assertEquals("[<No stack trace available>]", stack0.toString());
//       assertNotSame(string1, string0);
//       assertNotSame(string0, string1);
//       assertNotNull(string1);
//   }

  @Test
  public void test01() {}
//   @Test
//   public void test01()  throws Throwable  {
//       String string0 = "<No stack trace available>";
//       SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
//       assertNotNull(simpleErrorReporter0);
//       
//       JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0);
//       assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
//       assertNotNull(jSTypeRegistry0);
//       
//       TemplateType templateType0 = new TemplateType(jSTypeRegistry0, string0);
//       assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
//       assertEquals(false, templateType0.isBooleanValueType());
//       assertEquals(false, templateType0.hasCachedValues());
//       assertEquals(BooleanLiteralSet.TRUE, templateType0.getPossibleToBooleanOutcomes());
//       assertEquals(false, templateType0.isNullType());
//       assertEquals(false, templateType0.isVoidType());
//       assertEquals(false, templateType0.isRecordType());
//       assertEquals("<No stack trace available>", templateType0.toString());
//       assertEquals(false, templateType0.isResolved());
//       assertEquals(false, templateType0.isStringValueType());
//       assertEquals(false, templateType0.isFunctionType());
//       assertEquals("<No stack trace available>", templateType0.getReferenceName());
//       assertEquals(false, templateType0.isNumberValueType());
//       assertEquals(true, templateType0.isTemplateType());
//       assertEquals(false, templateType0.isAllType());
//       assertEquals(false, templateType0.isUnionType());
//       assertEquals(false, templateType0.isEnumElementType());
//       assertEquals(false, templateType0.isFunctionPrototypeType());
//       assertNotNull(templateType0);
//       
//       Stack<JSType> stack0 = new Stack<JSType>();
//       assertEquals(true, stack0.isEmpty());
//       assertEquals(0, stack0.size());
//       assertEquals(true, stack0.empty());
//       assertEquals(10, stack0.capacity());
//       assertEquals("[]", stack0.toString());
//       assertNotNull(stack0);
//       
//       FunctionType functionType0 = jSTypeRegistry0.createFunctionType((JSType) templateType0, (List<JSType>) stack0);
//       assertEquals(true, stack0.isEmpty());
//       assertEquals(0, stack0.size());
//       assertEquals(true, stack0.empty());
//       assertEquals(10, stack0.capacity());
//       assertEquals("[]", stack0.toString());
//       assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
//       assertEquals(false, templateType0.isBooleanValueType());
//       assertEquals(false, templateType0.hasCachedValues());
//       assertEquals(BooleanLiteralSet.TRUE, templateType0.getPossibleToBooleanOutcomes());
//       assertEquals(false, templateType0.isNullType());
//       assertEquals(false, templateType0.isVoidType());
//       assertEquals(false, templateType0.isRecordType());
//       assertEquals("<No stack trace available>", templateType0.toString());
//       assertEquals(false, templateType0.isResolved());
//       assertEquals(false, templateType0.isStringValueType());
//       assertEquals(false, templateType0.isFunctionType());
//       assertEquals("<No stack trace available>", templateType0.getReferenceName());
//       assertEquals(false, templateType0.isNumberValueType());
//       assertEquals(true, templateType0.isTemplateType());
//       assertEquals(false, templateType0.isAllType());
//       assertEquals(false, templateType0.isUnionType());
//       assertEquals(false, templateType0.isEnumElementType());
//       assertEquals(false, templateType0.isFunctionPrototypeType());
//       assertEquals(false, functionType0.isEnumType());
//       assertEquals(false, functionType0.hasInstanceType());
//       assertEquals(false, functionType0.isInterface());
//       assertEquals(false, functionType0.isResolved());
//       assertEquals(false, functionType0.isEnumElementType());
//       assertEquals(false, functionType0.isNullType());
//       assertEquals(true, functionType0.isFunctionType());
//       assertEquals(false, functionType0.isNumberValueType());
//       assertEquals(false, functionType0.isConstructor());
//       assertEquals(false, functionType0.isStringValueType());
//       assertEquals(false, functionType0.isNoType());
//       assertEquals(false, functionType0.isNoObjectType());
//       assertEquals(false, functionType0.isReturnTypeInferred());
//       assertEquals(false, functionType0.isTemplateType());
//       assertEquals(false, functionType0.isVoidType());
//       assertEquals(false, functionType0.isCheckedUnknownType());
//       assertEquals(0, functionType0.getExtendedInterfacesCount());
//       assertEquals(false, functionType0.hasCachedValues());
//       assertEquals(false, functionType0.isNoResolvedType());
//       assertEquals(false, functionType0.isFunctionPrototypeType());
//       assertEquals(true, functionType0.isOrdinaryFunction());
//       assertEquals(false, functionType0.isBooleanValueType());
//       assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
//       assertEquals(false, functionType0.isAllType());
//       assertEquals(false, functionType0.isNominalType());
//       assertEquals(false, functionType0.isUnionType());
//       assertEquals(0, functionType0.getMaxArguments());
//       assertEquals(true, functionType0.canBeCalled());
//       assertEquals(false, functionType0.isRecordType());
//       assertNull(functionType0.getTemplateTypeName());
//       assertNotNull(functionType0);
//       
//       String string1 = functionType0.toDebugHashCodeString();
//       assertEquals("function (): {proxy:{9}}", string1);
//       assertFalse(string1.equals((Object)string0));
//       assertFalse(string0.equals((Object)string1));
//       assertEquals(true, stack0.isEmpty());
//       assertEquals(0, stack0.size());
//       assertEquals(true, stack0.empty());
//       assertEquals(10, stack0.capacity());
//       assertEquals("[]", stack0.toString());
//       assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
//       assertEquals(false, templateType0.isBooleanValueType());
//       assertEquals(false, templateType0.hasCachedValues());
//       assertEquals(BooleanLiteralSet.TRUE, templateType0.getPossibleToBooleanOutcomes());
//       assertEquals(false, templateType0.isNullType());
//       assertEquals(false, templateType0.isVoidType());
//       assertEquals(false, templateType0.isRecordType());
//       assertEquals("<No stack trace available>", templateType0.toString());
//       assertEquals(false, templateType0.isResolved());
//       assertEquals(false, templateType0.isStringValueType());
//       assertEquals(false, templateType0.isFunctionType());
//       assertEquals("<No stack trace available>", templateType0.getReferenceName());
//       assertEquals(false, templateType0.isNumberValueType());
//       assertEquals(true, templateType0.isTemplateType());
//       assertEquals(false, templateType0.isAllType());
//       assertEquals(false, templateType0.isUnionType());
//       assertEquals(false, templateType0.isEnumElementType());
//       assertEquals(false, templateType0.isFunctionPrototypeType());
//       assertEquals(false, functionType0.isEnumType());
//       assertEquals(false, functionType0.hasInstanceType());
//       assertEquals(false, functionType0.isInterface());
//       assertEquals(false, functionType0.isResolved());
//       assertEquals(false, functionType0.isEnumElementType());
//       assertEquals(false, functionType0.isNullType());
//       assertEquals(true, functionType0.isFunctionType());
//       assertEquals(false, functionType0.isNumberValueType());
//       assertEquals(false, functionType0.isConstructor());
//       assertEquals(false, functionType0.isStringValueType());
//       assertEquals(false, functionType0.isNoType());
//       assertEquals(false, functionType0.isNoObjectType());
//       assertEquals(false, functionType0.isReturnTypeInferred());
//       assertEquals(false, functionType0.isTemplateType());
//       assertEquals(false, functionType0.isVoidType());
//       assertEquals(false, functionType0.isCheckedUnknownType());
//       assertEquals(0, functionType0.getExtendedInterfacesCount());
//       assertEquals(false, functionType0.hasCachedValues());
//       assertEquals(false, functionType0.isNoResolvedType());
//       assertEquals(false, functionType0.isFunctionPrototypeType());
//       assertEquals(true, functionType0.isOrdinaryFunction());
//       assertEquals(false, functionType0.isBooleanValueType());
//       assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
//       assertEquals(false, functionType0.isAllType());
//       assertEquals(false, functionType0.isNominalType());
//       assertEquals(false, functionType0.isUnionType());
//       assertEquals(0, functionType0.getMaxArguments());
//       assertEquals(true, functionType0.canBeCalled());
//       assertEquals(false, functionType0.isRecordType());
//       assertNull(functionType0.getTemplateTypeName());
//       assertNotSame(string1, string0);
//       assertNotSame(string0, string1);
//       assertNotNull(string1);
//   }

  @Test
  public void test02()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      boolean boolean0 = true;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0, boolean0);
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      assertEquals(false, noResolvedType0.isResolved());
      assertEquals(true, noResolvedType0.matchesObjectContext());
      assertEquals(false, noResolvedType0.isFunctionType());
      assertEquals(false, noResolvedType0.isCheckedUnknownType());
      assertEquals(false, noResolvedType0.isReturnTypeInferred());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertNull(noResolvedType0.getTemplateTypeName());
      assertEquals(false, noResolvedType0.isFunctionPrototypeType());
      assertEquals(2147483647, noResolvedType0.getPropertiesCount());
      assertEquals(false, noResolvedType0.isVoidType());
      assertNull(noResolvedType0.getReferenceName());
      assertEquals(false, noResolvedType0.isTemplateType());
      assertEquals(true, noResolvedType0.matchesNumberContext());
      assertEquals(false, noResolvedType0.isEnumElementType());
      assertEquals(false, noResolvedType0.isAllType());
      assertEquals(true, noResolvedType0.isConstructor());
      assertEquals(true, noResolvedType0.isNullable());
      assertEquals(false, noResolvedType0.isOrdinaryFunction());
      assertEquals(true, noResolvedType0.hasInstanceType());
      assertEquals(false, noResolvedType0.isStringValueType());
      assertEquals(false, noResolvedType0.isBooleanValueType());
      assertEquals(false, noResolvedType0.isRecordType());
      assertEquals(false, noResolvedType0.isNoObjectType());
      assertEquals(false, noResolvedType0.isNullType());
      assertEquals(false, noResolvedType0.isNumberValueType());
      assertEquals(false, noResolvedType0.isInterface());
      assertEquals(true, noResolvedType0.canBeCalled());
      assertEquals(true, noResolvedType0.matchesStringContext());
      assertEquals(false, noResolvedType0.hasCachedValues());
      assertEquals(false, noResolvedType0.isEnumType());
      assertEquals(false, noResolvedType0.isUnionType());
      assertEquals(false, noResolvedType0.isNominalType());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertEquals(2147483647, noResolvedType0.getMaxArguments());
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(noResolvedType0);
      
      FunctionType functionType0 = noResolvedType0.getSuperClassConstructor();
      assertEquals(false, noResolvedType0.isResolved());
      assertEquals(true, noResolvedType0.matchesObjectContext());
      assertEquals(false, noResolvedType0.isFunctionType());
      assertEquals(false, noResolvedType0.isCheckedUnknownType());
      assertEquals(false, noResolvedType0.isReturnTypeInferred());
      assertEquals(true, noResolvedType0.hasCachedValues());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertNull(noResolvedType0.getTemplateTypeName());
      assertEquals(false, noResolvedType0.isFunctionPrototypeType());
      assertEquals(2147483647, noResolvedType0.getPropertiesCount());
      assertEquals(false, noResolvedType0.isVoidType());
      assertNull(noResolvedType0.getReferenceName());
      assertEquals(false, noResolvedType0.isTemplateType());
      assertEquals(true, noResolvedType0.matchesNumberContext());
      assertEquals(false, noResolvedType0.isEnumElementType());
      assertEquals(false, noResolvedType0.isAllType());
      assertEquals(true, noResolvedType0.isConstructor());
      assertEquals(true, noResolvedType0.isNullable());
      assertEquals(false, noResolvedType0.isOrdinaryFunction());
      assertEquals(true, noResolvedType0.hasInstanceType());
      assertEquals(false, noResolvedType0.isStringValueType());
      assertEquals(false, noResolvedType0.isBooleanValueType());
      assertEquals(false, noResolvedType0.isRecordType());
      assertEquals(false, noResolvedType0.isNoObjectType());
      assertEquals(false, noResolvedType0.isNullType());
      assertEquals(false, noResolvedType0.isNumberValueType());
      assertEquals(false, noResolvedType0.isInterface());
      assertEquals(true, noResolvedType0.canBeCalled());
      assertEquals(true, noResolvedType0.matchesStringContext());
      assertEquals(false, noResolvedType0.isEnumType());
      assertEquals(false, noResolvedType0.isUnionType());
      assertEquals(false, noResolvedType0.isNominalType());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertEquals(2147483647, noResolvedType0.getMaxArguments());
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, functionType0.isTemplateType());
      assertEquals(false, functionType0.isBooleanValueType());
      assertEquals(false, functionType0.isResolved());
      assertEquals(false, functionType0.isStringValueType());
      assertNull(functionType0.getTemplateTypeName());
      assertEquals(false, functionType0.isNominalType());
      assertEquals(false, functionType0.isNoResolvedType());
      assertEquals(true, functionType0.isFunctionType());
      assertEquals(false, functionType0.isUnionType());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertEquals(false, functionType0.isFunctionPrototypeType());
      assertEquals(false, functionType0.isRecordType());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, functionType0.isInterface());
      assertEquals(false, functionType0.isOrdinaryFunction());
      assertEquals(true, functionType0.canBeCalled());
      assertEquals(false, functionType0.isVoidType());
      assertEquals(1, functionType0.getMaxArguments());
      assertEquals(true, functionType0.hasCachedValues());
      assertEquals(false, functionType0.isAllType());
      assertEquals(false, functionType0.isReturnTypeInferred());
      assertEquals(false, functionType0.isEnumElementType());
      assertEquals(false, functionType0.isNoType());
      assertEquals(false, functionType0.isNumberValueType());
      assertEquals(false, functionType0.isNoObjectType());
      assertEquals(true, functionType0.hasInstanceType());
      assertEquals(false, functionType0.isNullType());
      assertEquals(false, functionType0.isEnumType());
      assertEquals(true, functionType0.isConstructor());
      assertEquals(false, functionType0.isCheckedUnknownType());
      assertNotNull(functionType0);
      
      FunctionType functionType1 = (FunctionType)functionType0.resolve((ErrorReporter) simpleErrorReporter0, (StaticScope<JSType>) noResolvedType0);
      assertEquals(true, noResolvedType0.isResolved());
      assertEquals(true, noResolvedType0.matchesObjectContext());
      assertEquals(false, noResolvedType0.isFunctionType());
      assertEquals(false, noResolvedType0.isCheckedUnknownType());
      assertEquals(false, noResolvedType0.isReturnTypeInferred());
      assertEquals(true, noResolvedType0.hasCachedValues());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertNull(noResolvedType0.getTemplateTypeName());
      assertEquals(false, noResolvedType0.isFunctionPrototypeType());
      assertEquals(2147483647, noResolvedType0.getPropertiesCount());
      assertEquals(false, noResolvedType0.isVoidType());
      assertNull(noResolvedType0.getReferenceName());
      assertEquals(false, noResolvedType0.isTemplateType());
      assertEquals(true, noResolvedType0.matchesNumberContext());
      assertEquals(false, noResolvedType0.isEnumElementType());
      assertEquals(false, noResolvedType0.isAllType());
      assertEquals(true, noResolvedType0.isConstructor());
      assertEquals(true, noResolvedType0.isNullable());
      assertEquals(false, noResolvedType0.isOrdinaryFunction());
      assertEquals(true, noResolvedType0.hasInstanceType());
      assertEquals(false, noResolvedType0.isStringValueType());
      assertEquals(false, noResolvedType0.isBooleanValueType());
      assertEquals(false, noResolvedType0.isRecordType());
      assertEquals(false, noResolvedType0.isNoObjectType());
      assertEquals(false, noResolvedType0.isNullType());
      assertEquals(false, noResolvedType0.isNumberValueType());
      assertEquals(false, noResolvedType0.isInterface());
      assertEquals(true, noResolvedType0.canBeCalled());
      assertEquals(true, noResolvedType0.matchesStringContext());
      assertEquals(false, noResolvedType0.isEnumType());
      assertEquals(false, noResolvedType0.isUnionType());
      assertEquals(false, noResolvedType0.isNominalType());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertEquals(2147483647, noResolvedType0.getMaxArguments());
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, functionType0.isTemplateType());
      assertEquals(false, functionType0.isBooleanValueType());
      assertEquals(false, functionType0.isStringValueType());
      assertNull(functionType0.getTemplateTypeName());
      assertEquals(false, functionType0.isNominalType());
      assertEquals(false, functionType0.isNoResolvedType());
      assertEquals(true, functionType0.isFunctionType());
      assertEquals(false, functionType0.isUnionType());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertEquals(false, functionType0.isFunctionPrototypeType());
      assertEquals(false, functionType0.isRecordType());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertEquals(true, functionType0.isResolved());
      assertEquals(false, functionType0.isInterface());
      assertEquals(false, functionType0.isOrdinaryFunction());
      assertEquals(true, functionType0.canBeCalled());
      assertEquals(false, functionType0.isVoidType());
      assertEquals(1, functionType0.getMaxArguments());
      assertEquals(true, functionType0.hasCachedValues());
      assertEquals(false, functionType0.isAllType());
      assertEquals(false, functionType0.isReturnTypeInferred());
      assertEquals(false, functionType0.isEnumElementType());
      assertEquals(false, functionType0.isNoType());
      assertEquals(false, functionType0.isNumberValueType());
      assertEquals(false, functionType0.isNoObjectType());
      assertEquals(true, functionType0.hasInstanceType());
      assertEquals(false, functionType0.isNullType());
      assertEquals(false, functionType0.isEnumType());
      assertEquals(true, functionType0.isConstructor());
      assertEquals(false, functionType0.isCheckedUnknownType());
      assertEquals(false, functionType1.isEnumElementType());
      assertEquals(0, functionType1.getExtendedInterfacesCount());
      assertEquals(false, functionType1.isVoidType());
      assertEquals(false, functionType1.isInterface());
      assertEquals(true, functionType1.isConstructor());
      assertEquals(false, functionType1.isReturnTypeInferred());
      assertEquals(false, functionType1.isNominalType());
      assertEquals(false, functionType1.isAllType());
      assertEquals(false, functionType1.isNoType());
      assertEquals(true, functionType1.isResolved());
      assertEquals(false, functionType1.isRecordType());
      assertEquals(false, functionType1.isUnionType());
      assertEquals(BooleanLiteralSet.TRUE, functionType1.getPossibleToBooleanOutcomes());
      assertEquals(false, functionType1.isNoResolvedType());
      assertEquals(false, functionType1.isStringValueType());
      assertEquals(true, functionType1.hasCachedValues());
      assertNull(functionType1.getTemplateTypeName());
      assertEquals(false, functionType1.isNullType());
      assertEquals(false, functionType1.isTemplateType());
      assertEquals(false, functionType1.isFunctionPrototypeType());
      assertEquals(true, functionType1.hasInstanceType());
      assertEquals(true, functionType1.canBeCalled());
      assertEquals(true, functionType1.isFunctionType());
      assertEquals(false, functionType1.isOrdinaryFunction());
      assertEquals(false, functionType1.isCheckedUnknownType());
      assertEquals(false, functionType1.isNoObjectType());
      assertEquals(false, functionType1.isEnumType());
      assertEquals(1, functionType1.getMaxArguments());
      assertEquals(false, functionType1.isNumberValueType());
      assertEquals(false, functionType1.isBooleanValueType());
      assertSame(functionType0, functionType1);
      assertSame(functionType1, functionType0);
      assertNotNull(functionType1);
  }

  @Test
  public void test03()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      boolean boolean0 = false;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0, boolean0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      String string0 = "W[";
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, string0);
      assertEquals(true, errorFunctionType0.isConstructor());
      assertEquals(false, errorFunctionType0.isNoType());
      assertEquals(false, errorFunctionType0.isNoObjectType());
      assertEquals(false, errorFunctionType0.isUnionType());
      assertEquals(false, errorFunctionType0.isBooleanValueType());
      assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertEquals(false, errorFunctionType0.isEnumElementType());
      assertEquals(true, errorFunctionType0.isFunctionType());
      assertEquals(false, errorFunctionType0.isAllType());
      assertNull(errorFunctionType0.getTemplateTypeName());
      assertEquals(false, errorFunctionType0.isInterface());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, errorFunctionType0.isFunctionPrototypeType());
      assertEquals(false, errorFunctionType0.isVoidType());
      assertEquals(false, errorFunctionType0.isReturnTypeInferred());
      assertEquals(false, errorFunctionType0.isStringValueType());
      assertEquals(false, errorFunctionType0.isNominalType());
      assertEquals(false, errorFunctionType0.isEnumType());
      assertEquals(true, errorFunctionType0.canBeCalled());
      assertEquals(false, errorFunctionType0.isTemplateType());
      assertEquals(false, errorFunctionType0.isRecordType());
      assertEquals(3, errorFunctionType0.getMaxArguments());
      assertEquals(false, errorFunctionType0.isResolved());
      assertEquals(false, errorFunctionType0.isNoResolvedType());
      assertEquals(true, errorFunctionType0.hasInstanceType());
      assertEquals(false, errorFunctionType0.hasCachedValues());
      assertEquals(false, errorFunctionType0.isNullType());
      assertEquals(false, errorFunctionType0.isCheckedUnknownType());
      assertEquals(false, errorFunctionType0.isNumberValueType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(errorFunctionType0);
      
      ObjectType objectType0 = FunctionType.getTopDefiningInterface((ObjectType) errorFunctionType0, string0);
      assertEquals(true, errorFunctionType0.isConstructor());
      assertEquals(false, errorFunctionType0.isNoType());
      assertEquals(false, errorFunctionType0.isNoObjectType());
      assertEquals(true, errorFunctionType0.hasCachedValues());
      assertEquals(false, errorFunctionType0.isUnionType());
      assertEquals(false, errorFunctionType0.isBooleanValueType());
      assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertEquals(false, errorFunctionType0.isEnumElementType());
      assertEquals(true, errorFunctionType0.isFunctionType());
      assertEquals(false, errorFunctionType0.isAllType());
      assertNull(errorFunctionType0.getTemplateTypeName());
      assertEquals(false, errorFunctionType0.isInterface());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, errorFunctionType0.isFunctionPrototypeType());
      assertEquals(false, errorFunctionType0.isVoidType());
      assertEquals(false, errorFunctionType0.isReturnTypeInferred());
      assertEquals(false, errorFunctionType0.isStringValueType());
      assertEquals(false, errorFunctionType0.isNominalType());
      assertEquals(false, errorFunctionType0.isEnumType());
      assertEquals(true, errorFunctionType0.canBeCalled());
      assertEquals(false, errorFunctionType0.isTemplateType());
      assertEquals(false, errorFunctionType0.isRecordType());
      assertEquals(3, errorFunctionType0.getMaxArguments());
      assertEquals(false, errorFunctionType0.isResolved());
      assertEquals(false, errorFunctionType0.isNoResolvedType());
      assertEquals(true, errorFunctionType0.hasInstanceType());
      assertEquals(false, errorFunctionType0.isNullType());
      assertEquals(false, errorFunctionType0.isCheckedUnknownType());
      assertEquals(false, errorFunctionType0.isNumberValueType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNull(objectType0);
      
      boolean boolean1 = jSTypeRegistry0.resetImplicitPrototype((JSType) errorFunctionType0, (ObjectType) errorFunctionType0);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean0 == boolean1);
      assertEquals(true, errorFunctionType0.isConstructor());
      assertEquals(false, errorFunctionType0.isNoType());
      assertEquals(false, errorFunctionType0.isNoObjectType());
      assertEquals(true, errorFunctionType0.hasCachedValues());
      assertEquals(false, errorFunctionType0.isUnionType());
      assertEquals(false, errorFunctionType0.isBooleanValueType());
      assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertEquals(false, errorFunctionType0.isEnumElementType());
      assertEquals(true, errorFunctionType0.isFunctionType());
      assertEquals(false, errorFunctionType0.isAllType());
      assertNull(errorFunctionType0.getTemplateTypeName());
      assertEquals(false, errorFunctionType0.isInterface());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, errorFunctionType0.isFunctionPrototypeType());
      assertEquals(false, errorFunctionType0.isVoidType());
      assertEquals(false, errorFunctionType0.isReturnTypeInferred());
      assertEquals(false, errorFunctionType0.isStringValueType());
      assertEquals(false, errorFunctionType0.isNominalType());
      assertEquals(false, errorFunctionType0.isEnumType());
      assertEquals(true, errorFunctionType0.canBeCalled());
      assertEquals(false, errorFunctionType0.isTemplateType());
      assertEquals(false, errorFunctionType0.isRecordType());
      assertEquals(3, errorFunctionType0.getMaxArguments());
      assertEquals(false, errorFunctionType0.isResolved());
      assertEquals(false, errorFunctionType0.isNoResolvedType());
      assertEquals(true, errorFunctionType0.hasInstanceType());
      assertEquals(false, errorFunctionType0.isNullType());
      assertEquals(false, errorFunctionType0.isCheckedUnknownType());
      assertEquals(false, errorFunctionType0.isNumberValueType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
  }

  @Test
  public void test04()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      boolean boolean0 = false;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0, boolean0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      assertEquals(false, noResolvedType0.hasCachedValues());
      assertEquals(true, noResolvedType0.isNullable());
      assertEquals(false, noResolvedType0.isNumberValueType());
      assertEquals(false, noResolvedType0.isEnumElementType());
      assertEquals(true, noResolvedType0.hasInstanceType());
      assertEquals(false, noResolvedType0.isOrdinaryFunction());
      assertEquals(false, noResolvedType0.isStringValueType());
      assertNull(noResolvedType0.getTemplateTypeName());
      assertEquals(false, noResolvedType0.isTemplateType());
      assertEquals(true, noResolvedType0.matchesObjectContext());
      assertEquals(true, noResolvedType0.matchesNumberContext());
      assertEquals(false, noResolvedType0.isEnumType());
      assertEquals(false, noResolvedType0.isCheckedUnknownType());
      assertEquals(false, noResolvedType0.isVoidType());
      assertEquals(false, noResolvedType0.isNominalType());
      assertEquals(2147483647, noResolvedType0.getPropertiesCount());
      assertEquals(true, noResolvedType0.matchesStringContext());
      assertEquals(false, noResolvedType0.isNoObjectType());
      assertEquals(false, noResolvedType0.isFunctionPrototypeType());
      assertEquals(false, noResolvedType0.isInterface());
      assertEquals(false, noResolvedType0.isRecordType());
      assertEquals(false, noResolvedType0.isAllType());
      assertEquals(true, noResolvedType0.canBeCalled());
      assertNull(noResolvedType0.getReferenceName());
      assertEquals(2147483647, noResolvedType0.getMaxArguments());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertEquals(false, noResolvedType0.isNullType());
      assertEquals(false, noResolvedType0.isFunctionType());
      assertEquals(false, noResolvedType0.isResolved());
      assertEquals(false, noResolvedType0.isReturnTypeInferred());
      assertEquals(true, noResolvedType0.isConstructor());
      assertEquals(false, noResolvedType0.isBooleanValueType());
      assertEquals(false, noResolvedType0.isUnionType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(noResolvedType0);
      
      boolean boolean1 = noResolvedType0.hasImplementedInterfaces();
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean0 == boolean1);
      assertEquals(true, noResolvedType0.isNullable());
      assertEquals(false, noResolvedType0.isNumberValueType());
      assertEquals(false, noResolvedType0.isEnumElementType());
      assertEquals(true, noResolvedType0.hasInstanceType());
      assertEquals(false, noResolvedType0.isOrdinaryFunction());
      assertEquals(false, noResolvedType0.isStringValueType());
      assertNull(noResolvedType0.getTemplateTypeName());
      assertEquals(false, noResolvedType0.isTemplateType());
      assertEquals(true, noResolvedType0.matchesObjectContext());
      assertEquals(true, noResolvedType0.matchesNumberContext());
      assertEquals(false, noResolvedType0.isEnumType());
      assertEquals(false, noResolvedType0.isCheckedUnknownType());
      assertEquals(false, noResolvedType0.isVoidType());
      assertEquals(false, noResolvedType0.isNominalType());
      assertEquals(2147483647, noResolvedType0.getPropertiesCount());
      assertEquals(true, noResolvedType0.matchesStringContext());
      assertEquals(false, noResolvedType0.isNoObjectType());
      assertEquals(false, noResolvedType0.isFunctionPrototypeType());
      assertEquals(false, noResolvedType0.isInterface());
      assertEquals(false, noResolvedType0.isRecordType());
      assertEquals(false, noResolvedType0.isAllType());
      assertEquals(true, noResolvedType0.canBeCalled());
      assertNull(noResolvedType0.getReferenceName());
      assertEquals(2147483647, noResolvedType0.getMaxArguments());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertEquals(true, noResolvedType0.hasCachedValues());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertEquals(false, noResolvedType0.isNullType());
      assertEquals(false, noResolvedType0.isFunctionType());
      assertEquals(false, noResolvedType0.isResolved());
      assertEquals(false, noResolvedType0.isReturnTypeInferred());
      assertEquals(true, noResolvedType0.isConstructor());
      assertEquals(false, noResolvedType0.isBooleanValueType());
      assertEquals(false, noResolvedType0.isUnionType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      // Undeclared exception!
      try {
        noResolvedType0.setImplicitPrototype(noResolvedType0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test05()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      boolean boolean0 = true;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0, boolean0);
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      String string0 = "";
      int int0 = 3754;
      NamedType namedType0 = new NamedType(jSTypeRegistry0, string0, string0, int0, int0);
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, namedType0.isFunctionType());
      assertEquals(false, namedType0.isTemplateType());
      assertEquals(false, namedType0.isResolved());
      assertEquals(false, namedType0.isAllType());
      assertEquals(false, namedType0.isNullType());
      assertEquals(false, namedType0.isFunctionPrototypeType());
      assertEquals(false, namedType0.hasCachedValues());
      assertEquals(false, namedType0.isVoidType());
      assertEquals(BooleanLiteralSet.TRUE, namedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, namedType0.isUnionType());
      assertEquals(false, namedType0.isBooleanValueType());
      assertEquals(false, namedType0.isStringValueType());
      assertEquals(false, namedType0.isNumberValueType());
      assertEquals(false, namedType0.isRecordType());
      assertEquals(false, namedType0.isEnumElementType());
      assertNotNull(namedType0);
      
      Node node0 = namedType0.getPropertyNode(string0);
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, namedType0.isFunctionType());
      assertEquals(false, namedType0.isTemplateType());
      assertEquals(false, namedType0.isResolved());
      assertEquals(false, namedType0.isAllType());
      assertEquals(false, namedType0.isNullType());
      assertEquals(false, namedType0.isFunctionPrototypeType());
      assertEquals(false, namedType0.hasCachedValues());
      assertEquals(false, namedType0.isVoidType());
      assertEquals(BooleanLiteralSet.TRUE, namedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, namedType0.isUnionType());
      assertEquals(false, namedType0.isBooleanValueType());
      assertEquals(false, namedType0.isStringValueType());
      assertEquals(false, namedType0.isNumberValueType());
      assertEquals(false, namedType0.isRecordType());
      assertEquals(false, namedType0.isEnumElementType());
      assertNull(node0);
      
      FunctionType functionType0 = FunctionType.forInterface(jSTypeRegistry0, string0, node0);
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, functionType0.hasCachedValues());
      assertEquals(false, functionType0.isStringValueType());
      assertEquals(false, functionType0.isEnumElementType());
      assertEquals(false, functionType0.isNominalType());
      assertEquals(false, functionType0.isUnionType());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, functionType0.isEnumType());
      assertEquals(false, functionType0.isNoObjectType());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertEquals(false, functionType0.isRecordType());
      assertEquals(false, functionType0.isNullType());
      assertEquals(false, functionType0.isResolved());
      assertEquals(false, functionType0.isVoidType());
      assertEquals(false, functionType0.isBooleanValueType());
      assertEquals(false, functionType0.isAllType());
      assertEquals(false, functionType0.isNoType());
      assertEquals(false, functionType0.isNumberValueType());
      assertEquals(true, functionType0.isFunctionType());
      assertEquals(false, functionType0.isCheckedUnknownType());
      assertNull(functionType0.getTemplateTypeName());
      assertEquals(false, functionType0.isNoResolvedType());
      assertEquals(false, functionType0.isOrdinaryFunction());
      assertEquals(false, functionType0.isConstructor());
      assertEquals(true, functionType0.canBeCalled());
      assertEquals(0, functionType0.getMaxArguments());
      assertEquals(false, functionType0.isTemplateType());
      assertEquals(true, functionType0.hasInstanceType());
      assertEquals(false, functionType0.isFunctionPrototypeType());
      assertEquals(true, functionType0.isInterface());
      assertEquals(false, functionType0.isReturnTypeInferred());
      assertEquals(false, namedType0.isFunctionType());
      assertEquals(false, namedType0.isTemplateType());
      assertEquals(false, namedType0.isResolved());
      assertEquals(false, namedType0.isAllType());
      assertEquals(false, namedType0.isNullType());
      assertEquals(false, namedType0.isFunctionPrototypeType());
      assertEquals(false, namedType0.hasCachedValues());
      assertEquals(false, namedType0.isVoidType());
      assertEquals(BooleanLiteralSet.TRUE, namedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, namedType0.isUnionType());
      assertEquals(false, namedType0.isBooleanValueType());
      assertEquals(false, namedType0.isStringValueType());
      assertEquals(false, namedType0.isNumberValueType());
      assertEquals(false, namedType0.isRecordType());
      assertEquals(false, namedType0.isEnumElementType());
      assertNotNull(functionType0);
      
      functionType0.setPrototypeBasedOn((ObjectType) namedType0);
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, functionType0.isStringValueType());
      assertEquals(false, functionType0.isEnumElementType());
      assertEquals(false, functionType0.isNominalType());
      assertEquals(false, functionType0.isUnionType());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, functionType0.isEnumType());
      assertEquals(false, functionType0.isNoObjectType());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertEquals(false, functionType0.isRecordType());
      assertEquals(false, functionType0.isNullType());
      assertEquals(false, functionType0.isResolved());
      assertEquals(false, functionType0.isVoidType());
      assertEquals(false, functionType0.isBooleanValueType());
      assertEquals(false, functionType0.isAllType());
      assertEquals(false, functionType0.isNoType());
      assertEquals(false, functionType0.isNumberValueType());
      assertEquals(true, functionType0.isFunctionType());
      assertEquals(false, functionType0.isCheckedUnknownType());
      assertEquals(true, functionType0.hasCachedValues());
      assertNull(functionType0.getTemplateTypeName());
      assertEquals(false, functionType0.isNoResolvedType());
      assertEquals(false, functionType0.isOrdinaryFunction());
      assertEquals(false, functionType0.isConstructor());
      assertEquals(true, functionType0.canBeCalled());
      assertEquals(0, functionType0.getMaxArguments());
      assertEquals(false, functionType0.isTemplateType());
      assertEquals(true, functionType0.hasInstanceType());
      assertEquals(false, functionType0.isFunctionPrototypeType());
      assertEquals(true, functionType0.isInterface());
      assertEquals(false, functionType0.isReturnTypeInferred());
      assertEquals(false, namedType0.isFunctionType());
      assertEquals(false, namedType0.isTemplateType());
      assertEquals(false, namedType0.isResolved());
      assertEquals(false, namedType0.isAllType());
      assertEquals(false, namedType0.isNullType());
      assertEquals(false, namedType0.isFunctionPrototypeType());
      assertEquals(false, namedType0.hasCachedValues());
      assertEquals(false, namedType0.isVoidType());
      assertEquals(BooleanLiteralSet.TRUE, namedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, namedType0.isUnionType());
      assertEquals(false, namedType0.isBooleanValueType());
      assertEquals(false, namedType0.isStringValueType());
      assertEquals(false, namedType0.isNumberValueType());
      assertEquals(false, namedType0.isRecordType());
      assertEquals(false, namedType0.isEnumElementType());
      
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, noResolvedType0.isEnumType());
      assertEquals(false, noResolvedType0.isNumberValueType());
      assertEquals(false, noResolvedType0.isNoObjectType());
      assertEquals(true, noResolvedType0.matchesNumberContext());
      assertEquals(false, noResolvedType0.isVoidType());
      assertEquals(true, noResolvedType0.isConstructor());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noResolvedType0.isEnumElementType());
      assertEquals(true, noResolvedType0.isNullable());
      assertEquals(false, noResolvedType0.isTemplateType());
      assertEquals(false, noResolvedType0.isNullType());
      assertEquals(false, noResolvedType0.isOrdinaryFunction());
      assertEquals(false, noResolvedType0.hasCachedValues());
      assertEquals(false, noResolvedType0.isResolved());
      assertNull(noResolvedType0.getReferenceName());
      assertEquals(true, noResolvedType0.canBeCalled());
      assertEquals(true, noResolvedType0.matchesObjectContext());
      assertEquals(false, noResolvedType0.isInterface());
      assertNull(noResolvedType0.getTemplateTypeName());
      assertEquals(false, noResolvedType0.isFunctionPrototypeType());
      assertEquals(false, noResolvedType0.isCheckedUnknownType());
      assertEquals(false, noResolvedType0.isNominalType());
      assertEquals(false, noResolvedType0.isUnionType());
      assertEquals(false, noResolvedType0.isAllType());
      assertEquals(2147483647, noResolvedType0.getMaxArguments());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertEquals(true, noResolvedType0.hasInstanceType());
      assertEquals(2147483647, noResolvedType0.getPropertiesCount());
      assertEquals(true, noResolvedType0.matchesStringContext());
      assertEquals(false, noResolvedType0.isStringValueType());
      assertEquals(false, noResolvedType0.isBooleanValueType());
      assertEquals(false, noResolvedType0.isReturnTypeInferred());
      assertEquals(false, noResolvedType0.isFunctionType());
      assertEquals(false, noResolvedType0.isRecordType());
      assertNotNull(noResolvedType0);
      
      functionType0.setPrototypeBasedOn((ObjectType) noResolvedType0);
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, noResolvedType0.isEnumType());
      assertEquals(false, noResolvedType0.isNumberValueType());
      assertEquals(false, noResolvedType0.isNoObjectType());
      assertEquals(true, noResolvedType0.matchesNumberContext());
      assertEquals(false, noResolvedType0.isVoidType());
      assertEquals(true, noResolvedType0.isConstructor());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noResolvedType0.isEnumElementType());
      assertEquals(true, noResolvedType0.isNullable());
      assertEquals(false, noResolvedType0.isTemplateType());
      assertEquals(false, noResolvedType0.isNullType());
      assertEquals(false, noResolvedType0.isOrdinaryFunction());
      assertEquals(true, noResolvedType0.isFunctionPrototypeType());
      assertEquals(false, noResolvedType0.hasCachedValues());
      assertEquals(false, noResolvedType0.isResolved());
      assertNull(noResolvedType0.getReferenceName());
      assertEquals(true, noResolvedType0.canBeCalled());
      assertEquals(true, noResolvedType0.matchesObjectContext());
      assertEquals(false, noResolvedType0.isInterface());
      assertNull(noResolvedType0.getTemplateTypeName());
      assertEquals(false, noResolvedType0.isCheckedUnknownType());
      assertEquals(false, noResolvedType0.isNominalType());
      assertEquals(false, noResolvedType0.isUnionType());
      assertEquals(false, noResolvedType0.isAllType());
      assertEquals(2147483647, noResolvedType0.getMaxArguments());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertEquals(true, noResolvedType0.hasInstanceType());
      assertEquals(2147483647, noResolvedType0.getPropertiesCount());
      assertEquals(true, noResolvedType0.matchesStringContext());
      assertEquals(false, noResolvedType0.isStringValueType());
      assertEquals(false, noResolvedType0.isBooleanValueType());
      assertEquals(false, noResolvedType0.isReturnTypeInferred());
      assertEquals(false, noResolvedType0.isFunctionType());
      assertEquals(false, noResolvedType0.isRecordType());
      assertEquals(false, functionType0.isStringValueType());
      assertEquals(false, functionType0.isEnumElementType());
      assertEquals(false, functionType0.isNominalType());
      assertEquals(false, functionType0.isUnionType());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, functionType0.isEnumType());
      assertEquals(false, functionType0.isNoObjectType());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertEquals(false, functionType0.isRecordType());
      assertEquals(false, functionType0.isNullType());
      assertEquals(false, functionType0.isResolved());
      assertEquals(false, functionType0.isVoidType());
      assertEquals(false, functionType0.isBooleanValueType());
      assertEquals(false, functionType0.isAllType());
      assertEquals(false, functionType0.isNoType());
      assertEquals(false, functionType0.isNumberValueType());
      assertEquals(true, functionType0.isFunctionType());
      assertEquals(false, functionType0.isCheckedUnknownType());
      assertEquals(true, functionType0.hasCachedValues());
      assertNull(functionType0.getTemplateTypeName());
      assertEquals(false, functionType0.isNoResolvedType());
      assertEquals(false, functionType0.isOrdinaryFunction());
      assertEquals(false, functionType0.isConstructor());
      assertEquals(true, functionType0.canBeCalled());
      assertEquals(0, functionType0.getMaxArguments());
      assertEquals(false, functionType0.isTemplateType());
      assertEquals(true, functionType0.hasInstanceType());
      assertEquals(false, functionType0.isFunctionPrototypeType());
      assertEquals(true, functionType0.isInterface());
      assertEquals(false, functionType0.isReturnTypeInferred());
      assertEquals(false, namedType0.isFunctionType());
      assertEquals(false, namedType0.isTemplateType());
      assertEquals(false, namedType0.isResolved());
      assertEquals(false, namedType0.isAllType());
      assertEquals(false, namedType0.isNullType());
      assertEquals(false, namedType0.isFunctionPrototypeType());
      assertEquals(false, namedType0.hasCachedValues());
      assertEquals(false, namedType0.isVoidType());
      assertEquals(BooleanLiteralSet.TRUE, namedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, namedType0.isUnionType());
      assertEquals(false, namedType0.isBooleanValueType());
      assertEquals(false, namedType0.isStringValueType());
      assertEquals(false, namedType0.isNumberValueType());
      assertEquals(false, namedType0.isRecordType());
      assertEquals(false, namedType0.isEnumElementType());
  }

  @Test
  public void test06()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      boolean boolean0 = false;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0, boolean0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      assertNull(noResolvedType0.getTemplateTypeName());
      assertEquals(2147483647, noResolvedType0.getMaxArguments());
      assertEquals(true, noResolvedType0.canBeCalled());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noResolvedType0.isReturnTypeInferred());
      assertEquals(false, noResolvedType0.isFunctionType());
      assertEquals(false, noResolvedType0.isNullType());
      assertEquals(false, noResolvedType0.isBooleanValueType());
      assertEquals(false, noResolvedType0.isEnumElementType());
      assertEquals(false, noResolvedType0.isNominalType());
      assertEquals(true, noResolvedType0.isConstructor());
      assertEquals(true, noResolvedType0.isNullable());
      assertEquals(false, noResolvedType0.isVoidType());
      assertEquals(true, noResolvedType0.hasInstanceType());
      assertEquals(2147483647, noResolvedType0.getPropertiesCount());
      assertEquals(false, noResolvedType0.isResolved());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertEquals(false, noResolvedType0.isNoObjectType());
      assertEquals(false, noResolvedType0.isInterface());
      assertEquals(false, noResolvedType0.isCheckedUnknownType());
      assertEquals(false, noResolvedType0.isStringValueType());
      assertEquals(false, noResolvedType0.isTemplateType());
      assertEquals(false, noResolvedType0.isRecordType());
      assertEquals(false, noResolvedType0.isOrdinaryFunction());
      assertEquals(false, noResolvedType0.isUnionType());
      assertNull(noResolvedType0.getReferenceName());
      assertEquals(true, noResolvedType0.matchesNumberContext());
      assertEquals(false, noResolvedType0.isNumberValueType());
      assertEquals(false, noResolvedType0.isAllType());
      assertEquals(false, noResolvedType0.hasCachedValues());
      assertEquals(true, noResolvedType0.matchesObjectContext());
      assertEquals(false, noResolvedType0.isEnumType());
      assertEquals(true, noResolvedType0.matchesStringContext());
      assertEquals(false, noResolvedType0.isFunctionPrototypeType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(noResolvedType0);
      
      FunctionType functionType0 = noResolvedType0.getSuperClassConstructor();
      assertNull(noResolvedType0.getTemplateTypeName());
      assertEquals(2147483647, noResolvedType0.getMaxArguments());
      assertEquals(true, noResolvedType0.hasCachedValues());
      assertEquals(true, noResolvedType0.canBeCalled());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noResolvedType0.isReturnTypeInferred());
      assertEquals(false, noResolvedType0.isFunctionType());
      assertEquals(false, noResolvedType0.isNullType());
      assertEquals(false, noResolvedType0.isBooleanValueType());
      assertEquals(false, noResolvedType0.isEnumElementType());
      assertEquals(false, noResolvedType0.isNominalType());
      assertEquals(true, noResolvedType0.isConstructor());
      assertEquals(true, noResolvedType0.isNullable());
      assertEquals(false, noResolvedType0.isVoidType());
      assertEquals(true, noResolvedType0.hasInstanceType());
      assertEquals(2147483647, noResolvedType0.getPropertiesCount());
      assertEquals(false, noResolvedType0.isResolved());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertEquals(false, noResolvedType0.isNoObjectType());
      assertEquals(false, noResolvedType0.isInterface());
      assertEquals(false, noResolvedType0.isCheckedUnknownType());
      assertEquals(false, noResolvedType0.isStringValueType());
      assertEquals(false, noResolvedType0.isTemplateType());
      assertEquals(false, noResolvedType0.isRecordType());
      assertEquals(false, noResolvedType0.isOrdinaryFunction());
      assertEquals(false, noResolvedType0.isUnionType());
      assertNull(noResolvedType0.getReferenceName());
      assertEquals(true, noResolvedType0.matchesNumberContext());
      assertEquals(false, noResolvedType0.isNumberValueType());
      assertEquals(false, noResolvedType0.isAllType());
      assertEquals(true, noResolvedType0.matchesObjectContext());
      assertEquals(false, noResolvedType0.isEnumType());
      assertEquals(true, noResolvedType0.matchesStringContext());
      assertEquals(false, noResolvedType0.isFunctionPrototypeType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, functionType0.isNoObjectType());
      assertEquals(false, functionType0.isBooleanValueType());
      assertNull(functionType0.getTemplateTypeName());
      assertEquals(false, functionType0.isNoResolvedType());
      assertEquals(false, functionType0.isEnumType());
      assertEquals(false, functionType0.isNullType());
      assertEquals(false, functionType0.isVoidType());
      assertEquals(false, functionType0.isTemplateType());
      assertEquals(false, functionType0.isNumberValueType());
      assertEquals(false, functionType0.isInterface());
      assertEquals(false, functionType0.isRecordType());
      assertEquals(false, functionType0.isCheckedUnknownType());
      assertEquals(false, functionType0.isStringValueType());
      assertEquals(false, functionType0.isNoType());
      assertEquals(false, functionType0.isEnumElementType());
      assertEquals(true, functionType0.isFunctionType());
      assertEquals(false, functionType0.isReturnTypeInferred());
      assertEquals(true, functionType0.canBeCalled());
      assertEquals(true, functionType0.isConstructor());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertEquals(false, functionType0.isAllType());
      assertEquals(false, functionType0.isUnionType());
      assertEquals(false, functionType0.isResolved());
      assertEquals(1, functionType0.getMaxArguments());
      assertEquals(false, functionType0.isNominalType());
      assertEquals(false, functionType0.isOrdinaryFunction());
      assertEquals(true, functionType0.hasInstanceType());
      assertEquals(false, functionType0.isFunctionPrototypeType());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertEquals(true, functionType0.hasCachedValues());
      assertNotNull(functionType0);
      
      boolean boolean1 = functionType0.setPrototype((PrototypeObjectType) functionType0);
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean0 == boolean1);
      assertNull(noResolvedType0.getTemplateTypeName());
      assertEquals(2147483647, noResolvedType0.getMaxArguments());
      assertEquals(true, noResolvedType0.hasCachedValues());
      assertEquals(true, noResolvedType0.canBeCalled());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noResolvedType0.isReturnTypeInferred());
      assertEquals(false, noResolvedType0.isFunctionType());
      assertEquals(false, noResolvedType0.isNullType());
      assertEquals(false, noResolvedType0.isBooleanValueType());
      assertEquals(false, noResolvedType0.isEnumElementType());
      assertEquals(false, noResolvedType0.isNominalType());
      assertEquals(true, noResolvedType0.isConstructor());
      assertEquals(true, noResolvedType0.isNullable());
      assertEquals(false, noResolvedType0.isVoidType());
      assertEquals(true, noResolvedType0.hasInstanceType());
      assertEquals(2147483647, noResolvedType0.getPropertiesCount());
      assertEquals(false, noResolvedType0.isResolved());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertEquals(false, noResolvedType0.isNoObjectType());
      assertEquals(false, noResolvedType0.isInterface());
      assertEquals(false, noResolvedType0.isCheckedUnknownType());
      assertEquals(false, noResolvedType0.isStringValueType());
      assertEquals(false, noResolvedType0.isTemplateType());
      assertEquals(false, noResolvedType0.isRecordType());
      assertEquals(false, noResolvedType0.isOrdinaryFunction());
      assertEquals(false, noResolvedType0.isUnionType());
      assertNull(noResolvedType0.getReferenceName());
      assertEquals(true, noResolvedType0.matchesNumberContext());
      assertEquals(false, noResolvedType0.isNumberValueType());
      assertEquals(false, noResolvedType0.isAllType());
      assertEquals(true, noResolvedType0.matchesObjectContext());
      assertEquals(false, noResolvedType0.isEnumType());
      assertEquals(true, noResolvedType0.matchesStringContext());
      assertEquals(false, noResolvedType0.isFunctionPrototypeType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, functionType0.isNoObjectType());
      assertEquals(false, functionType0.isBooleanValueType());
      assertNull(functionType0.getTemplateTypeName());
      assertEquals(false, functionType0.isNoResolvedType());
      assertEquals(false, functionType0.isEnumType());
      assertEquals(false, functionType0.isNullType());
      assertEquals(false, functionType0.isVoidType());
      assertEquals(false, functionType0.isTemplateType());
      assertEquals(false, functionType0.isNumberValueType());
      assertEquals(false, functionType0.isInterface());
      assertEquals(false, functionType0.isRecordType());
      assertEquals(false, functionType0.isCheckedUnknownType());
      assertEquals(false, functionType0.isStringValueType());
      assertEquals(false, functionType0.isNoType());
      assertEquals(false, functionType0.isEnumElementType());
      assertEquals(true, functionType0.isFunctionType());
      assertEquals(false, functionType0.isReturnTypeInferred());
      assertEquals(true, functionType0.canBeCalled());
      assertEquals(true, functionType0.isConstructor());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertEquals(false, functionType0.isAllType());
      assertEquals(false, functionType0.isUnionType());
      assertEquals(false, functionType0.isResolved());
      assertEquals(1, functionType0.getMaxArguments());
      assertEquals(false, functionType0.isNominalType());
      assertEquals(false, functionType0.isOrdinaryFunction());
      assertEquals(true, functionType0.hasInstanceType());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertEquals(true, functionType0.hasCachedValues());
      assertEquals(true, functionType0.isFunctionPrototypeType());
  }

  @Test
  public void test07()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      NoObjectType noObjectType0 = new NoObjectType(jSTypeRegistry0);
      assertEquals(true, noObjectType0.canBeCalled());
      assertEquals(true, noObjectType0.matchesObjectContext());
      assertEquals(false, noObjectType0.hasCachedValues());
      assertEquals(true, noObjectType0.hasInstanceType());
      assertEquals("NoObject", noObjectType0.toString());
      assertEquals(false, noObjectType0.isFunctionPrototypeType());
      assertEquals(false, noObjectType0.isEnumType());
      assertEquals(false, noObjectType0.isResolved());
      assertEquals(2147483647, noObjectType0.getPropertiesCount());
      assertEquals(false, noObjectType0.isNullType());
      assertEquals(false, noObjectType0.isTemplateType());
      assertEquals(false, noObjectType0.isCheckedUnknownType());
      assertEquals(false, noObjectType0.isEnumElementType());
      assertEquals(false, noObjectType0.isStringValueType());
      assertEquals(false, noObjectType0.isReturnTypeInferred());
      assertEquals(false, noObjectType0.isUnionType());
      assertEquals(true, noObjectType0.isNoObjectType());
      assertEquals(true, noObjectType0.matchesNumberContext());
      assertEquals(false, noObjectType0.isNoResolvedType());
      assertEquals(false, noObjectType0.isVoidType());
      assertEquals(0, noObjectType0.getExtendedInterfacesCount());
      assertEquals(false, noObjectType0.isNumberValueType());
      assertEquals(false, noObjectType0.isNoType());
      assertEquals(false, noObjectType0.isOrdinaryFunction());
      assertEquals(2147483647, noObjectType0.getMaxArguments());
      assertEquals(false, noObjectType0.isFunctionType());
      assertNull(noObjectType0.getTemplateTypeName());
      assertEquals(true, noObjectType0.isConstructor());
      assertEquals(false, noObjectType0.isInterface());
      assertEquals(true, noObjectType0.matchesStringContext());
      assertNull(noObjectType0.getReferenceName());
      assertEquals(BooleanLiteralSet.TRUE, noObjectType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noObjectType0.isNominalType());
      assertEquals(false, noObjectType0.isBooleanValueType());
      assertEquals(false, noObjectType0.isAllType());
      assertEquals(false, noObjectType0.isRecordType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(noObjectType0);
      
      FunctionType functionType0 = jSTypeRegistry0.createFunctionTypeWithNewThisType((FunctionType) noObjectType0, (ObjectType) noObjectType0);
      assertEquals(true, noObjectType0.canBeCalled());
      assertEquals(true, noObjectType0.matchesObjectContext());
      assertEquals(false, noObjectType0.hasCachedValues());
      assertEquals(true, noObjectType0.hasInstanceType());
      assertEquals("NoObject", noObjectType0.toString());
      assertEquals(false, noObjectType0.isFunctionPrototypeType());
      assertEquals(false, noObjectType0.isEnumType());
      assertEquals(false, noObjectType0.isResolved());
      assertEquals(2147483647, noObjectType0.getPropertiesCount());
      assertEquals(false, noObjectType0.isNullType());
      assertEquals(false, noObjectType0.isTemplateType());
      assertEquals(false, noObjectType0.isCheckedUnknownType());
      assertEquals(false, noObjectType0.isEnumElementType());
      assertEquals(false, noObjectType0.isStringValueType());
      assertEquals(false, noObjectType0.isReturnTypeInferred());
      assertEquals(false, noObjectType0.isUnionType());
      assertEquals(true, noObjectType0.isNoObjectType());
      assertEquals(true, noObjectType0.matchesNumberContext());
      assertEquals(false, noObjectType0.isNoResolvedType());
      assertEquals(false, noObjectType0.isVoidType());
      assertEquals(0, noObjectType0.getExtendedInterfacesCount());
      assertEquals(false, noObjectType0.isNumberValueType());
      assertEquals(false, noObjectType0.isNoType());
      assertEquals(false, noObjectType0.isOrdinaryFunction());
      assertEquals(2147483647, noObjectType0.getMaxArguments());
      assertEquals(false, noObjectType0.isFunctionType());
      assertNull(noObjectType0.getTemplateTypeName());
      assertEquals(true, noObjectType0.isConstructor());
      assertEquals(false, noObjectType0.isInterface());
      assertEquals(true, noObjectType0.matchesStringContext());
      assertNull(noObjectType0.getReferenceName());
      assertEquals(BooleanLiteralSet.TRUE, noObjectType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noObjectType0.isNominalType());
      assertEquals(false, noObjectType0.isBooleanValueType());
      assertEquals(false, noObjectType0.isAllType());
      assertEquals(false, noObjectType0.isRecordType());
      assertEquals(true, functionType0.isFunctionType());
      assertNull(functionType0.getTemplateTypeName());
      assertEquals(false, functionType0.isBooleanValueType());
      assertEquals(false, functionType0.isNoType());
      assertEquals(false, functionType0.isUnionType());
      assertEquals(false, functionType0.isAllType());
      assertEquals(false, functionType0.isEnumType());
      assertEquals(true, functionType0.canBeCalled());
      assertEquals(true, functionType0.hasInstanceType());
      assertEquals(false, functionType0.isReturnTypeInferred());
      assertEquals(false, functionType0.isInterface());
      assertEquals(false, functionType0.isRecordType());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertEquals(false, functionType0.isTemplateType());
      assertEquals(false, functionType0.isOrdinaryFunction());
      assertEquals(false, functionType0.isCheckedUnknownType());
      assertEquals(false, functionType0.isNoObjectType());
      assertEquals(false, functionType0.isFunctionPrototypeType());
      assertEquals(false, functionType0.isVoidType());
      assertEquals(false, functionType0.isStringValueType());
      assertEquals(false, functionType0.isNominalType());
      assertEquals(true, functionType0.isConstructor());
      assertEquals(false, functionType0.isEnumElementType());
      assertEquals(2147483647, functionType0.getMaxArguments());
      assertEquals(false, functionType0.isNoResolvedType());
      assertEquals(false, functionType0.isResolved());
      assertEquals(false, functionType0.hasCachedValues());
      assertEquals(false, functionType0.isNullType());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, functionType0.isNumberValueType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(functionType0);
  }

  @Test
  public void test08()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      String string0 = "!WTnT0p;x%;9V";
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, string0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, errorFunctionType0.isStringValueType());
      assertEquals(false, errorFunctionType0.hasCachedValues());
      assertEquals(false, errorFunctionType0.isCheckedUnknownType());
      assertEquals(false, errorFunctionType0.isInterface());
      assertEquals(3, errorFunctionType0.getMaxArguments());
      assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      assertEquals(true, errorFunctionType0.canBeCalled());
      assertNull(errorFunctionType0.getTemplateTypeName());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertEquals(true, errorFunctionType0.hasInstanceType());
      assertEquals(false, errorFunctionType0.isNominalType());
      assertEquals(false, errorFunctionType0.isBooleanValueType());
      assertEquals(false, errorFunctionType0.isEnumElementType());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertEquals(false, errorFunctionType0.isNoType());
      assertEquals(false, errorFunctionType0.isNoObjectType());
      assertEquals(false, errorFunctionType0.isNoResolvedType());
      assertEquals(false, errorFunctionType0.isRecordType());
      assertEquals(false, errorFunctionType0.isAllType());
      assertEquals(true, errorFunctionType0.isConstructor());
      assertEquals(false, errorFunctionType0.isVoidType());
      assertEquals(false, errorFunctionType0.isUnionType());
      assertEquals(false, errorFunctionType0.isTemplateType());
      assertEquals(true, errorFunctionType0.isFunctionType());
      assertEquals(false, errorFunctionType0.isEnumType());
      assertEquals(false, errorFunctionType0.isResolved());
      assertEquals(false, errorFunctionType0.isFunctionPrototypeType());
      assertEquals(false, errorFunctionType0.isReturnTypeInferred());
      assertEquals(false, errorFunctionType0.isNullType());
      assertEquals(false, errorFunctionType0.isNumberValueType());
      assertNotNull(errorFunctionType0);
      
      boolean boolean0 = true;
      JSType[] jSTypeArray0 = new JSType[3];
      jSTypeArray0[2] = (JSType) errorFunctionType0;
      assertEquals(false, jSTypeArray0[2].isResolved());
      assertEquals(false, jSTypeArray0[2].isNoResolvedType());
      assertEquals(false, jSTypeArray0[2].isNullType());
      assertEquals(false, jSTypeArray0[2].isAllType());
      assertEquals(false, jSTypeArray0[2].isUnionType());
      assertEquals(false, jSTypeArray0[2].isNoType());
      assertEquals(false, jSTypeArray0[2].isFunctionPrototypeType());
      assertEquals(false, jSTypeArray0[2].isCheckedUnknownType());
      assertEquals(false, jSTypeArray0[2].isVoidType());
      assertEquals(false, jSTypeArray0[2].isRecordType());
      assertEquals(false, jSTypeArray0[2].isOrdinaryFunction());
      assertEquals(true, jSTypeArray0[2].isFunctionType());
      assertEquals(false, jSTypeArray0[2].isNumberValueType());
      assertEquals(false, jSTypeArray0[2].isNoObjectType());
      assertEquals(false, jSTypeArray0[2].isInterface());
      assertEquals(false, jSTypeArray0[2].isNominalType());
      assertEquals(false, jSTypeArray0[2].isStringValueType());
      assertEquals(false, jSTypeArray0[2].isTemplateType());
      assertEquals(false, jSTypeArray0[2].isBooleanValueType());
      assertEquals(true, jSTypeArray0[2].isConstructor());
      assertEquals(false, jSTypeArray0[2].isEnumElementType());
      assertEquals(false, jSTypeArray0[2].isEnumType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, errorFunctionType0.isStringValueType());
      assertEquals(false, errorFunctionType0.hasCachedValues());
      assertEquals(false, errorFunctionType0.isCheckedUnknownType());
      assertEquals(false, errorFunctionType0.isInterface());
      assertEquals(3, errorFunctionType0.getMaxArguments());
      assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      assertEquals(true, errorFunctionType0.canBeCalled());
      assertNull(errorFunctionType0.getTemplateTypeName());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertEquals(true, errorFunctionType0.hasInstanceType());
      assertEquals(false, errorFunctionType0.isNominalType());
      assertEquals(false, errorFunctionType0.isBooleanValueType());
      assertEquals(false, errorFunctionType0.isEnumElementType());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertEquals(false, errorFunctionType0.isNoType());
      assertEquals(false, errorFunctionType0.isNoObjectType());
      assertEquals(false, errorFunctionType0.isNoResolvedType());
      assertEquals(false, errorFunctionType0.isRecordType());
      assertEquals(false, errorFunctionType0.isAllType());
      assertEquals(true, errorFunctionType0.isConstructor());
      assertEquals(false, errorFunctionType0.isVoidType());
      assertEquals(false, errorFunctionType0.isUnionType());
      assertEquals(false, errorFunctionType0.isTemplateType());
      assertEquals(true, errorFunctionType0.isFunctionType());
      assertEquals(false, errorFunctionType0.isEnumType());
      assertEquals(false, errorFunctionType0.isResolved());
      assertEquals(false, errorFunctionType0.isFunctionPrototypeType());
      assertEquals(false, errorFunctionType0.isReturnTypeInferred());
      assertEquals(false, errorFunctionType0.isNullType());
      assertEquals(false, errorFunctionType0.isNumberValueType());
      assertNotNull(jSTypeArray0[2]);
      
      FunctionType functionType0 = jSTypeRegistry0.createFunctionType((JSType) errorFunctionType0, boolean0, jSTypeArray0);
      assertEquals(false, functionType0.isFunctionPrototypeType());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, functionType0.isReturnTypeInferred());
      assertEquals(false, functionType0.isUnionType());
      assertEquals(2147483647, functionType0.getMaxArguments());
      assertEquals(false, functionType0.isAllType());
      assertEquals(false, functionType0.isEnumType());
      assertEquals(false, functionType0.isCheckedUnknownType());
      assertEquals(false, functionType0.isBooleanValueType());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertEquals(false, functionType0.isNumberValueType());
      assertEquals(true, functionType0.canBeCalled());
      assertEquals(false, functionType0.isNominalType());
      assertEquals(false, functionType0.isEnumElementType());
      assertEquals(false, functionType0.isTemplateType());
      assertEquals(false, functionType0.isStringValueType());
      assertEquals(false, functionType0.isNoType());
      assertEquals(false, functionType0.isVoidType());
      assertEquals(false, functionType0.isRecordType());
      assertEquals(false, functionType0.hasInstanceType());
      assertEquals(false, functionType0.hasCachedValues());
      assertEquals(false, functionType0.isConstructor());
      assertEquals(false, functionType0.isNoResolvedType());
      assertEquals(false, functionType0.isNoObjectType());
      assertEquals(true, functionType0.isOrdinaryFunction());
      assertEquals(false, functionType0.isInterface());
      assertEquals(false, functionType0.isNullType());
      assertEquals(true, functionType0.isFunctionType());
      assertEquals(false, functionType0.isResolved());
      assertNull(functionType0.getTemplateTypeName());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, errorFunctionType0.isStringValueType());
      assertEquals(false, errorFunctionType0.isCheckedUnknownType());
      assertEquals(true, errorFunctionType0.hasCachedValues());
      assertEquals(false, errorFunctionType0.isInterface());
      assertEquals(3, errorFunctionType0.getMaxArguments());
      assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      assertEquals(true, errorFunctionType0.canBeCalled());
      assertNull(errorFunctionType0.getTemplateTypeName());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertEquals(true, errorFunctionType0.hasInstanceType());
      assertEquals(false, errorFunctionType0.isNominalType());
      assertEquals(false, errorFunctionType0.isBooleanValueType());
      assertEquals(false, errorFunctionType0.isEnumElementType());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertEquals(false, errorFunctionType0.isNoType());
      assertEquals(false, errorFunctionType0.isNoObjectType());
      assertEquals(false, errorFunctionType0.isNoResolvedType());
      assertEquals(false, errorFunctionType0.isRecordType());
      assertEquals(false, errorFunctionType0.isAllType());
      assertEquals(true, errorFunctionType0.isConstructor());
      assertEquals(false, errorFunctionType0.isVoidType());
      assertEquals(false, errorFunctionType0.isUnionType());
      assertEquals(false, errorFunctionType0.isTemplateType());
      assertEquals(true, errorFunctionType0.isFunctionType());
      assertEquals(false, errorFunctionType0.isEnumType());
      assertEquals(false, errorFunctionType0.isResolved());
      assertEquals(false, errorFunctionType0.isFunctionPrototypeType());
      assertEquals(false, errorFunctionType0.isReturnTypeInferred());
      assertEquals(false, errorFunctionType0.isNullType());
      assertEquals(false, errorFunctionType0.isNumberValueType());
      assertNotNull(functionType0);
      
      functionType0.clearCachedValues();
      assertEquals(false, functionType0.isFunctionPrototypeType());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, functionType0.isReturnTypeInferred());
      assertEquals(false, functionType0.isUnionType());
      assertEquals(2147483647, functionType0.getMaxArguments());
      assertEquals(false, functionType0.isAllType());
      assertEquals(false, functionType0.isEnumType());
      assertEquals(false, functionType0.isCheckedUnknownType());
      assertEquals(false, functionType0.isBooleanValueType());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertEquals(false, functionType0.isNumberValueType());
      assertEquals(true, functionType0.canBeCalled());
      assertEquals(false, functionType0.isNominalType());
      assertEquals(false, functionType0.isEnumElementType());
      assertEquals(false, functionType0.isTemplateType());
      assertEquals(false, functionType0.isStringValueType());
      assertEquals(false, functionType0.isNoType());
      assertEquals(false, functionType0.isVoidType());
      assertEquals(false, functionType0.isRecordType());
      assertEquals(false, functionType0.hasInstanceType());
      assertEquals(false, functionType0.hasCachedValues());
      assertEquals(false, functionType0.isConstructor());
      assertEquals(false, functionType0.isNoResolvedType());
      assertEquals(false, functionType0.isNoObjectType());
      assertEquals(true, functionType0.isOrdinaryFunction());
      assertEquals(false, functionType0.isInterface());
      assertEquals(false, functionType0.isNullType());
      assertEquals(true, functionType0.isFunctionType());
      assertEquals(false, functionType0.isResolved());
      assertNull(functionType0.getTemplateTypeName());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, errorFunctionType0.isStringValueType());
      assertEquals(false, errorFunctionType0.isCheckedUnknownType());
      assertEquals(true, errorFunctionType0.hasCachedValues());
      assertEquals(false, errorFunctionType0.isInterface());
      assertEquals(3, errorFunctionType0.getMaxArguments());
      assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      assertEquals(true, errorFunctionType0.canBeCalled());
      assertNull(errorFunctionType0.getTemplateTypeName());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertEquals(true, errorFunctionType0.hasInstanceType());
      assertEquals(false, errorFunctionType0.isNominalType());
      assertEquals(false, errorFunctionType0.isBooleanValueType());
      assertEquals(false, errorFunctionType0.isEnumElementType());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertEquals(false, errorFunctionType0.isNoType());
      assertEquals(false, errorFunctionType0.isNoObjectType());
      assertEquals(false, errorFunctionType0.isNoResolvedType());
      assertEquals(false, errorFunctionType0.isRecordType());
      assertEquals(false, errorFunctionType0.isAllType());
      assertEquals(true, errorFunctionType0.isConstructor());
      assertEquals(false, errorFunctionType0.isVoidType());
      assertEquals(false, errorFunctionType0.isUnionType());
      assertEquals(false, errorFunctionType0.isTemplateType());
      assertEquals(true, errorFunctionType0.isFunctionType());
      assertEquals(false, errorFunctionType0.isEnumType());
      assertEquals(false, errorFunctionType0.isResolved());
      assertEquals(false, errorFunctionType0.isFunctionPrototypeType());
      assertEquals(false, errorFunctionType0.isReturnTypeInferred());
      assertEquals(false, errorFunctionType0.isNullType());
      assertEquals(false, errorFunctionType0.isNumberValueType());
  }

  @Test
  public void test09()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      String string0 = "!WTnT0p;x%;9V";
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, string0);
      assertEquals(false, errorFunctionType0.isFunctionPrototypeType());
      assertEquals(false, errorFunctionType0.isBooleanValueType());
      assertEquals(false, errorFunctionType0.isUnionType());
      assertEquals(false, errorFunctionType0.isResolved());
      assertEquals(false, errorFunctionType0.isNoType());
      assertEquals(false, errorFunctionType0.hasCachedValues());
      assertEquals(false, errorFunctionType0.isNoResolvedType());
      assertEquals(false, errorFunctionType0.isCheckedUnknownType());
      assertEquals(false, errorFunctionType0.isReturnTypeInferred());
      assertEquals(false, errorFunctionType0.isNoObjectType());
      assertEquals(false, errorFunctionType0.isTemplateType());
      assertEquals(false, errorFunctionType0.isNumberValueType());
      assertEquals(false, errorFunctionType0.isAllType());
      assertEquals(false, errorFunctionType0.isNullType());
      assertEquals(false, errorFunctionType0.isEnumType());
      assertEquals(false, errorFunctionType0.isRecordType());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertEquals(false, errorFunctionType0.isVoidType());
      assertEquals(false, errorFunctionType0.isInterface());
      assertEquals(true, errorFunctionType0.canBeCalled());
      assertNull(errorFunctionType0.getTemplateTypeName());
      assertEquals(true, errorFunctionType0.isFunctionType());
      assertEquals(false, errorFunctionType0.isStringValueType());
      assertEquals(3, errorFunctionType0.getMaxArguments());
      assertEquals(true, errorFunctionType0.hasInstanceType());
      assertEquals(false, errorFunctionType0.isEnumElementType());
      assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      assertEquals(true, errorFunctionType0.isConstructor());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, errorFunctionType0.isNominalType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(errorFunctionType0);
      
      boolean boolean0 = true;
      JSType[] jSTypeArray0 = new JSType[3];
      jSTypeArray0[0] = (JSType) errorFunctionType0;
      assertEquals(false, jSTypeArray0[0].isStringValueType());
      assertEquals(false, jSTypeArray0[0].isAllType());
      assertEquals(false, jSTypeArray0[0].isNumberValueType());
      assertEquals(false, jSTypeArray0[0].isNominalType());
      assertEquals(false, jSTypeArray0[0].isResolved());
      assertEquals(false, jSTypeArray0[0].isCheckedUnknownType());
      assertEquals(false, jSTypeArray0[0].isUnionType());
      assertEquals(false, jSTypeArray0[0].isOrdinaryFunction());
      assertEquals(false, jSTypeArray0[0].isTemplateType());
      assertEquals(false, jSTypeArray0[0].isEnumElementType());
      assertEquals(false, jSTypeArray0[0].isBooleanValueType());
      assertEquals(false, jSTypeArray0[0].isEnumType());
      assertEquals(false, jSTypeArray0[0].isFunctionPrototypeType());
      assertEquals(false, jSTypeArray0[0].isNoObjectType());
      assertEquals(false, jSTypeArray0[0].isNoResolvedType());
      assertEquals(false, jSTypeArray0[0].isInterface());
      assertEquals(false, jSTypeArray0[0].isVoidType());
      assertEquals(false, jSTypeArray0[0].isNullType());
      assertEquals(false, jSTypeArray0[0].isRecordType());
      assertEquals(true, jSTypeArray0[0].isFunctionType());
      assertEquals(true, jSTypeArray0[0].isConstructor());
      assertEquals(false, jSTypeArray0[0].isNoType());
      assertEquals(false, errorFunctionType0.isFunctionPrototypeType());
      assertEquals(false, errorFunctionType0.isBooleanValueType());
      assertEquals(false, errorFunctionType0.isUnionType());
      assertEquals(false, errorFunctionType0.isResolved());
      assertEquals(false, errorFunctionType0.isNoType());
      assertEquals(false, errorFunctionType0.hasCachedValues());
      assertEquals(false, errorFunctionType0.isNoResolvedType());
      assertEquals(false, errorFunctionType0.isCheckedUnknownType());
      assertEquals(false, errorFunctionType0.isReturnTypeInferred());
      assertEquals(false, errorFunctionType0.isNoObjectType());
      assertEquals(false, errorFunctionType0.isTemplateType());
      assertEquals(false, errorFunctionType0.isNumberValueType());
      assertEquals(false, errorFunctionType0.isAllType());
      assertEquals(false, errorFunctionType0.isNullType());
      assertEquals(false, errorFunctionType0.isEnumType());
      assertEquals(false, errorFunctionType0.isRecordType());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertEquals(false, errorFunctionType0.isVoidType());
      assertEquals(false, errorFunctionType0.isInterface());
      assertEquals(true, errorFunctionType0.canBeCalled());
      assertNull(errorFunctionType0.getTemplateTypeName());
      assertEquals(true, errorFunctionType0.isFunctionType());
      assertEquals(false, errorFunctionType0.isStringValueType());
      assertEquals(3, errorFunctionType0.getMaxArguments());
      assertEquals(true, errorFunctionType0.hasInstanceType());
      assertEquals(false, errorFunctionType0.isEnumElementType());
      assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      assertEquals(true, errorFunctionType0.isConstructor());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, errorFunctionType0.isNominalType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeArray0[0]);
      
      jSTypeArray0[1] = (JSType) errorFunctionType0;
      assertEquals(false, errorFunctionType0.isFunctionPrototypeType());
      assertEquals(false, errorFunctionType0.isBooleanValueType());
      assertEquals(false, errorFunctionType0.isUnionType());
      assertEquals(false, errorFunctionType0.isResolved());
      assertEquals(false, errorFunctionType0.isNoType());
      assertEquals(false, errorFunctionType0.hasCachedValues());
      assertEquals(false, errorFunctionType0.isNoResolvedType());
      assertEquals(false, errorFunctionType0.isCheckedUnknownType());
      assertEquals(false, errorFunctionType0.isReturnTypeInferred());
      assertEquals(false, errorFunctionType0.isNoObjectType());
      assertEquals(false, errorFunctionType0.isTemplateType());
      assertEquals(false, errorFunctionType0.isNumberValueType());
      assertEquals(false, errorFunctionType0.isAllType());
      assertEquals(false, errorFunctionType0.isNullType());
      assertEquals(false, errorFunctionType0.isEnumType());
      assertEquals(false, errorFunctionType0.isRecordType());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertEquals(false, errorFunctionType0.isVoidType());
      assertEquals(false, errorFunctionType0.isInterface());
      assertEquals(true, errorFunctionType0.canBeCalled());
      assertNull(errorFunctionType0.getTemplateTypeName());
      assertEquals(true, errorFunctionType0.isFunctionType());
      assertEquals(false, errorFunctionType0.isStringValueType());
      assertEquals(3, errorFunctionType0.getMaxArguments());
      assertEquals(true, errorFunctionType0.hasInstanceType());
      assertEquals(false, errorFunctionType0.isEnumElementType());
      assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      assertEquals(true, errorFunctionType0.isConstructor());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, errorFunctionType0.isNominalType());
      assertEquals(false, jSTypeArray0[1].isNoObjectType());
      assertEquals(false, jSTypeArray0[1].isNoResolvedType());
      assertEquals(false, jSTypeArray0[1].isUnionType());
      assertEquals(false, jSTypeArray0[1].isCheckedUnknownType());
      assertEquals(false, jSTypeArray0[1].isOrdinaryFunction());
      assertEquals(false, jSTypeArray0[1].isRecordType());
      assertEquals(false, jSTypeArray0[1].isTemplateType());
      assertEquals(false, jSTypeArray0[1].isFunctionPrototypeType());
      assertEquals(false, jSTypeArray0[1].isResolved());
      assertEquals(false, jSTypeArray0[1].isBooleanValueType());
      assertEquals(false, jSTypeArray0[1].isEnumElementType());
      assertEquals(false, jSTypeArray0[1].isInterface());
      assertEquals(false, jSTypeArray0[1].isEnumType());
      assertEquals(false, jSTypeArray0[1].isNominalType());
      assertEquals(false, jSTypeArray0[1].isNullType());
      assertEquals(false, jSTypeArray0[1].isStringValueType());
      assertEquals(false, jSTypeArray0[1].isAllType());
      assertEquals(true, jSTypeArray0[1].isFunctionType());
      assertEquals(false, jSTypeArray0[1].isNoType());
      assertEquals(false, jSTypeArray0[1].isNumberValueType());
      assertEquals(true, jSTypeArray0[1].isConstructor());
      assertEquals(false, jSTypeArray0[1].isVoidType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeArray0[1]);
      
      jSTypeArray0[2] = (JSType) errorFunctionType0;
      assertEquals(false, jSTypeArray0[2].isResolved());
      assertEquals(true, jSTypeArray0[2].isConstructor());
      assertEquals(false, jSTypeArray0[2].isCheckedUnknownType());
      assertEquals(false, jSTypeArray0[2].isNoResolvedType());
      assertEquals(false, jSTypeArray0[2].isStringValueType());
      assertEquals(false, jSTypeArray0[2].isOrdinaryFunction());
      assertEquals(false, jSTypeArray0[2].isAllType());
      assertEquals(false, jSTypeArray0[2].isEnumElementType());
      assertEquals(false, jSTypeArray0[2].isUnionType());
      assertEquals(false, jSTypeArray0[2].isNullType());
      assertEquals(false, jSTypeArray0[2].isInterface());
      assertEquals(false, jSTypeArray0[2].isTemplateType());
      assertEquals(false, jSTypeArray0[2].isNoType());
      assertEquals(false, jSTypeArray0[2].isBooleanValueType());
      assertEquals(true, jSTypeArray0[2].isFunctionType());
      assertEquals(false, jSTypeArray0[2].isNoObjectType());
      assertEquals(false, jSTypeArray0[2].isVoidType());
      assertEquals(false, jSTypeArray0[2].isRecordType());
      assertEquals(false, jSTypeArray0[2].isNumberValueType());
      assertEquals(false, jSTypeArray0[2].isFunctionPrototypeType());
      assertEquals(false, jSTypeArray0[2].isEnumType());
      assertEquals(false, jSTypeArray0[2].isNominalType());
      assertEquals(false, errorFunctionType0.isFunctionPrototypeType());
      assertEquals(false, errorFunctionType0.isBooleanValueType());
      assertEquals(false, errorFunctionType0.isUnionType());
      assertEquals(false, errorFunctionType0.isResolved());
      assertEquals(false, errorFunctionType0.isNoType());
      assertEquals(false, errorFunctionType0.hasCachedValues());
      assertEquals(false, errorFunctionType0.isNoResolvedType());
      assertEquals(false, errorFunctionType0.isCheckedUnknownType());
      assertEquals(false, errorFunctionType0.isReturnTypeInferred());
      assertEquals(false, errorFunctionType0.isNoObjectType());
      assertEquals(false, errorFunctionType0.isTemplateType());
      assertEquals(false, errorFunctionType0.isNumberValueType());
      assertEquals(false, errorFunctionType0.isAllType());
      assertEquals(false, errorFunctionType0.isNullType());
      assertEquals(false, errorFunctionType0.isEnumType());
      assertEquals(false, errorFunctionType0.isRecordType());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertEquals(false, errorFunctionType0.isVoidType());
      assertEquals(false, errorFunctionType0.isInterface());
      assertEquals(true, errorFunctionType0.canBeCalled());
      assertNull(errorFunctionType0.getTemplateTypeName());
      assertEquals(true, errorFunctionType0.isFunctionType());
      assertEquals(false, errorFunctionType0.isStringValueType());
      assertEquals(3, errorFunctionType0.getMaxArguments());
      assertEquals(true, errorFunctionType0.hasInstanceType());
      assertEquals(false, errorFunctionType0.isEnumElementType());
      assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      assertEquals(true, errorFunctionType0.isConstructor());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, errorFunctionType0.isNominalType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeArray0[2]);
      
      FunctionType functionType0 = jSTypeRegistry0.createFunctionType((JSType) errorFunctionType0, boolean0, jSTypeArray0);
      assertEquals(false, errorFunctionType0.isFunctionPrototypeType());
      assertEquals(false, errorFunctionType0.isBooleanValueType());
      assertEquals(false, errorFunctionType0.isUnionType());
      assertEquals(false, errorFunctionType0.isResolved());
      assertEquals(false, errorFunctionType0.isNoType());
      assertEquals(false, errorFunctionType0.isNoResolvedType());
      assertEquals(false, errorFunctionType0.isCheckedUnknownType());
      assertEquals(false, errorFunctionType0.isReturnTypeInferred());
      assertEquals(false, errorFunctionType0.isNoObjectType());
      assertEquals(false, errorFunctionType0.isTemplateType());
      assertEquals(false, errorFunctionType0.isNumberValueType());
      assertEquals(false, errorFunctionType0.isAllType());
      assertEquals(false, errorFunctionType0.isNullType());
      assertEquals(false, errorFunctionType0.isEnumType());
      assertEquals(false, errorFunctionType0.isRecordType());
      assertEquals(true, errorFunctionType0.hasCachedValues());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertEquals(false, errorFunctionType0.isVoidType());
      assertEquals(false, errorFunctionType0.isInterface());
      assertEquals(true, errorFunctionType0.canBeCalled());
      assertNull(errorFunctionType0.getTemplateTypeName());
      assertEquals(true, errorFunctionType0.isFunctionType());
      assertEquals(false, errorFunctionType0.isStringValueType());
      assertEquals(3, errorFunctionType0.getMaxArguments());
      assertEquals(true, errorFunctionType0.hasInstanceType());
      assertEquals(false, errorFunctionType0.isEnumElementType());
      assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      assertEquals(true, errorFunctionType0.isConstructor());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, errorFunctionType0.isNominalType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, functionType0.hasInstanceType());
      assertEquals(false, functionType0.hasCachedValues());
      assertEquals(false, functionType0.isConstructor());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertEquals(false, functionType0.isVoidType());
      assertEquals(false, functionType0.isAllType());
      assertEquals(false, functionType0.isInterface());
      assertEquals(true, functionType0.isFunctionType());
      assertEquals(false, functionType0.isTemplateType());
      assertEquals(false, functionType0.isNoObjectType());
      assertEquals(false, functionType0.isRecordType());
      assertEquals(false, functionType0.isNumberValueType());
      assertEquals(false, functionType0.isCheckedUnknownType());
      assertEquals(false, functionType0.isResolved());
      assertEquals(false, functionType0.isBooleanValueType());
      assertEquals(true, functionType0.canBeCalled());
      assertEquals(false, functionType0.isStringValueType());
      assertEquals(false, functionType0.isFunctionPrototypeType());
      assertEquals(false, functionType0.isEnumType());
      assertNull(functionType0.getTemplateTypeName());
      assertEquals(false, functionType0.isUnionType());
      assertEquals(false, functionType0.isNoResolvedType());
      assertEquals(false, functionType0.isNominalType());
      assertEquals(false, functionType0.isReturnTypeInferred());
      assertEquals(false, functionType0.isEnumElementType());
      assertEquals(false, functionType0.isNullType());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertEquals(true, functionType0.isOrdinaryFunction());
      assertEquals(false, functionType0.isNoType());
      assertEquals(2147483647, functionType0.getMaxArguments());
      assertNotNull(functionType0);
      
      String string1 = functionType0.toString();
      assertEquals("function (function (new:!WTnT0p;x%;9V, *, *, *): !WTnT0p;x%;9V, function (new:!WTnT0p;x%;9V, *, *, *): !WTnT0p;x%;9V, ...[function (new:!WTnT0p;x%;9V, *, *, *): !WTnT0p;x%;9V]): function (new:!WTnT0p;x%;9V, *, *, *): !WTnT0p;x%;9V", string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertEquals(false, errorFunctionType0.isFunctionPrototypeType());
      assertEquals(false, errorFunctionType0.isBooleanValueType());
      assertEquals(false, errorFunctionType0.isUnionType());
      assertEquals(false, errorFunctionType0.isResolved());
      assertEquals(false, errorFunctionType0.isNoType());
      assertEquals(false, errorFunctionType0.isNoResolvedType());
      assertEquals(false, errorFunctionType0.isCheckedUnknownType());
      assertEquals(false, errorFunctionType0.isReturnTypeInferred());
      assertEquals(false, errorFunctionType0.isNoObjectType());
      assertEquals(false, errorFunctionType0.isTemplateType());
      assertEquals(false, errorFunctionType0.isNumberValueType());
      assertEquals(false, errorFunctionType0.isAllType());
      assertEquals(false, errorFunctionType0.isNullType());
      assertEquals(false, errorFunctionType0.isEnumType());
      assertEquals(false, errorFunctionType0.isRecordType());
      assertEquals(true, errorFunctionType0.hasCachedValues());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertEquals(false, errorFunctionType0.isVoidType());
      assertEquals(false, errorFunctionType0.isInterface());
      assertEquals(true, errorFunctionType0.canBeCalled());
      assertNull(errorFunctionType0.getTemplateTypeName());
      assertEquals(true, errorFunctionType0.isFunctionType());
      assertEquals(false, errorFunctionType0.isStringValueType());
      assertEquals(3, errorFunctionType0.getMaxArguments());
      assertEquals(true, errorFunctionType0.hasInstanceType());
      assertEquals(false, errorFunctionType0.isEnumElementType());
      assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      assertEquals(true, errorFunctionType0.isConstructor());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, errorFunctionType0.isNominalType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, functionType0.hasInstanceType());
      assertEquals(false, functionType0.hasCachedValues());
      assertEquals(false, functionType0.isConstructor());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertEquals(false, functionType0.isVoidType());
      assertEquals(false, functionType0.isAllType());
      assertEquals(false, functionType0.isInterface());
      assertEquals(true, functionType0.isFunctionType());
      assertEquals(false, functionType0.isTemplateType());
      assertEquals(false, functionType0.isNoObjectType());
      assertEquals(false, functionType0.isRecordType());
      assertEquals(false, functionType0.isNumberValueType());
      assertEquals(false, functionType0.isCheckedUnknownType());
      assertEquals(false, functionType0.isResolved());
      assertEquals(false, functionType0.isBooleanValueType());
      assertEquals(true, functionType0.canBeCalled());
      assertEquals(false, functionType0.isStringValueType());
      assertEquals(false, functionType0.isFunctionPrototypeType());
      assertEquals(false, functionType0.isEnumType());
      assertNull(functionType0.getTemplateTypeName());
      assertEquals(false, functionType0.isUnionType());
      assertEquals(false, functionType0.isNoResolvedType());
      assertEquals(false, functionType0.isNominalType());
      assertEquals(false, functionType0.isReturnTypeInferred());
      assertEquals(false, functionType0.isEnumElementType());
      assertEquals(false, functionType0.isNullType());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertEquals(true, functionType0.isOrdinaryFunction());
      assertEquals(false, functionType0.isNoType());
      assertEquals(2147483647, functionType0.getMaxArguments());
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertNotNull(string1);
  }

  @Test
  public void test10()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      boolean boolean0 = false;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0, boolean0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      assertEquals(false, noResolvedType0.isTemplateType());
      assertEquals(2147483647, noResolvedType0.getMaxArguments());
      assertEquals(false, noResolvedType0.isVoidType());
      assertEquals(false, noResolvedType0.isStringValueType());
      assertEquals(false, noResolvedType0.isNumberValueType());
      assertNull(noResolvedType0.getTemplateTypeName());
      assertEquals(false, noResolvedType0.isInterface());
      assertEquals(true, noResolvedType0.isConstructor());
      assertEquals(false, noResolvedType0.isNominalType());
      assertEquals(2147483647, noResolvedType0.getPropertiesCount());
      assertEquals(false, noResolvedType0.isFunctionType());
      assertEquals(false, noResolvedType0.isEnumElementType());
      assertEquals(false, noResolvedType0.isRecordType());
      assertEquals(false, noResolvedType0.isResolved());
      assertEquals(false, noResolvedType0.isBooleanValueType());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertEquals(true, noResolvedType0.canBeCalled());
      assertEquals(false, noResolvedType0.isReturnTypeInferred());
      assertNull(noResolvedType0.getReferenceName());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noResolvedType0.isCheckedUnknownType());
      assertEquals(false, noResolvedType0.isEnumType());
      assertEquals(false, noResolvedType0.isUnionType());
      assertEquals(false, noResolvedType0.isAllType());
      assertEquals(true, noResolvedType0.matchesObjectContext());
      assertEquals(false, noResolvedType0.isNullType());
      assertEquals(true, noResolvedType0.hasInstanceType());
      assertEquals(false, noResolvedType0.isFunctionPrototypeType());
      assertEquals(false, noResolvedType0.isNoObjectType());
      assertEquals(true, noResolvedType0.matchesStringContext());
      assertEquals(true, noResolvedType0.isNullable());
      assertEquals(true, noResolvedType0.matchesNumberContext());
      assertEquals(false, noResolvedType0.hasCachedValues());
      assertEquals(false, noResolvedType0.isOrdinaryFunction());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(noResolvedType0);
      
      FunctionType functionType0 = jSTypeRegistry0.createFunctionTypeWithNewReturnType((FunctionType) noResolvedType0, (JSType) noResolvedType0);
      assertEquals(false, functionType0.isNoResolvedType());
      assertEquals(false, functionType0.isNumberValueType());
      assertEquals(false, functionType0.isFunctionPrototypeType());
      assertEquals(false, functionType0.isCheckedUnknownType());
      assertEquals(false, functionType0.isAllType());
      assertEquals(false, functionType0.isReturnTypeInferred());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertNull(functionType0.getTemplateTypeName());
      assertEquals(true, functionType0.isConstructor());
      assertEquals(true, functionType0.canBeCalled());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, functionType0.isEnumElementType());
      assertEquals(false, functionType0.hasCachedValues());
      assertEquals(false, functionType0.isTemplateType());
      assertEquals(false, functionType0.isRecordType());
      assertEquals(2147483647, functionType0.getMaxArguments());
      assertEquals(false, functionType0.isVoidType());
      assertEquals(false, functionType0.isEnumType());
      assertEquals(false, functionType0.isStringValueType());
      assertEquals(false, functionType0.isNullType());
      assertEquals(false, functionType0.isNominalType());
      assertEquals(true, functionType0.isFunctionType());
      assertEquals(false, functionType0.isUnionType());
      assertEquals(false, functionType0.isNoObjectType());
      assertEquals(false, functionType0.isOrdinaryFunction());
      assertEquals(true, functionType0.hasInstanceType());
      assertEquals(false, functionType0.isResolved());
      assertEquals(false, functionType0.isBooleanValueType());
      assertEquals(false, functionType0.isNoType());
      assertEquals(false, functionType0.isInterface());
      assertEquals(false, noResolvedType0.isTemplateType());
      assertEquals(2147483647, noResolvedType0.getMaxArguments());
      assertEquals(false, noResolvedType0.isVoidType());
      assertEquals(false, noResolvedType0.isStringValueType());
      assertEquals(false, noResolvedType0.isNumberValueType());
      assertNull(noResolvedType0.getTemplateTypeName());
      assertEquals(false, noResolvedType0.isInterface());
      assertEquals(true, noResolvedType0.isConstructor());
      assertEquals(false, noResolvedType0.isNominalType());
      assertEquals(2147483647, noResolvedType0.getPropertiesCount());
      assertEquals(false, noResolvedType0.isFunctionType());
      assertEquals(false, noResolvedType0.isEnumElementType());
      assertEquals(false, noResolvedType0.isRecordType());
      assertEquals(false, noResolvedType0.isResolved());
      assertEquals(false, noResolvedType0.isBooleanValueType());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertEquals(true, noResolvedType0.canBeCalled());
      assertEquals(false, noResolvedType0.isReturnTypeInferred());
      assertNull(noResolvedType0.getReferenceName());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noResolvedType0.isCheckedUnknownType());
      assertEquals(false, noResolvedType0.isEnumType());
      assertEquals(false, noResolvedType0.isUnionType());
      assertEquals(false, noResolvedType0.isAllType());
      assertEquals(true, noResolvedType0.matchesObjectContext());
      assertEquals(false, noResolvedType0.isNullType());
      assertEquals(true, noResolvedType0.hasInstanceType());
      assertEquals(false, noResolvedType0.isFunctionPrototypeType());
      assertEquals(false, noResolvedType0.isNoObjectType());
      assertEquals(true, noResolvedType0.matchesStringContext());
      assertEquals(true, noResolvedType0.isNullable());
      assertEquals(true, noResolvedType0.matchesNumberContext());
      assertEquals(false, noResolvedType0.hasCachedValues());
      assertEquals(false, noResolvedType0.isOrdinaryFunction());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(functionType0);
      
      String string0 = functionType0.toString();
      assertEquals("function (new:NoResolvedType, ...[?]): NoResolvedType", string0);
      assertEquals(false, functionType0.isNoResolvedType());
      assertEquals(false, functionType0.isNumberValueType());
      assertEquals(false, functionType0.isFunctionPrototypeType());
      assertEquals(false, functionType0.isCheckedUnknownType());
      assertEquals(false, functionType0.isAllType());
      assertEquals(false, functionType0.isReturnTypeInferred());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertNull(functionType0.getTemplateTypeName());
      assertEquals(true, functionType0.isConstructor());
      assertEquals(true, functionType0.canBeCalled());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, functionType0.isEnumElementType());
      assertEquals(false, functionType0.hasCachedValues());
      assertEquals(false, functionType0.isTemplateType());
      assertEquals(false, functionType0.isRecordType());
      assertEquals(2147483647, functionType0.getMaxArguments());
      assertEquals(false, functionType0.isVoidType());
      assertEquals(false, functionType0.isEnumType());
      assertEquals(false, functionType0.isStringValueType());
      assertEquals(false, functionType0.isNullType());
      assertEquals(false, functionType0.isNominalType());
      assertEquals(true, functionType0.isFunctionType());
      assertEquals(false, functionType0.isUnionType());
      assertEquals(false, functionType0.isNoObjectType());
      assertEquals(false, functionType0.isOrdinaryFunction());
      assertEquals(true, functionType0.hasInstanceType());
      assertEquals(false, functionType0.isResolved());
      assertEquals(false, functionType0.isBooleanValueType());
      assertEquals(false, functionType0.isNoType());
      assertEquals(false, functionType0.isInterface());
      assertEquals(false, noResolvedType0.isTemplateType());
      assertEquals(2147483647, noResolvedType0.getMaxArguments());
      assertEquals(false, noResolvedType0.isVoidType());
      assertEquals(false, noResolvedType0.isStringValueType());
      assertEquals(false, noResolvedType0.isNumberValueType());
      assertNull(noResolvedType0.getTemplateTypeName());
      assertEquals(false, noResolvedType0.isInterface());
      assertEquals(true, noResolvedType0.isConstructor());
      assertEquals(false, noResolvedType0.isNominalType());
      assertEquals(2147483647, noResolvedType0.getPropertiesCount());
      assertEquals(false, noResolvedType0.isFunctionType());
      assertEquals(false, noResolvedType0.isEnumElementType());
      assertEquals(false, noResolvedType0.isRecordType());
      assertEquals(false, noResolvedType0.isResolved());
      assertEquals(false, noResolvedType0.isBooleanValueType());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertEquals(true, noResolvedType0.canBeCalled());
      assertEquals(false, noResolvedType0.isReturnTypeInferred());
      assertNull(noResolvedType0.getReferenceName());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noResolvedType0.isCheckedUnknownType());
      assertEquals(false, noResolvedType0.isEnumType());
      assertEquals(false, noResolvedType0.isUnionType());
      assertEquals(false, noResolvedType0.isAllType());
      assertEquals(true, noResolvedType0.matchesObjectContext());
      assertEquals(false, noResolvedType0.isNullType());
      assertEquals(true, noResolvedType0.hasInstanceType());
      assertEquals(false, noResolvedType0.isFunctionPrototypeType());
      assertEquals(false, noResolvedType0.isNoObjectType());
      assertEquals(true, noResolvedType0.matchesStringContext());
      assertEquals(true, noResolvedType0.isNullable());
      assertEquals(true, noResolvedType0.matchesNumberContext());
      assertEquals(false, noResolvedType0.isOrdinaryFunction());
      assertEquals(true, noResolvedType0.hasCachedValues());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(string0);
  }

  @Test
  public void test11()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      boolean boolean0 = true;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0, boolean0);
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      String string0 = "CONSTRUCTOR";
      int int0 = 3754;
      NamedType namedType0 = new NamedType(jSTypeRegistry0, string0, string0, int0, int0);
      assertEquals(false, namedType0.isResolved());
      assertEquals(false, namedType0.isEnumElementType());
      assertEquals(false, namedType0.isFunctionType());
      assertEquals(false, namedType0.isNumberValueType());
      assertEquals(false, namedType0.isTemplateType());
      assertEquals(false, namedType0.isStringValueType());
      assertEquals(false, namedType0.isAllType());
      assertEquals(false, namedType0.isVoidType());
      assertEquals(false, namedType0.isFunctionPrototypeType());
      assertEquals(false, namedType0.isRecordType());
      assertEquals(false, namedType0.isUnionType());
      assertEquals(BooleanLiteralSet.TRUE, namedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, namedType0.isBooleanValueType());
      assertEquals(false, namedType0.isNullType());
      assertEquals(false, namedType0.hasCachedValues());
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(namedType0);
      
      Node node0 = namedType0.getPropertyNode(string0);
      assertEquals(false, namedType0.isResolved());
      assertEquals(false, namedType0.isEnumElementType());
      assertEquals(false, namedType0.isFunctionType());
      assertEquals(false, namedType0.isNumberValueType());
      assertEquals(false, namedType0.isTemplateType());
      assertEquals(false, namedType0.isStringValueType());
      assertEquals(false, namedType0.isAllType());
      assertEquals(false, namedType0.isVoidType());
      assertEquals(false, namedType0.isFunctionPrototypeType());
      assertEquals(false, namedType0.isRecordType());
      assertEquals(false, namedType0.isUnionType());
      assertEquals(BooleanLiteralSet.TRUE, namedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, namedType0.isBooleanValueType());
      assertEquals(false, namedType0.isNullType());
      assertEquals(false, namedType0.hasCachedValues());
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNull(node0);
      
      FunctionType functionType0 = FunctionType.forInterface(jSTypeRegistry0, string0, node0);
      assertEquals(false, namedType0.isResolved());
      assertEquals(false, namedType0.isEnumElementType());
      assertEquals(false, namedType0.isFunctionType());
      assertEquals(false, namedType0.isNumberValueType());
      assertEquals(false, namedType0.isTemplateType());
      assertEquals(false, namedType0.isStringValueType());
      assertEquals(false, namedType0.isAllType());
      assertEquals(false, namedType0.isVoidType());
      assertEquals(false, namedType0.isFunctionPrototypeType());
      assertEquals(false, namedType0.isRecordType());
      assertEquals(false, namedType0.isUnionType());
      assertEquals(BooleanLiteralSet.TRUE, namedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, namedType0.isBooleanValueType());
      assertEquals(false, namedType0.isNullType());
      assertEquals(false, namedType0.hasCachedValues());
      assertEquals(false, functionType0.hasCachedValues());
      assertEquals(false, functionType0.isFunctionPrototypeType());
      assertEquals(false, functionType0.isCheckedUnknownType());
      assertEquals(false, functionType0.isBooleanValueType());
      assertEquals(0, functionType0.getMaxArguments());
      assertEquals(false, functionType0.isNominalType());
      assertEquals(false, functionType0.isNumberValueType());
      assertEquals(false, functionType0.isNullType());
      assertEquals(false, functionType0.isNoType());
      assertEquals(true, functionType0.isFunctionType());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, functionType0.isOrdinaryFunction());
      assertEquals(true, functionType0.isInterface());
      assertEquals(false, functionType0.isUnionType());
      assertEquals(false, functionType0.isNoObjectType());
      assertEquals(false, functionType0.isResolved());
      assertEquals(false, functionType0.isVoidType());
      assertEquals(false, functionType0.isRecordType());
      assertEquals(true, functionType0.canBeCalled());
      assertNull(functionType0.getTemplateTypeName());
      assertEquals(false, functionType0.isConstructor());
      assertEquals(false, functionType0.isAllType());
      assertEquals(false, functionType0.isNoResolvedType());
      assertEquals(false, functionType0.isEnumType());
      assertEquals(false, functionType0.isReturnTypeInferred());
      assertEquals(false, functionType0.isTemplateType());
      assertEquals(false, functionType0.isStringValueType());
      assertEquals(false, functionType0.isEnumElementType());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertEquals(true, functionType0.hasInstanceType());
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(functionType0);
      
      String string1 = functionType0.toString();
      assertEquals("function (this:CONSTRUCTOR): ?", string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertEquals(false, namedType0.isResolved());
      assertEquals(false, namedType0.isEnumElementType());
      assertEquals(false, namedType0.isFunctionType());
      assertEquals(false, namedType0.isNumberValueType());
      assertEquals(false, namedType0.isTemplateType());
      assertEquals(false, namedType0.isStringValueType());
      assertEquals(false, namedType0.isAllType());
      assertEquals(false, namedType0.isVoidType());
      assertEquals(false, namedType0.isFunctionPrototypeType());
      assertEquals(false, namedType0.isRecordType());
      assertEquals(false, namedType0.isUnionType());
      assertEquals(BooleanLiteralSet.TRUE, namedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, namedType0.isBooleanValueType());
      assertEquals(false, namedType0.isNullType());
      assertEquals(false, namedType0.hasCachedValues());
      assertEquals(false, functionType0.isFunctionPrototypeType());
      assertEquals(false, functionType0.isCheckedUnknownType());
      assertEquals(false, functionType0.isBooleanValueType());
      assertEquals(0, functionType0.getMaxArguments());
      assertEquals(false, functionType0.isNominalType());
      assertEquals(false, functionType0.isNumberValueType());
      assertEquals(false, functionType0.isNullType());
      assertEquals(false, functionType0.isNoType());
      assertEquals(true, functionType0.isFunctionType());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, functionType0.isOrdinaryFunction());
      assertEquals(true, functionType0.isInterface());
      assertEquals(false, functionType0.isUnionType());
      assertEquals(false, functionType0.isNoObjectType());
      assertEquals(false, functionType0.isResolved());
      assertEquals(false, functionType0.isVoidType());
      assertEquals(false, functionType0.isRecordType());
      assertEquals(true, functionType0.canBeCalled());
      assertNull(functionType0.getTemplateTypeName());
      assertEquals(false, functionType0.isConstructor());
      assertEquals(false, functionType0.isAllType());
      assertEquals(false, functionType0.isNoResolvedType());
      assertEquals(false, functionType0.isEnumType());
      assertEquals(false, functionType0.isReturnTypeInferred());
      assertEquals(false, functionType0.isTemplateType());
      assertEquals(true, functionType0.hasCachedValues());
      assertEquals(false, functionType0.isStringValueType());
      assertEquals(false, functionType0.isEnumElementType());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertEquals(true, functionType0.hasInstanceType());
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertNotNull(string1);
  }

  @Test
  public void test12()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      boolean boolean0 = true;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0, boolean0);
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      String string0 = "EOL";
      int int0 = 3754;
      NamedType namedType0 = new NamedType(jSTypeRegistry0, string0, string0, int0, int0);
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, namedType0.isVoidType());
      assertEquals(false, namedType0.isBooleanValueType());
      assertEquals(false, namedType0.hasCachedValues());
      assertEquals(false, namedType0.isRecordType());
      assertEquals(false, namedType0.isStringValueType());
      assertEquals(false, namedType0.isNumberValueType());
      assertEquals(false, namedType0.isNullType());
      assertEquals(false, namedType0.isAllType());
      assertEquals(false, namedType0.isTemplateType());
      assertEquals(false, namedType0.isFunctionPrototypeType());
      assertEquals(false, namedType0.isResolved());
      assertEquals(false, namedType0.isEnumElementType());
      assertEquals(BooleanLiteralSet.TRUE, namedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, namedType0.isFunctionType());
      assertEquals(false, namedType0.isUnionType());
      assertNotNull(namedType0);
      
      Node node0 = namedType0.getPropertyNode(string0);
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, namedType0.isVoidType());
      assertEquals(false, namedType0.isBooleanValueType());
      assertEquals(false, namedType0.hasCachedValues());
      assertEquals(false, namedType0.isRecordType());
      assertEquals(false, namedType0.isStringValueType());
      assertEquals(false, namedType0.isNumberValueType());
      assertEquals(false, namedType0.isNullType());
      assertEquals(false, namedType0.isAllType());
      assertEquals(false, namedType0.isTemplateType());
      assertEquals(false, namedType0.isFunctionPrototypeType());
      assertEquals(false, namedType0.isResolved());
      assertEquals(false, namedType0.isEnumElementType());
      assertEquals(BooleanLiteralSet.TRUE, namedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, namedType0.isFunctionType());
      assertEquals(false, namedType0.isUnionType());
      assertNull(node0);
      
      FunctionType functionType0 = FunctionType.forInterface(jSTypeRegistry0, string0, node0);
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertEquals(true, functionType0.canBeCalled());
      assertEquals(false, functionType0.isOrdinaryFunction());
      assertEquals(false, functionType0.isEnumType());
      assertEquals(false, functionType0.isVoidType());
      assertEquals(false, functionType0.isNominalType());
      assertEquals(false, functionType0.isBooleanValueType());
      assertEquals(false, functionType0.hasCachedValues());
      assertEquals(false, functionType0.isUnionType());
      assertEquals(false, functionType0.isStringValueType());
      assertEquals(false, functionType0.isEnumElementType());
      assertEquals(0, functionType0.getMaxArguments());
      assertEquals(false, functionType0.isNumberValueType());
      assertEquals(false, functionType0.isReturnTypeInferred());
      assertEquals(false, functionType0.isCheckedUnknownType());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, functionType0.isResolved());
      assertEquals(false, functionType0.isNoType());
      assertEquals(false, functionType0.isRecordType());
      assertEquals(false, functionType0.isTemplateType());
      assertEquals(true, functionType0.isFunctionType());
      assertEquals(false, functionType0.isNoResolvedType());
      assertEquals(false, functionType0.isNullType());
      assertEquals(true, functionType0.hasInstanceType());
      assertEquals(true, functionType0.isInterface());
      assertEquals(false, functionType0.isAllType());
      assertEquals(false, functionType0.isNoObjectType());
      assertNull(functionType0.getTemplateTypeName());
      assertEquals(false, functionType0.isConstructor());
      assertEquals(false, functionType0.isFunctionPrototypeType());
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, namedType0.isVoidType());
      assertEquals(false, namedType0.isBooleanValueType());
      assertEquals(false, namedType0.hasCachedValues());
      assertEquals(false, namedType0.isRecordType());
      assertEquals(false, namedType0.isStringValueType());
      assertEquals(false, namedType0.isNumberValueType());
      assertEquals(false, namedType0.isNullType());
      assertEquals(false, namedType0.isAllType());
      assertEquals(false, namedType0.isTemplateType());
      assertEquals(false, namedType0.isFunctionPrototypeType());
      assertEquals(false, namedType0.isResolved());
      assertEquals(false, namedType0.isEnumElementType());
      assertEquals(BooleanLiteralSet.TRUE, namedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, namedType0.isFunctionType());
      assertEquals(false, namedType0.isUnionType());
      assertNotNull(functionType0);
      
      int int1 = functionType0.hashCode();
      assertEquals(68834, int1);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertEquals(true, functionType0.canBeCalled());
      assertEquals(false, functionType0.isOrdinaryFunction());
      assertEquals(false, functionType0.isEnumType());
      assertEquals(false, functionType0.isVoidType());
      assertEquals(false, functionType0.isNominalType());
      assertEquals(false, functionType0.isBooleanValueType());
      assertEquals(false, functionType0.hasCachedValues());
      assertEquals(false, functionType0.isUnionType());
      assertEquals(false, functionType0.isStringValueType());
      assertEquals(false, functionType0.isEnumElementType());
      assertEquals(0, functionType0.getMaxArguments());
      assertEquals(false, functionType0.isNumberValueType());
      assertEquals(false, functionType0.isReturnTypeInferred());
      assertEquals(false, functionType0.isCheckedUnknownType());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, functionType0.isResolved());
      assertEquals(false, functionType0.isNoType());
      assertEquals(false, functionType0.isRecordType());
      assertEquals(false, functionType0.isTemplateType());
      assertEquals(true, functionType0.isFunctionType());
      assertEquals(false, functionType0.isNoResolvedType());
      assertEquals(false, functionType0.isNullType());
      assertEquals(true, functionType0.hasInstanceType());
      assertEquals(true, functionType0.isInterface());
      assertEquals(false, functionType0.isAllType());
      assertEquals(false, functionType0.isNoObjectType());
      assertNull(functionType0.getTemplateTypeName());
      assertEquals(false, functionType0.isConstructor());
      assertEquals(false, functionType0.isFunctionPrototypeType());
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, namedType0.isVoidType());
      assertEquals(false, namedType0.isBooleanValueType());
      assertEquals(false, namedType0.hasCachedValues());
      assertEquals(false, namedType0.isRecordType());
      assertEquals(false, namedType0.isStringValueType());
      assertEquals(false, namedType0.isNumberValueType());
      assertEquals(false, namedType0.isNullType());
      assertEquals(false, namedType0.isAllType());
      assertEquals(false, namedType0.isTemplateType());
      assertEquals(false, namedType0.isFunctionPrototypeType());
      assertEquals(false, namedType0.isResolved());
      assertEquals(false, namedType0.isEnumElementType());
      assertEquals(BooleanLiteralSet.TRUE, namedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, namedType0.isFunctionType());
      assertEquals(false, namedType0.isUnionType());
  }

  @Test
  public void test13() {}
//   @Test
//   public void test13()  throws Throwable  {
//       ErrorReporter errorReporter0 = null;
//       boolean boolean0 = false;
//       JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(errorReporter0, boolean0);
//       assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
//       assertNotNull(jSTypeRegistry0);
//       
//       String string0 = "apply";
//       ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, string0);
//       assertEquals(false, errorFunctionType0.isUnionType());
//       assertEquals(false, errorFunctionType0.isEnumElementType());
//       assertEquals(false, errorFunctionType0.isRecordType());
//       assertEquals(false, errorFunctionType0.isStringValueType());
//       assertEquals(true, errorFunctionType0.canBeCalled());
//       assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
//       assertEquals(false, errorFunctionType0.isNumberValueType());
//       assertEquals(false, errorFunctionType0.isCheckedUnknownType());
//       assertEquals(true, errorFunctionType0.hasInstanceType());
//       assertEquals(false, errorFunctionType0.isAllType());
//       assertEquals(false, errorFunctionType0.isNoObjectType());
//       assertEquals(true, errorFunctionType0.isConstructor());
//       assertEquals(3, errorFunctionType0.getMaxArguments());
//       assertEquals(false, errorFunctionType0.isReturnTypeInferred());
//       assertEquals(false, errorFunctionType0.isInterface());
//       assertEquals(true, errorFunctionType0.isFunctionType());
//       assertEquals(false, errorFunctionType0.isEnumType());
//       assertEquals(false, errorFunctionType0.isNullType());
//       assertEquals(false, errorFunctionType0.isFunctionPrototypeType());
//       assertEquals(false, errorFunctionType0.isNoResolvedType());
//       assertEquals(false, errorFunctionType0.isTemplateType());
//       assertEquals(false, errorFunctionType0.isResolved());
//       assertEquals(false, errorFunctionType0.isOrdinaryFunction());
//       assertEquals(false, errorFunctionType0.hasCachedValues());
//       assertEquals(false, errorFunctionType0.isNominalType());
//       assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
//       assertEquals(false, errorFunctionType0.isNoType());
//       assertEquals(false, errorFunctionType0.isVoidType());
//       assertNull(errorFunctionType0.getTemplateTypeName());
//       assertEquals(false, errorFunctionType0.isBooleanValueType());
//       assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
//       assertNotNull(errorFunctionType0);
//       
//       ObjectType objectType0 = errorFunctionType0.getParentScope();
//       assertEquals(false, objectType0.isAllType());
//       assertEquals(false, objectType0.isNoObjectType());
//       assertEquals(true, objectType0.isConstructor());
//       assertEquals(true, objectType0.isFunctionType());
//       assertEquals(true, objectType0.isNativeObjectType());
//       assertEquals(false, objectType0.isInterface());
//       assertEquals(false, objectType0.isCheckedUnknownType());
//       assertEquals(false, objectType0.isNominalType());
//       assertEquals(BooleanLiteralSet.TRUE, objectType0.getPossibleToBooleanOutcomes());
//       assertEquals(false, objectType0.isBooleanValueType());
//       assertEquals(false, objectType0.isRecordType());
//       assertEquals(false, objectType0.hasCachedValues());
//       assertEquals(false, objectType0.isStringValueType());
//       assertEquals(false, objectType0.isNullType());
//       assertEquals(false, objectType0.isVoidType());
//       assertEquals(false, objectType0.isOrdinaryFunction());
//       assertEquals(false, objectType0.isEnumElementType());
//       assertEquals(true, objectType0.hasReferenceName());
//       assertEquals(false, objectType0.isNoResolvedType());
//       assertEquals(false, objectType0.isUnionType());
//       assertEquals(false, objectType0.isTemplateType());
//       assertEquals(false, objectType0.isEnumType());
//       assertEquals(false, objectType0.isFunctionPrototypeType());
//       assertEquals(false, objectType0.isResolved());
//       assertEquals(false, objectType0.isNoType());
//       assertEquals(false, objectType0.isNumberValueType());
//       assertEquals(false, errorFunctionType0.isUnionType());
//       assertEquals(false, errorFunctionType0.isEnumElementType());
//       assertEquals(false, errorFunctionType0.isRecordType());
//       assertEquals(false, errorFunctionType0.isStringValueType());
//       assertEquals(true, errorFunctionType0.canBeCalled());
//       assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
//       assertEquals(false, errorFunctionType0.isNumberValueType());
//       assertEquals(false, errorFunctionType0.isCheckedUnknownType());
//       assertEquals(true, errorFunctionType0.hasInstanceType());
//       assertEquals(false, errorFunctionType0.isAllType());
//       assertEquals(false, errorFunctionType0.isNoObjectType());
//       assertEquals(true, errorFunctionType0.isConstructor());
//       assertEquals(3, errorFunctionType0.getMaxArguments());
//       assertEquals(false, errorFunctionType0.isReturnTypeInferred());
//       assertEquals(false, errorFunctionType0.isInterface());
//       assertEquals(true, errorFunctionType0.isFunctionType());
//       assertEquals(false, errorFunctionType0.isEnumType());
//       assertEquals(false, errorFunctionType0.isNullType());
//       assertEquals(false, errorFunctionType0.isFunctionPrototypeType());
//       assertEquals(false, errorFunctionType0.isNoResolvedType());
//       assertEquals(false, errorFunctionType0.isTemplateType());
//       assertEquals(false, errorFunctionType0.isResolved());
//       assertEquals(false, errorFunctionType0.isOrdinaryFunction());
//       assertEquals(false, errorFunctionType0.hasCachedValues());
//       assertEquals(false, errorFunctionType0.isNominalType());
//       assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
//       assertEquals(false, errorFunctionType0.isNoType());
//       assertEquals(false, errorFunctionType0.isVoidType());
//       assertNull(errorFunctionType0.getTemplateTypeName());
//       assertEquals(false, errorFunctionType0.isBooleanValueType());
//       assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
//       assertNotNull(objectType0);
//       
//       String string1 = objectType0.toDebugHashCodeString();
//       assertEquals("{16}", string1);
//       assertFalse(string1.equals((Object)string0));
//       assertFalse(string0.equals((Object)string1));
//       assertEquals(false, objectType0.isAllType());
//       assertEquals(false, objectType0.isNoObjectType());
//       assertEquals(true, objectType0.isConstructor());
//       assertEquals(true, objectType0.isFunctionType());
//       assertEquals(true, objectType0.isNativeObjectType());
//       assertEquals(false, objectType0.isInterface());
//       assertEquals(false, objectType0.isCheckedUnknownType());
//       assertEquals(false, objectType0.isNominalType());
//       assertEquals(BooleanLiteralSet.TRUE, objectType0.getPossibleToBooleanOutcomes());
//       assertEquals(false, objectType0.isBooleanValueType());
//       assertEquals(false, objectType0.isRecordType());
//       assertEquals(false, objectType0.hasCachedValues());
//       assertEquals(false, objectType0.isStringValueType());
//       assertEquals(false, objectType0.isNullType());
//       assertEquals(false, objectType0.isVoidType());
//       assertEquals(false, objectType0.isOrdinaryFunction());
//       assertEquals(false, objectType0.isEnumElementType());
//       assertEquals(true, objectType0.hasReferenceName());
//       assertEquals(false, objectType0.isNoResolvedType());
//       assertEquals(false, objectType0.isUnionType());
//       assertEquals(false, objectType0.isTemplateType());
//       assertEquals(false, objectType0.isEnumType());
//       assertEquals(false, objectType0.isFunctionPrototypeType());
//       assertEquals(false, objectType0.isResolved());
//       assertEquals(false, objectType0.isNoType());
//       assertEquals(false, objectType0.isNumberValueType());
//       assertEquals(false, errorFunctionType0.isUnionType());
//       assertEquals(false, errorFunctionType0.isEnumElementType());
//       assertEquals(false, errorFunctionType0.isRecordType());
//       assertEquals(false, errorFunctionType0.isStringValueType());
//       assertEquals(true, errorFunctionType0.canBeCalled());
//       assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
//       assertEquals(false, errorFunctionType0.isNumberValueType());
//       assertEquals(false, errorFunctionType0.isCheckedUnknownType());
//       assertEquals(true, errorFunctionType0.hasInstanceType());
//       assertEquals(false, errorFunctionType0.isAllType());
//       assertEquals(false, errorFunctionType0.isNoObjectType());
//       assertEquals(true, errorFunctionType0.isConstructor());
//       assertEquals(3, errorFunctionType0.getMaxArguments());
//       assertEquals(false, errorFunctionType0.isReturnTypeInferred());
//       assertEquals(false, errorFunctionType0.isInterface());
//       assertEquals(true, errorFunctionType0.isFunctionType());
//       assertEquals(false, errorFunctionType0.isEnumType());
//       assertEquals(false, errorFunctionType0.isNullType());
//       assertEquals(false, errorFunctionType0.isFunctionPrototypeType());
//       assertEquals(false, errorFunctionType0.isNoResolvedType());
//       assertEquals(false, errorFunctionType0.isTemplateType());
//       assertEquals(false, errorFunctionType0.isResolved());
//       assertEquals(false, errorFunctionType0.isOrdinaryFunction());
//       assertEquals(false, errorFunctionType0.hasCachedValues());
//       assertEquals(false, errorFunctionType0.isNominalType());
//       assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
//       assertEquals(false, errorFunctionType0.isNoType());
//       assertEquals(false, errorFunctionType0.isVoidType());
//       assertNull(errorFunctionType0.getTemplateTypeName());
//       assertEquals(false, errorFunctionType0.isBooleanValueType());
//       assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
//       assertNotSame(string1, string0);
//       assertNotSame(string0, string1);
//       assertNotNull(string1);
//   }

  @Test
  public void test14()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      boolean boolean0 = false;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0, boolean0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      JSTypeNative[] jSTypeNativeArray0 = new JSTypeNative[4];
      JSTypeNative jSTypeNative0 = JSTypeNative.NO_RESOLVED_TYPE;
      jSTypeNativeArray0[0] = jSTypeNative0;
      assertEquals("NO_RESOLVED_TYPE", jSTypeNativeArray0[0].name());
      assertEquals(45, jSTypeNativeArray0[0].ordinal());
      assertEquals("NO_RESOLVED_TYPE", jSTypeNativeArray0[0].toString());
      
      jSTypeNativeArray0[1] = jSTypeNativeArray0[0];
      assertEquals(45, jSTypeNativeArray0[1].ordinal());
      assertEquals("NO_RESOLVED_TYPE", jSTypeNativeArray0[1].name());
      assertEquals("NO_RESOLVED_TYPE", jSTypeNativeArray0[1].toString());
      
      JSTypeNative jSTypeNative1 = JSTypeNative.LEAST_FUNCTION_TYPE;
      assertNotSame(jSTypeNative1, jSTypeNative0);
      
      jSTypeNativeArray0[0] = jSTypeNative1;
      assertEquals(49, jSTypeNativeArray0[0].ordinal());
      assertEquals("LEAST_FUNCTION_TYPE", jSTypeNativeArray0[0].name());
      assertEquals("LEAST_FUNCTION_TYPE", jSTypeNativeArray0[0].toString());
      
      jSTypeNativeArray0[2] = jSTypeNative1;
      assertEquals("LEAST_FUNCTION_TYPE", jSTypeNativeArray0[2].name());
      assertEquals("LEAST_FUNCTION_TYPE", jSTypeNativeArray0[2].toString());
      assertEquals(49, jSTypeNativeArray0[2].ordinal());
      
      // Undeclared exception!
      try {
        JSType jSType0 = jSTypeRegistry0.createUnionType(jSTypeNativeArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test15()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      boolean boolean0 = false;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0, boolean0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      JSTypeNative[] jSTypeNativeArray0 = new JSTypeNative[4];
      JSTypeNative jSTypeNative0 = JSTypeNative.NO_RESOLVED_TYPE;
      jSTypeNativeArray0[0] = jSTypeNative0;
      assertEquals("NO_RESOLVED_TYPE", jSTypeNativeArray0[0].name());
      assertEquals(45, jSTypeNativeArray0[0].ordinal());
      assertEquals("NO_RESOLVED_TYPE", jSTypeNativeArray0[0].toString());
      
      jSTypeNativeArray0[1] = jSTypeNativeArray0[0];
      assertEquals(45, jSTypeNativeArray0[1].ordinal());
      assertEquals("NO_RESOLVED_TYPE", jSTypeNativeArray0[1].toString());
      assertEquals("NO_RESOLVED_TYPE", jSTypeNativeArray0[1].name());
      
      JSTypeNative jSTypeNative1 = JSTypeNative.LEAST_FUNCTION_TYPE;
      assertNotSame(jSTypeNative1, jSTypeNative0);
      
      jSTypeNativeArray0[2] = jSTypeNative1;
      assertEquals(49, jSTypeNativeArray0[2].ordinal());
      assertEquals("LEAST_FUNCTION_TYPE", jSTypeNativeArray0[2].toString());
      assertEquals("LEAST_FUNCTION_TYPE", jSTypeNativeArray0[2].name());
      
      JSTypeNative jSTypeNative2 = JSTypeNative.U2U_FUNCTION_TYPE;
      assertNotSame(jSTypeNative2, jSTypeNative1);
      assertNotSame(jSTypeNative2, jSTypeNative0);
      
      jSTypeNativeArray0[3] = jSTypeNative2;
      assertEquals("U2U_FUNCTION_TYPE", jSTypeNativeArray0[3].name());
      assertEquals(48, jSTypeNativeArray0[3].ordinal());
      assertEquals("U2U_FUNCTION_TYPE", jSTypeNativeArray0[3].toString());
      
      UnionType unionType0 = (UnionType)jSTypeRegistry0.createUnionType(jSTypeNativeArray0);
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isFunctionPrototypeType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isOrdinaryFunction());
      assertEquals(false, unionType0.isConstructor());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isCheckedUnknownType());
      assertEquals(false, unionType0.isNoResolvedType());
      assertEquals(false, unionType0.isNominalType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isEnumType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isInterface());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isEnumElementType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(unionType0);
  }

  @Test
  public void test16()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      boolean boolean0 = true;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0, boolean0);
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      String string0 = "CONSTRUCTOR";
      int int0 = 3754;
      NamedType namedType0 = new NamedType(jSTypeRegistry0, string0, string0, int0, int0);
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, namedType0.isUnionType());
      assertEquals(false, namedType0.isEnumElementType());
      assertEquals(false, namedType0.isAllType());
      assertEquals(BooleanLiteralSet.TRUE, namedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, namedType0.isFunctionType());
      assertEquals(false, namedType0.isNullType());
      assertEquals(false, namedType0.isBooleanValueType());
      assertEquals(false, namedType0.isStringValueType());
      assertEquals(false, namedType0.isResolved());
      assertEquals(false, namedType0.isVoidType());
      assertEquals(false, namedType0.isFunctionPrototypeType());
      assertEquals(false, namedType0.isNumberValueType());
      assertEquals(false, namedType0.hasCachedValues());
      assertEquals(false, namedType0.isRecordType());
      assertEquals(false, namedType0.isTemplateType());
      assertNotNull(namedType0);
      
      Node node0 = namedType0.getPropertyNode(string0);
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, namedType0.isUnionType());
      assertEquals(false, namedType0.isEnumElementType());
      assertEquals(false, namedType0.isAllType());
      assertEquals(BooleanLiteralSet.TRUE, namedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, namedType0.isFunctionType());
      assertEquals(false, namedType0.isNullType());
      assertEquals(false, namedType0.isBooleanValueType());
      assertEquals(false, namedType0.isStringValueType());
      assertEquals(false, namedType0.isResolved());
      assertEquals(false, namedType0.isVoidType());
      assertEquals(false, namedType0.isFunctionPrototypeType());
      assertEquals(false, namedType0.isNumberValueType());
      assertEquals(false, namedType0.hasCachedValues());
      assertEquals(false, namedType0.isRecordType());
      assertEquals(false, namedType0.isTemplateType());
      assertNull(node0);
      
      FunctionType functionType0 = FunctionType.forInterface(jSTypeRegistry0, string0, node0);
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, namedType0.isUnionType());
      assertEquals(false, namedType0.isEnumElementType());
      assertEquals(false, namedType0.isAllType());
      assertEquals(BooleanLiteralSet.TRUE, namedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, namedType0.isFunctionType());
      assertEquals(false, namedType0.isNullType());
      assertEquals(false, namedType0.isBooleanValueType());
      assertEquals(false, namedType0.isStringValueType());
      assertEquals(false, namedType0.isResolved());
      assertEquals(false, namedType0.isVoidType());
      assertEquals(false, namedType0.isFunctionPrototypeType());
      assertEquals(false, namedType0.isNumberValueType());
      assertEquals(false, namedType0.hasCachedValues());
      assertEquals(false, namedType0.isRecordType());
      assertEquals(false, namedType0.isTemplateType());
      assertEquals(false, functionType0.isAllType());
      assertEquals(false, functionType0.isVoidType());
      assertEquals(false, functionType0.isStringValueType());
      assertEquals(false, functionType0.isRecordType());
      assertEquals(false, functionType0.isCheckedUnknownType());
      assertEquals(true, functionType0.isFunctionType());
      assertEquals(false, functionType0.isNullType());
      assertEquals(false, functionType0.isNumberValueType());
      assertEquals(false, functionType0.isTemplateType());
      assertEquals(false, functionType0.isNominalType());
      assertEquals(false, functionType0.isFunctionPrototypeType());
      assertEquals(false, functionType0.isNoResolvedType());
      assertEquals(false, functionType0.isNoType());
      assertEquals(false, functionType0.isBooleanValueType());
      assertEquals(0, functionType0.getMaxArguments());
      assertNull(functionType0.getTemplateTypeName());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertEquals(true, functionType0.isInterface());
      assertEquals(true, functionType0.hasInstanceType());
      assertEquals(false, functionType0.isEnumType());
      assertEquals(false, functionType0.isReturnTypeInferred());
      assertEquals(false, functionType0.isEnumElementType());
      assertEquals(false, functionType0.isNoObjectType());
      assertEquals(false, functionType0.hasCachedValues());
      assertEquals(false, functionType0.isConstructor());
      assertEquals(true, functionType0.canBeCalled());
      assertEquals(false, functionType0.isUnionType());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, functionType0.isOrdinaryFunction());
      assertEquals(false, functionType0.isResolved());
      assertNotNull(functionType0);
      
      FunctionType functionType1 = (FunctionType)JSType.getLeastSupertype(functionType0, functionType0);
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, namedType0.isUnionType());
      assertEquals(false, namedType0.isEnumElementType());
      assertEquals(false, namedType0.isAllType());
      assertEquals(BooleanLiteralSet.TRUE, namedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, namedType0.isFunctionType());
      assertEquals(false, namedType0.isNullType());
      assertEquals(false, namedType0.isBooleanValueType());
      assertEquals(false, namedType0.isStringValueType());
      assertEquals(false, namedType0.isResolved());
      assertEquals(false, namedType0.isVoidType());
      assertEquals(false, namedType0.isFunctionPrototypeType());
      assertEquals(false, namedType0.isNumberValueType());
      assertEquals(false, namedType0.hasCachedValues());
      assertEquals(false, namedType0.isRecordType());
      assertEquals(false, namedType0.isTemplateType());
      assertEquals(false, functionType0.isAllType());
      assertEquals(false, functionType0.isVoidType());
      assertEquals(false, functionType0.isStringValueType());
      assertEquals(false, functionType0.isRecordType());
      assertEquals(false, functionType0.isCheckedUnknownType());
      assertEquals(true, functionType0.isFunctionType());
      assertEquals(false, functionType0.isNullType());
      assertEquals(false, functionType0.isNumberValueType());
      assertEquals(false, functionType0.isTemplateType());
      assertEquals(false, functionType0.isNominalType());
      assertEquals(false, functionType0.isFunctionPrototypeType());
      assertEquals(false, functionType0.isNoResolvedType());
      assertEquals(false, functionType0.isNoType());
      assertEquals(false, functionType0.isBooleanValueType());
      assertEquals(0, functionType0.getMaxArguments());
      assertNull(functionType0.getTemplateTypeName());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertEquals(true, functionType0.isInterface());
      assertEquals(true, functionType0.hasInstanceType());
      assertEquals(false, functionType0.isEnumType());
      assertEquals(false, functionType0.isReturnTypeInferred());
      assertEquals(false, functionType0.isEnumElementType());
      assertEquals(false, functionType0.isNoObjectType());
      assertEquals(false, functionType0.hasCachedValues());
      assertEquals(false, functionType0.isConstructor());
      assertEquals(true, functionType0.canBeCalled());
      assertEquals(false, functionType0.isUnionType());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, functionType0.isOrdinaryFunction());
      assertEquals(false, functionType0.isResolved());
      assertEquals(false, functionType1.isTemplateType());
      assertEquals(false, functionType1.isAllType());
      assertEquals(true, functionType1.isInterface());
      assertEquals(false, functionType1.isStringValueType());
      assertEquals(false, functionType1.isUnionType());
      assertEquals(true, functionType1.isFunctionType());
      assertEquals(false, functionType1.isNoType());
      assertEquals(BooleanLiteralSet.TRUE, functionType1.getPossibleToBooleanOutcomes());
      assertEquals(false, functionType1.isFunctionPrototypeType());
      assertEquals(false, functionType1.isReturnTypeInferred());
      assertEquals(false, functionType1.isNominalType());
      assertEquals(true, functionType1.hasInstanceType());
      assertNull(functionType1.getTemplateTypeName());
      assertEquals(false, functionType1.isResolved());
      assertEquals(0, functionType1.getExtendedInterfacesCount());
      assertEquals(false, functionType1.isNoObjectType());
      assertEquals(false, functionType1.isRecordType());
      assertEquals(false, functionType1.isNullType());
      assertEquals(false, functionType1.isNumberValueType());
      assertEquals(false, functionType1.isVoidType());
      assertEquals(0, functionType1.getMaxArguments());
      assertEquals(false, functionType1.isConstructor());
      assertEquals(false, functionType1.isEnumType());
      assertEquals(false, functionType1.hasCachedValues());
      assertEquals(false, functionType1.isNoResolvedType());
      assertEquals(true, functionType1.canBeCalled());
      assertEquals(false, functionType1.isEnumElementType());
      assertEquals(false, functionType1.isBooleanValueType());
      assertEquals(false, functionType1.isCheckedUnknownType());
      assertEquals(false, functionType1.isOrdinaryFunction());
      assertSame(functionType0, functionType1);
      assertSame(functionType1, functionType0);
      assertNotNull(functionType1);
  }

  @Test
  public void test17() {}
//   @Test
//   public void test17()  throws Throwable  {
//       SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
//       assertNotNull(simpleErrorReporter0);
//       
//       boolean boolean0 = false;
//       JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0, boolean0);
//       assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
//       assertNotNull(jSTypeRegistry0);
//       
//       NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
//       assertEquals(true, noResolvedType0.isNullable());
//       assertEquals(false, noResolvedType0.isEnumType());
//       assertEquals(false, noResolvedType0.isInterface());
//       assertEquals(false, noResolvedType0.isFunctionType());
//       assertEquals(false, noResolvedType0.isOrdinaryFunction());
//       assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
//       assertEquals(false, noResolvedType0.isBooleanValueType());
//       assertEquals(2147483647, noResolvedType0.getPropertiesCount());
//       assertEquals(false, noResolvedType0.isNominalType());
//       assertEquals(true, noResolvedType0.matchesNumberContext());
//       assertEquals(false, noResolvedType0.isStringValueType());
//       assertEquals(false, noResolvedType0.isVoidType());
//       assertEquals(true, noResolvedType0.matchesStringContext());
//       assertEquals(false, noResolvedType0.isNumberValueType());
//       assertEquals(false, noResolvedType0.isTemplateType());
//       assertEquals(false, noResolvedType0.isRecordType());
//       assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
//       assertNull(noResolvedType0.getTemplateTypeName());
//       assertEquals(false, noResolvedType0.hasCachedValues());
//       assertEquals(false, noResolvedType0.isAllType());
//       assertEquals(false, noResolvedType0.isNoObjectType());
//       assertEquals(true, noResolvedType0.canBeCalled());
//       assertNull(noResolvedType0.getReferenceName());
//       assertEquals(2147483647, noResolvedType0.getMaxArguments());
//       assertEquals(true, noResolvedType0.hasInstanceType());
//       assertEquals(false, noResolvedType0.isNullType());
//       assertEquals(false, noResolvedType0.isCheckedUnknownType());
//       assertEquals(false, noResolvedType0.isUnionType());
//       assertEquals(true, noResolvedType0.matchesObjectContext());
//       assertEquals(false, noResolvedType0.isFunctionPrototypeType());
//       assertEquals(true, noResolvedType0.isConstructor());
//       assertEquals(false, noResolvedType0.isResolved());
//       assertEquals(false, noResolvedType0.isEnumElementType());
//       assertEquals(false, noResolvedType0.isReturnTypeInferred());
//       assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
//       assertNotNull(noResolvedType0);
//       
//       Node node0 = noResolvedType0.getSource();
//       assertEquals(true, noResolvedType0.isNullable());
//       assertEquals(false, noResolvedType0.isEnumType());
//       assertEquals(false, noResolvedType0.isInterface());
//       assertEquals(false, noResolvedType0.isFunctionType());
//       assertEquals(false, noResolvedType0.isOrdinaryFunction());
//       assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
//       assertEquals(false, noResolvedType0.isBooleanValueType());
//       assertEquals(2147483647, noResolvedType0.getPropertiesCount());
//       assertEquals(false, noResolvedType0.isNominalType());
//       assertEquals(true, noResolvedType0.matchesNumberContext());
//       assertEquals(false, noResolvedType0.isStringValueType());
//       assertEquals(false, noResolvedType0.isVoidType());
//       assertEquals(true, noResolvedType0.matchesStringContext());
//       assertEquals(false, noResolvedType0.isNumberValueType());
//       assertEquals(false, noResolvedType0.isTemplateType());
//       assertEquals(false, noResolvedType0.isRecordType());
//       assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
//       assertNull(noResolvedType0.getTemplateTypeName());
//       assertEquals(false, noResolvedType0.hasCachedValues());
//       assertEquals(false, noResolvedType0.isAllType());
//       assertEquals(false, noResolvedType0.isNoObjectType());
//       assertEquals(true, noResolvedType0.canBeCalled());
//       assertNull(noResolvedType0.getReferenceName());
//       assertEquals(2147483647, noResolvedType0.getMaxArguments());
//       assertEquals(true, noResolvedType0.hasInstanceType());
//       assertEquals(false, noResolvedType0.isNullType());
//       assertEquals(false, noResolvedType0.isCheckedUnknownType());
//       assertEquals(false, noResolvedType0.isUnionType());
//       assertEquals(true, noResolvedType0.matchesObjectContext());
//       assertEquals(false, noResolvedType0.isFunctionPrototypeType());
//       assertEquals(true, noResolvedType0.isConstructor());
//       assertEquals(false, noResolvedType0.isResolved());
//       assertEquals(false, noResolvedType0.isEnumElementType());
//       assertEquals(false, noResolvedType0.isReturnTypeInferred());
//       assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
//       assertNull(node0);
//       
//       String string0 = noResolvedType0.toDebugHashCodeString();
//       assertEquals("function (this:me, {9}): me", string0);
//       assertEquals(true, noResolvedType0.isNullable());
//       assertEquals(false, noResolvedType0.isEnumType());
//       assertEquals(false, noResolvedType0.isInterface());
//       assertEquals(false, noResolvedType0.isFunctionType());
//       assertEquals(false, noResolvedType0.isOrdinaryFunction());
//       assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
//       assertEquals(false, noResolvedType0.isBooleanValueType());
//       assertEquals(2147483647, noResolvedType0.getPropertiesCount());
//       assertEquals(false, noResolvedType0.isNominalType());
//       assertEquals(true, noResolvedType0.matchesNumberContext());
//       assertEquals(false, noResolvedType0.isStringValueType());
//       assertEquals(false, noResolvedType0.isVoidType());
//       assertEquals(true, noResolvedType0.matchesStringContext());
//       assertEquals(false, noResolvedType0.isNumberValueType());
//       assertEquals(false, noResolvedType0.isTemplateType());
//       assertEquals(false, noResolvedType0.isRecordType());
//       assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
//       assertNull(noResolvedType0.getTemplateTypeName());
//       assertEquals(false, noResolvedType0.isAllType());
//       assertEquals(false, noResolvedType0.isNoObjectType());
//       assertEquals(true, noResolvedType0.canBeCalled());
//       assertNull(noResolvedType0.getReferenceName());
//       assertEquals(2147483647, noResolvedType0.getMaxArguments());
//       assertEquals(true, noResolvedType0.hasInstanceType());
//       assertEquals(false, noResolvedType0.isNullType());
//       assertEquals(false, noResolvedType0.isCheckedUnknownType());
//       assertEquals(false, noResolvedType0.isUnionType());
//       assertEquals(true, noResolvedType0.matchesObjectContext());
//       assertEquals(true, noResolvedType0.hasCachedValues());
//       assertEquals(false, noResolvedType0.isFunctionPrototypeType());
//       assertEquals(true, noResolvedType0.isConstructor());
//       assertEquals(false, noResolvedType0.isResolved());
//       assertEquals(false, noResolvedType0.isEnumElementType());
//       assertEquals(false, noResolvedType0.isReturnTypeInferred());
//       assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
//       assertNotNull(string0);
//       
//       FunctionType functionType0 = jSTypeRegistry0.createFunctionTypeWithNewReturnType((FunctionType) noResolvedType0, (JSType) noResolvedType0);
//       assertEquals(false, functionType0.isEnumType());
//       assertEquals(false, functionType0.isCheckedUnknownType());
//       assertEquals(true, functionType0.isConstructor());
//       assertEquals(false, functionType0.isNoType());
//       assertEquals(false, functionType0.isBooleanValueType());
//       assertEquals(false, functionType0.isUnionType());
//       assertEquals(false, functionType0.isStringValueType());
//       assertEquals(false, functionType0.isRecordType());
//       assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
//       assertEquals(false, functionType0.isNominalType());
//       assertEquals(false, functionType0.hasCachedValues());
//       assertEquals(false, functionType0.isNullType());
//       assertEquals(true, functionType0.isFunctionType());
//       assertEquals(false, functionType0.isReturnTypeInferred());
//       assertEquals(false, functionType0.isTemplateType());
//       assertEquals(false, functionType0.isInterface());
//       assertEquals(false, functionType0.isFunctionPrototypeType());
//       assertEquals(true, functionType0.canBeCalled());
//       assertEquals(false, functionType0.isNumberValueType());
//       assertEquals(0, functionType0.getExtendedInterfacesCount());
//       assertEquals(false, functionType0.isNoObjectType());
//       assertNull(functionType0.getTemplateTypeName());
//       assertEquals(true, functionType0.hasInstanceType());
//       assertEquals(false, functionType0.isResolved());
//       assertEquals(false, functionType0.isEnumElementType());
//       assertEquals(2147483647, functionType0.getMaxArguments());
//       assertEquals(false, functionType0.isOrdinaryFunction());
//       assertEquals(false, functionType0.isVoidType());
//       assertEquals(false, functionType0.isAllType());
//       assertEquals(false, functionType0.isNoResolvedType());
//       assertEquals(true, noResolvedType0.isNullable());
//       assertEquals(false, noResolvedType0.isEnumType());
//       assertEquals(false, noResolvedType0.isInterface());
//       assertEquals(false, noResolvedType0.isFunctionType());
//       assertEquals(false, noResolvedType0.isOrdinaryFunction());
//       assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
//       assertEquals(false, noResolvedType0.isBooleanValueType());
//       assertEquals(2147483647, noResolvedType0.getPropertiesCount());
//       assertEquals(false, noResolvedType0.isNominalType());
//       assertEquals(true, noResolvedType0.matchesNumberContext());
//       assertEquals(false, noResolvedType0.isStringValueType());
//       assertEquals(false, noResolvedType0.isVoidType());
//       assertEquals(true, noResolvedType0.matchesStringContext());
//       assertEquals(false, noResolvedType0.isNumberValueType());
//       assertEquals(false, noResolvedType0.isTemplateType());
//       assertEquals(false, noResolvedType0.isRecordType());
//       assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
//       assertNull(noResolvedType0.getTemplateTypeName());
//       assertEquals(false, noResolvedType0.isAllType());
//       assertEquals(false, noResolvedType0.isNoObjectType());
//       assertEquals(true, noResolvedType0.canBeCalled());
//       assertNull(noResolvedType0.getReferenceName());
//       assertEquals(2147483647, noResolvedType0.getMaxArguments());
//       assertEquals(true, noResolvedType0.hasInstanceType());
//       assertEquals(false, noResolvedType0.isNullType());
//       assertEquals(false, noResolvedType0.isCheckedUnknownType());
//       assertEquals(false, noResolvedType0.isUnionType());
//       assertEquals(true, noResolvedType0.matchesObjectContext());
//       assertEquals(true, noResolvedType0.hasCachedValues());
//       assertEquals(false, noResolvedType0.isFunctionPrototypeType());
//       assertEquals(true, noResolvedType0.isConstructor());
//       assertEquals(false, noResolvedType0.isResolved());
//       assertEquals(false, noResolvedType0.isEnumElementType());
//       assertEquals(false, noResolvedType0.isReturnTypeInferred());
//       assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
//       assertNotNull(functionType0);
//       
//       FunctionType functionType1 = jSTypeRegistry0.createInterfaceType(string0, node0);
//       assertFalse(functionType1.equals((Object)functionType0));
//       assertNull(functionType1.getTemplateTypeName());
//       assertEquals(true, functionType1.isFunctionType());
//       assertEquals(false, functionType1.isOrdinaryFunction());
//       assertEquals(false, functionType1.isNumberValueType());
//       assertEquals(true, functionType1.hasInstanceType());
//       assertEquals(true, functionType1.isInterface());
//       assertEquals(false, functionType1.isStringValueType());
//       assertEquals(BooleanLiteralSet.TRUE, functionType1.getPossibleToBooleanOutcomes());
//       assertEquals(false, functionType1.isTemplateType());
//       assertEquals(false, functionType1.isBooleanValueType());
//       assertEquals(false, functionType1.isNominalType());
//       assertEquals(false, functionType1.isResolved());
//       assertEquals(false, functionType1.isCheckedUnknownType());
//       assertEquals(false, functionType1.isEnumElementType());
//       assertEquals(false, functionType1.isReturnTypeInferred());
//       assertEquals(false, functionType1.hasCachedValues());
//       assertEquals(0, functionType1.getMaxArguments());
//       assertEquals(false, functionType1.isNoType());
//       assertEquals(false, functionType1.isFunctionPrototypeType());
//       assertEquals(false, functionType1.isEnumType());
//       assertEquals(true, functionType1.canBeCalled());
//       assertEquals(false, functionType1.isNoResolvedType());
//       assertEquals(false, functionType1.isNullType());
//       assertEquals(false, functionType1.isNoObjectType());
//       assertEquals(false, functionType1.isRecordType());
//       assertEquals(false, functionType1.isVoidType());
//       assertEquals(false, functionType1.isAllType());
//       assertEquals(false, functionType1.isUnionType());
//       assertEquals(0, functionType1.getExtendedInterfacesCount());
//       assertEquals(false, functionType1.isConstructor());
//       assertEquals(true, noResolvedType0.isNullable());
//       assertEquals(false, noResolvedType0.isEnumType());
//       assertEquals(false, noResolvedType0.isInterface());
//       assertEquals(false, noResolvedType0.isFunctionType());
//       assertEquals(false, noResolvedType0.isOrdinaryFunction());
//       assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
//       assertEquals(false, noResolvedType0.isBooleanValueType());
//       assertEquals(2147483647, noResolvedType0.getPropertiesCount());
//       assertEquals(false, noResolvedType0.isNominalType());
//       assertEquals(true, noResolvedType0.matchesNumberContext());
//       assertEquals(false, noResolvedType0.isStringValueType());
//       assertEquals(false, noResolvedType0.isVoidType());
//       assertEquals(true, noResolvedType0.matchesStringContext());
//       assertEquals(false, noResolvedType0.isNumberValueType());
//       assertEquals(false, noResolvedType0.isTemplateType());
//       assertEquals(false, noResolvedType0.isRecordType());
//       assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
//       assertNull(noResolvedType0.getTemplateTypeName());
//       assertEquals(false, noResolvedType0.isAllType());
//       assertEquals(false, noResolvedType0.isNoObjectType());
//       assertEquals(true, noResolvedType0.canBeCalled());
//       assertNull(noResolvedType0.getReferenceName());
//       assertEquals(2147483647, noResolvedType0.getMaxArguments());
//       assertEquals(true, noResolvedType0.hasInstanceType());
//       assertEquals(false, noResolvedType0.isNullType());
//       assertEquals(false, noResolvedType0.isCheckedUnknownType());
//       assertEquals(false, noResolvedType0.isUnionType());
//       assertEquals(true, noResolvedType0.matchesObjectContext());
//       assertEquals(true, noResolvedType0.hasCachedValues());
//       assertEquals(false, noResolvedType0.isFunctionPrototypeType());
//       assertEquals(true, noResolvedType0.isConstructor());
//       assertEquals(false, noResolvedType0.isResolved());
//       assertEquals(false, noResolvedType0.isEnumElementType());
//       assertEquals(false, noResolvedType0.isReturnTypeInferred());
//       assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
//       assertNotSame(functionType1, functionType0);
//       assertNotNull(functionType1);
//       
//       boolean boolean1 = functionType1.canTestForShallowEqualityWith((JSType) functionType0);
//       assertTrue(boolean1);
//       assertFalse(boolean1 == boolean0);
//       assertFalse(functionType1.equals((Object)functionType0));
//       assertFalse(functionType0.equals((Object)functionType1));
//       assertFalse(boolean0 == boolean1);
//       assertNull(functionType1.getTemplateTypeName());
//       assertEquals(true, functionType1.isFunctionType());
//       assertEquals(false, functionType1.isOrdinaryFunction());
//       assertEquals(false, functionType1.isNumberValueType());
//       assertEquals(true, functionType1.hasInstanceType());
//       assertEquals(true, functionType1.isInterface());
//       assertEquals(false, functionType1.isStringValueType());
//       assertEquals(BooleanLiteralSet.TRUE, functionType1.getPossibleToBooleanOutcomes());
//       assertEquals(false, functionType1.isTemplateType());
//       assertEquals(false, functionType1.isBooleanValueType());
//       assertEquals(false, functionType1.isNominalType());
//       assertEquals(false, functionType1.isResolved());
//       assertEquals(false, functionType1.isCheckedUnknownType());
//       assertEquals(false, functionType1.isEnumElementType());
//       assertEquals(false, functionType1.isReturnTypeInferred());
//       assertEquals(0, functionType1.getMaxArguments());
//       assertEquals(false, functionType1.isNoType());
//       assertEquals(true, functionType1.hasCachedValues());
//       assertEquals(false, functionType1.isFunctionPrototypeType());
//       assertEquals(false, functionType1.isEnumType());
//       assertEquals(true, functionType1.canBeCalled());
//       assertEquals(false, functionType1.isNoResolvedType());
//       assertEquals(false, functionType1.isNullType());
//       assertEquals(false, functionType1.isNoObjectType());
//       assertEquals(false, functionType1.isRecordType());
//       assertEquals(false, functionType1.isVoidType());
//       assertEquals(false, functionType1.isAllType());
//       assertEquals(false, functionType1.isUnionType());
//       assertEquals(0, functionType1.getExtendedInterfacesCount());
//       assertEquals(false, functionType1.isConstructor());
//       assertEquals(false, functionType0.isEnumType());
//       assertEquals(false, functionType0.isCheckedUnknownType());
//       assertEquals(true, functionType0.isConstructor());
//       assertEquals(false, functionType0.isNoType());
//       assertEquals(false, functionType0.isBooleanValueType());
//       assertEquals(false, functionType0.isUnionType());
//       assertEquals(false, functionType0.isStringValueType());
//       assertEquals(false, functionType0.isRecordType());
//       assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
//       assertEquals(false, functionType0.isNominalType());
//       assertEquals(false, functionType0.isNullType());
//       assertEquals(true, functionType0.isFunctionType());
//       assertEquals(false, functionType0.isReturnTypeInferred());
//       assertEquals(false, functionType0.isTemplateType());
//       assertEquals(false, functionType0.isInterface());
//       assertEquals(false, functionType0.isFunctionPrototypeType());
//       assertEquals(true, functionType0.canBeCalled());
//       assertEquals(false, functionType0.isNumberValueType());
//       assertEquals(0, functionType0.getExtendedInterfacesCount());
//       assertEquals(false, functionType0.isNoObjectType());
//       assertNull(functionType0.getTemplateTypeName());
//       assertEquals(true, functionType0.hasInstanceType());
//       assertEquals(false, functionType0.isResolved());
//       assertEquals(true, functionType0.hasCachedValues());
//       assertEquals(false, functionType0.isEnumElementType());
//       assertEquals(2147483647, functionType0.getMaxArguments());
//       assertEquals(false, functionType0.isOrdinaryFunction());
//       assertEquals(false, functionType0.isVoidType());
//       assertEquals(false, functionType0.isAllType());
//       assertEquals(false, functionType0.isNoResolvedType());
//       assertEquals(true, noResolvedType0.isNullable());
//       assertEquals(false, noResolvedType0.isEnumType());
//       assertEquals(false, noResolvedType0.isInterface());
//       assertEquals(false, noResolvedType0.isFunctionType());
//       assertEquals(false, noResolvedType0.isOrdinaryFunction());
//       assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
//       assertEquals(false, noResolvedType0.isBooleanValueType());
//       assertEquals(2147483647, noResolvedType0.getPropertiesCount());
//       assertEquals(false, noResolvedType0.isNominalType());
//       assertEquals(true, noResolvedType0.matchesNumberContext());
//       assertEquals(false, noResolvedType0.isStringValueType());
//       assertEquals(false, noResolvedType0.isVoidType());
//       assertEquals(true, noResolvedType0.matchesStringContext());
//       assertEquals(false, noResolvedType0.isNumberValueType());
//       assertEquals(false, noResolvedType0.isTemplateType());
//       assertEquals(false, noResolvedType0.isRecordType());
//       assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
//       assertNull(noResolvedType0.getTemplateTypeName());
//       assertEquals(false, noResolvedType0.isAllType());
//       assertEquals(false, noResolvedType0.isNoObjectType());
//       assertEquals(true, noResolvedType0.canBeCalled());
//       assertNull(noResolvedType0.getReferenceName());
//       assertEquals(2147483647, noResolvedType0.getMaxArguments());
//       assertEquals(true, noResolvedType0.hasInstanceType());
//       assertEquals(false, noResolvedType0.isNullType());
//       assertEquals(false, noResolvedType0.isCheckedUnknownType());
//       assertEquals(false, noResolvedType0.isUnionType());
//       assertEquals(true, noResolvedType0.matchesObjectContext());
//       assertEquals(true, noResolvedType0.hasCachedValues());
//       assertEquals(false, noResolvedType0.isFunctionPrototypeType());
//       assertEquals(true, noResolvedType0.isConstructor());
//       assertEquals(false, noResolvedType0.isResolved());
//       assertEquals(false, noResolvedType0.isEnumElementType());
//       assertEquals(false, noResolvedType0.isReturnTypeInferred());
//       assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
//       assertNotSame(functionType1, functionType0);
//       assertNotSame(functionType0, functionType1);
//   }

  @Test
  public void test18()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      boolean boolean0 = false;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0, boolean0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      JSTypeNative[] jSTypeNativeArray0 = new JSTypeNative[4];
      JSTypeNative jSTypeNative0 = JSTypeNative.NO_RESOLVED_TYPE;
      jSTypeNativeArray0[0] = jSTypeNative0;
      assertEquals(45, jSTypeNativeArray0[0].ordinal());
      assertEquals("NO_RESOLVED_TYPE", jSTypeNativeArray0[0].toString());
      assertEquals("NO_RESOLVED_TYPE", jSTypeNativeArray0[0].name());
      
      jSTypeNativeArray0[1] = jSTypeNativeArray0[0];
      assertEquals("NO_RESOLVED_TYPE", jSTypeNativeArray0[1].name());
      assertEquals(45, jSTypeNativeArray0[1].ordinal());
      assertEquals("NO_RESOLVED_TYPE", jSTypeNativeArray0[1].toString());
      
      JSTypeNative jSTypeNative1 = JSTypeNative.LEAST_FUNCTION_TYPE;
      assertNotSame(jSTypeNative1, jSTypeNative0);
      
      jSTypeNativeArray0[2] = jSTypeNative1;
      assertEquals(49, jSTypeNativeArray0[2].ordinal());
      assertEquals("LEAST_FUNCTION_TYPE", jSTypeNativeArray0[2].name());
      assertEquals("LEAST_FUNCTION_TYPE", jSTypeNativeArray0[2].toString());
      
      JSTypeNative jSTypeNative2 = JSTypeNative.NUMBER_OBJECT_FUNCTION_TYPE;
      assertNotSame(jSTypeNative2, jSTypeNative1);
      assertNotSame(jSTypeNative2, jSTypeNative0);
      
      jSTypeNativeArray0[3] = jSTypeNative2;
      assertEquals(18, jSTypeNativeArray0[3].ordinal());
      assertEquals("NUMBER_OBJECT_FUNCTION_TYPE", jSTypeNativeArray0[3].name());
      assertEquals("NUMBER_OBJECT_FUNCTION_TYPE", jSTypeNativeArray0[3].toString());
      
      UnionType unionType0 = (UnionType)jSTypeRegistry0.createUnionType(jSTypeNativeArray0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isEnumType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isInterface());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isCheckedUnknownType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isConstructor());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isFunctionPrototypeType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isNoResolvedType());
      assertEquals(false, unionType0.isOrdinaryFunction());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isNominalType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isEnumElementType());
      assertNotNull(unionType0);
  }

  @Test
  public void test19()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      boolean boolean0 = true;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0, boolean0);
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      String string0 = "";
      int int0 = 3754;
      NamedType namedType0 = new NamedType(jSTypeRegistry0, string0, string0, int0, int0);
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, namedType0.isStringValueType());
      assertEquals(false, namedType0.isUnionType());
      assertEquals(false, namedType0.isNumberValueType());
      assertEquals(false, namedType0.hasCachedValues());
      assertEquals(false, namedType0.isBooleanValueType());
      assertEquals(false, namedType0.isResolved());
      assertEquals(BooleanLiteralSet.TRUE, namedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, namedType0.isFunctionPrototypeType());
      assertEquals(false, namedType0.isNullType());
      assertEquals(false, namedType0.isVoidType());
      assertEquals(false, namedType0.isRecordType());
      assertEquals(false, namedType0.isAllType());
      assertEquals(false, namedType0.isFunctionType());
      assertEquals(false, namedType0.isEnumElementType());
      assertEquals(false, namedType0.isTemplateType());
      assertNotNull(namedType0);
      
      Node node0 = namedType0.getPropertyNode(string0);
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, namedType0.isStringValueType());
      assertEquals(false, namedType0.isUnionType());
      assertEquals(false, namedType0.isNumberValueType());
      assertEquals(false, namedType0.hasCachedValues());
      assertEquals(false, namedType0.isBooleanValueType());
      assertEquals(false, namedType0.isResolved());
      assertEquals(BooleanLiteralSet.TRUE, namedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, namedType0.isFunctionPrototypeType());
      assertEquals(false, namedType0.isNullType());
      assertEquals(false, namedType0.isVoidType());
      assertEquals(false, namedType0.isRecordType());
      assertEquals(false, namedType0.isAllType());
      assertEquals(false, namedType0.isFunctionType());
      assertEquals(false, namedType0.isEnumElementType());
      assertEquals(false, namedType0.isTemplateType());
      assertNull(node0);
      
      FunctionType functionType0 = FunctionType.forInterface(jSTypeRegistry0, string0, node0);
      assertEquals(false, functionType0.isResolved());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertEquals(false, functionType0.isNumberValueType());
      assertEquals(0, functionType0.getMaxArguments());
      assertEquals(false, functionType0.isUnionType());
      assertEquals(true, functionType0.hasInstanceType());
      assertEquals(false, functionType0.isNoType());
      assertEquals(false, functionType0.isNoResolvedType());
      assertEquals(false, functionType0.isEnumType());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, functionType0.isStringValueType());
      assertNull(functionType0.getTemplateTypeName());
      assertEquals(false, functionType0.isReturnTypeInferred());
      assertEquals(false, functionType0.isRecordType());
      assertEquals(true, functionType0.isFunctionType());
      assertEquals(false, functionType0.isOrdinaryFunction());
      assertEquals(false, functionType0.isAllType());
      assertEquals(false, functionType0.isNominalType());
      assertEquals(false, functionType0.isFunctionPrototypeType());
      assertEquals(false, functionType0.hasCachedValues());
      assertEquals(false, functionType0.isTemplateType());
      assertEquals(false, functionType0.isNullType());
      assertEquals(false, functionType0.isVoidType());
      assertEquals(false, functionType0.isConstructor());
      assertEquals(false, functionType0.isEnumElementType());
      assertEquals(false, functionType0.isBooleanValueType());
      assertEquals(true, functionType0.canBeCalled());
      assertEquals(true, functionType0.isInterface());
      assertEquals(false, functionType0.isNoObjectType());
      assertEquals(false, functionType0.isCheckedUnknownType());
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, namedType0.isStringValueType());
      assertEquals(false, namedType0.isUnionType());
      assertEquals(false, namedType0.isNumberValueType());
      assertEquals(false, namedType0.hasCachedValues());
      assertEquals(false, namedType0.isBooleanValueType());
      assertEquals(false, namedType0.isResolved());
      assertEquals(BooleanLiteralSet.TRUE, namedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, namedType0.isFunctionPrototypeType());
      assertEquals(false, namedType0.isNullType());
      assertEquals(false, namedType0.isVoidType());
      assertEquals(false, namedType0.isRecordType());
      assertEquals(false, namedType0.isAllType());
      assertEquals(false, namedType0.isFunctionType());
      assertEquals(false, namedType0.isEnumElementType());
      assertEquals(false, namedType0.isTemplateType());
      assertNotNull(functionType0);
      
      functionType0.setPrototypeBasedOn((ObjectType) namedType0);
      assertEquals(false, functionType0.isResolved());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertEquals(false, functionType0.isNumberValueType());
      assertEquals(0, functionType0.getMaxArguments());
      assertEquals(false, functionType0.isUnionType());
      assertEquals(true, functionType0.hasInstanceType());
      assertEquals(false, functionType0.isNoType());
      assertEquals(false, functionType0.isNoResolvedType());
      assertEquals(false, functionType0.isEnumType());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, functionType0.isStringValueType());
      assertNull(functionType0.getTemplateTypeName());
      assertEquals(true, functionType0.hasCachedValues());
      assertEquals(false, functionType0.isReturnTypeInferred());
      assertEquals(false, functionType0.isRecordType());
      assertEquals(true, functionType0.isFunctionType());
      assertEquals(false, functionType0.isOrdinaryFunction());
      assertEquals(false, functionType0.isAllType());
      assertEquals(false, functionType0.isNominalType());
      assertEquals(false, functionType0.isFunctionPrototypeType());
      assertEquals(false, functionType0.isTemplateType());
      assertEquals(false, functionType0.isNullType());
      assertEquals(false, functionType0.isVoidType());
      assertEquals(false, functionType0.isConstructor());
      assertEquals(false, functionType0.isEnumElementType());
      assertEquals(false, functionType0.isBooleanValueType());
      assertEquals(true, functionType0.canBeCalled());
      assertEquals(true, functionType0.isInterface());
      assertEquals(false, functionType0.isNoObjectType());
      assertEquals(false, functionType0.isCheckedUnknownType());
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, namedType0.isStringValueType());
      assertEquals(false, namedType0.isUnionType());
      assertEquals(false, namedType0.isNumberValueType());
      assertEquals(false, namedType0.hasCachedValues());
      assertEquals(false, namedType0.isBooleanValueType());
      assertEquals(false, namedType0.isResolved());
      assertEquals(BooleanLiteralSet.TRUE, namedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, namedType0.isFunctionPrototypeType());
      assertEquals(false, namedType0.isNullType());
      assertEquals(false, namedType0.isVoidType());
      assertEquals(false, namedType0.isRecordType());
      assertEquals(false, namedType0.isAllType());
      assertEquals(false, namedType0.isFunctionType());
      assertEquals(false, namedType0.isEnumElementType());
      assertEquals(false, namedType0.isTemplateType());
      
      InstanceObjectType instanceObjectType0 = (InstanceObjectType)functionType0.getTopMostDefiningType(string0);
      assertEquals(false, functionType0.isResolved());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertEquals(false, functionType0.isNumberValueType());
      assertEquals(0, functionType0.getMaxArguments());
      assertEquals(false, functionType0.isUnionType());
      assertEquals(true, functionType0.hasInstanceType());
      assertEquals(false, functionType0.isNoType());
      assertEquals(false, functionType0.isNoResolvedType());
      assertEquals(false, functionType0.isEnumType());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, functionType0.isStringValueType());
      assertNull(functionType0.getTemplateTypeName());
      assertEquals(true, functionType0.hasCachedValues());
      assertEquals(false, functionType0.isReturnTypeInferred());
      assertEquals(false, functionType0.isRecordType());
      assertEquals(true, functionType0.isFunctionType());
      assertEquals(false, functionType0.isOrdinaryFunction());
      assertEquals(false, functionType0.isAllType());
      assertEquals(false, functionType0.isNominalType());
      assertEquals(false, functionType0.isFunctionPrototypeType());
      assertEquals(false, functionType0.isTemplateType());
      assertEquals(false, functionType0.isNullType());
      assertEquals(false, functionType0.isVoidType());
      assertEquals(false, functionType0.isConstructor());
      assertEquals(false, functionType0.isEnumElementType());
      assertEquals(false, functionType0.isBooleanValueType());
      assertEquals(true, functionType0.canBeCalled());
      assertEquals(true, functionType0.isInterface());
      assertEquals(false, functionType0.isNoObjectType());
      assertEquals(false, functionType0.isCheckedUnknownType());
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, instanceObjectType0.isInterface());
      assertEquals(false, instanceObjectType0.isNoObjectType());
      assertEquals(false, instanceObjectType0.isNumberValueType());
      assertEquals(false, instanceObjectType0.isBooleanValueType());
      assertEquals(false, instanceObjectType0.isCheckedUnknownType());
      assertEquals(false, instanceObjectType0.isNullType());
      assertEquals(true, instanceObjectType0.isNominalType());
      assertEquals(false, instanceObjectType0.isNoType());
      assertEquals(true, instanceObjectType0.hasReferenceName());
      assertEquals(false, instanceObjectType0.isVoidType());
      assertEquals(false, instanceObjectType0.isEnumType());
      assertEquals(false, instanceObjectType0.isAllType());
      assertEquals(false, instanceObjectType0.isResolved());
      assertEquals(false, instanceObjectType0.isConstructor());
      assertEquals(false, instanceObjectType0.isTemplateType());
      assertEquals(false, instanceObjectType0.isOrdinaryFunction());
      assertEquals(false, instanceObjectType0.isEnumElementType());
      assertEquals(true, instanceObjectType0.isInstanceType());
      assertEquals(false, instanceObjectType0.isRecordType());
      assertEquals(false, instanceObjectType0.isFunctionType());
      assertEquals(false, instanceObjectType0.isNoResolvedType());
      assertEquals(false, instanceObjectType0.isStringValueType());
      assertEquals(BooleanLiteralSet.TRUE, instanceObjectType0.getPossibleToBooleanOutcomes());
      assertEquals(false, instanceObjectType0.isFunctionPrototypeType());
      assertEquals(false, instanceObjectType0.isUnionType());
      assertEquals(false, namedType0.isStringValueType());
      assertEquals(false, namedType0.isUnionType());
      assertEquals(false, namedType0.isNumberValueType());
      assertEquals(false, namedType0.hasCachedValues());
      assertEquals(false, namedType0.isBooleanValueType());
      assertEquals(false, namedType0.isResolved());
      assertEquals(BooleanLiteralSet.TRUE, namedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, namedType0.isFunctionPrototypeType());
      assertEquals(false, namedType0.isNullType());
      assertEquals(false, namedType0.isVoidType());
      assertEquals(false, namedType0.isRecordType());
      assertEquals(false, namedType0.isAllType());
      assertEquals(false, namedType0.isFunctionType());
      assertEquals(false, namedType0.isEnumElementType());
      assertEquals(false, namedType0.isTemplateType());
      assertNotNull(instanceObjectType0);
  }

  @Test
  public void test20()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      boolean boolean0 = true;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0, boolean0);
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      String string0 = "";
      int int0 = 3754;
      NoType noType0 = new NoType(jSTypeRegistry0);
      assertEquals(false, noType0.isVoidType());
      assertEquals(false, noType0.isInterface());
      assertEquals(true, noType0.isConstructor());
      assertEquals(true, noType0.hasInstanceType());
      assertEquals(false, noType0.isResolved());
      assertEquals(false, noType0.isFunctionPrototypeType());
      assertEquals(false, noType0.isNominalType());
      assertEquals(0, noType0.getExtendedInterfacesCount());
      assertNull(noType0.getReferenceName());
      assertEquals(true, noType0.matchesStringContext());
      assertEquals(false, noType0.isRecordType());
      assertEquals(false, noType0.isEnumType());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noType0.isNoObjectType());
      assertEquals(false, noType0.isBooleanValueType());
      assertEquals(false, noType0.isFunctionType());
      assertEquals(true, noType0.isNullable());
      assertEquals(false, noType0.isNullType());
      assertEquals(true, noType0.isNoType());
      assertEquals(false, noType0.isUnionType());
      assertEquals(false, noType0.isOrdinaryFunction());
      assertEquals(false, noType0.isStringValueType());
      assertEquals(false, noType0.isNumberValueType());
      assertEquals(true, noType0.matchesObjectContext());
      assertEquals(2147483647, noType0.getPropertiesCount());
      assertEquals(false, noType0.isAllType());
      assertEquals(false, noType0.isReturnTypeInferred());
      assertNull(noType0.getTemplateTypeName());
      assertEquals(false, noType0.isNoResolvedType());
      assertEquals(false, noType0.isCheckedUnknownType());
      assertEquals(true, noType0.canBeCalled());
      assertEquals(true, noType0.matchesNumberContext());
      assertEquals(false, noType0.isEnumElementType());
      assertEquals(false, noType0.hasCachedValues());
      assertEquals(false, noType0.isTemplateType());
      assertEquals(2147483647, noType0.getMaxArguments());
      assertEquals("None", noType0.toString());
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(noType0);
      
      NamedType namedType0 = new NamedType(jSTypeRegistry0, string0, string0, int0, int0);
      assertEquals(false, namedType0.isEnumElementType());
      assertEquals(false, namedType0.isNumberValueType());
      assertEquals(false, namedType0.isStringValueType());
      assertEquals(false, namedType0.isVoidType());
      assertEquals(BooleanLiteralSet.TRUE, namedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, namedType0.isResolved());
      assertEquals(false, namedType0.isRecordType());
      assertEquals(false, namedType0.isAllType());
      assertEquals(false, namedType0.isFunctionType());
      assertEquals(false, namedType0.isFunctionPrototypeType());
      assertEquals(false, namedType0.isBooleanValueType());
      assertEquals(false, namedType0.isTemplateType());
      assertEquals(false, namedType0.isUnionType());
      assertEquals(false, namedType0.hasCachedValues());
      assertEquals(false, namedType0.isNullType());
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(namedType0);
      
      noType0.setPrototypeBasedOn((ObjectType) namedType0);
      assertEquals(false, noType0.isVoidType());
      assertEquals(false, noType0.isInterface());
      assertEquals(true, noType0.isConstructor());
      assertEquals(true, noType0.hasInstanceType());
      assertEquals(false, noType0.isResolved());
      assertEquals(false, noType0.isFunctionPrototypeType());
      assertEquals(false, noType0.isNominalType());
      assertEquals(0, noType0.getExtendedInterfacesCount());
      assertNull(noType0.getReferenceName());
      assertEquals(true, noType0.matchesStringContext());
      assertEquals(false, noType0.isRecordType());
      assertEquals(false, noType0.isEnumType());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noType0.isNoObjectType());
      assertEquals(false, noType0.isBooleanValueType());
      assertEquals(false, noType0.isFunctionType());
      assertEquals(true, noType0.isNullable());
      assertEquals(false, noType0.isNullType());
      assertEquals(true, noType0.isNoType());
      assertEquals(false, noType0.isUnionType());
      assertEquals(false, noType0.isOrdinaryFunction());
      assertEquals(false, noType0.isStringValueType());
      assertEquals(false, noType0.isNumberValueType());
      assertEquals(true, noType0.matchesObjectContext());
      assertEquals(2147483647, noType0.getPropertiesCount());
      assertEquals(false, noType0.isAllType());
      assertEquals(false, noType0.isReturnTypeInferred());
      assertNull(noType0.getTemplateTypeName());
      assertEquals(false, noType0.isNoResolvedType());
      assertEquals(true, noType0.hasCachedValues());
      assertEquals(false, noType0.isCheckedUnknownType());
      assertEquals(true, noType0.canBeCalled());
      assertEquals(true, noType0.matchesNumberContext());
      assertEquals(false, noType0.isEnumElementType());
      assertEquals(false, noType0.isTemplateType());
      assertEquals(2147483647, noType0.getMaxArguments());
      assertEquals("None", noType0.toString());
      assertEquals(false, namedType0.isEnumElementType());
      assertEquals(false, namedType0.isNumberValueType());
      assertEquals(false, namedType0.isStringValueType());
      assertEquals(false, namedType0.isVoidType());
      assertEquals(BooleanLiteralSet.TRUE, namedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, namedType0.isResolved());
      assertEquals(false, namedType0.isRecordType());
      assertEquals(false, namedType0.isAllType());
      assertEquals(false, namedType0.isFunctionType());
      assertEquals(false, namedType0.isFunctionPrototypeType());
      assertEquals(false, namedType0.isBooleanValueType());
      assertEquals(false, namedType0.isTemplateType());
      assertEquals(false, namedType0.isUnionType());
      assertEquals(false, namedType0.hasCachedValues());
      assertEquals(false, namedType0.isNullType());
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      NoType noType1 = (NoType)noType0.getTopMostDefiningType(string0);
      assertEquals(false, noType1.isNoResolvedType());
      assertEquals(false, noType1.isFunctionType());
      assertEquals(false, noType1.isEnumElementType());
      assertEquals(true, noType1.isNullable());
      assertEquals(false, noType1.isOrdinaryFunction());
      assertEquals(false, noType1.isRecordType());
      assertEquals(false, noType1.isStringValueType());
      assertEquals(false, noType1.isTemplateType());
      assertEquals(true, noType1.isNoType());
      assertEquals(false, noType1.isNoObjectType());
      assertEquals(2147483647, noType1.getMaxArguments());
      assertEquals(BooleanLiteralSet.EMPTY, noType1.getPossibleToBooleanOutcomes());
      assertEquals(false, noType1.isInterface());
      assertEquals(true, noType1.hasInstanceType());
      assertEquals(false, noType1.isFunctionPrototypeType());
      assertEquals(true, noType1.hasCachedValues());
      assertEquals(true, noType1.matchesObjectContext());
      assertNull(noType1.getTemplateTypeName());
      assertEquals(2147483647, noType1.getPropertiesCount());
      assertEquals(false, noType1.isReturnTypeInferred());
      assertEquals(false, noType1.isUnionType());
      assertNull(noType1.getReferenceName());
      assertEquals(true, noType1.isConstructor());
      assertEquals(false, noType1.isNominalType());
      assertEquals(true, noType1.matchesStringContext());
      assertEquals(true, noType1.canBeCalled());
      assertEquals(false, noType1.isEnumType());
      assertEquals(true, noType1.matchesNumberContext());
      assertEquals(false, noType1.isNumberValueType());
      assertEquals(0, noType1.getExtendedInterfacesCount());
      assertEquals(false, noType1.isVoidType());
      assertEquals(false, noType1.isCheckedUnknownType());
      assertEquals(false, noType1.isResolved());
      assertEquals(false, noType1.isBooleanValueType());
      assertEquals("None", noType1.toString());
      assertEquals(false, noType1.isNullType());
      assertEquals(false, noType1.isAllType());
      assertEquals(false, noType0.isVoidType());
      assertEquals(false, noType0.isInterface());
      assertEquals(true, noType0.isConstructor());
      assertEquals(true, noType0.hasInstanceType());
      assertEquals(false, noType0.isResolved());
      assertEquals(false, noType0.isFunctionPrototypeType());
      assertEquals(false, noType0.isNominalType());
      assertEquals(0, noType0.getExtendedInterfacesCount());
      assertNull(noType0.getReferenceName());
      assertEquals(true, noType0.matchesStringContext());
      assertEquals(false, noType0.isRecordType());
      assertEquals(false, noType0.isEnumType());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noType0.isNoObjectType());
      assertEquals(false, noType0.isBooleanValueType());
      assertEquals(false, noType0.isFunctionType());
      assertEquals(true, noType0.isNullable());
      assertEquals(false, noType0.isNullType());
      assertEquals(true, noType0.isNoType());
      assertEquals(false, noType0.isUnionType());
      assertEquals(false, noType0.isOrdinaryFunction());
      assertEquals(false, noType0.isStringValueType());
      assertEquals(false, noType0.isNumberValueType());
      assertEquals(true, noType0.matchesObjectContext());
      assertEquals(2147483647, noType0.getPropertiesCount());
      assertEquals(false, noType0.isAllType());
      assertEquals(false, noType0.isReturnTypeInferred());
      assertNull(noType0.getTemplateTypeName());
      assertEquals(false, noType0.isNoResolvedType());
      assertEquals(true, noType0.hasCachedValues());
      assertEquals(false, noType0.isCheckedUnknownType());
      assertEquals(true, noType0.canBeCalled());
      assertEquals(true, noType0.matchesNumberContext());
      assertEquals(false, noType0.isEnumElementType());
      assertEquals(false, noType0.isTemplateType());
      assertEquals(2147483647, noType0.getMaxArguments());
      assertEquals("None", noType0.toString());
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertSame(noType1, noType0);
      assertSame(noType0, noType1);
      assertNotNull(noType1);
  }

  @Test
  public void test21()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      StringType stringType0 = new StringType(jSTypeRegistry0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, stringType0.isAllType());
      assertEquals(false, stringType0.isInterface());
      assertEquals(false, stringType0.isConstructor());
      assertEquals(BooleanLiteralSet.BOTH, stringType0.getPossibleToBooleanOutcomes());
      assertEquals(false, stringType0.isFunctionType());
      assertEquals(true, stringType0.matchesStringContext());
      assertEquals(false, stringType0.isCheckedUnknownType());
      assertEquals("string", stringType0.toString());
      assertEquals("string", stringType0.getDisplayName());
      assertEquals(false, stringType0.isVoidType());
      assertEquals(false, stringType0.isResolved());
      assertEquals(false, stringType0.isNullType());
      assertEquals(false, stringType0.isBooleanValueType());
      assertEquals(false, stringType0.isOrdinaryFunction());
      assertEquals(false, stringType0.isNominalType());
      assertEquals(false, stringType0.isNoResolvedType());
      assertEquals(false, stringType0.isRecordType());
      assertEquals(false, stringType0.isNoObjectType());
      assertEquals(false, stringType0.isUnionType());
      assertEquals(true, stringType0.matchesNumberContext());
      assertEquals(false, stringType0.isEnumType());
      assertEquals(true, stringType0.matchesObjectContext());
      assertEquals(false, stringType0.isEnumElementType());
      assertEquals(false, stringType0.isTemplateType());
      assertEquals(false, stringType0.isNumberValueType());
      assertEquals(false, stringType0.isNoType());
      assertEquals(true, stringType0.isStringValueType());
      assertEquals(false, stringType0.isFunctionPrototypeType());
      assertNotNull(stringType0);
      
      JSType[] jSTypeArray0 = new JSType[4];
      jSTypeArray0[3] = (JSType) stringType0;
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, jSTypeArray0[3].isRecordType());
      assertEquals(false, jSTypeArray0[3].isEnumType());
      assertEquals(false, jSTypeArray0[3].isVoidType());
      assertEquals(false, jSTypeArray0[3].isNumberValueType());
      assertEquals(false, jSTypeArray0[3].isNoType());
      assertEquals(false, jSTypeArray0[3].isNoResolvedType());
      assertEquals(false, jSTypeArray0[3].isOrdinaryFunction());
      assertEquals(false, jSTypeArray0[3].isTemplateType());
      assertEquals(false, jSTypeArray0[3].isResolved());
      assertEquals(false, jSTypeArray0[3].isBooleanValueType());
      assertEquals(false, jSTypeArray0[3].isNominalType());
      assertEquals(false, jSTypeArray0[3].isCheckedUnknownType());
      assertEquals(false, jSTypeArray0[3].isAllType());
      assertEquals(false, jSTypeArray0[3].isConstructor());
      assertEquals(false, jSTypeArray0[3].isFunctionPrototypeType());
      assertEquals(false, jSTypeArray0[3].isNullType());
      assertEquals(false, jSTypeArray0[3].isNoObjectType());
      assertEquals(true, jSTypeArray0[3].isStringValueType());
      assertEquals(false, jSTypeArray0[3].isInterface());
      assertEquals(false, jSTypeArray0[3].isEnumElementType());
      assertEquals(false, jSTypeArray0[3].isUnionType());
      assertEquals(false, jSTypeArray0[3].isFunctionType());
      assertEquals(false, stringType0.isAllType());
      assertEquals(false, stringType0.isInterface());
      assertEquals(false, stringType0.isConstructor());
      assertEquals(BooleanLiteralSet.BOTH, stringType0.getPossibleToBooleanOutcomes());
      assertEquals(false, stringType0.isFunctionType());
      assertEquals(true, stringType0.matchesStringContext());
      assertEquals(false, stringType0.isCheckedUnknownType());
      assertEquals("string", stringType0.toString());
      assertEquals("string", stringType0.getDisplayName());
      assertEquals(false, stringType0.isVoidType());
      assertEquals(false, stringType0.isResolved());
      assertEquals(false, stringType0.isNullType());
      assertEquals(false, stringType0.isBooleanValueType());
      assertEquals(false, stringType0.isOrdinaryFunction());
      assertEquals(false, stringType0.isNominalType());
      assertEquals(false, stringType0.isNoResolvedType());
      assertEquals(false, stringType0.isRecordType());
      assertEquals(false, stringType0.isNoObjectType());
      assertEquals(false, stringType0.isUnionType());
      assertEquals(true, stringType0.matchesNumberContext());
      assertEquals(false, stringType0.isEnumType());
      assertEquals(true, stringType0.matchesObjectContext());
      assertEquals(false, stringType0.isEnumElementType());
      assertEquals(false, stringType0.isTemplateType());
      assertEquals(false, stringType0.isNumberValueType());
      assertEquals(false, stringType0.isNoType());
      assertEquals(true, stringType0.isStringValueType());
      assertEquals(false, stringType0.isFunctionPrototypeType());
      assertNotNull(jSTypeArray0[3]);
      
      FunctionType functionType0 = jSTypeRegistry0.createFunctionTypeWithVarArgs((JSType) stringType0, jSTypeArray0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, functionType0.hasInstanceType());
      assertEquals(false, functionType0.isAllType());
      assertEquals(false, functionType0.isCheckedUnknownType());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertEquals(false, functionType0.isResolved());
      assertEquals(false, functionType0.isVoidType());
      assertEquals(true, functionType0.isFunctionType());
      assertEquals(false, functionType0.isEnumType());
      assertEquals(false, functionType0.isNoResolvedType());
      assertEquals(false, functionType0.isInterface());
      assertEquals(false, functionType0.isNoType());
      assertEquals(false, functionType0.isStringValueType());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, functionType0.isNoObjectType());
      assertEquals(true, functionType0.isOrdinaryFunction());
      assertEquals(false, functionType0.isUnionType());
      assertEquals(false, functionType0.isNumberValueType());
      assertEquals(false, functionType0.hasCachedValues());
      assertEquals(false, functionType0.isRecordType());
      assertEquals(true, functionType0.canBeCalled());
      assertEquals(false, functionType0.isNullType());
      assertEquals(false, functionType0.isTemplateType());
      assertEquals(false, functionType0.isBooleanValueType());
      assertEquals(false, functionType0.isConstructor());
      assertEquals(false, functionType0.isReturnTypeInferred());
      assertNull(functionType0.getTemplateTypeName());
      assertEquals(false, functionType0.isNominalType());
      assertEquals(false, functionType0.isEnumElementType());
      assertEquals(false, functionType0.isFunctionPrototypeType());
      assertEquals(2147483647, functionType0.getMaxArguments());
      assertEquals(false, stringType0.isAllType());
      assertEquals(false, stringType0.isInterface());
      assertEquals(false, stringType0.isConstructor());
      assertEquals(BooleanLiteralSet.BOTH, stringType0.getPossibleToBooleanOutcomes());
      assertEquals(false, stringType0.isFunctionType());
      assertEquals(true, stringType0.matchesStringContext());
      assertEquals(false, stringType0.isCheckedUnknownType());
      assertEquals("string", stringType0.toString());
      assertEquals("string", stringType0.getDisplayName());
      assertEquals(false, stringType0.isVoidType());
      assertEquals(false, stringType0.isResolved());
      assertEquals(false, stringType0.isNullType());
      assertEquals(false, stringType0.isBooleanValueType());
      assertEquals(false, stringType0.isOrdinaryFunction());
      assertEquals(false, stringType0.isNominalType());
      assertEquals(false, stringType0.isNoResolvedType());
      assertEquals(false, stringType0.isRecordType());
      assertEquals(false, stringType0.isNoObjectType());
      assertEquals(false, stringType0.isUnionType());
      assertEquals(true, stringType0.matchesNumberContext());
      assertEquals(false, stringType0.isEnumType());
      assertEquals(true, stringType0.matchesObjectContext());
      assertEquals(false, stringType0.isEnumElementType());
      assertEquals(false, stringType0.isTemplateType());
      assertEquals(false, stringType0.isNumberValueType());
      assertEquals(false, stringType0.isNoType());
      assertEquals(true, stringType0.isStringValueType());
      assertEquals(false, stringType0.isFunctionPrototypeType());
      assertNotNull(functionType0);
      
      String string0 = "prototyp9e";
      // Undeclared exception!
      try {
        ObjectType objectType0 = functionType0.getTopMostDefiningType(string0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test22()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      boolean boolean0 = false;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0, boolean0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      JSTypeNative jSTypeNative0 = JSTypeNative.REFERENCE_ERROR_FUNCTION_TYPE;
      ErrorFunctionType errorFunctionType0 = (ErrorFunctionType)jSTypeRegistry0.getNativeType(jSTypeNative0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, errorFunctionType0.isNoObjectType());
      assertEquals(false, errorFunctionType0.isReturnTypeInferred());
      assertEquals(false, errorFunctionType0.isNoType());
      assertEquals(false, errorFunctionType0.isRecordType());
      assertEquals(3, errorFunctionType0.getMaxArguments());
      assertEquals(true, errorFunctionType0.isFunctionType());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, errorFunctionType0.isResolved());
      assertEquals(false, errorFunctionType0.isCheckedUnknownType());
      assertEquals(false, errorFunctionType0.isNumberValueType());
      assertEquals(true, errorFunctionType0.isConstructor());
      assertEquals(true, errorFunctionType0.hasCachedValues());
      assertEquals(false, errorFunctionType0.isNominalType());
      assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      assertNull(errorFunctionType0.getTemplateTypeName());
      assertEquals(false, errorFunctionType0.isEnumElementType());
      assertEquals(false, errorFunctionType0.isVoidType());
      assertEquals(false, errorFunctionType0.isUnionType());
      assertEquals(false, errorFunctionType0.isInterface());
      assertEquals(false, errorFunctionType0.isAllType());
      assertEquals(false, errorFunctionType0.isNoResolvedType());
      assertEquals(true, errorFunctionType0.hasInstanceType());
      assertEquals(false, errorFunctionType0.isNullType());
      assertEquals(false, errorFunctionType0.isFunctionPrototypeType());
      assertEquals(true, errorFunctionType0.canBeCalled());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertEquals(false, errorFunctionType0.isBooleanValueType());
      assertEquals(false, errorFunctionType0.isEnumType());
      assertEquals(false, errorFunctionType0.isStringValueType());
      assertEquals(false, errorFunctionType0.isTemplateType());
      assertNotNull(errorFunctionType0);
      
      String string0 = ".prototype";
      ErrorFunctionType errorFunctionType1 = new ErrorFunctionType(jSTypeRegistry0, string0);
      assertFalse(errorFunctionType1.equals((Object)errorFunctionType0));
      assertEquals(true, errorFunctionType1.isConstructor());
      assertEquals(false, errorFunctionType1.isNullType());
      assertEquals(false, errorFunctionType1.isOrdinaryFunction());
      assertEquals(false, errorFunctionType1.isResolved());
      assertEquals(false, errorFunctionType1.isInterface());
      assertEquals(false, errorFunctionType1.isNoType());
      assertEquals(true, errorFunctionType1.isFunctionType());
      assertEquals(false, errorFunctionType1.hasCachedValues());
      assertEquals(true, errorFunctionType1.canBeCalled());
      assertEquals(false, errorFunctionType1.isEnumType());
      assertEquals(false, errorFunctionType1.isEnumElementType());
      assertEquals(false, errorFunctionType1.isVoidType());
      assertEquals(0, errorFunctionType1.getExtendedInterfacesCount());
      assertNull(errorFunctionType1.getTemplateTypeName());
      assertEquals(false, errorFunctionType1.isCheckedUnknownType());
      assertEquals(false, errorFunctionType1.isTemplateType());
      assertEquals(false, errorFunctionType1.isStringValueType());
      assertEquals(false, errorFunctionType1.isNumberValueType());
      assertEquals(3, errorFunctionType1.getMaxArguments());
      assertEquals(false, errorFunctionType1.isReturnTypeInferred());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType1.getPossibleToBooleanOutcomes());
      assertEquals(false, errorFunctionType1.isFunctionPrototypeType());
      assertEquals(false, errorFunctionType1.isBooleanValueType());
      assertEquals(false, errorFunctionType1.isNoResolvedType());
      assertEquals(false, errorFunctionType1.isNominalType());
      assertEquals(true, errorFunctionType1.hasInstanceType());
      assertEquals(false, errorFunctionType1.isAllType());
      assertEquals(false, errorFunctionType1.isNoObjectType());
      assertEquals(false, errorFunctionType1.isRecordType());
      assertEquals(false, errorFunctionType1.isUnionType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotSame(errorFunctionType1, errorFunctionType0);
      assertNotNull(errorFunctionType1);
      
      JSType jSType0 = errorFunctionType1.getLeastSupertype((JSType) errorFunctionType0);
      assertFalse(errorFunctionType1.equals((Object)errorFunctionType0));
      assertFalse(errorFunctionType0.equals((Object)errorFunctionType1));
      assertEquals(true, errorFunctionType1.isConstructor());
      assertEquals(false, errorFunctionType1.isNullType());
      assertEquals(false, errorFunctionType1.isOrdinaryFunction());
      assertEquals(false, errorFunctionType1.isResolved());
      assertEquals(false, errorFunctionType1.isInterface());
      assertEquals(false, errorFunctionType1.isNoType());
      assertEquals(true, errorFunctionType1.isFunctionType());
      assertEquals(false, errorFunctionType1.hasCachedValues());
      assertEquals(true, errorFunctionType1.canBeCalled());
      assertEquals(false, errorFunctionType1.isEnumType());
      assertEquals(false, errorFunctionType1.isEnumElementType());
      assertEquals(false, errorFunctionType1.isVoidType());
      assertEquals(0, errorFunctionType1.getExtendedInterfacesCount());
      assertNull(errorFunctionType1.getTemplateTypeName());
      assertEquals(false, errorFunctionType1.isCheckedUnknownType());
      assertEquals(false, errorFunctionType1.isTemplateType());
      assertEquals(false, errorFunctionType1.isStringValueType());
      assertEquals(false, errorFunctionType1.isNumberValueType());
      assertEquals(3, errorFunctionType1.getMaxArguments());
      assertEquals(false, errorFunctionType1.isReturnTypeInferred());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType1.getPossibleToBooleanOutcomes());
      assertEquals(false, errorFunctionType1.isFunctionPrototypeType());
      assertEquals(false, errorFunctionType1.isBooleanValueType());
      assertEquals(false, errorFunctionType1.isNoResolvedType());
      assertEquals(false, errorFunctionType1.isNominalType());
      assertEquals(true, errorFunctionType1.hasInstanceType());
      assertEquals(false, errorFunctionType1.isAllType());
      assertEquals(false, errorFunctionType1.isNoObjectType());
      assertEquals(false, errorFunctionType1.isRecordType());
      assertEquals(false, errorFunctionType1.isUnionType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, jSType0.isRecordType());
      assertEquals(false, jSType0.isCheckedUnknownType());
      assertEquals(true, jSType0.isFunctionType());
      assertEquals(false, jSType0.isEnumType());
      assertEquals(false, jSType0.isOrdinaryFunction());
      assertEquals(false, jSType0.isNoObjectType());
      assertEquals(false, jSType0.isAllType());
      assertEquals(false, jSType0.isInterface());
      assertEquals(false, jSType0.isFunctionPrototypeType());
      assertEquals(false, jSType0.isStringValueType());
      assertEquals(false, jSType0.isUnionType());
      assertEquals(false, jSType0.isEnumElementType());
      assertEquals(false, jSType0.isNominalType());
      assertEquals(true, jSType0.isConstructor());
      assertEquals(false, jSType0.isTemplateType());
      assertEquals(false, jSType0.isResolved());
      assertEquals(false, jSType0.isNoResolvedType());
      assertEquals(false, jSType0.isNoType());
      assertEquals(false, jSType0.isNumberValueType());
      assertEquals(false, jSType0.isBooleanValueType());
      assertEquals(false, jSType0.isVoidType());
      assertEquals(false, jSType0.isNullType());
      assertEquals(false, errorFunctionType0.isNoObjectType());
      assertEquals(false, errorFunctionType0.isReturnTypeInferred());
      assertEquals(false, errorFunctionType0.isNoType());
      assertEquals(false, errorFunctionType0.isRecordType());
      assertEquals(3, errorFunctionType0.getMaxArguments());
      assertEquals(true, errorFunctionType0.isFunctionType());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, errorFunctionType0.isResolved());
      assertEquals(false, errorFunctionType0.isCheckedUnknownType());
      assertEquals(false, errorFunctionType0.isNumberValueType());
      assertEquals(true, errorFunctionType0.isConstructor());
      assertEquals(true, errorFunctionType0.hasCachedValues());
      assertEquals(false, errorFunctionType0.isNominalType());
      assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      assertNull(errorFunctionType0.getTemplateTypeName());
      assertEquals(false, errorFunctionType0.isEnumElementType());
      assertEquals(false, errorFunctionType0.isVoidType());
      assertEquals(false, errorFunctionType0.isUnionType());
      assertEquals(false, errorFunctionType0.isInterface());
      assertEquals(false, errorFunctionType0.isAllType());
      assertEquals(false, errorFunctionType0.isNoResolvedType());
      assertEquals(true, errorFunctionType0.hasInstanceType());
      assertEquals(false, errorFunctionType0.isNullType());
      assertEquals(false, errorFunctionType0.isFunctionPrototypeType());
      assertEquals(true, errorFunctionType0.canBeCalled());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertEquals(false, errorFunctionType0.isBooleanValueType());
      assertEquals(false, errorFunctionType0.isEnumType());
      assertEquals(false, errorFunctionType0.isStringValueType());
      assertEquals(false, errorFunctionType0.isTemplateType());
      assertNotSame(errorFunctionType1, errorFunctionType0);
      assertNotSame(errorFunctionType0, errorFunctionType1);
      assertNotNull(jSType0);
      
      JSType.TypePair jSType_TypePair0 = errorFunctionType0.getTypesUnderShallowEquality(jSType0);
      assertFalse(errorFunctionType1.equals((Object)errorFunctionType0));
      assertFalse(errorFunctionType0.equals((Object)errorFunctionType1));
      assertEquals(true, errorFunctionType1.isConstructor());
      assertEquals(false, errorFunctionType1.isNullType());
      assertEquals(false, errorFunctionType1.isOrdinaryFunction());
      assertEquals(false, errorFunctionType1.isResolved());
      assertEquals(false, errorFunctionType1.isInterface());
      assertEquals(false, errorFunctionType1.isNoType());
      assertEquals(true, errorFunctionType1.isFunctionType());
      assertEquals(false, errorFunctionType1.hasCachedValues());
      assertEquals(true, errorFunctionType1.canBeCalled());
      assertEquals(false, errorFunctionType1.isEnumType());
      assertEquals(false, errorFunctionType1.isEnumElementType());
      assertEquals(false, errorFunctionType1.isVoidType());
      assertEquals(0, errorFunctionType1.getExtendedInterfacesCount());
      assertNull(errorFunctionType1.getTemplateTypeName());
      assertEquals(false, errorFunctionType1.isCheckedUnknownType());
      assertEquals(false, errorFunctionType1.isTemplateType());
      assertEquals(false, errorFunctionType1.isStringValueType());
      assertEquals(false, errorFunctionType1.isNumberValueType());
      assertEquals(3, errorFunctionType1.getMaxArguments());
      assertEquals(false, errorFunctionType1.isReturnTypeInferred());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType1.getPossibleToBooleanOutcomes());
      assertEquals(false, errorFunctionType1.isFunctionPrototypeType());
      assertEquals(false, errorFunctionType1.isBooleanValueType());
      assertEquals(false, errorFunctionType1.isNoResolvedType());
      assertEquals(false, errorFunctionType1.isNominalType());
      assertEquals(true, errorFunctionType1.hasInstanceType());
      assertEquals(false, errorFunctionType1.isAllType());
      assertEquals(false, errorFunctionType1.isNoObjectType());
      assertEquals(false, errorFunctionType1.isRecordType());
      assertEquals(false, errorFunctionType1.isUnionType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, jSType0.isRecordType());
      assertEquals(false, jSType0.isCheckedUnknownType());
      assertEquals(true, jSType0.isFunctionType());
      assertEquals(false, jSType0.isEnumType());
      assertEquals(false, jSType0.isOrdinaryFunction());
      assertEquals(false, jSType0.isNoObjectType());
      assertEquals(false, jSType0.isAllType());
      assertEquals(false, jSType0.isInterface());
      assertEquals(false, jSType0.isFunctionPrototypeType());
      assertEquals(false, jSType0.isStringValueType());
      assertEquals(false, jSType0.isUnionType());
      assertEquals(false, jSType0.isEnumElementType());
      assertEquals(false, jSType0.isNominalType());
      assertEquals(true, jSType0.isConstructor());
      assertEquals(false, jSType0.isTemplateType());
      assertEquals(false, jSType0.isResolved());
      assertEquals(false, jSType0.isNoResolvedType());
      assertEquals(false, jSType0.isNoType());
      assertEquals(false, jSType0.isNumberValueType());
      assertEquals(false, jSType0.isBooleanValueType());
      assertEquals(false, jSType0.isVoidType());
      assertEquals(false, jSType0.isNullType());
      assertEquals(false, errorFunctionType0.isNoObjectType());
      assertEquals(false, errorFunctionType0.isReturnTypeInferred());
      assertEquals(false, errorFunctionType0.isNoType());
      assertEquals(false, errorFunctionType0.isRecordType());
      assertEquals(3, errorFunctionType0.getMaxArguments());
      assertEquals(true, errorFunctionType0.isFunctionType());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, errorFunctionType0.isResolved());
      assertEquals(false, errorFunctionType0.isCheckedUnknownType());
      assertEquals(false, errorFunctionType0.isNumberValueType());
      assertEquals(true, errorFunctionType0.isConstructor());
      assertEquals(true, errorFunctionType0.hasCachedValues());
      assertEquals(false, errorFunctionType0.isNominalType());
      assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      assertNull(errorFunctionType0.getTemplateTypeName());
      assertEquals(false, errorFunctionType0.isEnumElementType());
      assertEquals(false, errorFunctionType0.isVoidType());
      assertEquals(false, errorFunctionType0.isUnionType());
      assertEquals(false, errorFunctionType0.isInterface());
      assertEquals(false, errorFunctionType0.isAllType());
      assertEquals(false, errorFunctionType0.isNoResolvedType());
      assertEquals(true, errorFunctionType0.hasInstanceType());
      assertEquals(false, errorFunctionType0.isNullType());
      assertEquals(false, errorFunctionType0.isFunctionPrototypeType());
      assertEquals(true, errorFunctionType0.canBeCalled());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertEquals(false, errorFunctionType0.isBooleanValueType());
      assertEquals(false, errorFunctionType0.isEnumType());
      assertEquals(false, errorFunctionType0.isStringValueType());
      assertEquals(false, errorFunctionType0.isTemplateType());
      assertNotSame(errorFunctionType1, errorFunctionType0);
      assertNotSame(errorFunctionType0, errorFunctionType1);
      assertNotNull(jSType_TypePair0);
  }

  @Test
  public void test23()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      boolean boolean0 = false;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0, boolean0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      JSTypeNative jSTypeNative0 = JSTypeNative.REFERENCE_ERROR_FUNCTION_TYPE;
      ErrorFunctionType errorFunctionType0 = (ErrorFunctionType)jSTypeRegistry0.getNativeType(jSTypeNative0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNull(errorFunctionType0.getTemplateTypeName());
      assertEquals(false, errorFunctionType0.isReturnTypeInferred());
      assertEquals(false, errorFunctionType0.isRecordType());
      assertEquals(true, errorFunctionType0.isConstructor());
      assertEquals(false, errorFunctionType0.isNumberValueType());
      assertEquals(false, errorFunctionType0.isFunctionPrototypeType());
      assertEquals(false, errorFunctionType0.isNoResolvedType());
      assertEquals(false, errorFunctionType0.isCheckedUnknownType());
      assertEquals(true, errorFunctionType0.isFunctionType());
      assertEquals(true, errorFunctionType0.canBeCalled());
      assertEquals(false, errorFunctionType0.isTemplateType());
      assertEquals(false, errorFunctionType0.isNominalType());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertEquals(true, errorFunctionType0.hasInstanceType());
      assertEquals(false, errorFunctionType0.isResolved());
      assertEquals(false, errorFunctionType0.isEnumElementType());
      assertEquals(false, errorFunctionType0.isBooleanValueType());
      assertEquals(false, errorFunctionType0.isNoObjectType());
      assertEquals(false, errorFunctionType0.isUnionType());
      assertEquals(3, errorFunctionType0.getMaxArguments());
      assertEquals(false, errorFunctionType0.isAllType());
      assertEquals(false, errorFunctionType0.isEnumType());
      assertEquals(false, errorFunctionType0.isNullType());
      assertEquals(true, errorFunctionType0.hasCachedValues());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertEquals(false, errorFunctionType0.isNoType());
      assertEquals(false, errorFunctionType0.isStringValueType());
      assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      assertEquals(false, errorFunctionType0.isVoidType());
      assertEquals(false, errorFunctionType0.isInterface());
      assertNotNull(errorFunctionType0);
      
      String string0 = ".prototype";
      ErrorFunctionType errorFunctionType1 = new ErrorFunctionType(jSTypeRegistry0, string0);
      assertFalse(errorFunctionType1.equals((Object)errorFunctionType0));
      assertEquals(false, errorFunctionType1.isResolved());
      assertEquals(false, errorFunctionType1.isNoType());
      assertEquals(false, errorFunctionType1.isAllType());
      assertEquals(true, errorFunctionType1.hasInstanceType());
      assertEquals(false, errorFunctionType1.isNumberValueType());
      assertEquals(0, errorFunctionType1.getExtendedInterfacesCount());
      assertEquals(false, errorFunctionType1.isBooleanValueType());
      assertEquals(true, errorFunctionType1.isConstructor());
      assertEquals(false, errorFunctionType1.isFunctionPrototypeType());
      assertEquals(false, errorFunctionType1.isInterface());
      assertEquals(true, errorFunctionType1.canBeCalled());
      assertEquals(false, errorFunctionType1.isEnumType());
      assertEquals(false, errorFunctionType1.isCheckedUnknownType());
      assertEquals(3, errorFunctionType1.getMaxArguments());
      assertEquals(false, errorFunctionType1.isOrdinaryFunction());
      assertEquals(false, errorFunctionType1.isTemplateType());
      assertEquals(false, errorFunctionType1.isReturnTypeInferred());
      assertEquals(false, errorFunctionType1.isEnumElementType());
      assertEquals(false, errorFunctionType1.isVoidType());
      assertEquals(false, errorFunctionType1.isNominalType());
      assertEquals(false, errorFunctionType1.hasCachedValues());
      assertEquals(false, errorFunctionType1.isNullType());
      assertEquals(false, errorFunctionType1.isNoObjectType());
      assertEquals(false, errorFunctionType1.isNoResolvedType());
      assertEquals(false, errorFunctionType1.isStringValueType());
      assertNull(errorFunctionType1.getTemplateTypeName());
      assertEquals(true, errorFunctionType1.isFunctionType());
      assertEquals(false, errorFunctionType1.isRecordType());
      assertEquals(false, errorFunctionType1.isUnionType());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType1.getPossibleToBooleanOutcomes());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotSame(errorFunctionType1, errorFunctionType0);
      assertNotNull(errorFunctionType1);
      
      FunctionType functionType0 = (FunctionType)errorFunctionType1.getGreatestSubtype((JSType) errorFunctionType0);
      assertFalse(errorFunctionType1.equals((Object)errorFunctionType0));
      assertFalse(errorFunctionType0.equals((Object)errorFunctionType1));
      assertEquals(false, errorFunctionType1.isResolved());
      assertEquals(false, errorFunctionType1.isNoType());
      assertEquals(false, errorFunctionType1.isAllType());
      assertEquals(true, errorFunctionType1.hasInstanceType());
      assertEquals(false, errorFunctionType1.isNumberValueType());
      assertEquals(0, errorFunctionType1.getExtendedInterfacesCount());
      assertEquals(false, errorFunctionType1.isBooleanValueType());
      assertEquals(true, errorFunctionType1.isConstructor());
      assertEquals(false, errorFunctionType1.isFunctionPrototypeType());
      assertEquals(false, errorFunctionType1.isInterface());
      assertEquals(true, errorFunctionType1.canBeCalled());
      assertEquals(false, errorFunctionType1.isEnumType());
      assertEquals(false, errorFunctionType1.isCheckedUnknownType());
      assertEquals(3, errorFunctionType1.getMaxArguments());
      assertEquals(false, errorFunctionType1.isOrdinaryFunction());
      assertEquals(false, errorFunctionType1.isTemplateType());
      assertEquals(false, errorFunctionType1.isReturnTypeInferred());
      assertEquals(false, errorFunctionType1.isEnumElementType());
      assertEquals(false, errorFunctionType1.isVoidType());
      assertEquals(false, errorFunctionType1.isNominalType());
      assertEquals(false, errorFunctionType1.hasCachedValues());
      assertEquals(false, errorFunctionType1.isNullType());
      assertEquals(false, errorFunctionType1.isNoObjectType());
      assertEquals(false, errorFunctionType1.isNoResolvedType());
      assertEquals(false, errorFunctionType1.isStringValueType());
      assertNull(errorFunctionType1.getTemplateTypeName());
      assertEquals(true, errorFunctionType1.isFunctionType());
      assertEquals(false, errorFunctionType1.isRecordType());
      assertEquals(false, errorFunctionType1.isUnionType());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType1.getPossibleToBooleanOutcomes());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, functionType0.isReturnTypeInferred());
      assertEquals(true, functionType0.canBeCalled());
      assertEquals(false, functionType0.isEnumType());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertEquals(false, functionType0.hasInstanceType());
      assertEquals(2147483647, functionType0.getMaxArguments());
      assertEquals(false, functionType0.isUnionType());
      assertEquals(false, functionType0.hasCachedValues());
      assertEquals(false, functionType0.isNoObjectType());
      assertEquals(false, functionType0.isNullType());
      assertEquals(false, functionType0.isAllType());
      assertEquals(false, functionType0.isStringValueType());
      assertNull(functionType0.getTemplateTypeName());
      assertEquals(false, functionType0.isEnumElementType());
      assertEquals(false, functionType0.isVoidType());
      assertEquals(false, functionType0.isCheckedUnknownType());
      assertEquals(false, functionType0.isResolved());
      assertEquals(false, functionType0.isNominalType());
      assertEquals(false, functionType0.isNumberValueType());
      assertEquals(false, functionType0.isConstructor());
      assertEquals(false, functionType0.isNoResolvedType());
      assertEquals(true, functionType0.isOrdinaryFunction());
      assertEquals(false, functionType0.isNoType());
      assertEquals(true, functionType0.isFunctionType());
      assertEquals(false, functionType0.isInterface());
      assertEquals(false, functionType0.isRecordType());
      assertEquals(false, functionType0.isFunctionPrototypeType());
      assertEquals(false, functionType0.isBooleanValueType());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, functionType0.isTemplateType());
      assertNull(errorFunctionType0.getTemplateTypeName());
      assertEquals(false, errorFunctionType0.isReturnTypeInferred());
      assertEquals(false, errorFunctionType0.isRecordType());
      assertEquals(true, errorFunctionType0.isConstructor());
      assertEquals(false, errorFunctionType0.isNumberValueType());
      assertEquals(false, errorFunctionType0.isFunctionPrototypeType());
      assertEquals(false, errorFunctionType0.isNoResolvedType());
      assertEquals(false, errorFunctionType0.isCheckedUnknownType());
      assertEquals(true, errorFunctionType0.isFunctionType());
      assertEquals(true, errorFunctionType0.canBeCalled());
      assertEquals(false, errorFunctionType0.isTemplateType());
      assertEquals(false, errorFunctionType0.isNominalType());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertEquals(true, errorFunctionType0.hasInstanceType());
      assertEquals(false, errorFunctionType0.isResolved());
      assertEquals(false, errorFunctionType0.isEnumElementType());
      assertEquals(false, errorFunctionType0.isBooleanValueType());
      assertEquals(false, errorFunctionType0.isNoObjectType());
      assertEquals(false, errorFunctionType0.isUnionType());
      assertEquals(3, errorFunctionType0.getMaxArguments());
      assertEquals(false, errorFunctionType0.isAllType());
      assertEquals(false, errorFunctionType0.isEnumType());
      assertEquals(false, errorFunctionType0.isNullType());
      assertEquals(true, errorFunctionType0.hasCachedValues());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertEquals(false, errorFunctionType0.isNoType());
      assertEquals(false, errorFunctionType0.isStringValueType());
      assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      assertEquals(false, errorFunctionType0.isVoidType());
      assertEquals(false, errorFunctionType0.isInterface());
      assertNotSame(errorFunctionType1, errorFunctionType0);
      assertNotSame(errorFunctionType0, errorFunctionType1);
      assertNotNull(functionType0);
  }

  @Test
  public void test24()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      boolean boolean0 = true;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0, boolean0);
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      assertEquals(true, noResolvedType0.matchesStringContext());
      assertEquals(false, noResolvedType0.isTemplateType());
      assertEquals(false, noResolvedType0.isReturnTypeInferred());
      assertEquals(false, noResolvedType0.isFunctionType());
      assertEquals(false, noResolvedType0.isCheckedUnknownType());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertEquals(false, noResolvedType0.isNoObjectType());
      assertEquals(false, noResolvedType0.isOrdinaryFunction());
      assertEquals(2147483647, noResolvedType0.getPropertiesCount());
      assertEquals(true, noResolvedType0.isNullable());
      assertEquals(true, noResolvedType0.hasInstanceType());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noResolvedType0.isStringValueType());
      assertEquals(false, noResolvedType0.isResolved());
      assertEquals(true, noResolvedType0.matchesNumberContext());
      assertEquals(false, noResolvedType0.isVoidType());
      assertEquals(2147483647, noResolvedType0.getMaxArguments());
      assertEquals(false, noResolvedType0.isBooleanValueType());
      assertEquals(false, noResolvedType0.isUnionType());
      assertEquals(false, noResolvedType0.isNumberValueType());
      assertNull(noResolvedType0.getTemplateTypeName());
      assertEquals(false, noResolvedType0.isInterface());
      assertEquals(true, noResolvedType0.matchesObjectContext());
      assertEquals(false, noResolvedType0.isAllType());
      assertNull(noResolvedType0.getReferenceName());
      assertEquals(false, noResolvedType0.hasCachedValues());
      assertEquals(false, noResolvedType0.isNullType());
      assertEquals(false, noResolvedType0.isEnumElementType());
      assertEquals(false, noResolvedType0.isNominalType());
      assertEquals(false, noResolvedType0.isRecordType());
      assertEquals(true, noResolvedType0.canBeCalled());
      assertEquals(true, noResolvedType0.isConstructor());
      assertEquals(false, noResolvedType0.isFunctionPrototypeType());
      assertEquals(false, noResolvedType0.isEnumType());
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(noResolvedType0);
      
      NoResolvedType noResolvedType1 = (NoResolvedType)noResolvedType0.getLeastSupertype((JSType) noResolvedType0);
      assertEquals(true, noResolvedType0.matchesStringContext());
      assertEquals(false, noResolvedType0.isTemplateType());
      assertEquals(false, noResolvedType0.isReturnTypeInferred());
      assertEquals(false, noResolvedType0.isFunctionType());
      assertEquals(false, noResolvedType0.isCheckedUnknownType());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertEquals(false, noResolvedType0.isNoObjectType());
      assertEquals(false, noResolvedType0.isOrdinaryFunction());
      assertEquals(2147483647, noResolvedType0.getPropertiesCount());
      assertEquals(true, noResolvedType0.isNullable());
      assertEquals(true, noResolvedType0.hasInstanceType());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noResolvedType0.isStringValueType());
      assertEquals(false, noResolvedType0.isResolved());
      assertEquals(true, noResolvedType0.matchesNumberContext());
      assertEquals(false, noResolvedType0.isVoidType());
      assertEquals(2147483647, noResolvedType0.getMaxArguments());
      assertEquals(false, noResolvedType0.isBooleanValueType());
      assertEquals(false, noResolvedType0.isUnionType());
      assertEquals(false, noResolvedType0.isNumberValueType());
      assertNull(noResolvedType0.getTemplateTypeName());
      assertEquals(false, noResolvedType0.isInterface());
      assertEquals(true, noResolvedType0.matchesObjectContext());
      assertEquals(false, noResolvedType0.isAllType());
      assertNull(noResolvedType0.getReferenceName());
      assertEquals(false, noResolvedType0.hasCachedValues());
      assertEquals(false, noResolvedType0.isNullType());
      assertEquals(false, noResolvedType0.isEnumElementType());
      assertEquals(false, noResolvedType0.isNominalType());
      assertEquals(false, noResolvedType0.isRecordType());
      assertEquals(true, noResolvedType0.canBeCalled());
      assertEquals(true, noResolvedType0.isConstructor());
      assertEquals(false, noResolvedType0.isFunctionPrototypeType());
      assertEquals(false, noResolvedType0.isEnumType());
      assertEquals(false, noResolvedType1.isNoObjectType());
      assertEquals(false, noResolvedType1.isRecordType());
      assertEquals(false, noResolvedType1.isOrdinaryFunction());
      assertNull(noResolvedType1.getReferenceName());
      assertEquals(true, noResolvedType1.canBeCalled());
      assertEquals(false, noResolvedType1.isVoidType());
      assertEquals(false, noResolvedType1.isEnumElementType());
      assertEquals(false, noResolvedType1.isCheckedUnknownType());
      assertEquals(false, noResolvedType1.hasCachedValues());
      assertEquals(true, noResolvedType1.matchesObjectContext());
      assertEquals(false, noResolvedType1.isNumberValueType());
      assertEquals(0, noResolvedType1.getExtendedInterfacesCount());
      assertEquals(true, noResolvedType1.isConstructor());
      assertEquals(false, noResolvedType1.isUnionType());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType1.getPossibleToBooleanOutcomes());
      assertEquals(true, noResolvedType1.matchesNumberContext());
      assertEquals(false, noResolvedType1.isFunctionPrototypeType());
      assertEquals(true, noResolvedType1.hasInstanceType());
      assertEquals(false, noResolvedType1.isNominalType());
      assertEquals(false, noResolvedType1.isBooleanValueType());
      assertEquals(true, noResolvedType1.isNullable());
      assertEquals(false, noResolvedType1.isTemplateType());
      assertEquals(false, noResolvedType1.isInterface());
      assertEquals(false, noResolvedType1.isFunctionType());
      assertEquals(false, noResolvedType1.isEnumType());
      assertEquals(false, noResolvedType1.isResolved());
      assertEquals(false, noResolvedType1.isStringValueType());
      assertEquals(false, noResolvedType1.isNullType());
      assertNull(noResolvedType1.getTemplateTypeName());
      assertEquals(false, noResolvedType1.isAllType());
      assertEquals(2147483647, noResolvedType1.getPropertiesCount());
      assertEquals(false, noResolvedType1.isReturnTypeInferred());
      assertEquals(true, noResolvedType1.matchesStringContext());
      assertEquals(2147483647, noResolvedType1.getMaxArguments());
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertSame(noResolvedType0, noResolvedType1);
      assertSame(noResolvedType1, noResolvedType0);
      assertNotNull(noResolvedType1);
  }

  @Test
  public void test25() {}
//   @Test
//   public void test25()  throws Throwable  {
//       SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
//       assertNotNull(simpleErrorReporter0);
//       
//       boolean boolean0 = false;
//       JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0, boolean0);
//       assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
//       assertNotNull(jSTypeRegistry0);
//       
//       NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
//       assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
//       assertEquals(false, noResolvedType0.isFunctionType());
//       assertEquals(false, noResolvedType0.isAllType());
//       assertEquals(false, noResolvedType0.isReturnTypeInferred());
//       assertEquals(true, noResolvedType0.isConstructor());
//       assertEquals(false, noResolvedType0.isNullType());
//       assertNull(noResolvedType0.getReferenceName());
//       assertEquals(false, noResolvedType0.isNoObjectType());
//       assertEquals(false, noResolvedType0.isRecordType());
//       assertEquals(false, noResolvedType0.isEnumType());
//       assertEquals(false, noResolvedType0.isTemplateType());
//       assertEquals(true, noResolvedType0.matchesNumberContext());
//       assertEquals(false, noResolvedType0.isNumberValueType());
//       assertEquals(false, noResolvedType0.isBooleanValueType());
//       assertEquals(false, noResolvedType0.isResolved());
//       assertEquals(true, noResolvedType0.hasInstanceType());
//       assertEquals(false, noResolvedType0.isCheckedUnknownType());
//       assertEquals(2147483647, noResolvedType0.getMaxArguments());
//       assertEquals(false, noResolvedType0.isOrdinaryFunction());
//       assertNull(noResolvedType0.getTemplateTypeName());
//       assertEquals(2147483647, noResolvedType0.getPropertiesCount());
//       assertEquals(false, noResolvedType0.hasCachedValues());
//       assertEquals(true, noResolvedType0.canBeCalled());
//       assertEquals(false, noResolvedType0.isStringValueType());
//       assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
//       assertEquals(false, noResolvedType0.isEnumElementType());
//       assertEquals(false, noResolvedType0.isFunctionPrototypeType());
//       assertEquals(true, noResolvedType0.isNullable());
//       assertEquals(true, noResolvedType0.matchesStringContext());
//       assertEquals(false, noResolvedType0.isInterface());
//       assertEquals(false, noResolvedType0.isVoidType());
//       assertEquals(false, noResolvedType0.isNominalType());
//       assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
//       assertEquals(true, noResolvedType0.matchesObjectContext());
//       assertEquals(false, noResolvedType0.isUnionType());
//       assertNotNull(noResolvedType0);
//       
//       Node node0 = noResolvedType0.getSource();
//       assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
//       assertEquals(false, noResolvedType0.isFunctionType());
//       assertEquals(false, noResolvedType0.isAllType());
//       assertEquals(false, noResolvedType0.isReturnTypeInferred());
//       assertEquals(true, noResolvedType0.isConstructor());
//       assertEquals(false, noResolvedType0.isNullType());
//       assertNull(noResolvedType0.getReferenceName());
//       assertEquals(false, noResolvedType0.isNoObjectType());
//       assertEquals(false, noResolvedType0.isRecordType());
//       assertEquals(false, noResolvedType0.isEnumType());
//       assertEquals(false, noResolvedType0.isTemplateType());
//       assertEquals(true, noResolvedType0.matchesNumberContext());
//       assertEquals(false, noResolvedType0.isNumberValueType());
//       assertEquals(false, noResolvedType0.isBooleanValueType());
//       assertEquals(false, noResolvedType0.isResolved());
//       assertEquals(true, noResolvedType0.hasInstanceType());
//       assertEquals(false, noResolvedType0.isCheckedUnknownType());
//       assertEquals(2147483647, noResolvedType0.getMaxArguments());
//       assertEquals(false, noResolvedType0.isOrdinaryFunction());
//       assertNull(noResolvedType0.getTemplateTypeName());
//       assertEquals(2147483647, noResolvedType0.getPropertiesCount());
//       assertEquals(false, noResolvedType0.hasCachedValues());
//       assertEquals(true, noResolvedType0.canBeCalled());
//       assertEquals(false, noResolvedType0.isStringValueType());
//       assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
//       assertEquals(false, noResolvedType0.isEnumElementType());
//       assertEquals(false, noResolvedType0.isFunctionPrototypeType());
//       assertEquals(true, noResolvedType0.isNullable());
//       assertEquals(true, noResolvedType0.matchesStringContext());
//       assertEquals(false, noResolvedType0.isInterface());
//       assertEquals(false, noResolvedType0.isVoidType());
//       assertEquals(false, noResolvedType0.isNominalType());
//       assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
//       assertEquals(true, noResolvedType0.matchesObjectContext());
//       assertEquals(false, noResolvedType0.isUnionType());
//       assertNull(node0);
//       
//       String string0 = noResolvedType0.toDebugHashCodeString();
//       assertEquals("function (this:me, {9}): me", string0);
//       assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
//       assertEquals(false, noResolvedType0.isFunctionType());
//       assertEquals(false, noResolvedType0.isAllType());
//       assertEquals(false, noResolvedType0.isReturnTypeInferred());
//       assertEquals(true, noResolvedType0.isConstructor());
//       assertEquals(false, noResolvedType0.isNullType());
//       assertNull(noResolvedType0.getReferenceName());
//       assertEquals(false, noResolvedType0.isNoObjectType());
//       assertEquals(false, noResolvedType0.isRecordType());
//       assertEquals(false, noResolvedType0.isEnumType());
//       assertEquals(false, noResolvedType0.isTemplateType());
//       assertEquals(true, noResolvedType0.matchesNumberContext());
//       assertEquals(false, noResolvedType0.isNumberValueType());
//       assertEquals(false, noResolvedType0.isBooleanValueType());
//       assertEquals(false, noResolvedType0.isResolved());
//       assertEquals(true, noResolvedType0.hasInstanceType());
//       assertEquals(false, noResolvedType0.isCheckedUnknownType());
//       assertEquals(2147483647, noResolvedType0.getMaxArguments());
//       assertEquals(false, noResolvedType0.isOrdinaryFunction());
//       assertEquals(true, noResolvedType0.hasCachedValues());
//       assertNull(noResolvedType0.getTemplateTypeName());
//       assertEquals(2147483647, noResolvedType0.getPropertiesCount());
//       assertEquals(true, noResolvedType0.canBeCalled());
//       assertEquals(false, noResolvedType0.isStringValueType());
//       assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
//       assertEquals(false, noResolvedType0.isEnumElementType());
//       assertEquals(false, noResolvedType0.isFunctionPrototypeType());
//       assertEquals(true, noResolvedType0.isNullable());
//       assertEquals(true, noResolvedType0.matchesStringContext());
//       assertEquals(false, noResolvedType0.isInterface());
//       assertEquals(false, noResolvedType0.isVoidType());
//       assertEquals(false, noResolvedType0.isNominalType());
//       assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
//       assertEquals(true, noResolvedType0.matchesObjectContext());
//       assertEquals(false, noResolvedType0.isUnionType());
//       assertNotNull(string0);
//       
//       FunctionType functionType0 = noResolvedType0.getSuperClassConstructor();
//       assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
//       assertEquals(false, noResolvedType0.isFunctionType());
//       assertEquals(false, noResolvedType0.isAllType());
//       assertEquals(false, noResolvedType0.isReturnTypeInferred());
//       assertEquals(true, noResolvedType0.isConstructor());
//       assertEquals(false, noResolvedType0.isNullType());
//       assertNull(noResolvedType0.getReferenceName());
//       assertEquals(false, noResolvedType0.isNoObjectType());
//       assertEquals(false, noResolvedType0.isRecordType());
//       assertEquals(false, noResolvedType0.isEnumType());
//       assertEquals(false, noResolvedType0.isTemplateType());
//       assertEquals(true, noResolvedType0.matchesNumberContext());
//       assertEquals(false, noResolvedType0.isNumberValueType());
//       assertEquals(false, noResolvedType0.isBooleanValueType());
//       assertEquals(false, noResolvedType0.isResolved());
//       assertEquals(true, noResolvedType0.hasInstanceType());
//       assertEquals(false, noResolvedType0.isCheckedUnknownType());
//       assertEquals(2147483647, noResolvedType0.getMaxArguments());
//       assertEquals(false, noResolvedType0.isOrdinaryFunction());
//       assertEquals(true, noResolvedType0.hasCachedValues());
//       assertNull(noResolvedType0.getTemplateTypeName());
//       assertEquals(2147483647, noResolvedType0.getPropertiesCount());
//       assertEquals(true, noResolvedType0.canBeCalled());
//       assertEquals(false, noResolvedType0.isStringValueType());
//       assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
//       assertEquals(false, noResolvedType0.isEnumElementType());
//       assertEquals(false, noResolvedType0.isFunctionPrototypeType());
//       assertEquals(true, noResolvedType0.isNullable());
//       assertEquals(true, noResolvedType0.matchesStringContext());
//       assertEquals(false, noResolvedType0.isInterface());
//       assertEquals(false, noResolvedType0.isVoidType());
//       assertEquals(false, noResolvedType0.isNominalType());
//       assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
//       assertEquals(true, noResolvedType0.matchesObjectContext());
//       assertEquals(false, noResolvedType0.isUnionType());
//       assertEquals(true, functionType0.canBeCalled());
//       assertEquals(true, functionType0.hasInstanceType());
//       assertEquals(false, functionType0.isFunctionPrototypeType());
//       assertEquals(false, functionType0.isVoidType());
//       assertEquals(false, functionType0.isAllType());
//       assertEquals(false, functionType0.isNumberValueType());
//       assertEquals(false, functionType0.isInterface());
//       assertNull(functionType0.getTemplateTypeName());
//       assertEquals(0, functionType0.getExtendedInterfacesCount());
//       assertEquals(false, functionType0.isEnumElementType());
//       assertEquals(true, functionType0.isFunctionType());
//       assertEquals(false, functionType0.isResolved());
//       assertEquals(false, functionType0.isCheckedUnknownType());
//       assertEquals(false, functionType0.isNoObjectType());
//       assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
//       assertEquals(false, functionType0.isRecordType());
//       assertEquals(false, functionType0.isEnumType());
//       assertEquals(true, functionType0.hasCachedValues());
//       assertEquals(false, functionType0.isNoResolvedType());
//       assertEquals(false, functionType0.isTemplateType());
//       assertEquals(false, functionType0.isBooleanValueType());
//       assertEquals(1, functionType0.getMaxArguments());
//       assertEquals(false, functionType0.isNominalType());
//       assertEquals(false, functionType0.isOrdinaryFunction());
//       assertEquals(false, functionType0.isNoType());
//       assertEquals(false, functionType0.isUnionType());
//       assertEquals(false, functionType0.isStringValueType());
//       assertEquals(false, functionType0.isNullType());
//       assertEquals(true, functionType0.isConstructor());
//       assertEquals(false, functionType0.isReturnTypeInferred());
//       assertNotNull(functionType0);
//       
//       boolean boolean1 = functionType0.defineInferredProperty(string0, (JSType) noResolvedType0, node0);
//       assertTrue(boolean1);
//       assertFalse(boolean1 == boolean0);
//       assertFalse(boolean0 == boolean1);
//       assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
//       assertEquals(false, noResolvedType0.isFunctionType());
//       assertEquals(false, noResolvedType0.isAllType());
//       assertEquals(false, noResolvedType0.isReturnTypeInferred());
//       assertEquals(true, noResolvedType0.isConstructor());
//       assertEquals(false, noResolvedType0.isNullType());
//       assertNull(noResolvedType0.getReferenceName());
//       assertEquals(false, noResolvedType0.isNoObjectType());
//       assertEquals(false, noResolvedType0.isRecordType());
//       assertEquals(false, noResolvedType0.isEnumType());
//       assertEquals(false, noResolvedType0.isTemplateType());
//       assertEquals(true, noResolvedType0.matchesNumberContext());
//       assertEquals(false, noResolvedType0.isNumberValueType());
//       assertEquals(false, noResolvedType0.isBooleanValueType());
//       assertEquals(false, noResolvedType0.isResolved());
//       assertEquals(true, noResolvedType0.hasInstanceType());
//       assertEquals(false, noResolvedType0.isCheckedUnknownType());
//       assertEquals(2147483647, noResolvedType0.getMaxArguments());
//       assertEquals(false, noResolvedType0.isOrdinaryFunction());
//       assertEquals(true, noResolvedType0.hasCachedValues());
//       assertNull(noResolvedType0.getTemplateTypeName());
//       assertEquals(2147483647, noResolvedType0.getPropertiesCount());
//       assertEquals(true, noResolvedType0.canBeCalled());
//       assertEquals(false, noResolvedType0.isStringValueType());
//       assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
//       assertEquals(false, noResolvedType0.isEnumElementType());
//       assertEquals(false, noResolvedType0.isFunctionPrototypeType());
//       assertEquals(true, noResolvedType0.isNullable());
//       assertEquals(true, noResolvedType0.matchesStringContext());
//       assertEquals(false, noResolvedType0.isInterface());
//       assertEquals(false, noResolvedType0.isVoidType());
//       assertEquals(false, noResolvedType0.isNominalType());
//       assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
//       assertEquals(true, noResolvedType0.matchesObjectContext());
//       assertEquals(false, noResolvedType0.isUnionType());
//       assertEquals(true, functionType0.canBeCalled());
//       assertEquals(true, functionType0.hasInstanceType());
//       assertEquals(false, functionType0.isFunctionPrototypeType());
//       assertEquals(false, functionType0.isVoidType());
//       assertEquals(false, functionType0.isAllType());
//       assertEquals(false, functionType0.isNumberValueType());
//       assertEquals(false, functionType0.isInterface());
//       assertNull(functionType0.getTemplateTypeName());
//       assertEquals(0, functionType0.getExtendedInterfacesCount());
//       assertEquals(false, functionType0.isEnumElementType());
//       assertEquals(true, functionType0.isFunctionType());
//       assertEquals(false, functionType0.isResolved());
//       assertEquals(false, functionType0.isCheckedUnknownType());
//       assertEquals(false, functionType0.isNoObjectType());
//       assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
//       assertEquals(false, functionType0.isRecordType());
//       assertEquals(false, functionType0.isEnumType());
//       assertEquals(true, functionType0.hasCachedValues());
//       assertEquals(false, functionType0.isNoResolvedType());
//       assertEquals(false, functionType0.isTemplateType());
//       assertEquals(false, functionType0.isBooleanValueType());
//       assertEquals(1, functionType0.getMaxArguments());
//       assertEquals(false, functionType0.isNominalType());
//       assertEquals(false, functionType0.isOrdinaryFunction());
//       assertEquals(false, functionType0.isNoType());
//       assertEquals(false, functionType0.isUnionType());
//       assertEquals(false, functionType0.isStringValueType());
//       assertEquals(false, functionType0.isNullType());
//       assertEquals(true, functionType0.isConstructor());
//       assertEquals(false, functionType0.isReturnTypeInferred());
//   }

  @Test
  public void test26()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      boolean boolean0 = false;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0, boolean0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      assertEquals(false, noResolvedType0.isEnumType());
      assertEquals(true, noResolvedType0.matchesStringContext());
      assertEquals(2147483647, noResolvedType0.getPropertiesCount());
      assertEquals(false, noResolvedType0.hasCachedValues());
      assertEquals(false, noResolvedType0.isAllType());
      assertEquals(true, noResolvedType0.isConstructor());
      assertEquals(false, noResolvedType0.isNoObjectType());
      assertEquals(false, noResolvedType0.isTemplateType());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noResolvedType0.isUnionType());
      assertEquals(false, noResolvedType0.isStringValueType());
      assertEquals(false, noResolvedType0.isBooleanValueType());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertEquals(false, noResolvedType0.isNullType());
      assertEquals(false, noResolvedType0.isFunctionPrototypeType());
      assertEquals(false, noResolvedType0.isRecordType());
      assertEquals(false, noResolvedType0.isOrdinaryFunction());
      assertEquals(true, noResolvedType0.matchesObjectContext());
      assertEquals(false, noResolvedType0.isInterface());
      assertEquals(true, noResolvedType0.hasInstanceType());
      assertEquals(false, noResolvedType0.isFunctionType());
      assertEquals(false, noResolvedType0.isResolved());
      assertEquals(true, noResolvedType0.isNullable());
      assertNull(noResolvedType0.getTemplateTypeName());
      assertEquals(true, noResolvedType0.canBeCalled());
      assertEquals(false, noResolvedType0.isCheckedUnknownType());
      assertEquals(false, noResolvedType0.isEnumElementType());
      assertEquals(false, noResolvedType0.isReturnTypeInferred());
      assertEquals(true, noResolvedType0.matchesNumberContext());
      assertEquals(2147483647, noResolvedType0.getMaxArguments());
      assertEquals(false, noResolvedType0.isNominalType());
      assertEquals(false, noResolvedType0.isVoidType());
      assertNull(noResolvedType0.getReferenceName());
      assertEquals(false, noResolvedType0.isNumberValueType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(noResolvedType0);
      
      Stack<ObjectType> stack0 = new Stack<ObjectType>();
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertEquals(true, stack0.empty());
      assertEquals(true, stack0.isEmpty());
      assertEquals(0, stack0.size());
      assertNotNull(stack0);
      
      try {
        noResolvedType0.setExtendedInterfaces((List<ObjectType>) stack0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test27()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      boolean boolean0 = false;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0, boolean0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      assertEquals(false, noResolvedType0.isNumberValueType());
      assertEquals(true, noResolvedType0.hasInstanceType());
      assertEquals(false, noResolvedType0.isCheckedUnknownType());
      assertEquals(false, noResolvedType0.isStringValueType());
      assertEquals(false, noResolvedType0.isReturnTypeInferred());
      assertNull(noResolvedType0.getTemplateTypeName());
      assertEquals(false, noResolvedType0.isVoidType());
      assertEquals(false, noResolvedType0.hasCachedValues());
      assertEquals(false, noResolvedType0.isOrdinaryFunction());
      assertEquals(false, noResolvedType0.isAllType());
      assertEquals(false, noResolvedType0.isResolved());
      assertEquals(false, noResolvedType0.isBooleanValueType());
      assertEquals(false, noResolvedType0.isEnumElementType());
      assertEquals(true, noResolvedType0.isNullable());
      assertEquals(false, noResolvedType0.isNoObjectType());
      assertEquals(2147483647, noResolvedType0.getMaxArguments());
      assertEquals(false, noResolvedType0.isEnumType());
      assertEquals(true, noResolvedType0.canBeCalled());
      assertEquals(false, noResolvedType0.isFunctionType());
      assertNull(noResolvedType0.getReferenceName());
      assertEquals(true, noResolvedType0.matchesStringContext());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertEquals(2147483647, noResolvedType0.getPropertiesCount());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertEquals(true, noResolvedType0.matchesNumberContext());
      assertEquals(false, noResolvedType0.isRecordType());
      assertEquals(false, noResolvedType0.isInterface());
      assertEquals(false, noResolvedType0.isFunctionPrototypeType());
      assertEquals(false, noResolvedType0.isTemplateType());
      assertEquals(true, noResolvedType0.isConstructor());
      assertEquals(false, noResolvedType0.isNominalType());
      assertEquals(false, noResolvedType0.isUnionType());
      assertEquals(false, noResolvedType0.isNullType());
      assertEquals(true, noResolvedType0.matchesObjectContext());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(noResolvedType0);
      
      Iterable<ObjectType> iterable0 = noResolvedType0.getAllExtendedInterfaces();
      assertEquals(false, noResolvedType0.isNumberValueType());
      assertEquals(true, noResolvedType0.hasInstanceType());
      assertEquals(false, noResolvedType0.isCheckedUnknownType());
      assertEquals(false, noResolvedType0.isStringValueType());
      assertEquals(false, noResolvedType0.isReturnTypeInferred());
      assertNull(noResolvedType0.getTemplateTypeName());
      assertEquals(false, noResolvedType0.isVoidType());
      assertEquals(false, noResolvedType0.hasCachedValues());
      assertEquals(false, noResolvedType0.isOrdinaryFunction());
      assertEquals(false, noResolvedType0.isAllType());
      assertEquals(false, noResolvedType0.isResolved());
      assertEquals(false, noResolvedType0.isBooleanValueType());
      assertEquals(false, noResolvedType0.isEnumElementType());
      assertEquals(true, noResolvedType0.isNullable());
      assertEquals(false, noResolvedType0.isNoObjectType());
      assertEquals(2147483647, noResolvedType0.getMaxArguments());
      assertEquals(false, noResolvedType0.isEnumType());
      assertEquals(true, noResolvedType0.canBeCalled());
      assertEquals(false, noResolvedType0.isFunctionType());
      assertNull(noResolvedType0.getReferenceName());
      assertEquals(true, noResolvedType0.matchesStringContext());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertEquals(2147483647, noResolvedType0.getPropertiesCount());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertEquals(true, noResolvedType0.matchesNumberContext());
      assertEquals(false, noResolvedType0.isRecordType());
      assertEquals(false, noResolvedType0.isInterface());
      assertEquals(false, noResolvedType0.isFunctionPrototypeType());
      assertEquals(false, noResolvedType0.isTemplateType());
      assertEquals(true, noResolvedType0.isConstructor());
      assertEquals(false, noResolvedType0.isNominalType());
      assertEquals(false, noResolvedType0.isUnionType());
      assertEquals(false, noResolvedType0.isNullType());
      assertEquals(true, noResolvedType0.matchesObjectContext());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(iterable0);
  }

  @Test
  public void test28()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      boolean boolean0 = false;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0, boolean0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      assertEquals(false, noResolvedType0.isTemplateType());
      assertEquals(2147483647, noResolvedType0.getMaxArguments());
      assertEquals(true, noResolvedType0.matchesStringContext());
      assertEquals(false, noResolvedType0.isInterface());
      assertEquals(false, noResolvedType0.isNumberValueType());
      assertEquals(false, noResolvedType0.isEnumElementType());
      assertEquals(false, noResolvedType0.isBooleanValueType());
      assertEquals(true, noResolvedType0.matchesObjectContext());
      assertEquals(false, noResolvedType0.isStringValueType());
      assertEquals(true, noResolvedType0.isNullable());
      assertNull(noResolvedType0.getTemplateTypeName());
      assertEquals(true, noResolvedType0.canBeCalled());
      assertEquals(false, noResolvedType0.isResolved());
      assertEquals(true, noResolvedType0.matchesNumberContext());
      assertEquals(false, noResolvedType0.isReturnTypeInferred());
      assertEquals(false, noResolvedType0.isNoObjectType());
      assertEquals(false, noResolvedType0.isRecordType());
      assertEquals(false, noResolvedType0.isOrdinaryFunction());
      assertEquals(false, noResolvedType0.isAllType());
      assertEquals(false, noResolvedType0.isNominalType());
      assertEquals(false, noResolvedType0.isCheckedUnknownType());
      assertEquals(false, noResolvedType0.isNullType());
      assertEquals(true, noResolvedType0.hasInstanceType());
      assertEquals(true, noResolvedType0.isConstructor());
      assertEquals(false, noResolvedType0.isFunctionType());
      assertEquals(false, noResolvedType0.isFunctionPrototypeType());
      assertEquals(false, noResolvedType0.isVoidType());
      assertEquals(false, noResolvedType0.hasCachedValues());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertEquals(2147483647, noResolvedType0.getPropertiesCount());
      assertEquals(false, noResolvedType0.isEnumType());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertNull(noResolvedType0.getReferenceName());
      assertEquals(false, noResolvedType0.isUnionType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(noResolvedType0);
      
      Stack<ObjectType> stack0 = new Stack<ObjectType>();
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertEquals(true, stack0.empty());
      assertEquals(true, stack0.isEmpty());
      assertEquals(0, stack0.size());
      assertNotNull(stack0);
      
      boolean boolean1 = stack0.add((ObjectType) noResolvedType0);
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean0 == boolean1);
      assertEquals(false, noResolvedType0.isTemplateType());
      assertEquals(2147483647, noResolvedType0.getMaxArguments());
      assertEquals(true, noResolvedType0.matchesStringContext());
      assertEquals(false, noResolvedType0.isInterface());
      assertEquals(false, noResolvedType0.isNumberValueType());
      assertEquals(false, noResolvedType0.isEnumElementType());
      assertEquals(false, noResolvedType0.isBooleanValueType());
      assertEquals(true, noResolvedType0.matchesObjectContext());
      assertEquals(false, noResolvedType0.isStringValueType());
      assertEquals(true, noResolvedType0.isNullable());
      assertNull(noResolvedType0.getTemplateTypeName());
      assertEquals(true, noResolvedType0.canBeCalled());
      assertEquals(false, noResolvedType0.isResolved());
      assertEquals(true, noResolvedType0.matchesNumberContext());
      assertEquals(false, noResolvedType0.isReturnTypeInferred());
      assertEquals(false, noResolvedType0.isNoObjectType());
      assertEquals(false, noResolvedType0.isRecordType());
      assertEquals(false, noResolvedType0.isOrdinaryFunction());
      assertEquals(false, noResolvedType0.isAllType());
      assertEquals(false, noResolvedType0.isNominalType());
      assertEquals(false, noResolvedType0.isCheckedUnknownType());
      assertEquals(false, noResolvedType0.isNullType());
      assertEquals(true, noResolvedType0.hasInstanceType());
      assertEquals(true, noResolvedType0.isConstructor());
      assertEquals(false, noResolvedType0.isFunctionType());
      assertEquals(false, noResolvedType0.isFunctionPrototypeType());
      assertEquals(false, noResolvedType0.isVoidType());
      assertEquals(false, noResolvedType0.hasCachedValues());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertEquals(2147483647, noResolvedType0.getPropertiesCount());
      assertEquals(false, noResolvedType0.isEnumType());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertNull(noResolvedType0.getReferenceName());
      assertEquals(false, noResolvedType0.isUnionType());
      assertEquals(10, stack0.capacity());
      assertEquals(false, stack0.isEmpty());
      assertEquals(false, stack0.empty());
      assertEquals(1, stack0.size());
      assertEquals("[NoResolvedType]", stack0.toString());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      noResolvedType0.setImplementedInterfaces((List<ObjectType>) stack0);
      assertFalse(boolean0 == boolean1);
      assertEquals(false, noResolvedType0.isTemplateType());
      assertEquals(2147483647, noResolvedType0.getMaxArguments());
      assertEquals(true, noResolvedType0.matchesStringContext());
      assertEquals(false, noResolvedType0.isInterface());
      assertEquals(false, noResolvedType0.isNumberValueType());
      assertEquals(false, noResolvedType0.isEnumElementType());
      assertEquals(false, noResolvedType0.isBooleanValueType());
      assertEquals(true, noResolvedType0.matchesObjectContext());
      assertEquals(false, noResolvedType0.isStringValueType());
      assertEquals(true, noResolvedType0.isNullable());
      assertNull(noResolvedType0.getTemplateTypeName());
      assertEquals(true, noResolvedType0.canBeCalled());
      assertEquals(false, noResolvedType0.isResolved());
      assertEquals(true, noResolvedType0.matchesNumberContext());
      assertEquals(false, noResolvedType0.isReturnTypeInferred());
      assertEquals(false, noResolvedType0.isNoObjectType());
      assertEquals(false, noResolvedType0.isRecordType());
      assertEquals(false, noResolvedType0.isOrdinaryFunction());
      assertEquals(false, noResolvedType0.isAllType());
      assertEquals(false, noResolvedType0.isNominalType());
      assertEquals(false, noResolvedType0.isCheckedUnknownType());
      assertEquals(false, noResolvedType0.isNullType());
      assertEquals(true, noResolvedType0.hasInstanceType());
      assertEquals(true, noResolvedType0.isConstructor());
      assertEquals(false, noResolvedType0.isFunctionType());
      assertEquals(false, noResolvedType0.isFunctionPrototypeType());
      assertEquals(false, noResolvedType0.isVoidType());
      assertEquals(false, noResolvedType0.hasCachedValues());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertEquals(2147483647, noResolvedType0.getPropertiesCount());
      assertEquals(false, noResolvedType0.isEnumType());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertNull(noResolvedType0.getReferenceName());
      assertEquals(false, noResolvedType0.isUnionType());
      assertEquals(10, stack0.capacity());
      assertEquals(false, stack0.isEmpty());
      assertEquals(false, stack0.empty());
      assertEquals(1, stack0.size());
      assertEquals("[NoResolvedType]", stack0.toString());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
  }

  @Test
  public void test29()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      boolean boolean0 = true;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0, boolean0);
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      assertEquals(false, noResolvedType0.isOrdinaryFunction());
      assertEquals(false, noResolvedType0.isNoObjectType());
      assertEquals(true, noResolvedType0.isConstructor());
      assertEquals(true, noResolvedType0.canBeCalled());
      assertEquals(false, noResolvedType0.isResolved());
      assertEquals(false, noResolvedType0.isAllType());
      assertEquals(true, noResolvedType0.matchesObjectContext());
      assertEquals(false, noResolvedType0.isVoidType());
      assertEquals(false, noResolvedType0.isEnumType());
      assertNull(noResolvedType0.getTemplateTypeName());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noResolvedType0.isNullType());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertNull(noResolvedType0.getReferenceName());
      assertEquals(false, noResolvedType0.isNumberValueType());
      assertEquals(2147483647, noResolvedType0.getPropertiesCount());
      assertEquals(true, noResolvedType0.hasInstanceType());
      assertEquals(false, noResolvedType0.isRecordType());
      assertEquals(true, noResolvedType0.isNullable());
      assertEquals(false, noResolvedType0.isCheckedUnknownType());
      assertEquals(false, noResolvedType0.isNominalType());
      assertEquals(false, noResolvedType0.isBooleanValueType());
      assertEquals(false, noResolvedType0.isReturnTypeInferred());
      assertEquals(true, noResolvedType0.matchesStringContext());
      assertEquals(true, noResolvedType0.matchesNumberContext());
      assertEquals(false, noResolvedType0.hasCachedValues());
      assertEquals(false, noResolvedType0.isEnumElementType());
      assertEquals(false, noResolvedType0.isFunctionType());
      assertEquals(2147483647, noResolvedType0.getMaxArguments());
      assertEquals(false, noResolvedType0.isTemplateType());
      assertEquals(false, noResolvedType0.isStringValueType());
      assertEquals(false, noResolvedType0.isFunctionPrototypeType());
      assertEquals(false, noResolvedType0.isUnionType());
      assertEquals(false, noResolvedType0.isInterface());
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(noResolvedType0);
      
      Iterable<ObjectType> iterable0 = noResolvedType0.getAllImplementedInterfaces();
      assertEquals(false, noResolvedType0.isOrdinaryFunction());
      assertEquals(false, noResolvedType0.isNoObjectType());
      assertEquals(true, noResolvedType0.isConstructor());
      assertEquals(true, noResolvedType0.canBeCalled());
      assertEquals(false, noResolvedType0.isResolved());
      assertEquals(false, noResolvedType0.isAllType());
      assertEquals(true, noResolvedType0.matchesObjectContext());
      assertEquals(false, noResolvedType0.isVoidType());
      assertEquals(true, noResolvedType0.hasCachedValues());
      assertEquals(false, noResolvedType0.isEnumType());
      assertNull(noResolvedType0.getTemplateTypeName());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noResolvedType0.isNullType());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertNull(noResolvedType0.getReferenceName());
      assertEquals(false, noResolvedType0.isNumberValueType());
      assertEquals(2147483647, noResolvedType0.getPropertiesCount());
      assertEquals(true, noResolvedType0.hasInstanceType());
      assertEquals(false, noResolvedType0.isRecordType());
      assertEquals(true, noResolvedType0.isNullable());
      assertEquals(false, noResolvedType0.isCheckedUnknownType());
      assertEquals(false, noResolvedType0.isNominalType());
      assertEquals(false, noResolvedType0.isBooleanValueType());
      assertEquals(false, noResolvedType0.isReturnTypeInferred());
      assertEquals(true, noResolvedType0.matchesStringContext());
      assertEquals(true, noResolvedType0.matchesNumberContext());
      assertEquals(false, noResolvedType0.isEnumElementType());
      assertEquals(false, noResolvedType0.isFunctionType());
      assertEquals(2147483647, noResolvedType0.getMaxArguments());
      assertEquals(false, noResolvedType0.isTemplateType());
      assertEquals(false, noResolvedType0.isStringValueType());
      assertEquals(false, noResolvedType0.isFunctionPrototypeType());
      assertEquals(false, noResolvedType0.isUnionType());
      assertEquals(false, noResolvedType0.isInterface());
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(iterable0);
  }

  @Test
  public void test30()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      boolean boolean0 = false;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0, boolean0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      assertEquals(false, noResolvedType0.isNullType());
      assertNull(noResolvedType0.getReferenceName());
      assertEquals(true, noResolvedType0.isConstructor());
      assertEquals(false, noResolvedType0.isAllType());
      assertEquals(false, noResolvedType0.isNoObjectType());
      assertEquals(false, noResolvedType0.isNominalType());
      assertEquals(false, noResolvedType0.isRecordType());
      assertEquals(false, noResolvedType0.isOrdinaryFunction());
      assertEquals(true, noResolvedType0.matchesStringContext());
      assertNull(noResolvedType0.getTemplateTypeName());
      assertEquals(false, noResolvedType0.isEnumElementType());
      assertEquals(false, noResolvedType0.isFunctionType());
      assertEquals(2147483647, noResolvedType0.getMaxArguments());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noResolvedType0.isStringValueType());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertEquals(false, noResolvedType0.isEnumType());
      assertEquals(false, noResolvedType0.isUnionType());
      assertEquals(true, noResolvedType0.canBeCalled());
      assertEquals(false, noResolvedType0.isNumberValueType());
      assertEquals(2147483647, noResolvedType0.getPropertiesCount());
      assertEquals(false, noResolvedType0.isInterface());
      assertEquals(false, noResolvedType0.hasCachedValues());
      assertEquals(false, noResolvedType0.isFunctionPrototypeType());
      assertEquals(false, noResolvedType0.isBooleanValueType());
      assertEquals(false, noResolvedType0.isTemplateType());
      assertEquals(false, noResolvedType0.isResolved());
      assertEquals(false, noResolvedType0.isReturnTypeInferred());
      assertEquals(true, noResolvedType0.matchesNumberContext());
      assertEquals(true, noResolvedType0.isNullable());
      assertEquals(true, noResolvedType0.matchesObjectContext());
      assertEquals(true, noResolvedType0.hasInstanceType());
      assertEquals(false, noResolvedType0.isCheckedUnknownType());
      assertEquals(false, noResolvedType0.isVoidType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(noResolvedType0);
      
      PrototypeObjectType prototypeObjectType0 = (PrototypeObjectType)noResolvedType0.getPrototype();
      assertEquals(false, noResolvedType0.isNullType());
      assertNull(noResolvedType0.getReferenceName());
      assertEquals(true, noResolvedType0.isConstructor());
      assertEquals(false, noResolvedType0.isAllType());
      assertEquals(false, noResolvedType0.isNoObjectType());
      assertEquals(false, noResolvedType0.isNominalType());
      assertEquals(false, noResolvedType0.isRecordType());
      assertEquals(false, noResolvedType0.isOrdinaryFunction());
      assertEquals(true, noResolvedType0.matchesStringContext());
      assertNull(noResolvedType0.getTemplateTypeName());
      assertEquals(false, noResolvedType0.isEnumElementType());
      assertEquals(false, noResolvedType0.isFunctionType());
      assertEquals(2147483647, noResolvedType0.getMaxArguments());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noResolvedType0.isStringValueType());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertEquals(false, noResolvedType0.isEnumType());
      assertEquals(false, noResolvedType0.isUnionType());
      assertEquals(true, noResolvedType0.hasCachedValues());
      assertEquals(true, noResolvedType0.canBeCalled());
      assertEquals(false, noResolvedType0.isNumberValueType());
      assertEquals(2147483647, noResolvedType0.getPropertiesCount());
      assertEquals(false, noResolvedType0.isInterface());
      assertEquals(false, noResolvedType0.isFunctionPrototypeType());
      assertEquals(false, noResolvedType0.isBooleanValueType());
      assertEquals(false, noResolvedType0.isTemplateType());
      assertEquals(false, noResolvedType0.isResolved());
      assertEquals(false, noResolvedType0.isReturnTypeInferred());
      assertEquals(true, noResolvedType0.matchesNumberContext());
      assertEquals(true, noResolvedType0.isNullable());
      assertEquals(true, noResolvedType0.matchesObjectContext());
      assertEquals(true, noResolvedType0.hasInstanceType());
      assertEquals(false, noResolvedType0.isCheckedUnknownType());
      assertEquals(false, noResolvedType0.isVoidType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, prototypeObjectType0.isBooleanValueType());
      assertEquals(false, prototypeObjectType0.isRecordType());
      assertEquals(false, prototypeObjectType0.isNoType());
      assertEquals(false, prototypeObjectType0.isNominalType());
      assertEquals(false, prototypeObjectType0.isOrdinaryFunction());
      assertEquals(false, prototypeObjectType0.isStringValueType());
      assertEquals(false, prototypeObjectType0.isNullType());
      assertEquals(false, prototypeObjectType0.isEnumType());
      assertEquals(false, prototypeObjectType0.isNoResolvedType());
      assertEquals(false, prototypeObjectType0.isNumberValueType());
      assertEquals(false, prototypeObjectType0.isVoidType());
      assertEquals(false, prototypeObjectType0.isConstructor());
      assertEquals(false, prototypeObjectType0.isEnumElementType());
      assertEquals(false, prototypeObjectType0.isTemplateType());
      assertEquals(true, prototypeObjectType0.isFunctionPrototypeType());
      assertEquals(false, prototypeObjectType0.isUnionType());
      assertEquals(false, prototypeObjectType0.isResolved());
      assertEquals(BooleanLiteralSet.TRUE, prototypeObjectType0.getPossibleToBooleanOutcomes());
      assertEquals(false, prototypeObjectType0.isNoObjectType());
      assertEquals(false, prototypeObjectType0.isFunctionType());
      assertEquals(false, prototypeObjectType0.isAllType());
      assertEquals(false, prototypeObjectType0.isInterface());
      assertEquals(false, prototypeObjectType0.isCheckedUnknownType());
      assertNotNull(prototypeObjectType0);
      
      noResolvedType0.setPrototypeBasedOn((ObjectType) noResolvedType0);
      assertEquals(false, noResolvedType0.isNullType());
      assertNull(noResolvedType0.getReferenceName());
      assertEquals(true, noResolvedType0.isConstructor());
      assertEquals(false, noResolvedType0.isAllType());
      assertEquals(false, noResolvedType0.isNoObjectType());
      assertEquals(false, noResolvedType0.isNominalType());
      assertEquals(false, noResolvedType0.isRecordType());
      assertEquals(false, noResolvedType0.isOrdinaryFunction());
      assertEquals(true, noResolvedType0.matchesStringContext());
      assertNull(noResolvedType0.getTemplateTypeName());
      assertEquals(false, noResolvedType0.isEnumElementType());
      assertEquals(false, noResolvedType0.isFunctionType());
      assertEquals(2147483647, noResolvedType0.getMaxArguments());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noResolvedType0.isStringValueType());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertEquals(false, noResolvedType0.isEnumType());
      assertEquals(false, noResolvedType0.isUnionType());
      assertEquals(true, noResolvedType0.hasCachedValues());
      assertEquals(true, noResolvedType0.canBeCalled());
      assertEquals(false, noResolvedType0.isNumberValueType());
      assertEquals(2147483647, noResolvedType0.getPropertiesCount());
      assertEquals(false, noResolvedType0.isInterface());
      assertEquals(false, noResolvedType0.isFunctionPrototypeType());
      assertEquals(false, noResolvedType0.isBooleanValueType());
      assertEquals(false, noResolvedType0.isTemplateType());
      assertEquals(false, noResolvedType0.isResolved());
      assertEquals(false, noResolvedType0.isReturnTypeInferred());
      assertEquals(true, noResolvedType0.matchesNumberContext());
      assertEquals(true, noResolvedType0.isNullable());
      assertEquals(true, noResolvedType0.matchesObjectContext());
      assertEquals(true, noResolvedType0.hasInstanceType());
      assertEquals(false, noResolvedType0.isCheckedUnknownType());
      assertEquals(false, noResolvedType0.isVoidType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
  }

  @Test
  public void test31()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      boolean boolean0 = true;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0, boolean0);
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      String string0 = "";
      int int0 = 3754;
      NamedType namedType0 = new NamedType(jSTypeRegistry0, string0, string0, int0, int0);
      assertEquals(false, namedType0.isAllType());
      assertEquals(false, namedType0.isBooleanValueType());
      assertEquals(false, namedType0.isResolved());
      assertEquals(false, namedType0.isVoidType());
      assertEquals(false, namedType0.isRecordType());
      assertEquals(false, namedType0.isFunctionType());
      assertEquals(false, namedType0.isEnumElementType());
      assertEquals(false, namedType0.isFunctionPrototypeType());
      assertEquals(false, namedType0.isNullType());
      assertEquals(BooleanLiteralSet.TRUE, namedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, namedType0.isNumberValueType());
      assertEquals(false, namedType0.isStringValueType());
      assertEquals(false, namedType0.isUnionType());
      assertEquals(false, namedType0.isTemplateType());
      assertEquals(false, namedType0.hasCachedValues());
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(namedType0);
      
      Node node0 = namedType0.getPropertyNode(string0);
      assertEquals(false, namedType0.isAllType());
      assertEquals(false, namedType0.isBooleanValueType());
      assertEquals(false, namedType0.isResolved());
      assertEquals(false, namedType0.isVoidType());
      assertEquals(false, namedType0.isRecordType());
      assertEquals(false, namedType0.isFunctionType());
      assertEquals(false, namedType0.isEnumElementType());
      assertEquals(false, namedType0.isFunctionPrototypeType());
      assertEquals(false, namedType0.isNullType());
      assertEquals(BooleanLiteralSet.TRUE, namedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, namedType0.isNumberValueType());
      assertEquals(false, namedType0.isStringValueType());
      assertEquals(false, namedType0.isUnionType());
      assertEquals(false, namedType0.isTemplateType());
      assertEquals(false, namedType0.hasCachedValues());
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNull(node0);
      
      FunctionType functionType0 = FunctionType.forInterface(jSTypeRegistry0, string0, node0);
      assertEquals(false, functionType0.isUnionType());
      assertEquals(false, functionType0.isFunctionPrototypeType());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertEquals(true, functionType0.isFunctionType());
      assertEquals(false, functionType0.isNullType());
      assertEquals(false, functionType0.isNoResolvedType());
      assertEquals(true, functionType0.isInterface());
      assertNull(functionType0.getTemplateTypeName());
      assertEquals(true, functionType0.hasInstanceType());
      assertEquals(false, functionType0.isStringValueType());
      assertEquals(false, functionType0.isNumberValueType());
      assertEquals(false, functionType0.isVoidType());
      assertEquals(false, functionType0.isTemplateType());
      assertEquals(false, functionType0.hasCachedValues());
      assertEquals(false, functionType0.isEnumType());
      assertEquals(false, functionType0.isEnumElementType());
      assertEquals(false, functionType0.isCheckedUnknownType());
      assertEquals(false, functionType0.isConstructor());
      assertEquals(false, functionType0.isOrdinaryFunction());
      assertEquals(false, functionType0.isResolved());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, functionType0.isBooleanValueType());
      assertEquals(false, functionType0.isNoObjectType());
      assertEquals(true, functionType0.canBeCalled());
      assertEquals(false, functionType0.isAllType());
      assertEquals(0, functionType0.getMaxArguments());
      assertEquals(false, functionType0.isNoType());
      assertEquals(false, functionType0.isReturnTypeInferred());
      assertEquals(false, functionType0.isNominalType());
      assertEquals(false, functionType0.isRecordType());
      assertEquals(false, namedType0.isAllType());
      assertEquals(false, namedType0.isBooleanValueType());
      assertEquals(false, namedType0.isResolved());
      assertEquals(false, namedType0.isVoidType());
      assertEquals(false, namedType0.isRecordType());
      assertEquals(false, namedType0.isFunctionType());
      assertEquals(false, namedType0.isEnumElementType());
      assertEquals(false, namedType0.isFunctionPrototypeType());
      assertEquals(false, namedType0.isNullType());
      assertEquals(BooleanLiteralSet.TRUE, namedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, namedType0.isNumberValueType());
      assertEquals(false, namedType0.isStringValueType());
      assertEquals(false, namedType0.isUnionType());
      assertEquals(false, namedType0.isTemplateType());
      assertEquals(false, namedType0.hasCachedValues());
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(functionType0);
      
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertEquals(true, noResolvedType0.isNullable());
      assertEquals(true, noResolvedType0.matchesNumberContext());
      assertEquals(true, noResolvedType0.matchesObjectContext());
      assertEquals(2147483647, noResolvedType0.getMaxArguments());
      assertEquals(true, noResolvedType0.canBeCalled());
      assertEquals(false, noResolvedType0.isNoObjectType());
      assertEquals(false, noResolvedType0.isFunctionType());
      assertEquals(true, noResolvedType0.matchesStringContext());
      assertEquals(true, noResolvedType0.isConstructor());
      assertEquals(false, noResolvedType0.isInterface());
      assertEquals(false, noResolvedType0.isRecordType());
      assertEquals(false, noResolvedType0.isStringValueType());
      assertEquals(false, noResolvedType0.isUnionType());
      assertEquals(false, noResolvedType0.isCheckedUnknownType());
      assertEquals(false, noResolvedType0.isAllType());
      assertEquals(false, noResolvedType0.isNumberValueType());
      assertEquals(false, noResolvedType0.isTemplateType());
      assertNull(noResolvedType0.getReferenceName());
      assertEquals(false, noResolvedType0.isResolved());
      assertEquals(false, noResolvedType0.hasCachedValues());
      assertEquals(false, noResolvedType0.isReturnTypeInferred());
      assertEquals(2147483647, noResolvedType0.getPropertiesCount());
      assertNull(noResolvedType0.getTemplateTypeName());
      assertEquals(false, noResolvedType0.isNullType());
      assertEquals(false, noResolvedType0.isNominalType());
      assertEquals(false, noResolvedType0.isFunctionPrototypeType());
      assertEquals(true, noResolvedType0.hasInstanceType());
      assertEquals(false, noResolvedType0.isVoidType());
      assertEquals(false, noResolvedType0.isBooleanValueType());
      assertEquals(false, noResolvedType0.isEnumType());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertEquals(false, noResolvedType0.isEnumElementType());
      assertEquals(false, noResolvedType0.isOrdinaryFunction());
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(noResolvedType0);
      
      ArrowType arrowType0 = noResolvedType0.getInternalArrowType();
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertEquals(true, noResolvedType0.isNullable());
      assertEquals(true, noResolvedType0.matchesNumberContext());
      assertEquals(true, noResolvedType0.matchesObjectContext());
      assertEquals(2147483647, noResolvedType0.getMaxArguments());
      assertEquals(true, noResolvedType0.canBeCalled());
      assertEquals(false, noResolvedType0.isNoObjectType());
      assertEquals(false, noResolvedType0.isFunctionType());
      assertEquals(true, noResolvedType0.matchesStringContext());
      assertEquals(true, noResolvedType0.isConstructor());
      assertEquals(false, noResolvedType0.isInterface());
      assertEquals(false, noResolvedType0.isRecordType());
      assertEquals(false, noResolvedType0.isStringValueType());
      assertEquals(false, noResolvedType0.isUnionType());
      assertEquals(false, noResolvedType0.isCheckedUnknownType());
      assertEquals(false, noResolvedType0.isAllType());
      assertEquals(false, noResolvedType0.isNumberValueType());
      assertEquals(false, noResolvedType0.isTemplateType());
      assertNull(noResolvedType0.getReferenceName());
      assertEquals(false, noResolvedType0.isResolved());
      assertEquals(false, noResolvedType0.hasCachedValues());
      assertEquals(false, noResolvedType0.isReturnTypeInferred());
      assertEquals(2147483647, noResolvedType0.getPropertiesCount());
      assertNull(noResolvedType0.getTemplateTypeName());
      assertEquals(false, noResolvedType0.isNullType());
      assertEquals(false, noResolvedType0.isNominalType());
      assertEquals(false, noResolvedType0.isFunctionPrototypeType());
      assertEquals(true, noResolvedType0.hasInstanceType());
      assertEquals(false, noResolvedType0.isVoidType());
      assertEquals(false, noResolvedType0.isBooleanValueType());
      assertEquals(false, noResolvedType0.isEnumType());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertEquals(false, noResolvedType0.isEnumElementType());
      assertEquals(false, noResolvedType0.isOrdinaryFunction());
      assertEquals(false, arrowType0.isNumberValueType());
      assertEquals(false, arrowType0.isEnumElementType());
      assertEquals(false, arrowType0.isAllType());
      assertEquals(false, arrowType0.isVoidType());
      assertEquals(false, arrowType0.isNominalType());
      assertEquals(false, arrowType0.isRecordType());
      assertEquals(false, arrowType0.isEnumType());
      assertEquals(false, arrowType0.isCheckedUnknownType());
      assertEquals(false, arrowType0.isNoObjectType());
      assertEquals(false, arrowType0.isConstructor());
      assertEquals(false, arrowType0.isBooleanValueType());
      assertEquals(false, arrowType0.isNullType());
      assertEquals(false, arrowType0.isStringValueType());
      assertEquals(false, arrowType0.isNoResolvedType());
      assertEquals(false, arrowType0.isFunctionType());
      assertEquals(false, arrowType0.isOrdinaryFunction());
      assertEquals(false, arrowType0.isFunctionPrototypeType());
      assertEquals(false, arrowType0.isResolved());
      assertEquals(false, arrowType0.isInterface());
      assertEquals(false, arrowType0.isUnionType());
      assertEquals(false, arrowType0.isNoType());
      assertEquals(false, arrowType0.isTemplateType());
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(arrowType0);
      
      FunctionType functionType1 = arrowType0.toMaybeFunctionType();
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertEquals(true, noResolvedType0.isNullable());
      assertEquals(true, noResolvedType0.matchesNumberContext());
      assertEquals(true, noResolvedType0.matchesObjectContext());
      assertEquals(2147483647, noResolvedType0.getMaxArguments());
      assertEquals(true, noResolvedType0.canBeCalled());
      assertEquals(false, noResolvedType0.isNoObjectType());
      assertEquals(false, noResolvedType0.isFunctionType());
      assertEquals(true, noResolvedType0.matchesStringContext());
      assertEquals(true, noResolvedType0.isConstructor());
      assertEquals(false, noResolvedType0.isInterface());
      assertEquals(false, noResolvedType0.isRecordType());
      assertEquals(false, noResolvedType0.isStringValueType());
      assertEquals(false, noResolvedType0.isUnionType());
      assertEquals(false, noResolvedType0.isCheckedUnknownType());
      assertEquals(false, noResolvedType0.isAllType());
      assertEquals(false, noResolvedType0.isNumberValueType());
      assertEquals(false, noResolvedType0.isTemplateType());
      assertNull(noResolvedType0.getReferenceName());
      assertEquals(false, noResolvedType0.isResolved());
      assertEquals(false, noResolvedType0.hasCachedValues());
      assertEquals(false, noResolvedType0.isReturnTypeInferred());
      assertEquals(2147483647, noResolvedType0.getPropertiesCount());
      assertNull(noResolvedType0.getTemplateTypeName());
      assertEquals(false, noResolvedType0.isNullType());
      assertEquals(false, noResolvedType0.isNominalType());
      assertEquals(false, noResolvedType0.isFunctionPrototypeType());
      assertEquals(true, noResolvedType0.hasInstanceType());
      assertEquals(false, noResolvedType0.isVoidType());
      assertEquals(false, noResolvedType0.isBooleanValueType());
      assertEquals(false, noResolvedType0.isEnumType());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertEquals(false, noResolvedType0.isEnumElementType());
      assertEquals(false, noResolvedType0.isOrdinaryFunction());
      assertEquals(false, arrowType0.isNumberValueType());
      assertEquals(false, arrowType0.isEnumElementType());
      assertEquals(false, arrowType0.isAllType());
      assertEquals(false, arrowType0.isVoidType());
      assertEquals(false, arrowType0.isNominalType());
      assertEquals(false, arrowType0.isRecordType());
      assertEquals(false, arrowType0.isEnumType());
      assertEquals(false, arrowType0.isCheckedUnknownType());
      assertEquals(false, arrowType0.isNoObjectType());
      assertEquals(false, arrowType0.isConstructor());
      assertEquals(false, arrowType0.isBooleanValueType());
      assertEquals(false, arrowType0.isNullType());
      assertEquals(false, arrowType0.isStringValueType());
      assertEquals(false, arrowType0.isNoResolvedType());
      assertEquals(false, arrowType0.isFunctionType());
      assertEquals(false, arrowType0.isOrdinaryFunction());
      assertEquals(false, arrowType0.isFunctionPrototypeType());
      assertEquals(false, arrowType0.isResolved());
      assertEquals(false, arrowType0.isInterface());
      assertEquals(false, arrowType0.isUnionType());
      assertEquals(false, arrowType0.isNoType());
      assertEquals(false, arrowType0.isTemplateType());
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNull(functionType1);
      
      boolean boolean1 = functionType0.setPrototype((PrototypeObjectType) functionType1);
      assertFalse(boolean1);
      assertFalse(boolean0 == boolean1);
      assertFalse(boolean1 == boolean0);
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertEquals(true, noResolvedType0.isNullable());
      assertEquals(true, noResolvedType0.matchesNumberContext());
      assertEquals(true, noResolvedType0.matchesObjectContext());
      assertEquals(2147483647, noResolvedType0.getMaxArguments());
      assertEquals(true, noResolvedType0.canBeCalled());
      assertEquals(false, noResolvedType0.isNoObjectType());
      assertEquals(false, noResolvedType0.isFunctionType());
      assertEquals(true, noResolvedType0.matchesStringContext());
      assertEquals(true, noResolvedType0.isConstructor());
      assertEquals(false, noResolvedType0.isInterface());
      assertEquals(false, noResolvedType0.isRecordType());
      assertEquals(false, noResolvedType0.isStringValueType());
      assertEquals(false, noResolvedType0.isUnionType());
      assertEquals(false, noResolvedType0.isCheckedUnknownType());
      assertEquals(false, noResolvedType0.isAllType());
      assertEquals(false, noResolvedType0.isNumberValueType());
      assertEquals(false, noResolvedType0.isTemplateType());
      assertNull(noResolvedType0.getReferenceName());
      assertEquals(false, noResolvedType0.isResolved());
      assertEquals(false, noResolvedType0.hasCachedValues());
      assertEquals(false, noResolvedType0.isReturnTypeInferred());
      assertEquals(2147483647, noResolvedType0.getPropertiesCount());
      assertNull(noResolvedType0.getTemplateTypeName());
      assertEquals(false, noResolvedType0.isNullType());
      assertEquals(false, noResolvedType0.isNominalType());
      assertEquals(false, noResolvedType0.isFunctionPrototypeType());
      assertEquals(true, noResolvedType0.hasInstanceType());
      assertEquals(false, noResolvedType0.isVoidType());
      assertEquals(false, noResolvedType0.isBooleanValueType());
      assertEquals(false, noResolvedType0.isEnumType());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertEquals(false, noResolvedType0.isEnumElementType());
      assertEquals(false, noResolvedType0.isOrdinaryFunction());
      assertEquals(false, arrowType0.isNumberValueType());
      assertEquals(false, arrowType0.isEnumElementType());
      assertEquals(false, arrowType0.isAllType());
      assertEquals(false, arrowType0.isVoidType());
      assertEquals(false, arrowType0.isNominalType());
      assertEquals(false, arrowType0.isRecordType());
      assertEquals(false, arrowType0.isEnumType());
      assertEquals(false, arrowType0.isCheckedUnknownType());
      assertEquals(false, arrowType0.isNoObjectType());
      assertEquals(false, arrowType0.isConstructor());
      assertEquals(false, arrowType0.isBooleanValueType());
      assertEquals(false, arrowType0.isNullType());
      assertEquals(false, arrowType0.isStringValueType());
      assertEquals(false, arrowType0.isNoResolvedType());
      assertEquals(false, arrowType0.isFunctionType());
      assertEquals(false, arrowType0.isOrdinaryFunction());
      assertEquals(false, arrowType0.isFunctionPrototypeType());
      assertEquals(false, arrowType0.isResolved());
      assertEquals(false, arrowType0.isInterface());
      assertEquals(false, arrowType0.isUnionType());
      assertEquals(false, arrowType0.isNoType());
      assertEquals(false, arrowType0.isTemplateType());
      assertEquals(false, functionType0.isUnionType());
      assertEquals(false, functionType0.isFunctionPrototypeType());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertEquals(true, functionType0.isFunctionType());
      assertEquals(false, functionType0.isNullType());
      assertEquals(false, functionType0.isNoResolvedType());
      assertEquals(true, functionType0.isInterface());
      assertNull(functionType0.getTemplateTypeName());
      assertEquals(true, functionType0.hasInstanceType());
      assertEquals(false, functionType0.isStringValueType());
      assertEquals(false, functionType0.isNumberValueType());
      assertEquals(false, functionType0.isVoidType());
      assertEquals(false, functionType0.isTemplateType());
      assertEquals(false, functionType0.hasCachedValues());
      assertEquals(false, functionType0.isEnumType());
      assertEquals(false, functionType0.isEnumElementType());
      assertEquals(false, functionType0.isCheckedUnknownType());
      assertEquals(false, functionType0.isConstructor());
      assertEquals(false, functionType0.isOrdinaryFunction());
      assertEquals(false, functionType0.isResolved());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, functionType0.isBooleanValueType());
      assertEquals(false, functionType0.isNoObjectType());
      assertEquals(true, functionType0.canBeCalled());
      assertEquals(false, functionType0.isAllType());
      assertEquals(0, functionType0.getMaxArguments());
      assertEquals(false, functionType0.isNoType());
      assertEquals(false, functionType0.isReturnTypeInferred());
      assertEquals(false, functionType0.isNominalType());
      assertEquals(false, functionType0.isRecordType());
      assertEquals(false, namedType0.isAllType());
      assertEquals(false, namedType0.isBooleanValueType());
      assertEquals(false, namedType0.isResolved());
      assertEquals(false, namedType0.isVoidType());
      assertEquals(false, namedType0.isRecordType());
      assertEquals(false, namedType0.isFunctionType());
      assertEquals(false, namedType0.isEnumElementType());
      assertEquals(false, namedType0.isFunctionPrototypeType());
      assertEquals(false, namedType0.isNullType());
      assertEquals(BooleanLiteralSet.TRUE, namedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, namedType0.isNumberValueType());
      assertEquals(false, namedType0.isStringValueType());
      assertEquals(false, namedType0.isUnionType());
      assertEquals(false, namedType0.isTemplateType());
      assertEquals(false, namedType0.hasCachedValues());
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
  }

  @Test
  public void test32()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      boolean boolean0 = true;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0, boolean0);
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, noResolvedType0.isNoObjectType());
      assertEquals(true, noResolvedType0.matchesNumberContext());
      assertEquals(false, noResolvedType0.isCheckedUnknownType());
      assertNull(noResolvedType0.getReferenceName());
      assertEquals(false, noResolvedType0.isInterface());
      assertEquals(false, noResolvedType0.isFunctionPrototypeType());
      assertEquals(false, noResolvedType0.isNominalType());
      assertEquals(false, noResolvedType0.isEnumType());
      assertEquals(true, noResolvedType0.matchesObjectContext());
      assertEquals(false, noResolvedType0.isUnionType());
      assertEquals(true, noResolvedType0.matchesStringContext());
      assertEquals(false, noResolvedType0.isFunctionType());
      assertEquals(2147483647, noResolvedType0.getPropertiesCount());
      assertEquals(false, noResolvedType0.hasCachedValues());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertNull(noResolvedType0.getTemplateTypeName());
      assertEquals(true, noResolvedType0.canBeCalled());
      assertEquals(false, noResolvedType0.isReturnTypeInferred());
      assertEquals(false, noResolvedType0.isStringValueType());
      assertEquals(false, noResolvedType0.isOrdinaryFunction());
      assertEquals(true, noResolvedType0.isConstructor());
      assertEquals(false, noResolvedType0.isNullType());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noResolvedType0.isAllType());
      assertEquals(false, noResolvedType0.isResolved());
      assertEquals(false, noResolvedType0.isRecordType());
      assertEquals(false, noResolvedType0.isNumberValueType());
      assertEquals(true, noResolvedType0.hasInstanceType());
      assertEquals(false, noResolvedType0.isBooleanValueType());
      assertEquals(false, noResolvedType0.isEnumElementType());
      assertEquals(false, noResolvedType0.isVoidType());
      assertEquals(true, noResolvedType0.isNullable());
      assertEquals(false, noResolvedType0.isTemplateType());
      assertEquals(2147483647, noResolvedType0.getMaxArguments());
      assertNotNull(noResolvedType0);
      
      Set<String> set0 = noResolvedType0.getOwnPropertyNames();
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(0, set0.size());
      assertEquals(true, set0.isEmpty());
      assertEquals(false, noResolvedType0.isNoObjectType());
      assertEquals(true, noResolvedType0.matchesNumberContext());
      assertEquals(false, noResolvedType0.isCheckedUnknownType());
      assertNull(noResolvedType0.getReferenceName());
      assertEquals(false, noResolvedType0.isInterface());
      assertEquals(false, noResolvedType0.isFunctionPrototypeType());
      assertEquals(false, noResolvedType0.isNominalType());
      assertEquals(false, noResolvedType0.isEnumType());
      assertEquals(true, noResolvedType0.matchesObjectContext());
      assertEquals(false, noResolvedType0.isUnionType());
      assertEquals(true, noResolvedType0.matchesStringContext());
      assertEquals(false, noResolvedType0.isFunctionType());
      assertEquals(2147483647, noResolvedType0.getPropertiesCount());
      assertEquals(false, noResolvedType0.hasCachedValues());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertNull(noResolvedType0.getTemplateTypeName());
      assertEquals(true, noResolvedType0.canBeCalled());
      assertEquals(false, noResolvedType0.isReturnTypeInferred());
      assertEquals(false, noResolvedType0.isStringValueType());
      assertEquals(false, noResolvedType0.isOrdinaryFunction());
      assertEquals(true, noResolvedType0.isConstructor());
      assertEquals(false, noResolvedType0.isNullType());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noResolvedType0.isAllType());
      assertEquals(false, noResolvedType0.isResolved());
      assertEquals(false, noResolvedType0.isRecordType());
      assertEquals(false, noResolvedType0.isNumberValueType());
      assertEquals(true, noResolvedType0.hasInstanceType());
      assertEquals(false, noResolvedType0.isBooleanValueType());
      assertEquals(false, noResolvedType0.isEnumElementType());
      assertEquals(false, noResolvedType0.isVoidType());
      assertEquals(true, noResolvedType0.isNullable());
      assertEquals(false, noResolvedType0.isTemplateType());
      assertEquals(2147483647, noResolvedType0.getMaxArguments());
      assertNotNull(set0);
  }

  @Test
  public void test33() {}
//   @Test
//   public void test33()  throws Throwable  {
//       ErrorReporter errorReporter0 = null;
//       boolean boolean0 = false;
//       JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(errorReporter0, boolean0);
//       assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
//       assertNotNull(jSTypeRegistry0);
//       
//       String string0 = "apply";
//       ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, string0);
//       assertEquals(false, errorFunctionType0.isOrdinaryFunction());
//       assertEquals(false, errorFunctionType0.isNoType());
//       assertEquals(false, errorFunctionType0.isAllType());
//       assertEquals(false, errorFunctionType0.isCheckedUnknownType());
//       assertEquals(false, errorFunctionType0.isReturnTypeInferred());
//       assertEquals(false, errorFunctionType0.isEnumElementType());
//       assertEquals(false, errorFunctionType0.isTemplateType());
//       assertEquals(true, errorFunctionType0.canBeCalled());
//       assertEquals(false, errorFunctionType0.isFunctionPrototypeType());
//       assertEquals(false, errorFunctionType0.isInterface());
//       assertEquals(false, errorFunctionType0.isNoResolvedType());
//       assertEquals(false, errorFunctionType0.isVoidType());
//       assertEquals(false, errorFunctionType0.isNumberValueType());
//       assertEquals(false, errorFunctionType0.isUnionType());
//       assertEquals(false, errorFunctionType0.isEnumType());
//       assertEquals(false, errorFunctionType0.isBooleanValueType());
//       assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
//       assertEquals(false, errorFunctionType0.isStringValueType());
//       assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
//       assertEquals(false, errorFunctionType0.isResolved());
//       assertEquals(false, errorFunctionType0.isRecordType());
//       assertEquals(false, errorFunctionType0.isNominalType());
//       assertEquals(true, errorFunctionType0.isConstructor());
//       assertEquals(false, errorFunctionType0.isNoObjectType());
//       assertEquals(false, errorFunctionType0.hasCachedValues());
//       assertEquals(false, errorFunctionType0.isNullType());
//       assertEquals(true, errorFunctionType0.hasInstanceType());
//       assertEquals(3, errorFunctionType0.getMaxArguments());
//       assertEquals(true, errorFunctionType0.isFunctionType());
//       assertNull(errorFunctionType0.getTemplateTypeName());
//       assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
//       assertNotNull(errorFunctionType0);
//       
//       String string1 = errorFunctionType0.toDebugHashCodeString();
//       assertEquals("function (this:{93029230}, {11}, {11}, {11}): {93029230}", string1);
//       assertFalse(string0.equals((Object)string1));
//       assertFalse(string1.equals((Object)string0));
//       assertEquals(false, errorFunctionType0.isOrdinaryFunction());
//       assertEquals(false, errorFunctionType0.isNoType());
//       assertEquals(false, errorFunctionType0.isAllType());
//       assertEquals(false, errorFunctionType0.isCheckedUnknownType());
//       assertEquals(false, errorFunctionType0.isReturnTypeInferred());
//       assertEquals(false, errorFunctionType0.isEnumElementType());
//       assertEquals(false, errorFunctionType0.isTemplateType());
//       assertEquals(true, errorFunctionType0.canBeCalled());
//       assertEquals(false, errorFunctionType0.isFunctionPrototypeType());
//       assertEquals(false, errorFunctionType0.isInterface());
//       assertEquals(false, errorFunctionType0.isNoResolvedType());
//       assertEquals(false, errorFunctionType0.isVoidType());
//       assertEquals(false, errorFunctionType0.isNumberValueType());
//       assertEquals(false, errorFunctionType0.isUnionType());
//       assertEquals(false, errorFunctionType0.isEnumType());
//       assertEquals(false, errorFunctionType0.isBooleanValueType());
//       assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
//       assertEquals(false, errorFunctionType0.isStringValueType());
//       assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
//       assertEquals(false, errorFunctionType0.isResolved());
//       assertEquals(false, errorFunctionType0.isRecordType());
//       assertEquals(true, errorFunctionType0.hasCachedValues());
//       assertEquals(false, errorFunctionType0.isNominalType());
//       assertEquals(true, errorFunctionType0.isConstructor());
//       assertEquals(false, errorFunctionType0.isNoObjectType());
//       assertEquals(false, errorFunctionType0.isNullType());
//       assertEquals(true, errorFunctionType0.hasInstanceType());
//       assertEquals(3, errorFunctionType0.getMaxArguments());
//       assertEquals(true, errorFunctionType0.isFunctionType());
//       assertNull(errorFunctionType0.getTemplateTypeName());
//       assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
//       assertNotSame(string0, string1);
//       assertNotSame(string1, string0);
//       assertNotNull(string1);
//       
//       Set<String> set0 = errorFunctionType0.getOwnPropertyNames();
//       assertFalse(string0.equals((Object)string1));
//       assertEquals(false, errorFunctionType0.isOrdinaryFunction());
//       assertEquals(false, errorFunctionType0.isNoType());
//       assertEquals(false, errorFunctionType0.isAllType());
//       assertEquals(false, errorFunctionType0.isCheckedUnknownType());
//       assertEquals(false, errorFunctionType0.isReturnTypeInferred());
//       assertEquals(false, errorFunctionType0.isEnumElementType());
//       assertEquals(false, errorFunctionType0.isTemplateType());
//       assertEquals(true, errorFunctionType0.canBeCalled());
//       assertEquals(false, errorFunctionType0.isFunctionPrototypeType());
//       assertEquals(false, errorFunctionType0.isInterface());
//       assertEquals(false, errorFunctionType0.isNoResolvedType());
//       assertEquals(false, errorFunctionType0.isVoidType());
//       assertEquals(false, errorFunctionType0.isNumberValueType());
//       assertEquals(false, errorFunctionType0.isUnionType());
//       assertEquals(false, errorFunctionType0.isEnumType());
//       assertEquals(false, errorFunctionType0.isBooleanValueType());
//       assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
//       assertEquals(false, errorFunctionType0.isStringValueType());
//       assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
//       assertEquals(false, errorFunctionType0.isResolved());
//       assertEquals(false, errorFunctionType0.isRecordType());
//       assertEquals(true, errorFunctionType0.hasCachedValues());
//       assertEquals(false, errorFunctionType0.isNominalType());
//       assertEquals(true, errorFunctionType0.isConstructor());
//       assertEquals(false, errorFunctionType0.isNoObjectType());
//       assertEquals(false, errorFunctionType0.isNullType());
//       assertEquals(true, errorFunctionType0.hasInstanceType());
//       assertEquals(3, errorFunctionType0.getMaxArguments());
//       assertEquals(true, errorFunctionType0.isFunctionType());
//       assertNull(errorFunctionType0.getTemplateTypeName());
//       assertEquals(false, set0.isEmpty());
//       assertEquals(1, set0.size());
//       assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
//       assertNotSame(string0, string1);
//       assertNotNull(set0);
//   }

  @Test
  public void test34()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      boolean boolean0 = false;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0, boolean0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      String string0 = ":Frotoryp}";
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, string0);
      assertEquals(false, errorFunctionType0.isNumberValueType());
      assertEquals(false, errorFunctionType0.isResolved());
      assertEquals(false, errorFunctionType0.isTemplateType());
      assertEquals(false, errorFunctionType0.isNominalType());
      assertEquals(true, errorFunctionType0.isFunctionType());
      assertEquals(false, errorFunctionType0.isNoResolvedType());
      assertEquals(false, errorFunctionType0.isBooleanValueType());
      assertEquals(true, errorFunctionType0.isConstructor());
      assertEquals(false, errorFunctionType0.hasCachedValues());
      assertEquals(false, errorFunctionType0.isCheckedUnknownType());
      assertEquals(false, errorFunctionType0.isNoObjectType());
      assertEquals(false, errorFunctionType0.isFunctionPrototypeType());
      assertEquals(3, errorFunctionType0.getMaxArguments());
      assertEquals(false, errorFunctionType0.isEnumElementType());
      assertEquals(false, errorFunctionType0.isRecordType());
      assertEquals(false, errorFunctionType0.isAllType());
      assertEquals(true, errorFunctionType0.hasInstanceType());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertEquals(false, errorFunctionType0.isUnionType());
      assertNull(errorFunctionType0.getTemplateTypeName());
      assertEquals(false, errorFunctionType0.isInterface());
      assertEquals(true, errorFunctionType0.canBeCalled());
      assertEquals(false, errorFunctionType0.isNoType());
      assertEquals(false, errorFunctionType0.isEnumType());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, errorFunctionType0.isNullType());
      assertEquals(false, errorFunctionType0.isVoidType());
      assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      assertEquals(false, errorFunctionType0.isStringValueType());
      assertEquals(false, errorFunctionType0.isReturnTypeInferred());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(errorFunctionType0);
      
      String string1 = "prototype";
      assertNotSame(string1, string0);
      
      PrototypeObjectType prototypeObjectType0 = (PrototypeObjectType)errorFunctionType0.getPropertyType(string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertEquals(true, errorFunctionType0.hasCachedValues());
      assertEquals(false, errorFunctionType0.isNumberValueType());
      assertEquals(false, errorFunctionType0.isResolved());
      assertEquals(false, errorFunctionType0.isTemplateType());
      assertEquals(false, errorFunctionType0.isNominalType());
      assertEquals(true, errorFunctionType0.isFunctionType());
      assertEquals(false, errorFunctionType0.isNoResolvedType());
      assertEquals(false, errorFunctionType0.isBooleanValueType());
      assertEquals(true, errorFunctionType0.isConstructor());
      assertEquals(false, errorFunctionType0.isCheckedUnknownType());
      assertEquals(false, errorFunctionType0.isNoObjectType());
      assertEquals(false, errorFunctionType0.isFunctionPrototypeType());
      assertEquals(3, errorFunctionType0.getMaxArguments());
      assertEquals(false, errorFunctionType0.isEnumElementType());
      assertEquals(false, errorFunctionType0.isRecordType());
      assertEquals(false, errorFunctionType0.isAllType());
      assertEquals(true, errorFunctionType0.hasInstanceType());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertEquals(false, errorFunctionType0.isUnionType());
      assertNull(errorFunctionType0.getTemplateTypeName());
      assertEquals(false, errorFunctionType0.isInterface());
      assertEquals(true, errorFunctionType0.canBeCalled());
      assertEquals(false, errorFunctionType0.isNoType());
      assertEquals(false, errorFunctionType0.isEnumType());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, errorFunctionType0.isNullType());
      assertEquals(false, errorFunctionType0.isVoidType());
      assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      assertEquals(false, errorFunctionType0.isStringValueType());
      assertEquals(false, errorFunctionType0.isReturnTypeInferred());
      assertEquals(false, prototypeObjectType0.isBooleanValueType());
      assertEquals(false, prototypeObjectType0.isNoResolvedType());
      assertEquals(false, prototypeObjectType0.isNullType());
      assertEquals(false, prototypeObjectType0.isOrdinaryFunction());
      assertEquals(false, prototypeObjectType0.isRecordType());
      assertEquals(BooleanLiteralSet.TRUE, prototypeObjectType0.getPossibleToBooleanOutcomes());
      assertEquals(false, prototypeObjectType0.isNumberValueType());
      assertEquals(false, prototypeObjectType0.isStringValueType());
      assertEquals(false, prototypeObjectType0.isCheckedUnknownType());
      assertEquals(false, prototypeObjectType0.isConstructor());
      assertEquals(false, prototypeObjectType0.isInterface());
      assertEquals(false, prototypeObjectType0.isEnumType());
      assertEquals(false, prototypeObjectType0.isAllType());
      assertEquals(false, prototypeObjectType0.isResolved());
      assertEquals(false, prototypeObjectType0.isNoType());
      assertEquals(true, prototypeObjectType0.isFunctionPrototypeType());
      assertEquals(false, prototypeObjectType0.isEnumElementType());
      assertEquals(false, prototypeObjectType0.isNominalType());
      assertEquals(false, prototypeObjectType0.isTemplateType());
      assertEquals(false, prototypeObjectType0.isVoidType());
      assertEquals(false, prototypeObjectType0.isFunctionType());
      assertEquals(false, prototypeObjectType0.isUnionType());
      assertEquals(false, prototypeObjectType0.isNoObjectType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertNotNull(prototypeObjectType0);
  }

  @Test
  public void test35()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      boolean boolean0 = false;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0, boolean0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      NoType noType0 = new NoType(jSTypeRegistry0);
      assertEquals(true, noType0.isNullable());
      assertEquals(false, noType0.isFunctionType());
      assertEquals(true, noType0.matchesStringContext());
      assertEquals(false, noType0.isTemplateType());
      assertEquals(false, noType0.isNoObjectType());
      assertEquals(false, noType0.isEnumElementType());
      assertEquals(false, noType0.isStringValueType());
      assertEquals(2147483647, noType0.getPropertiesCount());
      assertEquals(true, noType0.isNoType());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noType0.isReturnTypeInferred());
      assertEquals(false, noType0.isNumberValueType());
      assertEquals(false, noType0.isNominalType());
      assertEquals(false, noType0.isFunctionPrototypeType());
      assertEquals(false, noType0.hasCachedValues());
      assertEquals(false, noType0.isAllType());
      assertEquals(false, noType0.isEnumType());
      assertEquals(true, noType0.canBeCalled());
      assertEquals(false, noType0.isNullType());
      assertNull(noType0.getReferenceName());
      assertEquals(false, noType0.isNoResolvedType());
      assertEquals(false, noType0.isCheckedUnknownType());
      assertEquals(false, noType0.isRecordType());
      assertEquals(false, noType0.isVoidType());
      assertEquals(true, noType0.matchesObjectContext());
      assertEquals(true, noType0.hasInstanceType());
      assertEquals(true, noType0.isConstructor());
      assertEquals("None", noType0.toString());
      assertEquals(2147483647, noType0.getMaxArguments());
      assertEquals(false, noType0.isBooleanValueType());
      assertEquals(false, noType0.isOrdinaryFunction());
      assertEquals(false, noType0.isResolved());
      assertEquals(0, noType0.getExtendedInterfacesCount());
      assertNull(noType0.getTemplateTypeName());
      assertEquals(false, noType0.isUnionType());
      assertEquals(true, noType0.matchesNumberContext());
      assertEquals(false, noType0.isInterface());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(noType0);
      
      JSType[] jSTypeArray0 = new JSType[7];
      FunctionType functionType0 = jSTypeRegistry0.createConstructorType((JSType) noType0, boolean0, jSTypeArray0);
      assertEquals(false, functionType0.isNoObjectType());
      assertEquals(false, functionType0.isFunctionPrototypeType());
      assertEquals(false, functionType0.isVoidType());
      assertEquals(7, functionType0.getMaxArguments());
      assertEquals(false, functionType0.isNoResolvedType());
      assertEquals(false, functionType0.isAllType());
      assertEquals(false, functionType0.isEnumType());
      assertEquals(false, functionType0.isUnionType());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertEquals(false, functionType0.isNoType());
      assertEquals(false, functionType0.isReturnTypeInferred());
      assertEquals(false, functionType0.isCheckedUnknownType());
      assertEquals(false, functionType0.isTemplateType());
      assertEquals(false, functionType0.isNumberValueType());
      assertEquals(false, functionType0.isRecordType());
      assertEquals(false, functionType0.isOrdinaryFunction());
      assertEquals(false, functionType0.isNominalType());
      assertEquals(false, functionType0.hasCachedValues());
      assertEquals(false, functionType0.isEnumElementType());
      assertEquals(true, functionType0.canBeCalled());
      assertEquals(true, functionType0.hasInstanceType());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, functionType0.isNullType());
      assertEquals(false, functionType0.isResolved());
      assertNull(functionType0.getTemplateTypeName());
      assertEquals(false, functionType0.isInterface());
      assertEquals(true, functionType0.isFunctionType());
      assertEquals(true, functionType0.isConstructor());
      assertEquals(false, functionType0.isStringValueType());
      assertEquals(false, functionType0.isBooleanValueType());
      assertEquals(true, noType0.isNullable());
      assertEquals(false, noType0.isFunctionType());
      assertEquals(true, noType0.matchesStringContext());
      assertEquals(false, noType0.isTemplateType());
      assertEquals(false, noType0.isNoObjectType());
      assertEquals(false, noType0.isEnumElementType());
      assertEquals(false, noType0.isStringValueType());
      assertEquals(2147483647, noType0.getPropertiesCount());
      assertEquals(true, noType0.isNoType());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noType0.isReturnTypeInferred());
      assertEquals(false, noType0.isNumberValueType());
      assertEquals(false, noType0.isNominalType());
      assertEquals(false, noType0.isFunctionPrototypeType());
      assertEquals(false, noType0.hasCachedValues());
      assertEquals(false, noType0.isAllType());
      assertEquals(false, noType0.isEnumType());
      assertEquals(true, noType0.canBeCalled());
      assertEquals(false, noType0.isNullType());
      assertNull(noType0.getReferenceName());
      assertEquals(false, noType0.isNoResolvedType());
      assertEquals(false, noType0.isCheckedUnknownType());
      assertEquals(false, noType0.isRecordType());
      assertEquals(false, noType0.isVoidType());
      assertEquals(true, noType0.matchesObjectContext());
      assertEquals(true, noType0.hasInstanceType());
      assertEquals(true, noType0.isConstructor());
      assertEquals("None", noType0.toString());
      assertEquals(2147483647, noType0.getMaxArguments());
      assertEquals(false, noType0.isBooleanValueType());
      assertEquals(false, noType0.isOrdinaryFunction());
      assertEquals(false, noType0.isResolved());
      assertEquals(0, noType0.getExtendedInterfacesCount());
      assertNull(noType0.getTemplateTypeName());
      assertEquals(false, noType0.isUnionType());
      assertEquals(true, noType0.matchesNumberContext());
      assertEquals(false, noType0.isInterface());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(functionType0);
      
      int int0 = functionType0.getMaxArguments();
      assertEquals(7, int0);
      assertEquals(false, functionType0.isNoObjectType());
      assertEquals(false, functionType0.isFunctionPrototypeType());
      assertEquals(false, functionType0.isVoidType());
      assertEquals(7, functionType0.getMaxArguments());
      assertEquals(false, functionType0.isNoResolvedType());
      assertEquals(false, functionType0.isAllType());
      assertEquals(false, functionType0.isEnumType());
      assertEquals(false, functionType0.isUnionType());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertEquals(false, functionType0.isNoType());
      assertEquals(false, functionType0.isReturnTypeInferred());
      assertEquals(false, functionType0.isCheckedUnknownType());
      assertEquals(false, functionType0.isTemplateType());
      assertEquals(false, functionType0.isNumberValueType());
      assertEquals(false, functionType0.isRecordType());
      assertEquals(false, functionType0.isOrdinaryFunction());
      assertEquals(false, functionType0.isNominalType());
      assertEquals(false, functionType0.hasCachedValues());
      assertEquals(false, functionType0.isEnumElementType());
      assertEquals(true, functionType0.canBeCalled());
      assertEquals(true, functionType0.hasInstanceType());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, functionType0.isNullType());
      assertEquals(false, functionType0.isResolved());
      assertNull(functionType0.getTemplateTypeName());
      assertEquals(false, functionType0.isInterface());
      assertEquals(true, functionType0.isFunctionType());
      assertEquals(true, functionType0.isConstructor());
      assertEquals(false, functionType0.isStringValueType());
      assertEquals(false, functionType0.isBooleanValueType());
      assertEquals(true, noType0.isNullable());
      assertEquals(false, noType0.isFunctionType());
      assertEquals(true, noType0.matchesStringContext());
      assertEquals(false, noType0.isTemplateType());
      assertEquals(false, noType0.isNoObjectType());
      assertEquals(false, noType0.isEnumElementType());
      assertEquals(false, noType0.isStringValueType());
      assertEquals(2147483647, noType0.getPropertiesCount());
      assertEquals(true, noType0.isNoType());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noType0.isReturnTypeInferred());
      assertEquals(false, noType0.isNumberValueType());
      assertEquals(false, noType0.isNominalType());
      assertEquals(false, noType0.isFunctionPrototypeType());
      assertEquals(false, noType0.hasCachedValues());
      assertEquals(false, noType0.isAllType());
      assertEquals(false, noType0.isEnumType());
      assertEquals(true, noType0.canBeCalled());
      assertEquals(false, noType0.isNullType());
      assertNull(noType0.getReferenceName());
      assertEquals(false, noType0.isNoResolvedType());
      assertEquals(false, noType0.isCheckedUnknownType());
      assertEquals(false, noType0.isRecordType());
      assertEquals(false, noType0.isVoidType());
      assertEquals(true, noType0.matchesObjectContext());
      assertEquals(true, noType0.hasInstanceType());
      assertEquals(true, noType0.isConstructor());
      assertEquals("None", noType0.toString());
      assertEquals(2147483647, noType0.getMaxArguments());
      assertEquals(false, noType0.isBooleanValueType());
      assertEquals(false, noType0.isOrdinaryFunction());
      assertEquals(false, noType0.isResolved());
      assertEquals(0, noType0.getExtendedInterfacesCount());
      assertNull(noType0.getTemplateTypeName());
      assertEquals(false, noType0.isUnionType());
      assertEquals(true, noType0.matchesNumberContext());
      assertEquals(false, noType0.isInterface());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
  }

  @Test
  public void test36()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      boolean boolean0 = true;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0, boolean0);
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      String string0 = "";
      int int0 = 3754;
      NamedType namedType0 = new NamedType(jSTypeRegistry0, string0, string0, int0, int0);
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, namedType0.isTemplateType());
      assertEquals(false, namedType0.isNullType());
      assertEquals(false, namedType0.isNumberValueType());
      assertEquals(false, namedType0.isEnumElementType());
      assertEquals(false, namedType0.isVoidType());
      assertEquals(false, namedType0.isUnionType());
      assertEquals(false, namedType0.isStringValueType());
      assertEquals(false, namedType0.isAllType());
      assertEquals(false, namedType0.hasCachedValues());
      assertEquals(false, namedType0.isBooleanValueType());
      assertEquals(false, namedType0.isFunctionPrototypeType());
      assertEquals(BooleanLiteralSet.TRUE, namedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, namedType0.isRecordType());
      assertEquals(false, namedType0.isResolved());
      assertEquals(false, namedType0.isFunctionType());
      assertNotNull(namedType0);
      
      Node node0 = namedType0.getPropertyNode(string0);
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, namedType0.isTemplateType());
      assertEquals(false, namedType0.isNullType());
      assertEquals(false, namedType0.isNumberValueType());
      assertEquals(false, namedType0.isEnumElementType());
      assertEquals(false, namedType0.isVoidType());
      assertEquals(false, namedType0.isUnionType());
      assertEquals(false, namedType0.isStringValueType());
      assertEquals(false, namedType0.isAllType());
      assertEquals(false, namedType0.hasCachedValues());
      assertEquals(false, namedType0.isBooleanValueType());
      assertEquals(false, namedType0.isFunctionPrototypeType());
      assertEquals(BooleanLiteralSet.TRUE, namedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, namedType0.isRecordType());
      assertEquals(false, namedType0.isResolved());
      assertEquals(false, namedType0.isFunctionType());
      assertNull(node0);
      
      FunctionType functionType0 = FunctionType.forInterface(jSTypeRegistry0, string0, node0);
      assertEquals(false, functionType0.isAllType());
      assertEquals(false, functionType0.isNoResolvedType());
      assertEquals(false, functionType0.isVoidType());
      assertEquals(false, functionType0.isNullType());
      assertEquals(false, functionType0.isNoObjectType());
      assertEquals(false, functionType0.isReturnTypeInferred());
      assertEquals(false, functionType0.isOrdinaryFunction());
      assertEquals(false, functionType0.isCheckedUnknownType());
      assertEquals(false, functionType0.isTemplateType());
      assertEquals(0, functionType0.getMaxArguments());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertEquals(false, functionType0.isConstructor());
      assertEquals(true, functionType0.isFunctionType());
      assertEquals(true, functionType0.isInterface());
      assertEquals(true, functionType0.hasInstanceType());
      assertEquals(false, functionType0.isNominalType());
      assertEquals(false, functionType0.isUnionType());
      assertEquals(false, functionType0.isNoType());
      assertEquals(false, functionType0.isEnumElementType());
      assertEquals(true, functionType0.canBeCalled());
      assertEquals(false, functionType0.isRecordType());
      assertEquals(false, functionType0.isFunctionPrototypeType());
      assertEquals(false, functionType0.isBooleanValueType());
      assertEquals(false, functionType0.hasCachedValues());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, functionType0.isStringValueType());
      assertEquals(false, functionType0.isResolved());
      assertEquals(false, functionType0.isEnumType());
      assertEquals(false, functionType0.isNumberValueType());
      assertNull(functionType0.getTemplateTypeName());
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, namedType0.isTemplateType());
      assertEquals(false, namedType0.isNullType());
      assertEquals(false, namedType0.isNumberValueType());
      assertEquals(false, namedType0.isEnumElementType());
      assertEquals(false, namedType0.isVoidType());
      assertEquals(false, namedType0.isUnionType());
      assertEquals(false, namedType0.isStringValueType());
      assertEquals(false, namedType0.isAllType());
      assertEquals(false, namedType0.hasCachedValues());
      assertEquals(false, namedType0.isBooleanValueType());
      assertEquals(false, namedType0.isFunctionPrototypeType());
      assertEquals(BooleanLiteralSet.TRUE, namedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, namedType0.isRecordType());
      assertEquals(false, namedType0.isResolved());
      assertEquals(false, namedType0.isFunctionType());
      assertNotNull(functionType0);
      
      int int1 = functionType0.getMaxArguments();
      assertEquals(0, int1);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertEquals(false, functionType0.isAllType());
      assertEquals(false, functionType0.isNoResolvedType());
      assertEquals(false, functionType0.isVoidType());
      assertEquals(false, functionType0.isNullType());
      assertEquals(false, functionType0.isNoObjectType());
      assertEquals(false, functionType0.isReturnTypeInferred());
      assertEquals(false, functionType0.isOrdinaryFunction());
      assertEquals(false, functionType0.isCheckedUnknownType());
      assertEquals(false, functionType0.isTemplateType());
      assertEquals(0, functionType0.getMaxArguments());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertEquals(false, functionType0.isConstructor());
      assertEquals(true, functionType0.isFunctionType());
      assertEquals(true, functionType0.isInterface());
      assertEquals(true, functionType0.hasInstanceType());
      assertEquals(false, functionType0.isNominalType());
      assertEquals(false, functionType0.isUnionType());
      assertEquals(false, functionType0.isNoType());
      assertEquals(false, functionType0.isEnumElementType());
      assertEquals(true, functionType0.canBeCalled());
      assertEquals(false, functionType0.isRecordType());
      assertEquals(false, functionType0.isFunctionPrototypeType());
      assertEquals(false, functionType0.isBooleanValueType());
      assertEquals(false, functionType0.hasCachedValues());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, functionType0.isStringValueType());
      assertEquals(false, functionType0.isResolved());
      assertEquals(false, functionType0.isEnumType());
      assertEquals(false, functionType0.isNumberValueType());
      assertNull(functionType0.getTemplateTypeName());
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, namedType0.isTemplateType());
      assertEquals(false, namedType0.isNullType());
      assertEquals(false, namedType0.isNumberValueType());
      assertEquals(false, namedType0.isEnumElementType());
      assertEquals(false, namedType0.isVoidType());
      assertEquals(false, namedType0.isUnionType());
      assertEquals(false, namedType0.isStringValueType());
      assertEquals(false, namedType0.isAllType());
      assertEquals(false, namedType0.hasCachedValues());
      assertEquals(false, namedType0.isBooleanValueType());
      assertEquals(false, namedType0.isFunctionPrototypeType());
      assertEquals(BooleanLiteralSet.TRUE, namedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, namedType0.isRecordType());
      assertEquals(false, namedType0.isResolved());
      assertEquals(false, namedType0.isFunctionType());
  }

  @Test
  public void test37()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      boolean boolean0 = false;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0, boolean0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(true, noResolvedType0.isNullable());
      assertEquals(true, noResolvedType0.hasInstanceType());
      assertNull(noResolvedType0.getTemplateTypeName());
      assertEquals(false, noResolvedType0.isResolved());
      assertEquals(false, noResolvedType0.isFunctionType());
      assertEquals(true, noResolvedType0.matchesNumberContext());
      assertEquals(false, noResolvedType0.isEnumType());
      assertEquals(false, noResolvedType0.isFunctionPrototypeType());
      assertEquals(false, noResolvedType0.isStringValueType());
      assertEquals(2147483647, noResolvedType0.getPropertiesCount());
      assertEquals(false, noResolvedType0.isTemplateType());
      assertEquals(false, noResolvedType0.isReturnTypeInferred());
      assertEquals(2147483647, noResolvedType0.getMaxArguments());
      assertEquals(false, noResolvedType0.isOrdinaryFunction());
      assertEquals(false, noResolvedType0.hasCachedValues());
      assertEquals(false, noResolvedType0.isRecordType());
      assertEquals(true, noResolvedType0.matchesObjectContext());
      assertEquals(false, noResolvedType0.isInterface());
      assertEquals(false, noResolvedType0.isNoObjectType());
      assertEquals(false, noResolvedType0.isUnionType());
      assertEquals(true, noResolvedType0.canBeCalled());
      assertEquals(true, noResolvedType0.isConstructor());
      assertEquals(false, noResolvedType0.isVoidType());
      assertEquals(false, noResolvedType0.isNullType());
      assertEquals(false, noResolvedType0.isNumberValueType());
      assertEquals(false, noResolvedType0.isBooleanValueType());
      assertEquals(false, noResolvedType0.isCheckedUnknownType());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertNull(noResolvedType0.getReferenceName());
      assertEquals(false, noResolvedType0.isNominalType());
      assertEquals(true, noResolvedType0.matchesStringContext());
      assertEquals(false, noResolvedType0.isAllType());
      assertEquals(false, noResolvedType0.isEnumElementType());
      assertNotNull(noResolvedType0);
      
      int int0 = noResolvedType0.getMaxArguments();
      assertEquals(Integer.MAX_VALUE, int0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(true, noResolvedType0.isNullable());
      assertEquals(true, noResolvedType0.hasInstanceType());
      assertNull(noResolvedType0.getTemplateTypeName());
      assertEquals(false, noResolvedType0.isResolved());
      assertEquals(false, noResolvedType0.isFunctionType());
      assertEquals(true, noResolvedType0.matchesNumberContext());
      assertEquals(false, noResolvedType0.isEnumType());
      assertEquals(false, noResolvedType0.isFunctionPrototypeType());
      assertEquals(false, noResolvedType0.isStringValueType());
      assertEquals(2147483647, noResolvedType0.getPropertiesCount());
      assertEquals(false, noResolvedType0.isTemplateType());
      assertEquals(false, noResolvedType0.isReturnTypeInferred());
      assertEquals(2147483647, noResolvedType0.getMaxArguments());
      assertEquals(false, noResolvedType0.isOrdinaryFunction());
      assertEquals(false, noResolvedType0.hasCachedValues());
      assertEquals(false, noResolvedType0.isRecordType());
      assertEquals(true, noResolvedType0.matchesObjectContext());
      assertEquals(false, noResolvedType0.isInterface());
      assertEquals(false, noResolvedType0.isNoObjectType());
      assertEquals(false, noResolvedType0.isUnionType());
      assertEquals(true, noResolvedType0.canBeCalled());
      assertEquals(true, noResolvedType0.isConstructor());
      assertEquals(false, noResolvedType0.isVoidType());
      assertEquals(false, noResolvedType0.isNullType());
      assertEquals(false, noResolvedType0.isNumberValueType());
      assertEquals(false, noResolvedType0.isBooleanValueType());
      assertEquals(false, noResolvedType0.isCheckedUnknownType());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertNull(noResolvedType0.getReferenceName());
      assertEquals(false, noResolvedType0.isNominalType());
      assertEquals(true, noResolvedType0.matchesStringContext());
      assertEquals(false, noResolvedType0.isAllType());
      assertEquals(false, noResolvedType0.isEnumElementType());
  }

  @Test
  public void test38()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      boolean boolean0 = true;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0, boolean0);
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      UnknownType unknownType0 = new UnknownType(jSTypeRegistry0, boolean0);
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(true, unknownType0.isNullable());
      assertEquals(BooleanLiteralSet.BOTH, unknownType0.getPossibleToBooleanOutcomes());
      assertEquals(true, unknownType0.matchesNumberContext());
      assertEquals(false, unknownType0.isOrdinaryFunction());
      assertEquals(false, unknownType0.isStringValueType());
      assertEquals(false, unknownType0.isVoidType());
      assertEquals(false, unknownType0.isUnionType());
      assertEquals(false, unknownType0.isInterface());
      assertEquals(false, unknownType0.hasReferenceName());
      assertEquals(false, unknownType0.isBooleanValueType());
      assertEquals(false, unknownType0.isNumberValueType());
      assertEquals(false, unknownType0.isRecordType());
      assertEquals(true, unknownType0.matchesObjectContext());
      assertEquals(false, unknownType0.isResolved());
      assertEquals(false, unknownType0.isFunctionType());
      assertEquals(false, unknownType0.isAllType());
      assertEquals(false, unknownType0.isEnumElementType());
      assertEquals(false, unknownType0.isNullType());
      assertEquals(true, unknownType0.isCheckedUnknownType());
      assertEquals(false, unknownType0.isFunctionPrototypeType());
      assertEquals(false, unknownType0.isNominalType());
      assertEquals(false, unknownType0.isEnumType());
      assertEquals(2147483647, unknownType0.getPropertiesCount());
      assertEquals(false, unknownType0.isNoObjectType());
      assertEquals(true, unknownType0.hasDisplayName());
      assertEquals(false, unknownType0.isConstructor());
      assertEquals(false, unknownType0.isNoResolvedType());
      assertEquals(false, unknownType0.isNoType());
      assertEquals("??", unknownType0.getReferenceName());
      assertEquals("Unknown", unknownType0.getDisplayName());
      assertEquals(false, unknownType0.isNativeObjectType());
      assertEquals(true, unknownType0.isUnknownType());
      assertEquals(true, unknownType0.matchesStringContext());
      assertEquals(false, unknownType0.hasCachedValues());
      assertEquals("??", unknownType0.toString());
      assertEquals(true, unknownType0.canBeCalled());
      assertEquals(false, unknownType0.isTemplateType());
      assertNotNull(unknownType0);
      
      JSType[] jSTypeArray0 = new JSType[20];
      FunctionType functionType0 = jSTypeRegistry0.createConstructorType((JSType) unknownType0, jSTypeArray0);
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(true, functionType0.canBeCalled());
      assertEquals(false, functionType0.isRecordType());
      assertEquals(false, functionType0.isOrdinaryFunction());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, functionType0.isNoObjectType());
      assertEquals(false, functionType0.isCheckedUnknownType());
      assertEquals(false, functionType0.isNominalType());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertEquals(false, functionType0.isAllType());
      assertEquals(false, functionType0.isNoType());
      assertEquals(true, functionType0.isConstructor());
      assertNull(functionType0.getTemplateTypeName());
      assertEquals(false, functionType0.hasCachedValues());
      assertEquals(false, functionType0.isEnumType());
      assertEquals(false, functionType0.isTemplateType());
      assertEquals(false, functionType0.isVoidType());
      assertEquals(false, functionType0.isNoResolvedType());
      assertEquals(false, functionType0.isNumberValueType());
      assertEquals(false, functionType0.isEnumElementType());
      assertEquals(true, functionType0.isFunctionType());
      assertEquals(true, functionType0.hasInstanceType());
      assertEquals(20, functionType0.getMaxArguments());
      assertEquals(false, functionType0.isStringValueType());
      assertEquals(false, functionType0.isFunctionPrototypeType());
      assertEquals(false, functionType0.isInterface());
      assertEquals(false, functionType0.isNullType());
      assertEquals(false, functionType0.isReturnTypeInferred());
      assertEquals(false, functionType0.isUnionType());
      assertEquals(false, functionType0.isResolved());
      assertEquals(false, functionType0.isBooleanValueType());
      assertEquals(true, unknownType0.isNullable());
      assertEquals(BooleanLiteralSet.BOTH, unknownType0.getPossibleToBooleanOutcomes());
      assertEquals(true, unknownType0.matchesNumberContext());
      assertEquals(false, unknownType0.isOrdinaryFunction());
      assertEquals(false, unknownType0.isStringValueType());
      assertEquals(false, unknownType0.isVoidType());
      assertEquals(false, unknownType0.isUnionType());
      assertEquals(false, unknownType0.isInterface());
      assertEquals(false, unknownType0.hasReferenceName());
      assertEquals(false, unknownType0.isBooleanValueType());
      assertEquals(false, unknownType0.isNumberValueType());
      assertEquals(false, unknownType0.isRecordType());
      assertEquals(true, unknownType0.matchesObjectContext());
      assertEquals(false, unknownType0.isResolved());
      assertEquals(false, unknownType0.isFunctionType());
      assertEquals(false, unknownType0.isAllType());
      assertEquals(false, unknownType0.isEnumElementType());
      assertEquals(false, unknownType0.isNullType());
      assertEquals(true, unknownType0.isCheckedUnknownType());
      assertEquals(false, unknownType0.isFunctionPrototypeType());
      assertEquals(false, unknownType0.isNominalType());
      assertEquals(false, unknownType0.isEnumType());
      assertEquals(2147483647, unknownType0.getPropertiesCount());
      assertEquals(false, unknownType0.isNoObjectType());
      assertEquals(true, unknownType0.hasDisplayName());
      assertEquals(false, unknownType0.isConstructor());
      assertEquals(false, unknownType0.isNoResolvedType());
      assertEquals(false, unknownType0.isNoType());
      assertEquals("??", unknownType0.getReferenceName());
      assertEquals("Unknown", unknownType0.getDisplayName());
      assertEquals(false, unknownType0.isNativeObjectType());
      assertEquals(true, unknownType0.isUnknownType());
      assertEquals(true, unknownType0.matchesStringContext());
      assertEquals(false, unknownType0.hasCachedValues());
      assertEquals("??", unknownType0.toString());
      assertEquals(true, unknownType0.canBeCalled());
      assertEquals(false, unknownType0.isTemplateType());
      assertNotNull(functionType0);
      
      int int0 = functionType0.getMinArguments();
      assertEquals(20, int0);
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(true, functionType0.canBeCalled());
      assertEquals(false, functionType0.isRecordType());
      assertEquals(false, functionType0.isOrdinaryFunction());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, functionType0.isNoObjectType());
      assertEquals(false, functionType0.isCheckedUnknownType());
      assertEquals(false, functionType0.isNominalType());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertEquals(false, functionType0.isAllType());
      assertEquals(false, functionType0.isNoType());
      assertEquals(true, functionType0.isConstructor());
      assertNull(functionType0.getTemplateTypeName());
      assertEquals(false, functionType0.hasCachedValues());
      assertEquals(false, functionType0.isEnumType());
      assertEquals(false, functionType0.isTemplateType());
      assertEquals(false, functionType0.isVoidType());
      assertEquals(false, functionType0.isNoResolvedType());
      assertEquals(false, functionType0.isNumberValueType());
      assertEquals(false, functionType0.isEnumElementType());
      assertEquals(true, functionType0.isFunctionType());
      assertEquals(true, functionType0.hasInstanceType());
      assertEquals(20, functionType0.getMaxArguments());
      assertEquals(false, functionType0.isStringValueType());
      assertEquals(false, functionType0.isFunctionPrototypeType());
      assertEquals(false, functionType0.isInterface());
      assertEquals(false, functionType0.isNullType());
      assertEquals(false, functionType0.isReturnTypeInferred());
      assertEquals(false, functionType0.isUnionType());
      assertEquals(false, functionType0.isResolved());
      assertEquals(false, functionType0.isBooleanValueType());
      assertEquals(true, unknownType0.isNullable());
      assertEquals(BooleanLiteralSet.BOTH, unknownType0.getPossibleToBooleanOutcomes());
      assertEquals(true, unknownType0.matchesNumberContext());
      assertEquals(false, unknownType0.isOrdinaryFunction());
      assertEquals(false, unknownType0.isStringValueType());
      assertEquals(false, unknownType0.isVoidType());
      assertEquals(false, unknownType0.isUnionType());
      assertEquals(false, unknownType0.isInterface());
      assertEquals(false, unknownType0.hasReferenceName());
      assertEquals(false, unknownType0.isBooleanValueType());
      assertEquals(false, unknownType0.isNumberValueType());
      assertEquals(false, unknownType0.isRecordType());
      assertEquals(true, unknownType0.matchesObjectContext());
      assertEquals(false, unknownType0.isResolved());
      assertEquals(false, unknownType0.isFunctionType());
      assertEquals(false, unknownType0.isAllType());
      assertEquals(false, unknownType0.isEnumElementType());
      assertEquals(false, unknownType0.isNullType());
      assertEquals(true, unknownType0.isCheckedUnknownType());
      assertEquals(false, unknownType0.isFunctionPrototypeType());
      assertEquals(false, unknownType0.isNominalType());
      assertEquals(false, unknownType0.isEnumType());
      assertEquals(2147483647, unknownType0.getPropertiesCount());
      assertEquals(false, unknownType0.isNoObjectType());
      assertEquals(true, unknownType0.hasDisplayName());
      assertEquals(false, unknownType0.isConstructor());
      assertEquals(false, unknownType0.isNoResolvedType());
      assertEquals(false, unknownType0.isNoType());
      assertEquals("??", unknownType0.getReferenceName());
      assertEquals("Unknown", unknownType0.getDisplayName());
      assertEquals(false, unknownType0.isNativeObjectType());
      assertEquals(true, unknownType0.isUnknownType());
      assertEquals(true, unknownType0.matchesStringContext());
      assertEquals(false, unknownType0.hasCachedValues());
      assertEquals("??", unknownType0.toString());
      assertEquals(true, unknownType0.canBeCalled());
      assertEquals(false, unknownType0.isTemplateType());
  }

  @Test
  public void test39()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      boolean boolean0 = false;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0, boolean0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      NoType noType0 = new NoType(jSTypeRegistry0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, noType0.isAllType());
      assertEquals(0, noType0.getExtendedInterfacesCount());
      assertEquals(false, noType0.isResolved());
      assertNull(noType0.getReferenceName());
      assertEquals(true, noType0.matchesStringContext());
      assertEquals(false, noType0.isRecordType());
      assertEquals(false, noType0.isEnumType());
      assertEquals(true, noType0.hasInstanceType());
      assertEquals(false, noType0.isEnumElementType());
      assertEquals(false, noType0.isTemplateType());
      assertEquals(false, noType0.isFunctionType());
      assertEquals(false, noType0.isFunctionPrototypeType());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noType0.isOrdinaryFunction());
      assertEquals(true, noType0.matchesNumberContext());
      assertEquals(false, noType0.isNumberValueType());
      assertEquals(2147483647, noType0.getMaxArguments());
      assertEquals(false, noType0.hasCachedValues());
      assertEquals(false, noType0.isVoidType());
      assertEquals(false, noType0.isNoObjectType());
      assertEquals(false, noType0.isCheckedUnknownType());
      assertEquals(false, noType0.isReturnTypeInferred());
      assertNull(noType0.getTemplateTypeName());
      assertEquals(false, noType0.isStringValueType());
      assertEquals(true, noType0.isNoType());
      assertEquals(true, noType0.canBeCalled());
      assertEquals(true, noType0.isConstructor());
      assertEquals(false, noType0.isNominalType());
      assertEquals(false, noType0.isNullType());
      assertEquals(false, noType0.isUnionType());
      assertEquals(false, noType0.isBooleanValueType());
      assertEquals(false, noType0.isInterface());
      assertEquals(true, noType0.isNullable());
      assertEquals("None", noType0.toString());
      assertEquals(2147483647, noType0.getPropertiesCount());
      assertEquals(true, noType0.matchesObjectContext());
      assertEquals(false, noType0.isNoResolvedType());
      assertNotNull(noType0);
      
      int int0 = noType0.getMinArguments();
      assertEquals(0, int0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, noType0.isAllType());
      assertEquals(0, noType0.getExtendedInterfacesCount());
      assertEquals(false, noType0.isResolved());
      assertNull(noType0.getReferenceName());
      assertEquals(true, noType0.matchesStringContext());
      assertEquals(false, noType0.isRecordType());
      assertEquals(false, noType0.isEnumType());
      assertEquals(true, noType0.hasInstanceType());
      assertEquals(false, noType0.isEnumElementType());
      assertEquals(false, noType0.isTemplateType());
      assertEquals(false, noType0.isFunctionType());
      assertEquals(false, noType0.isFunctionPrototypeType());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noType0.isOrdinaryFunction());
      assertEquals(true, noType0.matchesNumberContext());
      assertEquals(false, noType0.isNumberValueType());
      assertEquals(2147483647, noType0.getMaxArguments());
      assertEquals(false, noType0.hasCachedValues());
      assertEquals(false, noType0.isVoidType());
      assertEquals(false, noType0.isNoObjectType());
      assertEquals(false, noType0.isCheckedUnknownType());
      assertEquals(false, noType0.isReturnTypeInferred());
      assertNull(noType0.getTemplateTypeName());
      assertEquals(false, noType0.isStringValueType());
      assertEquals(true, noType0.isNoType());
      assertEquals(true, noType0.canBeCalled());
      assertEquals(true, noType0.isConstructor());
      assertEquals(false, noType0.isNominalType());
      assertEquals(false, noType0.isNullType());
      assertEquals(false, noType0.isUnionType());
      assertEquals(false, noType0.isBooleanValueType());
      assertEquals(false, noType0.isInterface());
      assertEquals(true, noType0.isNullable());
      assertEquals("None", noType0.toString());
      assertEquals(2147483647, noType0.getPropertiesCount());
      assertEquals(true, noType0.matchesObjectContext());
      assertEquals(false, noType0.isNoResolvedType());
  }

  @Test
  public void test40()  throws Throwable  {
      ErrorReporter errorReporter0 = null;
      boolean boolean0 = false;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(errorReporter0, boolean0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      String string0 = "apply";
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, string0);
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, errorFunctionType0.isVoidType());
      assertEquals(false, errorFunctionType0.isNoObjectType());
      assertEquals(false, errorFunctionType0.isNullType());
      assertEquals(false, errorFunctionType0.isFunctionPrototypeType());
      assertNull(errorFunctionType0.getTemplateTypeName());
      assertEquals(3, errorFunctionType0.getMaxArguments());
      assertEquals(false, errorFunctionType0.isReturnTypeInferred());
      assertEquals(false, errorFunctionType0.isNoType());
      assertEquals(false, errorFunctionType0.isInterface());
      assertEquals(false, errorFunctionType0.isTemplateType());
      assertEquals(false, errorFunctionType0.isAllType());
      assertEquals(false, errorFunctionType0.isNoResolvedType());
      assertEquals(false, errorFunctionType0.isEnumType());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertEquals(true, errorFunctionType0.isFunctionType());
      assertEquals(true, errorFunctionType0.hasInstanceType());
      assertEquals(true, errorFunctionType0.isConstructor());
      assertEquals(false, errorFunctionType0.isBooleanValueType());
      assertEquals(false, errorFunctionType0.isCheckedUnknownType());
      assertEquals(false, errorFunctionType0.hasCachedValues());
      assertEquals(false, errorFunctionType0.isRecordType());
      assertEquals(false, errorFunctionType0.isStringValueType());
      assertEquals(false, errorFunctionType0.isResolved());
      assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      assertEquals(false, errorFunctionType0.isNominalType());
      assertEquals(false, errorFunctionType0.isEnumElementType());
      assertEquals(false, errorFunctionType0.isUnionType());
      assertEquals(true, errorFunctionType0.canBeCalled());
      assertEquals(false, errorFunctionType0.isNumberValueType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(errorFunctionType0);
      
      int int0 = errorFunctionType0.getMinArguments();
      assertEquals(0, int0);
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, errorFunctionType0.isVoidType());
      assertEquals(false, errorFunctionType0.isNoObjectType());
      assertEquals(false, errorFunctionType0.isNullType());
      assertEquals(false, errorFunctionType0.isFunctionPrototypeType());
      assertNull(errorFunctionType0.getTemplateTypeName());
      assertEquals(3, errorFunctionType0.getMaxArguments());
      assertEquals(false, errorFunctionType0.isReturnTypeInferred());
      assertEquals(false, errorFunctionType0.isNoType());
      assertEquals(false, errorFunctionType0.isInterface());
      assertEquals(false, errorFunctionType0.isTemplateType());
      assertEquals(false, errorFunctionType0.isAllType());
      assertEquals(false, errorFunctionType0.isNoResolvedType());
      assertEquals(false, errorFunctionType0.isEnumType());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertEquals(true, errorFunctionType0.isFunctionType());
      assertEquals(true, errorFunctionType0.hasInstanceType());
      assertEquals(true, errorFunctionType0.isConstructor());
      assertEquals(false, errorFunctionType0.isBooleanValueType());
      assertEquals(false, errorFunctionType0.isCheckedUnknownType());
      assertEquals(false, errorFunctionType0.hasCachedValues());
      assertEquals(false, errorFunctionType0.isRecordType());
      assertEquals(false, errorFunctionType0.isStringValueType());
      assertEquals(false, errorFunctionType0.isResolved());
      assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      assertEquals(false, errorFunctionType0.isNominalType());
      assertEquals(false, errorFunctionType0.isEnumElementType());
      assertEquals(false, errorFunctionType0.isUnionType());
      assertEquals(true, errorFunctionType0.canBeCalled());
      assertEquals(false, errorFunctionType0.isNumberValueType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
  }

  @Test
  public void test41()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      int int0 = 51;
      boolean boolean0 = true;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0, boolean0);
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      String string0 = "CONSTRUCTO_";
      NamedType namedType0 = new NamedType(jSTypeRegistry0, string0, string0, int0, int0);
      assertEquals(false, namedType0.isBooleanValueType());
      assertEquals(false, namedType0.isAllType());
      assertEquals(false, namedType0.isRecordType());
      assertEquals(false, namedType0.hasCachedValues());
      assertEquals(false, namedType0.isVoidType());
      assertEquals(false, namedType0.isResolved());
      assertEquals(false, namedType0.isNumberValueType());
      assertEquals(false, namedType0.isEnumElementType());
      assertEquals(false, namedType0.isNullType());
      assertEquals(false, namedType0.isUnionType());
      assertEquals(false, namedType0.isFunctionPrototypeType());
      assertEquals(false, namedType0.isFunctionType());
      assertEquals(false, namedType0.isStringValueType());
      assertEquals(false, namedType0.isTemplateType());
      assertEquals(BooleanLiteralSet.TRUE, namedType0.getPossibleToBooleanOutcomes());
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(namedType0);
      
      Node node0 = namedType0.getPropertyNode(string0);
      assertEquals(false, namedType0.isBooleanValueType());
      assertEquals(false, namedType0.isAllType());
      assertEquals(false, namedType0.isRecordType());
      assertEquals(false, namedType0.hasCachedValues());
      assertEquals(false, namedType0.isVoidType());
      assertEquals(false, namedType0.isResolved());
      assertEquals(false, namedType0.isNumberValueType());
      assertEquals(false, namedType0.isEnumElementType());
      assertEquals(false, namedType0.isNullType());
      assertEquals(false, namedType0.isUnionType());
      assertEquals(false, namedType0.isFunctionPrototypeType());
      assertEquals(false, namedType0.isFunctionType());
      assertEquals(false, namedType0.isStringValueType());
      assertEquals(false, namedType0.isTemplateType());
      assertEquals(BooleanLiteralSet.TRUE, namedType0.getPossibleToBooleanOutcomes());
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNull(node0);
      
      FunctionType functionType0 = FunctionType.forInterface(jSTypeRegistry0, string0, node0);
      assertEquals(false, functionType0.isUnionType());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertEquals(false, functionType0.isNoObjectType());
      assertEquals(false, functionType0.isTemplateType());
      assertEquals(true, functionType0.canBeCalled());
      assertEquals(false, functionType0.isNoType());
      assertEquals(false, functionType0.isNumberValueType());
      assertEquals(false, functionType0.isReturnTypeInferred());
      assertEquals(true, functionType0.isInterface());
      assertEquals(false, functionType0.isOrdinaryFunction());
      assertEquals(false, functionType0.hasCachedValues());
      assertEquals(false, functionType0.isFunctionPrototypeType());
      assertEquals(true, functionType0.isFunctionType());
      assertEquals(0, functionType0.getMaxArguments());
      assertEquals(false, functionType0.isRecordType());
      assertEquals(false, functionType0.isBooleanValueType());
      assertEquals(false, functionType0.isNullType());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, functionType0.isConstructor());
      assertEquals(false, functionType0.isAllType());
      assertEquals(false, functionType0.isCheckedUnknownType());
      assertEquals(false, functionType0.isNominalType());
      assertEquals(false, functionType0.isResolved());
      assertEquals(false, functionType0.isEnumElementType());
      assertEquals(false, functionType0.isVoidType());
      assertEquals(false, functionType0.isStringValueType());
      assertEquals(true, functionType0.hasInstanceType());
      assertEquals(false, functionType0.isEnumType());
      assertNull(functionType0.getTemplateTypeName());
      assertEquals(false, functionType0.isNoResolvedType());
      assertEquals(false, namedType0.isBooleanValueType());
      assertEquals(false, namedType0.isAllType());
      assertEquals(false, namedType0.isRecordType());
      assertEquals(false, namedType0.hasCachedValues());
      assertEquals(false, namedType0.isVoidType());
      assertEquals(false, namedType0.isResolved());
      assertEquals(false, namedType0.isNumberValueType());
      assertEquals(false, namedType0.isEnumElementType());
      assertEquals(false, namedType0.isNullType());
      assertEquals(false, namedType0.isUnionType());
      assertEquals(false, namedType0.isFunctionPrototypeType());
      assertEquals(false, namedType0.isFunctionType());
      assertEquals(false, namedType0.isStringValueType());
      assertEquals(false, namedType0.isTemplateType());
      assertEquals(BooleanLiteralSet.TRUE, namedType0.getPossibleToBooleanOutcomes());
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(functionType0);
      
      boolean boolean1 = functionType0.hasImplementedInterfaces();
      assertFalse(boolean1);
      assertFalse(boolean0 == boolean1);
      assertFalse(boolean1 == boolean0);
      assertEquals(false, functionType0.isUnionType());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertEquals(false, functionType0.isNoObjectType());
      assertEquals(false, functionType0.isTemplateType());
      assertEquals(true, functionType0.canBeCalled());
      assertEquals(false, functionType0.isNoType());
      assertEquals(false, functionType0.isNumberValueType());
      assertEquals(false, functionType0.isReturnTypeInferred());
      assertEquals(true, functionType0.isInterface());
      assertEquals(false, functionType0.isOrdinaryFunction());
      assertEquals(false, functionType0.hasCachedValues());
      assertEquals(false, functionType0.isFunctionPrototypeType());
      assertEquals(true, functionType0.isFunctionType());
      assertEquals(0, functionType0.getMaxArguments());
      assertEquals(false, functionType0.isRecordType());
      assertEquals(false, functionType0.isBooleanValueType());
      assertEquals(false, functionType0.isNullType());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, functionType0.isConstructor());
      assertEquals(false, functionType0.isAllType());
      assertEquals(false, functionType0.isCheckedUnknownType());
      assertEquals(false, functionType0.isNominalType());
      assertEquals(false, functionType0.isResolved());
      assertEquals(false, functionType0.isEnumElementType());
      assertEquals(false, functionType0.isVoidType());
      assertEquals(false, functionType0.isStringValueType());
      assertEquals(true, functionType0.hasInstanceType());
      assertEquals(false, functionType0.isEnumType());
      assertNull(functionType0.getTemplateTypeName());
      assertEquals(false, functionType0.isNoResolvedType());
      assertEquals(false, namedType0.isBooleanValueType());
      assertEquals(false, namedType0.isAllType());
      assertEquals(false, namedType0.isRecordType());
      assertEquals(false, namedType0.hasCachedValues());
      assertEquals(false, namedType0.isVoidType());
      assertEquals(false, namedType0.isResolved());
      assertEquals(false, namedType0.isNumberValueType());
      assertEquals(false, namedType0.isEnumElementType());
      assertEquals(false, namedType0.isNullType());
      assertEquals(false, namedType0.isUnionType());
      assertEquals(false, namedType0.isFunctionPrototypeType());
      assertEquals(false, namedType0.isFunctionType());
      assertEquals(false, namedType0.isStringValueType());
      assertEquals(false, namedType0.isTemplateType());
      assertEquals(BooleanLiteralSet.TRUE, namedType0.getPossibleToBooleanOutcomes());
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
  }

  @Test
  public void test42()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      String string0 = "!WTnT0p;x%;9V";
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, string0);
      assertEquals(false, errorFunctionType0.isStringValueType());
      assertEquals(false, errorFunctionType0.isNoType());
      assertEquals(false, errorFunctionType0.isNoResolvedType());
      assertEquals(false, errorFunctionType0.isRecordType());
      assertEquals(true, errorFunctionType0.hasInstanceType());
      assertEquals(false, errorFunctionType0.isAllType());
      assertEquals(false, errorFunctionType0.isNominalType());
      assertEquals(false, errorFunctionType0.isResolved());
      assertEquals(false, errorFunctionType0.isFunctionPrototypeType());
      assertEquals(false, errorFunctionType0.isNoObjectType());
      assertNull(errorFunctionType0.getTemplateTypeName());
      assertEquals(true, errorFunctionType0.isConstructor());
      assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      assertEquals(false, errorFunctionType0.isVoidType());
      assertEquals(false, errorFunctionType0.isNumberValueType());
      assertEquals(false, errorFunctionType0.isBooleanValueType());
      assertEquals(false, errorFunctionType0.isCheckedUnknownType());
      assertEquals(false, errorFunctionType0.isReturnTypeInferred());
      assertEquals(false, errorFunctionType0.isInterface());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, errorFunctionType0.isTemplateType());
      assertEquals(false, errorFunctionType0.isEnumType());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertEquals(true, errorFunctionType0.canBeCalled());
      assertEquals(false, errorFunctionType0.isNullType());
      assertEquals(false, errorFunctionType0.isUnionType());
      assertEquals(false, errorFunctionType0.hasCachedValues());
      assertEquals(3, errorFunctionType0.getMaxArguments());
      assertEquals(false, errorFunctionType0.isEnumElementType());
      assertEquals(true, errorFunctionType0.isFunctionType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(errorFunctionType0);
      
      boolean boolean0 = true;
      JSType[] jSTypeArray0 = new JSType[3];
      jSTypeArray0[2] = (JSType) errorFunctionType0;
      assertEquals(false, jSTypeArray0[2].isResolved());
      assertEquals(false, jSTypeArray0[2].isFunctionPrototypeType());
      assertEquals(false, jSTypeArray0[2].isEnumType());
      assertEquals(false, jSTypeArray0[2].isAllType());
      assertEquals(false, jSTypeArray0[2].isEnumElementType());
      assertEquals(false, jSTypeArray0[2].isNullType());
      assertEquals(false, jSTypeArray0[2].isVoidType());
      assertEquals(false, jSTypeArray0[2].isOrdinaryFunction());
      assertEquals(false, jSTypeArray0[2].isNoResolvedType());
      assertEquals(false, jSTypeArray0[2].isNumberValueType());
      assertEquals(false, jSTypeArray0[2].isNominalType());
      assertEquals(false, jSTypeArray0[2].isBooleanValueType());
      assertEquals(false, jSTypeArray0[2].isNoType());
      assertEquals(true, jSTypeArray0[2].isConstructor());
      assertEquals(false, jSTypeArray0[2].isRecordType());
      assertEquals(false, jSTypeArray0[2].isStringValueType());
      assertEquals(false, jSTypeArray0[2].isInterface());
      assertEquals(false, jSTypeArray0[2].isUnionType());
      assertEquals(false, jSTypeArray0[2].isCheckedUnknownType());
      assertEquals(false, jSTypeArray0[2].isTemplateType());
      assertEquals(true, jSTypeArray0[2].isFunctionType());
      assertEquals(false, jSTypeArray0[2].isNoObjectType());
      assertEquals(false, errorFunctionType0.isStringValueType());
      assertEquals(false, errorFunctionType0.isNoType());
      assertEquals(false, errorFunctionType0.isNoResolvedType());
      assertEquals(false, errorFunctionType0.isRecordType());
      assertEquals(true, errorFunctionType0.hasInstanceType());
      assertEquals(false, errorFunctionType0.isAllType());
      assertEquals(false, errorFunctionType0.isNominalType());
      assertEquals(false, errorFunctionType0.isResolved());
      assertEquals(false, errorFunctionType0.isFunctionPrototypeType());
      assertEquals(false, errorFunctionType0.isNoObjectType());
      assertNull(errorFunctionType0.getTemplateTypeName());
      assertEquals(true, errorFunctionType0.isConstructor());
      assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      assertEquals(false, errorFunctionType0.isVoidType());
      assertEquals(false, errorFunctionType0.isNumberValueType());
      assertEquals(false, errorFunctionType0.isBooleanValueType());
      assertEquals(false, errorFunctionType0.isCheckedUnknownType());
      assertEquals(false, errorFunctionType0.isReturnTypeInferred());
      assertEquals(false, errorFunctionType0.isInterface());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, errorFunctionType0.isTemplateType());
      assertEquals(false, errorFunctionType0.isEnumType());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertEquals(true, errorFunctionType0.canBeCalled());
      assertEquals(false, errorFunctionType0.isNullType());
      assertEquals(false, errorFunctionType0.isUnionType());
      assertEquals(false, errorFunctionType0.hasCachedValues());
      assertEquals(3, errorFunctionType0.getMaxArguments());
      assertEquals(false, errorFunctionType0.isEnumElementType());
      assertEquals(true, errorFunctionType0.isFunctionType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeArray0[2]);
      
      FunctionType functionType0 = jSTypeRegistry0.createFunctionType((JSType) errorFunctionType0, boolean0, jSTypeArray0);
      assertNull(functionType0.getTemplateTypeName());
      assertEquals(false, functionType0.isFunctionPrototypeType());
      assertEquals(false, functionType0.hasCachedValues());
      assertEquals(false, functionType0.isRecordType());
      assertEquals(false, functionType0.isNumberValueType());
      assertEquals(false, functionType0.isConstructor());
      assertEquals(false, functionType0.isVoidType());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertEquals(true, functionType0.canBeCalled());
      assertEquals(false, functionType0.isTemplateType());
      assertEquals(false, functionType0.isNoResolvedType());
      assertEquals(false, functionType0.isNoObjectType());
      assertEquals(false, functionType0.isNullType());
      assertEquals(true, functionType0.isOrdinaryFunction());
      assertEquals(false, functionType0.isStringValueType());
      assertEquals(false, functionType0.isAllType());
      assertEquals(false, functionType0.isNoType());
      assertEquals(true, functionType0.isFunctionType());
      assertEquals(false, functionType0.isNominalType());
      assertEquals(false, functionType0.isResolved());
      assertEquals(false, functionType0.isEnumElementType());
      assertEquals(false, functionType0.isEnumType());
      assertEquals(false, functionType0.isInterface());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertEquals(false, functionType0.isCheckedUnknownType());
      assertEquals(false, functionType0.isUnionType());
      assertEquals(false, functionType0.hasInstanceType());
      assertEquals(false, functionType0.isBooleanValueType());
      assertEquals(2147483647, functionType0.getMaxArguments());
      assertEquals(false, functionType0.isReturnTypeInferred());
      assertEquals(false, errorFunctionType0.isStringValueType());
      assertEquals(false, errorFunctionType0.isNoType());
      assertEquals(false, errorFunctionType0.isNoResolvedType());
      assertEquals(false, errorFunctionType0.isRecordType());
      assertEquals(true, errorFunctionType0.hasInstanceType());
      assertEquals(false, errorFunctionType0.isAllType());
      assertEquals(false, errorFunctionType0.isNominalType());
      assertEquals(false, errorFunctionType0.isResolved());
      assertEquals(false, errorFunctionType0.isFunctionPrototypeType());
      assertEquals(false, errorFunctionType0.isNoObjectType());
      assertNull(errorFunctionType0.getTemplateTypeName());
      assertEquals(true, errorFunctionType0.isConstructor());
      assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      assertEquals(false, errorFunctionType0.isVoidType());
      assertEquals(false, errorFunctionType0.isNumberValueType());
      assertEquals(false, errorFunctionType0.isBooleanValueType());
      assertEquals(false, errorFunctionType0.isCheckedUnknownType());
      assertEquals(true, errorFunctionType0.hasCachedValues());
      assertEquals(false, errorFunctionType0.isReturnTypeInferred());
      assertEquals(false, errorFunctionType0.isInterface());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, errorFunctionType0.isTemplateType());
      assertEquals(false, errorFunctionType0.isEnumType());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertEquals(true, errorFunctionType0.canBeCalled());
      assertEquals(false, errorFunctionType0.isNullType());
      assertEquals(false, errorFunctionType0.isUnionType());
      assertEquals(3, errorFunctionType0.getMaxArguments());
      assertEquals(false, errorFunctionType0.isEnumElementType());
      assertEquals(true, errorFunctionType0.isFunctionType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(functionType0);
      
      boolean boolean1 = functionType0.isOrdinaryFunction();
      assertTrue(boolean1);
      assertTrue(boolean0 == boolean1);
      assertTrue(boolean1 == boolean0);
      assertNull(functionType0.getTemplateTypeName());
      assertEquals(false, functionType0.isFunctionPrototypeType());
      assertEquals(false, functionType0.hasCachedValues());
      assertEquals(false, functionType0.isRecordType());
      assertEquals(false, functionType0.isNumberValueType());
      assertEquals(false, functionType0.isConstructor());
      assertEquals(false, functionType0.isVoidType());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertEquals(true, functionType0.canBeCalled());
      assertEquals(false, functionType0.isTemplateType());
      assertEquals(false, functionType0.isNoResolvedType());
      assertEquals(false, functionType0.isNoObjectType());
      assertEquals(false, functionType0.isNullType());
      assertEquals(true, functionType0.isOrdinaryFunction());
      assertEquals(false, functionType0.isStringValueType());
      assertEquals(false, functionType0.isAllType());
      assertEquals(false, functionType0.isNoType());
      assertEquals(true, functionType0.isFunctionType());
      assertEquals(false, functionType0.isNominalType());
      assertEquals(false, functionType0.isResolved());
      assertEquals(false, functionType0.isEnumElementType());
      assertEquals(false, functionType0.isEnumType());
      assertEquals(false, functionType0.isInterface());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertEquals(false, functionType0.isCheckedUnknownType());
      assertEquals(false, functionType0.isUnionType());
      assertEquals(false, functionType0.hasInstanceType());
      assertEquals(false, functionType0.isBooleanValueType());
      assertEquals(2147483647, functionType0.getMaxArguments());
      assertEquals(false, functionType0.isReturnTypeInferred());
      assertEquals(false, errorFunctionType0.isStringValueType());
      assertEquals(false, errorFunctionType0.isNoType());
      assertEquals(false, errorFunctionType0.isNoResolvedType());
      assertEquals(false, errorFunctionType0.isRecordType());
      assertEquals(true, errorFunctionType0.hasInstanceType());
      assertEquals(false, errorFunctionType0.isAllType());
      assertEquals(false, errorFunctionType0.isNominalType());
      assertEquals(false, errorFunctionType0.isResolved());
      assertEquals(false, errorFunctionType0.isFunctionPrototypeType());
      assertEquals(false, errorFunctionType0.isNoObjectType());
      assertNull(errorFunctionType0.getTemplateTypeName());
      assertEquals(true, errorFunctionType0.isConstructor());
      assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      assertEquals(false, errorFunctionType0.isVoidType());
      assertEquals(false, errorFunctionType0.isNumberValueType());
      assertEquals(false, errorFunctionType0.isBooleanValueType());
      assertEquals(false, errorFunctionType0.isCheckedUnknownType());
      assertEquals(true, errorFunctionType0.hasCachedValues());
      assertEquals(false, errorFunctionType0.isReturnTypeInferred());
      assertEquals(false, errorFunctionType0.isInterface());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, errorFunctionType0.isTemplateType());
      assertEquals(false, errorFunctionType0.isEnumType());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertEquals(true, errorFunctionType0.canBeCalled());
      assertEquals(false, errorFunctionType0.isNullType());
      assertEquals(false, errorFunctionType0.isUnionType());
      assertEquals(3, errorFunctionType0.getMaxArguments());
      assertEquals(false, errorFunctionType0.isEnumElementType());
      assertEquals(true, errorFunctionType0.isFunctionType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
  }

  @Test
  public void test43()  throws Throwable  {
      ErrorReporter errorReporter0 = null;
      boolean boolean0 = false;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(errorReporter0, boolean0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      String string0 = "apply";
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, string0);
      assertEquals(true, errorFunctionType0.hasInstanceType());
      assertEquals(false, errorFunctionType0.isInterface());
      assertEquals(false, errorFunctionType0.isEnumType());
      assertEquals(false, errorFunctionType0.isStringValueType());
      assertEquals(true, errorFunctionType0.isFunctionType());
      assertEquals(false, errorFunctionType0.isVoidType());
      assertEquals(false, errorFunctionType0.isBooleanValueType());
      assertEquals(false, errorFunctionType0.isNoObjectType());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertEquals(false, errorFunctionType0.isUnionType());
      assertEquals(false, errorFunctionType0.isAllType());
      assertEquals(false, errorFunctionType0.isNominalType());
      assertEquals(false, errorFunctionType0.isFunctionPrototypeType());
      assertNull(errorFunctionType0.getTemplateTypeName());
      assertEquals(true, errorFunctionType0.isConstructor());
      assertEquals(3, errorFunctionType0.getMaxArguments());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      assertEquals(false, errorFunctionType0.isRecordType());
      assertEquals(false, errorFunctionType0.isResolved());
      assertEquals(false, errorFunctionType0.isTemplateType());
      assertEquals(true, errorFunctionType0.canBeCalled());
      assertEquals(false, errorFunctionType0.isReturnTypeInferred());
      assertEquals(false, errorFunctionType0.isNullType());
      assertEquals(false, errorFunctionType0.isEnumElementType());
      assertEquals(false, errorFunctionType0.isCheckedUnknownType());
      assertEquals(false, errorFunctionType0.isNoType());
      assertEquals(false, errorFunctionType0.isNoResolvedType());
      assertEquals(false, errorFunctionType0.hasCachedValues());
      assertEquals(false, errorFunctionType0.isNumberValueType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(errorFunctionType0);
      
      ObjectType objectType0 = errorFunctionType0.getParentScope();
      assertEquals(true, errorFunctionType0.hasInstanceType());
      assertEquals(false, errorFunctionType0.isInterface());
      assertEquals(false, errorFunctionType0.isEnumType());
      assertEquals(false, errorFunctionType0.isStringValueType());
      assertEquals(true, errorFunctionType0.isFunctionType());
      assertEquals(false, errorFunctionType0.isVoidType());
      assertEquals(false, errorFunctionType0.isBooleanValueType());
      assertEquals(false, errorFunctionType0.isNoObjectType());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertEquals(false, errorFunctionType0.isUnionType());
      assertEquals(false, errorFunctionType0.isAllType());
      assertEquals(false, errorFunctionType0.isNominalType());
      assertEquals(false, errorFunctionType0.isFunctionPrototypeType());
      assertNull(errorFunctionType0.getTemplateTypeName());
      assertEquals(true, errorFunctionType0.isConstructor());
      assertEquals(3, errorFunctionType0.getMaxArguments());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      assertEquals(false, errorFunctionType0.isRecordType());
      assertEquals(false, errorFunctionType0.isResolved());
      assertEquals(false, errorFunctionType0.isTemplateType());
      assertEquals(true, errorFunctionType0.canBeCalled());
      assertEquals(false, errorFunctionType0.isReturnTypeInferred());
      assertEquals(false, errorFunctionType0.isNullType());
      assertEquals(false, errorFunctionType0.isEnumElementType());
      assertEquals(false, errorFunctionType0.isCheckedUnknownType());
      assertEquals(false, errorFunctionType0.isNoType());
      assertEquals(false, errorFunctionType0.isNoResolvedType());
      assertEquals(false, errorFunctionType0.hasCachedValues());
      assertEquals(false, errorFunctionType0.isNumberValueType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, objectType0.isFunctionPrototypeType());
      assertEquals(false, objectType0.isNumberValueType());
      assertEquals(false, objectType0.isStringValueType());
      assertEquals(true, objectType0.isFunctionType());
      assertEquals(false, objectType0.isUnionType());
      assertEquals(true, objectType0.isConstructor());
      assertEquals(false, objectType0.isAllType());
      assertEquals(false, objectType0.isEnumElementType());
      assertEquals(false, objectType0.isCheckedUnknownType());
      assertEquals(false, objectType0.isInterface());
      assertEquals(false, objectType0.isNoType());
      assertEquals(true, objectType0.hasReferenceName());
      assertEquals(false, objectType0.isOrdinaryFunction());
      assertEquals(false, objectType0.isResolved());
      assertEquals(false, objectType0.isNoObjectType());
      assertEquals(BooleanLiteralSet.TRUE, objectType0.getPossibleToBooleanOutcomes());
      assertEquals(false, objectType0.isRecordType());
      assertEquals(false, objectType0.isEnumType());
      assertEquals(false, objectType0.isNullType());
      assertEquals(false, objectType0.isNominalType());
      assertEquals(false, objectType0.isBooleanValueType());
      assertEquals(false, objectType0.hasCachedValues());
      assertEquals(false, objectType0.isTemplateType());
      assertEquals(true, objectType0.isNativeObjectType());
      assertEquals(false, objectType0.isNoResolvedType());
      assertEquals(false, objectType0.isVoidType());
      assertNotNull(objectType0);
      
      JSType jSType0 = errorFunctionType0.getLeastSupertype((JSType) objectType0);
      assertEquals(false, jSType0.isStringValueType());
      assertEquals(false, jSType0.isNominalType());
      assertEquals(false, jSType0.isOrdinaryFunction());
      assertEquals(false, jSType0.isNoObjectType());
      assertEquals(false, jSType0.isResolved());
      assertEquals(false, jSType0.isBooleanValueType());
      assertEquals(false, jSType0.isNoType());
      assertEquals(false, jSType0.isEnumType());
      assertEquals(false, jSType0.isEnumElementType());
      assertEquals(false, jSType0.isInterface());
      assertEquals(true, jSType0.isConstructor());
      assertEquals(false, jSType0.isNumberValueType());
      assertEquals(false, jSType0.isNullType());
      assertEquals(false, jSType0.isFunctionPrototypeType());
      assertEquals(false, jSType0.isRecordType());
      assertEquals(false, jSType0.isUnionType());
      assertEquals(true, jSType0.isFunctionType());
      assertEquals(false, jSType0.isTemplateType());
      assertEquals(false, jSType0.isVoidType());
      assertEquals(false, jSType0.isAllType());
      assertEquals(false, jSType0.isCheckedUnknownType());
      assertEquals(false, jSType0.isNoResolvedType());
      assertEquals(true, errorFunctionType0.hasInstanceType());
      assertEquals(false, errorFunctionType0.isInterface());
      assertEquals(false, errorFunctionType0.isEnumType());
      assertEquals(false, errorFunctionType0.isStringValueType());
      assertEquals(true, errorFunctionType0.isFunctionType());
      assertEquals(false, errorFunctionType0.isVoidType());
      assertEquals(false, errorFunctionType0.isBooleanValueType());
      assertEquals(false, errorFunctionType0.isNoObjectType());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertEquals(false, errorFunctionType0.isUnionType());
      assertEquals(false, errorFunctionType0.isAllType());
      assertEquals(false, errorFunctionType0.isNominalType());
      assertEquals(false, errorFunctionType0.isFunctionPrototypeType());
      assertNull(errorFunctionType0.getTemplateTypeName());
      assertEquals(true, errorFunctionType0.isConstructor());
      assertEquals(3, errorFunctionType0.getMaxArguments());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      assertEquals(false, errorFunctionType0.isRecordType());
      assertEquals(false, errorFunctionType0.isResolved());
      assertEquals(false, errorFunctionType0.isTemplateType());
      assertEquals(true, errorFunctionType0.canBeCalled());
      assertEquals(false, errorFunctionType0.isReturnTypeInferred());
      assertEquals(false, errorFunctionType0.isNullType());
      assertEquals(false, errorFunctionType0.isEnumElementType());
      assertEquals(false, errorFunctionType0.isCheckedUnknownType());
      assertEquals(false, errorFunctionType0.isNoType());
      assertEquals(false, errorFunctionType0.isNoResolvedType());
      assertEquals(false, errorFunctionType0.hasCachedValues());
      assertEquals(false, errorFunctionType0.isNumberValueType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, objectType0.isFunctionPrototypeType());
      assertEquals(false, objectType0.isNumberValueType());
      assertEquals(false, objectType0.isStringValueType());
      assertEquals(true, objectType0.isFunctionType());
      assertEquals(false, objectType0.isUnionType());
      assertEquals(true, objectType0.isConstructor());
      assertEquals(false, objectType0.isAllType());
      assertEquals(false, objectType0.isEnumElementType());
      assertEquals(false, objectType0.isCheckedUnknownType());
      assertEquals(false, objectType0.isInterface());
      assertEquals(false, objectType0.isNoType());
      assertEquals(true, objectType0.hasReferenceName());
      assertEquals(false, objectType0.isOrdinaryFunction());
      assertEquals(false, objectType0.isResolved());
      assertEquals(false, objectType0.isNoObjectType());
      assertEquals(BooleanLiteralSet.TRUE, objectType0.getPossibleToBooleanOutcomes());
      assertEquals(false, objectType0.isRecordType());
      assertEquals(false, objectType0.isEnumType());
      assertEquals(false, objectType0.isNullType());
      assertEquals(false, objectType0.isNominalType());
      assertEquals(false, objectType0.isBooleanValueType());
      assertEquals(false, objectType0.hasCachedValues());
      assertEquals(false, objectType0.isTemplateType());
      assertEquals(true, objectType0.isNativeObjectType());
      assertEquals(false, objectType0.isNoResolvedType());
      assertEquals(false, objectType0.isVoidType());
      assertNotNull(jSType0);
  }

  @Test
  public void test44() {}
//   @Test
//   public void test44()  throws Throwable  {
//       SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
//       assertNotNull(simpleErrorReporter0);
//       
//       boolean boolean0 = false;
//       JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0, boolean0);
//       assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
//       assertNotNull(jSTypeRegistry0);
//       
//       NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
//       assertEquals(false, noResolvedType0.isNoObjectType());
//       assertEquals(false, noResolvedType0.isOrdinaryFunction());
//       assertEquals(true, noResolvedType0.isNullable());
//       assertEquals(false, noResolvedType0.hasCachedValues());
//       assertEquals(false, noResolvedType0.isNullType());
//       assertEquals(false, noResolvedType0.isAllType());
//       assertEquals(true, noResolvedType0.matchesObjectContext());
//       assertNull(noResolvedType0.getReferenceName());
//       assertEquals(false, noResolvedType0.isResolved());
//       assertEquals(true, noResolvedType0.hasInstanceType());
//       assertEquals(false, noResolvedType0.isNominalType());
//       assertEquals(false, noResolvedType0.isUnionType());
//       assertEquals(2147483647, noResolvedType0.getPropertiesCount());
//       assertEquals(false, noResolvedType0.isInterface());
//       assertEquals(false, noResolvedType0.isFunctionPrototypeType());
//       assertEquals(false, noResolvedType0.isRecordType());
//       assertEquals(2147483647, noResolvedType0.getMaxArguments());
//       assertEquals(true, noResolvedType0.matchesNumberContext());
//       assertEquals(false, noResolvedType0.isBooleanValueType());
//       assertEquals(false, noResolvedType0.isFunctionType());
//       assertEquals(false, noResolvedType0.isStringValueType());
//       assertEquals(true, noResolvedType0.canBeCalled());
//       assertNull(noResolvedType0.getTemplateTypeName());
//       assertEquals(false, noResolvedType0.isVoidType());
//       assertEquals(false, noResolvedType0.isEnumElementType());
//       assertEquals(false, noResolvedType0.isEnumType());
//       assertEquals(true, noResolvedType0.matchesStringContext());
//       assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
//       assertEquals(true, noResolvedType0.isConstructor());
//       assertEquals(false, noResolvedType0.isNumberValueType());
//       assertEquals(false, noResolvedType0.isCheckedUnknownType());
//       assertEquals(false, noResolvedType0.isTemplateType());
//       assertEquals(false, noResolvedType0.isReturnTypeInferred());
//       assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
//       assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
//       assertNotNull(noResolvedType0);
//       
//       Node node0 = noResolvedType0.getSource();
//       assertEquals(false, noResolvedType0.isNoObjectType());
//       assertEquals(false, noResolvedType0.isOrdinaryFunction());
//       assertEquals(true, noResolvedType0.isNullable());
//       assertEquals(false, noResolvedType0.hasCachedValues());
//       assertEquals(false, noResolvedType0.isNullType());
//       assertEquals(false, noResolvedType0.isAllType());
//       assertEquals(true, noResolvedType0.matchesObjectContext());
//       assertNull(noResolvedType0.getReferenceName());
//       assertEquals(false, noResolvedType0.isResolved());
//       assertEquals(true, noResolvedType0.hasInstanceType());
//       assertEquals(false, noResolvedType0.isNominalType());
//       assertEquals(false, noResolvedType0.isUnionType());
//       assertEquals(2147483647, noResolvedType0.getPropertiesCount());
//       assertEquals(false, noResolvedType0.isInterface());
//       assertEquals(false, noResolvedType0.isFunctionPrototypeType());
//       assertEquals(false, noResolvedType0.isRecordType());
//       assertEquals(2147483647, noResolvedType0.getMaxArguments());
//       assertEquals(true, noResolvedType0.matchesNumberContext());
//       assertEquals(false, noResolvedType0.isBooleanValueType());
//       assertEquals(false, noResolvedType0.isFunctionType());
//       assertEquals(false, noResolvedType0.isStringValueType());
//       assertEquals(true, noResolvedType0.canBeCalled());
//       assertNull(noResolvedType0.getTemplateTypeName());
//       assertEquals(false, noResolvedType0.isVoidType());
//       assertEquals(false, noResolvedType0.isEnumElementType());
//       assertEquals(false, noResolvedType0.isEnumType());
//       assertEquals(true, noResolvedType0.matchesStringContext());
//       assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
//       assertEquals(true, noResolvedType0.isConstructor());
//       assertEquals(false, noResolvedType0.isNumberValueType());
//       assertEquals(false, noResolvedType0.isCheckedUnknownType());
//       assertEquals(false, noResolvedType0.isTemplateType());
//       assertEquals(false, noResolvedType0.isReturnTypeInferred());
//       assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
//       assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
//       assertNull(node0);
//       
//       String string0 = noResolvedType0.toDebugHashCodeString();
//       assertEquals("function (this:me, {9}): me", string0);
//       assertEquals(true, noResolvedType0.hasCachedValues());
//       assertEquals(false, noResolvedType0.isNoObjectType());
//       assertEquals(false, noResolvedType0.isOrdinaryFunction());
//       assertEquals(true, noResolvedType0.isNullable());
//       assertEquals(false, noResolvedType0.isNullType());
//       assertEquals(false, noResolvedType0.isAllType());
//       assertEquals(true, noResolvedType0.matchesObjectContext());
//       assertNull(noResolvedType0.getReferenceName());
//       assertEquals(false, noResolvedType0.isResolved());
//       assertEquals(true, noResolvedType0.hasInstanceType());
//       assertEquals(false, noResolvedType0.isNominalType());
//       assertEquals(false, noResolvedType0.isUnionType());
//       assertEquals(2147483647, noResolvedType0.getPropertiesCount());
//       assertEquals(false, noResolvedType0.isInterface());
//       assertEquals(false, noResolvedType0.isFunctionPrototypeType());
//       assertEquals(false, noResolvedType0.isRecordType());
//       assertEquals(2147483647, noResolvedType0.getMaxArguments());
//       assertEquals(true, noResolvedType0.matchesNumberContext());
//       assertEquals(false, noResolvedType0.isBooleanValueType());
//       assertEquals(false, noResolvedType0.isFunctionType());
//       assertEquals(false, noResolvedType0.isStringValueType());
//       assertEquals(true, noResolvedType0.canBeCalled());
//       assertNull(noResolvedType0.getTemplateTypeName());
//       assertEquals(false, noResolvedType0.isVoidType());
//       assertEquals(false, noResolvedType0.isEnumElementType());
//       assertEquals(false, noResolvedType0.isEnumType());
//       assertEquals(true, noResolvedType0.matchesStringContext());
//       assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
//       assertEquals(true, noResolvedType0.isConstructor());
//       assertEquals(false, noResolvedType0.isNumberValueType());
//       assertEquals(false, noResolvedType0.isCheckedUnknownType());
//       assertEquals(false, noResolvedType0.isTemplateType());
//       assertEquals(false, noResolvedType0.isReturnTypeInferred());
//       assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
//       assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
//       assertNotNull(string0);
//       
//       FunctionType functionType0 = jSTypeRegistry0.createInterfaceType(string0, node0);
//       assertEquals(false, functionType0.isUnionType());
//       assertEquals(false, functionType0.isNominalType());
//       assertEquals(false, functionType0.isFunctionPrototypeType());
//       assertEquals(false, functionType0.isOrdinaryFunction());
//       assertEquals(false, functionType0.isStringValueType());
//       assertEquals(false, functionType0.isResolved());
//       assertEquals(false, functionType0.isAllType());
//       assertEquals(false, functionType0.isReturnTypeInferred());
//       assertEquals(false, functionType0.isVoidType());
//       assertEquals(false, functionType0.isNoType());
//       assertEquals(false, functionType0.isEnumType());
//       assertEquals(false, functionType0.isNumberValueType());
//       assertNull(functionType0.getTemplateTypeName());
//       assertEquals(true, functionType0.canBeCalled());
//       assertEquals(false, functionType0.isNullType());
//       assertEquals(false, functionType0.isNoResolvedType());
//       assertEquals(true, functionType0.isFunctionType());
//       assertEquals(false, functionType0.isConstructor());
//       assertEquals(false, functionType0.isCheckedUnknownType());
//       assertEquals(false, functionType0.isEnumElementType());
//       assertEquals(false, functionType0.hasCachedValues());
//       assertEquals(0, functionType0.getMaxArguments());
//       assertEquals(0, functionType0.getExtendedInterfacesCount());
//       assertEquals(false, functionType0.isBooleanValueType());
//       assertEquals(false, functionType0.isRecordType());
//       assertEquals(false, functionType0.isNoObjectType());
//       assertEquals(true, functionType0.isInterface());
//       assertEquals(true, functionType0.hasInstanceType());
//       assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
//       assertEquals(false, functionType0.isTemplateType());
//       assertEquals(true, noResolvedType0.hasCachedValues());
//       assertEquals(false, noResolvedType0.isNoObjectType());
//       assertEquals(false, noResolvedType0.isOrdinaryFunction());
//       assertEquals(true, noResolvedType0.isNullable());
//       assertEquals(false, noResolvedType0.isNullType());
//       assertEquals(false, noResolvedType0.isAllType());
//       assertEquals(true, noResolvedType0.matchesObjectContext());
//       assertNull(noResolvedType0.getReferenceName());
//       assertEquals(false, noResolvedType0.isResolved());
//       assertEquals(true, noResolvedType0.hasInstanceType());
//       assertEquals(false, noResolvedType0.isNominalType());
//       assertEquals(false, noResolvedType0.isUnionType());
//       assertEquals(2147483647, noResolvedType0.getPropertiesCount());
//       assertEquals(false, noResolvedType0.isInterface());
//       assertEquals(false, noResolvedType0.isFunctionPrototypeType());
//       assertEquals(false, noResolvedType0.isRecordType());
//       assertEquals(2147483647, noResolvedType0.getMaxArguments());
//       assertEquals(true, noResolvedType0.matchesNumberContext());
//       assertEquals(false, noResolvedType0.isBooleanValueType());
//       assertEquals(false, noResolvedType0.isFunctionType());
//       assertEquals(false, noResolvedType0.isStringValueType());
//       assertEquals(true, noResolvedType0.canBeCalled());
//       assertNull(noResolvedType0.getTemplateTypeName());
//       assertEquals(false, noResolvedType0.isVoidType());
//       assertEquals(false, noResolvedType0.isEnumElementType());
//       assertEquals(false, noResolvedType0.isEnumType());
//       assertEquals(true, noResolvedType0.matchesStringContext());
//       assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
//       assertEquals(true, noResolvedType0.isConstructor());
//       assertEquals(false, noResolvedType0.isNumberValueType());
//       assertEquals(false, noResolvedType0.isCheckedUnknownType());
//       assertEquals(false, noResolvedType0.isTemplateType());
//       assertEquals(false, noResolvedType0.isReturnTypeInferred());
//       assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
//       assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
//       assertNotNull(functionType0);
//       
//       Vector<ObjectType> vector0 = new Vector<ObjectType>();
//       assertEquals(true, vector0.isEmpty());
//       assertEquals(0, vector0.size());
//       assertEquals("[]", vector0.toString());
//       assertEquals(10, vector0.capacity());
//       assertNotNull(vector0);
//       
//       functionType0.setExtendedInterfaces((List<ObjectType>) vector0);
//       assertEquals(true, vector0.isEmpty());
//       assertEquals(0, vector0.size());
//       assertEquals("[]", vector0.toString());
//       assertEquals(10, vector0.capacity());
//       assertEquals(false, functionType0.isUnionType());
//       assertEquals(false, functionType0.isNominalType());
//       assertEquals(false, functionType0.isFunctionPrototypeType());
//       assertEquals(false, functionType0.isOrdinaryFunction());
//       assertEquals(false, functionType0.isStringValueType());
//       assertEquals(false, functionType0.isResolved());
//       assertEquals(false, functionType0.isAllType());
//       assertEquals(false, functionType0.isReturnTypeInferred());
//       assertEquals(false, functionType0.isVoidType());
//       assertEquals(false, functionType0.isNoType());
//       assertEquals(false, functionType0.isEnumType());
//       assertEquals(false, functionType0.isNumberValueType());
//       assertNull(functionType0.getTemplateTypeName());
//       assertEquals(true, functionType0.canBeCalled());
//       assertEquals(false, functionType0.isNullType());
//       assertEquals(false, functionType0.isNoResolvedType());
//       assertEquals(true, functionType0.isFunctionType());
//       assertEquals(false, functionType0.isConstructor());
//       assertEquals(false, functionType0.isCheckedUnknownType());
//       assertEquals(false, functionType0.isEnumElementType());
//       assertEquals(false, functionType0.hasCachedValues());
//       assertEquals(0, functionType0.getMaxArguments());
//       assertEquals(0, functionType0.getExtendedInterfacesCount());
//       assertEquals(false, functionType0.isBooleanValueType());
//       assertEquals(false, functionType0.isRecordType());
//       assertEquals(false, functionType0.isNoObjectType());
//       assertEquals(true, functionType0.isInterface());
//       assertEquals(true, functionType0.hasInstanceType());
//       assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
//       assertEquals(false, functionType0.isTemplateType());
//       assertEquals(true, noResolvedType0.hasCachedValues());
//       assertEquals(false, noResolvedType0.isNoObjectType());
//       assertEquals(false, noResolvedType0.isOrdinaryFunction());
//       assertEquals(true, noResolvedType0.isNullable());
//       assertEquals(false, noResolvedType0.isNullType());
//       assertEquals(false, noResolvedType0.isAllType());
//       assertEquals(true, noResolvedType0.matchesObjectContext());
//       assertNull(noResolvedType0.getReferenceName());
//       assertEquals(false, noResolvedType0.isResolved());
//       assertEquals(true, noResolvedType0.hasInstanceType());
//       assertEquals(false, noResolvedType0.isNominalType());
//       assertEquals(false, noResolvedType0.isUnionType());
//       assertEquals(2147483647, noResolvedType0.getPropertiesCount());
//       assertEquals(false, noResolvedType0.isInterface());
//       assertEquals(false, noResolvedType0.isFunctionPrototypeType());
//       assertEquals(false, noResolvedType0.isRecordType());
//       assertEquals(2147483647, noResolvedType0.getMaxArguments());
//       assertEquals(true, noResolvedType0.matchesNumberContext());
//       assertEquals(false, noResolvedType0.isBooleanValueType());
//       assertEquals(false, noResolvedType0.isFunctionType());
//       assertEquals(false, noResolvedType0.isStringValueType());
//       assertEquals(true, noResolvedType0.canBeCalled());
//       assertNull(noResolvedType0.getTemplateTypeName());
//       assertEquals(false, noResolvedType0.isVoidType());
//       assertEquals(false, noResolvedType0.isEnumElementType());
//       assertEquals(false, noResolvedType0.isEnumType());
//       assertEquals(true, noResolvedType0.matchesStringContext());
//       assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
//       assertEquals(true, noResolvedType0.isConstructor());
//       assertEquals(false, noResolvedType0.isNumberValueType());
//       assertEquals(false, noResolvedType0.isCheckedUnknownType());
//       assertEquals(false, noResolvedType0.isTemplateType());
//       assertEquals(false, noResolvedType0.isReturnTypeInferred());
//       assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
//       assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
//   }

  @Test
  public void test45()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      String string0 = "ELqIPSIS";
      Node node0 = null;
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      assertEquals(false, noResolvedType0.isAllType());
      assertEquals(true, noResolvedType0.canBeCalled());
      assertEquals(false, noResolvedType0.isNullType());
      assertEquals(false, noResolvedType0.isFunctionPrototypeType());
      assertEquals(2147483647, noResolvedType0.getPropertiesCount());
      assertEquals(false, noResolvedType0.isTemplateType());
      assertEquals(false, noResolvedType0.isRecordType());
      assertEquals(false, noResolvedType0.isBooleanValueType());
      assertEquals(false, noResolvedType0.isUnionType());
      assertEquals(false, noResolvedType0.isNoObjectType());
      assertEquals(true, noResolvedType0.isNullable());
      assertEquals(false, noResolvedType0.isCheckedUnknownType());
      assertEquals(true, noResolvedType0.matchesNumberContext());
      assertEquals(false, noResolvedType0.isResolved());
      assertEquals(false, noResolvedType0.isFunctionType());
      assertEquals(false, noResolvedType0.isVoidType());
      assertEquals(false, noResolvedType0.isInterface());
      assertNull(noResolvedType0.getTemplateTypeName());
      assertEquals(false, noResolvedType0.isNumberValueType());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertEquals(true, noResolvedType0.isConstructor());
      assertEquals(false, noResolvedType0.isEnumType());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noResolvedType0.isReturnTypeInferred());
      assertNull(noResolvedType0.getReferenceName());
      assertEquals(false, noResolvedType0.isStringValueType());
      assertEquals(false, noResolvedType0.hasCachedValues());
      assertEquals(2147483647, noResolvedType0.getMaxArguments());
      assertEquals(true, noResolvedType0.matchesStringContext());
      assertEquals(false, noResolvedType0.isOrdinaryFunction());
      assertEquals(true, noResolvedType0.matchesObjectContext());
      assertEquals(false, noResolvedType0.isEnumElementType());
      assertEquals(true, noResolvedType0.hasInstanceType());
      assertEquals(false, noResolvedType0.isNominalType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(noResolvedType0);
      
      ArrowType arrowType0 = noResolvedType0.getInternalArrowType();
      assertEquals(false, noResolvedType0.isAllType());
      assertEquals(true, noResolvedType0.canBeCalled());
      assertEquals(false, noResolvedType0.isNullType());
      assertEquals(false, noResolvedType0.isFunctionPrototypeType());
      assertEquals(2147483647, noResolvedType0.getPropertiesCount());
      assertEquals(false, noResolvedType0.isTemplateType());
      assertEquals(false, noResolvedType0.isRecordType());
      assertEquals(false, noResolvedType0.isBooleanValueType());
      assertEquals(false, noResolvedType0.isUnionType());
      assertEquals(false, noResolvedType0.isNoObjectType());
      assertEquals(true, noResolvedType0.isNullable());
      assertEquals(false, noResolvedType0.isCheckedUnknownType());
      assertEquals(true, noResolvedType0.matchesNumberContext());
      assertEquals(false, noResolvedType0.isResolved());
      assertEquals(false, noResolvedType0.isFunctionType());
      assertEquals(false, noResolvedType0.isVoidType());
      assertEquals(false, noResolvedType0.isInterface());
      assertNull(noResolvedType0.getTemplateTypeName());
      assertEquals(false, noResolvedType0.isNumberValueType());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertEquals(true, noResolvedType0.isConstructor());
      assertEquals(false, noResolvedType0.isEnumType());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noResolvedType0.isReturnTypeInferred());
      assertNull(noResolvedType0.getReferenceName());
      assertEquals(false, noResolvedType0.isStringValueType());
      assertEquals(false, noResolvedType0.hasCachedValues());
      assertEquals(2147483647, noResolvedType0.getMaxArguments());
      assertEquals(true, noResolvedType0.matchesStringContext());
      assertEquals(false, noResolvedType0.isOrdinaryFunction());
      assertEquals(true, noResolvedType0.matchesObjectContext());
      assertEquals(false, noResolvedType0.isEnumElementType());
      assertEquals(true, noResolvedType0.hasInstanceType());
      assertEquals(false, noResolvedType0.isNominalType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, arrowType0.isVoidType());
      assertEquals(false, arrowType0.isOrdinaryFunction());
      assertEquals(false, arrowType0.isNullType());
      assertEquals(false, arrowType0.isNumberValueType());
      assertEquals(false, arrowType0.isFunctionType());
      assertEquals(false, arrowType0.isInterface());
      assertEquals(false, arrowType0.isAllType());
      assertEquals(false, arrowType0.isRecordType());
      assertEquals(false, arrowType0.isStringValueType());
      assertEquals(false, arrowType0.isNoType());
      assertEquals(false, arrowType0.isFunctionPrototypeType());
      assertEquals(false, arrowType0.isResolved());
      assertEquals(false, arrowType0.isEnumType());
      assertEquals(false, arrowType0.isCheckedUnknownType());
      assertEquals(false, arrowType0.isNominalType());
      assertEquals(false, arrowType0.isNoResolvedType());
      assertEquals(false, arrowType0.isTemplateType());
      assertEquals(false, arrowType0.isUnionType());
      assertEquals(false, arrowType0.isBooleanValueType());
      assertEquals(false, arrowType0.isConstructor());
      assertEquals(false, arrowType0.isEnumElementType());
      assertEquals(false, arrowType0.isNoObjectType());
      assertNotNull(arrowType0);
      
      boolean boolean0 = false;
      FunctionType functionType0 = new FunctionType(jSTypeRegistry0, string0, node0, arrowType0, noResolvedType0, string0, boolean0, boolean0);
      assertEquals(false, noResolvedType0.isAllType());
      assertEquals(true, noResolvedType0.canBeCalled());
      assertEquals(false, noResolvedType0.isNullType());
      assertEquals(false, noResolvedType0.isFunctionPrototypeType());
      assertEquals(2147483647, noResolvedType0.getPropertiesCount());
      assertEquals(false, noResolvedType0.isTemplateType());
      assertEquals(false, noResolvedType0.isRecordType());
      assertEquals(false, noResolvedType0.isBooleanValueType());
      assertEquals(false, noResolvedType0.isUnionType());
      assertEquals(false, noResolvedType0.isNoObjectType());
      assertEquals(true, noResolvedType0.isNullable());
      assertEquals(false, noResolvedType0.isCheckedUnknownType());
      assertEquals(true, noResolvedType0.matchesNumberContext());
      assertEquals(false, noResolvedType0.isResolved());
      assertEquals(false, noResolvedType0.isFunctionType());
      assertEquals(false, noResolvedType0.isVoidType());
      assertEquals(false, noResolvedType0.isInterface());
      assertNull(noResolvedType0.getTemplateTypeName());
      assertEquals(false, noResolvedType0.isNumberValueType());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertEquals(true, noResolvedType0.isConstructor());
      assertEquals(false, noResolvedType0.isEnumType());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noResolvedType0.isReturnTypeInferred());
      assertNull(noResolvedType0.getReferenceName());
      assertEquals(false, noResolvedType0.isStringValueType());
      assertEquals(false, noResolvedType0.hasCachedValues());
      assertEquals(2147483647, noResolvedType0.getMaxArguments());
      assertEquals(true, noResolvedType0.matchesStringContext());
      assertEquals(false, noResolvedType0.isOrdinaryFunction());
      assertEquals(true, noResolvedType0.matchesObjectContext());
      assertEquals(false, noResolvedType0.isEnumElementType());
      assertEquals(true, noResolvedType0.hasInstanceType());
      assertEquals(false, noResolvedType0.isNominalType());
      assertEquals(false, functionType0.isInterface());
      assertEquals(false, functionType0.isStringValueType());
      assertEquals(false, functionType0.isNoObjectType());
      assertEquals(true, functionType0.canBeCalled());
      assertEquals(false, functionType0.isResolved());
      assertEquals(false, functionType0.isTemplateType());
      assertEquals(true, functionType0.isOrdinaryFunction());
      assertEquals(false, functionType0.isEnumType());
      assertEquals(true, functionType0.isFunctionType());
      assertEquals(false, functionType0.isConstructor());
      assertEquals(false, functionType0.isNoType());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, functionType0.isNullType());
      assertEquals(false, functionType0.hasInstanceType());
      assertEquals(false, functionType0.isReturnTypeInferred());
      assertEquals(false, functionType0.isVoidType());
      assertEquals(false, functionType0.isRecordType());
      assertEquals(false, functionType0.isNominalType());
      assertEquals(false, functionType0.isBooleanValueType());
      assertEquals(2147483647, functionType0.getMaxArguments());
      assertEquals("ELqIPSIS", functionType0.getTemplateTypeName());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertEquals(false, functionType0.isNoResolvedType());
      assertEquals(false, functionType0.isEnumElementType());
      assertEquals(false, functionType0.hasCachedValues());
      assertEquals(false, functionType0.isCheckedUnknownType());
      assertEquals(false, functionType0.isUnionType());
      assertEquals(false, functionType0.isAllType());
      assertEquals(false, functionType0.isFunctionPrototypeType());
      assertEquals(false, functionType0.isNumberValueType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, arrowType0.isVoidType());
      assertEquals(false, arrowType0.isOrdinaryFunction());
      assertEquals(false, arrowType0.isNullType());
      assertEquals(false, arrowType0.isNumberValueType());
      assertEquals(false, arrowType0.isFunctionType());
      assertEquals(false, arrowType0.isInterface());
      assertEquals(false, arrowType0.isAllType());
      assertEquals(false, arrowType0.isRecordType());
      assertEquals(false, arrowType0.isStringValueType());
      assertEquals(false, arrowType0.isNoType());
      assertEquals(false, arrowType0.isFunctionPrototypeType());
      assertEquals(false, arrowType0.isResolved());
      assertEquals(false, arrowType0.isEnumType());
      assertEquals(false, arrowType0.isCheckedUnknownType());
      assertEquals(false, arrowType0.isNominalType());
      assertEquals(false, arrowType0.isNoResolvedType());
      assertEquals(false, arrowType0.isTemplateType());
      assertEquals(false, arrowType0.isUnionType());
      assertEquals(false, arrowType0.isBooleanValueType());
      assertEquals(false, arrowType0.isConstructor());
      assertEquals(false, arrowType0.isEnumElementType());
      assertEquals(false, arrowType0.isNoObjectType());
      assertNotNull(functionType0);
      
      Iterable<ObjectType> iterable0 = functionType0.getAllImplementedInterfaces();
      assertEquals(false, noResolvedType0.isAllType());
      assertEquals(true, noResolvedType0.canBeCalled());
      assertEquals(false, noResolvedType0.isNullType());
      assertEquals(false, noResolvedType0.isFunctionPrototypeType());
      assertEquals(2147483647, noResolvedType0.getPropertiesCount());
      assertEquals(false, noResolvedType0.isTemplateType());
      assertEquals(false, noResolvedType0.isRecordType());
      assertEquals(false, noResolvedType0.isBooleanValueType());
      assertEquals(false, noResolvedType0.isUnionType());
      assertEquals(false, noResolvedType0.isNoObjectType());
      assertEquals(true, noResolvedType0.isNullable());
      assertEquals(false, noResolvedType0.isCheckedUnknownType());
      assertEquals(true, noResolvedType0.matchesNumberContext());
      assertEquals(false, noResolvedType0.isResolved());
      assertEquals(false, noResolvedType0.isFunctionType());
      assertEquals(false, noResolvedType0.isVoidType());
      assertEquals(false, noResolvedType0.isInterface());
      assertNull(noResolvedType0.getTemplateTypeName());
      assertEquals(false, noResolvedType0.isNumberValueType());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertEquals(true, noResolvedType0.isConstructor());
      assertEquals(false, noResolvedType0.isEnumType());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noResolvedType0.isReturnTypeInferred());
      assertNull(noResolvedType0.getReferenceName());
      assertEquals(false, noResolvedType0.isStringValueType());
      assertEquals(false, noResolvedType0.hasCachedValues());
      assertEquals(2147483647, noResolvedType0.getMaxArguments());
      assertEquals(true, noResolvedType0.matchesStringContext());
      assertEquals(false, noResolvedType0.isOrdinaryFunction());
      assertEquals(true, noResolvedType0.matchesObjectContext());
      assertEquals(false, noResolvedType0.isEnumElementType());
      assertEquals(true, noResolvedType0.hasInstanceType());
      assertEquals(false, noResolvedType0.isNominalType());
      assertEquals(false, functionType0.isInterface());
      assertEquals(false, functionType0.isStringValueType());
      assertEquals(false, functionType0.isNoObjectType());
      assertEquals(true, functionType0.canBeCalled());
      assertEquals(false, functionType0.isResolved());
      assertEquals(false, functionType0.isTemplateType());
      assertEquals(true, functionType0.isOrdinaryFunction());
      assertEquals(false, functionType0.isEnumType());
      assertEquals(true, functionType0.isFunctionType());
      assertEquals(false, functionType0.isConstructor());
      assertEquals(false, functionType0.isNoType());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, functionType0.isNullType());
      assertEquals(false, functionType0.hasInstanceType());
      assertEquals(false, functionType0.isReturnTypeInferred());
      assertEquals(false, functionType0.isVoidType());
      assertEquals(false, functionType0.isRecordType());
      assertEquals(false, functionType0.isNominalType());
      assertEquals(false, functionType0.isBooleanValueType());
      assertEquals(2147483647, functionType0.getMaxArguments());
      assertEquals("ELqIPSIS", functionType0.getTemplateTypeName());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertEquals(false, functionType0.isNoResolvedType());
      assertEquals(false, functionType0.isEnumElementType());
      assertEquals(false, functionType0.hasCachedValues());
      assertEquals(false, functionType0.isCheckedUnknownType());
      assertEquals(false, functionType0.isUnionType());
      assertEquals(false, functionType0.isAllType());
      assertEquals(false, functionType0.isFunctionPrototypeType());
      assertEquals(false, functionType0.isNumberValueType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, arrowType0.isVoidType());
      assertEquals(false, arrowType0.isOrdinaryFunction());
      assertEquals(false, arrowType0.isNullType());
      assertEquals(false, arrowType0.isNumberValueType());
      assertEquals(false, arrowType0.isFunctionType());
      assertEquals(false, arrowType0.isInterface());
      assertEquals(false, arrowType0.isAllType());
      assertEquals(false, arrowType0.isRecordType());
      assertEquals(false, arrowType0.isStringValueType());
      assertEquals(false, arrowType0.isNoType());
      assertEquals(false, arrowType0.isFunctionPrototypeType());
      assertEquals(false, arrowType0.isResolved());
      assertEquals(false, arrowType0.isEnumType());
      assertEquals(false, arrowType0.isCheckedUnknownType());
      assertEquals(false, arrowType0.isNominalType());
      assertEquals(false, arrowType0.isNoResolvedType());
      assertEquals(false, arrowType0.isTemplateType());
      assertEquals(false, arrowType0.isUnionType());
      assertEquals(false, arrowType0.isBooleanValueType());
      assertEquals(false, arrowType0.isConstructor());
      assertEquals(false, arrowType0.isEnumElementType());
      assertEquals(false, arrowType0.isNoObjectType());
      assertNotNull(iterable0);
  }

  @Test
  public void test46()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      String string0 = "DATE_FUNCTION_TYPE";
      int int0 = 362;
      Node node0 = new Node(int0);
      assertEquals(false, node0.isVarArgs());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(-1, node0.getLineno());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(362, node0.getType());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(-1, node0.getCharno());
      assertEquals(2147483647, node0.getSourceOffset());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isFromExterns());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.hasOneChild());
      assertNotNull(node0);
      
      // Undeclared exception!
      try {
        FunctionType functionType0 = jSTypeRegistry0.createInterfaceType(string0, node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test47()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      String string0 = "";
      int int0 = 105;
      Node node0 = new Node(int0);
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(0, node0.getLength());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(105, node0.getType());
      assertEquals(0, node0.getChildCount());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(2147483647, node0.getSourceOffset());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isOptionalArg());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.hasChildren());
      assertEquals(-1, node0.getCharno());
      assertNotNull(node0);
      
      FunctionType functionType0 = FunctionType.forInterface(jSTypeRegistry0, string0, node0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(0, node0.getLength());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(105, node0.getType());
      assertEquals(0, node0.getChildCount());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(2147483647, node0.getSourceOffset());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isOptionalArg());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.hasChildren());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, functionType0.isRecordType());
      assertEquals(false, functionType0.isOrdinaryFunction());
      assertNull(functionType0.getTemplateTypeName());
      assertEquals(false, functionType0.isAllType());
      assertEquals(false, functionType0.isTemplateType());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, functionType0.isVoidType());
      assertEquals(false, functionType0.isNoObjectType());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertEquals(false, functionType0.isStringValueType());
      assertEquals(false, functionType0.isNominalType());
      assertEquals(true, functionType0.isFunctionType());
      assertEquals(false, functionType0.isEnumType());
      assertEquals(false, functionType0.isFunctionPrototypeType());
      assertEquals(false, functionType0.isConstructor());
      assertEquals(false, functionType0.isCheckedUnknownType());
      assertEquals(true, functionType0.isInterface());
      assertEquals(true, functionType0.canBeCalled());
      assertEquals(false, functionType0.isUnionType());
      assertEquals(false, functionType0.isBooleanValueType());
      assertEquals(false, functionType0.isNoResolvedType());
      assertEquals(0, functionType0.getMaxArguments());
      assertEquals(false, functionType0.isEnumElementType());
      assertEquals(false, functionType0.isReturnTypeInferred());
      assertEquals(false, functionType0.isNoType());
      assertEquals(false, functionType0.hasCachedValues());
      assertEquals(true, functionType0.hasInstanceType());
      assertEquals(false, functionType0.isNullType());
      assertEquals(false, functionType0.isNumberValueType());
      assertEquals(false, functionType0.isResolved());
      assertNotNull(functionType0);
  }

  @Test
  public void test48()  throws Throwable  {
      JSType jSType0 = null;
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      String string0 = "]";
      NoObjectType noObjectType0 = new NoObjectType(jSTypeRegistry0);
      assertEquals(false, noObjectType0.isNoResolvedType());
      assertEquals(false, noObjectType0.isNoType());
      assertEquals(false, noObjectType0.isStringValueType());
      assertEquals(true, noObjectType0.matchesNumberContext());
      assertEquals(false, noObjectType0.isResolved());
      assertNull(noObjectType0.getReferenceName());
      assertEquals(true, noObjectType0.isNoObjectType());
      assertEquals(false, noObjectType0.isNumberValueType());
      assertEquals(BooleanLiteralSet.TRUE, noObjectType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noObjectType0.isNominalType());
      assertEquals(true, noObjectType0.hasInstanceType());
      assertEquals(false, noObjectType0.isFunctionPrototypeType());
      assertEquals(true, noObjectType0.isConstructor());
      assertNull(noObjectType0.getTemplateTypeName());
      assertEquals(false, noObjectType0.isInterface());
      assertEquals(false, noObjectType0.isCheckedUnknownType());
      assertEquals(true, noObjectType0.matchesObjectContext());
      assertEquals(2147483647, noObjectType0.getPropertiesCount());
      assertEquals(false, noObjectType0.isBooleanValueType());
      assertEquals("NoObject", noObjectType0.toString());
      assertEquals(true, noObjectType0.matchesStringContext());
      assertEquals(false, noObjectType0.hasCachedValues());
      assertEquals(false, noObjectType0.isEnumElementType());
      assertEquals(false, noObjectType0.isOrdinaryFunction());
      assertEquals(false, noObjectType0.isVoidType());
      assertEquals(false, noObjectType0.isUnionType());
      assertEquals(false, noObjectType0.isAllType());
      assertEquals(false, noObjectType0.isRecordType());
      assertEquals(false, noObjectType0.isNullType());
      assertEquals(2147483647, noObjectType0.getMaxArguments());
      assertEquals(false, noObjectType0.isReturnTypeInferred());
      assertEquals(true, noObjectType0.canBeCalled());
      assertEquals(false, noObjectType0.isFunctionType());
      assertEquals(false, noObjectType0.isEnumType());
      assertEquals(false, noObjectType0.isTemplateType());
      assertEquals(0, noObjectType0.getExtendedInterfacesCount());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(noObjectType0);
      
      Node node0 = noObjectType0.getParametersNode();
      assertEquals(false, noObjectType0.isNoResolvedType());
      assertEquals(false, noObjectType0.isNoType());
      assertEquals(false, noObjectType0.isStringValueType());
      assertEquals(true, noObjectType0.matchesNumberContext());
      assertEquals(false, noObjectType0.isResolved());
      assertNull(noObjectType0.getReferenceName());
      assertEquals(true, noObjectType0.isNoObjectType());
      assertEquals(false, noObjectType0.isNumberValueType());
      assertEquals(BooleanLiteralSet.TRUE, noObjectType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noObjectType0.isNominalType());
      assertEquals(true, noObjectType0.hasInstanceType());
      assertEquals(false, noObjectType0.isFunctionPrototypeType());
      assertEquals(true, noObjectType0.isConstructor());
      assertNull(noObjectType0.getTemplateTypeName());
      assertEquals(false, noObjectType0.isInterface());
      assertEquals(false, noObjectType0.isCheckedUnknownType());
      assertEquals(true, noObjectType0.matchesObjectContext());
      assertEquals(2147483647, noObjectType0.getPropertiesCount());
      assertEquals(false, noObjectType0.isBooleanValueType());
      assertEquals("NoObject", noObjectType0.toString());
      assertEquals(true, noObjectType0.matchesStringContext());
      assertEquals(false, noObjectType0.hasCachedValues());
      assertEquals(false, noObjectType0.isEnumElementType());
      assertEquals(false, noObjectType0.isOrdinaryFunction());
      assertEquals(false, noObjectType0.isVoidType());
      assertEquals(false, noObjectType0.isUnionType());
      assertEquals(false, noObjectType0.isAllType());
      assertEquals(false, noObjectType0.isRecordType());
      assertEquals(false, noObjectType0.isNullType());
      assertEquals(2147483647, noObjectType0.getMaxArguments());
      assertEquals(false, noObjectType0.isReturnTypeInferred());
      assertEquals(true, noObjectType0.canBeCalled());
      assertEquals(false, noObjectType0.isFunctionType());
      assertEquals(false, noObjectType0.isEnumType());
      assertEquals(false, noObjectType0.isTemplateType());
      assertEquals(0, noObjectType0.getExtendedInterfacesCount());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isLocalResultCall());
      assertNull(node0.getSourceFileName());
      assertEquals(83, node0.getType());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(true, node0.hasChildren());
      assertEquals(false, node0.isVarArgs());
      assertEquals(2147483647, node0.getSourceOffset());
      assertEquals(false, node0.isFromExterns());
      assertEquals(true, node0.hasOneChild());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isQuotedString());
      assertEquals(-1, node0.getLineno());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(1, node0.getChildCount());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isSyntheticBlock());
      assertNotNull(node0);
      
      // Undeclared exception!
      try {
        FunctionType functionType0 = jSTypeRegistry0.createConstructorType(string0, node0, node0, jSType0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test49()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      boolean boolean0 = false;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0, boolean0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      assertEquals(false, noResolvedType0.isBooleanValueType());
      assertEquals(false, noResolvedType0.isNominalType());
      assertEquals(true, noResolvedType0.canBeCalled());
      assertEquals(true, noResolvedType0.hasInstanceType());
      assertEquals(true, noResolvedType0.isConstructor());
      assertEquals(2147483647, noResolvedType0.getMaxArguments());
      assertEquals(false, noResolvedType0.isInterface());
      assertEquals(true, noResolvedType0.isNullable());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertEquals(false, noResolvedType0.isReturnTypeInferred());
      assertNull(noResolvedType0.getReferenceName());
      assertEquals(false, noResolvedType0.isOrdinaryFunction());
      assertEquals(false, noResolvedType0.isUnionType());
      assertEquals(true, noResolvedType0.matchesObjectContext());
      assertEquals(false, noResolvedType0.isCheckedUnknownType());
      assertEquals(true, noResolvedType0.matchesStringContext());
      assertNull(noResolvedType0.getTemplateTypeName());
      assertEquals(false, noResolvedType0.isEnumType());
      assertEquals(false, noResolvedType0.isRecordType());
      assertEquals(false, noResolvedType0.isFunctionType());
      assertEquals(false, noResolvedType0.isResolved());
      assertEquals(false, noResolvedType0.isAllType());
      assertEquals(false, noResolvedType0.hasCachedValues());
      assertEquals(false, noResolvedType0.isStringValueType());
      assertEquals(false, noResolvedType0.isFunctionPrototypeType());
      assertEquals(true, noResolvedType0.matchesNumberContext());
      assertEquals(false, noResolvedType0.isVoidType());
      assertEquals(false, noResolvedType0.isNoObjectType());
      assertEquals(2147483647, noResolvedType0.getPropertiesCount());
      assertEquals(false, noResolvedType0.isEnumElementType());
      assertEquals(false, noResolvedType0.isNullType());
      assertEquals(false, noResolvedType0.isNumberValueType());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noResolvedType0.isTemplateType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(noResolvedType0);
      
      boolean boolean1 = noResolvedType0.isInstanceType();
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean0 == boolean1);
      assertEquals(false, noResolvedType0.isBooleanValueType());
      assertEquals(false, noResolvedType0.isNominalType());
      assertEquals(true, noResolvedType0.canBeCalled());
      assertEquals(true, noResolvedType0.hasInstanceType());
      assertEquals(true, noResolvedType0.isConstructor());
      assertEquals(2147483647, noResolvedType0.getMaxArguments());
      assertEquals(false, noResolvedType0.isInterface());
      assertEquals(true, noResolvedType0.isNullable());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertEquals(false, noResolvedType0.isReturnTypeInferred());
      assertNull(noResolvedType0.getReferenceName());
      assertEquals(false, noResolvedType0.isOrdinaryFunction());
      assertEquals(false, noResolvedType0.isUnionType());
      assertEquals(true, noResolvedType0.matchesObjectContext());
      assertEquals(false, noResolvedType0.isCheckedUnknownType());
      assertEquals(true, noResolvedType0.matchesStringContext());
      assertNull(noResolvedType0.getTemplateTypeName());
      assertEquals(false, noResolvedType0.isEnumType());
      assertEquals(false, noResolvedType0.isRecordType());
      assertEquals(false, noResolvedType0.isFunctionType());
      assertEquals(false, noResolvedType0.isResolved());
      assertEquals(false, noResolvedType0.isAllType());
      assertEquals(false, noResolvedType0.hasCachedValues());
      assertEquals(false, noResolvedType0.isStringValueType());
      assertEquals(false, noResolvedType0.isFunctionPrototypeType());
      assertEquals(true, noResolvedType0.matchesNumberContext());
      assertEquals(false, noResolvedType0.isVoidType());
      assertEquals(false, noResolvedType0.isNoObjectType());
      assertEquals(2147483647, noResolvedType0.getPropertiesCount());
      assertEquals(false, noResolvedType0.isEnumElementType());
      assertEquals(false, noResolvedType0.isNullType());
      assertEquals(false, noResolvedType0.isNumberValueType());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noResolvedType0.isTemplateType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
  }

  @Test
  public void test50()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      boolean boolean0 = true;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0, boolean0);
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      assertEquals(false, noResolvedType0.isUnionType());
      assertEquals(false, noResolvedType0.isCheckedUnknownType());
      assertEquals(false, noResolvedType0.isNoObjectType());
      assertNull(noResolvedType0.getReferenceName());
      assertEquals(false, noResolvedType0.isNumberValueType());
      assertEquals(true, noResolvedType0.isConstructor());
      assertEquals(false, noResolvedType0.isFunctionType());
      assertEquals(false, noResolvedType0.isOrdinaryFunction());
      assertEquals(false, noResolvedType0.isInterface());
      assertEquals(false, noResolvedType0.isTemplateType());
      assertEquals(true, noResolvedType0.canBeCalled());
      assertEquals(true, noResolvedType0.hasInstanceType());
      assertEquals(true, noResolvedType0.isNullable());
      assertEquals(false, noResolvedType0.isNullType());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertEquals(2147483647, noResolvedType0.getPropertiesCount());
      assertEquals(false, noResolvedType0.isVoidType());
      assertEquals(false, noResolvedType0.isEnumElementType());
      assertEquals(false, noResolvedType0.isAllType());
      assertEquals(true, noResolvedType0.matchesStringContext());
      assertEquals(false, noResolvedType0.hasCachedValues());
      assertEquals(false, noResolvedType0.isFunctionPrototypeType());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertEquals(false, noResolvedType0.isReturnTypeInferred());
      assertNull(noResolvedType0.getTemplateTypeName());
      assertEquals(false, noResolvedType0.isStringValueType());
      assertEquals(false, noResolvedType0.isRecordType());
      assertEquals(2147483647, noResolvedType0.getMaxArguments());
      assertEquals(true, noResolvedType0.matchesObjectContext());
      assertEquals(false, noResolvedType0.isNominalType());
      assertEquals(false, noResolvedType0.isEnumType());
      assertEquals(false, noResolvedType0.isResolved());
      assertEquals(true, noResolvedType0.matchesNumberContext());
      assertEquals(false, noResolvedType0.isBooleanValueType());
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(noResolvedType0);
      
      boolean boolean1 = noResolvedType0.hasEqualCallType((FunctionType) noResolvedType0);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean0 == boolean1);
      assertEquals(false, noResolvedType0.isUnionType());
      assertEquals(false, noResolvedType0.isCheckedUnknownType());
      assertEquals(false, noResolvedType0.isNoObjectType());
      assertNull(noResolvedType0.getReferenceName());
      assertEquals(false, noResolvedType0.isNumberValueType());
      assertEquals(true, noResolvedType0.isConstructor());
      assertEquals(false, noResolvedType0.isFunctionType());
      assertEquals(false, noResolvedType0.isOrdinaryFunction());
      assertEquals(false, noResolvedType0.isInterface());
      assertEquals(false, noResolvedType0.isTemplateType());
      assertEquals(true, noResolvedType0.canBeCalled());
      assertEquals(true, noResolvedType0.hasInstanceType());
      assertEquals(true, noResolvedType0.isNullable());
      assertEquals(false, noResolvedType0.isNullType());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertEquals(2147483647, noResolvedType0.getPropertiesCount());
      assertEquals(false, noResolvedType0.isVoidType());
      assertEquals(false, noResolvedType0.isEnumElementType());
      assertEquals(false, noResolvedType0.isAllType());
      assertEquals(true, noResolvedType0.matchesStringContext());
      assertEquals(false, noResolvedType0.hasCachedValues());
      assertEquals(false, noResolvedType0.isFunctionPrototypeType());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertEquals(false, noResolvedType0.isReturnTypeInferred());
      assertNull(noResolvedType0.getTemplateTypeName());
      assertEquals(false, noResolvedType0.isStringValueType());
      assertEquals(false, noResolvedType0.isRecordType());
      assertEquals(2147483647, noResolvedType0.getMaxArguments());
      assertEquals(true, noResolvedType0.matchesObjectContext());
      assertEquals(false, noResolvedType0.isNominalType());
      assertEquals(false, noResolvedType0.isEnumType());
      assertEquals(false, noResolvedType0.isResolved());
      assertEquals(true, noResolvedType0.matchesNumberContext());
      assertEquals(false, noResolvedType0.isBooleanValueType());
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
  }

  @Test
  public void test51()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      boolean boolean0 = false;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0, boolean0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      NoType noType0 = new NoType(jSTypeRegistry0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, noType0.hasCachedValues());
      assertEquals(false, noType0.isNullType());
      assertEquals(true, noType0.isNoType());
      assertEquals(false, noType0.isBooleanValueType());
      assertEquals(false, noType0.isEnumType());
      assertEquals(true, noType0.matchesStringContext());
      assertEquals(true, noType0.matchesObjectContext());
      assertEquals(true, noType0.canBeCalled());
      assertEquals(false, noType0.isFunctionType());
      assertEquals(false, noType0.isNoResolvedType());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noType0.isVoidType());
      assertEquals(true, noType0.isConstructor());
      assertEquals(false, noType0.isEnumElementType());
      assertEquals(false, noType0.isResolved());
      assertEquals(false, noType0.isStringValueType());
      assertEquals(false, noType0.isNominalType());
      assertEquals(2147483647, noType0.getPropertiesCount());
      assertEquals(0, noType0.getExtendedInterfacesCount());
      assertEquals(true, noType0.matchesNumberContext());
      assertEquals(false, noType0.isNumberValueType());
      assertNull(noType0.getReferenceName());
      assertEquals(false, noType0.isUnionType());
      assertEquals(false, noType0.isNoObjectType());
      assertEquals(false, noType0.isOrdinaryFunction());
      assertEquals(2147483647, noType0.getMaxArguments());
      assertEquals(false, noType0.isCheckedUnknownType());
      assertEquals(false, noType0.isReturnTypeInferred());
      assertEquals(true, noType0.isNullable());
      assertEquals(false, noType0.isAllType());
      assertEquals("None", noType0.toString());
      assertEquals(false, noType0.isRecordType());
      assertEquals(false, noType0.isTemplateType());
      assertEquals(false, noType0.isFunctionPrototypeType());
      assertEquals(false, noType0.isInterface());
      assertNull(noType0.getTemplateTypeName());
      assertEquals(true, noType0.hasInstanceType());
      assertNotNull(noType0);
      
      int int0 = noType0.getExtendedInterfacesCount();
      assertEquals(0, int0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, noType0.hasCachedValues());
      assertEquals(false, noType0.isNullType());
      assertEquals(true, noType0.isNoType());
      assertEquals(false, noType0.isBooleanValueType());
      assertEquals(false, noType0.isEnumType());
      assertEquals(true, noType0.matchesStringContext());
      assertEquals(true, noType0.matchesObjectContext());
      assertEquals(true, noType0.canBeCalled());
      assertEquals(false, noType0.isFunctionType());
      assertEquals(false, noType0.isNoResolvedType());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noType0.isVoidType());
      assertEquals(true, noType0.isConstructor());
      assertEquals(false, noType0.isEnumElementType());
      assertEquals(false, noType0.isResolved());
      assertEquals(false, noType0.isStringValueType());
      assertEquals(false, noType0.isNominalType());
      assertEquals(2147483647, noType0.getPropertiesCount());
      assertEquals(0, noType0.getExtendedInterfacesCount());
      assertEquals(true, noType0.matchesNumberContext());
      assertEquals(false, noType0.isNumberValueType());
      assertNull(noType0.getReferenceName());
      assertEquals(false, noType0.isUnionType());
      assertEquals(false, noType0.isNoObjectType());
      assertEquals(false, noType0.isOrdinaryFunction());
      assertEquals(2147483647, noType0.getMaxArguments());
      assertEquals(false, noType0.isCheckedUnknownType());
      assertEquals(false, noType0.isReturnTypeInferred());
      assertEquals(true, noType0.isNullable());
      assertEquals(false, noType0.isAllType());
      assertEquals("None", noType0.toString());
      assertEquals(false, noType0.isRecordType());
      assertEquals(false, noType0.isTemplateType());
      assertEquals(false, noType0.isFunctionPrototypeType());
      assertEquals(false, noType0.isInterface());
      assertNull(noType0.getTemplateTypeName());
      assertEquals(true, noType0.hasInstanceType());
  }

  @Test
  public void test52()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      boolean boolean0 = true;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0, boolean0);
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      assertEquals(false, noResolvedType0.isNumberValueType());
      assertEquals(true, noResolvedType0.matchesNumberContext());
      assertEquals(true, noResolvedType0.isNullable());
      assertEquals(false, noResolvedType0.isRecordType());
      assertEquals(false, noResolvedType0.isEnumType());
      assertEquals(false, noResolvedType0.isTemplateType());
      assertEquals(false, noResolvedType0.isOrdinaryFunction());
      assertEquals(false, noResolvedType0.isNoObjectType());
      assertEquals(2147483647, noResolvedType0.getPropertiesCount());
      assertEquals(2147483647, noResolvedType0.getMaxArguments());
      assertEquals(false, noResolvedType0.isUnionType());
      assertEquals(false, noResolvedType0.isReturnTypeInferred());
      assertNull(noResolvedType0.getTemplateTypeName());
      assertEquals(false, noResolvedType0.isBooleanValueType());
      assertEquals(false, noResolvedType0.isCheckedUnknownType());
      assertEquals(true, noResolvedType0.hasInstanceType());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertEquals(false, noResolvedType0.isInterface());
      assertEquals(false, noResolvedType0.isEnumElementType());
      assertEquals(false, noResolvedType0.isFunctionPrototypeType());
      assertEquals(false, noResolvedType0.isNullType());
      assertEquals(false, noResolvedType0.isVoidType());
      assertEquals(false, noResolvedType0.isStringValueType());
      assertEquals(false, noResolvedType0.isAllType());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertEquals(true, noResolvedType0.isConstructor());
      assertEquals(true, noResolvedType0.matchesStringContext());
      assertEquals(false, noResolvedType0.hasCachedValues());
      assertEquals(false, noResolvedType0.isNominalType());
      assertEquals(true, noResolvedType0.matchesObjectContext());
      assertEquals(false, noResolvedType0.isResolved());
      assertEquals(true, noResolvedType0.canBeCalled());
      assertNull(noResolvedType0.getReferenceName());
      assertEquals(false, noResolvedType0.isFunctionType());
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(noResolvedType0);
      
      boolean boolean1 = noResolvedType0.isReturnTypeInferred();
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean0 == boolean1);
      assertEquals(false, noResolvedType0.isNumberValueType());
      assertEquals(true, noResolvedType0.matchesNumberContext());
      assertEquals(true, noResolvedType0.isNullable());
      assertEquals(false, noResolvedType0.isRecordType());
      assertEquals(false, noResolvedType0.isEnumType());
      assertEquals(false, noResolvedType0.isTemplateType());
      assertEquals(false, noResolvedType0.isOrdinaryFunction());
      assertEquals(false, noResolvedType0.isNoObjectType());
      assertEquals(2147483647, noResolvedType0.getPropertiesCount());
      assertEquals(2147483647, noResolvedType0.getMaxArguments());
      assertEquals(false, noResolvedType0.isUnionType());
      assertEquals(false, noResolvedType0.isReturnTypeInferred());
      assertNull(noResolvedType0.getTemplateTypeName());
      assertEquals(false, noResolvedType0.isBooleanValueType());
      assertEquals(false, noResolvedType0.isCheckedUnknownType());
      assertEquals(true, noResolvedType0.hasInstanceType());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertEquals(false, noResolvedType0.isInterface());
      assertEquals(false, noResolvedType0.isEnumElementType());
      assertEquals(false, noResolvedType0.isFunctionPrototypeType());
      assertEquals(false, noResolvedType0.isNullType());
      assertEquals(false, noResolvedType0.isVoidType());
      assertEquals(false, noResolvedType0.isStringValueType());
      assertEquals(false, noResolvedType0.isAllType());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertEquals(true, noResolvedType0.isConstructor());
      assertEquals(true, noResolvedType0.matchesStringContext());
      assertEquals(false, noResolvedType0.hasCachedValues());
      assertEquals(false, noResolvedType0.isNominalType());
      assertEquals(true, noResolvedType0.matchesObjectContext());
      assertEquals(false, noResolvedType0.isResolved());
      assertEquals(true, noResolvedType0.canBeCalled());
      assertNull(noResolvedType0.getReferenceName());
      assertEquals(false, noResolvedType0.isFunctionType());
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
  }

  @Test
  public void test53()  throws Throwable  {
      ErrorReporter errorReporter0 = null;
      boolean boolean0 = false;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(errorReporter0, boolean0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      String string0 = "apply";
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, string0);
      assertEquals(3, errorFunctionType0.getMaxArguments());
      assertEquals(true, errorFunctionType0.hasInstanceType());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, errorFunctionType0.isNoType());
      assertEquals(false, errorFunctionType0.isInterface());
      assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      assertEquals(false, errorFunctionType0.isUnionType());
      assertEquals(false, errorFunctionType0.isAllType());
      assertNull(errorFunctionType0.getTemplateTypeName());
      assertEquals(true, errorFunctionType0.canBeCalled());
      assertEquals(false, errorFunctionType0.isNoObjectType());
      assertEquals(true, errorFunctionType0.isFunctionType());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertEquals(false, errorFunctionType0.hasCachedValues());
      assertEquals(false, errorFunctionType0.isTemplateType());
      assertEquals(false, errorFunctionType0.isNominalType());
      assertEquals(false, errorFunctionType0.isNoResolvedType());
      assertEquals(true, errorFunctionType0.isConstructor());
      assertEquals(false, errorFunctionType0.isRecordType());
      assertEquals(false, errorFunctionType0.isStringValueType());
      assertEquals(false, errorFunctionType0.isCheckedUnknownType());
      assertEquals(false, errorFunctionType0.isEnumType());
      assertEquals(false, errorFunctionType0.isNumberValueType());
      assertEquals(false, errorFunctionType0.isBooleanValueType());
      assertEquals(false, errorFunctionType0.isReturnTypeInferred());
      assertEquals(false, errorFunctionType0.isVoidType());
      assertEquals(false, errorFunctionType0.isResolved());
      assertEquals(false, errorFunctionType0.isEnumElementType());
      assertEquals(false, errorFunctionType0.isFunctionPrototypeType());
      assertEquals(false, errorFunctionType0.isNullType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(errorFunctionType0);
      
      JSType.TypePair jSType_TypePair0 = errorFunctionType0.getTypesUnderEquality((JSType) errorFunctionType0);
      assertEquals(3, errorFunctionType0.getMaxArguments());
      assertEquals(true, errorFunctionType0.hasInstanceType());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, errorFunctionType0.isNoType());
      assertEquals(false, errorFunctionType0.isInterface());
      assertEquals(true, errorFunctionType0.hasCachedValues());
      assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      assertEquals(false, errorFunctionType0.isUnionType());
      assertEquals(false, errorFunctionType0.isAllType());
      assertNull(errorFunctionType0.getTemplateTypeName());
      assertEquals(true, errorFunctionType0.canBeCalled());
      assertEquals(false, errorFunctionType0.isNoObjectType());
      assertEquals(true, errorFunctionType0.isFunctionType());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertEquals(false, errorFunctionType0.isTemplateType());
      assertEquals(false, errorFunctionType0.isNominalType());
      assertEquals(false, errorFunctionType0.isNoResolvedType());
      assertEquals(true, errorFunctionType0.isConstructor());
      assertEquals(false, errorFunctionType0.isRecordType());
      assertEquals(false, errorFunctionType0.isStringValueType());
      assertEquals(false, errorFunctionType0.isCheckedUnknownType());
      assertEquals(false, errorFunctionType0.isEnumType());
      assertEquals(false, errorFunctionType0.isNumberValueType());
      assertEquals(false, errorFunctionType0.isBooleanValueType());
      assertEquals(false, errorFunctionType0.isReturnTypeInferred());
      assertEquals(false, errorFunctionType0.isVoidType());
      assertEquals(false, errorFunctionType0.isResolved());
      assertEquals(false, errorFunctionType0.isEnumElementType());
      assertEquals(false, errorFunctionType0.isFunctionPrototypeType());
      assertEquals(false, errorFunctionType0.isNullType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSType_TypePair0);
  }

  @Test
  public void test54()  throws Throwable  {
      ErrorReporter errorReporter0 = null;
      boolean boolean0 = false;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(errorReporter0, boolean0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      String string0 = "apply";
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, string0);
      assertEquals(false, errorFunctionType0.isNoObjectType());
      assertEquals(3, errorFunctionType0.getMaxArguments());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, errorFunctionType0.isFunctionPrototypeType());
      assertEquals(true, errorFunctionType0.canBeCalled());
      assertEquals(false, errorFunctionType0.isAllType());
      assertEquals(true, errorFunctionType0.isFunctionType());
      assertEquals(false, errorFunctionType0.isNominalType());
      assertEquals(false, errorFunctionType0.isReturnTypeInferred());
      assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      assertNull(errorFunctionType0.getTemplateTypeName());
      assertEquals(false, errorFunctionType0.isStringValueType());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertEquals(false, errorFunctionType0.isNoResolvedType());
      assertEquals(false, errorFunctionType0.isInterface());
      assertEquals(false, errorFunctionType0.isRecordType());
      assertEquals(false, errorFunctionType0.isNullType());
      assertEquals(false, errorFunctionType0.isEnumElementType());
      assertEquals(false, errorFunctionType0.isNumberValueType());
      assertEquals(false, errorFunctionType0.isTemplateType());
      assertEquals(false, errorFunctionType0.isUnionType());
      assertEquals(false, errorFunctionType0.isCheckedUnknownType());
      assertEquals(false, errorFunctionType0.isResolved());
      assertEquals(false, errorFunctionType0.hasCachedValues());
      assertEquals(false, errorFunctionType0.isEnumType());
      assertEquals(true, errorFunctionType0.hasInstanceType());
      assertEquals(true, errorFunctionType0.isConstructor());
      assertEquals(false, errorFunctionType0.isNoType());
      assertEquals(false, errorFunctionType0.isVoidType());
      assertEquals(false, errorFunctionType0.isBooleanValueType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(errorFunctionType0);
      
      ErrorFunctionType errorFunctionType1 = (ErrorFunctionType)errorFunctionType0.getLeastSupertype((JSType) errorFunctionType0);
      assertEquals(false, errorFunctionType0.isNoObjectType());
      assertEquals(3, errorFunctionType0.getMaxArguments());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, errorFunctionType0.isFunctionPrototypeType());
      assertEquals(true, errorFunctionType0.canBeCalled());
      assertEquals(false, errorFunctionType0.isAllType());
      assertEquals(true, errorFunctionType0.isFunctionType());
      assertEquals(false, errorFunctionType0.isNominalType());
      assertEquals(false, errorFunctionType0.isReturnTypeInferred());
      assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      assertNull(errorFunctionType0.getTemplateTypeName());
      assertEquals(false, errorFunctionType0.isStringValueType());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertEquals(false, errorFunctionType0.isNoResolvedType());
      assertEquals(false, errorFunctionType0.isInterface());
      assertEquals(false, errorFunctionType0.isRecordType());
      assertEquals(false, errorFunctionType0.isNullType());
      assertEquals(false, errorFunctionType0.isEnumElementType());
      assertEquals(false, errorFunctionType0.isNumberValueType());
      assertEquals(false, errorFunctionType0.isTemplateType());
      assertEquals(false, errorFunctionType0.isUnionType());
      assertEquals(false, errorFunctionType0.isCheckedUnknownType());
      assertEquals(false, errorFunctionType0.isResolved());
      assertEquals(false, errorFunctionType0.hasCachedValues());
      assertEquals(false, errorFunctionType0.isEnumType());
      assertEquals(true, errorFunctionType0.hasInstanceType());
      assertEquals(true, errorFunctionType0.isConstructor());
      assertEquals(false, errorFunctionType0.isNoType());
      assertEquals(false, errorFunctionType0.isVoidType());
      assertEquals(false, errorFunctionType0.isBooleanValueType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, errorFunctionType1.isReturnTypeInferred());
      assertEquals(false, errorFunctionType1.isRecordType());
      assertEquals(false, errorFunctionType1.isBooleanValueType());
      assertNull(errorFunctionType1.getTemplateTypeName());
      assertEquals(false, errorFunctionType1.isNominalType());
      assertEquals(0, errorFunctionType1.getExtendedInterfacesCount());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType1.getPossibleToBooleanOutcomes());
      assertEquals(false, errorFunctionType1.isNumberValueType());
      assertEquals(true, errorFunctionType1.isFunctionType());
      assertEquals(true, errorFunctionType1.hasInstanceType());
      assertEquals(false, errorFunctionType1.isAllType());
      assertEquals(false, errorFunctionType1.hasCachedValues());
      assertEquals(false, errorFunctionType1.isStringValueType());
      assertEquals(false, errorFunctionType1.isResolved());
      assertEquals(false, errorFunctionType1.isFunctionPrototypeType());
      assertEquals(false, errorFunctionType1.isNoResolvedType());
      assertEquals(false, errorFunctionType1.isOrdinaryFunction());
      assertEquals(false, errorFunctionType1.isCheckedUnknownType());
      assertEquals(false, errorFunctionType1.isEnumElementType());
      assertEquals(false, errorFunctionType1.isNullType());
      assertEquals(false, errorFunctionType1.isNoType());
      assertEquals(false, errorFunctionType1.isNoObjectType());
      assertEquals(false, errorFunctionType1.isTemplateType());
      assertEquals(3, errorFunctionType1.getMaxArguments());
      assertEquals(false, errorFunctionType1.isInterface());
      assertEquals(false, errorFunctionType1.isUnionType());
      assertEquals(false, errorFunctionType1.isVoidType());
      assertEquals(true, errorFunctionType1.isConstructor());
      assertEquals(true, errorFunctionType1.canBeCalled());
      assertEquals(false, errorFunctionType1.isEnumType());
      assertSame(errorFunctionType0, errorFunctionType1);
      assertSame(errorFunctionType1, errorFunctionType0);
      assertNotNull(errorFunctionType1);
  }

  @Test
  public void test55()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      boolean boolean0 = true;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0, boolean0);
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noResolvedType0.hasCachedValues());
      assertEquals(false, noResolvedType0.isBooleanValueType());
      assertEquals(false, noResolvedType0.isTemplateType());
      assertEquals(false, noResolvedType0.isVoidType());
      assertEquals(false, noResolvedType0.isFunctionPrototypeType());
      assertEquals(false, noResolvedType0.isCheckedUnknownType());
      assertEquals(false, noResolvedType0.isNoObjectType());
      assertEquals(false, noResolvedType0.isNullType());
      assertEquals(true, noResolvedType0.matchesObjectContext());
      assertEquals(true, noResolvedType0.matchesNumberContext());
      assertEquals(false, noResolvedType0.isOrdinaryFunction());
      assertEquals(false, noResolvedType0.isStringValueType());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertEquals(false, noResolvedType0.isFunctionType());
      assertEquals(false, noResolvedType0.isInterface());
      assertEquals(false, noResolvedType0.isRecordType());
      assertEquals(false, noResolvedType0.isAllType());
      assertEquals(2147483647, noResolvedType0.getMaxArguments());
      assertEquals(true, noResolvedType0.hasInstanceType());
      assertEquals(false, noResolvedType0.isReturnTypeInferred());
      assertEquals(true, noResolvedType0.canBeCalled());
      assertEquals(false, noResolvedType0.isUnionType());
      assertEquals(2147483647, noResolvedType0.getPropertiesCount());
      assertEquals(false, noResolvedType0.isEnumType());
      assertEquals(true, noResolvedType0.isConstructor());
      assertEquals(false, noResolvedType0.isNumberValueType());
      assertEquals(false, noResolvedType0.isEnumElementType());
      assertEquals(false, noResolvedType0.isResolved());
      assertNull(noResolvedType0.getTemplateTypeName());
      assertEquals(true, noResolvedType0.isNullable());
      assertEquals(false, noResolvedType0.isNominalType());
      assertNull(noResolvedType0.getReferenceName());
      assertEquals(true, noResolvedType0.matchesStringContext());
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(noResolvedType0);
      
      boolean boolean1 = noResolvedType0.canBeCalled();
      assertTrue(boolean1);
      assertTrue(boolean0 == boolean1);
      assertTrue(boolean1 == boolean0);
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noResolvedType0.hasCachedValues());
      assertEquals(false, noResolvedType0.isBooleanValueType());
      assertEquals(false, noResolvedType0.isTemplateType());
      assertEquals(false, noResolvedType0.isVoidType());
      assertEquals(false, noResolvedType0.isFunctionPrototypeType());
      assertEquals(false, noResolvedType0.isCheckedUnknownType());
      assertEquals(false, noResolvedType0.isNoObjectType());
      assertEquals(false, noResolvedType0.isNullType());
      assertEquals(true, noResolvedType0.matchesObjectContext());
      assertEquals(true, noResolvedType0.matchesNumberContext());
      assertEquals(false, noResolvedType0.isOrdinaryFunction());
      assertEquals(false, noResolvedType0.isStringValueType());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertEquals(false, noResolvedType0.isFunctionType());
      assertEquals(false, noResolvedType0.isInterface());
      assertEquals(false, noResolvedType0.isRecordType());
      assertEquals(false, noResolvedType0.isAllType());
      assertEquals(2147483647, noResolvedType0.getMaxArguments());
      assertEquals(true, noResolvedType0.hasInstanceType());
      assertEquals(false, noResolvedType0.isReturnTypeInferred());
      assertEquals(true, noResolvedType0.canBeCalled());
      assertEquals(false, noResolvedType0.isUnionType());
      assertEquals(2147483647, noResolvedType0.getPropertiesCount());
      assertEquals(false, noResolvedType0.isEnumType());
      assertEquals(true, noResolvedType0.isConstructor());
      assertEquals(false, noResolvedType0.isNumberValueType());
      assertEquals(false, noResolvedType0.isEnumElementType());
      assertEquals(false, noResolvedType0.isResolved());
      assertNull(noResolvedType0.getTemplateTypeName());
      assertEquals(true, noResolvedType0.isNullable());
      assertEquals(false, noResolvedType0.isNominalType());
      assertNull(noResolvedType0.getReferenceName());
      assertEquals(true, noResolvedType0.matchesStringContext());
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
  }

  @Test
  public void test56()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      boolean boolean0 = false;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0, boolean0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      assertEquals(false, noResolvedType0.isUnionType());
      assertNull(noResolvedType0.getTemplateTypeName());
      assertEquals(2147483647, noResolvedType0.getPropertiesCount());
      assertEquals(false, noResolvedType0.isNominalType());
      assertEquals(false, noResolvedType0.isInterface());
      assertEquals(false, noResolvedType0.isBooleanValueType());
      assertEquals(false, noResolvedType0.isOrdinaryFunction());
      assertEquals(false, noResolvedType0.isCheckedUnknownType());
      assertEquals(2147483647, noResolvedType0.getMaxArguments());
      assertEquals(false, noResolvedType0.isNumberValueType());
      assertEquals(false, noResolvedType0.isFunctionPrototypeType());
      assertEquals(false, noResolvedType0.isEnumElementType());
      assertEquals(false, noResolvedType0.isResolved());
      assertEquals(false, noResolvedType0.isReturnTypeInferred());
      assertEquals(false, noResolvedType0.isStringValueType());
      assertEquals(true, noResolvedType0.isConstructor());
      assertNull(noResolvedType0.getReferenceName());
      assertEquals(false, noResolvedType0.hasCachedValues());
      assertEquals(false, noResolvedType0.isAllType());
      assertEquals(true, noResolvedType0.hasInstanceType());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noResolvedType0.isNoObjectType());
      assertEquals(true, noResolvedType0.isNullable());
      assertEquals(false, noResolvedType0.isTemplateType());
      assertEquals(true, noResolvedType0.matchesObjectContext());
      assertEquals(true, noResolvedType0.matchesNumberContext());
      assertEquals(false, noResolvedType0.isFunctionType());
      assertEquals(true, noResolvedType0.canBeCalled());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertEquals(true, noResolvedType0.matchesStringContext());
      assertEquals(false, noResolvedType0.isEnumType());
      assertEquals(false, noResolvedType0.isRecordType());
      assertEquals(false, noResolvedType0.isNullType());
      assertEquals(false, noResolvedType0.isVoidType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(noResolvedType0);
      
      Node node0 = noResolvedType0.getSource();
      assertEquals(false, noResolvedType0.isUnionType());
      assertNull(noResolvedType0.getTemplateTypeName());
      assertEquals(2147483647, noResolvedType0.getPropertiesCount());
      assertEquals(false, noResolvedType0.isNominalType());
      assertEquals(false, noResolvedType0.isInterface());
      assertEquals(false, noResolvedType0.isBooleanValueType());
      assertEquals(false, noResolvedType0.isOrdinaryFunction());
      assertEquals(false, noResolvedType0.isCheckedUnknownType());
      assertEquals(2147483647, noResolvedType0.getMaxArguments());
      assertEquals(false, noResolvedType0.isNumberValueType());
      assertEquals(false, noResolvedType0.isFunctionPrototypeType());
      assertEquals(false, noResolvedType0.isEnumElementType());
      assertEquals(false, noResolvedType0.isResolved());
      assertEquals(false, noResolvedType0.isReturnTypeInferred());
      assertEquals(false, noResolvedType0.isStringValueType());
      assertEquals(true, noResolvedType0.isConstructor());
      assertNull(noResolvedType0.getReferenceName());
      assertEquals(false, noResolvedType0.hasCachedValues());
      assertEquals(false, noResolvedType0.isAllType());
      assertEquals(true, noResolvedType0.hasInstanceType());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noResolvedType0.isNoObjectType());
      assertEquals(true, noResolvedType0.isNullable());
      assertEquals(false, noResolvedType0.isTemplateType());
      assertEquals(true, noResolvedType0.matchesObjectContext());
      assertEquals(true, noResolvedType0.matchesNumberContext());
      assertEquals(false, noResolvedType0.isFunctionType());
      assertEquals(true, noResolvedType0.canBeCalled());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertEquals(true, noResolvedType0.matchesStringContext());
      assertEquals(false, noResolvedType0.isEnumType());
      assertEquals(false, noResolvedType0.isRecordType());
      assertEquals(false, noResolvedType0.isNullType());
      assertEquals(false, noResolvedType0.isVoidType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNull(node0);
      
      noResolvedType0.setSource(node0);
      assertEquals(false, noResolvedType0.isUnionType());
      assertNull(noResolvedType0.getTemplateTypeName());
      assertEquals(2147483647, noResolvedType0.getPropertiesCount());
      assertEquals(false, noResolvedType0.isNominalType());
      assertEquals(false, noResolvedType0.isInterface());
      assertEquals(false, noResolvedType0.isBooleanValueType());
      assertEquals(false, noResolvedType0.isOrdinaryFunction());
      assertEquals(false, noResolvedType0.isCheckedUnknownType());
      assertEquals(2147483647, noResolvedType0.getMaxArguments());
      assertEquals(false, noResolvedType0.isNumberValueType());
      assertEquals(false, noResolvedType0.isFunctionPrototypeType());
      assertEquals(false, noResolvedType0.isEnumElementType());
      assertEquals(false, noResolvedType0.isResolved());
      assertEquals(false, noResolvedType0.isReturnTypeInferred());
      assertEquals(false, noResolvedType0.isStringValueType());
      assertEquals(true, noResolvedType0.isConstructor());
      assertNull(noResolvedType0.getReferenceName());
      assertEquals(false, noResolvedType0.hasCachedValues());
      assertEquals(false, noResolvedType0.isAllType());
      assertEquals(true, noResolvedType0.hasInstanceType());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noResolvedType0.isNoObjectType());
      assertEquals(true, noResolvedType0.isNullable());
      assertEquals(false, noResolvedType0.isTemplateType());
      assertEquals(true, noResolvedType0.matchesObjectContext());
      assertEquals(true, noResolvedType0.matchesNumberContext());
      assertEquals(false, noResolvedType0.isFunctionType());
      assertEquals(true, noResolvedType0.canBeCalled());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertEquals(true, noResolvedType0.matchesStringContext());
      assertEquals(false, noResolvedType0.isEnumType());
      assertEquals(false, noResolvedType0.isRecordType());
      assertEquals(false, noResolvedType0.isNullType());
      assertEquals(false, noResolvedType0.isVoidType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
  }

  @Test
  public void test57()  throws Throwable  {
      ErrorReporter errorReporter0 = null;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(errorReporter0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      String string0 = null;
      NoType noType0 = new NoType(jSTypeRegistry0);
      assertEquals(false, noType0.isEnumElementType());
      assertEquals(false, noType0.isNoObjectType());
      assertEquals(false, noType0.isBooleanValueType());
      assertEquals(false, noType0.isVoidType());
      assertNull(noType0.getReferenceName());
      assertEquals(false, noType0.isCheckedUnknownType());
      assertEquals(true, noType0.isNoType());
      assertEquals(false, noType0.isFunctionType());
      assertEquals(false, noType0.isEnumType());
      assertEquals(true, noType0.hasInstanceType());
      assertEquals(false, noType0.isNominalType());
      assertEquals(false, noType0.isUnionType());
      assertEquals(false, noType0.isNullType());
      assertNull(noType0.getTemplateTypeName());
      assertEquals(true, noType0.isNullable());
      assertEquals(true, noType0.matchesObjectContext());
      assertEquals(0, noType0.getExtendedInterfacesCount());
      assertEquals(false, noType0.isReturnTypeInferred());
      assertEquals(true, noType0.isConstructor());
      assertEquals(false, noType0.isNoResolvedType());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertEquals(2147483647, noType0.getMaxArguments());
      assertEquals(false, noType0.isOrdinaryFunction());
      assertEquals(true, noType0.canBeCalled());
      assertEquals(false, noType0.isFunctionPrototypeType());
      assertEquals(false, noType0.isNumberValueType());
      assertEquals("None", noType0.toString());
      assertEquals(false, noType0.isResolved());
      assertEquals(true, noType0.matchesStringContext());
      assertEquals(false, noType0.isInterface());
      assertEquals(false, noType0.isStringValueType());
      assertEquals(true, noType0.matchesNumberContext());
      assertEquals(false, noType0.isAllType());
      assertEquals(2147483647, noType0.getPropertiesCount());
      assertEquals(false, noType0.hasCachedValues());
      assertEquals(false, noType0.isRecordType());
      assertEquals(false, noType0.isTemplateType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(noType0);
      
      Node node0 = noType0.getSource();
      assertEquals(false, noType0.isEnumElementType());
      assertEquals(false, noType0.isNoObjectType());
      assertEquals(false, noType0.isBooleanValueType());
      assertEquals(false, noType0.isVoidType());
      assertNull(noType0.getReferenceName());
      assertEquals(false, noType0.isCheckedUnknownType());
      assertEquals(true, noType0.isNoType());
      assertEquals(false, noType0.isFunctionType());
      assertEquals(false, noType0.isEnumType());
      assertEquals(true, noType0.hasInstanceType());
      assertEquals(false, noType0.isNominalType());
      assertEquals(false, noType0.isUnionType());
      assertEquals(false, noType0.isNullType());
      assertNull(noType0.getTemplateTypeName());
      assertEquals(true, noType0.isNullable());
      assertEquals(true, noType0.matchesObjectContext());
      assertEquals(0, noType0.getExtendedInterfacesCount());
      assertEquals(false, noType0.isReturnTypeInferred());
      assertEquals(true, noType0.isConstructor());
      assertEquals(false, noType0.isNoResolvedType());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertEquals(2147483647, noType0.getMaxArguments());
      assertEquals(false, noType0.isOrdinaryFunction());
      assertEquals(true, noType0.canBeCalled());
      assertEquals(false, noType0.isFunctionPrototypeType());
      assertEquals(false, noType0.isNumberValueType());
      assertEquals("None", noType0.toString());
      assertEquals(false, noType0.isResolved());
      assertEquals(true, noType0.matchesStringContext());
      assertEquals(false, noType0.isInterface());
      assertEquals(false, noType0.isStringValueType());
      assertEquals(true, noType0.matchesNumberContext());
      assertEquals(false, noType0.isAllType());
      assertEquals(2147483647, noType0.getPropertiesCount());
      assertEquals(false, noType0.hasCachedValues());
      assertEquals(false, noType0.isRecordType());
      assertEquals(false, noType0.isTemplateType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNull(node0);
      
      // Undeclared exception!
      try {
        FunctionType functionType0 = FunctionType.forInterface(jSTypeRegistry0, string0, node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test58()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      boolean boolean0 = true;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0, boolean0);
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      assertEquals(false, noResolvedType0.isNominalType());
      assertEquals(false, noResolvedType0.isCheckedUnknownType());
      assertEquals(true, noResolvedType0.isNullable());
      assertEquals(false, noResolvedType0.isEnumType());
      assertEquals(false, noResolvedType0.isVoidType());
      assertNull(noResolvedType0.getReferenceName());
      assertEquals(false, noResolvedType0.isInterface());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noResolvedType0.isReturnTypeInferred());
      assertEquals(false, noResolvedType0.isNoObjectType());
      assertEquals(false, noResolvedType0.isAllType());
      assertEquals(false, noResolvedType0.isStringValueType());
      assertEquals(false, noResolvedType0.isBooleanValueType());
      assertEquals(true, noResolvedType0.matchesStringContext());
      assertEquals(true, noResolvedType0.matchesObjectContext());
      assertEquals(false, noResolvedType0.isUnionType());
      assertEquals(true, noResolvedType0.hasInstanceType());
      assertEquals(2147483647, noResolvedType0.getPropertiesCount());
      assertEquals(false, noResolvedType0.isFunctionType());
      assertEquals(false, noResolvedType0.isOrdinaryFunction());
      assertEquals(false, noResolvedType0.isFunctionPrototypeType());
      assertEquals(true, noResolvedType0.canBeCalled());
      assertEquals(false, noResolvedType0.isNullType());
      assertEquals(false, noResolvedType0.isRecordType());
      assertEquals(2147483647, noResolvedType0.getMaxArguments());
      assertEquals(false, noResolvedType0.isEnumElementType());
      assertEquals(true, noResolvedType0.matchesNumberContext());
      assertEquals(false, noResolvedType0.isResolved());
      assertEquals(false, noResolvedType0.hasCachedValues());
      assertEquals(false, noResolvedType0.isTemplateType());
      assertNull(noResolvedType0.getTemplateTypeName());
      assertEquals(true, noResolvedType0.isConstructor());
      assertEquals(false, noResolvedType0.isNumberValueType());
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(noResolvedType0);
      
      List<FunctionType> list0 = noResolvedType0.getSubTypes();
      assertEquals(false, noResolvedType0.isNominalType());
      assertEquals(false, noResolvedType0.isCheckedUnknownType());
      assertEquals(true, noResolvedType0.isNullable());
      assertEquals(false, noResolvedType0.isEnumType());
      assertEquals(false, noResolvedType0.isVoidType());
      assertNull(noResolvedType0.getReferenceName());
      assertEquals(false, noResolvedType0.isInterface());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noResolvedType0.isReturnTypeInferred());
      assertEquals(false, noResolvedType0.isNoObjectType());
      assertEquals(false, noResolvedType0.isAllType());
      assertEquals(false, noResolvedType0.isStringValueType());
      assertEquals(false, noResolvedType0.isBooleanValueType());
      assertEquals(true, noResolvedType0.matchesStringContext());
      assertEquals(true, noResolvedType0.matchesObjectContext());
      assertEquals(false, noResolvedType0.isUnionType());
      assertEquals(true, noResolvedType0.hasInstanceType());
      assertEquals(2147483647, noResolvedType0.getPropertiesCount());
      assertEquals(false, noResolvedType0.isFunctionType());
      assertEquals(false, noResolvedType0.isOrdinaryFunction());
      assertEquals(false, noResolvedType0.isFunctionPrototypeType());
      assertEquals(true, noResolvedType0.canBeCalled());
      assertEquals(false, noResolvedType0.isNullType());
      assertEquals(false, noResolvedType0.isRecordType());
      assertEquals(2147483647, noResolvedType0.getMaxArguments());
      assertEquals(false, noResolvedType0.isEnumElementType());
      assertEquals(true, noResolvedType0.matchesNumberContext());
      assertEquals(false, noResolvedType0.isResolved());
      assertEquals(false, noResolvedType0.hasCachedValues());
      assertEquals(false, noResolvedType0.isTemplateType());
      assertNull(noResolvedType0.getTemplateTypeName());
      assertEquals(true, noResolvedType0.isConstructor());
      assertEquals(false, noResolvedType0.isNumberValueType());
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNull(list0);
  }
}
