/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 21:57:00 GMT 2014
 */

package com.google.javascript.jscomp;

import static org.junit.Assert.*;
import org.junit.Test;
import com.google.javascript.jscomp.CodingConvention;
import com.google.javascript.jscomp.Compiler;
import com.google.javascript.jscomp.CompilerOptions;
import com.google.javascript.jscomp.DefaultPassConfig;
import com.google.javascript.jscomp.JSSourceFile;
import com.google.javascript.jscomp.Result;
import com.google.javascript.jscomp.RuntimeTypeCheck;
import com.google.javascript.jscomp.Scope;
import com.google.javascript.jscomp.SyntacticScopeCreator;
import com.google.javascript.jscomp.TypedScopeCreator;
import com.google.javascript.rhino.Node;
import java.util.List;
import java.util.Stack;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;

import org.evosuite.runtime.mock.java.lang.MockRuntimeException;
import org.junit.runner.RunWith;


public class TypedScopeCreatorEvoSuite_branch_Test  {

  @Test
  public void test0()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      //  // Unstable assertion: assertNotNull(compiler0);
      
      Stack<JSSourceFile> stack0 = new Stack<JSSourceFile>();
      //  // Unstable assertion: assertNotNull(stack0);
      //  // Unstable assertion: assertEquals(true, stack0.isEmpty());
      //  // Unstable assertion: assertEquals(10, stack0.capacity());
      //  // Unstable assertion: assertEquals(true, stack0.empty());
      //  // Unstable assertion: assertEquals(0, stack0.size());
      //  // Unstable assertion: assertEquals("[]", stack0.toString());
      
      CompilerOptions compilerOptions0 = new CompilerOptions();
      //  // Unstable assertion: assertNotNull(compilerOptions0);
      //  // Unstable assertion: assertFalse(compilerOptions0.gatherCssNames);
      //  // Unstable assertion: assertFalse(compilerOptions0.checkSuspiciousCode);
      //  // Unstable assertion: assertFalse(compilerOptions0.aliasExternals);
      //  // Unstable assertion: assertFalse(compilerOptions0.crossModuleCodeMotion);
      //  // Unstable assertion: assertFalse(compilerOptions0.inferTypesInGlobalScope);
      //  // Unstable assertion: assertFalse(compilerOptions0.computeFunctionSideEffects);
      //  // Unstable assertion: assertFalse(compilerOptions0.reserveRawExports);
      //  // Unstable assertion: assertFalse(compilerOptions0.collapseVariableDeclarations);
      //  // Unstable assertion: assertFalse(compilerOptions0.checkDuplicateMessages);
      //  // Unstable assertion: assertFalse(compilerOptions0.checkEs5Strict);
      //  // Unstable assertion: assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
      //  // Unstable assertion: assertFalse(compilerOptions0.optimizeArgumentsArray);
      //  // Unstable assertion: assertFalse(compilerOptions0.checkSymbols);
      //  // Unstable assertion: assertFalse(compilerOptions0.collapseProperties);
      //  // Unstable assertion: assertFalse(compilerOptions0.ignoreCajaProperties);
      //  // Unstable assertion: assertFalse(compilerOptions0.inlineConstantVars);
      //  // Unstable assertion: assertFalse(compilerOptions0.checkControlStructures);
      //  // Unstable assertion: assertFalse(compilerOptions0.collapseObjectLiterals);
      //  // Unstable assertion: assertFalse(compilerOptions0.rewriteFunctionExpressions);
      //  // Unstable assertion: assertFalse(compilerOptions0.removeTryCatchFinally);
      //  // Unstable assertion: assertFalse(compilerOptions0.aliasAllStrings);
      //  // Unstable assertion: assertFalse(compilerOptions0.printInputDelimiter);
      //  // Unstable assertion: assertFalse(compilerOptions0.closurePass);
      //  // Unstable assertion: assertFalse(compilerOptions0.removeUnusedVars);
      //  // Unstable assertion: assertFalse(compilerOptions0.removeEmptyFunctions);
      //  // Unstable assertion: assertFalse(compilerOptions0.ambiguateProperties);
      //  // Unstable assertion: assertFalse(compilerOptions0.groupVariableDeclarations);
      //  // Unstable assertion: assertFalse(compilerOptions0.recordFunctionInformation);
      //  // Unstable assertion: assertFalse(compilerOptions0.ideMode);
      //  // Unstable assertion: assertFalse(compilerOptions0.inlineFunctions);
      //  // Unstable assertion: assertFalse(compilerOptions0.inlineLocalVariables);
      //  // Unstable assertion: assertFalse(compilerOptions0.instrumentForCoverageOnly);
      //  // Unstable assertion: assertFalse(compilerOptions0.smartNameRemoval);
      //  // Unstable assertion: assertFalse(compilerOptions0.crossModuleMethodMotion);
      //  // Unstable assertion: assertFalse(compilerOptions0.moveFunctionDeclarations);
      //  // Unstable assertion: assertFalse(compilerOptions0.inlineGetters);
      //  // Unstable assertion: assertFalse(compilerOptions0.inlineVariables);
      //  // Unstable assertion: assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
      //  // Unstable assertion: assertFalse(compilerOptions0.markNoSideEffectCalls);
      //  // Unstable assertion: assertFalse(compilerOptions0.prettyPrint);
      //  // Unstable assertion: assertFalse(compilerOptions0.specializeInitialModule);
      //  // Unstable assertion: assertFalse(compilerOptions0.convertToDottedProperties);
      //  // Unstable assertion: assertFalse(compilerOptions0.disambiguateProperties);
      //  // Unstable assertion: assertFalse(compilerOptions0.inlineLocalFunctions);
      //  // Unstable assertion: assertFalse(compilerOptions0.checkCaja);
      //  // Unstable assertion: assertFalse(compilerOptions0.foldConstants);
      //  // Unstable assertion: assertFalse(compilerOptions0.collapseAnonymousFunctions);
      //  // Unstable assertion: assertFalse(compilerOptions0.lineBreak);
      //  // Unstable assertion: assertFalse(compilerOptions0.optimizeCalls);
      //  // Unstable assertion: assertFalse(compilerOptions0.deadAssignmentElimination);
      //  // Unstable assertion: assertFalse(compilerOptions0.flowSensitiveInlineVariables);
      //  // Unstable assertion: assertFalse(compilerOptions0.markAsCompiled);
      //  // Unstable assertion: assertFalse(compilerOptions0.exportTestFunctions);
      //  // Unstable assertion: assertFalse(compilerOptions0.generatePseudoNames);
      //  // Unstable assertion: assertFalse(compilerOptions0.removeUnusedLocalVars);
      //  // Unstable assertion: assertFalse(compilerOptions0.tightenTypes);
      //  // Unstable assertion: assertFalse(compilerOptions0.instrumentForCoverage);
      //  // Unstable assertion: assertFalse(compilerOptions0.strictMessageReplacement);
      //  // Unstable assertion: assertFalse(compilerOptions0.labelRenaming);
      //  // Unstable assertion: assertFalse(compilerOptions0.aliasKeywords);
      //  // Unstable assertion: assertFalse(compilerOptions0.checkTypedPropertyCalls);
      //  // Unstable assertion: assertFalse(compilerOptions0.coalesceVariableNames);
      //  // Unstable assertion: assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
      //  // Unstable assertion: assertFalse(compilerOptions0.optimizeParameters);
      //  // Unstable assertion: assertFalse(compilerOptions0.allowLegacyJsMessages);
      //  // Unstable assertion: assertFalse(compilerOptions0.devirtualizePrototypeMethods);
      //  // Unstable assertion: assertFalse(compilerOptions0.checkTypes);
      //  // Unstable assertion: assertFalse(compilerOptions0.assumeClosuresOnlyCaptureReferences);
      //  // Unstable assertion: assertFalse(compilerOptions0.generateExports);
      //  // Unstable assertion: assertFalse(compilerOptions0.removeDeadCode);
      //  // Unstable assertion: assertFalse(compilerOptions0.optimizeReturns);
      //  // Unstable assertion: assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compilerOptions0.getLanguageIn());
      //  // Unstable assertion: assertEquals(false, compilerOptions0.getInferTypes());
      //  // Unstable assertion: assertEquals(false, compilerOptions0.assumeClosuresOnlyCaptureReferences());
      //  // Unstable assertion: assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
      //  // Unstable assertion: assertEquals(CompilerOptions.TweakProcessing.OFF, compilerOptions0.getTweakProcessing());
      //  // Unstable assertion: assertNull(compilerOptions0.getLanguageOut());
      //  // Unstable assertion: assertEquals(false, compilerOptions0.isExternExportsEnabled());
      //  // Unstable assertion: assertEquals(false, compilerOptions0.assumeStrictThis());
      
      Result result0 = compiler0.compile((List<JSSourceFile>) stack0, (List<JSSourceFile>) stack0, compilerOptions0);
      //  // Unstable assertion: assertNotNull(result0);
      //  // Unstable assertion: assertFalse(compilerOptions0.gatherCssNames);
      //  // Unstable assertion: assertFalse(compilerOptions0.checkSuspiciousCode);
      //  // Unstable assertion: assertFalse(compilerOptions0.aliasExternals);
      //  // Unstable assertion: assertFalse(compilerOptions0.crossModuleCodeMotion);
      //  // Unstable assertion: assertFalse(compilerOptions0.inferTypesInGlobalScope);
      //  // Unstable assertion: assertFalse(compilerOptions0.computeFunctionSideEffects);
      //  // Unstable assertion: assertFalse(compilerOptions0.reserveRawExports);
      //  // Unstable assertion: assertFalse(compilerOptions0.collapseVariableDeclarations);
      //  // Unstable assertion: assertFalse(compilerOptions0.checkDuplicateMessages);
      //  // Unstable assertion: assertFalse(compilerOptions0.checkEs5Strict);
      //  // Unstable assertion: assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
      //  // Unstable assertion: assertFalse(compilerOptions0.optimizeArgumentsArray);
      //  // Unstable assertion: assertFalse(compilerOptions0.checkSymbols);
      //  // Unstable assertion: assertFalse(compilerOptions0.collapseProperties);
      //  // Unstable assertion: assertFalse(compilerOptions0.ignoreCajaProperties);
      //  // Unstable assertion: assertFalse(compilerOptions0.inlineConstantVars);
      //  // Unstable assertion: assertFalse(compilerOptions0.checkControlStructures);
      //  // Unstable assertion: assertFalse(compilerOptions0.collapseObjectLiterals);
      //  // Unstable assertion: assertFalse(compilerOptions0.rewriteFunctionExpressions);
      //  // Unstable assertion: assertFalse(compilerOptions0.removeTryCatchFinally);
      //  // Unstable assertion: assertFalse(compilerOptions0.aliasAllStrings);
      //  // Unstable assertion: assertFalse(compilerOptions0.printInputDelimiter);
      //  // Unstable assertion: assertFalse(compilerOptions0.closurePass);
      //  // Unstable assertion: assertFalse(compilerOptions0.removeUnusedVars);
      //  // Unstable assertion: assertFalse(compilerOptions0.removeEmptyFunctions);
      //  // Unstable assertion: assertFalse(compilerOptions0.ambiguateProperties);
      //  // Unstable assertion: assertFalse(compilerOptions0.groupVariableDeclarations);
      //  // Unstable assertion: assertFalse(compilerOptions0.recordFunctionInformation);
      //  // Unstable assertion: assertFalse(compilerOptions0.ideMode);
      //  // Unstable assertion: assertFalse(compilerOptions0.inlineFunctions);
      //  // Unstable assertion: assertFalse(compilerOptions0.inlineLocalVariables);
      //  // Unstable assertion: assertFalse(compilerOptions0.instrumentForCoverageOnly);
      //  // Unstable assertion: assertFalse(compilerOptions0.smartNameRemoval);
      //  // Unstable assertion: assertFalse(compilerOptions0.crossModuleMethodMotion);
      //  // Unstable assertion: assertFalse(compilerOptions0.moveFunctionDeclarations);
      //  // Unstable assertion: assertFalse(compilerOptions0.inlineGetters);
      //  // Unstable assertion: assertFalse(compilerOptions0.inlineVariables);
      //  // Unstable assertion: assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
      //  // Unstable assertion: assertFalse(compilerOptions0.markNoSideEffectCalls);
      //  // Unstable assertion: assertFalse(compilerOptions0.prettyPrint);
      //  // Unstable assertion: assertFalse(compilerOptions0.specializeInitialModule);
      //  // Unstable assertion: assertFalse(compilerOptions0.convertToDottedProperties);
      //  // Unstable assertion: assertFalse(compilerOptions0.disambiguateProperties);
      //  // Unstable assertion: assertFalse(compilerOptions0.inlineLocalFunctions);
      //  // Unstable assertion: assertFalse(compilerOptions0.checkCaja);
      //  // Unstable assertion: assertFalse(compilerOptions0.foldConstants);
      //  // Unstable assertion: assertFalse(compilerOptions0.collapseAnonymousFunctions);
      //  // Unstable assertion: assertFalse(compilerOptions0.lineBreak);
      //  // Unstable assertion: assertFalse(compilerOptions0.optimizeCalls);
      //  // Unstable assertion: assertFalse(compilerOptions0.deadAssignmentElimination);
      //  // Unstable assertion: assertFalse(compilerOptions0.flowSensitiveInlineVariables);
      //  // Unstable assertion: assertFalse(compilerOptions0.markAsCompiled);
      //  // Unstable assertion: assertFalse(compilerOptions0.exportTestFunctions);
      //  // Unstable assertion: assertFalse(compilerOptions0.generatePseudoNames);
      //  // Unstable assertion: assertFalse(compilerOptions0.removeUnusedLocalVars);
      //  // Unstable assertion: assertFalse(compilerOptions0.tightenTypes);
      //  // Unstable assertion: assertFalse(compilerOptions0.instrumentForCoverage);
      //  // Unstable assertion: assertFalse(compilerOptions0.strictMessageReplacement);
      //  // Unstable assertion: assertFalse(compilerOptions0.labelRenaming);
      //  // Unstable assertion: assertFalse(compilerOptions0.aliasKeywords);
      //  // Unstable assertion: assertFalse(compilerOptions0.checkTypedPropertyCalls);
      //  // Unstable assertion: assertFalse(compilerOptions0.coalesceVariableNames);
      //  // Unstable assertion: assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
      //  // Unstable assertion: assertFalse(compilerOptions0.optimizeParameters);
      //  // Unstable assertion: assertFalse(compilerOptions0.allowLegacyJsMessages);
      //  // Unstable assertion: assertFalse(compilerOptions0.devirtualizePrototypeMethods);
      //  // Unstable assertion: assertFalse(compilerOptions0.checkTypes);
      //  // Unstable assertion: assertFalse(compilerOptions0.assumeClosuresOnlyCaptureReferences);
      //  // Unstable assertion: assertFalse(compilerOptions0.generateExports);
      //  // Unstable assertion: assertFalse(compilerOptions0.removeDeadCode);
      //  // Unstable assertion: assertFalse(compilerOptions0.optimizeReturns);
      //  // Unstable assertion: assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compilerOptions0.getLanguageIn());
      //  // Unstable assertion: assertEquals(false, compilerOptions0.getInferTypes());
      //  // Unstable assertion: assertEquals(false, compilerOptions0.assumeClosuresOnlyCaptureReferences());
      //  // Unstable assertion: assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
      //  // Unstable assertion: assertEquals(CompilerOptions.TweakProcessing.OFF, compilerOptions0.getTweakProcessing());
      //  // Unstable assertion: assertNull(compilerOptions0.getLanguageOut());
      //  // Unstable assertion: assertEquals(false, compilerOptions0.isExternExportsEnabled());
      //  // Unstable assertion: assertEquals(false, compilerOptions0.assumeStrictThis());
      //  // Unstable assertion: assertEquals(true, stack0.isEmpty());
      //  // Unstable assertion: assertEquals(10, stack0.capacity());
      //  // Unstable assertion: assertEquals(true, stack0.empty());
      //  // Unstable assertion: assertEquals(0, stack0.size());
      //  // Unstable assertion: assertEquals("[]", stack0.toString());
      //  // Unstable assertion: assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      //  // Unstable assertion: assertEquals(false, compiler0.isIdeMode());
      //  // Unstable assertion: assertEquals(false, compiler0.acceptConstKeyword());
      //  // Unstable assertion: assertEquals(false, compiler0.hasErrors());
      //  // Unstable assertion: assertEquals(false, compiler0.isTypeCheckingEnabled());
      //  // Unstable assertion: assertEquals(0, compiler0.getErrorCount());
      //  // Unstable assertion: assertEquals(0, compiler0.getWarningCount());
      
      Scope scope0 = SyntacticScopeCreator.generateUntypedTopScope(compiler0);
      //  // Unstable assertion: assertNotNull(scope0);
      //  // Unstable assertion: assertEquals(true, scope0.isGlobal());
      //  // Unstable assertion: assertEquals(false, scope0.isLocal());
      //  // Unstable assertion: assertEquals(0, scope0.getVarCount());
      //  // Unstable assertion: assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      //  // Unstable assertion: assertEquals(false, compiler0.isIdeMode());
      //  // Unstable assertion: assertEquals(false, compiler0.acceptConstKeyword());
      //  // Unstable assertion: assertEquals(false, compiler0.hasErrors());
      //  // Unstable assertion: assertEquals(false, compiler0.isTypeCheckingEnabled());
      //  // Unstable assertion: assertEquals(0, compiler0.getErrorCount());
      //  // Unstable assertion: assertEquals(0, compiler0.getWarningCount());
      
      Scope.Arguments scope_Arguments0 = (Scope.Arguments)scope0.getArgumentsVar();
      //  // Unstable assertion: assertNotNull(scope_Arguments0);
      //  // Unstable assertion: assertEquals(true, scope0.isGlobal());
      //  // Unstable assertion: assertEquals(false, scope0.isLocal());
      //  // Unstable assertion: assertEquals(0, scope0.getVarCount());
      //  // Unstable assertion: assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      //  // Unstable assertion: assertEquals(false, compiler0.isIdeMode());
      //  // Unstable assertion: assertEquals(false, compiler0.acceptConstKeyword());
      //  // Unstable assertion: assertEquals(false, compiler0.hasErrors());
      //  // Unstable assertion: assertEquals(false, compiler0.isTypeCheckingEnabled());
      //  // Unstable assertion: assertEquals(0, compiler0.getErrorCount());
      //  // Unstable assertion: assertEquals(0, compiler0.getWarningCount());
      
      CodingConvention codingConvention0 = compilerOptions0.getCodingConvention();
      //  // Unstable assertion: assertNull(codingConvention0);
      //  // Unstable assertion: assertFalse(compilerOptions0.gatherCssNames);
      //  // Unstable assertion: assertFalse(compilerOptions0.checkSuspiciousCode);
      //  // Unstable assertion: assertFalse(compilerOptions0.aliasExternals);
      //  // Unstable assertion: assertFalse(compilerOptions0.crossModuleCodeMotion);
      //  // Unstable assertion: assertFalse(compilerOptions0.inferTypesInGlobalScope);
      //  // Unstable assertion: assertFalse(compilerOptions0.computeFunctionSideEffects);
      //  // Unstable assertion: assertFalse(compilerOptions0.reserveRawExports);
      //  // Unstable assertion: assertFalse(compilerOptions0.collapseVariableDeclarations);
      //  // Unstable assertion: assertFalse(compilerOptions0.checkDuplicateMessages);
      //  // Unstable assertion: assertFalse(compilerOptions0.checkEs5Strict);
      //  // Unstable assertion: assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
      //  // Unstable assertion: assertFalse(compilerOptions0.optimizeArgumentsArray);
      //  // Unstable assertion: assertFalse(compilerOptions0.checkSymbols);
      //  // Unstable assertion: assertFalse(compilerOptions0.collapseProperties);
      //  // Unstable assertion: assertFalse(compilerOptions0.ignoreCajaProperties);
      //  // Unstable assertion: assertFalse(compilerOptions0.inlineConstantVars);
      //  // Unstable assertion: assertFalse(compilerOptions0.checkControlStructures);
      //  // Unstable assertion: assertFalse(compilerOptions0.collapseObjectLiterals);
      //  // Unstable assertion: assertFalse(compilerOptions0.rewriteFunctionExpressions);
      //  // Unstable assertion: assertFalse(compilerOptions0.removeTryCatchFinally);
      //  // Unstable assertion: assertFalse(compilerOptions0.aliasAllStrings);
      //  // Unstable assertion: assertFalse(compilerOptions0.printInputDelimiter);
      //  // Unstable assertion: assertFalse(compilerOptions0.closurePass);
      //  // Unstable assertion: assertFalse(compilerOptions0.removeUnusedVars);
      //  // Unstable assertion: assertFalse(compilerOptions0.removeEmptyFunctions);
      //  // Unstable assertion: assertFalse(compilerOptions0.ambiguateProperties);
      //  // Unstable assertion: assertFalse(compilerOptions0.groupVariableDeclarations);
      //  // Unstable assertion: assertFalse(compilerOptions0.recordFunctionInformation);
      //  // Unstable assertion: assertFalse(compilerOptions0.ideMode);
      //  // Unstable assertion: assertFalse(compilerOptions0.inlineFunctions);
      //  // Unstable assertion: assertFalse(compilerOptions0.inlineLocalVariables);
      //  // Unstable assertion: assertFalse(compilerOptions0.instrumentForCoverageOnly);
      //  // Unstable assertion: assertFalse(compilerOptions0.smartNameRemoval);
      //  // Unstable assertion: assertFalse(compilerOptions0.crossModuleMethodMotion);
      //  // Unstable assertion: assertFalse(compilerOptions0.moveFunctionDeclarations);
      //  // Unstable assertion: assertFalse(compilerOptions0.inlineGetters);
      //  // Unstable assertion: assertFalse(compilerOptions0.inlineVariables);
      //  // Unstable assertion: assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
      //  // Unstable assertion: assertFalse(compilerOptions0.markNoSideEffectCalls);
      //  // Unstable assertion: assertFalse(compilerOptions0.prettyPrint);
      //  // Unstable assertion: assertFalse(compilerOptions0.specializeInitialModule);
      //  // Unstable assertion: assertFalse(compilerOptions0.convertToDottedProperties);
      //  // Unstable assertion: assertFalse(compilerOptions0.disambiguateProperties);
      //  // Unstable assertion: assertFalse(compilerOptions0.inlineLocalFunctions);
      //  // Unstable assertion: assertFalse(compilerOptions0.checkCaja);
      //  // Unstable assertion: assertFalse(compilerOptions0.foldConstants);
      //  // Unstable assertion: assertFalse(compilerOptions0.collapseAnonymousFunctions);
      //  // Unstable assertion: assertFalse(compilerOptions0.lineBreak);
      //  // Unstable assertion: assertFalse(compilerOptions0.optimizeCalls);
      //  // Unstable assertion: assertFalse(compilerOptions0.deadAssignmentElimination);
      //  // Unstable assertion: assertFalse(compilerOptions0.flowSensitiveInlineVariables);
      //  // Unstable assertion: assertFalse(compilerOptions0.markAsCompiled);
      //  // Unstable assertion: assertFalse(compilerOptions0.exportTestFunctions);
      //  // Unstable assertion: assertFalse(compilerOptions0.generatePseudoNames);
      //  // Unstable assertion: assertFalse(compilerOptions0.removeUnusedLocalVars);
      //  // Unstable assertion: assertFalse(compilerOptions0.tightenTypes);
      //  // Unstable assertion: assertFalse(compilerOptions0.instrumentForCoverage);
      //  // Unstable assertion: assertFalse(compilerOptions0.strictMessageReplacement);
      //  // Unstable assertion: assertFalse(compilerOptions0.labelRenaming);
      //  // Unstable assertion: assertFalse(compilerOptions0.aliasKeywords);
      //  // Unstable assertion: assertFalse(compilerOptions0.checkTypedPropertyCalls);
      //  // Unstable assertion: assertFalse(compilerOptions0.coalesceVariableNames);
      //  // Unstable assertion: assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
      //  // Unstable assertion: assertFalse(compilerOptions0.optimizeParameters);
      //  // Unstable assertion: assertFalse(compilerOptions0.allowLegacyJsMessages);
      //  // Unstable assertion: assertFalse(compilerOptions0.devirtualizePrototypeMethods);
      //  // Unstable assertion: assertFalse(compilerOptions0.checkTypes);
      //  // Unstable assertion: assertFalse(compilerOptions0.assumeClosuresOnlyCaptureReferences);
      //  // Unstable assertion: assertFalse(compilerOptions0.generateExports);
      //  // Unstable assertion: assertFalse(compilerOptions0.removeDeadCode);
      //  // Unstable assertion: assertFalse(compilerOptions0.optimizeReturns);
      //  // Unstable assertion: assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compilerOptions0.getLanguageIn());
      //  // Unstable assertion: assertEquals(false, compilerOptions0.getInferTypes());
      //  // Unstable assertion: assertEquals(false, compilerOptions0.assumeClosuresOnlyCaptureReferences());
      //  // Unstable assertion: assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
      //  // Unstable assertion: assertEquals(CompilerOptions.TweakProcessing.OFF, compilerOptions0.getTweakProcessing());
      //  // Unstable assertion: assertNull(compilerOptions0.getLanguageOut());
      //  // Unstable assertion: assertEquals(false, compilerOptions0.isExternExportsEnabled());
      //  // Unstable assertion: assertEquals(false, compilerOptions0.assumeStrictThis());
      
      TypedScopeCreator typedScopeCreator0 = new TypedScopeCreator(compiler0, codingConvention0);
      //  // Unstable assertion: assertNotNull(typedScopeCreator0);
      //  // Unstable assertion: assertFalse(compilerOptions0.gatherCssNames);
      //  // Unstable assertion: assertFalse(compilerOptions0.checkSuspiciousCode);
      //  // Unstable assertion: assertFalse(compilerOptions0.aliasExternals);
      //  // Unstable assertion: assertFalse(compilerOptions0.crossModuleCodeMotion);
      //  // Unstable assertion: assertFalse(compilerOptions0.inferTypesInGlobalScope);
      //  // Unstable assertion: assertFalse(compilerOptions0.computeFunctionSideEffects);
      //  // Unstable assertion: assertFalse(compilerOptions0.reserveRawExports);
      //  // Unstable assertion: assertFalse(compilerOptions0.collapseVariableDeclarations);
      //  // Unstable assertion: assertFalse(compilerOptions0.checkDuplicateMessages);
      //  // Unstable assertion: assertFalse(compilerOptions0.checkEs5Strict);
      //  // Unstable assertion: assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
      //  // Unstable assertion: assertFalse(compilerOptions0.optimizeArgumentsArray);
      //  // Unstable assertion: assertFalse(compilerOptions0.checkSymbols);
      //  // Unstable assertion: assertFalse(compilerOptions0.collapseProperties);
      //  // Unstable assertion: assertFalse(compilerOptions0.ignoreCajaProperties);
      //  // Unstable assertion: assertFalse(compilerOptions0.inlineConstantVars);
      //  // Unstable assertion: assertFalse(compilerOptions0.checkControlStructures);
      //  // Unstable assertion: assertFalse(compilerOptions0.collapseObjectLiterals);
      //  // Unstable assertion: assertFalse(compilerOptions0.rewriteFunctionExpressions);
      //  // Unstable assertion: assertFalse(compilerOptions0.removeTryCatchFinally);
      //  // Unstable assertion: assertFalse(compilerOptions0.aliasAllStrings);
      //  // Unstable assertion: assertFalse(compilerOptions0.printInputDelimiter);
      //  // Unstable assertion: assertFalse(compilerOptions0.closurePass);
      //  // Unstable assertion: assertFalse(compilerOptions0.removeUnusedVars);
      //  // Unstable assertion: assertFalse(compilerOptions0.removeEmptyFunctions);
      //  // Unstable assertion: assertFalse(compilerOptions0.ambiguateProperties);
      //  // Unstable assertion: assertFalse(compilerOptions0.groupVariableDeclarations);
      //  // Unstable assertion: assertFalse(compilerOptions0.recordFunctionInformation);
      //  // Unstable assertion: assertFalse(compilerOptions0.ideMode);
      //  // Unstable assertion: assertFalse(compilerOptions0.inlineFunctions);
      //  // Unstable assertion: assertFalse(compilerOptions0.inlineLocalVariables);
      //  // Unstable assertion: assertFalse(compilerOptions0.instrumentForCoverageOnly);
      //  // Unstable assertion: assertFalse(compilerOptions0.smartNameRemoval);
      //  // Unstable assertion: assertFalse(compilerOptions0.crossModuleMethodMotion);
      //  // Unstable assertion: assertFalse(compilerOptions0.moveFunctionDeclarations);
      //  // Unstable assertion: assertFalse(compilerOptions0.inlineGetters);
      //  // Unstable assertion: assertFalse(compilerOptions0.inlineVariables);
      //  // Unstable assertion: assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
      //  // Unstable assertion: assertFalse(compilerOptions0.markNoSideEffectCalls);
      //  // Unstable assertion: assertFalse(compilerOptions0.prettyPrint);
      //  // Unstable assertion: assertFalse(compilerOptions0.specializeInitialModule);
      //  // Unstable assertion: assertFalse(compilerOptions0.convertToDottedProperties);
      //  // Unstable assertion: assertFalse(compilerOptions0.disambiguateProperties);
      //  // Unstable assertion: assertFalse(compilerOptions0.inlineLocalFunctions);
      //  // Unstable assertion: assertFalse(compilerOptions0.checkCaja);
      //  // Unstable assertion: assertFalse(compilerOptions0.foldConstants);
      //  // Unstable assertion: assertFalse(compilerOptions0.collapseAnonymousFunctions);
      //  // Unstable assertion: assertFalse(compilerOptions0.lineBreak);
      //  // Unstable assertion: assertFalse(compilerOptions0.optimizeCalls);
      //  // Unstable assertion: assertFalse(compilerOptions0.deadAssignmentElimination);
      //  // Unstable assertion: assertFalse(compilerOptions0.flowSensitiveInlineVariables);
      //  // Unstable assertion: assertFalse(compilerOptions0.markAsCompiled);
      //  // Unstable assertion: assertFalse(compilerOptions0.exportTestFunctions);
      //  // Unstable assertion: assertFalse(compilerOptions0.generatePseudoNames);
      //  // Unstable assertion: assertFalse(compilerOptions0.removeUnusedLocalVars);
      //  // Unstable assertion: assertFalse(compilerOptions0.tightenTypes);
      //  // Unstable assertion: assertFalse(compilerOptions0.instrumentForCoverage);
      //  // Unstable assertion: assertFalse(compilerOptions0.strictMessageReplacement);
      //  // Unstable assertion: assertFalse(compilerOptions0.labelRenaming);
      //  // Unstable assertion: assertFalse(compilerOptions0.aliasKeywords);
      //  // Unstable assertion: assertFalse(compilerOptions0.checkTypedPropertyCalls);
      //  // Unstable assertion: assertFalse(compilerOptions0.coalesceVariableNames);
      //  // Unstable assertion: assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
      //  // Unstable assertion: assertFalse(compilerOptions0.optimizeParameters);
      //  // Unstable assertion: assertFalse(compilerOptions0.allowLegacyJsMessages);
      //  // Unstable assertion: assertFalse(compilerOptions0.devirtualizePrototypeMethods);
      //  // Unstable assertion: assertFalse(compilerOptions0.checkTypes);
      //  // Unstable assertion: assertFalse(compilerOptions0.assumeClosuresOnlyCaptureReferences);
      //  // Unstable assertion: assertFalse(compilerOptions0.generateExports);
      //  // Unstable assertion: assertFalse(compilerOptions0.removeDeadCode);
      //  // Unstable assertion: assertFalse(compilerOptions0.optimizeReturns);
      //  // Unstable assertion: assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compilerOptions0.getLanguageIn());
      //  // Unstable assertion: assertEquals(false, compilerOptions0.getInferTypes());
      //  // Unstable assertion: assertEquals(false, compilerOptions0.assumeClosuresOnlyCaptureReferences());
      //  // Unstable assertion: assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
      //  // Unstable assertion: assertEquals(CompilerOptions.TweakProcessing.OFF, compilerOptions0.getTweakProcessing());
      //  // Unstable assertion: assertNull(compilerOptions0.getLanguageOut());
      //  // Unstable assertion: assertEquals(false, compilerOptions0.isExternExportsEnabled());
      //  // Unstable assertion: assertEquals(false, compilerOptions0.assumeStrictThis());
      //  // Unstable assertion: assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      //  // Unstable assertion: assertEquals(false, compiler0.isIdeMode());
      //  // Unstable assertion: assertEquals(false, compiler0.acceptConstKeyword());
      //  // Unstable assertion: assertEquals(false, compiler0.hasErrors());
      //  // Unstable assertion: assertEquals(false, compiler0.isTypeCheckingEnabled());
      //  // Unstable assertion: assertEquals(0, compiler0.getErrorCount());
      //  // Unstable assertion: assertEquals(0, compiler0.getWarningCount());
      
      Node node0 = RuntimeTypeCheck.getBoilerplateCode(compiler0, compilerOptions0.unaliasableGlobals);
      //  // Unstable assertion: assertNotNull(node0);
      //  // Unstable assertion: assertFalse(compilerOptions0.gatherCssNames);
      //  // Unstable assertion: assertFalse(compilerOptions0.checkSuspiciousCode);
      //  // Unstable assertion: assertFalse(compilerOptions0.aliasExternals);
      //  // Unstable assertion: assertFalse(compilerOptions0.crossModuleCodeMotion);
      //  // Unstable assertion: assertFalse(compilerOptions0.inferTypesInGlobalScope);
      //  // Unstable assertion: assertFalse(compilerOptions0.computeFunctionSideEffects);
      //  // Unstable assertion: assertFalse(compilerOptions0.reserveRawExports);
      //  // Unstable assertion: assertFalse(compilerOptions0.collapseVariableDeclarations);
      //  // Unstable assertion: assertFalse(compilerOptions0.checkDuplicateMessages);
      //  // Unstable assertion: assertFalse(compilerOptions0.checkEs5Strict);
      //  // Unstable assertion: assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
      //  // Unstable assertion: assertFalse(compilerOptions0.optimizeArgumentsArray);
      //  // Unstable assertion: assertFalse(compilerOptions0.checkSymbols);
      //  // Unstable assertion: assertFalse(compilerOptions0.collapseProperties);
      //  // Unstable assertion: assertFalse(compilerOptions0.ignoreCajaProperties);
      //  // Unstable assertion: assertFalse(compilerOptions0.inlineConstantVars);
      //  // Unstable assertion: assertFalse(compilerOptions0.checkControlStructures);
      //  // Unstable assertion: assertFalse(compilerOptions0.collapseObjectLiterals);
      //  // Unstable assertion: assertFalse(compilerOptions0.rewriteFunctionExpressions);
      //  // Unstable assertion: assertFalse(compilerOptions0.removeTryCatchFinally);
      //  // Unstable assertion: assertFalse(compilerOptions0.aliasAllStrings);
      //  // Unstable assertion: assertFalse(compilerOptions0.printInputDelimiter);
      //  // Unstable assertion: assertFalse(compilerOptions0.closurePass);
      //  // Unstable assertion: assertFalse(compilerOptions0.removeUnusedVars);
      //  // Unstable assertion: assertFalse(compilerOptions0.removeEmptyFunctions);
      //  // Unstable assertion: assertFalse(compilerOptions0.ambiguateProperties);
      //  // Unstable assertion: assertFalse(compilerOptions0.groupVariableDeclarations);
      //  // Unstable assertion: assertFalse(compilerOptions0.recordFunctionInformation);
      //  // Unstable assertion: assertFalse(compilerOptions0.ideMode);
      //  // Unstable assertion: assertFalse(compilerOptions0.inlineFunctions);
      //  // Unstable assertion: assertFalse(compilerOptions0.inlineLocalVariables);
      //  // Unstable assertion: assertFalse(compilerOptions0.instrumentForCoverageOnly);
      //  // Unstable assertion: assertFalse(compilerOptions0.smartNameRemoval);
      //  // Unstable assertion: assertFalse(compilerOptions0.crossModuleMethodMotion);
      //  // Unstable assertion: assertFalse(compilerOptions0.moveFunctionDeclarations);
      //  // Unstable assertion: assertFalse(compilerOptions0.inlineGetters);
      //  // Unstable assertion: assertFalse(compilerOptions0.inlineVariables);
      //  // Unstable assertion: assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
      //  // Unstable assertion: assertFalse(compilerOptions0.markNoSideEffectCalls);
      //  // Unstable assertion: assertFalse(compilerOptions0.prettyPrint);
      //  // Unstable assertion: assertFalse(compilerOptions0.specializeInitialModule);
      //  // Unstable assertion: assertFalse(compilerOptions0.convertToDottedProperties);
      //  // Unstable assertion: assertFalse(compilerOptions0.disambiguateProperties);
      //  // Unstable assertion: assertFalse(compilerOptions0.inlineLocalFunctions);
      //  // Unstable assertion: assertFalse(compilerOptions0.checkCaja);
      //  // Unstable assertion: assertFalse(compilerOptions0.foldConstants);
      //  // Unstable assertion: assertFalse(compilerOptions0.collapseAnonymousFunctions);
      //  // Unstable assertion: assertFalse(compilerOptions0.lineBreak);
      //  // Unstable assertion: assertFalse(compilerOptions0.optimizeCalls);
      //  // Unstable assertion: assertFalse(compilerOptions0.deadAssignmentElimination);
      //  // Unstable assertion: assertFalse(compilerOptions0.flowSensitiveInlineVariables);
      //  // Unstable assertion: assertFalse(compilerOptions0.markAsCompiled);
      //  // Unstable assertion: assertFalse(compilerOptions0.exportTestFunctions);
      //  // Unstable assertion: assertFalse(compilerOptions0.generatePseudoNames);
      //  // Unstable assertion: assertFalse(compilerOptions0.removeUnusedLocalVars);
      //  // Unstable assertion: assertFalse(compilerOptions0.tightenTypes);
      //  // Unstable assertion: assertFalse(compilerOptions0.instrumentForCoverage);
      //  // Unstable assertion: assertFalse(compilerOptions0.strictMessageReplacement);
      //  // Unstable assertion: assertFalse(compilerOptions0.labelRenaming);
      //  // Unstable assertion: assertFalse(compilerOptions0.aliasKeywords);
      //  // Unstable assertion: assertFalse(compilerOptions0.checkTypedPropertyCalls);
      //  // Unstable assertion: assertFalse(compilerOptions0.coalesceVariableNames);
      //  // Unstable assertion: assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
      //  // Unstable assertion: assertFalse(compilerOptions0.optimizeParameters);
      //  // Unstable assertion: assertFalse(compilerOptions0.allowLegacyJsMessages);
      //  // Unstable assertion: assertFalse(compilerOptions0.devirtualizePrototypeMethods);
      //  // Unstable assertion: assertFalse(compilerOptions0.checkTypes);
      //  // Unstable assertion: assertFalse(compilerOptions0.assumeClosuresOnlyCaptureReferences);
      //  // Unstable assertion: assertFalse(compilerOptions0.generateExports);
      //  // Unstable assertion: assertFalse(compilerOptions0.removeDeadCode);
      //  // Unstable assertion: assertFalse(compilerOptions0.optimizeReturns);
      //  // Unstable assertion: assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compilerOptions0.getLanguageIn());
      //  // Unstable assertion: assertEquals(false, compilerOptions0.getInferTypes());
      //  // Unstable assertion: assertEquals(false, compilerOptions0.assumeClosuresOnlyCaptureReferences());
      //  // Unstable assertion: assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
      //  // Unstable assertion: assertEquals(CompilerOptions.TweakProcessing.OFF, compilerOptions0.getTweakProcessing());
      //  // Unstable assertion: assertNull(compilerOptions0.getLanguageOut());
      //  // Unstable assertion: assertEquals(false, compilerOptions0.isExternExportsEnabled());
      //  // Unstable assertion: assertEquals(false, compilerOptions0.assumeStrictThis());
      //  // Unstable assertion: assertEquals(true, node0.hasChildren());
      //  // Unstable assertion: assertEquals(false, node0.isUnscopedQualifiedName());
      //  // Unstable assertion: assertEquals(false, node0.isFromExterns());
      //  // Unstable assertion: assertEquals(" [synthetic:1] ", node0.getSourceFileName());
      //  // Unstable assertion: assertEquals(false, node0.hasOneChild());
      //  // Unstable assertion: assertEquals(132, node0.getType());
      //  // Unstable assertion: assertEquals(false, node0.isOptionalArg());
      //  // Unstable assertion: assertEquals(0, node0.getLength());
      //  // Unstable assertion: assertEquals(4096, node0.getSourcePosition());
      //  // Unstable assertion: assertEquals(false, node0.isQuotedString());
      //  // Unstable assertion: assertEquals(false, node0.isLocalResultCall());
      //  // Unstable assertion: assertEquals(0, node0.getCharno());
      //  // Unstable assertion: assertEquals(true, node0.hasMoreThanOneChild());
      //  // Unstable assertion: assertEquals(1, node0.getLineno());
      //  // Unstable assertion: assertEquals(35, node0.getChildCount());
      //  // Unstable assertion: assertEquals(false, node0.isQualifiedName());
      //  // Unstable assertion: assertEquals(false, node0.isNoSideEffectsCall());
      //  // Unstable assertion: assertEquals(false, node0.isOnlyModifiesThisCall());
      //  // Unstable assertion: assertEquals(false, node0.wasEmptyNode());
      //  // Unstable assertion: assertEquals(false, node0.isVarArgs());
      //  // Unstable assertion: assertEquals(true, node0.isSyntheticBlock());
      //  // Unstable assertion: assertEquals(0, node0.getSideEffectFlags());
      //  // Unstable assertion: assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      //  // Unstable assertion: assertEquals(false, compiler0.isIdeMode());
      //  // Unstable assertion: assertEquals(false, compiler0.acceptConstKeyword());
      //  // Unstable assertion: assertEquals(false, compiler0.hasErrors());
      //  // Unstable assertion: assertEquals(false, compiler0.isTypeCheckingEnabled());
      //  // Unstable assertion: assertEquals(0, compiler0.getErrorCount());
      //  // Unstable assertion: assertEquals(66, compiler0.getWarningCount());
      
      // Undeclared exception!
      try {
        Scope scope1 = typedScopeCreator0.createScope(node0, scope0);
       //  fail("Expecting exception: RuntimeException");
       // Unstable assertion
      } catch(RuntimeException e) {
         //
         // INTERNAL COMPILER ERROR.
         // Please report this problem.
         // null
         //   Node(CALL):  [synthetic:1] :272:2
         // })();
         //   Parent(EXPR_RESULT):  [synthetic:1] :264:1
         // (function() {
         //
      }
  }

  @Test
  public void test1()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      //  // Unstable assertion: assertNotNull(compiler0);
      
      Stack<JSSourceFile> stack0 = new Stack<JSSourceFile>();
      //  // Unstable assertion: assertNotNull(stack0);
      //  // Unstable assertion: assertEquals(0, stack0.size());
      //  // Unstable assertion: assertEquals("[]", stack0.toString());
      //  // Unstable assertion: assertEquals(true, stack0.isEmpty());
      //  // Unstable assertion: assertEquals(true, stack0.empty());
      //  // Unstable assertion: assertEquals(10, stack0.capacity());
      
      CompilerOptions compilerOptions0 = new CompilerOptions();
      //  // Unstable assertion: assertNotNull(compilerOptions0);
      //  // Unstable assertion: assertFalse(compilerOptions0.optimizeParameters);
      //  // Unstable assertion: assertFalse(compilerOptions0.generatePseudoNames);
      //  // Unstable assertion: assertFalse(compilerOptions0.lineBreak);
      //  // Unstable assertion: assertFalse(compilerOptions0.removeDeadCode);
      //  // Unstable assertion: assertFalse(compilerOptions0.rewriteFunctionExpressions);
      //  // Unstable assertion: assertFalse(compilerOptions0.checkTypes);
      //  // Unstable assertion: assertFalse(compilerOptions0.exportTestFunctions);
      //  // Unstable assertion: assertFalse(compilerOptions0.instrumentForCoverage);
      //  // Unstable assertion: assertFalse(compilerOptions0.markAsCompiled);
      //  // Unstable assertion: assertFalse(compilerOptions0.inlineLocalFunctions);
      //  // Unstable assertion: assertFalse(compilerOptions0.ambiguateProperties);
      //  // Unstable assertion: assertFalse(compilerOptions0.crossModuleCodeMotion);
      //  // Unstable assertion: assertFalse(compilerOptions0.smartNameRemoval);
      //  // Unstable assertion: assertFalse(compilerOptions0.inlineLocalVariables);
      //  // Unstable assertion: assertFalse(compilerOptions0.recordFunctionInformation);
      //  // Unstable assertion: assertFalse(compilerOptions0.checkTypedPropertyCalls);
      //  // Unstable assertion: assertFalse(compilerOptions0.removeEmptyFunctions);
      //  // Unstable assertion: assertFalse(compilerOptions0.optimizeCalls);
      //  // Unstable assertion: assertFalse(compilerOptions0.aliasExternals);
      //  // Unstable assertion: assertFalse(compilerOptions0.flowSensitiveInlineVariables);
      //  // Unstable assertion: assertFalse(compilerOptions0.instrumentForCoverageOnly);
      //  // Unstable assertion: assertFalse(compilerOptions0.ignoreCajaProperties);
      //  // Unstable assertion: assertFalse(compilerOptions0.crossModuleMethodMotion);
      //  // Unstable assertion: assertFalse(compilerOptions0.collapseVariableDeclarations);
      //  // Unstable assertion: assertFalse(compilerOptions0.collapseProperties);
      //  // Unstable assertion: assertFalse(compilerOptions0.inlineFunctions);
      //  // Unstable assertion: assertFalse(compilerOptions0.checkSymbols);
      //  // Unstable assertion: assertFalse(compilerOptions0.assumeClosuresOnlyCaptureReferences);
      //  // Unstable assertion: assertFalse(compilerOptions0.checkControlStructures);
      //  // Unstable assertion: assertFalse(compilerOptions0.aliasAllStrings);
      //  // Unstable assertion: assertFalse(compilerOptions0.removeTryCatchFinally);
      //  // Unstable assertion: assertFalse(compilerOptions0.markNoSideEffectCalls);
      //  // Unstable assertion: assertFalse(compilerOptions0.checkDuplicateMessages);
      //  // Unstable assertion: assertFalse(compilerOptions0.inferTypesInGlobalScope);
      //  // Unstable assertion: assertFalse(compilerOptions0.foldConstants);
      //  // Unstable assertion: assertFalse(compilerOptions0.computeFunctionSideEffects);
      //  // Unstable assertion: assertFalse(compilerOptions0.coalesceVariableNames);
      //  // Unstable assertion: assertFalse(compilerOptions0.collapseAnonymousFunctions);
      //  // Unstable assertion: assertFalse(compilerOptions0.reserveRawExports);
      //  // Unstable assertion: assertFalse(compilerOptions0.labelRenaming);
      //  // Unstable assertion: assertFalse(compilerOptions0.strictMessageReplacement);
      //  // Unstable assertion: assertFalse(compilerOptions0.aliasKeywords);
      //  // Unstable assertion: assertFalse(compilerOptions0.allowLegacyJsMessages);
      //  // Unstable assertion: assertFalse(compilerOptions0.closurePass);
      //  // Unstable assertion: assertFalse(compilerOptions0.prettyPrint);
      //  // Unstable assertion: assertFalse(compilerOptions0.checkCaja);
      //  // Unstable assertion: assertFalse(compilerOptions0.optimizeArgumentsArray);
      //  // Unstable assertion: assertFalse(compilerOptions0.inlineVariables);
      //  // Unstable assertion: assertFalse(compilerOptions0.tightenTypes);
      //  // Unstable assertion: assertFalse(compilerOptions0.inlineGetters);
      //  // Unstable assertion: assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
      //  // Unstable assertion: assertFalse(compilerOptions0.gatherCssNames);
      //  // Unstable assertion: assertFalse(compilerOptions0.checkEs5Strict);
      //  // Unstable assertion: assertFalse(compilerOptions0.generateExports);
      //  // Unstable assertion: assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
      //  // Unstable assertion: assertFalse(compilerOptions0.devirtualizePrototypeMethods);
      //  // Unstable assertion: assertFalse(compilerOptions0.inlineConstantVars);
      //  // Unstable assertion: assertFalse(compilerOptions0.specializeInitialModule);
      //  // Unstable assertion: assertFalse(compilerOptions0.collapseObjectLiterals);
      //  // Unstable assertion: assertFalse(compilerOptions0.removeUnusedVars);
      //  // Unstable assertion: assertFalse(compilerOptions0.disambiguateProperties);
      //  // Unstable assertion: assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
      //  // Unstable assertion: assertFalse(compilerOptions0.optimizeReturns);
      //  // Unstable assertion: assertFalse(compilerOptions0.ideMode);
      //  // Unstable assertion: assertFalse(compilerOptions0.convertToDottedProperties);
      //  // Unstable assertion: assertFalse(compilerOptions0.checkSuspiciousCode);
      //  // Unstable assertion: assertFalse(compilerOptions0.groupVariableDeclarations);
      //  // Unstable assertion: assertFalse(compilerOptions0.moveFunctionDeclarations);
      //  // Unstable assertion: assertFalse(compilerOptions0.deadAssignmentElimination);
      //  // Unstable assertion: assertFalse(compilerOptions0.removeUnusedLocalVars);
      //  // Unstable assertion: assertFalse(compilerOptions0.printInputDelimiter);
      //  // Unstable assertion: assertEquals(false, compilerOptions0.assumeClosuresOnlyCaptureReferences());
      //  // Unstable assertion: assertNull(compilerOptions0.getLanguageOut());
      //  // Unstable assertion: assertEquals(false, compilerOptions0.assumeStrictThis());
      //  // Unstable assertion: assertEquals(CompilerOptions.TweakProcessing.OFF, compilerOptions0.getTweakProcessing());
      //  // Unstable assertion: assertEquals(false, compilerOptions0.isExternExportsEnabled());
      //  // Unstable assertion: assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compilerOptions0.getLanguageIn());
      //  // Unstable assertion: assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
      //  // Unstable assertion: assertEquals(false, compilerOptions0.getInferTypes());
      
      Result result0 = compiler0.compile((List<JSSourceFile>) stack0, (List<JSSourceFile>) stack0, compilerOptions0);
      //  // Unstable assertion: assertNotNull(result0);
      //  // Unstable assertion: assertFalse(compilerOptions0.optimizeParameters);
      //  // Unstable assertion: assertFalse(compilerOptions0.generatePseudoNames);
      //  // Unstable assertion: assertFalse(compilerOptions0.lineBreak);
      //  // Unstable assertion: assertFalse(compilerOptions0.removeDeadCode);
      //  // Unstable assertion: assertFalse(compilerOptions0.rewriteFunctionExpressions);
      //  // Unstable assertion: assertFalse(compilerOptions0.checkTypes);
      //  // Unstable assertion: assertFalse(compilerOptions0.exportTestFunctions);
      //  // Unstable assertion: assertFalse(compilerOptions0.instrumentForCoverage);
      //  // Unstable assertion: assertFalse(compilerOptions0.markAsCompiled);
      //  // Unstable assertion: assertFalse(compilerOptions0.inlineLocalFunctions);
      //  // Unstable assertion: assertFalse(compilerOptions0.ambiguateProperties);
      //  // Unstable assertion: assertFalse(compilerOptions0.crossModuleCodeMotion);
      //  // Unstable assertion: assertFalse(compilerOptions0.smartNameRemoval);
      //  // Unstable assertion: assertFalse(compilerOptions0.inlineLocalVariables);
      //  // Unstable assertion: assertFalse(compilerOptions0.recordFunctionInformation);
      //  // Unstable assertion: assertFalse(compilerOptions0.checkTypedPropertyCalls);
      //  // Unstable assertion: assertFalse(compilerOptions0.removeEmptyFunctions);
      //  // Unstable assertion: assertFalse(compilerOptions0.optimizeCalls);
      //  // Unstable assertion: assertFalse(compilerOptions0.aliasExternals);
      //  // Unstable assertion: assertFalse(compilerOptions0.flowSensitiveInlineVariables);
      //  // Unstable assertion: assertFalse(compilerOptions0.instrumentForCoverageOnly);
      //  // Unstable assertion: assertFalse(compilerOptions0.ignoreCajaProperties);
      //  // Unstable assertion: assertFalse(compilerOptions0.crossModuleMethodMotion);
      //  // Unstable assertion: assertFalse(compilerOptions0.collapseVariableDeclarations);
      //  // Unstable assertion: assertFalse(compilerOptions0.collapseProperties);
      //  // Unstable assertion: assertFalse(compilerOptions0.inlineFunctions);
      //  // Unstable assertion: assertFalse(compilerOptions0.checkSymbols);
      //  // Unstable assertion: assertFalse(compilerOptions0.assumeClosuresOnlyCaptureReferences);
      //  // Unstable assertion: assertFalse(compilerOptions0.checkControlStructures);
      //  // Unstable assertion: assertFalse(compilerOptions0.aliasAllStrings);
      //  // Unstable assertion: assertFalse(compilerOptions0.removeTryCatchFinally);
      //  // Unstable assertion: assertFalse(compilerOptions0.markNoSideEffectCalls);
      //  // Unstable assertion: assertFalse(compilerOptions0.checkDuplicateMessages);
      //  // Unstable assertion: assertFalse(compilerOptions0.inferTypesInGlobalScope);
      //  // Unstable assertion: assertFalse(compilerOptions0.foldConstants);
      //  // Unstable assertion: assertFalse(compilerOptions0.computeFunctionSideEffects);
      //  // Unstable assertion: assertFalse(compilerOptions0.coalesceVariableNames);
      //  // Unstable assertion: assertFalse(compilerOptions0.collapseAnonymousFunctions);
      //  // Unstable assertion: assertFalse(compilerOptions0.reserveRawExports);
      //  // Unstable assertion: assertFalse(compilerOptions0.labelRenaming);
      //  // Unstable assertion: assertFalse(compilerOptions0.strictMessageReplacement);
      //  // Unstable assertion: assertFalse(compilerOptions0.aliasKeywords);
      //  // Unstable assertion: assertFalse(compilerOptions0.allowLegacyJsMessages);
      //  // Unstable assertion: assertFalse(compilerOptions0.closurePass);
      //  // Unstable assertion: assertFalse(compilerOptions0.prettyPrint);
      //  // Unstable assertion: assertFalse(compilerOptions0.checkCaja);
      //  // Unstable assertion: assertFalse(compilerOptions0.optimizeArgumentsArray);
      //  // Unstable assertion: assertFalse(compilerOptions0.inlineVariables);
      //  // Unstable assertion: assertFalse(compilerOptions0.tightenTypes);
      //  // Unstable assertion: assertFalse(compilerOptions0.inlineGetters);
      //  // Unstable assertion: assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
      //  // Unstable assertion: assertFalse(compilerOptions0.gatherCssNames);
      //  // Unstable assertion: assertFalse(compilerOptions0.checkEs5Strict);
      //  // Unstable assertion: assertFalse(compilerOptions0.generateExports);
      //  // Unstable assertion: assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
      //  // Unstable assertion: assertFalse(compilerOptions0.devirtualizePrototypeMethods);
      //  // Unstable assertion: assertFalse(compilerOptions0.inlineConstantVars);
      //  // Unstable assertion: assertFalse(compilerOptions0.specializeInitialModule);
      //  // Unstable assertion: assertFalse(compilerOptions0.collapseObjectLiterals);
      //  // Unstable assertion: assertFalse(compilerOptions0.removeUnusedVars);
      //  // Unstable assertion: assertFalse(compilerOptions0.disambiguateProperties);
      //  // Unstable assertion: assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
      //  // Unstable assertion: assertFalse(compilerOptions0.optimizeReturns);
      //  // Unstable assertion: assertFalse(compilerOptions0.ideMode);
      //  // Unstable assertion: assertFalse(compilerOptions0.convertToDottedProperties);
      //  // Unstable assertion: assertFalse(compilerOptions0.checkSuspiciousCode);
      //  // Unstable assertion: assertFalse(compilerOptions0.groupVariableDeclarations);
      //  // Unstable assertion: assertFalse(compilerOptions0.moveFunctionDeclarations);
      //  // Unstable assertion: assertFalse(compilerOptions0.deadAssignmentElimination);
      //  // Unstable assertion: assertFalse(compilerOptions0.removeUnusedLocalVars);
      //  // Unstable assertion: assertFalse(compilerOptions0.printInputDelimiter);
      //  // Unstable assertion: assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      //  // Unstable assertion: assertEquals(false, compiler0.hasErrors());
      //  // Unstable assertion: assertEquals(false, compiler0.acceptConstKeyword());
      //  // Unstable assertion: assertEquals(0, compiler0.getErrorCount());
      //  // Unstable assertion: assertEquals(false, compiler0.isIdeMode());
      //  // Unstable assertion: assertEquals(0, compiler0.getWarningCount());
      //  // Unstable assertion: assertEquals(false, compiler0.isTypeCheckingEnabled());
      //  // Unstable assertion: assertEquals(false, compilerOptions0.assumeClosuresOnlyCaptureReferences());
      //  // Unstable assertion: assertNull(compilerOptions0.getLanguageOut());
      //  // Unstable assertion: assertEquals(false, compilerOptions0.assumeStrictThis());
      //  // Unstable assertion: assertEquals(CompilerOptions.TweakProcessing.OFF, compilerOptions0.getTweakProcessing());
      //  // Unstable assertion: assertEquals(false, compilerOptions0.isExternExportsEnabled());
      //  // Unstable assertion: assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compilerOptions0.getLanguageIn());
      //  // Unstable assertion: assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
      //  // Unstable assertion: assertEquals(false, compilerOptions0.getInferTypes());
      //  // Unstable assertion: assertEquals(0, stack0.size());
      //  // Unstable assertion: assertEquals("[]", stack0.toString());
      //  // Unstable assertion: assertEquals(true, stack0.isEmpty());
      //  // Unstable assertion: assertEquals(true, stack0.empty());
      //  // Unstable assertion: assertEquals(10, stack0.capacity());
      
      Node node0 = RuntimeTypeCheck.getBoilerplateCode(compiler0, compilerOptions0.unaliasableGlobals);
      //  // Unstable assertion: assertNotNull(node0);
      //  // Unstable assertion: assertFalse(compilerOptions0.optimizeParameters);
      //  // Unstable assertion: assertFalse(compilerOptions0.generatePseudoNames);
      //  // Unstable assertion: assertFalse(compilerOptions0.lineBreak);
      //  // Unstable assertion: assertFalse(compilerOptions0.removeDeadCode);
      //  // Unstable assertion: assertFalse(compilerOptions0.rewriteFunctionExpressions);
      //  // Unstable assertion: assertFalse(compilerOptions0.checkTypes);
      //  // Unstable assertion: assertFalse(compilerOptions0.exportTestFunctions);
      //  // Unstable assertion: assertFalse(compilerOptions0.instrumentForCoverage);
      //  // Unstable assertion: assertFalse(compilerOptions0.markAsCompiled);
      //  // Unstable assertion: assertFalse(compilerOptions0.inlineLocalFunctions);
      //  // Unstable assertion: assertFalse(compilerOptions0.ambiguateProperties);
      //  // Unstable assertion: assertFalse(compilerOptions0.crossModuleCodeMotion);
      //  // Unstable assertion: assertFalse(compilerOptions0.smartNameRemoval);
      //  // Unstable assertion: assertFalse(compilerOptions0.inlineLocalVariables);
      //  // Unstable assertion: assertFalse(compilerOptions0.recordFunctionInformation);
      //  // Unstable assertion: assertFalse(compilerOptions0.checkTypedPropertyCalls);
      //  // Unstable assertion: assertFalse(compilerOptions0.removeEmptyFunctions);
      //  // Unstable assertion: assertFalse(compilerOptions0.optimizeCalls);
      //  // Unstable assertion: assertFalse(compilerOptions0.aliasExternals);
      //  // Unstable assertion: assertFalse(compilerOptions0.flowSensitiveInlineVariables);
      //  // Unstable assertion: assertFalse(compilerOptions0.instrumentForCoverageOnly);
      //  // Unstable assertion: assertFalse(compilerOptions0.ignoreCajaProperties);
      //  // Unstable assertion: assertFalse(compilerOptions0.crossModuleMethodMotion);
      //  // Unstable assertion: assertFalse(compilerOptions0.collapseVariableDeclarations);
      //  // Unstable assertion: assertFalse(compilerOptions0.collapseProperties);
      //  // Unstable assertion: assertFalse(compilerOptions0.inlineFunctions);
      //  // Unstable assertion: assertFalse(compilerOptions0.checkSymbols);
      //  // Unstable assertion: assertFalse(compilerOptions0.assumeClosuresOnlyCaptureReferences);
      //  // Unstable assertion: assertFalse(compilerOptions0.checkControlStructures);
      //  // Unstable assertion: assertFalse(compilerOptions0.aliasAllStrings);
      //  // Unstable assertion: assertFalse(compilerOptions0.removeTryCatchFinally);
      //  // Unstable assertion: assertFalse(compilerOptions0.markNoSideEffectCalls);
      //  // Unstable assertion: assertFalse(compilerOptions0.checkDuplicateMessages);
      //  // Unstable assertion: assertFalse(compilerOptions0.inferTypesInGlobalScope);
      //  // Unstable assertion: assertFalse(compilerOptions0.foldConstants);
      //  // Unstable assertion: assertFalse(compilerOptions0.computeFunctionSideEffects);
      //  // Unstable assertion: assertFalse(compilerOptions0.coalesceVariableNames);
      //  // Unstable assertion: assertFalse(compilerOptions0.collapseAnonymousFunctions);
      //  // Unstable assertion: assertFalse(compilerOptions0.reserveRawExports);
      //  // Unstable assertion: assertFalse(compilerOptions0.labelRenaming);
      //  // Unstable assertion: assertFalse(compilerOptions0.strictMessageReplacement);
      //  // Unstable assertion: assertFalse(compilerOptions0.aliasKeywords);
      //  // Unstable assertion: assertFalse(compilerOptions0.allowLegacyJsMessages);
      //  // Unstable assertion: assertFalse(compilerOptions0.closurePass);
      //  // Unstable assertion: assertFalse(compilerOptions0.prettyPrint);
      //  // Unstable assertion: assertFalse(compilerOptions0.checkCaja);
      //  // Unstable assertion: assertFalse(compilerOptions0.optimizeArgumentsArray);
      //  // Unstable assertion: assertFalse(compilerOptions0.inlineVariables);
      //  // Unstable assertion: assertFalse(compilerOptions0.tightenTypes);
      //  // Unstable assertion: assertFalse(compilerOptions0.inlineGetters);
      //  // Unstable assertion: assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
      //  // Unstable assertion: assertFalse(compilerOptions0.gatherCssNames);
      //  // Unstable assertion: assertFalse(compilerOptions0.checkEs5Strict);
      //  // Unstable assertion: assertFalse(compilerOptions0.generateExports);
      //  // Unstable assertion: assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
      //  // Unstable assertion: assertFalse(compilerOptions0.devirtualizePrototypeMethods);
      //  // Unstable assertion: assertFalse(compilerOptions0.inlineConstantVars);
      //  // Unstable assertion: assertFalse(compilerOptions0.specializeInitialModule);
      //  // Unstable assertion: assertFalse(compilerOptions0.collapseObjectLiterals);
      //  // Unstable assertion: assertFalse(compilerOptions0.removeUnusedVars);
      //  // Unstable assertion: assertFalse(compilerOptions0.disambiguateProperties);
      //  // Unstable assertion: assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
      //  // Unstable assertion: assertFalse(compilerOptions0.optimizeReturns);
      //  // Unstable assertion: assertFalse(compilerOptions0.ideMode);
      //  // Unstable assertion: assertFalse(compilerOptions0.convertToDottedProperties);
      //  // Unstable assertion: assertFalse(compilerOptions0.checkSuspiciousCode);
      //  // Unstable assertion: assertFalse(compilerOptions0.groupVariableDeclarations);
      //  // Unstable assertion: assertFalse(compilerOptions0.moveFunctionDeclarations);
      //  // Unstable assertion: assertFalse(compilerOptions0.deadAssignmentElimination);
      //  // Unstable assertion: assertFalse(compilerOptions0.removeUnusedLocalVars);
      //  // Unstable assertion: assertFalse(compilerOptions0.printInputDelimiter);
      //  // Unstable assertion: assertEquals(false, node0.isQuotedString());
      //  // Unstable assertion: assertEquals(false, node0.isOptionalArg());
      //  // Unstable assertion: assertEquals(false, node0.isQualifiedName());
      //  // Unstable assertion: assertEquals(35, node0.getChildCount());
      //  // Unstable assertion: assertEquals(false, node0.isLocalResultCall());
      //  // Unstable assertion: assertEquals(0, node0.getSideEffectFlags());
      //  // Unstable assertion: assertEquals(0, node0.getLength());
      //  // Unstable assertion: assertEquals(false, node0.isFromExterns());
      //  // Unstable assertion: assertEquals(false, node0.isVarArgs());
      //  // Unstable assertion: assertEquals(true, node0.hasMoreThanOneChild());
      //  // Unstable assertion: assertEquals(false, node0.isUnscopedQualifiedName());
      //  // Unstable assertion: assertEquals(4096, node0.getSourcePosition());
      //  // Unstable assertion: assertEquals(false, node0.isOnlyModifiesThisCall());
      //  // Unstable assertion: assertEquals(false, node0.isNoSideEffectsCall());
      //  // Unstable assertion: assertEquals(false, node0.wasEmptyNode());
      //  // Unstable assertion: assertEquals(132, node0.getType());
      //  // Unstable assertion: assertEquals(0, node0.getCharno());
      //  // Unstable assertion: assertEquals(false, node0.hasOneChild());
      //  // Unstable assertion: assertEquals(" [synthetic:1] ", node0.getSourceFileName());
      //  // Unstable assertion: assertEquals(true, node0.isSyntheticBlock());
      //  // Unstable assertion: assertEquals(true, node0.hasChildren());
      //  // Unstable assertion: assertEquals(1, node0.getLineno());
      //  // Unstable assertion: assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      //  // Unstable assertion: assertEquals(false, compiler0.hasErrors());
      //  // Unstable assertion: assertEquals(false, compiler0.acceptConstKeyword());
      //  // Unstable assertion: assertEquals(0, compiler0.getErrorCount());
      //  // Unstable assertion: assertEquals(67, compiler0.getWarningCount());
      //  // Unstable assertion: assertEquals(false, compiler0.isIdeMode());
      //  // Unstable assertion: assertEquals(false, compiler0.isTypeCheckingEnabled());
      //  // Unstable assertion: assertEquals(false, compilerOptions0.assumeClosuresOnlyCaptureReferences());
      //  // Unstable assertion: assertNull(compilerOptions0.getLanguageOut());
      //  // Unstable assertion: assertEquals(false, compilerOptions0.assumeStrictThis());
      //  // Unstable assertion: assertEquals(CompilerOptions.TweakProcessing.OFF, compilerOptions0.getTweakProcessing());
      //  // Unstable assertion: assertEquals(false, compilerOptions0.isExternExportsEnabled());
      //  // Unstable assertion: assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compilerOptions0.getLanguageIn());
      //  // Unstable assertion: assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
      //  // Unstable assertion: assertEquals(false, compilerOptions0.getInferTypes());
      
      compiler0.initInputsByIdMap();
      //  // Unstable assertion: assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      //  // Unstable assertion: assertEquals(false, compiler0.hasErrors());
      //  // Unstable assertion: assertEquals(false, compiler0.acceptConstKeyword());
      //  // Unstable assertion: assertEquals(0, compiler0.getErrorCount());
      //  // Unstable assertion: assertEquals(67, compiler0.getWarningCount());
      //  // Unstable assertion: assertEquals(false, compiler0.isIdeMode());
      //  // Unstable assertion: assertEquals(false, compiler0.isTypeCheckingEnabled());
      
      DefaultPassConfig defaultPassConfig0 = compiler0.ensureDefaultPassConfig();
      //  // Unstable assertion: assertNotNull(defaultPassConfig0);
      //  // Unstable assertion: assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      //  // Unstable assertion: assertEquals(false, compiler0.hasErrors());
      //  // Unstable assertion: assertEquals(false, compiler0.acceptConstKeyword());
      //  // Unstable assertion: assertEquals(0, compiler0.getErrorCount());
      //  // Unstable assertion: assertEquals(67, compiler0.getWarningCount());
      //  // Unstable assertion: assertEquals(false, compiler0.isIdeMode());
      //  // Unstable assertion: assertEquals(false, compiler0.isTypeCheckingEnabled());
      
      defaultPassConfig0.regenerateGlobalTypedScope(compiler0, node0);
      //  // Unstable assertion: assertFalse(compilerOptions0.optimizeParameters);
      //  // Unstable assertion: assertFalse(compilerOptions0.generatePseudoNames);
      //  // Unstable assertion: assertFalse(compilerOptions0.lineBreak);
      //  // Unstable assertion: assertFalse(compilerOptions0.removeDeadCode);
      //  // Unstable assertion: assertFalse(compilerOptions0.rewriteFunctionExpressions);
      //  // Unstable assertion: assertFalse(compilerOptions0.checkTypes);
      //  // Unstable assertion: assertFalse(compilerOptions0.exportTestFunctions);
      //  // Unstable assertion: assertFalse(compilerOptions0.instrumentForCoverage);
      //  // Unstable assertion: assertFalse(compilerOptions0.markAsCompiled);
      //  // Unstable assertion: assertFalse(compilerOptions0.inlineLocalFunctions);
      //  // Unstable assertion: assertFalse(compilerOptions0.ambiguateProperties);
      //  // Unstable assertion: assertFalse(compilerOptions0.crossModuleCodeMotion);
      //  // Unstable assertion: assertFalse(compilerOptions0.smartNameRemoval);
      //  // Unstable assertion: assertFalse(compilerOptions0.inlineLocalVariables);
      //  // Unstable assertion: assertFalse(compilerOptions0.recordFunctionInformation);
      //  // Unstable assertion: assertFalse(compilerOptions0.checkTypedPropertyCalls);
      //  // Unstable assertion: assertFalse(compilerOptions0.removeEmptyFunctions);
      //  // Unstable assertion: assertFalse(compilerOptions0.optimizeCalls);
      //  // Unstable assertion: assertFalse(compilerOptions0.aliasExternals);
      //  // Unstable assertion: assertFalse(compilerOptions0.flowSensitiveInlineVariables);
      //  // Unstable assertion: assertFalse(compilerOptions0.instrumentForCoverageOnly);
      //  // Unstable assertion: assertFalse(compilerOptions0.ignoreCajaProperties);
      //  // Unstable assertion: assertFalse(compilerOptions0.crossModuleMethodMotion);
      //  // Unstable assertion: assertFalse(compilerOptions0.collapseVariableDeclarations);
      //  // Unstable assertion: assertFalse(compilerOptions0.collapseProperties);
      //  // Unstable assertion: assertFalse(compilerOptions0.inlineFunctions);
      //  // Unstable assertion: assertFalse(compilerOptions0.checkSymbols);
      //  // Unstable assertion: assertFalse(compilerOptions0.assumeClosuresOnlyCaptureReferences);
      //  // Unstable assertion: assertFalse(compilerOptions0.checkControlStructures);
      //  // Unstable assertion: assertFalse(compilerOptions0.aliasAllStrings);
      //  // Unstable assertion: assertFalse(compilerOptions0.removeTryCatchFinally);
      //  // Unstable assertion: assertFalse(compilerOptions0.markNoSideEffectCalls);
      //  // Unstable assertion: assertFalse(compilerOptions0.checkDuplicateMessages);
      //  // Unstable assertion: assertFalse(compilerOptions0.inferTypesInGlobalScope);
      //  // Unstable assertion: assertFalse(compilerOptions0.foldConstants);
      //  // Unstable assertion: assertFalse(compilerOptions0.computeFunctionSideEffects);
      //  // Unstable assertion: assertFalse(compilerOptions0.coalesceVariableNames);
      //  // Unstable assertion: assertFalse(compilerOptions0.collapseAnonymousFunctions);
      //  // Unstable assertion: assertFalse(compilerOptions0.reserveRawExports);
      //  // Unstable assertion: assertFalse(compilerOptions0.labelRenaming);
      //  // Unstable assertion: assertFalse(compilerOptions0.strictMessageReplacement);
      //  // Unstable assertion: assertFalse(compilerOptions0.aliasKeywords);
      //  // Unstable assertion: assertFalse(compilerOptions0.allowLegacyJsMessages);
      //  // Unstable assertion: assertFalse(compilerOptions0.closurePass);
      //  // Unstable assertion: assertFalse(compilerOptions0.prettyPrint);
      //  // Unstable assertion: assertFalse(compilerOptions0.checkCaja);
      //  // Unstable assertion: assertFalse(compilerOptions0.optimizeArgumentsArray);
      //  // Unstable assertion: assertFalse(compilerOptions0.inlineVariables);
      //  // Unstable assertion: assertFalse(compilerOptions0.tightenTypes);
      //  // Unstable assertion: assertFalse(compilerOptions0.inlineGetters);
      //  // Unstable assertion: assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
      //  // Unstable assertion: assertFalse(compilerOptions0.gatherCssNames);
      //  // Unstable assertion: assertFalse(compilerOptions0.checkEs5Strict);
      //  // Unstable assertion: assertFalse(compilerOptions0.generateExports);
      //  // Unstable assertion: assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
      //  // Unstable assertion: assertFalse(compilerOptions0.devirtualizePrototypeMethods);
      //  // Unstable assertion: assertFalse(compilerOptions0.inlineConstantVars);
      //  // Unstable assertion: assertFalse(compilerOptions0.specializeInitialModule);
      //  // Unstable assertion: assertFalse(compilerOptions0.collapseObjectLiterals);
      //  // Unstable assertion: assertFalse(compilerOptions0.removeUnusedVars);
      //  // Unstable assertion: assertFalse(compilerOptions0.disambiguateProperties);
      //  // Unstable assertion: assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
      //  // Unstable assertion: assertFalse(compilerOptions0.optimizeReturns);
      //  // Unstable assertion: assertFalse(compilerOptions0.ideMode);
      //  // Unstable assertion: assertFalse(compilerOptions0.convertToDottedProperties);
      //  // Unstable assertion: assertFalse(compilerOptions0.checkSuspiciousCode);
      //  // Unstable assertion: assertFalse(compilerOptions0.groupVariableDeclarations);
      //  // Unstable assertion: assertFalse(compilerOptions0.moveFunctionDeclarations);
      //  // Unstable assertion: assertFalse(compilerOptions0.deadAssignmentElimination);
      //  // Unstable assertion: assertFalse(compilerOptions0.removeUnusedLocalVars);
      //  // Unstable assertion: assertFalse(compilerOptions0.printInputDelimiter);
      //  // Unstable assertion: assertEquals(false, node0.isQuotedString());
      //  // Unstable assertion: assertEquals(false, node0.isOptionalArg());
      //  // Unstable assertion: assertEquals(false, node0.isQualifiedName());
      //  // Unstable assertion: assertEquals(35, node0.getChildCount());
      //  // Unstable assertion: assertEquals(false, node0.isLocalResultCall());
      //  // Unstable assertion: assertEquals(0, node0.getSideEffectFlags());
      //  // Unstable assertion: assertEquals(0, node0.getLength());
      //  // Unstable assertion: assertEquals(false, node0.isFromExterns());
      //  // Unstable assertion: assertEquals(false, node0.isVarArgs());
      //  // Unstable assertion: assertEquals(true, node0.hasMoreThanOneChild());
      //  // Unstable assertion: assertEquals(false, node0.isUnscopedQualifiedName());
      //  // Unstable assertion: assertEquals(4096, node0.getSourcePosition());
      //  // Unstable assertion: assertEquals(false, node0.isOnlyModifiesThisCall());
      //  // Unstable assertion: assertEquals(false, node0.isNoSideEffectsCall());
      //  // Unstable assertion: assertEquals(false, node0.wasEmptyNode());
      //  // Unstable assertion: assertEquals(132, node0.getType());
      //  // Unstable assertion: assertEquals(0, node0.getCharno());
      //  // Unstable assertion: assertEquals(false, node0.hasOneChild());
      //  // Unstable assertion: assertEquals(" [synthetic:1] ", node0.getSourceFileName());
      //  // Unstable assertion: assertEquals(true, node0.isSyntheticBlock());
      //  // Unstable assertion: assertEquals(true, node0.hasChildren());
      //  // Unstable assertion: assertEquals(1, node0.getLineno());
      //  // Unstable assertion: assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      //  // Unstable assertion: assertEquals(false, compiler0.hasErrors());
      //  // Unstable assertion: assertEquals(false, compiler0.acceptConstKeyword());
      //  // Unstable assertion: assertEquals(0, compiler0.getErrorCount());
      //  // Unstable assertion: assertEquals(67, compiler0.getWarningCount());
      //  // Unstable assertion: assertEquals(false, compiler0.isIdeMode());
      //  // Unstable assertion: assertEquals(false, compiler0.isTypeCheckingEnabled());
      //  // Unstable assertion: assertEquals(false, compilerOptions0.assumeClosuresOnlyCaptureReferences());
      //  // Unstable assertion: assertNull(compilerOptions0.getLanguageOut());
      //  // Unstable assertion: assertEquals(false, compilerOptions0.assumeStrictThis());
      //  // Unstable assertion: assertEquals(CompilerOptions.TweakProcessing.OFF, compilerOptions0.getTweakProcessing());
      //  // Unstable assertion: assertEquals(false, compilerOptions0.isExternExportsEnabled());
      //  // Unstable assertion: assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compilerOptions0.getLanguageIn());
      //  // Unstable assertion: assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
      //  // Unstable assertion: assertEquals(false, compilerOptions0.getInferTypes());
      
      // Undeclared exception!
      try {
        defaultPassConfig0.patchGlobalTypedScope(compiler0, node0);
       //  fail("Expecting exception: RuntimeException");
       // Unstable assertion
      } catch(RuntimeException e) {
         //
         // INTERNAL COMPILER ERROR.
         // Please report this problem.
         // null
         //   Node(ASSIGN):  [synthetic:1] :42:21
         // [source unknown]
         //   Parent(EXPR_RESULT):  [synthetic:1] :42:0
         // [source unknown]
         //
      }
  }

  @Test
  public void test2()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      //  // Unstable assertion: assertNotNull(compiler0);
      
      Stack<JSSourceFile> stack0 = new Stack<JSSourceFile>();
      //  // Unstable assertion: assertNotNull(stack0);
      //  // Unstable assertion: assertEquals(true, stack0.empty());
      //  // Unstable assertion: assertEquals(0, stack0.size());
      //  // Unstable assertion: assertEquals(true, stack0.isEmpty());
      //  // Unstable assertion: assertEquals(10, stack0.capacity());
      //  // Unstable assertion: assertEquals("[]", stack0.toString());
      
      CompilerOptions compilerOptions0 = new CompilerOptions();
      //  // Unstable assertion: assertNotNull(compilerOptions0);
      //  // Unstable assertion: assertFalse(compilerOptions0.inlineLocalVariables);
      //  // Unstable assertion: assertFalse(compilerOptions0.checkTypedPropertyCalls);
      //  // Unstable assertion: assertFalse(compilerOptions0.aliasAllStrings);
      //  // Unstable assertion: assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
      //  // Unstable assertion: assertFalse(compilerOptions0.flowSensitiveInlineVariables);
      //  // Unstable assertion: assertFalse(compilerOptions0.optimizeArgumentsArray);
      //  // Unstable assertion: assertFalse(compilerOptions0.markNoSideEffectCalls);
      //  // Unstable assertion: assertFalse(compilerOptions0.collapseAnonymousFunctions);
      //  // Unstable assertion: assertFalse(compilerOptions0.inlineLocalFunctions);
      //  // Unstable assertion: assertFalse(compilerOptions0.ignoreCajaProperties);
      //  // Unstable assertion: assertFalse(compilerOptions0.removeDeadCode);
      //  // Unstable assertion: assertFalse(compilerOptions0.aliasExternals);
      //  // Unstable assertion: assertFalse(compilerOptions0.prettyPrint);
      //  // Unstable assertion: assertFalse(compilerOptions0.labelRenaming);
      //  // Unstable assertion: assertFalse(compilerOptions0.generateExports);
      //  // Unstable assertion: assertFalse(compilerOptions0.instrumentForCoverageOnly);
      //  // Unstable assertion: assertFalse(compilerOptions0.strictMessageReplacement);
      //  // Unstable assertion: assertFalse(compilerOptions0.checkCaja);
      //  // Unstable assertion: assertFalse(compilerOptions0.moveFunctionDeclarations);
      //  // Unstable assertion: assertFalse(compilerOptions0.disambiguateProperties);
      //  // Unstable assertion: assertFalse(compilerOptions0.removeUnusedVars);
      //  // Unstable assertion: assertFalse(compilerOptions0.crossModuleCodeMotion);
      //  // Unstable assertion: assertFalse(compilerOptions0.optimizeParameters);
      //  // Unstable assertion: assertFalse(compilerOptions0.removeEmptyFunctions);
      //  // Unstable assertion: assertFalse(compilerOptions0.optimizeReturns);
      //  // Unstable assertion: assertFalse(compilerOptions0.markAsCompiled);
      //  // Unstable assertion: assertFalse(compilerOptions0.printInputDelimiter);
      //  // Unstable assertion: assertFalse(compilerOptions0.ambiguateProperties);
      //  // Unstable assertion: assertFalse(compilerOptions0.gatherCssNames);
      //  // Unstable assertion: assertFalse(compilerOptions0.collapseObjectLiterals);
      //  // Unstable assertion: assertFalse(compilerOptions0.checkDuplicateMessages);
      //  // Unstable assertion: assertFalse(compilerOptions0.recordFunctionInformation);
      //  // Unstable assertion: assertFalse(compilerOptions0.convertToDottedProperties);
      //  // Unstable assertion: assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
      //  // Unstable assertion: assertFalse(compilerOptions0.crossModuleMethodMotion);
      //  // Unstable assertion: assertFalse(compilerOptions0.lineBreak);
      //  // Unstable assertion: assertFalse(compilerOptions0.assumeClosuresOnlyCaptureReferences);
      //  // Unstable assertion: assertFalse(compilerOptions0.optimizeCalls);
      //  // Unstable assertion: assertFalse(compilerOptions0.exportTestFunctions);
      //  // Unstable assertion: assertFalse(compilerOptions0.deadAssignmentElimination);
      //  // Unstable assertion: assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
      //  // Unstable assertion: assertFalse(compilerOptions0.checkSymbols);
      //  // Unstable assertion: assertFalse(compilerOptions0.closurePass);
      //  // Unstable assertion: assertFalse(compilerOptions0.rewriteFunctionExpressions);
      //  // Unstable assertion: assertFalse(compilerOptions0.tightenTypes);
      //  // Unstable assertion: assertFalse(compilerOptions0.allowLegacyJsMessages);
      //  // Unstable assertion: assertFalse(compilerOptions0.coalesceVariableNames);
      //  // Unstable assertion: assertFalse(compilerOptions0.checkControlStructures);
      //  // Unstable assertion: assertFalse(compilerOptions0.foldConstants);
      //  // Unstable assertion: assertFalse(compilerOptions0.smartNameRemoval);
      //  // Unstable assertion: assertFalse(compilerOptions0.checkEs5Strict);
      //  // Unstable assertion: assertFalse(compilerOptions0.collapseProperties);
      //  // Unstable assertion: assertFalse(compilerOptions0.aliasKeywords);
      //  // Unstable assertion: assertFalse(compilerOptions0.inlineVariables);
      //  // Unstable assertion: assertFalse(compilerOptions0.groupVariableDeclarations);
      //  // Unstable assertion: assertFalse(compilerOptions0.collapseVariableDeclarations);
      //  // Unstable assertion: assertFalse(compilerOptions0.checkTypes);
      //  // Unstable assertion: assertFalse(compilerOptions0.removeTryCatchFinally);
      //  // Unstable assertion: assertFalse(compilerOptions0.devirtualizePrototypeMethods);
      //  // Unstable assertion: assertFalse(compilerOptions0.inlineGetters);
      //  // Unstable assertion: assertFalse(compilerOptions0.specializeInitialModule);
      //  // Unstable assertion: assertFalse(compilerOptions0.inlineConstantVars);
      //  // Unstable assertion: assertFalse(compilerOptions0.removeUnusedLocalVars);
      //  // Unstable assertion: assertFalse(compilerOptions0.inlineFunctions);
      //  // Unstable assertion: assertFalse(compilerOptions0.ideMode);
      //  // Unstable assertion: assertFalse(compilerOptions0.reserveRawExports);
      //  // Unstable assertion: assertFalse(compilerOptions0.inferTypesInGlobalScope);
      //  // Unstable assertion: assertFalse(compilerOptions0.generatePseudoNames);
      //  // Unstable assertion: assertFalse(compilerOptions0.instrumentForCoverage);
      //  // Unstable assertion: assertFalse(compilerOptions0.computeFunctionSideEffects);
      //  // Unstable assertion: assertFalse(compilerOptions0.checkSuspiciousCode);
      //  // Unstable assertion: assertEquals(false, compilerOptions0.assumeClosuresOnlyCaptureReferences());
      //  // Unstable assertion: assertEquals(false, compilerOptions0.getInferTypes());
      //  // Unstable assertion: assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
      //  // Unstable assertion: assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compilerOptions0.getLanguageIn());
      //  // Unstable assertion: assertNull(compilerOptions0.getLanguageOut());
      //  // Unstable assertion: assertEquals(false, compilerOptions0.isExternExportsEnabled());
      //  // Unstable assertion: assertEquals(false, compilerOptions0.assumeStrictThis());
      //  // Unstable assertion: assertEquals(CompilerOptions.TweakProcessing.OFF, compilerOptions0.getTweakProcessing());
      
      Result result0 = compiler0.compile((List<JSSourceFile>) stack0, (List<JSSourceFile>) stack0, compilerOptions0);
      //  // Unstable assertion: assertNotNull(result0);
      //  // Unstable assertion: assertFalse(compilerOptions0.inlineLocalVariables);
      //  // Unstable assertion: assertFalse(compilerOptions0.checkTypedPropertyCalls);
      //  // Unstable assertion: assertFalse(compilerOptions0.aliasAllStrings);
      //  // Unstable assertion: assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
      //  // Unstable assertion: assertFalse(compilerOptions0.flowSensitiveInlineVariables);
      //  // Unstable assertion: assertFalse(compilerOptions0.optimizeArgumentsArray);
      //  // Unstable assertion: assertFalse(compilerOptions0.markNoSideEffectCalls);
      //  // Unstable assertion: assertFalse(compilerOptions0.collapseAnonymousFunctions);
      //  // Unstable assertion: assertFalse(compilerOptions0.inlineLocalFunctions);
      //  // Unstable assertion: assertFalse(compilerOptions0.ignoreCajaProperties);
      //  // Unstable assertion: assertFalse(compilerOptions0.removeDeadCode);
      //  // Unstable assertion: assertFalse(compilerOptions0.aliasExternals);
      //  // Unstable assertion: assertFalse(compilerOptions0.prettyPrint);
      //  // Unstable assertion: assertFalse(compilerOptions0.labelRenaming);
      //  // Unstable assertion: assertFalse(compilerOptions0.generateExports);
      //  // Unstable assertion: assertFalse(compilerOptions0.instrumentForCoverageOnly);
      //  // Unstable assertion: assertFalse(compilerOptions0.strictMessageReplacement);
      //  // Unstable assertion: assertFalse(compilerOptions0.checkCaja);
      //  // Unstable assertion: assertFalse(compilerOptions0.moveFunctionDeclarations);
      //  // Unstable assertion: assertFalse(compilerOptions0.disambiguateProperties);
      //  // Unstable assertion: assertFalse(compilerOptions0.removeUnusedVars);
      //  // Unstable assertion: assertFalse(compilerOptions0.crossModuleCodeMotion);
      //  // Unstable assertion: assertFalse(compilerOptions0.optimizeParameters);
      //  // Unstable assertion: assertFalse(compilerOptions0.removeEmptyFunctions);
      //  // Unstable assertion: assertFalse(compilerOptions0.optimizeReturns);
      //  // Unstable assertion: assertFalse(compilerOptions0.markAsCompiled);
      //  // Unstable assertion: assertFalse(compilerOptions0.printInputDelimiter);
      //  // Unstable assertion: assertFalse(compilerOptions0.ambiguateProperties);
      //  // Unstable assertion: assertFalse(compilerOptions0.gatherCssNames);
      //  // Unstable assertion: assertFalse(compilerOptions0.collapseObjectLiterals);
      //  // Unstable assertion: assertFalse(compilerOptions0.checkDuplicateMessages);
      //  // Unstable assertion: assertFalse(compilerOptions0.recordFunctionInformation);
      //  // Unstable assertion: assertFalse(compilerOptions0.convertToDottedProperties);
      //  // Unstable assertion: assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
      //  // Unstable assertion: assertFalse(compilerOptions0.crossModuleMethodMotion);
      //  // Unstable assertion: assertFalse(compilerOptions0.lineBreak);
      //  // Unstable assertion: assertFalse(compilerOptions0.assumeClosuresOnlyCaptureReferences);
      //  // Unstable assertion: assertFalse(compilerOptions0.optimizeCalls);
      //  // Unstable assertion: assertFalse(compilerOptions0.exportTestFunctions);
      //  // Unstable assertion: assertFalse(compilerOptions0.deadAssignmentElimination);
      //  // Unstable assertion: assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
      //  // Unstable assertion: assertFalse(compilerOptions0.checkSymbols);
      //  // Unstable assertion: assertFalse(compilerOptions0.closurePass);
      //  // Unstable assertion: assertFalse(compilerOptions0.rewriteFunctionExpressions);
      //  // Unstable assertion: assertFalse(compilerOptions0.tightenTypes);
      //  // Unstable assertion: assertFalse(compilerOptions0.allowLegacyJsMessages);
      //  // Unstable assertion: assertFalse(compilerOptions0.coalesceVariableNames);
      //  // Unstable assertion: assertFalse(compilerOptions0.checkControlStructures);
      //  // Unstable assertion: assertFalse(compilerOptions0.foldConstants);
      //  // Unstable assertion: assertFalse(compilerOptions0.smartNameRemoval);
      //  // Unstable assertion: assertFalse(compilerOptions0.checkEs5Strict);
      //  // Unstable assertion: assertFalse(compilerOptions0.collapseProperties);
      //  // Unstable assertion: assertFalse(compilerOptions0.aliasKeywords);
      //  // Unstable assertion: assertFalse(compilerOptions0.inlineVariables);
      //  // Unstable assertion: assertFalse(compilerOptions0.groupVariableDeclarations);
      //  // Unstable assertion: assertFalse(compilerOptions0.collapseVariableDeclarations);
      //  // Unstable assertion: assertFalse(compilerOptions0.checkTypes);
      //  // Unstable assertion: assertFalse(compilerOptions0.removeTryCatchFinally);
      //  // Unstable assertion: assertFalse(compilerOptions0.devirtualizePrototypeMethods);
      //  // Unstable assertion: assertFalse(compilerOptions0.inlineGetters);
      //  // Unstable assertion: assertFalse(compilerOptions0.specializeInitialModule);
      //  // Unstable assertion: assertFalse(compilerOptions0.inlineConstantVars);
      //  // Unstable assertion: assertFalse(compilerOptions0.removeUnusedLocalVars);
      //  // Unstable assertion: assertFalse(compilerOptions0.inlineFunctions);
      //  // Unstable assertion: assertFalse(compilerOptions0.ideMode);
      //  // Unstable assertion: assertFalse(compilerOptions0.reserveRawExports);
      //  // Unstable assertion: assertFalse(compilerOptions0.inferTypesInGlobalScope);
      //  // Unstable assertion: assertFalse(compilerOptions0.generatePseudoNames);
      //  // Unstable assertion: assertFalse(compilerOptions0.instrumentForCoverage);
      //  // Unstable assertion: assertFalse(compilerOptions0.computeFunctionSideEffects);
      //  // Unstable assertion: assertFalse(compilerOptions0.checkSuspiciousCode);
      //  // Unstable assertion: assertEquals(true, stack0.empty());
      //  // Unstable assertion: assertEquals(0, stack0.size());
      //  // Unstable assertion: assertEquals(true, stack0.isEmpty());
      //  // Unstable assertion: assertEquals(10, stack0.capacity());
      //  // Unstable assertion: assertEquals("[]", stack0.toString());
      //  // Unstable assertion: assertEquals(0, compiler0.getWarningCount());
      //  // Unstable assertion: assertEquals(0, compiler0.getErrorCount());
      //  // Unstable assertion: assertEquals(false, compiler0.acceptConstKeyword());
      //  // Unstable assertion: assertEquals(false, compiler0.isTypeCheckingEnabled());
      //  // Unstable assertion: assertEquals(false, compiler0.isIdeMode());
      //  // Unstable assertion: assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      //  // Unstable assertion: assertEquals(false, compiler0.hasErrors());
      //  // Unstable assertion: assertEquals(false, compilerOptions0.assumeClosuresOnlyCaptureReferences());
      //  // Unstable assertion: assertEquals(false, compilerOptions0.getInferTypes());
      //  // Unstable assertion: assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
      //  // Unstable assertion: assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compilerOptions0.getLanguageIn());
      //  // Unstable assertion: assertNull(compilerOptions0.getLanguageOut());
      //  // Unstable assertion: assertEquals(false, compilerOptions0.isExternExportsEnabled());
      //  // Unstable assertion: assertEquals(false, compilerOptions0.assumeStrictThis());
      //  // Unstable assertion: assertEquals(CompilerOptions.TweakProcessing.OFF, compilerOptions0.getTweakProcessing());
      
      Node node0 = RuntimeTypeCheck.getBoilerplateCode(compiler0, compilerOptions0.unaliasableGlobals);
      //  // Unstable assertion: assertNotNull(node0);
      //  // Unstable assertion: assertFalse(compilerOptions0.inlineLocalVariables);
      //  // Unstable assertion: assertFalse(compilerOptions0.checkTypedPropertyCalls);
      //  // Unstable assertion: assertFalse(compilerOptions0.aliasAllStrings);
      //  // Unstable assertion: assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
      //  // Unstable assertion: assertFalse(compilerOptions0.flowSensitiveInlineVariables);
      //  // Unstable assertion: assertFalse(compilerOptions0.optimizeArgumentsArray);
      //  // Unstable assertion: assertFalse(compilerOptions0.markNoSideEffectCalls);
      //  // Unstable assertion: assertFalse(compilerOptions0.collapseAnonymousFunctions);
      //  // Unstable assertion: assertFalse(compilerOptions0.inlineLocalFunctions);
      //  // Unstable assertion: assertFalse(compilerOptions0.ignoreCajaProperties);
      //  // Unstable assertion: assertFalse(compilerOptions0.removeDeadCode);
      //  // Unstable assertion: assertFalse(compilerOptions0.aliasExternals);
      //  // Unstable assertion: assertFalse(compilerOptions0.prettyPrint);
      //  // Unstable assertion: assertFalse(compilerOptions0.labelRenaming);
      //  // Unstable assertion: assertFalse(compilerOptions0.generateExports);
      //  // Unstable assertion: assertFalse(compilerOptions0.instrumentForCoverageOnly);
      //  // Unstable assertion: assertFalse(compilerOptions0.strictMessageReplacement);
      //  // Unstable assertion: assertFalse(compilerOptions0.checkCaja);
      //  // Unstable assertion: assertFalse(compilerOptions0.moveFunctionDeclarations);
      //  // Unstable assertion: assertFalse(compilerOptions0.disambiguateProperties);
      //  // Unstable assertion: assertFalse(compilerOptions0.removeUnusedVars);
      //  // Unstable assertion: assertFalse(compilerOptions0.crossModuleCodeMotion);
      //  // Unstable assertion: assertFalse(compilerOptions0.optimizeParameters);
      //  // Unstable assertion: assertFalse(compilerOptions0.removeEmptyFunctions);
      //  // Unstable assertion: assertFalse(compilerOptions0.optimizeReturns);
      //  // Unstable assertion: assertFalse(compilerOptions0.markAsCompiled);
      //  // Unstable assertion: assertFalse(compilerOptions0.printInputDelimiter);
      //  // Unstable assertion: assertFalse(compilerOptions0.ambiguateProperties);
      //  // Unstable assertion: assertFalse(compilerOptions0.gatherCssNames);
      //  // Unstable assertion: assertFalse(compilerOptions0.collapseObjectLiterals);
      //  // Unstable assertion: assertFalse(compilerOptions0.checkDuplicateMessages);
      //  // Unstable assertion: assertFalse(compilerOptions0.recordFunctionInformation);
      //  // Unstable assertion: assertFalse(compilerOptions0.convertToDottedProperties);
      //  // Unstable assertion: assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
      //  // Unstable assertion: assertFalse(compilerOptions0.crossModuleMethodMotion);
      //  // Unstable assertion: assertFalse(compilerOptions0.lineBreak);
      //  // Unstable assertion: assertFalse(compilerOptions0.assumeClosuresOnlyCaptureReferences);
      //  // Unstable assertion: assertFalse(compilerOptions0.optimizeCalls);
      //  // Unstable assertion: assertFalse(compilerOptions0.exportTestFunctions);
      //  // Unstable assertion: assertFalse(compilerOptions0.deadAssignmentElimination);
      //  // Unstable assertion: assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
      //  // Unstable assertion: assertFalse(compilerOptions0.checkSymbols);
      //  // Unstable assertion: assertFalse(compilerOptions0.closurePass);
      //  // Unstable assertion: assertFalse(compilerOptions0.rewriteFunctionExpressions);
      //  // Unstable assertion: assertFalse(compilerOptions0.tightenTypes);
      //  // Unstable assertion: assertFalse(compilerOptions0.allowLegacyJsMessages);
      //  // Unstable assertion: assertFalse(compilerOptions0.coalesceVariableNames);
      //  // Unstable assertion: assertFalse(compilerOptions0.checkControlStructures);
      //  // Unstable assertion: assertFalse(compilerOptions0.foldConstants);
      //  // Unstable assertion: assertFalse(compilerOptions0.smartNameRemoval);
      //  // Unstable assertion: assertFalse(compilerOptions0.checkEs5Strict);
      //  // Unstable assertion: assertFalse(compilerOptions0.collapseProperties);
      //  // Unstable assertion: assertFalse(compilerOptions0.aliasKeywords);
      //  // Unstable assertion: assertFalse(compilerOptions0.inlineVariables);
      //  // Unstable assertion: assertFalse(compilerOptions0.groupVariableDeclarations);
      //  // Unstable assertion: assertFalse(compilerOptions0.collapseVariableDeclarations);
      //  // Unstable assertion: assertFalse(compilerOptions0.checkTypes);
      //  // Unstable assertion: assertFalse(compilerOptions0.removeTryCatchFinally);
      //  // Unstable assertion: assertFalse(compilerOptions0.devirtualizePrototypeMethods);
      //  // Unstable assertion: assertFalse(compilerOptions0.inlineGetters);
      //  // Unstable assertion: assertFalse(compilerOptions0.specializeInitialModule);
      //  // Unstable assertion: assertFalse(compilerOptions0.inlineConstantVars);
      //  // Unstable assertion: assertFalse(compilerOptions0.removeUnusedLocalVars);
      //  // Unstable assertion: assertFalse(compilerOptions0.inlineFunctions);
      //  // Unstable assertion: assertFalse(compilerOptions0.ideMode);
      //  // Unstable assertion: assertFalse(compilerOptions0.reserveRawExports);
      //  // Unstable assertion: assertFalse(compilerOptions0.inferTypesInGlobalScope);
      //  // Unstable assertion: assertFalse(compilerOptions0.generatePseudoNames);
      //  // Unstable assertion: assertFalse(compilerOptions0.instrumentForCoverage);
      //  // Unstable assertion: assertFalse(compilerOptions0.computeFunctionSideEffects);
      //  // Unstable assertion: assertFalse(compilerOptions0.checkSuspiciousCode);
      //  // Unstable assertion: assertEquals(67, compiler0.getWarningCount());
      //  // Unstable assertion: assertEquals(0, compiler0.getErrorCount());
      //  // Unstable assertion: assertEquals(false, compiler0.acceptConstKeyword());
      //  // Unstable assertion: assertEquals(false, compiler0.isTypeCheckingEnabled());
      //  // Unstable assertion: assertEquals(false, compiler0.isIdeMode());
      //  // Unstable assertion: assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      //  // Unstable assertion: assertEquals(false, compiler0.hasErrors());
      //  // Unstable assertion: assertEquals(0, node0.getCharno());
      //  // Unstable assertion: assertEquals(false, node0.isVarArgs());
      //  // Unstable assertion: assertEquals(false, node0.isUnscopedQualifiedName());
      //  // Unstable assertion: assertEquals(false, node0.isLocalResultCall());
      //  // Unstable assertion: assertEquals(0, node0.getLength());
      //  // Unstable assertion: assertEquals(false, node0.isOptionalArg());
      //  // Unstable assertion: assertEquals(true, node0.hasMoreThanOneChild());
      //  // Unstable assertion: assertEquals(1, node0.getLineno());
      //  // Unstable assertion: assertEquals(false, node0.isQuotedString());
      //  // Unstable assertion: assertEquals(false, node0.hasOneChild());
      //  // Unstable assertion: assertEquals(false, node0.isNoSideEffectsCall());
      //  // Unstable assertion: assertEquals(4096, node0.getSourcePosition());
      //  // Unstable assertion: assertEquals(0, node0.getSideEffectFlags());
      //  // Unstable assertion: assertEquals(true, node0.hasChildren());
      //  // Unstable assertion: assertEquals(132, node0.getType());
      //  // Unstable assertion: assertEquals(35, node0.getChildCount());
      //  // Unstable assertion: assertEquals(false, node0.isFromExterns());
      //  // Unstable assertion: assertEquals(false, node0.wasEmptyNode());
      //  // Unstable assertion: assertEquals(false, node0.isQualifiedName());
      //  // Unstable assertion: assertEquals(false, node0.isOnlyModifiesThisCall());
      //  // Unstable assertion: assertEquals(true, node0.isSyntheticBlock());
      //  // Unstable assertion: assertEquals(" [synthetic:1] ", node0.getSourceFileName());
      //  // Unstable assertion: assertEquals(false, compilerOptions0.assumeClosuresOnlyCaptureReferences());
      //  // Unstable assertion: assertEquals(false, compilerOptions0.getInferTypes());
      //  // Unstable assertion: assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
      //  // Unstable assertion: assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compilerOptions0.getLanguageIn());
      //  // Unstable assertion: assertNull(compilerOptions0.getLanguageOut());
      //  // Unstable assertion: assertEquals(false, compilerOptions0.isExternExportsEnabled());
      //  // Unstable assertion: assertEquals(false, compilerOptions0.assumeStrictThis());
      //  // Unstable assertion: assertEquals(CompilerOptions.TweakProcessing.OFF, compilerOptions0.getTweakProcessing());
      
      DefaultPassConfig defaultPassConfig0 = compiler0.ensureDefaultPassConfig();
      //  // Unstable assertion: assertNotNull(defaultPassConfig0);
      //  // Unstable assertion: assertEquals(67, compiler0.getWarningCount());
      //  // Unstable assertion: assertEquals(0, compiler0.getErrorCount());
      //  // Unstable assertion: assertEquals(false, compiler0.acceptConstKeyword());
      //  // Unstable assertion: assertEquals(false, compiler0.isTypeCheckingEnabled());
      //  // Unstable assertion: assertEquals(false, compiler0.isIdeMode());
      //  // Unstable assertion: assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      //  // Unstable assertion: assertEquals(false, compiler0.hasErrors());
      
      defaultPassConfig0.regenerateGlobalTypedScope(compiler0, node0);
      //  // Unstable assertion: assertFalse(compilerOptions0.inlineLocalVariables);
      //  // Unstable assertion: assertFalse(compilerOptions0.checkTypedPropertyCalls);
      //  // Unstable assertion: assertFalse(compilerOptions0.aliasAllStrings);
      //  // Unstable assertion: assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
      //  // Unstable assertion: assertFalse(compilerOptions0.flowSensitiveInlineVariables);
      //  // Unstable assertion: assertFalse(compilerOptions0.optimizeArgumentsArray);
      //  // Unstable assertion: assertFalse(compilerOptions0.markNoSideEffectCalls);
      //  // Unstable assertion: assertFalse(compilerOptions0.collapseAnonymousFunctions);
      //  // Unstable assertion: assertFalse(compilerOptions0.inlineLocalFunctions);
      //  // Unstable assertion: assertFalse(compilerOptions0.ignoreCajaProperties);
      //  // Unstable assertion: assertFalse(compilerOptions0.removeDeadCode);
      //  // Unstable assertion: assertFalse(compilerOptions0.aliasExternals);
      //  // Unstable assertion: assertFalse(compilerOptions0.prettyPrint);
      //  // Unstable assertion: assertFalse(compilerOptions0.labelRenaming);
      //  // Unstable assertion: assertFalse(compilerOptions0.generateExports);
      //  // Unstable assertion: assertFalse(compilerOptions0.instrumentForCoverageOnly);
      //  // Unstable assertion: assertFalse(compilerOptions0.strictMessageReplacement);
      //  // Unstable assertion: assertFalse(compilerOptions0.checkCaja);
      //  // Unstable assertion: assertFalse(compilerOptions0.moveFunctionDeclarations);
      //  // Unstable assertion: assertFalse(compilerOptions0.disambiguateProperties);
      //  // Unstable assertion: assertFalse(compilerOptions0.removeUnusedVars);
      //  // Unstable assertion: assertFalse(compilerOptions0.crossModuleCodeMotion);
      //  // Unstable assertion: assertFalse(compilerOptions0.optimizeParameters);
      //  // Unstable assertion: assertFalse(compilerOptions0.removeEmptyFunctions);
      //  // Unstable assertion: assertFalse(compilerOptions0.optimizeReturns);
      //  // Unstable assertion: assertFalse(compilerOptions0.markAsCompiled);
      //  // Unstable assertion: assertFalse(compilerOptions0.printInputDelimiter);
      //  // Unstable assertion: assertFalse(compilerOptions0.ambiguateProperties);
      //  // Unstable assertion: assertFalse(compilerOptions0.gatherCssNames);
      //  // Unstable assertion: assertFalse(compilerOptions0.collapseObjectLiterals);
      //  // Unstable assertion: assertFalse(compilerOptions0.checkDuplicateMessages);
      //  // Unstable assertion: assertFalse(compilerOptions0.recordFunctionInformation);
      //  // Unstable assertion: assertFalse(compilerOptions0.convertToDottedProperties);
      //  // Unstable assertion: assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
      //  // Unstable assertion: assertFalse(compilerOptions0.crossModuleMethodMotion);
      //  // Unstable assertion: assertFalse(compilerOptions0.lineBreak);
      //  // Unstable assertion: assertFalse(compilerOptions0.assumeClosuresOnlyCaptureReferences);
      //  // Unstable assertion: assertFalse(compilerOptions0.optimizeCalls);
      //  // Unstable assertion: assertFalse(compilerOptions0.exportTestFunctions);
      //  // Unstable assertion: assertFalse(compilerOptions0.deadAssignmentElimination);
      //  // Unstable assertion: assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
      //  // Unstable assertion: assertFalse(compilerOptions0.checkSymbols);
      //  // Unstable assertion: assertFalse(compilerOptions0.closurePass);
      //  // Unstable assertion: assertFalse(compilerOptions0.rewriteFunctionExpressions);
      //  // Unstable assertion: assertFalse(compilerOptions0.tightenTypes);
      //  // Unstable assertion: assertFalse(compilerOptions0.allowLegacyJsMessages);
      //  // Unstable assertion: assertFalse(compilerOptions0.coalesceVariableNames);
      //  // Unstable assertion: assertFalse(compilerOptions0.checkControlStructures);
      //  // Unstable assertion: assertFalse(compilerOptions0.foldConstants);
      //  // Unstable assertion: assertFalse(compilerOptions0.smartNameRemoval);
      //  // Unstable assertion: assertFalse(compilerOptions0.checkEs5Strict);
      //  // Unstable assertion: assertFalse(compilerOptions0.collapseProperties);
      //  // Unstable assertion: assertFalse(compilerOptions0.aliasKeywords);
      //  // Unstable assertion: assertFalse(compilerOptions0.inlineVariables);
      //  // Unstable assertion: assertFalse(compilerOptions0.groupVariableDeclarations);
      //  // Unstable assertion: assertFalse(compilerOptions0.collapseVariableDeclarations);
      //  // Unstable assertion: assertFalse(compilerOptions0.checkTypes);
      //  // Unstable assertion: assertFalse(compilerOptions0.removeTryCatchFinally);
      //  // Unstable assertion: assertFalse(compilerOptions0.devirtualizePrototypeMethods);
      //  // Unstable assertion: assertFalse(compilerOptions0.inlineGetters);
      //  // Unstable assertion: assertFalse(compilerOptions0.specializeInitialModule);
      //  // Unstable assertion: assertFalse(compilerOptions0.inlineConstantVars);
      //  // Unstable assertion: assertFalse(compilerOptions0.removeUnusedLocalVars);
      //  // Unstable assertion: assertFalse(compilerOptions0.inlineFunctions);
      //  // Unstable assertion: assertFalse(compilerOptions0.ideMode);
      //  // Unstable assertion: assertFalse(compilerOptions0.reserveRawExports);
      //  // Unstable assertion: assertFalse(compilerOptions0.inferTypesInGlobalScope);
      //  // Unstable assertion: assertFalse(compilerOptions0.generatePseudoNames);
      //  // Unstable assertion: assertFalse(compilerOptions0.instrumentForCoverage);
      //  // Unstable assertion: assertFalse(compilerOptions0.computeFunctionSideEffects);
      //  // Unstable assertion: assertFalse(compilerOptions0.checkSuspiciousCode);
      //  // Unstable assertion: assertEquals(67, compiler0.getWarningCount());
      //  // Unstable assertion: assertEquals(0, compiler0.getErrorCount());
      //  // Unstable assertion: assertEquals(false, compiler0.acceptConstKeyword());
      //  // Unstable assertion: assertEquals(false, compiler0.isTypeCheckingEnabled());
      //  // Unstable assertion: assertEquals(false, compiler0.isIdeMode());
      //  // Unstable assertion: assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      //  // Unstable assertion: assertEquals(false, compiler0.hasErrors());
      //  // Unstable assertion: assertEquals(0, node0.getCharno());
      //  // Unstable assertion: assertEquals(false, node0.isVarArgs());
      //  // Unstable assertion: assertEquals(false, node0.isUnscopedQualifiedName());
      //  // Unstable assertion: assertEquals(false, node0.isLocalResultCall());
      //  // Unstable assertion: assertEquals(0, node0.getLength());
      //  // Unstable assertion: assertEquals(false, node0.isOptionalArg());
      //  // Unstable assertion: assertEquals(true, node0.hasMoreThanOneChild());
      //  // Unstable assertion: assertEquals(1, node0.getLineno());
      //  // Unstable assertion: assertEquals(false, node0.isQuotedString());
      //  // Unstable assertion: assertEquals(false, node0.hasOneChild());
      //  // Unstable assertion: assertEquals(false, node0.isNoSideEffectsCall());
      //  // Unstable assertion: assertEquals(4096, node0.getSourcePosition());
      //  // Unstable assertion: assertEquals(0, node0.getSideEffectFlags());
      //  // Unstable assertion: assertEquals(true, node0.hasChildren());
      //  // Unstable assertion: assertEquals(132, node0.getType());
      //  // Unstable assertion: assertEquals(35, node0.getChildCount());
      //  // Unstable assertion: assertEquals(false, node0.isFromExterns());
      //  // Unstable assertion: assertEquals(false, node0.wasEmptyNode());
      //  // Unstable assertion: assertEquals(false, node0.isQualifiedName());
      //  // Unstable assertion: assertEquals(false, node0.isOnlyModifiesThisCall());
      //  // Unstable assertion: assertEquals(true, node0.isSyntheticBlock());
      //  // Unstable assertion: assertEquals(" [synthetic:1] ", node0.getSourceFileName());
      //  // Unstable assertion: assertEquals(false, compilerOptions0.assumeClosuresOnlyCaptureReferences());
      //  // Unstable assertion: assertEquals(false, compilerOptions0.getInferTypes());
      //  // Unstable assertion: assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
      //  // Unstable assertion: assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compilerOptions0.getLanguageIn());
      //  // Unstable assertion: assertNull(compilerOptions0.getLanguageOut());
      //  // Unstable assertion: assertEquals(false, compilerOptions0.isExternExportsEnabled());
      //  // Unstable assertion: assertEquals(false, compilerOptions0.assumeStrictThis());
      //  // Unstable assertion: assertEquals(CompilerOptions.TweakProcessing.OFF, compilerOptions0.getTweakProcessing());
      
      defaultPassConfig0.patchGlobalTypedScope(compiler0, node0);
      //  // Unstable assertion: assertFalse(compilerOptions0.inlineLocalVariables);
      //  // Unstable assertion: assertFalse(compilerOptions0.checkTypedPropertyCalls);
      //  // Unstable assertion: assertFalse(compilerOptions0.aliasAllStrings);
      //  // Unstable assertion: assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
      //  // Unstable assertion: assertFalse(compilerOptions0.flowSensitiveInlineVariables);
      //  // Unstable assertion: assertFalse(compilerOptions0.optimizeArgumentsArray);
      //  // Unstable assertion: assertFalse(compilerOptions0.markNoSideEffectCalls);
      //  // Unstable assertion: assertFalse(compilerOptions0.collapseAnonymousFunctions);
      //  // Unstable assertion: assertFalse(compilerOptions0.inlineLocalFunctions);
      //  // Unstable assertion: assertFalse(compilerOptions0.ignoreCajaProperties);
      //  // Unstable assertion: assertFalse(compilerOptions0.removeDeadCode);
      //  // Unstable assertion: assertFalse(compilerOptions0.aliasExternals);
      //  // Unstable assertion: assertFalse(compilerOptions0.prettyPrint);
      //  // Unstable assertion: assertFalse(compilerOptions0.labelRenaming);
      //  // Unstable assertion: assertFalse(compilerOptions0.generateExports);
      //  // Unstable assertion: assertFalse(compilerOptions0.instrumentForCoverageOnly);
      //  // Unstable assertion: assertFalse(compilerOptions0.strictMessageReplacement);
      //  // Unstable assertion: assertFalse(compilerOptions0.checkCaja);
      //  // Unstable assertion: assertFalse(compilerOptions0.moveFunctionDeclarations);
      //  // Unstable assertion: assertFalse(compilerOptions0.disambiguateProperties);
      //  // Unstable assertion: assertFalse(compilerOptions0.removeUnusedVars);
      //  // Unstable assertion: assertFalse(compilerOptions0.crossModuleCodeMotion);
      //  // Unstable assertion: assertFalse(compilerOptions0.optimizeParameters);
      //  // Unstable assertion: assertFalse(compilerOptions0.removeEmptyFunctions);
      //  // Unstable assertion: assertFalse(compilerOptions0.optimizeReturns);
      //  // Unstable assertion: assertFalse(compilerOptions0.markAsCompiled);
      //  // Unstable assertion: assertFalse(compilerOptions0.printInputDelimiter);
      //  // Unstable assertion: assertFalse(compilerOptions0.ambiguateProperties);
      //  // Unstable assertion: assertFalse(compilerOptions0.gatherCssNames);
      //  // Unstable assertion: assertFalse(compilerOptions0.collapseObjectLiterals);
      //  // Unstable assertion: assertFalse(compilerOptions0.checkDuplicateMessages);
      //  // Unstable assertion: assertFalse(compilerOptions0.recordFunctionInformation);
      //  // Unstable assertion: assertFalse(compilerOptions0.convertToDottedProperties);
      //  // Unstable assertion: assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
      //  // Unstable assertion: assertFalse(compilerOptions0.crossModuleMethodMotion);
      //  // Unstable assertion: assertFalse(compilerOptions0.lineBreak);
      //  // Unstable assertion: assertFalse(compilerOptions0.assumeClosuresOnlyCaptureReferences);
      //  // Unstable assertion: assertFalse(compilerOptions0.optimizeCalls);
      //  // Unstable assertion: assertFalse(compilerOptions0.exportTestFunctions);
      //  // Unstable assertion: assertFalse(compilerOptions0.deadAssignmentElimination);
      //  // Unstable assertion: assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
      //  // Unstable assertion: assertFalse(compilerOptions0.checkSymbols);
      //  // Unstable assertion: assertFalse(compilerOptions0.closurePass);
      //  // Unstable assertion: assertFalse(compilerOptions0.rewriteFunctionExpressions);
      //  // Unstable assertion: assertFalse(compilerOptions0.tightenTypes);
      //  // Unstable assertion: assertFalse(compilerOptions0.allowLegacyJsMessages);
      //  // Unstable assertion: assertFalse(compilerOptions0.coalesceVariableNames);
      //  // Unstable assertion: assertFalse(compilerOptions0.checkControlStructures);
      //  // Unstable assertion: assertFalse(compilerOptions0.foldConstants);
      //  // Unstable assertion: assertFalse(compilerOptions0.smartNameRemoval);
      //  // Unstable assertion: assertFalse(compilerOptions0.checkEs5Strict);
      //  // Unstable assertion: assertFalse(compilerOptions0.collapseProperties);
      //  // Unstable assertion: assertFalse(compilerOptions0.aliasKeywords);
      //  // Unstable assertion: assertFalse(compilerOptions0.inlineVariables);
      //  // Unstable assertion: assertFalse(compilerOptions0.groupVariableDeclarations);
      //  // Unstable assertion: assertFalse(compilerOptions0.collapseVariableDeclarations);
      //  // Unstable assertion: assertFalse(compilerOptions0.checkTypes);
      //  // Unstable assertion: assertFalse(compilerOptions0.removeTryCatchFinally);
      //  // Unstable assertion: assertFalse(compilerOptions0.devirtualizePrototypeMethods);
      //  // Unstable assertion: assertFalse(compilerOptions0.inlineGetters);
      //  // Unstable assertion: assertFalse(compilerOptions0.specializeInitialModule);
      //  // Unstable assertion: assertFalse(compilerOptions0.inlineConstantVars);
      //  // Unstable assertion: assertFalse(compilerOptions0.removeUnusedLocalVars);
      //  // Unstable assertion: assertFalse(compilerOptions0.inlineFunctions);
      //  // Unstable assertion: assertFalse(compilerOptions0.ideMode);
      //  // Unstable assertion: assertFalse(compilerOptions0.reserveRawExports);
      //  // Unstable assertion: assertFalse(compilerOptions0.inferTypesInGlobalScope);
      //  // Unstable assertion: assertFalse(compilerOptions0.generatePseudoNames);
      //  // Unstable assertion: assertFalse(compilerOptions0.instrumentForCoverage);
      //  // Unstable assertion: assertFalse(compilerOptions0.computeFunctionSideEffects);
      //  // Unstable assertion: assertFalse(compilerOptions0.checkSuspiciousCode);
      //  // Unstable assertion: assertEquals(67, compiler0.getWarningCount());
      //  // Unstable assertion: assertEquals(0, compiler0.getErrorCount());
      //  // Unstable assertion: assertEquals(false, compiler0.acceptConstKeyword());
      //  // Unstable assertion: assertEquals(false, compiler0.isTypeCheckingEnabled());
      //  // Unstable assertion: assertEquals(false, compiler0.isIdeMode());
      //  // Unstable assertion: assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      //  // Unstable assertion: assertEquals(false, compiler0.hasErrors());
      //  // Unstable assertion: assertEquals(0, node0.getCharno());
      //  // Unstable assertion: assertEquals(false, node0.isVarArgs());
      //  // Unstable assertion: assertEquals(false, node0.isUnscopedQualifiedName());
      //  // Unstable assertion: assertEquals(false, node0.isLocalResultCall());
      //  // Unstable assertion: assertEquals(0, node0.getLength());
      //  // Unstable assertion: assertEquals(false, node0.isOptionalArg());
      //  // Unstable assertion: assertEquals(true, node0.hasMoreThanOneChild());
      //  // Unstable assertion: assertEquals(1, node0.getLineno());
      //  // Unstable assertion: assertEquals(false, node0.isQuotedString());
      //  // Unstable assertion: assertEquals(false, node0.hasOneChild());
      //  // Unstable assertion: assertEquals(false, node0.isNoSideEffectsCall());
      //  // Unstable assertion: assertEquals(4096, node0.getSourcePosition());
      //  // Unstable assertion: assertEquals(0, node0.getSideEffectFlags());
      //  // Unstable assertion: assertEquals(true, node0.hasChildren());
      //  // Unstable assertion: assertEquals(132, node0.getType());
      //  // Unstable assertion: assertEquals(35, node0.getChildCount());
      //  // Unstable assertion: assertEquals(false, node0.isFromExterns());
      //  // Unstable assertion: assertEquals(false, node0.wasEmptyNode());
      //  // Unstable assertion: assertEquals(false, node0.isQualifiedName());
      //  // Unstable assertion: assertEquals(false, node0.isOnlyModifiesThisCall());
      //  // Unstable assertion: assertEquals(true, node0.isSyntheticBlock());
      //  // Unstable assertion: assertEquals(" [synthetic:1] ", node0.getSourceFileName());
      //  // Unstable assertion: assertEquals(false, compilerOptions0.assumeClosuresOnlyCaptureReferences());
      //  // Unstable assertion: assertEquals(false, compilerOptions0.getInferTypes());
      //  // Unstable assertion: assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
      //  // Unstable assertion: assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compilerOptions0.getLanguageIn());
      //  // Unstable assertion: assertNull(compilerOptions0.getLanguageOut());
      //  // Unstable assertion: assertEquals(false, compilerOptions0.isExternExportsEnabled());
      //  // Unstable assertion: assertEquals(false, compilerOptions0.assumeStrictThis());
      //  // Unstable assertion: assertEquals(CompilerOptions.TweakProcessing.OFF, compilerOptions0.getTweakProcessing());
  }

  @Test
  public void test3()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      //  // Unstable assertion: assertNotNull(compiler0);
      
      Stack<JSSourceFile> stack0 = new Stack<JSSourceFile>();
      //  // Unstable assertion: assertNotNull(stack0);
      //  // Unstable assertion: assertEquals(true, stack0.empty());
      //  // Unstable assertion: assertEquals("[]", stack0.toString());
      //  // Unstable assertion: assertEquals(true, stack0.isEmpty());
      //  // Unstable assertion: assertEquals(0, stack0.size());
      //  // Unstable assertion: assertEquals(10, stack0.capacity());
      
      CompilerOptions compilerOptions0 = new CompilerOptions();
      //  // Unstable assertion: assertNotNull(compilerOptions0);
      //  // Unstable assertion: assertFalse(compilerOptions0.inferTypesInGlobalScope);
      //  // Unstable assertion: assertFalse(compilerOptions0.labelRenaming);
      //  // Unstable assertion: assertFalse(compilerOptions0.inlineLocalVariables);
      //  // Unstable assertion: assertFalse(compilerOptions0.inlineVariables);
      //  // Unstable assertion: assertFalse(compilerOptions0.lineBreak);
      //  // Unstable assertion: assertFalse(compilerOptions0.checkEs5Strict);
      //  // Unstable assertion: assertFalse(compilerOptions0.crossModuleCodeMotion);
      //  // Unstable assertion: assertFalse(compilerOptions0.coalesceVariableNames);
      //  // Unstable assertion: assertFalse(compilerOptions0.instrumentForCoverage);
      //  // Unstable assertion: assertFalse(compilerOptions0.collapseVariableDeclarations);
      //  // Unstable assertion: assertFalse(compilerOptions0.removeDeadCode);
      //  // Unstable assertion: assertFalse(compilerOptions0.allowLegacyJsMessages);
      //  // Unstable assertion: assertFalse(compilerOptions0.checkCaja);
      //  // Unstable assertion: assertFalse(compilerOptions0.rewriteFunctionExpressions);
      //  // Unstable assertion: assertFalse(compilerOptions0.reserveRawExports);
      //  // Unstable assertion: assertFalse(compilerOptions0.foldConstants);
      //  // Unstable assertion: assertFalse(compilerOptions0.markNoSideEffectCalls);
      //  // Unstable assertion: assertFalse(compilerOptions0.aliasKeywords);
      //  // Unstable assertion: assertFalse(compilerOptions0.checkTypes);
      //  // Unstable assertion: assertFalse(compilerOptions0.optimizeReturns);
      //  // Unstable assertion: assertFalse(compilerOptions0.gatherCssNames);
      //  // Unstable assertion: assertFalse(compilerOptions0.closurePass);
      //  // Unstable assertion: assertFalse(compilerOptions0.removeUnusedVars);
      //  // Unstable assertion: assertFalse(compilerOptions0.prettyPrint);
      //  // Unstable assertion: assertFalse(compilerOptions0.tightenTypes);
      //  // Unstable assertion: assertFalse(compilerOptions0.markAsCompiled);
      //  // Unstable assertion: assertFalse(compilerOptions0.generateExports);
      //  // Unstable assertion: assertFalse(compilerOptions0.convertToDottedProperties);
      //  // Unstable assertion: assertFalse(compilerOptions0.checkSymbols);
      //  // Unstable assertion: assertFalse(compilerOptions0.generatePseudoNames);
      //  // Unstable assertion: assertFalse(compilerOptions0.removeTryCatchFinally);
      //  // Unstable assertion: assertFalse(compilerOptions0.optimizeCalls);
      //  // Unstable assertion: assertFalse(compilerOptions0.flowSensitiveInlineVariables);
      //  // Unstable assertion: assertFalse(compilerOptions0.aliasExternals);
      //  // Unstable assertion: assertFalse(compilerOptions0.ambiguateProperties);
      //  // Unstable assertion: assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
      //  // Unstable assertion: assertFalse(compilerOptions0.assumeClosuresOnlyCaptureReferences);
      //  // Unstable assertion: assertFalse(compilerOptions0.deadAssignmentElimination);
      //  // Unstable assertion: assertFalse(compilerOptions0.optimizeArgumentsArray);
      //  // Unstable assertion: assertFalse(compilerOptions0.optimizeParameters);
      //  // Unstable assertion: assertFalse(compilerOptions0.recordFunctionInformation);
      //  // Unstable assertion: assertFalse(compilerOptions0.crossModuleMethodMotion);
      //  // Unstable assertion: assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
      //  // Unstable assertion: assertFalse(compilerOptions0.removeEmptyFunctions);
      //  // Unstable assertion: assertFalse(compilerOptions0.inlineConstantVars);
      //  // Unstable assertion: assertFalse(compilerOptions0.strictMessageReplacement);
      //  // Unstable assertion: assertFalse(compilerOptions0.devirtualizePrototypeMethods);
      //  // Unstable assertion: assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
      //  // Unstable assertion: assertFalse(compilerOptions0.printInputDelimiter);
      //  // Unstable assertion: assertFalse(compilerOptions0.inlineLocalFunctions);
      //  // Unstable assertion: assertFalse(compilerOptions0.removeUnusedLocalVars);
      //  // Unstable assertion: assertFalse(compilerOptions0.collapseProperties);
      //  // Unstable assertion: assertFalse(compilerOptions0.groupVariableDeclarations);
      //  // Unstable assertion: assertFalse(compilerOptions0.inlineFunctions);
      //  // Unstable assertion: assertFalse(compilerOptions0.checkTypedPropertyCalls);
      //  // Unstable assertion: assertFalse(compilerOptions0.aliasAllStrings);
      //  // Unstable assertion: assertFalse(compilerOptions0.ignoreCajaProperties);
      //  // Unstable assertion: assertFalse(compilerOptions0.collapseObjectLiterals);
      //  // Unstable assertion: assertFalse(compilerOptions0.checkSuspiciousCode);
      //  // Unstable assertion: assertFalse(compilerOptions0.checkControlStructures);
      //  // Unstable assertion: assertFalse(compilerOptions0.instrumentForCoverageOnly);
      //  // Unstable assertion: assertFalse(compilerOptions0.checkDuplicateMessages);
      //  // Unstable assertion: assertFalse(compilerOptions0.inlineGetters);
      //  // Unstable assertion: assertFalse(compilerOptions0.ideMode);
      //  // Unstable assertion: assertFalse(compilerOptions0.moveFunctionDeclarations);
      //  // Unstable assertion: assertFalse(compilerOptions0.smartNameRemoval);
      //  // Unstable assertion: assertFalse(compilerOptions0.exportTestFunctions);
      //  // Unstable assertion: assertFalse(compilerOptions0.disambiguateProperties);
      //  // Unstable assertion: assertFalse(compilerOptions0.computeFunctionSideEffects);
      //  // Unstable assertion: assertFalse(compilerOptions0.specializeInitialModule);
      //  // Unstable assertion: assertFalse(compilerOptions0.collapseAnonymousFunctions);
      //  // Unstable assertion: assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
      //  // Unstable assertion: assertEquals(false, compilerOptions0.assumeClosuresOnlyCaptureReferences());
      //  // Unstable assertion: assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compilerOptions0.getLanguageIn());
      //  // Unstable assertion: assertEquals(false, compilerOptions0.getInferTypes());
      //  // Unstable assertion: assertNull(compilerOptions0.getLanguageOut());
      //  // Unstable assertion: assertEquals(CompilerOptions.TweakProcessing.OFF, compilerOptions0.getTweakProcessing());
      //  // Unstable assertion: assertEquals(false, compilerOptions0.assumeStrictThis());
      //  // Unstable assertion: assertEquals(false, compilerOptions0.isExternExportsEnabled());
      
      Result result0 = compiler0.compile((List<JSSourceFile>) stack0, (List<JSSourceFile>) stack0, compilerOptions0);
      //  // Unstable assertion: assertNotNull(result0);
      //  // Unstable assertion: assertFalse(compilerOptions0.inferTypesInGlobalScope);
      //  // Unstable assertion: assertFalse(compilerOptions0.labelRenaming);
      //  // Unstable assertion: assertFalse(compilerOptions0.inlineLocalVariables);
      //  // Unstable assertion: assertFalse(compilerOptions0.inlineVariables);
      //  // Unstable assertion: assertFalse(compilerOptions0.lineBreak);
      //  // Unstable assertion: assertFalse(compilerOptions0.checkEs5Strict);
      //  // Unstable assertion: assertFalse(compilerOptions0.crossModuleCodeMotion);
      //  // Unstable assertion: assertFalse(compilerOptions0.coalesceVariableNames);
      //  // Unstable assertion: assertFalse(compilerOptions0.instrumentForCoverage);
      //  // Unstable assertion: assertFalse(compilerOptions0.collapseVariableDeclarations);
      //  // Unstable assertion: assertFalse(compilerOptions0.removeDeadCode);
      //  // Unstable assertion: assertFalse(compilerOptions0.allowLegacyJsMessages);
      //  // Unstable assertion: assertFalse(compilerOptions0.checkCaja);
      //  // Unstable assertion: assertFalse(compilerOptions0.rewriteFunctionExpressions);
      //  // Unstable assertion: assertFalse(compilerOptions0.reserveRawExports);
      //  // Unstable assertion: assertFalse(compilerOptions0.foldConstants);
      //  // Unstable assertion: assertFalse(compilerOptions0.markNoSideEffectCalls);
      //  // Unstable assertion: assertFalse(compilerOptions0.aliasKeywords);
      //  // Unstable assertion: assertFalse(compilerOptions0.checkTypes);
      //  // Unstable assertion: assertFalse(compilerOptions0.optimizeReturns);
      //  // Unstable assertion: assertFalse(compilerOptions0.gatherCssNames);
      //  // Unstable assertion: assertFalse(compilerOptions0.closurePass);
      //  // Unstable assertion: assertFalse(compilerOptions0.removeUnusedVars);
      //  // Unstable assertion: assertFalse(compilerOptions0.prettyPrint);
      //  // Unstable assertion: assertFalse(compilerOptions0.tightenTypes);
      //  // Unstable assertion: assertFalse(compilerOptions0.markAsCompiled);
      //  // Unstable assertion: assertFalse(compilerOptions0.generateExports);
      //  // Unstable assertion: assertFalse(compilerOptions0.convertToDottedProperties);
      //  // Unstable assertion: assertFalse(compilerOptions0.checkSymbols);
      //  // Unstable assertion: assertFalse(compilerOptions0.generatePseudoNames);
      //  // Unstable assertion: assertFalse(compilerOptions0.removeTryCatchFinally);
      //  // Unstable assertion: assertFalse(compilerOptions0.optimizeCalls);
      //  // Unstable assertion: assertFalse(compilerOptions0.flowSensitiveInlineVariables);
      //  // Unstable assertion: assertFalse(compilerOptions0.aliasExternals);
      //  // Unstable assertion: assertFalse(compilerOptions0.ambiguateProperties);
      //  // Unstable assertion: assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
      //  // Unstable assertion: assertFalse(compilerOptions0.assumeClosuresOnlyCaptureReferences);
      //  // Unstable assertion: assertFalse(compilerOptions0.deadAssignmentElimination);
      //  // Unstable assertion: assertFalse(compilerOptions0.optimizeArgumentsArray);
      //  // Unstable assertion: assertFalse(compilerOptions0.optimizeParameters);
      //  // Unstable assertion: assertFalse(compilerOptions0.recordFunctionInformation);
      //  // Unstable assertion: assertFalse(compilerOptions0.crossModuleMethodMotion);
      //  // Unstable assertion: assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
      //  // Unstable assertion: assertFalse(compilerOptions0.removeEmptyFunctions);
      //  // Unstable assertion: assertFalse(compilerOptions0.inlineConstantVars);
      //  // Unstable assertion: assertFalse(compilerOptions0.strictMessageReplacement);
      //  // Unstable assertion: assertFalse(compilerOptions0.devirtualizePrototypeMethods);
      //  // Unstable assertion: assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
      //  // Unstable assertion: assertFalse(compilerOptions0.printInputDelimiter);
      //  // Unstable assertion: assertFalse(compilerOptions0.inlineLocalFunctions);
      //  // Unstable assertion: assertFalse(compilerOptions0.removeUnusedLocalVars);
      //  // Unstable assertion: assertFalse(compilerOptions0.collapseProperties);
      //  // Unstable assertion: assertFalse(compilerOptions0.groupVariableDeclarations);
      //  // Unstable assertion: assertFalse(compilerOptions0.inlineFunctions);
      //  // Unstable assertion: assertFalse(compilerOptions0.checkTypedPropertyCalls);
      //  // Unstable assertion: assertFalse(compilerOptions0.aliasAllStrings);
      //  // Unstable assertion: assertFalse(compilerOptions0.ignoreCajaProperties);
      //  // Unstable assertion: assertFalse(compilerOptions0.collapseObjectLiterals);
      //  // Unstable assertion: assertFalse(compilerOptions0.checkSuspiciousCode);
      //  // Unstable assertion: assertFalse(compilerOptions0.checkControlStructures);
      //  // Unstable assertion: assertFalse(compilerOptions0.instrumentForCoverageOnly);
      //  // Unstable assertion: assertFalse(compilerOptions0.checkDuplicateMessages);
      //  // Unstable assertion: assertFalse(compilerOptions0.inlineGetters);
      //  // Unstable assertion: assertFalse(compilerOptions0.ideMode);
      //  // Unstable assertion: assertFalse(compilerOptions0.moveFunctionDeclarations);
      //  // Unstable assertion: assertFalse(compilerOptions0.smartNameRemoval);
      //  // Unstable assertion: assertFalse(compilerOptions0.exportTestFunctions);
      //  // Unstable assertion: assertFalse(compilerOptions0.disambiguateProperties);
      //  // Unstable assertion: assertFalse(compilerOptions0.computeFunctionSideEffects);
      //  // Unstable assertion: assertFalse(compilerOptions0.specializeInitialModule);
      //  // Unstable assertion: assertFalse(compilerOptions0.collapseAnonymousFunctions);
      //  // Unstable assertion: assertEquals(true, stack0.empty());
      //  // Unstable assertion: assertEquals("[]", stack0.toString());
      //  // Unstable assertion: assertEquals(true, stack0.isEmpty());
      //  // Unstable assertion: assertEquals(0, stack0.size());
      //  // Unstable assertion: assertEquals(10, stack0.capacity());
      //  // Unstable assertion: assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
      //  // Unstable assertion: assertEquals(false, compilerOptions0.assumeClosuresOnlyCaptureReferences());
      //  // Unstable assertion: assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compilerOptions0.getLanguageIn());
      //  // Unstable assertion: assertEquals(false, compilerOptions0.getInferTypes());
      //  // Unstable assertion: assertNull(compilerOptions0.getLanguageOut());
      //  // Unstable assertion: assertEquals(CompilerOptions.TweakProcessing.OFF, compilerOptions0.getTweakProcessing());
      //  // Unstable assertion: assertEquals(false, compilerOptions0.assumeStrictThis());
      //  // Unstable assertion: assertEquals(false, compilerOptions0.isExternExportsEnabled());
      //  // Unstable assertion: assertEquals(false, compiler0.isTypeCheckingEnabled());
      //  // Unstable assertion: assertEquals(0, compiler0.getErrorCount());
      //  // Unstable assertion: assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      //  // Unstable assertion: assertEquals(false, compiler0.isIdeMode());
      //  // Unstable assertion: assertEquals(0, compiler0.getWarningCount());
      //  // Unstable assertion: assertEquals(false, compiler0.acceptConstKeyword());
      //  // Unstable assertion: assertEquals(false, compiler0.hasErrors());
      
      CodingConvention codingConvention0 = compilerOptions0.getCodingConvention();
      //  // Unstable assertion: assertNull(codingConvention0);
      //  // Unstable assertion: assertFalse(compilerOptions0.inferTypesInGlobalScope);
      //  // Unstable assertion: assertFalse(compilerOptions0.labelRenaming);
      //  // Unstable assertion: assertFalse(compilerOptions0.inlineLocalVariables);
      //  // Unstable assertion: assertFalse(compilerOptions0.inlineVariables);
      //  // Unstable assertion: assertFalse(compilerOptions0.lineBreak);
      //  // Unstable assertion: assertFalse(compilerOptions0.checkEs5Strict);
      //  // Unstable assertion: assertFalse(compilerOptions0.crossModuleCodeMotion);
      //  // Unstable assertion: assertFalse(compilerOptions0.coalesceVariableNames);
      //  // Unstable assertion: assertFalse(compilerOptions0.instrumentForCoverage);
      //  // Unstable assertion: assertFalse(compilerOptions0.collapseVariableDeclarations);
      //  // Unstable assertion: assertFalse(compilerOptions0.removeDeadCode);
      //  // Unstable assertion: assertFalse(compilerOptions0.allowLegacyJsMessages);
      //  // Unstable assertion: assertFalse(compilerOptions0.checkCaja);
      //  // Unstable assertion: assertFalse(compilerOptions0.rewriteFunctionExpressions);
      //  // Unstable assertion: assertFalse(compilerOptions0.reserveRawExports);
      //  // Unstable assertion: assertFalse(compilerOptions0.foldConstants);
      //  // Unstable assertion: assertFalse(compilerOptions0.markNoSideEffectCalls);
      //  // Unstable assertion: assertFalse(compilerOptions0.aliasKeywords);
      //  // Unstable assertion: assertFalse(compilerOptions0.checkTypes);
      //  // Unstable assertion: assertFalse(compilerOptions0.optimizeReturns);
      //  // Unstable assertion: assertFalse(compilerOptions0.gatherCssNames);
      //  // Unstable assertion: assertFalse(compilerOptions0.closurePass);
      //  // Unstable assertion: assertFalse(compilerOptions0.removeUnusedVars);
      //  // Unstable assertion: assertFalse(compilerOptions0.prettyPrint);
      //  // Unstable assertion: assertFalse(compilerOptions0.tightenTypes);
      //  // Unstable assertion: assertFalse(compilerOptions0.markAsCompiled);
      //  // Unstable assertion: assertFalse(compilerOptions0.generateExports);
      //  // Unstable assertion: assertFalse(compilerOptions0.convertToDottedProperties);
      //  // Unstable assertion: assertFalse(compilerOptions0.checkSymbols);
      //  // Unstable assertion: assertFalse(compilerOptions0.generatePseudoNames);
      //  // Unstable assertion: assertFalse(compilerOptions0.removeTryCatchFinally);
      //  // Unstable assertion: assertFalse(compilerOptions0.optimizeCalls);
      //  // Unstable assertion: assertFalse(compilerOptions0.flowSensitiveInlineVariables);
      //  // Unstable assertion: assertFalse(compilerOptions0.aliasExternals);
      //  // Unstable assertion: assertFalse(compilerOptions0.ambiguateProperties);
      //  // Unstable assertion: assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
      //  // Unstable assertion: assertFalse(compilerOptions0.assumeClosuresOnlyCaptureReferences);
      //  // Unstable assertion: assertFalse(compilerOptions0.deadAssignmentElimination);
      //  // Unstable assertion: assertFalse(compilerOptions0.optimizeArgumentsArray);
      //  // Unstable assertion: assertFalse(compilerOptions0.optimizeParameters);
      //  // Unstable assertion: assertFalse(compilerOptions0.recordFunctionInformation);
      //  // Unstable assertion: assertFalse(compilerOptions0.crossModuleMethodMotion);
      //  // Unstable assertion: assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
      //  // Unstable assertion: assertFalse(compilerOptions0.removeEmptyFunctions);
      //  // Unstable assertion: assertFalse(compilerOptions0.inlineConstantVars);
      //  // Unstable assertion: assertFalse(compilerOptions0.strictMessageReplacement);
      //  // Unstable assertion: assertFalse(compilerOptions0.devirtualizePrototypeMethods);
      //  // Unstable assertion: assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
      //  // Unstable assertion: assertFalse(compilerOptions0.printInputDelimiter);
      //  // Unstable assertion: assertFalse(compilerOptions0.inlineLocalFunctions);
      //  // Unstable assertion: assertFalse(compilerOptions0.removeUnusedLocalVars);
      //  // Unstable assertion: assertFalse(compilerOptions0.collapseProperties);
      //  // Unstable assertion: assertFalse(compilerOptions0.groupVariableDeclarations);
      //  // Unstable assertion: assertFalse(compilerOptions0.inlineFunctions);
      //  // Unstable assertion: assertFalse(compilerOptions0.checkTypedPropertyCalls);
      //  // Unstable assertion: assertFalse(compilerOptions0.aliasAllStrings);
      //  // Unstable assertion: assertFalse(compilerOptions0.ignoreCajaProperties);
      //  // Unstable assertion: assertFalse(compilerOptions0.collapseObjectLiterals);
      //  // Unstable assertion: assertFalse(compilerOptions0.checkSuspiciousCode);
      //  // Unstable assertion: assertFalse(compilerOptions0.checkControlStructures);
      //  // Unstable assertion: assertFalse(compilerOptions0.instrumentForCoverageOnly);
      //  // Unstable assertion: assertFalse(compilerOptions0.checkDuplicateMessages);
      //  // Unstable assertion: assertFalse(compilerOptions0.inlineGetters);
      //  // Unstable assertion: assertFalse(compilerOptions0.ideMode);
      //  // Unstable assertion: assertFalse(compilerOptions0.moveFunctionDeclarations);
      //  // Unstable assertion: assertFalse(compilerOptions0.smartNameRemoval);
      //  // Unstable assertion: assertFalse(compilerOptions0.exportTestFunctions);
      //  // Unstable assertion: assertFalse(compilerOptions0.disambiguateProperties);
      //  // Unstable assertion: assertFalse(compilerOptions0.computeFunctionSideEffects);
      //  // Unstable assertion: assertFalse(compilerOptions0.specializeInitialModule);
      //  // Unstable assertion: assertFalse(compilerOptions0.collapseAnonymousFunctions);
      //  // Unstable assertion: assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
      //  // Unstable assertion: assertEquals(false, compilerOptions0.assumeClosuresOnlyCaptureReferences());
      //  // Unstable assertion: assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compilerOptions0.getLanguageIn());
      //  // Unstable assertion: assertEquals(false, compilerOptions0.getInferTypes());
      //  // Unstable assertion: assertNull(compilerOptions0.getLanguageOut());
      //  // Unstable assertion: assertEquals(CompilerOptions.TweakProcessing.OFF, compilerOptions0.getTweakProcessing());
      //  // Unstable assertion: assertEquals(false, compilerOptions0.assumeStrictThis());
      //  // Unstable assertion: assertEquals(false, compilerOptions0.isExternExportsEnabled());
      
      TypedScopeCreator typedScopeCreator0 = new TypedScopeCreator(compiler0, codingConvention0);
      //  // Unstable assertion: assertNotNull(typedScopeCreator0);
      //  // Unstable assertion: assertFalse(compilerOptions0.inferTypesInGlobalScope);
      //  // Unstable assertion: assertFalse(compilerOptions0.labelRenaming);
      //  // Unstable assertion: assertFalse(compilerOptions0.inlineLocalVariables);
      //  // Unstable assertion: assertFalse(compilerOptions0.inlineVariables);
      //  // Unstable assertion: assertFalse(compilerOptions0.lineBreak);
      //  // Unstable assertion: assertFalse(compilerOptions0.checkEs5Strict);
      //  // Unstable assertion: assertFalse(compilerOptions0.crossModuleCodeMotion);
      //  // Unstable assertion: assertFalse(compilerOptions0.coalesceVariableNames);
      //  // Unstable assertion: assertFalse(compilerOptions0.instrumentForCoverage);
      //  // Unstable assertion: assertFalse(compilerOptions0.collapseVariableDeclarations);
      //  // Unstable assertion: assertFalse(compilerOptions0.removeDeadCode);
      //  // Unstable assertion: assertFalse(compilerOptions0.allowLegacyJsMessages);
      //  // Unstable assertion: assertFalse(compilerOptions0.checkCaja);
      //  // Unstable assertion: assertFalse(compilerOptions0.rewriteFunctionExpressions);
      //  // Unstable assertion: assertFalse(compilerOptions0.reserveRawExports);
      //  // Unstable assertion: assertFalse(compilerOptions0.foldConstants);
      //  // Unstable assertion: assertFalse(compilerOptions0.markNoSideEffectCalls);
      //  // Unstable assertion: assertFalse(compilerOptions0.aliasKeywords);
      //  // Unstable assertion: assertFalse(compilerOptions0.checkTypes);
      //  // Unstable assertion: assertFalse(compilerOptions0.optimizeReturns);
      //  // Unstable assertion: assertFalse(compilerOptions0.gatherCssNames);
      //  // Unstable assertion: assertFalse(compilerOptions0.closurePass);
      //  // Unstable assertion: assertFalse(compilerOptions0.removeUnusedVars);
      //  // Unstable assertion: assertFalse(compilerOptions0.prettyPrint);
      //  // Unstable assertion: assertFalse(compilerOptions0.tightenTypes);
      //  // Unstable assertion: assertFalse(compilerOptions0.markAsCompiled);
      //  // Unstable assertion: assertFalse(compilerOptions0.generateExports);
      //  // Unstable assertion: assertFalse(compilerOptions0.convertToDottedProperties);
      //  // Unstable assertion: assertFalse(compilerOptions0.checkSymbols);
      //  // Unstable assertion: assertFalse(compilerOptions0.generatePseudoNames);
      //  // Unstable assertion: assertFalse(compilerOptions0.removeTryCatchFinally);
      //  // Unstable assertion: assertFalse(compilerOptions0.optimizeCalls);
      //  // Unstable assertion: assertFalse(compilerOptions0.flowSensitiveInlineVariables);
      //  // Unstable assertion: assertFalse(compilerOptions0.aliasExternals);
      //  // Unstable assertion: assertFalse(compilerOptions0.ambiguateProperties);
      //  // Unstable assertion: assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
      //  // Unstable assertion: assertFalse(compilerOptions0.assumeClosuresOnlyCaptureReferences);
      //  // Unstable assertion: assertFalse(compilerOptions0.deadAssignmentElimination);
      //  // Unstable assertion: assertFalse(compilerOptions0.optimizeArgumentsArray);
      //  // Unstable assertion: assertFalse(compilerOptions0.optimizeParameters);
      //  // Unstable assertion: assertFalse(compilerOptions0.recordFunctionInformation);
      //  // Unstable assertion: assertFalse(compilerOptions0.crossModuleMethodMotion);
      //  // Unstable assertion: assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
      //  // Unstable assertion: assertFalse(compilerOptions0.removeEmptyFunctions);
      //  // Unstable assertion: assertFalse(compilerOptions0.inlineConstantVars);
      //  // Unstable assertion: assertFalse(compilerOptions0.strictMessageReplacement);
      //  // Unstable assertion: assertFalse(compilerOptions0.devirtualizePrototypeMethods);
      //  // Unstable assertion: assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
      //  // Unstable assertion: assertFalse(compilerOptions0.printInputDelimiter);
      //  // Unstable assertion: assertFalse(compilerOptions0.inlineLocalFunctions);
      //  // Unstable assertion: assertFalse(compilerOptions0.removeUnusedLocalVars);
      //  // Unstable assertion: assertFalse(compilerOptions0.collapseProperties);
      //  // Unstable assertion: assertFalse(compilerOptions0.groupVariableDeclarations);
      //  // Unstable assertion: assertFalse(compilerOptions0.inlineFunctions);
      //  // Unstable assertion: assertFalse(compilerOptions0.checkTypedPropertyCalls);
      //  // Unstable assertion: assertFalse(compilerOptions0.aliasAllStrings);
      //  // Unstable assertion: assertFalse(compilerOptions0.ignoreCajaProperties);
      //  // Unstable assertion: assertFalse(compilerOptions0.collapseObjectLiterals);
      //  // Unstable assertion: assertFalse(compilerOptions0.checkSuspiciousCode);
      //  // Unstable assertion: assertFalse(compilerOptions0.checkControlStructures);
      //  // Unstable assertion: assertFalse(compilerOptions0.instrumentForCoverageOnly);
      //  // Unstable assertion: assertFalse(compilerOptions0.checkDuplicateMessages);
      //  // Unstable assertion: assertFalse(compilerOptions0.inlineGetters);
      //  // Unstable assertion: assertFalse(compilerOptions0.ideMode);
      //  // Unstable assertion: assertFalse(compilerOptions0.moveFunctionDeclarations);
      //  // Unstable assertion: assertFalse(compilerOptions0.smartNameRemoval);
      //  // Unstable assertion: assertFalse(compilerOptions0.exportTestFunctions);
      //  // Unstable assertion: assertFalse(compilerOptions0.disambiguateProperties);
      //  // Unstable assertion: assertFalse(compilerOptions0.computeFunctionSideEffects);
      //  // Unstable assertion: assertFalse(compilerOptions0.specializeInitialModule);
      //  // Unstable assertion: assertFalse(compilerOptions0.collapseAnonymousFunctions);
      //  // Unstable assertion: assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
      //  // Unstable assertion: assertEquals(false, compilerOptions0.assumeClosuresOnlyCaptureReferences());
      //  // Unstable assertion: assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compilerOptions0.getLanguageIn());
      //  // Unstable assertion: assertEquals(false, compilerOptions0.getInferTypes());
      //  // Unstable assertion: assertNull(compilerOptions0.getLanguageOut());
      //  // Unstable assertion: assertEquals(CompilerOptions.TweakProcessing.OFF, compilerOptions0.getTweakProcessing());
      //  // Unstable assertion: assertEquals(false, compilerOptions0.assumeStrictThis());
      //  // Unstable assertion: assertEquals(false, compilerOptions0.isExternExportsEnabled());
      //  // Unstable assertion: assertEquals(false, compiler0.isTypeCheckingEnabled());
      //  // Unstable assertion: assertEquals(0, compiler0.getErrorCount());
      //  // Unstable assertion: assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      //  // Unstable assertion: assertEquals(false, compiler0.isIdeMode());
      //  // Unstable assertion: assertEquals(0, compiler0.getWarningCount());
      //  // Unstable assertion: assertEquals(false, compiler0.acceptConstKeyword());
      //  // Unstable assertion: assertEquals(false, compiler0.hasErrors());
      
      Node node0 = RuntimeTypeCheck.getBoilerplateCode(compiler0, compilerOptions0.unaliasableGlobals);
      //  // Unstable assertion: assertNotNull(node0);
      //  // Unstable assertion: assertFalse(compilerOptions0.inferTypesInGlobalScope);
      //  // Unstable assertion: assertFalse(compilerOptions0.labelRenaming);
      //  // Unstable assertion: assertFalse(compilerOptions0.inlineLocalVariables);
      //  // Unstable assertion: assertFalse(compilerOptions0.inlineVariables);
      //  // Unstable assertion: assertFalse(compilerOptions0.lineBreak);
      //  // Unstable assertion: assertFalse(compilerOptions0.checkEs5Strict);
      //  // Unstable assertion: assertFalse(compilerOptions0.crossModuleCodeMotion);
      //  // Unstable assertion: assertFalse(compilerOptions0.coalesceVariableNames);
      //  // Unstable assertion: assertFalse(compilerOptions0.instrumentForCoverage);
      //  // Unstable assertion: assertFalse(compilerOptions0.collapseVariableDeclarations);
      //  // Unstable assertion: assertFalse(compilerOptions0.removeDeadCode);
      //  // Unstable assertion: assertFalse(compilerOptions0.allowLegacyJsMessages);
      //  // Unstable assertion: assertFalse(compilerOptions0.checkCaja);
      //  // Unstable assertion: assertFalse(compilerOptions0.rewriteFunctionExpressions);
      //  // Unstable assertion: assertFalse(compilerOptions0.reserveRawExports);
      //  // Unstable assertion: assertFalse(compilerOptions0.foldConstants);
      //  // Unstable assertion: assertFalse(compilerOptions0.markNoSideEffectCalls);
      //  // Unstable assertion: assertFalse(compilerOptions0.aliasKeywords);
      //  // Unstable assertion: assertFalse(compilerOptions0.checkTypes);
      //  // Unstable assertion: assertFalse(compilerOptions0.optimizeReturns);
      //  // Unstable assertion: assertFalse(compilerOptions0.gatherCssNames);
      //  // Unstable assertion: assertFalse(compilerOptions0.closurePass);
      //  // Unstable assertion: assertFalse(compilerOptions0.removeUnusedVars);
      //  // Unstable assertion: assertFalse(compilerOptions0.prettyPrint);
      //  // Unstable assertion: assertFalse(compilerOptions0.tightenTypes);
      //  // Unstable assertion: assertFalse(compilerOptions0.markAsCompiled);
      //  // Unstable assertion: assertFalse(compilerOptions0.generateExports);
      //  // Unstable assertion: assertFalse(compilerOptions0.convertToDottedProperties);
      //  // Unstable assertion: assertFalse(compilerOptions0.checkSymbols);
      //  // Unstable assertion: assertFalse(compilerOptions0.generatePseudoNames);
      //  // Unstable assertion: assertFalse(compilerOptions0.removeTryCatchFinally);
      //  // Unstable assertion: assertFalse(compilerOptions0.optimizeCalls);
      //  // Unstable assertion: assertFalse(compilerOptions0.flowSensitiveInlineVariables);
      //  // Unstable assertion: assertFalse(compilerOptions0.aliasExternals);
      //  // Unstable assertion: assertFalse(compilerOptions0.ambiguateProperties);
      //  // Unstable assertion: assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
      //  // Unstable assertion: assertFalse(compilerOptions0.assumeClosuresOnlyCaptureReferences);
      //  // Unstable assertion: assertFalse(compilerOptions0.deadAssignmentElimination);
      //  // Unstable assertion: assertFalse(compilerOptions0.optimizeArgumentsArray);
      //  // Unstable assertion: assertFalse(compilerOptions0.optimizeParameters);
      //  // Unstable assertion: assertFalse(compilerOptions0.recordFunctionInformation);
      //  // Unstable assertion: assertFalse(compilerOptions0.crossModuleMethodMotion);
      //  // Unstable assertion: assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
      //  // Unstable assertion: assertFalse(compilerOptions0.removeEmptyFunctions);
      //  // Unstable assertion: assertFalse(compilerOptions0.inlineConstantVars);
      //  // Unstable assertion: assertFalse(compilerOptions0.strictMessageReplacement);
      //  // Unstable assertion: assertFalse(compilerOptions0.devirtualizePrototypeMethods);
      //  // Unstable assertion: assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
      //  // Unstable assertion: assertFalse(compilerOptions0.printInputDelimiter);
      //  // Unstable assertion: assertFalse(compilerOptions0.inlineLocalFunctions);
      //  // Unstable assertion: assertFalse(compilerOptions0.removeUnusedLocalVars);
      //  // Unstable assertion: assertFalse(compilerOptions0.collapseProperties);
      //  // Unstable assertion: assertFalse(compilerOptions0.groupVariableDeclarations);
      //  // Unstable assertion: assertFalse(compilerOptions0.inlineFunctions);
      //  // Unstable assertion: assertFalse(compilerOptions0.checkTypedPropertyCalls);
      //  // Unstable assertion: assertFalse(compilerOptions0.aliasAllStrings);
      //  // Unstable assertion: assertFalse(compilerOptions0.ignoreCajaProperties);
      //  // Unstable assertion: assertFalse(compilerOptions0.collapseObjectLiterals);
      //  // Unstable assertion: assertFalse(compilerOptions0.checkSuspiciousCode);
      //  // Unstable assertion: assertFalse(compilerOptions0.checkControlStructures);
      //  // Unstable assertion: assertFalse(compilerOptions0.instrumentForCoverageOnly);
      //  // Unstable assertion: assertFalse(compilerOptions0.checkDuplicateMessages);
      //  // Unstable assertion: assertFalse(compilerOptions0.inlineGetters);
      //  // Unstable assertion: assertFalse(compilerOptions0.ideMode);
      //  // Unstable assertion: assertFalse(compilerOptions0.moveFunctionDeclarations);
      //  // Unstable assertion: assertFalse(compilerOptions0.smartNameRemoval);
      //  // Unstable assertion: assertFalse(compilerOptions0.exportTestFunctions);
      //  // Unstable assertion: assertFalse(compilerOptions0.disambiguateProperties);
      //  // Unstable assertion: assertFalse(compilerOptions0.computeFunctionSideEffects);
      //  // Unstable assertion: assertFalse(compilerOptions0.specializeInitialModule);
      //  // Unstable assertion: assertFalse(compilerOptions0.collapseAnonymousFunctions);
      //  // Unstable assertion: assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
      //  // Unstable assertion: assertEquals(false, compilerOptions0.assumeClosuresOnlyCaptureReferences());
      //  // Unstable assertion: assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compilerOptions0.getLanguageIn());
      //  // Unstable assertion: assertEquals(false, compilerOptions0.getInferTypes());
      //  // Unstable assertion: assertNull(compilerOptions0.getLanguageOut());
      //  // Unstable assertion: assertEquals(CompilerOptions.TweakProcessing.OFF, compilerOptions0.getTweakProcessing());
      //  // Unstable assertion: assertEquals(false, compilerOptions0.assumeStrictThis());
      //  // Unstable assertion: assertEquals(false, compilerOptions0.isExternExportsEnabled());
      //  // Unstable assertion: assertEquals(0, node0.getCharno());
      //  // Unstable assertion: assertEquals(true, node0.hasMoreThanOneChild());
      //  // Unstable assertion: assertEquals(false, node0.isOptionalArg());
      //  // Unstable assertion: assertEquals(false, node0.isQuotedString());
      //  // Unstable assertion: assertEquals(false, node0.wasEmptyNode());
      //  // Unstable assertion: assertEquals(0, node0.getLength());
      //  // Unstable assertion: assertEquals(false, node0.isVarArgs());
      //  // Unstable assertion: assertEquals(false, node0.isOnlyModifiesThisCall());
      //  // Unstable assertion: assertEquals(0, node0.getSideEffectFlags());
      //  // Unstable assertion: assertEquals(true, node0.isSyntheticBlock());
      //  // Unstable assertion: assertEquals(true, node0.hasChildren());
      //  // Unstable assertion: assertEquals(132, node0.getType());
      //  // Unstable assertion: assertEquals(false, node0.isLocalResultCall());
      //  // Unstable assertion: assertEquals(35, node0.getChildCount());
      //  // Unstable assertion: assertEquals(false, node0.hasOneChild());
      //  // Unstable assertion: assertEquals(false, node0.isFromExterns());
      //  // Unstable assertion: assertEquals(false, node0.isUnscopedQualifiedName());
      //  // Unstable assertion: assertEquals(" [synthetic:1] ", node0.getSourceFileName());
      //  // Unstable assertion: assertEquals(false, node0.isNoSideEffectsCall());
      //  // Unstable assertion: assertEquals(1, node0.getLineno());
      //  // Unstable assertion: assertEquals(false, node0.isQualifiedName());
      //  // Unstable assertion: assertEquals(4096, node0.getSourcePosition());
      //  // Unstable assertion: assertEquals(false, compiler0.isTypeCheckingEnabled());
      //  // Unstable assertion: assertEquals(0, compiler0.getErrorCount());
      //  // Unstable assertion: assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      //  // Unstable assertion: assertEquals(false, compiler0.isIdeMode());
      //  // Unstable assertion: assertEquals(68, compiler0.getWarningCount());
      //  // Unstable assertion: assertEquals(false, compiler0.acceptConstKeyword());
      //  // Unstable assertion: assertEquals(false, compiler0.hasErrors());
      
      Node node1 = node0.cloneNode();
      //  // Unstable assertion: assertNotSame(node0, node1);
      //  // Unstable assertion: assertNotSame(node1, node0);
      //  // Unstable assertion: assertFalse(node0.equals((Object)node1));
      //  // Unstable assertion: assertFalse(node1.equals((Object)node0));
      //  // Unstable assertion: assertNotNull(node1);
      //  // Unstable assertion: assertFalse(compilerOptions0.inferTypesInGlobalScope);
      //  // Unstable assertion: assertFalse(compilerOptions0.labelRenaming);
      //  // Unstable assertion: assertFalse(compilerOptions0.inlineLocalVariables);
      //  // Unstable assertion: assertFalse(compilerOptions0.inlineVariables);
      //  // Unstable assertion: assertFalse(compilerOptions0.lineBreak);
      //  // Unstable assertion: assertFalse(compilerOptions0.checkEs5Strict);
      //  // Unstable assertion: assertFalse(compilerOptions0.crossModuleCodeMotion);
      //  // Unstable assertion: assertFalse(compilerOptions0.coalesceVariableNames);
      //  // Unstable assertion: assertFalse(compilerOptions0.instrumentForCoverage);
      //  // Unstable assertion: assertFalse(compilerOptions0.collapseVariableDeclarations);
      //  // Unstable assertion: assertFalse(compilerOptions0.removeDeadCode);
      //  // Unstable assertion: assertFalse(compilerOptions0.allowLegacyJsMessages);
      //  // Unstable assertion: assertFalse(compilerOptions0.checkCaja);
      //  // Unstable assertion: assertFalse(compilerOptions0.rewriteFunctionExpressions);
      //  // Unstable assertion: assertFalse(compilerOptions0.reserveRawExports);
      //  // Unstable assertion: assertFalse(compilerOptions0.foldConstants);
      //  // Unstable assertion: assertFalse(compilerOptions0.markNoSideEffectCalls);
      //  // Unstable assertion: assertFalse(compilerOptions0.aliasKeywords);
      //  // Unstable assertion: assertFalse(compilerOptions0.checkTypes);
      //  // Unstable assertion: assertFalse(compilerOptions0.optimizeReturns);
      //  // Unstable assertion: assertFalse(compilerOptions0.gatherCssNames);
      //  // Unstable assertion: assertFalse(compilerOptions0.closurePass);
      //  // Unstable assertion: assertFalse(compilerOptions0.removeUnusedVars);
      //  // Unstable assertion: assertFalse(compilerOptions0.prettyPrint);
      //  // Unstable assertion: assertFalse(compilerOptions0.tightenTypes);
      //  // Unstable assertion: assertFalse(compilerOptions0.markAsCompiled);
      //  // Unstable assertion: assertFalse(compilerOptions0.generateExports);
      //  // Unstable assertion: assertFalse(compilerOptions0.convertToDottedProperties);
      //  // Unstable assertion: assertFalse(compilerOptions0.checkSymbols);
      //  // Unstable assertion: assertFalse(compilerOptions0.generatePseudoNames);
      //  // Unstable assertion: assertFalse(compilerOptions0.removeTryCatchFinally);
      //  // Unstable assertion: assertFalse(compilerOptions0.optimizeCalls);
      //  // Unstable assertion: assertFalse(compilerOptions0.flowSensitiveInlineVariables);
      //  // Unstable assertion: assertFalse(compilerOptions0.aliasExternals);
      //  // Unstable assertion: assertFalse(compilerOptions0.ambiguateProperties);
      //  // Unstable assertion: assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
      //  // Unstable assertion: assertFalse(compilerOptions0.assumeClosuresOnlyCaptureReferences);
      //  // Unstable assertion: assertFalse(compilerOptions0.deadAssignmentElimination);
      //  // Unstable assertion: assertFalse(compilerOptions0.optimizeArgumentsArray);
      //  // Unstable assertion: assertFalse(compilerOptions0.optimizeParameters);
      //  // Unstable assertion: assertFalse(compilerOptions0.recordFunctionInformation);
      //  // Unstable assertion: assertFalse(compilerOptions0.crossModuleMethodMotion);
      //  // Unstable assertion: assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
      //  // Unstable assertion: assertFalse(compilerOptions0.removeEmptyFunctions);
      //  // Unstable assertion: assertFalse(compilerOptions0.inlineConstantVars);
      //  // Unstable assertion: assertFalse(compilerOptions0.strictMessageReplacement);
      //  // Unstable assertion: assertFalse(compilerOptions0.devirtualizePrototypeMethods);
      //  // Unstable assertion: assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
      //  // Unstable assertion: assertFalse(compilerOptions0.printInputDelimiter);
      //  // Unstable assertion: assertFalse(compilerOptions0.inlineLocalFunctions);
      //  // Unstable assertion: assertFalse(compilerOptions0.removeUnusedLocalVars);
      //  // Unstable assertion: assertFalse(compilerOptions0.collapseProperties);
      //  // Unstable assertion: assertFalse(compilerOptions0.groupVariableDeclarations);
      //  // Unstable assertion: assertFalse(compilerOptions0.inlineFunctions);
      //  // Unstable assertion: assertFalse(compilerOptions0.checkTypedPropertyCalls);
      //  // Unstable assertion: assertFalse(compilerOptions0.aliasAllStrings);
      //  // Unstable assertion: assertFalse(compilerOptions0.ignoreCajaProperties);
      //  // Unstable assertion: assertFalse(compilerOptions0.collapseObjectLiterals);
      //  // Unstable assertion: assertFalse(compilerOptions0.checkSuspiciousCode);
      //  // Unstable assertion: assertFalse(compilerOptions0.checkControlStructures);
      //  // Unstable assertion: assertFalse(compilerOptions0.instrumentForCoverageOnly);
      //  // Unstable assertion: assertFalse(compilerOptions0.checkDuplicateMessages);
      //  // Unstable assertion: assertFalse(compilerOptions0.inlineGetters);
      //  // Unstable assertion: assertFalse(compilerOptions0.ideMode);
      //  // Unstable assertion: assertFalse(compilerOptions0.moveFunctionDeclarations);
      //  // Unstable assertion: assertFalse(compilerOptions0.smartNameRemoval);
      //  // Unstable assertion: assertFalse(compilerOptions0.exportTestFunctions);
      //  // Unstable assertion: assertFalse(compilerOptions0.disambiguateProperties);
      //  // Unstable assertion: assertFalse(compilerOptions0.computeFunctionSideEffects);
      //  // Unstable assertion: assertFalse(compilerOptions0.specializeInitialModule);
      //  // Unstable assertion: assertFalse(compilerOptions0.collapseAnonymousFunctions);
      //  // Unstable assertion: assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
      //  // Unstable assertion: assertEquals(false, compilerOptions0.assumeClosuresOnlyCaptureReferences());
      //  // Unstable assertion: assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compilerOptions0.getLanguageIn());
      //  // Unstable assertion: assertEquals(false, compilerOptions0.getInferTypes());
      //  // Unstable assertion: assertNull(compilerOptions0.getLanguageOut());
      //  // Unstable assertion: assertEquals(CompilerOptions.TweakProcessing.OFF, compilerOptions0.getTweakProcessing());
      //  // Unstable assertion: assertEquals(false, compilerOptions0.assumeStrictThis());
      //  // Unstable assertion: assertEquals(false, compilerOptions0.isExternExportsEnabled());
      //  // Unstable assertion: assertEquals(0, node0.getCharno());
      //  // Unstable assertion: assertEquals(true, node0.hasMoreThanOneChild());
      //  // Unstable assertion: assertEquals(false, node0.isOptionalArg());
      //  // Unstable assertion: assertEquals(false, node0.isQuotedString());
      //  // Unstable assertion: assertEquals(false, node0.wasEmptyNode());
      //  // Unstable assertion: assertEquals(0, node0.getLength());
      //  // Unstable assertion: assertEquals(false, node0.isVarArgs());
      //  // Unstable assertion: assertEquals(false, node0.isOnlyModifiesThisCall());
      //  // Unstable assertion: assertEquals(0, node0.getSideEffectFlags());
      //  // Unstable assertion: assertEquals(true, node0.isSyntheticBlock());
      //  // Unstable assertion: assertEquals(true, node0.hasChildren());
      //  // Unstable assertion: assertEquals(132, node0.getType());
      //  // Unstable assertion: assertEquals(false, node0.isLocalResultCall());
      //  // Unstable assertion: assertEquals(35, node0.getChildCount());
      //  // Unstable assertion: assertEquals(false, node0.hasOneChild());
      //  // Unstable assertion: assertEquals(false, node0.isFromExterns());
      //  // Unstable assertion: assertEquals(false, node0.isUnscopedQualifiedName());
      //  // Unstable assertion: assertEquals(" [synthetic:1] ", node0.getSourceFileName());
      //  // Unstable assertion: assertEquals(false, node0.isNoSideEffectsCall());
      //  // Unstable assertion: assertEquals(1, node0.getLineno());
      //  // Unstable assertion: assertEquals(false, node0.isQualifiedName());
      //  // Unstable assertion: assertEquals(4096, node0.getSourcePosition());
      //  // Unstable assertion: assertEquals(false, compiler0.isTypeCheckingEnabled());
      //  // Unstable assertion: assertEquals(0, compiler0.getErrorCount());
      //  // Unstable assertion: assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      //  // Unstable assertion: assertEquals(false, compiler0.isIdeMode());
      //  // Unstable assertion: assertEquals(68, compiler0.getWarningCount());
      //  // Unstable assertion: assertEquals(false, compiler0.acceptConstKeyword());
      //  // Unstable assertion: assertEquals(false, compiler0.hasErrors());
      //  // Unstable assertion: assertEquals(false, node1.isOnlyModifiesThisCall());
      //  // Unstable assertion: assertEquals(0, node1.getSideEffectFlags());
      //  // Unstable assertion: assertEquals(false, node1.isVarArgs());
      //  // Unstable assertion: assertEquals(false, node1.hasMoreThanOneChild());
      //  // Unstable assertion: assertEquals(" [synthetic:1] ", node1.getSourceFileName());
      //  // Unstable assertion: assertEquals(false, node1.wasEmptyNode());
      //  // Unstable assertion: assertEquals(false, node1.isNoSideEffectsCall());
      //  // Unstable assertion: assertEquals(false, node1.isQuotedString());
      //  // Unstable assertion: assertEquals(false, node1.isUnscopedQualifiedName());
      //  // Unstable assertion: assertEquals(0, node1.getLength());
      //  // Unstable assertion: assertEquals(4096, node1.getSourcePosition());
      //  // Unstable assertion: assertEquals(false, node1.isFromExterns());
      //  // Unstable assertion: assertEquals(false, node1.isLocalResultCall());
      //  // Unstable assertion: assertEquals(false, node1.isQualifiedName());
      //  // Unstable assertion: assertEquals(false, node1.hasOneChild());
      //  // Unstable assertion: assertEquals(132, node1.getType());
      //  // Unstable assertion: assertEquals(true, node1.isSyntheticBlock());
      //  // Unstable assertion: assertEquals(false, node1.isOptionalArg());
      //  // Unstable assertion: assertEquals(1, node1.getLineno());
      //  // Unstable assertion: assertEquals(0, node1.getCharno());
      //  // Unstable assertion: assertEquals(0, node1.getChildCount());
      //  // Unstable assertion: assertEquals(false, node1.hasChildren());
      
      Scope scope0 = typedScopeCreator0.createInitialScope(node0);
      //  // Unstable assertion: assertNotSame(node0, node1);
      //  // Unstable assertion: assertFalse(node0.equals((Object)node1));
      //  // Unstable assertion: assertNotNull(scope0);
      //  // Unstable assertion: assertFalse(compilerOptions0.inferTypesInGlobalScope);
      //  // Unstable assertion: assertFalse(compilerOptions0.labelRenaming);
      //  // Unstable assertion: assertFalse(compilerOptions0.inlineLocalVariables);
      //  // Unstable assertion: assertFalse(compilerOptions0.inlineVariables);
      //  // Unstable assertion: assertFalse(compilerOptions0.lineBreak);
      //  // Unstable assertion: assertFalse(compilerOptions0.checkEs5Strict);
      //  // Unstable assertion: assertFalse(compilerOptions0.crossModuleCodeMotion);
      //  // Unstable assertion: assertFalse(compilerOptions0.coalesceVariableNames);
      //  // Unstable assertion: assertFalse(compilerOptions0.instrumentForCoverage);
      //  // Unstable assertion: assertFalse(compilerOptions0.collapseVariableDeclarations);
      //  // Unstable assertion: assertFalse(compilerOptions0.removeDeadCode);
      //  // Unstable assertion: assertFalse(compilerOptions0.allowLegacyJsMessages);
      //  // Unstable assertion: assertFalse(compilerOptions0.checkCaja);
      //  // Unstable assertion: assertFalse(compilerOptions0.rewriteFunctionExpressions);
      //  // Unstable assertion: assertFalse(compilerOptions0.reserveRawExports);
      //  // Unstable assertion: assertFalse(compilerOptions0.foldConstants);
      //  // Unstable assertion: assertFalse(compilerOptions0.markNoSideEffectCalls);
      //  // Unstable assertion: assertFalse(compilerOptions0.aliasKeywords);
      //  // Unstable assertion: assertFalse(compilerOptions0.checkTypes);
      //  // Unstable assertion: assertFalse(compilerOptions0.optimizeReturns);
      //  // Unstable assertion: assertFalse(compilerOptions0.gatherCssNames);
      //  // Unstable assertion: assertFalse(compilerOptions0.closurePass);
      //  // Unstable assertion: assertFalse(compilerOptions0.removeUnusedVars);
      //  // Unstable assertion: assertFalse(compilerOptions0.prettyPrint);
      //  // Unstable assertion: assertFalse(compilerOptions0.tightenTypes);
      //  // Unstable assertion: assertFalse(compilerOptions0.markAsCompiled);
      //  // Unstable assertion: assertFalse(compilerOptions0.generateExports);
      //  // Unstable assertion: assertFalse(compilerOptions0.convertToDottedProperties);
      //  // Unstable assertion: assertFalse(compilerOptions0.checkSymbols);
      //  // Unstable assertion: assertFalse(compilerOptions0.generatePseudoNames);
      //  // Unstable assertion: assertFalse(compilerOptions0.removeTryCatchFinally);
      //  // Unstable assertion: assertFalse(compilerOptions0.optimizeCalls);
      //  // Unstable assertion: assertFalse(compilerOptions0.flowSensitiveInlineVariables);
      //  // Unstable assertion: assertFalse(compilerOptions0.aliasExternals);
      //  // Unstable assertion: assertFalse(compilerOptions0.ambiguateProperties);
      //  // Unstable assertion: assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
      //  // Unstable assertion: assertFalse(compilerOptions0.assumeClosuresOnlyCaptureReferences);
      //  // Unstable assertion: assertFalse(compilerOptions0.deadAssignmentElimination);
      //  // Unstable assertion: assertFalse(compilerOptions0.optimizeArgumentsArray);
      //  // Unstable assertion: assertFalse(compilerOptions0.optimizeParameters);
      //  // Unstable assertion: assertFalse(compilerOptions0.recordFunctionInformation);
      //  // Unstable assertion: assertFalse(compilerOptions0.crossModuleMethodMotion);
      //  // Unstable assertion: assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
      //  // Unstable assertion: assertFalse(compilerOptions0.removeEmptyFunctions);
      //  // Unstable assertion: assertFalse(compilerOptions0.inlineConstantVars);
      //  // Unstable assertion: assertFalse(compilerOptions0.strictMessageReplacement);
      //  // Unstable assertion: assertFalse(compilerOptions0.devirtualizePrototypeMethods);
      //  // Unstable assertion: assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
      //  // Unstable assertion: assertFalse(compilerOptions0.printInputDelimiter);
      //  // Unstable assertion: assertFalse(compilerOptions0.inlineLocalFunctions);
      //  // Unstable assertion: assertFalse(compilerOptions0.removeUnusedLocalVars);
      //  // Unstable assertion: assertFalse(compilerOptions0.collapseProperties);
      //  // Unstable assertion: assertFalse(compilerOptions0.groupVariableDeclarations);
      //  // Unstable assertion: assertFalse(compilerOptions0.inlineFunctions);
      //  // Unstable assertion: assertFalse(compilerOptions0.checkTypedPropertyCalls);
      //  // Unstable assertion: assertFalse(compilerOptions0.aliasAllStrings);
      //  // Unstable assertion: assertFalse(compilerOptions0.ignoreCajaProperties);
      //  // Unstable assertion: assertFalse(compilerOptions0.collapseObjectLiterals);
      //  // Unstable assertion: assertFalse(compilerOptions0.checkSuspiciousCode);
      //  // Unstable assertion: assertFalse(compilerOptions0.checkControlStructures);
      //  // Unstable assertion: assertFalse(compilerOptions0.instrumentForCoverageOnly);
      //  // Unstable assertion: assertFalse(compilerOptions0.checkDuplicateMessages);
      //  // Unstable assertion: assertFalse(compilerOptions0.inlineGetters);
      //  // Unstable assertion: assertFalse(compilerOptions0.ideMode);
      //  // Unstable assertion: assertFalse(compilerOptions0.moveFunctionDeclarations);
      //  // Unstable assertion: assertFalse(compilerOptions0.smartNameRemoval);
      //  // Unstable assertion: assertFalse(compilerOptions0.exportTestFunctions);
      //  // Unstable assertion: assertFalse(compilerOptions0.disambiguateProperties);
      //  // Unstable assertion: assertFalse(compilerOptions0.computeFunctionSideEffects);
      //  // Unstable assertion: assertFalse(compilerOptions0.specializeInitialModule);
      //  // Unstable assertion: assertFalse(compilerOptions0.collapseAnonymousFunctions);
      //  // Unstable assertion: assertEquals(32, scope0.getVarCount());
      //  // Unstable assertion: assertEquals(false, scope0.isLocal());
      //  // Unstable assertion: assertEquals(true, scope0.isGlobal());
      //  // Unstable assertion: assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
      //  // Unstable assertion: assertEquals(false, compilerOptions0.assumeClosuresOnlyCaptureReferences());
      //  // Unstable assertion: assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compilerOptions0.getLanguageIn());
      //  // Unstable assertion: assertEquals(false, compilerOptions0.getInferTypes());
      //  // Unstable assertion: assertNull(compilerOptions0.getLanguageOut());
      //  // Unstable assertion: assertEquals(CompilerOptions.TweakProcessing.OFF, compilerOptions0.getTweakProcessing());
      //  // Unstable assertion: assertEquals(false, compilerOptions0.assumeStrictThis());
      //  // Unstable assertion: assertEquals(false, compilerOptions0.isExternExportsEnabled());
      //  // Unstable assertion: assertEquals(0, node0.getCharno());
      //  // Unstable assertion: assertEquals(true, node0.hasMoreThanOneChild());
      //  // Unstable assertion: assertEquals(false, node0.isOptionalArg());
      //  // Unstable assertion: assertEquals(false, node0.isQuotedString());
      //  // Unstable assertion: assertEquals(false, node0.wasEmptyNode());
      //  // Unstable assertion: assertEquals(0, node0.getLength());
      //  // Unstable assertion: assertEquals(false, node0.isVarArgs());
      //  // Unstable assertion: assertEquals(false, node0.isOnlyModifiesThisCall());
      //  // Unstable assertion: assertEquals(0, node0.getSideEffectFlags());
      //  // Unstable assertion: assertEquals(true, node0.isSyntheticBlock());
      //  // Unstable assertion: assertEquals(true, node0.hasChildren());
      //  // Unstable assertion: assertEquals(132, node0.getType());
      //  // Unstable assertion: assertEquals(false, node0.isLocalResultCall());
      //  // Unstable assertion: assertEquals(35, node0.getChildCount());
      //  // Unstable assertion: assertEquals(false, node0.hasOneChild());
      //  // Unstable assertion: assertEquals(false, node0.isFromExterns());
      //  // Unstable assertion: assertEquals(false, node0.isUnscopedQualifiedName());
      //  // Unstable assertion: assertEquals(" [synthetic:1] ", node0.getSourceFileName());
      //  // Unstable assertion: assertEquals(false, node0.isNoSideEffectsCall());
      //  // Unstable assertion: assertEquals(1, node0.getLineno());
      //  // Unstable assertion: assertEquals(false, node0.isQualifiedName());
      //  // Unstable assertion: assertEquals(4096, node0.getSourcePosition());
      //  // Unstable assertion: assertEquals(false, compiler0.isTypeCheckingEnabled());
      //  // Unstable assertion: assertEquals(0, compiler0.getErrorCount());
      //  // Unstable assertion: assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      //  // Unstable assertion: assertEquals(false, compiler0.isIdeMode());
      //  // Unstable assertion: assertEquals(68, compiler0.getWarningCount());
      //  // Unstable assertion: assertEquals(false, compiler0.acceptConstKeyword());
      //  // Unstable assertion: assertEquals(false, compiler0.hasErrors());
      
      Scope scope1 = typedScopeCreator0.createScope(node1, scope0);
      //  // Unstable assertion: assertNotSame(scope0, scope1);
      //  // Unstable assertion: assertNotSame(node0, node1);
      //  // Unstable assertion: assertNotSame(scope1, scope0);
      //  // Unstable assertion: assertNotSame(node1, node0);
      //  // Unstable assertion: assertFalse(scope0.equals((Object)scope1));
      //  // Unstable assertion: assertFalse(node0.equals((Object)node1));
      //  // Unstable assertion: assertFalse(scope1.equals((Object)scope0));
      //  // Unstable assertion: assertFalse(node1.equals((Object)node0));
      //  // Unstable assertion: assertNotNull(scope1);
      //  // Unstable assertion: assertFalse(compilerOptions0.inferTypesInGlobalScope);
      //  // Unstable assertion: assertFalse(compilerOptions0.labelRenaming);
      //  // Unstable assertion: assertFalse(compilerOptions0.inlineLocalVariables);
      //  // Unstable assertion: assertFalse(compilerOptions0.inlineVariables);
      //  // Unstable assertion: assertFalse(compilerOptions0.lineBreak);
      //  // Unstable assertion: assertFalse(compilerOptions0.checkEs5Strict);
      //  // Unstable assertion: assertFalse(compilerOptions0.crossModuleCodeMotion);
      //  // Unstable assertion: assertFalse(compilerOptions0.coalesceVariableNames);
      //  // Unstable assertion: assertFalse(compilerOptions0.instrumentForCoverage);
      //  // Unstable assertion: assertFalse(compilerOptions0.collapseVariableDeclarations);
      //  // Unstable assertion: assertFalse(compilerOptions0.removeDeadCode);
      //  // Unstable assertion: assertFalse(compilerOptions0.allowLegacyJsMessages);
      //  // Unstable assertion: assertFalse(compilerOptions0.checkCaja);
      //  // Unstable assertion: assertFalse(compilerOptions0.rewriteFunctionExpressions);
      //  // Unstable assertion: assertFalse(compilerOptions0.reserveRawExports);
      //  // Unstable assertion: assertFalse(compilerOptions0.foldConstants);
      //  // Unstable assertion: assertFalse(compilerOptions0.markNoSideEffectCalls);
      //  // Unstable assertion: assertFalse(compilerOptions0.aliasKeywords);
      //  // Unstable assertion: assertFalse(compilerOptions0.checkTypes);
      //  // Unstable assertion: assertFalse(compilerOptions0.optimizeReturns);
      //  // Unstable assertion: assertFalse(compilerOptions0.gatherCssNames);
      //  // Unstable assertion: assertFalse(compilerOptions0.closurePass);
      //  // Unstable assertion: assertFalse(compilerOptions0.removeUnusedVars);
      //  // Unstable assertion: assertFalse(compilerOptions0.prettyPrint);
      //  // Unstable assertion: assertFalse(compilerOptions0.tightenTypes);
      //  // Unstable assertion: assertFalse(compilerOptions0.markAsCompiled);
      //  // Unstable assertion: assertFalse(compilerOptions0.generateExports);
      //  // Unstable assertion: assertFalse(compilerOptions0.convertToDottedProperties);
      //  // Unstable assertion: assertFalse(compilerOptions0.checkSymbols);
      //  // Unstable assertion: assertFalse(compilerOptions0.generatePseudoNames);
      //  // Unstable assertion: assertFalse(compilerOptions0.removeTryCatchFinally);
      //  // Unstable assertion: assertFalse(compilerOptions0.optimizeCalls);
      //  // Unstable assertion: assertFalse(compilerOptions0.flowSensitiveInlineVariables);
      //  // Unstable assertion: assertFalse(compilerOptions0.aliasExternals);
      //  // Unstable assertion: assertFalse(compilerOptions0.ambiguateProperties);
      //  // Unstable assertion: assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
      //  // Unstable assertion: assertFalse(compilerOptions0.assumeClosuresOnlyCaptureReferences);
      //  // Unstable assertion: assertFalse(compilerOptions0.deadAssignmentElimination);
      //  // Unstable assertion: assertFalse(compilerOptions0.optimizeArgumentsArray);
      //  // Unstable assertion: assertFalse(compilerOptions0.optimizeParameters);
      //  // Unstable assertion: assertFalse(compilerOptions0.recordFunctionInformation);
      //  // Unstable assertion: assertFalse(compilerOptions0.crossModuleMethodMotion);
      //  // Unstable assertion: assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
      //  // Unstable assertion: assertFalse(compilerOptions0.removeEmptyFunctions);
      //  // Unstable assertion: assertFalse(compilerOptions0.inlineConstantVars);
      //  // Unstable assertion: assertFalse(compilerOptions0.strictMessageReplacement);
      //  // Unstable assertion: assertFalse(compilerOptions0.devirtualizePrototypeMethods);
      //  // Unstable assertion: assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
      //  // Unstable assertion: assertFalse(compilerOptions0.printInputDelimiter);
      //  // Unstable assertion: assertFalse(compilerOptions0.inlineLocalFunctions);
      //  // Unstable assertion: assertFalse(compilerOptions0.removeUnusedLocalVars);
      //  // Unstable assertion: assertFalse(compilerOptions0.collapseProperties);
      //  // Unstable assertion: assertFalse(compilerOptions0.groupVariableDeclarations);
      //  // Unstable assertion: assertFalse(compilerOptions0.inlineFunctions);
      //  // Unstable assertion: assertFalse(compilerOptions0.checkTypedPropertyCalls);
      //  // Unstable assertion: assertFalse(compilerOptions0.aliasAllStrings);
      //  // Unstable assertion: assertFalse(compilerOptions0.ignoreCajaProperties);
      //  // Unstable assertion: assertFalse(compilerOptions0.collapseObjectLiterals);
      //  // Unstable assertion: assertFalse(compilerOptions0.checkSuspiciousCode);
      //  // Unstable assertion: assertFalse(compilerOptions0.checkControlStructures);
      //  // Unstable assertion: assertFalse(compilerOptions0.instrumentForCoverageOnly);
      //  // Unstable assertion: assertFalse(compilerOptions0.checkDuplicateMessages);
      //  // Unstable assertion: assertFalse(compilerOptions0.inlineGetters);
      //  // Unstable assertion: assertFalse(compilerOptions0.ideMode);
      //  // Unstable assertion: assertFalse(compilerOptions0.moveFunctionDeclarations);
      //  // Unstable assertion: assertFalse(compilerOptions0.smartNameRemoval);
      //  // Unstable assertion: assertFalse(compilerOptions0.exportTestFunctions);
      //  // Unstable assertion: assertFalse(compilerOptions0.disambiguateProperties);
      //  // Unstable assertion: assertFalse(compilerOptions0.computeFunctionSideEffects);
      //  // Unstable assertion: assertFalse(compilerOptions0.specializeInitialModule);
      //  // Unstable assertion: assertFalse(compilerOptions0.collapseAnonymousFunctions);
      //  // Unstable assertion: assertEquals(32, scope0.getVarCount());
      //  // Unstable assertion: assertEquals(false, scope0.isLocal());
      //  // Unstable assertion: assertEquals(true, scope0.isGlobal());
      //  // Unstable assertion: assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
      //  // Unstable assertion: assertEquals(false, compilerOptions0.assumeClosuresOnlyCaptureReferences());
      //  // Unstable assertion: assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compilerOptions0.getLanguageIn());
      //  // Unstable assertion: assertEquals(false, compilerOptions0.getInferTypes());
      //  // Unstable assertion: assertNull(compilerOptions0.getLanguageOut());
      //  // Unstable assertion: assertEquals(CompilerOptions.TweakProcessing.OFF, compilerOptions0.getTweakProcessing());
      //  // Unstable assertion: assertEquals(false, compilerOptions0.assumeStrictThis());
      //  // Unstable assertion: assertEquals(false, compilerOptions0.isExternExportsEnabled());
      //  // Unstable assertion: assertEquals(0, node0.getCharno());
      //  // Unstable assertion: assertEquals(true, node0.hasMoreThanOneChild());
      //  // Unstable assertion: assertEquals(false, node0.isOptionalArg());
      //  // Unstable assertion: assertEquals(false, node0.isQuotedString());
      //  // Unstable assertion: assertEquals(false, node0.wasEmptyNode());
      //  // Unstable assertion: assertEquals(0, node0.getLength());
      //  // Unstable assertion: assertEquals(false, node0.isVarArgs());
      //  // Unstable assertion: assertEquals(false, node0.isOnlyModifiesThisCall());
      //  // Unstable assertion: assertEquals(0, node0.getSideEffectFlags());
      //  // Unstable assertion: assertEquals(true, node0.isSyntheticBlock());
      //  // Unstable assertion: assertEquals(true, node0.hasChildren());
      //  // Unstable assertion: assertEquals(132, node0.getType());
      //  // Unstable assertion: assertEquals(false, node0.isLocalResultCall());
      //  // Unstable assertion: assertEquals(35, node0.getChildCount());
      //  // Unstable assertion: assertEquals(false, node0.hasOneChild());
      //  // Unstable assertion: assertEquals(false, node0.isFromExterns());
      //  // Unstable assertion: assertEquals(false, node0.isUnscopedQualifiedName());
      //  // Unstable assertion: assertEquals(" [synthetic:1] ", node0.getSourceFileName());
      //  // Unstable assertion: assertEquals(false, node0.isNoSideEffectsCall());
      //  // Unstable assertion: assertEquals(1, node0.getLineno());
      //  // Unstable assertion: assertEquals(false, node0.isQualifiedName());
      //  // Unstable assertion: assertEquals(4096, node0.getSourcePosition());
      //  // Unstable assertion: assertEquals(0, scope1.getVarCount());
      //  // Unstable assertion: assertEquals(false, scope1.isGlobal());
      //  // Unstable assertion: assertEquals(true, scope1.isLocal());
      //  // Unstable assertion: assertEquals(false, compiler0.isTypeCheckingEnabled());
      //  // Unstable assertion: assertEquals(0, compiler0.getErrorCount());
      //  // Unstable assertion: assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      //  // Unstable assertion: assertEquals(false, compiler0.isIdeMode());
      //  // Unstable assertion: assertEquals(68, compiler0.getWarningCount());
      //  // Unstable assertion: assertEquals(false, compiler0.acceptConstKeyword());
      //  // Unstable assertion: assertEquals(false, compiler0.hasErrors());
      //  // Unstable assertion: assertEquals(false, node1.isOnlyModifiesThisCall());
      //  // Unstable assertion: assertEquals(0, node1.getSideEffectFlags());
      //  // Unstable assertion: assertEquals(false, node1.isVarArgs());
      //  // Unstable assertion: assertEquals(false, node1.hasMoreThanOneChild());
      //  // Unstable assertion: assertEquals(" [synthetic:1] ", node1.getSourceFileName());
      //  // Unstable assertion: assertEquals(false, node1.wasEmptyNode());
      //  // Unstable assertion: assertEquals(false, node1.isNoSideEffectsCall());
      //  // Unstable assertion: assertEquals(false, node1.isQuotedString());
      //  // Unstable assertion: assertEquals(false, node1.isUnscopedQualifiedName());
      //  // Unstable assertion: assertEquals(0, node1.getLength());
      //  // Unstable assertion: assertEquals(4096, node1.getSourcePosition());
      //  // Unstable assertion: assertEquals(false, node1.isFromExterns());
      //  // Unstable assertion: assertEquals(false, node1.isLocalResultCall());
      //  // Unstable assertion: assertEquals(false, node1.isQualifiedName());
      //  // Unstable assertion: assertEquals(false, node1.hasOneChild());
      //  // Unstable assertion: assertEquals(132, node1.getType());
      //  // Unstable assertion: assertEquals(true, node1.isSyntheticBlock());
      //  // Unstable assertion: assertEquals(false, node1.isOptionalArg());
      //  // Unstable assertion: assertEquals(1, node1.getLineno());
      //  // Unstable assertion: assertEquals(0, node1.getCharno());
      //  // Unstable assertion: assertEquals(0, node1.getChildCount());
      //  // Unstable assertion: assertEquals(false, node1.hasChildren());
  }
}
