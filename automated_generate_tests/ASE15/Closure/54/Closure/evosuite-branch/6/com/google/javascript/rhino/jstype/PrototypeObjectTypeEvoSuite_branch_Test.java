/*
 * This file was automatically generated by EvoSuite
 * Fri Dec 12 01:17:16 GMT 2014
 */

package com.google.javascript.rhino.jstype;

import static org.junit.Assert.*;
import org.junit.Test;
import com.google.javascript.rhino.ErrorReporter;
import com.google.javascript.rhino.JSDocInfo;
import com.google.javascript.rhino.Node;
import com.google.javascript.rhino.SimpleErrorReporter;
import com.google.javascript.rhino.jstype.AllType;
import com.google.javascript.rhino.jstype.BooleanLiteralSet;
import com.google.javascript.rhino.jstype.ErrorFunctionType;
import com.google.javascript.rhino.jstype.FunctionType;
import com.google.javascript.rhino.jstype.JSType;
import com.google.javascript.rhino.jstype.JSTypeNative;
import com.google.javascript.rhino.jstype.JSTypeRegistry;
import com.google.javascript.rhino.jstype.NoResolvedType;
import com.google.javascript.rhino.jstype.ObjectType;
import com.google.javascript.rhino.jstype.PrototypeObjectType;
import com.google.javascript.rhino.jstype.RecordType;
import com.google.javascript.rhino.jstype.RecordTypeBuilder;
import com.google.javascript.rhino.jstype.StaticScope;
import com.google.javascript.rhino.jstype.StringType;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;
import java.util.Set;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;

import org.evosuite.runtime.mock.java.lang.MockIllegalStateException;
import org.junit.runner.RunWith;


public class PrototypeObjectTypeEvoSuite_branch_Test  {

  @Test
  public void test00()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      boolean boolean0 = false;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0, boolean0);
      assertNotNull(jSTypeRegistry0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      AllType allType0 = new AllType(jSTypeRegistry0);
      assertNotNull(allType0);
      assertEquals(false, allType0.isConstructor());
      assertEquals(false, allType0.isEnumElementType());
      assertEquals(false, allType0.isRecordType());
      assertEquals(true, allType0.hasDisplayName());
      assertEquals(false, allType0.isResolved());
      assertEquals(false, allType0.isFunctionPrototypeType());
      assertEquals(false, allType0.isFunctionType());
      assertEquals(false, allType0.isNoType());
      assertEquals(false, allType0.isEnumType());
      assertEquals(false, allType0.isInterface());
      assertEquals(true, allType0.isAllType());
      assertEquals(false, allType0.isBooleanValueType());
      assertEquals("*", allType0.toString());
      assertEquals(true, allType0.matchesStringContext());
      assertEquals(false, allType0.isNullType());
      assertEquals(false, allType0.isVoidType());
      assertEquals(false, allType0.isCheckedUnknownType());
      assertEquals(false, allType0.isUnionType());
      assertEquals("<Any Type>", allType0.getDisplayName());
      assertEquals(false, allType0.isNoObjectType());
      assertEquals(false, allType0.isStringValueType());
      assertEquals(false, allType0.isNoResolvedType());
      assertEquals(false, allType0.isNominalType());
      assertEquals(false, allType0.isNumberValueType());
      assertEquals(true, allType0.matchesObjectContext());
      assertEquals(false, allType0.isTemplateType());
      assertEquals(false, allType0.isOrdinaryFunction());
      assertEquals(BooleanLiteralSet.BOTH, allType0.getPossibleToBooleanOutcomes());
      assertEquals(false, allType0.canBeCalled());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      Node node0 = null;
      String string0 = null;
      FunctionType functionType0 = jSTypeRegistry0.createConstructorType(string0, node0, node0, (JSType) allType0);
      assertNotNull(functionType0);
      assertEquals(false, allType0.isConstructor());
      assertEquals(false, allType0.isEnumElementType());
      assertEquals(false, allType0.isRecordType());
      assertEquals(true, allType0.hasDisplayName());
      assertEquals(false, allType0.isResolved());
      assertEquals(false, allType0.isFunctionPrototypeType());
      assertEquals(false, allType0.isFunctionType());
      assertEquals(false, allType0.isNoType());
      assertEquals(false, allType0.isEnumType());
      assertEquals(false, allType0.isInterface());
      assertEquals(true, allType0.isAllType());
      assertEquals(false, allType0.isBooleanValueType());
      assertEquals("*", allType0.toString());
      assertEquals(true, allType0.matchesStringContext());
      assertEquals(false, allType0.isNullType());
      assertEquals(false, allType0.isVoidType());
      assertEquals(false, allType0.isCheckedUnknownType());
      assertEquals(false, allType0.isUnionType());
      assertEquals("<Any Type>", allType0.getDisplayName());
      assertEquals(false, allType0.isNoObjectType());
      assertEquals(false, allType0.isStringValueType());
      assertEquals(false, allType0.isNoResolvedType());
      assertEquals(false, allType0.isNominalType());
      assertEquals(false, allType0.isNumberValueType());
      assertEquals(true, allType0.matchesObjectContext());
      assertEquals(false, allType0.isTemplateType());
      assertEquals(false, allType0.isOrdinaryFunction());
      assertEquals(BooleanLiteralSet.BOTH, allType0.getPossibleToBooleanOutcomes());
      assertEquals(false, allType0.canBeCalled());
      assertEquals(false, functionType0.isNullType());
      assertEquals(false, functionType0.isTemplateType());
      assertEquals(false, functionType0.isReturnTypeInferred());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertEquals(true, functionType0.isConstructor());
      assertEquals(false, functionType0.isAllType());
      assertNull(functionType0.getTemplateTypeName());
      assertEquals(true, functionType0.hasInstanceType());
      assertEquals(false, functionType0.isInterface());
      assertEquals(false, functionType0.isNoResolvedType());
      assertEquals(false, functionType0.isRecordType());
      assertEquals(false, functionType0.isStringValueType());
      assertEquals(2147483647, functionType0.getMaxArguments());
      assertEquals(false, functionType0.isNoType());
      assertEquals(false, functionType0.isCheckedUnknownType());
      assertEquals(false, functionType0.isResolved());
      assertEquals(true, functionType0.canBeCalled());
      assertEquals(false, functionType0.isNoObjectType());
      assertEquals(false, functionType0.isUnionType());
      assertEquals(false, functionType0.isEnumElementType());
      assertEquals(false, functionType0.isNumberValueType());
      assertEquals(false, functionType0.isEnumType());
      assertEquals(false, functionType0.isNominalType());
      assertEquals(false, functionType0.isVoidType());
      assertEquals(false, functionType0.isOrdinaryFunction());
      assertEquals(false, functionType0.isFunctionPrototypeType());
      assertEquals(false, functionType0.isBooleanValueType());
      assertEquals(false, functionType0.hasCachedValues());
      assertEquals(true, functionType0.isFunctionType());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      String string1 = "com.google.javascript.rhino.jstype.PrototypeObjectType";
      boolean boolean1 = functionType0.defineInferredProperty(string1, (JSType) allType0, node0);
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean0 == boolean1);
      assertEquals(false, allType0.isConstructor());
      assertEquals(false, allType0.isEnumElementType());
      assertEquals(false, allType0.isRecordType());
      assertEquals(true, allType0.hasDisplayName());
      assertEquals(false, allType0.isResolved());
      assertEquals(false, allType0.isFunctionPrototypeType());
      assertEquals(false, allType0.isFunctionType());
      assertEquals(false, allType0.isNoType());
      assertEquals(false, allType0.isEnumType());
      assertEquals(false, allType0.isInterface());
      assertEquals(true, allType0.isAllType());
      assertEquals(false, allType0.isBooleanValueType());
      assertEquals("*", allType0.toString());
      assertEquals(true, allType0.matchesStringContext());
      assertEquals(false, allType0.isNullType());
      assertEquals(false, allType0.isVoidType());
      assertEquals(false, allType0.isCheckedUnknownType());
      assertEquals(false, allType0.isUnionType());
      assertEquals("<Any Type>", allType0.getDisplayName());
      assertEquals(false, allType0.isNoObjectType());
      assertEquals(false, allType0.isStringValueType());
      assertEquals(false, allType0.isNoResolvedType());
      assertEquals(false, allType0.isNominalType());
      assertEquals(false, allType0.isNumberValueType());
      assertEquals(true, allType0.matchesObjectContext());
      assertEquals(false, allType0.isTemplateType());
      assertEquals(false, allType0.isOrdinaryFunction());
      assertEquals(BooleanLiteralSet.BOTH, allType0.getPossibleToBooleanOutcomes());
      assertEquals(false, allType0.canBeCalled());
      assertEquals(false, functionType0.isNullType());
      assertEquals(false, functionType0.isTemplateType());
      assertEquals(false, functionType0.isReturnTypeInferred());
      assertEquals(true, functionType0.hasCachedValues());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertEquals(true, functionType0.isConstructor());
      assertEquals(false, functionType0.isAllType());
      assertNull(functionType0.getTemplateTypeName());
      assertEquals(true, functionType0.hasInstanceType());
      assertEquals(false, functionType0.isInterface());
      assertEquals(false, functionType0.isNoResolvedType());
      assertEquals(false, functionType0.isRecordType());
      assertEquals(false, functionType0.isStringValueType());
      assertEquals(2147483647, functionType0.getMaxArguments());
      assertEquals(false, functionType0.isNoType());
      assertEquals(false, functionType0.isCheckedUnknownType());
      assertEquals(false, functionType0.isResolved());
      assertEquals(true, functionType0.canBeCalled());
      assertEquals(false, functionType0.isNoObjectType());
      assertEquals(false, functionType0.isUnionType());
      assertEquals(false, functionType0.isEnumElementType());
      assertEquals(false, functionType0.isNumberValueType());
      assertEquals(false, functionType0.isEnumType());
      assertEquals(false, functionType0.isNominalType());
      assertEquals(false, functionType0.isVoidType());
      assertEquals(false, functionType0.isOrdinaryFunction());
      assertEquals(false, functionType0.isFunctionPrototypeType());
      assertEquals(false, functionType0.isBooleanValueType());
      assertEquals(true, functionType0.isFunctionType());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      FunctionType functionType1 = (FunctionType)functionType0.forceResolve((ErrorReporter) simpleErrorReporter0, (StaticScope<JSType>) functionType0);
      assertSame(functionType1, functionType0);
      assertSame(functionType0, functionType1);
      assertNotNull(functionType1);
      assertFalse(boolean0 == boolean1);
      assertEquals(false, allType0.isConstructor());
      assertEquals(false, allType0.isEnumElementType());
      assertEquals(false, allType0.isRecordType());
      assertEquals(true, allType0.hasDisplayName());
      assertEquals(true, allType0.isResolved());
      assertEquals(false, allType0.isFunctionPrototypeType());
      assertEquals(false, allType0.isFunctionType());
      assertEquals(false, allType0.isNoType());
      assertEquals(false, allType0.isEnumType());
      assertEquals(false, allType0.isInterface());
      assertEquals(true, allType0.isAllType());
      assertEquals(false, allType0.isBooleanValueType());
      assertEquals("*", allType0.toString());
      assertEquals(true, allType0.matchesStringContext());
      assertEquals(false, allType0.isNullType());
      assertEquals(false, allType0.isVoidType());
      assertEquals(false, allType0.isCheckedUnknownType());
      assertEquals(false, allType0.isUnionType());
      assertEquals("<Any Type>", allType0.getDisplayName());
      assertEquals(false, allType0.isNoObjectType());
      assertEquals(false, allType0.isStringValueType());
      assertEquals(false, allType0.isNoResolvedType());
      assertEquals(false, allType0.isNominalType());
      assertEquals(false, allType0.isNumberValueType());
      assertEquals(true, allType0.matchesObjectContext());
      assertEquals(false, allType0.isTemplateType());
      assertEquals(false, allType0.isOrdinaryFunction());
      assertEquals(BooleanLiteralSet.BOTH, allType0.getPossibleToBooleanOutcomes());
      assertEquals(false, allType0.canBeCalled());
      assertEquals(false, functionType1.isEnumElementType());
      assertEquals(false, functionType1.isBooleanValueType());
      assertEquals(0, functionType1.getExtendedInterfacesCount());
      assertEquals(true, functionType1.hasCachedValues());
      assertEquals(true, functionType1.canBeCalled());
      assertEquals(false, functionType1.isNumberValueType());
      assertEquals(false, functionType1.isNoObjectType());
      assertEquals(true, functionType1.isFunctionType());
      assertEquals(false, functionType1.isNullType());
      assertEquals(false, functionType1.isStringValueType());
      assertEquals(false, functionType1.isCheckedUnknownType());
      assertEquals(false, functionType1.isReturnTypeInferred());
      assertEquals(false, functionType1.isUnionType());
      assertEquals(true, functionType1.isResolved());
      assertNull(functionType1.getTemplateTypeName());
      assertEquals(BooleanLiteralSet.TRUE, functionType1.getPossibleToBooleanOutcomes());
      assertEquals(true, functionType1.hasInstanceType());
      assertEquals(false, functionType1.isTemplateType());
      assertEquals(false, functionType1.isOrdinaryFunction());
      assertEquals(2147483647, functionType1.getMaxArguments());
      assertEquals(false, functionType1.isNoResolvedType());
      assertEquals(false, functionType1.isRecordType());
      assertEquals(false, functionType1.isAllType());
      assertEquals(false, functionType1.isInterface());
      assertEquals(false, functionType1.isFunctionPrototypeType());
      assertEquals(true, functionType1.isConstructor());
      assertEquals(false, functionType1.isNoType());
      assertEquals(false, functionType1.isNominalType());
      assertEquals(false, functionType1.isVoidType());
      assertEquals(false, functionType1.isEnumType());
      assertEquals(false, functionType0.isNullType());
      assertEquals(false, functionType0.isTemplateType());
      assertEquals(false, functionType0.isReturnTypeInferred());
      assertEquals(true, functionType0.hasCachedValues());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertEquals(true, functionType0.isResolved());
      assertEquals(true, functionType0.isConstructor());
      assertEquals(false, functionType0.isAllType());
      assertNull(functionType0.getTemplateTypeName());
      assertEquals(true, functionType0.hasInstanceType());
      assertEquals(false, functionType0.isInterface());
      assertEquals(false, functionType0.isNoResolvedType());
      assertEquals(false, functionType0.isRecordType());
      assertEquals(false, functionType0.isStringValueType());
      assertEquals(2147483647, functionType0.getMaxArguments());
      assertEquals(false, functionType0.isNoType());
      assertEquals(false, functionType0.isCheckedUnknownType());
      assertEquals(true, functionType0.canBeCalled());
      assertEquals(false, functionType0.isNoObjectType());
      assertEquals(false, functionType0.isUnionType());
      assertEquals(false, functionType0.isEnumElementType());
      assertEquals(false, functionType0.isNumberValueType());
      assertEquals(false, functionType0.isEnumType());
      assertEquals(false, functionType0.isNominalType());
      assertEquals(false, functionType0.isVoidType());
      assertEquals(false, functionType0.isOrdinaryFunction());
      assertEquals(false, functionType0.isFunctionPrototypeType());
      assertEquals(false, functionType0.isBooleanValueType());
      assertEquals(true, functionType0.isFunctionType());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
  }

  @Test
  public void test01()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      boolean boolean0 = true;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0, boolean0);
      assertNotNull(jSTypeRegistry0);
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      AllType allType0 = new AllType(jSTypeRegistry0);
      assertNotNull(allType0);
      assertEquals(false, allType0.isFunctionType());
      assertEquals(false, allType0.isNumberValueType());
      assertEquals(false, allType0.isInterface());
      assertEquals(true, allType0.isAllType());
      assertEquals(false, allType0.canBeCalled());
      assertEquals(false, allType0.isNoType());
      assertEquals(false, allType0.isEnumType());
      assertEquals("*", allType0.toString());
      assertEquals(false, allType0.isCheckedUnknownType());
      assertEquals(false, allType0.isNoObjectType());
      assertEquals(false, allType0.isTemplateType());
      assertEquals(BooleanLiteralSet.BOTH, allType0.getPossibleToBooleanOutcomes());
      assertEquals(false, allType0.isVoidType());
      assertEquals(false, allType0.isNoResolvedType());
      assertEquals(false, allType0.isNominalType());
      assertEquals(false, allType0.isStringValueType());
      assertEquals(false, allType0.isNullType());
      assertEquals(false, allType0.isOrdinaryFunction());
      assertEquals(false, allType0.isBooleanValueType());
      assertEquals(true, allType0.hasDisplayName());
      assertEquals(false, allType0.isUnionType());
      assertEquals(false, allType0.isEnumElementType());
      assertEquals(true, allType0.matchesStringContext());
      assertEquals(true, allType0.matchesObjectContext());
      assertEquals(false, allType0.isRecordType());
      assertEquals("<Any Type>", allType0.getDisplayName());
      assertEquals(false, allType0.isConstructor());
      assertEquals(false, allType0.isResolved());
      assertEquals(false, allType0.isFunctionPrototypeType());
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      Node node0 = null;
      String string0 = null;
      FunctionType functionType0 = jSTypeRegistry0.createConstructorType(string0, node0, node0, (JSType) allType0);
      assertNotNull(functionType0);
      assertEquals(false, functionType0.isVoidType());
      assertEquals(false, functionType0.isNoType());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertEquals(true, functionType0.isFunctionType());
      assertEquals(false, functionType0.isNoObjectType());
      assertEquals(false, functionType0.isReturnTypeInferred());
      assertEquals(false, functionType0.isNoResolvedType());
      assertEquals(true, functionType0.isConstructor());
      assertEquals(false, functionType0.isNominalType());
      assertEquals(false, functionType0.isFunctionPrototypeType());
      assertEquals(false, functionType0.isEnumType());
      assertEquals(false, functionType0.isBooleanValueType());
      assertEquals(false, functionType0.isResolved());
      assertEquals(false, functionType0.isStringValueType());
      assertEquals(false, functionType0.isRecordType());
      assertEquals(false, functionType0.isCheckedUnknownType());
      assertEquals(false, functionType0.isInterface());
      assertEquals(false, functionType0.isNullType());
      assertEquals(true, functionType0.canBeCalled());
      assertEquals(false, functionType0.isOrdinaryFunction());
      assertEquals(false, functionType0.hasCachedValues());
      assertEquals(false, functionType0.isAllType());
      assertEquals(2147483647, functionType0.getMaxArguments());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, functionType0.isTemplateType());
      assertEquals(false, functionType0.isNumberValueType());
      assertEquals(true, functionType0.hasInstanceType());
      assertEquals(false, functionType0.isEnumElementType());
      assertNull(functionType0.getTemplateTypeName());
      assertEquals(false, functionType0.isUnionType());
      assertEquals(false, allType0.isFunctionType());
      assertEquals(false, allType0.isNumberValueType());
      assertEquals(false, allType0.isInterface());
      assertEquals(true, allType0.isAllType());
      assertEquals(false, allType0.canBeCalled());
      assertEquals(false, allType0.isNoType());
      assertEquals(false, allType0.isEnumType());
      assertEquals("*", allType0.toString());
      assertEquals(false, allType0.isCheckedUnknownType());
      assertEquals(false, allType0.isNoObjectType());
      assertEquals(false, allType0.isTemplateType());
      assertEquals(BooleanLiteralSet.BOTH, allType0.getPossibleToBooleanOutcomes());
      assertEquals(false, allType0.isVoidType());
      assertEquals(false, allType0.isNoResolvedType());
      assertEquals(false, allType0.isNominalType());
      assertEquals(false, allType0.isStringValueType());
      assertEquals(false, allType0.isNullType());
      assertEquals(false, allType0.isOrdinaryFunction());
      assertEquals(false, allType0.isBooleanValueType());
      assertEquals(true, allType0.hasDisplayName());
      assertEquals(false, allType0.isUnionType());
      assertEquals(false, allType0.isEnumElementType());
      assertEquals(true, allType0.matchesStringContext());
      assertEquals(true, allType0.matchesObjectContext());
      assertEquals(false, allType0.isRecordType());
      assertEquals("<Any Type>", allType0.getDisplayName());
      assertEquals(false, allType0.isConstructor());
      assertEquals(false, allType0.isResolved());
      assertEquals(false, allType0.isFunctionPrototypeType());
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      assertNotNull(noResolvedType0);
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertEquals(true, noResolvedType0.canBeCalled());
      assertEquals(true, noResolvedType0.matchesNumberContext());
      assertEquals(true, noResolvedType0.matchesStringContext());
      assertEquals(false, noResolvedType0.isFunctionPrototypeType());
      assertEquals(false, noResolvedType0.isEnumType());
      assertEquals(false, noResolvedType0.isEnumElementType());
      assertEquals(false, noResolvedType0.isFunctionType());
      assertEquals(false, noResolvedType0.isUnionType());
      assertEquals(false, noResolvedType0.isNoObjectType());
      assertEquals(false, noResolvedType0.hasCachedValues());
      assertEquals(false, noResolvedType0.isOrdinaryFunction());
      assertEquals(false, noResolvedType0.isTemplateType());
      assertEquals(false, noResolvedType0.isVoidType());
      assertEquals(false, noResolvedType0.isInterface());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertEquals(false, noResolvedType0.isNominalType());
      assertEquals(true, noResolvedType0.isConstructor());
      assertEquals(false, noResolvedType0.isReturnTypeInferred());
      assertEquals(false, noResolvedType0.isAllType());
      assertEquals(2147483647, noResolvedType0.getPropertiesCount());
      assertEquals(false, noResolvedType0.isBooleanValueType());
      assertEquals(false, noResolvedType0.isNullType());
      assertNull(noResolvedType0.getReferenceName());
      assertEquals(false, noResolvedType0.isCheckedUnknownType());
      assertEquals(false, noResolvedType0.isResolved());
      assertNull(noResolvedType0.getTemplateTypeName());
      assertEquals(true, noResolvedType0.matchesObjectContext());
      assertEquals(false, noResolvedType0.isStringValueType());
      assertEquals(false, noResolvedType0.isRecordType());
      assertEquals(2147483647, noResolvedType0.getMaxArguments());
      assertEquals(true, noResolvedType0.isNullable());
      assertEquals(false, noResolvedType0.isNumberValueType());
      assertEquals(true, noResolvedType0.hasInstanceType());
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      boolean boolean1 = functionType0.setPrototype((PrototypeObjectType) noResolvedType0);
      assertTrue(boolean1);
      assertTrue(boolean0 == boolean1);
      assertTrue(boolean1 == boolean0);
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertEquals(true, noResolvedType0.canBeCalled());
      assertEquals(true, noResolvedType0.matchesNumberContext());
      assertEquals(true, noResolvedType0.matchesStringContext());
      assertEquals(false, noResolvedType0.isEnumType());
      assertEquals(false, noResolvedType0.isEnumElementType());
      assertEquals(false, noResolvedType0.isFunctionType());
      assertEquals(false, noResolvedType0.isUnionType());
      assertEquals(false, noResolvedType0.isNoObjectType());
      assertEquals(false, noResolvedType0.hasCachedValues());
      assertEquals(false, noResolvedType0.isOrdinaryFunction());
      assertEquals(false, noResolvedType0.isTemplateType());
      assertEquals(false, noResolvedType0.isVoidType());
      assertEquals(false, noResolvedType0.isInterface());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertEquals(false, noResolvedType0.isNominalType());
      assertEquals(true, noResolvedType0.isConstructor());
      assertEquals(false, noResolvedType0.isReturnTypeInferred());
      assertEquals(false, noResolvedType0.isAllType());
      assertEquals(2147483647, noResolvedType0.getPropertiesCount());
      assertEquals(false, noResolvedType0.isBooleanValueType());
      assertEquals(false, noResolvedType0.isNullType());
      assertEquals(true, noResolvedType0.isFunctionPrototypeType());
      assertNull(noResolvedType0.getReferenceName());
      assertEquals(false, noResolvedType0.isCheckedUnknownType());
      assertEquals(false, noResolvedType0.isResolved());
      assertNull(noResolvedType0.getTemplateTypeName());
      assertEquals(true, noResolvedType0.matchesObjectContext());
      assertEquals(false, noResolvedType0.isStringValueType());
      assertEquals(false, noResolvedType0.isRecordType());
      assertEquals(2147483647, noResolvedType0.getMaxArguments());
      assertEquals(true, noResolvedType0.isNullable());
      assertEquals(false, noResolvedType0.isNumberValueType());
      assertEquals(true, noResolvedType0.hasInstanceType());
      assertEquals(false, functionType0.isVoidType());
      assertEquals(false, functionType0.isNoType());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertEquals(true, functionType0.isFunctionType());
      assertEquals(false, functionType0.isNoObjectType());
      assertEquals(false, functionType0.isReturnTypeInferred());
      assertEquals(false, functionType0.isNoResolvedType());
      assertEquals(true, functionType0.isConstructor());
      assertEquals(false, functionType0.isNominalType());
      assertEquals(false, functionType0.isFunctionPrototypeType());
      assertEquals(false, functionType0.isEnumType());
      assertEquals(false, functionType0.isBooleanValueType());
      assertEquals(false, functionType0.isResolved());
      assertEquals(false, functionType0.isStringValueType());
      assertEquals(false, functionType0.isRecordType());
      assertEquals(false, functionType0.isCheckedUnknownType());
      assertEquals(false, functionType0.isInterface());
      assertEquals(false, functionType0.isNullType());
      assertEquals(true, functionType0.canBeCalled());
      assertEquals(false, functionType0.isOrdinaryFunction());
      assertEquals(false, functionType0.isAllType());
      assertEquals(2147483647, functionType0.getMaxArguments());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertEquals(true, functionType0.hasCachedValues());
      assertEquals(false, functionType0.isTemplateType());
      assertEquals(false, functionType0.isNumberValueType());
      assertEquals(true, functionType0.hasInstanceType());
      assertEquals(false, functionType0.isEnumElementType());
      assertNull(functionType0.getTemplateTypeName());
      assertEquals(false, functionType0.isUnionType());
      assertEquals(false, allType0.isFunctionType());
      assertEquals(false, allType0.isNumberValueType());
      assertEquals(false, allType0.isInterface());
      assertEquals(true, allType0.isAllType());
      assertEquals(false, allType0.canBeCalled());
      assertEquals(false, allType0.isNoType());
      assertEquals(false, allType0.isEnumType());
      assertEquals("*", allType0.toString());
      assertEquals(false, allType0.isCheckedUnknownType());
      assertEquals(false, allType0.isNoObjectType());
      assertEquals(false, allType0.isTemplateType());
      assertEquals(BooleanLiteralSet.BOTH, allType0.getPossibleToBooleanOutcomes());
      assertEquals(false, allType0.isVoidType());
      assertEquals(false, allType0.isNoResolvedType());
      assertEquals(false, allType0.isNominalType());
      assertEquals(false, allType0.isStringValueType());
      assertEquals(false, allType0.isNullType());
      assertEquals(false, allType0.isOrdinaryFunction());
      assertEquals(false, allType0.isBooleanValueType());
      assertEquals(true, allType0.hasDisplayName());
      assertEquals(false, allType0.isUnionType());
      assertEquals(false, allType0.isEnumElementType());
      assertEquals(true, allType0.matchesStringContext());
      assertEquals(true, allType0.matchesObjectContext());
      assertEquals(false, allType0.isRecordType());
      assertEquals("<Any Type>", allType0.getDisplayName());
      assertEquals(false, allType0.isConstructor());
      assertEquals(false, allType0.isResolved());
      assertEquals(false, allType0.isFunctionPrototypeType());
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      Iterable<ObjectType> iterable0 = noResolvedType0.getCtorImplementedInterfaces();
      assertNotNull(iterable0);
      assertTrue(boolean0 == boolean1);
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertEquals(true, noResolvedType0.canBeCalled());
      assertEquals(true, noResolvedType0.matchesNumberContext());
      assertEquals(true, noResolvedType0.matchesStringContext());
      assertEquals(false, noResolvedType0.isEnumType());
      assertEquals(false, noResolvedType0.isEnumElementType());
      assertEquals(false, noResolvedType0.isFunctionType());
      assertEquals(false, noResolvedType0.isUnionType());
      assertEquals(false, noResolvedType0.isNoObjectType());
      assertEquals(false, noResolvedType0.hasCachedValues());
      assertEquals(false, noResolvedType0.isOrdinaryFunction());
      assertEquals(false, noResolvedType0.isTemplateType());
      assertEquals(false, noResolvedType0.isVoidType());
      assertEquals(false, noResolvedType0.isInterface());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertEquals(false, noResolvedType0.isNominalType());
      assertEquals(true, noResolvedType0.isConstructor());
      assertEquals(false, noResolvedType0.isReturnTypeInferred());
      assertEquals(false, noResolvedType0.isAllType());
      assertEquals(2147483647, noResolvedType0.getPropertiesCount());
      assertEquals(false, noResolvedType0.isBooleanValueType());
      assertEquals(false, noResolvedType0.isNullType());
      assertEquals(true, noResolvedType0.isFunctionPrototypeType());
      assertNull(noResolvedType0.getReferenceName());
      assertEquals(false, noResolvedType0.isCheckedUnknownType());
      assertEquals(false, noResolvedType0.isResolved());
      assertNull(noResolvedType0.getTemplateTypeName());
      assertEquals(true, noResolvedType0.matchesObjectContext());
      assertEquals(false, noResolvedType0.isStringValueType());
      assertEquals(false, noResolvedType0.isRecordType());
      assertEquals(2147483647, noResolvedType0.getMaxArguments());
      assertEquals(true, noResolvedType0.isNullable());
      assertEquals(false, noResolvedType0.isNumberValueType());
      assertEquals(true, noResolvedType0.hasInstanceType());
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
  }

  @Test
  public void test02()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      String string0 = "com.google.javascript.rhino.jstype.PrototypeObjectType";
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, string0);
      assertNotNull(errorFunctionType0);
      assertEquals(false, errorFunctionType0.isInterface());
      assertEquals(false, errorFunctionType0.isTemplateType());
      assertEquals(true, errorFunctionType0.isFunctionType());
      assertNull(errorFunctionType0.getTemplateTypeName());
      assertEquals(false, errorFunctionType0.isReturnTypeInferred());
      assertEquals(false, errorFunctionType0.isUnionType());
      assertEquals(false, errorFunctionType0.isStringValueType());
      assertEquals(true, errorFunctionType0.canBeCalled());
      assertEquals(false, errorFunctionType0.isNullType());
      assertEquals(false, errorFunctionType0.isFunctionPrototypeType());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertEquals(3, errorFunctionType0.getMaxArguments());
      assertEquals(false, errorFunctionType0.isEnumElementType());
      assertEquals(false, errorFunctionType0.isNoObjectType());
      assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      assertEquals(false, errorFunctionType0.isAllType());
      assertEquals(true, errorFunctionType0.hasInstanceType());
      assertEquals(false, errorFunctionType0.isNumberValueType());
      assertEquals(false, errorFunctionType0.isNominalType());
      assertEquals(false, errorFunctionType0.isCheckedUnknownType());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertEquals(false, errorFunctionType0.isResolved());
      assertEquals(false, errorFunctionType0.isVoidType());
      assertEquals(false, errorFunctionType0.isNoType());
      assertEquals(false, errorFunctionType0.hasCachedValues());
      assertEquals(false, errorFunctionType0.isNoResolvedType());
      assertEquals(true, errorFunctionType0.isConstructor());
      assertEquals(false, errorFunctionType0.isRecordType());
      assertEquals(false, errorFunctionType0.isBooleanValueType());
      assertEquals(false, errorFunctionType0.isEnumType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      Iterable<ObjectType> iterable0 = errorFunctionType0.getCtorImplementedInterfaces();
      assertNotNull(iterable0);
      assertEquals(false, errorFunctionType0.isInterface());
      assertEquals(false, errorFunctionType0.isTemplateType());
      assertEquals(true, errorFunctionType0.isFunctionType());
      assertNull(errorFunctionType0.getTemplateTypeName());
      assertEquals(false, errorFunctionType0.isReturnTypeInferred());
      assertEquals(false, errorFunctionType0.isUnionType());
      assertEquals(false, errorFunctionType0.isStringValueType());
      assertEquals(true, errorFunctionType0.canBeCalled());
      assertEquals(false, errorFunctionType0.isNullType());
      assertEquals(false, errorFunctionType0.isFunctionPrototypeType());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertEquals(3, errorFunctionType0.getMaxArguments());
      assertEquals(false, errorFunctionType0.isEnumElementType());
      assertEquals(false, errorFunctionType0.isNoObjectType());
      assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      assertEquals(false, errorFunctionType0.isAllType());
      assertEquals(true, errorFunctionType0.hasInstanceType());
      assertEquals(false, errorFunctionType0.isNumberValueType());
      assertEquals(false, errorFunctionType0.isNominalType());
      assertEquals(false, errorFunctionType0.isCheckedUnknownType());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertEquals(false, errorFunctionType0.isResolved());
      assertEquals(false, errorFunctionType0.isVoidType());
      assertEquals(false, errorFunctionType0.isNoType());
      assertEquals(false, errorFunctionType0.hasCachedValues());
      assertEquals(false, errorFunctionType0.isNoResolvedType());
      assertEquals(true, errorFunctionType0.isConstructor());
      assertEquals(false, errorFunctionType0.isRecordType());
      assertEquals(false, errorFunctionType0.isBooleanValueType());
      assertEquals(false, errorFunctionType0.isEnumType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
  }

  @Test
  public void test03()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      boolean boolean0 = false;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0, boolean0);
      assertNotNull(jSTypeRegistry0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      AllType allType0 = new AllType(jSTypeRegistry0);
      assertNotNull(allType0);
      assertEquals(false, allType0.isEnumElementType());
      assertEquals(false, allType0.isFunctionType());
      assertEquals(false, allType0.isEnumType());
      assertEquals("*", allType0.toString());
      assertEquals("<Any Type>", allType0.getDisplayName());
      assertEquals(true, allType0.isAllType());
      assertEquals(false, allType0.isRecordType());
      assertEquals(false, allType0.isResolved());
      assertEquals(false, allType0.isNullType());
      assertEquals(false, allType0.isConstructor());
      assertEquals(false, allType0.isVoidType());
      assertEquals(false, allType0.isCheckedUnknownType());
      assertEquals(false, allType0.isStringValueType());
      assertEquals(false, allType0.isNoType());
      assertEquals(false, allType0.isNumberValueType());
      assertEquals(false, allType0.isOrdinaryFunction());
      assertEquals(true, allType0.matchesObjectContext());
      assertEquals(false, allType0.isTemplateType());
      assertEquals(false, allType0.isNoObjectType());
      assertEquals(false, allType0.isBooleanValueType());
      assertEquals(true, allType0.matchesStringContext());
      assertEquals(false, allType0.isUnionType());
      assertEquals(false, allType0.isNominalType());
      assertEquals(BooleanLiteralSet.BOTH, allType0.getPossibleToBooleanOutcomes());
      assertEquals(false, allType0.isNoResolvedType());
      assertEquals(true, allType0.hasDisplayName());
      assertEquals(false, allType0.canBeCalled());
      assertEquals(false, allType0.isFunctionPrototypeType());
      assertEquals(false, allType0.isInterface());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      Node node0 = null;
      String string0 = null;
      FunctionType functionType0 = jSTypeRegistry0.createConstructorType(string0, node0, node0, (JSType) allType0);
      assertNotNull(functionType0);
      assertEquals(false, allType0.isEnumElementType());
      assertEquals(false, allType0.isFunctionType());
      assertEquals(false, allType0.isEnumType());
      assertEquals("*", allType0.toString());
      assertEquals("<Any Type>", allType0.getDisplayName());
      assertEquals(true, allType0.isAllType());
      assertEquals(false, allType0.isRecordType());
      assertEquals(false, allType0.isResolved());
      assertEquals(false, allType0.isNullType());
      assertEquals(false, allType0.isConstructor());
      assertEquals(false, allType0.isVoidType());
      assertEquals(false, allType0.isCheckedUnknownType());
      assertEquals(false, allType0.isStringValueType());
      assertEquals(false, allType0.isNoType());
      assertEquals(false, allType0.isNumberValueType());
      assertEquals(false, allType0.isOrdinaryFunction());
      assertEquals(true, allType0.matchesObjectContext());
      assertEquals(false, allType0.isTemplateType());
      assertEquals(false, allType0.isNoObjectType());
      assertEquals(false, allType0.isBooleanValueType());
      assertEquals(true, allType0.matchesStringContext());
      assertEquals(false, allType0.isUnionType());
      assertEquals(false, allType0.isNominalType());
      assertEquals(BooleanLiteralSet.BOTH, allType0.getPossibleToBooleanOutcomes());
      assertEquals(false, allType0.isNoResolvedType());
      assertEquals(true, allType0.hasDisplayName());
      assertEquals(false, allType0.canBeCalled());
      assertEquals(false, allType0.isFunctionPrototypeType());
      assertEquals(false, allType0.isInterface());
      assertEquals(true, functionType0.isFunctionType());
      assertEquals(false, functionType0.isTemplateType());
      assertEquals(false, functionType0.isEnumElementType());
      assertEquals(false, functionType0.isBooleanValueType());
      assertEquals(true, functionType0.hasInstanceType());
      assertEquals(false, functionType0.isOrdinaryFunction());
      assertEquals(false, functionType0.isRecordType());
      assertNull(functionType0.getTemplateTypeName());
      assertEquals(false, functionType0.isNoType());
      assertEquals(false, functionType0.isNullType());
      assertEquals(false, functionType0.isStringValueType());
      assertEquals(false, functionType0.isNominalType());
      assertEquals(false, functionType0.hasCachedValues());
      assertEquals(false, functionType0.isAllType());
      assertEquals(false, functionType0.isVoidType());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertEquals(false, functionType0.isInterface());
      assertEquals(false, functionType0.isResolved());
      assertEquals(false, functionType0.isFunctionPrototypeType());
      assertEquals(false, functionType0.isNoResolvedType());
      assertEquals(false, functionType0.isNoObjectType());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertEquals(true, functionType0.canBeCalled());
      assertEquals(true, functionType0.isConstructor());
      assertEquals(false, functionType0.isUnionType());
      assertEquals(false, functionType0.isCheckedUnknownType());
      assertEquals(false, functionType0.isNumberValueType());
      assertEquals(false, functionType0.isEnumType());
      assertEquals(false, functionType0.isReturnTypeInferred());
      assertEquals(2147483647, functionType0.getMaxArguments());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      FunctionType functionType1 = (FunctionType)functionType0.forceResolve((ErrorReporter) simpleErrorReporter0, (StaticScope<JSType>) functionType0);
      assertSame(functionType0, functionType1);
      assertSame(functionType1, functionType0);
      assertNotNull(functionType1);
      assertEquals(false, allType0.isEnumElementType());
      assertEquals(false, allType0.isFunctionType());
      assertEquals(false, allType0.isEnumType());
      assertEquals("*", allType0.toString());
      assertEquals(true, allType0.isResolved());
      assertEquals("<Any Type>", allType0.getDisplayName());
      assertEquals(true, allType0.isAllType());
      assertEquals(false, allType0.isRecordType());
      assertEquals(false, allType0.isNullType());
      assertEquals(false, allType0.isConstructor());
      assertEquals(false, allType0.isVoidType());
      assertEquals(false, allType0.isCheckedUnknownType());
      assertEquals(false, allType0.isStringValueType());
      assertEquals(false, allType0.isNoType());
      assertEquals(false, allType0.isNumberValueType());
      assertEquals(false, allType0.isOrdinaryFunction());
      assertEquals(true, allType0.matchesObjectContext());
      assertEquals(false, allType0.isTemplateType());
      assertEquals(false, allType0.isNoObjectType());
      assertEquals(false, allType0.isBooleanValueType());
      assertEquals(true, allType0.matchesStringContext());
      assertEquals(false, allType0.isUnionType());
      assertEquals(false, allType0.isNominalType());
      assertEquals(BooleanLiteralSet.BOTH, allType0.getPossibleToBooleanOutcomes());
      assertEquals(false, allType0.isNoResolvedType());
      assertEquals(true, allType0.hasDisplayName());
      assertEquals(false, allType0.canBeCalled());
      assertEquals(false, allType0.isFunctionPrototypeType());
      assertEquals(false, allType0.isInterface());
      assertEquals(true, functionType0.isFunctionType());
      assertEquals(false, functionType0.isTemplateType());
      assertEquals(false, functionType0.isEnumElementType());
      assertEquals(false, functionType0.isBooleanValueType());
      assertEquals(true, functionType0.isResolved());
      assertEquals(true, functionType0.hasInstanceType());
      assertEquals(false, functionType0.isOrdinaryFunction());
      assertEquals(false, functionType0.isRecordType());
      assertNull(functionType0.getTemplateTypeName());
      assertEquals(false, functionType0.isNoType());
      assertEquals(false, functionType0.isNullType());
      assertEquals(false, functionType0.isStringValueType());
      assertEquals(false, functionType0.isNominalType());
      assertEquals(false, functionType0.isAllType());
      assertEquals(false, functionType0.isVoidType());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertEquals(false, functionType0.isInterface());
      assertEquals(false, functionType0.isFunctionPrototypeType());
      assertEquals(false, functionType0.isNoResolvedType());
      assertEquals(true, functionType0.hasCachedValues());
      assertEquals(false, functionType0.isNoObjectType());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertEquals(true, functionType0.canBeCalled());
      assertEquals(true, functionType0.isConstructor());
      assertEquals(false, functionType0.isUnionType());
      assertEquals(false, functionType0.isCheckedUnknownType());
      assertEquals(false, functionType0.isNumberValueType());
      assertEquals(false, functionType0.isEnumType());
      assertEquals(false, functionType0.isReturnTypeInferred());
      assertEquals(2147483647, functionType0.getMaxArguments());
      assertEquals(false, functionType1.isFunctionPrototypeType());
      assertEquals(false, functionType1.isNumberValueType());
      assertEquals(false, functionType1.isUnionType());
      assertEquals(false, functionType1.isNoObjectType());
      assertEquals(false, functionType1.isEnumElementType());
      assertEquals(true, functionType1.canBeCalled());
      assertEquals(false, functionType1.isStringValueType());
      assertEquals(true, functionType1.isResolved());
      assertEquals(false, functionType1.isBooleanValueType());
      assertEquals(BooleanLiteralSet.TRUE, functionType1.getPossibleToBooleanOutcomes());
      assertEquals(false, functionType1.isRecordType());
      assertEquals(false, functionType1.isVoidType());
      assertEquals(true, functionType1.isFunctionType());
      assertEquals(2147483647, functionType1.getMaxArguments());
      assertEquals(false, functionType1.isCheckedUnknownType());
      assertEquals(false, functionType1.isNominalType());
      assertEquals(false, functionType1.isAllType());
      assertEquals(false, functionType1.isEnumType());
      assertEquals(true, functionType1.hasCachedValues());
      assertEquals(false, functionType1.isTemplateType());
      assertEquals(false, functionType1.isOrdinaryFunction());
      assertEquals(false, functionType1.isReturnTypeInferred());
      assertNull(functionType1.getTemplateTypeName());
      assertEquals(true, functionType1.isConstructor());
      assertEquals(false, functionType1.isInterface());
      assertEquals(false, functionType1.isNoType());
      assertEquals(false, functionType1.isNoResolvedType());
      assertEquals(true, functionType1.hasInstanceType());
      assertEquals(false, functionType1.isNullType());
      assertEquals(0, functionType1.getExtendedInterfacesCount());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      assertNotNull(noResolvedType0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, noResolvedType0.isNoObjectType());
      assertEquals(false, noResolvedType0.isReturnTypeInferred());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noResolvedType0.isVoidType());
      assertEquals(true, noResolvedType0.matchesNumberContext());
      assertEquals(true, noResolvedType0.matchesObjectContext());
      assertEquals(true, noResolvedType0.canBeCalled());
      assertEquals(false, noResolvedType0.isBooleanValueType());
      assertEquals(false, noResolvedType0.hasCachedValues());
      assertEquals(false, noResolvedType0.isFunctionType());
      assertEquals(false, noResolvedType0.isCheckedUnknownType());
      assertEquals(false, noResolvedType0.isUnionType());
      assertEquals(false, noResolvedType0.isTemplateType());
      assertEquals(false, noResolvedType0.isEnumElementType());
      assertEquals(2147483647, noResolvedType0.getPropertiesCount());
      assertEquals(false, noResolvedType0.isInterface());
      assertEquals(true, noResolvedType0.hasInstanceType());
      assertEquals(true, noResolvedType0.matchesStringContext());
      assertEquals(false, noResolvedType0.isAllType());
      assertEquals(false, noResolvedType0.isNominalType());
      assertEquals(false, noResolvedType0.isNumberValueType());
      assertEquals(true, noResolvedType0.isNullable());
      assertEquals(false, noResolvedType0.isStringValueType());
      assertEquals(false, noResolvedType0.isNullType());
      assertEquals(false, noResolvedType0.isEnumType());
      assertNull(noResolvedType0.getTemplateTypeName());
      assertEquals(true, noResolvedType0.isConstructor());
      assertEquals(false, noResolvedType0.isOrdinaryFunction());
      assertEquals(2147483647, noResolvedType0.getMaxArguments());
      assertNull(noResolvedType0.getReferenceName());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertEquals(false, noResolvedType0.isResolved());
      assertEquals(false, noResolvedType0.isRecordType());
      assertEquals(false, noResolvedType0.isFunctionPrototypeType());
      
      boolean boolean1 = functionType0.setPrototype((PrototypeObjectType) noResolvedType0);
      assertSame(functionType0, functionType1);
      assertTrue(boolean1);
      assertFalse(boolean0 == boolean1);
      assertFalse(boolean1 == boolean0);
      assertEquals(false, allType0.isEnumElementType());
      assertEquals(false, allType0.isFunctionType());
      assertEquals(false, allType0.isEnumType());
      assertEquals("*", allType0.toString());
      assertEquals(true, allType0.isResolved());
      assertEquals("<Any Type>", allType0.getDisplayName());
      assertEquals(true, allType0.isAllType());
      assertEquals(false, allType0.isRecordType());
      assertEquals(false, allType0.isNullType());
      assertEquals(false, allType0.isConstructor());
      assertEquals(false, allType0.isVoidType());
      assertEquals(false, allType0.isCheckedUnknownType());
      assertEquals(false, allType0.isStringValueType());
      assertEquals(false, allType0.isNoType());
      assertEquals(false, allType0.isNumberValueType());
      assertEquals(false, allType0.isOrdinaryFunction());
      assertEquals(true, allType0.matchesObjectContext());
      assertEquals(false, allType0.isTemplateType());
      assertEquals(false, allType0.isNoObjectType());
      assertEquals(false, allType0.isBooleanValueType());
      assertEquals(true, allType0.matchesStringContext());
      assertEquals(false, allType0.isUnionType());
      assertEquals(false, allType0.isNominalType());
      assertEquals(BooleanLiteralSet.BOTH, allType0.getPossibleToBooleanOutcomes());
      assertEquals(false, allType0.isNoResolvedType());
      assertEquals(true, allType0.hasDisplayName());
      assertEquals(false, allType0.canBeCalled());
      assertEquals(false, allType0.isFunctionPrototypeType());
      assertEquals(false, allType0.isInterface());
      assertEquals(true, functionType0.isFunctionType());
      assertEquals(false, functionType0.isTemplateType());
      assertEquals(false, functionType0.isEnumElementType());
      assertEquals(false, functionType0.isBooleanValueType());
      assertEquals(true, functionType0.isResolved());
      assertEquals(true, functionType0.hasInstanceType());
      assertEquals(false, functionType0.isOrdinaryFunction());
      assertEquals(false, functionType0.isRecordType());
      assertNull(functionType0.getTemplateTypeName());
      assertEquals(false, functionType0.isNoType());
      assertEquals(false, functionType0.isNullType());
      assertEquals(false, functionType0.isStringValueType());
      assertEquals(false, functionType0.isNominalType());
      assertEquals(false, functionType0.isAllType());
      assertEquals(false, functionType0.isVoidType());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertEquals(false, functionType0.isInterface());
      assertEquals(false, functionType0.isFunctionPrototypeType());
      assertEquals(false, functionType0.isNoResolvedType());
      assertEquals(true, functionType0.hasCachedValues());
      assertEquals(false, functionType0.isNoObjectType());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertEquals(true, functionType0.canBeCalled());
      assertEquals(true, functionType0.isConstructor());
      assertEquals(false, functionType0.isUnionType());
      assertEquals(false, functionType0.isCheckedUnknownType());
      assertEquals(false, functionType0.isNumberValueType());
      assertEquals(false, functionType0.isEnumType());
      assertEquals(false, functionType0.isReturnTypeInferred());
      assertEquals(2147483647, functionType0.getMaxArguments());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, noResolvedType0.isNoObjectType());
      assertEquals(false, noResolvedType0.isReturnTypeInferred());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noResolvedType0.isVoidType());
      assertEquals(true, noResolvedType0.matchesNumberContext());
      assertEquals(true, noResolvedType0.matchesObjectContext());
      assertEquals(true, noResolvedType0.canBeCalled());
      assertEquals(false, noResolvedType0.isBooleanValueType());
      assertEquals(false, noResolvedType0.hasCachedValues());
      assertEquals(false, noResolvedType0.isFunctionType());
      assertEquals(false, noResolvedType0.isCheckedUnknownType());
      assertEquals(false, noResolvedType0.isUnionType());
      assertEquals(false, noResolvedType0.isTemplateType());
      assertEquals(false, noResolvedType0.isEnumElementType());
      assertEquals(2147483647, noResolvedType0.getPropertiesCount());
      assertEquals(false, noResolvedType0.isInterface());
      assertEquals(true, noResolvedType0.hasInstanceType());
      assertEquals(true, noResolvedType0.matchesStringContext());
      assertEquals(false, noResolvedType0.isAllType());
      assertEquals(false, noResolvedType0.isNominalType());
      assertEquals(false, noResolvedType0.isNumberValueType());
      assertEquals(true, noResolvedType0.isNullable());
      assertEquals(false, noResolvedType0.isStringValueType());
      assertEquals(false, noResolvedType0.isNullType());
      assertEquals(false, noResolvedType0.isEnumType());
      assertNull(noResolvedType0.getTemplateTypeName());
      assertEquals(true, noResolvedType0.isConstructor());
      assertEquals(false, noResolvedType0.isOrdinaryFunction());
      assertEquals(2147483647, noResolvedType0.getMaxArguments());
      assertNull(noResolvedType0.getReferenceName());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertEquals(true, noResolvedType0.isFunctionPrototypeType());
      assertEquals(false, noResolvedType0.isResolved());
      assertEquals(false, noResolvedType0.isRecordType());
  }

  @Test
  public void test04()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      boolean boolean0 = false;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0, boolean0);
      assertNotNull(jSTypeRegistry0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      AllType allType0 = new AllType(jSTypeRegistry0);
      assertNotNull(allType0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, allType0.isConstructor());
      assertEquals(BooleanLiteralSet.BOTH, allType0.getPossibleToBooleanOutcomes());
      assertEquals(false, allType0.isRecordType());
      assertEquals(false, allType0.isCheckedUnknownType());
      assertEquals(true, allType0.matchesStringContext());
      assertEquals(false, allType0.isEnumType());
      assertEquals(true, allType0.matchesObjectContext());
      assertEquals(false, allType0.isFunctionPrototypeType());
      assertEquals("*", allType0.toString());
      assertEquals(false, allType0.isNullType());
      assertEquals(false, allType0.isNoObjectType());
      assertEquals(false, allType0.isOrdinaryFunction());
      assertEquals(false, allType0.isResolved());
      assertEquals(false, allType0.isFunctionType());
      assertEquals(false, allType0.isEnumElementType());
      assertEquals(false, allType0.isUnionType());
      assertEquals(false, allType0.canBeCalled());
      assertEquals(true, allType0.hasDisplayName());
      assertEquals(false, allType0.isBooleanValueType());
      assertEquals(false, allType0.isVoidType());
      assertEquals(true, allType0.isAllType());
      assertEquals(false, allType0.isNoType());
      assertEquals(false, allType0.isNumberValueType());
      assertEquals(false, allType0.isInterface());
      assertEquals("<Any Type>", allType0.getDisplayName());
      assertEquals(false, allType0.isTemplateType());
      assertEquals(false, allType0.isStringValueType());
      assertEquals(false, allType0.isNoResolvedType());
      assertEquals(false, allType0.isNominalType());
      
      Node node0 = null;
      String string0 = null;
      FunctionType functionType0 = jSTypeRegistry0.createConstructorType(string0, node0, node0, (JSType) allType0);
      assertNotNull(functionType0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNull(functionType0.getTemplateTypeName());
      assertEquals(true, functionType0.hasInstanceType());
      assertEquals(false, functionType0.isNominalType());
      assertEquals(false, functionType0.isBooleanValueType());
      assertEquals(false, functionType0.isNoObjectType());
      assertEquals(2147483647, functionType0.getMaxArguments());
      assertEquals(false, functionType0.isNoType());
      assertEquals(false, functionType0.isAllType());
      assertEquals(false, functionType0.isNullType());
      assertEquals(false, functionType0.isTemplateType());
      assertEquals(true, functionType0.isConstructor());
      assertEquals(true, functionType0.canBeCalled());
      assertEquals(false, functionType0.isUnionType());
      assertEquals(false, functionType0.hasCachedValues());
      assertEquals(false, functionType0.isNumberValueType());
      assertEquals(false, functionType0.isOrdinaryFunction());
      assertEquals(false, functionType0.isEnumElementType());
      assertEquals(false, functionType0.isInterface());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, functionType0.isEnumType());
      assertEquals(false, functionType0.isRecordType());
      assertEquals(false, functionType0.isResolved());
      assertEquals(false, functionType0.isFunctionPrototypeType());
      assertEquals(false, functionType0.isCheckedUnknownType());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertEquals(true, functionType0.isFunctionType());
      assertEquals(false, functionType0.isVoidType());
      assertEquals(false, functionType0.isNoResolvedType());
      assertEquals(false, functionType0.isReturnTypeInferred());
      assertEquals(false, functionType0.isStringValueType());
      assertEquals(false, allType0.isConstructor());
      assertEquals(BooleanLiteralSet.BOTH, allType0.getPossibleToBooleanOutcomes());
      assertEquals(false, allType0.isRecordType());
      assertEquals(false, allType0.isCheckedUnknownType());
      assertEquals(true, allType0.matchesStringContext());
      assertEquals(false, allType0.isEnumType());
      assertEquals(true, allType0.matchesObjectContext());
      assertEquals(false, allType0.isFunctionPrototypeType());
      assertEquals("*", allType0.toString());
      assertEquals(false, allType0.isNullType());
      assertEquals(false, allType0.isNoObjectType());
      assertEquals(false, allType0.isOrdinaryFunction());
      assertEquals(false, allType0.isResolved());
      assertEquals(false, allType0.isFunctionType());
      assertEquals(false, allType0.isEnumElementType());
      assertEquals(false, allType0.isUnionType());
      assertEquals(false, allType0.canBeCalled());
      assertEquals(true, allType0.hasDisplayName());
      assertEquals(false, allType0.isBooleanValueType());
      assertEquals(false, allType0.isVoidType());
      assertEquals(true, allType0.isAllType());
      assertEquals(false, allType0.isNoType());
      assertEquals(false, allType0.isNumberValueType());
      assertEquals(false, allType0.isInterface());
      assertEquals("<Any Type>", allType0.getDisplayName());
      assertEquals(false, allType0.isTemplateType());
      assertEquals(false, allType0.isStringValueType());
      assertEquals(false, allType0.isNoResolvedType());
      assertEquals(false, allType0.isNominalType());
      
      boolean boolean1 = functionType0.isNumber();
      assertFalse(boolean1);
      assertTrue(boolean0 == boolean1);
      assertTrue(boolean1 == boolean0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNull(functionType0.getTemplateTypeName());
      assertEquals(true, functionType0.hasInstanceType());
      assertEquals(false, functionType0.isNominalType());
      assertEquals(false, functionType0.isBooleanValueType());
      assertEquals(false, functionType0.isNoObjectType());
      assertEquals(2147483647, functionType0.getMaxArguments());
      assertEquals(false, functionType0.isNoType());
      assertEquals(false, functionType0.isAllType());
      assertEquals(false, functionType0.isNullType());
      assertEquals(false, functionType0.isTemplateType());
      assertEquals(true, functionType0.isConstructor());
      assertEquals(true, functionType0.canBeCalled());
      assertEquals(false, functionType0.isUnionType());
      assertEquals(false, functionType0.hasCachedValues());
      assertEquals(false, functionType0.isNumberValueType());
      assertEquals(false, functionType0.isOrdinaryFunction());
      assertEquals(false, functionType0.isEnumElementType());
      assertEquals(false, functionType0.isInterface());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, functionType0.isEnumType());
      assertEquals(false, functionType0.isRecordType());
      assertEquals(false, functionType0.isResolved());
      assertEquals(false, functionType0.isFunctionPrototypeType());
      assertEquals(false, functionType0.isCheckedUnknownType());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertEquals(true, functionType0.isFunctionType());
      assertEquals(false, functionType0.isVoidType());
      assertEquals(false, functionType0.isNoResolvedType());
      assertEquals(false, functionType0.isReturnTypeInferred());
      assertEquals(false, functionType0.isStringValueType());
      assertEquals(false, allType0.isConstructor());
      assertEquals(BooleanLiteralSet.BOTH, allType0.getPossibleToBooleanOutcomes());
      assertEquals(false, allType0.isRecordType());
      assertEquals(false, allType0.isCheckedUnknownType());
      assertEquals(true, allType0.matchesStringContext());
      assertEquals(false, allType0.isEnumType());
      assertEquals(true, allType0.matchesObjectContext());
      assertEquals(false, allType0.isFunctionPrototypeType());
      assertEquals("*", allType0.toString());
      assertEquals(false, allType0.isNullType());
      assertEquals(false, allType0.isNoObjectType());
      assertEquals(false, allType0.isOrdinaryFunction());
      assertEquals(false, allType0.isResolved());
      assertEquals(false, allType0.isFunctionType());
      assertEquals(false, allType0.isEnumElementType());
      assertEquals(false, allType0.isUnionType());
      assertEquals(false, allType0.canBeCalled());
      assertEquals(true, allType0.hasDisplayName());
      assertEquals(false, allType0.isBooleanValueType());
      assertEquals(false, allType0.isVoidType());
      assertEquals(true, allType0.isAllType());
      assertEquals(false, allType0.isNoType());
      assertEquals(false, allType0.isNumberValueType());
      assertEquals(false, allType0.isInterface());
      assertEquals("<Any Type>", allType0.getDisplayName());
      assertEquals(false, allType0.isTemplateType());
      assertEquals(false, allType0.isStringValueType());
      assertEquals(false, allType0.isNoResolvedType());
      assertEquals(false, allType0.isNominalType());
  }

  @Test
  public void test05()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      String string0 = "U:u^SYKlfT{K_-_qXs^";
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, string0);
      assertNotNull(errorFunctionType0);
      assertEquals(false, errorFunctionType0.isBooleanValueType());
      assertNull(errorFunctionType0.getTemplateTypeName());
      assertEquals(false, errorFunctionType0.isReturnTypeInferred());
      assertEquals(true, errorFunctionType0.isFunctionType());
      assertEquals(false, errorFunctionType0.isNoResolvedType());
      assertEquals(false, errorFunctionType0.hasCachedValues());
      assertEquals(true, errorFunctionType0.hasInstanceType());
      assertEquals(false, errorFunctionType0.isUnionType());
      assertEquals(false, errorFunctionType0.isEnumElementType());
      assertEquals(false, errorFunctionType0.isStringValueType());
      assertEquals(false, errorFunctionType0.isAllType());
      assertEquals(false, errorFunctionType0.isVoidType());
      assertEquals(false, errorFunctionType0.isRecordType());
      assertEquals(false, errorFunctionType0.isEnumType());
      assertEquals(false, errorFunctionType0.isNullType());
      assertEquals(false, errorFunctionType0.isNumberValueType());
      assertEquals(true, errorFunctionType0.canBeCalled());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertEquals(3, errorFunctionType0.getMaxArguments());
      assertEquals(false, errorFunctionType0.isTemplateType());
      assertEquals(false, errorFunctionType0.isCheckedUnknownType());
      assertEquals(false, errorFunctionType0.isFunctionPrototypeType());
      assertEquals(false, errorFunctionType0.isNominalType());
      assertEquals(false, errorFunctionType0.isNoType());
      assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      assertEquals(false, errorFunctionType0.isResolved());
      assertEquals(true, errorFunctionType0.isConstructor());
      assertEquals(false, errorFunctionType0.isInterface());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, errorFunctionType0.isNoObjectType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      HashMap<String, RecordTypeBuilder.RecordProperty> hashMap0 = new HashMap<String, RecordTypeBuilder.RecordProperty>();
      assertNotNull(hashMap0);
      assertEquals(true, hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals("{}", hashMap0.toString());
      
      RecordType recordType0 = new RecordType(jSTypeRegistry0, hashMap0);
      assertNotNull(recordType0);
      assertEquals(true, hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals("{}", hashMap0.toString());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, recordType0.isNoObjectType());
      assertEquals(false, recordType0.isNoResolvedType());
      assertEquals(false, recordType0.isFunctionType());
      assertEquals(false, recordType0.isNominalType());
      assertEquals(false, recordType0.isEnumElementType());
      assertEquals(false, recordType0.isVoidType());
      assertEquals(false, recordType0.isNoType());
      assertEquals(false, recordType0.isFunctionPrototypeType());
      assertEquals(false, recordType0.isBooleanValueType());
      assertEquals(false, recordType0.isTemplateType());
      assertEquals(false, recordType0.isInterface());
      assertEquals(false, recordType0.isEnumType());
      assertEquals(BooleanLiteralSet.TRUE, recordType0.getPossibleToBooleanOutcomes());
      assertEquals(false, recordType0.isConstructor());
      assertEquals(false, recordType0.isResolved());
      assertEquals(true, recordType0.isRecordType());
      assertEquals(false, recordType0.isNullType());
      assertEquals(false, recordType0.isNumberValueType());
      assertEquals(false, recordType0.isStringValueType());
      assertEquals(false, recordType0.isOrdinaryFunction());
      assertEquals(false, recordType0.isCheckedUnknownType());
      assertEquals(false, recordType0.isUnionType());
      assertEquals(false, recordType0.isAllType());
      
      JSType.TypePair jSType_TypePair0 = errorFunctionType0.getTypesUnderEquality((JSType) recordType0);
      assertNotNull(jSType_TypePair0);
      assertEquals(false, errorFunctionType0.isBooleanValueType());
      assertNull(errorFunctionType0.getTemplateTypeName());
      assertEquals(false, errorFunctionType0.isReturnTypeInferred());
      assertEquals(true, errorFunctionType0.isFunctionType());
      assertEquals(false, errorFunctionType0.isNoResolvedType());
      assertEquals(true, errorFunctionType0.hasInstanceType());
      assertEquals(false, errorFunctionType0.isUnionType());
      assertEquals(false, errorFunctionType0.isEnumElementType());
      assertEquals(false, errorFunctionType0.isStringValueType());
      assertEquals(false, errorFunctionType0.isAllType());
      assertEquals(false, errorFunctionType0.isVoidType());
      assertEquals(false, errorFunctionType0.isRecordType());
      assertEquals(false, errorFunctionType0.isEnumType());
      assertEquals(false, errorFunctionType0.isNullType());
      assertEquals(true, errorFunctionType0.hasCachedValues());
      assertEquals(false, errorFunctionType0.isNumberValueType());
      assertEquals(true, errorFunctionType0.canBeCalled());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertEquals(3, errorFunctionType0.getMaxArguments());
      assertEquals(false, errorFunctionType0.isTemplateType());
      assertEquals(false, errorFunctionType0.isCheckedUnknownType());
      assertEquals(false, errorFunctionType0.isFunctionPrototypeType());
      assertEquals(false, errorFunctionType0.isNominalType());
      assertEquals(false, errorFunctionType0.isNoType());
      assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      assertEquals(false, errorFunctionType0.isResolved());
      assertEquals(true, errorFunctionType0.isConstructor());
      assertEquals(false, errorFunctionType0.isInterface());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, errorFunctionType0.isNoObjectType());
      assertEquals(true, hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals("{}", hashMap0.toString());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, recordType0.isNoObjectType());
      assertEquals(false, recordType0.isNoResolvedType());
      assertEquals(false, recordType0.isFunctionType());
      assertEquals(false, recordType0.isNominalType());
      assertEquals(false, recordType0.isEnumElementType());
      assertEquals(false, recordType0.isVoidType());
      assertEquals(false, recordType0.isNoType());
      assertEquals(false, recordType0.isFunctionPrototypeType());
      assertEquals(false, recordType0.isBooleanValueType());
      assertEquals(false, recordType0.isTemplateType());
      assertEquals(false, recordType0.isInterface());
      assertEquals(false, recordType0.isEnumType());
      assertEquals(BooleanLiteralSet.TRUE, recordType0.getPossibleToBooleanOutcomes());
      assertEquals(false, recordType0.isConstructor());
      assertEquals(false, recordType0.isResolved());
      assertEquals(true, recordType0.isRecordType());
      assertEquals(false, recordType0.isNullType());
      assertEquals(false, recordType0.isNumberValueType());
      assertEquals(false, recordType0.isStringValueType());
      assertEquals(false, recordType0.isOrdinaryFunction());
      assertEquals(false, recordType0.isCheckedUnknownType());
      assertEquals(false, recordType0.isUnionType());
      assertEquals(false, recordType0.isAllType());
  }

  @Test
  public void test06()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      boolean boolean0 = true;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0, boolean0);
      assertNotNull(jSTypeRegistry0);
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      AllType allType0 = new AllType(jSTypeRegistry0);
      assertNotNull(allType0);
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, allType0.isNullType());
      assertEquals(false, allType0.isOrdinaryFunction());
      assertEquals(false, allType0.isNoResolvedType());
      assertEquals(false, allType0.isNoType());
      assertEquals(false, allType0.isRecordType());
      assertEquals(false, allType0.isNominalType());
      assertEquals(false, allType0.isConstructor());
      assertEquals("*", allType0.toString());
      assertEquals(false, allType0.isFunctionPrototypeType());
      assertEquals(false, allType0.isVoidType());
      assertEquals(false, allType0.isEnumType());
      assertEquals(true, allType0.hasDisplayName());
      assertEquals(false, allType0.isEnumElementType());
      assertEquals(true, allType0.matchesStringContext());
      assertEquals(BooleanLiteralSet.BOTH, allType0.getPossibleToBooleanOutcomes());
      assertEquals("<Any Type>", allType0.getDisplayName());
      assertEquals(false, allType0.isInterface());
      assertEquals(false, allType0.isNoObjectType());
      assertEquals(false, allType0.isUnionType());
      assertEquals(false, allType0.canBeCalled());
      assertEquals(false, allType0.isFunctionType());
      assertEquals(false, allType0.isBooleanValueType());
      assertEquals(false, allType0.isNumberValueType());
      assertEquals(false, allType0.isCheckedUnknownType());
      assertEquals(false, allType0.isResolved());
      assertEquals(true, allType0.matchesObjectContext());
      assertEquals(false, allType0.isTemplateType());
      assertEquals(false, allType0.isStringValueType());
      assertEquals(true, allType0.isAllType());
      
      Node node0 = null;
      String string0 = null;
      FunctionType functionType0 = jSTypeRegistry0.createConstructorType(string0, node0, node0, (JSType) allType0);
      assertNotNull(functionType0);
      assertEquals(false, functionType0.isNullType());
      assertEquals(false, functionType0.isTemplateType());
      assertEquals(false, functionType0.isNoObjectType());
      assertEquals(false, functionType0.isFunctionPrototypeType());
      assertEquals(false, functionType0.isReturnTypeInferred());
      assertEquals(false, functionType0.isNoType());
      assertEquals(false, functionType0.isAllType());
      assertEquals(false, functionType0.isEnumElementType());
      assertEquals(false, functionType0.isBooleanValueType());
      assertEquals(true, functionType0.isFunctionType());
      assertEquals(false, functionType0.isInterface());
      assertEquals(false, functionType0.isOrdinaryFunction());
      assertEquals(false, functionType0.isNoResolvedType());
      assertEquals(true, functionType0.isConstructor());
      assertNull(functionType0.getTemplateTypeName());
      assertEquals(false, functionType0.isResolved());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertEquals(true, functionType0.hasInstanceType());
      assertEquals(false, functionType0.isUnionType());
      assertEquals(false, functionType0.isNumberValueType());
      assertEquals(true, functionType0.canBeCalled());
      assertEquals(false, functionType0.isStringValueType());
      assertEquals(false, functionType0.isRecordType());
      assertEquals(false, functionType0.isVoidType());
      assertEquals(false, functionType0.isCheckedUnknownType());
      assertEquals(false, functionType0.isEnumType());
      assertEquals(false, functionType0.hasCachedValues());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertEquals(false, functionType0.isNominalType());
      assertEquals(2147483647, functionType0.getMaxArguments());
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, allType0.isNullType());
      assertEquals(false, allType0.isOrdinaryFunction());
      assertEquals(false, allType0.isNoResolvedType());
      assertEquals(false, allType0.isNoType());
      assertEquals(false, allType0.isRecordType());
      assertEquals(false, allType0.isNominalType());
      assertEquals(false, allType0.isConstructor());
      assertEquals("*", allType0.toString());
      assertEquals(false, allType0.isFunctionPrototypeType());
      assertEquals(false, allType0.isVoidType());
      assertEquals(false, allType0.isEnumType());
      assertEquals(true, allType0.hasDisplayName());
      assertEquals(false, allType0.isEnumElementType());
      assertEquals(true, allType0.matchesStringContext());
      assertEquals(BooleanLiteralSet.BOTH, allType0.getPossibleToBooleanOutcomes());
      assertEquals("<Any Type>", allType0.getDisplayName());
      assertEquals(false, allType0.isInterface());
      assertEquals(false, allType0.isNoObjectType());
      assertEquals(false, allType0.isUnionType());
      assertEquals(false, allType0.canBeCalled());
      assertEquals(false, allType0.isFunctionType());
      assertEquals(false, allType0.isBooleanValueType());
      assertEquals(false, allType0.isNumberValueType());
      assertEquals(false, allType0.isCheckedUnknownType());
      assertEquals(false, allType0.isResolved());
      assertEquals(true, allType0.matchesObjectContext());
      assertEquals(false, allType0.isTemplateType());
      assertEquals(false, allType0.isStringValueType());
      assertEquals(true, allType0.isAllType());
      
      String string1 = "";
      functionType0.setOwnerFunction(functionType0);
      assertEquals(false, functionType0.isNullType());
      assertEquals(false, functionType0.isTemplateType());
      assertEquals(false, functionType0.isNoObjectType());
      assertEquals(false, functionType0.isReturnTypeInferred());
      assertEquals(false, functionType0.isNoType());
      assertEquals(false, functionType0.isAllType());
      assertEquals(false, functionType0.isEnumElementType());
      assertEquals(false, functionType0.isBooleanValueType());
      assertEquals(true, functionType0.isFunctionPrototypeType());
      assertEquals(true, functionType0.isFunctionType());
      assertEquals(false, functionType0.isInterface());
      assertEquals(false, functionType0.isOrdinaryFunction());
      assertEquals(false, functionType0.isNoResolvedType());
      assertEquals(true, functionType0.isConstructor());
      assertNull(functionType0.getTemplateTypeName());
      assertEquals(false, functionType0.isResolved());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertEquals(true, functionType0.hasInstanceType());
      assertEquals(false, functionType0.isUnionType());
      assertEquals(false, functionType0.isNumberValueType());
      assertEquals(true, functionType0.canBeCalled());
      assertEquals(false, functionType0.isStringValueType());
      assertEquals(false, functionType0.isRecordType());
      assertEquals(false, functionType0.isVoidType());
      assertEquals(false, functionType0.isCheckedUnknownType());
      assertEquals(false, functionType0.isEnumType());
      assertEquals(false, functionType0.hasCachedValues());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertEquals(false, functionType0.isNominalType());
      assertEquals(2147483647, functionType0.getMaxArguments());
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, allType0.isNullType());
      assertEquals(false, allType0.isOrdinaryFunction());
      assertEquals(false, allType0.isNoResolvedType());
      assertEquals(false, allType0.isNoType());
      assertEquals(false, allType0.isRecordType());
      assertEquals(false, allType0.isNominalType());
      assertEquals(false, allType0.isConstructor());
      assertEquals("*", allType0.toString());
      assertEquals(false, allType0.isFunctionPrototypeType());
      assertEquals(false, allType0.isVoidType());
      assertEquals(false, allType0.isEnumType());
      assertEquals(true, allType0.hasDisplayName());
      assertEquals(false, allType0.isEnumElementType());
      assertEquals(true, allType0.matchesStringContext());
      assertEquals(BooleanLiteralSet.BOTH, allType0.getPossibleToBooleanOutcomes());
      assertEquals("<Any Type>", allType0.getDisplayName());
      assertEquals(false, allType0.isInterface());
      assertEquals(false, allType0.isNoObjectType());
      assertEquals(false, allType0.isUnionType());
      assertEquals(false, allType0.canBeCalled());
      assertEquals(false, allType0.isFunctionType());
      assertEquals(false, allType0.isBooleanValueType());
      assertEquals(false, allType0.isNumberValueType());
      assertEquals(false, allType0.isCheckedUnknownType());
      assertEquals(false, allType0.isResolved());
      assertEquals(true, allType0.matchesObjectContext());
      assertEquals(false, allType0.isTemplateType());
      assertEquals(false, allType0.isStringValueType());
      assertEquals(true, allType0.isAllType());
      
      StringType stringType0 = new StringType(jSTypeRegistry0);
      assertNotNull(stringType0);
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, stringType0.isNumberValueType());
      assertEquals(false, stringType0.isOrdinaryFunction());
      assertEquals(false, stringType0.isNullType());
      assertEquals(true, stringType0.matchesStringContext());
      assertEquals(false, stringType0.isFunctionType());
      assertEquals(false, stringType0.isCheckedUnknownType());
      assertEquals(false, stringType0.isInterface());
      assertEquals(true, stringType0.matchesNumberContext());
      assertEquals(false, stringType0.isEnumType());
      assertEquals(true, stringType0.isStringValueType());
      assertEquals(false, stringType0.isRecordType());
      assertEquals(false, stringType0.isConstructor());
      assertEquals(true, stringType0.matchesObjectContext());
      assertEquals(false, stringType0.isEnumElementType());
      assertEquals(false, stringType0.isAllType());
      assertEquals(false, stringType0.isFunctionPrototypeType());
      assertEquals("string", stringType0.toString());
      assertEquals(false, stringType0.isBooleanValueType());
      assertEquals(BooleanLiteralSet.BOTH, stringType0.getPossibleToBooleanOutcomes());
      assertEquals("string", stringType0.getDisplayName());
      assertEquals(false, stringType0.isTemplateType());
      assertEquals(false, stringType0.isNoResolvedType());
      assertEquals(false, stringType0.isResolved());
      assertEquals(false, stringType0.isUnionType());
      assertEquals(false, stringType0.isNoType());
      assertEquals(false, stringType0.isNoObjectType());
      assertEquals(false, stringType0.isNominalType());
      assertEquals(false, stringType0.isVoidType());
      
      // Undeclared exception!
      try {
        boolean boolean1 = functionType0.defineDeclaredProperty(string1, (JSType) stringType0, node0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test07()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      boolean boolean0 = true;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0, boolean0);
      assertNotNull(jSTypeRegistry0);
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      JSTypeNative jSTypeNative0 = JSTypeNative.STRING_OBJECT_FUNCTION_TYPE;
      FunctionType functionType0 = jSTypeRegistry0.getNativeFunctionType(jSTypeNative0);
      assertNotNull(functionType0);
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, functionType0.isNoResolvedType());
      assertEquals(false, functionType0.isEnumElementType());
      assertEquals(true, functionType0.isFunctionType());
      assertEquals(true, functionType0.canBeCalled());
      assertEquals(false, functionType0.isFunctionPrototypeType());
      assertEquals(false, functionType0.isNullType());
      assertEquals(false, functionType0.isCheckedUnknownType());
      assertEquals(false, functionType0.isRecordType());
      assertEquals(1, functionType0.getMaxArguments());
      assertNull(functionType0.getTemplateTypeName());
      assertEquals(false, functionType0.isAllType());
      assertEquals(true, functionType0.isConstructor());
      assertEquals(false, functionType0.isBooleanValueType());
      assertEquals(false, functionType0.isResolved());
      assertEquals(false, functionType0.isEnumType());
      assertEquals(true, functionType0.hasCachedValues());
      assertEquals(false, functionType0.isNoType());
      assertEquals(false, functionType0.isNoObjectType());
      assertEquals(false, functionType0.isNumberValueType());
      assertEquals(false, functionType0.isVoidType());
      assertEquals(false, functionType0.isNominalType());
      assertEquals(false, functionType0.isReturnTypeInferred());
      assertEquals(false, functionType0.isUnionType());
      assertEquals(false, functionType0.isStringValueType());
      assertEquals(true, functionType0.hasInstanceType());
      assertEquals(false, functionType0.isInterface());
      assertEquals(false, functionType0.isTemplateType());
      assertEquals(false, functionType0.isOrdinaryFunction());
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      // Undeclared exception!
      try {
        functionType0.setImplicitPrototype(functionType0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test08()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      boolean boolean0 = false;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0, boolean0);
      assertNotNull(jSTypeRegistry0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      AllType allType0 = new AllType(jSTypeRegistry0);
      assertNotNull(allType0);
      assertEquals(false, allType0.isNullType());
      assertEquals(false, allType0.isNumberValueType());
      assertEquals(true, allType0.isAllType());
      assertEquals(false, allType0.isEnumType());
      assertEquals(false, allType0.isNoType());
      assertEquals("*", allType0.toString());
      assertEquals(false, allType0.isNoResolvedType());
      assertEquals("<Any Type>", allType0.getDisplayName());
      assertEquals(false, allType0.isConstructor());
      assertEquals(false, allType0.isEnumElementType());
      assertEquals(false, allType0.isTemplateType());
      assertEquals(false, allType0.isCheckedUnknownType());
      assertEquals(true, allType0.hasDisplayName());
      assertEquals(BooleanLiteralSet.BOTH, allType0.getPossibleToBooleanOutcomes());
      assertEquals(false, allType0.canBeCalled());
      assertEquals(false, allType0.isStringValueType());
      assertEquals(false, allType0.isInterface());
      assertEquals(false, allType0.isVoidType());
      assertEquals(true, allType0.matchesStringContext());
      assertEquals(false, allType0.isOrdinaryFunction());
      assertEquals(false, allType0.isResolved());
      assertEquals(false, allType0.isNominalType());
      assertEquals(true, allType0.matchesObjectContext());
      assertEquals(false, allType0.isNoObjectType());
      assertEquals(false, allType0.isUnionType());
      assertEquals(false, allType0.isFunctionType());
      assertEquals(false, allType0.isRecordType());
      assertEquals(false, allType0.isBooleanValueType());
      assertEquals(false, allType0.isFunctionPrototypeType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      Node node0 = null;
      String string0 = null;
      FunctionType functionType0 = jSTypeRegistry0.createConstructorType(string0, node0, node0, (JSType) allType0);
      assertNotNull(functionType0);
      assertEquals(false, allType0.isNullType());
      assertEquals(false, allType0.isNumberValueType());
      assertEquals(true, allType0.isAllType());
      assertEquals(false, allType0.isEnumType());
      assertEquals(false, allType0.isNoType());
      assertEquals("*", allType0.toString());
      assertEquals(false, allType0.isNoResolvedType());
      assertEquals("<Any Type>", allType0.getDisplayName());
      assertEquals(false, allType0.isConstructor());
      assertEquals(false, allType0.isEnumElementType());
      assertEquals(false, allType0.isTemplateType());
      assertEquals(false, allType0.isCheckedUnknownType());
      assertEquals(true, allType0.hasDisplayName());
      assertEquals(BooleanLiteralSet.BOTH, allType0.getPossibleToBooleanOutcomes());
      assertEquals(false, allType0.canBeCalled());
      assertEquals(false, allType0.isStringValueType());
      assertEquals(false, allType0.isInterface());
      assertEquals(false, allType0.isVoidType());
      assertEquals(true, allType0.matchesStringContext());
      assertEquals(false, allType0.isOrdinaryFunction());
      assertEquals(false, allType0.isResolved());
      assertEquals(false, allType0.isNominalType());
      assertEquals(true, allType0.matchesObjectContext());
      assertEquals(false, allType0.isNoObjectType());
      assertEquals(false, allType0.isUnionType());
      assertEquals(false, allType0.isFunctionType());
      assertEquals(false, allType0.isRecordType());
      assertEquals(false, allType0.isBooleanValueType());
      assertEquals(false, allType0.isFunctionPrototypeType());
      assertEquals(false, functionType0.isUnionType());
      assertEquals(false, functionType0.isEnumType());
      assertEquals(false, functionType0.isNullType());
      assertEquals(false, functionType0.hasCachedValues());
      assertEquals(false, functionType0.isNominalType());
      assertEquals(true, functionType0.isFunctionType());
      assertEquals(false, functionType0.isNoType());
      assertEquals(false, functionType0.isInterface());
      assertNull(functionType0.getTemplateTypeName());
      assertEquals(false, functionType0.isNumberValueType());
      assertEquals(false, functionType0.isResolved());
      assertEquals(false, functionType0.isVoidType());
      assertEquals(false, functionType0.isStringValueType());
      assertEquals(false, functionType0.isReturnTypeInferred());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertEquals(true, functionType0.hasInstanceType());
      assertEquals(false, functionType0.isAllType());
      assertEquals(false, functionType0.isBooleanValueType());
      assertEquals(false, functionType0.isNoResolvedType());
      assertEquals(true, functionType0.isConstructor());
      assertEquals(true, functionType0.canBeCalled());
      assertEquals(false, functionType0.isCheckedUnknownType());
      assertEquals(false, functionType0.isOrdinaryFunction());
      assertEquals(false, functionType0.isTemplateType());
      assertEquals(false, functionType0.isNoObjectType());
      assertEquals(false, functionType0.isRecordType());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertEquals(false, functionType0.isEnumElementType());
      assertEquals(2147483647, functionType0.getMaxArguments());
      assertEquals(false, functionType0.isFunctionPrototypeType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      String string1 = functionType0.toString();
      assertEquals("function (new:{...}, ...[?]): *", string1);
      assertNotNull(string1);
      assertEquals(false, allType0.isNullType());
      assertEquals(false, allType0.isNumberValueType());
      assertEquals(true, allType0.isAllType());
      assertEquals(false, allType0.isEnumType());
      assertEquals(false, allType0.isNoType());
      assertEquals("*", allType0.toString());
      assertEquals(false, allType0.isNoResolvedType());
      assertEquals("<Any Type>", allType0.getDisplayName());
      assertEquals(false, allType0.isConstructor());
      assertEquals(false, allType0.isEnumElementType());
      assertEquals(false, allType0.isTemplateType());
      assertEquals(false, allType0.isCheckedUnknownType());
      assertEquals(true, allType0.hasDisplayName());
      assertEquals(BooleanLiteralSet.BOTH, allType0.getPossibleToBooleanOutcomes());
      assertEquals(false, allType0.canBeCalled());
      assertEquals(false, allType0.isStringValueType());
      assertEquals(false, allType0.isInterface());
      assertEquals(false, allType0.isVoidType());
      assertEquals(true, allType0.matchesStringContext());
      assertEquals(false, allType0.isOrdinaryFunction());
      assertEquals(false, allType0.isResolved());
      assertEquals(false, allType0.isNominalType());
      assertEquals(true, allType0.matchesObjectContext());
      assertEquals(false, allType0.isNoObjectType());
      assertEquals(false, allType0.isUnionType());
      assertEquals(false, allType0.isFunctionType());
      assertEquals(false, allType0.isRecordType());
      assertEquals(false, allType0.isBooleanValueType());
      assertEquals(false, allType0.isFunctionPrototypeType());
      assertEquals(false, functionType0.isUnionType());
      assertEquals(false, functionType0.isEnumType());
      assertEquals(true, functionType0.hasCachedValues());
      assertEquals(false, functionType0.isNullType());
      assertEquals(false, functionType0.isNominalType());
      assertEquals(true, functionType0.isFunctionType());
      assertEquals(false, functionType0.isNoType());
      assertEquals(false, functionType0.isInterface());
      assertNull(functionType0.getTemplateTypeName());
      assertEquals(false, functionType0.isNumberValueType());
      assertEquals(false, functionType0.isResolved());
      assertEquals(false, functionType0.isVoidType());
      assertEquals(false, functionType0.isStringValueType());
      assertEquals(false, functionType0.isReturnTypeInferred());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertEquals(true, functionType0.hasInstanceType());
      assertEquals(false, functionType0.isAllType());
      assertEquals(false, functionType0.isBooleanValueType());
      assertEquals(false, functionType0.isNoResolvedType());
      assertEquals(true, functionType0.isConstructor());
      assertEquals(true, functionType0.canBeCalled());
      assertEquals(false, functionType0.isCheckedUnknownType());
      assertEquals(false, functionType0.isOrdinaryFunction());
      assertEquals(false, functionType0.isTemplateType());
      assertEquals(false, functionType0.isNoObjectType());
      assertEquals(false, functionType0.isRecordType());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertEquals(false, functionType0.isEnumElementType());
      assertEquals(2147483647, functionType0.getMaxArguments());
      assertEquals(false, functionType0.isFunctionPrototypeType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
  }

  @Test
  public void test09()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      HashMap<String, RecordTypeBuilder.RecordProperty> hashMap0 = new HashMap<String, RecordTypeBuilder.RecordProperty>();
      assertNotNull(hashMap0);
      assertEquals(true, hashMap0.isEmpty());
      assertEquals("{}", hashMap0.toString());
      assertEquals(0, hashMap0.size());
      
      RecordType recordType0 = new RecordType(jSTypeRegistry0, hashMap0);
      assertNotNull(recordType0);
      assertEquals(true, hashMap0.isEmpty());
      assertEquals("{}", hashMap0.toString());
      assertEquals(0, hashMap0.size());
      assertEquals(false, recordType0.isTemplateType());
      assertEquals(false, recordType0.isUnionType());
      assertEquals(false, recordType0.isVoidType());
      assertEquals(false, recordType0.isAllType());
      assertEquals(false, recordType0.isInterface());
      assertEquals(false, recordType0.isNoResolvedType());
      assertEquals(false, recordType0.isNullType());
      assertEquals(false, recordType0.isCheckedUnknownType());
      assertEquals(false, recordType0.isFunctionType());
      assertEquals(false, recordType0.isEnumElementType());
      assertEquals(false, recordType0.isOrdinaryFunction());
      assertEquals(false, recordType0.isNoObjectType());
      assertEquals(false, recordType0.isNoType());
      assertEquals(true, recordType0.isRecordType());
      assertEquals(false, recordType0.isEnumType());
      assertEquals(false, recordType0.isBooleanValueType());
      assertEquals(false, recordType0.isConstructor());
      assertEquals(false, recordType0.isFunctionPrototypeType());
      assertEquals(false, recordType0.isNumberValueType());
      assertEquals(BooleanLiteralSet.TRUE, recordType0.getPossibleToBooleanOutcomes());
      assertEquals(false, recordType0.isResolved());
      assertEquals(false, recordType0.isStringValueType());
      assertEquals(false, recordType0.isNominalType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      JSType jSType0 = recordType0.unboxesTo();
      assertNull(jSType0);
      assertEquals(true, hashMap0.isEmpty());
      assertEquals("{}", hashMap0.toString());
      assertEquals(0, hashMap0.size());
      assertEquals(false, recordType0.isTemplateType());
      assertEquals(false, recordType0.isUnionType());
      assertEquals(false, recordType0.isVoidType());
      assertEquals(false, recordType0.isAllType());
      assertEquals(false, recordType0.isInterface());
      assertEquals(false, recordType0.isNoResolvedType());
      assertEquals(false, recordType0.isNullType());
      assertEquals(false, recordType0.isCheckedUnknownType());
      assertEquals(false, recordType0.isFunctionType());
      assertEquals(false, recordType0.isEnumElementType());
      assertEquals(false, recordType0.isOrdinaryFunction());
      assertEquals(false, recordType0.isNoObjectType());
      assertEquals(false, recordType0.isNoType());
      assertEquals(true, recordType0.isRecordType());
      assertEquals(false, recordType0.isEnumType());
      assertEquals(false, recordType0.isBooleanValueType());
      assertEquals(false, recordType0.isConstructor());
      assertEquals(false, recordType0.isFunctionPrototypeType());
      assertEquals(false, recordType0.isNumberValueType());
      assertEquals(BooleanLiteralSet.TRUE, recordType0.getPossibleToBooleanOutcomes());
      assertEquals(false, recordType0.isResolved());
      assertEquals(false, recordType0.isStringValueType());
      assertEquals(false, recordType0.isNominalType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
  }

  @Test
  public void test10()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      boolean boolean0 = true;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0, boolean0);
      assertNotNull(jSTypeRegistry0);
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      assertNotNull(noResolvedType0);
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(true, noResolvedType0.isConstructor());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertEquals(true, noResolvedType0.matchesObjectContext());
      assertEquals(false, noResolvedType0.isAllType());
      assertEquals(false, noResolvedType0.isBooleanValueType());
      assertEquals(true, noResolvedType0.matchesNumberContext());
      assertEquals(false, noResolvedType0.isNumberValueType());
      assertEquals(false, noResolvedType0.isInterface());
      assertNull(noResolvedType0.getReferenceName());
      assertEquals(false, noResolvedType0.isStringValueType());
      assertEquals(false, noResolvedType0.isFunctionPrototypeType());
      assertEquals(true, noResolvedType0.hasInstanceType());
      assertEquals(false, noResolvedType0.isRecordType());
      assertEquals(false, noResolvedType0.isOrdinaryFunction());
      assertEquals(true, noResolvedType0.canBeCalled());
      assertEquals(false, noResolvedType0.isFunctionType());
      assertEquals(false, noResolvedType0.isResolved());
      assertEquals(false, noResolvedType0.isEnumElementType());
      assertEquals(2147483647, noResolvedType0.getPropertiesCount());
      assertNull(noResolvedType0.getTemplateTypeName());
      assertEquals(true, noResolvedType0.isNullable());
      assertEquals(false, noResolvedType0.isReturnTypeInferred());
      assertEquals(false, noResolvedType0.isNullType());
      assertEquals(false, noResolvedType0.isUnionType());
      assertEquals(false, noResolvedType0.isCheckedUnknownType());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertEquals(true, noResolvedType0.matchesStringContext());
      assertEquals(false, noResolvedType0.hasCachedValues());
      assertEquals(false, noResolvedType0.isEnumType());
      assertEquals(false, noResolvedType0.isNominalType());
      assertEquals(false, noResolvedType0.isTemplateType());
      assertEquals(false, noResolvedType0.isNoObjectType());
      assertEquals(false, noResolvedType0.isVoidType());
      assertEquals(2147483647, noResolvedType0.getMaxArguments());
      
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      assertEquals("[]", linkedList0.toString());
      
      FunctionType functionType0 = jSTypeRegistry0.createFunctionTypeWithVarArgs((JSType) noResolvedType0, (List<JSType>) linkedList0);
      assertNotNull(functionType0);
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, functionType0.isBooleanValueType());
      assertEquals(true, functionType0.isFunctionType());
      assertEquals(false, functionType0.isVoidType());
      assertEquals(false, functionType0.isNoType());
      assertEquals(false, functionType0.isResolved());
      assertEquals(false, functionType0.isStringValueType());
      assertEquals(false, functionType0.isNominalType());
      assertEquals(false, functionType0.isUnionType());
      assertEquals(false, functionType0.isRecordType());
      assertEquals(false, functionType0.isNumberValueType());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, functionType0.isReturnTypeInferred());
      assertEquals(false, functionType0.isEnumElementType());
      assertEquals(false, functionType0.isNullType());
      assertEquals(false, functionType0.isTemplateType());
      assertEquals(true, functionType0.canBeCalled());
      assertEquals(false, functionType0.isFunctionPrototypeType());
      assertEquals(true, functionType0.isOrdinaryFunction());
      assertEquals(false, functionType0.isNoResolvedType());
      assertEquals(false, functionType0.isEnumType());
      assertEquals(false, functionType0.isAllType());
      assertEquals(false, functionType0.isNoObjectType());
      assertEquals(false, functionType0.hasCachedValues());
      assertEquals(false, functionType0.isInterface());
      assertEquals(false, functionType0.hasInstanceType());
      assertEquals(0, functionType0.getMaxArguments());
      assertEquals(false, functionType0.isCheckedUnknownType());
      assertNull(functionType0.getTemplateTypeName());
      assertEquals(false, functionType0.isConstructor());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertEquals(0, linkedList0.size());
      assertEquals("[]", linkedList0.toString());
      assertEquals(true, noResolvedType0.isConstructor());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertEquals(true, noResolvedType0.matchesObjectContext());
      assertEquals(false, noResolvedType0.isAllType());
      assertEquals(false, noResolvedType0.isBooleanValueType());
      assertEquals(true, noResolvedType0.matchesNumberContext());
      assertEquals(false, noResolvedType0.isNumberValueType());
      assertEquals(false, noResolvedType0.isInterface());
      assertNull(noResolvedType0.getReferenceName());
      assertEquals(false, noResolvedType0.isStringValueType());
      assertEquals(false, noResolvedType0.isFunctionPrototypeType());
      assertEquals(true, noResolvedType0.hasInstanceType());
      assertEquals(false, noResolvedType0.isRecordType());
      assertEquals(false, noResolvedType0.isOrdinaryFunction());
      assertEquals(true, noResolvedType0.canBeCalled());
      assertEquals(false, noResolvedType0.isFunctionType());
      assertEquals(false, noResolvedType0.isResolved());
      assertEquals(false, noResolvedType0.isEnumElementType());
      assertEquals(2147483647, noResolvedType0.getPropertiesCount());
      assertNull(noResolvedType0.getTemplateTypeName());
      assertEquals(true, noResolvedType0.isNullable());
      assertEquals(false, noResolvedType0.isReturnTypeInferred());
      assertEquals(false, noResolvedType0.isNullType());
      assertEquals(false, noResolvedType0.isUnionType());
      assertEquals(false, noResolvedType0.isCheckedUnknownType());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertEquals(true, noResolvedType0.matchesStringContext());
      assertEquals(false, noResolvedType0.hasCachedValues());
      assertEquals(false, noResolvedType0.isEnumType());
      assertEquals(false, noResolvedType0.isNominalType());
      assertEquals(false, noResolvedType0.isTemplateType());
      assertEquals(false, noResolvedType0.isNoObjectType());
      assertEquals(false, noResolvedType0.isVoidType());
      assertEquals(2147483647, noResolvedType0.getMaxArguments());
      
      boolean boolean1 = functionType0.matchesNumberContext();
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean0 == boolean1);
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, functionType0.isBooleanValueType());
      assertEquals(true, functionType0.isFunctionType());
      assertEquals(false, functionType0.isVoidType());
      assertEquals(false, functionType0.isNoType());
      assertEquals(false, functionType0.isResolved());
      assertEquals(false, functionType0.isStringValueType());
      assertEquals(false, functionType0.isNominalType());
      assertEquals(false, functionType0.isUnionType());
      assertEquals(false, functionType0.isRecordType());
      assertEquals(false, functionType0.isNumberValueType());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, functionType0.isReturnTypeInferred());
      assertEquals(false, functionType0.isEnumElementType());
      assertEquals(false, functionType0.isNullType());
      assertEquals(false, functionType0.isTemplateType());
      assertEquals(true, functionType0.canBeCalled());
      assertEquals(false, functionType0.isFunctionPrototypeType());
      assertEquals(true, functionType0.isOrdinaryFunction());
      assertEquals(false, functionType0.isNoResolvedType());
      assertEquals(false, functionType0.isEnumType());
      assertEquals(false, functionType0.isAllType());
      assertEquals(false, functionType0.isNoObjectType());
      assertEquals(false, functionType0.hasCachedValues());
      assertEquals(false, functionType0.isInterface());
      assertEquals(false, functionType0.hasInstanceType());
      assertEquals(0, functionType0.getMaxArguments());
      assertEquals(false, functionType0.isCheckedUnknownType());
      assertNull(functionType0.getTemplateTypeName());
      assertEquals(false, functionType0.isConstructor());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertEquals(0, linkedList0.size());
      assertEquals("[]", linkedList0.toString());
      assertEquals(true, noResolvedType0.isConstructor());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertEquals(true, noResolvedType0.matchesObjectContext());
      assertEquals(false, noResolvedType0.isAllType());
      assertEquals(false, noResolvedType0.isBooleanValueType());
      assertEquals(true, noResolvedType0.matchesNumberContext());
      assertEquals(false, noResolvedType0.isNumberValueType());
      assertEquals(false, noResolvedType0.isInterface());
      assertNull(noResolvedType0.getReferenceName());
      assertEquals(false, noResolvedType0.isStringValueType());
      assertEquals(false, noResolvedType0.isFunctionPrototypeType());
      assertEquals(true, noResolvedType0.hasInstanceType());
      assertEquals(false, noResolvedType0.isRecordType());
      assertEquals(false, noResolvedType0.isOrdinaryFunction());
      assertEquals(true, noResolvedType0.canBeCalled());
      assertEquals(false, noResolvedType0.isFunctionType());
      assertEquals(false, noResolvedType0.isResolved());
      assertEquals(false, noResolvedType0.isEnumElementType());
      assertEquals(2147483647, noResolvedType0.getPropertiesCount());
      assertNull(noResolvedType0.getTemplateTypeName());
      assertEquals(true, noResolvedType0.isNullable());
      assertEquals(false, noResolvedType0.isReturnTypeInferred());
      assertEquals(false, noResolvedType0.isNullType());
      assertEquals(false, noResolvedType0.isUnionType());
      assertEquals(false, noResolvedType0.isCheckedUnknownType());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertEquals(true, noResolvedType0.matchesStringContext());
      assertEquals(false, noResolvedType0.hasCachedValues());
      assertEquals(false, noResolvedType0.isEnumType());
      assertEquals(false, noResolvedType0.isNominalType());
      assertEquals(false, noResolvedType0.isTemplateType());
      assertEquals(false, noResolvedType0.isNoObjectType());
      assertEquals(false, noResolvedType0.isVoidType());
      assertEquals(2147483647, noResolvedType0.getMaxArguments());
  }

  @Test
  public void test11()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      String string0 = "z";
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, string0);
      assertNotNull(errorFunctionType0);
      assertEquals(false, errorFunctionType0.isAllType());
      assertEquals(false, errorFunctionType0.isTemplateType());
      assertEquals(false, errorFunctionType0.isCheckedUnknownType());
      assertEquals(true, errorFunctionType0.hasInstanceType());
      assertEquals(false, errorFunctionType0.isReturnTypeInferred());
      assertEquals(false, errorFunctionType0.isStringValueType());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertEquals(false, errorFunctionType0.isNoType());
      assertEquals(false, errorFunctionType0.isVoidType());
      assertEquals(false, errorFunctionType0.isNumberValueType());
      assertEquals(false, errorFunctionType0.hasCachedValues());
      assertEquals(false, errorFunctionType0.isUnionType());
      assertEquals(false, errorFunctionType0.isResolved());
      assertEquals(false, errorFunctionType0.isRecordType());
      assertEquals(false, errorFunctionType0.isFunctionPrototypeType());
      assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      assertEquals(3, errorFunctionType0.getMaxArguments());
      assertEquals(false, errorFunctionType0.isEnumType());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, errorFunctionType0.isInterface());
      assertEquals(false, errorFunctionType0.isBooleanValueType());
      assertEquals(false, errorFunctionType0.isNoResolvedType());
      assertEquals(false, errorFunctionType0.isNullType());
      assertNull(errorFunctionType0.getTemplateTypeName());
      assertEquals(false, errorFunctionType0.isNominalType());
      assertEquals(true, errorFunctionType0.isConstructor());
      assertEquals(false, errorFunctionType0.isEnumElementType());
      assertEquals(true, errorFunctionType0.canBeCalled());
      assertEquals(false, errorFunctionType0.isNoObjectType());
      assertEquals(true, errorFunctionType0.isFunctionType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      boolean boolean0 = errorFunctionType0.matchesStringContext();
      assertFalse(boolean0);
      assertEquals(false, errorFunctionType0.isAllType());
      assertEquals(false, errorFunctionType0.isTemplateType());
      assertEquals(false, errorFunctionType0.isCheckedUnknownType());
      assertEquals(true, errorFunctionType0.hasInstanceType());
      assertEquals(false, errorFunctionType0.isReturnTypeInferred());
      assertEquals(false, errorFunctionType0.isStringValueType());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertEquals(false, errorFunctionType0.isNoType());
      assertEquals(false, errorFunctionType0.isVoidType());
      assertEquals(false, errorFunctionType0.isNumberValueType());
      assertEquals(false, errorFunctionType0.hasCachedValues());
      assertEquals(false, errorFunctionType0.isUnionType());
      assertEquals(false, errorFunctionType0.isResolved());
      assertEquals(false, errorFunctionType0.isRecordType());
      assertEquals(false, errorFunctionType0.isFunctionPrototypeType());
      assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      assertEquals(3, errorFunctionType0.getMaxArguments());
      assertEquals(false, errorFunctionType0.isEnumType());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, errorFunctionType0.isInterface());
      assertEquals(false, errorFunctionType0.isBooleanValueType());
      assertEquals(false, errorFunctionType0.isNoResolvedType());
      assertEquals(false, errorFunctionType0.isNullType());
      assertNull(errorFunctionType0.getTemplateTypeName());
      assertEquals(false, errorFunctionType0.isNominalType());
      assertEquals(true, errorFunctionType0.isConstructor());
      assertEquals(false, errorFunctionType0.isEnumElementType());
      assertEquals(true, errorFunctionType0.canBeCalled());
      assertEquals(false, errorFunctionType0.isNoObjectType());
      assertEquals(true, errorFunctionType0.isFunctionType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
  }

  @Test
  public void test12()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      HashMap<String, RecordTypeBuilder.RecordProperty> hashMap0 = new HashMap<String, RecordTypeBuilder.RecordProperty>();
      assertNotNull(hashMap0);
      assertEquals(true, hashMap0.isEmpty());
      assertEquals("{}", hashMap0.toString());
      assertEquals(0, hashMap0.size());
      
      RecordType recordType0 = jSTypeRegistry0.createRecordType((Map<String, RecordTypeBuilder.RecordProperty>) hashMap0);
      assertNotNull(recordType0);
      assertEquals(false, recordType0.isConstructor());
      assertEquals(BooleanLiteralSet.TRUE, recordType0.getPossibleToBooleanOutcomes());
      assertEquals(false, recordType0.isFunctionType());
      assertEquals(false, recordType0.isVoidType());
      assertEquals(true, recordType0.isRecordType());
      assertEquals(false, recordType0.isOrdinaryFunction());
      assertEquals(false, recordType0.isStringValueType());
      assertEquals(false, recordType0.isNoObjectType());
      assertEquals(false, recordType0.isNullType());
      assertEquals(false, recordType0.isNoResolvedType());
      assertEquals(false, recordType0.isTemplateType());
      assertEquals(false, recordType0.isNoType());
      assertEquals(false, recordType0.isNominalType());
      assertEquals(false, recordType0.isCheckedUnknownType());
      assertEquals(false, recordType0.isResolved());
      assertEquals(false, recordType0.isInterface());
      assertEquals(false, recordType0.isBooleanValueType());
      assertEquals(false, recordType0.isAllType());
      assertEquals(false, recordType0.isNumberValueType());
      assertEquals(false, recordType0.isFunctionPrototypeType());
      assertEquals(false, recordType0.isEnumType());
      assertEquals(false, recordType0.isUnionType());
      assertEquals(false, recordType0.isEnumElementType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(true, hashMap0.isEmpty());
      assertEquals("{}", hashMap0.toString());
      assertEquals(0, hashMap0.size());
      
      boolean boolean0 = recordType0.matchesStringContext();
      assertFalse(boolean0);
      assertEquals(false, recordType0.isConstructor());
      assertEquals(BooleanLiteralSet.TRUE, recordType0.getPossibleToBooleanOutcomes());
      assertEquals(false, recordType0.isFunctionType());
      assertEquals(false, recordType0.isVoidType());
      assertEquals(true, recordType0.isRecordType());
      assertEquals(false, recordType0.isOrdinaryFunction());
      assertEquals(false, recordType0.isStringValueType());
      assertEquals(false, recordType0.isNoObjectType());
      assertEquals(false, recordType0.isNullType());
      assertEquals(false, recordType0.isNoResolvedType());
      assertEquals(false, recordType0.isTemplateType());
      assertEquals(false, recordType0.isNoType());
      assertEquals(false, recordType0.isNominalType());
      assertEquals(false, recordType0.isCheckedUnknownType());
      assertEquals(false, recordType0.isResolved());
      assertEquals(false, recordType0.isInterface());
      assertEquals(false, recordType0.isBooleanValueType());
      assertEquals(false, recordType0.isAllType());
      assertEquals(false, recordType0.isNumberValueType());
      assertEquals(false, recordType0.isFunctionPrototypeType());
      assertEquals(false, recordType0.isEnumType());
      assertEquals(false, recordType0.isUnionType());
      assertEquals(false, recordType0.isEnumElementType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(true, hashMap0.isEmpty());
      assertEquals("{}", hashMap0.toString());
      assertEquals(0, hashMap0.size());
  }

  @Test
  public void test13()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      HashMap<String, RecordTypeBuilder.RecordProperty> hashMap0 = new HashMap<String, RecordTypeBuilder.RecordProperty>();
      assertNotNull(hashMap0);
      assertEquals(0, hashMap0.size());
      assertEquals(true, hashMap0.isEmpty());
      assertEquals("{}", hashMap0.toString());
      
      RecordType recordType0 = jSTypeRegistry0.createRecordType((Map<String, RecordTypeBuilder.RecordProperty>) hashMap0);
      assertNotNull(recordType0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(0, hashMap0.size());
      assertEquals(true, hashMap0.isEmpty());
      assertEquals("{}", hashMap0.toString());
      assertEquals(false, recordType0.isNominalType());
      assertEquals(false, recordType0.isVoidType());
      assertEquals(false, recordType0.isStringValueType());
      assertEquals(false, recordType0.isUnionType());
      assertEquals(false, recordType0.isInterface());
      assertEquals(false, recordType0.isNumberValueType());
      assertEquals(false, recordType0.isFunctionType());
      assertEquals(false, recordType0.isNoResolvedType());
      assertEquals(false, recordType0.isEnumElementType());
      assertEquals(false, recordType0.isCheckedUnknownType());
      assertEquals(false, recordType0.isNoType());
      assertEquals(false, recordType0.isOrdinaryFunction());
      assertEquals(false, recordType0.isConstructor());
      assertEquals(false, recordType0.isBooleanValueType());
      assertEquals(false, recordType0.isFunctionPrototypeType());
      assertEquals(false, recordType0.isTemplateType());
      assertEquals(BooleanLiteralSet.TRUE, recordType0.getPossibleToBooleanOutcomes());
      assertEquals(false, recordType0.isEnumType());
      assertEquals(true, recordType0.isRecordType());
      assertEquals(false, recordType0.isResolved());
      assertEquals(false, recordType0.isNoObjectType());
      assertEquals(false, recordType0.isAllType());
      assertEquals(false, recordType0.isNullType());
      
      String string0 = "com.google.javascript.rhino.jstype.PrototypeObjectType";
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      assertNotNull(jSDocInfo0);
      assertEquals(false, jSDocInfo0.isNoCompile());
      assertEquals(false, jSDocInfo0.isConstant());
      assertEquals(false, jSDocInfo0.hasEnumParameterType());
      assertEquals(false, jSDocInfo0.isConstructor());
      assertNull(jSDocInfo0.getVersion());
      assertNull(jSDocInfo0.getMeaning());
      assertNull(jSDocInfo0.getDescription());
      assertEquals(false, jSDocInfo0.isDefine());
      assertEquals(false, jSDocInfo0.isExterns());
      assertEquals(false, jSDocInfo0.shouldPreserveTry());
      assertEquals(false, jSDocInfo0.hasThisType());
      assertEquals(0, jSDocInfo0.getParameterCount());
      assertEquals(false, jSDocInfo0.hasTypedefType());
      assertNull(jSDocInfo0.getFileOverview());
      assertEquals(false, jSDocInfo0.containsDeclaration());
      assertEquals(false, jSDocInfo0.isOverride());
      assertNull(jSDocInfo0.getVisibility());
      assertEquals(false, jSDocInfo0.isNoSideEffects());
      assertEquals(false, jSDocInfo0.isInterface());
      assertEquals(false, jSDocInfo0.isNoShadow());
      assertNull(jSDocInfo0.getSourceName());
      assertEquals(false, jSDocInfo0.hasBaseType());
      assertNull(jSDocInfo0.getDeprecationReason());
      assertEquals(false, jSDocInfo0.isConsistentIdGenerator());
      assertNull(jSDocInfo0.getLicense());
      assertNull(jSDocInfo0.getReturnDescription());
      assertNull(jSDocInfo0.getBlockDescription());
      assertEquals(0, jSDocInfo0.getExtendedInterfacesCount());
      assertEquals(false, jSDocInfo0.hasReturnType());
      assertEquals(false, jSDocInfo0.isImplicitCast());
      assertEquals(false, jSDocInfo0.isIdGenerator());
      assertEquals(false, jSDocInfo0.isNoTypeCheck());
      assertEquals(false, jSDocInfo0.hasModifies());
      assertEquals(false, jSDocInfo0.hasFileOverview());
      assertEquals(0, jSDocInfo0.getImplementedInterfaceCount());
      assertEquals(false, jSDocInfo0.isJavaDispatch());
      assertEquals(false, jSDocInfo0.isHidden());
      assertEquals("JSDocInfo", jSDocInfo0.toString());
      assertEquals(false, jSDocInfo0.isDeprecated());
      assertNull(jSDocInfo0.getOriginalCommentString());
      assertEquals(false, jSDocInfo0.hasType());
      assertEquals(false, jSDocInfo0.isNoAlias());
      assertNull(jSDocInfo0.getTemplateTypeName());
      assertEquals(false, jSDocInfo0.isExport());
      assertNull(jSDocInfo0.getLendsName());
      
      recordType0.setPropertyJSDocInfo(string0, jSDocInfo0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, jSDocInfo0.isNoCompile());
      assertEquals(false, jSDocInfo0.isConstant());
      assertEquals(false, jSDocInfo0.hasEnumParameterType());
      assertEquals(false, jSDocInfo0.isConstructor());
      assertNull(jSDocInfo0.getVersion());
      assertNull(jSDocInfo0.getMeaning());
      assertNull(jSDocInfo0.getDescription());
      assertEquals(false, jSDocInfo0.isDefine());
      assertEquals(false, jSDocInfo0.isExterns());
      assertEquals(false, jSDocInfo0.shouldPreserveTry());
      assertEquals(false, jSDocInfo0.hasThisType());
      assertEquals(0, jSDocInfo0.getParameterCount());
      assertEquals(false, jSDocInfo0.hasTypedefType());
      assertNull(jSDocInfo0.getFileOverview());
      assertEquals(false, jSDocInfo0.containsDeclaration());
      assertEquals(false, jSDocInfo0.isOverride());
      assertNull(jSDocInfo0.getVisibility());
      assertEquals(false, jSDocInfo0.isNoSideEffects());
      assertEquals(false, jSDocInfo0.isInterface());
      assertEquals(false, jSDocInfo0.isNoShadow());
      assertNull(jSDocInfo0.getSourceName());
      assertEquals(false, jSDocInfo0.hasBaseType());
      assertNull(jSDocInfo0.getDeprecationReason());
      assertEquals(false, jSDocInfo0.isConsistentIdGenerator());
      assertNull(jSDocInfo0.getLicense());
      assertNull(jSDocInfo0.getReturnDescription());
      assertNull(jSDocInfo0.getBlockDescription());
      assertEquals(0, jSDocInfo0.getExtendedInterfacesCount());
      assertEquals(false, jSDocInfo0.hasReturnType());
      assertEquals(false, jSDocInfo0.isImplicitCast());
      assertEquals(false, jSDocInfo0.isIdGenerator());
      assertEquals(false, jSDocInfo0.isNoTypeCheck());
      assertEquals(false, jSDocInfo0.hasModifies());
      assertEquals(false, jSDocInfo0.hasFileOverview());
      assertEquals(0, jSDocInfo0.getImplementedInterfaceCount());
      assertEquals(false, jSDocInfo0.isJavaDispatch());
      assertEquals(false, jSDocInfo0.isHidden());
      assertEquals("JSDocInfo", jSDocInfo0.toString());
      assertEquals(false, jSDocInfo0.isDeprecated());
      assertNull(jSDocInfo0.getOriginalCommentString());
      assertEquals(false, jSDocInfo0.hasType());
      assertEquals(false, jSDocInfo0.isNoAlias());
      assertNull(jSDocInfo0.getTemplateTypeName());
      assertEquals(false, jSDocInfo0.isExport());
      assertNull(jSDocInfo0.getLendsName());
      assertEquals(0, hashMap0.size());
      assertEquals(true, hashMap0.isEmpty());
      assertEquals("{}", hashMap0.toString());
      assertEquals(false, recordType0.isNominalType());
      assertEquals(false, recordType0.isVoidType());
      assertEquals(false, recordType0.isStringValueType());
      assertEquals(false, recordType0.isUnionType());
      assertEquals(false, recordType0.isInterface());
      assertEquals(false, recordType0.isNumberValueType());
      assertEquals(false, recordType0.isFunctionType());
      assertEquals(false, recordType0.isNoResolvedType());
      assertEquals(false, recordType0.isEnumElementType());
      assertEquals(false, recordType0.isCheckedUnknownType());
      assertEquals(false, recordType0.isNoType());
      assertEquals(false, recordType0.isOrdinaryFunction());
      assertEquals(false, recordType0.isConstructor());
      assertEquals(false, recordType0.isBooleanValueType());
      assertEquals(false, recordType0.isFunctionPrototypeType());
      assertEquals(false, recordType0.isTemplateType());
      assertEquals(BooleanLiteralSet.TRUE, recordType0.getPossibleToBooleanOutcomes());
      assertEquals(false, recordType0.isEnumType());
      assertEquals(true, recordType0.isRecordType());
      assertEquals(false, recordType0.isResolved());
      assertEquals(false, recordType0.isNoObjectType());
      assertEquals(false, recordType0.isAllType());
      assertEquals(false, recordType0.isNullType());
  }

  @Test
  public void test14()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      String string0 = "U:u^SYKlfT{K_-_qXs^";
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, string0);
      assertNotNull(errorFunctionType0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, errorFunctionType0.isCheckedUnknownType());
      assertEquals(false, errorFunctionType0.isNoType());
      assertEquals(false, errorFunctionType0.isEnumElementType());
      assertEquals(false, errorFunctionType0.isNullType());
      assertEquals(false, errorFunctionType0.isEnumType());
      assertEquals(false, errorFunctionType0.isNoResolvedType());
      assertEquals(false, errorFunctionType0.isBooleanValueType());
      assertEquals(true, errorFunctionType0.isFunctionType());
      assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      assertEquals(false, errorFunctionType0.isUnionType());
      assertEquals(3, errorFunctionType0.getMaxArguments());
      assertEquals(false, errorFunctionType0.isVoidType());
      assertEquals(false, errorFunctionType0.hasCachedValues());
      assertEquals(true, errorFunctionType0.canBeCalled());
      assertEquals(false, errorFunctionType0.isStringValueType());
      assertEquals(false, errorFunctionType0.isNumberValueType());
      assertNull(errorFunctionType0.getTemplateTypeName());
      assertEquals(true, errorFunctionType0.hasInstanceType());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, errorFunctionType0.isTemplateType());
      assertEquals(false, errorFunctionType0.isNoObjectType());
      assertEquals(false, errorFunctionType0.isNominalType());
      assertEquals(false, errorFunctionType0.isInterface());
      assertEquals(false, errorFunctionType0.isReturnTypeInferred());
      assertEquals(false, errorFunctionType0.isRecordType());
      assertEquals(false, errorFunctionType0.isResolved());
      assertEquals(true, errorFunctionType0.isConstructor());
      assertEquals(false, errorFunctionType0.isAllType());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertEquals(false, errorFunctionType0.isFunctionPrototypeType());
      
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      assertNotNull(noResolvedType0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, noResolvedType0.isUnionType());
      assertEquals(2147483647, noResolvedType0.getPropertiesCount());
      assertEquals(true, noResolvedType0.canBeCalled());
      assertEquals(false, noResolvedType0.isEnumElementType());
      assertEquals(false, noResolvedType0.isNominalType());
      assertEquals(false, noResolvedType0.hasCachedValues());
      assertEquals(false, noResolvedType0.isAllType());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertEquals(false, noResolvedType0.isBooleanValueType());
      assertEquals(true, noResolvedType0.hasInstanceType());
      assertEquals(false, noResolvedType0.isReturnTypeInferred());
      assertEquals(false, noResolvedType0.isOrdinaryFunction());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertEquals(true, noResolvedType0.matchesNumberContext());
      assertEquals(false, noResolvedType0.isCheckedUnknownType());
      assertEquals(true, noResolvedType0.matchesObjectContext());
      assertEquals(false, noResolvedType0.isTemplateType());
      assertNull(noResolvedType0.getReferenceName());
      assertEquals(false, noResolvedType0.isRecordType());
      assertEquals(false, noResolvedType0.isInterface());
      assertEquals(true, noResolvedType0.matchesStringContext());
      assertEquals(2147483647, noResolvedType0.getMaxArguments());
      assertEquals(true, noResolvedType0.isNullable());
      assertEquals(false, noResolvedType0.isFunctionType());
      assertNull(noResolvedType0.getTemplateTypeName());
      assertEquals(false, noResolvedType0.isNullType());
      assertEquals(false, noResolvedType0.isNoObjectType());
      assertEquals(false, noResolvedType0.isFunctionPrototypeType());
      assertEquals(false, noResolvedType0.isEnumType());
      assertEquals(false, noResolvedType0.isResolved());
      assertEquals(true, noResolvedType0.isConstructor());
      assertEquals(false, noResolvedType0.isVoidType());
      assertEquals(false, noResolvedType0.isStringValueType());
      assertEquals(false, noResolvedType0.isNumberValueType());
      
      JSDocInfo jSDocInfo0 = noResolvedType0.getOwnPropertyJSDocInfo(string0);
      assertNull(jSDocInfo0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, noResolvedType0.isUnionType());
      assertEquals(2147483647, noResolvedType0.getPropertiesCount());
      assertEquals(true, noResolvedType0.canBeCalled());
      assertEquals(false, noResolvedType0.isEnumElementType());
      assertEquals(false, noResolvedType0.isNominalType());
      assertEquals(false, noResolvedType0.hasCachedValues());
      assertEquals(false, noResolvedType0.isAllType());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertEquals(false, noResolvedType0.isBooleanValueType());
      assertEquals(true, noResolvedType0.hasInstanceType());
      assertEquals(false, noResolvedType0.isReturnTypeInferred());
      assertEquals(false, noResolvedType0.isOrdinaryFunction());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertEquals(true, noResolvedType0.matchesNumberContext());
      assertEquals(false, noResolvedType0.isCheckedUnknownType());
      assertEquals(true, noResolvedType0.matchesObjectContext());
      assertEquals(false, noResolvedType0.isTemplateType());
      assertNull(noResolvedType0.getReferenceName());
      assertEquals(false, noResolvedType0.isRecordType());
      assertEquals(false, noResolvedType0.isInterface());
      assertEquals(true, noResolvedType0.matchesStringContext());
      assertEquals(2147483647, noResolvedType0.getMaxArguments());
      assertEquals(true, noResolvedType0.isNullable());
      assertEquals(false, noResolvedType0.isFunctionType());
      assertNull(noResolvedType0.getTemplateTypeName());
      assertEquals(false, noResolvedType0.isNullType());
      assertEquals(false, noResolvedType0.isNoObjectType());
      assertEquals(false, noResolvedType0.isFunctionPrototypeType());
      assertEquals(false, noResolvedType0.isEnumType());
      assertEquals(false, noResolvedType0.isResolved());
      assertEquals(true, noResolvedType0.isConstructor());
      assertEquals(false, noResolvedType0.isVoidType());
      assertEquals(false, noResolvedType0.isStringValueType());
      assertEquals(false, noResolvedType0.isNumberValueType());
      
      errorFunctionType0.setPropertyJSDocInfo(string0, jSDocInfo0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, errorFunctionType0.isCheckedUnknownType());
      assertEquals(false, errorFunctionType0.isNoType());
      assertEquals(false, errorFunctionType0.isEnumElementType());
      assertEquals(false, errorFunctionType0.isNullType());
      assertEquals(false, errorFunctionType0.isEnumType());
      assertEquals(false, errorFunctionType0.isNoResolvedType());
      assertEquals(false, errorFunctionType0.isBooleanValueType());
      assertEquals(true, errorFunctionType0.isFunctionType());
      assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      assertEquals(false, errorFunctionType0.isUnionType());
      assertEquals(3, errorFunctionType0.getMaxArguments());
      assertEquals(false, errorFunctionType0.isVoidType());
      assertEquals(false, errorFunctionType0.hasCachedValues());
      assertEquals(true, errorFunctionType0.canBeCalled());
      assertEquals(false, errorFunctionType0.isStringValueType());
      assertEquals(false, errorFunctionType0.isNumberValueType());
      assertNull(errorFunctionType0.getTemplateTypeName());
      assertEquals(true, errorFunctionType0.hasInstanceType());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, errorFunctionType0.isTemplateType());
      assertEquals(false, errorFunctionType0.isNoObjectType());
      assertEquals(false, errorFunctionType0.isNominalType());
      assertEquals(false, errorFunctionType0.isInterface());
      assertEquals(false, errorFunctionType0.isReturnTypeInferred());
      assertEquals(false, errorFunctionType0.isRecordType());
      assertEquals(false, errorFunctionType0.isResolved());
      assertEquals(true, errorFunctionType0.isConstructor());
      assertEquals(false, errorFunctionType0.isAllType());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertEquals(false, errorFunctionType0.isFunctionPrototypeType());
      assertEquals(false, noResolvedType0.isUnionType());
      assertEquals(2147483647, noResolvedType0.getPropertiesCount());
      assertEquals(true, noResolvedType0.canBeCalled());
      assertEquals(false, noResolvedType0.isEnumElementType());
      assertEquals(false, noResolvedType0.isNominalType());
      assertEquals(false, noResolvedType0.hasCachedValues());
      assertEquals(false, noResolvedType0.isAllType());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertEquals(false, noResolvedType0.isBooleanValueType());
      assertEquals(true, noResolvedType0.hasInstanceType());
      assertEquals(false, noResolvedType0.isReturnTypeInferred());
      assertEquals(false, noResolvedType0.isOrdinaryFunction());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertEquals(true, noResolvedType0.matchesNumberContext());
      assertEquals(false, noResolvedType0.isCheckedUnknownType());
      assertEquals(true, noResolvedType0.matchesObjectContext());
      assertEquals(false, noResolvedType0.isTemplateType());
      assertNull(noResolvedType0.getReferenceName());
      assertEquals(false, noResolvedType0.isRecordType());
      assertEquals(false, noResolvedType0.isInterface());
      assertEquals(true, noResolvedType0.matchesStringContext());
      assertEquals(2147483647, noResolvedType0.getMaxArguments());
      assertEquals(true, noResolvedType0.isNullable());
      assertEquals(false, noResolvedType0.isFunctionType());
      assertNull(noResolvedType0.getTemplateTypeName());
      assertEquals(false, noResolvedType0.isNullType());
      assertEquals(false, noResolvedType0.isNoObjectType());
      assertEquals(false, noResolvedType0.isFunctionPrototypeType());
      assertEquals(false, noResolvedType0.isEnumType());
      assertEquals(false, noResolvedType0.isResolved());
      assertEquals(true, noResolvedType0.isConstructor());
      assertEquals(false, noResolvedType0.isVoidType());
      assertEquals(false, noResolvedType0.isStringValueType());
      assertEquals(false, noResolvedType0.isNumberValueType());
  }

  @Test
  public void test15()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      boolean boolean0 = true;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0, boolean0);
      assertNotNull(jSTypeRegistry0);
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      AllType allType0 = new AllType(jSTypeRegistry0);
      assertNotNull(allType0);
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, allType0.isNumberValueType());
      assertEquals(true, allType0.isAllType());
      assertEquals(false, allType0.isNoType());
      assertEquals(false, allType0.isResolved());
      assertEquals(true, allType0.hasDisplayName());
      assertEquals(false, allType0.isStringValueType());
      assertEquals(false, allType0.isUnionType());
      assertEquals(false, allType0.isNoResolvedType());
      assertEquals("*", allType0.toString());
      assertEquals(true, allType0.matchesObjectContext());
      assertEquals(false, allType0.isNoObjectType());
      assertEquals(false, allType0.isCheckedUnknownType());
      assertEquals("<Any Type>", allType0.getDisplayName());
      assertEquals(false, allType0.isNullType());
      assertEquals(true, allType0.matchesStringContext());
      assertEquals(false, allType0.isBooleanValueType());
      assertEquals(false, allType0.isFunctionPrototypeType());
      assertEquals(false, allType0.isRecordType());
      assertEquals(false, allType0.isInterface());
      assertEquals(false, allType0.isVoidType());
      assertEquals(BooleanLiteralSet.BOTH, allType0.getPossibleToBooleanOutcomes());
      assertEquals(false, allType0.isFunctionType());
      assertEquals(false, allType0.isOrdinaryFunction());
      assertEquals(false, allType0.isConstructor());
      assertEquals(false, allType0.isEnumElementType());
      assertEquals(false, allType0.canBeCalled());
      assertEquals(false, allType0.isEnumType());
      assertEquals(false, allType0.isNominalType());
      assertEquals(false, allType0.isTemplateType());
      
      String string0 = "bW@";
      Node node0 = null;
      FunctionType functionType0 = jSTypeRegistry0.createConstructorType(string0, node0, node0, (JSType) allType0);
      assertNotNull(functionType0);
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, functionType0.isUnionType());
      assertEquals(false, functionType0.isAllType());
      assertEquals(false, functionType0.isNoObjectType());
      assertEquals(false, functionType0.isBooleanValueType());
      assertEquals(false, functionType0.isCheckedUnknownType());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertNull(functionType0.getTemplateTypeName());
      assertEquals(2147483647, functionType0.getMaxArguments());
      assertEquals(false, functionType0.isEnumType());
      assertEquals(false, functionType0.isNoResolvedType());
      assertEquals(false, functionType0.isReturnTypeInferred());
      assertEquals(false, functionType0.isInterface());
      assertEquals(false, functionType0.isTemplateType());
      assertEquals(false, functionType0.hasCachedValues());
      assertEquals(false, functionType0.isResolved());
      assertEquals(true, functionType0.isConstructor());
      assertEquals(false, functionType0.isStringValueType());
      assertEquals(true, functionType0.hasInstanceType());
      assertEquals(false, functionType0.isNullType());
      assertEquals(false, functionType0.isNominalType());
      assertEquals(false, functionType0.isVoidType());
      assertEquals(false, functionType0.isEnumElementType());
      assertEquals(true, functionType0.canBeCalled());
      assertEquals(false, functionType0.isNumberValueType());
      assertEquals(false, functionType0.isOrdinaryFunction());
      assertEquals(false, functionType0.isNoType());
      assertEquals(false, functionType0.isFunctionPrototypeType());
      assertEquals(true, functionType0.isFunctionType());
      assertEquals(false, functionType0.isRecordType());
      assertEquals(false, allType0.isNumberValueType());
      assertEquals(true, allType0.isAllType());
      assertEquals(false, allType0.isNoType());
      assertEquals(false, allType0.isResolved());
      assertEquals(true, allType0.hasDisplayName());
      assertEquals(false, allType0.isStringValueType());
      assertEquals(false, allType0.isUnionType());
      assertEquals(false, allType0.isNoResolvedType());
      assertEquals("*", allType0.toString());
      assertEquals(true, allType0.matchesObjectContext());
      assertEquals(false, allType0.isNoObjectType());
      assertEquals(false, allType0.isCheckedUnknownType());
      assertEquals("<Any Type>", allType0.getDisplayName());
      assertEquals(false, allType0.isNullType());
      assertEquals(true, allType0.matchesStringContext());
      assertEquals(false, allType0.isBooleanValueType());
      assertEquals(false, allType0.isFunctionPrototypeType());
      assertEquals(false, allType0.isRecordType());
      assertEquals(false, allType0.isInterface());
      assertEquals(false, allType0.isVoidType());
      assertEquals(BooleanLiteralSet.BOTH, allType0.getPossibleToBooleanOutcomes());
      assertEquals(false, allType0.isFunctionType());
      assertEquals(false, allType0.isOrdinaryFunction());
      assertEquals(false, allType0.isConstructor());
      assertEquals(false, allType0.isEnumElementType());
      assertEquals(false, allType0.canBeCalled());
      assertEquals(false, allType0.isEnumType());
      assertEquals(false, allType0.isNominalType());
      assertEquals(false, allType0.isTemplateType());
      
      boolean boolean1 = functionType0.defineInferredProperty(string0, (JSType) allType0, node0);
      assertTrue(boolean1);
      assertTrue(boolean0 == boolean1);
      assertTrue(boolean1 == boolean0);
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, functionType0.isUnionType());
      assertEquals(false, functionType0.isAllType());
      assertEquals(false, functionType0.isNoObjectType());
      assertEquals(false, functionType0.isBooleanValueType());
      assertEquals(false, functionType0.isCheckedUnknownType());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertNull(functionType0.getTemplateTypeName());
      assertEquals(2147483647, functionType0.getMaxArguments());
      assertEquals(false, functionType0.isEnumType());
      assertEquals(false, functionType0.isNoResolvedType());
      assertEquals(false, functionType0.isReturnTypeInferred());
      assertEquals(false, functionType0.isInterface());
      assertEquals(false, functionType0.isTemplateType());
      assertEquals(false, functionType0.isResolved());
      assertEquals(true, functionType0.isConstructor());
      assertEquals(false, functionType0.isStringValueType());
      assertEquals(true, functionType0.hasInstanceType());
      assertEquals(false, functionType0.isNullType());
      assertEquals(false, functionType0.isNominalType());
      assertEquals(false, functionType0.isVoidType());
      assertEquals(false, functionType0.isEnumElementType());
      assertEquals(true, functionType0.hasCachedValues());
      assertEquals(true, functionType0.canBeCalled());
      assertEquals(false, functionType0.isNumberValueType());
      assertEquals(false, functionType0.isOrdinaryFunction());
      assertEquals(false, functionType0.isNoType());
      assertEquals(false, functionType0.isFunctionPrototypeType());
      assertEquals(true, functionType0.isFunctionType());
      assertEquals(false, functionType0.isRecordType());
      assertEquals(false, allType0.isNumberValueType());
      assertEquals(true, allType0.isAllType());
      assertEquals(false, allType0.isNoType());
      assertEquals(false, allType0.isResolved());
      assertEquals(true, allType0.hasDisplayName());
      assertEquals(false, allType0.isStringValueType());
      assertEquals(false, allType0.isUnionType());
      assertEquals(false, allType0.isNoResolvedType());
      assertEquals("*", allType0.toString());
      assertEquals(true, allType0.matchesObjectContext());
      assertEquals(false, allType0.isNoObjectType());
      assertEquals(false, allType0.isCheckedUnknownType());
      assertEquals("<Any Type>", allType0.getDisplayName());
      assertEquals(false, allType0.isNullType());
      assertEquals(true, allType0.matchesStringContext());
      assertEquals(false, allType0.isBooleanValueType());
      assertEquals(false, allType0.isFunctionPrototypeType());
      assertEquals(false, allType0.isRecordType());
      assertEquals(false, allType0.isInterface());
      assertEquals(false, allType0.isVoidType());
      assertEquals(BooleanLiteralSet.BOTH, allType0.getPossibleToBooleanOutcomes());
      assertEquals(false, allType0.isFunctionType());
      assertEquals(false, allType0.isOrdinaryFunction());
      assertEquals(false, allType0.isConstructor());
      assertEquals(false, allType0.isEnumElementType());
      assertEquals(false, allType0.canBeCalled());
      assertEquals(false, allType0.isEnumType());
      assertEquals(false, allType0.isNominalType());
      assertEquals(false, allType0.isTemplateType());
      
      JSDocInfo jSDocInfo0 = functionType0.getOwnPropertyJSDocInfo(string0);
      assertNull(jSDocInfo0);
      assertTrue(boolean0 == boolean1);
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, functionType0.isUnionType());
      assertEquals(false, functionType0.isAllType());
      assertEquals(false, functionType0.isNoObjectType());
      assertEquals(false, functionType0.isBooleanValueType());
      assertEquals(false, functionType0.isCheckedUnknownType());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertNull(functionType0.getTemplateTypeName());
      assertEquals(2147483647, functionType0.getMaxArguments());
      assertEquals(false, functionType0.isEnumType());
      assertEquals(false, functionType0.isNoResolvedType());
      assertEquals(false, functionType0.isReturnTypeInferred());
      assertEquals(false, functionType0.isInterface());
      assertEquals(false, functionType0.isTemplateType());
      assertEquals(false, functionType0.isResolved());
      assertEquals(true, functionType0.isConstructor());
      assertEquals(false, functionType0.isStringValueType());
      assertEquals(true, functionType0.hasInstanceType());
      assertEquals(false, functionType0.isNullType());
      assertEquals(false, functionType0.isNominalType());
      assertEquals(false, functionType0.isVoidType());
      assertEquals(false, functionType0.isEnumElementType());
      assertEquals(true, functionType0.hasCachedValues());
      assertEquals(true, functionType0.canBeCalled());
      assertEquals(false, functionType0.isNumberValueType());
      assertEquals(false, functionType0.isOrdinaryFunction());
      assertEquals(false, functionType0.isNoType());
      assertEquals(false, functionType0.isFunctionPrototypeType());
      assertEquals(true, functionType0.isFunctionType());
      assertEquals(false, functionType0.isRecordType());
      assertEquals(false, allType0.isNumberValueType());
      assertEquals(true, allType0.isAllType());
      assertEquals(false, allType0.isNoType());
      assertEquals(false, allType0.isResolved());
      assertEquals(true, allType0.hasDisplayName());
      assertEquals(false, allType0.isStringValueType());
      assertEquals(false, allType0.isUnionType());
      assertEquals(false, allType0.isNoResolvedType());
      assertEquals("*", allType0.toString());
      assertEquals(true, allType0.matchesObjectContext());
      assertEquals(false, allType0.isNoObjectType());
      assertEquals(false, allType0.isCheckedUnknownType());
      assertEquals("<Any Type>", allType0.getDisplayName());
      assertEquals(false, allType0.isNullType());
      assertEquals(true, allType0.matchesStringContext());
      assertEquals(false, allType0.isBooleanValueType());
      assertEquals(false, allType0.isFunctionPrototypeType());
      assertEquals(false, allType0.isRecordType());
      assertEquals(false, allType0.isInterface());
      assertEquals(false, allType0.isVoidType());
      assertEquals(BooleanLiteralSet.BOTH, allType0.getPossibleToBooleanOutcomes());
      assertEquals(false, allType0.isFunctionType());
      assertEquals(false, allType0.isOrdinaryFunction());
      assertEquals(false, allType0.isConstructor());
      assertEquals(false, allType0.isEnumElementType());
      assertEquals(false, allType0.canBeCalled());
      assertEquals(false, allType0.isEnumType());
      assertEquals(false, allType0.isNominalType());
      assertEquals(false, allType0.isTemplateType());
  }

  @Test
  public void test16()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      String string0 = "";
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, string0);
      assertNotNull(errorFunctionType0);
      assertEquals(false, errorFunctionType0.isNullType());
      assertEquals(false, errorFunctionType0.isStringValueType());
      assertEquals(false, errorFunctionType0.isFunctionPrototypeType());
      assertEquals(false, errorFunctionType0.isReturnTypeInferred());
      assertEquals(false, errorFunctionType0.isNoType());
      assertEquals(true, errorFunctionType0.canBeCalled());
      assertEquals(false, errorFunctionType0.isResolved());
      assertEquals(false, errorFunctionType0.isAllType());
      assertNull(errorFunctionType0.getTemplateTypeName());
      assertEquals(false, errorFunctionType0.isBooleanValueType());
      assertEquals(false, errorFunctionType0.isInterface());
      assertEquals(3, errorFunctionType0.getMaxArguments());
      assertEquals(false, errorFunctionType0.isEnumType());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, errorFunctionType0.isCheckedUnknownType());
      assertEquals(false, errorFunctionType0.isTemplateType());
      assertEquals(false, errorFunctionType0.isVoidType());
      assertEquals(false, errorFunctionType0.isNoResolvedType());
      assertEquals(false, errorFunctionType0.isRecordType());
      assertEquals(false, errorFunctionType0.isUnionType());
      assertEquals(true, errorFunctionType0.isFunctionType());
      assertEquals(false, errorFunctionType0.isNoObjectType());
      assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertEquals(false, errorFunctionType0.hasCachedValues());
      assertEquals(false, errorFunctionType0.isNominalType());
      assertEquals(true, errorFunctionType0.isConstructor());
      assertEquals(false, errorFunctionType0.isEnumElementType());
      assertEquals(false, errorFunctionType0.isNumberValueType());
      assertEquals(true, errorFunctionType0.hasInstanceType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      JSDocInfo jSDocInfo0 = errorFunctionType0.getOwnPropertyJSDocInfo(string0);
      assertNull(jSDocInfo0);
      assertEquals(false, errorFunctionType0.isNullType());
      assertEquals(false, errorFunctionType0.isStringValueType());
      assertEquals(false, errorFunctionType0.isFunctionPrototypeType());
      assertEquals(false, errorFunctionType0.isReturnTypeInferred());
      assertEquals(false, errorFunctionType0.isNoType());
      assertEquals(true, errorFunctionType0.canBeCalled());
      assertEquals(false, errorFunctionType0.isResolved());
      assertEquals(false, errorFunctionType0.isAllType());
      assertNull(errorFunctionType0.getTemplateTypeName());
      assertEquals(false, errorFunctionType0.isBooleanValueType());
      assertEquals(false, errorFunctionType0.isInterface());
      assertEquals(3, errorFunctionType0.getMaxArguments());
      assertEquals(false, errorFunctionType0.isEnumType());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, errorFunctionType0.isCheckedUnknownType());
      assertEquals(false, errorFunctionType0.isTemplateType());
      assertEquals(false, errorFunctionType0.isVoidType());
      assertEquals(false, errorFunctionType0.isNoResolvedType());
      assertEquals(false, errorFunctionType0.isRecordType());
      assertEquals(false, errorFunctionType0.isUnionType());
      assertEquals(true, errorFunctionType0.isFunctionType());
      assertEquals(false, errorFunctionType0.isNoObjectType());
      assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertEquals(false, errorFunctionType0.hasCachedValues());
      assertEquals(false, errorFunctionType0.isNominalType());
      assertEquals(true, errorFunctionType0.isConstructor());
      assertEquals(false, errorFunctionType0.isEnumElementType());
      assertEquals(false, errorFunctionType0.isNumberValueType());
      assertEquals(true, errorFunctionType0.hasInstanceType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
  }

  @Test
  public void test17()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      boolean boolean0 = false;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0, boolean0);
      assertNotNull(jSTypeRegistry0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      AllType allType0 = new AllType(jSTypeRegistry0);
      assertNotNull(allType0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, allType0.isRecordType());
      assertEquals(false, allType0.isCheckedUnknownType());
      assertEquals(false, allType0.isFunctionType());
      assertEquals(true, allType0.isAllType());
      assertEquals(false, allType0.isNumberValueType());
      assertEquals(false, allType0.isNullType());
      assertEquals(false, allType0.canBeCalled());
      assertEquals(BooleanLiteralSet.BOTH, allType0.getPossibleToBooleanOutcomes());
      assertEquals("<Any Type>", allType0.getDisplayName());
      assertEquals(false, allType0.isInterface());
      assertEquals(false, allType0.isTemplateType());
      assertEquals(true, allType0.matchesObjectContext());
      assertEquals(false, allType0.isNoType());
      assertEquals(false, allType0.isEnumType());
      assertEquals(false, allType0.isStringValueType());
      assertEquals(false, allType0.isNoObjectType());
      assertEquals(false, allType0.isNoResolvedType());
      assertEquals(false, allType0.isConstructor());
      assertEquals(false, allType0.isResolved());
      assertEquals(true, allType0.hasDisplayName());
      assertEquals("*", allType0.toString());
      assertEquals(false, allType0.isNominalType());
      assertEquals(false, allType0.isVoidType());
      assertEquals(false, allType0.isEnumElementType());
      assertEquals(false, allType0.isOrdinaryFunction());
      assertEquals(false, allType0.isUnionType());
      assertEquals(false, allType0.isFunctionPrototypeType());
      assertEquals(true, allType0.matchesStringContext());
      assertEquals(false, allType0.isBooleanValueType());
      
      Node node0 = null;
      String string0 = null;
      FunctionType functionType0 = jSTypeRegistry0.createConstructorType(string0, node0, node0, (JSType) allType0);
      assertNotNull(functionType0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, allType0.isRecordType());
      assertEquals(false, allType0.isCheckedUnknownType());
      assertEquals(false, allType0.isFunctionType());
      assertEquals(true, allType0.isAllType());
      assertEquals(false, allType0.isNumberValueType());
      assertEquals(false, allType0.isNullType());
      assertEquals(false, allType0.canBeCalled());
      assertEquals(BooleanLiteralSet.BOTH, allType0.getPossibleToBooleanOutcomes());
      assertEquals("<Any Type>", allType0.getDisplayName());
      assertEquals(false, allType0.isInterface());
      assertEquals(false, allType0.isTemplateType());
      assertEquals(true, allType0.matchesObjectContext());
      assertEquals(false, allType0.isNoType());
      assertEquals(false, allType0.isEnumType());
      assertEquals(false, allType0.isStringValueType());
      assertEquals(false, allType0.isNoObjectType());
      assertEquals(false, allType0.isNoResolvedType());
      assertEquals(false, allType0.isConstructor());
      assertEquals(false, allType0.isResolved());
      assertEquals(true, allType0.hasDisplayName());
      assertEquals("*", allType0.toString());
      assertEquals(false, allType0.isNominalType());
      assertEquals(false, allType0.isVoidType());
      assertEquals(false, allType0.isEnumElementType());
      assertEquals(false, allType0.isOrdinaryFunction());
      assertEquals(false, allType0.isUnionType());
      assertEquals(false, allType0.isFunctionPrototypeType());
      assertEquals(true, allType0.matchesStringContext());
      assertEquals(false, allType0.isBooleanValueType());
      assertEquals(true, functionType0.hasInstanceType());
      assertEquals(false, functionType0.isEnumType());
      assertEquals(false, functionType0.isRecordType());
      assertEquals(false, functionType0.isBooleanValueType());
      assertEquals(false, functionType0.isFunctionPrototypeType());
      assertEquals(false, functionType0.isOrdinaryFunction());
      assertEquals(false, functionType0.isResolved());
      assertEquals(false, functionType0.isCheckedUnknownType());
      assertEquals(false, functionType0.isTemplateType());
      assertEquals(false, functionType0.hasCachedValues());
      assertEquals(false, functionType0.isAllType());
      assertEquals(true, functionType0.canBeCalled());
      assertEquals(true, functionType0.isFunctionType());
      assertEquals(false, functionType0.isNumberValueType());
      assertEquals(false, functionType0.isNoResolvedType());
      assertEquals(2147483647, functionType0.getMaxArguments());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertEquals(false, functionType0.isVoidType());
      assertEquals(false, functionType0.isNoType());
      assertEquals(false, functionType0.isUnionType());
      assertEquals(false, functionType0.isReturnTypeInferred());
      assertEquals(false, functionType0.isNullType());
      assertEquals(false, functionType0.isStringValueType());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertEquals(true, functionType0.isConstructor());
      assertEquals(false, functionType0.isNoObjectType());
      assertEquals(false, functionType0.isInterface());
      assertEquals(false, functionType0.isEnumElementType());
      assertEquals(false, functionType0.isNominalType());
      assertNull(functionType0.getTemplateTypeName());
      
      String string1 = "com.google.javascript.rhino.jstype.PrototypeObjectType";
      boolean boolean1 = functionType0.defineInferredProperty(string1, (JSType) allType0, node0);
      assertTrue(boolean1);
      assertFalse(boolean0 == boolean1);
      assertFalse(boolean1 == boolean0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, allType0.isRecordType());
      assertEquals(false, allType0.isCheckedUnknownType());
      assertEquals(false, allType0.isFunctionType());
      assertEquals(true, allType0.isAllType());
      assertEquals(false, allType0.isNumberValueType());
      assertEquals(false, allType0.isNullType());
      assertEquals(false, allType0.canBeCalled());
      assertEquals(BooleanLiteralSet.BOTH, allType0.getPossibleToBooleanOutcomes());
      assertEquals("<Any Type>", allType0.getDisplayName());
      assertEquals(false, allType0.isInterface());
      assertEquals(false, allType0.isTemplateType());
      assertEquals(true, allType0.matchesObjectContext());
      assertEquals(false, allType0.isNoType());
      assertEquals(false, allType0.isEnumType());
      assertEquals(false, allType0.isStringValueType());
      assertEquals(false, allType0.isNoObjectType());
      assertEquals(false, allType0.isNoResolvedType());
      assertEquals(false, allType0.isConstructor());
      assertEquals(false, allType0.isResolved());
      assertEquals(true, allType0.hasDisplayName());
      assertEquals("*", allType0.toString());
      assertEquals(false, allType0.isNominalType());
      assertEquals(false, allType0.isVoidType());
      assertEquals(false, allType0.isEnumElementType());
      assertEquals(false, allType0.isOrdinaryFunction());
      assertEquals(false, allType0.isUnionType());
      assertEquals(false, allType0.isFunctionPrototypeType());
      assertEquals(true, allType0.matchesStringContext());
      assertEquals(false, allType0.isBooleanValueType());
      assertEquals(true, functionType0.hasInstanceType());
      assertEquals(false, functionType0.isEnumType());
      assertEquals(false, functionType0.isRecordType());
      assertEquals(false, functionType0.isBooleanValueType());
      assertEquals(false, functionType0.isFunctionPrototypeType());
      assertEquals(false, functionType0.isOrdinaryFunction());
      assertEquals(false, functionType0.isResolved());
      assertEquals(false, functionType0.isCheckedUnknownType());
      assertEquals(true, functionType0.hasCachedValues());
      assertEquals(false, functionType0.isTemplateType());
      assertEquals(false, functionType0.isAllType());
      assertEquals(true, functionType0.canBeCalled());
      assertEquals(true, functionType0.isFunctionType());
      assertEquals(false, functionType0.isNumberValueType());
      assertEquals(false, functionType0.isNoResolvedType());
      assertEquals(2147483647, functionType0.getMaxArguments());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertEquals(false, functionType0.isVoidType());
      assertEquals(false, functionType0.isNoType());
      assertEquals(false, functionType0.isUnionType());
      assertEquals(false, functionType0.isReturnTypeInferred());
      assertEquals(false, functionType0.isNullType());
      assertEquals(false, functionType0.isStringValueType());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertEquals(true, functionType0.isConstructor());
      assertEquals(false, functionType0.isNoObjectType());
      assertEquals(false, functionType0.isInterface());
      assertEquals(false, functionType0.isEnumElementType());
      assertEquals(false, functionType0.isNominalType());
      assertNull(functionType0.getTemplateTypeName());
      
      Node node1 = functionType0.getPropertyNode(string1);
      assertNull(node1);
      assertFalse(boolean0 == boolean1);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, allType0.isRecordType());
      assertEquals(false, allType0.isCheckedUnknownType());
      assertEquals(false, allType0.isFunctionType());
      assertEquals(true, allType0.isAllType());
      assertEquals(false, allType0.isNumberValueType());
      assertEquals(false, allType0.isNullType());
      assertEquals(false, allType0.canBeCalled());
      assertEquals(BooleanLiteralSet.BOTH, allType0.getPossibleToBooleanOutcomes());
      assertEquals("<Any Type>", allType0.getDisplayName());
      assertEquals(false, allType0.isInterface());
      assertEquals(false, allType0.isTemplateType());
      assertEquals(true, allType0.matchesObjectContext());
      assertEquals(false, allType0.isNoType());
      assertEquals(false, allType0.isEnumType());
      assertEquals(false, allType0.isStringValueType());
      assertEquals(false, allType0.isNoObjectType());
      assertEquals(false, allType0.isNoResolvedType());
      assertEquals(false, allType0.isConstructor());
      assertEquals(false, allType0.isResolved());
      assertEquals(true, allType0.hasDisplayName());
      assertEquals("*", allType0.toString());
      assertEquals(false, allType0.isNominalType());
      assertEquals(false, allType0.isVoidType());
      assertEquals(false, allType0.isEnumElementType());
      assertEquals(false, allType0.isOrdinaryFunction());
      assertEquals(false, allType0.isUnionType());
      assertEquals(false, allType0.isFunctionPrototypeType());
      assertEquals(true, allType0.matchesStringContext());
      assertEquals(false, allType0.isBooleanValueType());
      assertEquals(true, functionType0.hasInstanceType());
      assertEquals(false, functionType0.isEnumType());
      assertEquals(false, functionType0.isRecordType());
      assertEquals(false, functionType0.isBooleanValueType());
      assertEquals(false, functionType0.isFunctionPrototypeType());
      assertEquals(false, functionType0.isOrdinaryFunction());
      assertEquals(false, functionType0.isResolved());
      assertEquals(false, functionType0.isCheckedUnknownType());
      assertEquals(true, functionType0.hasCachedValues());
      assertEquals(false, functionType0.isTemplateType());
      assertEquals(false, functionType0.isAllType());
      assertEquals(true, functionType0.canBeCalled());
      assertEquals(true, functionType0.isFunctionType());
      assertEquals(false, functionType0.isNumberValueType());
      assertEquals(false, functionType0.isNoResolvedType());
      assertEquals(2147483647, functionType0.getMaxArguments());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertEquals(false, functionType0.isVoidType());
      assertEquals(false, functionType0.isNoType());
      assertEquals(false, functionType0.isUnionType());
      assertEquals(false, functionType0.isReturnTypeInferred());
      assertEquals(false, functionType0.isNullType());
      assertEquals(false, functionType0.isStringValueType());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertEquals(true, functionType0.isConstructor());
      assertEquals(false, functionType0.isNoObjectType());
      assertEquals(false, functionType0.isInterface());
      assertEquals(false, functionType0.isEnumElementType());
      assertEquals(false, functionType0.isNominalType());
      assertNull(functionType0.getTemplateTypeName());
  }

  @Test
  public void test18()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      String string0 = "";
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, string0);
      assertNotNull(errorFunctionType0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, errorFunctionType0.isRecordType());
      assertEquals(false, errorFunctionType0.isEnumElementType());
      assertEquals(true, errorFunctionType0.isFunctionType());
      assertEquals(false, errorFunctionType0.isNoObjectType());
      assertEquals(false, errorFunctionType0.isUnionType());
      assertEquals(false, errorFunctionType0.isVoidType());
      assertEquals(true, errorFunctionType0.hasInstanceType());
      assertEquals(false, errorFunctionType0.isReturnTypeInferred());
      assertEquals(false, errorFunctionType0.isEnumType());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertEquals(true, errorFunctionType0.isConstructor());
      assertNull(errorFunctionType0.getTemplateTypeName());
      assertEquals(true, errorFunctionType0.canBeCalled());
      assertEquals(false, errorFunctionType0.isNoResolvedType());
      assertEquals(false, errorFunctionType0.isAllType());
      assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      assertEquals(false, errorFunctionType0.isStringValueType());
      assertEquals(false, errorFunctionType0.hasCachedValues());
      assertEquals(false, errorFunctionType0.isNominalType());
      assertEquals(false, errorFunctionType0.isInterface());
      assertEquals(false, errorFunctionType0.isResolved());
      assertEquals(false, errorFunctionType0.isNoType());
      assertEquals(false, errorFunctionType0.isBooleanValueType());
      assertEquals(false, errorFunctionType0.isCheckedUnknownType());
      assertEquals(false, errorFunctionType0.isTemplateType());
      assertEquals(false, errorFunctionType0.isNumberValueType());
      assertEquals(3, errorFunctionType0.getMaxArguments());
      assertEquals(false, errorFunctionType0.isNullType());
      assertEquals(false, errorFunctionType0.isFunctionPrototypeType());
      
      boolean boolean0 = errorFunctionType0.removeProperty(string0);
      assertFalse(boolean0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, errorFunctionType0.isRecordType());
      assertEquals(false, errorFunctionType0.isEnumElementType());
      assertEquals(true, errorFunctionType0.isFunctionType());
      assertEquals(false, errorFunctionType0.isNoObjectType());
      assertEquals(false, errorFunctionType0.isUnionType());
      assertEquals(false, errorFunctionType0.isVoidType());
      assertEquals(true, errorFunctionType0.hasInstanceType());
      assertEquals(false, errorFunctionType0.isReturnTypeInferred());
      assertEquals(false, errorFunctionType0.isEnumType());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertEquals(true, errorFunctionType0.isConstructor());
      assertNull(errorFunctionType0.getTemplateTypeName());
      assertEquals(true, errorFunctionType0.canBeCalled());
      assertEquals(false, errorFunctionType0.isNoResolvedType());
      assertEquals(false, errorFunctionType0.isAllType());
      assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      assertEquals(false, errorFunctionType0.isStringValueType());
      assertEquals(false, errorFunctionType0.hasCachedValues());
      assertEquals(false, errorFunctionType0.isNominalType());
      assertEquals(false, errorFunctionType0.isInterface());
      assertEquals(false, errorFunctionType0.isResolved());
      assertEquals(false, errorFunctionType0.isNoType());
      assertEquals(false, errorFunctionType0.isBooleanValueType());
      assertEquals(false, errorFunctionType0.isCheckedUnknownType());
      assertEquals(false, errorFunctionType0.isTemplateType());
      assertEquals(false, errorFunctionType0.isNumberValueType());
      assertEquals(3, errorFunctionType0.getMaxArguments());
      assertEquals(false, errorFunctionType0.isNullType());
      assertEquals(false, errorFunctionType0.isFunctionPrototypeType());
  }

  @Test
  public void test19()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      boolean boolean0 = true;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0, boolean0);
      assertNotNull(jSTypeRegistry0);
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      AllType allType0 = new AllType(jSTypeRegistry0);
      assertNotNull(allType0);
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, allType0.isResolved());
      assertEquals(false, allType0.isNoType());
      assertEquals(false, allType0.canBeCalled());
      assertEquals(false, allType0.isCheckedUnknownType());
      assertEquals(false, allType0.isConstructor());
      assertEquals(false, allType0.isFunctionType());
      assertEquals(true, allType0.isAllType());
      assertEquals(false, allType0.isEnumElementType());
      assertEquals(false, allType0.isNominalType());
      assertEquals(false, allType0.isVoidType());
      assertEquals(BooleanLiteralSet.BOTH, allType0.getPossibleToBooleanOutcomes());
      assertEquals(false, allType0.isTemplateType());
      assertEquals(true, allType0.matchesStringContext());
      assertEquals(false, allType0.isRecordType());
      assertEquals("*", allType0.toString());
      assertEquals(false, allType0.isStringValueType());
      assertEquals(false, allType0.isInterface());
      assertEquals(false, allType0.isNoObjectType());
      assertEquals(false, allType0.isFunctionPrototypeType());
      assertEquals(false, allType0.isBooleanValueType());
      assertEquals(false, allType0.isEnumType());
      assertEquals(false, allType0.isNullType());
      assertEquals(false, allType0.isOrdinaryFunction());
      assertEquals(true, allType0.matchesObjectContext());
      assertEquals(false, allType0.isNumberValueType());
      assertEquals(false, allType0.isUnionType());
      assertEquals("<Any Type>", allType0.getDisplayName());
      assertEquals(false, allType0.isNoResolvedType());
      assertEquals(true, allType0.hasDisplayName());
      
      String string0 = "bW@";
      Node node0 = null;
      FunctionType functionType0 = jSTypeRegistry0.createConstructorType(string0, node0, node0, (JSType) allType0);
      assertNotNull(functionType0);
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, allType0.isResolved());
      assertEquals(false, allType0.isNoType());
      assertEquals(false, allType0.canBeCalled());
      assertEquals(false, allType0.isCheckedUnknownType());
      assertEquals(false, allType0.isConstructor());
      assertEquals(false, allType0.isFunctionType());
      assertEquals(true, allType0.isAllType());
      assertEquals(false, allType0.isEnumElementType());
      assertEquals(false, allType0.isNominalType());
      assertEquals(false, allType0.isVoidType());
      assertEquals(BooleanLiteralSet.BOTH, allType0.getPossibleToBooleanOutcomes());
      assertEquals(false, allType0.isTemplateType());
      assertEquals(true, allType0.matchesStringContext());
      assertEquals(false, allType0.isRecordType());
      assertEquals("*", allType0.toString());
      assertEquals(false, allType0.isStringValueType());
      assertEquals(false, allType0.isInterface());
      assertEquals(false, allType0.isNoObjectType());
      assertEquals(false, allType0.isFunctionPrototypeType());
      assertEquals(false, allType0.isBooleanValueType());
      assertEquals(false, allType0.isEnumType());
      assertEquals(false, allType0.isNullType());
      assertEquals(false, allType0.isOrdinaryFunction());
      assertEquals(true, allType0.matchesObjectContext());
      assertEquals(false, allType0.isNumberValueType());
      assertEquals(false, allType0.isUnionType());
      assertEquals("<Any Type>", allType0.getDisplayName());
      assertEquals(false, allType0.isNoResolvedType());
      assertEquals(true, allType0.hasDisplayName());
      assertEquals(false, functionType0.isEnumType());
      assertEquals(false, functionType0.isVoidType());
      assertEquals(false, functionType0.isInterface());
      assertEquals(false, functionType0.isCheckedUnknownType());
      assertEquals(false, functionType0.isUnionType());
      assertEquals(false, functionType0.isAllType());
      assertEquals(true, functionType0.isFunctionType());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, functionType0.hasCachedValues());
      assertEquals(false, functionType0.isNoResolvedType());
      assertEquals(false, functionType0.isNullType());
      assertEquals(false, functionType0.isResolved());
      assertEquals(true, functionType0.isConstructor());
      assertEquals(false, functionType0.isNoType());
      assertEquals(true, functionType0.canBeCalled());
      assertEquals(false, functionType0.isReturnTypeInferred());
      assertEquals(false, functionType0.isNumberValueType());
      assertEquals(false, functionType0.isBooleanValueType());
      assertEquals(false, functionType0.isRecordType());
      assertEquals(true, functionType0.hasInstanceType());
      assertEquals(false, functionType0.isStringValueType());
      assertEquals(false, functionType0.isEnumElementType());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertEquals(false, functionType0.isNominalType());
      assertEquals(false, functionType0.isTemplateType());
      assertEquals(false, functionType0.isOrdinaryFunction());
      assertEquals(false, functionType0.isNoObjectType());
      assertEquals(false, functionType0.isFunctionPrototypeType());
      assertNull(functionType0.getTemplateTypeName());
      assertEquals(2147483647, functionType0.getMaxArguments());
      
      boolean boolean1 = functionType0.defineInferredProperty(string0, (JSType) allType0, node0);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean0 == boolean1);
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, allType0.isResolved());
      assertEquals(false, allType0.isNoType());
      assertEquals(false, allType0.canBeCalled());
      assertEquals(false, allType0.isCheckedUnknownType());
      assertEquals(false, allType0.isConstructor());
      assertEquals(false, allType0.isFunctionType());
      assertEquals(true, allType0.isAllType());
      assertEquals(false, allType0.isEnumElementType());
      assertEquals(false, allType0.isNominalType());
      assertEquals(false, allType0.isVoidType());
      assertEquals(BooleanLiteralSet.BOTH, allType0.getPossibleToBooleanOutcomes());
      assertEquals(false, allType0.isTemplateType());
      assertEquals(true, allType0.matchesStringContext());
      assertEquals(false, allType0.isRecordType());
      assertEquals("*", allType0.toString());
      assertEquals(false, allType0.isStringValueType());
      assertEquals(false, allType0.isInterface());
      assertEquals(false, allType0.isNoObjectType());
      assertEquals(false, allType0.isFunctionPrototypeType());
      assertEquals(false, allType0.isBooleanValueType());
      assertEquals(false, allType0.isEnumType());
      assertEquals(false, allType0.isNullType());
      assertEquals(false, allType0.isOrdinaryFunction());
      assertEquals(true, allType0.matchesObjectContext());
      assertEquals(false, allType0.isNumberValueType());
      assertEquals(false, allType0.isUnionType());
      assertEquals("<Any Type>", allType0.getDisplayName());
      assertEquals(false, allType0.isNoResolvedType());
      assertEquals(true, allType0.hasDisplayName());
      assertEquals(false, functionType0.isEnumType());
      assertEquals(false, functionType0.isVoidType());
      assertEquals(false, functionType0.isInterface());
      assertEquals(false, functionType0.isCheckedUnknownType());
      assertEquals(false, functionType0.isUnionType());
      assertEquals(false, functionType0.isAllType());
      assertEquals(true, functionType0.isFunctionType());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, functionType0.isNoResolvedType());
      assertEquals(false, functionType0.isNullType());
      assertEquals(true, functionType0.hasCachedValues());
      assertEquals(false, functionType0.isResolved());
      assertEquals(true, functionType0.isConstructor());
      assertEquals(false, functionType0.isNoType());
      assertEquals(true, functionType0.canBeCalled());
      assertEquals(false, functionType0.isReturnTypeInferred());
      assertEquals(false, functionType0.isNumberValueType());
      assertEquals(false, functionType0.isBooleanValueType());
      assertEquals(false, functionType0.isRecordType());
      assertEquals(true, functionType0.hasInstanceType());
      assertEquals(false, functionType0.isStringValueType());
      assertEquals(false, functionType0.isEnumElementType());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertEquals(false, functionType0.isNominalType());
      assertEquals(false, functionType0.isTemplateType());
      assertEquals(false, functionType0.isOrdinaryFunction());
      assertEquals(false, functionType0.isNoObjectType());
      assertEquals(false, functionType0.isFunctionPrototypeType());
      assertNull(functionType0.getTemplateTypeName());
      assertEquals(2147483647, functionType0.getMaxArguments());
      
      boolean boolean2 = functionType0.isPropertyInExterns(string0);
      assertFalse(boolean2);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean0 == boolean1);
      assertFalse(boolean0 == boolean2);
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, allType0.isResolved());
      assertEquals(false, allType0.isNoType());
      assertEquals(false, allType0.canBeCalled());
      assertEquals(false, allType0.isCheckedUnknownType());
      assertEquals(false, allType0.isConstructor());
      assertEquals(false, allType0.isFunctionType());
      assertEquals(true, allType0.isAllType());
      assertEquals(false, allType0.isEnumElementType());
      assertEquals(false, allType0.isNominalType());
      assertEquals(false, allType0.isVoidType());
      assertEquals(BooleanLiteralSet.BOTH, allType0.getPossibleToBooleanOutcomes());
      assertEquals(false, allType0.isTemplateType());
      assertEquals(true, allType0.matchesStringContext());
      assertEquals(false, allType0.isRecordType());
      assertEquals("*", allType0.toString());
      assertEquals(false, allType0.isStringValueType());
      assertEquals(false, allType0.isInterface());
      assertEquals(false, allType0.isNoObjectType());
      assertEquals(false, allType0.isFunctionPrototypeType());
      assertEquals(false, allType0.isBooleanValueType());
      assertEquals(false, allType0.isEnumType());
      assertEquals(false, allType0.isNullType());
      assertEquals(false, allType0.isOrdinaryFunction());
      assertEquals(true, allType0.matchesObjectContext());
      assertEquals(false, allType0.isNumberValueType());
      assertEquals(false, allType0.isUnionType());
      assertEquals("<Any Type>", allType0.getDisplayName());
      assertEquals(false, allType0.isNoResolvedType());
      assertEquals(true, allType0.hasDisplayName());
      assertEquals(false, functionType0.isEnumType());
      assertEquals(false, functionType0.isVoidType());
      assertEquals(false, functionType0.isInterface());
      assertEquals(false, functionType0.isCheckedUnknownType());
      assertEquals(false, functionType0.isUnionType());
      assertEquals(false, functionType0.isAllType());
      assertEquals(true, functionType0.isFunctionType());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, functionType0.isNoResolvedType());
      assertEquals(false, functionType0.isNullType());
      assertEquals(true, functionType0.hasCachedValues());
      assertEquals(false, functionType0.isResolved());
      assertEquals(true, functionType0.isConstructor());
      assertEquals(false, functionType0.isNoType());
      assertEquals(true, functionType0.canBeCalled());
      assertEquals(false, functionType0.isReturnTypeInferred());
      assertEquals(false, functionType0.isNumberValueType());
      assertEquals(false, functionType0.isBooleanValueType());
      assertEquals(false, functionType0.isRecordType());
      assertEquals(true, functionType0.hasInstanceType());
      assertEquals(false, functionType0.isStringValueType());
      assertEquals(false, functionType0.isEnumElementType());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertEquals(false, functionType0.isNominalType());
      assertEquals(false, functionType0.isTemplateType());
      assertEquals(false, functionType0.isOrdinaryFunction());
      assertEquals(false, functionType0.isNoObjectType());
      assertEquals(false, functionType0.isFunctionPrototypeType());
      assertNull(functionType0.getTemplateTypeName());
      assertEquals(2147483647, functionType0.getMaxArguments());
  }

  @Test
  public void test20()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      String string0 = "U:u^SYKlfT{K_-_qXs^";
      HashMap<String, RecordTypeBuilder.RecordProperty> hashMap0 = new HashMap<String, RecordTypeBuilder.RecordProperty>();
      assertNotNull(hashMap0);
      assertEquals("{}", hashMap0.toString());
      assertEquals(true, hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      RecordType recordType0 = new RecordType(jSTypeRegistry0, hashMap0);
      assertNotNull(recordType0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals("{}", hashMap0.toString());
      assertEquals(true, hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(false, recordType0.isNoType());
      assertEquals(false, recordType0.isConstructor());
      assertEquals(false, recordType0.isAllType());
      assertEquals(false, recordType0.isEnumElementType());
      assertEquals(BooleanLiteralSet.TRUE, recordType0.getPossibleToBooleanOutcomes());
      assertEquals(false, recordType0.isBooleanValueType());
      assertEquals(false, recordType0.isOrdinaryFunction());
      assertEquals(false, recordType0.isFunctionPrototypeType());
      assertEquals(true, recordType0.isRecordType());
      assertEquals(false, recordType0.isTemplateType());
      assertEquals(false, recordType0.isEnumType());
      assertEquals(false, recordType0.isFunctionType());
      assertEquals(false, recordType0.isNoResolvedType());
      assertEquals(false, recordType0.isCheckedUnknownType());
      assertEquals(false, recordType0.isResolved());
      assertEquals(false, recordType0.isNoObjectType());
      assertEquals(false, recordType0.isNullType());
      assertEquals(false, recordType0.isInterface());
      assertEquals(false, recordType0.isStringValueType());
      assertEquals(false, recordType0.isVoidType());
      assertEquals(false, recordType0.isNumberValueType());
      assertEquals(false, recordType0.isNominalType());
      assertEquals(false, recordType0.isUnionType());
      
      boolean boolean0 = recordType0.isPropertyInExterns(string0);
      assertFalse(boolean0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals("{}", hashMap0.toString());
      assertEquals(true, hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(false, recordType0.isNoType());
      assertEquals(false, recordType0.isConstructor());
      assertEquals(false, recordType0.isAllType());
      assertEquals(false, recordType0.isEnumElementType());
      assertEquals(BooleanLiteralSet.TRUE, recordType0.getPossibleToBooleanOutcomes());
      assertEquals(false, recordType0.isBooleanValueType());
      assertEquals(false, recordType0.isOrdinaryFunction());
      assertEquals(false, recordType0.isFunctionPrototypeType());
      assertEquals(true, recordType0.isRecordType());
      assertEquals(false, recordType0.isTemplateType());
      assertEquals(false, recordType0.isEnumType());
      assertEquals(false, recordType0.isFunctionType());
      assertEquals(false, recordType0.isNoResolvedType());
      assertEquals(false, recordType0.isCheckedUnknownType());
      assertEquals(false, recordType0.isResolved());
      assertEquals(false, recordType0.isNoObjectType());
      assertEquals(false, recordType0.isNullType());
      assertEquals(false, recordType0.isInterface());
      assertEquals(false, recordType0.isStringValueType());
      assertEquals(false, recordType0.isVoidType());
      assertEquals(false, recordType0.isNumberValueType());
      assertEquals(false, recordType0.isNominalType());
      assertEquals(false, recordType0.isUnionType());
  }

  @Test
  public void test21()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      String string0 = "com.google.javascript.rhino.jstype.PrototypeObjectType";
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, string0);
      assertNotNull(errorFunctionType0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, errorFunctionType0.isNominalType());
      assertEquals(false, errorFunctionType0.isVoidType());
      assertEquals(false, errorFunctionType0.isResolved());
      assertEquals(true, errorFunctionType0.hasInstanceType());
      assertEquals(false, errorFunctionType0.isFunctionPrototypeType());
      assertEquals(false, errorFunctionType0.isBooleanValueType());
      assertEquals(true, errorFunctionType0.isFunctionType());
      assertEquals(false, errorFunctionType0.isEnumType());
      assertEquals(false, errorFunctionType0.isInterface());
      assertEquals(3, errorFunctionType0.getMaxArguments());
      assertEquals(false, errorFunctionType0.hasCachedValues());
      assertEquals(false, errorFunctionType0.isNoResolvedType());
      assertEquals(false, errorFunctionType0.isNullType());
      assertEquals(false, errorFunctionType0.isStringValueType());
      assertEquals(false, errorFunctionType0.isNumberValueType());
      assertEquals(false, errorFunctionType0.isNoObjectType());
      assertEquals(true, errorFunctionType0.isConstructor());
      assertEquals(false, errorFunctionType0.isNoType());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertEquals(true, errorFunctionType0.canBeCalled());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, errorFunctionType0.isAllType());
      assertEquals(false, errorFunctionType0.isEnumElementType());
      assertEquals(false, errorFunctionType0.isCheckedUnknownType());
      assertEquals(false, errorFunctionType0.isTemplateType());
      assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      assertEquals(false, errorFunctionType0.isRecordType());
      assertNull(errorFunctionType0.getTemplateTypeName());
      assertEquals(false, errorFunctionType0.isUnionType());
      assertEquals(false, errorFunctionType0.isReturnTypeInferred());
      
      boolean boolean0 = errorFunctionType0.isPropertyTypeInferred(string0);
      assertFalse(boolean0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, errorFunctionType0.isNominalType());
      assertEquals(false, errorFunctionType0.isVoidType());
      assertEquals(false, errorFunctionType0.isResolved());
      assertEquals(true, errorFunctionType0.hasInstanceType());
      assertEquals(false, errorFunctionType0.isFunctionPrototypeType());
      assertEquals(false, errorFunctionType0.isBooleanValueType());
      assertEquals(true, errorFunctionType0.isFunctionType());
      assertEquals(false, errorFunctionType0.isEnumType());
      assertEquals(false, errorFunctionType0.isInterface());
      assertEquals(3, errorFunctionType0.getMaxArguments());
      assertEquals(false, errorFunctionType0.hasCachedValues());
      assertEquals(false, errorFunctionType0.isNoResolvedType());
      assertEquals(false, errorFunctionType0.isNullType());
      assertEquals(false, errorFunctionType0.isStringValueType());
      assertEquals(false, errorFunctionType0.isNumberValueType());
      assertEquals(false, errorFunctionType0.isNoObjectType());
      assertEquals(true, errorFunctionType0.isConstructor());
      assertEquals(false, errorFunctionType0.isNoType());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertEquals(true, errorFunctionType0.canBeCalled());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, errorFunctionType0.isAllType());
      assertEquals(false, errorFunctionType0.isEnumElementType());
      assertEquals(false, errorFunctionType0.isCheckedUnknownType());
      assertEquals(false, errorFunctionType0.isTemplateType());
      assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      assertEquals(false, errorFunctionType0.isRecordType());
      assertNull(errorFunctionType0.getTemplateTypeName());
      assertEquals(false, errorFunctionType0.isUnionType());
      assertEquals(false, errorFunctionType0.isReturnTypeInferred());
  }

  @Test
  public void test22()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      boolean boolean0 = false;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0, boolean0);
      assertNotNull(jSTypeRegistry0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      AllType allType0 = new AllType(jSTypeRegistry0);
      assertNotNull(allType0);
      assertEquals(false, allType0.canBeCalled());
      assertEquals(true, allType0.hasDisplayName());
      assertEquals(false, allType0.isCheckedUnknownType());
      assertEquals(false, allType0.isFunctionType());
      assertEquals(true, allType0.isAllType());
      assertEquals(false, allType0.isNumberValueType());
      assertEquals(false, allType0.isInterface());
      assertEquals(false, allType0.isRecordType());
      assertEquals("<Any Type>", allType0.getDisplayName());
      assertEquals(false, allType0.isConstructor());
      assertEquals(false, allType0.isResolved());
      assertEquals(true, allType0.matchesObjectContext());
      assertEquals(false, allType0.isNoType());
      assertEquals(false, allType0.isEnumElementType());
      assertEquals(BooleanLiteralSet.BOTH, allType0.getPossibleToBooleanOutcomes());
      assertEquals(false, allType0.isNoObjectType());
      assertEquals(false, allType0.isNullType());
      assertEquals("*", allType0.toString());
      assertEquals(false, allType0.isEnumType());
      assertEquals(false, allType0.isStringValueType());
      assertEquals(false, allType0.isNoResolvedType());
      assertEquals(false, allType0.isUnionType());
      assertEquals(false, allType0.isBooleanValueType());
      assertEquals(false, allType0.isVoidType());
      assertEquals(false, allType0.isTemplateType());
      assertEquals(false, allType0.isOrdinaryFunction());
      assertEquals(false, allType0.isFunctionPrototypeType());
      assertEquals(false, allType0.isNominalType());
      assertEquals(true, allType0.matchesStringContext());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      Node node0 = null;
      String string0 = null;
      FunctionType functionType0 = jSTypeRegistry0.createConstructorType(string0, node0, node0, (JSType) allType0);
      assertNotNull(functionType0);
      assertEquals(false, allType0.canBeCalled());
      assertEquals(true, allType0.hasDisplayName());
      assertEquals(false, allType0.isCheckedUnknownType());
      assertEquals(false, allType0.isFunctionType());
      assertEquals(true, allType0.isAllType());
      assertEquals(false, allType0.isNumberValueType());
      assertEquals(false, allType0.isInterface());
      assertEquals(false, allType0.isRecordType());
      assertEquals("<Any Type>", allType0.getDisplayName());
      assertEquals(false, allType0.isConstructor());
      assertEquals(false, allType0.isResolved());
      assertEquals(true, allType0.matchesObjectContext());
      assertEquals(false, allType0.isNoType());
      assertEquals(false, allType0.isEnumElementType());
      assertEquals(BooleanLiteralSet.BOTH, allType0.getPossibleToBooleanOutcomes());
      assertEquals(false, allType0.isNoObjectType());
      assertEquals(false, allType0.isNullType());
      assertEquals("*", allType0.toString());
      assertEquals(false, allType0.isEnumType());
      assertEquals(false, allType0.isStringValueType());
      assertEquals(false, allType0.isNoResolvedType());
      assertEquals(false, allType0.isUnionType());
      assertEquals(false, allType0.isBooleanValueType());
      assertEquals(false, allType0.isVoidType());
      assertEquals(false, allType0.isTemplateType());
      assertEquals(false, allType0.isOrdinaryFunction());
      assertEquals(false, allType0.isFunctionPrototypeType());
      assertEquals(false, allType0.isNominalType());
      assertEquals(true, allType0.matchesStringContext());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, functionType0.isStringValueType());
      assertEquals(false, functionType0.isInterface());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertEquals(true, functionType0.isFunctionType());
      assertEquals(false, functionType0.isEnumElementType());
      assertEquals(false, functionType0.hasCachedValues());
      assertEquals(true, functionType0.hasInstanceType());
      assertEquals(false, functionType0.isFunctionPrototypeType());
      assertEquals(false, functionType0.isUnionType());
      assertEquals(false, functionType0.isBooleanValueType());
      assertEquals(false, functionType0.isNoResolvedType());
      assertEquals(false, functionType0.isVoidType());
      assertEquals(false, functionType0.isNumberValueType());
      assertNull(functionType0.getTemplateTypeName());
      assertEquals(false, functionType0.isNominalType());
      assertEquals(false, functionType0.isResolved());
      assertEquals(true, functionType0.isConstructor());
      assertEquals(false, functionType0.isNullType());
      assertEquals(true, functionType0.canBeCalled());
      assertEquals(false, functionType0.isOrdinaryFunction());
      assertEquals(2147483647, functionType0.getMaxArguments());
      assertEquals(false, functionType0.isNoObjectType());
      assertEquals(false, functionType0.isTemplateType());
      assertEquals(false, functionType0.isNoType());
      assertEquals(false, functionType0.isAllType());
      assertEquals(false, functionType0.isCheckedUnknownType());
      assertEquals(false, functionType0.isEnumType());
      assertEquals(false, functionType0.isRecordType());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, functionType0.isReturnTypeInferred());
      
      String string1 = "com.google.javascript.rhino.jstype.PrototypeObjectType";
      boolean boolean1 = functionType0.defineInferredProperty(string1, (JSType) allType0, node0);
      assertTrue(boolean1);
      assertFalse(boolean0 == boolean1);
      assertFalse(boolean1 == boolean0);
      assertEquals(false, allType0.canBeCalled());
      assertEquals(true, allType0.hasDisplayName());
      assertEquals(false, allType0.isCheckedUnknownType());
      assertEquals(false, allType0.isFunctionType());
      assertEquals(true, allType0.isAllType());
      assertEquals(false, allType0.isNumberValueType());
      assertEquals(false, allType0.isInterface());
      assertEquals(false, allType0.isRecordType());
      assertEquals("<Any Type>", allType0.getDisplayName());
      assertEquals(false, allType0.isConstructor());
      assertEquals(false, allType0.isResolved());
      assertEquals(true, allType0.matchesObjectContext());
      assertEquals(false, allType0.isNoType());
      assertEquals(false, allType0.isEnumElementType());
      assertEquals(BooleanLiteralSet.BOTH, allType0.getPossibleToBooleanOutcomes());
      assertEquals(false, allType0.isNoObjectType());
      assertEquals(false, allType0.isNullType());
      assertEquals("*", allType0.toString());
      assertEquals(false, allType0.isEnumType());
      assertEquals(false, allType0.isStringValueType());
      assertEquals(false, allType0.isNoResolvedType());
      assertEquals(false, allType0.isUnionType());
      assertEquals(false, allType0.isBooleanValueType());
      assertEquals(false, allType0.isVoidType());
      assertEquals(false, allType0.isTemplateType());
      assertEquals(false, allType0.isOrdinaryFunction());
      assertEquals(false, allType0.isFunctionPrototypeType());
      assertEquals(false, allType0.isNominalType());
      assertEquals(true, allType0.matchesStringContext());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, functionType0.isStringValueType());
      assertEquals(false, functionType0.isInterface());
      assertEquals(true, functionType0.hasCachedValues());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertEquals(true, functionType0.isFunctionType());
      assertEquals(false, functionType0.isEnumElementType());
      assertEquals(true, functionType0.hasInstanceType());
      assertEquals(false, functionType0.isFunctionPrototypeType());
      assertEquals(false, functionType0.isUnionType());
      assertEquals(false, functionType0.isBooleanValueType());
      assertEquals(false, functionType0.isNoResolvedType());
      assertEquals(false, functionType0.isVoidType());
      assertEquals(false, functionType0.isNumberValueType());
      assertNull(functionType0.getTemplateTypeName());
      assertEquals(false, functionType0.isNominalType());
      assertEquals(false, functionType0.isResolved());
      assertEquals(true, functionType0.isConstructor());
      assertEquals(false, functionType0.isNullType());
      assertEquals(true, functionType0.canBeCalled());
      assertEquals(false, functionType0.isOrdinaryFunction());
      assertEquals(2147483647, functionType0.getMaxArguments());
      assertEquals(false, functionType0.isNoObjectType());
      assertEquals(false, functionType0.isTemplateType());
      assertEquals(false, functionType0.isNoType());
      assertEquals(false, functionType0.isAllType());
      assertEquals(false, functionType0.isCheckedUnknownType());
      assertEquals(false, functionType0.isEnumType());
      assertEquals(false, functionType0.isRecordType());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, functionType0.isReturnTypeInferred());
      
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      assertNotNull(noResolvedType0);
      assertFalse(boolean0 == boolean1);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, noResolvedType0.isVoidType());
      assertEquals(true, noResolvedType0.isNullable());
      assertEquals(2147483647, noResolvedType0.getPropertiesCount());
      assertEquals(false, noResolvedType0.isRecordType());
      assertEquals(false, noResolvedType0.hasCachedValues());
      assertEquals(false, noResolvedType0.isNullType());
      assertEquals(true, noResolvedType0.matchesNumberContext());
      assertNull(noResolvedType0.getReferenceName());
      assertEquals(false, noResolvedType0.isCheckedUnknownType());
      assertEquals(false, noResolvedType0.isTemplateType());
      assertNull(noResolvedType0.getTemplateTypeName());
      assertEquals(false, noResolvedType0.isNominalType());
      assertEquals(false, noResolvedType0.isResolved());
      assertEquals(false, noResolvedType0.isNumberValueType());
      assertEquals(false, noResolvedType0.isBooleanValueType());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertEquals(true, noResolvedType0.hasInstanceType());
      assertEquals(true, noResolvedType0.canBeCalled());
      assertEquals(false, noResolvedType0.isAllType());
      assertEquals(false, noResolvedType0.isUnionType());
      assertEquals(2147483647, noResolvedType0.getMaxArguments());
      assertEquals(false, noResolvedType0.isNoObjectType());
      assertEquals(true, noResolvedType0.isConstructor());
      assertEquals(true, noResolvedType0.matchesStringContext());
      assertEquals(false, noResolvedType0.isEnumElementType());
      assertEquals(false, noResolvedType0.isOrdinaryFunction());
      assertEquals(false, noResolvedType0.isReturnTypeInferred());
      assertEquals(false, noResolvedType0.isInterface());
      assertEquals(true, noResolvedType0.matchesObjectContext());
      assertEquals(false, noResolvedType0.isEnumType());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noResolvedType0.isFunctionType());
      assertEquals(false, noResolvedType0.isFunctionPrototypeType());
      assertEquals(false, noResolvedType0.isStringValueType());
      
      Set<String> set0 = noResolvedType0.getPropertyNames();
      assertNotNull(set0);
      assertFalse(boolean0 == boolean1);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, noResolvedType0.isVoidType());
      assertEquals(true, noResolvedType0.isNullable());
      assertEquals(2147483647, noResolvedType0.getPropertiesCount());
      assertEquals(false, noResolvedType0.isRecordType());
      assertEquals(false, noResolvedType0.hasCachedValues());
      assertEquals(false, noResolvedType0.isNullType());
      assertEquals(true, noResolvedType0.matchesNumberContext());
      assertNull(noResolvedType0.getReferenceName());
      assertEquals(false, noResolvedType0.isCheckedUnknownType());
      assertEquals(false, noResolvedType0.isTemplateType());
      assertNull(noResolvedType0.getTemplateTypeName());
      assertEquals(false, noResolvedType0.isNominalType());
      assertEquals(false, noResolvedType0.isResolved());
      assertEquals(false, noResolvedType0.isNumberValueType());
      assertEquals(false, noResolvedType0.isBooleanValueType());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertEquals(true, noResolvedType0.hasInstanceType());
      assertEquals(true, noResolvedType0.canBeCalled());
      assertEquals(false, noResolvedType0.isAllType());
      assertEquals(false, noResolvedType0.isUnionType());
      assertEquals(2147483647, noResolvedType0.getMaxArguments());
      assertEquals(false, noResolvedType0.isNoObjectType());
      assertEquals(true, noResolvedType0.isConstructor());
      assertEquals(true, noResolvedType0.matchesStringContext());
      assertEquals(false, noResolvedType0.isEnumElementType());
      assertEquals(false, noResolvedType0.isOrdinaryFunction());
      assertEquals(false, noResolvedType0.isReturnTypeInferred());
      assertEquals(false, noResolvedType0.isInterface());
      assertEquals(true, noResolvedType0.matchesObjectContext());
      assertEquals(false, noResolvedType0.isEnumType());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noResolvedType0.isFunctionType());
      assertEquals(false, noResolvedType0.isFunctionPrototypeType());
      assertEquals(false, noResolvedType0.isStringValueType());
      assertEquals(0, set0.size());
      assertEquals(true, set0.isEmpty());
      
      functionType0.collectPropertyNames(set0);
      assertFalse(boolean0 == boolean1);
      assertEquals(false, allType0.canBeCalled());
      assertEquals(true, allType0.hasDisplayName());
      assertEquals(false, allType0.isCheckedUnknownType());
      assertEquals(false, allType0.isFunctionType());
      assertEquals(true, allType0.isAllType());
      assertEquals(false, allType0.isNumberValueType());
      assertEquals(false, allType0.isInterface());
      assertEquals(false, allType0.isRecordType());
      assertEquals("<Any Type>", allType0.getDisplayName());
      assertEquals(false, allType0.isConstructor());
      assertEquals(false, allType0.isResolved());
      assertEquals(true, allType0.matchesObjectContext());
      assertEquals(false, allType0.isNoType());
      assertEquals(false, allType0.isEnumElementType());
      assertEquals(BooleanLiteralSet.BOTH, allType0.getPossibleToBooleanOutcomes());
      assertEquals(false, allType0.isNoObjectType());
      assertEquals(false, allType0.isNullType());
      assertEquals("*", allType0.toString());
      assertEquals(false, allType0.isEnumType());
      assertEquals(false, allType0.isStringValueType());
      assertEquals(false, allType0.isNoResolvedType());
      assertEquals(false, allType0.isUnionType());
      assertEquals(false, allType0.isBooleanValueType());
      assertEquals(false, allType0.isVoidType());
      assertEquals(false, allType0.isTemplateType());
      assertEquals(false, allType0.isOrdinaryFunction());
      assertEquals(false, allType0.isFunctionPrototypeType());
      assertEquals(false, allType0.isNominalType());
      assertEquals(true, allType0.matchesStringContext());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, noResolvedType0.isVoidType());
      assertEquals(true, noResolvedType0.isNullable());
      assertEquals(2147483647, noResolvedType0.getPropertiesCount());
      assertEquals(false, noResolvedType0.isRecordType());
      assertEquals(false, noResolvedType0.hasCachedValues());
      assertEquals(false, noResolvedType0.isNullType());
      assertEquals(true, noResolvedType0.matchesNumberContext());
      assertNull(noResolvedType0.getReferenceName());
      assertEquals(false, noResolvedType0.isCheckedUnknownType());
      assertEquals(false, noResolvedType0.isTemplateType());
      assertNull(noResolvedType0.getTemplateTypeName());
      assertEquals(false, noResolvedType0.isNominalType());
      assertEquals(false, noResolvedType0.isResolved());
      assertEquals(false, noResolvedType0.isNumberValueType());
      assertEquals(false, noResolvedType0.isBooleanValueType());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertEquals(true, noResolvedType0.hasInstanceType());
      assertEquals(true, noResolvedType0.canBeCalled());
      assertEquals(false, noResolvedType0.isAllType());
      assertEquals(false, noResolvedType0.isUnionType());
      assertEquals(2147483647, noResolvedType0.getMaxArguments());
      assertEquals(false, noResolvedType0.isNoObjectType());
      assertEquals(true, noResolvedType0.isConstructor());
      assertEquals(true, noResolvedType0.matchesStringContext());
      assertEquals(false, noResolvedType0.isEnumElementType());
      assertEquals(false, noResolvedType0.isOrdinaryFunction());
      assertEquals(false, noResolvedType0.isReturnTypeInferred());
      assertEquals(false, noResolvedType0.isInterface());
      assertEquals(true, noResolvedType0.matchesObjectContext());
      assertEquals(false, noResolvedType0.isEnumType());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noResolvedType0.isFunctionType());
      assertEquals(false, noResolvedType0.isFunctionPrototypeType());
      assertEquals(false, noResolvedType0.isStringValueType());
      assertEquals(false, set0.isEmpty());
      assertEquals(1, set0.size());
      assertEquals(false, functionType0.isStringValueType());
      assertEquals(false, functionType0.isInterface());
      assertEquals(true, functionType0.hasCachedValues());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertEquals(true, functionType0.isFunctionType());
      assertEquals(false, functionType0.isEnumElementType());
      assertEquals(true, functionType0.hasInstanceType());
      assertEquals(false, functionType0.isFunctionPrototypeType());
      assertEquals(false, functionType0.isUnionType());
      assertEquals(false, functionType0.isBooleanValueType());
      assertEquals(false, functionType0.isNoResolvedType());
      assertEquals(false, functionType0.isVoidType());
      assertEquals(false, functionType0.isNumberValueType());
      assertNull(functionType0.getTemplateTypeName());
      assertEquals(false, functionType0.isNominalType());
      assertEquals(false, functionType0.isResolved());
      assertEquals(true, functionType0.isConstructor());
      assertEquals(false, functionType0.isNullType());
      assertEquals(true, functionType0.canBeCalled());
      assertEquals(false, functionType0.isOrdinaryFunction());
      assertEquals(2147483647, functionType0.getMaxArguments());
      assertEquals(false, functionType0.isNoObjectType());
      assertEquals(false, functionType0.isTemplateType());
      assertEquals(false, functionType0.isNoType());
      assertEquals(false, functionType0.isAllType());
      assertEquals(false, functionType0.isCheckedUnknownType());
      assertEquals(false, functionType0.isEnumType());
      assertEquals(false, functionType0.isRecordType());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, functionType0.isReturnTypeInferred());
  }

  @Test
  public void test23()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      boolean boolean0 = true;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0, boolean0);
      assertNotNull(jSTypeRegistry0);
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      AllType allType0 = new AllType(jSTypeRegistry0);
      assertNotNull(allType0);
      assertEquals(false, allType0.isFunctionPrototypeType());
      assertEquals(true, allType0.matchesObjectContext());
      assertEquals(false, allType0.isNominalType());
      assertEquals(false, allType0.isResolved());
      assertEquals(false, allType0.isRecordType());
      assertEquals(false, allType0.isNumberValueType());
      assertEquals(false, allType0.isVoidType());
      assertEquals(false, allType0.isOrdinaryFunction());
      assertEquals(false, allType0.isCheckedUnknownType());
      assertEquals(false, allType0.isEnumType());
      assertEquals(false, allType0.isStringValueType());
      assertEquals(false, allType0.isNullType());
      assertEquals(false, allType0.isNoResolvedType());
      assertEquals(false, allType0.isBooleanValueType());
      assertEquals(true, allType0.hasDisplayName());
      assertEquals(false, allType0.isConstructor());
      assertEquals(false, allType0.isUnionType());
      assertEquals(false, allType0.canBeCalled());
      assertEquals(false, allType0.isNoObjectType());
      assertEquals("*", allType0.toString());
      assertEquals(true, allType0.matchesStringContext());
      assertEquals("<Any Type>", allType0.getDisplayName());
      assertEquals(false, allType0.isInterface());
      assertEquals(false, allType0.isFunctionType());
      assertEquals(BooleanLiteralSet.BOTH, allType0.getPossibleToBooleanOutcomes());
      assertEquals(false, allType0.isNoType());
      assertEquals(false, allType0.isEnumElementType());
      assertEquals(true, allType0.isAllType());
      assertEquals(false, allType0.isTemplateType());
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      Node node0 = null;
      String string0 = null;
      FunctionType functionType0 = jSTypeRegistry0.createConstructorType(string0, node0, node0, (JSType) allType0);
      assertNotNull(functionType0);
      assertEquals(false, allType0.isFunctionPrototypeType());
      assertEquals(true, allType0.matchesObjectContext());
      assertEquals(false, allType0.isNominalType());
      assertEquals(false, allType0.isResolved());
      assertEquals(false, allType0.isRecordType());
      assertEquals(false, allType0.isNumberValueType());
      assertEquals(false, allType0.isVoidType());
      assertEquals(false, allType0.isOrdinaryFunction());
      assertEquals(false, allType0.isCheckedUnknownType());
      assertEquals(false, allType0.isEnumType());
      assertEquals(false, allType0.isStringValueType());
      assertEquals(false, allType0.isNullType());
      assertEquals(false, allType0.isNoResolvedType());
      assertEquals(false, allType0.isBooleanValueType());
      assertEquals(true, allType0.hasDisplayName());
      assertEquals(false, allType0.isConstructor());
      assertEquals(false, allType0.isUnionType());
      assertEquals(false, allType0.canBeCalled());
      assertEquals(false, allType0.isNoObjectType());
      assertEquals("*", allType0.toString());
      assertEquals(true, allType0.matchesStringContext());
      assertEquals("<Any Type>", allType0.getDisplayName());
      assertEquals(false, allType0.isInterface());
      assertEquals(false, allType0.isFunctionType());
      assertEquals(BooleanLiteralSet.BOTH, allType0.getPossibleToBooleanOutcomes());
      assertEquals(false, allType0.isNoType());
      assertEquals(false, allType0.isEnumElementType());
      assertEquals(true, allType0.isAllType());
      assertEquals(false, allType0.isTemplateType());
      assertEquals(false, functionType0.isFunctionPrototypeType());
      assertEquals(2147483647, functionType0.getMaxArguments());
      assertEquals(false, functionType0.isReturnTypeInferred());
      assertEquals(false, functionType0.isEnumElementType());
      assertEquals(false, functionType0.isAllType());
      assertEquals(true, functionType0.canBeCalled());
      assertEquals(false, functionType0.isOrdinaryFunction());
      assertEquals(false, functionType0.isNoResolvedType());
      assertEquals(true, functionType0.hasInstanceType());
      assertEquals(false, functionType0.isBooleanValueType());
      assertEquals(false, functionType0.isNoObjectType());
      assertEquals(false, functionType0.isUnionType());
      assertEquals(true, functionType0.isConstructor());
      assertEquals(false, functionType0.isVoidType());
      assertEquals(false, functionType0.isInterface());
      assertEquals(false, functionType0.hasCachedValues());
      assertEquals(false, functionType0.isResolved());
      assertEquals(false, functionType0.isCheckedUnknownType());
      assertEquals(false, functionType0.isEnumType());
      assertEquals(false, functionType0.isNullType());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, functionType0.isNoType());
      assertNull(functionType0.getTemplateTypeName());
      assertEquals(false, functionType0.isNominalType());
      assertEquals(false, functionType0.isNumberValueType());
      assertEquals(false, functionType0.isStringValueType());
      assertEquals(false, functionType0.isRecordType());
      assertEquals(false, functionType0.isTemplateType());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertEquals(true, functionType0.isFunctionType());
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      String string1 = "";
      StringType stringType0 = new StringType(jSTypeRegistry0);
      assertNotNull(stringType0);
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, stringType0.isResolved());
      assertEquals(false, stringType0.isNumberValueType());
      assertEquals(true, stringType0.matchesStringContext());
      assertEquals(false, stringType0.isNoObjectType());
      assertEquals(BooleanLiteralSet.BOTH, stringType0.getPossibleToBooleanOutcomes());
      assertEquals(false, stringType0.isEnumType());
      assertEquals("string", stringType0.toString());
      assertEquals(false, stringType0.isTemplateType());
      assertEquals(true, stringType0.matchesNumberContext());
      assertEquals("string", stringType0.getDisplayName());
      assertEquals(false, stringType0.isFunctionPrototypeType());
      assertEquals(false, stringType0.isOrdinaryFunction());
      assertEquals(false, stringType0.isCheckedUnknownType());
      assertEquals(true, stringType0.isStringValueType());
      assertEquals(false, stringType0.isNoType());
      assertEquals(false, stringType0.isEnumElementType());
      assertEquals(false, stringType0.isInterface());
      assertEquals(false, stringType0.isVoidType());
      assertEquals(false, stringType0.isNullType());
      assertEquals(false, stringType0.isUnionType());
      assertEquals(false, stringType0.isFunctionType());
      assertEquals(false, stringType0.isNominalType());
      assertEquals(false, stringType0.isBooleanValueType());
      assertEquals(false, stringType0.isRecordType());
      assertEquals(true, stringType0.matchesObjectContext());
      assertEquals(false, stringType0.isNoResolvedType());
      assertEquals(false, stringType0.isConstructor());
      assertEquals(false, stringType0.isAllType());
      
      boolean boolean1 = functionType0.defineDeclaredProperty(string1, (JSType) stringType0, node0);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean0 == boolean1);
      assertEquals(false, allType0.isFunctionPrototypeType());
      assertEquals(true, allType0.matchesObjectContext());
      assertEquals(false, allType0.isNominalType());
      assertEquals(false, allType0.isResolved());
      assertEquals(false, allType0.isRecordType());
      assertEquals(false, allType0.isNumberValueType());
      assertEquals(false, allType0.isVoidType());
      assertEquals(false, allType0.isOrdinaryFunction());
      assertEquals(false, allType0.isCheckedUnknownType());
      assertEquals(false, allType0.isEnumType());
      assertEquals(false, allType0.isStringValueType());
      assertEquals(false, allType0.isNullType());
      assertEquals(false, allType0.isNoResolvedType());
      assertEquals(false, allType0.isBooleanValueType());
      assertEquals(true, allType0.hasDisplayName());
      assertEquals(false, allType0.isConstructor());
      assertEquals(false, allType0.isUnionType());
      assertEquals(false, allType0.canBeCalled());
      assertEquals(false, allType0.isNoObjectType());
      assertEquals("*", allType0.toString());
      assertEquals(true, allType0.matchesStringContext());
      assertEquals("<Any Type>", allType0.getDisplayName());
      assertEquals(false, allType0.isInterface());
      assertEquals(false, allType0.isFunctionType());
      assertEquals(BooleanLiteralSet.BOTH, allType0.getPossibleToBooleanOutcomes());
      assertEquals(false, allType0.isNoType());
      assertEquals(false, allType0.isEnumElementType());
      assertEquals(true, allType0.isAllType());
      assertEquals(false, allType0.isTemplateType());
      assertEquals(false, functionType0.isFunctionPrototypeType());
      assertEquals(2147483647, functionType0.getMaxArguments());
      assertEquals(false, functionType0.isReturnTypeInferred());
      assertEquals(false, functionType0.isEnumElementType());
      assertEquals(false, functionType0.isAllType());
      assertEquals(true, functionType0.canBeCalled());
      assertEquals(false, functionType0.isOrdinaryFunction());
      assertEquals(false, functionType0.isNoResolvedType());
      assertEquals(true, functionType0.hasInstanceType());
      assertEquals(false, functionType0.isBooleanValueType());
      assertEquals(false, functionType0.isNoObjectType());
      assertEquals(false, functionType0.isUnionType());
      assertEquals(true, functionType0.isConstructor());
      assertEquals(false, functionType0.isVoidType());
      assertEquals(false, functionType0.isInterface());
      assertEquals(false, functionType0.hasCachedValues());
      assertEquals(false, functionType0.isResolved());
      assertEquals(false, functionType0.isCheckedUnknownType());
      assertEquals(false, functionType0.isEnumType());
      assertEquals(false, functionType0.isNullType());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, functionType0.isNoType());
      assertNull(functionType0.getTemplateTypeName());
      assertEquals(false, functionType0.isNominalType());
      assertEquals(false, functionType0.isNumberValueType());
      assertEquals(false, functionType0.isStringValueType());
      assertEquals(false, functionType0.isRecordType());
      assertEquals(false, functionType0.isTemplateType());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertEquals(true, functionType0.isFunctionType());
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, stringType0.isResolved());
      assertEquals(false, stringType0.isNumberValueType());
      assertEquals(true, stringType0.matchesStringContext());
      assertEquals(false, stringType0.isNoObjectType());
      assertEquals(BooleanLiteralSet.BOTH, stringType0.getPossibleToBooleanOutcomes());
      assertEquals(false, stringType0.isEnumType());
      assertEquals("string", stringType0.toString());
      assertEquals(false, stringType0.isTemplateType());
      assertEquals(true, stringType0.matchesNumberContext());
      assertEquals("string", stringType0.getDisplayName());
      assertEquals(false, stringType0.isFunctionPrototypeType());
      assertEquals(false, stringType0.isOrdinaryFunction());
      assertEquals(false, stringType0.isCheckedUnknownType());
      assertEquals(true, stringType0.isStringValueType());
      assertEquals(false, stringType0.isNoType());
      assertEquals(false, stringType0.isEnumElementType());
      assertEquals(false, stringType0.isInterface());
      assertEquals(false, stringType0.isVoidType());
      assertEquals(false, stringType0.isNullType());
      assertEquals(false, stringType0.isUnionType());
      assertEquals(false, stringType0.isFunctionType());
      assertEquals(false, stringType0.isNominalType());
      assertEquals(false, stringType0.isBooleanValueType());
      assertEquals(false, stringType0.isRecordType());
      assertEquals(true, stringType0.matchesObjectContext());
      assertEquals(false, stringType0.isNoResolvedType());
      assertEquals(false, stringType0.isConstructor());
      assertEquals(false, stringType0.isAllType());
      
      boolean boolean2 = functionType0.defineDeclaredProperty(string1, (JSType) functionType0, node0);
      assertFalse(boolean2);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean0 == boolean2);
      assertTrue(boolean0 == boolean1);
      assertEquals(false, allType0.isFunctionPrototypeType());
      assertEquals(true, allType0.matchesObjectContext());
      assertEquals(false, allType0.isNominalType());
      assertEquals(false, allType0.isResolved());
      assertEquals(false, allType0.isRecordType());
      assertEquals(false, allType0.isNumberValueType());
      assertEquals(false, allType0.isVoidType());
      assertEquals(false, allType0.isOrdinaryFunction());
      assertEquals(false, allType0.isCheckedUnknownType());
      assertEquals(false, allType0.isEnumType());
      assertEquals(false, allType0.isStringValueType());
      assertEquals(false, allType0.isNullType());
      assertEquals(false, allType0.isNoResolvedType());
      assertEquals(false, allType0.isBooleanValueType());
      assertEquals(true, allType0.hasDisplayName());
      assertEquals(false, allType0.isConstructor());
      assertEquals(false, allType0.isUnionType());
      assertEquals(false, allType0.canBeCalled());
      assertEquals(false, allType0.isNoObjectType());
      assertEquals("*", allType0.toString());
      assertEquals(true, allType0.matchesStringContext());
      assertEquals("<Any Type>", allType0.getDisplayName());
      assertEquals(false, allType0.isInterface());
      assertEquals(false, allType0.isFunctionType());
      assertEquals(BooleanLiteralSet.BOTH, allType0.getPossibleToBooleanOutcomes());
      assertEquals(false, allType0.isNoType());
      assertEquals(false, allType0.isEnumElementType());
      assertEquals(true, allType0.isAllType());
      assertEquals(false, allType0.isTemplateType());
      assertEquals(false, functionType0.isFunctionPrototypeType());
      assertEquals(2147483647, functionType0.getMaxArguments());
      assertEquals(false, functionType0.isReturnTypeInferred());
      assertEquals(false, functionType0.isEnumElementType());
      assertEquals(false, functionType0.isAllType());
      assertEquals(true, functionType0.canBeCalled());
      assertEquals(false, functionType0.isOrdinaryFunction());
      assertEquals(true, functionType0.hasCachedValues());
      assertEquals(false, functionType0.isNoResolvedType());
      assertEquals(true, functionType0.hasInstanceType());
      assertEquals(false, functionType0.isBooleanValueType());
      assertEquals(false, functionType0.isNoObjectType());
      assertEquals(false, functionType0.isUnionType());
      assertEquals(true, functionType0.isConstructor());
      assertEquals(false, functionType0.isVoidType());
      assertEquals(false, functionType0.isInterface());
      assertEquals(false, functionType0.isResolved());
      assertEquals(false, functionType0.isCheckedUnknownType());
      assertEquals(false, functionType0.isEnumType());
      assertEquals(false, functionType0.isNullType());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, functionType0.isNoType());
      assertNull(functionType0.getTemplateTypeName());
      assertEquals(false, functionType0.isNominalType());
      assertEquals(false, functionType0.isNumberValueType());
      assertEquals(false, functionType0.isStringValueType());
      assertEquals(false, functionType0.isRecordType());
      assertEquals(false, functionType0.isTemplateType());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertEquals(true, functionType0.isFunctionType());
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
  }

  @Test
  public void test24()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      String string0 = "U:u^SYKlfT{K_-_qXs^";
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      assertNotNull(noResolvedType0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, noResolvedType0.isFunctionPrototypeType());
      assertEquals(false, noResolvedType0.isInterface());
      assertEquals(true, noResolvedType0.hasInstanceType());
      assertEquals(false, noResolvedType0.isEnumType());
      assertEquals(false, noResolvedType0.isReturnTypeInferred());
      assertEquals(false, noResolvedType0.isNullType());
      assertEquals(false, noResolvedType0.isResolved());
      assertNull(noResolvedType0.getTemplateTypeName());
      assertEquals(false, noResolvedType0.hasCachedValues());
      assertEquals(false, noResolvedType0.isAllType());
      assertEquals(false, noResolvedType0.isCheckedUnknownType());
      assertEquals(false, noResolvedType0.isRecordType());
      assertEquals(true, noResolvedType0.matchesStringContext());
      assertEquals(2147483647, noResolvedType0.getPropertiesCount());
      assertEquals(true, noResolvedType0.matchesObjectContext());
      assertEquals(2147483647, noResolvedType0.getMaxArguments());
      assertEquals(false, noResolvedType0.isVoidType());
      assertEquals(false, noResolvedType0.isTemplateType());
      assertEquals(false, noResolvedType0.isOrdinaryFunction());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertEquals(false, noResolvedType0.isBooleanValueType());
      assertEquals(true, noResolvedType0.matchesNumberContext());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noResolvedType0.isUnionType());
      assertNull(noResolvedType0.getReferenceName());
      assertEquals(false, noResolvedType0.isEnumElementType());
      assertEquals(false, noResolvedType0.isNominalType());
      assertEquals(true, noResolvedType0.canBeCalled());
      assertEquals(false, noResolvedType0.isNumberValueType());
      assertEquals(true, noResolvedType0.isConstructor());
      assertEquals(false, noResolvedType0.isStringValueType());
      assertEquals(false, noResolvedType0.isNoObjectType());
      assertEquals(true, noResolvedType0.isNullable());
      assertEquals(false, noResolvedType0.isFunctionType());
      
      boolean boolean0 = noResolvedType0.isPropertyTypeDeclared(string0);
      assertFalse(boolean0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, noResolvedType0.isFunctionPrototypeType());
      assertEquals(false, noResolvedType0.isInterface());
      assertEquals(true, noResolvedType0.hasInstanceType());
      assertEquals(false, noResolvedType0.isEnumType());
      assertEquals(false, noResolvedType0.isReturnTypeInferred());
      assertEquals(false, noResolvedType0.isNullType());
      assertEquals(false, noResolvedType0.isResolved());
      assertNull(noResolvedType0.getTemplateTypeName());
      assertEquals(false, noResolvedType0.hasCachedValues());
      assertEquals(false, noResolvedType0.isAllType());
      assertEquals(false, noResolvedType0.isCheckedUnknownType());
      assertEquals(false, noResolvedType0.isRecordType());
      assertEquals(true, noResolvedType0.matchesStringContext());
      assertEquals(2147483647, noResolvedType0.getPropertiesCount());
      assertEquals(true, noResolvedType0.matchesObjectContext());
      assertEquals(2147483647, noResolvedType0.getMaxArguments());
      assertEquals(false, noResolvedType0.isVoidType());
      assertEquals(false, noResolvedType0.isTemplateType());
      assertEquals(false, noResolvedType0.isOrdinaryFunction());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertEquals(false, noResolvedType0.isBooleanValueType());
      assertEquals(true, noResolvedType0.matchesNumberContext());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noResolvedType0.isUnionType());
      assertNull(noResolvedType0.getReferenceName());
      assertEquals(false, noResolvedType0.isEnumElementType());
      assertEquals(false, noResolvedType0.isNominalType());
      assertEquals(true, noResolvedType0.canBeCalled());
      assertEquals(false, noResolvedType0.isNumberValueType());
      assertEquals(true, noResolvedType0.isConstructor());
      assertEquals(false, noResolvedType0.isStringValueType());
      assertEquals(false, noResolvedType0.isNoObjectType());
      assertEquals(true, noResolvedType0.isNullable());
      assertEquals(false, noResolvedType0.isFunctionType());
  }

  @Test
  public void test25()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      boolean boolean0 = true;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0, boolean0);
      assertNotNull(jSTypeRegistry0);
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      AllType allType0 = new AllType(jSTypeRegistry0);
      assertNotNull(allType0);
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, allType0.isUnionType());
      assertEquals(false, allType0.isConstructor());
      assertEquals("<Any Type>", allType0.getDisplayName());
      assertEquals(true, allType0.isAllType());
      assertEquals(false, allType0.isRecordType());
      assertEquals(false, allType0.isNoObjectType());
      assertEquals(false, allType0.isFunctionType());
      assertEquals(false, allType0.isStringValueType());
      assertEquals(BooleanLiteralSet.BOTH, allType0.getPossibleToBooleanOutcomes());
      assertEquals(false, allType0.isCheckedUnknownType());
      assertEquals(false, allType0.isBooleanValueType());
      assertEquals(false, allType0.isInterface());
      assertEquals(false, allType0.isVoidType());
      assertEquals(false, allType0.isEnumType());
      assertEquals(false, allType0.isEnumElementType());
      assertEquals(false, allType0.isOrdinaryFunction());
      assertEquals(false, allType0.isNoType());
      assertEquals("*", allType0.toString());
      assertEquals(true, allType0.hasDisplayName());
      assertEquals(false, allType0.isNominalType());
      assertEquals(true, allType0.matchesStringContext());
      assertEquals(false, allType0.isNumberValueType());
      assertEquals(false, allType0.isTemplateType());
      assertEquals(false, allType0.isNullType());
      assertEquals(false, allType0.canBeCalled());
      assertEquals(false, allType0.isFunctionPrototypeType());
      assertEquals(false, allType0.isResolved());
      assertEquals(true, allType0.matchesObjectContext());
      assertEquals(false, allType0.isNoResolvedType());
      
      Node node0 = null;
      String string0 = null;
      FunctionType functionType0 = jSTypeRegistry0.createConstructorType(string0, node0, node0, (JSType) allType0);
      assertNotNull(functionType0);
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNull(functionType0.getTemplateTypeName());
      assertEquals(false, functionType0.isStringValueType());
      assertEquals(true, functionType0.canBeCalled());
      assertEquals(false, functionType0.isResolved());
      assertEquals(false, functionType0.isFunctionPrototypeType());
      assertEquals(false, functionType0.isAllType());
      assertEquals(false, functionType0.isEnumElementType());
      assertEquals(false, functionType0.isReturnTypeInferred());
      assertEquals(false, functionType0.isNoResolvedType());
      assertEquals(false, functionType0.isRecordType());
      assertEquals(false, functionType0.isTemplateType());
      assertEquals(false, functionType0.isBooleanValueType());
      assertEquals(2147483647, functionType0.getMaxArguments());
      assertEquals(false, functionType0.isNoType());
      assertEquals(false, functionType0.isEnumType());
      assertEquals(false, functionType0.isInterface());
      assertEquals(false, functionType0.hasCachedValues());
      assertEquals(false, functionType0.isUnionType());
      assertEquals(true, functionType0.isConstructor());
      assertEquals(false, functionType0.isNullType());
      assertEquals(false, functionType0.isNoObjectType());
      assertEquals(false, functionType0.isVoidType());
      assertEquals(true, functionType0.isFunctionType());
      assertEquals(false, functionType0.isNumberValueType());
      assertEquals(false, functionType0.isCheckedUnknownType());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertEquals(true, functionType0.hasInstanceType());
      assertEquals(false, functionType0.isOrdinaryFunction());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, functionType0.isNominalType());
      assertEquals(false, allType0.isUnionType());
      assertEquals(false, allType0.isConstructor());
      assertEquals("<Any Type>", allType0.getDisplayName());
      assertEquals(true, allType0.isAllType());
      assertEquals(false, allType0.isRecordType());
      assertEquals(false, allType0.isNoObjectType());
      assertEquals(false, allType0.isFunctionType());
      assertEquals(false, allType0.isStringValueType());
      assertEquals(BooleanLiteralSet.BOTH, allType0.getPossibleToBooleanOutcomes());
      assertEquals(false, allType0.isCheckedUnknownType());
      assertEquals(false, allType0.isBooleanValueType());
      assertEquals(false, allType0.isInterface());
      assertEquals(false, allType0.isVoidType());
      assertEquals(false, allType0.isEnumType());
      assertEquals(false, allType0.isEnumElementType());
      assertEquals(false, allType0.isOrdinaryFunction());
      assertEquals(false, allType0.isNoType());
      assertEquals("*", allType0.toString());
      assertEquals(true, allType0.hasDisplayName());
      assertEquals(false, allType0.isNominalType());
      assertEquals(true, allType0.matchesStringContext());
      assertEquals(false, allType0.isNumberValueType());
      assertEquals(false, allType0.isTemplateType());
      assertEquals(false, allType0.isNullType());
      assertEquals(false, allType0.canBeCalled());
      assertEquals(false, allType0.isFunctionPrototypeType());
      assertEquals(false, allType0.isResolved());
      assertEquals(true, allType0.matchesObjectContext());
      assertEquals(false, allType0.isNoResolvedType());
      
      String string1 = "";
      boolean boolean1 = functionType0.defineInferredProperty(string1, (JSType) allType0, node0);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean0 == boolean1);
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNull(functionType0.getTemplateTypeName());
      assertEquals(false, functionType0.isStringValueType());
      assertEquals(true, functionType0.canBeCalled());
      assertEquals(false, functionType0.isResolved());
      assertEquals(false, functionType0.isFunctionPrototypeType());
      assertEquals(true, functionType0.hasCachedValues());
      assertEquals(false, functionType0.isAllType());
      assertEquals(false, functionType0.isEnumElementType());
      assertEquals(false, functionType0.isReturnTypeInferred());
      assertEquals(false, functionType0.isNoResolvedType());
      assertEquals(false, functionType0.isRecordType());
      assertEquals(false, functionType0.isTemplateType());
      assertEquals(false, functionType0.isBooleanValueType());
      assertEquals(2147483647, functionType0.getMaxArguments());
      assertEquals(false, functionType0.isNoType());
      assertEquals(false, functionType0.isEnumType());
      assertEquals(false, functionType0.isInterface());
      assertEquals(false, functionType0.isUnionType());
      assertEquals(true, functionType0.isConstructor());
      assertEquals(false, functionType0.isNullType());
      assertEquals(false, functionType0.isNoObjectType());
      assertEquals(false, functionType0.isVoidType());
      assertEquals(true, functionType0.isFunctionType());
      assertEquals(false, functionType0.isNumberValueType());
      assertEquals(false, functionType0.isCheckedUnknownType());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertEquals(true, functionType0.hasInstanceType());
      assertEquals(false, functionType0.isOrdinaryFunction());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, functionType0.isNominalType());
      assertEquals(false, allType0.isUnionType());
      assertEquals(false, allType0.isConstructor());
      assertEquals("<Any Type>", allType0.getDisplayName());
      assertEquals(true, allType0.isAllType());
      assertEquals(false, allType0.isRecordType());
      assertEquals(false, allType0.isNoObjectType());
      assertEquals(false, allType0.isFunctionType());
      assertEquals(false, allType0.isStringValueType());
      assertEquals(BooleanLiteralSet.BOTH, allType0.getPossibleToBooleanOutcomes());
      assertEquals(false, allType0.isCheckedUnknownType());
      assertEquals(false, allType0.isBooleanValueType());
      assertEquals(false, allType0.isInterface());
      assertEquals(false, allType0.isVoidType());
      assertEquals(false, allType0.isEnumType());
      assertEquals(false, allType0.isEnumElementType());
      assertEquals(false, allType0.isOrdinaryFunction());
      assertEquals(false, allType0.isNoType());
      assertEquals("*", allType0.toString());
      assertEquals(true, allType0.hasDisplayName());
      assertEquals(false, allType0.isNominalType());
      assertEquals(true, allType0.matchesStringContext());
      assertEquals(false, allType0.isNumberValueType());
      assertEquals(false, allType0.isTemplateType());
      assertEquals(false, allType0.isNullType());
      assertEquals(false, allType0.canBeCalled());
      assertEquals(false, allType0.isFunctionPrototypeType());
      assertEquals(false, allType0.isResolved());
      assertEquals(true, allType0.matchesObjectContext());
      assertEquals(false, allType0.isNoResolvedType());
      
      StringType stringType0 = new StringType(jSTypeRegistry0);
      assertNotNull(stringType0);
      assertTrue(boolean0 == boolean1);
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals("string", stringType0.toString());
      assertEquals(false, stringType0.isResolved());
      assertEquals(BooleanLiteralSet.BOTH, stringType0.getPossibleToBooleanOutcomes());
      assertEquals(false, stringType0.isNoType());
      assertEquals(false, stringType0.isNominalType());
      assertEquals(false, stringType0.isBooleanValueType());
      assertEquals(false, stringType0.isFunctionType());
      assertEquals(false, stringType0.isCheckedUnknownType());
      assertEquals(false, stringType0.isRecordType());
      assertEquals(true, stringType0.matchesObjectContext());
      assertEquals(false, stringType0.isTemplateType());
      assertEquals(true, stringType0.matchesNumberContext());
      assertEquals(true, stringType0.matchesStringContext());
      assertEquals(false, stringType0.isOrdinaryFunction());
      assertEquals(false, stringType0.isEnumElementType());
      assertEquals("string", stringType0.getDisplayName());
      assertEquals(false, stringType0.isNumberValueType());
      assertEquals(false, stringType0.isNullType());
      assertEquals(false, stringType0.isVoidType());
      assertEquals(false, stringType0.isNoObjectType());
      assertEquals(false, stringType0.isFunctionPrototypeType());
      assertEquals(false, stringType0.isEnumType());
      assertEquals(false, stringType0.isUnionType());
      assertEquals(true, stringType0.isStringValueType());
      assertEquals(false, stringType0.isAllType());
      assertEquals(false, stringType0.isNoResolvedType());
      assertEquals(false, stringType0.isConstructor());
      assertEquals(false, stringType0.isInterface());
      
      boolean boolean2 = functionType0.defineDeclaredProperty(string1, (JSType) stringType0, node0);
      assertTrue(boolean2);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean0 == boolean1);
      assertTrue(boolean0 == boolean2);
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNull(functionType0.getTemplateTypeName());
      assertEquals(false, functionType0.isStringValueType());
      assertEquals(true, functionType0.canBeCalled());
      assertEquals(false, functionType0.isResolved());
      assertEquals(false, functionType0.isFunctionPrototypeType());
      assertEquals(true, functionType0.hasCachedValues());
      assertEquals(false, functionType0.isAllType());
      assertEquals(false, functionType0.isEnumElementType());
      assertEquals(false, functionType0.isReturnTypeInferred());
      assertEquals(false, functionType0.isNoResolvedType());
      assertEquals(false, functionType0.isRecordType());
      assertEquals(false, functionType0.isTemplateType());
      assertEquals(false, functionType0.isBooleanValueType());
      assertEquals(2147483647, functionType0.getMaxArguments());
      assertEquals(false, functionType0.isNoType());
      assertEquals(false, functionType0.isEnumType());
      assertEquals(false, functionType0.isInterface());
      assertEquals(false, functionType0.isUnionType());
      assertEquals(true, functionType0.isConstructor());
      assertEquals(false, functionType0.isNullType());
      assertEquals(false, functionType0.isNoObjectType());
      assertEquals(false, functionType0.isVoidType());
      assertEquals(true, functionType0.isFunctionType());
      assertEquals(false, functionType0.isNumberValueType());
      assertEquals(false, functionType0.isCheckedUnknownType());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertEquals(true, functionType0.hasInstanceType());
      assertEquals(false, functionType0.isOrdinaryFunction());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, functionType0.isNominalType());
      assertEquals("string", stringType0.toString());
      assertEquals(false, stringType0.isResolved());
      assertEquals(BooleanLiteralSet.BOTH, stringType0.getPossibleToBooleanOutcomes());
      assertEquals(false, stringType0.isNoType());
      assertEquals(false, stringType0.isNominalType());
      assertEquals(false, stringType0.isBooleanValueType());
      assertEquals(false, stringType0.isFunctionType());
      assertEquals(false, stringType0.isCheckedUnknownType());
      assertEquals(false, stringType0.isRecordType());
      assertEquals(true, stringType0.matchesObjectContext());
      assertEquals(false, stringType0.isTemplateType());
      assertEquals(true, stringType0.matchesNumberContext());
      assertEquals(true, stringType0.matchesStringContext());
      assertEquals(false, stringType0.isOrdinaryFunction());
      assertEquals(false, stringType0.isEnumElementType());
      assertEquals("string", stringType0.getDisplayName());
      assertEquals(false, stringType0.isNumberValueType());
      assertEquals(false, stringType0.isNullType());
      assertEquals(false, stringType0.isVoidType());
      assertEquals(false, stringType0.isNoObjectType());
      assertEquals(false, stringType0.isFunctionPrototypeType());
      assertEquals(false, stringType0.isEnumType());
      assertEquals(false, stringType0.isUnionType());
      assertEquals(true, stringType0.isStringValueType());
      assertEquals(false, stringType0.isAllType());
      assertEquals(false, stringType0.isNoResolvedType());
      assertEquals(false, stringType0.isConstructor());
      assertEquals(false, stringType0.isInterface());
      assertEquals(false, allType0.isUnionType());
      assertEquals(false, allType0.isConstructor());
      assertEquals("<Any Type>", allType0.getDisplayName());
      assertEquals(true, allType0.isAllType());
      assertEquals(false, allType0.isRecordType());
      assertEquals(false, allType0.isNoObjectType());
      assertEquals(false, allType0.isFunctionType());
      assertEquals(false, allType0.isStringValueType());
      assertEquals(BooleanLiteralSet.BOTH, allType0.getPossibleToBooleanOutcomes());
      assertEquals(false, allType0.isCheckedUnknownType());
      assertEquals(false, allType0.isBooleanValueType());
      assertEquals(false, allType0.isInterface());
      assertEquals(false, allType0.isVoidType());
      assertEquals(false, allType0.isEnumType());
      assertEquals(false, allType0.isEnumElementType());
      assertEquals(false, allType0.isOrdinaryFunction());
      assertEquals(false, allType0.isNoType());
      assertEquals("*", allType0.toString());
      assertEquals(true, allType0.hasDisplayName());
      assertEquals(false, allType0.isNominalType());
      assertEquals(true, allType0.matchesStringContext());
      assertEquals(false, allType0.isNumberValueType());
      assertEquals(false, allType0.isTemplateType());
      assertEquals(false, allType0.isNullType());
      assertEquals(false, allType0.canBeCalled());
      assertEquals(false, allType0.isFunctionPrototypeType());
      assertEquals(false, allType0.isResolved());
      assertEquals(true, allType0.matchesObjectContext());
      assertEquals(false, allType0.isNoResolvedType());
  }

  @Test
  public void test26()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      boolean boolean0 = false;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0, boolean0);
      assertNotNull(jSTypeRegistry0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      AllType allType0 = new AllType(jSTypeRegistry0);
      assertNotNull(allType0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, allType0.isEnumElementType());
      assertEquals(false, allType0.isNumberValueType());
      assertEquals(false, allType0.isVoidType());
      assertEquals(false, allType0.isFunctionType());
      assertEquals(false, allType0.isNoResolvedType());
      assertEquals(true, allType0.matchesObjectContext());
      assertEquals(true, allType0.isAllType());
      assertEquals(false, allType0.isNullType());
      assertEquals(false, allType0.canBeCalled());
      assertEquals(true, allType0.matchesStringContext());
      assertEquals(false, allType0.isInterface());
      assertEquals(false, allType0.isNoObjectType());
      assertEquals(false, allType0.isFunctionPrototypeType());
      assertEquals(false, allType0.isConstructor());
      assertEquals("*", allType0.toString());
      assertEquals(true, allType0.hasDisplayName());
      assertEquals("<Any Type>", allType0.getDisplayName());
      assertEquals(false, allType0.isEnumType());
      assertEquals(false, allType0.isNoType());
      assertEquals(false, allType0.isOrdinaryFunction());
      assertEquals(false, allType0.isResolved());
      assertEquals(false, allType0.isTemplateType());
      assertEquals(BooleanLiteralSet.BOTH, allType0.getPossibleToBooleanOutcomes());
      assertEquals(false, allType0.isUnionType());
      assertEquals(false, allType0.isCheckedUnknownType());
      assertEquals(false, allType0.isBooleanValueType());
      assertEquals(false, allType0.isNominalType());
      assertEquals(false, allType0.isStringValueType());
      assertEquals(false, allType0.isRecordType());
      
      Node node0 = null;
      String string0 = null;
      FunctionType functionType0 = jSTypeRegistry0.createConstructorType(string0, node0, node0, (JSType) allType0);
      assertNotNull(functionType0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, allType0.isEnumElementType());
      assertEquals(false, allType0.isNumberValueType());
      assertEquals(false, allType0.isVoidType());
      assertEquals(false, allType0.isFunctionType());
      assertEquals(false, allType0.isNoResolvedType());
      assertEquals(true, allType0.matchesObjectContext());
      assertEquals(true, allType0.isAllType());
      assertEquals(false, allType0.isNullType());
      assertEquals(false, allType0.canBeCalled());
      assertEquals(true, allType0.matchesStringContext());
      assertEquals(false, allType0.isInterface());
      assertEquals(false, allType0.isNoObjectType());
      assertEquals(false, allType0.isFunctionPrototypeType());
      assertEquals(false, allType0.isConstructor());
      assertEquals("*", allType0.toString());
      assertEquals(true, allType0.hasDisplayName());
      assertEquals("<Any Type>", allType0.getDisplayName());
      assertEquals(false, allType0.isEnumType());
      assertEquals(false, allType0.isNoType());
      assertEquals(false, allType0.isOrdinaryFunction());
      assertEquals(false, allType0.isResolved());
      assertEquals(false, allType0.isTemplateType());
      assertEquals(BooleanLiteralSet.BOTH, allType0.getPossibleToBooleanOutcomes());
      assertEquals(false, allType0.isUnionType());
      assertEquals(false, allType0.isCheckedUnknownType());
      assertEquals(false, allType0.isBooleanValueType());
      assertEquals(false, allType0.isNominalType());
      assertEquals(false, allType0.isStringValueType());
      assertEquals(false, allType0.isRecordType());
      assertNull(functionType0.getTemplateTypeName());
      assertEquals(false, functionType0.hasCachedValues());
      assertEquals(false, functionType0.isNoResolvedType());
      assertEquals(true, functionType0.hasInstanceType());
      assertEquals(false, functionType0.isStringValueType());
      assertEquals(false, functionType0.isAllType());
      assertEquals(false, functionType0.isEnumType());
      assertEquals(false, functionType0.isNullType());
      assertEquals(false, functionType0.isNoObjectType());
      assertEquals(false, functionType0.isFunctionPrototypeType());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, functionType0.isCheckedUnknownType());
      assertEquals(false, functionType0.isRecordType());
      assertEquals(false, functionType0.isUnionType());
      assertEquals(false, functionType0.isTemplateType());
      assertEquals(false, functionType0.isOrdinaryFunction());
      assertEquals(false, functionType0.isInterface());
      assertEquals(false, functionType0.isVoidType());
      assertEquals(false, functionType0.isBooleanValueType());
      assertEquals(true, functionType0.canBeCalled());
      assertEquals(false, functionType0.isNoType());
      assertEquals(false, functionType0.isEnumElementType());
      assertEquals(true, functionType0.isFunctionType());
      assertEquals(true, functionType0.isConstructor());
      assertEquals(2147483647, functionType0.getMaxArguments());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertEquals(false, functionType0.isReturnTypeInferred());
      assertEquals(false, functionType0.isNumberValueType());
      assertEquals(false, functionType0.isResolved());
      assertEquals(false, functionType0.isNominalType());
      
      String string1 = "com.google.javascript.rhino.jstype.PrototypeObjectType";
      boolean boolean1 = functionType0.defineInferredProperty(string1, (JSType) allType0, node0);
      assertTrue(boolean1);
      assertFalse(boolean0 == boolean1);
      assertFalse(boolean1 == boolean0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, allType0.isEnumElementType());
      assertEquals(false, allType0.isNumberValueType());
      assertEquals(false, allType0.isVoidType());
      assertEquals(false, allType0.isFunctionType());
      assertEquals(false, allType0.isNoResolvedType());
      assertEquals(true, allType0.matchesObjectContext());
      assertEquals(true, allType0.isAllType());
      assertEquals(false, allType0.isNullType());
      assertEquals(false, allType0.canBeCalled());
      assertEquals(true, allType0.matchesStringContext());
      assertEquals(false, allType0.isInterface());
      assertEquals(false, allType0.isNoObjectType());
      assertEquals(false, allType0.isFunctionPrototypeType());
      assertEquals(false, allType0.isConstructor());
      assertEquals("*", allType0.toString());
      assertEquals(true, allType0.hasDisplayName());
      assertEquals("<Any Type>", allType0.getDisplayName());
      assertEquals(false, allType0.isEnumType());
      assertEquals(false, allType0.isNoType());
      assertEquals(false, allType0.isOrdinaryFunction());
      assertEquals(false, allType0.isResolved());
      assertEquals(false, allType0.isTemplateType());
      assertEquals(BooleanLiteralSet.BOTH, allType0.getPossibleToBooleanOutcomes());
      assertEquals(false, allType0.isUnionType());
      assertEquals(false, allType0.isCheckedUnknownType());
      assertEquals(false, allType0.isBooleanValueType());
      assertEquals(false, allType0.isNominalType());
      assertEquals(false, allType0.isStringValueType());
      assertEquals(false, allType0.isRecordType());
      assertNull(functionType0.getTemplateTypeName());
      assertEquals(false, functionType0.isNoResolvedType());
      assertEquals(true, functionType0.hasInstanceType());
      assertEquals(false, functionType0.isStringValueType());
      assertEquals(false, functionType0.isAllType());
      assertEquals(false, functionType0.isEnumType());
      assertEquals(false, functionType0.isNullType());
      assertEquals(true, functionType0.hasCachedValues());
      assertEquals(false, functionType0.isNoObjectType());
      assertEquals(false, functionType0.isFunctionPrototypeType());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, functionType0.isCheckedUnknownType());
      assertEquals(false, functionType0.isRecordType());
      assertEquals(false, functionType0.isUnionType());
      assertEquals(false, functionType0.isTemplateType());
      assertEquals(false, functionType0.isOrdinaryFunction());
      assertEquals(false, functionType0.isInterface());
      assertEquals(false, functionType0.isVoidType());
      assertEquals(false, functionType0.isBooleanValueType());
      assertEquals(true, functionType0.canBeCalled());
      assertEquals(false, functionType0.isNoType());
      assertEquals(false, functionType0.isEnumElementType());
      assertEquals(true, functionType0.isFunctionType());
      assertEquals(true, functionType0.isConstructor());
      assertEquals(2147483647, functionType0.getMaxArguments());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertEquals(false, functionType0.isReturnTypeInferred());
      assertEquals(false, functionType0.isNumberValueType());
      assertEquals(false, functionType0.isResolved());
      assertEquals(false, functionType0.isNominalType());
      
      int int0 = functionType0.getPropertiesCount();
      assertEquals(1, int0);
      assertFalse(boolean0 == boolean1);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, allType0.isEnumElementType());
      assertEquals(false, allType0.isNumberValueType());
      assertEquals(false, allType0.isVoidType());
      assertEquals(false, allType0.isFunctionType());
      assertEquals(false, allType0.isNoResolvedType());
      assertEquals(true, allType0.matchesObjectContext());
      assertEquals(true, allType0.isAllType());
      assertEquals(false, allType0.isNullType());
      assertEquals(false, allType0.canBeCalled());
      assertEquals(true, allType0.matchesStringContext());
      assertEquals(false, allType0.isInterface());
      assertEquals(false, allType0.isNoObjectType());
      assertEquals(false, allType0.isFunctionPrototypeType());
      assertEquals(false, allType0.isConstructor());
      assertEquals("*", allType0.toString());
      assertEquals(true, allType0.hasDisplayName());
      assertEquals("<Any Type>", allType0.getDisplayName());
      assertEquals(false, allType0.isEnumType());
      assertEquals(false, allType0.isNoType());
      assertEquals(false, allType0.isOrdinaryFunction());
      assertEquals(false, allType0.isResolved());
      assertEquals(false, allType0.isTemplateType());
      assertEquals(BooleanLiteralSet.BOTH, allType0.getPossibleToBooleanOutcomes());
      assertEquals(false, allType0.isUnionType());
      assertEquals(false, allType0.isCheckedUnknownType());
      assertEquals(false, allType0.isBooleanValueType());
      assertEquals(false, allType0.isNominalType());
      assertEquals(false, allType0.isStringValueType());
      assertEquals(false, allType0.isRecordType());
      assertNull(functionType0.getTemplateTypeName());
      assertEquals(false, functionType0.isNoResolvedType());
      assertEquals(true, functionType0.hasInstanceType());
      assertEquals(false, functionType0.isStringValueType());
      assertEquals(false, functionType0.isAllType());
      assertEquals(false, functionType0.isEnumType());
      assertEquals(false, functionType0.isNullType());
      assertEquals(true, functionType0.hasCachedValues());
      assertEquals(false, functionType0.isNoObjectType());
      assertEquals(false, functionType0.isFunctionPrototypeType());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, functionType0.isCheckedUnknownType());
      assertEquals(false, functionType0.isRecordType());
      assertEquals(false, functionType0.isUnionType());
      assertEquals(false, functionType0.isTemplateType());
      assertEquals(false, functionType0.isOrdinaryFunction());
      assertEquals(false, functionType0.isInterface());
      assertEquals(false, functionType0.isVoidType());
      assertEquals(false, functionType0.isBooleanValueType());
      assertEquals(true, functionType0.canBeCalled());
      assertEquals(false, functionType0.isNoType());
      assertEquals(false, functionType0.isEnumElementType());
      assertEquals(true, functionType0.isFunctionType());
      assertEquals(true, functionType0.isConstructor());
      assertEquals(2147483647, functionType0.getMaxArguments());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertEquals(false, functionType0.isReturnTypeInferred());
      assertEquals(false, functionType0.isNumberValueType());
      assertEquals(false, functionType0.isResolved());
      assertEquals(false, functionType0.isNominalType());
  }

  @Test
  public void test27()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      String string0 = "U:u^SYKlfT{K_-_qXs^";
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, string0);
      assertNotNull(errorFunctionType0);
      assertEquals(false, errorFunctionType0.isNullType());
      assertEquals(false, errorFunctionType0.isReturnTypeInferred());
      assertEquals(false, errorFunctionType0.isEnumElementType());
      assertEquals(3, errorFunctionType0.getMaxArguments());
      assertEquals(false, errorFunctionType0.isNoObjectType());
      assertEquals(true, errorFunctionType0.hasInstanceType());
      assertEquals(true, errorFunctionType0.canBeCalled());
      assertEquals(false, errorFunctionType0.isInterface());
      assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      assertEquals(false, errorFunctionType0.isUnionType());
      assertEquals(false, errorFunctionType0.hasCachedValues());
      assertEquals(false, errorFunctionType0.isNoResolvedType());
      assertEquals(false, errorFunctionType0.isNominalType());
      assertEquals(false, errorFunctionType0.isTemplateType());
      assertEquals(false, errorFunctionType0.isNumberValueType());
      assertEquals(false, errorFunctionType0.isAllType());
      assertEquals(true, errorFunctionType0.isFunctionType());
      assertEquals(false, errorFunctionType0.isRecordType());
      assertNull(errorFunctionType0.getTemplateTypeName());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, errorFunctionType0.isCheckedUnknownType());
      assertEquals(false, errorFunctionType0.isStringValueType());
      assertEquals(false, errorFunctionType0.isResolved());
      assertEquals(false, errorFunctionType0.isBooleanValueType());
      assertEquals(true, errorFunctionType0.isConstructor());
      assertEquals(false, errorFunctionType0.isEnumType());
      assertEquals(false, errorFunctionType0.isVoidType());
      assertEquals(false, errorFunctionType0.isNoType());
      assertEquals(false, errorFunctionType0.isFunctionPrototypeType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      HashMap<String, RecordTypeBuilder.RecordProperty> hashMap0 = new HashMap<String, RecordTypeBuilder.RecordProperty>();
      assertNotNull(hashMap0);
      assertEquals(0, hashMap0.size());
      assertEquals("{}", hashMap0.toString());
      assertEquals(true, hashMap0.isEmpty());
      
      RecordType recordType0 = new RecordType(jSTypeRegistry0, hashMap0);
      assertNotNull(recordType0);
      assertEquals(false, recordType0.isAllType());
      assertEquals(false, recordType0.isNoType());
      assertEquals(false, recordType0.isCheckedUnknownType());
      assertEquals(false, recordType0.isNoObjectType());
      assertEquals(false, recordType0.isNumberValueType());
      assertEquals(false, recordType0.isStringValueType());
      assertEquals(false, recordType0.isFunctionType());
      assertEquals(false, recordType0.isInterface());
      assertEquals(false, recordType0.isOrdinaryFunction());
      assertEquals(false, recordType0.isVoidType());
      assertEquals(false, recordType0.isNoResolvedType());
      assertEquals(false, recordType0.isConstructor());
      assertEquals(false, recordType0.isEnumType());
      assertEquals(false, recordType0.isTemplateType());
      assertEquals(false, recordType0.isNominalType());
      assertEquals(BooleanLiteralSet.TRUE, recordType0.getPossibleToBooleanOutcomes());
      assertEquals(false, recordType0.isUnionType());
      assertEquals(false, recordType0.isNullType());
      assertEquals(false, recordType0.isEnumElementType());
      assertEquals(false, recordType0.isFunctionPrototypeType());
      assertEquals(false, recordType0.isBooleanValueType());
      assertEquals(false, recordType0.isResolved());
      assertEquals(true, recordType0.isRecordType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(0, hashMap0.size());
      assertEquals("{}", hashMap0.toString());
      assertEquals(true, hashMap0.isEmpty());
      
      Node node0 = recordType0.getPropertyNode(string0);
      assertNull(node0);
      assertEquals(false, recordType0.isAllType());
      assertEquals(false, recordType0.isNoType());
      assertEquals(false, recordType0.isCheckedUnknownType());
      assertEquals(false, recordType0.isNoObjectType());
      assertEquals(false, recordType0.isNumberValueType());
      assertEquals(false, recordType0.isStringValueType());
      assertEquals(false, recordType0.isFunctionType());
      assertEquals(false, recordType0.isInterface());
      assertEquals(false, recordType0.isOrdinaryFunction());
      assertEquals(false, recordType0.isVoidType());
      assertEquals(false, recordType0.isNoResolvedType());
      assertEquals(false, recordType0.isConstructor());
      assertEquals(false, recordType0.isEnumType());
      assertEquals(false, recordType0.isTemplateType());
      assertEquals(false, recordType0.isNominalType());
      assertEquals(BooleanLiteralSet.TRUE, recordType0.getPossibleToBooleanOutcomes());
      assertEquals(false, recordType0.isUnionType());
      assertEquals(false, recordType0.isNullType());
      assertEquals(false, recordType0.isEnumElementType());
      assertEquals(false, recordType0.isFunctionPrototypeType());
      assertEquals(false, recordType0.isBooleanValueType());
      assertEquals(false, recordType0.isResolved());
      assertEquals(true, recordType0.isRecordType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(0, hashMap0.size());
      assertEquals("{}", hashMap0.toString());
      assertEquals(true, hashMap0.isEmpty());
      
      boolean boolean0 = recordType0.matchesUint32Context();
      assertFalse(boolean0);
      assertEquals(false, recordType0.isAllType());
      assertEquals(false, recordType0.isNoType());
      assertEquals(false, recordType0.isCheckedUnknownType());
      assertEquals(false, recordType0.isNoObjectType());
      assertEquals(false, recordType0.isNumberValueType());
      assertEquals(false, recordType0.isStringValueType());
      assertEquals(false, recordType0.isFunctionType());
      assertEquals(false, recordType0.isInterface());
      assertEquals(false, recordType0.isOrdinaryFunction());
      assertEquals(false, recordType0.isVoidType());
      assertEquals(false, recordType0.isNoResolvedType());
      assertEquals(false, recordType0.isConstructor());
      assertEquals(false, recordType0.isEnumType());
      assertEquals(false, recordType0.isTemplateType());
      assertEquals(false, recordType0.isNominalType());
      assertEquals(BooleanLiteralSet.TRUE, recordType0.getPossibleToBooleanOutcomes());
      assertEquals(false, recordType0.isUnionType());
      assertEquals(false, recordType0.isNullType());
      assertEquals(false, recordType0.isEnumElementType());
      assertEquals(false, recordType0.isFunctionPrototypeType());
      assertEquals(false, recordType0.isBooleanValueType());
      assertEquals(false, recordType0.isResolved());
      assertEquals(true, recordType0.isRecordType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(0, hashMap0.size());
      assertEquals("{}", hashMap0.toString());
      assertEquals(true, hashMap0.isEmpty());
      
      boolean boolean1 = errorFunctionType0.defineProperty(string0, errorFunctionType0, boolean0, node0);
      assertTrue(boolean1);
      assertFalse(boolean0 == boolean1);
      assertFalse(boolean1 == boolean0);
      assertEquals(false, errorFunctionType0.isNullType());
      assertEquals(false, errorFunctionType0.isReturnTypeInferred());
      assertEquals(false, errorFunctionType0.isEnumElementType());
      assertEquals(3, errorFunctionType0.getMaxArguments());
      assertEquals(false, errorFunctionType0.isNoObjectType());
      assertEquals(true, errorFunctionType0.hasInstanceType());
      assertEquals(true, errorFunctionType0.canBeCalled());
      assertEquals(false, errorFunctionType0.isInterface());
      assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      assertEquals(false, errorFunctionType0.isUnionType());
      assertEquals(false, errorFunctionType0.hasCachedValues());
      assertEquals(false, errorFunctionType0.isNoResolvedType());
      assertEquals(false, errorFunctionType0.isNominalType());
      assertEquals(false, errorFunctionType0.isTemplateType());
      assertEquals(false, errorFunctionType0.isNumberValueType());
      assertEquals(false, errorFunctionType0.isAllType());
      assertEquals(true, errorFunctionType0.isFunctionType());
      assertEquals(false, errorFunctionType0.isRecordType());
      assertNull(errorFunctionType0.getTemplateTypeName());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, errorFunctionType0.isCheckedUnknownType());
      assertEquals(false, errorFunctionType0.isStringValueType());
      assertEquals(false, errorFunctionType0.isResolved());
      assertEquals(false, errorFunctionType0.isBooleanValueType());
      assertEquals(true, errorFunctionType0.isConstructor());
      assertEquals(false, errorFunctionType0.isEnumType());
      assertEquals(false, errorFunctionType0.isVoidType());
      assertEquals(false, errorFunctionType0.isNoType());
      assertEquals(false, errorFunctionType0.isFunctionPrototypeType());
      assertEquals(false, recordType0.isAllType());
      assertEquals(false, recordType0.isNoType());
      assertEquals(false, recordType0.isCheckedUnknownType());
      assertEquals(false, recordType0.isNoObjectType());
      assertEquals(false, recordType0.isNumberValueType());
      assertEquals(false, recordType0.isStringValueType());
      assertEquals(false, recordType0.isFunctionType());
      assertEquals(false, recordType0.isInterface());
      assertEquals(false, recordType0.isOrdinaryFunction());
      assertEquals(false, recordType0.isVoidType());
      assertEquals(false, recordType0.isNoResolvedType());
      assertEquals(false, recordType0.isConstructor());
      assertEquals(false, recordType0.isEnumType());
      assertEquals(false, recordType0.isTemplateType());
      assertEquals(false, recordType0.isNominalType());
      assertEquals(BooleanLiteralSet.TRUE, recordType0.getPossibleToBooleanOutcomes());
      assertEquals(false, recordType0.isUnionType());
      assertEquals(false, recordType0.isNullType());
      assertEquals(false, recordType0.isEnumElementType());
      assertEquals(false, recordType0.isFunctionPrototypeType());
      assertEquals(false, recordType0.isBooleanValueType());
      assertEquals(false, recordType0.isResolved());
      assertEquals(true, recordType0.isRecordType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(0, hashMap0.size());
      assertEquals("{}", hashMap0.toString());
      assertEquals(true, hashMap0.isEmpty());
      
      boolean boolean2 = errorFunctionType0.isPropertyTypeInferred(string0);
      assertFalse(boolean2);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertEquals(false, errorFunctionType0.isNullType());
      assertEquals(false, errorFunctionType0.isReturnTypeInferred());
      assertEquals(false, errorFunctionType0.isEnumElementType());
      assertEquals(3, errorFunctionType0.getMaxArguments());
      assertEquals(false, errorFunctionType0.isNoObjectType());
      assertEquals(true, errorFunctionType0.hasInstanceType());
      assertEquals(true, errorFunctionType0.canBeCalled());
      assertEquals(false, errorFunctionType0.isInterface());
      assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      assertEquals(false, errorFunctionType0.isUnionType());
      assertEquals(false, errorFunctionType0.hasCachedValues());
      assertEquals(false, errorFunctionType0.isNoResolvedType());
      assertEquals(false, errorFunctionType0.isNominalType());
      assertEquals(false, errorFunctionType0.isTemplateType());
      assertEquals(false, errorFunctionType0.isNumberValueType());
      assertEquals(false, errorFunctionType0.isAllType());
      assertEquals(true, errorFunctionType0.isFunctionType());
      assertEquals(false, errorFunctionType0.isRecordType());
      assertNull(errorFunctionType0.getTemplateTypeName());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, errorFunctionType0.isCheckedUnknownType());
      assertEquals(false, errorFunctionType0.isStringValueType());
      assertEquals(false, errorFunctionType0.isResolved());
      assertEquals(false, errorFunctionType0.isBooleanValueType());
      assertEquals(true, errorFunctionType0.isConstructor());
      assertEquals(false, errorFunctionType0.isEnumType());
      assertEquals(false, errorFunctionType0.isVoidType());
      assertEquals(false, errorFunctionType0.isNoType());
      assertEquals(false, errorFunctionType0.isFunctionPrototypeType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
  }

  @Test
  public void test28()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      boolean boolean0 = true;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0, boolean0);
      assertNotNull(jSTypeRegistry0);
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      AllType allType0 = new AllType(jSTypeRegistry0);
      assertNotNull(allType0);
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, allType0.isUnionType());
      assertEquals(false, allType0.isNominalType());
      assertEquals(true, allType0.matchesObjectContext());
      assertEquals(false, allType0.isEnumElementType());
      assertEquals(false, allType0.isInterface());
      assertEquals(false, allType0.isOrdinaryFunction());
      assertEquals(false, allType0.isNullType());
      assertEquals(true, allType0.matchesStringContext());
      assertEquals(false, allType0.isNoResolvedType());
      assertEquals(false, allType0.isNoType());
      assertEquals(false, allType0.isStringValueType());
      assertEquals(false, allType0.isBooleanValueType());
      assertEquals(false, allType0.isEnumType());
      assertEquals(false, allType0.canBeCalled());
      assertEquals("<Any Type>", allType0.getDisplayName());
      assertEquals(true, allType0.isAllType());
      assertEquals(false, allType0.isResolved());
      assertEquals(false, allType0.isCheckedUnknownType());
      assertEquals(false, allType0.isFunctionPrototypeType());
      assertEquals(false, allType0.isNumberValueType());
      assertEquals(false, allType0.isRecordType());
      assertEquals(true, allType0.hasDisplayName());
      assertEquals(false, allType0.isFunctionType());
      assertEquals(false, allType0.isConstructor());
      assertEquals("*", allType0.toString());
      assertEquals(false, allType0.isNoObjectType());
      assertEquals(BooleanLiteralSet.BOTH, allType0.getPossibleToBooleanOutcomes());
      assertEquals(false, allType0.isVoidType());
      assertEquals(false, allType0.isTemplateType());
      
      Node node0 = null;
      String string0 = null;
      FunctionType functionType0 = jSTypeRegistry0.createConstructorType(string0, node0, node0, (JSType) allType0);
      assertNotNull(functionType0);
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, allType0.isUnionType());
      assertEquals(false, allType0.isNominalType());
      assertEquals(true, allType0.matchesObjectContext());
      assertEquals(false, allType0.isEnumElementType());
      assertEquals(false, allType0.isInterface());
      assertEquals(false, allType0.isOrdinaryFunction());
      assertEquals(false, allType0.isNullType());
      assertEquals(true, allType0.matchesStringContext());
      assertEquals(false, allType0.isNoResolvedType());
      assertEquals(false, allType0.isNoType());
      assertEquals(false, allType0.isStringValueType());
      assertEquals(false, allType0.isBooleanValueType());
      assertEquals(false, allType0.isEnumType());
      assertEquals(false, allType0.canBeCalled());
      assertEquals("<Any Type>", allType0.getDisplayName());
      assertEquals(true, allType0.isAllType());
      assertEquals(false, allType0.isResolved());
      assertEquals(false, allType0.isCheckedUnknownType());
      assertEquals(false, allType0.isFunctionPrototypeType());
      assertEquals(false, allType0.isNumberValueType());
      assertEquals(false, allType0.isRecordType());
      assertEquals(true, allType0.hasDisplayName());
      assertEquals(false, allType0.isFunctionType());
      assertEquals(false, allType0.isConstructor());
      assertEquals("*", allType0.toString());
      assertEquals(false, allType0.isNoObjectType());
      assertEquals(BooleanLiteralSet.BOTH, allType0.getPossibleToBooleanOutcomes());
      assertEquals(false, allType0.isVoidType());
      assertEquals(false, allType0.isTemplateType());
      assertEquals(false, functionType0.isRecordType());
      assertEquals(false, functionType0.isResolved());
      assertEquals(false, functionType0.isVoidType());
      assertEquals(false, functionType0.isEnumElementType());
      assertEquals(true, functionType0.isFunctionType());
      assertEquals(false, functionType0.isAllType());
      assertEquals(false, functionType0.isNoType());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertEquals(false, functionType0.isNoResolvedType());
      assertEquals(false, functionType0.isNominalType());
      assertEquals(false, functionType0.isUnionType());
      assertEquals(false, functionType0.isOrdinaryFunction());
      assertEquals(false, functionType0.isNumberValueType());
      assertEquals(false, functionType0.isEnumType());
      assertEquals(false, functionType0.isReturnTypeInferred());
      assertEquals(false, functionType0.isNullType());
      assertEquals(true, functionType0.isConstructor());
      assertEquals(false, functionType0.isInterface());
      assertEquals(false, functionType0.isBooleanValueType());
      assertEquals(false, functionType0.isTemplateType());
      assertEquals(false, functionType0.isFunctionPrototypeType());
      assertEquals(false, functionType0.isNoObjectType());
      assertEquals(true, functionType0.hasInstanceType());
      assertEquals(true, functionType0.canBeCalled());
      assertEquals(2147483647, functionType0.getMaxArguments());
      assertEquals(false, functionType0.isStringValueType());
      assertEquals(false, functionType0.hasCachedValues());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertNull(functionType0.getTemplateTypeName());
      assertEquals(false, functionType0.isCheckedUnknownType());
      
      String string1 = "";
      boolean boolean1 = functionType0.defineInferredProperty(string1, (JSType) allType0, node0);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean0 == boolean1);
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, allType0.isUnionType());
      assertEquals(false, allType0.isNominalType());
      assertEquals(true, allType0.matchesObjectContext());
      assertEquals(false, allType0.isEnumElementType());
      assertEquals(false, allType0.isInterface());
      assertEquals(false, allType0.isOrdinaryFunction());
      assertEquals(false, allType0.isNullType());
      assertEquals(true, allType0.matchesStringContext());
      assertEquals(false, allType0.isNoResolvedType());
      assertEquals(false, allType0.isNoType());
      assertEquals(false, allType0.isStringValueType());
      assertEquals(false, allType0.isBooleanValueType());
      assertEquals(false, allType0.isEnumType());
      assertEquals(false, allType0.canBeCalled());
      assertEquals("<Any Type>", allType0.getDisplayName());
      assertEquals(true, allType0.isAllType());
      assertEquals(false, allType0.isResolved());
      assertEquals(false, allType0.isCheckedUnknownType());
      assertEquals(false, allType0.isFunctionPrototypeType());
      assertEquals(false, allType0.isNumberValueType());
      assertEquals(false, allType0.isRecordType());
      assertEquals(true, allType0.hasDisplayName());
      assertEquals(false, allType0.isFunctionType());
      assertEquals(false, allType0.isConstructor());
      assertEquals("*", allType0.toString());
      assertEquals(false, allType0.isNoObjectType());
      assertEquals(BooleanLiteralSet.BOTH, allType0.getPossibleToBooleanOutcomes());
      assertEquals(false, allType0.isVoidType());
      assertEquals(false, allType0.isTemplateType());
      assertEquals(false, functionType0.isRecordType());
      assertEquals(false, functionType0.isResolved());
      assertEquals(false, functionType0.isVoidType());
      assertEquals(false, functionType0.isEnumElementType());
      assertEquals(true, functionType0.isFunctionType());
      assertEquals(false, functionType0.isAllType());
      assertEquals(false, functionType0.isNoType());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertEquals(false, functionType0.isNoResolvedType());
      assertEquals(false, functionType0.isNominalType());
      assertEquals(false, functionType0.isUnionType());
      assertEquals(false, functionType0.isOrdinaryFunction());
      assertEquals(false, functionType0.isNumberValueType());
      assertEquals(false, functionType0.isEnumType());
      assertEquals(false, functionType0.isReturnTypeInferred());
      assertEquals(false, functionType0.isNullType());
      assertEquals(true, functionType0.isConstructor());
      assertEquals(false, functionType0.isInterface());
      assertEquals(false, functionType0.isBooleanValueType());
      assertEquals(false, functionType0.isTemplateType());
      assertEquals(false, functionType0.isFunctionPrototypeType());
      assertEquals(false, functionType0.isNoObjectType());
      assertEquals(true, functionType0.hasInstanceType());
      assertEquals(true, functionType0.canBeCalled());
      assertEquals(2147483647, functionType0.getMaxArguments());
      assertEquals(false, functionType0.isStringValueType());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertEquals(true, functionType0.hasCachedValues());
      assertNull(functionType0.getTemplateTypeName());
      assertEquals(false, functionType0.isCheckedUnknownType());
      
      AllType allType1 = (AllType)functionType0.findPropertyType(string1);
      assertSame(allType0, allType1);
      assertSame(allType1, allType0);
      assertNotNull(allType1);
      assertTrue(boolean0 == boolean1);
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, allType0.isUnionType());
      assertEquals(false, allType0.isNominalType());
      assertEquals(true, allType0.matchesObjectContext());
      assertEquals(false, allType0.isEnumElementType());
      assertEquals(false, allType0.isInterface());
      assertEquals(false, allType0.isOrdinaryFunction());
      assertEquals(false, allType0.isNullType());
      assertEquals(true, allType0.matchesStringContext());
      assertEquals(false, allType0.isNoResolvedType());
      assertEquals(false, allType0.isNoType());
      assertEquals(false, allType0.isStringValueType());
      assertEquals(false, allType0.isBooleanValueType());
      assertEquals(false, allType0.isEnumType());
      assertEquals(false, allType0.canBeCalled());
      assertEquals("<Any Type>", allType0.getDisplayName());
      assertEquals(true, allType0.isAllType());
      assertEquals(false, allType0.isResolved());
      assertEquals(false, allType0.isCheckedUnknownType());
      assertEquals(false, allType0.isFunctionPrototypeType());
      assertEquals(false, allType0.isNumberValueType());
      assertEquals(false, allType0.isRecordType());
      assertEquals(true, allType0.hasDisplayName());
      assertEquals(false, allType0.isFunctionType());
      assertEquals(false, allType0.isConstructor());
      assertEquals("*", allType0.toString());
      assertEquals(false, allType0.isNoObjectType());
      assertEquals(BooleanLiteralSet.BOTH, allType0.getPossibleToBooleanOutcomes());
      assertEquals(false, allType0.isVoidType());
      assertEquals(false, allType0.isTemplateType());
      assertEquals(false, functionType0.isRecordType());
      assertEquals(false, functionType0.isResolved());
      assertEquals(false, functionType0.isVoidType());
      assertEquals(false, functionType0.isEnumElementType());
      assertEquals(true, functionType0.isFunctionType());
      assertEquals(false, functionType0.isAllType());
      assertEquals(false, functionType0.isNoType());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertEquals(false, functionType0.isNoResolvedType());
      assertEquals(false, functionType0.isNominalType());
      assertEquals(false, functionType0.isUnionType());
      assertEquals(false, functionType0.isOrdinaryFunction());
      assertEquals(false, functionType0.isNumberValueType());
      assertEquals(false, functionType0.isEnumType());
      assertEquals(false, functionType0.isReturnTypeInferred());
      assertEquals(false, functionType0.isNullType());
      assertEquals(true, functionType0.isConstructor());
      assertEquals(false, functionType0.isInterface());
      assertEquals(false, functionType0.isBooleanValueType());
      assertEquals(false, functionType0.isTemplateType());
      assertEquals(false, functionType0.isFunctionPrototypeType());
      assertEquals(false, functionType0.isNoObjectType());
      assertEquals(true, functionType0.hasInstanceType());
      assertEquals(true, functionType0.canBeCalled());
      assertEquals(2147483647, functionType0.getMaxArguments());
      assertEquals(false, functionType0.isStringValueType());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertEquals(true, functionType0.hasCachedValues());
      assertNull(functionType0.getTemplateTypeName());
      assertEquals(false, functionType0.isCheckedUnknownType());
      assertEquals(false, allType1.isRecordType());
      assertEquals(false, allType1.canBeCalled());
      assertEquals(false, allType1.isNumberValueType());
      assertEquals("*", allType1.toString());
      assertEquals(false, allType1.isCheckedUnknownType());
      assertEquals(false, allType1.isNullType());
      assertEquals(false, allType1.isNoObjectType());
      assertEquals(true, allType1.hasDisplayName());
      assertEquals(false, allType1.isUnionType());
      assertEquals(false, allType1.isFunctionPrototypeType());
      assertEquals(false, allType1.isVoidType());
      assertEquals(false, allType1.isNoType());
      assertEquals(false, allType1.isNominalType());
      assertEquals(false, allType1.isResolved());
      assertEquals(false, allType1.isNoResolvedType());
      assertEquals(false, allType1.isFunctionType());
      assertEquals(false, allType1.isTemplateType());
      assertEquals(true, allType1.isAllType());
      assertEquals(false, allType1.isConstructor());
      assertEquals(true, allType1.matchesStringContext());
      assertEquals(false, allType1.isInterface());
      assertEquals(false, allType1.isStringValueType());
      assertEquals(false, allType1.isEnumElementType());
      assertEquals(false, allType1.isOrdinaryFunction());
      assertEquals(false, allType1.isBooleanValueType());
      assertEquals(false, allType1.isEnumType());
      assertEquals("<Any Type>", allType1.getDisplayName());
      assertEquals(true, allType1.matchesObjectContext());
      assertEquals(BooleanLiteralSet.BOTH, allType1.getPossibleToBooleanOutcomes());
  }

  @Test
  public void test29()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      HashMap<String, RecordTypeBuilder.RecordProperty> hashMap0 = new HashMap<String, RecordTypeBuilder.RecordProperty>();
      assertNotNull(hashMap0);
      assertEquals("{}", hashMap0.toString());
      assertEquals(0, hashMap0.size());
      assertEquals(true, hashMap0.isEmpty());
      
      RecordType recordType0 = new RecordType(jSTypeRegistry0, hashMap0);
      assertNotNull(recordType0);
      assertEquals(BooleanLiteralSet.TRUE, recordType0.getPossibleToBooleanOutcomes());
      assertEquals(false, recordType0.isUnionType());
      assertEquals(false, recordType0.isCheckedUnknownType());
      assertEquals(false, recordType0.isAllType());
      assertEquals(false, recordType0.isConstructor());
      assertEquals(false, recordType0.isFunctionType());
      assertEquals(false, recordType0.isNullType());
      assertEquals(false, recordType0.isVoidType());
      assertEquals(false, recordType0.isTemplateType());
      assertEquals(false, recordType0.isEnumElementType());
      assertEquals(false, recordType0.isFunctionPrototypeType());
      assertEquals(false, recordType0.isEnumType());
      assertEquals(false, recordType0.isInterface());
      assertEquals(false, recordType0.isNoType());
      assertEquals(false, recordType0.isResolved());
      assertEquals(false, recordType0.isNumberValueType());
      assertEquals(false, recordType0.isStringValueType());
      assertEquals(false, recordType0.isNominalType());
      assertEquals(false, recordType0.isBooleanValueType());
      assertEquals(true, recordType0.isRecordType());
      assertEquals(false, recordType0.isNoObjectType());
      assertEquals(false, recordType0.isNoResolvedType());
      assertEquals(false, recordType0.isOrdinaryFunction());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals("{}", hashMap0.toString());
      assertEquals(0, hashMap0.size());
      assertEquals(true, hashMap0.isEmpty());
      
      boolean boolean0 = recordType0.matchesUint32Context();
      assertFalse(boolean0);
      assertEquals(BooleanLiteralSet.TRUE, recordType0.getPossibleToBooleanOutcomes());
      assertEquals(false, recordType0.isUnionType());
      assertEquals(false, recordType0.isCheckedUnknownType());
      assertEquals(false, recordType0.isAllType());
      assertEquals(false, recordType0.isConstructor());
      assertEquals(false, recordType0.isFunctionType());
      assertEquals(false, recordType0.isNullType());
      assertEquals(false, recordType0.isVoidType());
      assertEquals(false, recordType0.isTemplateType());
      assertEquals(false, recordType0.isEnumElementType());
      assertEquals(false, recordType0.isFunctionPrototypeType());
      assertEquals(false, recordType0.isEnumType());
      assertEquals(false, recordType0.isInterface());
      assertEquals(false, recordType0.isNoType());
      assertEquals(false, recordType0.isResolved());
      assertEquals(false, recordType0.isNumberValueType());
      assertEquals(false, recordType0.isStringValueType());
      assertEquals(false, recordType0.isNominalType());
      assertEquals(false, recordType0.isBooleanValueType());
      assertEquals(true, recordType0.isRecordType());
      assertEquals(false, recordType0.isNoObjectType());
      assertEquals(false, recordType0.isNoResolvedType());
      assertEquals(false, recordType0.isOrdinaryFunction());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals("{}", hashMap0.toString());
      assertEquals(0, hashMap0.size());
      assertEquals(true, hashMap0.isEmpty());
      
      recordType0.setPrettyPrint(boolean0);
      assertEquals(BooleanLiteralSet.TRUE, recordType0.getPossibleToBooleanOutcomes());
      assertEquals(false, recordType0.isUnionType());
      assertEquals(false, recordType0.isCheckedUnknownType());
      assertEquals(false, recordType0.isAllType());
      assertEquals(false, recordType0.isConstructor());
      assertEquals(false, recordType0.isFunctionType());
      assertEquals(false, recordType0.isNullType());
      assertEquals(false, recordType0.isVoidType());
      assertEquals(false, recordType0.isTemplateType());
      assertEquals(false, recordType0.isEnumElementType());
      assertEquals(false, recordType0.isFunctionPrototypeType());
      assertEquals(false, recordType0.isEnumType());
      assertEquals(false, recordType0.isInterface());
      assertEquals(false, recordType0.isNoType());
      assertEquals(false, recordType0.isResolved());
      assertEquals(false, recordType0.isNumberValueType());
      assertEquals(false, recordType0.isStringValueType());
      assertEquals(false, recordType0.isNominalType());
      assertEquals(false, recordType0.isBooleanValueType());
      assertEquals(true, recordType0.isRecordType());
      assertEquals(false, recordType0.isNoObjectType());
      assertEquals(false, recordType0.isNoResolvedType());
      assertEquals(false, recordType0.isOrdinaryFunction());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals("{}", hashMap0.toString());
      assertEquals(0, hashMap0.size());
      assertEquals(true, hashMap0.isEmpty());
  }

  @Test
  public void test30()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      String string0 = "U:u^SYKlfT{K_-_qXs^";
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, string0);
      assertNotNull(errorFunctionType0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNull(errorFunctionType0.getTemplateTypeName());
      assertEquals(false, errorFunctionType0.isBooleanValueType());
      assertEquals(false, errorFunctionType0.isInterface());
      assertEquals(false, errorFunctionType0.isCheckedUnknownType());
      assertEquals(false, errorFunctionType0.isVoidType());
      assertEquals(false, errorFunctionType0.isUnionType());
      assertEquals(false, errorFunctionType0.isEnumElementType());
      assertEquals(false, errorFunctionType0.isNoType());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertEquals(true, errorFunctionType0.hasInstanceType());
      assertEquals(false, errorFunctionType0.isNoResolvedType());
      assertEquals(false, errorFunctionType0.isNoObjectType());
      assertEquals(true, errorFunctionType0.isFunctionType());
      assertEquals(false, errorFunctionType0.isFunctionPrototypeType());
      assertEquals(false, errorFunctionType0.isEnumType());
      assertEquals(true, errorFunctionType0.isConstructor());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertEquals(3, errorFunctionType0.getMaxArguments());
      assertEquals(false, errorFunctionType0.isAllType());
      assertEquals(false, errorFunctionType0.isRecordType());
      assertEquals(false, errorFunctionType0.isResolved());
      assertEquals(false, errorFunctionType0.isNumberValueType());
      assertEquals(false, errorFunctionType0.isNullType());
      assertEquals(true, errorFunctionType0.canBeCalled());
      assertEquals(false, errorFunctionType0.hasCachedValues());
      assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      assertEquals(false, errorFunctionType0.isStringValueType());
      assertEquals(false, errorFunctionType0.isReturnTypeInferred());
      assertEquals(false, errorFunctionType0.isTemplateType());
      assertEquals(false, errorFunctionType0.isNominalType());
      
      HashMap<String, RecordTypeBuilder.RecordProperty> hashMap0 = new HashMap<String, RecordTypeBuilder.RecordProperty>();
      assertNotNull(hashMap0);
      assertEquals(0, hashMap0.size());
      assertEquals("{}", hashMap0.toString());
      assertEquals(true, hashMap0.isEmpty());
      
      RecordType recordType0 = new RecordType(jSTypeRegistry0, hashMap0);
      assertNotNull(recordType0);
      assertEquals(0, hashMap0.size());
      assertEquals("{}", hashMap0.toString());
      assertEquals(true, hashMap0.isEmpty());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, recordType0.isStringValueType());
      assertEquals(BooleanLiteralSet.TRUE, recordType0.getPossibleToBooleanOutcomes());
      assertEquals(false, recordType0.isOrdinaryFunction());
      assertEquals(false, recordType0.isEnumType());
      assertEquals(false, recordType0.isVoidType());
      assertEquals(false, recordType0.isConstructor());
      assertEquals(false, recordType0.isAllType());
      assertEquals(true, recordType0.isRecordType());
      assertEquals(false, recordType0.isNullType());
      assertEquals(false, recordType0.isTemplateType());
      assertEquals(false, recordType0.isEnumElementType());
      assertEquals(false, recordType0.isNoType());
      assertEquals(false, recordType0.isUnionType());
      assertEquals(false, recordType0.isBooleanValueType());
      assertEquals(false, recordType0.isNumberValueType());
      assertEquals(false, recordType0.isNoObjectType());
      assertEquals(false, recordType0.isResolved());
      assertEquals(false, recordType0.isNominalType());
      assertEquals(false, recordType0.isFunctionPrototypeType());
      assertEquals(false, recordType0.isInterface());
      assertEquals(false, recordType0.isCheckedUnknownType());
      assertEquals(false, recordType0.isFunctionType());
      assertEquals(false, recordType0.isNoResolvedType());
      
      ErrorFunctionType errorFunctionType1 = (ErrorFunctionType)recordType0.getGreatestSubtype((JSType) errorFunctionType0);
      assertSame(errorFunctionType1, errorFunctionType0);
      assertSame(errorFunctionType0, errorFunctionType1);
      assertNotNull(errorFunctionType1);
      assertEquals(0, hashMap0.size());
      assertEquals("{}", hashMap0.toString());
      assertEquals(true, hashMap0.isEmpty());
      assertEquals(false, errorFunctionType1.isInterface());
      assertEquals(false, errorFunctionType1.isStringValueType());
      assertEquals(false, errorFunctionType1.isNoObjectType());
      assertEquals(3, errorFunctionType1.getMaxArguments());
      assertEquals(false, errorFunctionType1.isNumberValueType());
      assertNull(errorFunctionType1.getTemplateTypeName());
      assertEquals(false, errorFunctionType1.isVoidType());
      assertEquals(false, errorFunctionType1.isFunctionPrototypeType());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType1.getPossibleToBooleanOutcomes());
      assertEquals(true, errorFunctionType1.canBeCalled());
      assertEquals(false, errorFunctionType1.isBooleanValueType());
      assertEquals(false, errorFunctionType1.isCheckedUnknownType());
      assertEquals(false, errorFunctionType1.isNoResolvedType());
      assertEquals(false, errorFunctionType1.isReturnTypeInferred());
      assertEquals(true, errorFunctionType1.hasInstanceType());
      assertEquals(true, errorFunctionType1.isConstructor());
      assertEquals(true, errorFunctionType1.isFunctionType());
      assertEquals(true, errorFunctionType1.hasCachedValues());
      assertEquals(false, errorFunctionType1.isNominalType());
      assertEquals(false, errorFunctionType1.isEnumElementType());
      assertEquals(false, errorFunctionType1.isTemplateType());
      assertEquals(false, errorFunctionType1.isOrdinaryFunction());
      assertEquals(false, errorFunctionType1.isNullType());
      assertEquals(false, errorFunctionType1.isResolved());
      assertEquals(false, errorFunctionType1.isRecordType());
      assertEquals(false, errorFunctionType1.isUnionType());
      assertEquals(false, errorFunctionType1.isAllType());
      assertEquals(false, errorFunctionType1.isNoType());
      assertEquals(0, errorFunctionType1.getExtendedInterfacesCount());
      assertEquals(false, errorFunctionType1.isEnumType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, recordType0.isStringValueType());
      assertEquals(BooleanLiteralSet.TRUE, recordType0.getPossibleToBooleanOutcomes());
      assertEquals(false, recordType0.isOrdinaryFunction());
      assertEquals(false, recordType0.isEnumType());
      assertEquals(false, recordType0.isVoidType());
      assertEquals(false, recordType0.isConstructor());
      assertEquals(false, recordType0.isAllType());
      assertEquals(true, recordType0.isRecordType());
      assertEquals(false, recordType0.isNullType());
      assertEquals(false, recordType0.isTemplateType());
      assertEquals(false, recordType0.isEnumElementType());
      assertEquals(false, recordType0.isNoType());
      assertEquals(false, recordType0.isUnionType());
      assertEquals(false, recordType0.isBooleanValueType());
      assertEquals(false, recordType0.isNumberValueType());
      assertEquals(false, recordType0.isNoObjectType());
      assertEquals(false, recordType0.isResolved());
      assertEquals(false, recordType0.isNominalType());
      assertEquals(false, recordType0.isFunctionPrototypeType());
      assertEquals(false, recordType0.isInterface());
      assertEquals(false, recordType0.isCheckedUnknownType());
      assertEquals(false, recordType0.isFunctionType());
      assertEquals(false, recordType0.isNoResolvedType());
      assertNull(errorFunctionType0.getTemplateTypeName());
      assertEquals(false, errorFunctionType0.isBooleanValueType());
      assertEquals(true, errorFunctionType0.hasCachedValues());
      assertEquals(false, errorFunctionType0.isInterface());
      assertEquals(false, errorFunctionType0.isCheckedUnknownType());
      assertEquals(false, errorFunctionType0.isVoidType());
      assertEquals(false, errorFunctionType0.isUnionType());
      assertEquals(false, errorFunctionType0.isEnumElementType());
      assertEquals(false, errorFunctionType0.isNoType());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertEquals(true, errorFunctionType0.hasInstanceType());
      assertEquals(false, errorFunctionType0.isNoResolvedType());
      assertEquals(false, errorFunctionType0.isNoObjectType());
      assertEquals(true, errorFunctionType0.isFunctionType());
      assertEquals(false, errorFunctionType0.isFunctionPrototypeType());
      assertEquals(false, errorFunctionType0.isEnumType());
      assertEquals(true, errorFunctionType0.isConstructor());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertEquals(3, errorFunctionType0.getMaxArguments());
      assertEquals(false, errorFunctionType0.isAllType());
      assertEquals(false, errorFunctionType0.isRecordType());
      assertEquals(false, errorFunctionType0.isResolved());
      assertEquals(false, errorFunctionType0.isNumberValueType());
      assertEquals(false, errorFunctionType0.isNullType());
      assertEquals(true, errorFunctionType0.canBeCalled());
      assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      assertEquals(false, errorFunctionType0.isStringValueType());
      assertEquals(false, errorFunctionType0.isReturnTypeInferred());
      assertEquals(false, errorFunctionType0.isTemplateType());
      assertEquals(false, errorFunctionType0.isNominalType());
  }

  @Test
  public void test31()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      boolean boolean0 = true;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0, boolean0);
      assertNotNull(jSTypeRegistry0);
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      assertNotNull(noResolvedType0);
      assertEquals(true, noResolvedType0.isConstructor());
      assertEquals(false, noResolvedType0.isUnionType());
      assertEquals(false, noResolvedType0.isNumberValueType());
      assertEquals(2147483647, noResolvedType0.getPropertiesCount());
      assertEquals(true, noResolvedType0.matchesStringContext());
      assertEquals(false, noResolvedType0.isStringValueType());
      assertEquals(false, noResolvedType0.isInterface());
      assertEquals(false, noResolvedType0.isOrdinaryFunction());
      assertEquals(false, noResolvedType0.isFunctionType());
      assertEquals(false, noResolvedType0.isReturnTypeInferred());
      assertEquals(false, noResolvedType0.isRecordType());
      assertEquals(false, noResolvedType0.isCheckedUnknownType());
      assertEquals(false, noResolvedType0.isNominalType());
      assertEquals(2147483647, noResolvedType0.getMaxArguments());
      assertEquals(false, noResolvedType0.isNullType());
      assertEquals(false, noResolvedType0.isNoObjectType());
      assertEquals(false, noResolvedType0.hasCachedValues());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noResolvedType0.isTemplateType());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertEquals(false, noResolvedType0.isEnumType());
      assertEquals(false, noResolvedType0.isFunctionPrototypeType());
      assertEquals(false, noResolvedType0.isEnumElementType());
      assertEquals(true, noResolvedType0.isNullable());
      assertEquals(true, noResolvedType0.matchesNumberContext());
      assertEquals(false, noResolvedType0.isVoidType());
      assertEquals(true, noResolvedType0.hasInstanceType());
      assertEquals(false, noResolvedType0.isResolved());
      assertNull(noResolvedType0.getReferenceName());
      assertEquals(false, noResolvedType0.isAllType());
      assertNull(noResolvedType0.getTemplateTypeName());
      assertEquals(false, noResolvedType0.isBooleanValueType());
      assertEquals(true, noResolvedType0.matchesObjectContext());
      assertEquals(true, noResolvedType0.canBeCalled());
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      FunctionType functionType0 = jSTypeRegistry0.createFunctionTypeWithNewReturnType((FunctionType) noResolvedType0, (JSType) noResolvedType0);
      assertNotNull(functionType0);
      assertEquals(true, noResolvedType0.isConstructor());
      assertEquals(false, noResolvedType0.isUnionType());
      assertEquals(false, noResolvedType0.isNumberValueType());
      assertEquals(2147483647, noResolvedType0.getPropertiesCount());
      assertEquals(true, noResolvedType0.matchesStringContext());
      assertEquals(false, noResolvedType0.isStringValueType());
      assertEquals(false, noResolvedType0.isInterface());
      assertEquals(false, noResolvedType0.isOrdinaryFunction());
      assertEquals(false, noResolvedType0.isFunctionType());
      assertEquals(false, noResolvedType0.isReturnTypeInferred());
      assertEquals(false, noResolvedType0.isRecordType());
      assertEquals(false, noResolvedType0.isCheckedUnknownType());
      assertEquals(false, noResolvedType0.isNominalType());
      assertEquals(2147483647, noResolvedType0.getMaxArguments());
      assertEquals(false, noResolvedType0.isNullType());
      assertEquals(false, noResolvedType0.isNoObjectType());
      assertEquals(false, noResolvedType0.hasCachedValues());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noResolvedType0.isTemplateType());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertEquals(false, noResolvedType0.isEnumType());
      assertEquals(false, noResolvedType0.isFunctionPrototypeType());
      assertEquals(false, noResolvedType0.isEnumElementType());
      assertEquals(true, noResolvedType0.isNullable());
      assertEquals(true, noResolvedType0.matchesNumberContext());
      assertEquals(false, noResolvedType0.isVoidType());
      assertEquals(true, noResolvedType0.hasInstanceType());
      assertEquals(false, noResolvedType0.isResolved());
      assertNull(noResolvedType0.getReferenceName());
      assertEquals(false, noResolvedType0.isAllType());
      assertNull(noResolvedType0.getTemplateTypeName());
      assertEquals(false, noResolvedType0.isBooleanValueType());
      assertEquals(true, noResolvedType0.matchesObjectContext());
      assertEquals(true, noResolvedType0.canBeCalled());
      assertEquals(false, functionType0.isNumberValueType());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, functionType0.isEnumType());
      assertEquals(2147483647, functionType0.getMaxArguments());
      assertEquals(false, functionType0.isNominalType());
      assertEquals(false, functionType0.isTemplateType());
      assertEquals(false, functionType0.isStringValueType());
      assertEquals(false, functionType0.isReturnTypeInferred());
      assertEquals(false, functionType0.isEnumElementType());
      assertEquals(false, functionType0.isUnionType());
      assertEquals(false, functionType0.isNoResolvedType());
      assertEquals(true, functionType0.isConstructor());
      assertEquals(false, functionType0.isNoType());
      assertEquals(true, functionType0.isFunctionType());
      assertEquals(false, functionType0.isOrdinaryFunction());
      assertEquals(false, functionType0.hasCachedValues());
      assertEquals(false, functionType0.isAllType());
      assertEquals(false, functionType0.isNoObjectType());
      assertEquals(false, functionType0.isNullType());
      assertEquals(false, functionType0.isCheckedUnknownType());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertNull(functionType0.getTemplateTypeName());
      assertEquals(false, functionType0.isResolved());
      assertEquals(false, functionType0.isFunctionPrototypeType());
      assertEquals(true, functionType0.hasInstanceType());
      assertEquals(false, functionType0.isVoidType());
      assertEquals(false, functionType0.isBooleanValueType());
      assertEquals(true, functionType0.canBeCalled());
      assertEquals(false, functionType0.isInterface());
      assertEquals(false, functionType0.isRecordType());
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      boolean boolean1 = functionType0.matchesObjectContext();
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean0 == boolean1);
      assertEquals(true, noResolvedType0.isConstructor());
      assertEquals(false, noResolvedType0.isUnionType());
      assertEquals(false, noResolvedType0.isNumberValueType());
      assertEquals(2147483647, noResolvedType0.getPropertiesCount());
      assertEquals(true, noResolvedType0.matchesStringContext());
      assertEquals(false, noResolvedType0.isStringValueType());
      assertEquals(false, noResolvedType0.isInterface());
      assertEquals(false, noResolvedType0.isOrdinaryFunction());
      assertEquals(false, noResolvedType0.isFunctionType());
      assertEquals(false, noResolvedType0.isReturnTypeInferred());
      assertEquals(false, noResolvedType0.isRecordType());
      assertEquals(false, noResolvedType0.isCheckedUnknownType());
      assertEquals(false, noResolvedType0.isNominalType());
      assertEquals(2147483647, noResolvedType0.getMaxArguments());
      assertEquals(false, noResolvedType0.isNullType());
      assertEquals(false, noResolvedType0.isNoObjectType());
      assertEquals(false, noResolvedType0.hasCachedValues());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noResolvedType0.isTemplateType());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertEquals(false, noResolvedType0.isEnumType());
      assertEquals(false, noResolvedType0.isFunctionPrototypeType());
      assertEquals(false, noResolvedType0.isEnumElementType());
      assertEquals(true, noResolvedType0.isNullable());
      assertEquals(true, noResolvedType0.matchesNumberContext());
      assertEquals(false, noResolvedType0.isVoidType());
      assertEquals(true, noResolvedType0.hasInstanceType());
      assertEquals(false, noResolvedType0.isResolved());
      assertNull(noResolvedType0.getReferenceName());
      assertEquals(false, noResolvedType0.isAllType());
      assertNull(noResolvedType0.getTemplateTypeName());
      assertEquals(false, noResolvedType0.isBooleanValueType());
      assertEquals(true, noResolvedType0.matchesObjectContext());
      assertEquals(true, noResolvedType0.canBeCalled());
      assertEquals(false, functionType0.isNumberValueType());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, functionType0.isEnumType());
      assertEquals(2147483647, functionType0.getMaxArguments());
      assertEquals(false, functionType0.isNominalType());
      assertEquals(false, functionType0.isTemplateType());
      assertEquals(false, functionType0.isStringValueType());
      assertEquals(false, functionType0.isReturnTypeInferred());
      assertEquals(false, functionType0.isEnumElementType());
      assertEquals(false, functionType0.isUnionType());
      assertEquals(false, functionType0.isNoResolvedType());
      assertEquals(true, functionType0.isConstructor());
      assertEquals(false, functionType0.isNoType());
      assertEquals(true, functionType0.isFunctionType());
      assertEquals(false, functionType0.isOrdinaryFunction());
      assertEquals(false, functionType0.hasCachedValues());
      assertEquals(false, functionType0.isAllType());
      assertEquals(false, functionType0.isNoObjectType());
      assertEquals(false, functionType0.isNullType());
      assertEquals(false, functionType0.isCheckedUnknownType());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertNull(functionType0.getTemplateTypeName());
      assertEquals(false, functionType0.isResolved());
      assertEquals(false, functionType0.isFunctionPrototypeType());
      assertEquals(true, functionType0.hasInstanceType());
      assertEquals(false, functionType0.isVoidType());
      assertEquals(false, functionType0.isBooleanValueType());
      assertEquals(true, functionType0.canBeCalled());
      assertEquals(false, functionType0.isInterface());
      assertEquals(false, functionType0.isRecordType());
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
  }

  @Test
  public void test32()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      HashMap<String, RecordTypeBuilder.RecordProperty> hashMap0 = new HashMap<String, RecordTypeBuilder.RecordProperty>();
      assertNotNull(hashMap0);
      assertEquals("{}", hashMap0.toString());
      assertEquals(0, hashMap0.size());
      assertEquals(true, hashMap0.isEmpty());
      
      RecordType recordType0 = new RecordType(jSTypeRegistry0, hashMap0);
      assertNotNull(recordType0);
      assertEquals(false, recordType0.isNominalType());
      assertEquals(false, recordType0.isNoType());
      assertEquals(false, recordType0.isEnumElementType());
      assertEquals(false, recordType0.isOrdinaryFunction());
      assertEquals(false, recordType0.isFunctionType());
      assertEquals(false, recordType0.isBooleanValueType());
      assertEquals(false, recordType0.isNumberValueType());
      assertEquals(false, recordType0.isAllType());
      assertEquals(false, recordType0.isStringValueType());
      assertEquals(false, recordType0.isConstructor());
      assertEquals(false, recordType0.isFunctionPrototypeType());
      assertEquals(false, recordType0.isEnumType());
      assertEquals(false, recordType0.isUnionType());
      assertEquals(BooleanLiteralSet.TRUE, recordType0.getPossibleToBooleanOutcomes());
      assertEquals(false, recordType0.isNoResolvedType());
      assertEquals(false, recordType0.isInterface());
      assertEquals(false, recordType0.isNoObjectType());
      assertEquals(false, recordType0.isResolved());
      assertEquals(false, recordType0.isNullType());
      assertEquals(false, recordType0.isVoidType());
      assertEquals(true, recordType0.isRecordType());
      assertEquals(false, recordType0.isCheckedUnknownType());
      assertEquals(false, recordType0.isTemplateType());
      assertEquals("{}", hashMap0.toString());
      assertEquals(0, hashMap0.size());
      assertEquals(true, hashMap0.isEmpty());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      boolean boolean0 = recordType0.canBeCalled();
      assertFalse(boolean0);
      assertEquals(false, recordType0.isNominalType());
      assertEquals(false, recordType0.isNoType());
      assertEquals(false, recordType0.isEnumElementType());
      assertEquals(false, recordType0.isOrdinaryFunction());
      assertEquals(false, recordType0.isFunctionType());
      assertEquals(false, recordType0.isBooleanValueType());
      assertEquals(false, recordType0.isNumberValueType());
      assertEquals(false, recordType0.isAllType());
      assertEquals(false, recordType0.isStringValueType());
      assertEquals(false, recordType0.isConstructor());
      assertEquals(false, recordType0.isFunctionPrototypeType());
      assertEquals(false, recordType0.isEnumType());
      assertEquals(false, recordType0.isUnionType());
      assertEquals(BooleanLiteralSet.TRUE, recordType0.getPossibleToBooleanOutcomes());
      assertEquals(false, recordType0.isNoResolvedType());
      assertEquals(false, recordType0.isInterface());
      assertEquals(false, recordType0.isNoObjectType());
      assertEquals(false, recordType0.isResolved());
      assertEquals(false, recordType0.isNullType());
      assertEquals(false, recordType0.isVoidType());
      assertEquals(true, recordType0.isRecordType());
      assertEquals(false, recordType0.isCheckedUnknownType());
      assertEquals(false, recordType0.isTemplateType());
      assertEquals("{}", hashMap0.toString());
      assertEquals(0, hashMap0.size());
      assertEquals(true, hashMap0.isEmpty());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
  }

  @Test
  public void test33()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      String string0 = "com.google.javascript.rhino.jstype.PrototypeObjectType";
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, string0);
      assertNotNull(errorFunctionType0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, errorFunctionType0.isAllType());
      assertEquals(false, errorFunctionType0.isNullType());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertEquals(false, errorFunctionType0.isNoObjectType());
      assertEquals(true, errorFunctionType0.canBeCalled());
      assertEquals(false, errorFunctionType0.isUnionType());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, errorFunctionType0.isEnumType());
      assertEquals(false, errorFunctionType0.isFunctionPrototypeType());
      assertEquals(false, errorFunctionType0.isTemplateType());
      assertEquals(false, errorFunctionType0.isRecordType());
      assertEquals(true, errorFunctionType0.hasInstanceType());
      assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      assertEquals(false, errorFunctionType0.isVoidType());
      assertEquals(false, errorFunctionType0.isReturnTypeInferred());
      assertEquals(false, errorFunctionType0.isNominalType());
      assertEquals(false, errorFunctionType0.isStringValueType());
      assertEquals(3, errorFunctionType0.getMaxArguments());
      assertEquals(true, errorFunctionType0.isFunctionType());
      assertEquals(false, errorFunctionType0.isNoType());
      assertEquals(false, errorFunctionType0.isCheckedUnknownType());
      assertEquals(false, errorFunctionType0.isInterface());
      assertEquals(false, errorFunctionType0.hasCachedValues());
      assertEquals(false, errorFunctionType0.isNoResolvedType());
      assertEquals(true, errorFunctionType0.isConstructor());
      assertEquals(false, errorFunctionType0.isNumberValueType());
      assertEquals(false, errorFunctionType0.isResolved());
      assertEquals(false, errorFunctionType0.isBooleanValueType());
      assertEquals(false, errorFunctionType0.isEnumElementType());
      assertNull(errorFunctionType0.getTemplateTypeName());
      
      Set<String> set0 = errorFunctionType0.getOwnPropertyNames();
      assertNotNull(set0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(true, set0.isEmpty());
      assertEquals(0, set0.size());
      assertEquals(false, errorFunctionType0.isAllType());
      assertEquals(false, errorFunctionType0.isNullType());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertEquals(false, errorFunctionType0.isNoObjectType());
      assertEquals(true, errorFunctionType0.canBeCalled());
      assertEquals(false, errorFunctionType0.isUnionType());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, errorFunctionType0.isEnumType());
      assertEquals(false, errorFunctionType0.isFunctionPrototypeType());
      assertEquals(false, errorFunctionType0.isTemplateType());
      assertEquals(false, errorFunctionType0.isRecordType());
      assertEquals(true, errorFunctionType0.hasInstanceType());
      assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      assertEquals(false, errorFunctionType0.isVoidType());
      assertEquals(false, errorFunctionType0.isReturnTypeInferred());
      assertEquals(false, errorFunctionType0.isNominalType());
      assertEquals(false, errorFunctionType0.isStringValueType());
      assertEquals(3, errorFunctionType0.getMaxArguments());
      assertEquals(true, errorFunctionType0.isFunctionType());
      assertEquals(false, errorFunctionType0.isNoType());
      assertEquals(false, errorFunctionType0.isCheckedUnknownType());
      assertEquals(false, errorFunctionType0.isInterface());
      assertEquals(false, errorFunctionType0.hasCachedValues());
      assertEquals(false, errorFunctionType0.isNoResolvedType());
      assertEquals(true, errorFunctionType0.isConstructor());
      assertEquals(false, errorFunctionType0.isNumberValueType());
      assertEquals(false, errorFunctionType0.isResolved());
      assertEquals(false, errorFunctionType0.isBooleanValueType());
      assertEquals(false, errorFunctionType0.isEnumElementType());
      assertNull(errorFunctionType0.getTemplateTypeName());
  }
}
