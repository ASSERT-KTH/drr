/*
 * This file was automatically generated by EvoSuite
 * Fri Dec 12 00:45:51 GMT 2014
 */

package com.google.javascript.jscomp;

import static org.junit.Assert.*; import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.junit.Test;
import com.google.javascript.jscomp.Compiler;
import com.google.javascript.jscomp.CompilerOptions;
import com.google.javascript.jscomp.TypedScopeCreator;



import org.junit.runner.RunWith;


public class TypedScopeCreatorEvoSuite_branch_Test  {

  @Test
  public void test0()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      assertNotNull(compiler0);
      
      CompilerOptions compilerOptions0 = new CompilerOptions();
      assertFalse(compilerOptions0.removeTryCatchFinally);
      assertFalse(compilerOptions0.markNoSideEffectCalls);
      assertFalse(compilerOptions0.exportTestFunctions);
      assertFalse(compilerOptions0.collapseProperties);
      assertFalse(compilerOptions0.coalesceVariableNames);
      assertFalse(compilerOptions0.inferTypesInGlobalScope);
      assertFalse(compilerOptions0.printInputDelimiter);
      assertFalse(compilerOptions0.specializeInitialModule);
      assertFalse(compilerOptions0.optimizeArgumentsArray);
      assertFalse(compilerOptions0.recordFunctionInformation);
      assertFalse(compilerOptions0.inlineLocalFunctions);
      assertFalse(compilerOptions0.tightenTypes);
      assertFalse(compilerOptions0.foldConstants);
      assertFalse(compilerOptions0.inlineFunctions);
      assertFalse(compilerOptions0.checkSymbols);
      assertFalse(compilerOptions0.removeEmptyFunctions);
      assertFalse(compilerOptions0.groupVariableDeclarations);
      assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
      assertFalse(compilerOptions0.flowSensitiveInlineVariables);
      assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
      assertFalse(compilerOptions0.checkEs5Strict);
      assertFalse(compilerOptions0.checkControlStructures);
      assertFalse(compilerOptions0.rewriteFunctionExpressions);
      assertFalse(compilerOptions0.ideMode);
      assertFalse(compilerOptions0.optimizeReturns);
      assertFalse(compilerOptions0.assumeClosuresOnlyCaptureReferences);
      assertFalse(compilerOptions0.inlineGetters);
      assertFalse(compilerOptions0.generatePseudoNames);
      assertFalse(compilerOptions0.removeUnusedLocalVars);
      assertFalse(compilerOptions0.lineBreak);
      assertFalse(compilerOptions0.checkTypes);
      assertFalse(compilerOptions0.inlineConstantVars);
      assertFalse(compilerOptions0.generateExports);
      assertFalse(compilerOptions0.collapseObjectLiterals);
      assertFalse(compilerOptions0.collapseVariableDeclarations);
      assertFalse(compilerOptions0.checkCaja);
      assertFalse(compilerOptions0.markAsCompiled);
      assertFalse(compilerOptions0.allowLegacyJsMessages);
      assertFalse(compilerOptions0.devirtualizePrototypeMethods);
      assertFalse(compilerOptions0.collapseAnonymousFunctions);
      assertFalse(compilerOptions0.instrumentForCoverage);
      assertFalse(compilerOptions0.disambiguateProperties);
      assertFalse(compilerOptions0.crossModuleCodeMotion);
      assertFalse(compilerOptions0.aliasKeywords);
      assertFalse(compilerOptions0.deadAssignmentElimination);
      assertFalse(compilerOptions0.optimizeParameters);
      assertFalse(compilerOptions0.aliasAllStrings);
      assertFalse(compilerOptions0.aliasExternals);
      assertFalse(compilerOptions0.reserveRawExports);
      assertFalse(compilerOptions0.inlineLocalVariables);
      assertFalse(compilerOptions0.smartNameRemoval);
      assertFalse(compilerOptions0.closurePass);
      assertFalse(compilerOptions0.optimizeCalls);
      assertFalse(compilerOptions0.removeDeadCode);
      assertFalse(compilerOptions0.instrumentForCoverageOnly);
      assertFalse(compilerOptions0.crossModuleMethodMotion);
      assertFalse(compilerOptions0.convertToDottedProperties);
      assertFalse(compilerOptions0.strictMessageReplacement);
      assertFalse(compilerOptions0.computeFunctionSideEffects);
      assertFalse(compilerOptions0.gatherCssNames);
      assertFalse(compilerOptions0.checkDuplicateMessages);
      assertFalse(compilerOptions0.checkTypedPropertyCalls);
      assertFalse(compilerOptions0.checkSuspiciousCode);
      assertFalse(compilerOptions0.moveFunctionDeclarations);
      assertFalse(compilerOptions0.removeUnusedVars);
      assertFalse(compilerOptions0.inlineVariables);
      assertFalse(compilerOptions0.labelRenaming);
      assertFalse(compilerOptions0.prettyPrint);
      assertFalse(compilerOptions0.ignoreCajaProperties);
      assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
      assertFalse(compilerOptions0.ambiguateProperties);
      assertEquals(false, compilerOptions0.isExternExportsEnabled());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compilerOptions0.getLanguageIn());
      assertNull(compilerOptions0.getLanguageOut());
      assertEquals(false, compilerOptions0.assumeClosuresOnlyCaptureReferences());
      assertEquals(CompilerOptions.TweakProcessing.OFF, compilerOptions0.getTweakProcessing());
      assertEquals(false, compilerOptions0.assumeStrictThis());
      assertEquals(false, compilerOptions0.getInferTypes());
      assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
      assertNotNull(compilerOptions0);
      
      compiler0.options = compilerOptions0;
      assertFalse(compilerOptions0.removeTryCatchFinally);
      assertFalse(compilerOptions0.markNoSideEffectCalls);
      assertFalse(compilerOptions0.exportTestFunctions);
      assertFalse(compilerOptions0.collapseProperties);
      assertFalse(compilerOptions0.coalesceVariableNames);
      assertFalse(compilerOptions0.inferTypesInGlobalScope);
      assertFalse(compilerOptions0.printInputDelimiter);
      assertFalse(compilerOptions0.specializeInitialModule);
      assertFalse(compilerOptions0.optimizeArgumentsArray);
      assertFalse(compilerOptions0.recordFunctionInformation);
      assertFalse(compilerOptions0.inlineLocalFunctions);
      assertFalse(compilerOptions0.tightenTypes);
      assertFalse(compilerOptions0.foldConstants);
      assertFalse(compilerOptions0.inlineFunctions);
      assertFalse(compilerOptions0.checkSymbols);
      assertFalse(compilerOptions0.removeEmptyFunctions);
      assertFalse(compilerOptions0.groupVariableDeclarations);
      assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
      assertFalse(compilerOptions0.flowSensitiveInlineVariables);
      assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
      assertFalse(compilerOptions0.checkEs5Strict);
      assertFalse(compilerOptions0.checkControlStructures);
      assertFalse(compilerOptions0.rewriteFunctionExpressions);
      assertFalse(compilerOptions0.ideMode);
      assertFalse(compilerOptions0.optimizeReturns);
      assertFalse(compilerOptions0.assumeClosuresOnlyCaptureReferences);
      assertFalse(compilerOptions0.inlineGetters);
      assertFalse(compilerOptions0.generatePseudoNames);
      assertFalse(compilerOptions0.removeUnusedLocalVars);
      assertFalse(compilerOptions0.lineBreak);
      assertFalse(compilerOptions0.checkTypes);
      assertFalse(compilerOptions0.inlineConstantVars);
      assertFalse(compilerOptions0.generateExports);
      assertFalse(compilerOptions0.collapseObjectLiterals);
      assertFalse(compilerOptions0.collapseVariableDeclarations);
      assertFalse(compilerOptions0.checkCaja);
      assertFalse(compilerOptions0.markAsCompiled);
      assertFalse(compilerOptions0.allowLegacyJsMessages);
      assertFalse(compilerOptions0.devirtualizePrototypeMethods);
      assertFalse(compilerOptions0.collapseAnonymousFunctions);
      assertFalse(compilerOptions0.instrumentForCoverage);
      assertFalse(compilerOptions0.disambiguateProperties);
      assertFalse(compilerOptions0.crossModuleCodeMotion);
      assertFalse(compilerOptions0.aliasKeywords);
      assertFalse(compilerOptions0.deadAssignmentElimination);
      assertFalse(compilerOptions0.optimizeParameters);
      assertFalse(compilerOptions0.aliasAllStrings);
      assertFalse(compilerOptions0.aliasExternals);
      assertFalse(compilerOptions0.reserveRawExports);
      assertFalse(compilerOptions0.inlineLocalVariables);
      assertFalse(compilerOptions0.smartNameRemoval);
      assertFalse(compilerOptions0.closurePass);
      assertFalse(compilerOptions0.optimizeCalls);
      assertFalse(compilerOptions0.removeDeadCode);
      assertFalse(compilerOptions0.instrumentForCoverageOnly);
      assertFalse(compilerOptions0.crossModuleMethodMotion);
      assertFalse(compilerOptions0.convertToDottedProperties);
      assertFalse(compilerOptions0.strictMessageReplacement);
      assertFalse(compilerOptions0.computeFunctionSideEffects);
      assertFalse(compilerOptions0.gatherCssNames);
      assertFalse(compilerOptions0.checkDuplicateMessages);
      assertFalse(compilerOptions0.checkTypedPropertyCalls);
      assertFalse(compilerOptions0.checkSuspiciousCode);
      assertFalse(compilerOptions0.moveFunctionDeclarations);
      assertFalse(compilerOptions0.removeUnusedVars);
      assertFalse(compilerOptions0.inlineVariables);
      assertFalse(compilerOptions0.labelRenaming);
      assertFalse(compilerOptions0.prettyPrint);
      assertFalse(compilerOptions0.ignoreCajaProperties);
      assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
      assertFalse(compilerOptions0.ambiguateProperties);
      assertFalse(compiler0.options.crossModuleMethodMotion);
      assertFalse(compiler0.options.inlineGetters);
      assertFalse(compiler0.options.checkSymbols);
      assertFalse(compiler0.options.inlineLocalFunctions);
      assertFalse(compiler0.options.aliasAllStrings);
      assertFalse(compiler0.options.instrumentForCoverageOnly);
      assertFalse(compiler0.options.allowLegacyJsMessages);
      assertFalse(compiler0.options.checkCaja);
      assertFalse(compiler0.options.generatePseudoNames);
      assertFalse(compiler0.options.ignoreCajaProperties);
      assertFalse(compiler0.options.ambiguateProperties);
      assertFalse(compiler0.options.labelRenaming);
      assertFalse(compiler0.options.checkTypedPropertyCalls);
      assertFalse(compiler0.options.collapseVariableDeclarations);
      assertFalse(compiler0.options.reserveRawExports);
      assertFalse(compiler0.options.smartNameRemoval);
      assertFalse(compiler0.options.inlineConstantVars);
      assertFalse(compiler0.options.exportTestFunctions);
      assertFalse(compiler0.options.checkEs5Strict);
      assertFalse(compiler0.options.optimizeReturns);
      assertFalse(compiler0.options.removeUnusedLocalVars);
      assertFalse(compiler0.options.closurePass);
      assertFalse(compiler0.options.ideMode);
      assertFalse(compiler0.options.assumeClosuresOnlyCaptureReferences);
      assertFalse(compiler0.options.removeTryCatchFinally);
      assertFalse(compiler0.options.checkDuplicateMessages);
      assertFalse(compiler0.options.strictMessageReplacement);
      assertFalse(compiler0.options.collapseObjectLiterals);
      assertFalse(compiler0.options.extractPrototypeMemberDeclarations);
      assertFalse(compiler0.options.optimizeArgumentsArray);
      assertFalse(compiler0.options.optimizeCalls);
      assertFalse(compiler0.options.aliasExternals);
      assertFalse(compiler0.options.checkTypes);
      assertFalse(compiler0.options.tightenTypes);
      assertFalse(compiler0.options.moveFunctionDeclarations);
      assertFalse(compiler0.options.printInputDelimiter);
      assertFalse(compiler0.options.optimizeParameters);
      assertFalse(compiler0.options.inlineFunctions);
      assertFalse(compiler0.options.crossModuleCodeMotion);
      assertFalse(compiler0.options.gatherCssNames);
      assertFalse(compiler0.options.lineBreak);
      assertFalse(compiler0.options.checkSuspiciousCode);
      assertFalse(compiler0.options.removeUnusedVars);
      assertFalse(compiler0.options.markNoSideEffectCalls);
      assertFalse(compiler0.options.inlineLocalVariables);
      assertFalse(compiler0.options.recordFunctionInformation);
      assertFalse(compiler0.options.inferTypesInGlobalScope);
      assertFalse(compiler0.options.disambiguateProperties);
      assertFalse(compiler0.options.specializeInitialModule);
      assertFalse(compiler0.options.convertToDottedProperties);
      assertFalse(compiler0.options.coalesceVariableNames);
      assertFalse(compiler0.options.removeEmptyFunctions);
      assertFalse(compiler0.options.checkControlStructures);
      assertFalse(compiler0.options.devirtualizePrototypeMethods);
      assertFalse(compiler0.options.collapseProperties);
      assertFalse(compiler0.options.flowSensitiveInlineVariables);
      assertFalse(compiler0.options.markAsCompiled);
      assertFalse(compiler0.options.groupVariableDeclarations);
      assertFalse(compiler0.options.inlineVariables);
      assertFalse(compiler0.options.removeUnusedPrototypeProperties);
      assertFalse(compiler0.options.computeFunctionSideEffects);
      assertFalse(compiler0.options.instrumentForCoverage);
      assertFalse(compiler0.options.prettyPrint);
      assertFalse(compiler0.options.deadAssignmentElimination);
      assertFalse(compiler0.options.aliasKeywords);
      assertFalse(compiler0.options.collapseAnonymousFunctions);
      assertFalse(compiler0.options.rewriteFunctionExpressions);
      assertFalse(compiler0.options.foldConstants);
      assertFalse(compiler0.options.removeUnusedPrototypePropertiesInExterns);
      assertFalse(compiler0.options.generateExports);
      assertFalse(compiler0.options.removeDeadCode);
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(false, compilerOptions0.isExternExportsEnabled());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compilerOptions0.getLanguageIn());
      assertNull(compilerOptions0.getLanguageOut());
      assertEquals(false, compilerOptions0.assumeClosuresOnlyCaptureReferences());
      assertEquals(CompilerOptions.TweakProcessing.OFF, compilerOptions0.getTweakProcessing());
      assertEquals(false, compilerOptions0.assumeStrictThis());
      assertEquals(false, compilerOptions0.getInferTypes());
      assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.options.getLanguageIn());
      assertEquals(false, compiler0.options.assumeClosuresOnlyCaptureReferences());
      assertEquals(CompilerOptions.TweakProcessing.OFF, compiler0.options.getTweakProcessing());
      assertEquals(false, compiler0.options.assumeStrictThis());
      assertNull(compiler0.options.getLanguageOut());
      assertEquals(false, compiler0.options.isExternExportsEnabled());
      assertEquals(false, compiler0.options.shouldColorizeErrorOutput());
      assertEquals(false, compiler0.options.getInferTypes());
      assertNotNull(compiler0.options);
      
      TypedScopeCreator typedScopeCreator0 = null;
      try {
        typedScopeCreator0 = new TypedScopeCreator(compiler0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
}
