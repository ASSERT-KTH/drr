/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 20:32:05 GMT 2014
 */

package com.google.javascript.jscomp;

import static org.junit.Assert.*; import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.junit.Test;
import com.google.javascript.jscomp.Compiler;
import com.google.javascript.jscomp.CompilerOptions;
import com.google.javascript.jscomp.Scope;
import com.google.javascript.jscomp.TypedScopeCreator;
import com.google.javascript.rhino.Node;



import org.evosuite.runtime.mock.java.lang.MockRuntimeException;
import org.junit.runner.RunWith;


public class TypedScopeCreatorEvoSuite_branch_Test  {

  @Test
  public void test0()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertNotNull(compiler0);
      
      CompilerOptions compilerOptions0 = compiler0.newCompilerOptions();
      assertFalse(compilerOptions0.inlineVariables);
      assertFalse(compilerOptions0.removeDeadCode);
      assertFalse(compilerOptions0.removeUnusedClassProperties);
      assertFalse(compilerOptions0.removeUnusedLocalVars);
      assertFalse(compilerOptions0.crossModuleMethodMotion);
      assertFalse(compilerOptions0.exportTestFunctions);
      assertFalse(compilerOptions0.preferLineBreakAtEndOfFile);
      assertFalse(compilerOptions0.computeFunctionSideEffects);
      assertFalse(compilerOptions0.generateExports);
      assertFalse(compilerOptions0.foldConstants);
      assertFalse(compilerOptions0.ideMode);
      assertFalse(compilerOptions0.disambiguateProperties);
      assertFalse(compilerOptions0.coalesceVariableNames);
      assertFalse(compilerOptions0.removeTryCatchFinally);
      assertFalse(compilerOptions0.optimizeReturns);
      assertFalse(compilerOptions0.optimizeParameters);
      assertFalse(compilerOptions0.flowSensitiveInlineVariables);
      assertFalse(compilerOptions0.rewriteFunctionExpressions);
      assertFalse(compilerOptions0.optimizeCalls);
      assertFalse(compilerOptions0.inlineLocalFunctions);
      assertFalse(compilerOptions0.optimizeArgumentsArray);
      assertFalse(compilerOptions0.aliasExternals);
      assertFalse(compilerOptions0.prettyPrint);
      assertFalse(compilerOptions0.convertToDottedProperties);
      assertFalse(compilerOptions0.reserveRawExports);
      assertFalse(compilerOptions0.closurePass);
      assertFalse(compilerOptions0.collapseAnonymousFunctions);
      assertFalse(compilerOptions0.markNoSideEffectCalls);
      assertFalse(compilerOptions0.inlineFunctions);
      assertFalse(compilerOptions0.gatherCssNames);
      assertFalse(compilerOptions0.smartNameRemoval);
      assertFalse(compilerOptions0.ambiguateProperties);
      assertFalse(compilerOptions0.checkControlStructures);
      assertFalse(compilerOptions0.removeUnusedVars);
      assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
      assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
      assertFalse(compilerOptions0.aliasAllStrings);
      assertFalse(compilerOptions0.checkSuspiciousCode);
      assertFalse(compilerOptions0.collapseProperties);
      assertFalse(compilerOptions0.checkSymbols);
      assertFalse(compilerOptions0.checkTypes);
      assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
      assertFalse(compilerOptions0.deadAssignmentElimination);
      assertFalse(compilerOptions0.aliasKeywords);
      assertFalse(compilerOptions0.crossModuleCodeMotion);
      assertFalse(compilerOptions0.printInputDelimiter);
      assertFalse(compilerOptions0.inlineConstantVars);
      assertFalse(compilerOptions0.inlineGetters);
      assertFalse(compilerOptions0.lineBreak);
      assertFalse(compilerOptions0.jqueryPass);
      assertFalse(compilerOptions0.devirtualizePrototypeMethods);
      assertFalse(compilerOptions0.collapseVariableDeclarations);
      assertFalse(compilerOptions0.moveFunctionDeclarations);
      assertFalse(compilerOptions0.labelRenaming);
      assertFalse(compilerOptions0.generatePseudoNames);
      assertFalse(compilerOptions0.recordFunctionInformation);
      assertFalse(compilerOptions0.markAsCompiled);
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(false, compilerOptions0.assumeStrictThis());
      assertEquals(CompilerOptions.TracerMode.OFF, compilerOptions0.getTracerMode());
      assertEquals(false, compilerOptions0.isExternExportsEnabled());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compilerOptions0.getLanguageIn());
      assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
      assertEquals(false, compilerOptions0.isRemoveUnusedClassProperties());
      assertNull(compilerOptions0.getLanguageOut());
      assertEquals(CompilerOptions.TweakProcessing.OFF, compilerOptions0.getTweakProcessing());
      assertEquals(false, compilerOptions0.getInferTypes());
      assertEquals(false, compilerOptions0.assumeClosuresOnlyCaptureReferences());
      assertNotNull(compilerOptions0);
      
      compiler0.options = compilerOptions0;
      assertFalse(compiler0.options.inlineConstantVars);
      assertFalse(compiler0.options.markAsCompiled);
      assertFalse(compiler0.options.removeDeadCode);
      assertFalse(compiler0.options.recordFunctionInformation);
      assertFalse(compiler0.options.inlineVariables);
      assertFalse(compiler0.options.closurePass);
      assertFalse(compiler0.options.generateExports);
      assertFalse(compiler0.options.coalesceVariableNames);
      assertFalse(compiler0.options.checkSymbols);
      assertFalse(compiler0.options.flowSensitiveInlineVariables);
      assertFalse(compiler0.options.devirtualizePrototypeMethods);
      assertFalse(compiler0.options.removeUnusedClassProperties);
      assertFalse(compiler0.options.prettyPrint);
      assertFalse(compiler0.options.optimizeCalls);
      assertFalse(compiler0.options.checkControlStructures);
      assertFalse(compiler0.options.ideMode);
      assertFalse(compiler0.options.disambiguateProperties);
      assertFalse(compiler0.options.smartNameRemoval);
      assertFalse(compiler0.options.aliasExternals);
      assertFalse(compiler0.options.checkTypes);
      assertFalse(compiler0.options.exportTestFunctions);
      assertFalse(compiler0.options.foldConstants);
      assertFalse(compiler0.options.removeUnusedLocalVars);
      assertFalse(compiler0.options.removeTryCatchFinally);
      assertFalse(compiler0.options.removeUnusedPrototypeProperties);
      assertFalse(compiler0.options.markNoSideEffectCalls);
      assertFalse(compiler0.options.aliasKeywords);
      assertFalse(compiler0.options.removeUnusedPrototypePropertiesInExterns);
      assertFalse(compiler0.options.inlineLocalFunctions);
      assertFalse(compiler0.options.optimizeArgumentsArray);
      assertFalse(compiler0.options.crossModuleCodeMotion);
      assertFalse(compiler0.options.moveFunctionDeclarations);
      assertFalse(compiler0.options.ambiguateProperties);
      assertFalse(compiler0.options.extractPrototypeMemberDeclarations);
      assertFalse(compiler0.options.optimizeReturns);
      assertFalse(compiler0.options.aliasAllStrings);
      assertFalse(compiler0.options.gatherCssNames);
      assertFalse(compiler0.options.convertToDottedProperties);
      assertFalse(compiler0.options.rewriteFunctionExpressions);
      assertFalse(compiler0.options.deadAssignmentElimination);
      assertFalse(compiler0.options.jqueryPass);
      assertFalse(compiler0.options.collapseVariableDeclarations);
      assertFalse(compiler0.options.crossModuleMethodMotion);
      assertFalse(compiler0.options.reserveRawExports);
      assertFalse(compiler0.options.preferLineBreakAtEndOfFile);
      assertFalse(compiler0.options.computeFunctionSideEffects);
      assertFalse(compiler0.options.lineBreak);
      assertFalse(compiler0.options.collapseAnonymousFunctions);
      assertFalse(compiler0.options.checkSuspiciousCode);
      assertFalse(compiler0.options.generatePseudoNames);
      assertFalse(compiler0.options.removeUnusedVars);
      assertFalse(compiler0.options.labelRenaming);
      assertFalse(compiler0.options.printInputDelimiter);
      assertFalse(compiler0.options.collapseProperties);
      assertFalse(compiler0.options.optimizeParameters);
      assertFalse(compiler0.options.inlineGetters);
      assertFalse(compiler0.options.inlineFunctions);
      assertFalse(compilerOptions0.inlineVariables);
      assertFalse(compilerOptions0.removeDeadCode);
      assertFalse(compilerOptions0.removeUnusedClassProperties);
      assertFalse(compilerOptions0.removeUnusedLocalVars);
      assertFalse(compilerOptions0.crossModuleMethodMotion);
      assertFalse(compilerOptions0.exportTestFunctions);
      assertFalse(compilerOptions0.preferLineBreakAtEndOfFile);
      assertFalse(compilerOptions0.computeFunctionSideEffects);
      assertFalse(compilerOptions0.generateExports);
      assertFalse(compilerOptions0.foldConstants);
      assertFalse(compilerOptions0.ideMode);
      assertFalse(compilerOptions0.disambiguateProperties);
      assertFalse(compilerOptions0.coalesceVariableNames);
      assertFalse(compilerOptions0.removeTryCatchFinally);
      assertFalse(compilerOptions0.optimizeReturns);
      assertFalse(compilerOptions0.optimizeParameters);
      assertFalse(compilerOptions0.flowSensitiveInlineVariables);
      assertFalse(compilerOptions0.rewriteFunctionExpressions);
      assertFalse(compilerOptions0.optimizeCalls);
      assertFalse(compilerOptions0.inlineLocalFunctions);
      assertFalse(compilerOptions0.optimizeArgumentsArray);
      assertFalse(compilerOptions0.aliasExternals);
      assertFalse(compilerOptions0.prettyPrint);
      assertFalse(compilerOptions0.convertToDottedProperties);
      assertFalse(compilerOptions0.reserveRawExports);
      assertFalse(compilerOptions0.closurePass);
      assertFalse(compilerOptions0.collapseAnonymousFunctions);
      assertFalse(compilerOptions0.markNoSideEffectCalls);
      assertFalse(compilerOptions0.inlineFunctions);
      assertFalse(compilerOptions0.gatherCssNames);
      assertFalse(compilerOptions0.smartNameRemoval);
      assertFalse(compilerOptions0.ambiguateProperties);
      assertFalse(compilerOptions0.checkControlStructures);
      assertFalse(compilerOptions0.removeUnusedVars);
      assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
      assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
      assertFalse(compilerOptions0.aliasAllStrings);
      assertFalse(compilerOptions0.checkSuspiciousCode);
      assertFalse(compilerOptions0.collapseProperties);
      assertFalse(compilerOptions0.checkSymbols);
      assertFalse(compilerOptions0.checkTypes);
      assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
      assertFalse(compilerOptions0.deadAssignmentElimination);
      assertFalse(compilerOptions0.aliasKeywords);
      assertFalse(compilerOptions0.crossModuleCodeMotion);
      assertFalse(compilerOptions0.printInputDelimiter);
      assertFalse(compilerOptions0.inlineConstantVars);
      assertFalse(compilerOptions0.inlineGetters);
      assertFalse(compilerOptions0.lineBreak);
      assertFalse(compilerOptions0.jqueryPass);
      assertFalse(compilerOptions0.devirtualizePrototypeMethods);
      assertFalse(compilerOptions0.collapseVariableDeclarations);
      assertFalse(compilerOptions0.moveFunctionDeclarations);
      assertFalse(compilerOptions0.labelRenaming);
      assertFalse(compilerOptions0.generatePseudoNames);
      assertFalse(compilerOptions0.recordFunctionInformation);
      assertFalse(compilerOptions0.markAsCompiled);
      assertEquals(CompilerOptions.TracerMode.OFF, compiler0.options.getTracerMode());
      assertNull(compiler0.options.getLanguageOut());
      assertEquals(false, compiler0.options.assumeClosuresOnlyCaptureReferences());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.options.getLanguageIn());
      assertEquals(false, compiler0.options.isExternExportsEnabled());
      assertEquals(false, compiler0.options.getInferTypes());
      assertEquals(CompilerOptions.TweakProcessing.OFF, compiler0.options.getTweakProcessing());
      assertEquals(false, compiler0.options.isRemoveUnusedClassProperties());
      assertEquals(false, compiler0.options.shouldColorizeErrorOutput());
      assertEquals(false, compiler0.options.assumeStrictThis());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(false, compilerOptions0.assumeStrictThis());
      assertEquals(CompilerOptions.TracerMode.OFF, compilerOptions0.getTracerMode());
      assertEquals(false, compilerOptions0.isExternExportsEnabled());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compilerOptions0.getLanguageIn());
      assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
      assertEquals(false, compilerOptions0.isRemoveUnusedClassProperties());
      assertNull(compilerOptions0.getLanguageOut());
      assertEquals(CompilerOptions.TweakProcessing.OFF, compilerOptions0.getTweakProcessing());
      assertEquals(false, compilerOptions0.getInferTypes());
      assertEquals(false, compilerOptions0.assumeClosuresOnlyCaptureReferences());
      assertNotNull(compiler0.options);
      
      TypedScopeCreator typedScopeCreator0 = new TypedScopeCreator(compiler0);
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(false, compiler0.isIdeMode());
      assertNotNull(typedScopeCreator0);
      
      String string0 = "E";
      int int0 = 130;
      Node node0 = Node.newString(int0, string0);
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isTypeOf());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.hasChildren());
      assertEquals(true, node0.isExprResult());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.isAssign());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isSwitch());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isFor());
      assertEquals(130, node0.getType());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isStringKey());
      assertEquals(false, node0.isScript());
      assertEquals(false, node0.isCase());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isWhile());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isString());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isTrue());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isVar());
      assertNotNull(node0);
      
      // Undeclared exception!
      try {
        Scope scope0 = typedScopeCreator0.createInitialScope(node0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // INTERNAL COMPILER ERROR.
         // Please report this problem.
         // null
         //
      }
  }

  @Test
  public void test1()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertNotNull(compiler0);
      
      CompilerOptions compilerOptions0 = compiler0.newCompilerOptions();
      assertFalse(compilerOptions0.closurePass);
      assertFalse(compilerOptions0.removeUnusedLocalVars);
      assertFalse(compilerOptions0.prettyPrint);
      assertFalse(compilerOptions0.optimizeArgumentsArray);
      assertFalse(compilerOptions0.removeUnusedVars);
      assertFalse(compilerOptions0.inlineFunctions);
      assertFalse(compilerOptions0.inlineGetters);
      assertFalse(compilerOptions0.smartNameRemoval);
      assertFalse(compilerOptions0.inlineLocalFunctions);
      assertFalse(compilerOptions0.crossModuleCodeMotion);
      assertFalse(compilerOptions0.checkControlStructures);
      assertFalse(compilerOptions0.aliasExternals);
      assertFalse(compilerOptions0.optimizeCalls);
      assertFalse(compilerOptions0.foldConstants);
      assertFalse(compilerOptions0.markNoSideEffectCalls);
      assertFalse(compilerOptions0.markAsCompiled);
      assertFalse(compilerOptions0.jqueryPass);
      assertFalse(compilerOptions0.rewriteFunctionExpressions);
      assertFalse(compilerOptions0.coalesceVariableNames);
      assertFalse(compilerOptions0.aliasAllStrings);
      assertFalse(compilerOptions0.crossModuleMethodMotion);
      assertFalse(compilerOptions0.devirtualizePrototypeMethods);
      assertFalse(compilerOptions0.removeDeadCode);
      assertFalse(compilerOptions0.removeUnusedClassProperties);
      assertFalse(compilerOptions0.collapseVariableDeclarations);
      assertFalse(compilerOptions0.moveFunctionDeclarations);
      assertFalse(compilerOptions0.optimizeReturns);
      assertFalse(compilerOptions0.checkSuspiciousCode);
      assertFalse(compilerOptions0.inlineConstantVars);
      assertFalse(compilerOptions0.aliasKeywords);
      assertFalse(compilerOptions0.collapseProperties);
      assertFalse(compilerOptions0.preferLineBreakAtEndOfFile);
      assertFalse(compilerOptions0.removeTryCatchFinally);
      assertFalse(compilerOptions0.exportTestFunctions);
      assertFalse(compilerOptions0.lineBreak);
      assertFalse(compilerOptions0.printInputDelimiter);
      assertFalse(compilerOptions0.ambiguateProperties);
      assertFalse(compilerOptions0.optimizeParameters);
      assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
      assertFalse(compilerOptions0.flowSensitiveInlineVariables);
      assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
      assertFalse(compilerOptions0.recordFunctionInformation);
      assertFalse(compilerOptions0.reserveRawExports);
      assertFalse(compilerOptions0.disambiguateProperties);
      assertFalse(compilerOptions0.computeFunctionSideEffects);
      assertFalse(compilerOptions0.inlineVariables);
      assertFalse(compilerOptions0.convertToDottedProperties);
      assertFalse(compilerOptions0.generateExports);
      assertFalse(compilerOptions0.labelRenaming);
      assertFalse(compilerOptions0.ideMode);
      assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
      assertFalse(compilerOptions0.collapseAnonymousFunctions);
      assertFalse(compilerOptions0.deadAssignmentElimination);
      assertFalse(compilerOptions0.gatherCssNames);
      assertFalse(compilerOptions0.generatePseudoNames);
      assertFalse(compilerOptions0.checkSymbols);
      assertFalse(compilerOptions0.checkTypes);
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(CompilerOptions.TracerMode.OFF, compilerOptions0.getTracerMode());
      assertEquals(false, compilerOptions0.getInferTypes());
      assertEquals(CompilerOptions.TweakProcessing.OFF, compilerOptions0.getTweakProcessing());
      assertEquals(false, compilerOptions0.assumeStrictThis());
      assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compilerOptions0.getLanguageIn());
      assertNull(compilerOptions0.getLanguageOut());
      assertEquals(false, compilerOptions0.isExternExportsEnabled());
      assertEquals(false, compilerOptions0.assumeClosuresOnlyCaptureReferences());
      assertEquals(false, compilerOptions0.isRemoveUnusedClassProperties());
      assertNotNull(compilerOptions0);
      
      compiler0.options = compilerOptions0;
      assertFalse(compilerOptions0.closurePass);
      assertFalse(compilerOptions0.removeUnusedLocalVars);
      assertFalse(compilerOptions0.prettyPrint);
      assertFalse(compilerOptions0.optimizeArgumentsArray);
      assertFalse(compilerOptions0.removeUnusedVars);
      assertFalse(compilerOptions0.inlineFunctions);
      assertFalse(compilerOptions0.inlineGetters);
      assertFalse(compilerOptions0.smartNameRemoval);
      assertFalse(compilerOptions0.inlineLocalFunctions);
      assertFalse(compilerOptions0.crossModuleCodeMotion);
      assertFalse(compilerOptions0.checkControlStructures);
      assertFalse(compilerOptions0.aliasExternals);
      assertFalse(compilerOptions0.optimizeCalls);
      assertFalse(compilerOptions0.foldConstants);
      assertFalse(compilerOptions0.markNoSideEffectCalls);
      assertFalse(compilerOptions0.markAsCompiled);
      assertFalse(compilerOptions0.jqueryPass);
      assertFalse(compilerOptions0.rewriteFunctionExpressions);
      assertFalse(compilerOptions0.coalesceVariableNames);
      assertFalse(compilerOptions0.aliasAllStrings);
      assertFalse(compilerOptions0.crossModuleMethodMotion);
      assertFalse(compilerOptions0.devirtualizePrototypeMethods);
      assertFalse(compilerOptions0.removeDeadCode);
      assertFalse(compilerOptions0.removeUnusedClassProperties);
      assertFalse(compilerOptions0.collapseVariableDeclarations);
      assertFalse(compilerOptions0.moveFunctionDeclarations);
      assertFalse(compilerOptions0.optimizeReturns);
      assertFalse(compilerOptions0.checkSuspiciousCode);
      assertFalse(compilerOptions0.inlineConstantVars);
      assertFalse(compilerOptions0.aliasKeywords);
      assertFalse(compilerOptions0.collapseProperties);
      assertFalse(compilerOptions0.preferLineBreakAtEndOfFile);
      assertFalse(compilerOptions0.removeTryCatchFinally);
      assertFalse(compilerOptions0.exportTestFunctions);
      assertFalse(compilerOptions0.lineBreak);
      assertFalse(compilerOptions0.printInputDelimiter);
      assertFalse(compilerOptions0.ambiguateProperties);
      assertFalse(compilerOptions0.optimizeParameters);
      assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
      assertFalse(compilerOptions0.flowSensitiveInlineVariables);
      assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
      assertFalse(compilerOptions0.recordFunctionInformation);
      assertFalse(compilerOptions0.reserveRawExports);
      assertFalse(compilerOptions0.disambiguateProperties);
      assertFalse(compilerOptions0.computeFunctionSideEffects);
      assertFalse(compilerOptions0.inlineVariables);
      assertFalse(compilerOptions0.convertToDottedProperties);
      assertFalse(compilerOptions0.generateExports);
      assertFalse(compilerOptions0.labelRenaming);
      assertFalse(compilerOptions0.ideMode);
      assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
      assertFalse(compilerOptions0.collapseAnonymousFunctions);
      assertFalse(compilerOptions0.deadAssignmentElimination);
      assertFalse(compilerOptions0.gatherCssNames);
      assertFalse(compilerOptions0.generatePseudoNames);
      assertFalse(compilerOptions0.checkSymbols);
      assertFalse(compilerOptions0.checkTypes);
      assertFalse(compiler0.options.removeUnusedClassProperties);
      assertFalse(compiler0.options.generateExports);
      assertFalse(compiler0.options.collapseVariableDeclarations);
      assertFalse(compiler0.options.checkTypes);
      assertFalse(compiler0.options.closurePass);
      assertFalse(compiler0.options.checkSuspiciousCode);
      assertFalse(compiler0.options.removeUnusedVars);
      assertFalse(compiler0.options.markAsCompiled);
      assertFalse(compiler0.options.optimizeReturns);
      assertFalse(compiler0.options.generatePseudoNames);
      assertFalse(compiler0.options.aliasExternals);
      assertFalse(compiler0.options.crossModuleCodeMotion);
      assertFalse(compiler0.options.inlineVariables);
      assertFalse(compiler0.options.labelRenaming);
      assertFalse(compiler0.options.devirtualizePrototypeMethods);
      assertFalse(compiler0.options.computeFunctionSideEffects);
      assertFalse(compiler0.options.removeDeadCode);
      assertFalse(compiler0.options.reserveRawExports);
      assertFalse(compiler0.options.exportTestFunctions);
      assertFalse(compiler0.options.inlineFunctions);
      assertFalse(compiler0.options.removeUnusedPrototypeProperties);
      assertFalse(compiler0.options.convertToDottedProperties);
      assertFalse(compiler0.options.gatherCssNames);
      assertFalse(compiler0.options.removeUnusedLocalVars);
      assertFalse(compiler0.options.moveFunctionDeclarations);
      assertFalse(compiler0.options.foldConstants);
      assertFalse(compiler0.options.lineBreak);
      assertFalse(compiler0.options.inlineGetters);
      assertFalse(compiler0.options.coalesceVariableNames);
      assertFalse(compiler0.options.deadAssignmentElimination);
      assertFalse(compiler0.options.inlineLocalFunctions);
      assertFalse(compiler0.options.crossModuleMethodMotion);
      assertFalse(compiler0.options.disambiguateProperties);
      assertFalse(compiler0.options.removeUnusedPrototypePropertiesInExterns);
      assertFalse(compiler0.options.flowSensitiveInlineVariables);
      assertFalse(compiler0.options.preferLineBreakAtEndOfFile);
      assertFalse(compiler0.options.optimizeArgumentsArray);
      assertFalse(compiler0.options.markNoSideEffectCalls);
      assertFalse(compiler0.options.collapseProperties);
      assertFalse(compiler0.options.smartNameRemoval);
      assertFalse(compiler0.options.optimizeParameters);
      assertFalse(compiler0.options.collapseAnonymousFunctions);
      assertFalse(compiler0.options.checkSymbols);
      assertFalse(compiler0.options.prettyPrint);
      assertFalse(compiler0.options.jqueryPass);
      assertFalse(compiler0.options.rewriteFunctionExpressions);
      assertFalse(compiler0.options.inlineConstantVars);
      assertFalse(compiler0.options.recordFunctionInformation);
      assertFalse(compiler0.options.aliasAllStrings);
      assertFalse(compiler0.options.removeTryCatchFinally);
      assertFalse(compiler0.options.ambiguateProperties);
      assertFalse(compiler0.options.ideMode);
      assertFalse(compiler0.options.extractPrototypeMemberDeclarations);
      assertFalse(compiler0.options.checkControlStructures);
      assertFalse(compiler0.options.aliasKeywords);
      assertFalse(compiler0.options.printInputDelimiter);
      assertFalse(compiler0.options.optimizeCalls);
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(CompilerOptions.TracerMode.OFF, compilerOptions0.getTracerMode());
      assertEquals(false, compilerOptions0.getInferTypes());
      assertEquals(CompilerOptions.TweakProcessing.OFF, compilerOptions0.getTweakProcessing());
      assertEquals(false, compilerOptions0.assumeStrictThis());
      assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compilerOptions0.getLanguageIn());
      assertNull(compilerOptions0.getLanguageOut());
      assertEquals(false, compilerOptions0.isExternExportsEnabled());
      assertEquals(false, compilerOptions0.assumeClosuresOnlyCaptureReferences());
      assertEquals(false, compilerOptions0.isRemoveUnusedClassProperties());
      assertEquals(false, compiler0.options.isRemoveUnusedClassProperties());
      assertEquals(CompilerOptions.TracerMode.OFF, compiler0.options.getTracerMode());
      assertEquals(false, compiler0.options.getInferTypes());
      assertEquals(false, compiler0.options.assumeStrictThis());
      assertEquals(false, compiler0.options.isExternExportsEnabled());
      assertNull(compiler0.options.getLanguageOut());
      assertEquals(false, compiler0.options.shouldColorizeErrorOutput());
      assertEquals(CompilerOptions.TweakProcessing.OFF, compiler0.options.getTweakProcessing());
      assertEquals(false, compiler0.options.assumeClosuresOnlyCaptureReferences());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.options.getLanguageIn());
      assertNotNull(compiler0.options);
      
      TypedScopeCreator typedScopeCreator0 = new TypedScopeCreator(compiler0);
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertNotNull(typedScopeCreator0);
      
      String string0 = "";
      int int0 = 129;
      Node node0 = Node.newString(int0, string0);
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isQuotedString());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isScript());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isStringKey());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isGetterDef());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isHook());
      assertEquals(129, node0.getType());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isFunction());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isString());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(0, node0.getChildCount());
      assertEquals(-1, node0.getCharno());
      assertNotNull(node0);
      
      Scope scope0 = typedScopeCreator0.createInitialScope(node0);
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(false, scope0.isLocal());
      assertEquals(32, scope0.getVarCount());
      assertEquals(true, scope0.isGlobal());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isQuotedString());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isScript());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isStringKey());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isGetterDef());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isHook());
      assertEquals(129, node0.getType());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isFunction());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isString());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(0, node0.getChildCount());
      assertEquals(-1, node0.getCharno());
      assertNotNull(scope0);
  }

  @Test
  public void test2()  throws Throwable  {
      Scope scope0 = null;
      Compiler compiler0 = new Compiler();
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertNotNull(compiler0);
      
      CompilerOptions compilerOptions0 = compiler0.newCompilerOptions();
      assertFalse(compilerOptions0.inlineFunctions);
      assertFalse(compilerOptions0.flowSensitiveInlineVariables);
      assertFalse(compilerOptions0.reserveRawExports);
      assertFalse(compilerOptions0.generateExports);
      assertFalse(compilerOptions0.inlineGetters);
      assertFalse(compilerOptions0.lineBreak);
      assertFalse(compilerOptions0.collapseVariableDeclarations);
      assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
      assertFalse(compilerOptions0.gatherCssNames);
      assertFalse(compilerOptions0.computeFunctionSideEffects);
      assertFalse(compilerOptions0.checkSymbols);
      assertFalse(compilerOptions0.optimizeParameters);
      assertFalse(compilerOptions0.deadAssignmentElimination);
      assertFalse(compilerOptions0.aliasKeywords);
      assertFalse(compilerOptions0.markNoSideEffectCalls);
      assertFalse(compilerOptions0.checkControlStructures);
      assertFalse(compilerOptions0.closurePass);
      assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
      assertFalse(compilerOptions0.convertToDottedProperties);
      assertFalse(compilerOptions0.collapseProperties);
      assertFalse(compilerOptions0.exportTestFunctions);
      assertFalse(compilerOptions0.checkTypes);
      assertFalse(compilerOptions0.devirtualizePrototypeMethods);
      assertFalse(compilerOptions0.labelRenaming);
      assertFalse(compilerOptions0.rewriteFunctionExpressions);
      assertFalse(compilerOptions0.moveFunctionDeclarations);
      assertFalse(compilerOptions0.prettyPrint);
      assertFalse(compilerOptions0.coalesceVariableNames);
      assertFalse(compilerOptions0.checkSuspiciousCode);
      assertFalse(compilerOptions0.inlineVariables);
      assertFalse(compilerOptions0.removeUnusedLocalVars);
      assertFalse(compilerOptions0.optimizeReturns);
      assertFalse(compilerOptions0.crossModuleMethodMotion);
      assertFalse(compilerOptions0.markAsCompiled);
      assertFalse(compilerOptions0.crossModuleCodeMotion);
      assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
      assertFalse(compilerOptions0.ambiguateProperties);
      assertFalse(compilerOptions0.removeDeadCode);
      assertFalse(compilerOptions0.optimizeArgumentsArray);
      assertFalse(compilerOptions0.generatePseudoNames);
      assertFalse(compilerOptions0.aliasExternals);
      assertFalse(compilerOptions0.removeTryCatchFinally);
      assertFalse(compilerOptions0.disambiguateProperties);
      assertFalse(compilerOptions0.removeUnusedClassProperties);
      assertFalse(compilerOptions0.preferLineBreakAtEndOfFile);
      assertFalse(compilerOptions0.smartNameRemoval);
      assertFalse(compilerOptions0.collapseAnonymousFunctions);
      assertFalse(compilerOptions0.foldConstants);
      assertFalse(compilerOptions0.recordFunctionInformation);
      assertFalse(compilerOptions0.optimizeCalls);
      assertFalse(compilerOptions0.aliasAllStrings);
      assertFalse(compilerOptions0.jqueryPass);
      assertFalse(compilerOptions0.inlineConstantVars);
      assertFalse(compilerOptions0.printInputDelimiter);
      assertFalse(compilerOptions0.removeUnusedVars);
      assertFalse(compilerOptions0.inlineLocalFunctions);
      assertFalse(compilerOptions0.ideMode);
      assertEquals(false, compilerOptions0.assumeStrictThis());
      assertEquals(false, compilerOptions0.isExternExportsEnabled());
      assertEquals(CompilerOptions.TracerMode.OFF, compilerOptions0.getTracerMode());
      assertEquals(false, compilerOptions0.assumeClosuresOnlyCaptureReferences());
      assertEquals(false, compilerOptions0.isRemoveUnusedClassProperties());
      assertNull(compilerOptions0.getLanguageOut());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compilerOptions0.getLanguageIn());
      assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
      assertEquals(CompilerOptions.TweakProcessing.OFF, compilerOptions0.getTweakProcessing());
      assertEquals(false, compilerOptions0.getInferTypes());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertNotNull(compilerOptions0);
      
      compiler0.options = compilerOptions0;
      assertFalse(compilerOptions0.inlineFunctions);
      assertFalse(compilerOptions0.flowSensitiveInlineVariables);
      assertFalse(compilerOptions0.reserveRawExports);
      assertFalse(compilerOptions0.generateExports);
      assertFalse(compilerOptions0.inlineGetters);
      assertFalse(compilerOptions0.lineBreak);
      assertFalse(compilerOptions0.collapseVariableDeclarations);
      assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
      assertFalse(compilerOptions0.gatherCssNames);
      assertFalse(compilerOptions0.computeFunctionSideEffects);
      assertFalse(compilerOptions0.checkSymbols);
      assertFalse(compilerOptions0.optimizeParameters);
      assertFalse(compilerOptions0.deadAssignmentElimination);
      assertFalse(compilerOptions0.aliasKeywords);
      assertFalse(compilerOptions0.markNoSideEffectCalls);
      assertFalse(compilerOptions0.checkControlStructures);
      assertFalse(compilerOptions0.closurePass);
      assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
      assertFalse(compilerOptions0.convertToDottedProperties);
      assertFalse(compilerOptions0.collapseProperties);
      assertFalse(compilerOptions0.exportTestFunctions);
      assertFalse(compilerOptions0.checkTypes);
      assertFalse(compilerOptions0.devirtualizePrototypeMethods);
      assertFalse(compilerOptions0.labelRenaming);
      assertFalse(compilerOptions0.rewriteFunctionExpressions);
      assertFalse(compilerOptions0.moveFunctionDeclarations);
      assertFalse(compilerOptions0.prettyPrint);
      assertFalse(compilerOptions0.coalesceVariableNames);
      assertFalse(compilerOptions0.checkSuspiciousCode);
      assertFalse(compilerOptions0.inlineVariables);
      assertFalse(compilerOptions0.removeUnusedLocalVars);
      assertFalse(compilerOptions0.optimizeReturns);
      assertFalse(compilerOptions0.crossModuleMethodMotion);
      assertFalse(compilerOptions0.markAsCompiled);
      assertFalse(compilerOptions0.crossModuleCodeMotion);
      assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
      assertFalse(compilerOptions0.ambiguateProperties);
      assertFalse(compilerOptions0.removeDeadCode);
      assertFalse(compilerOptions0.optimizeArgumentsArray);
      assertFalse(compilerOptions0.generatePseudoNames);
      assertFalse(compilerOptions0.aliasExternals);
      assertFalse(compilerOptions0.removeTryCatchFinally);
      assertFalse(compilerOptions0.disambiguateProperties);
      assertFalse(compilerOptions0.removeUnusedClassProperties);
      assertFalse(compilerOptions0.preferLineBreakAtEndOfFile);
      assertFalse(compilerOptions0.smartNameRemoval);
      assertFalse(compilerOptions0.collapseAnonymousFunctions);
      assertFalse(compilerOptions0.foldConstants);
      assertFalse(compilerOptions0.recordFunctionInformation);
      assertFalse(compilerOptions0.optimizeCalls);
      assertFalse(compilerOptions0.aliasAllStrings);
      assertFalse(compilerOptions0.jqueryPass);
      assertFalse(compilerOptions0.inlineConstantVars);
      assertFalse(compilerOptions0.printInputDelimiter);
      assertFalse(compilerOptions0.removeUnusedVars);
      assertFalse(compilerOptions0.inlineLocalFunctions);
      assertFalse(compilerOptions0.ideMode);
      assertFalse(compiler0.options.inlineConstantVars);
      assertFalse(compiler0.options.inlineGetters);
      assertFalse(compiler0.options.checkTypes);
      assertFalse(compiler0.options.optimizeReturns);
      assertFalse(compiler0.options.printInputDelimiter);
      assertFalse(compiler0.options.markNoSideEffectCalls);
      assertFalse(compiler0.options.gatherCssNames);
      assertFalse(compiler0.options.crossModuleCodeMotion);
      assertFalse(compiler0.options.lineBreak);
      assertFalse(compiler0.options.crossModuleMethodMotion);
      assertFalse(compiler0.options.flowSensitiveInlineVariables);
      assertFalse(compiler0.options.convertToDottedProperties);
      assertFalse(compiler0.options.inlineFunctions);
      assertFalse(compiler0.options.closurePass);
      assertFalse(compiler0.options.ideMode);
      assertFalse(compiler0.options.collapseVariableDeclarations);
      assertFalse(compiler0.options.checkSuspiciousCode);
      assertFalse(compiler0.options.rewriteFunctionExpressions);
      assertFalse(compiler0.options.markAsCompiled);
      assertFalse(compiler0.options.removeUnusedLocalVars);
      assertFalse(compiler0.options.moveFunctionDeclarations);
      assertFalse(compiler0.options.preferLineBreakAtEndOfFile);
      assertFalse(compiler0.options.computeFunctionSideEffects);
      assertFalse(compiler0.options.collapseProperties);
      assertFalse(compiler0.options.devirtualizePrototypeMethods);
      assertFalse(compiler0.options.removeUnusedClassProperties);
      assertFalse(compiler0.options.reserveRawExports);
      assertFalse(compiler0.options.removeUnusedVars);
      assertFalse(compiler0.options.foldConstants);
      assertFalse(compiler0.options.ambiguateProperties);
      assertFalse(compiler0.options.checkControlStructures);
      assertFalse(compiler0.options.generateExports);
      assertFalse(compiler0.options.recordFunctionInformation);
      assertFalse(compiler0.options.removeUnusedPrototypePropertiesInExterns);
      assertFalse(compiler0.options.checkSymbols);
      assertFalse(compiler0.options.coalesceVariableNames);
      assertFalse(compiler0.options.aliasExternals);
      assertFalse(compiler0.options.exportTestFunctions);
      assertFalse(compiler0.options.extractPrototypeMemberDeclarations);
      assertFalse(compiler0.options.aliasAllStrings);
      assertFalse(compiler0.options.generatePseudoNames);
      assertFalse(compiler0.options.inlineLocalFunctions);
      assertFalse(compiler0.options.deadAssignmentElimination);
      assertFalse(compiler0.options.removeUnusedPrototypeProperties);
      assertFalse(compiler0.options.aliasKeywords);
      assertFalse(compiler0.options.prettyPrint);
      assertFalse(compiler0.options.optimizeArgumentsArray);
      assertFalse(compiler0.options.removeDeadCode);
      assertFalse(compiler0.options.jqueryPass);
      assertFalse(compiler0.options.optimizeCalls);
      assertFalse(compiler0.options.removeTryCatchFinally);
      assertFalse(compiler0.options.optimizeParameters);
      assertFalse(compiler0.options.labelRenaming);
      assertFalse(compiler0.options.collapseAnonymousFunctions);
      assertFalse(compiler0.options.smartNameRemoval);
      assertFalse(compiler0.options.inlineVariables);
      assertFalse(compiler0.options.disambiguateProperties);
      assertEquals(false, compilerOptions0.assumeStrictThis());
      assertEquals(false, compilerOptions0.isExternExportsEnabled());
      assertEquals(CompilerOptions.TracerMode.OFF, compilerOptions0.getTracerMode());
      assertEquals(false, compilerOptions0.assumeClosuresOnlyCaptureReferences());
      assertEquals(false, compilerOptions0.isRemoveUnusedClassProperties());
      assertNull(compilerOptions0.getLanguageOut());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compilerOptions0.getLanguageIn());
      assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
      assertEquals(CompilerOptions.TweakProcessing.OFF, compilerOptions0.getTweakProcessing());
      assertEquals(false, compilerOptions0.getInferTypes());
      assertEquals(CompilerOptions.TracerMode.OFF, compiler0.options.getTracerMode());
      assertEquals(false, compiler0.options.shouldColorizeErrorOutput());
      assertEquals(false, compiler0.options.assumeStrictThis());
      assertEquals(CompilerOptions.TweakProcessing.OFF, compiler0.options.getTweakProcessing());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.options.getLanguageIn());
      assertEquals(false, compiler0.options.isExternExportsEnabled());
      assertEquals(false, compiler0.options.getInferTypes());
      assertEquals(false, compiler0.options.isRemoveUnusedClassProperties());
      assertNull(compiler0.options.getLanguageOut());
      assertEquals(false, compiler0.options.assumeClosuresOnlyCaptureReferences());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertNotNull(compiler0.options);
      
      TypedScopeCreator typedScopeCreator0 = new TypedScopeCreator(compiler0);
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertNotNull(typedScopeCreator0);
      
      String string0 = "";
      int int0 = 129;
      Node node0 = Node.newString(int0, string0);
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isString());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isStringKey());
      assertEquals(129, node0.getType());
      assertEquals(false, node0.isCall());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isScript());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isName());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isCase());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isNumber());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isDelProp());
      assertNotNull(node0);
      
      // Undeclared exception!
      try {
        Scope scope1 = typedScopeCreator0.createScope(node0, scope0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // INTERNAL COMPILER ERROR.
         // Please report this problem.
         // null
         //
      }
  }

  @Test
  public void test3()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertNotNull(compiler0);
      
      CompilerOptions compilerOptions0 = compiler0.newCompilerOptions();
      assertFalse(compilerOptions0.flowSensitiveInlineVariables);
      assertFalse(compilerOptions0.preferLineBreakAtEndOfFile);
      assertFalse(compilerOptions0.gatherCssNames);
      assertFalse(compilerOptions0.collapseVariableDeclarations);
      assertFalse(compilerOptions0.inlineVariables);
      assertFalse(compilerOptions0.checkControlStructures);
      assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
      assertFalse(compilerOptions0.generateExports);
      assertFalse(compilerOptions0.removeUnusedClassProperties);
      assertFalse(compilerOptions0.inlineLocalFunctions);
      assertFalse(compilerOptions0.crossModuleMethodMotion);
      assertFalse(compilerOptions0.inlineGetters);
      assertFalse(compilerOptions0.inlineConstantVars);
      assertFalse(compilerOptions0.inlineFunctions);
      assertFalse(compilerOptions0.deadAssignmentElimination);
      assertFalse(compilerOptions0.optimizeReturns);
      assertFalse(compilerOptions0.optimizeParameters);
      assertFalse(compilerOptions0.removeUnusedVars);
      assertFalse(compilerOptions0.moveFunctionDeclarations);
      assertFalse(compilerOptions0.prettyPrint);
      assertFalse(compilerOptions0.removeDeadCode);
      assertFalse(compilerOptions0.computeFunctionSideEffects);
      assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
      assertFalse(compilerOptions0.rewriteFunctionExpressions);
      assertFalse(compilerOptions0.optimizeCalls);
      assertFalse(compilerOptions0.removeTryCatchFinally);
      assertFalse(compilerOptions0.closurePass);
      assertFalse(compilerOptions0.ideMode);
      assertFalse(compilerOptions0.markAsCompiled);
      assertFalse(compilerOptions0.reserveRawExports);
      assertFalse(compilerOptions0.checkSuspiciousCode);
      assertFalse(compilerOptions0.disambiguateProperties);
      assertFalse(compilerOptions0.labelRenaming);
      assertFalse(compilerOptions0.printInputDelimiter);
      assertFalse(compilerOptions0.optimizeArgumentsArray);
      assertFalse(compilerOptions0.lineBreak);
      assertFalse(compilerOptions0.checkSymbols);
      assertFalse(compilerOptions0.coalesceVariableNames);
      assertFalse(compilerOptions0.ambiguateProperties);
      assertFalse(compilerOptions0.aliasExternals);
      assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
      assertFalse(compilerOptions0.convertToDottedProperties);
      assertFalse(compilerOptions0.devirtualizePrototypeMethods);
      assertFalse(compilerOptions0.removeUnusedLocalVars);
      assertFalse(compilerOptions0.foldConstants);
      assertFalse(compilerOptions0.markNoSideEffectCalls);
      assertFalse(compilerOptions0.collapseProperties);
      assertFalse(compilerOptions0.generatePseudoNames);
      assertFalse(compilerOptions0.aliasAllStrings);
      assertFalse(compilerOptions0.collapseAnonymousFunctions);
      assertFalse(compilerOptions0.smartNameRemoval);
      assertFalse(compilerOptions0.recordFunctionInformation);
      assertFalse(compilerOptions0.aliasKeywords);
      assertFalse(compilerOptions0.crossModuleCodeMotion);
      assertFalse(compilerOptions0.jqueryPass);
      assertFalse(compilerOptions0.checkTypes);
      assertFalse(compilerOptions0.exportTestFunctions);
      assertEquals(CompilerOptions.TweakProcessing.OFF, compilerOptions0.getTweakProcessing());
      assertEquals(false, compilerOptions0.isRemoveUnusedClassProperties());
      assertEquals(CompilerOptions.TracerMode.OFF, compilerOptions0.getTracerMode());
      assertEquals(false, compilerOptions0.isExternExportsEnabled());
      assertEquals(false, compilerOptions0.getInferTypes());
      assertEquals(false, compilerOptions0.assumeStrictThis());
      assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
      assertEquals(false, compilerOptions0.assumeClosuresOnlyCaptureReferences());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compilerOptions0.getLanguageIn());
      assertNull(compilerOptions0.getLanguageOut());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertNotNull(compilerOptions0);
      
      compiler0.options = compilerOptions0;
      assertFalse(compilerOptions0.flowSensitiveInlineVariables);
      assertFalse(compilerOptions0.preferLineBreakAtEndOfFile);
      assertFalse(compilerOptions0.gatherCssNames);
      assertFalse(compilerOptions0.collapseVariableDeclarations);
      assertFalse(compilerOptions0.inlineVariables);
      assertFalse(compilerOptions0.checkControlStructures);
      assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
      assertFalse(compilerOptions0.generateExports);
      assertFalse(compilerOptions0.removeUnusedClassProperties);
      assertFalse(compilerOptions0.inlineLocalFunctions);
      assertFalse(compilerOptions0.crossModuleMethodMotion);
      assertFalse(compilerOptions0.inlineGetters);
      assertFalse(compilerOptions0.inlineConstantVars);
      assertFalse(compilerOptions0.inlineFunctions);
      assertFalse(compilerOptions0.deadAssignmentElimination);
      assertFalse(compilerOptions0.optimizeReturns);
      assertFalse(compilerOptions0.optimizeParameters);
      assertFalse(compilerOptions0.removeUnusedVars);
      assertFalse(compilerOptions0.moveFunctionDeclarations);
      assertFalse(compilerOptions0.prettyPrint);
      assertFalse(compilerOptions0.removeDeadCode);
      assertFalse(compilerOptions0.computeFunctionSideEffects);
      assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
      assertFalse(compilerOptions0.rewriteFunctionExpressions);
      assertFalse(compilerOptions0.optimizeCalls);
      assertFalse(compilerOptions0.removeTryCatchFinally);
      assertFalse(compilerOptions0.closurePass);
      assertFalse(compilerOptions0.ideMode);
      assertFalse(compilerOptions0.markAsCompiled);
      assertFalse(compilerOptions0.reserveRawExports);
      assertFalse(compilerOptions0.checkSuspiciousCode);
      assertFalse(compilerOptions0.disambiguateProperties);
      assertFalse(compilerOptions0.labelRenaming);
      assertFalse(compilerOptions0.printInputDelimiter);
      assertFalse(compilerOptions0.optimizeArgumentsArray);
      assertFalse(compilerOptions0.lineBreak);
      assertFalse(compilerOptions0.checkSymbols);
      assertFalse(compilerOptions0.coalesceVariableNames);
      assertFalse(compilerOptions0.ambiguateProperties);
      assertFalse(compilerOptions0.aliasExternals);
      assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
      assertFalse(compilerOptions0.convertToDottedProperties);
      assertFalse(compilerOptions0.devirtualizePrototypeMethods);
      assertFalse(compilerOptions0.removeUnusedLocalVars);
      assertFalse(compilerOptions0.foldConstants);
      assertFalse(compilerOptions0.markNoSideEffectCalls);
      assertFalse(compilerOptions0.collapseProperties);
      assertFalse(compilerOptions0.generatePseudoNames);
      assertFalse(compilerOptions0.aliasAllStrings);
      assertFalse(compilerOptions0.collapseAnonymousFunctions);
      assertFalse(compilerOptions0.smartNameRemoval);
      assertFalse(compilerOptions0.recordFunctionInformation);
      assertFalse(compilerOptions0.aliasKeywords);
      assertFalse(compilerOptions0.crossModuleCodeMotion);
      assertFalse(compilerOptions0.jqueryPass);
      assertFalse(compilerOptions0.checkTypes);
      assertFalse(compilerOptions0.exportTestFunctions);
      assertFalse(compiler0.options.aliasAllStrings);
      assertFalse(compiler0.options.optimizeCalls);
      assertFalse(compiler0.options.removeDeadCode);
      assertFalse(compiler0.options.printInputDelimiter);
      assertFalse(compiler0.options.computeFunctionSideEffects);
      assertFalse(compiler0.options.convertToDottedProperties);
      assertFalse(compiler0.options.prettyPrint);
      assertFalse(compiler0.options.checkSuspiciousCode);
      assertFalse(compiler0.options.markNoSideEffectCalls);
      assertFalse(compiler0.options.foldConstants);
      assertFalse(compiler0.options.labelRenaming);
      assertFalse(compiler0.options.optimizeArgumentsArray);
      assertFalse(compiler0.options.checkControlStructures);
      assertFalse(compiler0.options.preferLineBreakAtEndOfFile);
      assertFalse(compiler0.options.aliasExternals);
      assertFalse(compiler0.options.aliasKeywords);
      assertFalse(compiler0.options.ideMode);
      assertFalse(compiler0.options.inlineVariables);
      assertFalse(compiler0.options.optimizeParameters);
      assertFalse(compiler0.options.extractPrototypeMemberDeclarations);
      assertFalse(compiler0.options.closurePass);
      assertFalse(compiler0.options.markAsCompiled);
      assertFalse(compiler0.options.inlineGetters);
      assertFalse(compiler0.options.devirtualizePrototypeMethods);
      assertFalse(compiler0.options.lineBreak);
      assertFalse(compiler0.options.inlineConstantVars);
      assertFalse(compiler0.options.removeUnusedVars);
      assertFalse(compiler0.options.crossModuleCodeMotion);
      assertFalse(compiler0.options.rewriteFunctionExpressions);
      assertFalse(compiler0.options.recordFunctionInformation);
      assertFalse(compiler0.options.collapseProperties);
      assertFalse(compiler0.options.reserveRawExports);
      assertFalse(compiler0.options.jqueryPass);
      assertFalse(compiler0.options.inlineFunctions);
      assertFalse(compiler0.options.removeUnusedClassProperties);
      assertFalse(compiler0.options.collapseVariableDeclarations);
      assertFalse(compiler0.options.checkSymbols);
      assertFalse(compiler0.options.collapseAnonymousFunctions);
      assertFalse(compiler0.options.optimizeReturns);
      assertFalse(compiler0.options.gatherCssNames);
      assertFalse(compiler0.options.generateExports);
      assertFalse(compiler0.options.generatePseudoNames);
      assertFalse(compiler0.options.flowSensitiveInlineVariables);
      assertFalse(compiler0.options.coalesceVariableNames);
      assertFalse(compiler0.options.deadAssignmentElimination);
      assertFalse(compiler0.options.removeUnusedLocalVars);
      assertFalse(compiler0.options.checkTypes);
      assertFalse(compiler0.options.disambiguateProperties);
      assertFalse(compiler0.options.removeUnusedPrototypeProperties);
      assertFalse(compiler0.options.removeTryCatchFinally);
      assertFalse(compiler0.options.exportTestFunctions);
      assertFalse(compiler0.options.inlineLocalFunctions);
      assertFalse(compiler0.options.ambiguateProperties);
      assertFalse(compiler0.options.smartNameRemoval);
      assertFalse(compiler0.options.crossModuleMethodMotion);
      assertFalse(compiler0.options.removeUnusedPrototypePropertiesInExterns);
      assertFalse(compiler0.options.moveFunctionDeclarations);
      assertEquals(CompilerOptions.TweakProcessing.OFF, compilerOptions0.getTweakProcessing());
      assertEquals(false, compilerOptions0.isRemoveUnusedClassProperties());
      assertEquals(CompilerOptions.TracerMode.OFF, compilerOptions0.getTracerMode());
      assertEquals(false, compilerOptions0.isExternExportsEnabled());
      assertEquals(false, compilerOptions0.getInferTypes());
      assertEquals(false, compilerOptions0.assumeStrictThis());
      assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
      assertEquals(false, compilerOptions0.assumeClosuresOnlyCaptureReferences());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compilerOptions0.getLanguageIn());
      assertNull(compilerOptions0.getLanguageOut());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(false, compiler0.options.isExternExportsEnabled());
      assertEquals(CompilerOptions.TracerMode.OFF, compiler0.options.getTracerMode());
      assertEquals(false, compiler0.options.getInferTypes());
      assertNull(compiler0.options.getLanguageOut());
      assertEquals(CompilerOptions.TweakProcessing.OFF, compiler0.options.getTweakProcessing());
      assertEquals(false, compiler0.options.assumeStrictThis());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.options.getLanguageIn());
      assertEquals(false, compiler0.options.shouldColorizeErrorOutput());
      assertEquals(false, compiler0.options.assumeClosuresOnlyCaptureReferences());
      assertEquals(false, compiler0.options.isRemoveUnusedClassProperties());
      assertNotNull(compiler0.options);
      
      TypedScopeCreator typedScopeCreator0 = new TypedScopeCreator(compiler0);
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertNotNull(typedScopeCreator0);
      
      int int0 = 118;
      Node node0 = Node.newString(int0, compiler0.options.inputDelimiter);
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(false, node0.isScript());
      assertEquals(false, node0.isCase());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isGetProp());
      assertEquals(118, node0.getType());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isStringKey());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isDebugger());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isString());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.isExprResult());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isFromExterns());
      assertEquals(true, node0.isVar());
      assertEquals(false, node0.isGetElem());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isAnd());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isAssign());
      assertNotNull(node0);
      
      Scope scope0 = typedScopeCreator0.createInitialScope(node0);
      assertEquals(true, scope0.isGlobal());
      assertEquals(false, scope0.isLocal());
      assertEquals(32, scope0.getVarCount());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(false, node0.isScript());
      assertEquals(false, node0.isCase());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isGetProp());
      assertEquals(118, node0.getType());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isStringKey());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isDebugger());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isString());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.isExprResult());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isFromExterns());
      assertEquals(true, node0.isVar());
      assertEquals(false, node0.isGetElem());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isAnd());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isAssign());
      assertNotNull(scope0);
  }
}
