/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 22:49:44 GMT 2014
 */

package com.google.javascript.jscomp;

import static org.junit.Assert.*; import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.junit.Test;
import com.google.javascript.jscomp.Compiler;
import com.google.javascript.jscomp.CompilerOptions;
import com.google.javascript.jscomp.FunctionToBlockMutator;
import com.google.javascript.jscomp.Normalize;
import com.google.javascript.jscomp.RenameLabels;
import com.google.javascript.rhino.Node;
import java.io.PrintStream;



import org.evosuite.runtime.mock.java.io.MockPrintStream;

import org.junit.runner.RunWith;


public class FunctionToBlockMutatorEvoSuite_branch_Test  {

  @Test
  public void test0()  throws Throwable  {
      String string0 = "i8";
      MockPrintStream mockPrintStream0 = new MockPrintStream(string0);
      assertNotNull(mockPrintStream0);
      
      Compiler compiler0 = new Compiler((PrintStream) mockPrintStream0);
      assertNotNull(compiler0);
      
      RenameLabels.DefaultNameSupplier renameLabels_DefaultNameSupplier0 = new RenameLabels.DefaultNameSupplier();
      assertNotNull(renameLabels_DefaultNameSupplier0);
      
      FunctionToBlockMutator.LabelNameSupplier functionToBlockMutator_LabelNameSupplier0 = new FunctionToBlockMutator.LabelNameSupplier(renameLabels_DefaultNameSupplier0);
      assertNotNull(functionToBlockMutator_LabelNameSupplier0);
      
      String string1 = functionToBlockMutator_LabelNameSupplier0.get();
      assertNotSame(string1, string0);
      assertNotNull(string1);
      assertEquals("JSCompiler_inline_label_a", string1);
      assertFalse(string1.equals((Object)string0));
      
      FunctionToBlockMutator functionToBlockMutator0 = new FunctionToBlockMutator(compiler0, renameLabels_DefaultNameSupplier0);
      assertNotSame(string0, string1);
      assertNotNull(functionToBlockMutator0);
      assertFalse(string0.equals((Object)string1));
      
      Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, string1, string0);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertNotNull(node0);
      assertEquals(0, node0.getCharno());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(132, node0.getType());
      assertEquals(true, node0.isSyntheticBlock());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(1, node0.getChildCount());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(true, node0.hasChildren());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(1, node0.getLineno());
      assertEquals(true, node0.hasOneChild());
      assertEquals(false, node0.isVarArgs());
      assertEquals(4096, node0.getSourcePosition());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(0, compiler0.getWarningCount());
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      
      boolean boolean0 = false;
      // Undeclared exception!
      try {
        Node node1 = functionToBlockMutator0.mutate(string0, node0, node0, string0, boolean0, boolean0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
}
