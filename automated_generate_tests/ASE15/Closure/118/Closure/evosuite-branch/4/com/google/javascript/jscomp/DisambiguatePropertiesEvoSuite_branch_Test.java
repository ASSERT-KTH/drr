/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 20:02:28 GMT 2014
 */

package com.google.javascript.jscomp;

import static org.junit.Assert.*;
import org.junit.Test;
import com.google.javascript.jscomp.AbstractCompiler;
import com.google.javascript.jscomp.CheckLevel;
import com.google.javascript.jscomp.Compiler;
import com.google.javascript.jscomp.CompilerOptions;
import com.google.javascript.jscomp.ConcreteType;
import com.google.javascript.jscomp.DisambiguateProperties;
import com.google.javascript.jscomp.TightenTypes;
import com.google.javascript.rhino.Node;
import com.google.javascript.rhino.jstype.JSType;
import java.util.HashMap;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;

import org.evosuite.runtime.mock.java.lang.MockIllegalStateException;
import org.junit.runner.RunWith;


public class DisambiguatePropertiesEvoSuite_branch_Test  {

  @Test
  public void test0() {}
//   @Test
//   public void test0()  throws Throwable  {
//       Compiler compiler0 = new Compiler();
//       assertNotNull(compiler0);
//       assertEquals(0.0, compiler0.getProgress(), 0.01D);
//       
//       String string0 = "co.google.javascript.jscomp.Disambigu.teProperties$Wrnings";
//       Node node0 = compiler0.parseTestCode(string0);
//       assertNotNull(node0);
//       assertEquals(false, node0.isGetterDef());
//       assertEquals(false, node0.wasEmptyNode());
//       assertEquals(false, node0.isCatch());
//       assertEquals(false, node0.isGetProp());
//       assertEquals(true, node0.hasOneChild());
//       assertEquals(false, node0.isTry());
//       assertEquals(false, node0.isDelProp());
//       assertEquals(4096, node0.getSourcePosition());
//       assertEquals(false, node0.isThis());
//       assertEquals(false, node0.isNew());
//       assertEquals(false, node0.isGetElem());
//       assertEquals(false, node0.isComma());
//       assertEquals(false, node0.isDebugger());
//       assertEquals(false, node0.isHook());
//       assertEquals(false, node0.isWhile());
//       assertEquals(false, node0.isTrue());
//       assertEquals(false, node0.isAssign());
//       assertEquals(true, node0.mayMutateArguments());
//       assertEquals(false, node0.isNE());
//       assertEquals(132, node0.getType());
//       assertEquals(false, node0.isBlock());
//       assertEquals(false, node0.isOptionalArg());
//       assertEquals(false, node0.isAssignAdd());
//       assertEquals(false, node0.isCase());
//       assertEquals(true, node0.mayMutateGlobalStateOrThrow());
//       assertEquals(false, node0.isDec());
//       assertEquals(false, node0.isFalse());
//       assertEquals(false, node0.isIf());
//       assertEquals(false, node0.isEmpty());
//       assertEquals(false, node0.isAdd());
//       assertEquals(0, node0.getSideEffectFlags());
//       assertEquals(false, node0.isContinue());
//       assertEquals(false, node0.isArrayLit());
//       assertEquals(false, node0.isNoSideEffectsCall());
//       assertEquals(false, node0.isStringKey());
//       assertEquals(false, node0.isVar());
//       assertEquals(false, node0.isOnlyModifiesThisCall());
//       assertEquals("[testcode]", node0.getSourceFileName());
//       assertEquals(false, node0.isRegExp());
//       assertEquals(false, node0.isIn());
//       assertEquals(false, node0.isThrow());
//       assertEquals(false, node0.isReturn());
//       assertEquals(false, node0.isWith());
//       assertEquals(1, node0.getChildCount());
//       assertEquals(false, node0.isBreak());
//       assertEquals(false, node0.isParamList());
//       assertEquals(false, node0.hasMoreThanOneChild());
//       assertEquals(false, node0.isVoid());
//       assertEquals(false, node0.isLabel());
//       assertEquals(true, node0.hasChildren());
//       assertEquals(0, node0.getLength());
//       assertEquals(false, node0.isExprResult());
//       assertEquals(false, node0.isOnlyModifiesArgumentsCall());
//       assertEquals(false, node0.isAnd());
//       assertEquals(true, node0.isScript());
//       assertEquals(false, node0.isFromExterns());
//       assertEquals(false, node0.isTypeOf());
//       assertEquals(false, node0.isInc());
//       assertEquals(false, node0.isSetterDef());
//       assertEquals(false, node0.isNot());
//       assertEquals(false, node0.isString());
//       assertEquals(false, node0.isQuotedString());
//       assertEquals(false, node0.isDefaultCase());
//       assertEquals(false, node0.isInstanceOf());
//       assertEquals(true, node0.isSyntheticBlock());
//       assertEquals(false, node0.isFunction());
//       assertEquals(false, node0.isSwitch());
//       assertEquals(false, node0.isNull());
//       assertEquals(false, node0.isCall());
//       assertEquals(0, node0.getChangeTime());
//       assertEquals(false, node0.isObjectLit());
//       assertEquals(false, node0.isLabelName());
//       assertEquals(false, node0.isVarArgs());
//       assertEquals(false, node0.isFor());
//       assertEquals(false, node0.isLocalResultCall());
//       assertEquals(false, node0.isNumber());
//       assertEquals(false, node0.isCast());
//       assertEquals(0, node0.getCharno());
//       assertEquals(false, node0.isName());
//       assertEquals(false, node0.isDo());
//       assertEquals(false, node0.isOr());
//       assertEquals(1, node0.getLineno());
//       assertEquals(0.0, compiler0.getProgress(), 0.01D);
//       assertEquals(false, compiler0.acceptConstKeyword());
//       assertEquals(0, compiler0.getErrorCount());
//       assertEquals(false, compiler0.isTypeCheckingEnabled());
//       assertEquals(0, compiler0.getWarningCount());
//       assertEquals(false, compiler0.isIdeMode());
//       assertEquals(false, compiler0.hasErrors());
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
//       
//       TightenTypes tightenTypes0 = new TightenTypes(compiler0);
//       assertNotNull(tightenTypes0);
//       assertEquals(0.0, compiler0.getProgress(), 0.01D);
//       assertEquals(false, compiler0.acceptConstKeyword());
//       assertEquals(0, compiler0.getErrorCount());
//       assertEquals(false, compiler0.isTypeCheckingEnabled());
//       assertEquals(0, compiler0.getWarningCount());
//       assertEquals(false, compiler0.isIdeMode());
//       assertEquals(false, compiler0.hasErrors());
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
//       
//       HashMap<String, CheckLevel> hashMap0 = new HashMap<String, CheckLevel>();
//       assertNotNull(hashMap0);
//       assertEquals(0, hashMap0.size());
//       assertEquals(true, hashMap0.isEmpty());
//       assertEquals("{}", hashMap0.toString());
//       
//       DisambiguateProperties<ConcreteType> disambiguateProperties0 = DisambiguateProperties.forConcreteTypeSystem(compiler0, tightenTypes0, hashMap0);
//       assertNotNull(disambiguateProperties0);
//       assertEquals(0, hashMap0.size());
//       assertEquals(true, hashMap0.isEmpty());
//       assertEquals("{}", hashMap0.toString());
//       assertEquals(0.0, compiler0.getProgress(), 0.01D);
//       assertEquals(false, compiler0.acceptConstKeyword());
//       assertEquals(0, compiler0.getErrorCount());
//       assertEquals(false, compiler0.isTypeCheckingEnabled());
//       assertEquals(0, compiler0.getWarningCount());
//       assertEquals(false, compiler0.isIdeMode());
//       assertEquals(false, compiler0.hasErrors());
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
//       
//       int int0 = 12;
//       ConcreteType.ConcreteUniqueType concreteType_ConcreteUniqueType0 = new ConcreteType.ConcreteUniqueType(int0);
//       assertNotNull(concreteType_ConcreteUniqueType0);
//       
//       ConcreteType concreteType0 = disambiguateProperties0.getTypeWithProperty(string0, concreteType_ConcreteUniqueType0);
//       assertNull(concreteType0);
//       assertEquals(0, hashMap0.size());
//       assertEquals(true, hashMap0.isEmpty());
//       assertEquals("{}", hashMap0.toString());
//       assertEquals(0.0, compiler0.getProgress(), 0.01D);
//       assertEquals(false, compiler0.acceptConstKeyword());
//       assertEquals(0, compiler0.getErrorCount());
//       assertEquals(false, compiler0.isTypeCheckingEnabled());
//       assertEquals(0, compiler0.getWarningCount());
//       assertEquals(false, compiler0.isIdeMode());
//       assertEquals(false, compiler0.hasErrors());
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
//   }

  @Test
  public void test1() {}
//   @Test
//   public void test1()  throws Throwable  {
//       Compiler compiler0 = new Compiler();
//       assertNotNull(compiler0);
//       assertEquals(0.0, compiler0.getProgress(), 0.01D);
//       
//       String string0 = "e+9x^";
//       Node node0 = compiler0.parseTestCode(string0);
//       assertNotNull(node0);
//       assertEquals(false, node0.isIf());
//       assertEquals(false, node0.isDelProp());
//       assertEquals(false, node0.isTry());
//       assertEquals(false, node0.isIn());
//       assertEquals(false, node0.hasOneChild());
//       assertEquals(false, node0.hasChildren());
//       assertEquals(false, node0.isDebugger());
//       assertEquals(false, node0.isNE());
//       assertEquals(false, node0.isLabelName());
//       assertEquals(false, node0.isLocalResultCall());
//       assertEquals(0, node0.getSideEffectFlags());
//       assertEquals(false, node0.isInstanceOf());
//       assertEquals(false, node0.isAssign());
//       assertEquals(0, node0.getChangeTime());
//       assertEquals(false, node0.isExprResult());
//       assertEquals(false, node0.isObjectLit());
//       assertEquals(false, node0.isVar());
//       assertEquals(false, node0.isAssignAdd());
//       assertEquals(false, node0.isNumber());
//       assertEquals(false, node0.isThrow());
//       assertEquals(false, node0.isFor());
//       assertEquals(false, node0.isString());
//       assertEquals(false, node0.isContinue());
//       assertEquals(false, node0.isTypeOf());
//       assertEquals(false, node0.isTrue());
//       assertEquals(false, node0.isFalse());
//       assertEquals(false, node0.isAdd());
//       assertEquals(false, node0.isGetterDef());
//       assertEquals(false, node0.isHook());
//       assertEquals(false, node0.isBlock());
//       assertEquals(false, node0.isCall());
//       assertEquals(false, node0.isNew());
//       assertEquals(false, node0.isCatch());
//       assertEquals(false, node0.isName());
//       assertEquals(false, node0.isNoSideEffectsCall());
//       assertEquals(false, node0.isAnd());
//       assertEquals(false, node0.isDo());
//       assertEquals(-1, node0.getSourcePosition());
//       assertEquals(false, node0.isStringKey());
//       assertEquals(false, node0.isQuotedString());
//       assertEquals(false, node0.isBreak());
//       assertEquals(false, node0.isOnlyModifiesArgumentsCall());
//       assertEquals(-1, node0.getLineno());
//       assertEquals(false, node0.isComma());
//       assertEquals(true, node0.mayMutateGlobalStateOrThrow());
//       assertEquals(-1, node0.getCharno());
//       assertEquals(false, node0.isDefaultCase());
//       assertEquals(false, node0.isGetProp());
//       assertEquals(false, node0.isEmpty());
//       assertEquals(false, node0.isVarArgs());
//       assertEquals(false, node0.isFunction());
//       assertEquals(false, node0.isWith());
//       assertEquals(false, node0.wasEmptyNode());
//       assertEquals(false, node0.isCast());
//       assertEquals(false, node0.isArrayLit());
//       assertEquals(false, node0.isVoid());
//       assertEquals(false, node0.isInc());
//       assertEquals(false, node0.isThis());
//       assertEquals(false, node0.isRegExp());
//       assertEquals(false, node0.isNull());
//       assertEquals(false, node0.isOptionalArg());
//       assertEquals(false, node0.isOr());
//       assertEquals(132, node0.getType());
//       assertEquals(false, node0.isReturn());
//       assertEquals(false, node0.isCase());
//       assertEquals(false, node0.isFromExterns());
//       assertEquals(0, node0.getChildCount());
//       assertEquals(false, node0.isSyntheticBlock());
//       assertEquals(false, node0.isDec());
//       assertEquals(true, node0.isScript());
//       assertEquals(false, node0.isWhile());
//       assertEquals(0, node0.getLength());
//       assertEquals(false, node0.isLabel());
//       assertEquals(false, node0.isSwitch());
//       assertEquals(false, node0.isParamList());
//       assertEquals(false, node0.isGetElem());
//       assertEquals("[testcode]", node0.getSourceFileName());
//       assertEquals(false, node0.isSetterDef());
//       assertEquals(true, node0.mayMutateArguments());
//       assertEquals(false, node0.isNot());
//       assertEquals(false, node0.hasMoreThanOneChild());
//       assertEquals(false, node0.isOnlyModifiesThisCall());
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
//       assertEquals(false, compiler0.isTypeCheckingEnabled());
//       assertEquals(0, compiler0.getWarningCount());
//       assertEquals(true, compiler0.hasErrors());
//       assertEquals(false, compiler0.acceptConstKeyword());
//       assertEquals(false, compiler0.isIdeMode());
//       assertEquals(0.0, compiler0.getProgress(), 0.01D);
//       assertEquals(1, compiler0.getErrorCount());
//       
//       TightenTypes tightenTypes0 = new TightenTypes(compiler0);
//       assertNotNull(tightenTypes0);
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
//       assertEquals(false, compiler0.isTypeCheckingEnabled());
//       assertEquals(0, compiler0.getWarningCount());
//       assertEquals(true, compiler0.hasErrors());
//       assertEquals(false, compiler0.acceptConstKeyword());
//       assertEquals(false, compiler0.isIdeMode());
//       assertEquals(0.0, compiler0.getProgress(), 0.01D);
//       assertEquals(1, compiler0.getErrorCount());
//       
//       HashMap<String, CheckLevel> hashMap0 = new HashMap<String, CheckLevel>();
//       assertNotNull(hashMap0);
//       assertEquals(true, hashMap0.isEmpty());
//       assertEquals("{}", hashMap0.toString());
//       assertEquals(0, hashMap0.size());
//       
//       DisambiguateProperties<ConcreteType> disambiguateProperties0 = DisambiguateProperties.forConcreteTypeSystem(compiler0, tightenTypes0, hashMap0);
//       assertNotNull(disambiguateProperties0);
//       assertEquals(true, hashMap0.isEmpty());
//       assertEquals("{}", hashMap0.toString());
//       assertEquals(0, hashMap0.size());
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
//       assertEquals(false, compiler0.isTypeCheckingEnabled());
//       assertEquals(0, compiler0.getWarningCount());
//       assertEquals(true, compiler0.hasErrors());
//       assertEquals(false, compiler0.acceptConstKeyword());
//       assertEquals(false, compiler0.isIdeMode());
//       assertEquals(0.0, compiler0.getProgress(), 0.01D);
//       assertEquals(1, compiler0.getErrorCount());
//       
//       // Undeclared exception!
//       try {
//         disambiguateProperties0.process(node0, node0);
//         fail("Expecting exception: IllegalStateException");
//       
//       } catch(IllegalStateException e) {
//          //
//          // no message in exception (getMessage() returned null)
//          //
//       }
//   }

  @Test
  public void test2() {}
//   @Test
//   public void test2()  throws Throwable  {
//       Compiler compiler0 = new Compiler();
//       assertNotNull(compiler0);
//       assertEquals(0.0, compiler0.getProgress(), 0.01D);
//       
//       String string0 = "co.google.javascript.jscomp.Disambigu.teProperties$Wrnings";
//       Node node0 = compiler0.parseTestCode(string0);
//       assertNotNull(node0);
//       assertEquals(false, node0.isContinue());
//       assertEquals(false, node0.isOnlyModifiesArgumentsCall());
//       assertEquals(false, node0.isReturn());
//       assertEquals(false, node0.isVoid());
//       assertEquals(132, node0.getType());
//       assertEquals(1, node0.getLineno());
//       assertEquals(false, node0.isObjectLit());
//       assertEquals(true, node0.hasChildren());
//       assertEquals(false, node0.isOnlyModifiesThisCall());
//       assertEquals(false, node0.isGetProp());
//       assertEquals(false, node0.isTypeOf());
//       assertEquals(false, node0.isInc());
//       assertEquals(false, node0.isCase());
//       assertEquals(false, node0.isFromExterns());
//       assertEquals(false, node0.isDec());
//       assertEquals(false, node0.isExprResult());
//       assertEquals(false, node0.isEmpty());
//       assertEquals(0, node0.getCharno());
//       assertEquals(false, node0.isDefaultCase());
//       assertEquals(false, node0.isSetterDef());
//       assertEquals(false, node0.isGetterDef());
//       assertEquals(false, node0.isInstanceOf());
//       assertEquals(false, node0.isNoSideEffectsCall());
//       assertEquals(false, node0.isDo());
//       assertEquals(false, node0.isNull());
//       assertEquals(false, node0.isGetElem());
//       assertEquals(false, node0.isNumber());
//       assertEquals(false, node0.isCast());
//       assertEquals(false, node0.isLabel());
//       assertEquals(false, node0.isFunction());
//       assertEquals(false, node0.isWith());
//       assertEquals(false, node0.isNot());
//       assertEquals(false, node0.isString());
//       assertEquals(false, node0.isOptionalArg());
//       assertEquals(false, node0.isComma());
//       assertEquals(false, node0.isBreak());
//       assertEquals(false, node0.isHook());
//       assertEquals(false, node0.isDebugger());
//       assertEquals(false, node0.isTry());
//       assertEquals(false, node0.isOr());
//       assertEquals(false, node0.isAdd());
//       assertEquals(true, node0.isScript());
//       assertEquals(false, node0.isAnd());
//       assertEquals(false, node0.isCatch());
//       assertEquals(false, node0.isThis());
//       assertEquals(false, node0.isDelProp());
//       assertEquals(false, node0.isParamList());
//       assertEquals(false, node0.isCall());
//       assertEquals(false, node0.isName());
//       assertEquals(false, node0.isLocalResultCall());
//       assertEquals(false, node0.isStringKey());
//       assertEquals(false, node0.isAssignAdd());
//       assertEquals(0, node0.getLength());
//       assertEquals(0, node0.getSideEffectFlags());
//       assertEquals(false, node0.isNew());
//       assertEquals(false, node0.isLabelName());
//       assertEquals(false, node0.isFor());
//       assertEquals(false, node0.isTrue());
//       assertEquals(false, node0.isThrow());
//       assertEquals(1, node0.getChildCount());
//       assertEquals(false, node0.isWhile());
//       assertEquals(0, node0.getChangeTime());
//       assertEquals(false, node0.isQuotedString());
//       assertEquals(true, node0.isSyntheticBlock());
//       assertEquals(false, node0.hasMoreThanOneChild());
//       assertEquals(false, node0.isSwitch());
//       assertEquals(false, node0.isFalse());
//       assertEquals(true, node0.mayMutateArguments());
//       assertEquals(false, node0.isArrayLit());
//       assertEquals(true, node0.mayMutateGlobalStateOrThrow());
//       assertEquals(false, node0.isBlock());
//       assertEquals(false, node0.isIn());
//       assertEquals("[testcode]", node0.getSourceFileName());
//       assertEquals(false, node0.isAssign());
//       assertEquals(false, node0.isNE());
//       assertEquals(false, node0.isIf());
//       assertEquals(false, node0.isVar());
//       assertEquals(false, node0.wasEmptyNode());
//       assertEquals(false, node0.isVarArgs());
//       assertEquals(4096, node0.getSourcePosition());
//       assertEquals(true, node0.hasOneChild());
//       assertEquals(false, node0.isRegExp());
//       assertEquals(false, compiler0.acceptConstKeyword());
//       assertEquals(0.0, compiler0.getProgress(), 0.01D);
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
//       assertEquals(0, compiler0.getWarningCount());
//       assertEquals(false, compiler0.isTypeCheckingEnabled());
//       assertEquals(false, compiler0.hasErrors());
//       assertEquals(0, compiler0.getErrorCount());
//       assertEquals(false, compiler0.isIdeMode());
//       
//       TightenTypes tightenTypes0 = new TightenTypes(compiler0);
//       assertNotNull(tightenTypes0);
//       assertEquals(false, compiler0.acceptConstKeyword());
//       assertEquals(0.0, compiler0.getProgress(), 0.01D);
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
//       assertEquals(0, compiler0.getWarningCount());
//       assertEquals(false, compiler0.isTypeCheckingEnabled());
//       assertEquals(false, compiler0.hasErrors());
//       assertEquals(0, compiler0.getErrorCount());
//       assertEquals(false, compiler0.isIdeMode());
//       
//       HashMap<String, CheckLevel> hashMap0 = new HashMap<String, CheckLevel>();
//       assertNotNull(hashMap0);
//       assertEquals("{}", hashMap0.toString());
//       assertEquals(true, hashMap0.isEmpty());
//       assertEquals(0, hashMap0.size());
//       
//       DisambiguateProperties<ConcreteType> disambiguateProperties0 = DisambiguateProperties.forConcreteTypeSystem(compiler0, tightenTypes0, hashMap0);
//       assertNotNull(disambiguateProperties0);
//       assertEquals(false, compiler0.acceptConstKeyword());
//       assertEquals(0.0, compiler0.getProgress(), 0.01D);
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
//       assertEquals(0, compiler0.getWarningCount());
//       assertEquals(false, compiler0.isTypeCheckingEnabled());
//       assertEquals(false, compiler0.hasErrors());
//       assertEquals(0, compiler0.getErrorCount());
//       assertEquals(false, compiler0.isIdeMode());
//       assertEquals("{}", hashMap0.toString());
//       assertEquals(true, hashMap0.isEmpty());
//       assertEquals(0, hashMap0.size());
//       
//       AbstractCompiler.LifeCycleStage abstractCompiler_LifeCycleStage0 = AbstractCompiler.LifeCycleStage.NORMALIZED;
//       compiler0.setLifeCycleStage(abstractCompiler_LifeCycleStage0);
//       assertEquals(false, compiler0.acceptConstKeyword());
//       assertEquals(0.0, compiler0.getProgress(), 0.01D);
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
//       assertEquals(0, compiler0.getWarningCount());
//       assertEquals(false, compiler0.isTypeCheckingEnabled());
//       assertEquals(false, compiler0.hasErrors());
//       assertEquals(0, compiler0.getErrorCount());
//       assertEquals(false, compiler0.isIdeMode());
//       
//       disambiguateProperties0.process(node0, node0);
//       assertEquals(false, node0.isContinue());
//       assertEquals(false, node0.isOnlyModifiesArgumentsCall());
//       assertEquals(false, node0.isReturn());
//       assertEquals(false, node0.isVoid());
//       assertEquals(132, node0.getType());
//       assertEquals(1, node0.getLineno());
//       assertEquals(false, node0.isObjectLit());
//       assertEquals(true, node0.hasChildren());
//       assertEquals(false, node0.isOnlyModifiesThisCall());
//       assertEquals(false, node0.isGetProp());
//       assertEquals(false, node0.isTypeOf());
//       assertEquals(false, node0.isInc());
//       assertEquals(false, node0.isCase());
//       assertEquals(false, node0.isFromExterns());
//       assertEquals(false, node0.isDec());
//       assertEquals(false, node0.isExprResult());
//       assertEquals(false, node0.isEmpty());
//       assertEquals(0, node0.getCharno());
//       assertEquals(false, node0.isDefaultCase());
//       assertEquals(false, node0.isSetterDef());
//       assertEquals(false, node0.isGetterDef());
//       assertEquals(false, node0.isInstanceOf());
//       assertEquals(false, node0.isNoSideEffectsCall());
//       assertEquals(false, node0.isDo());
//       assertEquals(false, node0.isNull());
//       assertEquals(false, node0.isGetElem());
//       assertEquals(false, node0.isNumber());
//       assertEquals(false, node0.isCast());
//       assertEquals(false, node0.isLabel());
//       assertEquals(false, node0.isFunction());
//       assertEquals(false, node0.isWith());
//       assertEquals(false, node0.isNot());
//       assertEquals(false, node0.isString());
//       assertEquals(false, node0.isOptionalArg());
//       assertEquals(false, node0.isComma());
//       assertEquals(false, node0.isBreak());
//       assertEquals(false, node0.isHook());
//       assertEquals(false, node0.isDebugger());
//       assertEquals(false, node0.isTry());
//       assertEquals(false, node0.isOr());
//       assertEquals(false, node0.isAdd());
//       assertEquals(true, node0.isScript());
//       assertEquals(false, node0.isAnd());
//       assertEquals(false, node0.isCatch());
//       assertEquals(false, node0.isThis());
//       assertEquals(false, node0.isDelProp());
//       assertEquals(false, node0.isParamList());
//       assertEquals(false, node0.isCall());
//       assertEquals(false, node0.isName());
//       assertEquals(false, node0.isLocalResultCall());
//       assertEquals(false, node0.isStringKey());
//       assertEquals(false, node0.isAssignAdd());
//       assertEquals(0, node0.getLength());
//       assertEquals(0, node0.getSideEffectFlags());
//       assertEquals(false, node0.isNew());
//       assertEquals(false, node0.isLabelName());
//       assertEquals(false, node0.isFor());
//       assertEquals(false, node0.isTrue());
//       assertEquals(false, node0.isThrow());
//       assertEquals(1, node0.getChildCount());
//       assertEquals(false, node0.isWhile());
//       assertEquals(0, node0.getChangeTime());
//       assertEquals(false, node0.isQuotedString());
//       assertEquals(true, node0.isSyntheticBlock());
//       assertEquals(false, node0.hasMoreThanOneChild());
//       assertEquals(false, node0.isSwitch());
//       assertEquals(false, node0.isFalse());
//       assertEquals(true, node0.mayMutateArguments());
//       assertEquals(false, node0.isArrayLit());
//       assertEquals(true, node0.mayMutateGlobalStateOrThrow());
//       assertEquals(false, node0.isBlock());
//       assertEquals(false, node0.isIn());
//       assertEquals("[testcode]", node0.getSourceFileName());
//       assertEquals(false, node0.isAssign());
//       assertEquals(false, node0.isNE());
//       assertEquals(false, node0.isIf());
//       assertEquals(false, node0.isVar());
//       assertEquals(false, node0.wasEmptyNode());
//       assertEquals(false, node0.isVarArgs());
//       assertEquals(4096, node0.getSourcePosition());
//       assertEquals(true, node0.hasOneChild());
//       assertEquals(false, node0.isRegExp());
//       assertEquals(false, compiler0.acceptConstKeyword());
//       assertEquals(0.0, compiler0.getProgress(), 0.01D);
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
//       assertEquals(0, compiler0.getWarningCount());
//       assertEquals(false, compiler0.isTypeCheckingEnabled());
//       assertEquals(false, compiler0.hasErrors());
//       assertEquals(0, compiler0.getErrorCount());
//       assertEquals(false, compiler0.isIdeMode());
//       assertEquals("{}", hashMap0.toString());
//       assertEquals(true, hashMap0.isEmpty());
//       assertEquals(0, hashMap0.size());
//       
//       disambiguateProperties0.process(node0, node0);
//       assertEquals(false, node0.isContinue());
//       assertEquals(false, node0.isOnlyModifiesArgumentsCall());
//       assertEquals(false, node0.isReturn());
//       assertEquals(false, node0.isVoid());
//       assertEquals(132, node0.getType());
//       assertEquals(1, node0.getLineno());
//       assertEquals(false, node0.isObjectLit());
//       assertEquals(true, node0.hasChildren());
//       assertEquals(false, node0.isOnlyModifiesThisCall());
//       assertEquals(false, node0.isGetProp());
//       assertEquals(false, node0.isTypeOf());
//       assertEquals(false, node0.isInc());
//       assertEquals(false, node0.isCase());
//       assertEquals(false, node0.isFromExterns());
//       assertEquals(false, node0.isDec());
//       assertEquals(false, node0.isExprResult());
//       assertEquals(false, node0.isEmpty());
//       assertEquals(0, node0.getCharno());
//       assertEquals(false, node0.isDefaultCase());
//       assertEquals(false, node0.isSetterDef());
//       assertEquals(false, node0.isGetterDef());
//       assertEquals(false, node0.isInstanceOf());
//       assertEquals(false, node0.isNoSideEffectsCall());
//       assertEquals(false, node0.isDo());
//       assertEquals(false, node0.isNull());
//       assertEquals(false, node0.isGetElem());
//       assertEquals(false, node0.isNumber());
//       assertEquals(false, node0.isCast());
//       assertEquals(false, node0.isLabel());
//       assertEquals(false, node0.isFunction());
//       assertEquals(false, node0.isWith());
//       assertEquals(false, node0.isNot());
//       assertEquals(false, node0.isString());
//       assertEquals(false, node0.isOptionalArg());
//       assertEquals(false, node0.isComma());
//       assertEquals(false, node0.isBreak());
//       assertEquals(false, node0.isHook());
//       assertEquals(false, node0.isDebugger());
//       assertEquals(false, node0.isTry());
//       assertEquals(false, node0.isOr());
//       assertEquals(false, node0.isAdd());
//       assertEquals(true, node0.isScript());
//       assertEquals(false, node0.isAnd());
//       assertEquals(false, node0.isCatch());
//       assertEquals(false, node0.isThis());
//       assertEquals(false, node0.isDelProp());
//       assertEquals(false, node0.isParamList());
//       assertEquals(false, node0.isCall());
//       assertEquals(false, node0.isName());
//       assertEquals(false, node0.isLocalResultCall());
//       assertEquals(false, node0.isStringKey());
//       assertEquals(false, node0.isAssignAdd());
//       assertEquals(0, node0.getLength());
//       assertEquals(0, node0.getSideEffectFlags());
//       assertEquals(false, node0.isNew());
//       assertEquals(false, node0.isLabelName());
//       assertEquals(false, node0.isFor());
//       assertEquals(false, node0.isTrue());
//       assertEquals(false, node0.isThrow());
//       assertEquals(1, node0.getChildCount());
//       assertEquals(false, node0.isWhile());
//       assertEquals(0, node0.getChangeTime());
//       assertEquals(false, node0.isQuotedString());
//       assertEquals(true, node0.isSyntheticBlock());
//       assertEquals(false, node0.hasMoreThanOneChild());
//       assertEquals(false, node0.isSwitch());
//       assertEquals(false, node0.isFalse());
//       assertEquals(true, node0.mayMutateArguments());
//       assertEquals(false, node0.isArrayLit());
//       assertEquals(true, node0.mayMutateGlobalStateOrThrow());
//       assertEquals(false, node0.isBlock());
//       assertEquals(false, node0.isIn());
//       assertEquals("[testcode]", node0.getSourceFileName());
//       assertEquals(false, node0.isAssign());
//       assertEquals(false, node0.isNE());
//       assertEquals(false, node0.isIf());
//       assertEquals(false, node0.isVar());
//       assertEquals(false, node0.wasEmptyNode());
//       assertEquals(false, node0.isVarArgs());
//       assertEquals(4096, node0.getSourcePosition());
//       assertEquals(true, node0.hasOneChild());
//       assertEquals(false, node0.isRegExp());
//       assertEquals(false, compiler0.acceptConstKeyword());
//       assertEquals(0.0, compiler0.getProgress(), 0.01D);
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
//       assertEquals(0, compiler0.getWarningCount());
//       assertEquals(false, compiler0.isTypeCheckingEnabled());
//       assertEquals(false, compiler0.hasErrors());
//       assertEquals(0, compiler0.getErrorCount());
//       assertEquals(false, compiler0.isIdeMode());
//       assertEquals("{}", hashMap0.toString());
//       assertEquals(true, hashMap0.isEmpty());
//       assertEquals(0, hashMap0.size());
//   }

  @Test
  public void test3()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      assertNotNull(compiler0);
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      
      HashMap<String, CheckLevel> hashMap0 = new HashMap<String, CheckLevel>();
      assertNotNull(hashMap0);
      assertEquals(true, hashMap0.isEmpty());
      assertEquals("{}", hashMap0.toString());
      assertEquals(0, hashMap0.size());
      
      // Undeclared exception!
      try {
        DisambiguateProperties<JSType> disambiguateProperties0 = DisambiguateProperties.forJSTypeSystem(compiler0, hashMap0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test4()  throws Throwable  {
      DisambiguateProperties.Warnings disambiguateProperties_Warnings0 = new DisambiguateProperties.Warnings();
      assertNotNull(disambiguateProperties_Warnings0);
  }
}
