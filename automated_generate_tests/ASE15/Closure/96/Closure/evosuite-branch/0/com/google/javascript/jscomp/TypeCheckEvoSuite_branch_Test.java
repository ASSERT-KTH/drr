/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 22:40:45 GMT 2014
 */

package com.google.javascript.jscomp;

import static org.junit.Assert.*; import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.junit.Test;
import com.google.javascript.jscomp.AbstractCompiler;
import com.google.javascript.jscomp.CheckLevel;
import com.google.javascript.jscomp.Compiler;
import com.google.javascript.jscomp.DefaultPassConfig;
import com.google.javascript.jscomp.GoogleCodingConvention;
import com.google.javascript.jscomp.NodeTraversal;
import com.google.javascript.jscomp.PassConfig;
import com.google.javascript.jscomp.ReverseAbstractInterpreter;
import com.google.javascript.jscomp.RuntimeTypeCheck;
import com.google.javascript.jscomp.Scope;
import com.google.javascript.jscomp.ScopeCreator;
import com.google.javascript.jscomp.SemanticReverseAbstractInterpreter;
import com.google.javascript.jscomp.TightenTypes;
import com.google.javascript.jscomp.TypeCheck;
import com.google.javascript.jscomp.TypedScopeCreator;
import com.google.javascript.rhino.Node;
import com.google.javascript.rhino.jstype.JSTypeRegistry;



import org.evosuite.runtime.mock.java.lang.MockIllegalStateException;
import org.junit.runner.RunWith;


public class TypeCheckEvoSuite_branch_Test  {

  @Test
  public void test00()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      assertNotNull(compiler0);
      
      String string0 = "rp";
      Node node0 = compiler0.parseTestCode(string0);
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(1, node0.getChildCount());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(1, node0.getLineno());
      assertEquals(true, node0.hasChildren());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(0, node0.getCharno());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(true, node0.hasOneChild());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isQuotedString());
      assertEquals(true, node0.isSyntheticBlock());
      assertEquals(132, node0.getType());
      assertNotNull(node0);
      
      GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
      assertEquals("goog.abstractMethod", googleCodingConvention0.getAbstractMethodName());
      assertEquals("goog.exportProperty", googleCodingConvention0.getExportPropertyFunction());
      assertNull(googleCodingConvention0.getDelegateSuperclassName());
      assertEquals("goog.global", googleCodingConvention0.getGlobalObject());
      assertEquals("goog.exportSymbol", googleCodingConvention0.getExportSymbolFunction());
      assertNotNull(googleCodingConvention0);
      
      TightenTypes tightenTypes0 = new TightenTypes(compiler0);
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertNotNull(tightenTypes0);
      
      JSTypeRegistry jSTypeRegistry0 = tightenTypes0.getTypeRegistry();
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = (SemanticReverseAbstractInterpreter)compiler0.getReverseAbstractInterpreter();
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertNotNull(semanticReverseAbstractInterpreter0);
      
      TypedScopeCreator typedScopeCreator0 = new TypedScopeCreator(compiler0, googleCodingConvention0);
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals("goog.abstractMethod", googleCodingConvention0.getAbstractMethodName());
      assertEquals("goog.exportProperty", googleCodingConvention0.getExportPropertyFunction());
      assertNull(googleCodingConvention0.getDelegateSuperclassName());
      assertEquals("goog.global", googleCodingConvention0.getGlobalObject());
      assertEquals("goog.exportSymbol", googleCodingConvention0.getExportSymbolFunction());
      assertNotNull(typedScopeCreator0);
      
      Scope scope0 = typedScopeCreator0.createInitialScope(node0);
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(33, scope0.getVarCount());
      assertEquals(true, scope0.isGlobal());
      assertEquals(false, scope0.isLocal());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(1, node0.getChildCount());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(1, node0.getLineno());
      assertEquals(true, node0.hasChildren());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(0, node0.getCharno());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(true, node0.hasOneChild());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isQuotedString());
      assertEquals(true, node0.isSyntheticBlock());
      assertEquals(132, node0.getType());
      assertEquals("goog.abstractMethod", googleCodingConvention0.getAbstractMethodName());
      assertEquals("goog.exportProperty", googleCodingConvention0.getExportPropertyFunction());
      assertNull(googleCodingConvention0.getDelegateSuperclassName());
      assertEquals("goog.global", googleCodingConvention0.getGlobalObject());
      assertEquals("goog.exportSymbol", googleCodingConvention0.getExportSymbolFunction());
      assertNotNull(scope0);
      
      CheckLevel checkLevel0 = CheckLevel.OFF;
      TypeCheck typeCheck0 = new TypeCheck((AbstractCompiler) compiler0, (ReverseAbstractInterpreter) semanticReverseAbstractInterpreter0, jSTypeRegistry0, scope0, (ScopeCreator) typedScopeCreator0, checkLevel0, checkLevel0);
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(33, scope0.getVarCount());
      assertEquals(true, scope0.isGlobal());
      assertEquals(false, scope0.isLocal());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(1, node0.getChildCount());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(1, node0.getLineno());
      assertEquals(true, node0.hasChildren());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(0, node0.getCharno());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(true, node0.hasOneChild());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isQuotedString());
      assertEquals(true, node0.isSyntheticBlock());
      assertEquals(132, node0.getType());
      assertEquals("goog.abstractMethod", googleCodingConvention0.getAbstractMethodName());
      assertEquals("goog.exportProperty", googleCodingConvention0.getExportPropertyFunction());
      assertNull(googleCodingConvention0.getDelegateSuperclassName());
      assertEquals("goog.global", googleCodingConvention0.getGlobalObject());
      assertEquals("goog.exportSymbol", googleCodingConvention0.getExportSymbolFunction());
      assertNotNull(typeCheck0);
      
      double double0 = typeCheck0.getTypedPercent();
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(33, scope0.getVarCount());
      assertEquals(true, scope0.isGlobal());
      assertEquals(false, scope0.isLocal());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(1, node0.getChildCount());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(1, node0.getLineno());
      assertEquals(true, node0.hasChildren());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(0, node0.getCharno());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(true, node0.hasOneChild());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isQuotedString());
      assertEquals(true, node0.isSyntheticBlock());
      assertEquals(132, node0.getType());
      assertEquals("goog.abstractMethod", googleCodingConvention0.getAbstractMethodName());
      assertEquals("goog.exportProperty", googleCodingConvention0.getExportPropertyFunction());
      assertNull(googleCodingConvention0.getDelegateSuperclassName());
      assertEquals("goog.global", googleCodingConvention0.getGlobalObject());
      assertEquals("goog.exportSymbol", googleCodingConvention0.getExportSymbolFunction());
      assertEquals(0.0, double0, 0.01D);
  }

  @Test
  public void test01()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      assertNotNull(compiler0);
      
      String string0 = "prototype";
      Node node0 = compiler0.parseTestCode(string0);
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(1, node0.getChildCount());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(true, node0.hasChildren());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(0, node0.getCharno());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(132, node0.getType());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(1, node0.getLineno());
      assertEquals(true, node0.hasOneChild());
      assertEquals(true, node0.isSyntheticBlock());
      assertEquals(false, node0.isVarArgs());
      assertNotNull(node0);
      
      GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
      assertEquals("goog.global", googleCodingConvention0.getGlobalObject());
      assertEquals("goog.exportSymbol", googleCodingConvention0.getExportSymbolFunction());
      assertNull(googleCodingConvention0.getDelegateSuperclassName());
      assertEquals("goog.exportProperty", googleCodingConvention0.getExportPropertyFunction());
      assertEquals("goog.abstractMethod", googleCodingConvention0.getAbstractMethodName());
      assertNotNull(googleCodingConvention0);
      
      TightenTypes tightenTypes0 = new TightenTypes(compiler0);
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.hasErrors());
      assertNotNull(tightenTypes0);
      
      JSTypeRegistry jSTypeRegistry0 = tightenTypes0.getTypeRegistry();
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = (SemanticReverseAbstractInterpreter)compiler0.getReverseAbstractInterpreter();
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.hasErrors());
      assertNotNull(semanticReverseAbstractInterpreter0);
      
      TypedScopeCreator typedScopeCreator0 = new TypedScopeCreator(compiler0, googleCodingConvention0);
      assertEquals("goog.global", googleCodingConvention0.getGlobalObject());
      assertEquals("goog.exportSymbol", googleCodingConvention0.getExportSymbolFunction());
      assertNull(googleCodingConvention0.getDelegateSuperclassName());
      assertEquals("goog.exportProperty", googleCodingConvention0.getExportPropertyFunction());
      assertEquals("goog.abstractMethod", googleCodingConvention0.getAbstractMethodName());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.hasErrors());
      assertNotNull(typedScopeCreator0);
      
      Scope scope0 = typedScopeCreator0.createInitialScope(node0);
      assertEquals("goog.global", googleCodingConvention0.getGlobalObject());
      assertEquals("goog.exportSymbol", googleCodingConvention0.getExportSymbolFunction());
      assertNull(googleCodingConvention0.getDelegateSuperclassName());
      assertEquals("goog.exportProperty", googleCodingConvention0.getExportPropertyFunction());
      assertEquals("goog.abstractMethod", googleCodingConvention0.getAbstractMethodName());
      assertEquals(33, scope0.getVarCount());
      assertEquals(false, scope0.isLocal());
      assertEquals(true, scope0.isGlobal());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(1, node0.getChildCount());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(true, node0.hasChildren());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(0, node0.getCharno());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(132, node0.getType());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(1, node0.getLineno());
      assertEquals(true, node0.hasOneChild());
      assertEquals(true, node0.isSyntheticBlock());
      assertEquals(false, node0.isVarArgs());
      assertNotNull(scope0);
      
      CheckLevel checkLevel0 = CheckLevel.WARNING;
      TypeCheck typeCheck0 = new TypeCheck((AbstractCompiler) compiler0, (ReverseAbstractInterpreter) semanticReverseAbstractInterpreter0, jSTypeRegistry0, scope0, (ScopeCreator) typedScopeCreator0, checkLevel0, checkLevel0);
      assertEquals("goog.global", googleCodingConvention0.getGlobalObject());
      assertEquals("goog.exportSymbol", googleCodingConvention0.getExportSymbolFunction());
      assertNull(googleCodingConvention0.getDelegateSuperclassName());
      assertEquals("goog.exportProperty", googleCodingConvention0.getExportPropertyFunction());
      assertEquals("goog.abstractMethod", googleCodingConvention0.getAbstractMethodName());
      assertEquals(33, scope0.getVarCount());
      assertEquals(false, scope0.isLocal());
      assertEquals(true, scope0.isGlobal());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(1, node0.getChildCount());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(true, node0.hasChildren());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(0, node0.getCharno());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(132, node0.getType());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(1, node0.getLineno());
      assertEquals(true, node0.hasOneChild());
      assertEquals(true, node0.isSyntheticBlock());
      assertEquals(false, node0.isVarArgs());
      assertNotNull(typeCheck0);
      
      boolean boolean0 = googleCodingConvention0.isExported(string0);
      assertEquals("goog.global", googleCodingConvention0.getGlobalObject());
      assertEquals("goog.exportSymbol", googleCodingConvention0.getExportSymbolFunction());
      assertNull(googleCodingConvention0.getDelegateSuperclassName());
      assertEquals("goog.exportProperty", googleCodingConvention0.getExportPropertyFunction());
      assertEquals("goog.abstractMethod", googleCodingConvention0.getAbstractMethodName());
      assertFalse(boolean0);
      
      typeCheck0.check(node0, boolean0);
      assertEquals("goog.global", googleCodingConvention0.getGlobalObject());
      assertEquals("goog.exportSymbol", googleCodingConvention0.getExportSymbolFunction());
      assertNull(googleCodingConvention0.getDelegateSuperclassName());
      assertEquals("goog.exportProperty", googleCodingConvention0.getExportPropertyFunction());
      assertEquals("goog.abstractMethod", googleCodingConvention0.getAbstractMethodName());
      assertEquals(33, scope0.getVarCount());
      assertEquals(false, scope0.isLocal());
      assertEquals(true, scope0.isGlobal());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(1, compiler0.getWarningCount());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(1, node0.getChildCount());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(true, node0.hasChildren());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(0, node0.getCharno());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(132, node0.getType());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(1, node0.getLineno());
      assertEquals(true, node0.hasOneChild());
      assertEquals(true, node0.isSyntheticBlock());
      assertEquals(false, node0.isVarArgs());
      
      typeCheck0.check(node0, boolean0);
      assertEquals("goog.global", googleCodingConvention0.getGlobalObject());
      assertEquals("goog.exportSymbol", googleCodingConvention0.getExportSymbolFunction());
      assertNull(googleCodingConvention0.getDelegateSuperclassName());
      assertEquals("goog.exportProperty", googleCodingConvention0.getExportPropertyFunction());
      assertEquals("goog.abstractMethod", googleCodingConvention0.getAbstractMethodName());
      assertEquals(33, scope0.getVarCount());
      assertEquals(false, scope0.isLocal());
      assertEquals(true, scope0.isGlobal());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(1, compiler0.getWarningCount());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(1, node0.getChildCount());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(true, node0.hasChildren());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(0, node0.getCharno());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(132, node0.getType());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(1, node0.getLineno());
      assertEquals(true, node0.hasOneChild());
      assertEquals(true, node0.isSyntheticBlock());
      assertEquals(false, node0.isVarArgs());
  }

  @Test
  public void test02()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      assertNotNull(compiler0);
      
      String string0 = "!&c'`H%LK?y~yI";
      Node node0 = compiler0.parseTestCode(string0);
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(2, compiler0.getErrorCount());
      assertEquals(true, compiler0.hasErrors());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isQuotedString());
      assertEquals(0, node0.getChildCount());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.hasChildren());
      assertEquals(125, node0.getType());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isOptionalArg());
      assertNotNull(node0);
      
      int int0 = 1357;
      Node node1 = new Node(int0, node0, node0, node0, node0);
      assertNotSame(node1, node0);
      assertNotSame(node0, node1);
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(2, compiler0.getErrorCount());
      assertEquals(true, compiler0.hasErrors());
      assertEquals(false, node1.isVarArgs());
      assertEquals(false, node1.wasEmptyNode());
      assertEquals(false, node1.isQualifiedName());
      assertEquals(-1, node1.getLineno());
      assertEquals(false, node1.hasMoreThanOneChild());
      assertEquals(false, node1.isUnscopedQualifiedName());
      assertEquals(false, node1.isOptionalArg());
      assertEquals(false, node1.isSyntheticBlock());
      assertEquals(true, node1.hasChildren());
      assertEquals(-1, node1.getCharno());
      assertEquals(1357, node1.getType());
      assertEquals(1, node1.getChildCount());
      assertEquals(true, node1.hasOneChild());
      assertEquals(false, node1.isQuotedString());
      assertEquals(false, node1.isNoSideEffectsCall());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isQuotedString());
      assertEquals(0, node0.getChildCount());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.hasChildren());
      assertEquals(125, node0.getType());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isOptionalArg());
      assertNotNull(node1);
      assertFalse(node1.equals((Object)node0));
      assertFalse(node0.equals((Object)node1));
      
      DefaultPassConfig defaultPassConfig0 = (DefaultPassConfig)compiler0.getPassConfig();
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(2, compiler0.getErrorCount());
      assertEquals(true, compiler0.hasErrors());
      assertNotNull(defaultPassConfig0);
      
      PassConfig.PassConfigDelegate passConfig_PassConfigDelegate0 = new PassConfig.PassConfigDelegate(defaultPassConfig0);
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(2, compiler0.getErrorCount());
      assertEquals(true, compiler0.hasErrors());
      assertNotNull(passConfig_PassConfigDelegate0);
      
      TypeCheck typeCheck0 = passConfig_PassConfigDelegate0.makeTypeCheck(compiler0);
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(2, compiler0.getErrorCount());
      assertEquals(true, compiler0.hasErrors());
      assertNotNull(typeCheck0);
      
      NodeTraversal nodeTraversal0 = new NodeTraversal((AbstractCompiler) compiler0, (NodeTraversal.Callback) typeCheck0);
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(2, compiler0.getErrorCount());
      assertEquals(true, compiler0.hasErrors());
      assertEquals(0, nodeTraversal0.getLineNumber());
      assertEquals("", nodeTraversal0.getSourceName());
      assertNotNull(nodeTraversal0);
      
      // Undeclared exception!
      try {
        typeCheck0.visit(nodeTraversal0, node1, node1);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 1357
         //
      }
  }

  @Test
  public void test03()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      assertNotNull(compiler0);
      
      String string0 = "~Q";
      Node node0 = compiler0.parseTestCode(string0);
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(0, node0.getCharno());
      assertEquals(1, node0.getChildCount());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(1, node0.getLineno());
      assertEquals(132, node0.getType());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isVarArgs());
      assertEquals(true, node0.hasOneChild());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(true, node0.hasChildren());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(true, node0.isSyntheticBlock());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.hasErrors());
      assertNotNull(node0);
      
      GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
      assertEquals("goog.abstractMethod", googleCodingConvention0.getAbstractMethodName());
      assertEquals("goog.exportSymbol", googleCodingConvention0.getExportSymbolFunction());
      assertEquals("goog.exportProperty", googleCodingConvention0.getExportPropertyFunction());
      assertEquals("goog.global", googleCodingConvention0.getGlobalObject());
      assertNull(googleCodingConvention0.getDelegateSuperclassName());
      assertNotNull(googleCodingConvention0);
      
      TightenTypes tightenTypes0 = new TightenTypes(compiler0);
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.hasErrors());
      assertNotNull(tightenTypes0);
      
      JSTypeRegistry jSTypeRegistry0 = tightenTypes0.getTypeRegistry();
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = (SemanticReverseAbstractInterpreter)compiler0.getReverseAbstractInterpreter();
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.hasErrors());
      assertNotNull(semanticReverseAbstractInterpreter0);
      
      TypedScopeCreator typedScopeCreator0 = new TypedScopeCreator(compiler0, googleCodingConvention0);
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.hasErrors());
      assertEquals("goog.abstractMethod", googleCodingConvention0.getAbstractMethodName());
      assertEquals("goog.exportSymbol", googleCodingConvention0.getExportSymbolFunction());
      assertEquals("goog.exportProperty", googleCodingConvention0.getExportPropertyFunction());
      assertEquals("goog.global", googleCodingConvention0.getGlobalObject());
      assertNull(googleCodingConvention0.getDelegateSuperclassName());
      assertNotNull(typedScopeCreator0);
      
      Scope scope0 = typedScopeCreator0.createInitialScope(node0);
      assertEquals(33, scope0.getVarCount());
      assertEquals(false, scope0.isLocal());
      assertEquals(true, scope0.isGlobal());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(0, node0.getCharno());
      assertEquals(1, node0.getChildCount());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(1, node0.getLineno());
      assertEquals(132, node0.getType());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isVarArgs());
      assertEquals(true, node0.hasOneChild());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(true, node0.hasChildren());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(true, node0.isSyntheticBlock());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.hasErrors());
      assertEquals("goog.abstractMethod", googleCodingConvention0.getAbstractMethodName());
      assertEquals("goog.exportSymbol", googleCodingConvention0.getExportSymbolFunction());
      assertEquals("goog.exportProperty", googleCodingConvention0.getExportPropertyFunction());
      assertEquals("goog.global", googleCodingConvention0.getGlobalObject());
      assertNull(googleCodingConvention0.getDelegateSuperclassName());
      assertNotNull(scope0);
      
      CheckLevel checkLevel0 = CheckLevel.OFF;
      TypeCheck typeCheck0 = new TypeCheck((AbstractCompiler) compiler0, (ReverseAbstractInterpreter) semanticReverseAbstractInterpreter0, jSTypeRegistry0, scope0, (ScopeCreator) typedScopeCreator0, checkLevel0, checkLevel0);
      assertEquals(33, scope0.getVarCount());
      assertEquals(false, scope0.isLocal());
      assertEquals(true, scope0.isGlobal());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(0, node0.getCharno());
      assertEquals(1, node0.getChildCount());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(1, node0.getLineno());
      assertEquals(132, node0.getType());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isVarArgs());
      assertEquals(true, node0.hasOneChild());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(true, node0.hasChildren());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(true, node0.isSyntheticBlock());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.hasErrors());
      assertEquals("goog.abstractMethod", googleCodingConvention0.getAbstractMethodName());
      assertEquals("goog.exportSymbol", googleCodingConvention0.getExportSymbolFunction());
      assertEquals("goog.exportProperty", googleCodingConvention0.getExportPropertyFunction());
      assertEquals("goog.global", googleCodingConvention0.getGlobalObject());
      assertNull(googleCodingConvention0.getDelegateSuperclassName());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(typeCheck0);
      
      boolean boolean0 = googleCodingConvention0.isExported(string0);
      assertEquals("goog.abstractMethod", googleCodingConvention0.getAbstractMethodName());
      assertEquals("goog.exportSymbol", googleCodingConvention0.getExportSymbolFunction());
      assertEquals("goog.exportProperty", googleCodingConvention0.getExportPropertyFunction());
      assertEquals("goog.global", googleCodingConvention0.getGlobalObject());
      assertNull(googleCodingConvention0.getDelegateSuperclassName());
      assertFalse(boolean0);
      
      typeCheck0.check(node0, boolean0);
      assertEquals(33, scope0.getVarCount());
      assertEquals(false, scope0.isLocal());
      assertEquals(true, scope0.isGlobal());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(0, node0.getCharno());
      assertEquals(1, node0.getChildCount());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(1, node0.getLineno());
      assertEquals(132, node0.getType());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isVarArgs());
      assertEquals(true, node0.hasOneChild());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(true, node0.hasChildren());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(true, node0.isSyntheticBlock());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.hasErrors());
      assertEquals("goog.abstractMethod", googleCodingConvention0.getAbstractMethodName());
      assertEquals("goog.exportSymbol", googleCodingConvention0.getExportSymbolFunction());
      assertEquals("goog.exportProperty", googleCodingConvention0.getExportPropertyFunction());
      assertEquals("goog.global", googleCodingConvention0.getGlobalObject());
      assertNull(googleCodingConvention0.getDelegateSuperclassName());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
  }

  @Test
  public void test04()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      assertNotNull(compiler0);
      
      String string0 = "increment/decrement";
      Node node0 = compiler0.parseTestCode(string0);
      assertEquals(true, node0.hasChildren());
      assertEquals(1, node0.getLineno());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(132, node0.getType());
      assertEquals(true, node0.hasOneChild());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isQuotedString());
      assertEquals(0, node0.getCharno());
      assertEquals(1, node0.getChildCount());
      assertEquals(true, node0.isSyntheticBlock());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isVarArgs());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(0, compiler0.getErrorCount());
      assertNotNull(node0);
      
      GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
      assertEquals("goog.exportSymbol", googleCodingConvention0.getExportSymbolFunction());
      assertNull(googleCodingConvention0.getDelegateSuperclassName());
      assertEquals("goog.global", googleCodingConvention0.getGlobalObject());
      assertEquals("goog.exportProperty", googleCodingConvention0.getExportPropertyFunction());
      assertEquals("goog.abstractMethod", googleCodingConvention0.getAbstractMethodName());
      assertNotNull(googleCodingConvention0);
      
      TightenTypes tightenTypes0 = new TightenTypes(compiler0);
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(0, compiler0.getErrorCount());
      assertNotNull(tightenTypes0);
      
      JSTypeRegistry jSTypeRegistry0 = tightenTypes0.getTypeRegistry();
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(0, compiler0.getErrorCount());
      assertNotNull(jSTypeRegistry0);
      
      TypedScopeCreator typedScopeCreator0 = new TypedScopeCreator(compiler0, googleCodingConvention0);
      assertEquals("goog.exportSymbol", googleCodingConvention0.getExportSymbolFunction());
      assertNull(googleCodingConvention0.getDelegateSuperclassName());
      assertEquals("goog.global", googleCodingConvention0.getGlobalObject());
      assertEquals("goog.exportProperty", googleCodingConvention0.getExportPropertyFunction());
      assertEquals("goog.abstractMethod", googleCodingConvention0.getAbstractMethodName());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(0, compiler0.getErrorCount());
      assertNotNull(typedScopeCreator0);
      
      Scope scope0 = typedScopeCreator0.createInitialScope(node0);
      assertEquals(true, node0.hasChildren());
      assertEquals(1, node0.getLineno());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(132, node0.getType());
      assertEquals(true, node0.hasOneChild());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isQuotedString());
      assertEquals(0, node0.getCharno());
      assertEquals(1, node0.getChildCount());
      assertEquals(true, node0.isSyntheticBlock());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isVarArgs());
      assertEquals("goog.exportSymbol", googleCodingConvention0.getExportSymbolFunction());
      assertNull(googleCodingConvention0.getDelegateSuperclassName());
      assertEquals("goog.global", googleCodingConvention0.getGlobalObject());
      assertEquals("goog.exportProperty", googleCodingConvention0.getExportPropertyFunction());
      assertEquals("goog.abstractMethod", googleCodingConvention0.getAbstractMethodName());
      assertEquals(true, scope0.isGlobal());
      assertEquals(false, scope0.isLocal());
      assertEquals(33, scope0.getVarCount());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(0, compiler0.getErrorCount());
      assertNotNull(scope0);
      
      SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals("goog.exportSymbol", googleCodingConvention0.getExportSymbolFunction());
      assertNull(googleCodingConvention0.getDelegateSuperclassName());
      assertEquals("goog.global", googleCodingConvention0.getGlobalObject());
      assertEquals("goog.exportProperty", googleCodingConvention0.getExportPropertyFunction());
      assertEquals("goog.abstractMethod", googleCodingConvention0.getAbstractMethodName());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(0, compiler0.getErrorCount());
      assertNotNull(semanticReverseAbstractInterpreter0);
      
      CheckLevel checkLevel0 = CheckLevel.ERROR;
      TypeCheck typeCheck0 = new TypeCheck((AbstractCompiler) compiler0, (ReverseAbstractInterpreter) semanticReverseAbstractInterpreter0, jSTypeRegistry0, scope0, (ScopeCreator) typedScopeCreator0, checkLevel0, checkLevel0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(true, node0.hasChildren());
      assertEquals(1, node0.getLineno());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(132, node0.getType());
      assertEquals(true, node0.hasOneChild());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isQuotedString());
      assertEquals(0, node0.getCharno());
      assertEquals(1, node0.getChildCount());
      assertEquals(true, node0.isSyntheticBlock());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isVarArgs());
      assertEquals("goog.exportSymbol", googleCodingConvention0.getExportSymbolFunction());
      assertNull(googleCodingConvention0.getDelegateSuperclassName());
      assertEquals("goog.global", googleCodingConvention0.getGlobalObject());
      assertEquals("goog.exportProperty", googleCodingConvention0.getExportPropertyFunction());
      assertEquals("goog.abstractMethod", googleCodingConvention0.getAbstractMethodName());
      assertEquals(true, scope0.isGlobal());
      assertEquals(false, scope0.isLocal());
      assertEquals(33, scope0.getVarCount());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(0, compiler0.getErrorCount());
      assertNotNull(typeCheck0);
      
      boolean boolean0 = true;
      typeCheck0.check(node0, boolean0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(true, node0.hasChildren());
      assertEquals(1, node0.getLineno());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(132, node0.getType());
      assertEquals(true, node0.hasOneChild());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isQuotedString());
      assertEquals(0, node0.getCharno());
      assertEquals(1, node0.getChildCount());
      assertEquals(true, node0.isSyntheticBlock());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isVarArgs());
      assertEquals("goog.exportSymbol", googleCodingConvention0.getExportSymbolFunction());
      assertNull(googleCodingConvention0.getDelegateSuperclassName());
      assertEquals("goog.global", googleCodingConvention0.getGlobalObject());
      assertEquals("goog.exportProperty", googleCodingConvention0.getExportPropertyFunction());
      assertEquals("goog.abstractMethod", googleCodingConvention0.getAbstractMethodName());
      assertEquals(true, scope0.isGlobal());
      assertEquals(false, scope0.isLocal());
      assertEquals(33, scope0.getVarCount());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(0, compiler0.getErrorCount());
  }

  @Test
  public void test05()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      //  // Unstable assertion: assertNotNull(compiler0);
      
      String string0 = "Q";
      Node node0 = compiler0.parseTestCode(string0);
      //  // Unstable assertion: assertEquals(0, compiler0.getWarningCount());
      //  // Unstable assertion: assertEquals(0, compiler0.getErrorCount());
      //  // Unstable assertion: assertEquals(false, compiler0.isIdeMode());
      //  // Unstable assertion: assertEquals(false, compiler0.isTypeCheckingEnabled());
      //  // Unstable assertion: assertEquals(false, compiler0.hasErrors());
      //  // Unstable assertion: assertEquals(1, node0.getChildCount());
      //  // Unstable assertion: assertEquals(false, node0.isQualifiedName());
      //  // Unstable assertion: assertEquals(false, node0.isNoSideEffectsCall());
      //  // Unstable assertion: assertEquals(0, node0.getCharno());
      //  // Unstable assertion: assertEquals(false, node0.wasEmptyNode());
      //  // Unstable assertion: assertEquals(false, node0.hasMoreThanOneChild());
      //  // Unstable assertion: assertEquals(132, node0.getType());
      //  // Unstable assertion: assertEquals(false, node0.isQuotedString());
      //  // Unstable assertion: assertEquals(false, node0.isOptionalArg());
      //  // Unstable assertion: assertEquals(true, node0.hasOneChild());
      //  // Unstable assertion: assertEquals(1, node0.getLineno());
      //  // Unstable assertion: assertEquals(true, node0.hasChildren());
      //  // Unstable assertion: assertEquals(false, node0.isUnscopedQualifiedName());
      //  // Unstable assertion: assertEquals(true, node0.isSyntheticBlock());
      //  // Unstable assertion: assertEquals(false, node0.isVarArgs());
      //  // Unstable assertion: assertNotNull(node0);
      
      GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
      //  // Unstable assertion: assertNull(googleCodingConvention0.getDelegateSuperclassName());
      //  // Unstable assertion: assertEquals("goog.exportProperty", googleCodingConvention0.getExportPropertyFunction());
      //  // Unstable assertion: assertEquals("goog.global", googleCodingConvention0.getGlobalObject());
      //  // Unstable assertion: assertEquals("goog.exportSymbol", googleCodingConvention0.getExportSymbolFunction());
      //  // Unstable assertion: assertEquals("goog.abstractMethod", googleCodingConvention0.getAbstractMethodName());
      //  // Unstable assertion: assertNotNull(googleCodingConvention0);
      
      TightenTypes tightenTypes0 = new TightenTypes(compiler0);
      //  // Unstable assertion: assertEquals(0, compiler0.getWarningCount());
      //  // Unstable assertion: assertEquals(0, compiler0.getErrorCount());
      //  // Unstable assertion: assertEquals(false, compiler0.isIdeMode());
      //  // Unstable assertion: assertEquals(false, compiler0.isTypeCheckingEnabled());
      //  // Unstable assertion: assertEquals(false, compiler0.hasErrors());
      //  // Unstable assertion: assertNotNull(tightenTypes0);
      
      JSTypeRegistry jSTypeRegistry0 = tightenTypes0.getTypeRegistry();
      //  // Unstable assertion: assertEquals(0, compiler0.getWarningCount());
      //  // Unstable assertion: assertEquals(0, compiler0.getErrorCount());
      //  // Unstable assertion: assertEquals(false, compiler0.isIdeMode());
      //  // Unstable assertion: assertEquals(false, compiler0.isTypeCheckingEnabled());
      //  // Unstable assertion: assertEquals(false, compiler0.hasErrors());
      //  // Unstable assertion: assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      //  // Unstable assertion: assertNotNull(jSTypeRegistry0);
      
      SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = (SemanticReverseAbstractInterpreter)compiler0.getReverseAbstractInterpreter();
      //  // Unstable assertion: assertEquals(0, compiler0.getWarningCount());
      //  // Unstable assertion: assertEquals(0, compiler0.getErrorCount());
      //  // Unstable assertion: assertEquals(false, compiler0.isIdeMode());
      //  // Unstable assertion: assertEquals(false, compiler0.isTypeCheckingEnabled());
      //  // Unstable assertion: assertEquals(false, compiler0.hasErrors());
      //  // Unstable assertion: assertNotNull(semanticReverseAbstractInterpreter0);
      
      TypedScopeCreator typedScopeCreator0 = new TypedScopeCreator(compiler0, googleCodingConvention0);
      //  // Unstable assertion: assertNull(googleCodingConvention0.getDelegateSuperclassName());
      //  // Unstable assertion: assertEquals("goog.exportProperty", googleCodingConvention0.getExportPropertyFunction());
      //  // Unstable assertion: assertEquals("goog.global", googleCodingConvention0.getGlobalObject());
      //  // Unstable assertion: assertEquals("goog.exportSymbol", googleCodingConvention0.getExportSymbolFunction());
      //  // Unstable assertion: assertEquals("goog.abstractMethod", googleCodingConvention0.getAbstractMethodName());
      //  // Unstable assertion: assertEquals(0, compiler0.getWarningCount());
      //  // Unstable assertion: assertEquals(0, compiler0.getErrorCount());
      //  // Unstable assertion: assertEquals(false, compiler0.isIdeMode());
      //  // Unstable assertion: assertEquals(false, compiler0.isTypeCheckingEnabled());
      //  // Unstable assertion: assertEquals(false, compiler0.hasErrors());
      //  // Unstable assertion: assertNotNull(typedScopeCreator0);
      
      Scope scope0 = typedScopeCreator0.createInitialScope(node0);
      //  // Unstable assertion: assertNull(googleCodingConvention0.getDelegateSuperclassName());
      //  // Unstable assertion: assertEquals("goog.exportProperty", googleCodingConvention0.getExportPropertyFunction());
      //  // Unstable assertion: assertEquals("goog.global", googleCodingConvention0.getGlobalObject());
      //  // Unstable assertion: assertEquals("goog.exportSymbol", googleCodingConvention0.getExportSymbolFunction());
      //  // Unstable assertion: assertEquals("goog.abstractMethod", googleCodingConvention0.getAbstractMethodName());
      //  // Unstable assertion: assertEquals(0, compiler0.getWarningCount());
      //  // Unstable assertion: assertEquals(0, compiler0.getErrorCount());
      //  // Unstable assertion: assertEquals(false, compiler0.isIdeMode());
      //  // Unstable assertion: assertEquals(false, compiler0.isTypeCheckingEnabled());
      //  // Unstable assertion: assertEquals(false, compiler0.hasErrors());
      //  // Unstable assertion: assertEquals(1, node0.getChildCount());
      //  // Unstable assertion: assertEquals(false, node0.isQualifiedName());
      //  // Unstable assertion: assertEquals(false, node0.isNoSideEffectsCall());
      //  // Unstable assertion: assertEquals(0, node0.getCharno());
      //  // Unstable assertion: assertEquals(false, node0.wasEmptyNode());
      //  // Unstable assertion: assertEquals(false, node0.hasMoreThanOneChild());
      //  // Unstable assertion: assertEquals(132, node0.getType());
      //  // Unstable assertion: assertEquals(false, node0.isQuotedString());
      //  // Unstable assertion: assertEquals(false, node0.isOptionalArg());
      //  // Unstable assertion: assertEquals(true, node0.hasOneChild());
      //  // Unstable assertion: assertEquals(1, node0.getLineno());
      //  // Unstable assertion: assertEquals(true, node0.hasChildren());
      //  // Unstable assertion: assertEquals(false, node0.isUnscopedQualifiedName());
      //  // Unstable assertion: assertEquals(true, node0.isSyntheticBlock());
      //  // Unstable assertion: assertEquals(false, node0.isVarArgs());
      //  // Unstable assertion: assertEquals(false, scope0.isLocal());
      //  // Unstable assertion: assertEquals(true, scope0.isGlobal());
      //  // Unstable assertion: assertEquals(33, scope0.getVarCount());
      //  // Unstable assertion: assertNotNull(scope0);
      
      Node node1 = RuntimeTypeCheck.getBoilerplateCode(compiler0, string0);
      //  // Unstable assertion: assertNotSame(node1, node0);
      //  // Unstable assertion: assertEquals(0, compiler0.getErrorCount());
      //  // Unstable assertion: assertEquals(false, compiler0.isIdeMode());
      //  // Unstable assertion: assertEquals(false, compiler0.isTypeCheckingEnabled());
      //  // Unstable assertion: assertEquals(63, compiler0.getWarningCount());
      //  // Unstable assertion: assertEquals(false, compiler0.hasErrors());
      //  // Unstable assertion: assertEquals(true, node1.hasMoreThanOneChild());
      //  // Unstable assertion: assertEquals(132, node1.getType());
      //  // Unstable assertion: assertEquals(false, node1.isUnscopedQualifiedName());
      //  // Unstable assertion: assertEquals(false, node1.isNoSideEffectsCall());
      //  // Unstable assertion: assertEquals(false, node1.isQualifiedName());
      //  // Unstable assertion: assertEquals(false, node1.isQuotedString());
      //  // Unstable assertion: assertEquals(true, node1.isSyntheticBlock());
      //  // Unstable assertion: assertEquals(false, node1.hasOneChild());
      //  // Unstable assertion: assertEquals(false, node1.isOptionalArg());
      //  // Unstable assertion: assertEquals(true, node1.hasChildren());
      //  // Unstable assertion: assertEquals(false, node1.isVarArgs());
      //  // Unstable assertion: assertEquals(0, node1.getCharno());
      //  // Unstable assertion: assertEquals(1, node1.getLineno());
      //  // Unstable assertion: assertEquals(35, node1.getChildCount());
      //  // Unstable assertion: assertEquals(false, node1.wasEmptyNode());
      //  // Unstable assertion: assertNotNull(node1);
      //  // Unstable assertion: assertFalse(node1.equals((Object)node0));
      
      node0.addChildrenToFront(node1);
      //  // Unstable assertion: assertNotSame(node0, node1);
      //  // Unstable assertion: assertNotSame(node1, node0);
      //  // Unstable assertion: assertEquals(0, compiler0.getErrorCount());
      //  // Unstable assertion: assertEquals(false, compiler0.isIdeMode());
      //  // Unstable assertion: assertEquals(false, compiler0.isTypeCheckingEnabled());
      //  // Unstable assertion: assertEquals(63, compiler0.getWarningCount());
      //  // Unstable assertion: assertEquals(false, compiler0.hasErrors());
      //  // Unstable assertion: assertEquals(false, node0.isQualifiedName());
      //  // Unstable assertion: assertEquals(false, node0.isNoSideEffectsCall());
      //  // Unstable assertion: assertEquals(0, node0.getCharno());
      //  // Unstable assertion: assertEquals(false, node0.wasEmptyNode());
      //  // Unstable assertion: assertEquals(132, node0.getType());
      //  // Unstable assertion: assertEquals(2, node0.getChildCount());
      //  // Unstable assertion: assertEquals(false, node0.isQuotedString());
      //  // Unstable assertion: assertEquals(false, node0.isOptionalArg());
      //  // Unstable assertion: assertEquals(1, node0.getLineno());
      //  // Unstable assertion: assertEquals(true, node0.hasChildren());
      //  // Unstable assertion: assertEquals(true, node0.hasMoreThanOneChild());
      //  // Unstable assertion: assertEquals(false, node0.isUnscopedQualifiedName());
      //  // Unstable assertion: assertEquals(true, node0.isSyntheticBlock());
      //  // Unstable assertion: assertEquals(false, node0.isVarArgs());
      //  // Unstable assertion: assertEquals(false, node0.hasOneChild());
      //  // Unstable assertion: assertEquals(true, node1.hasMoreThanOneChild());
      //  // Unstable assertion: assertEquals(132, node1.getType());
      //  // Unstable assertion: assertEquals(false, node1.isUnscopedQualifiedName());
      //  // Unstable assertion: assertEquals(false, node1.isNoSideEffectsCall());
      //  // Unstable assertion: assertEquals(false, node1.isQualifiedName());
      //  // Unstable assertion: assertEquals(false, node1.isQuotedString());
      //  // Unstable assertion: assertEquals(true, node1.isSyntheticBlock());
      //  // Unstable assertion: assertEquals(false, node1.hasOneChild());
      //  // Unstable assertion: assertEquals(false, node1.isOptionalArg());
      //  // Unstable assertion: assertEquals(true, node1.hasChildren());
      //  // Unstable assertion: assertEquals(false, node1.isVarArgs());
      //  // Unstable assertion: assertEquals(0, node1.getCharno());
      //  // Unstable assertion: assertEquals(1, node1.getLineno());
      //  // Unstable assertion: assertEquals(35, node1.getChildCount());
      //  // Unstable assertion: assertEquals(false, node1.wasEmptyNode());
      //  // Unstable assertion: assertFalse(node0.equals((Object)node1));
      //  // Unstable assertion: assertFalse(node1.equals((Object)node0));
      
      Scope scope1 = typedScopeCreator0.createScope(node1, scope0);
      //  // Unstable assertion: assertNotSame(node0, node1);
      //  // Unstable assertion: assertNotSame(scope1, scope0);
      //  // Unstable assertion: assertNotSame(scope0, scope1);
      //  // Unstable assertion: assertNotSame(node1, node0);
      //  // Unstable assertion: assertNull(googleCodingConvention0.getDelegateSuperclassName());
      //  // Unstable assertion: assertEquals("goog.exportProperty", googleCodingConvention0.getExportPropertyFunction());
      //  // Unstable assertion: assertEquals("goog.global", googleCodingConvention0.getGlobalObject());
      //  // Unstable assertion: assertEquals("goog.exportSymbol", googleCodingConvention0.getExportSymbolFunction());
      //  // Unstable assertion: assertEquals("goog.abstractMethod", googleCodingConvention0.getAbstractMethodName());
      //  // Unstable assertion: assertEquals(0, compiler0.getErrorCount());
      //  // Unstable assertion: assertEquals(false, compiler0.isIdeMode());
      //  // Unstable assertion: assertEquals(false, compiler0.isTypeCheckingEnabled());
      //  // Unstable assertion: assertEquals(63, compiler0.getWarningCount());
      //  // Unstable assertion: assertEquals(false, compiler0.hasErrors());
      //  // Unstable assertion: assertEquals(false, node0.isQualifiedName());
      //  // Unstable assertion: assertEquals(false, node0.isNoSideEffectsCall());
      //  // Unstable assertion: assertEquals(0, node0.getCharno());
      //  // Unstable assertion: assertEquals(false, node0.wasEmptyNode());
      //  // Unstable assertion: assertEquals(132, node0.getType());
      //  // Unstable assertion: assertEquals(2, node0.getChildCount());
      //  // Unstable assertion: assertEquals(false, node0.isQuotedString());
      //  // Unstable assertion: assertEquals(false, node0.isOptionalArg());
      //  // Unstable assertion: assertEquals(1, node0.getLineno());
      //  // Unstable assertion: assertEquals(true, node0.hasChildren());
      //  // Unstable assertion: assertEquals(true, node0.hasMoreThanOneChild());
      //  // Unstable assertion: assertEquals(false, node0.isUnscopedQualifiedName());
      //  // Unstable assertion: assertEquals(true, node0.isSyntheticBlock());
      //  // Unstable assertion: assertEquals(false, node0.isVarArgs());
      //  // Unstable assertion: assertEquals(false, node0.hasOneChild());
      //  // Unstable assertion: assertEquals(1, scope1.getVarCount());
      //  // Unstable assertion: assertEquals(true, scope1.isLocal());
      //  // Unstable assertion: assertEquals(false, scope1.isGlobal());
      //  // Unstable assertion: assertEquals(false, scope0.isLocal());
      //  // Unstable assertion: assertEquals(true, scope0.isGlobal());
      //  // Unstable assertion: assertEquals(33, scope0.getVarCount());
      //  // Unstable assertion: assertEquals(true, node1.hasMoreThanOneChild());
      //  // Unstable assertion: assertEquals(132, node1.getType());
      //  // Unstable assertion: assertEquals(false, node1.isUnscopedQualifiedName());
      //  // Unstable assertion: assertEquals(false, node1.isNoSideEffectsCall());
      //  // Unstable assertion: assertEquals(false, node1.isQualifiedName());
      //  // Unstable assertion: assertEquals(false, node1.isQuotedString());
      //  // Unstable assertion: assertEquals(true, node1.isSyntheticBlock());
      //  // Unstable assertion: assertEquals(false, node1.hasOneChild());
      //  // Unstable assertion: assertEquals(false, node1.isOptionalArg());
      //  // Unstable assertion: assertEquals(true, node1.hasChildren());
      //  // Unstable assertion: assertEquals(false, node1.isVarArgs());
      //  // Unstable assertion: assertEquals(0, node1.getCharno());
      //  // Unstable assertion: assertEquals(1, node1.getLineno());
      //  // Unstable assertion: assertEquals(35, node1.getChildCount());
      //  // Unstable assertion: assertEquals(false, node1.wasEmptyNode());
      //  // Unstable assertion: assertNotNull(scope1);
      //  // Unstable assertion: assertFalse(node0.equals((Object)node1));
      //  // Unstable assertion: assertFalse(scope1.equals((Object)scope0));
      //  // Unstable assertion: assertFalse(scope0.equals((Object)scope1));
      //  // Unstable assertion: assertFalse(node1.equals((Object)node0));
      
      CheckLevel checkLevel0 = CheckLevel.WARNING;
      TypeCheck typeCheck0 = new TypeCheck((AbstractCompiler) compiler0, (ReverseAbstractInterpreter) semanticReverseAbstractInterpreter0, jSTypeRegistry0, scope0, (ScopeCreator) typedScopeCreator0, checkLevel0, checkLevel0);
      //  // Unstable assertion: assertNotSame(node0, node1);
      //  // Unstable assertion: assertNotSame(scope0, scope1);
      //  // Unstable assertion: assertNull(googleCodingConvention0.getDelegateSuperclassName());
      //  // Unstable assertion: assertEquals("goog.exportProperty", googleCodingConvention0.getExportPropertyFunction());
      //  // Unstable assertion: assertEquals("goog.global", googleCodingConvention0.getGlobalObject());
      //  // Unstable assertion: assertEquals("goog.exportSymbol", googleCodingConvention0.getExportSymbolFunction());
      //  // Unstable assertion: assertEquals("goog.abstractMethod", googleCodingConvention0.getAbstractMethodName());
      //  // Unstable assertion: assertEquals(0, compiler0.getErrorCount());
      //  // Unstable assertion: assertEquals(false, compiler0.isIdeMode());
      //  // Unstable assertion: assertEquals(false, compiler0.isTypeCheckingEnabled());
      //  // Unstable assertion: assertEquals(63, compiler0.getWarningCount());
      //  // Unstable assertion: assertEquals(false, compiler0.hasErrors());
      //  // Unstable assertion: assertEquals(false, node0.isQualifiedName());
      //  // Unstable assertion: assertEquals(false, node0.isNoSideEffectsCall());
      //  // Unstable assertion: assertEquals(0, node0.getCharno());
      //  // Unstable assertion: assertEquals(false, node0.wasEmptyNode());
      //  // Unstable assertion: assertEquals(132, node0.getType());
      //  // Unstable assertion: assertEquals(2, node0.getChildCount());
      //  // Unstable assertion: assertEquals(false, node0.isQuotedString());
      //  // Unstable assertion: assertEquals(false, node0.isOptionalArg());
      //  // Unstable assertion: assertEquals(1, node0.getLineno());
      //  // Unstable assertion: assertEquals(true, node0.hasChildren());
      //  // Unstable assertion: assertEquals(true, node0.hasMoreThanOneChild());
      //  // Unstable assertion: assertEquals(false, node0.isUnscopedQualifiedName());
      //  // Unstable assertion: assertEquals(true, node0.isSyntheticBlock());
      //  // Unstable assertion: assertEquals(false, node0.isVarArgs());
      //  // Unstable assertion: assertEquals(false, node0.hasOneChild());
      //  // Unstable assertion: assertEquals(false, scope0.isLocal());
      //  // Unstable assertion: assertEquals(true, scope0.isGlobal());
      //  // Unstable assertion: assertEquals(33, scope0.getVarCount());
      //  // Unstable assertion: assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      //  // Unstable assertion: assertNotNull(typeCheck0);
      //  // Unstable assertion: assertFalse(node0.equals((Object)node1));
      //  // Unstable assertion: assertFalse(scope0.equals((Object)scope1));
      
      boolean boolean0 = googleCodingConvention0.isExported(string0);
      //  // Unstable assertion: assertNull(googleCodingConvention0.getDelegateSuperclassName());
      //  // Unstable assertion: assertEquals("goog.exportProperty", googleCodingConvention0.getExportPropertyFunction());
      //  // Unstable assertion: assertEquals("goog.global", googleCodingConvention0.getGlobalObject());
      //  // Unstable assertion: assertEquals("goog.exportSymbol", googleCodingConvention0.getExportSymbolFunction());
      //  // Unstable assertion: assertEquals("goog.abstractMethod", googleCodingConvention0.getAbstractMethodName());
      //  // Unstable assertion: assertFalse(boolean0);
      
      Node node2 = node1.removeFirstChild();
      //  // Unstable assertion: assertNotSame(node2, node1);
      //  // Unstable assertion: assertNotSame(node2, node0);
      //  // Unstable assertion: assertNotSame(node1, node2);
      //  // Unstable assertion: assertNotSame(node1, node0);
      //  // Unstable assertion: assertEquals(0, compiler0.getErrorCount());
      //  // Unstable assertion: assertEquals(false, compiler0.isIdeMode());
      //  // Unstable assertion: assertEquals(false, compiler0.isTypeCheckingEnabled());
      //  // Unstable assertion: assertEquals(63, compiler0.getWarningCount());
      //  // Unstable assertion: assertEquals(false, compiler0.hasErrors());
      //  // Unstable assertion: assertEquals(25, node2.getLineno());
      //  // Unstable assertion: assertEquals(false, node2.wasEmptyNode());
      //  // Unstable assertion: assertEquals(0, node2.getCharno());
      //  // Unstable assertion: assertEquals(false, node2.isQualifiedName());
      //  // Unstable assertion: assertEquals(false, node2.isOptionalArg());
      //  // Unstable assertion: assertEquals(1, node2.getChildCount());
      //  // Unstable assertion: assertEquals(false, node2.isSyntheticBlock());
      //  // Unstable assertion: assertEquals(false, node2.isQuotedString());
      //  // Unstable assertion: assertEquals(false, node2.hasMoreThanOneChild());
      //  // Unstable assertion: assertEquals(118, node2.getType());
      //  // Unstable assertion: assertEquals(false, node2.isUnscopedQualifiedName());
      //  // Unstable assertion: assertEquals(true, node2.hasChildren());
      //  // Unstable assertion: assertEquals(false, node2.isNoSideEffectsCall());
      //  // Unstable assertion: assertEquals(true, node2.hasOneChild());
      //  // Unstable assertion: assertEquals(false, node2.isVarArgs());
      //  // Unstable assertion: assertEquals(true, node1.hasMoreThanOneChild());
      //  // Unstable assertion: assertEquals(132, node1.getType());
      //  // Unstable assertion: assertEquals(false, node1.isUnscopedQualifiedName());
      //  // Unstable assertion: assertEquals(false, node1.isNoSideEffectsCall());
      //  // Unstable assertion: assertEquals(false, node1.isQualifiedName());
      //  // Unstable assertion: assertEquals(false, node1.isQuotedString());
      //  // Unstable assertion: assertEquals(true, node1.isSyntheticBlock());
      //  // Unstable assertion: assertEquals(34, node1.getChildCount());
      //  // Unstable assertion: assertEquals(false, node1.hasOneChild());
      //  // Unstable assertion: assertEquals(false, node1.isOptionalArg());
      //  // Unstable assertion: assertEquals(true, node1.hasChildren());
      //  // Unstable assertion: assertEquals(false, node1.isVarArgs());
      //  // Unstable assertion: assertEquals(0, node1.getCharno());
      //  // Unstable assertion: assertEquals(1, node1.getLineno());
      //  // Unstable assertion: assertEquals(false, node1.wasEmptyNode());
      //  // Unstable assertion: assertNotNull(node2);
      //  // Unstable assertion: assertFalse(node2.equals((Object)node1));
      //  // Unstable assertion: assertFalse(node2.equals((Object)node0));
      //  // Unstable assertion: assertFalse(node1.equals((Object)node2));
      //  // Unstable assertion: assertFalse(node1.equals((Object)node0));
      
      typeCheck0.check(node0, boolean0);
      //  // Unstable assertion: assertNotSame(node0, node2);
      //  // Unstable assertion: assertNotSame(node0, node1);
      //  // Unstable assertion: assertNotSame(scope0, scope1);
      //  // Unstable assertion: assertNull(googleCodingConvention0.getDelegateSuperclassName());
      //  // Unstable assertion: assertEquals("goog.exportProperty", googleCodingConvention0.getExportPropertyFunction());
      //  // Unstable assertion: assertEquals("goog.global", googleCodingConvention0.getGlobalObject());
      //  // Unstable assertion: assertEquals("goog.exportSymbol", googleCodingConvention0.getExportSymbolFunction());
      //  // Unstable assertion: assertEquals("goog.abstractMethod", googleCodingConvention0.getAbstractMethodName());
      //  // Unstable assertion: assertEquals(248, compiler0.getWarningCount());
      //  // Unstable assertion: assertEquals(0, compiler0.getErrorCount());
      //  // Unstable assertion: assertEquals(false, compiler0.isIdeMode());
      //  // Unstable assertion: assertEquals(false, compiler0.isTypeCheckingEnabled());
      //  // Unstable assertion: assertEquals(false, compiler0.hasErrors());
      //  // Unstable assertion: assertEquals(false, node0.isQualifiedName());
      //  // Unstable assertion: assertEquals(false, node0.isNoSideEffectsCall());
      //  // Unstable assertion: assertEquals(0, node0.getCharno());
      //  // Unstable assertion: assertEquals(false, node0.wasEmptyNode());
      //  // Unstable assertion: assertEquals(132, node0.getType());
      //  // Unstable assertion: assertEquals(2, node0.getChildCount());
      //  // Unstable assertion: assertEquals(false, node0.isQuotedString());
      //  // Unstable assertion: assertEquals(false, node0.isOptionalArg());
      //  // Unstable assertion: assertEquals(1, node0.getLineno());
      //  // Unstable assertion: assertEquals(true, node0.hasChildren());
      //  // Unstable assertion: assertEquals(true, node0.hasMoreThanOneChild());
      //  // Unstable assertion: assertEquals(false, node0.isUnscopedQualifiedName());
      //  // Unstable assertion: assertEquals(true, node0.isSyntheticBlock());
      //  // Unstable assertion: assertEquals(false, node0.isVarArgs());
      //  // Unstable assertion: assertEquals(false, node0.hasOneChild());
      //  // Unstable assertion: assertEquals(false, scope0.isLocal());
      //  // Unstable assertion: assertEquals(true, scope0.isGlobal());
      //  // Unstable assertion: assertEquals(33, scope0.getVarCount());
      //  // Unstable assertion: assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      //  // Unstable assertion: assertFalse(node0.equals((Object)node2));
      //  // Unstable assertion: assertFalse(node0.equals((Object)node1));
      //  // Unstable assertion: assertFalse(scope0.equals((Object)scope1));
  }

  @Test
  public void test06()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      assertNotNull(compiler0);
      
      String string0 = "XMLEND";
      Node node0 = compiler0.parseTestCode(string0);
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(0, node0.getCharno());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isQuotedString());
      assertEquals(1, node0.getChildCount());
      assertEquals(true, node0.hasOneChild());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(1, node0.getLineno());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(true, node0.hasChildren());
      assertEquals(true, node0.isSyntheticBlock());
      assertEquals(132, node0.getType());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.wasEmptyNode());
      assertNotNull(node0);
      
      GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
      assertNull(googleCodingConvention0.getDelegateSuperclassName());
      assertEquals("goog.exportSymbol", googleCodingConvention0.getExportSymbolFunction());
      assertEquals("goog.global", googleCodingConvention0.getGlobalObject());
      assertEquals("goog.exportProperty", googleCodingConvention0.getExportPropertyFunction());
      assertEquals("goog.abstractMethod", googleCodingConvention0.getAbstractMethodName());
      assertNotNull(googleCodingConvention0);
      
      int int0 = 9;
      node0.setType(int0);
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(0, node0.getCharno());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isQuotedString());
      assertEquals(1, node0.getChildCount());
      assertEquals(9, node0.getType());
      assertEquals(true, node0.hasOneChild());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(1, node0.getLineno());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(true, node0.hasChildren());
      assertEquals(true, node0.isSyntheticBlock());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.wasEmptyNode());
      
      TightenTypes tightenTypes0 = new TightenTypes(compiler0);
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(0, compiler0.getErrorCount());
      assertNotNull(tightenTypes0);
      
      JSTypeRegistry jSTypeRegistry0 = tightenTypes0.getTypeRegistry();
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(0, compiler0.getErrorCount());
      assertNotNull(jSTypeRegistry0);
      
      SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = (SemanticReverseAbstractInterpreter)compiler0.getReverseAbstractInterpreter();
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(0, compiler0.getErrorCount());
      assertNotNull(semanticReverseAbstractInterpreter0);
      
      TypedScopeCreator typedScopeCreator0 = new TypedScopeCreator(compiler0, googleCodingConvention0);
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(0, compiler0.getErrorCount());
      assertNull(googleCodingConvention0.getDelegateSuperclassName());
      assertEquals("goog.exportSymbol", googleCodingConvention0.getExportSymbolFunction());
      assertEquals("goog.global", googleCodingConvention0.getGlobalObject());
      assertEquals("goog.exportProperty", googleCodingConvention0.getExportPropertyFunction());
      assertEquals("goog.abstractMethod", googleCodingConvention0.getAbstractMethodName());
      assertNotNull(typedScopeCreator0);
      
      Scope scope0 = typedScopeCreator0.createInitialScope(node0);
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(0, node0.getCharno());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isQuotedString());
      assertEquals(1, node0.getChildCount());
      assertEquals(9, node0.getType());
      assertEquals(true, node0.hasOneChild());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(1, node0.getLineno());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(true, node0.hasChildren());
      assertEquals(true, node0.isSyntheticBlock());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.wasEmptyNode());
      assertNull(googleCodingConvention0.getDelegateSuperclassName());
      assertEquals("goog.exportSymbol", googleCodingConvention0.getExportSymbolFunction());
      assertEquals("goog.global", googleCodingConvention0.getGlobalObject());
      assertEquals("goog.exportProperty", googleCodingConvention0.getExportPropertyFunction());
      assertEquals("goog.abstractMethod", googleCodingConvention0.getAbstractMethodName());
      assertEquals(false, scope0.isLocal());
      assertEquals(33, scope0.getVarCount());
      assertEquals(true, scope0.isGlobal());
      assertNotNull(scope0);
      
      CheckLevel checkLevel0 = CheckLevel.OFF;
      TypeCheck typeCheck0 = new TypeCheck((AbstractCompiler) compiler0, (ReverseAbstractInterpreter) semanticReverseAbstractInterpreter0, jSTypeRegistry0, scope0, (ScopeCreator) typedScopeCreator0, checkLevel0, checkLevel0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(0, node0.getCharno());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isQuotedString());
      assertEquals(1, node0.getChildCount());
      assertEquals(9, node0.getType());
      assertEquals(true, node0.hasOneChild());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(1, node0.getLineno());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(true, node0.hasChildren());
      assertEquals(true, node0.isSyntheticBlock());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.wasEmptyNode());
      assertNull(googleCodingConvention0.getDelegateSuperclassName());
      assertEquals("goog.exportSymbol", googleCodingConvention0.getExportSymbolFunction());
      assertEquals("goog.global", googleCodingConvention0.getGlobalObject());
      assertEquals("goog.exportProperty", googleCodingConvention0.getExportPropertyFunction());
      assertEquals("goog.abstractMethod", googleCodingConvention0.getAbstractMethodName());
      assertEquals(false, scope0.isLocal());
      assertEquals(33, scope0.getVarCount());
      assertEquals(true, scope0.isGlobal());
      assertNotNull(typeCheck0);
      
      boolean boolean0 = googleCodingConvention0.isExported(string0);
      assertNull(googleCodingConvention0.getDelegateSuperclassName());
      assertEquals("goog.exportSymbol", googleCodingConvention0.getExportSymbolFunction());
      assertEquals("goog.global", googleCodingConvention0.getGlobalObject());
      assertEquals("goog.exportProperty", googleCodingConvention0.getExportPropertyFunction());
      assertEquals("goog.abstractMethod", googleCodingConvention0.getAbstractMethodName());
      assertFalse(boolean0);
      
      typeCheck0.check(node0, boolean0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(0, node0.getCharno());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isQuotedString());
      assertEquals(1, node0.getChildCount());
      assertEquals(9, node0.getType());
      assertEquals(true, node0.hasOneChild());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(1, node0.getLineno());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(true, node0.hasChildren());
      assertEquals(true, node0.isSyntheticBlock());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.wasEmptyNode());
      assertNull(googleCodingConvention0.getDelegateSuperclassName());
      assertEquals("goog.exportSymbol", googleCodingConvention0.getExportSymbolFunction());
      assertEquals("goog.global", googleCodingConvention0.getGlobalObject());
      assertEquals("goog.exportProperty", googleCodingConvention0.getExportPropertyFunction());
      assertEquals("goog.abstractMethod", googleCodingConvention0.getAbstractMethodName());
      assertEquals(false, scope0.isLocal());
      assertEquals(33, scope0.getVarCount());
      assertEquals(true, scope0.isGlobal());
  }

  @Test
  public void test07()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      assertNotNull(compiler0);
      
      String string0 = "prototype";
      Node node0 = compiler0.parseTestCode(string0);
      assertEquals(1, node0.getChildCount());
      assertEquals(1, node0.getLineno());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(132, node0.getType());
      assertEquals(true, node0.isSyntheticBlock());
      assertEquals(0, node0.getCharno());
      assertEquals(false, node0.isQuotedString());
      assertEquals(true, node0.hasOneChild());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(true, node0.hasChildren());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(0, compiler0.getErrorCount());
      assertNotNull(node0);
      
      DefaultPassConfig defaultPassConfig0 = (DefaultPassConfig)compiler0.getPassConfig();
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(0, compiler0.getErrorCount());
      assertNotNull(defaultPassConfig0);
      
      PassConfig.PassConfigDelegate passConfig_PassConfigDelegate0 = new PassConfig.PassConfigDelegate(defaultPassConfig0);
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(0, compiler0.getErrorCount());
      assertNotNull(passConfig_PassConfigDelegate0);
      
      TypeCheck typeCheck0 = passConfig_PassConfigDelegate0.makeTypeCheck(compiler0);
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(0, compiler0.getErrorCount());
      assertNotNull(typeCheck0);
      
      // Undeclared exception!
      try {
        Scope scope0 = typeCheck0.processForTesting(node0, node0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test08()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      assertNotNull(compiler0);
      
      String string0 = "increment/decrement";
      Node node0 = compiler0.parseTestCode(string0);
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(1, node0.getChildCount());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(true, node0.hasChildren());
      assertEquals(false, node0.isVarArgs());
      assertEquals(132, node0.getType());
      assertEquals(1, node0.getLineno());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(true, node0.hasOneChild());
      assertEquals(true, node0.isSyntheticBlock());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(0, node0.getCharno());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertNotNull(node0);
      
      GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
      assertEquals("goog.exportSymbol", googleCodingConvention0.getExportSymbolFunction());
      assertEquals("goog.global", googleCodingConvention0.getGlobalObject());
      assertNull(googleCodingConvention0.getDelegateSuperclassName());
      assertEquals("goog.exportProperty", googleCodingConvention0.getExportPropertyFunction());
      assertEquals("goog.abstractMethod", googleCodingConvention0.getAbstractMethodName());
      assertNotNull(googleCodingConvention0);
      
      TightenTypes tightenTypes0 = new TightenTypes(compiler0);
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(0, compiler0.getErrorCount());
      assertNotNull(tightenTypes0);
      
      JSTypeRegistry jSTypeRegistry0 = tightenTypes0.getTypeRegistry();
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      TypedScopeCreator typedScopeCreator0 = new TypedScopeCreator(compiler0, googleCodingConvention0);
      assertEquals("goog.exportSymbol", googleCodingConvention0.getExportSymbolFunction());
      assertEquals("goog.global", googleCodingConvention0.getGlobalObject());
      assertNull(googleCodingConvention0.getDelegateSuperclassName());
      assertEquals("goog.exportProperty", googleCodingConvention0.getExportPropertyFunction());
      assertEquals("goog.abstractMethod", googleCodingConvention0.getAbstractMethodName());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(0, compiler0.getErrorCount());
      assertNotNull(typedScopeCreator0);
      
      Scope scope0 = typedScopeCreator0.createInitialScope(node0);
      assertEquals("goog.exportSymbol", googleCodingConvention0.getExportSymbolFunction());
      assertEquals("goog.global", googleCodingConvention0.getGlobalObject());
      assertNull(googleCodingConvention0.getDelegateSuperclassName());
      assertEquals("goog.exportProperty", googleCodingConvention0.getExportPropertyFunction());
      assertEquals("goog.abstractMethod", googleCodingConvention0.getAbstractMethodName());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, scope0.isLocal());
      assertEquals(true, scope0.isGlobal());
      assertEquals(33, scope0.getVarCount());
      assertEquals(1, node0.getChildCount());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(true, node0.hasChildren());
      assertEquals(false, node0.isVarArgs());
      assertEquals(132, node0.getType());
      assertEquals(1, node0.getLineno());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(true, node0.hasOneChild());
      assertEquals(true, node0.isSyntheticBlock());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(0, node0.getCharno());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertNotNull(scope0);
      
      SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
      assertEquals("goog.exportSymbol", googleCodingConvention0.getExportSymbolFunction());
      assertEquals("goog.global", googleCodingConvention0.getGlobalObject());
      assertNull(googleCodingConvention0.getDelegateSuperclassName());
      assertEquals("goog.exportProperty", googleCodingConvention0.getExportPropertyFunction());
      assertEquals("goog.abstractMethod", googleCodingConvention0.getAbstractMethodName());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(semanticReverseAbstractInterpreter0);
      
      CheckLevel checkLevel0 = CheckLevel.ERROR;
      TypeCheck typeCheck0 = new TypeCheck((AbstractCompiler) compiler0, (ReverseAbstractInterpreter) semanticReverseAbstractInterpreter0, jSTypeRegistry0, scope0, (ScopeCreator) typedScopeCreator0, checkLevel0, checkLevel0);
      assertEquals("goog.exportSymbol", googleCodingConvention0.getExportSymbolFunction());
      assertEquals("goog.global", googleCodingConvention0.getGlobalObject());
      assertNull(googleCodingConvention0.getDelegateSuperclassName());
      assertEquals("goog.exportProperty", googleCodingConvention0.getExportPropertyFunction());
      assertEquals("goog.abstractMethod", googleCodingConvention0.getAbstractMethodName());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, scope0.isLocal());
      assertEquals(true, scope0.isGlobal());
      assertEquals(33, scope0.getVarCount());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(1, node0.getChildCount());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(true, node0.hasChildren());
      assertEquals(false, node0.isVarArgs());
      assertEquals(132, node0.getType());
      assertEquals(1, node0.getLineno());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(true, node0.hasOneChild());
      assertEquals(true, node0.isSyntheticBlock());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(0, node0.getCharno());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertNotNull(typeCheck0);
      
      // Undeclared exception!
      try {
        Scope scope1 = typeCheck0.processForTesting(node0, node0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test09()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      assertNotNull(compiler0);
      
      String string0 = "!&c'`H%LK?y~yI";
      Node node0 = compiler0.parseTestCode(string0);
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(125, node0.getType());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(true, compiler0.hasErrors());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(2, compiler0.getErrorCount());
      assertEquals(0, compiler0.getWarningCount());
      assertNotNull(node0);
      
      int int0 = 1357;
      Node node1 = new Node(int0, node0, node0, node0, node0);
      assertNotSame(node0, node1);
      assertNotSame(node1, node0);
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(125, node0.getType());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(true, node1.hasOneChild());
      assertEquals(false, node1.isSyntheticBlock());
      assertEquals(1, node1.getChildCount());
      assertEquals(-1, node1.getCharno());
      assertEquals(true, node1.hasChildren());
      assertEquals(false, node1.hasMoreThanOneChild());
      assertEquals(false, node1.isUnscopedQualifiedName());
      assertEquals(false, node1.isQuotedString());
      assertEquals(1357, node1.getType());
      assertEquals(false, node1.isOptionalArg());
      assertEquals(-1, node1.getLineno());
      assertEquals(false, node1.isQualifiedName());
      assertEquals(false, node1.wasEmptyNode());
      assertEquals(false, node1.isNoSideEffectsCall());
      assertEquals(false, node1.isVarArgs());
      assertEquals(true, compiler0.hasErrors());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(2, compiler0.getErrorCount());
      assertEquals(0, compiler0.getWarningCount());
      assertNotNull(node1);
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node0));
      
      DefaultPassConfig defaultPassConfig0 = (DefaultPassConfig)compiler0.getPassConfig();
      assertEquals(true, compiler0.hasErrors());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(2, compiler0.getErrorCount());
      assertEquals(0, compiler0.getWarningCount());
      assertNotNull(defaultPassConfig0);
      
      PassConfig.PassConfigDelegate passConfig_PassConfigDelegate0 = new PassConfig.PassConfigDelegate(defaultPassConfig0);
      assertEquals(true, compiler0.hasErrors());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(2, compiler0.getErrorCount());
      assertEquals(0, compiler0.getWarningCount());
      assertNotNull(passConfig_PassConfigDelegate0);
      
      TypeCheck typeCheck0 = passConfig_PassConfigDelegate0.makeTypeCheck(compiler0);
      assertEquals(true, compiler0.hasErrors());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(2, compiler0.getErrorCount());
      assertEquals(0, compiler0.getWarningCount());
      assertNotNull(typeCheck0);
      
      Scope scope0 = typeCheck0.processForTesting(node0, node0);
      assertNotSame(node0, node1);
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(125, node0.getType());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(true, compiler0.hasErrors());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(2, compiler0.getErrorCount());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(33, scope0.getVarCount());
      assertEquals(true, scope0.isGlobal());
      assertEquals(false, scope0.isLocal());
      assertNotNull(scope0);
      assertFalse(node0.equals((Object)node1));
  }

  @Test
  public void test10()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      assertNotNull(compiler0);
      
      String string0 = "!&c'`H%Ly~yI";
      Node node0 = compiler0.parseTestCode(string0);
      assertEquals(2, compiler0.getErrorCount());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(true, compiler0.hasErrors());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.hasOneChild());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(0, node0.getChildCount());
      assertEquals(125, node0.getType());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isOptionalArg());
      assertNotNull(node0);
      
      GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
      assertNull(googleCodingConvention0.getDelegateSuperclassName());
      assertEquals("goog.abstractMethod", googleCodingConvention0.getAbstractMethodName());
      assertEquals("goog.exportProperty", googleCodingConvention0.getExportPropertyFunction());
      assertEquals("goog.global", googleCodingConvention0.getGlobalObject());
      assertEquals("goog.exportSymbol", googleCodingConvention0.getExportSymbolFunction());
      assertNotNull(googleCodingConvention0);
      
      TightenTypes tightenTypes0 = new TightenTypes(compiler0);
      assertEquals(2, compiler0.getErrorCount());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(true, compiler0.hasErrors());
      assertEquals(false, compiler0.isIdeMode());
      assertNotNull(tightenTypes0);
      
      JSTypeRegistry jSTypeRegistry0 = tightenTypes0.getTypeRegistry();
      assertEquals(2, compiler0.getErrorCount());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(true, compiler0.hasErrors());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = (SemanticReverseAbstractInterpreter)compiler0.getReverseAbstractInterpreter();
      assertEquals(2, compiler0.getErrorCount());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(true, compiler0.hasErrors());
      assertEquals(false, compiler0.isIdeMode());
      assertNotNull(semanticReverseAbstractInterpreter0);
      
      TypedScopeCreator typedScopeCreator0 = new TypedScopeCreator(compiler0, googleCodingConvention0);
      assertEquals(2, compiler0.getErrorCount());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(true, compiler0.hasErrors());
      assertEquals(false, compiler0.isIdeMode());
      assertNull(googleCodingConvention0.getDelegateSuperclassName());
      assertEquals("goog.abstractMethod", googleCodingConvention0.getAbstractMethodName());
      assertEquals("goog.exportProperty", googleCodingConvention0.getExportPropertyFunction());
      assertEquals("goog.global", googleCodingConvention0.getGlobalObject());
      assertEquals("goog.exportSymbol", googleCodingConvention0.getExportSymbolFunction());
      assertNotNull(typedScopeCreator0);
      
      Scope scope0 = typedScopeCreator0.createInitialScope(node0);
      assertEquals(false, scope0.isLocal());
      assertEquals(true, scope0.isGlobal());
      assertEquals(33, scope0.getVarCount());
      assertEquals(2, compiler0.getErrorCount());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(true, compiler0.hasErrors());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.hasOneChild());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(0, node0.getChildCount());
      assertEquals(125, node0.getType());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isOptionalArg());
      assertNull(googleCodingConvention0.getDelegateSuperclassName());
      assertEquals("goog.abstractMethod", googleCodingConvention0.getAbstractMethodName());
      assertEquals("goog.exportProperty", googleCodingConvention0.getExportPropertyFunction());
      assertEquals("goog.global", googleCodingConvention0.getGlobalObject());
      assertEquals("goog.exportSymbol", googleCodingConvention0.getExportSymbolFunction());
      assertNotNull(scope0);
      
      CheckLevel checkLevel0 = CheckLevel.OFF;
      TypeCheck typeCheck0 = new TypeCheck((AbstractCompiler) compiler0, (ReverseAbstractInterpreter) semanticReverseAbstractInterpreter0, jSTypeRegistry0, scope0, (ScopeCreator) typedScopeCreator0, checkLevel0, checkLevel0);
      assertEquals(false, scope0.isLocal());
      assertEquals(true, scope0.isGlobal());
      assertEquals(33, scope0.getVarCount());
      assertEquals(2, compiler0.getErrorCount());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(true, compiler0.hasErrors());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.hasOneChild());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(0, node0.getChildCount());
      assertEquals(125, node0.getType());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNull(googleCodingConvention0.getDelegateSuperclassName());
      assertEquals("goog.abstractMethod", googleCodingConvention0.getAbstractMethodName());
      assertEquals("goog.exportProperty", googleCodingConvention0.getExportPropertyFunction());
      assertEquals("goog.global", googleCodingConvention0.getGlobalObject());
      assertEquals("goog.exportSymbol", googleCodingConvention0.getExportSymbolFunction());
      assertNotNull(typeCheck0);
      
      // Undeclared exception!
      try {
        typeCheck0.process(node0, node0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test11()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      //  // Unstable assertion: assertNotNull(compiler0);
      
      String string0 = "Q";
      Node node0 = compiler0.parseTestCode(string0);
      //  // Unstable assertion: assertEquals(1, node0.getChildCount());
      //  // Unstable assertion: assertEquals(true, node0.isSyntheticBlock());
      //  // Unstable assertion: assertEquals(1, node0.getLineno());
      //  // Unstable assertion: assertEquals(false, node0.isUnscopedQualifiedName());
      //  // Unstable assertion: assertEquals(false, node0.isVarArgs());
      //  // Unstable assertion: assertEquals(false, node0.wasEmptyNode());
      //  // Unstable assertion: assertEquals(false, node0.isNoSideEffectsCall());
      //  // Unstable assertion: assertEquals(132, node0.getType());
      //  // Unstable assertion: assertEquals(0, node0.getCharno());
      //  // Unstable assertion: assertEquals(false, node0.isQuotedString());
      //  // Unstable assertion: assertEquals(true, node0.hasChildren());
      //  // Unstable assertion: assertEquals(true, node0.hasOneChild());
      //  // Unstable assertion: assertEquals(false, node0.isOptionalArg());
      //  // Unstable assertion: assertEquals(false, node0.isQualifiedName());
      //  // Unstable assertion: assertEquals(false, node0.hasMoreThanOneChild());
      //  // Unstable assertion: assertEquals(false, compiler0.isTypeCheckingEnabled());
      //  // Unstable assertion: assertEquals(false, compiler0.isIdeMode());
      //  // Unstable assertion: assertEquals(0, compiler0.getWarningCount());
      //  // Unstable assertion: assertEquals(false, compiler0.hasErrors());
      //  // Unstable assertion: assertEquals(0, compiler0.getErrorCount());
      //  // Unstable assertion: assertNotNull(node0);
      
      GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
      //  // Unstable assertion: assertNull(googleCodingConvention0.getDelegateSuperclassName());
      //  // Unstable assertion: assertEquals("goog.exportProperty", googleCodingConvention0.getExportPropertyFunction());
      //  // Unstable assertion: assertEquals("goog.exportSymbol", googleCodingConvention0.getExportSymbolFunction());
      //  // Unstable assertion: assertEquals("goog.global", googleCodingConvention0.getGlobalObject());
      //  // Unstable assertion: assertEquals("goog.abstractMethod", googleCodingConvention0.getAbstractMethodName());
      //  // Unstable assertion: assertNotNull(googleCodingConvention0);
      
      TightenTypes tightenTypes0 = new TightenTypes(compiler0);
      //  // Unstable assertion: assertEquals(false, compiler0.isTypeCheckingEnabled());
      //  // Unstable assertion: assertEquals(false, compiler0.isIdeMode());
      //  // Unstable assertion: assertEquals(0, compiler0.getWarningCount());
      //  // Unstable assertion: assertEquals(false, compiler0.hasErrors());
      //  // Unstable assertion: assertEquals(0, compiler0.getErrorCount());
      //  // Unstable assertion: assertNotNull(tightenTypes0);
      
      JSTypeRegistry jSTypeRegistry0 = tightenTypes0.getTypeRegistry();
      //  // Unstable assertion: assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      //  // Unstable assertion: assertEquals(false, compiler0.isTypeCheckingEnabled());
      //  // Unstable assertion: assertEquals(false, compiler0.isIdeMode());
      //  // Unstable assertion: assertEquals(0, compiler0.getWarningCount());
      //  // Unstable assertion: assertEquals(false, compiler0.hasErrors());
      //  // Unstable assertion: assertEquals(0, compiler0.getErrorCount());
      //  // Unstable assertion: assertNotNull(jSTypeRegistry0);
      
      SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = (SemanticReverseAbstractInterpreter)compiler0.getReverseAbstractInterpreter();
      //  // Unstable assertion: assertEquals(false, compiler0.isTypeCheckingEnabled());
      //  // Unstable assertion: assertEquals(false, compiler0.isIdeMode());
      //  // Unstable assertion: assertEquals(0, compiler0.getWarningCount());
      //  // Unstable assertion: assertEquals(false, compiler0.hasErrors());
      //  // Unstable assertion: assertEquals(0, compiler0.getErrorCount());
      //  // Unstable assertion: assertNotNull(semanticReverseAbstractInterpreter0);
      
      TypedScopeCreator typedScopeCreator0 = new TypedScopeCreator(compiler0, googleCodingConvention0);
      //  // Unstable assertion: assertEquals(false, compiler0.isTypeCheckingEnabled());
      //  // Unstable assertion: assertEquals(false, compiler0.isIdeMode());
      //  // Unstable assertion: assertEquals(0, compiler0.getWarningCount());
      //  // Unstable assertion: assertEquals(false, compiler0.hasErrors());
      //  // Unstable assertion: assertEquals(0, compiler0.getErrorCount());
      //  // Unstable assertion: assertNull(googleCodingConvention0.getDelegateSuperclassName());
      //  // Unstable assertion: assertEquals("goog.exportProperty", googleCodingConvention0.getExportPropertyFunction());
      //  // Unstable assertion: assertEquals("goog.exportSymbol", googleCodingConvention0.getExportSymbolFunction());
      //  // Unstable assertion: assertEquals("goog.global", googleCodingConvention0.getGlobalObject());
      //  // Unstable assertion: assertEquals("goog.abstractMethod", googleCodingConvention0.getAbstractMethodName());
      //  // Unstable assertion: assertNotNull(typedScopeCreator0);
      
      Scope scope0 = typedScopeCreator0.createInitialScope(node0);
      //  // Unstable assertion: assertEquals(1, node0.getChildCount());
      //  // Unstable assertion: assertEquals(true, node0.isSyntheticBlock());
      //  // Unstable assertion: assertEquals(1, node0.getLineno());
      //  // Unstable assertion: assertEquals(false, node0.isUnscopedQualifiedName());
      //  // Unstable assertion: assertEquals(false, node0.isVarArgs());
      //  // Unstable assertion: assertEquals(false, node0.wasEmptyNode());
      //  // Unstable assertion: assertEquals(false, node0.isNoSideEffectsCall());
      //  // Unstable assertion: assertEquals(132, node0.getType());
      //  // Unstable assertion: assertEquals(0, node0.getCharno());
      //  // Unstable assertion: assertEquals(false, node0.isQuotedString());
      //  // Unstable assertion: assertEquals(true, node0.hasChildren());
      //  // Unstable assertion: assertEquals(true, node0.hasOneChild());
      //  // Unstable assertion: assertEquals(false, node0.isOptionalArg());
      //  // Unstable assertion: assertEquals(false, node0.isQualifiedName());
      //  // Unstable assertion: assertEquals(false, node0.hasMoreThanOneChild());
      //  // Unstable assertion: assertEquals(true, scope0.isGlobal());
      //  // Unstable assertion: assertEquals(false, scope0.isLocal());
      //  // Unstable assertion: assertEquals(33, scope0.getVarCount());
      //  // Unstable assertion: assertEquals(false, compiler0.isTypeCheckingEnabled());
      //  // Unstable assertion: assertEquals(false, compiler0.isIdeMode());
      //  // Unstable assertion: assertEquals(0, compiler0.getWarningCount());
      //  // Unstable assertion: assertEquals(false, compiler0.hasErrors());
      //  // Unstable assertion: assertEquals(0, compiler0.getErrorCount());
      //  // Unstable assertion: assertNull(googleCodingConvention0.getDelegateSuperclassName());
      //  // Unstable assertion: assertEquals("goog.exportProperty", googleCodingConvention0.getExportPropertyFunction());
      //  // Unstable assertion: assertEquals("goog.exportSymbol", googleCodingConvention0.getExportSymbolFunction());
      //  // Unstable assertion: assertEquals("goog.global", googleCodingConvention0.getGlobalObject());
      //  // Unstable assertion: assertEquals("goog.abstractMethod", googleCodingConvention0.getAbstractMethodName());
      //  // Unstable assertion: assertNotNull(scope0);
      
      Node node1 = RuntimeTypeCheck.getBoilerplateCode(compiler0, string0);
      //  // Unstable assertion: assertNotSame(node1, node0);
      //  // Unstable assertion: assertEquals(false, node1.isUnscopedQualifiedName());
      //  // Unstable assertion: assertEquals(132, node1.getType());
      //  // Unstable assertion: assertEquals(true, node1.hasMoreThanOneChild());
      //  // Unstable assertion: assertEquals(false, node1.wasEmptyNode());
      //  // Unstable assertion: assertEquals(false, node1.isVarArgs());
      //  // Unstable assertion: assertEquals(false, node1.hasOneChild());
      //  // Unstable assertion: assertEquals(true, node1.isSyntheticBlock());
      //  // Unstable assertion: assertEquals(0, node1.getCharno());
      //  // Unstable assertion: assertEquals(false, node1.isOptionalArg());
      //  // Unstable assertion: assertEquals(true, node1.hasChildren());
      //  // Unstable assertion: assertEquals(false, node1.isNoSideEffectsCall());
      //  // Unstable assertion: assertEquals(1, node1.getLineno());
      //  // Unstable assertion: assertEquals(false, node1.isQualifiedName());
      //  // Unstable assertion: assertEquals(false, node1.isQuotedString());
      //  // Unstable assertion: assertEquals(35, node1.getChildCount());
      //  // Unstable assertion: assertEquals(false, compiler0.isTypeCheckingEnabled());
      //  // Unstable assertion: assertEquals(false, compiler0.isIdeMode());
      //  // Unstable assertion: assertEquals(false, compiler0.hasErrors());
      //  // Unstable assertion: assertEquals(0, compiler0.getErrorCount());
      //  // Unstable assertion: assertEquals(63, compiler0.getWarningCount());
      //  // Unstable assertion: assertNotNull(node1);
      //  // Unstable assertion: assertFalse(node1.equals((Object)node0));
      
      node0.addChildrenToFront(node1);
      //  // Unstable assertion: assertNotSame(node1, node0);
      //  // Unstable assertion: assertNotSame(node0, node1);
      //  // Unstable assertion: assertEquals(false, node1.isUnscopedQualifiedName());
      //  // Unstable assertion: assertEquals(132, node1.getType());
      //  // Unstable assertion: assertEquals(true, node1.hasMoreThanOneChild());
      //  // Unstable assertion: assertEquals(false, node1.wasEmptyNode());
      //  // Unstable assertion: assertEquals(false, node1.isVarArgs());
      //  // Unstable assertion: assertEquals(false, node1.hasOneChild());
      //  // Unstable assertion: assertEquals(true, node1.isSyntheticBlock());
      //  // Unstable assertion: assertEquals(0, node1.getCharno());
      //  // Unstable assertion: assertEquals(false, node1.isOptionalArg());
      //  // Unstable assertion: assertEquals(true, node1.hasChildren());
      //  // Unstable assertion: assertEquals(false, node1.isNoSideEffectsCall());
      //  // Unstable assertion: assertEquals(1, node1.getLineno());
      //  // Unstable assertion: assertEquals(false, node1.isQualifiedName());
      //  // Unstable assertion: assertEquals(false, node1.isQuotedString());
      //  // Unstable assertion: assertEquals(35, node1.getChildCount());
      //  // Unstable assertion: assertEquals(2, node0.getChildCount());
      //  // Unstable assertion: assertEquals(true, node0.isSyntheticBlock());
      //  // Unstable assertion: assertEquals(1, node0.getLineno());
      //  // Unstable assertion: assertEquals(false, node0.isUnscopedQualifiedName());
      //  // Unstable assertion: assertEquals(false, node0.isVarArgs());
      //  // Unstable assertion: assertEquals(false, node0.wasEmptyNode());
      //  // Unstable assertion: assertEquals(false, node0.isNoSideEffectsCall());
      //  // Unstable assertion: assertEquals(132, node0.getType());
      //  // Unstable assertion: assertEquals(0, node0.getCharno());
      //  // Unstable assertion: assertEquals(false, node0.isQuotedString());
      //  // Unstable assertion: assertEquals(true, node0.hasChildren());
      //  // Unstable assertion: assertEquals(true, node0.hasMoreThanOneChild());
      //  // Unstable assertion: assertEquals(false, node0.hasOneChild());
      //  // Unstable assertion: assertEquals(false, node0.isOptionalArg());
      //  // Unstable assertion: assertEquals(false, node0.isQualifiedName());
      //  // Unstable assertion: assertEquals(false, compiler0.isTypeCheckingEnabled());
      //  // Unstable assertion: assertEquals(false, compiler0.isIdeMode());
      //  // Unstable assertion: assertEquals(false, compiler0.hasErrors());
      //  // Unstable assertion: assertEquals(0, compiler0.getErrorCount());
      //  // Unstable assertion: assertEquals(63, compiler0.getWarningCount());
      //  // Unstable assertion: assertFalse(node1.equals((Object)node0));
      //  // Unstable assertion: assertFalse(node0.equals((Object)node1));
      
      CheckLevel checkLevel0 = CheckLevel.WARNING;
      TypeCheck typeCheck0 = new TypeCheck((AbstractCompiler) compiler0, (ReverseAbstractInterpreter) semanticReverseAbstractInterpreter0, jSTypeRegistry0, scope0, (ScopeCreator) typedScopeCreator0, checkLevel0, checkLevel0);
      //  // Unstable assertion: assertNotSame(node0, node1);
      //  // Unstable assertion: assertEquals(2, node0.getChildCount());
      //  // Unstable assertion: assertEquals(true, node0.isSyntheticBlock());
      //  // Unstable assertion: assertEquals(1, node0.getLineno());
      //  // Unstable assertion: assertEquals(false, node0.isUnscopedQualifiedName());
      //  // Unstable assertion: assertEquals(false, node0.isVarArgs());
      //  // Unstable assertion: assertEquals(false, node0.wasEmptyNode());
      //  // Unstable assertion: assertEquals(false, node0.isNoSideEffectsCall());
      //  // Unstable assertion: assertEquals(132, node0.getType());
      //  // Unstable assertion: assertEquals(0, node0.getCharno());
      //  // Unstable assertion: assertEquals(false, node0.isQuotedString());
      //  // Unstable assertion: assertEquals(true, node0.hasChildren());
      //  // Unstable assertion: assertEquals(true, node0.hasMoreThanOneChild());
      //  // Unstable assertion: assertEquals(false, node0.hasOneChild());
      //  // Unstable assertion: assertEquals(false, node0.isOptionalArg());
      //  // Unstable assertion: assertEquals(false, node0.isQualifiedName());
      //  // Unstable assertion: assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      //  // Unstable assertion: assertEquals(true, scope0.isGlobal());
      //  // Unstable assertion: assertEquals(false, scope0.isLocal());
      //  // Unstable assertion: assertEquals(33, scope0.getVarCount());
      //  // Unstable assertion: assertEquals(false, compiler0.isTypeCheckingEnabled());
      //  // Unstable assertion: assertEquals(false, compiler0.isIdeMode());
      //  // Unstable assertion: assertEquals(false, compiler0.hasErrors());
      //  // Unstable assertion: assertEquals(0, compiler0.getErrorCount());
      //  // Unstable assertion: assertEquals(63, compiler0.getWarningCount());
      //  // Unstable assertion: assertNull(googleCodingConvention0.getDelegateSuperclassName());
      //  // Unstable assertion: assertEquals("goog.exportProperty", googleCodingConvention0.getExportPropertyFunction());
      //  // Unstable assertion: assertEquals("goog.exportSymbol", googleCodingConvention0.getExportSymbolFunction());
      //  // Unstable assertion: assertEquals("goog.global", googleCodingConvention0.getGlobalObject());
      //  // Unstable assertion: assertEquals("goog.abstractMethod", googleCodingConvention0.getAbstractMethodName());
      //  // Unstable assertion: assertNotNull(typeCheck0);
      //  // Unstable assertion: assertFalse(node0.equals((Object)node1));
      
      boolean boolean0 = googleCodingConvention0.isExported(string0);
      //  // Unstable assertion: assertNull(googleCodingConvention0.getDelegateSuperclassName());
      //  // Unstable assertion: assertEquals("goog.exportProperty", googleCodingConvention0.getExportPropertyFunction());
      //  // Unstable assertion: assertEquals("goog.exportSymbol", googleCodingConvention0.getExportSymbolFunction());
      //  // Unstable assertion: assertEquals("goog.global", googleCodingConvention0.getGlobalObject());
      //  // Unstable assertion: assertEquals("goog.abstractMethod", googleCodingConvention0.getAbstractMethodName());
      //  // Unstable assertion: assertFalse(boolean0);
      
      Node node2 = node1.removeFirstChild();
      //  // Unstable assertion: assertNotSame(node1, node2);
      //  // Unstable assertion: assertNotSame(node1, node0);
      //  // Unstable assertion: assertNotSame(node2, node0);
      //  // Unstable assertion: assertNotSame(node2, node1);
      //  // Unstable assertion: assertEquals(false, node1.isUnscopedQualifiedName());
      //  // Unstable assertion: assertEquals(132, node1.getType());
      //  // Unstable assertion: assertEquals(true, node1.hasMoreThanOneChild());
      //  // Unstable assertion: assertEquals(false, node1.wasEmptyNode());
      //  // Unstable assertion: assertEquals(false, node1.isVarArgs());
      //  // Unstable assertion: assertEquals(false, node1.hasOneChild());
      //  // Unstable assertion: assertEquals(true, node1.isSyntheticBlock());
      //  // Unstable assertion: assertEquals(0, node1.getCharno());
      //  // Unstable assertion: assertEquals(false, node1.isOptionalArg());
      //  // Unstable assertion: assertEquals(true, node1.hasChildren());
      //  // Unstable assertion: assertEquals(false, node1.isNoSideEffectsCall());
      //  // Unstable assertion: assertEquals(1, node1.getLineno());
      //  // Unstable assertion: assertEquals(false, node1.isQualifiedName());
      //  // Unstable assertion: assertEquals(34, node1.getChildCount());
      //  // Unstable assertion: assertEquals(false, node1.isQuotedString());
      //  // Unstable assertion: assertEquals(false, node2.isQuotedString());
      //  // Unstable assertion: assertEquals(118, node2.getType());
      //  // Unstable assertion: assertEquals(false, node2.hasMoreThanOneChild());
      //  // Unstable assertion: assertEquals(1, node2.getChildCount());
      //  // Unstable assertion: assertEquals(true, node2.hasOneChild());
      //  // Unstable assertion: assertEquals(false, node2.isVarArgs());
      //  // Unstable assertion: assertEquals(true, node2.hasChildren());
      //  // Unstable assertion: assertEquals(0, node2.getCharno());
      //  // Unstable assertion: assertEquals(25, node2.getLineno());
      //  // Unstable assertion: assertEquals(false, node2.isUnscopedQualifiedName());
      //  // Unstable assertion: assertEquals(false, node2.isSyntheticBlock());
      //  // Unstable assertion: assertEquals(false, node2.isNoSideEffectsCall());
      //  // Unstable assertion: assertEquals(false, node2.wasEmptyNode());
      //  // Unstable assertion: assertEquals(false, node2.isQualifiedName());
      //  // Unstable assertion: assertEquals(false, node2.isOptionalArg());
      //  // Unstable assertion: assertEquals(false, compiler0.isTypeCheckingEnabled());
      //  // Unstable assertion: assertEquals(false, compiler0.isIdeMode());
      //  // Unstable assertion: assertEquals(false, compiler0.hasErrors());
      //  // Unstable assertion: assertEquals(0, compiler0.getErrorCount());
      //  // Unstable assertion: assertEquals(63, compiler0.getWarningCount());
      //  // Unstable assertion: assertNotNull(node2);
      //  // Unstable assertion: assertFalse(node1.equals((Object)node2));
      //  // Unstable assertion: assertFalse(node1.equals((Object)node0));
      //  // Unstable assertion: assertFalse(node2.equals((Object)node0));
      //  // Unstable assertion: assertFalse(node2.equals((Object)node1));
      
      // Undeclared exception!
      try {
        typeCheck0.check(node0, boolean0);
       //  fail("Expecting exception: NullPointerException");
       // Unstable assertion
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test12()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      assertNotNull(compiler0);
      
      String string0 = "rp";
      Node node0 = compiler0.parseTestCode(string0);
      assertEquals(false, compiler0.hasErrors());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(0, node0.getCharno());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(132, node0.getType());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(true, node0.isSyntheticBlock());
      assertEquals(1, node0.getChildCount());
      assertEquals(true, node0.hasOneChild());
      assertEquals(false, node0.isQuotedString());
      assertEquals(1, node0.getLineno());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(true, node0.hasChildren());
      assertEquals(false, node0.isVarArgs());
      assertNotNull(node0);
      
      GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
      assertEquals("goog.exportSymbol", googleCodingConvention0.getExportSymbolFunction());
      assertEquals("goog.exportProperty", googleCodingConvention0.getExportPropertyFunction());
      assertEquals("goog.global", googleCodingConvention0.getGlobalObject());
      assertEquals("goog.abstractMethod", googleCodingConvention0.getAbstractMethodName());
      assertNull(googleCodingConvention0.getDelegateSuperclassName());
      assertNotNull(googleCodingConvention0);
      
      TightenTypes tightenTypes0 = new TightenTypes(compiler0);
      assertEquals(false, compiler0.hasErrors());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(false, compiler0.isIdeMode());
      assertNotNull(tightenTypes0);
      
      JSTypeRegistry jSTypeRegistry0 = tightenTypes0.getTypeRegistry();
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(false, compiler0.isIdeMode());
      assertNotNull(jSTypeRegistry0);
      
      SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals("goog.exportSymbol", googleCodingConvention0.getExportSymbolFunction());
      assertEquals("goog.exportProperty", googleCodingConvention0.getExportPropertyFunction());
      assertEquals("goog.global", googleCodingConvention0.getGlobalObject());
      assertEquals("goog.abstractMethod", googleCodingConvention0.getAbstractMethodName());
      assertNull(googleCodingConvention0.getDelegateSuperclassName());
      assertNotNull(semanticReverseAbstractInterpreter0);
      
      TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals("goog.exportSymbol", googleCodingConvention0.getExportSymbolFunction());
      assertEquals("goog.exportProperty", googleCodingConvention0.getExportPropertyFunction());
      assertEquals("goog.global", googleCodingConvention0.getGlobalObject());
      assertEquals("goog.abstractMethod", googleCodingConvention0.getAbstractMethodName());
      assertNull(googleCodingConvention0.getDelegateSuperclassName());
      assertNotNull(typeCheck0);
  }
}
