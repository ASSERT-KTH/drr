/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 19:44:01 GMT 2014
 */

package com.google.javascript.jscomp;

import static org.junit.Assert.*;
import org.junit.Test;
import com.google.javascript.jscomp.AbstractCompiler;
import com.google.javascript.jscomp.Compiler;
import com.google.javascript.jscomp.JSSourceFile;
import com.google.javascript.jscomp.Normalize;
import com.google.javascript.rhino.Node;
import com.google.javascript.rhino.ScriptOrFnNode;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;

import org.evosuite.runtime.mock.java.lang.MockIllegalStateException;
import org.evosuite.runtime.mock.java.lang.MockRuntimeException;
import org.junit.runner.RunWith;


public class NormalizeEvoSuite_branch_Test  {

  @Test
  public void test0()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(false, compiler0.isIdeMode());
      assertNotNull(compiler0);
      
      String string0 = "g";
      JSSourceFile jSSourceFile0 = JSSourceFile.fromCode(string0, string0);
      assertEquals("g", jSSourceFile0.getName());
      assertNotNull(jSSourceFile0);
      
      ScriptOrFnNode scriptOrFnNode0 = (ScriptOrFnNode)compiler0.parse(jSSourceFile0);
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals("g", jSSourceFile0.getName());
      assertNull(scriptOrFnNode0.getSourceName());
      assertEquals(1, scriptOrFnNode0.getChildCount());
      assertEquals(132, scriptOrFnNode0.getType());
      assertEquals(false, scriptOrFnNode0.isVarArgs());
      assertEquals(0, scriptOrFnNode0.getEncodedSourceStart());
      assertEquals(true, scriptOrFnNode0.isSyntheticBlock());
      assertEquals(-1, scriptOrFnNode0.getBaseLineno());
      assertEquals(0, scriptOrFnNode0.getParamCount());
      assertEquals(false, scriptOrFnNode0.hasMoreThanOneChild());
      assertEquals(0, scriptOrFnNode0.getRegexpCount());
      assertEquals(true, scriptOrFnNode0.hasOneChild());
      assertEquals(false, scriptOrFnNode0.isQuotedString());
      assertEquals(false, scriptOrFnNode0.isUnscopedQualifiedName());
      assertEquals(false, scriptOrFnNode0.isNoSideEffectsCall());
      assertEquals(-1, scriptOrFnNode0.getEndLineno());
      assertEquals(false, scriptOrFnNode0.isOptionalArg());
      assertEquals(false, scriptOrFnNode0.wasEmptyNode());
      assertEquals(0, scriptOrFnNode0.getEncodedSourceEnd());
      assertEquals(0, scriptOrFnNode0.getCharno());
      assertEquals(1, scriptOrFnNode0.getLineno());
      assertEquals(false, scriptOrFnNode0.isQualifiedName());
      assertEquals(true, scriptOrFnNode0.hasChildren());
      assertEquals(0, scriptOrFnNode0.getParamAndVarCount());
      assertEquals(0, scriptOrFnNode0.getFunctionCount());
      assertNotNull(scriptOrFnNode0);
      
      boolean boolean0 = true;
      Normalize normalize0 = new Normalize(compiler0, boolean0);
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(false, compiler0.isIdeMode());
      assertNotNull(normalize0);
      
      int int0 = 105;
      Node node0 = new Node(int0, (Node) scriptOrFnNode0, (Node) scriptOrFnNode0, int0, int0);
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals("g", jSSourceFile0.getName());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(105, node0.getLineno());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(true, node0.hasChildren());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(true, node0.hasOneChild());
      assertEquals(false, node0.isVarArgs());
      assertEquals(105, node0.getCharno());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(1, node0.getChildCount());
      assertEquals(105, node0.getType());
      assertNull(scriptOrFnNode0.getSourceName());
      assertEquals(1, scriptOrFnNode0.getChildCount());
      assertEquals(132, scriptOrFnNode0.getType());
      assertEquals(false, scriptOrFnNode0.isVarArgs());
      assertEquals(0, scriptOrFnNode0.getEncodedSourceStart());
      assertEquals(true, scriptOrFnNode0.isSyntheticBlock());
      assertEquals(-1, scriptOrFnNode0.getBaseLineno());
      assertEquals(0, scriptOrFnNode0.getParamCount());
      assertEquals(false, scriptOrFnNode0.hasMoreThanOneChild());
      assertEquals(0, scriptOrFnNode0.getRegexpCount());
      assertEquals(true, scriptOrFnNode0.hasOneChild());
      assertEquals(false, scriptOrFnNode0.isQuotedString());
      assertEquals(false, scriptOrFnNode0.isUnscopedQualifiedName());
      assertEquals(false, scriptOrFnNode0.isNoSideEffectsCall());
      assertEquals(-1, scriptOrFnNode0.getEndLineno());
      assertEquals(false, scriptOrFnNode0.isOptionalArg());
      assertEquals(false, scriptOrFnNode0.wasEmptyNode());
      assertEquals(0, scriptOrFnNode0.getEncodedSourceEnd());
      assertEquals(0, scriptOrFnNode0.getCharno());
      assertEquals(1, scriptOrFnNode0.getLineno());
      assertEquals(false, scriptOrFnNode0.isQualifiedName());
      assertEquals(true, scriptOrFnNode0.hasChildren());
      assertEquals(0, scriptOrFnNode0.getParamAndVarCount());
      assertEquals(0, scriptOrFnNode0.getFunctionCount());
      assertNotNull(node0);
      
      // Undeclared exception!
      try {
        normalize0.process(node0, node0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // INTERNAL COMPILER ERROR.
         // Please report this problem.
         // null
         //
      }
  }

  @Test
  public void test1()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertNotNull(compiler0);
      
      String string0 = "jhX";
      boolean boolean0 = true;
      int int0 = 8250;
      ScriptOrFnNode scriptOrFnNode0 = (ScriptOrFnNode)compiler0.parseTestCode(string0);
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(0, scriptOrFnNode0.getRegexpCount());
      assertNull(scriptOrFnNode0.getSourceName());
      assertEquals(0, scriptOrFnNode0.getEncodedSourceEnd());
      assertEquals(false, scriptOrFnNode0.isNoSideEffectsCall());
      assertEquals(-1, scriptOrFnNode0.getBaseLineno());
      assertEquals(-1, scriptOrFnNode0.getEndLineno());
      assertEquals(false, scriptOrFnNode0.isQuotedString());
      assertEquals(false, scriptOrFnNode0.wasEmptyNode());
      assertEquals(false, scriptOrFnNode0.hasMoreThanOneChild());
      assertEquals(0, scriptOrFnNode0.getCharno());
      assertEquals(false, scriptOrFnNode0.isOptionalArg());
      assertEquals(132, scriptOrFnNode0.getType());
      assertEquals(true, scriptOrFnNode0.isSyntheticBlock());
      assertEquals(1, scriptOrFnNode0.getChildCount());
      assertEquals(1, scriptOrFnNode0.getLineno());
      assertEquals(false, scriptOrFnNode0.isQualifiedName());
      assertEquals(false, scriptOrFnNode0.isVarArgs());
      assertEquals(true, scriptOrFnNode0.hasOneChild());
      assertEquals(0, scriptOrFnNode0.getParamAndVarCount());
      assertEquals(0, scriptOrFnNode0.getEncodedSourceStart());
      assertEquals(0, scriptOrFnNode0.getFunctionCount());
      assertEquals(0, scriptOrFnNode0.getParamCount());
      assertEquals(false, scriptOrFnNode0.isUnscopedQualifiedName());
      assertEquals(true, scriptOrFnNode0.hasChildren());
      assertNotNull(scriptOrFnNode0);
      
      Node node0 = new Node(int0, (Node) scriptOrFnNode0, (Node) scriptOrFnNode0, int0, int0);
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(0, scriptOrFnNode0.getRegexpCount());
      assertNull(scriptOrFnNode0.getSourceName());
      assertEquals(0, scriptOrFnNode0.getEncodedSourceEnd());
      assertEquals(false, scriptOrFnNode0.isNoSideEffectsCall());
      assertEquals(-1, scriptOrFnNode0.getBaseLineno());
      assertEquals(-1, scriptOrFnNode0.getEndLineno());
      assertEquals(false, scriptOrFnNode0.isQuotedString());
      assertEquals(false, scriptOrFnNode0.wasEmptyNode());
      assertEquals(false, scriptOrFnNode0.hasMoreThanOneChild());
      assertEquals(0, scriptOrFnNode0.getCharno());
      assertEquals(false, scriptOrFnNode0.isOptionalArg());
      assertEquals(132, scriptOrFnNode0.getType());
      assertEquals(true, scriptOrFnNode0.isSyntheticBlock());
      assertEquals(1, scriptOrFnNode0.getChildCount());
      assertEquals(1, scriptOrFnNode0.getLineno());
      assertEquals(false, scriptOrFnNode0.isQualifiedName());
      assertEquals(false, scriptOrFnNode0.isVarArgs());
      assertEquals(true, scriptOrFnNode0.hasOneChild());
      assertEquals(0, scriptOrFnNode0.getParamAndVarCount());
      assertEquals(0, scriptOrFnNode0.getEncodedSourceStart());
      assertEquals(0, scriptOrFnNode0.getFunctionCount());
      assertEquals(0, scriptOrFnNode0.getParamCount());
      assertEquals(false, scriptOrFnNode0.isUnscopedQualifiedName());
      assertEquals(true, scriptOrFnNode0.hasChildren());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(true, node0.hasChildren());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isVarArgs());
      assertEquals(true, node0.hasOneChild());
      assertEquals(8250, node0.getType());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(8250, node0.getLineno());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(4095, node0.getCharno());
      assertEquals(1, node0.getChildCount());
      assertNotNull(node0);
      
      Normalize.VerifyConstants normalize_VerifyConstants0 = new Normalize.VerifyConstants(compiler0, boolean0);
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertNotNull(normalize_VerifyConstants0);
      
      normalize_VerifyConstants0.process((Node) scriptOrFnNode0, (Node) scriptOrFnNode0);
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(0, scriptOrFnNode0.getRegexpCount());
      assertNull(scriptOrFnNode0.getSourceName());
      assertEquals(0, scriptOrFnNode0.getEncodedSourceEnd());
      assertEquals(false, scriptOrFnNode0.isNoSideEffectsCall());
      assertEquals(-1, scriptOrFnNode0.getBaseLineno());
      assertEquals(-1, scriptOrFnNode0.getEndLineno());
      assertEquals(false, scriptOrFnNode0.isQuotedString());
      assertEquals(false, scriptOrFnNode0.wasEmptyNode());
      assertEquals(false, scriptOrFnNode0.hasMoreThanOneChild());
      assertEquals(0, scriptOrFnNode0.getCharno());
      assertEquals(false, scriptOrFnNode0.isOptionalArg());
      assertEquals(132, scriptOrFnNode0.getType());
      assertEquals(true, scriptOrFnNode0.isSyntheticBlock());
      assertEquals(1, scriptOrFnNode0.getChildCount());
      assertEquals(1, scriptOrFnNode0.getLineno());
      assertEquals(false, scriptOrFnNode0.isQualifiedName());
      assertEquals(false, scriptOrFnNode0.isVarArgs());
      assertEquals(true, scriptOrFnNode0.hasOneChild());
      assertEquals(0, scriptOrFnNode0.getParamAndVarCount());
      assertEquals(0, scriptOrFnNode0.getEncodedSourceStart());
      assertEquals(0, scriptOrFnNode0.getFunctionCount());
      assertEquals(0, scriptOrFnNode0.getParamCount());
      assertEquals(false, scriptOrFnNode0.isUnscopedQualifiedName());
      assertEquals(true, scriptOrFnNode0.hasChildren());
  }

  @Test
  public void test2()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(false, compiler0.hasErrors());
      assertNotNull(compiler0);
      
      String string0 = "X";
      boolean boolean0 = false;
      int int0 = 8281;
      ScriptOrFnNode scriptOrFnNode0 = (ScriptOrFnNode)compiler0.parseTestCode(string0);
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(false, scriptOrFnNode0.isOptionalArg());
      assertEquals(0, scriptOrFnNode0.getParamCount());
      assertEquals(1, scriptOrFnNode0.getChildCount());
      assertEquals(132, scriptOrFnNode0.getType());
      assertEquals(false, scriptOrFnNode0.wasEmptyNode());
      assertEquals(-1, scriptOrFnNode0.getEndLineno());
      assertEquals(0, scriptOrFnNode0.getCharno());
      assertEquals(0, scriptOrFnNode0.getParamAndVarCount());
      assertEquals(0, scriptOrFnNode0.getRegexpCount());
      assertEquals(0, scriptOrFnNode0.getFunctionCount());
      assertEquals(false, scriptOrFnNode0.isUnscopedQualifiedName());
      assertEquals(1, scriptOrFnNode0.getLineno());
      assertEquals(true, scriptOrFnNode0.hasChildren());
      assertEquals(false, scriptOrFnNode0.isQualifiedName());
      assertEquals(true, scriptOrFnNode0.hasOneChild());
      assertEquals(0, scriptOrFnNode0.getEncodedSourceStart());
      assertEquals(0, scriptOrFnNode0.getEncodedSourceEnd());
      assertEquals(false, scriptOrFnNode0.isNoSideEffectsCall());
      assertEquals(false, scriptOrFnNode0.isQuotedString());
      assertEquals(true, scriptOrFnNode0.isSyntheticBlock());
      assertEquals(-1, scriptOrFnNode0.getBaseLineno());
      assertEquals(false, scriptOrFnNode0.isVarArgs());
      assertNull(scriptOrFnNode0.getSourceName());
      assertEquals(false, scriptOrFnNode0.hasMoreThanOneChild());
      assertNotNull(scriptOrFnNode0);
      
      Node node0 = new Node(int0, (Node) scriptOrFnNode0, (Node) scriptOrFnNode0, int0, int0);
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(true, node0.hasOneChild());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(true, node0.hasChildren());
      assertEquals(8281, node0.getType());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(4095, node0.getCharno());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(1, node0.getChildCount());
      assertEquals(8281, node0.getLineno());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, scriptOrFnNode0.isOptionalArg());
      assertEquals(0, scriptOrFnNode0.getParamCount());
      assertEquals(1, scriptOrFnNode0.getChildCount());
      assertEquals(132, scriptOrFnNode0.getType());
      assertEquals(false, scriptOrFnNode0.wasEmptyNode());
      assertEquals(-1, scriptOrFnNode0.getEndLineno());
      assertEquals(0, scriptOrFnNode0.getCharno());
      assertEquals(0, scriptOrFnNode0.getParamAndVarCount());
      assertEquals(0, scriptOrFnNode0.getRegexpCount());
      assertEquals(0, scriptOrFnNode0.getFunctionCount());
      assertEquals(false, scriptOrFnNode0.isUnscopedQualifiedName());
      assertEquals(1, scriptOrFnNode0.getLineno());
      assertEquals(true, scriptOrFnNode0.hasChildren());
      assertEquals(false, scriptOrFnNode0.isQualifiedName());
      assertEquals(true, scriptOrFnNode0.hasOneChild());
      assertEquals(0, scriptOrFnNode0.getEncodedSourceStart());
      assertEquals(0, scriptOrFnNode0.getEncodedSourceEnd());
      assertEquals(false, scriptOrFnNode0.isNoSideEffectsCall());
      assertEquals(false, scriptOrFnNode0.isQuotedString());
      assertEquals(true, scriptOrFnNode0.isSyntheticBlock());
      assertEquals(-1, scriptOrFnNode0.getBaseLineno());
      assertEquals(false, scriptOrFnNode0.isVarArgs());
      assertNull(scriptOrFnNode0.getSourceName());
      assertEquals(false, scriptOrFnNode0.hasMoreThanOneChild());
      assertNotNull(node0);
      
      Normalize.VerifyConstants normalize_VerifyConstants0 = new Normalize.VerifyConstants(compiler0, boolean0);
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(false, compiler0.hasErrors());
      assertNotNull(normalize_VerifyConstants0);
      
      normalize_VerifyConstants0.process((Node) scriptOrFnNode0, (Node) scriptOrFnNode0);
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(false, scriptOrFnNode0.isOptionalArg());
      assertEquals(0, scriptOrFnNode0.getParamCount());
      assertEquals(1, scriptOrFnNode0.getChildCount());
      assertEquals(132, scriptOrFnNode0.getType());
      assertEquals(false, scriptOrFnNode0.wasEmptyNode());
      assertEquals(-1, scriptOrFnNode0.getEndLineno());
      assertEquals(0, scriptOrFnNode0.getCharno());
      assertEquals(0, scriptOrFnNode0.getParamAndVarCount());
      assertEquals(0, scriptOrFnNode0.getRegexpCount());
      assertEquals(0, scriptOrFnNode0.getFunctionCount());
      assertEquals(false, scriptOrFnNode0.isUnscopedQualifiedName());
      assertEquals(1, scriptOrFnNode0.getLineno());
      assertEquals(true, scriptOrFnNode0.hasChildren());
      assertEquals(false, scriptOrFnNode0.isQualifiedName());
      assertEquals(true, scriptOrFnNode0.hasOneChild());
      assertEquals(0, scriptOrFnNode0.getEncodedSourceStart());
      assertEquals(0, scriptOrFnNode0.getEncodedSourceEnd());
      assertEquals(false, scriptOrFnNode0.isNoSideEffectsCall());
      assertEquals(false, scriptOrFnNode0.isQuotedString());
      assertEquals(true, scriptOrFnNode0.isSyntheticBlock());
      assertEquals(-1, scriptOrFnNode0.getBaseLineno());
      assertEquals(false, scriptOrFnNode0.isVarArgs());
      assertNull(scriptOrFnNode0.getSourceName());
      assertEquals(false, scriptOrFnNode0.hasMoreThanOneChild());
  }

  @Test
  public void test3()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      assertEquals(false, compiler0.hasErrors());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertNotNull(compiler0);
      
      String string0 = "ASK1P";
      boolean boolean0 = true;
      int int0 = 8303;
      ScriptOrFnNode scriptOrFnNode0 = (ScriptOrFnNode)compiler0.parseTestCode(string0);
      assertEquals(0, scriptOrFnNode0.getParamCount());
      assertEquals(false, scriptOrFnNode0.hasMoreThanOneChild());
      assertEquals(1, scriptOrFnNode0.getChildCount());
      assertEquals(false, scriptOrFnNode0.isQuotedString());
      assertEquals(1, scriptOrFnNode0.getLineno());
      assertEquals(-1, scriptOrFnNode0.getEndLineno());
      assertEquals(false, scriptOrFnNode0.isUnscopedQualifiedName());
      assertEquals(0, scriptOrFnNode0.getRegexpCount());
      assertEquals(0, scriptOrFnNode0.getEncodedSourceEnd());
      assertEquals(false, scriptOrFnNode0.isNoSideEffectsCall());
      assertEquals(true, scriptOrFnNode0.hasOneChild());
      assertEquals(132, scriptOrFnNode0.getType());
      assertNull(scriptOrFnNode0.getSourceName());
      assertEquals(false, scriptOrFnNode0.wasEmptyNode());
      assertEquals(false, scriptOrFnNode0.isOptionalArg());
      assertEquals(0, scriptOrFnNode0.getFunctionCount());
      assertEquals(true, scriptOrFnNode0.isSyntheticBlock());
      assertEquals(0, scriptOrFnNode0.getEncodedSourceStart());
      assertEquals(false, scriptOrFnNode0.isVarArgs());
      assertEquals(false, scriptOrFnNode0.isQualifiedName());
      assertEquals(-1, scriptOrFnNode0.getBaseLineno());
      assertEquals(true, scriptOrFnNode0.hasChildren());
      assertEquals(0, scriptOrFnNode0.getCharno());
      assertEquals(0, scriptOrFnNode0.getParamAndVarCount());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertNotNull(scriptOrFnNode0);
      
      Node node0 = new Node(int0, (Node) scriptOrFnNode0, (Node) scriptOrFnNode0, int0, int0);
      assertEquals(0, scriptOrFnNode0.getParamCount());
      assertEquals(false, scriptOrFnNode0.hasMoreThanOneChild());
      assertEquals(1, scriptOrFnNode0.getChildCount());
      assertEquals(false, scriptOrFnNode0.isQuotedString());
      assertEquals(1, scriptOrFnNode0.getLineno());
      assertEquals(-1, scriptOrFnNode0.getEndLineno());
      assertEquals(false, scriptOrFnNode0.isUnscopedQualifiedName());
      assertEquals(0, scriptOrFnNode0.getRegexpCount());
      assertEquals(0, scriptOrFnNode0.getEncodedSourceEnd());
      assertEquals(false, scriptOrFnNode0.isNoSideEffectsCall());
      assertEquals(true, scriptOrFnNode0.hasOneChild());
      assertEquals(132, scriptOrFnNode0.getType());
      assertNull(scriptOrFnNode0.getSourceName());
      assertEquals(false, scriptOrFnNode0.wasEmptyNode());
      assertEquals(false, scriptOrFnNode0.isOptionalArg());
      assertEquals(0, scriptOrFnNode0.getFunctionCount());
      assertEquals(true, scriptOrFnNode0.isSyntheticBlock());
      assertEquals(0, scriptOrFnNode0.getEncodedSourceStart());
      assertEquals(false, scriptOrFnNode0.isVarArgs());
      assertEquals(false, scriptOrFnNode0.isQualifiedName());
      assertEquals(-1, scriptOrFnNode0.getBaseLineno());
      assertEquals(true, scriptOrFnNode0.hasChildren());
      assertEquals(0, scriptOrFnNode0.getCharno());
      assertEquals(0, scriptOrFnNode0.getParamAndVarCount());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(true, node0.hasChildren());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(1, node0.getChildCount());
      assertEquals(true, node0.hasOneChild());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(8303, node0.getType());
      assertEquals(8303, node0.getLineno());
      assertEquals(4095, node0.getCharno());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isQuotedString());
      assertNotNull(node0);
      
      Normalize.VerifyConstants normalize_VerifyConstants0 = new Normalize.VerifyConstants(compiler0, boolean0);
      assertEquals(false, compiler0.hasErrors());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertNotNull(normalize_VerifyConstants0);
      
      normalize_VerifyConstants0.process((Node) scriptOrFnNode0, (Node) scriptOrFnNode0);
      assertEquals(0, scriptOrFnNode0.getParamCount());
      assertEquals(false, scriptOrFnNode0.hasMoreThanOneChild());
      assertEquals(1, scriptOrFnNode0.getChildCount());
      assertEquals(false, scriptOrFnNode0.isQuotedString());
      assertEquals(1, scriptOrFnNode0.getLineno());
      assertEquals(-1, scriptOrFnNode0.getEndLineno());
      assertEquals(false, scriptOrFnNode0.isUnscopedQualifiedName());
      assertEquals(0, scriptOrFnNode0.getRegexpCount());
      assertEquals(0, scriptOrFnNode0.getEncodedSourceEnd());
      assertEquals(false, scriptOrFnNode0.isNoSideEffectsCall());
      assertEquals(true, scriptOrFnNode0.hasOneChild());
      assertEquals(132, scriptOrFnNode0.getType());
      assertNull(scriptOrFnNode0.getSourceName());
      assertEquals(false, scriptOrFnNode0.wasEmptyNode());
      assertEquals(false, scriptOrFnNode0.isOptionalArg());
      assertEquals(0, scriptOrFnNode0.getFunctionCount());
      assertEquals(true, scriptOrFnNode0.isSyntheticBlock());
      assertEquals(0, scriptOrFnNode0.getEncodedSourceStart());
      assertEquals(false, scriptOrFnNode0.isVarArgs());
      assertEquals(false, scriptOrFnNode0.isQualifiedName());
      assertEquals(-1, scriptOrFnNode0.getBaseLineno());
      assertEquals(true, scriptOrFnNode0.hasChildren());
      assertEquals(0, scriptOrFnNode0.getCharno());
      assertEquals(0, scriptOrFnNode0.getParamAndVarCount());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
  }

  @Test
  public void test4()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      assertEquals(false, compiler0.hasErrors());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertNotNull(compiler0);
      
      boolean boolean0 = true;
      Normalize.VerifyConstants normalize_VerifyConstants0 = new Normalize.VerifyConstants(compiler0, boolean0);
      assertEquals(false, compiler0.hasErrors());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertNotNull(normalize_VerifyConstants0);
      
      String string0 = ",&KxvmQ,$iahZrw`";
      int int0 = 125;
      Node node0 = Node.newString(string0, int0, int0);
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isQuotedString());
      assertEquals(125, node0.getCharno());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(40, node0.getType());
      assertEquals(125, node0.getLineno());
      assertNotNull(node0);
      
      // Undeclared exception!
      try {
        normalize_VerifyConstants0.process(node0, node0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test5()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertNotNull(compiler0);
      
      String string0 = "X";
      boolean boolean0 = false;
      Normalize.PropogateConstantAnnotations normalize_PropogateConstantAnnotations0 = new Normalize.PropogateConstantAnnotations((AbstractCompiler) compiler0, boolean0);
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertNotNull(normalize_PropogateConstantAnnotations0);
      
      int int0 = 8281;
      ScriptOrFnNode scriptOrFnNode0 = (ScriptOrFnNode)compiler0.parseTestCode(string0);
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(0, scriptOrFnNode0.getFunctionCount());
      assertEquals(false, scriptOrFnNode0.isOptionalArg());
      assertEquals(false, scriptOrFnNode0.hasMoreThanOneChild());
      assertEquals(false, scriptOrFnNode0.isVarArgs());
      assertNull(scriptOrFnNode0.getSourceName());
      assertEquals(false, scriptOrFnNode0.isQualifiedName());
      assertEquals(0, scriptOrFnNode0.getRegexpCount());
      assertEquals(0, scriptOrFnNode0.getCharno());
      assertEquals(true, scriptOrFnNode0.isSyntheticBlock());
      assertEquals(0, scriptOrFnNode0.getParamAndVarCount());
      assertEquals(false, scriptOrFnNode0.isUnscopedQualifiedName());
      assertEquals(1, scriptOrFnNode0.getChildCount());
      assertEquals(1, scriptOrFnNode0.getLineno());
      assertEquals(true, scriptOrFnNode0.hasChildren());
      assertEquals(false, scriptOrFnNode0.isQuotedString());
      assertEquals(-1, scriptOrFnNode0.getEndLineno());
      assertEquals(false, scriptOrFnNode0.isNoSideEffectsCall());
      assertEquals(0, scriptOrFnNode0.getEncodedSourceStart());
      assertEquals(false, scriptOrFnNode0.wasEmptyNode());
      assertEquals(-1, scriptOrFnNode0.getBaseLineno());
      assertEquals(132, scriptOrFnNode0.getType());
      assertEquals(0, scriptOrFnNode0.getEncodedSourceEnd());
      assertEquals(0, scriptOrFnNode0.getParamCount());
      assertEquals(true, scriptOrFnNode0.hasOneChild());
      assertNotNull(scriptOrFnNode0);
      
      Node node0 = new Node(int0, (Node) scriptOrFnNode0, (Node) scriptOrFnNode0, int0, int0);
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(4095, node0.getCharno());
      assertEquals(true, node0.hasChildren());
      assertEquals(true, node0.hasOneChild());
      assertEquals(8281, node0.getType());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isQuotedString());
      assertEquals(1, node0.getChildCount());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(8281, node0.getLineno());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(0, scriptOrFnNode0.getFunctionCount());
      assertEquals(false, scriptOrFnNode0.isOptionalArg());
      assertEquals(false, scriptOrFnNode0.hasMoreThanOneChild());
      assertEquals(false, scriptOrFnNode0.isVarArgs());
      assertNull(scriptOrFnNode0.getSourceName());
      assertEquals(false, scriptOrFnNode0.isQualifiedName());
      assertEquals(0, scriptOrFnNode0.getRegexpCount());
      assertEquals(0, scriptOrFnNode0.getCharno());
      assertEquals(true, scriptOrFnNode0.isSyntheticBlock());
      assertEquals(0, scriptOrFnNode0.getParamAndVarCount());
      assertEquals(false, scriptOrFnNode0.isUnscopedQualifiedName());
      assertEquals(1, scriptOrFnNode0.getChildCount());
      assertEquals(1, scriptOrFnNode0.getLineno());
      assertEquals(true, scriptOrFnNode0.hasChildren());
      assertEquals(false, scriptOrFnNode0.isQuotedString());
      assertEquals(-1, scriptOrFnNode0.getEndLineno());
      assertEquals(false, scriptOrFnNode0.isNoSideEffectsCall());
      assertEquals(0, scriptOrFnNode0.getEncodedSourceStart());
      assertEquals(false, scriptOrFnNode0.wasEmptyNode());
      assertEquals(-1, scriptOrFnNode0.getBaseLineno());
      assertEquals(132, scriptOrFnNode0.getType());
      assertEquals(0, scriptOrFnNode0.getEncodedSourceEnd());
      assertEquals(0, scriptOrFnNode0.getParamCount());
      assertEquals(true, scriptOrFnNode0.hasOneChild());
      assertNotNull(node0);
      
      normalize_PropogateConstantAnnotations0.process((Node) scriptOrFnNode0, (Node) scriptOrFnNode0);
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(0, scriptOrFnNode0.getFunctionCount());
      assertEquals(false, scriptOrFnNode0.isOptionalArg());
      assertEquals(false, scriptOrFnNode0.hasMoreThanOneChild());
      assertEquals(false, scriptOrFnNode0.isVarArgs());
      assertNull(scriptOrFnNode0.getSourceName());
      assertEquals(false, scriptOrFnNode0.isQualifiedName());
      assertEquals(0, scriptOrFnNode0.getRegexpCount());
      assertEquals(0, scriptOrFnNode0.getCharno());
      assertEquals(true, scriptOrFnNode0.isSyntheticBlock());
      assertEquals(0, scriptOrFnNode0.getParamAndVarCount());
      assertEquals(false, scriptOrFnNode0.isUnscopedQualifiedName());
      assertEquals(1, scriptOrFnNode0.getChildCount());
      assertEquals(1, scriptOrFnNode0.getLineno());
      assertEquals(true, scriptOrFnNode0.hasChildren());
      assertEquals(false, scriptOrFnNode0.isQuotedString());
      assertEquals(-1, scriptOrFnNode0.getEndLineno());
      assertEquals(false, scriptOrFnNode0.isNoSideEffectsCall());
      assertEquals(0, scriptOrFnNode0.getEncodedSourceStart());
      assertEquals(false, scriptOrFnNode0.wasEmptyNode());
      assertEquals(-1, scriptOrFnNode0.getBaseLineno());
      assertEquals(132, scriptOrFnNode0.getType());
      assertEquals(0, scriptOrFnNode0.getEncodedSourceEnd());
      assertEquals(0, scriptOrFnNode0.getParamCount());
      assertEquals(true, scriptOrFnNode0.hasOneChild());
  }

  @Test
  public void test6()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      assertEquals(false, compiler0.hasErrors());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(0, compiler0.getWarningCount());
      assertNotNull(compiler0);
      
      String string0 = "NSKY:a";
      ScriptOrFnNode scriptOrFnNode0 = (ScriptOrFnNode)compiler0.parseTestCode(string0);
      assertEquals(true, scriptOrFnNode0.hasOneChild());
      assertEquals(0, scriptOrFnNode0.getParamCount());
      assertEquals(false, scriptOrFnNode0.isVarArgs());
      assertEquals(0, scriptOrFnNode0.getEncodedSourceStart());
      assertEquals(0, scriptOrFnNode0.getParamAndVarCount());
      assertEquals(false, scriptOrFnNode0.isNoSideEffectsCall());
      assertEquals(-1, scriptOrFnNode0.getEndLineno());
      assertEquals(false, scriptOrFnNode0.hasMoreThanOneChild());
      assertEquals(false, scriptOrFnNode0.isQualifiedName());
      assertEquals(0, scriptOrFnNode0.getEncodedSourceEnd());
      assertNull(scriptOrFnNode0.getSourceName());
      assertEquals(1, scriptOrFnNode0.getLineno());
      assertEquals(0, scriptOrFnNode0.getRegexpCount());
      assertEquals(1, scriptOrFnNode0.getChildCount());
      assertEquals(132, scriptOrFnNode0.getType());
      assertEquals(0, scriptOrFnNode0.getFunctionCount());
      assertEquals(true, scriptOrFnNode0.hasChildren());
      assertEquals(false, scriptOrFnNode0.isQuotedString());
      assertEquals(false, scriptOrFnNode0.wasEmptyNode());
      assertEquals(false, scriptOrFnNode0.isOptionalArg());
      assertEquals(0, scriptOrFnNode0.getCharno());
      assertEquals(true, scriptOrFnNode0.isSyntheticBlock());
      assertEquals(false, scriptOrFnNode0.isUnscopedQualifiedName());
      assertEquals(-1, scriptOrFnNode0.getBaseLineno());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(0, compiler0.getWarningCount());
      assertNotNull(scriptOrFnNode0);
      
      boolean boolean0 = true;
      Normalize normalize0 = new Normalize(compiler0, boolean0);
      assertEquals(false, compiler0.hasErrors());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(0, compiler0.getWarningCount());
      assertNotNull(normalize0);
      
      // Undeclared exception!
      try {
        normalize0.process((Node) scriptOrFnNode0, (Node) scriptOrFnNode0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // INTERNAL COMPILER ERROR.
         // Please report this problem.
         // Normalize constraints violated:
         // LABEL normalization
         //   Node(LABEL):  [testcode] :1:0
         // [source unknown]
         //   Parent(SCRIPT):  [testcode] :1:0
         // [source unknown]
         //
      }
  }

  @Test
  public void test7()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(false, compiler0.hasErrors());
      assertNotNull(compiler0);
      
      String string0 = "NSK:Y:a";
      ScriptOrFnNode scriptOrFnNode0 = (ScriptOrFnNode)compiler0.parseTestCode(string0);
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(false, scriptOrFnNode0.isUnscopedQualifiedName());
      assertEquals(132, scriptOrFnNode0.getType());
      assertEquals(true, scriptOrFnNode0.hasOneChild());
      assertEquals(false, scriptOrFnNode0.isQualifiedName());
      assertEquals(true, scriptOrFnNode0.hasChildren());
      assertEquals(-1, scriptOrFnNode0.getEndLineno());
      assertEquals(0, scriptOrFnNode0.getEncodedSourceStart());
      assertEquals(false, scriptOrFnNode0.hasMoreThanOneChild());
      assertEquals(0, scriptOrFnNode0.getParamCount());
      assertEquals(0, scriptOrFnNode0.getEncodedSourceEnd());
      assertEquals(true, scriptOrFnNode0.isSyntheticBlock());
      assertNull(scriptOrFnNode0.getSourceName());
      assertEquals(0, scriptOrFnNode0.getFunctionCount());
      assertEquals(0, scriptOrFnNode0.getCharno());
      assertEquals(0, scriptOrFnNode0.getRegexpCount());
      assertEquals(-1, scriptOrFnNode0.getBaseLineno());
      assertEquals(0, scriptOrFnNode0.getParamAndVarCount());
      assertEquals(false, scriptOrFnNode0.isNoSideEffectsCall());
      assertEquals(false, scriptOrFnNode0.isQuotedString());
      assertEquals(1, scriptOrFnNode0.getLineno());
      assertEquals(1, scriptOrFnNode0.getChildCount());
      assertEquals(false, scriptOrFnNode0.isVarArgs());
      assertEquals(false, scriptOrFnNode0.isOptionalArg());
      assertEquals(false, scriptOrFnNode0.wasEmptyNode());
      assertNotNull(scriptOrFnNode0);
      
      boolean boolean0 = false;
      Normalize normalize0 = new Normalize(compiler0, boolean0);
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(false, compiler0.hasErrors());
      assertNotNull(normalize0);
      
      // Undeclared exception!
      try {
        normalize0.process((Node) scriptOrFnNode0, (Node) scriptOrFnNode0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // INTERNAL COMPILER ERROR.
         // Please report this problem.
         // null
         //
      }
  }
}
