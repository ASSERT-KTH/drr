/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 21:18:19 GMT 2014
 */

package com.google.javascript.jscomp;

import static org.junit.Assert.*; import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.junit.Test;
import com.google.javascript.jscomp.AbstractCompiler;
import com.google.javascript.jscomp.Compiler;
import com.google.javascript.jscomp.CompilerOptions;
import com.google.javascript.jscomp.DefaultPassConfig;
import com.google.javascript.jscomp.MoveFunctionDeclarations;
import com.google.javascript.jscomp.NodeTraversal;
import com.google.javascript.jscomp.Scope;
import com.google.javascript.jscomp.ScopeCreator;
import com.google.javascript.jscomp.SyntacticScopeCreator;
import com.google.javascript.rhino.Node;
import com.google.javascript.rhino.ScriptOrFnNode;
import com.google.javascript.rhino.jstype.JSType;
import com.google.javascript.rhino.jstype.JSTypeRegistry;
import java.util.LinkedList;
import java.util.List;



import org.evosuite.runtime.mock.java.lang.MockIllegalStateException;
import org.junit.runner.RunWith;


public class SyntacticScopeCreatorEvoSuite_branch_Test  {

  @Test
  public void test0()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      assertNotNull(compiler0);
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      
      SyntacticScopeCreator syntacticScopeCreator0 = new SyntacticScopeCreator(compiler0);
      assertNotNull(syntacticScopeCreator0);
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      
      int int0 = 111;
      Node node0 = Node.newNumber((double) int0);
      assertNotNull(node0);
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.hasOneChild());
      assertEquals(39, node0.getType());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(0, node0.getChildCount());
      
      Node node1 = new Node(int0, node0, node0, node0, int0, int0);
      assertNotSame(node1, node0);
      assertNotSame(node0, node1);
      assertNotNull(node1);
      assertEquals(111, node1.getCharno());
      assertEquals(false, node1.isQualifiedName());
      assertEquals(false, node1.hasMoreThanOneChild());
      assertEquals(false, node1.wasEmptyNode());
      assertEquals(false, node1.isUnscopedQualifiedName());
      assertEquals(111, node1.getLineno());
      assertEquals(false, node1.isNoSideEffectsCall());
      assertEquals(1, node1.getChildCount());
      assertEquals(true, node1.hasChildren());
      assertEquals(false, node1.isSyntheticBlock());
      assertEquals(111, node1.getType());
      assertEquals(true, node1.hasOneChild());
      assertEquals(false, node1.isQuotedString());
      assertEquals(false, node1.isVarArgs());
      assertEquals(false, node1.isOptionalArg());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.hasOneChild());
      assertEquals(39, node0.getType());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(0, node0.getChildCount());
      assertFalse(node1.equals((Object)node0));
      assertFalse(node0.equals((Object)node1));
      
      Scope scope0 = null;
      Scope scope1 = syntacticScopeCreator0.createScope(node1, scope0);
      assertNotSame(node1, node0);
      assertNotSame(node0, node1);
      assertNotNull(scope1);
      assertEquals(true, scope1.isGlobal());
      assertEquals(false, scope1.isLocal());
      assertEquals(0, scope1.getVarCount());
      assertEquals(111, node1.getCharno());
      assertEquals(false, node1.isQualifiedName());
      assertEquals(false, node1.hasMoreThanOneChild());
      assertEquals(false, node1.wasEmptyNode());
      assertEquals(false, node1.isUnscopedQualifiedName());
      assertEquals(111, node1.getLineno());
      assertEquals(false, node1.isNoSideEffectsCall());
      assertEquals(1, node1.getChildCount());
      assertEquals(true, node1.hasChildren());
      assertEquals(false, node1.isSyntheticBlock());
      assertEquals(111, node1.getType());
      assertEquals(true, node1.hasOneChild());
      assertEquals(false, node1.isQuotedString());
      assertEquals(false, node1.isVarArgs());
      assertEquals(false, node1.isOptionalArg());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.hasOneChild());
      assertEquals(39, node0.getType());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(0, node0.getChildCount());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertFalse(node1.equals((Object)node0));
      assertFalse(node0.equals((Object)node1));
  }

  @Test
  public void test1()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      assertNotNull(compiler0);
      assertEquals(false, compiler0.hasErrors());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(false, compiler0.isIdeMode());
      
      SyntacticScopeCreator syntacticScopeCreator0 = new SyntacticScopeCreator(compiler0);
      assertNotNull(syntacticScopeCreator0);
      assertEquals(false, compiler0.hasErrors());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(false, compiler0.isIdeMode());
      
      int int0 = 118;
      Node node0 = new Node(int0);
      assertNotNull(node0);
      assertEquals(118, node0.getType());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isQuotedString());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.hasChildren());
      
      CompilerOptions compilerOptions0 = new CompilerOptions();
      assertFalse(compilerOptions0.labelRenaming);
      assertFalse(compilerOptions0.decomposeExpressions);
      assertFalse(compilerOptions0.checkEs5Strict);
      assertFalse(compilerOptions0.closurePass);
      assertFalse(compilerOptions0.checkUnusedPropertiesEarly);
      assertFalse(compilerOptions0.ignoreCajaProperties);
      assertFalse(compilerOptions0.smartNameRemoval);
      assertFalse(compilerOptions0.checkControlStructures);
      assertFalse(compilerOptions0.removeEmptyFunctions);
      assertFalse(compilerOptions0.moveFunctionDeclarations);
      assertFalse(compilerOptions0.crossModuleMethodMotion);
      assertFalse(compilerOptions0.allowLegacyJsMessages);
      assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
      assertFalse(compilerOptions0.generatePseudoNames);
      assertFalse(compilerOptions0.collapseAnonymousFunctions);
      assertFalse(compilerOptions0.inlineLocalFunctions);
      assertFalse(compilerOptions0.inlineGetters);
      assertFalse(compilerOptions0.instrumentForCoverageOnly);
      assertFalse(compilerOptions0.aliasAllStrings);
      assertFalse(compilerOptions0.checkTypes);
      assertTrue(compilerOptions0.removeUnusedVarsInGlobalScope);
      assertFalse(compilerOptions0.checkSuspiciousCode);
      assertFalse(compilerOptions0.deadAssignmentElimination);
      assertFalse(compilerOptions0.foldConstants);
      assertFalse(compilerOptions0.removeTryCatchFinally);
      assertFalse(compilerOptions0.instrumentForCoverage);
      assertFalse(compilerOptions0.optimizeArgumentsArray);
      assertFalse(compilerOptions0.ambiguateProperties);
      assertFalse(compilerOptions0.checkDuplicateMessages);
      assertFalse(compilerOptions0.checkTypedPropertyCalls);
      assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
      assertFalse(compilerOptions0.markNoSideEffectCalls);
      assertFalse(compilerOptions0.optimizeParameters);
      assertFalse(compilerOptions0.inlineAnonymousFunctionExpressions);
      assertFalse(compilerOptions0.collapseVariableDeclarations);
      assertFalse(compilerOptions0.inferTypesInGlobalScope);
      assertFalse(compilerOptions0.devirtualizePrototypeMethods);
      assertFalse(compilerOptions0.flowSensitiveInlineVariables);
      assertFalse(compilerOptions0.aliasKeywords);
      assertFalse(compilerOptions0.ideMode);
      assertFalse(compilerOptions0.checkCaja);
      assertFalse(compilerOptions0.removeUnusedVars);
      assertFalse(compilerOptions0.inlineVariables);
      assertFalse(compilerOptions0.prettyPrint);
      assertFalse(compilerOptions0.exportTestFunctions);
      assertFalse(compilerOptions0.lineBreak);
      assertFalse(compilerOptions0.markAsCompiled);
      assertFalse(compilerOptions0.checkSymbols);
      assertFalse(compilerOptions0.convertToDottedProperties);
      assertFalse(compilerOptions0.gatherCssNames);
      assertFalse(compilerOptions0.reserveRawExports);
      assertFalse(compilerOptions0.coalesceVariableNames);
      assertFalse(compilerOptions0.crossModuleCodeMotion);
      assertFalse(compilerOptions0.generateExports);
      assertFalse(compilerOptions0.inlineFunctions);
      assertFalse(compilerOptions0.printInputDelimiter);
      assertFalse(compilerOptions0.removeDeadCode);
      assertFalse(compilerOptions0.tightenTypes);
      assertFalse(compilerOptions0.rewriteFunctionExpressions);
      assertFalse(compilerOptions0.aliasExternals);
      assertFalse(compilerOptions0.strictMessageReplacement);
      assertFalse(compilerOptions0.collapseProperties);
      assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
      assertFalse(compilerOptions0.computeFunctionSideEffects);
      assertFalse(compilerOptions0.removeConstantExpressions);
      assertFalse(compilerOptions0.recordFunctionInformation);
      assertFalse(compilerOptions0.inlineConstantVars);
      assertFalse(compilerOptions0.inlineLocalVariables);
      assertFalse(compilerOptions0.disambiguateProperties);
      assertNotNull(compilerOptions0);
      assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
      
      DefaultPassConfig defaultPassConfig0 = new DefaultPassConfig(compilerOptions0);
      assertFalse(compilerOptions0.labelRenaming);
      assertFalse(compilerOptions0.decomposeExpressions);
      assertFalse(compilerOptions0.checkEs5Strict);
      assertFalse(compilerOptions0.closurePass);
      assertFalse(compilerOptions0.checkUnusedPropertiesEarly);
      assertFalse(compilerOptions0.ignoreCajaProperties);
      assertFalse(compilerOptions0.smartNameRemoval);
      assertFalse(compilerOptions0.checkControlStructures);
      assertFalse(compilerOptions0.removeEmptyFunctions);
      assertFalse(compilerOptions0.moveFunctionDeclarations);
      assertFalse(compilerOptions0.crossModuleMethodMotion);
      assertFalse(compilerOptions0.allowLegacyJsMessages);
      assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
      assertFalse(compilerOptions0.generatePseudoNames);
      assertFalse(compilerOptions0.collapseAnonymousFunctions);
      assertFalse(compilerOptions0.inlineLocalFunctions);
      assertFalse(compilerOptions0.inlineGetters);
      assertFalse(compilerOptions0.instrumentForCoverageOnly);
      assertFalse(compilerOptions0.aliasAllStrings);
      assertFalse(compilerOptions0.checkTypes);
      assertTrue(compilerOptions0.removeUnusedVarsInGlobalScope);
      assertFalse(compilerOptions0.checkSuspiciousCode);
      assertFalse(compilerOptions0.deadAssignmentElimination);
      assertFalse(compilerOptions0.foldConstants);
      assertFalse(compilerOptions0.removeTryCatchFinally);
      assertFalse(compilerOptions0.instrumentForCoverage);
      assertFalse(compilerOptions0.optimizeArgumentsArray);
      assertFalse(compilerOptions0.ambiguateProperties);
      assertFalse(compilerOptions0.checkDuplicateMessages);
      assertFalse(compilerOptions0.checkTypedPropertyCalls);
      assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
      assertFalse(compilerOptions0.markNoSideEffectCalls);
      assertFalse(compilerOptions0.optimizeParameters);
      assertFalse(compilerOptions0.inlineAnonymousFunctionExpressions);
      assertFalse(compilerOptions0.collapseVariableDeclarations);
      assertFalse(compilerOptions0.inferTypesInGlobalScope);
      assertFalse(compilerOptions0.devirtualizePrototypeMethods);
      assertFalse(compilerOptions0.flowSensitiveInlineVariables);
      assertFalse(compilerOptions0.aliasKeywords);
      assertFalse(compilerOptions0.ideMode);
      assertFalse(compilerOptions0.checkCaja);
      assertFalse(compilerOptions0.removeUnusedVars);
      assertFalse(compilerOptions0.inlineVariables);
      assertFalse(compilerOptions0.prettyPrint);
      assertFalse(compilerOptions0.exportTestFunctions);
      assertFalse(compilerOptions0.lineBreak);
      assertFalse(compilerOptions0.markAsCompiled);
      assertFalse(compilerOptions0.checkSymbols);
      assertFalse(compilerOptions0.convertToDottedProperties);
      assertFalse(compilerOptions0.gatherCssNames);
      assertFalse(compilerOptions0.reserveRawExports);
      assertFalse(compilerOptions0.coalesceVariableNames);
      assertFalse(compilerOptions0.crossModuleCodeMotion);
      assertFalse(compilerOptions0.generateExports);
      assertFalse(compilerOptions0.inlineFunctions);
      assertFalse(compilerOptions0.printInputDelimiter);
      assertFalse(compilerOptions0.removeDeadCode);
      assertFalse(compilerOptions0.tightenTypes);
      assertFalse(compilerOptions0.rewriteFunctionExpressions);
      assertFalse(compilerOptions0.aliasExternals);
      assertFalse(compilerOptions0.strictMessageReplacement);
      assertFalse(compilerOptions0.collapseProperties);
      assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
      assertFalse(compilerOptions0.computeFunctionSideEffects);
      assertFalse(compilerOptions0.removeConstantExpressions);
      assertFalse(compilerOptions0.recordFunctionInformation);
      assertFalse(compilerOptions0.inlineConstantVars);
      assertFalse(compilerOptions0.inlineLocalVariables);
      assertFalse(compilerOptions0.disambiguateProperties);
      assertNotNull(defaultPassConfig0);
      assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
      
      Scope scope0 = defaultPassConfig0.getTopScope();
      assertFalse(compilerOptions0.labelRenaming);
      assertFalse(compilerOptions0.decomposeExpressions);
      assertFalse(compilerOptions0.checkEs5Strict);
      assertFalse(compilerOptions0.closurePass);
      assertFalse(compilerOptions0.checkUnusedPropertiesEarly);
      assertFalse(compilerOptions0.ignoreCajaProperties);
      assertFalse(compilerOptions0.smartNameRemoval);
      assertFalse(compilerOptions0.checkControlStructures);
      assertFalse(compilerOptions0.removeEmptyFunctions);
      assertFalse(compilerOptions0.moveFunctionDeclarations);
      assertFalse(compilerOptions0.crossModuleMethodMotion);
      assertFalse(compilerOptions0.allowLegacyJsMessages);
      assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
      assertFalse(compilerOptions0.generatePseudoNames);
      assertFalse(compilerOptions0.collapseAnonymousFunctions);
      assertFalse(compilerOptions0.inlineLocalFunctions);
      assertFalse(compilerOptions0.inlineGetters);
      assertFalse(compilerOptions0.instrumentForCoverageOnly);
      assertFalse(compilerOptions0.aliasAllStrings);
      assertFalse(compilerOptions0.checkTypes);
      assertTrue(compilerOptions0.removeUnusedVarsInGlobalScope);
      assertFalse(compilerOptions0.checkSuspiciousCode);
      assertFalse(compilerOptions0.deadAssignmentElimination);
      assertFalse(compilerOptions0.foldConstants);
      assertFalse(compilerOptions0.removeTryCatchFinally);
      assertFalse(compilerOptions0.instrumentForCoverage);
      assertFalse(compilerOptions0.optimizeArgumentsArray);
      assertFalse(compilerOptions0.ambiguateProperties);
      assertFalse(compilerOptions0.checkDuplicateMessages);
      assertFalse(compilerOptions0.checkTypedPropertyCalls);
      assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
      assertFalse(compilerOptions0.markNoSideEffectCalls);
      assertFalse(compilerOptions0.optimizeParameters);
      assertFalse(compilerOptions0.inlineAnonymousFunctionExpressions);
      assertFalse(compilerOptions0.collapseVariableDeclarations);
      assertFalse(compilerOptions0.inferTypesInGlobalScope);
      assertFalse(compilerOptions0.devirtualizePrototypeMethods);
      assertFalse(compilerOptions0.flowSensitiveInlineVariables);
      assertFalse(compilerOptions0.aliasKeywords);
      assertFalse(compilerOptions0.ideMode);
      assertFalse(compilerOptions0.checkCaja);
      assertFalse(compilerOptions0.removeUnusedVars);
      assertFalse(compilerOptions0.inlineVariables);
      assertFalse(compilerOptions0.prettyPrint);
      assertFalse(compilerOptions0.exportTestFunctions);
      assertFalse(compilerOptions0.lineBreak);
      assertFalse(compilerOptions0.markAsCompiled);
      assertFalse(compilerOptions0.checkSymbols);
      assertFalse(compilerOptions0.convertToDottedProperties);
      assertFalse(compilerOptions0.gatherCssNames);
      assertFalse(compilerOptions0.reserveRawExports);
      assertFalse(compilerOptions0.coalesceVariableNames);
      assertFalse(compilerOptions0.crossModuleCodeMotion);
      assertFalse(compilerOptions0.generateExports);
      assertFalse(compilerOptions0.inlineFunctions);
      assertFalse(compilerOptions0.printInputDelimiter);
      assertFalse(compilerOptions0.removeDeadCode);
      assertFalse(compilerOptions0.tightenTypes);
      assertFalse(compilerOptions0.rewriteFunctionExpressions);
      assertFalse(compilerOptions0.aliasExternals);
      assertFalse(compilerOptions0.strictMessageReplacement);
      assertFalse(compilerOptions0.collapseProperties);
      assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
      assertFalse(compilerOptions0.computeFunctionSideEffects);
      assertFalse(compilerOptions0.removeConstantExpressions);
      assertFalse(compilerOptions0.recordFunctionInformation);
      assertFalse(compilerOptions0.inlineConstantVars);
      assertFalse(compilerOptions0.inlineLocalVariables);
      assertFalse(compilerOptions0.disambiguateProperties);
      assertNull(scope0);
      assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
      
      Scope scope1 = syntacticScopeCreator0.createScope(node0, scope0);
      assertFalse(compilerOptions0.labelRenaming);
      assertFalse(compilerOptions0.decomposeExpressions);
      assertFalse(compilerOptions0.checkEs5Strict);
      assertFalse(compilerOptions0.closurePass);
      assertFalse(compilerOptions0.checkUnusedPropertiesEarly);
      assertFalse(compilerOptions0.ignoreCajaProperties);
      assertFalse(compilerOptions0.smartNameRemoval);
      assertFalse(compilerOptions0.checkControlStructures);
      assertFalse(compilerOptions0.removeEmptyFunctions);
      assertFalse(compilerOptions0.moveFunctionDeclarations);
      assertFalse(compilerOptions0.crossModuleMethodMotion);
      assertFalse(compilerOptions0.allowLegacyJsMessages);
      assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
      assertFalse(compilerOptions0.generatePseudoNames);
      assertFalse(compilerOptions0.collapseAnonymousFunctions);
      assertFalse(compilerOptions0.inlineLocalFunctions);
      assertFalse(compilerOptions0.inlineGetters);
      assertFalse(compilerOptions0.instrumentForCoverageOnly);
      assertFalse(compilerOptions0.aliasAllStrings);
      assertFalse(compilerOptions0.checkTypes);
      assertTrue(compilerOptions0.removeUnusedVarsInGlobalScope);
      assertFalse(compilerOptions0.checkSuspiciousCode);
      assertFalse(compilerOptions0.deadAssignmentElimination);
      assertFalse(compilerOptions0.foldConstants);
      assertFalse(compilerOptions0.removeTryCatchFinally);
      assertFalse(compilerOptions0.instrumentForCoverage);
      assertFalse(compilerOptions0.optimizeArgumentsArray);
      assertFalse(compilerOptions0.ambiguateProperties);
      assertFalse(compilerOptions0.checkDuplicateMessages);
      assertFalse(compilerOptions0.checkTypedPropertyCalls);
      assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
      assertFalse(compilerOptions0.markNoSideEffectCalls);
      assertFalse(compilerOptions0.optimizeParameters);
      assertFalse(compilerOptions0.inlineAnonymousFunctionExpressions);
      assertFalse(compilerOptions0.collapseVariableDeclarations);
      assertFalse(compilerOptions0.inferTypesInGlobalScope);
      assertFalse(compilerOptions0.devirtualizePrototypeMethods);
      assertFalse(compilerOptions0.flowSensitiveInlineVariables);
      assertFalse(compilerOptions0.aliasKeywords);
      assertFalse(compilerOptions0.ideMode);
      assertFalse(compilerOptions0.checkCaja);
      assertFalse(compilerOptions0.removeUnusedVars);
      assertFalse(compilerOptions0.inlineVariables);
      assertFalse(compilerOptions0.prettyPrint);
      assertFalse(compilerOptions0.exportTestFunctions);
      assertFalse(compilerOptions0.lineBreak);
      assertFalse(compilerOptions0.markAsCompiled);
      assertFalse(compilerOptions0.checkSymbols);
      assertFalse(compilerOptions0.convertToDottedProperties);
      assertFalse(compilerOptions0.gatherCssNames);
      assertFalse(compilerOptions0.reserveRawExports);
      assertFalse(compilerOptions0.coalesceVariableNames);
      assertFalse(compilerOptions0.crossModuleCodeMotion);
      assertFalse(compilerOptions0.generateExports);
      assertFalse(compilerOptions0.inlineFunctions);
      assertFalse(compilerOptions0.printInputDelimiter);
      assertFalse(compilerOptions0.removeDeadCode);
      assertFalse(compilerOptions0.tightenTypes);
      assertFalse(compilerOptions0.rewriteFunctionExpressions);
      assertFalse(compilerOptions0.aliasExternals);
      assertFalse(compilerOptions0.strictMessageReplacement);
      assertFalse(compilerOptions0.collapseProperties);
      assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
      assertFalse(compilerOptions0.computeFunctionSideEffects);
      assertFalse(compilerOptions0.removeConstantExpressions);
      assertFalse(compilerOptions0.recordFunctionInformation);
      assertFalse(compilerOptions0.inlineConstantVars);
      assertFalse(compilerOptions0.inlineLocalVariables);
      assertFalse(compilerOptions0.disambiguateProperties);
      assertNotNull(scope1);
      assertEquals(118, node0.getType());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isQuotedString());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.hasChildren());
      assertEquals(0, scope1.getVarCount());
      assertEquals(false, scope1.isLocal());
      assertEquals(true, scope1.isGlobal());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
  }

  @Test
  public void test2()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      assertNotNull(compiler0);
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(0, compiler0.getWarningCount());
      
      SyntacticScopeCreator syntacticScopeCreator0 = new SyntacticScopeCreator(compiler0);
      assertNotNull(syntacticScopeCreator0);
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(0, compiler0.getWarningCount());
      
      int int0 = 120;
      Node node0 = Node.newNumber((double) int0);
      assertNotNull(node0);
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(0, node0.getChildCount());
      assertEquals(-1, node0.getLineno());
      assertEquals(39, node0.getType());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isQuotedString());
      
      Node node1 = new Node(int0, node0, node0, node0, int0, int0);
      assertNotSame(node1, node0);
      assertNotSame(node0, node1);
      assertNotNull(node1);
      assertEquals(false, node1.isUnscopedQualifiedName());
      assertEquals(false, node1.wasEmptyNode());
      assertEquals(120, node1.getCharno());
      assertEquals(true, node1.hasOneChild());
      assertEquals(false, node1.isNoSideEffectsCall());
      assertEquals(1, node1.getChildCount());
      assertEquals(120, node1.getLineno());
      assertEquals(120, node1.getType());
      assertEquals(false, node1.isVarArgs());
      assertEquals(false, node1.isSyntheticBlock());
      assertEquals(false, node1.isQualifiedName());
      assertEquals(false, node1.isOptionalArg());
      assertEquals(true, node1.hasChildren());
      assertEquals(false, node1.hasMoreThanOneChild());
      assertEquals(false, node1.isQuotedString());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(0, node0.getChildCount());
      assertEquals(-1, node0.getLineno());
      assertEquals(39, node0.getType());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isQuotedString());
      assertFalse(node1.equals((Object)node0));
      assertFalse(node0.equals((Object)node1));
      
      Scope scope0 = null;
      // Undeclared exception!
      try {
        Scope scope1 = syntacticScopeCreator0.createScope(node1, scope0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test3()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      assertNotNull(compiler0);
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(0, compiler0.getWarningCount());
      
      SyntacticScopeCreator syntacticScopeCreator0 = new SyntacticScopeCreator(compiler0);
      assertNotNull(syntacticScopeCreator0);
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(0, compiler0.getWarningCount());
      
      int int0 = 118;
      Node node0 = Node.newNumber((double) int0);
      assertNotNull(node0);
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.hasChildren());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(39, node0.getType());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isVarArgs());
      assertEquals(-1, node0.getCharno());
      
      Node node1 = new Node(int0, node0, node0, node0, int0, int0);
      assertNotSame(node1, node0);
      assertNotSame(node0, node1);
      assertNotNull(node1);
      assertEquals(false, node1.isSyntheticBlock());
      assertEquals(118, node1.getType());
      assertEquals(true, node1.hasOneChild());
      assertEquals(false, node1.isQuotedString());
      assertEquals(false, node1.wasEmptyNode());
      assertEquals(1, node1.getChildCount());
      assertEquals(false, node1.isNoSideEffectsCall());
      assertEquals(false, node1.isOptionalArg());
      assertEquals(false, node1.hasMoreThanOneChild());
      assertEquals(true, node1.hasChildren());
      assertEquals(false, node1.isVarArgs());
      assertEquals(118, node1.getLineno());
      assertEquals(118, node1.getCharno());
      assertEquals(false, node1.isQualifiedName());
      assertEquals(false, node1.isUnscopedQualifiedName());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.hasChildren());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(39, node0.getType());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isVarArgs());
      assertEquals(-1, node0.getCharno());
      assertFalse(node1.equals((Object)node0));
      assertFalse(node0.equals((Object)node1));
      
      Scope scope0 = null;
      // Undeclared exception!
      try {
        Scope scope1 = syntacticScopeCreator0.createScope(node1, scope0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test4()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      assertNotNull(compiler0);
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      
      SyntacticScopeCreator syntacticScopeCreator0 = new SyntacticScopeCreator(compiler0);
      assertNotNull(syntacticScopeCreator0);
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      
      JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
      assertNotNull(jSTypeRegistry0);
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      assertNotNull(linkedList0);
      assertEquals("[]", linkedList0.toString());
      assertEquals(0, linkedList0.size());
      
      String string0 = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ$";
      ScriptOrFnNode scriptOrFnNode0 = (ScriptOrFnNode)compiler0.parseSyntheticCode(string0, string0);
      assertNotNull(scriptOrFnNode0);
      assertEquals(true, scriptOrFnNode0.hasOneChild());
      assertEquals(false, scriptOrFnNode0.isVarArgs());
      assertEquals(132, scriptOrFnNode0.getType());
      assertEquals(0, scriptOrFnNode0.getParamCount());
      assertEquals(false, scriptOrFnNode0.isNoSideEffectsCall());
      assertEquals(false, scriptOrFnNode0.isQuotedString());
      assertEquals(0, scriptOrFnNode0.getCharno());
      assertNull(scriptOrFnNode0.getSourceName());
      assertEquals(1, scriptOrFnNode0.getChildCount());
      assertEquals(-1, scriptOrFnNode0.getEndLineno());
      assertEquals(1, scriptOrFnNode0.getLineno());
      assertEquals(0, scriptOrFnNode0.getEncodedSourceEnd());
      assertEquals(-1, scriptOrFnNode0.getBaseLineno());
      assertEquals(true, scriptOrFnNode0.hasChildren());
      assertEquals(false, scriptOrFnNode0.hasMoreThanOneChild());
      assertEquals(0, scriptOrFnNode0.getFunctionCount());
      assertEquals(false, scriptOrFnNode0.wasEmptyNode());
      assertEquals(true, scriptOrFnNode0.isSyntheticBlock());
      assertEquals(0, scriptOrFnNode0.getParamAndVarCount());
      assertEquals(false, scriptOrFnNode0.isQualifiedName());
      assertEquals(false, scriptOrFnNode0.isOptionalArg());
      assertEquals(0, scriptOrFnNode0.getRegexpCount());
      assertEquals(0, scriptOrFnNode0.getEncodedSourceStart());
      assertEquals(false, scriptOrFnNode0.isUnscopedQualifiedName());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      
      MoveFunctionDeclarations moveFunctionDeclarations0 = new MoveFunctionDeclarations(compiler0);
      assertNotNull(moveFunctionDeclarations0);
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      
      NodeTraversal nodeTraversal0 = new NodeTraversal((AbstractCompiler) compiler0, (NodeTraversal.Callback) moveFunctionDeclarations0, (ScopeCreator) syntacticScopeCreator0);
      assertNotNull(nodeTraversal0);
      assertEquals(0, nodeTraversal0.getLineNumber());
      assertEquals("", nodeTraversal0.getSourceName());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      
      Scope scope0 = nodeTraversal0.getScope();
      assertNull(scope0);
      assertEquals(0, nodeTraversal0.getLineNumber());
      assertEquals("", nodeTraversal0.getSourceName());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      
      Scope scope1 = syntacticScopeCreator0.createScope((Node) scriptOrFnNode0, scope0);
      assertNotNull(scope1);
      assertEquals(0, scope1.getVarCount());
      assertEquals(true, scope1.isGlobal());
      assertEquals(false, scope1.isLocal());
      assertEquals(0, nodeTraversal0.getLineNumber());
      assertEquals("", nodeTraversal0.getSourceName());
      assertEquals(true, scriptOrFnNode0.hasOneChild());
      assertEquals(false, scriptOrFnNode0.isVarArgs());
      assertEquals(132, scriptOrFnNode0.getType());
      assertEquals(0, scriptOrFnNode0.getParamCount());
      assertEquals(false, scriptOrFnNode0.isNoSideEffectsCall());
      assertEquals(false, scriptOrFnNode0.isQuotedString());
      assertEquals(0, scriptOrFnNode0.getCharno());
      assertNull(scriptOrFnNode0.getSourceName());
      assertEquals(1, scriptOrFnNode0.getChildCount());
      assertEquals(-1, scriptOrFnNode0.getEndLineno());
      assertEquals(1, scriptOrFnNode0.getLineno());
      assertEquals(0, scriptOrFnNode0.getEncodedSourceEnd());
      assertEquals(-1, scriptOrFnNode0.getBaseLineno());
      assertEquals(true, scriptOrFnNode0.hasChildren());
      assertEquals(false, scriptOrFnNode0.hasMoreThanOneChild());
      assertEquals(0, scriptOrFnNode0.getFunctionCount());
      assertEquals(false, scriptOrFnNode0.wasEmptyNode());
      assertEquals(true, scriptOrFnNode0.isSyntheticBlock());
      assertEquals(0, scriptOrFnNode0.getParamAndVarCount());
      assertEquals(false, scriptOrFnNode0.isQualifiedName());
      assertEquals(false, scriptOrFnNode0.isOptionalArg());
      assertEquals(0, scriptOrFnNode0.getRegexpCount());
      assertEquals(0, scriptOrFnNode0.getEncodedSourceStart());
      assertEquals(false, scriptOrFnNode0.isUnscopedQualifiedName());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      
      Node node0 = jSTypeRegistry0.createParameters((List<JSType>) linkedList0);
      assertNotNull(node0);
      assertEquals("[]", linkedList0.toString());
      assertEquals(0, linkedList0.size());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.hasChildren());
      assertEquals(83, node0.getType());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(0, node0.getChildCount());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      
      // Undeclared exception!
      try {
        Scope scope2 = syntacticScopeCreator0.createScope(node0, scope1);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test5()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      assertNotNull(compiler0);
      assertEquals(false, compiler0.hasErrors());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(0, compiler0.getWarningCount());
      
      SyntacticScopeCreator syntacticScopeCreator0 = new SyntacticScopeCreator(compiler0);
      assertNotNull(syntacticScopeCreator0);
      assertEquals(false, compiler0.hasErrors());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(0, compiler0.getWarningCount());
      
      int int0 = 105;
      Node node0 = Node.newNumber((double) int0);
      assertNotNull(node0);
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.hasChildren());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isQuotedString());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.hasOneChild());
      assertEquals(39, node0.getType());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isQualifiedName());
      
      Node node1 = new Node(int0, node0, node0, node0, int0, int0);
      assertNotSame(node0, node1);
      assertNotSame(node1, node0);
      assertNotNull(node1);
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.hasChildren());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isQuotedString());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.hasOneChild());
      assertEquals(39, node0.getType());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node1.wasEmptyNode());
      assertEquals(true, node1.hasChildren());
      assertEquals(105, node1.getType());
      assertEquals(false, node1.isVarArgs());
      assertEquals(false, node1.isSyntheticBlock());
      assertEquals(105, node1.getCharno());
      assertEquals(false, node1.hasMoreThanOneChild());
      assertEquals(1, node1.getChildCount());
      assertEquals(105, node1.getLineno());
      assertEquals(false, node1.isQuotedString());
      assertEquals(true, node1.hasOneChild());
      assertEquals(false, node1.isNoSideEffectsCall());
      assertEquals(false, node1.isOptionalArg());
      assertEquals(false, node1.isUnscopedQualifiedName());
      assertEquals(false, node1.isQualifiedName());
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node0));
      
      Scope scope0 = null;
      // Undeclared exception!
      try {
        Scope scope1 = syntacticScopeCreator0.createScope(node1, scope0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
}
