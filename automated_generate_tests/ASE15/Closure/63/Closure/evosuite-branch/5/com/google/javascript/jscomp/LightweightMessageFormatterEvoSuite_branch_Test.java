/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 22:04:36 GMT 2014
 */

package com.google.javascript.jscomp;

import static org.junit.Assert.*; import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.junit.Test;
import com.google.javascript.jscomp.Compiler;
import com.google.javascript.jscomp.CompilerOptions;
import com.google.javascript.jscomp.DiagnosticType;
import com.google.javascript.jscomp.JSError;
import com.google.javascript.jscomp.LightweightMessageFormatter;
import com.google.javascript.jscomp.ProcessClosurePrimitives;
import com.google.javascript.jscomp.Region;
import com.google.javascript.jscomp.SimpleRegion;
import com.google.javascript.jscomp.SourceExcerptProvider;
import com.google.javascript.jscomp.StrictModeCheck;
import com.google.javascript.rhino.Node;
import java.io.File;
import java.io.PrintStream;



import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.junit.runner.RunWith;


public class LightweightMessageFormatterEvoSuite_branch_Test  {

  @Test
  public void test0()  throws Throwable  {
      LightweightMessageFormatter.LineNumberingFormatter lightweightMessageFormatter_LineNumberingFormatter0 = new LightweightMessageFormatter.LineNumberingFormatter();
      assertNotNull(lightweightMessageFormatter_LineNumberingFormatter0);
      
      String string0 = "2lO\n";
      int int0 = (-1994);
      SimpleRegion simpleRegion0 = new SimpleRegion(int0, int0, string0);
      assertEquals("2lO\n", simpleRegion0.getSourceExcerpt());
      assertEquals(-1994, simpleRegion0.getEndingLineNumber());
      assertEquals(-1994, simpleRegion0.getBeginningLineNumber());
      assertNotNull(simpleRegion0);
      
      String string1 = lightweightMessageFormatter_LineNumberingFormatter0.formatRegion((Region) simpleRegion0);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertEquals("2lO\n", simpleRegion0.getSourceExcerpt());
      assertEquals(-1994, simpleRegion0.getEndingLineNumber());
      assertEquals(-1994, simpleRegion0.getBeginningLineNumber());
      assertNotNull(string1);
      assertEquals("  -1994| 2lO", string1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
  }

  @Test
  public void test1()  throws Throwable  {
      LightweightMessageFormatter.LineNumberingFormatter lightweightMessageFormatter_LineNumberingFormatter0 = new LightweightMessageFormatter.LineNumberingFormatter();
      assertNotNull(lightweightMessageFormatter_LineNumberingFormatter0);
      
      int int0 = (-1675);
      String string0 = "";
      SimpleRegion simpleRegion0 = new SimpleRegion(int0, int0, string0);
      assertEquals(-1675, simpleRegion0.getBeginningLineNumber());
      assertEquals(-1675, simpleRegion0.getEndingLineNumber());
      assertEquals("", simpleRegion0.getSourceExcerpt());
      assertNotNull(simpleRegion0);
      
      String string1 = lightweightMessageFormatter_LineNumberingFormatter0.formatRegion((Region) simpleRegion0);
      assertEquals(-1675, simpleRegion0.getBeginningLineNumber());
      assertEquals(-1675, simpleRegion0.getEndingLineNumber());
      assertEquals("", simpleRegion0.getSourceExcerpt());
      assertNull(string1);
  }

  @Test
  public void test2()  throws Throwable  {
      LightweightMessageFormatter.LineNumberingFormatter lightweightMessageFormatter_LineNumberingFormatter0 = new LightweightMessageFormatter.LineNumberingFormatter();
      assertNotNull(lightweightMessageFormatter_LineNumberingFormatter0);
      
      String string0 = ".";
      int int0 = (-26);
      SimpleRegion simpleRegion0 = new SimpleRegion(int0, int0, string0);
      assertEquals(".", simpleRegion0.getSourceExcerpt());
      assertEquals(-26, simpleRegion0.getBeginningLineNumber());
      assertEquals(-26, simpleRegion0.getEndingLineNumber());
      assertNotNull(simpleRegion0);
      
      String string1 = lightweightMessageFormatter_LineNumberingFormatter0.formatRegion((Region) simpleRegion0);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertEquals(".", simpleRegion0.getSourceExcerpt());
      assertEquals(-26, simpleRegion0.getBeginningLineNumber());
      assertEquals(-26, simpleRegion0.getEndingLineNumber());
      assertNotNull(string1);
      assertEquals("  -26| .", string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
  }

  @Test
  public void test3()  throws Throwable  {
      LightweightMessageFormatter lightweightMessageFormatter0 = LightweightMessageFormatter.withoutSource();
      assertNotNull(lightweightMessageFormatter0);
      
      DiagnosticType diagnosticType0 = ProcessClosurePrimitives.BASE_CLASS_ERROR;
      assertNotNull(diagnosticType0);
      
      String[] stringArray0 = new String[2];
      JSError jSError0 = JSError.make(diagnosticType0, stringArray0);
      assertEquals(-1, jSError0.getCharno());
      assertNotNull(jSError0);
      
      String string0 = lightweightMessageFormatter0.formatError(jSError0);
      assertEquals(-1, jSError0.getCharno());
      assertNotNull(string0);
      assertEquals("ERROR - incorrect use of goog.base: null\n", string0);
  }

  @Test
  public void test4()  throws Throwable  {
      String string0 = "r*sk2xBt`'{";
      LightweightMessageFormatter lightweightMessageFormatter0 = LightweightMessageFormatter.withoutSource();
      assertNotNull(lightweightMessageFormatter0);
      
      int int0 = (-2344);
      DiagnosticType diagnosticType0 = ProcessClosurePrimitives.BASE_CLASS_ERROR;
      assertNotNull(diagnosticType0);
      
      String[] stringArray0 = new String[2];
      JSError jSError0 = JSError.make(string0, int0, int0, diagnosticType0, stringArray0);
      assertEquals(-2344, jSError0.getCharno());
      assertNotNull(jSError0);
      
      String string1 = lightweightMessageFormatter0.formatError(jSError0);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertEquals(-2344, jSError0.getCharno());
      assertNotNull(string1);
      assertEquals("r*sk2xBt`'{: ERROR - incorrect use of goog.base: null\n", string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
  }

  @Test
  public void test5()  throws Throwable  {
      String string0 = "k3},@#'*=#1%jL\\ZR";
      MockFile mockFile0 = new MockFile(string0);
      assertNotNull(mockFile0);
      
      MockPrintStream mockPrintStream0 = new MockPrintStream((File) mockFile0);
      assertNotNull(mockPrintStream0);
      
      Compiler compiler0 = new Compiler((PrintStream) mockPrintStream0);
      assertNotNull(compiler0);
      
      SourceExcerptProvider.SourceExcerpt sourceExcerptProvider_SourceExcerpt0 = SourceExcerptProvider.SourceExcerpt.REGION;
      LightweightMessageFormatter lightweightMessageFormatter0 = new LightweightMessageFormatter((SourceExcerptProvider) compiler0, sourceExcerptProvider_SourceExcerpt0);
      assertNotNull(lightweightMessageFormatter0);
      
      String string1 = "S";
      assertNotSame(string1, string0);
      
      Node node0 = compiler0.parseTestCode(string1);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(132, node0.getType());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(true, node0.isSyntheticBlock());
      assertEquals(true, node0.hasChildren());
      assertEquals(false, node0.isVarArgs());
      assertEquals(1, node0.getLineno());
      assertEquals(1, node0.getChildCount());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(0, node0.getCharno());
      assertEquals(true, node0.hasOneChild());
      assertEquals(4096, node0.getSourcePosition());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(0, node0.getSideEffectFlags());
      assertNotNull(node0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      
      DiagnosticType diagnosticType0 = StrictModeCheck.DELETE_VARIABLE;
      assertNotNull(diagnosticType0);
      
      String[] stringArray0 = new String[8];
      JSError jSError0 = JSError.make(string1, node0, diagnosticType0, stringArray0);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(132, node0.getType());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(true, node0.isSyntheticBlock());
      assertEquals(true, node0.hasChildren());
      assertEquals(false, node0.isVarArgs());
      assertEquals(1, node0.getLineno());
      assertEquals(1, node0.getChildCount());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(0, node0.getCharno());
      assertEquals(true, node0.hasOneChild());
      assertEquals(4096, node0.getSourcePosition());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(0, jSError0.getCharno());
      assertNotNull(jSError0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      
      String string2 = lightweightMessageFormatter0.formatWarning(jSError0);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertNotSame(string1, string2);
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(132, node0.getType());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(true, node0.isSyntheticBlock());
      assertEquals(true, node0.hasChildren());
      assertEquals(false, node0.isVarArgs());
      assertEquals(1, node0.getLineno());
      assertEquals(1, node0.getChildCount());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(0, node0.getCharno());
      assertEquals(true, node0.hasOneChild());
      assertEquals(4096, node0.getSourcePosition());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(0, jSError0.getCharno());
      assertNotNull(string2);
      assertEquals("S:1: WARNING - variables, functions, and arguments cannot be deleted in ES5 strict mode\n", string2);
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
  }

  @Test
  public void test6()  throws Throwable  {
      LightweightMessageFormatter.LineNumberingFormatter lightweightMessageFormatter_LineNumberingFormatter0 = new LightweightMessageFormatter.LineNumberingFormatter();
      assertNotNull(lightweightMessageFormatter_LineNumberingFormatter0);
      
      String string0 = "r*sk2xBt`'{";
      int int0 = (-2344);
      String string1 = lightweightMessageFormatter_LineNumberingFormatter0.formatLine(string0, int0);
      assertSame(string1, string0);
      assertSame(string0, string1);
      assertNotNull(string1);
      assertEquals("r*sk2xBt`'{", string1);
  }
}
