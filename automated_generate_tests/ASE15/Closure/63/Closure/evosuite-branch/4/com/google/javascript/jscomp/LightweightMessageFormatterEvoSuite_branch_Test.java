/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 21:53:51 GMT 2014
 */

package com.google.javascript.jscomp;

import static org.junit.Assert.*; import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.junit.Test;
import com.google.javascript.jscomp.CheckAccessControls;
import com.google.javascript.jscomp.CheckLevel;
import com.google.javascript.jscomp.Compiler;
import com.google.javascript.jscomp.DiagnosticType;
import com.google.javascript.jscomp.JSError;
import com.google.javascript.jscomp.JsMessageVisitor;
import com.google.javascript.jscomp.LightweightMessageFormatter;
import com.google.javascript.jscomp.Region;
import com.google.javascript.jscomp.SimpleRegion;
import com.google.javascript.jscomp.SourceExcerptProvider;
import java.io.PrintStream;



import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.junit.runner.RunWith;


public class LightweightMessageFormatterEvoSuite_branch_Test  {

  @Test
  public void test0()  throws Throwable  {
      String string0 = "<C|O@t";
      int int0 = 0;
      LightweightMessageFormatter.LineNumberingFormatter lightweightMessageFormatter_LineNumberingFormatter0 = new LightweightMessageFormatter.LineNumberingFormatter();
      assertNotNull(lightweightMessageFormatter_LineNumberingFormatter0);
      
      SimpleRegion simpleRegion0 = new SimpleRegion(int0, int0, string0);
      assertNotNull(simpleRegion0);
      assertEquals(0, simpleRegion0.getBeginningLineNumber());
      assertEquals("<C|O@t", simpleRegion0.getSourceExcerpt());
      assertEquals(0, simpleRegion0.getEndingLineNumber());
      
      String string1 = lightweightMessageFormatter_LineNumberingFormatter0.formatRegion((Region) simpleRegion0);
      assertNotNull(string1);
      assertEquals("  0| <C|O@t", string1);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertEquals(0, simpleRegion0.getBeginningLineNumber());
      assertEquals("<C|O@t", simpleRegion0.getSourceExcerpt());
      assertEquals(0, simpleRegion0.getEndingLineNumber());
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
  }

  @Test
  public void test1()  throws Throwable  {
      LightweightMessageFormatter.LineNumberingFormatter lightweightMessageFormatter_LineNumberingFormatter0 = new LightweightMessageFormatter.LineNumberingFormatter();
      assertNotNull(lightweightMessageFormatter_LineNumberingFormatter0);
      
      int int0 = (-714);
      String string0 = "";
      SimpleRegion simpleRegion0 = new SimpleRegion(int0, int0, string0);
      assertNotNull(simpleRegion0);
      assertEquals(-714, simpleRegion0.getEndingLineNumber());
      assertEquals("", simpleRegion0.getSourceExcerpt());
      assertEquals(-714, simpleRegion0.getBeginningLineNumber());
      
      String string1 = lightweightMessageFormatter_LineNumberingFormatter0.formatRegion((Region) simpleRegion0);
      assertNull(string1);
      assertEquals(-714, simpleRegion0.getEndingLineNumber());
      assertEquals("", simpleRegion0.getSourceExcerpt());
      assertEquals(-714, simpleRegion0.getBeginningLineNumber());
  }

  @Test
  public void test2()  throws Throwable  {
      LightweightMessageFormatter.LineNumberingFormatter lightweightMessageFormatter_LineNumberingFormatter0 = new LightweightMessageFormatter.LineNumberingFormatter();
      assertNotNull(lightweightMessageFormatter_LineNumberingFormatter0);
      
      Region region0 = null;
      String string0 = lightweightMessageFormatter_LineNumberingFormatter0.formatRegion(region0);
      assertNull(string0);
  }

  @Test
  public void test3()  throws Throwable  {
      LightweightMessageFormatter.LineNumberingFormatter lightweightMessageFormatter_LineNumberingFormatter0 = new LightweightMessageFormatter.LineNumberingFormatter();
      assertNotNull(lightweightMessageFormatter_LineNumberingFormatter0);
      
      int int0 = (-56);
      String string0 = "\n";
      SimpleRegion simpleRegion0 = new SimpleRegion(int0, int0, string0);
      assertNotNull(simpleRegion0);
      assertEquals(-56, simpleRegion0.getBeginningLineNumber());
      assertEquals("\n", simpleRegion0.getSourceExcerpt());
      assertEquals(-56, simpleRegion0.getEndingLineNumber());
      
      String string1 = lightweightMessageFormatter_LineNumberingFormatter0.formatRegion((Region) simpleRegion0);
      assertNotNull(string1);
      assertEquals("  -56| ", string1);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertEquals(-56, simpleRegion0.getBeginningLineNumber());
      assertEquals("\n", simpleRegion0.getSourceExcerpt());
      assertEquals(-56, simpleRegion0.getEndingLineNumber());
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
  }

  @Test
  public void test4()  throws Throwable  {
      LightweightMessageFormatter lightweightMessageFormatter0 = LightweightMessageFormatter.withoutSource();
      assertNotNull(lightweightMessageFormatter0);
      
      DiagnosticType diagnosticType0 = JsMessageVisitor.MESSAGE_HAS_NO_VALUE;
      assertNotNull(diagnosticType0);
      
      String[] stringArray0 = new String[2];
      JSError jSError0 = JSError.make(diagnosticType0, stringArray0);
      assertNotNull(jSError0);
      assertEquals(-1, jSError0.getCharno());
      
      String string0 = lightweightMessageFormatter0.formatError(jSError0);
      assertNotNull(string0);
      assertEquals("ERROR - message node null has no value\n", string0);
      assertEquals(-1, jSError0.getCharno());
  }

  @Test
  public void test5()  throws Throwable  {
      LightweightMessageFormatter lightweightMessageFormatter0 = LightweightMessageFormatter.withoutSource();
      assertNotNull(lightweightMessageFormatter0);
      
      String string0 = "4G";
      int int0 = 1179;
      DiagnosticType diagnosticType0 = CheckAccessControls.BAD_PRIVATE_PROPERTY_ACCESS;
      assertNotNull(diagnosticType0);
      
      String[] stringArray0 = new String[1];
      JSError jSError0 = JSError.make(string0, int0, int0, diagnosticType0, stringArray0);
      assertNotNull(jSError0);
      assertEquals(1179, jSError0.getCharno());
      
      String string1 = lightweightMessageFormatter0.formatWarning(jSError0);
      assertNotNull(string1);
      assertEquals("4G:1179: WARNING - Access to private property null of {1} not allowed here.\n", string1);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertEquals(1179, jSError0.getCharno());
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
  }

  @Test
  public void test6()  throws Throwable  {
      String string0 = " ";
      MockPrintStream mockPrintStream0 = new MockPrintStream(string0);
      assertNotNull(mockPrintStream0);
      
      Compiler compiler0 = new Compiler((PrintStream) mockPrintStream0);
      assertNotNull(compiler0);
      
      LightweightMessageFormatter lightweightMessageFormatter0 = new LightweightMessageFormatter((SourceExcerptProvider) compiler0);
      assertNotNull(lightweightMessageFormatter0);
      
      int int0 = (-44);
      CheckLevel checkLevel0 = CheckLevel.OFF;
      DiagnosticType diagnosticType0 = Compiler.DUPLICATE_EXTERN_INPUT;
      assertNotNull(diagnosticType0);
      
      String[] stringArray0 = new String[8];
      JSError jSError0 = JSError.make(string0, int0, int0, checkLevel0, diagnosticType0, stringArray0);
      assertNotNull(jSError0);
      assertEquals(-44, jSError0.getCharno());
      
      String string1 = lightweightMessageFormatter0.formatError(jSError0);
      assertNotNull(string1);
      assertEquals(" : ERROR - Duplicate extern input: null\n", string1);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertEquals(-44, jSError0.getCharno());
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
  }
}
