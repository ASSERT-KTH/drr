/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 22:47:12 GMT 2014
 */

package com.google.javascript.jscomp;

import static org.junit.Assert.*; import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.junit.Test;
import com.google.javascript.jscomp.CheckLevel;
import com.google.javascript.jscomp.Compiler;
import com.google.javascript.jscomp.DiagnosticType;
import com.google.javascript.jscomp.JSError;
import com.google.javascript.jscomp.LightweightMessageFormatter;
import com.google.javascript.jscomp.ProcessClosurePrimitives;
import com.google.javascript.jscomp.ProcessDefines;
import com.google.javascript.jscomp.Region;
import com.google.javascript.jscomp.SimpleRegion;
import com.google.javascript.jscomp.SourceExcerptProvider;
import com.google.javascript.jscomp.SourceFile;
import com.google.javascript.jscomp.TypeCheck;



import org.junit.runner.RunWith;


public class LightweightMessageFormatterEvoSuite_branch_Test  {

  @Test
  public void test0()  throws Throwable  {
      LightweightMessageFormatter.LineNumberingFormatter lightweightMessageFormatter_LineNumberingFormatter0 = new LightweightMessageFormatter.LineNumberingFormatter();
      assertNotNull(lightweightMessageFormatter_LineNumberingFormatter0);
      
      int int0 = (-753);
      String string0 = "M7^\n";
      SourceFile.Preloaded sourceFile_Preloaded0 = new SourceFile.Preloaded(string0, string0, string0);
      assertNotNull(sourceFile_Preloaded0);
      assertEquals("M7^\n", sourceFile_Preloaded0.getName());
      assertEquals("M7^\n", sourceFile_Preloaded0.toString());
      assertEquals("M7^\n", sourceFile_Preloaded0.getOriginalPath());
      
      SimpleRegion simpleRegion0 = (SimpleRegion)sourceFile_Preloaded0.getRegion(int0);
      assertNotNull(simpleRegion0);
      assertEquals(2, simpleRegion0.getEndingLineNumber());
      assertEquals(1, simpleRegion0.getBeginningLineNumber());
      assertEquals("M7^", simpleRegion0.getSourceExcerpt());
      assertEquals("M7^\n", sourceFile_Preloaded0.getName());
      assertEquals("M7^\n", sourceFile_Preloaded0.toString());
      assertEquals("M7^\n", sourceFile_Preloaded0.getOriginalPath());
      
      String string1 = lightweightMessageFormatter_LineNumberingFormatter0.formatRegion((Region) simpleRegion0);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertNotNull(string1);
      assertEquals("  1| M7^", string1);
      assertEquals(2, simpleRegion0.getEndingLineNumber());
      assertEquals(1, simpleRegion0.getBeginningLineNumber());
      assertEquals("M7^", simpleRegion0.getSourceExcerpt());
      assertEquals("M7^\n", sourceFile_Preloaded0.getName());
      assertEquals("M7^\n", sourceFile_Preloaded0.toString());
      assertEquals("M7^\n", sourceFile_Preloaded0.getOriginalPath());
  }

  @Test
  public void test1()  throws Throwable  {
      LightweightMessageFormatter.LineNumberingFormatter lightweightMessageFormatter_LineNumberingFormatter0 = new LightweightMessageFormatter.LineNumberingFormatter();
      assertNotNull(lightweightMessageFormatter_LineNumberingFormatter0);
      
      int int0 = 2;
      String string0 = "";
      SimpleRegion simpleRegion0 = new SimpleRegion(int0, int0, string0);
      assertNotNull(simpleRegion0);
      assertEquals("", simpleRegion0.getSourceExcerpt());
      assertEquals(2, simpleRegion0.getBeginningLineNumber());
      assertEquals(2, simpleRegion0.getEndingLineNumber());
      
      String string1 = lightweightMessageFormatter_LineNumberingFormatter0.formatRegion((Region) simpleRegion0);
      assertNull(string1);
      assertEquals("", simpleRegion0.getSourceExcerpt());
      assertEquals(2, simpleRegion0.getBeginningLineNumber());
      assertEquals(2, simpleRegion0.getEndingLineNumber());
  }

  @Test
  public void test2()  throws Throwable  {
      LightweightMessageFormatter.LineNumberingFormatter lightweightMessageFormatter_LineNumberingFormatter0 = new LightweightMessageFormatter.LineNumberingFormatter();
      assertNotNull(lightweightMessageFormatter_LineNumberingFormatter0);
      
      int int0 = (-753);
      String string0 = "M7^\n";
      SimpleRegion simpleRegion0 = new SimpleRegion(int0, int0, string0);
      assertNotNull(simpleRegion0);
      assertEquals("M7^\n", simpleRegion0.getSourceExcerpt());
      assertEquals(-753, simpleRegion0.getBeginningLineNumber());
      assertEquals(-753, simpleRegion0.getEndingLineNumber());
      
      String string1 = lightweightMessageFormatter_LineNumberingFormatter0.formatRegion((Region) simpleRegion0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertNotNull(string1);
      assertEquals("  -753| M7^", string1);
      assertEquals("M7^\n", simpleRegion0.getSourceExcerpt());
      assertEquals(-753, simpleRegion0.getBeginningLineNumber());
      assertEquals(-753, simpleRegion0.getEndingLineNumber());
  }

  @Test
  public void test3()  throws Throwable  {
      int int0 = 46;
      int int1 = (-74);
      String string0 = "h";
      LightweightMessageFormatter lightweightMessageFormatter0 = LightweightMessageFormatter.withoutSource();
      assertNotNull(lightweightMessageFormatter0);
      
      CheckLevel checkLevel0 = CheckLevel.OFF;
      DiagnosticType diagnosticType0 = TypeCheck.ENUM_NOT_CONSTANT;
      assertNotNull(diagnosticType0);
      
      String[] stringArray0 = new String[2];
      JSError jSError0 = JSError.make(string0, int1, int0, checkLevel0, diagnosticType0, stringArray0);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertNotNull(jSError0);
      assertEquals(46, jSError0.getCharno());
      
      String string1 = lightweightMessageFormatter0.formatWarning(jSError0);
      assertFalse(int1 == int0);
      assertFalse(string1.equals((Object)string0));
      assertFalse(int0 == int1);
      assertFalse(string0.equals((Object)string1));
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertNotNull(string1);
      assertEquals("h: WARNING - enum key null must be a syntactic constant\n", string1);
      assertEquals(46, jSError0.getCharno());
  }

  @Test
  public void test4()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      assertNotNull(compiler0);
      
      String string0 = null;
      int int0 = (-987);
      SourceExcerptProvider.SourceExcerpt sourceExcerptProvider_SourceExcerpt0 = SourceExcerptProvider.SourceExcerpt.REGION;
      LightweightMessageFormatter lightweightMessageFormatter0 = new LightweightMessageFormatter((SourceExcerptProvider) compiler0, sourceExcerptProvider_SourceExcerpt0);
      assertNotNull(lightweightMessageFormatter0);
      
      DiagnosticType diagnosticType0 = ProcessDefines.NON_GLOBAL_DEFINE_INIT_ERROR;
      assertNotNull(diagnosticType0);
      
      String[] stringArray0 = new String[2];
      JSError jSError0 = JSError.make(string0, int0, int0, diagnosticType0, stringArray0);
      assertNotNull(jSError0);
      assertEquals(-987, jSError0.getCharno());
      
      String string1 = lightweightMessageFormatter0.formatWarning(jSError0);
      assertNotNull(string1);
      assertEquals("WARNING - @define variable null assignment must be global\n", string1);
      assertEquals(-987, jSError0.getCharno());
  }

  @Test
  public void test5()  throws Throwable  {
      LightweightMessageFormatter lightweightMessageFormatter0 = LightweightMessageFormatter.withoutSource();
      assertNotNull(lightweightMessageFormatter0);
      
      int int0 = 44;
      CheckLevel checkLevel0 = CheckLevel.ERROR;
      DiagnosticType diagnosticType0 = ProcessClosurePrimitives.DUPLICATE_NAMESPACE_ERROR;
      assertNotNull(diagnosticType0);
      
      String[] stringArray0 = new String[4];
      String string0 = diagnosticType0.toString();
      assertNotNull(string0);
      assertEquals("JSC_DUPLICATE_NAMESPACE_ERROR: namespace \"{0}\" cannot be provided twice", string0);
      
      JSError jSError0 = JSError.make(string0, int0, int0, checkLevel0, diagnosticType0, stringArray0);
      assertNotNull(jSError0);
      assertEquals(44, jSError0.getCharno());
      
      String string1 = lightweightMessageFormatter0.formatError(jSError0);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertNotNull(string1);
      assertEquals("JSC_DUPLICATE_NAMESPACE_ERROR: namespace \"{0}\" cannot be provided twice:44: ERROR - namespace \"null\" cannot be provided twice\n", string1);
      assertEquals(44, jSError0.getCharno());
  }

  @Test
  public void test6()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      assertNotNull(compiler0);
      
      LightweightMessageFormatter lightweightMessageFormatter0 = new LightweightMessageFormatter((SourceExcerptProvider) compiler0);
      assertNotNull(lightweightMessageFormatter0);
  }

  @Test
  public void test7()  throws Throwable  {
      LightweightMessageFormatter.LineNumberingFormatter lightweightMessageFormatter_LineNumberingFormatter0 = new LightweightMessageFormatter.LineNumberingFormatter();
      assertNotNull(lightweightMessageFormatter_LineNumberingFormatter0);
      
      int int0 = 46;
      String string0 = "h";
      String string1 = lightweightMessageFormatter_LineNumberingFormatter0.formatLine(string0, int0);
      assertSame(string1, string0);
      assertSame(string0, string1);
      assertNotNull(string1);
      assertEquals("h", string1);
  }
}
