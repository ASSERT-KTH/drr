/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 23:30:43 GMT 2014
 */

package com.google.javascript.jscomp.parsing;

import static org.junit.Assert.*;
import org.junit.Test;
import com.google.javascript.jscomp.mozilla.rhino.Context;
import com.google.javascript.jscomp.mozilla.rhino.ErrorReporter;
import com.google.javascript.jscomp.mozilla.rhino.Token;
import com.google.javascript.jscomp.mozilla.rhino.ast.AstNode;
import com.google.javascript.jscomp.mozilla.rhino.ast.AstRoot;
import com.google.javascript.jscomp.mozilla.rhino.ast.BreakStatement;
import com.google.javascript.jscomp.mozilla.rhino.ast.Comment;
import com.google.javascript.jscomp.mozilla.rhino.ast.Name;
import com.google.javascript.jscomp.mozilla.rhino.tools.ToolErrorReporter;
import com.google.javascript.jscomp.parsing.Config;
import com.google.javascript.jscomp.parsing.IRFactory;
import com.google.javascript.rhino.Node;
import java.io.PrintStream;
import java.nio.charset.Charset;
import java.util.LinkedHashSet;
import java.util.Set;
import java.util.TreeSet;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;

import org.evosuite.runtime.mock.java.lang.MockIllegalArgumentException;
import org.junit.runner.RunWith;


public class IRFactoryEvoSuite_branch_Test  {

  @Test
  public void test0()  throws Throwable  {
      int int0 = 150;
      AstRoot astRoot0 = new AstRoot(int0);
      assertNotNull(astRoot0);
      assertNull(astRoot0.getEncodedSource());
      assertEquals(0, astRoot0.getRegexpCount());
      assertEquals(false, astRoot0.hasChildren());
      assertEquals(0, astRoot0.getFunctionCount());
      assertEquals(0, astRoot0.getParamCount());
      assertEquals(136, astRoot0.getType());
      assertEquals(-1, astRoot0.getLineno());
      assertEquals(-1, astRoot0.getEndLineno());
      assertEquals(-1, astRoot0.getEncodedSourceEnd());
      assertEquals(0, astRoot0.depth());
      assertEquals(150, astRoot0.getPosition());
      assertEquals(-1, astRoot0.getEncodedSourceStart());
      assertNull(astRoot0.getSourceName());
      assertEquals(1, astRoot0.getLength());
      assertEquals("136", astRoot0.toString());
      assertNull(astRoot0.getJsDoc());
      assertEquals(false, astRoot0.isInStrictMode());
      assertEquals(-1, astRoot0.getBaseLineno());
      assertEquals(150, astRoot0.getAbsolutePosition());
      
      BreakStatement breakStatement0 = new BreakStatement();
      assertNotNull(breakStatement0);
      assertEquals(false, breakStatement0.hasChildren());
      assertEquals(-1, breakStatement0.getPosition());
      assertEquals(-1, breakStatement0.getLineno());
      assertNull(breakStatement0.getJsDoc());
      assertEquals(0, breakStatement0.depth());
      assertEquals(1, breakStatement0.getLength());
      assertEquals("120", breakStatement0.toString());
      assertEquals(120, breakStatement0.getType());
      assertEquals(-1, breakStatement0.getAbsolutePosition());
      
      astRoot0.addChild((AstNode) breakStatement0);
      assertEquals(false, breakStatement0.hasChildren());
      assertEquals(-1, breakStatement0.getLineno());
      assertNull(breakStatement0.getJsDoc());
      assertEquals(1, breakStatement0.depth());
      assertEquals(1, breakStatement0.getLength());
      assertEquals("120", breakStatement0.toString());
      assertEquals(-151, breakStatement0.getPosition());
      assertEquals(120, breakStatement0.getType());
      assertEquals(-1, breakStatement0.getAbsolutePosition());
      assertEquals(-150, astRoot0.getLength());
      assertNull(astRoot0.getEncodedSource());
      assertEquals(0, astRoot0.getRegexpCount());
      assertEquals(0, astRoot0.getFunctionCount());
      assertEquals(0, astRoot0.getParamCount());
      assertEquals(136, astRoot0.getType());
      assertEquals(-1, astRoot0.getLineno());
      assertEquals(-1, astRoot0.getEndLineno());
      assertEquals(-1, astRoot0.getEncodedSourceEnd());
      assertEquals(0, astRoot0.depth());
      assertEquals(150, astRoot0.getPosition());
      assertEquals(-1, astRoot0.getEncodedSourceStart());
      assertNull(astRoot0.getSourceName());
      assertEquals("136", astRoot0.toString());
      assertNull(astRoot0.getJsDoc());
      assertEquals(false, astRoot0.isInStrictMode());
      assertEquals(-1, astRoot0.getBaseLineno());
      assertEquals(true, astRoot0.hasChildren());
      assertEquals(150, astRoot0.getAbsolutePosition());
      
      String string0 = "jZFs1],(ug$pJO";
      Charset charset0 = Charset.defaultCharset();
      assertNotNull(charset0);
      assertEquals("UTF-8", charset0.displayName());
      assertEquals("UTF-8", charset0.name());
      assertEquals(true, charset0.isRegistered());
      assertEquals("UTF-8", charset0.toString());
      assertEquals(true, charset0.canEncode());
      
      Set<String> set0 = charset0.aliases();
      assertNotNull(set0);
      assertEquals("UTF-8", charset0.displayName());
      assertEquals("UTF-8", charset0.name());
      assertEquals(true, charset0.isRegistered());
      assertEquals("UTF-8", charset0.toString());
      assertEquals(true, charset0.canEncode());
      assertEquals(2, set0.size());
      assertEquals(false, set0.isEmpty());
      
      boolean boolean0 = true;
      Config config0 = new Config(set0, set0, boolean0, boolean0);
      assertNotNull(config0);
      assertEquals("UTF-8", charset0.displayName());
      assertEquals("UTF-8", charset0.name());
      assertEquals(true, charset0.isRegistered());
      assertEquals("UTF-8", charset0.toString());
      assertEquals(true, charset0.canEncode());
      assertEquals(2, set0.size());
      assertEquals(false, set0.isEmpty());
      
      PrintStream printStream0 = null;
      ToolErrorReporter toolErrorReporter0 = new ToolErrorReporter(boolean0, printStream0);
      assertNotNull(toolErrorReporter0);
      assertEquals(true, toolErrorReporter0.isReportingWarnings());
      assertEquals(false, toolErrorReporter0.hasReportedError());
      
      Node node0 = IRFactory.transformTree(astRoot0, string0, config0, (ErrorReporter) toolErrorReporter0);
      assertNotNull(node0);
      assertEquals("UTF-8", charset0.displayName());
      assertEquals("UTF-8", charset0.name());
      assertEquals(true, charset0.isRegistered());
      assertEquals("UTF-8", charset0.toString());
      assertEquals(true, charset0.canEncode());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(132, node0.getType());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(-1, node0.getCharno());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(1, node0.getChildCount());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(true, node0.hasOneChild());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(true, node0.hasChildren());
      assertEquals(false, node0.isQuotedString());
      assertEquals(true, toolErrorReporter0.isReportingWarnings());
      assertEquals(false, toolErrorReporter0.hasReportedError());
      assertEquals(2, set0.size());
      assertEquals(false, set0.isEmpty());
      assertEquals(-150, astRoot0.getLength());
      assertNull(astRoot0.getEncodedSource());
      assertEquals(0, astRoot0.getRegexpCount());
      assertEquals(0, astRoot0.getFunctionCount());
      assertEquals(0, astRoot0.getParamCount());
      assertEquals(136, astRoot0.getType());
      assertEquals(-1, astRoot0.getLineno());
      assertEquals(-1, astRoot0.getEndLineno());
      assertEquals(-1, astRoot0.getEncodedSourceEnd());
      assertEquals(0, astRoot0.depth());
      assertEquals(150, astRoot0.getPosition());
      assertEquals(-1, astRoot0.getEncodedSourceStart());
      assertNull(astRoot0.getSourceName());
      assertEquals("136", astRoot0.toString());
      assertNull(astRoot0.getJsDoc());
      assertEquals(false, astRoot0.isInStrictMode());
      assertEquals(-1, astRoot0.getBaseLineno());
      assertEquals(true, astRoot0.hasChildren());
      assertEquals(150, astRoot0.getAbsolutePosition());
  }

  @Test
  public void test1() {}
//   @Test
//   public void test1()  throws Throwable  {
//       AstRoot astRoot0 = new AstRoot();
//       //  // Unstable assertion: assertNotNull(astRoot0);
//       //  // Unstable assertion: assertEquals(136, astRoot0.getType());
//       //  // Unstable assertion: assertEquals(-1, astRoot0.getEncodedSourceStart());
//       //  // Unstable assertion: assertEquals("136", astRoot0.toString());
//       //  // Unstable assertion: assertEquals(0, astRoot0.getFunctionCount());
//       //  // Unstable assertion: assertEquals(1, astRoot0.getLength());
//       //  // Unstable assertion: assertEquals(-1, astRoot0.getPosition());
//       //  // Unstable assertion: assertEquals(false, astRoot0.hasChildren());
//       //  // Unstable assertion: assertEquals(0, astRoot0.getRegexpCount());
//       //  // Unstable assertion: assertEquals(-1, astRoot0.getEncodedSourceEnd());
//       //  // Unstable assertion: assertEquals(-1, astRoot0.getAbsolutePosition());
//       //  // Unstable assertion: assertEquals(-1, astRoot0.getLineno());
//       //  // Unstable assertion: assertEquals(-1, astRoot0.getEndLineno());
//       //  // Unstable assertion: assertEquals(false, astRoot0.isInStrictMode());
//       //  // Unstable assertion: assertEquals(0, astRoot0.depth());
//       //  // Unstable assertion: assertNull(astRoot0.getSourceName());
//       //  // Unstable assertion: assertEquals(-1, astRoot0.getBaseLineno());
//       //  // Unstable assertion: assertNull(astRoot0.getEncodedSource());
//       //  // Unstable assertion: assertNull(astRoot0.getJsDoc());
//       //  // Unstable assertion: assertEquals(0, astRoot0.getParamCount());
//       
//       String string0 = "as@ign_zrh";
//       TreeSet<String> treeSet0 = new TreeSet<String>();
//       //  // Unstable assertion: assertNotNull(treeSet0);
//       //  // Unstable assertion: assertEquals("[]", treeSet0.toString());
//       
//       boolean boolean0 = true;
//       Config config0 = new Config(treeSet0, treeSet0, boolean0, boolean0);
//       //  // Unstable assertion: assertNotNull(config0);
//       //  // Unstable assertion: assertEquals("[]", treeSet0.toString());
//       
//       Context context0 = null;
//       Context context1 = Context.enter(context0);
//       //  // Unstable assertion: assertNotNull(context1);
//       //  // Unstable assertion: assertEquals(true, context1.isGeneratingSource());
//       //  // Unstable assertion: assertEquals(true, context1.isGeneratingDebug());
//       //  // Unstable assertion: assertEquals(false, context1.hasCompileFunctionsWithDynamicScope());
//       //  // Unstable assertion: assertEquals(2147483647, context1.getMaximumInterpreterStackDepth());
//       //  // Unstable assertion: assertEquals(true, context1.isGeneratingDebugChanged());
//       //  // Unstable assertion: assertEquals(0, context1.getLanguageVersion());
//       //  // Unstable assertion: assertEquals(0, context1.getInstructionObserverThreshold());
//       //  // Unstable assertion: assertEquals(0, context1.getOptimizationLevel());
//       //  // Unstable assertion: assertEquals(true, context1.isSealed());
//       //  // Unstable assertion: assertTrue(context1.generateObserverCount);
//       
//       ToolErrorReporter toolErrorReporter0 = (ToolErrorReporter)context1.getErrorReporter();
//       //  // Unstable assertion: assertNotNull(toolErrorReporter0);
//       //  // Unstable assertion: assertEquals(true, context1.isGeneratingSource());
//       //  // Unstable assertion: assertEquals(true, context1.isGeneratingDebug());
//       //  // Unstable assertion: assertEquals(false, context1.hasCompileFunctionsWithDynamicScope());
//       //  // Unstable assertion: assertEquals(2147483647, context1.getMaximumInterpreterStackDepth());
//       //  // Unstable assertion: assertEquals(true, context1.isGeneratingDebugChanged());
//       //  // Unstable assertion: assertEquals(0, context1.getLanguageVersion());
//       //  // Unstable assertion: assertEquals(0, context1.getInstructionObserverThreshold());
//       //  // Unstable assertion: assertEquals(0, context1.getOptimizationLevel());
//       //  // Unstable assertion: assertEquals(true, context1.isSealed());
//       //  // Unstable assertion: assertEquals(false, toolErrorReporter0.isReportingWarnings());
//       //  // Unstable assertion: assertEquals(true, toolErrorReporter0.hasReportedError());
//       //  // Unstable assertion: assertTrue(context1.generateObserverCount);
//       
//       astRoot0.addChildToBack((com.google.javascript.jscomp.mozilla.rhino.Node) astRoot0);
//       //  // Unstable assertion: assertEquals(136, astRoot0.getType());
//       //  // Unstable assertion: assertEquals(-1, astRoot0.getEncodedSourceStart());
//       //  // Unstable assertion: assertEquals("136", astRoot0.toString());
//       //  // Unstable assertion: assertEquals(0, astRoot0.getFunctionCount());
//       //  // Unstable assertion: assertEquals(1, astRoot0.getLength());
//       //  // Unstable assertion: assertEquals(-1, astRoot0.getPosition());
//       //  // Unstable assertion: assertEquals(0, astRoot0.getRegexpCount());
//       //  // Unstable assertion: assertEquals(-1, astRoot0.getEncodedSourceEnd());
//       //  // Unstable assertion: assertEquals(-1, astRoot0.getAbsolutePosition());
//       //  // Unstable assertion: assertEquals(-1, astRoot0.getLineno());
//       //  // Unstable assertion: assertEquals(-1, astRoot0.getEndLineno());
//       //  // Unstable assertion: assertEquals(false, astRoot0.isInStrictMode());
//       //  // Unstable assertion: assertEquals(0, astRoot0.depth());
//       //  // Unstable assertion: assertNull(astRoot0.getSourceName());
//       //  // Unstable assertion: assertEquals(-1, astRoot0.getBaseLineno());
//       //  // Unstable assertion: assertNull(astRoot0.getEncodedSource());
//       //  // Unstable assertion: assertNull(astRoot0.getJsDoc());
//       //  // Unstable assertion: assertEquals(0, astRoot0.getParamCount());
//       //  // Unstable assertion: assertEquals(true, astRoot0.hasChildren());
//       
//       int int0 = 129;
//       AstRoot astRoot1 = (AstRoot)astRoot0.setType(int0);
//       //  // Unstable assertion: assertNotNull(astRoot1);
//       //  // Unstable assertion: assertEquals(0, astRoot1.getRegexpCount());
//       //  // Unstable assertion: assertEquals(-1, astRoot1.getEncodedSourceEnd());
//       //  // Unstable assertion: assertEquals(-1, astRoot1.getBaseLineno());
//       //  // Unstable assertion: assertEquals(-1, astRoot1.getAbsolutePosition());
//       //  // Unstable assertion: assertEquals(1, astRoot1.getLength());
//       //  // Unstable assertion: assertEquals(0, astRoot1.getFunctionCount());
//       //  // Unstable assertion: assertEquals(0, astRoot1.getParamCount());
//       //  // Unstable assertion: assertEquals(true, astRoot1.hasChildren());
//       //  // Unstable assertion: assertEquals(false, astRoot1.isInStrictMode());
//       //  // Unstable assertion: assertEquals(-1, astRoot1.getEndLineno());
//       //  // Unstable assertion: assertEquals(129, astRoot1.getType());
//       //  // Unstable assertion: assertNull(astRoot1.getJsDoc());
//       //  // Unstable assertion: assertNull(astRoot1.getEncodedSource());
//       //  // Unstable assertion: assertEquals("129", astRoot1.toString());
//       //  // Unstable assertion: assertEquals(-1, astRoot1.getLineno());
//       //  // Unstable assertion: assertEquals(0, astRoot1.depth());
//       //  // Unstable assertion: assertNull(astRoot1.getSourceName());
//       //  // Unstable assertion: assertEquals(-1, astRoot1.getPosition());
//       //  // Unstable assertion: assertEquals(-1, astRoot1.getEncodedSourceStart());
//       //  // Unstable assertion: assertEquals(-1, astRoot0.getEncodedSourceStart());
//       //  // Unstable assertion: assertEquals(0, astRoot0.getFunctionCount());
//       //  // Unstable assertion: assertEquals(1, astRoot0.getLength());
//       //  // Unstable assertion: assertEquals(-1, astRoot0.getPosition());
//       //  // Unstable assertion: assertEquals(0, astRoot0.getRegexpCount());
//       //  // Unstable assertion: assertEquals(-1, astRoot0.getEncodedSourceEnd());
//       //  // Unstable assertion: assertEquals(-1, astRoot0.getAbsolutePosition());
//       //  // Unstable assertion: assertEquals(-1, astRoot0.getLineno());
//       //  // Unstable assertion: assertEquals(-1, astRoot0.getEndLineno());
//       //  // Unstable assertion: assertEquals(false, astRoot0.isInStrictMode());
//       //  // Unstable assertion: assertEquals(0, astRoot0.depth());
//       //  // Unstable assertion: assertNull(astRoot0.getSourceName());
//       //  // Unstable assertion: assertEquals(129, astRoot0.getType());
//       //  // Unstable assertion: assertEquals(-1, astRoot0.getBaseLineno());
//       //  // Unstable assertion: assertEquals("129", astRoot0.toString());
//       //  // Unstable assertion: assertNull(astRoot0.getEncodedSource());
//       //  // Unstable assertion: assertNull(astRoot0.getJsDoc());
//       //  // Unstable assertion: assertEquals(0, astRoot0.getParamCount());
//       //  // Unstable assertion: assertEquals(true, astRoot0.hasChildren());
//       //  // Unstable assertion: assertSame(astRoot1, astRoot0);
//       //  // Unstable assertion: assertSame(astRoot0, astRoot1);
//       
//       // Undeclared exception!
//       try {
//         Node node0 = IRFactory.transformTree(astRoot0, string0, config0, (ErrorReporter) toolErrorReporter0);
//        //  fail("Expecting exception: StackOverflowError");
//        // Unstable assertion
//       } catch(StackOverflowError e) {
//          //
//          // no message in exception (getMessage() returned null)
//          //
//       }
//   }

  @Test
  public void test2() {}
//   @Test
//   public void test2()  throws Throwable  {
//       AstRoot astRoot0 = new AstRoot();
//       //  // Unstable assertion: assertNotNull(astRoot0);
//       //  // Unstable assertion: assertEquals(-1, astRoot0.getEncodedSourceEnd());
//       //  // Unstable assertion: assertEquals(136, astRoot0.getType());
//       //  // Unstable assertion: assertEquals(-1, astRoot0.getEncodedSourceStart());
//       //  // Unstable assertion: assertNull(astRoot0.getEncodedSource());
//       //  // Unstable assertion: assertNull(astRoot0.getSourceName());
//       //  // Unstable assertion: assertEquals(-1, astRoot0.getPosition());
//       //  // Unstable assertion: assertEquals("136", astRoot0.toString());
//       //  // Unstable assertion: assertEquals(0, astRoot0.getParamCount());
//       //  // Unstable assertion: assertEquals(-1, astRoot0.getEndLineno());
//       //  // Unstable assertion: assertEquals(-1, astRoot0.getAbsolutePosition());
//       //  // Unstable assertion: assertEquals(0, astRoot0.getFunctionCount());
//       //  // Unstable assertion: assertEquals(0, astRoot0.depth());
//       //  // Unstable assertion: assertEquals(false, astRoot0.isInStrictMode());
//       //  // Unstable assertion: assertNull(astRoot0.getJsDoc());
//       //  // Unstable assertion: assertEquals(1, astRoot0.getLength());
//       //  // Unstable assertion: assertEquals(-1, astRoot0.getLineno());
//       //  // Unstable assertion: assertEquals(0, astRoot0.getRegexpCount());
//       //  // Unstable assertion: assertEquals(false, astRoot0.hasChildren());
//       //  // Unstable assertion: assertEquals(-1, astRoot0.getBaseLineno());
//       
//       int int0 = 3584;
//       Token.CommentType token_CommentType0 = Token.CommentType.JSDOC;
//       String string0 = "DRA|)ETmvMg0,o";
//       Comment comment0 = new Comment(int0, int0, token_CommentType0, string0);
//       //  // Unstable assertion: assertNotNull(comment0);
//       //  // Unstable assertion: assertEquals(Token.CommentType.JSDOC, comment0.getCommentType());
//       //  // Unstable assertion: assertNull(comment0.getJsDoc());
//       //  // Unstable assertion: assertEquals("161", comment0.toString());
//       //  // Unstable assertion: assertEquals(3584, comment0.getAbsolutePosition());
//       //  // Unstable assertion: assertEquals(3584, comment0.getPosition());
//       //  // Unstable assertion: assertEquals(3584, comment0.getLength());
//       //  // Unstable assertion: assertEquals(false, comment0.isParsed());
//       //  // Unstable assertion: assertEquals(0, comment0.depth());
//       //  // Unstable assertion: assertEquals("DRA|)ETmvMg0,o", comment0.getValue());
//       //  // Unstable assertion: assertEquals(161, comment0.getType());
//       //  // Unstable assertion: assertEquals(-1, comment0.getLineno());
//       //  // Unstable assertion: assertEquals(false, comment0.hasChildren());
//       
//       astRoot0.addComment(comment0);
//       //  // Unstable assertion: assertEquals(Token.CommentType.JSDOC, comment0.getCommentType());
//       //  // Unstable assertion: assertNull(comment0.getJsDoc());
//       //  // Unstable assertion: assertEquals("161", comment0.toString());
//       //  // Unstable assertion: assertEquals(3584, comment0.getAbsolutePosition());
//       //  // Unstable assertion: assertEquals(3585, comment0.getPosition());
//       //  // Unstable assertion: assertEquals(3584, comment0.getLength());
//       //  // Unstable assertion: assertEquals(false, comment0.isParsed());
//       //  // Unstable assertion: assertEquals("DRA|)ETmvMg0,o", comment0.getValue());
//       //  // Unstable assertion: assertEquals(161, comment0.getType());
//       //  // Unstable assertion: assertEquals(-1, comment0.getLineno());
//       //  // Unstable assertion: assertEquals(false, comment0.hasChildren());
//       //  // Unstable assertion: assertEquals(1, comment0.depth());
//       //  // Unstable assertion: assertEquals(-1, astRoot0.getEncodedSourceEnd());
//       //  // Unstable assertion: assertEquals(136, astRoot0.getType());
//       //  // Unstable assertion: assertEquals(-1, astRoot0.getEncodedSourceStart());
//       //  // Unstable assertion: assertNull(astRoot0.getEncodedSource());
//       //  // Unstable assertion: assertNull(astRoot0.getSourceName());
//       //  // Unstable assertion: assertEquals(-1, astRoot0.getPosition());
//       //  // Unstable assertion: assertEquals("136", astRoot0.toString());
//       //  // Unstable assertion: assertEquals(0, astRoot0.getParamCount());
//       //  // Unstable assertion: assertEquals(-1, astRoot0.getEndLineno());
//       //  // Unstable assertion: assertEquals(-1, astRoot0.getAbsolutePosition());
//       //  // Unstable assertion: assertEquals(0, astRoot0.getFunctionCount());
//       //  // Unstable assertion: assertEquals(0, astRoot0.depth());
//       //  // Unstable assertion: assertEquals(false, astRoot0.isInStrictMode());
//       //  // Unstable assertion: assertNull(astRoot0.getJsDoc());
//       //  // Unstable assertion: assertEquals(1, astRoot0.getLength());
//       //  // Unstable assertion: assertEquals(-1, astRoot0.getLineno());
//       //  // Unstable assertion: assertEquals(0, astRoot0.getRegexpCount());
//       //  // Unstable assertion: assertEquals(false, astRoot0.hasChildren());
//       //  // Unstable assertion: assertEquals(-1, astRoot0.getBaseLineno());
//       
//       Context context0 = Context.getCurrentContext();
//       //  // Unstable assertion: assertNotNull(context0);
//       //  // Unstable assertion: assertEquals(0, context0.getInstructionObserverThreshold());
//       //  // Unstable assertion: assertEquals(0, context0.getLanguageVersion());
//       //  // Unstable assertion: assertEquals(true, context0.isGeneratingDebug());
//       //  // Unstable assertion: assertEquals(0, context0.getOptimizationLevel());
//       //  // Unstable assertion: assertEquals(false, context0.hasCompileFunctionsWithDynamicScope());
//       //  // Unstable assertion: assertEquals(true, context0.isSealed());
//       //  // Unstable assertion: assertEquals(2147483647, context0.getMaximumInterpreterStackDepth());
//       //  // Unstable assertion: assertEquals(true, context0.isGeneratingSource());
//       //  // Unstable assertion: assertEquals(true, context0.isGeneratingDebugChanged());
//       //  // Unstable assertion: assertTrue(context0.generateObserverCount);
//       
//       LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
//       //  // Unstable assertion: assertNotNull(linkedHashSet0);
//       //  // Unstable assertion: assertEquals("[]", linkedHashSet0.toString());
//       //  // Unstable assertion: assertEquals(true, linkedHashSet0.isEmpty());
//       //  // Unstable assertion: assertEquals(0, linkedHashSet0.size());
//       
//       Config config0 = new Config(linkedHashSet0, linkedHashSet0, context0.generateObserverCount, context0.generateObserverCount);
//       //  // Unstable assertion: assertNotNull(config0);
//       //  // Unstable assertion: assertEquals("[]", linkedHashSet0.toString());
//       //  // Unstable assertion: assertEquals(true, linkedHashSet0.isEmpty());
//       //  // Unstable assertion: assertEquals(0, linkedHashSet0.size());
//       //  // Unstable assertion: assertEquals(0, context0.getInstructionObserverThreshold());
//       //  // Unstable assertion: assertEquals(0, context0.getLanguageVersion());
//       //  // Unstable assertion: assertEquals(true, context0.isGeneratingDebug());
//       //  // Unstable assertion: assertEquals(0, context0.getOptimizationLevel());
//       //  // Unstable assertion: assertEquals(false, context0.hasCompileFunctionsWithDynamicScope());
//       //  // Unstable assertion: assertEquals(true, context0.isSealed());
//       //  // Unstable assertion: assertEquals(2147483647, context0.getMaximumInterpreterStackDepth());
//       //  // Unstable assertion: assertEquals(true, context0.isGeneratingSource());
//       //  // Unstable assertion: assertEquals(true, context0.isGeneratingDebugChanged());
//       //  // Unstable assertion: assertTrue(context0.generateObserverCount);
//       
//       ToolErrorReporter toolErrorReporter0 = new ToolErrorReporter(context0.generateObserverCount);
//       //  // Unstable assertion: assertNotNull(toolErrorReporter0);
//       //  // Unstable assertion: assertEquals(true, toolErrorReporter0.isReportingWarnings());
//       //  // Unstable assertion: assertEquals(false, toolErrorReporter0.hasReportedError());
//       //  // Unstable assertion: assertEquals(0, context0.getInstructionObserverThreshold());
//       //  // Unstable assertion: assertEquals(0, context0.getLanguageVersion());
//       //  // Unstable assertion: assertEquals(true, context0.isGeneratingDebug());
//       //  // Unstable assertion: assertEquals(0, context0.getOptimizationLevel());
//       //  // Unstable assertion: assertEquals(false, context0.hasCompileFunctionsWithDynamicScope());
//       //  // Unstable assertion: assertEquals(true, context0.isSealed());
//       //  // Unstable assertion: assertEquals(2147483647, context0.getMaximumInterpreterStackDepth());
//       //  // Unstable assertion: assertEquals(true, context0.isGeneratingSource());
//       //  // Unstable assertion: assertEquals(true, context0.isGeneratingDebugChanged());
//       //  // Unstable assertion: assertTrue(context0.generateObserverCount);
//       
//       Node node0 = IRFactory.transformTree(astRoot0, string0, config0, (ErrorReporter) toolErrorReporter0);
//       //  // Unstable assertion: assertNotNull(node0);
//       //  // Unstable assertion: assertEquals("[]", linkedHashSet0.toString());
//       //  // Unstable assertion: assertEquals(true, linkedHashSet0.isEmpty());
//       //  // Unstable assertion: assertEquals(0, linkedHashSet0.size());
//       //  // Unstable assertion: assertEquals(true, toolErrorReporter0.isReportingWarnings());
//       //  // Unstable assertion: assertEquals(false, toolErrorReporter0.hasReportedError());
//       //  // Unstable assertion: assertEquals(0, context0.getInstructionObserverThreshold());
//       //  // Unstable assertion: assertEquals(0, context0.getLanguageVersion());
//       //  // Unstable assertion: assertEquals(true, context0.isGeneratingDebug());
//       //  // Unstable assertion: assertEquals(0, context0.getOptimizationLevel());
//       //  // Unstable assertion: assertEquals(false, context0.hasCompileFunctionsWithDynamicScope());
//       //  // Unstable assertion: assertEquals(true, context0.isSealed());
//       //  // Unstable assertion: assertEquals(2147483647, context0.getMaximumInterpreterStackDepth());
//       //  // Unstable assertion: assertEquals(true, context0.isGeneratingSource());
//       //  // Unstable assertion: assertEquals(true, context0.isGeneratingDebugChanged());
//       //  // Unstable assertion: assertEquals(-1, astRoot0.getEncodedSourceEnd());
//       //  // Unstable assertion: assertEquals(136, astRoot0.getType());
//       //  // Unstable assertion: assertEquals(-1, astRoot0.getEncodedSourceStart());
//       //  // Unstable assertion: assertNull(astRoot0.getEncodedSource());
//       //  // Unstable assertion: assertNull(astRoot0.getSourceName());
//       //  // Unstable assertion: assertEquals(-1, astRoot0.getPosition());
//       //  // Unstable assertion: assertEquals("136", astRoot0.toString());
//       //  // Unstable assertion: assertEquals(0, astRoot0.getParamCount());
//       //  // Unstable assertion: assertEquals(-1, astRoot0.getEndLineno());
//       //  // Unstable assertion: assertEquals(-1, astRoot0.getAbsolutePosition());
//       //  // Unstable assertion: assertEquals(0, astRoot0.getFunctionCount());
//       //  // Unstable assertion: assertEquals(0, astRoot0.depth());
//       //  // Unstable assertion: assertEquals(false, astRoot0.isInStrictMode());
//       //  // Unstable assertion: assertNull(astRoot0.getJsDoc());
//       //  // Unstable assertion: assertEquals(1, astRoot0.getLength());
//       //  // Unstable assertion: assertEquals(-1, astRoot0.getLineno());
//       //  // Unstable assertion: assertEquals(0, astRoot0.getRegexpCount());
//       //  // Unstable assertion: assertEquals(false, astRoot0.hasChildren());
//       //  // Unstable assertion: assertEquals(-1, astRoot0.getBaseLineno());
//       //  // Unstable assertion: assertEquals(false, node0.isUnscopedQualifiedName());
//       //  // Unstable assertion: assertEquals(0, node0.getSideEffectFlags());
//       //  // Unstable assertion: assertEquals(132, node0.getType());
//       //  // Unstable assertion: assertEquals(false, node0.hasOneChild());
//       //  // Unstable assertion: assertEquals(false, node0.hasMoreThanOneChild());
//       //  // Unstable assertion: assertEquals(false, node0.isVarArgs());
//       //  // Unstable assertion: assertEquals(false, node0.isSyntheticBlock());
//       //  // Unstable assertion: assertEquals(false, node0.isOnlyModifiesThisCall());
//       //  // Unstable assertion: assertEquals(-1, node0.getLineno());
//       //  // Unstable assertion: assertEquals(false, node0.isQuotedString());
//       //  // Unstable assertion: assertEquals(false, node0.hasChildren());
//       //  // Unstable assertion: assertEquals(false, node0.isNoSideEffectsCall());
//       //  // Unstable assertion: assertEquals(-1, node0.getCharno());
//       //  // Unstable assertion: assertEquals(false, node0.wasEmptyNode());
//       //  // Unstable assertion: assertEquals(false, node0.isLocalResultCall());
//       //  // Unstable assertion: assertEquals(false, node0.isQualifiedName());
//       //  // Unstable assertion: assertEquals(false, node0.isOptionalArg());
//       //  // Unstable assertion: assertEquals(0, node0.getChildCount());
//       //  // Unstable assertion: assertTrue(context0.generateObserverCount);
//   }

  @Test
  public void test3() {}
//   @Test
//   public void test3()  throws Throwable  {
//       AstRoot astRoot0 = new AstRoot();
//       //  // Unstable assertion: assertNotNull(astRoot0);
//       //  // Unstable assertion: assertNull(astRoot0.getJsDoc());
//       //  // Unstable assertion: assertEquals(0, astRoot0.depth());
//       //  // Unstable assertion: assertNull(astRoot0.getSourceName());
//       //  // Unstable assertion: assertEquals(-1, astRoot0.getPosition());
//       //  // Unstable assertion: assertEquals(-1, astRoot0.getEndLineno());
//       //  // Unstable assertion: assertEquals(-1, astRoot0.getEncodedSourceStart());
//       //  // Unstable assertion: assertEquals(-1, astRoot0.getBaseLineno());
//       //  // Unstable assertion: assertEquals(0, astRoot0.getFunctionCount());
//       //  // Unstable assertion: assertEquals(1, astRoot0.getLength());
//       //  // Unstable assertion: assertEquals(0, astRoot0.getParamCount());
//       //  // Unstable assertion: assertEquals(false, astRoot0.isInStrictMode());
//       //  // Unstable assertion: assertEquals(0, astRoot0.getRegexpCount());
//       //  // Unstable assertion: assertNull(astRoot0.getEncodedSource());
//       //  // Unstable assertion: assertEquals("136", astRoot0.toString());
//       //  // Unstable assertion: assertEquals(136, astRoot0.getType());
//       //  // Unstable assertion: assertEquals(-1, astRoot0.getEncodedSourceEnd());
//       //  // Unstable assertion: assertEquals(-1, astRoot0.getLineno());
//       //  // Unstable assertion: assertEquals(false, astRoot0.hasChildren());
//       //  // Unstable assertion: assertEquals(-1, astRoot0.getAbsolutePosition());
//       
//       int int0 = 431;
//       Name name0 = new Name(int0);
//       //  // Unstable assertion: assertNotNull(name0);
//       //  // Unstable assertion: assertEquals(0, name0.length());
//       //  // Unstable assertion: assertEquals("39", name0.toString());
//       //  // Unstable assertion: assertEquals(39, name0.getType());
//       //  // Unstable assertion: assertEquals(431, name0.getPosition());
//       //  // Unstable assertion: assertNull(name0.getJsDoc());
//       //  // Unstable assertion: assertEquals(-1, name0.getLineno());
//       //  // Unstable assertion: assertEquals(false, name0.hasChildren());
//       //  // Unstable assertion: assertEquals(0, name0.depth());
//       //  // Unstable assertion: assertEquals(1, name0.getLength());
//       //  // Unstable assertion: assertNull(name0.getString());
//       //  // Unstable assertion: assertNull(name0.getIdentifier());
//       //  // Unstable assertion: assertEquals(431, name0.getAbsolutePosition());
//       
//       astRoot0.addChild((AstNode) name0);
//       //  // Unstable assertion: assertNull(astRoot0.getJsDoc());
//       //  // Unstable assertion: assertEquals(true, astRoot0.hasChildren());
//       //  // Unstable assertion: assertEquals(0, astRoot0.depth());
//       //  // Unstable assertion: assertNull(astRoot0.getSourceName());
//       //  // Unstable assertion: assertEquals(-1, astRoot0.getPosition());
//       //  // Unstable assertion: assertEquals(-1, astRoot0.getEndLineno());
//       //  // Unstable assertion: assertEquals(-1, astRoot0.getEncodedSourceStart());
//       //  // Unstable assertion: assertEquals(-1, astRoot0.getBaseLineno());
//       //  // Unstable assertion: assertEquals(0, astRoot0.getFunctionCount());
//       //  // Unstable assertion: assertEquals(0, astRoot0.getParamCount());
//       //  // Unstable assertion: assertEquals(false, astRoot0.isInStrictMode());
//       //  // Unstable assertion: assertEquals(0, astRoot0.getRegexpCount());
//       //  // Unstable assertion: assertNull(astRoot0.getEncodedSource());
//       //  // Unstable assertion: assertEquals("136", astRoot0.toString());
//       //  // Unstable assertion: assertEquals(433, astRoot0.getLength());
//       //  // Unstable assertion: assertEquals(136, astRoot0.getType());
//       //  // Unstable assertion: assertEquals(-1, astRoot0.getEncodedSourceEnd());
//       //  // Unstable assertion: assertEquals(-1, astRoot0.getLineno());
//       //  // Unstable assertion: assertEquals(-1, astRoot0.getAbsolutePosition());
//       //  // Unstable assertion: assertEquals(0, name0.length());
//       //  // Unstable assertion: assertEquals("39", name0.toString());
//       //  // Unstable assertion: assertEquals(432, name0.getPosition());
//       //  // Unstable assertion: assertEquals(39, name0.getType());
//       //  // Unstable assertion: assertEquals(1, name0.depth());
//       //  // Unstable assertion: assertNull(name0.getJsDoc());
//       //  // Unstable assertion: assertEquals(-1, name0.getLineno());
//       //  // Unstable assertion: assertEquals(false, name0.hasChildren());
//       //  // Unstable assertion: assertEquals(1, name0.getLength());
//       //  // Unstable assertion: assertNull(name0.getString());
//       //  // Unstable assertion: assertNull(name0.getIdentifier());
//       //  // Unstable assertion: assertEquals(431, name0.getAbsolutePosition());
//       
//       String string0 = "z";
//       Config config0 = null;
//       Context context0 = Context.getCurrentContext();
//       //  // Unstable assertion: assertNotNull(context0);
//       //  // Unstable assertion: assertEquals(0, context0.getLanguageVersion());
//       //  // Unstable assertion: assertEquals(true, context0.isGeneratingDebug());
//       //  // Unstable assertion: assertEquals(false, context0.hasCompileFunctionsWithDynamicScope());
//       //  // Unstable assertion: assertEquals(2147483647, context0.getMaximumInterpreterStackDepth());
//       //  // Unstable assertion: assertEquals(true, context0.isGeneratingDebugChanged());
//       //  // Unstable assertion: assertEquals(0, context0.getOptimizationLevel());
//       //  // Unstable assertion: assertEquals(0, context0.getInstructionObserverThreshold());
//       //  // Unstable assertion: assertEquals(true, context0.isGeneratingSource());
//       //  // Unstable assertion: assertEquals(true, context0.isSealed());
//       //  // Unstable assertion: assertTrue(context0.generateObserverCount);
//       
//       ToolErrorReporter toolErrorReporter0 = new ToolErrorReporter(context0.generateObserverCount);
//       //  // Unstable assertion: assertNotNull(toolErrorReporter0);
//       //  // Unstable assertion: assertEquals(false, toolErrorReporter0.hasReportedError());
//       //  // Unstable assertion: assertEquals(true, toolErrorReporter0.isReportingWarnings());
//       //  // Unstable assertion: assertEquals(0, context0.getLanguageVersion());
//       //  // Unstable assertion: assertEquals(true, context0.isGeneratingDebug());
//       //  // Unstable assertion: assertEquals(false, context0.hasCompileFunctionsWithDynamicScope());
//       //  // Unstable assertion: assertEquals(2147483647, context0.getMaximumInterpreterStackDepth());
//       //  // Unstable assertion: assertEquals(true, context0.isGeneratingDebugChanged());
//       //  // Unstable assertion: assertEquals(0, context0.getOptimizationLevel());
//       //  // Unstable assertion: assertEquals(0, context0.getInstructionObserverThreshold());
//       //  // Unstable assertion: assertEquals(true, context0.isGeneratingSource());
//       //  // Unstable assertion: assertEquals(true, context0.isSealed());
//       //  // Unstable assertion: assertTrue(context0.generateObserverCount);
//       
//       // Undeclared exception!
//       try {
//         Node node0 = IRFactory.transformTree(astRoot0, string0, config0, (ErrorReporter) toolErrorReporter0);
//        //  fail("Expecting exception: IllegalArgumentException");
//        // Unstable assertion
//       } catch(IllegalArgumentException e) {
//          //
//          // StringNode: str is null
//          //
//       }
//   }

  @Test
  public void test4() {}
//   @Test
//   public void test4()  throws Throwable  {
//       AstRoot astRoot0 = new AstRoot();
//       //  // Unstable assertion: assertNotNull(astRoot0);
//       //  // Unstable assertion: assertEquals(-1, astRoot0.getLineno());
//       //  // Unstable assertion: assertEquals(false, astRoot0.isInStrictMode());
//       //  // Unstable assertion: assertEquals(-1, astRoot0.getAbsolutePosition());
//       //  // Unstable assertion: assertEquals(136, astRoot0.getType());
//       //  // Unstable assertion: assertNull(astRoot0.getEncodedSource());
//       //  // Unstable assertion: assertEquals(0, astRoot0.depth());
//       //  // Unstable assertion: assertEquals(0, astRoot0.getRegexpCount());
//       //  // Unstable assertion: assertEquals(0, astRoot0.getFunctionCount());
//       //  // Unstable assertion: assertEquals("136", astRoot0.toString());
//       //  // Unstable assertion: assertEquals(-1, astRoot0.getEncodedSourceEnd());
//       //  // Unstable assertion: assertEquals(-1, astRoot0.getEncodedSourceStart());
//       //  // Unstable assertion: assertEquals(-1, astRoot0.getEndLineno());
//       //  // Unstable assertion: assertEquals(false, astRoot0.hasChildren());
//       //  // Unstable assertion: assertEquals(0, astRoot0.getParamCount());
//       //  // Unstable assertion: assertEquals(-1, astRoot0.getBaseLineno());
//       //  // Unstable assertion: assertNull(astRoot0.getSourceName());
//       //  // Unstable assertion: assertEquals(1, astRoot0.getLength());
//       //  // Unstable assertion: assertEquals(-1, astRoot0.getPosition());
//       //  // Unstable assertion: assertNull(astRoot0.getJsDoc());
//       
//       int int0 = 3584;
//       Token.CommentType token_CommentType0 = Token.CommentType.JSDOC;
//       String string0 = "DRA|)ETmvMg0,o";
//       Comment comment0 = new Comment(int0, int0, token_CommentType0, string0);
//       //  // Unstable assertion: assertNotNull(comment0);
//       //  // Unstable assertion: assertEquals(161, comment0.getType());
//       //  // Unstable assertion: assertEquals(0, comment0.depth());
//       //  // Unstable assertion: assertEquals("DRA|)ETmvMg0,o", comment0.getValue());
//       //  // Unstable assertion: assertEquals(false, comment0.isParsed());
//       //  // Unstable assertion: assertEquals(3584, comment0.getLength());
//       //  // Unstable assertion: assertEquals(3584, comment0.getPosition());
//       //  // Unstable assertion: assertEquals("161", comment0.toString());
//       //  // Unstable assertion: assertNull(comment0.getJsDoc());
//       //  // Unstable assertion: assertEquals(3584, comment0.getAbsolutePosition());
//       //  // Unstable assertion: assertEquals(Token.CommentType.JSDOC, comment0.getCommentType());
//       //  // Unstable assertion: assertEquals(-1, comment0.getLineno());
//       //  // Unstable assertion: assertEquals(false, comment0.hasChildren());
//       
//       astRoot0.addChild((AstNode) comment0);
//       //  // Unstable assertion: assertEquals(161, comment0.getType());
//       //  // Unstable assertion: assertEquals(3585, comment0.getPosition());
//       //  // Unstable assertion: assertEquals("DRA|)ETmvMg0,o", comment0.getValue());
//       //  // Unstable assertion: assertEquals(false, comment0.isParsed());
//       //  // Unstable assertion: assertEquals(1, comment0.depth());
//       //  // Unstable assertion: assertEquals(3584, comment0.getLength());
//       //  // Unstable assertion: assertEquals("161", comment0.toString());
//       //  // Unstable assertion: assertNull(comment0.getJsDoc());
//       //  // Unstable assertion: assertEquals(3584, comment0.getAbsolutePosition());
//       //  // Unstable assertion: assertEquals(Token.CommentType.JSDOC, comment0.getCommentType());
//       //  // Unstable assertion: assertEquals(-1, comment0.getLineno());
//       //  // Unstable assertion: assertEquals(false, comment0.hasChildren());
//       //  // Unstable assertion: assertEquals(-1, astRoot0.getLineno());
//       //  // Unstable assertion: assertEquals(false, astRoot0.isInStrictMode());
//       //  // Unstable assertion: assertEquals(-1, astRoot0.getAbsolutePosition());
//       //  // Unstable assertion: assertEquals(136, astRoot0.getType());
//       //  // Unstable assertion: assertNull(astRoot0.getEncodedSource());
//       //  // Unstable assertion: assertEquals(0, astRoot0.depth());
//       //  // Unstable assertion: assertEquals(0, astRoot0.getRegexpCount());
//       //  // Unstable assertion: assertEquals(0, astRoot0.getFunctionCount());
//       //  // Unstable assertion: assertEquals("136", astRoot0.toString());
//       //  // Unstable assertion: assertEquals(-1, astRoot0.getEncodedSourceEnd());
//       //  // Unstable assertion: assertEquals(true, astRoot0.hasChildren());
//       //  // Unstable assertion: assertEquals(-1, astRoot0.getEncodedSourceStart());
//       //  // Unstable assertion: assertEquals(-1, astRoot0.getEndLineno());
//       //  // Unstable assertion: assertEquals(0, astRoot0.getParamCount());
//       //  // Unstable assertion: assertEquals(-1, astRoot0.getBaseLineno());
//       //  // Unstable assertion: assertNull(astRoot0.getSourceName());
//       //  // Unstable assertion: assertEquals(7169, astRoot0.getLength());
//       //  // Unstable assertion: assertEquals(-1, astRoot0.getPosition());
//       //  // Unstable assertion: assertNull(astRoot0.getJsDoc());
//       
//       Context context0 = Context.getCurrentContext();
//       //  // Unstable assertion: assertNotNull(context0);
//       //  // Unstable assertion: assertEquals(true, context0.isSealed());
//       //  // Unstable assertion: assertEquals(2147483647, context0.getMaximumInterpreterStackDepth());
//       //  // Unstable assertion: assertEquals(0, context0.getOptimizationLevel());
//       //  // Unstable assertion: assertEquals(0, context0.getLanguageVersion());
//       //  // Unstable assertion: assertEquals(true, context0.isGeneratingDebug());
//       //  // Unstable assertion: assertEquals(true, context0.isGeneratingDebugChanged());
//       //  // Unstable assertion: assertEquals(false, context0.hasCompileFunctionsWithDynamicScope());
//       //  // Unstable assertion: assertEquals(0, context0.getInstructionObserverThreshold());
//       //  // Unstable assertion: assertEquals(true, context0.isGeneratingSource());
//       //  // Unstable assertion: assertTrue(context0.generateObserverCount);
//       
//       LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
//       //  // Unstable assertion: assertNotNull(linkedHashSet0);
//       //  // Unstable assertion: assertEquals(0, linkedHashSet0.size());
//       //  // Unstable assertion: assertEquals(true, linkedHashSet0.isEmpty());
//       //  // Unstable assertion: assertEquals("[]", linkedHashSet0.toString());
//       
//       Config config0 = new Config(linkedHashSet0, linkedHashSet0, context0.generateObserverCount, context0.generateObserverCount);
//       //  // Unstable assertion: assertNotNull(config0);
//       //  // Unstable assertion: assertEquals(true, context0.isSealed());
//       //  // Unstable assertion: assertEquals(2147483647, context0.getMaximumInterpreterStackDepth());
//       //  // Unstable assertion: assertEquals(0, context0.getOptimizationLevel());
//       //  // Unstable assertion: assertEquals(0, context0.getLanguageVersion());
//       //  // Unstable assertion: assertEquals(true, context0.isGeneratingDebug());
//       //  // Unstable assertion: assertEquals(true, context0.isGeneratingDebugChanged());
//       //  // Unstable assertion: assertEquals(false, context0.hasCompileFunctionsWithDynamicScope());
//       //  // Unstable assertion: assertEquals(0, context0.getInstructionObserverThreshold());
//       //  // Unstable assertion: assertEquals(true, context0.isGeneratingSource());
//       //  // Unstable assertion: assertEquals(0, linkedHashSet0.size());
//       //  // Unstable assertion: assertEquals(true, linkedHashSet0.isEmpty());
//       //  // Unstable assertion: assertEquals("[]", linkedHashSet0.toString());
//       //  // Unstable assertion: assertTrue(context0.generateObserverCount);
//       
//       ToolErrorReporter toolErrorReporter0 = new ToolErrorReporter(context0.generateObserverCount);
//       //  // Unstable assertion: assertNotNull(toolErrorReporter0);
//       //  // Unstable assertion: assertEquals(true, toolErrorReporter0.isReportingWarnings());
//       //  // Unstable assertion: assertEquals(false, toolErrorReporter0.hasReportedError());
//       //  // Unstable assertion: assertEquals(true, context0.isSealed());
//       //  // Unstable assertion: assertEquals(2147483647, context0.getMaximumInterpreterStackDepth());
//       //  // Unstable assertion: assertEquals(0, context0.getOptimizationLevel());
//       //  // Unstable assertion: assertEquals(0, context0.getLanguageVersion());
//       //  // Unstable assertion: assertEquals(true, context0.isGeneratingDebug());
//       //  // Unstable assertion: assertEquals(true, context0.isGeneratingDebugChanged());
//       //  // Unstable assertion: assertEquals(false, context0.hasCompileFunctionsWithDynamicScope());
//       //  // Unstable assertion: assertEquals(0, context0.getInstructionObserverThreshold());
//       //  // Unstable assertion: assertEquals(true, context0.isGeneratingSource());
//       //  // Unstable assertion: assertTrue(context0.generateObserverCount);
//       
//       Node node0 = IRFactory.transformTree(astRoot0, string0, config0, (ErrorReporter) toolErrorReporter0);
//       //  // Unstable assertion: assertNotNull(node0);
//       //  // Unstable assertion: assertEquals(true, toolErrorReporter0.isReportingWarnings());
//       //  // Unstable assertion: assertEquals(true, toolErrorReporter0.hasReportedError());
//       //  // Unstable assertion: assertEquals(132, node0.getType());
//       //  // Unstable assertion: assertEquals(false, node0.isVarArgs());
//       //  // Unstable assertion: assertEquals(false, node0.isOptionalArg());
//       //  // Unstable assertion: assertEquals(true, node0.hasOneChild());
//       //  // Unstable assertion: assertEquals(false, node0.isNoSideEffectsCall());
//       //  // Unstable assertion: assertEquals(-1, node0.getCharno());
//       //  // Unstable assertion: assertEquals(1, node0.getChildCount());
//       //  // Unstable assertion: assertEquals(true, node0.hasChildren());
//       //  // Unstable assertion: assertEquals(-1, node0.getLineno());
//       //  // Unstable assertion: assertEquals(false, node0.isUnscopedQualifiedName());
//       //  // Unstable assertion: assertEquals(false, node0.hasMoreThanOneChild());
//       //  // Unstable assertion: assertEquals(false, node0.wasEmptyNode());
//       //  // Unstable assertion: assertEquals(false, node0.isQuotedString());
//       //  // Unstable assertion: assertEquals(0, node0.getSideEffectFlags());
//       //  // Unstable assertion: assertEquals(false, node0.isOnlyModifiesThisCall());
//       //  // Unstable assertion: assertEquals(false, node0.isSyntheticBlock());
//       //  // Unstable assertion: assertEquals(false, node0.isQualifiedName());
//       //  // Unstable assertion: assertEquals(false, node0.isLocalResultCall());
//       //  // Unstable assertion: assertEquals(-1, astRoot0.getLineno());
//       //  // Unstable assertion: assertEquals(false, astRoot0.isInStrictMode());
//       //  // Unstable assertion: assertEquals(-1, astRoot0.getAbsolutePosition());
//       //  // Unstable assertion: assertEquals(136, astRoot0.getType());
//       //  // Unstable assertion: assertNull(astRoot0.getEncodedSource());
//       //  // Unstable assertion: assertEquals(0, astRoot0.depth());
//       //  // Unstable assertion: assertEquals(0, astRoot0.getRegexpCount());
//       //  // Unstable assertion: assertEquals(0, astRoot0.getFunctionCount());
//       //  // Unstable assertion: assertEquals("136", astRoot0.toString());
//       //  // Unstable assertion: assertEquals(-1, astRoot0.getEncodedSourceEnd());
//       //  // Unstable assertion: assertEquals(true, astRoot0.hasChildren());
//       //  // Unstable assertion: assertEquals(-1, astRoot0.getEncodedSourceStart());
//       //  // Unstable assertion: assertEquals(-1, astRoot0.getEndLineno());
//       //  // Unstable assertion: assertEquals(0, astRoot0.getParamCount());
//       //  // Unstable assertion: assertEquals(-1, astRoot0.getBaseLineno());
//       //  // Unstable assertion: assertNull(astRoot0.getSourceName());
//       //  // Unstable assertion: assertEquals(7169, astRoot0.getLength());
//       //  // Unstable assertion: assertEquals(-1, astRoot0.getPosition());
//       //  // Unstable assertion: assertNull(astRoot0.getJsDoc());
//       //  // Unstable assertion: assertEquals(true, context0.isSealed());
//       //  // Unstable assertion: assertEquals(2147483647, context0.getMaximumInterpreterStackDepth());
//       //  // Unstable assertion: assertEquals(0, context0.getOptimizationLevel());
//       //  // Unstable assertion: assertEquals(0, context0.getLanguageVersion());
//       //  // Unstable assertion: assertEquals(true, context0.isGeneratingDebug());
//       //  // Unstable assertion: assertEquals(true, context0.isGeneratingDebugChanged());
//       //  // Unstable assertion: assertEquals(false, context0.hasCompileFunctionsWithDynamicScope());
//       //  // Unstable assertion: assertEquals(0, context0.getInstructionObserverThreshold());
//       //  // Unstable assertion: assertEquals(true, context0.isGeneratingSource());
//       //  // Unstable assertion: assertEquals(0, linkedHashSet0.size());
//       //  // Unstable assertion: assertEquals(true, linkedHashSet0.isEmpty());
//       //  // Unstable assertion: assertEquals("[]", linkedHashSet0.toString());
//       //  // Unstable assertion: assertTrue(context0.generateObserverCount);
//   }
}
