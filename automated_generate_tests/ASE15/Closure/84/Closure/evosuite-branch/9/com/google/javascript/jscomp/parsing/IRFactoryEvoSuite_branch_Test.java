/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 23:52:18 GMT 2014
 */

package com.google.javascript.jscomp.parsing;

import static org.junit.Assert.*;
import org.junit.Test;
import com.google.javascript.jscomp.mozilla.rhino.ErrorReporter;
import com.google.javascript.jscomp.mozilla.rhino.ast.AstNode;
import com.google.javascript.jscomp.mozilla.rhino.ast.AstRoot;
import com.google.javascript.jscomp.mozilla.rhino.ast.BreakStatement;
import com.google.javascript.jscomp.mozilla.rhino.ast.ContinueStatement;
import com.google.javascript.jscomp.mozilla.rhino.ast.LetNode;
import com.google.javascript.jscomp.mozilla.rhino.ast.Name;
import com.google.javascript.jscomp.mozilla.rhino.ast.NewExpression;
import com.google.javascript.jscomp.mozilla.rhino.ast.NumberLiteral;
import com.google.javascript.jscomp.mozilla.rhino.ast.ObjectLiteral;
import com.google.javascript.jscomp.mozilla.rhino.ast.ParenthesizedExpression;
import com.google.javascript.jscomp.mozilla.rhino.ast.Scope;
import com.google.javascript.jscomp.mozilla.rhino.ast.SwitchCase;
import com.google.javascript.jscomp.mozilla.rhino.tools.ToolErrorReporter;
import com.google.javascript.jscomp.parsing.Config;
import com.google.javascript.jscomp.parsing.IRFactory;
import com.google.javascript.rhino.Node;
import java.io.File;
import java.io.PrintStream;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;

import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.junit.runner.RunWith;


public class IRFactoryEvoSuite_branch_Test  {

  @Test
  public void test0()  throws Throwable  {
      AstRoot astRoot0 = new AstRoot();
      assertEquals(false, astRoot0.hasChildren());
      assertNull(astRoot0.getJsDoc());
      assertEquals(-1, astRoot0.getBaseLineno());
      assertEquals(-1, astRoot0.getEncodedSourceEnd());
      assertEquals(-1, astRoot0.getLineno());
      assertEquals(136, astRoot0.getType());
      assertEquals(1, astRoot0.getLength());
      assertEquals(-1, astRoot0.getAbsolutePosition());
      assertEquals(0, astRoot0.getParamCount());
      assertEquals(-1, astRoot0.getEndLineno());
      assertEquals(0, astRoot0.depth());
      assertNull(astRoot0.getSourceName());
      assertEquals(-1, astRoot0.getEncodedSourceStart());
      assertNull(astRoot0.getEncodedSource());
      assertEquals(-1, astRoot0.getPosition());
      assertEquals(0, astRoot0.getFunctionCount());
      assertEquals("136", astRoot0.toString());
      assertEquals(0, astRoot0.getRegexpCount());
      assertEquals(false, astRoot0.isInStrictMode());
      assertNotNull(astRoot0);
      
      SwitchCase switchCase0 = new SwitchCase();
      assertEquals(true, switchCase0.isDefault());
      assertEquals(-1, switchCase0.getLineno());
      assertEquals("115", switchCase0.toString());
      assertEquals(1, switchCase0.getLength());
      assertEquals(0, switchCase0.depth());
      assertEquals(-1, switchCase0.getAbsolutePosition());
      assertEquals(false, switchCase0.hasChildren());
      assertEquals(-1, switchCase0.getPosition());
      assertEquals(115, switchCase0.getType());
      assertNull(switchCase0.getJsDoc());
      assertNotNull(switchCase0);
      
      astRoot0.addChild((AstNode) switchCase0);
      assertEquals(true, switchCase0.isDefault());
      assertEquals(-1, switchCase0.getLineno());
      assertEquals(1, switchCase0.depth());
      assertEquals("115", switchCase0.toString());
      assertEquals(1, switchCase0.getLength());
      assertEquals(-1, switchCase0.getAbsolutePosition());
      assertEquals(false, switchCase0.hasChildren());
      assertEquals(115, switchCase0.getType());
      assertEquals(0, switchCase0.getPosition());
      assertNull(switchCase0.getJsDoc());
      assertNull(astRoot0.getJsDoc());
      assertEquals(-1, astRoot0.getBaseLineno());
      assertEquals(-1, astRoot0.getEncodedSourceEnd());
      assertEquals(-1, astRoot0.getLineno());
      assertEquals(136, astRoot0.getType());
      assertEquals(1, astRoot0.getLength());
      assertEquals(-1, astRoot0.getAbsolutePosition());
      assertEquals(0, astRoot0.getParamCount());
      assertEquals(-1, astRoot0.getEndLineno());
      assertEquals(0, astRoot0.depth());
      assertNull(astRoot0.getSourceName());
      assertEquals(-1, astRoot0.getEncodedSourceStart());
      assertNull(astRoot0.getEncodedSource());
      assertEquals(-1, astRoot0.getPosition());
      assertEquals(0, astRoot0.getFunctionCount());
      assertEquals("136", astRoot0.toString());
      assertEquals(true, astRoot0.hasChildren());
      assertEquals(0, astRoot0.getRegexpCount());
      assertEquals(false, astRoot0.isInStrictMode());
      
      String string0 = "yb>m2";
      Config config0 = null;
      boolean boolean0 = true;
      PrintStream printStream0 = null;
      ToolErrorReporter toolErrorReporter0 = new ToolErrorReporter(boolean0, printStream0);
      assertEquals(false, toolErrorReporter0.hasReportedError());
      assertEquals(true, toolErrorReporter0.isReportingWarnings());
      assertNotNull(toolErrorReporter0);
      
      Node node0 = IRFactory.transformTree(astRoot0, string0, config0, (ErrorReporter) toolErrorReporter0);
      assertEquals(false, toolErrorReporter0.hasReportedError());
      assertEquals(true, toolErrorReporter0.isReportingWarnings());
      assertEquals(true, node0.hasChildren());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isVarArgs());
      assertEquals(true, node0.hasOneChild());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(1, node0.getChildCount());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(-1, node0.getLineno());
      assertEquals(132, node0.getType());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isLocalResultCall());
      assertNull(astRoot0.getJsDoc());
      assertEquals(-1, astRoot0.getBaseLineno());
      assertEquals(-1, astRoot0.getEncodedSourceEnd());
      assertEquals(-1, astRoot0.getLineno());
      assertEquals(136, astRoot0.getType());
      assertEquals(1, astRoot0.getLength());
      assertEquals(-1, astRoot0.getAbsolutePosition());
      assertEquals(0, astRoot0.getParamCount());
      assertEquals(-1, astRoot0.getEndLineno());
      assertEquals(0, astRoot0.depth());
      assertNull(astRoot0.getSourceName());
      assertEquals(-1, astRoot0.getEncodedSourceStart());
      assertNull(astRoot0.getEncodedSource());
      assertEquals(-1, astRoot0.getPosition());
      assertEquals(0, astRoot0.getFunctionCount());
      assertEquals("136", astRoot0.toString());
      assertEquals(true, astRoot0.hasChildren());
      assertEquals(0, astRoot0.getRegexpCount());
      assertEquals(false, astRoot0.isInStrictMode());
      assertNotNull(node0);
  }

  @Test
  public void test1()  throws Throwable  {
      AstRoot astRoot0 = new AstRoot();
      assertEquals(0, astRoot0.getParamCount());
      assertEquals(-1, astRoot0.getPosition());
      assertEquals(false, astRoot0.hasChildren());
      assertEquals(1, astRoot0.getLength());
      assertEquals("136", astRoot0.toString());
      assertEquals(-1, astRoot0.getAbsolutePosition());
      assertEquals(-1, astRoot0.getLineno());
      assertEquals(0, astRoot0.getRegexpCount());
      assertEquals(0, astRoot0.getFunctionCount());
      assertEquals(0, astRoot0.depth());
      assertNull(astRoot0.getJsDoc());
      assertEquals(-1, astRoot0.getEncodedSourceStart());
      assertEquals(-1, astRoot0.getBaseLineno());
      assertNull(astRoot0.getSourceName());
      assertNull(astRoot0.getEncodedSource());
      assertEquals(-1, astRoot0.getEndLineno());
      assertEquals(false, astRoot0.isInStrictMode());
      assertEquals(-1, astRoot0.getEncodedSourceEnd());
      assertEquals(136, astRoot0.getType());
      assertNotNull(astRoot0);
      
      int int0 = 0;
      ObjectLiteral objectLiteral0 = new ObjectLiteral(int0);
      assertEquals(false, objectLiteral0.isDestructuring());
      assertNull(objectLiteral0.getJsDoc());
      assertEquals(false, objectLiteral0.hasChildren());
      assertEquals(0, objectLiteral0.depth());
      assertEquals(-1, objectLiteral0.getLineno());
      assertEquals(1, objectLiteral0.getLength());
      assertEquals(0, objectLiteral0.getAbsolutePosition());
      assertEquals(66, objectLiteral0.getType());
      assertEquals(0, objectLiteral0.getPosition());
      assertEquals("66", objectLiteral0.toString());
      assertNotNull(objectLiteral0);
      
      astRoot0.addChild((AstNode) objectLiteral0);
      assertEquals(0, astRoot0.getParamCount());
      assertEquals(-1, astRoot0.getPosition());
      assertEquals("136", astRoot0.toString());
      assertEquals(2, astRoot0.getLength());
      assertEquals(-1, astRoot0.getAbsolutePosition());
      assertEquals(-1, astRoot0.getLineno());
      assertEquals(0, astRoot0.getRegexpCount());
      assertEquals(0, astRoot0.getFunctionCount());
      assertEquals(0, astRoot0.depth());
      assertNull(astRoot0.getJsDoc());
      assertEquals(true, astRoot0.hasChildren());
      assertEquals(-1, astRoot0.getEncodedSourceStart());
      assertEquals(-1, astRoot0.getBaseLineno());
      assertNull(astRoot0.getSourceName());
      assertNull(astRoot0.getEncodedSource());
      assertEquals(-1, astRoot0.getEndLineno());
      assertEquals(false, astRoot0.isInStrictMode());
      assertEquals(-1, astRoot0.getEncodedSourceEnd());
      assertEquals(136, astRoot0.getType());
      assertEquals(false, objectLiteral0.isDestructuring());
      assertNull(objectLiteral0.getJsDoc());
      assertEquals(false, objectLiteral0.hasChildren());
      assertEquals(-1, objectLiteral0.getLineno());
      assertEquals(1, objectLiteral0.getLength());
      assertEquals(0, objectLiteral0.getAbsolutePosition());
      assertEquals(66, objectLiteral0.getType());
      assertEquals(1, objectLiteral0.getPosition());
      assertEquals("66", objectLiteral0.toString());
      assertEquals(1, objectLiteral0.depth());
      
      String string0 = "xx`^P";
      Config config0 = null;
      ErrorReporter errorReporter0 = null;
      Node node0 = IRFactory.transformTree(astRoot0, string0, config0, errorReporter0);
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(true, node0.hasOneChild());
      assertEquals(false, node0.isVarArgs());
      assertEquals(132, node0.getType());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(true, node0.hasChildren());
      assertEquals(false, node0.isQuotedString());
      assertEquals(1, node0.getChildCount());
      assertEquals(-1, node0.getCharno());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(0, astRoot0.getParamCount());
      assertEquals(-1, astRoot0.getPosition());
      assertEquals("136", astRoot0.toString());
      assertEquals(2, astRoot0.getLength());
      assertEquals(-1, astRoot0.getAbsolutePosition());
      assertEquals(-1, astRoot0.getLineno());
      assertEquals(0, astRoot0.getRegexpCount());
      assertEquals(0, astRoot0.getFunctionCount());
      assertEquals(0, astRoot0.depth());
      assertNull(astRoot0.getJsDoc());
      assertEquals(true, astRoot0.hasChildren());
      assertEquals(-1, astRoot0.getEncodedSourceStart());
      assertEquals(-1, astRoot0.getBaseLineno());
      assertNull(astRoot0.getSourceName());
      assertNull(astRoot0.getEncodedSource());
      assertEquals(-1, astRoot0.getEndLineno());
      assertEquals(false, astRoot0.isInStrictMode());
      assertEquals(-1, astRoot0.getEncodedSourceEnd());
      assertEquals(136, astRoot0.getType());
      assertNotNull(node0);
  }

  @Test
  public void test2()  throws Throwable  {
      boolean boolean0 = true;
      AstRoot astRoot0 = new AstRoot();
      assertEquals(-1, astRoot0.getAbsolutePosition());
      assertEquals(0, astRoot0.getParamCount());
      assertEquals(-1, astRoot0.getLineno());
      assertEquals(0, astRoot0.getRegexpCount());
      assertEquals("136", astRoot0.toString());
      assertEquals(0, astRoot0.getFunctionCount());
      assertNull(astRoot0.getEncodedSource());
      assertEquals(-1, astRoot0.getEncodedSourceStart());
      assertEquals(0, astRoot0.depth());
      assertEquals(false, astRoot0.hasChildren());
      assertNull(astRoot0.getSourceName());
      assertNull(astRoot0.getJsDoc());
      assertEquals(136, astRoot0.getType());
      assertEquals(1, astRoot0.getLength());
      assertEquals(-1, astRoot0.getBaseLineno());
      assertEquals(-1, astRoot0.getEndLineno());
      assertEquals(-1, astRoot0.getPosition());
      assertEquals(false, astRoot0.isInStrictMode());
      assertEquals(-1, astRoot0.getEncodedSourceEnd());
      assertNotNull(astRoot0);
      
      int int0 = 1189;
      String string0 = "xrT/2";
      NewExpression newExpression0 = new NewExpression();
      assertEquals(-1, newExpression0.getLineno());
      assertEquals(1, newExpression0.getLength());
      assertEquals(false, newExpression0.hasChildren());
      assertEquals(30, newExpression0.getType());
      assertEquals(-1, newExpression0.getRp());
      assertNull(newExpression0.getJsDoc());
      assertEquals("30", newExpression0.toString());
      assertEquals(-1, newExpression0.getLp());
      assertEquals(-1, newExpression0.getAbsolutePosition());
      assertEquals(-1, newExpression0.getPosition());
      assertEquals(0, newExpression0.depth());
      assertNotNull(newExpression0);
      
      Scope scope0 = new Scope(int0);
      assertEquals(false, scope0.hasChildren());
      assertEquals(1, scope0.getLength());
      assertEquals(0, scope0.depth());
      assertEquals(1189, scope0.getPosition());
      assertNull(scope0.getJsDoc());
      assertEquals(-1, scope0.getLineno());
      assertEquals("129", scope0.toString());
      assertEquals(129, scope0.getType());
      assertEquals(1189, scope0.getAbsolutePosition());
      assertNotNull(scope0);
      
      newExpression0.setTarget((AstNode) scope0);
      assertEquals(false, scope0.hasChildren());
      assertEquals(1, scope0.depth());
      assertEquals(1, scope0.getLength());
      assertNull(scope0.getJsDoc());
      assertEquals(1190, scope0.getPosition());
      assertEquals(-1, scope0.getLineno());
      assertEquals("129", scope0.toString());
      assertEquals(129, scope0.getType());
      assertEquals(1189, scope0.getAbsolutePosition());
      assertEquals(-1, newExpression0.getLineno());
      assertEquals(1, newExpression0.getLength());
      assertEquals(false, newExpression0.hasChildren());
      assertEquals(30, newExpression0.getType());
      assertEquals(-1, newExpression0.getRp());
      assertNull(newExpression0.getJsDoc());
      assertEquals("30", newExpression0.toString());
      assertEquals(-1, newExpression0.getLp());
      assertEquals(-1, newExpression0.getAbsolutePosition());
      assertEquals(-1, newExpression0.getPosition());
      assertEquals(0, newExpression0.depth());
      
      astRoot0.addChildrenToFront((com.google.javascript.jscomp.mozilla.rhino.Node) newExpression0);
      assertEquals(-1, astRoot0.getAbsolutePosition());
      assertEquals(0, astRoot0.getParamCount());
      assertEquals(-1, astRoot0.getLineno());
      assertEquals(0, astRoot0.getRegexpCount());
      assertEquals("136", astRoot0.toString());
      assertEquals(0, astRoot0.getFunctionCount());
      assertNull(astRoot0.getEncodedSource());
      assertEquals(-1, astRoot0.getEncodedSourceStart());
      assertEquals(0, astRoot0.depth());
      assertNull(astRoot0.getSourceName());
      assertNull(astRoot0.getJsDoc());
      assertEquals(136, astRoot0.getType());
      assertEquals(1, astRoot0.getLength());
      assertEquals(-1, astRoot0.getBaseLineno());
      assertEquals(-1, astRoot0.getEndLineno());
      assertEquals(true, astRoot0.hasChildren());
      assertEquals(-1, astRoot0.getPosition());
      assertEquals(false, astRoot0.isInStrictMode());
      assertEquals(-1, astRoot0.getEncodedSourceEnd());
      assertEquals(-1, newExpression0.getLineno());
      assertEquals(1, newExpression0.getLength());
      assertEquals(false, newExpression0.hasChildren());
      assertEquals(30, newExpression0.getType());
      assertEquals(-1, newExpression0.getRp());
      assertNull(newExpression0.getJsDoc());
      assertEquals("30", newExpression0.toString());
      assertEquals(-1, newExpression0.getLp());
      assertEquals(-1, newExpression0.getAbsolutePosition());
      assertEquals(-1, newExpression0.getPosition());
      assertEquals(0, newExpression0.depth());
      
      newExpression0.addArgument((AstNode) scope0);
      assertEquals(false, scope0.hasChildren());
      assertEquals(1, scope0.depth());
      assertEquals(1, scope0.getLength());
      assertNull(scope0.getJsDoc());
      assertEquals(1190, scope0.getPosition());
      assertEquals(-1, scope0.getLineno());
      assertEquals("129", scope0.toString());
      assertEquals(129, scope0.getType());
      assertEquals(1189, scope0.getAbsolutePosition());
      assertEquals(-1, newExpression0.getLineno());
      assertEquals(1, newExpression0.getLength());
      assertEquals(false, newExpression0.hasChildren());
      assertEquals(30, newExpression0.getType());
      assertEquals(-1, newExpression0.getRp());
      assertNull(newExpression0.getJsDoc());
      assertEquals("30", newExpression0.toString());
      assertEquals(-1, newExpression0.getLp());
      assertEquals(-1, newExpression0.getAbsolutePosition());
      assertEquals(-1, newExpression0.getPosition());
      assertEquals(0, newExpression0.depth());
      
      Config config0 = null;
      PrintStream printStream0 = null;
      ToolErrorReporter toolErrorReporter0 = new ToolErrorReporter(boolean0, printStream0);
      assertEquals(true, toolErrorReporter0.isReportingWarnings());
      assertEquals(false, toolErrorReporter0.hasReportedError());
      assertNotNull(toolErrorReporter0);
      
      Node node0 = IRFactory.transformTree(astRoot0, string0, config0, (ErrorReporter) toolErrorReporter0);
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(true, node0.hasOneChild());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(1, node0.getChildCount());
      assertEquals(132, node0.getType());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(-1, node0.getLineno());
      assertEquals(true, node0.hasChildren());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(-1, astRoot0.getAbsolutePosition());
      assertEquals(0, astRoot0.getParamCount());
      assertEquals(-1, astRoot0.getLineno());
      assertEquals(0, astRoot0.getRegexpCount());
      assertEquals("136", astRoot0.toString());
      assertEquals(0, astRoot0.getFunctionCount());
      assertNull(astRoot0.getEncodedSource());
      assertEquals(-1, astRoot0.getEncodedSourceStart());
      assertEquals(0, astRoot0.depth());
      assertNull(astRoot0.getSourceName());
      assertNull(astRoot0.getJsDoc());
      assertEquals(136, astRoot0.getType());
      assertEquals(1, astRoot0.getLength());
      assertEquals(-1, astRoot0.getBaseLineno());
      assertEquals(-1, astRoot0.getEndLineno());
      assertEquals(true, astRoot0.hasChildren());
      assertEquals(-1, astRoot0.getPosition());
      assertEquals(false, astRoot0.isInStrictMode());
      assertEquals(-1, astRoot0.getEncodedSourceEnd());
      assertEquals(true, toolErrorReporter0.isReportingWarnings());
      assertEquals(false, toolErrorReporter0.hasReportedError());
      assertNotNull(node0);
  }

  @Test
  public void test3()  throws Throwable  {
      AstRoot astRoot0 = new AstRoot();
      assertEquals(false, astRoot0.hasChildren());
      assertEquals(false, astRoot0.isInStrictMode());
      assertNull(astRoot0.getEncodedSource());
      assertNull(astRoot0.getJsDoc());
      assertNull(astRoot0.getSourceName());
      assertEquals(-1, astRoot0.getEndLineno());
      assertEquals(136, astRoot0.getType());
      assertEquals(-1, astRoot0.getEncodedSourceEnd());
      assertEquals(0, astRoot0.getRegexpCount());
      assertEquals("136", astRoot0.toString());
      assertEquals(0, astRoot0.depth());
      assertEquals(0, astRoot0.getFunctionCount());
      assertEquals(1, astRoot0.getLength());
      assertEquals(-1, astRoot0.getPosition());
      assertEquals(-1, astRoot0.getEncodedSourceStart());
      assertEquals(-1, astRoot0.getBaseLineno());
      assertEquals(0, astRoot0.getParamCount());
      assertEquals(-1, astRoot0.getAbsolutePosition());
      assertEquals(-1, astRoot0.getLineno());
      assertNotNull(astRoot0);
      
      int int0 = 821;
      BreakStatement breakStatement0 = new BreakStatement();
      assertEquals("120", breakStatement0.toString());
      assertEquals(0, breakStatement0.depth());
      assertEquals(1, breakStatement0.getLength());
      assertEquals(-1, breakStatement0.getPosition());
      assertEquals(120, breakStatement0.getType());
      assertEquals(-1, breakStatement0.getAbsolutePosition());
      assertEquals(-1, breakStatement0.getLineno());
      assertEquals(false, breakStatement0.hasChildren());
      assertNull(breakStatement0.getJsDoc());
      assertNotNull(breakStatement0);
      
      Name name0 = breakStatement0.getBreakLabel();
      assertEquals("120", breakStatement0.toString());
      assertEquals(0, breakStatement0.depth());
      assertEquals(1, breakStatement0.getLength());
      assertEquals(-1, breakStatement0.getPosition());
      assertEquals(120, breakStatement0.getType());
      assertEquals(-1, breakStatement0.getAbsolutePosition());
      assertEquals(-1, breakStatement0.getLineno());
      assertEquals(false, breakStatement0.hasChildren());
      assertNull(breakStatement0.getJsDoc());
      assertNull(name0);
      
      ContinueStatement continueStatement0 = new ContinueStatement(int0, name0);
      assertEquals("120", breakStatement0.toString());
      assertEquals(0, breakStatement0.depth());
      assertEquals(1, breakStatement0.getLength());
      assertEquals(-1, breakStatement0.getPosition());
      assertEquals(120, breakStatement0.getType());
      assertEquals(-1, breakStatement0.getAbsolutePosition());
      assertEquals(-1, breakStatement0.getLineno());
      assertEquals(false, breakStatement0.hasChildren());
      assertNull(breakStatement0.getJsDoc());
      assertEquals(-1, continueStatement0.getLineno());
      assertEquals(821, continueStatement0.getAbsolutePosition());
      assertEquals(false, continueStatement0.hasChildren());
      assertEquals(0, continueStatement0.depth());
      assertEquals("121", continueStatement0.toString());
      assertNull(continueStatement0.getJsDoc());
      assertEquals(121, continueStatement0.getType());
      assertEquals(821, continueStatement0.getPosition());
      assertEquals(-1, continueStatement0.getLength());
      assertNotNull(continueStatement0);
      
      ContinueStatement continueStatement1 = (ContinueStatement)continueStatement0.getLastSibling();
      assertSame(continueStatement1, continueStatement0);
      assertSame(continueStatement0, continueStatement1);
      assertEquals(false, continueStatement1.hasChildren());
      assertEquals(121, continueStatement1.getType());
      assertEquals(821, continueStatement1.getPosition());
      assertEquals(0, continueStatement1.depth());
      assertNull(continueStatement1.getJsDoc());
      assertEquals(-1, continueStatement1.getLength());
      assertEquals(821, continueStatement1.getAbsolutePosition());
      assertEquals(-1, continueStatement1.getLineno());
      assertEquals("121", continueStatement1.toString());
      assertEquals("120", breakStatement0.toString());
      assertEquals(0, breakStatement0.depth());
      assertEquals(1, breakStatement0.getLength());
      assertEquals(-1, breakStatement0.getPosition());
      assertEquals(120, breakStatement0.getType());
      assertEquals(-1, breakStatement0.getAbsolutePosition());
      assertEquals(-1, breakStatement0.getLineno());
      assertEquals(false, breakStatement0.hasChildren());
      assertNull(breakStatement0.getJsDoc());
      assertEquals(-1, continueStatement0.getLineno());
      assertEquals(821, continueStatement0.getAbsolutePosition());
      assertEquals(false, continueStatement0.hasChildren());
      assertEquals(0, continueStatement0.depth());
      assertEquals("121", continueStatement0.toString());
      assertNull(continueStatement0.getJsDoc());
      assertEquals(121, continueStatement0.getType());
      assertEquals(821, continueStatement0.getPosition());
      assertEquals(-1, continueStatement0.getLength());
      assertNotNull(continueStatement1);
      
      astRoot0.addChildBefore((com.google.javascript.jscomp.mozilla.rhino.Node) continueStatement1, (com.google.javascript.jscomp.mozilla.rhino.Node) name0);
      assertSame(continueStatement1, continueStatement0);
      assertSame(continueStatement0, continueStatement1);
      assertEquals(false, continueStatement1.hasChildren());
      assertEquals(121, continueStatement1.getType());
      assertEquals(821, continueStatement1.getPosition());
      assertEquals(0, continueStatement1.depth());
      assertNull(continueStatement1.getJsDoc());
      assertEquals(-1, continueStatement1.getLength());
      assertEquals(821, continueStatement1.getAbsolutePosition());
      assertEquals(-1, continueStatement1.getLineno());
      assertEquals("121", continueStatement1.toString());
      assertEquals("120", breakStatement0.toString());
      assertEquals(0, breakStatement0.depth());
      assertEquals(1, breakStatement0.getLength());
      assertEquals(-1, breakStatement0.getPosition());
      assertEquals(120, breakStatement0.getType());
      assertEquals(-1, breakStatement0.getAbsolutePosition());
      assertEquals(-1, breakStatement0.getLineno());
      assertEquals(false, breakStatement0.hasChildren());
      assertNull(breakStatement0.getJsDoc());
      assertEquals(true, astRoot0.hasChildren());
      assertEquals(false, astRoot0.isInStrictMode());
      assertNull(astRoot0.getEncodedSource());
      assertNull(astRoot0.getJsDoc());
      assertNull(astRoot0.getSourceName());
      assertEquals(-1, astRoot0.getEndLineno());
      assertEquals(136, astRoot0.getType());
      assertEquals(-1, astRoot0.getEncodedSourceEnd());
      assertEquals(0, astRoot0.getRegexpCount());
      assertEquals("136", astRoot0.toString());
      assertEquals(0, astRoot0.depth());
      assertEquals(0, astRoot0.getFunctionCount());
      assertEquals(1, astRoot0.getLength());
      assertEquals(-1, astRoot0.getPosition());
      assertEquals(-1, astRoot0.getEncodedSourceStart());
      assertEquals(-1, astRoot0.getBaseLineno());
      assertEquals(0, astRoot0.getParamCount());
      assertEquals(-1, astRoot0.getAbsolutePosition());
      assertEquals(-1, astRoot0.getLineno());
      assertEquals(-1, continueStatement0.getLineno());
      assertEquals(821, continueStatement0.getAbsolutePosition());
      assertEquals(false, continueStatement0.hasChildren());
      assertEquals(0, continueStatement0.depth());
      assertEquals("121", continueStatement0.toString());
      assertNull(continueStatement0.getJsDoc());
      assertEquals(121, continueStatement0.getType());
      assertEquals(821, continueStatement0.getPosition());
      assertEquals(-1, continueStatement0.getLength());
      
      String string0 = "eeeP";
      boolean boolean0 = false;
      Config config0 = null;
      MockFile mockFile0 = new MockFile(string0, string0);
      assertNotNull(mockFile0);
      
      MockPrintStream mockPrintStream0 = new MockPrintStream((File) mockFile0);
      assertNotNull(mockPrintStream0);
      
      ToolErrorReporter toolErrorReporter0 = new ToolErrorReporter(boolean0, (PrintStream) mockPrintStream0);
      assertEquals(false, toolErrorReporter0.hasReportedError());
      assertEquals(false, toolErrorReporter0.isReportingWarnings());
      assertNotNull(toolErrorReporter0);
      
      Node node0 = IRFactory.transformTree(astRoot0, string0, config0, (ErrorReporter) toolErrorReporter0);
      assertEquals(1, node0.getChildCount());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(true, node0.hasChildren());
      assertEquals(false, node0.isVarArgs());
      assertEquals(132, node0.getType());
      assertEquals(true, node0.hasOneChild());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, toolErrorReporter0.hasReportedError());
      assertEquals(false, toolErrorReporter0.isReportingWarnings());
      assertEquals(true, astRoot0.hasChildren());
      assertEquals(false, astRoot0.isInStrictMode());
      assertNull(astRoot0.getEncodedSource());
      assertNull(astRoot0.getJsDoc());
      assertNull(astRoot0.getSourceName());
      assertEquals(-1, astRoot0.getEndLineno());
      assertEquals(136, astRoot0.getType());
      assertEquals(-1, astRoot0.getEncodedSourceEnd());
      assertEquals(0, astRoot0.getRegexpCount());
      assertEquals("136", astRoot0.toString());
      assertEquals(0, astRoot0.depth());
      assertEquals(0, astRoot0.getFunctionCount());
      assertEquals(1, astRoot0.getLength());
      assertEquals(-1, astRoot0.getPosition());
      assertEquals(-1, astRoot0.getEncodedSourceStart());
      assertEquals(-1, astRoot0.getBaseLineno());
      assertEquals(0, astRoot0.getParamCount());
      assertEquals(-1, astRoot0.getAbsolutePosition());
      assertEquals(-1, astRoot0.getLineno());
      assertNotNull(node0);
  }

  @Test
  public void test4()  throws Throwable  {
      AstRoot astRoot0 = new AstRoot();
      assertEquals(0, astRoot0.getParamCount());
      assertNull(astRoot0.getSourceName());
      assertEquals(1, astRoot0.getLength());
      assertEquals(-1, astRoot0.getPosition());
      assertEquals(0, astRoot0.depth());
      assertEquals(false, astRoot0.isInStrictMode());
      assertEquals(-1, astRoot0.getAbsolutePosition());
      assertEquals(-1, astRoot0.getEncodedSourceStart());
      assertEquals(136, astRoot0.getType());
      assertEquals(-1, astRoot0.getBaseLineno());
      assertEquals("136", astRoot0.toString());
      assertEquals(-1, astRoot0.getLineno());
      assertNull(astRoot0.getEncodedSource());
      assertNull(astRoot0.getJsDoc());
      assertEquals(0, astRoot0.getRegexpCount());
      assertEquals(false, astRoot0.hasChildren());
      assertEquals(-1, astRoot0.getEncodedSourceEnd());
      assertEquals(-1, astRoot0.getEndLineno());
      assertEquals(0, astRoot0.getFunctionCount());
      assertNotNull(astRoot0);
      
      BreakStatement breakStatement0 = new BreakStatement();
      assertEquals(-1, breakStatement0.getLineno());
      assertEquals(-1, breakStatement0.getPosition());
      assertEquals(120, breakStatement0.getType());
      assertEquals(-1, breakStatement0.getAbsolutePosition());
      assertNull(breakStatement0.getJsDoc());
      assertEquals(0, breakStatement0.depth());
      assertEquals(false, breakStatement0.hasChildren());
      assertEquals(1, breakStatement0.getLength());
      assertEquals("120", breakStatement0.toString());
      assertNotNull(breakStatement0);
      
      String string0 = "eeeP";
      boolean boolean0 = true;
      Config config0 = null;
      astRoot0.addChild((AstNode) breakStatement0);
      assertEquals(-1, breakStatement0.getLineno());
      assertEquals(120, breakStatement0.getType());
      assertEquals(-1, breakStatement0.getAbsolutePosition());
      assertNull(breakStatement0.getJsDoc());
      assertEquals(false, breakStatement0.hasChildren());
      assertEquals(1, breakStatement0.depth());
      assertEquals(1, breakStatement0.getLength());
      assertEquals(0, breakStatement0.getPosition());
      assertEquals("120", breakStatement0.toString());
      assertEquals(0, astRoot0.getParamCount());
      assertNull(astRoot0.getSourceName());
      assertEquals(1, astRoot0.getLength());
      assertEquals(-1, astRoot0.getPosition());
      assertEquals(true, astRoot0.hasChildren());
      assertEquals(0, astRoot0.depth());
      assertEquals(false, astRoot0.isInStrictMode());
      assertEquals(-1, astRoot0.getAbsolutePosition());
      assertEquals(-1, astRoot0.getEncodedSourceStart());
      assertEquals(136, astRoot0.getType());
      assertEquals(-1, astRoot0.getBaseLineno());
      assertEquals("136", astRoot0.toString());
      assertEquals(-1, astRoot0.getLineno());
      assertNull(astRoot0.getEncodedSource());
      assertNull(astRoot0.getJsDoc());
      assertEquals(0, astRoot0.getRegexpCount());
      assertEquals(-1, astRoot0.getEncodedSourceEnd());
      assertEquals(-1, astRoot0.getEndLineno());
      assertEquals(0, astRoot0.getFunctionCount());
      
      MockFile mockFile0 = new MockFile(string0, string0);
      assertNotNull(mockFile0);
      
      MockPrintStream mockPrintStream0 = new MockPrintStream((File) mockFile0);
      assertNotNull(mockPrintStream0);
      
      ToolErrorReporter toolErrorReporter0 = new ToolErrorReporter(boolean0, (PrintStream) mockPrintStream0);
      assertEquals(false, toolErrorReporter0.hasReportedError());
      assertEquals(true, toolErrorReporter0.isReportingWarnings());
      assertNotNull(toolErrorReporter0);
      
      Node node0 = IRFactory.transformTree(astRoot0, string0, config0, (ErrorReporter) toolErrorReporter0);
      assertEquals(false, toolErrorReporter0.hasReportedError());
      assertEquals(true, toolErrorReporter0.isReportingWarnings());
      assertEquals(1, node0.getChildCount());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(true, node0.hasChildren());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isQuotedString());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(true, node0.hasOneChild());
      assertEquals(132, node0.getType());
      assertEquals(false, node0.isVarArgs());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(0, astRoot0.getParamCount());
      assertNull(astRoot0.getSourceName());
      assertEquals(1, astRoot0.getLength());
      assertEquals(-1, astRoot0.getPosition());
      assertEquals(true, astRoot0.hasChildren());
      assertEquals(0, astRoot0.depth());
      assertEquals(false, astRoot0.isInStrictMode());
      assertEquals(-1, astRoot0.getAbsolutePosition());
      assertEquals(-1, astRoot0.getEncodedSourceStart());
      assertEquals(136, astRoot0.getType());
      assertEquals(-1, astRoot0.getBaseLineno());
      assertEquals("136", astRoot0.toString());
      assertEquals(-1, astRoot0.getLineno());
      assertNull(astRoot0.getEncodedSource());
      assertNull(astRoot0.getJsDoc());
      assertEquals(0, astRoot0.getRegexpCount());
      assertEquals(-1, astRoot0.getEncodedSourceEnd());
      assertEquals(-1, astRoot0.getEndLineno());
      assertEquals(0, astRoot0.getFunctionCount());
      assertNotNull(node0);
  }

  @Test
  public void test5()  throws Throwable  {
      AstRoot astRoot0 = new AstRoot();
      assertNull(astRoot0.getSourceName());
      assertEquals(136, astRoot0.getType());
      assertEquals(-1, astRoot0.getLineno());
      assertEquals(0, astRoot0.depth());
      assertEquals(0, astRoot0.getFunctionCount());
      assertEquals(-1, astRoot0.getEndLineno());
      assertNull(astRoot0.getJsDoc());
      assertEquals("136", astRoot0.toString());
      assertEquals(1, astRoot0.getLength());
      assertEquals(0, astRoot0.getParamCount());
      assertNull(astRoot0.getEncodedSource());
      assertEquals(-1, astRoot0.getEncodedSourceEnd());
      assertEquals(-1, astRoot0.getPosition());
      assertEquals(0, astRoot0.getRegexpCount());
      assertEquals(false, astRoot0.hasChildren());
      assertEquals(-1, astRoot0.getBaseLineno());
      assertEquals(false, astRoot0.isInStrictMode());
      assertEquals(-1, astRoot0.getAbsolutePosition());
      assertEquals(-1, astRoot0.getEncodedSourceStart());
      assertNotNull(astRoot0);
      
      String string0 = "]ycoir}YIT";
      Config config0 = null;
      ErrorReporter errorReporter0 = null;
      Node node0 = IRFactory.transformTree(astRoot0, string0, config0, errorReporter0);
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(132, node0.getType());
      assertEquals(false, node0.isQuotedString());
      assertEquals(-1, node0.getLineno());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isSyntheticBlock());
      assertNull(astRoot0.getSourceName());
      assertEquals(136, astRoot0.getType());
      assertEquals(-1, astRoot0.getLineno());
      assertEquals(0, astRoot0.depth());
      assertEquals(0, astRoot0.getFunctionCount());
      assertEquals(-1, astRoot0.getEndLineno());
      assertNull(astRoot0.getJsDoc());
      assertEquals("136", astRoot0.toString());
      assertEquals(1, astRoot0.getLength());
      assertEquals(0, astRoot0.getParamCount());
      assertNull(astRoot0.getEncodedSource());
      assertEquals(-1, astRoot0.getEncodedSourceEnd());
      assertEquals(-1, astRoot0.getPosition());
      assertEquals(0, astRoot0.getRegexpCount());
      assertEquals(false, astRoot0.hasChildren());
      assertEquals(-1, astRoot0.getBaseLineno());
      assertEquals(false, astRoot0.isInStrictMode());
      assertEquals(-1, astRoot0.getAbsolutePosition());
      assertEquals(-1, astRoot0.getEncodedSourceStart());
      assertNotNull(node0);
  }

  @Test
  public void test6()  throws Throwable  {
      AstRoot astRoot0 = new AstRoot();
      assertEquals(136, astRoot0.getType());
      assertEquals(false, astRoot0.isInStrictMode());
      assertNull(astRoot0.getJsDoc());
      assertNull(astRoot0.getSourceName());
      assertEquals(-1, astRoot0.getPosition());
      assertEquals(-1, astRoot0.getEndLineno());
      assertEquals(-1, astRoot0.getBaseLineno());
      assertEquals(0, astRoot0.getRegexpCount());
      assertEquals("136", astRoot0.toString());
      assertNull(astRoot0.getEncodedSource());
      assertEquals(-1, astRoot0.getEncodedSourceStart());
      assertEquals(false, astRoot0.hasChildren());
      assertEquals(0, astRoot0.depth());
      assertEquals(1, astRoot0.getLength());
      assertEquals(0, astRoot0.getParamCount());
      assertEquals(-1, astRoot0.getAbsolutePosition());
      assertEquals(-1, astRoot0.getLineno());
      assertEquals(0, astRoot0.getFunctionCount());
      assertEquals(-1, astRoot0.getEncodedSourceEnd());
      assertNotNull(astRoot0);
      
      String string0 = "]ycoir}YIT";
      Config config0 = null;
      boolean boolean0 = true;
      int int0 = 0;
      PrintStream printStream0 = null;
      NumberLiteral numberLiteral0 = (NumberLiteral)com.google.javascript.jscomp.mozilla.rhino.Node.newNumber((double) int0);
      assertEquals(0, numberLiteral0.depth());
      assertEquals(0.0, numberLiteral0.getDouble(), 0.01D);
      assertEquals(0.0, numberLiteral0.getNumber(), 0.01D);
      assertEquals(1, numberLiteral0.getLength());
      assertEquals(40, numberLiteral0.getType());
      assertEquals(-1, numberLiteral0.getLineno());
      assertNull(numberLiteral0.getJsDoc());
      assertEquals(-1, numberLiteral0.getAbsolutePosition());
      assertEquals(-1, numberLiteral0.getPosition());
      assertNull(numberLiteral0.getValue());
      assertEquals("40", numberLiteral0.toString());
      assertEquals(false, numberLiteral0.hasChildren());
      assertNotNull(numberLiteral0);
      
      astRoot0.addChildrenToFront((com.google.javascript.jscomp.mozilla.rhino.Node) numberLiteral0);
      assertEquals(0, numberLiteral0.depth());
      assertEquals(0.0, numberLiteral0.getDouble(), 0.01D);
      assertEquals(0.0, numberLiteral0.getNumber(), 0.01D);
      assertEquals(1, numberLiteral0.getLength());
      assertEquals(40, numberLiteral0.getType());
      assertEquals(-1, numberLiteral0.getLineno());
      assertNull(numberLiteral0.getJsDoc());
      assertEquals(-1, numberLiteral0.getAbsolutePosition());
      assertEquals(-1, numberLiteral0.getPosition());
      assertNull(numberLiteral0.getValue());
      assertEquals("40", numberLiteral0.toString());
      assertEquals(false, numberLiteral0.hasChildren());
      assertEquals(136, astRoot0.getType());
      assertEquals(false, astRoot0.isInStrictMode());
      assertNull(astRoot0.getJsDoc());
      assertEquals(true, astRoot0.hasChildren());
      assertNull(astRoot0.getSourceName());
      assertEquals(-1, astRoot0.getPosition());
      assertEquals(-1, astRoot0.getEndLineno());
      assertEquals(-1, astRoot0.getBaseLineno());
      assertEquals(0, astRoot0.getRegexpCount());
      assertEquals("136", astRoot0.toString());
      assertNull(astRoot0.getEncodedSource());
      assertEquals(-1, astRoot0.getEncodedSourceStart());
      assertEquals(0, astRoot0.depth());
      assertEquals(1, astRoot0.getLength());
      assertEquals(0, astRoot0.getParamCount());
      assertEquals(-1, astRoot0.getAbsolutePosition());
      assertEquals(-1, astRoot0.getLineno());
      assertEquals(0, astRoot0.getFunctionCount());
      assertEquals(-1, astRoot0.getEncodedSourceEnd());
      
      ToolErrorReporter toolErrorReporter0 = new ToolErrorReporter(boolean0, printStream0);
      assertEquals(true, toolErrorReporter0.isReportingWarnings());
      assertEquals(false, toolErrorReporter0.hasReportedError());
      assertNotNull(toolErrorReporter0);
      
      Node node0 = IRFactory.transformTree(astRoot0, string0, config0, (ErrorReporter) toolErrorReporter0);
      assertEquals(true, toolErrorReporter0.isReportingWarnings());
      assertEquals(false, toolErrorReporter0.hasReportedError());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(132, node0.getType());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(true, node0.hasOneChild());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isVarArgs());
      assertEquals(true, node0.hasChildren());
      assertEquals(1, node0.getChildCount());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(136, astRoot0.getType());
      assertEquals(false, astRoot0.isInStrictMode());
      assertNull(astRoot0.getJsDoc());
      assertEquals(true, astRoot0.hasChildren());
      assertNull(astRoot0.getSourceName());
      assertEquals(-1, astRoot0.getPosition());
      assertEquals(-1, astRoot0.getEndLineno());
      assertEquals(-1, astRoot0.getBaseLineno());
      assertEquals(0, astRoot0.getRegexpCount());
      assertEquals("136", astRoot0.toString());
      assertNull(astRoot0.getEncodedSource());
      assertEquals(-1, astRoot0.getEncodedSourceStart());
      assertEquals(0, astRoot0.depth());
      assertEquals(1, astRoot0.getLength());
      assertEquals(0, astRoot0.getParamCount());
      assertEquals(-1, astRoot0.getAbsolutePosition());
      assertEquals(-1, astRoot0.getLineno());
      assertEquals(0, astRoot0.getFunctionCount());
      assertEquals(-1, astRoot0.getEncodedSourceEnd());
      assertNotNull(node0);
  }

  @Test
  public void test7()  throws Throwable  {
      AstRoot astRoot0 = new AstRoot();
      assertEquals(-1, astRoot0.getPosition());
      assertEquals(false, astRoot0.isInStrictMode());
      assertNull(astRoot0.getEncodedSource());
      assertEquals(-1, astRoot0.getEncodedSourceEnd());
      assertEquals(-1, astRoot0.getBaseLineno());
      assertEquals(-1, astRoot0.getAbsolutePosition());
      assertEquals(-1, astRoot0.getEncodedSourceStart());
      assertEquals(0, astRoot0.getRegexpCount());
      assertEquals(0, astRoot0.getFunctionCount());
      assertNull(astRoot0.getJsDoc());
      assertEquals(0, astRoot0.depth());
      assertEquals("136", astRoot0.toString());
      assertNull(astRoot0.getSourceName());
      assertEquals(136, astRoot0.getType());
      assertEquals(-1, astRoot0.getLineno());
      assertEquals(-1, astRoot0.getEndLineno());
      assertEquals(1, astRoot0.getLength());
      assertEquals(false, astRoot0.hasChildren());
      assertEquals(0, astRoot0.getParamCount());
      assertNotNull(astRoot0);
      
      String string0 = "]ycoir}YIT";
      Config config0 = null;
      boolean boolean0 = true;
      int int0 = 0;
      ParenthesizedExpression parenthesizedExpression0 = new ParenthesizedExpression(int0);
      assertNull(parenthesizedExpression0.getJsDoc());
      assertEquals(0, parenthesizedExpression0.getAbsolutePosition());
      assertEquals(0, parenthesizedExpression0.depth());
      assertEquals(0, parenthesizedExpression0.getPosition());
      assertEquals("87", parenthesizedExpression0.toString());
      assertEquals(false, parenthesizedExpression0.hasChildren());
      assertEquals(87, parenthesizedExpression0.getType());
      assertEquals(-1, parenthesizedExpression0.getLineno());
      assertEquals(1, parenthesizedExpression0.getLength());
      assertNotNull(parenthesizedExpression0);
      
      astRoot0.addChildToFront((com.google.javascript.jscomp.mozilla.rhino.Node) parenthesizedExpression0);
      assertEquals(-1, astRoot0.getPosition());
      assertEquals(false, astRoot0.isInStrictMode());
      assertNull(astRoot0.getEncodedSource());
      assertEquals(-1, astRoot0.getEncodedSourceEnd());
      assertEquals(-1, astRoot0.getBaseLineno());
      assertEquals(-1, astRoot0.getAbsolutePosition());
      assertEquals(true, astRoot0.hasChildren());
      assertEquals(-1, astRoot0.getEncodedSourceStart());
      assertEquals(0, astRoot0.getRegexpCount());
      assertEquals(0, astRoot0.getFunctionCount());
      assertNull(astRoot0.getJsDoc());
      assertEquals(0, astRoot0.depth());
      assertEquals("136", astRoot0.toString());
      assertNull(astRoot0.getSourceName());
      assertEquals(136, astRoot0.getType());
      assertEquals(-1, astRoot0.getLineno());
      assertEquals(-1, astRoot0.getEndLineno());
      assertEquals(1, astRoot0.getLength());
      assertEquals(0, astRoot0.getParamCount());
      assertNull(parenthesizedExpression0.getJsDoc());
      assertEquals(0, parenthesizedExpression0.getAbsolutePosition());
      assertEquals(0, parenthesizedExpression0.depth());
      assertEquals(0, parenthesizedExpression0.getPosition());
      assertEquals("87", parenthesizedExpression0.toString());
      assertEquals(false, parenthesizedExpression0.hasChildren());
      assertEquals(87, parenthesizedExpression0.getType());
      assertEquals(-1, parenthesizedExpression0.getLineno());
      assertEquals(1, parenthesizedExpression0.getLength());
      
      PrintStream printStream0 = null;
      ToolErrorReporter toolErrorReporter0 = new ToolErrorReporter(boolean0, printStream0);
      assertEquals(true, toolErrorReporter0.isReportingWarnings());
      assertEquals(false, toolErrorReporter0.hasReportedError());
      assertNotNull(toolErrorReporter0);
      
      // Undeclared exception!
      try {
        Node node0 = IRFactory.transformTree(astRoot0, string0, config0, (ErrorReporter) toolErrorReporter0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test8()  throws Throwable  {
      boolean boolean0 = true;
      AstRoot astRoot0 = new AstRoot();
      assertNull(astRoot0.getJsDoc());
      assertEquals(false, astRoot0.isInStrictMode());
      assertEquals(0, astRoot0.getRegexpCount());
      assertEquals(-1, astRoot0.getLineno());
      assertEquals(0, astRoot0.getFunctionCount());
      assertEquals(136, astRoot0.getType());
      assertEquals(-1, astRoot0.getEndLineno());
      assertEquals(-1, astRoot0.getEncodedSourceEnd());
      assertEquals(0, astRoot0.depth());
      assertEquals(false, astRoot0.hasChildren());
      assertEquals(-1, astRoot0.getBaseLineno());
      assertNull(astRoot0.getSourceName());
      assertNull(astRoot0.getEncodedSource());
      assertEquals(-1, astRoot0.getAbsolutePosition());
      assertEquals(-1, astRoot0.getPosition());
      assertEquals(1, astRoot0.getLength());
      assertEquals(0, astRoot0.getParamCount());
      assertEquals("136", astRoot0.toString());
      assertEquals(-1, astRoot0.getEncodedSourceStart());
      assertNotNull(astRoot0);
      
      int int0 = 1189;
      String string0 = "xrT/2";
      Name name0 = new Name(int0, string0);
      assertEquals(5, name0.getLength());
      assertEquals(5, name0.length());
      assertEquals("xrT/2", name0.getIdentifier());
      assertEquals(1189, name0.getAbsolutePosition());
      assertNull(name0.getJsDoc());
      assertEquals(false, name0.hasChildren());
      assertEquals(39, name0.getType());
      assertEquals(0, name0.depth());
      assertEquals("xrT/2", name0.getString());
      assertEquals("39", name0.toString());
      assertEquals(-1, name0.getLineno());
      assertEquals(1189, name0.getPosition());
      assertNotNull(name0);
      
      astRoot0.addChildToBack((com.google.javascript.jscomp.mozilla.rhino.Node) name0);
      assertNull(astRoot0.getJsDoc());
      assertEquals(false, astRoot0.isInStrictMode());
      assertEquals(0, astRoot0.getRegexpCount());
      assertEquals(-1, astRoot0.getLineno());
      assertEquals(0, astRoot0.getFunctionCount());
      assertEquals(136, astRoot0.getType());
      assertEquals(true, astRoot0.hasChildren());
      assertEquals(-1, astRoot0.getEndLineno());
      assertEquals(-1, astRoot0.getEncodedSourceEnd());
      assertEquals(0, astRoot0.depth());
      assertEquals(-1, astRoot0.getBaseLineno());
      assertNull(astRoot0.getSourceName());
      assertNull(astRoot0.getEncodedSource());
      assertEquals(-1, astRoot0.getAbsolutePosition());
      assertEquals(-1, astRoot0.getPosition());
      assertEquals(1, astRoot0.getLength());
      assertEquals(0, astRoot0.getParamCount());
      assertEquals("136", astRoot0.toString());
      assertEquals(-1, astRoot0.getEncodedSourceStart());
      assertEquals(5, name0.getLength());
      assertEquals(5, name0.length());
      assertEquals("xrT/2", name0.getIdentifier());
      assertEquals(1189, name0.getAbsolutePosition());
      assertNull(name0.getJsDoc());
      assertEquals(false, name0.hasChildren());
      assertEquals(39, name0.getType());
      assertEquals(0, name0.depth());
      assertEquals("xrT/2", name0.getString());
      assertEquals("39", name0.toString());
      assertEquals(-1, name0.getLineno());
      assertEquals(1189, name0.getPosition());
      
      Config config0 = null;
      PrintStream printStream0 = null;
      ToolErrorReporter toolErrorReporter0 = new ToolErrorReporter(boolean0, printStream0);
      assertEquals(true, toolErrorReporter0.isReportingWarnings());
      assertEquals(false, toolErrorReporter0.hasReportedError());
      assertNotNull(toolErrorReporter0);
      
      Node node0 = IRFactory.transformTree(astRoot0, string0, config0, (ErrorReporter) toolErrorReporter0);
      assertNull(astRoot0.getJsDoc());
      assertEquals(false, astRoot0.isInStrictMode());
      assertEquals(0, astRoot0.getRegexpCount());
      assertEquals(-1, astRoot0.getLineno());
      assertEquals(0, astRoot0.getFunctionCount());
      assertEquals(136, astRoot0.getType());
      assertEquals(true, astRoot0.hasChildren());
      assertEquals(-1, astRoot0.getEndLineno());
      assertEquals(-1, astRoot0.getEncodedSourceEnd());
      assertEquals(0, astRoot0.depth());
      assertEquals(-1, astRoot0.getBaseLineno());
      assertNull(astRoot0.getSourceName());
      assertNull(astRoot0.getEncodedSource());
      assertEquals(-1, astRoot0.getAbsolutePosition());
      assertEquals(-1, astRoot0.getPosition());
      assertEquals(1, astRoot0.getLength());
      assertEquals(0, astRoot0.getParamCount());
      assertEquals("136", astRoot0.toString());
      assertEquals(-1, astRoot0.getEncodedSourceStart());
      assertEquals(true, toolErrorReporter0.isReportingWarnings());
      assertEquals(false, toolErrorReporter0.hasReportedError());
      assertEquals(true, node0.hasOneChild());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isQuotedString());
      assertEquals(1, node0.getChildCount());
      assertEquals(132, node0.getType());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(-1, node0.getLineno());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(true, node0.hasChildren());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isSyntheticBlock());
      assertNotNull(node0);
  }

  @Test
  public void test9()  throws Throwable  {
      AstRoot astRoot0 = new AstRoot();
      assertEquals(0, astRoot0.getFunctionCount());
      assertEquals(-1, astRoot0.getEndLineno());
      assertEquals(1, astRoot0.getLength());
      assertEquals(false, astRoot0.isInStrictMode());
      assertEquals("136", astRoot0.toString());
      assertEquals(-1, astRoot0.getEncodedSourceStart());
      assertEquals(136, astRoot0.getType());
      assertEquals(-1, astRoot0.getEncodedSourceEnd());
      assertEquals(-1, astRoot0.getLineno());
      assertNull(astRoot0.getJsDoc());
      assertEquals(0, astRoot0.getParamCount());
      assertNull(astRoot0.getEncodedSource());
      assertNull(astRoot0.getSourceName());
      assertEquals(0, astRoot0.depth());
      assertEquals(-1, astRoot0.getPosition());
      assertEquals(0, astRoot0.getRegexpCount());
      assertEquals(-1, astRoot0.getAbsolutePosition());
      assertEquals(-1, astRoot0.getBaseLineno());
      assertEquals(false, astRoot0.hasChildren());
      assertNotNull(astRoot0);
      
      int int0 = 821;
      String string0 = "eeeP";
      boolean boolean0 = true;
      LetNode letNode0 = new LetNode(int0, int0);
      assertEquals(158, letNode0.getType());
      assertEquals(821, letNode0.getAbsolutePosition());
      assertEquals(-1, letNode0.getLineno());
      assertEquals(-1, letNode0.getRp());
      assertEquals(false, letNode0.hasChildren());
      assertEquals(821, letNode0.getPosition());
      assertEquals(821, letNode0.getLength());
      assertEquals(0, letNode0.depth());
      assertEquals("158", letNode0.toString());
      assertNull(letNode0.getJsDoc());
      assertEquals(-1, letNode0.getLp());
      assertNotNull(letNode0);
      
      astRoot0.addChildToFront((com.google.javascript.jscomp.mozilla.rhino.Node) letNode0);
      assertEquals(0, astRoot0.getFunctionCount());
      assertEquals(-1, astRoot0.getEndLineno());
      assertEquals(1, astRoot0.getLength());
      assertEquals(false, astRoot0.isInStrictMode());
      assertEquals("136", astRoot0.toString());
      assertEquals(-1, astRoot0.getEncodedSourceStart());
      assertEquals(136, astRoot0.getType());
      assertEquals(-1, astRoot0.getEncodedSourceEnd());
      assertEquals(-1, astRoot0.getLineno());
      assertNull(astRoot0.getJsDoc());
      assertEquals(0, astRoot0.getParamCount());
      assertNull(astRoot0.getEncodedSource());
      assertNull(astRoot0.getSourceName());
      assertEquals(0, astRoot0.depth());
      assertEquals(-1, astRoot0.getPosition());
      assertEquals(0, astRoot0.getRegexpCount());
      assertEquals(-1, astRoot0.getAbsolutePosition());
      assertEquals(true, astRoot0.hasChildren());
      assertEquals(-1, astRoot0.getBaseLineno());
      assertEquals(158, letNode0.getType());
      assertEquals(821, letNode0.getAbsolutePosition());
      assertEquals(-1, letNode0.getLineno());
      assertEquals(-1, letNode0.getRp());
      assertEquals(false, letNode0.hasChildren());
      assertEquals(821, letNode0.getPosition());
      assertEquals(821, letNode0.getLength());
      assertEquals(0, letNode0.depth());
      assertEquals("158", letNode0.toString());
      assertNull(letNode0.getJsDoc());
      assertEquals(-1, letNode0.getLp());
      
      Config config0 = null;
      MockFile mockFile0 = new MockFile(string0, string0);
      assertNotNull(mockFile0);
      
      MockPrintStream mockPrintStream0 = new MockPrintStream((File) mockFile0);
      assertNotNull(mockPrintStream0);
      
      ToolErrorReporter toolErrorReporter0 = new ToolErrorReporter(boolean0, (PrintStream) mockPrintStream0);
      assertEquals(false, toolErrorReporter0.hasReportedError());
      assertEquals(true, toolErrorReporter0.isReportingWarnings());
      assertNotNull(toolErrorReporter0);
      
      Node node0 = IRFactory.transformTree(astRoot0, string0, config0, (ErrorReporter) toolErrorReporter0);
      assertEquals(true, toolErrorReporter0.hasReportedError());
      assertEquals(true, toolErrorReporter0.isReportingWarnings());
      assertEquals(0, astRoot0.getFunctionCount());
      assertEquals(-1, astRoot0.getEndLineno());
      assertEquals(1, astRoot0.getLength());
      assertEquals(false, astRoot0.isInStrictMode());
      assertEquals("136", astRoot0.toString());
      assertEquals(-1, astRoot0.getEncodedSourceStart());
      assertEquals(136, astRoot0.getType());
      assertEquals(-1, astRoot0.getEncodedSourceEnd());
      assertEquals(-1, astRoot0.getLineno());
      assertNull(astRoot0.getJsDoc());
      assertEquals(0, astRoot0.getParamCount());
      assertNull(astRoot0.getEncodedSource());
      assertNull(astRoot0.getSourceName());
      assertEquals(0, astRoot0.depth());
      assertEquals(-1, astRoot0.getPosition());
      assertEquals(0, astRoot0.getRegexpCount());
      assertEquals(-1, astRoot0.getAbsolutePosition());
      assertEquals(true, astRoot0.hasChildren());
      assertEquals(-1, astRoot0.getBaseLineno());
      assertEquals(true, node0.hasChildren());
      assertEquals(-1, node0.getLineno());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(1, node0.getChildCount());
      assertEquals(132, node0.getType());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isVarArgs());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(true, node0.hasOneChild());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertNotNull(node0);
  }
}
