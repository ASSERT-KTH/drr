/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 21:14:59 GMT 2014
 */

package com.google.javascript.jscomp.parsing;

import static org.junit.Assert.*; import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.junit.Test;
import com.google.javascript.jscomp.mozilla.rhino.Context;
import com.google.javascript.jscomp.mozilla.rhino.ErrorReporter;
import com.google.javascript.jscomp.mozilla.rhino.Token;
import com.google.javascript.jscomp.mozilla.rhino.ast.Comment;
import com.google.javascript.jscomp.mozilla.rhino.ast.DoLoop;
import com.google.javascript.jscomp.mozilla.rhino.ast.ForInLoop;
import com.google.javascript.jscomp.mozilla.rhino.ast.LabeledStatement;
import com.google.javascript.jscomp.mozilla.rhino.ast.VariableDeclaration;
import com.google.javascript.jscomp.mozilla.rhino.tools.ToolErrorReporter;
import com.google.javascript.jscomp.parsing.Config;
import com.google.javascript.jscomp.parsing.JsDocInfoParser;
import com.google.javascript.jscomp.parsing.JsDocToken;
import com.google.javascript.jscomp.parsing.JsDocTokenStream;
import com.google.javascript.rhino.JSDocInfo;
import com.google.javascript.rhino.Node;
import java.io.OutputStream;
import java.io.PrintStream;
import java.nio.charset.Charset;
import java.util.LinkedHashSet;
import java.util.Set;
import java.util.TreeSet;



import org.evosuite.runtime.testdata.FileSystemHandling;;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.junit.runner.RunWith;


public class JsDocInfoParserEvoSuite_branch_Test  {

  @Test
  public void test00()  throws Throwable  {
      String string0 = ":g.sdoc.javadv`ach";
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5;
      ErrorReporter errorReporter0 = null;
      Comment comment0 = null;
      boolean boolean0 = true;
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream(string0);
      assertNotNull(jsDocTokenStream0);
      
      int int0 = 10;
      jsDocTokenStream0.ungetChar(int0);
      TreeSet<String> treeSet0 = new TreeSet<String>();
      assertNotNull(treeSet0);
      assertEquals("[]", treeSet0.toString());
      
      Config config0 = new Config(treeSet0, treeSet0, boolean0, config_LanguageMode0, boolean0);
      assertNotNull(config0);
      assertEquals("[]", treeSet0.toString());
      
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, comment0, string0, config0, errorReporter0);
      assertNotNull(jsDocInfoParser0);
      assertEquals("[]", treeSet0.toString());
      
      // Undeclared exception!
      try {
        boolean boolean1 = jsDocInfoParser0.parse();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test01()  throws Throwable  {
      String string0 = "{lwjs\\T6:GW&{& #>o0";
      Node node0 = JsDocInfoParser.parseTypeString(string0);
      assertNull(node0);
  }

  @Test
  public void test02()  throws Throwable  {
      String string0 = "[J,vTaPackage ";
      Node node0 = JsDocInfoParser.parseTypeString(string0);
      assertNull(node0);
  }

  @Test
  public void test03()  throws Throwable  {
      String string0 = "(Ljava/lang/bect;)Ljava/lang/String;";
      Node node0 = JsDocInfoParser.parseTypeString(string0);
      assertNotNull(node0);
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(true, node0.hasOneChild());
      assertEquals(false, node0.isVarArgs());
      assertEquals(0, node0.getLineno());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(true, node0.hasChildren());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(1, node0.getChildCount());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(1, node0.getCharno());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(1, node0.getSourcePosition());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(301, node0.getType());
  }

  @Test
  public void test04()  throws Throwable  {
      String string0 = "(Ljava/la]g/Obaect;)Ljava)lang/String;";
      Node node0 = JsDocInfoParser.parseTypeString(string0);
      assertNull(node0);
  }

  @Test
  public void test05()  throws Throwable  {
      String string0 = "a2A|SH$+w|NlO9j}";
      Node node0 = JsDocInfoParser.parseTypeString(string0);
      assertNotNull(node0);
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(true, node0.hasMoreThanOneChild());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(301, node0.getType());
      assertEquals(false, node0.hasOneChild());
      assertEquals(4, node0.getCharno());
      assertEquals(false, node0.isVarArgs());
      assertEquals(true, node0.hasChildren());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(3, node0.getChildCount());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(4, node0.getSourcePosition());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isQuotedString());
      assertEquals(0, node0.getLineno());
  }

  @Test
  public void test06()  throws Throwable  {
      String string0 = "function";
      Node node0 = JsDocInfoParser.parseTypeString(string0);
      assertNull(node0);
  }

  @Test
  public void test07()  throws Throwable  {
      String string0 = "undefined";
      Node node0 = JsDocInfoParser.parseTypeString(string0);
      assertNotNull(node0);
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isVarArgs());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(0, node0.getChildCount());
      assertEquals(0, node0.getCharno());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(0, node0.getLineno());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(0, node0.getSourcePosition());
      assertEquals(40, node0.getType());
  }

  @Test
  public void test08()  throws Throwable  {
      String string0 = "null";
      Node node0 = JsDocInfoParser.parseTypeString(string0);
      assertNotNull(node0);
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isVarArgs());
      assertEquals(40, node0.getType());
      assertEquals(0, node0.getSourcePosition());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.hasOneChild());
      assertEquals(0, node0.getLineno());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isQuotedString());
      assertEquals(0, node0.getCharno());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isUnscopedQualifiedName());
  }

  @Test
  public void test09()  throws Throwable  {
      String string0 = "function (";
      Node node0 = JsDocInfoParser.parseTypeString(string0);
      assertNull(node0);
  }

  @Test
  public void test10()  throws Throwable  {
      String string0 = "{UIz<,,%zE?g";
      Node node0 = JsDocInfoParser.parseTypeString(string0);
      assertNull(node0);
  }

  @Test
  public void test11()  throws Throwable  {
      String string0 = "[";
      Node node0 = JsDocInfoParser.parseTypeString(string0);
      assertNull(node0);
  }

  @Test
  public void test12()  throws Throwable  {
      String string0 = "*b";
      Node node0 = JsDocInfoParser.parseTypeString(string0);
      assertNotNull(node0);
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(0, node0.getSourcePosition());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(302, node0.getType());
      assertEquals(0, node0.getChildCount());
      assertEquals(0, node0.getCharno());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(0, node0.getLineno());
      assertEquals(false, node0.hasOneChild());
  }

  @Test
  public void test13()  throws Throwable  {
      String string0 = "'5OU?AVs-w0$mP,KjY";
      Node node0 = JsDocInfoParser.parseTypeString(string0);
      assertNotNull(node0);
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(1, node0.getChildCount());
      assertEquals(4, node0.getCharno());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(304, node0.getType());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(4, node0.getSourcePosition());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(true, node0.hasChildren());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(true, node0.hasOneChild());
      assertEquals(0, node0.getLineno());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isUnscopedQualifiedName());
  }

  @Test
  public void test14()  throws Throwable  {
      String string0 = "!1d25Rv1\\D#7Mhm4!p";
      Node node0 = JsDocInfoParser.parseTypeString(string0);
      assertNotNull(node0);
      assertEquals(16, node0.getSourcePosition());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(0, node0.getLineno());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(1, node0.getChildCount());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(306, node0.getType());
      assertEquals(16, node0.getCharno());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(true, node0.hasChildren());
      assertEquals(true, node0.hasOneChild());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isQuotedString());
  }

  @Test
  public void test15()  throws Throwable  {
      String string0 = "5H<-8|R.<";
      Node node0 = JsDocInfoParser.parseTypeString(string0);
      assertNotNull(node0);
      assertEquals(true, node0.hasMoreThanOneChild());
      assertEquals(0, node0.getLineno());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isQuotedString());
      assertEquals(6, node0.getSourcePosition());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(true, node0.hasChildren());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(2, node0.getChildCount());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(6, node0.getCharno());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(301, node0.getType());
  }

  @Test
  public void test16()  throws Throwable  {
      String string0 = "3Py7|J3,X+pj:\\";
      Node node0 = JsDocInfoParser.parseTypeString(string0);
      assertNotNull(node0);
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(0, node0.getLineno());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(5, node0.getCharno());
      assertEquals(true, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(5, node0.getSourcePosition());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(3, node0.getChildCount());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(301, node0.getType());
      assertEquals(true, node0.hasChildren());
      assertEquals(false, node0.isVarArgs());
  }

  @Test
  public void test17()  throws Throwable  {
      String string0 = "msg.jsoc.javadispach";
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT3;
      ErrorReporter errorReporter0 = null;
      Comment comment0 = null;
      boolean boolean0 = true;
      String string1 = ") ";
      assertNotSame(string1, string0);
      
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream(string1);
      assertNotSame(string1, string0);
      assertNotNull(jsDocTokenStream0);
      assertFalse(string1.equals((Object)string0));
      
      TreeSet<String> treeSet0 = new TreeSet<String>();
      assertNotNull(treeSet0);
      assertEquals("[]", treeSet0.toString());
      
      Config config0 = new Config(treeSet0, treeSet0, boolean0, config_LanguageMode0, boolean0);
      assertNotNull(config0);
      assertEquals("[]", treeSet0.toString());
      
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, comment0, string0, config0, errorReporter0);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertNotNull(jsDocInfoParser0);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertEquals("[]", treeSet0.toString());
      
      // Undeclared exception!
      try {
        boolean boolean1 = jsDocInfoParser0.parse();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test18()  throws Throwable  {
      String string0 = "_I<VGSejC}YH_Q`NRa";
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream(string0);
      assertNotNull(jsDocTokenStream0);
      
      int int0 = 149;
      ForInLoop forInLoop0 = new ForInLoop(int0);
      assertNotNull(forInLoop0);
      assertEquals(-1, forInLoop0.getEachPosition());
      assertEquals(0, forInLoop0.depth());
      assertNull(forInLoop0.getJsDoc());
      assertEquals(-1, forInLoop0.getLineno());
      assertEquals(119, forInLoop0.getType());
      assertEquals(-1, forInLoop0.getInPosition());
      assertEquals(false, forInLoop0.isForEach());
      assertEquals(149, forInLoop0.getAbsolutePosition());
      assertEquals("119", forInLoop0.toString());
      assertEquals(1, forInLoop0.getLength());
      assertEquals(false, forInLoop0.hasChildren());
      assertEquals(-1, forInLoop0.getLp());
      assertEquals(149, forInLoop0.getPosition());
      assertEquals(-1, forInLoop0.getRp());
      
      Comment comment0 = forInLoop0.getJsDocNode();
      assertNull(comment0);
      assertEquals(-1, forInLoop0.getEachPosition());
      assertEquals(0, forInLoop0.depth());
      assertNull(forInLoop0.getJsDoc());
      assertEquals(-1, forInLoop0.getLineno());
      assertEquals(119, forInLoop0.getType());
      assertEquals(-1, forInLoop0.getInPosition());
      assertEquals(false, forInLoop0.isForEach());
      assertEquals(149, forInLoop0.getAbsolutePosition());
      assertEquals("119", forInLoop0.toString());
      assertEquals(1, forInLoop0.getLength());
      assertEquals(false, forInLoop0.hasChildren());
      assertEquals(-1, forInLoop0.getLp());
      assertEquals(149, forInLoop0.getPosition());
      assertEquals(-1, forInLoop0.getRp());
      
      TreeSet<String> treeSet0 = new TreeSet<String>();
      assertNotNull(treeSet0);
      assertEquals("[]", treeSet0.toString());
      
      JsDocToken jsDocToken0 = jsDocTokenStream0.getJsDocToken();
      assertEquals("STRING", jsDocToken0.name());
      assertEquals("STRING", jsDocToken0.toString());
      assertEquals(4, jsDocToken0.ordinal());
      
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5_STRICT;
      Config config0 = new Config(treeSet0, treeSet0, boolean0, config_LanguageMode0, boolean0);
      assertNotNull(config0);
      assertEquals("[]", treeSet0.toString());
      
      ErrorReporter errorReporter0 = null;
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, comment0, string0, config0, errorReporter0);
      assertNotNull(jsDocInfoParser0);
      assertEquals("[]", treeSet0.toString());
      assertEquals(-1, forInLoop0.getEachPosition());
      assertEquals(0, forInLoop0.depth());
      assertNull(forInLoop0.getJsDoc());
      assertEquals(-1, forInLoop0.getLineno());
      assertEquals(119, forInLoop0.getType());
      assertEquals(-1, forInLoop0.getInPosition());
      assertEquals(false, forInLoop0.isForEach());
      assertEquals(149, forInLoop0.getAbsolutePosition());
      assertEquals("119", forInLoop0.toString());
      assertEquals(1, forInLoop0.getLength());
      assertEquals(false, forInLoop0.hasChildren());
      assertEquals(-1, forInLoop0.getLp());
      assertEquals(149, forInLoop0.getPosition());
      assertEquals(-1, forInLoop0.getRp());
      
      // Undeclared exception!
      try {
        boolean boolean1 = jsDocInfoParser0.parse();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test19()  throws Throwable  {
      String string0 = "msg.jsdoc.javadispatch";
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5;
      ErrorReporter errorReporter0 = null;
      Comment comment0 = null;
      boolean boolean0 = true;
      String string1 = "?";
      assertNotSame(string1, string0);
      
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream(string1);
      assertNotSame(string1, string0);
      assertNotNull(jsDocTokenStream0);
      assertFalse(string1.equals((Object)string0));
      
      TreeSet<String> treeSet0 = new TreeSet<String>();
      assertNotNull(treeSet0);
      assertEquals("[]", treeSet0.toString());
      
      Config config0 = new Config(treeSet0, treeSet0, boolean0, config_LanguageMode0, boolean0);
      assertNotNull(config0);
      assertEquals("[]", treeSet0.toString());
      
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, comment0, string0, config0, errorReporter0);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertNotNull(jsDocInfoParser0);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertEquals("[]", treeSet0.toString());
      
      // Undeclared exception!
      try {
        boolean boolean1 = jsDocInfoParser0.parse();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test20()  throws Throwable  {
      String string0 = "@{TeEs";
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream(string0);
      assertNotNull(jsDocTokenStream0);
      
      int int0 = 18;
      int int1 = jsDocTokenStream0.getChar();
      assertFalse(int1 == int0);
      assertEquals(64, int1);
      
      LabeledStatement labeledStatement0 = new LabeledStatement(int0);
      assertNotNull(labeledStatement0);
      assertFalse(int0 == int1);
      assertEquals(-1, labeledStatement0.getLineno());
      assertEquals(133, labeledStatement0.getType());
      assertEquals("133", labeledStatement0.toString());
      assertEquals(18, labeledStatement0.getAbsolutePosition());
      assertEquals(false, labeledStatement0.hasChildren());
      assertNull(labeledStatement0.getJsDoc());
      assertEquals(1, labeledStatement0.getLength());
      assertEquals(0, labeledStatement0.depth());
      assertEquals(18, labeledStatement0.getPosition());
      
      Comment comment0 = labeledStatement0.getJsDocNode();
      assertNull(comment0);
      assertFalse(int0 == int1);
      assertEquals(-1, labeledStatement0.getLineno());
      assertEquals(133, labeledStatement0.getType());
      assertEquals("133", labeledStatement0.toString());
      assertEquals(18, labeledStatement0.getAbsolutePosition());
      assertEquals(false, labeledStatement0.hasChildren());
      assertNull(labeledStatement0.getJsDoc());
      assertEquals(1, labeledStatement0.getLength());
      assertEquals(0, labeledStatement0.depth());
      assertEquals(18, labeledStatement0.getPosition());
      
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      assertNotNull(linkedHashSet0);
      assertEquals(0, linkedHashSet0.size());
      assertEquals(true, linkedHashSet0.isEmpty());
      assertEquals("[]", linkedHashSet0.toString());
      
      boolean boolean0 = true;
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5_STRICT;
      Config config0 = new Config(linkedHashSet0, linkedHashSet0, boolean0, config_LanguageMode0, boolean0);
      assertNotNull(config0);
      assertEquals(0, linkedHashSet0.size());
      assertEquals(true, linkedHashSet0.isEmpty());
      assertEquals("[]", linkedHashSet0.toString());
      
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(string0);
      assertNotNull(mockFileOutputStream0);
      
      MockPrintStream mockPrintStream0 = new MockPrintStream((OutputStream) mockFileOutputStream0, boolean0);
      assertNotNull(mockPrintStream0);
      
      ToolErrorReporter toolErrorReporter0 = new ToolErrorReporter(boolean0, (PrintStream) mockPrintStream0);
      assertNotNull(toolErrorReporter0);
      assertEquals(false, toolErrorReporter0.hasReportedError());
      assertEquals(true, toolErrorReporter0.isReportingWarnings());
      
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, comment0, string0, config0, toolErrorReporter0);
      assertNotNull(jsDocInfoParser0);
      assertFalse(int0 == int1);
      assertEquals(-1, labeledStatement0.getLineno());
      assertEquals(133, labeledStatement0.getType());
      assertEquals("133", labeledStatement0.toString());
      assertEquals(18, labeledStatement0.getAbsolutePosition());
      assertEquals(false, labeledStatement0.hasChildren());
      assertNull(labeledStatement0.getJsDoc());
      assertEquals(1, labeledStatement0.getLength());
      assertEquals(0, labeledStatement0.depth());
      assertEquals(18, labeledStatement0.getPosition());
      assertEquals(0, linkedHashSet0.size());
      assertEquals(true, linkedHashSet0.isEmpty());
      assertEquals("[]", linkedHashSet0.toString());
      assertEquals(false, toolErrorReporter0.hasReportedError());
      assertEquals(true, toolErrorReporter0.isReportingWarnings());
      
      boolean boolean1 = jsDocInfoParser0.parse();
      assertFalse(boolean1 == boolean0);
      assertFalse(int0 == int1);
      assertFalse(boolean0 == boolean1);
      assertFalse(boolean1);
      assertEquals(-1, labeledStatement0.getLineno());
      assertEquals(133, labeledStatement0.getType());
      assertEquals("133", labeledStatement0.toString());
      assertEquals(18, labeledStatement0.getAbsolutePosition());
      assertEquals(false, labeledStatement0.hasChildren());
      assertNull(labeledStatement0.getJsDoc());
      assertEquals(1, labeledStatement0.getLength());
      assertEquals(0, labeledStatement0.depth());
      assertEquals(18, labeledStatement0.getPosition());
      assertEquals(0, linkedHashSet0.size());
      assertEquals(true, linkedHashSet0.isEmpty());
      assertEquals("[]", linkedHashSet0.toString());
      assertEquals(false, toolErrorReporter0.hasReportedError());
      assertEquals(true, toolErrorReporter0.isReportingWarnings());
  }

  @Test
  public void test21()  throws Throwable  {
      String string0 = "msg.jsdo.jaadispach";
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT3;
      EvoSuiteFile evoSuiteFile0 = null;
      boolean boolean0 = FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      assertFalse(boolean0);
      
      ErrorReporter errorReporter0 = null;
      Comment comment0 = null;
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream(string0);
      assertNotNull(jsDocTokenStream0);
      
      int int0 = 10;
      jsDocTokenStream0.ungetChar(int0);
      int int1 = (-202);
      jsDocTokenStream0.ungetChar(int1);
      assertFalse(int1 == int0);
      
      TreeSet<String> treeSet0 = new TreeSet<String>();
      assertNotNull(treeSet0);
      assertEquals("[]", treeSet0.toString());
      
      Config config0 = new Config(treeSet0, treeSet0, boolean0, config_LanguageMode0, boolean0);
      assertNotNull(config0);
      assertEquals("[]", treeSet0.toString());
      
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, comment0, string0, config0, errorReporter0);
      assertNotNull(jsDocInfoParser0);
      assertEquals("[]", treeSet0.toString());
      
      // Undeclared exception!
      try {
        boolean boolean1 = jsDocInfoParser0.parse();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test22()  throws Throwable  {
      String string0 = "@{Te";
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream(string0);
      assertNotNull(jsDocTokenStream0);
      
      int int0 = 0;
      LabeledStatement labeledStatement0 = new LabeledStatement(int0);
      assertNotNull(labeledStatement0);
      assertEquals(-1, labeledStatement0.getLineno());
      assertEquals(0, labeledStatement0.depth());
      assertEquals(1, labeledStatement0.getLength());
      assertEquals("133", labeledStatement0.toString());
      assertNull(labeledStatement0.getJsDoc());
      assertEquals(133, labeledStatement0.getType());
      assertEquals(0, labeledStatement0.getPosition());
      assertEquals(false, labeledStatement0.hasChildren());
      assertEquals(0, labeledStatement0.getAbsolutePosition());
      
      Comment comment0 = labeledStatement0.getJsDocNode();
      assertNull(comment0);
      assertEquals(-1, labeledStatement0.getLineno());
      assertEquals(0, labeledStatement0.depth());
      assertEquals(1, labeledStatement0.getLength());
      assertEquals("133", labeledStatement0.toString());
      assertNull(labeledStatement0.getJsDoc());
      assertEquals(133, labeledStatement0.getType());
      assertEquals(0, labeledStatement0.getPosition());
      assertEquals(false, labeledStatement0.hasChildren());
      assertEquals(0, labeledStatement0.getAbsolutePosition());
      
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      assertNotNull(linkedHashSet0);
      assertEquals("[]", linkedHashSet0.toString());
      assertEquals(true, linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      
      boolean boolean0 = false;
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5_STRICT;
      Config config0 = new Config(linkedHashSet0, linkedHashSet0, boolean0, config_LanguageMode0, boolean0);
      assertNotNull(config0);
      assertEquals("[]", linkedHashSet0.toString());
      assertEquals(true, linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(string0);
      assertNotNull(mockFileOutputStream0);
      
      MockPrintStream mockPrintStream0 = new MockPrintStream((OutputStream) mockFileOutputStream0, boolean0);
      assertNotNull(mockPrintStream0);
      
      ToolErrorReporter toolErrorReporter0 = new ToolErrorReporter(boolean0, (PrintStream) mockPrintStream0);
      assertNotNull(toolErrorReporter0);
      assertEquals(false, toolErrorReporter0.isReportingWarnings());
      assertEquals(false, toolErrorReporter0.hasReportedError());
      
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, comment0, string0, config0, toolErrorReporter0);
      assertNotNull(jsDocInfoParser0);
      assertEquals(false, toolErrorReporter0.isReportingWarnings());
      assertEquals(false, toolErrorReporter0.hasReportedError());
      assertEquals(-1, labeledStatement0.getLineno());
      assertEquals(0, labeledStatement0.depth());
      assertEquals(1, labeledStatement0.getLength());
      assertEquals("133", labeledStatement0.toString());
      assertNull(labeledStatement0.getJsDoc());
      assertEquals(133, labeledStatement0.getType());
      assertEquals(0, labeledStatement0.getPosition());
      assertEquals(false, labeledStatement0.hasChildren());
      assertEquals(0, labeledStatement0.getAbsolutePosition());
      assertEquals("[]", linkedHashSet0.toString());
      assertEquals(true, linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      
      boolean boolean1 = jsDocInfoParser0.parse();
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean0 == boolean1);
      assertFalse(boolean1);
      assertEquals(false, toolErrorReporter0.isReportingWarnings());
      assertEquals(false, toolErrorReporter0.hasReportedError());
      assertEquals(-1, labeledStatement0.getLineno());
      assertEquals(0, labeledStatement0.depth());
      assertEquals(1, labeledStatement0.getLength());
      assertEquals("133", labeledStatement0.toString());
      assertNull(labeledStatement0.getJsDoc());
      assertEquals(133, labeledStatement0.getType());
      assertEquals(0, labeledStatement0.getPosition());
      assertEquals(false, labeledStatement0.hasChildren());
      assertEquals(0, labeledStatement0.getAbsolutePosition());
      assertEquals("[]", linkedHashSet0.toString());
      assertEquals(true, linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
  }

  @Test
  public void test23()  throws Throwable  {
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT3;
      ErrorReporter errorReporter0 = null;
      Comment comment0 = null;
      boolean boolean0 = true;
      String string0 = "*b";
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream(string0);
      assertNotNull(jsDocTokenStream0);
      
      TreeSet<String> treeSet0 = new TreeSet<String>();
      assertNotNull(treeSet0);
      assertEquals("[]", treeSet0.toString());
      
      Config config0 = new Config(treeSet0, treeSet0, boolean0, config_LanguageMode0, boolean0);
      assertNotNull(config0);
      assertEquals("[]", treeSet0.toString());
      
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, comment0, string0, config0, errorReporter0);
      assertNotNull(jsDocInfoParser0);
      assertEquals("[]", treeSet0.toString());
      
      // Undeclared exception!
      try {
        boolean boolean1 = jsDocInfoParser0.parse();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test24()  throws Throwable  {
      String string0 = "(Ljava/lang/bect;)Ljava/lang/String;";
      JsDocTokenStream jsDocTokenStream0 = null;
      ErrorReporter errorReporter0 = null;
      TreeSet<String> treeSet0 = new TreeSet<String>();
      assertNotNull(treeSet0);
      assertEquals("[]", treeSet0.toString());
      
      int int0 = 1072;
      Token.CommentType token_CommentType0 = Token.CommentType.JSDOC;
      Comment comment0 = new Comment(int0, int0, token_CommentType0, string0);
      assertNotNull(comment0);
      assertEquals(-1, comment0.getLineno());
      assertEquals("(Ljava/lang/bect;)Ljava/lang/String;", comment0.getValue());
      assertEquals(1072, comment0.getAbsolutePosition());
      assertEquals(false, comment0.hasChildren());
      assertEquals("161", comment0.toString());
      assertEquals(161, comment0.getType());
      assertEquals(1072, comment0.getPosition());
      assertEquals(false, comment0.isParsed());
      assertEquals(Token.CommentType.JSDOC, comment0.getCommentType());
      assertNull(comment0.getJsDoc());
      assertEquals(1072, comment0.getLength());
      assertEquals(0, comment0.depth());
      
      boolean boolean0 = false;
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5_STRICT;
      Config config0 = new Config(treeSet0, treeSet0, boolean0, config_LanguageMode0, boolean0);
      assertNotNull(config0);
      assertEquals("[]", treeSet0.toString());
      
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, comment0, string0, config0, errorReporter0);
      assertNotNull(jsDocInfoParser0);
      assertEquals(-1, comment0.getLineno());
      assertEquals("(Ljava/lang/bect;)Ljava/lang/String;", comment0.getValue());
      assertEquals(1072, comment0.getAbsolutePosition());
      assertEquals(false, comment0.hasChildren());
      assertEquals("161", comment0.toString());
      assertEquals(161, comment0.getType());
      assertEquals(1072, comment0.getPosition());
      assertEquals(false, comment0.isParsed());
      assertEquals(Token.CommentType.JSDOC, comment0.getCommentType());
      assertNull(comment0.getJsDoc());
      assertEquals(1072, comment0.getLength());
      assertEquals(0, comment0.depth());
      assertEquals("[]", treeSet0.toString());
  }

  @Test
  public void test25() {}
//   @Test
//   public void test25()  throws Throwable  {
//       String string0 = "I!TEzFACE";
//       JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream(string0);
//       //  // Unstable assertion: assertNotNull(jsDocTokenStream0);
//       
//       DoLoop doLoop0 = new DoLoop();
//       //  // Unstable assertion: assertNotNull(doLoop0);
//       //  // Unstable assertion: assertEquals(0, doLoop0.depth());
//       //  // Unstable assertion: assertEquals(-1, doLoop0.getLineno());
//       //  // Unstable assertion: assertEquals("118", doLoop0.toString());
//       //  // Unstable assertion: assertEquals(false, doLoop0.hasChildren());
//       //  // Unstable assertion: assertEquals(-1, doLoop0.getAbsolutePosition());
//       //  // Unstable assertion: assertEquals(-1, doLoop0.getPosition());
//       //  // Unstable assertion: assertEquals(-1, doLoop0.getWhilePosition());
//       //  // Unstable assertion: assertEquals(-1, doLoop0.getLp());
//       //  // Unstable assertion: assertNull(doLoop0.getJsDoc());
//       //  // Unstable assertion: assertEquals(1, doLoop0.getLength());
//       //  // Unstable assertion: assertEquals(-1, doLoop0.getRp());
//       //  // Unstable assertion: assertEquals(118, doLoop0.getType());
//       
//       Comment comment0 = doLoop0.getJsDocNode();
//       //  // Unstable assertion: assertNull(comment0);
//       //  // Unstable assertion: assertEquals(0, doLoop0.depth());
//       //  // Unstable assertion: assertEquals(-1, doLoop0.getLineno());
//       //  // Unstable assertion: assertEquals("118", doLoop0.toString());
//       //  // Unstable assertion: assertEquals(false, doLoop0.hasChildren());
//       //  // Unstable assertion: assertEquals(-1, doLoop0.getAbsolutePosition());
//       //  // Unstable assertion: assertEquals(-1, doLoop0.getPosition());
//       //  // Unstable assertion: assertEquals(-1, doLoop0.getWhilePosition());
//       //  // Unstable assertion: assertEquals(-1, doLoop0.getLp());
//       //  // Unstable assertion: assertNull(doLoop0.getJsDoc());
//       //  // Unstable assertion: assertEquals(1, doLoop0.getLength());
//       //  // Unstable assertion: assertEquals(-1, doLoop0.getRp());
//       //  // Unstable assertion: assertEquals(118, doLoop0.getType());
//       
//       Charset charset0 = Charset.defaultCharset();
//       //  // Unstable assertion: assertNotNull(charset0);
//       //  // Unstable assertion: assertEquals(true, charset0.canEncode());
//       //  // Unstable assertion: assertEquals("UTF-8", charset0.toString());
//       //  // Unstable assertion: assertEquals("UTF-8", charset0.name());
//       //  // Unstable assertion: assertEquals("UTF-8", charset0.displayName());
//       //  // Unstable assertion: assertEquals(true, charset0.isRegistered());
//       
//       Set<String> set0 = charset0.aliases();
//       //  // Unstable assertion: assertNotNull(set0);
//       //  // Unstable assertion: assertEquals(2, set0.size());
//       //  // Unstable assertion: assertEquals(false, set0.isEmpty());
//       //  // Unstable assertion: assertEquals(true, charset0.canEncode());
//       //  // Unstable assertion: assertEquals("UTF-8", charset0.toString());
//       //  // Unstable assertion: assertEquals("UTF-8", charset0.name());
//       //  // Unstable assertion: assertEquals("UTF-8", charset0.displayName());
//       //  // Unstable assertion: assertEquals(true, charset0.isRegistered());
//       
//       boolean boolean0 = true;
//       Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT3;
//       Config config0 = new Config(set0, set0, boolean0, config_LanguageMode0, boolean0);
//       //  // Unstable assertion: assertNotNull(config0);
//       //  // Unstable assertion: assertEquals(2, set0.size());
//       //  // Unstable assertion: assertEquals(false, set0.isEmpty());
//       //  // Unstable assertion: assertEquals(true, charset0.canEncode());
//       //  // Unstable assertion: assertEquals("UTF-8", charset0.toString());
//       //  // Unstable assertion: assertEquals("UTF-8", charset0.name());
//       //  // Unstable assertion: assertEquals("UTF-8", charset0.displayName());
//       //  // Unstable assertion: assertEquals(true, charset0.isRegistered());
//       
//       Context context0 = Context.getCurrentContext();
//       //  // Unstable assertion: assertNotNull(context0);
//       //  // Unstable assertion: assertFalse(context0.generateObserverCount);
//       //  // Unstable assertion: assertEquals(141, context0.getInstructionObserverThreshold());
//       //  // Unstable assertion: assertEquals(0, context0.getOptimizationLevel());
//       //  // Unstable assertion: assertEquals(true, context0.isGeneratingSource());
//       //  // Unstable assertion: assertEquals(2147483647, context0.getMaximumInterpreterStackDepth());
//       //  // Unstable assertion: assertEquals(true, context0.isSealed());
//       //  // Unstable assertion: assertEquals(true, context0.isGeneratingDebug());
//       //  // Unstable assertion: assertEquals(true, context0.isGeneratingDebugChanged());
//       //  // Unstable assertion: assertEquals(0, context0.getLanguageVersion());
//       //  // Unstable assertion: assertEquals(true, context0.hasCompileFunctionsWithDynamicScope());
//       
//       ToolErrorReporter toolErrorReporter0 = (ToolErrorReporter)context0.getErrorReporter();
//       //  // Unstable assertion: assertNotNull(toolErrorReporter0);
//       //  // Unstable assertion: assertFalse(context0.generateObserverCount);
//       //  // Unstable assertion: assertEquals(141, context0.getInstructionObserverThreshold());
//       //  // Unstable assertion: assertEquals(0, context0.getOptimizationLevel());
//       //  // Unstable assertion: assertEquals(true, context0.isGeneratingSource());
//       //  // Unstable assertion: assertEquals(2147483647, context0.getMaximumInterpreterStackDepth());
//       //  // Unstable assertion: assertEquals(true, context0.isSealed());
//       //  // Unstable assertion: assertEquals(true, context0.isGeneratingDebug());
//       //  // Unstable assertion: assertEquals(true, context0.isGeneratingDebugChanged());
//       //  // Unstable assertion: assertEquals(0, context0.getLanguageVersion());
//       //  // Unstable assertion: assertEquals(true, context0.hasCompileFunctionsWithDynamicScope());
//       //  // Unstable assertion: assertEquals(true, toolErrorReporter0.hasReportedError());
//       //  // Unstable assertion: assertEquals(true, toolErrorReporter0.isReportingWarnings());
//       
//       JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, comment0, string0, config0, toolErrorReporter0);
//       //  // Unstable assertion: assertNotNull(jsDocInfoParser0);
//       //  // Unstable assertion: assertFalse(context0.generateObserverCount);
//       //  // Unstable assertion: assertEquals(141, context0.getInstructionObserverThreshold());
//       //  // Unstable assertion: assertEquals(0, context0.getOptimizationLevel());
//       //  // Unstable assertion: assertEquals(true, context0.isGeneratingSource());
//       //  // Unstable assertion: assertEquals(2147483647, context0.getMaximumInterpreterStackDepth());
//       //  // Unstable assertion: assertEquals(true, context0.isSealed());
//       //  // Unstable assertion: assertEquals(true, context0.isGeneratingDebug());
//       //  // Unstable assertion: assertEquals(true, context0.isGeneratingDebugChanged());
//       //  // Unstable assertion: assertEquals(0, context0.getLanguageVersion());
//       //  // Unstable assertion: assertEquals(true, context0.hasCompileFunctionsWithDynamicScope());
//       //  // Unstable assertion: assertEquals(2, set0.size());
//       //  // Unstable assertion: assertEquals(false, set0.isEmpty());
//       //  // Unstable assertion: assertEquals(0, doLoop0.depth());
//       //  // Unstable assertion: assertEquals(-1, doLoop0.getLineno());
//       //  // Unstable assertion: assertEquals("118", doLoop0.toString());
//       //  // Unstable assertion: assertEquals(false, doLoop0.hasChildren());
//       //  // Unstable assertion: assertEquals(-1, doLoop0.getAbsolutePosition());
//       //  // Unstable assertion: assertEquals(-1, doLoop0.getPosition());
//       //  // Unstable assertion: assertEquals(-1, doLoop0.getWhilePosition());
//       //  // Unstable assertion: assertEquals(-1, doLoop0.getLp());
//       //  // Unstable assertion: assertNull(doLoop0.getJsDoc());
//       //  // Unstable assertion: assertEquals(1, doLoop0.getLength());
//       //  // Unstable assertion: assertEquals(-1, doLoop0.getRp());
//       //  // Unstable assertion: assertEquals(118, doLoop0.getType());
//       //  // Unstable assertion: assertEquals(true, charset0.canEncode());
//       //  // Unstable assertion: assertEquals("UTF-8", charset0.toString());
//       //  // Unstable assertion: assertEquals("UTF-8", charset0.name());
//       //  // Unstable assertion: assertEquals("UTF-8", charset0.displayName());
//       //  // Unstable assertion: assertEquals(true, charset0.isRegistered());
//       //  // Unstable assertion: assertEquals(true, toolErrorReporter0.hasReportedError());
//       //  // Unstable assertion: assertEquals(true, toolErrorReporter0.isReportingWarnings());
//       
//       JSDocInfo jSDocInfo0 = null;
//       jsDocInfoParser0.setFileOverviewJSDocInfo(jSDocInfo0);
//       //  // Unstable assertion: assertFalse(context0.generateObserverCount);
//       //  // Unstable assertion: assertEquals(141, context0.getInstructionObserverThreshold());
//       //  // Unstable assertion: assertEquals(0, context0.getOptimizationLevel());
//       //  // Unstable assertion: assertEquals(true, context0.isGeneratingSource());
//       //  // Unstable assertion: assertEquals(2147483647, context0.getMaximumInterpreterStackDepth());
//       //  // Unstable assertion: assertEquals(true, context0.isSealed());
//       //  // Unstable assertion: assertEquals(true, context0.isGeneratingDebug());
//       //  // Unstable assertion: assertEquals(true, context0.isGeneratingDebugChanged());
//       //  // Unstable assertion: assertEquals(0, context0.getLanguageVersion());
//       //  // Unstable assertion: assertEquals(true, context0.hasCompileFunctionsWithDynamicScope());
//       //  // Unstable assertion: assertEquals(2, set0.size());
//       //  // Unstable assertion: assertEquals(false, set0.isEmpty());
//       //  // Unstable assertion: assertEquals(0, doLoop0.depth());
//       //  // Unstable assertion: assertEquals(-1, doLoop0.getLineno());
//       //  // Unstable assertion: assertEquals("118", doLoop0.toString());
//       //  // Unstable assertion: assertEquals(false, doLoop0.hasChildren());
//       //  // Unstable assertion: assertEquals(-1, doLoop0.getAbsolutePosition());
//       //  // Unstable assertion: assertEquals(-1, doLoop0.getPosition());
//       //  // Unstable assertion: assertEquals(-1, doLoop0.getWhilePosition());
//       //  // Unstable assertion: assertEquals(-1, doLoop0.getLp());
//       //  // Unstable assertion: assertNull(doLoop0.getJsDoc());
//       //  // Unstable assertion: assertEquals(1, doLoop0.getLength());
//       //  // Unstable assertion: assertEquals(-1, doLoop0.getRp());
//       //  // Unstable assertion: assertEquals(118, doLoop0.getType());
//       //  // Unstable assertion: assertEquals(true, charset0.canEncode());
//       //  // Unstable assertion: assertEquals("UTF-8", charset0.toString());
//       //  // Unstable assertion: assertEquals("UTF-8", charset0.name());
//       //  // Unstable assertion: assertEquals("UTF-8", charset0.displayName());
//       //  // Unstable assertion: assertEquals(true, charset0.isRegistered());
//       //  // Unstable assertion: assertEquals(true, toolErrorReporter0.hasReportedError());
//       //  // Unstable assertion: assertEquals(true, toolErrorReporter0.isReportingWarnings());
//   }

  @Test
  public void test26() {}
//   @Test
//   public void test26()  throws Throwable  {
//       String string0 = "Z2=_#\"fN[";
//       int int0 = 3937;
//       boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
//       //  // Unstable assertion: assertTrue(boolean0);
//       
//       JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream(string0, int0);
//       //  // Unstable assertion: assertNotNull(jsDocTokenStream0);
//       
//       VariableDeclaration variableDeclaration0 = new VariableDeclaration(int0, int0);
//       //  // Unstable assertion: assertNotNull(variableDeclaration0);
//       //  // Unstable assertion: assertEquals(false, variableDeclaration0.isLet());
//       //  // Unstable assertion: assertEquals(3937, variableDeclaration0.getAbsolutePosition());
//       //  // Unstable assertion: assertEquals(false, variableDeclaration0.hasChildren());
//       //  // Unstable assertion: assertNull(variableDeclaration0.getJsDoc());
//       //  // Unstable assertion: assertEquals(3937, variableDeclaration0.getPosition());
//       //  // Unstable assertion: assertEquals(true, variableDeclaration0.isVar());
//       //  // Unstable assertion: assertEquals(-1, variableDeclaration0.getLineno());
//       //  // Unstable assertion: assertEquals(false, variableDeclaration0.isConst());
//       //  // Unstable assertion: assertEquals(3937, variableDeclaration0.getLength());
//       //  // Unstable assertion: assertEquals(0, variableDeclaration0.depth());
//       //  // Unstable assertion: assertEquals("122", variableDeclaration0.toString());
//       //  // Unstable assertion: assertEquals(122, variableDeclaration0.getType());
//       
//       Comment comment0 = variableDeclaration0.getJsDocNode();
//       //  // Unstable assertion: assertNull(comment0);
//       //  // Unstable assertion: assertEquals(false, variableDeclaration0.isLet());
//       //  // Unstable assertion: assertEquals(3937, variableDeclaration0.getAbsolutePosition());
//       //  // Unstable assertion: assertEquals(false, variableDeclaration0.hasChildren());
//       //  // Unstable assertion: assertNull(variableDeclaration0.getJsDoc());
//       //  // Unstable assertion: assertEquals(3937, variableDeclaration0.getPosition());
//       //  // Unstable assertion: assertEquals(true, variableDeclaration0.isVar());
//       //  // Unstable assertion: assertEquals(-1, variableDeclaration0.getLineno());
//       //  // Unstable assertion: assertEquals(false, variableDeclaration0.isConst());
//       //  // Unstable assertion: assertEquals(3937, variableDeclaration0.getLength());
//       //  // Unstable assertion: assertEquals(0, variableDeclaration0.depth());
//       //  // Unstable assertion: assertEquals("122", variableDeclaration0.toString());
//       //  // Unstable assertion: assertEquals(122, variableDeclaration0.getType());
//       
//       TreeSet<String> treeSet0 = new TreeSet<String>();
//       //  // Unstable assertion: assertNotNull(treeSet0);
//       //  // Unstable assertion: assertEquals("[]", treeSet0.toString());
//       
//       Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5_STRICT;
//       Config config0 = new Config(treeSet0, treeSet0, boolean0, config_LanguageMode0, boolean0);
//       //  // Unstable assertion: assertNotNull(config0);
//       //  // Unstable assertion: assertEquals("[]", treeSet0.toString());
//       
//       Context context0 = Context.getCurrentContext();
//       //  // Unstable assertion: assertNotNull(context0);
//       //  // Unstable assertion: assertFalse(context0.generateObserverCount);
//       //  // Unstable assertion: assertEquals(141, context0.getInstructionObserverThreshold());
//       //  // Unstable assertion: assertEquals(2147483647, context0.getMaximumInterpreterStackDepth());
//       //  // Unstable assertion: assertEquals(true, context0.isGeneratingDebugChanged());
//       //  // Unstable assertion: assertEquals(true, context0.isGeneratingSource());
//       //  // Unstable assertion: assertEquals(0, context0.getLanguageVersion());
//       //  // Unstable assertion: assertEquals(0, context0.getOptimizationLevel());
//       //  // Unstable assertion: assertEquals(true, context0.isGeneratingDebug());
//       //  // Unstable assertion: assertEquals(true, context0.isSealed());
//       //  // Unstable assertion: assertEquals(true, context0.hasCompileFunctionsWithDynamicScope());
//       
//       ToolErrorReporter toolErrorReporter0 = new ToolErrorReporter(context0.generateObserverCount);
//       //  // Unstable assertion: assertNotNull(toolErrorReporter0);
//       //  // Unstable assertion: assertFalse(context0.generateObserverCount);
//       //  // Unstable assertion: assertEquals(false, toolErrorReporter0.isReportingWarnings());
//       //  // Unstable assertion: assertEquals(false, toolErrorReporter0.hasReportedError());
//       //  // Unstable assertion: assertEquals(141, context0.getInstructionObserverThreshold());
//       //  // Unstable assertion: assertEquals(2147483647, context0.getMaximumInterpreterStackDepth());
//       //  // Unstable assertion: assertEquals(true, context0.isGeneratingDebugChanged());
//       //  // Unstable assertion: assertEquals(true, context0.isGeneratingSource());
//       //  // Unstable assertion: assertEquals(0, context0.getLanguageVersion());
//       //  // Unstable assertion: assertEquals(0, context0.getOptimizationLevel());
//       //  // Unstable assertion: assertEquals(true, context0.isGeneratingDebug());
//       //  // Unstable assertion: assertEquals(true, context0.isSealed());
//       //  // Unstable assertion: assertEquals(true, context0.hasCompileFunctionsWithDynamicScope());
//       
//       JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, comment0, string0, config0, toolErrorReporter0);
//       //  // Unstable assertion: assertNotNull(jsDocInfoParser0);
//       //  // Unstable assertion: assertFalse(context0.generateObserverCount);
//       //  // Unstable assertion: assertEquals(false, toolErrorReporter0.isReportingWarnings());
//       //  // Unstable assertion: assertEquals(false, toolErrorReporter0.hasReportedError());
//       //  // Unstable assertion: assertEquals(141, context0.getInstructionObserverThreshold());
//       //  // Unstable assertion: assertEquals(2147483647, context0.getMaximumInterpreterStackDepth());
//       //  // Unstable assertion: assertEquals(true, context0.isGeneratingDebugChanged());
//       //  // Unstable assertion: assertEquals(true, context0.isGeneratingSource());
//       //  // Unstable assertion: assertEquals(0, context0.getLanguageVersion());
//       //  // Unstable assertion: assertEquals(0, context0.getOptimizationLevel());
//       //  // Unstable assertion: assertEquals(true, context0.isGeneratingDebug());
//       //  // Unstable assertion: assertEquals(true, context0.isSealed());
//       //  // Unstable assertion: assertEquals(true, context0.hasCompileFunctionsWithDynamicScope());
//       //  // Unstable assertion: assertEquals("[]", treeSet0.toString());
//       //  // Unstable assertion: assertEquals(false, variableDeclaration0.isLet());
//       //  // Unstable assertion: assertEquals(3937, variableDeclaration0.getAbsolutePosition());
//       //  // Unstable assertion: assertEquals(false, variableDeclaration0.hasChildren());
//       //  // Unstable assertion: assertNull(variableDeclaration0.getJsDoc());
//       //  // Unstable assertion: assertEquals(3937, variableDeclaration0.getPosition());
//       //  // Unstable assertion: assertEquals(true, variableDeclaration0.isVar());
//       //  // Unstable assertion: assertEquals(-1, variableDeclaration0.getLineno());
//       //  // Unstable assertion: assertEquals(false, variableDeclaration0.isConst());
//       //  // Unstable assertion: assertEquals(3937, variableDeclaration0.getLength());
//       //  // Unstable assertion: assertEquals(0, variableDeclaration0.depth());
//       //  // Unstable assertion: assertEquals("122", variableDeclaration0.toString());
//       //  // Unstable assertion: assertEquals(122, variableDeclaration0.getType());
//       
//       JSDocInfo jSDocInfo0 = jsDocInfoParser0.retrieveAndResetParsedJSDocInfo();
//       //  // Unstable assertion: assertNull(jSDocInfo0);
//       //  // Unstable assertion: assertFalse(context0.generateObserverCount);
//       //  // Unstable assertion: assertEquals(false, toolErrorReporter0.isReportingWarnings());
//       //  // Unstable assertion: assertEquals(false, toolErrorReporter0.hasReportedError());
//       //  // Unstable assertion: assertEquals(141, context0.getInstructionObserverThreshold());
//       //  // Unstable assertion: assertEquals(2147483647, context0.getMaximumInterpreterStackDepth());
//       //  // Unstable assertion: assertEquals(true, context0.isGeneratingDebugChanged());
//       //  // Unstable assertion: assertEquals(true, context0.isGeneratingSource());
//       //  // Unstable assertion: assertEquals(0, context0.getLanguageVersion());
//       //  // Unstable assertion: assertEquals(0, context0.getOptimizationLevel());
//       //  // Unstable assertion: assertEquals(true, context0.isGeneratingDebug());
//       //  // Unstable assertion: assertEquals(true, context0.isSealed());
//       //  // Unstable assertion: assertEquals(true, context0.hasCompileFunctionsWithDynamicScope());
//       //  // Unstable assertion: assertEquals("[]", treeSet0.toString());
//       //  // Unstable assertion: assertEquals(false, variableDeclaration0.isLet());
//       //  // Unstable assertion: assertEquals(3937, variableDeclaration0.getAbsolutePosition());
//       //  // Unstable assertion: assertEquals(false, variableDeclaration0.hasChildren());
//       //  // Unstable assertion: assertNull(variableDeclaration0.getJsDoc());
//       //  // Unstable assertion: assertEquals(3937, variableDeclaration0.getPosition());
//       //  // Unstable assertion: assertEquals(true, variableDeclaration0.isVar());
//       //  // Unstable assertion: assertEquals(-1, variableDeclaration0.getLineno());
//       //  // Unstable assertion: assertEquals(false, variableDeclaration0.isConst());
//       //  // Unstable assertion: assertEquals(3937, variableDeclaration0.getLength());
//       //  // Unstable assertion: assertEquals(0, variableDeclaration0.depth());
//       //  // Unstable assertion: assertEquals("122", variableDeclaration0.toString());
//       //  // Unstable assertion: assertEquals(122, variableDeclaration0.getType());
//   }

  @Test
  public void test27() {}
//   @Test
//   public void test27()  throws Throwable  {
//       String string0 = "Z2=_#\"fN[";
//       int int0 = 3937;
//       boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
//       //  // Unstable assertion: assertTrue(boolean0);
//       
//       JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream(string0, int0);
//       //  // Unstable assertion: assertNotNull(jsDocTokenStream0);
//       
//       VariableDeclaration variableDeclaration0 = new VariableDeclaration(int0, int0);
//       //  // Unstable assertion: assertNotNull(variableDeclaration0);
//       //  // Unstable assertion: assertEquals("122", variableDeclaration0.toString());
//       //  // Unstable assertion: assertEquals(122, variableDeclaration0.getType());
//       //  // Unstable assertion: assertEquals(true, variableDeclaration0.isVar());
//       //  // Unstable assertion: assertEquals(-1, variableDeclaration0.getLineno());
//       //  // Unstable assertion: assertEquals(false, variableDeclaration0.isConst());
//       //  // Unstable assertion: assertEquals(0, variableDeclaration0.depth());
//       //  // Unstable assertion: assertEquals(false, variableDeclaration0.isLet());
//       //  // Unstable assertion: assertEquals(3937, variableDeclaration0.getAbsolutePosition());
//       //  // Unstable assertion: assertNull(variableDeclaration0.getJsDoc());
//       //  // Unstable assertion: assertEquals(3937, variableDeclaration0.getPosition());
//       //  // Unstable assertion: assertEquals(3937, variableDeclaration0.getLength());
//       //  // Unstable assertion: assertEquals(false, variableDeclaration0.hasChildren());
//       
//       Comment comment0 = variableDeclaration0.getJsDocNode();
//       //  // Unstable assertion: assertNull(comment0);
//       //  // Unstable assertion: assertEquals("122", variableDeclaration0.toString());
//       //  // Unstable assertion: assertEquals(122, variableDeclaration0.getType());
//       //  // Unstable assertion: assertEquals(true, variableDeclaration0.isVar());
//       //  // Unstable assertion: assertEquals(-1, variableDeclaration0.getLineno());
//       //  // Unstable assertion: assertEquals(false, variableDeclaration0.isConst());
//       //  // Unstable assertion: assertEquals(0, variableDeclaration0.depth());
//       //  // Unstable assertion: assertEquals(false, variableDeclaration0.isLet());
//       //  // Unstable assertion: assertEquals(3937, variableDeclaration0.getAbsolutePosition());
//       //  // Unstable assertion: assertNull(variableDeclaration0.getJsDoc());
//       //  // Unstable assertion: assertEquals(3937, variableDeclaration0.getPosition());
//       //  // Unstable assertion: assertEquals(3937, variableDeclaration0.getLength());
//       //  // Unstable assertion: assertEquals(false, variableDeclaration0.hasChildren());
//       
//       TreeSet<String> treeSet0 = new TreeSet<String>();
//       //  // Unstable assertion: assertNotNull(treeSet0);
//       //  // Unstable assertion: assertEquals("[]", treeSet0.toString());
//       
//       Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5_STRICT;
//       Config config0 = new Config(treeSet0, treeSet0, boolean0, config_LanguageMode0, boolean0);
//       //  // Unstable assertion: assertNotNull(config0);
//       //  // Unstable assertion: assertEquals("[]", treeSet0.toString());
//       
//       Context context0 = Context.getCurrentContext();
//       //  // Unstable assertion: assertNotNull(context0);
//       //  // Unstable assertion: assertFalse(context0.generateObserverCount);
//       //  // Unstable assertion: assertEquals(0, context0.getOptimizationLevel());
//       //  // Unstable assertion: assertEquals(true, context0.hasCompileFunctionsWithDynamicScope());
//       //  // Unstable assertion: assertEquals(2147483647, context0.getMaximumInterpreterStackDepth());
//       //  // Unstable assertion: assertEquals(true, context0.isGeneratingDebugChanged());
//       //  // Unstable assertion: assertEquals(141, context0.getInstructionObserverThreshold());
//       //  // Unstable assertion: assertEquals(true, context0.isSealed());
//       //  // Unstable assertion: assertEquals(true, context0.isGeneratingDebug());
//       //  // Unstable assertion: assertEquals(0, context0.getLanguageVersion());
//       //  // Unstable assertion: assertEquals(true, context0.isGeneratingSource());
//       
//       ToolErrorReporter toolErrorReporter0 = new ToolErrorReporter(context0.generateObserverCount);
//       //  // Unstable assertion: assertNotNull(toolErrorReporter0);
//       //  // Unstable assertion: assertFalse(context0.generateObserverCount);
//       //  // Unstable assertion: assertEquals(0, context0.getOptimizationLevel());
//       //  // Unstable assertion: assertEquals(true, context0.hasCompileFunctionsWithDynamicScope());
//       //  // Unstable assertion: assertEquals(2147483647, context0.getMaximumInterpreterStackDepth());
//       //  // Unstable assertion: assertEquals(true, context0.isGeneratingDebugChanged());
//       //  // Unstable assertion: assertEquals(141, context0.getInstructionObserverThreshold());
//       //  // Unstable assertion: assertEquals(true, context0.isSealed());
//       //  // Unstable assertion: assertEquals(true, context0.isGeneratingDebug());
//       //  // Unstable assertion: assertEquals(0, context0.getLanguageVersion());
//       //  // Unstable assertion: assertEquals(true, context0.isGeneratingSource());
//       //  // Unstable assertion: assertEquals(false, toolErrorReporter0.isReportingWarnings());
//       //  // Unstable assertion: assertEquals(false, toolErrorReporter0.hasReportedError());
//       
//       JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, comment0, string0, config0, toolErrorReporter0);
//       //  // Unstable assertion: assertNotNull(jsDocInfoParser0);
//       //  // Unstable assertion: assertFalse(context0.generateObserverCount);
//       //  // Unstable assertion: assertEquals("122", variableDeclaration0.toString());
//       //  // Unstable assertion: assertEquals(122, variableDeclaration0.getType());
//       //  // Unstable assertion: assertEquals(true, variableDeclaration0.isVar());
//       //  // Unstable assertion: assertEquals(-1, variableDeclaration0.getLineno());
//       //  // Unstable assertion: assertEquals(false, variableDeclaration0.isConst());
//       //  // Unstable assertion: assertEquals(0, variableDeclaration0.depth());
//       //  // Unstable assertion: assertEquals(false, variableDeclaration0.isLet());
//       //  // Unstable assertion: assertEquals(3937, variableDeclaration0.getAbsolutePosition());
//       //  // Unstable assertion: assertNull(variableDeclaration0.getJsDoc());
//       //  // Unstable assertion: assertEquals(3937, variableDeclaration0.getPosition());
//       //  // Unstable assertion: assertEquals(3937, variableDeclaration0.getLength());
//       //  // Unstable assertion: assertEquals(false, variableDeclaration0.hasChildren());
//       //  // Unstable assertion: assertEquals("[]", treeSet0.toString());
//       //  // Unstable assertion: assertEquals(0, context0.getOptimizationLevel());
//       //  // Unstable assertion: assertEquals(true, context0.hasCompileFunctionsWithDynamicScope());
//       //  // Unstable assertion: assertEquals(2147483647, context0.getMaximumInterpreterStackDepth());
//       //  // Unstable assertion: assertEquals(true, context0.isGeneratingDebugChanged());
//       //  // Unstable assertion: assertEquals(141, context0.getInstructionObserverThreshold());
//       //  // Unstable assertion: assertEquals(true, context0.isSealed());
//       //  // Unstable assertion: assertEquals(true, context0.isGeneratingDebug());
//       //  // Unstable assertion: assertEquals(0, context0.getLanguageVersion());
//       //  // Unstable assertion: assertEquals(true, context0.isGeneratingSource());
//       //  // Unstable assertion: assertEquals(false, toolErrorReporter0.isReportingWarnings());
//       //  // Unstable assertion: assertEquals(false, toolErrorReporter0.hasReportedError());
//       
//       JSDocInfo jSDocInfo0 = jsDocInfoParser0.getFileOverviewJSDocInfo();
//       //  // Unstable assertion: assertNull(jSDocInfo0);
//       //  // Unstable assertion: assertFalse(context0.generateObserverCount);
//       //  // Unstable assertion: assertEquals("122", variableDeclaration0.toString());
//       //  // Unstable assertion: assertEquals(122, variableDeclaration0.getType());
//       //  // Unstable assertion: assertEquals(true, variableDeclaration0.isVar());
//       //  // Unstable assertion: assertEquals(-1, variableDeclaration0.getLineno());
//       //  // Unstable assertion: assertEquals(false, variableDeclaration0.isConst());
//       //  // Unstable assertion: assertEquals(0, variableDeclaration0.depth());
//       //  // Unstable assertion: assertEquals(false, variableDeclaration0.isLet());
//       //  // Unstable assertion: assertEquals(3937, variableDeclaration0.getAbsolutePosition());
//       //  // Unstable assertion: assertNull(variableDeclaration0.getJsDoc());
//       //  // Unstable assertion: assertEquals(3937, variableDeclaration0.getPosition());
//       //  // Unstable assertion: assertEquals(3937, variableDeclaration0.getLength());
//       //  // Unstable assertion: assertEquals(false, variableDeclaration0.hasChildren());
//       //  // Unstable assertion: assertEquals("[]", treeSet0.toString());
//       //  // Unstable assertion: assertEquals(0, context0.getOptimizationLevel());
//       //  // Unstable assertion: assertEquals(true, context0.hasCompileFunctionsWithDynamicScope());
//       //  // Unstable assertion: assertEquals(2147483647, context0.getMaximumInterpreterStackDepth());
//       //  // Unstable assertion: assertEquals(true, context0.isGeneratingDebugChanged());
//       //  // Unstable assertion: assertEquals(141, context0.getInstructionObserverThreshold());
//       //  // Unstable assertion: assertEquals(true, context0.isSealed());
//       //  // Unstable assertion: assertEquals(true, context0.isGeneratingDebug());
//       //  // Unstable assertion: assertEquals(0, context0.getLanguageVersion());
//       //  // Unstable assertion: assertEquals(true, context0.isGeneratingSource());
//       //  // Unstable assertion: assertEquals(false, toolErrorReporter0.isReportingWarnings());
//       //  // Unstable assertion: assertEquals(false, toolErrorReporter0.hasReportedError());
//   }

  @Test
  public void test28() {}
//   @Test
//   public void test28()  throws Throwable  {
//       String string0 = "Z2=_#\"fN[";
//       int int0 = 3937;
//       boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
//       //  // Unstable assertion: assertTrue(boolean0);
//       
//       JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream(string0, int0);
//       //  // Unstable assertion: assertNotNull(jsDocTokenStream0);
//       
//       VariableDeclaration variableDeclaration0 = new VariableDeclaration(int0, int0);
//       //  // Unstable assertion: assertNotNull(variableDeclaration0);
//       //  // Unstable assertion: assertEquals("122", variableDeclaration0.toString());
//       //  // Unstable assertion: assertEquals(false, variableDeclaration0.isConst());
//       //  // Unstable assertion: assertEquals(false, variableDeclaration0.isLet());
//       //  // Unstable assertion: assertEquals(true, variableDeclaration0.isVar());
//       //  // Unstable assertion: assertEquals(122, variableDeclaration0.getType());
//       //  // Unstable assertion: assertEquals(3937, variableDeclaration0.getLength());
//       //  // Unstable assertion: assertEquals(3937, variableDeclaration0.getPosition());
//       //  // Unstable assertion: assertEquals(0, variableDeclaration0.depth());
//       //  // Unstable assertion: assertNull(variableDeclaration0.getJsDoc());
//       //  // Unstable assertion: assertEquals(3937, variableDeclaration0.getAbsolutePosition());
//       //  // Unstable assertion: assertEquals(false, variableDeclaration0.hasChildren());
//       //  // Unstable assertion: assertEquals(-1, variableDeclaration0.getLineno());
//       
//       Comment comment0 = variableDeclaration0.getJsDocNode();
//       //  // Unstable assertion: assertNull(comment0);
//       //  // Unstable assertion: assertEquals("122", variableDeclaration0.toString());
//       //  // Unstable assertion: assertEquals(false, variableDeclaration0.isConst());
//       //  // Unstable assertion: assertEquals(false, variableDeclaration0.isLet());
//       //  // Unstable assertion: assertEquals(true, variableDeclaration0.isVar());
//       //  // Unstable assertion: assertEquals(122, variableDeclaration0.getType());
//       //  // Unstable assertion: assertEquals(3937, variableDeclaration0.getLength());
//       //  // Unstable assertion: assertEquals(3937, variableDeclaration0.getPosition());
//       //  // Unstable assertion: assertEquals(0, variableDeclaration0.depth());
//       //  // Unstable assertion: assertNull(variableDeclaration0.getJsDoc());
//       //  // Unstable assertion: assertEquals(3937, variableDeclaration0.getAbsolutePosition());
//       //  // Unstable assertion: assertEquals(false, variableDeclaration0.hasChildren());
//       //  // Unstable assertion: assertEquals(-1, variableDeclaration0.getLineno());
//       
//       TreeSet<String> treeSet0 = new TreeSet<String>();
//       //  // Unstable assertion: assertNotNull(treeSet0);
//       //  // Unstable assertion: assertEquals("[]", treeSet0.toString());
//       
//       Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5_STRICT;
//       Config config0 = new Config(treeSet0, treeSet0, boolean0, config_LanguageMode0, boolean0);
//       //  // Unstable assertion: assertNotNull(config0);
//       //  // Unstable assertion: assertEquals("[]", treeSet0.toString());
//       
//       Context context0 = Context.getCurrentContext();
//       //  // Unstable assertion: assertNotNull(context0);
//       //  // Unstable assertion: assertFalse(context0.generateObserverCount);
//       //  // Unstable assertion: assertEquals(true, context0.hasCompileFunctionsWithDynamicScope());
//       //  // Unstable assertion: assertEquals(0, context0.getLanguageVersion());
//       //  // Unstable assertion: assertEquals(0, context0.getOptimizationLevel());
//       //  // Unstable assertion: assertEquals(141, context0.getInstructionObserverThreshold());
//       //  // Unstable assertion: assertEquals(true, context0.isGeneratingSource());
//       //  // Unstable assertion: assertEquals(true, context0.isGeneratingDebugChanged());
//       //  // Unstable assertion: assertEquals(2147483647, context0.getMaximumInterpreterStackDepth());
//       //  // Unstable assertion: assertEquals(true, context0.isGeneratingDebug());
//       //  // Unstable assertion: assertEquals(true, context0.isSealed());
//       
//       ToolErrorReporter toolErrorReporter0 = new ToolErrorReporter(context0.generateObserverCount);
//       //  // Unstable assertion: assertNotNull(toolErrorReporter0);
//       //  // Unstable assertion: assertFalse(context0.generateObserverCount);
//       //  // Unstable assertion: assertEquals(false, toolErrorReporter0.hasReportedError());
//       //  // Unstable assertion: assertEquals(false, toolErrorReporter0.isReportingWarnings());
//       //  // Unstable assertion: assertEquals(true, context0.hasCompileFunctionsWithDynamicScope());
//       //  // Unstable assertion: assertEquals(0, context0.getLanguageVersion());
//       //  // Unstable assertion: assertEquals(0, context0.getOptimizationLevel());
//       //  // Unstable assertion: assertEquals(141, context0.getInstructionObserverThreshold());
//       //  // Unstable assertion: assertEquals(true, context0.isGeneratingSource());
//       //  // Unstable assertion: assertEquals(true, context0.isGeneratingDebugChanged());
//       //  // Unstable assertion: assertEquals(2147483647, context0.getMaximumInterpreterStackDepth());
//       //  // Unstable assertion: assertEquals(true, context0.isGeneratingDebug());
//       //  // Unstable assertion: assertEquals(true, context0.isSealed());
//       
//       JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, comment0, string0, config0, toolErrorReporter0);
//       //  // Unstable assertion: assertNotNull(jsDocInfoParser0);
//       //  // Unstable assertion: assertFalse(context0.generateObserverCount);
//       //  // Unstable assertion: assertEquals("122", variableDeclaration0.toString());
//       //  // Unstable assertion: assertEquals(false, variableDeclaration0.isConst());
//       //  // Unstable assertion: assertEquals(false, variableDeclaration0.isLet());
//       //  // Unstable assertion: assertEquals(true, variableDeclaration0.isVar());
//       //  // Unstable assertion: assertEquals(122, variableDeclaration0.getType());
//       //  // Unstable assertion: assertEquals(3937, variableDeclaration0.getLength());
//       //  // Unstable assertion: assertEquals(3937, variableDeclaration0.getPosition());
//       //  // Unstable assertion: assertEquals(0, variableDeclaration0.depth());
//       //  // Unstable assertion: assertNull(variableDeclaration0.getJsDoc());
//       //  // Unstable assertion: assertEquals(3937, variableDeclaration0.getAbsolutePosition());
//       //  // Unstable assertion: assertEquals(false, variableDeclaration0.hasChildren());
//       //  // Unstable assertion: assertEquals(-1, variableDeclaration0.getLineno());
//       //  // Unstable assertion: assertEquals(false, toolErrorReporter0.hasReportedError());
//       //  // Unstable assertion: assertEquals(false, toolErrorReporter0.isReportingWarnings());
//       //  // Unstable assertion: assertEquals(true, context0.hasCompileFunctionsWithDynamicScope());
//       //  // Unstable assertion: assertEquals(0, context0.getLanguageVersion());
//       //  // Unstable assertion: assertEquals(0, context0.getOptimizationLevel());
//       //  // Unstable assertion: assertEquals(141, context0.getInstructionObserverThreshold());
//       //  // Unstable assertion: assertEquals(true, context0.isGeneratingSource());
//       //  // Unstable assertion: assertEquals(true, context0.isGeneratingDebugChanged());
//       //  // Unstable assertion: assertEquals(2147483647, context0.getMaximumInterpreterStackDepth());
//       //  // Unstable assertion: assertEquals(true, context0.isGeneratingDebug());
//       //  // Unstable assertion: assertEquals(true, context0.isSealed());
//       //  // Unstable assertion: assertEquals("[]", treeSet0.toString());
//       
//       boolean boolean1 = jsDocInfoParser0.hasParsedJSDocInfo();
//       //  // Unstable assertion: assertFalse(context0.generateObserverCount);
//       //  // Unstable assertion: assertFalse(boolean0 == boolean1);
//       //  // Unstable assertion: assertFalse(boolean1 == boolean0);
//       //  // Unstable assertion: assertFalse(boolean1);
//       //  // Unstable assertion: assertEquals("122", variableDeclaration0.toString());
//       //  // Unstable assertion: assertEquals(false, variableDeclaration0.isConst());
//       //  // Unstable assertion: assertEquals(false, variableDeclaration0.isLet());
//       //  // Unstable assertion: assertEquals(true, variableDeclaration0.isVar());
//       //  // Unstable assertion: assertEquals(122, variableDeclaration0.getType());
//       //  // Unstable assertion: assertEquals(3937, variableDeclaration0.getLength());
//       //  // Unstable assertion: assertEquals(3937, variableDeclaration0.getPosition());
//       //  // Unstable assertion: assertEquals(0, variableDeclaration0.depth());
//       //  // Unstable assertion: assertNull(variableDeclaration0.getJsDoc());
//       //  // Unstable assertion: assertEquals(3937, variableDeclaration0.getAbsolutePosition());
//       //  // Unstable assertion: assertEquals(false, variableDeclaration0.hasChildren());
//       //  // Unstable assertion: assertEquals(-1, variableDeclaration0.getLineno());
//       //  // Unstable assertion: assertEquals(false, toolErrorReporter0.hasReportedError());
//       //  // Unstable assertion: assertEquals(false, toolErrorReporter0.isReportingWarnings());
//       //  // Unstable assertion: assertEquals(true, context0.hasCompileFunctionsWithDynamicScope());
//       //  // Unstable assertion: assertEquals(0, context0.getLanguageVersion());
//       //  // Unstable assertion: assertEquals(0, context0.getOptimizationLevel());
//       //  // Unstable assertion: assertEquals(141, context0.getInstructionObserverThreshold());
//       //  // Unstable assertion: assertEquals(true, context0.isGeneratingSource());
//       //  // Unstable assertion: assertEquals(true, context0.isGeneratingDebugChanged());
//       //  // Unstable assertion: assertEquals(2147483647, context0.getMaximumInterpreterStackDepth());
//       //  // Unstable assertion: assertEquals(true, context0.isGeneratingDebug());
//       //  // Unstable assertion: assertEquals(true, context0.isSealed());
//       //  // Unstable assertion: assertEquals("[]", treeSet0.toString());
//   }

  @Test
  public void test29()  throws Throwable  {
      String string0 = "?";
      Node node0 = JsDocInfoParser.parseTypeString(string0);
      assertNull(node0);
  }

  @Test
  public void test30()  throws Throwable  {
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT3;
      ErrorReporter errorReporter0 = null;
      Comment comment0 = null;
      String string0 = "*b";
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream(string0);
      assertNotNull(jsDocTokenStream0);
      
      TreeSet<String> treeSet0 = new TreeSet<String>();
      assertNotNull(treeSet0);
      assertEquals("[]", treeSet0.toString());
      
      boolean boolean0 = false;
      Config config0 = new Config(treeSet0, treeSet0, boolean0, config_LanguageMode0, boolean0);
      assertNotNull(config0);
      assertEquals("[]", treeSet0.toString());
      
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, comment0, string0, config0, errorReporter0);
      assertNotNull(jsDocInfoParser0);
      assertEquals("[]", treeSet0.toString());
      
      // Undeclared exception!
      try {
        boolean boolean1 = jsDocInfoParser0.parse();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
}
