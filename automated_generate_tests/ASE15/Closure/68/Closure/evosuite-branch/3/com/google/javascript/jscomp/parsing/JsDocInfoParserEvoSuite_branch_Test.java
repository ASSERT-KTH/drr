/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 21:46:48 GMT 2014
 */

package com.google.javascript.jscomp.parsing;

import static org.junit.Assert.*; import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.junit.Test;
import com.google.javascript.jscomp.mozilla.rhino.Context;
import com.google.javascript.jscomp.mozilla.rhino.ContextFactory;
import com.google.javascript.jscomp.mozilla.rhino.ErrorReporter;
import com.google.javascript.jscomp.mozilla.rhino.Token;
import com.google.javascript.jscomp.mozilla.rhino.ast.Comment;
import com.google.javascript.jscomp.mozilla.rhino.ast.DoLoop;
import com.google.javascript.jscomp.mozilla.rhino.ast.ErrorCollector;
import com.google.javascript.jscomp.mozilla.rhino.ast.ErrorNode;
import com.google.javascript.jscomp.mozilla.rhino.ast.LabeledStatement;
import com.google.javascript.jscomp.mozilla.rhino.ast.ObjectProperty;
import com.google.javascript.jscomp.mozilla.rhino.ast.StringLiteral;
import com.google.javascript.jscomp.mozilla.rhino.ast.XmlMemberGet;
import com.google.javascript.jscomp.mozilla.rhino.tools.ToolErrorReporter;
import com.google.javascript.jscomp.parsing.Config;
import com.google.javascript.jscomp.parsing.JsDocInfoParser;
import com.google.javascript.jscomp.parsing.JsDocToken;
import com.google.javascript.jscomp.parsing.JsDocTokenStream;
import com.google.javascript.rhino.JSDocInfo;
import com.google.javascript.rhino.Node;
import java.nio.charset.Charset;
import java.util.LinkedHashSet;
import java.util.Locale;
import java.util.Set;
import java.util.TreeSet;



import org.evosuite.runtime.testdata.FileSystemHandling;;
import org.junit.runner.RunWith;


public class JsDocInfoParserEvoSuite_branch_Test  {

  @Test
  public void test00()  throws Throwable  {
      String string0 = ";\n";
      int int0 = (-550);
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream(string0, int0, int0);
      assertNotNull(jsDocTokenStream0);
      
      LabeledStatement labeledStatement0 = new LabeledStatement();
      assertEquals("133", labeledStatement0.toString());
      assertEquals(133, labeledStatement0.getType());
      assertEquals(-1, labeledStatement0.getAbsolutePosition());
      assertNull(labeledStatement0.getJsDoc());
      assertEquals(1, labeledStatement0.getLength());
      assertEquals(0, labeledStatement0.depth());
      assertEquals(-1, labeledStatement0.getLineno());
      assertEquals(-1, labeledStatement0.getPosition());
      assertEquals(false, labeledStatement0.hasChildren());
      assertNotNull(labeledStatement0);
      
      Comment comment0 = labeledStatement0.getJsDocNode();
      assertEquals("133", labeledStatement0.toString());
      assertEquals(133, labeledStatement0.getType());
      assertEquals(-1, labeledStatement0.getAbsolutePosition());
      assertNull(labeledStatement0.getJsDoc());
      assertEquals(1, labeledStatement0.getLength());
      assertEquals(0, labeledStatement0.depth());
      assertEquals(-1, labeledStatement0.getLineno());
      assertEquals(-1, labeledStatement0.getPosition());
      assertEquals(false, labeledStatement0.hasChildren());
      assertNull(comment0);
      
      int int1 = jsDocTokenStream0.getChar();
      assertEquals(59, int1);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      
      TreeSet<String> treeSet0 = new TreeSet<String>();
      assertEquals("[]", treeSet0.toString());
      assertNotNull(treeSet0);
      
      boolean boolean0 = false;
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5_STRICT;
      Config config0 = new Config(treeSet0, treeSet0, boolean0, config_LanguageMode0, boolean0);
      assertEquals("[]", treeSet0.toString());
      assertNotNull(config0);
      
      ErrorCollector errorCollector0 = new ErrorCollector();
      assertNotNull(errorCollector0);
      
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, comment0, string0, config0, errorCollector0);
      assertEquals("133", labeledStatement0.toString());
      assertEquals(133, labeledStatement0.getType());
      assertEquals(-1, labeledStatement0.getAbsolutePosition());
      assertNull(labeledStatement0.getJsDoc());
      assertEquals(1, labeledStatement0.getLength());
      assertEquals(0, labeledStatement0.depth());
      assertEquals(-1, labeledStatement0.getLineno());
      assertEquals(-1, labeledStatement0.getPosition());
      assertEquals(false, labeledStatement0.hasChildren());
      assertEquals("[]", treeSet0.toString());
      assertFalse(int0 == int1);
      assertNotNull(jsDocInfoParser0);
      
      // Undeclared exception!
      try {
        boolean boolean1 = jsDocInfoParser0.parse();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test01()  throws Throwable  {
      String string0 = "{`";
      Node node0 = JsDocInfoParser.parseTypeString(string0);
      assertNull(node0);
  }

  @Test
  public void test02()  throws Throwable  {
      String string0 = "{|U";
      Node node0 = JsDocInfoParser.parseTypeString(string0);
      assertNull(node0);
  }

  @Test
  public void test03()  throws Throwable  {
      String string0 = "C!|{vc:]XP'Si";
      Node node0 = JsDocInfoParser.parseTypeString(string0);
      assertNull(node0);
  }

  @Test
  public void test04()  throws Throwable  {
      String string0 = "[FI\\Yx4E]L_33";
      Node node0 = JsDocInfoParser.parseTypeString(string0);
      assertEquals(1, node0.getCharno());
      assertEquals(true, node0.hasChildren());
      assertEquals(1, node0.getSourcePosition());
      assertEquals(1, node0.getChildCount());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(true, node0.hasOneChild());
      assertEquals(79, node0.getType());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(0, node0.getLineno());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isVarArgs());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertNotNull(node0);
  }

  @Test
  public void test05()  throws Throwable  {
      String string0 = "(I)C";
      Node node0 = JsDocInfoParser.parseTypeString(string0);
      assertEquals(1, node0.getChildCount());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(0, node0.getLineno());
      assertEquals(1, node0.getSourcePosition());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(301, node0.getType());
      assertEquals(true, node0.hasChildren());
      assertEquals(1, node0.getCharno());
      assertEquals(true, node0.hasOneChild());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertNotNull(node0);
  }

  @Test
  public void test06()  throws Throwable  {
      String string0 = "8|U9r,";
      Node node0 = JsDocInfoParser.parseTypeString(string0);
      assertNull(node0);
  }

  @Test
  public void test07()  throws Throwable  {
      String string0 = "7|;Nk|b'BS}hl";
      Node node0 = JsDocInfoParser.parseTypeString(string0);
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(true, node0.hasMoreThanOneChild());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(301, node0.getType());
      assertEquals(2, node0.getCharno());
      assertEquals(2, node0.getSourcePosition());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(true, node0.hasChildren());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(0, node0.getLineno());
      assertEquals(3, node0.getChildCount());
      assertNotNull(node0);
  }

  @Test
  public void test08()  throws Throwable  {
      String string0 = "undefined";
      Node node0 = JsDocInfoParser.parseTypeString(string0);
      assertEquals(false, node0.isVarArgs());
      assertEquals(0, node0.getLineno());
      assertEquals(0, node0.getSourcePosition());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(40, node0.getType());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(0, node0.getChildCount());
      assertEquals(0, node0.getCharno());
      assertEquals(false, node0.isQuotedString());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertNotNull(node0);
  }

  @Test
  public void test09()  throws Throwable  {
      String string0 = "null";
      Node node0 = JsDocInfoParser.parseTypeString(string0);
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(0, node0.getSourcePosition());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.hasChildren());
      assertEquals(0, node0.getCharno());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(0, node0.getLineno());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(40, node0.getType());
      assertNotNull(node0);
  }

  @Test
  public void test10()  throws Throwable  {
      String string0 = "function";
      Node node0 = JsDocInfoParser.parseTypeString(string0);
      assertNull(node0);
  }

  @Test
  public void test11()  throws Throwable  {
      String string0 = "*jZ[";
      Node node0 = JsDocInfoParser.parseTypeString(string0);
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.hasChildren());
      assertEquals(0, node0.getCharno());
      assertEquals(false, node0.hasOneChild());
      assertEquals(0, node0.getChildCount());
      assertEquals(0, node0.getSourcePosition());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(302, node0.getType());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(0, node0.getLineno());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isLocalResultCall());
      assertNotNull(node0);
  }

  @Test
  public void test12()  throws Throwable  {
      String string0 = "NjBM+?C|6zb(C}DUu0`";
      Node node0 = JsDocInfoParser.parseTypeString(string0);
      assertEquals(1, node0.getChildCount());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(304, node0.getType());
      assertEquals(true, node0.hasChildren());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(true, node0.hasOneChild());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isVarArgs());
      assertEquals(0, node0.getLineno());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(5, node0.getSourcePosition());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(5, node0.getCharno());
      assertNotNull(node0);
  }

  @Test
  public void test13()  throws Throwable  {
      String string0 = "[?|%I*";
      Node node0 = JsDocInfoParser.parseTypeString(string0);
      assertNull(node0);
  }

  @Test
  public void test14()  throws Throwable  {
      String string0 = "[?16";
      Node node0 = JsDocInfoParser.parseTypeString(string0);
      assertNull(node0);
  }

  @Test
  public void test15()  throws Throwable  {
      String string0 = "? =Uw?12B`G3";
      Node node0 = JsDocInfoParser.parseTypeString(string0);
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.hasOneChild());
      assertEquals(304, node0.getType());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(2, node0.getCharno());
      assertEquals(0, node0.getLineno());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(2, node0.getSourcePosition());
      assertEquals(false, node0.wasEmptyNode());
      assertNotNull(node0);
  }

  @Test
  public void test16()  throws Throwable  {
      String string0 = "U.<!x=^ z";
      Node node0 = JsDocInfoParser.parseTypeString(string0);
      assertNull(node0);
  }

  @Test
  public void test17()  throws Throwable  {
      String string0 = "Jz|||";
      Node node0 = JsDocInfoParser.parseTypeString(string0);
      assertNull(node0);
  }

  @Test
  public void test18()  throws Throwable  {
      String string0 = "C!|{vc:P\\'Si";
      Node node0 = JsDocInfoParser.parseTypeString(string0);
      assertNull(node0);
  }

  @Test
  public void test19()  throws Throwable  {
      String string0 = "AYWKEY*C'F,f3P,";
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream(string0);
      assertNotNull(jsDocTokenStream0);
      
      Comment comment0 = null;
      TreeSet<String> treeSet0 = new TreeSet<String>();
      assertEquals("[]", treeSet0.toString());
      assertNotNull(treeSet0);
      
      boolean boolean0 = true;
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5_STRICT;
      boolean boolean1 = treeSet0.add(string0);
      assertEquals("[AYWKEY*C'F,f3P,]", treeSet0.toString());
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      JsDocToken jsDocToken0 = jsDocTokenStream0.getJsDocToken();
      assertEquals("STRING", jsDocToken0.name());
      assertEquals(4, jsDocToken0.ordinal());
      assertEquals("STRING", jsDocToken0.toString());
      
      Config config0 = new Config(treeSet0, treeSet0, boolean0, config_LanguageMode0, boolean1);
      assertEquals("[AYWKEY*C'F,f3P,]", treeSet0.toString());
      assertTrue(boolean0 == boolean1);
      assertTrue(boolean1 == boolean0);
      assertNotNull(config0);
      
      ToolErrorReporter toolErrorReporter0 = new ToolErrorReporter(boolean0);
      assertEquals(false, toolErrorReporter0.hasReportedError());
      assertEquals(true, toolErrorReporter0.isReportingWarnings());
      assertTrue(boolean0 == boolean1);
      assertNotNull(toolErrorReporter0);
      
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, comment0, string0, config0, toolErrorReporter0);
      assertEquals(false, toolErrorReporter0.hasReportedError());
      assertEquals(true, toolErrorReporter0.isReportingWarnings());
      assertEquals("[AYWKEY*C'F,f3P,]", treeSet0.toString());
      assertTrue(boolean0 == boolean1);
      assertTrue(boolean1 == boolean0);
      assertNotNull(jsDocInfoParser0);
      
      boolean boolean2 = jsDocInfoParser0.parse();
      assertEquals(false, toolErrorReporter0.hasReportedError());
      assertEquals(true, toolErrorReporter0.isReportingWarnings());
      assertEquals("[AYWKEY*C'F,f3P,]", treeSet0.toString());
      assertFalse(boolean2);
      assertFalse(boolean0 == boolean2);
      assertTrue(boolean0 == boolean1);
      assertFalse(boolean1 == boolean2);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
  }

  @Test
  public void test20()  throws Throwable  {
      String string0 = ";-\n";
      int int0 = (-585);
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream(string0, int0, int0);
      assertNotNull(jsDocTokenStream0);
      
      LabeledStatement labeledStatement0 = new LabeledStatement();
      assertNull(labeledStatement0.getJsDoc());
      assertEquals(1, labeledStatement0.getLength());
      assertEquals(-1, labeledStatement0.getPosition());
      assertEquals(0, labeledStatement0.depth());
      assertEquals(133, labeledStatement0.getType());
      assertEquals("133", labeledStatement0.toString());
      assertEquals(-1, labeledStatement0.getAbsolutePosition());
      assertEquals(false, labeledStatement0.hasChildren());
      assertEquals(-1, labeledStatement0.getLineno());
      assertNotNull(labeledStatement0);
      
      Comment comment0 = labeledStatement0.getJsDocNode();
      assertNull(labeledStatement0.getJsDoc());
      assertEquals(1, labeledStatement0.getLength());
      assertEquals(-1, labeledStatement0.getPosition());
      assertEquals(0, labeledStatement0.depth());
      assertEquals(133, labeledStatement0.getType());
      assertEquals("133", labeledStatement0.toString());
      assertEquals(-1, labeledStatement0.getAbsolutePosition());
      assertEquals(false, labeledStatement0.hasChildren());
      assertEquals(-1, labeledStatement0.getLineno());
      assertNull(comment0);
      
      TreeSet<String> treeSet0 = new TreeSet<String>();
      assertEquals("[]", treeSet0.toString());
      assertNotNull(treeSet0);
      
      boolean boolean0 = true;
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5_STRICT;
      Config config0 = new Config(treeSet0, treeSet0, boolean0, config_LanguageMode0, boolean0);
      assertEquals("[]", treeSet0.toString());
      assertNotNull(config0);
      
      ErrorCollector errorCollector0 = new ErrorCollector();
      assertNotNull(errorCollector0);
      
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, comment0, string0, config0, errorCollector0);
      assertNull(labeledStatement0.getJsDoc());
      assertEquals(1, labeledStatement0.getLength());
      assertEquals(-1, labeledStatement0.getPosition());
      assertEquals(0, labeledStatement0.depth());
      assertEquals(133, labeledStatement0.getType());
      assertEquals("133", labeledStatement0.toString());
      assertEquals(-1, labeledStatement0.getAbsolutePosition());
      assertEquals(false, labeledStatement0.hasChildren());
      assertEquals(-1, labeledStatement0.getLineno());
      assertEquals("[]", treeSet0.toString());
      assertNotNull(jsDocInfoParser0);
      
      // Undeclared exception!
      try {
        boolean boolean1 = jsDocInfoParser0.parse();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test21()  throws Throwable  {
      String string0 = "nB8<%h6=oKiMNVb#";
      int int0 = 31;
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream(string0, int0, int0);
      assertNotNull(jsDocTokenStream0);
      
      XmlMemberGet xmlMemberGet0 = new XmlMemberGet(int0, int0);
      assertEquals(31, xmlMemberGet0.getPosition());
      assertEquals(-1, xmlMemberGet0.getLineno());
      assertNull(xmlMemberGet0.getJsDoc());
      assertEquals(31, xmlMemberGet0.getAbsolutePosition());
      assertEquals(-1, xmlMemberGet0.getOperatorPosition());
      assertEquals(false, xmlMemberGet0.hasChildren());
      assertEquals("143", xmlMemberGet0.toString());
      assertEquals(31, xmlMemberGet0.getLength());
      assertEquals(0, xmlMemberGet0.depth());
      assertEquals(143, xmlMemberGet0.getType());
      assertNotNull(xmlMemberGet0);
      
      JsDocToken jsDocToken0 = jsDocTokenStream0.getJsDocToken();
      assertEquals("STRING", jsDocToken0.toString());
      assertEquals("STRING", jsDocToken0.name());
      assertEquals(4, jsDocToken0.ordinal());
      
      Comment comment0 = xmlMemberGet0.getJsDocNode();
      assertEquals(31, xmlMemberGet0.getPosition());
      assertEquals(-1, xmlMemberGet0.getLineno());
      assertNull(xmlMemberGet0.getJsDoc());
      assertEquals(31, xmlMemberGet0.getAbsolutePosition());
      assertEquals(-1, xmlMemberGet0.getOperatorPosition());
      assertEquals(false, xmlMemberGet0.hasChildren());
      assertEquals("143", xmlMemberGet0.toString());
      assertEquals(31, xmlMemberGet0.getLength());
      assertEquals(0, xmlMemberGet0.depth());
      assertEquals(143, xmlMemberGet0.getType());
      assertNull(comment0);
      
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      assertEquals(true, linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertEquals("[]", linkedHashSet0.toString());
      assertNotNull(linkedHashSet0);
      
      boolean boolean0 = true;
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5;
      Config config0 = new Config(linkedHashSet0, linkedHashSet0, boolean0, config_LanguageMode0, boolean0);
      assertEquals(true, linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertEquals("[]", linkedHashSet0.toString());
      assertNotNull(config0);
      
      Context context0 = new Context();
      assertFalse(context0.generateObserverCount);
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertEquals(2147483647, context0.getMaximumInterpreterStackDepth());
      assertEquals(0, context0.getOptimizationLevel());
      assertEquals(false, context0.hasCompileFunctionsWithDynamicScope());
      assertEquals(0, context0.getLanguageVersion());
      assertEquals(false, context0.isGeneratingDebug());
      assertEquals(true, context0.isGeneratingSource());
      assertEquals(false, context0.isSealed());
      assertEquals(false, context0.isGeneratingDebugChanged());
      assertNotNull(context0);
      
      ErrorReporter errorReporter0 = context0.getErrorReporter();
      assertFalse(context0.generateObserverCount);
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertEquals(2147483647, context0.getMaximumInterpreterStackDepth());
      assertEquals(0, context0.getOptimizationLevel());
      assertEquals(false, context0.hasCompileFunctionsWithDynamicScope());
      assertEquals(0, context0.getLanguageVersion());
      assertEquals(false, context0.isGeneratingDebug());
      assertEquals(true, context0.isGeneratingSource());
      assertEquals(false, context0.isSealed());
      assertEquals(false, context0.isGeneratingDebugChanged());
      assertNotNull(errorReporter0);
      
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, comment0, string0, config0, errorReporter0);
      assertFalse(context0.generateObserverCount);
      assertEquals(true, linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertEquals("[]", linkedHashSet0.toString());
      assertEquals(31, xmlMemberGet0.getPosition());
      assertEquals(-1, xmlMemberGet0.getLineno());
      assertNull(xmlMemberGet0.getJsDoc());
      assertEquals(31, xmlMemberGet0.getAbsolutePosition());
      assertEquals(-1, xmlMemberGet0.getOperatorPosition());
      assertEquals(false, xmlMemberGet0.hasChildren());
      assertEquals("143", xmlMemberGet0.toString());
      assertEquals(31, xmlMemberGet0.getLength());
      assertEquals(0, xmlMemberGet0.depth());
      assertEquals(143, xmlMemberGet0.getType());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertEquals(2147483647, context0.getMaximumInterpreterStackDepth());
      assertEquals(0, context0.getOptimizationLevel());
      assertEquals(false, context0.hasCompileFunctionsWithDynamicScope());
      assertEquals(0, context0.getLanguageVersion());
      assertEquals(false, context0.isGeneratingDebug());
      assertEquals(true, context0.isGeneratingSource());
      assertEquals(false, context0.isSealed());
      assertEquals(false, context0.isGeneratingDebugChanged());
      assertNotNull(jsDocInfoParser0);
      
      boolean boolean1 = jsDocInfoParser0.parse();
      assertFalse(context0.generateObserverCount);
      assertEquals(true, linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertEquals("[]", linkedHashSet0.toString());
      assertEquals(31, xmlMemberGet0.getPosition());
      assertEquals(-1, xmlMemberGet0.getLineno());
      assertNull(xmlMemberGet0.getJsDoc());
      assertEquals(31, xmlMemberGet0.getAbsolutePosition());
      assertEquals(-1, xmlMemberGet0.getOperatorPosition());
      assertEquals(false, xmlMemberGet0.hasChildren());
      assertEquals("143", xmlMemberGet0.toString());
      assertEquals(31, xmlMemberGet0.getLength());
      assertEquals(0, xmlMemberGet0.depth());
      assertEquals(143, xmlMemberGet0.getType());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertEquals(2147483647, context0.getMaximumInterpreterStackDepth());
      assertEquals(0, context0.getOptimizationLevel());
      assertEquals(false, context0.hasCompileFunctionsWithDynamicScope());
      assertEquals(0, context0.getLanguageVersion());
      assertEquals(false, context0.isGeneratingDebug());
      assertEquals(true, context0.isGeneratingSource());
      assertEquals(false, context0.isSealed());
      assertEquals(false, context0.isGeneratingDebugChanged());
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean0 == boolean1);
  }

  @Test
  public void test22() {}
//   @Test
//   public void test22()  throws Throwable  {
//       String string0 = "]q9f9rTM";
//       int int0 = 0;
//       JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream(string0, int0, int0);
//       //  // Unstable assertion: assertNotNull(jsDocTokenStream0);
//       
//       Comment comment0 = null;
//       Charset charset0 = Charset.defaultCharset();
//       //  // Unstable assertion: assertEquals("UTF-8", charset0.displayName());
//       //  // Unstable assertion: assertEquals("UTF-8", charset0.name());
//       //  // Unstable assertion: assertEquals(true, charset0.isRegistered());
//       //  // Unstable assertion: assertEquals("UTF-8", charset0.toString());
//       //  // Unstable assertion: assertEquals(true, charset0.canEncode());
//       //  // Unstable assertion: assertNotNull(charset0);
//       
//       Set<String> set0 = charset0.aliases();
//       //  // Unstable assertion: assertEquals("UTF-8", charset0.displayName());
//       //  // Unstable assertion: assertEquals("UTF-8", charset0.name());
//       //  // Unstable assertion: assertEquals(true, charset0.isRegistered());
//       //  // Unstable assertion: assertEquals("UTF-8", charset0.toString());
//       //  // Unstable assertion: assertEquals(true, charset0.canEncode());
//       //  // Unstable assertion: assertEquals(2, set0.size());
//       //  // Unstable assertion: assertEquals(false, set0.isEmpty());
//       //  // Unstable assertion: assertNotNull(set0);
//       
//       boolean boolean0 = true;
//       Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5;
//       Config config0 = new Config(set0, set0, boolean0, config_LanguageMode0, boolean0);
//       //  // Unstable assertion: assertEquals("UTF-8", charset0.displayName());
//       //  // Unstable assertion: assertEquals("UTF-8", charset0.name());
//       //  // Unstable assertion: assertEquals(true, charset0.isRegistered());
//       //  // Unstable assertion: assertEquals("UTF-8", charset0.toString());
//       //  // Unstable assertion: assertEquals(true, charset0.canEncode());
//       //  // Unstable assertion: assertEquals(2, set0.size());
//       //  // Unstable assertion: assertEquals(false, set0.isEmpty());
//       //  // Unstable assertion: assertNotNull(config0);
//       
//       Context context0 = Context.enter();
//       //  // Unstable assertion: assertTrue(context0.generateObserverCount);
//       //  // Unstable assertion: assertEquals(false, context0.isGeneratingDebugChanged());
//       //  // Unstable assertion: assertEquals(0, context0.getLanguageVersion());
//       //  // Unstable assertion: assertEquals(0, context0.getInstructionObserverThreshold());
//       //  // Unstable assertion: assertEquals(false, context0.isGeneratingDebug());
//       //  // Unstable assertion: assertEquals(false, context0.isSealed());
//       //  // Unstable assertion: assertEquals(2147483647, context0.getMaximumInterpreterStackDepth());
//       //  // Unstable assertion: assertEquals(true, context0.isGeneratingSource());
//       //  // Unstable assertion: assertEquals(0, context0.getOptimizationLevel());
//       //  // Unstable assertion: assertEquals(false, context0.hasCompileFunctionsWithDynamicScope());
//       //  // Unstable assertion: assertNotNull(context0);
//       
//       ErrorCollector errorCollector0 = (ErrorCollector)context0.getErrorReporter();
//       //  // Unstable assertion: assertTrue(context0.generateObserverCount);
//       //  // Unstable assertion: assertEquals(false, context0.isGeneratingDebugChanged());
//       //  // Unstable assertion: assertEquals(0, context0.getLanguageVersion());
//       //  // Unstable assertion: assertEquals(0, context0.getInstructionObserverThreshold());
//       //  // Unstable assertion: assertEquals(false, context0.isGeneratingDebug());
//       //  // Unstable assertion: assertEquals(false, context0.isSealed());
//       //  // Unstable assertion: assertEquals(2147483647, context0.getMaximumInterpreterStackDepth());
//       //  // Unstable assertion: assertEquals(true, context0.isGeneratingSource());
//       //  // Unstable assertion: assertEquals(0, context0.getOptimizationLevel());
//       //  // Unstable assertion: assertEquals(false, context0.hasCompileFunctionsWithDynamicScope());
//       //  // Unstable assertion: assertNotNull(errorCollector0);
//       
//       JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, comment0, string0, config0, errorCollector0);
//       //  // Unstable assertion: assertTrue(context0.generateObserverCount);
//       //  // Unstable assertion: assertEquals("UTF-8", charset0.displayName());
//       //  // Unstable assertion: assertEquals("UTF-8", charset0.name());
//       //  // Unstable assertion: assertEquals(true, charset0.isRegistered());
//       //  // Unstable assertion: assertEquals("UTF-8", charset0.toString());
//       //  // Unstable assertion: assertEquals(true, charset0.canEncode());
//       //  // Unstable assertion: assertEquals(2, set0.size());
//       //  // Unstable assertion: assertEquals(false, set0.isEmpty());
//       //  // Unstable assertion: assertEquals(false, context0.isGeneratingDebugChanged());
//       //  // Unstable assertion: assertEquals(0, context0.getLanguageVersion());
//       //  // Unstable assertion: assertEquals(0, context0.getInstructionObserverThreshold());
//       //  // Unstable assertion: assertEquals(false, context0.isGeneratingDebug());
//       //  // Unstable assertion: assertEquals(false, context0.isSealed());
//       //  // Unstable assertion: assertEquals(2147483647, context0.getMaximumInterpreterStackDepth());
//       //  // Unstable assertion: assertEquals(true, context0.isGeneratingSource());
//       //  // Unstable assertion: assertEquals(0, context0.getOptimizationLevel());
//       //  // Unstable assertion: assertEquals(false, context0.hasCompileFunctionsWithDynamicScope());
//       //  // Unstable assertion: assertNotNull(jsDocInfoParser0);
//       
//       // Undeclared exception!
//       try {
//         boolean boolean1 = jsDocInfoParser0.parse();
//        //  fail("Expecting exception: UnsupportedOperationException");
//        // Unstable assertion
//       } catch(UnsupportedOperationException e) {
//          //
//          // no message in exception (getMessage() returned null)
//          //
//       }
//   }

  @Test
  public void test23()  throws Throwable  {
      String string0 = ";(";
      int int0 = (-585);
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream(string0, int0, int0);
      assertNotNull(jsDocTokenStream0);
      
      int int1 = jsDocTokenStream0.getChar();
      assertEquals(59, int1);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      
      LabeledStatement labeledStatement0 = new LabeledStatement();
      assertEquals(-1, labeledStatement0.getLineno());
      assertEquals(133, labeledStatement0.getType());
      assertNull(labeledStatement0.getJsDoc());
      assertEquals(-1, labeledStatement0.getPosition());
      assertEquals(false, labeledStatement0.hasChildren());
      assertEquals(1, labeledStatement0.getLength());
      assertEquals("133", labeledStatement0.toString());
      assertEquals(0, labeledStatement0.depth());
      assertEquals(-1, labeledStatement0.getAbsolutePosition());
      assertNotNull(labeledStatement0);
      
      Comment comment0 = labeledStatement0.getJsDocNode();
      assertEquals(-1, labeledStatement0.getLineno());
      assertEquals(133, labeledStatement0.getType());
      assertNull(labeledStatement0.getJsDoc());
      assertEquals(-1, labeledStatement0.getPosition());
      assertEquals(false, labeledStatement0.hasChildren());
      assertEquals(1, labeledStatement0.getLength());
      assertEquals("133", labeledStatement0.toString());
      assertEquals(0, labeledStatement0.depth());
      assertEquals(-1, labeledStatement0.getAbsolutePosition());
      assertNull(comment0);
      
      TreeSet<String> treeSet0 = new TreeSet<String>();
      assertEquals("[]", treeSet0.toString());
      assertNotNull(treeSet0);
      
      boolean boolean0 = true;
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5_STRICT;
      Config config0 = new Config(treeSet0, treeSet0, boolean0, config_LanguageMode0, boolean0);
      assertEquals("[]", treeSet0.toString());
      assertNotNull(config0);
      
      ErrorCollector errorCollector0 = new ErrorCollector();
      assertNotNull(errorCollector0);
      
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, comment0, string0, config0, errorCollector0);
      assertEquals("[]", treeSet0.toString());
      assertEquals(-1, labeledStatement0.getLineno());
      assertEquals(133, labeledStatement0.getType());
      assertNull(labeledStatement0.getJsDoc());
      assertEquals(-1, labeledStatement0.getPosition());
      assertEquals(false, labeledStatement0.hasChildren());
      assertEquals(1, labeledStatement0.getLength());
      assertEquals("133", labeledStatement0.toString());
      assertEquals(0, labeledStatement0.depth());
      assertEquals(-1, labeledStatement0.getAbsolutePosition());
      assertFalse(int0 == int1);
      assertNotNull(jsDocInfoParser0);
      
      // Undeclared exception!
      try {
        boolean boolean1 = jsDocInfoParser0.parse();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test24()  throws Throwable  {
      TreeSet<String> treeSet0 = new TreeSet<String>();
      assertEquals("[]", treeSet0.toString());
      assertNotNull(treeSet0);
      
      String string0 = "M[E1";
      String string1 = "{=iAVKOh`ua";
      assertNotSame(string1, string0);
      
      int int0 = (-2505);
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream(string1, int0, int0);
      assertFalse(string1.equals((Object)string0));
      assertNotSame(string1, string0);
      assertNotNull(jsDocTokenStream0);
      
      ErrorNode errorNode0 = new ErrorNode();
      assertEquals(false, errorNode0.hasChildren());
      assertEquals(-1, errorNode0.getType());
      assertEquals(0, errorNode0.depth());
      assertNull(errorNode0.getMessage());
      assertEquals(-1, errorNode0.getLineno());
      assertEquals(1, errorNode0.getLength());
      assertEquals(-1, errorNode0.getPosition());
      assertEquals("-1", errorNode0.toString());
      assertEquals(-1, errorNode0.getAbsolutePosition());
      assertNull(errorNode0.getJsDoc());
      assertNotNull(errorNode0);
      
      Comment comment0 = errorNode0.getJsDocNode();
      assertEquals(false, errorNode0.hasChildren());
      assertEquals(-1, errorNode0.getType());
      assertEquals(0, errorNode0.depth());
      assertNull(errorNode0.getMessage());
      assertEquals(-1, errorNode0.getLineno());
      assertEquals(1, errorNode0.getLength());
      assertEquals(-1, errorNode0.getPosition());
      assertEquals("-1", errorNode0.toString());
      assertEquals(-1, errorNode0.getAbsolutePosition());
      assertNull(errorNode0.getJsDoc());
      assertNull(comment0);
      
      boolean boolean0 = true;
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5;
      Config config0 = new Config(treeSet0, treeSet0, boolean0, config_LanguageMode0, boolean0);
      assertEquals("[]", treeSet0.toString());
      assertNotNull(config0);
      
      ErrorCollector errorCollector0 = new ErrorCollector();
      assertNotNull(errorCollector0);
      
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, comment0, string0, config0, errorCollector0);
      assertEquals(false, errorNode0.hasChildren());
      assertEquals(-1, errorNode0.getType());
      assertEquals(0, errorNode0.depth());
      assertNull(errorNode0.getMessage());
      assertEquals(-1, errorNode0.getLineno());
      assertEquals(1, errorNode0.getLength());
      assertEquals(-1, errorNode0.getPosition());
      assertEquals("-1", errorNode0.toString());
      assertEquals(-1, errorNode0.getAbsolutePosition());
      assertNull(errorNode0.getJsDoc());
      assertEquals("[]", treeSet0.toString());
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertNotNull(jsDocInfoParser0);
      
      // Undeclared exception!
      try {
        boolean boolean1 = jsDocInfoParser0.parse();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test25()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      String string0 = "[object ";
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream(string0);
      assertNotNull(jsDocTokenStream0);
      
      int int0 = (-51);
      DoLoop doLoop0 = new DoLoop(int0);
      assertEquals("118", doLoop0.toString());
      assertEquals(-1, doLoop0.getWhilePosition());
      assertEquals(-51, doLoop0.getAbsolutePosition());
      assertEquals(-1, doLoop0.getLp());
      assertEquals(118, doLoop0.getType());
      assertEquals(1, doLoop0.getLength());
      assertEquals(false, doLoop0.hasChildren());
      assertEquals(-1, doLoop0.getLineno());
      assertEquals(-1, doLoop0.getRp());
      assertNull(doLoop0.getJsDoc());
      assertEquals(-51, doLoop0.getPosition());
      assertEquals(0, doLoop0.depth());
      assertNotNull(doLoop0);
      
      Comment comment0 = doLoop0.getJsDocNode();
      assertEquals("118", doLoop0.toString());
      assertEquals(-1, doLoop0.getWhilePosition());
      assertEquals(-51, doLoop0.getAbsolutePosition());
      assertEquals(-1, doLoop0.getLp());
      assertEquals(118, doLoop0.getType());
      assertEquals(1, doLoop0.getLength());
      assertEquals(false, doLoop0.hasChildren());
      assertEquals(-1, doLoop0.getLineno());
      assertEquals(-1, doLoop0.getRp());
      assertNull(doLoop0.getJsDoc());
      assertEquals(-51, doLoop0.getPosition());
      assertEquals(0, doLoop0.depth());
      assertNull(comment0);
      
      Locale locale0 = Locale.PRC;
      assertEquals("zh_CN", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CN", locale0.getCountry());
      assertEquals("CHN", locale0.getISO3Country());
      assertNotNull(locale0);
      
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      assertEquals("zh_CN", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CN", locale0.getCountry());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals(true, set0.isEmpty());
      assertEquals(0, set0.size());
      assertNotNull(set0);
      
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT3;
      Config config0 = new Config(set0, set0, boolean0, config_LanguageMode0, boolean0);
      assertEquals("zh_CN", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CN", locale0.getCountry());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals(true, set0.isEmpty());
      assertEquals(0, set0.size());
      assertNotNull(config0);
      
      ErrorCollector errorCollector0 = new ErrorCollector();
      assertNotNull(errorCollector0);
      
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, comment0, string0, config0, errorCollector0);
      assertEquals("118", doLoop0.toString());
      assertEquals(-1, doLoop0.getWhilePosition());
      assertEquals(-51, doLoop0.getAbsolutePosition());
      assertEquals(-1, doLoop0.getLp());
      assertEquals(118, doLoop0.getType());
      assertEquals(1, doLoop0.getLength());
      assertEquals(false, doLoop0.hasChildren());
      assertEquals(-1, doLoop0.getLineno());
      assertEquals(-1, doLoop0.getRp());
      assertNull(doLoop0.getJsDoc());
      assertEquals(-51, doLoop0.getPosition());
      assertEquals(0, doLoop0.depth());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CN", locale0.getCountry());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals(true, set0.isEmpty());
      assertEquals(0, set0.size());
      assertNotNull(jsDocInfoParser0);
      
      // Undeclared exception!
      try {
        boolean boolean1 = jsDocInfoParser0.parse();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test26()  throws Throwable  {
      String string0 = "nB8:%h$=oK\"MNVb#";
      int int0 = (-3587);
      String string1 = "*iG&d";
      assertNotSame(string1, string0);
      
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream(string1, int0, int0);
      assertFalse(string1.equals((Object)string0));
      assertNotSame(string1, string0);
      assertNotNull(jsDocTokenStream0);
      
      XmlMemberGet xmlMemberGet0 = new XmlMemberGet(int0, int0);
      assertEquals(143, xmlMemberGet0.getType());
      assertEquals("143", xmlMemberGet0.toString());
      assertEquals(false, xmlMemberGet0.hasChildren());
      assertEquals(0, xmlMemberGet0.depth());
      assertEquals(-1, xmlMemberGet0.getOperatorPosition());
      assertEquals(-3587, xmlMemberGet0.getAbsolutePosition());
      assertEquals(-1, xmlMemberGet0.getLineno());
      assertEquals(-3587, xmlMemberGet0.getPosition());
      assertEquals(-3587, xmlMemberGet0.getLength());
      assertNull(xmlMemberGet0.getJsDoc());
      assertNotNull(xmlMemberGet0);
      
      Comment comment0 = xmlMemberGet0.getJsDocNode();
      assertEquals(143, xmlMemberGet0.getType());
      assertEquals("143", xmlMemberGet0.toString());
      assertEquals(false, xmlMemberGet0.hasChildren());
      assertEquals(0, xmlMemberGet0.depth());
      assertEquals(-1, xmlMemberGet0.getOperatorPosition());
      assertEquals(-3587, xmlMemberGet0.getAbsolutePosition());
      assertEquals(-1, xmlMemberGet0.getLineno());
      assertEquals(-3587, xmlMemberGet0.getPosition());
      assertEquals(-3587, xmlMemberGet0.getLength());
      assertNull(xmlMemberGet0.getJsDoc());
      assertNull(comment0);
      
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      assertEquals(0, linkedHashSet0.size());
      assertEquals("[]", linkedHashSet0.toString());
      assertEquals(true, linkedHashSet0.isEmpty());
      assertNotNull(linkedHashSet0);
      
      boolean boolean0 = false;
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5_STRICT;
      Config config0 = new Config(linkedHashSet0, linkedHashSet0, boolean0, config_LanguageMode0, boolean0);
      assertEquals(0, linkedHashSet0.size());
      assertEquals("[]", linkedHashSet0.toString());
      assertEquals(true, linkedHashSet0.isEmpty());
      assertNotNull(config0);
      
      Context context0 = new Context();
      assertFalse(context0.generateObserverCount);
      assertEquals(2147483647, context0.getMaximumInterpreterStackDepth());
      assertEquals(false, context0.isGeneratingDebug());
      assertEquals(false, context0.hasCompileFunctionsWithDynamicScope());
      assertEquals(false, context0.isSealed());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertEquals(false, context0.isGeneratingDebugChanged());
      assertEquals(true, context0.isGeneratingSource());
      assertEquals(0, context0.getLanguageVersion());
      assertEquals(0, context0.getOptimizationLevel());
      assertNotNull(context0);
      
      ErrorReporter errorReporter0 = context0.getErrorReporter();
      assertFalse(context0.generateObserverCount);
      assertEquals(2147483647, context0.getMaximumInterpreterStackDepth());
      assertEquals(false, context0.isGeneratingDebug());
      assertEquals(false, context0.hasCompileFunctionsWithDynamicScope());
      assertEquals(false, context0.isSealed());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertEquals(false, context0.isGeneratingDebugChanged());
      assertEquals(true, context0.isGeneratingSource());
      assertEquals(0, context0.getLanguageVersion());
      assertEquals(0, context0.getOptimizationLevel());
      assertNotNull(errorReporter0);
      
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, comment0, string0, config0, errorReporter0);
      assertFalse(context0.generateObserverCount);
      assertEquals(143, xmlMemberGet0.getType());
      assertEquals("143", xmlMemberGet0.toString());
      assertEquals(false, xmlMemberGet0.hasChildren());
      assertEquals(0, xmlMemberGet0.depth());
      assertEquals(-1, xmlMemberGet0.getOperatorPosition());
      assertEquals(-3587, xmlMemberGet0.getAbsolutePosition());
      assertEquals(-1, xmlMemberGet0.getLineno());
      assertEquals(-3587, xmlMemberGet0.getPosition());
      assertEquals(-3587, xmlMemberGet0.getLength());
      assertNull(xmlMemberGet0.getJsDoc());
      assertEquals(0, linkedHashSet0.size());
      assertEquals("[]", linkedHashSet0.toString());
      assertEquals(true, linkedHashSet0.isEmpty());
      assertEquals(2147483647, context0.getMaximumInterpreterStackDepth());
      assertEquals(false, context0.isGeneratingDebug());
      assertEquals(false, context0.hasCompileFunctionsWithDynamicScope());
      assertEquals(false, context0.isSealed());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertEquals(false, context0.isGeneratingDebugChanged());
      assertEquals(true, context0.isGeneratingSource());
      assertEquals(0, context0.getLanguageVersion());
      assertEquals(0, context0.getOptimizationLevel());
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertNotNull(jsDocInfoParser0);
      
      boolean boolean1 = jsDocInfoParser0.parse();
      assertFalse(context0.generateObserverCount);
      assertEquals(143, xmlMemberGet0.getType());
      assertEquals("143", xmlMemberGet0.toString());
      assertEquals(false, xmlMemberGet0.hasChildren());
      assertEquals(0, xmlMemberGet0.depth());
      assertEquals(-1, xmlMemberGet0.getOperatorPosition());
      assertEquals(-3587, xmlMemberGet0.getAbsolutePosition());
      assertEquals(-1, xmlMemberGet0.getLineno());
      assertEquals(-3587, xmlMemberGet0.getPosition());
      assertEquals(-3587, xmlMemberGet0.getLength());
      assertNull(xmlMemberGet0.getJsDoc());
      assertEquals(0, linkedHashSet0.size());
      assertEquals("[]", linkedHashSet0.toString());
      assertEquals(true, linkedHashSet0.isEmpty());
      assertEquals(2147483647, context0.getMaximumInterpreterStackDepth());
      assertEquals(false, context0.isGeneratingDebug());
      assertEquals(false, context0.hasCompileFunctionsWithDynamicScope());
      assertEquals(false, context0.isSealed());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertEquals(false, context0.isGeneratingDebugChanged());
      assertEquals(true, context0.isGeneratingSource());
      assertEquals(0, context0.getLanguageVersion());
      assertEquals(0, context0.getOptimizationLevel());
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean0 == boolean1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
  }

  @Test
  public void test27()  throws Throwable  {
      String string0 = ";\n";
      int int0 = (-585);
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream(string0, int0, int0);
      assertNotNull(jsDocTokenStream0);
      
      LabeledStatement labeledStatement0 = new LabeledStatement();
      assertEquals(0, labeledStatement0.depth());
      assertEquals(1, labeledStatement0.getLength());
      assertEquals(133, labeledStatement0.getType());
      assertEquals(false, labeledStatement0.hasChildren());
      assertEquals("133", labeledStatement0.toString());
      assertEquals(-1, labeledStatement0.getAbsolutePosition());
      assertNull(labeledStatement0.getJsDoc());
      assertEquals(-1, labeledStatement0.getPosition());
      assertEquals(-1, labeledStatement0.getLineno());
      assertNotNull(labeledStatement0);
      
      Comment comment0 = labeledStatement0.getJsDocNode();
      assertEquals(0, labeledStatement0.depth());
      assertEquals(1, labeledStatement0.getLength());
      assertEquals(133, labeledStatement0.getType());
      assertEquals(false, labeledStatement0.hasChildren());
      assertEquals("133", labeledStatement0.toString());
      assertEquals(-1, labeledStatement0.getAbsolutePosition());
      assertNull(labeledStatement0.getJsDoc());
      assertEquals(-1, labeledStatement0.getPosition());
      assertEquals(-1, labeledStatement0.getLineno());
      assertNull(comment0);
      
      TreeSet<String> treeSet0 = new TreeSet<String>();
      assertEquals("[]", treeSet0.toString());
      assertNotNull(treeSet0);
      
      boolean boolean0 = false;
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5_STRICT;
      Config config0 = new Config(treeSet0, treeSet0, boolean0, config_LanguageMode0, boolean0);
      assertEquals("[]", treeSet0.toString());
      assertNotNull(config0);
      
      ErrorCollector errorCollector0 = new ErrorCollector();
      assertNotNull(errorCollector0);
      
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, comment0, string0, config0, errorCollector0);
      assertEquals("[]", treeSet0.toString());
      assertEquals(0, labeledStatement0.depth());
      assertEquals(1, labeledStatement0.getLength());
      assertEquals(133, labeledStatement0.getType());
      assertEquals(false, labeledStatement0.hasChildren());
      assertEquals("133", labeledStatement0.toString());
      assertEquals(-1, labeledStatement0.getAbsolutePosition());
      assertNull(labeledStatement0.getJsDoc());
      assertEquals(-1, labeledStatement0.getPosition());
      assertEquals(-1, labeledStatement0.getLineno());
      assertNotNull(jsDocInfoParser0);
      
      // Undeclared exception!
      try {
        boolean boolean1 = jsDocInfoParser0.parse();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test28()  throws Throwable  {
      String string0 = "@vnew";
      int int0 = (-4391);
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream(string0, int0);
      assertNotNull(jsDocTokenStream0);
      
      Token.CommentType token_CommentType0 = Token.CommentType.JSDOC;
      Comment comment0 = new Comment(int0, int0, token_CommentType0, string0);
      assertEquals(-1, comment0.getLineno());
      assertEquals("161", comment0.toString());
      assertEquals(161, comment0.getType());
      assertEquals(-4391, comment0.getPosition());
      assertEquals(0, comment0.depth());
      assertEquals(false, comment0.isParsed());
      assertEquals(Token.CommentType.JSDOC, comment0.getCommentType());
      assertEquals(false, comment0.hasChildren());
      assertEquals("@vnew", comment0.getValue());
      assertEquals(-4391, comment0.getAbsolutePosition());
      assertEquals(-4391, comment0.getLength());
      assertNull(comment0.getJsDoc());
      assertNotNull(comment0);
      
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      assertEquals(0, linkedHashSet0.size());
      assertEquals("[]", linkedHashSet0.toString());
      assertEquals(true, linkedHashSet0.isEmpty());
      assertNotNull(linkedHashSet0);
      
      boolean boolean0 = true;
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT3;
      Config config0 = new Config(linkedHashSet0, linkedHashSet0, boolean0, config_LanguageMode0, boolean0);
      assertEquals(0, linkedHashSet0.size());
      assertEquals("[]", linkedHashSet0.toString());
      assertEquals(true, linkedHashSet0.isEmpty());
      assertNotNull(config0);
      
      ErrorCollector errorCollector0 = new ErrorCollector();
      assertNotNull(errorCollector0);
      
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, comment0, string0, config0, errorCollector0);
      assertEquals(-1, comment0.getLineno());
      assertEquals("161", comment0.toString());
      assertEquals(161, comment0.getType());
      assertEquals(-4391, comment0.getPosition());
      assertEquals(0, comment0.depth());
      assertEquals(false, comment0.isParsed());
      assertEquals(Token.CommentType.JSDOC, comment0.getCommentType());
      assertEquals(false, comment0.hasChildren());
      assertEquals("@vnew", comment0.getValue());
      assertEquals(-4391, comment0.getAbsolutePosition());
      assertEquals(-4391, comment0.getLength());
      assertNull(comment0.getJsDoc());
      assertEquals(0, linkedHashSet0.size());
      assertEquals("[]", linkedHashSet0.toString());
      assertEquals(true, linkedHashSet0.isEmpty());
      assertNotNull(jsDocInfoParser0);
      
      // Undeclared exception!
      try {
        boolean boolean1 = jsDocInfoParser0.parse();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test29()  throws Throwable  {
      String string0 = "nB8<%h6=oKiMNVb#";
      int int0 = 31;
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream(string0, int0, int0);
      assertNotNull(jsDocTokenStream0);
      
      XmlMemberGet xmlMemberGet0 = new XmlMemberGet(int0, int0);
      assertEquals(-1, xmlMemberGet0.getLineno());
      assertNull(xmlMemberGet0.getJsDoc());
      assertEquals(31, xmlMemberGet0.getAbsolutePosition());
      assertEquals("143", xmlMemberGet0.toString());
      assertEquals(31, xmlMemberGet0.getPosition());
      assertEquals(0, xmlMemberGet0.depth());
      assertEquals(-1, xmlMemberGet0.getOperatorPosition());
      assertEquals(31, xmlMemberGet0.getLength());
      assertEquals(143, xmlMemberGet0.getType());
      assertEquals(false, xmlMemberGet0.hasChildren());
      assertNotNull(xmlMemberGet0);
      
      Comment comment0 = xmlMemberGet0.getJsDocNode();
      assertEquals(-1, xmlMemberGet0.getLineno());
      assertNull(xmlMemberGet0.getJsDoc());
      assertEquals(31, xmlMemberGet0.getAbsolutePosition());
      assertEquals("143", xmlMemberGet0.toString());
      assertEquals(31, xmlMemberGet0.getPosition());
      assertEquals(0, xmlMemberGet0.depth());
      assertEquals(-1, xmlMemberGet0.getOperatorPosition());
      assertEquals(31, xmlMemberGet0.getLength());
      assertEquals(143, xmlMemberGet0.getType());
      assertEquals(false, xmlMemberGet0.hasChildren());
      assertNull(comment0);
      
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      assertEquals(0, linkedHashSet0.size());
      assertEquals(true, linkedHashSet0.isEmpty());
      assertEquals("[]", linkedHashSet0.toString());
      assertNotNull(linkedHashSet0);
      
      boolean boolean0 = true;
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5;
      Config config0 = new Config(linkedHashSet0, linkedHashSet0, boolean0, config_LanguageMode0, boolean0);
      assertEquals(0, linkedHashSet0.size());
      assertEquals(true, linkedHashSet0.isEmpty());
      assertEquals("[]", linkedHashSet0.toString());
      assertNotNull(config0);
      
      Context context0 = new Context();
      assertFalse(context0.generateObserverCount);
      assertEquals(2147483647, context0.getMaximumInterpreterStackDepth());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertEquals(false, context0.isGeneratingDebug());
      assertEquals(false, context0.isSealed());
      assertEquals(0, context0.getLanguageVersion());
      assertEquals(true, context0.isGeneratingSource());
      assertEquals(false, context0.isGeneratingDebugChanged());
      assertEquals(0, context0.getOptimizationLevel());
      assertEquals(false, context0.hasCompileFunctionsWithDynamicScope());
      assertNotNull(context0);
      
      ErrorReporter errorReporter0 = context0.getErrorReporter();
      assertFalse(context0.generateObserverCount);
      assertEquals(2147483647, context0.getMaximumInterpreterStackDepth());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertEquals(false, context0.isGeneratingDebug());
      assertEquals(false, context0.isSealed());
      assertEquals(0, context0.getLanguageVersion());
      assertEquals(true, context0.isGeneratingSource());
      assertEquals(false, context0.isGeneratingDebugChanged());
      assertEquals(0, context0.getOptimizationLevel());
      assertEquals(false, context0.hasCompileFunctionsWithDynamicScope());
      assertNotNull(errorReporter0);
      
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, comment0, string0, config0, errorReporter0);
      assertFalse(context0.generateObserverCount);
      assertEquals(2147483647, context0.getMaximumInterpreterStackDepth());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertEquals(false, context0.isGeneratingDebug());
      assertEquals(false, context0.isSealed());
      assertEquals(0, context0.getLanguageVersion());
      assertEquals(true, context0.isGeneratingSource());
      assertEquals(false, context0.isGeneratingDebugChanged());
      assertEquals(0, context0.getOptimizationLevel());
      assertEquals(false, context0.hasCompileFunctionsWithDynamicScope());
      assertEquals(-1, xmlMemberGet0.getLineno());
      assertNull(xmlMemberGet0.getJsDoc());
      assertEquals(31, xmlMemberGet0.getAbsolutePosition());
      assertEquals("143", xmlMemberGet0.toString());
      assertEquals(31, xmlMemberGet0.getPosition());
      assertEquals(0, xmlMemberGet0.depth());
      assertEquals(-1, xmlMemberGet0.getOperatorPosition());
      assertEquals(31, xmlMemberGet0.getLength());
      assertEquals(143, xmlMemberGet0.getType());
      assertEquals(false, xmlMemberGet0.hasChildren());
      assertEquals(0, linkedHashSet0.size());
      assertEquals(true, linkedHashSet0.isEmpty());
      assertEquals("[]", linkedHashSet0.toString());
      assertNotNull(jsDocInfoParser0);
      
      JSDocInfo jSDocInfo0 = jsDocInfoParser0.retrieveAndResetParsedJSDocInfo();
      assertFalse(context0.generateObserverCount);
      assertEquals(2147483647, context0.getMaximumInterpreterStackDepth());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertEquals(false, context0.isGeneratingDebug());
      assertEquals(false, context0.isSealed());
      assertEquals(0, context0.getLanguageVersion());
      assertEquals(true, context0.isGeneratingSource());
      assertEquals(false, context0.isGeneratingDebugChanged());
      assertEquals(0, context0.getOptimizationLevel());
      assertEquals(false, context0.hasCompileFunctionsWithDynamicScope());
      assertEquals(-1, xmlMemberGet0.getLineno());
      assertNull(xmlMemberGet0.getJsDoc());
      assertEquals(31, xmlMemberGet0.getAbsolutePosition());
      assertEquals("143", xmlMemberGet0.toString());
      assertEquals(31, xmlMemberGet0.getPosition());
      assertEquals(0, xmlMemberGet0.depth());
      assertEquals(-1, xmlMemberGet0.getOperatorPosition());
      assertEquals(31, xmlMemberGet0.getLength());
      assertEquals(143, xmlMemberGet0.getType());
      assertEquals(false, xmlMemberGet0.hasChildren());
      assertEquals(0, linkedHashSet0.size());
      assertEquals(true, linkedHashSet0.isEmpty());
      assertEquals("[]", linkedHashSet0.toString());
      assertNull(jSDocInfo0);
      
      jsDocInfoParser0.setFileOverviewJSDocInfo(jSDocInfo0);
      assertFalse(context0.generateObserverCount);
      assertEquals(2147483647, context0.getMaximumInterpreterStackDepth());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertEquals(false, context0.isGeneratingDebug());
      assertEquals(false, context0.isSealed());
      assertEquals(0, context0.getLanguageVersion());
      assertEquals(true, context0.isGeneratingSource());
      assertEquals(false, context0.isGeneratingDebugChanged());
      assertEquals(0, context0.getOptimizationLevel());
      assertEquals(false, context0.hasCompileFunctionsWithDynamicScope());
      assertEquals(-1, xmlMemberGet0.getLineno());
      assertNull(xmlMemberGet0.getJsDoc());
      assertEquals(31, xmlMemberGet0.getAbsolutePosition());
      assertEquals("143", xmlMemberGet0.toString());
      assertEquals(31, xmlMemberGet0.getPosition());
      assertEquals(0, xmlMemberGet0.depth());
      assertEquals(-1, xmlMemberGet0.getOperatorPosition());
      assertEquals(31, xmlMemberGet0.getLength());
      assertEquals(143, xmlMemberGet0.getType());
      assertEquals(false, xmlMemberGet0.hasChildren());
      assertEquals(0, linkedHashSet0.size());
      assertEquals(true, linkedHashSet0.isEmpty());
      assertEquals("[]", linkedHashSet0.toString());
  }

  @Test
  public void test30()  throws Throwable  {
      String string0 = "(/1e #S";
      Node node0 = JsDocInfoParser.parseTypeString(string0);
      assertNull(node0);
  }

  @Test
  public void test31()  throws Throwable  {
      String string0 = ";-\n";
      Node node0 = JsDocInfoParser.parseTypeString(string0);
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(2, node0.getSourcePosition());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.hasOneChild());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isQuotedString());
      assertEquals(40, node0.getType());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(2, node0.getCharno());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(0, node0.getLineno());
      assertNotNull(node0);
  }

  @Test
  public void test32()  throws Throwable  {
      String string0 = "8%Ia|h6=KiMVb#";
      int int0 = 31;
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream(string0, int0, int0);
      assertNotNull(jsDocTokenStream0);
      
      XmlMemberGet xmlMemberGet0 = new XmlMemberGet(int0, int0);
      assertNull(xmlMemberGet0.getJsDoc());
      assertEquals(-1, xmlMemberGet0.getLineno());
      assertEquals(-1, xmlMemberGet0.getOperatorPosition());
      assertEquals(31, xmlMemberGet0.getLength());
      assertEquals(143, xmlMemberGet0.getType());
      assertEquals(31, xmlMemberGet0.getPosition());
      assertEquals("143", xmlMemberGet0.toString());
      assertEquals(false, xmlMemberGet0.hasChildren());
      assertEquals(0, xmlMemberGet0.depth());
      assertEquals(31, xmlMemberGet0.getAbsolutePosition());
      assertNotNull(xmlMemberGet0);
      
      Comment comment0 = xmlMemberGet0.getJsDocNode();
      assertNull(xmlMemberGet0.getJsDoc());
      assertEquals(-1, xmlMemberGet0.getLineno());
      assertEquals(-1, xmlMemberGet0.getOperatorPosition());
      assertEquals(31, xmlMemberGet0.getLength());
      assertEquals(143, xmlMemberGet0.getType());
      assertEquals(31, xmlMemberGet0.getPosition());
      assertEquals("143", xmlMemberGet0.toString());
      assertEquals(false, xmlMemberGet0.hasChildren());
      assertEquals(0, xmlMemberGet0.depth());
      assertEquals(31, xmlMemberGet0.getAbsolutePosition());
      assertNull(comment0);
      
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      assertEquals("[]", linkedHashSet0.toString());
      assertEquals(0, linkedHashSet0.size());
      assertEquals(true, linkedHashSet0.isEmpty());
      assertNotNull(linkedHashSet0);
      
      boolean boolean0 = false;
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5;
      Config config0 = new Config(linkedHashSet0, linkedHashSet0, boolean0, config_LanguageMode0, boolean0);
      assertEquals("[]", linkedHashSet0.toString());
      assertEquals(0, linkedHashSet0.size());
      assertEquals(true, linkedHashSet0.isEmpty());
      assertNotNull(config0);
      
      Context context0 = new Context();
      assertFalse(context0.generateObserverCount);
      assertEquals(0, context0.getLanguageVersion());
      assertEquals(false, context0.isSealed());
      assertEquals(2147483647, context0.getMaximumInterpreterStackDepth());
      assertEquals(false, context0.isGeneratingDebug());
      assertEquals(false, context0.hasCompileFunctionsWithDynamicScope());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertEquals(0, context0.getOptimizationLevel());
      assertEquals(false, context0.isGeneratingDebugChanged());
      assertEquals(true, context0.isGeneratingSource());
      assertNotNull(context0);
      
      ErrorReporter errorReporter0 = context0.getErrorReporter();
      assertFalse(context0.generateObserverCount);
      assertEquals(0, context0.getLanguageVersion());
      assertEquals(false, context0.isSealed());
      assertEquals(2147483647, context0.getMaximumInterpreterStackDepth());
      assertEquals(false, context0.isGeneratingDebug());
      assertEquals(false, context0.hasCompileFunctionsWithDynamicScope());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertEquals(0, context0.getOptimizationLevel());
      assertEquals(false, context0.isGeneratingDebugChanged());
      assertEquals(true, context0.isGeneratingSource());
      assertNotNull(errorReporter0);
      
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, comment0, string0, config0, errorReporter0);
      assertFalse(context0.generateObserverCount);
      assertEquals("[]", linkedHashSet0.toString());
      assertEquals(0, linkedHashSet0.size());
      assertEquals(true, linkedHashSet0.isEmpty());
      assertEquals(0, context0.getLanguageVersion());
      assertEquals(false, context0.isSealed());
      assertEquals(2147483647, context0.getMaximumInterpreterStackDepth());
      assertEquals(false, context0.isGeneratingDebug());
      assertEquals(false, context0.hasCompileFunctionsWithDynamicScope());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertEquals(0, context0.getOptimizationLevel());
      assertEquals(false, context0.isGeneratingDebugChanged());
      assertEquals(true, context0.isGeneratingSource());
      assertNull(xmlMemberGet0.getJsDoc());
      assertEquals(-1, xmlMemberGet0.getLineno());
      assertEquals(-1, xmlMemberGet0.getOperatorPosition());
      assertEquals(31, xmlMemberGet0.getLength());
      assertEquals(143, xmlMemberGet0.getType());
      assertEquals(31, xmlMemberGet0.getPosition());
      assertEquals("143", xmlMemberGet0.toString());
      assertEquals(false, xmlMemberGet0.hasChildren());
      assertEquals(0, xmlMemberGet0.depth());
      assertEquals(31, xmlMemberGet0.getAbsolutePosition());
      assertNotNull(jsDocInfoParser0);
      
      boolean boolean1 = jsDocInfoParser0.parse();
      assertFalse(context0.generateObserverCount);
      assertEquals("[]", linkedHashSet0.toString());
      assertEquals(0, linkedHashSet0.size());
      assertEquals(true, linkedHashSet0.isEmpty());
      assertEquals(0, context0.getLanguageVersion());
      assertEquals(false, context0.isSealed());
      assertEquals(2147483647, context0.getMaximumInterpreterStackDepth());
      assertEquals(false, context0.isGeneratingDebug());
      assertEquals(false, context0.hasCompileFunctionsWithDynamicScope());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertEquals(0, context0.getOptimizationLevel());
      assertEquals(false, context0.isGeneratingDebugChanged());
      assertEquals(true, context0.isGeneratingSource());
      assertNull(xmlMemberGet0.getJsDoc());
      assertEquals(-1, xmlMemberGet0.getLineno());
      assertEquals(-1, xmlMemberGet0.getOperatorPosition());
      assertEquals(31, xmlMemberGet0.getLength());
      assertEquals(143, xmlMemberGet0.getType());
      assertEquals(31, xmlMemberGet0.getPosition());
      assertEquals("143", xmlMemberGet0.toString());
      assertEquals(false, xmlMemberGet0.hasChildren());
      assertEquals(0, xmlMemberGet0.depth());
      assertEquals(31, xmlMemberGet0.getAbsolutePosition());
      assertFalse(boolean1);
      assertTrue(boolean0 == boolean1);
      assertTrue(boolean1 == boolean0);
  }

  @Test
  public void test33()  throws Throwable  {
      String string0 = "AYWKEY*C'F,f3P,";
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream(string0);
      assertNotNull(jsDocTokenStream0);
      
      Comment comment0 = null;
      TreeSet<String> treeSet0 = new TreeSet<String>();
      assertEquals("[]", treeSet0.toString());
      assertNotNull(treeSet0);
      
      boolean boolean0 = true;
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5_STRICT;
      boolean boolean1 = treeSet0.add(string0);
      assertEquals("[AYWKEY*C'F,f3P,]", treeSet0.toString());
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      Config config0 = new Config(treeSet0, treeSet0, boolean0, config_LanguageMode0, boolean1);
      assertEquals("[AYWKEY*C'F,f3P,]", treeSet0.toString());
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean0 == boolean1);
      assertNotNull(config0);
      
      ToolErrorReporter toolErrorReporter0 = new ToolErrorReporter(boolean0);
      assertEquals(true, toolErrorReporter0.isReportingWarnings());
      assertEquals(false, toolErrorReporter0.hasReportedError());
      assertTrue(boolean0 == boolean1);
      assertNotNull(toolErrorReporter0);
      
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, comment0, string0, config0, toolErrorReporter0);
      assertEquals("[AYWKEY*C'F,f3P,]", treeSet0.toString());
      assertEquals(true, toolErrorReporter0.isReportingWarnings());
      assertEquals(false, toolErrorReporter0.hasReportedError());
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean0 == boolean1);
      assertNotNull(jsDocInfoParser0);
      
      JSDocInfo jSDocInfo0 = jsDocInfoParser0.getFileOverviewJSDocInfo();
      assertEquals("[AYWKEY*C'F,f3P,]", treeSet0.toString());
      assertEquals(true, toolErrorReporter0.isReportingWarnings());
      assertEquals(false, toolErrorReporter0.hasReportedError());
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean0 == boolean1);
      assertNull(jSDocInfo0);
  }

  @Test
  public void test34() {}
//   @Test
//   public void test34()  throws Throwable  {
//       String string0 = "this";
//       int int0 = (-3619);
//       JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream(string0, int0, int0);
//       //  // Unstable assertion: assertNotNull(jsDocTokenStream0);
//       
//       StringLiteral stringLiteral0 = new StringLiteral(int0);
//       //  // Unstable assertion: assertEquals(0, stringLiteral0.depth());
//       //  // Unstable assertion: assertNull(stringLiteral0.getJsDoc());
//       //  // Unstable assertion: assertEquals("41", stringLiteral0.toString());
//       //  // Unstable assertion: assertEquals('\u0000', stringLiteral0.getQuoteCharacter());
//       //  // Unstable assertion: assertEquals(-3619, stringLiteral0.getAbsolutePosition());
//       //  // Unstable assertion: assertNull(stringLiteral0.getValue());
//       //  // Unstable assertion: assertEquals(1, stringLiteral0.getLength());
//       //  // Unstable assertion: assertEquals(-1, stringLiteral0.getLineno());
//       //  // Unstable assertion: assertEquals(false, stringLiteral0.hasChildren());
//       //  // Unstable assertion: assertEquals(41, stringLiteral0.getType());
//       //  // Unstable assertion: assertEquals(-3619, stringLiteral0.getPosition());
//       //  // Unstable assertion: assertNotNull(stringLiteral0);
//       
//       Comment comment0 = stringLiteral0.getJsDocNode();
//       //  // Unstable assertion: assertEquals(0, stringLiteral0.depth());
//       //  // Unstable assertion: assertNull(stringLiteral0.getJsDoc());
//       //  // Unstable assertion: assertEquals("41", stringLiteral0.toString());
//       //  // Unstable assertion: assertEquals('\u0000', stringLiteral0.getQuoteCharacter());
//       //  // Unstable assertion: assertEquals(-3619, stringLiteral0.getAbsolutePosition());
//       //  // Unstable assertion: assertNull(stringLiteral0.getValue());
//       //  // Unstable assertion: assertEquals(1, stringLiteral0.getLength());
//       //  // Unstable assertion: assertEquals(-1, stringLiteral0.getLineno());
//       //  // Unstable assertion: assertEquals(false, stringLiteral0.hasChildren());
//       //  // Unstable assertion: assertEquals(41, stringLiteral0.getType());
//       //  // Unstable assertion: assertEquals(-3619, stringLiteral0.getPosition());
//       //  // Unstable assertion: assertNull(comment0);
//       
//       Node node0 = Node.newString(int0, string0);
//       //  // Unstable assertion: assertEquals(false, node0.isOptionalArg());
//       //  // Unstable assertion: assertEquals(0, node0.getSideEffectFlags());
//       //  // Unstable assertion: assertEquals(false, node0.isLocalResultCall());
//       //  // Unstable assertion: assertEquals(-1, node0.getCharno());
//       //  // Unstable assertion: assertEquals(false, node0.isQualifiedName());
//       //  // Unstable assertion: assertEquals(-1, node0.getSourcePosition());
//       //  // Unstable assertion: assertEquals(false, node0.isOnlyModifiesThisCall());
//       //  // Unstable assertion: assertEquals(false, node0.isSyntheticBlock());
//       //  // Unstable assertion: assertEquals(false, node0.isVarArgs());
//       //  // Unstable assertion: assertEquals(-3619, node0.getType());
//       //  // Unstable assertion: assertEquals(-1, node0.getLineno());
//       //  // Unstable assertion: assertEquals(0, node0.getChildCount());
//       //  // Unstable assertion: assertEquals(false, node0.isQuotedString());
//       //  // Unstable assertion: assertEquals(false, node0.isUnscopedQualifiedName());
//       //  // Unstable assertion: assertEquals(false, node0.hasOneChild());
//       //  // Unstable assertion: assertEquals(false, node0.isNoSideEffectsCall());
//       //  // Unstable assertion: assertEquals(false, node0.wasEmptyNode());
//       //  // Unstable assertion: assertEquals(false, node0.hasChildren());
//       //  // Unstable assertion: assertEquals(false, node0.hasMoreThanOneChild());
//       //  // Unstable assertion: assertNotNull(node0);
//       
//       Node.FileLevelJsDocBuilder node_FileLevelJsDocBuilder0 = node0.getJsDocBuilderForNode();
//       //  // Unstable assertion: assertEquals(false, node0.isOptionalArg());
//       //  // Unstable assertion: assertEquals(0, node0.getSideEffectFlags());
//       //  // Unstable assertion: assertEquals(false, node0.isLocalResultCall());
//       //  // Unstable assertion: assertEquals(-1, node0.getCharno());
//       //  // Unstable assertion: assertEquals(false, node0.isQualifiedName());
//       //  // Unstable assertion: assertEquals(-1, node0.getSourcePosition());
//       //  // Unstable assertion: assertEquals(false, node0.isOnlyModifiesThisCall());
//       //  // Unstable assertion: assertEquals(false, node0.isSyntheticBlock());
//       //  // Unstable assertion: assertEquals(false, node0.isVarArgs());
//       //  // Unstable assertion: assertEquals(-3619, node0.getType());
//       //  // Unstable assertion: assertEquals(-1, node0.getLineno());
//       //  // Unstable assertion: assertEquals(0, node0.getChildCount());
//       //  // Unstable assertion: assertEquals(false, node0.isQuotedString());
//       //  // Unstable assertion: assertEquals(false, node0.isUnscopedQualifiedName());
//       //  // Unstable assertion: assertEquals(false, node0.hasOneChild());
//       //  // Unstable assertion: assertEquals(false, node0.isNoSideEffectsCall());
//       //  // Unstable assertion: assertEquals(false, node0.wasEmptyNode());
//       //  // Unstable assertion: assertEquals(false, node0.hasChildren());
//       //  // Unstable assertion: assertEquals(false, node0.hasMoreThanOneChild());
//       //  // Unstable assertion: assertNotNull(node_FileLevelJsDocBuilder0);
//       
//       Locale locale0 = Locale.US;
//       //  // Unstable assertion: assertEquals("en_US", locale0.toString());
//       //  // Unstable assertion: assertEquals("en", locale0.getLanguage());
//       //  // Unstable assertion: assertEquals("USA", locale0.getISO3Country());
//       //  // Unstable assertion: assertEquals("", locale0.getVariant());
//       //  // Unstable assertion: assertEquals("US", locale0.getCountry());
//       //  // Unstable assertion: assertEquals("eng", locale0.getISO3Language());
//       //  // Unstable assertion: assertNotNull(locale0);
//       
//       Set<String> set0 = locale0.getUnicodeLocaleKeys();
//       //  // Unstable assertion: assertEquals(true, set0.isEmpty());
//       //  // Unstable assertion: assertEquals(0, set0.size());
//       //  // Unstable assertion: assertEquals("en_US", locale0.toString());
//       //  // Unstable assertion: assertEquals("en", locale0.getLanguage());
//       //  // Unstable assertion: assertEquals("USA", locale0.getISO3Country());
//       //  // Unstable assertion: assertEquals("", locale0.getVariant());
//       //  // Unstable assertion: assertEquals("US", locale0.getCountry());
//       //  // Unstable assertion: assertEquals("eng", locale0.getISO3Language());
//       //  // Unstable assertion: assertNotNull(set0);
//       
//       boolean boolean0 = true;
//       Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5_STRICT;
//       Config config0 = new Config(set0, set0, boolean0, config_LanguageMode0, boolean0);
//       //  // Unstable assertion: assertEquals(true, set0.isEmpty());
//       //  // Unstable assertion: assertEquals(0, set0.size());
//       //  // Unstable assertion: assertEquals("en_US", locale0.toString());
//       //  // Unstable assertion: assertEquals("en", locale0.getLanguage());
//       //  // Unstable assertion: assertEquals("USA", locale0.getISO3Country());
//       //  // Unstable assertion: assertEquals("", locale0.getVariant());
//       //  // Unstable assertion: assertEquals("US", locale0.getCountry());
//       //  // Unstable assertion: assertEquals("eng", locale0.getISO3Language());
//       //  // Unstable assertion: assertNotNull(config0);
//       
//       ContextFactory contextFactory0 = ContextFactory.getGlobal();
//       //  // Unstable assertion: assertEquals(false, contextFactory0.hasExplicitGlobal());
//       //  // Unstable assertion: assertEquals(false, contextFactory0.isSealed());
//       //  // Unstable assertion: assertNotNull(contextFactory0);
//       
//       Context context0 = contextFactory0.enterContext();
//       //  // Unstable assertion: assertTrue(context0.generateObserverCount);
//       //  // Unstable assertion: assertEquals(2147483647, context0.getMaximumInterpreterStackDepth());
//       //  // Unstable assertion: assertEquals(false, context0.hasCompileFunctionsWithDynamicScope());
//       //  // Unstable assertion: assertEquals(false, context0.isSealed());
//       //  // Unstable assertion: assertEquals(0, context0.getInstructionObserverThreshold());
//       //  // Unstable assertion: assertEquals(true, context0.isGeneratingSource());
//       //  // Unstable assertion: assertEquals(0, context0.getOptimizationLevel());
//       //  // Unstable assertion: assertEquals(0, context0.getLanguageVersion());
//       //  // Unstable assertion: assertEquals(false, context0.isGeneratingDebugChanged());
//       //  // Unstable assertion: assertEquals(false, context0.isGeneratingDebug());
//       //  // Unstable assertion: assertEquals(false, contextFactory0.hasExplicitGlobal());
//       //  // Unstable assertion: assertEquals(false, contextFactory0.isSealed());
//       //  // Unstable assertion: assertNotNull(context0);
//       
//       ErrorCollector errorCollector0 = (ErrorCollector)context0.getErrorReporter();
//       //  // Unstable assertion: assertTrue(context0.generateObserverCount);
//       //  // Unstable assertion: assertEquals(2147483647, context0.getMaximumInterpreterStackDepth());
//       //  // Unstable assertion: assertEquals(false, context0.hasCompileFunctionsWithDynamicScope());
//       //  // Unstable assertion: assertEquals(false, context0.isSealed());
//       //  // Unstable assertion: assertEquals(0, context0.getInstructionObserverThreshold());
//       //  // Unstable assertion: assertEquals(true, context0.isGeneratingSource());
//       //  // Unstable assertion: assertEquals(0, context0.getOptimizationLevel());
//       //  // Unstable assertion: assertEquals(0, context0.getLanguageVersion());
//       //  // Unstable assertion: assertEquals(false, context0.isGeneratingDebugChanged());
//       //  // Unstable assertion: assertEquals(false, context0.isGeneratingDebug());
//       //  // Unstable assertion: assertEquals(false, contextFactory0.hasExplicitGlobal());
//       //  // Unstable assertion: assertEquals(false, contextFactory0.isSealed());
//       //  // Unstable assertion: assertNotNull(errorCollector0);
//       
//       JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, comment0, string0, config0, errorCollector0);
//       //  // Unstable assertion: assertTrue(context0.generateObserverCount);
//       //  // Unstable assertion: assertEquals(2147483647, context0.getMaximumInterpreterStackDepth());
//       //  // Unstable assertion: assertEquals(false, context0.hasCompileFunctionsWithDynamicScope());
//       //  // Unstable assertion: assertEquals(false, context0.isSealed());
//       //  // Unstable assertion: assertEquals(0, context0.getInstructionObserverThreshold());
//       //  // Unstable assertion: assertEquals(true, context0.isGeneratingSource());
//       //  // Unstable assertion: assertEquals(0, context0.getOptimizationLevel());
//       //  // Unstable assertion: assertEquals(0, context0.getLanguageVersion());
//       //  // Unstable assertion: assertEquals(false, context0.isGeneratingDebugChanged());
//       //  // Unstable assertion: assertEquals(false, context0.isGeneratingDebug());
//       //  // Unstable assertion: assertEquals(true, set0.isEmpty());
//       //  // Unstable assertion: assertEquals(0, set0.size());
//       //  // Unstable assertion: assertEquals(0, stringLiteral0.depth());
//       //  // Unstable assertion: assertNull(stringLiteral0.getJsDoc());
//       //  // Unstable assertion: assertEquals("41", stringLiteral0.toString());
//       //  // Unstable assertion: assertEquals('\u0000', stringLiteral0.getQuoteCharacter());
//       //  // Unstable assertion: assertEquals(-3619, stringLiteral0.getAbsolutePosition());
//       //  // Unstable assertion: assertNull(stringLiteral0.getValue());
//       //  // Unstable assertion: assertEquals(1, stringLiteral0.getLength());
//       //  // Unstable assertion: assertEquals(-1, stringLiteral0.getLineno());
//       //  // Unstable assertion: assertEquals(false, stringLiteral0.hasChildren());
//       //  // Unstable assertion: assertEquals(41, stringLiteral0.getType());
//       //  // Unstable assertion: assertEquals(-3619, stringLiteral0.getPosition());
//       //  // Unstable assertion: assertEquals("en_US", locale0.toString());
//       //  // Unstable assertion: assertEquals("en", locale0.getLanguage());
//       //  // Unstable assertion: assertEquals("USA", locale0.getISO3Country());
//       //  // Unstable assertion: assertEquals("", locale0.getVariant());
//       //  // Unstable assertion: assertEquals("US", locale0.getCountry());
//       //  // Unstable assertion: assertEquals("eng", locale0.getISO3Language());
//       //  // Unstable assertion: assertEquals(false, contextFactory0.hasExplicitGlobal());
//       //  // Unstable assertion: assertEquals(false, contextFactory0.isSealed());
//       //  // Unstable assertion: assertNotNull(jsDocInfoParser0);
//       
//       jsDocInfoParser0.setFileLevelJsDocBuilder(node_FileLevelJsDocBuilder0);
//       //  // Unstable assertion: assertTrue(context0.generateObserverCount);
//       //  // Unstable assertion: assertEquals(2147483647, context0.getMaximumInterpreterStackDepth());
//       //  // Unstable assertion: assertEquals(false, context0.hasCompileFunctionsWithDynamicScope());
//       //  // Unstable assertion: assertEquals(false, context0.isSealed());
//       //  // Unstable assertion: assertEquals(0, context0.getInstructionObserverThreshold());
//       //  // Unstable assertion: assertEquals(true, context0.isGeneratingSource());
//       //  // Unstable assertion: assertEquals(0, context0.getOptimizationLevel());
//       //  // Unstable assertion: assertEquals(0, context0.getLanguageVersion());
//       //  // Unstable assertion: assertEquals(false, context0.isGeneratingDebugChanged());
//       //  // Unstable assertion: assertEquals(false, context0.isGeneratingDebug());
//       //  // Unstable assertion: assertEquals(false, node0.isOptionalArg());
//       //  // Unstable assertion: assertEquals(0, node0.getSideEffectFlags());
//       //  // Unstable assertion: assertEquals(false, node0.isLocalResultCall());
//       //  // Unstable assertion: assertEquals(-1, node0.getCharno());
//       //  // Unstable assertion: assertEquals(false, node0.isQualifiedName());
//       //  // Unstable assertion: assertEquals(-1, node0.getSourcePosition());
//       //  // Unstable assertion: assertEquals(false, node0.isOnlyModifiesThisCall());
//       //  // Unstable assertion: assertEquals(false, node0.isSyntheticBlock());
//       //  // Unstable assertion: assertEquals(false, node0.isVarArgs());
//       //  // Unstable assertion: assertEquals(-3619, node0.getType());
//       //  // Unstable assertion: assertEquals(-1, node0.getLineno());
//       //  // Unstable assertion: assertEquals(0, node0.getChildCount());
//       //  // Unstable assertion: assertEquals(false, node0.isQuotedString());
//       //  // Unstable assertion: assertEquals(false, node0.isUnscopedQualifiedName());
//       //  // Unstable assertion: assertEquals(false, node0.hasOneChild());
//       //  // Unstable assertion: assertEquals(false, node0.isNoSideEffectsCall());
//       //  // Unstable assertion: assertEquals(false, node0.wasEmptyNode());
//       //  // Unstable assertion: assertEquals(false, node0.hasChildren());
//       //  // Unstable assertion: assertEquals(false, node0.hasMoreThanOneChild());
//       //  // Unstable assertion: assertEquals(true, set0.isEmpty());
//       //  // Unstable assertion: assertEquals(0, set0.size());
//       //  // Unstable assertion: assertEquals(0, stringLiteral0.depth());
//       //  // Unstable assertion: assertNull(stringLiteral0.getJsDoc());
//       //  // Unstable assertion: assertEquals("41", stringLiteral0.toString());
//       //  // Unstable assertion: assertEquals('\u0000', stringLiteral0.getQuoteCharacter());
//       //  // Unstable assertion: assertEquals(-3619, stringLiteral0.getAbsolutePosition());
//       //  // Unstable assertion: assertNull(stringLiteral0.getValue());
//       //  // Unstable assertion: assertEquals(1, stringLiteral0.getLength());
//       //  // Unstable assertion: assertEquals(-1, stringLiteral0.getLineno());
//       //  // Unstable assertion: assertEquals(false, stringLiteral0.hasChildren());
//       //  // Unstable assertion: assertEquals(41, stringLiteral0.getType());
//       //  // Unstable assertion: assertEquals(-3619, stringLiteral0.getPosition());
//       //  // Unstable assertion: assertEquals("en_US", locale0.toString());
//       //  // Unstable assertion: assertEquals("en", locale0.getLanguage());
//       //  // Unstable assertion: assertEquals("USA", locale0.getISO3Country());
//       //  // Unstable assertion: assertEquals("", locale0.getVariant());
//       //  // Unstable assertion: assertEquals("US", locale0.getCountry());
//       //  // Unstable assertion: assertEquals("eng", locale0.getISO3Language());
//       //  // Unstable assertion: assertEquals(false, contextFactory0.hasExplicitGlobal());
//       //  // Unstable assertion: assertEquals(false, contextFactory0.isSealed());
//   }

  @Test
  public void test35()  throws Throwable  {
      String string0 = "(I)C";
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream(string0);
      assertNotNull(jsDocTokenStream0);
      
      int int0 = (-3557);
      ObjectProperty objectProperty0 = new ObjectProperty(int0, int0);
      assertEquals(0, objectProperty0.depth());
      assertEquals(false, objectProperty0.isGetter());
      assertEquals(-3557, objectProperty0.getAbsolutePosition());
      assertEquals(-3557, objectProperty0.getLength());
      assertEquals(-1, objectProperty0.getLineno());
      assertEquals(-3557, objectProperty0.getPosition());
      assertNull(objectProperty0.getJsDoc());
      assertEquals(false, objectProperty0.hasChildren());
      assertEquals(103, objectProperty0.getType());
      assertEquals("103", objectProperty0.toString());
      assertEquals(-1, objectProperty0.getOperatorPosition());
      assertEquals(false, objectProperty0.isSetter());
      assertNotNull(objectProperty0);
      
      Comment comment0 = objectProperty0.getJsDocNode();
      assertEquals(0, objectProperty0.depth());
      assertEquals(false, objectProperty0.isGetter());
      assertEquals(-3557, objectProperty0.getAbsolutePosition());
      assertEquals(-3557, objectProperty0.getLength());
      assertEquals(-1, objectProperty0.getLineno());
      assertEquals(-3557, objectProperty0.getPosition());
      assertNull(objectProperty0.getJsDoc());
      assertEquals(false, objectProperty0.hasChildren());
      assertEquals(103, objectProperty0.getType());
      assertEquals("103", objectProperty0.toString());
      assertEquals(-1, objectProperty0.getOperatorPosition());
      assertEquals(false, objectProperty0.isSetter());
      assertNull(comment0);
      
      Locale locale0 = Locale.JAPAN;
      assertEquals("ja", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("JP", locale0.getCountry());
      assertEquals("ja_JP", locale0.toString());
      assertEquals("JPN", locale0.getISO3Country());
      assertNotNull(locale0);
      
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      assertEquals(0, set0.size());
      assertEquals(true, set0.isEmpty());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("JP", locale0.getCountry());
      assertEquals("ja_JP", locale0.toString());
      assertEquals("JPN", locale0.getISO3Country());
      assertNotNull(set0);
      
      boolean boolean0 = true;
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT3;
      Config config0 = new Config(set0, set0, boolean0, config_LanguageMode0, boolean0);
      assertEquals(0, set0.size());
      assertEquals(true, set0.isEmpty());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("JP", locale0.getCountry());
      assertEquals("ja_JP", locale0.toString());
      assertEquals("JPN", locale0.getISO3Country());
      assertNotNull(config0);
      
      ErrorCollector errorCollector0 = new ErrorCollector();
      assertNotNull(errorCollector0);
      
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, comment0, string0, config0, errorCollector0);
      assertEquals(0, set0.size());
      assertEquals(true, set0.isEmpty());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("JP", locale0.getCountry());
      assertEquals("ja_JP", locale0.toString());
      assertEquals("JPN", locale0.getISO3Country());
      assertEquals(0, objectProperty0.depth());
      assertEquals(false, objectProperty0.isGetter());
      assertEquals(-3557, objectProperty0.getAbsolutePosition());
      assertEquals(-3557, objectProperty0.getLength());
      assertEquals(-1, objectProperty0.getLineno());
      assertEquals(-3557, objectProperty0.getPosition());
      assertNull(objectProperty0.getJsDoc());
      assertEquals(false, objectProperty0.hasChildren());
      assertEquals(103, objectProperty0.getType());
      assertEquals("103", objectProperty0.toString());
      assertEquals(-1, objectProperty0.getOperatorPosition());
      assertEquals(false, objectProperty0.isSetter());
      assertNotNull(jsDocInfoParser0);
      
      boolean boolean1 = jsDocInfoParser0.hasParsedJSDocInfo();
      assertEquals(0, set0.size());
      assertEquals(true, set0.isEmpty());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("JP", locale0.getCountry());
      assertEquals("ja_JP", locale0.toString());
      assertEquals("JPN", locale0.getISO3Country());
      assertEquals(0, objectProperty0.depth());
      assertEquals(false, objectProperty0.isGetter());
      assertEquals(-3557, objectProperty0.getAbsolutePosition());
      assertEquals(-3557, objectProperty0.getLength());
      assertEquals(-1, objectProperty0.getLineno());
      assertEquals(-3557, objectProperty0.getPosition());
      assertNull(objectProperty0.getJsDoc());
      assertEquals(false, objectProperty0.hasChildren());
      assertEquals(103, objectProperty0.getType());
      assertEquals("103", objectProperty0.toString());
      assertEquals(-1, objectProperty0.getOperatorPosition());
      assertEquals(false, objectProperty0.isSetter());
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean0 == boolean1);
  }

  @Test
  public void test36()  throws Throwable  {
      String string0 = "!";
      Node node0 = JsDocInfoParser.parseTypeString(string0);
      assertNull(node0);
  }

  @Test
  public void test37()  throws Throwable  {
      String string0 = "!";
      int int0 = (-3356);
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream(string0, int0);
      assertNotNull(jsDocTokenStream0);
      
      Comment comment0 = null;
      Charset charset0 = Charset.defaultCharset();
      assertEquals("UTF-8", charset0.toString());
      assertEquals("UTF-8", charset0.name());
      assertEquals(true, charset0.canEncode());
      assertEquals(true, charset0.isRegistered());
      assertEquals("UTF-8", charset0.displayName());
      assertNotNull(charset0);
      
      Set<String> set0 = charset0.aliases();
      assertEquals("UTF-8", charset0.toString());
      assertEquals("UTF-8", charset0.name());
      assertEquals(true, charset0.canEncode());
      assertEquals(true, charset0.isRegistered());
      assertEquals("UTF-8", charset0.displayName());
      assertEquals(2, set0.size());
      assertEquals(false, set0.isEmpty());
      assertNotNull(set0);
      
      boolean boolean0 = true;
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT3;
      Config config0 = new Config(set0, set0, boolean0, config_LanguageMode0, boolean0);
      assertEquals("UTF-8", charset0.toString());
      assertEquals("UTF-8", charset0.name());
      assertEquals(true, charset0.canEncode());
      assertEquals(true, charset0.isRegistered());
      assertEquals("UTF-8", charset0.displayName());
      assertEquals(2, set0.size());
      assertEquals(false, set0.isEmpty());
      assertNotNull(config0);
      
      ErrorReporter errorReporter0 = null;
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, comment0, string0, config0, errorReporter0);
      assertEquals("UTF-8", charset0.toString());
      assertEquals("UTF-8", charset0.name());
      assertEquals(true, charset0.canEncode());
      assertEquals(true, charset0.isRegistered());
      assertEquals("UTF-8", charset0.displayName());
      assertEquals(2, set0.size());
      assertEquals(false, set0.isEmpty());
      assertNotNull(jsDocInfoParser0);
      
      // Undeclared exception!
      try {
        boolean boolean1 = jsDocInfoParser0.parse();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
}
