/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 22:29:09 GMT 2014
 */

package com.google.javascript.jscomp.parsing;

import static org.junit.Assert.*; import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.junit.Test;
import com.google.javascript.jscomp.mozilla.rhino.Context;
import com.google.javascript.jscomp.mozilla.rhino.ErrorReporter;
import com.google.javascript.jscomp.mozilla.rhino.Token;
import com.google.javascript.jscomp.mozilla.rhino.ast.ArrayComprehensionLoop;
import com.google.javascript.jscomp.mozilla.rhino.ast.BreakStatement;
import com.google.javascript.jscomp.mozilla.rhino.ast.Comment;
import com.google.javascript.jscomp.mozilla.rhino.ast.ElementGet;
import com.google.javascript.jscomp.mozilla.rhino.ast.ErrorCollector;
import com.google.javascript.jscomp.mozilla.rhino.ast.ForInLoop;
import com.google.javascript.jscomp.mozilla.rhino.ast.ParenthesizedExpression;
import com.google.javascript.jscomp.mozilla.rhino.ast.StringLiteral;
import com.google.javascript.jscomp.mozilla.rhino.ast.SwitchStatement;
import com.google.javascript.jscomp.mozilla.rhino.ast.WithStatement;
import com.google.javascript.jscomp.mozilla.rhino.tools.ToolErrorReporter;
import com.google.javascript.jscomp.parsing.Config;
import com.google.javascript.jscomp.parsing.JsDocInfoParser;
import com.google.javascript.jscomp.parsing.JsDocToken;
import com.google.javascript.jscomp.parsing.JsDocTokenStream;
import com.google.javascript.rhino.JSDocInfo;
import com.google.javascript.rhino.Node;
import java.io.PrintStream;
import java.nio.charset.Charset;
import java.util.LinkedHashSet;
import java.util.Locale;
import java.util.Set;
import java.util.TreeSet;



import org.evosuite.runtime.testdata.FileSystemHandling;;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.junit.runner.RunWith;


public class JsDocInfoParserEvoSuite_branch_Test  {

  @Test
  public void test00()  throws Throwable  {
      String string0 = "{wiKW8c*(S^\"";
      Node node0 = JsDocInfoParser.parseTypeString(string0);
      assertNull(node0);
  }

  @Test
  public void test01()  throws Throwable  {
      String string0 = "{S+C,2_\"W}Y*/qL";
      Node node0 = JsDocInfoParser.parseTypeString(string0);
      assertEquals(false, node0.isQuotedString());
      assertEquals(0, node0.getLineno());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(1, node0.getSourcePosition());
      assertEquals(1, node0.getChildCount());
      assertEquals(true, node0.hasChildren());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(81, node0.getType());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(1, node0.getCharno());
      assertEquals(true, node0.hasOneChild());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isVarArgs());
      assertNotNull(node0);
  }

  @Test
  public void test02()  throws Throwable  {
      String string0 = "(Lor,/mozil_a/javscripU/RegExpProxy;Lorg/moz)lla/javascrupt/Crtext;IV";
      Node node0 = JsDocInfoParser.parseTypeString(string0);
      assertEquals(301, node0.getType());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(1, node0.getCharno());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(1, node0.getSourcePosition());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(2, node0.getChildCount());
      assertEquals(0, node0.getLineno());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(true, node0.hasMoreThanOneChild());
      assertEquals(true, node0.hasChildren());
      assertNotNull(node0);
  }

  @Test
  public void test03()  throws Throwable  {
      String string0 = "function";
      Node node0 = JsDocInfoParser.parseTypeString(string0);
      assertNull(node0);
  }

  @Test
  public void test04()  throws Throwable  {
      String string0 = ";\n";
      Node node0 = JsDocInfoParser.parseTypeString(string0);
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.hasChildren());
      assertEquals(1, node0.getSourcePosition());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(40, node0.getType());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(0, node0.getChildCount());
      assertEquals(1, node0.getCharno());
      assertEquals(0, node0.getLineno());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isLocalResultCall());
      assertNotNull(node0);
  }

  @Test
  public void test05()  throws Throwable  {
      String string0 = "undefined";
      Node node0 = JsDocInfoParser.parseTypeString(string0);
      assertEquals(40, node0.getType());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(0, node0.getCharno());
      assertEquals(false, node0.hasChildren());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.hasOneChild());
      assertEquals(0, node0.getLineno());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(0, node0.getSourcePosition());
      assertEquals(false, node0.isQualifiedName());
      assertNotNull(node0);
  }

  @Test
  public void test06()  throws Throwable  {
      String string0 = "null";
      Node node0 = JsDocInfoParser.parseTypeString(string0);
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isVarArgs());
      assertEquals(0, node0.getLineno());
      assertEquals(40, node0.getType());
      assertEquals(false, node0.isQuotedString());
      assertEquals(0, node0.getCharno());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(0, node0.getSourcePosition());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isOptionalArg());
      assertNotNull(node0);
  }

  @Test
  public void test07()  throws Throwable  {
      String string0 = "function (";
      Node node0 = JsDocInfoParser.parseTypeString(string0);
      assertNull(node0);
  }

  @Test
  public void test08()  throws Throwable  {
      String string0 = "[({}w(\"";
      Node node0 = JsDocInfoParser.parseTypeString(string0);
      assertNull(node0);
  }

  @Test
  public void test09()  throws Throwable  {
      String string0 = "*";
      Node node0 = JsDocInfoParser.parseTypeString(string0);
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(302, node0.getType());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isQuotedString());
      assertEquals(0, node0.getLineno());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(0, node0.getCharno());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.hasChildren());
      assertEquals(0, node0.getSourcePosition());
      assertEquals(false, node0.hasOneChild());
      assertNotNull(node0);
  }

  @Test
  public void test10()  throws Throwable  {
      String string0 = "\\iltKO_$qJ;!an6Qu0";
      Node node0 = JsDocInfoParser.parseTypeString(string0);
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(306, node0.getType());
      assertEquals(false, node0.isVarArgs());
      assertEquals(11, node0.getCharno());
      assertEquals(true, node0.hasOneChild());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(true, node0.hasChildren());
      assertEquals(0, node0.getLineno());
      assertEquals(1, node0.getChildCount());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(11, node0.getSourcePosition());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isOptionalArg());
      assertNotNull(node0);
  }

  @Test
  public void test11()  throws Throwable  {
      String string0 = "[7?,bBY=.";
      Node node0 = JsDocInfoParser.parseTypeString(string0);
      assertNull(node0);
  }

  @Test
  public void test12()  throws Throwable  {
      String string0 = "!";
      Node node0 = JsDocInfoParser.parseTypeString(string0);
      assertNull(node0);
  }

  @Test
  public void test13()  throws Throwable  {
      String string0 = "?";
      Node node0 = JsDocInfoParser.parseTypeString(string0);
      assertNull(node0);
  }

  @Test
  public void test14()  throws Throwable  {
      String string0 = "? ,{=l";
      Node node0 = JsDocInfoParser.parseTypeString(string0);
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(0, node0.getLineno());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(2, node0.getCharno());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(304, node0.getType());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.hasChildren());
      assertEquals(2, node0.getSourcePosition());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertNotNull(node0);
  }

  @Test
  public void test15()  throws Throwable  {
      String string0 = "3.<;N:9 @B";
      Node node0 = JsDocInfoParser.parseTypeString(string0);
      assertNull(node0);
  }

  @Test
  public void test16()  throws Throwable  {
      String string0 = "Ky|o7|SRc";
      Node node0 = JsDocInfoParser.parseTypeString(string0);
      assertEquals(false, node0.isVarArgs());
      assertEquals(3, node0.getCharno());
      assertEquals(3, node0.getChildCount());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(3, node0.getSourcePosition());
      assertEquals(true, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(0, node0.getLineno());
      assertEquals(301, node0.getType());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.hasOneChild());
      assertEquals(true, node0.hasChildren());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertNotNull(node0);
  }

  @Test
  public void test17()  throws Throwable  {
      String string0 = "9g  ";
      int int0 = (-596);
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream(string0, int0, int0);
      assertNotNull(jsDocTokenStream0);
      
      ElementGet elementGet0 = new ElementGet(int0);
      assertEquals(-1, elementGet0.getRb());
      assertEquals(-596, elementGet0.getPosition());
      assertEquals(1, elementGet0.getLength());
      assertNull(elementGet0.getJsDoc());
      assertEquals(36, elementGet0.getType());
      assertEquals(false, elementGet0.hasChildren());
      assertEquals(-1, elementGet0.getLb());
      assertEquals(-596, elementGet0.getAbsolutePosition());
      assertEquals(0, elementGet0.depth());
      assertEquals("36", elementGet0.toString());
      assertEquals(-1, elementGet0.getLineno());
      assertNotNull(elementGet0);
      
      Comment comment0 = elementGet0.getJsDocNode();
      assertEquals(-1, elementGet0.getRb());
      assertEquals(-596, elementGet0.getPosition());
      assertEquals(1, elementGet0.getLength());
      assertNull(elementGet0.getJsDoc());
      assertEquals(36, elementGet0.getType());
      assertEquals(false, elementGet0.hasChildren());
      assertEquals(-1, elementGet0.getLb());
      assertEquals(-596, elementGet0.getAbsolutePosition());
      assertEquals(0, elementGet0.depth());
      assertEquals("36", elementGet0.toString());
      assertEquals(-1, elementGet0.getLineno());
      assertNull(comment0);
      
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      assertEquals("[]", linkedHashSet0.toString());
      assertEquals(true, linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertNotNull(linkedHashSet0);
      
      boolean boolean0 = true;
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5_STRICT;
      Config config0 = new Config(linkedHashSet0, linkedHashSet0, boolean0, config_LanguageMode0, boolean0);
      assertEquals("[]", linkedHashSet0.toString());
      assertEquals(true, linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertNotNull(config0);
      
      ToolErrorReporter toolErrorReporter0 = new ToolErrorReporter(boolean0);
      assertEquals(false, toolErrorReporter0.hasReportedError());
      assertEquals(true, toolErrorReporter0.isReportingWarnings());
      assertNotNull(toolErrorReporter0);
      
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, comment0, string0, config0, toolErrorReporter0);
      assertEquals(-1, elementGet0.getRb());
      assertEquals(-596, elementGet0.getPosition());
      assertEquals(1, elementGet0.getLength());
      assertNull(elementGet0.getJsDoc());
      assertEquals(36, elementGet0.getType());
      assertEquals(false, elementGet0.hasChildren());
      assertEquals(-1, elementGet0.getLb());
      assertEquals(-596, elementGet0.getAbsolutePosition());
      assertEquals(0, elementGet0.depth());
      assertEquals("36", elementGet0.toString());
      assertEquals(-1, elementGet0.getLineno());
      assertEquals("[]", linkedHashSet0.toString());
      assertEquals(true, linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertEquals(false, toolErrorReporter0.hasReportedError());
      assertEquals(true, toolErrorReporter0.isReportingWarnings());
      assertNotNull(jsDocInfoParser0);
      
      boolean boolean1 = jsDocInfoParser0.parse();
      assertEquals(-1, elementGet0.getRb());
      assertEquals(-596, elementGet0.getPosition());
      assertEquals(1, elementGet0.getLength());
      assertNull(elementGet0.getJsDoc());
      assertEquals(36, elementGet0.getType());
      assertEquals(false, elementGet0.hasChildren());
      assertEquals(-1, elementGet0.getLb());
      assertEquals(-596, elementGet0.getAbsolutePosition());
      assertEquals(0, elementGet0.depth());
      assertEquals("36", elementGet0.toString());
      assertEquals(-1, elementGet0.getLineno());
      assertEquals("[]", linkedHashSet0.toString());
      assertEquals(true, linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertEquals(false, toolErrorReporter0.hasReportedError());
      assertEquals(true, toolErrorReporter0.isReportingWarnings());
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean0 == boolean1);
  }

  @Test
  public void test18()  throws Throwable  {
      String string0 = "@lU&xE\\MwnI@<b@7";
      int int0 = (-4);
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream(string0, int0, int0);
      assertNotNull(jsDocTokenStream0);
      
      SwitchStatement switchStatement0 = new SwitchStatement();
      assertEquals(1, switchStatement0.getLength());
      assertEquals(-1, switchStatement0.getAbsolutePosition());
      assertEquals(false, switchStatement0.hasChildren());
      assertEquals("114", switchStatement0.toString());
      assertEquals(-1, switchStatement0.getRp());
      assertEquals(-1, switchStatement0.getLp());
      assertEquals(-1, switchStatement0.getLineno());
      assertEquals(114, switchStatement0.getType());
      assertEquals(-1, switchStatement0.getPosition());
      assertEquals(0, switchStatement0.depth());
      assertNull(switchStatement0.getJsDoc());
      assertNotNull(switchStatement0);
      
      Comment comment0 = switchStatement0.getJsDocNode();
      assertEquals(1, switchStatement0.getLength());
      assertEquals(-1, switchStatement0.getAbsolutePosition());
      assertEquals(false, switchStatement0.hasChildren());
      assertEquals("114", switchStatement0.toString());
      assertEquals(-1, switchStatement0.getRp());
      assertEquals(-1, switchStatement0.getLp());
      assertEquals(-1, switchStatement0.getLineno());
      assertEquals(114, switchStatement0.getType());
      assertEquals(-1, switchStatement0.getPosition());
      assertEquals(0, switchStatement0.depth());
      assertNull(switchStatement0.getJsDoc());
      assertNull(comment0);
      
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      assertEquals(true, linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertEquals("[]", linkedHashSet0.toString());
      assertNotNull(linkedHashSet0);
      
      boolean boolean0 = true;
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5;
      Config config0 = new Config(linkedHashSet0, linkedHashSet0, boolean0, config_LanguageMode0, boolean0);
      assertEquals(true, linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertEquals("[]", linkedHashSet0.toString());
      assertNotNull(config0);
      
      ErrorCollector errorCollector0 = new ErrorCollector();
      assertNotNull(errorCollector0);
      
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, comment0, string0, config0, errorCollector0);
      assertEquals(true, linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertEquals("[]", linkedHashSet0.toString());
      assertEquals(1, switchStatement0.getLength());
      assertEquals(-1, switchStatement0.getAbsolutePosition());
      assertEquals(false, switchStatement0.hasChildren());
      assertEquals("114", switchStatement0.toString());
      assertEquals(-1, switchStatement0.getRp());
      assertEquals(-1, switchStatement0.getLp());
      assertEquals(-1, switchStatement0.getLineno());
      assertEquals(114, switchStatement0.getType());
      assertEquals(-1, switchStatement0.getPosition());
      assertEquals(0, switchStatement0.depth());
      assertNull(switchStatement0.getJsDoc());
      assertNotNull(jsDocInfoParser0);
      
      // Undeclared exception!
      try {
        boolean boolean1 = jsDocInfoParser0.parse();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test19()  throws Throwable  {
      int int0 = 408;
      String string0 = "x}6s>|V2`x&$rGLk:";
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream(string0, int0, int0);
      assertNotNull(jsDocTokenStream0);
      
      WithStatement withStatement0 = new WithStatement(int0);
      assertEquals(0, withStatement0.depth());
      assertEquals(-1, withStatement0.getLp());
      assertEquals(408, withStatement0.getPosition());
      assertEquals(-1, withStatement0.getLineno());
      assertEquals(false, withStatement0.hasChildren());
      assertEquals(1, withStatement0.getLength());
      assertEquals("123", withStatement0.toString());
      assertNull(withStatement0.getJsDoc());
      assertEquals(408, withStatement0.getAbsolutePosition());
      assertEquals(-1, withStatement0.getRp());
      assertEquals(123, withStatement0.getType());
      assertNotNull(withStatement0);
      
      Comment comment0 = withStatement0.getJsDocNode();
      assertEquals(0, withStatement0.depth());
      assertEquals(-1, withStatement0.getLp());
      assertEquals(408, withStatement0.getPosition());
      assertEquals(-1, withStatement0.getLineno());
      assertEquals(false, withStatement0.hasChildren());
      assertEquals(1, withStatement0.getLength());
      assertEquals("123", withStatement0.toString());
      assertNull(withStatement0.getJsDoc());
      assertEquals(408, withStatement0.getAbsolutePosition());
      assertEquals(-1, withStatement0.getRp());
      assertEquals(123, withStatement0.getType());
      assertNull(comment0);
      
      TreeSet<String> treeSet0 = new TreeSet<String>();
      assertEquals("[]", treeSet0.toString());
      assertNotNull(treeSet0);
      
      boolean boolean0 = true;
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5_STRICT;
      Config config0 = new Config(treeSet0, treeSet0, boolean0, config_LanguageMode0, boolean0);
      assertEquals("[]", treeSet0.toString());
      assertNotNull(config0);
      
      JsDocToken jsDocToken0 = jsDocTokenStream0.getJsDocToken();
      assertEquals("STRING", jsDocToken0.toString());
      assertEquals("STRING", jsDocToken0.name());
      assertEquals(4, jsDocToken0.ordinal());
      
      ToolErrorReporter toolErrorReporter0 = new ToolErrorReporter(boolean0);
      assertEquals(false, toolErrorReporter0.hasReportedError());
      assertEquals(true, toolErrorReporter0.isReportingWarnings());
      assertNotNull(toolErrorReporter0);
      
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, comment0, string0, config0, toolErrorReporter0);
      assertEquals(false, toolErrorReporter0.hasReportedError());
      assertEquals(true, toolErrorReporter0.isReportingWarnings());
      assertEquals("[]", treeSet0.toString());
      assertEquals(0, withStatement0.depth());
      assertEquals(-1, withStatement0.getLp());
      assertEquals(408, withStatement0.getPosition());
      assertEquals(-1, withStatement0.getLineno());
      assertEquals(false, withStatement0.hasChildren());
      assertEquals(1, withStatement0.getLength());
      assertEquals("123", withStatement0.toString());
      assertNull(withStatement0.getJsDoc());
      assertEquals(408, withStatement0.getAbsolutePosition());
      assertEquals(-1, withStatement0.getRp());
      assertEquals(123, withStatement0.getType());
      assertNotNull(jsDocInfoParser0);
      
      boolean boolean1 = jsDocInfoParser0.parse();
      assertEquals(false, toolErrorReporter0.hasReportedError());
      assertEquals(true, toolErrorReporter0.isReportingWarnings());
      assertEquals("[]", treeSet0.toString());
      assertEquals(0, withStatement0.depth());
      assertEquals(-1, withStatement0.getLp());
      assertEquals(408, withStatement0.getPosition());
      assertEquals(-1, withStatement0.getLineno());
      assertEquals(false, withStatement0.hasChildren());
      assertEquals(1, withStatement0.getLength());
      assertEquals("123", withStatement0.toString());
      assertNull(withStatement0.getJsDoc());
      assertEquals(408, withStatement0.getAbsolutePosition());
      assertEquals(-1, withStatement0.getRp());
      assertEquals(123, withStatement0.getType());
      assertFalse(boolean1);
      assertFalse(boolean0 == boolean1);
      assertFalse(boolean1 == boolean0);
  }

  @Test
  public void test20()  throws Throwable  {
      int int0 = 0;
      String string0 = "]\n";
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream(string0, int0, int0);
      assertNotNull(jsDocTokenStream0);
      
      WithStatement withStatement0 = new WithStatement(int0);
      assertEquals(0, withStatement0.depth());
      assertEquals(-1, withStatement0.getLp());
      assertEquals("123", withStatement0.toString());
      assertEquals(0, withStatement0.getPosition());
      assertEquals(-1, withStatement0.getRp());
      assertEquals(1, withStatement0.getLength());
      assertEquals(-1, withStatement0.getLineno());
      assertNull(withStatement0.getJsDoc());
      assertEquals(0, withStatement0.getAbsolutePosition());
      assertEquals(123, withStatement0.getType());
      assertEquals(false, withStatement0.hasChildren());
      assertNotNull(withStatement0);
      
      Comment comment0 = withStatement0.getJsDocNode();
      assertEquals(0, withStatement0.depth());
      assertEquals(-1, withStatement0.getLp());
      assertEquals("123", withStatement0.toString());
      assertEquals(0, withStatement0.getPosition());
      assertEquals(-1, withStatement0.getRp());
      assertEquals(1, withStatement0.getLength());
      assertEquals(-1, withStatement0.getLineno());
      assertNull(withStatement0.getJsDoc());
      assertEquals(0, withStatement0.getAbsolutePosition());
      assertEquals(123, withStatement0.getType());
      assertEquals(false, withStatement0.hasChildren());
      assertNull(comment0);
      
      TreeSet<String> treeSet0 = new TreeSet<String>();
      assertEquals("[]", treeSet0.toString());
      assertNotNull(treeSet0);
      
      boolean boolean0 = true;
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5;
      Config config0 = new Config(treeSet0, treeSet0, boolean0, config_LanguageMode0, boolean0);
      assertEquals("[]", treeSet0.toString());
      assertNotNull(config0);
      
      ErrorCollector errorCollector0 = new ErrorCollector();
      assertNotNull(errorCollector0);
      
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, comment0, string0, config0, errorCollector0);
      assertEquals("[]", treeSet0.toString());
      assertEquals(0, withStatement0.depth());
      assertEquals(-1, withStatement0.getLp());
      assertEquals("123", withStatement0.toString());
      assertEquals(0, withStatement0.getPosition());
      assertEquals(-1, withStatement0.getRp());
      assertEquals(1, withStatement0.getLength());
      assertEquals(-1, withStatement0.getLineno());
      assertNull(withStatement0.getJsDoc());
      assertEquals(0, withStatement0.getAbsolutePosition());
      assertEquals(123, withStatement0.getType());
      assertEquals(false, withStatement0.hasChildren());
      assertNotNull(jsDocInfoParser0);
      
      // Undeclared exception!
      try {
        boolean boolean1 = jsDocInfoParser0.parse();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test21()  throws Throwable  {
      String string0 = "|";
      int int0 = 2113;
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream(string0, int0);
      assertNotNull(jsDocTokenStream0);
      
      ArrayComprehensionLoop arrayComprehensionLoop0 = new ArrayComprehensionLoop();
      assertEquals(1, arrayComprehensionLoop0.getLength());
      assertEquals(-1, arrayComprehensionLoop0.getInPosition());
      assertEquals(-1, arrayComprehensionLoop0.getEachPosition());
      assertEquals("119", arrayComprehensionLoop0.toString());
      assertNull(arrayComprehensionLoop0.getJsDoc());
      assertEquals(-1, arrayComprehensionLoop0.getLineno());
      assertEquals(false, arrayComprehensionLoop0.isForEach());
      assertEquals(-1, arrayComprehensionLoop0.getPosition());
      assertEquals(false, arrayComprehensionLoop0.hasChildren());
      assertEquals(-1, arrayComprehensionLoop0.getRp());
      assertEquals(-1, arrayComprehensionLoop0.getAbsolutePosition());
      assertEquals(-1, arrayComprehensionLoop0.getLp());
      assertEquals(119, arrayComprehensionLoop0.getType());
      assertEquals(0, arrayComprehensionLoop0.depth());
      assertNotNull(arrayComprehensionLoop0);
      
      Comment comment0 = arrayComprehensionLoop0.getJsDocNode();
      assertEquals(1, arrayComprehensionLoop0.getLength());
      assertEquals(-1, arrayComprehensionLoop0.getInPosition());
      assertEquals(-1, arrayComprehensionLoop0.getEachPosition());
      assertEquals("119", arrayComprehensionLoop0.toString());
      assertNull(arrayComprehensionLoop0.getJsDoc());
      assertEquals(-1, arrayComprehensionLoop0.getLineno());
      assertEquals(false, arrayComprehensionLoop0.isForEach());
      assertEquals(-1, arrayComprehensionLoop0.getPosition());
      assertEquals(false, arrayComprehensionLoop0.hasChildren());
      assertEquals(-1, arrayComprehensionLoop0.getRp());
      assertEquals(-1, arrayComprehensionLoop0.getAbsolutePosition());
      assertEquals(-1, arrayComprehensionLoop0.getLp());
      assertEquals(119, arrayComprehensionLoop0.getType());
      assertEquals(0, arrayComprehensionLoop0.depth());
      assertNull(comment0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      TreeSet<String> treeSet0 = new TreeSet<String>();
      assertEquals("[]", treeSet0.toString());
      assertNotNull(treeSet0);
      
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5;
      Config config0 = new Config(treeSet0, treeSet0, boolean0, config_LanguageMode0, boolean0);
      assertEquals("[]", treeSet0.toString());
      assertNotNull(config0);
      
      ErrorCollector errorCollector0 = new ErrorCollector();
      assertNotNull(errorCollector0);
      
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, comment0, string0, config0, errorCollector0);
      assertEquals("[]", treeSet0.toString());
      assertEquals(1, arrayComprehensionLoop0.getLength());
      assertEquals(-1, arrayComprehensionLoop0.getInPosition());
      assertEquals(-1, arrayComprehensionLoop0.getEachPosition());
      assertEquals("119", arrayComprehensionLoop0.toString());
      assertNull(arrayComprehensionLoop0.getJsDoc());
      assertEquals(-1, arrayComprehensionLoop0.getLineno());
      assertEquals(false, arrayComprehensionLoop0.isForEach());
      assertEquals(-1, arrayComprehensionLoop0.getPosition());
      assertEquals(false, arrayComprehensionLoop0.hasChildren());
      assertEquals(-1, arrayComprehensionLoop0.getRp());
      assertEquals(-1, arrayComprehensionLoop0.getAbsolutePosition());
      assertEquals(-1, arrayComprehensionLoop0.getLp());
      assertEquals(119, arrayComprehensionLoop0.getType());
      assertEquals(0, arrayComprehensionLoop0.depth());
      assertNotNull(jsDocInfoParser0);
      
      // Undeclared exception!
      try {
        boolean boolean1 = jsDocInfoParser0.parse();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test22()  throws Throwable  {
      String string0 = "5l0$^v+R_?[ufZu%~";
      int int0 = (-3854);
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream(string0, int0);
      assertNotNull(jsDocTokenStream0);
      
      JsDocToken jsDocToken0 = jsDocTokenStream0.getJsDocToken();
      assertEquals("STRING", jsDocToken0.toString());
      assertEquals("STRING", jsDocToken0.name());
      assertEquals(4, jsDocToken0.ordinal());
      
      ParenthesizedExpression parenthesizedExpression0 = new ParenthesizedExpression(int0);
      assertEquals(0, parenthesizedExpression0.depth());
      assertEquals(-3854, parenthesizedExpression0.getAbsolutePosition());
      assertEquals(false, parenthesizedExpression0.hasChildren());
      assertNull(parenthesizedExpression0.getJsDoc());
      assertEquals(1, parenthesizedExpression0.getLength());
      assertEquals(-3854, parenthesizedExpression0.getPosition());
      assertEquals("87", parenthesizedExpression0.toString());
      assertEquals(-1, parenthesizedExpression0.getLineno());
      assertEquals(87, parenthesizedExpression0.getType());
      assertNotNull(parenthesizedExpression0);
      
      Comment comment0 = parenthesizedExpression0.getJsDocNode();
      assertEquals(0, parenthesizedExpression0.depth());
      assertEquals(-3854, parenthesizedExpression0.getAbsolutePosition());
      assertEquals(false, parenthesizedExpression0.hasChildren());
      assertNull(parenthesizedExpression0.getJsDoc());
      assertEquals(1, parenthesizedExpression0.getLength());
      assertEquals(-3854, parenthesizedExpression0.getPosition());
      assertEquals("87", parenthesizedExpression0.toString());
      assertEquals(-1, parenthesizedExpression0.getLineno());
      assertEquals(87, parenthesizedExpression0.getType());
      assertNull(comment0);
      
      Locale locale0 = new Locale(string0, string0, string0);
      assertEquals("5l0$^v+R_?[ufZu%~", locale0.getVariant());
      assertEquals("5l0$^v+r_?[ufzu%~", locale0.getLanguage());
      assertEquals("5l0$^v+r_?[ufzu%~_5L0$^V+R_?[UFZU%~_5l0$^v+R_?[ufZu%~", locale0.toString());
      assertEquals("5L0$^V+R_?[UFZU%~", locale0.getCountry());
      assertNotNull(locale0);
      
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      assertEquals(true, set0.isEmpty());
      assertEquals(0, set0.size());
      assertEquals("5l0$^v+R_?[ufZu%~", locale0.getVariant());
      assertEquals("5l0$^v+r_?[ufzu%~", locale0.getLanguage());
      assertEquals("5l0$^v+r_?[ufzu%~_5L0$^V+R_?[UFZU%~_5l0$^v+R_?[ufZu%~", locale0.toString());
      assertEquals("5L0$^V+R_?[UFZU%~", locale0.getCountry());
      assertNotNull(set0);
      
      boolean boolean0 = true;
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT3;
      Config config0 = new Config(set0, set0, boolean0, config_LanguageMode0, boolean0);
      assertEquals(true, set0.isEmpty());
      assertEquals(0, set0.size());
      assertEquals("5l0$^v+R_?[ufZu%~", locale0.getVariant());
      assertEquals("5l0$^v+r_?[ufzu%~", locale0.getLanguage());
      assertEquals("5l0$^v+r_?[ufzu%~_5L0$^V+R_?[UFZU%~_5l0$^v+R_?[ufZu%~", locale0.toString());
      assertEquals("5L0$^V+R_?[UFZU%~", locale0.getCountry());
      assertNotNull(config0);
      
      ErrorCollector errorCollector0 = new ErrorCollector();
      assertNotNull(errorCollector0);
      
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, comment0, string0, config0, errorCollector0);
      assertEquals(true, set0.isEmpty());
      assertEquals(0, set0.size());
      assertEquals("5l0$^v+R_?[ufZu%~", locale0.getVariant());
      assertEquals("5l0$^v+r_?[ufzu%~", locale0.getLanguage());
      assertEquals("5l0$^v+r_?[ufzu%~_5L0$^V+R_?[UFZU%~_5l0$^v+R_?[ufZu%~", locale0.toString());
      assertEquals("5L0$^V+R_?[UFZU%~", locale0.getCountry());
      assertEquals(0, parenthesizedExpression0.depth());
      assertEquals(-3854, parenthesizedExpression0.getAbsolutePosition());
      assertEquals(false, parenthesizedExpression0.hasChildren());
      assertNull(parenthesizedExpression0.getJsDoc());
      assertEquals(1, parenthesizedExpression0.getLength());
      assertEquals(-3854, parenthesizedExpression0.getPosition());
      assertEquals("87", parenthesizedExpression0.toString());
      assertEquals(-1, parenthesizedExpression0.getLineno());
      assertEquals(87, parenthesizedExpression0.getType());
      assertNotNull(jsDocInfoParser0);
      
      // Undeclared exception!
      try {
        boolean boolean1 = jsDocInfoParser0.parse();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test23()  throws Throwable  {
      String string0 = "{P>5c\\LxJ37:o(z`=@";
      int int0 = (-3333);
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream(string0, int0);
      assertNotNull(jsDocTokenStream0);
      
      StringLiteral stringLiteral0 = new StringLiteral();
      assertNull(stringLiteral0.getJsDoc());
      assertEquals(0, stringLiteral0.depth());
      assertEquals('\u0000', stringLiteral0.getQuoteCharacter());
      assertEquals(1, stringLiteral0.getLength());
      assertEquals(false, stringLiteral0.hasChildren());
      assertEquals("41", stringLiteral0.toString());
      assertEquals(41, stringLiteral0.getType());
      assertEquals(-1, stringLiteral0.getLineno());
      assertEquals(-1, stringLiteral0.getAbsolutePosition());
      assertEquals(-1, stringLiteral0.getPosition());
      assertNull(stringLiteral0.getValue());
      assertNotNull(stringLiteral0);
      
      Comment comment0 = stringLiteral0.getJsDocNode();
      assertNull(stringLiteral0.getJsDoc());
      assertEquals(0, stringLiteral0.depth());
      assertEquals('\u0000', stringLiteral0.getQuoteCharacter());
      assertEquals(1, stringLiteral0.getLength());
      assertEquals(false, stringLiteral0.hasChildren());
      assertEquals("41", stringLiteral0.toString());
      assertEquals(41, stringLiteral0.getType());
      assertEquals(-1, stringLiteral0.getLineno());
      assertEquals(-1, stringLiteral0.getAbsolutePosition());
      assertEquals(-1, stringLiteral0.getPosition());
      assertNull(stringLiteral0.getValue());
      assertNull(comment0);
      
      Locale locale0 = Locale.KOREAN;
      assertEquals("", locale0.getVariant());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("ko", locale0.toString());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertNotNull(locale0);
      
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      assertEquals("", locale0.getVariant());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("ko", locale0.toString());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals(0, set0.size());
      assertEquals(true, set0.isEmpty());
      assertNotNull(set0);
      
      boolean boolean0 = true;
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5_STRICT;
      Config config0 = new Config(set0, set0, boolean0, config_LanguageMode0, boolean0);
      assertEquals("", locale0.getVariant());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("ko", locale0.toString());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals(0, set0.size());
      assertEquals(true, set0.isEmpty());
      assertNotNull(config0);
      
      ErrorCollector errorCollector0 = new ErrorCollector();
      assertNotNull(errorCollector0);
      
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, comment0, string0, config0, errorCollector0);
      assertEquals("", locale0.getVariant());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("ko", locale0.toString());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertNull(stringLiteral0.getJsDoc());
      assertEquals(0, stringLiteral0.depth());
      assertEquals('\u0000', stringLiteral0.getQuoteCharacter());
      assertEquals(1, stringLiteral0.getLength());
      assertEquals(false, stringLiteral0.hasChildren());
      assertEquals("41", stringLiteral0.toString());
      assertEquals(41, stringLiteral0.getType());
      assertEquals(-1, stringLiteral0.getLineno());
      assertEquals(-1, stringLiteral0.getAbsolutePosition());
      assertEquals(-1, stringLiteral0.getPosition());
      assertNull(stringLiteral0.getValue());
      assertEquals(0, set0.size());
      assertEquals(true, set0.isEmpty());
      assertNotNull(jsDocInfoParser0);
      
      // Undeclared exception!
      try {
        boolean boolean1 = jsDocInfoParser0.parse();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test24()  throws Throwable  {
      int int0 = 395;
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5_STRICT;
      String string0 = "\\itKO_\\J*>;!anQu0";
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream(string0, int0, int0);
      assertNotNull(jsDocTokenStream0);
      
      WithStatement withStatement0 = new WithStatement(int0);
      assertNull(withStatement0.getJsDoc());
      assertEquals(-1, withStatement0.getRp());
      assertEquals(395, withStatement0.getPosition());
      assertEquals(123, withStatement0.getType());
      assertEquals(false, withStatement0.hasChildren());
      assertEquals(0, withStatement0.depth());
      assertEquals(1, withStatement0.getLength());
      assertEquals("123", withStatement0.toString());
      assertEquals(395, withStatement0.getAbsolutePosition());
      assertEquals(-1, withStatement0.getLp());
      assertEquals(-1, withStatement0.getLineno());
      assertNotNull(withStatement0);
      
      Comment comment0 = withStatement0.getJsDocNode();
      assertNull(withStatement0.getJsDoc());
      assertEquals(-1, withStatement0.getRp());
      assertEquals(395, withStatement0.getPosition());
      assertEquals(123, withStatement0.getType());
      assertEquals(false, withStatement0.hasChildren());
      assertEquals(0, withStatement0.depth());
      assertEquals(1, withStatement0.getLength());
      assertEquals("123", withStatement0.toString());
      assertEquals(395, withStatement0.getAbsolutePosition());
      assertEquals(-1, withStatement0.getLp());
      assertEquals(-1, withStatement0.getLineno());
      assertNull(comment0);
      
      TreeSet<String> treeSet0 = new TreeSet<String>();
      assertEquals("[]", treeSet0.toString());
      assertNotNull(treeSet0);
      
      boolean boolean0 = true;
      Config config0 = new Config(treeSet0, treeSet0, boolean0, config_LanguageMode0, boolean0);
      assertEquals("[]", treeSet0.toString());
      assertNotNull(config0);
      
      JsDocToken jsDocToken0 = jsDocTokenStream0.getJsDocToken();
      assertEquals("STRING", jsDocToken0.name());
      assertEquals("STRING", jsDocToken0.toString());
      assertEquals(4, jsDocToken0.ordinal());
      
      ToolErrorReporter toolErrorReporter0 = new ToolErrorReporter(boolean0);
      assertEquals(true, toolErrorReporter0.isReportingWarnings());
      assertEquals(false, toolErrorReporter0.hasReportedError());
      assertNotNull(toolErrorReporter0);
      
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, comment0, string0, config0, toolErrorReporter0);
      assertEquals(true, toolErrorReporter0.isReportingWarnings());
      assertEquals(false, toolErrorReporter0.hasReportedError());
      assertEquals("[]", treeSet0.toString());
      assertNull(withStatement0.getJsDoc());
      assertEquals(-1, withStatement0.getRp());
      assertEquals(395, withStatement0.getPosition());
      assertEquals(123, withStatement0.getType());
      assertEquals(false, withStatement0.hasChildren());
      assertEquals(0, withStatement0.depth());
      assertEquals(1, withStatement0.getLength());
      assertEquals("123", withStatement0.toString());
      assertEquals(395, withStatement0.getAbsolutePosition());
      assertEquals(-1, withStatement0.getLp());
      assertEquals(-1, withStatement0.getLineno());
      assertNotNull(jsDocInfoParser0);
      
      boolean boolean1 = jsDocInfoParser0.parse();
      assertEquals(true, toolErrorReporter0.isReportingWarnings());
      assertEquals(false, toolErrorReporter0.hasReportedError());
      assertEquals("[]", treeSet0.toString());
      assertNull(withStatement0.getJsDoc());
      assertEquals(-1, withStatement0.getRp());
      assertEquals(395, withStatement0.getPosition());
      assertEquals(123, withStatement0.getType());
      assertEquals(false, withStatement0.hasChildren());
      assertEquals(0, withStatement0.depth());
      assertEquals(1, withStatement0.getLength());
      assertEquals("123", withStatement0.toString());
      assertEquals(395, withStatement0.getAbsolutePosition());
      assertEquals(-1, withStatement0.getLp());
      assertEquals(-1, withStatement0.getLineno());
      assertFalse(boolean1);
      assertFalse(boolean0 == boolean1);
      assertFalse(boolean1 == boolean0);
  }

  @Test
  public void test25()  throws Throwable  {
      int int0 = 0;
      String string0 = ", ts.tokenBeg=";
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream(string0, int0, int0);
      assertNotNull(jsDocTokenStream0);
      
      WithStatement withStatement0 = new WithStatement(int0);
      assertEquals(-1, withStatement0.getLineno());
      assertEquals(false, withStatement0.hasChildren());
      assertNull(withStatement0.getJsDoc());
      assertEquals(-1, withStatement0.getRp());
      assertEquals(123, withStatement0.getType());
      assertEquals(0, withStatement0.depth());
      assertEquals(-1, withStatement0.getLp());
      assertEquals("123", withStatement0.toString());
      assertEquals(0, withStatement0.getPosition());
      assertEquals(1, withStatement0.getLength());
      assertEquals(0, withStatement0.getAbsolutePosition());
      assertNotNull(withStatement0);
      
      Comment comment0 = withStatement0.getJsDocNode();
      assertEquals(-1, withStatement0.getLineno());
      assertEquals(false, withStatement0.hasChildren());
      assertNull(withStatement0.getJsDoc());
      assertEquals(-1, withStatement0.getRp());
      assertEquals(123, withStatement0.getType());
      assertEquals(0, withStatement0.depth());
      assertEquals(-1, withStatement0.getLp());
      assertEquals("123", withStatement0.toString());
      assertEquals(0, withStatement0.getPosition());
      assertEquals(1, withStatement0.getLength());
      assertEquals(0, withStatement0.getAbsolutePosition());
      assertNull(comment0);
      
      TreeSet<String> treeSet0 = new TreeSet<String>();
      assertEquals("[]", treeSet0.toString());
      assertNotNull(treeSet0);
      
      boolean boolean0 = true;
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5;
      Config config0 = new Config(treeSet0, treeSet0, boolean0, config_LanguageMode0, boolean0);
      assertEquals("[]", treeSet0.toString());
      assertNotNull(config0);
      
      ToolErrorReporter toolErrorReporter0 = new ToolErrorReporter(boolean0);
      assertEquals(true, toolErrorReporter0.isReportingWarnings());
      assertEquals(false, toolErrorReporter0.hasReportedError());
      assertNotNull(toolErrorReporter0);
      
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, comment0, string0, config0, toolErrorReporter0);
      assertEquals(true, toolErrorReporter0.isReportingWarnings());
      assertEquals(false, toolErrorReporter0.hasReportedError());
      assertEquals("[]", treeSet0.toString());
      assertEquals(-1, withStatement0.getLineno());
      assertEquals(false, withStatement0.hasChildren());
      assertNull(withStatement0.getJsDoc());
      assertEquals(-1, withStatement0.getRp());
      assertEquals(123, withStatement0.getType());
      assertEquals(0, withStatement0.depth());
      assertEquals(-1, withStatement0.getLp());
      assertEquals("123", withStatement0.toString());
      assertEquals(0, withStatement0.getPosition());
      assertEquals(1, withStatement0.getLength());
      assertEquals(0, withStatement0.getAbsolutePosition());
      assertNotNull(jsDocInfoParser0);
      
      boolean boolean1 = jsDocInfoParser0.parse();
      assertEquals(true, toolErrorReporter0.isReportingWarnings());
      assertEquals(false, toolErrorReporter0.hasReportedError());
      assertEquals("[]", treeSet0.toString());
      assertEquals(-1, withStatement0.getLineno());
      assertEquals(false, withStatement0.hasChildren());
      assertNull(withStatement0.getJsDoc());
      assertEquals(-1, withStatement0.getRp());
      assertEquals(123, withStatement0.getType());
      assertEquals(0, withStatement0.depth());
      assertEquals(-1, withStatement0.getLp());
      assertEquals("123", withStatement0.toString());
      assertEquals(0, withStatement0.getPosition());
      assertEquals(1, withStatement0.getLength());
      assertEquals(0, withStatement0.getAbsolutePosition());
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean0 == boolean1);
  }

  @Test
  public void test26()  throws Throwable  {
      int int0 = 442;
      String string0 = "\\i~'KO_\\Q*R7;!an6u0";
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream(string0, int0, int0);
      assertNotNull(jsDocTokenStream0);
      
      WithStatement withStatement0 = new WithStatement(int0);
      assertEquals(0, withStatement0.depth());
      assertEquals(-1, withStatement0.getLp());
      assertEquals(-1, withStatement0.getRp());
      assertEquals(-1, withStatement0.getLineno());
      assertEquals(123, withStatement0.getType());
      assertEquals("123", withStatement0.toString());
      assertEquals(1, withStatement0.getLength());
      assertNull(withStatement0.getJsDoc());
      assertEquals(442, withStatement0.getAbsolutePosition());
      assertEquals(442, withStatement0.getPosition());
      assertEquals(false, withStatement0.hasChildren());
      assertNotNull(withStatement0);
      
      Comment comment0 = withStatement0.getJsDocNode();
      assertEquals(0, withStatement0.depth());
      assertEquals(-1, withStatement0.getLp());
      assertEquals(-1, withStatement0.getRp());
      assertEquals(-1, withStatement0.getLineno());
      assertEquals(123, withStatement0.getType());
      assertEquals("123", withStatement0.toString());
      assertEquals(1, withStatement0.getLength());
      assertNull(withStatement0.getJsDoc());
      assertEquals(442, withStatement0.getAbsolutePosition());
      assertEquals(442, withStatement0.getPosition());
      assertEquals(false, withStatement0.hasChildren());
      assertNull(comment0);
      
      TreeSet<String> treeSet0 = new TreeSet<String>();
      assertEquals("[]", treeSet0.toString());
      assertNotNull(treeSet0);
      
      boolean boolean0 = false;
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5_STRICT;
      Config config0 = new Config(treeSet0, treeSet0, boolean0, config_LanguageMode0, boolean0);
      assertEquals("[]", treeSet0.toString());
      assertNotNull(config0);
      
      JsDocToken jsDocToken0 = jsDocTokenStream0.getJsDocToken();
      assertEquals("STRING", jsDocToken0.toString());
      assertEquals(4, jsDocToken0.ordinal());
      assertEquals("STRING", jsDocToken0.name());
      
      ToolErrorReporter toolErrorReporter0 = new ToolErrorReporter(boolean0);
      assertEquals(false, toolErrorReporter0.hasReportedError());
      assertEquals(false, toolErrorReporter0.isReportingWarnings());
      assertNotNull(toolErrorReporter0);
      
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, comment0, string0, config0, toolErrorReporter0);
      assertEquals(false, toolErrorReporter0.hasReportedError());
      assertEquals(false, toolErrorReporter0.isReportingWarnings());
      assertEquals("[]", treeSet0.toString());
      assertEquals(0, withStatement0.depth());
      assertEquals(-1, withStatement0.getLp());
      assertEquals(-1, withStatement0.getRp());
      assertEquals(-1, withStatement0.getLineno());
      assertEquals(123, withStatement0.getType());
      assertEquals("123", withStatement0.toString());
      assertEquals(1, withStatement0.getLength());
      assertNull(withStatement0.getJsDoc());
      assertEquals(442, withStatement0.getAbsolutePosition());
      assertEquals(442, withStatement0.getPosition());
      assertEquals(false, withStatement0.hasChildren());
      assertNotNull(jsDocInfoParser0);
      
      boolean boolean1 = jsDocInfoParser0.parse();
      assertEquals(false, toolErrorReporter0.hasReportedError());
      assertEquals(false, toolErrorReporter0.isReportingWarnings());
      assertEquals("[]", treeSet0.toString());
      assertEquals(0, withStatement0.depth());
      assertEquals(-1, withStatement0.getLp());
      assertEquals(-1, withStatement0.getRp());
      assertEquals(-1, withStatement0.getLineno());
      assertEquals(123, withStatement0.getType());
      assertEquals("123", withStatement0.toString());
      assertEquals(1, withStatement0.getLength());
      assertNull(withStatement0.getJsDoc());
      assertEquals(442, withStatement0.getAbsolutePosition());
      assertEquals(442, withStatement0.getPosition());
      assertEquals(false, withStatement0.hasChildren());
      assertFalse(boolean1);
      assertTrue(boolean0 == boolean1);
      assertTrue(boolean1 == boolean0);
  }

  @Test
  public void test27()  throws Throwable  {
      int int0 = 0;
      String string0 = "\n";
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream(string0, int0, int0);
      assertNotNull(jsDocTokenStream0);
      
      WithStatement withStatement0 = new WithStatement(int0);
      assertEquals(0, withStatement0.getPosition());
      assertEquals(123, withStatement0.getType());
      assertEquals("123", withStatement0.toString());
      assertEquals(-1, withStatement0.getLineno());
      assertEquals(false, withStatement0.hasChildren());
      assertEquals(0, withStatement0.getAbsolutePosition());
      assertEquals(0, withStatement0.depth());
      assertEquals(-1, withStatement0.getRp());
      assertNull(withStatement0.getJsDoc());
      assertEquals(1, withStatement0.getLength());
      assertEquals(-1, withStatement0.getLp());
      assertNotNull(withStatement0);
      
      Comment comment0 = withStatement0.getJsDocNode();
      assertEquals(0, withStatement0.getPosition());
      assertEquals(123, withStatement0.getType());
      assertEquals("123", withStatement0.toString());
      assertEquals(-1, withStatement0.getLineno());
      assertEquals(false, withStatement0.hasChildren());
      assertEquals(0, withStatement0.getAbsolutePosition());
      assertEquals(0, withStatement0.depth());
      assertEquals(-1, withStatement0.getRp());
      assertNull(withStatement0.getJsDoc());
      assertEquals(1, withStatement0.getLength());
      assertEquals(-1, withStatement0.getLp());
      assertNull(comment0);
      
      TreeSet<String> treeSet0 = new TreeSet<String>();
      assertEquals("[]", treeSet0.toString());
      assertNotNull(treeSet0);
      
      boolean boolean0 = true;
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT3;
      Config config0 = new Config(treeSet0, treeSet0, boolean0, config_LanguageMode0, boolean0);
      assertEquals("[]", treeSet0.toString());
      assertNotNull(config0);
      
      ErrorCollector errorCollector0 = new ErrorCollector();
      assertNotNull(errorCollector0);
      
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, comment0, string0, config0, errorCollector0);
      assertEquals(0, withStatement0.getPosition());
      assertEquals(123, withStatement0.getType());
      assertEquals("123", withStatement0.toString());
      assertEquals(-1, withStatement0.getLineno());
      assertEquals(false, withStatement0.hasChildren());
      assertEquals(0, withStatement0.getAbsolutePosition());
      assertEquals(0, withStatement0.depth());
      assertEquals(-1, withStatement0.getRp());
      assertNull(withStatement0.getJsDoc());
      assertEquals(1, withStatement0.getLength());
      assertEquals(-1, withStatement0.getLp());
      assertEquals("[]", treeSet0.toString());
      assertNotNull(jsDocInfoParser0);
      
      // Undeclared exception!
      try {
        boolean boolean1 = jsDocInfoParser0.parse();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test28()  throws Throwable  {
      String string0 = "PYow?N~#F0FncP9;bK";
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream(string0);
      assertNotNull(jsDocTokenStream0);
      
      int int0 = (-38);
      Token.CommentType token_CommentType0 = Token.CommentType.HTML;
      Comment comment0 = new Comment(int0, int0, token_CommentType0, string0);
      assertEquals(-38, comment0.getPosition());
      assertEquals("161", comment0.toString());
      assertEquals("PYow?N~#F0FncP9;bK", comment0.getValue());
      assertEquals(-38, comment0.getLength());
      assertEquals(false, comment0.hasChildren());
      assertEquals(-1, comment0.getLineno());
      assertEquals(161, comment0.getType());
      assertNull(comment0.getJsDoc());
      assertEquals(false, comment0.isParsed());
      assertEquals(0, comment0.depth());
      assertEquals(-38, comment0.getAbsolutePosition());
      assertEquals(Token.CommentType.HTML, comment0.getCommentType());
      assertNotNull(comment0);
      
      Charset charset0 = Charset.defaultCharset();
      assertEquals(true, charset0.isRegistered());
      assertEquals("UTF-8", charset0.toString());
      assertEquals(true, charset0.canEncode());
      assertEquals("UTF-8", charset0.name());
      assertEquals("UTF-8", charset0.displayName());
      assertNotNull(charset0);
      
      Set<String> set0 = charset0.aliases();
      assertEquals(true, charset0.isRegistered());
      assertEquals("UTF-8", charset0.toString());
      assertEquals(true, charset0.canEncode());
      assertEquals("UTF-8", charset0.name());
      assertEquals("UTF-8", charset0.displayName());
      assertEquals(2, set0.size());
      assertEquals(false, set0.isEmpty());
      assertNotNull(set0);
      
      boolean boolean0 = true;
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5;
      Config config0 = new Config(set0, set0, boolean0, config_LanguageMode0, boolean0);
      assertEquals(true, charset0.isRegistered());
      assertEquals("UTF-8", charset0.toString());
      assertEquals(true, charset0.canEncode());
      assertEquals("UTF-8", charset0.name());
      assertEquals("UTF-8", charset0.displayName());
      assertEquals(2, set0.size());
      assertEquals(false, set0.isEmpty());
      assertNotNull(config0);
      
      ErrorCollector errorCollector0 = new ErrorCollector();
      assertNotNull(errorCollector0);
      
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, comment0, string0, config0, errorCollector0);
      assertEquals(true, charset0.isRegistered());
      assertEquals("UTF-8", charset0.toString());
      assertEquals(true, charset0.canEncode());
      assertEquals("UTF-8", charset0.name());
      assertEquals("UTF-8", charset0.displayName());
      assertEquals(2, set0.size());
      assertEquals(false, set0.isEmpty());
      assertEquals(-38, comment0.getPosition());
      assertEquals("161", comment0.toString());
      assertEquals("PYow?N~#F0FncP9;bK", comment0.getValue());
      assertEquals(-38, comment0.getLength());
      assertEquals(false, comment0.hasChildren());
      assertEquals(-1, comment0.getLineno());
      assertEquals(161, comment0.getType());
      assertNull(comment0.getJsDoc());
      assertEquals(false, comment0.isParsed());
      assertEquals(0, comment0.depth());
      assertEquals(-38, comment0.getAbsolutePosition());
      assertEquals(Token.CommentType.HTML, comment0.getCommentType());
      assertNotNull(jsDocInfoParser0);
  }

  @Test
  public void test29()  throws Throwable  {
      int int0 = (-3341);
      String string0 = "msg.jsdoc.authormissing";
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream(string0, int0);
      assertNotNull(jsDocTokenStream0);
      
      ForInLoop forInLoop0 = new ForInLoop(int0, int0);
      assertEquals(0, forInLoop0.depth());
      assertEquals(-3341, forInLoop0.getAbsolutePosition());
      assertEquals("119", forInLoop0.toString());
      assertEquals(false, forInLoop0.isForEach());
      assertEquals(-3341, forInLoop0.getPosition());
      assertEquals(-1, forInLoop0.getInPosition());
      assertEquals(-1, forInLoop0.getLineno());
      assertEquals(-1, forInLoop0.getEachPosition());
      assertEquals(-3341, forInLoop0.getLength());
      assertEquals(-1, forInLoop0.getRp());
      assertEquals(119, forInLoop0.getType());
      assertNull(forInLoop0.getJsDoc());
      assertEquals(false, forInLoop0.hasChildren());
      assertEquals(-1, forInLoop0.getLp());
      assertNotNull(forInLoop0);
      
      Comment comment0 = forInLoop0.getJsDocNode();
      assertEquals(0, forInLoop0.depth());
      assertEquals(-3341, forInLoop0.getAbsolutePosition());
      assertEquals("119", forInLoop0.toString());
      assertEquals(false, forInLoop0.isForEach());
      assertEquals(-3341, forInLoop0.getPosition());
      assertEquals(-1, forInLoop0.getInPosition());
      assertEquals(-1, forInLoop0.getLineno());
      assertEquals(-1, forInLoop0.getEachPosition());
      assertEquals(-3341, forInLoop0.getLength());
      assertEquals(-1, forInLoop0.getRp());
      assertEquals(119, forInLoop0.getType());
      assertNull(forInLoop0.getJsDoc());
      assertEquals(false, forInLoop0.hasChildren());
      assertEquals(-1, forInLoop0.getLp());
      assertNull(comment0);
      
      Locale locale0 = Locale.UK;
      assertEquals("en_GB", locale0.toString());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("GB", locale0.getCountry());
      assertEquals("GBR", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.getLanguage());
      assertNotNull(locale0);
      
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      assertEquals(0, set0.size());
      assertEquals(true, set0.isEmpty());
      assertEquals("en_GB", locale0.toString());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("GB", locale0.getCountry());
      assertEquals("GBR", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.getLanguage());
      assertNotNull(set0);
      
      boolean boolean0 = true;
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT3;
      Config config0 = new Config(set0, set0, boolean0, config_LanguageMode0, boolean0);
      assertEquals(0, set0.size());
      assertEquals(true, set0.isEmpty());
      assertEquals("en_GB", locale0.toString());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("GB", locale0.getCountry());
      assertEquals("GBR", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.getLanguage());
      assertNotNull(config0);
      
      Context context0 = new Context();
      assertEquals(0, context0.getOptimizationLevel());
      assertEquals(false, context0.hasCompileFunctionsWithDynamicScope());
      assertEquals(false, context0.isSealed());
      assertEquals(0, context0.getLanguageVersion());
      assertEquals(false, context0.isGeneratingDebug());
      assertEquals(false, context0.isGeneratingDebugChanged());
      assertEquals(2147483647, context0.getMaximumInterpreterStackDepth());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertEquals(true, context0.isGeneratingSource());
      assertFalse(context0.generateObserverCount);
      assertNotNull(context0);
      
      ErrorReporter errorReporter0 = context0.getErrorReporter();
      assertEquals(0, context0.getOptimizationLevel());
      assertEquals(false, context0.hasCompileFunctionsWithDynamicScope());
      assertEquals(false, context0.isSealed());
      assertEquals(0, context0.getLanguageVersion());
      assertEquals(false, context0.isGeneratingDebug());
      assertEquals(false, context0.isGeneratingDebugChanged());
      assertEquals(2147483647, context0.getMaximumInterpreterStackDepth());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertEquals(true, context0.isGeneratingSource());
      assertFalse(context0.generateObserverCount);
      assertNotNull(errorReporter0);
      
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, comment0, string0, config0, errorReporter0);
      assertEquals(0, set0.size());
      assertEquals(true, set0.isEmpty());
      assertEquals("en_GB", locale0.toString());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("GB", locale0.getCountry());
      assertEquals("GBR", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.getLanguage());
      assertEquals(0, forInLoop0.depth());
      assertEquals(-3341, forInLoop0.getAbsolutePosition());
      assertEquals("119", forInLoop0.toString());
      assertEquals(false, forInLoop0.isForEach());
      assertEquals(-3341, forInLoop0.getPosition());
      assertEquals(-1, forInLoop0.getInPosition());
      assertEquals(-1, forInLoop0.getLineno());
      assertEquals(-1, forInLoop0.getEachPosition());
      assertEquals(-3341, forInLoop0.getLength());
      assertEquals(-1, forInLoop0.getRp());
      assertEquals(119, forInLoop0.getType());
      assertNull(forInLoop0.getJsDoc());
      assertEquals(false, forInLoop0.hasChildren());
      assertEquals(-1, forInLoop0.getLp());
      assertEquals(0, context0.getOptimizationLevel());
      assertEquals(false, context0.hasCompileFunctionsWithDynamicScope());
      assertEquals(false, context0.isSealed());
      assertEquals(0, context0.getLanguageVersion());
      assertEquals(false, context0.isGeneratingDebug());
      assertEquals(false, context0.isGeneratingDebugChanged());
      assertEquals(2147483647, context0.getMaximumInterpreterStackDepth());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertEquals(true, context0.isGeneratingSource());
      assertFalse(context0.generateObserverCount);
      assertNotNull(jsDocInfoParser0);
      
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      assertNull(jSDocInfo0.getVisibility());
      assertEquals(false, jSDocInfo0.isNoShadow());
      assertEquals(false, jSDocInfo0.isNoSideEffects());
      assertEquals(false, jSDocInfo0.isJavaDispatch());
      assertNull(jSDocInfo0.getLicense());
      assertNull(jSDocInfo0.getOriginalCommentString());
      assertEquals(false, jSDocInfo0.isImplicitCast());
      assertNull(jSDocInfo0.getReturnDescription());
      assertEquals(false, jSDocInfo0.isInterface());
      assertNull(jSDocInfo0.getMeaning());
      assertNull(jSDocInfo0.getTemplateTypeName());
      assertNull(jSDocInfo0.getLendsName());
      assertEquals(0, jSDocInfo0.getParameterCount());
      assertEquals(false, jSDocInfo0.hasModifies());
      assertEquals(false, jSDocInfo0.shouldPreserveTry());
      assertEquals(false, jSDocInfo0.hasBaseType());
      assertEquals(false, jSDocInfo0.isExterns());
      assertEquals(false, jSDocInfo0.containsDeclaration());
      assertEquals(false, jSDocInfo0.hasFileOverview());
      assertEquals(0, jSDocInfo0.getImplementedInterfaceCount());
      assertNull(jSDocInfo0.getSourceName());
      assertNull(jSDocInfo0.getDescription());
      assertEquals(false, jSDocInfo0.isDefine());
      assertEquals(false, jSDocInfo0.isHidden());
      assertEquals(false, jSDocInfo0.hasReturnType());
      assertEquals(false, jSDocInfo0.isNoCompile());
      assertNull(jSDocInfo0.getFileOverview());
      assertEquals(false, jSDocInfo0.hasEnumParameterType());
      assertNull(jSDocInfo0.getBlockDescription());
      assertEquals(false, jSDocInfo0.hasTypedefType());
      assertEquals("JSDocInfo", jSDocInfo0.toString());
      assertEquals(false, jSDocInfo0.isConstructor());
      assertEquals(false, jSDocInfo0.hasType());
      assertEquals(false, jSDocInfo0.isNoTypeCheck());
      assertEquals(false, jSDocInfo0.isNoAlias());
      assertEquals(false, jSDocInfo0.isOverride());
      assertNull(jSDocInfo0.getVersion());
      assertNull(jSDocInfo0.getDeprecationReason());
      assertEquals(0, jSDocInfo0.getExtendedInterfacesCount());
      assertEquals(false, jSDocInfo0.hasThisType());
      assertEquals(false, jSDocInfo0.isExport());
      assertEquals(false, jSDocInfo0.isConstant());
      assertEquals(false, jSDocInfo0.isDeprecated());
      assertNotNull(jSDocInfo0);
      
      jsDocInfoParser0.setFileOverviewJSDocInfo(jSDocInfo0);
      assertEquals(0, set0.size());
      assertEquals(true, set0.isEmpty());
      assertEquals("en_GB", locale0.toString());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("GB", locale0.getCountry());
      assertEquals("GBR", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.getLanguage());
      assertEquals(0, forInLoop0.depth());
      assertEquals(-3341, forInLoop0.getAbsolutePosition());
      assertEquals("119", forInLoop0.toString());
      assertEquals(false, forInLoop0.isForEach());
      assertEquals(-3341, forInLoop0.getPosition());
      assertEquals(-1, forInLoop0.getInPosition());
      assertEquals(-1, forInLoop0.getLineno());
      assertEquals(-1, forInLoop0.getEachPosition());
      assertEquals(-3341, forInLoop0.getLength());
      assertEquals(-1, forInLoop0.getRp());
      assertEquals(119, forInLoop0.getType());
      assertNull(forInLoop0.getJsDoc());
      assertEquals(false, forInLoop0.hasChildren());
      assertEquals(-1, forInLoop0.getLp());
      assertEquals(0, context0.getOptimizationLevel());
      assertEquals(false, context0.hasCompileFunctionsWithDynamicScope());
      assertEquals(false, context0.isSealed());
      assertEquals(0, context0.getLanguageVersion());
      assertEquals(false, context0.isGeneratingDebug());
      assertEquals(false, context0.isGeneratingDebugChanged());
      assertEquals(2147483647, context0.getMaximumInterpreterStackDepth());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertEquals(true, context0.isGeneratingSource());
      assertNull(jSDocInfo0.getVisibility());
      assertEquals(false, jSDocInfo0.isNoShadow());
      assertEquals(false, jSDocInfo0.isNoSideEffects());
      assertEquals(false, jSDocInfo0.isJavaDispatch());
      assertNull(jSDocInfo0.getLicense());
      assertNull(jSDocInfo0.getOriginalCommentString());
      assertEquals(false, jSDocInfo0.isImplicitCast());
      assertNull(jSDocInfo0.getReturnDescription());
      assertEquals(false, jSDocInfo0.isInterface());
      assertNull(jSDocInfo0.getMeaning());
      assertNull(jSDocInfo0.getTemplateTypeName());
      assertNull(jSDocInfo0.getLendsName());
      assertEquals(0, jSDocInfo0.getParameterCount());
      assertEquals(false, jSDocInfo0.hasModifies());
      assertEquals(false, jSDocInfo0.shouldPreserveTry());
      assertEquals(false, jSDocInfo0.hasBaseType());
      assertEquals(false, jSDocInfo0.isExterns());
      assertEquals(false, jSDocInfo0.containsDeclaration());
      assertEquals(false, jSDocInfo0.hasFileOverview());
      assertEquals(0, jSDocInfo0.getImplementedInterfaceCount());
      assertNull(jSDocInfo0.getSourceName());
      assertNull(jSDocInfo0.getDescription());
      assertEquals(false, jSDocInfo0.isDefine());
      assertEquals(false, jSDocInfo0.isHidden());
      assertEquals(false, jSDocInfo0.hasReturnType());
      assertEquals(false, jSDocInfo0.isNoCompile());
      assertNull(jSDocInfo0.getFileOverview());
      assertEquals(false, jSDocInfo0.hasEnumParameterType());
      assertNull(jSDocInfo0.getBlockDescription());
      assertEquals(false, jSDocInfo0.hasTypedefType());
      assertEquals("JSDocInfo", jSDocInfo0.toString());
      assertEquals(false, jSDocInfo0.isConstructor());
      assertEquals(false, jSDocInfo0.hasType());
      assertEquals(false, jSDocInfo0.isNoTypeCheck());
      assertEquals(false, jSDocInfo0.isNoAlias());
      assertEquals(false, jSDocInfo0.isOverride());
      assertNull(jSDocInfo0.getVersion());
      assertNull(jSDocInfo0.getDeprecationReason());
      assertEquals(0, jSDocInfo0.getExtendedInterfacesCount());
      assertEquals(false, jSDocInfo0.hasThisType());
      assertEquals(false, jSDocInfo0.isExport());
      assertEquals(false, jSDocInfo0.isConstant());
      assertEquals(false, jSDocInfo0.isDeprecated());
      assertFalse(context0.generateObserverCount);
  }

  @Test
  public void test30()  throws Throwable  {
      String string0 = "(LoRg/mozill/javascript/eg,xProy;Lo*g/mozilla/avascript@Conxt;)V";
      Node node0 = JsDocInfoParser.parseTypeString(string0);
      assertNull(node0);
  }

  @Test
  public void test31()  throws Throwable  {
      int int0 = 0;
      String string0 = "]\n";
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream(string0, int0, int0);
      assertNotNull(jsDocTokenStream0);
      
      WithStatement withStatement0 = new WithStatement(int0);
      assertEquals(-1, withStatement0.getLp());
      assertEquals(-1, withStatement0.getRp());
      assertEquals("123", withStatement0.toString());
      assertEquals(1, withStatement0.getLength());
      assertEquals(-1, withStatement0.getLineno());
      assertEquals(false, withStatement0.hasChildren());
      assertNull(withStatement0.getJsDoc());
      assertEquals(0, withStatement0.getAbsolutePosition());
      assertEquals(0, withStatement0.getPosition());
      assertEquals(123, withStatement0.getType());
      assertEquals(0, withStatement0.depth());
      assertNotNull(withStatement0);
      
      Comment comment0 = withStatement0.getJsDocNode();
      assertEquals(-1, withStatement0.getLp());
      assertEquals(-1, withStatement0.getRp());
      assertEquals("123", withStatement0.toString());
      assertEquals(1, withStatement0.getLength());
      assertEquals(-1, withStatement0.getLineno());
      assertEquals(false, withStatement0.hasChildren());
      assertNull(withStatement0.getJsDoc());
      assertEquals(0, withStatement0.getAbsolutePosition());
      assertEquals(0, withStatement0.getPosition());
      assertEquals(123, withStatement0.getType());
      assertEquals(0, withStatement0.depth());
      assertNull(comment0);
      
      TreeSet<String> treeSet0 = new TreeSet<String>();
      assertEquals("[]", treeSet0.toString());
      assertNotNull(treeSet0);
      
      boolean boolean0 = false;
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5;
      Config config0 = new Config(treeSet0, treeSet0, boolean0, config_LanguageMode0, boolean0);
      assertEquals("[]", treeSet0.toString());
      assertNotNull(config0);
      
      ErrorCollector errorCollector0 = new ErrorCollector();
      assertNotNull(errorCollector0);
      
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, comment0, string0, config0, errorCollector0);
      assertEquals(-1, withStatement0.getLp());
      assertEquals(-1, withStatement0.getRp());
      assertEquals("123", withStatement0.toString());
      assertEquals(1, withStatement0.getLength());
      assertEquals(-1, withStatement0.getLineno());
      assertEquals(false, withStatement0.hasChildren());
      assertNull(withStatement0.getJsDoc());
      assertEquals(0, withStatement0.getAbsolutePosition());
      assertEquals(0, withStatement0.getPosition());
      assertEquals(123, withStatement0.getType());
      assertEquals(0, withStatement0.depth());
      assertEquals("[]", treeSet0.toString());
      assertNotNull(jsDocInfoParser0);
      
      // Undeclared exception!
      try {
        boolean boolean1 = jsDocInfoParser0.parse();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test32()  throws Throwable  {
      int int0 = (-1035);
      String string0 = "\\iltKO_$qJ;!an6Qu0";
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream(string0, int0, int0);
      assertNotNull(jsDocTokenStream0);
      
      WithStatement withStatement0 = new WithStatement(int0);
      assertEquals(-1035, withStatement0.getPosition());
      assertEquals(1, withStatement0.getLength());
      assertEquals(-1, withStatement0.getLp());
      assertEquals("123", withStatement0.toString());
      assertEquals(0, withStatement0.depth());
      assertEquals(-1, withStatement0.getLineno());
      assertEquals(-1035, withStatement0.getAbsolutePosition());
      assertEquals(-1, withStatement0.getRp());
      assertEquals(123, withStatement0.getType());
      assertEquals(false, withStatement0.hasChildren());
      assertNull(withStatement0.getJsDoc());
      assertNotNull(withStatement0);
      
      Comment comment0 = withStatement0.getJsDocNode();
      assertEquals(-1035, withStatement0.getPosition());
      assertEquals(1, withStatement0.getLength());
      assertEquals(-1, withStatement0.getLp());
      assertEquals("123", withStatement0.toString());
      assertEquals(0, withStatement0.depth());
      assertEquals(-1, withStatement0.getLineno());
      assertEquals(-1035, withStatement0.getAbsolutePosition());
      assertEquals(-1, withStatement0.getRp());
      assertEquals(123, withStatement0.getType());
      assertEquals(false, withStatement0.hasChildren());
      assertNull(withStatement0.getJsDoc());
      assertNull(comment0);
      
      TreeSet<String> treeSet0 = new TreeSet<String>();
      assertEquals("[]", treeSet0.toString());
      assertNotNull(treeSet0);
      
      boolean boolean0 = true;
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT3;
      Config config0 = new Config(treeSet0, treeSet0, boolean0, config_LanguageMode0, boolean0);
      assertEquals("[]", treeSet0.toString());
      assertNotNull(config0);
      
      ToolErrorReporter toolErrorReporter0 = new ToolErrorReporter(boolean0);
      assertEquals(false, toolErrorReporter0.hasReportedError());
      assertEquals(true, toolErrorReporter0.isReportingWarnings());
      assertNotNull(toolErrorReporter0);
      
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, comment0, string0, config0, toolErrorReporter0);
      assertEquals(false, toolErrorReporter0.hasReportedError());
      assertEquals(true, toolErrorReporter0.isReportingWarnings());
      assertEquals("[]", treeSet0.toString());
      assertEquals(-1035, withStatement0.getPosition());
      assertEquals(1, withStatement0.getLength());
      assertEquals(-1, withStatement0.getLp());
      assertEquals("123", withStatement0.toString());
      assertEquals(0, withStatement0.depth());
      assertEquals(-1, withStatement0.getLineno());
      assertEquals(-1035, withStatement0.getAbsolutePosition());
      assertEquals(-1, withStatement0.getRp());
      assertEquals(123, withStatement0.getType());
      assertEquals(false, withStatement0.hasChildren());
      assertNull(withStatement0.getJsDoc());
      assertNotNull(jsDocInfoParser0);
      
      JSDocInfo jSDocInfo0 = jsDocInfoParser0.retrieveAndResetParsedJSDocInfo();
      assertEquals(false, toolErrorReporter0.hasReportedError());
      assertEquals(true, toolErrorReporter0.isReportingWarnings());
      assertEquals("[]", treeSet0.toString());
      assertEquals(-1035, withStatement0.getPosition());
      assertEquals(1, withStatement0.getLength());
      assertEquals(-1, withStatement0.getLp());
      assertEquals("123", withStatement0.toString());
      assertEquals(0, withStatement0.depth());
      assertEquals(-1, withStatement0.getLineno());
      assertEquals(-1035, withStatement0.getAbsolutePosition());
      assertEquals(-1, withStatement0.getRp());
      assertEquals(123, withStatement0.getType());
      assertEquals(false, withStatement0.hasChildren());
      assertNull(withStatement0.getJsDoc());
      assertNull(jSDocInfo0);
  }

  @Test
  public void test33()  throws Throwable  {
      int int0 = 0;
      String string0 = "]\n";
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream(string0, int0, int0);
      assertNotNull(jsDocTokenStream0);
      
      WithStatement withStatement0 = new WithStatement(int0);
      assertEquals(1, withStatement0.getLength());
      assertEquals(-1, withStatement0.getLineno());
      assertEquals(0, withStatement0.getAbsolutePosition());
      assertEquals(false, withStatement0.hasChildren());
      assertEquals(123, withStatement0.getType());
      assertNull(withStatement0.getJsDoc());
      assertEquals(0, withStatement0.getPosition());
      assertEquals(0, withStatement0.depth());
      assertEquals(-1, withStatement0.getLp());
      assertEquals(-1, withStatement0.getRp());
      assertEquals("123", withStatement0.toString());
      assertNotNull(withStatement0);
      
      Comment comment0 = withStatement0.getJsDocNode();
      assertEquals(1, withStatement0.getLength());
      assertEquals(-1, withStatement0.getLineno());
      assertEquals(0, withStatement0.getAbsolutePosition());
      assertEquals(false, withStatement0.hasChildren());
      assertEquals(123, withStatement0.getType());
      assertNull(withStatement0.getJsDoc());
      assertEquals(0, withStatement0.getPosition());
      assertEquals(0, withStatement0.depth());
      assertEquals(-1, withStatement0.getLp());
      assertEquals(-1, withStatement0.getRp());
      assertEquals("123", withStatement0.toString());
      assertNull(comment0);
      
      TreeSet<String> treeSet0 = new TreeSet<String>();
      assertEquals("[]", treeSet0.toString());
      assertNotNull(treeSet0);
      
      boolean boolean0 = false;
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5;
      Config config0 = new Config(treeSet0, treeSet0, boolean0, config_LanguageMode0, boolean0);
      assertEquals("[]", treeSet0.toString());
      assertNotNull(config0);
      
      ErrorCollector errorCollector0 = new ErrorCollector();
      assertNotNull(errorCollector0);
      
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, comment0, string0, config0, errorCollector0);
      assertEquals("[]", treeSet0.toString());
      assertEquals(1, withStatement0.getLength());
      assertEquals(-1, withStatement0.getLineno());
      assertEquals(0, withStatement0.getAbsolutePosition());
      assertEquals(false, withStatement0.hasChildren());
      assertEquals(123, withStatement0.getType());
      assertNull(withStatement0.getJsDoc());
      assertEquals(0, withStatement0.getPosition());
      assertEquals(0, withStatement0.depth());
      assertEquals(-1, withStatement0.getLp());
      assertEquals(-1, withStatement0.getRp());
      assertEquals("123", withStatement0.toString());
      assertNotNull(jsDocInfoParser0);
      
      JSDocInfo jSDocInfo0 = jsDocInfoParser0.getFileOverviewJSDocInfo();
      assertEquals("[]", treeSet0.toString());
      assertEquals(1, withStatement0.getLength());
      assertEquals(-1, withStatement0.getLineno());
      assertEquals(0, withStatement0.getAbsolutePosition());
      assertEquals(false, withStatement0.hasChildren());
      assertEquals(123, withStatement0.getType());
      assertNull(withStatement0.getJsDoc());
      assertEquals(0, withStatement0.getPosition());
      assertEquals(0, withStatement0.depth());
      assertEquals(-1, withStatement0.getLp());
      assertEquals(-1, withStatement0.getRp());
      assertEquals("123", withStatement0.toString());
      assertNull(jSDocInfo0);
  }

  @Test
  public void test34()  throws Throwable  {
      String string0 = "?";
      int int0 = 0;
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream(string0, int0);
      //  // Unstable assertion: assertNotNull(jsDocTokenStream0);
      
      BreakStatement breakStatement0 = new BreakStatement(int0);
      //  // Unstable assertion: assertEquals(0, breakStatement0.getAbsolutePosition());
      //  // Unstable assertion: assertEquals(1, breakStatement0.getLength());
      //  // Unstable assertion: assertEquals(-1, breakStatement0.getLineno());
      //  // Unstable assertion: assertEquals(0, breakStatement0.depth());
      //  // Unstable assertion: assertEquals(0, breakStatement0.getPosition());
      //  // Unstable assertion: assertNull(breakStatement0.getJsDoc());
      //  // Unstable assertion: assertEquals(false, breakStatement0.hasChildren());
      //  // Unstable assertion: assertEquals("120", breakStatement0.toString());
      //  // Unstable assertion: assertEquals(120, breakStatement0.getType());
      //  // Unstable assertion: assertNotNull(breakStatement0);
      
      Comment comment0 = breakStatement0.getJsDocNode();
      //  // Unstable assertion: assertEquals(0, breakStatement0.getAbsolutePosition());
      //  // Unstable assertion: assertEquals(1, breakStatement0.getLength());
      //  // Unstable assertion: assertEquals(-1, breakStatement0.getLineno());
      //  // Unstable assertion: assertEquals(0, breakStatement0.depth());
      //  // Unstable assertion: assertEquals(0, breakStatement0.getPosition());
      //  // Unstable assertion: assertNull(breakStatement0.getJsDoc());
      //  // Unstable assertion: assertEquals(false, breakStatement0.hasChildren());
      //  // Unstable assertion: assertEquals("120", breakStatement0.toString());
      //  // Unstable assertion: assertEquals(120, breakStatement0.getType());
      //  // Unstable assertion: assertNull(comment0);
      
      TreeSet<String> treeSet0 = new TreeSet<String>();
      //  // Unstable assertion: assertEquals("[]", treeSet0.toString());
      //  // Unstable assertion: assertNotNull(treeSet0);
      
      boolean boolean0 = true;
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5;
      Config config0 = new Config(treeSet0, treeSet0, boolean0, config_LanguageMode0, boolean0);
      //  // Unstable assertion: assertEquals("[]", treeSet0.toString());
      //  // Unstable assertion: assertNotNull(config0);
      
      Context context0 = Context.enter();
      //  // Unstable assertion: assertEquals(true, context0.isSealed());
      //  // Unstable assertion: assertEquals(0, context0.getInstructionObserverThreshold());
      //  // Unstable assertion: assertEquals(2147483647, context0.getMaximumInterpreterStackDepth());
      //  // Unstable assertion: assertEquals(false, context0.isGeneratingDebugChanged());
      //  // Unstable assertion: assertEquals(0, context0.getOptimizationLevel());
      //  // Unstable assertion: assertEquals(0, context0.getLanguageVersion());
      //  // Unstable assertion: assertEquals(false, context0.isGeneratingDebug());
      //  // Unstable assertion: assertEquals(false, context0.isGeneratingSource());
      //  // Unstable assertion: assertEquals(false, context0.hasCompileFunctionsWithDynamicScope());
      //  // Unstable assertion: assertFalse(context0.generateObserverCount);
      //  // Unstable assertion: assertNotNull(context0);
      
      MockPrintStream mockPrintStream0 = new MockPrintStream(string0);
      //  // Unstable assertion: assertNotNull(mockPrintStream0);
      
      ToolErrorReporter toolErrorReporter0 = new ToolErrorReporter(context0.generateObserverCount, (PrintStream) mockPrintStream0);
      //  // Unstable assertion: assertEquals(false, toolErrorReporter0.isReportingWarnings());
      //  // Unstable assertion: assertEquals(false, toolErrorReporter0.hasReportedError());
      //  // Unstable assertion: assertEquals(true, context0.isSealed());
      //  // Unstable assertion: assertEquals(0, context0.getInstructionObserverThreshold());
      //  // Unstable assertion: assertEquals(2147483647, context0.getMaximumInterpreterStackDepth());
      //  // Unstable assertion: assertEquals(false, context0.isGeneratingDebugChanged());
      //  // Unstable assertion: assertEquals(0, context0.getOptimizationLevel());
      //  // Unstable assertion: assertEquals(0, context0.getLanguageVersion());
      //  // Unstable assertion: assertEquals(false, context0.isGeneratingDebug());
      //  // Unstable assertion: assertEquals(false, context0.isGeneratingSource());
      //  // Unstable assertion: assertEquals(false, context0.hasCompileFunctionsWithDynamicScope());
      //  // Unstable assertion: assertFalse(context0.generateObserverCount);
      //  // Unstable assertion: assertNotNull(toolErrorReporter0);
      
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, comment0, string0, config0, toolErrorReporter0);
      //  // Unstable assertion: assertEquals(false, toolErrorReporter0.isReportingWarnings());
      //  // Unstable assertion: assertEquals(false, toolErrorReporter0.hasReportedError());
      //  // Unstable assertion: assertEquals(0, breakStatement0.getAbsolutePosition());
      //  // Unstable assertion: assertEquals(1, breakStatement0.getLength());
      //  // Unstable assertion: assertEquals(-1, breakStatement0.getLineno());
      //  // Unstable assertion: assertEquals(0, breakStatement0.depth());
      //  // Unstable assertion: assertEquals(0, breakStatement0.getPosition());
      //  // Unstable assertion: assertNull(breakStatement0.getJsDoc());
      //  // Unstable assertion: assertEquals(false, breakStatement0.hasChildren());
      //  // Unstable assertion: assertEquals("120", breakStatement0.toString());
      //  // Unstable assertion: assertEquals(120, breakStatement0.getType());
      //  // Unstable assertion: assertEquals(true, context0.isSealed());
      //  // Unstable assertion: assertEquals(0, context0.getInstructionObserverThreshold());
      //  // Unstable assertion: assertEquals(2147483647, context0.getMaximumInterpreterStackDepth());
      //  // Unstable assertion: assertEquals(false, context0.isGeneratingDebugChanged());
      //  // Unstable assertion: assertEquals(0, context0.getOptimizationLevel());
      //  // Unstable assertion: assertEquals(0, context0.getLanguageVersion());
      //  // Unstable assertion: assertEquals(false, context0.isGeneratingDebug());
      //  // Unstable assertion: assertEquals(false, context0.isGeneratingSource());
      //  // Unstable assertion: assertEquals(false, context0.hasCompileFunctionsWithDynamicScope());
      //  // Unstable assertion: assertEquals("[]", treeSet0.toString());
      //  // Unstable assertion: assertFalse(context0.generateObserverCount);
      //  // Unstable assertion: assertNotNull(jsDocInfoParser0);
      
      boolean boolean1 = jsDocInfoParser0.hasParsedJSDocInfo();
      //  // Unstable assertion: assertEquals(false, toolErrorReporter0.isReportingWarnings());
      //  // Unstable assertion: assertEquals(false, toolErrorReporter0.hasReportedError());
      //  // Unstable assertion: assertEquals(0, breakStatement0.getAbsolutePosition());
      //  // Unstable assertion: assertEquals(1, breakStatement0.getLength());
      //  // Unstable assertion: assertEquals(-1, breakStatement0.getLineno());
      //  // Unstable assertion: assertEquals(0, breakStatement0.depth());
      //  // Unstable assertion: assertEquals(0, breakStatement0.getPosition());
      //  // Unstable assertion: assertNull(breakStatement0.getJsDoc());
      //  // Unstable assertion: assertEquals(false, breakStatement0.hasChildren());
      //  // Unstable assertion: assertEquals("120", breakStatement0.toString());
      //  // Unstable assertion: assertEquals(120, breakStatement0.getType());
      //  // Unstable assertion: assertEquals(true, context0.isSealed());
      //  // Unstable assertion: assertEquals(0, context0.getInstructionObserverThreshold());
      //  // Unstable assertion: assertEquals(2147483647, context0.getMaximumInterpreterStackDepth());
      //  // Unstable assertion: assertEquals(false, context0.isGeneratingDebugChanged());
      //  // Unstable assertion: assertEquals(0, context0.getOptimizationLevel());
      //  // Unstable assertion: assertEquals(0, context0.getLanguageVersion());
      //  // Unstable assertion: assertEquals(false, context0.isGeneratingDebug());
      //  // Unstable assertion: assertEquals(false, context0.isGeneratingSource());
      //  // Unstable assertion: assertEquals(false, context0.hasCompileFunctionsWithDynamicScope());
      //  // Unstable assertion: assertEquals("[]", treeSet0.toString());
      //  // Unstable assertion: assertFalse(boolean1);
      //  // Unstable assertion: assertFalse(boolean0 == boolean1);
      //  // Unstable assertion: assertFalse(boolean1 == boolean0);
      //  // Unstable assertion: assertFalse(context0.generateObserverCount);
  }

  @Test
  public void test35()  throws Throwable  {
      String string0 = "@lU&xE\\Mwn@<b@7";
      int int0 = 658;
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream(string0, int0, int0);
      assertNotNull(jsDocTokenStream0);
      
      SwitchStatement switchStatement0 = new SwitchStatement();
      assertEquals(1, switchStatement0.getLength());
      assertEquals("114", switchStatement0.toString());
      assertEquals(-1, switchStatement0.getPosition());
      assertNull(switchStatement0.getJsDoc());
      assertEquals(-1, switchStatement0.getLp());
      assertEquals(0, switchStatement0.depth());
      assertEquals(114, switchStatement0.getType());
      assertEquals(false, switchStatement0.hasChildren());
      assertEquals(-1, switchStatement0.getAbsolutePosition());
      assertEquals(-1, switchStatement0.getLineno());
      assertEquals(-1, switchStatement0.getRp());
      assertNotNull(switchStatement0);
      
      Comment comment0 = switchStatement0.getJsDocNode();
      assertEquals(1, switchStatement0.getLength());
      assertEquals("114", switchStatement0.toString());
      assertEquals(-1, switchStatement0.getPosition());
      assertNull(switchStatement0.getJsDoc());
      assertEquals(-1, switchStatement0.getLp());
      assertEquals(0, switchStatement0.depth());
      assertEquals(114, switchStatement0.getType());
      assertEquals(false, switchStatement0.hasChildren());
      assertEquals(-1, switchStatement0.getAbsolutePosition());
      assertEquals(-1, switchStatement0.getLineno());
      assertEquals(-1, switchStatement0.getRp());
      assertNull(comment0);
      
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      assertEquals(0, linkedHashSet0.size());
      assertEquals(true, linkedHashSet0.isEmpty());
      assertEquals("[]", linkedHashSet0.toString());
      assertNotNull(linkedHashSet0);
      
      boolean boolean0 = false;
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT3;
      Config config0 = new Config(linkedHashSet0, linkedHashSet0, boolean0, config_LanguageMode0, boolean0);
      assertEquals(0, linkedHashSet0.size());
      assertEquals(true, linkedHashSet0.isEmpty());
      assertEquals("[]", linkedHashSet0.toString());
      assertNotNull(config0);
      
      ErrorCollector errorCollector0 = new ErrorCollector();
      assertNotNull(errorCollector0);
      
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, comment0, string0, config0, errorCollector0);
      assertEquals(1, switchStatement0.getLength());
      assertEquals("114", switchStatement0.toString());
      assertEquals(-1, switchStatement0.getPosition());
      assertNull(switchStatement0.getJsDoc());
      assertEquals(-1, switchStatement0.getLp());
      assertEquals(0, switchStatement0.depth());
      assertEquals(114, switchStatement0.getType());
      assertEquals(false, switchStatement0.hasChildren());
      assertEquals(-1, switchStatement0.getAbsolutePosition());
      assertEquals(-1, switchStatement0.getLineno());
      assertEquals(-1, switchStatement0.getRp());
      assertEquals(0, linkedHashSet0.size());
      assertEquals(true, linkedHashSet0.isEmpty());
      assertEquals("[]", linkedHashSet0.toString());
      assertNotNull(jsDocInfoParser0);
      
      // Undeclared exception!
      try {
        boolean boolean1 = jsDocInfoParser0.parse();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
}
