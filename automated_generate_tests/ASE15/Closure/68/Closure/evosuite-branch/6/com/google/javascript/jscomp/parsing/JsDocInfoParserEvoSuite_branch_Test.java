/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 22:18:33 GMT 2014
 */

package com.google.javascript.jscomp.parsing;

import static org.junit.Assert.*; import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.junit.Test;
import com.google.javascript.jscomp.mozilla.rhino.Context;
import com.google.javascript.jscomp.mozilla.rhino.ContextFactory;
import com.google.javascript.jscomp.mozilla.rhino.Token;
import com.google.javascript.jscomp.mozilla.rhino.ast.AstNode;
import com.google.javascript.jscomp.mozilla.rhino.ast.Comment;
import com.google.javascript.jscomp.mozilla.rhino.ast.ContinueStatement;
import com.google.javascript.jscomp.mozilla.rhino.ast.Label;
import com.google.javascript.jscomp.mozilla.rhino.ast.LabeledStatement;
import com.google.javascript.jscomp.mozilla.rhino.ast.NumberLiteral;
import com.google.javascript.jscomp.mozilla.rhino.ast.ObjectLiteral;
import com.google.javascript.jscomp.mozilla.rhino.ast.ParenthesizedExpression;
import com.google.javascript.jscomp.mozilla.rhino.ast.PropertyGet;
import com.google.javascript.jscomp.mozilla.rhino.ast.TryStatement;
import com.google.javascript.jscomp.mozilla.rhino.ast.VariableDeclaration;
import com.google.javascript.jscomp.mozilla.rhino.tools.ToolErrorReporter;
import com.google.javascript.jscomp.parsing.Config;
import com.google.javascript.jscomp.parsing.JsDocInfoParser;
import com.google.javascript.jscomp.parsing.JsDocToken;
import com.google.javascript.jscomp.parsing.JsDocTokenStream;
import com.google.javascript.rhino.JSDocInfo;
import com.google.javascript.rhino.Node;
import java.nio.charset.Charset;
import java.util.LinkedHashSet;
import java.util.Locale;
import java.util.Set;
import java.util.TreeSet;



import org.evosuite.runtime.testdata.FileSystemHandling;;
import org.junit.runner.RunWith;


public class JsDocInfoParserEvoSuite_branch_Test  {

  @Test
  public void test00()  throws Throwable  {
      String string0 = "$Idyf]p*/}%";
      int int0 = 192;
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream(string0, int0, int0);
      assertNotNull(jsDocTokenStream0);
      
      TryStatement tryStatement0 = new TryStatement();
      assertEquals(-1, tryStatement0.getAbsolutePosition());
      assertEquals(false, tryStatement0.hasChildren());
      assertEquals(-1, tryStatement0.getPosition());
      assertEquals("81", tryStatement0.toString());
      assertEquals(81, tryStatement0.getType());
      assertEquals(-1, tryStatement0.getFinallyPosition());
      assertNull(tryStatement0.getJsDoc());
      assertEquals(0, tryStatement0.depth());
      assertEquals(1, tryStatement0.getLength());
      assertEquals(-1, tryStatement0.getLineno());
      assertNotNull(tryStatement0);
      
      Comment comment0 = tryStatement0.getJsDocNode();
      assertEquals(-1, tryStatement0.getAbsolutePosition());
      assertEquals(false, tryStatement0.hasChildren());
      assertEquals(-1, tryStatement0.getPosition());
      assertEquals("81", tryStatement0.toString());
      assertEquals(81, tryStatement0.getType());
      assertEquals(-1, tryStatement0.getFinallyPosition());
      assertNull(tryStatement0.getJsDoc());
      assertEquals(0, tryStatement0.depth());
      assertEquals(1, tryStatement0.getLength());
      assertEquals(-1, tryStatement0.getLineno());
      assertNull(comment0);
      
      EvoSuiteFile evoSuiteFile0 = null;
      boolean boolean0 = FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      assertFalse(boolean0);
      
      Charset charset0 = Charset.defaultCharset();
      assertEquals("UTF-8", charset0.displayName());
      assertEquals(true, charset0.canEncode());
      assertEquals(true, charset0.isRegistered());
      assertEquals("UTF-8", charset0.name());
      assertEquals("UTF-8", charset0.toString());
      assertNotNull(charset0);
      
      Set<String> set0 = charset0.aliases();
      assertEquals(2, set0.size());
      assertEquals(false, set0.isEmpty());
      assertEquals("UTF-8", charset0.displayName());
      assertEquals(true, charset0.canEncode());
      assertEquals(true, charset0.isRegistered());
      assertEquals("UTF-8", charset0.name());
      assertEquals("UTF-8", charset0.toString());
      assertNotNull(set0);
      
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5_STRICT;
      Config config0 = new Config(set0, set0, boolean0, config_LanguageMode0, boolean0);
      assertEquals(2, set0.size());
      assertEquals(false, set0.isEmpty());
      assertEquals("UTF-8", charset0.displayName());
      assertEquals(true, charset0.canEncode());
      assertEquals(true, charset0.isRegistered());
      assertEquals("UTF-8", charset0.name());
      assertEquals("UTF-8", charset0.toString());
      assertNotNull(config0);
      
      ToolErrorReporter toolErrorReporter0 = new ToolErrorReporter(boolean0);
      assertEquals(false, toolErrorReporter0.hasReportedError());
      assertEquals(false, toolErrorReporter0.isReportingWarnings());
      assertNotNull(toolErrorReporter0);
      
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, comment0, string0, config0, toolErrorReporter0);
      assertEquals(false, toolErrorReporter0.hasReportedError());
      assertEquals(false, toolErrorReporter0.isReportingWarnings());
      assertEquals(2, set0.size());
      assertEquals(false, set0.isEmpty());
      assertEquals(-1, tryStatement0.getAbsolutePosition());
      assertEquals(false, tryStatement0.hasChildren());
      assertEquals(-1, tryStatement0.getPosition());
      assertEquals("81", tryStatement0.toString());
      assertEquals(81, tryStatement0.getType());
      assertEquals(-1, tryStatement0.getFinallyPosition());
      assertNull(tryStatement0.getJsDoc());
      assertEquals(0, tryStatement0.depth());
      assertEquals(1, tryStatement0.getLength());
      assertEquals(-1, tryStatement0.getLineno());
      assertEquals("UTF-8", charset0.displayName());
      assertEquals(true, charset0.canEncode());
      assertEquals(true, charset0.isRegistered());
      assertEquals("UTF-8", charset0.name());
      assertEquals("UTF-8", charset0.toString());
      assertNotNull(jsDocInfoParser0);
      
      boolean boolean1 = jsDocInfoParser0.parse();
      assertEquals(false, toolErrorReporter0.hasReportedError());
      assertEquals(false, toolErrorReporter0.isReportingWarnings());
      assertEquals(2, set0.size());
      assertEquals(false, set0.isEmpty());
      assertEquals(-1, tryStatement0.getAbsolutePosition());
      assertEquals(false, tryStatement0.hasChildren());
      assertEquals(-1, tryStatement0.getPosition());
      assertEquals("81", tryStatement0.toString());
      assertEquals(81, tryStatement0.getType());
      assertEquals(-1, tryStatement0.getFinallyPosition());
      assertNull(tryStatement0.getJsDoc());
      assertEquals(0, tryStatement0.depth());
      assertEquals(1, tryStatement0.getLength());
      assertEquals(-1, tryStatement0.getLineno());
      assertEquals("UTF-8", charset0.displayName());
      assertEquals(true, charset0.canEncode());
      assertEquals(true, charset0.isRegistered());
      assertEquals("UTF-8", charset0.name());
      assertEquals("UTF-8", charset0.toString());
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean0 == boolean1);
  }

  @Test
  public void test01()  throws Throwable  {
      String string0 = "{N~m:)A3wx";
      Node node0 = JsDocInfoParser.parseTypeString(string0);
      assertNull(node0);
  }

  @Test
  public void test02()  throws Throwable  {
      String string0 = "{C}I4jlIgZ+akw";
      Node node0 = JsDocInfoParser.parseTypeString(string0);
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(0, node0.getLineno());
      assertEquals(81, node0.getType());
      assertEquals(1, node0.getChildCount());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(true, node0.hasChildren());
      assertEquals(1, node0.getCharno());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(true, node0.hasOneChild());
      assertEquals(false, node0.isQuotedString());
      assertEquals(1, node0.getSourcePosition());
      assertNotNull(node0);
  }

  @Test
  public void test03()  throws Throwable  {
      String string0 = "{@6.uOm6%A,t";
      Node node0 = JsDocInfoParser.parseTypeString(string0);
      assertNull(node0);
  }

  @Test
  public void test04()  throws Throwable  {
      String string0 = "[!";
      Node node0 = JsDocInfoParser.parseTypeString(string0);
      assertNull(node0);
  }

  @Test
  public void test05()  throws Throwable  {
      String string0 = "[dSWX$&DJ1nf,&0zk~";
      Node node0 = JsDocInfoParser.parseTypeString(string0);
      assertNull(node0);
  }

  @Test
  public void test06()  throws Throwable  {
      String string0 = "+\n";
      Node node0 = JsDocInfoParser.parseTypeString(string0);
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(0, node0.getChildCount());
      assertEquals(1, node0.getSourcePosition());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(1, node0.getCharno());
      assertEquals(40, node0.getType());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(0, node0.getLineno());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isSyntheticBlock());
      assertNotNull(node0);
  }

  @Test
  public void test07()  throws Throwable  {
      String string0 = "undefined";
      Node node0 = JsDocInfoParser.parseTypeString(string0);
      assertEquals(0, node0.getLineno());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(0, node0.getCharno());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(0, node0.getSourcePosition());
      assertEquals(false, node0.isVarArgs());
      assertEquals(40, node0.getType());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.hasChildren());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.hasOneChild());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isOptionalArg());
      assertNotNull(node0);
  }

  @Test
  public void test08()  throws Throwable  {
      String string0 = "null";
      Node node0 = JsDocInfoParser.parseTypeString(string0);
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(0, node0.getLineno());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(0, node0.getSourcePosition());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(40, node0.getType());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(0, node0.getCharno());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isSyntheticBlock());
      assertNotNull(node0);
  }

  @Test
  public void test09()  throws Throwable  {
      String string0 = "{6~,A:5)A3wx";
      Node node0 = JsDocInfoParser.parseTypeString(string0);
      assertNull(node0);
  }

  @Test
  public void test10()  throws Throwable  {
      String string0 = "!(dpy1?C\\=BhB:J p";
      Node node0 = JsDocInfoParser.parseTypeString(string0);
      assertNull(node0);
  }

  @Test
  public void test11()  throws Throwable  {
      String string0 = "[L.<";
      Node node0 = JsDocInfoParser.parseTypeString(string0);
      assertNull(node0);
  }

  @Test
  public void test12()  throws Throwable  {
      String string0 = "NT6.<i8B!8BIf";
      Node node0 = JsDocInfoParser.parseTypeString(string0);
      assertNull(node0);
  }

  @Test
  public void test13()  throws Throwable  {
      byte byte0 = (byte) (-29);
      String string0 = "*-?xhiG7";
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream(string0);
      assertNotNull(jsDocTokenStream0);
      
      VariableDeclaration variableDeclaration0 = new VariableDeclaration((int) byte0);
      assertEquals(false, variableDeclaration0.hasChildren());
      assertEquals(122, variableDeclaration0.getType());
      assertEquals(false, variableDeclaration0.isConst());
      assertEquals(-29, variableDeclaration0.getPosition());
      assertEquals(-1, variableDeclaration0.getLineno());
      assertEquals("122", variableDeclaration0.toString());
      assertEquals(false, variableDeclaration0.isLet());
      assertEquals(true, variableDeclaration0.isVar());
      assertNull(variableDeclaration0.getJsDoc());
      assertEquals(-29, variableDeclaration0.getAbsolutePosition());
      assertEquals(0, variableDeclaration0.depth());
      assertEquals(1, variableDeclaration0.getLength());
      assertNotNull(variableDeclaration0);
      
      ParenthesizedExpression parenthesizedExpression0 = new ParenthesizedExpression((AstNode) variableDeclaration0);
      assertEquals(87, parenthesizedExpression0.getType());
      assertEquals(-29, parenthesizedExpression0.getAbsolutePosition());
      assertEquals(0, parenthesizedExpression0.depth());
      assertNull(parenthesizedExpression0.getJsDoc());
      assertEquals(false, parenthesizedExpression0.hasChildren());
      assertEquals(-1, parenthesizedExpression0.getLineno());
      assertEquals("87", parenthesizedExpression0.toString());
      assertEquals(1, parenthesizedExpression0.getLength());
      assertEquals(-29, parenthesizedExpression0.getPosition());
      assertEquals(false, variableDeclaration0.hasChildren());
      assertEquals(122, variableDeclaration0.getType());
      assertEquals(false, variableDeclaration0.isConst());
      assertEquals(-1, variableDeclaration0.getLineno());
      assertEquals("122", variableDeclaration0.toString());
      assertEquals(false, variableDeclaration0.isLet());
      assertEquals(true, variableDeclaration0.isVar());
      assertEquals(0, variableDeclaration0.getPosition());
      assertNull(variableDeclaration0.getJsDoc());
      assertEquals(-29, variableDeclaration0.getAbsolutePosition());
      assertEquals(1, variableDeclaration0.depth());
      assertEquals(1, variableDeclaration0.getLength());
      assertNotNull(parenthesizedExpression0);
      
      Comment comment0 = parenthesizedExpression0.getJsDocNode();
      assertEquals(87, parenthesizedExpression0.getType());
      assertEquals(-29, parenthesizedExpression0.getAbsolutePosition());
      assertEquals(0, parenthesizedExpression0.depth());
      assertNull(parenthesizedExpression0.getJsDoc());
      assertEquals(false, parenthesizedExpression0.hasChildren());
      assertEquals(-1, parenthesizedExpression0.getLineno());
      assertEquals("87", parenthesizedExpression0.toString());
      assertEquals(1, parenthesizedExpression0.getLength());
      assertEquals(-29, parenthesizedExpression0.getPosition());
      assertEquals(false, variableDeclaration0.hasChildren());
      assertEquals(122, variableDeclaration0.getType());
      assertEquals(false, variableDeclaration0.isConst());
      assertEquals(-1, variableDeclaration0.getLineno());
      assertEquals("122", variableDeclaration0.toString());
      assertEquals(false, variableDeclaration0.isLet());
      assertEquals(true, variableDeclaration0.isVar());
      assertEquals(0, variableDeclaration0.getPosition());
      assertNull(variableDeclaration0.getJsDoc());
      assertEquals(-29, variableDeclaration0.getAbsolutePosition());
      assertEquals(1, variableDeclaration0.depth());
      assertEquals(1, variableDeclaration0.getLength());
      assertNull(comment0);
      
      Locale locale0 = Locale.KOREA;
      assertEquals("KOR", locale0.getISO3Country());
      assertEquals("ko_KR", locale0.toString());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("KR", locale0.getCountry());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertNotNull(locale0);
      
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      assertEquals(true, set0.isEmpty());
      assertEquals(0, set0.size());
      assertEquals("KOR", locale0.getISO3Country());
      assertEquals("ko_KR", locale0.toString());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("KR", locale0.getCountry());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertNotNull(set0);
      
      boolean boolean0 = true;
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5;
      Config config0 = new Config(set0, set0, boolean0, config_LanguageMode0, boolean0);
      assertEquals(true, set0.isEmpty());
      assertEquals(0, set0.size());
      assertEquals("KOR", locale0.getISO3Country());
      assertEquals("ko_KR", locale0.toString());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("KR", locale0.getCountry());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertNotNull(config0);
      
      ToolErrorReporter toolErrorReporter0 = new ToolErrorReporter(boolean0);
      assertEquals(true, toolErrorReporter0.isReportingWarnings());
      assertEquals(false, toolErrorReporter0.hasReportedError());
      assertNotNull(toolErrorReporter0);
      
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, comment0, string0, config0, toolErrorReporter0);
      assertEquals(87, parenthesizedExpression0.getType());
      assertEquals(-29, parenthesizedExpression0.getAbsolutePosition());
      assertEquals(0, parenthesizedExpression0.depth());
      assertNull(parenthesizedExpression0.getJsDoc());
      assertEquals(false, parenthesizedExpression0.hasChildren());
      assertEquals(-1, parenthesizedExpression0.getLineno());
      assertEquals("87", parenthesizedExpression0.toString());
      assertEquals(1, parenthesizedExpression0.getLength());
      assertEquals(-29, parenthesizedExpression0.getPosition());
      assertEquals(true, toolErrorReporter0.isReportingWarnings());
      assertEquals(false, toolErrorReporter0.hasReportedError());
      assertEquals(false, variableDeclaration0.hasChildren());
      assertEquals(122, variableDeclaration0.getType());
      assertEquals(false, variableDeclaration0.isConst());
      assertEquals(-1, variableDeclaration0.getLineno());
      assertEquals("122", variableDeclaration0.toString());
      assertEquals(false, variableDeclaration0.isLet());
      assertEquals(true, variableDeclaration0.isVar());
      assertEquals(0, variableDeclaration0.getPosition());
      assertNull(variableDeclaration0.getJsDoc());
      assertEquals(-29, variableDeclaration0.getAbsolutePosition());
      assertEquals(1, variableDeclaration0.depth());
      assertEquals(1, variableDeclaration0.getLength());
      assertEquals(true, set0.isEmpty());
      assertEquals(0, set0.size());
      assertEquals("KOR", locale0.getISO3Country());
      assertEquals("ko_KR", locale0.toString());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("KR", locale0.getCountry());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertNotNull(jsDocInfoParser0);
      
      boolean boolean1 = jsDocInfoParser0.parse();
      assertEquals(87, parenthesizedExpression0.getType());
      assertEquals(-29, parenthesizedExpression0.getAbsolutePosition());
      assertEquals(0, parenthesizedExpression0.depth());
      assertNull(parenthesizedExpression0.getJsDoc());
      assertEquals(false, parenthesizedExpression0.hasChildren());
      assertEquals(-1, parenthesizedExpression0.getLineno());
      assertEquals("87", parenthesizedExpression0.toString());
      assertEquals(1, parenthesizedExpression0.getLength());
      assertEquals(-29, parenthesizedExpression0.getPosition());
      assertEquals(true, toolErrorReporter0.isReportingWarnings());
      assertEquals(false, toolErrorReporter0.hasReportedError());
      assertEquals(false, variableDeclaration0.hasChildren());
      assertEquals(122, variableDeclaration0.getType());
      assertEquals(false, variableDeclaration0.isConst());
      assertEquals(-1, variableDeclaration0.getLineno());
      assertEquals("122", variableDeclaration0.toString());
      assertEquals(false, variableDeclaration0.isLet());
      assertEquals(true, variableDeclaration0.isVar());
      assertEquals(0, variableDeclaration0.getPosition());
      assertNull(variableDeclaration0.getJsDoc());
      assertEquals(-29, variableDeclaration0.getAbsolutePosition());
      assertEquals(1, variableDeclaration0.depth());
      assertEquals(1, variableDeclaration0.getLength());
      assertEquals(true, set0.isEmpty());
      assertEquals(0, set0.size());
      assertEquals("KOR", locale0.getISO3Country());
      assertEquals("ko_KR", locale0.toString());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("KR", locale0.getCountry());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean0 == boolean1);
  }

  @Test
  public void test14()  throws Throwable  {
      String string0 = ")";
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream(string0);
      assertNotNull(jsDocTokenStream0);
      
      int int0 = 87;
      VariableDeclaration variableDeclaration0 = new VariableDeclaration(int0);
      assertEquals(false, variableDeclaration0.hasChildren());
      assertEquals(0, variableDeclaration0.depth());
      assertEquals(87, variableDeclaration0.getAbsolutePosition());
      assertEquals(false, variableDeclaration0.isConst());
      assertEquals(true, variableDeclaration0.isVar());
      assertEquals(122, variableDeclaration0.getType());
      assertEquals(false, variableDeclaration0.isLet());
      assertEquals(-1, variableDeclaration0.getLineno());
      assertEquals("122", variableDeclaration0.toString());
      assertEquals(1, variableDeclaration0.getLength());
      assertEquals(87, variableDeclaration0.getPosition());
      assertNull(variableDeclaration0.getJsDoc());
      assertNotNull(variableDeclaration0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      ParenthesizedExpression parenthesizedExpression0 = new ParenthesizedExpression((AstNode) variableDeclaration0);
      assertNull(parenthesizedExpression0.getJsDoc());
      assertEquals(-1, parenthesizedExpression0.getLineno());
      assertEquals(87, parenthesizedExpression0.getAbsolutePosition());
      assertEquals(0, parenthesizedExpression0.depth());
      assertEquals(1, parenthesizedExpression0.getLength());
      assertEquals(false, parenthesizedExpression0.hasChildren());
      assertEquals(87, parenthesizedExpression0.getType());
      assertEquals(87, parenthesizedExpression0.getPosition());
      assertEquals("87", parenthesizedExpression0.toString());
      assertEquals(1, variableDeclaration0.depth());
      assertEquals(0, variableDeclaration0.getPosition());
      assertEquals(false, variableDeclaration0.hasChildren());
      assertEquals(87, variableDeclaration0.getAbsolutePosition());
      assertEquals(false, variableDeclaration0.isConst());
      assertEquals(true, variableDeclaration0.isVar());
      assertEquals(122, variableDeclaration0.getType());
      assertEquals(false, variableDeclaration0.isLet());
      assertEquals(-1, variableDeclaration0.getLineno());
      assertEquals("122", variableDeclaration0.toString());
      assertEquals(1, variableDeclaration0.getLength());
      assertNull(variableDeclaration0.getJsDoc());
      assertNotNull(parenthesizedExpression0);
      
      Comment comment0 = parenthesizedExpression0.getJsDocNode();
      assertNull(parenthesizedExpression0.getJsDoc());
      assertEquals(-1, parenthesizedExpression0.getLineno());
      assertEquals(87, parenthesizedExpression0.getAbsolutePosition());
      assertEquals(0, parenthesizedExpression0.depth());
      assertEquals(1, parenthesizedExpression0.getLength());
      assertEquals(false, parenthesizedExpression0.hasChildren());
      assertEquals(87, parenthesizedExpression0.getType());
      assertEquals(87, parenthesizedExpression0.getPosition());
      assertEquals("87", parenthesizedExpression0.toString());
      assertEquals(1, variableDeclaration0.depth());
      assertEquals(0, variableDeclaration0.getPosition());
      assertEquals(false, variableDeclaration0.hasChildren());
      assertEquals(87, variableDeclaration0.getAbsolutePosition());
      assertEquals(false, variableDeclaration0.isConst());
      assertEquals(true, variableDeclaration0.isVar());
      assertEquals(122, variableDeclaration0.getType());
      assertEquals(false, variableDeclaration0.isLet());
      assertEquals(-1, variableDeclaration0.getLineno());
      assertEquals("122", variableDeclaration0.toString());
      assertEquals(1, variableDeclaration0.getLength());
      assertNull(variableDeclaration0.getJsDoc());
      assertNull(comment0);
      
      Locale locale0 = Locale.KOREA;
      assertEquals("", locale0.getVariant());
      assertEquals("ko_KR", locale0.toString());
      assertEquals("KR", locale0.getCountry());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("KOR", locale0.getISO3Country());
      assertNotNull(locale0);
      
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      assertEquals("", locale0.getVariant());
      assertEquals("ko_KR", locale0.toString());
      assertEquals("KR", locale0.getCountry());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("KOR", locale0.getISO3Country());
      assertEquals(true, set0.isEmpty());
      assertEquals(0, set0.size());
      assertNotNull(set0);
      
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5_STRICT;
      Config config0 = new Config(set0, set0, boolean0, config_LanguageMode0, boolean0);
      assertEquals("", locale0.getVariant());
      assertEquals("ko_KR", locale0.toString());
      assertEquals("KR", locale0.getCountry());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("KOR", locale0.getISO3Country());
      assertEquals(true, set0.isEmpty());
      assertEquals(0, set0.size());
      assertNotNull(config0);
      
      ToolErrorReporter toolErrorReporter0 = new ToolErrorReporter(boolean0);
      assertEquals(true, toolErrorReporter0.isReportingWarnings());
      assertEquals(false, toolErrorReporter0.hasReportedError());
      assertNotNull(toolErrorReporter0);
      
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, comment0, string0, config0, toolErrorReporter0);
      assertNull(parenthesizedExpression0.getJsDoc());
      assertEquals(-1, parenthesizedExpression0.getLineno());
      assertEquals(87, parenthesizedExpression0.getAbsolutePosition());
      assertEquals(0, parenthesizedExpression0.depth());
      assertEquals(1, parenthesizedExpression0.getLength());
      assertEquals(false, parenthesizedExpression0.hasChildren());
      assertEquals(87, parenthesizedExpression0.getType());
      assertEquals(87, parenthesizedExpression0.getPosition());
      assertEquals("87", parenthesizedExpression0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("ko_KR", locale0.toString());
      assertEquals("KR", locale0.getCountry());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("KOR", locale0.getISO3Country());
      assertEquals(1, variableDeclaration0.depth());
      assertEquals(0, variableDeclaration0.getPosition());
      assertEquals(false, variableDeclaration0.hasChildren());
      assertEquals(87, variableDeclaration0.getAbsolutePosition());
      assertEquals(false, variableDeclaration0.isConst());
      assertEquals(true, variableDeclaration0.isVar());
      assertEquals(122, variableDeclaration0.getType());
      assertEquals(false, variableDeclaration0.isLet());
      assertEquals(-1, variableDeclaration0.getLineno());
      assertEquals("122", variableDeclaration0.toString());
      assertEquals(1, variableDeclaration0.getLength());
      assertNull(variableDeclaration0.getJsDoc());
      assertEquals(true, toolErrorReporter0.isReportingWarnings());
      assertEquals(false, toolErrorReporter0.hasReportedError());
      assertEquals(true, set0.isEmpty());
      assertEquals(0, set0.size());
      assertNotNull(jsDocInfoParser0);
      
      boolean boolean1 = jsDocInfoParser0.parse();
      assertNull(parenthesizedExpression0.getJsDoc());
      assertEquals(-1, parenthesizedExpression0.getLineno());
      assertEquals(87, parenthesizedExpression0.getAbsolutePosition());
      assertEquals(0, parenthesizedExpression0.depth());
      assertEquals(1, parenthesizedExpression0.getLength());
      assertEquals(false, parenthesizedExpression0.hasChildren());
      assertEquals(87, parenthesizedExpression0.getType());
      assertEquals(87, parenthesizedExpression0.getPosition());
      assertEquals("87", parenthesizedExpression0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("ko_KR", locale0.toString());
      assertEquals("KR", locale0.getCountry());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("KOR", locale0.getISO3Country());
      assertEquals(1, variableDeclaration0.depth());
      assertEquals(0, variableDeclaration0.getPosition());
      assertEquals(false, variableDeclaration0.hasChildren());
      assertEquals(87, variableDeclaration0.getAbsolutePosition());
      assertEquals(false, variableDeclaration0.isConst());
      assertEquals(true, variableDeclaration0.isVar());
      assertEquals(122, variableDeclaration0.getType());
      assertEquals(false, variableDeclaration0.isLet());
      assertEquals(-1, variableDeclaration0.getLineno());
      assertEquals("122", variableDeclaration0.toString());
      assertEquals(1, variableDeclaration0.getLength());
      assertNull(variableDeclaration0.getJsDoc());
      assertEquals(true, toolErrorReporter0.isReportingWarnings());
      assertEquals(false, toolErrorReporter0.hasReportedError());
      assertEquals(true, set0.isEmpty());
      assertEquals(0, set0.size());
      assertFalse(boolean1);
      assertFalse(boolean0 == boolean1);
      assertFalse(boolean1 == boolean0);
  }

  @Test
  public void test15()  throws Throwable  {
      String string0 = "$Iyf]p*/}";
      int int0 = 196;
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream(string0, int0, int0);
      assertNotNull(jsDocTokenStream0);
      
      TryStatement tryStatement0 = new TryStatement();
      assertNull(tryStatement0.getJsDoc());
      assertEquals(-1, tryStatement0.getFinallyPosition());
      assertEquals(1, tryStatement0.getLength());
      assertEquals(-1, tryStatement0.getLineno());
      assertEquals(0, tryStatement0.depth());
      assertEquals(-1, tryStatement0.getAbsolutePosition());
      assertEquals(false, tryStatement0.hasChildren());
      assertEquals(81, tryStatement0.getType());
      assertEquals("81", tryStatement0.toString());
      assertEquals(-1, tryStatement0.getPosition());
      assertNotNull(tryStatement0);
      
      Comment comment0 = tryStatement0.getJsDocNode();
      assertNull(tryStatement0.getJsDoc());
      assertEquals(-1, tryStatement0.getFinallyPosition());
      assertEquals(1, tryStatement0.getLength());
      assertEquals(-1, tryStatement0.getLineno());
      assertEquals(0, tryStatement0.depth());
      assertEquals(-1, tryStatement0.getAbsolutePosition());
      assertEquals(false, tryStatement0.hasChildren());
      assertEquals(81, tryStatement0.getType());
      assertEquals("81", tryStatement0.toString());
      assertEquals(-1, tryStatement0.getPosition());
      assertNull(comment0);
      
      Charset charset0 = Charset.defaultCharset();
      assertEquals("UTF-8", charset0.name());
      assertEquals("UTF-8", charset0.toString());
      assertEquals("UTF-8", charset0.displayName());
      assertEquals(true, charset0.isRegistered());
      assertEquals(true, charset0.canEncode());
      assertNotNull(charset0);
      
      boolean boolean0 = charset0.isRegistered();
      assertEquals("UTF-8", charset0.name());
      assertEquals("UTF-8", charset0.toString());
      assertEquals("UTF-8", charset0.displayName());
      assertEquals(true, charset0.isRegistered());
      assertEquals(true, charset0.canEncode());
      assertTrue(boolean0);
      
      Set<String> set0 = charset0.aliases();
      assertEquals("UTF-8", charset0.name());
      assertEquals("UTF-8", charset0.toString());
      assertEquals("UTF-8", charset0.displayName());
      assertEquals(true, charset0.isRegistered());
      assertEquals(true, charset0.canEncode());
      assertEquals(2, set0.size());
      assertEquals(false, set0.isEmpty());
      assertNotNull(set0);
      
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5_STRICT;
      Config config0 = new Config(set0, set0, boolean0, config_LanguageMode0, boolean0);
      assertEquals("UTF-8", charset0.name());
      assertEquals("UTF-8", charset0.toString());
      assertEquals("UTF-8", charset0.displayName());
      assertEquals(true, charset0.isRegistered());
      assertEquals(true, charset0.canEncode());
      assertEquals(2, set0.size());
      assertEquals(false, set0.isEmpty());
      assertNotNull(config0);
      
      ToolErrorReporter toolErrorReporter0 = new ToolErrorReporter(boolean0);
      assertEquals("UTF-8", charset0.name());
      assertEquals("UTF-8", charset0.toString());
      assertEquals("UTF-8", charset0.displayName());
      assertEquals(true, charset0.isRegistered());
      assertEquals(true, charset0.canEncode());
      assertEquals(true, toolErrorReporter0.isReportingWarnings());
      assertEquals(false, toolErrorReporter0.hasReportedError());
      assertNotNull(toolErrorReporter0);
      
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, comment0, string0, config0, toolErrorReporter0);
      assertEquals("UTF-8", charset0.name());
      assertEquals("UTF-8", charset0.toString());
      assertEquals("UTF-8", charset0.displayName());
      assertEquals(true, charset0.isRegistered());
      assertEquals(true, charset0.canEncode());
      assertEquals(true, toolErrorReporter0.isReportingWarnings());
      assertEquals(false, toolErrorReporter0.hasReportedError());
      assertEquals(2, set0.size());
      assertEquals(false, set0.isEmpty());
      assertNull(tryStatement0.getJsDoc());
      assertEquals(-1, tryStatement0.getFinallyPosition());
      assertEquals(1, tryStatement0.getLength());
      assertEquals(-1, tryStatement0.getLineno());
      assertEquals(0, tryStatement0.depth());
      assertEquals(-1, tryStatement0.getAbsolutePosition());
      assertEquals(false, tryStatement0.hasChildren());
      assertEquals(81, tryStatement0.getType());
      assertEquals("81", tryStatement0.toString());
      assertEquals(-1, tryStatement0.getPosition());
      assertNotNull(jsDocInfoParser0);
      
      boolean boolean1 = jsDocInfoParser0.parse();
      assertEquals("UTF-8", charset0.name());
      assertEquals("UTF-8", charset0.toString());
      assertEquals("UTF-8", charset0.displayName());
      assertEquals(true, charset0.isRegistered());
      assertEquals(true, charset0.canEncode());
      assertEquals(true, toolErrorReporter0.isReportingWarnings());
      assertEquals(false, toolErrorReporter0.hasReportedError());
      assertEquals(2, set0.size());
      assertEquals(false, set0.isEmpty());
      assertNull(tryStatement0.getJsDoc());
      assertEquals(-1, tryStatement0.getFinallyPosition());
      assertEquals(1, tryStatement0.getLength());
      assertEquals(-1, tryStatement0.getLineno());
      assertEquals(0, tryStatement0.depth());
      assertEquals(-1, tryStatement0.getAbsolutePosition());
      assertEquals(false, tryStatement0.hasChildren());
      assertEquals(81, tryStatement0.getType());
      assertEquals("81", tryStatement0.toString());
      assertEquals(-1, tryStatement0.getPosition());
      assertTrue(boolean1);
      assertTrue(boolean0 == boolean1);
      assertTrue(boolean1 == boolean0);
      
      boolean boolean2 = jsDocInfoParser0.parse();
      assertEquals("UTF-8", charset0.name());
      assertEquals("UTF-8", charset0.toString());
      assertEquals("UTF-8", charset0.displayName());
      assertEquals(true, charset0.isRegistered());
      assertEquals(true, charset0.canEncode());
      assertEquals(true, toolErrorReporter0.isReportingWarnings());
      assertEquals(false, toolErrorReporter0.hasReportedError());
      assertEquals(2, set0.size());
      assertEquals(false, set0.isEmpty());
      assertNull(tryStatement0.getJsDoc());
      assertEquals(-1, tryStatement0.getFinallyPosition());
      assertEquals(1, tryStatement0.getLength());
      assertEquals(-1, tryStatement0.getLineno());
      assertEquals(0, tryStatement0.depth());
      assertEquals(-1, tryStatement0.getAbsolutePosition());
      assertEquals(false, tryStatement0.hasChildren());
      assertEquals(81, tryStatement0.getType());
      assertEquals("81", tryStatement0.toString());
      assertEquals(-1, tryStatement0.getPosition());
      assertFalse(boolean2);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean0 == boolean2);
      assertTrue(boolean0 == boolean1);
  }

  @Test
  public void test16() {}
//   @Test
//   public void test16()  throws Throwable  {
//       String string0 = "o?|22Cu";
//       int int0 = 207;
//       JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream(string0, int0, int0);
//       //  // Unstable assertion: assertNotNull(jsDocTokenStream0);
//       
//       NumberLiteral numberLiteral0 = new NumberLiteral(int0, string0);
//       //  // Unstable assertion: assertEquals("40", numberLiteral0.toString());
//       //  // Unstable assertion: assertEquals(7, numberLiteral0.getLength());
//       //  // Unstable assertion: assertNull(numberLiteral0.getJsDoc());
//       //  // Unstable assertion: assertEquals(207, numberLiteral0.getPosition());
//       //  // Unstable assertion: assertEquals(207, numberLiteral0.getAbsolutePosition());
//       //  // Unstable assertion: assertEquals(0, numberLiteral0.depth());
//       //  // Unstable assertion: assertEquals(40, numberLiteral0.getType());
//       //  // Unstable assertion: assertEquals(0.0, numberLiteral0.getNumber(), 0.01D);
//       //  // Unstable assertion: assertEquals(-1, numberLiteral0.getLineno());
//       //  // Unstable assertion: assertEquals(false, numberLiteral0.hasChildren());
//       //  // Unstable assertion: assertEquals(0.0, numberLiteral0.getDouble(), 0.01D);
//       //  // Unstable assertion: assertEquals("o?|22Cu", numberLiteral0.getValue());
//       //  // Unstable assertion: assertNotNull(numberLiteral0);
//       
//       Comment comment0 = numberLiteral0.getJsDocNode();
//       //  // Unstable assertion: assertEquals("40", numberLiteral0.toString());
//       //  // Unstable assertion: assertEquals(7, numberLiteral0.getLength());
//       //  // Unstable assertion: assertNull(numberLiteral0.getJsDoc());
//       //  // Unstable assertion: assertEquals(207, numberLiteral0.getPosition());
//       //  // Unstable assertion: assertEquals(207, numberLiteral0.getAbsolutePosition());
//       //  // Unstable assertion: assertEquals(0, numberLiteral0.depth());
//       //  // Unstable assertion: assertEquals(40, numberLiteral0.getType());
//       //  // Unstable assertion: assertEquals(0.0, numberLiteral0.getNumber(), 0.01D);
//       //  // Unstable assertion: assertEquals(-1, numberLiteral0.getLineno());
//       //  // Unstable assertion: assertEquals(false, numberLiteral0.hasChildren());
//       //  // Unstable assertion: assertEquals(0.0, numberLiteral0.getDouble(), 0.01D);
//       //  // Unstable assertion: assertEquals("o?|22Cu", numberLiteral0.getValue());
//       //  // Unstable assertion: assertNull(comment0);
//       
//       String string1 = jsDocTokenStream0.getString();
//       //  // Unstable assertion: assertNotSame(string0, string1);
//       //  // Unstable assertion: assertNotSame(string1, string0);
//       //  // Unstable assertion: assertNotNull(string1);
//       //  // Unstable assertion: assertEquals("", string1);
//       //  // Unstable assertion: assertFalse(string0.equals((Object)string1));
//       //  // Unstable assertion: assertFalse(string1.equals((Object)string0));
//       
//       Locale locale0 = Locale.US;
//       //  // Unstable assertion: assertEquals("en_US", locale0.toString());
//       //  // Unstable assertion: assertEquals("eng", locale0.getISO3Language());
//       //  // Unstable assertion: assertEquals("en", locale0.getLanguage());
//       //  // Unstable assertion: assertEquals("", locale0.getVariant());
//       //  // Unstable assertion: assertEquals("US", locale0.getCountry());
//       //  // Unstable assertion: assertEquals("USA", locale0.getISO3Country());
//       //  // Unstable assertion: assertNotNull(locale0);
//       
//       JsDocToken jsDocToken0 = jsDocTokenStream0.getJsDocToken();
//       //  // Unstable assertion: assertEquals("STRING", jsDocToken0.toString());
//       //  // Unstable assertion: assertEquals("STRING", jsDocToken0.name());
//       //  // Unstable assertion: assertEquals(4, jsDocToken0.ordinal());
//       //  // Unstable assertion: assertNotSame(string0, string1);
//       //  // Unstable assertion: assertFalse(string0.equals((Object)string1));
//       
//       Set<String> set0 = locale0.getUnicodeLocaleAttributes();
//       //  // Unstable assertion: assertEquals(0, set0.size());
//       //  // Unstable assertion: assertEquals(true, set0.isEmpty());
//       //  // Unstable assertion: assertEquals("en_US", locale0.toString());
//       //  // Unstable assertion: assertEquals("eng", locale0.getISO3Language());
//       //  // Unstable assertion: assertEquals("en", locale0.getLanguage());
//       //  // Unstable assertion: assertEquals("", locale0.getVariant());
//       //  // Unstable assertion: assertEquals("US", locale0.getCountry());
//       //  // Unstable assertion: assertEquals("USA", locale0.getISO3Country());
//       //  // Unstable assertion: assertNotNull(set0);
//       
//       TreeSet<String> treeSet0 = new TreeSet<String>();
//       //  // Unstable assertion: assertEquals("[]", treeSet0.toString());
//       //  // Unstable assertion: assertNotNull(treeSet0);
//       
//       boolean boolean0 = true;
//       Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT3;
//       Config config0 = new Config(set0, treeSet0, boolean0, config_LanguageMode0, boolean0);
//       //  // Unstable assertion: assertEquals("[]", treeSet0.toString());
//       //  // Unstable assertion: assertEquals(0, set0.size());
//       //  // Unstable assertion: assertEquals(true, set0.isEmpty());
//       //  // Unstable assertion: assertEquals("en_US", locale0.toString());
//       //  // Unstable assertion: assertEquals("eng", locale0.getISO3Language());
//       //  // Unstable assertion: assertEquals("en", locale0.getLanguage());
//       //  // Unstable assertion: assertEquals("", locale0.getVariant());
//       //  // Unstable assertion: assertEquals("US", locale0.getCountry());
//       //  // Unstable assertion: assertEquals("USA", locale0.getISO3Country());
//       //  // Unstable assertion: assertNotNull(config0);
//       
//       Context context0 = Context.enter();
//       //  // Unstable assertion: assertEquals(0, context0.getInstructionObserverThreshold());
//       //  // Unstable assertion: assertEquals(true, context0.isGeneratingSource());
//       //  // Unstable assertion: assertEquals(false, context0.isGeneratingDebug());
//       //  // Unstable assertion: assertEquals(false, context0.hasCompileFunctionsWithDynamicScope());
//       //  // Unstable assertion: assertEquals(2147483647, context0.getMaximumInterpreterStackDepth());
//       //  // Unstable assertion: assertEquals(0, context0.getLanguageVersion());
//       //  // Unstable assertion: assertEquals(false, context0.isGeneratingDebugChanged());
//       //  // Unstable assertion: assertEquals(0, context0.getOptimizationLevel());
//       //  // Unstable assertion: assertEquals(true, context0.isSealed());
//       //  // Unstable assertion: assertNotNull(context0);
//       //  // Unstable assertion: assertFalse(context0.generateObserverCount);
//       
//       ToolErrorReporter toolErrorReporter0 = (ToolErrorReporter)context0.getErrorReporter();
//       //  // Unstable assertion: assertEquals(true, toolErrorReporter0.isReportingWarnings());
//       //  // Unstable assertion: assertEquals(true, toolErrorReporter0.hasReportedError());
//       //  // Unstable assertion: assertEquals(0, context0.getInstructionObserverThreshold());
//       //  // Unstable assertion: assertEquals(true, context0.isGeneratingSource());
//       //  // Unstable assertion: assertEquals(false, context0.isGeneratingDebug());
//       //  // Unstable assertion: assertEquals(false, context0.hasCompileFunctionsWithDynamicScope());
//       //  // Unstable assertion: assertEquals(2147483647, context0.getMaximumInterpreterStackDepth());
//       //  // Unstable assertion: assertEquals(0, context0.getLanguageVersion());
//       //  // Unstable assertion: assertEquals(false, context0.isGeneratingDebugChanged());
//       //  // Unstable assertion: assertEquals(0, context0.getOptimizationLevel());
//       //  // Unstable assertion: assertEquals(true, context0.isSealed());
//       //  // Unstable assertion: assertNotNull(toolErrorReporter0);
//       //  // Unstable assertion: assertFalse(context0.generateObserverCount);
//       
//       JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, comment0, string1, config0, toolErrorReporter0);
//       //  // Unstable assertion: assertEquals("[]", treeSet0.toString());
//       //  // Unstable assertion: assertEquals(0, set0.size());
//       //  // Unstable assertion: assertEquals(true, set0.isEmpty());
//       //  // Unstable assertion: assertEquals(true, toolErrorReporter0.isReportingWarnings());
//       //  // Unstable assertion: assertEquals(true, toolErrorReporter0.hasReportedError());
//       //  // Unstable assertion: assertEquals("en_US", locale0.toString());
//       //  // Unstable assertion: assertEquals("eng", locale0.getISO3Language());
//       //  // Unstable assertion: assertEquals("en", locale0.getLanguage());
//       //  // Unstable assertion: assertEquals("", locale0.getVariant());
//       //  // Unstable assertion: assertEquals("US", locale0.getCountry());
//       //  // Unstable assertion: assertEquals("USA", locale0.getISO3Country());
//       //  // Unstable assertion: assertEquals("40", numberLiteral0.toString());
//       //  // Unstable assertion: assertEquals(7, numberLiteral0.getLength());
//       //  // Unstable assertion: assertNull(numberLiteral0.getJsDoc());
//       //  // Unstable assertion: assertEquals(207, numberLiteral0.getPosition());
//       //  // Unstable assertion: assertEquals(207, numberLiteral0.getAbsolutePosition());
//       //  // Unstable assertion: assertEquals(0, numberLiteral0.depth());
//       //  // Unstable assertion: assertEquals(40, numberLiteral0.getType());
//       //  // Unstable assertion: assertEquals(0.0, numberLiteral0.getNumber(), 0.01D);
//       //  // Unstable assertion: assertEquals(-1, numberLiteral0.getLineno());
//       //  // Unstable assertion: assertEquals(false, numberLiteral0.hasChildren());
//       //  // Unstable assertion: assertEquals(0.0, numberLiteral0.getDouble(), 0.01D);
//       //  // Unstable assertion: assertEquals("o?|22Cu", numberLiteral0.getValue());
//       //  // Unstable assertion: assertEquals(0, context0.getInstructionObserverThreshold());
//       //  // Unstable assertion: assertEquals(true, context0.isGeneratingSource());
//       //  // Unstable assertion: assertEquals(false, context0.isGeneratingDebug());
//       //  // Unstable assertion: assertEquals(false, context0.hasCompileFunctionsWithDynamicScope());
//       //  // Unstable assertion: assertEquals(2147483647, context0.getMaximumInterpreterStackDepth());
//       //  // Unstable assertion: assertEquals(0, context0.getLanguageVersion());
//       //  // Unstable assertion: assertEquals(false, context0.isGeneratingDebugChanged());
//       //  // Unstable assertion: assertEquals(0, context0.getOptimizationLevel());
//       //  // Unstable assertion: assertEquals(true, context0.isSealed());
//       //  // Unstable assertion: assertNotSame(string0, string1);
//       //  // Unstable assertion: assertNotSame(string1, string0);
//       //  // Unstable assertion: assertNotNull(jsDocInfoParser0);
//       //  // Unstable assertion: assertFalse(string0.equals((Object)string1));
//       //  // Unstable assertion: assertFalse(string1.equals((Object)string0));
//       //  // Unstable assertion: assertFalse(context0.generateObserverCount);
//       
//       boolean boolean1 = jsDocInfoParser0.parse();
//       //  // Unstable assertion: assertEquals("[]", treeSet0.toString());
//       //  // Unstable assertion: assertEquals(0, set0.size());
//       //  // Unstable assertion: assertEquals(true, set0.isEmpty());
//       //  // Unstable assertion: assertEquals(true, toolErrorReporter0.isReportingWarnings());
//       //  // Unstable assertion: assertEquals(true, toolErrorReporter0.hasReportedError());
//       //  // Unstable assertion: assertEquals("en_US", locale0.toString());
//       //  // Unstable assertion: assertEquals("eng", locale0.getISO3Language());
//       //  // Unstable assertion: assertEquals("en", locale0.getLanguage());
//       //  // Unstable assertion: assertEquals("", locale0.getVariant());
//       //  // Unstable assertion: assertEquals("US", locale0.getCountry());
//       //  // Unstable assertion: assertEquals("USA", locale0.getISO3Country());
//       //  // Unstable assertion: assertEquals("40", numberLiteral0.toString());
//       //  // Unstable assertion: assertEquals(7, numberLiteral0.getLength());
//       //  // Unstable assertion: assertNull(numberLiteral0.getJsDoc());
//       //  // Unstable assertion: assertEquals(207, numberLiteral0.getPosition());
//       //  // Unstable assertion: assertEquals(207, numberLiteral0.getAbsolutePosition());
//       //  // Unstable assertion: assertEquals(0, numberLiteral0.depth());
//       //  // Unstable assertion: assertEquals(40, numberLiteral0.getType());
//       //  // Unstable assertion: assertEquals(0.0, numberLiteral0.getNumber(), 0.01D);
//       //  // Unstable assertion: assertEquals(-1, numberLiteral0.getLineno());
//       //  // Unstable assertion: assertEquals(false, numberLiteral0.hasChildren());
//       //  // Unstable assertion: assertEquals(0.0, numberLiteral0.getDouble(), 0.01D);
//       //  // Unstable assertion: assertEquals("o?|22Cu", numberLiteral0.getValue());
//       //  // Unstable assertion: assertEquals(0, context0.getInstructionObserverThreshold());
//       //  // Unstable assertion: assertEquals(true, context0.isGeneratingSource());
//       //  // Unstable assertion: assertEquals(false, context0.isGeneratingDebug());
//       //  // Unstable assertion: assertEquals(false, context0.hasCompileFunctionsWithDynamicScope());
//       //  // Unstable assertion: assertEquals(2147483647, context0.getMaximumInterpreterStackDepth());
//       //  // Unstable assertion: assertEquals(0, context0.getLanguageVersion());
//       //  // Unstable assertion: assertEquals(false, context0.isGeneratingDebugChanged());
//       //  // Unstable assertion: assertEquals(0, context0.getOptimizationLevel());
//       //  // Unstable assertion: assertEquals(true, context0.isSealed());
//       //  // Unstable assertion: assertNotSame(string0, string1);
//       //  // Unstable assertion: assertNotSame(string1, string0);
//       //  // Unstable assertion: assertFalse(boolean1);
//       //  // Unstable assertion: assertFalse(string0.equals((Object)string1));
//       //  // Unstable assertion: assertFalse(boolean0 == boolean1);
//       //  // Unstable assertion: assertFalse(boolean1 == boolean0);
//       //  // Unstable assertion: assertFalse(string1.equals((Object)string0));
//       //  // Unstable assertion: assertFalse(context0.generateObserverCount);
//   }

  @Test
  public void test17()  throws Throwable  {
      String string0 = "$Iyf]p*/}";
      int int0 = 196;
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream(string0, int0, int0);
      assertNotNull(jsDocTokenStream0);
      
      TryStatement tryStatement0 = new TryStatement();
      assertEquals(-1, tryStatement0.getAbsolutePosition());
      assertEquals(-1, tryStatement0.getLineno());
      assertEquals(1, tryStatement0.getLength());
      assertEquals("81", tryStatement0.toString());
      assertEquals(81, tryStatement0.getType());
      assertNull(tryStatement0.getJsDoc());
      assertEquals(false, tryStatement0.hasChildren());
      assertEquals(0, tryStatement0.depth());
      assertEquals(-1, tryStatement0.getPosition());
      assertEquals(-1, tryStatement0.getFinallyPosition());
      assertNotNull(tryStatement0);
      
      Comment comment0 = tryStatement0.getJsDocNode();
      assertEquals(-1, tryStatement0.getAbsolutePosition());
      assertEquals(-1, tryStatement0.getLineno());
      assertEquals(1, tryStatement0.getLength());
      assertEquals("81", tryStatement0.toString());
      assertEquals(81, tryStatement0.getType());
      assertNull(tryStatement0.getJsDoc());
      assertEquals(false, tryStatement0.hasChildren());
      assertEquals(0, tryStatement0.depth());
      assertEquals(-1, tryStatement0.getPosition());
      assertEquals(-1, tryStatement0.getFinallyPosition());
      assertNull(comment0);
      
      Charset charset0 = Charset.defaultCharset();
      assertEquals("UTF-8", charset0.name());
      assertEquals(true, charset0.isRegistered());
      assertEquals("UTF-8", charset0.displayName());
      assertEquals(true, charset0.canEncode());
      assertEquals("UTF-8", charset0.toString());
      assertNotNull(charset0);
      
      boolean boolean0 = charset0.isRegistered();
      assertEquals("UTF-8", charset0.name());
      assertEquals(true, charset0.isRegistered());
      assertEquals("UTF-8", charset0.displayName());
      assertEquals(true, charset0.canEncode());
      assertEquals("UTF-8", charset0.toString());
      assertTrue(boolean0);
      
      Set<String> set0 = charset0.aliases();
      assertEquals("UTF-8", charset0.name());
      assertEquals(true, charset0.isRegistered());
      assertEquals("UTF-8", charset0.displayName());
      assertEquals(true, charset0.canEncode());
      assertEquals("UTF-8", charset0.toString());
      assertEquals(false, set0.isEmpty());
      assertEquals(2, set0.size());
      assertNotNull(set0);
      
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5_STRICT;
      int int1 = 62;
      jsDocTokenStream0.ungetChar(int1);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      
      Config config0 = new Config(set0, set0, boolean0, config_LanguageMode0, boolean0);
      assertEquals("UTF-8", charset0.name());
      assertEquals(true, charset0.isRegistered());
      assertEquals("UTF-8", charset0.displayName());
      assertEquals(true, charset0.canEncode());
      assertEquals("UTF-8", charset0.toString());
      assertEquals(false, set0.isEmpty());
      assertEquals(2, set0.size());
      assertNotNull(config0);
      
      ToolErrorReporter toolErrorReporter0 = new ToolErrorReporter(boolean0);
      assertEquals("UTF-8", charset0.name());
      assertEquals(true, charset0.isRegistered());
      assertEquals("UTF-8", charset0.displayName());
      assertEquals(true, charset0.canEncode());
      assertEquals("UTF-8", charset0.toString());
      assertEquals(false, toolErrorReporter0.hasReportedError());
      assertEquals(true, toolErrorReporter0.isReportingWarnings());
      assertNotNull(toolErrorReporter0);
      
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, comment0, string0, config0, toolErrorReporter0);
      assertEquals("UTF-8", charset0.name());
      assertEquals(true, charset0.isRegistered());
      assertEquals("UTF-8", charset0.displayName());
      assertEquals(true, charset0.canEncode());
      assertEquals("UTF-8", charset0.toString());
      assertEquals(false, toolErrorReporter0.hasReportedError());
      assertEquals(true, toolErrorReporter0.isReportingWarnings());
      assertEquals(false, set0.isEmpty());
      assertEquals(2, set0.size());
      assertEquals(-1, tryStatement0.getAbsolutePosition());
      assertEquals(-1, tryStatement0.getLineno());
      assertEquals(1, tryStatement0.getLength());
      assertEquals("81", tryStatement0.toString());
      assertEquals(81, tryStatement0.getType());
      assertNull(tryStatement0.getJsDoc());
      assertEquals(false, tryStatement0.hasChildren());
      assertEquals(0, tryStatement0.depth());
      assertEquals(-1, tryStatement0.getPosition());
      assertEquals(-1, tryStatement0.getFinallyPosition());
      assertNotNull(jsDocInfoParser0);
      assertFalse(int0 == int1);
      
      boolean boolean1 = jsDocInfoParser0.parse();
      assertEquals("UTF-8", charset0.name());
      assertEquals(true, charset0.isRegistered());
      assertEquals("UTF-8", charset0.displayName());
      assertEquals(true, charset0.canEncode());
      assertEquals("UTF-8", charset0.toString());
      assertEquals(false, toolErrorReporter0.hasReportedError());
      assertEquals(true, toolErrorReporter0.isReportingWarnings());
      assertEquals(false, set0.isEmpty());
      assertEquals(2, set0.size());
      assertEquals(-1, tryStatement0.getAbsolutePosition());
      assertEquals(-1, tryStatement0.getLineno());
      assertEquals(1, tryStatement0.getLength());
      assertEquals("81", tryStatement0.toString());
      assertEquals(81, tryStatement0.getType());
      assertNull(tryStatement0.getJsDoc());
      assertEquals(false, tryStatement0.hasChildren());
      assertEquals(0, tryStatement0.depth());
      assertEquals(-1, tryStatement0.getPosition());
      assertEquals(-1, tryStatement0.getFinallyPosition());
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean0 == boolean1);
      assertFalse(int0 == int1);
  }

  @Test
  public void test18()  throws Throwable  {
      String string0 = "*-?xhiG7";
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream(string0);
      assertNotNull(jsDocTokenStream0);
      
      int int0 = 67;
      VariableDeclaration variableDeclaration0 = new VariableDeclaration(int0);
      assertEquals(122, variableDeclaration0.getType());
      assertEquals(true, variableDeclaration0.isVar());
      assertEquals(-1, variableDeclaration0.getLineno());
      assertEquals(67, variableDeclaration0.getPosition());
      assertEquals(false, variableDeclaration0.isLet());
      assertEquals(67, variableDeclaration0.getAbsolutePosition());
      assertEquals(1, variableDeclaration0.getLength());
      assertEquals(0, variableDeclaration0.depth());
      assertEquals(false, variableDeclaration0.hasChildren());
      assertEquals(false, variableDeclaration0.isConst());
      assertEquals("122", variableDeclaration0.toString());
      assertNull(variableDeclaration0.getJsDoc());
      assertNotNull(variableDeclaration0);
      
      ParenthesizedExpression parenthesizedExpression0 = new ParenthesizedExpression((AstNode) variableDeclaration0);
      assertEquals(-1, parenthesizedExpression0.getLineno());
      assertEquals(0, parenthesizedExpression0.depth());
      assertEquals(87, parenthesizedExpression0.getType());
      assertEquals(1, parenthesizedExpression0.getLength());
      assertEquals(false, parenthesizedExpression0.hasChildren());
      assertEquals("87", parenthesizedExpression0.toString());
      assertEquals(67, parenthesizedExpression0.getPosition());
      assertNull(parenthesizedExpression0.getJsDoc());
      assertEquals(67, parenthesizedExpression0.getAbsolutePosition());
      assertEquals(122, variableDeclaration0.getType());
      assertEquals(0, variableDeclaration0.getPosition());
      assertEquals(true, variableDeclaration0.isVar());
      assertEquals(1, variableDeclaration0.depth());
      assertEquals(-1, variableDeclaration0.getLineno());
      assertEquals(false, variableDeclaration0.isLet());
      assertEquals(67, variableDeclaration0.getAbsolutePosition());
      assertEquals(1, variableDeclaration0.getLength());
      assertEquals(false, variableDeclaration0.hasChildren());
      assertEquals(false, variableDeclaration0.isConst());
      assertEquals("122", variableDeclaration0.toString());
      assertNull(variableDeclaration0.getJsDoc());
      assertNotNull(parenthesizedExpression0);
      
      Comment comment0 = parenthesizedExpression0.getJsDocNode();
      assertEquals(-1, parenthesizedExpression0.getLineno());
      assertEquals(0, parenthesizedExpression0.depth());
      assertEquals(87, parenthesizedExpression0.getType());
      assertEquals(1, parenthesizedExpression0.getLength());
      assertEquals(false, parenthesizedExpression0.hasChildren());
      assertEquals("87", parenthesizedExpression0.toString());
      assertEquals(67, parenthesizedExpression0.getPosition());
      assertNull(parenthesizedExpression0.getJsDoc());
      assertEquals(67, parenthesizedExpression0.getAbsolutePosition());
      assertEquals(122, variableDeclaration0.getType());
      assertEquals(0, variableDeclaration0.getPosition());
      assertEquals(true, variableDeclaration0.isVar());
      assertEquals(1, variableDeclaration0.depth());
      assertEquals(-1, variableDeclaration0.getLineno());
      assertEquals(false, variableDeclaration0.isLet());
      assertEquals(67, variableDeclaration0.getAbsolutePosition());
      assertEquals(1, variableDeclaration0.getLength());
      assertEquals(false, variableDeclaration0.hasChildren());
      assertEquals(false, variableDeclaration0.isConst());
      assertEquals("122", variableDeclaration0.toString());
      assertNull(variableDeclaration0.getJsDoc());
      assertNull(comment0);
      
      Locale locale0 = Locale.KOREA;
      assertEquals("KR", locale0.getCountry());
      assertEquals("ko_KR", locale0.toString());
      assertEquals("KOR", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("kor", locale0.getISO3Language());
      assertNotNull(locale0);
      
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      assertEquals(true, set0.isEmpty());
      assertEquals(0, set0.size());
      assertEquals("KR", locale0.getCountry());
      assertEquals("ko_KR", locale0.toString());
      assertEquals("KOR", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("kor", locale0.getISO3Language());
      assertNotNull(set0);
      
      boolean boolean0 = false;
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT3;
      Config config0 = new Config(set0, set0, boolean0, config_LanguageMode0, boolean0);
      assertEquals(true, set0.isEmpty());
      assertEquals(0, set0.size());
      assertEquals("KR", locale0.getCountry());
      assertEquals("ko_KR", locale0.toString());
      assertEquals("KOR", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("kor", locale0.getISO3Language());
      assertNotNull(config0);
      
      ToolErrorReporter toolErrorReporter0 = new ToolErrorReporter(boolean0);
      assertEquals(false, toolErrorReporter0.hasReportedError());
      assertEquals(false, toolErrorReporter0.isReportingWarnings());
      assertNotNull(toolErrorReporter0);
      
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, comment0, string0, config0, toolErrorReporter0);
      assertEquals(false, toolErrorReporter0.hasReportedError());
      assertEquals(false, toolErrorReporter0.isReportingWarnings());
      assertEquals(true, set0.isEmpty());
      assertEquals(0, set0.size());
      assertEquals("KR", locale0.getCountry());
      assertEquals("ko_KR", locale0.toString());
      assertEquals("KOR", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals(-1, parenthesizedExpression0.getLineno());
      assertEquals(0, parenthesizedExpression0.depth());
      assertEquals(87, parenthesizedExpression0.getType());
      assertEquals(1, parenthesizedExpression0.getLength());
      assertEquals(false, parenthesizedExpression0.hasChildren());
      assertEquals("87", parenthesizedExpression0.toString());
      assertEquals(67, parenthesizedExpression0.getPosition());
      assertNull(parenthesizedExpression0.getJsDoc());
      assertEquals(67, parenthesizedExpression0.getAbsolutePosition());
      assertEquals(122, variableDeclaration0.getType());
      assertEquals(0, variableDeclaration0.getPosition());
      assertEquals(true, variableDeclaration0.isVar());
      assertEquals(1, variableDeclaration0.depth());
      assertEquals(-1, variableDeclaration0.getLineno());
      assertEquals(false, variableDeclaration0.isLet());
      assertEquals(67, variableDeclaration0.getAbsolutePosition());
      assertEquals(1, variableDeclaration0.getLength());
      assertEquals(false, variableDeclaration0.hasChildren());
      assertEquals(false, variableDeclaration0.isConst());
      assertEquals("122", variableDeclaration0.toString());
      assertNull(variableDeclaration0.getJsDoc());
      assertNotNull(jsDocInfoParser0);
      
      boolean boolean1 = jsDocInfoParser0.parse();
      assertEquals(false, toolErrorReporter0.hasReportedError());
      assertEquals(false, toolErrorReporter0.isReportingWarnings());
      assertEquals(true, set0.isEmpty());
      assertEquals(0, set0.size());
      assertEquals("KR", locale0.getCountry());
      assertEquals("ko_KR", locale0.toString());
      assertEquals("KOR", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals(-1, parenthesizedExpression0.getLineno());
      assertEquals(0, parenthesizedExpression0.depth());
      assertEquals(87, parenthesizedExpression0.getType());
      assertEquals(1, parenthesizedExpression0.getLength());
      assertEquals(false, parenthesizedExpression0.hasChildren());
      assertEquals("87", parenthesizedExpression0.toString());
      assertEquals(67, parenthesizedExpression0.getPosition());
      assertNull(parenthesizedExpression0.getJsDoc());
      assertEquals(67, parenthesizedExpression0.getAbsolutePosition());
      assertEquals(122, variableDeclaration0.getType());
      assertEquals(0, variableDeclaration0.getPosition());
      assertEquals(true, variableDeclaration0.isVar());
      assertEquals(1, variableDeclaration0.depth());
      assertEquals(-1, variableDeclaration0.getLineno());
      assertEquals(false, variableDeclaration0.isLet());
      assertEquals(67, variableDeclaration0.getAbsolutePosition());
      assertEquals(1, variableDeclaration0.getLength());
      assertEquals(false, variableDeclaration0.hasChildren());
      assertEquals(false, variableDeclaration0.isConst());
      assertEquals("122", variableDeclaration0.toString());
      assertNull(variableDeclaration0.getJsDoc());
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean0 == boolean1);
  }

  @Test
  public void test19()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      byte[] byteArray0 = new byte[13];
      byte byte0 = (byte)73;
      boolean boolean0 = FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      assertFalse(boolean0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      String string0 = "@<'#ib}Y$";
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream(string0, byte0, byteArray0[2]);
      assertNotNull(jsDocTokenStream0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      ObjectLiteral objectLiteral0 = new ObjectLiteral((int) byteArray0[2], (int) byteArray0[2]);
      assertEquals(0, objectLiteral0.getLength());
      assertEquals(false, objectLiteral0.isDestructuring());
      assertEquals(0, objectLiteral0.getAbsolutePosition());
      assertEquals(66, objectLiteral0.getType());
      assertEquals(-1, objectLiteral0.getLineno());
      assertNull(objectLiteral0.getJsDoc());
      assertEquals(0, objectLiteral0.getPosition());
      assertEquals(false, objectLiteral0.hasChildren());
      assertEquals("66", objectLiteral0.toString());
      assertEquals(0, objectLiteral0.depth());
      assertNotNull(objectLiteral0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      Comment comment0 = objectLiteral0.getJsDocNode();
      assertEquals(0, objectLiteral0.getLength());
      assertEquals(false, objectLiteral0.isDestructuring());
      assertEquals(0, objectLiteral0.getAbsolutePosition());
      assertEquals(66, objectLiteral0.getType());
      assertEquals(-1, objectLiteral0.getLineno());
      assertNull(objectLiteral0.getJsDoc());
      assertEquals(0, objectLiteral0.getPosition());
      assertEquals(false, objectLiteral0.hasChildren());
      assertEquals("66", objectLiteral0.toString());
      assertEquals(0, objectLiteral0.depth());
      assertNull(comment0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      Locale locale0 = Locale.JAPANESE;
      assertEquals("", locale0.getVariant());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertNotNull(locale0);
      
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      assertEquals(0, set0.size());
      assertEquals(true, set0.isEmpty());
      assertEquals("", locale0.getVariant());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertNotNull(set0);
      
      boolean boolean1 = true;
      assertFalse(boolean1 == boolean0);
      
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5_STRICT;
      Config config0 = new Config(set0, set0, boolean1, config_LanguageMode0, boolean0);
      assertEquals(0, set0.size());
      assertEquals(true, set0.isEmpty());
      assertEquals("", locale0.getVariant());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertNotNull(config0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertFalse(boolean0 == boolean1);
      assertFalse(boolean1 == boolean0);
      
      ToolErrorReporter toolErrorReporter0 = new ToolErrorReporter(boolean0);
      assertEquals(false, toolErrorReporter0.isReportingWarnings());
      assertEquals(false, toolErrorReporter0.hasReportedError());
      assertNotNull(toolErrorReporter0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertFalse(boolean0 == boolean1);
      
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, comment0, string0, config0, toolErrorReporter0);
      assertEquals(0, set0.size());
      assertEquals(true, set0.isEmpty());
      assertEquals(0, objectLiteral0.getLength());
      assertEquals(false, objectLiteral0.isDestructuring());
      assertEquals(0, objectLiteral0.getAbsolutePosition());
      assertEquals(66, objectLiteral0.getType());
      assertEquals(-1, objectLiteral0.getLineno());
      assertNull(objectLiteral0.getJsDoc());
      assertEquals(0, objectLiteral0.getPosition());
      assertEquals(false, objectLiteral0.hasChildren());
      assertEquals("66", objectLiteral0.toString());
      assertEquals(0, objectLiteral0.depth());
      assertEquals(false, toolErrorReporter0.isReportingWarnings());
      assertEquals(false, toolErrorReporter0.hasReportedError());
      assertEquals("", locale0.getVariant());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertNotNull(jsDocInfoParser0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertFalse(boolean0 == boolean1);
      assertFalse(boolean1 == boolean0);
      
      boolean boolean2 = jsDocInfoParser0.parse();
      assertEquals(0, set0.size());
      assertEquals(true, set0.isEmpty());
      assertEquals(0, objectLiteral0.getLength());
      assertEquals(false, objectLiteral0.isDestructuring());
      assertEquals(0, objectLiteral0.getAbsolutePosition());
      assertEquals(66, objectLiteral0.getType());
      assertEquals(-1, objectLiteral0.getLineno());
      assertNull(objectLiteral0.getJsDoc());
      assertEquals(0, objectLiteral0.getPosition());
      assertEquals(false, objectLiteral0.hasChildren());
      assertEquals("66", objectLiteral0.toString());
      assertEquals(0, objectLiteral0.depth());
      assertEquals(false, toolErrorReporter0.isReportingWarnings());
      assertEquals(false, toolErrorReporter0.hasReportedError());
      assertEquals("", locale0.getVariant());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertFalse(boolean2);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertTrue(boolean0 == boolean2);
      assertFalse(boolean0 == boolean1);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1 == boolean2);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
  }

  @Test
  public void test20() {}
//   @Test
//   public void test20()  throws Throwable  {
//       EvoSuiteFile evoSuiteFile0 = null;
//       String string0 = "?EE";
//       Node node0 = JsDocInfoParser.parseTypeString(string0);
//       //  // Unstable assertion: assertEquals(false, node0.isVarArgs());
//       //  // Unstable assertion: assertEquals(false, node0.isLocalResultCall());
//       //  // Unstable assertion: assertEquals(false, node0.hasMoreThanOneChild());
//       //  // Unstable assertion: assertEquals(true, node0.hasOneChild());
//       //  // Unstable assertion: assertEquals(false, node0.isQuotedString());
//       //  // Unstable assertion: assertEquals(0, node0.getLineno());
//       //  // Unstable assertion: assertEquals(0, node0.getSideEffectFlags());
//       //  // Unstable assertion: assertEquals(false, node0.isNoSideEffectsCall());
//       //  // Unstable assertion: assertEquals(1, node0.getChildCount());
//       //  // Unstable assertion: assertEquals(false, node0.isOnlyModifiesThisCall());
//       //  // Unstable assertion: assertEquals(2, node0.getCharno());
//       //  // Unstable assertion: assertEquals(2, node0.getSourcePosition());
//       //  // Unstable assertion: assertEquals(true, node0.hasChildren());
//       //  // Unstable assertion: assertEquals(false, node0.isUnscopedQualifiedName());
//       //  // Unstable assertion: assertEquals(304, node0.getType());
//       //  // Unstable assertion: assertEquals(false, node0.isSyntheticBlock());
//       //  // Unstable assertion: assertEquals(false, node0.isOptionalArg());
//       //  // Unstable assertion: assertEquals(false, node0.wasEmptyNode());
//       //  // Unstable assertion: assertEquals(false, node0.isQualifiedName());
//       //  // Unstable assertion: assertNotNull(node0);
//       
//       boolean boolean0 = FileSystemHandling.appendStringToFile(evoSuiteFile0, string0);
//       //  // Unstable assertion: assertFalse(boolean0);
//       
//       int int0 = 1328;
//       JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream(string0, int0, int0);
//       //  // Unstable assertion: assertNotNull(jsDocTokenStream0);
//       
//       PropertyGet propertyGet0 = new PropertyGet(int0);
//       //  // Unstable assertion: assertEquals("33", propertyGet0.toString());
//       //  // Unstable assertion: assertEquals(-1, propertyGet0.getOperatorPosition());
//       //  // Unstable assertion: assertEquals(1, propertyGet0.getLength());
//       //  // Unstable assertion: assertEquals(-1, propertyGet0.getLineno());
//       //  // Unstable assertion: assertEquals(1328, propertyGet0.getAbsolutePosition());
//       //  // Unstable assertion: assertEquals(0, propertyGet0.depth());
//       //  // Unstable assertion: assertEquals(33, propertyGet0.getType());
//       //  // Unstable assertion: assertEquals(false, propertyGet0.hasChildren());
//       //  // Unstable assertion: assertEquals(1328, propertyGet0.getPosition());
//       //  // Unstable assertion: assertNull(propertyGet0.getJsDoc());
//       //  // Unstable assertion: assertNotNull(propertyGet0);
//       
//       Comment comment0 = propertyGet0.getJsDocNode();
//       //  // Unstable assertion: assertEquals("33", propertyGet0.toString());
//       //  // Unstable assertion: assertEquals(-1, propertyGet0.getOperatorPosition());
//       //  // Unstable assertion: assertEquals(1, propertyGet0.getLength());
//       //  // Unstable assertion: assertEquals(-1, propertyGet0.getLineno());
//       //  // Unstable assertion: assertEquals(1328, propertyGet0.getAbsolutePosition());
//       //  // Unstable assertion: assertEquals(0, propertyGet0.depth());
//       //  // Unstable assertion: assertEquals(33, propertyGet0.getType());
//       //  // Unstable assertion: assertEquals(false, propertyGet0.hasChildren());
//       //  // Unstable assertion: assertEquals(1328, propertyGet0.getPosition());
//       //  // Unstable assertion: assertNull(propertyGet0.getJsDoc());
//       //  // Unstable assertion: assertNull(comment0);
//       
//       Locale locale0 = Locale.JAPANESE;
//       //  // Unstable assertion: assertEquals("ja", locale0.toString());
//       //  // Unstable assertion: assertEquals("ja", locale0.getLanguage());
//       //  // Unstable assertion: assertEquals("", locale0.getISO3Country());
//       //  // Unstable assertion: assertEquals("", locale0.getVariant());
//       //  // Unstable assertion: assertEquals("", locale0.getCountry());
//       //  // Unstable assertion: assertEquals("jpn", locale0.getISO3Language());
//       //  // Unstable assertion: assertNotNull(locale0);
//       
//       Set<String> set0 = locale0.getUnicodeLocaleAttributes();
//       //  // Unstable assertion: assertEquals(true, set0.isEmpty());
//       //  // Unstable assertion: assertEquals(0, set0.size());
//       //  // Unstable assertion: assertEquals("ja", locale0.toString());
//       //  // Unstable assertion: assertEquals("ja", locale0.getLanguage());
//       //  // Unstable assertion: assertEquals("", locale0.getISO3Country());
//       //  // Unstable assertion: assertEquals("", locale0.getVariant());
//       //  // Unstable assertion: assertEquals("", locale0.getCountry());
//       //  // Unstable assertion: assertEquals("jpn", locale0.getISO3Language());
//       //  // Unstable assertion: assertNotNull(set0);
//       
//       Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5;
//       Config config0 = new Config(set0, set0, boolean0, config_LanguageMode0, boolean0);
//       //  // Unstable assertion: assertEquals(true, set0.isEmpty());
//       //  // Unstable assertion: assertEquals(0, set0.size());
//       //  // Unstable assertion: assertEquals("ja", locale0.toString());
//       //  // Unstable assertion: assertEquals("ja", locale0.getLanguage());
//       //  // Unstable assertion: assertEquals("", locale0.getISO3Country());
//       //  // Unstable assertion: assertEquals("", locale0.getVariant());
//       //  // Unstable assertion: assertEquals("", locale0.getCountry());
//       //  // Unstable assertion: assertEquals("jpn", locale0.getISO3Language());
//       //  // Unstable assertion: assertNotNull(config0);
//       
//       ContextFactory contextFactory0 = new ContextFactory();
//       //  // Unstable assertion: assertEquals(false, contextFactory0.hasExplicitGlobal());
//       //  // Unstable assertion: assertEquals(false, contextFactory0.isSealed());
//       //  // Unstable assertion: assertNotNull(contextFactory0);
//       
//       Context context0 = contextFactory0.enterContext();
//       //  // Unstable assertion: assertEquals(true, context0.isGeneratingSource());
//       //  // Unstable assertion: assertEquals(false, context0.isGeneratingDebugChanged());
//       //  // Unstable assertion: assertEquals(false, context0.isGeneratingDebug());
//       //  // Unstable assertion: assertEquals(0, context0.getOptimizationLevel());
//       //  // Unstable assertion: assertEquals(false, context0.hasCompileFunctionsWithDynamicScope());
//       //  // Unstable assertion: assertEquals(0, context0.getInstructionObserverThreshold());
//       //  // Unstable assertion: assertEquals(true, context0.isSealed());
//       //  // Unstable assertion: assertEquals(0, context0.getLanguageVersion());
//       //  // Unstable assertion: assertEquals(2147483647, context0.getMaximumInterpreterStackDepth());
//       //  // Unstable assertion: assertEquals(false, contextFactory0.hasExplicitGlobal());
//       //  // Unstable assertion: assertEquals(false, contextFactory0.isSealed());
//       //  // Unstable assertion: assertNotNull(context0);
//       //  // Unstable assertion: assertFalse(context0.generateObserverCount);
//       
//       ToolErrorReporter toolErrorReporter0 = (ToolErrorReporter)context0.getErrorReporter();
//       //  // Unstable assertion: assertEquals(true, context0.isGeneratingSource());
//       //  // Unstable assertion: assertEquals(false, context0.isGeneratingDebugChanged());
//       //  // Unstable assertion: assertEquals(false, context0.isGeneratingDebug());
//       //  // Unstable assertion: assertEquals(0, context0.getOptimizationLevel());
//       //  // Unstable assertion: assertEquals(false, context0.hasCompileFunctionsWithDynamicScope());
//       //  // Unstable assertion: assertEquals(0, context0.getInstructionObserverThreshold());
//       //  // Unstable assertion: assertEquals(true, context0.isSealed());
//       //  // Unstable assertion: assertEquals(0, context0.getLanguageVersion());
//       //  // Unstable assertion: assertEquals(2147483647, context0.getMaximumInterpreterStackDepth());
//       //  // Unstable assertion: assertEquals(false, contextFactory0.hasExplicitGlobal());
//       //  // Unstable assertion: assertEquals(false, contextFactory0.isSealed());
//       //  // Unstable assertion: assertEquals(true, toolErrorReporter0.isReportingWarnings());
//       //  // Unstable assertion: assertEquals(true, toolErrorReporter0.hasReportedError());
//       //  // Unstable assertion: assertNotNull(toolErrorReporter0);
//       //  // Unstable assertion: assertFalse(context0.generateObserverCount);
//       
//       JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, comment0, string0, config0, toolErrorReporter0);
//       //  // Unstable assertion: assertEquals("33", propertyGet0.toString());
//       //  // Unstable assertion: assertEquals(-1, propertyGet0.getOperatorPosition());
//       //  // Unstable assertion: assertEquals(1, propertyGet0.getLength());
//       //  // Unstable assertion: assertEquals(-1, propertyGet0.getLineno());
//       //  // Unstable assertion: assertEquals(1328, propertyGet0.getAbsolutePosition());
//       //  // Unstable assertion: assertEquals(0, propertyGet0.depth());
//       //  // Unstable assertion: assertEquals(33, propertyGet0.getType());
//       //  // Unstable assertion: assertEquals(false, propertyGet0.hasChildren());
//       //  // Unstable assertion: assertEquals(1328, propertyGet0.getPosition());
//       //  // Unstable assertion: assertNull(propertyGet0.getJsDoc());
//       //  // Unstable assertion: assertEquals(true, set0.isEmpty());
//       //  // Unstable assertion: assertEquals(0, set0.size());
//       //  // Unstable assertion: assertEquals(true, context0.isGeneratingSource());
//       //  // Unstable assertion: assertEquals(false, context0.isGeneratingDebugChanged());
//       //  // Unstable assertion: assertEquals(false, context0.isGeneratingDebug());
//       //  // Unstable assertion: assertEquals(0, context0.getOptimizationLevel());
//       //  // Unstable assertion: assertEquals(false, context0.hasCompileFunctionsWithDynamicScope());
//       //  // Unstable assertion: assertEquals(0, context0.getInstructionObserverThreshold());
//       //  // Unstable assertion: assertEquals(true, context0.isSealed());
//       //  // Unstable assertion: assertEquals(0, context0.getLanguageVersion());
//       //  // Unstable assertion: assertEquals(2147483647, context0.getMaximumInterpreterStackDepth());
//       //  // Unstable assertion: assertEquals(false, contextFactory0.hasExplicitGlobal());
//       //  // Unstable assertion: assertEquals(false, contextFactory0.isSealed());
//       //  // Unstable assertion: assertEquals(true, toolErrorReporter0.isReportingWarnings());
//       //  // Unstable assertion: assertEquals(true, toolErrorReporter0.hasReportedError());
//       //  // Unstable assertion: assertEquals("ja", locale0.toString());
//       //  // Unstable assertion: assertEquals("ja", locale0.getLanguage());
//       //  // Unstable assertion: assertEquals("", locale0.getISO3Country());
//       //  // Unstable assertion: assertEquals("", locale0.getVariant());
//       //  // Unstable assertion: assertEquals("", locale0.getCountry());
//       //  // Unstable assertion: assertEquals("jpn", locale0.getISO3Language());
//       //  // Unstable assertion: assertNotNull(jsDocInfoParser0);
//       //  // Unstable assertion: assertFalse(context0.generateObserverCount);
//       
//       JSDocInfo jSDocInfo0 = node0.getJSDocInfo();
//       //  // Unstable assertion: assertEquals(false, node0.isVarArgs());
//       //  // Unstable assertion: assertEquals(false, node0.isLocalResultCall());
//       //  // Unstable assertion: assertEquals(false, node0.hasMoreThanOneChild());
//       //  // Unstable assertion: assertEquals(true, node0.hasOneChild());
//       //  // Unstable assertion: assertEquals(false, node0.isQuotedString());
//       //  // Unstable assertion: assertEquals(0, node0.getLineno());
//       //  // Unstable assertion: assertEquals(0, node0.getSideEffectFlags());
//       //  // Unstable assertion: assertEquals(false, node0.isNoSideEffectsCall());
//       //  // Unstable assertion: assertEquals(1, node0.getChildCount());
//       //  // Unstable assertion: assertEquals(false, node0.isOnlyModifiesThisCall());
//       //  // Unstable assertion: assertEquals(2, node0.getCharno());
//       //  // Unstable assertion: assertEquals(2, node0.getSourcePosition());
//       //  // Unstable assertion: assertEquals(true, node0.hasChildren());
//       //  // Unstable assertion: assertEquals(false, node0.isUnscopedQualifiedName());
//       //  // Unstable assertion: assertEquals(304, node0.getType());
//       //  // Unstable assertion: assertEquals(false, node0.isSyntheticBlock());
//       //  // Unstable assertion: assertEquals(false, node0.isOptionalArg());
//       //  // Unstable assertion: assertEquals(false, node0.wasEmptyNode());
//       //  // Unstable assertion: assertEquals(false, node0.isQualifiedName());
//       //  // Unstable assertion: assertNull(jSDocInfo0);
//       
//       jsDocInfoParser0.setFileOverviewJSDocInfo(jSDocInfo0);
//       //  // Unstable assertion: assertEquals(false, node0.isVarArgs());
//       //  // Unstable assertion: assertEquals(false, node0.isLocalResultCall());
//       //  // Unstable assertion: assertEquals(false, node0.hasMoreThanOneChild());
//       //  // Unstable assertion: assertEquals(true, node0.hasOneChild());
//       //  // Unstable assertion: assertEquals(false, node0.isQuotedString());
//       //  // Unstable assertion: assertEquals(0, node0.getLineno());
//       //  // Unstable assertion: assertEquals(0, node0.getSideEffectFlags());
//       //  // Unstable assertion: assertEquals(false, node0.isNoSideEffectsCall());
//       //  // Unstable assertion: assertEquals(1, node0.getChildCount());
//       //  // Unstable assertion: assertEquals(false, node0.isOnlyModifiesThisCall());
//       //  // Unstable assertion: assertEquals(2, node0.getCharno());
//       //  // Unstable assertion: assertEquals(2, node0.getSourcePosition());
//       //  // Unstable assertion: assertEquals(true, node0.hasChildren());
//       //  // Unstable assertion: assertEquals(false, node0.isUnscopedQualifiedName());
//       //  // Unstable assertion: assertEquals(304, node0.getType());
//       //  // Unstable assertion: assertEquals(false, node0.isSyntheticBlock());
//       //  // Unstable assertion: assertEquals(false, node0.isOptionalArg());
//       //  // Unstable assertion: assertEquals(false, node0.wasEmptyNode());
//       //  // Unstable assertion: assertEquals(false, node0.isQualifiedName());
//       //  // Unstable assertion: assertEquals("33", propertyGet0.toString());
//       //  // Unstable assertion: assertEquals(-1, propertyGet0.getOperatorPosition());
//       //  // Unstable assertion: assertEquals(1, propertyGet0.getLength());
//       //  // Unstable assertion: assertEquals(-1, propertyGet0.getLineno());
//       //  // Unstable assertion: assertEquals(1328, propertyGet0.getAbsolutePosition());
//       //  // Unstable assertion: assertEquals(0, propertyGet0.depth());
//       //  // Unstable assertion: assertEquals(33, propertyGet0.getType());
//       //  // Unstable assertion: assertEquals(false, propertyGet0.hasChildren());
//       //  // Unstable assertion: assertEquals(1328, propertyGet0.getPosition());
//       //  // Unstable assertion: assertNull(propertyGet0.getJsDoc());
//       //  // Unstable assertion: assertEquals(true, set0.isEmpty());
//       //  // Unstable assertion: assertEquals(0, set0.size());
//       //  // Unstable assertion: assertEquals(true, context0.isGeneratingSource());
//       //  // Unstable assertion: assertEquals(false, context0.isGeneratingDebugChanged());
//       //  // Unstable assertion: assertEquals(false, context0.isGeneratingDebug());
//       //  // Unstable assertion: assertEquals(0, context0.getOptimizationLevel());
//       //  // Unstable assertion: assertEquals(false, context0.hasCompileFunctionsWithDynamicScope());
//       //  // Unstable assertion: assertEquals(0, context0.getInstructionObserverThreshold());
//       //  // Unstable assertion: assertEquals(true, context0.isSealed());
//       //  // Unstable assertion: assertEquals(0, context0.getLanguageVersion());
//       //  // Unstable assertion: assertEquals(2147483647, context0.getMaximumInterpreterStackDepth());
//       //  // Unstable assertion: assertEquals(false, contextFactory0.hasExplicitGlobal());
//       //  // Unstable assertion: assertEquals(false, contextFactory0.isSealed());
//       //  // Unstable assertion: assertEquals(true, toolErrorReporter0.isReportingWarnings());
//       //  // Unstable assertion: assertEquals(true, toolErrorReporter0.hasReportedError());
//       //  // Unstable assertion: assertEquals("ja", locale0.toString());
//       //  // Unstable assertion: assertEquals("ja", locale0.getLanguage());
//       //  // Unstable assertion: assertEquals("", locale0.getISO3Country());
//       //  // Unstable assertion: assertEquals("", locale0.getVariant());
//       //  // Unstable assertion: assertEquals("", locale0.getCountry());
//       //  // Unstable assertion: assertEquals("jpn", locale0.getISO3Language());
//       //  // Unstable assertion: assertFalse(context0.generateObserverCount);
//   }

  @Test
  public void test21()  throws Throwable  {
      String string0 = "(Lorg/mozilla/javascript/Scriptable;Ljava/lang/String;)Lorg/mozilla/javascrit/Function;";
      Node node0 = JsDocInfoParser.parseTypeString(string0);
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(1, node0.getCharno());
      assertEquals(0, node0.getLineno());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(301, node0.getType());
      assertEquals(true, node0.hasOneChild());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(true, node0.hasChildren());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(1, node0.getSourcePosition());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(1, node0.getChildCount());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isQuotedString());
      assertNotNull(node0);
  }

  @Test
  public void test22()  throws Throwable  {
      String string0 = "\\Nv~P2";
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      assertEquals(false, jSDocInfo0.hasFileOverview());
      assertEquals(false, jSDocInfo0.containsDeclaration());
      assertEquals(false, jSDocInfo0.isImplicitCast());
      assertEquals(false, jSDocInfo0.hasEnumParameterType());
      assertEquals(false, jSDocInfo0.isExport());
      assertEquals(0, jSDocInfo0.getImplementedInterfaceCount());
      assertNull(jSDocInfo0.getDeprecationReason());
      assertNull(jSDocInfo0.getOriginalCommentString());
      assertNull(jSDocInfo0.getReturnDescription());
      assertNull(jSDocInfo0.getTemplateTypeName());
      assertEquals(false, jSDocInfo0.hasReturnType());
      assertNull(jSDocInfo0.getVersion());
      assertNull(jSDocInfo0.getVisibility());
      assertNull(jSDocInfo0.getMeaning());
      assertEquals(false, jSDocInfo0.isNoAlias());
      assertNull(jSDocInfo0.getLendsName());
      assertEquals(false, jSDocInfo0.isNoTypeCheck());
      assertEquals(false, jSDocInfo0.isNoShadow());
      assertEquals(false, jSDocInfo0.hasBaseType());
      assertEquals("JSDocInfo", jSDocInfo0.toString());
      assertNull(jSDocInfo0.getLicense());
      assertEquals(false, jSDocInfo0.isExterns());
      assertEquals(false, jSDocInfo0.isNoSideEffects());
      assertEquals(false, jSDocInfo0.shouldPreserveTry());
      assertNull(jSDocInfo0.getDescription());
      assertEquals(false, jSDocInfo0.isConstructor());
      assertEquals(false, jSDocInfo0.isJavaDispatch());
      assertEquals(false, jSDocInfo0.hasThisType());
      assertEquals(false, jSDocInfo0.isOverride());
      assertEquals(false, jSDocInfo0.isHidden());
      assertEquals(false, jSDocInfo0.isDefine());
      assertEquals(false, jSDocInfo0.isDeprecated());
      assertEquals(false, jSDocInfo0.hasType());
      assertEquals(false, jSDocInfo0.hasModifies());
      assertEquals(false, jSDocInfo0.hasTypedefType());
      assertEquals(0, jSDocInfo0.getParameterCount());
      assertNull(jSDocInfo0.getSourceName());
      assertEquals(false, jSDocInfo0.isConstant());
      assertEquals(false, jSDocInfo0.isInterface());
      assertNull(jSDocInfo0.getFileOverview());
      assertEquals(0, jSDocInfo0.getExtendedInterfacesCount());
      assertNull(jSDocInfo0.getBlockDescription());
      assertEquals(false, jSDocInfo0.isNoCompile());
      assertNotNull(jSDocInfo0);
      
      Set<String> set0 = jSDocInfo0.getSuppressions();
      assertEquals(true, set0.isEmpty());
      assertEquals(0, set0.size());
      assertEquals(false, jSDocInfo0.hasFileOverview());
      assertEquals(false, jSDocInfo0.containsDeclaration());
      assertEquals(false, jSDocInfo0.isImplicitCast());
      assertEquals(false, jSDocInfo0.hasEnumParameterType());
      assertEquals(false, jSDocInfo0.isExport());
      assertEquals(0, jSDocInfo0.getImplementedInterfaceCount());
      assertNull(jSDocInfo0.getDeprecationReason());
      assertNull(jSDocInfo0.getOriginalCommentString());
      assertNull(jSDocInfo0.getReturnDescription());
      assertNull(jSDocInfo0.getTemplateTypeName());
      assertEquals(false, jSDocInfo0.hasReturnType());
      assertNull(jSDocInfo0.getVersion());
      assertNull(jSDocInfo0.getVisibility());
      assertNull(jSDocInfo0.getMeaning());
      assertEquals(false, jSDocInfo0.isNoAlias());
      assertNull(jSDocInfo0.getLendsName());
      assertEquals(false, jSDocInfo0.isNoTypeCheck());
      assertEquals(false, jSDocInfo0.isNoShadow());
      assertEquals(false, jSDocInfo0.hasBaseType());
      assertEquals("JSDocInfo", jSDocInfo0.toString());
      assertNull(jSDocInfo0.getLicense());
      assertEquals(false, jSDocInfo0.isExterns());
      assertEquals(false, jSDocInfo0.isNoSideEffects());
      assertEquals(false, jSDocInfo0.shouldPreserveTry());
      assertNull(jSDocInfo0.getDescription());
      assertEquals(false, jSDocInfo0.isConstructor());
      assertEquals(false, jSDocInfo0.isJavaDispatch());
      assertEquals(false, jSDocInfo0.hasThisType());
      assertEquals(false, jSDocInfo0.isOverride());
      assertEquals(false, jSDocInfo0.isHidden());
      assertEquals(false, jSDocInfo0.isDefine());
      assertEquals(false, jSDocInfo0.isDeprecated());
      assertEquals(false, jSDocInfo0.hasType());
      assertEquals(false, jSDocInfo0.hasModifies());
      assertEquals(false, jSDocInfo0.hasTypedefType());
      assertEquals(0, jSDocInfo0.getParameterCount());
      assertNull(jSDocInfo0.getSourceName());
      assertEquals(false, jSDocInfo0.isConstant());
      assertEquals(false, jSDocInfo0.isInterface());
      assertNull(jSDocInfo0.getFileOverview());
      assertEquals(0, jSDocInfo0.getExtendedInterfacesCount());
      assertNull(jSDocInfo0.getBlockDescription());
      assertEquals(false, jSDocInfo0.isNoCompile());
      assertNotNull(set0);
      
      boolean boolean0 = jSDocInfo0.isConstant();
      assertEquals(false, jSDocInfo0.hasFileOverview());
      assertEquals(false, jSDocInfo0.containsDeclaration());
      assertEquals(false, jSDocInfo0.isImplicitCast());
      assertEquals(false, jSDocInfo0.hasEnumParameterType());
      assertEquals(false, jSDocInfo0.isExport());
      assertEquals(0, jSDocInfo0.getImplementedInterfaceCount());
      assertNull(jSDocInfo0.getDeprecationReason());
      assertNull(jSDocInfo0.getOriginalCommentString());
      assertNull(jSDocInfo0.getReturnDescription());
      assertNull(jSDocInfo0.getTemplateTypeName());
      assertEquals(false, jSDocInfo0.hasReturnType());
      assertNull(jSDocInfo0.getVersion());
      assertNull(jSDocInfo0.getVisibility());
      assertNull(jSDocInfo0.getMeaning());
      assertEquals(false, jSDocInfo0.isNoAlias());
      assertNull(jSDocInfo0.getLendsName());
      assertEquals(false, jSDocInfo0.isNoTypeCheck());
      assertEquals(false, jSDocInfo0.isNoShadow());
      assertEquals(false, jSDocInfo0.hasBaseType());
      assertEquals("JSDocInfo", jSDocInfo0.toString());
      assertNull(jSDocInfo0.getLicense());
      assertEquals(false, jSDocInfo0.isExterns());
      assertEquals(false, jSDocInfo0.isNoSideEffects());
      assertEquals(false, jSDocInfo0.shouldPreserveTry());
      assertNull(jSDocInfo0.getDescription());
      assertEquals(false, jSDocInfo0.isConstructor());
      assertEquals(false, jSDocInfo0.isJavaDispatch());
      assertEquals(false, jSDocInfo0.hasThisType());
      assertEquals(false, jSDocInfo0.isOverride());
      assertEquals(false, jSDocInfo0.isHidden());
      assertEquals(false, jSDocInfo0.isDefine());
      assertEquals(false, jSDocInfo0.isDeprecated());
      assertEquals(false, jSDocInfo0.hasType());
      assertEquals(false, jSDocInfo0.hasModifies());
      assertEquals(false, jSDocInfo0.hasTypedefType());
      assertEquals(0, jSDocInfo0.getParameterCount());
      assertNull(jSDocInfo0.getSourceName());
      assertEquals(false, jSDocInfo0.isConstant());
      assertEquals(false, jSDocInfo0.isInterface());
      assertNull(jSDocInfo0.getFileOverview());
      assertEquals(0, jSDocInfo0.getExtendedInterfacesCount());
      assertNull(jSDocInfo0.getBlockDescription());
      assertEquals(false, jSDocInfo0.isNoCompile());
      assertFalse(boolean0);
      
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream(string0);
      assertNotNull(jsDocTokenStream0);
      
      int int0 = (-18);
      ContinueStatement continueStatement0 = new ContinueStatement(int0, int0);
      assertNull(continueStatement0.getJsDoc());
      assertEquals(-1, continueStatement0.getLineno());
      assertEquals(-18, continueStatement0.getPosition());
      assertEquals(-18, continueStatement0.getAbsolutePosition());
      assertEquals(false, continueStatement0.hasChildren());
      assertEquals(121, continueStatement0.getType());
      assertEquals(-18, continueStatement0.getLength());
      assertEquals("121", continueStatement0.toString());
      assertEquals(0, continueStatement0.depth());
      assertNotNull(continueStatement0);
      
      Comment comment0 = continueStatement0.getJsDocNode();
      assertNull(continueStatement0.getJsDoc());
      assertEquals(-1, continueStatement0.getLineno());
      assertEquals(-18, continueStatement0.getPosition());
      assertEquals(-18, continueStatement0.getAbsolutePosition());
      assertEquals(false, continueStatement0.hasChildren());
      assertEquals(121, continueStatement0.getType());
      assertEquals(-18, continueStatement0.getLength());
      assertEquals("121", continueStatement0.toString());
      assertEquals(0, continueStatement0.depth());
      assertNull(comment0);
      
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5;
      Config config0 = new Config(set0, set0, boolean0, config_LanguageMode0, boolean0);
      assertEquals(true, set0.isEmpty());
      assertEquals(0, set0.size());
      assertEquals(false, jSDocInfo0.hasFileOverview());
      assertEquals(false, jSDocInfo0.containsDeclaration());
      assertEquals(false, jSDocInfo0.isImplicitCast());
      assertEquals(false, jSDocInfo0.hasEnumParameterType());
      assertEquals(false, jSDocInfo0.isExport());
      assertEquals(0, jSDocInfo0.getImplementedInterfaceCount());
      assertNull(jSDocInfo0.getDeprecationReason());
      assertNull(jSDocInfo0.getOriginalCommentString());
      assertNull(jSDocInfo0.getReturnDescription());
      assertNull(jSDocInfo0.getTemplateTypeName());
      assertEquals(false, jSDocInfo0.hasReturnType());
      assertNull(jSDocInfo0.getVersion());
      assertNull(jSDocInfo0.getVisibility());
      assertNull(jSDocInfo0.getMeaning());
      assertEquals(false, jSDocInfo0.isNoAlias());
      assertNull(jSDocInfo0.getLendsName());
      assertEquals(false, jSDocInfo0.isNoTypeCheck());
      assertEquals(false, jSDocInfo0.isNoShadow());
      assertEquals(false, jSDocInfo0.hasBaseType());
      assertEquals("JSDocInfo", jSDocInfo0.toString());
      assertNull(jSDocInfo0.getLicense());
      assertEquals(false, jSDocInfo0.isExterns());
      assertEquals(false, jSDocInfo0.isNoSideEffects());
      assertEquals(false, jSDocInfo0.shouldPreserveTry());
      assertNull(jSDocInfo0.getDescription());
      assertEquals(false, jSDocInfo0.isConstructor());
      assertEquals(false, jSDocInfo0.isJavaDispatch());
      assertEquals(false, jSDocInfo0.hasThisType());
      assertEquals(false, jSDocInfo0.isOverride());
      assertEquals(false, jSDocInfo0.isHidden());
      assertEquals(false, jSDocInfo0.isDefine());
      assertEquals(false, jSDocInfo0.isDeprecated());
      assertEquals(false, jSDocInfo0.hasType());
      assertEquals(false, jSDocInfo0.hasModifies());
      assertEquals(false, jSDocInfo0.hasTypedefType());
      assertEquals(0, jSDocInfo0.getParameterCount());
      assertNull(jSDocInfo0.getSourceName());
      assertEquals(false, jSDocInfo0.isConstant());
      assertEquals(false, jSDocInfo0.isInterface());
      assertNull(jSDocInfo0.getFileOverview());
      assertEquals(0, jSDocInfo0.getExtendedInterfacesCount());
      assertNull(jSDocInfo0.getBlockDescription());
      assertEquals(false, jSDocInfo0.isNoCompile());
      assertNotNull(config0);
      
      ToolErrorReporter toolErrorReporter0 = new ToolErrorReporter(boolean0);
      assertEquals(false, toolErrorReporter0.isReportingWarnings());
      assertEquals(false, toolErrorReporter0.hasReportedError());
      assertEquals(false, jSDocInfo0.hasFileOverview());
      assertEquals(false, jSDocInfo0.containsDeclaration());
      assertEquals(false, jSDocInfo0.isImplicitCast());
      assertEquals(false, jSDocInfo0.hasEnumParameterType());
      assertEquals(false, jSDocInfo0.isExport());
      assertEquals(0, jSDocInfo0.getImplementedInterfaceCount());
      assertNull(jSDocInfo0.getDeprecationReason());
      assertNull(jSDocInfo0.getOriginalCommentString());
      assertNull(jSDocInfo0.getReturnDescription());
      assertNull(jSDocInfo0.getTemplateTypeName());
      assertEquals(false, jSDocInfo0.hasReturnType());
      assertNull(jSDocInfo0.getVersion());
      assertNull(jSDocInfo0.getVisibility());
      assertNull(jSDocInfo0.getMeaning());
      assertEquals(false, jSDocInfo0.isNoAlias());
      assertNull(jSDocInfo0.getLendsName());
      assertEquals(false, jSDocInfo0.isNoTypeCheck());
      assertEquals(false, jSDocInfo0.isNoShadow());
      assertEquals(false, jSDocInfo0.hasBaseType());
      assertEquals("JSDocInfo", jSDocInfo0.toString());
      assertNull(jSDocInfo0.getLicense());
      assertEquals(false, jSDocInfo0.isExterns());
      assertEquals(false, jSDocInfo0.isNoSideEffects());
      assertEquals(false, jSDocInfo0.shouldPreserveTry());
      assertNull(jSDocInfo0.getDescription());
      assertEquals(false, jSDocInfo0.isConstructor());
      assertEquals(false, jSDocInfo0.isJavaDispatch());
      assertEquals(false, jSDocInfo0.hasThisType());
      assertEquals(false, jSDocInfo0.isOverride());
      assertEquals(false, jSDocInfo0.isHidden());
      assertEquals(false, jSDocInfo0.isDefine());
      assertEquals(false, jSDocInfo0.isDeprecated());
      assertEquals(false, jSDocInfo0.hasType());
      assertEquals(false, jSDocInfo0.hasModifies());
      assertEquals(false, jSDocInfo0.hasTypedefType());
      assertEquals(0, jSDocInfo0.getParameterCount());
      assertNull(jSDocInfo0.getSourceName());
      assertEquals(false, jSDocInfo0.isConstant());
      assertEquals(false, jSDocInfo0.isInterface());
      assertNull(jSDocInfo0.getFileOverview());
      assertEquals(0, jSDocInfo0.getExtendedInterfacesCount());
      assertNull(jSDocInfo0.getBlockDescription());
      assertEquals(false, jSDocInfo0.isNoCompile());
      assertNotNull(toolErrorReporter0);
      
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, comment0, string0, config0, toolErrorReporter0);
      assertEquals(true, set0.isEmpty());
      assertEquals(0, set0.size());
      assertEquals(false, toolErrorReporter0.isReportingWarnings());
      assertEquals(false, toolErrorReporter0.hasReportedError());
      assertEquals(false, jSDocInfo0.hasFileOverview());
      assertEquals(false, jSDocInfo0.containsDeclaration());
      assertEquals(false, jSDocInfo0.isImplicitCast());
      assertEquals(false, jSDocInfo0.hasEnumParameterType());
      assertEquals(false, jSDocInfo0.isExport());
      assertEquals(0, jSDocInfo0.getImplementedInterfaceCount());
      assertNull(jSDocInfo0.getDeprecationReason());
      assertNull(jSDocInfo0.getOriginalCommentString());
      assertNull(jSDocInfo0.getReturnDescription());
      assertNull(jSDocInfo0.getTemplateTypeName());
      assertEquals(false, jSDocInfo0.hasReturnType());
      assertNull(jSDocInfo0.getVersion());
      assertNull(jSDocInfo0.getVisibility());
      assertNull(jSDocInfo0.getMeaning());
      assertEquals(false, jSDocInfo0.isNoAlias());
      assertNull(jSDocInfo0.getLendsName());
      assertEquals(false, jSDocInfo0.isNoTypeCheck());
      assertEquals(false, jSDocInfo0.isNoShadow());
      assertEquals(false, jSDocInfo0.hasBaseType());
      assertEquals("JSDocInfo", jSDocInfo0.toString());
      assertNull(jSDocInfo0.getLicense());
      assertEquals(false, jSDocInfo0.isExterns());
      assertEquals(false, jSDocInfo0.isNoSideEffects());
      assertEquals(false, jSDocInfo0.shouldPreserveTry());
      assertNull(jSDocInfo0.getDescription());
      assertEquals(false, jSDocInfo0.isConstructor());
      assertEquals(false, jSDocInfo0.isJavaDispatch());
      assertEquals(false, jSDocInfo0.hasThisType());
      assertEquals(false, jSDocInfo0.isOverride());
      assertEquals(false, jSDocInfo0.isHidden());
      assertEquals(false, jSDocInfo0.isDefine());
      assertEquals(false, jSDocInfo0.isDeprecated());
      assertEquals(false, jSDocInfo0.hasType());
      assertEquals(false, jSDocInfo0.hasModifies());
      assertEquals(false, jSDocInfo0.hasTypedefType());
      assertEquals(0, jSDocInfo0.getParameterCount());
      assertNull(jSDocInfo0.getSourceName());
      assertEquals(false, jSDocInfo0.isConstant());
      assertEquals(false, jSDocInfo0.isInterface());
      assertNull(jSDocInfo0.getFileOverview());
      assertEquals(0, jSDocInfo0.getExtendedInterfacesCount());
      assertNull(jSDocInfo0.getBlockDescription());
      assertEquals(false, jSDocInfo0.isNoCompile());
      assertNull(continueStatement0.getJsDoc());
      assertEquals(-1, continueStatement0.getLineno());
      assertEquals(-18, continueStatement0.getPosition());
      assertEquals(-18, continueStatement0.getAbsolutePosition());
      assertEquals(false, continueStatement0.hasChildren());
      assertEquals(121, continueStatement0.getType());
      assertEquals(-18, continueStatement0.getLength());
      assertEquals("121", continueStatement0.toString());
      assertEquals(0, continueStatement0.depth());
      assertNotNull(jsDocInfoParser0);
      
      JSDocInfo jSDocInfo1 = jsDocInfoParser0.retrieveAndResetParsedJSDocInfo();
      assertEquals(true, set0.isEmpty());
      assertEquals(0, set0.size());
      assertEquals(false, toolErrorReporter0.isReportingWarnings());
      assertEquals(false, toolErrorReporter0.hasReportedError());
      assertEquals(false, jSDocInfo0.hasFileOverview());
      assertEquals(false, jSDocInfo0.containsDeclaration());
      assertEquals(false, jSDocInfo0.isImplicitCast());
      assertEquals(false, jSDocInfo0.hasEnumParameterType());
      assertEquals(false, jSDocInfo0.isExport());
      assertEquals(0, jSDocInfo0.getImplementedInterfaceCount());
      assertNull(jSDocInfo0.getDeprecationReason());
      assertNull(jSDocInfo0.getOriginalCommentString());
      assertNull(jSDocInfo0.getReturnDescription());
      assertNull(jSDocInfo0.getTemplateTypeName());
      assertEquals(false, jSDocInfo0.hasReturnType());
      assertNull(jSDocInfo0.getVersion());
      assertNull(jSDocInfo0.getVisibility());
      assertNull(jSDocInfo0.getMeaning());
      assertEquals(false, jSDocInfo0.isNoAlias());
      assertNull(jSDocInfo0.getLendsName());
      assertEquals(false, jSDocInfo0.isNoTypeCheck());
      assertEquals(false, jSDocInfo0.isNoShadow());
      assertEquals(false, jSDocInfo0.hasBaseType());
      assertEquals("JSDocInfo", jSDocInfo0.toString());
      assertNull(jSDocInfo0.getLicense());
      assertEquals(false, jSDocInfo0.isExterns());
      assertEquals(false, jSDocInfo0.isNoSideEffects());
      assertEquals(false, jSDocInfo0.shouldPreserveTry());
      assertNull(jSDocInfo0.getDescription());
      assertEquals(false, jSDocInfo0.isConstructor());
      assertEquals(false, jSDocInfo0.isJavaDispatch());
      assertEquals(false, jSDocInfo0.hasThisType());
      assertEquals(false, jSDocInfo0.isOverride());
      assertEquals(false, jSDocInfo0.isHidden());
      assertEquals(false, jSDocInfo0.isDefine());
      assertEquals(false, jSDocInfo0.isDeprecated());
      assertEquals(false, jSDocInfo0.hasType());
      assertEquals(false, jSDocInfo0.hasModifies());
      assertEquals(false, jSDocInfo0.hasTypedefType());
      assertEquals(0, jSDocInfo0.getParameterCount());
      assertNull(jSDocInfo0.getSourceName());
      assertEquals(false, jSDocInfo0.isConstant());
      assertEquals(false, jSDocInfo0.isInterface());
      assertNull(jSDocInfo0.getFileOverview());
      assertEquals(0, jSDocInfo0.getExtendedInterfacesCount());
      assertNull(jSDocInfo0.getBlockDescription());
      assertEquals(false, jSDocInfo0.isNoCompile());
      assertNull(continueStatement0.getJsDoc());
      assertEquals(-1, continueStatement0.getLineno());
      assertEquals(-18, continueStatement0.getPosition());
      assertEquals(-18, continueStatement0.getAbsolutePosition());
      assertEquals(false, continueStatement0.hasChildren());
      assertEquals(121, continueStatement0.getType());
      assertEquals(-18, continueStatement0.getLength());
      assertEquals("121", continueStatement0.toString());
      assertEquals(0, continueStatement0.depth());
      assertNull(jSDocInfo1);
  }

  @Test
  public void test23()  throws Throwable  {
      String string0 = "OBJECT_FU0CTION_TYPE";
      int int0 = 295;
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream(string0, int0, int0);
      assertNotNull(jsDocTokenStream0);
      
      LabeledStatement labeledStatement0 = new LabeledStatement(int0);
      assertEquals(133, labeledStatement0.getType());
      assertEquals(-1, labeledStatement0.getLineno());
      assertEquals(false, labeledStatement0.hasChildren());
      assertEquals(295, labeledStatement0.getPosition());
      assertEquals(1, labeledStatement0.getLength());
      assertEquals(0, labeledStatement0.depth());
      assertEquals(295, labeledStatement0.getAbsolutePosition());
      assertEquals("133", labeledStatement0.toString());
      assertNull(labeledStatement0.getJsDoc());
      assertNotNull(labeledStatement0);
      
      Comment comment0 = labeledStatement0.getJsDocNode();
      assertEquals(133, labeledStatement0.getType());
      assertEquals(-1, labeledStatement0.getLineno());
      assertEquals(false, labeledStatement0.hasChildren());
      assertEquals(295, labeledStatement0.getPosition());
      assertEquals(1, labeledStatement0.getLength());
      assertEquals(0, labeledStatement0.depth());
      assertEquals(295, labeledStatement0.getAbsolutePosition());
      assertEquals("133", labeledStatement0.toString());
      assertNull(labeledStatement0.getJsDoc());
      assertNull(comment0);
      
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      assertEquals("[]", linkedHashSet0.toString());
      assertEquals(true, linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertNotNull(linkedHashSet0);
      
      boolean boolean0 = true;
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT3;
      Config config0 = new Config(linkedHashSet0, linkedHashSet0, boolean0, config_LanguageMode0, boolean0);
      assertEquals("[]", linkedHashSet0.toString());
      assertEquals(true, linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertNotNull(config0);
      
      ToolErrorReporter toolErrorReporter0 = new ToolErrorReporter(boolean0);
      assertEquals(true, toolErrorReporter0.isReportingWarnings());
      assertEquals(false, toolErrorReporter0.hasReportedError());
      assertNotNull(toolErrorReporter0);
      
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, comment0, string0, config0, toolErrorReporter0);
      assertEquals(133, labeledStatement0.getType());
      assertEquals(-1, labeledStatement0.getLineno());
      assertEquals(false, labeledStatement0.hasChildren());
      assertEquals(295, labeledStatement0.getPosition());
      assertEquals(1, labeledStatement0.getLength());
      assertEquals(0, labeledStatement0.depth());
      assertEquals(295, labeledStatement0.getAbsolutePosition());
      assertEquals("133", labeledStatement0.toString());
      assertNull(labeledStatement0.getJsDoc());
      assertEquals("[]", linkedHashSet0.toString());
      assertEquals(true, linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertEquals(true, toolErrorReporter0.isReportingWarnings());
      assertEquals(false, toolErrorReporter0.hasReportedError());
      assertNotNull(jsDocInfoParser0);
      
      JSDocInfo jSDocInfo0 = jsDocInfoParser0.getFileOverviewJSDocInfo();
      assertEquals(133, labeledStatement0.getType());
      assertEquals(-1, labeledStatement0.getLineno());
      assertEquals(false, labeledStatement0.hasChildren());
      assertEquals(295, labeledStatement0.getPosition());
      assertEquals(1, labeledStatement0.getLength());
      assertEquals(0, labeledStatement0.depth());
      assertEquals(295, labeledStatement0.getAbsolutePosition());
      assertEquals("133", labeledStatement0.toString());
      assertNull(labeledStatement0.getJsDoc());
      assertEquals("[]", linkedHashSet0.toString());
      assertEquals(true, linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertEquals(true, toolErrorReporter0.isReportingWarnings());
      assertEquals(false, toolErrorReporter0.hasReportedError());
      assertNull(jSDocInfo0);
  }

  @Test
  public void test24() {}
//   @Test
//   public void test24()  throws Throwable  {
//       String string0 = "u`8Z|*|r>[";
//       Label label0 = new Label();
//       //  // Unstable assertion: assertEquals(-1, label0.getPosition());
//       //  // Unstable assertion: assertEquals(0, label0.depth());
//       //  // Unstable assertion: assertNull(label0.getJsDoc());
//       //  // Unstable assertion: assertEquals(-1, label0.getLineno());
//       //  // Unstable assertion: assertEquals(130, label0.getType());
//       //  // Unstable assertion: assertNull(label0.getName());
//       //  // Unstable assertion: assertEquals(-1, label0.getAbsolutePosition());
//       //  // Unstable assertion: assertEquals(false, label0.hasChildren());
//       //  // Unstable assertion: assertEquals("130", label0.toString());
//       //  // Unstable assertion: assertEquals(1, label0.getLength());
//       //  // Unstable assertion: assertNotNull(label0);
//       
//       Comment comment0 = label0.getJsDocNode();
//       //  // Unstable assertion: assertEquals(-1, label0.getPosition());
//       //  // Unstable assertion: assertEquals(0, label0.depth());
//       //  // Unstable assertion: assertNull(label0.getJsDoc());
//       //  // Unstable assertion: assertEquals(-1, label0.getLineno());
//       //  // Unstable assertion: assertEquals(130, label0.getType());
//       //  // Unstable assertion: assertNull(label0.getName());
//       //  // Unstable assertion: assertEquals(-1, label0.getAbsolutePosition());
//       //  // Unstable assertion: assertEquals(false, label0.hasChildren());
//       //  // Unstable assertion: assertEquals("130", label0.toString());
//       //  // Unstable assertion: assertEquals(1, label0.getLength());
//       //  // Unstable assertion: assertNull(comment0);
//       
//       boolean boolean0 = true;
//       Node node0 = JsDocInfoParser.parseTypeString(string0);
//       //  // Unstable assertion: assertEquals(0, node0.getSideEffectFlags());
//       //  // Unstable assertion: assertEquals(5, node0.getSourcePosition());
//       //  // Unstable assertion: assertEquals(false, node0.hasOneChild());
//       //  // Unstable assertion: assertEquals(301, node0.getType());
//       //  // Unstable assertion: assertEquals(false, node0.wasEmptyNode());
//       //  // Unstable assertion: assertEquals(false, node0.isQuotedString());
//       //  // Unstable assertion: assertEquals(false, node0.isOnlyModifiesThisCall());
//       //  // Unstable assertion: assertEquals(true, node0.hasMoreThanOneChild());
//       //  // Unstable assertion: assertEquals(0, node0.getLineno());
//       //  // Unstable assertion: assertEquals(5, node0.getCharno());
//       //  // Unstable assertion: assertEquals(false, node0.isLocalResultCall());
//       //  // Unstable assertion: assertEquals(false, node0.isUnscopedQualifiedName());
//       //  // Unstable assertion: assertEquals(false, node0.isSyntheticBlock());
//       //  // Unstable assertion: assertEquals(3, node0.getChildCount());
//       //  // Unstable assertion: assertEquals(true, node0.hasChildren());
//       //  // Unstable assertion: assertEquals(false, node0.isQualifiedName());
//       //  // Unstable assertion: assertEquals(false, node0.isNoSideEffectsCall());
//       //  // Unstable assertion: assertEquals(false, node0.isOptionalArg());
//       //  // Unstable assertion: assertEquals(false, node0.isVarArgs());
//       //  // Unstable assertion: assertNotNull(node0);
//       
//       int int0 = (-1247);
//       JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream(string0, int0);
//       //  // Unstable assertion: assertNotNull(jsDocTokenStream0);
//       
//       Locale locale0 = Locale.ITALIAN;
//       //  // Unstable assertion: assertEquals("ita", locale0.getISO3Language());
//       //  // Unstable assertion: assertEquals("", locale0.getISO3Country());
//       //  // Unstable assertion: assertEquals("", locale0.getCountry());
//       //  // Unstable assertion: assertEquals("", locale0.getVariant());
//       //  // Unstable assertion: assertEquals("it", locale0.toString());
//       //  // Unstable assertion: assertEquals("it", locale0.getLanguage());
//       //  // Unstable assertion: assertNotNull(locale0);
//       
//       Set<String> set0 = locale0.getUnicodeLocaleAttributes();
//       //  // Unstable assertion: assertEquals("ita", locale0.getISO3Language());
//       //  // Unstable assertion: assertEquals("", locale0.getISO3Country());
//       //  // Unstable assertion: assertEquals("", locale0.getCountry());
//       //  // Unstable assertion: assertEquals("", locale0.getVariant());
//       //  // Unstable assertion: assertEquals("it", locale0.toString());
//       //  // Unstable assertion: assertEquals("it", locale0.getLanguage());
//       //  // Unstable assertion: assertEquals(0, set0.size());
//       //  // Unstable assertion: assertEquals(true, set0.isEmpty());
//       //  // Unstable assertion: assertNotNull(set0);
//       
//       Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5;
//       Config config0 = new Config(set0, set0, boolean0, config_LanguageMode0, boolean0);
//       //  // Unstable assertion: assertEquals("ita", locale0.getISO3Language());
//       //  // Unstable assertion: assertEquals("", locale0.getISO3Country());
//       //  // Unstable assertion: assertEquals("", locale0.getCountry());
//       //  // Unstable assertion: assertEquals("", locale0.getVariant());
//       //  // Unstable assertion: assertEquals("it", locale0.toString());
//       //  // Unstable assertion: assertEquals("it", locale0.getLanguage());
//       //  // Unstable assertion: assertEquals(0, set0.size());
//       //  // Unstable assertion: assertEquals(true, set0.isEmpty());
//       //  // Unstable assertion: assertNotNull(config0);
//       
//       Context context0 = Context.enter();
//       //  // Unstable assertion: assertEquals(2147483647, context0.getMaximumInterpreterStackDepth());
//       //  // Unstable assertion: assertEquals(0, context0.getOptimizationLevel());
//       //  // Unstable assertion: assertEquals(0, context0.getLanguageVersion());
//       //  // Unstable assertion: assertEquals(false, context0.isGeneratingDebugChanged());
//       //  // Unstable assertion: assertEquals(true, context0.isSealed());
//       //  // Unstable assertion: assertEquals(false, context0.hasCompileFunctionsWithDynamicScope());
//       //  // Unstable assertion: assertEquals(true, context0.isGeneratingSource());
//       //  // Unstable assertion: assertEquals(false, context0.isGeneratingDebug());
//       //  // Unstable assertion: assertEquals(0, context0.getInstructionObserverThreshold());
//       //  // Unstable assertion: assertNotNull(context0);
//       //  // Unstable assertion: assertFalse(context0.generateObserverCount);
//       
//       ToolErrorReporter toolErrorReporter0 = (ToolErrorReporter)context0.getErrorReporter();
//       //  // Unstable assertion: assertEquals(true, toolErrorReporter0.hasReportedError());
//       //  // Unstable assertion: assertEquals(true, toolErrorReporter0.isReportingWarnings());
//       //  // Unstable assertion: assertEquals(2147483647, context0.getMaximumInterpreterStackDepth());
//       //  // Unstable assertion: assertEquals(0, context0.getOptimizationLevel());
//       //  // Unstable assertion: assertEquals(0, context0.getLanguageVersion());
//       //  // Unstable assertion: assertEquals(false, context0.isGeneratingDebugChanged());
//       //  // Unstable assertion: assertEquals(true, context0.isSealed());
//       //  // Unstable assertion: assertEquals(false, context0.hasCompileFunctionsWithDynamicScope());
//       //  // Unstable assertion: assertEquals(true, context0.isGeneratingSource());
//       //  // Unstable assertion: assertEquals(false, context0.isGeneratingDebug());
//       //  // Unstable assertion: assertEquals(0, context0.getInstructionObserverThreshold());
//       //  // Unstable assertion: assertNotNull(toolErrorReporter0);
//       //  // Unstable assertion: assertFalse(context0.generateObserverCount);
//       
//       JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, comment0, string0, config0, toolErrorReporter0);
//       //  // Unstable assertion: assertEquals("ita", locale0.getISO3Language());
//       //  // Unstable assertion: assertEquals("", locale0.getISO3Country());
//       //  // Unstable assertion: assertEquals("", locale0.getCountry());
//       //  // Unstable assertion: assertEquals("", locale0.getVariant());
//       //  // Unstable assertion: assertEquals("it", locale0.toString());
//       //  // Unstable assertion: assertEquals("it", locale0.getLanguage());
//       //  // Unstable assertion: assertEquals(true, toolErrorReporter0.hasReportedError());
//       //  // Unstable assertion: assertEquals(true, toolErrorReporter0.isReportingWarnings());
//       //  // Unstable assertion: assertEquals(-1, label0.getPosition());
//       //  // Unstable assertion: assertEquals(0, label0.depth());
//       //  // Unstable assertion: assertNull(label0.getJsDoc());
//       //  // Unstable assertion: assertEquals(-1, label0.getLineno());
//       //  // Unstable assertion: assertEquals(130, label0.getType());
//       //  // Unstable assertion: assertNull(label0.getName());
//       //  // Unstable assertion: assertEquals(-1, label0.getAbsolutePosition());
//       //  // Unstable assertion: assertEquals(false, label0.hasChildren());
//       //  // Unstable assertion: assertEquals("130", label0.toString());
//       //  // Unstable assertion: assertEquals(1, label0.getLength());
//       //  // Unstable assertion: assertEquals(2147483647, context0.getMaximumInterpreterStackDepth());
//       //  // Unstable assertion: assertEquals(0, context0.getOptimizationLevel());
//       //  // Unstable assertion: assertEquals(0, context0.getLanguageVersion());
//       //  // Unstable assertion: assertEquals(false, context0.isGeneratingDebugChanged());
//       //  // Unstable assertion: assertEquals(true, context0.isSealed());
//       //  // Unstable assertion: assertEquals(false, context0.hasCompileFunctionsWithDynamicScope());
//       //  // Unstable assertion: assertEquals(true, context0.isGeneratingSource());
//       //  // Unstable assertion: assertEquals(false, context0.isGeneratingDebug());
//       //  // Unstable assertion: assertEquals(0, context0.getInstructionObserverThreshold());
//       //  // Unstable assertion: assertEquals(0, set0.size());
//       //  // Unstable assertion: assertEquals(true, set0.isEmpty());
//       //  // Unstable assertion: assertNotNull(jsDocInfoParser0);
//       //  // Unstable assertion: assertFalse(context0.generateObserverCount);
//       
//       Node.FileLevelJsDocBuilder node_FileLevelJsDocBuilder0 = node0.getJsDocBuilderForNode();
//       //  // Unstable assertion: assertEquals(0, node0.getSideEffectFlags());
//       //  // Unstable assertion: assertEquals(5, node0.getSourcePosition());
//       //  // Unstable assertion: assertEquals(false, node0.hasOneChild());
//       //  // Unstable assertion: assertEquals(301, node0.getType());
//       //  // Unstable assertion: assertEquals(false, node0.wasEmptyNode());
//       //  // Unstable assertion: assertEquals(false, node0.isQuotedString());
//       //  // Unstable assertion: assertEquals(false, node0.isOnlyModifiesThisCall());
//       //  // Unstable assertion: assertEquals(true, node0.hasMoreThanOneChild());
//       //  // Unstable assertion: assertEquals(0, node0.getLineno());
//       //  // Unstable assertion: assertEquals(5, node0.getCharno());
//       //  // Unstable assertion: assertEquals(false, node0.isLocalResultCall());
//       //  // Unstable assertion: assertEquals(false, node0.isUnscopedQualifiedName());
//       //  // Unstable assertion: assertEquals(false, node0.isSyntheticBlock());
//       //  // Unstable assertion: assertEquals(3, node0.getChildCount());
//       //  // Unstable assertion: assertEquals(true, node0.hasChildren());
//       //  // Unstable assertion: assertEquals(false, node0.isQualifiedName());
//       //  // Unstable assertion: assertEquals(false, node0.isNoSideEffectsCall());
//       //  // Unstable assertion: assertEquals(false, node0.isOptionalArg());
//       //  // Unstable assertion: assertEquals(false, node0.isVarArgs());
//       //  // Unstable assertion: assertNotNull(node_FileLevelJsDocBuilder0);
//       
//       jsDocInfoParser0.setFileLevelJsDocBuilder(node_FileLevelJsDocBuilder0);
//       //  // Unstable assertion: assertEquals("ita", locale0.getISO3Language());
//       //  // Unstable assertion: assertEquals("", locale0.getISO3Country());
//       //  // Unstable assertion: assertEquals("", locale0.getCountry());
//       //  // Unstable assertion: assertEquals("", locale0.getVariant());
//       //  // Unstable assertion: assertEquals("it", locale0.toString());
//       //  // Unstable assertion: assertEquals("it", locale0.getLanguage());
//       //  // Unstable assertion: assertEquals(true, toolErrorReporter0.hasReportedError());
//       //  // Unstable assertion: assertEquals(true, toolErrorReporter0.isReportingWarnings());
//       //  // Unstable assertion: assertEquals(0, node0.getSideEffectFlags());
//       //  // Unstable assertion: assertEquals(5, node0.getSourcePosition());
//       //  // Unstable assertion: assertEquals(false, node0.hasOneChild());
//       //  // Unstable assertion: assertEquals(301, node0.getType());
//       //  // Unstable assertion: assertEquals(false, node0.wasEmptyNode());
//       //  // Unstable assertion: assertEquals(false, node0.isQuotedString());
//       //  // Unstable assertion: assertEquals(false, node0.isOnlyModifiesThisCall());
//       //  // Unstable assertion: assertEquals(true, node0.hasMoreThanOneChild());
//       //  // Unstable assertion: assertEquals(0, node0.getLineno());
//       //  // Unstable assertion: assertEquals(5, node0.getCharno());
//       //  // Unstable assertion: assertEquals(false, node0.isLocalResultCall());
//       //  // Unstable assertion: assertEquals(false, node0.isUnscopedQualifiedName());
//       //  // Unstable assertion: assertEquals(false, node0.isSyntheticBlock());
//       //  // Unstable assertion: assertEquals(3, node0.getChildCount());
//       //  // Unstable assertion: assertEquals(true, node0.hasChildren());
//       //  // Unstable assertion: assertEquals(false, node0.isQualifiedName());
//       //  // Unstable assertion: assertEquals(false, node0.isNoSideEffectsCall());
//       //  // Unstable assertion: assertEquals(false, node0.isOptionalArg());
//       //  // Unstable assertion: assertEquals(false, node0.isVarArgs());
//       //  // Unstable assertion: assertEquals(-1, label0.getPosition());
//       //  // Unstable assertion: assertEquals(0, label0.depth());
//       //  // Unstable assertion: assertNull(label0.getJsDoc());
//       //  // Unstable assertion: assertEquals(-1, label0.getLineno());
//       //  // Unstable assertion: assertEquals(130, label0.getType());
//       //  // Unstable assertion: assertNull(label0.getName());
//       //  // Unstable assertion: assertEquals(-1, label0.getAbsolutePosition());
//       //  // Unstable assertion: assertEquals(false, label0.hasChildren());
//       //  // Unstable assertion: assertEquals("130", label0.toString());
//       //  // Unstable assertion: assertEquals(1, label0.getLength());
//       //  // Unstable assertion: assertEquals(2147483647, context0.getMaximumInterpreterStackDepth());
//       //  // Unstable assertion: assertEquals(0, context0.getOptimizationLevel());
//       //  // Unstable assertion: assertEquals(0, context0.getLanguageVersion());
//       //  // Unstable assertion: assertEquals(false, context0.isGeneratingDebugChanged());
//       //  // Unstable assertion: assertEquals(true, context0.isSealed());
//       //  // Unstable assertion: assertEquals(false, context0.hasCompileFunctionsWithDynamicScope());
//       //  // Unstable assertion: assertEquals(true, context0.isGeneratingSource());
//       //  // Unstable assertion: assertEquals(false, context0.isGeneratingDebug());
//       //  // Unstable assertion: assertEquals(0, context0.getInstructionObserverThreshold());
//       //  // Unstable assertion: assertEquals(0, set0.size());
//       //  // Unstable assertion: assertEquals(true, set0.isEmpty());
//       //  // Unstable assertion: assertFalse(context0.generateObserverCount);
//   }

  @Test
  public void test25()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      String string0 = "this";
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream(string0);
      assertNotNull(jsDocTokenStream0);
      
      int int0 = 1709;
      Token.CommentType token_CommentType0 = Token.CommentType.BLOCK;
      Comment comment0 = new Comment(int0, int0, token_CommentType0, string0);
      assertEquals(false, comment0.hasChildren());
      assertEquals(-1, comment0.getLineno());
      assertEquals(1709, comment0.getPosition());
      assertEquals(1709, comment0.getAbsolutePosition());
      assertEquals(1709, comment0.getLength());
      assertEquals("this", comment0.getValue());
      assertEquals(false, comment0.isParsed());
      assertEquals("161", comment0.toString());
      assertEquals(161, comment0.getType());
      assertEquals(Token.CommentType.BLOCK, comment0.getCommentType());
      assertNull(comment0.getJsDoc());
      assertEquals(0, comment0.depth());
      assertNotNull(comment0);
      
      Locale locale0 = Locale.ITALIAN;
      assertEquals("", locale0.getVariant());
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("it", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertNotNull(locale0);
      
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      assertEquals("", locale0.getVariant());
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("it", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals(true, set0.isEmpty());
      assertEquals(0, set0.size());
      assertNotNull(set0);
      
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5_STRICT;
      Config config0 = new Config(set0, set0, boolean0, config_LanguageMode0, boolean0);
      assertEquals("", locale0.getVariant());
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("it", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals(true, set0.isEmpty());
      assertEquals(0, set0.size());
      assertNotNull(config0);
      
      ToolErrorReporter toolErrorReporter0 = new ToolErrorReporter(boolean0);
      assertEquals(true, toolErrorReporter0.isReportingWarnings());
      assertEquals(false, toolErrorReporter0.hasReportedError());
      assertNotNull(toolErrorReporter0);
      
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, comment0, string0, config0, toolErrorReporter0);
      assertEquals("", locale0.getVariant());
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("it", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals(true, set0.isEmpty());
      assertEquals(0, set0.size());
      assertEquals(false, comment0.hasChildren());
      assertEquals(-1, comment0.getLineno());
      assertEquals(1709, comment0.getPosition());
      assertEquals(1709, comment0.getAbsolutePosition());
      assertEquals(1709, comment0.getLength());
      assertEquals("this", comment0.getValue());
      assertEquals(false, comment0.isParsed());
      assertEquals("161", comment0.toString());
      assertEquals(161, comment0.getType());
      assertEquals(Token.CommentType.BLOCK, comment0.getCommentType());
      assertNull(comment0.getJsDoc());
      assertEquals(0, comment0.depth());
      assertEquals(true, toolErrorReporter0.isReportingWarnings());
      assertEquals(false, toolErrorReporter0.hasReportedError());
      assertNotNull(jsDocInfoParser0);
      
      boolean boolean1 = jsDocInfoParser0.hasParsedJSDocInfo();
      assertEquals("", locale0.getVariant());
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("it", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals(true, set0.isEmpty());
      assertEquals(0, set0.size());
      assertEquals(false, comment0.hasChildren());
      assertEquals(-1, comment0.getLineno());
      assertEquals(1709, comment0.getPosition());
      assertEquals(1709, comment0.getAbsolutePosition());
      assertEquals(1709, comment0.getLength());
      assertEquals("this", comment0.getValue());
      assertEquals(false, comment0.isParsed());
      assertEquals("161", comment0.toString());
      assertEquals(161, comment0.getType());
      assertEquals(Token.CommentType.BLOCK, comment0.getCommentType());
      assertNull(comment0.getJsDoc());
      assertEquals(0, comment0.depth());
      assertEquals(true, toolErrorReporter0.isReportingWarnings());
      assertEquals(false, toolErrorReporter0.hasReportedError());
      assertFalse(boolean1);
      assertFalse(boolean0 == boolean1);
      assertFalse(boolean1 == boolean0);
  }

  @Test
  public void test26()  throws Throwable  {
      String string0 = "function";
      Node node0 = JsDocInfoParser.parseTypeString(string0);
      assertNull(node0);
  }
}
