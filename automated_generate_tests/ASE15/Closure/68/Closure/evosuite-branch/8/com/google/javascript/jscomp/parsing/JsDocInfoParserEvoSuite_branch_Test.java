/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 22:39:43 GMT 2014
 */

package com.google.javascript.jscomp.parsing;

import static org.junit.Assert.*; import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.junit.Test;
import com.google.javascript.jscomp.mozilla.rhino.Context;
import com.google.javascript.jscomp.mozilla.rhino.ContextFactory;
import com.google.javascript.jscomp.mozilla.rhino.Token;
import com.google.javascript.jscomp.mozilla.rhino.ast.ArrayLiteral;
import com.google.javascript.jscomp.mozilla.rhino.ast.Assignment;
import com.google.javascript.jscomp.mozilla.rhino.ast.Comment;
import com.google.javascript.jscomp.mozilla.rhino.ast.ErrorCollector;
import com.google.javascript.jscomp.mozilla.rhino.ast.ParenthesizedExpression;
import com.google.javascript.jscomp.mozilla.rhino.ast.RegExpLiteral;
import com.google.javascript.jscomp.mozilla.rhino.ast.VariableDeclaration;
import com.google.javascript.jscomp.mozilla.rhino.ast.VariableInitializer;
import com.google.javascript.jscomp.mozilla.rhino.ast.XmlLiteral;
import com.google.javascript.jscomp.mozilla.rhino.ast.XmlString;
import com.google.javascript.jscomp.mozilla.rhino.tools.ToolErrorReporter;
import com.google.javascript.jscomp.parsing.Config;
import com.google.javascript.jscomp.parsing.JsDocInfoParser;
import com.google.javascript.jscomp.parsing.JsDocToken;
import com.google.javascript.jscomp.parsing.JsDocTokenStream;
import com.google.javascript.rhino.JSDocInfo;
import com.google.javascript.rhino.Node;
import java.nio.charset.Charset;
import java.util.LinkedHashSet;
import java.util.Locale;
import java.util.Set;
import java.util.TreeSet;



import org.evosuite.runtime.testdata.FileSystemHandling;;
import org.junit.runner.RunWith;


public class JsDocInfoParserEvoSuite_branch_Test  {

  @Test
  public void test00()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      byte[] byteArray0 = new byte[26];
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      String string0 = "7N*/P`V_>~";
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream(string0);
      assertNotNull(jsDocTokenStream0);
      
      VariableDeclaration variableDeclaration0 = new VariableDeclaration((int) byteArray0[0]);
      assertEquals(false, variableDeclaration0.hasChildren());
      assertEquals("122", variableDeclaration0.toString());
      assertNull(variableDeclaration0.getJsDoc());
      assertEquals(1, variableDeclaration0.getLength());
      assertEquals(0, variableDeclaration0.getAbsolutePosition());
      assertEquals(false, variableDeclaration0.isConst());
      assertEquals(false, variableDeclaration0.isLet());
      assertEquals(122, variableDeclaration0.getType());
      assertEquals(true, variableDeclaration0.isVar());
      assertEquals(0, variableDeclaration0.depth());
      assertEquals(-1, variableDeclaration0.getLineno());
      assertEquals(0, variableDeclaration0.getPosition());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(variableDeclaration0);
      
      Comment comment0 = variableDeclaration0.getJsDocNode();
      assertEquals(false, variableDeclaration0.hasChildren());
      assertEquals("122", variableDeclaration0.toString());
      assertNull(variableDeclaration0.getJsDoc());
      assertEquals(1, variableDeclaration0.getLength());
      assertEquals(0, variableDeclaration0.getAbsolutePosition());
      assertEquals(false, variableDeclaration0.isConst());
      assertEquals(false, variableDeclaration0.isLet());
      assertEquals(122, variableDeclaration0.getType());
      assertEquals(true, variableDeclaration0.isVar());
      assertEquals(0, variableDeclaration0.depth());
      assertEquals(-1, variableDeclaration0.getLineno());
      assertEquals(0, variableDeclaration0.getPosition());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNull(comment0);
      
      TreeSet<String> treeSet0 = new TreeSet<String>();
      assertEquals("[]", treeSet0.toString());
      assertNotNull(treeSet0);
      
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT3;
      Config config0 = new Config(treeSet0, treeSet0, boolean1, config_LanguageMode0, boolean0);
      assertEquals("[]", treeSet0.toString());
      assertFalse(boolean0 == boolean1);
      assertFalse(boolean1 == boolean0);
      assertNotNull(config0);
      
      ToolErrorReporter toolErrorReporter0 = new ToolErrorReporter(boolean1);
      assertEquals(false, toolErrorReporter0.hasReportedError());
      assertEquals(false, toolErrorReporter0.isReportingWarnings());
      assertFalse(boolean1 == boolean0);
      assertNotNull(toolErrorReporter0);
      
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, comment0, string0, config0, toolErrorReporter0);
      assertEquals("[]", treeSet0.toString());
      assertEquals(false, toolErrorReporter0.hasReportedError());
      assertEquals(false, toolErrorReporter0.isReportingWarnings());
      assertEquals(false, variableDeclaration0.hasChildren());
      assertEquals("122", variableDeclaration0.toString());
      assertNull(variableDeclaration0.getJsDoc());
      assertEquals(1, variableDeclaration0.getLength());
      assertEquals(0, variableDeclaration0.getAbsolutePosition());
      assertEquals(false, variableDeclaration0.isConst());
      assertEquals(false, variableDeclaration0.isLet());
      assertEquals(122, variableDeclaration0.getType());
      assertEquals(true, variableDeclaration0.isVar());
      assertEquals(0, variableDeclaration0.depth());
      assertEquals(-1, variableDeclaration0.getLineno());
      assertEquals(0, variableDeclaration0.getPosition());
      assertFalse(boolean0 == boolean1);
      assertFalse(boolean1 == boolean0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(jsDocInfoParser0);
      
      boolean boolean2 = jsDocInfoParser0.parse();
      assertEquals("[]", treeSet0.toString());
      assertEquals(false, toolErrorReporter0.hasReportedError());
      assertEquals(false, toolErrorReporter0.isReportingWarnings());
      assertEquals(false, variableDeclaration0.hasChildren());
      assertEquals("122", variableDeclaration0.toString());
      assertNull(variableDeclaration0.getJsDoc());
      assertEquals(1, variableDeclaration0.getLength());
      assertEquals(0, variableDeclaration0.getAbsolutePosition());
      assertEquals(false, variableDeclaration0.isConst());
      assertEquals(false, variableDeclaration0.isLet());
      assertEquals(122, variableDeclaration0.getType());
      assertEquals(true, variableDeclaration0.isVar());
      assertEquals(0, variableDeclaration0.depth());
      assertEquals(-1, variableDeclaration0.getLineno());
      assertEquals(0, variableDeclaration0.getPosition());
      assertTrue(boolean2);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean0 == boolean2);
      assertFalse(boolean0 == boolean1);
      assertFalse(boolean1 == boolean2);
      assertFalse(boolean1 == boolean0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
  }

  @Test
  public void test01()  throws Throwable  {
      String string0 = "{1:D[j?o)DW=9";
      Node node0 = JsDocInfoParser.parseTypeString(string0);
      assertNull(node0);
  }

  @Test
  public void test02()  throws Throwable  {
      String string0 = "{]Rj?y=";
      Node node0 = JsDocInfoParser.parseTypeString(string0);
      assertNull(node0);
  }

  @Test
  public void test03()  throws Throwable  {
      String string0 = "[{Mt+Si/-,-";
      Node node0 = JsDocInfoParser.parseTypeString(string0);
      assertNull(node0);
  }

  @Test
  public void test04()  throws Throwable  {
      String string0 = "[JavaConsdruc,or ";
      Node node0 = JsDocInfoParser.parseTypeString(string0);
      assertNull(node0);
  }

  @Test
  public void test05()  throws Throwable  {
      String string0 = "(J`,Kpv6GI|G}HsB";
      Node node0 = JsDocInfoParser.parseTypeString(string0);
      assertNull(node0);
  }

  @Test
  public void test06() {}
//   @Test
//   public void test06()  throws Throwable  {
//       String string0 = "undefined";
//       Node node0 = JsDocInfoParser.parseTypeString(string0);
//       assertEquals(40, node0.getType());
//       assertEquals(false, node0.isQuotedString());
//       assertEquals(false, node0.isLocalResultCall());
//       assertEquals(false, node0.isUnscopedQualifiedName());
//       assertEquals(0, node0.getSideEffectFlags());
//       assertEquals(false, node0.isQualifiedName());
//       assertEquals(false, node0.isVarArgs());
//       assertEquals(0, node0.getChildCount());
//       assertEquals(false, node0.wasEmptyNode());
//       assertEquals(false, node0.isOnlyModifiesThisCall());
//       assertEquals(0, node0.getCharno());
//       assertEquals(false, node0.hasOneChild());
//       assertEquals(0, node0.getLineno());
//       assertEquals(false, node0.isOptionalArg());
//       assertEquals(0, node0.getSourcePosition());
//       assertEquals(false, node0.hasChildren());
//       assertEquals(false, node0.isNoSideEffectsCall());
//       assertEquals(false, node0.hasMoreThanOneChild());
//       assertEquals(false, node0.isSyntheticBlock());
//       assertNotNull(node0);
//   }

  @Test
  public void test07()  throws Throwable  {
      String string0 = "null";
      Node node0 = JsDocInfoParser.parseTypeString(string0);
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(0, node0.getLineno());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(0, node0.getCharno());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isQuotedString());
      assertEquals(0, node0.getSourcePosition());
      assertEquals(40, node0.getType());
      assertNotNull(node0);
  }

  @Test
  public void test08()  throws Throwable  {
      String string0 = "function ";
      Node node0 = JsDocInfoParser.parseTypeString(string0);
      assertNull(node0);
  }

  @Test
  public void test09()  throws Throwable  {
      String string0 = "*]Z7e!";
      Node node0 = JsDocInfoParser.parseTypeString(string0);
      assertEquals(false, node0.hasOneChild());
      assertEquals(0, node0.getLineno());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.hasChildren());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(0, node0.getCharno());
      assertEquals(0, node0.getSourcePosition());
      assertEquals(302, node0.getType());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertNotNull(node0);
  }

  @Test
  public void test10()  throws Throwable  {
      String string0 = "CA~|r!fR";
      Node node0 = JsDocInfoParser.parseTypeString(string0);
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isQuotedString());
      assertEquals(true, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(true, node0.hasChildren());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(0, node0.getLineno());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(4, node0.getCharno());
      assertEquals(301, node0.getType());
      assertEquals(2, node0.getChildCount());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(4, node0.getSourcePosition());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertNotNull(node0);
  }

  @Test
  public void test11()  throws Throwable  {
      String string0 = "{1:[j?@o)D9";
      Node node0 = JsDocInfoParser.parseTypeString(string0);
      assertNull(node0);
  }

  @Test
  public void test12()  throws Throwable  {
      String string0 = "!bL)W^K` |!";
      Node node0 = JsDocInfoParser.parseTypeString(string0);
      assertEquals(1, node0.getChildCount());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isVarArgs());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(true, node0.hasOneChild());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(true, node0.hasChildren());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(3, node0.getSourcePosition());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(306, node0.getType());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(0, node0.getLineno());
      assertEquals(3, node0.getCharno());
      assertNotNull(node0);
  }

  @Test
  public void test13()  throws Throwable  {
      String string0 = "?)3?bB6-c^GS?X1#";
      Node node0 = JsDocInfoParser.parseTypeString(string0);
      assertEquals(false, node0.isQualifiedName());
      assertEquals(304, node0.getType());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(1, node0.getSourcePosition());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(0, node0.getLineno());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(1, node0.getCharno());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertNotNull(node0);
  }

  @Test
  public void test14()  throws Throwable  {
      String string0 = "?=";
      Node node0 = JsDocInfoParser.parseTypeString(string0);
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isVarArgs());
      assertEquals(1, node0.getCharno());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(304, node0.getType());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(1, node0.getSourcePosition());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(0, node0.getLineno());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.hasOneChild());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.hasChildren());
      assertNotNull(node0);
  }

  @Test
  public void test15()  throws Throwable  {
      String string0 = "?";
      Node node0 = JsDocInfoParser.parseTypeString(string0);
      assertNull(node0);
  }

  @Test
  public void test16()  throws Throwable  {
      String string0 = "<;g.<,ytl`QnM";
      Node node0 = JsDocInfoParser.parseTypeString(string0);
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(3, node0.getCharno());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.hasChildren());
      assertEquals(0, node0.getLineno());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(3, node0.getSourcePosition());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(40, node0.getType());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isVarArgs());
      assertNotNull(node0);
  }

  @Test
  public void test17()  throws Throwable  {
      TreeSet<String> treeSet0 = new TreeSet<String>();
      assertEquals("[]", treeSet0.toString());
      assertNotNull(treeSet0);
      
      boolean boolean0 = true;
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT3;
      ToolErrorReporter toolErrorReporter0 = new ToolErrorReporter(boolean0);
      assertEquals(false, toolErrorReporter0.hasReportedError());
      assertEquals(true, toolErrorReporter0.isReportingWarnings());
      assertNotNull(toolErrorReporter0);
      
      String string0 = "&Qb'*-lqo1opJ";
      int int0 = 0;
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream(string0, int0);
      assertNotNull(jsDocTokenStream0);
      
      Assignment assignment0 = new Assignment(int0);
      assertEquals(1, assignment0.getLength());
      assertNull(assignment0.getJsDoc());
      assertEquals(false, assignment0.hasChildren());
      assertEquals(0, assignment0.getAbsolutePosition());
      assertEquals(-1, assignment0.getOperatorPosition());
      assertEquals(-1, assignment0.getLineno());
      assertEquals(-1, assignment0.getType());
      assertEquals(0, assignment0.getPosition());
      assertEquals("-1", assignment0.toString());
      assertEquals(0, assignment0.depth());
      assertNotNull(assignment0);
      
      Comment comment0 = assignment0.getJsDocNode();
      assertEquals(1, assignment0.getLength());
      assertNull(assignment0.getJsDoc());
      assertEquals(false, assignment0.hasChildren());
      assertEquals(0, assignment0.getAbsolutePosition());
      assertEquals(-1, assignment0.getOperatorPosition());
      assertEquals(-1, assignment0.getLineno());
      assertEquals(-1, assignment0.getType());
      assertEquals(0, assignment0.getPosition());
      assertEquals("-1", assignment0.toString());
      assertEquals(0, assignment0.depth());
      assertNull(comment0);
      
      Config config0 = new Config(treeSet0, treeSet0, boolean0, config_LanguageMode0, boolean0);
      assertEquals("[]", treeSet0.toString());
      assertNotNull(config0);
      
      JsDocToken jsDocToken0 = jsDocTokenStream0.getJsDocToken();
      assertEquals(4, jsDocToken0.ordinal());
      assertEquals("STRING", jsDocToken0.toString());
      assertEquals("STRING", jsDocToken0.name());
      
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, comment0, string0, config0, toolErrorReporter0);
      assertEquals(false, toolErrorReporter0.hasReportedError());
      assertEquals(true, toolErrorReporter0.isReportingWarnings());
      assertEquals("[]", treeSet0.toString());
      assertEquals(1, assignment0.getLength());
      assertNull(assignment0.getJsDoc());
      assertEquals(false, assignment0.hasChildren());
      assertEquals(0, assignment0.getAbsolutePosition());
      assertEquals(-1, assignment0.getOperatorPosition());
      assertEquals(-1, assignment0.getLineno());
      assertEquals(-1, assignment0.getType());
      assertEquals(0, assignment0.getPosition());
      assertEquals("-1", assignment0.toString());
      assertEquals(0, assignment0.depth());
      assertNotNull(jsDocInfoParser0);
      
      boolean boolean1 = jsDocInfoParser0.parse();
      assertEquals(false, toolErrorReporter0.hasReportedError());
      assertEquals(true, toolErrorReporter0.isReportingWarnings());
      assertEquals("[]", treeSet0.toString());
      assertEquals(1, assignment0.getLength());
      assertNull(assignment0.getJsDoc());
      assertEquals(false, assignment0.hasChildren());
      assertEquals(0, assignment0.getAbsolutePosition());
      assertEquals(-1, assignment0.getOperatorPosition());
      assertEquals(-1, assignment0.getLineno());
      assertEquals(-1, assignment0.getType());
      assertEquals(0, assignment0.getPosition());
      assertEquals("-1", assignment0.toString());
      assertEquals(0, assignment0.depth());
      assertFalse(boolean1);
      assertFalse(boolean0 == boolean1);
      assertFalse(boolean1 == boolean0);
  }

  @Test
  public void test18()  throws Throwable  {
      String string0 = "D";
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      byte byte0 = (byte) (-80);
      String string1 = "<<=";
      assertNotSame(string1, string0);
      
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream(string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(jsDocTokenStream0);
      assertNotSame(string1, string0);
      
      JsDocToken jsDocToken0 = jsDocTokenStream0.getJsDocToken();
      assertEquals(4, jsDocToken0.ordinal());
      assertEquals("STRING", jsDocToken0.toString());
      assertEquals("STRING", jsDocToken0.name());
      assertFalse(string1.equals((Object)string0));
      assertNotSame(string1, string0);
      
      ParenthesizedExpression parenthesizedExpression0 = new ParenthesizedExpression((int) byte0, (int) byte0);
      assertEquals(-80, parenthesizedExpression0.getPosition());
      assertEquals(-80, parenthesizedExpression0.getLength());
      assertEquals(false, parenthesizedExpression0.hasChildren());
      assertEquals(87, parenthesizedExpression0.getType());
      assertEquals(0, parenthesizedExpression0.depth());
      assertEquals(-1, parenthesizedExpression0.getLineno());
      assertEquals("87", parenthesizedExpression0.toString());
      assertEquals(-80, parenthesizedExpression0.getAbsolutePosition());
      assertNull(parenthesizedExpression0.getJsDoc());
      assertNotNull(parenthesizedExpression0);
      
      Comment comment0 = parenthesizedExpression0.getJsDocNode();
      assertEquals(-80, parenthesizedExpression0.getPosition());
      assertEquals(-80, parenthesizedExpression0.getLength());
      assertEquals(false, parenthesizedExpression0.hasChildren());
      assertEquals(87, parenthesizedExpression0.getType());
      assertEquals(0, parenthesizedExpression0.depth());
      assertEquals(-1, parenthesizedExpression0.getLineno());
      assertEquals("87", parenthesizedExpression0.toString());
      assertEquals(-80, parenthesizedExpression0.getAbsolutePosition());
      assertNull(parenthesizedExpression0.getJsDoc());
      assertNull(comment0);
      
      Charset charset0 = Charset.defaultCharset();
      assertEquals(true, charset0.isRegistered());
      assertEquals("UTF-8", charset0.toString());
      assertEquals("UTF-8", charset0.name());
      assertEquals("UTF-8", charset0.displayName());
      assertEquals(true, charset0.canEncode());
      assertNotNull(charset0);
      
      Set<String> set0 = charset0.aliases();
      assertEquals(true, charset0.isRegistered());
      assertEquals("UTF-8", charset0.toString());
      assertEquals("UTF-8", charset0.name());
      assertEquals("UTF-8", charset0.displayName());
      assertEquals(true, charset0.canEncode());
      assertEquals(false, set0.isEmpty());
      assertEquals(2, set0.size());
      assertNotNull(set0);
      
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5_STRICT;
      Config config0 = new Config(set0, set0, boolean0, config_LanguageMode0, boolean0);
      assertEquals(true, charset0.isRegistered());
      assertEquals("UTF-8", charset0.toString());
      assertEquals("UTF-8", charset0.name());
      assertEquals("UTF-8", charset0.displayName());
      assertEquals(true, charset0.canEncode());
      assertEquals(false, set0.isEmpty());
      assertEquals(2, set0.size());
      assertNotNull(config0);
      
      ToolErrorReporter toolErrorReporter0 = new ToolErrorReporter(boolean0);
      assertEquals(true, toolErrorReporter0.isReportingWarnings());
      assertEquals(false, toolErrorReporter0.hasReportedError());
      assertNotNull(toolErrorReporter0);
      
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, comment0, string0, config0, toolErrorReporter0);
      assertEquals(true, charset0.isRegistered());
      assertEquals("UTF-8", charset0.toString());
      assertEquals("UTF-8", charset0.name());
      assertEquals("UTF-8", charset0.displayName());
      assertEquals(true, charset0.canEncode());
      assertEquals(false, set0.isEmpty());
      assertEquals(2, set0.size());
      assertEquals(-80, parenthesizedExpression0.getPosition());
      assertEquals(-80, parenthesizedExpression0.getLength());
      assertEquals(false, parenthesizedExpression0.hasChildren());
      assertEquals(87, parenthesizedExpression0.getType());
      assertEquals(0, parenthesizedExpression0.depth());
      assertEquals(-1, parenthesizedExpression0.getLineno());
      assertEquals("87", parenthesizedExpression0.toString());
      assertEquals(-80, parenthesizedExpression0.getAbsolutePosition());
      assertNull(parenthesizedExpression0.getJsDoc());
      assertEquals(true, toolErrorReporter0.isReportingWarnings());
      assertEquals(false, toolErrorReporter0.hasReportedError());
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(jsDocInfoParser0);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      
      boolean boolean1 = jsDocInfoParser0.parse();
      assertEquals(true, charset0.isRegistered());
      assertEquals("UTF-8", charset0.toString());
      assertEquals("UTF-8", charset0.name());
      assertEquals("UTF-8", charset0.displayName());
      assertEquals(true, charset0.canEncode());
      assertEquals(false, set0.isEmpty());
      assertEquals(2, set0.size());
      assertEquals(-80, parenthesizedExpression0.getPosition());
      assertEquals(-80, parenthesizedExpression0.getLength());
      assertEquals(false, parenthesizedExpression0.hasChildren());
      assertEquals(87, parenthesizedExpression0.getType());
      assertEquals(0, parenthesizedExpression0.depth());
      assertEquals(-1, parenthesizedExpression0.getLineno());
      assertEquals("87", parenthesizedExpression0.toString());
      assertEquals(-80, parenthesizedExpression0.getAbsolutePosition());
      assertNull(parenthesizedExpression0.getJsDoc());
      assertEquals(true, toolErrorReporter0.isReportingWarnings());
      assertEquals(false, toolErrorReporter0.hasReportedError());
      assertFalse(boolean1);
      assertFalse(boolean0 == boolean1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertFalse(boolean1 == boolean0);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
  }

  @Test
  public void test19()  throws Throwable  {
      byte[] byteArray0 = new byte[26];
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      String string0 = "}N*/P{V_>~";
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream(string0);
      assertNotNull(jsDocTokenStream0);
      
      VariableDeclaration variableDeclaration0 = new VariableDeclaration((int) byteArray0[0]);
      assertEquals(false, variableDeclaration0.hasChildren());
      assertEquals(-1, variableDeclaration0.getLineno());
      assertEquals(0, variableDeclaration0.getAbsolutePosition());
      assertEquals(false, variableDeclaration0.isLet());
      assertEquals(122, variableDeclaration0.getType());
      assertEquals(false, variableDeclaration0.isConst());
      assertEquals(1, variableDeclaration0.getLength());
      assertEquals("122", variableDeclaration0.toString());
      assertNull(variableDeclaration0.getJsDoc());
      assertEquals(0, variableDeclaration0.getPosition());
      assertEquals(true, variableDeclaration0.isVar());
      assertEquals(0, variableDeclaration0.depth());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(variableDeclaration0);
      
      Comment comment0 = variableDeclaration0.getJsDocNode();
      assertEquals(false, variableDeclaration0.hasChildren());
      assertEquals(-1, variableDeclaration0.getLineno());
      assertEquals(0, variableDeclaration0.getAbsolutePosition());
      assertEquals(false, variableDeclaration0.isLet());
      assertEquals(122, variableDeclaration0.getType());
      assertEquals(false, variableDeclaration0.isConst());
      assertEquals(1, variableDeclaration0.getLength());
      assertEquals("122", variableDeclaration0.toString());
      assertNull(variableDeclaration0.getJsDoc());
      assertEquals(0, variableDeclaration0.getPosition());
      assertEquals(true, variableDeclaration0.isVar());
      assertEquals(0, variableDeclaration0.depth());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNull(comment0);
      
      TreeSet<String> treeSet0 = new TreeSet<String>();
      assertEquals("[]", treeSet0.toString());
      assertNotNull(treeSet0);
      
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5;
      Config config0 = new Config(treeSet0, treeSet0, boolean0, config_LanguageMode0, boolean0);
      assertEquals("[]", treeSet0.toString());
      assertNotNull(config0);
      
      ToolErrorReporter toolErrorReporter0 = new ToolErrorReporter(boolean0);
      assertEquals(true, toolErrorReporter0.isReportingWarnings());
      assertEquals(false, toolErrorReporter0.hasReportedError());
      assertNotNull(toolErrorReporter0);
      
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, comment0, string0, config0, toolErrorReporter0);
      assertEquals(true, toolErrorReporter0.isReportingWarnings());
      assertEquals(false, toolErrorReporter0.hasReportedError());
      assertEquals(false, variableDeclaration0.hasChildren());
      assertEquals(-1, variableDeclaration0.getLineno());
      assertEquals(0, variableDeclaration0.getAbsolutePosition());
      assertEquals(false, variableDeclaration0.isLet());
      assertEquals(122, variableDeclaration0.getType());
      assertEquals(false, variableDeclaration0.isConst());
      assertEquals(1, variableDeclaration0.getLength());
      assertEquals("122", variableDeclaration0.toString());
      assertNull(variableDeclaration0.getJsDoc());
      assertEquals(0, variableDeclaration0.getPosition());
      assertEquals(true, variableDeclaration0.isVar());
      assertEquals(0, variableDeclaration0.depth());
      assertEquals("[]", treeSet0.toString());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(jsDocInfoParser0);
      
      boolean boolean1 = jsDocInfoParser0.parse();
      assertEquals(true, toolErrorReporter0.isReportingWarnings());
      assertEquals(false, toolErrorReporter0.hasReportedError());
      assertEquals(false, variableDeclaration0.hasChildren());
      assertEquals(-1, variableDeclaration0.getLineno());
      assertEquals(0, variableDeclaration0.getAbsolutePosition());
      assertEquals(false, variableDeclaration0.isLet());
      assertEquals(122, variableDeclaration0.getType());
      assertEquals(false, variableDeclaration0.isConst());
      assertEquals(1, variableDeclaration0.getLength());
      assertEquals("122", variableDeclaration0.toString());
      assertNull(variableDeclaration0.getJsDoc());
      assertEquals(0, variableDeclaration0.getPosition());
      assertEquals(true, variableDeclaration0.isVar());
      assertEquals(0, variableDeclaration0.depth());
      assertEquals("[]", treeSet0.toString());
      assertTrue(boolean1);
      assertTrue(boolean0 == boolean1);
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
  }

  @Test
  public void test20()  throws Throwable  {
      String string0 = "{ ";
      int int0 = 0;
      RegExpLiteral regExpLiteral0 = new RegExpLiteral(int0, int0);
      assertEquals(0, regExpLiteral0.getPosition());
      assertEquals(false, regExpLiteral0.hasChildren());
      assertEquals("48", regExpLiteral0.toString());
      assertEquals(48, regExpLiteral0.getType());
      assertNull(regExpLiteral0.getFlags());
      assertEquals(0, regExpLiteral0.depth());
      assertEquals(0, regExpLiteral0.getLength());
      assertEquals(0, regExpLiteral0.getAbsolutePosition());
      assertNull(regExpLiteral0.getJsDoc());
      assertNull(regExpLiteral0.getValue());
      assertEquals(-1, regExpLiteral0.getLineno());
      assertNotNull(regExpLiteral0);
      
      Comment comment0 = regExpLiteral0.getJsDocNode();
      assertEquals(0, regExpLiteral0.getPosition());
      assertEquals(false, regExpLiteral0.hasChildren());
      assertEquals("48", regExpLiteral0.toString());
      assertEquals(48, regExpLiteral0.getType());
      assertNull(regExpLiteral0.getFlags());
      assertEquals(0, regExpLiteral0.depth());
      assertEquals(0, regExpLiteral0.getLength());
      assertEquals(0, regExpLiteral0.getAbsolutePosition());
      assertNull(regExpLiteral0.getJsDoc());
      assertNull(regExpLiteral0.getValue());
      assertEquals(-1, regExpLiteral0.getLineno());
      assertNull(comment0);
      
      TreeSet<String> treeSet0 = new TreeSet<String>();
      assertEquals("[]", treeSet0.toString());
      assertNotNull(treeSet0);
      
      String string1 = "?";
      assertNotSame(string1, string0);
      
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream(string1, int0, int0);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(jsDocTokenStream0);
      assertNotSame(string1, string0);
      
      boolean boolean0 = treeSet0.add(string0);
      assertEquals("[{ ]", treeSet0.toString());
      assertTrue(boolean0);
      assertFalse(string0.equals((Object)string1));
      assertNotSame(string0, string1);
      
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5_STRICT;
      Config config0 = new Config(treeSet0, treeSet0, boolean0, config_LanguageMode0, boolean0);
      assertEquals("[{ ]", treeSet0.toString());
      assertFalse(string0.equals((Object)string1));
      assertNotNull(config0);
      assertNotSame(string0, string1);
      
      ToolErrorReporter toolErrorReporter0 = new ToolErrorReporter(boolean0);
      assertEquals("[{ ]", treeSet0.toString());
      assertEquals(true, toolErrorReporter0.isReportingWarnings());
      assertEquals(false, toolErrorReporter0.hasReportedError());
      assertFalse(string0.equals((Object)string1));
      assertNotNull(toolErrorReporter0);
      assertNotSame(string0, string1);
      
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, comment0, string0, config0, toolErrorReporter0);
      assertEquals(0, regExpLiteral0.getPosition());
      assertEquals(false, regExpLiteral0.hasChildren());
      assertEquals("48", regExpLiteral0.toString());
      assertEquals(48, regExpLiteral0.getType());
      assertNull(regExpLiteral0.getFlags());
      assertEquals(0, regExpLiteral0.depth());
      assertEquals(0, regExpLiteral0.getLength());
      assertEquals(0, regExpLiteral0.getAbsolutePosition());
      assertNull(regExpLiteral0.getJsDoc());
      assertNull(regExpLiteral0.getValue());
      assertEquals(-1, regExpLiteral0.getLineno());
      assertEquals("[{ ]", treeSet0.toString());
      assertEquals(true, toolErrorReporter0.isReportingWarnings());
      assertEquals(false, toolErrorReporter0.hasReportedError());
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(jsDocInfoParser0);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      
      boolean boolean1 = jsDocInfoParser0.parse();
      assertEquals(0, regExpLiteral0.getPosition());
      assertEquals(false, regExpLiteral0.hasChildren());
      assertEquals("48", regExpLiteral0.toString());
      assertEquals(48, regExpLiteral0.getType());
      assertNull(regExpLiteral0.getFlags());
      assertEquals(0, regExpLiteral0.depth());
      assertEquals(0, regExpLiteral0.getLength());
      assertEquals(0, regExpLiteral0.getAbsolutePosition());
      assertNull(regExpLiteral0.getJsDoc());
      assertNull(regExpLiteral0.getValue());
      assertEquals(-1, regExpLiteral0.getLineno());
      assertEquals("[{ ]", treeSet0.toString());
      assertEquals(true, toolErrorReporter0.isReportingWarnings());
      assertEquals(false, toolErrorReporter0.hasReportedError());
      assertFalse(boolean1);
      assertFalse(boolean0 == boolean1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(boolean1 == boolean0);
      assertFalse(string1.equals((Object)string0));
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
  }

  @Test
  public void test21()  throws Throwable  {
      String string0 = "(Lorg/mozilla/javascript/Context;)Lorg/mozilla/javascript/RegExpProxy;";
      Node node0 = JsDocInfoParser.parseTypeString(string0);
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(0, node0.getLineno());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(1, node0.getCharno());
      assertEquals(false, node0.isVarArgs());
      assertEquals(1, node0.getChildCount());
      assertEquals(true, node0.hasChildren());
      assertEquals(301, node0.getType());
      assertEquals(1, node0.getSourcePosition());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(true, node0.hasOneChild());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isQuotedString());
      assertNotNull(node0);
      
      boolean boolean0 = node0.isUnscopedQualifiedName();
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(0, node0.getLineno());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(1, node0.getCharno());
      assertEquals(false, node0.isVarArgs());
      assertEquals(1, node0.getChildCount());
      assertEquals(true, node0.hasChildren());
      assertEquals(301, node0.getType());
      assertEquals(1, node0.getSourcePosition());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(true, node0.hasOneChild());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isQuotedString());
      assertFalse(boolean0);
      
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream(string0);
      assertNotNull(jsDocTokenStream0);
      
      XmlString xmlString0 = new XmlString();
      assertEquals(145, xmlString0.getType());
      assertEquals(1, xmlString0.getLength());
      assertEquals(false, xmlString0.hasChildren());
      assertEquals(-1, xmlString0.getAbsolutePosition());
      assertEquals(0, xmlString0.depth());
      assertEquals(-1, xmlString0.getLineno());
      assertNull(xmlString0.getXml());
      assertNull(xmlString0.getJsDoc());
      assertEquals(-1, xmlString0.getPosition());
      assertEquals("145", xmlString0.toString());
      assertNotNull(xmlString0);
      
      Comment comment0 = xmlString0.getJsDocNode();
      assertEquals(145, xmlString0.getType());
      assertEquals(1, xmlString0.getLength());
      assertEquals(false, xmlString0.hasChildren());
      assertEquals(-1, xmlString0.getAbsolutePosition());
      assertEquals(0, xmlString0.depth());
      assertEquals(-1, xmlString0.getLineno());
      assertNull(xmlString0.getXml());
      assertNull(xmlString0.getJsDoc());
      assertEquals(-1, xmlString0.getPosition());
      assertEquals("145", xmlString0.toString());
      assertNull(comment0);
      
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      assertEquals("", locale0.getVariant());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertNotNull(locale0);
      
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      assertEquals(0, set0.size());
      assertEquals(true, set0.isEmpty());
      assertEquals("", locale0.getVariant());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertNotNull(set0);
      
      boolean boolean1 = true;
      assertFalse(boolean1 == boolean0);
      
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT3;
      Config config0 = new Config(set0, set0, boolean1, config_LanguageMode0, boolean0);
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(0, node0.getLineno());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(1, node0.getCharno());
      assertEquals(false, node0.isVarArgs());
      assertEquals(1, node0.getChildCount());
      assertEquals(true, node0.hasChildren());
      assertEquals(301, node0.getType());
      assertEquals(1, node0.getSourcePosition());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(true, node0.hasOneChild());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isQuotedString());
      assertEquals(0, set0.size());
      assertEquals(true, set0.isEmpty());
      assertEquals("", locale0.getVariant());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertFalse(boolean0 == boolean1);
      assertFalse(boolean1 == boolean0);
      assertNotNull(config0);
      
      ToolErrorReporter toolErrorReporter0 = new ToolErrorReporter(boolean1);
      assertEquals(false, toolErrorReporter0.hasReportedError());
      assertEquals(true, toolErrorReporter0.isReportingWarnings());
      assertFalse(boolean1 == boolean0);
      assertNotNull(toolErrorReporter0);
      
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, comment0, string0, config0, toolErrorReporter0);
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(0, node0.getLineno());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(1, node0.getCharno());
      assertEquals(false, node0.isVarArgs());
      assertEquals(1, node0.getChildCount());
      assertEquals(true, node0.hasChildren());
      assertEquals(301, node0.getType());
      assertEquals(1, node0.getSourcePosition());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(true, node0.hasOneChild());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isQuotedString());
      assertEquals(145, xmlString0.getType());
      assertEquals(1, xmlString0.getLength());
      assertEquals(false, xmlString0.hasChildren());
      assertEquals(-1, xmlString0.getAbsolutePosition());
      assertEquals(0, xmlString0.depth());
      assertEquals(-1, xmlString0.getLineno());
      assertNull(xmlString0.getXml());
      assertNull(xmlString0.getJsDoc());
      assertEquals(-1, xmlString0.getPosition());
      assertEquals("145", xmlString0.toString());
      assertEquals(false, toolErrorReporter0.hasReportedError());
      assertEquals(true, toolErrorReporter0.isReportingWarnings());
      assertEquals(0, set0.size());
      assertEquals(true, set0.isEmpty());
      assertEquals("", locale0.getVariant());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertFalse(boolean0 == boolean1);
      assertFalse(boolean1 == boolean0);
      assertNotNull(jsDocInfoParser0);
      
      boolean boolean2 = jsDocInfoParser0.parse();
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(0, node0.getLineno());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(1, node0.getCharno());
      assertEquals(false, node0.isVarArgs());
      assertEquals(1, node0.getChildCount());
      assertEquals(true, node0.hasChildren());
      assertEquals(301, node0.getType());
      assertEquals(1, node0.getSourcePosition());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(true, node0.hasOneChild());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isQuotedString());
      assertEquals(145, xmlString0.getType());
      assertEquals(1, xmlString0.getLength());
      assertEquals(false, xmlString0.hasChildren());
      assertEquals(-1, xmlString0.getAbsolutePosition());
      assertEquals(0, xmlString0.depth());
      assertEquals(-1, xmlString0.getLineno());
      assertNull(xmlString0.getXml());
      assertNull(xmlString0.getJsDoc());
      assertEquals(-1, xmlString0.getPosition());
      assertEquals("145", xmlString0.toString());
      assertEquals(false, toolErrorReporter0.hasReportedError());
      assertEquals(true, toolErrorReporter0.isReportingWarnings());
      assertEquals(0, set0.size());
      assertEquals(true, set0.isEmpty());
      assertEquals("", locale0.getVariant());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertFalse(boolean2);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean0 == boolean1);
      assertTrue(boolean0 == boolean2);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1 == boolean2);
  }

  @Test
  public void test22()  throws Throwable  {
      String string0 = "{ ";
      int int0 = 0;
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream(string0, int0);
      assertNotNull(jsDocTokenStream0);
      
      RegExpLiteral regExpLiteral0 = new RegExpLiteral(int0, int0);
      assertEquals(false, regExpLiteral0.hasChildren());
      assertEquals("48", regExpLiteral0.toString());
      assertEquals(0, regExpLiteral0.getPosition());
      assertEquals(0, regExpLiteral0.depth());
      assertEquals(48, regExpLiteral0.getType());
      assertEquals(-1, regExpLiteral0.getLineno());
      assertNull(regExpLiteral0.getJsDoc());
      assertEquals(0, regExpLiteral0.getAbsolutePosition());
      assertNull(regExpLiteral0.getFlags());
      assertEquals(0, regExpLiteral0.getLength());
      assertNull(regExpLiteral0.getValue());
      assertNotNull(regExpLiteral0);
      
      Comment comment0 = regExpLiteral0.getJsDocNode();
      assertEquals(false, regExpLiteral0.hasChildren());
      assertEquals("48", regExpLiteral0.toString());
      assertEquals(0, regExpLiteral0.getPosition());
      assertEquals(0, regExpLiteral0.depth());
      assertEquals(48, regExpLiteral0.getType());
      assertEquals(-1, regExpLiteral0.getLineno());
      assertNull(regExpLiteral0.getJsDoc());
      assertEquals(0, regExpLiteral0.getAbsolutePosition());
      assertNull(regExpLiteral0.getFlags());
      assertEquals(0, regExpLiteral0.getLength());
      assertNull(regExpLiteral0.getValue());
      assertNull(comment0);
      
      TreeSet<String> treeSet0 = new TreeSet<String>();
      assertEquals("[]", treeSet0.toString());
      assertNotNull(treeSet0);
      
      boolean boolean0 = treeSet0.add(string0);
      assertEquals("[{ ]", treeSet0.toString());
      assertTrue(boolean0);
      
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5_STRICT;
      Config config0 = new Config(treeSet0, treeSet0, boolean0, config_LanguageMode0, boolean0);
      assertEquals("[{ ]", treeSet0.toString());
      assertNotNull(config0);
      
      ErrorCollector errorCollector0 = new ErrorCollector();
      assertNotNull(errorCollector0);
      
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, comment0, string0, config0, errorCollector0);
      assertEquals(false, regExpLiteral0.hasChildren());
      assertEquals("48", regExpLiteral0.toString());
      assertEquals(0, regExpLiteral0.getPosition());
      assertEquals(0, regExpLiteral0.depth());
      assertEquals(48, regExpLiteral0.getType());
      assertEquals(-1, regExpLiteral0.getLineno());
      assertNull(regExpLiteral0.getJsDoc());
      assertEquals(0, regExpLiteral0.getAbsolutePosition());
      assertNull(regExpLiteral0.getFlags());
      assertEquals(0, regExpLiteral0.getLength());
      assertNull(regExpLiteral0.getValue());
      assertEquals("[{ ]", treeSet0.toString());
      assertNotNull(jsDocInfoParser0);
      
      // Undeclared exception!
      try {
        boolean boolean1 = jsDocInfoParser0.parse();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test23() {}
//   @Test
//   public void test23()  throws Throwable  {
//       boolean boolean0 = true;
//       String string0 = "[w!0s0Kiw#\\Z";
//       int int0 = (-76);
//       JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream(string0, int0);
//       //  // Unstable assertion: assertNotNull(jsDocTokenStream0);
//       
//       XmlLiteral xmlLiteral0 = new XmlLiteral(int0, int0);
//       //  // Unstable assertion: assertEquals(-76, xmlLiteral0.getPosition());
//       //  // Unstable assertion: assertEquals(145, xmlLiteral0.getType());
//       //  // Unstable assertion: assertEquals("145", xmlLiteral0.toString());
//       //  // Unstable assertion: assertEquals(-1, xmlLiteral0.getLineno());
//       //  // Unstable assertion: assertNull(xmlLiteral0.getJsDoc());
//       //  // Unstable assertion: assertEquals(-76, xmlLiteral0.getAbsolutePosition());
//       //  // Unstable assertion: assertEquals(-76, xmlLiteral0.getLength());
//       //  // Unstable assertion: assertEquals(false, xmlLiteral0.hasChildren());
//       //  // Unstable assertion: assertEquals(0, xmlLiteral0.depth());
//       //  // Unstable assertion: assertNotNull(xmlLiteral0);
//       
//       Comment comment0 = xmlLiteral0.getJsDocNode();
//       //  // Unstable assertion: assertEquals(-76, xmlLiteral0.getPosition());
//       //  // Unstable assertion: assertEquals(145, xmlLiteral0.getType());
//       //  // Unstable assertion: assertEquals("145", xmlLiteral0.toString());
//       //  // Unstable assertion: assertEquals(-1, xmlLiteral0.getLineno());
//       //  // Unstable assertion: assertNull(xmlLiteral0.getJsDoc());
//       //  // Unstable assertion: assertEquals(-76, xmlLiteral0.getAbsolutePosition());
//       //  // Unstable assertion: assertEquals(-76, xmlLiteral0.getLength());
//       //  // Unstable assertion: assertEquals(false, xmlLiteral0.hasChildren());
//       //  // Unstable assertion: assertEquals(0, xmlLiteral0.depth());
//       //  // Unstable assertion: assertNull(comment0);
//       
//       LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
//       //  // Unstable assertion: assertEquals(0, linkedHashSet0.size());
//       //  // Unstable assertion: assertEquals("[]", linkedHashSet0.toString());
//       //  // Unstable assertion: assertEquals(true, linkedHashSet0.isEmpty());
//       //  // Unstable assertion: assertNotNull(linkedHashSet0);
//       
//       Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5_STRICT;
//       Config config0 = new Config(linkedHashSet0, linkedHashSet0, boolean0, config_LanguageMode0, boolean0);
//       //  // Unstable assertion: assertEquals(0, linkedHashSet0.size());
//       //  // Unstable assertion: assertEquals("[]", linkedHashSet0.toString());
//       //  // Unstable assertion: assertEquals(true, linkedHashSet0.isEmpty());
//       //  // Unstable assertion: assertNotNull(config0);
//       
//       ContextFactory contextFactory0 = ContextFactory.getGlobal();
//       //  // Unstable assertion: assertEquals(false, contextFactory0.hasExplicitGlobal());
//       //  // Unstable assertion: assertEquals(true, contextFactory0.isSealed());
//       //  // Unstable assertion: assertNotNull(contextFactory0);
//       
//       Context context0 = contextFactory0.enter();
//       //  // Unstable assertion: assertEquals(0, context0.getOptimizationLevel());
//       //  // Unstable assertion: assertEquals(2147483647, context0.getMaximumInterpreterStackDepth());
//       //  // Unstable assertion: assertEquals(false, context0.isSealed());
//       //  // Unstable assertion: assertEquals(0, context0.getLanguageVersion());
//       //  // Unstable assertion: assertEquals(false, context0.hasCompileFunctionsWithDynamicScope());
//       //  // Unstable assertion: assertEquals(true, context0.isGeneratingSource());
//       //  // Unstable assertion: assertEquals(false, context0.isGeneratingDebug());
//       //  // Unstable assertion: assertEquals(1144, context0.getInstructionObserverThreshold());
//       //  // Unstable assertion: assertEquals(false, context0.isGeneratingDebugChanged());
//       //  // Unstable assertion: assertEquals(false, contextFactory0.hasExplicitGlobal());
//       //  // Unstable assertion: assertEquals(true, contextFactory0.isSealed());
//       //  // Unstable assertion: assertFalse(context0.generateObserverCount);
//       //  // Unstable assertion: assertNotNull(context0);
//       
//       ErrorCollector errorCollector0 = (ErrorCollector)context0.getErrorReporter();
//       //  // Unstable assertion: assertEquals(0, context0.getOptimizationLevel());
//       //  // Unstable assertion: assertEquals(2147483647, context0.getMaximumInterpreterStackDepth());
//       //  // Unstable assertion: assertEquals(false, context0.isSealed());
//       //  // Unstable assertion: assertEquals(0, context0.getLanguageVersion());
//       //  // Unstable assertion: assertEquals(false, context0.hasCompileFunctionsWithDynamicScope());
//       //  // Unstable assertion: assertEquals(true, context0.isGeneratingSource());
//       //  // Unstable assertion: assertEquals(false, context0.isGeneratingDebug());
//       //  // Unstable assertion: assertEquals(1144, context0.getInstructionObserverThreshold());
//       //  // Unstable assertion: assertEquals(false, context0.isGeneratingDebugChanged());
//       //  // Unstable assertion: assertEquals(false, contextFactory0.hasExplicitGlobal());
//       //  // Unstable assertion: assertEquals(true, contextFactory0.isSealed());
//       //  // Unstable assertion: assertFalse(context0.generateObserverCount);
//       //  // Unstable assertion: assertNotNull(errorCollector0);
//       
//       JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, comment0, string0, config0, errorCollector0);
//       //  // Unstable assertion: assertEquals(0, linkedHashSet0.size());
//       //  // Unstable assertion: assertEquals("[]", linkedHashSet0.toString());
//       //  // Unstable assertion: assertEquals(true, linkedHashSet0.isEmpty());
//       //  // Unstable assertion: assertEquals(-76, xmlLiteral0.getPosition());
//       //  // Unstable assertion: assertEquals(145, xmlLiteral0.getType());
//       //  // Unstable assertion: assertEquals("145", xmlLiteral0.toString());
//       //  // Unstable assertion: assertEquals(-1, xmlLiteral0.getLineno());
//       //  // Unstable assertion: assertNull(xmlLiteral0.getJsDoc());
//       //  // Unstable assertion: assertEquals(-76, xmlLiteral0.getAbsolutePosition());
//       //  // Unstable assertion: assertEquals(-76, xmlLiteral0.getLength());
//       //  // Unstable assertion: assertEquals(false, xmlLiteral0.hasChildren());
//       //  // Unstable assertion: assertEquals(0, xmlLiteral0.depth());
//       //  // Unstable assertion: assertEquals(0, context0.getOptimizationLevel());
//       //  // Unstable assertion: assertEquals(2147483647, context0.getMaximumInterpreterStackDepth());
//       //  // Unstable assertion: assertEquals(false, context0.isSealed());
//       //  // Unstable assertion: assertEquals(0, context0.getLanguageVersion());
//       //  // Unstable assertion: assertEquals(false, context0.hasCompileFunctionsWithDynamicScope());
//       //  // Unstable assertion: assertEquals(true, context0.isGeneratingSource());
//       //  // Unstable assertion: assertEquals(false, context0.isGeneratingDebug());
//       //  // Unstable assertion: assertEquals(1144, context0.getInstructionObserverThreshold());
//       //  // Unstable assertion: assertEquals(false, context0.isGeneratingDebugChanged());
//       //  // Unstable assertion: assertEquals(false, contextFactory0.hasExplicitGlobal());
//       //  // Unstable assertion: assertEquals(true, contextFactory0.isSealed());
//       //  // Unstable assertion: assertFalse(context0.generateObserverCount);
//       //  // Unstable assertion: assertNotNull(jsDocInfoParser0);
//       
//       // Undeclared exception!
//       try {
//         boolean boolean1 = jsDocInfoParser0.parse();
//        //  fail("Expecting exception: UnsupportedOperationException");
//        // Unstable assertion
//       } catch(UnsupportedOperationException e) {
//          //
//          // no message in exception (getMessage() returned null)
//          //
//       }
//   }

  @Test
  public void test24()  throws Throwable  {
      TreeSet<String> treeSet0 = new TreeSet<String>();
      assertEquals("[]", treeSet0.toString());
      assertNotNull(treeSet0);
      
      boolean boolean0 = false;
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT3;
      ToolErrorReporter toolErrorReporter0 = new ToolErrorReporter(boolean0);
      assertEquals(false, toolErrorReporter0.hasReportedError());
      assertEquals(false, toolErrorReporter0.isReportingWarnings());
      assertNotNull(toolErrorReporter0);
      
      String string0 = "&Qb'*-lqo1opJ";
      int int0 = 0;
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream(string0, int0);
      assertNotNull(jsDocTokenStream0);
      
      Assignment assignment0 = new Assignment(int0);
      assertEquals(false, assignment0.hasChildren());
      assertEquals(0, assignment0.getPosition());
      assertEquals(0, assignment0.depth());
      assertNull(assignment0.getJsDoc());
      assertEquals(-1, assignment0.getLineno());
      assertEquals(1, assignment0.getLength());
      assertEquals("-1", assignment0.toString());
      assertEquals(0, assignment0.getAbsolutePosition());
      assertEquals(-1, assignment0.getType());
      assertEquals(-1, assignment0.getOperatorPosition());
      assertNotNull(assignment0);
      
      Comment comment0 = assignment0.getJsDocNode();
      assertEquals(false, assignment0.hasChildren());
      assertEquals(0, assignment0.getPosition());
      assertEquals(0, assignment0.depth());
      assertNull(assignment0.getJsDoc());
      assertEquals(-1, assignment0.getLineno());
      assertEquals(1, assignment0.getLength());
      assertEquals("-1", assignment0.toString());
      assertEquals(0, assignment0.getAbsolutePosition());
      assertEquals(-1, assignment0.getType());
      assertEquals(-1, assignment0.getOperatorPosition());
      assertNull(comment0);
      
      Config config0 = new Config(treeSet0, treeSet0, boolean0, config_LanguageMode0, boolean0);
      assertEquals("[]", treeSet0.toString());
      assertNotNull(config0);
      
      JsDocToken jsDocToken0 = jsDocTokenStream0.getJsDocToken();
      assertEquals("STRING", jsDocToken0.toString());
      assertEquals("STRING", jsDocToken0.name());
      assertEquals(4, jsDocToken0.ordinal());
      
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, comment0, string0, config0, toolErrorReporter0);
      assertEquals(false, assignment0.hasChildren());
      assertEquals(0, assignment0.getPosition());
      assertEquals(0, assignment0.depth());
      assertNull(assignment0.getJsDoc());
      assertEquals(-1, assignment0.getLineno());
      assertEquals(1, assignment0.getLength());
      assertEquals("-1", assignment0.toString());
      assertEquals(0, assignment0.getAbsolutePosition());
      assertEquals(-1, assignment0.getType());
      assertEquals(-1, assignment0.getOperatorPosition());
      assertEquals(false, toolErrorReporter0.hasReportedError());
      assertEquals(false, toolErrorReporter0.isReportingWarnings());
      assertEquals("[]", treeSet0.toString());
      assertNotNull(jsDocInfoParser0);
      
      boolean boolean1 = jsDocInfoParser0.parse();
      assertEquals(false, assignment0.hasChildren());
      assertEquals(0, assignment0.getPosition());
      assertEquals(0, assignment0.depth());
      assertNull(assignment0.getJsDoc());
      assertEquals(-1, assignment0.getLineno());
      assertEquals(1, assignment0.getLength());
      assertEquals("-1", assignment0.toString());
      assertEquals(0, assignment0.getAbsolutePosition());
      assertEquals(-1, assignment0.getType());
      assertEquals(-1, assignment0.getOperatorPosition());
      assertEquals(false, toolErrorReporter0.hasReportedError());
      assertEquals(false, toolErrorReporter0.isReportingWarnings());
      assertEquals("[]", treeSet0.toString());
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean0 == boolean1);
  }

  @Test
  public void test25()  throws Throwable  {
      TreeSet<String> treeSet0 = new TreeSet<String>();
      assertEquals("[]", treeSet0.toString());
      assertNotNull(treeSet0);
      
      boolean boolean0 = false;
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT3;
      ToolErrorReporter toolErrorReporter0 = new ToolErrorReporter(boolean0);
      assertEquals(false, toolErrorReporter0.hasReportedError());
      assertEquals(false, toolErrorReporter0.isReportingWarnings());
      assertNotNull(toolErrorReporter0);
      
      String string0 = "&Qb'*-lqo1opJ";
      int int0 = 0;
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream(string0, int0);
      assertNotNull(jsDocTokenStream0);
      
      Assignment assignment0 = new Assignment(int0);
      assertEquals(-1, assignment0.getLineno());
      assertEquals(-1, assignment0.getOperatorPosition());
      assertEquals(false, assignment0.hasChildren());
      assertEquals(-1, assignment0.getType());
      assertEquals(0, assignment0.getAbsolutePosition());
      assertEquals("-1", assignment0.toString());
      assertEquals(0, assignment0.depth());
      assertEquals(1, assignment0.getLength());
      assertEquals(0, assignment0.getPosition());
      assertNull(assignment0.getJsDoc());
      assertNotNull(assignment0);
      
      Comment comment0 = assignment0.getJsDocNode();
      assertEquals(-1, assignment0.getLineno());
      assertEquals(-1, assignment0.getOperatorPosition());
      assertEquals(false, assignment0.hasChildren());
      assertEquals(-1, assignment0.getType());
      assertEquals(0, assignment0.getAbsolutePosition());
      assertEquals("-1", assignment0.toString());
      assertEquals(0, assignment0.depth());
      assertEquals(1, assignment0.getLength());
      assertEquals(0, assignment0.getPosition());
      assertNull(assignment0.getJsDoc());
      assertNull(comment0);
      
      Config config0 = new Config(treeSet0, treeSet0, boolean0, config_LanguageMode0, boolean0);
      assertEquals("[]", treeSet0.toString());
      assertNotNull(config0);
      
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, comment0, string0, config0, toolErrorReporter0);
      assertEquals(false, toolErrorReporter0.hasReportedError());
      assertEquals(false, toolErrorReporter0.isReportingWarnings());
      assertEquals(-1, assignment0.getLineno());
      assertEquals(-1, assignment0.getOperatorPosition());
      assertEquals(false, assignment0.hasChildren());
      assertEquals(-1, assignment0.getType());
      assertEquals(0, assignment0.getAbsolutePosition());
      assertEquals("-1", assignment0.toString());
      assertEquals(0, assignment0.depth());
      assertEquals(1, assignment0.getLength());
      assertEquals(0, assignment0.getPosition());
      assertNull(assignment0.getJsDoc());
      assertEquals("[]", treeSet0.toString());
      assertNotNull(jsDocInfoParser0);
      
      boolean boolean1 = jsDocInfoParser0.parse();
      assertEquals(false, toolErrorReporter0.hasReportedError());
      assertEquals(false, toolErrorReporter0.isReportingWarnings());
      assertEquals(-1, assignment0.getLineno());
      assertEquals(-1, assignment0.getOperatorPosition());
      assertEquals(false, assignment0.hasChildren());
      assertEquals(-1, assignment0.getType());
      assertEquals(0, assignment0.getAbsolutePosition());
      assertEquals("-1", assignment0.toString());
      assertEquals(0, assignment0.depth());
      assertEquals(1, assignment0.getLength());
      assertEquals(0, assignment0.getPosition());
      assertNull(assignment0.getJsDoc());
      assertEquals("[]", treeSet0.toString());
      assertFalse(boolean1);
      assertTrue(boolean0 == boolean1);
      assertTrue(boolean1 == boolean0);
  }

  @Test
  public void test26()  throws Throwable  {
      String string0 = "@PG@TgG&djPqXA";
      int int0 = 131;
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream(string0, int0, int0);
      assertNotNull(jsDocTokenStream0);
      
      VariableDeclaration variableDeclaration0 = new VariableDeclaration(int0, int0);
      assertEquals(false, variableDeclaration0.hasChildren());
      assertEquals("122", variableDeclaration0.toString());
      assertEquals(false, variableDeclaration0.isConst());
      assertEquals(true, variableDeclaration0.isVar());
      assertEquals(false, variableDeclaration0.isLet());
      assertEquals(131, variableDeclaration0.getLength());
      assertEquals(0, variableDeclaration0.depth());
      assertEquals(131, variableDeclaration0.getAbsolutePosition());
      assertEquals(122, variableDeclaration0.getType());
      assertNull(variableDeclaration0.getJsDoc());
      assertEquals(-1, variableDeclaration0.getLineno());
      assertEquals(131, variableDeclaration0.getPosition());
      assertNotNull(variableDeclaration0);
      
      Comment comment0 = variableDeclaration0.getJsDocNode();
      assertEquals(false, variableDeclaration0.hasChildren());
      assertEquals("122", variableDeclaration0.toString());
      assertEquals(false, variableDeclaration0.isConst());
      assertEquals(true, variableDeclaration0.isVar());
      assertEquals(false, variableDeclaration0.isLet());
      assertEquals(131, variableDeclaration0.getLength());
      assertEquals(0, variableDeclaration0.depth());
      assertEquals(131, variableDeclaration0.getAbsolutePosition());
      assertEquals(122, variableDeclaration0.getType());
      assertNull(variableDeclaration0.getJsDoc());
      assertEquals(-1, variableDeclaration0.getLineno());
      assertEquals(131, variableDeclaration0.getPosition());
      assertNull(comment0);
      
      EvoSuiteFile evoSuiteFile0 = null;
      boolean boolean0 = FileSystemHandling.createFolder(evoSuiteFile0);
      assertFalse(boolean0);
      
      TreeSet<String> treeSet0 = new TreeSet<String>();
      assertEquals("[]", treeSet0.toString());
      assertNotNull(treeSet0);
      
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5_STRICT;
      ToolErrorReporter toolErrorReporter0 = new ToolErrorReporter(boolean0);
      assertEquals(false, toolErrorReporter0.hasReportedError());
      assertEquals(false, toolErrorReporter0.isReportingWarnings());
      assertNotNull(toolErrorReporter0);
      
      boolean boolean1 = true;
      assertFalse(boolean1 == boolean0);
      
      Config config0 = new Config(treeSet0, treeSet0, boolean1, config_LanguageMode0, boolean0);
      assertEquals("[]", treeSet0.toString());
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean0 == boolean1);
      assertNotNull(config0);
      
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, comment0, string0, config0, toolErrorReporter0);
      assertEquals("[]", treeSet0.toString());
      assertEquals(false, toolErrorReporter0.hasReportedError());
      assertEquals(false, toolErrorReporter0.isReportingWarnings());
      assertEquals(false, variableDeclaration0.hasChildren());
      assertEquals("122", variableDeclaration0.toString());
      assertEquals(false, variableDeclaration0.isConst());
      assertEquals(true, variableDeclaration0.isVar());
      assertEquals(false, variableDeclaration0.isLet());
      assertEquals(131, variableDeclaration0.getLength());
      assertEquals(0, variableDeclaration0.depth());
      assertEquals(131, variableDeclaration0.getAbsolutePosition());
      assertEquals(122, variableDeclaration0.getType());
      assertNull(variableDeclaration0.getJsDoc());
      assertEquals(-1, variableDeclaration0.getLineno());
      assertEquals(131, variableDeclaration0.getPosition());
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean0 == boolean1);
      assertNotNull(jsDocInfoParser0);
      
      boolean boolean2 = jsDocInfoParser0.parse();
      assertEquals("[]", treeSet0.toString());
      assertEquals(false, toolErrorReporter0.hasReportedError());
      assertEquals(false, toolErrorReporter0.isReportingWarnings());
      assertEquals(false, variableDeclaration0.hasChildren());
      assertEquals("122", variableDeclaration0.toString());
      assertEquals(false, variableDeclaration0.isConst());
      assertEquals(true, variableDeclaration0.isVar());
      assertEquals(false, variableDeclaration0.isLet());
      assertEquals(131, variableDeclaration0.getLength());
      assertEquals(0, variableDeclaration0.depth());
      assertEquals(131, variableDeclaration0.getAbsolutePosition());
      assertEquals(122, variableDeclaration0.getType());
      assertNull(variableDeclaration0.getJsDoc());
      assertEquals(-1, variableDeclaration0.getLineno());
      assertEquals(131, variableDeclaration0.getPosition());
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean1 == boolean2);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean0 == boolean2);
      assertFalse(boolean0 == boolean1);
  }

  @Test
  public void test27()  throws Throwable  {
      String string0 = "$K/2I )8Zn\"";
      boolean boolean0 = true;
      int int0 = (-1351);
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream(string0, int0);
      assertNotNull(jsDocTokenStream0);
      
      Token.CommentType token_CommentType0 = Token.CommentType.BLOCK;
      Comment comment0 = new Comment(int0, int0, token_CommentType0, string0);
      assertEquals(Token.CommentType.BLOCK, comment0.getCommentType());
      assertEquals(0, comment0.depth());
      assertEquals(161, comment0.getType());
      assertEquals("$K/2I )8Zn\"", comment0.getValue());
      assertEquals(-1351, comment0.getAbsolutePosition());
      assertEquals(-1, comment0.getLineno());
      assertEquals(false, comment0.hasChildren());
      assertEquals("161", comment0.toString());
      assertEquals(-1351, comment0.getLength());
      assertNull(comment0.getJsDoc());
      assertEquals(-1351, comment0.getPosition());
      assertEquals(false, comment0.isParsed());
      assertNotNull(comment0);
      
      Locale locale0 = Locale.UK;
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en", locale0.getLanguage());
      assertEquals("GB", locale0.getCountry());
      assertEquals("GBR", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("en_GB", locale0.toString());
      assertNotNull(locale0);
      
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en", locale0.getLanguage());
      assertEquals("GB", locale0.getCountry());
      assertEquals("GBR", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("en_GB", locale0.toString());
      assertEquals(0, set0.size());
      assertEquals(true, set0.isEmpty());
      assertNotNull(set0);
      
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5;
      Config config0 = new Config(set0, set0, boolean0, config_LanguageMode0, boolean0);
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en", locale0.getLanguage());
      assertEquals("GB", locale0.getCountry());
      assertEquals("GBR", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("en_GB", locale0.toString());
      assertEquals(0, set0.size());
      assertEquals(true, set0.isEmpty());
      assertNotNull(config0);
      
      ToolErrorReporter toolErrorReporter0 = new ToolErrorReporter(boolean0);
      assertEquals(false, toolErrorReporter0.hasReportedError());
      assertEquals(true, toolErrorReporter0.isReportingWarnings());
      assertNotNull(toolErrorReporter0);
      
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, comment0, string0, config0, toolErrorReporter0);
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en", locale0.getLanguage());
      assertEquals("GB", locale0.getCountry());
      assertEquals("GBR", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("en_GB", locale0.toString());
      assertEquals(0, set0.size());
      assertEquals(true, set0.isEmpty());
      assertEquals(Token.CommentType.BLOCK, comment0.getCommentType());
      assertEquals(0, comment0.depth());
      assertEquals(161, comment0.getType());
      assertEquals("$K/2I )8Zn\"", comment0.getValue());
      assertEquals(-1351, comment0.getAbsolutePosition());
      assertEquals(-1, comment0.getLineno());
      assertEquals(false, comment0.hasChildren());
      assertEquals("161", comment0.toString());
      assertEquals(-1351, comment0.getLength());
      assertNull(comment0.getJsDoc());
      assertEquals(-1351, comment0.getPosition());
      assertEquals(false, comment0.isParsed());
      assertEquals(false, toolErrorReporter0.hasReportedError());
      assertEquals(true, toolErrorReporter0.isReportingWarnings());
      assertNotNull(jsDocInfoParser0);
  }

  @Test
  public void test28()  throws Throwable  {
      String string0 = "com.google.javascript.rhino.jstype.JSType";
      int int0 = (-4);
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream(string0, int0);
      assertNotNull(jsDocTokenStream0);
      
      VariableInitializer variableInitializer0 = new VariableInitializer(int0, int0);
      assertEquals(false, variableInitializer0.hasChildren());
      assertEquals(true, variableInitializer0.isDestructuring());
      assertEquals("122", variableInitializer0.toString());
      assertEquals(122, variableInitializer0.getType());
      assertNull(variableInitializer0.getJsDoc());
      assertEquals(-4, variableInitializer0.getLength());
      assertEquals(-4, variableInitializer0.getAbsolutePosition());
      assertEquals(-4, variableInitializer0.getPosition());
      assertEquals(0, variableInitializer0.depth());
      assertEquals(-1, variableInitializer0.getLineno());
      assertNotNull(variableInitializer0);
      
      Comment comment0 = variableInitializer0.getJsDocNode();
      assertEquals(false, variableInitializer0.hasChildren());
      assertEquals(true, variableInitializer0.isDestructuring());
      assertEquals("122", variableInitializer0.toString());
      assertEquals(122, variableInitializer0.getType());
      assertNull(variableInitializer0.getJsDoc());
      assertEquals(-4, variableInitializer0.getLength());
      assertEquals(-4, variableInitializer0.getAbsolutePosition());
      assertEquals(-4, variableInitializer0.getPosition());
      assertEquals(0, variableInitializer0.depth());
      assertEquals(-1, variableInitializer0.getLineno());
      assertNull(comment0);
      
      Locale locale0 = Locale.US;
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("en_US", locale0.toString());
      assertEquals("USA", locale0.getISO3Country());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("US", locale0.getCountry());
      assertNotNull(locale0);
      
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("en_US", locale0.toString());
      assertEquals("USA", locale0.getISO3Country());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("US", locale0.getCountry());
      assertEquals(0, set0.size());
      assertEquals(true, set0.isEmpty());
      assertNotNull(set0);
      
      boolean boolean0 = true;
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5;
      Config config0 = new Config(set0, set0, boolean0, config_LanguageMode0, boolean0);
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("en_US", locale0.toString());
      assertEquals("USA", locale0.getISO3Country());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("US", locale0.getCountry());
      assertEquals(0, set0.size());
      assertEquals(true, set0.isEmpty());
      assertNotNull(config0);
      
      ToolErrorReporter toolErrorReporter0 = new ToolErrorReporter(boolean0);
      assertEquals(false, toolErrorReporter0.hasReportedError());
      assertEquals(true, toolErrorReporter0.isReportingWarnings());
      assertNotNull(toolErrorReporter0);
      
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, comment0, string0, config0, toolErrorReporter0);
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("en_US", locale0.toString());
      assertEquals("USA", locale0.getISO3Country());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("US", locale0.getCountry());
      assertEquals(0, set0.size());
      assertEquals(true, set0.isEmpty());
      assertEquals(false, toolErrorReporter0.hasReportedError());
      assertEquals(true, toolErrorReporter0.isReportingWarnings());
      assertEquals(false, variableInitializer0.hasChildren());
      assertEquals(true, variableInitializer0.isDestructuring());
      assertEquals("122", variableInitializer0.toString());
      assertEquals(122, variableInitializer0.getType());
      assertNull(variableInitializer0.getJsDoc());
      assertEquals(-4, variableInitializer0.getLength());
      assertEquals(-4, variableInitializer0.getAbsolutePosition());
      assertEquals(-4, variableInitializer0.getPosition());
      assertEquals(0, variableInitializer0.depth());
      assertEquals(-1, variableInitializer0.getLineno());
      assertNotNull(jsDocInfoParser0);
      
      JSDocInfo jSDocInfo0 = jsDocInfoParser0.getFileOverviewJSDocInfo();
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("en_US", locale0.toString());
      assertEquals("USA", locale0.getISO3Country());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("US", locale0.getCountry());
      assertEquals(0, set0.size());
      assertEquals(true, set0.isEmpty());
      assertEquals(false, toolErrorReporter0.hasReportedError());
      assertEquals(true, toolErrorReporter0.isReportingWarnings());
      assertEquals(false, variableInitializer0.hasChildren());
      assertEquals(true, variableInitializer0.isDestructuring());
      assertEquals("122", variableInitializer0.toString());
      assertEquals(122, variableInitializer0.getType());
      assertNull(variableInitializer0.getJsDoc());
      assertEquals(-4, variableInitializer0.getLength());
      assertEquals(-4, variableInitializer0.getAbsolutePosition());
      assertEquals(-4, variableInitializer0.getPosition());
      assertEquals(0, variableInitializer0.depth());
      assertEquals(-1, variableInitializer0.getLineno());
      assertNull(jSDocInfo0);
      
      jsDocInfoParser0.setFileOverviewJSDocInfo(jSDocInfo0);
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("en_US", locale0.toString());
      assertEquals("USA", locale0.getISO3Country());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("US", locale0.getCountry());
      assertEquals(0, set0.size());
      assertEquals(true, set0.isEmpty());
      assertEquals(false, toolErrorReporter0.hasReportedError());
      assertEquals(true, toolErrorReporter0.isReportingWarnings());
      assertEquals(false, variableInitializer0.hasChildren());
      assertEquals(true, variableInitializer0.isDestructuring());
      assertEquals("122", variableInitializer0.toString());
      assertEquals(122, variableInitializer0.getType());
      assertNull(variableInitializer0.getJsDoc());
      assertEquals(-4, variableInitializer0.getLength());
      assertEquals(-4, variableInitializer0.getAbsolutePosition());
      assertEquals(-4, variableInitializer0.getPosition());
      assertEquals(0, variableInitializer0.depth());
      assertEquals(-1, variableInitializer0.getLineno());
  }

  @Test
  public void test29()  throws Throwable  {
      String string0 = "f`|>STrhER5;kRn<";
      Node node0 = JsDocInfoParser.parseTypeString(string0);
      assertNull(node0);
  }

  @Test
  public void test30()  throws Throwable  {
      String string0 = "@PG@TgG&djPqXA";
      int int0 = 131;
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream(string0, int0, int0);
      assertNotNull(jsDocTokenStream0);
      
      VariableDeclaration variableDeclaration0 = new VariableDeclaration(int0, int0);
      assertNull(variableDeclaration0.getJsDoc());
      assertEquals(131, variableDeclaration0.getLength());
      assertEquals(true, variableDeclaration0.isVar());
      assertEquals(false, variableDeclaration0.isLet());
      assertEquals("122", variableDeclaration0.toString());
      assertEquals(-1, variableDeclaration0.getLineno());
      assertEquals(false, variableDeclaration0.isConst());
      assertEquals(false, variableDeclaration0.hasChildren());
      assertEquals(131, variableDeclaration0.getPosition());
      assertEquals(0, variableDeclaration0.depth());
      assertEquals(131, variableDeclaration0.getAbsolutePosition());
      assertEquals(122, variableDeclaration0.getType());
      assertNotNull(variableDeclaration0);
      
      Comment comment0 = variableDeclaration0.getJsDocNode();
      assertNull(variableDeclaration0.getJsDoc());
      assertEquals(131, variableDeclaration0.getLength());
      assertEquals(true, variableDeclaration0.isVar());
      assertEquals(false, variableDeclaration0.isLet());
      assertEquals("122", variableDeclaration0.toString());
      assertEquals(-1, variableDeclaration0.getLineno());
      assertEquals(false, variableDeclaration0.isConst());
      assertEquals(false, variableDeclaration0.hasChildren());
      assertEquals(131, variableDeclaration0.getPosition());
      assertEquals(0, variableDeclaration0.depth());
      assertEquals(131, variableDeclaration0.getAbsolutePosition());
      assertEquals(122, variableDeclaration0.getType());
      assertNull(comment0);
      
      EvoSuiteFile evoSuiteFile0 = null;
      boolean boolean0 = FileSystemHandling.createFolder(evoSuiteFile0);
      assertFalse(boolean0);
      
      TreeSet<String> treeSet0 = new TreeSet<String>();
      assertEquals("[]", treeSet0.toString());
      assertNotNull(treeSet0);
      
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5_STRICT;
      Config config0 = new Config(treeSet0, treeSet0, boolean0, config_LanguageMode0, boolean0);
      assertEquals("[]", treeSet0.toString());
      assertNotNull(config0);
      
      ToolErrorReporter toolErrorReporter0 = new ToolErrorReporter(boolean0);
      assertEquals(false, toolErrorReporter0.hasReportedError());
      assertEquals(false, toolErrorReporter0.isReportingWarnings());
      assertNotNull(toolErrorReporter0);
      
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, comment0, string0, config0, toolErrorReporter0);
      assertEquals(false, toolErrorReporter0.hasReportedError());
      assertEquals(false, toolErrorReporter0.isReportingWarnings());
      assertEquals("[]", treeSet0.toString());
      assertNull(variableDeclaration0.getJsDoc());
      assertEquals(131, variableDeclaration0.getLength());
      assertEquals(true, variableDeclaration0.isVar());
      assertEquals(false, variableDeclaration0.isLet());
      assertEquals("122", variableDeclaration0.toString());
      assertEquals(-1, variableDeclaration0.getLineno());
      assertEquals(false, variableDeclaration0.isConst());
      assertEquals(false, variableDeclaration0.hasChildren());
      assertEquals(131, variableDeclaration0.getPosition());
      assertEquals(0, variableDeclaration0.depth());
      assertEquals(131, variableDeclaration0.getAbsolutePosition());
      assertEquals(122, variableDeclaration0.getType());
      assertNotNull(jsDocInfoParser0);
      
      Node.FileLevelJsDocBuilder node_FileLevelJsDocBuilder0 = null;
      jsDocInfoParser0.setFileLevelJsDocBuilder(node_FileLevelJsDocBuilder0);
      assertEquals(false, toolErrorReporter0.hasReportedError());
      assertEquals(false, toolErrorReporter0.isReportingWarnings());
      assertEquals("[]", treeSet0.toString());
      assertNull(variableDeclaration0.getJsDoc());
      assertEquals(131, variableDeclaration0.getLength());
      assertEquals(true, variableDeclaration0.isVar());
      assertEquals(false, variableDeclaration0.isLet());
      assertEquals("122", variableDeclaration0.toString());
      assertEquals(-1, variableDeclaration0.getLineno());
      assertEquals(false, variableDeclaration0.isConst());
      assertEquals(false, variableDeclaration0.hasChildren());
      assertEquals(131, variableDeclaration0.getPosition());
      assertEquals(0, variableDeclaration0.depth());
      assertEquals(131, variableDeclaration0.getAbsolutePosition());
      assertEquals(122, variableDeclaration0.getType());
  }

  @Test
  public void test31()  throws Throwable  {
      String string0 = "@PG@TgG&djPqXA";
      int int0 = 131;
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream(string0, int0, int0);
      assertNotNull(jsDocTokenStream0);
      
      VariableDeclaration variableDeclaration0 = new VariableDeclaration(int0, int0);
      assertEquals(131, variableDeclaration0.getAbsolutePosition());
      assertEquals(131, variableDeclaration0.getPosition());
      assertEquals(true, variableDeclaration0.isVar());
      assertEquals(131, variableDeclaration0.getLength());
      assertEquals(0, variableDeclaration0.depth());
      assertEquals(-1, variableDeclaration0.getLineno());
      assertEquals(false, variableDeclaration0.hasChildren());
      assertEquals(false, variableDeclaration0.isLet());
      assertEquals("122", variableDeclaration0.toString());
      assertEquals(false, variableDeclaration0.isConst());
      assertNull(variableDeclaration0.getJsDoc());
      assertEquals(122, variableDeclaration0.getType());
      assertNotNull(variableDeclaration0);
      
      Comment comment0 = variableDeclaration0.getJsDocNode();
      assertEquals(131, variableDeclaration0.getAbsolutePosition());
      assertEquals(131, variableDeclaration0.getPosition());
      assertEquals(true, variableDeclaration0.isVar());
      assertEquals(131, variableDeclaration0.getLength());
      assertEquals(0, variableDeclaration0.depth());
      assertEquals(-1, variableDeclaration0.getLineno());
      assertEquals(false, variableDeclaration0.hasChildren());
      assertEquals(false, variableDeclaration0.isLet());
      assertEquals("122", variableDeclaration0.toString());
      assertEquals(false, variableDeclaration0.isConst());
      assertNull(variableDeclaration0.getJsDoc());
      assertEquals(122, variableDeclaration0.getType());
      assertNull(comment0);
      
      EvoSuiteFile evoSuiteFile0 = null;
      boolean boolean0 = FileSystemHandling.createFolder(evoSuiteFile0);
      assertFalse(boolean0);
      
      TreeSet<String> treeSet0 = new TreeSet<String>();
      assertEquals("[]", treeSet0.toString());
      assertNotNull(treeSet0);
      
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5_STRICT;
      Config config0 = new Config(treeSet0, treeSet0, boolean0, config_LanguageMode0, boolean0);
      assertEquals("[]", treeSet0.toString());
      assertNotNull(config0);
      
      ToolErrorReporter toolErrorReporter0 = new ToolErrorReporter(boolean0);
      assertEquals(false, toolErrorReporter0.isReportingWarnings());
      assertEquals(false, toolErrorReporter0.hasReportedError());
      assertNotNull(toolErrorReporter0);
      
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, comment0, string0, config0, toolErrorReporter0);
      assertEquals(131, variableDeclaration0.getAbsolutePosition());
      assertEquals(131, variableDeclaration0.getPosition());
      assertEquals(true, variableDeclaration0.isVar());
      assertEquals(131, variableDeclaration0.getLength());
      assertEquals(0, variableDeclaration0.depth());
      assertEquals(-1, variableDeclaration0.getLineno());
      assertEquals(false, variableDeclaration0.hasChildren());
      assertEquals(false, variableDeclaration0.isLet());
      assertEquals("122", variableDeclaration0.toString());
      assertEquals(false, variableDeclaration0.isConst());
      assertNull(variableDeclaration0.getJsDoc());
      assertEquals(122, variableDeclaration0.getType());
      assertEquals("[]", treeSet0.toString());
      assertEquals(false, toolErrorReporter0.isReportingWarnings());
      assertEquals(false, toolErrorReporter0.hasReportedError());
      assertNotNull(jsDocInfoParser0);
      
      boolean boolean1 = jsDocInfoParser0.hasParsedJSDocInfo();
      assertEquals(131, variableDeclaration0.getAbsolutePosition());
      assertEquals(131, variableDeclaration0.getPosition());
      assertEquals(true, variableDeclaration0.isVar());
      assertEquals(131, variableDeclaration0.getLength());
      assertEquals(0, variableDeclaration0.depth());
      assertEquals(-1, variableDeclaration0.getLineno());
      assertEquals(false, variableDeclaration0.hasChildren());
      assertEquals(false, variableDeclaration0.isLet());
      assertEquals("122", variableDeclaration0.toString());
      assertEquals(false, variableDeclaration0.isConst());
      assertNull(variableDeclaration0.getJsDoc());
      assertEquals(122, variableDeclaration0.getType());
      assertEquals("[]", treeSet0.toString());
      assertEquals(false, toolErrorReporter0.isReportingWarnings());
      assertEquals(false, toolErrorReporter0.hasReportedError());
      assertFalse(boolean1);
      assertTrue(boolean0 == boolean1);
      assertTrue(boolean1 == boolean0);
  }

  @Test
  public void test32()  throws Throwable  {
      String string0 = "@PG@TgG&djPqXA";
      int int0 = 131;
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream(string0, int0, int0);
      assertNotNull(jsDocTokenStream0);
      
      VariableDeclaration variableDeclaration0 = new VariableDeclaration(int0, int0);
      assertEquals(131, variableDeclaration0.getAbsolutePosition());
      assertEquals(false, variableDeclaration0.isLet());
      assertEquals(-1, variableDeclaration0.getLineno());
      assertEquals(0, variableDeclaration0.depth());
      assertEquals(131, variableDeclaration0.getLength());
      assertEquals(false, variableDeclaration0.hasChildren());
      assertEquals(true, variableDeclaration0.isVar());
      assertEquals("122", variableDeclaration0.toString());
      assertEquals(false, variableDeclaration0.isConst());
      assertNull(variableDeclaration0.getJsDoc());
      assertEquals(131, variableDeclaration0.getPosition());
      assertEquals(122, variableDeclaration0.getType());
      assertNotNull(variableDeclaration0);
      
      Comment comment0 = variableDeclaration0.getJsDocNode();
      assertEquals(131, variableDeclaration0.getAbsolutePosition());
      assertEquals(false, variableDeclaration0.isLet());
      assertEquals(-1, variableDeclaration0.getLineno());
      assertEquals(0, variableDeclaration0.depth());
      assertEquals(131, variableDeclaration0.getLength());
      assertEquals(false, variableDeclaration0.hasChildren());
      assertEquals(true, variableDeclaration0.isVar());
      assertEquals("122", variableDeclaration0.toString());
      assertEquals(false, variableDeclaration0.isConst());
      assertNull(variableDeclaration0.getJsDoc());
      assertEquals(131, variableDeclaration0.getPosition());
      assertEquals(122, variableDeclaration0.getType());
      assertNull(comment0);
      
      EvoSuiteFile evoSuiteFile0 = null;
      boolean boolean0 = FileSystemHandling.createFolder(evoSuiteFile0);
      assertFalse(boolean0);
      
      TreeSet<String> treeSet0 = new TreeSet<String>();
      assertEquals("[]", treeSet0.toString());
      assertNotNull(treeSet0);
      
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5_STRICT;
      Config config0 = new Config(treeSet0, treeSet0, boolean0, config_LanguageMode0, boolean0);
      assertEquals("[]", treeSet0.toString());
      assertNotNull(config0);
      
      ToolErrorReporter toolErrorReporter0 = new ToolErrorReporter(boolean0);
      assertEquals(false, toolErrorReporter0.isReportingWarnings());
      assertEquals(false, toolErrorReporter0.hasReportedError());
      assertNotNull(toolErrorReporter0);
      
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, comment0, string0, config0, toolErrorReporter0);
      assertEquals(false, toolErrorReporter0.isReportingWarnings());
      assertEquals(false, toolErrorReporter0.hasReportedError());
      assertEquals("[]", treeSet0.toString());
      assertEquals(131, variableDeclaration0.getAbsolutePosition());
      assertEquals(false, variableDeclaration0.isLet());
      assertEquals(-1, variableDeclaration0.getLineno());
      assertEquals(0, variableDeclaration0.depth());
      assertEquals(131, variableDeclaration0.getLength());
      assertEquals(false, variableDeclaration0.hasChildren());
      assertEquals(true, variableDeclaration0.isVar());
      assertEquals("122", variableDeclaration0.toString());
      assertEquals(false, variableDeclaration0.isConst());
      assertNull(variableDeclaration0.getJsDoc());
      assertEquals(131, variableDeclaration0.getPosition());
      assertEquals(122, variableDeclaration0.getType());
      assertNotNull(jsDocInfoParser0);
      
      boolean boolean1 = jsDocInfoParser0.parse();
      assertEquals(false, toolErrorReporter0.isReportingWarnings());
      assertEquals(false, toolErrorReporter0.hasReportedError());
      assertEquals("[]", treeSet0.toString());
      assertEquals(131, variableDeclaration0.getAbsolutePosition());
      assertEquals(false, variableDeclaration0.isLet());
      assertEquals(-1, variableDeclaration0.getLineno());
      assertEquals(0, variableDeclaration0.depth());
      assertEquals(131, variableDeclaration0.getLength());
      assertEquals(false, variableDeclaration0.hasChildren());
      assertEquals(true, variableDeclaration0.isVar());
      assertEquals("122", variableDeclaration0.toString());
      assertEquals(false, variableDeclaration0.isConst());
      assertNull(variableDeclaration0.getJsDoc());
      assertEquals(131, variableDeclaration0.getPosition());
      assertEquals(122, variableDeclaration0.getType());
      assertFalse(boolean1);
      assertTrue(boolean0 == boolean1);
      assertTrue(boolean1 == boolean0);
  }

  @Test
  public void test33()  throws Throwable  {
      String string0 = "A.<O|v;)GmhfxEPb";
      Node node0 = JsDocInfoParser.parseTypeString(string0);
      assertNull(node0);
  }

  @Test
  public void test34()  throws Throwable  {
      String string0 = "!,:wEK^UyW]z";
      int int0 = 0;
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream(string0, int0);
      assertNotNull(jsDocTokenStream0);
      
      ArrayLiteral arrayLiteral0 = new ArrayLiteral(int0, int0);
      assertEquals(0, arrayLiteral0.getSkipCount());
      assertEquals(0, arrayLiteral0.getSize());
      assertEquals(0, arrayLiteral0.getAbsolutePosition());
      assertEquals("65", arrayLiteral0.toString());
      assertEquals(false, arrayLiteral0.hasChildren());
      assertNull(arrayLiteral0.getJsDoc());
      assertEquals(0, arrayLiteral0.getPosition());
      assertEquals(0, arrayLiteral0.getLength());
      assertEquals(0, arrayLiteral0.getDestructuringLength());
      assertEquals(false, arrayLiteral0.isDestructuring());
      assertEquals(65, arrayLiteral0.getType());
      assertEquals(-1, arrayLiteral0.getLineno());
      assertEquals(0, arrayLiteral0.depth());
      assertNotNull(arrayLiteral0);
      
      Comment comment0 = arrayLiteral0.getJsDocNode();
      assertEquals(0, arrayLiteral0.getSkipCount());
      assertEquals(0, arrayLiteral0.getSize());
      assertEquals(0, arrayLiteral0.getAbsolutePosition());
      assertEquals("65", arrayLiteral0.toString());
      assertEquals(false, arrayLiteral0.hasChildren());
      assertNull(arrayLiteral0.getJsDoc());
      assertEquals(0, arrayLiteral0.getPosition());
      assertEquals(0, arrayLiteral0.getLength());
      assertEquals(0, arrayLiteral0.getDestructuringLength());
      assertEquals(false, arrayLiteral0.isDestructuring());
      assertEquals(65, arrayLiteral0.getType());
      assertEquals(-1, arrayLiteral0.getLineno());
      assertEquals(0, arrayLiteral0.depth());
      assertNull(comment0);
      
      Charset charset0 = Charset.defaultCharset();
      assertEquals(true, charset0.canEncode());
      assertEquals("UTF-8", charset0.toString());
      assertEquals("UTF-8", charset0.displayName());
      assertEquals(true, charset0.isRegistered());
      assertEquals("UTF-8", charset0.name());
      assertNotNull(charset0);
      
      Set<String> set0 = charset0.aliases();
      assertEquals(2, set0.size());
      assertEquals(false, set0.isEmpty());
      assertEquals(true, charset0.canEncode());
      assertEquals("UTF-8", charset0.toString());
      assertEquals("UTF-8", charset0.displayName());
      assertEquals(true, charset0.isRegistered());
      assertEquals("UTF-8", charset0.name());
      assertNotNull(set0);
      
      boolean boolean0 = true;
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5_STRICT;
      Config config0 = new Config(set0, set0, boolean0, config_LanguageMode0, boolean0);
      assertEquals(2, set0.size());
      assertEquals(false, set0.isEmpty());
      assertEquals(true, charset0.canEncode());
      assertEquals("UTF-8", charset0.toString());
      assertEquals("UTF-8", charset0.displayName());
      assertEquals(true, charset0.isRegistered());
      assertEquals("UTF-8", charset0.name());
      assertNotNull(config0);
      
      ErrorCollector errorCollector0 = new ErrorCollector();
      assertNotNull(errorCollector0);
      
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, comment0, string0, config0, errorCollector0);
      assertEquals(2, set0.size());
      assertEquals(false, set0.isEmpty());
      assertEquals(true, charset0.canEncode());
      assertEquals("UTF-8", charset0.toString());
      assertEquals("UTF-8", charset0.displayName());
      assertEquals(true, charset0.isRegistered());
      assertEquals("UTF-8", charset0.name());
      assertEquals(0, arrayLiteral0.getSkipCount());
      assertEquals(0, arrayLiteral0.getSize());
      assertEquals(0, arrayLiteral0.getAbsolutePosition());
      assertEquals("65", arrayLiteral0.toString());
      assertEquals(false, arrayLiteral0.hasChildren());
      assertNull(arrayLiteral0.getJsDoc());
      assertEquals(0, arrayLiteral0.getPosition());
      assertEquals(0, arrayLiteral0.getLength());
      assertEquals(0, arrayLiteral0.getDestructuringLength());
      assertEquals(false, arrayLiteral0.isDestructuring());
      assertEquals(65, arrayLiteral0.getType());
      assertEquals(-1, arrayLiteral0.getLineno());
      assertEquals(0, arrayLiteral0.depth());
      assertNotNull(jsDocInfoParser0);
      
      // Undeclared exception!
      try {
        boolean boolean1 = jsDocInfoParser0.parse();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
}
