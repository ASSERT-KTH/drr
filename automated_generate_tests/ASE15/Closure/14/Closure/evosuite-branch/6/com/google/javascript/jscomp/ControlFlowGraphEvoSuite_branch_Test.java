/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 21:55:17 GMT 2014
 */

package com.google.javascript.jscomp;

import static org.junit.Assert.*;
import org.junit.Test;
import com.google.javascript.jscomp.ControlFlowGraph;
import com.google.javascript.jscomp.graph.DiGraph;
import java.util.Comparator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;

import org.junit.runner.RunWith;


public class ControlFlowGraphEvoSuite_branch_Test  {

  @Test
  public void test0()  throws Throwable  {
      ControlFlowGraph.Branch controlFlowGraph_Branch0 = ControlFlowGraph.Branch.SYN_BLOCK;
      assertEquals(4, controlFlowGraph_Branch0.ordinal());
      assertEquals("SYN_BLOCK", controlFlowGraph_Branch0.name());
      assertEquals("SYN_BLOCK", controlFlowGraph_Branch0.toString());
      assertEquals(ControlFlowGraph.Branch.SYN_BLOCK, controlFlowGraph_Branch0);
      
      boolean boolean0 = controlFlowGraph_Branch0.isConditional();
      assertEquals(4, controlFlowGraph_Branch0.ordinal());
      assertEquals("SYN_BLOCK", controlFlowGraph_Branch0.name());
      assertEquals("SYN_BLOCK", controlFlowGraph_Branch0.toString());
      assertFalse(boolean0);
  }

  @Test
  public void test1()  throws Throwable  {
      ControlFlowGraph.Branch controlFlowGraph_Branch0 = ControlFlowGraph.Branch.ON_FALSE;
      assertEquals("ON_FALSE", controlFlowGraph_Branch0.toString());
      assertEquals(1, controlFlowGraph_Branch0.ordinal());
      assertEquals("ON_FALSE", controlFlowGraph_Branch0.name());
      assertEquals(ControlFlowGraph.Branch.ON_FALSE, controlFlowGraph_Branch0);
      
      boolean boolean0 = controlFlowGraph_Branch0.isConditional();
      assertEquals("ON_FALSE", controlFlowGraph_Branch0.toString());
      assertEquals(1, controlFlowGraph_Branch0.ordinal());
      assertEquals("ON_FALSE", controlFlowGraph_Branch0.name());
      assertTrue(boolean0);
  }

  @Test
  public void test2()  throws Throwable  {
      String string0 = "ON_TRUE";
      ControlFlowGraph.Branch controlFlowGraph_Branch0 = ControlFlowGraph.Branch.valueOf(string0);
      //  // Unstable assertion: assertEquals(0, controlFlowGraph_Branch0.ordinal());
      //  // Unstable assertion: assertEquals("ON_TRUE", controlFlowGraph_Branch0.toString());
      //  // Unstable assertion: assertEquals("ON_TRUE", controlFlowGraph_Branch0.name());
      //  // Unstable assertion: assertEquals(ControlFlowGraph.Branch.ON_TRUE, controlFlowGraph_Branch0);
      
      boolean boolean0 = controlFlowGraph_Branch0.isConditional();
      //  // Unstable assertion: assertEquals(0, controlFlowGraph_Branch0.ordinal());
      //  // Unstable assertion: assertEquals("ON_TRUE", controlFlowGraph_Branch0.toString());
      //  // Unstable assertion: assertEquals("ON_TRUE", controlFlowGraph_Branch0.name());
      //  // Unstable assertion: assertTrue(boolean0);
  }

  @Test
  public void test3()  throws Throwable  {
      boolean boolean0 = true;
      String string0 = "&y9r5)";
      ControlFlowGraph<String> controlFlowGraph0 = new ControlFlowGraph<String>(string0, boolean0, boolean0);
      assertEquals(true, controlFlowGraph0.isDirected());
      assertEquals("LinkedGraph", controlFlowGraph0.getName());
      assertNotNull(controlFlowGraph0);
      
      DiGraph.DiGraphNode<String, ControlFlowGraph.Branch> diGraph_DiGraphNode0 = controlFlowGraph0.getImplicitReturn();
      assertEquals(true, controlFlowGraph0.isDirected());
      assertEquals("LinkedGraph", controlFlowGraph0.getName());
      assertNotNull(diGraph_DiGraphNode0);
      
      boolean boolean1 = controlFlowGraph0.isImplicitReturn(diGraph_DiGraphNode0);
      assertTrue(boolean0 == boolean1);
      assertTrue(boolean1 == boolean0);
      assertEquals(true, controlFlowGraph0.isDirected());
      assertEquals("LinkedGraph", controlFlowGraph0.getName());
      assertTrue(boolean1);
  }

  @Test
  public void test4()  throws Throwable  {
      int int0 = 32768;
      Integer integer0 = new Integer(int0);
      assertTrue(integer0.equals((Object)int0));
      assertEquals(32768, (int)integer0);
      
      boolean boolean0 = true;
      ControlFlowGraph<Integer> controlFlowGraph0 = new ControlFlowGraph<Integer>(integer0, boolean0, boolean0);
      assertTrue(integer0.equals((Object)int0));
      assertEquals(true, controlFlowGraph0.isDirected());
      assertEquals("LinkedGraph", controlFlowGraph0.getName());
      assertNotNull(controlFlowGraph0);
      
      ControlFlowGraph.Branch controlFlowGraph_Branch0 = ControlFlowGraph.Branch.UNCOND;
      controlFlowGraph0.connectToImplicitReturn((Integer) int0, (ControlFlowGraph.Branch) controlFlowGraph_Branch0);
      assertTrue(integer0.equals((Object)int0));
      assertEquals(true, controlFlowGraph0.isDirected());
      assertEquals("LinkedGraph", controlFlowGraph0.getName());
  }

  @Test
  public void test5()  throws Throwable  {
      String string0 = "pd!Hu0wzw/Y.";
      boolean boolean0 = false;
      ControlFlowGraph<String> controlFlowGraph0 = new ControlFlowGraph<String>(string0, boolean0, boolean0);
      assertEquals(true, controlFlowGraph0.isDirected());
      assertEquals("LinkedGraph", controlFlowGraph0.getName());
      assertNotNull(controlFlowGraph0);
      
      DiGraph.DiGraphNode<String, ControlFlowGraph.Branch> diGraph_DiGraphNode0 = controlFlowGraph0.getEntry();
      assertEquals(true, controlFlowGraph0.isDirected());
      assertEquals("LinkedGraph", controlFlowGraph0.getName());
      assertNotNull(diGraph_DiGraphNode0);
      
      boolean boolean1 = controlFlowGraph0.isImplicitReturn(diGraph_DiGraphNode0);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean0 == boolean1);
      assertEquals(true, controlFlowGraph0.isDirected());
      assertEquals("LinkedGraph", controlFlowGraph0.getName());
      assertFalse(boolean1);
      
      Comparator<DiGraph.DiGraphNode<String, ControlFlowGraph.Branch>> comparator0 = controlFlowGraph0.getOptionalNodeComparator(boolean1);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean0 == boolean1);
      assertEquals(true, controlFlowGraph0.isDirected());
      assertEquals("LinkedGraph", controlFlowGraph0.getName());
      assertNull(comparator0);
  }
}
