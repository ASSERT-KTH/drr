/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 22:41:17 GMT 2014
 */

package com.google.javascript.jscomp;

import static org.junit.Assert.*; import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.junit.Test;
import com.google.javascript.jscomp.AbstractCompiler;
import com.google.javascript.jscomp.Compiler;
import com.google.javascript.jscomp.CompilerOptions;
import com.google.javascript.jscomp.FunctionRewriter;
import com.google.javascript.rhino.Node;
import java.io.File;
import java.io.PrintStream;



import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.junit.runner.RunWith;


public class FunctionRewriterEvoSuite_branch_Test  {

  @Test
  public void test0()  throws Throwable  {
      AbstractCompiler abstractCompiler0 = null;
      FunctionRewriter functionRewriter0 = new FunctionRewriter(abstractCompiler0);
      assertNotNull(functionRewriter0);
      
      String string0 = "msg.while.compiling.fn";
      String string1 = "function JSCompiler_set(JSCompiler_set_name) {  return function(JSCompiler_set_value) {this[JSCompiler_set_name] = JSCompiler_set_value}}";
      assertNotSame(string1, string0);
      
      MockFile mockFile0 = new MockFile(string0, string1);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertNotNull(mockFile0);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      
      MockPrintStream mockPrintStream0 = new MockPrintStream((File) mockFile0);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertNotNull(mockPrintStream0);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      
      Compiler compiler0 = new Compiler((PrintStream) mockPrintStream0);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertNotNull(compiler0);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      
      Node node0 = compiler0.parseSyntheticCode(string1, string1);
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(0, node0.getCharno());
      assertEquals(true, node0.isSyntheticBlock());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals("function JSCompiler_set(JSCompiler_set_name) {  return function(JSCompiler_set_value) {this[JSCompiler_set_name] = JSCompiler_set_value}}", node0.getSourceFileName());
      assertEquals(1, node0.getChildCount());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(132, node0.getType());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(1, node0.getLineno());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(0, node0.getLength());
      assertEquals(true, node0.hasChildren());
      assertEquals(false, node0.isQuotedString());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(true, node0.hasOneChild());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(4096, node0.getSourcePosition());
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertNotNull(node0);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      
      functionRewriter0.process(node0, node0);
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(0, node0.getCharno());
      assertEquals(true, node0.isSyntheticBlock());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals("function JSCompiler_set(JSCompiler_set_name) {  return function(JSCompiler_set_value) {this[JSCompiler_set_name] = JSCompiler_set_value}}", node0.getSourceFileName());
      assertEquals(1, node0.getChildCount());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(132, node0.getType());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(1, node0.getLineno());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(0, node0.getLength());
      assertEquals(true, node0.hasChildren());
      assertEquals(false, node0.isQuotedString());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(true, node0.hasOneChild());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(4096, node0.getSourcePosition());
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
  }

  @Test
  public void test1()  throws Throwable  {
      AbstractCompiler abstractCompiler0 = null;
      FunctionRewriter functionRewriter0 = new FunctionRewriter(abstractCompiler0);
      assertNotNull(functionRewriter0);
      
      String string0 = "H\\$/.R\"(?uL.iLd[6tS";
      String string1 = "function JSCompiler_returnArg(JSCompiler_returnArg_value) {  return function() {return JCompiler_returnArg_value}}";
      assertNotSame(string1, string0);
      
      MockFile mockFile0 = new MockFile(string0, string1);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertNotNull(mockFile0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      
      MockPrintStream mockPrintStream0 = new MockPrintStream((File) mockFile0);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertNotNull(mockPrintStream0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      
      Compiler compiler0 = new Compiler((PrintStream) mockPrintStream0);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertNotNull(compiler0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      
      Node node0 = compiler0.parseSyntheticCode(string1, string1);
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(1, node0.getChildCount());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isVarArgs());
      assertEquals(132, node0.getType());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(1, node0.getLineno());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(true, node0.hasOneChild());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(true, node0.isSyntheticBlock());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(4096, node0.getSourcePosition());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(0, node0.getLength());
      assertEquals(true, node0.hasChildren());
      assertEquals(0, node0.getCharno());
      assertEquals("function JSCompiler_returnArg(JSCompiler_returnArg_value) {  return function() {return JCompiler_returnArg_value}}", node0.getSourceFileName());
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertNotNull(node0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      
      functionRewriter0.process(node0, node0);
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(1, node0.getChildCount());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isVarArgs());
      assertEquals(132, node0.getType());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(1, node0.getLineno());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(true, node0.hasOneChild());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(true, node0.isSyntheticBlock());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(4096, node0.getSourcePosition());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(0, node0.getLength());
      assertEquals(true, node0.hasChildren());
      assertEquals(0, node0.getCharno());
      assertEquals("function JSCompiler_returnArg(JSCompiler_returnArg_value) {  return function() {return JCompiler_returnArg_value}}", node0.getSourceFileName());
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
  }
}
