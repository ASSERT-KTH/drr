/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 21:58:28 GMT 2014
 */

package com.google.javascript.jscomp;

import static org.junit.Assert.*;
import org.junit.Test;
import com.google.javascript.jscomp.Compiler;
import com.google.javascript.jscomp.CompilerOptions;
import com.google.javascript.jscomp.ErrorManager;
import com.google.javascript.jscomp.FunctionRewriter;
import com.google.javascript.jscomp.LoggerErrorManager;
import com.google.javascript.rhino.Node;
import java.util.logging.Logger;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;

import org.junit.runner.RunWith;


public class FunctionRewriterEvoSuite_branch_Test  {

  @Test
  public void test0() {}
//   @Test
//   public void test0()  throws Throwable  {
//       String string0 = "JSCompiler_get";
//       Logger logger0 = Logger.getLogger(string0);
//       assertEquals("JSCompiler_get", logger0.getName());
//       assertEquals(false, logger0.getUseParentHandlers());
//       assertNull(logger0.getResourceBundleName());
//       assertNotNull(logger0);
//       
//       LoggerErrorManager loggerErrorManager0 = new LoggerErrorManager(logger0);
//       assertEquals("JSCompiler_get", logger0.getName());
//       assertEquals(false, logger0.getUseParentHandlers());
//       assertNull(logger0.getResourceBundleName());
//       assertEquals(0, loggerErrorManager0.getWarningCount());
//       assertEquals(0.0, loggerErrorManager0.getTypedPercent(), 0.01D);
//       assertEquals(0, loggerErrorManager0.getErrorCount());
//       assertNotNull(loggerErrorManager0);
//       
//       Compiler compiler0 = new Compiler((ErrorManager) loggerErrorManager0);
//       assertEquals("JSCompiler_get", logger0.getName());
//       assertEquals(false, logger0.getUseParentHandlers());
//       assertNull(logger0.getResourceBundleName());
//       assertEquals(0, loggerErrorManager0.getWarningCount());
//       assertEquals(0.0, loggerErrorManager0.getTypedPercent(), 0.01D);
//       assertEquals(0, loggerErrorManager0.getErrorCount());
//       assertEquals(0, compiler0.getErrorCount());
//       assertEquals(0, compiler0.getWarningCount());
//       assertNotNull(compiler0);
//       
//       FunctionRewriter functionRewriter0 = new FunctionRewriter(compiler0);
//       assertEquals("JSCompiler_get", logger0.getName());
//       assertEquals(false, logger0.getUseParentHandlers());
//       assertNull(logger0.getResourceBundleName());
//       assertEquals(0, loggerErrorManager0.getWarningCount());
//       assertEquals(0.0, loggerErrorManager0.getTypedPercent(), 0.01D);
//       assertEquals(0, loggerErrorManager0.getErrorCount());
//       assertEquals(0, compiler0.getErrorCount());
//       assertEquals(0, compiler0.getWarningCount());
//       assertNotNull(functionRewriter0);
//       
//       String string1 = "function JSCompiler_get(JSCompiler_get_name) {  return function() {return this[JSCompiler_get_name]}}";
//       assertNotSame(string1, string0);
//       
//       Node node0 = compiler0.parseTestCode(string1);
//       assertEquals("JSCompiler_get", logger0.getName());
//       assertEquals(false, logger0.getUseParentHandlers());
//       assertNull(logger0.getResourceBundleName());
//       assertEquals(false, node0.isLocalResultCall());
//       assertEquals(false, node0.isUnscopedQualifiedName());
//       assertEquals(true, node0.hasOneChild());
//       assertEquals(0, node0.getLength());
//       assertEquals(0, node0.getSideEffectFlags());
//       assertEquals(false, node0.isOptionalArg());
//       assertEquals(1, node0.getLineno());
//       assertEquals(false, node0.isVarArgs());
//       assertEquals(0, node0.getCharno());
//       assertEquals(true, node0.hasChildren());
//       assertEquals(false, node0.wasEmptyNode());
//       assertEquals(false, node0.isOnlyModifiesThisCall());
//       assertEquals(" [testcode] ", node0.getSourceFileName());
//       assertEquals(4096, node0.getSourcePosition());
//       assertEquals(false, node0.isQuotedString());
//       assertEquals(false, node0.isQualifiedName());
//       assertEquals(false, node0.isNoSideEffectsCall());
//       assertEquals(132, node0.getType());
//       assertEquals(true, node0.isSyntheticBlock());
//       assertEquals(false, node0.isFromExterns());
//       assertEquals(1, node0.getChildCount());
//       assertEquals(false, node0.hasMoreThanOneChild());
//       assertEquals(0, loggerErrorManager0.getWarningCount());
//       assertEquals(0.0, loggerErrorManager0.getTypedPercent(), 0.01D);
//       assertEquals(0, loggerErrorManager0.getErrorCount());
//       assertEquals(0, compiler0.getErrorCount());
//       assertEquals(false, compiler0.isIdeMode());
//       assertEquals(false, compiler0.acceptConstKeyword());
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
//       assertEquals(0, compiler0.getWarningCount());
//       assertEquals(false, compiler0.isTypeCheckingEnabled());
//       assertEquals(false, compiler0.hasErrors());
//       assertNotSame(string0, string1);
//       assertNotSame(string1, string0);
//       assertFalse(string0.equals((Object)string1));
//       assertFalse(string1.equals((Object)string0));
//       assertNotNull(node0);
//       
//       functionRewriter0.process(node0, node0);
//       assertEquals("JSCompiler_get", logger0.getName());
//       assertEquals(false, logger0.getUseParentHandlers());
//       assertNull(logger0.getResourceBundleName());
//       assertEquals(false, node0.isLocalResultCall());
//       assertEquals(false, node0.isUnscopedQualifiedName());
//       assertEquals(true, node0.hasOneChild());
//       assertEquals(0, node0.getLength());
//       assertEquals(0, node0.getSideEffectFlags());
//       assertEquals(false, node0.isOptionalArg());
//       assertEquals(1, node0.getLineno());
//       assertEquals(false, node0.isVarArgs());
//       assertEquals(0, node0.getCharno());
//       assertEquals(true, node0.hasChildren());
//       assertEquals(false, node0.wasEmptyNode());
//       assertEquals(false, node0.isOnlyModifiesThisCall());
//       assertEquals(" [testcode] ", node0.getSourceFileName());
//       assertEquals(4096, node0.getSourcePosition());
//       assertEquals(false, node0.isQuotedString());
//       assertEquals(false, node0.isQualifiedName());
//       assertEquals(false, node0.isNoSideEffectsCall());
//       assertEquals(132, node0.getType());
//       assertEquals(true, node0.isSyntheticBlock());
//       assertEquals(false, node0.isFromExterns());
//       assertEquals(1, node0.getChildCount());
//       assertEquals(false, node0.hasMoreThanOneChild());
//       assertEquals(0, loggerErrorManager0.getWarningCount());
//       assertEquals(0.0, loggerErrorManager0.getTypedPercent(), 0.01D);
//       assertEquals(0, loggerErrorManager0.getErrorCount());
//       assertEquals(0, compiler0.getErrorCount());
//       assertEquals(false, compiler0.isIdeMode());
//       assertEquals(false, compiler0.acceptConstKeyword());
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
//       assertEquals(0, compiler0.getWarningCount());
//       assertEquals(false, compiler0.isTypeCheckingEnabled());
//       assertEquals(false, compiler0.hasErrors());
//       assertNotSame(string0, string1);
//       assertNotSame(string1, string0);
//       assertFalse(string0.equals((Object)string1));
//       assertFalse(string1.equals((Object)string0));
//   }

  @Test
  public void test1() {}
//   @Test
//   public void test1()  throws Throwable  {
//       String string0 = "644pergev";
//       Logger logger0 = Logger.getLogger(string0);
//       assertEquals(false, logger0.getUseParentHandlers());
//       assertEquals("644pergev", logger0.getName());
//       assertNull(logger0.getResourceBundleName());
//       assertNotNull(logger0);
//       
//       LoggerErrorManager loggerErrorManager0 = new LoggerErrorManager(logger0);
//       assertEquals(false, logger0.getUseParentHandlers());
//       assertEquals("644pergev", logger0.getName());
//       assertNull(logger0.getResourceBundleName());
//       assertEquals(0.0, loggerErrorManager0.getTypedPercent(), 0.01D);
//       assertEquals(0, loggerErrorManager0.getErrorCount());
//       assertEquals(0, loggerErrorManager0.getWarningCount());
//       assertNotNull(loggerErrorManager0);
//       
//       Compiler compiler0 = new Compiler((ErrorManager) loggerErrorManager0);
//       assertEquals(false, logger0.getUseParentHandlers());
//       assertEquals("644pergev", logger0.getName());
//       assertNull(logger0.getResourceBundleName());
//       assertEquals(0.0, loggerErrorManager0.getTypedPercent(), 0.01D);
//       assertEquals(0, loggerErrorManager0.getErrorCount());
//       assertEquals(0, loggerErrorManager0.getWarningCount());
//       assertEquals(0, compiler0.getErrorCount());
//       assertEquals(0, compiler0.getWarningCount());
//       assertNotNull(compiler0);
//       
//       FunctionRewriter functionRewriter0 = new FunctionRewriter(compiler0);
//       assertEquals(false, logger0.getUseParentHandlers());
//       assertEquals("644pergev", logger0.getName());
//       assertNull(logger0.getResourceBundleName());
//       assertEquals(0.0, loggerErrorManager0.getTypedPercent(), 0.01D);
//       assertEquals(0, loggerErrorManager0.getErrorCount());
//       assertEquals(0, loggerErrorManager0.getWarningCount());
//       assertEquals(0, compiler0.getErrorCount());
//       assertEquals(0, compiler0.getWarningCount());
//       assertNotNull(functionRewriter0);
//       
//       String string1 = "function JSCompiler_set(JSCompiler_set_name) {  return function(JSCompiler_set_value) {this[JSCompiler_set_name] = JSCompiler_set_value}}";
//       assertNotSame(string1, string0);
//       
//       Node node0 = compiler0.parseTestCode(string1);
//       assertEquals(false, logger0.getUseParentHandlers());
//       assertEquals("644pergev", logger0.getName());
//       assertNull(logger0.getResourceBundleName());
//       assertEquals(0.0, loggerErrorManager0.getTypedPercent(), 0.01D);
//       assertEquals(0, loggerErrorManager0.getErrorCount());
//       assertEquals(0, loggerErrorManager0.getWarningCount());
//       assertEquals(false, node0.isFromExterns());
//       assertEquals(false, node0.isOptionalArg());
//       assertEquals(false, node0.isOnlyModifiesThisCall());
//       assertEquals(0, node0.getSideEffectFlags());
//       assertEquals(false, node0.isLocalResultCall());
//       assertEquals(false, node0.isNoSideEffectsCall());
//       assertEquals(false, node0.isQuotedString());
//       assertEquals(1, node0.getLineno());
//       assertEquals(false, node0.isUnscopedQualifiedName());
//       assertEquals(false, node0.isVarArgs());
//       assertEquals(false, node0.wasEmptyNode());
//       assertEquals(132, node0.getType());
//       assertEquals(true, node0.hasOneChild());
//       assertEquals(1, node0.getChildCount());
//       assertEquals(0, node0.getCharno());
//       assertEquals(false, node0.isQualifiedName());
//       assertEquals(0, node0.getLength());
//       assertEquals(" [testcode] ", node0.getSourceFileName());
//       assertEquals(4096, node0.getSourcePosition());
//       assertEquals(true, node0.isSyntheticBlock());
//       assertEquals(false, node0.hasMoreThanOneChild());
//       assertEquals(true, node0.hasChildren());
//       assertEquals(false, compiler0.hasErrors());
//       assertEquals(false, compiler0.acceptConstKeyword());
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
//       assertEquals(0, compiler0.getErrorCount());
//       assertEquals(false, compiler0.isIdeMode());
//       assertEquals(0, compiler0.getWarningCount());
//       assertEquals(false, compiler0.isTypeCheckingEnabled());
//       assertNotSame(string1, string0);
//       assertNotSame(string0, string1);
//       assertFalse(string1.equals((Object)string0));
//       assertFalse(string0.equals((Object)string1));
//       assertNotNull(node0);
//       
//       functionRewriter0.process(node0, node0);
//       assertEquals(false, logger0.getUseParentHandlers());
//       assertEquals("644pergev", logger0.getName());
//       assertNull(logger0.getResourceBundleName());
//       assertEquals(0.0, loggerErrorManager0.getTypedPercent(), 0.01D);
//       assertEquals(0, loggerErrorManager0.getErrorCount());
//       assertEquals(0, loggerErrorManager0.getWarningCount());
//       assertEquals(false, node0.isFromExterns());
//       assertEquals(false, node0.isOptionalArg());
//       assertEquals(false, node0.isOnlyModifiesThisCall());
//       assertEquals(0, node0.getSideEffectFlags());
//       assertEquals(false, node0.isLocalResultCall());
//       assertEquals(false, node0.isNoSideEffectsCall());
//       assertEquals(false, node0.isQuotedString());
//       assertEquals(1, node0.getLineno());
//       assertEquals(false, node0.isUnscopedQualifiedName());
//       assertEquals(false, node0.isVarArgs());
//       assertEquals(false, node0.wasEmptyNode());
//       assertEquals(132, node0.getType());
//       assertEquals(true, node0.hasOneChild());
//       assertEquals(1, node0.getChildCount());
//       assertEquals(0, node0.getCharno());
//       assertEquals(false, node0.isQualifiedName());
//       assertEquals(0, node0.getLength());
//       assertEquals(" [testcode] ", node0.getSourceFileName());
//       assertEquals(4096, node0.getSourcePosition());
//       assertEquals(true, node0.isSyntheticBlock());
//       assertEquals(false, node0.hasMoreThanOneChild());
//       assertEquals(true, node0.hasChildren());
//       assertEquals(false, compiler0.hasErrors());
//       assertEquals(false, compiler0.acceptConstKeyword());
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
//       assertEquals(0, compiler0.getErrorCount());
//       assertEquals(false, compiler0.isIdeMode());
//       assertEquals(0, compiler0.getWarningCount());
//       assertEquals(false, compiler0.isTypeCheckingEnabled());
//       assertNotSame(string1, string0);
//       assertNotSame(string0, string1);
//       assertFalse(string1.equals((Object)string0));
//       assertFalse(string0.equals((Object)string1));
//   }

  @Test
  public void test2()  throws Throwable  {
      String string0 = "2";
      Logger logger0 = Logger.getLogger(string0);
      assertEquals("2", logger0.getName());
      assertNull(logger0.getResourceBundleName());
      assertEquals(true, logger0.getUseParentHandlers());
      assertNotNull(logger0);
      
      LoggerErrorManager loggerErrorManager0 = new LoggerErrorManager(logger0);
      assertEquals(0, loggerErrorManager0.getErrorCount());
      assertEquals(0.0, loggerErrorManager0.getTypedPercent(), 0.01D);
      assertEquals(0, loggerErrorManager0.getWarningCount());
      assertEquals("2", logger0.getName());
      assertNull(logger0.getResourceBundleName());
      assertEquals(true, logger0.getUseParentHandlers());
      assertNotNull(loggerErrorManager0);
      
      Compiler compiler0 = new Compiler((ErrorManager) loggerErrorManager0);
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(0, loggerErrorManager0.getErrorCount());
      assertEquals(0.0, loggerErrorManager0.getTypedPercent(), 0.01D);
      assertEquals(0, loggerErrorManager0.getWarningCount());
      assertEquals("2", logger0.getName());
      assertNull(logger0.getResourceBundleName());
      assertEquals(true, logger0.getUseParentHandlers());
      assertNotNull(compiler0);
      
      FunctionRewriter functionRewriter0 = new FunctionRewriter(compiler0);
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(0, loggerErrorManager0.getErrorCount());
      assertEquals(0.0, loggerErrorManager0.getTypedPercent(), 0.01D);
      assertEquals(0, loggerErrorManager0.getWarningCount());
      assertEquals("2", logger0.getName());
      assertNull(logger0.getResourceBundleName());
      assertEquals(true, logger0.getUseParentHandlers());
      assertNotNull(functionRewriter0);
      
      String string1 = "function JSCompiler_emptyFn() {  return function() {}}";
      assertNotSame(string1, string0);
      
      Node node0 = compiler0.parseTestCode(string1);
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(1, node0.getChildCount());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(1, node0.getLineno());
      assertEquals(true, node0.hasChildren());
      assertEquals(true, node0.isSyntheticBlock());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(0, node0.getLength());
      assertEquals(0, node0.getCharno());
      assertEquals(132, node0.getType());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(" [testcode] ", node0.getSourceFileName());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isQuotedString());
      assertEquals(true, node0.hasOneChild());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(4096, node0.getSourcePosition());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(0, loggerErrorManager0.getErrorCount());
      assertEquals(0.0, loggerErrorManager0.getTypedPercent(), 0.01D);
      assertEquals(0, loggerErrorManager0.getWarningCount());
      assertEquals("2", logger0.getName());
      assertNull(logger0.getResourceBundleName());
      assertEquals(true, logger0.getUseParentHandlers());
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(node0);
      
      functionRewriter0.process(node0, node0);
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(1, node0.getChildCount());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(1, node0.getLineno());
      assertEquals(true, node0.hasChildren());
      assertEquals(true, node0.isSyntheticBlock());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(0, node0.getLength());
      assertEquals(0, node0.getCharno());
      assertEquals(132, node0.getType());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(" [testcode] ", node0.getSourceFileName());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isQuotedString());
      assertEquals(true, node0.hasOneChild());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(4096, node0.getSourcePosition());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(0, loggerErrorManager0.getErrorCount());
      assertEquals(0.0, loggerErrorManager0.getTypedPercent(), 0.01D);
      assertEquals(0, loggerErrorManager0.getWarningCount());
      assertEquals("2", logger0.getName());
      assertNull(logger0.getResourceBundleName());
      assertEquals(true, logger0.getUseParentHandlers());
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
  }
}
