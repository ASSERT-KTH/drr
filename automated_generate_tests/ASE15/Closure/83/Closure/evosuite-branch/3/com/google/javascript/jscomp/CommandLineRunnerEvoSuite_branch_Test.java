/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 22:41:52 GMT 2014
 */

package com.google.javascript.jscomp;

import static org.junit.Assert.*;
import org.junit.Test;
import com.google.javascript.jscomp.CommandLineRunner;
import com.google.javascript.jscomp.Compiler;
import com.google.javascript.jscomp.CompilerOptions;
import java.io.ByteArrayOutputStream;
import java.io.OutputStream;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;

import org.evosuite.runtime.System;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.junit.runner.RunWith;


public class CommandLineRunnerEvoSuite_branch_Test  {

  @Test
  public void test0()  throws Throwable  {
      String[] stringArray0 = new String[5];
      String string0 = "S [&cC~t*bM1TP&";
      stringArray0[1] = string0;
      assertNotNull(stringArray0[1]);
      
      stringArray0[2] = string0;
      assertNotNull(stringArray0[2]);
      
      stringArray0[3] = stringArray0[2];
      assertNotNull(stringArray0[3]);
      
      stringArray0[0] = string0;
      assertNotNull(stringArray0[0]);
      
      stringArray0[4] = stringArray0[2];
      assertNotNull(stringArray0[4]);
      
      CommandLineRunner commandLineRunner0 = new CommandLineRunner(stringArray0);
      assertEquals(false, commandLineRunner0.shouldRunCompiler());
      assertNotNull(commandLineRunner0);
      
      // Undeclared exception!
      try {
        commandLineRunner0.run();
        fail("Expecting exception: System.SystemExitException");
      
      } catch(System.SystemExitException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test1()  throws Throwable  {
      String[] stringArray0 = new String[7];
      String string0 = "(D)Ljava/lang/Double;";
      stringArray0[1] = string0;
      assertNotNull(stringArray0[1]);
      
      stringArray0[0] = stringArray0[1];
      assertNotNull(stringArray0[0]);
      
      stringArray0[2] = stringArray0[0];
      assertNotNull(stringArray0[2]);
      
      stringArray0[5] = string0;
      assertNotNull(stringArray0[5]);
      
      stringArray0[3] = string0;
      assertNotNull(stringArray0[3]);
      
      stringArray0[4] = string0;
      assertNotNull(stringArray0[4]);
      
      stringArray0[6] = stringArray0[4];
      assertNotNull(stringArray0[6]);
      
      CommandLineRunner commandLineRunner0 = new CommandLineRunner(stringArray0);
      assertEquals(false, commandLineRunner0.shouldRunCompiler());
      assertNotNull(commandLineRunner0);
      
      CompilerOptions compilerOptions0 = commandLineRunner0.createOptions();
      assertEquals(CompilerOptions.TweakProcessing.OFF, compilerOptions0.getTweakProcessing());
      assertEquals(false, compilerOptions0.isExternExportsEnabled());
      assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
      assertEquals(false, commandLineRunner0.shouldRunCompiler());
      assertTrue(compilerOptions0.removeUnusedLocalVars);
      assertFalse(compilerOptions0.generatePseudoNames);
      assertFalse(compilerOptions0.recordFunctionInformation);
      assertFalse(compilerOptions0.reserveRawExports);
      assertTrue(compilerOptions0.inlineLocalFunctions);
      assertFalse(compilerOptions0.ideMode);
      assertFalse(compilerOptions0.inlineAnonymousFunctionExpressions);
      assertTrue(compilerOptions0.collapseVariableDeclarations);
      assertFalse(compilerOptions0.markNoSideEffectCalls);
      assertTrue(compilerOptions0.labelRenaming);
      assertFalse(compilerOptions0.checkEs5Strict);
      assertFalse(compilerOptions0.crossModuleCodeMotion);
      assertFalse(compilerOptions0.devirtualizePrototypeMethods);
      assertFalse(compilerOptions0.checkTypedPropertyCalls);
      assertFalse(compilerOptions0.decomposeExpressions);
      assertFalse(compilerOptions0.collapseAnonymousFunctions);
      assertFalse(compilerOptions0.strictMessageReplacement);
      assertFalse(compilerOptions0.removeTryCatchFinally);
      assertFalse(compilerOptions0.collapseProperties);
      assertFalse(compilerOptions0.checkCaja);
      assertTrue(compilerOptions0.removeDeadCode);
      assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
      assertFalse(compilerOptions0.tightenTypes);
      assertFalse(compilerOptions0.instrumentForCoverage);
      assertFalse(compilerOptions0.groupVariableDeclarations);
      assertTrue(compilerOptions0.coalesceVariableNames);
      assertFalse(compilerOptions0.crossModuleMethodMotion);
      assertFalse(compilerOptions0.instrumentForCoverageOnly);
      assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
      assertFalse(compilerOptions0.smartNameRemoval);
      assertFalse(compilerOptions0.optimizeParameters);
      assertFalse(compilerOptions0.printInputDelimiter);
      assertFalse(compilerOptions0.rewriteFunctionExpressions);
      assertTrue(compilerOptions0.checkControlStructures);
      assertFalse(compilerOptions0.inlineVariables);
      assertFalse(compilerOptions0.inlineGetters);
      assertFalse(compilerOptions0.ambiguateProperties);
      assertFalse(compilerOptions0.ignoreCajaProperties);
      assertFalse(compilerOptions0.inferTypesInGlobalScope);
      assertFalse(compilerOptions0.removeEmptyFunctions);
      assertFalse(compilerOptions0.aliasAllStrings);
      assertFalse(compilerOptions0.optimizeCalls);
      assertFalse(compilerOptions0.allowLegacyJsMessages);
      assertTrue(compilerOptions0.convertToDottedProperties);
      assertFalse(compilerOptions0.checkSymbols);
      assertTrue(compilerOptions0.foldConstants);
      assertFalse(compilerOptions0.exportTestFunctions);
      assertFalse(compilerOptions0.removeUnusedVars);
      assertFalse(compilerOptions0.computeFunctionSideEffects);
      assertTrue(compilerOptions0.inlineLocalVariables);
      assertFalse(compilerOptions0.lineBreak);
      assertTrue(compilerOptions0.optimizeArgumentsArray);
      assertFalse(compilerOptions0.inlineFunctions);
      assertFalse(compilerOptions0.markAsCompiled);
      assertFalse(compilerOptions0.inlineConstantVars);
      assertFalse(compilerOptions0.checkTypes);
      assertFalse(compilerOptions0.checkUnusedPropertiesEarly);
      assertFalse(compilerOptions0.aliasExternals);
      assertFalse(compilerOptions0.disambiguateProperties);
      assertFalse(compilerOptions0.aliasKeywords);
      assertTrue(compilerOptions0.deadAssignmentElimination);
      assertFalse(compilerOptions0.checkDuplicateMessages);
      assertFalse(compilerOptions0.moveFunctionDeclarations);
      assertFalse(compilerOptions0.specializeInitialModule);
      assertFalse(compilerOptions0.optimizeReturns);
      assertFalse(compilerOptions0.generateExports);
      assertTrue(compilerOptions0.checkSuspiciousCode);
      assertTrue(compilerOptions0.closurePass);
      assertFalse(compilerOptions0.gatherCssNames);
      assertFalse(compilerOptions0.prettyPrint);
      assertTrue(compilerOptions0.flowSensitiveInlineVariables);
      assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
      assertNotNull(compilerOptions0);
  }

  @Test
  public void test2()  throws Throwable  {
      String string0 = "\"e";
      String[] stringArray0 = new String[10];
      stringArray0[0] = string0;
      assertNotNull(stringArray0[0]);
      
      stringArray0[1] = stringArray0[0];
      assertNotNull(stringArray0[1]);
      
      stringArray0[2] = stringArray0[0];
      assertNotNull(stringArray0[2]);
      
      stringArray0[3] = string0;
      assertNotNull(stringArray0[3]);
      
      stringArray0[4] = string0;
      assertNotNull(stringArray0[4]);
      
      stringArray0[5] = string0;
      assertNotNull(stringArray0[5]);
      
      stringArray0[6] = stringArray0[2];
      assertNotNull(stringArray0[6]);
      
      stringArray0[7] = stringArray0[5];
      assertNotNull(stringArray0[7]);
      
      stringArray0[8] = string0;
      assertNotNull(stringArray0[8]);
      
      stringArray0[9] = stringArray0[8];
      assertNotNull(stringArray0[9]);
      
      CommandLineRunner commandLineRunner0 = new CommandLineRunner(stringArray0);
      assertEquals(false, commandLineRunner0.shouldRunCompiler());
      assertNotNull(commandLineRunner0);
      
      Compiler compiler0 = commandLineRunner0.createCompiler();
      assertEquals(false, commandLineRunner0.shouldRunCompiler());
      assertNotNull(compiler0);
  }

  @Test
  public void test3()  throws Throwable  {
      String[] stringArray0 = new String[10];
      String string0 = " \"h/k]";
      stringArray0[0] = string0;
      assertNotNull(stringArray0[0]);
      
      stringArray0[1] = string0;
      assertNotNull(stringArray0[1]);
      
      stringArray0[2] = string0;
      assertNotNull(stringArray0[2]);
      
      stringArray0[3] = stringArray0[0];
      assertNotNull(stringArray0[3]);
      
      stringArray0[4] = stringArray0[1];
      assertNotNull(stringArray0[4]);
      
      stringArray0[5] = stringArray0[0];
      assertNotNull(stringArray0[5]);
      
      stringArray0[6] = stringArray0[4];
      assertNotNull(stringArray0[6]);
      
      stringArray0[7] = stringArray0[5];
      assertNotNull(stringArray0[7]);
      
      stringArray0[8] = stringArray0[4];
      assertNotNull(stringArray0[8]);
      
      stringArray0[9] = stringArray0[0];
      assertNotNull(stringArray0[9]);
      
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      assertEquals(0, byteArrayOutputStream0.size());
      assertEquals("", byteArrayOutputStream0.toString());
      assertNotNull(byteArrayOutputStream0);
      
      MockPrintStream mockPrintStream0 = new MockPrintStream((OutputStream) byteArrayOutputStream0);
      assertEquals(0, byteArrayOutputStream0.size());
      assertEquals("", byteArrayOutputStream0.toString());
      assertNotNull(mockPrintStream0);
      
      CommandLineRunner commandLineRunner0 = new CommandLineRunner(stringArray0, mockPrintStream0, mockPrintStream0);
      assertEquals(12463, byteArrayOutputStream0.size());
      assertEquals("No argument is allowed:  \"h/k]\n --charset VAL                          : Input and output charset for all files\n                                          . By default, we accept UTF-8 as input\n                                           and output US_ASCII\n --closure_entry_point VAL              : Entry points to the program. Must be g\n                                          oog.provide'd symbols. Any goog.provid\n                                          e'd symbols that are not a transitive \n                                          dependency of the entry points will be\n                                           removed. Files without goog.provides,\n                                           and their dependencies, will always b\n                                          e left in. If any entry points are spe\n                                          cified, then the manage_closure_depend\n                                          encies option will be set to true and \n                                          all files will be sorted in dependency\n                                           order.\n --compilation_level [WHITESPACE_ONLY | : Specifies the compilation level to use\n  SIMPLE_OPTIMIZATIONS | ADVANCED_OPTIM : . Options: WHITESPACE_ONLY, SIMPLE_OPT\n IZATIONS]                              : IMIZATIONS, ADVANCED_OPTIMIZATIONS\n --compute_phase_ordering               : Runs the compile job many times, then \n                                          prints out the best phase ordering fro\n                                          m this run\n --create_name_map_files                : If true, variable renaming and propert\n                                          y renaming map files will be produced \n                                          as {binary name}_vars_map.out and {bin\n                                          ary name}_props_map.out. Note that thi\n                                          s flag cannot be used in conjunction w\n                                          ith either variable_map_output_file or\n                                           property_map_output_file\n --create_source_map VAL                : If specified, a source map file mappin\n                                          g the generated source files back to t\n                                          he original source file will be output\n                                           to the specified path. The %outname% \n                                          placeholder will expand to the name of\n                                           the output file that the source map c\n                                          orresponds to.\n --debug                                : Enable debugging options\n --define (--D, -D) VAL                 : Override the value of a variable annot\n                                          ated @define. The format is <name>[=<v\n                                          al>], where <name> is the name of a @d\n                                          efine variable and <val> is a boolean,\n                                           number, or a single-quoted string tha\n                                          t contains no single quotes. If [=<val\n                                          >] is omitted, the variable is marked \n                                          true\n --externs VAL                          : The file containing javascript externs\n                                          . You may specify multiple\n --formatting [PRETTY_PRINT | PRINT_INP : Specifies which formatting options, if\n UT_DELIMITER]                          :  any, should be applied to the output \n                                          JS. Options: PRETTY_PRINT, PRINT_INPUT\n                                          _DELIMITER\n --help                                 : Displays this message\n --js VAL                               : The javascript filename. You may speci\n                                          fy multiple\n --js_output_file VAL                   : Primary output filename. If not specif\n                                          ied, output is written to stdout\n --jscomp_dev_mode (--dev_mode) [OFF |  : Turns on extra sanity checks\n START | START_AND_END | EVERY_PASS]    :  \n --jscomp_error VAL                     : Make the named class of warnings an er\n                                          ror. Options:accessControls, ambiguous\n                                          FunctionDecl, checkRegExp,checkTypes, \n                                          checkVars, deprecated, externsValidati\n                                          on, fileoverviewTags, invalidCasts, mi\n                                          ssingProperties, nonStandardJsDocs, st\n                                          rictModuleDepCheck, undefinedVars, unk\n                                          nownDefines, uselessCode, visibility\n --jscomp_off VAL                       : Turn off the named class of warnings. \n                                          Options:accessControls, ambiguousFunct\n                                          ionDecl, checkRegExp,checkTypes, check\n                                          Vars, deprecated, externsValidation, f\n                                          ileoverviewTags, invalidCasts, missing\n                                          Properties, nonStandardJsDocs, strictM\n                                          oduleDepCheck, undefinedVars, unknownD\n                                          efines, uselessCode, visibility\n --jscomp_warning VAL                   : Make the named class of warnings a nor\n                                          mal warning. Options:accessControls, a\n                                          mbiguousFunctionDecl, checkRegExp,chec\n                                          kTypes, checkVars, deprecated, externs\n                                          Validation, fileoverviewTags, invalidC\n                                          asts, missingProperties, nonStandardJs\n                                          Docs, strictModuleDepCheck, undefinedV\n                                          ars, unknownDefines, uselessCode, visi\n                                          bility\n --logging_level VAL                    : The logging level (standard java.util.\n                                          logging.Level values) for Compiler pro\n                                          gress. Does not control errors or warn\n                                          ings for the JavaScript code under com\n                                          pilation\n --manage_closure_dependencies          : Automatically sort dependencies so tha\n                                          t a file that goog.provides symbol X w\n                                          ill always come before a file that goo\n                                          g.requires symbol X. If an input provi\n                                          des symbols, and those symbols are nev\n                                          er required, then that input will not \n                                          be included in the compilation.\n --module VAL                           : A javascript module specification. The\n                                           format is <name>:<num-js-files>[:[<de\n                                          p>,...][:]]]. Module names must be uni\n                                          que. Each dep is the name of a module \n                                          that this module depends on. Modules m\n                                          ust be listed in dependency order, and\n                                           js source files must be listed in the\n                                           corresponding order. Where --module f\n                                          lags occur in relation to --js flags i\n                                          s unimportant\n --module_output_path_prefix VAL        : Prefix for filenames of compiled js mo\n                                          dules. <module-name>.js will be append\n                                          ed to this prefix. Directories will be\n                                           created as needed. Use with --module\n --module_wrapper VAL                   : An output wrapper for a javascript mod\n                                          ule (optional). The format is <name>:<\n                                          wrapper>. The module name must corresp\n                                          ond with a module specified using --mo\n                                          dule. The wrapper must contain %s as t\n                                          he code placeholder\n --output_manifest VAL                  : Prints out a list of all the files in \n                                          the compilation. If --manage_closure_d\n                                          ependencies is on, this will not inclu\n                                          de files that got dropped because they\n                                           were not required. The %outname% plac\n                                          eholder expands to the js output file.\n                                           If you're using modularization, using\n                                           %outname% will create a manifest for \n                                          each module.\n --output_wrapper VAL                   : Interpolate output into this string at\n                                           the place denoted by the marker token\n                                           %output%. See --output_wrapper_marker\n --output_wrapper_marker VAL            : Use this token as output marker in the\n                                           value of --output_wrapper\n --print_ast                            : Prints a dot file describing the inter\n                                          nal abstract syntax tree and exits\n --print_pass_graph                     : Prints a dot file describing the passe\n                                          s that will get run and exits\n --print_tree                           : Prints out the parse tree and exits\n --process_closure_primitives           : Processes built-ins from the Closure l\n                                          ibrary, such as goog.require(), goog.p\n                                          rovide(), and goog.exportSymbol()\n --property_map_input_file VAL          : File containing the serialized version\n                                           of the property renaming map produced\n                                           by a previous compilation\n --property_map_output_file VAL         : File where the serialized version of t\n                                          he property renaming map produced shou\n                                          ld be saved\n --summary_detail_level N               : Controls how detailed the compilation \n                                          summary is. Values: 0 (never print sum\n                                          mary), 1 (print summary only if there \n                                          are errors or warnings), 2 (print summ\n                                          ary if type checking is on, see --chec\n                                          k_types), 3 (always print summary). Th\n                                          e default level is 1\n --third_party                          : Check source validity but do not enfor\n                                          ce Closure style rules and conventions\n --use_only_custom_externs              : Specifies whether the default externs \n                                          should be excluded\n --variable_map_input_file VAL          : File containing the serialized version\n                                           of the variable renaming map produced\n                                           by a previous compilation\n --variable_map_output_file VAL         : File where the serialized version of t\n                                          he variable renaming map produced shou\n                                          ld be saved\n --version                              : Prints the compiler version to stderr.\n --warning_level [QUIET | DEFAULT | VER : Specifies the warning level to use. Op\n BOSE]                                  : tions: QUIET, DEFAULT, VERBOSE\n", byteArrayOutputStream0.toString());
      assertEquals(false, commandLineRunner0.shouldRunCompiler());
      assertNotNull(commandLineRunner0);
      
      boolean boolean0 = commandLineRunner0.shouldRunCompiler();
      assertEquals(12463, byteArrayOutputStream0.size());
      assertEquals("No argument is allowed:  \"h/k]\n --charset VAL                          : Input and output charset for all files\n                                          . By default, we accept UTF-8 as input\n                                           and output US_ASCII\n --closure_entry_point VAL              : Entry points to the program. Must be g\n                                          oog.provide'd symbols. Any goog.provid\n                                          e'd symbols that are not a transitive \n                                          dependency of the entry points will be\n                                           removed. Files without goog.provides,\n                                           and their dependencies, will always b\n                                          e left in. If any entry points are spe\n                                          cified, then the manage_closure_depend\n                                          encies option will be set to true and \n                                          all files will be sorted in dependency\n                                           order.\n --compilation_level [WHITESPACE_ONLY | : Specifies the compilation level to use\n  SIMPLE_OPTIMIZATIONS | ADVANCED_OPTIM : . Options: WHITESPACE_ONLY, SIMPLE_OPT\n IZATIONS]                              : IMIZATIONS, ADVANCED_OPTIMIZATIONS\n --compute_phase_ordering               : Runs the compile job many times, then \n                                          prints out the best phase ordering fro\n                                          m this run\n --create_name_map_files                : If true, variable renaming and propert\n                                          y renaming map files will be produced \n                                          as {binary name}_vars_map.out and {bin\n                                          ary name}_props_map.out. Note that thi\n                                          s flag cannot be used in conjunction w\n                                          ith either variable_map_output_file or\n                                           property_map_output_file\n --create_source_map VAL                : If specified, a source map file mappin\n                                          g the generated source files back to t\n                                          he original source file will be output\n                                           to the specified path. The %outname% \n                                          placeholder will expand to the name of\n                                           the output file that the source map c\n                                          orresponds to.\n --debug                                : Enable debugging options\n --define (--D, -D) VAL                 : Override the value of a variable annot\n                                          ated @define. The format is <name>[=<v\n                                          al>], where <name> is the name of a @d\n                                          efine variable and <val> is a boolean,\n                                           number, or a single-quoted string tha\n                                          t contains no single quotes. If [=<val\n                                          >] is omitted, the variable is marked \n                                          true\n --externs VAL                          : The file containing javascript externs\n                                          . You may specify multiple\n --formatting [PRETTY_PRINT | PRINT_INP : Specifies which formatting options, if\n UT_DELIMITER]                          :  any, should be applied to the output \n                                          JS. Options: PRETTY_PRINT, PRINT_INPUT\n                                          _DELIMITER\n --help                                 : Displays this message\n --js VAL                               : The javascript filename. You may speci\n                                          fy multiple\n --js_output_file VAL                   : Primary output filename. If not specif\n                                          ied, output is written to stdout\n --jscomp_dev_mode (--dev_mode) [OFF |  : Turns on extra sanity checks\n START | START_AND_END | EVERY_PASS]    :  \n --jscomp_error VAL                     : Make the named class of warnings an er\n                                          ror. Options:accessControls, ambiguous\n                                          FunctionDecl, checkRegExp,checkTypes, \n                                          checkVars, deprecated, externsValidati\n                                          on, fileoverviewTags, invalidCasts, mi\n                                          ssingProperties, nonStandardJsDocs, st\n                                          rictModuleDepCheck, undefinedVars, unk\n                                          nownDefines, uselessCode, visibility\n --jscomp_off VAL                       : Turn off the named class of warnings. \n                                          Options:accessControls, ambiguousFunct\n                                          ionDecl, checkRegExp,checkTypes, check\n                                          Vars, deprecated, externsValidation, f\n                                          ileoverviewTags, invalidCasts, missing\n                                          Properties, nonStandardJsDocs, strictM\n                                          oduleDepCheck, undefinedVars, unknownD\n                                          efines, uselessCode, visibility\n --jscomp_warning VAL                   : Make the named class of warnings a nor\n                                          mal warning. Options:accessControls, a\n                                          mbiguousFunctionDecl, checkRegExp,chec\n                                          kTypes, checkVars, deprecated, externs\n                                          Validation, fileoverviewTags, invalidC\n                                          asts, missingProperties, nonStandardJs\n                                          Docs, strictModuleDepCheck, undefinedV\n                                          ars, unknownDefines, uselessCode, visi\n                                          bility\n --logging_level VAL                    : The logging level (standard java.util.\n                                          logging.Level values) for Compiler pro\n                                          gress. Does not control errors or warn\n                                          ings for the JavaScript code under com\n                                          pilation\n --manage_closure_dependencies          : Automatically sort dependencies so tha\n                                          t a file that goog.provides symbol X w\n                                          ill always come before a file that goo\n                                          g.requires symbol X. If an input provi\n                                          des symbols, and those symbols are nev\n                                          er required, then that input will not \n                                          be included in the compilation.\n --module VAL                           : A javascript module specification. The\n                                           format is <name>:<num-js-files>[:[<de\n                                          p>,...][:]]]. Module names must be uni\n                                          que. Each dep is the name of a module \n                                          that this module depends on. Modules m\n                                          ust be listed in dependency order, and\n                                           js source files must be listed in the\n                                           corresponding order. Where --module f\n                                          lags occur in relation to --js flags i\n                                          s unimportant\n --module_output_path_prefix VAL        : Prefix for filenames of compiled js mo\n                                          dules. <module-name>.js will be append\n                                          ed to this prefix. Directories will be\n                                           created as needed. Use with --module\n --module_wrapper VAL                   : An output wrapper for a javascript mod\n                                          ule (optional). The format is <name>:<\n                                          wrapper>. The module name must corresp\n                                          ond with a module specified using --mo\n                                          dule. The wrapper must contain %s as t\n                                          he code placeholder\n --output_manifest VAL                  : Prints out a list of all the files in \n                                          the compilation. If --manage_closure_d\n                                          ependencies is on, this will not inclu\n                                          de files that got dropped because they\n                                           were not required. The %outname% plac\n                                          eholder expands to the js output file.\n                                           If you're using modularization, using\n                                           %outname% will create a manifest for \n                                          each module.\n --output_wrapper VAL                   : Interpolate output into this string at\n                                           the place denoted by the marker token\n                                           %output%. See --output_wrapper_marker\n --output_wrapper_marker VAL            : Use this token as output marker in the\n                                           value of --output_wrapper\n --print_ast                            : Prints a dot file describing the inter\n                                          nal abstract syntax tree and exits\n --print_pass_graph                     : Prints a dot file describing the passe\n                                          s that will get run and exits\n --print_tree                           : Prints out the parse tree and exits\n --process_closure_primitives           : Processes built-ins from the Closure l\n                                          ibrary, such as goog.require(), goog.p\n                                          rovide(), and goog.exportSymbol()\n --property_map_input_file VAL          : File containing the serialized version\n                                           of the property renaming map produced\n                                           by a previous compilation\n --property_map_output_file VAL         : File where the serialized version of t\n                                          he property renaming map produced shou\n                                          ld be saved\n --summary_detail_level N               : Controls how detailed the compilation \n                                          summary is. Values: 0 (never print sum\n                                          mary), 1 (print summary only if there \n                                          are errors or warnings), 2 (print summ\n                                          ary if type checking is on, see --chec\n                                          k_types), 3 (always print summary). Th\n                                          e default level is 1\n --third_party                          : Check source validity but do not enfor\n                                          ce Closure style rules and conventions\n --use_only_custom_externs              : Specifies whether the default externs \n                                          should be excluded\n --variable_map_input_file VAL          : File containing the serialized version\n                                           of the variable renaming map produced\n                                           by a previous compilation\n --variable_map_output_file VAL         : File where the serialized version of t\n                                          he variable renaming map produced shou\n                                          ld be saved\n --version                              : Prints the compiler version to stderr.\n --warning_level [QUIET | DEFAULT | VER : Specifies the warning level to use. Op\n BOSE]                                  : tions: QUIET, DEFAULT, VERBOSE\n", byteArrayOutputStream0.toString());
      assertEquals(false, commandLineRunner0.shouldRunCompiler());
      assertFalse(boolean0);
  }
}
