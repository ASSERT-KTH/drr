/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 21:41:43 GMT 2014
 */

package com.google.javascript.jscomp;

import static org.junit.Assert.*;
import org.junit.Test;
import com.google.javascript.jscomp.CheckLevel;
import com.google.javascript.jscomp.CollapseProperties;
import com.google.javascript.jscomp.Compiler;
import com.google.javascript.jscomp.DiagnosticType;
import com.google.javascript.jscomp.JSError;
import com.google.javascript.jscomp.LightweightMessageFormatter;
import com.google.javascript.jscomp.Region;
import com.google.javascript.jscomp.SimpleRegion;
import com.google.javascript.jscomp.SourceExcerptProvider;
import com.google.javascript.jscomp.TypeCheck;
import com.google.javascript.jscomp.TypedScopeCreator;
import java.io.PrintStream;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;

import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.junit.runner.RunWith;


public class LightweightMessageFormatterEvoSuite_branch_Test  {

  @Test
  public void test0()  throws Throwable  {
      String string0 = "Z8Lw0W";
      LightweightMessageFormatter.LineNumberingFormatter lightweightMessageFormatter_LineNumberingFormatter0 = new LightweightMessageFormatter.LineNumberingFormatter();
      assertNotNull(lightweightMessageFormatter_LineNumberingFormatter0);
      
      int int0 = (-3);
      SimpleRegion simpleRegion0 = new SimpleRegion(int0, int0, string0);
      assertEquals("Z8Lw0W", simpleRegion0.getSourceExcerpt());
      assertEquals(-3, simpleRegion0.getBeginningLineNumber());
      assertEquals(-3, simpleRegion0.getEndingLineNumber());
      assertNotNull(simpleRegion0);
      
      String string1 = lightweightMessageFormatter_LineNumberingFormatter0.formatRegion((Region) simpleRegion0);
      assertEquals("  -3| Z8Lw0W", string1);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertEquals("Z8Lw0W", simpleRegion0.getSourceExcerpt());
      assertEquals(-3, simpleRegion0.getBeginningLineNumber());
      assertEquals(-3, simpleRegion0.getEndingLineNumber());
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
  }

  @Test
  public void test1()  throws Throwable  {
      LightweightMessageFormatter.LineNumberingFormatter lightweightMessageFormatter_LineNumberingFormatter0 = new LightweightMessageFormatter.LineNumberingFormatter();
      assertNotNull(lightweightMessageFormatter_LineNumberingFormatter0);
      
      int int0 = 178;
      String string0 = "^\n";
      SimpleRegion simpleRegion0 = new SimpleRegion(int0, int0, string0);
      assertEquals("^\n", simpleRegion0.getSourceExcerpt());
      assertEquals(178, simpleRegion0.getBeginningLineNumber());
      assertEquals(178, simpleRegion0.getEndingLineNumber());
      assertNotNull(simpleRegion0);
      
      String string1 = lightweightMessageFormatter_LineNumberingFormatter0.formatRegion((Region) simpleRegion0);
      assertEquals("  178| ^", string1);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertEquals("^\n", simpleRegion0.getSourceExcerpt());
      assertEquals(178, simpleRegion0.getBeginningLineNumber());
      assertEquals(178, simpleRegion0.getEndingLineNumber());
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertNotNull(string1);
  }

  @Test
  public void test2()  throws Throwable  {
      LightweightMessageFormatter.LineNumberingFormatter lightweightMessageFormatter_LineNumberingFormatter0 = new LightweightMessageFormatter.LineNumberingFormatter();
      assertNotNull(lightweightMessageFormatter_LineNumberingFormatter0);
      
      int int0 = (-4725);
      String string0 = "";
      SimpleRegion simpleRegion0 = new SimpleRegion(int0, int0, string0);
      assertEquals(-4725, simpleRegion0.getEndingLineNumber());
      assertEquals(-4725, simpleRegion0.getBeginningLineNumber());
      assertEquals("", simpleRegion0.getSourceExcerpt());
      assertNotNull(simpleRegion0);
      
      String string1 = lightweightMessageFormatter_LineNumberingFormatter0.formatRegion((Region) simpleRegion0);
      assertEquals(-4725, simpleRegion0.getEndingLineNumber());
      assertEquals(-4725, simpleRegion0.getBeginningLineNumber());
      assertEquals("", simpleRegion0.getSourceExcerpt());
      assertNull(string1);
  }

  @Test
  public void test3()  throws Throwable  {
      LightweightMessageFormatter lightweightMessageFormatter0 = LightweightMessageFormatter.withoutSource();
      assertNotNull(lightweightMessageFormatter0);
      
      String string0 = "I- ";
      int int0 = 224;
      DiagnosticType diagnosticType0 = TypeCheck.ILLEGAL_IMPLICIT_CAST;
      assertNotNull(diagnosticType0);
      
      String[] stringArray0 = new String[7];
      JSError jSError0 = JSError.make(string0, int0, int0, diagnosticType0, stringArray0);
      assertEquals(224, jSError0.getCharno());
      assertNotNull(jSError0);
      
      String string1 = lightweightMessageFormatter0.formatWarning(jSError0);
      assertEquals("I- :224: WARNING - Illegal annotation on null. @implicitCast may only be used in externs.\n", string1);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertEquals(224, jSError0.getCharno());
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertNotNull(string1);
  }

  @Test
  public void test4()  throws Throwable  {
      int int0 = (-3);
      LightweightMessageFormatter lightweightMessageFormatter0 = LightweightMessageFormatter.withoutSource();
      assertNotNull(lightweightMessageFormatter0);
      
      String string0 = null;
      CheckLevel checkLevel0 = CheckLevel.ERROR;
      DiagnosticType diagnosticType0 = CollapseProperties.UNSAFE_NAMESPACE_WARNING;
      assertNotNull(diagnosticType0);
      
      String[] stringArray0 = new String[3];
      JSError jSError0 = JSError.make(string0, int0, int0, checkLevel0, diagnosticType0, stringArray0);
      assertEquals(-3, jSError0.getCharno());
      assertNotNull(jSError0);
      
      String string1 = lightweightMessageFormatter0.formatWarning(jSError0);
      assertEquals("WARNING - incomplete alias created for namespace null\n", string1);
      assertEquals(-3, jSError0.getCharno());
      assertNotNull(string1);
  }

  @Test
  public void test5()  throws Throwable  {
      int int0 = (-4725);
      String string0 = "gd3";
      MockPrintStream mockPrintStream0 = new MockPrintStream(string0);
      assertNotNull(mockPrintStream0);
      
      Compiler compiler0 = new Compiler((PrintStream) mockPrintStream0);
      assertNotNull(compiler0);
      
      SourceExcerptProvider.SourceExcerpt sourceExcerptProvider_SourceExcerpt0 = SourceExcerptProvider.SourceExcerpt.REGION;
      LightweightMessageFormatter lightweightMessageFormatter0 = new LightweightMessageFormatter((SourceExcerptProvider) compiler0, sourceExcerptProvider_SourceExcerpt0);
      assertNotNull(lightweightMessageFormatter0);
      
      CheckLevel checkLevel0 = CheckLevel.WARNING;
      DiagnosticType diagnosticType0 = TypedScopeCreator.IFACE_INITIALIZER;
      assertNotNull(diagnosticType0);
      
      String[] stringArray0 = new String[30];
      JSError jSError0 = JSError.make(string0, int0, int0, checkLevel0, diagnosticType0, stringArray0);
      assertEquals(-4725, jSError0.getCharno());
      assertNotNull(jSError0);
      
      String string1 = lightweightMessageFormatter0.formatError(jSError0);
      assertEquals("gd3: ERROR - Interface null must be initialized at declaration\n", string1);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertEquals(-4725, jSError0.getCharno());
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertNotNull(string1);
  }

  @Test
  public void test6()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      assertNotNull(compiler0);
      
      LightweightMessageFormatter lightweightMessageFormatter0 = new LightweightMessageFormatter((SourceExcerptProvider) compiler0);
      assertNotNull(lightweightMessageFormatter0);
  }

  @Test
  public void test7()  throws Throwable  {
      String string0 = "Z8Lw0W";
      LightweightMessageFormatter.LineNumberingFormatter lightweightMessageFormatter_LineNumberingFormatter0 = new LightweightMessageFormatter.LineNumberingFormatter();
      assertNotNull(lightweightMessageFormatter_LineNumberingFormatter0);
      
      int int0 = (-3);
      String string1 = lightweightMessageFormatter_LineNumberingFormatter0.formatLine(string0, int0);
      assertEquals("Z8Lw0W", string1);
      assertSame(string0, string1);
      assertSame(string1, string0);
      assertNotNull(string1);
  }
}
