/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 22:44:39 GMT 2014
 */

package com.google.javascript.jscomp;

import static org.junit.Assert.*; import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.junit.Test;
import com.google.javascript.jscomp.CheckLevel;
import com.google.javascript.jscomp.Compiler;
import com.google.javascript.jscomp.CompilerInput;
import com.google.javascript.jscomp.DiagnosticType;
import com.google.javascript.jscomp.JSError;
import com.google.javascript.jscomp.JsAst;
import com.google.javascript.jscomp.LightweightMessageFormatter;
import com.google.javascript.jscomp.ProcessTweaks;
import com.google.javascript.jscomp.Region;
import com.google.javascript.jscomp.SimpleRegion;
import com.google.javascript.jscomp.SourceAst;
import com.google.javascript.jscomp.SourceExcerptProvider;
import com.google.javascript.jscomp.SourceFile;
import com.google.javascript.jscomp.TypeCheck;
import com.google.javascript.jscomp.VarCheck;



import org.junit.runner.RunWith;


public class LightweightMessageFormatterEvoSuite_branch_Test  {

  @Test
  public void test0()  throws Throwable  {
      String string0 = "q^\n";
      LightweightMessageFormatter.LineNumberingFormatter lightweightMessageFormatter_LineNumberingFormatter0 = new LightweightMessageFormatter.LineNumberingFormatter();
      assertNotNull(lightweightMessageFormatter_LineNumberingFormatter0);
      
      int int0 = (-86);
      SimpleRegion simpleRegion0 = new SimpleRegion(int0, int0, string0);
      assertNotNull(simpleRegion0);
      assertEquals(-86, simpleRegion0.getEndingLineNumber());
      assertEquals(-86, simpleRegion0.getBeginningLineNumber());
      assertEquals("q^\n", simpleRegion0.getSourceExcerpt());
      
      String string1 = lightweightMessageFormatter_LineNumberingFormatter0.formatRegion((Region) simpleRegion0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("  -86| q^", string1);
      assertEquals(-86, simpleRegion0.getEndingLineNumber());
      assertEquals(-86, simpleRegion0.getBeginningLineNumber());
      assertEquals("q^\n", simpleRegion0.getSourceExcerpt());
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
  }

  @Test
  public void test1()  throws Throwable  {
      LightweightMessageFormatter.LineNumberingFormatter lightweightMessageFormatter_LineNumberingFormatter0 = new LightweightMessageFormatter.LineNumberingFormatter();
      assertNotNull(lightweightMessageFormatter_LineNumberingFormatter0);
      
      String string0 = "o\"3wM#zyg}\"";
      LightweightMessageFormatter lightweightMessageFormatter0 = LightweightMessageFormatter.withoutSource();
      assertNotNull(lightweightMessageFormatter0);
      
      int int0 = (-20);
      DiagnosticType diagnosticType0 = VarCheck.NAME_REFERENCE_IN_EXTERNS_ERROR;
      assertNotNull(diagnosticType0);
      
      String[] stringArray0 = new String[12];
      JSError jSError0 = JSError.make(string0, int0, int0, diagnosticType0, stringArray0);
      assertNotNull(jSError0);
      assertEquals(-20, jSError0.getCharno());
      
      String string1 = lightweightMessageFormatter0.formatError(jSError0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("o\"3wM#zyg}\": ERROR - accessing name null in externs has no effect\n", string1);
      assertEquals(-20, jSError0.getCharno());
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      
      SourceFile.Preloaded sourceFile_Preloaded0 = (SourceFile.Preloaded)SourceFile.fromCode(string0, string0);
      assertFalse(string0.equals((Object)string1));
      assertNotNull(sourceFile_Preloaded0);
      assertEquals("o\"3wM#zyg}\"", sourceFile_Preloaded0.getOriginalPath());
      assertEquals("o\"3wM#zyg}\"", sourceFile_Preloaded0.getName());
      assertEquals("o\"3wM#zyg}\"", sourceFile_Preloaded0.toString());
      assertNotSame(string0, string1);
      
      JsAst jsAst0 = new JsAst((SourceFile) sourceFile_Preloaded0);
      assertFalse(string0.equals((Object)string1));
      assertNotNull(jsAst0);
      assertEquals("o\"3wM#zyg}\"", sourceFile_Preloaded0.getOriginalPath());
      assertEquals("o\"3wM#zyg}\"", sourceFile_Preloaded0.getName());
      assertEquals("o\"3wM#zyg}\"", sourceFile_Preloaded0.toString());
      assertNotSame(string0, string1);
      
      boolean boolean0 = false;
      CompilerInput compilerInput0 = new CompilerInput((SourceAst) jsAst0, string1, boolean0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(compilerInput0);
      assertEquals(false, compilerInput0.isExtern());
      assertEquals("o\"3wM#zyg}\": ERROR - accessing name null in externs has no effect\n", compilerInput0.getName());
      assertEquals(-20, jSError0.getCharno());
      assertEquals("o\"3wM#zyg}\"", sourceFile_Preloaded0.getOriginalPath());
      assertEquals("o\"3wM#zyg}\"", sourceFile_Preloaded0.getName());
      assertEquals("o\"3wM#zyg}\"", sourceFile_Preloaded0.toString());
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      
      SimpleRegion simpleRegion0 = (SimpleRegion)compilerInput0.getRegion(int0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(simpleRegion0);
      assertEquals(false, compilerInput0.isExtern());
      assertEquals("o\"3wM#zyg}\": ERROR - accessing name null in externs has no effect\n", compilerInput0.getName());
      assertEquals(1, simpleRegion0.getBeginningLineNumber());
      assertEquals(1, simpleRegion0.getEndingLineNumber());
      assertEquals("o\"3wM#zyg}\"", simpleRegion0.getSourceExcerpt());
      assertEquals(-20, jSError0.getCharno());
      assertEquals("o\"3wM#zyg}\"", sourceFile_Preloaded0.getOriginalPath());
      assertEquals("o\"3wM#zyg}\"", sourceFile_Preloaded0.getName());
      assertEquals("o\"3wM#zyg}\"", sourceFile_Preloaded0.toString());
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      
      String string2 = lightweightMessageFormatter_LineNumberingFormatter0.formatRegion((Region) simpleRegion0);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      assertNotNull(string2);
      assertEquals("  1| o\"3wM#zyg}\"", string2);
      assertEquals(false, compilerInput0.isExtern());
      assertEquals("o\"3wM#zyg}\": ERROR - accessing name null in externs has no effect\n", compilerInput0.getName());
      assertEquals(1, simpleRegion0.getBeginningLineNumber());
      assertEquals(1, simpleRegion0.getEndingLineNumber());
      assertEquals("o\"3wM#zyg}\"", simpleRegion0.getSourceExcerpt());
      assertEquals(-20, jSError0.getCharno());
      assertEquals("o\"3wM#zyg}\"", sourceFile_Preloaded0.getOriginalPath());
      assertEquals("o\"3wM#zyg}\"", sourceFile_Preloaded0.getName());
      assertEquals("o\"3wM#zyg}\"", sourceFile_Preloaded0.toString());
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertNotSame(string1, string0);
      assertNotSame(string1, string2);
  }

  @Test
  public void test2()  throws Throwable  {
      LightweightMessageFormatter.LineNumberingFormatter lightweightMessageFormatter_LineNumberingFormatter0 = new LightweightMessageFormatter.LineNumberingFormatter();
      assertNotNull(lightweightMessageFormatter_LineNumberingFormatter0);
      
      Region region0 = null;
      String string0 = lightweightMessageFormatter_LineNumberingFormatter0.formatRegion(region0);
      assertNull(string0);
  }

  @Test
  public void test3()  throws Throwable  {
      LightweightMessageFormatter.LineNumberingFormatter lightweightMessageFormatter_LineNumberingFormatter0 = new LightweightMessageFormatter.LineNumberingFormatter();
      assertNotNull(lightweightMessageFormatter_LineNumberingFormatter0);
      
      String string0 = "";
      int int0 = (-364);
      SimpleRegion simpleRegion0 = new SimpleRegion(int0, int0, string0);
      assertNotNull(simpleRegion0);
      assertEquals(-364, simpleRegion0.getEndingLineNumber());
      assertEquals(-364, simpleRegion0.getBeginningLineNumber());
      assertEquals("", simpleRegion0.getSourceExcerpt());
      
      String string1 = lightweightMessageFormatter_LineNumberingFormatter0.formatRegion((Region) simpleRegion0);
      assertNull(string1);
      assertEquals(-364, simpleRegion0.getEndingLineNumber());
      assertEquals(-364, simpleRegion0.getBeginningLineNumber());
      assertEquals("", simpleRegion0.getSourceExcerpt());
  }

  @Test
  public void test4()  throws Throwable  {
      String string0 = "";
      int int0 = (-364);
      int int1 = 519;
      LightweightMessageFormatter lightweightMessageFormatter0 = LightweightMessageFormatter.withoutSource();
      assertNotNull(lightweightMessageFormatter0);
      
      CheckLevel checkLevel0 = CheckLevel.ERROR;
      DiagnosticType diagnosticType0 = ProcessTweaks.TWEAK_OVERRIDE_AFTER_REGISTERED_ERROR;
      assertNotNull(diagnosticType0);
      
      String[] stringArray0 = new String[2];
      JSError jSError0 = JSError.make(string0, int1, int0, checkLevel0, diagnosticType0, stringArray0);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertNotNull(jSError0);
      assertEquals(-364, jSError0.getCharno());
      
      String string1 = lightweightMessageFormatter0.formatWarning(jSError0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals(":519: WARNING - Cannot override the default value of tweak null after it has been registered\n", string1);
      assertEquals(-364, jSError0.getCharno());
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
  }

  @Test
  public void test5()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      assertNotNull(compiler0);
      
      LightweightMessageFormatter lightweightMessageFormatter0 = new LightweightMessageFormatter((SourceExcerptProvider) compiler0);
      assertNotNull(lightweightMessageFormatter0);
      
      DiagnosticType diagnosticType0 = TypeCheck.INCOMPATIBLE_EXTENDED_PROPERTY_TYPE;
      assertNotNull(diagnosticType0);
      
      String[] stringArray0 = new String[6];
      JSError jSError0 = JSError.make(diagnosticType0, stringArray0);
      assertNotNull(jSError0);
      assertEquals(-1, jSError0.getCharno());
      
      String string0 = lightweightMessageFormatter0.formatWarning(jSError0);
      assertNotNull(string0);
      assertEquals("WARNING - Interface null has a property null with incompatible types in its super interfaces null and null\n", string0);
      assertEquals(-1, jSError0.getCharno());
  }
}
