/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 20:43:44 GMT 2014
 */

package com.google.javascript.jscomp;

import static org.junit.Assert.*;
import org.junit.Test;
import com.google.common.base.Supplier;
import com.google.javascript.jscomp.AbstractCompiler;
import com.google.javascript.jscomp.CheckEventfulObjectDisposal;
import com.google.javascript.jscomp.Compiler;
import com.google.javascript.jscomp.CompilerOptions;
import com.google.javascript.jscomp.FunctionInjector;
import com.google.javascript.jscomp.JSModule;
import com.google.javascript.jscomp.NodeTraversal;
import com.google.javascript.jscomp.NodeUtil;
import com.google.javascript.jscomp.ScopeCreator;
import com.google.javascript.jscomp.StrictModeCheck;
import com.google.javascript.rhino.Node;
import java.util.Vector;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;

import org.evosuite.runtime.mock.java.lang.MockIllegalArgumentException;
import org.evosuite.runtime.mock.java.lang.MockIllegalStateException;
import org.junit.runner.RunWith;


public class FunctionInjectorEvoSuite_branch_Test  {

  @Test
  public void test0()  throws Throwable  {
      NodeUtil.MatchShallowStatement nodeUtil_MatchShallowStatement0 = new NodeUtil.MatchShallowStatement();
      assertNotNull(nodeUtil_MatchShallowStatement0);
      
      String string0 = "2{4+";
      boolean boolean0 = nodeUtil_MatchShallowStatement0.equals((Object) string0);
      assertFalse(boolean0);
      
      Compiler compiler0 = new Compiler();
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertNotNull(compiler0);
      
      Supplier<String> supplier0 = compiler0.getUniqueNameIdSupplier();
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertNotNull(supplier0);
      
      FunctionInjector functionInjector0 = new FunctionInjector((AbstractCompiler) compiler0, supplier0, boolean0, boolean0, boolean0);
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertNotNull(functionInjector0);
      
      CompilerOptions compilerOptions0 = compiler0.newCompilerOptions();
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
      assertEquals(false, compilerOptions0.isDisambiguatePrivateProperties());
      assertNull(compilerOptions0.getLanguageOut());
      assertEquals(false, compilerOptions0.getInferTypes());
      assertEquals(CompilerOptions.TracerMode.OFF, compilerOptions0.getTracerMode());
      assertEquals(false, compilerOptions0.assumeStrictThis());
      assertEquals(false, compilerOptions0.getCheckDeterminism());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compilerOptions0.getLanguageIn());
      assertEquals(false, compilerOptions0.assumeClosuresOnlyCaptureReferences());
      assertEquals(false, compilerOptions0.getInstrumentMemoryAllocations());
      assertEquals(CheckEventfulObjectDisposal.DisposalCheckingPolicy.OFF, compilerOptions0.getCheckEventfulObjectDisposalPolicy());
      assertEquals(false, compilerOptions0.isExternExportsEnabled());
      assertEquals(CompilerOptions.TweakProcessing.OFF, compilerOptions0.getTweakProcessing());
      assertEquals(false, compilerOptions0.isRemoveUnusedClassProperties());
      assertFalse(compilerOptions0.instrumentForCoverage);
      assertFalse(compilerOptions0.optimizeReturns);
      assertFalse(compilerOptions0.preferLineBreakAtEndOfFile);
      assertFalse(compilerOptions0.moveFunctionDeclarations);
      assertFalse(compilerOptions0.disambiguateProperties);
      assertFalse(compilerOptions0.markNoSideEffectCalls);
      assertFalse(compilerOptions0.inlineFunctions);
      assertFalse(compilerOptions0.convertToDottedProperties);
      assertFalse(compilerOptions0.optimizeParameters);
      assertFalse(compilerOptions0.recordFunctionInformation);
      assertFalse(compilerOptions0.inlineGetters);
      assertFalse(compilerOptions0.devirtualizePrototypeMethods);
      assertFalse(compilerOptions0.generatePseudoNames);
      assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
      assertFalse(compilerOptions0.optimizeArgumentsArray);
      assertFalse(compilerOptions0.smartNameRemoval);
      assertFalse(compilerOptions0.generateExports);
      assertFalse(compilerOptions0.removeUnusedLocalVars);
      assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
      assertFalse(compilerOptions0.computeFunctionSideEffects);
      assertFalse(compilerOptions0.checkTypes);
      assertFalse(compilerOptions0.lineBreak);
      assertFalse(compilerOptions0.removeUnusedVars);
      assertFalse(compilerOptions0.crossModuleMethodMotion);
      assertFalse(compilerOptions0.closurePass);
      assertFalse(compilerOptions0.inlineConstantVars);
      assertFalse(compilerOptions0.checkSymbols);
      assertFalse(compilerOptions0.checkControlStructures);
      assertFalse(compilerOptions0.rewriteFunctionExpressions);
      assertFalse(compilerOptions0.inlineLocalFunctions);
      assertFalse(compilerOptions0.aliasKeywords);
      assertFalse(compilerOptions0.crossModuleCodeMotion);
      assertFalse(compilerOptions0.markAsCompiled);
      assertFalse(compilerOptions0.foldConstants);
      assertFalse(compilerOptions0.collapseAnonymousFunctions);
      assertFalse(compilerOptions0.deadAssignmentElimination);
      assertFalse(compilerOptions0.exportTestFunctions);
      assertFalse(compilerOptions0.inlineVariables);
      assertFalse(compilerOptions0.aliasExternals);
      assertFalse(compilerOptions0.removeTryCatchFinally);
      assertFalse(compilerOptions0.reserveRawExports);
      assertFalse(compilerOptions0.coalesceVariableNames);
      assertFalse(compilerOptions0.gatherCssNames);
      assertFalse(compilerOptions0.ambiguateProperties);
      assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
      assertFalse(compilerOptions0.optimizeCalls);
      assertFalse(compilerOptions0.removeDeadCode);
      assertFalse(compilerOptions0.collapseVariableDeclarations);
      assertFalse(compilerOptions0.labelRenaming);
      assertFalse(compilerOptions0.aliasAllStrings);
      assertFalse(compilerOptions0.ideMode);
      assertFalse(compilerOptions0.flowSensitiveInlineVariables);
      assertFalse(compilerOptions0.checkSuspiciousCode);
      assertFalse(compilerOptions0.collapseProperties);
      assertFalse(compilerOptions0.removeUnusedClassProperties);
      assertFalse(compilerOptions0.prettyPrint);
      assertFalse(compilerOptions0.jqueryPass);
      assertFalse(compilerOptions0.printInputDelimiter);
      assertNotNull(compilerOptions0);
      
      functionInjector0.setKnownConstants(compilerOptions0.stripTypes);
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
      assertEquals(false, compilerOptions0.isDisambiguatePrivateProperties());
      assertNull(compilerOptions0.getLanguageOut());
      assertEquals(false, compilerOptions0.getInferTypes());
      assertEquals(CompilerOptions.TracerMode.OFF, compilerOptions0.getTracerMode());
      assertEquals(false, compilerOptions0.assumeStrictThis());
      assertEquals(false, compilerOptions0.getCheckDeterminism());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compilerOptions0.getLanguageIn());
      assertEquals(false, compilerOptions0.assumeClosuresOnlyCaptureReferences());
      assertEquals(false, compilerOptions0.getInstrumentMemoryAllocations());
      assertEquals(CheckEventfulObjectDisposal.DisposalCheckingPolicy.OFF, compilerOptions0.getCheckEventfulObjectDisposalPolicy());
      assertEquals(false, compilerOptions0.isExternExportsEnabled());
      assertEquals(CompilerOptions.TweakProcessing.OFF, compilerOptions0.getTweakProcessing());
      assertEquals(false, compilerOptions0.isRemoveUnusedClassProperties());
      assertFalse(compilerOptions0.instrumentForCoverage);
      assertFalse(compilerOptions0.optimizeReturns);
      assertFalse(compilerOptions0.preferLineBreakAtEndOfFile);
      assertFalse(compilerOptions0.moveFunctionDeclarations);
      assertFalse(compilerOptions0.disambiguateProperties);
      assertFalse(compilerOptions0.markNoSideEffectCalls);
      assertFalse(compilerOptions0.inlineFunctions);
      assertFalse(compilerOptions0.convertToDottedProperties);
      assertFalse(compilerOptions0.optimizeParameters);
      assertFalse(compilerOptions0.recordFunctionInformation);
      assertFalse(compilerOptions0.inlineGetters);
      assertFalse(compilerOptions0.devirtualizePrototypeMethods);
      assertFalse(compilerOptions0.generatePseudoNames);
      assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
      assertFalse(compilerOptions0.optimizeArgumentsArray);
      assertFalse(compilerOptions0.smartNameRemoval);
      assertFalse(compilerOptions0.generateExports);
      assertFalse(compilerOptions0.removeUnusedLocalVars);
      assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
      assertFalse(compilerOptions0.computeFunctionSideEffects);
      assertFalse(compilerOptions0.checkTypes);
      assertFalse(compilerOptions0.lineBreak);
      assertFalse(compilerOptions0.removeUnusedVars);
      assertFalse(compilerOptions0.crossModuleMethodMotion);
      assertFalse(compilerOptions0.closurePass);
      assertFalse(compilerOptions0.inlineConstantVars);
      assertFalse(compilerOptions0.checkSymbols);
      assertFalse(compilerOptions0.checkControlStructures);
      assertFalse(compilerOptions0.rewriteFunctionExpressions);
      assertFalse(compilerOptions0.inlineLocalFunctions);
      assertFalse(compilerOptions0.aliasKeywords);
      assertFalse(compilerOptions0.crossModuleCodeMotion);
      assertFalse(compilerOptions0.markAsCompiled);
      assertFalse(compilerOptions0.foldConstants);
      assertFalse(compilerOptions0.collapseAnonymousFunctions);
      assertFalse(compilerOptions0.deadAssignmentElimination);
      assertFalse(compilerOptions0.exportTestFunctions);
      assertFalse(compilerOptions0.inlineVariables);
      assertFalse(compilerOptions0.aliasExternals);
      assertFalse(compilerOptions0.removeTryCatchFinally);
      assertFalse(compilerOptions0.reserveRawExports);
      assertFalse(compilerOptions0.coalesceVariableNames);
      assertFalse(compilerOptions0.gatherCssNames);
      assertFalse(compilerOptions0.ambiguateProperties);
      assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
      assertFalse(compilerOptions0.optimizeCalls);
      assertFalse(compilerOptions0.removeDeadCode);
      assertFalse(compilerOptions0.collapseVariableDeclarations);
      assertFalse(compilerOptions0.labelRenaming);
      assertFalse(compilerOptions0.aliasAllStrings);
      assertFalse(compilerOptions0.ideMode);
      assertFalse(compilerOptions0.flowSensitiveInlineVariables);
      assertFalse(compilerOptions0.checkSuspiciousCode);
      assertFalse(compilerOptions0.collapseProperties);
      assertFalse(compilerOptions0.removeUnusedClassProperties);
      assertFalse(compilerOptions0.prettyPrint);
      assertFalse(compilerOptions0.jqueryPass);
      assertFalse(compilerOptions0.printInputDelimiter);
  }

  @Test
  public void test1() {}
//   @Test
//   public void test1()  throws Throwable  {
//       Compiler compiler0 = new Compiler();
//       assertEquals(0.0, compiler0.getProgress(), 0.01D);
//       assertNotNull(compiler0);
//       
//       Supplier<String> supplier0 = compiler0.getUniqueNameIdSupplier();
//       assertEquals(0.0, compiler0.getProgress(), 0.01D);
//       assertNotNull(supplier0);
//       
//       boolean boolean0 = false;
//       FunctionInjector functionInjector0 = new FunctionInjector((AbstractCompiler) compiler0, supplier0, boolean0, boolean0, boolean0);
//       assertEquals(0.0, compiler0.getProgress(), 0.01D);
//       assertNotNull(functionInjector0);
//       
//       String string0 = "string";
//       Node node0 = compiler0.parseTestCode(string0);
//       assertEquals(false, compiler0.isTypeCheckingEnabled());
//       assertEquals(0.0, compiler0.getProgress(), 0.01D);
//       assertEquals(false, compiler0.acceptConstKeyword());
//       assertEquals(0, compiler0.getWarningCount());
//       assertEquals(false, compiler0.isIdeMode());
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
//       assertEquals(false, compiler0.hasErrors());
//       assertEquals(0, compiler0.getErrorCount());
//       assertEquals(true, node0.mayMutateArguments());
//       assertEquals(false, node0.isCatch());
//       assertEquals(false, node0.isReturn());
//       assertEquals(true, node0.mayMutateGlobalStateOrThrow());
//       assertEquals(false, node0.isComma());
//       assertEquals(false, node0.isOnlyModifiesThisCall());
//       assertEquals(false, node0.isLocalResultCall());
//       assertEquals(false, node0.isDo());
//       assertEquals(false, node0.isGetterDef());
//       assertEquals(0, node0.getSideEffectFlags());
//       assertEquals(false, node0.isStringKey());
//       assertEquals(4096, node0.getSourcePosition());
//       assertEquals(false, node0.isAnd());
//       assertEquals(false, node0.isBlock());
//       assertEquals(false, node0.isFromExterns());
//       assertEquals(0, node0.getLength());
//       assertEquals(false, node0.isNew());
//       assertEquals(false, node0.isOnlyModifiesArgumentsCall());
//       assertEquals(false, node0.isString());
//       assertEquals("[testcode]", node0.getSourceFileName());
//       assertEquals(false, node0.wasEmptyNode());
//       assertEquals(false, node0.isGetElem());
//       assertEquals(false, node0.isThrow());
//       assertEquals(false, node0.isNE());
//       assertEquals(false, node0.isDelProp());
//       assertEquals(false, node0.isDebugger());
//       assertEquals(false, node0.isContinue());
//       assertEquals(true, node0.isScript());
//       assertEquals(false, node0.isOptionalArg());
//       assertEquals(true, node0.hasChildren());
//       assertEquals(false, node0.isWhile());
//       assertEquals(false, node0.isInc());
//       assertEquals(false, node0.hasMoreThanOneChild());
//       assertEquals(false, node0.isTrue());
//       assertEquals(false, node0.isCase());
//       assertEquals(true, node0.hasOneChild());
//       assertEquals(false, node0.isNoSideEffectsCall());
//       assertEquals(false, node0.isObjectLit());
//       assertEquals(false, node0.isSetterDef());
//       assertEquals(false, node0.isDefaultCase());
//       assertEquals(false, node0.isVar());
//       assertEquals(false, node0.isExprResult());
//       assertEquals(false, node0.isVarArgs());
//       assertEquals(false, node0.isInstanceOf());
//       assertEquals(false, node0.isFunction());
//       assertEquals(false, node0.isAdd());
//       assertEquals(false, node0.isThis());
//       assertEquals(false, node0.isFor());
//       assertEquals(false, node0.isGetProp());
//       assertEquals(1, node0.getLineno());
//       assertEquals(0, node0.getCharno());
//       assertEquals(false, node0.isLabelName());
//       assertEquals(false, node0.isVoid());
//       assertEquals(false, node0.isFalse());
//       assertEquals(false, node0.isIn());
//       assertEquals(false, node0.isCast());
//       assertEquals(false, node0.isOr());
//       assertEquals(false, node0.isIf());
//       assertEquals(false, node0.isSwitch());
//       assertEquals(false, node0.isLabel());
//       assertEquals(false, node0.isNull());
//       assertEquals(false, node0.isBreak());
//       assertEquals(1, node0.getChildCount());
//       assertEquals(0, node0.getChangeTime());
//       assertEquals(false, node0.isAssign());
//       assertEquals(false, node0.isName());
//       assertEquals(false, node0.isAssignAdd());
//       assertEquals(132, node0.getType());
//       assertEquals(false, node0.isParamList());
//       assertEquals(true, node0.isSyntheticBlock());
//       assertEquals(false, node0.isNumber());
//       assertEquals(false, node0.isQuotedString());
//       assertEquals(false, node0.isArrayLit());
//       assertEquals(false, node0.isTypeOf());
//       assertEquals(false, node0.isRegExp());
//       assertEquals(false, node0.isTry());
//       assertEquals(false, node0.isNot());
//       assertEquals(false, node0.isWith());
//       assertEquals(false, node0.isHook());
//       assertEquals(false, node0.isEmpty());
//       assertEquals(false, node0.isCall());
//       assertEquals(false, node0.isDec());
//       assertNotNull(node0);
//       
//       CompilerOptions compilerOptions0 = new CompilerOptions();
//       assertEquals(false, compilerOptions0.assumeClosuresOnlyCaptureReferences());
//       assertEquals(CompilerOptions.TweakProcessing.OFF, compilerOptions0.getTweakProcessing());
//       assertEquals(false, compilerOptions0.getInferTypes());
//       assertEquals(false, compilerOptions0.isExternExportsEnabled());
//       assertNull(compilerOptions0.getLanguageOut());
//       assertEquals(false, compilerOptions0.getCheckDeterminism());
//       assertEquals(false, compilerOptions0.assumeStrictThis());
//       assertEquals(false, compilerOptions0.isDisambiguatePrivateProperties());
//       assertEquals(false, compilerOptions0.getInstrumentMemoryAllocations());
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compilerOptions0.getLanguageIn());
//       assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
//       assertEquals(CompilerOptions.TracerMode.OFF, compilerOptions0.getTracerMode());
//       assertEquals(false, compilerOptions0.isRemoveUnusedClassProperties());
//       assertEquals(CheckEventfulObjectDisposal.DisposalCheckingPolicy.OFF, compilerOptions0.getCheckEventfulObjectDisposalPolicy());
//       assertFalse(compilerOptions0.inlineLocalFunctions);
//       assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
//       assertFalse(compilerOptions0.flowSensitiveInlineVariables);
//       assertFalse(compilerOptions0.aliasKeywords);
//       assertFalse(compilerOptions0.optimizeCalls);
//       assertFalse(compilerOptions0.optimizeReturns);
//       assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
//       assertFalse(compilerOptions0.markNoSideEffectCalls);
//       assertFalse(compilerOptions0.inlineGetters);
//       assertFalse(compilerOptions0.labelRenaming);
//       assertFalse(compilerOptions0.instrumentForCoverage);
//       assertFalse(compilerOptions0.reserveRawExports);
//       assertFalse(compilerOptions0.recordFunctionInformation);
//       assertFalse(compilerOptions0.markAsCompiled);
//       assertFalse(compilerOptions0.preferLineBreakAtEndOfFile);
//       assertFalse(compilerOptions0.prettyPrint);
//       assertFalse(compilerOptions0.removeUnusedLocalVars);
//       assertFalse(compilerOptions0.jqueryPass);
//       assertFalse(compilerOptions0.aliasAllStrings);
//       assertFalse(compilerOptions0.collapseVariableDeclarations);
//       assertFalse(compilerOptions0.generateExports);
//       assertFalse(compilerOptions0.collapseProperties);
//       assertFalse(compilerOptions0.inlineVariables);
//       assertFalse(compilerOptions0.moveFunctionDeclarations);
//       assertFalse(compilerOptions0.ambiguateProperties);
//       assertFalse(compilerOptions0.checkControlStructures);
//       assertFalse(compilerOptions0.crossModuleMethodMotion);
//       assertFalse(compilerOptions0.checkTypes);
//       assertFalse(compilerOptions0.lineBreak);
//       assertFalse(compilerOptions0.printInputDelimiter);
//       assertFalse(compilerOptions0.removeTryCatchFinally);
//       assertFalse(compilerOptions0.optimizeArgumentsArray);
//       assertFalse(compilerOptions0.removeDeadCode);
//       assertFalse(compilerOptions0.smartNameRemoval);
//       assertFalse(compilerOptions0.crossModuleCodeMotion);
//       assertFalse(compilerOptions0.removeUnusedClassProperties);
//       assertFalse(compilerOptions0.convertToDottedProperties);
//       assertFalse(compilerOptions0.checkSymbols);
//       assertFalse(compilerOptions0.deadAssignmentElimination);
//       assertFalse(compilerOptions0.rewriteFunctionExpressions);
//       assertFalse(compilerOptions0.closurePass);
//       assertFalse(compilerOptions0.foldConstants);
//       assertFalse(compilerOptions0.aliasExternals);
//       assertFalse(compilerOptions0.devirtualizePrototypeMethods);
//       assertFalse(compilerOptions0.checkSuspiciousCode);
//       assertFalse(compilerOptions0.inlineFunctions);
//       assertFalse(compilerOptions0.exportTestFunctions);
//       assertFalse(compilerOptions0.inlineConstantVars);
//       assertFalse(compilerOptions0.collapseAnonymousFunctions);
//       assertFalse(compilerOptions0.ideMode);
//       assertFalse(compilerOptions0.removeUnusedVars);
//       assertFalse(compilerOptions0.computeFunctionSideEffects);
//       assertFalse(compilerOptions0.coalesceVariableNames);
//       assertFalse(compilerOptions0.optimizeParameters);
//       assertFalse(compilerOptions0.gatherCssNames);
//       assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
//       assertFalse(compilerOptions0.disambiguateProperties);
//       assertFalse(compilerOptions0.generatePseudoNames);
//       assertNotNull(compilerOptions0);
//       
//       FunctionInjector.InliningMode functionInjector_InliningMode0 = FunctionInjector.InliningMode.BLOCK;
//       JSModule jSModule0 = new JSModule(compilerOptions0.syntheticBlockStartMarker);
//       assertEquals(false, compilerOptions0.assumeClosuresOnlyCaptureReferences());
//       assertEquals(CompilerOptions.TweakProcessing.OFF, compilerOptions0.getTweakProcessing());
//       assertEquals(false, compilerOptions0.getInferTypes());
//       assertEquals(false, compilerOptions0.isExternExportsEnabled());
//       assertNull(compilerOptions0.getLanguageOut());
//       assertEquals(false, compilerOptions0.getCheckDeterminism());
//       assertEquals(false, compilerOptions0.assumeStrictThis());
//       assertEquals(false, compilerOptions0.isDisambiguatePrivateProperties());
//       assertEquals(false, compilerOptions0.getInstrumentMemoryAllocations());
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compilerOptions0.getLanguageIn());
//       assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
//       assertEquals(CompilerOptions.TracerMode.OFF, compilerOptions0.getTracerMode());
//       assertEquals(false, compilerOptions0.isRemoveUnusedClassProperties());
//       assertEquals(CheckEventfulObjectDisposal.DisposalCheckingPolicy.OFF, compilerOptions0.getCheckEventfulObjectDisposalPolicy());
//       assertNull(jSModule0.getName());
//       assertNull(jSModule0.toString());
//       assertEquals(-1, jSModule0.getDepth());
//       assertFalse(compilerOptions0.inlineLocalFunctions);
//       assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
//       assertFalse(compilerOptions0.flowSensitiveInlineVariables);
//       assertFalse(compilerOptions0.aliasKeywords);
//       assertFalse(compilerOptions0.optimizeCalls);
//       assertFalse(compilerOptions0.optimizeReturns);
//       assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
//       assertFalse(compilerOptions0.markNoSideEffectCalls);
//       assertFalse(compilerOptions0.inlineGetters);
//       assertFalse(compilerOptions0.labelRenaming);
//       assertFalse(compilerOptions0.instrumentForCoverage);
//       assertFalse(compilerOptions0.reserveRawExports);
//       assertFalse(compilerOptions0.recordFunctionInformation);
//       assertFalse(compilerOptions0.markAsCompiled);
//       assertFalse(compilerOptions0.preferLineBreakAtEndOfFile);
//       assertFalse(compilerOptions0.prettyPrint);
//       assertFalse(compilerOptions0.removeUnusedLocalVars);
//       assertFalse(compilerOptions0.jqueryPass);
//       assertFalse(compilerOptions0.aliasAllStrings);
//       assertFalse(compilerOptions0.collapseVariableDeclarations);
//       assertFalse(compilerOptions0.generateExports);
//       assertFalse(compilerOptions0.collapseProperties);
//       assertFalse(compilerOptions0.inlineVariables);
//       assertFalse(compilerOptions0.moveFunctionDeclarations);
//       assertFalse(compilerOptions0.ambiguateProperties);
//       assertFalse(compilerOptions0.checkControlStructures);
//       assertFalse(compilerOptions0.crossModuleMethodMotion);
//       assertFalse(compilerOptions0.checkTypes);
//       assertFalse(compilerOptions0.lineBreak);
//       assertFalse(compilerOptions0.printInputDelimiter);
//       assertFalse(compilerOptions0.removeTryCatchFinally);
//       assertFalse(compilerOptions0.optimizeArgumentsArray);
//       assertFalse(compilerOptions0.removeDeadCode);
//       assertFalse(compilerOptions0.smartNameRemoval);
//       assertFalse(compilerOptions0.crossModuleCodeMotion);
//       assertFalse(compilerOptions0.removeUnusedClassProperties);
//       assertFalse(compilerOptions0.convertToDottedProperties);
//       assertFalse(compilerOptions0.checkSymbols);
//       assertFalse(compilerOptions0.deadAssignmentElimination);
//       assertFalse(compilerOptions0.rewriteFunctionExpressions);
//       assertFalse(compilerOptions0.closurePass);
//       assertFalse(compilerOptions0.foldConstants);
//       assertFalse(compilerOptions0.aliasExternals);
//       assertFalse(compilerOptions0.devirtualizePrototypeMethods);
//       assertFalse(compilerOptions0.checkSuspiciousCode);
//       assertFalse(compilerOptions0.inlineFunctions);
//       assertFalse(compilerOptions0.exportTestFunctions);
//       assertFalse(compilerOptions0.inlineConstantVars);
//       assertFalse(compilerOptions0.collapseAnonymousFunctions);
//       assertFalse(compilerOptions0.ideMode);
//       assertFalse(compilerOptions0.removeUnusedVars);
//       assertFalse(compilerOptions0.computeFunctionSideEffects);
//       assertFalse(compilerOptions0.coalesceVariableNames);
//       assertFalse(compilerOptions0.optimizeParameters);
//       assertFalse(compilerOptions0.gatherCssNames);
//       assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
//       assertFalse(compilerOptions0.disambiguateProperties);
//       assertFalse(compilerOptions0.generatePseudoNames);
//       assertNotNull(jSModule0);
//       
//       Vector<FunctionInjector.Reference> vector0 = new Vector<FunctionInjector.Reference>();
//       assertEquals(true, vector0.isEmpty());
//       assertEquals("[]", vector0.toString());
//       assertEquals(10, vector0.capacity());
//       assertEquals(0, vector0.size());
//       assertNotNull(vector0);
//       
//       FunctionInjector.Reference functionInjector_Reference0 = new FunctionInjector.Reference(node0, jSModule0, functionInjector_InliningMode0);
//       assertEquals(false, compiler0.isTypeCheckingEnabled());
//       assertEquals(0.0, compiler0.getProgress(), 0.01D);
//       assertEquals(false, compiler0.acceptConstKeyword());
//       assertEquals(0, compiler0.getWarningCount());
//       assertEquals(false, compiler0.isIdeMode());
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
//       assertEquals(false, compiler0.hasErrors());
//       assertEquals(0, compiler0.getErrorCount());
//       assertEquals(true, node0.mayMutateArguments());
//       assertEquals(false, node0.isCatch());
//       assertEquals(false, node0.isReturn());
//       assertEquals(true, node0.mayMutateGlobalStateOrThrow());
//       assertEquals(false, node0.isComma());
//       assertEquals(false, node0.isOnlyModifiesThisCall());
//       assertEquals(false, node0.isLocalResultCall());
//       assertEquals(false, node0.isDo());
//       assertEquals(false, node0.isGetterDef());
//       assertEquals(0, node0.getSideEffectFlags());
//       assertEquals(false, node0.isStringKey());
//       assertEquals(4096, node0.getSourcePosition());
//       assertEquals(false, node0.isAnd());
//       assertEquals(false, node0.isBlock());
//       assertEquals(false, node0.isFromExterns());
//       assertEquals(0, node0.getLength());
//       assertEquals(false, node0.isNew());
//       assertEquals(false, node0.isOnlyModifiesArgumentsCall());
//       assertEquals(false, node0.isString());
//       assertEquals("[testcode]", node0.getSourceFileName());
//       assertEquals(false, node0.wasEmptyNode());
//       assertEquals(false, node0.isGetElem());
//       assertEquals(false, node0.isThrow());
//       assertEquals(false, node0.isNE());
//       assertEquals(false, node0.isDelProp());
//       assertEquals(false, node0.isDebugger());
//       assertEquals(false, node0.isContinue());
//       assertEquals(true, node0.isScript());
//       assertEquals(false, node0.isOptionalArg());
//       assertEquals(true, node0.hasChildren());
//       assertEquals(false, node0.isWhile());
//       assertEquals(false, node0.isInc());
//       assertEquals(false, node0.hasMoreThanOneChild());
//       assertEquals(false, node0.isTrue());
//       assertEquals(false, node0.isCase());
//       assertEquals(true, node0.hasOneChild());
//       assertEquals(false, node0.isNoSideEffectsCall());
//       assertEquals(false, node0.isObjectLit());
//       assertEquals(false, node0.isSetterDef());
//       assertEquals(false, node0.isDefaultCase());
//       assertEquals(false, node0.isVar());
//       assertEquals(false, node0.isExprResult());
//       assertEquals(false, node0.isVarArgs());
//       assertEquals(false, node0.isInstanceOf());
//       assertEquals(false, node0.isFunction());
//       assertEquals(false, node0.isAdd());
//       assertEquals(false, node0.isThis());
//       assertEquals(false, node0.isFor());
//       assertEquals(false, node0.isGetProp());
//       assertEquals(1, node0.getLineno());
//       assertEquals(0, node0.getCharno());
//       assertEquals(false, node0.isLabelName());
//       assertEquals(false, node0.isVoid());
//       assertEquals(false, node0.isFalse());
//       assertEquals(false, node0.isIn());
//       assertEquals(false, node0.isCast());
//       assertEquals(false, node0.isOr());
//       assertEquals(false, node0.isIf());
//       assertEquals(false, node0.isSwitch());
//       assertEquals(false, node0.isLabel());
//       assertEquals(false, node0.isNull());
//       assertEquals(false, node0.isBreak());
//       assertEquals(1, node0.getChildCount());
//       assertEquals(0, node0.getChangeTime());
//       assertEquals(false, node0.isAssign());
//       assertEquals(false, node0.isName());
//       assertEquals(false, node0.isAssignAdd());
//       assertEquals(132, node0.getType());
//       assertEquals(false, node0.isParamList());
//       assertEquals(true, node0.isSyntheticBlock());
//       assertEquals(false, node0.isNumber());
//       assertEquals(false, node0.isQuotedString());
//       assertEquals(false, node0.isArrayLit());
//       assertEquals(false, node0.isTypeOf());
//       assertEquals(false, node0.isRegExp());
//       assertEquals(false, node0.isTry());
//       assertEquals(false, node0.isNot());
//       assertEquals(false, node0.isWith());
//       assertEquals(false, node0.isHook());
//       assertEquals(false, node0.isEmpty());
//       assertEquals(false, node0.isCall());
//       assertEquals(false, node0.isDec());
//       assertEquals(false, compilerOptions0.assumeClosuresOnlyCaptureReferences());
//       assertEquals(CompilerOptions.TweakProcessing.OFF, compilerOptions0.getTweakProcessing());
//       assertEquals(false, compilerOptions0.getInferTypes());
//       assertEquals(false, compilerOptions0.isExternExportsEnabled());
//       assertNull(compilerOptions0.getLanguageOut());
//       assertEquals(false, compilerOptions0.getCheckDeterminism());
//       assertEquals(false, compilerOptions0.assumeStrictThis());
//       assertEquals(false, compilerOptions0.isDisambiguatePrivateProperties());
//       assertEquals(false, compilerOptions0.getInstrumentMemoryAllocations());
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compilerOptions0.getLanguageIn());
//       assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
//       assertEquals(CompilerOptions.TracerMode.OFF, compilerOptions0.getTracerMode());
//       assertEquals(false, compilerOptions0.isRemoveUnusedClassProperties());
//       assertEquals(CheckEventfulObjectDisposal.DisposalCheckingPolicy.OFF, compilerOptions0.getCheckEventfulObjectDisposalPolicy());
//       assertNull(jSModule0.getName());
//       assertNull(jSModule0.toString());
//       assertEquals(-1, jSModule0.getDepth());
//       assertFalse(compilerOptions0.inlineLocalFunctions);
//       assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
//       assertFalse(compilerOptions0.flowSensitiveInlineVariables);
//       assertFalse(compilerOptions0.aliasKeywords);
//       assertFalse(compilerOptions0.optimizeCalls);
//       assertFalse(compilerOptions0.optimizeReturns);
//       assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
//       assertFalse(compilerOptions0.markNoSideEffectCalls);
//       assertFalse(compilerOptions0.inlineGetters);
//       assertFalse(compilerOptions0.labelRenaming);
//       assertFalse(compilerOptions0.instrumentForCoverage);
//       assertFalse(compilerOptions0.reserveRawExports);
//       assertFalse(compilerOptions0.recordFunctionInformation);
//       assertFalse(compilerOptions0.markAsCompiled);
//       assertFalse(compilerOptions0.preferLineBreakAtEndOfFile);
//       assertFalse(compilerOptions0.prettyPrint);
//       assertFalse(compilerOptions0.removeUnusedLocalVars);
//       assertFalse(compilerOptions0.jqueryPass);
//       assertFalse(compilerOptions0.aliasAllStrings);
//       assertFalse(compilerOptions0.collapseVariableDeclarations);
//       assertFalse(compilerOptions0.generateExports);
//       assertFalse(compilerOptions0.collapseProperties);
//       assertFalse(compilerOptions0.inlineVariables);
//       assertFalse(compilerOptions0.moveFunctionDeclarations);
//       assertFalse(compilerOptions0.ambiguateProperties);
//       assertFalse(compilerOptions0.checkControlStructures);
//       assertFalse(compilerOptions0.crossModuleMethodMotion);
//       assertFalse(compilerOptions0.checkTypes);
//       assertFalse(compilerOptions0.lineBreak);
//       assertFalse(compilerOptions0.printInputDelimiter);
//       assertFalse(compilerOptions0.removeTryCatchFinally);
//       assertFalse(compilerOptions0.optimizeArgumentsArray);
//       assertFalse(compilerOptions0.removeDeadCode);
//       assertFalse(compilerOptions0.smartNameRemoval);
//       assertFalse(compilerOptions0.crossModuleCodeMotion);
//       assertFalse(compilerOptions0.removeUnusedClassProperties);
//       assertFalse(compilerOptions0.convertToDottedProperties);
//       assertFalse(compilerOptions0.checkSymbols);
//       assertFalse(compilerOptions0.deadAssignmentElimination);
//       assertFalse(compilerOptions0.rewriteFunctionExpressions);
//       assertFalse(compilerOptions0.closurePass);
//       assertFalse(compilerOptions0.foldConstants);
//       assertFalse(compilerOptions0.aliasExternals);
//       assertFalse(compilerOptions0.devirtualizePrototypeMethods);
//       assertFalse(compilerOptions0.checkSuspiciousCode);
//       assertFalse(compilerOptions0.inlineFunctions);
//       assertFalse(compilerOptions0.exportTestFunctions);
//       assertFalse(compilerOptions0.inlineConstantVars);
//       assertFalse(compilerOptions0.collapseAnonymousFunctions);
//       assertFalse(compilerOptions0.ideMode);
//       assertFalse(compilerOptions0.removeUnusedVars);
//       assertFalse(compilerOptions0.computeFunctionSideEffects);
//       assertFalse(compilerOptions0.coalesceVariableNames);
//       assertFalse(compilerOptions0.optimizeParameters);
//       assertFalse(compilerOptions0.gatherCssNames);
//       assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
//       assertFalse(compilerOptions0.disambiguateProperties);
//       assertFalse(compilerOptions0.generatePseudoNames);
//       assertNotNull(functionInjector_Reference0);
//       
//       boolean boolean1 = vector0.add(functionInjector_Reference0);
//       assertEquals(false, compiler0.isTypeCheckingEnabled());
//       assertEquals(0.0, compiler0.getProgress(), 0.01D);
//       assertEquals(false, compiler0.acceptConstKeyword());
//       assertEquals(0, compiler0.getWarningCount());
//       assertEquals(false, compiler0.isIdeMode());
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
//       assertEquals(false, compiler0.hasErrors());
//       assertEquals(0, compiler0.getErrorCount());
//       assertEquals(true, node0.mayMutateArguments());
//       assertEquals(false, node0.isCatch());
//       assertEquals(false, node0.isReturn());
//       assertEquals(true, node0.mayMutateGlobalStateOrThrow());
//       assertEquals(false, node0.isComma());
//       assertEquals(false, node0.isOnlyModifiesThisCall());
//       assertEquals(false, node0.isLocalResultCall());
//       assertEquals(false, node0.isDo());
//       assertEquals(false, node0.isGetterDef());
//       assertEquals(0, node0.getSideEffectFlags());
//       assertEquals(false, node0.isStringKey());
//       assertEquals(4096, node0.getSourcePosition());
//       assertEquals(false, node0.isAnd());
//       assertEquals(false, node0.isBlock());
//       assertEquals(false, node0.isFromExterns());
//       assertEquals(0, node0.getLength());
//       assertEquals(false, node0.isNew());
//       assertEquals(false, node0.isOnlyModifiesArgumentsCall());
//       assertEquals(false, node0.isString());
//       assertEquals("[testcode]", node0.getSourceFileName());
//       assertEquals(false, node0.wasEmptyNode());
//       assertEquals(false, node0.isGetElem());
//       assertEquals(false, node0.isThrow());
//       assertEquals(false, node0.isNE());
//       assertEquals(false, node0.isDelProp());
//       assertEquals(false, node0.isDebugger());
//       assertEquals(false, node0.isContinue());
//       assertEquals(true, node0.isScript());
//       assertEquals(false, node0.isOptionalArg());
//       assertEquals(true, node0.hasChildren());
//       assertEquals(false, node0.isWhile());
//       assertEquals(false, node0.isInc());
//       assertEquals(false, node0.hasMoreThanOneChild());
//       assertEquals(false, node0.isTrue());
//       assertEquals(false, node0.isCase());
//       assertEquals(true, node0.hasOneChild());
//       assertEquals(false, node0.isNoSideEffectsCall());
//       assertEquals(false, node0.isObjectLit());
//       assertEquals(false, node0.isSetterDef());
//       assertEquals(false, node0.isDefaultCase());
//       assertEquals(false, node0.isVar());
//       assertEquals(false, node0.isExprResult());
//       assertEquals(false, node0.isVarArgs());
//       assertEquals(false, node0.isInstanceOf());
//       assertEquals(false, node0.isFunction());
//       assertEquals(false, node0.isAdd());
//       assertEquals(false, node0.isThis());
//       assertEquals(false, node0.isFor());
//       assertEquals(false, node0.isGetProp());
//       assertEquals(1, node0.getLineno());
//       assertEquals(0, node0.getCharno());
//       assertEquals(false, node0.isLabelName());
//       assertEquals(false, node0.isVoid());
//       assertEquals(false, node0.isFalse());
//       assertEquals(false, node0.isIn());
//       assertEquals(false, node0.isCast());
//       assertEquals(false, node0.isOr());
//       assertEquals(false, node0.isIf());
//       assertEquals(false, node0.isSwitch());
//       assertEquals(false, node0.isLabel());
//       assertEquals(false, node0.isNull());
//       assertEquals(false, node0.isBreak());
//       assertEquals(1, node0.getChildCount());
//       assertEquals(0, node0.getChangeTime());
//       assertEquals(false, node0.isAssign());
//       assertEquals(false, node0.isName());
//       assertEquals(false, node0.isAssignAdd());
//       assertEquals(132, node0.getType());
//       assertEquals(false, node0.isParamList());
//       assertEquals(true, node0.isSyntheticBlock());
//       assertEquals(false, node0.isNumber());
//       assertEquals(false, node0.isQuotedString());
//       assertEquals(false, node0.isArrayLit());
//       assertEquals(false, node0.isTypeOf());
//       assertEquals(false, node0.isRegExp());
//       assertEquals(false, node0.isTry());
//       assertEquals(false, node0.isNot());
//       assertEquals(false, node0.isWith());
//       assertEquals(false, node0.isHook());
//       assertEquals(false, node0.isEmpty());
//       assertEquals(false, node0.isCall());
//       assertEquals(false, node0.isDec());
//       assertEquals(1, vector0.size());
//       assertEquals(false, vector0.isEmpty());
//       assertEquals(10, vector0.capacity());
//       assertEquals(false, compilerOptions0.assumeClosuresOnlyCaptureReferences());
//       assertEquals(CompilerOptions.TweakProcessing.OFF, compilerOptions0.getTweakProcessing());
//       assertEquals(false, compilerOptions0.getInferTypes());
//       assertEquals(false, compilerOptions0.isExternExportsEnabled());
//       assertNull(compilerOptions0.getLanguageOut());
//       assertEquals(false, compilerOptions0.getCheckDeterminism());
//       assertEquals(false, compilerOptions0.assumeStrictThis());
//       assertEquals(false, compilerOptions0.isDisambiguatePrivateProperties());
//       assertEquals(false, compilerOptions0.getInstrumentMemoryAllocations());
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compilerOptions0.getLanguageIn());
//       assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
//       assertEquals(CompilerOptions.TracerMode.OFF, compilerOptions0.getTracerMode());
//       assertEquals(false, compilerOptions0.isRemoveUnusedClassProperties());
//       assertEquals(CheckEventfulObjectDisposal.DisposalCheckingPolicy.OFF, compilerOptions0.getCheckEventfulObjectDisposalPolicy());
//       assertNull(jSModule0.getName());
//       assertNull(jSModule0.toString());
//       assertEquals(-1, jSModule0.getDepth());
//       assertFalse(compilerOptions0.inlineLocalFunctions);
//       assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
//       assertFalse(compilerOptions0.flowSensitiveInlineVariables);
//       assertFalse(compilerOptions0.aliasKeywords);
//       assertFalse(compilerOptions0.optimizeCalls);
//       assertFalse(compilerOptions0.optimizeReturns);
//       assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
//       assertFalse(compilerOptions0.markNoSideEffectCalls);
//       assertFalse(compilerOptions0.inlineGetters);
//       assertFalse(compilerOptions0.labelRenaming);
//       assertFalse(compilerOptions0.instrumentForCoverage);
//       assertFalse(compilerOptions0.reserveRawExports);
//       assertFalse(compilerOptions0.recordFunctionInformation);
//       assertFalse(compilerOptions0.markAsCompiled);
//       assertFalse(compilerOptions0.preferLineBreakAtEndOfFile);
//       assertFalse(compilerOptions0.prettyPrint);
//       assertFalse(compilerOptions0.removeUnusedLocalVars);
//       assertFalse(compilerOptions0.jqueryPass);
//       assertFalse(compilerOptions0.aliasAllStrings);
//       assertFalse(compilerOptions0.collapseVariableDeclarations);
//       assertFalse(compilerOptions0.generateExports);
//       assertFalse(compilerOptions0.collapseProperties);
//       assertFalse(compilerOptions0.inlineVariables);
//       assertFalse(compilerOptions0.moveFunctionDeclarations);
//       assertFalse(compilerOptions0.ambiguateProperties);
//       assertFalse(compilerOptions0.checkControlStructures);
//       assertFalse(compilerOptions0.crossModuleMethodMotion);
//       assertFalse(compilerOptions0.checkTypes);
//       assertFalse(compilerOptions0.lineBreak);
//       assertFalse(compilerOptions0.printInputDelimiter);
//       assertFalse(compilerOptions0.removeTryCatchFinally);
//       assertFalse(compilerOptions0.optimizeArgumentsArray);
//       assertFalse(compilerOptions0.removeDeadCode);
//       assertFalse(compilerOptions0.smartNameRemoval);
//       assertFalse(compilerOptions0.crossModuleCodeMotion);
//       assertFalse(compilerOptions0.removeUnusedClassProperties);
//       assertFalse(compilerOptions0.convertToDottedProperties);
//       assertFalse(compilerOptions0.checkSymbols);
//       assertFalse(compilerOptions0.deadAssignmentElimination);
//       assertFalse(compilerOptions0.rewriteFunctionExpressions);
//       assertFalse(compilerOptions0.closurePass);
//       assertFalse(compilerOptions0.foldConstants);
//       assertFalse(compilerOptions0.aliasExternals);
//       assertFalse(compilerOptions0.devirtualizePrototypeMethods);
//       assertFalse(compilerOptions0.checkSuspiciousCode);
//       assertFalse(compilerOptions0.inlineFunctions);
//       assertFalse(compilerOptions0.exportTestFunctions);
//       assertFalse(compilerOptions0.inlineConstantVars);
//       assertFalse(compilerOptions0.collapseAnonymousFunctions);
//       assertFalse(compilerOptions0.ideMode);
//       assertFalse(compilerOptions0.removeUnusedVars);
//       assertFalse(compilerOptions0.computeFunctionSideEffects);
//       assertFalse(compilerOptions0.coalesceVariableNames);
//       assertFalse(compilerOptions0.optimizeParameters);
//       assertFalse(compilerOptions0.gatherCssNames);
//       assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
//       assertFalse(compilerOptions0.disambiguateProperties);
//       assertFalse(compilerOptions0.generatePseudoNames);
//       assertFalse(boolean1 == boolean0);
//       assertTrue(boolean1);
//       
//       // Undeclared exception!
//       try {
//         boolean boolean2 = functionInjector0.inliningLowersCost(jSModule0, node0, vector0, compilerOptions0.stripNamePrefixes, compilerOptions0.aliasAllStrings, compilerOptions0.generateExports);
//         fail("Expecting exception: IllegalArgumentException");
//       
//       } catch(IllegalArgumentException e) {
//          //
//          // no message in exception (getMessage() returned null)
//          //
//       }
//   }

  @Test
  public void test2() {}
//   @Test
//   public void test2()  throws Throwable  {
//       Compiler compiler0 = new Compiler();
//       assertEquals(0.0, compiler0.getProgress(), 0.01D);
//       assertNotNull(compiler0);
//       
//       Supplier<String> supplier0 = compiler0.getUniqueNameIdSupplier();
//       assertEquals(0.0, compiler0.getProgress(), 0.01D);
//       assertNotNull(supplier0);
//       
//       boolean boolean0 = false;
//       FunctionInjector functionInjector0 = new FunctionInjector((AbstractCompiler) compiler0, supplier0, boolean0, boolean0, boolean0);
//       assertEquals(0.0, compiler0.getProgress(), 0.01D);
//       assertNotNull(functionInjector0);
//       
//       StrictModeCheck strictModeCheck0 = new StrictModeCheck(compiler0, boolean0, boolean0);
//       assertEquals(0.0, compiler0.getProgress(), 0.01D);
//       assertNotNull(strictModeCheck0);
//       
//       ScopeCreator scopeCreator0 = null;
//       NodeTraversal nodeTraversal0 = new NodeTraversal((AbstractCompiler) compiler0, (NodeTraversal.Callback) strictModeCheck0, scopeCreator0);
//       assertEquals(0.0, compiler0.getProgress(), 0.01D);
//       assertEquals("", nodeTraversal0.getSourceName());
//       assertEquals(0, nodeTraversal0.getLineNumber());
//       assertNotNull(nodeTraversal0);
//       
//       String string0 = "string";
//       Node node0 = compiler0.parseTestCode(string0);
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
//       assertEquals(false, compiler0.acceptConstKeyword());
//       assertEquals(0, compiler0.getWarningCount());
//       assertEquals(0, compiler0.getErrorCount());
//       assertEquals(false, compiler0.isTypeCheckingEnabled());
//       assertEquals(false, compiler0.isIdeMode());
//       assertEquals(false, compiler0.hasErrors());
//       assertEquals(0.0, compiler0.getProgress(), 0.01D);
//       assertEquals(0, node0.getSideEffectFlags());
//       assertEquals("[testcode]", node0.getSourceFileName());
//       assertEquals(false, node0.isBlock());
//       assertEquals(false, node0.isOr());
//       assertEquals(1, node0.getChildCount());
//       assertEquals(false, node0.isNull());
//       assertEquals(false, node0.isLabel());
//       assertEquals(false, node0.isObjectLit());
//       assertEquals(false, node0.isIn());
//       assertEquals(false, node0.isDec());
//       assertEquals(false, node0.isLabelName());
//       assertEquals(false, node0.isAssignAdd());
//       assertEquals(false, node0.isTrue());
//       assertEquals(false, node0.isCast());
//       assertEquals(false, node0.isIf());
//       assertEquals(false, node0.isAssign());
//       assertEquals(false, node0.isReturn());
//       assertEquals(false, node0.isVarArgs());
//       assertEquals(false, node0.isNoSideEffectsCall());
//       assertEquals(false, node0.isHook());
//       assertEquals(false, node0.isDelProp());
//       assertEquals(false, node0.isWith());
//       assertEquals(false, node0.isOnlyModifiesArgumentsCall());
//       assertEquals(false, node0.isArrayLit());
//       assertEquals(false, node0.isCall());
//       assertEquals(false, node0.isOnlyModifiesThisCall());
//       assertEquals(true, node0.mayMutateArguments());
//       assertEquals(false, node0.isFromExterns());
//       assertEquals(false, node0.isVoid());
//       assertEquals(0, node0.getLength());
//       assertEquals(false, node0.isEmpty());
//       assertEquals(false, node0.hasMoreThanOneChild());
//       assertEquals(false, node0.isVar());
//       assertEquals(false, node0.isStringKey());
//       assertEquals(true, node0.mayMutateGlobalStateOrThrow());
//       assertEquals(false, node0.isOptionalArg());
//       assertEquals(false, node0.isTypeOf());
//       assertEquals(false, node0.isAnd());
//       assertEquals(true, node0.isScript());
//       assertEquals(false, node0.isThrow());
//       assertEquals(false, node0.isDebugger());
//       assertEquals(false, node0.isContinue());
//       assertEquals(false, node0.isInstanceOf());
//       assertEquals(132, node0.getType());
//       assertEquals(false, node0.isComma());
//       assertEquals(4096, node0.getSourcePosition());
//       assertEquals(false, node0.isQuotedString());
//       assertEquals(false, node0.isRegExp());
//       assertEquals(false, node0.isThis());
//       assertEquals(false, node0.isSetterDef());
//       assertEquals(false, node0.isGetProp());
//       assertEquals(false, node0.isExprResult());
//       assertEquals(false, node0.isCatch());
//       assertEquals(1, node0.getLineno());
//       assertEquals(false, node0.isGetElem());
//       assertEquals(false, node0.isNumber());
//       assertEquals(false, node0.isDo());
//       assertEquals(false, node0.isFor());
//       assertEquals(false, node0.isNE());
//       assertEquals(false, node0.isNew());
//       assertEquals(false, node0.isParamList());
//       assertEquals(false, node0.isDefaultCase());
//       assertEquals(0, node0.getChangeTime());
//       assertEquals(true, node0.isSyntheticBlock());
//       assertEquals(false, node0.isFalse());
//       assertEquals(false, node0.isSwitch());
//       assertEquals(false, node0.isFunction());
//       assertEquals(true, node0.hasOneChild());
//       assertEquals(false, node0.isGetterDef());
//       assertEquals(false, node0.isTry());
//       assertEquals(true, node0.hasChildren());
//       assertEquals(0, node0.getCharno());
//       assertEquals(false, node0.isNot());
//       assertEquals(false, node0.wasEmptyNode());
//       assertEquals(false, node0.isLocalResultCall());
//       assertEquals(false, node0.isWhile());
//       assertEquals(false, node0.isName());
//       assertEquals(false, node0.isCase());
//       assertEquals(false, node0.isInc());
//       assertEquals(false, node0.isAdd());
//       assertEquals(false, node0.isBreak());
//       assertEquals(false, node0.isString());
//       assertNotNull(node0);
//       
//       node0.addChildrenToFront(node0);
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
//       assertEquals(false, compiler0.acceptConstKeyword());
//       assertEquals(0, compiler0.getWarningCount());
//       assertEquals(0, compiler0.getErrorCount());
//       assertEquals(false, compiler0.isTypeCheckingEnabled());
//       assertEquals(false, compiler0.isIdeMode());
//       assertEquals(false, compiler0.hasErrors());
//       assertEquals(0.0, compiler0.getProgress(), 0.01D);
//       assertEquals(0, node0.getSideEffectFlags());
//       assertEquals("[testcode]", node0.getSourceFileName());
//       assertEquals(false, node0.isBlock());
//       assertEquals(false, node0.isOr());
//       assertEquals(false, node0.isNull());
//       assertEquals(false, node0.isLabel());
//       assertEquals(false, node0.isObjectLit());
//       assertEquals(false, node0.isIn());
//       assertEquals(false, node0.isDec());
//       assertEquals(false, node0.isLabelName());
//       assertEquals(false, node0.isAssignAdd());
//       assertEquals(false, node0.isTrue());
//       assertEquals(false, node0.isCast());
//       assertEquals(false, node0.isIf());
//       assertEquals(false, node0.isAssign());
//       assertEquals(false, node0.isReturn());
//       assertEquals(false, node0.isVarArgs());
//       assertEquals(false, node0.isNoSideEffectsCall());
//       assertEquals(false, node0.isHook());
//       assertEquals(false, node0.isDelProp());
//       assertEquals(false, node0.isWith());
//       assertEquals(false, node0.isOnlyModifiesArgumentsCall());
//       assertEquals(false, node0.isArrayLit());
//       assertEquals(false, node0.isCall());
//       assertEquals(false, node0.isOnlyModifiesThisCall());
//       assertEquals(true, node0.mayMutateArguments());
//       assertEquals(false, node0.isFromExterns());
//       assertEquals(false, node0.isVoid());
//       assertEquals(0, node0.getLength());
//       assertEquals(false, node0.isEmpty());
//       assertEquals(false, node0.isVar());
//       assertEquals(false, node0.isStringKey());
//       assertEquals(true, node0.mayMutateGlobalStateOrThrow());
//       assertEquals(false, node0.isOptionalArg());
//       assertEquals(false, node0.isTypeOf());
//       assertEquals(false, node0.isAnd());
//       assertEquals(true, node0.isScript());
//       assertEquals(false, node0.isThrow());
//       assertEquals(false, node0.isDebugger());
//       assertEquals(false, node0.isContinue());
//       assertEquals(false, node0.isInstanceOf());
//       assertEquals(132, node0.getType());
//       assertEquals(false, node0.isComma());
//       assertEquals(4096, node0.getSourcePosition());
//       assertEquals(false, node0.isQuotedString());
//       assertEquals(false, node0.isRegExp());
//       assertEquals(false, node0.isThis());
//       assertEquals(false, node0.isSetterDef());
//       assertEquals(false, node0.isGetProp());
//       assertEquals(false, node0.isExprResult());
//       assertEquals(false, node0.hasOneChild());
//       assertEquals(false, node0.isCatch());
//       assertEquals(1, node0.getLineno());
//       assertEquals(false, node0.isGetElem());
//       assertEquals(false, node0.isNumber());
//       assertEquals(false, node0.isDo());
//       assertEquals(false, node0.isFor());
//       assertEquals(false, node0.isNE());
//       assertEquals(false, node0.isNew());
//       assertEquals(false, node0.isParamList());
//       assertEquals(false, node0.isDefaultCase());
//       assertEquals(0, node0.getChangeTime());
//       assertEquals(true, node0.isSyntheticBlock());
//       assertEquals(false, node0.isFalse());
//       assertEquals(false, node0.isSwitch());
//       assertEquals(false, node0.isFunction());
//       assertEquals(false, node0.isGetterDef());
//       assertEquals(false, node0.isTry());
//       assertEquals(2, node0.getChildCount());
//       assertEquals(true, node0.hasChildren());
//       assertEquals(true, node0.hasMoreThanOneChild());
//       assertEquals(0, node0.getCharno());
//       assertEquals(false, node0.isNot());
//       assertEquals(false, node0.wasEmptyNode());
//       assertEquals(false, node0.isLocalResultCall());
//       assertEquals(false, node0.isWhile());
//       assertEquals(false, node0.isName());
//       assertEquals(false, node0.isCase());
//       assertEquals(false, node0.isInc());
//       assertEquals(false, node0.isAdd());
//       assertEquals(false, node0.isBreak());
//       assertEquals(false, node0.isString());
//       
//       CompilerOptions compilerOptions0 = new CompilerOptions();
//       assertEquals(false, compilerOptions0.assumeStrictThis());
//       assertEquals(false, compilerOptions0.getInferTypes());
//       assertEquals(false, compilerOptions0.isDisambiguatePrivateProperties());
//       assertEquals(CheckEventfulObjectDisposal.DisposalCheckingPolicy.OFF, compilerOptions0.getCheckEventfulObjectDisposalPolicy());
//       assertEquals(false, compilerOptions0.assumeClosuresOnlyCaptureReferences());
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compilerOptions0.getLanguageIn());
//       assertEquals(CompilerOptions.TracerMode.OFF, compilerOptions0.getTracerMode());
//       assertEquals(false, compilerOptions0.getCheckDeterminism());
//       assertEquals(false, compilerOptions0.getInstrumentMemoryAllocations());
//       assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
//       assertEquals(false, compilerOptions0.isExternExportsEnabled());
//       assertNull(compilerOptions0.getLanguageOut());
//       assertEquals(CompilerOptions.TweakProcessing.OFF, compilerOptions0.getTweakProcessing());
//       assertEquals(false, compilerOptions0.isRemoveUnusedClassProperties());
//       assertFalse(compilerOptions0.removeUnusedClassProperties);
//       assertFalse(compilerOptions0.removeUnusedLocalVars);
//       assertFalse(compilerOptions0.flowSensitiveInlineVariables);
//       assertFalse(compilerOptions0.checkSymbols);
//       assertFalse(compilerOptions0.collapseAnonymousFunctions);
//       assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
//       assertFalse(compilerOptions0.reserveRawExports);
//       assertFalse(compilerOptions0.prettyPrint);
//       assertFalse(compilerOptions0.labelRenaming);
//       assertFalse(compilerOptions0.deadAssignmentElimination);
//       assertFalse(compilerOptions0.aliasKeywords);
//       assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
//       assertFalse(compilerOptions0.lineBreak);
//       assertFalse(compilerOptions0.convertToDottedProperties);
//       assertFalse(compilerOptions0.optimizeReturns);
//       assertFalse(compilerOptions0.aliasAllStrings);
//       assertFalse(compilerOptions0.generateExports);
//       assertFalse(compilerOptions0.gatherCssNames);
//       assertFalse(compilerOptions0.instrumentForCoverage);
//       assertFalse(compilerOptions0.ambiguateProperties);
//       assertFalse(compilerOptions0.closurePass);
//       assertFalse(compilerOptions0.removeTryCatchFinally);
//       assertFalse(compilerOptions0.checkTypes);
//       assertFalse(compilerOptions0.smartNameRemoval);
//       assertFalse(compilerOptions0.recordFunctionInformation);
//       assertFalse(compilerOptions0.generatePseudoNames);
//       assertFalse(compilerOptions0.collapseVariableDeclarations);
//       assertFalse(compilerOptions0.crossModuleCodeMotion);
//       assertFalse(compilerOptions0.disambiguateProperties);
//       assertFalse(compilerOptions0.checkControlStructures);
//       assertFalse(compilerOptions0.inlineLocalFunctions);
//       assertFalse(compilerOptions0.devirtualizePrototypeMethods);
//       assertFalse(compilerOptions0.ideMode);
//       assertFalse(compilerOptions0.optimizeParameters);
//       assertFalse(compilerOptions0.markAsCompiled);
//       assertFalse(compilerOptions0.optimizeCalls);
//       assertFalse(compilerOptions0.foldConstants);
//       assertFalse(compilerOptions0.exportTestFunctions);
//       assertFalse(compilerOptions0.preferLineBreakAtEndOfFile);
//       assertFalse(compilerOptions0.computeFunctionSideEffects);
//       assertFalse(compilerOptions0.jqueryPass);
//       assertFalse(compilerOptions0.removeUnusedVars);
//       assertFalse(compilerOptions0.rewriteFunctionExpressions);
//       assertFalse(compilerOptions0.inlineGetters);
//       assertFalse(compilerOptions0.optimizeArgumentsArray);
//       assertFalse(compilerOptions0.printInputDelimiter);
//       assertFalse(compilerOptions0.removeDeadCode);
//       assertFalse(compilerOptions0.checkSuspiciousCode);
//       assertFalse(compilerOptions0.inlineConstantVars);
//       assertFalse(compilerOptions0.inlineVariables);
//       assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
//       assertFalse(compilerOptions0.coalesceVariableNames);
//       assertFalse(compilerOptions0.markNoSideEffectCalls);
//       assertFalse(compilerOptions0.inlineFunctions);
//       assertFalse(compilerOptions0.moveFunctionDeclarations);
//       assertFalse(compilerOptions0.aliasExternals);
//       assertFalse(compilerOptions0.crossModuleMethodMotion);
//       assertFalse(compilerOptions0.collapseProperties);
//       assertNotNull(compilerOptions0);
//       
//       FunctionInjector.InliningMode functionInjector_InliningMode0 = FunctionInjector.InliningMode.BLOCK;
//       FunctionInjector.CanInlineResult functionInjector_CanInlineResult0 = functionInjector0.canInlineReferenceToFunction(nodeTraversal0, node0, node0, compilerOptions0.stripTypePrefixes, functionInjector_InliningMode0, compilerOptions0.generatePseudoNames, compilerOptions0.inlineLocalFunctions);
//       assertEquals(false, compilerOptions0.assumeStrictThis());
//       assertEquals(false, compilerOptions0.getInferTypes());
//       assertEquals(false, compilerOptions0.isDisambiguatePrivateProperties());
//       assertEquals(CheckEventfulObjectDisposal.DisposalCheckingPolicy.OFF, compilerOptions0.getCheckEventfulObjectDisposalPolicy());
//       assertEquals(false, compilerOptions0.assumeClosuresOnlyCaptureReferences());
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compilerOptions0.getLanguageIn());
//       assertEquals(CompilerOptions.TracerMode.OFF, compilerOptions0.getTracerMode());
//       assertEquals(false, compilerOptions0.getCheckDeterminism());
//       assertEquals(false, compilerOptions0.getInstrumentMemoryAllocations());
//       assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
//       assertEquals(false, compilerOptions0.isExternExportsEnabled());
//       assertNull(compilerOptions0.getLanguageOut());
//       assertEquals(CompilerOptions.TweakProcessing.OFF, compilerOptions0.getTweakProcessing());
//       assertEquals(false, compilerOptions0.isRemoveUnusedClassProperties());
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
//       assertEquals(false, compiler0.acceptConstKeyword());
//       assertEquals(0, compiler0.getWarningCount());
//       assertEquals(0, compiler0.getErrorCount());
//       assertEquals(false, compiler0.isTypeCheckingEnabled());
//       assertEquals(false, compiler0.isIdeMode());
//       assertEquals(false, compiler0.hasErrors());
//       assertEquals(0.0, compiler0.getProgress(), 0.01D);
//       assertEquals("NO", functionInjector_CanInlineResult0.toString());
//       assertEquals("NO", functionInjector_CanInlineResult0.name());
//       assertEquals(2, functionInjector_CanInlineResult0.ordinal());
//       assertEquals(0, node0.getSideEffectFlags());
//       assertEquals("[testcode]", node0.getSourceFileName());
//       assertEquals(false, node0.isBlock());
//       assertEquals(false, node0.isOr());
//       assertEquals(false, node0.isNull());
//       assertEquals(false, node0.isLabel());
//       assertEquals(false, node0.isObjectLit());
//       assertEquals(false, node0.isIn());
//       assertEquals(false, node0.isDec());
//       assertEquals(false, node0.isLabelName());
//       assertEquals(false, node0.isAssignAdd());
//       assertEquals(false, node0.isTrue());
//       assertEquals(false, node0.isCast());
//       assertEquals(false, node0.isIf());
//       assertEquals(false, node0.isAssign());
//       assertEquals(false, node0.isReturn());
//       assertEquals(false, node0.isVarArgs());
//       assertEquals(false, node0.isNoSideEffectsCall());
//       assertEquals(false, node0.isHook());
//       assertEquals(false, node0.isDelProp());
//       assertEquals(false, node0.isWith());
//       assertEquals(false, node0.isOnlyModifiesArgumentsCall());
//       assertEquals(false, node0.isArrayLit());
//       assertEquals(false, node0.isCall());
//       assertEquals(false, node0.isOnlyModifiesThisCall());
//       assertEquals(true, node0.mayMutateArguments());
//       assertEquals(false, node0.isFromExterns());
//       assertEquals(false, node0.isVoid());
//       assertEquals(0, node0.getLength());
//       assertEquals(false, node0.isEmpty());
//       assertEquals(false, node0.isVar());
//       assertEquals(false, node0.isStringKey());
//       assertEquals(true, node0.mayMutateGlobalStateOrThrow());
//       assertEquals(false, node0.isOptionalArg());
//       assertEquals(false, node0.isTypeOf());
//       assertEquals(false, node0.isAnd());
//       assertEquals(true, node0.isScript());
//       assertEquals(false, node0.isThrow());
//       assertEquals(false, node0.isDebugger());
//       assertEquals(false, node0.isContinue());
//       assertEquals(false, node0.isInstanceOf());
//       assertEquals(132, node0.getType());
//       assertEquals(false, node0.isComma());
//       assertEquals(4096, node0.getSourcePosition());
//       assertEquals(false, node0.isQuotedString());
//       assertEquals(false, node0.isRegExp());
//       assertEquals(false, node0.isThis());
//       assertEquals(false, node0.isSetterDef());
//       assertEquals(false, node0.isGetProp());
//       assertEquals(false, node0.isExprResult());
//       assertEquals(false, node0.hasOneChild());
//       assertEquals(false, node0.isCatch());
//       assertEquals(1, node0.getLineno());
//       assertEquals(false, node0.isGetElem());
//       assertEquals(false, node0.isNumber());
//       assertEquals(false, node0.isDo());
//       assertEquals(false, node0.isFor());
//       assertEquals(false, node0.isNE());
//       assertEquals(false, node0.isNew());
//       assertEquals(false, node0.isParamList());
//       assertEquals(false, node0.isDefaultCase());
//       assertEquals(0, node0.getChangeTime());
//       assertEquals(true, node0.isSyntheticBlock());
//       assertEquals(false, node0.isFalse());
//       assertEquals(false, node0.isSwitch());
//       assertEquals(false, node0.isFunction());
//       assertEquals(false, node0.isGetterDef());
//       assertEquals(false, node0.isTry());
//       assertEquals(2, node0.getChildCount());
//       assertEquals(true, node0.hasChildren());
//       assertEquals(true, node0.hasMoreThanOneChild());
//       assertEquals(0, node0.getCharno());
//       assertEquals(false, node0.isNot());
//       assertEquals(false, node0.wasEmptyNode());
//       assertEquals(false, node0.isLocalResultCall());
//       assertEquals(false, node0.isWhile());
//       assertEquals(false, node0.isName());
//       assertEquals(false, node0.isCase());
//       assertEquals(false, node0.isInc());
//       assertEquals(false, node0.isAdd());
//       assertEquals(false, node0.isBreak());
//       assertEquals(false, node0.isString());
//       assertEquals("", nodeTraversal0.getSourceName());
//       assertEquals(0, nodeTraversal0.getLineNumber());
//       assertFalse(compilerOptions0.removeUnusedClassProperties);
//       assertFalse(compilerOptions0.removeUnusedLocalVars);
//       assertFalse(compilerOptions0.flowSensitiveInlineVariables);
//       assertFalse(compilerOptions0.checkSymbols);
//       assertFalse(compilerOptions0.collapseAnonymousFunctions);
//       assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
//       assertFalse(compilerOptions0.reserveRawExports);
//       assertFalse(compilerOptions0.prettyPrint);
//       assertFalse(compilerOptions0.labelRenaming);
//       assertFalse(compilerOptions0.deadAssignmentElimination);
//       assertFalse(compilerOptions0.aliasKeywords);
//       assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
//       assertFalse(compilerOptions0.lineBreak);
//       assertFalse(compilerOptions0.convertToDottedProperties);
//       assertFalse(compilerOptions0.optimizeReturns);
//       assertFalse(compilerOptions0.aliasAllStrings);
//       assertFalse(compilerOptions0.generateExports);
//       assertFalse(compilerOptions0.gatherCssNames);
//       assertFalse(compilerOptions0.instrumentForCoverage);
//       assertFalse(compilerOptions0.ambiguateProperties);
//       assertFalse(compilerOptions0.closurePass);
//       assertFalse(compilerOptions0.removeTryCatchFinally);
//       assertFalse(compilerOptions0.checkTypes);
//       assertFalse(compilerOptions0.smartNameRemoval);
//       assertFalse(compilerOptions0.recordFunctionInformation);
//       assertFalse(compilerOptions0.generatePseudoNames);
//       assertFalse(compilerOptions0.collapseVariableDeclarations);
//       assertFalse(compilerOptions0.crossModuleCodeMotion);
//       assertFalse(compilerOptions0.disambiguateProperties);
//       assertFalse(compilerOptions0.checkControlStructures);
//       assertFalse(compilerOptions0.inlineLocalFunctions);
//       assertFalse(compilerOptions0.devirtualizePrototypeMethods);
//       assertFalse(compilerOptions0.ideMode);
//       assertFalse(compilerOptions0.optimizeParameters);
//       assertFalse(compilerOptions0.markAsCompiled);
//       assertFalse(compilerOptions0.optimizeCalls);
//       assertFalse(compilerOptions0.foldConstants);
//       assertFalse(compilerOptions0.exportTestFunctions);
//       assertFalse(compilerOptions0.preferLineBreakAtEndOfFile);
//       assertFalse(compilerOptions0.computeFunctionSideEffects);
//       assertFalse(compilerOptions0.jqueryPass);
//       assertFalse(compilerOptions0.removeUnusedVars);
//       assertFalse(compilerOptions0.rewriteFunctionExpressions);
//       assertFalse(compilerOptions0.inlineGetters);
//       assertFalse(compilerOptions0.optimizeArgumentsArray);
//       assertFalse(compilerOptions0.printInputDelimiter);
//       assertFalse(compilerOptions0.removeDeadCode);
//       assertFalse(compilerOptions0.checkSuspiciousCode);
//       assertFalse(compilerOptions0.inlineConstantVars);
//       assertFalse(compilerOptions0.inlineVariables);
//       assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
//       assertFalse(compilerOptions0.coalesceVariableNames);
//       assertFalse(compilerOptions0.markNoSideEffectCalls);
//       assertFalse(compilerOptions0.inlineFunctions);
//       assertFalse(compilerOptions0.moveFunctionDeclarations);
//       assertFalse(compilerOptions0.aliasExternals);
//       assertFalse(compilerOptions0.crossModuleMethodMotion);
//       assertFalse(compilerOptions0.collapseProperties);
//   }

  @Test
  public void test3()  throws Throwable  {
      NodeUtil.MatchShallowStatement nodeUtil_MatchShallowStatement0 = new NodeUtil.MatchShallowStatement();
      assertNotNull(nodeUtil_MatchShallowStatement0);
      
      boolean boolean0 = nodeUtil_MatchShallowStatement0.equals((Object) nodeUtil_MatchShallowStatement0);
      assertTrue(boolean0);
      
      Compiler compiler0 = new Compiler();
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertNotNull(compiler0);
      
      AbstractCompiler.LifeCycleStage abstractCompiler_LifeCycleStage0 = AbstractCompiler.LifeCycleStage.NORMALIZED;
      compiler0.setLifeCycleStage(abstractCompiler_LifeCycleStage0);
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      
      Supplier<String> supplier0 = compiler0.getUniqueNameIdSupplier();
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertNotNull(supplier0);
      
      FunctionInjector functionInjector0 = new FunctionInjector((AbstractCompiler) compiler0, supplier0, boolean0, boolean0, boolean0);
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertNotNull(functionInjector0);
      
      int int0 = (-1533);
      Node node0 = new Node(int0, int0, int0);
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isScript());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isFromExterns());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isCall());
      assertEquals(-1533, node0.getType());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isStringKey());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isNull());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isWhile());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isCast());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isString());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(0, node0.getChangeTime());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isComma());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isArrayLit());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isOnlyModifiesArgumentsCall());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isAnd());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isOr());
      assertEquals(true, node0.mayMutateArguments());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isSwitch());
      assertEquals(true, node0.mayMutateGlobalStateOrThrow());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isBlock());
      assertNotNull(node0);
      
      String string0 = "!YZ]";
      FunctionInjector.InliningMode functionInjector_InliningMode0 = FunctionInjector.InliningMode.BLOCK;
      // Undeclared exception!
      try {
        Node node1 = functionInjector0.inline(node0, string0, node0, functionInjector_InliningMode0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test4() {}
//   @Test
//   public void test4()  throws Throwable  {
//       Compiler compiler0 = new Compiler();
//       assertEquals(0.0, compiler0.getProgress(), 0.01D);
//       assertNotNull(compiler0);
//       
//       Supplier<String> supplier0 = compiler0.getUniqueNameIdSupplier();
//       assertEquals(0.0, compiler0.getProgress(), 0.01D);
//       assertNotNull(supplier0);
//       
//       boolean boolean0 = true;
//       FunctionInjector functionInjector0 = new FunctionInjector((AbstractCompiler) compiler0, supplier0, boolean0, boolean0, boolean0);
//       assertEquals(0.0, compiler0.getProgress(), 0.01D);
//       assertNotNull(functionInjector0);
//       
//       StrictModeCheck strictModeCheck0 = new StrictModeCheck(compiler0, boolean0, boolean0);
//       assertEquals(0.0, compiler0.getProgress(), 0.01D);
//       assertNotNull(strictModeCheck0);
//       
//       ScopeCreator scopeCreator0 = null;
//       NodeTraversal nodeTraversal0 = new NodeTraversal((AbstractCompiler) compiler0, (NodeTraversal.Callback) strictModeCheck0, scopeCreator0);
//       assertEquals(0, nodeTraversal0.getLineNumber());
//       assertEquals("", nodeTraversal0.getSourceName());
//       assertEquals(0.0, compiler0.getProgress(), 0.01D);
//       assertNotNull(nodeTraversal0);
//       
//       String string0 = "string";
//       Node node0 = compiler0.parseTestCode(string0);
//       assertEquals(false, node0.isGetElem());
//       assertEquals(false, node0.isSwitch());
//       assertEquals(false, node0.isOnlyModifiesThisCall());
//       assertEquals(true, node0.hasOneChild());
//       assertEquals(false, node0.isOnlyModifiesArgumentsCall());
//       assertEquals(false, node0.isNull());
//       assertEquals(false, node0.isQuotedString());
//       assertEquals(false, node0.isGetProp());
//       assertEquals(false, node0.isParamList());
//       assertEquals(true, node0.isScript());
//       assertEquals(false, node0.isWith());
//       assertEquals(true, node0.hasChildren());
//       assertEquals(false, node0.isThrow());
//       assertEquals(false, node0.isNew());
//       assertEquals(false, node0.isStringKey());
//       assertEquals(false, node0.isFor());
//       assertEquals(false, node0.isCall());
//       assertEquals(false, node0.isNoSideEffectsCall());
//       assertEquals(false, node0.isName());
//       assertEquals(false, node0.isVoid());
//       assertEquals(false, node0.isRegExp());
//       assertEquals(false, node0.isIf());
//       assertEquals(0, node0.getSideEffectFlags());
//       assertEquals("[testcode]", node0.getSourceFileName());
//       assertEquals(false, node0.isBlock());
//       assertEquals(false, node0.isInc());
//       assertEquals(false, node0.isLocalResultCall());
//       assertEquals(false, node0.isComma());
//       assertEquals(false, node0.isInstanceOf());
//       assertEquals(false, node0.isString());
//       assertEquals(0, node0.getCharno());
//       assertEquals(false, node0.isNumber());
//       assertEquals(false, node0.isCatch());
//       assertEquals(false, node0.isIn());
//       assertEquals(false, node0.isLabel());
//       assertEquals(false, node0.hasMoreThanOneChild());
//       assertEquals(false, node0.isFalse());
//       assertEquals(false, node0.isNE());
//       assertEquals(false, node0.isDefaultCase());
//       assertEquals(false, node0.isHook());
//       assertEquals(false, node0.isDo());
//       assertEquals(false, node0.isTry());
//       assertEquals(132, node0.getType());
//       assertEquals(1, node0.getChildCount());
//       assertEquals(false, node0.isCase());
//       assertEquals(false, node0.isArrayLit());
//       assertEquals(false, node0.isCast());
//       assertEquals(false, node0.isVarArgs());
//       assertEquals(false, node0.isAdd());
//       assertEquals(0, node0.getLength());
//       assertEquals(false, node0.isThis());
//       assertEquals(false, node0.isSetterDef());
//       assertEquals(false, node0.isExprResult());
//       assertEquals(false, node0.isEmpty());
//       assertEquals(false, node0.isFromExterns());
//       assertEquals(false, node0.isReturn());
//       assertEquals(false, node0.isOptionalArg());
//       assertEquals(true, node0.mayMutateGlobalStateOrThrow());
//       assertEquals(false, node0.isContinue());
//       assertEquals(1, node0.getLineno());
//       assertEquals(false, node0.isNot());
//       assertEquals(false, node0.isObjectLit());
//       assertEquals(false, node0.isFunction());
//       assertEquals(false, node0.isAssign());
//       assertEquals(false, node0.isDelProp());
//       assertEquals(4096, node0.getSourcePosition());
//       assertEquals(false, node0.isBreak());
//       assertEquals(false, node0.isTrue());
//       assertEquals(0, node0.getChangeTime());
//       assertEquals(false, node0.isGetterDef());
//       assertEquals(false, node0.isAnd());
//       assertEquals(false, node0.isWhile());
//       assertEquals(false, node0.isDebugger());
//       assertEquals(false, node0.isVar());
//       assertEquals(true, node0.isSyntheticBlock());
//       assertEquals(false, node0.isDec());
//       assertEquals(true, node0.mayMutateArguments());
//       assertEquals(false, node0.isAssignAdd());
//       assertEquals(false, node0.isLabelName());
//       assertEquals(false, node0.isTypeOf());
//       assertEquals(false, node0.wasEmptyNode());
//       assertEquals(false, node0.isOr());
//       assertEquals(false, compiler0.isIdeMode());
//       assertEquals(0, compiler0.getWarningCount());
//       assertEquals(false, compiler0.acceptConstKeyword());
//       assertEquals(false, compiler0.isTypeCheckingEnabled());
//       assertEquals(0.0, compiler0.getProgress(), 0.01D);
//       assertEquals(false, compiler0.hasErrors());
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
//       assertEquals(0, compiler0.getErrorCount());
//       assertNotNull(node0);
//       
//       CompilerOptions compilerOptions0 = new CompilerOptions();
//       assertEquals(CompilerOptions.TweakProcessing.OFF, compilerOptions0.getTweakProcessing());
//       assertEquals(CompilerOptions.TracerMode.OFF, compilerOptions0.getTracerMode());
//       assertEquals(CheckEventfulObjectDisposal.DisposalCheckingPolicy.OFF, compilerOptions0.getCheckEventfulObjectDisposalPolicy());
//       assertEquals(false, compilerOptions0.getInferTypes());
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compilerOptions0.getLanguageIn());
//       assertEquals(false, compilerOptions0.getCheckDeterminism());
//       assertEquals(false, compilerOptions0.getInstrumentMemoryAllocations());
//       assertEquals(false, compilerOptions0.isRemoveUnusedClassProperties());
//       assertEquals(false, compilerOptions0.assumeClosuresOnlyCaptureReferences());
//       assertNull(compilerOptions0.getLanguageOut());
//       assertEquals(false, compilerOptions0.isDisambiguatePrivateProperties());
//       assertEquals(false, compilerOptions0.isExternExportsEnabled());
//       assertEquals(false, compilerOptions0.assumeStrictThis());
//       assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
//       assertFalse(compilerOptions0.gatherCssNames);
//       assertFalse(compilerOptions0.markAsCompiled);
//       assertFalse(compilerOptions0.collapseProperties);
//       assertFalse(compilerOptions0.inlineGetters);
//       assertFalse(compilerOptions0.crossModuleCodeMotion);
//       assertFalse(compilerOptions0.optimizeParameters);
//       assertFalse(compilerOptions0.markNoSideEffectCalls);
//       assertFalse(compilerOptions0.inlineFunctions);
//       assertFalse(compilerOptions0.ideMode);
//       assertFalse(compilerOptions0.inlineLocalFunctions);
//       assertFalse(compilerOptions0.instrumentForCoverage);
//       assertFalse(compilerOptions0.optimizeReturns);
//       assertFalse(compilerOptions0.computeFunctionSideEffects);
//       assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
//       assertFalse(compilerOptions0.ambiguateProperties);
//       assertFalse(compilerOptions0.checkSuspiciousCode);
//       assertFalse(compilerOptions0.jqueryPass);
//       assertFalse(compilerOptions0.inlineVariables);
//       assertFalse(compilerOptions0.recordFunctionInformation);
//       assertFalse(compilerOptions0.removeUnusedVars);
//       assertFalse(compilerOptions0.reserveRawExports);
//       assertFalse(compilerOptions0.inlineConstantVars);
//       assertFalse(compilerOptions0.checkSymbols);
//       assertFalse(compilerOptions0.collapseAnonymousFunctions);
//       assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
//       assertFalse(compilerOptions0.checkTypes);
//       assertFalse(compilerOptions0.devirtualizePrototypeMethods);
//       assertFalse(compilerOptions0.smartNameRemoval);
//       assertFalse(compilerOptions0.optimizeArgumentsArray);
//       assertFalse(compilerOptions0.convertToDottedProperties);
//       assertFalse(compilerOptions0.closurePass);
//       assertFalse(compilerOptions0.optimizeCalls);
//       assertFalse(compilerOptions0.flowSensitiveInlineVariables);
//       assertFalse(compilerOptions0.deadAssignmentElimination);
//       assertFalse(compilerOptions0.coalesceVariableNames);
//       assertFalse(compilerOptions0.aliasExternals);
//       assertFalse(compilerOptions0.prettyPrint);
//       assertFalse(compilerOptions0.crossModuleMethodMotion);
//       assertFalse(compilerOptions0.preferLineBreakAtEndOfFile);
//       assertFalse(compilerOptions0.collapseVariableDeclarations);
//       assertFalse(compilerOptions0.lineBreak);
//       assertFalse(compilerOptions0.foldConstants);
//       assertFalse(compilerOptions0.labelRenaming);
//       assertFalse(compilerOptions0.printInputDelimiter);
//       assertFalse(compilerOptions0.checkControlStructures);
//       assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
//       assertFalse(compilerOptions0.generatePseudoNames);
//       assertFalse(compilerOptions0.rewriteFunctionExpressions);
//       assertFalse(compilerOptions0.aliasAllStrings);
//       assertFalse(compilerOptions0.moveFunctionDeclarations);
//       assertFalse(compilerOptions0.disambiguateProperties);
//       assertFalse(compilerOptions0.removeDeadCode);
//       assertFalse(compilerOptions0.removeUnusedClassProperties);
//       assertFalse(compilerOptions0.removeUnusedLocalVars);
//       assertFalse(compilerOptions0.exportTestFunctions);
//       assertFalse(compilerOptions0.aliasKeywords);
//       assertFalse(compilerOptions0.generateExports);
//       assertFalse(compilerOptions0.removeTryCatchFinally);
//       assertNotNull(compilerOptions0);
//       
//       FunctionInjector.InliningMode functionInjector_InliningMode0 = FunctionInjector.InliningMode.DIRECT;
//       boolean boolean1 = true;
//       // Undeclared exception!
//       try {
//         FunctionInjector.CanInlineResult functionInjector_CanInlineResult0 = functionInjector0.canInlineReferenceToFunction(nodeTraversal0, node0, node0, compilerOptions0.stripTypePrefixes, functionInjector_InliningMode0, compilerOptions0.optimizeArgumentsArray, boolean1);
//         fail("Expecting exception: IllegalArgumentException");
//       
//       } catch(IllegalArgumentException e) {
//          //
//          // no message in exception (getMessage() returned null)
//          //
//       }
//   }

  @Test
  public void test5() {}
//   @Test
//   public void test5()  throws Throwable  {
//       Compiler compiler0 = new Compiler();
//       assertEquals(0.0, compiler0.getProgress(), 0.01D);
//       assertNotNull(compiler0);
//       
//       Supplier<String> supplier0 = compiler0.getUniqueNameIdSupplier();
//       assertEquals(0.0, compiler0.getProgress(), 0.01D);
//       assertNotNull(supplier0);
//       
//       boolean boolean0 = false;
//       FunctionInjector functionInjector0 = new FunctionInjector((AbstractCompiler) compiler0, supplier0, boolean0, boolean0, boolean0);
//       assertEquals(0.0, compiler0.getProgress(), 0.01D);
//       assertNotNull(functionInjector0);
//       
//       String string0 = "string";
//       Node node0 = compiler0.parseTestCode(string0);
//       assertEquals(false, node0.isDelProp());
//       assertEquals(false, node0.isEmpty());
//       assertEquals(false, node0.isThrow());
//       assertEquals(false, node0.isGetElem());
//       assertEquals(false, node0.isBreak());
//       assertEquals(false, node0.isContinue());
//       assertEquals(true, node0.hasOneChild());
//       assertEquals(false, node0.isLabelName());
//       assertEquals(false, node0.isNew());
//       assertEquals(false, node0.isReturn());
//       assertEquals(false, node0.isNumber());
//       assertEquals(false, node0.isHook());
//       assertEquals(true, node0.isSyntheticBlock());
//       assertEquals(false, node0.isNoSideEffectsCall());
//       assertEquals(false, node0.isDec());
//       assertEquals(132, node0.getType());
//       assertEquals(false, node0.isCall());
//       assertEquals(false, node0.isGetterDef());
//       assertEquals(false, node0.hasMoreThanOneChild());
//       assertEquals(false, node0.isObjectLit());
//       assertEquals(false, node0.isAssignAdd());
//       assertEquals(false, node0.isTry());
//       assertEquals(false, node0.isComma());
//       assertEquals(false, node0.isRegExp());
//       assertEquals(false, node0.wasEmptyNode());
//       assertEquals(false, node0.isTypeOf());
//       assertEquals(false, node0.isCast());
//       assertEquals(false, node0.isFromExterns());
//       assertEquals(false, node0.isBlock());
//       assertEquals(1, node0.getChildCount());
//       assertEquals(false, node0.isGetProp());
//       assertEquals(1, node0.getLineno());
//       assertEquals(false, node0.isWhile());
//       assertEquals(false, node0.isAssign());
//       assertEquals(false, node0.isDo());
//       assertEquals(4096, node0.getSourcePosition());
//       assertEquals(true, node0.isScript());
//       assertEquals(0, node0.getChangeTime());
//       assertEquals(false, node0.isString());
//       assertEquals(false, node0.isWith());
//       assertEquals("[testcode]", node0.getSourceFileName());
//       assertEquals(false, node0.isName());
//       assertEquals(false, node0.isSwitch());
//       assertEquals(false, node0.isOnlyModifiesArgumentsCall());
//       assertEquals(false, node0.isArrayLit());
//       assertEquals(false, node0.isInstanceOf());
//       assertEquals(false, node0.isCatch());
//       assertEquals(false, node0.isVoid());
//       assertEquals(false, node0.isNot());
//       assertEquals(0, node0.getLength());
//       assertEquals(false, node0.isThis());
//       assertEquals(false, node0.isAdd());
//       assertEquals(false, node0.isOnlyModifiesThisCall());
//       assertEquals(false, node0.isOr());
//       assertEquals(false, node0.isInc());
//       assertEquals(false, node0.isIf());
//       assertEquals(false, node0.isFunction());
//       assertEquals(false, node0.isNE());
//       assertEquals(false, node0.isOptionalArg());
//       assertEquals(true, node0.hasChildren());
//       assertEquals(false, node0.isFor());
//       assertEquals(false, node0.isLocalResultCall());
//       assertEquals(false, node0.isNull());
//       assertEquals(false, node0.isStringKey());
//       assertEquals(true, node0.mayMutateArguments());
//       assertEquals(false, node0.isQuotedString());
//       assertEquals(false, node0.isParamList());
//       assertEquals(0, node0.getSideEffectFlags());
//       assertEquals(false, node0.isLabel());
//       assertEquals(false, node0.isAnd());
//       assertEquals(false, node0.isVarArgs());
//       assertEquals(false, node0.isIn());
//       assertEquals(false, node0.isFalse());
//       assertEquals(false, node0.isDebugger());
//       assertEquals(false, node0.isCase());
//       assertEquals(false, node0.isVar());
//       assertEquals(0, node0.getCharno());
//       assertEquals(false, node0.isDefaultCase());
//       assertEquals(true, node0.mayMutateGlobalStateOrThrow());
//       assertEquals(false, node0.isExprResult());
//       assertEquals(false, node0.isSetterDef());
//       assertEquals(false, node0.isTrue());
//       assertEquals(false, compiler0.hasErrors());
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
//       assertEquals(0, compiler0.getErrorCount());
//       assertEquals(0, compiler0.getWarningCount());
//       assertEquals(0.0, compiler0.getProgress(), 0.01D);
//       assertEquals(false, compiler0.isTypeCheckingEnabled());
//       assertEquals(false, compiler0.isIdeMode());
//       assertEquals(false, compiler0.acceptConstKeyword());
//       assertNotNull(node0);
//       
//       node0.addChildrenToFront(node0);
//       assertEquals(false, node0.isDelProp());
//       assertEquals(false, node0.isEmpty());
//       assertEquals(false, node0.isThrow());
//       assertEquals(false, node0.isGetElem());
//       assertEquals(false, node0.isBreak());
//       assertEquals(false, node0.isContinue());
//       assertEquals(false, node0.isLabelName());
//       assertEquals(false, node0.isNew());
//       assertEquals(false, node0.isReturn());
//       assertEquals(false, node0.isNumber());
//       assertEquals(2, node0.getChildCount());
//       assertEquals(false, node0.isHook());
//       assertEquals(true, node0.isSyntheticBlock());
//       assertEquals(false, node0.isNoSideEffectsCall());
//       assertEquals(false, node0.isDec());
//       assertEquals(132, node0.getType());
//       assertEquals(false, node0.isCall());
//       assertEquals(false, node0.isGetterDef());
//       assertEquals(false, node0.isObjectLit());
//       assertEquals(false, node0.isAssignAdd());
//       assertEquals(false, node0.isTry());
//       assertEquals(false, node0.isComma());
//       assertEquals(false, node0.isRegExp());
//       assertEquals(false, node0.wasEmptyNode());
//       assertEquals(false, node0.isTypeOf());
//       assertEquals(false, node0.isCast());
//       assertEquals(false, node0.isFromExterns());
//       assertEquals(true, node0.hasMoreThanOneChild());
//       assertEquals(false, node0.isBlock());
//       assertEquals(false, node0.isGetProp());
//       assertEquals(1, node0.getLineno());
//       assertEquals(false, node0.isWhile());
//       assertEquals(false, node0.isAssign());
//       assertEquals(false, node0.isDo());
//       assertEquals(4096, node0.getSourcePosition());
//       assertEquals(true, node0.isScript());
//       assertEquals(0, node0.getChangeTime());
//       assertEquals(false, node0.isString());
//       assertEquals(false, node0.isWith());
//       assertEquals("[testcode]", node0.getSourceFileName());
//       assertEquals(false, node0.isName());
//       assertEquals(false, node0.isSwitch());
//       assertEquals(false, node0.isOnlyModifiesArgumentsCall());
//       assertEquals(false, node0.isArrayLit());
//       assertEquals(false, node0.isInstanceOf());
//       assertEquals(false, node0.isCatch());
//       assertEquals(false, node0.isVoid());
//       assertEquals(false, node0.isNot());
//       assertEquals(0, node0.getLength());
//       assertEquals(false, node0.isThis());
//       assertEquals(false, node0.isAdd());
//       assertEquals(false, node0.isOnlyModifiesThisCall());
//       assertEquals(false, node0.isOr());
//       assertEquals(false, node0.isInc());
//       assertEquals(false, node0.isIf());
//       assertEquals(false, node0.isFunction());
//       assertEquals(false, node0.isNE());
//       assertEquals(false, node0.isOptionalArg());
//       assertEquals(true, node0.hasChildren());
//       assertEquals(false, node0.isFor());
//       assertEquals(false, node0.isLocalResultCall());
//       assertEquals(false, node0.isNull());
//       assertEquals(false, node0.isStringKey());
//       assertEquals(true, node0.mayMutateArguments());
//       assertEquals(false, node0.isQuotedString());
//       assertEquals(false, node0.isParamList());
//       assertEquals(0, node0.getSideEffectFlags());
//       assertEquals(false, node0.isLabel());
//       assertEquals(false, node0.isAnd());
//       assertEquals(false, node0.isVarArgs());
//       assertEquals(false, node0.isIn());
//       assertEquals(false, node0.isFalse());
//       assertEquals(false, node0.isDebugger());
//       assertEquals(false, node0.isCase());
//       assertEquals(false, node0.isVar());
//       assertEquals(0, node0.getCharno());
//       assertEquals(false, node0.hasOneChild());
//       assertEquals(false, node0.isDefaultCase());
//       assertEquals(true, node0.mayMutateGlobalStateOrThrow());
//       assertEquals(false, node0.isExprResult());
//       assertEquals(false, node0.isSetterDef());
//       assertEquals(false, node0.isTrue());
//       assertEquals(false, compiler0.hasErrors());
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
//       assertEquals(0, compiler0.getErrorCount());
//       assertEquals(0, compiler0.getWarningCount());
//       assertEquals(0.0, compiler0.getProgress(), 0.01D);
//       assertEquals(false, compiler0.isTypeCheckingEnabled());
//       assertEquals(false, compiler0.isIdeMode());
//       assertEquals(false, compiler0.acceptConstKeyword());
//       
//       // Undeclared exception!
//       try {
//         functionInjector0.maybePrepareCall(node0);
//         fail("Expecting exception: IllegalStateException");
//       
//       } catch(IllegalStateException e) {
//          //
//          // unexpected
//          //
//       }
//   }
}
