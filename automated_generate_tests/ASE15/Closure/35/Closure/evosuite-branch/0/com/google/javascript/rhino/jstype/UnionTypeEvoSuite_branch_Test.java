/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 20:51:22 GMT 2014
 */

package com.google.javascript.rhino.jstype;

import static org.junit.Assert.*; import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.junit.Test;
import com.google.javascript.rhino.ErrorReporter;
import com.google.javascript.rhino.SimpleErrorReporter;
import com.google.javascript.rhino.jstype.BooleanLiteralSet;
import com.google.javascript.rhino.jstype.JSType;
import com.google.javascript.rhino.jstype.JSTypeRegistry;
import com.google.javascript.rhino.jstype.NoObjectType;
import com.google.javascript.rhino.jstype.NoType;
import com.google.javascript.rhino.jstype.NullType;
import com.google.javascript.rhino.jstype.NumberType;
import com.google.javascript.rhino.jstype.ObjectType;
import com.google.javascript.rhino.jstype.ParameterizedType;
import com.google.javascript.rhino.jstype.StaticScope;
import com.google.javascript.rhino.jstype.StringType;
import com.google.javascript.rhino.jstype.TernaryValue;
import com.google.javascript.rhino.jstype.UnionType;
import com.google.javascript.rhino.jstype.UnknownType;
import java.util.Collection;
import java.util.HashSet;
import java.util.PriorityQueue;
import java.util.Vector;



import org.junit.runner.RunWith;


public class UnionTypeEvoSuite_branch_Test  {

  @Test
  public void test00()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = null;
      Vector<JSType> vector0 = new Vector<JSType>();
      assertEquals(true, vector0.isEmpty());
      assertEquals(0, vector0.size());
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertNotNull(vector0);
      
      UnionType unionType0 = new UnionType(jSTypeRegistry0, vector0);
      assertEquals(false, unionType0.isNominalConstructor());
      assertEquals(false, unionType0.isCheckedUnknownType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isNominalType());
      assertEquals(false, unionType0.isEnumType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isNoResolvedType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isEnumElementType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isInterface());
      assertEquals(false, unionType0.isConstructor());
      assertEquals(false, unionType0.isFunctionPrototypeType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isOrdinaryFunction());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(true, vector0.isEmpty());
      assertEquals(0, vector0.size());
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertNotNull(unionType0);
      
      boolean boolean0 = vector0.add((JSType) unionType0);
      assertTrue(boolean0);
      assertEquals(false, unionType0.isNominalConstructor());
      assertEquals(false, unionType0.isCheckedUnknownType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isNominalType());
      assertEquals(false, unionType0.isEnumType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isNoResolvedType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isEnumElementType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isInterface());
      assertEquals(false, unionType0.isConstructor());
      assertEquals(false, unionType0.isFunctionPrototypeType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isOrdinaryFunction());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(1, vector0.size());
      assertEquals(false, vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      
      ObjectType objectType0 = ObjectType.cast((JSType) unionType0);
      assertEquals(false, unionType0.isNominalConstructor());
      assertEquals(false, unionType0.isCheckedUnknownType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isNominalType());
      assertEquals(false, unionType0.isEnumType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isNoResolvedType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isEnumElementType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isInterface());
      assertEquals(false, unionType0.isConstructor());
      assertEquals(false, unionType0.isFunctionPrototypeType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isOrdinaryFunction());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(1, vector0.size());
      assertEquals(false, vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertNull(objectType0);
      
      // Undeclared exception!
      try {
        unionType0.matchConstraint(objectType0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test01()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = null;
      Vector<JSType> vector0 = new Vector<JSType>();
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertEquals(true, vector0.isEmpty());
      assertNotNull(vector0);
      
      UnionType unionType0 = new UnionType(jSTypeRegistry0, vector0);
      assertEquals(false, unionType0.isRecordType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isConstructor());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isNoResolvedType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isNominalConstructor());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isCheckedUnknownType());
      assertEquals(false, unionType0.isNominalType());
      assertEquals(false, unionType0.isFunctionPrototypeType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isEnumElementType());
      assertEquals(false, unionType0.isInterface());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isOrdinaryFunction());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isEnumType());
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertEquals(true, vector0.isEmpty());
      assertNotNull(unionType0);
      
      ObjectType objectType0 = ObjectType.cast((JSType) unionType0);
      assertEquals(false, unionType0.isRecordType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isConstructor());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isNoResolvedType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isNominalConstructor());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isCheckedUnknownType());
      assertEquals(false, unionType0.isNominalType());
      assertEquals(false, unionType0.isFunctionPrototypeType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isEnumElementType());
      assertEquals(false, unionType0.isInterface());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isOrdinaryFunction());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isEnumType());
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertEquals(true, vector0.isEmpty());
      assertNull(objectType0);
      
      unionType0.matchConstraint(objectType0);
      assertEquals(false, unionType0.isRecordType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isConstructor());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isNoResolvedType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isNominalConstructor());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isCheckedUnknownType());
      assertEquals(false, unionType0.isNominalType());
      assertEquals(false, unionType0.isFunctionPrototypeType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isEnumElementType());
      assertEquals(false, unionType0.isInterface());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isOrdinaryFunction());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isEnumType());
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertEquals(true, vector0.isEmpty());
  }

  @Test
  public void test02()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = null;
      Vector<JSType> vector0 = new Vector<JSType>();
      assertEquals(true, vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertNotNull(vector0);
      
      UnionType unionType0 = new UnionType(jSTypeRegistry0, vector0);
      assertEquals(true, vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isNoResolvedType());
      assertEquals(false, unionType0.isOrdinaryFunction());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isNominalConstructor());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isCheckedUnknownType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isConstructor());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isInterface());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isEnumType());
      assertEquals(false, unionType0.isEnumElementType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isNominalType());
      assertEquals(false, unionType0.isFunctionPrototypeType());
      assertNotNull(unionType0);
      
      HashSet<JSType> hashSet0 = new HashSet<JSType>();
      assertEquals("[]", hashSet0.toString());
      assertEquals(true, hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      assertNotNull(hashSet0);
      
      UnionType unionType1 = new UnionType(jSTypeRegistry0, hashSet0);
      assertNotSame(unionType1, unionType0);
      assertEquals(false, unionType1.isNullType());
      assertEquals(false, unionType1.isCheckedUnknownType());
      assertEquals(false, unionType1.isNumberValueType());
      assertEquals(false, unionType1.isEnumElementType());
      assertEquals(false, unionType1.isNoResolvedType());
      assertEquals(false, unionType1.isResolved());
      assertEquals(false, unionType1.isNominalConstructor());
      assertEquals(false, unionType1.isEnumType());
      assertEquals(false, unionType1.isVoidType());
      assertEquals(false, unionType1.isInterface());
      assertEquals(false, unionType1.isFunctionPrototypeType());
      assertEquals(false, unionType1.isOrdinaryFunction());
      assertEquals(false, unionType1.isNoObjectType());
      assertEquals(false, unionType1.isTemplateType());
      assertEquals(false, unionType1.isBooleanValueType());
      assertEquals(false, unionType1.isRecordType());
      assertEquals(false, unionType1.isNoType());
      assertEquals(false, unionType1.isFunctionType());
      assertEquals(true, unionType1.isUnionType());
      assertEquals(false, unionType1.isNominalType());
      assertEquals(false, unionType1.isAllType());
      assertEquals(false, unionType1.isStringValueType());
      assertEquals(false, unionType1.isConstructor());
      assertEquals("[]", hashSet0.toString());
      assertEquals(true, hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      assertTrue(unionType1.equals((Object)unionType0));
      assertNotNull(unionType1);
      
      boolean boolean0 = hashSet0.add((JSType) unionType0);
      assertTrue(boolean0);
      assertNotSame(unionType0, unionType1);
      assertEquals(true, vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertEquals(1, hashSet0.size());
      assertEquals("[()]", hashSet0.toString());
      assertEquals(false, hashSet0.isEmpty());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isNoResolvedType());
      assertEquals(false, unionType0.isOrdinaryFunction());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isNominalConstructor());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isCheckedUnknownType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isConstructor());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isInterface());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isEnumType());
      assertEquals(false, unionType0.isEnumElementType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isNominalType());
      assertEquals(false, unionType0.isFunctionPrototypeType());
      assertFalse(unionType0.equals((Object)unionType1));
      
      JSType jSType0 = unionType1.collapseUnion();
      assertNotSame(unionType1, unionType0);
      assertEquals(false, unionType1.isNullType());
      assertEquals(false, unionType1.isCheckedUnknownType());
      assertEquals(false, unionType1.isNumberValueType());
      assertEquals(false, unionType1.isEnumElementType());
      assertEquals(false, unionType1.isNoResolvedType());
      assertEquals(false, unionType1.isResolved());
      assertEquals(false, unionType1.isNominalConstructor());
      assertEquals(false, unionType1.isEnumType());
      assertEquals(false, unionType1.isVoidType());
      assertEquals(false, unionType1.isInterface());
      assertEquals(false, unionType1.isFunctionPrototypeType());
      assertEquals(false, unionType1.isOrdinaryFunction());
      assertEquals(false, unionType1.isNoObjectType());
      assertEquals(false, unionType1.isTemplateType());
      assertEquals(false, unionType1.isBooleanValueType());
      assertEquals(false, unionType1.isRecordType());
      assertEquals(false, unionType1.isNoType());
      assertEquals(false, unionType1.isFunctionType());
      assertEquals(true, unionType1.isUnionType());
      assertEquals(false, unionType1.isNominalType());
      assertEquals(false, unionType1.isAllType());
      assertEquals(false, unionType1.isStringValueType());
      assertEquals(false, unionType1.isConstructor());
      assertEquals(1, hashSet0.size());
      assertEquals("[()]", hashSet0.toString());
      assertEquals(false, hashSet0.isEmpty());
      assertFalse(unionType1.equals((Object)unionType0));
      assertNull(jSType0);
  }

  @Test
  public void test03()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = null;
      Vector<JSType> vector0 = new Vector<JSType>();
      assertEquals(0, vector0.size());
      assertEquals(true, vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertNotNull(vector0);
      
      UnionType unionType0 = new UnionType(jSTypeRegistry0, vector0);
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isNoResolvedType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isOrdinaryFunction());
      assertEquals(false, unionType0.isInterface());
      assertEquals(false, unionType0.isNominalType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isEnumType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isEnumElementType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isCheckedUnknownType());
      assertEquals(false, unionType0.isFunctionPrototypeType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isNominalConstructor());
      assertEquals(false, unionType0.isConstructor());
      assertEquals(false, unionType0.isAllType());
      assertEquals(0, vector0.size());
      assertEquals(true, vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertNotNull(unionType0);
      
      HashSet<JSType> hashSet0 = new HashSet<JSType>();
      assertEquals("[]", hashSet0.toString());
      assertEquals(0, hashSet0.size());
      assertEquals(true, hashSet0.isEmpty());
      assertNotNull(hashSet0);
      
      UnionType unionType1 = new UnionType(jSTypeRegistry0, hashSet0);
      assertNotSame(unionType1, unionType0);
      assertEquals(false, unionType1.isFunctionPrototypeType());
      assertEquals(false, unionType1.isEnumType());
      assertEquals(false, unionType1.isConstructor());
      assertEquals(false, unionType1.isVoidType());
      assertEquals(false, unionType1.isNoObjectType());
      assertEquals(false, unionType1.isNoResolvedType());
      assertEquals(false, unionType1.isStringValueType());
      assertEquals(false, unionType1.isEnumElementType());
      assertEquals(false, unionType1.isNominalConstructor());
      assertEquals(false, unionType1.isTemplateType());
      assertEquals(false, unionType1.isResolved());
      assertEquals(false, unionType1.isInterface());
      assertEquals(false, unionType1.isAllType());
      assertEquals(false, unionType1.isCheckedUnknownType());
      assertEquals(false, unionType1.isNominalType());
      assertEquals(true, unionType1.isUnionType());
      assertEquals(false, unionType1.isOrdinaryFunction());
      assertEquals(false, unionType1.isNumberValueType());
      assertEquals(false, unionType1.isFunctionType());
      assertEquals(false, unionType1.isNullType());
      assertEquals(false, unionType1.isBooleanValueType());
      assertEquals(false, unionType1.isRecordType());
      assertEquals(false, unionType1.isNoType());
      assertEquals("[]", hashSet0.toString());
      assertEquals(0, hashSet0.size());
      assertEquals(true, hashSet0.isEmpty());
      assertTrue(unionType1.equals((Object)unionType0));
      assertNotNull(unionType1);
      
      boolean boolean0 = hashSet0.add((JSType) unionType0);
      assertTrue(boolean0);
      assertNotSame(unionType0, unionType1);
      assertEquals("[()]", hashSet0.toString());
      assertEquals(false, hashSet0.isEmpty());
      assertEquals(1, hashSet0.size());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isNoResolvedType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isOrdinaryFunction());
      assertEquals(false, unionType0.isInterface());
      assertEquals(false, unionType0.isNominalType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isEnumType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isEnumElementType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isCheckedUnknownType());
      assertEquals(false, unionType0.isFunctionPrototypeType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isNominalConstructor());
      assertEquals(false, unionType0.isConstructor());
      assertEquals(false, unionType0.isAllType());
      assertEquals(0, vector0.size());
      assertEquals(true, vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertFalse(unionType0.equals((Object)unionType1));
      
      String string0 = unionType1.toDebugHashCodeString();
      assertEquals("{({()})}", string0);
      assertNotSame(unionType1, unionType0);
      assertEquals(false, unionType1.isFunctionPrototypeType());
      assertEquals(false, unionType1.isEnumType());
      assertEquals(false, unionType1.isConstructor());
      assertEquals(false, unionType1.isVoidType());
      assertEquals(false, unionType1.isNoObjectType());
      assertEquals(false, unionType1.isNoResolvedType());
      assertEquals(false, unionType1.isStringValueType());
      assertEquals(false, unionType1.isEnumElementType());
      assertEquals(false, unionType1.isNominalConstructor());
      assertEquals(false, unionType1.isTemplateType());
      assertEquals(false, unionType1.isResolved());
      assertEquals(false, unionType1.isInterface());
      assertEquals(false, unionType1.isAllType());
      assertEquals(false, unionType1.isCheckedUnknownType());
      assertEquals(false, unionType1.isNominalType());
      assertEquals(true, unionType1.isUnionType());
      assertEquals(false, unionType1.isOrdinaryFunction());
      assertEquals(false, unionType1.isNumberValueType());
      assertEquals(false, unionType1.isFunctionType());
      assertEquals(false, unionType1.isNullType());
      assertEquals(false, unionType1.isBooleanValueType());
      assertEquals(false, unionType1.isRecordType());
      assertEquals(false, unionType1.isNoType());
      assertEquals("[()]", hashSet0.toString());
      assertEquals(false, hashSet0.isEmpty());
      assertEquals(1, hashSet0.size());
      assertFalse(unionType1.equals((Object)unionType0));
      assertNotNull(string0);
  }

  @Test
  public void test04()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = null;
      Vector<JSType> vector0 = new Vector<JSType>();
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertEquals("[]", vector0.toString());
      assertEquals(true, vector0.isEmpty());
      assertNotNull(vector0);
      
      boolean boolean0 = true;
      UnknownType unknownType0 = new UnknownType(jSTypeRegistry0, boolean0);
      assertEquals("??", unknownType0.getReferenceName());
      assertEquals(true, unknownType0.isCheckedUnknownType());
      assertEquals(false, unknownType0.isVoidType());
      assertEquals(true, unknownType0.matchesNumberContext());
      assertEquals(false, unknownType0.isEnumElementType());
      assertEquals(false, unknownType0.isUnionType());
      assertEquals(false, unknownType0.isRecordType());
      assertEquals(false, unknownType0.isOrdinaryFunction());
      assertEquals(false, unknownType0.hasCachedValues());
      assertEquals("Unknown", unknownType0.getDisplayName());
      assertEquals(false, unknownType0.isStringValueType());
      assertEquals(false, unknownType0.isNativeObjectType());
      assertEquals(false, unknownType0.isInterface());
      assertEquals(false, unknownType0.isTemplateType());
      assertEquals(false, unknownType0.hasReferenceName());
      assertEquals(true, unknownType0.canBeCalled());
      assertEquals(false, unknownType0.isNumberValueType());
      assertEquals(BooleanLiteralSet.BOTH, unknownType0.getPossibleToBooleanOutcomes());
      assertEquals(false, unknownType0.isNoType());
      assertEquals(true, unknownType0.isUnknownType());
      assertEquals(false, unknownType0.isFunctionPrototypeType());
      assertEquals(true, unknownType0.hasDisplayName());
      assertEquals(false, unknownType0.isNoObjectType());
      assertEquals(false, unknownType0.isAllType());
      assertEquals(false, unknownType0.isBooleanValueType());
      assertEquals(true, unknownType0.isNullable());
      assertEquals(true, unknownType0.matchesObjectContext());
      assertEquals(false, unknownType0.isNominalConstructor());
      assertEquals(false, unknownType0.isEnumType());
      assertEquals(false, unknownType0.isNullType());
      assertEquals(false, unknownType0.isResolved());
      assertEquals(false, unknownType0.isFunctionType());
      assertEquals(false, unknownType0.isNominalType());
      assertEquals(true, unknownType0.matchesStringContext());
      assertEquals(false, unknownType0.isConstructor());
      assertEquals(false, unknownType0.isNoResolvedType());
      assertEquals(2147483647, unknownType0.getPropertiesCount());
      assertNotNull(unknownType0);
      
      boolean boolean1 = vector0.add((JSType) unknownType0);
      assertTrue(boolean1);
      assertEquals(10, vector0.capacity());
      assertEquals(1, vector0.size());
      assertEquals(false, vector0.isEmpty());
      assertEquals("[??]", vector0.toString());
      assertEquals("??", unknownType0.getReferenceName());
      assertEquals(true, unknownType0.isCheckedUnknownType());
      assertEquals(false, unknownType0.isVoidType());
      assertEquals(true, unknownType0.matchesNumberContext());
      assertEquals(false, unknownType0.isEnumElementType());
      assertEquals(false, unknownType0.isUnionType());
      assertEquals(false, unknownType0.isRecordType());
      assertEquals(false, unknownType0.isOrdinaryFunction());
      assertEquals(false, unknownType0.hasCachedValues());
      assertEquals("Unknown", unknownType0.getDisplayName());
      assertEquals(false, unknownType0.isStringValueType());
      assertEquals(false, unknownType0.isNativeObjectType());
      assertEquals(false, unknownType0.isInterface());
      assertEquals(false, unknownType0.isTemplateType());
      assertEquals(false, unknownType0.hasReferenceName());
      assertEquals(true, unknownType0.canBeCalled());
      assertEquals(false, unknownType0.isNumberValueType());
      assertEquals(BooleanLiteralSet.BOTH, unknownType0.getPossibleToBooleanOutcomes());
      assertEquals(false, unknownType0.isNoType());
      assertEquals(true, unknownType0.isUnknownType());
      assertEquals(false, unknownType0.isFunctionPrototypeType());
      assertEquals(true, unknownType0.hasDisplayName());
      assertEquals(false, unknownType0.isNoObjectType());
      assertEquals(false, unknownType0.isAllType());
      assertEquals(false, unknownType0.isBooleanValueType());
      assertEquals(true, unknownType0.isNullable());
      assertEquals(true, unknownType0.matchesObjectContext());
      assertEquals(false, unknownType0.isNominalConstructor());
      assertEquals(false, unknownType0.isEnumType());
      assertEquals(false, unknownType0.isNullType());
      assertEquals(false, unknownType0.isResolved());
      assertEquals(false, unknownType0.isFunctionType());
      assertEquals(false, unknownType0.isNominalType());
      assertEquals(true, unknownType0.matchesStringContext());
      assertEquals(false, unknownType0.isConstructor());
      assertEquals(false, unknownType0.isNoResolvedType());
      assertEquals(2147483647, unknownType0.getPropertiesCount());
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean0 == boolean1);
      
      UnionType unionType0 = new UnionType(jSTypeRegistry0, vector0);
      assertEquals(10, vector0.capacity());
      assertEquals(1, vector0.size());
      assertEquals(false, vector0.isEmpty());
      assertEquals("[??]", vector0.toString());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isEnumType());
      assertEquals(false, unionType0.isNominalConstructor());
      assertEquals(false, unionType0.isConstructor());
      assertEquals(false, unionType0.isNominalType());
      assertEquals(false, unionType0.isCheckedUnknownType());
      assertEquals(false, unionType0.isOrdinaryFunction());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isNoResolvedType());
      assertEquals(false, unionType0.isFunctionPrototypeType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isInterface());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isEnumElementType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isVoidType());
      assertNotNull(unionType0);
      
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      UnionType unionType1 = (UnionType)JSType.safeResolve(unionType0, simpleErrorReporter0, unknownType0);
      assertSame(unionType1, unionType0);
      assertSame(unionType0, unionType1);
      assertEquals(10, vector0.capacity());
      assertEquals(1, vector0.size());
      assertEquals(false, vector0.isEmpty());
      assertEquals("[??]", vector0.toString());
      assertEquals(false, unionType1.isEnumElementType());
      assertEquals(false, unionType1.isStringValueType());
      assertEquals(false, unionType1.isNoType());
      assertEquals(true, unionType1.isUnionType());
      assertEquals(false, unionType1.isAllType());
      assertEquals(false, unionType1.isNullType());
      assertEquals(false, unionType1.isNominalType());
      assertEquals(false, unionType1.isFunctionPrototypeType());
      assertEquals(false, unionType1.isCheckedUnknownType());
      assertEquals(false, unionType1.isVoidType());
      assertEquals(false, unionType1.isConstructor());
      assertEquals(false, unionType1.isRecordType());
      assertEquals(false, unionType1.isOrdinaryFunction());
      assertEquals(false, unionType1.isNumberValueType());
      assertEquals(false, unionType1.isTemplateType());
      assertEquals(false, unionType1.isNominalConstructor());
      assertEquals(false, unionType1.isNoObjectType());
      assertEquals(false, unionType1.isFunctionType());
      assertEquals(false, unionType1.isBooleanValueType());
      assertEquals(false, unionType1.isEnumType());
      assertEquals(true, unionType1.isResolved());
      assertEquals(false, unionType1.isInterface());
      assertEquals(false, unionType1.isNoResolvedType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isEnumType());
      assertEquals(false, unionType0.isNominalConstructor());
      assertEquals(true, unionType0.isResolved());
      assertEquals(false, unionType0.isConstructor());
      assertEquals(false, unionType0.isNominalType());
      assertEquals(false, unionType0.isCheckedUnknownType());
      assertEquals(false, unionType0.isOrdinaryFunction());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isNoResolvedType());
      assertEquals(false, unionType0.isFunctionPrototypeType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isInterface());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isEnumElementType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals("??", unknownType0.getReferenceName());
      assertEquals(true, unknownType0.isCheckedUnknownType());
      assertEquals(false, unknownType0.isVoidType());
      assertEquals(true, unknownType0.matchesNumberContext());
      assertEquals(false, unknownType0.isEnumElementType());
      assertEquals(false, unknownType0.isUnionType());
      assertEquals(false, unknownType0.isRecordType());
      assertEquals(false, unknownType0.isOrdinaryFunction());
      assertEquals(false, unknownType0.hasCachedValues());
      assertEquals("Unknown", unknownType0.getDisplayName());
      assertEquals(false, unknownType0.isStringValueType());
      assertEquals(false, unknownType0.isNativeObjectType());
      assertEquals(false, unknownType0.isInterface());
      assertEquals(false, unknownType0.isTemplateType());
      assertEquals(true, unknownType0.isResolved());
      assertEquals(false, unknownType0.hasReferenceName());
      assertEquals(true, unknownType0.canBeCalled());
      assertEquals(false, unknownType0.isNumberValueType());
      assertEquals(BooleanLiteralSet.BOTH, unknownType0.getPossibleToBooleanOutcomes());
      assertEquals(false, unknownType0.isNoType());
      assertEquals(true, unknownType0.isUnknownType());
      assertEquals(false, unknownType0.isFunctionPrototypeType());
      assertEquals(true, unknownType0.hasDisplayName());
      assertEquals(false, unknownType0.isNoObjectType());
      assertEquals(false, unknownType0.isAllType());
      assertEquals(false, unknownType0.isBooleanValueType());
      assertEquals(true, unknownType0.isNullable());
      assertEquals(true, unknownType0.matchesObjectContext());
      assertEquals(false, unknownType0.isNominalConstructor());
      assertEquals(false, unknownType0.isEnumType());
      assertEquals(false, unknownType0.isNullType());
      assertEquals(false, unknownType0.isFunctionType());
      assertEquals(false, unknownType0.isNominalType());
      assertEquals(true, unknownType0.matchesStringContext());
      assertEquals(false, unknownType0.isConstructor());
      assertEquals(false, unknownType0.isNoResolvedType());
      assertEquals(2147483647, unknownType0.getPropertiesCount());
      assertTrue(boolean0 == boolean1);
      assertNotNull(unionType1);
  }

  @Test
  public void test05()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = null;
      HashSet<JSType> hashSet0 = new HashSet<JSType>();
      assertEquals("[]", hashSet0.toString());
      assertEquals(0, hashSet0.size());
      assertEquals(true, hashSet0.isEmpty());
      assertNotNull(hashSet0);
      
      UnionType unionType0 = new UnionType(jSTypeRegistry0, hashSet0);
      assertEquals("[]", hashSet0.toString());
      assertEquals(0, hashSet0.size());
      assertEquals(true, hashSet0.isEmpty());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isFunctionPrototypeType());
      assertEquals(false, unionType0.isEnumType());
      assertEquals(false, unionType0.isNominalConstructor());
      assertEquals(false, unionType0.isOrdinaryFunction());
      assertEquals(false, unionType0.isCheckedUnknownType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isNoResolvedType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isConstructor());
      assertEquals(false, unionType0.isEnumElementType());
      assertEquals(false, unionType0.isNominalType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isInterface());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(true, unionType0.isUnionType());
      assertNotNull(unionType0);
      
      boolean boolean0 = hashSet0.add((JSType) unionType0);
      assertTrue(boolean0);
      assertEquals(1, hashSet0.size());
      assertEquals(false, hashSet0.isEmpty());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isFunctionPrototypeType());
      assertEquals(false, unionType0.isEnumType());
      assertEquals(false, unionType0.isNominalConstructor());
      assertEquals(false, unionType0.isOrdinaryFunction());
      assertEquals(false, unionType0.isCheckedUnknownType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isNoResolvedType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isConstructor());
      assertEquals(false, unionType0.isEnumElementType());
      assertEquals(false, unionType0.isNominalType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isInterface());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(true, unionType0.isUnionType());
      
      ObjectType objectType0 = null;
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      UnionType unionType1 = (UnionType)unionType0.resolve((ErrorReporter) simpleErrorReporter0, (StaticScope<JSType>) objectType0);
      assertEquals(false, unionType1.isOrdinaryFunction());
      assertEquals(true, unionType1.isResolved());
      assertEquals(false, unionType1.isTemplateType());
      assertEquals(false, unionType1.isNoResolvedType());
      assertEquals(false, unionType1.isRecordType());
      assertEquals(false, unionType1.isNominalType());
      assertEquals(false, unionType1.isFunctionType());
      assertEquals(false, unionType1.isVoidType());
      assertEquals(false, unionType1.isCheckedUnknownType());
      assertEquals(false, unionType1.isFunctionPrototypeType());
      assertEquals(false, unionType1.isBooleanValueType());
      assertEquals(true, unionType1.isUnionType());
      assertEquals(false, unionType1.isEnumElementType());
      assertEquals(false, unionType1.isNumberValueType());
      assertEquals(false, unionType1.isNoObjectType());
      assertEquals(false, unionType1.isAllType());
      assertEquals(false, unionType1.isNoType());
      assertEquals(false, unionType1.isNominalConstructor());
      assertEquals(false, unionType1.isConstructor());
      assertEquals(false, unionType1.isNullType());
      assertEquals(false, unionType1.isStringValueType());
      assertEquals(false, unionType1.isEnumType());
      assertEquals(false, unionType1.isInterface());
      assertEquals(1, hashSet0.size());
      assertEquals(false, hashSet0.isEmpty());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isFunctionPrototypeType());
      assertEquals(false, unionType0.isEnumType());
      assertEquals(false, unionType0.isNominalConstructor());
      assertEquals(false, unionType0.isOrdinaryFunction());
      assertEquals(false, unionType0.isCheckedUnknownType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isNoResolvedType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(true, unionType0.isResolved());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isConstructor());
      assertEquals(false, unionType0.isEnumElementType());
      assertEquals(false, unionType0.isNominalType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isInterface());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(true, unionType0.isUnionType());
      assertNotNull(unionType1);
  }

  @Test
  public void test06()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = null;
      Vector<JSType> vector0 = new Vector<JSType>();
      assertEquals("[]", vector0.toString());
      assertEquals(0, vector0.size());
      assertEquals(true, vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertNotNull(vector0);
      
      NullType nullType0 = new NullType(jSTypeRegistry0);
      assertEquals(BooleanLiteralSet.FALSE, nullType0.getPossibleToBooleanOutcomes());
      assertEquals(false, nullType0.isFunctionPrototypeType());
      assertEquals(false, nullType0.isBooleanValueType());
      assertEquals(false, nullType0.isNominalType());
      assertEquals(false, nullType0.isAllType());
      assertEquals(false, nullType0.isTemplateType());
      assertEquals(false, nullType0.isRecordType());
      assertEquals(false, nullType0.isUnionType());
      assertEquals(false, nullType0.isCheckedUnknownType());
      assertEquals(false, nullType0.isInterface());
      assertEquals(false, nullType0.isConstructor());
      assertEquals(true, nullType0.isNullable());
      assertEquals(true, nullType0.matchesNumberContext());
      assertEquals("null", nullType0.getDisplayName());
      assertEquals(false, nullType0.isNoType());
      assertEquals(false, nullType0.isResolved());
      assertEquals(false, nullType0.isNoObjectType());
      assertEquals(false, nullType0.isNoResolvedType());
      assertEquals(false, nullType0.isFunctionType());
      assertEquals(false, nullType0.isOrdinaryFunction());
      assertEquals(false, nullType0.isVoidType());
      assertEquals(false, nullType0.isNominalConstructor());
      assertEquals(false, nullType0.matchesObjectContext());
      assertEquals(false, nullType0.isStringValueType());
      assertEquals(false, nullType0.isEnumType());
      assertEquals(true, nullType0.isNullType());
      assertEquals(false, nullType0.isEnumElementType());
      assertEquals(true, nullType0.matchesStringContext());
      assertEquals(false, nullType0.isNumberValueType());
      assertNotNull(nullType0);
      
      boolean boolean0 = vector0.add((JSType) nullType0);
      assertTrue(boolean0);
      assertEquals("[null]", vector0.toString());
      assertEquals(1, vector0.size());
      assertEquals(10, vector0.capacity());
      assertEquals(false, vector0.isEmpty());
      assertEquals(BooleanLiteralSet.FALSE, nullType0.getPossibleToBooleanOutcomes());
      assertEquals(false, nullType0.isFunctionPrototypeType());
      assertEquals(false, nullType0.isBooleanValueType());
      assertEquals(false, nullType0.isNominalType());
      assertEquals(false, nullType0.isAllType());
      assertEquals(false, nullType0.isTemplateType());
      assertEquals(false, nullType0.isRecordType());
      assertEquals(false, nullType0.isUnionType());
      assertEquals(false, nullType0.isCheckedUnknownType());
      assertEquals(false, nullType0.isInterface());
      assertEquals(false, nullType0.isConstructor());
      assertEquals(true, nullType0.isNullable());
      assertEquals(true, nullType0.matchesNumberContext());
      assertEquals("null", nullType0.getDisplayName());
      assertEquals(false, nullType0.isNoType());
      assertEquals(false, nullType0.isResolved());
      assertEquals(false, nullType0.isNoObjectType());
      assertEquals(false, nullType0.isNoResolvedType());
      assertEquals(false, nullType0.isFunctionType());
      assertEquals(false, nullType0.isOrdinaryFunction());
      assertEquals(false, nullType0.isVoidType());
      assertEquals(false, nullType0.isNominalConstructor());
      assertEquals(false, nullType0.matchesObjectContext());
      assertEquals(false, nullType0.isStringValueType());
      assertEquals(false, nullType0.isEnumType());
      assertEquals(true, nullType0.isNullType());
      assertEquals(false, nullType0.isEnumElementType());
      assertEquals(true, nullType0.matchesStringContext());
      assertEquals(false, nullType0.isNumberValueType());
      
      UnionType unionType0 = new UnionType(jSTypeRegistry0, vector0);
      assertEquals("[null]", vector0.toString());
      assertEquals(1, vector0.size());
      assertEquals(10, vector0.capacity());
      assertEquals(false, vector0.isEmpty());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isFunctionPrototypeType());
      assertEquals(false, unionType0.isNoResolvedType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isInterface());
      assertEquals(false, unionType0.isNominalConstructor());
      assertEquals(false, unionType0.isOrdinaryFunction());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isNominalType());
      assertEquals(false, unionType0.isConstructor());
      assertEquals(false, unionType0.isEnumType());
      assertEquals(false, unionType0.isEnumElementType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isCheckedUnknownType());
      assertNotNull(unionType0);
      
      // Undeclared exception!
      try {
        JSType.TypePair jSType_TypePair0 = unionType0.getTypesUnderShallowInequality((JSType) nullType0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test07()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = null;
      Vector<JSType> vector0 = new Vector<JSType>();
      assertEquals(10, vector0.capacity());
      assertEquals(true, vector0.isEmpty());
      assertEquals(0, vector0.size());
      assertEquals("[]", vector0.toString());
      assertNotNull(vector0);
      
      NumberType numberType0 = new NumberType(jSTypeRegistry0);
      assertEquals(true, numberType0.isNumberValueType());
      assertEquals(false, numberType0.isFunctionType());
      assertEquals(false, numberType0.isNullType());
      assertEquals("number", numberType0.getDisplayName());
      assertEquals(false, numberType0.isNullable());
      assertEquals(false, numberType0.isStringValueType());
      assertEquals(false, numberType0.isEnumType());
      assertEquals(false, numberType0.isCheckedUnknownType());
      assertEquals(false, numberType0.isNoResolvedType());
      assertEquals(false, numberType0.isUnionType());
      assertEquals(false, numberType0.isAllType());
      assertEquals(false, numberType0.isNoType());
      assertEquals(false, numberType0.isRecordType());
      assertEquals(false, numberType0.isFunctionPrototypeType());
      assertEquals(false, numberType0.isOrdinaryFunction());
      assertEquals(false, numberType0.isNominalConstructor());
      assertEquals(BooleanLiteralSet.BOTH, numberType0.getPossibleToBooleanOutcomes());
      assertEquals(true, numberType0.matchesStringContext());
      assertEquals(false, numberType0.isNoObjectType());
      assertEquals(false, numberType0.isInterface());
      assertEquals(false, numberType0.isEnumElementType());
      assertEquals(false, numberType0.isBooleanValueType());
      assertEquals(true, numberType0.matchesNumberContext());
      assertEquals(false, numberType0.isConstructor());
      assertEquals(false, numberType0.isResolved());
      assertEquals(false, numberType0.isTemplateType());
      assertEquals(false, numberType0.isNominalType());
      assertEquals(false, numberType0.isVoidType());
      assertEquals(true, numberType0.matchesObjectContext());
      assertNotNull(numberType0);
      
      vector0.addElement((JSType) numberType0);
      assertEquals(10, vector0.capacity());
      assertEquals("[number]", vector0.toString());
      assertEquals(false, vector0.isEmpty());
      assertEquals(1, vector0.size());
      assertEquals(true, numberType0.isNumberValueType());
      assertEquals(false, numberType0.isFunctionType());
      assertEquals(false, numberType0.isNullType());
      assertEquals("number", numberType0.getDisplayName());
      assertEquals(false, numberType0.isNullable());
      assertEquals(false, numberType0.isStringValueType());
      assertEquals(false, numberType0.isEnumType());
      assertEquals(false, numberType0.isCheckedUnknownType());
      assertEquals(false, numberType0.isNoResolvedType());
      assertEquals(false, numberType0.isUnionType());
      assertEquals(false, numberType0.isAllType());
      assertEquals(false, numberType0.isNoType());
      assertEquals(false, numberType0.isRecordType());
      assertEquals(false, numberType0.isFunctionPrototypeType());
      assertEquals(false, numberType0.isOrdinaryFunction());
      assertEquals(false, numberType0.isNominalConstructor());
      assertEquals(BooleanLiteralSet.BOTH, numberType0.getPossibleToBooleanOutcomes());
      assertEquals(true, numberType0.matchesStringContext());
      assertEquals(false, numberType0.isNoObjectType());
      assertEquals(false, numberType0.isInterface());
      assertEquals(false, numberType0.isEnumElementType());
      assertEquals(false, numberType0.isBooleanValueType());
      assertEquals(true, numberType0.matchesNumberContext());
      assertEquals(false, numberType0.isConstructor());
      assertEquals(false, numberType0.isResolved());
      assertEquals(false, numberType0.isTemplateType());
      assertEquals(false, numberType0.isNominalType());
      assertEquals(false, numberType0.isVoidType());
      assertEquals(true, numberType0.matchesObjectContext());
      
      NullType nullType0 = new NullType(jSTypeRegistry0);
      assertEquals(false, nullType0.isEnumElementType());
      assertEquals(false, nullType0.isFunctionPrototypeType());
      assertEquals(false, nullType0.isNominalConstructor());
      assertEquals(false, nullType0.isInterface());
      assertEquals(false, nullType0.matchesObjectContext());
      assertEquals(false, nullType0.isOrdinaryFunction());
      assertEquals(false, nullType0.isNoResolvedType());
      assertEquals(false, nullType0.isVoidType());
      assertEquals(false, nullType0.isConstructor());
      assertEquals(false, nullType0.isNoType());
      assertEquals(false, nullType0.isNoObjectType());
      assertEquals(false, nullType0.isNumberValueType());
      assertEquals(false, nullType0.isTemplateType());
      assertEquals(false, nullType0.isFunctionType());
      assertEquals(true, nullType0.isNullable());
      assertEquals(false, nullType0.isUnionType());
      assertEquals(true, nullType0.matchesNumberContext());
      assertEquals(false, nullType0.isBooleanValueType());
      assertEquals("null", nullType0.getDisplayName());
      assertEquals(false, nullType0.isNominalType());
      assertEquals(false, nullType0.isCheckedUnknownType());
      assertEquals(false, nullType0.isAllType());
      assertEquals(false, nullType0.isRecordType());
      assertEquals(false, nullType0.isResolved());
      assertEquals(false, nullType0.isEnumType());
      assertEquals(true, nullType0.isNullType());
      assertEquals(true, nullType0.matchesStringContext());
      assertEquals(false, nullType0.isStringValueType());
      assertEquals(BooleanLiteralSet.FALSE, nullType0.getPossibleToBooleanOutcomes());
      assertNotNull(nullType0);
      
      UnionType unionType0 = new UnionType(jSTypeRegistry0, vector0);
      assertEquals(10, vector0.capacity());
      assertEquals("[number]", vector0.toString());
      assertEquals(false, vector0.isEmpty());
      assertEquals(1, vector0.size());
      assertEquals(false, unionType0.isConstructor());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isOrdinaryFunction());
      assertEquals(false, unionType0.isNominalType());
      assertEquals(false, unionType0.isInterface());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isEnumElementType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isFunctionPrototypeType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isNominalConstructor());
      assertEquals(false, unionType0.isEnumType());
      assertEquals(false, unionType0.isNoResolvedType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isCheckedUnknownType());
      assertEquals(false, unionType0.isNullType());
      assertNotNull(unionType0);
      
      JSType.TypePair jSType_TypePair0 = unionType0.getTypesUnderShallowInequality((JSType) nullType0);
      assertEquals(10, vector0.capacity());
      assertEquals("[number]", vector0.toString());
      assertEquals(false, vector0.isEmpty());
      assertEquals(1, vector0.size());
      assertEquals(false, nullType0.isEnumElementType());
      assertEquals(false, nullType0.isFunctionPrototypeType());
      assertEquals(false, nullType0.isNominalConstructor());
      assertEquals(false, nullType0.isInterface());
      assertEquals(false, nullType0.matchesObjectContext());
      assertEquals(false, nullType0.isOrdinaryFunction());
      assertEquals(false, nullType0.isNoResolvedType());
      assertEquals(false, nullType0.isVoidType());
      assertEquals(false, nullType0.isConstructor());
      assertEquals(false, nullType0.isNoType());
      assertEquals(false, nullType0.isNoObjectType());
      assertEquals(false, nullType0.isNumberValueType());
      assertEquals(false, nullType0.isTemplateType());
      assertEquals(false, nullType0.isFunctionType());
      assertEquals(true, nullType0.isNullable());
      assertEquals(false, nullType0.isUnionType());
      assertEquals(true, nullType0.matchesNumberContext());
      assertEquals(false, nullType0.isBooleanValueType());
      assertEquals("null", nullType0.getDisplayName());
      assertEquals(false, nullType0.isNominalType());
      assertEquals(false, nullType0.isCheckedUnknownType());
      assertEquals(false, nullType0.isAllType());
      assertEquals(false, nullType0.isRecordType());
      assertEquals(false, nullType0.isResolved());
      assertEquals(false, nullType0.isEnumType());
      assertEquals(true, nullType0.isNullType());
      assertEquals(true, nullType0.matchesStringContext());
      assertEquals(false, nullType0.isStringValueType());
      assertEquals(BooleanLiteralSet.FALSE, nullType0.getPossibleToBooleanOutcomes());
      assertEquals(false, unionType0.isConstructor());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isOrdinaryFunction());
      assertEquals(false, unionType0.isNominalType());
      assertEquals(false, unionType0.isInterface());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isEnumElementType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isFunctionPrototypeType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isNominalConstructor());
      assertEquals(false, unionType0.isEnumType());
      assertEquals(false, unionType0.isNoResolvedType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isCheckedUnknownType());
      assertEquals(false, unionType0.isNullType());
      assertNotNull(jSType_TypePair0);
  }

  @Test
  public void test08()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = null;
      Vector<JSType> vector0 = new Vector<JSType>();
      assertEquals(0, vector0.size());
      assertEquals(true, vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertNotNull(vector0);
      
      boolean boolean0 = true;
      UnknownType unknownType0 = new UnknownType(jSTypeRegistry0, boolean0);
      assertEquals(false, unknownType0.isNoResolvedType());
      assertEquals(false, unknownType0.isNominalType());
      assertEquals(false, unknownType0.isFunctionType());
      assertEquals(false, unknownType0.isNativeObjectType());
      assertEquals(true, unknownType0.matchesNumberContext());
      assertEquals(false, unknownType0.isInterface());
      assertEquals(true, unknownType0.isCheckedUnknownType());
      assertEquals("??", unknownType0.getReferenceName());
      assertEquals(false, unknownType0.isAllType());
      assertEquals(true, unknownType0.isUnknownType());
      assertEquals(false, unknownType0.isNumberValueType());
      assertEquals(false, unknownType0.isNoType());
      assertEquals(false, unknownType0.hasReferenceName());
      assertEquals(BooleanLiteralSet.BOTH, unknownType0.getPossibleToBooleanOutcomes());
      assertEquals(true, unknownType0.isNullable());
      assertEquals(2147483647, unknownType0.getPropertiesCount());
      assertEquals(false, unknownType0.isVoidType());
      assertEquals(true, unknownType0.matchesStringContext());
      assertEquals(true, unknownType0.hasDisplayName());
      assertEquals(false, unknownType0.isNoObjectType());
      assertEquals(false, unknownType0.isResolved());
      assertEquals(false, unknownType0.isEnumType());
      assertEquals(false, unknownType0.isNominalConstructor());
      assertEquals(true, unknownType0.canBeCalled());
      assertEquals(true, unknownType0.matchesObjectContext());
      assertEquals(false, unknownType0.isRecordType());
      assertEquals(false, unknownType0.isUnionType());
      assertEquals(false, unknownType0.isBooleanValueType());
      assertEquals(false, unknownType0.isOrdinaryFunction());
      assertEquals(false, unknownType0.isEnumElementType());
      assertEquals(false, unknownType0.isTemplateType());
      assertEquals(false, unknownType0.hasCachedValues());
      assertEquals(false, unknownType0.isNullType());
      assertEquals(false, unknownType0.isConstructor());
      assertEquals(false, unknownType0.isStringValueType());
      assertEquals("Unknown", unknownType0.getDisplayName());
      assertEquals(false, unknownType0.isFunctionPrototypeType());
      assertNotNull(unknownType0);
      
      boolean boolean1 = vector0.add((JSType) unknownType0);
      assertTrue(boolean1);
      assertEquals(false, unknownType0.isNoResolvedType());
      assertEquals(false, unknownType0.isNominalType());
      assertEquals(false, unknownType0.isFunctionType());
      assertEquals(false, unknownType0.isNativeObjectType());
      assertEquals(true, unknownType0.matchesNumberContext());
      assertEquals(false, unknownType0.isInterface());
      assertEquals(true, unknownType0.isCheckedUnknownType());
      assertEquals("??", unknownType0.getReferenceName());
      assertEquals(false, unknownType0.isAllType());
      assertEquals(true, unknownType0.isUnknownType());
      assertEquals(false, unknownType0.isNumberValueType());
      assertEquals(false, unknownType0.isNoType());
      assertEquals(false, unknownType0.hasReferenceName());
      assertEquals(BooleanLiteralSet.BOTH, unknownType0.getPossibleToBooleanOutcomes());
      assertEquals(true, unknownType0.isNullable());
      assertEquals(2147483647, unknownType0.getPropertiesCount());
      assertEquals(false, unknownType0.isVoidType());
      assertEquals(true, unknownType0.matchesStringContext());
      assertEquals(true, unknownType0.hasDisplayName());
      assertEquals(false, unknownType0.isNoObjectType());
      assertEquals(false, unknownType0.isResolved());
      assertEquals(false, unknownType0.isEnumType());
      assertEquals(false, unknownType0.isNominalConstructor());
      assertEquals(true, unknownType0.canBeCalled());
      assertEquals(true, unknownType0.matchesObjectContext());
      assertEquals(false, unknownType0.isRecordType());
      assertEquals(false, unknownType0.isUnionType());
      assertEquals(false, unknownType0.isBooleanValueType());
      assertEquals(false, unknownType0.isOrdinaryFunction());
      assertEquals(false, unknownType0.isEnumElementType());
      assertEquals(false, unknownType0.isTemplateType());
      assertEquals(false, unknownType0.hasCachedValues());
      assertEquals(false, unknownType0.isNullType());
      assertEquals(false, unknownType0.isConstructor());
      assertEquals(false, unknownType0.isStringValueType());
      assertEquals("Unknown", unknownType0.getDisplayName());
      assertEquals(false, unknownType0.isFunctionPrototypeType());
      assertEquals(false, vector0.isEmpty());
      assertEquals("[??]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertEquals(1, vector0.size());
      assertTrue(boolean0 == boolean1);
      assertTrue(boolean1 == boolean0);
      
      UnionType unionType0 = new UnionType(jSTypeRegistry0, vector0);
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isOrdinaryFunction());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isInterface());
      assertEquals(false, unionType0.isNoResolvedType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isEnumType());
      assertEquals(false, unionType0.isConstructor());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isNominalConstructor());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isEnumElementType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isNominalType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isCheckedUnknownType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isFunctionPrototypeType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, vector0.isEmpty());
      assertEquals("[??]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertEquals(1, vector0.size());
      assertNotNull(unionType0);
      
      // Undeclared exception!
      try {
        JSType.TypePair jSType_TypePair0 = unionType0.getTypesUnderInequality((JSType) unionType0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test09()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = null;
      Vector<JSType> vector0 = new Vector<JSType>();
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertEquals(true, vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertNotNull(vector0);
      
      UnionType unionType0 = new UnionType(jSTypeRegistry0, vector0);
      assertEquals(false, unionType0.isInterface());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isConstructor());
      assertEquals(false, unionType0.isNominalType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isEnumElementType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isNominalConstructor());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isCheckedUnknownType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isNoResolvedType());
      assertEquals(false, unionType0.isOrdinaryFunction());
      assertEquals(false, unionType0.isFunctionPrototypeType());
      assertEquals(false, unionType0.isEnumType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertEquals(true, vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertNotNull(unionType0);
      
      ErrorReporter errorReporter0 = null;
      JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry(errorReporter0);
      assertEquals(false, jSTypeRegistry1.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry1);
      
      NoObjectType noObjectType0 = new NoObjectType(jSTypeRegistry1);
      assertEquals(false, jSTypeRegistry1.shouldTolerateUndefinedValues());
      assertEquals(false, noObjectType0.isNominalConstructor());
      assertEquals(BooleanLiteralSet.TRUE, noObjectType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noObjectType0.isEnumElementType());
      assertEquals(false, noObjectType0.isAllType());
      assertEquals(false, noObjectType0.isNullType());
      assertEquals(false, noObjectType0.isEnumType());
      assertEquals(false, noObjectType0.isCheckedUnknownType());
      assertEquals(true, noObjectType0.matchesNumberContext());
      assertEquals(false, noObjectType0.isResolved());
      assertEquals(false, noObjectType0.isStringValueType());
      assertEquals(false, noObjectType0.isRecordType());
      assertEquals(true, noObjectType0.isConstructor());
      assertEquals(false, noObjectType0.isNominalType());
      assertEquals(false, noObjectType0.isNumberValueType());
      assertEquals(false, noObjectType0.isUnionType());
      assertEquals(false, noObjectType0.isInterface());
      assertNull(noObjectType0.getTemplateTypeName());
      assertEquals(false, noObjectType0.isFunctionType());
      assertEquals(2147483647, noObjectType0.getPropertiesCount());
      assertEquals(false, noObjectType0.isBooleanValueType());
      assertEquals(false, noObjectType0.isFunctionPrototypeType());
      assertEquals(0, noObjectType0.getExtendedInterfacesCount());
      assertEquals(false, noObjectType0.isNoType());
      assertEquals(false, noObjectType0.isNoResolvedType());
      assertEquals(true, noObjectType0.isNoObjectType());
      assertEquals(false, noObjectType0.isReturnTypeInferred());
      assertEquals(2147483647, noObjectType0.getMaxArguments());
      assertNull(noObjectType0.getReferenceName());
      assertEquals(false, noObjectType0.isTemplateType());
      assertEquals(true, noObjectType0.canBeCalled());
      assertEquals(false, noObjectType0.isVoidType());
      assertEquals(true, noObjectType0.hasInstanceType());
      assertEquals(false, noObjectType0.isOrdinaryFunction());
      assertEquals(false, noObjectType0.hasCachedValues());
      assertEquals(true, noObjectType0.matchesStringContext());
      assertEquals(true, noObjectType0.matchesObjectContext());
      assertNotNull(noObjectType0);
      
      boolean boolean0 = vector0.add((JSType) noObjectType0);
      assertTrue(boolean0);
      assertEquals(false, jSTypeRegistry1.shouldTolerateUndefinedValues());
      assertEquals(false, noObjectType0.isNominalConstructor());
      assertEquals(BooleanLiteralSet.TRUE, noObjectType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noObjectType0.isEnumElementType());
      assertEquals(false, noObjectType0.isAllType());
      assertEquals(false, noObjectType0.isNullType());
      assertEquals(false, noObjectType0.isEnumType());
      assertEquals(false, noObjectType0.isCheckedUnknownType());
      assertEquals(true, noObjectType0.matchesNumberContext());
      assertEquals(false, noObjectType0.isResolved());
      assertEquals(false, noObjectType0.isStringValueType());
      assertEquals(false, noObjectType0.isRecordType());
      assertEquals(true, noObjectType0.isConstructor());
      assertEquals(false, noObjectType0.isNominalType());
      assertEquals(false, noObjectType0.isNumberValueType());
      assertEquals(false, noObjectType0.isUnionType());
      assertEquals(false, noObjectType0.isInterface());
      assertNull(noObjectType0.getTemplateTypeName());
      assertEquals(false, noObjectType0.isFunctionType());
      assertEquals(2147483647, noObjectType0.getPropertiesCount());
      assertEquals(false, noObjectType0.isBooleanValueType());
      assertEquals(false, noObjectType0.isFunctionPrototypeType());
      assertEquals(0, noObjectType0.getExtendedInterfacesCount());
      assertEquals(false, noObjectType0.isNoType());
      assertEquals(false, noObjectType0.isNoResolvedType());
      assertEquals(true, noObjectType0.isNoObjectType());
      assertEquals(false, noObjectType0.isReturnTypeInferred());
      assertEquals(2147483647, noObjectType0.getMaxArguments());
      assertNull(noObjectType0.getReferenceName());
      assertEquals(false, noObjectType0.isTemplateType());
      assertEquals(true, noObjectType0.canBeCalled());
      assertEquals(false, noObjectType0.isVoidType());
      assertEquals(true, noObjectType0.hasInstanceType());
      assertEquals(false, noObjectType0.isOrdinaryFunction());
      assertEquals(false, noObjectType0.hasCachedValues());
      assertEquals(true, noObjectType0.matchesStringContext());
      assertEquals(true, noObjectType0.matchesObjectContext());
      assertEquals(false, vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertEquals("[NoObject]", vector0.toString());
      assertEquals(1, vector0.size());
      
      JSType.TypePair jSType_TypePair0 = unionType0.getTypesUnderEquality((JSType) noObjectType0);
      assertEquals(false, jSTypeRegistry1.shouldTolerateUndefinedValues());
      assertEquals(false, unionType0.isInterface());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isConstructor());
      assertEquals(false, unionType0.isNominalType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isEnumElementType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isNominalConstructor());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isCheckedUnknownType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isNoResolvedType());
      assertEquals(false, unionType0.isOrdinaryFunction());
      assertEquals(false, unionType0.isFunctionPrototypeType());
      assertEquals(false, unionType0.isEnumType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, noObjectType0.isNominalConstructor());
      assertEquals(BooleanLiteralSet.TRUE, noObjectType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noObjectType0.isEnumElementType());
      assertEquals(false, noObjectType0.isAllType());
      assertEquals(false, noObjectType0.isNullType());
      assertEquals(false, noObjectType0.isEnumType());
      assertEquals(false, noObjectType0.isCheckedUnknownType());
      assertEquals(true, noObjectType0.matchesNumberContext());
      assertEquals(false, noObjectType0.isResolved());
      assertEquals(false, noObjectType0.isStringValueType());
      assertEquals(false, noObjectType0.isRecordType());
      assertEquals(true, noObjectType0.isConstructor());
      assertEquals(false, noObjectType0.isNominalType());
      assertEquals(false, noObjectType0.isNumberValueType());
      assertEquals(false, noObjectType0.isUnionType());
      assertEquals(false, noObjectType0.isInterface());
      assertNull(noObjectType0.getTemplateTypeName());
      assertEquals(false, noObjectType0.isFunctionType());
      assertEquals(2147483647, noObjectType0.getPropertiesCount());
      assertEquals(false, noObjectType0.isBooleanValueType());
      assertEquals(false, noObjectType0.isFunctionPrototypeType());
      assertEquals(0, noObjectType0.getExtendedInterfacesCount());
      assertEquals(false, noObjectType0.isNoType());
      assertEquals(false, noObjectType0.isNoResolvedType());
      assertEquals(true, noObjectType0.hasCachedValues());
      assertEquals(true, noObjectType0.isNoObjectType());
      assertEquals(false, noObjectType0.isReturnTypeInferred());
      assertEquals(2147483647, noObjectType0.getMaxArguments());
      assertNull(noObjectType0.getReferenceName());
      assertEquals(false, noObjectType0.isTemplateType());
      assertEquals(true, noObjectType0.canBeCalled());
      assertEquals(false, noObjectType0.isVoidType());
      assertEquals(true, noObjectType0.hasInstanceType());
      assertEquals(false, noObjectType0.isOrdinaryFunction());
      assertEquals(true, noObjectType0.matchesStringContext());
      assertEquals(true, noObjectType0.matchesObjectContext());
      assertEquals(false, vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertEquals("[NoObject]", vector0.toString());
      assertEquals(1, vector0.size());
      assertNotNull(jSType_TypePair0);
  }

  @Test
  public void test10()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = null;
      Vector<JSType> vector0 = new Vector<JSType>();
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertEquals("[]", vector0.toString());
      assertEquals(true, vector0.isEmpty());
      assertNotNull(vector0);
      
      UnionType unionType0 = new UnionType(jSTypeRegistry0, vector0);
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isInterface());
      assertEquals(false, unionType0.isConstructor());
      assertEquals(false, unionType0.isNominalType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isOrdinaryFunction());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isNoResolvedType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isCheckedUnknownType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isEnumElementType());
      assertEquals(false, unionType0.isNominalConstructor());
      assertEquals(false, unionType0.isEnumType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isFunctionPrototypeType());
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertEquals("[]", vector0.toString());
      assertEquals(true, vector0.isEmpty());
      assertNotNull(unionType0);
      
      HashSet<JSType> hashSet0 = new HashSet<JSType>();
      assertEquals(true, hashSet0.isEmpty());
      assertEquals("[]", hashSet0.toString());
      assertEquals(0, hashSet0.size());
      assertNotNull(hashSet0);
      
      UnionType unionType1 = new UnionType(jSTypeRegistry0, hashSet0);
      assertNotSame(unionType1, unionType0);
      assertEquals(true, hashSet0.isEmpty());
      assertEquals("[]", hashSet0.toString());
      assertEquals(0, hashSet0.size());
      assertEquals(false, unionType1.isInterface());
      assertEquals(false, unionType1.isVoidType());
      assertEquals(false, unionType1.isBooleanValueType());
      assertEquals(false, unionType1.isStringValueType());
      assertEquals(false, unionType1.isConstructor());
      assertEquals(false, unionType1.isNominalType());
      assertEquals(false, unionType1.isNoType());
      assertEquals(false, unionType1.isNumberValueType());
      assertEquals(false, unionType1.isResolved());
      assertEquals(false, unionType1.isCheckedUnknownType());
      assertEquals(false, unionType1.isOrdinaryFunction());
      assertEquals(false, unionType1.isTemplateType());
      assertEquals(false, unionType1.isFunctionPrototypeType());
      assertEquals(false, unionType1.isNoObjectType());
      assertEquals(true, unionType1.isUnionType());
      assertEquals(false, unionType1.isNoResolvedType());
      assertEquals(false, unionType1.isNullType());
      assertEquals(false, unionType1.isEnumType());
      assertEquals(false, unionType1.isEnumElementType());
      assertEquals(false, unionType1.isNominalConstructor());
      assertEquals(false, unionType1.isRecordType());
      assertEquals(false, unionType1.isAllType());
      assertEquals(false, unionType1.isFunctionType());
      assertTrue(unionType1.equals((Object)unionType0));
      assertNotNull(unionType1);
      
      boolean boolean0 = hashSet0.add((JSType) unionType0);
      assertTrue(boolean0);
      assertNotSame(unionType0, unionType1);
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isInterface());
      assertEquals(false, unionType0.isConstructor());
      assertEquals(false, unionType0.isNominalType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isOrdinaryFunction());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isNoResolvedType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isCheckedUnknownType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isEnumElementType());
      assertEquals(false, unionType0.isNominalConstructor());
      assertEquals(false, unionType0.isEnumType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isFunctionPrototypeType());
      assertEquals(false, hashSet0.isEmpty());
      assertEquals("[()]", hashSet0.toString());
      assertEquals(1, hashSet0.size());
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertEquals("[]", vector0.toString());
      assertEquals(true, vector0.isEmpty());
      assertFalse(unionType0.equals((Object)unionType1));
      
      BooleanLiteralSet booleanLiteralSet0 = unionType1.getPossibleToBooleanOutcomes();
      assertEquals(BooleanLiteralSet.EMPTY, booleanLiteralSet0);
      assertNotSame(unionType1, unionType0);
      assertEquals("EMPTY", booleanLiteralSet0.name());
      assertEquals(0, booleanLiteralSet0.ordinal());
      assertEquals("EMPTY", booleanLiteralSet0.toString());
      assertEquals(false, hashSet0.isEmpty());
      assertEquals("[()]", hashSet0.toString());
      assertEquals(1, hashSet0.size());
      assertEquals(false, unionType1.isInterface());
      assertEquals(false, unionType1.isVoidType());
      assertEquals(false, unionType1.isBooleanValueType());
      assertEquals(false, unionType1.isStringValueType());
      assertEquals(false, unionType1.isConstructor());
      assertEquals(false, unionType1.isNominalType());
      assertEquals(false, unionType1.isNoType());
      assertEquals(false, unionType1.isNumberValueType());
      assertEquals(false, unionType1.isResolved());
      assertEquals(false, unionType1.isCheckedUnknownType());
      assertEquals(false, unionType1.isOrdinaryFunction());
      assertEquals(false, unionType1.isTemplateType());
      assertEquals(false, unionType1.isFunctionPrototypeType());
      assertEquals(false, unionType1.isNoObjectType());
      assertEquals(true, unionType1.isUnionType());
      assertEquals(false, unionType1.isNoResolvedType());
      assertEquals(false, unionType1.isNullType());
      assertEquals(false, unionType1.isEnumType());
      assertEquals(false, unionType1.isEnumElementType());
      assertEquals(false, unionType1.isNominalConstructor());
      assertEquals(false, unionType1.isRecordType());
      assertEquals(false, unionType1.isAllType());
      assertEquals(false, unionType1.isFunctionType());
      assertFalse(unionType1.equals((Object)unionType0));
  }

  @Test
  public void test11()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = null;
      Vector<JSType> vector0 = new Vector<JSType>();
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertEquals(0, vector0.size());
      assertEquals(true, vector0.isEmpty());
      assertNotNull(vector0);
      
      NumberType numberType0 = new NumberType(jSTypeRegistry0);
      assertEquals(true, numberType0.matchesNumberContext());
      assertEquals(BooleanLiteralSet.BOTH, numberType0.getPossibleToBooleanOutcomes());
      assertEquals("number", numberType0.getDisplayName());
      assertEquals(false, numberType0.isStringValueType());
      assertEquals(true, numberType0.matchesStringContext());
      assertEquals(false, numberType0.isNullType());
      assertEquals(false, numberType0.isBooleanValueType());
      assertEquals(false, numberType0.isUnionType());
      assertEquals(false, numberType0.isNominalConstructor());
      assertEquals(false, numberType0.isInterface());
      assertEquals(false, numberType0.isEnumType());
      assertEquals(true, numberType0.matchesObjectContext());
      assertEquals(false, numberType0.isFunctionType());
      assertEquals(false, numberType0.isRecordType());
      assertEquals(false, numberType0.isOrdinaryFunction());
      assertEquals(false, numberType0.isAllType());
      assertEquals(true, numberType0.isNumberValueType());
      assertEquals(false, numberType0.isCheckedUnknownType());
      assertEquals(false, numberType0.isNoType());
      assertEquals(false, numberType0.isNoResolvedType());
      assertEquals(false, numberType0.isNoObjectType());
      assertEquals(false, numberType0.isFunctionPrototypeType());
      assertEquals(false, numberType0.isNominalType());
      assertEquals(false, numberType0.isNullable());
      assertEquals(false, numberType0.isResolved());
      assertEquals(false, numberType0.isTemplateType());
      assertEquals(false, numberType0.isVoidType());
      assertEquals(false, numberType0.isConstructor());
      assertEquals(false, numberType0.isEnumElementType());
      assertNotNull(numberType0);
      
      vector0.addElement((JSType) numberType0);
      assertEquals(true, numberType0.matchesNumberContext());
      assertEquals(BooleanLiteralSet.BOTH, numberType0.getPossibleToBooleanOutcomes());
      assertEquals("number", numberType0.getDisplayName());
      assertEquals(false, numberType0.isStringValueType());
      assertEquals(true, numberType0.matchesStringContext());
      assertEquals(false, numberType0.isNullType());
      assertEquals(false, numberType0.isBooleanValueType());
      assertEquals(false, numberType0.isUnionType());
      assertEquals(false, numberType0.isNominalConstructor());
      assertEquals(false, numberType0.isInterface());
      assertEquals(false, numberType0.isEnumType());
      assertEquals(true, numberType0.matchesObjectContext());
      assertEquals(false, numberType0.isFunctionType());
      assertEquals(false, numberType0.isRecordType());
      assertEquals(false, numberType0.isOrdinaryFunction());
      assertEquals(false, numberType0.isAllType());
      assertEquals(true, numberType0.isNumberValueType());
      assertEquals(false, numberType0.isCheckedUnknownType());
      assertEquals(false, numberType0.isNoType());
      assertEquals(false, numberType0.isNoResolvedType());
      assertEquals(false, numberType0.isNoObjectType());
      assertEquals(false, numberType0.isFunctionPrototypeType());
      assertEquals(false, numberType0.isNominalType());
      assertEquals(false, numberType0.isNullable());
      assertEquals(false, numberType0.isResolved());
      assertEquals(false, numberType0.isTemplateType());
      assertEquals(false, numberType0.isVoidType());
      assertEquals(false, numberType0.isConstructor());
      assertEquals(false, numberType0.isEnumElementType());
      assertEquals(10, vector0.capacity());
      assertEquals("[number]", vector0.toString());
      assertEquals(1, vector0.size());
      assertEquals(false, vector0.isEmpty());
      
      UnionType unionType0 = new UnionType(jSTypeRegistry0, vector0);
      assertEquals(false, unionType0.isNoResolvedType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isNominalConstructor());
      assertEquals(false, unionType0.isEnumType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isOrdinaryFunction());
      assertEquals(false, unionType0.isNominalType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isConstructor());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isEnumElementType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isCheckedUnknownType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isInterface());
      assertEquals(false, unionType0.isFunctionPrototypeType());
      assertEquals(10, vector0.capacity());
      assertEquals("[number]", vector0.toString());
      assertEquals(1, vector0.size());
      assertEquals(false, vector0.isEmpty());
      assertNotNull(unionType0);
      
      BooleanLiteralSet booleanLiteralSet0 = unionType0.getPossibleToBooleanOutcomes();
      assertEquals(BooleanLiteralSet.BOTH, booleanLiteralSet0);
      assertEquals(false, unionType0.isNoResolvedType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isNominalConstructor());
      assertEquals(false, unionType0.isEnumType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isOrdinaryFunction());
      assertEquals(false, unionType0.isNominalType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isConstructor());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isEnumElementType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isCheckedUnknownType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isInterface());
      assertEquals(false, unionType0.isFunctionPrototypeType());
      assertEquals(10, vector0.capacity());
      assertEquals("[number]", vector0.toString());
      assertEquals(1, vector0.size());
      assertEquals(false, vector0.isEmpty());
      assertEquals("BOTH", booleanLiteralSet0.toString());
      assertEquals("BOTH", booleanLiteralSet0.name());
      assertEquals(3, booleanLiteralSet0.ordinal());
  }

  @Test
  public void test12()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = null;
      Vector<JSType> vector0 = new Vector<JSType>();
      assertEquals("[]", vector0.toString());
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertEquals(true, vector0.isEmpty());
      assertNotNull(vector0);
      
      UnionType unionType0 = new UnionType(jSTypeRegistry0, vector0);
      assertEquals("[]", vector0.toString());
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertEquals(true, vector0.isEmpty());
      assertEquals(false, unionType0.isNominalType());
      assertEquals(false, unionType0.isFunctionPrototypeType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isCheckedUnknownType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isOrdinaryFunction());
      assertEquals(false, unionType0.isInterface());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isEnumType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isConstructor());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isEnumElementType());
      assertEquals(false, unionType0.isNominalConstructor());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isNoResolvedType());
      assertNotNull(unionType0);
      
      ErrorReporter errorReporter0 = null;
      JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry(errorReporter0);
      assertEquals(false, jSTypeRegistry1.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry1);
      
      NoObjectType noObjectType0 = new NoObjectType(jSTypeRegistry1);
      assertEquals(false, noObjectType0.isNumberValueType());
      assertEquals(true, noObjectType0.canBeCalled());
      assertEquals(false, noObjectType0.isFunctionPrototypeType());
      assertEquals(2147483647, noObjectType0.getMaxArguments());
      assertEquals(true, noObjectType0.matchesNumberContext());
      assertEquals(false, noObjectType0.isAllType());
      assertEquals(false, noObjectType0.isCheckedUnknownType());
      assertEquals(true, noObjectType0.matchesStringContext());
      assertEquals(false, noObjectType0.isTemplateType());
      assertEquals(false, noObjectType0.isOrdinaryFunction());
      assertEquals(true, noObjectType0.matchesObjectContext());
      assertEquals(false, noObjectType0.isNoResolvedType());
      assertEquals(false, noObjectType0.isVoidType());
      assertEquals(false, noObjectType0.isFunctionType());
      assertEquals(false, noObjectType0.hasCachedValues());
      assertEquals(false, noObjectType0.isNoType());
      assertEquals(false, noObjectType0.isInterface());
      assertEquals(0, noObjectType0.getExtendedInterfacesCount());
      assertEquals(false, noObjectType0.isReturnTypeInferred());
      assertEquals(false, noObjectType0.isBooleanValueType());
      assertEquals(false, noObjectType0.isNominalConstructor());
      assertEquals(true, noObjectType0.isConstructor());
      assertEquals(false, noObjectType0.isRecordType());
      assertEquals(true, noObjectType0.isNoObjectType());
      assertEquals(false, noObjectType0.isNullType());
      assertEquals(false, noObjectType0.isStringValueType());
      assertEquals(BooleanLiteralSet.TRUE, noObjectType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noObjectType0.isEnumType());
      assertEquals(true, noObjectType0.hasInstanceType());
      assertEquals(2147483647, noObjectType0.getPropertiesCount());
      assertNull(noObjectType0.getReferenceName());
      assertNull(noObjectType0.getTemplateTypeName());
      assertEquals(false, noObjectType0.isEnumElementType());
      assertEquals(false, noObjectType0.isUnionType());
      assertEquals(false, noObjectType0.isNominalType());
      assertEquals(false, noObjectType0.isResolved());
      assertEquals(false, jSTypeRegistry1.shouldTolerateUndefinedValues());
      assertNotNull(noObjectType0);
      
      boolean boolean0 = vector0.add((JSType) noObjectType0);
      assertTrue(boolean0);
      assertEquals(false, vector0.isEmpty());
      assertEquals("[NoObject]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertEquals(1, vector0.size());
      assertEquals(false, noObjectType0.isNumberValueType());
      assertEquals(true, noObjectType0.canBeCalled());
      assertEquals(false, noObjectType0.isFunctionPrototypeType());
      assertEquals(2147483647, noObjectType0.getMaxArguments());
      assertEquals(true, noObjectType0.matchesNumberContext());
      assertEquals(false, noObjectType0.isAllType());
      assertEquals(false, noObjectType0.isCheckedUnknownType());
      assertEquals(true, noObjectType0.matchesStringContext());
      assertEquals(false, noObjectType0.isTemplateType());
      assertEquals(false, noObjectType0.isOrdinaryFunction());
      assertEquals(true, noObjectType0.matchesObjectContext());
      assertEquals(false, noObjectType0.isNoResolvedType());
      assertEquals(false, noObjectType0.isVoidType());
      assertEquals(false, noObjectType0.isFunctionType());
      assertEquals(false, noObjectType0.hasCachedValues());
      assertEquals(false, noObjectType0.isNoType());
      assertEquals(false, noObjectType0.isInterface());
      assertEquals(0, noObjectType0.getExtendedInterfacesCount());
      assertEquals(false, noObjectType0.isReturnTypeInferred());
      assertEquals(false, noObjectType0.isBooleanValueType());
      assertEquals(false, noObjectType0.isNominalConstructor());
      assertEquals(true, noObjectType0.isConstructor());
      assertEquals(false, noObjectType0.isRecordType());
      assertEquals(true, noObjectType0.isNoObjectType());
      assertEquals(false, noObjectType0.isNullType());
      assertEquals(false, noObjectType0.isStringValueType());
      assertEquals(BooleanLiteralSet.TRUE, noObjectType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noObjectType0.isEnumType());
      assertEquals(true, noObjectType0.hasInstanceType());
      assertEquals(2147483647, noObjectType0.getPropertiesCount());
      assertNull(noObjectType0.getReferenceName());
      assertNull(noObjectType0.getTemplateTypeName());
      assertEquals(false, noObjectType0.isEnumElementType());
      assertEquals(false, noObjectType0.isUnionType());
      assertEquals(false, noObjectType0.isNominalType());
      assertEquals(false, noObjectType0.isResolved());
      assertEquals(false, jSTypeRegistry1.shouldTolerateUndefinedValues());
      
      NoObjectType noObjectType1 = (NoObjectType)unionType0.getRestrictedTypeGivenToBooleanOutcome(boolean0);
      assertSame(noObjectType0, noObjectType1);
      assertSame(noObjectType1, noObjectType0);
      assertEquals(false, vector0.isEmpty());
      assertEquals("[NoObject]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertEquals(1, vector0.size());
      assertEquals(false, noObjectType0.isNumberValueType());
      assertEquals(true, noObjectType0.canBeCalled());
      assertEquals(false, noObjectType0.isFunctionPrototypeType());
      assertEquals(2147483647, noObjectType0.getMaxArguments());
      assertEquals(true, noObjectType0.matchesNumberContext());
      assertEquals(false, noObjectType0.isAllType());
      assertEquals(false, noObjectType0.isCheckedUnknownType());
      assertEquals(true, noObjectType0.matchesStringContext());
      assertEquals(false, noObjectType0.isTemplateType());
      assertEquals(false, noObjectType0.isOrdinaryFunction());
      assertEquals(true, noObjectType0.matchesObjectContext());
      assertEquals(false, noObjectType0.isNoResolvedType());
      assertEquals(false, noObjectType0.isVoidType());
      assertEquals(false, noObjectType0.isFunctionType());
      assertEquals(false, noObjectType0.hasCachedValues());
      assertEquals(false, noObjectType0.isNoType());
      assertEquals(false, noObjectType0.isInterface());
      assertEquals(0, noObjectType0.getExtendedInterfacesCount());
      assertEquals(false, noObjectType0.isReturnTypeInferred());
      assertEquals(false, noObjectType0.isBooleanValueType());
      assertEquals(false, noObjectType0.isNominalConstructor());
      assertEquals(true, noObjectType0.isConstructor());
      assertEquals(false, noObjectType0.isRecordType());
      assertEquals(true, noObjectType0.isNoObjectType());
      assertEquals(false, noObjectType0.isNullType());
      assertEquals(false, noObjectType0.isStringValueType());
      assertEquals(BooleanLiteralSet.TRUE, noObjectType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noObjectType0.isEnumType());
      assertEquals(true, noObjectType0.hasInstanceType());
      assertEquals(2147483647, noObjectType0.getPropertiesCount());
      assertNull(noObjectType0.getReferenceName());
      assertNull(noObjectType0.getTemplateTypeName());
      assertEquals(false, noObjectType0.isEnumElementType());
      assertEquals(false, noObjectType0.isUnionType());
      assertEquals(false, noObjectType0.isNominalType());
      assertEquals(false, noObjectType0.isResolved());
      assertEquals(0, noObjectType1.getExtendedInterfacesCount());
      assertEquals(false, noObjectType1.isCheckedUnknownType());
      assertEquals(false, noObjectType1.isNoType());
      assertEquals(false, noObjectType1.isAllType());
      assertEquals(false, noObjectType1.isVoidType());
      assertEquals(false, noObjectType1.isNumberValueType());
      assertEquals(true, noObjectType1.isNoObjectType());
      assertEquals(false, noObjectType1.isEnumElementType());
      assertEquals(false, noObjectType1.isNominalType());
      assertEquals(false, noObjectType1.isEnumType());
      assertEquals(true, noObjectType1.canBeCalled());
      assertEquals(false, noObjectType1.isBooleanValueType());
      assertNull(noObjectType1.getTemplateTypeName());
      assertEquals(false, noObjectType1.isInterface());
      assertEquals(false, noObjectType1.isStringValueType());
      assertEquals(true, noObjectType1.hasInstanceType());
      assertEquals(false, noObjectType1.isNoResolvedType());
      assertEquals(false, noObjectType1.hasCachedValues());
      assertEquals(false, noObjectType1.isOrdinaryFunction());
      assertEquals(false, noObjectType1.isNominalConstructor());
      assertEquals(2147483647, noObjectType1.getPropertiesCount());
      assertEquals(true, noObjectType1.matchesStringContext());
      assertEquals(false, noObjectType1.isNullType());
      assertEquals(2147483647, noObjectType1.getMaxArguments());
      assertEquals(false, noObjectType1.isRecordType());
      assertEquals(false, noObjectType1.isReturnTypeInferred());
      assertEquals(false, noObjectType1.isTemplateType());
      assertEquals(false, noObjectType1.isResolved());
      assertEquals(true, noObjectType1.matchesNumberContext());
      assertEquals(false, noObjectType1.isUnionType());
      assertEquals(true, noObjectType1.isConstructor());
      assertEquals(BooleanLiteralSet.TRUE, noObjectType1.getPossibleToBooleanOutcomes());
      assertEquals(false, noObjectType1.isFunctionType());
      assertEquals(false, noObjectType1.isFunctionPrototypeType());
      assertEquals(true, noObjectType1.matchesObjectContext());
      assertNull(noObjectType1.getReferenceName());
      assertEquals(false, unionType0.isNominalType());
      assertEquals(false, unionType0.isFunctionPrototypeType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isCheckedUnknownType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isOrdinaryFunction());
      assertEquals(false, unionType0.isInterface());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isEnumType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isConstructor());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isEnumElementType());
      assertEquals(false, unionType0.isNominalConstructor());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isNoResolvedType());
      assertEquals(false, jSTypeRegistry1.shouldTolerateUndefinedValues());
      assertNotNull(noObjectType1);
  }

  @Test
  public void test13()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = null;
      Vector<JSType> vector0 = new Vector<JSType>();
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertEquals(true, vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertNotNull(vector0);
      
      UnionType unionType0 = new UnionType(jSTypeRegistry0, vector0);
      assertEquals(false, unionType0.isNominalType());
      assertEquals(false, unionType0.isCheckedUnknownType());
      assertEquals(false, unionType0.isNoResolvedType());
      assertEquals(false, unionType0.isOrdinaryFunction());
      assertEquals(false, unionType0.isEnumType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isFunctionPrototypeType());
      assertEquals(false, unionType0.isConstructor());
      assertEquals(false, unionType0.isInterface());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isNominalConstructor());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isEnumElementType());
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertEquals(true, vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertNotNull(unionType0);
      
      boolean boolean0 = unionType0.isObject();
      assertTrue(boolean0);
      assertEquals(false, unionType0.isNominalType());
      assertEquals(false, unionType0.isCheckedUnknownType());
      assertEquals(false, unionType0.isNoResolvedType());
      assertEquals(false, unionType0.isOrdinaryFunction());
      assertEquals(false, unionType0.isEnumType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isFunctionPrototypeType());
      assertEquals(false, unionType0.isConstructor());
      assertEquals(false, unionType0.isInterface());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isNominalConstructor());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isEnumElementType());
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertEquals(true, vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      
      // Undeclared exception!
      try {
        JSType jSType0 = unionType0.getRestrictedTypeGivenToBooleanOutcome(boolean0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test14()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = null;
      Vector<JSType> vector0 = new Vector<JSType>();
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertEquals(0, vector0.size());
      assertEquals(true, vector0.isEmpty());
      assertNotNull(vector0);
      
      NumberType numberType0 = new NumberType(jSTypeRegistry0);
      assertEquals(false, numberType0.isCheckedUnknownType());
      assertEquals(false, numberType0.isOrdinaryFunction());
      assertEquals(false, numberType0.isFunctionType());
      assertEquals(false, numberType0.isConstructor());
      assertEquals(false, numberType0.isAllType());
      assertEquals(true, numberType0.matchesNumberContext());
      assertEquals(false, numberType0.isBooleanValueType());
      assertEquals(false, numberType0.isRecordType());
      assertEquals(false, numberType0.isUnionType());
      assertEquals(false, numberType0.isFunctionPrototypeType());
      assertEquals(false, numberType0.isNoType());
      assertEquals(BooleanLiteralSet.BOTH, numberType0.getPossibleToBooleanOutcomes());
      assertEquals(false, numberType0.isNullType());
      assertEquals(false, numberType0.isInterface());
      assertEquals(true, numberType0.matchesObjectContext());
      assertEquals(true, numberType0.matchesStringContext());
      assertEquals(false, numberType0.isEnumElementType());
      assertEquals(false, numberType0.isNullable());
      assertEquals(false, numberType0.isStringValueType());
      assertEquals(false, numberType0.isNominalType());
      assertEquals(false, numberType0.isNoObjectType());
      assertEquals(false, numberType0.isResolved());
      assertEquals(false, numberType0.isTemplateType());
      assertEquals(false, numberType0.isNoResolvedType());
      assertEquals(false, numberType0.isNominalConstructor());
      assertEquals("number", numberType0.getDisplayName());
      assertEquals(false, numberType0.isEnumType());
      assertEquals(true, numberType0.isNumberValueType());
      assertEquals(false, numberType0.isVoidType());
      assertNotNull(numberType0);
      
      vector0.addElement((JSType) numberType0);
      assertEquals(false, numberType0.isCheckedUnknownType());
      assertEquals(false, numberType0.isOrdinaryFunction());
      assertEquals(false, numberType0.isFunctionType());
      assertEquals(false, numberType0.isConstructor());
      assertEquals(false, numberType0.isAllType());
      assertEquals(true, numberType0.matchesNumberContext());
      assertEquals(false, numberType0.isBooleanValueType());
      assertEquals(false, numberType0.isRecordType());
      assertEquals(false, numberType0.isUnionType());
      assertEquals(false, numberType0.isFunctionPrototypeType());
      assertEquals(false, numberType0.isNoType());
      assertEquals(BooleanLiteralSet.BOTH, numberType0.getPossibleToBooleanOutcomes());
      assertEquals(false, numberType0.isNullType());
      assertEquals(false, numberType0.isInterface());
      assertEquals(true, numberType0.matchesObjectContext());
      assertEquals(true, numberType0.matchesStringContext());
      assertEquals(false, numberType0.isEnumElementType());
      assertEquals(false, numberType0.isNullable());
      assertEquals(false, numberType0.isStringValueType());
      assertEquals(false, numberType0.isNominalType());
      assertEquals(false, numberType0.isNoObjectType());
      assertEquals(false, numberType0.isResolved());
      assertEquals(false, numberType0.isTemplateType());
      assertEquals(false, numberType0.isNoResolvedType());
      assertEquals(false, numberType0.isNominalConstructor());
      assertEquals("number", numberType0.getDisplayName());
      assertEquals(false, numberType0.isEnumType());
      assertEquals(true, numberType0.isNumberValueType());
      assertEquals(false, numberType0.isVoidType());
      assertEquals(10, vector0.capacity());
      assertEquals("[number]", vector0.toString());
      assertEquals(false, vector0.isEmpty());
      assertEquals(1, vector0.size());
      
      UnionType unionType0 = new UnionType(jSTypeRegistry0, vector0);
      assertEquals(false, unionType0.isFunctionPrototypeType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isCheckedUnknownType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isInterface());
      assertEquals(false, unionType0.isNominalConstructor());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isConstructor());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isEnumElementType());
      assertEquals(false, unionType0.isEnumType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isNoResolvedType());
      assertEquals(false, unionType0.isOrdinaryFunction());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isNominalType());
      assertEquals(10, vector0.capacity());
      assertEquals("[number]", vector0.toString());
      assertEquals(false, vector0.isEmpty());
      assertEquals(1, vector0.size());
      assertNotNull(unionType0);
      
      HashSet<JSType> hashSet0 = new HashSet<JSType>();
      assertEquals(true, hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      assertEquals("[]", hashSet0.toString());
      assertNotNull(hashSet0);
      
      UnionType unionType1 = new UnionType(jSTypeRegistry0, hashSet0);
      assertNotSame(unionType1, unionType0);
      assertEquals(false, unionType1.isTemplateType());
      assertEquals(false, unionType1.isNominalConstructor());
      assertEquals(false, unionType1.isNominalType());
      assertEquals(false, unionType1.isResolved());
      assertEquals(false, unionType1.isCheckedUnknownType());
      assertEquals(false, unionType1.isInterface());
      assertEquals(false, unionType1.isNullType());
      assertEquals(false, unionType1.isEnumType());
      assertEquals(false, unionType1.isNoType());
      assertEquals(false, unionType1.isRecordType());
      assertEquals(false, unionType1.isBooleanValueType());
      assertEquals(false, unionType1.isAllType());
      assertEquals(false, unionType1.isStringValueType());
      assertEquals(false, unionType1.isNoObjectType());
      assertEquals(false, unionType1.isFunctionType());
      assertEquals(false, unionType1.isNumberValueType());
      assertEquals(false, unionType1.isFunctionPrototypeType());
      assertEquals(true, unionType1.isUnionType());
      assertEquals(false, unionType1.isOrdinaryFunction());
      assertEquals(false, unionType1.isConstructor());
      assertEquals(false, unionType1.isEnumElementType());
      assertEquals(false, unionType1.isNoResolvedType());
      assertEquals(false, unionType1.isVoidType());
      assertEquals(true, hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      assertEquals("[]", hashSet0.toString());
      assertFalse(unionType1.equals((Object)unionType0));
      assertNotNull(unionType1);
      
      boolean boolean0 = hashSet0.add((JSType) unionType0);
      assertTrue(boolean0);
      assertNotSame(unionType0, unionType1);
      assertEquals(1, hashSet0.size());
      assertEquals(false, hashSet0.isEmpty());
      assertEquals("[(number)]", hashSet0.toString());
      assertEquals(false, unionType0.isFunctionPrototypeType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isCheckedUnknownType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isInterface());
      assertEquals(false, unionType0.isNominalConstructor());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isConstructor());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isEnumElementType());
      assertEquals(false, unionType0.isEnumType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isNoResolvedType());
      assertEquals(false, unionType0.isOrdinaryFunction());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isNominalType());
      assertEquals(10, vector0.capacity());
      assertEquals("[number]", vector0.toString());
      assertEquals(false, vector0.isEmpty());
      assertEquals(1, vector0.size());
      assertFalse(unionType0.equals((Object)unionType1));
      
      StringType stringType0 = new StringType(jSTypeRegistry0);
      assertEquals(false, stringType0.isVoidType());
      assertEquals(true, stringType0.matchesStringContext());
      assertEquals(false, stringType0.isRecordType());
      assertEquals(false, stringType0.isAllType());
      assertEquals(false, stringType0.isFunctionType());
      assertEquals(false, stringType0.isCheckedUnknownType());
      assertEquals(false, stringType0.isConstructor());
      assertEquals(false, stringType0.isFunctionPrototypeType());
      assertEquals(false, stringType0.isBooleanValueType());
      assertEquals(false, stringType0.isEnumElementType());
      assertEquals(false, stringType0.isEnumType());
      assertEquals(false, stringType0.isOrdinaryFunction());
      assertEquals(BooleanLiteralSet.BOTH, stringType0.getPossibleToBooleanOutcomes());
      assertEquals(true, stringType0.isStringValueType());
      assertEquals(true, stringType0.matchesNumberContext());
      assertEquals(false, stringType0.isTemplateType());
      assertEquals(false, stringType0.isNoType());
      assertEquals(false, stringType0.isNumberValueType());
      assertEquals(false, stringType0.isInterface());
      assertEquals(true, stringType0.matchesObjectContext());
      assertEquals(false, stringType0.isResolved());
      assertEquals(false, stringType0.isNoResolvedType());
      assertEquals(false, stringType0.isNullType());
      assertEquals(false, stringType0.isUnionType());
      assertEquals("string", stringType0.getDisplayName());
      assertEquals(false, stringType0.isNominalConstructor());
      assertEquals(false, stringType0.isNoObjectType());
      assertEquals(false, stringType0.isNominalType());
      assertNotNull(stringType0);
      
      NumberType numberType1 = (NumberType)unionType1.getRestrictedUnion((JSType) stringType0);
      assertNotSame(unionType1, unionType0);
      assertSame(numberType1, numberType0);
      assertEquals(false, stringType0.isVoidType());
      assertEquals(true, stringType0.matchesStringContext());
      assertEquals(false, stringType0.isRecordType());
      assertEquals(false, stringType0.isAllType());
      assertEquals(false, stringType0.isFunctionType());
      assertEquals(false, stringType0.isCheckedUnknownType());
      assertEquals(false, stringType0.isConstructor());
      assertEquals(false, stringType0.isFunctionPrototypeType());
      assertEquals(false, stringType0.isBooleanValueType());
      assertEquals(false, stringType0.isEnumElementType());
      assertEquals(false, stringType0.isEnumType());
      assertEquals(false, stringType0.isOrdinaryFunction());
      assertEquals(BooleanLiteralSet.BOTH, stringType0.getPossibleToBooleanOutcomes());
      assertEquals(true, stringType0.isStringValueType());
      assertEquals(true, stringType0.matchesNumberContext());
      assertEquals(false, stringType0.isTemplateType());
      assertEquals(false, stringType0.isNoType());
      assertEquals(false, stringType0.isNumberValueType());
      assertEquals(false, stringType0.isInterface());
      assertEquals(true, stringType0.matchesObjectContext());
      assertEquals(false, stringType0.isResolved());
      assertEquals(false, stringType0.isNoResolvedType());
      assertEquals(false, stringType0.isNullType());
      assertEquals(false, stringType0.isUnionType());
      assertEquals("string", stringType0.getDisplayName());
      assertEquals(false, stringType0.isNominalConstructor());
      assertEquals(false, stringType0.isNoObjectType());
      assertEquals(false, stringType0.isNominalType());
      assertEquals(false, unionType1.isTemplateType());
      assertEquals(false, unionType1.isNominalConstructor());
      assertEquals(false, unionType1.isNominalType());
      assertEquals(false, unionType1.isResolved());
      assertEquals(false, unionType1.isCheckedUnknownType());
      assertEquals(false, unionType1.isInterface());
      assertEquals(false, unionType1.isNullType());
      assertEquals(false, unionType1.isEnumType());
      assertEquals(false, unionType1.isNoType());
      assertEquals(false, unionType1.isRecordType());
      assertEquals(false, unionType1.isBooleanValueType());
      assertEquals(false, unionType1.isAllType());
      assertEquals(false, unionType1.isStringValueType());
      assertEquals(false, unionType1.isNoObjectType());
      assertEquals(false, unionType1.isFunctionType());
      assertEquals(false, unionType1.isNumberValueType());
      assertEquals(false, unionType1.isFunctionPrototypeType());
      assertEquals(true, unionType1.isUnionType());
      assertEquals(false, unionType1.isOrdinaryFunction());
      assertEquals(false, unionType1.isConstructor());
      assertEquals(false, unionType1.isEnumElementType());
      assertEquals(false, unionType1.isNoResolvedType());
      assertEquals(false, unionType1.isVoidType());
      assertEquals(false, numberType1.isRecordType());
      assertEquals(false, numberType1.isResolved());
      assertEquals(false, numberType1.isFunctionPrototypeType());
      assertEquals(false, numberType1.isBooleanValueType());
      assertEquals(false, numberType1.isNoObjectType());
      assertEquals(false, numberType1.isConstructor());
      assertEquals(BooleanLiteralSet.BOTH, numberType1.getPossibleToBooleanOutcomes());
      assertEquals(false, numberType1.isNoType());
      assertEquals(false, numberType1.isNullType());
      assertEquals(false, numberType1.isInterface());
      assertEquals(true, numberType1.matchesNumberContext());
      assertEquals(true, numberType1.matchesStringContext());
      assertEquals(false, numberType1.isNominalConstructor());
      assertEquals(false, numberType1.isNullable());
      assertEquals(false, numberType1.isUnionType());
      assertEquals(false, numberType1.isOrdinaryFunction());
      assertEquals("number", numberType1.getDisplayName());
      assertEquals(false, numberType1.isAllType());
      assertEquals(false, numberType1.isEnumElementType());
      assertEquals(false, numberType1.isFunctionType());
      assertEquals(false, numberType1.isNominalType());
      assertEquals(false, numberType1.isTemplateType());
      assertEquals(false, numberType1.isStringValueType());
      assertEquals(false, numberType1.isEnumType());
      assertEquals(false, numberType1.isVoidType());
      assertEquals(true, numberType1.matchesObjectContext());
      assertEquals(false, numberType1.isNoResolvedType());
      assertEquals(false, numberType1.isCheckedUnknownType());
      assertEquals(true, numberType1.isNumberValueType());
      assertEquals(1, hashSet0.size());
      assertEquals(false, hashSet0.isEmpty());
      assertEquals("[(number)]", hashSet0.toString());
      assertFalse(unionType1.equals((Object)unionType0));
      assertNotNull(numberType1);
  }

  @Test
  public void test15()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = null;
      Vector<JSType> vector0 = new Vector<JSType>();
      assertEquals(0, vector0.size());
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertEquals(true, vector0.isEmpty());
      assertNotNull(vector0);
      
      NumberType numberType0 = new NumberType(jSTypeRegistry0);
      assertEquals(true, numberType0.isNumberValueType());
      assertEquals(false, numberType0.isStringValueType());
      assertEquals("number", numberType0.getDisplayName());
      assertEquals(false, numberType0.isNoObjectType());
      assertEquals(false, numberType0.isFunctionPrototypeType());
      assertEquals(false, numberType0.isOrdinaryFunction());
      assertEquals(false, numberType0.isCheckedUnknownType());
      assertEquals(false, numberType0.isInterface());
      assertEquals(false, numberType0.isEnumType());
      assertEquals(false, numberType0.isTemplateType());
      assertEquals(false, numberType0.isNoType());
      assertEquals(false, numberType0.isConstructor());
      assertEquals(BooleanLiteralSet.BOTH, numberType0.getPossibleToBooleanOutcomes());
      assertEquals(false, numberType0.isNullType());
      assertEquals(false, numberType0.isNullable());
      assertEquals(true, numberType0.matchesStringContext());
      assertEquals(false, numberType0.isNoResolvedType());
      assertEquals(false, numberType0.isResolved());
      assertEquals(false, numberType0.isAllType());
      assertEquals(false, numberType0.isRecordType());
      assertEquals(false, numberType0.isNominalType());
      assertEquals(true, numberType0.matchesObjectContext());
      assertEquals(true, numberType0.matchesNumberContext());
      assertEquals(false, numberType0.isVoidType());
      assertEquals(false, numberType0.isNominalConstructor());
      assertEquals(false, numberType0.isEnumElementType());
      assertEquals(false, numberType0.isFunctionType());
      assertEquals(false, numberType0.isUnionType());
      assertEquals(false, numberType0.isBooleanValueType());
      assertNotNull(numberType0);
      
      vector0.addElement((JSType) numberType0);
      assertEquals(true, numberType0.isNumberValueType());
      assertEquals(false, numberType0.isStringValueType());
      assertEquals("number", numberType0.getDisplayName());
      assertEquals(false, numberType0.isNoObjectType());
      assertEquals(false, numberType0.isFunctionPrototypeType());
      assertEquals(false, numberType0.isOrdinaryFunction());
      assertEquals(false, numberType0.isCheckedUnknownType());
      assertEquals(false, numberType0.isInterface());
      assertEquals(false, numberType0.isEnumType());
      assertEquals(false, numberType0.isTemplateType());
      assertEquals(false, numberType0.isNoType());
      assertEquals(false, numberType0.isConstructor());
      assertEquals(BooleanLiteralSet.BOTH, numberType0.getPossibleToBooleanOutcomes());
      assertEquals(false, numberType0.isNullType());
      assertEquals(false, numberType0.isNullable());
      assertEquals(true, numberType0.matchesStringContext());
      assertEquals(false, numberType0.isNoResolvedType());
      assertEquals(false, numberType0.isResolved());
      assertEquals(false, numberType0.isAllType());
      assertEquals(false, numberType0.isRecordType());
      assertEquals(false, numberType0.isNominalType());
      assertEquals(true, numberType0.matchesObjectContext());
      assertEquals(true, numberType0.matchesNumberContext());
      assertEquals(false, numberType0.isVoidType());
      assertEquals(false, numberType0.isNominalConstructor());
      assertEquals(false, numberType0.isEnumElementType());
      assertEquals(false, numberType0.isFunctionType());
      assertEquals(false, numberType0.isUnionType());
      assertEquals(false, numberType0.isBooleanValueType());
      assertEquals(1, vector0.size());
      assertEquals(10, vector0.capacity());
      assertEquals("[number]", vector0.toString());
      assertEquals(false, vector0.isEmpty());
      
      NullType nullType0 = new NullType(jSTypeRegistry0);
      assertEquals(false, nullType0.isUnionType());
      assertEquals(false, nullType0.isNoType());
      assertEquals(false, nullType0.isNominalType());
      assertEquals(false, nullType0.isOrdinaryFunction());
      assertEquals(false, nullType0.isFunctionType());
      assertEquals(BooleanLiteralSet.FALSE, nullType0.getPossibleToBooleanOutcomes());
      assertEquals(false, nullType0.isNoResolvedType());
      assertEquals(false, nullType0.isConstructor());
      assertEquals(false, nullType0.isResolved());
      assertEquals(false, nullType0.isCheckedUnknownType());
      assertEquals(true, nullType0.matchesStringContext());
      assertEquals(false, nullType0.isNominalConstructor());
      assertEquals(false, nullType0.isStringValueType());
      assertEquals(false, nullType0.matchesObjectContext());
      assertEquals(false, nullType0.isNumberValueType());
      assertEquals(false, nullType0.isRecordType());
      assertEquals(false, nullType0.isEnumType());
      assertEquals(true, nullType0.isNullType());
      assertEquals("null", nullType0.getDisplayName());
      assertEquals(false, nullType0.isTemplateType());
      assertEquals(false, nullType0.isInterface());
      assertEquals(true, nullType0.matchesNumberContext());
      assertEquals(true, nullType0.isNullable());
      assertEquals(false, nullType0.isAllType());
      assertEquals(false, nullType0.isFunctionPrototypeType());
      assertEquals(false, nullType0.isNoObjectType());
      assertEquals(false, nullType0.isVoidType());
      assertEquals(false, nullType0.isEnumElementType());
      assertEquals(false, nullType0.isBooleanValueType());
      assertNotNull(nullType0);
      
      boolean boolean0 = vector0.add((JSType) nullType0);
      assertTrue(boolean0);
      assertEquals(false, nullType0.isUnionType());
      assertEquals(false, nullType0.isNoType());
      assertEquals(false, nullType0.isNominalType());
      assertEquals(false, nullType0.isOrdinaryFunction());
      assertEquals(false, nullType0.isFunctionType());
      assertEquals(BooleanLiteralSet.FALSE, nullType0.getPossibleToBooleanOutcomes());
      assertEquals(false, nullType0.isNoResolvedType());
      assertEquals(false, nullType0.isConstructor());
      assertEquals(false, nullType0.isResolved());
      assertEquals(false, nullType0.isCheckedUnknownType());
      assertEquals(true, nullType0.matchesStringContext());
      assertEquals(false, nullType0.isNominalConstructor());
      assertEquals(false, nullType0.isStringValueType());
      assertEquals(false, nullType0.matchesObjectContext());
      assertEquals(false, nullType0.isNumberValueType());
      assertEquals(false, nullType0.isRecordType());
      assertEquals(false, nullType0.isEnumType());
      assertEquals(true, nullType0.isNullType());
      assertEquals("null", nullType0.getDisplayName());
      assertEquals(false, nullType0.isTemplateType());
      assertEquals(false, nullType0.isInterface());
      assertEquals(true, nullType0.matchesNumberContext());
      assertEquals(true, nullType0.isNullable());
      assertEquals(false, nullType0.isAllType());
      assertEquals(false, nullType0.isFunctionPrototypeType());
      assertEquals(false, nullType0.isNoObjectType());
      assertEquals(false, nullType0.isVoidType());
      assertEquals(false, nullType0.isEnumElementType());
      assertEquals(false, nullType0.isBooleanValueType());
      assertEquals(10, vector0.capacity());
      assertEquals(2, vector0.size());
      assertEquals("[number, null]", vector0.toString());
      assertEquals(false, vector0.isEmpty());
      
      UnionType unionType0 = new UnionType(jSTypeRegistry0, vector0);
      assertEquals(false, unionType0.isNoResolvedType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isConstructor());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isEnumType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isNominalConstructor());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isFunctionPrototypeType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isCheckedUnknownType());
      assertEquals(false, unionType0.isNominalType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isInterface());
      assertEquals(false, unionType0.isOrdinaryFunction());
      assertEquals(false, unionType0.isEnumElementType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(10, vector0.capacity());
      assertEquals(2, vector0.size());
      assertEquals("[number, null]", vector0.toString());
      assertEquals(false, vector0.isEmpty());
      assertNotNull(unionType0);
      
      String string0 = unionType0.toStringHelper(boolean0);
      assertEquals("(null|number)", string0);
      assertEquals(false, unionType0.isNoResolvedType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isConstructor());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isEnumType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isNominalConstructor());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isFunctionPrototypeType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isCheckedUnknownType());
      assertEquals(false, unionType0.isNominalType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isInterface());
      assertEquals(false, unionType0.isOrdinaryFunction());
      assertEquals(false, unionType0.isEnumElementType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, nullType0.isUnionType());
      assertEquals(false, nullType0.isNoType());
      assertEquals(false, nullType0.isNominalType());
      assertEquals(false, nullType0.isOrdinaryFunction());
      assertEquals(false, nullType0.isFunctionType());
      assertEquals(BooleanLiteralSet.FALSE, nullType0.getPossibleToBooleanOutcomes());
      assertEquals(false, nullType0.isNoResolvedType());
      assertEquals(false, nullType0.isConstructor());
      assertEquals(false, nullType0.isResolved());
      assertEquals(false, nullType0.isCheckedUnknownType());
      assertEquals(true, nullType0.matchesStringContext());
      assertEquals(false, nullType0.isNominalConstructor());
      assertEquals(false, nullType0.isStringValueType());
      assertEquals(false, nullType0.matchesObjectContext());
      assertEquals(false, nullType0.isNumberValueType());
      assertEquals(false, nullType0.isRecordType());
      assertEquals(false, nullType0.isEnumType());
      assertEquals(true, nullType0.isNullType());
      assertEquals("null", nullType0.getDisplayName());
      assertEquals(false, nullType0.isTemplateType());
      assertEquals(false, nullType0.isInterface());
      assertEquals(true, nullType0.matchesNumberContext());
      assertEquals(true, nullType0.isNullable());
      assertEquals(false, nullType0.isAllType());
      assertEquals(false, nullType0.isFunctionPrototypeType());
      assertEquals(false, nullType0.isNoObjectType());
      assertEquals(false, nullType0.isVoidType());
      assertEquals(false, nullType0.isEnumElementType());
      assertEquals(false, nullType0.isBooleanValueType());
      assertEquals(10, vector0.capacity());
      assertEquals(2, vector0.size());
      assertEquals("[number, null]", vector0.toString());
      assertEquals(false, vector0.isEmpty());
      assertNotNull(string0);
  }

  @Test
  public void test16()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = null;
      Vector<JSType> vector0 = new Vector<JSType>();
      assertEquals(10, vector0.capacity());
      assertEquals(true, vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(0, vector0.size());
      assertNotNull(vector0);
      
      UnionType unionType0 = new UnionType(jSTypeRegistry0, vector0);
      assertEquals(10, vector0.capacity());
      assertEquals(true, vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(0, vector0.size());
      assertEquals(false, unionType0.isNoType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isOrdinaryFunction());
      assertEquals(false, unionType0.isNominalType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isInterface());
      assertEquals(false, unionType0.isFunctionPrototypeType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isNoResolvedType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isConstructor());
      assertEquals(false, unionType0.isEnumType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isEnumElementType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isCheckedUnknownType());
      assertEquals(false, unionType0.isNominalConstructor());
      assertNotNull(unionType0);
      
      HashSet<JSType> hashSet0 = new HashSet<JSType>();
      assertEquals(true, hashSet0.isEmpty());
      assertEquals("[]", hashSet0.toString());
      assertEquals(0, hashSet0.size());
      assertNotNull(hashSet0);
      
      boolean boolean0 = hashSet0.add((JSType) unionType0);
      assertTrue(boolean0);
      assertEquals(10, vector0.capacity());
      assertEquals(true, vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(0, vector0.size());
      assertEquals(false, hashSet0.isEmpty());
      assertEquals("[()]", hashSet0.toString());
      assertEquals(1, hashSet0.size());
      assertEquals(false, unionType0.isNoType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isOrdinaryFunction());
      assertEquals(false, unionType0.isNominalType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isInterface());
      assertEquals(false, unionType0.isFunctionPrototypeType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isNoResolvedType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isConstructor());
      assertEquals(false, unionType0.isEnumType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isEnumElementType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isCheckedUnknownType());
      assertEquals(false, unionType0.isNominalConstructor());
      
      UnionType unionType1 = new UnionType(jSTypeRegistry0, hashSet0);
      assertNotSame(unionType1, unionType0);
      assertEquals(false, hashSet0.isEmpty());
      assertEquals("[()]", hashSet0.toString());
      assertEquals(1, hashSet0.size());
      assertEquals(false, unionType1.isNoObjectType());
      assertEquals(false, unionType1.isNullType());
      assertEquals(false, unionType1.isFunctionPrototypeType());
      assertEquals(false, unionType1.isBooleanValueType());
      assertEquals(false, unionType1.isResolved());
      assertEquals(false, unionType1.isNumberValueType());
      assertEquals(false, unionType1.isNominalType());
      assertEquals(false, unionType1.isStringValueType());
      assertEquals(false, unionType1.isFunctionType());
      assertEquals(false, unionType1.isNominalConstructor());
      assertEquals(false, unionType1.isOrdinaryFunction());
      assertEquals(false, unionType1.isRecordType());
      assertEquals(false, unionType1.isEnumType());
      assertEquals(false, unionType1.isInterface());
      assertEquals(false, unionType1.isTemplateType());
      assertEquals(false, unionType1.isConstructor());
      assertEquals(false, unionType1.isNoType());
      assertEquals(false, unionType1.isNoResolvedType());
      assertEquals(false, unionType1.isVoidType());
      assertEquals(true, unionType1.isUnionType());
      assertEquals(false, unionType1.isCheckedUnknownType());
      assertEquals(false, unionType1.isEnumElementType());
      assertEquals(false, unionType1.isAllType());
      assertFalse(unionType1.equals((Object)unionType0));
      assertNotNull(unionType1);
      
      // Undeclared exception!
      try {
        JSType jSType0 = unionType1.getRestrictedUnion((JSType) unionType1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test17()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = null;
      Vector<JSType> vector0 = new Vector<JSType>();
      assertEquals(true, vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertNotNull(vector0);
      
      UnionType unionType0 = new UnionType(jSTypeRegistry0, vector0);
      assertEquals(true, vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertEquals(false, unionType0.isEnumType());
      assertEquals(false, unionType0.isNominalConstructor());
      assertEquals(false, unionType0.isFunctionPrototypeType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isNominalType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isInterface());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isEnumElementType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isOrdinaryFunction());
      assertEquals(false, unionType0.isCheckedUnknownType());
      assertEquals(false, unionType0.isNoResolvedType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isConstructor());
      assertNotNull(unionType0);
      
      HashSet<JSType> hashSet0 = new HashSet<JSType>();
      assertEquals("[]", hashSet0.toString());
      assertEquals(0, hashSet0.size());
      assertEquals(true, hashSet0.isEmpty());
      assertNotNull(hashSet0);
      
      boolean boolean0 = hashSet0.add((JSType) unionType0);
      assertTrue(boolean0);
      assertEquals(true, vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertEquals(false, unionType0.isEnumType());
      assertEquals(false, unionType0.isNominalConstructor());
      assertEquals(false, unionType0.isFunctionPrototypeType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isNominalType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isInterface());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isEnumElementType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isOrdinaryFunction());
      assertEquals(false, unionType0.isCheckedUnknownType());
      assertEquals(false, unionType0.isNoResolvedType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isConstructor());
      assertEquals("[()]", hashSet0.toString());
      assertEquals(1, hashSet0.size());
      assertEquals(false, hashSet0.isEmpty());
      
      UnionType unionType1 = new UnionType(jSTypeRegistry0, hashSet0);
      assertNotSame(unionType1, unionType0);
      assertEquals(false, unionType1.isRecordType());
      assertEquals(false, unionType1.isConstructor());
      assertEquals(false, unionType1.isInterface());
      assertEquals(false, unionType1.isVoidType());
      assertEquals(true, unionType1.isUnionType());
      assertEquals(false, unionType1.isNoObjectType());
      assertEquals(false, unionType1.isFunctionType());
      assertEquals(false, unionType1.isCheckedUnknownType());
      assertEquals(false, unionType1.isFunctionPrototypeType());
      assertEquals(false, unionType1.isNoType());
      assertEquals(false, unionType1.isAllType());
      assertEquals(false, unionType1.isOrdinaryFunction());
      assertEquals(false, unionType1.isTemplateType());
      assertEquals(false, unionType1.isBooleanValueType());
      assertEquals(false, unionType1.isEnumElementType());
      assertEquals(false, unionType1.isStringValueType());
      assertEquals(false, unionType1.isNoResolvedType());
      assertEquals(false, unionType1.isEnumType());
      assertEquals(false, unionType1.isNominalConstructor());
      assertEquals(false, unionType1.isNominalType());
      assertEquals(false, unionType1.isNullType());
      assertEquals(false, unionType1.isResolved());
      assertEquals(false, unionType1.isNumberValueType());
      assertEquals("[()]", hashSet0.toString());
      assertEquals(1, hashSet0.size());
      assertEquals(false, hashSet0.isEmpty());
      assertFalse(unionType1.equals((Object)unionType0));
      assertNotNull(unionType1);
      
      boolean boolean1 = unionType1.contains((JSType) unionType0);
      assertTrue(boolean1);
      assertNotSame(unionType1, unionType0);
      assertNotSame(unionType0, unionType1);
      assertEquals(true, vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertEquals(false, unionType1.isRecordType());
      assertEquals(false, unionType1.isConstructor());
      assertEquals(false, unionType1.isInterface());
      assertEquals(false, unionType1.isVoidType());
      assertEquals(true, unionType1.isUnionType());
      assertEquals(false, unionType1.isNoObjectType());
      assertEquals(false, unionType1.isFunctionType());
      assertEquals(false, unionType1.isCheckedUnknownType());
      assertEquals(false, unionType1.isFunctionPrototypeType());
      assertEquals(false, unionType1.isNoType());
      assertEquals(false, unionType1.isAllType());
      assertEquals(false, unionType1.isOrdinaryFunction());
      assertEquals(false, unionType1.isTemplateType());
      assertEquals(false, unionType1.isBooleanValueType());
      assertEquals(false, unionType1.isEnumElementType());
      assertEquals(false, unionType1.isStringValueType());
      assertEquals(false, unionType1.isNoResolvedType());
      assertEquals(false, unionType1.isEnumType());
      assertEquals(false, unionType1.isNominalConstructor());
      assertEquals(false, unionType1.isNominalType());
      assertEquals(false, unionType1.isNullType());
      assertEquals(false, unionType1.isResolved());
      assertEquals(false, unionType1.isNumberValueType());
      assertEquals(false, unionType0.isEnumType());
      assertEquals(false, unionType0.isNominalConstructor());
      assertEquals(false, unionType0.isFunctionPrototypeType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isNominalType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isInterface());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isEnumElementType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isOrdinaryFunction());
      assertEquals(false, unionType0.isCheckedUnknownType());
      assertEquals(false, unionType0.isNoResolvedType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isConstructor());
      assertEquals("[()]", hashSet0.toString());
      assertEquals(1, hashSet0.size());
      assertEquals(false, hashSet0.isEmpty());
      assertTrue(boolean1 == boolean0);
      assertFalse(unionType1.equals((Object)unionType0));
      assertFalse(unionType0.equals((Object)unionType1));
  }

  @Test
  public void test18()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = null;
      Vector<JSType> vector0 = new Vector<JSType>();
      assertEquals("[]", vector0.toString());
      assertEquals(0, vector0.size());
      assertEquals(true, vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertNotNull(vector0);
      
      UnionType unionType0 = new UnionType(jSTypeRegistry0, vector0);
      assertEquals("[]", vector0.toString());
      assertEquals(0, vector0.size());
      assertEquals(true, vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertEquals(false, unionType0.isNullType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isOrdinaryFunction());
      assertEquals(false, unionType0.isInterface());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isNominalConstructor());
      assertEquals(false, unionType0.isNoResolvedType());
      assertEquals(false, unionType0.isCheckedUnknownType());
      assertEquals(false, unionType0.isEnumType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isConstructor());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isNominalType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isFunctionPrototypeType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isEnumElementType());
      assertNotNull(unionType0);
      
      HashSet<JSType> hashSet0 = new HashSet<JSType>();
      assertEquals(true, hashSet0.isEmpty());
      assertEquals("[]", hashSet0.toString());
      assertEquals(0, hashSet0.size());
      assertNotNull(hashSet0);
      
      UnionType unionType1 = new UnionType(jSTypeRegistry0, hashSet0);
      assertNotSame(unionType1, unionType0);
      assertEquals(false, unionType1.isNominalType());
      assertEquals(false, unionType1.isVoidType());
      assertEquals(false, unionType1.isCheckedUnknownType());
      assertEquals(false, unionType1.isTemplateType());
      assertEquals(false, unionType1.isNoObjectType());
      assertEquals(false, unionType1.isOrdinaryFunction());
      assertEquals(false, unionType1.isEnumElementType());
      assertEquals(false, unionType1.isRecordType());
      assertEquals(false, unionType1.isNoType());
      assertEquals(false, unionType1.isResolved());
      assertEquals(false, unionType1.isStringValueType());
      assertEquals(true, unionType1.isUnionType());
      assertEquals(false, unionType1.isFunctionPrototypeType());
      assertEquals(false, unionType1.isNominalConstructor());
      assertEquals(false, unionType1.isEnumType());
      assertEquals(false, unionType1.isAllType());
      assertEquals(false, unionType1.isFunctionType());
      assertEquals(false, unionType1.isNumberValueType());
      assertEquals(false, unionType1.isNoResolvedType());
      assertEquals(false, unionType1.isNullType());
      assertEquals(false, unionType1.isInterface());
      assertEquals(false, unionType1.isBooleanValueType());
      assertEquals(false, unionType1.isConstructor());
      assertEquals(true, hashSet0.isEmpty());
      assertEquals("[]", hashSet0.toString());
      assertEquals(0, hashSet0.size());
      assertTrue(unionType1.equals((Object)unionType0));
      assertNotNull(unionType1);
      
      boolean boolean0 = hashSet0.add((JSType) unionType0);
      assertTrue(boolean0);
      assertNotSame(unionType0, unionType1);
      assertEquals("[]", vector0.toString());
      assertEquals(0, vector0.size());
      assertEquals(true, vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertEquals(false, unionType0.isNullType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isOrdinaryFunction());
      assertEquals(false, unionType0.isInterface());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isNominalConstructor());
      assertEquals(false, unionType0.isNoResolvedType());
      assertEquals(false, unionType0.isCheckedUnknownType());
      assertEquals(false, unionType0.isEnumType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isConstructor());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isNominalType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isFunctionPrototypeType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isEnumElementType());
      assertEquals("[()]", hashSet0.toString());
      assertEquals(false, hashSet0.isEmpty());
      assertEquals(1, hashSet0.size());
      assertFalse(unionType0.equals((Object)unionType1));
      
      boolean boolean1 = unionType1.isObject();
      assertTrue(boolean1);
      assertNotSame(unionType1, unionType0);
      assertEquals(false, unionType1.isNominalType());
      assertEquals(false, unionType1.isVoidType());
      assertEquals(false, unionType1.isCheckedUnknownType());
      assertEquals(false, unionType1.isTemplateType());
      assertEquals(false, unionType1.isNoObjectType());
      assertEquals(false, unionType1.isOrdinaryFunction());
      assertEquals(false, unionType1.isEnumElementType());
      assertEquals(false, unionType1.isRecordType());
      assertEquals(false, unionType1.isNoType());
      assertEquals(false, unionType1.isResolved());
      assertEquals(false, unionType1.isStringValueType());
      assertEquals(true, unionType1.isUnionType());
      assertEquals(false, unionType1.isFunctionPrototypeType());
      assertEquals(false, unionType1.isNominalConstructor());
      assertEquals(false, unionType1.isEnumType());
      assertEquals(false, unionType1.isAllType());
      assertEquals(false, unionType1.isFunctionType());
      assertEquals(false, unionType1.isNumberValueType());
      assertEquals(false, unionType1.isNoResolvedType());
      assertEquals(false, unionType1.isNullType());
      assertEquals(false, unionType1.isInterface());
      assertEquals(false, unionType1.isBooleanValueType());
      assertEquals(false, unionType1.isConstructor());
      assertEquals("[()]", hashSet0.toString());
      assertEquals(false, hashSet0.isEmpty());
      assertEquals(1, hashSet0.size());
      assertFalse(unionType1.equals((Object)unionType0));
      assertTrue(boolean1 == boolean0);
  }

  @Test
  public void test19()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = null;
      Vector<JSType> vector0 = new Vector<JSType>();
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertEquals(true, vector0.isEmpty());
      assertEquals(0, vector0.size());
      assertNotNull(vector0);
      
      NullType nullType0 = new NullType(jSTypeRegistry0);
      assertEquals(false, nullType0.isFunctionType());
      assertEquals(false, nullType0.isFunctionPrototypeType());
      assertEquals(true, nullType0.isNullable());
      assertEquals(BooleanLiteralSet.FALSE, nullType0.getPossibleToBooleanOutcomes());
      assertEquals(false, nullType0.isTemplateType());
      assertEquals(true, nullType0.isNullType());
      assertEquals(false, nullType0.isNominalType());
      assertEquals(false, nullType0.isCheckedUnknownType());
      assertEquals(false, nullType0.isNoResolvedType());
      assertEquals(false, nullType0.isNominalConstructor());
      assertEquals(true, nullType0.matchesStringContext());
      assertEquals(false, nullType0.isResolved());
      assertEquals(false, nullType0.isNumberValueType());
      assertEquals(false, nullType0.isVoidType());
      assertEquals(false, nullType0.isNoType());
      assertEquals(false, nullType0.isBooleanValueType());
      assertEquals("null", nullType0.getDisplayName());
      assertEquals(false, nullType0.isStringValueType());
      assertEquals(false, nullType0.isConstructor());
      assertEquals(false, nullType0.isUnionType());
      assertEquals(false, nullType0.isInterface());
      assertEquals(false, nullType0.isOrdinaryFunction());
      assertEquals(false, nullType0.isAllType());
      assertEquals(false, nullType0.isRecordType());
      assertEquals(false, nullType0.isNoObjectType());
      assertEquals(true, nullType0.matchesNumberContext());
      assertEquals(false, nullType0.isEnumType());
      assertEquals(false, nullType0.matchesObjectContext());
      assertEquals(false, nullType0.isEnumElementType());
      assertNotNull(nullType0);
      
      boolean boolean0 = vector0.add((JSType) nullType0);
      assertTrue(boolean0);
      assertEquals(false, nullType0.isFunctionType());
      assertEquals(false, nullType0.isFunctionPrototypeType());
      assertEquals(true, nullType0.isNullable());
      assertEquals(BooleanLiteralSet.FALSE, nullType0.getPossibleToBooleanOutcomes());
      assertEquals(false, nullType0.isTemplateType());
      assertEquals(true, nullType0.isNullType());
      assertEquals(false, nullType0.isNominalType());
      assertEquals(false, nullType0.isCheckedUnknownType());
      assertEquals(false, nullType0.isNoResolvedType());
      assertEquals(false, nullType0.isNominalConstructor());
      assertEquals(true, nullType0.matchesStringContext());
      assertEquals(false, nullType0.isResolved());
      assertEquals(false, nullType0.isNumberValueType());
      assertEquals(false, nullType0.isVoidType());
      assertEquals(false, nullType0.isNoType());
      assertEquals(false, nullType0.isBooleanValueType());
      assertEquals("null", nullType0.getDisplayName());
      assertEquals(false, nullType0.isStringValueType());
      assertEquals(false, nullType0.isConstructor());
      assertEquals(false, nullType0.isUnionType());
      assertEquals(false, nullType0.isInterface());
      assertEquals(false, nullType0.isOrdinaryFunction());
      assertEquals(false, nullType0.isAllType());
      assertEquals(false, nullType0.isRecordType());
      assertEquals(false, nullType0.isNoObjectType());
      assertEquals(true, nullType0.matchesNumberContext());
      assertEquals(false, nullType0.isEnumType());
      assertEquals(false, nullType0.matchesObjectContext());
      assertEquals(false, nullType0.isEnumElementType());
      assertEquals(1, vector0.size());
      assertEquals(false, vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertEquals("[null]", vector0.toString());
      
      UnionType unionType0 = new UnionType(jSTypeRegistry0, vector0);
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isCheckedUnknownType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isConstructor());
      assertEquals(false, unionType0.isNominalType());
      assertEquals(false, unionType0.isOrdinaryFunction());
      assertEquals(false, unionType0.isEnumElementType());
      assertEquals(false, unionType0.isNoResolvedType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isNominalConstructor());
      assertEquals(false, unionType0.isFunctionPrototypeType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isEnumType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isInterface());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(1, vector0.size());
      assertEquals(false, vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertEquals("[null]", vector0.toString());
      assertNotNull(unionType0);
      
      boolean boolean1 = unionType0.isObject();
      assertFalse(boolean1);
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isCheckedUnknownType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isConstructor());
      assertEquals(false, unionType0.isNominalType());
      assertEquals(false, unionType0.isOrdinaryFunction());
      assertEquals(false, unionType0.isEnumElementType());
      assertEquals(false, unionType0.isNoResolvedType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isNominalConstructor());
      assertEquals(false, unionType0.isFunctionPrototypeType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isEnumType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isInterface());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(1, vector0.size());
      assertEquals(false, vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertEquals("[null]", vector0.toString());
      assertFalse(boolean1 == boolean0);
  }

  @Test
  public void test20()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = null;
      Vector<JSType> vector0 = new Vector<JSType>();
      assertEquals(0, vector0.size());
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertEquals(true, vector0.isEmpty());
      assertNotNull(vector0);
      
      UnionType unionType0 = new UnionType(jSTypeRegistry0, vector0);
      assertEquals(0, vector0.size());
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertEquals(true, vector0.isEmpty());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isOrdinaryFunction());
      assertEquals(false, unionType0.isFunctionPrototypeType());
      assertEquals(false, unionType0.isEnumElementType());
      assertEquals(false, unionType0.isCheckedUnknownType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isNoResolvedType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isEnumType());
      assertEquals(false, unionType0.isConstructor());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isNominalConstructor());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isNominalType());
      assertEquals(false, unionType0.isInterface());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isFunctionType());
      assertNotNull(unionType0);
      
      ErrorReporter errorReporter0 = null;
      JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry(errorReporter0);
      assertEquals(false, jSTypeRegistry1.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry1);
      
      NoObjectType noObjectType0 = new NoObjectType(jSTypeRegistry1);
      assertEquals(false, noObjectType0.isInterface());
      assertEquals(false, noObjectType0.isNullType());
      assertEquals(false, noObjectType0.isTemplateType());
      assertNull(noObjectType0.getTemplateTypeName());
      assertEquals(false, noObjectType0.isReturnTypeInferred());
      assertEquals(false, noObjectType0.isFunctionPrototypeType());
      assertEquals(false, noObjectType0.isNominalType());
      assertEquals(true, noObjectType0.isNoObjectType());
      assertEquals(2147483647, noObjectType0.getPropertiesCount());
      assertEquals(false, noObjectType0.isNominalConstructor());
      assertEquals(true, noObjectType0.isConstructor());
      assertEquals(false, noObjectType0.isNoType());
      assertEquals(true, noObjectType0.hasInstanceType());
      assertEquals(false, noObjectType0.isNumberValueType());
      assertEquals(false, noObjectType0.isAllType());
      assertEquals(true, noObjectType0.matchesObjectContext());
      assertEquals(false, noObjectType0.isOrdinaryFunction());
      assertEquals(false, noObjectType0.isEnumType());
      assertEquals(false, noObjectType0.hasCachedValues());
      assertEquals(false, noObjectType0.isCheckedUnknownType());
      assertNull(noObjectType0.getReferenceName());
      assertEquals(0, noObjectType0.getExtendedInterfacesCount());
      assertEquals(false, noObjectType0.isFunctionType());
      assertEquals(2147483647, noObjectType0.getMaxArguments());
      assertEquals(false, noObjectType0.isVoidType());
      assertEquals(false, noObjectType0.isRecordType());
      assertEquals(true, noObjectType0.matchesStringContext());
      assertEquals(false, noObjectType0.isNoResolvedType());
      assertEquals(false, noObjectType0.isBooleanValueType());
      assertEquals(BooleanLiteralSet.TRUE, noObjectType0.getPossibleToBooleanOutcomes());
      assertEquals(true, noObjectType0.canBeCalled());
      assertEquals(true, noObjectType0.matchesNumberContext());
      assertEquals(false, noObjectType0.isStringValueType());
      assertEquals(false, noObjectType0.isResolved());
      assertEquals(false, noObjectType0.isUnionType());
      assertEquals(false, noObjectType0.isEnumElementType());
      assertEquals(false, jSTypeRegistry1.shouldTolerateUndefinedValues());
      assertNotNull(noObjectType0);
      
      boolean boolean0 = vector0.add((JSType) noObjectType0);
      assertTrue(boolean0);
      assertEquals(false, noObjectType0.isInterface());
      assertEquals(false, noObjectType0.isNullType());
      assertEquals(false, noObjectType0.isTemplateType());
      assertNull(noObjectType0.getTemplateTypeName());
      assertEquals(false, noObjectType0.isReturnTypeInferred());
      assertEquals(false, noObjectType0.isFunctionPrototypeType());
      assertEquals(false, noObjectType0.isNominalType());
      assertEquals(true, noObjectType0.isNoObjectType());
      assertEquals(2147483647, noObjectType0.getPropertiesCount());
      assertEquals(false, noObjectType0.isNominalConstructor());
      assertEquals(true, noObjectType0.isConstructor());
      assertEquals(false, noObjectType0.isNoType());
      assertEquals(true, noObjectType0.hasInstanceType());
      assertEquals(false, noObjectType0.isNumberValueType());
      assertEquals(false, noObjectType0.isAllType());
      assertEquals(true, noObjectType0.matchesObjectContext());
      assertEquals(false, noObjectType0.isOrdinaryFunction());
      assertEquals(false, noObjectType0.isEnumType());
      assertEquals(false, noObjectType0.hasCachedValues());
      assertEquals(false, noObjectType0.isCheckedUnknownType());
      assertNull(noObjectType0.getReferenceName());
      assertEquals(0, noObjectType0.getExtendedInterfacesCount());
      assertEquals(false, noObjectType0.isFunctionType());
      assertEquals(2147483647, noObjectType0.getMaxArguments());
      assertEquals(false, noObjectType0.isVoidType());
      assertEquals(false, noObjectType0.isRecordType());
      assertEquals(true, noObjectType0.matchesStringContext());
      assertEquals(false, noObjectType0.isNoResolvedType());
      assertEquals(false, noObjectType0.isBooleanValueType());
      assertEquals(BooleanLiteralSet.TRUE, noObjectType0.getPossibleToBooleanOutcomes());
      assertEquals(true, noObjectType0.canBeCalled());
      assertEquals(true, noObjectType0.matchesNumberContext());
      assertEquals(false, noObjectType0.isStringValueType());
      assertEquals(false, noObjectType0.isResolved());
      assertEquals(false, noObjectType0.isUnionType());
      assertEquals(false, noObjectType0.isEnumElementType());
      assertEquals("[NoObject]", vector0.toString());
      assertEquals(1, vector0.size());
      assertEquals(10, vector0.capacity());
      assertEquals(false, vector0.isEmpty());
      assertEquals(false, jSTypeRegistry1.shouldTolerateUndefinedValues());
      
      HashSet<JSType> hashSet0 = new HashSet<JSType>();
      assertEquals("[]", hashSet0.toString());
      assertEquals(0, hashSet0.size());
      assertEquals(true, hashSet0.isEmpty());
      assertNotNull(hashSet0);
      
      UnionType unionType1 = new UnionType(jSTypeRegistry0, hashSet0);
      assertNotSame(unionType1, unionType0);
      assertEquals(true, unionType1.isUnionType());
      assertEquals(false, unionType1.isRecordType());
      assertEquals(false, unionType1.isVoidType());
      assertEquals(false, unionType1.isNullType());
      assertEquals(false, unionType1.isEnumElementType());
      assertEquals(false, unionType1.isNoType());
      assertEquals(false, unionType1.isNumberValueType());
      assertEquals(false, unionType1.isNoObjectType());
      assertEquals(false, unionType1.isFunctionType());
      assertEquals(false, unionType1.isNoResolvedType());
      assertEquals(false, unionType1.isStringValueType());
      assertEquals(false, unionType1.isResolved());
      assertEquals(false, unionType1.isInterface());
      assertEquals(false, unionType1.isNominalConstructor());
      assertEquals(false, unionType1.isAllType());
      assertEquals(false, unionType1.isOrdinaryFunction());
      assertEquals(false, unionType1.isConstructor());
      assertEquals(false, unionType1.isNominalType());
      assertEquals(false, unionType1.isCheckedUnknownType());
      assertEquals(false, unionType1.isTemplateType());
      assertEquals(false, unionType1.isEnumType());
      assertEquals(false, unionType1.isFunctionPrototypeType());
      assertEquals(false, unionType1.isBooleanValueType());
      assertEquals("[]", hashSet0.toString());
      assertEquals(0, hashSet0.size());
      assertEquals(true, hashSet0.isEmpty());
      assertFalse(unionType1.equals((Object)unionType0));
      assertNotNull(unionType1);
      
      boolean boolean1 = hashSet0.add((JSType) unionType0);
      assertTrue(boolean1);
      assertNotSame(unionType0, unionType1);
      assertEquals("[NoObject]", vector0.toString());
      assertEquals(1, vector0.size());
      assertEquals(10, vector0.capacity());
      assertEquals(false, vector0.isEmpty());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isOrdinaryFunction());
      assertEquals(false, unionType0.isFunctionPrototypeType());
      assertEquals(false, unionType0.isEnumElementType());
      assertEquals(false, unionType0.isCheckedUnknownType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isNoResolvedType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isEnumType());
      assertEquals(false, unionType0.isConstructor());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isNominalConstructor());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isNominalType());
      assertEquals(false, unionType0.isInterface());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, hashSet0.isEmpty());
      assertEquals("[(NoObject)]", hashSet0.toString());
      assertEquals(1, hashSet0.size());
      assertTrue(boolean1 == boolean0);
      assertFalse(unionType0.equals((Object)unionType1));
      
      UnionType unionType2 = (UnionType)JSType.getGreatestSubtype(unionType1, unionType0);
      assertSame(unionType2, unionType1);
      assertNotSame(unionType2, unionType0);
      assertSame(unionType1, unionType2);
      assertNotSame(unionType1, unionType0);
      assertNotSame(unionType0, unionType1);
      assertNotSame(unionType0, unionType2);
      assertEquals(false, unionType2.isFunctionPrototypeType());
      assertEquals(false, unionType2.isNoResolvedType());
      assertEquals(false, unionType2.isNoObjectType());
      assertEquals(false, unionType2.isConstructor());
      assertEquals(false, unionType2.isNominalConstructor());
      assertEquals(false, unionType2.isVoidType());
      assertEquals(false, unionType2.isEnumElementType());
      assertEquals(false, unionType2.isInterface());
      assertEquals(false, unionType2.isResolved());
      assertEquals(false, unionType2.isRecordType());
      assertEquals(false, unionType2.isNumberValueType());
      assertEquals(false, unionType2.isCheckedUnknownType());
      assertEquals(false, unionType2.isBooleanValueType());
      assertEquals(false, unionType2.isEnumType());
      assertEquals(true, unionType2.isUnionType());
      assertEquals(false, unionType2.isTemplateType());
      assertEquals(false, unionType2.isAllType());
      assertEquals(false, unionType2.isNoType());
      assertEquals(false, unionType2.isFunctionType());
      assertEquals(false, unionType2.isStringValueType());
      assertEquals(false, unionType2.isNominalType());
      assertEquals(false, unionType2.isOrdinaryFunction());
      assertEquals(false, unionType2.isNullType());
      assertEquals("[NoObject]", vector0.toString());
      assertEquals(1, vector0.size());
      assertEquals(10, vector0.capacity());
      assertEquals(false, vector0.isEmpty());
      assertEquals(true, unionType1.isUnionType());
      assertEquals(false, unionType1.isRecordType());
      assertEquals(false, unionType1.isVoidType());
      assertEquals(false, unionType1.isNullType());
      assertEquals(false, unionType1.isEnumElementType());
      assertEquals(false, unionType1.isNoType());
      assertEquals(false, unionType1.isNumberValueType());
      assertEquals(false, unionType1.isNoObjectType());
      assertEquals(false, unionType1.isFunctionType());
      assertEquals(false, unionType1.isNoResolvedType());
      assertEquals(false, unionType1.isStringValueType());
      assertEquals(false, unionType1.isResolved());
      assertEquals(false, unionType1.isInterface());
      assertEquals(false, unionType1.isNominalConstructor());
      assertEquals(false, unionType1.isAllType());
      assertEquals(false, unionType1.isOrdinaryFunction());
      assertEquals(false, unionType1.isConstructor());
      assertEquals(false, unionType1.isNominalType());
      assertEquals(false, unionType1.isCheckedUnknownType());
      assertEquals(false, unionType1.isTemplateType());
      assertEquals(false, unionType1.isEnumType());
      assertEquals(false, unionType1.isFunctionPrototypeType());
      assertEquals(false, unionType1.isBooleanValueType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isOrdinaryFunction());
      assertEquals(false, unionType0.isFunctionPrototypeType());
      assertEquals(false, unionType0.isEnumElementType());
      assertEquals(false, unionType0.isCheckedUnknownType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isNoResolvedType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isEnumType());
      assertEquals(false, unionType0.isConstructor());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isNominalConstructor());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isNominalType());
      assertEquals(false, unionType0.isInterface());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, hashSet0.isEmpty());
      assertEquals("[(NoObject)]", hashSet0.toString());
      assertEquals(1, hashSet0.size());
      assertFalse(unionType2.equals((Object)unionType0));
      assertFalse(unionType1.equals((Object)unionType0));
      assertFalse(unionType0.equals((Object)unionType1));
      assertFalse(unionType0.equals((Object)unionType2));
      assertNotNull(unionType2);
  }

  @Test
  public void test21()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = null;
      Vector<JSType> vector0 = new Vector<JSType>();
      assertEquals("[]", vector0.toString());
      assertEquals(true, vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertNotNull(vector0);
      
      UnionType unionType0 = new UnionType(jSTypeRegistry0, vector0);
      assertEquals("[]", vector0.toString());
      assertEquals(true, vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isEnumElementType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isNominalConstructor());
      assertEquals(false, unionType0.isCheckedUnknownType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isFunctionPrototypeType());
      assertEquals(false, unionType0.isNominalType());
      assertEquals(false, unionType0.isConstructor());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isEnumType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isOrdinaryFunction());
      assertEquals(false, unionType0.isNoResolvedType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isInterface());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isTemplateType());
      assertNotNull(unionType0);
      
      HashSet<JSType> hashSet0 = new HashSet<JSType>();
      assertEquals("[]", hashSet0.toString());
      assertEquals(true, hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      assertNotNull(hashSet0);
      
      UnionType unionType1 = new UnionType(jSTypeRegistry0, hashSet0);
      assertNotSame(unionType1, unionType0);
      assertEquals("[]", hashSet0.toString());
      assertEquals(true, hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      assertEquals(false, unionType1.isNumberValueType());
      assertEquals(false, unionType1.isNoType());
      assertEquals(true, unionType1.isUnionType());
      assertEquals(false, unionType1.isConstructor());
      assertEquals(false, unionType1.isEnumType());
      assertEquals(false, unionType1.isInterface());
      assertEquals(false, unionType1.isOrdinaryFunction());
      assertEquals(false, unionType1.isEnumElementType());
      assertEquals(false, unionType1.isTemplateType());
      assertEquals(false, unionType1.isFunctionType());
      assertEquals(false, unionType1.isResolved());
      assertEquals(false, unionType1.isBooleanValueType());
      assertEquals(false, unionType1.isCheckedUnknownType());
      assertEquals(false, unionType1.isNullType());
      assertEquals(false, unionType1.isVoidType());
      assertEquals(false, unionType1.isNoResolvedType());
      assertEquals(false, unionType1.isNominalType());
      assertEquals(false, unionType1.isNoObjectType());
      assertEquals(false, unionType1.isRecordType());
      assertEquals(false, unionType1.isFunctionPrototypeType());
      assertEquals(false, unionType1.isAllType());
      assertEquals(false, unionType1.isNominalConstructor());
      assertEquals(false, unionType1.isStringValueType());
      assertTrue(unionType1.equals((Object)unionType0));
      assertNotNull(unionType1);
      
      boolean boolean0 = hashSet0.add((JSType) unionType0);
      assertTrue(boolean0);
      assertNotSame(unionType0, unionType1);
      assertEquals("[]", vector0.toString());
      assertEquals(true, vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isEnumElementType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isNominalConstructor());
      assertEquals(false, unionType0.isCheckedUnknownType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isFunctionPrototypeType());
      assertEquals(false, unionType0.isNominalType());
      assertEquals(false, unionType0.isConstructor());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isEnumType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isOrdinaryFunction());
      assertEquals(false, unionType0.isNoResolvedType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isInterface());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, hashSet0.isEmpty());
      assertEquals("[()]", hashSet0.toString());
      assertEquals(1, hashSet0.size());
      assertFalse(unionType0.equals((Object)unionType1));
      
      boolean boolean1 = JSType.isEquivalent((JSType) unionType1, (JSType) unionType1);
      assertTrue(boolean1);
      assertNotSame(unionType1, unionType0);
      assertEquals(false, hashSet0.isEmpty());
      assertEquals("[()]", hashSet0.toString());
      assertEquals(1, hashSet0.size());
      assertEquals(false, unionType1.isNumberValueType());
      assertEquals(false, unionType1.isNoType());
      assertEquals(true, unionType1.isUnionType());
      assertEquals(false, unionType1.isConstructor());
      assertEquals(false, unionType1.isEnumType());
      assertEquals(false, unionType1.isInterface());
      assertEquals(false, unionType1.isOrdinaryFunction());
      assertEquals(false, unionType1.isEnumElementType());
      assertEquals(false, unionType1.isTemplateType());
      assertEquals(false, unionType1.isFunctionType());
      assertEquals(false, unionType1.isResolved());
      assertEquals(false, unionType1.isBooleanValueType());
      assertEquals(false, unionType1.isCheckedUnknownType());
      assertEquals(false, unionType1.isNullType());
      assertEquals(false, unionType1.isVoidType());
      assertEquals(false, unionType1.isNoResolvedType());
      assertEquals(false, unionType1.isNominalType());
      assertEquals(false, unionType1.isNoObjectType());
      assertEquals(false, unionType1.isRecordType());
      assertEquals(false, unionType1.isFunctionPrototypeType());
      assertEquals(false, unionType1.isAllType());
      assertEquals(false, unionType1.isNominalConstructor());
      assertEquals(false, unionType1.isStringValueType());
      assertTrue(boolean1 == boolean0);
      assertFalse(unionType1.equals((Object)unionType0));
  }

  @Test
  public void test22()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = null;
      HashSet<JSType> hashSet0 = new HashSet<JSType>();
      assertEquals("[]", hashSet0.toString());
      assertEquals(0, hashSet0.size());
      assertEquals(true, hashSet0.isEmpty());
      assertNotNull(hashSet0);
      
      UnionType unionType0 = new UnionType(jSTypeRegistry0, hashSet0);
      assertEquals("[]", hashSet0.toString());
      assertEquals(0, hashSet0.size());
      assertEquals(true, hashSet0.isEmpty());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isEnumType());
      assertEquals(false, unionType0.isCheckedUnknownType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isFunctionPrototypeType());
      assertEquals(false, unionType0.isEnumElementType());
      assertEquals(false, unionType0.isNominalConstructor());
      assertEquals(false, unionType0.isNoResolvedType());
      assertEquals(false, unionType0.isConstructor());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isInterface());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isNominalType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isOrdinaryFunction());
      assertEquals(false, unionType0.isFunctionType());
      assertNotNull(unionType0);
      
      boolean boolean0 = hashSet0.add((JSType) unionType0);
      assertTrue(boolean0);
      assertEquals(1, hashSet0.size());
      assertEquals(false, hashSet0.isEmpty());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isEnumType());
      assertEquals(false, unionType0.isCheckedUnknownType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isFunctionPrototypeType());
      assertEquals(false, unionType0.isEnumElementType());
      assertEquals(false, unionType0.isNominalConstructor());
      assertEquals(false, unionType0.isNoResolvedType());
      assertEquals(false, unionType0.isConstructor());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isInterface());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isNominalType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isOrdinaryFunction());
      assertEquals(false, unionType0.isFunctionType());
      
      ObjectType objectType0 = null;
      ParameterizedType parameterizedType0 = new ParameterizedType(jSTypeRegistry0, objectType0, objectType0);
      assertEquals(false, parameterizedType0.isFunctionPrototypeType());
      assertEquals(false, parameterizedType0.isNullType());
      assertEquals(false, parameterizedType0.isNumberValueType());
      assertEquals(false, parameterizedType0.hasCachedValues());
      assertEquals(false, parameterizedType0.isStringValueType());
      assertEquals(false, parameterizedType0.isResolved());
      assertEquals(false, parameterizedType0.isBooleanValueType());
      assertEquals(false, parameterizedType0.isVoidType());
      assertEquals(BooleanLiteralSet.TRUE, parameterizedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, parameterizedType0.isTemplateType());
      assertNotNull(parameterizedType0);
      
      JSType jSType0 = parameterizedType0.unboxesTo();
      assertEquals(false, parameterizedType0.isFunctionPrototypeType());
      assertEquals(false, parameterizedType0.isNullType());
      assertEquals(false, parameterizedType0.isNumberValueType());
      assertEquals(false, parameterizedType0.hasCachedValues());
      assertEquals(false, parameterizedType0.isStringValueType());
      assertEquals(false, parameterizedType0.isResolved());
      assertEquals(false, parameterizedType0.isBooleanValueType());
      assertEquals(false, parameterizedType0.isVoidType());
      assertEquals(BooleanLiteralSet.TRUE, parameterizedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, parameterizedType0.isTemplateType());
      assertNull(jSType0);
      
      boolean boolean1 = unionType0.contains(jSType0);
      assertFalse(boolean1);
      assertEquals(1, hashSet0.size());
      assertEquals(false, hashSet0.isEmpty());
      assertEquals(false, parameterizedType0.isFunctionPrototypeType());
      assertEquals(false, parameterizedType0.isNullType());
      assertEquals(false, parameterizedType0.isNumberValueType());
      assertEquals(false, parameterizedType0.hasCachedValues());
      assertEquals(false, parameterizedType0.isStringValueType());
      assertEquals(false, parameterizedType0.isResolved());
      assertEquals(false, parameterizedType0.isBooleanValueType());
      assertEquals(false, parameterizedType0.isVoidType());
      assertEquals(BooleanLiteralSet.TRUE, parameterizedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, parameterizedType0.isTemplateType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isEnumType());
      assertEquals(false, unionType0.isCheckedUnknownType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isFunctionPrototypeType());
      assertEquals(false, unionType0.isEnumElementType());
      assertEquals(false, unionType0.isNominalConstructor());
      assertEquals(false, unionType0.isNoResolvedType());
      assertEquals(false, unionType0.isConstructor());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isInterface());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isNominalType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isOrdinaryFunction());
      assertEquals(false, unionType0.isFunctionType());
      assertFalse(boolean1 == boolean0);
  }

  @Test
  public void test23()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = null;
      Vector<JSType> vector0 = new Vector<JSType>();
      assertEquals(0, vector0.size());
      assertEquals(true, vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertNotNull(vector0);
      
      NullType nullType0 = new NullType(jSTypeRegistry0);
      assertEquals(false, nullType0.isVoidType());
      assertEquals(BooleanLiteralSet.FALSE, nullType0.getPossibleToBooleanOutcomes());
      assertEquals(false, nullType0.isTemplateType());
      assertEquals(false, nullType0.isNoObjectType());
      assertEquals(false, nullType0.isRecordType());
      assertEquals(false, nullType0.isCheckedUnknownType());
      assertEquals(false, nullType0.isStringValueType());
      assertEquals(true, nullType0.isNullType());
      assertEquals(false, nullType0.isOrdinaryFunction());
      assertEquals(false, nullType0.isNumberValueType());
      assertEquals(false, nullType0.isConstructor());
      assertEquals(false, nullType0.isFunctionType());
      assertEquals(false, nullType0.isNominalType());
      assertEquals(true, nullType0.matchesNumberContext());
      assertEquals("null", nullType0.getDisplayName());
      assertEquals(false, nullType0.isUnionType());
      assertEquals(true, nullType0.isNullable());
      assertEquals(false, nullType0.isEnumElementType());
      assertEquals(false, nullType0.isInterface());
      assertEquals(false, nullType0.isNoResolvedType());
      assertEquals(false, nullType0.isBooleanValueType());
      assertEquals(false, nullType0.matchesObjectContext());
      assertEquals(false, nullType0.isFunctionPrototypeType());
      assertEquals(false, nullType0.isNominalConstructor());
      assertEquals(false, nullType0.isNoType());
      assertEquals(false, nullType0.isResolved());
      assertEquals(false, nullType0.isAllType());
      assertEquals(false, nullType0.isEnumType());
      assertEquals(true, nullType0.matchesStringContext());
      assertNotNull(nullType0);
      
      boolean boolean0 = vector0.add((JSType) nullType0);
      assertTrue(boolean0);
      assertEquals(false, nullType0.isVoidType());
      assertEquals(BooleanLiteralSet.FALSE, nullType0.getPossibleToBooleanOutcomes());
      assertEquals(false, nullType0.isTemplateType());
      assertEquals(false, nullType0.isNoObjectType());
      assertEquals(false, nullType0.isRecordType());
      assertEquals(false, nullType0.isCheckedUnknownType());
      assertEquals(false, nullType0.isStringValueType());
      assertEquals(true, nullType0.isNullType());
      assertEquals(false, nullType0.isOrdinaryFunction());
      assertEquals(false, nullType0.isNumberValueType());
      assertEquals(false, nullType0.isConstructor());
      assertEquals(false, nullType0.isFunctionType());
      assertEquals(false, nullType0.isNominalType());
      assertEquals(true, nullType0.matchesNumberContext());
      assertEquals("null", nullType0.getDisplayName());
      assertEquals(false, nullType0.isUnionType());
      assertEquals(true, nullType0.isNullable());
      assertEquals(false, nullType0.isEnumElementType());
      assertEquals(false, nullType0.isInterface());
      assertEquals(false, nullType0.isNoResolvedType());
      assertEquals(false, nullType0.isBooleanValueType());
      assertEquals(false, nullType0.matchesObjectContext());
      assertEquals(false, nullType0.isFunctionPrototypeType());
      assertEquals(false, nullType0.isNominalConstructor());
      assertEquals(false, nullType0.isNoType());
      assertEquals(false, nullType0.isResolved());
      assertEquals(false, nullType0.isAllType());
      assertEquals(false, nullType0.isEnumType());
      assertEquals(true, nullType0.matchesStringContext());
      assertEquals("[null]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertEquals(1, vector0.size());
      assertEquals(false, vector0.isEmpty());
      
      UnionType unionType0 = new UnionType(jSTypeRegistry0, vector0);
      assertEquals(false, unionType0.isFunctionPrototypeType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isNominalConstructor());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isOrdinaryFunction());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isCheckedUnknownType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isNominalType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isEnumType());
      assertEquals(false, unionType0.isConstructor());
      assertEquals(false, unionType0.isNoResolvedType());
      assertEquals(false, unionType0.isEnumElementType());
      assertEquals(false, unionType0.isInterface());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals("[null]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertEquals(1, vector0.size());
      assertEquals(false, vector0.isEmpty());
      assertNotNull(unionType0);
      
      NullType nullType1 = (NullType)unionType0.meet(nullType0);
      assertSame(nullType0, nullType1);
      assertSame(nullType1, nullType0);
      assertEquals(false, nullType0.isVoidType());
      assertEquals(BooleanLiteralSet.FALSE, nullType0.getPossibleToBooleanOutcomes());
      assertEquals(false, nullType0.isTemplateType());
      assertEquals(false, nullType0.isNoObjectType());
      assertEquals(false, nullType0.isRecordType());
      assertEquals(false, nullType0.isCheckedUnknownType());
      assertEquals(false, nullType0.isStringValueType());
      assertEquals(true, nullType0.isNullType());
      assertEquals(false, nullType0.isOrdinaryFunction());
      assertEquals(false, nullType0.isNumberValueType());
      assertEquals(false, nullType0.isConstructor());
      assertEquals(false, nullType0.isFunctionType());
      assertEquals(false, nullType0.isNominalType());
      assertEquals(true, nullType0.matchesNumberContext());
      assertEquals("null", nullType0.getDisplayName());
      assertEquals(false, nullType0.isUnionType());
      assertEquals(true, nullType0.isNullable());
      assertEquals(false, nullType0.isEnumElementType());
      assertEquals(false, nullType0.isInterface());
      assertEquals(false, nullType0.isNoResolvedType());
      assertEquals(false, nullType0.isBooleanValueType());
      assertEquals(false, nullType0.matchesObjectContext());
      assertEquals(false, nullType0.isFunctionPrototypeType());
      assertEquals(false, nullType0.isNominalConstructor());
      assertEquals(false, nullType0.isNoType());
      assertEquals(false, nullType0.isResolved());
      assertEquals(false, nullType0.isAllType());
      assertEquals(false, nullType0.isEnumType());
      assertEquals(true, nullType0.matchesStringContext());
      assertEquals(false, unionType0.isFunctionPrototypeType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isNominalConstructor());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isOrdinaryFunction());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isCheckedUnknownType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isNominalType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isEnumType());
      assertEquals(false, unionType0.isConstructor());
      assertEquals(false, unionType0.isNoResolvedType());
      assertEquals(false, unionType0.isEnumElementType());
      assertEquals(false, unionType0.isInterface());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, nullType1.isTemplateType());
      assertEquals(true, nullType1.matchesNumberContext());
      assertEquals(false, nullType1.isNominalConstructor());
      assertEquals(false, nullType1.isNoResolvedType());
      assertEquals(false, nullType1.isEnumElementType());
      assertEquals(false, nullType1.isVoidType());
      assertEquals(false, nullType1.isFunctionType());
      assertEquals(false, nullType1.isUnionType());
      assertEquals(false, nullType1.isCheckedUnknownType());
      assertEquals(false, nullType1.isInterface());
      assertEquals(false, nullType1.isFunctionPrototypeType());
      assertEquals(false, nullType1.isResolved());
      assertEquals(true, nullType1.isNullable());
      assertEquals(false, nullType1.isRecordType());
      assertEquals(false, nullType1.isBooleanValueType());
      assertEquals("null", nullType1.getDisplayName());
      assertEquals(false, nullType1.matchesObjectContext());
      assertEquals(true, nullType1.isNullType());
      assertEquals(false, nullType1.isOrdinaryFunction());
      assertEquals(false, nullType1.isNoType());
      assertEquals(false, nullType1.isNoObjectType());
      assertEquals(true, nullType1.matchesStringContext());
      assertEquals(false, nullType1.isAllType());
      assertEquals(false, nullType1.isNumberValueType());
      assertEquals(false, nullType1.isNominalType());
      assertEquals(false, nullType1.isConstructor());
      assertEquals(false, nullType1.isStringValueType());
      assertEquals(BooleanLiteralSet.FALSE, nullType1.getPossibleToBooleanOutcomes());
      assertEquals(false, nullType1.isEnumType());
      assertEquals("[null]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertEquals(1, vector0.size());
      assertEquals(false, vector0.isEmpty());
      assertNotNull(nullType1);
  }

  @Test
  public void test24()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = null;
      Vector<JSType> vector0 = new Vector<JSType>();
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertEquals("[]", vector0.toString());
      assertEquals(true, vector0.isEmpty());
      assertNotNull(vector0);
      
      NumberType numberType0 = new NumberType(jSTypeRegistry0);
      assertEquals(false, numberType0.isFunctionType());
      assertEquals(true, numberType0.matchesNumberContext());
      assertEquals(false, numberType0.isNoResolvedType());
      assertEquals(false, numberType0.isNominalType());
      assertEquals(BooleanLiteralSet.BOTH, numberType0.getPossibleToBooleanOutcomes());
      assertEquals(false, numberType0.isEnumElementType());
      assertEquals(false, numberType0.isNominalConstructor());
      assertEquals(false, numberType0.isVoidType());
      assertEquals(false, numberType0.isInterface());
      assertEquals(false, numberType0.isOrdinaryFunction());
      assertEquals(false, numberType0.isNullable());
      assertEquals(false, numberType0.isUnionType());
      assertEquals(false, numberType0.isFunctionPrototypeType());
      assertEquals(false, numberType0.isRecordType());
      assertEquals(false, numberType0.isStringValueType());
      assertEquals(false, numberType0.isResolved());
      assertEquals(false, numberType0.isTemplateType());
      assertEquals(true, numberType0.isNumberValueType());
      assertEquals("number", numberType0.getDisplayName());
      assertEquals(true, numberType0.matchesObjectContext());
      assertEquals(false, numberType0.isNoType());
      assertEquals(true, numberType0.matchesStringContext());
      assertEquals(false, numberType0.isConstructor());
      assertEquals(false, numberType0.isBooleanValueType());
      assertEquals(false, numberType0.isEnumType());
      assertEquals(false, numberType0.isCheckedUnknownType());
      assertEquals(false, numberType0.isNoObjectType());
      assertEquals(false, numberType0.isNullType());
      assertEquals(false, numberType0.isAllType());
      assertNotNull(numberType0);
      
      vector0.addElement((JSType) numberType0);
      assertEquals(false, numberType0.isFunctionType());
      assertEquals(true, numberType0.matchesNumberContext());
      assertEquals(false, numberType0.isNoResolvedType());
      assertEquals(false, numberType0.isNominalType());
      assertEquals(BooleanLiteralSet.BOTH, numberType0.getPossibleToBooleanOutcomes());
      assertEquals(false, numberType0.isEnumElementType());
      assertEquals(false, numberType0.isNominalConstructor());
      assertEquals(false, numberType0.isVoidType());
      assertEquals(false, numberType0.isInterface());
      assertEquals(false, numberType0.isOrdinaryFunction());
      assertEquals(false, numberType0.isNullable());
      assertEquals(false, numberType0.isUnionType());
      assertEquals(false, numberType0.isFunctionPrototypeType());
      assertEquals(false, numberType0.isRecordType());
      assertEquals(false, numberType0.isStringValueType());
      assertEquals(false, numberType0.isResolved());
      assertEquals(false, numberType0.isTemplateType());
      assertEquals(true, numberType0.isNumberValueType());
      assertEquals("number", numberType0.getDisplayName());
      assertEquals(true, numberType0.matchesObjectContext());
      assertEquals(false, numberType0.isNoType());
      assertEquals(true, numberType0.matchesStringContext());
      assertEquals(false, numberType0.isConstructor());
      assertEquals(false, numberType0.isBooleanValueType());
      assertEquals(false, numberType0.isEnumType());
      assertEquals(false, numberType0.isCheckedUnknownType());
      assertEquals(false, numberType0.isNoObjectType());
      assertEquals(false, numberType0.isNullType());
      assertEquals(false, numberType0.isAllType());
      assertEquals(10, vector0.capacity());
      assertEquals("[number]", vector0.toString());
      assertEquals(1, vector0.size());
      assertEquals(false, vector0.isEmpty());
      
      UnionType unionType0 = new UnionType(jSTypeRegistry0, vector0);
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isInterface());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isCheckedUnknownType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isNoResolvedType());
      assertEquals(false, unionType0.isConstructor());
      assertEquals(false, unionType0.isNominalType());
      assertEquals(false, unionType0.isEnumType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isEnumElementType());
      assertEquals(false, unionType0.isFunctionPrototypeType());
      assertEquals(false, unionType0.isOrdinaryFunction());
      assertEquals(false, unionType0.isNominalConstructor());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(10, vector0.capacity());
      assertEquals("[number]", vector0.toString());
      assertEquals(1, vector0.size());
      assertEquals(false, vector0.isEmpty());
      assertNotNull(unionType0);
      
      NumberType numberType1 = (NumberType)unionType0.meet(unionType0);
      assertSame(numberType1, numberType0);
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isInterface());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isCheckedUnknownType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isNoResolvedType());
      assertEquals(false, unionType0.isConstructor());
      assertEquals(false, unionType0.isNominalType());
      assertEquals(false, unionType0.isEnumType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isEnumElementType());
      assertEquals(false, unionType0.isFunctionPrototypeType());
      assertEquals(false, unionType0.isOrdinaryFunction());
      assertEquals(false, unionType0.isNominalConstructor());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, numberType1.isNominalType());
      assertEquals(false, numberType1.isEnumElementType());
      assertEquals(false, numberType1.isCheckedUnknownType());
      assertEquals(false, numberType1.isBooleanValueType());
      assertEquals(true, numberType1.isNumberValueType());
      assertEquals(false, numberType1.isStringValueType());
      assertEquals(true, numberType1.matchesObjectContext());
      assertEquals(false, numberType1.isNoResolvedType());
      assertEquals(true, numberType1.matchesNumberContext());
      assertEquals(false, numberType1.isResolved());
      assertEquals(false, numberType1.isNoType());
      assertEquals(false, numberType1.isRecordType());
      assertEquals(false, numberType1.isEnumType());
      assertEquals(false, numberType1.isNullable());
      assertEquals(false, numberType1.isTemplateType());
      assertEquals(false, numberType1.isFunctionPrototypeType());
      assertEquals("number", numberType1.getDisplayName());
      assertEquals(false, numberType1.isAllType());
      assertEquals(false, numberType1.isNominalConstructor());
      assertEquals(false, numberType1.isUnionType());
      assertEquals(false, numberType1.isFunctionType());
      assertEquals(false, numberType1.isConstructor());
      assertEquals(BooleanLiteralSet.BOTH, numberType1.getPossibleToBooleanOutcomes());
      assertEquals(true, numberType1.matchesStringContext());
      assertEquals(false, numberType1.isInterface());
      assertEquals(false, numberType1.isNoObjectType());
      assertEquals(false, numberType1.isVoidType());
      assertEquals(false, numberType1.isNullType());
      assertEquals(false, numberType1.isOrdinaryFunction());
      assertEquals(10, vector0.capacity());
      assertEquals("[number]", vector0.toString());
      assertEquals(1, vector0.size());
      assertEquals(false, vector0.isEmpty());
      assertNotNull(numberType1);
  }

  @Test
  public void test25()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = null;
      Vector<JSType> vector0 = new Vector<JSType>();
      assertEquals(true, vector0.isEmpty());
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertNotNull(vector0);
      
      NumberType numberType0 = new NumberType(jSTypeRegistry0);
      assertEquals(false, numberType0.isNoType());
      assertEquals(false, numberType0.isNullable());
      assertEquals(BooleanLiteralSet.BOTH, numberType0.getPossibleToBooleanOutcomes());
      assertEquals(false, numberType0.isRecordType());
      assertEquals(false, numberType0.isNoResolvedType());
      assertEquals(false, numberType0.isNoObjectType());
      assertEquals(false, numberType0.isCheckedUnknownType());
      assertEquals(false, numberType0.isFunctionPrototypeType());
      assertEquals(false, numberType0.isAllType());
      assertEquals(false, numberType0.isOrdinaryFunction());
      assertEquals(false, numberType0.isConstructor());
      assertEquals(true, numberType0.matchesObjectContext());
      assertEquals(false, numberType0.isNominalType());
      assertEquals(false, numberType0.isStringValueType());
      assertEquals(false, numberType0.isEnumElementType());
      assertEquals(false, numberType0.isNominalConstructor());
      assertEquals(true, numberType0.matchesNumberContext());
      assertEquals(false, numberType0.isTemplateType());
      assertEquals(false, numberType0.isNullType());
      assertEquals(false, numberType0.isVoidType());
      assertEquals(true, numberType0.isNumberValueType());
      assertEquals("number", numberType0.getDisplayName());
      assertEquals(false, numberType0.isFunctionType());
      assertEquals(false, numberType0.isUnionType());
      assertEquals(false, numberType0.isResolved());
      assertEquals(true, numberType0.matchesStringContext());
      assertEquals(false, numberType0.isInterface());
      assertEquals(false, numberType0.isBooleanValueType());
      assertEquals(false, numberType0.isEnumType());
      assertNotNull(numberType0);
      
      vector0.addElement((JSType) numberType0);
      assertEquals(false, numberType0.isNoType());
      assertEquals(false, numberType0.isNullable());
      assertEquals(BooleanLiteralSet.BOTH, numberType0.getPossibleToBooleanOutcomes());
      assertEquals(false, numberType0.isRecordType());
      assertEquals(false, numberType0.isNoResolvedType());
      assertEquals(false, numberType0.isNoObjectType());
      assertEquals(false, numberType0.isCheckedUnknownType());
      assertEquals(false, numberType0.isFunctionPrototypeType());
      assertEquals(false, numberType0.isAllType());
      assertEquals(false, numberType0.isOrdinaryFunction());
      assertEquals(false, numberType0.isConstructor());
      assertEquals(true, numberType0.matchesObjectContext());
      assertEquals(false, numberType0.isNominalType());
      assertEquals(false, numberType0.isStringValueType());
      assertEquals(false, numberType0.isEnumElementType());
      assertEquals(false, numberType0.isNominalConstructor());
      assertEquals(true, numberType0.matchesNumberContext());
      assertEquals(false, numberType0.isTemplateType());
      assertEquals(false, numberType0.isNullType());
      assertEquals(false, numberType0.isVoidType());
      assertEquals(true, numberType0.isNumberValueType());
      assertEquals("number", numberType0.getDisplayName());
      assertEquals(false, numberType0.isFunctionType());
      assertEquals(false, numberType0.isUnionType());
      assertEquals(false, numberType0.isResolved());
      assertEquals(true, numberType0.matchesStringContext());
      assertEquals(false, numberType0.isInterface());
      assertEquals(false, numberType0.isBooleanValueType());
      assertEquals(false, numberType0.isEnumType());
      assertEquals("[number]", vector0.toString());
      assertEquals(false, vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertEquals(1, vector0.size());
      
      NullType nullType0 = new NullType(jSTypeRegistry0);
      assertEquals(true, nullType0.matchesNumberContext());
      assertEquals(false, nullType0.matchesObjectContext());
      assertEquals(false, nullType0.isConstructor());
      assertEquals(false, nullType0.isAllType());
      assertEquals(false, nullType0.isNumberValueType());
      assertEquals(false, nullType0.isTemplateType());
      assertEquals(false, nullType0.isFunctionType());
      assertEquals(false, nullType0.isRecordType());
      assertEquals(false, nullType0.isEnumElementType());
      assertEquals(false, nullType0.isBooleanValueType());
      assertEquals(BooleanLiteralSet.FALSE, nullType0.getPossibleToBooleanOutcomes());
      assertEquals(false, nullType0.isCheckedUnknownType());
      assertEquals(false, nullType0.isVoidType());
      assertEquals(false, nullType0.isStringValueType());
      assertEquals(false, nullType0.isResolved());
      assertEquals(false, nullType0.isEnumType());
      assertEquals(false, nullType0.isOrdinaryFunction());
      assertEquals(false, nullType0.isFunctionPrototypeType());
      assertEquals(true, nullType0.isNullType());
      assertEquals(true, nullType0.isNullable());
      assertEquals(false, nullType0.isNominalType());
      assertEquals(false, nullType0.isUnionType());
      assertEquals(false, nullType0.isNominalConstructor());
      assertEquals(false, nullType0.isNoObjectType());
      assertEquals(true, nullType0.matchesStringContext());
      assertEquals(false, nullType0.isNoType());
      assertEquals(false, nullType0.isInterface());
      assertEquals(false, nullType0.isNoResolvedType());
      assertEquals("null", nullType0.getDisplayName());
      assertNotNull(nullType0);
      
      UnionType unionType0 = new UnionType(jSTypeRegistry0, vector0);
      assertEquals("[number]", vector0.toString());
      assertEquals(false, vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertEquals(1, vector0.size());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isNominalConstructor());
      assertEquals(false, unionType0.isNominalType());
      assertEquals(false, unionType0.isCheckedUnknownType());
      assertEquals(false, unionType0.isConstructor());
      assertEquals(false, unionType0.isNoResolvedType());
      assertEquals(false, unionType0.isInterface());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isEnumElementType());
      assertEquals(false, unionType0.isEnumType());
      assertEquals(false, unionType0.isFunctionPrototypeType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isOrdinaryFunction());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isNoType());
      assertNotNull(unionType0);
      
      // Undeclared exception!
      try {
        JSType jSType0 = unionType0.meet(nullType0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test26()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = null;
      Vector<JSType> vector0 = new Vector<JSType>();
      assertEquals(0, vector0.size());
      assertEquals(true, vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertNotNull(vector0);
      
      NullType nullType0 = new NullType(jSTypeRegistry0);
      assertEquals(false, nullType0.isEnumType());
      assertEquals(false, nullType0.isAllType());
      assertEquals(false, nullType0.isNominalType());
      assertEquals(false, nullType0.isInterface());
      assertEquals("null", nullType0.getDisplayName());
      assertEquals(false, nullType0.isNominalConstructor());
      assertEquals(true, nullType0.isNullType());
      assertEquals(false, nullType0.isVoidType());
      assertEquals(false, nullType0.isNoType());
      assertEquals(false, nullType0.isNumberValueType());
      assertEquals(false, nullType0.isFunctionPrototypeType());
      assertEquals(true, nullType0.matchesNumberContext());
      assertEquals(false, nullType0.matchesObjectContext());
      assertEquals(false, nullType0.isEnumElementType());
      assertEquals(BooleanLiteralSet.FALSE, nullType0.getPossibleToBooleanOutcomes());
      assertEquals(false, nullType0.isFunctionType());
      assertEquals(false, nullType0.isOrdinaryFunction());
      assertEquals(false, nullType0.isStringValueType());
      assertEquals(true, nullType0.isNullable());
      assertEquals(false, nullType0.isNoObjectType());
      assertEquals(false, nullType0.isNoResolvedType());
      assertEquals(false, nullType0.isCheckedUnknownType());
      assertEquals(false, nullType0.isBooleanValueType());
      assertEquals(false, nullType0.isResolved());
      assertEquals(false, nullType0.isRecordType());
      assertEquals(false, nullType0.isConstructor());
      assertEquals(true, nullType0.matchesStringContext());
      assertEquals(false, nullType0.isUnionType());
      assertEquals(false, nullType0.isTemplateType());
      assertNotNull(nullType0);
      
      boolean boolean0 = vector0.add((JSType) nullType0);
      assertTrue(boolean0);
      assertEquals(1, vector0.size());
      assertEquals("[null]", vector0.toString());
      assertEquals(false, vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertEquals(false, nullType0.isEnumType());
      assertEquals(false, nullType0.isAllType());
      assertEquals(false, nullType0.isNominalType());
      assertEquals(false, nullType0.isInterface());
      assertEquals("null", nullType0.getDisplayName());
      assertEquals(false, nullType0.isNominalConstructor());
      assertEquals(true, nullType0.isNullType());
      assertEquals(false, nullType0.isVoidType());
      assertEquals(false, nullType0.isNoType());
      assertEquals(false, nullType0.isNumberValueType());
      assertEquals(false, nullType0.isFunctionPrototypeType());
      assertEquals(true, nullType0.matchesNumberContext());
      assertEquals(false, nullType0.matchesObjectContext());
      assertEquals(false, nullType0.isEnumElementType());
      assertEquals(BooleanLiteralSet.FALSE, nullType0.getPossibleToBooleanOutcomes());
      assertEquals(false, nullType0.isFunctionType());
      assertEquals(false, nullType0.isOrdinaryFunction());
      assertEquals(false, nullType0.isStringValueType());
      assertEquals(true, nullType0.isNullable());
      assertEquals(false, nullType0.isNoObjectType());
      assertEquals(false, nullType0.isNoResolvedType());
      assertEquals(false, nullType0.isCheckedUnknownType());
      assertEquals(false, nullType0.isBooleanValueType());
      assertEquals(false, nullType0.isResolved());
      assertEquals(false, nullType0.isRecordType());
      assertEquals(false, nullType0.isConstructor());
      assertEquals(true, nullType0.matchesStringContext());
      assertEquals(false, nullType0.isUnionType());
      assertEquals(false, nullType0.isTemplateType());
      
      UnionType unionType0 = new UnionType(jSTypeRegistry0, vector0);
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isCheckedUnknownType());
      assertEquals(false, unionType0.isFunctionPrototypeType());
      assertEquals(false, unionType0.isOrdinaryFunction());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isNominalConstructor());
      assertEquals(false, unionType0.isConstructor());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isNominalType());
      assertEquals(false, unionType0.isNoResolvedType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isEnumType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isInterface());
      assertEquals(false, unionType0.isEnumElementType());
      assertEquals(1, vector0.size());
      assertEquals("[null]", vector0.toString());
      assertEquals(false, vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertNotNull(unionType0);
      
      UnionType unionType1 = (UnionType)unionType0.getLeastSupertype((JSType) nullType0);
      assertSame(unionType0, unionType1);
      assertSame(unionType1, unionType0);
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isCheckedUnknownType());
      assertEquals(false, unionType0.isFunctionPrototypeType());
      assertEquals(false, unionType0.isOrdinaryFunction());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isNominalConstructor());
      assertEquals(false, unionType0.isConstructor());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isNominalType());
      assertEquals(false, unionType0.isNoResolvedType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isEnumType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isInterface());
      assertEquals(false, unionType0.isEnumElementType());
      assertEquals(false, unionType1.isStringValueType());
      assertEquals(false, unionType1.isOrdinaryFunction());
      assertEquals(false, unionType1.isAllType());
      assertEquals(false, unionType1.isNominalType());
      assertEquals(false, unionType1.isNumberValueType());
      assertEquals(false, unionType1.isNullType());
      assertEquals(false, unionType1.isTemplateType());
      assertEquals(false, unionType1.isRecordType());
      assertEquals(false, unionType1.isFunctionType());
      assertEquals(false, unionType1.isFunctionPrototypeType());
      assertEquals(false, unionType1.isBooleanValueType());
      assertEquals(false, unionType1.isInterface());
      assertEquals(false, unionType1.isNominalConstructor());
      assertEquals(false, unionType1.isEnumType());
      assertEquals(false, unionType1.isCheckedUnknownType());
      assertEquals(false, unionType1.isNoType());
      assertEquals(false, unionType1.isNoResolvedType());
      assertEquals(false, unionType1.isConstructor());
      assertEquals(true, unionType1.isUnionType());
      assertEquals(false, unionType1.isVoidType());
      assertEquals(false, unionType1.isEnumElementType());
      assertEquals(false, unionType1.isResolved());
      assertEquals(false, unionType1.isNoObjectType());
      assertEquals(1, vector0.size());
      assertEquals("[null]", vector0.toString());
      assertEquals(false, vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertEquals(false, nullType0.isEnumType());
      assertEquals(false, nullType0.isAllType());
      assertEquals(false, nullType0.isNominalType());
      assertEquals(false, nullType0.isInterface());
      assertEquals("null", nullType0.getDisplayName());
      assertEquals(false, nullType0.isNominalConstructor());
      assertEquals(true, nullType0.isNullType());
      assertEquals(false, nullType0.isVoidType());
      assertEquals(false, nullType0.isNoType());
      assertEquals(false, nullType0.isNumberValueType());
      assertEquals(false, nullType0.isFunctionPrototypeType());
      assertEquals(true, nullType0.matchesNumberContext());
      assertEquals(false, nullType0.matchesObjectContext());
      assertEquals(false, nullType0.isEnumElementType());
      assertEquals(BooleanLiteralSet.FALSE, nullType0.getPossibleToBooleanOutcomes());
      assertEquals(false, nullType0.isFunctionType());
      assertEquals(false, nullType0.isOrdinaryFunction());
      assertEquals(false, nullType0.isStringValueType());
      assertEquals(true, nullType0.isNullable());
      assertEquals(false, nullType0.isNoObjectType());
      assertEquals(false, nullType0.isNoResolvedType());
      assertEquals(false, nullType0.isCheckedUnknownType());
      assertEquals(false, nullType0.isBooleanValueType());
      assertEquals(false, nullType0.isResolved());
      assertEquals(false, nullType0.isRecordType());
      assertEquals(false, nullType0.isConstructor());
      assertEquals(true, nullType0.matchesStringContext());
      assertEquals(false, nullType0.isUnionType());
      assertEquals(false, nullType0.isTemplateType());
      assertNotNull(unionType1);
  }

  @Test
  public void test27()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = null;
      Vector<JSType> vector0 = new Vector<JSType>();
      assertEquals("[]", vector0.toString());
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertEquals(true, vector0.isEmpty());
      assertNotNull(vector0);
      
      NumberType numberType0 = new NumberType(jSTypeRegistry0);
      assertEquals(false, numberType0.isInterface());
      assertEquals(false, numberType0.isEnumElementType());
      assertEquals(false, numberType0.isStringValueType());
      assertEquals("number", numberType0.getDisplayName());
      assertEquals(true, numberType0.isNumberValueType());
      assertEquals(false, numberType0.isConstructor());
      assertEquals(false, numberType0.isNullType());
      assertEquals(false, numberType0.isNullable());
      assertEquals(false, numberType0.isFunctionType());
      assertEquals(false, numberType0.isNoType());
      assertEquals(false, numberType0.isVoidType());
      assertEquals(false, numberType0.isAllType());
      assertEquals(false, numberType0.isNominalConstructor());
      assertEquals(false, numberType0.isBooleanValueType());
      assertEquals(false, numberType0.isRecordType());
      assertEquals(false, numberType0.isNoResolvedType());
      assertEquals(true, numberType0.matchesNumberContext());
      assertEquals(false, numberType0.isNominalType());
      assertEquals(false, numberType0.isResolved());
      assertEquals(false, numberType0.isEnumType());
      assertEquals(false, numberType0.isTemplateType());
      assertEquals(false, numberType0.isUnionType());
      assertEquals(false, numberType0.isNoObjectType());
      assertEquals(false, numberType0.isCheckedUnknownType());
      assertEquals(false, numberType0.isOrdinaryFunction());
      assertEquals(true, numberType0.matchesStringContext());
      assertEquals(false, numberType0.isFunctionPrototypeType());
      assertEquals(BooleanLiteralSet.BOTH, numberType0.getPossibleToBooleanOutcomes());
      assertEquals(true, numberType0.matchesObjectContext());
      assertNotNull(numberType0);
      
      vector0.addElement((JSType) numberType0);
      assertEquals(10, vector0.capacity());
      assertEquals(1, vector0.size());
      assertEquals(false, vector0.isEmpty());
      assertEquals("[number]", vector0.toString());
      assertEquals(false, numberType0.isInterface());
      assertEquals(false, numberType0.isEnumElementType());
      assertEquals(false, numberType0.isStringValueType());
      assertEquals("number", numberType0.getDisplayName());
      assertEquals(true, numberType0.isNumberValueType());
      assertEquals(false, numberType0.isConstructor());
      assertEquals(false, numberType0.isNullType());
      assertEquals(false, numberType0.isNullable());
      assertEquals(false, numberType0.isFunctionType());
      assertEquals(false, numberType0.isNoType());
      assertEquals(false, numberType0.isVoidType());
      assertEquals(false, numberType0.isAllType());
      assertEquals(false, numberType0.isNominalConstructor());
      assertEquals(false, numberType0.isBooleanValueType());
      assertEquals(false, numberType0.isRecordType());
      assertEquals(false, numberType0.isNoResolvedType());
      assertEquals(true, numberType0.matchesNumberContext());
      assertEquals(false, numberType0.isNominalType());
      assertEquals(false, numberType0.isResolved());
      assertEquals(false, numberType0.isEnumType());
      assertEquals(false, numberType0.isTemplateType());
      assertEquals(false, numberType0.isUnionType());
      assertEquals(false, numberType0.isNoObjectType());
      assertEquals(false, numberType0.isCheckedUnknownType());
      assertEquals(false, numberType0.isOrdinaryFunction());
      assertEquals(true, numberType0.matchesStringContext());
      assertEquals(false, numberType0.isFunctionPrototypeType());
      assertEquals(BooleanLiteralSet.BOTH, numberType0.getPossibleToBooleanOutcomes());
      assertEquals(true, numberType0.matchesObjectContext());
      
      NullType nullType0 = new NullType(jSTypeRegistry0);
      assertEquals(false, nullType0.isVoidType());
      assertEquals(false, nullType0.isNoType());
      assertEquals(false, nullType0.isTemplateType());
      assertEquals(false, nullType0.isNominalType());
      assertEquals(false, nullType0.isFunctionPrototypeType());
      assertEquals(false, nullType0.matchesObjectContext());
      assertEquals(false, nullType0.isNominalConstructor());
      assertEquals(false, nullType0.isAllType());
      assertEquals(true, nullType0.matchesStringContext());
      assertEquals(false, nullType0.isOrdinaryFunction());
      assertEquals(false, nullType0.isNumberValueType());
      assertEquals(false, nullType0.isRecordType());
      assertEquals(false, nullType0.isStringValueType());
      assertEquals(false, nullType0.isNoResolvedType());
      assertEquals("null", nullType0.getDisplayName());
      assertEquals(true, nullType0.matchesNumberContext());
      assertEquals(false, nullType0.isUnionType());
      assertEquals(false, nullType0.isInterface());
      assertEquals(false, nullType0.isConstructor());
      assertEquals(BooleanLiteralSet.FALSE, nullType0.getPossibleToBooleanOutcomes());
      assertEquals(false, nullType0.isFunctionType());
      assertEquals(false, nullType0.isBooleanValueType());
      assertEquals(false, nullType0.isEnumElementType());
      assertEquals(false, nullType0.isEnumType());
      assertEquals(false, nullType0.isCheckedUnknownType());
      assertEquals(false, nullType0.isResolved());
      assertEquals(true, nullType0.isNullable());
      assertEquals(false, nullType0.isNoObjectType());
      assertEquals(true, nullType0.isNullType());
      assertNotNull(nullType0);
      
      UnionType unionType0 = new UnionType(jSTypeRegistry0, vector0);
      assertEquals(false, unionType0.isFunctionPrototypeType());
      assertEquals(false, unionType0.isEnumElementType());
      assertEquals(false, unionType0.isConstructor());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isEnumType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isNominalType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isInterface());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isNominalConstructor());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isOrdinaryFunction());
      assertEquals(false, unionType0.isCheckedUnknownType());
      assertEquals(false, unionType0.isNoResolvedType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(10, vector0.capacity());
      assertEquals(1, vector0.size());
      assertEquals(false, vector0.isEmpty());
      assertEquals("[number]", vector0.toString());
      assertNotNull(unionType0);
      
      // Undeclared exception!
      try {
        JSType jSType0 = unionType0.getLeastSupertype((JSType) nullType0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test28()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = null;
      Vector<JSType> vector0 = new Vector<JSType>();
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertEquals(true, vector0.isEmpty());
      assertEquals(0, vector0.size());
      assertNotNull(vector0);
      
      UnionType unionType0 = new UnionType(jSTypeRegistry0, vector0);
      assertEquals(false, unionType0.isEnumType());
      assertEquals(false, unionType0.isEnumElementType());
      assertEquals(false, unionType0.isConstructor());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isCheckedUnknownType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isNoResolvedType());
      assertEquals(false, unionType0.isOrdinaryFunction());
      assertEquals(false, unionType0.isNominalConstructor());
      assertEquals(false, unionType0.isFunctionPrototypeType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isInterface());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isNominalType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertEquals(true, vector0.isEmpty());
      assertEquals(0, vector0.size());
      assertNotNull(unionType0);
      
      UnionType unionType1 = (UnionType)unionType0.getLeastSupertype((JSType) unionType0);
      assertSame(unionType1, unionType0);
      assertSame(unionType0, unionType1);
      assertEquals(false, unionType1.isNoType());
      assertEquals(false, unionType1.isNullType());
      assertEquals(false, unionType1.isNominalConstructor());
      assertEquals(false, unionType1.isNominalType());
      assertEquals(false, unionType1.isEnumElementType());
      assertEquals(false, unionType1.isStringValueType());
      assertEquals(false, unionType1.isConstructor());
      assertEquals(true, unionType1.isUnionType());
      assertEquals(false, unionType1.isTemplateType());
      assertEquals(false, unionType1.isRecordType());
      assertEquals(false, unionType1.isVoidType());
      assertEquals(false, unionType1.isEnumType());
      assertEquals(false, unionType1.isNoResolvedType());
      assertEquals(false, unionType1.isCheckedUnknownType());
      assertEquals(false, unionType1.isFunctionPrototypeType());
      assertEquals(false, unionType1.isFunctionType());
      assertEquals(false, unionType1.isNoObjectType());
      assertEquals(false, unionType1.isAllType());
      assertEquals(false, unionType1.isBooleanValueType());
      assertEquals(false, unionType1.isInterface());
      assertEquals(false, unionType1.isResolved());
      assertEquals(false, unionType1.isNumberValueType());
      assertEquals(false, unionType1.isOrdinaryFunction());
      assertEquals(false, unionType0.isEnumType());
      assertEquals(false, unionType0.isEnumElementType());
      assertEquals(false, unionType0.isConstructor());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isCheckedUnknownType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isNoResolvedType());
      assertEquals(false, unionType0.isOrdinaryFunction());
      assertEquals(false, unionType0.isNominalConstructor());
      assertEquals(false, unionType0.isFunctionPrototypeType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isInterface());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isNominalType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertEquals(true, vector0.isEmpty());
      assertEquals(0, vector0.size());
      assertNotNull(unionType1);
  }

  @Test
  public void test29()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = null;
      Vector<JSType> vector0 = new Vector<JSType>();
      assertEquals("[]", vector0.toString());
      assertEquals(true, vector0.isEmpty());
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertNotNull(vector0);
      
      boolean boolean0 = true;
      UnknownType unknownType0 = new UnknownType(jSTypeRegistry0, boolean0);
      assertEquals(false, unknownType0.isEnumType());
      assertEquals(false, unknownType0.isStringValueType());
      assertEquals(false, unknownType0.isEnumElementType());
      assertEquals(true, unknownType0.isUnknownType());
      assertEquals(false, unknownType0.isRecordType());
      assertEquals(false, unknownType0.isNullType());
      assertEquals(false, unknownType0.isNumberValueType());
      assertEquals(false, unknownType0.isConstructor());
      assertEquals(true, unknownType0.isCheckedUnknownType());
      assertEquals(false, unknownType0.hasCachedValues());
      assertEquals(false, unknownType0.isNoResolvedType());
      assertEquals(false, unknownType0.isResolved());
      assertEquals(false, unknownType0.isNoObjectType());
      assertEquals(true, unknownType0.hasDisplayName());
      assertEquals(false, unknownType0.hasReferenceName());
      assertEquals(2147483647, unknownType0.getPropertiesCount());
      assertEquals(false, unknownType0.isVoidType());
      assertEquals(false, unknownType0.isNominalType());
      assertEquals(false, unknownType0.isNativeObjectType());
      assertEquals("Unknown", unknownType0.getDisplayName());
      assertEquals(false, unknownType0.isFunctionType());
      assertEquals("??", unknownType0.getReferenceName());
      assertEquals(false, unknownType0.isInterface());
      assertEquals(false, unknownType0.isNominalConstructor());
      assertEquals(true, unknownType0.isNullable());
      assertEquals(false, unknownType0.isBooleanValueType());
      assertEquals(false, unknownType0.isFunctionPrototypeType());
      assertEquals(true, unknownType0.matchesStringContext());
      assertEquals(false, unknownType0.isUnionType());
      assertEquals(true, unknownType0.canBeCalled());
      assertEquals(true, unknownType0.matchesObjectContext());
      assertEquals(false, unknownType0.isAllType());
      assertEquals(false, unknownType0.isTemplateType());
      assertEquals(false, unknownType0.isOrdinaryFunction());
      assertEquals(BooleanLiteralSet.BOTH, unknownType0.getPossibleToBooleanOutcomes());
      assertEquals(true, unknownType0.matchesNumberContext());
      assertEquals(false, unknownType0.isNoType());
      assertNotNull(unknownType0);
      
      boolean boolean1 = vector0.add((JSType) unknownType0);
      assertTrue(boolean1);
      assertEquals(false, vector0.isEmpty());
      assertEquals("[??]", vector0.toString());
      assertEquals(1, vector0.size());
      assertEquals(10, vector0.capacity());
      assertEquals(false, unknownType0.isEnumType());
      assertEquals(false, unknownType0.isStringValueType());
      assertEquals(false, unknownType0.isEnumElementType());
      assertEquals(true, unknownType0.isUnknownType());
      assertEquals(false, unknownType0.isRecordType());
      assertEquals(false, unknownType0.isNullType());
      assertEquals(false, unknownType0.isNumberValueType());
      assertEquals(false, unknownType0.isConstructor());
      assertEquals(true, unknownType0.isCheckedUnknownType());
      assertEquals(false, unknownType0.hasCachedValues());
      assertEquals(false, unknownType0.isNoResolvedType());
      assertEquals(false, unknownType0.isResolved());
      assertEquals(false, unknownType0.isNoObjectType());
      assertEquals(true, unknownType0.hasDisplayName());
      assertEquals(false, unknownType0.hasReferenceName());
      assertEquals(2147483647, unknownType0.getPropertiesCount());
      assertEquals(false, unknownType0.isVoidType());
      assertEquals(false, unknownType0.isNominalType());
      assertEquals(false, unknownType0.isNativeObjectType());
      assertEquals("Unknown", unknownType0.getDisplayName());
      assertEquals(false, unknownType0.isFunctionType());
      assertEquals("??", unknownType0.getReferenceName());
      assertEquals(false, unknownType0.isInterface());
      assertEquals(false, unknownType0.isNominalConstructor());
      assertEquals(true, unknownType0.isNullable());
      assertEquals(false, unknownType0.isBooleanValueType());
      assertEquals(false, unknownType0.isFunctionPrototypeType());
      assertEquals(true, unknownType0.matchesStringContext());
      assertEquals(false, unknownType0.isUnionType());
      assertEquals(true, unknownType0.canBeCalled());
      assertEquals(true, unknownType0.matchesObjectContext());
      assertEquals(false, unknownType0.isAllType());
      assertEquals(false, unknownType0.isTemplateType());
      assertEquals(false, unknownType0.isOrdinaryFunction());
      assertEquals(BooleanLiteralSet.BOTH, unknownType0.getPossibleToBooleanOutcomes());
      assertEquals(true, unknownType0.matchesNumberContext());
      assertEquals(false, unknownType0.isNoType());
      assertTrue(boolean0 == boolean1);
      assertTrue(boolean1 == boolean0);
      
      UnionType unionType0 = new UnionType(jSTypeRegistry0, vector0);
      assertEquals(false, vector0.isEmpty());
      assertEquals("[??]", vector0.toString());
      assertEquals(1, vector0.size());
      assertEquals(10, vector0.capacity());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isEnumType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isConstructor());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isFunctionPrototypeType());
      assertEquals(false, unionType0.isInterface());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isEnumElementType());
      assertEquals(false, unionType0.isOrdinaryFunction());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isNominalType());
      assertEquals(false, unionType0.isNoResolvedType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isNominalConstructor());
      assertEquals(false, unionType0.isCheckedUnknownType());
      assertNotNull(unionType0);
      
      boolean boolean2 = unknownType0.differsFrom((JSType) unionType0);
      assertFalse(boolean2);
      assertEquals(false, vector0.isEmpty());
      assertEquals("[??]", vector0.toString());
      assertEquals(1, vector0.size());
      assertEquals(10, vector0.capacity());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isEnumType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isConstructor());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isFunctionPrototypeType());
      assertEquals(false, unionType0.isInterface());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isEnumElementType());
      assertEquals(false, unionType0.isOrdinaryFunction());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isNominalType());
      assertEquals(false, unionType0.isNoResolvedType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isNominalConstructor());
      assertEquals(false, unionType0.isCheckedUnknownType());
      assertEquals(false, unknownType0.isEnumType());
      assertEquals(false, unknownType0.isStringValueType());
      assertEquals(false, unknownType0.isEnumElementType());
      assertEquals(true, unknownType0.isUnknownType());
      assertEquals(false, unknownType0.isRecordType());
      assertEquals(false, unknownType0.isNullType());
      assertEquals(false, unknownType0.isNumberValueType());
      assertEquals(false, unknownType0.isConstructor());
      assertEquals(true, unknownType0.isCheckedUnknownType());
      assertEquals(false, unknownType0.hasCachedValues());
      assertEquals(false, unknownType0.isNoResolvedType());
      assertEquals(false, unknownType0.isResolved());
      assertEquals(false, unknownType0.isNoObjectType());
      assertEquals(true, unknownType0.hasDisplayName());
      assertEquals(false, unknownType0.hasReferenceName());
      assertEquals(2147483647, unknownType0.getPropertiesCount());
      assertEquals(false, unknownType0.isVoidType());
      assertEquals(false, unknownType0.isNominalType());
      assertEquals(false, unknownType0.isNativeObjectType());
      assertEquals("Unknown", unknownType0.getDisplayName());
      assertEquals(false, unknownType0.isFunctionType());
      assertEquals("??", unknownType0.getReferenceName());
      assertEquals(false, unknownType0.isInterface());
      assertEquals(false, unknownType0.isNominalConstructor());
      assertEquals(true, unknownType0.isNullable());
      assertEquals(false, unknownType0.isBooleanValueType());
      assertEquals(false, unknownType0.isFunctionPrototypeType());
      assertEquals(true, unknownType0.matchesStringContext());
      assertEquals(false, unknownType0.isUnionType());
      assertEquals(true, unknownType0.canBeCalled());
      assertEquals(true, unknownType0.matchesObjectContext());
      assertEquals(false, unknownType0.isAllType());
      assertEquals(false, unknownType0.isTemplateType());
      assertEquals(false, unknownType0.isOrdinaryFunction());
      assertEquals(BooleanLiteralSet.BOTH, unknownType0.getPossibleToBooleanOutcomes());
      assertEquals(true, unknownType0.matchesNumberContext());
      assertEquals(false, unknownType0.isNoType());
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean0 == boolean2);
      assertTrue(boolean0 == boolean1);
  }

  @Test
  public void test30()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = null;
      Vector<JSType> vector0 = new Vector<JSType>();
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertEquals("[]", vector0.toString());
      assertEquals(true, vector0.isEmpty());
      assertNotNull(vector0);
      
      NullType nullType0 = new NullType(jSTypeRegistry0);
      assertEquals(false, nullType0.isUnionType());
      assertEquals(false, nullType0.isRecordType());
      assertEquals(true, nullType0.matchesStringContext());
      assertEquals(false, nullType0.isBooleanValueType());
      assertEquals(false, nullType0.isEnumType());
      assertEquals(false, nullType0.isNoResolvedType());
      assertEquals(true, nullType0.matchesNumberContext());
      assertEquals(false, nullType0.isNominalType());
      assertEquals(false, nullType0.isNoType());
      assertEquals(false, nullType0.isTemplateType());
      assertEquals(false, nullType0.isNoObjectType());
      assertEquals(false, nullType0.isConstructor());
      assertEquals("null", nullType0.getDisplayName());
      assertEquals(BooleanLiteralSet.FALSE, nullType0.getPossibleToBooleanOutcomes());
      assertEquals(false, nullType0.isFunctionType());
      assertEquals(false, nullType0.isStringValueType());
      assertEquals(false, nullType0.isInterface());
      assertEquals(false, nullType0.isCheckedUnknownType());
      assertEquals(false, nullType0.isNumberValueType());
      assertEquals(false, nullType0.matchesObjectContext());
      assertEquals(false, nullType0.isFunctionPrototypeType());
      assertEquals(true, nullType0.isNullType());
      assertEquals(true, nullType0.isNullable());
      assertEquals(false, nullType0.isResolved());
      assertEquals(false, nullType0.isOrdinaryFunction());
      assertEquals(false, nullType0.isVoidType());
      assertEquals(false, nullType0.isEnumElementType());
      assertEquals(false, nullType0.isNominalConstructor());
      assertEquals(false, nullType0.isAllType());
      assertNotNull(nullType0);
      
      boolean boolean0 = vector0.add((JSType) nullType0);
      assertTrue(boolean0);
      assertEquals(10, vector0.capacity());
      assertEquals("[null]", vector0.toString());
      assertEquals(false, vector0.isEmpty());
      assertEquals(1, vector0.size());
      assertEquals(false, nullType0.isUnionType());
      assertEquals(false, nullType0.isRecordType());
      assertEquals(true, nullType0.matchesStringContext());
      assertEquals(false, nullType0.isBooleanValueType());
      assertEquals(false, nullType0.isEnumType());
      assertEquals(false, nullType0.isNoResolvedType());
      assertEquals(true, nullType0.matchesNumberContext());
      assertEquals(false, nullType0.isNominalType());
      assertEquals(false, nullType0.isNoType());
      assertEquals(false, nullType0.isTemplateType());
      assertEquals(false, nullType0.isNoObjectType());
      assertEquals(false, nullType0.isConstructor());
      assertEquals("null", nullType0.getDisplayName());
      assertEquals(BooleanLiteralSet.FALSE, nullType0.getPossibleToBooleanOutcomes());
      assertEquals(false, nullType0.isFunctionType());
      assertEquals(false, nullType0.isStringValueType());
      assertEquals(false, nullType0.isInterface());
      assertEquals(false, nullType0.isCheckedUnknownType());
      assertEquals(false, nullType0.isNumberValueType());
      assertEquals(false, nullType0.matchesObjectContext());
      assertEquals(false, nullType0.isFunctionPrototypeType());
      assertEquals(true, nullType0.isNullType());
      assertEquals(true, nullType0.isNullable());
      assertEquals(false, nullType0.isResolved());
      assertEquals(false, nullType0.isOrdinaryFunction());
      assertEquals(false, nullType0.isVoidType());
      assertEquals(false, nullType0.isEnumElementType());
      assertEquals(false, nullType0.isNominalConstructor());
      assertEquals(false, nullType0.isAllType());
      
      UnionType unionType0 = new UnionType(jSTypeRegistry0, vector0);
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isNoResolvedType());
      assertEquals(false, unionType0.isConstructor());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isNominalType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isCheckedUnknownType());
      assertEquals(false, unionType0.isFunctionPrototypeType());
      assertEquals(false, unionType0.isEnumElementType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isInterface());
      assertEquals(false, unionType0.isOrdinaryFunction());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isEnumType());
      assertEquals(false, unionType0.isNominalConstructor());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(10, vector0.capacity());
      assertEquals("[null]", vector0.toString());
      assertEquals(false, vector0.isEmpty());
      assertEquals(1, vector0.size());
      assertNotNull(unionType0);
      
      boolean boolean1 = unionType0.isNullable();
      assertTrue(boolean1);
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isNoResolvedType());
      assertEquals(false, unionType0.isConstructor());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isNominalType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isCheckedUnknownType());
      assertEquals(false, unionType0.isFunctionPrototypeType());
      assertEquals(false, unionType0.isEnumElementType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isInterface());
      assertEquals(false, unionType0.isOrdinaryFunction());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isEnumType());
      assertEquals(false, unionType0.isNominalConstructor());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(10, vector0.capacity());
      assertEquals("[null]", vector0.toString());
      assertEquals(false, vector0.isEmpty());
      assertEquals(1, vector0.size());
      assertTrue(boolean1 == boolean0);
  }

  @Test
  public void test31()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = null;
      Vector<JSType> vector0 = new Vector<JSType>();
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertEquals(true, vector0.isEmpty());
      assertNotNull(vector0);
      
      NumberType numberType0 = new NumberType(jSTypeRegistry0);
      assertEquals(false, numberType0.isRecordType());
      assertEquals(true, numberType0.matchesObjectContext());
      assertEquals("number", numberType0.getDisplayName());
      assertEquals(false, numberType0.isNoObjectType());
      assertEquals(false, numberType0.isNominalConstructor());
      assertEquals(false, numberType0.isEnumType());
      assertEquals(false, numberType0.isAllType());
      assertEquals(false, numberType0.isNoResolvedType());
      assertEquals(false, numberType0.isNoType());
      assertEquals(false, numberType0.isResolved());
      assertEquals(false, numberType0.isFunctionType());
      assertEquals(false, numberType0.isNullable());
      assertEquals(false, numberType0.isUnionType());
      assertEquals(false, numberType0.isEnumElementType());
      assertEquals(false, numberType0.isVoidType());
      assertEquals(true, numberType0.matchesNumberContext());
      assertEquals(true, numberType0.isNumberValueType());
      assertEquals(false, numberType0.isBooleanValueType());
      assertEquals(false, numberType0.isInterface());
      assertEquals(false, numberType0.isNullType());
      assertEquals(false, numberType0.isTemplateType());
      assertEquals(false, numberType0.isConstructor());
      assertEquals(false, numberType0.isCheckedUnknownType());
      assertEquals(BooleanLiteralSet.BOTH, numberType0.getPossibleToBooleanOutcomes());
      assertEquals(false, numberType0.isNominalType());
      assertEquals(false, numberType0.isStringValueType());
      assertEquals(true, numberType0.matchesStringContext());
      assertEquals(false, numberType0.isOrdinaryFunction());
      assertEquals(false, numberType0.isFunctionPrototypeType());
      assertNotNull(numberType0);
      
      vector0.addElement((JSType) numberType0);
      assertEquals(false, numberType0.isRecordType());
      assertEquals(true, numberType0.matchesObjectContext());
      assertEquals("number", numberType0.getDisplayName());
      assertEquals(false, numberType0.isNoObjectType());
      assertEquals(false, numberType0.isNominalConstructor());
      assertEquals(false, numberType0.isEnumType());
      assertEquals(false, numberType0.isAllType());
      assertEquals(false, numberType0.isNoResolvedType());
      assertEquals(false, numberType0.isNoType());
      assertEquals(false, numberType0.isResolved());
      assertEquals(false, numberType0.isFunctionType());
      assertEquals(false, numberType0.isNullable());
      assertEquals(false, numberType0.isUnionType());
      assertEquals(false, numberType0.isEnumElementType());
      assertEquals(false, numberType0.isVoidType());
      assertEquals(true, numberType0.matchesNumberContext());
      assertEquals(true, numberType0.isNumberValueType());
      assertEquals(false, numberType0.isBooleanValueType());
      assertEquals(false, numberType0.isInterface());
      assertEquals(false, numberType0.isNullType());
      assertEquals(false, numberType0.isTemplateType());
      assertEquals(false, numberType0.isConstructor());
      assertEquals(false, numberType0.isCheckedUnknownType());
      assertEquals(BooleanLiteralSet.BOTH, numberType0.getPossibleToBooleanOutcomes());
      assertEquals(false, numberType0.isNominalType());
      assertEquals(false, numberType0.isStringValueType());
      assertEquals(true, numberType0.matchesStringContext());
      assertEquals(false, numberType0.isOrdinaryFunction());
      assertEquals(false, numberType0.isFunctionPrototypeType());
      assertEquals(1, vector0.size());
      assertEquals("[number]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertEquals(false, vector0.isEmpty());
      
      UnionType unionType0 = new UnionType(jSTypeRegistry0, vector0);
      assertEquals(1, vector0.size());
      assertEquals("[number]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertEquals(false, vector0.isEmpty());
      assertEquals(false, unionType0.isFunctionPrototypeType());
      assertEquals(false, unionType0.isNominalConstructor());
      assertEquals(false, unionType0.isCheckedUnknownType());
      assertEquals(false, unionType0.isEnumType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isEnumElementType());
      assertEquals(false, unionType0.isNominalType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isNoResolvedType());
      assertEquals(false, unionType0.isConstructor());
      assertEquals(false, unionType0.isInterface());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isOrdinaryFunction());
      assertNotNull(unionType0);
      
      boolean boolean0 = unionType0.isNullable();
      assertFalse(boolean0);
      assertEquals(1, vector0.size());
      assertEquals("[number]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertEquals(false, vector0.isEmpty());
      assertEquals(false, unionType0.isFunctionPrototypeType());
      assertEquals(false, unionType0.isNominalConstructor());
      assertEquals(false, unionType0.isCheckedUnknownType());
      assertEquals(false, unionType0.isEnumType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isEnumElementType());
      assertEquals(false, unionType0.isNominalType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isNoResolvedType());
      assertEquals(false, unionType0.isConstructor());
      assertEquals(false, unionType0.isInterface());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isOrdinaryFunction());
  }

  @Test
  public void test32()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = null;
      Vector<JSType> vector0 = new Vector<JSType>();
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertEquals("[]", vector0.toString());
      assertEquals(true, vector0.isEmpty());
      assertNotNull(vector0);
      
      UnionType unionType0 = new UnionType(jSTypeRegistry0, vector0);
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertEquals("[]", vector0.toString());
      assertEquals(true, vector0.isEmpty());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isEnumType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isNoResolvedType());
      assertEquals(false, unionType0.isOrdinaryFunction());
      assertEquals(false, unionType0.isCheckedUnknownType());
      assertEquals(false, unionType0.isConstructor());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isEnumElementType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isNominalConstructor());
      assertEquals(false, unionType0.isFunctionPrototypeType());
      assertEquals(false, unionType0.isNominalType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isInterface());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isRecordType());
      assertNotNull(unionType0);
      
      HashSet<JSType> hashSet0 = new HashSet<JSType>();
      assertEquals(0, hashSet0.size());
      assertEquals(true, hashSet0.isEmpty());
      assertEquals("[]", hashSet0.toString());
      assertNotNull(hashSet0);
      
      UnionType unionType1 = new UnionType(jSTypeRegistry0, hashSet0);
      assertNotSame(unionType1, unionType0);
      assertEquals(false, unionType1.isStringValueType());
      assertEquals(false, unionType1.isEnumType());
      assertEquals(false, unionType1.isAllType());
      assertEquals(false, unionType1.isInterface());
      assertEquals(false, unionType1.isNoResolvedType());
      assertEquals(false, unionType1.isRecordType());
      assertEquals(false, unionType1.isEnumElementType());
      assertEquals(false, unionType1.isResolved());
      assertEquals(true, unionType1.isUnionType());
      assertEquals(false, unionType1.isBooleanValueType());
      assertEquals(false, unionType1.isNoObjectType());
      assertEquals(false, unionType1.isNumberValueType());
      assertEquals(false, unionType1.isNoType());
      assertEquals(false, unionType1.isFunctionPrototypeType());
      assertEquals(false, unionType1.isNullType());
      assertEquals(false, unionType1.isFunctionType());
      assertEquals(false, unionType1.isCheckedUnknownType());
      assertEquals(false, unionType1.isTemplateType());
      assertEquals(false, unionType1.isOrdinaryFunction());
      assertEquals(false, unionType1.isConstructor());
      assertEquals(false, unionType1.isNominalType());
      assertEquals(false, unionType1.isNominalConstructor());
      assertEquals(false, unionType1.isVoidType());
      assertEquals(0, hashSet0.size());
      assertEquals(true, hashSet0.isEmpty());
      assertEquals("[]", hashSet0.toString());
      assertTrue(unionType1.equals((Object)unionType0));
      assertNotNull(unionType1);
      
      boolean boolean0 = hashSet0.add((JSType) unionType0);
      assertTrue(boolean0);
      assertNotSame(unionType0, unionType1);
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertEquals("[]", vector0.toString());
      assertEquals(true, vector0.isEmpty());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isEnumType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isNoResolvedType());
      assertEquals(false, unionType0.isOrdinaryFunction());
      assertEquals(false, unionType0.isCheckedUnknownType());
      assertEquals(false, unionType0.isConstructor());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isEnumElementType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isNominalConstructor());
      assertEquals(false, unionType0.isFunctionPrototypeType());
      assertEquals(false, unionType0.isNominalType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isInterface());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals("[()]", hashSet0.toString());
      assertEquals(false, hashSet0.isEmpty());
      assertEquals(1, hashSet0.size());
      assertFalse(unionType0.equals((Object)unionType1));
      
      TernaryValue ternaryValue0 = unionType1.testForEquality((JSType) unionType0);
      assertNotSame(unionType1, unionType0);
      assertNotSame(unionType0, unionType1);
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertEquals("[]", vector0.toString());
      assertEquals(true, vector0.isEmpty());
      assertEquals(false, unionType1.isStringValueType());
      assertEquals(false, unionType1.isEnumType());
      assertEquals(false, unionType1.isAllType());
      assertEquals(false, unionType1.isInterface());
      assertEquals(false, unionType1.isNoResolvedType());
      assertEquals(false, unionType1.isRecordType());
      assertEquals(false, unionType1.isEnumElementType());
      assertEquals(false, unionType1.isResolved());
      assertEquals(true, unionType1.isUnionType());
      assertEquals(false, unionType1.isBooleanValueType());
      assertEquals(false, unionType1.isNoObjectType());
      assertEquals(false, unionType1.isNumberValueType());
      assertEquals(false, unionType1.isNoType());
      assertEquals(false, unionType1.isFunctionPrototypeType());
      assertEquals(false, unionType1.isNullType());
      assertEquals(false, unionType1.isFunctionType());
      assertEquals(false, unionType1.isCheckedUnknownType());
      assertEquals(false, unionType1.isTemplateType());
      assertEquals(false, unionType1.isOrdinaryFunction());
      assertEquals(false, unionType1.isConstructor());
      assertEquals(false, unionType1.isNominalType());
      assertEquals(false, unionType1.isNominalConstructor());
      assertEquals(false, unionType1.isVoidType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isEnumType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isNoResolvedType());
      assertEquals(false, unionType0.isOrdinaryFunction());
      assertEquals(false, unionType0.isCheckedUnknownType());
      assertEquals(false, unionType0.isConstructor());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isEnumElementType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isNominalConstructor());
      assertEquals(false, unionType0.isFunctionPrototypeType());
      assertEquals(false, unionType0.isNominalType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isInterface());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals("[()]", hashSet0.toString());
      assertEquals(false, hashSet0.isEmpty());
      assertEquals(1, hashSet0.size());
      assertFalse(unionType1.equals((Object)unionType0));
      assertFalse(unionType0.equals((Object)unionType1));
  }

  @Test
  public void test33()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = null;
      Vector<JSType> vector0 = new Vector<JSType>();
      assertEquals(0, vector0.size());
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertEquals(true, vector0.isEmpty());
      assertNotNull(vector0);
      
      UnionType unionType0 = new UnionType(jSTypeRegistry0, vector0);
      assertEquals(false, unionType0.isNominalConstructor());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isConstructor());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isEnumType());
      assertEquals(false, unionType0.isEnumElementType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isCheckedUnknownType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isInterface());
      assertEquals(false, unionType0.isAllType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isOrdinaryFunction());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isNoResolvedType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isNominalType());
      assertEquals(false, unionType0.isFunctionPrototypeType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(0, vector0.size());
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertEquals(true, vector0.isEmpty());
      assertNotNull(unionType0);
      
      HashSet<JSType> hashSet0 = new HashSet<JSType>();
      assertEquals(true, hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      assertEquals("[]", hashSet0.toString());
      assertNotNull(hashSet0);
      
      boolean boolean0 = hashSet0.add((JSType) unionType0);
      assertTrue(boolean0);
      assertEquals(false, unionType0.isNominalConstructor());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isConstructor());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isEnumType());
      assertEquals(false, unionType0.isEnumElementType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isCheckedUnknownType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isInterface());
      assertEquals(false, unionType0.isAllType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isOrdinaryFunction());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isNoResolvedType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isNominalType());
      assertEquals(false, unionType0.isFunctionPrototypeType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(0, vector0.size());
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertEquals(true, vector0.isEmpty());
      assertEquals("[()]", hashSet0.toString());
      assertEquals(1, hashSet0.size());
      assertEquals(false, hashSet0.isEmpty());
      
      UnionType unionType1 = new UnionType(jSTypeRegistry0, hashSet0);
      assertNotSame(unionType1, unionType0);
      assertEquals(false, unionType1.isTemplateType());
      assertEquals(false, unionType1.isNoType());
      assertEquals(false, unionType1.isEnumElementType());
      assertEquals(false, unionType1.isConstructor());
      assertEquals(false, unionType1.isNumberValueType());
      assertEquals(false, unionType1.isCheckedUnknownType());
      assertEquals(false, unionType1.isNominalType());
      assertEquals(false, unionType1.isStringValueType());
      assertEquals(true, unionType1.isUnionType());
      assertEquals(false, unionType1.isResolved());
      assertEquals(false, unionType1.isNullType());
      assertEquals(false, unionType1.isOrdinaryFunction());
      assertEquals(false, unionType1.isRecordType());
      assertEquals(false, unionType1.isInterface());
      assertEquals(false, unionType1.isNoObjectType());
      assertEquals(false, unionType1.isAllType());
      assertEquals(false, unionType1.isBooleanValueType());
      assertEquals(false, unionType1.isFunctionType());
      assertEquals(false, unionType1.isNoResolvedType());
      assertEquals(false, unionType1.isNominalConstructor());
      assertEquals(false, unionType1.isVoidType());
      assertEquals(false, unionType1.isFunctionPrototypeType());
      assertEquals(false, unionType1.isEnumType());
      assertEquals("[()]", hashSet0.toString());
      assertEquals(1, hashSet0.size());
      assertEquals(false, hashSet0.isEmpty());
      assertFalse(unionType1.equals((Object)unionType0));
      assertNotNull(unionType1);
      
      // Undeclared exception!
      try {
        JSType jSType0 = unionType1.restrictByNotNullOrUndefined();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test34()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = null;
      PriorityQueue<JSType> priorityQueue0 = new PriorityQueue<JSType>();
      assertEquals("[]", priorityQueue0.toString());
      assertEquals(0, priorityQueue0.size());
      assertNotNull(priorityQueue0);
      
      Vector<JSType> vector0 = new Vector<JSType>((Collection<? extends JSType>) priorityQueue0);
      assertEquals("[]", priorityQueue0.toString());
      assertEquals(0, priorityQueue0.size());
      assertEquals(0, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertEquals(0, vector0.size());
      assertEquals(true, vector0.isEmpty());
      assertNotNull(vector0);
      
      UnionType unionType0 = new UnionType(jSTypeRegistry0, vector0);
      assertEquals("[]", priorityQueue0.toString());
      assertEquals(0, priorityQueue0.size());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isEnumElementType());
      assertEquals(false, unionType0.isCheckedUnknownType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isInterface());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isNominalConstructor());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isOrdinaryFunction());
      assertEquals(false, unionType0.isEnumType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isNoResolvedType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isConstructor());
      assertEquals(false, unionType0.isNominalType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isFunctionPrototypeType());
      assertEquals(0, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertEquals(0, vector0.size());
      assertEquals(true, vector0.isEmpty());
      assertNotNull(unionType0);
      
      boolean boolean0 = vector0.add((JSType) unionType0);
      assertTrue(boolean0);
      assertEquals("[]", priorityQueue0.toString());
      assertEquals(0, priorityQueue0.size());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isEnumElementType());
      assertEquals(false, unionType0.isCheckedUnknownType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isInterface());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isNominalConstructor());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isOrdinaryFunction());
      assertEquals(false, unionType0.isEnumType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isNoResolvedType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isConstructor());
      assertEquals(false, unionType0.isNominalType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isFunctionPrototypeType());
      assertEquals(1, vector0.capacity());
      assertEquals(1, vector0.size());
      assertEquals(false, vector0.isEmpty());
      
      // Undeclared exception!
      try {
        JSType jSType0 = unionType0.autobox();
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test35()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = null;
      HashSet<JSType> hashSet0 = new HashSet<JSType>();
      assertEquals("[]", hashSet0.toString());
      assertEquals(0, hashSet0.size());
      assertEquals(true, hashSet0.isEmpty());
      assertNotNull(hashSet0);
      
      UnionType unionType0 = new UnionType(jSTypeRegistry0, hashSet0);
      assertEquals("[]", hashSet0.toString());
      assertEquals(0, hashSet0.size());
      assertEquals(true, hashSet0.isEmpty());
      assertEquals(false, unionType0.isCheckedUnknownType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isOrdinaryFunction());
      assertEquals(false, unionType0.isFunctionPrototypeType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isNominalConstructor());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isEnumElementType());
      assertEquals(false, unionType0.isInterface());
      assertEquals(false, unionType0.isNoResolvedType());
      assertEquals(false, unionType0.isConstructor());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isEnumType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isNominalType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isStringValueType());
      assertNotNull(unionType0);
      
      // Undeclared exception!
      try {
        JSType jSType0 = unionType0.autobox();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test36()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = null;
      Vector<JSType> vector0 = new Vector<JSType>();
      assertEquals(0, vector0.size());
      assertEquals("[]", vector0.toString());
      assertEquals(true, vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertNotNull(vector0);
      
      UnionType unionType0 = new UnionType(jSTypeRegistry0, vector0);
      assertEquals(false, unionType0.isCheckedUnknownType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isNoResolvedType());
      assertEquals(false, unionType0.isOrdinaryFunction());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isNominalConstructor());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isInterface());
      assertEquals(false, unionType0.isEnumType());
      assertEquals(false, unionType0.isEnumElementType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isFunctionPrototypeType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isNominalType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isConstructor());
      assertEquals(false, unionType0.isResolved());
      assertEquals(0, vector0.size());
      assertEquals("[]", vector0.toString());
      assertEquals(true, vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertNotNull(unionType0);
      
      HashSet<JSType> hashSet0 = new HashSet<JSType>();
      assertEquals(0, hashSet0.size());
      assertEquals("[]", hashSet0.toString());
      assertEquals(true, hashSet0.isEmpty());
      assertNotNull(hashSet0);
      
      boolean boolean0 = hashSet0.add((JSType) unionType0);
      assertTrue(boolean0);
      assertEquals("[()]", hashSet0.toString());
      assertEquals(1, hashSet0.size());
      assertEquals(false, hashSet0.isEmpty());
      assertEquals(false, unionType0.isCheckedUnknownType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isNoResolvedType());
      assertEquals(false, unionType0.isOrdinaryFunction());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isNominalConstructor());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isInterface());
      assertEquals(false, unionType0.isEnumType());
      assertEquals(false, unionType0.isEnumElementType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isFunctionPrototypeType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isNominalType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isConstructor());
      assertEquals(false, unionType0.isResolved());
      assertEquals(0, vector0.size());
      assertEquals("[]", vector0.toString());
      assertEquals(true, vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      
      UnionType unionType1 = new UnionType(jSTypeRegistry0, hashSet0);
      assertNotSame(unionType1, unionType0);
      assertEquals("[()]", hashSet0.toString());
      assertEquals(1, hashSet0.size());
      assertEquals(false, hashSet0.isEmpty());
      assertEquals(false, unionType1.isResolved());
      assertEquals(false, unionType1.isEnumElementType());
      assertEquals(false, unionType1.isEnumType());
      assertEquals(false, unionType1.isBooleanValueType());
      assertEquals(false, unionType1.isNullType());
      assertEquals(false, unionType1.isCheckedUnknownType());
      assertEquals(false, unionType1.isNoObjectType());
      assertEquals(false, unionType1.isTemplateType());
      assertEquals(false, unionType1.isConstructor());
      assertEquals(false, unionType1.isInterface());
      assertEquals(false, unionType1.isNominalConstructor());
      assertEquals(false, unionType1.isNoType());
      assertEquals(false, unionType1.isNominalType());
      assertEquals(false, unionType1.isAllType());
      assertEquals(false, unionType1.isNoResolvedType());
      assertEquals(false, unionType1.isOrdinaryFunction());
      assertEquals(false, unionType1.isRecordType());
      assertEquals(false, unionType1.isFunctionType());
      assertEquals(false, unionType1.isFunctionPrototypeType());
      assertEquals(false, unionType1.isVoidType());
      assertEquals(true, unionType1.isUnionType());
      assertEquals(false, unionType1.isStringValueType());
      assertEquals(false, unionType1.isNumberValueType());
      assertFalse(unionType1.equals((Object)unionType0));
      assertNotNull(unionType1);
      
      boolean boolean1 = unionType1.canBeCalled();
      assertTrue(boolean1);
      assertNotSame(unionType1, unionType0);
      assertEquals("[()]", hashSet0.toString());
      assertEquals(1, hashSet0.size());
      assertEquals(false, hashSet0.isEmpty());
      assertEquals(false, unionType1.isResolved());
      assertEquals(false, unionType1.isEnumElementType());
      assertEquals(false, unionType1.isEnumType());
      assertEquals(false, unionType1.isBooleanValueType());
      assertEquals(false, unionType1.isNullType());
      assertEquals(false, unionType1.isCheckedUnknownType());
      assertEquals(false, unionType1.isNoObjectType());
      assertEquals(false, unionType1.isTemplateType());
      assertEquals(false, unionType1.isConstructor());
      assertEquals(false, unionType1.isInterface());
      assertEquals(false, unionType1.isNominalConstructor());
      assertEquals(false, unionType1.isNoType());
      assertEquals(false, unionType1.isNominalType());
      assertEquals(false, unionType1.isAllType());
      assertEquals(false, unionType1.isNoResolvedType());
      assertEquals(false, unionType1.isOrdinaryFunction());
      assertEquals(false, unionType1.isRecordType());
      assertEquals(false, unionType1.isFunctionType());
      assertEquals(false, unionType1.isFunctionPrototypeType());
      assertEquals(false, unionType1.isVoidType());
      assertEquals(true, unionType1.isUnionType());
      assertEquals(false, unionType1.isStringValueType());
      assertEquals(false, unionType1.isNumberValueType());
      assertTrue(boolean1 == boolean0);
      assertFalse(unionType1.equals((Object)unionType0));
  }

  @Test
  public void test37()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = null;
      Vector<JSType> vector0 = new Vector<JSType>();
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertEquals(true, vector0.isEmpty());
      assertNotNull(vector0);
      
      NullType nullType0 = new NullType(jSTypeRegistry0);
      assertEquals(false, nullType0.isNoType());
      assertEquals(false, nullType0.isAllType());
      assertEquals(false, nullType0.isBooleanValueType());
      assertEquals(false, nullType0.isOrdinaryFunction());
      assertEquals(false, nullType0.isEnumElementType());
      assertEquals(false, nullType0.isUnionType());
      assertEquals(false, nullType0.isResolved());
      assertEquals(true, nullType0.matchesStringContext());
      assertEquals(false, nullType0.isFunctionType());
      assertEquals("null", nullType0.getDisplayName());
      assertEquals(false, nullType0.isStringValueType());
      assertEquals(false, nullType0.isNominalConstructor());
      assertEquals(false, nullType0.isTemplateType());
      assertEquals(false, nullType0.isNoObjectType());
      assertEquals(true, nullType0.isNullable());
      assertEquals(false, nullType0.isInterface());
      assertEquals(false, nullType0.isRecordType());
      assertEquals(false, nullType0.matchesObjectContext());
      assertEquals(false, nullType0.isNumberValueType());
      assertEquals(true, nullType0.matchesNumberContext());
      assertEquals(true, nullType0.isNullType());
      assertEquals(false, nullType0.isNominalType());
      assertEquals(false, nullType0.isFunctionPrototypeType());
      assertEquals(false, nullType0.isEnumType());
      assertEquals(false, nullType0.isConstructor());
      assertEquals(false, nullType0.isVoidType());
      assertEquals(false, nullType0.isCheckedUnknownType());
      assertEquals(false, nullType0.isNoResolvedType());
      assertEquals(BooleanLiteralSet.FALSE, nullType0.getPossibleToBooleanOutcomes());
      assertNotNull(nullType0);
      
      boolean boolean0 = vector0.add((JSType) nullType0);
      assertTrue(boolean0);
      assertEquals(false, nullType0.isNoType());
      assertEquals(false, nullType0.isAllType());
      assertEquals(false, nullType0.isBooleanValueType());
      assertEquals(false, nullType0.isOrdinaryFunction());
      assertEquals(false, nullType0.isEnumElementType());
      assertEquals(false, nullType0.isUnionType());
      assertEquals(false, nullType0.isResolved());
      assertEquals(true, nullType0.matchesStringContext());
      assertEquals(false, nullType0.isFunctionType());
      assertEquals("null", nullType0.getDisplayName());
      assertEquals(false, nullType0.isStringValueType());
      assertEquals(false, nullType0.isNominalConstructor());
      assertEquals(false, nullType0.isTemplateType());
      assertEquals(false, nullType0.isNoObjectType());
      assertEquals(true, nullType0.isNullable());
      assertEquals(false, nullType0.isInterface());
      assertEquals(false, nullType0.isRecordType());
      assertEquals(false, nullType0.matchesObjectContext());
      assertEquals(false, nullType0.isNumberValueType());
      assertEquals(true, nullType0.matchesNumberContext());
      assertEquals(true, nullType0.isNullType());
      assertEquals(false, nullType0.isNominalType());
      assertEquals(false, nullType0.isFunctionPrototypeType());
      assertEquals(false, nullType0.isEnumType());
      assertEquals(false, nullType0.isConstructor());
      assertEquals(false, nullType0.isVoidType());
      assertEquals(false, nullType0.isCheckedUnknownType());
      assertEquals(false, nullType0.isNoResolvedType());
      assertEquals(BooleanLiteralSet.FALSE, nullType0.getPossibleToBooleanOutcomes());
      assertEquals(1, vector0.size());
      assertEquals(false, vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertEquals("[null]", vector0.toString());
      
      UnionType unionType0 = new UnionType(jSTypeRegistry0, vector0);
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isNominalType());
      assertEquals(false, unionType0.isNoResolvedType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isEnumType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isConstructor());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isNominalConstructor());
      assertEquals(false, unionType0.isOrdinaryFunction());
      assertEquals(false, unionType0.isEnumElementType());
      assertEquals(false, unionType0.isCheckedUnknownType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isInterface());
      assertEquals(false, unionType0.isFunctionPrototypeType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(1, vector0.size());
      assertEquals(false, vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertEquals("[null]", vector0.toString());
      assertNotNull(unionType0);
      
      boolean boolean1 = unionType0.canBeCalled();
      assertFalse(boolean1);
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isNominalType());
      assertEquals(false, unionType0.isNoResolvedType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isEnumType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isConstructor());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isNominalConstructor());
      assertEquals(false, unionType0.isOrdinaryFunction());
      assertEquals(false, unionType0.isEnumElementType());
      assertEquals(false, unionType0.isCheckedUnknownType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isInterface());
      assertEquals(false, unionType0.isFunctionPrototypeType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(1, vector0.size());
      assertEquals(false, vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertEquals("[null]", vector0.toString());
      assertFalse(boolean1 == boolean0);
  }

  @Test
  public void test38()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = null;
      Vector<JSType> vector0 = new Vector<JSType>();
      assertEquals(true, vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertEquals(0, vector0.size());
      assertNotNull(vector0);
      
      UnionType unionType0 = new UnionType(jSTypeRegistry0, vector0);
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isConstructor());
      assertEquals(false, unionType0.isEnumElementType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isEnumType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isOrdinaryFunction());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isNominalType());
      assertEquals(false, unionType0.isInterface());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isFunctionPrototypeType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isNominalConstructor());
      assertEquals(false, unionType0.isCheckedUnknownType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isNoResolvedType());
      assertEquals(true, vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertEquals(0, vector0.size());
      assertNotNull(unionType0);
      
      HashSet<JSType> hashSet0 = new HashSet<JSType>();
      assertEquals(0, hashSet0.size());
      assertEquals(true, hashSet0.isEmpty());
      assertEquals("[]", hashSet0.toString());
      assertNotNull(hashSet0);
      
      UnionType unionType1 = new UnionType(jSTypeRegistry0, hashSet0);
      assertNotSame(unionType1, unionType0);
      assertEquals(0, hashSet0.size());
      assertEquals(true, hashSet0.isEmpty());
      assertEquals("[]", hashSet0.toString());
      assertEquals(false, unionType1.isInterface());
      assertEquals(false, unionType1.isNoObjectType());
      assertEquals(false, unionType1.isNominalConstructor());
      assertEquals(false, unionType1.isResolved());
      assertEquals(false, unionType1.isEnumType());
      assertEquals(false, unionType1.isNoType());
      assertEquals(false, unionType1.isNullType());
      assertEquals(false, unionType1.isNoResolvedType());
      assertEquals(false, unionType1.isRecordType());
      assertEquals(false, unionType1.isEnumElementType());
      assertEquals(false, unionType1.isVoidType());
      assertEquals(false, unionType1.isNominalType());
      assertEquals(false, unionType1.isTemplateType());
      assertEquals(false, unionType1.isNumberValueType());
      assertEquals(false, unionType1.isCheckedUnknownType());
      assertEquals(false, unionType1.isBooleanValueType());
      assertEquals(false, unionType1.isFunctionPrototypeType());
      assertEquals(false, unionType1.isConstructor());
      assertEquals(false, unionType1.isAllType());
      assertEquals(true, unionType1.isUnionType());
      assertEquals(false, unionType1.isFunctionType());
      assertEquals(false, unionType1.isStringValueType());
      assertEquals(false, unionType1.isOrdinaryFunction());
      assertTrue(unionType1.equals((Object)unionType0));
      assertNotNull(unionType1);
      
      boolean boolean0 = hashSet0.add((JSType) unionType0);
      assertTrue(boolean0);
      assertNotSame(unionType0, unionType1);
      assertEquals(1, hashSet0.size());
      assertEquals("[()]", hashSet0.toString());
      assertEquals(false, hashSet0.isEmpty());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isConstructor());
      assertEquals(false, unionType0.isEnumElementType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isEnumType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isOrdinaryFunction());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isNominalType());
      assertEquals(false, unionType0.isInterface());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isFunctionPrototypeType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isNominalConstructor());
      assertEquals(false, unionType0.isCheckedUnknownType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isNoResolvedType());
      assertEquals(true, vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertEquals(0, vector0.size());
      assertFalse(unionType0.equals((Object)unionType1));
      
      boolean boolean1 = unionType1.canAssignTo((JSType) unionType0);
      assertTrue(boolean1);
      assertNotSame(unionType0, unionType1);
      assertNotSame(unionType1, unionType0);
      assertEquals(1, hashSet0.size());
      assertEquals("[()]", hashSet0.toString());
      assertEquals(false, hashSet0.isEmpty());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isConstructor());
      assertEquals(false, unionType0.isEnumElementType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isEnumType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isOrdinaryFunction());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isNominalType());
      assertEquals(false, unionType0.isInterface());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isFunctionPrototypeType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isNominalConstructor());
      assertEquals(false, unionType0.isCheckedUnknownType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isNoResolvedType());
      assertEquals(true, vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertEquals(0, vector0.size());
      assertEquals(false, unionType1.isInterface());
      assertEquals(false, unionType1.isNoObjectType());
      assertEquals(false, unionType1.isNominalConstructor());
      assertEquals(false, unionType1.isResolved());
      assertEquals(false, unionType1.isEnumType());
      assertEquals(false, unionType1.isNoType());
      assertEquals(false, unionType1.isNullType());
      assertEquals(false, unionType1.isNoResolvedType());
      assertEquals(false, unionType1.isRecordType());
      assertEquals(false, unionType1.isEnumElementType());
      assertEquals(false, unionType1.isVoidType());
      assertEquals(false, unionType1.isNominalType());
      assertEquals(false, unionType1.isTemplateType());
      assertEquals(false, unionType1.isNumberValueType());
      assertEquals(false, unionType1.isCheckedUnknownType());
      assertEquals(false, unionType1.isBooleanValueType());
      assertEquals(false, unionType1.isFunctionPrototypeType());
      assertEquals(false, unionType1.isConstructor());
      assertEquals(false, unionType1.isAllType());
      assertEquals(true, unionType1.isUnionType());
      assertEquals(false, unionType1.isFunctionType());
      assertEquals(false, unionType1.isStringValueType());
      assertEquals(false, unionType1.isOrdinaryFunction());
      assertFalse(unionType0.equals((Object)unionType1));
      assertTrue(boolean1 == boolean0);
      assertFalse(unionType1.equals((Object)unionType0));
  }

  @Test
  public void test39()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = null;
      Vector<JSType> vector0 = new Vector<JSType>();
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertEquals(true, vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertNotNull(vector0);
      
      UnionType unionType0 = new UnionType(jSTypeRegistry0, vector0);
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertEquals(true, vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isEnumType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isNominalType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isNominalConstructor());
      assertEquals(false, unionType0.isFunctionPrototypeType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isEnumElementType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isCheckedUnknownType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isOrdinaryFunction());
      assertEquals(false, unionType0.isConstructor());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isNoResolvedType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isInterface());
      assertNotNull(unionType0);
      
      boolean boolean0 = unionType0.isObject();
      assertTrue(boolean0);
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertEquals(true, vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isEnumType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isNominalType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isNominalConstructor());
      assertEquals(false, unionType0.isFunctionPrototypeType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isEnumElementType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isCheckedUnknownType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isOrdinaryFunction());
      assertEquals(false, unionType0.isConstructor());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isNoResolvedType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isInterface());
      
      ErrorReporter errorReporter0 = null;
      JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry(errorReporter0);
      assertEquals(false, jSTypeRegistry1.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry1);
      
      NoObjectType noObjectType0 = new NoObjectType(jSTypeRegistry1);
      assertEquals(true, noObjectType0.isConstructor());
      assertEquals(false, noObjectType0.isNumberValueType());
      assertEquals(false, noObjectType0.isNominalType());
      assertEquals(true, noObjectType0.matchesObjectContext());
      assertEquals(false, noObjectType0.isFunctionType());
      assertEquals(false, noObjectType0.isEnumType());
      assertEquals(BooleanLiteralSet.TRUE, noObjectType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noObjectType0.isAllType());
      assertEquals(true, noObjectType0.hasInstanceType());
      assertEquals(false, noObjectType0.isRecordType());
      assertEquals(false, noObjectType0.isNoType());
      assertEquals(2147483647, noObjectType0.getPropertiesCount());
      assertEquals(false, noObjectType0.isCheckedUnknownType());
      assertNull(noObjectType0.getTemplateTypeName());
      assertEquals(true, noObjectType0.canBeCalled());
      assertEquals(false, noObjectType0.isUnionType());
      assertEquals(true, noObjectType0.matchesStringContext());
      assertEquals(false, noObjectType0.isNoResolvedType());
      assertEquals(false, noObjectType0.isNominalConstructor());
      assertEquals(2147483647, noObjectType0.getMaxArguments());
      assertEquals(true, noObjectType0.matchesNumberContext());
      assertEquals(false, noObjectType0.isStringValueType());
      assertEquals(0, noObjectType0.getExtendedInterfacesCount());
      assertEquals(false, noObjectType0.isBooleanValueType());
      assertEquals(false, noObjectType0.isTemplateType());
      assertNull(noObjectType0.getReferenceName());
      assertEquals(true, noObjectType0.isNoObjectType());
      assertEquals(false, noObjectType0.isResolved());
      assertEquals(false, noObjectType0.isFunctionPrototypeType());
      assertEquals(false, noObjectType0.isVoidType());
      assertEquals(false, noObjectType0.isReturnTypeInferred());
      assertEquals(false, noObjectType0.isEnumElementType());
      assertEquals(false, noObjectType0.hasCachedValues());
      assertEquals(false, noObjectType0.isInterface());
      assertEquals(false, noObjectType0.isOrdinaryFunction());
      assertEquals(false, noObjectType0.isNullType());
      assertEquals(false, jSTypeRegistry1.shouldTolerateUndefinedValues());
      assertNotNull(noObjectType0);
      
      boolean boolean1 = vector0.add((JSType) noObjectType0);
      assertTrue(boolean1);
      assertEquals(false, vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertEquals("[NoObject]", vector0.toString());
      assertEquals(1, vector0.size());
      assertEquals(true, noObjectType0.isConstructor());
      assertEquals(false, noObjectType0.isNumberValueType());
      assertEquals(false, noObjectType0.isNominalType());
      assertEquals(true, noObjectType0.matchesObjectContext());
      assertEquals(false, noObjectType0.isFunctionType());
      assertEquals(false, noObjectType0.isEnumType());
      assertEquals(BooleanLiteralSet.TRUE, noObjectType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noObjectType0.isAllType());
      assertEquals(true, noObjectType0.hasInstanceType());
      assertEquals(false, noObjectType0.isRecordType());
      assertEquals(false, noObjectType0.isNoType());
      assertEquals(2147483647, noObjectType0.getPropertiesCount());
      assertEquals(false, noObjectType0.isCheckedUnknownType());
      assertNull(noObjectType0.getTemplateTypeName());
      assertEquals(true, noObjectType0.canBeCalled());
      assertEquals(false, noObjectType0.isUnionType());
      assertEquals(true, noObjectType0.matchesStringContext());
      assertEquals(false, noObjectType0.isNoResolvedType());
      assertEquals(false, noObjectType0.isNominalConstructor());
      assertEquals(2147483647, noObjectType0.getMaxArguments());
      assertEquals(true, noObjectType0.matchesNumberContext());
      assertEquals(false, noObjectType0.isStringValueType());
      assertEquals(0, noObjectType0.getExtendedInterfacesCount());
      assertEquals(false, noObjectType0.isBooleanValueType());
      assertEquals(false, noObjectType0.isTemplateType());
      assertNull(noObjectType0.getReferenceName());
      assertEquals(true, noObjectType0.isNoObjectType());
      assertEquals(false, noObjectType0.isResolved());
      assertEquals(false, noObjectType0.isFunctionPrototypeType());
      assertEquals(false, noObjectType0.isVoidType());
      assertEquals(false, noObjectType0.isReturnTypeInferred());
      assertEquals(false, noObjectType0.isEnumElementType());
      assertEquals(false, noObjectType0.hasCachedValues());
      assertEquals(false, noObjectType0.isInterface());
      assertEquals(false, noObjectType0.isOrdinaryFunction());
      assertEquals(false, noObjectType0.isNullType());
      assertEquals(false, jSTypeRegistry1.shouldTolerateUndefinedValues());
      assertTrue(boolean1 == boolean0);
      
      String string0 = unionType0.toStringHelper(boolean0);
      assertEquals("(?)", string0);
      assertEquals(false, vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertEquals("[NoObject]", vector0.toString());
      assertEquals(1, vector0.size());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isEnumType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isNominalType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isNominalConstructor());
      assertEquals(false, unionType0.isFunctionPrototypeType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isEnumElementType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isCheckedUnknownType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isOrdinaryFunction());
      assertEquals(false, unionType0.isConstructor());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isNoResolvedType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isInterface());
      assertTrue(boolean0 == boolean1);
      assertNotNull(string0);
      
      NoType noType0 = (NoType)unionType0.findPropertyType(string0);
      assertEquals(false, vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertEquals("[NoObject]", vector0.toString());
      assertEquals(1, vector0.size());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isEnumType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isNominalType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isNominalConstructor());
      assertEquals(false, unionType0.isFunctionPrototypeType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isEnumElementType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isCheckedUnknownType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isOrdinaryFunction());
      assertEquals(false, unionType0.isConstructor());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isNoResolvedType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isInterface());
      assertEquals(true, noType0.isConstructor());
      assertEquals(2147483647, noType0.getMaxArguments());
      assertEquals(false, noType0.isFunctionPrototypeType());
      assertEquals(true, noType0.hasInstanceType());
      assertEquals(false, noType0.isAllType());
      assertEquals(false, noType0.isReturnTypeInferred());
      assertEquals(2147483647, noType0.getPropertiesCount());
      assertEquals(false, noType0.isInterface());
      assertEquals(false, noType0.isRecordType());
      assertNull(noType0.getTemplateTypeName());
      assertEquals(true, noType0.canBeCalled());
      assertEquals(false, noType0.isBooleanValueType());
      assertEquals(false, noType0.isNullType());
      assertEquals(false, noType0.isNominalType());
      assertEquals(false, noType0.isCheckedUnknownType());
      assertEquals(false, noType0.isUnionType());
      assertEquals(false, noType0.isOrdinaryFunction());
      assertEquals(true, noType0.matchesObjectContext());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noType0.isVoidType());
      assertEquals(false, noType0.isNumberValueType());
      assertEquals(true, noType0.isNullable());
      assertEquals(false, noType0.isNoResolvedType());
      assertEquals(false, noType0.isEnumType());
      assertEquals(false, noType0.isNominalConstructor());
      assertEquals(false, noType0.isTemplateType());
      assertEquals(true, noType0.matchesNumberContext());
      assertEquals(false, noType0.isFunctionType());
      assertEquals(false, noType0.isNoObjectType());
      assertEquals(false, noType0.isStringValueType());
      assertEquals(false, noType0.isEnumElementType());
      assertEquals(true, noType0.matchesStringContext());
      assertEquals(false, noType0.isResolved());
      assertEquals(0, noType0.getExtendedInterfacesCount());
      assertEquals(true, noType0.isNoType());
      assertEquals(false, noType0.hasCachedValues());
      assertNull(noType0.getReferenceName());
      assertTrue(boolean0 == boolean1);
      assertNotNull(noType0);
  }

  @Test
  public void test40()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = null;
      Vector<JSType> vector0 = new Vector<JSType>();
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertEquals(true, vector0.isEmpty());
      assertEquals(0, vector0.size());
      assertNotNull(vector0);
      
      UnionType unionType0 = new UnionType(jSTypeRegistry0, vector0);
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertEquals(true, vector0.isEmpty());
      assertEquals(0, vector0.size());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isEnumType());
      assertEquals(false, unionType0.isInterface());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isOrdinaryFunction());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isNominalType());
      assertEquals(false, unionType0.isEnumElementType());
      assertEquals(false, unionType0.isFunctionPrototypeType());
      assertEquals(false, unionType0.isConstructor());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isNoResolvedType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isNominalConstructor());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isCheckedUnknownType());
      assertEquals(false, unionType0.isRecordType());
      assertNotNull(unionType0);
      
      HashSet<JSType> hashSet0 = new HashSet<JSType>();
      assertEquals(true, hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      assertEquals("[]", hashSet0.toString());
      assertNotNull(hashSet0);
      
      UnionType unionType1 = new UnionType(jSTypeRegistry0, hashSet0);
      assertNotSame(unionType1, unionType0);
      assertEquals(false, unionType1.isNominalConstructor());
      assertEquals(false, unionType1.isStringValueType());
      assertEquals(false, unionType1.isFunctionType());
      assertEquals(false, unionType1.isEnumElementType());
      assertEquals(false, unionType1.isVoidType());
      assertEquals(false, unionType1.isNoType());
      assertEquals(false, unionType1.isNumberValueType());
      assertEquals(false, unionType1.isNullType());
      assertEquals(false, unionType1.isInterface());
      assertEquals(false, unionType1.isResolved());
      assertEquals(false, unionType1.isBooleanValueType());
      assertEquals(false, unionType1.isAllType());
      assertEquals(false, unionType1.isCheckedUnknownType());
      assertEquals(false, unionType1.isTemplateType());
      assertEquals(true, unionType1.isUnionType());
      assertEquals(false, unionType1.isOrdinaryFunction());
      assertEquals(false, unionType1.isFunctionPrototypeType());
      assertEquals(false, unionType1.isNoObjectType());
      assertEquals(false, unionType1.isNoResolvedType());
      assertEquals(false, unionType1.isNominalType());
      assertEquals(false, unionType1.isRecordType());
      assertEquals(false, unionType1.isConstructor());
      assertEquals(false, unionType1.isEnumType());
      assertEquals(true, hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      assertEquals("[]", hashSet0.toString());
      assertTrue(unionType1.equals((Object)unionType0));
      assertNotNull(unionType1);
      
      boolean boolean0 = hashSet0.add((JSType) unionType0);
      assertTrue(boolean0);
      assertNotSame(unionType0, unionType1);
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertEquals(true, vector0.isEmpty());
      assertEquals(0, vector0.size());
      assertEquals(false, hashSet0.isEmpty());
      assertEquals(1, hashSet0.size());
      assertEquals("[()]", hashSet0.toString());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isEnumType());
      assertEquals(false, unionType0.isInterface());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isOrdinaryFunction());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isNominalType());
      assertEquals(false, unionType0.isEnumElementType());
      assertEquals(false, unionType0.isFunctionPrototypeType());
      assertEquals(false, unionType0.isConstructor());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isNoResolvedType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isNominalConstructor());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isCheckedUnknownType());
      assertEquals(false, unionType0.isRecordType());
      assertFalse(unionType0.equals((Object)unionType1));
      
      String string0 = "";
      JSType jSType0 = unionType1.findPropertyType(string0);
      assertNotSame(unionType1, unionType0);
      assertEquals(false, unionType1.isNominalConstructor());
      assertEquals(false, unionType1.isStringValueType());
      assertEquals(false, unionType1.isFunctionType());
      assertEquals(false, unionType1.isEnumElementType());
      assertEquals(false, unionType1.isVoidType());
      assertEquals(false, unionType1.isNoType());
      assertEquals(false, unionType1.isNumberValueType());
      assertEquals(false, unionType1.isNullType());
      assertEquals(false, unionType1.isInterface());
      assertEquals(false, unionType1.isResolved());
      assertEquals(false, unionType1.isBooleanValueType());
      assertEquals(false, unionType1.isAllType());
      assertEquals(false, unionType1.isCheckedUnknownType());
      assertEquals(false, unionType1.isTemplateType());
      assertEquals(true, unionType1.isUnionType());
      assertEquals(false, unionType1.isOrdinaryFunction());
      assertEquals(false, unionType1.isFunctionPrototypeType());
      assertEquals(false, unionType1.isNoObjectType());
      assertEquals(false, unionType1.isNoResolvedType());
      assertEquals(false, unionType1.isNominalType());
      assertEquals(false, unionType1.isRecordType());
      assertEquals(false, unionType1.isConstructor());
      assertEquals(false, unionType1.isEnumType());
      assertEquals(false, hashSet0.isEmpty());
      assertEquals(1, hashSet0.size());
      assertEquals("[()]", hashSet0.toString());
      assertFalse(unionType1.equals((Object)unionType0));
      assertNull(jSType0);
  }

  @Test
  public void test41()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = null;
      Vector<JSType> vector0 = new Vector<JSType>();
      assertEquals(true, vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertEquals(0, vector0.size());
      assertNotNull(vector0);
      
      UnionType unionType0 = new UnionType(jSTypeRegistry0, vector0);
      assertEquals(false, unionType0.isNominalConstructor());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isCheckedUnknownType());
      assertEquals(false, unionType0.isOrdinaryFunction());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isEnumElementType());
      assertEquals(false, unionType0.isInterface());
      assertEquals(false, unionType0.isFunctionPrototypeType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isNoResolvedType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isConstructor());
      assertEquals(false, unionType0.isEnumType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isNominalType());
      assertEquals(true, vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertEquals(0, vector0.size());
      assertNotNull(unionType0);
      
      HashSet<JSType> hashSet0 = new HashSet<JSType>();
      assertEquals("[]", hashSet0.toString());
      assertEquals(true, hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      assertNotNull(hashSet0);
      
      UnionType unionType1 = new UnionType(jSTypeRegistry0, hashSet0);
      assertNotSame(unionType1, unionType0);
      assertEquals(false, unionType1.isOrdinaryFunction());
      assertEquals(false, unionType1.isConstructor());
      assertEquals(false, unionType1.isNominalType());
      assertEquals(false, unionType1.isRecordType());
      assertEquals(false, unionType1.isInterface());
      assertEquals(false, unionType1.isNullType());
      assertEquals(false, unionType1.isEnumType());
      assertEquals(false, unionType1.isFunctionType());
      assertEquals(true, unionType1.isUnionType());
      assertEquals(false, unionType1.isAllType());
      assertEquals(false, unionType1.isNominalConstructor());
      assertEquals(false, unionType1.isNumberValueType());
      assertEquals(false, unionType1.isNoResolvedType());
      assertEquals(false, unionType1.isNoObjectType());
      assertEquals(false, unionType1.isStringValueType());
      assertEquals(false, unionType1.isTemplateType());
      assertEquals(false, unionType1.isNoType());
      assertEquals(false, unionType1.isVoidType());
      assertEquals(false, unionType1.isCheckedUnknownType());
      assertEquals(false, unionType1.isEnumElementType());
      assertEquals(false, unionType1.isResolved());
      assertEquals(false, unionType1.isBooleanValueType());
      assertEquals(false, unionType1.isFunctionPrototypeType());
      assertEquals("[]", hashSet0.toString());
      assertEquals(true, hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      assertTrue(unionType1.equals((Object)unionType0));
      assertNotNull(unionType1);
      
      boolean boolean0 = hashSet0.add((JSType) unionType0);
      assertTrue(boolean0);
      assertNotSame(unionType0, unionType1);
      assertEquals(false, unionType0.isNominalConstructor());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isCheckedUnknownType());
      assertEquals(false, unionType0.isOrdinaryFunction());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isEnumElementType());
      assertEquals(false, unionType0.isInterface());
      assertEquals(false, unionType0.isFunctionPrototypeType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isNoResolvedType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isConstructor());
      assertEquals(false, unionType0.isEnumType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isNominalType());
      assertEquals(true, vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertEquals(0, vector0.size());
      assertEquals(false, hashSet0.isEmpty());
      assertEquals("[()]", hashSet0.toString());
      assertEquals(1, hashSet0.size());
      assertFalse(unionType0.equals((Object)unionType1));
      
      boolean boolean1 = unionType1.matchesObjectContext();
      assertFalse(boolean1);
      assertNotSame(unionType1, unionType0);
      assertEquals(false, unionType1.isOrdinaryFunction());
      assertEquals(false, unionType1.isConstructor());
      assertEquals(false, unionType1.isNominalType());
      assertEquals(false, unionType1.isRecordType());
      assertEquals(false, unionType1.isInterface());
      assertEquals(false, unionType1.isNullType());
      assertEquals(false, unionType1.isEnumType());
      assertEquals(false, unionType1.isFunctionType());
      assertEquals(true, unionType1.isUnionType());
      assertEquals(false, unionType1.isAllType());
      assertEquals(false, unionType1.isNominalConstructor());
      assertEquals(false, unionType1.isNumberValueType());
      assertEquals(false, unionType1.isNoResolvedType());
      assertEquals(false, unionType1.isNoObjectType());
      assertEquals(false, unionType1.isStringValueType());
      assertEquals(false, unionType1.isTemplateType());
      assertEquals(false, unionType1.isNoType());
      assertEquals(false, unionType1.isVoidType());
      assertEquals(false, unionType1.isCheckedUnknownType());
      assertEquals(false, unionType1.isEnumElementType());
      assertEquals(false, unionType1.isResolved());
      assertEquals(false, unionType1.isBooleanValueType());
      assertEquals(false, unionType1.isFunctionPrototypeType());
      assertEquals(false, hashSet0.isEmpty());
      assertEquals("[()]", hashSet0.toString());
      assertEquals(1, hashSet0.size());
      assertFalse(unionType1.equals((Object)unionType0));
      assertFalse(boolean1 == boolean0);
  }

  @Test
  public void test42()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = null;
      Vector<JSType> vector0 = new Vector<JSType>();
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertEquals(true, vector0.isEmpty());
      assertEquals(0, vector0.size());
      assertNotNull(vector0);
      
      NumberType numberType0 = new NumberType(jSTypeRegistry0);
      assertEquals(false, numberType0.isConstructor());
      assertEquals(true, numberType0.isNumberValueType());
      assertEquals(false, numberType0.isNominalConstructor());
      assertEquals(false, numberType0.isRecordType());
      assertEquals(false, numberType0.isResolved());
      assertEquals(false, numberType0.isEnumType());
      assertEquals(true, numberType0.matchesObjectContext());
      assertEquals(false, numberType0.isNullType());
      assertEquals(true, numberType0.matchesStringContext());
      assertEquals(false, numberType0.isBooleanValueType());
      assertEquals(false, numberType0.isNullable());
      assertEquals(false, numberType0.isTemplateType());
      assertEquals(false, numberType0.isFunctionType());
      assertEquals(false, numberType0.isOrdinaryFunction());
      assertEquals(true, numberType0.matchesNumberContext());
      assertEquals(false, numberType0.isVoidType());
      assertEquals("number", numberType0.getDisplayName());
      assertEquals(BooleanLiteralSet.BOTH, numberType0.getPossibleToBooleanOutcomes());
      assertEquals(false, numberType0.isAllType());
      assertEquals(false, numberType0.isNominalType());
      assertEquals(false, numberType0.isNoResolvedType());
      assertEquals(false, numberType0.isFunctionPrototypeType());
      assertEquals(false, numberType0.isInterface());
      assertEquals(false, numberType0.isEnumElementType());
      assertEquals(false, numberType0.isCheckedUnknownType());
      assertEquals(false, numberType0.isNoType());
      assertEquals(false, numberType0.isUnionType());
      assertEquals(false, numberType0.isStringValueType());
      assertEquals(false, numberType0.isNoObjectType());
      assertNotNull(numberType0);
      
      vector0.addElement((JSType) numberType0);
      assertEquals(false, numberType0.isConstructor());
      assertEquals(true, numberType0.isNumberValueType());
      assertEquals(false, numberType0.isNominalConstructor());
      assertEquals(false, numberType0.isRecordType());
      assertEquals(false, numberType0.isResolved());
      assertEquals(false, numberType0.isEnumType());
      assertEquals(true, numberType0.matchesObjectContext());
      assertEquals(false, numberType0.isNullType());
      assertEquals(true, numberType0.matchesStringContext());
      assertEquals(false, numberType0.isBooleanValueType());
      assertEquals(false, numberType0.isNullable());
      assertEquals(false, numberType0.isTemplateType());
      assertEquals(false, numberType0.isFunctionType());
      assertEquals(false, numberType0.isOrdinaryFunction());
      assertEquals(true, numberType0.matchesNumberContext());
      assertEquals(false, numberType0.isVoidType());
      assertEquals("number", numberType0.getDisplayName());
      assertEquals(BooleanLiteralSet.BOTH, numberType0.getPossibleToBooleanOutcomes());
      assertEquals(false, numberType0.isAllType());
      assertEquals(false, numberType0.isNominalType());
      assertEquals(false, numberType0.isNoResolvedType());
      assertEquals(false, numberType0.isFunctionPrototypeType());
      assertEquals(false, numberType0.isInterface());
      assertEquals(false, numberType0.isEnumElementType());
      assertEquals(false, numberType0.isCheckedUnknownType());
      assertEquals(false, numberType0.isNoType());
      assertEquals(false, numberType0.isUnionType());
      assertEquals(false, numberType0.isStringValueType());
      assertEquals(false, numberType0.isNoObjectType());
      assertEquals(1, vector0.size());
      assertEquals(10, vector0.capacity());
      assertEquals("[number]", vector0.toString());
      assertEquals(false, vector0.isEmpty());
      
      UnionType unionType0 = new UnionType(jSTypeRegistry0, vector0);
      assertEquals(false, unionType0.isConstructor());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isCheckedUnknownType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isEnumElementType());
      assertEquals(false, unionType0.isInterface());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isNominalConstructor());
      assertEquals(false, unionType0.isFunctionPrototypeType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isNominalType());
      assertEquals(false, unionType0.isNoResolvedType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isOrdinaryFunction());
      assertEquals(false, unionType0.isEnumType());
      assertEquals(1, vector0.size());
      assertEquals(10, vector0.capacity());
      assertEquals("[number]", vector0.toString());
      assertEquals(false, vector0.isEmpty());
      assertNotNull(unionType0);
      
      boolean boolean0 = unionType0.matchesObjectContext();
      assertTrue(boolean0);
      assertEquals(false, unionType0.isConstructor());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isCheckedUnknownType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isEnumElementType());
      assertEquals(false, unionType0.isInterface());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isNominalConstructor());
      assertEquals(false, unionType0.isFunctionPrototypeType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isNominalType());
      assertEquals(false, unionType0.isNoResolvedType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isOrdinaryFunction());
      assertEquals(false, unionType0.isEnumType());
      assertEquals(1, vector0.size());
      assertEquals(10, vector0.capacity());
      assertEquals("[number]", vector0.toString());
      assertEquals(false, vector0.isEmpty());
  }

  @Test
  public void test43()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = null;
      Vector<JSType> vector0 = new Vector<JSType>();
      assertEquals(0, vector0.size());
      assertEquals(true, vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertNotNull(vector0);
      
      boolean boolean0 = true;
      UnknownType unknownType0 = new UnknownType(jSTypeRegistry0, boolean0);
      assertEquals(true, unknownType0.canBeCalled());
      assertEquals("??", unknownType0.getReferenceName());
      assertEquals(false, unknownType0.hasReferenceName());
      assertEquals(true, unknownType0.matchesObjectContext());
      assertEquals(false, unknownType0.isEnumType());
      assertEquals(true, unknownType0.matchesNumberContext());
      assertEquals(false, unknownType0.isNumberValueType());
      assertEquals(false, unknownType0.isFunctionPrototypeType());
      assertEquals(true, unknownType0.matchesStringContext());
      assertEquals(false, unknownType0.isVoidType());
      assertEquals(false, unknownType0.isOrdinaryFunction());
      assertEquals(false, unknownType0.isResolved());
      assertEquals(false, unknownType0.isNullType());
      assertEquals(false, unknownType0.isEnumElementType());
      assertEquals(BooleanLiteralSet.BOTH, unknownType0.getPossibleToBooleanOutcomes());
      assertEquals(false, unknownType0.isAllType());
      assertEquals(false, unknownType0.isNoObjectType());
      assertEquals(false, unknownType0.isBooleanValueType());
      assertEquals(false, unknownType0.isRecordType());
      assertEquals(false, unknownType0.isNominalType());
      assertEquals("Unknown", unknownType0.getDisplayName());
      assertEquals(true, unknownType0.isNullable());
      assertEquals(false, unknownType0.isStringValueType());
      assertEquals(false, unknownType0.isInterface());
      assertEquals(true, unknownType0.isUnknownType());
      assertEquals(true, unknownType0.isCheckedUnknownType());
      assertEquals(false, unknownType0.isNoResolvedType());
      assertEquals(false, unknownType0.isConstructor());
      assertEquals(false, unknownType0.hasCachedValues());
      assertEquals(false, unknownType0.isUnionType());
      assertEquals(2147483647, unknownType0.getPropertiesCount());
      assertEquals(false, unknownType0.isNativeObjectType());
      assertEquals(false, unknownType0.isNominalConstructor());
      assertEquals(true, unknownType0.hasDisplayName());
      assertEquals(false, unknownType0.isNoType());
      assertEquals(false, unknownType0.isFunctionType());
      assertEquals(false, unknownType0.isTemplateType());
      assertNotNull(unknownType0);
      
      boolean boolean1 = vector0.add((JSType) unknownType0);
      assertTrue(boolean1);
      assertEquals(1, vector0.size());
      assertEquals("[??]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertEquals(false, vector0.isEmpty());
      assertEquals(true, unknownType0.canBeCalled());
      assertEquals("??", unknownType0.getReferenceName());
      assertEquals(false, unknownType0.hasReferenceName());
      assertEquals(true, unknownType0.matchesObjectContext());
      assertEquals(false, unknownType0.isEnumType());
      assertEquals(true, unknownType0.matchesNumberContext());
      assertEquals(false, unknownType0.isNumberValueType());
      assertEquals(false, unknownType0.isFunctionPrototypeType());
      assertEquals(true, unknownType0.matchesStringContext());
      assertEquals(false, unknownType0.isVoidType());
      assertEquals(false, unknownType0.isOrdinaryFunction());
      assertEquals(false, unknownType0.isResolved());
      assertEquals(false, unknownType0.isNullType());
      assertEquals(false, unknownType0.isEnumElementType());
      assertEquals(BooleanLiteralSet.BOTH, unknownType0.getPossibleToBooleanOutcomes());
      assertEquals(false, unknownType0.isAllType());
      assertEquals(false, unknownType0.isNoObjectType());
      assertEquals(false, unknownType0.isBooleanValueType());
      assertEquals(false, unknownType0.isRecordType());
      assertEquals(false, unknownType0.isNominalType());
      assertEquals("Unknown", unknownType0.getDisplayName());
      assertEquals(true, unknownType0.isNullable());
      assertEquals(false, unknownType0.isStringValueType());
      assertEquals(false, unknownType0.isInterface());
      assertEquals(true, unknownType0.isUnknownType());
      assertEquals(true, unknownType0.isCheckedUnknownType());
      assertEquals(false, unknownType0.isNoResolvedType());
      assertEquals(false, unknownType0.isConstructor());
      assertEquals(false, unknownType0.hasCachedValues());
      assertEquals(false, unknownType0.isUnionType());
      assertEquals(2147483647, unknownType0.getPropertiesCount());
      assertEquals(false, unknownType0.isNativeObjectType());
      assertEquals(false, unknownType0.isNominalConstructor());
      assertEquals(true, unknownType0.hasDisplayName());
      assertEquals(false, unknownType0.isNoType());
      assertEquals(false, unknownType0.isFunctionType());
      assertEquals(false, unknownType0.isTemplateType());
      assertTrue(boolean0 == boolean1);
      assertTrue(boolean1 == boolean0);
      
      UnionType unionType0 = new UnionType(jSTypeRegistry0, vector0);
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isEnumType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isInterface());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isNominalType());
      assertEquals(false, unionType0.isNominalConstructor());
      assertEquals(false, unionType0.isCheckedUnknownType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isNoResolvedType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isConstructor());
      assertEquals(false, unionType0.isEnumElementType());
      assertEquals(false, unionType0.isOrdinaryFunction());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isFunctionPrototypeType());
      assertEquals(1, vector0.size());
      assertEquals("[??]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertEquals(false, vector0.isEmpty());
      assertNotNull(unionType0);
      
      boolean boolean2 = unionType0.matchesStringContext();
      assertTrue(boolean2);
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isEnumType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isInterface());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isNominalType());
      assertEquals(false, unionType0.isNominalConstructor());
      assertEquals(false, unionType0.isCheckedUnknownType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isNoResolvedType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isConstructor());
      assertEquals(false, unionType0.isEnumElementType());
      assertEquals(false, unionType0.isOrdinaryFunction());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isFunctionPrototypeType());
      assertEquals(1, vector0.size());
      assertEquals("[??]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertEquals(false, vector0.isEmpty());
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
  }

  @Test
  public void test44()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = null;
      Vector<JSType> vector0 = new Vector<JSType>();
      assertEquals(true, vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertEquals("[]", vector0.toString());
      assertNotNull(vector0);
      
      UnionType unionType0 = new UnionType(jSTypeRegistry0, vector0);
      assertEquals(true, vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertEquals("[]", vector0.toString());
      assertEquals(false, unionType0.isCheckedUnknownType());
      assertEquals(false, unionType0.isFunctionPrototypeType());
      assertEquals(false, unionType0.isNominalType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isNominalConstructor());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isConstructor());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isOrdinaryFunction());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isEnumType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isEnumElementType());
      assertEquals(false, unionType0.isInterface());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isNoResolvedType());
      assertNotNull(unionType0);
      
      boolean boolean0 = unionType0.matchesStringContext();
      assertFalse(boolean0);
      assertEquals(true, vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertEquals("[]", vector0.toString());
      assertEquals(false, unionType0.isCheckedUnknownType());
      assertEquals(false, unionType0.isFunctionPrototypeType());
      assertEquals(false, unionType0.isNominalType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isNominalConstructor());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isConstructor());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isOrdinaryFunction());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isEnumType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isEnumElementType());
      assertEquals(false, unionType0.isInterface());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isNoResolvedType());
  }

  @Test
  public void test45()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = null;
      Vector<JSType> vector0 = new Vector<JSType>();
      assertEquals(10, vector0.capacity());
      assertEquals(true, vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(0, vector0.size());
      assertNotNull(vector0);
      
      boolean boolean0 = true;
      UnknownType unknownType0 = new UnknownType(jSTypeRegistry0, boolean0);
      assertEquals(false, unknownType0.isNoType());
      assertEquals(true, unknownType0.matchesObjectContext());
      assertEquals("Unknown", unknownType0.getDisplayName());
      assertEquals(false, unknownType0.isNoResolvedType());
      assertEquals(false, unknownType0.isRecordType());
      assertEquals(false, unknownType0.isUnionType());
      assertEquals(false, unknownType0.isNoObjectType());
      assertEquals(false, unknownType0.isNominalConstructor());
      assertEquals(false, unknownType0.isNominalType());
      assertEquals(false, unknownType0.isNumberValueType());
      assertEquals(true, unknownType0.isNullable());
      assertEquals(true, unknownType0.matchesNumberContext());
      assertEquals(2147483647, unknownType0.getPropertiesCount());
      assertEquals(false, unknownType0.isOrdinaryFunction());
      assertEquals(false, unknownType0.isInterface());
      assertEquals("??", unknownType0.getReferenceName());
      assertEquals(false, unknownType0.isResolved());
      assertEquals(false, unknownType0.hasCachedValues());
      assertEquals(false, unknownType0.isTemplateType());
      assertEquals(BooleanLiteralSet.BOTH, unknownType0.getPossibleToBooleanOutcomes());
      assertEquals(false, unknownType0.isFunctionType());
      assertEquals(false, unknownType0.isAllType());
      assertEquals(true, unknownType0.matchesStringContext());
      assertEquals(false, unknownType0.isConstructor());
      assertEquals(false, unknownType0.isNativeObjectType());
      assertEquals(false, unknownType0.isEnumElementType());
      assertEquals(false, unknownType0.isEnumType());
      assertEquals(true, unknownType0.canBeCalled());
      assertEquals(true, unknownType0.hasDisplayName());
      assertEquals(false, unknownType0.isNullType());
      assertEquals(false, unknownType0.hasReferenceName());
      assertEquals(true, unknownType0.isUnknownType());
      assertEquals(false, unknownType0.isBooleanValueType());
      assertEquals(false, unknownType0.isFunctionPrototypeType());
      assertEquals(true, unknownType0.isCheckedUnknownType());
      assertEquals(false, unknownType0.isVoidType());
      assertEquals(false, unknownType0.isStringValueType());
      assertNotNull(unknownType0);
      
      boolean boolean1 = vector0.add((JSType) unknownType0);
      assertTrue(boolean1);
      assertEquals(10, vector0.capacity());
      assertEquals("[??]", vector0.toString());
      assertEquals(false, vector0.isEmpty());
      assertEquals(1, vector0.size());
      assertEquals(false, unknownType0.isNoType());
      assertEquals(true, unknownType0.matchesObjectContext());
      assertEquals("Unknown", unknownType0.getDisplayName());
      assertEquals(false, unknownType0.isNoResolvedType());
      assertEquals(false, unknownType0.isRecordType());
      assertEquals(false, unknownType0.isUnionType());
      assertEquals(false, unknownType0.isNoObjectType());
      assertEquals(false, unknownType0.isNominalConstructor());
      assertEquals(false, unknownType0.isNominalType());
      assertEquals(false, unknownType0.isNumberValueType());
      assertEquals(true, unknownType0.isNullable());
      assertEquals(true, unknownType0.matchesNumberContext());
      assertEquals(2147483647, unknownType0.getPropertiesCount());
      assertEquals(false, unknownType0.isOrdinaryFunction());
      assertEquals(false, unknownType0.isInterface());
      assertEquals("??", unknownType0.getReferenceName());
      assertEquals(false, unknownType0.isResolved());
      assertEquals(false, unknownType0.hasCachedValues());
      assertEquals(false, unknownType0.isTemplateType());
      assertEquals(BooleanLiteralSet.BOTH, unknownType0.getPossibleToBooleanOutcomes());
      assertEquals(false, unknownType0.isFunctionType());
      assertEquals(false, unknownType0.isAllType());
      assertEquals(true, unknownType0.matchesStringContext());
      assertEquals(false, unknownType0.isConstructor());
      assertEquals(false, unknownType0.isNativeObjectType());
      assertEquals(false, unknownType0.isEnumElementType());
      assertEquals(false, unknownType0.isEnumType());
      assertEquals(true, unknownType0.canBeCalled());
      assertEquals(true, unknownType0.hasDisplayName());
      assertEquals(false, unknownType0.isNullType());
      assertEquals(false, unknownType0.hasReferenceName());
      assertEquals(true, unknownType0.isUnknownType());
      assertEquals(false, unknownType0.isBooleanValueType());
      assertEquals(false, unknownType0.isFunctionPrototypeType());
      assertEquals(true, unknownType0.isCheckedUnknownType());
      assertEquals(false, unknownType0.isVoidType());
      assertEquals(false, unknownType0.isStringValueType());
      assertTrue(boolean0 == boolean1);
      assertTrue(boolean1 == boolean0);
      
      UnionType unionType0 = new UnionType(jSTypeRegistry0, vector0);
      assertEquals(10, vector0.capacity());
      assertEquals("[??]", vector0.toString());
      assertEquals(false, vector0.isEmpty());
      assertEquals(1, vector0.size());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isConstructor());
      assertEquals(false, unionType0.isCheckedUnknownType());
      assertEquals(false, unionType0.isNominalConstructor());
      assertEquals(false, unionType0.isNominalType());
      assertEquals(false, unionType0.isEnumType());
      assertEquals(false, unionType0.isFunctionPrototypeType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isOrdinaryFunction());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isEnumElementType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isNoResolvedType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isInterface());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertNotNull(unionType0);
      
      boolean boolean2 = unionType0.matchesNumberContext();
      assertTrue(boolean2);
      assertEquals(10, vector0.capacity());
      assertEquals("[??]", vector0.toString());
      assertEquals(false, vector0.isEmpty());
      assertEquals(1, vector0.size());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isConstructor());
      assertEquals(false, unionType0.isCheckedUnknownType());
      assertEquals(false, unionType0.isNominalConstructor());
      assertEquals(false, unionType0.isNominalType());
      assertEquals(false, unionType0.isEnumType());
      assertEquals(false, unionType0.isFunctionPrototypeType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isOrdinaryFunction());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isEnumElementType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isNoResolvedType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isInterface());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
  }

  @Test
  public void test46()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = null;
      Vector<JSType> vector0 = new Vector<JSType>();
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertEquals(true, vector0.isEmpty());
      assertEquals(0, vector0.size());
      assertNotNull(vector0);
      
      UnionType unionType0 = new UnionType(jSTypeRegistry0, vector0);
      assertEquals(false, unionType0.isInterface());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isEnumType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isNominalConstructor());
      assertEquals(false, unionType0.isOrdinaryFunction());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isFunctionPrototypeType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isConstructor());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isNominalType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isCheckedUnknownType());
      assertEquals(false, unionType0.isNoResolvedType());
      assertEquals(false, unionType0.isEnumElementType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertEquals(true, vector0.isEmpty());
      assertEquals(0, vector0.size());
      assertNotNull(unionType0);
      
      HashSet<JSType> hashSet0 = new HashSet<JSType>();
      assertEquals(true, hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      assertEquals("[]", hashSet0.toString());
      assertNotNull(hashSet0);
      
      UnionType unionType1 = new UnionType(jSTypeRegistry0, hashSet0);
      assertNotSame(unionType1, unionType0);
      assertEquals(false, unionType1.isNoType());
      assertEquals(false, unionType1.isNominalType());
      assertEquals(false, unionType1.isNumberValueType());
      assertEquals(false, unionType1.isBooleanValueType());
      assertEquals(false, unionType1.isEnumType());
      assertEquals(false, unionType1.isRecordType());
      assertEquals(false, unionType1.isNominalConstructor());
      assertEquals(false, unionType1.isCheckedUnknownType());
      assertEquals(false, unionType1.isTemplateType());
      assertEquals(false, unionType1.isNoResolvedType());
      assertEquals(false, unionType1.isResolved());
      assertEquals(false, unionType1.isInterface());
      assertEquals(false, unionType1.isAllType());
      assertEquals(false, unionType1.isEnumElementType());
      assertEquals(false, unionType1.isOrdinaryFunction());
      assertEquals(false, unionType1.isFunctionType());
      assertEquals(false, unionType1.isVoidType());
      assertEquals(false, unionType1.isFunctionPrototypeType());
      assertEquals(false, unionType1.isNoObjectType());
      assertEquals(false, unionType1.isNullType());
      assertEquals(false, unionType1.isStringValueType());
      assertEquals(false, unionType1.isConstructor());
      assertEquals(true, unionType1.isUnionType());
      assertEquals(true, hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      assertEquals("[]", hashSet0.toString());
      assertTrue(unionType1.equals((Object)unionType0));
      assertNotNull(unionType1);
      
      boolean boolean0 = hashSet0.add((JSType) unionType0);
      assertTrue(boolean0);
      assertNotSame(unionType0, unionType1);
      assertEquals(1, hashSet0.size());
      assertEquals(false, hashSet0.isEmpty());
      assertEquals("[()]", hashSet0.toString());
      assertEquals(false, unionType0.isInterface());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isEnumType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isNominalConstructor());
      assertEquals(false, unionType0.isOrdinaryFunction());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isFunctionPrototypeType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isConstructor());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isNominalType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isCheckedUnknownType());
      assertEquals(false, unionType0.isNoResolvedType());
      assertEquals(false, unionType0.isEnumElementType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertEquals(true, vector0.isEmpty());
      assertEquals(0, vector0.size());
      assertFalse(unionType0.equals((Object)unionType1));
      
      boolean boolean1 = unionType1.matchesUint32Context();
      assertFalse(boolean1);
      assertNotSame(unionType1, unionType0);
      assertEquals(false, unionType1.isNoType());
      assertEquals(false, unionType1.isNominalType());
      assertEquals(false, unionType1.isNumberValueType());
      assertEquals(false, unionType1.isBooleanValueType());
      assertEquals(false, unionType1.isEnumType());
      assertEquals(false, unionType1.isRecordType());
      assertEquals(false, unionType1.isNominalConstructor());
      assertEquals(false, unionType1.isCheckedUnknownType());
      assertEquals(false, unionType1.isTemplateType());
      assertEquals(false, unionType1.isNoResolvedType());
      assertEquals(false, unionType1.isResolved());
      assertEquals(false, unionType1.isInterface());
      assertEquals(false, unionType1.isAllType());
      assertEquals(false, unionType1.isEnumElementType());
      assertEquals(false, unionType1.isOrdinaryFunction());
      assertEquals(false, unionType1.isFunctionType());
      assertEquals(false, unionType1.isVoidType());
      assertEquals(false, unionType1.isFunctionPrototypeType());
      assertEquals(false, unionType1.isNoObjectType());
      assertEquals(false, unionType1.isNullType());
      assertEquals(false, unionType1.isStringValueType());
      assertEquals(false, unionType1.isConstructor());
      assertEquals(true, unionType1.isUnionType());
      assertEquals(1, hashSet0.size());
      assertEquals(false, hashSet0.isEmpty());
      assertEquals("[()]", hashSet0.toString());
      assertFalse(unionType1.equals((Object)unionType0));
      assertFalse(boolean1 == boolean0);
  }

  @Test
  public void test47()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = null;
      Vector<JSType> vector0 = new Vector<JSType>();
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertEquals(true, vector0.isEmpty());
      assertEquals(0, vector0.size());
      assertNotNull(vector0);
      
      NullType nullType0 = new NullType(jSTypeRegistry0);
      assertEquals(false, nullType0.isNominalType());
      assertEquals(false, nullType0.isVoidType());
      assertEquals(false, nullType0.isOrdinaryFunction());
      assertEquals(BooleanLiteralSet.FALSE, nullType0.getPossibleToBooleanOutcomes());
      assertEquals(false, nullType0.isFunctionPrototypeType());
      assertEquals(false, nullType0.isTemplateType());
      assertEquals(false, nullType0.isUnionType());
      assertEquals(false, nullType0.isNominalConstructor());
      assertEquals(false, nullType0.isStringValueType());
      assertEquals(false, nullType0.isNoObjectType());
      assertEquals("null", nullType0.getDisplayName());
      assertEquals(true, nullType0.matchesNumberContext());
      assertEquals(false, nullType0.isCheckedUnknownType());
      assertEquals(true, nullType0.matchesStringContext());
      assertEquals(false, nullType0.isEnumType());
      assertEquals(false, nullType0.isRecordType());
      assertEquals(false, nullType0.isFunctionType());
      assertEquals(false, nullType0.matchesObjectContext());
      assertEquals(true, nullType0.isNullable());
      assertEquals(false, nullType0.isInterface());
      assertEquals(false, nullType0.isResolved());
      assertEquals(false, nullType0.isEnumElementType());
      assertEquals(false, nullType0.isConstructor());
      assertEquals(false, nullType0.isBooleanValueType());
      assertEquals(true, nullType0.isNullType());
      assertEquals(false, nullType0.isAllType());
      assertEquals(false, nullType0.isNumberValueType());
      assertEquals(false, nullType0.isNoResolvedType());
      assertEquals(false, nullType0.isNoType());
      assertNotNull(nullType0);
      
      boolean boolean0 = vector0.add((JSType) nullType0);
      assertTrue(boolean0);
      assertEquals(1, vector0.size());
      assertEquals(false, vector0.isEmpty());
      assertEquals("[null]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertEquals(false, nullType0.isNominalType());
      assertEquals(false, nullType0.isVoidType());
      assertEquals(false, nullType0.isOrdinaryFunction());
      assertEquals(BooleanLiteralSet.FALSE, nullType0.getPossibleToBooleanOutcomes());
      assertEquals(false, nullType0.isFunctionPrototypeType());
      assertEquals(false, nullType0.isTemplateType());
      assertEquals(false, nullType0.isUnionType());
      assertEquals(false, nullType0.isNominalConstructor());
      assertEquals(false, nullType0.isStringValueType());
      assertEquals(false, nullType0.isNoObjectType());
      assertEquals("null", nullType0.getDisplayName());
      assertEquals(true, nullType0.matchesNumberContext());
      assertEquals(false, nullType0.isCheckedUnknownType());
      assertEquals(true, nullType0.matchesStringContext());
      assertEquals(false, nullType0.isEnumType());
      assertEquals(false, nullType0.isRecordType());
      assertEquals(false, nullType0.isFunctionType());
      assertEquals(false, nullType0.matchesObjectContext());
      assertEquals(true, nullType0.isNullable());
      assertEquals(false, nullType0.isInterface());
      assertEquals(false, nullType0.isResolved());
      assertEquals(false, nullType0.isEnumElementType());
      assertEquals(false, nullType0.isConstructor());
      assertEquals(false, nullType0.isBooleanValueType());
      assertEquals(true, nullType0.isNullType());
      assertEquals(false, nullType0.isAllType());
      assertEquals(false, nullType0.isNumberValueType());
      assertEquals(false, nullType0.isNoResolvedType());
      assertEquals(false, nullType0.isNoType());
      
      UnionType unionType0 = new UnionType(jSTypeRegistry0, vector0);
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isFunctionPrototypeType());
      assertEquals(false, unionType0.isNominalConstructor());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isEnumType());
      assertEquals(false, unionType0.isEnumElementType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isInterface());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isOrdinaryFunction());
      assertEquals(false, unionType0.isCheckedUnknownType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isConstructor());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isNoResolvedType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isNominalType());
      assertEquals(1, vector0.size());
      assertEquals(false, vector0.isEmpty());
      assertEquals("[null]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertNotNull(unionType0);
      
      HashSet<JSType> hashSet0 = new HashSet<JSType>();
      assertEquals(0, hashSet0.size());
      assertEquals("[]", hashSet0.toString());
      assertEquals(true, hashSet0.isEmpty());
      assertNotNull(hashSet0);
      
      UnionType unionType1 = new UnionType(jSTypeRegistry0, hashSet0);
      assertNotSame(unionType1, unionType0);
      assertEquals(0, hashSet0.size());
      assertEquals("[]", hashSet0.toString());
      assertEquals(true, hashSet0.isEmpty());
      assertEquals(true, unionType1.isUnionType());
      assertEquals(false, unionType1.isTemplateType());
      assertEquals(false, unionType1.isEnumType());
      assertEquals(false, unionType1.isBooleanValueType());
      assertEquals(false, unionType1.isFunctionType());
      assertEquals(false, unionType1.isNoType());
      assertEquals(false, unionType1.isNominalConstructor());
      assertEquals(false, unionType1.isResolved());
      assertEquals(false, unionType1.isAllType());
      assertEquals(false, unionType1.isNoResolvedType());
      assertEquals(false, unionType1.isEnumElementType());
      assertEquals(false, unionType1.isNumberValueType());
      assertEquals(false, unionType1.isNullType());
      assertEquals(false, unionType1.isConstructor());
      assertEquals(false, unionType1.isCheckedUnknownType());
      assertEquals(false, unionType1.isNoObjectType());
      assertEquals(false, unionType1.isOrdinaryFunction());
      assertEquals(false, unionType1.isStringValueType());
      assertEquals(false, unionType1.isFunctionPrototypeType());
      assertEquals(false, unionType1.isNominalType());
      assertEquals(false, unionType1.isInterface());
      assertEquals(false, unionType1.isVoidType());
      assertEquals(false, unionType1.isRecordType());
      assertFalse(unionType1.equals((Object)unionType0));
      assertNotNull(unionType1);
      
      UnionType unionType2 = (UnionType)JSType.getGreatestSubtype(unionType1, unionType0);
      assertNotSame(unionType0, unionType1);
      assertNotSame(unionType0, unionType2);
      assertNotSame(unionType2, unionType0);
      assertSame(unionType2, unionType1);
      assertNotSame(unionType1, unionType0);
      assertSame(unionType1, unionType2);
      assertEquals(0, hashSet0.size());
      assertEquals("[]", hashSet0.toString());
      assertEquals(true, hashSet0.isEmpty());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isFunctionPrototypeType());
      assertEquals(false, unionType0.isNominalConstructor());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isEnumType());
      assertEquals(false, unionType0.isEnumElementType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isInterface());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isOrdinaryFunction());
      assertEquals(false, unionType0.isCheckedUnknownType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isConstructor());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isNoResolvedType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isNominalType());
      assertEquals(false, unionType2.isAllType());
      assertEquals(false, unionType2.isTemplateType());
      assertEquals(false, unionType2.isNumberValueType());
      assertEquals(false, unionType2.isNoResolvedType());
      assertEquals(false, unionType2.isEnumElementType());
      assertEquals(false, unionType2.isNominalType());
      assertEquals(false, unionType2.isFunctionPrototypeType());
      assertEquals(false, unionType2.isNominalConstructor());
      assertEquals(false, unionType2.isFunctionType());
      assertEquals(false, unionType2.isVoidType());
      assertEquals(false, unionType2.isEnumType());
      assertEquals(false, unionType2.isInterface());
      assertEquals(false, unionType2.isRecordType());
      assertEquals(false, unionType2.isNoObjectType());
      assertEquals(false, unionType2.isNullType());
      assertEquals(false, unionType2.isOrdinaryFunction());
      assertEquals(false, unionType2.isResolved());
      assertEquals(true, unionType2.isUnionType());
      assertEquals(false, unionType2.isCheckedUnknownType());
      assertEquals(false, unionType2.isBooleanValueType());
      assertEquals(false, unionType2.isStringValueType());
      assertEquals(false, unionType2.isConstructor());
      assertEquals(false, unionType2.isNoType());
      assertEquals(1, vector0.size());
      assertEquals(false, vector0.isEmpty());
      assertEquals("[null]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertEquals(true, unionType1.isUnionType());
      assertEquals(false, unionType1.isTemplateType());
      assertEquals(false, unionType1.isEnumType());
      assertEquals(false, unionType1.isBooleanValueType());
      assertEquals(false, unionType1.isFunctionType());
      assertEquals(false, unionType1.isNoType());
      assertEquals(false, unionType1.isNominalConstructor());
      assertEquals(false, unionType1.isResolved());
      assertEquals(false, unionType1.isAllType());
      assertEquals(false, unionType1.isNoResolvedType());
      assertEquals(false, unionType1.isEnumElementType());
      assertEquals(false, unionType1.isNumberValueType());
      assertEquals(false, unionType1.isNullType());
      assertEquals(false, unionType1.isConstructor());
      assertEquals(false, unionType1.isCheckedUnknownType());
      assertEquals(false, unionType1.isNoObjectType());
      assertEquals(false, unionType1.isOrdinaryFunction());
      assertEquals(false, unionType1.isStringValueType());
      assertEquals(false, unionType1.isFunctionPrototypeType());
      assertEquals(false, unionType1.isNominalType());
      assertEquals(false, unionType1.isInterface());
      assertEquals(false, unionType1.isVoidType());
      assertEquals(false, unionType1.isRecordType());
      assertFalse(unionType0.equals((Object)unionType1));
      assertFalse(unionType0.equals((Object)unionType2));
      assertFalse(unionType2.equals((Object)unionType0));
      assertFalse(unionType1.equals((Object)unionType0));
      assertNotNull(unionType2);
  }
}
