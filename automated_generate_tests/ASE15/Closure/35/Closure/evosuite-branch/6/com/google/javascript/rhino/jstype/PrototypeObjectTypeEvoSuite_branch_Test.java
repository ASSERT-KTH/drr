/*
 * This file was automatically generated by EvoSuite
 * Fri Dec 12 02:20:28 GMT 2014
 */

package com.google.javascript.rhino.jstype;

import static org.junit.Assert.*; import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.junit.Test;
import com.google.javascript.rhino.ErrorReporter;
import com.google.javascript.rhino.JSDocInfo;
import com.google.javascript.rhino.Node;
import com.google.javascript.rhino.SimpleErrorReporter;
import com.google.javascript.rhino.jstype.BooleanLiteralSet;
import com.google.javascript.rhino.jstype.ErrorFunctionType;
import com.google.javascript.rhino.jstype.FunctionType;
import com.google.javascript.rhino.jstype.JSType;
import com.google.javascript.rhino.jstype.JSTypeNative;
import com.google.javascript.rhino.jstype.JSTypeRegistry;
import com.google.javascript.rhino.jstype.NoResolvedType;
import com.google.javascript.rhino.jstype.NoType;
import com.google.javascript.rhino.jstype.ObjectType;
import com.google.javascript.rhino.jstype.PrototypeObjectType;
import com.google.javascript.rhino.jstype.RecordType;
import com.google.javascript.rhino.jstype.RecordTypeBuilder;
import com.google.javascript.rhino.jstype.UnionType;
import java.util.HashMap;
import java.util.Map;
import java.util.Set;



import org.junit.runner.RunWith;


public class PrototypeObjectTypeEvoSuite_branch_Test  {

  @Test
  public void test00()  throws Throwable  {
      ErrorReporter errorReporter0 = null;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(errorReporter0);
      assertNotNull(jSTypeRegistry0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      NoType noType0 = new NoType(jSTypeRegistry0);
      assertNotNull(noType0);
      assertEquals(false, noType0.isReturnTypeInferred());
      assertEquals(false, noType0.isFunctionPrototypeType());
      assertEquals(false, noType0.hasCachedValues());
      assertNull(noType0.getReferenceName());
      assertEquals(false, noType0.isNominalConstructor());
      assertEquals(false, noType0.isNominalType());
      assertEquals(false, noType0.isAllType());
      assertEquals(false, noType0.isBooleanValueType());
      assertEquals(false, noType0.isInterface());
      assertEquals(true, noType0.matchesNumberContext());
      assertEquals(false, noType0.isNullType());
      assertNull(noType0.getTemplateTypeName());
      assertEquals(0, noType0.getExtendedInterfacesCount());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertEquals(true, noType0.matchesObjectContext());
      assertEquals(true, noType0.hasInstanceType());
      assertEquals(true, noType0.isNullable());
      assertEquals(2147483647, noType0.getMaxArguments());
      assertEquals(false, noType0.isOrdinaryFunction());
      assertEquals(false, noType0.isStringValueType());
      assertEquals(false, noType0.isResolved());
      assertEquals(true, noType0.canBeCalled());
      assertEquals(false, noType0.isUnionType());
      assertEquals(true, noType0.isConstructor());
      assertEquals(2147483647, noType0.getPropertiesCount());
      assertEquals(false, noType0.isNoObjectType());
      assertEquals(false, noType0.isEnumType());
      assertEquals(false, noType0.isEnumElementType());
      assertEquals(false, noType0.isNoResolvedType());
      assertEquals(false, noType0.isNumberValueType());
      assertEquals(false, noType0.isVoidType());
      assertEquals(true, noType0.isNoType());
      assertEquals(false, noType0.isTemplateType());
      assertEquals(false, noType0.isFunctionType());
      assertEquals(true, noType0.matchesStringContext());
      assertEquals(false, noType0.isCheckedUnknownType());
      assertEquals(false, noType0.isRecordType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      noType0.matchConstraint((ObjectType) noType0);
      assertEquals(false, noType0.isReturnTypeInferred());
      assertEquals(false, noType0.isFunctionPrototypeType());
      assertEquals(false, noType0.hasCachedValues());
      assertNull(noType0.getReferenceName());
      assertEquals(false, noType0.isNominalConstructor());
      assertEquals(false, noType0.isNominalType());
      assertEquals(false, noType0.isAllType());
      assertEquals(false, noType0.isBooleanValueType());
      assertEquals(false, noType0.isInterface());
      assertEquals(true, noType0.matchesNumberContext());
      assertEquals(false, noType0.isNullType());
      assertNull(noType0.getTemplateTypeName());
      assertEquals(0, noType0.getExtendedInterfacesCount());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertEquals(true, noType0.matchesObjectContext());
      assertEquals(true, noType0.hasInstanceType());
      assertEquals(true, noType0.isNullable());
      assertEquals(2147483647, noType0.getMaxArguments());
      assertEquals(false, noType0.isOrdinaryFunction());
      assertEquals(false, noType0.isStringValueType());
      assertEquals(false, noType0.isResolved());
      assertEquals(true, noType0.canBeCalled());
      assertEquals(false, noType0.isUnionType());
      assertEquals(true, noType0.isConstructor());
      assertEquals(2147483647, noType0.getPropertiesCount());
      assertEquals(false, noType0.isNoObjectType());
      assertEquals(false, noType0.isEnumType());
      assertEquals(false, noType0.isEnumElementType());
      assertEquals(false, noType0.isNoResolvedType());
      assertEquals(false, noType0.isNumberValueType());
      assertEquals(false, noType0.isVoidType());
      assertEquals(true, noType0.isNoType());
      assertEquals(false, noType0.isTemplateType());
      assertEquals(false, noType0.isFunctionType());
      assertEquals(true, noType0.matchesStringContext());
      assertEquals(false, noType0.isCheckedUnknownType());
      assertEquals(false, noType0.isRecordType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
  }

  @Test
  public void test01()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      String string0 = "";
      boolean boolean0 = true;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0, boolean0);
      assertNotNull(jSTypeRegistry0);
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      NoType noType0 = new NoType(jSTypeRegistry0);
      assertNotNull(noType0);
      assertEquals(false, noType0.isBooleanValueType());
      assertEquals(false, noType0.hasCachedValues());
      assertEquals(false, noType0.isUnionType());
      assertEquals(false, noType0.isAllType());
      assertEquals(false, noType0.isNullType());
      assertEquals(true, noType0.matchesStringContext());
      assertEquals(2147483647, noType0.getMaxArguments());
      assertEquals(true, noType0.hasInstanceType());
      assertEquals(0, noType0.getExtendedInterfacesCount());
      assertEquals(false, noType0.isTemplateType());
      assertEquals(true, noType0.isConstructor());
      assertEquals(false, noType0.isOrdinaryFunction());
      assertEquals(true, noType0.matchesObjectContext());
      assertEquals(true, noType0.isNoType());
      assertNull(noType0.getTemplateTypeName());
      assertEquals(false, noType0.isRecordType());
      assertEquals(true, noType0.isNullable());
      assertEquals(false, noType0.isNoResolvedType());
      assertEquals(false, noType0.isFunctionPrototypeType());
      assertEquals(false, noType0.isEnumType());
      assertEquals(false, noType0.isFunctionType());
      assertNull(noType0.getReferenceName());
      assertEquals(2147483647, noType0.getPropertiesCount());
      assertEquals(false, noType0.isEnumElementType());
      assertEquals(false, noType0.isStringValueType());
      assertEquals(false, noType0.isNoObjectType());
      assertEquals(true, noType0.canBeCalled());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertEquals(true, noType0.matchesNumberContext());
      assertEquals(false, noType0.isCheckedUnknownType());
      assertEquals(false, noType0.isVoidType());
      assertEquals(false, noType0.isNumberValueType());
      assertEquals(false, noType0.isNominalType());
      assertEquals(false, noType0.isNominalConstructor());
      assertEquals(false, noType0.isResolved());
      assertEquals(false, noType0.isReturnTypeInferred());
      assertEquals(false, noType0.isInterface());
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      Node node0 = noType0.getPropertyNode(string0);
      assertNull(node0);
      assertEquals(false, noType0.isBooleanValueType());
      assertEquals(false, noType0.hasCachedValues());
      assertEquals(false, noType0.isUnionType());
      assertEquals(false, noType0.isAllType());
      assertEquals(false, noType0.isNullType());
      assertEquals(true, noType0.matchesStringContext());
      assertEquals(2147483647, noType0.getMaxArguments());
      assertEquals(true, noType0.hasInstanceType());
      assertEquals(0, noType0.getExtendedInterfacesCount());
      assertEquals(false, noType0.isTemplateType());
      assertEquals(true, noType0.isConstructor());
      assertEquals(false, noType0.isOrdinaryFunction());
      assertEquals(true, noType0.matchesObjectContext());
      assertEquals(true, noType0.isNoType());
      assertNull(noType0.getTemplateTypeName());
      assertEquals(false, noType0.isRecordType());
      assertEquals(true, noType0.isNullable());
      assertEquals(false, noType0.isNoResolvedType());
      assertEquals(false, noType0.isFunctionPrototypeType());
      assertEquals(false, noType0.isEnumType());
      assertEquals(false, noType0.isFunctionType());
      assertNull(noType0.getReferenceName());
      assertEquals(2147483647, noType0.getPropertiesCount());
      assertEquals(false, noType0.isEnumElementType());
      assertEquals(false, noType0.isStringValueType());
      assertEquals(false, noType0.isNoObjectType());
      assertEquals(true, noType0.canBeCalled());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertEquals(true, noType0.matchesNumberContext());
      assertEquals(false, noType0.isCheckedUnknownType());
      assertEquals(false, noType0.isVoidType());
      assertEquals(false, noType0.isNumberValueType());
      assertEquals(false, noType0.isNominalType());
      assertEquals(false, noType0.isNominalConstructor());
      assertEquals(false, noType0.isResolved());
      assertEquals(false, noType0.isReturnTypeInferred());
      assertEquals(false, noType0.isInterface());
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      FunctionType functionType0 = jSTypeRegistry0.createConstructorType(string0, node0, node0, (JSType) noType0);
      assertNotNull(functionType0);
      assertEquals(false, noType0.isBooleanValueType());
      assertEquals(false, noType0.hasCachedValues());
      assertEquals(false, noType0.isUnionType());
      assertEquals(false, noType0.isAllType());
      assertEquals(false, noType0.isNullType());
      assertEquals(true, noType0.matchesStringContext());
      assertEquals(2147483647, noType0.getMaxArguments());
      assertEquals(true, noType0.hasInstanceType());
      assertEquals(0, noType0.getExtendedInterfacesCount());
      assertEquals(false, noType0.isTemplateType());
      assertEquals(true, noType0.isConstructor());
      assertEquals(false, noType0.isOrdinaryFunction());
      assertEquals(true, noType0.matchesObjectContext());
      assertEquals(true, noType0.isNoType());
      assertNull(noType0.getTemplateTypeName());
      assertEquals(false, noType0.isRecordType());
      assertEquals(true, noType0.isNullable());
      assertEquals(false, noType0.isNoResolvedType());
      assertEquals(false, noType0.isFunctionPrototypeType());
      assertEquals(false, noType0.isEnumType());
      assertEquals(false, noType0.isFunctionType());
      assertNull(noType0.getReferenceName());
      assertEquals(2147483647, noType0.getPropertiesCount());
      assertEquals(false, noType0.isEnumElementType());
      assertEquals(false, noType0.isStringValueType());
      assertEquals(false, noType0.isNoObjectType());
      assertEquals(true, noType0.canBeCalled());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertEquals(true, noType0.matchesNumberContext());
      assertEquals(false, noType0.isCheckedUnknownType());
      assertEquals(false, noType0.isVoidType());
      assertEquals(false, noType0.isNumberValueType());
      assertEquals(false, noType0.isNominalType());
      assertEquals(false, noType0.isNominalConstructor());
      assertEquals(false, noType0.isResolved());
      assertEquals(false, noType0.isReturnTypeInferred());
      assertEquals(false, noType0.isInterface());
      assertEquals(false, functionType0.isRecordType());
      assertEquals(false, functionType0.isVoidType());
      assertEquals(false, functionType0.isEnumType());
      assertEquals(2147483647, functionType0.getMaxArguments());
      assertEquals(false, functionType0.isFunctionPrototypeType());
      assertEquals(false, functionType0.isOrdinaryFunction());
      assertEquals(false, functionType0.isNoObjectType());
      assertEquals(false, functionType0.isResolved());
      assertEquals(false, functionType0.isInterface());
      assertEquals(false, functionType0.isNominalType());
      assertEquals(false, functionType0.isNullType());
      assertEquals(false, functionType0.isNoType());
      assertEquals(false, functionType0.isReturnTypeInferred());
      assertEquals(false, functionType0.isAllType());
      assertEquals(false, functionType0.isNoResolvedType());
      assertEquals(true, functionType0.hasInstanceType());
      assertEquals(true, functionType0.isConstructor());
      assertEquals(false, functionType0.isBooleanValueType());
      assertEquals(false, functionType0.isStringValueType());
      assertNull(functionType0.getTemplateTypeName());
      assertEquals(false, functionType0.isTemplateType());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertEquals(true, functionType0.canBeCalled());
      assertEquals(false, functionType0.isCheckedUnknownType());
      assertEquals(false, functionType0.isUnionType());
      assertEquals(false, functionType0.hasCachedValues());
      assertEquals(false, functionType0.isNumberValueType());
      assertEquals(false, functionType0.isEnumElementType());
      assertEquals(false, functionType0.isNominalConstructor());
      assertEquals(true, functionType0.isFunctionType());
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      boolean boolean1 = functionType0.defineInferredProperty(string0, (JSType) noType0, node0);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean0 == boolean1);
      assertTrue(boolean1);
      assertEquals(false, noType0.isBooleanValueType());
      assertEquals(false, noType0.hasCachedValues());
      assertEquals(false, noType0.isUnionType());
      assertEquals(false, noType0.isAllType());
      assertEquals(false, noType0.isNullType());
      assertEquals(true, noType0.matchesStringContext());
      assertEquals(2147483647, noType0.getMaxArguments());
      assertEquals(true, noType0.hasInstanceType());
      assertEquals(0, noType0.getExtendedInterfacesCount());
      assertEquals(false, noType0.isTemplateType());
      assertEquals(true, noType0.isConstructor());
      assertEquals(false, noType0.isOrdinaryFunction());
      assertEquals(true, noType0.matchesObjectContext());
      assertEquals(true, noType0.isNoType());
      assertNull(noType0.getTemplateTypeName());
      assertEquals(false, noType0.isRecordType());
      assertEquals(true, noType0.isNullable());
      assertEquals(false, noType0.isNoResolvedType());
      assertEquals(false, noType0.isFunctionPrototypeType());
      assertEquals(false, noType0.isEnumType());
      assertEquals(false, noType0.isFunctionType());
      assertNull(noType0.getReferenceName());
      assertEquals(2147483647, noType0.getPropertiesCount());
      assertEquals(false, noType0.isEnumElementType());
      assertEquals(false, noType0.isStringValueType());
      assertEquals(false, noType0.isNoObjectType());
      assertEquals(true, noType0.canBeCalled());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertEquals(true, noType0.matchesNumberContext());
      assertEquals(false, noType0.isCheckedUnknownType());
      assertEquals(false, noType0.isVoidType());
      assertEquals(false, noType0.isNumberValueType());
      assertEquals(false, noType0.isNominalType());
      assertEquals(false, noType0.isNominalConstructor());
      assertEquals(false, noType0.isResolved());
      assertEquals(false, noType0.isReturnTypeInferred());
      assertEquals(false, noType0.isInterface());
      assertEquals(false, functionType0.isRecordType());
      assertEquals(false, functionType0.isVoidType());
      assertEquals(false, functionType0.isEnumType());
      assertEquals(2147483647, functionType0.getMaxArguments());
      assertEquals(false, functionType0.isFunctionPrototypeType());
      assertEquals(false, functionType0.isOrdinaryFunction());
      assertEquals(false, functionType0.isNoObjectType());
      assertEquals(true, functionType0.hasCachedValues());
      assertEquals(false, functionType0.isResolved());
      assertEquals(false, functionType0.isInterface());
      assertEquals(false, functionType0.isNominalType());
      assertEquals(false, functionType0.isNullType());
      assertEquals(false, functionType0.isNoType());
      assertEquals(false, functionType0.isReturnTypeInferred());
      assertEquals(false, functionType0.isAllType());
      assertEquals(false, functionType0.isNoResolvedType());
      assertEquals(true, functionType0.hasInstanceType());
      assertEquals(true, functionType0.isConstructor());
      assertEquals(false, functionType0.isBooleanValueType());
      assertEquals(false, functionType0.isStringValueType());
      assertNull(functionType0.getTemplateTypeName());
      assertEquals(false, functionType0.isTemplateType());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertEquals(true, functionType0.canBeCalled());
      assertEquals(false, functionType0.isCheckedUnknownType());
      assertEquals(false, functionType0.isUnionType());
      assertEquals(false, functionType0.isNumberValueType());
      assertEquals(false, functionType0.isEnumElementType());
      assertEquals(false, functionType0.isNominalConstructor());
      assertEquals(true, functionType0.isFunctionType());
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      FunctionType functionType1 = (FunctionType)functionType0.resolveInternal(simpleErrorReporter0, noType0);
      assertNotNull(functionType1);
      assertSame(functionType1, functionType0);
      assertSame(functionType0, functionType1);
      assertTrue(boolean0 == boolean1);
      assertEquals(false, noType0.isBooleanValueType());
      assertEquals(false, noType0.hasCachedValues());
      assertEquals(false, noType0.isUnionType());
      assertEquals(false, noType0.isAllType());
      assertEquals(false, noType0.isNullType());
      assertEquals(true, noType0.matchesStringContext());
      assertEquals(2147483647, noType0.getMaxArguments());
      assertEquals(true, noType0.hasInstanceType());
      assertEquals(0, noType0.getExtendedInterfacesCount());
      assertEquals(false, noType0.isTemplateType());
      assertEquals(true, noType0.isResolved());
      assertEquals(true, noType0.isConstructor());
      assertEquals(false, noType0.isOrdinaryFunction());
      assertEquals(true, noType0.matchesObjectContext());
      assertEquals(true, noType0.isNoType());
      assertNull(noType0.getTemplateTypeName());
      assertEquals(false, noType0.isRecordType());
      assertEquals(true, noType0.isNullable());
      assertEquals(false, noType0.isNoResolvedType());
      assertEquals(false, noType0.isFunctionPrototypeType());
      assertEquals(false, noType0.isEnumType());
      assertEquals(false, noType0.isFunctionType());
      assertNull(noType0.getReferenceName());
      assertEquals(2147483647, noType0.getPropertiesCount());
      assertEquals(false, noType0.isEnumElementType());
      assertEquals(false, noType0.isStringValueType());
      assertEquals(false, noType0.isNoObjectType());
      assertEquals(true, noType0.canBeCalled());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertEquals(true, noType0.matchesNumberContext());
      assertEquals(false, noType0.isCheckedUnknownType());
      assertEquals(false, noType0.isVoidType());
      assertEquals(false, noType0.isNumberValueType());
      assertEquals(false, noType0.isNominalType());
      assertEquals(false, noType0.isNominalConstructor());
      assertEquals(false, noType0.isReturnTypeInferred());
      assertEquals(false, noType0.isInterface());
      assertEquals(false, functionType1.isEnumElementType());
      assertEquals(false, functionType1.isStringValueType());
      assertEquals(false, functionType1.isNominalType());
      assertEquals(false, functionType1.isEnumType());
      assertEquals(false, functionType1.isVoidType());
      assertEquals(true, functionType1.isConstructor());
      assertEquals(true, functionType1.isFunctionType());
      assertEquals(false, functionType1.isCheckedUnknownType());
      assertEquals(false, functionType1.isNoType());
      assertEquals(2147483647, functionType1.getMaxArguments());
      assertEquals(false, functionType1.isTemplateType());
      assertEquals(true, functionType1.hasInstanceType());
      assertEquals(false, functionType1.isNominalConstructor());
      assertEquals(true, functionType1.hasCachedValues());
      assertEquals(BooleanLiteralSet.TRUE, functionType1.getPossibleToBooleanOutcomes());
      assertEquals(true, functionType1.canBeCalled());
      assertEquals(false, functionType1.isInterface());
      assertEquals(false, functionType1.isNullType());
      assertEquals(false, functionType1.isAllType());
      assertEquals(false, functionType1.isOrdinaryFunction());
      assertNull(functionType1.getTemplateTypeName());
      assertEquals(true, functionType1.isResolved());
      assertEquals(false, functionType1.isNoObjectType());
      assertEquals(false, functionType1.isReturnTypeInferred());
      assertEquals(false, functionType1.isBooleanValueType());
      assertEquals(false, functionType1.isNoResolvedType());
      assertEquals(false, functionType1.isNumberValueType());
      assertEquals(0, functionType1.getExtendedInterfacesCount());
      assertEquals(false, functionType1.isRecordType());
      assertEquals(false, functionType1.isUnionType());
      assertEquals(false, functionType1.isFunctionPrototypeType());
      assertEquals(false, functionType0.isRecordType());
      assertEquals(false, functionType0.isVoidType());
      assertEquals(false, functionType0.isEnumType());
      assertEquals(2147483647, functionType0.getMaxArguments());
      assertEquals(false, functionType0.isFunctionPrototypeType());
      assertEquals(false, functionType0.isOrdinaryFunction());
      assertEquals(false, functionType0.isNoObjectType());
      assertEquals(true, functionType0.hasCachedValues());
      assertEquals(false, functionType0.isInterface());
      assertEquals(false, functionType0.isNominalType());
      assertEquals(false, functionType0.isNullType());
      assertEquals(false, functionType0.isNoType());
      assertEquals(false, functionType0.isReturnTypeInferred());
      assertEquals(false, functionType0.isAllType());
      assertEquals(true, functionType0.isResolved());
      assertEquals(false, functionType0.isNoResolvedType());
      assertEquals(true, functionType0.hasInstanceType());
      assertEquals(true, functionType0.isConstructor());
      assertEquals(false, functionType0.isBooleanValueType());
      assertEquals(false, functionType0.isStringValueType());
      assertNull(functionType0.getTemplateTypeName());
      assertEquals(false, functionType0.isTemplateType());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertEquals(true, functionType0.canBeCalled());
      assertEquals(false, functionType0.isCheckedUnknownType());
      assertEquals(false, functionType0.isUnionType());
      assertEquals(false, functionType0.isNumberValueType());
      assertEquals(false, functionType0.isEnumElementType());
      assertEquals(false, functionType0.isNominalConstructor());
      assertEquals(true, functionType0.isFunctionType());
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
  }

  @Test
  public void test02()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      String string0 = "";
      boolean boolean0 = true;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0, boolean0);
      assertNotNull(jSTypeRegistry0);
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      NoType noType0 = new NoType(jSTypeRegistry0);
      assertNotNull(noType0);
      assertEquals(false, noType0.isFunctionPrototypeType());
      assertEquals(false, noType0.isNullType());
      assertEquals(false, noType0.isNoObjectType());
      assertEquals(false, noType0.isResolved());
      assertEquals(true, noType0.canBeCalled());
      assertEquals(false, noType0.hasCachedValues());
      assertEquals(false, noType0.isNoResolvedType());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noType0.isVoidType());
      assertEquals(true, noType0.matchesObjectContext());
      assertEquals(true, noType0.hasInstanceType());
      assertEquals(false, noType0.isBooleanValueType());
      assertEquals(true, noType0.matchesNumberContext());
      assertEquals(false, noType0.isNumberValueType());
      assertEquals(false, noType0.isTemplateType());
      assertEquals(0, noType0.getExtendedInterfacesCount());
      assertEquals(false, noType0.isRecordType());
      assertEquals(false, noType0.isAllType());
      assertEquals(false, noType0.isNominalConstructor());
      assertEquals(true, noType0.isNullable());
      assertEquals(false, noType0.isNominalType());
      assertNull(noType0.getReferenceName());
      assertEquals(false, noType0.isOrdinaryFunction());
      assertNull(noType0.getTemplateTypeName());
      assertEquals(false, noType0.isUnionType());
      assertEquals(true, noType0.isNoType());
      assertEquals(2147483647, noType0.getPropertiesCount());
      assertEquals(false, noType0.isReturnTypeInferred());
      assertEquals(false, noType0.isEnumElementType());
      assertEquals(true, noType0.isConstructor());
      assertEquals(false, noType0.isFunctionType());
      assertEquals(false, noType0.isInterface());
      assertEquals(false, noType0.isStringValueType());
      assertEquals(false, noType0.isEnumType());
      assertEquals(2147483647, noType0.getMaxArguments());
      assertEquals(true, noType0.matchesStringContext());
      assertEquals(false, noType0.isCheckedUnknownType());
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      Node node0 = noType0.getPropertyNode(string0);
      assertNull(node0);
      assertEquals(false, noType0.isFunctionPrototypeType());
      assertEquals(false, noType0.isNullType());
      assertEquals(false, noType0.isNoObjectType());
      assertEquals(false, noType0.isResolved());
      assertEquals(true, noType0.canBeCalled());
      assertEquals(false, noType0.hasCachedValues());
      assertEquals(false, noType0.isNoResolvedType());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noType0.isVoidType());
      assertEquals(true, noType0.matchesObjectContext());
      assertEquals(true, noType0.hasInstanceType());
      assertEquals(false, noType0.isBooleanValueType());
      assertEquals(true, noType0.matchesNumberContext());
      assertEquals(false, noType0.isNumberValueType());
      assertEquals(false, noType0.isTemplateType());
      assertEquals(0, noType0.getExtendedInterfacesCount());
      assertEquals(false, noType0.isRecordType());
      assertEquals(false, noType0.isAllType());
      assertEquals(false, noType0.isNominalConstructor());
      assertEquals(true, noType0.isNullable());
      assertEquals(false, noType0.isNominalType());
      assertNull(noType0.getReferenceName());
      assertEquals(false, noType0.isOrdinaryFunction());
      assertNull(noType0.getTemplateTypeName());
      assertEquals(false, noType0.isUnionType());
      assertEquals(true, noType0.isNoType());
      assertEquals(2147483647, noType0.getPropertiesCount());
      assertEquals(false, noType0.isReturnTypeInferred());
      assertEquals(false, noType0.isEnumElementType());
      assertEquals(true, noType0.isConstructor());
      assertEquals(false, noType0.isFunctionType());
      assertEquals(false, noType0.isInterface());
      assertEquals(false, noType0.isStringValueType());
      assertEquals(false, noType0.isEnumType());
      assertEquals(2147483647, noType0.getMaxArguments());
      assertEquals(true, noType0.matchesStringContext());
      assertEquals(false, noType0.isCheckedUnknownType());
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      FunctionType functionType0 = jSTypeRegistry0.createConstructorType(string0, node0, node0, (JSType) noType0);
      assertNotNull(functionType0);
      assertEquals(false, functionType0.isTemplateType());
      assertEquals(false, functionType0.isEnumElementType());
      assertEquals(true, functionType0.isFunctionType());
      assertEquals(false, functionType0.isRecordType());
      assertEquals(false, functionType0.isEnumType());
      assertEquals(false, functionType0.isUnionType());
      assertEquals(false, functionType0.isFunctionPrototypeType());
      assertEquals(false, functionType0.isVoidType());
      assertEquals(false, functionType0.isNoType());
      assertEquals(false, functionType0.isOrdinaryFunction());
      assertEquals(false, functionType0.hasCachedValues());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, functionType0.isAllType());
      assertEquals(false, functionType0.isNominalType());
      assertEquals(false, functionType0.isCheckedUnknownType());
      assertEquals(true, functionType0.canBeCalled());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertEquals(false, functionType0.isNoResolvedType());
      assertEquals(2147483647, functionType0.getMaxArguments());
      assertEquals(false, functionType0.isNominalConstructor());
      assertNull(functionType0.getTemplateTypeName());
      assertEquals(false, functionType0.isNullType());
      assertEquals(false, functionType0.isResolved());
      assertEquals(false, functionType0.isReturnTypeInferred());
      assertEquals(false, functionType0.isStringValueType());
      assertEquals(false, functionType0.isNumberValueType());
      assertEquals(true, functionType0.hasInstanceType());
      assertEquals(false, functionType0.isNoObjectType());
      assertEquals(false, functionType0.isInterface());
      assertEquals(false, functionType0.isBooleanValueType());
      assertEquals(true, functionType0.isConstructor());
      assertEquals(false, noType0.isFunctionPrototypeType());
      assertEquals(false, noType0.isNullType());
      assertEquals(false, noType0.isNoObjectType());
      assertEquals(false, noType0.isResolved());
      assertEquals(true, noType0.canBeCalled());
      assertEquals(false, noType0.hasCachedValues());
      assertEquals(false, noType0.isNoResolvedType());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noType0.isVoidType());
      assertEquals(true, noType0.matchesObjectContext());
      assertEquals(true, noType0.hasInstanceType());
      assertEquals(false, noType0.isBooleanValueType());
      assertEquals(true, noType0.matchesNumberContext());
      assertEquals(false, noType0.isNumberValueType());
      assertEquals(false, noType0.isTemplateType());
      assertEquals(0, noType0.getExtendedInterfacesCount());
      assertEquals(false, noType0.isRecordType());
      assertEquals(false, noType0.isAllType());
      assertEquals(false, noType0.isNominalConstructor());
      assertEquals(true, noType0.isNullable());
      assertEquals(false, noType0.isNominalType());
      assertNull(noType0.getReferenceName());
      assertEquals(false, noType0.isOrdinaryFunction());
      assertNull(noType0.getTemplateTypeName());
      assertEquals(false, noType0.isUnionType());
      assertEquals(true, noType0.isNoType());
      assertEquals(2147483647, noType0.getPropertiesCount());
      assertEquals(false, noType0.isReturnTypeInferred());
      assertEquals(false, noType0.isEnumElementType());
      assertEquals(true, noType0.isConstructor());
      assertEquals(false, noType0.isFunctionType());
      assertEquals(false, noType0.isInterface());
      assertEquals(false, noType0.isStringValueType());
      assertEquals(false, noType0.isEnumType());
      assertEquals(2147483647, noType0.getMaxArguments());
      assertEquals(true, noType0.matchesStringContext());
      assertEquals(false, noType0.isCheckedUnknownType());
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      functionType0.setPrototypeBasedOn((ObjectType) noType0);
      assertEquals(false, functionType0.isTemplateType());
      assertEquals(false, functionType0.isEnumElementType());
      assertEquals(true, functionType0.isFunctionType());
      assertEquals(false, functionType0.isRecordType());
      assertEquals(false, functionType0.isEnumType());
      assertEquals(false, functionType0.isUnionType());
      assertEquals(false, functionType0.isFunctionPrototypeType());
      assertEquals(false, functionType0.isVoidType());
      assertEquals(false, functionType0.isNoType());
      assertEquals(false, functionType0.isOrdinaryFunction());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, functionType0.isAllType());
      assertEquals(false, functionType0.isNominalType());
      assertEquals(false, functionType0.isCheckedUnknownType());
      assertEquals(true, functionType0.canBeCalled());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertEquals(false, functionType0.isNoResolvedType());
      assertEquals(2147483647, functionType0.getMaxArguments());
      assertEquals(false, functionType0.isNominalConstructor());
      assertEquals(true, functionType0.hasCachedValues());
      assertNull(functionType0.getTemplateTypeName());
      assertEquals(false, functionType0.isNullType());
      assertEquals(false, functionType0.isResolved());
      assertEquals(false, functionType0.isReturnTypeInferred());
      assertEquals(false, functionType0.isStringValueType());
      assertEquals(false, functionType0.isNumberValueType());
      assertEquals(true, functionType0.hasInstanceType());
      assertEquals(false, functionType0.isNoObjectType());
      assertEquals(false, functionType0.isInterface());
      assertEquals(false, functionType0.isBooleanValueType());
      assertEquals(true, functionType0.isConstructor());
      assertEquals(false, noType0.isNullType());
      assertEquals(false, noType0.isNoObjectType());
      assertEquals(false, noType0.isResolved());
      assertEquals(true, noType0.canBeCalled());
      assertEquals(true, noType0.isFunctionPrototypeType());
      assertEquals(false, noType0.hasCachedValues());
      assertEquals(false, noType0.isNoResolvedType());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noType0.isVoidType());
      assertEquals(true, noType0.matchesObjectContext());
      assertEquals(true, noType0.hasInstanceType());
      assertEquals(false, noType0.isBooleanValueType());
      assertEquals(true, noType0.matchesNumberContext());
      assertEquals(false, noType0.isNumberValueType());
      assertEquals(false, noType0.isTemplateType());
      assertEquals(0, noType0.getExtendedInterfacesCount());
      assertEquals(false, noType0.isRecordType());
      assertEquals(false, noType0.isAllType());
      assertEquals(false, noType0.isNominalConstructor());
      assertEquals(true, noType0.isNullable());
      assertEquals(false, noType0.isNominalType());
      assertNull(noType0.getReferenceName());
      assertEquals(false, noType0.isOrdinaryFunction());
      assertNull(noType0.getTemplateTypeName());
      assertEquals(false, noType0.isUnionType());
      assertEquals(true, noType0.isNoType());
      assertEquals(2147483647, noType0.getPropertiesCount());
      assertEquals(false, noType0.isReturnTypeInferred());
      assertEquals(false, noType0.isEnumElementType());
      assertEquals(true, noType0.isConstructor());
      assertEquals(false, noType0.isFunctionType());
      assertEquals(false, noType0.isInterface());
      assertEquals(false, noType0.isStringValueType());
      assertEquals(false, noType0.isEnumType());
      assertEquals(2147483647, noType0.getMaxArguments());
      assertEquals(true, noType0.matchesStringContext());
      assertEquals(false, noType0.isCheckedUnknownType());
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      Iterable<ObjectType> iterable0 = noType0.getCtorImplementedInterfaces();
      assertNotNull(iterable0);
      assertEquals(false, noType0.isNullType());
      assertEquals(false, noType0.isNoObjectType());
      assertEquals(false, noType0.isResolved());
      assertEquals(true, noType0.canBeCalled());
      assertEquals(true, noType0.isFunctionPrototypeType());
      assertEquals(false, noType0.hasCachedValues());
      assertEquals(false, noType0.isNoResolvedType());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noType0.isVoidType());
      assertEquals(true, noType0.matchesObjectContext());
      assertEquals(true, noType0.hasInstanceType());
      assertEquals(false, noType0.isBooleanValueType());
      assertEquals(true, noType0.matchesNumberContext());
      assertEquals(false, noType0.isNumberValueType());
      assertEquals(false, noType0.isTemplateType());
      assertEquals(0, noType0.getExtendedInterfacesCount());
      assertEquals(false, noType0.isRecordType());
      assertEquals(false, noType0.isAllType());
      assertEquals(false, noType0.isNominalConstructor());
      assertEquals(true, noType0.isNullable());
      assertEquals(false, noType0.isNominalType());
      assertNull(noType0.getReferenceName());
      assertEquals(false, noType0.isOrdinaryFunction());
      assertNull(noType0.getTemplateTypeName());
      assertEquals(false, noType0.isUnionType());
      assertEquals(true, noType0.isNoType());
      assertEquals(2147483647, noType0.getPropertiesCount());
      assertEquals(false, noType0.isReturnTypeInferred());
      assertEquals(false, noType0.isEnumElementType());
      assertEquals(true, noType0.isConstructor());
      assertEquals(false, noType0.isFunctionType());
      assertEquals(false, noType0.isInterface());
      assertEquals(false, noType0.isStringValueType());
      assertEquals(false, noType0.isEnumType());
      assertEquals(2147483647, noType0.getMaxArguments());
      assertEquals(true, noType0.matchesStringContext());
      assertEquals(false, noType0.isCheckedUnknownType());
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
  }

  @Test
  public void test03()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      boolean boolean0 = true;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0, boolean0);
      assertNotNull(jSTypeRegistry0);
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      NoType noType0 = new NoType(jSTypeRegistry0);
      assertNotNull(noType0);
      assertEquals(false, noType0.isNumberValueType());
      assertEquals(false, noType0.isReturnTypeInferred());
      assertEquals(false, noType0.hasCachedValues());
      assertEquals(false, noType0.isNoResolvedType());
      assertEquals(false, noType0.isOrdinaryFunction());
      assertEquals(false, noType0.isNoObjectType());
      assertEquals(false, noType0.isRecordType());
      assertEquals(true, noType0.isNullable());
      assertEquals(false, noType0.isUnionType());
      assertEquals(false, noType0.isStringValueType());
      assertEquals(true, noType0.matchesNumberContext());
      assertEquals(true, noType0.matchesObjectContext());
      assertEquals(true, noType0.matchesStringContext());
      assertEquals(false, noType0.isFunctionType());
      assertEquals(false, noType0.isNullType());
      assertEquals(false, noType0.isTemplateType());
      assertEquals(false, noType0.isVoidType());
      assertEquals(true, noType0.hasInstanceType());
      assertEquals(true, noType0.isConstructor());
      assertEquals(false, noType0.isFunctionPrototypeType());
      assertEquals(false, noType0.isBooleanValueType());
      assertEquals(false, noType0.isEnumType());
      assertEquals(false, noType0.isCheckedUnknownType());
      assertEquals(true, noType0.isNoType());
      assertEquals(false, noType0.isEnumElementType());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noType0.isNominalType());
      assertEquals(2147483647, noType0.getPropertiesCount());
      assertEquals(false, noType0.isInterface());
      assertEquals(false, noType0.isAllType());
      assertEquals(false, noType0.isNominalConstructor());
      assertEquals(false, noType0.isResolved());
      assertNull(noType0.getReferenceName());
      assertEquals(2147483647, noType0.getMaxArguments());
      assertEquals(true, noType0.canBeCalled());
      assertEquals(0, noType0.getExtendedInterfacesCount());
      assertNull(noType0.getTemplateTypeName());
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      Iterable<ObjectType> iterable0 = noType0.getCtorImplementedInterfaces();
      assertNotNull(iterable0);
      assertEquals(false, noType0.isNumberValueType());
      assertEquals(false, noType0.isReturnTypeInferred());
      assertEquals(false, noType0.hasCachedValues());
      assertEquals(false, noType0.isNoResolvedType());
      assertEquals(false, noType0.isOrdinaryFunction());
      assertEquals(false, noType0.isNoObjectType());
      assertEquals(false, noType0.isRecordType());
      assertEquals(true, noType0.isNullable());
      assertEquals(false, noType0.isUnionType());
      assertEquals(false, noType0.isStringValueType());
      assertEquals(true, noType0.matchesNumberContext());
      assertEquals(true, noType0.matchesObjectContext());
      assertEquals(true, noType0.matchesStringContext());
      assertEquals(false, noType0.isFunctionType());
      assertEquals(false, noType0.isNullType());
      assertEquals(false, noType0.isTemplateType());
      assertEquals(false, noType0.isVoidType());
      assertEquals(true, noType0.hasInstanceType());
      assertEquals(true, noType0.isConstructor());
      assertEquals(false, noType0.isFunctionPrototypeType());
      assertEquals(false, noType0.isBooleanValueType());
      assertEquals(false, noType0.isEnumType());
      assertEquals(false, noType0.isCheckedUnknownType());
      assertEquals(true, noType0.isNoType());
      assertEquals(false, noType0.isEnumElementType());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noType0.isNominalType());
      assertEquals(2147483647, noType0.getPropertiesCount());
      assertEquals(false, noType0.isInterface());
      assertEquals(false, noType0.isAllType());
      assertEquals(false, noType0.isNominalConstructor());
      assertEquals(false, noType0.isResolved());
      assertNull(noType0.getReferenceName());
      assertEquals(2147483647, noType0.getMaxArguments());
      assertEquals(true, noType0.canBeCalled());
      assertEquals(0, noType0.getExtendedInterfacesCount());
      assertNull(noType0.getTemplateTypeName());
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
  }

  @Test
  public void test04()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      String string0 = "";
      boolean boolean0 = true;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0, boolean0);
      assertNotNull(jSTypeRegistry0);
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      NoType noType0 = new NoType(jSTypeRegistry0);
      assertNotNull(noType0);
      assertEquals(false, noType0.isNoResolvedType());
      assertEquals(true, noType0.matchesStringContext());
      assertEquals(false, noType0.isNumberValueType());
      assertEquals(false, noType0.isFunctionPrototypeType());
      assertEquals(false, noType0.isInterface());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noType0.isNoObjectType());
      assertNull(noType0.getReferenceName());
      assertEquals(false, noType0.isVoidType());
      assertEquals(false, noType0.isNullType());
      assertEquals(2147483647, noType0.getMaxArguments());
      assertEquals(false, noType0.isTemplateType());
      assertEquals(false, noType0.isStringValueType());
      assertEquals(true, noType0.isNullable());
      assertEquals(0, noType0.getExtendedInterfacesCount());
      assertEquals(false, noType0.isBooleanValueType());
      assertEquals(false, noType0.isNominalConstructor());
      assertEquals(true, noType0.matchesNumberContext());
      assertEquals(false, noType0.isCheckedUnknownType());
      assertNull(noType0.getTemplateTypeName());
      assertEquals(2147483647, noType0.getPropertiesCount());
      assertEquals(true, noType0.isConstructor());
      assertEquals(true, noType0.isNoType());
      assertEquals(false, noType0.isResolved());
      assertEquals(false, noType0.isOrdinaryFunction());
      assertEquals(false, noType0.isFunctionType());
      assertEquals(false, noType0.isUnionType());
      assertEquals(false, noType0.isRecordType());
      assertEquals(true, noType0.matchesObjectContext());
      assertEquals(true, noType0.hasInstanceType());
      assertEquals(false, noType0.isEnumType());
      assertEquals(false, noType0.isReturnTypeInferred());
      assertEquals(true, noType0.canBeCalled());
      assertEquals(false, noType0.isAllType());
      assertEquals(false, noType0.hasCachedValues());
      assertEquals(false, noType0.isEnumElementType());
      assertEquals(false, noType0.isNominalType());
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      Node node0 = noType0.getPropertyNode(string0);
      assertNull(node0);
      assertEquals(false, noType0.isNoResolvedType());
      assertEquals(true, noType0.matchesStringContext());
      assertEquals(false, noType0.isNumberValueType());
      assertEquals(false, noType0.isFunctionPrototypeType());
      assertEquals(false, noType0.isInterface());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noType0.isNoObjectType());
      assertNull(noType0.getReferenceName());
      assertEquals(false, noType0.isVoidType());
      assertEquals(false, noType0.isNullType());
      assertEquals(2147483647, noType0.getMaxArguments());
      assertEquals(false, noType0.isTemplateType());
      assertEquals(false, noType0.isStringValueType());
      assertEquals(true, noType0.isNullable());
      assertEquals(0, noType0.getExtendedInterfacesCount());
      assertEquals(false, noType0.isBooleanValueType());
      assertEquals(false, noType0.isNominalConstructor());
      assertEquals(true, noType0.matchesNumberContext());
      assertEquals(false, noType0.isCheckedUnknownType());
      assertNull(noType0.getTemplateTypeName());
      assertEquals(2147483647, noType0.getPropertiesCount());
      assertEquals(true, noType0.isConstructor());
      assertEquals(true, noType0.isNoType());
      assertEquals(false, noType0.isResolved());
      assertEquals(false, noType0.isOrdinaryFunction());
      assertEquals(false, noType0.isFunctionType());
      assertEquals(false, noType0.isUnionType());
      assertEquals(false, noType0.isRecordType());
      assertEquals(true, noType0.matchesObjectContext());
      assertEquals(true, noType0.hasInstanceType());
      assertEquals(false, noType0.isEnumType());
      assertEquals(false, noType0.isReturnTypeInferred());
      assertEquals(true, noType0.canBeCalled());
      assertEquals(false, noType0.isAllType());
      assertEquals(false, noType0.hasCachedValues());
      assertEquals(false, noType0.isEnumElementType());
      assertEquals(false, noType0.isNominalType());
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      FunctionType functionType0 = jSTypeRegistry0.createConstructorType(string0, node0, node0, (JSType) noType0);
      assertNotNull(functionType0);
      assertEquals(false, noType0.isNoResolvedType());
      assertEquals(true, noType0.matchesStringContext());
      assertEquals(false, noType0.isNumberValueType());
      assertEquals(false, noType0.isFunctionPrototypeType());
      assertEquals(false, noType0.isInterface());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noType0.isNoObjectType());
      assertNull(noType0.getReferenceName());
      assertEquals(false, noType0.isVoidType());
      assertEquals(false, noType0.isNullType());
      assertEquals(2147483647, noType0.getMaxArguments());
      assertEquals(false, noType0.isTemplateType());
      assertEquals(false, noType0.isStringValueType());
      assertEquals(true, noType0.isNullable());
      assertEquals(0, noType0.getExtendedInterfacesCount());
      assertEquals(false, noType0.isBooleanValueType());
      assertEquals(false, noType0.isNominalConstructor());
      assertEquals(true, noType0.matchesNumberContext());
      assertEquals(false, noType0.isCheckedUnknownType());
      assertNull(noType0.getTemplateTypeName());
      assertEquals(2147483647, noType0.getPropertiesCount());
      assertEquals(true, noType0.isConstructor());
      assertEquals(true, noType0.isNoType());
      assertEquals(false, noType0.isResolved());
      assertEquals(false, noType0.isOrdinaryFunction());
      assertEquals(false, noType0.isFunctionType());
      assertEquals(false, noType0.isUnionType());
      assertEquals(false, noType0.isRecordType());
      assertEquals(true, noType0.matchesObjectContext());
      assertEquals(true, noType0.hasInstanceType());
      assertEquals(false, noType0.isEnumType());
      assertEquals(false, noType0.isReturnTypeInferred());
      assertEquals(true, noType0.canBeCalled());
      assertEquals(false, noType0.isAllType());
      assertEquals(false, noType0.hasCachedValues());
      assertEquals(false, noType0.isEnumElementType());
      assertEquals(false, noType0.isNominalType());
      assertEquals(false, functionType0.isFunctionPrototypeType());
      assertEquals(false, functionType0.isEnumElementType());
      assertEquals(false, functionType0.isBooleanValueType());
      assertEquals(false, functionType0.isNumberValueType());
      assertEquals(true, functionType0.canBeCalled());
      assertEquals(false, functionType0.isRecordType());
      assertEquals(true, functionType0.isConstructor());
      assertEquals(false, functionType0.isNominalConstructor());
      assertEquals(false, functionType0.isVoidType());
      assertEquals(false, functionType0.isTemplateType());
      assertEquals(false, functionType0.isEnumType());
      assertEquals(false, functionType0.isOrdinaryFunction());
      assertEquals(false, functionType0.isReturnTypeInferred());
      assertEquals(false, functionType0.isCheckedUnknownType());
      assertEquals(true, functionType0.isFunctionType());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertEquals(false, functionType0.isNoType());
      assertEquals(2147483647, functionType0.getMaxArguments());
      assertEquals(false, functionType0.isUnionType());
      assertEquals(false, functionType0.isResolved());
      assertEquals(false, functionType0.isAllType());
      assertEquals(false, functionType0.isNoObjectType());
      assertEquals(false, functionType0.isNoResolvedType());
      assertEquals(false, functionType0.hasCachedValues());
      assertEquals(false, functionType0.isStringValueType());
      assertEquals(false, functionType0.isNullType());
      assertEquals(false, functionType0.isInterface());
      assertEquals(false, functionType0.isNominalType());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertEquals(true, functionType0.hasInstanceType());
      assertNull(functionType0.getTemplateTypeName());
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      FunctionType functionType1 = (FunctionType)functionType0.resolveInternal(simpleErrorReporter0, noType0);
      assertNotNull(functionType1);
      assertSame(functionType1, functionType0);
      assertSame(functionType0, functionType1);
      assertEquals(true, functionType1.hasInstanceType());
      assertEquals(0, functionType1.getExtendedInterfacesCount());
      assertEquals(false, functionType1.isBooleanValueType());
      assertEquals(true, functionType1.isConstructor());
      assertEquals(false, functionType1.isNoType());
      assertEquals(false, functionType1.isReturnTypeInferred());
      assertEquals(true, functionType1.isFunctionType());
      assertEquals(false, functionType1.isUnionType());
      assertNull(functionType1.getTemplateTypeName());
      assertEquals(false, functionType1.isNominalType());
      assertEquals(true, functionType1.canBeCalled());
      assertEquals(false, functionType1.isRecordType());
      assertEquals(false, functionType1.isEnumElementType());
      assertEquals(false, functionType1.isAllType());
      assertEquals(false, functionType1.isInterface());
      assertEquals(true, functionType1.isResolved());
      assertEquals(false, functionType1.isNumberValueType());
      assertEquals(2147483647, functionType1.getMaxArguments());
      assertEquals(false, functionType1.isStringValueType());
      assertEquals(false, functionType1.isCheckedUnknownType());
      assertEquals(false, functionType1.isNominalConstructor());
      assertEquals(false, functionType1.isTemplateType());
      assertEquals(false, functionType1.isNoResolvedType());
      assertEquals(false, functionType1.isOrdinaryFunction());
      assertEquals(false, functionType1.isNullType());
      assertEquals(true, functionType1.hasCachedValues());
      assertEquals(false, functionType1.isFunctionPrototypeType());
      assertEquals(false, functionType1.isEnumType());
      assertEquals(false, functionType1.isNoObjectType());
      assertEquals(BooleanLiteralSet.TRUE, functionType1.getPossibleToBooleanOutcomes());
      assertEquals(false, functionType1.isVoidType());
      assertEquals(false, noType0.isNoResolvedType());
      assertEquals(true, noType0.matchesStringContext());
      assertEquals(false, noType0.isNumberValueType());
      assertEquals(false, noType0.isFunctionPrototypeType());
      assertEquals(false, noType0.isInterface());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noType0.isNoObjectType());
      assertNull(noType0.getReferenceName());
      assertEquals(false, noType0.isVoidType());
      assertEquals(false, noType0.isNullType());
      assertEquals(2147483647, noType0.getMaxArguments());
      assertEquals(false, noType0.isTemplateType());
      assertEquals(false, noType0.isStringValueType());
      assertEquals(true, noType0.isNullable());
      assertEquals(0, noType0.getExtendedInterfacesCount());
      assertEquals(false, noType0.isBooleanValueType());
      assertEquals(false, noType0.isNominalConstructor());
      assertEquals(true, noType0.matchesNumberContext());
      assertEquals(false, noType0.isCheckedUnknownType());
      assertNull(noType0.getTemplateTypeName());
      assertEquals(2147483647, noType0.getPropertiesCount());
      assertEquals(true, noType0.isConstructor());
      assertEquals(true, noType0.isNoType());
      assertEquals(true, noType0.isResolved());
      assertEquals(false, noType0.isOrdinaryFunction());
      assertEquals(false, noType0.isFunctionType());
      assertEquals(false, noType0.isUnionType());
      assertEquals(false, noType0.isRecordType());
      assertEquals(true, noType0.matchesObjectContext());
      assertEquals(true, noType0.hasInstanceType());
      assertEquals(false, noType0.isEnumType());
      assertEquals(false, noType0.isReturnTypeInferred());
      assertEquals(true, noType0.canBeCalled());
      assertEquals(false, noType0.isAllType());
      assertEquals(false, noType0.hasCachedValues());
      assertEquals(false, noType0.isEnumElementType());
      assertEquals(false, noType0.isNominalType());
      assertEquals(false, functionType0.isFunctionPrototypeType());
      assertEquals(false, functionType0.isEnumElementType());
      assertEquals(false, functionType0.isBooleanValueType());
      assertEquals(false, functionType0.isNumberValueType());
      assertEquals(true, functionType0.canBeCalled());
      assertEquals(false, functionType0.isRecordType());
      assertEquals(true, functionType0.isConstructor());
      assertEquals(false, functionType0.isNominalConstructor());
      assertEquals(false, functionType0.isVoidType());
      assertEquals(false, functionType0.isTemplateType());
      assertEquals(true, functionType0.hasCachedValues());
      assertEquals(false, functionType0.isEnumType());
      assertEquals(false, functionType0.isOrdinaryFunction());
      assertEquals(false, functionType0.isReturnTypeInferred());
      assertEquals(false, functionType0.isCheckedUnknownType());
      assertEquals(true, functionType0.isFunctionType());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertEquals(false, functionType0.isNoType());
      assertEquals(2147483647, functionType0.getMaxArguments());
      assertEquals(false, functionType0.isUnionType());
      assertEquals(false, functionType0.isAllType());
      assertEquals(true, functionType0.isResolved());
      assertEquals(false, functionType0.isNoObjectType());
      assertEquals(false, functionType0.isNoResolvedType());
      assertEquals(false, functionType0.isStringValueType());
      assertEquals(false, functionType0.isNullType());
      assertEquals(false, functionType0.isInterface());
      assertEquals(false, functionType0.isNominalType());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertEquals(true, functionType0.hasInstanceType());
      assertNull(functionType0.getTemplateTypeName());
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      functionType0.setPrototypeBasedOn((ObjectType) noType0);
      assertSame(functionType0, functionType1);
      assertEquals(false, noType0.isNoResolvedType());
      assertEquals(true, noType0.matchesStringContext());
      assertEquals(false, noType0.isNumberValueType());
      assertEquals(false, noType0.isInterface());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noType0.isNoObjectType());
      assertNull(noType0.getReferenceName());
      assertEquals(false, noType0.isVoidType());
      assertEquals(false, noType0.isNullType());
      assertEquals(2147483647, noType0.getMaxArguments());
      assertEquals(false, noType0.isTemplateType());
      assertEquals(false, noType0.isStringValueType());
      assertEquals(true, noType0.isNullable());
      assertEquals(0, noType0.getExtendedInterfacesCount());
      assertEquals(false, noType0.isBooleanValueType());
      assertEquals(false, noType0.isNominalConstructor());
      assertEquals(true, noType0.matchesNumberContext());
      assertEquals(false, noType0.isCheckedUnknownType());
      assertNull(noType0.getTemplateTypeName());
      assertEquals(2147483647, noType0.getPropertiesCount());
      assertEquals(true, noType0.isConstructor());
      assertEquals(true, noType0.isNoType());
      assertEquals(true, noType0.isResolved());
      assertEquals(false, noType0.isOrdinaryFunction());
      assertEquals(false, noType0.isFunctionType());
      assertEquals(false, noType0.isUnionType());
      assertEquals(false, noType0.isRecordType());
      assertEquals(true, noType0.matchesObjectContext());
      assertEquals(true, noType0.isFunctionPrototypeType());
      assertEquals(true, noType0.hasInstanceType());
      assertEquals(false, noType0.isEnumType());
      assertEquals(false, noType0.isReturnTypeInferred());
      assertEquals(true, noType0.canBeCalled());
      assertEquals(false, noType0.isAllType());
      assertEquals(false, noType0.hasCachedValues());
      assertEquals(false, noType0.isEnumElementType());
      assertEquals(false, noType0.isNominalType());
      assertEquals(false, functionType0.isFunctionPrototypeType());
      assertEquals(false, functionType0.isEnumElementType());
      assertEquals(false, functionType0.isBooleanValueType());
      assertEquals(false, functionType0.isNumberValueType());
      assertEquals(true, functionType0.canBeCalled());
      assertEquals(false, functionType0.isRecordType());
      assertEquals(true, functionType0.isConstructor());
      assertEquals(false, functionType0.isNominalConstructor());
      assertEquals(false, functionType0.isVoidType());
      assertEquals(false, functionType0.isTemplateType());
      assertEquals(true, functionType0.hasCachedValues());
      assertEquals(false, functionType0.isEnumType());
      assertEquals(false, functionType0.isOrdinaryFunction());
      assertEquals(false, functionType0.isReturnTypeInferred());
      assertEquals(false, functionType0.isCheckedUnknownType());
      assertEquals(true, functionType0.isFunctionType());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertEquals(false, functionType0.isNoType());
      assertEquals(2147483647, functionType0.getMaxArguments());
      assertEquals(false, functionType0.isUnionType());
      assertEquals(false, functionType0.isAllType());
      assertEquals(true, functionType0.isResolved());
      assertEquals(false, functionType0.isNoObjectType());
      assertEquals(false, functionType0.isNoResolvedType());
      assertEquals(false, functionType0.isStringValueType());
      assertEquals(false, functionType0.isNullType());
      assertEquals(false, functionType0.isInterface());
      assertEquals(false, functionType0.isNominalType());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertEquals(true, functionType0.hasInstanceType());
      assertNull(functionType0.getTemplateTypeName());
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
  }

  @Test
  public void test05()  throws Throwable  {
      int int0 = 0;
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      HashMap<String, RecordTypeBuilder.RecordProperty> hashMap0 = new HashMap<String, RecordTypeBuilder.RecordProperty>();
      assertNotNull(hashMap0);
      assertEquals(0, hashMap0.size());
      assertEquals("{}", hashMap0.toString());
      assertEquals(true, hashMap0.isEmpty());
      
      RecordType recordType0 = jSTypeRegistry0.createRecordType((Map<String, RecordTypeBuilder.RecordProperty>) hashMap0);
      assertNotNull(recordType0);
      assertEquals(0, hashMap0.size());
      assertEquals("{}", hashMap0.toString());
      assertEquals(true, hashMap0.isEmpty());
      assertEquals(false, recordType0.isOrdinaryFunction());
      assertEquals(false, recordType0.isNominalType());
      assertEquals(true, recordType0.isRecordType());
      assertEquals(false, recordType0.isUnionType());
      assertEquals(false, recordType0.isEnumType());
      assertEquals(false, recordType0.isEnumElementType());
      assertEquals(false, recordType0.isResolved());
      assertEquals(false, recordType0.isTemplateType());
      assertEquals(false, recordType0.isNoResolvedType());
      assertEquals(false, recordType0.isNumberValueType());
      assertEquals(false, recordType0.isNullType());
      assertEquals(false, recordType0.isNoObjectType());
      assertEquals(false, recordType0.isVoidType());
      assertEquals(false, recordType0.isInterface());
      assertEquals(BooleanLiteralSet.TRUE, recordType0.getPossibleToBooleanOutcomes());
      assertEquals(false, recordType0.isNominalConstructor());
      assertEquals(false, recordType0.isAllType());
      assertEquals(false, recordType0.isFunctionPrototypeType());
      assertEquals(false, recordType0.isNoType());
      assertEquals(false, recordType0.isBooleanValueType());
      assertEquals(false, recordType0.isFunctionType());
      assertEquals(false, recordType0.isCheckedUnknownType());
      assertEquals(false, recordType0.isConstructor());
      assertEquals(false, recordType0.isStringValueType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      NoType noType0 = new NoType(jSTypeRegistry0);
      assertNotNull(noType0);
      assertEquals(false, noType0.isUnionType());
      assertEquals(false, noType0.isNullType());
      assertEquals(false, noType0.isResolved());
      assertEquals(2147483647, noType0.getPropertiesCount());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noType0.isInterface());
      assertEquals(false, noType0.isVoidType());
      assertEquals(0, noType0.getExtendedInterfacesCount());
      assertEquals(true, noType0.matchesObjectContext());
      assertEquals(false, noType0.isNominalConstructor());
      assertEquals(false, noType0.isNoObjectType());
      assertEquals(false, noType0.isCheckedUnknownType());
      assertEquals(true, noType0.matchesStringContext());
      assertEquals(true, noType0.isConstructor());
      assertEquals(false, noType0.isEnumElementType());
      assertEquals(true, noType0.isNoType());
      assertEquals(true, noType0.hasInstanceType());
      assertEquals(false, noType0.isNoResolvedType());
      assertEquals(false, noType0.isStringValueType());
      assertEquals(false, noType0.hasCachedValues());
      assertEquals(false, noType0.isNumberValueType());
      assertEquals(false, noType0.isRecordType());
      assertEquals(false, noType0.isEnumType());
      assertEquals(false, noType0.isOrdinaryFunction());
      assertEquals(true, noType0.matchesNumberContext());
      assertEquals(false, noType0.isFunctionType());
      assertEquals(false, noType0.isTemplateType());
      assertEquals(false, noType0.isAllType());
      assertEquals(false, noType0.isReturnTypeInferred());
      assertEquals(false, noType0.isFunctionPrototypeType());
      assertEquals(false, noType0.isBooleanValueType());
      assertEquals(true, noType0.isNullable());
      assertNull(noType0.getReferenceName());
      assertEquals(true, noType0.canBeCalled());
      assertEquals(2147483647, noType0.getMaxArguments());
      assertEquals(false, noType0.isNominalType());
      assertNull(noType0.getTemplateTypeName());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      FunctionType functionType0 = noType0.getBindReturnType(int0);
      assertNotNull(functionType0);
      assertEquals(false, noType0.isUnionType());
      assertEquals(false, noType0.isNullType());
      assertEquals(false, noType0.isResolved());
      assertEquals(2147483647, noType0.getPropertiesCount());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noType0.isInterface());
      assertEquals(false, noType0.isVoidType());
      assertEquals(0, noType0.getExtendedInterfacesCount());
      assertEquals(true, noType0.matchesObjectContext());
      assertEquals(false, noType0.isNominalConstructor());
      assertEquals(false, noType0.isNoObjectType());
      assertEquals(false, noType0.isCheckedUnknownType());
      assertEquals(true, noType0.matchesStringContext());
      assertEquals(true, noType0.isConstructor());
      assertEquals(false, noType0.isEnumElementType());
      assertEquals(true, noType0.isNoType());
      assertEquals(true, noType0.hasInstanceType());
      assertEquals(false, noType0.isNoResolvedType());
      assertEquals(false, noType0.isStringValueType());
      assertEquals(false, noType0.hasCachedValues());
      assertEquals(false, noType0.isNumberValueType());
      assertEquals(false, noType0.isRecordType());
      assertEquals(false, noType0.isEnumType());
      assertEquals(false, noType0.isOrdinaryFunction());
      assertEquals(true, noType0.matchesNumberContext());
      assertEquals(false, noType0.isFunctionType());
      assertEquals(false, noType0.isTemplateType());
      assertEquals(false, noType0.isAllType());
      assertEquals(false, noType0.isReturnTypeInferred());
      assertEquals(false, noType0.isFunctionPrototypeType());
      assertEquals(false, noType0.isBooleanValueType());
      assertEquals(true, noType0.isNullable());
      assertNull(noType0.getReferenceName());
      assertEquals(true, noType0.canBeCalled());
      assertEquals(2147483647, noType0.getMaxArguments());
      assertEquals(false, noType0.isNominalType());
      assertNull(noType0.getTemplateTypeName());
      assertEquals(false, functionType0.isAllType());
      assertEquals(false, functionType0.isUnionType());
      assertEquals(false, functionType0.isBooleanValueType());
      assertEquals(false, functionType0.isInterface());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, functionType0.isResolved());
      assertEquals(false, functionType0.isNoType());
      assertEquals(false, functionType0.isNominalType());
      assertEquals(false, functionType0.isReturnTypeInferred());
      assertEquals(false, functionType0.isEnumType());
      assertEquals(false, functionType0.isRecordType());
      assertEquals(false, functionType0.isStringValueType());
      assertEquals(2147483647, functionType0.getMaxArguments());
      assertEquals(false, functionType0.isNullType());
      assertEquals(true, functionType0.isOrdinaryFunction());
      assertEquals(false, functionType0.isEnumElementType());
      assertEquals(false, functionType0.isCheckedUnknownType());
      assertEquals(false, functionType0.isConstructor());
      assertEquals(false, functionType0.isNoResolvedType());
      assertNull(functionType0.getTemplateTypeName());
      assertEquals(true, functionType0.isFunctionType());
      assertEquals(false, functionType0.isTemplateType());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertEquals(false, functionType0.isNoObjectType());
      assertEquals(false, functionType0.isFunctionPrototypeType());
      assertEquals(false, functionType0.hasCachedValues());
      assertEquals(false, functionType0.hasInstanceType());
      assertEquals(false, functionType0.isVoidType());
      assertEquals(true, functionType0.canBeCalled());
      assertEquals(false, functionType0.isNumberValueType());
      assertEquals(false, functionType0.isNominalConstructor());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      FunctionType functionType1 = (FunctionType)JSType.getGreatestSubtype(recordType0, functionType0);
      assertNotNull(functionType1);
      assertSame(functionType0, functionType1);
      assertSame(functionType1, functionType0);
      assertEquals(false, noType0.isUnionType());
      assertEquals(false, noType0.isNullType());
      assertEquals(false, noType0.isResolved());
      assertEquals(2147483647, noType0.getPropertiesCount());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noType0.isInterface());
      assertEquals(false, noType0.isVoidType());
      assertEquals(0, noType0.getExtendedInterfacesCount());
      assertEquals(true, noType0.matchesObjectContext());
      assertEquals(false, noType0.isNominalConstructor());
      assertEquals(false, noType0.isNoObjectType());
      assertEquals(false, noType0.isCheckedUnknownType());
      assertEquals(true, noType0.matchesStringContext());
      assertEquals(true, noType0.isConstructor());
      assertEquals(false, noType0.isEnumElementType());
      assertEquals(true, noType0.isNoType());
      assertEquals(true, noType0.hasInstanceType());
      assertEquals(false, noType0.isNoResolvedType());
      assertEquals(false, noType0.isStringValueType());
      assertEquals(false, noType0.hasCachedValues());
      assertEquals(false, noType0.isNumberValueType());
      assertEquals(false, noType0.isRecordType());
      assertEquals(false, noType0.isEnumType());
      assertEquals(false, noType0.isOrdinaryFunction());
      assertEquals(true, noType0.matchesNumberContext());
      assertEquals(false, noType0.isFunctionType());
      assertEquals(false, noType0.isTemplateType());
      assertEquals(false, noType0.isAllType());
      assertEquals(false, noType0.isReturnTypeInferred());
      assertEquals(false, noType0.isFunctionPrototypeType());
      assertEquals(false, noType0.isBooleanValueType());
      assertEquals(true, noType0.isNullable());
      assertNull(noType0.getReferenceName());
      assertEquals(true, noType0.canBeCalled());
      assertEquals(2147483647, noType0.getMaxArguments());
      assertEquals(false, noType0.isNominalType());
      assertNull(noType0.getTemplateTypeName());
      assertEquals(0, hashMap0.size());
      assertEquals("{}", hashMap0.toString());
      assertEquals(true, hashMap0.isEmpty());
      assertEquals(false, functionType0.isAllType());
      assertEquals(false, functionType0.isUnionType());
      assertEquals(false, functionType0.isBooleanValueType());
      assertEquals(false, functionType0.isInterface());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, functionType0.isResolved());
      assertEquals(false, functionType0.isNoType());
      assertEquals(false, functionType0.isNominalType());
      assertEquals(false, functionType0.isReturnTypeInferred());
      assertEquals(false, functionType0.isEnumType());
      assertEquals(false, functionType0.isRecordType());
      assertEquals(false, functionType0.isStringValueType());
      assertEquals(2147483647, functionType0.getMaxArguments());
      assertEquals(false, functionType0.isNullType());
      assertEquals(true, functionType0.isOrdinaryFunction());
      assertEquals(false, functionType0.isEnumElementType());
      assertEquals(false, functionType0.isCheckedUnknownType());
      assertEquals(false, functionType0.isConstructor());
      assertEquals(false, functionType0.isNoResolvedType());
      assertNull(functionType0.getTemplateTypeName());
      assertEquals(true, functionType0.isFunctionType());
      assertEquals(false, functionType0.isTemplateType());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertEquals(false, functionType0.isNoObjectType());
      assertEquals(false, functionType0.isFunctionPrototypeType());
      assertEquals(false, functionType0.hasInstanceType());
      assertEquals(false, functionType0.isVoidType());
      assertEquals(true, functionType0.canBeCalled());
      assertEquals(false, functionType0.isNumberValueType());
      assertEquals(true, functionType0.hasCachedValues());
      assertEquals(false, functionType0.isNominalConstructor());
      assertEquals(false, functionType1.isNumberValueType());
      assertEquals(false, functionType1.isNullType());
      assertEquals(false, functionType1.isVoidType());
      assertEquals(false, functionType1.isEnumType());
      assertEquals(false, functionType1.isNoType());
      assertEquals(false, functionType1.isNominalType());
      assertEquals(true, functionType1.isFunctionType());
      assertEquals(false, functionType1.isBooleanValueType());
      assertEquals(true, functionType1.hasCachedValues());
      assertEquals(false, functionType1.isNominalConstructor());
      assertEquals(false, functionType1.hasInstanceType());
      assertEquals(false, functionType1.isNoResolvedType());
      assertEquals(true, functionType1.isOrdinaryFunction());
      assertEquals(false, functionType1.isAllType());
      assertEquals(false, functionType1.isResolved());
      assertEquals(false, functionType1.isRecordType());
      assertEquals(true, functionType1.canBeCalled());
      assertEquals(2147483647, functionType1.getMaxArguments());
      assertEquals(false, functionType1.isUnionType());
      assertEquals(false, functionType1.isCheckedUnknownType());
      assertEquals(false, functionType1.isEnumElementType());
      assertNull(functionType1.getTemplateTypeName());
      assertEquals(false, functionType1.isStringValueType());
      assertEquals(false, functionType1.isConstructor());
      assertEquals(false, functionType1.isTemplateType());
      assertEquals(BooleanLiteralSet.TRUE, functionType1.getPossibleToBooleanOutcomes());
      assertEquals(false, functionType1.isFunctionPrototypeType());
      assertEquals(0, functionType1.getExtendedInterfacesCount());
      assertEquals(false, functionType1.isInterface());
      assertEquals(false, functionType1.isNoObjectType());
      assertEquals(false, functionType1.isReturnTypeInferred());
      assertEquals(false, recordType0.isOrdinaryFunction());
      assertEquals(false, recordType0.isNominalType());
      assertEquals(true, recordType0.isRecordType());
      assertEquals(false, recordType0.isUnionType());
      assertEquals(false, recordType0.isEnumType());
      assertEquals(false, recordType0.isEnumElementType());
      assertEquals(false, recordType0.isResolved());
      assertEquals(false, recordType0.isTemplateType());
      assertEquals(false, recordType0.isNoResolvedType());
      assertEquals(false, recordType0.isNumberValueType());
      assertEquals(false, recordType0.isNullType());
      assertEquals(false, recordType0.isNoObjectType());
      assertEquals(false, recordType0.isVoidType());
      assertEquals(false, recordType0.isInterface());
      assertEquals(BooleanLiteralSet.TRUE, recordType0.getPossibleToBooleanOutcomes());
      assertEquals(false, recordType0.isNominalConstructor());
      assertEquals(false, recordType0.isAllType());
      assertEquals(false, recordType0.isFunctionPrototypeType());
      assertEquals(false, recordType0.isNoType());
      assertEquals(false, recordType0.isBooleanValueType());
      assertEquals(false, recordType0.isFunctionType());
      assertEquals(false, recordType0.isCheckedUnknownType());
      assertEquals(false, recordType0.isConstructor());
      assertEquals(false, recordType0.isStringValueType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
  }

  @Test
  public void test06()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      HashMap<String, RecordTypeBuilder.RecordProperty> hashMap0 = new HashMap<String, RecordTypeBuilder.RecordProperty>();
      assertNotNull(hashMap0);
      assertEquals(0, hashMap0.size());
      assertEquals(true, hashMap0.isEmpty());
      assertEquals("{}", hashMap0.toString());
      
      RecordType recordType0 = jSTypeRegistry0.createRecordType((Map<String, RecordTypeBuilder.RecordProperty>) hashMap0);
      assertNotNull(recordType0);
      assertEquals(false, recordType0.isAllType());
      assertEquals(false, recordType0.isUnionType());
      assertEquals(false, recordType0.isTemplateType());
      assertEquals(false, recordType0.isOrdinaryFunction());
      assertEquals(false, recordType0.isFunctionType());
      assertEquals(false, recordType0.isInterface());
      assertEquals(false, recordType0.isNoResolvedType());
      assertEquals(false, recordType0.isNominalConstructor());
      assertEquals(false, recordType0.isNoType());
      assertEquals(false, recordType0.isNominalType());
      assertEquals(false, recordType0.isStringValueType());
      assertEquals(false, recordType0.isNumberValueType());
      assertEquals(BooleanLiteralSet.TRUE, recordType0.getPossibleToBooleanOutcomes());
      assertEquals(false, recordType0.isBooleanValueType());
      assertEquals(false, recordType0.isResolved());
      assertEquals(false, recordType0.isFunctionPrototypeType());
      assertEquals(false, recordType0.isVoidType());
      assertEquals(false, recordType0.isEnumElementType());
      assertEquals(false, recordType0.isNoObjectType());
      assertEquals(false, recordType0.isConstructor());
      assertEquals(false, recordType0.isCheckedUnknownType());
      assertEquals(false, recordType0.isEnumType());
      assertEquals(false, recordType0.isNullType());
      assertEquals(true, recordType0.isRecordType());
      assertEquals(0, hashMap0.size());
      assertEquals(true, hashMap0.isEmpty());
      assertEquals("{}", hashMap0.toString());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      boolean boolean0 = recordType0.isString();
      assertFalse(boolean0);
      assertEquals(false, recordType0.isAllType());
      assertEquals(false, recordType0.isUnionType());
      assertEquals(false, recordType0.isTemplateType());
      assertEquals(false, recordType0.isOrdinaryFunction());
      assertEquals(false, recordType0.isFunctionType());
      assertEquals(false, recordType0.isInterface());
      assertEquals(false, recordType0.isNoResolvedType());
      assertEquals(false, recordType0.isNominalConstructor());
      assertEquals(false, recordType0.isNoType());
      assertEquals(false, recordType0.isNominalType());
      assertEquals(false, recordType0.isStringValueType());
      assertEquals(false, recordType0.isNumberValueType());
      assertEquals(BooleanLiteralSet.TRUE, recordType0.getPossibleToBooleanOutcomes());
      assertEquals(false, recordType0.isBooleanValueType());
      assertEquals(false, recordType0.isResolved());
      assertEquals(false, recordType0.isFunctionPrototypeType());
      assertEquals(false, recordType0.isVoidType());
      assertEquals(false, recordType0.isEnumElementType());
      assertEquals(false, recordType0.isNoObjectType());
      assertEquals(false, recordType0.isConstructor());
      assertEquals(false, recordType0.isCheckedUnknownType());
      assertEquals(false, recordType0.isEnumType());
      assertEquals(false, recordType0.isNullType());
      assertEquals(true, recordType0.isRecordType());
      assertEquals(0, hashMap0.size());
      assertEquals(true, hashMap0.isEmpty());
      assertEquals("{}", hashMap0.toString());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
  }

  @Test
  public void test07()  throws Throwable  {
      ErrorReporter errorReporter0 = null;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(errorReporter0);
      assertNotNull(jSTypeRegistry0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      JSTypeNative[] jSTypeNativeArray0 = new JSTypeNative[8];
      JSTypeNative jSTypeNative0 = JSTypeNative.NULL_TYPE;
      jSTypeNativeArray0[0] = jSTypeNative0;
      assertEquals("NULL_TYPE", jSTypeNativeArray0[0].name());
      assertEquals("NULL_TYPE", jSTypeNativeArray0[0].toString());
      assertEquals(15, jSTypeNativeArray0[0].ordinal());
      
      JSTypeNative jSTypeNative1 = JSTypeNative.GLOBAL_THIS;
      assertNotSame(jSTypeNative1, jSTypeNative0);
      
      jSTypeNativeArray0[1] = jSTypeNative1;
      assertEquals("GLOBAL_THIS", jSTypeNativeArray0[1].toString());
      assertEquals(46, jSTypeNativeArray0[1].ordinal());
      assertEquals("GLOBAL_THIS", jSTypeNativeArray0[1].name());
      
      jSTypeNativeArray0[2] = jSTypeNative1;
      assertEquals("GLOBAL_THIS", jSTypeNativeArray0[2].toString());
      assertEquals("GLOBAL_THIS", jSTypeNativeArray0[2].name());
      assertEquals(46, jSTypeNativeArray0[2].ordinal());
      
      // Undeclared exception!
      try {
        JSType jSType0 = jSTypeRegistry0.createUnionType(jSTypeNativeArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test08()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      String string0 = "";
      boolean boolean0 = true;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0, boolean0);
      assertNotNull(jSTypeRegistry0);
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      NoType noType0 = new NoType(jSTypeRegistry0);
      assertNotNull(noType0);
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, noType0.isEnumElementType());
      assertEquals(true, noType0.isConstructor());
      assertEquals(false, noType0.isReturnTypeInferred());
      assertEquals(2147483647, noType0.getMaxArguments());
      assertEquals(true, noType0.hasInstanceType());
      assertEquals(false, noType0.isInterface());
      assertEquals(false, noType0.isNominalConstructor());
      assertEquals(false, noType0.isFunctionType());
      assertEquals(false, noType0.isTemplateType());
      assertEquals(true, noType0.matchesStringContext());
      assertEquals(true, noType0.canBeCalled());
      assertEquals(false, noType0.isNoObjectType());
      assertEquals(false, noType0.hasCachedValues());
      assertEquals(false, noType0.isOrdinaryFunction());
      assertEquals(false, noType0.isResolved());
      assertEquals(0, noType0.getExtendedInterfacesCount());
      assertEquals(false, noType0.isNominalType());
      assertEquals(false, noType0.isEnumType());
      assertEquals(true, noType0.matchesNumberContext());
      assertEquals(false, noType0.isRecordType());
      assertEquals(false, noType0.isNumberValueType());
      assertEquals(false, noType0.isNoResolvedType());
      assertNull(noType0.getTemplateTypeName());
      assertEquals(false, noType0.isUnionType());
      assertEquals(false, noType0.isCheckedUnknownType());
      assertEquals(false, noType0.isFunctionPrototypeType());
      assertEquals(false, noType0.isAllType());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noType0.isBooleanValueType());
      assertEquals(false, noType0.isVoidType());
      assertEquals(true, noType0.isNoType());
      assertEquals(false, noType0.isStringValueType());
      assertEquals(true, noType0.isNullable());
      assertEquals(2147483647, noType0.getPropertiesCount());
      assertNull(noType0.getReferenceName());
      assertEquals(true, noType0.matchesObjectContext());
      assertEquals(false, noType0.isNullType());
      
      Node node0 = noType0.getPropertyNode(string0);
      assertNull(node0);
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, noType0.isEnumElementType());
      assertEquals(true, noType0.isConstructor());
      assertEquals(false, noType0.isReturnTypeInferred());
      assertEquals(2147483647, noType0.getMaxArguments());
      assertEquals(true, noType0.hasInstanceType());
      assertEquals(false, noType0.isInterface());
      assertEquals(false, noType0.isNominalConstructor());
      assertEquals(false, noType0.isFunctionType());
      assertEquals(false, noType0.isTemplateType());
      assertEquals(true, noType0.matchesStringContext());
      assertEquals(true, noType0.canBeCalled());
      assertEquals(false, noType0.isNoObjectType());
      assertEquals(false, noType0.hasCachedValues());
      assertEquals(false, noType0.isOrdinaryFunction());
      assertEquals(false, noType0.isResolved());
      assertEquals(0, noType0.getExtendedInterfacesCount());
      assertEquals(false, noType0.isNominalType());
      assertEquals(false, noType0.isEnumType());
      assertEquals(true, noType0.matchesNumberContext());
      assertEquals(false, noType0.isRecordType());
      assertEquals(false, noType0.isNumberValueType());
      assertEquals(false, noType0.isNoResolvedType());
      assertNull(noType0.getTemplateTypeName());
      assertEquals(false, noType0.isUnionType());
      assertEquals(false, noType0.isCheckedUnknownType());
      assertEquals(false, noType0.isFunctionPrototypeType());
      assertEquals(false, noType0.isAllType());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noType0.isBooleanValueType());
      assertEquals(false, noType0.isVoidType());
      assertEquals(true, noType0.isNoType());
      assertEquals(false, noType0.isStringValueType());
      assertEquals(true, noType0.isNullable());
      assertEquals(2147483647, noType0.getPropertiesCount());
      assertNull(noType0.getReferenceName());
      assertEquals(true, noType0.matchesObjectContext());
      assertEquals(false, noType0.isNullType());
      
      FunctionType functionType0 = jSTypeRegistry0.createConstructorType(string0, node0, node0, (JSType) noType0);
      assertNotNull(functionType0);
      assertEquals(false, functionType0.isNullType());
      assertEquals(false, functionType0.isResolved());
      assertEquals(true, functionType0.isFunctionType());
      assertEquals(false, functionType0.isEnumElementType());
      assertEquals(false, functionType0.isVoidType());
      assertEquals(2147483647, functionType0.getMaxArguments());
      assertEquals(false, functionType0.isEnumType());
      assertEquals(false, functionType0.isNoObjectType());
      assertEquals(false, functionType0.isUnionType());
      assertNull(functionType0.getTemplateTypeName());
      assertEquals(false, functionType0.isRecordType());
      assertEquals(false, functionType0.isStringValueType());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertEquals(true, functionType0.canBeCalled());
      assertEquals(true, functionType0.hasInstanceType());
      assertEquals(false, functionType0.isNumberValueType());
      assertEquals(false, functionType0.isNominalType());
      assertEquals(false, functionType0.isBooleanValueType());
      assertEquals(false, functionType0.isCheckedUnknownType());
      assertEquals(false, functionType0.isNominalConstructor());
      assertEquals(false, functionType0.hasCachedValues());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertEquals(false, functionType0.isNoType());
      assertEquals(false, functionType0.isNoResolvedType());
      assertEquals(false, functionType0.isAllType());
      assertEquals(false, functionType0.isInterface());
      assertEquals(false, functionType0.isReturnTypeInferred());
      assertEquals(true, functionType0.isConstructor());
      assertEquals(false, functionType0.isOrdinaryFunction());
      assertEquals(false, functionType0.isFunctionPrototypeType());
      assertEquals(false, functionType0.isTemplateType());
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, noType0.isEnumElementType());
      assertEquals(true, noType0.isConstructor());
      assertEquals(false, noType0.isReturnTypeInferred());
      assertEquals(2147483647, noType0.getMaxArguments());
      assertEquals(true, noType0.hasInstanceType());
      assertEquals(false, noType0.isInterface());
      assertEquals(false, noType0.isNominalConstructor());
      assertEquals(false, noType0.isFunctionType());
      assertEquals(false, noType0.isTemplateType());
      assertEquals(true, noType0.matchesStringContext());
      assertEquals(true, noType0.canBeCalled());
      assertEquals(false, noType0.isNoObjectType());
      assertEquals(false, noType0.hasCachedValues());
      assertEquals(false, noType0.isOrdinaryFunction());
      assertEquals(false, noType0.isResolved());
      assertEquals(0, noType0.getExtendedInterfacesCount());
      assertEquals(false, noType0.isNominalType());
      assertEquals(false, noType0.isEnumType());
      assertEquals(true, noType0.matchesNumberContext());
      assertEquals(false, noType0.isRecordType());
      assertEquals(false, noType0.isNumberValueType());
      assertEquals(false, noType0.isNoResolvedType());
      assertNull(noType0.getTemplateTypeName());
      assertEquals(false, noType0.isUnionType());
      assertEquals(false, noType0.isCheckedUnknownType());
      assertEquals(false, noType0.isFunctionPrototypeType());
      assertEquals(false, noType0.isAllType());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noType0.isBooleanValueType());
      assertEquals(false, noType0.isVoidType());
      assertEquals(true, noType0.isNoType());
      assertEquals(false, noType0.isStringValueType());
      assertEquals(true, noType0.isNullable());
      assertEquals(2147483647, noType0.getPropertiesCount());
      assertNull(noType0.getReferenceName());
      assertEquals(true, noType0.matchesObjectContext());
      assertEquals(false, noType0.isNullType());
      
      functionType0.setPrototypeBasedOn((ObjectType) noType0);
      assertEquals(false, functionType0.isNullType());
      assertEquals(false, functionType0.isResolved());
      assertEquals(true, functionType0.isFunctionType());
      assertEquals(true, functionType0.hasCachedValues());
      assertEquals(false, functionType0.isEnumElementType());
      assertEquals(false, functionType0.isVoidType());
      assertEquals(2147483647, functionType0.getMaxArguments());
      assertEquals(false, functionType0.isEnumType());
      assertEquals(false, functionType0.isNoObjectType());
      assertEquals(false, functionType0.isUnionType());
      assertNull(functionType0.getTemplateTypeName());
      assertEquals(false, functionType0.isRecordType());
      assertEquals(false, functionType0.isStringValueType());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertEquals(true, functionType0.canBeCalled());
      assertEquals(true, functionType0.hasInstanceType());
      assertEquals(false, functionType0.isNumberValueType());
      assertEquals(false, functionType0.isNominalType());
      assertEquals(false, functionType0.isBooleanValueType());
      assertEquals(false, functionType0.isCheckedUnknownType());
      assertEquals(false, functionType0.isNominalConstructor());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertEquals(false, functionType0.isNoType());
      assertEquals(false, functionType0.isNoResolvedType());
      assertEquals(false, functionType0.isAllType());
      assertEquals(false, functionType0.isInterface());
      assertEquals(false, functionType0.isReturnTypeInferred());
      assertEquals(true, functionType0.isConstructor());
      assertEquals(false, functionType0.isOrdinaryFunction());
      assertEquals(false, functionType0.isFunctionPrototypeType());
      assertEquals(false, functionType0.isTemplateType());
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, noType0.isEnumElementType());
      assertEquals(true, noType0.isConstructor());
      assertEquals(false, noType0.isReturnTypeInferred());
      assertEquals(2147483647, noType0.getMaxArguments());
      assertEquals(true, noType0.hasInstanceType());
      assertEquals(false, noType0.isInterface());
      assertEquals(false, noType0.isNominalConstructor());
      assertEquals(false, noType0.isFunctionType());
      assertEquals(false, noType0.isTemplateType());
      assertEquals(true, noType0.matchesStringContext());
      assertEquals(true, noType0.canBeCalled());
      assertEquals(false, noType0.isNoObjectType());
      assertEquals(false, noType0.hasCachedValues());
      assertEquals(false, noType0.isOrdinaryFunction());
      assertEquals(false, noType0.isResolved());
      assertEquals(0, noType0.getExtendedInterfacesCount());
      assertEquals(false, noType0.isNominalType());
      assertEquals(true, noType0.isFunctionPrototypeType());
      assertEquals(false, noType0.isEnumType());
      assertEquals(true, noType0.matchesNumberContext());
      assertEquals(false, noType0.isRecordType());
      assertEquals(false, noType0.isNumberValueType());
      assertEquals(false, noType0.isNoResolvedType());
      assertNull(noType0.getTemplateTypeName());
      assertEquals(false, noType0.isUnionType());
      assertEquals(false, noType0.isCheckedUnknownType());
      assertEquals(false, noType0.isAllType());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noType0.isBooleanValueType());
      assertEquals(false, noType0.isVoidType());
      assertEquals(true, noType0.isNoType());
      assertEquals(false, noType0.isStringValueType());
      assertEquals(true, noType0.isNullable());
      assertEquals(2147483647, noType0.getPropertiesCount());
      assertNull(noType0.getReferenceName());
      assertEquals(true, noType0.matchesObjectContext());
      assertEquals(false, noType0.isNullType());
      
      boolean boolean1 = noType0.hasReferenceName();
      assertTrue(boolean0 == boolean1);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, noType0.isEnumElementType());
      assertEquals(true, noType0.isConstructor());
      assertEquals(false, noType0.isReturnTypeInferred());
      assertEquals(2147483647, noType0.getMaxArguments());
      assertEquals(true, noType0.hasInstanceType());
      assertEquals(false, noType0.isInterface());
      assertEquals(false, noType0.isNominalConstructor());
      assertEquals(false, noType0.isFunctionType());
      assertEquals(false, noType0.isTemplateType());
      assertEquals(true, noType0.matchesStringContext());
      assertEquals(true, noType0.canBeCalled());
      assertEquals(false, noType0.isNoObjectType());
      assertEquals(false, noType0.hasCachedValues());
      assertEquals(false, noType0.isOrdinaryFunction());
      assertEquals(false, noType0.isResolved());
      assertEquals(0, noType0.getExtendedInterfacesCount());
      assertEquals(false, noType0.isNominalType());
      assertEquals(true, noType0.isFunctionPrototypeType());
      assertEquals(false, noType0.isEnumType());
      assertEquals(true, noType0.matchesNumberContext());
      assertEquals(false, noType0.isRecordType());
      assertEquals(false, noType0.isNumberValueType());
      assertEquals(false, noType0.isNoResolvedType());
      assertNull(noType0.getTemplateTypeName());
      assertEquals(false, noType0.isUnionType());
      assertEquals(false, noType0.isCheckedUnknownType());
      assertEquals(false, noType0.isAllType());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noType0.isBooleanValueType());
      assertEquals(false, noType0.isVoidType());
      assertEquals(true, noType0.isNoType());
      assertEquals(false, noType0.isStringValueType());
      assertEquals(true, noType0.isNullable());
      assertEquals(2147483647, noType0.getPropertiesCount());
      assertNull(noType0.getReferenceName());
      assertEquals(true, noType0.matchesObjectContext());
      assertEquals(false, noType0.isNullType());
  }

  @Test
  public void test09()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      int int0 = (-28);
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      assertNotNull(noResolvedType0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(2147483647, noResolvedType0.getMaxArguments());
      assertEquals(true, noResolvedType0.matchesObjectContext());
      assertEquals(false, noResolvedType0.isFunctionType());
      assertEquals(true, noResolvedType0.isConstructor());
      assertEquals(false, noResolvedType0.isResolved());
      assertEquals(true, noResolvedType0.canBeCalled());
      assertEquals(false, noResolvedType0.isUnionType());
      assertEquals(false, noResolvedType0.isEnumElementType());
      assertEquals(false, noResolvedType0.isReturnTypeInferred());
      assertEquals(true, noResolvedType0.hasInstanceType());
      assertEquals(false, noResolvedType0.isCheckedUnknownType());
      assertEquals(false, noResolvedType0.isNoObjectType());
      assertEquals(false, noResolvedType0.isNominalConstructor());
      assertEquals(true, noResolvedType0.matchesNumberContext());
      assertEquals(false, noResolvedType0.isTemplateType());
      assertEquals(false, noResolvedType0.isRecordType());
      assertEquals(false, noResolvedType0.isAllType());
      assertEquals(false, noResolvedType0.isOrdinaryFunction());
      assertEquals(false, noResolvedType0.isNominalType());
      assertEquals(false, noResolvedType0.isEnumType());
      assertEquals(2147483647, noResolvedType0.getPropertiesCount());
      assertEquals(false, noResolvedType0.isStringValueType());
      assertEquals(false, noResolvedType0.isNumberValueType());
      assertEquals(false, noResolvedType0.isInterface());
      assertEquals(false, noResolvedType0.hasCachedValues());
      assertEquals(false, noResolvedType0.isVoidType());
      assertEquals(true, noResolvedType0.matchesStringContext());
      assertEquals(false, noResolvedType0.isFunctionPrototypeType());
      assertEquals(false, noResolvedType0.isNullType());
      assertNull(noResolvedType0.getTemplateTypeName());
      assertNull(noResolvedType0.getReferenceName());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertEquals(true, noResolvedType0.isNullable());
      assertEquals(false, noResolvedType0.isBooleanValueType());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      
      FunctionType functionType0 = noResolvedType0.getBindReturnType(int0);
      assertNotNull(functionType0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(2147483647, noResolvedType0.getMaxArguments());
      assertEquals(true, noResolvedType0.matchesObjectContext());
      assertEquals(false, noResolvedType0.isFunctionType());
      assertEquals(true, noResolvedType0.isConstructor());
      assertEquals(false, noResolvedType0.isResolved());
      assertEquals(true, noResolvedType0.canBeCalled());
      assertEquals(false, noResolvedType0.isUnionType());
      assertEquals(false, noResolvedType0.isEnumElementType());
      assertEquals(false, noResolvedType0.isReturnTypeInferred());
      assertEquals(true, noResolvedType0.hasInstanceType());
      assertEquals(false, noResolvedType0.isCheckedUnknownType());
      assertEquals(false, noResolvedType0.isNoObjectType());
      assertEquals(false, noResolvedType0.isNominalConstructor());
      assertEquals(true, noResolvedType0.matchesNumberContext());
      assertEquals(false, noResolvedType0.isTemplateType());
      assertEquals(false, noResolvedType0.isRecordType());
      assertEquals(false, noResolvedType0.isAllType());
      assertEquals(false, noResolvedType0.isOrdinaryFunction());
      assertEquals(false, noResolvedType0.isNominalType());
      assertEquals(false, noResolvedType0.isEnumType());
      assertEquals(2147483647, noResolvedType0.getPropertiesCount());
      assertEquals(false, noResolvedType0.isStringValueType());
      assertEquals(false, noResolvedType0.isNumberValueType());
      assertEquals(false, noResolvedType0.isInterface());
      assertEquals(false, noResolvedType0.hasCachedValues());
      assertEquals(false, noResolvedType0.isVoidType());
      assertEquals(true, noResolvedType0.matchesStringContext());
      assertEquals(false, noResolvedType0.isFunctionPrototypeType());
      assertEquals(false, noResolvedType0.isNullType());
      assertNull(noResolvedType0.getTemplateTypeName());
      assertNull(noResolvedType0.getReferenceName());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertEquals(true, noResolvedType0.isNullable());
      assertEquals(false, noResolvedType0.isBooleanValueType());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertEquals(false, functionType0.isEnumType());
      assertEquals(true, functionType0.isOrdinaryFunction());
      assertEquals(2147483647, functionType0.getMaxArguments());
      assertEquals(false, functionType0.isInterface());
      assertEquals(false, functionType0.isEnumElementType());
      assertEquals(false, functionType0.isNullType());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertEquals(false, functionType0.isNumberValueType());
      assertEquals(false, functionType0.isAllType());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, functionType0.isVoidType());
      assertEquals(false, functionType0.isNominalConstructor());
      assertEquals(false, functionType0.hasCachedValues());
      assertEquals(false, functionType0.isNominalType());
      assertEquals(false, functionType0.isNoType());
      assertEquals(false, functionType0.isResolved());
      assertEquals(true, functionType0.canBeCalled());
      assertEquals(false, functionType0.isTemplateType());
      assertNull(functionType0.getTemplateTypeName());
      assertEquals(false, functionType0.isCheckedUnknownType());
      assertEquals(false, functionType0.isReturnTypeInferred());
      assertEquals(false, functionType0.isStringValueType());
      assertEquals(false, functionType0.isUnionType());
      assertEquals(false, functionType0.hasInstanceType());
      assertEquals(false, functionType0.isConstructor());
      assertEquals(false, functionType0.isRecordType());
      assertEquals(false, functionType0.isFunctionPrototypeType());
      assertEquals(false, functionType0.isBooleanValueType());
      assertEquals(false, functionType0.isNoObjectType());
      assertEquals(false, functionType0.isNoResolvedType());
      assertEquals(true, functionType0.isFunctionType());
      
      FunctionType functionType1 = jSTypeRegistry0.createFunctionTypeWithNewThisType(functionType0, (ObjectType) functionType0);
      assertNotNull(functionType1);
      assertNotSame(functionType1, functionType0);
      assertNotSame(functionType0, functionType1);
      assertFalse(functionType1.equals((Object)functionType0));
      assertFalse(functionType0.equals((Object)functionType1));
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(2147483647, noResolvedType0.getMaxArguments());
      assertEquals(true, noResolvedType0.matchesObjectContext());
      assertEquals(false, noResolvedType0.isFunctionType());
      assertEquals(true, noResolvedType0.isConstructor());
      assertEquals(false, noResolvedType0.isResolved());
      assertEquals(true, noResolvedType0.canBeCalled());
      assertEquals(false, noResolvedType0.isUnionType());
      assertEquals(false, noResolvedType0.isEnumElementType());
      assertEquals(false, noResolvedType0.isReturnTypeInferred());
      assertEquals(true, noResolvedType0.hasInstanceType());
      assertEquals(false, noResolvedType0.isCheckedUnknownType());
      assertEquals(false, noResolvedType0.isNoObjectType());
      assertEquals(false, noResolvedType0.isNominalConstructor());
      assertEquals(true, noResolvedType0.matchesNumberContext());
      assertEquals(false, noResolvedType0.isTemplateType());
      assertEquals(false, noResolvedType0.isRecordType());
      assertEquals(false, noResolvedType0.isAllType());
      assertEquals(false, noResolvedType0.isOrdinaryFunction());
      assertEquals(false, noResolvedType0.isNominalType());
      assertEquals(false, noResolvedType0.isEnumType());
      assertEquals(2147483647, noResolvedType0.getPropertiesCount());
      assertEquals(false, noResolvedType0.isStringValueType());
      assertEquals(false, noResolvedType0.isNumberValueType());
      assertEquals(false, noResolvedType0.isInterface());
      assertEquals(false, noResolvedType0.hasCachedValues());
      assertEquals(false, noResolvedType0.isVoidType());
      assertEquals(true, noResolvedType0.matchesStringContext());
      assertEquals(false, noResolvedType0.isFunctionPrototypeType());
      assertEquals(false, noResolvedType0.isNullType());
      assertNull(noResolvedType0.getTemplateTypeName());
      assertNull(noResolvedType0.getReferenceName());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertEquals(true, noResolvedType0.isNullable());
      assertEquals(false, noResolvedType0.isBooleanValueType());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertEquals(false, functionType1.isBooleanValueType());
      assertEquals(false, functionType1.isNominalConstructor());
      assertEquals(false, functionType1.hasCachedValues());
      assertEquals(false, functionType1.isTemplateType());
      assertEquals(false, functionType1.isUnionType());
      assertEquals(BooleanLiteralSet.TRUE, functionType1.getPossibleToBooleanOutcomes());
      assertEquals(false, functionType1.isConstructor());
      assertEquals(2147483647, functionType1.getMaxArguments());
      assertEquals(false, functionType1.isInterface());
      assertEquals(false, functionType1.isStringValueType());
      assertEquals(true, functionType1.isOrdinaryFunction());
      assertEquals(false, functionType1.isNominalType());
      assertEquals(true, functionType1.isFunctionType());
      assertEquals(false, functionType1.isEnumElementType());
      assertEquals(false, functionType1.isRecordType());
      assertEquals(false, functionType1.isCheckedUnknownType());
      assertEquals(false, functionType1.isEnumType());
      assertEquals(false, functionType1.isNoObjectType());
      assertEquals(0, functionType1.getExtendedInterfacesCount());
      assertEquals(false, functionType1.isReturnTypeInferred());
      assertEquals(false, functionType1.hasInstanceType());
      assertEquals(false, functionType1.isResolved());
      assertEquals(false, functionType1.isNoType());
      assertEquals(false, functionType1.isNullType());
      assertEquals(false, functionType1.isNumberValueType());
      assertEquals(false, functionType1.isNoResolvedType());
      assertNull(functionType1.getTemplateTypeName());
      assertEquals(false, functionType1.isFunctionPrototypeType());
      assertEquals(false, functionType1.isVoidType());
      assertEquals(true, functionType1.canBeCalled());
      assertEquals(false, functionType1.isAllType());
      assertEquals(false, functionType0.isEnumType());
      assertEquals(true, functionType0.isOrdinaryFunction());
      assertEquals(2147483647, functionType0.getMaxArguments());
      assertEquals(false, functionType0.isInterface());
      assertEquals(false, functionType0.isEnumElementType());
      assertEquals(false, functionType0.isNullType());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertEquals(false, functionType0.isNumberValueType());
      assertEquals(false, functionType0.isAllType());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, functionType0.isVoidType());
      assertEquals(false, functionType0.isNominalConstructor());
      assertEquals(false, functionType0.hasCachedValues());
      assertEquals(false, functionType0.isNominalType());
      assertEquals(false, functionType0.isNoType());
      assertEquals(false, functionType0.isResolved());
      assertEquals(true, functionType0.canBeCalled());
      assertEquals(false, functionType0.isTemplateType());
      assertNull(functionType0.getTemplateTypeName());
      assertEquals(false, functionType0.isCheckedUnknownType());
      assertEquals(false, functionType0.isReturnTypeInferred());
      assertEquals(false, functionType0.isStringValueType());
      assertEquals(false, functionType0.isUnionType());
      assertEquals(false, functionType0.hasInstanceType());
      assertEquals(false, functionType0.isConstructor());
      assertEquals(false, functionType0.isRecordType());
      assertEquals(false, functionType0.isFunctionPrototypeType());
      assertEquals(false, functionType0.isBooleanValueType());
      assertEquals(false, functionType0.isNoObjectType());
      assertEquals(false, functionType0.isNoResolvedType());
      assertEquals(true, functionType0.isFunctionType());
  }

  @Test
  public void test10()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      HashMap<String, RecordTypeBuilder.RecordProperty> hashMap0 = new HashMap<String, RecordTypeBuilder.RecordProperty>();
      assertNotNull(hashMap0);
      assertEquals(true, hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals("{}", hashMap0.toString());
      
      RecordType recordType0 = jSTypeRegistry0.createRecordType((Map<String, RecordTypeBuilder.RecordProperty>) hashMap0);
      assertNotNull(recordType0);
      assertEquals(false, recordType0.isConstructor());
      assertEquals(false, recordType0.isFunctionPrototypeType());
      assertEquals(false, recordType0.isNullType());
      assertEquals(false, recordType0.isBooleanValueType());
      assertEquals(false, recordType0.isResolved());
      assertEquals(false, recordType0.isNumberValueType());
      assertEquals(false, recordType0.isNominalConstructor());
      assertEquals(false, recordType0.isInterface());
      assertEquals(false, recordType0.isAllType());
      assertEquals(false, recordType0.isEnumType());
      assertEquals(false, recordType0.isEnumElementType());
      assertEquals(false, recordType0.isTemplateType());
      assertEquals(false, recordType0.isNominalType());
      assertEquals(BooleanLiteralSet.TRUE, recordType0.getPossibleToBooleanOutcomes());
      assertEquals(false, recordType0.isNoType());
      assertEquals(false, recordType0.isVoidType());
      assertEquals(true, recordType0.isRecordType());
      assertEquals(false, recordType0.isCheckedUnknownType());
      assertEquals(false, recordType0.isFunctionType());
      assertEquals(false, recordType0.isOrdinaryFunction());
      assertEquals(false, recordType0.isStringValueType());
      assertEquals(false, recordType0.isUnionType());
      assertEquals(false, recordType0.isNoResolvedType());
      assertEquals(false, recordType0.isNoObjectType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(true, hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals("{}", hashMap0.toString());
      
      boolean boolean0 = false;
      recordType0.setPrettyPrint(boolean0);
      assertEquals(false, recordType0.isConstructor());
      assertEquals(false, recordType0.isFunctionPrototypeType());
      assertEquals(false, recordType0.isNullType());
      assertEquals(false, recordType0.isBooleanValueType());
      assertEquals(false, recordType0.isResolved());
      assertEquals(false, recordType0.isNumberValueType());
      assertEquals(false, recordType0.isNominalConstructor());
      assertEquals(false, recordType0.isInterface());
      assertEquals(false, recordType0.isAllType());
      assertEquals(false, recordType0.isEnumType());
      assertEquals(false, recordType0.isEnumElementType());
      assertEquals(false, recordType0.isTemplateType());
      assertEquals(false, recordType0.isNominalType());
      assertEquals(BooleanLiteralSet.TRUE, recordType0.getPossibleToBooleanOutcomes());
      assertEquals(false, recordType0.isNoType());
      assertEquals(false, recordType0.isVoidType());
      assertEquals(true, recordType0.isRecordType());
      assertEquals(false, recordType0.isCheckedUnknownType());
      assertEquals(false, recordType0.isFunctionType());
      assertEquals(false, recordType0.isOrdinaryFunction());
      assertEquals(false, recordType0.isStringValueType());
      assertEquals(false, recordType0.isUnionType());
      assertEquals(false, recordType0.isNoResolvedType());
      assertEquals(false, recordType0.isNoObjectType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(true, hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals("{}", hashMap0.toString());
      
      String string0 = recordType0.toAnnotationString();
      assertNotNull(string0);
      assertEquals("?", string0);
      assertEquals(false, recordType0.isConstructor());
      assertEquals(false, recordType0.isFunctionPrototypeType());
      assertEquals(false, recordType0.isNullType());
      assertEquals(false, recordType0.isBooleanValueType());
      assertEquals(false, recordType0.isResolved());
      assertEquals(false, recordType0.isNumberValueType());
      assertEquals(false, recordType0.isNominalConstructor());
      assertEquals(false, recordType0.isInterface());
      assertEquals(false, recordType0.isAllType());
      assertEquals(false, recordType0.isEnumType());
      assertEquals(false, recordType0.isEnumElementType());
      assertEquals(false, recordType0.isTemplateType());
      assertEquals(false, recordType0.isNominalType());
      assertEquals(BooleanLiteralSet.TRUE, recordType0.getPossibleToBooleanOutcomes());
      assertEquals(false, recordType0.isNoType());
      assertEquals(false, recordType0.isVoidType());
      assertEquals(true, recordType0.isRecordType());
      assertEquals(false, recordType0.isCheckedUnknownType());
      assertEquals(false, recordType0.isFunctionType());
      assertEquals(false, recordType0.isOrdinaryFunction());
      assertEquals(false, recordType0.isStringValueType());
      assertEquals(false, recordType0.isUnionType());
      assertEquals(false, recordType0.isNoResolvedType());
      assertEquals(false, recordType0.isNoObjectType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(true, hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals("{}", hashMap0.toString());
  }

  @Test
  public void test11()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      HashMap<String, RecordTypeBuilder.RecordProperty> hashMap0 = new HashMap<String, RecordTypeBuilder.RecordProperty>();
      assertNotNull(hashMap0);
      assertEquals("{}", hashMap0.toString());
      assertEquals(true, hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      RecordType recordType0 = jSTypeRegistry0.createRecordType((Map<String, RecordTypeBuilder.RecordProperty>) hashMap0);
      assertNotNull(recordType0);
      assertEquals("{}", hashMap0.toString());
      assertEquals(true, hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(false, recordType0.isNullType());
      assertEquals(true, recordType0.isRecordType());
      assertEquals(false, recordType0.isFunctionType());
      assertEquals(false, recordType0.isStringValueType());
      assertEquals(false, recordType0.isNominalConstructor());
      assertEquals(false, recordType0.isInterface());
      assertEquals(false, recordType0.isVoidType());
      assertEquals(false, recordType0.isOrdinaryFunction());
      assertEquals(false, recordType0.isConstructor());
      assertEquals(BooleanLiteralSet.TRUE, recordType0.getPossibleToBooleanOutcomes());
      assertEquals(false, recordType0.isUnionType());
      assertEquals(false, recordType0.isTemplateType());
      assertEquals(false, recordType0.isNoType());
      assertEquals(false, recordType0.isBooleanValueType());
      assertEquals(false, recordType0.isResolved());
      assertEquals(false, recordType0.isNominalType());
      assertEquals(false, recordType0.isAllType());
      assertEquals(false, recordType0.isNoResolvedType());
      assertEquals(false, recordType0.isNumberValueType());
      assertEquals(false, recordType0.isCheckedUnknownType());
      assertEquals(false, recordType0.isEnumType());
      assertEquals(false, recordType0.isFunctionPrototypeType());
      assertEquals(false, recordType0.isNoObjectType());
      assertEquals(false, recordType0.isEnumElementType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      boolean boolean0 = false;
      recordType0.setPrettyPrint(boolean0);
      assertEquals("{}", hashMap0.toString());
      assertEquals(true, hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(false, recordType0.isNullType());
      assertEquals(true, recordType0.isRecordType());
      assertEquals(false, recordType0.isFunctionType());
      assertEquals(false, recordType0.isStringValueType());
      assertEquals(false, recordType0.isNominalConstructor());
      assertEquals(false, recordType0.isInterface());
      assertEquals(false, recordType0.isVoidType());
      assertEquals(false, recordType0.isOrdinaryFunction());
      assertEquals(false, recordType0.isConstructor());
      assertEquals(BooleanLiteralSet.TRUE, recordType0.getPossibleToBooleanOutcomes());
      assertEquals(false, recordType0.isUnionType());
      assertEquals(false, recordType0.isTemplateType());
      assertEquals(false, recordType0.isNoType());
      assertEquals(false, recordType0.isBooleanValueType());
      assertEquals(false, recordType0.isResolved());
      assertEquals(false, recordType0.isNominalType());
      assertEquals(false, recordType0.isAllType());
      assertEquals(false, recordType0.isNoResolvedType());
      assertEquals(false, recordType0.isNumberValueType());
      assertEquals(false, recordType0.isCheckedUnknownType());
      assertEquals(false, recordType0.isEnumType());
      assertEquals(false, recordType0.isFunctionPrototypeType());
      assertEquals(false, recordType0.isNoObjectType());
      assertEquals(false, recordType0.isEnumElementType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      String string0 = recordType0.toString();
      assertNotNull(string0);
      assertEquals("{...}", string0);
      assertEquals("{}", hashMap0.toString());
      assertEquals(true, hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(false, recordType0.isNullType());
      assertEquals(true, recordType0.isRecordType());
      assertEquals(false, recordType0.isFunctionType());
      assertEquals(false, recordType0.isStringValueType());
      assertEquals(false, recordType0.isNominalConstructor());
      assertEquals(false, recordType0.isInterface());
      assertEquals(false, recordType0.isVoidType());
      assertEquals(false, recordType0.isOrdinaryFunction());
      assertEquals(false, recordType0.isConstructor());
      assertEquals(BooleanLiteralSet.TRUE, recordType0.getPossibleToBooleanOutcomes());
      assertEquals(false, recordType0.isUnionType());
      assertEquals(false, recordType0.isTemplateType());
      assertEquals(false, recordType0.isNoType());
      assertEquals(false, recordType0.isBooleanValueType());
      assertEquals(false, recordType0.isResolved());
      assertEquals(false, recordType0.isNominalType());
      assertEquals(false, recordType0.isAllType());
      assertEquals(false, recordType0.isNoResolvedType());
      assertEquals(false, recordType0.isNumberValueType());
      assertEquals(false, recordType0.isCheckedUnknownType());
      assertEquals(false, recordType0.isEnumType());
      assertEquals(false, recordType0.isFunctionPrototypeType());
      assertEquals(false, recordType0.isNoObjectType());
      assertEquals(false, recordType0.isEnumElementType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
  }

  @Test
  public void test12()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      boolean boolean0 = true;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0, boolean0);
      assertNotNull(jSTypeRegistry0);
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      String string0 = "`E78f?)Q";
      ObjectType objectType0 = null;
      PrototypeObjectType prototypeObjectType0 = new PrototypeObjectType(jSTypeRegistry0, string0, objectType0, boolean0);
      assertNotNull(prototypeObjectType0);
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, prototypeObjectType0.isOrdinaryFunction());
      assertEquals(false, prototypeObjectType0.isUnionType());
      assertEquals(false, prototypeObjectType0.isInterface());
      assertEquals(false, prototypeObjectType0.isFunctionType());
      assertEquals(false, prototypeObjectType0.isTemplateType());
      assertEquals(false, prototypeObjectType0.isNullType());
      assertEquals(false, prototypeObjectType0.isBooleanValueType());
      assertEquals(false, prototypeObjectType0.isEnumElementType());
      assertEquals(false, prototypeObjectType0.isNumberValueType());
      assertEquals(false, prototypeObjectType0.isStringValueType());
      assertEquals(false, prototypeObjectType0.isNoResolvedType());
      assertEquals(false, prototypeObjectType0.isCheckedUnknownType());
      assertEquals(false, prototypeObjectType0.isNoObjectType());
      assertEquals(false, prototypeObjectType0.isFunctionPrototypeType());
      assertEquals(false, prototypeObjectType0.isNominalType());
      assertEquals(false, prototypeObjectType0.isConstructor());
      assertEquals(false, prototypeObjectType0.isResolved());
      assertEquals(false, prototypeObjectType0.isEnumType());
      assertEquals(false, prototypeObjectType0.isAllType());
      assertEquals(false, prototypeObjectType0.isNoType());
      assertEquals(false, prototypeObjectType0.isRecordType());
      assertEquals(BooleanLiteralSet.TRUE, prototypeObjectType0.getPossibleToBooleanOutcomes());
      assertEquals(false, prototypeObjectType0.isNominalConstructor());
      assertEquals(false, prototypeObjectType0.isVoidType());
      
      String string1 = prototypeObjectType0.toStringHelper(boolean0);
      assertNotNull(string1);
      assertSame(string1, string0);
      assertSame(string0, string1);
      assertEquals("`E78f?)Q", string1);
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, prototypeObjectType0.isOrdinaryFunction());
      assertEquals(false, prototypeObjectType0.isUnionType());
      assertEquals(false, prototypeObjectType0.isInterface());
      assertEquals(false, prototypeObjectType0.isFunctionType());
      assertEquals(false, prototypeObjectType0.isTemplateType());
      assertEquals(false, prototypeObjectType0.isNullType());
      assertEquals(false, prototypeObjectType0.isBooleanValueType());
      assertEquals(false, prototypeObjectType0.isEnumElementType());
      assertEquals(false, prototypeObjectType0.isNumberValueType());
      assertEquals(false, prototypeObjectType0.isStringValueType());
      assertEquals(false, prototypeObjectType0.isNoResolvedType());
      assertEquals(false, prototypeObjectType0.isCheckedUnknownType());
      assertEquals(false, prototypeObjectType0.isNoObjectType());
      assertEquals(false, prototypeObjectType0.isFunctionPrototypeType());
      assertEquals(false, prototypeObjectType0.isNominalType());
      assertEquals(false, prototypeObjectType0.isConstructor());
      assertEquals(false, prototypeObjectType0.isResolved());
      assertEquals(false, prototypeObjectType0.isEnumType());
      assertEquals(false, prototypeObjectType0.isAllType());
      assertEquals(false, prototypeObjectType0.isNoType());
      assertEquals(false, prototypeObjectType0.isRecordType());
      assertEquals(BooleanLiteralSet.TRUE, prototypeObjectType0.getPossibleToBooleanOutcomes());
      assertEquals(false, prototypeObjectType0.isNominalConstructor());
      assertEquals(false, prototypeObjectType0.isVoidType());
  }

  @Test
  public void test13()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      boolean boolean0 = true;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0, boolean0);
      assertNotNull(jSTypeRegistry0);
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      NoType noType0 = new NoType(jSTypeRegistry0);
      assertNotNull(noType0);
      assertEquals(true, noType0.hasInstanceType());
      assertEquals(true, noType0.isNullable());
      assertEquals(false, noType0.isInterface());
      assertEquals(false, noType0.isStringValueType());
      assertEquals(false, noType0.isNoResolvedType());
      assertEquals(false, noType0.isFunctionType());
      assertEquals(false, noType0.isBooleanValueType());
      assertEquals(false, noType0.isTemplateType());
      assertEquals(false, noType0.isEnumElementType());
      assertEquals(false, noType0.isAllType());
      assertEquals(true, noType0.matchesNumberContext());
      assertEquals(false, noType0.isNoObjectType());
      assertNull(noType0.getTemplateTypeName());
      assertEquals(false, noType0.isNominalType());
      assertEquals(false, noType0.isResolved());
      assertEquals(2147483647, noType0.getPropertiesCount());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertEquals(true, noType0.matchesObjectContext());
      assertEquals(false, noType0.isOrdinaryFunction());
      assertEquals(false, noType0.isNullType());
      assertEquals(false, noType0.isVoidType());
      assertEquals(0, noType0.getExtendedInterfacesCount());
      assertNull(noType0.getReferenceName());
      assertEquals(false, noType0.isEnumType());
      assertEquals(true, noType0.isNoType());
      assertEquals(false, noType0.isCheckedUnknownType());
      assertEquals(false, noType0.isFunctionPrototypeType());
      assertEquals(false, noType0.isNumberValueType());
      assertEquals(2147483647, noType0.getMaxArguments());
      assertEquals(true, noType0.matchesStringContext());
      assertEquals(false, noType0.hasCachedValues());
      assertEquals(false, noType0.isUnionType());
      assertEquals(false, noType0.isNominalConstructor());
      assertEquals(true, noType0.canBeCalled());
      assertEquals(false, noType0.isReturnTypeInferred());
      assertEquals(false, noType0.isRecordType());
      assertEquals(true, noType0.isConstructor());
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      JSType jSType0 = noType0.unboxesTo();
      assertNull(jSType0);
      assertEquals(true, noType0.hasInstanceType());
      assertEquals(true, noType0.isNullable());
      assertEquals(false, noType0.isInterface());
      assertEquals(false, noType0.isStringValueType());
      assertEquals(false, noType0.isNoResolvedType());
      assertEquals(false, noType0.isFunctionType());
      assertEquals(false, noType0.isBooleanValueType());
      assertEquals(false, noType0.isTemplateType());
      assertEquals(false, noType0.isEnumElementType());
      assertEquals(false, noType0.isAllType());
      assertEquals(true, noType0.matchesNumberContext());
      assertEquals(false, noType0.isNoObjectType());
      assertNull(noType0.getTemplateTypeName());
      assertEquals(false, noType0.isNominalType());
      assertEquals(false, noType0.isResolved());
      assertEquals(2147483647, noType0.getPropertiesCount());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertEquals(true, noType0.matchesObjectContext());
      assertEquals(false, noType0.isOrdinaryFunction());
      assertEquals(false, noType0.isNullType());
      assertEquals(false, noType0.isVoidType());
      assertEquals(0, noType0.getExtendedInterfacesCount());
      assertNull(noType0.getReferenceName());
      assertEquals(false, noType0.isEnumType());
      assertEquals(true, noType0.isNoType());
      assertEquals(false, noType0.isCheckedUnknownType());
      assertEquals(false, noType0.isFunctionPrototypeType());
      assertEquals(false, noType0.isNumberValueType());
      assertEquals(2147483647, noType0.getMaxArguments());
      assertEquals(true, noType0.matchesStringContext());
      assertEquals(false, noType0.hasCachedValues());
      assertEquals(false, noType0.isUnionType());
      assertEquals(false, noType0.isNominalConstructor());
      assertEquals(true, noType0.canBeCalled());
      assertEquals(false, noType0.isReturnTypeInferred());
      assertEquals(false, noType0.isRecordType());
      assertEquals(true, noType0.isConstructor());
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
  }

  @Test
  public void test14()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      String string0 = "";
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, string0);
      assertNotNull(errorFunctionType0);
      assertEquals(false, errorFunctionType0.isBooleanValueType());
      assertEquals(false, errorFunctionType0.isCheckedUnknownType());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertNull(errorFunctionType0.getTemplateTypeName());
      assertEquals(false, errorFunctionType0.isNoType());
      assertEquals(false, errorFunctionType0.isVoidType());
      assertEquals(false, errorFunctionType0.hasCachedValues());
      assertEquals(false, errorFunctionType0.isStringValueType());
      assertEquals(false, errorFunctionType0.isInterface());
      assertEquals(false, errorFunctionType0.isTemplateType());
      assertEquals(false, errorFunctionType0.isResolved());
      assertEquals(false, errorFunctionType0.isNoObjectType());
      assertEquals(false, errorFunctionType0.isNullType());
      assertEquals(3, errorFunctionType0.getMaxArguments());
      assertEquals(true, errorFunctionType0.isConstructor());
      assertEquals(false, errorFunctionType0.isRecordType());
      assertEquals(true, errorFunctionType0.hasInstanceType());
      assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      assertEquals(true, errorFunctionType0.canBeCalled());
      assertEquals(false, errorFunctionType0.isFunctionPrototypeType());
      assertEquals(false, errorFunctionType0.isReturnTypeInferred());
      assertEquals(false, errorFunctionType0.isNoResolvedType());
      assertEquals(false, errorFunctionType0.isNominalType());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, errorFunctionType0.isAllType());
      assertEquals(false, errorFunctionType0.isEnumElementType());
      assertEquals(false, errorFunctionType0.isNumberValueType());
      assertEquals(true, errorFunctionType0.isFunctionType());
      assertEquals(true, errorFunctionType0.isNominalConstructor());
      assertEquals(false, errorFunctionType0.isUnionType());
      assertEquals(false, errorFunctionType0.isEnumType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      boolean boolean0 = errorFunctionType0.matchesNumberContext();
      assertFalse(boolean0);
      assertEquals(false, errorFunctionType0.isBooleanValueType());
      assertEquals(false, errorFunctionType0.isCheckedUnknownType());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertNull(errorFunctionType0.getTemplateTypeName());
      assertEquals(false, errorFunctionType0.isNoType());
      assertEquals(false, errorFunctionType0.isVoidType());
      assertEquals(false, errorFunctionType0.hasCachedValues());
      assertEquals(false, errorFunctionType0.isStringValueType());
      assertEquals(false, errorFunctionType0.isInterface());
      assertEquals(false, errorFunctionType0.isTemplateType());
      assertEquals(false, errorFunctionType0.isResolved());
      assertEquals(false, errorFunctionType0.isNoObjectType());
      assertEquals(false, errorFunctionType0.isNullType());
      assertEquals(3, errorFunctionType0.getMaxArguments());
      assertEquals(true, errorFunctionType0.isConstructor());
      assertEquals(false, errorFunctionType0.isRecordType());
      assertEquals(true, errorFunctionType0.hasInstanceType());
      assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      assertEquals(true, errorFunctionType0.canBeCalled());
      assertEquals(false, errorFunctionType0.isFunctionPrototypeType());
      assertEquals(false, errorFunctionType0.isReturnTypeInferred());
      assertEquals(false, errorFunctionType0.isNoResolvedType());
      assertEquals(false, errorFunctionType0.isNominalType());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, errorFunctionType0.isAllType());
      assertEquals(false, errorFunctionType0.isEnumElementType());
      assertEquals(false, errorFunctionType0.isNumberValueType());
      assertEquals(true, errorFunctionType0.isFunctionType());
      assertEquals(true, errorFunctionType0.isNominalConstructor());
      assertEquals(false, errorFunctionType0.isUnionType());
      assertEquals(false, errorFunctionType0.isEnumType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
  }

  @Test
  public void test15()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      String string0 = "";
      boolean boolean0 = true;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0, boolean0);
      assertNotNull(jSTypeRegistry0);
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      NoType noType0 = new NoType(jSTypeRegistry0);
      assertNotNull(noType0);
      assertEquals(false, noType0.isCheckedUnknownType());
      assertEquals(true, noType0.isConstructor());
      assertEquals(true, noType0.isNoType());
      assertEquals(false, noType0.isBooleanValueType());
      assertEquals(true, noType0.matchesNumberContext());
      assertEquals(false, noType0.isNumberValueType());
      assertEquals(false, noType0.isUnionType());
      assertEquals(false, noType0.isNoObjectType());
      assertEquals(false, noType0.isVoidType());
      assertEquals(false, noType0.isReturnTypeInferred());
      assertEquals(false, noType0.isNullType());
      assertEquals(false, noType0.isNoResolvedType());
      assertEquals(2147483647, noType0.getMaxArguments());
      assertNull(noType0.getReferenceName());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noType0.isRecordType());
      assertEquals(false, noType0.isResolved());
      assertEquals(false, noType0.isFunctionType());
      assertEquals(false, noType0.hasCachedValues());
      assertEquals(0, noType0.getExtendedInterfacesCount());
      assertEquals(true, noType0.matchesStringContext());
      assertEquals(true, noType0.isNullable());
      assertEquals(true, noType0.canBeCalled());
      assertEquals(2147483647, noType0.getPropertiesCount());
      assertEquals(true, noType0.hasInstanceType());
      assertEquals(false, noType0.isStringValueType());
      assertEquals(false, noType0.isAllType());
      assertEquals(false, noType0.isTemplateType());
      assertEquals(false, noType0.isOrdinaryFunction());
      assertEquals(false, noType0.isNominalType());
      assertEquals(true, noType0.matchesObjectContext());
      assertEquals(false, noType0.isFunctionPrototypeType());
      assertNull(noType0.getTemplateTypeName());
      assertEquals(false, noType0.isNominalConstructor());
      assertEquals(false, noType0.isEnumType());
      assertEquals(false, noType0.isEnumElementType());
      assertEquals(false, noType0.isInterface());
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      Node node0 = noType0.getPropertyNode(string0);
      assertNull(node0);
      assertEquals(false, noType0.isCheckedUnknownType());
      assertEquals(true, noType0.isConstructor());
      assertEquals(true, noType0.isNoType());
      assertEquals(false, noType0.isBooleanValueType());
      assertEquals(true, noType0.matchesNumberContext());
      assertEquals(false, noType0.isNumberValueType());
      assertEquals(false, noType0.isUnionType());
      assertEquals(false, noType0.isNoObjectType());
      assertEquals(false, noType0.isVoidType());
      assertEquals(false, noType0.isReturnTypeInferred());
      assertEquals(false, noType0.isNullType());
      assertEquals(false, noType0.isNoResolvedType());
      assertEquals(2147483647, noType0.getMaxArguments());
      assertNull(noType0.getReferenceName());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noType0.isRecordType());
      assertEquals(false, noType0.isResolved());
      assertEquals(false, noType0.isFunctionType());
      assertEquals(false, noType0.hasCachedValues());
      assertEquals(0, noType0.getExtendedInterfacesCount());
      assertEquals(true, noType0.matchesStringContext());
      assertEquals(true, noType0.isNullable());
      assertEquals(true, noType0.canBeCalled());
      assertEquals(2147483647, noType0.getPropertiesCount());
      assertEquals(true, noType0.hasInstanceType());
      assertEquals(false, noType0.isStringValueType());
      assertEquals(false, noType0.isAllType());
      assertEquals(false, noType0.isTemplateType());
      assertEquals(false, noType0.isOrdinaryFunction());
      assertEquals(false, noType0.isNominalType());
      assertEquals(true, noType0.matchesObjectContext());
      assertEquals(false, noType0.isFunctionPrototypeType());
      assertNull(noType0.getTemplateTypeName());
      assertEquals(false, noType0.isNominalConstructor());
      assertEquals(false, noType0.isEnumType());
      assertEquals(false, noType0.isEnumElementType());
      assertEquals(false, noType0.isInterface());
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      FunctionType functionType0 = jSTypeRegistry0.createConstructorType(string0, node0, node0, (JSType) noType0);
      assertNotNull(functionType0);
      assertEquals(false, noType0.isCheckedUnknownType());
      assertEquals(true, noType0.isConstructor());
      assertEquals(true, noType0.isNoType());
      assertEquals(false, noType0.isBooleanValueType());
      assertEquals(true, noType0.matchesNumberContext());
      assertEquals(false, noType0.isNumberValueType());
      assertEquals(false, noType0.isUnionType());
      assertEquals(false, noType0.isNoObjectType());
      assertEquals(false, noType0.isVoidType());
      assertEquals(false, noType0.isReturnTypeInferred());
      assertEquals(false, noType0.isNullType());
      assertEquals(false, noType0.isNoResolvedType());
      assertEquals(2147483647, noType0.getMaxArguments());
      assertNull(noType0.getReferenceName());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noType0.isRecordType());
      assertEquals(false, noType0.isResolved());
      assertEquals(false, noType0.isFunctionType());
      assertEquals(false, noType0.hasCachedValues());
      assertEquals(0, noType0.getExtendedInterfacesCount());
      assertEquals(true, noType0.matchesStringContext());
      assertEquals(true, noType0.isNullable());
      assertEquals(true, noType0.canBeCalled());
      assertEquals(2147483647, noType0.getPropertiesCount());
      assertEquals(true, noType0.hasInstanceType());
      assertEquals(false, noType0.isStringValueType());
      assertEquals(false, noType0.isAllType());
      assertEquals(false, noType0.isTemplateType());
      assertEquals(false, noType0.isOrdinaryFunction());
      assertEquals(false, noType0.isNominalType());
      assertEquals(true, noType0.matchesObjectContext());
      assertEquals(false, noType0.isFunctionPrototypeType());
      assertNull(noType0.getTemplateTypeName());
      assertEquals(false, noType0.isNominalConstructor());
      assertEquals(false, noType0.isEnumType());
      assertEquals(false, noType0.isEnumElementType());
      assertEquals(false, noType0.isInterface());
      assertEquals(true, functionType0.isConstructor());
      assertEquals(false, functionType0.isUnionType());
      assertEquals(false, functionType0.isAllType());
      assertEquals(false, functionType0.isNullType());
      assertEquals(2147483647, functionType0.getMaxArguments());
      assertEquals(true, functionType0.isFunctionType());
      assertEquals(false, functionType0.isNominalConstructor());
      assertEquals(false, functionType0.isRecordType());
      assertEquals(false, functionType0.isTemplateType());
      assertNull(functionType0.getTemplateTypeName());
      assertEquals(false, functionType0.isNoResolvedType());
      assertEquals(false, functionType0.isStringValueType());
      assertEquals(false, functionType0.isNoType());
      assertEquals(false, functionType0.isVoidType());
      assertEquals(false, functionType0.isResolved());
      assertEquals(false, functionType0.isEnumElementType());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, functionType0.isEnumType());
      assertEquals(false, functionType0.isInterface());
      assertEquals(false, functionType0.isFunctionPrototypeType());
      assertEquals(true, functionType0.canBeCalled());
      assertEquals(false, functionType0.hasCachedValues());
      assertEquals(false, functionType0.isCheckedUnknownType());
      assertEquals(true, functionType0.hasInstanceType());
      assertEquals(false, functionType0.isReturnTypeInferred());
      assertEquals(false, functionType0.isBooleanValueType());
      assertEquals(false, functionType0.isNumberValueType());
      assertEquals(false, functionType0.isNoObjectType());
      assertEquals(false, functionType0.isOrdinaryFunction());
      assertEquals(false, functionType0.isNominalType());
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      boolean boolean1 = functionType0.matchesStringContext();
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean0 == boolean1);
      assertFalse(boolean1);
      assertEquals(false, noType0.isCheckedUnknownType());
      assertEquals(true, noType0.isConstructor());
      assertEquals(true, noType0.isNoType());
      assertEquals(false, noType0.isBooleanValueType());
      assertEquals(true, noType0.matchesNumberContext());
      assertEquals(false, noType0.isNumberValueType());
      assertEquals(false, noType0.isUnionType());
      assertEquals(false, noType0.isNoObjectType());
      assertEquals(false, noType0.isVoidType());
      assertEquals(false, noType0.isReturnTypeInferred());
      assertEquals(false, noType0.isNullType());
      assertEquals(false, noType0.isNoResolvedType());
      assertEquals(2147483647, noType0.getMaxArguments());
      assertNull(noType0.getReferenceName());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noType0.isRecordType());
      assertEquals(false, noType0.isResolved());
      assertEquals(false, noType0.isFunctionType());
      assertEquals(false, noType0.hasCachedValues());
      assertEquals(0, noType0.getExtendedInterfacesCount());
      assertEquals(true, noType0.matchesStringContext());
      assertEquals(true, noType0.isNullable());
      assertEquals(true, noType0.canBeCalled());
      assertEquals(2147483647, noType0.getPropertiesCount());
      assertEquals(true, noType0.hasInstanceType());
      assertEquals(false, noType0.isStringValueType());
      assertEquals(false, noType0.isAllType());
      assertEquals(false, noType0.isTemplateType());
      assertEquals(false, noType0.isOrdinaryFunction());
      assertEquals(false, noType0.isNominalType());
      assertEquals(true, noType0.matchesObjectContext());
      assertEquals(false, noType0.isFunctionPrototypeType());
      assertNull(noType0.getTemplateTypeName());
      assertEquals(false, noType0.isNominalConstructor());
      assertEquals(false, noType0.isEnumType());
      assertEquals(false, noType0.isEnumElementType());
      assertEquals(false, noType0.isInterface());
      assertEquals(true, functionType0.isConstructor());
      assertEquals(false, functionType0.isUnionType());
      assertEquals(false, functionType0.isAllType());
      assertEquals(false, functionType0.isNullType());
      assertEquals(2147483647, functionType0.getMaxArguments());
      assertEquals(true, functionType0.isFunctionType());
      assertEquals(false, functionType0.isNominalConstructor());
      assertEquals(false, functionType0.isRecordType());
      assertEquals(false, functionType0.isTemplateType());
      assertNull(functionType0.getTemplateTypeName());
      assertEquals(false, functionType0.isNoResolvedType());
      assertEquals(false, functionType0.isStringValueType());
      assertEquals(false, functionType0.isNoType());
      assertEquals(false, functionType0.isVoidType());
      assertEquals(false, functionType0.isResolved());
      assertEquals(false, functionType0.isEnumElementType());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, functionType0.isEnumType());
      assertEquals(false, functionType0.isInterface());
      assertEquals(false, functionType0.isFunctionPrototypeType());
      assertEquals(true, functionType0.canBeCalled());
      assertEquals(false, functionType0.hasCachedValues());
      assertEquals(false, functionType0.isCheckedUnknownType());
      assertEquals(true, functionType0.hasInstanceType());
      assertEquals(false, functionType0.isReturnTypeInferred());
      assertEquals(false, functionType0.isBooleanValueType());
      assertEquals(false, functionType0.isNumberValueType());
      assertEquals(false, functionType0.isNoObjectType());
      assertEquals(false, functionType0.isOrdinaryFunction());
      assertEquals(false, functionType0.isNominalType());
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
  }

  @Test
  public void test16()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      String string0 = "";
      boolean boolean0 = true;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0, boolean0);
      assertNotNull(jSTypeRegistry0);
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      NoType noType0 = new NoType(jSTypeRegistry0);
      assertNotNull(noType0);
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, noType0.isStringValueType());
      assertEquals(false, noType0.isNominalType());
      assertEquals(false, noType0.isNullType());
      assertEquals(false, noType0.isTemplateType());
      assertEquals(true, noType0.matchesObjectContext());
      assertEquals(true, noType0.canBeCalled());
      assertEquals(false, noType0.isVoidType());
      assertEquals(false, noType0.isFunctionPrototypeType());
      assertEquals(false, noType0.isNominalConstructor());
      assertEquals(false, noType0.isEnumElementType());
      assertEquals(true, noType0.matchesStringContext());
      assertEquals(false, noType0.isNoResolvedType());
      assertEquals(false, noType0.isAllType());
      assertEquals(false, noType0.isEnumType());
      assertNull(noType0.getReferenceName());
      assertEquals(true, noType0.isNoType());
      assertEquals(false, noType0.isNumberValueType());
      assertEquals(false, noType0.isReturnTypeInferred());
      assertEquals(false, noType0.isResolved());
      assertEquals(false, noType0.isFunctionType());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertEquals(2147483647, noType0.getMaxArguments());
      assertEquals(true, noType0.isConstructor());
      assertEquals(false, noType0.hasCachedValues());
      assertEquals(false, noType0.isRecordType());
      assertEquals(false, noType0.isCheckedUnknownType());
      assertEquals(false, noType0.isOrdinaryFunction());
      assertEquals(true, noType0.hasInstanceType());
      assertEquals(false, noType0.isInterface());
      assertEquals(2147483647, noType0.getPropertiesCount());
      assertEquals(false, noType0.isNoObjectType());
      assertEquals(true, noType0.isNullable());
      assertEquals(true, noType0.matchesNumberContext());
      assertEquals(false, noType0.isUnionType());
      assertEquals(0, noType0.getExtendedInterfacesCount());
      assertEquals(false, noType0.isBooleanValueType());
      assertNull(noType0.getTemplateTypeName());
      
      String string1 = "valueOf";
      assertNotSame(string1, string0);
      
      Node node0 = noType0.getPropertyNode(string0);
      assertNull(node0);
      assertNotSame(string0, string1);
      assertFalse(string0.equals((Object)string1));
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, noType0.isStringValueType());
      assertEquals(false, noType0.isNominalType());
      assertEquals(false, noType0.isNullType());
      assertEquals(false, noType0.isTemplateType());
      assertEquals(true, noType0.matchesObjectContext());
      assertEquals(true, noType0.canBeCalled());
      assertEquals(false, noType0.isVoidType());
      assertEquals(false, noType0.isFunctionPrototypeType());
      assertEquals(false, noType0.isNominalConstructor());
      assertEquals(false, noType0.isEnumElementType());
      assertEquals(true, noType0.matchesStringContext());
      assertEquals(false, noType0.isNoResolvedType());
      assertEquals(false, noType0.isAllType());
      assertEquals(false, noType0.isEnumType());
      assertNull(noType0.getReferenceName());
      assertEquals(true, noType0.isNoType());
      assertEquals(false, noType0.isNumberValueType());
      assertEquals(false, noType0.isReturnTypeInferred());
      assertEquals(false, noType0.isResolved());
      assertEquals(false, noType0.isFunctionType());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertEquals(2147483647, noType0.getMaxArguments());
      assertEquals(true, noType0.isConstructor());
      assertEquals(false, noType0.hasCachedValues());
      assertEquals(false, noType0.isRecordType());
      assertEquals(false, noType0.isCheckedUnknownType());
      assertEquals(false, noType0.isOrdinaryFunction());
      assertEquals(true, noType0.hasInstanceType());
      assertEquals(false, noType0.isInterface());
      assertEquals(2147483647, noType0.getPropertiesCount());
      assertEquals(false, noType0.isNoObjectType());
      assertEquals(true, noType0.isNullable());
      assertEquals(true, noType0.matchesNumberContext());
      assertEquals(false, noType0.isUnionType());
      assertEquals(0, noType0.getExtendedInterfacesCount());
      assertEquals(false, noType0.isBooleanValueType());
      assertNull(noType0.getTemplateTypeName());
      
      FunctionType functionType0 = jSTypeRegistry0.createConstructorType(string1, node0, node0, (JSType) noType0);
      assertNotNull(functionType0);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, functionType0.isStringValueType());
      assertEquals(true, functionType0.hasInstanceType());
      assertEquals(false, functionType0.isNominalConstructor());
      assertEquals(false, functionType0.isNominalType());
      assertEquals(false, functionType0.isNoResolvedType());
      assertEquals(false, functionType0.isResolved());
      assertEquals(true, functionType0.isFunctionType());
      assertEquals(false, functionType0.isTemplateType());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, functionType0.isUnionType());
      assertEquals(false, functionType0.isReturnTypeInferred());
      assertEquals(false, functionType0.isEnumType());
      assertNull(functionType0.getTemplateTypeName());
      assertEquals(false, functionType0.isNoType());
      assertEquals(true, functionType0.isConstructor());
      assertEquals(false, functionType0.isBooleanValueType());
      assertEquals(false, functionType0.isInterface());
      assertEquals(false, functionType0.isNumberValueType());
      assertEquals(false, functionType0.isAllType());
      assertEquals(true, functionType0.canBeCalled());
      assertEquals(false, functionType0.isOrdinaryFunction());
      assertEquals(false, functionType0.hasCachedValues());
      assertEquals(false, functionType0.isRecordType());
      assertEquals(false, functionType0.isVoidType());
      assertEquals(false, functionType0.isNoObjectType());
      assertEquals(false, functionType0.isEnumElementType());
      assertEquals(false, functionType0.isNullType());
      assertEquals(false, functionType0.isCheckedUnknownType());
      assertEquals(false, functionType0.isFunctionPrototypeType());
      assertEquals(2147483647, functionType0.getMaxArguments());
      assertEquals(false, noType0.isStringValueType());
      assertEquals(false, noType0.isNominalType());
      assertEquals(false, noType0.isNullType());
      assertEquals(false, noType0.isTemplateType());
      assertEquals(true, noType0.matchesObjectContext());
      assertEquals(true, noType0.canBeCalled());
      assertEquals(false, noType0.isVoidType());
      assertEquals(false, noType0.isFunctionPrototypeType());
      assertEquals(false, noType0.isNominalConstructor());
      assertEquals(false, noType0.isEnumElementType());
      assertEquals(true, noType0.matchesStringContext());
      assertEquals(false, noType0.isNoResolvedType());
      assertEquals(false, noType0.isAllType());
      assertEquals(false, noType0.isEnumType());
      assertNull(noType0.getReferenceName());
      assertEquals(true, noType0.isNoType());
      assertEquals(false, noType0.isNumberValueType());
      assertEquals(false, noType0.isReturnTypeInferred());
      assertEquals(false, noType0.isResolved());
      assertEquals(false, noType0.isFunctionType());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertEquals(2147483647, noType0.getMaxArguments());
      assertEquals(true, noType0.isConstructor());
      assertEquals(false, noType0.hasCachedValues());
      assertEquals(false, noType0.isRecordType());
      assertEquals(false, noType0.isCheckedUnknownType());
      assertEquals(false, noType0.isOrdinaryFunction());
      assertEquals(true, noType0.hasInstanceType());
      assertEquals(false, noType0.isInterface());
      assertEquals(2147483647, noType0.getPropertiesCount());
      assertEquals(false, noType0.isNoObjectType());
      assertEquals(true, noType0.isNullable());
      assertEquals(true, noType0.matchesNumberContext());
      assertEquals(false, noType0.isUnionType());
      assertEquals(0, noType0.getExtendedInterfacesCount());
      assertEquals(false, noType0.isBooleanValueType());
      assertNull(noType0.getTemplateTypeName());
      
      boolean boolean1 = functionType0.defineInferredProperty(string1, (JSType) noType0, node0);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertTrue(boolean1 == boolean0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertTrue(boolean0 == boolean1);
      assertTrue(boolean1);
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, functionType0.isStringValueType());
      assertEquals(true, functionType0.hasInstanceType());
      assertEquals(false, functionType0.isNominalConstructor());
      assertEquals(false, functionType0.isNominalType());
      assertEquals(false, functionType0.isNoResolvedType());
      assertEquals(false, functionType0.isResolved());
      assertEquals(true, functionType0.isFunctionType());
      assertEquals(false, functionType0.isTemplateType());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, functionType0.isUnionType());
      assertEquals(false, functionType0.isReturnTypeInferred());
      assertEquals(false, functionType0.isEnumType());
      assertNull(functionType0.getTemplateTypeName());
      assertEquals(false, functionType0.isNoType());
      assertEquals(true, functionType0.isConstructor());
      assertEquals(false, functionType0.isBooleanValueType());
      assertEquals(false, functionType0.isInterface());
      assertEquals(false, functionType0.isNumberValueType());
      assertEquals(false, functionType0.isAllType());
      assertEquals(true, functionType0.canBeCalled());
      assertEquals(false, functionType0.isOrdinaryFunction());
      assertEquals(false, functionType0.isRecordType());
      assertEquals(false, functionType0.isVoidType());
      assertEquals(false, functionType0.isNoObjectType());
      assertEquals(false, functionType0.isEnumElementType());
      assertEquals(false, functionType0.isNullType());
      assertEquals(false, functionType0.isCheckedUnknownType());
      assertEquals(true, functionType0.hasCachedValues());
      assertEquals(false, functionType0.isFunctionPrototypeType());
      assertEquals(2147483647, functionType0.getMaxArguments());
      assertEquals(false, noType0.isStringValueType());
      assertEquals(false, noType0.isNominalType());
      assertEquals(false, noType0.isNullType());
      assertEquals(false, noType0.isTemplateType());
      assertEquals(true, noType0.matchesObjectContext());
      assertEquals(true, noType0.canBeCalled());
      assertEquals(false, noType0.isVoidType());
      assertEquals(false, noType0.isFunctionPrototypeType());
      assertEquals(false, noType0.isNominalConstructor());
      assertEquals(false, noType0.isEnumElementType());
      assertEquals(true, noType0.matchesStringContext());
      assertEquals(false, noType0.isNoResolvedType());
      assertEquals(false, noType0.isAllType());
      assertEquals(false, noType0.isEnumType());
      assertNull(noType0.getReferenceName());
      assertEquals(true, noType0.isNoType());
      assertEquals(false, noType0.isNumberValueType());
      assertEquals(false, noType0.isReturnTypeInferred());
      assertEquals(false, noType0.isResolved());
      assertEquals(false, noType0.isFunctionType());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertEquals(2147483647, noType0.getMaxArguments());
      assertEquals(true, noType0.isConstructor());
      assertEquals(false, noType0.hasCachedValues());
      assertEquals(false, noType0.isRecordType());
      assertEquals(false, noType0.isCheckedUnknownType());
      assertEquals(false, noType0.isOrdinaryFunction());
      assertEquals(true, noType0.hasInstanceType());
      assertEquals(false, noType0.isInterface());
      assertEquals(2147483647, noType0.getPropertiesCount());
      assertEquals(false, noType0.isNoObjectType());
      assertEquals(true, noType0.isNullable());
      assertEquals(true, noType0.matchesNumberContext());
      assertEquals(false, noType0.isUnionType());
      assertEquals(0, noType0.getExtendedInterfacesCount());
      assertEquals(false, noType0.isBooleanValueType());
      assertNull(noType0.getTemplateTypeName());
      
      boolean boolean2 = functionType0.matchesUint32Context();
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertTrue(boolean0 == boolean2);
      assertTrue(boolean0 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2);
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, functionType0.isStringValueType());
      assertEquals(true, functionType0.hasInstanceType());
      assertEquals(false, functionType0.isNominalConstructor());
      assertEquals(false, functionType0.isNominalType());
      assertEquals(false, functionType0.isNoResolvedType());
      assertEquals(false, functionType0.isResolved());
      assertEquals(true, functionType0.isFunctionType());
      assertEquals(false, functionType0.isTemplateType());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, functionType0.isUnionType());
      assertEquals(false, functionType0.isReturnTypeInferred());
      assertEquals(false, functionType0.isEnumType());
      assertNull(functionType0.getTemplateTypeName());
      assertEquals(false, functionType0.isNoType());
      assertEquals(true, functionType0.isConstructor());
      assertEquals(false, functionType0.isBooleanValueType());
      assertEquals(false, functionType0.isInterface());
      assertEquals(false, functionType0.isNumberValueType());
      assertEquals(false, functionType0.isAllType());
      assertEquals(true, functionType0.canBeCalled());
      assertEquals(false, functionType0.isOrdinaryFunction());
      assertEquals(false, functionType0.isRecordType());
      assertEquals(false, functionType0.isVoidType());
      assertEquals(false, functionType0.isNoObjectType());
      assertEquals(false, functionType0.isEnumElementType());
      assertEquals(false, functionType0.isNullType());
      assertEquals(false, functionType0.isCheckedUnknownType());
      assertEquals(true, functionType0.hasCachedValues());
      assertEquals(false, functionType0.isFunctionPrototypeType());
      assertEquals(2147483647, functionType0.getMaxArguments());
      assertEquals(false, noType0.isStringValueType());
      assertEquals(false, noType0.isNominalType());
      assertEquals(false, noType0.isNullType());
      assertEquals(false, noType0.isTemplateType());
      assertEquals(true, noType0.matchesObjectContext());
      assertEquals(true, noType0.canBeCalled());
      assertEquals(false, noType0.isVoidType());
      assertEquals(false, noType0.isFunctionPrototypeType());
      assertEquals(false, noType0.isNominalConstructor());
      assertEquals(false, noType0.isEnumElementType());
      assertEquals(true, noType0.matchesStringContext());
      assertEquals(false, noType0.isNoResolvedType());
      assertEquals(false, noType0.isAllType());
      assertEquals(false, noType0.isEnumType());
      assertNull(noType0.getReferenceName());
      assertEquals(true, noType0.isNoType());
      assertEquals(false, noType0.isNumberValueType());
      assertEquals(false, noType0.isReturnTypeInferred());
      assertEquals(false, noType0.isResolved());
      assertEquals(false, noType0.isFunctionType());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertEquals(2147483647, noType0.getMaxArguments());
      assertEquals(true, noType0.isConstructor());
      assertEquals(false, noType0.hasCachedValues());
      assertEquals(false, noType0.isRecordType());
      assertEquals(false, noType0.isCheckedUnknownType());
      assertEquals(false, noType0.isOrdinaryFunction());
      assertEquals(true, noType0.hasInstanceType());
      assertEquals(false, noType0.isInterface());
      assertEquals(2147483647, noType0.getPropertiesCount());
      assertEquals(false, noType0.isNoObjectType());
      assertEquals(true, noType0.isNullable());
      assertEquals(true, noType0.matchesNumberContext());
      assertEquals(false, noType0.isUnionType());
      assertEquals(0, noType0.getExtendedInterfacesCount());
      assertEquals(false, noType0.isBooleanValueType());
      assertNull(noType0.getTemplateTypeName());
  }

  @Test
  public void test17()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      String string0 = "jc}]H#~YY&I\"ZF< ";
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, string0);
      assertNotNull(errorFunctionType0);
      assertEquals(false, errorFunctionType0.isUnionType());
      assertEquals(false, errorFunctionType0.isStringValueType());
      assertEquals(false, errorFunctionType0.isInterface());
      assertEquals(false, errorFunctionType0.isCheckedUnknownType());
      assertEquals(false, errorFunctionType0.isNoObjectType());
      assertEquals(true, errorFunctionType0.canBeCalled());
      assertEquals(true, errorFunctionType0.hasInstanceType());
      assertNull(errorFunctionType0.getTemplateTypeName());
      assertEquals(false, errorFunctionType0.isReturnTypeInferred());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertEquals(true, errorFunctionType0.isNominalConstructor());
      assertEquals(false, errorFunctionType0.isTemplateType());
      assertEquals(false, errorFunctionType0.isNumberValueType());
      assertEquals(false, errorFunctionType0.isVoidType());
      assertEquals(false, errorFunctionType0.isNominalType());
      assertEquals(false, errorFunctionType0.isNoResolvedType());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, errorFunctionType0.isAllType());
      assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      assertEquals(false, errorFunctionType0.isEnumType());
      assertEquals(false, errorFunctionType0.isNoType());
      assertEquals(true, errorFunctionType0.isFunctionType());
      assertEquals(false, errorFunctionType0.isRecordType());
      assertEquals(false, errorFunctionType0.isResolved());
      assertEquals(true, errorFunctionType0.isConstructor());
      assertEquals(false, errorFunctionType0.isNullType());
      assertEquals(false, errorFunctionType0.isFunctionPrototypeType());
      assertEquals(3, errorFunctionType0.getMaxArguments());
      assertEquals(false, errorFunctionType0.isEnumElementType());
      assertEquals(false, errorFunctionType0.isBooleanValueType());
      assertEquals(false, errorFunctionType0.hasCachedValues());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      JSDocInfo jSDocInfo0 = errorFunctionType0.getJSDocInfo();
      assertNull(jSDocInfo0);
      assertEquals(false, errorFunctionType0.isUnionType());
      assertEquals(false, errorFunctionType0.isStringValueType());
      assertEquals(false, errorFunctionType0.isInterface());
      assertEquals(false, errorFunctionType0.isCheckedUnknownType());
      assertEquals(false, errorFunctionType0.isNoObjectType());
      assertEquals(true, errorFunctionType0.canBeCalled());
      assertEquals(true, errorFunctionType0.hasInstanceType());
      assertNull(errorFunctionType0.getTemplateTypeName());
      assertEquals(false, errorFunctionType0.isReturnTypeInferred());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertEquals(true, errorFunctionType0.isNominalConstructor());
      assertEquals(false, errorFunctionType0.isTemplateType());
      assertEquals(false, errorFunctionType0.isNumberValueType());
      assertEquals(false, errorFunctionType0.isVoidType());
      assertEquals(false, errorFunctionType0.isNominalType());
      assertEquals(false, errorFunctionType0.isNoResolvedType());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, errorFunctionType0.isAllType());
      assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      assertEquals(false, errorFunctionType0.isEnumType());
      assertEquals(false, errorFunctionType0.isNoType());
      assertEquals(true, errorFunctionType0.isFunctionType());
      assertEquals(false, errorFunctionType0.isRecordType());
      assertEquals(false, errorFunctionType0.isResolved());
      assertEquals(true, errorFunctionType0.isConstructor());
      assertEquals(false, errorFunctionType0.isNullType());
      assertEquals(false, errorFunctionType0.isFunctionPrototypeType());
      assertEquals(3, errorFunctionType0.getMaxArguments());
      assertEquals(false, errorFunctionType0.isEnumElementType());
      assertEquals(false, errorFunctionType0.isBooleanValueType());
      assertEquals(false, errorFunctionType0.hasCachedValues());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      errorFunctionType0.setPropertyJSDocInfo(string0, jSDocInfo0);
      assertEquals(false, errorFunctionType0.isUnionType());
      assertEquals(false, errorFunctionType0.isStringValueType());
      assertEquals(false, errorFunctionType0.isInterface());
      assertEquals(false, errorFunctionType0.isCheckedUnknownType());
      assertEquals(false, errorFunctionType0.isNoObjectType());
      assertEquals(true, errorFunctionType0.canBeCalled());
      assertEquals(true, errorFunctionType0.hasInstanceType());
      assertNull(errorFunctionType0.getTemplateTypeName());
      assertEquals(false, errorFunctionType0.isReturnTypeInferred());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertEquals(true, errorFunctionType0.isNominalConstructor());
      assertEquals(false, errorFunctionType0.isTemplateType());
      assertEquals(false, errorFunctionType0.isNumberValueType());
      assertEquals(false, errorFunctionType0.isVoidType());
      assertEquals(false, errorFunctionType0.isNominalType());
      assertEquals(false, errorFunctionType0.isNoResolvedType());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, errorFunctionType0.isAllType());
      assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      assertEquals(false, errorFunctionType0.isEnumType());
      assertEquals(false, errorFunctionType0.isNoType());
      assertEquals(true, errorFunctionType0.isFunctionType());
      assertEquals(false, errorFunctionType0.isRecordType());
      assertEquals(false, errorFunctionType0.isResolved());
      assertEquals(true, errorFunctionType0.isConstructor());
      assertEquals(false, errorFunctionType0.isNullType());
      assertEquals(false, errorFunctionType0.isFunctionPrototypeType());
      assertEquals(3, errorFunctionType0.getMaxArguments());
      assertEquals(false, errorFunctionType0.isEnumElementType());
      assertEquals(false, errorFunctionType0.isBooleanValueType());
      assertEquals(false, errorFunctionType0.hasCachedValues());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
  }

  @Test
  public void test18()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      String string0 = "";
      boolean boolean0 = true;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0, boolean0);
      assertNotNull(jSTypeRegistry0);
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      NoType noType0 = new NoType(jSTypeRegistry0);
      assertNotNull(noType0);
      assertEquals(2147483647, noType0.getMaxArguments());
      assertEquals(false, noType0.isRecordType());
      assertEquals(false, noType0.hasCachedValues());
      assertEquals(true, noType0.matchesStringContext());
      assertEquals(false, noType0.isCheckedUnknownType());
      assertEquals(false, noType0.isNominalConstructor());
      assertEquals(false, noType0.isResolved());
      assertEquals(false, noType0.isNominalType());
      assertEquals(true, noType0.isConstructor());
      assertEquals(false, noType0.isUnionType());
      assertEquals(false, noType0.isNumberValueType());
      assertEquals(false, noType0.isNoObjectType());
      assertEquals(false, noType0.isNullType());
      assertEquals(false, noType0.isVoidType());
      assertEquals(2147483647, noType0.getPropertiesCount());
      assertEquals(false, noType0.isOrdinaryFunction());
      assertEquals(true, noType0.isNoType());
      assertEquals(true, noType0.matchesNumberContext());
      assertEquals(0, noType0.getExtendedInterfacesCount());
      assertEquals(false, noType0.isFunctionType());
      assertEquals(false, noType0.isReturnTypeInferred());
      assertEquals(false, noType0.isBooleanValueType());
      assertEquals(false, noType0.isFunctionPrototypeType());
      assertNull(noType0.getTemplateTypeName());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noType0.isAllType());
      assertEquals(false, noType0.isStringValueType());
      assertEquals(true, noType0.matchesObjectContext());
      assertEquals(false, noType0.isInterface());
      assertEquals(true, noType0.hasInstanceType());
      assertEquals(false, noType0.isTemplateType());
      assertEquals(true, noType0.isNullable());
      assertEquals(false, noType0.isEnumType());
      assertEquals(false, noType0.isEnumElementType());
      assertEquals(true, noType0.canBeCalled());
      assertEquals(false, noType0.isNoResolvedType());
      assertNull(noType0.getReferenceName());
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      Node node0 = noType0.getPropertyNode(string0);
      assertNull(node0);
      assertEquals(2147483647, noType0.getMaxArguments());
      assertEquals(false, noType0.isRecordType());
      assertEquals(false, noType0.hasCachedValues());
      assertEquals(true, noType0.matchesStringContext());
      assertEquals(false, noType0.isCheckedUnknownType());
      assertEquals(false, noType0.isNominalConstructor());
      assertEquals(false, noType0.isResolved());
      assertEquals(false, noType0.isNominalType());
      assertEquals(true, noType0.isConstructor());
      assertEquals(false, noType0.isUnionType());
      assertEquals(false, noType0.isNumberValueType());
      assertEquals(false, noType0.isNoObjectType());
      assertEquals(false, noType0.isNullType());
      assertEquals(false, noType0.isVoidType());
      assertEquals(2147483647, noType0.getPropertiesCount());
      assertEquals(false, noType0.isOrdinaryFunction());
      assertEquals(true, noType0.isNoType());
      assertEquals(true, noType0.matchesNumberContext());
      assertEquals(0, noType0.getExtendedInterfacesCount());
      assertEquals(false, noType0.isFunctionType());
      assertEquals(false, noType0.isReturnTypeInferred());
      assertEquals(false, noType0.isBooleanValueType());
      assertEquals(false, noType0.isFunctionPrototypeType());
      assertNull(noType0.getTemplateTypeName());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noType0.isAllType());
      assertEquals(false, noType0.isStringValueType());
      assertEquals(true, noType0.matchesObjectContext());
      assertEquals(false, noType0.isInterface());
      assertEquals(true, noType0.hasInstanceType());
      assertEquals(false, noType0.isTemplateType());
      assertEquals(true, noType0.isNullable());
      assertEquals(false, noType0.isEnumType());
      assertEquals(false, noType0.isEnumElementType());
      assertEquals(true, noType0.canBeCalled());
      assertEquals(false, noType0.isNoResolvedType());
      assertNull(noType0.getReferenceName());
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      FunctionType functionType0 = jSTypeRegistry0.createConstructorType(string0, node0, node0, (JSType) noType0);
      assertNotNull(functionType0);
      assertEquals(false, functionType0.isCheckedUnknownType());
      assertEquals(false, functionType0.isVoidType());
      assertEquals(false, functionType0.isEnumElementType());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertEquals(true, functionType0.hasInstanceType());
      assertEquals(false, functionType0.isNoObjectType());
      assertEquals(false, functionType0.hasCachedValues());
      assertEquals(true, functionType0.isConstructor());
      assertNull(functionType0.getTemplateTypeName());
      assertEquals(false, functionType0.isOrdinaryFunction());
      assertEquals(false, functionType0.isAllType());
      assertEquals(false, functionType0.isInterface());
      assertEquals(false, functionType0.isResolved());
      assertEquals(false, functionType0.isTemplateType());
      assertEquals(false, functionType0.isNoType());
      assertEquals(false, functionType0.isNominalConstructor());
      assertEquals(false, functionType0.isUnionType());
      assertEquals(false, functionType0.isNullType());
      assertEquals(2147483647, functionType0.getMaxArguments());
      assertEquals(true, functionType0.canBeCalled());
      assertEquals(false, functionType0.isRecordType());
      assertEquals(false, functionType0.isFunctionPrototypeType());
      assertEquals(false, functionType0.isEnumType());
      assertEquals(false, functionType0.isNoResolvedType());
      assertEquals(true, functionType0.isFunctionType());
      assertEquals(false, functionType0.isReturnTypeInferred());
      assertEquals(false, functionType0.isStringValueType());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, functionType0.isNominalType());
      assertEquals(false, functionType0.isBooleanValueType());
      assertEquals(false, functionType0.isNumberValueType());
      assertEquals(2147483647, noType0.getMaxArguments());
      assertEquals(false, noType0.isRecordType());
      assertEquals(false, noType0.hasCachedValues());
      assertEquals(true, noType0.matchesStringContext());
      assertEquals(false, noType0.isCheckedUnknownType());
      assertEquals(false, noType0.isNominalConstructor());
      assertEquals(false, noType0.isResolved());
      assertEquals(false, noType0.isNominalType());
      assertEquals(true, noType0.isConstructor());
      assertEquals(false, noType0.isUnionType());
      assertEquals(false, noType0.isNumberValueType());
      assertEquals(false, noType0.isNoObjectType());
      assertEquals(false, noType0.isNullType());
      assertEquals(false, noType0.isVoidType());
      assertEquals(2147483647, noType0.getPropertiesCount());
      assertEquals(false, noType0.isOrdinaryFunction());
      assertEquals(true, noType0.isNoType());
      assertEquals(true, noType0.matchesNumberContext());
      assertEquals(0, noType0.getExtendedInterfacesCount());
      assertEquals(false, noType0.isFunctionType());
      assertEquals(false, noType0.isReturnTypeInferred());
      assertEquals(false, noType0.isBooleanValueType());
      assertEquals(false, noType0.isFunctionPrototypeType());
      assertNull(noType0.getTemplateTypeName());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noType0.isAllType());
      assertEquals(false, noType0.isStringValueType());
      assertEquals(true, noType0.matchesObjectContext());
      assertEquals(false, noType0.isInterface());
      assertEquals(true, noType0.hasInstanceType());
      assertEquals(false, noType0.isTemplateType());
      assertEquals(true, noType0.isNullable());
      assertEquals(false, noType0.isEnumType());
      assertEquals(false, noType0.isEnumElementType());
      assertEquals(true, noType0.canBeCalled());
      assertEquals(false, noType0.isNoResolvedType());
      assertNull(noType0.getReferenceName());
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      JSDocInfo jSDocInfo0 = functionType0.getOwnPropertyJSDocInfo(string0);
      assertNull(jSDocInfo0);
      assertEquals(false, functionType0.isCheckedUnknownType());
      assertEquals(false, functionType0.isVoidType());
      assertEquals(false, functionType0.isEnumElementType());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertEquals(true, functionType0.hasInstanceType());
      assertEquals(false, functionType0.isNoObjectType());
      assertEquals(false, functionType0.hasCachedValues());
      assertEquals(true, functionType0.isConstructor());
      assertNull(functionType0.getTemplateTypeName());
      assertEquals(false, functionType0.isOrdinaryFunction());
      assertEquals(false, functionType0.isAllType());
      assertEquals(false, functionType0.isInterface());
      assertEquals(false, functionType0.isResolved());
      assertEquals(false, functionType0.isTemplateType());
      assertEquals(false, functionType0.isNoType());
      assertEquals(false, functionType0.isNominalConstructor());
      assertEquals(false, functionType0.isUnionType());
      assertEquals(false, functionType0.isNullType());
      assertEquals(2147483647, functionType0.getMaxArguments());
      assertEquals(true, functionType0.canBeCalled());
      assertEquals(false, functionType0.isRecordType());
      assertEquals(false, functionType0.isFunctionPrototypeType());
      assertEquals(false, functionType0.isEnumType());
      assertEquals(false, functionType0.isNoResolvedType());
      assertEquals(true, functionType0.isFunctionType());
      assertEquals(false, functionType0.isReturnTypeInferred());
      assertEquals(false, functionType0.isStringValueType());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, functionType0.isNominalType());
      assertEquals(false, functionType0.isBooleanValueType());
      assertEquals(false, functionType0.isNumberValueType());
      assertEquals(2147483647, noType0.getMaxArguments());
      assertEquals(false, noType0.isRecordType());
      assertEquals(false, noType0.hasCachedValues());
      assertEquals(true, noType0.matchesStringContext());
      assertEquals(false, noType0.isCheckedUnknownType());
      assertEquals(false, noType0.isNominalConstructor());
      assertEquals(false, noType0.isResolved());
      assertEquals(false, noType0.isNominalType());
      assertEquals(true, noType0.isConstructor());
      assertEquals(false, noType0.isUnionType());
      assertEquals(false, noType0.isNumberValueType());
      assertEquals(false, noType0.isNoObjectType());
      assertEquals(false, noType0.isNullType());
      assertEquals(false, noType0.isVoidType());
      assertEquals(2147483647, noType0.getPropertiesCount());
      assertEquals(false, noType0.isOrdinaryFunction());
      assertEquals(true, noType0.isNoType());
      assertEquals(true, noType0.matchesNumberContext());
      assertEquals(0, noType0.getExtendedInterfacesCount());
      assertEquals(false, noType0.isFunctionType());
      assertEquals(false, noType0.isReturnTypeInferred());
      assertEquals(false, noType0.isBooleanValueType());
      assertEquals(false, noType0.isFunctionPrototypeType());
      assertNull(noType0.getTemplateTypeName());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noType0.isAllType());
      assertEquals(false, noType0.isStringValueType());
      assertEquals(true, noType0.matchesObjectContext());
      assertEquals(false, noType0.isInterface());
      assertEquals(true, noType0.hasInstanceType());
      assertEquals(false, noType0.isTemplateType());
      assertEquals(true, noType0.isNullable());
      assertEquals(false, noType0.isEnumType());
      assertEquals(false, noType0.isEnumElementType());
      assertEquals(true, noType0.canBeCalled());
      assertEquals(false, noType0.isNoResolvedType());
      assertNull(noType0.getReferenceName());
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
  }

  @Test
  public void test19()  throws Throwable  {
      String string0 = "OAx";
      ErrorReporter errorReporter0 = null;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(errorReporter0);
      assertNotNull(jSTypeRegistry0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, string0);
      assertNotNull(errorFunctionType0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, errorFunctionType0.isNoResolvedType());
      assertEquals(false, errorFunctionType0.isStringValueType());
      assertEquals(true, errorFunctionType0.isConstructor());
      assertEquals(false, errorFunctionType0.isBooleanValueType());
      assertEquals(true, errorFunctionType0.canBeCalled());
      assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      assertEquals(false, errorFunctionType0.hasCachedValues());
      assertNull(errorFunctionType0.getTemplateTypeName());
      assertEquals(false, errorFunctionType0.isVoidType());
      assertEquals(false, errorFunctionType0.isNumberValueType());
      assertEquals(false, errorFunctionType0.isEnumType());
      assertEquals(false, errorFunctionType0.isReturnTypeInferred());
      assertEquals(false, errorFunctionType0.isNullType());
      assertEquals(false, errorFunctionType0.isResolved());
      assertEquals(true, errorFunctionType0.isNominalConstructor());
      assertEquals(false, errorFunctionType0.isUnionType());
      assertEquals(3, errorFunctionType0.getMaxArguments());
      assertEquals(false, errorFunctionType0.isEnumElementType());
      assertEquals(true, errorFunctionType0.hasInstanceType());
      assertEquals(false, errorFunctionType0.isFunctionPrototypeType());
      assertEquals(false, errorFunctionType0.isRecordType());
      assertEquals(false, errorFunctionType0.isNoType());
      assertEquals(false, errorFunctionType0.isNoObjectType());
      assertEquals(false, errorFunctionType0.isCheckedUnknownType());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertEquals(true, errorFunctionType0.isFunctionType());
      assertEquals(false, errorFunctionType0.isAllType());
      assertEquals(false, errorFunctionType0.isTemplateType());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertEquals(false, errorFunctionType0.isInterface());
      assertEquals(false, errorFunctionType0.isNominalType());
      
      Node node0 = errorFunctionType0.getPropertyNode(string0);
      assertNull(node0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, errorFunctionType0.isNoResolvedType());
      assertEquals(false, errorFunctionType0.isStringValueType());
      assertEquals(true, errorFunctionType0.isConstructor());
      assertEquals(false, errorFunctionType0.isBooleanValueType());
      assertEquals(true, errorFunctionType0.canBeCalled());
      assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      assertEquals(false, errorFunctionType0.hasCachedValues());
      assertNull(errorFunctionType0.getTemplateTypeName());
      assertEquals(false, errorFunctionType0.isVoidType());
      assertEquals(false, errorFunctionType0.isNumberValueType());
      assertEquals(false, errorFunctionType0.isEnumType());
      assertEquals(false, errorFunctionType0.isReturnTypeInferred());
      assertEquals(false, errorFunctionType0.isNullType());
      assertEquals(false, errorFunctionType0.isResolved());
      assertEquals(true, errorFunctionType0.isNominalConstructor());
      assertEquals(false, errorFunctionType0.isUnionType());
      assertEquals(3, errorFunctionType0.getMaxArguments());
      assertEquals(false, errorFunctionType0.isEnumElementType());
      assertEquals(true, errorFunctionType0.hasInstanceType());
      assertEquals(false, errorFunctionType0.isFunctionPrototypeType());
      assertEquals(false, errorFunctionType0.isRecordType());
      assertEquals(false, errorFunctionType0.isNoType());
      assertEquals(false, errorFunctionType0.isNoObjectType());
      assertEquals(false, errorFunctionType0.isCheckedUnknownType());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertEquals(true, errorFunctionType0.isFunctionType());
      assertEquals(false, errorFunctionType0.isAllType());
      assertEquals(false, errorFunctionType0.isTemplateType());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertEquals(false, errorFunctionType0.isInterface());
      assertEquals(false, errorFunctionType0.isNominalType());
  }

  @Test
  public void test20()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      String string0 = "";
      boolean boolean0 = true;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0, boolean0);
      assertNotNull(jSTypeRegistry0);
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      NoType noType0 = new NoType(jSTypeRegistry0);
      assertNotNull(noType0);
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, noType0.isVoidType());
      assertEquals(false, noType0.isResolved());
      assertEquals(false, noType0.isOrdinaryFunction());
      assertEquals(true, noType0.isNullable());
      assertEquals(false, noType0.isUnionType());
      assertEquals(false, noType0.isNoObjectType());
      assertEquals(true, noType0.hasInstanceType());
      assertEquals(false, noType0.isEnumType());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertEquals(2147483647, noType0.getPropertiesCount());
      assertEquals(false, noType0.isNoResolvedType());
      assertEquals(false, noType0.hasCachedValues());
      assertEquals(false, noType0.isNominalType());
      assertEquals(false, noType0.isBooleanValueType());
      assertEquals(false, noType0.isTemplateType());
      assertEquals(false, noType0.isFunctionType());
      assertEquals(false, noType0.isNominalConstructor());
      assertEquals(false, noType0.isFunctionPrototypeType());
      assertEquals(true, noType0.canBeCalled());
      assertEquals(2147483647, noType0.getMaxArguments());
      assertNull(noType0.getTemplateTypeName());
      assertEquals(true, noType0.isNoType());
      assertEquals(true, noType0.matchesObjectContext());
      assertEquals(false, noType0.isAllType());
      assertEquals(false, noType0.isNumberValueType());
      assertEquals(false, noType0.isInterface());
      assertEquals(false, noType0.isRecordType());
      assertEquals(0, noType0.getExtendedInterfacesCount());
      assertEquals(true, noType0.matchesStringContext());
      assertEquals(true, noType0.matchesNumberContext());
      assertEquals(false, noType0.isStringValueType());
      assertEquals(false, noType0.isReturnTypeInferred());
      assertNull(noType0.getReferenceName());
      assertEquals(false, noType0.isCheckedUnknownType());
      assertEquals(false, noType0.isNullType());
      assertEquals(false, noType0.isEnumElementType());
      assertEquals(true, noType0.isConstructor());
      
      Node node0 = noType0.getPropertyNode(string0);
      assertNull(node0);
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, noType0.isVoidType());
      assertEquals(false, noType0.isResolved());
      assertEquals(false, noType0.isOrdinaryFunction());
      assertEquals(true, noType0.isNullable());
      assertEquals(false, noType0.isUnionType());
      assertEquals(false, noType0.isNoObjectType());
      assertEquals(true, noType0.hasInstanceType());
      assertEquals(false, noType0.isEnumType());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertEquals(2147483647, noType0.getPropertiesCount());
      assertEquals(false, noType0.isNoResolvedType());
      assertEquals(false, noType0.hasCachedValues());
      assertEquals(false, noType0.isNominalType());
      assertEquals(false, noType0.isBooleanValueType());
      assertEquals(false, noType0.isTemplateType());
      assertEquals(false, noType0.isFunctionType());
      assertEquals(false, noType0.isNominalConstructor());
      assertEquals(false, noType0.isFunctionPrototypeType());
      assertEquals(true, noType0.canBeCalled());
      assertEquals(2147483647, noType0.getMaxArguments());
      assertNull(noType0.getTemplateTypeName());
      assertEquals(true, noType0.isNoType());
      assertEquals(true, noType0.matchesObjectContext());
      assertEquals(false, noType0.isAllType());
      assertEquals(false, noType0.isNumberValueType());
      assertEquals(false, noType0.isInterface());
      assertEquals(false, noType0.isRecordType());
      assertEquals(0, noType0.getExtendedInterfacesCount());
      assertEquals(true, noType0.matchesStringContext());
      assertEquals(true, noType0.matchesNumberContext());
      assertEquals(false, noType0.isStringValueType());
      assertEquals(false, noType0.isReturnTypeInferred());
      assertNull(noType0.getReferenceName());
      assertEquals(false, noType0.isCheckedUnknownType());
      assertEquals(false, noType0.isNullType());
      assertEquals(false, noType0.isEnumElementType());
      assertEquals(true, noType0.isConstructor());
      
      FunctionType functionType0 = jSTypeRegistry0.createConstructorType(string0, node0, node0, (JSType) noType0);
      assertNotNull(functionType0);
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, noType0.isVoidType());
      assertEquals(false, noType0.isResolved());
      assertEquals(false, noType0.isOrdinaryFunction());
      assertEquals(true, noType0.isNullable());
      assertEquals(false, noType0.isUnionType());
      assertEquals(false, noType0.isNoObjectType());
      assertEquals(true, noType0.hasInstanceType());
      assertEquals(false, noType0.isEnumType());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertEquals(2147483647, noType0.getPropertiesCount());
      assertEquals(false, noType0.isNoResolvedType());
      assertEquals(false, noType0.hasCachedValues());
      assertEquals(false, noType0.isNominalType());
      assertEquals(false, noType0.isBooleanValueType());
      assertEquals(false, noType0.isTemplateType());
      assertEquals(false, noType0.isFunctionType());
      assertEquals(false, noType0.isNominalConstructor());
      assertEquals(false, noType0.isFunctionPrototypeType());
      assertEquals(true, noType0.canBeCalled());
      assertEquals(2147483647, noType0.getMaxArguments());
      assertNull(noType0.getTemplateTypeName());
      assertEquals(true, noType0.isNoType());
      assertEquals(true, noType0.matchesObjectContext());
      assertEquals(false, noType0.isAllType());
      assertEquals(false, noType0.isNumberValueType());
      assertEquals(false, noType0.isInterface());
      assertEquals(false, noType0.isRecordType());
      assertEquals(0, noType0.getExtendedInterfacesCount());
      assertEquals(true, noType0.matchesStringContext());
      assertEquals(true, noType0.matchesNumberContext());
      assertEquals(false, noType0.isStringValueType());
      assertEquals(false, noType0.isReturnTypeInferred());
      assertNull(noType0.getReferenceName());
      assertEquals(false, noType0.isCheckedUnknownType());
      assertEquals(false, noType0.isNullType());
      assertEquals(false, noType0.isEnumElementType());
      assertEquals(true, noType0.isConstructor());
      assertEquals(false, functionType0.isNominalConstructor());
      assertNull(functionType0.getTemplateTypeName());
      assertEquals(false, functionType0.isUnionType());
      assertEquals(false, functionType0.isRecordType());
      assertEquals(false, functionType0.isStringValueType());
      assertEquals(true, functionType0.isConstructor());
      assertEquals(false, functionType0.isCheckedUnknownType());
      assertEquals(true, functionType0.isFunctionType());
      assertEquals(false, functionType0.isResolved());
      assertEquals(false, functionType0.isBooleanValueType());
      assertEquals(false, functionType0.isNominalType());
      assertEquals(false, functionType0.isOrdinaryFunction());
      assertEquals(false, functionType0.isFunctionPrototypeType());
      assertEquals(false, functionType0.isInterface());
      assertEquals(false, functionType0.isNumberValueType());
      assertEquals(false, functionType0.isAllType());
      assertEquals(false, functionType0.isNoResolvedType());
      assertEquals(false, functionType0.isNoType());
      assertEquals(false, functionType0.isNoObjectType());
      assertEquals(false, functionType0.isReturnTypeInferred());
      assertEquals(true, functionType0.canBeCalled());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, functionType0.isNullType());
      assertEquals(false, functionType0.hasCachedValues());
      assertEquals(false, functionType0.isVoidType());
      assertEquals(true, functionType0.hasInstanceType());
      assertEquals(false, functionType0.isEnumElementType());
      assertEquals(2147483647, functionType0.getMaxArguments());
      assertEquals(false, functionType0.isTemplateType());
      assertEquals(false, functionType0.isEnumType());
      
      boolean boolean1 = functionType0.defineInferredProperty(string0, (JSType) noType0, node0);
      assertTrue(boolean0 == boolean1);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, noType0.isVoidType());
      assertEquals(false, noType0.isResolved());
      assertEquals(false, noType0.isOrdinaryFunction());
      assertEquals(true, noType0.isNullable());
      assertEquals(false, noType0.isUnionType());
      assertEquals(false, noType0.isNoObjectType());
      assertEquals(true, noType0.hasInstanceType());
      assertEquals(false, noType0.isEnumType());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertEquals(2147483647, noType0.getPropertiesCount());
      assertEquals(false, noType0.isNoResolvedType());
      assertEquals(false, noType0.hasCachedValues());
      assertEquals(false, noType0.isNominalType());
      assertEquals(false, noType0.isBooleanValueType());
      assertEquals(false, noType0.isTemplateType());
      assertEquals(false, noType0.isFunctionType());
      assertEquals(false, noType0.isNominalConstructor());
      assertEquals(false, noType0.isFunctionPrototypeType());
      assertEquals(true, noType0.canBeCalled());
      assertEquals(2147483647, noType0.getMaxArguments());
      assertNull(noType0.getTemplateTypeName());
      assertEquals(true, noType0.isNoType());
      assertEquals(true, noType0.matchesObjectContext());
      assertEquals(false, noType0.isAllType());
      assertEquals(false, noType0.isNumberValueType());
      assertEquals(false, noType0.isInterface());
      assertEquals(false, noType0.isRecordType());
      assertEquals(0, noType0.getExtendedInterfacesCount());
      assertEquals(true, noType0.matchesStringContext());
      assertEquals(true, noType0.matchesNumberContext());
      assertEquals(false, noType0.isStringValueType());
      assertEquals(false, noType0.isReturnTypeInferred());
      assertNull(noType0.getReferenceName());
      assertEquals(false, noType0.isCheckedUnknownType());
      assertEquals(false, noType0.isNullType());
      assertEquals(false, noType0.isEnumElementType());
      assertEquals(true, noType0.isConstructor());
      assertEquals(false, functionType0.isNominalConstructor());
      assertNull(functionType0.getTemplateTypeName());
      assertEquals(false, functionType0.isUnionType());
      assertEquals(false, functionType0.isRecordType());
      assertEquals(false, functionType0.isStringValueType());
      assertEquals(true, functionType0.isConstructor());
      assertEquals(false, functionType0.isCheckedUnknownType());
      assertEquals(true, functionType0.isFunctionType());
      assertEquals(false, functionType0.isResolved());
      assertEquals(false, functionType0.isBooleanValueType());
      assertEquals(false, functionType0.isNominalType());
      assertEquals(false, functionType0.isOrdinaryFunction());
      assertEquals(false, functionType0.isFunctionPrototypeType());
      assertEquals(false, functionType0.isInterface());
      assertEquals(false, functionType0.isNumberValueType());
      assertEquals(false, functionType0.isAllType());
      assertEquals(false, functionType0.isNoResolvedType());
      assertEquals(false, functionType0.isNoType());
      assertEquals(true, functionType0.hasCachedValues());
      assertEquals(false, functionType0.isNoObjectType());
      assertEquals(false, functionType0.isReturnTypeInferred());
      assertEquals(true, functionType0.canBeCalled());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, functionType0.isNullType());
      assertEquals(false, functionType0.isVoidType());
      assertEquals(true, functionType0.hasInstanceType());
      assertEquals(false, functionType0.isEnumElementType());
      assertEquals(2147483647, functionType0.getMaxArguments());
      assertEquals(false, functionType0.isTemplateType());
      assertEquals(false, functionType0.isEnumType());
      
      Node node1 = functionType0.getPropertyNode(string0);
      assertNull(node1);
      assertTrue(boolean0 == boolean1);
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, noType0.isVoidType());
      assertEquals(false, noType0.isResolved());
      assertEquals(false, noType0.isOrdinaryFunction());
      assertEquals(true, noType0.isNullable());
      assertEquals(false, noType0.isUnionType());
      assertEquals(false, noType0.isNoObjectType());
      assertEquals(true, noType0.hasInstanceType());
      assertEquals(false, noType0.isEnumType());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertEquals(2147483647, noType0.getPropertiesCount());
      assertEquals(false, noType0.isNoResolvedType());
      assertEquals(false, noType0.hasCachedValues());
      assertEquals(false, noType0.isNominalType());
      assertEquals(false, noType0.isBooleanValueType());
      assertEquals(false, noType0.isTemplateType());
      assertEquals(false, noType0.isFunctionType());
      assertEquals(false, noType0.isNominalConstructor());
      assertEquals(false, noType0.isFunctionPrototypeType());
      assertEquals(true, noType0.canBeCalled());
      assertEquals(2147483647, noType0.getMaxArguments());
      assertNull(noType0.getTemplateTypeName());
      assertEquals(true, noType0.isNoType());
      assertEquals(true, noType0.matchesObjectContext());
      assertEquals(false, noType0.isAllType());
      assertEquals(false, noType0.isNumberValueType());
      assertEquals(false, noType0.isInterface());
      assertEquals(false, noType0.isRecordType());
      assertEquals(0, noType0.getExtendedInterfacesCount());
      assertEquals(true, noType0.matchesStringContext());
      assertEquals(true, noType0.matchesNumberContext());
      assertEquals(false, noType0.isStringValueType());
      assertEquals(false, noType0.isReturnTypeInferred());
      assertNull(noType0.getReferenceName());
      assertEquals(false, noType0.isCheckedUnknownType());
      assertEquals(false, noType0.isNullType());
      assertEquals(false, noType0.isEnumElementType());
      assertEquals(true, noType0.isConstructor());
      assertEquals(false, functionType0.isNominalConstructor());
      assertNull(functionType0.getTemplateTypeName());
      assertEquals(false, functionType0.isUnionType());
      assertEquals(false, functionType0.isRecordType());
      assertEquals(false, functionType0.isStringValueType());
      assertEquals(true, functionType0.isConstructor());
      assertEquals(false, functionType0.isCheckedUnknownType());
      assertEquals(true, functionType0.isFunctionType());
      assertEquals(false, functionType0.isResolved());
      assertEquals(false, functionType0.isBooleanValueType());
      assertEquals(false, functionType0.isNominalType());
      assertEquals(false, functionType0.isOrdinaryFunction());
      assertEquals(false, functionType0.isFunctionPrototypeType());
      assertEquals(false, functionType0.isInterface());
      assertEquals(false, functionType0.isNumberValueType());
      assertEquals(false, functionType0.isAllType());
      assertEquals(false, functionType0.isNoResolvedType());
      assertEquals(false, functionType0.isNoType());
      assertEquals(true, functionType0.hasCachedValues());
      assertEquals(false, functionType0.isNoObjectType());
      assertEquals(false, functionType0.isReturnTypeInferred());
      assertEquals(true, functionType0.canBeCalled());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, functionType0.isNullType());
      assertEquals(false, functionType0.isVoidType());
      assertEquals(true, functionType0.hasInstanceType());
      assertEquals(false, functionType0.isEnumElementType());
      assertEquals(2147483647, functionType0.getMaxArguments());
      assertEquals(false, functionType0.isTemplateType());
      assertEquals(false, functionType0.isEnumType());
  }

  @Test
  public void test21()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      String string0 = "";
      boolean boolean0 = true;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0, boolean0);
      assertNotNull(jSTypeRegistry0);
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      NoType noType0 = new NoType(jSTypeRegistry0);
      assertNotNull(noType0);
      assertEquals(false, noType0.isUnionType());
      assertEquals(false, noType0.isTemplateType());
      assertEquals(false, noType0.isVoidType());
      assertEquals(true, noType0.canBeCalled());
      assertEquals(false, noType0.isCheckedUnknownType());
      assertEquals(2147483647, noType0.getMaxArguments());
      assertEquals(false, noType0.isBooleanValueType());
      assertEquals(false, noType0.isNominalConstructor());
      assertNull(noType0.getReferenceName());
      assertEquals(true, noType0.isNullable());
      assertEquals(true, noType0.matchesNumberContext());
      assertEquals(false, noType0.isEnumType());
      assertEquals(false, noType0.isNominalType());
      assertEquals(false, noType0.isNullType());
      assertEquals(true, noType0.matchesObjectContext());
      assertNull(noType0.getTemplateTypeName());
      assertEquals(false, noType0.isNoObjectType());
      assertEquals(false, noType0.isInterface());
      assertEquals(true, noType0.isConstructor());
      assertEquals(true, noType0.hasInstanceType());
      assertEquals(false, noType0.isOrdinaryFunction());
      assertEquals(true, noType0.matchesStringContext());
      assertEquals(false, noType0.isResolved());
      assertEquals(false, noType0.isAllType());
      assertEquals(false, noType0.isFunctionPrototypeType());
      assertEquals(false, noType0.isNumberValueType());
      assertEquals(false, noType0.isRecordType());
      assertEquals(false, noType0.isReturnTypeInferred());
      assertEquals(false, noType0.isNoResolvedType());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertEquals(true, noType0.isNoType());
      assertEquals(false, noType0.isStringValueType());
      assertEquals(2147483647, noType0.getPropertiesCount());
      assertEquals(false, noType0.hasCachedValues());
      assertEquals(false, noType0.isEnumElementType());
      assertEquals(0, noType0.getExtendedInterfacesCount());
      assertEquals(false, noType0.isFunctionType());
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      Node node0 = noType0.getPropertyNode(string0);
      assertNull(node0);
      assertEquals(false, noType0.isUnionType());
      assertEquals(false, noType0.isTemplateType());
      assertEquals(false, noType0.isVoidType());
      assertEquals(true, noType0.canBeCalled());
      assertEquals(false, noType0.isCheckedUnknownType());
      assertEquals(2147483647, noType0.getMaxArguments());
      assertEquals(false, noType0.isBooleanValueType());
      assertEquals(false, noType0.isNominalConstructor());
      assertNull(noType0.getReferenceName());
      assertEquals(true, noType0.isNullable());
      assertEquals(true, noType0.matchesNumberContext());
      assertEquals(false, noType0.isEnumType());
      assertEquals(false, noType0.isNominalType());
      assertEquals(false, noType0.isNullType());
      assertEquals(true, noType0.matchesObjectContext());
      assertNull(noType0.getTemplateTypeName());
      assertEquals(false, noType0.isNoObjectType());
      assertEquals(false, noType0.isInterface());
      assertEquals(true, noType0.isConstructor());
      assertEquals(true, noType0.hasInstanceType());
      assertEquals(false, noType0.isOrdinaryFunction());
      assertEquals(true, noType0.matchesStringContext());
      assertEquals(false, noType0.isResolved());
      assertEquals(false, noType0.isAllType());
      assertEquals(false, noType0.isFunctionPrototypeType());
      assertEquals(false, noType0.isNumberValueType());
      assertEquals(false, noType0.isRecordType());
      assertEquals(false, noType0.isReturnTypeInferred());
      assertEquals(false, noType0.isNoResolvedType());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertEquals(true, noType0.isNoType());
      assertEquals(false, noType0.isStringValueType());
      assertEquals(2147483647, noType0.getPropertiesCount());
      assertEquals(false, noType0.hasCachedValues());
      assertEquals(false, noType0.isEnumElementType());
      assertEquals(0, noType0.getExtendedInterfacesCount());
      assertEquals(false, noType0.isFunctionType());
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      FunctionType functionType0 = jSTypeRegistry0.createConstructorType(string0, node0, node0, (JSType) noType0);
      assertNotNull(functionType0);
      assertEquals(false, functionType0.isNominalConstructor());
      assertEquals(true, functionType0.canBeCalled());
      assertEquals(false, functionType0.isNoObjectType());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertEquals(true, functionType0.isFunctionType());
      assertEquals(false, functionType0.isOrdinaryFunction());
      assertEquals(false, functionType0.isNumberValueType());
      assertEquals(false, functionType0.isTemplateType());
      assertEquals(false, functionType0.isNominalType());
      assertEquals(false, functionType0.isRecordType());
      assertEquals(false, functionType0.isAllType());
      assertEquals(false, functionType0.isCheckedUnknownType());
      assertEquals(false, functionType0.isNullType());
      assertEquals(true, functionType0.hasInstanceType());
      assertNull(functionType0.getTemplateTypeName());
      assertEquals(false, functionType0.isReturnTypeInferred());
      assertEquals(false, functionType0.isFunctionPrototypeType());
      assertEquals(true, functionType0.isConstructor());
      assertEquals(false, functionType0.isBooleanValueType());
      assertEquals(false, functionType0.isVoidType());
      assertEquals(false, functionType0.isEnumType());
      assertEquals(2147483647, functionType0.getMaxArguments());
      assertEquals(false, functionType0.isNoType());
      assertEquals(false, functionType0.isEnumElementType());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertEquals(false, functionType0.isStringValueType());
      assertEquals(false, functionType0.hasCachedValues());
      assertEquals(false, functionType0.isResolved());
      assertEquals(false, functionType0.isNoResolvedType());
      assertEquals(false, functionType0.isUnionType());
      assertEquals(false, functionType0.isInterface());
      assertEquals(false, noType0.isUnionType());
      assertEquals(false, noType0.isTemplateType());
      assertEquals(false, noType0.isVoidType());
      assertEquals(true, noType0.canBeCalled());
      assertEquals(false, noType0.isCheckedUnknownType());
      assertEquals(2147483647, noType0.getMaxArguments());
      assertEquals(false, noType0.isBooleanValueType());
      assertEquals(false, noType0.isNominalConstructor());
      assertNull(noType0.getReferenceName());
      assertEquals(true, noType0.isNullable());
      assertEquals(true, noType0.matchesNumberContext());
      assertEquals(false, noType0.isEnumType());
      assertEquals(false, noType0.isNominalType());
      assertEquals(false, noType0.isNullType());
      assertEquals(true, noType0.matchesObjectContext());
      assertNull(noType0.getTemplateTypeName());
      assertEquals(false, noType0.isNoObjectType());
      assertEquals(false, noType0.isInterface());
      assertEquals(true, noType0.isConstructor());
      assertEquals(true, noType0.hasInstanceType());
      assertEquals(false, noType0.isOrdinaryFunction());
      assertEquals(true, noType0.matchesStringContext());
      assertEquals(false, noType0.isResolved());
      assertEquals(false, noType0.isAllType());
      assertEquals(false, noType0.isFunctionPrototypeType());
      assertEquals(false, noType0.isNumberValueType());
      assertEquals(false, noType0.isRecordType());
      assertEquals(false, noType0.isReturnTypeInferred());
      assertEquals(false, noType0.isNoResolvedType());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertEquals(true, noType0.isNoType());
      assertEquals(false, noType0.isStringValueType());
      assertEquals(2147483647, noType0.getPropertiesCount());
      assertEquals(false, noType0.hasCachedValues());
      assertEquals(false, noType0.isEnumElementType());
      assertEquals(0, noType0.getExtendedInterfacesCount());
      assertEquals(false, noType0.isFunctionType());
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      boolean boolean1 = functionType0.removeProperty(string0);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean0 == boolean1);
      assertFalse(boolean1);
      assertEquals(false, functionType0.isNominalConstructor());
      assertEquals(true, functionType0.canBeCalled());
      assertEquals(false, functionType0.isNoObjectType());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertEquals(true, functionType0.isFunctionType());
      assertEquals(false, functionType0.isOrdinaryFunction());
      assertEquals(false, functionType0.isNumberValueType());
      assertEquals(false, functionType0.isTemplateType());
      assertEquals(false, functionType0.isNominalType());
      assertEquals(false, functionType0.isRecordType());
      assertEquals(false, functionType0.isAllType());
      assertEquals(false, functionType0.isCheckedUnknownType());
      assertEquals(false, functionType0.isNullType());
      assertEquals(true, functionType0.hasInstanceType());
      assertNull(functionType0.getTemplateTypeName());
      assertEquals(false, functionType0.isReturnTypeInferred());
      assertEquals(false, functionType0.isFunctionPrototypeType());
      assertEquals(true, functionType0.isConstructor());
      assertEquals(false, functionType0.isBooleanValueType());
      assertEquals(false, functionType0.isVoidType());
      assertEquals(false, functionType0.isEnumType());
      assertEquals(2147483647, functionType0.getMaxArguments());
      assertEquals(false, functionType0.isNoType());
      assertEquals(false, functionType0.isEnumElementType());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertEquals(false, functionType0.isStringValueType());
      assertEquals(false, functionType0.hasCachedValues());
      assertEquals(false, functionType0.isResolved());
      assertEquals(false, functionType0.isNoResolvedType());
      assertEquals(false, functionType0.isUnionType());
      assertEquals(false, functionType0.isInterface());
      assertEquals(false, noType0.isUnionType());
      assertEquals(false, noType0.isTemplateType());
      assertEquals(false, noType0.isVoidType());
      assertEquals(true, noType0.canBeCalled());
      assertEquals(false, noType0.isCheckedUnknownType());
      assertEquals(2147483647, noType0.getMaxArguments());
      assertEquals(false, noType0.isBooleanValueType());
      assertEquals(false, noType0.isNominalConstructor());
      assertNull(noType0.getReferenceName());
      assertEquals(true, noType0.isNullable());
      assertEquals(true, noType0.matchesNumberContext());
      assertEquals(false, noType0.isEnumType());
      assertEquals(false, noType0.isNominalType());
      assertEquals(false, noType0.isNullType());
      assertEquals(true, noType0.matchesObjectContext());
      assertNull(noType0.getTemplateTypeName());
      assertEquals(false, noType0.isNoObjectType());
      assertEquals(false, noType0.isInterface());
      assertEquals(true, noType0.isConstructor());
      assertEquals(true, noType0.hasInstanceType());
      assertEquals(false, noType0.isOrdinaryFunction());
      assertEquals(true, noType0.matchesStringContext());
      assertEquals(false, noType0.isResolved());
      assertEquals(false, noType0.isAllType());
      assertEquals(false, noType0.isFunctionPrototypeType());
      assertEquals(false, noType0.isNumberValueType());
      assertEquals(false, noType0.isRecordType());
      assertEquals(false, noType0.isReturnTypeInferred());
      assertEquals(false, noType0.isNoResolvedType());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertEquals(true, noType0.isNoType());
      assertEquals(false, noType0.isStringValueType());
      assertEquals(2147483647, noType0.getPropertiesCount());
      assertEquals(false, noType0.hasCachedValues());
      assertEquals(false, noType0.isEnumElementType());
      assertEquals(0, noType0.getExtendedInterfacesCount());
      assertEquals(false, noType0.isFunctionType());
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
  }

  @Test
  public void test22()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      HashMap<String, RecordTypeBuilder.RecordProperty> hashMap0 = new HashMap<String, RecordTypeBuilder.RecordProperty>();
      assertNotNull(hashMap0);
      assertEquals("{}", hashMap0.toString());
      assertEquals(0, hashMap0.size());
      assertEquals(true, hashMap0.isEmpty());
      
      RecordType recordType0 = jSTypeRegistry0.createRecordType((Map<String, RecordTypeBuilder.RecordProperty>) hashMap0);
      assertNotNull(recordType0);
      assertEquals(false, recordType0.isFunctionType());
      assertEquals(false, recordType0.isNominalConstructor());
      assertEquals(false, recordType0.isConstructor());
      assertEquals(false, recordType0.isCheckedUnknownType());
      assertEquals(false, recordType0.isNoObjectType());
      assertEquals(false, recordType0.isNoType());
      assertEquals(false, recordType0.isVoidType());
      assertEquals(true, recordType0.isRecordType());
      assertEquals(false, recordType0.isAllType());
      assertEquals(false, recordType0.isInterface());
      assertEquals(false, recordType0.isFunctionPrototypeType());
      assertEquals(false, recordType0.isNoResolvedType());
      assertEquals(false, recordType0.isResolved());
      assertEquals(false, recordType0.isNumberValueType());
      assertEquals(false, recordType0.isNullType());
      assertEquals(false, recordType0.isEnumType());
      assertEquals(false, recordType0.isEnumElementType());
      assertEquals(false, recordType0.isUnionType());
      assertEquals(false, recordType0.isOrdinaryFunction());
      assertEquals(false, recordType0.isTemplateType());
      assertEquals(BooleanLiteralSet.TRUE, recordType0.getPossibleToBooleanOutcomes());
      assertEquals(false, recordType0.isStringValueType());
      assertEquals(false, recordType0.isBooleanValueType());
      assertEquals(false, recordType0.isNominalType());
      assertEquals("{}", hashMap0.toString());
      assertEquals(0, hashMap0.size());
      assertEquals(true, hashMap0.isEmpty());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      String string0 = recordType0.toString();
      assertNotNull(string0);
      assertEquals("{}", string0);
      assertEquals(false, recordType0.isFunctionType());
      assertEquals(false, recordType0.isNominalConstructor());
      assertEquals(false, recordType0.isConstructor());
      assertEquals(false, recordType0.isCheckedUnknownType());
      assertEquals(false, recordType0.isNoObjectType());
      assertEquals(false, recordType0.isNoType());
      assertEquals(false, recordType0.isVoidType());
      assertEquals(true, recordType0.isRecordType());
      assertEquals(false, recordType0.isAllType());
      assertEquals(false, recordType0.isInterface());
      assertEquals(false, recordType0.isFunctionPrototypeType());
      assertEquals(false, recordType0.isNoResolvedType());
      assertEquals(false, recordType0.isResolved());
      assertEquals(false, recordType0.isNumberValueType());
      assertEquals(false, recordType0.isNullType());
      assertEquals(false, recordType0.isEnumType());
      assertEquals(false, recordType0.isEnumElementType());
      assertEquals(false, recordType0.isUnionType());
      assertEquals(false, recordType0.isOrdinaryFunction());
      assertEquals(false, recordType0.isTemplateType());
      assertEquals(BooleanLiteralSet.TRUE, recordType0.getPossibleToBooleanOutcomes());
      assertEquals(false, recordType0.isStringValueType());
      assertEquals(false, recordType0.isBooleanValueType());
      assertEquals(false, recordType0.isNominalType());
      assertEquals("{}", hashMap0.toString());
      assertEquals(0, hashMap0.size());
      assertEquals(true, hashMap0.isEmpty());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      boolean boolean0 = recordType0.isPropertyTypeInferred(string0);
      assertFalse(boolean0);
      assertEquals(false, recordType0.isFunctionType());
      assertEquals(false, recordType0.isNominalConstructor());
      assertEquals(false, recordType0.isConstructor());
      assertEquals(false, recordType0.isCheckedUnknownType());
      assertEquals(false, recordType0.isNoObjectType());
      assertEquals(false, recordType0.isNoType());
      assertEquals(false, recordType0.isVoidType());
      assertEquals(true, recordType0.isRecordType());
      assertEquals(false, recordType0.isAllType());
      assertEquals(false, recordType0.isInterface());
      assertEquals(false, recordType0.isFunctionPrototypeType());
      assertEquals(false, recordType0.isNoResolvedType());
      assertEquals(false, recordType0.isResolved());
      assertEquals(false, recordType0.isNumberValueType());
      assertEquals(false, recordType0.isNullType());
      assertEquals(false, recordType0.isEnumType());
      assertEquals(false, recordType0.isEnumElementType());
      assertEquals(false, recordType0.isUnionType());
      assertEquals(false, recordType0.isOrdinaryFunction());
      assertEquals(false, recordType0.isTemplateType());
      assertEquals(BooleanLiteralSet.TRUE, recordType0.getPossibleToBooleanOutcomes());
      assertEquals(false, recordType0.isStringValueType());
      assertEquals(false, recordType0.isBooleanValueType());
      assertEquals(false, recordType0.isNominalType());
      assertEquals("{}", hashMap0.toString());
      assertEquals(0, hashMap0.size());
      assertEquals(true, hashMap0.isEmpty());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
  }

  @Test
  public void test23()  throws Throwable  {
      String string0 = "aRegExp";
      int int0 = 0;
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      NoType noType0 = new NoType(jSTypeRegistry0);
      assertNotNull(noType0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(true, noType0.isConstructor());
      assertEquals(false, noType0.isNominalType());
      assertEquals(false, noType0.isNumberValueType());
      assertEquals(false, noType0.isInterface());
      assertNull(noType0.getTemplateTypeName());
      assertEquals(false, noType0.isNoResolvedType());
      assertEquals(false, noType0.isFunctionType());
      assertEquals(false, noType0.isVoidType());
      assertEquals(false, noType0.isFunctionPrototypeType());
      assertEquals(false, noType0.isEnumType());
      assertEquals(false, noType0.isRecordType());
      assertEquals(false, noType0.isEnumElementType());
      assertEquals(false, noType0.hasCachedValues());
      assertEquals(false, noType0.isOrdinaryFunction());
      assertEquals(false, noType0.isReturnTypeInferred());
      assertEquals(true, noType0.isNullable());
      assertEquals(false, noType0.isStringValueType());
      assertEquals(true, noType0.isNoType());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noType0.isCheckedUnknownType());
      assertEquals(2147483647, noType0.getMaxArguments());
      assertEquals(true, noType0.matchesObjectContext());
      assertEquals(false, noType0.isAllType());
      assertEquals(0, noType0.getExtendedInterfacesCount());
      assertEquals(true, noType0.matchesStringContext());
      assertEquals(false, noType0.isNominalConstructor());
      assertNull(noType0.getReferenceName());
      assertEquals(true, noType0.canBeCalled());
      assertEquals(false, noType0.isTemplateType());
      assertEquals(true, noType0.matchesNumberContext());
      assertEquals(2147483647, noType0.getPropertiesCount());
      assertEquals(false, noType0.isUnionType());
      assertEquals(false, noType0.isNoObjectType());
      assertEquals(false, noType0.isBooleanValueType());
      assertEquals(false, noType0.isResolved());
      assertEquals(true, noType0.hasInstanceType());
      assertEquals(false, noType0.isNullType());
      
      boolean boolean0 = noType0.hasReferenceName();
      assertFalse(boolean0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(true, noType0.isConstructor());
      assertEquals(false, noType0.isNominalType());
      assertEquals(false, noType0.isNumberValueType());
      assertEquals(false, noType0.isInterface());
      assertNull(noType0.getTemplateTypeName());
      assertEquals(false, noType0.isNoResolvedType());
      assertEquals(false, noType0.isFunctionType());
      assertEquals(false, noType0.isVoidType());
      assertEquals(false, noType0.isFunctionPrototypeType());
      assertEquals(false, noType0.isEnumType());
      assertEquals(false, noType0.isRecordType());
      assertEquals(false, noType0.isEnumElementType());
      assertEquals(false, noType0.hasCachedValues());
      assertEquals(false, noType0.isOrdinaryFunction());
      assertEquals(false, noType0.isReturnTypeInferred());
      assertEquals(true, noType0.isNullable());
      assertEquals(false, noType0.isStringValueType());
      assertEquals(true, noType0.isNoType());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noType0.isCheckedUnknownType());
      assertEquals(2147483647, noType0.getMaxArguments());
      assertEquals(true, noType0.matchesObjectContext());
      assertEquals(false, noType0.isAllType());
      assertEquals(0, noType0.getExtendedInterfacesCount());
      assertEquals(true, noType0.matchesStringContext());
      assertEquals(false, noType0.isNominalConstructor());
      assertNull(noType0.getReferenceName());
      assertEquals(true, noType0.canBeCalled());
      assertEquals(false, noType0.isTemplateType());
      assertEquals(true, noType0.matchesNumberContext());
      assertEquals(2147483647, noType0.getPropertiesCount());
      assertEquals(false, noType0.isUnionType());
      assertEquals(false, noType0.isNoObjectType());
      assertEquals(false, noType0.isBooleanValueType());
      assertEquals(false, noType0.isResolved());
      assertEquals(true, noType0.hasInstanceType());
      assertEquals(false, noType0.isNullType());
      
      FunctionType functionType0 = noType0.getBindReturnType(int0);
      assertNotNull(functionType0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, functionType0.isBooleanValueType());
      assertEquals(false, functionType0.isNullType());
      assertEquals(false, functionType0.isNumberValueType());
      assertEquals(false, functionType0.isAllType());
      assertEquals(false, functionType0.isNoObjectType());
      assertEquals(false, functionType0.isNoType());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertEquals(false, functionType0.isConstructor());
      assertEquals(false, functionType0.isEnumType());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, functionType0.isStringValueType());
      assertEquals(2147483647, functionType0.getMaxArguments());
      assertEquals(false, functionType0.isResolved());
      assertEquals(false, functionType0.isNoResolvedType());
      assertEquals(false, functionType0.isInterface());
      assertEquals(true, functionType0.isOrdinaryFunction());
      assertEquals(false, functionType0.isUnionType());
      assertEquals(false, functionType0.isNominalConstructor());
      assertEquals(false, functionType0.isRecordType());
      assertEquals(false, functionType0.isVoidType());
      assertEquals(false, functionType0.isFunctionPrototypeType());
      assertEquals(false, functionType0.isTemplateType());
      assertEquals(true, functionType0.isFunctionType());
      assertEquals(false, functionType0.isNominalType());
      assertNull(functionType0.getTemplateTypeName());
      assertEquals(false, functionType0.isCheckedUnknownType());
      assertEquals(false, functionType0.isEnumElementType());
      assertEquals(false, functionType0.isReturnTypeInferred());
      assertEquals(false, functionType0.hasInstanceType());
      assertEquals(true, functionType0.canBeCalled());
      assertEquals(false, functionType0.hasCachedValues());
      assertEquals(true, noType0.isConstructor());
      assertEquals(false, noType0.isNominalType());
      assertEquals(false, noType0.isNumberValueType());
      assertEquals(false, noType0.isInterface());
      assertNull(noType0.getTemplateTypeName());
      assertEquals(false, noType0.isNoResolvedType());
      assertEquals(false, noType0.isFunctionType());
      assertEquals(false, noType0.isVoidType());
      assertEquals(false, noType0.isFunctionPrototypeType());
      assertEquals(false, noType0.isEnumType());
      assertEquals(false, noType0.isRecordType());
      assertEquals(false, noType0.isEnumElementType());
      assertEquals(false, noType0.hasCachedValues());
      assertEquals(false, noType0.isOrdinaryFunction());
      assertEquals(false, noType0.isReturnTypeInferred());
      assertEquals(true, noType0.isNullable());
      assertEquals(false, noType0.isStringValueType());
      assertEquals(true, noType0.isNoType());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noType0.isCheckedUnknownType());
      assertEquals(2147483647, noType0.getMaxArguments());
      assertEquals(true, noType0.matchesObjectContext());
      assertEquals(false, noType0.isAllType());
      assertEquals(0, noType0.getExtendedInterfacesCount());
      assertEquals(true, noType0.matchesStringContext());
      assertEquals(false, noType0.isNominalConstructor());
      assertNull(noType0.getReferenceName());
      assertEquals(true, noType0.canBeCalled());
      assertEquals(false, noType0.isTemplateType());
      assertEquals(true, noType0.matchesNumberContext());
      assertEquals(2147483647, noType0.getPropertiesCount());
      assertEquals(false, noType0.isUnionType());
      assertEquals(false, noType0.isNoObjectType());
      assertEquals(false, noType0.isBooleanValueType());
      assertEquals(false, noType0.isResolved());
      assertEquals(true, noType0.hasInstanceType());
      assertEquals(false, noType0.isNullType());
      
      Node node0 = Node.newString(string0);
      assertNotNull(node0);
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isFalse());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isNew());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isDec());
      assertEquals(40, node0.getType());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isName());
      assertEquals(true, node0.isString());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isNot());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isDebugger());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isScript());
      assertEquals(false, node0.isContinue());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isSyntheticBlock());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isArrayLit());
      
      boolean boolean1 = functionType0.defineProperty(string0, noType0, boolean0, node0);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean0 == boolean1);
      assertTrue(boolean1);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, functionType0.isBooleanValueType());
      assertEquals(false, functionType0.isNullType());
      assertEquals(false, functionType0.isNumberValueType());
      assertEquals(false, functionType0.isAllType());
      assertEquals(false, functionType0.isNoObjectType());
      assertEquals(false, functionType0.isNoType());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertEquals(false, functionType0.isConstructor());
      assertEquals(false, functionType0.isEnumType());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, functionType0.isStringValueType());
      assertEquals(2147483647, functionType0.getMaxArguments());
      assertEquals(false, functionType0.isResolved());
      assertEquals(false, functionType0.isNoResolvedType());
      assertEquals(false, functionType0.isInterface());
      assertEquals(true, functionType0.isOrdinaryFunction());
      assertEquals(false, functionType0.isUnionType());
      assertEquals(false, functionType0.isNominalConstructor());
      assertEquals(false, functionType0.isRecordType());
      assertEquals(false, functionType0.isVoidType());
      assertEquals(false, functionType0.isFunctionPrototypeType());
      assertEquals(false, functionType0.isTemplateType());
      assertEquals(true, functionType0.isFunctionType());
      assertEquals(false, functionType0.isNominalType());
      assertNull(functionType0.getTemplateTypeName());
      assertEquals(false, functionType0.isCheckedUnknownType());
      assertEquals(false, functionType0.isEnumElementType());
      assertEquals(false, functionType0.isReturnTypeInferred());
      assertEquals(false, functionType0.hasInstanceType());
      assertEquals(true, functionType0.canBeCalled());
      assertEquals(false, functionType0.hasCachedValues());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isFalse());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isNew());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isDec());
      assertEquals(40, node0.getType());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isName());
      assertEquals(true, node0.isString());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isNot());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isDebugger());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isScript());
      assertEquals(false, node0.isContinue());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isSyntheticBlock());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isArrayLit());
      assertEquals(true, noType0.isConstructor());
      assertEquals(false, noType0.isNominalType());
      assertEquals(false, noType0.isNumberValueType());
      assertEquals(false, noType0.isInterface());
      assertNull(noType0.getTemplateTypeName());
      assertEquals(false, noType0.isNoResolvedType());
      assertEquals(false, noType0.isFunctionType());
      assertEquals(false, noType0.isVoidType());
      assertEquals(false, noType0.isFunctionPrototypeType());
      assertEquals(false, noType0.isEnumType());
      assertEquals(false, noType0.isRecordType());
      assertEquals(false, noType0.isEnumElementType());
      assertEquals(false, noType0.hasCachedValues());
      assertEquals(false, noType0.isOrdinaryFunction());
      assertEquals(false, noType0.isReturnTypeInferred());
      assertEquals(true, noType0.isNullable());
      assertEquals(false, noType0.isStringValueType());
      assertEquals(true, noType0.isNoType());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noType0.isCheckedUnknownType());
      assertEquals(2147483647, noType0.getMaxArguments());
      assertEquals(true, noType0.matchesObjectContext());
      assertEquals(false, noType0.isAllType());
      assertEquals(0, noType0.getExtendedInterfacesCount());
      assertEquals(true, noType0.matchesStringContext());
      assertEquals(false, noType0.isNominalConstructor());
      assertNull(noType0.getReferenceName());
      assertEquals(true, noType0.canBeCalled());
      assertEquals(false, noType0.isTemplateType());
      assertEquals(true, noType0.matchesNumberContext());
      assertEquals(2147483647, noType0.getPropertiesCount());
      assertEquals(false, noType0.isUnionType());
      assertEquals(false, noType0.isNoObjectType());
      assertEquals(false, noType0.isBooleanValueType());
      assertEquals(false, noType0.isResolved());
      assertEquals(true, noType0.hasInstanceType());
      assertEquals(false, noType0.isNullType());
      
      Set<String> set0 = functionType0.getPropertyNames();
      assertNotNull(set0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, functionType0.isBooleanValueType());
      assertEquals(false, functionType0.isNullType());
      assertEquals(false, functionType0.isNumberValueType());
      assertEquals(false, functionType0.isAllType());
      assertEquals(false, functionType0.isNoObjectType());
      assertEquals(false, functionType0.isNoType());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertEquals(false, functionType0.isConstructor());
      assertEquals(false, functionType0.isEnumType());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, functionType0.isStringValueType());
      assertEquals(2147483647, functionType0.getMaxArguments());
      assertEquals(false, functionType0.isResolved());
      assertEquals(false, functionType0.isNoResolvedType());
      assertEquals(false, functionType0.isInterface());
      assertEquals(true, functionType0.isOrdinaryFunction());
      assertEquals(false, functionType0.isUnionType());
      assertEquals(false, functionType0.isNominalConstructor());
      assertEquals(false, functionType0.isRecordType());
      assertEquals(false, functionType0.isVoidType());
      assertEquals(false, functionType0.isFunctionPrototypeType());
      assertEquals(false, functionType0.isTemplateType());
      assertEquals(true, functionType0.isFunctionType());
      assertEquals(false, functionType0.isNominalType());
      assertNull(functionType0.getTemplateTypeName());
      assertEquals(false, functionType0.isCheckedUnknownType());
      assertEquals(false, functionType0.isEnumElementType());
      assertEquals(false, functionType0.isReturnTypeInferred());
      assertEquals(false, functionType0.hasInstanceType());
      assertEquals(true, functionType0.canBeCalled());
      assertEquals(false, functionType0.hasCachedValues());
      assertEquals(1, set0.size());
      assertEquals(false, set0.isEmpty());
      assertEquals(true, noType0.isConstructor());
      assertEquals(false, noType0.isNominalType());
      assertEquals(false, noType0.isNumberValueType());
      assertEquals(false, noType0.isInterface());
      assertNull(noType0.getTemplateTypeName());
      assertEquals(false, noType0.isNoResolvedType());
      assertEquals(false, noType0.isFunctionType());
      assertEquals(false, noType0.isVoidType());
      assertEquals(false, noType0.isFunctionPrototypeType());
      assertEquals(false, noType0.isEnumType());
      assertEquals(false, noType0.isRecordType());
      assertEquals(false, noType0.isEnumElementType());
      assertEquals(false, noType0.hasCachedValues());
      assertEquals(false, noType0.isOrdinaryFunction());
      assertEquals(false, noType0.isReturnTypeInferred());
      assertEquals(true, noType0.isNullable());
      assertEquals(false, noType0.isStringValueType());
      assertEquals(true, noType0.isNoType());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noType0.isCheckedUnknownType());
      assertEquals(2147483647, noType0.getMaxArguments());
      assertEquals(true, noType0.matchesObjectContext());
      assertEquals(false, noType0.isAllType());
      assertEquals(0, noType0.getExtendedInterfacesCount());
      assertEquals(true, noType0.matchesStringContext());
      assertEquals(false, noType0.isNominalConstructor());
      assertNull(noType0.getReferenceName());
      assertEquals(true, noType0.canBeCalled());
      assertEquals(false, noType0.isTemplateType());
      assertEquals(true, noType0.matchesNumberContext());
      assertEquals(2147483647, noType0.getPropertiesCount());
      assertEquals(false, noType0.isUnionType());
      assertEquals(false, noType0.isNoObjectType());
      assertEquals(false, noType0.isBooleanValueType());
      assertEquals(false, noType0.isResolved());
      assertEquals(true, noType0.hasInstanceType());
      assertEquals(false, noType0.isNullType());
  }

  @Test
  public void test24()  throws Throwable  {
      String string0 = "aRegExp";
      int int0 = 0;
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      NoType noType0 = new NoType(jSTypeRegistry0);
      assertNotNull(noType0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(2147483647, noType0.getPropertiesCount());
      assertEquals(false, noType0.isNoResolvedType());
      assertEquals(false, noType0.hasCachedValues());
      assertEquals(true, noType0.matchesStringContext());
      assertEquals(true, noType0.hasInstanceType());
      assertEquals(false, noType0.isNullType());
      assertNull(noType0.getTemplateTypeName());
      assertEquals(false, noType0.isUnionType());
      assertEquals(false, noType0.isResolved());
      assertEquals(false, noType0.isReturnTypeInferred());
      assertEquals(false, noType0.isNominalConstructor());
      assertEquals(false, noType0.isNominalType());
      assertEquals(false, noType0.isStringValueType());
      assertEquals(false, noType0.isBooleanValueType());
      assertEquals(false, noType0.isNoObjectType());
      assertEquals(false, noType0.isVoidType());
      assertEquals(true, noType0.matchesObjectContext());
      assertEquals(true, noType0.matchesNumberContext());
      assertEquals(false, noType0.isEnumElementType());
      assertEquals(false, noType0.isAllType());
      assertEquals(false, noType0.isInterface());
      assertEquals(false, noType0.isRecordType());
      assertEquals(false, noType0.isCheckedUnknownType());
      assertEquals(true, noType0.isConstructor());
      assertEquals(false, noType0.isFunctionPrototypeType());
      assertEquals(false, noType0.isEnumType());
      assertEquals(2147483647, noType0.getMaxArguments());
      assertEquals(0, noType0.getExtendedInterfacesCount());
      assertEquals(false, noType0.isTemplateType());
      assertEquals(false, noType0.isOrdinaryFunction());
      assertNull(noType0.getReferenceName());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noType0.isNumberValueType());
      assertEquals(false, noType0.isFunctionType());
      assertEquals(true, noType0.isNoType());
      assertEquals(true, noType0.isNullable());
      assertEquals(true, noType0.canBeCalled());
      
      boolean boolean0 = noType0.hasReferenceName();
      assertFalse(boolean0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(2147483647, noType0.getPropertiesCount());
      assertEquals(false, noType0.isNoResolvedType());
      assertEquals(false, noType0.hasCachedValues());
      assertEquals(true, noType0.matchesStringContext());
      assertEquals(true, noType0.hasInstanceType());
      assertEquals(false, noType0.isNullType());
      assertNull(noType0.getTemplateTypeName());
      assertEquals(false, noType0.isUnionType());
      assertEquals(false, noType0.isResolved());
      assertEquals(false, noType0.isReturnTypeInferred());
      assertEquals(false, noType0.isNominalConstructor());
      assertEquals(false, noType0.isNominalType());
      assertEquals(false, noType0.isStringValueType());
      assertEquals(false, noType0.isBooleanValueType());
      assertEquals(false, noType0.isNoObjectType());
      assertEquals(false, noType0.isVoidType());
      assertEquals(true, noType0.matchesObjectContext());
      assertEquals(true, noType0.matchesNumberContext());
      assertEquals(false, noType0.isEnumElementType());
      assertEquals(false, noType0.isAllType());
      assertEquals(false, noType0.isInterface());
      assertEquals(false, noType0.isRecordType());
      assertEquals(false, noType0.isCheckedUnknownType());
      assertEquals(true, noType0.isConstructor());
      assertEquals(false, noType0.isFunctionPrototypeType());
      assertEquals(false, noType0.isEnumType());
      assertEquals(2147483647, noType0.getMaxArguments());
      assertEquals(0, noType0.getExtendedInterfacesCount());
      assertEquals(false, noType0.isTemplateType());
      assertEquals(false, noType0.isOrdinaryFunction());
      assertNull(noType0.getReferenceName());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noType0.isNumberValueType());
      assertEquals(false, noType0.isFunctionType());
      assertEquals(true, noType0.isNoType());
      assertEquals(true, noType0.isNullable());
      assertEquals(true, noType0.canBeCalled());
      
      FunctionType functionType0 = noType0.getBindReturnType(int0);
      assertNotNull(functionType0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(2147483647, noType0.getPropertiesCount());
      assertEquals(false, noType0.isNoResolvedType());
      assertEquals(false, noType0.hasCachedValues());
      assertEquals(true, noType0.matchesStringContext());
      assertEquals(true, noType0.hasInstanceType());
      assertEquals(false, noType0.isNullType());
      assertNull(noType0.getTemplateTypeName());
      assertEquals(false, noType0.isUnionType());
      assertEquals(false, noType0.isResolved());
      assertEquals(false, noType0.isReturnTypeInferred());
      assertEquals(false, noType0.isNominalConstructor());
      assertEquals(false, noType0.isNominalType());
      assertEquals(false, noType0.isStringValueType());
      assertEquals(false, noType0.isBooleanValueType());
      assertEquals(false, noType0.isNoObjectType());
      assertEquals(false, noType0.isVoidType());
      assertEquals(true, noType0.matchesObjectContext());
      assertEquals(true, noType0.matchesNumberContext());
      assertEquals(false, noType0.isEnumElementType());
      assertEquals(false, noType0.isAllType());
      assertEquals(false, noType0.isInterface());
      assertEquals(false, noType0.isRecordType());
      assertEquals(false, noType0.isCheckedUnknownType());
      assertEquals(true, noType0.isConstructor());
      assertEquals(false, noType0.isFunctionPrototypeType());
      assertEquals(false, noType0.isEnumType());
      assertEquals(2147483647, noType0.getMaxArguments());
      assertEquals(0, noType0.getExtendedInterfacesCount());
      assertEquals(false, noType0.isTemplateType());
      assertEquals(false, noType0.isOrdinaryFunction());
      assertNull(noType0.getReferenceName());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noType0.isNumberValueType());
      assertEquals(false, noType0.isFunctionType());
      assertEquals(true, noType0.isNoType());
      assertEquals(true, noType0.isNullable());
      assertEquals(true, noType0.canBeCalled());
      assertEquals(false, functionType0.hasInstanceType());
      assertEquals(true, functionType0.isOrdinaryFunction());
      assertNull(functionType0.getTemplateTypeName());
      assertEquals(false, functionType0.hasCachedValues());
      assertEquals(false, functionType0.isFunctionPrototypeType());
      assertEquals(false, functionType0.isAllType());
      assertEquals(false, functionType0.isEnumElementType());
      assertEquals(false, functionType0.isNullType());
      assertEquals(false, functionType0.isNominalType());
      assertEquals(true, functionType0.canBeCalled());
      assertEquals(false, functionType0.isCheckedUnknownType());
      assertEquals(false, functionType0.isReturnTypeInferred());
      assertEquals(2147483647, functionType0.getMaxArguments());
      assertEquals(false, functionType0.isInterface());
      assertEquals(false, functionType0.isEnumType());
      assertEquals(false, functionType0.isVoidType());
      assertEquals(false, functionType0.isRecordType());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertEquals(false, functionType0.isNoResolvedType());
      assertEquals(false, functionType0.isNoType());
      assertEquals(false, functionType0.isResolved());
      assertEquals(false, functionType0.isNumberValueType());
      assertEquals(false, functionType0.isUnionType());
      assertEquals(false, functionType0.isStringValueType());
      assertEquals(false, functionType0.isConstructor());
      assertEquals(false, functionType0.isBooleanValueType());
      assertEquals(true, functionType0.isFunctionType());
      assertEquals(false, functionType0.isNominalConstructor());
      assertEquals(false, functionType0.isTemplateType());
      assertEquals(false, functionType0.isNoObjectType());
      
      Node node0 = Node.newString(string0);
      assertNotNull(node0);
      assertEquals(false, node0.isIf());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isCase());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(false, node0.isWhile());
      assertEquals(0, node0.getLength());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isQuotedString());
      assertEquals(true, node0.isString());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isDelProp());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isBlock());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.isScript());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(40, node0.getType());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isInstanceOf());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isAnd());
      
      boolean boolean1 = functionType0.defineProperty(string0, noType0, boolean0, node0);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean0 == boolean1);
      assertTrue(boolean1);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(2147483647, noType0.getPropertiesCount());
      assertEquals(false, noType0.isNoResolvedType());
      assertEquals(false, noType0.hasCachedValues());
      assertEquals(true, noType0.matchesStringContext());
      assertEquals(true, noType0.hasInstanceType());
      assertEquals(false, noType0.isNullType());
      assertNull(noType0.getTemplateTypeName());
      assertEquals(false, noType0.isUnionType());
      assertEquals(false, noType0.isResolved());
      assertEquals(false, noType0.isReturnTypeInferred());
      assertEquals(false, noType0.isNominalConstructor());
      assertEquals(false, noType0.isNominalType());
      assertEquals(false, noType0.isStringValueType());
      assertEquals(false, noType0.isBooleanValueType());
      assertEquals(false, noType0.isNoObjectType());
      assertEquals(false, noType0.isVoidType());
      assertEquals(true, noType0.matchesObjectContext());
      assertEquals(true, noType0.matchesNumberContext());
      assertEquals(false, noType0.isEnumElementType());
      assertEquals(false, noType0.isAllType());
      assertEquals(false, noType0.isInterface());
      assertEquals(false, noType0.isRecordType());
      assertEquals(false, noType0.isCheckedUnknownType());
      assertEquals(true, noType0.isConstructor());
      assertEquals(false, noType0.isFunctionPrototypeType());
      assertEquals(false, noType0.isEnumType());
      assertEquals(2147483647, noType0.getMaxArguments());
      assertEquals(0, noType0.getExtendedInterfacesCount());
      assertEquals(false, noType0.isTemplateType());
      assertEquals(false, noType0.isOrdinaryFunction());
      assertNull(noType0.getReferenceName());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noType0.isNumberValueType());
      assertEquals(false, noType0.isFunctionType());
      assertEquals(true, noType0.isNoType());
      assertEquals(true, noType0.isNullable());
      assertEquals(true, noType0.canBeCalled());
      assertEquals(false, functionType0.hasInstanceType());
      assertEquals(true, functionType0.isOrdinaryFunction());
      assertNull(functionType0.getTemplateTypeName());
      assertEquals(false, functionType0.hasCachedValues());
      assertEquals(false, functionType0.isFunctionPrototypeType());
      assertEquals(false, functionType0.isAllType());
      assertEquals(false, functionType0.isEnumElementType());
      assertEquals(false, functionType0.isNullType());
      assertEquals(false, functionType0.isNominalType());
      assertEquals(true, functionType0.canBeCalled());
      assertEquals(false, functionType0.isCheckedUnknownType());
      assertEquals(false, functionType0.isReturnTypeInferred());
      assertEquals(2147483647, functionType0.getMaxArguments());
      assertEquals(false, functionType0.isInterface());
      assertEquals(false, functionType0.isEnumType());
      assertEquals(false, functionType0.isVoidType());
      assertEquals(false, functionType0.isRecordType());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertEquals(false, functionType0.isNoResolvedType());
      assertEquals(false, functionType0.isNoType());
      assertEquals(false, functionType0.isResolved());
      assertEquals(false, functionType0.isNumberValueType());
      assertEquals(false, functionType0.isUnionType());
      assertEquals(false, functionType0.isStringValueType());
      assertEquals(false, functionType0.isConstructor());
      assertEquals(false, functionType0.isBooleanValueType());
      assertEquals(true, functionType0.isFunctionType());
      assertEquals(false, functionType0.isNominalConstructor());
      assertEquals(false, functionType0.isTemplateType());
      assertEquals(false, functionType0.isNoObjectType());
      assertEquals(false, node0.isIf());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isCase());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(false, node0.isWhile());
      assertEquals(0, node0.getLength());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isQuotedString());
      assertEquals(true, node0.isString());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isDelProp());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isBlock());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.isScript());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(40, node0.getType());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isInstanceOf());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isAnd());
      
      boolean boolean2 = functionType0.defineDeclaredProperty(string0, (JSType) noType0, node0);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(2147483647, noType0.getPropertiesCount());
      assertEquals(false, noType0.isNoResolvedType());
      assertEquals(false, noType0.hasCachedValues());
      assertEquals(true, noType0.matchesStringContext());
      assertEquals(true, noType0.hasInstanceType());
      assertEquals(false, noType0.isNullType());
      assertNull(noType0.getTemplateTypeName());
      assertEquals(false, noType0.isUnionType());
      assertEquals(false, noType0.isResolved());
      assertEquals(false, noType0.isReturnTypeInferred());
      assertEquals(false, noType0.isNominalConstructor());
      assertEquals(false, noType0.isNominalType());
      assertEquals(false, noType0.isStringValueType());
      assertEquals(false, noType0.isBooleanValueType());
      assertEquals(false, noType0.isNoObjectType());
      assertEquals(false, noType0.isVoidType());
      assertEquals(true, noType0.matchesObjectContext());
      assertEquals(true, noType0.matchesNumberContext());
      assertEquals(false, noType0.isEnumElementType());
      assertEquals(false, noType0.isAllType());
      assertEquals(false, noType0.isInterface());
      assertEquals(false, noType0.isRecordType());
      assertEquals(false, noType0.isCheckedUnknownType());
      assertEquals(true, noType0.isConstructor());
      assertEquals(false, noType0.isFunctionPrototypeType());
      assertEquals(false, noType0.isEnumType());
      assertEquals(2147483647, noType0.getMaxArguments());
      assertEquals(0, noType0.getExtendedInterfacesCount());
      assertEquals(false, noType0.isTemplateType());
      assertEquals(false, noType0.isOrdinaryFunction());
      assertNull(noType0.getReferenceName());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noType0.isNumberValueType());
      assertEquals(false, noType0.isFunctionType());
      assertEquals(true, noType0.isNoType());
      assertEquals(true, noType0.isNullable());
      assertEquals(true, noType0.canBeCalled());
      assertEquals(false, functionType0.hasInstanceType());
      assertEquals(true, functionType0.isOrdinaryFunction());
      assertNull(functionType0.getTemplateTypeName());
      assertEquals(false, functionType0.hasCachedValues());
      assertEquals(false, functionType0.isFunctionPrototypeType());
      assertEquals(false, functionType0.isAllType());
      assertEquals(false, functionType0.isEnumElementType());
      assertEquals(false, functionType0.isNullType());
      assertEquals(false, functionType0.isNominalType());
      assertEquals(true, functionType0.canBeCalled());
      assertEquals(false, functionType0.isCheckedUnknownType());
      assertEquals(false, functionType0.isReturnTypeInferred());
      assertEquals(2147483647, functionType0.getMaxArguments());
      assertEquals(false, functionType0.isInterface());
      assertEquals(false, functionType0.isEnumType());
      assertEquals(false, functionType0.isVoidType());
      assertEquals(false, functionType0.isRecordType());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertEquals(false, functionType0.isNoResolvedType());
      assertEquals(false, functionType0.isNoType());
      assertEquals(false, functionType0.isResolved());
      assertEquals(false, functionType0.isNumberValueType());
      assertEquals(false, functionType0.isUnionType());
      assertEquals(false, functionType0.isStringValueType());
      assertEquals(false, functionType0.isConstructor());
      assertEquals(false, functionType0.isBooleanValueType());
      assertEquals(true, functionType0.isFunctionType());
      assertEquals(false, functionType0.isNominalConstructor());
      assertEquals(false, functionType0.isTemplateType());
      assertEquals(false, functionType0.isNoObjectType());
      assertEquals(false, node0.isIf());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isCase());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(false, node0.isWhile());
      assertEquals(0, node0.getLength());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isQuotedString());
      assertEquals(true, node0.isString());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isDelProp());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isBlock());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.isScript());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(40, node0.getType());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isInstanceOf());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isAnd());
  }

  @Test
  public void test25()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      HashMap<String, RecordTypeBuilder.RecordProperty> hashMap0 = new HashMap<String, RecordTypeBuilder.RecordProperty>();
      assertNotNull(hashMap0);
      assertEquals("{}", hashMap0.toString());
      assertEquals(true, hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      RecordType recordType0 = jSTypeRegistry0.createRecordType((Map<String, RecordTypeBuilder.RecordProperty>) hashMap0);
      assertNotNull(recordType0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals("{}", hashMap0.toString());
      assertEquals(true, hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(false, recordType0.isFunctionType());
      assertEquals(false, recordType0.isEnumElementType());
      assertEquals(false, recordType0.isNoResolvedType());
      assertEquals(false, recordType0.isNullType());
      assertEquals(false, recordType0.isAllType());
      assertEquals(false, recordType0.isBooleanValueType());
      assertEquals(false, recordType0.isNoType());
      assertEquals(false, recordType0.isStringValueType());
      assertEquals(false, recordType0.isInterface());
      assertEquals(false, recordType0.isNominalType());
      assertEquals(false, recordType0.isUnionType());
      assertEquals(false, recordType0.isNumberValueType());
      assertEquals(BooleanLiteralSet.TRUE, recordType0.getPossibleToBooleanOutcomes());
      assertEquals(false, recordType0.isCheckedUnknownType());
      assertEquals(false, recordType0.isFunctionPrototypeType());
      assertEquals(false, recordType0.isEnumType());
      assertEquals(false, recordType0.isConstructor());
      assertEquals(false, recordType0.isVoidType());
      assertEquals(false, recordType0.isOrdinaryFunction());
      assertEquals(false, recordType0.isNominalConstructor());
      assertEquals(true, recordType0.isRecordType());
      assertEquals(false, recordType0.isTemplateType());
      assertEquals(false, recordType0.isNoObjectType());
      assertEquals(false, recordType0.isResolved());
      
      String string0 = recordType0.toString();
      assertNotNull(string0);
      assertEquals("{}", string0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals("{}", hashMap0.toString());
      assertEquals(true, hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(false, recordType0.isFunctionType());
      assertEquals(false, recordType0.isEnumElementType());
      assertEquals(false, recordType0.isNoResolvedType());
      assertEquals(false, recordType0.isNullType());
      assertEquals(false, recordType0.isAllType());
      assertEquals(false, recordType0.isBooleanValueType());
      assertEquals(false, recordType0.isNoType());
      assertEquals(false, recordType0.isStringValueType());
      assertEquals(false, recordType0.isInterface());
      assertEquals(false, recordType0.isNominalType());
      assertEquals(false, recordType0.isUnionType());
      assertEquals(false, recordType0.isNumberValueType());
      assertEquals(BooleanLiteralSet.TRUE, recordType0.getPossibleToBooleanOutcomes());
      assertEquals(false, recordType0.isCheckedUnknownType());
      assertEquals(false, recordType0.isFunctionPrototypeType());
      assertEquals(false, recordType0.isEnumType());
      assertEquals(false, recordType0.isConstructor());
      assertEquals(false, recordType0.isVoidType());
      assertEquals(false, recordType0.isOrdinaryFunction());
      assertEquals(false, recordType0.isNominalConstructor());
      assertEquals(true, recordType0.isRecordType());
      assertEquals(false, recordType0.isTemplateType());
      assertEquals(false, recordType0.isNoObjectType());
      assertEquals(false, recordType0.isResolved());
      
      boolean boolean0 = recordType0.isPropertyTypeDeclared(string0);
      assertFalse(boolean0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals("{}", hashMap0.toString());
      assertEquals(true, hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(false, recordType0.isFunctionType());
      assertEquals(false, recordType0.isEnumElementType());
      assertEquals(false, recordType0.isNoResolvedType());
      assertEquals(false, recordType0.isNullType());
      assertEquals(false, recordType0.isAllType());
      assertEquals(false, recordType0.isBooleanValueType());
      assertEquals(false, recordType0.isNoType());
      assertEquals(false, recordType0.isStringValueType());
      assertEquals(false, recordType0.isInterface());
      assertEquals(false, recordType0.isNominalType());
      assertEquals(false, recordType0.isUnionType());
      assertEquals(false, recordType0.isNumberValueType());
      assertEquals(BooleanLiteralSet.TRUE, recordType0.getPossibleToBooleanOutcomes());
      assertEquals(false, recordType0.isCheckedUnknownType());
      assertEquals(false, recordType0.isFunctionPrototypeType());
      assertEquals(false, recordType0.isEnumType());
      assertEquals(false, recordType0.isConstructor());
      assertEquals(false, recordType0.isVoidType());
      assertEquals(false, recordType0.isOrdinaryFunction());
      assertEquals(false, recordType0.isNominalConstructor());
      assertEquals(true, recordType0.isRecordType());
      assertEquals(false, recordType0.isTemplateType());
      assertEquals(false, recordType0.isNoObjectType());
      assertEquals(false, recordType0.isResolved());
  }

  @Test
  public void test26()  throws Throwable  {
      String string0 = "aRegExp";
      int int0 = 0;
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      NoType noType0 = new NoType(jSTypeRegistry0);
      assertNotNull(noType0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, noType0.isAllType());
      assertEquals(false, noType0.isEnumElementType());
      assertEquals(false, noType0.isVoidType());
      assertEquals(false, noType0.isUnionType());
      assertEquals(false, noType0.isNumberValueType());
      assertEquals(0, noType0.getExtendedInterfacesCount());
      assertEquals(false, noType0.isInterface());
      assertEquals(false, noType0.isNoObjectType());
      assertEquals(false, noType0.isBooleanValueType());
      assertEquals(true, noType0.isConstructor());
      assertEquals(false, noType0.isReturnTypeInferred());
      assertEquals(false, noType0.isResolved());
      assertEquals(false, noType0.isOrdinaryFunction());
      assertEquals(true, noType0.isNoType());
      assertEquals(true, noType0.matchesNumberContext());
      assertEquals(false, noType0.isEnumType());
      assertEquals(true, noType0.matchesStringContext());
      assertEquals(true, noType0.isNullable());
      assertEquals(false, noType0.isRecordType());
      assertEquals(false, noType0.isNominalConstructor());
      assertEquals(true, noType0.canBeCalled());
      assertEquals(false, noType0.isStringValueType());
      assertEquals(true, noType0.matchesObjectContext());
      assertNull(noType0.getTemplateTypeName());
      assertEquals(2147483647, noType0.getMaxArguments());
      assertEquals(false, noType0.isNoResolvedType());
      assertEquals(false, noType0.isNominalType());
      assertEquals(false, noType0.isNullType());
      assertEquals(2147483647, noType0.getPropertiesCount());
      assertEquals(false, noType0.isFunctionPrototypeType());
      assertEquals(true, noType0.hasInstanceType());
      assertEquals(false, noType0.isFunctionType());
      assertEquals(false, noType0.hasCachedValues());
      assertEquals(false, noType0.isTemplateType());
      assertNull(noType0.getReferenceName());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noType0.isCheckedUnknownType());
      
      boolean boolean0 = noType0.hasReferenceName();
      assertFalse(boolean0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, noType0.isAllType());
      assertEquals(false, noType0.isEnumElementType());
      assertEquals(false, noType0.isVoidType());
      assertEquals(false, noType0.isUnionType());
      assertEquals(false, noType0.isNumberValueType());
      assertEquals(0, noType0.getExtendedInterfacesCount());
      assertEquals(false, noType0.isInterface());
      assertEquals(false, noType0.isNoObjectType());
      assertEquals(false, noType0.isBooleanValueType());
      assertEquals(true, noType0.isConstructor());
      assertEquals(false, noType0.isReturnTypeInferred());
      assertEquals(false, noType0.isResolved());
      assertEquals(false, noType0.isOrdinaryFunction());
      assertEquals(true, noType0.isNoType());
      assertEquals(true, noType0.matchesNumberContext());
      assertEquals(false, noType0.isEnumType());
      assertEquals(true, noType0.matchesStringContext());
      assertEquals(true, noType0.isNullable());
      assertEquals(false, noType0.isRecordType());
      assertEquals(false, noType0.isNominalConstructor());
      assertEquals(true, noType0.canBeCalled());
      assertEquals(false, noType0.isStringValueType());
      assertEquals(true, noType0.matchesObjectContext());
      assertNull(noType0.getTemplateTypeName());
      assertEquals(2147483647, noType0.getMaxArguments());
      assertEquals(false, noType0.isNoResolvedType());
      assertEquals(false, noType0.isNominalType());
      assertEquals(false, noType0.isNullType());
      assertEquals(2147483647, noType0.getPropertiesCount());
      assertEquals(false, noType0.isFunctionPrototypeType());
      assertEquals(true, noType0.hasInstanceType());
      assertEquals(false, noType0.isFunctionType());
      assertEquals(false, noType0.hasCachedValues());
      assertEquals(false, noType0.isTemplateType());
      assertNull(noType0.getReferenceName());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noType0.isCheckedUnknownType());
      
      FunctionType functionType0 = noType0.getBindReturnType(int0);
      assertNotNull(functionType0);
      assertEquals(false, functionType0.isAllType());
      assertEquals(true, functionType0.canBeCalled());
      assertEquals(false, functionType0.isRecordType());
      assertEquals(true, functionType0.isFunctionType());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, functionType0.isNoObjectType());
      assertEquals(false, functionType0.isConstructor());
      assertEquals(false, functionType0.isNoResolvedType());
      assertEquals(false, functionType0.isResolved());
      assertEquals(2147483647, functionType0.getMaxArguments());
      assertEquals(false, functionType0.isStringValueType());
      assertEquals(false, functionType0.isNumberValueType());
      assertEquals(true, functionType0.isOrdinaryFunction());
      assertEquals(false, functionType0.isBooleanValueType());
      assertEquals(false, functionType0.isEnumType());
      assertEquals(false, functionType0.isInterface());
      assertEquals(false, functionType0.isEnumElementType());
      assertEquals(false, functionType0.isVoidType());
      assertEquals(false, functionType0.isNoType());
      assertEquals(false, functionType0.isNullType());
      assertEquals(false, functionType0.isTemplateType());
      assertEquals(false, functionType0.isUnionType());
      assertEquals(false, functionType0.hasInstanceType());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertEquals(false, functionType0.isNominalType());
      assertEquals(false, functionType0.isNominalConstructor());
      assertEquals(false, functionType0.isCheckedUnknownType());
      assertNull(functionType0.getTemplateTypeName());
      assertEquals(false, functionType0.isReturnTypeInferred());
      assertEquals(false, functionType0.isFunctionPrototypeType());
      assertEquals(false, functionType0.hasCachedValues());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, noType0.isAllType());
      assertEquals(false, noType0.isEnumElementType());
      assertEquals(false, noType0.isVoidType());
      assertEquals(false, noType0.isUnionType());
      assertEquals(false, noType0.isNumberValueType());
      assertEquals(0, noType0.getExtendedInterfacesCount());
      assertEquals(false, noType0.isInterface());
      assertEquals(false, noType0.isNoObjectType());
      assertEquals(false, noType0.isBooleanValueType());
      assertEquals(true, noType0.isConstructor());
      assertEquals(false, noType0.isReturnTypeInferred());
      assertEquals(false, noType0.isResolved());
      assertEquals(false, noType0.isOrdinaryFunction());
      assertEquals(true, noType0.isNoType());
      assertEquals(true, noType0.matchesNumberContext());
      assertEquals(false, noType0.isEnumType());
      assertEquals(true, noType0.matchesStringContext());
      assertEquals(true, noType0.isNullable());
      assertEquals(false, noType0.isRecordType());
      assertEquals(false, noType0.isNominalConstructor());
      assertEquals(true, noType0.canBeCalled());
      assertEquals(false, noType0.isStringValueType());
      assertEquals(true, noType0.matchesObjectContext());
      assertNull(noType0.getTemplateTypeName());
      assertEquals(2147483647, noType0.getMaxArguments());
      assertEquals(false, noType0.isNoResolvedType());
      assertEquals(false, noType0.isNominalType());
      assertEquals(false, noType0.isNullType());
      assertEquals(2147483647, noType0.getPropertiesCount());
      assertEquals(false, noType0.isFunctionPrototypeType());
      assertEquals(true, noType0.hasInstanceType());
      assertEquals(false, noType0.isFunctionType());
      assertEquals(false, noType0.hasCachedValues());
      assertEquals(false, noType0.isTemplateType());
      assertNull(noType0.getReferenceName());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noType0.isCheckedUnknownType());
      
      Node node0 = Node.newString(string0);
      assertNotNull(node0);
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isScript());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isFunction());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isContinue());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isNumber());
      assertEquals(40, node0.getType());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isVoid());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isRegExp());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isThrow());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isTrue());
      assertEquals(true, node0.isString());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isIf());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isQuotedString());
      
      boolean boolean1 = functionType0.defineProperty(string0, noType0, boolean0, node0);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean0 == boolean1);
      assertTrue(boolean1);
      assertEquals(false, functionType0.isAllType());
      assertEquals(true, functionType0.canBeCalled());
      assertEquals(false, functionType0.isRecordType());
      assertEquals(true, functionType0.isFunctionType());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, functionType0.isNoObjectType());
      assertEquals(false, functionType0.isConstructor());
      assertEquals(false, functionType0.isNoResolvedType());
      assertEquals(false, functionType0.isResolved());
      assertEquals(2147483647, functionType0.getMaxArguments());
      assertEquals(false, functionType0.isStringValueType());
      assertEquals(false, functionType0.isNumberValueType());
      assertEquals(true, functionType0.isOrdinaryFunction());
      assertEquals(false, functionType0.isBooleanValueType());
      assertEquals(false, functionType0.isEnumType());
      assertEquals(false, functionType0.isInterface());
      assertEquals(false, functionType0.isEnumElementType());
      assertEquals(false, functionType0.isVoidType());
      assertEquals(false, functionType0.isNoType());
      assertEquals(false, functionType0.isNullType());
      assertEquals(false, functionType0.isTemplateType());
      assertEquals(false, functionType0.isUnionType());
      assertEquals(false, functionType0.hasInstanceType());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertEquals(false, functionType0.isNominalType());
      assertEquals(false, functionType0.isNominalConstructor());
      assertEquals(false, functionType0.isCheckedUnknownType());
      assertNull(functionType0.getTemplateTypeName());
      assertEquals(false, functionType0.isReturnTypeInferred());
      assertEquals(false, functionType0.isFunctionPrototypeType());
      assertEquals(false, functionType0.hasCachedValues());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isScript());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isFunction());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isContinue());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isNumber());
      assertEquals(40, node0.getType());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isVoid());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isRegExp());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isThrow());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isTrue());
      assertEquals(true, node0.isString());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isIf());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, noType0.isAllType());
      assertEquals(false, noType0.isEnumElementType());
      assertEquals(false, noType0.isVoidType());
      assertEquals(false, noType0.isUnionType());
      assertEquals(false, noType0.isNumberValueType());
      assertEquals(0, noType0.getExtendedInterfacesCount());
      assertEquals(false, noType0.isInterface());
      assertEquals(false, noType0.isNoObjectType());
      assertEquals(false, noType0.isBooleanValueType());
      assertEquals(true, noType0.isConstructor());
      assertEquals(false, noType0.isReturnTypeInferred());
      assertEquals(false, noType0.isResolved());
      assertEquals(false, noType0.isOrdinaryFunction());
      assertEquals(true, noType0.isNoType());
      assertEquals(true, noType0.matchesNumberContext());
      assertEquals(false, noType0.isEnumType());
      assertEquals(true, noType0.matchesStringContext());
      assertEquals(true, noType0.isNullable());
      assertEquals(false, noType0.isRecordType());
      assertEquals(false, noType0.isNominalConstructor());
      assertEquals(true, noType0.canBeCalled());
      assertEquals(false, noType0.isStringValueType());
      assertEquals(true, noType0.matchesObjectContext());
      assertNull(noType0.getTemplateTypeName());
      assertEquals(2147483647, noType0.getMaxArguments());
      assertEquals(false, noType0.isNoResolvedType());
      assertEquals(false, noType0.isNominalType());
      assertEquals(false, noType0.isNullType());
      assertEquals(2147483647, noType0.getPropertiesCount());
      assertEquals(false, noType0.isFunctionPrototypeType());
      assertEquals(true, noType0.hasInstanceType());
      assertEquals(false, noType0.isFunctionType());
      assertEquals(false, noType0.hasCachedValues());
      assertEquals(false, noType0.isTemplateType());
      assertNull(noType0.getReferenceName());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noType0.isCheckedUnknownType());
      
      NoType noType1 = (NoType)functionType0.findPropertyType(string0);
      assertNotNull(noType1);
      assertSame(noType1, noType0);
      assertSame(noType0, noType1);
      assertEquals(false, functionType0.isAllType());
      assertEquals(true, functionType0.canBeCalled());
      assertEquals(false, functionType0.isRecordType());
      assertEquals(true, functionType0.isFunctionType());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, functionType0.isNoObjectType());
      assertEquals(false, functionType0.isConstructor());
      assertEquals(false, functionType0.isNoResolvedType());
      assertEquals(false, functionType0.isResolved());
      assertEquals(2147483647, functionType0.getMaxArguments());
      assertEquals(false, functionType0.isStringValueType());
      assertEquals(false, functionType0.isNumberValueType());
      assertEquals(true, functionType0.isOrdinaryFunction());
      assertEquals(false, functionType0.isBooleanValueType());
      assertEquals(false, functionType0.isEnumType());
      assertEquals(false, functionType0.isInterface());
      assertEquals(false, functionType0.isEnumElementType());
      assertEquals(false, functionType0.isVoidType());
      assertEquals(false, functionType0.isNoType());
      assertEquals(false, functionType0.isNullType());
      assertEquals(false, functionType0.isTemplateType());
      assertEquals(false, functionType0.isUnionType());
      assertEquals(true, functionType0.hasCachedValues());
      assertEquals(false, functionType0.hasInstanceType());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertEquals(false, functionType0.isNominalType());
      assertEquals(false, functionType0.isNominalConstructor());
      assertEquals(false, functionType0.isCheckedUnknownType());
      assertNull(functionType0.getTemplateTypeName());
      assertEquals(false, functionType0.isReturnTypeInferred());
      assertEquals(false, functionType0.isFunctionPrototypeType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, noType1.isNullType());
      assertEquals(false, noType1.isUnionType());
      assertEquals(true, noType1.isNullable());
      assertEquals(true, noType1.matchesObjectContext());
      assertEquals(false, noType1.isNumberValueType());
      assertNull(noType1.getReferenceName());
      assertEquals(false, noType1.isEnumType());
      assertEquals(false, noType1.isFunctionType());
      assertEquals(false, noType1.isRecordType());
      assertEquals(false, noType1.isNominalType());
      assertEquals(false, noType1.isCheckedUnknownType());
      assertEquals(false, noType1.isEnumElementType());
      assertEquals(true, noType1.hasInstanceType());
      assertEquals(2147483647, noType1.getPropertiesCount());
      assertEquals(false, noType1.isReturnTypeInferred());
      assertEquals(false, noType1.hasCachedValues());
      assertEquals(true, noType1.isConstructor());
      assertEquals(false, noType1.isBooleanValueType());
      assertEquals(0, noType1.getExtendedInterfacesCount());
      assertEquals(false, noType1.isNoObjectType());
      assertEquals(false, noType1.isFunctionPrototypeType());
      assertEquals(false, noType1.isInterface());
      assertEquals(2147483647, noType1.getMaxArguments());
      assertEquals(false, noType1.isAllType());
      assertEquals(false, noType1.isVoidType());
      assertEquals(false, noType1.isOrdinaryFunction());
      assertEquals(false, noType1.isNoResolvedType());
      assertNull(noType1.getTemplateTypeName());
      assertEquals(false, noType1.isTemplateType());
      assertEquals(true, noType1.matchesNumberContext());
      assertEquals(false, noType1.isStringValueType());
      assertEquals(true, noType1.canBeCalled());
      assertEquals(false, noType1.isNominalConstructor());
      assertEquals(true, noType1.isNoType());
      assertEquals(true, noType1.matchesStringContext());
      assertEquals(false, noType1.isResolved());
      assertEquals(BooleanLiteralSet.EMPTY, noType1.getPossibleToBooleanOutcomes());
      assertEquals(false, noType0.isAllType());
      assertEquals(false, noType0.isEnumElementType());
      assertEquals(false, noType0.isVoidType());
      assertEquals(false, noType0.isUnionType());
      assertEquals(false, noType0.isNumberValueType());
      assertEquals(0, noType0.getExtendedInterfacesCount());
      assertEquals(false, noType0.isInterface());
      assertEquals(false, noType0.isNoObjectType());
      assertEquals(false, noType0.isBooleanValueType());
      assertEquals(true, noType0.isConstructor());
      assertEquals(false, noType0.isReturnTypeInferred());
      assertEquals(false, noType0.isResolved());
      assertEquals(false, noType0.isOrdinaryFunction());
      assertEquals(true, noType0.isNoType());
      assertEquals(true, noType0.matchesNumberContext());
      assertEquals(false, noType0.isEnumType());
      assertEquals(true, noType0.matchesStringContext());
      assertEquals(true, noType0.isNullable());
      assertEquals(false, noType0.isRecordType());
      assertEquals(false, noType0.isNominalConstructor());
      assertEquals(true, noType0.canBeCalled());
      assertEquals(false, noType0.isStringValueType());
      assertEquals(true, noType0.matchesObjectContext());
      assertNull(noType0.getTemplateTypeName());
      assertEquals(2147483647, noType0.getMaxArguments());
      assertEquals(false, noType0.isNoResolvedType());
      assertEquals(false, noType0.isNominalType());
      assertEquals(false, noType0.isNullType());
      assertEquals(2147483647, noType0.getPropertiesCount());
      assertEquals(false, noType0.isFunctionPrototypeType());
      assertEquals(true, noType0.hasInstanceType());
      assertEquals(false, noType0.isFunctionType());
      assertEquals(false, noType0.hasCachedValues());
      assertEquals(false, noType0.isTemplateType());
      assertNull(noType0.getReferenceName());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noType0.isCheckedUnknownType());
  }

  @Test
  public void test27()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      String string0 = "";
      boolean boolean0 = true;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0, boolean0);
      assertNotNull(jSTypeRegistry0);
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      NoType noType0 = new NoType(jSTypeRegistry0);
      assertNotNull(noType0);
      assertEquals(false, noType0.isResolved());
      assertEquals(false, noType0.isNoObjectType());
      assertEquals(true, noType0.isNullable());
      assertEquals(false, noType0.isFunctionPrototypeType());
      assertNull(noType0.getReferenceName());
      assertEquals(false, noType0.hasCachedValues());
      assertEquals(false, noType0.isOrdinaryFunction());
      assertEquals(false, noType0.isNoResolvedType());
      assertEquals(false, noType0.isBooleanValueType());
      assertEquals(false, noType0.isInterface());
      assertEquals(false, noType0.isFunctionType());
      assertEquals(false, noType0.isNominalType());
      assertEquals(false, noType0.isNominalConstructor());
      assertEquals(2147483647, noType0.getPropertiesCount());
      assertEquals(false, noType0.isVoidType());
      assertEquals(false, noType0.isRecordType());
      assertEquals(false, noType0.isUnionType());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertEquals(true, noType0.matchesObjectContext());
      assertEquals(false, noType0.isCheckedUnknownType());
      assertEquals(true, noType0.matchesNumberContext());
      assertEquals(false, noType0.isReturnTypeInferred());
      assertNull(noType0.getTemplateTypeName());
      assertEquals(true, noType0.canBeCalled());
      assertEquals(false, noType0.isStringValueType());
      assertEquals(false, noType0.isEnumElementType());
      assertEquals(0, noType0.getExtendedInterfacesCount());
      assertEquals(false, noType0.isTemplateType());
      assertEquals(false, noType0.isNumberValueType());
      assertEquals(true, noType0.matchesStringContext());
      assertEquals(false, noType0.isAllType());
      assertEquals(2147483647, noType0.getMaxArguments());
      assertEquals(false, noType0.isEnumType());
      assertEquals(true, noType0.isConstructor());
      assertEquals(true, noType0.isNoType());
      assertEquals(false, noType0.isNullType());
      assertEquals(true, noType0.hasInstanceType());
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      Node node0 = noType0.getPropertyNode(string0);
      assertNull(node0);
      assertEquals(false, noType0.isResolved());
      assertEquals(false, noType0.isNoObjectType());
      assertEquals(true, noType0.isNullable());
      assertEquals(false, noType0.isFunctionPrototypeType());
      assertNull(noType0.getReferenceName());
      assertEquals(false, noType0.hasCachedValues());
      assertEquals(false, noType0.isOrdinaryFunction());
      assertEquals(false, noType0.isNoResolvedType());
      assertEquals(false, noType0.isBooleanValueType());
      assertEquals(false, noType0.isInterface());
      assertEquals(false, noType0.isFunctionType());
      assertEquals(false, noType0.isNominalType());
      assertEquals(false, noType0.isNominalConstructor());
      assertEquals(2147483647, noType0.getPropertiesCount());
      assertEquals(false, noType0.isVoidType());
      assertEquals(false, noType0.isRecordType());
      assertEquals(false, noType0.isUnionType());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertEquals(true, noType0.matchesObjectContext());
      assertEquals(false, noType0.isCheckedUnknownType());
      assertEquals(true, noType0.matchesNumberContext());
      assertEquals(false, noType0.isReturnTypeInferred());
      assertNull(noType0.getTemplateTypeName());
      assertEquals(true, noType0.canBeCalled());
      assertEquals(false, noType0.isStringValueType());
      assertEquals(false, noType0.isEnumElementType());
      assertEquals(0, noType0.getExtendedInterfacesCount());
      assertEquals(false, noType0.isTemplateType());
      assertEquals(false, noType0.isNumberValueType());
      assertEquals(true, noType0.matchesStringContext());
      assertEquals(false, noType0.isAllType());
      assertEquals(2147483647, noType0.getMaxArguments());
      assertEquals(false, noType0.isEnumType());
      assertEquals(true, noType0.isConstructor());
      assertEquals(true, noType0.isNoType());
      assertEquals(false, noType0.isNullType());
      assertEquals(true, noType0.hasInstanceType());
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      FunctionType functionType0 = jSTypeRegistry0.createConstructorType(string0, node0, node0, (JSType) noType0);
      assertNotNull(functionType0);
      assertEquals(false, noType0.isResolved());
      assertEquals(false, noType0.isNoObjectType());
      assertEquals(true, noType0.isNullable());
      assertEquals(false, noType0.isFunctionPrototypeType());
      assertNull(noType0.getReferenceName());
      assertEquals(false, noType0.hasCachedValues());
      assertEquals(false, noType0.isOrdinaryFunction());
      assertEquals(false, noType0.isNoResolvedType());
      assertEquals(false, noType0.isBooleanValueType());
      assertEquals(false, noType0.isInterface());
      assertEquals(false, noType0.isFunctionType());
      assertEquals(false, noType0.isNominalType());
      assertEquals(false, noType0.isNominalConstructor());
      assertEquals(2147483647, noType0.getPropertiesCount());
      assertEquals(false, noType0.isVoidType());
      assertEquals(false, noType0.isRecordType());
      assertEquals(false, noType0.isUnionType());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertEquals(true, noType0.matchesObjectContext());
      assertEquals(false, noType0.isCheckedUnknownType());
      assertEquals(true, noType0.matchesNumberContext());
      assertEquals(false, noType0.isReturnTypeInferred());
      assertNull(noType0.getTemplateTypeName());
      assertEquals(true, noType0.canBeCalled());
      assertEquals(false, noType0.isStringValueType());
      assertEquals(false, noType0.isEnumElementType());
      assertEquals(0, noType0.getExtendedInterfacesCount());
      assertEquals(false, noType0.isTemplateType());
      assertEquals(false, noType0.isNumberValueType());
      assertEquals(true, noType0.matchesStringContext());
      assertEquals(false, noType0.isAllType());
      assertEquals(2147483647, noType0.getMaxArguments());
      assertEquals(false, noType0.isEnumType());
      assertEquals(true, noType0.isConstructor());
      assertEquals(true, noType0.isNoType());
      assertEquals(false, noType0.isNullType());
      assertEquals(true, noType0.hasInstanceType());
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertEquals(false, functionType0.isNoType());
      assertEquals(false, functionType0.isBooleanValueType());
      assertEquals(false, functionType0.isTemplateType());
      assertEquals(false, functionType0.isCheckedUnknownType());
      assertEquals(false, functionType0.isOrdinaryFunction());
      assertEquals(true, functionType0.isFunctionType());
      assertEquals(false, functionType0.isNominalConstructor());
      assertEquals(false, functionType0.hasCachedValues());
      assertEquals(false, functionType0.isNumberValueType());
      assertEquals(false, functionType0.isReturnTypeInferred());
      assertEquals(false, functionType0.isEnumType());
      assertEquals(false, functionType0.isNoObjectType());
      assertNull(functionType0.getTemplateTypeName());
      assertEquals(false, functionType0.isStringValueType());
      assertEquals(2147483647, functionType0.getMaxArguments());
      assertEquals(false, functionType0.isNoResolvedType());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, functionType0.isUnionType());
      assertEquals(true, functionType0.isConstructor());
      assertEquals(false, functionType0.isResolved());
      assertEquals(false, functionType0.isNominalType());
      assertEquals(false, functionType0.isRecordType());
      assertEquals(false, functionType0.isAllType());
      assertEquals(false, functionType0.isInterface());
      assertEquals(true, functionType0.canBeCalled());
      assertEquals(true, functionType0.hasInstanceType());
      assertEquals(false, functionType0.isNullType());
      assertEquals(false, functionType0.isFunctionPrototypeType());
      assertEquals(false, functionType0.isVoidType());
      assertEquals(false, functionType0.isEnumElementType());
      
      boolean boolean1 = functionType0.defineInferredProperty(string0, (JSType) noType0, node0);
      assertTrue(boolean0 == boolean1);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      assertEquals(false, noType0.isResolved());
      assertEquals(false, noType0.isNoObjectType());
      assertEquals(true, noType0.isNullable());
      assertEquals(false, noType0.isFunctionPrototypeType());
      assertNull(noType0.getReferenceName());
      assertEquals(false, noType0.hasCachedValues());
      assertEquals(false, noType0.isOrdinaryFunction());
      assertEquals(false, noType0.isNoResolvedType());
      assertEquals(false, noType0.isBooleanValueType());
      assertEquals(false, noType0.isInterface());
      assertEquals(false, noType0.isFunctionType());
      assertEquals(false, noType0.isNominalType());
      assertEquals(false, noType0.isNominalConstructor());
      assertEquals(2147483647, noType0.getPropertiesCount());
      assertEquals(false, noType0.isVoidType());
      assertEquals(false, noType0.isRecordType());
      assertEquals(false, noType0.isUnionType());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertEquals(true, noType0.matchesObjectContext());
      assertEquals(false, noType0.isCheckedUnknownType());
      assertEquals(true, noType0.matchesNumberContext());
      assertEquals(false, noType0.isReturnTypeInferred());
      assertNull(noType0.getTemplateTypeName());
      assertEquals(true, noType0.canBeCalled());
      assertEquals(false, noType0.isStringValueType());
      assertEquals(false, noType0.isEnumElementType());
      assertEquals(0, noType0.getExtendedInterfacesCount());
      assertEquals(false, noType0.isTemplateType());
      assertEquals(false, noType0.isNumberValueType());
      assertEquals(true, noType0.matchesStringContext());
      assertEquals(false, noType0.isAllType());
      assertEquals(2147483647, noType0.getMaxArguments());
      assertEquals(false, noType0.isEnumType());
      assertEquals(true, noType0.isConstructor());
      assertEquals(true, noType0.isNoType());
      assertEquals(false, noType0.isNullType());
      assertEquals(true, noType0.hasInstanceType());
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertEquals(false, functionType0.isNoType());
      assertEquals(false, functionType0.isBooleanValueType());
      assertEquals(false, functionType0.isTemplateType());
      assertEquals(false, functionType0.isCheckedUnknownType());
      assertEquals(false, functionType0.isOrdinaryFunction());
      assertEquals(true, functionType0.isFunctionType());
      assertEquals(false, functionType0.isNominalConstructor());
      assertEquals(true, functionType0.hasCachedValues());
      assertEquals(false, functionType0.isNumberValueType());
      assertEquals(false, functionType0.isReturnTypeInferred());
      assertEquals(false, functionType0.isEnumType());
      assertEquals(false, functionType0.isNoObjectType());
      assertNull(functionType0.getTemplateTypeName());
      assertEquals(false, functionType0.isStringValueType());
      assertEquals(2147483647, functionType0.getMaxArguments());
      assertEquals(false, functionType0.isNoResolvedType());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, functionType0.isUnionType());
      assertEquals(true, functionType0.isConstructor());
      assertEquals(false, functionType0.isResolved());
      assertEquals(false, functionType0.isNominalType());
      assertEquals(false, functionType0.isRecordType());
      assertEquals(false, functionType0.isAllType());
      assertEquals(false, functionType0.isInterface());
      assertEquals(true, functionType0.canBeCalled());
      assertEquals(true, functionType0.hasInstanceType());
      assertEquals(false, functionType0.isNullType());
      assertEquals(false, functionType0.isFunctionPrototypeType());
      assertEquals(false, functionType0.isVoidType());
      assertEquals(false, functionType0.isEnumElementType());
      
      int int0 = functionType0.getPropertiesCount();
      assertTrue(boolean0 == boolean1);
      assertEquals(1, int0);
      assertEquals(false, noType0.isResolved());
      assertEquals(false, noType0.isNoObjectType());
      assertEquals(true, noType0.isNullable());
      assertEquals(false, noType0.isFunctionPrototypeType());
      assertNull(noType0.getReferenceName());
      assertEquals(false, noType0.hasCachedValues());
      assertEquals(false, noType0.isOrdinaryFunction());
      assertEquals(false, noType0.isNoResolvedType());
      assertEquals(false, noType0.isBooleanValueType());
      assertEquals(false, noType0.isInterface());
      assertEquals(false, noType0.isFunctionType());
      assertEquals(false, noType0.isNominalType());
      assertEquals(false, noType0.isNominalConstructor());
      assertEquals(2147483647, noType0.getPropertiesCount());
      assertEquals(false, noType0.isVoidType());
      assertEquals(false, noType0.isRecordType());
      assertEquals(false, noType0.isUnionType());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertEquals(true, noType0.matchesObjectContext());
      assertEquals(false, noType0.isCheckedUnknownType());
      assertEquals(true, noType0.matchesNumberContext());
      assertEquals(false, noType0.isReturnTypeInferred());
      assertNull(noType0.getTemplateTypeName());
      assertEquals(true, noType0.canBeCalled());
      assertEquals(false, noType0.isStringValueType());
      assertEquals(false, noType0.isEnumElementType());
      assertEquals(0, noType0.getExtendedInterfacesCount());
      assertEquals(false, noType0.isTemplateType());
      assertEquals(false, noType0.isNumberValueType());
      assertEquals(true, noType0.matchesStringContext());
      assertEquals(false, noType0.isAllType());
      assertEquals(2147483647, noType0.getMaxArguments());
      assertEquals(false, noType0.isEnumType());
      assertEquals(true, noType0.isConstructor());
      assertEquals(true, noType0.isNoType());
      assertEquals(false, noType0.isNullType());
      assertEquals(true, noType0.hasInstanceType());
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertEquals(false, functionType0.isNoType());
      assertEquals(false, functionType0.isBooleanValueType());
      assertEquals(false, functionType0.isTemplateType());
      assertEquals(false, functionType0.isCheckedUnknownType());
      assertEquals(false, functionType0.isOrdinaryFunction());
      assertEquals(true, functionType0.isFunctionType());
      assertEquals(false, functionType0.isNominalConstructor());
      assertEquals(true, functionType0.hasCachedValues());
      assertEquals(false, functionType0.isNumberValueType());
      assertEquals(false, functionType0.isReturnTypeInferred());
      assertEquals(false, functionType0.isEnumType());
      assertEquals(false, functionType0.isNoObjectType());
      assertNull(functionType0.getTemplateTypeName());
      assertEquals(false, functionType0.isStringValueType());
      assertEquals(2147483647, functionType0.getMaxArguments());
      assertEquals(false, functionType0.isNoResolvedType());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, functionType0.isUnionType());
      assertEquals(true, functionType0.isConstructor());
      assertEquals(false, functionType0.isResolved());
      assertEquals(false, functionType0.isNominalType());
      assertEquals(false, functionType0.isRecordType());
      assertEquals(false, functionType0.isAllType());
      assertEquals(false, functionType0.isInterface());
      assertEquals(true, functionType0.canBeCalled());
      assertEquals(true, functionType0.hasInstanceType());
      assertEquals(false, functionType0.isNullType());
      assertEquals(false, functionType0.isFunctionPrototypeType());
      assertEquals(false, functionType0.isVoidType());
      assertEquals(false, functionType0.isEnumElementType());
  }

  @Test
  public void test28()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      String string0 = "";
      boolean boolean0 = true;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0, boolean0);
      assertNotNull(jSTypeRegistry0);
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      NoType noType0 = new NoType(jSTypeRegistry0);
      assertNotNull(noType0);
      assertEquals(false, noType0.isCheckedUnknownType());
      assertEquals(false, noType0.isNominalType());
      assertEquals(false, noType0.isFunctionType());
      assertEquals(false, noType0.isStringValueType());
      assertEquals(false, noType0.isOrdinaryFunction());
      assertEquals(false, noType0.isBooleanValueType());
      assertEquals(false, noType0.isUnionType());
      assertEquals(2147483647, noType0.getMaxArguments());
      assertEquals(false, noType0.isNoObjectType());
      assertEquals(true, noType0.matchesNumberContext());
      assertEquals(true, noType0.matchesStringContext());
      assertEquals(false, noType0.isInterface());
      assertEquals(false, noType0.isNominalConstructor());
      assertEquals(false, noType0.hasCachedValues());
      assertEquals(false, noType0.isNumberValueType());
      assertEquals(false, noType0.isEnumElementType());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noType0.isTemplateType());
      assertEquals(false, noType0.isAllType());
      assertEquals(false, noType0.isResolved());
      assertEquals(false, noType0.isFunctionPrototypeType());
      assertEquals(false, noType0.isNoResolvedType());
      assertEquals(false, noType0.isRecordType());
      assertEquals(true, noType0.isNoType());
      assertNull(noType0.getTemplateTypeName());
      assertEquals(true, noType0.hasInstanceType());
      assertEquals(true, noType0.isNullable());
      assertEquals(false, noType0.isReturnTypeInferred());
      assertEquals(true, noType0.matchesObjectContext());
      assertNull(noType0.getReferenceName());
      assertEquals(true, noType0.canBeCalled());
      assertEquals(false, noType0.isEnumType());
      assertEquals(false, noType0.isVoidType());
      assertEquals(2147483647, noType0.getPropertiesCount());
      assertEquals(0, noType0.getExtendedInterfacesCount());
      assertEquals(false, noType0.isNullType());
      assertEquals(true, noType0.isConstructor());
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      Node node0 = noType0.getPropertyNode(string0);
      assertNull(node0);
      assertEquals(false, noType0.isCheckedUnknownType());
      assertEquals(false, noType0.isNominalType());
      assertEquals(false, noType0.isFunctionType());
      assertEquals(false, noType0.isStringValueType());
      assertEquals(false, noType0.isOrdinaryFunction());
      assertEquals(false, noType0.isBooleanValueType());
      assertEquals(false, noType0.isUnionType());
      assertEquals(2147483647, noType0.getMaxArguments());
      assertEquals(false, noType0.isNoObjectType());
      assertEquals(true, noType0.matchesNumberContext());
      assertEquals(true, noType0.matchesStringContext());
      assertEquals(false, noType0.isInterface());
      assertEquals(false, noType0.isNominalConstructor());
      assertEquals(false, noType0.hasCachedValues());
      assertEquals(false, noType0.isNumberValueType());
      assertEquals(false, noType0.isEnumElementType());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noType0.isTemplateType());
      assertEquals(false, noType0.isAllType());
      assertEquals(false, noType0.isResolved());
      assertEquals(false, noType0.isFunctionPrototypeType());
      assertEquals(false, noType0.isNoResolvedType());
      assertEquals(false, noType0.isRecordType());
      assertEquals(true, noType0.isNoType());
      assertNull(noType0.getTemplateTypeName());
      assertEquals(true, noType0.hasInstanceType());
      assertEquals(true, noType0.isNullable());
      assertEquals(false, noType0.isReturnTypeInferred());
      assertEquals(true, noType0.matchesObjectContext());
      assertNull(noType0.getReferenceName());
      assertEquals(true, noType0.canBeCalled());
      assertEquals(false, noType0.isEnumType());
      assertEquals(false, noType0.isVoidType());
      assertEquals(2147483647, noType0.getPropertiesCount());
      assertEquals(0, noType0.getExtendedInterfacesCount());
      assertEquals(false, noType0.isNullType());
      assertEquals(true, noType0.isConstructor());
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      FunctionType functionType0 = jSTypeRegistry0.createConstructorType(string0, node0, node0, (JSType) noType0);
      assertNotNull(functionType0);
      assertEquals(false, functionType0.isEnumType());
      assertEquals(false, functionType0.isStringValueType());
      assertEquals(false, functionType0.isNoObjectType());
      assertEquals(false, functionType0.hasCachedValues());
      assertEquals(false, functionType0.isInterface());
      assertEquals(false, functionType0.isNominalType());
      assertEquals(false, functionType0.isNominalConstructor());
      assertEquals(false, functionType0.isFunctionPrototypeType());
      assertEquals(true, functionType0.isConstructor());
      assertEquals(true, functionType0.isFunctionType());
      assertEquals(false, functionType0.isBooleanValueType());
      assertEquals(false, functionType0.isCheckedUnknownType());
      assertEquals(false, functionType0.isTemplateType());
      assertEquals(2147483647, functionType0.getMaxArguments());
      assertEquals(false, functionType0.isOrdinaryFunction());
      assertEquals(false, functionType0.isAllType());
      assertEquals(true, functionType0.hasInstanceType());
      assertEquals(false, functionType0.isVoidType());
      assertEquals(false, functionType0.isNumberValueType());
      assertEquals(true, functionType0.canBeCalled());
      assertEquals(false, functionType0.isUnionType());
      assertEquals(false, functionType0.isResolved());
      assertEquals(false, functionType0.isNoResolvedType());
      assertNull(functionType0.getTemplateTypeName());
      assertEquals(false, functionType0.isNullType());
      assertEquals(false, functionType0.isNoType());
      assertEquals(false, functionType0.isEnumElementType());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, functionType0.isReturnTypeInferred());
      assertEquals(false, functionType0.isRecordType());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertEquals(false, noType0.isCheckedUnknownType());
      assertEquals(false, noType0.isNominalType());
      assertEquals(false, noType0.isFunctionType());
      assertEquals(false, noType0.isStringValueType());
      assertEquals(false, noType0.isOrdinaryFunction());
      assertEquals(false, noType0.isBooleanValueType());
      assertEquals(false, noType0.isUnionType());
      assertEquals(2147483647, noType0.getMaxArguments());
      assertEquals(false, noType0.isNoObjectType());
      assertEquals(true, noType0.matchesNumberContext());
      assertEquals(true, noType0.matchesStringContext());
      assertEquals(false, noType0.isInterface());
      assertEquals(false, noType0.isNominalConstructor());
      assertEquals(false, noType0.hasCachedValues());
      assertEquals(false, noType0.isNumberValueType());
      assertEquals(false, noType0.isEnumElementType());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noType0.isTemplateType());
      assertEquals(false, noType0.isAllType());
      assertEquals(false, noType0.isResolved());
      assertEquals(false, noType0.isFunctionPrototypeType());
      assertEquals(false, noType0.isNoResolvedType());
      assertEquals(false, noType0.isRecordType());
      assertEquals(true, noType0.isNoType());
      assertNull(noType0.getTemplateTypeName());
      assertEquals(true, noType0.hasInstanceType());
      assertEquals(true, noType0.isNullable());
      assertEquals(false, noType0.isReturnTypeInferred());
      assertEquals(true, noType0.matchesObjectContext());
      assertNull(noType0.getReferenceName());
      assertEquals(true, noType0.canBeCalled());
      assertEquals(false, noType0.isEnumType());
      assertEquals(false, noType0.isVoidType());
      assertEquals(2147483647, noType0.getPropertiesCount());
      assertEquals(0, noType0.getExtendedInterfacesCount());
      assertEquals(false, noType0.isNullType());
      assertEquals(true, noType0.isConstructor());
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      boolean boolean1 = functionType0.defineInferredProperty(string0, (JSType) noType0, node0);
      assertTrue(boolean0 == boolean1);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      assertEquals(true, functionType0.hasCachedValues());
      assertEquals(false, functionType0.isEnumType());
      assertEquals(false, functionType0.isStringValueType());
      assertEquals(false, functionType0.isNoObjectType());
      assertEquals(false, functionType0.isInterface());
      assertEquals(false, functionType0.isNominalType());
      assertEquals(false, functionType0.isNominalConstructor());
      assertEquals(false, functionType0.isFunctionPrototypeType());
      assertEquals(true, functionType0.isConstructor());
      assertEquals(true, functionType0.isFunctionType());
      assertEquals(false, functionType0.isBooleanValueType());
      assertEquals(false, functionType0.isCheckedUnknownType());
      assertEquals(false, functionType0.isTemplateType());
      assertEquals(2147483647, functionType0.getMaxArguments());
      assertEquals(false, functionType0.isOrdinaryFunction());
      assertEquals(false, functionType0.isAllType());
      assertEquals(true, functionType0.hasInstanceType());
      assertEquals(false, functionType0.isVoidType());
      assertEquals(false, functionType0.isNumberValueType());
      assertEquals(true, functionType0.canBeCalled());
      assertEquals(false, functionType0.isUnionType());
      assertEquals(false, functionType0.isResolved());
      assertEquals(false, functionType0.isNoResolvedType());
      assertNull(functionType0.getTemplateTypeName());
      assertEquals(false, functionType0.isNullType());
      assertEquals(false, functionType0.isNoType());
      assertEquals(false, functionType0.isEnumElementType());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, functionType0.isReturnTypeInferred());
      assertEquals(false, functionType0.isRecordType());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertEquals(false, noType0.isCheckedUnknownType());
      assertEquals(false, noType0.isNominalType());
      assertEquals(false, noType0.isFunctionType());
      assertEquals(false, noType0.isStringValueType());
      assertEquals(false, noType0.isOrdinaryFunction());
      assertEquals(false, noType0.isBooleanValueType());
      assertEquals(false, noType0.isUnionType());
      assertEquals(2147483647, noType0.getMaxArguments());
      assertEquals(false, noType0.isNoObjectType());
      assertEquals(true, noType0.matchesNumberContext());
      assertEquals(true, noType0.matchesStringContext());
      assertEquals(false, noType0.isInterface());
      assertEquals(false, noType0.isNominalConstructor());
      assertEquals(false, noType0.hasCachedValues());
      assertEquals(false, noType0.isNumberValueType());
      assertEquals(false, noType0.isEnumElementType());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noType0.isTemplateType());
      assertEquals(false, noType0.isAllType());
      assertEquals(false, noType0.isResolved());
      assertEquals(false, noType0.isFunctionPrototypeType());
      assertEquals(false, noType0.isNoResolvedType());
      assertEquals(false, noType0.isRecordType());
      assertEquals(true, noType0.isNoType());
      assertNull(noType0.getTemplateTypeName());
      assertEquals(true, noType0.hasInstanceType());
      assertEquals(true, noType0.isNullable());
      assertEquals(false, noType0.isReturnTypeInferred());
      assertEquals(true, noType0.matchesObjectContext());
      assertNull(noType0.getReferenceName());
      assertEquals(true, noType0.canBeCalled());
      assertEquals(false, noType0.isEnumType());
      assertEquals(false, noType0.isVoidType());
      assertEquals(2147483647, noType0.getPropertiesCount());
      assertEquals(0, noType0.getExtendedInterfacesCount());
      assertEquals(false, noType0.isNullType());
      assertEquals(true, noType0.isConstructor());
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      boolean boolean2 = functionType0.isPropertyTypeDeclared(string0);
      assertTrue(boolean0 == boolean1);
      assertFalse(boolean0 == boolean2);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2);
      assertEquals(true, functionType0.hasCachedValues());
      assertEquals(false, functionType0.isEnumType());
      assertEquals(false, functionType0.isStringValueType());
      assertEquals(false, functionType0.isNoObjectType());
      assertEquals(false, functionType0.isInterface());
      assertEquals(false, functionType0.isNominalType());
      assertEquals(false, functionType0.isNominalConstructor());
      assertEquals(false, functionType0.isFunctionPrototypeType());
      assertEquals(true, functionType0.isConstructor());
      assertEquals(true, functionType0.isFunctionType());
      assertEquals(false, functionType0.isBooleanValueType());
      assertEquals(false, functionType0.isCheckedUnknownType());
      assertEquals(false, functionType0.isTemplateType());
      assertEquals(2147483647, functionType0.getMaxArguments());
      assertEquals(false, functionType0.isOrdinaryFunction());
      assertEquals(false, functionType0.isAllType());
      assertEquals(true, functionType0.hasInstanceType());
      assertEquals(false, functionType0.isVoidType());
      assertEquals(false, functionType0.isNumberValueType());
      assertEquals(true, functionType0.canBeCalled());
      assertEquals(false, functionType0.isUnionType());
      assertEquals(false, functionType0.isResolved());
      assertEquals(false, functionType0.isNoResolvedType());
      assertNull(functionType0.getTemplateTypeName());
      assertEquals(false, functionType0.isNullType());
      assertEquals(false, functionType0.isNoType());
      assertEquals(false, functionType0.isEnumElementType());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, functionType0.isReturnTypeInferred());
      assertEquals(false, functionType0.isRecordType());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertEquals(false, noType0.isCheckedUnknownType());
      assertEquals(false, noType0.isNominalType());
      assertEquals(false, noType0.isFunctionType());
      assertEquals(false, noType0.isStringValueType());
      assertEquals(false, noType0.isOrdinaryFunction());
      assertEquals(false, noType0.isBooleanValueType());
      assertEquals(false, noType0.isUnionType());
      assertEquals(2147483647, noType0.getMaxArguments());
      assertEquals(false, noType0.isNoObjectType());
      assertEquals(true, noType0.matchesNumberContext());
      assertEquals(true, noType0.matchesStringContext());
      assertEquals(false, noType0.isInterface());
      assertEquals(false, noType0.isNominalConstructor());
      assertEquals(false, noType0.hasCachedValues());
      assertEquals(false, noType0.isNumberValueType());
      assertEquals(false, noType0.isEnumElementType());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noType0.isTemplateType());
      assertEquals(false, noType0.isAllType());
      assertEquals(false, noType0.isResolved());
      assertEquals(false, noType0.isFunctionPrototypeType());
      assertEquals(false, noType0.isNoResolvedType());
      assertEquals(false, noType0.isRecordType());
      assertEquals(true, noType0.isNoType());
      assertNull(noType0.getTemplateTypeName());
      assertEquals(true, noType0.hasInstanceType());
      assertEquals(true, noType0.isNullable());
      assertEquals(false, noType0.isReturnTypeInferred());
      assertEquals(true, noType0.matchesObjectContext());
      assertNull(noType0.getReferenceName());
      assertEquals(true, noType0.canBeCalled());
      assertEquals(false, noType0.isEnumType());
      assertEquals(false, noType0.isVoidType());
      assertEquals(2147483647, noType0.getPropertiesCount());
      assertEquals(0, noType0.getExtendedInterfacesCount());
      assertEquals(false, noType0.isNullType());
      assertEquals(true, noType0.isConstructor());
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
  }

  @Test
  public void test29()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      HashMap<String, RecordTypeBuilder.RecordProperty> hashMap0 = new HashMap<String, RecordTypeBuilder.RecordProperty>();
      assertNotNull(hashMap0);
      assertEquals(0, hashMap0.size());
      assertEquals(true, hashMap0.isEmpty());
      assertEquals("{}", hashMap0.toString());
      
      RecordType recordType0 = jSTypeRegistry0.createRecordType((Map<String, RecordTypeBuilder.RecordProperty>) hashMap0);
      assertNotNull(recordType0);
      assertEquals(false, recordType0.isNoType());
      assertEquals(false, recordType0.isAllType());
      assertEquals(true, recordType0.isRecordType());
      assertEquals(false, recordType0.isUnionType());
      assertEquals(false, recordType0.isNominalType());
      assertEquals(false, recordType0.isCheckedUnknownType());
      assertEquals(false, recordType0.isStringValueType());
      assertEquals(false, recordType0.isInterface());
      assertEquals(false, recordType0.isFunctionType());
      assertEquals(false, recordType0.isNoObjectType());
      assertEquals(BooleanLiteralSet.TRUE, recordType0.getPossibleToBooleanOutcomes());
      assertEquals(false, recordType0.isEnumElementType());
      assertEquals(false, recordType0.isEnumType());
      assertEquals(false, recordType0.isOrdinaryFunction());
      assertEquals(false, recordType0.isVoidType());
      assertEquals(false, recordType0.isNoResolvedType());
      assertEquals(false, recordType0.isNumberValueType());
      assertEquals(false, recordType0.isTemplateType());
      assertEquals(false, recordType0.isConstructor());
      assertEquals(false, recordType0.isNullType());
      assertEquals(false, recordType0.isNominalConstructor());
      assertEquals(false, recordType0.isFunctionPrototypeType());
      assertEquals(false, recordType0.isBooleanValueType());
      assertEquals(false, recordType0.isResolved());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(0, hashMap0.size());
      assertEquals(true, hashMap0.isEmpty());
      assertEquals("{}", hashMap0.toString());
      
      boolean boolean0 = recordType0.matchesUint32Context();
      assertFalse(boolean0);
      assertEquals(false, recordType0.isNoType());
      assertEquals(false, recordType0.isAllType());
      assertEquals(true, recordType0.isRecordType());
      assertEquals(false, recordType0.isUnionType());
      assertEquals(false, recordType0.isNominalType());
      assertEquals(false, recordType0.isCheckedUnknownType());
      assertEquals(false, recordType0.isStringValueType());
      assertEquals(false, recordType0.isInterface());
      assertEquals(false, recordType0.isFunctionType());
      assertEquals(false, recordType0.isNoObjectType());
      assertEquals(BooleanLiteralSet.TRUE, recordType0.getPossibleToBooleanOutcomes());
      assertEquals(false, recordType0.isEnumElementType());
      assertEquals(false, recordType0.isEnumType());
      assertEquals(false, recordType0.isOrdinaryFunction());
      assertEquals(false, recordType0.isVoidType());
      assertEquals(false, recordType0.isNoResolvedType());
      assertEquals(false, recordType0.isNumberValueType());
      assertEquals(false, recordType0.isTemplateType());
      assertEquals(false, recordType0.isConstructor());
      assertEquals(false, recordType0.isNullType());
      assertEquals(false, recordType0.isNominalConstructor());
      assertEquals(false, recordType0.isFunctionPrototypeType());
      assertEquals(false, recordType0.isBooleanValueType());
      assertEquals(false, recordType0.isResolved());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(0, hashMap0.size());
      assertEquals(true, hashMap0.isEmpty());
      assertEquals("{}", hashMap0.toString());
  }

  @Test
  public void test30()  throws Throwable  {
      String string0 = "RegExp";
      int int0 = 0;
      ErrorReporter errorReporter0 = null;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(errorReporter0);
      assertNotNull(jSTypeRegistry0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      NoType noType0 = new NoType(jSTypeRegistry0);
      assertNotNull(noType0);
      assertEquals(false, noType0.isRecordType());
      assertEquals(true, noType0.isNullable());
      assertEquals(true, noType0.matchesObjectContext());
      assertEquals(false, noType0.isTemplateType());
      assertEquals(false, noType0.isFunctionPrototypeType());
      assertEquals(false, noType0.isBooleanValueType());
      assertEquals(false, noType0.isResolved());
      assertEquals(2147483647, noType0.getPropertiesCount());
      assertEquals(false, noType0.isInterface());
      assertEquals(2147483647, noType0.getMaxArguments());
      assertEquals(0, noType0.getExtendedInterfacesCount());
      assertEquals(false, noType0.isNominalType());
      assertEquals(false, noType0.isAllType());
      assertEquals(false, noType0.isNominalConstructor());
      assertEquals(false, noType0.isUnionType());
      assertEquals(true, noType0.matchesStringContext());
      assertNull(noType0.getReferenceName());
      assertEquals(false, noType0.isFunctionType());
      assertEquals(false, noType0.isNullType());
      assertEquals(false, noType0.isEnumType());
      assertEquals(true, noType0.matchesNumberContext());
      assertNull(noType0.getTemplateTypeName());
      assertEquals(false, noType0.isNoObjectType());
      assertEquals(false, noType0.isVoidType());
      assertEquals(true, noType0.canBeCalled());
      assertEquals(true, noType0.hasInstanceType());
      assertEquals(false, noType0.isNoResolvedType());
      assertEquals(false, noType0.isCheckedUnknownType());
      assertEquals(false, noType0.isStringValueType());
      assertEquals(true, noType0.isConstructor());
      assertEquals(true, noType0.isNoType());
      assertEquals(false, noType0.isOrdinaryFunction());
      assertEquals(false, noType0.hasCachedValues());
      assertEquals(false, noType0.isNumberValueType());
      assertEquals(false, noType0.isEnumElementType());
      assertEquals(false, noType0.isReturnTypeInferred());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      FunctionType functionType0 = noType0.getBindReturnType(int0);
      assertNotNull(functionType0);
      assertEquals(false, noType0.isRecordType());
      assertEquals(true, noType0.isNullable());
      assertEquals(true, noType0.matchesObjectContext());
      assertEquals(false, noType0.isTemplateType());
      assertEquals(false, noType0.isFunctionPrototypeType());
      assertEquals(false, noType0.isBooleanValueType());
      assertEquals(false, noType0.isResolved());
      assertEquals(2147483647, noType0.getPropertiesCount());
      assertEquals(false, noType0.isInterface());
      assertEquals(2147483647, noType0.getMaxArguments());
      assertEquals(0, noType0.getExtendedInterfacesCount());
      assertEquals(false, noType0.isNominalType());
      assertEquals(false, noType0.isAllType());
      assertEquals(false, noType0.isNominalConstructor());
      assertEquals(false, noType0.isUnionType());
      assertEquals(true, noType0.matchesStringContext());
      assertNull(noType0.getReferenceName());
      assertEquals(false, noType0.isFunctionType());
      assertEquals(false, noType0.isNullType());
      assertEquals(false, noType0.isEnumType());
      assertEquals(true, noType0.matchesNumberContext());
      assertNull(noType0.getTemplateTypeName());
      assertEquals(false, noType0.isNoObjectType());
      assertEquals(false, noType0.isVoidType());
      assertEquals(true, noType0.canBeCalled());
      assertEquals(true, noType0.hasInstanceType());
      assertEquals(false, noType0.isNoResolvedType());
      assertEquals(false, noType0.isCheckedUnknownType());
      assertEquals(false, noType0.isStringValueType());
      assertEquals(true, noType0.isConstructor());
      assertEquals(true, noType0.isNoType());
      assertEquals(false, noType0.isOrdinaryFunction());
      assertEquals(false, noType0.hasCachedValues());
      assertEquals(false, noType0.isNumberValueType());
      assertEquals(false, noType0.isEnumElementType());
      assertEquals(false, noType0.isReturnTypeInferred());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertEquals(false, functionType0.isReturnTypeInferred());
      assertEquals(false, functionType0.isVoidType());
      assertEquals(false, functionType0.isEnumType());
      assertEquals(true, functionType0.isOrdinaryFunction());
      assertEquals(false, functionType0.isBooleanValueType());
      assertEquals(false, functionType0.isResolved());
      assertEquals(false, functionType0.isNumberValueType());
      assertEquals(true, functionType0.canBeCalled());
      assertEquals(false, functionType0.isNoResolvedType());
      assertEquals(false, functionType0.isNullType());
      assertEquals(false, functionType0.isUnionType());
      assertEquals(false, functionType0.isNoObjectType());
      assertEquals(false, functionType0.isRecordType());
      assertNull(functionType0.getTemplateTypeName());
      assertEquals(false, functionType0.isAllType());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertEquals(false, functionType0.isInterface());
      assertEquals(false, functionType0.hasInstanceType());
      assertEquals(false, functionType0.isFunctionPrototypeType());
      assertEquals(true, functionType0.isFunctionType());
      assertEquals(false, functionType0.hasCachedValues());
      assertEquals(false, functionType0.isEnumElementType());
      assertEquals(false, functionType0.isNominalConstructor());
      assertEquals(false, functionType0.isConstructor());
      assertEquals(false, functionType0.isNoType());
      assertEquals(2147483647, functionType0.getMaxArguments());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, functionType0.isTemplateType());
      assertEquals(false, functionType0.isStringValueType());
      assertEquals(false, functionType0.isNominalType());
      assertEquals(false, functionType0.isCheckedUnknownType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      boolean boolean0 = functionType0.isPropertyInExterns(string0);
      assertFalse(boolean0);
      assertEquals(false, noType0.isRecordType());
      assertEquals(true, noType0.isNullable());
      assertEquals(true, noType0.matchesObjectContext());
      assertEquals(false, noType0.isTemplateType());
      assertEquals(false, noType0.isFunctionPrototypeType());
      assertEquals(false, noType0.isBooleanValueType());
      assertEquals(false, noType0.isResolved());
      assertEquals(2147483647, noType0.getPropertiesCount());
      assertEquals(false, noType0.isInterface());
      assertEquals(2147483647, noType0.getMaxArguments());
      assertEquals(0, noType0.getExtendedInterfacesCount());
      assertEquals(false, noType0.isNominalType());
      assertEquals(false, noType0.isAllType());
      assertEquals(false, noType0.isNominalConstructor());
      assertEquals(false, noType0.isUnionType());
      assertEquals(true, noType0.matchesStringContext());
      assertNull(noType0.getReferenceName());
      assertEquals(false, noType0.isFunctionType());
      assertEquals(false, noType0.isNullType());
      assertEquals(false, noType0.isEnumType());
      assertEquals(true, noType0.matchesNumberContext());
      assertNull(noType0.getTemplateTypeName());
      assertEquals(false, noType0.isNoObjectType());
      assertEquals(false, noType0.isVoidType());
      assertEquals(true, noType0.canBeCalled());
      assertEquals(true, noType0.hasInstanceType());
      assertEquals(false, noType0.isNoResolvedType());
      assertEquals(false, noType0.isCheckedUnknownType());
      assertEquals(false, noType0.isStringValueType());
      assertEquals(true, noType0.isConstructor());
      assertEquals(true, noType0.isNoType());
      assertEquals(false, noType0.isOrdinaryFunction());
      assertEquals(false, noType0.hasCachedValues());
      assertEquals(false, noType0.isNumberValueType());
      assertEquals(false, noType0.isEnumElementType());
      assertEquals(false, noType0.isReturnTypeInferred());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertEquals(false, functionType0.isReturnTypeInferred());
      assertEquals(false, functionType0.isVoidType());
      assertEquals(false, functionType0.isEnumType());
      assertEquals(true, functionType0.isOrdinaryFunction());
      assertEquals(false, functionType0.isBooleanValueType());
      assertEquals(false, functionType0.isResolved());
      assertEquals(false, functionType0.isNumberValueType());
      assertEquals(true, functionType0.canBeCalled());
      assertEquals(false, functionType0.isNoResolvedType());
      assertEquals(false, functionType0.isNullType());
      assertEquals(false, functionType0.isUnionType());
      assertEquals(false, functionType0.isNoObjectType());
      assertEquals(false, functionType0.isRecordType());
      assertNull(functionType0.getTemplateTypeName());
      assertEquals(false, functionType0.isAllType());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertEquals(false, functionType0.isInterface());
      assertEquals(false, functionType0.hasInstanceType());
      assertEquals(false, functionType0.isFunctionPrototypeType());
      assertEquals(true, functionType0.isFunctionType());
      assertEquals(false, functionType0.hasCachedValues());
      assertEquals(false, functionType0.isEnumElementType());
      assertEquals(false, functionType0.isNominalConstructor());
      assertEquals(false, functionType0.isConstructor());
      assertEquals(false, functionType0.isNoType());
      assertEquals(2147483647, functionType0.getMaxArguments());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, functionType0.isTemplateType());
      assertEquals(false, functionType0.isStringValueType());
      assertEquals(false, functionType0.isNominalType());
      assertEquals(false, functionType0.isCheckedUnknownType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      String string1 = functionType0.toStringHelper(boolean0);
      assertNotNull(string1);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertEquals("function (...[?]): None", string1);
      assertEquals(false, noType0.isRecordType());
      assertEquals(true, noType0.isNullable());
      assertEquals(true, noType0.matchesObjectContext());
      assertEquals(false, noType0.isTemplateType());
      assertEquals(false, noType0.isFunctionPrototypeType());
      assertEquals(false, noType0.isBooleanValueType());
      assertEquals(false, noType0.isResolved());
      assertEquals(2147483647, noType0.getPropertiesCount());
      assertEquals(false, noType0.isInterface());
      assertEquals(2147483647, noType0.getMaxArguments());
      assertEquals(0, noType0.getExtendedInterfacesCount());
      assertEquals(false, noType0.isNominalType());
      assertEquals(false, noType0.isAllType());
      assertEquals(false, noType0.isNominalConstructor());
      assertEquals(false, noType0.isUnionType());
      assertEquals(true, noType0.matchesStringContext());
      assertNull(noType0.getReferenceName());
      assertEquals(false, noType0.isFunctionType());
      assertEquals(false, noType0.isNullType());
      assertEquals(false, noType0.isEnumType());
      assertEquals(true, noType0.matchesNumberContext());
      assertNull(noType0.getTemplateTypeName());
      assertEquals(false, noType0.isNoObjectType());
      assertEquals(false, noType0.isVoidType());
      assertEquals(true, noType0.canBeCalled());
      assertEquals(true, noType0.hasInstanceType());
      assertEquals(false, noType0.isNoResolvedType());
      assertEquals(false, noType0.isCheckedUnknownType());
      assertEquals(false, noType0.isStringValueType());
      assertEquals(true, noType0.isConstructor());
      assertEquals(true, noType0.isNoType());
      assertEquals(false, noType0.isOrdinaryFunction());
      assertEquals(false, noType0.hasCachedValues());
      assertEquals(false, noType0.isNumberValueType());
      assertEquals(false, noType0.isEnumElementType());
      assertEquals(false, noType0.isReturnTypeInferred());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertEquals(false, functionType0.isReturnTypeInferred());
      assertEquals(false, functionType0.isVoidType());
      assertEquals(false, functionType0.isEnumType());
      assertEquals(true, functionType0.isOrdinaryFunction());
      assertEquals(false, functionType0.isBooleanValueType());
      assertEquals(false, functionType0.isResolved());
      assertEquals(false, functionType0.isNumberValueType());
      assertEquals(true, functionType0.canBeCalled());
      assertEquals(false, functionType0.isNoResolvedType());
      assertEquals(false, functionType0.isNullType());
      assertEquals(false, functionType0.isUnionType());
      assertEquals(false, functionType0.isNoObjectType());
      assertEquals(false, functionType0.isRecordType());
      assertNull(functionType0.getTemplateTypeName());
      assertEquals(false, functionType0.isAllType());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertEquals(false, functionType0.isInterface());
      assertEquals(false, functionType0.hasInstanceType());
      assertEquals(false, functionType0.isFunctionPrototypeType());
      assertEquals(true, functionType0.isFunctionType());
      assertEquals(false, functionType0.hasCachedValues());
      assertEquals(false, functionType0.isEnumElementType());
      assertEquals(false, functionType0.isNominalConstructor());
      assertEquals(false, functionType0.isConstructor());
      assertEquals(false, functionType0.isNoType());
      assertEquals(2147483647, functionType0.getMaxArguments());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, functionType0.isTemplateType());
      assertEquals(false, functionType0.isStringValueType());
      assertEquals(false, functionType0.isNominalType());
      assertEquals(false, functionType0.isCheckedUnknownType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
  }

  @Test
  public void test31()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      String string0 = "";
      boolean boolean0 = true;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0, boolean0);
      assertNotNull(jSTypeRegistry0);
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      NoType noType0 = new NoType(jSTypeRegistry0);
      assertNotNull(noType0);
      assertEquals(2147483647, noType0.getPropertiesCount());
      assertEquals(false, noType0.isNumberValueType());
      assertEquals(false, noType0.isInterface());
      assertEquals(true, noType0.hasInstanceType());
      assertEquals(false, noType0.isNoResolvedType());
      assertEquals(false, noType0.isEnumType());
      assertEquals(false, noType0.hasCachedValues());
      assertEquals(false, noType0.isReturnTypeInferred());
      assertEquals(false, noType0.isVoidType());
      assertNull(noType0.getReferenceName());
      assertEquals(true, noType0.canBeCalled());
      assertEquals(false, noType0.isBooleanValueType());
      assertEquals(true, noType0.matchesNumberContext());
      assertEquals(false, noType0.isResolved());
      assertEquals(false, noType0.isCheckedUnknownType());
      assertEquals(false, noType0.isUnionType());
      assertEquals(false, noType0.isRecordType());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noType0.isAllType());
      assertEquals(false, noType0.isTemplateType());
      assertEquals(2147483647, noType0.getMaxArguments());
      assertEquals(false, noType0.isNominalType());
      assertNull(noType0.getTemplateTypeName());
      assertEquals(true, noType0.matchesStringContext());
      assertEquals(true, noType0.isConstructor());
      assertEquals(0, noType0.getExtendedInterfacesCount());
      assertEquals(false, noType0.isNullType());
      assertEquals(false, noType0.isFunctionType());
      assertEquals(true, noType0.isNoType());
      assertEquals(true, noType0.matchesObjectContext());
      assertEquals(false, noType0.isEnumElementType());
      assertEquals(false, noType0.isNoObjectType());
      assertEquals(false, noType0.isFunctionPrototypeType());
      assertEquals(false, noType0.isStringValueType());
      assertEquals(false, noType0.isNominalConstructor());
      assertEquals(true, noType0.isNullable());
      assertEquals(false, noType0.isOrdinaryFunction());
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      Node node0 = noType0.getPropertyNode(string0);
      assertNull(node0);
      assertEquals(2147483647, noType0.getPropertiesCount());
      assertEquals(false, noType0.isNumberValueType());
      assertEquals(false, noType0.isInterface());
      assertEquals(true, noType0.hasInstanceType());
      assertEquals(false, noType0.isNoResolvedType());
      assertEquals(false, noType0.isEnumType());
      assertEquals(false, noType0.hasCachedValues());
      assertEquals(false, noType0.isReturnTypeInferred());
      assertEquals(false, noType0.isVoidType());
      assertNull(noType0.getReferenceName());
      assertEquals(true, noType0.canBeCalled());
      assertEquals(false, noType0.isBooleanValueType());
      assertEquals(true, noType0.matchesNumberContext());
      assertEquals(false, noType0.isResolved());
      assertEquals(false, noType0.isCheckedUnknownType());
      assertEquals(false, noType0.isUnionType());
      assertEquals(false, noType0.isRecordType());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noType0.isAllType());
      assertEquals(false, noType0.isTemplateType());
      assertEquals(2147483647, noType0.getMaxArguments());
      assertEquals(false, noType0.isNominalType());
      assertNull(noType0.getTemplateTypeName());
      assertEquals(true, noType0.matchesStringContext());
      assertEquals(true, noType0.isConstructor());
      assertEquals(0, noType0.getExtendedInterfacesCount());
      assertEquals(false, noType0.isNullType());
      assertEquals(false, noType0.isFunctionType());
      assertEquals(true, noType0.isNoType());
      assertEquals(true, noType0.matchesObjectContext());
      assertEquals(false, noType0.isEnumElementType());
      assertEquals(false, noType0.isNoObjectType());
      assertEquals(false, noType0.isFunctionPrototypeType());
      assertEquals(false, noType0.isStringValueType());
      assertEquals(false, noType0.isNominalConstructor());
      assertEquals(true, noType0.isNullable());
      assertEquals(false, noType0.isOrdinaryFunction());
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      FunctionType functionType0 = jSTypeRegistry0.createConstructorType(string0, node0, node0, (JSType) noType0);
      assertNotNull(functionType0);
      assertEquals(2147483647, noType0.getPropertiesCount());
      assertEquals(false, noType0.isNumberValueType());
      assertEquals(false, noType0.isInterface());
      assertEquals(true, noType0.hasInstanceType());
      assertEquals(false, noType0.isNoResolvedType());
      assertEquals(false, noType0.isEnumType());
      assertEquals(false, noType0.hasCachedValues());
      assertEquals(false, noType0.isReturnTypeInferred());
      assertEquals(false, noType0.isVoidType());
      assertNull(noType0.getReferenceName());
      assertEquals(true, noType0.canBeCalled());
      assertEquals(false, noType0.isBooleanValueType());
      assertEquals(true, noType0.matchesNumberContext());
      assertEquals(false, noType0.isResolved());
      assertEquals(false, noType0.isCheckedUnknownType());
      assertEquals(false, noType0.isUnionType());
      assertEquals(false, noType0.isRecordType());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noType0.isAllType());
      assertEquals(false, noType0.isTemplateType());
      assertEquals(2147483647, noType0.getMaxArguments());
      assertEquals(false, noType0.isNominalType());
      assertNull(noType0.getTemplateTypeName());
      assertEquals(true, noType0.matchesStringContext());
      assertEquals(true, noType0.isConstructor());
      assertEquals(0, noType0.getExtendedInterfacesCount());
      assertEquals(false, noType0.isNullType());
      assertEquals(false, noType0.isFunctionType());
      assertEquals(true, noType0.isNoType());
      assertEquals(true, noType0.matchesObjectContext());
      assertEquals(false, noType0.isEnumElementType());
      assertEquals(false, noType0.isNoObjectType());
      assertEquals(false, noType0.isFunctionPrototypeType());
      assertEquals(false, noType0.isStringValueType());
      assertEquals(false, noType0.isNominalConstructor());
      assertEquals(true, noType0.isNullable());
      assertEquals(false, noType0.isOrdinaryFunction());
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, functionType0.isRecordType());
      assertEquals(false, functionType0.isUnionType());
      assertEquals(false, functionType0.isNoObjectType());
      assertEquals(false, functionType0.isNominalType());
      assertEquals(false, functionType0.isAllType());
      assertEquals(2147483647, functionType0.getMaxArguments());
      assertEquals(false, functionType0.isFunctionPrototypeType());
      assertEquals(false, functionType0.isBooleanValueType());
      assertEquals(true, functionType0.hasInstanceType());
      assertEquals(false, functionType0.isStringValueType());
      assertEquals(false, functionType0.hasCachedValues());
      assertEquals(false, functionType0.isNoResolvedType());
      assertEquals(false, functionType0.isNumberValueType());
      assertEquals(false, functionType0.isInterface());
      assertEquals(false, functionType0.isCheckedUnknownType());
      assertEquals(false, functionType0.isOrdinaryFunction());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertEquals(true, functionType0.canBeCalled());
      assertEquals(false, functionType0.isTemplateType());
      assertEquals(false, functionType0.isReturnTypeInferred());
      assertEquals(false, functionType0.isEnumElementType());
      assertEquals(false, functionType0.isVoidType());
      assertEquals(true, functionType0.isFunctionType());
      assertEquals(false, functionType0.isEnumType());
      assertNull(functionType0.getTemplateTypeName());
      assertEquals(false, functionType0.isResolved());
      assertEquals(true, functionType0.isConstructor());
      assertEquals(false, functionType0.isNoType());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, functionType0.isNullType());
      assertEquals(false, functionType0.isNominalConstructor());
      
      UnionType unionType0 = (UnionType)jSTypeRegistry0.createOptionalNullableType((JSType) functionType0);
      assertNotNull(unionType0);
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isConstructor());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isFunctionPrototypeType());
      assertEquals(false, unionType0.isEnumType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isOrdinaryFunction());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isEnumElementType());
      assertEquals(false, unionType0.isCheckedUnknownType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isNominalConstructor());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isInterface());
      assertEquals(false, unionType0.isNoResolvedType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isNominalType());
      assertEquals(2147483647, noType0.getPropertiesCount());
      assertEquals(false, noType0.isNumberValueType());
      assertEquals(false, noType0.isInterface());
      assertEquals(true, noType0.hasInstanceType());
      assertEquals(false, noType0.isNoResolvedType());
      assertEquals(false, noType0.isEnumType());
      assertEquals(false, noType0.hasCachedValues());
      assertEquals(false, noType0.isReturnTypeInferred());
      assertEquals(false, noType0.isVoidType());
      assertNull(noType0.getReferenceName());
      assertEquals(true, noType0.canBeCalled());
      assertEquals(false, noType0.isBooleanValueType());
      assertEquals(true, noType0.matchesNumberContext());
      assertEquals(false, noType0.isResolved());
      assertEquals(false, noType0.isCheckedUnknownType());
      assertEquals(false, noType0.isUnionType());
      assertEquals(false, noType0.isRecordType());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noType0.isAllType());
      assertEquals(false, noType0.isTemplateType());
      assertEquals(2147483647, noType0.getMaxArguments());
      assertEquals(false, noType0.isNominalType());
      assertNull(noType0.getTemplateTypeName());
      assertEquals(true, noType0.matchesStringContext());
      assertEquals(true, noType0.isConstructor());
      assertEquals(0, noType0.getExtendedInterfacesCount());
      assertEquals(false, noType0.isNullType());
      assertEquals(false, noType0.isFunctionType());
      assertEquals(true, noType0.isNoType());
      assertEquals(true, noType0.matchesObjectContext());
      assertEquals(false, noType0.isEnumElementType());
      assertEquals(false, noType0.isNoObjectType());
      assertEquals(false, noType0.isFunctionPrototypeType());
      assertEquals(false, noType0.isStringValueType());
      assertEquals(false, noType0.isNominalConstructor());
      assertEquals(true, noType0.isNullable());
      assertEquals(false, noType0.isOrdinaryFunction());
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, functionType0.isRecordType());
      assertEquals(false, functionType0.isUnionType());
      assertEquals(true, functionType0.hasCachedValues());
      assertEquals(false, functionType0.isNoObjectType());
      assertEquals(false, functionType0.isNominalType());
      assertEquals(false, functionType0.isAllType());
      assertEquals(2147483647, functionType0.getMaxArguments());
      assertEquals(false, functionType0.isFunctionPrototypeType());
      assertEquals(false, functionType0.isBooleanValueType());
      assertEquals(true, functionType0.hasInstanceType());
      assertEquals(false, functionType0.isStringValueType());
      assertEquals(false, functionType0.isNoResolvedType());
      assertEquals(false, functionType0.isNumberValueType());
      assertEquals(false, functionType0.isInterface());
      assertEquals(false, functionType0.isCheckedUnknownType());
      assertEquals(false, functionType0.isOrdinaryFunction());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertEquals(true, functionType0.canBeCalled());
      assertEquals(false, functionType0.isTemplateType());
      assertEquals(false, functionType0.isReturnTypeInferred());
      assertEquals(false, functionType0.isEnumElementType());
      assertEquals(false, functionType0.isVoidType());
      assertEquals(true, functionType0.isFunctionType());
      assertEquals(false, functionType0.isEnumType());
      assertNull(functionType0.getTemplateTypeName());
      assertEquals(false, functionType0.isResolved());
      assertEquals(true, functionType0.isConstructor());
      assertEquals(false, functionType0.isNoType());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, functionType0.isNullType());
      assertEquals(false, functionType0.isNominalConstructor());
  }

  @Test
  public void test32()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      String string0 = "";
      boolean boolean0 = true;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0, boolean0);
      assertNotNull(jSTypeRegistry0);
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      NoType noType0 = new NoType(jSTypeRegistry0);
      assertNotNull(noType0);
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, noType0.isBooleanValueType());
      assertEquals(true, noType0.canBeCalled());
      assertEquals(true, noType0.matchesStringContext());
      assertEquals(false, noType0.isCheckedUnknownType());
      assertEquals(2147483647, noType0.getPropertiesCount());
      assertEquals(true, noType0.matchesNumberContext());
      assertNull(noType0.getTemplateTypeName());
      assertEquals(true, noType0.isNoType());
      assertEquals(false, noType0.isTemplateType());
      assertEquals(false, noType0.isAllType());
      assertEquals(false, noType0.isInterface());
      assertEquals(true, noType0.isConstructor());
      assertEquals(false, noType0.isUnionType());
      assertEquals(false, noType0.isOrdinaryFunction());
      assertEquals(true, noType0.isNullable());
      assertEquals(0, noType0.getExtendedInterfacesCount());
      assertEquals(false, noType0.hasCachedValues());
      assertEquals(false, noType0.isResolved());
      assertEquals(true, noType0.hasInstanceType());
      assertEquals(false, noType0.isNoObjectType());
      assertEquals(false, noType0.isNullType());
      assertEquals(false, noType0.isNoResolvedType());
      assertEquals(false, noType0.isNumberValueType());
      assertEquals(2147483647, noType0.getMaxArguments());
      assertEquals(true, noType0.matchesObjectContext());
      assertEquals(false, noType0.isRecordType());
      assertEquals(false, noType0.isFunctionType());
      assertEquals(false, noType0.isStringValueType());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noType0.isNominalConstructor());
      assertEquals(false, noType0.isEnumType());
      assertEquals(false, noType0.isNominalType());
      assertEquals(false, noType0.isFunctionPrototypeType());
      assertEquals(false, noType0.isReturnTypeInferred());
      assertEquals(false, noType0.isVoidType());
      assertEquals(false, noType0.isEnumElementType());
      assertNull(noType0.getReferenceName());
      
      Node node0 = noType0.getPropertyNode(string0);
      assertNull(node0);
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, noType0.isBooleanValueType());
      assertEquals(true, noType0.canBeCalled());
      assertEquals(true, noType0.matchesStringContext());
      assertEquals(false, noType0.isCheckedUnknownType());
      assertEquals(2147483647, noType0.getPropertiesCount());
      assertEquals(true, noType0.matchesNumberContext());
      assertNull(noType0.getTemplateTypeName());
      assertEquals(true, noType0.isNoType());
      assertEquals(false, noType0.isTemplateType());
      assertEquals(false, noType0.isAllType());
      assertEquals(false, noType0.isInterface());
      assertEquals(true, noType0.isConstructor());
      assertEquals(false, noType0.isUnionType());
      assertEquals(false, noType0.isOrdinaryFunction());
      assertEquals(true, noType0.isNullable());
      assertEquals(0, noType0.getExtendedInterfacesCount());
      assertEquals(false, noType0.hasCachedValues());
      assertEquals(false, noType0.isResolved());
      assertEquals(true, noType0.hasInstanceType());
      assertEquals(false, noType0.isNoObjectType());
      assertEquals(false, noType0.isNullType());
      assertEquals(false, noType0.isNoResolvedType());
      assertEquals(false, noType0.isNumberValueType());
      assertEquals(2147483647, noType0.getMaxArguments());
      assertEquals(true, noType0.matchesObjectContext());
      assertEquals(false, noType0.isRecordType());
      assertEquals(false, noType0.isFunctionType());
      assertEquals(false, noType0.isStringValueType());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noType0.isNominalConstructor());
      assertEquals(false, noType0.isEnumType());
      assertEquals(false, noType0.isNominalType());
      assertEquals(false, noType0.isFunctionPrototypeType());
      assertEquals(false, noType0.isReturnTypeInferred());
      assertEquals(false, noType0.isVoidType());
      assertEquals(false, noType0.isEnumElementType());
      assertNull(noType0.getReferenceName());
      
      FunctionType functionType0 = jSTypeRegistry0.createConstructorType(string0, node0, node0, (JSType) noType0);
      assertNotNull(functionType0);
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, functionType0.isNoType());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, functionType0.isResolved());
      assertEquals(false, functionType0.isInterface());
      assertEquals(false, functionType0.isOrdinaryFunction());
      assertEquals(true, functionType0.canBeCalled());
      assertEquals(2147483647, functionType0.getMaxArguments());
      assertEquals(false, functionType0.isNoObjectType());
      assertEquals(false, functionType0.isEnumElementType());
      assertEquals(false, functionType0.isAllType());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertEquals(false, functionType0.isVoidType());
      assertEquals(false, functionType0.isNumberValueType());
      assertEquals(false, functionType0.isNominalType());
      assertEquals(false, functionType0.isCheckedUnknownType());
      assertEquals(false, functionType0.isNominalConstructor());
      assertEquals(false, functionType0.isNullType());
      assertEquals(true, functionType0.isFunctionType());
      assertEquals(false, functionType0.isReturnTypeInferred());
      assertEquals(false, functionType0.isFunctionPrototypeType());
      assertEquals(false, functionType0.isStringValueType());
      assertEquals(false, functionType0.isTemplateType());
      assertNull(functionType0.getTemplateTypeName());
      assertEquals(false, functionType0.isNoResolvedType());
      assertEquals(false, functionType0.isEnumType());
      assertEquals(true, functionType0.hasInstanceType());
      assertEquals(false, functionType0.isBooleanValueType());
      assertEquals(true, functionType0.isConstructor());
      assertEquals(false, functionType0.isRecordType());
      assertEquals(false, functionType0.isUnionType());
      assertEquals(false, functionType0.hasCachedValues());
      assertEquals(false, noType0.isBooleanValueType());
      assertEquals(true, noType0.canBeCalled());
      assertEquals(true, noType0.matchesStringContext());
      assertEquals(false, noType0.isCheckedUnknownType());
      assertEquals(2147483647, noType0.getPropertiesCount());
      assertEquals(true, noType0.matchesNumberContext());
      assertNull(noType0.getTemplateTypeName());
      assertEquals(true, noType0.isNoType());
      assertEquals(false, noType0.isTemplateType());
      assertEquals(false, noType0.isAllType());
      assertEquals(false, noType0.isInterface());
      assertEquals(true, noType0.isConstructor());
      assertEquals(false, noType0.isUnionType());
      assertEquals(false, noType0.isOrdinaryFunction());
      assertEquals(true, noType0.isNullable());
      assertEquals(0, noType0.getExtendedInterfacesCount());
      assertEquals(false, noType0.hasCachedValues());
      assertEquals(false, noType0.isResolved());
      assertEquals(true, noType0.hasInstanceType());
      assertEquals(false, noType0.isNoObjectType());
      assertEquals(false, noType0.isNullType());
      assertEquals(false, noType0.isNoResolvedType());
      assertEquals(false, noType0.isNumberValueType());
      assertEquals(2147483647, noType0.getMaxArguments());
      assertEquals(true, noType0.matchesObjectContext());
      assertEquals(false, noType0.isRecordType());
      assertEquals(false, noType0.isFunctionType());
      assertEquals(false, noType0.isStringValueType());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noType0.isNominalConstructor());
      assertEquals(false, noType0.isEnumType());
      assertEquals(false, noType0.isNominalType());
      assertEquals(false, noType0.isFunctionPrototypeType());
      assertEquals(false, noType0.isReturnTypeInferred());
      assertEquals(false, noType0.isVoidType());
      assertEquals(false, noType0.isEnumElementType());
      assertNull(noType0.getReferenceName());
      
      boolean boolean1 = functionType0.matchesObjectContext();
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean0 == boolean1);
      assertTrue(boolean1);
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, functionType0.isNoType());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, functionType0.isResolved());
      assertEquals(false, functionType0.isInterface());
      assertEquals(false, functionType0.isOrdinaryFunction());
      assertEquals(true, functionType0.canBeCalled());
      assertEquals(2147483647, functionType0.getMaxArguments());
      assertEquals(false, functionType0.isNoObjectType());
      assertEquals(false, functionType0.isEnumElementType());
      assertEquals(false, functionType0.isAllType());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertEquals(false, functionType0.isVoidType());
      assertEquals(false, functionType0.isNumberValueType());
      assertEquals(false, functionType0.isNominalType());
      assertEquals(false, functionType0.isCheckedUnknownType());
      assertEquals(false, functionType0.isNominalConstructor());
      assertEquals(false, functionType0.isNullType());
      assertEquals(true, functionType0.isFunctionType());
      assertEquals(false, functionType0.isReturnTypeInferred());
      assertEquals(false, functionType0.isFunctionPrototypeType());
      assertEquals(false, functionType0.isStringValueType());
      assertEquals(false, functionType0.isTemplateType());
      assertNull(functionType0.getTemplateTypeName());
      assertEquals(false, functionType0.isNoResolvedType());
      assertEquals(false, functionType0.isEnumType());
      assertEquals(true, functionType0.hasInstanceType());
      assertEquals(false, functionType0.isBooleanValueType());
      assertEquals(true, functionType0.isConstructor());
      assertEquals(false, functionType0.isRecordType());
      assertEquals(false, functionType0.isUnionType());
      assertEquals(false, functionType0.hasCachedValues());
      assertEquals(false, noType0.isBooleanValueType());
      assertEquals(true, noType0.canBeCalled());
      assertEquals(true, noType0.matchesStringContext());
      assertEquals(false, noType0.isCheckedUnknownType());
      assertEquals(2147483647, noType0.getPropertiesCount());
      assertEquals(true, noType0.matchesNumberContext());
      assertNull(noType0.getTemplateTypeName());
      assertEquals(true, noType0.isNoType());
      assertEquals(false, noType0.isTemplateType());
      assertEquals(false, noType0.isAllType());
      assertEquals(false, noType0.isInterface());
      assertEquals(true, noType0.isConstructor());
      assertEquals(false, noType0.isUnionType());
      assertEquals(false, noType0.isOrdinaryFunction());
      assertEquals(true, noType0.isNullable());
      assertEquals(0, noType0.getExtendedInterfacesCount());
      assertEquals(false, noType0.hasCachedValues());
      assertEquals(false, noType0.isResolved());
      assertEquals(true, noType0.hasInstanceType());
      assertEquals(false, noType0.isNoObjectType());
      assertEquals(false, noType0.isNullType());
      assertEquals(false, noType0.isNoResolvedType());
      assertEquals(false, noType0.isNumberValueType());
      assertEquals(2147483647, noType0.getMaxArguments());
      assertEquals(true, noType0.matchesObjectContext());
      assertEquals(false, noType0.isRecordType());
      assertEquals(false, noType0.isFunctionType());
      assertEquals(false, noType0.isStringValueType());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noType0.isNominalConstructor());
      assertEquals(false, noType0.isEnumType());
      assertEquals(false, noType0.isNominalType());
      assertEquals(false, noType0.isFunctionPrototypeType());
      assertEquals(false, noType0.isReturnTypeInferred());
      assertEquals(false, noType0.isVoidType());
      assertEquals(false, noType0.isEnumElementType());
      assertNull(noType0.getReferenceName());
  }

  @Test
  public void test33()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      HashMap<String, RecordTypeBuilder.RecordProperty> hashMap0 = new HashMap<String, RecordTypeBuilder.RecordProperty>();
      assertNotNull(hashMap0);
      assertEquals(0, hashMap0.size());
      assertEquals("{}", hashMap0.toString());
      assertEquals(true, hashMap0.isEmpty());
      
      RecordType recordType0 = jSTypeRegistry0.createRecordType((Map<String, RecordTypeBuilder.RecordProperty>) hashMap0);
      assertNotNull(recordType0);
      assertEquals(0, hashMap0.size());
      assertEquals("{}", hashMap0.toString());
      assertEquals(true, hashMap0.isEmpty());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, recordType0.isEnumType());
      assertEquals(false, recordType0.isBooleanValueType());
      assertEquals(false, recordType0.isNoType());
      assertEquals(false, recordType0.isFunctionPrototypeType());
      assertEquals(false, recordType0.isFunctionType());
      assertEquals(false, recordType0.isNoResolvedType());
      assertEquals(false, recordType0.isOrdinaryFunction());
      assertEquals(false, recordType0.isNominalConstructor());
      assertEquals(false, recordType0.isConstructor());
      assertEquals(false, recordType0.isCheckedUnknownType());
      assertEquals(false, recordType0.isStringValueType());
      assertEquals(false, recordType0.isNullType());
      assertEquals(false, recordType0.isAllType());
      assertEquals(false, recordType0.isUnionType());
      assertEquals(false, recordType0.isVoidType());
      assertEquals(false, recordType0.isTemplateType());
      assertEquals(BooleanLiteralSet.TRUE, recordType0.getPossibleToBooleanOutcomes());
      assertEquals(false, recordType0.isNoObjectType());
      assertEquals(false, recordType0.isResolved());
      assertEquals(false, recordType0.isNominalType());
      assertEquals(true, recordType0.isRecordType());
      assertEquals(false, recordType0.isInterface());
      assertEquals(false, recordType0.isEnumElementType());
      assertEquals(false, recordType0.isNumberValueType());
      
      boolean boolean0 = recordType0.canBeCalled();
      assertFalse(boolean0);
      assertEquals(0, hashMap0.size());
      assertEquals("{}", hashMap0.toString());
      assertEquals(true, hashMap0.isEmpty());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, recordType0.isEnumType());
      assertEquals(false, recordType0.isBooleanValueType());
      assertEquals(false, recordType0.isNoType());
      assertEquals(false, recordType0.isFunctionPrototypeType());
      assertEquals(false, recordType0.isFunctionType());
      assertEquals(false, recordType0.isNoResolvedType());
      assertEquals(false, recordType0.isOrdinaryFunction());
      assertEquals(false, recordType0.isNominalConstructor());
      assertEquals(false, recordType0.isConstructor());
      assertEquals(false, recordType0.isCheckedUnknownType());
      assertEquals(false, recordType0.isStringValueType());
      assertEquals(false, recordType0.isNullType());
      assertEquals(false, recordType0.isAllType());
      assertEquals(false, recordType0.isUnionType());
      assertEquals(false, recordType0.isVoidType());
      assertEquals(false, recordType0.isTemplateType());
      assertEquals(BooleanLiteralSet.TRUE, recordType0.getPossibleToBooleanOutcomes());
      assertEquals(false, recordType0.isNoObjectType());
      assertEquals(false, recordType0.isResolved());
      assertEquals(false, recordType0.isNominalType());
      assertEquals(true, recordType0.isRecordType());
      assertEquals(false, recordType0.isInterface());
      assertEquals(false, recordType0.isEnumElementType());
      assertEquals(false, recordType0.isNumberValueType());
  }

  @Test
  public void test34()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      assertNotNull(noResolvedType0);
      assertEquals(true, noResolvedType0.matchesStringContext());
      assertEquals(2147483647, noResolvedType0.getMaxArguments());
      assertEquals(false, noResolvedType0.isFunctionPrototypeType());
      assertEquals(false, noResolvedType0.isOrdinaryFunction());
      assertEquals(true, noResolvedType0.matchesObjectContext());
      assertEquals(false, noResolvedType0.hasCachedValues());
      assertEquals(false, noResolvedType0.isReturnTypeInferred());
      assertEquals(false, noResolvedType0.isTemplateType());
      assertEquals(false, noResolvedType0.isAllType());
      assertEquals(false, noResolvedType0.isStringValueType());
      assertNull(noResolvedType0.getReferenceName());
      assertEquals(2147483647, noResolvedType0.getPropertiesCount());
      assertEquals(true, noResolvedType0.canBeCalled());
      assertEquals(false, noResolvedType0.isInterface());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noResolvedType0.isEnumType());
      assertEquals(false, noResolvedType0.isBooleanValueType());
      assertEquals(false, noResolvedType0.isResolved());
      assertEquals(false, noResolvedType0.isNumberValueType());
      assertEquals(false, noResolvedType0.isRecordType());
      assertEquals(true, noResolvedType0.matchesNumberContext());
      assertNull(noResolvedType0.getTemplateTypeName());
      assertEquals(false, noResolvedType0.isCheckedUnknownType());
      assertEquals(false, noResolvedType0.isNominalType());
      assertEquals(false, noResolvedType0.isUnionType());
      assertEquals(true, noResolvedType0.hasInstanceType());
      assertEquals(false, noResolvedType0.isNullType());
      assertEquals(false, noResolvedType0.isNominalConstructor());
      assertEquals(false, noResolvedType0.isVoidType());
      assertEquals(false, noResolvedType0.isFunctionType());
      assertEquals(false, noResolvedType0.isEnumElementType());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertEquals(false, noResolvedType0.isNoObjectType());
      assertEquals(true, noResolvedType0.isNullable());
      assertEquals(true, noResolvedType0.isConstructor());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      HashMap<String, RecordTypeBuilder.RecordProperty> hashMap0 = new HashMap<String, RecordTypeBuilder.RecordProperty>();
      assertNotNull(hashMap0);
      assertEquals(0, hashMap0.size());
      assertEquals("{}", hashMap0.toString());
      assertEquals(true, hashMap0.isEmpty());
      
      RecordType recordType0 = jSTypeRegistry0.createRecordType((Map<String, RecordTypeBuilder.RecordProperty>) hashMap0);
      assertNotNull(recordType0);
      assertEquals(0, hashMap0.size());
      assertEquals("{}", hashMap0.toString());
      assertEquals(true, hashMap0.isEmpty());
      assertEquals(false, recordType0.isFunctionPrototypeType());
      assertEquals(false, recordType0.isConstructor());
      assertEquals(false, recordType0.isNoObjectType());
      assertEquals(false, recordType0.isEnumType());
      assertEquals(false, recordType0.isCheckedUnknownType());
      assertEquals(false, recordType0.isTemplateType());
      assertEquals(false, recordType0.isNoType());
      assertEquals(false, recordType0.isNominalType());
      assertEquals(false, recordType0.isNoResolvedType());
      assertEquals(BooleanLiteralSet.TRUE, recordType0.getPossibleToBooleanOutcomes());
      assertEquals(false, recordType0.isVoidType());
      assertEquals(false, recordType0.isBooleanValueType());
      assertEquals(false, recordType0.isOrdinaryFunction());
      assertEquals(true, recordType0.isRecordType());
      assertEquals(false, recordType0.isEnumElementType());
      assertEquals(false, recordType0.isNullType());
      assertEquals(false, recordType0.isInterface());
      assertEquals(false, recordType0.isUnionType());
      assertEquals(false, recordType0.isResolved());
      assertEquals(false, recordType0.isNominalConstructor());
      assertEquals(false, recordType0.isAllType());
      assertEquals(false, recordType0.isFunctionType());
      assertEquals(false, recordType0.isNumberValueType());
      assertEquals(false, recordType0.isStringValueType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      noResolvedType0.matchConstraint((ObjectType) recordType0);
      assertEquals(true, noResolvedType0.matchesStringContext());
      assertEquals(2147483647, noResolvedType0.getMaxArguments());
      assertEquals(false, noResolvedType0.isFunctionPrototypeType());
      assertEquals(false, noResolvedType0.isOrdinaryFunction());
      assertEquals(true, noResolvedType0.matchesObjectContext());
      assertEquals(false, noResolvedType0.hasCachedValues());
      assertEquals(false, noResolvedType0.isReturnTypeInferred());
      assertEquals(false, noResolvedType0.isTemplateType());
      assertEquals(false, noResolvedType0.isAllType());
      assertEquals(false, noResolvedType0.isStringValueType());
      assertNull(noResolvedType0.getReferenceName());
      assertEquals(2147483647, noResolvedType0.getPropertiesCount());
      assertEquals(true, noResolvedType0.canBeCalled());
      assertEquals(false, noResolvedType0.isInterface());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noResolvedType0.isEnumType());
      assertEquals(false, noResolvedType0.isBooleanValueType());
      assertEquals(false, noResolvedType0.isResolved());
      assertEquals(false, noResolvedType0.isNumberValueType());
      assertEquals(false, noResolvedType0.isRecordType());
      assertEquals(true, noResolvedType0.matchesNumberContext());
      assertNull(noResolvedType0.getTemplateTypeName());
      assertEquals(false, noResolvedType0.isCheckedUnknownType());
      assertEquals(false, noResolvedType0.isNominalType());
      assertEquals(false, noResolvedType0.isUnionType());
      assertEquals(true, noResolvedType0.hasInstanceType());
      assertEquals(false, noResolvedType0.isNullType());
      assertEquals(false, noResolvedType0.isNominalConstructor());
      assertEquals(false, noResolvedType0.isVoidType());
      assertEquals(false, noResolvedType0.isFunctionType());
      assertEquals(false, noResolvedType0.isEnumElementType());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertEquals(false, noResolvedType0.isNoObjectType());
      assertEquals(true, noResolvedType0.isNullable());
      assertEquals(true, noResolvedType0.isConstructor());
      assertEquals(0, hashMap0.size());
      assertEquals("{}", hashMap0.toString());
      assertEquals(true, hashMap0.isEmpty());
      assertEquals(false, recordType0.isFunctionPrototypeType());
      assertEquals(false, recordType0.isConstructor());
      assertEquals(false, recordType0.isNoObjectType());
      assertEquals(false, recordType0.isEnumType());
      assertEquals(false, recordType0.isCheckedUnknownType());
      assertEquals(false, recordType0.isTemplateType());
      assertEquals(false, recordType0.isNoType());
      assertEquals(false, recordType0.isNominalType());
      assertEquals(false, recordType0.isNoResolvedType());
      assertEquals(BooleanLiteralSet.TRUE, recordType0.getPossibleToBooleanOutcomes());
      assertEquals(false, recordType0.isVoidType());
      assertEquals(false, recordType0.isBooleanValueType());
      assertEquals(false, recordType0.isOrdinaryFunction());
      assertEquals(true, recordType0.isRecordType());
      assertEquals(false, recordType0.isEnumElementType());
      assertEquals(false, recordType0.isNullType());
      assertEquals(false, recordType0.isInterface());
      assertEquals(false, recordType0.isUnionType());
      assertEquals(false, recordType0.isResolved());
      assertEquals(false, recordType0.isNominalConstructor());
      assertEquals(false, recordType0.isAllType());
      assertEquals(false, recordType0.isFunctionType());
      assertEquals(false, recordType0.isNumberValueType());
      assertEquals(false, recordType0.isStringValueType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
  }
}
