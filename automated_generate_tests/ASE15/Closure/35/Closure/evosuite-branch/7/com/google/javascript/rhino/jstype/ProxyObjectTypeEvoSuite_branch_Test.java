/*
 * This file was automatically generated by EvoSuite
 * Fri Dec 12 03:34:40 GMT 2014
 */

package com.google.javascript.rhino.jstype;

import static org.junit.Assert.*;
import org.junit.Test;
import com.google.javascript.rhino.ErrorReporter;
import com.google.javascript.rhino.JSDocInfo;
import com.google.javascript.rhino.Node;
import com.google.javascript.rhino.SimpleErrorReporter;
import com.google.javascript.rhino.jstype.AllType;
import com.google.javascript.rhino.jstype.BooleanLiteralSet;
import com.google.javascript.rhino.jstype.BooleanType;
import com.google.javascript.rhino.jstype.EnumType;
import com.google.javascript.rhino.jstype.FunctionType;
import com.google.javascript.rhino.jstype.IndexedType;
import com.google.javascript.rhino.jstype.JSType;
import com.google.javascript.rhino.jstype.JSTypeRegistry;
import com.google.javascript.rhino.jstype.NamedType;
import com.google.javascript.rhino.jstype.NoResolvedType;
import com.google.javascript.rhino.jstype.NoType;
import com.google.javascript.rhino.jstype.NullType;
import com.google.javascript.rhino.jstype.NumberType;
import com.google.javascript.rhino.jstype.ObjectType;
import com.google.javascript.rhino.jstype.ParameterizedType;
import com.google.javascript.rhino.jstype.ProxyObjectType;
import com.google.javascript.rhino.jstype.StringType;
import com.google.javascript.rhino.jstype.TemplateType;
import com.google.javascript.rhino.jstype.TernaryValue;
import com.google.javascript.rhino.jstype.UnionType;
import com.google.javascript.rhino.jstype.UnknownType;
import com.google.javascript.rhino.jstype.VoidType;
import java.util.Set;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;

import org.junit.runner.RunWith;


public class ProxyObjectTypeEvoSuite_branch_Test  {

  @Test
  public void test00()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSType jSType0 = null;
      FunctionType functionType0 = JSType.toMaybeFunctionType(jSType0);
      assertNull(functionType0);
      
      boolean boolean0 = false;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0, boolean0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      ParameterizedType parameterizedType0 = new ParameterizedType(jSTypeRegistry0, functionType0, functionType0);
      assertEquals(false, parameterizedType0.isResolved());
      assertEquals(false, parameterizedType0.isStringValueType());
      assertEquals(false, parameterizedType0.isFunctionPrototypeType());
      assertEquals(false, parameterizedType0.isNumberValueType());
      assertEquals(false, parameterizedType0.isVoidType());
      assertEquals(false, parameterizedType0.isBooleanValueType());
      assertEquals(BooleanLiteralSet.TRUE, parameterizedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, parameterizedType0.isTemplateType());
      assertEquals(false, parameterizedType0.isNullType());
      assertEquals(false, parameterizedType0.hasCachedValues());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(parameterizedType0);
      
      int int0 = parameterizedType0.getPropertiesCount();
      assertEquals(0, int0);
      assertEquals(false, parameterizedType0.isResolved());
      assertEquals(false, parameterizedType0.isStringValueType());
      assertEquals(false, parameterizedType0.isFunctionPrototypeType());
      assertEquals(false, parameterizedType0.isNumberValueType());
      assertEquals(false, parameterizedType0.isVoidType());
      assertEquals(false, parameterizedType0.isBooleanValueType());
      assertEquals(BooleanLiteralSet.TRUE, parameterizedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, parameterizedType0.isTemplateType());
      assertEquals(false, parameterizedType0.isNullType());
      assertEquals(false, parameterizedType0.hasCachedValues());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      String string0 = "";
      NamedType namedType0 = new NamedType(jSTypeRegistry0, string0, string0, int0, int0);
      assertEquals(false, parameterizedType0.isResolved());
      assertEquals(false, parameterizedType0.isStringValueType());
      assertEquals(false, parameterizedType0.isFunctionPrototypeType());
      assertEquals(false, parameterizedType0.isNumberValueType());
      assertEquals(false, parameterizedType0.isVoidType());
      assertEquals(false, parameterizedType0.isBooleanValueType());
      assertEquals(BooleanLiteralSet.TRUE, parameterizedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, parameterizedType0.isTemplateType());
      assertEquals(false, parameterizedType0.isNullType());
      assertEquals(false, parameterizedType0.hasCachedValues());
      assertEquals(false, namedType0.isNominalConstructor());
      assertEquals(false, namedType0.isResolved());
      assertEquals(false, namedType0.isEnumElementType());
      assertEquals(false, namedType0.isEnumType());
      assertEquals(false, namedType0.isNullType());
      assertEquals(false, namedType0.isFunctionType());
      assertEquals(false, namedType0.isNumberValueType());
      assertEquals(false, namedType0.isFunctionPrototypeType());
      assertEquals(false, namedType0.isBooleanValueType());
      assertEquals(false, namedType0.isUnionType());
      assertEquals(false, namedType0.hasCachedValues());
      assertEquals(false, namedType0.isVoidType());
      assertEquals(false, namedType0.isStringValueType());
      assertEquals(false, namedType0.isTemplateType());
      assertEquals(BooleanLiteralSet.TRUE, namedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, namedType0.isRecordType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(namedType0);
      
      NamedType namedType1 = (NamedType)namedType0.collapseUnion();
      assertSame(namedType0, namedType1);
      assertSame(namedType1, namedType0);
      assertEquals(false, parameterizedType0.isResolved());
      assertEquals(false, parameterizedType0.isStringValueType());
      assertEquals(false, parameterizedType0.isFunctionPrototypeType());
      assertEquals(false, parameterizedType0.isNumberValueType());
      assertEquals(false, parameterizedType0.isVoidType());
      assertEquals(false, parameterizedType0.isBooleanValueType());
      assertEquals(BooleanLiteralSet.TRUE, parameterizedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, parameterizedType0.isTemplateType());
      assertEquals(false, parameterizedType0.isNullType());
      assertEquals(false, parameterizedType0.hasCachedValues());
      assertEquals(false, namedType0.isNominalConstructor());
      assertEquals(false, namedType0.isResolved());
      assertEquals(false, namedType0.isEnumElementType());
      assertEquals(false, namedType0.isEnumType());
      assertEquals(false, namedType0.isNullType());
      assertEquals(false, namedType0.isFunctionType());
      assertEquals(false, namedType0.isNumberValueType());
      assertEquals(false, namedType0.isFunctionPrototypeType());
      assertEquals(false, namedType0.isBooleanValueType());
      assertEquals(false, namedType0.isUnionType());
      assertEquals(false, namedType0.hasCachedValues());
      assertEquals(false, namedType0.isVoidType());
      assertEquals(false, namedType0.isStringValueType());
      assertEquals(false, namedType0.isTemplateType());
      assertEquals(BooleanLiteralSet.TRUE, namedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, namedType0.isRecordType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, namedType1.isNominalConstructor());
      assertEquals(false, namedType1.isStringValueType());
      assertEquals(false, namedType1.isNullType());
      assertEquals(false, namedType1.isVoidType());
      assertEquals(false, namedType1.isFunctionType());
      assertEquals(false, namedType1.isRecordType());
      assertEquals(false, namedType1.isEnumType());
      assertEquals(BooleanLiteralSet.TRUE, namedType1.getPossibleToBooleanOutcomes());
      assertEquals(false, namedType1.isNumberValueType());
      assertEquals(false, namedType1.isResolved());
      assertEquals(false, namedType1.isUnionType());
      assertEquals(false, namedType1.isBooleanValueType());
      assertEquals(false, namedType1.isTemplateType());
      assertEquals(false, namedType1.hasCachedValues());
      assertEquals(false, namedType1.isFunctionPrototypeType());
      assertEquals(false, namedType1.isEnumElementType());
      assertNotNull(namedType1);
  }

  @Test
  public void test01()  throws Throwable  {
      String string0 = "g>";
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      TemplateType templateType0 = new TemplateType(jSTypeRegistry0, string0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, templateType0.isFunctionPrototypeType());
      assertEquals(false, templateType0.hasCachedValues());
      assertEquals(false, templateType0.isNumberValueType());
      assertEquals(false, templateType0.isFunctionType());
      assertEquals(false, templateType0.isVoidType());
      assertEquals("g>", templateType0.getReferenceName());
      assertEquals(true, templateType0.isTemplateType());
      assertEquals(false, templateType0.isStringValueType());
      assertEquals(BooleanLiteralSet.TRUE, templateType0.getPossibleToBooleanOutcomes());
      assertEquals(false, templateType0.isRecordType());
      assertEquals(false, templateType0.isResolved());
      assertEquals(false, templateType0.isBooleanValueType());
      assertEquals(false, templateType0.isNominalConstructor());
      assertEquals(false, templateType0.isEnumElementType());
      assertEquals(false, templateType0.isNullType());
      assertEquals(false, templateType0.isUnionType());
      assertEquals(false, templateType0.isEnumType());
      assertNotNull(templateType0);
      
      ObjectType objectType0 = templateType0.getTypeOfThis();
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, templateType0.isFunctionPrototypeType());
      assertEquals(false, templateType0.hasCachedValues());
      assertEquals(false, templateType0.isNumberValueType());
      assertEquals(false, templateType0.isFunctionType());
      assertEquals(false, templateType0.isVoidType());
      assertEquals("g>", templateType0.getReferenceName());
      assertEquals(true, templateType0.isTemplateType());
      assertEquals(false, templateType0.isStringValueType());
      assertEquals(BooleanLiteralSet.TRUE, templateType0.getPossibleToBooleanOutcomes());
      assertEquals(false, templateType0.isRecordType());
      assertEquals(false, templateType0.isResolved());
      assertEquals(false, templateType0.isBooleanValueType());
      assertEquals(false, templateType0.isNominalConstructor());
      assertEquals(false, templateType0.isEnumElementType());
      assertEquals(false, templateType0.isNullType());
      assertEquals(false, templateType0.isUnionType());
      assertEquals(false, templateType0.isEnumType());
      assertNull(objectType0);
  }

  @Test
  public void test02()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      boolean boolean0 = false;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0, boolean0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      StringType stringType0 = new StringType(jSTypeRegistry0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, stringType0.isUnionType());
      assertEquals(false, stringType0.isEnumType());
      assertEquals(false, stringType0.isTemplateType());
      assertEquals(false, stringType0.isBooleanValueType());
      assertEquals(false, stringType0.isNoResolvedType());
      assertEquals(false, stringType0.isFunctionType());
      assertEquals(true, stringType0.isStringValueType());
      assertEquals(false, stringType0.isNominalConstructor());
      assertEquals(false, stringType0.isEnumElementType());
      assertEquals(true, stringType0.matchesObjectContext());
      assertEquals(false, stringType0.isVoidType());
      assertEquals(BooleanLiteralSet.BOTH, stringType0.getPossibleToBooleanOutcomes());
      assertEquals(false, stringType0.isCheckedUnknownType());
      assertEquals(true, stringType0.matchesNumberContext());
      assertEquals(false, stringType0.isConstructor());
      assertEquals(false, stringType0.isAllType());
      assertEquals(false, stringType0.isNoType());
      assertEquals("string", stringType0.getDisplayName());
      assertEquals(false, stringType0.isInterface());
      assertEquals(false, stringType0.isRecordType());
      assertEquals(false, stringType0.isNominalType());
      assertEquals(false, stringType0.isFunctionPrototypeType());
      assertEquals(false, stringType0.isNoObjectType());
      assertEquals(false, stringType0.isNullType());
      assertEquals(false, stringType0.isResolved());
      assertEquals(false, stringType0.isOrdinaryFunction());
      assertEquals(true, stringType0.matchesStringContext());
      assertEquals(false, stringType0.isNumberValueType());
      assertNotNull(stringType0);
      
      EnumType enumType0 = stringType0.toMaybeEnumType();
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, stringType0.isUnionType());
      assertEquals(false, stringType0.isEnumType());
      assertEquals(false, stringType0.isTemplateType());
      assertEquals(false, stringType0.isBooleanValueType());
      assertEquals(false, stringType0.isNoResolvedType());
      assertEquals(false, stringType0.isFunctionType());
      assertEquals(true, stringType0.isStringValueType());
      assertEquals(false, stringType0.isNominalConstructor());
      assertEquals(false, stringType0.isEnumElementType());
      assertEquals(true, stringType0.matchesObjectContext());
      assertEquals(false, stringType0.isVoidType());
      assertEquals(BooleanLiteralSet.BOTH, stringType0.getPossibleToBooleanOutcomes());
      assertEquals(false, stringType0.isCheckedUnknownType());
      assertEquals(true, stringType0.matchesNumberContext());
      assertEquals(false, stringType0.isConstructor());
      assertEquals(false, stringType0.isAllType());
      assertEquals(false, stringType0.isNoType());
      assertEquals("string", stringType0.getDisplayName());
      assertEquals(false, stringType0.isInterface());
      assertEquals(false, stringType0.isRecordType());
      assertEquals(false, stringType0.isNominalType());
      assertEquals(false, stringType0.isFunctionPrototypeType());
      assertEquals(false, stringType0.isNoObjectType());
      assertEquals(false, stringType0.isNullType());
      assertEquals(false, stringType0.isResolved());
      assertEquals(false, stringType0.isOrdinaryFunction());
      assertEquals(true, stringType0.matchesStringContext());
      assertEquals(false, stringType0.isNumberValueType());
      assertNull(enumType0);
      
      IndexedType indexedType0 = new IndexedType(jSTypeRegistry0, enumType0, stringType0);
      assertEquals(false, indexedType0.isStringValueType());
      assertEquals(false, indexedType0.isTemplateType());
      assertEquals(BooleanLiteralSet.TRUE, indexedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, indexedType0.isResolved());
      assertEquals(false, indexedType0.hasCachedValues());
      assertEquals(false, indexedType0.isFunctionPrototypeType());
      assertEquals(false, indexedType0.isBooleanValueType());
      assertEquals(false, indexedType0.isVoidType());
      assertEquals(false, indexedType0.isNumberValueType());
      assertEquals(false, indexedType0.isNullType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, stringType0.isUnionType());
      assertEquals(false, stringType0.isEnumType());
      assertEquals(false, stringType0.isTemplateType());
      assertEquals(false, stringType0.isBooleanValueType());
      assertEquals(false, stringType0.isNoResolvedType());
      assertEquals(false, stringType0.isFunctionType());
      assertEquals(true, stringType0.isStringValueType());
      assertEquals(false, stringType0.isNominalConstructor());
      assertEquals(false, stringType0.isEnumElementType());
      assertEquals(true, stringType0.matchesObjectContext());
      assertEquals(false, stringType0.isVoidType());
      assertEquals(BooleanLiteralSet.BOTH, stringType0.getPossibleToBooleanOutcomes());
      assertEquals(false, stringType0.isCheckedUnknownType());
      assertEquals(true, stringType0.matchesNumberContext());
      assertEquals(false, stringType0.isConstructor());
      assertEquals(false, stringType0.isAllType());
      assertEquals(false, stringType0.isNoType());
      assertEquals("string", stringType0.getDisplayName());
      assertEquals(false, stringType0.isInterface());
      assertEquals(false, stringType0.isRecordType());
      assertEquals(false, stringType0.isNominalType());
      assertEquals(false, stringType0.isFunctionPrototypeType());
      assertEquals(false, stringType0.isNoObjectType());
      assertEquals(false, stringType0.isNullType());
      assertEquals(false, stringType0.isResolved());
      assertEquals(false, stringType0.isOrdinaryFunction());
      assertEquals(true, stringType0.matchesStringContext());
      assertEquals(false, stringType0.isNumberValueType());
      assertNotNull(indexedType0);
      
      ObjectType objectType0 = indexedType0.getTypeOfThis();
      assertEquals(false, indexedType0.isStringValueType());
      assertEquals(false, indexedType0.isTemplateType());
      assertEquals(BooleanLiteralSet.TRUE, indexedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, indexedType0.isResolved());
      assertEquals(false, indexedType0.hasCachedValues());
      assertEquals(false, indexedType0.isFunctionPrototypeType());
      assertEquals(false, indexedType0.isBooleanValueType());
      assertEquals(false, indexedType0.isVoidType());
      assertEquals(false, indexedType0.isNumberValueType());
      assertEquals(false, indexedType0.isNullType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, stringType0.isUnionType());
      assertEquals(false, stringType0.isEnumType());
      assertEquals(false, stringType0.isTemplateType());
      assertEquals(false, stringType0.isBooleanValueType());
      assertEquals(false, stringType0.isNoResolvedType());
      assertEquals(false, stringType0.isFunctionType());
      assertEquals(true, stringType0.isStringValueType());
      assertEquals(false, stringType0.isNominalConstructor());
      assertEquals(false, stringType0.isEnumElementType());
      assertEquals(true, stringType0.matchesObjectContext());
      assertEquals(false, stringType0.isVoidType());
      assertEquals(BooleanLiteralSet.BOTH, stringType0.getPossibleToBooleanOutcomes());
      assertEquals(false, stringType0.isCheckedUnknownType());
      assertEquals(true, stringType0.matchesNumberContext());
      assertEquals(false, stringType0.isConstructor());
      assertEquals(false, stringType0.isAllType());
      assertEquals(false, stringType0.isNoType());
      assertEquals("string", stringType0.getDisplayName());
      assertEquals(false, stringType0.isInterface());
      assertEquals(false, stringType0.isRecordType());
      assertEquals(false, stringType0.isNominalType());
      assertEquals(false, stringType0.isFunctionPrototypeType());
      assertEquals(false, stringType0.isNoObjectType());
      assertEquals(false, stringType0.isNullType());
      assertEquals(false, stringType0.isResolved());
      assertEquals(false, stringType0.isOrdinaryFunction());
      assertEquals(true, stringType0.matchesStringContext());
      assertEquals(false, stringType0.isNumberValueType());
      assertNull(objectType0);
  }

  @Test
  public void test03()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      boolean boolean0 = false;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0, boolean0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, booleanType0.isNominalType());
      assertEquals(true, booleanType0.matchesStringContext());
      assertEquals(false, booleanType0.isEnumElementType());
      assertEquals(false, booleanType0.isNoType());
      assertEquals(false, booleanType0.isEnumType());
      assertEquals(false, booleanType0.isFunctionType());
      assertEquals(true, booleanType0.matchesNumberContext());
      assertEquals(true, booleanType0.matchesObjectContext());
      assertEquals(BooleanLiteralSet.BOTH, booleanType0.getPossibleToBooleanOutcomes());
      assertEquals(false, booleanType0.isStringValueType());
      assertEquals(false, booleanType0.isUnionType());
      assertEquals(false, booleanType0.isNumberValueType());
      assertEquals(false, booleanType0.isNoObjectType());
      assertEquals(false, booleanType0.isTemplateType());
      assertEquals(false, booleanType0.isNoResolvedType());
      assertEquals(false, booleanType0.isFunctionPrototypeType());
      assertEquals(false, booleanType0.isConstructor());
      assertEquals(false, booleanType0.isNullable());
      assertEquals(true, booleanType0.isBooleanValueType());
      assertEquals(false, booleanType0.isNominalConstructor());
      assertEquals(false, booleanType0.isNullType());
      assertEquals("boolean", booleanType0.getDisplayName());
      assertEquals(false, booleanType0.isInterface());
      assertEquals(false, booleanType0.isOrdinaryFunction());
      assertEquals(false, booleanType0.isResolved());
      assertEquals(false, booleanType0.isAllType());
      assertEquals(false, booleanType0.isRecordType());
      assertEquals(false, booleanType0.isVoidType());
      assertEquals(false, booleanType0.isCheckedUnknownType());
      assertNotNull(booleanType0);
      
      ProxyObjectType proxyObjectType0 = new ProxyObjectType(jSTypeRegistry0, booleanType0);
      assertEquals(false, proxyObjectType0.hasCachedValues());
      assertEquals(false, proxyObjectType0.isNullType());
      assertEquals(false, proxyObjectType0.isFunctionPrototypeType());
      assertEquals(BooleanLiteralSet.TRUE, proxyObjectType0.getPossibleToBooleanOutcomes());
      assertEquals(false, proxyObjectType0.isEnumElementType());
      assertEquals(false, proxyObjectType0.isUnionType());
      assertEquals(false, proxyObjectType0.isResolved());
      assertEquals(false, proxyObjectType0.isEnumType());
      assertEquals(false, proxyObjectType0.isNumberValueType());
      assertEquals(false, proxyObjectType0.isVoidType());
      assertEquals(false, proxyObjectType0.isBooleanValueType());
      assertEquals(false, proxyObjectType0.isFunctionType());
      assertEquals(false, proxyObjectType0.isNominalConstructor());
      assertEquals(false, proxyObjectType0.isRecordType());
      assertEquals(false, proxyObjectType0.isTemplateType());
      assertEquals(false, proxyObjectType0.isStringValueType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, booleanType0.isNominalType());
      assertEquals(true, booleanType0.matchesStringContext());
      assertEquals(false, booleanType0.isEnumElementType());
      assertEquals(false, booleanType0.isNoType());
      assertEquals(false, booleanType0.isEnumType());
      assertEquals(false, booleanType0.isFunctionType());
      assertEquals(true, booleanType0.matchesNumberContext());
      assertEquals(true, booleanType0.matchesObjectContext());
      assertEquals(BooleanLiteralSet.BOTH, booleanType0.getPossibleToBooleanOutcomes());
      assertEquals(false, booleanType0.isStringValueType());
      assertEquals(false, booleanType0.isUnionType());
      assertEquals(false, booleanType0.isNumberValueType());
      assertEquals(false, booleanType0.isNoObjectType());
      assertEquals(false, booleanType0.isTemplateType());
      assertEquals(false, booleanType0.isNoResolvedType());
      assertEquals(false, booleanType0.isFunctionPrototypeType());
      assertEquals(false, booleanType0.isConstructor());
      assertEquals(false, booleanType0.isNullable());
      assertEquals(true, booleanType0.isBooleanValueType());
      assertEquals(false, booleanType0.isNominalConstructor());
      assertEquals(false, booleanType0.isNullType());
      assertEquals("boolean", booleanType0.getDisplayName());
      assertEquals(false, booleanType0.isInterface());
      assertEquals(false, booleanType0.isOrdinaryFunction());
      assertEquals(false, booleanType0.isResolved());
      assertEquals(false, booleanType0.isAllType());
      assertEquals(false, booleanType0.isRecordType());
      assertEquals(false, booleanType0.isVoidType());
      assertEquals(false, booleanType0.isCheckedUnknownType());
      assertNotNull(proxyObjectType0);
      
      JSType jSType0 = proxyObjectType0.getIndexType();
      assertEquals(false, proxyObjectType0.hasCachedValues());
      assertEquals(false, proxyObjectType0.isNullType());
      assertEquals(false, proxyObjectType0.isFunctionPrototypeType());
      assertEquals(BooleanLiteralSet.TRUE, proxyObjectType0.getPossibleToBooleanOutcomes());
      assertEquals(false, proxyObjectType0.isEnumElementType());
      assertEquals(false, proxyObjectType0.isUnionType());
      assertEquals(false, proxyObjectType0.isResolved());
      assertEquals(false, proxyObjectType0.isEnumType());
      assertEquals(false, proxyObjectType0.isNumberValueType());
      assertEquals(false, proxyObjectType0.isVoidType());
      assertEquals(false, proxyObjectType0.isBooleanValueType());
      assertEquals(false, proxyObjectType0.isFunctionType());
      assertEquals(false, proxyObjectType0.isNominalConstructor());
      assertEquals(false, proxyObjectType0.isRecordType());
      assertEquals(false, proxyObjectType0.isTemplateType());
      assertEquals(false, proxyObjectType0.isStringValueType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, booleanType0.isNominalType());
      assertEquals(true, booleanType0.matchesStringContext());
      assertEquals(false, booleanType0.isEnumElementType());
      assertEquals(false, booleanType0.isNoType());
      assertEquals(false, booleanType0.isEnumType());
      assertEquals(false, booleanType0.isFunctionType());
      assertEquals(true, booleanType0.matchesNumberContext());
      assertEquals(true, booleanType0.matchesObjectContext());
      assertEquals(BooleanLiteralSet.BOTH, booleanType0.getPossibleToBooleanOutcomes());
      assertEquals(false, booleanType0.isStringValueType());
      assertEquals(false, booleanType0.isUnionType());
      assertEquals(false, booleanType0.isNumberValueType());
      assertEquals(false, booleanType0.isNoObjectType());
      assertEquals(false, booleanType0.isTemplateType());
      assertEquals(false, booleanType0.isNoResolvedType());
      assertEquals(false, booleanType0.isFunctionPrototypeType());
      assertEquals(false, booleanType0.isConstructor());
      assertEquals(false, booleanType0.isNullable());
      assertEquals(true, booleanType0.isBooleanValueType());
      assertEquals(false, booleanType0.isNominalConstructor());
      assertEquals(false, booleanType0.isNullType());
      assertEquals("boolean", booleanType0.getDisplayName());
      assertEquals(false, booleanType0.isInterface());
      assertEquals(false, booleanType0.isOrdinaryFunction());
      assertEquals(false, booleanType0.isResolved());
      assertEquals(false, booleanType0.isAllType());
      assertEquals(false, booleanType0.isRecordType());
      assertEquals(false, booleanType0.isVoidType());
      assertEquals(false, booleanType0.isCheckedUnknownType());
      assertNull(jSType0);
  }

  @Test
  public void test04()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      boolean boolean0 = true;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0, boolean0);
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      String string0 = "Z4}D-jR(`*2eS";
      int int0 = 2016;
      NamedType namedType0 = new NamedType(jSTypeRegistry0, string0, string0, int0, int0);
      assertEquals(false, namedType0.hasCachedValues());
      assertEquals(false, namedType0.isNumberValueType());
      assertEquals(false, namedType0.isFunctionType());
      assertEquals(BooleanLiteralSet.TRUE, namedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, namedType0.isTemplateType());
      assertEquals(false, namedType0.isUnionType());
      assertEquals(false, namedType0.isFunctionPrototypeType());
      assertEquals(false, namedType0.isEnumType());
      assertEquals(false, namedType0.isBooleanValueType());
      assertEquals(false, namedType0.isResolved());
      assertEquals(false, namedType0.isNominalConstructor());
      assertEquals(false, namedType0.isEnumElementType());
      assertEquals(false, namedType0.isNullType());
      assertEquals(false, namedType0.isVoidType());
      assertEquals(false, namedType0.isStringValueType());
      assertEquals(false, namedType0.isRecordType());
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(namedType0);
      
      JSType jSType0 = namedType0.getIndexType();
      assertEquals(false, namedType0.hasCachedValues());
      assertEquals(false, namedType0.isNumberValueType());
      assertEquals(false, namedType0.isFunctionType());
      assertEquals(BooleanLiteralSet.TRUE, namedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, namedType0.isTemplateType());
      assertEquals(false, namedType0.isUnionType());
      assertEquals(false, namedType0.isFunctionPrototypeType());
      assertEquals(false, namedType0.isEnumType());
      assertEquals(false, namedType0.isBooleanValueType());
      assertEquals(false, namedType0.isResolved());
      assertEquals(false, namedType0.isNominalConstructor());
      assertEquals(false, namedType0.isEnumElementType());
      assertEquals(false, namedType0.isNullType());
      assertEquals(false, namedType0.isVoidType());
      assertEquals(false, namedType0.isStringValueType());
      assertEquals(false, namedType0.isRecordType());
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNull(jSType0);
  }

  @Test
  public void test05()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = null;
      NumberType numberType0 = new NumberType(jSTypeRegistry0);
      assertEquals(false, numberType0.isNullable());
      assertEquals(true, numberType0.isNumberValueType());
      assertEquals(false, numberType0.isEnumElementType());
      assertEquals(false, numberType0.isRecordType());
      assertEquals(false, numberType0.isCheckedUnknownType());
      assertEquals(false, numberType0.isNoType());
      assertEquals(false, numberType0.isNominalType());
      assertEquals(true, numberType0.matchesObjectContext());
      assertEquals(false, numberType0.isFunctionPrototypeType());
      assertEquals(false, numberType0.isInterface());
      assertEquals(false, numberType0.isUnionType());
      assertEquals(false, numberType0.isConstructor());
      assertEquals(false, numberType0.isNominalConstructor());
      assertEquals(false, numberType0.isResolved());
      assertEquals(false, numberType0.isTemplateType());
      assertEquals(BooleanLiteralSet.BOTH, numberType0.getPossibleToBooleanOutcomes());
      assertEquals(false, numberType0.isBooleanValueType());
      assertEquals("number", numberType0.getDisplayName());
      assertEquals(false, numberType0.isStringValueType());
      assertEquals(false, numberType0.isNoObjectType());
      assertEquals(false, numberType0.isFunctionType());
      assertEquals(true, numberType0.matchesNumberContext());
      assertEquals(true, numberType0.matchesStringContext());
      assertEquals(false, numberType0.isNoResolvedType());
      assertEquals(false, numberType0.isVoidType());
      assertEquals(false, numberType0.isOrdinaryFunction());
      assertEquals(false, numberType0.isNullType());
      assertEquals(false, numberType0.isEnumType());
      assertEquals(false, numberType0.isAllType());
      assertNotNull(numberType0);
      
      FunctionType functionType0 = numberType0.toMaybeFunctionType();
      assertEquals(false, numberType0.isNullable());
      assertEquals(true, numberType0.isNumberValueType());
      assertEquals(false, numberType0.isEnumElementType());
      assertEquals(false, numberType0.isRecordType());
      assertEquals(false, numberType0.isCheckedUnknownType());
      assertEquals(false, numberType0.isNoType());
      assertEquals(false, numberType0.isNominalType());
      assertEquals(true, numberType0.matchesObjectContext());
      assertEquals(false, numberType0.isFunctionPrototypeType());
      assertEquals(false, numberType0.isInterface());
      assertEquals(false, numberType0.isUnionType());
      assertEquals(false, numberType0.isConstructor());
      assertEquals(false, numberType0.isNominalConstructor());
      assertEquals(false, numberType0.isResolved());
      assertEquals(false, numberType0.isTemplateType());
      assertEquals(BooleanLiteralSet.BOTH, numberType0.getPossibleToBooleanOutcomes());
      assertEquals(false, numberType0.isBooleanValueType());
      assertEquals("number", numberType0.getDisplayName());
      assertEquals(false, numberType0.isStringValueType());
      assertEquals(false, numberType0.isNoObjectType());
      assertEquals(false, numberType0.isFunctionType());
      assertEquals(true, numberType0.matchesNumberContext());
      assertEquals(true, numberType0.matchesStringContext());
      assertEquals(false, numberType0.isNoResolvedType());
      assertEquals(false, numberType0.isVoidType());
      assertEquals(false, numberType0.isOrdinaryFunction());
      assertEquals(false, numberType0.isNullType());
      assertEquals(false, numberType0.isEnumType());
      assertEquals(false, numberType0.isAllType());
      assertNull(functionType0);
      
      IndexedType indexedType0 = new IndexedType(jSTypeRegistry0, functionType0, functionType0);
      assertEquals(false, indexedType0.isResolved());
      assertEquals(false, indexedType0.hasCachedValues());
      assertEquals(false, indexedType0.isStringValueType());
      assertEquals(false, indexedType0.isNullType());
      assertEquals(BooleanLiteralSet.TRUE, indexedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, indexedType0.isTemplateType());
      assertEquals(false, indexedType0.isFunctionPrototypeType());
      assertEquals(false, indexedType0.isNumberValueType());
      assertEquals(false, indexedType0.isVoidType());
      assertEquals(false, indexedType0.isBooleanValueType());
      assertEquals(false, numberType0.isNullable());
      assertEquals(true, numberType0.isNumberValueType());
      assertEquals(false, numberType0.isEnumElementType());
      assertEquals(false, numberType0.isRecordType());
      assertEquals(false, numberType0.isCheckedUnknownType());
      assertEquals(false, numberType0.isNoType());
      assertEquals(false, numberType0.isNominalType());
      assertEquals(true, numberType0.matchesObjectContext());
      assertEquals(false, numberType0.isFunctionPrototypeType());
      assertEquals(false, numberType0.isInterface());
      assertEquals(false, numberType0.isUnionType());
      assertEquals(false, numberType0.isConstructor());
      assertEquals(false, numberType0.isNominalConstructor());
      assertEquals(false, numberType0.isResolved());
      assertEquals(false, numberType0.isTemplateType());
      assertEquals(BooleanLiteralSet.BOTH, numberType0.getPossibleToBooleanOutcomes());
      assertEquals(false, numberType0.isBooleanValueType());
      assertEquals("number", numberType0.getDisplayName());
      assertEquals(false, numberType0.isStringValueType());
      assertEquals(false, numberType0.isNoObjectType());
      assertEquals(false, numberType0.isFunctionType());
      assertEquals(true, numberType0.matchesNumberContext());
      assertEquals(true, numberType0.matchesStringContext());
      assertEquals(false, numberType0.isNoResolvedType());
      assertEquals(false, numberType0.isVoidType());
      assertEquals(false, numberType0.isOrdinaryFunction());
      assertEquals(false, numberType0.isNullType());
      assertEquals(false, numberType0.isEnumType());
      assertEquals(false, numberType0.isAllType());
      assertNotNull(indexedType0);
      
      JSType jSType0 = indexedType0.getParameterType();
      assertEquals(false, indexedType0.isResolved());
      assertEquals(false, indexedType0.hasCachedValues());
      assertEquals(false, indexedType0.isStringValueType());
      assertEquals(false, indexedType0.isNullType());
      assertEquals(BooleanLiteralSet.TRUE, indexedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, indexedType0.isTemplateType());
      assertEquals(false, indexedType0.isFunctionPrototypeType());
      assertEquals(false, indexedType0.isNumberValueType());
      assertEquals(false, indexedType0.isVoidType());
      assertEquals(false, indexedType0.isBooleanValueType());
      assertEquals(false, numberType0.isNullable());
      assertEquals(true, numberType0.isNumberValueType());
      assertEquals(false, numberType0.isEnumElementType());
      assertEquals(false, numberType0.isRecordType());
      assertEquals(false, numberType0.isCheckedUnknownType());
      assertEquals(false, numberType0.isNoType());
      assertEquals(false, numberType0.isNominalType());
      assertEquals(true, numberType0.matchesObjectContext());
      assertEquals(false, numberType0.isFunctionPrototypeType());
      assertEquals(false, numberType0.isInterface());
      assertEquals(false, numberType0.isUnionType());
      assertEquals(false, numberType0.isConstructor());
      assertEquals(false, numberType0.isNominalConstructor());
      assertEquals(false, numberType0.isResolved());
      assertEquals(false, numberType0.isTemplateType());
      assertEquals(BooleanLiteralSet.BOTH, numberType0.getPossibleToBooleanOutcomes());
      assertEquals(false, numberType0.isBooleanValueType());
      assertEquals("number", numberType0.getDisplayName());
      assertEquals(false, numberType0.isStringValueType());
      assertEquals(false, numberType0.isNoObjectType());
      assertEquals(false, numberType0.isFunctionType());
      assertEquals(true, numberType0.matchesNumberContext());
      assertEquals(true, numberType0.matchesStringContext());
      assertEquals(false, numberType0.isNoResolvedType());
      assertEquals(false, numberType0.isVoidType());
      assertEquals(false, numberType0.isOrdinaryFunction());
      assertEquals(false, numberType0.isNullType());
      assertEquals(false, numberType0.isEnumType());
      assertEquals(false, numberType0.isAllType());
      assertNull(jSType0);
  }

  @Test
  public void test06()  throws Throwable  {
      String string0 = "com.gogle.javascript.rhino.jstpe.ProxyObjectType";
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      TemplateType templateType0 = new TemplateType(jSTypeRegistry0, string0);
      assertEquals(false, templateType0.isVoidType());
      assertEquals("com.gogle.javascript.rhino.jstpe.ProxyObjectType", templateType0.getReferenceName());
      assertEquals(true, templateType0.isTemplateType());
      assertEquals(false, templateType0.hasCachedValues());
      assertEquals(false, templateType0.isRecordType());
      assertEquals(false, templateType0.isEnumType());
      assertEquals(false, templateType0.isUnionType());
      assertEquals(false, templateType0.isNominalConstructor());
      assertEquals(false, templateType0.isFunctionType());
      assertEquals(false, templateType0.isFunctionPrototypeType());
      assertEquals(false, templateType0.isBooleanValueType());
      assertEquals(false, templateType0.isNumberValueType());
      assertEquals(false, templateType0.isStringValueType());
      assertEquals(false, templateType0.isResolved());
      assertEquals(false, templateType0.isEnumElementType());
      assertEquals(false, templateType0.isNullType());
      assertEquals(BooleanLiteralSet.TRUE, templateType0.getPossibleToBooleanOutcomes());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(templateType0);
      
      JSType jSType0 = templateType0.getParameterType();
      assertEquals(false, templateType0.isVoidType());
      assertEquals("com.gogle.javascript.rhino.jstpe.ProxyObjectType", templateType0.getReferenceName());
      assertEquals(true, templateType0.isTemplateType());
      assertEquals(false, templateType0.hasCachedValues());
      assertEquals(false, templateType0.isRecordType());
      assertEquals(false, templateType0.isEnumType());
      assertEquals(false, templateType0.isUnionType());
      assertEquals(false, templateType0.isNominalConstructor());
      assertEquals(false, templateType0.isFunctionType());
      assertEquals(false, templateType0.isFunctionPrototypeType());
      assertEquals(false, templateType0.isBooleanValueType());
      assertEquals(false, templateType0.isNumberValueType());
      assertEquals(false, templateType0.isStringValueType());
      assertEquals(false, templateType0.isResolved());
      assertEquals(false, templateType0.isEnumElementType());
      assertEquals(false, templateType0.isNullType());
      assertEquals(BooleanLiteralSet.TRUE, templateType0.getPossibleToBooleanOutcomes());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNull(jSType0);
  }

  @Test
  public void test07()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = null;
      StringType stringType0 = new StringType(jSTypeRegistry0);
      assertEquals(false, stringType0.isResolved());
      assertEquals("string", stringType0.getDisplayName());
      assertEquals(true, stringType0.isStringValueType());
      assertEquals(false, stringType0.isNumberValueType());
      assertEquals(false, stringType0.isUnionType());
      assertEquals(false, stringType0.isNominalConstructor());
      assertEquals(false, stringType0.isOrdinaryFunction());
      assertEquals(false, stringType0.isEnumType());
      assertEquals(false, stringType0.isFunctionPrototypeType());
      assertEquals(true, stringType0.matchesStringContext());
      assertEquals(false, stringType0.isNoObjectType());
      assertEquals(BooleanLiteralSet.BOTH, stringType0.getPossibleToBooleanOutcomes());
      assertEquals(false, stringType0.isEnumElementType());
      assertEquals(true, stringType0.matchesNumberContext());
      assertEquals(false, stringType0.isBooleanValueType());
      assertEquals(true, stringType0.matchesObjectContext());
      assertEquals(false, stringType0.isAllType());
      assertEquals(false, stringType0.isNominalType());
      assertEquals(false, stringType0.isRecordType());
      assertEquals(false, stringType0.isCheckedUnknownType());
      assertEquals(false, stringType0.isTemplateType());
      assertEquals(false, stringType0.isInterface());
      assertEquals(false, stringType0.isNoResolvedType());
      assertEquals(false, stringType0.isVoidType());
      assertEquals(false, stringType0.isConstructor());
      assertEquals(false, stringType0.isNullType());
      assertEquals(false, stringType0.isFunctionType());
      assertEquals(false, stringType0.isNoType());
      assertNotNull(stringType0);
      
      ObjectType objectType0 = stringType0.toObjectType();
      assertEquals(false, stringType0.isResolved());
      assertEquals("string", stringType0.getDisplayName());
      assertEquals(true, stringType0.isStringValueType());
      assertEquals(false, stringType0.isNumberValueType());
      assertEquals(false, stringType0.isUnionType());
      assertEquals(false, stringType0.isNominalConstructor());
      assertEquals(false, stringType0.isOrdinaryFunction());
      assertEquals(false, stringType0.isEnumType());
      assertEquals(false, stringType0.isFunctionPrototypeType());
      assertEquals(true, stringType0.matchesStringContext());
      assertEquals(false, stringType0.isNoObjectType());
      assertEquals(BooleanLiteralSet.BOTH, stringType0.getPossibleToBooleanOutcomes());
      assertEquals(false, stringType0.isEnumElementType());
      assertEquals(true, stringType0.matchesNumberContext());
      assertEquals(false, stringType0.isBooleanValueType());
      assertEquals(true, stringType0.matchesObjectContext());
      assertEquals(false, stringType0.isAllType());
      assertEquals(false, stringType0.isNominalType());
      assertEquals(false, stringType0.isRecordType());
      assertEquals(false, stringType0.isCheckedUnknownType());
      assertEquals(false, stringType0.isTemplateType());
      assertEquals(false, stringType0.isInterface());
      assertEquals(false, stringType0.isNoResolvedType());
      assertEquals(false, stringType0.isVoidType());
      assertEquals(false, stringType0.isConstructor());
      assertEquals(false, stringType0.isNullType());
      assertEquals(false, stringType0.isFunctionType());
      assertEquals(false, stringType0.isNoType());
      assertNull(objectType0);
      
      FunctionType functionType0 = JSType.toMaybeFunctionType((JSType) objectType0);
      assertEquals(false, stringType0.isResolved());
      assertEquals("string", stringType0.getDisplayName());
      assertEquals(true, stringType0.isStringValueType());
      assertEquals(false, stringType0.isNumberValueType());
      assertEquals(false, stringType0.isUnionType());
      assertEquals(false, stringType0.isNominalConstructor());
      assertEquals(false, stringType0.isOrdinaryFunction());
      assertEquals(false, stringType0.isEnumType());
      assertEquals(false, stringType0.isFunctionPrototypeType());
      assertEquals(true, stringType0.matchesStringContext());
      assertEquals(false, stringType0.isNoObjectType());
      assertEquals(BooleanLiteralSet.BOTH, stringType0.getPossibleToBooleanOutcomes());
      assertEquals(false, stringType0.isEnumElementType());
      assertEquals(true, stringType0.matchesNumberContext());
      assertEquals(false, stringType0.isBooleanValueType());
      assertEquals(true, stringType0.matchesObjectContext());
      assertEquals(false, stringType0.isAllType());
      assertEquals(false, stringType0.isNominalType());
      assertEquals(false, stringType0.isRecordType());
      assertEquals(false, stringType0.isCheckedUnknownType());
      assertEquals(false, stringType0.isTemplateType());
      assertEquals(false, stringType0.isInterface());
      assertEquals(false, stringType0.isNoResolvedType());
      assertEquals(false, stringType0.isVoidType());
      assertEquals(false, stringType0.isConstructor());
      assertEquals(false, stringType0.isNullType());
      assertEquals(false, stringType0.isFunctionType());
      assertEquals(false, stringType0.isNoType());
      assertNull(functionType0);
      
      IndexedType indexedType0 = new IndexedType(jSTypeRegistry0, functionType0, stringType0);
      assertEquals(false, indexedType0.isNumberValueType());
      assertEquals(BooleanLiteralSet.TRUE, indexedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, indexedType0.hasCachedValues());
      assertEquals(false, indexedType0.isFunctionPrototypeType());
      assertEquals(false, indexedType0.isVoidType());
      assertEquals(false, indexedType0.isResolved());
      assertEquals(false, indexedType0.isStringValueType());
      assertEquals(false, indexedType0.isNullType());
      assertEquals(false, indexedType0.isTemplateType());
      assertEquals(false, indexedType0.isBooleanValueType());
      assertEquals(false, stringType0.isResolved());
      assertEquals("string", stringType0.getDisplayName());
      assertEquals(true, stringType0.isStringValueType());
      assertEquals(false, stringType0.isNumberValueType());
      assertEquals(false, stringType0.isUnionType());
      assertEquals(false, stringType0.isNominalConstructor());
      assertEquals(false, stringType0.isOrdinaryFunction());
      assertEquals(false, stringType0.isEnumType());
      assertEquals(false, stringType0.isFunctionPrototypeType());
      assertEquals(true, stringType0.matchesStringContext());
      assertEquals(false, stringType0.isNoObjectType());
      assertEquals(BooleanLiteralSet.BOTH, stringType0.getPossibleToBooleanOutcomes());
      assertEquals(false, stringType0.isEnumElementType());
      assertEquals(true, stringType0.matchesNumberContext());
      assertEquals(false, stringType0.isBooleanValueType());
      assertEquals(true, stringType0.matchesObjectContext());
      assertEquals(false, stringType0.isAllType());
      assertEquals(false, stringType0.isNominalType());
      assertEquals(false, stringType0.isRecordType());
      assertEquals(false, stringType0.isCheckedUnknownType());
      assertEquals(false, stringType0.isTemplateType());
      assertEquals(false, stringType0.isInterface());
      assertEquals(false, stringType0.isNoResolvedType());
      assertEquals(false, stringType0.isVoidType());
      assertEquals(false, stringType0.isConstructor());
      assertEquals(false, stringType0.isNullType());
      assertEquals(false, stringType0.isFunctionType());
      assertEquals(false, stringType0.isNoType());
      assertNotNull(indexedType0);
      
      JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0);
      assertEquals(false, jSTypeRegistry1.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry1);
      
      ParameterizedType parameterizedType0 = new ParameterizedType(jSTypeRegistry1, indexedType0, indexedType0);
      assertEquals(false, indexedType0.isNumberValueType());
      assertEquals(BooleanLiteralSet.TRUE, indexedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, indexedType0.hasCachedValues());
      assertEquals(false, indexedType0.isFunctionPrototypeType());
      assertEquals(false, indexedType0.isVoidType());
      assertEquals(false, indexedType0.isResolved());
      assertEquals(false, indexedType0.isStringValueType());
      assertEquals(false, indexedType0.isNullType());
      assertEquals(false, indexedType0.isTemplateType());
      assertEquals(false, indexedType0.isBooleanValueType());
      assertEquals(false, parameterizedType0.isNullType());
      assertEquals(false, parameterizedType0.isBooleanValueType());
      assertEquals(false, parameterizedType0.hasCachedValues());
      assertEquals(false, parameterizedType0.isFunctionPrototypeType());
      assertEquals(false, parameterizedType0.isNumberValueType());
      assertEquals(false, parameterizedType0.isResolved());
      assertEquals(false, parameterizedType0.isVoidType());
      assertEquals(false, parameterizedType0.isTemplateType());
      assertEquals(false, parameterizedType0.isStringValueType());
      assertEquals(BooleanLiteralSet.TRUE, parameterizedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, stringType0.isResolved());
      assertEquals("string", stringType0.getDisplayName());
      assertEquals(true, stringType0.isStringValueType());
      assertEquals(false, stringType0.isNumberValueType());
      assertEquals(false, stringType0.isUnionType());
      assertEquals(false, stringType0.isNominalConstructor());
      assertEquals(false, stringType0.isOrdinaryFunction());
      assertEquals(false, stringType0.isEnumType());
      assertEquals(false, stringType0.isFunctionPrototypeType());
      assertEquals(true, stringType0.matchesStringContext());
      assertEquals(false, stringType0.isNoObjectType());
      assertEquals(BooleanLiteralSet.BOTH, stringType0.getPossibleToBooleanOutcomes());
      assertEquals(false, stringType0.isEnumElementType());
      assertEquals(true, stringType0.matchesNumberContext());
      assertEquals(false, stringType0.isBooleanValueType());
      assertEquals(true, stringType0.matchesObjectContext());
      assertEquals(false, stringType0.isAllType());
      assertEquals(false, stringType0.isNominalType());
      assertEquals(false, stringType0.isRecordType());
      assertEquals(false, stringType0.isCheckedUnknownType());
      assertEquals(false, stringType0.isTemplateType());
      assertEquals(false, stringType0.isInterface());
      assertEquals(false, stringType0.isNoResolvedType());
      assertEquals(false, stringType0.isVoidType());
      assertEquals(false, stringType0.isConstructor());
      assertEquals(false, stringType0.isNullType());
      assertEquals(false, stringType0.isFunctionType());
      assertEquals(false, stringType0.isNoType());
      assertEquals(false, jSTypeRegistry1.shouldTolerateUndefinedValues());
      assertNotNull(parameterizedType0);
      
      FunctionType functionType1 = parameterizedType0.getConstructor();
      assertEquals(false, indexedType0.isNumberValueType());
      assertEquals(BooleanLiteralSet.TRUE, indexedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, indexedType0.hasCachedValues());
      assertEquals(false, indexedType0.isFunctionPrototypeType());
      assertEquals(false, indexedType0.isVoidType());
      assertEquals(false, indexedType0.isResolved());
      assertEquals(false, indexedType0.isStringValueType());
      assertEquals(false, indexedType0.isNullType());
      assertEquals(false, indexedType0.isTemplateType());
      assertEquals(false, indexedType0.isBooleanValueType());
      assertEquals(false, parameterizedType0.isNullType());
      assertEquals(false, parameterizedType0.isBooleanValueType());
      assertEquals(false, parameterizedType0.hasCachedValues());
      assertEquals(false, parameterizedType0.isFunctionPrototypeType());
      assertEquals(false, parameterizedType0.isNumberValueType());
      assertEquals(false, parameterizedType0.isResolved());
      assertEquals(false, parameterizedType0.isVoidType());
      assertEquals(false, parameterizedType0.isTemplateType());
      assertEquals(false, parameterizedType0.isStringValueType());
      assertEquals(BooleanLiteralSet.TRUE, parameterizedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, stringType0.isResolved());
      assertEquals("string", stringType0.getDisplayName());
      assertEquals(true, stringType0.isStringValueType());
      assertEquals(false, stringType0.isNumberValueType());
      assertEquals(false, stringType0.isUnionType());
      assertEquals(false, stringType0.isNominalConstructor());
      assertEquals(false, stringType0.isOrdinaryFunction());
      assertEquals(false, stringType0.isEnumType());
      assertEquals(false, stringType0.isFunctionPrototypeType());
      assertEquals(true, stringType0.matchesStringContext());
      assertEquals(false, stringType0.isNoObjectType());
      assertEquals(BooleanLiteralSet.BOTH, stringType0.getPossibleToBooleanOutcomes());
      assertEquals(false, stringType0.isEnumElementType());
      assertEquals(true, stringType0.matchesNumberContext());
      assertEquals(false, stringType0.isBooleanValueType());
      assertEquals(true, stringType0.matchesObjectContext());
      assertEquals(false, stringType0.isAllType());
      assertEquals(false, stringType0.isNominalType());
      assertEquals(false, stringType0.isRecordType());
      assertEquals(false, stringType0.isCheckedUnknownType());
      assertEquals(false, stringType0.isTemplateType());
      assertEquals(false, stringType0.isInterface());
      assertEquals(false, stringType0.isNoResolvedType());
      assertEquals(false, stringType0.isVoidType());
      assertEquals(false, stringType0.isConstructor());
      assertEquals(false, stringType0.isNullType());
      assertEquals(false, stringType0.isFunctionType());
      assertEquals(false, stringType0.isNoType());
      assertEquals(false, jSTypeRegistry1.shouldTolerateUndefinedValues());
      assertNull(functionType1);
  }

  @Test
  public void test08()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      boolean boolean0 = false;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0, boolean0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      String string0 = "^i%";
      VoidType voidType0 = new VoidType(jSTypeRegistry0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, voidType0.isInterface());
      assertEquals(false, voidType0.isNoObjectType());
      assertEquals(false, voidType0.isStringValueType());
      assertEquals(false, voidType0.isTemplateType());
      assertEquals(false, voidType0.isUnionType());
      assertEquals(false, voidType0.isBooleanValueType());
      assertEquals(false, voidType0.isFunctionPrototypeType());
      assertEquals(false, voidType0.isNullType());
      assertEquals(BooleanLiteralSet.FALSE, voidType0.getPossibleToBooleanOutcomes());
      assertEquals(false, voidType0.isConstructor());
      assertEquals(false, voidType0.isEnumElementType());
      assertEquals(false, voidType0.matchesNumberContext());
      assertEquals(false, voidType0.isNominalConstructor());
      assertEquals(false, voidType0.matchesObjectContext());
      assertEquals(false, voidType0.isEnumType());
      assertEquals(false, voidType0.isFunctionType());
      assertEquals(false, voidType0.isOrdinaryFunction());
      assertEquals(false, voidType0.isRecordType());
      assertEquals(false, voidType0.isResolved());
      assertEquals(false, voidType0.isNoType());
      assertEquals(true, voidType0.matchesStringContext());
      assertEquals(false, voidType0.isNoResolvedType());
      assertEquals(false, voidType0.isAllType());
      assertEquals(false, voidType0.isNominalType());
      assertEquals(false, voidType0.isNumberValueType());
      assertEquals(true, voidType0.isVoidType());
      assertEquals("undefined", voidType0.getDisplayName());
      assertEquals(false, voidType0.isCheckedUnknownType());
      assertNotNull(voidType0);
      
      JSType[] jSTypeArray0 = new JSType[3];
      jSTypeArray0[2] = (JSType) voidType0;
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, jSTypeArray0[2].isFunctionType());
      assertEquals(false, jSTypeArray0[2].isNoResolvedType());
      assertEquals(false, jSTypeArray0[2].isInterface());
      assertEquals(false, jSTypeArray0[2].isNumberValueType());
      assertEquals(false, jSTypeArray0[2].isCheckedUnknownType());
      assertEquals(false, jSTypeArray0[2].isTemplateType());
      assertEquals(false, jSTypeArray0[2].isResolved());
      assertEquals(false, jSTypeArray0[2].isNoObjectType());
      assertEquals(false, jSTypeArray0[2].isNominalType());
      assertEquals(false, jSTypeArray0[2].isEnumElementType());
      assertEquals(false, jSTypeArray0[2].isBooleanValueType());
      assertEquals(false, jSTypeArray0[2].isNullType());
      assertEquals(false, jSTypeArray0[2].isConstructor());
      assertEquals(false, jSTypeArray0[2].isRecordType());
      assertEquals(false, jSTypeArray0[2].isNoType());
      assertEquals(false, jSTypeArray0[2].isNominalConstructor());
      assertEquals(false, jSTypeArray0[2].isUnionType());
      assertEquals(false, jSTypeArray0[2].isStringValueType());
      assertEquals(false, jSTypeArray0[2].isFunctionPrototypeType());
      assertEquals(false, jSTypeArray0[2].isEnumType());
      assertEquals(false, jSTypeArray0[2].isAllType());
      assertEquals(true, jSTypeArray0[2].isVoidType());
      assertEquals(false, jSTypeArray0[2].isOrdinaryFunction());
      assertEquals(false, voidType0.isInterface());
      assertEquals(false, voidType0.isNoObjectType());
      assertEquals(false, voidType0.isStringValueType());
      assertEquals(false, voidType0.isTemplateType());
      assertEquals(false, voidType0.isUnionType());
      assertEquals(false, voidType0.isBooleanValueType());
      assertEquals(false, voidType0.isFunctionPrototypeType());
      assertEquals(false, voidType0.isNullType());
      assertEquals(BooleanLiteralSet.FALSE, voidType0.getPossibleToBooleanOutcomes());
      assertEquals(false, voidType0.isConstructor());
      assertEquals(false, voidType0.isEnumElementType());
      assertEquals(false, voidType0.matchesNumberContext());
      assertEquals(false, voidType0.isNominalConstructor());
      assertEquals(false, voidType0.matchesObjectContext());
      assertEquals(false, voidType0.isEnumType());
      assertEquals(false, voidType0.isFunctionType());
      assertEquals(false, voidType0.isOrdinaryFunction());
      assertEquals(false, voidType0.isRecordType());
      assertEquals(false, voidType0.isResolved());
      assertEquals(false, voidType0.isNoType());
      assertEquals(true, voidType0.matchesStringContext());
      assertEquals(false, voidType0.isNoResolvedType());
      assertEquals(false, voidType0.isAllType());
      assertEquals(false, voidType0.isNominalType());
      assertEquals(false, voidType0.isNumberValueType());
      assertEquals(true, voidType0.isVoidType());
      assertEquals("undefined", voidType0.getDisplayName());
      assertEquals(false, voidType0.isCheckedUnknownType());
      assertNotNull(jSTypeArray0[2]);
      
      FunctionType functionType0 = jSTypeRegistry0.createFunctionTypeWithVarArgs((JSType) voidType0, jSTypeArray0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, functionType0.isNominalConstructor());
      assertEquals(false, functionType0.isUnionType());
      assertEquals(false, functionType0.isNullType());
      assertEquals(false, functionType0.isNoObjectType());
      assertEquals(false, functionType0.hasInstanceType());
      assertEquals(false, functionType0.isAllType());
      assertEquals(false, functionType0.isEnumType());
      assertEquals(false, functionType0.hasCachedValues());
      assertEquals(false, functionType0.isTemplateType());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertEquals(false, functionType0.isInterface());
      assertEquals(2147483647, functionType0.getMaxArguments());
      assertEquals(true, functionType0.isOrdinaryFunction());
      assertEquals(false, functionType0.isReturnTypeInferred());
      assertEquals(false, functionType0.isResolved());
      assertEquals(false, functionType0.isConstructor());
      assertEquals(false, functionType0.isNoType());
      assertEquals(false, functionType0.isNoResolvedType());
      assertEquals(false, functionType0.isVoidType());
      assertEquals(false, functionType0.isCheckedUnknownType());
      assertEquals(false, functionType0.isNominalType());
      assertEquals(true, functionType0.canBeCalled());
      assertEquals(false, functionType0.isStringValueType());
      assertEquals(true, functionType0.isFunctionType());
      assertEquals(false, functionType0.isNumberValueType());
      assertNull(functionType0.getTemplateTypeName());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, functionType0.isBooleanValueType());
      assertEquals(false, functionType0.isEnumElementType());
      assertEquals(false, functionType0.isFunctionPrototypeType());
      assertEquals(false, functionType0.isRecordType());
      assertEquals(false, voidType0.isInterface());
      assertEquals(false, voidType0.isNoObjectType());
      assertEquals(false, voidType0.isStringValueType());
      assertEquals(false, voidType0.isTemplateType());
      assertEquals(false, voidType0.isUnionType());
      assertEquals(false, voidType0.isBooleanValueType());
      assertEquals(false, voidType0.isFunctionPrototypeType());
      assertEquals(false, voidType0.isNullType());
      assertEquals(BooleanLiteralSet.FALSE, voidType0.getPossibleToBooleanOutcomes());
      assertEquals(false, voidType0.isConstructor());
      assertEquals(false, voidType0.isEnumElementType());
      assertEquals(false, voidType0.matchesNumberContext());
      assertEquals(false, voidType0.isNominalConstructor());
      assertEquals(false, voidType0.matchesObjectContext());
      assertEquals(false, voidType0.isEnumType());
      assertEquals(false, voidType0.isFunctionType());
      assertEquals(false, voidType0.isOrdinaryFunction());
      assertEquals(false, voidType0.isRecordType());
      assertEquals(false, voidType0.isResolved());
      assertEquals(false, voidType0.isNoType());
      assertEquals(true, voidType0.matchesStringContext());
      assertEquals(false, voidType0.isNoResolvedType());
      assertEquals(false, voidType0.isAllType());
      assertEquals(false, voidType0.isNominalType());
      assertEquals(false, voidType0.isNumberValueType());
      assertEquals(true, voidType0.isVoidType());
      assertEquals("undefined", voidType0.getDisplayName());
      assertEquals(false, voidType0.isCheckedUnknownType());
      assertNotNull(functionType0);
      
      IndexedType indexedType0 = new IndexedType(jSTypeRegistry0, functionType0, jSTypeArray0[0]);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, functionType0.isNominalConstructor());
      assertEquals(false, functionType0.isUnionType());
      assertEquals(false, functionType0.isNullType());
      assertEquals(false, functionType0.isNoObjectType());
      assertEquals(false, functionType0.hasInstanceType());
      assertEquals(false, functionType0.isAllType());
      assertEquals(false, functionType0.isEnumType());
      assertEquals(false, functionType0.hasCachedValues());
      assertEquals(false, functionType0.isTemplateType());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertEquals(false, functionType0.isInterface());
      assertEquals(2147483647, functionType0.getMaxArguments());
      assertEquals(true, functionType0.isOrdinaryFunction());
      assertEquals(false, functionType0.isReturnTypeInferred());
      assertEquals(false, functionType0.isResolved());
      assertEquals(false, functionType0.isConstructor());
      assertEquals(false, functionType0.isNoType());
      assertEquals(false, functionType0.isNoResolvedType());
      assertEquals(false, functionType0.isVoidType());
      assertEquals(false, functionType0.isCheckedUnknownType());
      assertEquals(false, functionType0.isNominalType());
      assertEquals(true, functionType0.canBeCalled());
      assertEquals(false, functionType0.isStringValueType());
      assertEquals(true, functionType0.isFunctionType());
      assertEquals(false, functionType0.isNumberValueType());
      assertNull(functionType0.getTemplateTypeName());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, functionType0.isBooleanValueType());
      assertEquals(false, functionType0.isEnumElementType());
      assertEquals(false, functionType0.isFunctionPrototypeType());
      assertEquals(false, functionType0.isRecordType());
      assertEquals(false, indexedType0.isEnumType());
      assertEquals(false, indexedType0.isNominalConstructor());
      assertEquals(false, indexedType0.isStringValueType());
      assertEquals(false, indexedType0.isResolved());
      assertEquals(false, indexedType0.isBooleanValueType());
      assertEquals(false, indexedType0.isUnionType());
      assertEquals(false, indexedType0.isEnumElementType());
      assertEquals(false, indexedType0.isVoidType());
      assertEquals(true, indexedType0.isFunctionType());
      assertEquals(BooleanLiteralSet.TRUE, indexedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, indexedType0.isFunctionPrototypeType());
      assertEquals(false, indexedType0.isNullType());
      assertEquals(false, indexedType0.isRecordType());
      assertEquals(false, indexedType0.isNumberValueType());
      assertEquals(false, indexedType0.isTemplateType());
      assertEquals(false, indexedType0.hasCachedValues());
      assertEquals(false, voidType0.isInterface());
      assertEquals(false, voidType0.isNoObjectType());
      assertEquals(false, voidType0.isStringValueType());
      assertEquals(false, voidType0.isTemplateType());
      assertEquals(false, voidType0.isUnionType());
      assertEquals(false, voidType0.isBooleanValueType());
      assertEquals(false, voidType0.isFunctionPrototypeType());
      assertEquals(false, voidType0.isNullType());
      assertEquals(BooleanLiteralSet.FALSE, voidType0.getPossibleToBooleanOutcomes());
      assertEquals(false, voidType0.isConstructor());
      assertEquals(false, voidType0.isEnumElementType());
      assertEquals(false, voidType0.matchesNumberContext());
      assertEquals(false, voidType0.isNominalConstructor());
      assertEquals(false, voidType0.matchesObjectContext());
      assertEquals(false, voidType0.isEnumType());
      assertEquals(false, voidType0.isFunctionType());
      assertEquals(false, voidType0.isOrdinaryFunction());
      assertEquals(false, voidType0.isRecordType());
      assertEquals(false, voidType0.isResolved());
      assertEquals(false, voidType0.isNoType());
      assertEquals(true, voidType0.matchesStringContext());
      assertEquals(false, voidType0.isNoResolvedType());
      assertEquals(false, voidType0.isAllType());
      assertEquals(false, voidType0.isNominalType());
      assertEquals(false, voidType0.isNumberValueType());
      assertEquals(true, voidType0.isVoidType());
      assertEquals("undefined", voidType0.getDisplayName());
      assertEquals(false, voidType0.isCheckedUnknownType());
      assertNotNull(indexedType0);
      
      JSType jSType0 = indexedType0.findPropertyType(string0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, functionType0.isNominalConstructor());
      assertEquals(false, functionType0.isUnionType());
      assertEquals(false, functionType0.isNullType());
      assertEquals(false, functionType0.isNoObjectType());
      assertEquals(false, functionType0.hasInstanceType());
      assertEquals(false, functionType0.isAllType());
      assertEquals(false, functionType0.isEnumType());
      assertEquals(false, functionType0.isTemplateType());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertEquals(false, functionType0.isInterface());
      assertEquals(2147483647, functionType0.getMaxArguments());
      assertEquals(true, functionType0.isOrdinaryFunction());
      assertEquals(false, functionType0.isReturnTypeInferred());
      assertEquals(false, functionType0.isResolved());
      assertEquals(false, functionType0.isConstructor());
      assertEquals(false, functionType0.isNoType());
      assertEquals(true, functionType0.hasCachedValues());
      assertEquals(false, functionType0.isNoResolvedType());
      assertEquals(false, functionType0.isVoidType());
      assertEquals(false, functionType0.isCheckedUnknownType());
      assertEquals(false, functionType0.isNominalType());
      assertEquals(true, functionType0.canBeCalled());
      assertEquals(false, functionType0.isStringValueType());
      assertEquals(true, functionType0.isFunctionType());
      assertEquals(false, functionType0.isNumberValueType());
      assertNull(functionType0.getTemplateTypeName());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, functionType0.isBooleanValueType());
      assertEquals(false, functionType0.isEnumElementType());
      assertEquals(false, functionType0.isFunctionPrototypeType());
      assertEquals(false, functionType0.isRecordType());
      assertEquals(false, indexedType0.isEnumType());
      assertEquals(false, indexedType0.isNominalConstructor());
      assertEquals(false, indexedType0.isStringValueType());
      assertEquals(false, indexedType0.isResolved());
      assertEquals(false, indexedType0.isBooleanValueType());
      assertEquals(false, indexedType0.isUnionType());
      assertEquals(false, indexedType0.isEnumElementType());
      assertEquals(false, indexedType0.isVoidType());
      assertEquals(true, indexedType0.isFunctionType());
      assertEquals(BooleanLiteralSet.TRUE, indexedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, indexedType0.isFunctionPrototypeType());
      assertEquals(false, indexedType0.isNullType());
      assertEquals(false, indexedType0.isRecordType());
      assertEquals(false, indexedType0.isNumberValueType());
      assertEquals(false, indexedType0.isTemplateType());
      assertEquals(false, indexedType0.hasCachedValues());
      assertEquals(false, voidType0.isInterface());
      assertEquals(false, voidType0.isNoObjectType());
      assertEquals(false, voidType0.isStringValueType());
      assertEquals(false, voidType0.isTemplateType());
      assertEquals(false, voidType0.isUnionType());
      assertEquals(false, voidType0.isBooleanValueType());
      assertEquals(false, voidType0.isFunctionPrototypeType());
      assertEquals(false, voidType0.isNullType());
      assertEquals(BooleanLiteralSet.FALSE, voidType0.getPossibleToBooleanOutcomes());
      assertEquals(false, voidType0.isConstructor());
      assertEquals(false, voidType0.isEnumElementType());
      assertEquals(false, voidType0.matchesNumberContext());
      assertEquals(false, voidType0.isNominalConstructor());
      assertEquals(false, voidType0.matchesObjectContext());
      assertEquals(false, voidType0.isEnumType());
      assertEquals(false, voidType0.isFunctionType());
      assertEquals(false, voidType0.isOrdinaryFunction());
      assertEquals(false, voidType0.isRecordType());
      assertEquals(false, voidType0.isResolved());
      assertEquals(false, voidType0.isNoType());
      assertEquals(true, voidType0.matchesStringContext());
      assertEquals(false, voidType0.isNoResolvedType());
      assertEquals(false, voidType0.isAllType());
      assertEquals(false, voidType0.isNominalType());
      assertEquals(false, voidType0.isNumberValueType());
      assertEquals(true, voidType0.isVoidType());
      assertEquals("undefined", voidType0.getDisplayName());
      assertEquals(false, voidType0.isCheckedUnknownType());
      assertNull(jSType0);
      
      ProxyObjectType proxyObjectType0 = new ProxyObjectType(jSTypeRegistry0, jSType0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, functionType0.isNominalConstructor());
      assertEquals(false, functionType0.isUnionType());
      assertEquals(false, functionType0.isNullType());
      assertEquals(false, functionType0.isNoObjectType());
      assertEquals(false, functionType0.hasInstanceType());
      assertEquals(false, functionType0.isAllType());
      assertEquals(false, functionType0.isEnumType());
      assertEquals(false, functionType0.isTemplateType());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertEquals(false, functionType0.isInterface());
      assertEquals(2147483647, functionType0.getMaxArguments());
      assertEquals(true, functionType0.isOrdinaryFunction());
      assertEquals(false, functionType0.isReturnTypeInferred());
      assertEquals(false, functionType0.isResolved());
      assertEquals(false, functionType0.isConstructor());
      assertEquals(false, functionType0.isNoType());
      assertEquals(true, functionType0.hasCachedValues());
      assertEquals(false, functionType0.isNoResolvedType());
      assertEquals(false, functionType0.isVoidType());
      assertEquals(false, functionType0.isCheckedUnknownType());
      assertEquals(false, functionType0.isNominalType());
      assertEquals(true, functionType0.canBeCalled());
      assertEquals(false, functionType0.isStringValueType());
      assertEquals(true, functionType0.isFunctionType());
      assertEquals(false, functionType0.isNumberValueType());
      assertNull(functionType0.getTemplateTypeName());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, functionType0.isBooleanValueType());
      assertEquals(false, functionType0.isEnumElementType());
      assertEquals(false, functionType0.isFunctionPrototypeType());
      assertEquals(false, functionType0.isRecordType());
      assertEquals(false, indexedType0.isEnumType());
      assertEquals(false, indexedType0.isNominalConstructor());
      assertEquals(false, indexedType0.isStringValueType());
      assertEquals(false, indexedType0.isResolved());
      assertEquals(false, indexedType0.isBooleanValueType());
      assertEquals(false, indexedType0.isUnionType());
      assertEquals(false, indexedType0.isEnumElementType());
      assertEquals(false, indexedType0.isVoidType());
      assertEquals(true, indexedType0.isFunctionType());
      assertEquals(BooleanLiteralSet.TRUE, indexedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, indexedType0.isFunctionPrototypeType());
      assertEquals(false, indexedType0.isNullType());
      assertEquals(false, indexedType0.isRecordType());
      assertEquals(false, indexedType0.isNumberValueType());
      assertEquals(false, indexedType0.isTemplateType());
      assertEquals(false, indexedType0.hasCachedValues());
      assertEquals(false, proxyObjectType0.isVoidType());
      assertEquals(false, proxyObjectType0.isBooleanValueType());
      assertEquals(false, proxyObjectType0.hasCachedValues());
      assertEquals(false, proxyObjectType0.isNullType());
      assertEquals(false, proxyObjectType0.isFunctionPrototypeType());
      assertEquals(BooleanLiteralSet.TRUE, proxyObjectType0.getPossibleToBooleanOutcomes());
      assertEquals(false, proxyObjectType0.isResolved());
      assertEquals(false, proxyObjectType0.isTemplateType());
      assertEquals(false, proxyObjectType0.isNumberValueType());
      assertEquals(false, proxyObjectType0.isStringValueType());
      assertEquals(false, voidType0.isInterface());
      assertEquals(false, voidType0.isNoObjectType());
      assertEquals(false, voidType0.isStringValueType());
      assertEquals(false, voidType0.isTemplateType());
      assertEquals(false, voidType0.isUnionType());
      assertEquals(false, voidType0.isBooleanValueType());
      assertEquals(false, voidType0.isFunctionPrototypeType());
      assertEquals(false, voidType0.isNullType());
      assertEquals(BooleanLiteralSet.FALSE, voidType0.getPossibleToBooleanOutcomes());
      assertEquals(false, voidType0.isConstructor());
      assertEquals(false, voidType0.isEnumElementType());
      assertEquals(false, voidType0.matchesNumberContext());
      assertEquals(false, voidType0.isNominalConstructor());
      assertEquals(false, voidType0.matchesObjectContext());
      assertEquals(false, voidType0.isEnumType());
      assertEquals(false, voidType0.isFunctionType());
      assertEquals(false, voidType0.isOrdinaryFunction());
      assertEquals(false, voidType0.isRecordType());
      assertEquals(false, voidType0.isResolved());
      assertEquals(false, voidType0.isNoType());
      assertEquals(true, voidType0.matchesStringContext());
      assertEquals(false, voidType0.isNoResolvedType());
      assertEquals(false, voidType0.isAllType());
      assertEquals(false, voidType0.isNominalType());
      assertEquals(false, voidType0.isNumberValueType());
      assertEquals(true, voidType0.isVoidType());
      assertEquals("undefined", voidType0.getDisplayName());
      assertEquals(false, voidType0.isCheckedUnknownType());
      assertNotNull(proxyObjectType0);
      
      Set<String> set0 = proxyObjectType0.getOwnPropertyNames();
      assertEquals(0, set0.size());
      assertEquals(true, set0.isEmpty());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, functionType0.isNominalConstructor());
      assertEquals(false, functionType0.isUnionType());
      assertEquals(false, functionType0.isNullType());
      assertEquals(false, functionType0.isNoObjectType());
      assertEquals(false, functionType0.hasInstanceType());
      assertEquals(false, functionType0.isAllType());
      assertEquals(false, functionType0.isEnumType());
      assertEquals(false, functionType0.isTemplateType());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertEquals(false, functionType0.isInterface());
      assertEquals(2147483647, functionType0.getMaxArguments());
      assertEquals(true, functionType0.isOrdinaryFunction());
      assertEquals(false, functionType0.isReturnTypeInferred());
      assertEquals(false, functionType0.isResolved());
      assertEquals(false, functionType0.isConstructor());
      assertEquals(false, functionType0.isNoType());
      assertEquals(true, functionType0.hasCachedValues());
      assertEquals(false, functionType0.isNoResolvedType());
      assertEquals(false, functionType0.isVoidType());
      assertEquals(false, functionType0.isCheckedUnknownType());
      assertEquals(false, functionType0.isNominalType());
      assertEquals(true, functionType0.canBeCalled());
      assertEquals(false, functionType0.isStringValueType());
      assertEquals(true, functionType0.isFunctionType());
      assertEquals(false, functionType0.isNumberValueType());
      assertNull(functionType0.getTemplateTypeName());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, functionType0.isBooleanValueType());
      assertEquals(false, functionType0.isEnumElementType());
      assertEquals(false, functionType0.isFunctionPrototypeType());
      assertEquals(false, functionType0.isRecordType());
      assertEquals(false, indexedType0.isEnumType());
      assertEquals(false, indexedType0.isNominalConstructor());
      assertEquals(false, indexedType0.isStringValueType());
      assertEquals(false, indexedType0.isResolved());
      assertEquals(false, indexedType0.isBooleanValueType());
      assertEquals(false, indexedType0.isUnionType());
      assertEquals(false, indexedType0.isEnumElementType());
      assertEquals(false, indexedType0.isVoidType());
      assertEquals(true, indexedType0.isFunctionType());
      assertEquals(BooleanLiteralSet.TRUE, indexedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, indexedType0.isFunctionPrototypeType());
      assertEquals(false, indexedType0.isNullType());
      assertEquals(false, indexedType0.isRecordType());
      assertEquals(false, indexedType0.isNumberValueType());
      assertEquals(false, indexedType0.isTemplateType());
      assertEquals(false, indexedType0.hasCachedValues());
      assertEquals(false, proxyObjectType0.isVoidType());
      assertEquals(false, proxyObjectType0.isBooleanValueType());
      assertEquals(false, proxyObjectType0.hasCachedValues());
      assertEquals(false, proxyObjectType0.isNullType());
      assertEquals(false, proxyObjectType0.isFunctionPrototypeType());
      assertEquals(BooleanLiteralSet.TRUE, proxyObjectType0.getPossibleToBooleanOutcomes());
      assertEquals(false, proxyObjectType0.isResolved());
      assertEquals(false, proxyObjectType0.isTemplateType());
      assertEquals(false, proxyObjectType0.isNumberValueType());
      assertEquals(false, proxyObjectType0.isStringValueType());
      assertEquals(false, voidType0.isInterface());
      assertEquals(false, voidType0.isNoObjectType());
      assertEquals(false, voidType0.isStringValueType());
      assertEquals(false, voidType0.isTemplateType());
      assertEquals(false, voidType0.isUnionType());
      assertEquals(false, voidType0.isBooleanValueType());
      assertEquals(false, voidType0.isFunctionPrototypeType());
      assertEquals(false, voidType0.isNullType());
      assertEquals(BooleanLiteralSet.FALSE, voidType0.getPossibleToBooleanOutcomes());
      assertEquals(false, voidType0.isConstructor());
      assertEquals(false, voidType0.isEnumElementType());
      assertEquals(false, voidType0.matchesNumberContext());
      assertEquals(false, voidType0.isNominalConstructor());
      assertEquals(false, voidType0.matchesObjectContext());
      assertEquals(false, voidType0.isEnumType());
      assertEquals(false, voidType0.isFunctionType());
      assertEquals(false, voidType0.isOrdinaryFunction());
      assertEquals(false, voidType0.isRecordType());
      assertEquals(false, voidType0.isResolved());
      assertEquals(false, voidType0.isNoType());
      assertEquals(true, voidType0.matchesStringContext());
      assertEquals(false, voidType0.isNoResolvedType());
      assertEquals(false, voidType0.isAllType());
      assertEquals(false, voidType0.isNominalType());
      assertEquals(false, voidType0.isNumberValueType());
      assertEquals(true, voidType0.isVoidType());
      assertEquals("undefined", voidType0.getDisplayName());
      assertEquals(false, voidType0.isCheckedUnknownType());
      assertNotNull(set0);
  }

  @Test
  public void test09()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      boolean boolean0 = false;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0, boolean0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      String string0 = "4cAD-j0Rv`*G2*";
      TemplateType templateType0 = new TemplateType(jSTypeRegistry0, string0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, templateType0.isNumberValueType());
      assertEquals(false, templateType0.isFunctionPrototypeType());
      assertEquals(false, templateType0.isFunctionType());
      assertEquals(false, templateType0.isUnionType());
      assertEquals(false, templateType0.isEnumElementType());
      assertEquals(false, templateType0.isRecordType());
      assertEquals("4cAD-j0Rv`*G2*", templateType0.getReferenceName());
      assertEquals(false, templateType0.isResolved());
      assertEquals(false, templateType0.isBooleanValueType());
      assertEquals(false, templateType0.isStringValueType());
      assertEquals(false, templateType0.hasCachedValues());
      assertEquals(false, templateType0.isVoidType());
      assertEquals(BooleanLiteralSet.TRUE, templateType0.getPossibleToBooleanOutcomes());
      assertEquals(false, templateType0.isNominalConstructor());
      assertEquals(false, templateType0.isEnumType());
      assertEquals(false, templateType0.isNullType());
      assertEquals(true, templateType0.isTemplateType());
      assertNotNull(templateType0);
      
      Set<String> set0 = templateType0.getOwnPropertyNames();
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(0, set0.size());
      assertEquals(true, set0.isEmpty());
      assertEquals(false, templateType0.isNumberValueType());
      assertEquals(false, templateType0.isFunctionPrototypeType());
      assertEquals(false, templateType0.isFunctionType());
      assertEquals(false, templateType0.isUnionType());
      assertEquals(false, templateType0.isEnumElementType());
      assertEquals(false, templateType0.isRecordType());
      assertEquals("4cAD-j0Rv`*G2*", templateType0.getReferenceName());
      assertEquals(false, templateType0.isResolved());
      assertEquals(false, templateType0.isBooleanValueType());
      assertEquals(false, templateType0.isStringValueType());
      assertEquals(false, templateType0.hasCachedValues());
      assertEquals(false, templateType0.isVoidType());
      assertEquals(BooleanLiteralSet.TRUE, templateType0.getPossibleToBooleanOutcomes());
      assertEquals(false, templateType0.isNominalConstructor());
      assertEquals(false, templateType0.isEnumType());
      assertEquals(false, templateType0.isNullType());
      assertEquals(true, templateType0.isTemplateType());
      assertNotNull(set0);
  }

  @Test
  public void test10()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      boolean boolean0 = true;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0, boolean0);
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      VoidType voidType0 = new VoidType(jSTypeRegistry0);
      assertEquals(false, voidType0.isFunctionType());
      assertEquals(BooleanLiteralSet.FALSE, voidType0.getPossibleToBooleanOutcomes());
      assertEquals(true, voidType0.matchesStringContext());
      assertEquals(false, voidType0.isNullType());
      assertEquals(false, voidType0.isRecordType());
      assertEquals(false, voidType0.isNoResolvedType());
      assertEquals("undefined", voidType0.getDisplayName());
      assertEquals(false, voidType0.isNominalConstructor());
      assertEquals(false, voidType0.isAllType());
      assertEquals(false, voidType0.matchesObjectContext());
      assertEquals(false, voidType0.isCheckedUnknownType());
      assertEquals(false, voidType0.isResolved());
      assertEquals(false, voidType0.isNominalType());
      assertEquals(false, voidType0.isStringValueType());
      assertEquals(false, voidType0.isNumberValueType());
      assertEquals(false, voidType0.isEnumType());
      assertEquals(false, voidType0.isNoType());
      assertEquals(false, voidType0.isOrdinaryFunction());
      assertEquals(false, voidType0.isEnumElementType());
      assertEquals(false, voidType0.isUnionType());
      assertEquals(false, voidType0.isFunctionPrototypeType());
      assertEquals(true, voidType0.isVoidType());
      assertEquals(false, voidType0.isTemplateType());
      assertEquals(false, voidType0.isInterface());
      assertEquals(false, voidType0.matchesNumberContext());
      assertEquals(false, voidType0.isNoObjectType());
      assertEquals(false, voidType0.isConstructor());
      assertEquals(false, voidType0.isBooleanValueType());
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(voidType0);
      
      String string0 = "!TOR}Z3";
      UnknownType unknownType0 = new UnknownType(jSTypeRegistry0, boolean0);
      assertEquals(false, unknownType0.isNullType());
      assertEquals(false, unknownType0.isInterface());
      assertEquals(false, unknownType0.isStringValueType());
      assertEquals(false, unknownType0.isBooleanValueType());
      assertEquals(true, unknownType0.matchesStringContext());
      assertEquals(false, unknownType0.isOrdinaryFunction());
      assertEquals(false, unknownType0.isRecordType());
      assertEquals(true, unknownType0.isCheckedUnknownType());
      assertEquals(false, unknownType0.isFunctionType());
      assertEquals(true, unknownType0.isUnknownType());
      assertEquals(false, unknownType0.isNominalType());
      assertEquals(false, unknownType0.isNominalConstructor());
      assertEquals(false, unknownType0.isNativeObjectType());
      assertEquals(false, unknownType0.isNoObjectType());
      assertEquals(false, unknownType0.isVoidType());
      assertEquals(false, unknownType0.isEnumType());
      assertEquals(2147483647, unknownType0.getPropertiesCount());
      assertEquals(true, unknownType0.matchesNumberContext());
      assertEquals(true, unknownType0.hasDisplayName());
      assertEquals("??", unknownType0.getReferenceName());
      assertEquals(false, unknownType0.isAllType());
      assertEquals(false, unknownType0.isTemplateType());
      assertEquals(false, unknownType0.isEnumElementType());
      assertEquals(false, unknownType0.isFunctionPrototypeType());
      assertEquals("Unknown", unknownType0.getDisplayName());
      assertEquals(false, unknownType0.isUnionType());
      assertEquals(true, unknownType0.canBeCalled());
      assertEquals(true, unknownType0.isNullable());
      assertEquals(false, unknownType0.hasCachedValues());
      assertEquals(false, unknownType0.isConstructor());
      assertEquals(false, unknownType0.isNoResolvedType());
      assertEquals(false, unknownType0.hasReferenceName());
      assertEquals(false, unknownType0.isNoType());
      assertEquals(false, unknownType0.isResolved());
      assertEquals(false, unknownType0.isNumberValueType());
      assertEquals(BooleanLiteralSet.BOTH, unknownType0.getPossibleToBooleanOutcomes());
      assertEquals(true, unknownType0.matchesObjectContext());
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(unknownType0);
      
      FunctionType functionType0 = unknownType0.getOwnerFunction();
      assertEquals(false, unknownType0.isNullType());
      assertEquals(false, unknownType0.isInterface());
      assertEquals(false, unknownType0.isStringValueType());
      assertEquals(false, unknownType0.isBooleanValueType());
      assertEquals(true, unknownType0.matchesStringContext());
      assertEquals(false, unknownType0.isOrdinaryFunction());
      assertEquals(false, unknownType0.isRecordType());
      assertEquals(true, unknownType0.isCheckedUnknownType());
      assertEquals(false, unknownType0.isFunctionType());
      assertEquals(true, unknownType0.isUnknownType());
      assertEquals(false, unknownType0.isNominalType());
      assertEquals(false, unknownType0.isNominalConstructor());
      assertEquals(false, unknownType0.isNativeObjectType());
      assertEquals(false, unknownType0.isNoObjectType());
      assertEquals(false, unknownType0.isVoidType());
      assertEquals(false, unknownType0.isEnumType());
      assertEquals(2147483647, unknownType0.getPropertiesCount());
      assertEquals(true, unknownType0.matchesNumberContext());
      assertEquals(true, unknownType0.hasDisplayName());
      assertEquals("??", unknownType0.getReferenceName());
      assertEquals(false, unknownType0.isAllType());
      assertEquals(false, unknownType0.isTemplateType());
      assertEquals(false, unknownType0.isEnumElementType());
      assertEquals(false, unknownType0.isFunctionPrototypeType());
      assertEquals("Unknown", unknownType0.getDisplayName());
      assertEquals(false, unknownType0.isUnionType());
      assertEquals(true, unknownType0.canBeCalled());
      assertEquals(true, unknownType0.isNullable());
      assertEquals(false, unknownType0.hasCachedValues());
      assertEquals(false, unknownType0.isConstructor());
      assertEquals(false, unknownType0.isNoResolvedType());
      assertEquals(false, unknownType0.hasReferenceName());
      assertEquals(false, unknownType0.isNoType());
      assertEquals(false, unknownType0.isResolved());
      assertEquals(false, unknownType0.isNumberValueType());
      assertEquals(BooleanLiteralSet.BOTH, unknownType0.getPossibleToBooleanOutcomes());
      assertEquals(true, unknownType0.matchesObjectContext());
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNull(functionType0);
      
      ParameterizedType parameterizedType0 = new ParameterizedType(jSTypeRegistry0, functionType0, voidType0);
      assertEquals(false, voidType0.isFunctionType());
      assertEquals(BooleanLiteralSet.FALSE, voidType0.getPossibleToBooleanOutcomes());
      assertEquals(true, voidType0.matchesStringContext());
      assertEquals(false, voidType0.isNullType());
      assertEquals(false, voidType0.isRecordType());
      assertEquals(false, voidType0.isNoResolvedType());
      assertEquals("undefined", voidType0.getDisplayName());
      assertEquals(false, voidType0.isNominalConstructor());
      assertEquals(false, voidType0.isAllType());
      assertEquals(false, voidType0.matchesObjectContext());
      assertEquals(false, voidType0.isCheckedUnknownType());
      assertEquals(false, voidType0.isResolved());
      assertEquals(false, voidType0.isNominalType());
      assertEquals(false, voidType0.isStringValueType());
      assertEquals(false, voidType0.isNumberValueType());
      assertEquals(false, voidType0.isEnumType());
      assertEquals(false, voidType0.isNoType());
      assertEquals(false, voidType0.isOrdinaryFunction());
      assertEquals(false, voidType0.isEnumElementType());
      assertEquals(false, voidType0.isUnionType());
      assertEquals(false, voidType0.isFunctionPrototypeType());
      assertEquals(true, voidType0.isVoidType());
      assertEquals(false, voidType0.isTemplateType());
      assertEquals(false, voidType0.isInterface());
      assertEquals(false, voidType0.matchesNumberContext());
      assertEquals(false, voidType0.isNoObjectType());
      assertEquals(false, voidType0.isConstructor());
      assertEquals(false, voidType0.isBooleanValueType());
      assertEquals(false, parameterizedType0.isBooleanValueType());
      assertEquals(BooleanLiteralSet.TRUE, parameterizedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, parameterizedType0.isVoidType());
      assertEquals(false, parameterizedType0.isFunctionPrototypeType());
      assertEquals(false, parameterizedType0.isTemplateType());
      assertEquals(false, parameterizedType0.isStringValueType());
      assertEquals(false, parameterizedType0.isResolved());
      assertEquals(false, parameterizedType0.isNullType());
      assertEquals(false, parameterizedType0.isNumberValueType());
      assertEquals(false, parameterizedType0.hasCachedValues());
      assertEquals(false, unknownType0.isNullType());
      assertEquals(false, unknownType0.isInterface());
      assertEquals(false, unknownType0.isStringValueType());
      assertEquals(false, unknownType0.isBooleanValueType());
      assertEquals(true, unknownType0.matchesStringContext());
      assertEquals(false, unknownType0.isOrdinaryFunction());
      assertEquals(false, unknownType0.isRecordType());
      assertEquals(true, unknownType0.isCheckedUnknownType());
      assertEquals(false, unknownType0.isFunctionType());
      assertEquals(true, unknownType0.isUnknownType());
      assertEquals(false, unknownType0.isNominalType());
      assertEquals(false, unknownType0.isNominalConstructor());
      assertEquals(false, unknownType0.isNativeObjectType());
      assertEquals(false, unknownType0.isNoObjectType());
      assertEquals(false, unknownType0.isVoidType());
      assertEquals(false, unknownType0.isEnumType());
      assertEquals(2147483647, unknownType0.getPropertiesCount());
      assertEquals(true, unknownType0.matchesNumberContext());
      assertEquals(true, unknownType0.hasDisplayName());
      assertEquals("??", unknownType0.getReferenceName());
      assertEquals(false, unknownType0.isAllType());
      assertEquals(false, unknownType0.isTemplateType());
      assertEquals(false, unknownType0.isEnumElementType());
      assertEquals(false, unknownType0.isFunctionPrototypeType());
      assertEquals("Unknown", unknownType0.getDisplayName());
      assertEquals(false, unknownType0.isUnionType());
      assertEquals(true, unknownType0.canBeCalled());
      assertEquals(true, unknownType0.isNullable());
      assertEquals(false, unknownType0.hasCachedValues());
      assertEquals(false, unknownType0.isConstructor());
      assertEquals(false, unknownType0.isNoResolvedType());
      assertEquals(false, unknownType0.hasReferenceName());
      assertEquals(false, unknownType0.isNoType());
      assertEquals(false, unknownType0.isResolved());
      assertEquals(false, unknownType0.isNumberValueType());
      assertEquals(BooleanLiteralSet.BOTH, unknownType0.getPossibleToBooleanOutcomes());
      assertEquals(true, unknownType0.matchesObjectContext());
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(parameterizedType0);
      
      boolean boolean1 = parameterizedType0.hasOwnDeclaredProperty(string0);
      assertFalse(boolean1);
      assertEquals(false, voidType0.isFunctionType());
      assertEquals(BooleanLiteralSet.FALSE, voidType0.getPossibleToBooleanOutcomes());
      assertEquals(true, voidType0.matchesStringContext());
      assertEquals(false, voidType0.isNullType());
      assertEquals(false, voidType0.isRecordType());
      assertEquals(false, voidType0.isNoResolvedType());
      assertEquals("undefined", voidType0.getDisplayName());
      assertEquals(false, voidType0.isNominalConstructor());
      assertEquals(false, voidType0.isAllType());
      assertEquals(false, voidType0.matchesObjectContext());
      assertEquals(false, voidType0.isCheckedUnknownType());
      assertEquals(false, voidType0.isResolved());
      assertEquals(false, voidType0.isNominalType());
      assertEquals(false, voidType0.isStringValueType());
      assertEquals(false, voidType0.isNumberValueType());
      assertEquals(false, voidType0.isEnumType());
      assertEquals(false, voidType0.isNoType());
      assertEquals(false, voidType0.isOrdinaryFunction());
      assertEquals(false, voidType0.isEnumElementType());
      assertEquals(false, voidType0.isUnionType());
      assertEquals(false, voidType0.isFunctionPrototypeType());
      assertEquals(true, voidType0.isVoidType());
      assertEquals(false, voidType0.isTemplateType());
      assertEquals(false, voidType0.isInterface());
      assertEquals(false, voidType0.matchesNumberContext());
      assertEquals(false, voidType0.isNoObjectType());
      assertEquals(false, voidType0.isConstructor());
      assertEquals(false, voidType0.isBooleanValueType());
      assertEquals(false, parameterizedType0.isBooleanValueType());
      assertEquals(BooleanLiteralSet.TRUE, parameterizedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, parameterizedType0.isVoidType());
      assertEquals(false, parameterizedType0.isFunctionPrototypeType());
      assertEquals(false, parameterizedType0.isTemplateType());
      assertEquals(false, parameterizedType0.isStringValueType());
      assertEquals(false, parameterizedType0.isResolved());
      assertEquals(false, parameterizedType0.isNullType());
      assertEquals(false, parameterizedType0.isNumberValueType());
      assertEquals(false, parameterizedType0.hasCachedValues());
      assertEquals(false, unknownType0.isNullType());
      assertEquals(false, unknownType0.isInterface());
      assertEquals(false, unknownType0.isStringValueType());
      assertEquals(false, unknownType0.isBooleanValueType());
      assertEquals(true, unknownType0.matchesStringContext());
      assertEquals(false, unknownType0.isOrdinaryFunction());
      assertEquals(false, unknownType0.isRecordType());
      assertEquals(true, unknownType0.isCheckedUnknownType());
      assertEquals(false, unknownType0.isFunctionType());
      assertEquals(true, unknownType0.isUnknownType());
      assertEquals(false, unknownType0.isNominalType());
      assertEquals(false, unknownType0.isNominalConstructor());
      assertEquals(false, unknownType0.isNativeObjectType());
      assertEquals(false, unknownType0.isNoObjectType());
      assertEquals(false, unknownType0.isVoidType());
      assertEquals(false, unknownType0.isEnumType());
      assertEquals(2147483647, unknownType0.getPropertiesCount());
      assertEquals(true, unknownType0.matchesNumberContext());
      assertEquals(true, unknownType0.hasDisplayName());
      assertEquals("??", unknownType0.getReferenceName());
      assertEquals(false, unknownType0.isAllType());
      assertEquals(false, unknownType0.isTemplateType());
      assertEquals(false, unknownType0.isEnumElementType());
      assertEquals(false, unknownType0.isFunctionPrototypeType());
      assertEquals("Unknown", unknownType0.getDisplayName());
      assertEquals(false, unknownType0.isUnionType());
      assertEquals(true, unknownType0.canBeCalled());
      assertEquals(true, unknownType0.isNullable());
      assertEquals(false, unknownType0.hasCachedValues());
      assertEquals(false, unknownType0.isConstructor());
      assertEquals(false, unknownType0.isNoResolvedType());
      assertEquals(false, unknownType0.hasReferenceName());
      assertEquals(false, unknownType0.isNoType());
      assertEquals(false, unknownType0.isResolved());
      assertEquals(false, unknownType0.isNumberValueType());
      assertEquals(BooleanLiteralSet.BOTH, unknownType0.getPossibleToBooleanOutcomes());
      assertEquals(true, unknownType0.matchesObjectContext());
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(boolean0 == boolean1);
      assertFalse(boolean1 == boolean0);
  }

  @Test
  public void test11()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      boolean boolean0 = false;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0, boolean0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      String string0 = "^i%";
      StringType stringType0 = new StringType(jSTypeRegistry0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, stringType0.isFunctionType());
      assertEquals(BooleanLiteralSet.BOTH, stringType0.getPossibleToBooleanOutcomes());
      assertEquals(false, stringType0.isOrdinaryFunction());
      assertEquals(false, stringType0.isBooleanValueType());
      assertEquals(false, stringType0.isEnumType());
      assertEquals(false, stringType0.isNominalConstructor());
      assertEquals(false, stringType0.isNoType());
      assertEquals(false, stringType0.isInterface());
      assertEquals(true, stringType0.isStringValueType());
      assertEquals(false, stringType0.isResolved());
      assertEquals(false, stringType0.isNumberValueType());
      assertEquals(false, stringType0.isEnumElementType());
      assertEquals("string", stringType0.getDisplayName());
      assertEquals(true, stringType0.matchesObjectContext());
      assertEquals(false, stringType0.isConstructor());
      assertEquals(false, stringType0.isTemplateType());
      assertEquals(false, stringType0.isCheckedUnknownType());
      assertEquals(false, stringType0.isFunctionPrototypeType());
      assertEquals(false, stringType0.isUnionType());
      assertEquals(false, stringType0.isNominalType());
      assertEquals(false, stringType0.isNoResolvedType());
      assertEquals(false, stringType0.isVoidType());
      assertEquals(true, stringType0.matchesNumberContext());
      assertEquals(false, stringType0.isAllType());
      assertEquals(false, stringType0.isRecordType());
      assertEquals(true, stringType0.matchesStringContext());
      assertEquals(false, stringType0.isNullType());
      assertEquals(false, stringType0.isNoObjectType());
      assertNotNull(stringType0);
      
      EnumType enumType0 = stringType0.toMaybeEnumType();
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, stringType0.isFunctionType());
      assertEquals(BooleanLiteralSet.BOTH, stringType0.getPossibleToBooleanOutcomes());
      assertEquals(false, stringType0.isOrdinaryFunction());
      assertEquals(false, stringType0.isBooleanValueType());
      assertEquals(false, stringType0.isEnumType());
      assertEquals(false, stringType0.isNominalConstructor());
      assertEquals(false, stringType0.isNoType());
      assertEquals(false, stringType0.isInterface());
      assertEquals(true, stringType0.isStringValueType());
      assertEquals(false, stringType0.isResolved());
      assertEquals(false, stringType0.isNumberValueType());
      assertEquals(false, stringType0.isEnumElementType());
      assertEquals("string", stringType0.getDisplayName());
      assertEquals(true, stringType0.matchesObjectContext());
      assertEquals(false, stringType0.isConstructor());
      assertEquals(false, stringType0.isTemplateType());
      assertEquals(false, stringType0.isCheckedUnknownType());
      assertEquals(false, stringType0.isFunctionPrototypeType());
      assertEquals(false, stringType0.isUnionType());
      assertEquals(false, stringType0.isNominalType());
      assertEquals(false, stringType0.isNoResolvedType());
      assertEquals(false, stringType0.isVoidType());
      assertEquals(true, stringType0.matchesNumberContext());
      assertEquals(false, stringType0.isAllType());
      assertEquals(false, stringType0.isRecordType());
      assertEquals(true, stringType0.matchesStringContext());
      assertEquals(false, stringType0.isNullType());
      assertEquals(false, stringType0.isNoObjectType());
      assertNull(enumType0);
      
      IndexedType indexedType0 = new IndexedType(jSTypeRegistry0, enumType0, stringType0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, stringType0.isFunctionType());
      assertEquals(BooleanLiteralSet.BOTH, stringType0.getPossibleToBooleanOutcomes());
      assertEquals(false, stringType0.isOrdinaryFunction());
      assertEquals(false, stringType0.isBooleanValueType());
      assertEquals(false, stringType0.isEnumType());
      assertEquals(false, stringType0.isNominalConstructor());
      assertEquals(false, stringType0.isNoType());
      assertEquals(false, stringType0.isInterface());
      assertEquals(true, stringType0.isStringValueType());
      assertEquals(false, stringType0.isResolved());
      assertEquals(false, stringType0.isNumberValueType());
      assertEquals(false, stringType0.isEnumElementType());
      assertEquals("string", stringType0.getDisplayName());
      assertEquals(true, stringType0.matchesObjectContext());
      assertEquals(false, stringType0.isConstructor());
      assertEquals(false, stringType0.isTemplateType());
      assertEquals(false, stringType0.isCheckedUnknownType());
      assertEquals(false, stringType0.isFunctionPrototypeType());
      assertEquals(false, stringType0.isUnionType());
      assertEquals(false, stringType0.isNominalType());
      assertEquals(false, stringType0.isNoResolvedType());
      assertEquals(false, stringType0.isVoidType());
      assertEquals(true, stringType0.matchesNumberContext());
      assertEquals(false, stringType0.isAllType());
      assertEquals(false, stringType0.isRecordType());
      assertEquals(true, stringType0.matchesStringContext());
      assertEquals(false, stringType0.isNullType());
      assertEquals(false, stringType0.isNoObjectType());
      assertEquals(false, indexedType0.isTemplateType());
      assertEquals(false, indexedType0.isStringValueType());
      assertEquals(false, indexedType0.isNullType());
      assertEquals(false, indexedType0.isBooleanValueType());
      assertEquals(BooleanLiteralSet.TRUE, indexedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, indexedType0.isFunctionPrototypeType());
      assertEquals(false, indexedType0.isNumberValueType());
      assertEquals(false, indexedType0.hasCachedValues());
      assertEquals(false, indexedType0.isVoidType());
      assertEquals(false, indexedType0.isResolved());
      assertNotNull(indexedType0);
      
      boolean boolean1 = indexedType0.hasProperty(string0);
      assertFalse(boolean1);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, stringType0.isFunctionType());
      assertEquals(BooleanLiteralSet.BOTH, stringType0.getPossibleToBooleanOutcomes());
      assertEquals(false, stringType0.isOrdinaryFunction());
      assertEquals(false, stringType0.isBooleanValueType());
      assertEquals(false, stringType0.isEnumType());
      assertEquals(false, stringType0.isNominalConstructor());
      assertEquals(false, stringType0.isNoType());
      assertEquals(false, stringType0.isInterface());
      assertEquals(true, stringType0.isStringValueType());
      assertEquals(false, stringType0.isResolved());
      assertEquals(false, stringType0.isNumberValueType());
      assertEquals(false, stringType0.isEnumElementType());
      assertEquals("string", stringType0.getDisplayName());
      assertEquals(true, stringType0.matchesObjectContext());
      assertEquals(false, stringType0.isConstructor());
      assertEquals(false, stringType0.isTemplateType());
      assertEquals(false, stringType0.isCheckedUnknownType());
      assertEquals(false, stringType0.isFunctionPrototypeType());
      assertEquals(false, stringType0.isUnionType());
      assertEquals(false, stringType0.isNominalType());
      assertEquals(false, stringType0.isNoResolvedType());
      assertEquals(false, stringType0.isVoidType());
      assertEquals(true, stringType0.matchesNumberContext());
      assertEquals(false, stringType0.isAllType());
      assertEquals(false, stringType0.isRecordType());
      assertEquals(true, stringType0.matchesStringContext());
      assertEquals(false, stringType0.isNullType());
      assertEquals(false, stringType0.isNoObjectType());
      assertEquals(false, indexedType0.isTemplateType());
      assertEquals(false, indexedType0.isStringValueType());
      assertEquals(false, indexedType0.isNullType());
      assertEquals(false, indexedType0.isBooleanValueType());
      assertEquals(BooleanLiteralSet.TRUE, indexedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, indexedType0.isFunctionPrototypeType());
      assertEquals(false, indexedType0.isNumberValueType());
      assertEquals(false, indexedType0.hasCachedValues());
      assertEquals(false, indexedType0.isVoidType());
      assertEquals(false, indexedType0.isResolved());
      assertTrue(boolean0 == boolean1);
      assertTrue(boolean1 == boolean0);
  }

  @Test
  public void test12()  throws Throwable  {
      String string0 = "g>";
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      TemplateType templateType0 = new TemplateType(jSTypeRegistry0, string0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, templateType0.isFunctionType());
      assertEquals(false, templateType0.isNullType());
      assertEquals(false, templateType0.isNumberValueType());
      assertEquals(BooleanLiteralSet.TRUE, templateType0.getPossibleToBooleanOutcomes());
      assertEquals(false, templateType0.isResolved());
      assertEquals(false, templateType0.isNominalConstructor());
      assertEquals(true, templateType0.isTemplateType());
      assertEquals(false, templateType0.isRecordType());
      assertEquals("g>", templateType0.getReferenceName());
      assertEquals(false, templateType0.isBooleanValueType());
      assertEquals(false, templateType0.isUnionType());
      assertEquals(false, templateType0.isStringValueType());
      assertEquals(false, templateType0.isEnumElementType());
      assertEquals(false, templateType0.isVoidType());
      assertEquals(false, templateType0.hasCachedValues());
      assertEquals(false, templateType0.isEnumType());
      assertEquals(false, templateType0.isFunctionPrototypeType());
      assertNotNull(templateType0);
      
      boolean boolean0 = templateType0.hasProperty(string0);
      assertTrue(boolean0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, templateType0.isFunctionType());
      assertEquals(false, templateType0.isNullType());
      assertEquals(false, templateType0.isNumberValueType());
      assertEquals(BooleanLiteralSet.TRUE, templateType0.getPossibleToBooleanOutcomes());
      assertEquals(false, templateType0.isResolved());
      assertEquals(false, templateType0.isNominalConstructor());
      assertEquals(true, templateType0.isTemplateType());
      assertEquals(false, templateType0.isRecordType());
      assertEquals("g>", templateType0.getReferenceName());
      assertEquals(false, templateType0.isBooleanValueType());
      assertEquals(false, templateType0.isUnionType());
      assertEquals(false, templateType0.isStringValueType());
      assertEquals(false, templateType0.isEnumElementType());
      assertEquals(false, templateType0.isVoidType());
      assertEquals(false, templateType0.hasCachedValues());
      assertEquals(false, templateType0.isEnumType());
      assertEquals(false, templateType0.isFunctionPrototypeType());
  }

  @Test
  public void test13()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      boolean boolean0 = true;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0, boolean0);
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      String string0 = "Z4}D-jR(`*2eS";
      TemplateType templateType0 = new TemplateType(jSTypeRegistry0, string0);
      assertEquals(false, templateType0.isBooleanValueType());
      assertEquals(false, templateType0.isNullType());
      assertEquals(false, templateType0.isEnumType());
      assertEquals(false, templateType0.isResolved());
      assertEquals(false, templateType0.isStringValueType());
      assertEquals(false, templateType0.isEnumElementType());
      assertEquals(false, templateType0.isNominalConstructor());
      assertEquals(false, templateType0.isVoidType());
      assertEquals("Z4}D-jR(`*2eS", templateType0.getReferenceName());
      assertEquals(false, templateType0.isFunctionType());
      assertEquals(false, templateType0.isNumberValueType());
      assertEquals(false, templateType0.hasCachedValues());
      assertEquals(false, templateType0.isUnionType());
      assertEquals(false, templateType0.isFunctionPrototypeType());
      assertEquals(false, templateType0.isRecordType());
      assertEquals(BooleanLiteralSet.TRUE, templateType0.getPossibleToBooleanOutcomes());
      assertEquals(true, templateType0.isTemplateType());
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(templateType0);
      
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      assertEquals(false, noResolvedType0.isResolved());
      assertEquals(2147483647, noResolvedType0.getPropertiesCount());
      assertEquals(false, noResolvedType0.hasCachedValues());
      assertEquals(2147483647, noResolvedType0.getMaxArguments());
      assertEquals(false, noResolvedType0.isNoObjectType());
      assertEquals(false, noResolvedType0.isOrdinaryFunction());
      assertEquals(false, noResolvedType0.isNominalType());
      assertEquals(true, noResolvedType0.isNullable());
      assertEquals(false, noResolvedType0.isBooleanValueType());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertEquals(false, noResolvedType0.isStringValueType());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noResolvedType0.isNullType());
      assertEquals(false, noResolvedType0.isTemplateType());
      assertEquals(false, noResolvedType0.isVoidType());
      assertEquals(false, noResolvedType0.isInterface());
      assertEquals(false, noResolvedType0.isCheckedUnknownType());
      assertEquals(false, noResolvedType0.isNominalConstructor());
      assertEquals(false, noResolvedType0.isNumberValueType());
      assertEquals(true, noResolvedType0.canBeCalled());
      assertEquals(false, noResolvedType0.isAllType());
      assertEquals(false, noResolvedType0.isReturnTypeInferred());
      assertEquals(true, noResolvedType0.matchesObjectContext());
      assertEquals(true, noResolvedType0.hasInstanceType());
      assertEquals(false, noResolvedType0.isFunctionType());
      assertNull(noResolvedType0.getReferenceName());
      assertNull(noResolvedType0.getTemplateTypeName());
      assertEquals(false, noResolvedType0.isFunctionPrototypeType());
      assertEquals(true, noResolvedType0.matchesNumberContext());
      assertEquals(false, noResolvedType0.isRecordType());
      assertEquals(true, noResolvedType0.isConstructor());
      assertEquals(true, noResolvedType0.matchesStringContext());
      assertEquals(false, noResolvedType0.isEnumElementType());
      assertEquals(false, noResolvedType0.isUnionType());
      assertEquals(false, noResolvedType0.isEnumType());
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(noResolvedType0);
      
      JSDocInfo jSDocInfo0 = noResolvedType0.getJSDocInfo();
      assertEquals(false, noResolvedType0.isResolved());
      assertEquals(2147483647, noResolvedType0.getPropertiesCount());
      assertEquals(false, noResolvedType0.hasCachedValues());
      assertEquals(2147483647, noResolvedType0.getMaxArguments());
      assertEquals(false, noResolvedType0.isNoObjectType());
      assertEquals(false, noResolvedType0.isOrdinaryFunction());
      assertEquals(false, noResolvedType0.isNominalType());
      assertEquals(true, noResolvedType0.isNullable());
      assertEquals(false, noResolvedType0.isBooleanValueType());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertEquals(false, noResolvedType0.isStringValueType());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noResolvedType0.isNullType());
      assertEquals(false, noResolvedType0.isTemplateType());
      assertEquals(false, noResolvedType0.isVoidType());
      assertEquals(false, noResolvedType0.isInterface());
      assertEquals(false, noResolvedType0.isCheckedUnknownType());
      assertEquals(false, noResolvedType0.isNominalConstructor());
      assertEquals(false, noResolvedType0.isNumberValueType());
      assertEquals(true, noResolvedType0.canBeCalled());
      assertEquals(false, noResolvedType0.isAllType());
      assertEquals(false, noResolvedType0.isReturnTypeInferred());
      assertEquals(true, noResolvedType0.matchesObjectContext());
      assertEquals(true, noResolvedType0.hasInstanceType());
      assertEquals(false, noResolvedType0.isFunctionType());
      assertNull(noResolvedType0.getReferenceName());
      assertNull(noResolvedType0.getTemplateTypeName());
      assertEquals(false, noResolvedType0.isFunctionPrototypeType());
      assertEquals(true, noResolvedType0.matchesNumberContext());
      assertEquals(false, noResolvedType0.isRecordType());
      assertEquals(true, noResolvedType0.isConstructor());
      assertEquals(true, noResolvedType0.matchesStringContext());
      assertEquals(false, noResolvedType0.isEnumElementType());
      assertEquals(false, noResolvedType0.isUnionType());
      assertEquals(false, noResolvedType0.isEnumType());
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNull(jSDocInfo0);
      
      templateType0.setPropertyJSDocInfo(string0, jSDocInfo0);
      assertEquals(false, noResolvedType0.isResolved());
      assertEquals(2147483647, noResolvedType0.getPropertiesCount());
      assertEquals(false, noResolvedType0.hasCachedValues());
      assertEquals(2147483647, noResolvedType0.getMaxArguments());
      assertEquals(false, noResolvedType0.isNoObjectType());
      assertEquals(false, noResolvedType0.isOrdinaryFunction());
      assertEquals(false, noResolvedType0.isNominalType());
      assertEquals(true, noResolvedType0.isNullable());
      assertEquals(false, noResolvedType0.isBooleanValueType());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertEquals(false, noResolvedType0.isStringValueType());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noResolvedType0.isNullType());
      assertEquals(false, noResolvedType0.isTemplateType());
      assertEquals(false, noResolvedType0.isVoidType());
      assertEquals(false, noResolvedType0.isInterface());
      assertEquals(false, noResolvedType0.isCheckedUnknownType());
      assertEquals(false, noResolvedType0.isNominalConstructor());
      assertEquals(false, noResolvedType0.isNumberValueType());
      assertEquals(true, noResolvedType0.canBeCalled());
      assertEquals(false, noResolvedType0.isAllType());
      assertEquals(false, noResolvedType0.isReturnTypeInferred());
      assertEquals(true, noResolvedType0.matchesObjectContext());
      assertEquals(true, noResolvedType0.hasInstanceType());
      assertEquals(false, noResolvedType0.isFunctionType());
      assertNull(noResolvedType0.getReferenceName());
      assertNull(noResolvedType0.getTemplateTypeName());
      assertEquals(false, noResolvedType0.isFunctionPrototypeType());
      assertEquals(true, noResolvedType0.matchesNumberContext());
      assertEquals(false, noResolvedType0.isRecordType());
      assertEquals(true, noResolvedType0.isConstructor());
      assertEquals(true, noResolvedType0.matchesStringContext());
      assertEquals(false, noResolvedType0.isEnumElementType());
      assertEquals(false, noResolvedType0.isUnionType());
      assertEquals(false, noResolvedType0.isEnumType());
      assertEquals(false, templateType0.isBooleanValueType());
      assertEquals(false, templateType0.isNullType());
      assertEquals(false, templateType0.isEnumType());
      assertEquals(false, templateType0.isResolved());
      assertEquals(false, templateType0.isStringValueType());
      assertEquals(false, templateType0.isEnumElementType());
      assertEquals(false, templateType0.isNominalConstructor());
      assertEquals(false, templateType0.isVoidType());
      assertEquals("Z4}D-jR(`*2eS", templateType0.getReferenceName());
      assertEquals(false, templateType0.isFunctionType());
      assertEquals(false, templateType0.isNumberValueType());
      assertEquals(false, templateType0.hasCachedValues());
      assertEquals(false, templateType0.isUnionType());
      assertEquals(false, templateType0.isFunctionPrototypeType());
      assertEquals(false, templateType0.isRecordType());
      assertEquals(BooleanLiteralSet.TRUE, templateType0.getPossibleToBooleanOutcomes());
      assertEquals(true, templateType0.isTemplateType());
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
  }

  @Test
  public void test14()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = null;
      NumberType numberType0 = new NumberType(jSTypeRegistry0);
      assertEquals(false, numberType0.isNullable());
      assertEquals(false, numberType0.isNominalConstructor());
      assertEquals(false, numberType0.isFunctionPrototypeType());
      assertEquals(false, numberType0.isEnumType());
      assertEquals(true, numberType0.isNumberValueType());
      assertEquals(false, numberType0.isUnionType());
      assertEquals(false, numberType0.isOrdinaryFunction());
      assertEquals(false, numberType0.isNullType());
      assertEquals(false, numberType0.isNoType());
      assertEquals(false, numberType0.isRecordType());
      assertEquals(false, numberType0.isVoidType());
      assertEquals(false, numberType0.isInterface());
      assertEquals(false, numberType0.isBooleanValueType());
      assertEquals(false, numberType0.isNoResolvedType());
      assertEquals(false, numberType0.isNominalType());
      assertEquals(false, numberType0.isAllType());
      assertEquals(false, numberType0.isEnumElementType());
      assertEquals(false, numberType0.isNoObjectType());
      assertEquals(false, numberType0.isFunctionType());
      assertEquals("number", numberType0.getDisplayName());
      assertEquals(BooleanLiteralSet.BOTH, numberType0.getPossibleToBooleanOutcomes());
      assertEquals(false, numberType0.isResolved());
      assertEquals(false, numberType0.isTemplateType());
      assertEquals(false, numberType0.isCheckedUnknownType());
      assertEquals(false, numberType0.isStringValueType());
      assertEquals(false, numberType0.isConstructor());
      assertEquals(true, numberType0.matchesNumberContext());
      assertEquals(true, numberType0.matchesObjectContext());
      assertEquals(true, numberType0.matchesStringContext());
      assertNotNull(numberType0);
      
      FunctionType functionType0 = numberType0.toMaybeFunctionType();
      assertEquals(false, numberType0.isNullable());
      assertEquals(false, numberType0.isNominalConstructor());
      assertEquals(false, numberType0.isFunctionPrototypeType());
      assertEquals(false, numberType0.isEnumType());
      assertEquals(true, numberType0.isNumberValueType());
      assertEquals(false, numberType0.isUnionType());
      assertEquals(false, numberType0.isOrdinaryFunction());
      assertEquals(false, numberType0.isNullType());
      assertEquals(false, numberType0.isNoType());
      assertEquals(false, numberType0.isRecordType());
      assertEquals(false, numberType0.isVoidType());
      assertEquals(false, numberType0.isInterface());
      assertEquals(false, numberType0.isBooleanValueType());
      assertEquals(false, numberType0.isNoResolvedType());
      assertEquals(false, numberType0.isNominalType());
      assertEquals(false, numberType0.isAllType());
      assertEquals(false, numberType0.isEnumElementType());
      assertEquals(false, numberType0.isNoObjectType());
      assertEquals(false, numberType0.isFunctionType());
      assertEquals("number", numberType0.getDisplayName());
      assertEquals(BooleanLiteralSet.BOTH, numberType0.getPossibleToBooleanOutcomes());
      assertEquals(false, numberType0.isResolved());
      assertEquals(false, numberType0.isTemplateType());
      assertEquals(false, numberType0.isCheckedUnknownType());
      assertEquals(false, numberType0.isStringValueType());
      assertEquals(false, numberType0.isConstructor());
      assertEquals(true, numberType0.matchesNumberContext());
      assertEquals(true, numberType0.matchesObjectContext());
      assertEquals(true, numberType0.matchesStringContext());
      assertNull(functionType0);
      
      IndexedType indexedType0 = new IndexedType(jSTypeRegistry0, functionType0, functionType0);
      assertEquals(false, numberType0.isNullable());
      assertEquals(false, numberType0.isNominalConstructor());
      assertEquals(false, numberType0.isFunctionPrototypeType());
      assertEquals(false, numberType0.isEnumType());
      assertEquals(true, numberType0.isNumberValueType());
      assertEquals(false, numberType0.isUnionType());
      assertEquals(false, numberType0.isOrdinaryFunction());
      assertEquals(false, numberType0.isNullType());
      assertEquals(false, numberType0.isNoType());
      assertEquals(false, numberType0.isRecordType());
      assertEquals(false, numberType0.isVoidType());
      assertEquals(false, numberType0.isInterface());
      assertEquals(false, numberType0.isBooleanValueType());
      assertEquals(false, numberType0.isNoResolvedType());
      assertEquals(false, numberType0.isNominalType());
      assertEquals(false, numberType0.isAllType());
      assertEquals(false, numberType0.isEnumElementType());
      assertEquals(false, numberType0.isNoObjectType());
      assertEquals(false, numberType0.isFunctionType());
      assertEquals("number", numberType0.getDisplayName());
      assertEquals(BooleanLiteralSet.BOTH, numberType0.getPossibleToBooleanOutcomes());
      assertEquals(false, numberType0.isResolved());
      assertEquals(false, numberType0.isTemplateType());
      assertEquals(false, numberType0.isCheckedUnknownType());
      assertEquals(false, numberType0.isStringValueType());
      assertEquals(false, numberType0.isConstructor());
      assertEquals(true, numberType0.matchesNumberContext());
      assertEquals(true, numberType0.matchesObjectContext());
      assertEquals(true, numberType0.matchesStringContext());
      assertEquals(BooleanLiteralSet.TRUE, indexedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, indexedType0.isNullType());
      assertEquals(false, indexedType0.isNumberValueType());
      assertEquals(false, indexedType0.isFunctionPrototypeType());
      assertEquals(false, indexedType0.isTemplateType());
      assertEquals(false, indexedType0.isStringValueType());
      assertEquals(false, indexedType0.isVoidType());
      assertEquals(false, indexedType0.isResolved());
      assertEquals(false, indexedType0.isBooleanValueType());
      assertEquals(false, indexedType0.hasCachedValues());
      assertNotNull(indexedType0);
      
      String string0 = "5n";
      JSDocInfo jSDocInfo0 = indexedType0.getOwnPropertyJSDocInfo(string0);
      assertEquals(false, numberType0.isNullable());
      assertEquals(false, numberType0.isNominalConstructor());
      assertEquals(false, numberType0.isFunctionPrototypeType());
      assertEquals(false, numberType0.isEnumType());
      assertEquals(true, numberType0.isNumberValueType());
      assertEquals(false, numberType0.isUnionType());
      assertEquals(false, numberType0.isOrdinaryFunction());
      assertEquals(false, numberType0.isNullType());
      assertEquals(false, numberType0.isNoType());
      assertEquals(false, numberType0.isRecordType());
      assertEquals(false, numberType0.isVoidType());
      assertEquals(false, numberType0.isInterface());
      assertEquals(false, numberType0.isBooleanValueType());
      assertEquals(false, numberType0.isNoResolvedType());
      assertEquals(false, numberType0.isNominalType());
      assertEquals(false, numberType0.isAllType());
      assertEquals(false, numberType0.isEnumElementType());
      assertEquals(false, numberType0.isNoObjectType());
      assertEquals(false, numberType0.isFunctionType());
      assertEquals("number", numberType0.getDisplayName());
      assertEquals(BooleanLiteralSet.BOTH, numberType0.getPossibleToBooleanOutcomes());
      assertEquals(false, numberType0.isResolved());
      assertEquals(false, numberType0.isTemplateType());
      assertEquals(false, numberType0.isCheckedUnknownType());
      assertEquals(false, numberType0.isStringValueType());
      assertEquals(false, numberType0.isConstructor());
      assertEquals(true, numberType0.matchesNumberContext());
      assertEquals(true, numberType0.matchesObjectContext());
      assertEquals(true, numberType0.matchesStringContext());
      assertEquals(BooleanLiteralSet.TRUE, indexedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, indexedType0.isNullType());
      assertEquals(false, indexedType0.isNumberValueType());
      assertEquals(false, indexedType0.isFunctionPrototypeType());
      assertEquals(false, indexedType0.isTemplateType());
      assertEquals(false, indexedType0.isStringValueType());
      assertEquals(false, indexedType0.isVoidType());
      assertEquals(false, indexedType0.isResolved());
      assertEquals(false, indexedType0.isBooleanValueType());
      assertEquals(false, indexedType0.hasCachedValues());
      assertNull(jSDocInfo0);
      
      indexedType0.setPropertyJSDocInfo(string0, jSDocInfo0);
      assertEquals(false, numberType0.isNullable());
      assertEquals(false, numberType0.isNominalConstructor());
      assertEquals(false, numberType0.isFunctionPrototypeType());
      assertEquals(false, numberType0.isEnumType());
      assertEquals(true, numberType0.isNumberValueType());
      assertEquals(false, numberType0.isUnionType());
      assertEquals(false, numberType0.isOrdinaryFunction());
      assertEquals(false, numberType0.isNullType());
      assertEquals(false, numberType0.isNoType());
      assertEquals(false, numberType0.isRecordType());
      assertEquals(false, numberType0.isVoidType());
      assertEquals(false, numberType0.isInterface());
      assertEquals(false, numberType0.isBooleanValueType());
      assertEquals(false, numberType0.isNoResolvedType());
      assertEquals(false, numberType0.isNominalType());
      assertEquals(false, numberType0.isAllType());
      assertEquals(false, numberType0.isEnumElementType());
      assertEquals(false, numberType0.isNoObjectType());
      assertEquals(false, numberType0.isFunctionType());
      assertEquals("number", numberType0.getDisplayName());
      assertEquals(BooleanLiteralSet.BOTH, numberType0.getPossibleToBooleanOutcomes());
      assertEquals(false, numberType0.isResolved());
      assertEquals(false, numberType0.isTemplateType());
      assertEquals(false, numberType0.isCheckedUnknownType());
      assertEquals(false, numberType0.isStringValueType());
      assertEquals(false, numberType0.isConstructor());
      assertEquals(true, numberType0.matchesNumberContext());
      assertEquals(true, numberType0.matchesObjectContext());
      assertEquals(true, numberType0.matchesStringContext());
      assertEquals(BooleanLiteralSet.TRUE, indexedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, indexedType0.isNullType());
      assertEquals(false, indexedType0.isNumberValueType());
      assertEquals(false, indexedType0.isFunctionPrototypeType());
      assertEquals(false, indexedType0.isTemplateType());
      assertEquals(false, indexedType0.isStringValueType());
      assertEquals(false, indexedType0.isVoidType());
      assertEquals(false, indexedType0.isResolved());
      assertEquals(false, indexedType0.isBooleanValueType());
      assertEquals(false, indexedType0.hasCachedValues());
  }

  @Test
  public void test15()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      boolean boolean0 = true;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0, boolean0);
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      String string0 = null;
      TemplateType templateType0 = new TemplateType(jSTypeRegistry0, string0);
      assertEquals(false, templateType0.isBooleanValueType());
      assertEquals(false, templateType0.hasCachedValues());
      assertEquals(false, templateType0.isEnumType());
      assertEquals(false, templateType0.isNullType());
      assertEquals(false, templateType0.isFunctionType());
      assertEquals(false, templateType0.isEnumElementType());
      assertEquals(BooleanLiteralSet.TRUE, templateType0.getPossibleToBooleanOutcomes());
      assertEquals(false, templateType0.isResolved());
      assertEquals(false, templateType0.isNominalConstructor());
      assertEquals(true, templateType0.isTemplateType());
      assertEquals(false, templateType0.isStringValueType());
      assertEquals(false, templateType0.isUnionType());
      assertEquals(false, templateType0.isFunctionPrototypeType());
      assertEquals(false, templateType0.isNumberValueType());
      assertEquals(false, templateType0.isVoidType());
      assertEquals(false, templateType0.isRecordType());
      assertNull(templateType0.getReferenceName());
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(templateType0);
      
      JSDocInfo jSDocInfo0 = templateType0.getOwnPropertyJSDocInfo(string0);
      assertEquals(false, templateType0.isBooleanValueType());
      assertEquals(false, templateType0.hasCachedValues());
      assertEquals(false, templateType0.isEnumType());
      assertEquals(false, templateType0.isNullType());
      assertEquals(false, templateType0.isFunctionType());
      assertEquals(false, templateType0.isEnumElementType());
      assertEquals(BooleanLiteralSet.TRUE, templateType0.getPossibleToBooleanOutcomes());
      assertEquals(false, templateType0.isResolved());
      assertEquals(false, templateType0.isNominalConstructor());
      assertEquals(true, templateType0.isTemplateType());
      assertEquals(false, templateType0.isStringValueType());
      assertEquals(false, templateType0.isUnionType());
      assertEquals(false, templateType0.isFunctionPrototypeType());
      assertEquals(false, templateType0.isNumberValueType());
      assertEquals(false, templateType0.isVoidType());
      assertEquals(false, templateType0.isRecordType());
      assertNull(templateType0.getReferenceName());
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNull(jSDocInfo0);
  }

  @Test
  public void test16()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      boolean boolean0 = true;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0, boolean0);
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      assertEquals(2147483647, noResolvedType0.getMaxArguments());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertEquals(2147483647, noResolvedType0.getPropertiesCount());
      assertEquals(true, noResolvedType0.matchesObjectContext());
      assertEquals(false, noResolvedType0.isReturnTypeInferred());
      assertEquals(false, noResolvedType0.isResolved());
      assertEquals(true, noResolvedType0.isConstructor());
      assertEquals(false, noResolvedType0.isEnumElementType());
      assertEquals(false, noResolvedType0.isAllType());
      assertEquals(false, noResolvedType0.isBooleanValueType());
      assertEquals(false, noResolvedType0.isStringValueType());
      assertEquals(true, noResolvedType0.matchesNumberContext());
      assertEquals(false, noResolvedType0.isFunctionPrototypeType());
      assertEquals(false, noResolvedType0.isNominalType());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noResolvedType0.isInterface());
      assertNull(noResolvedType0.getReferenceName());
      assertEquals(false, noResolvedType0.isUnionType());
      assertEquals(false, noResolvedType0.isCheckedUnknownType());
      assertEquals(false, noResolvedType0.isNumberValueType());
      assertEquals(true, noResolvedType0.canBeCalled());
      assertEquals(false, noResolvedType0.isNoObjectType());
      assertNull(noResolvedType0.getTemplateTypeName());
      assertEquals(false, noResolvedType0.hasCachedValues());
      assertEquals(false, noResolvedType0.isOrdinaryFunction());
      assertEquals(false, noResolvedType0.isVoidType());
      assertEquals(false, noResolvedType0.isRecordType());
      assertEquals(true, noResolvedType0.hasInstanceType());
      assertEquals(true, noResolvedType0.matchesStringContext());
      assertEquals(false, noResolvedType0.isNominalConstructor());
      assertEquals(true, noResolvedType0.isNullable());
      assertEquals(false, noResolvedType0.isEnumType());
      assertEquals(false, noResolvedType0.isFunctionType());
      assertEquals(false, noResolvedType0.isNullType());
      assertEquals(false, noResolvedType0.isTemplateType());
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(noResolvedType0);
      
      String string0 = "!TOR}Z3";
      int int0 = 0;
      NamedType namedType0 = new NamedType(jSTypeRegistry0, string0, string0, int0, int0);
      assertEquals(false, namedType0.isUnionType());
      assertEquals(false, namedType0.isEnumType());
      assertEquals(BooleanLiteralSet.TRUE, namedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, namedType0.isTemplateType());
      assertEquals(false, namedType0.hasCachedValues());
      assertEquals(false, namedType0.isFunctionType());
      assertEquals(false, namedType0.isVoidType());
      assertEquals(false, namedType0.isNullType());
      assertEquals(false, namedType0.isNominalConstructor());
      assertEquals(false, namedType0.isResolved());
      assertEquals(false, namedType0.isEnumElementType());
      assertEquals(false, namedType0.isNumberValueType());
      assertEquals(false, namedType0.isFunctionPrototypeType());
      assertEquals(false, namedType0.isRecordType());
      assertEquals(false, namedType0.isBooleanValueType());
      assertEquals(false, namedType0.isStringValueType());
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(namedType0);
      
      JSDocInfo jSDocInfo0 = noResolvedType0.getOwnPropertyJSDocInfo(string0);
      assertEquals(2147483647, noResolvedType0.getMaxArguments());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertEquals(2147483647, noResolvedType0.getPropertiesCount());
      assertEquals(true, noResolvedType0.matchesObjectContext());
      assertEquals(false, noResolvedType0.isReturnTypeInferred());
      assertEquals(false, noResolvedType0.isResolved());
      assertEquals(true, noResolvedType0.isConstructor());
      assertEquals(false, noResolvedType0.isEnumElementType());
      assertEquals(false, noResolvedType0.isAllType());
      assertEquals(false, noResolvedType0.isBooleanValueType());
      assertEquals(false, noResolvedType0.isStringValueType());
      assertEquals(true, noResolvedType0.matchesNumberContext());
      assertEquals(false, noResolvedType0.isFunctionPrototypeType());
      assertEquals(false, noResolvedType0.isNominalType());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noResolvedType0.isInterface());
      assertNull(noResolvedType0.getReferenceName());
      assertEquals(false, noResolvedType0.isUnionType());
      assertEquals(false, noResolvedType0.isCheckedUnknownType());
      assertEquals(false, noResolvedType0.isNumberValueType());
      assertEquals(true, noResolvedType0.canBeCalled());
      assertEquals(false, noResolvedType0.isNoObjectType());
      assertNull(noResolvedType0.getTemplateTypeName());
      assertEquals(false, noResolvedType0.hasCachedValues());
      assertEquals(false, noResolvedType0.isOrdinaryFunction());
      assertEquals(false, noResolvedType0.isVoidType());
      assertEquals(false, noResolvedType0.isRecordType());
      assertEquals(true, noResolvedType0.hasInstanceType());
      assertEquals(true, noResolvedType0.matchesStringContext());
      assertEquals(false, noResolvedType0.isNominalConstructor());
      assertEquals(true, noResolvedType0.isNullable());
      assertEquals(false, noResolvedType0.isEnumType());
      assertEquals(false, noResolvedType0.isFunctionType());
      assertEquals(false, noResolvedType0.isNullType());
      assertEquals(false, noResolvedType0.isTemplateType());
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNull(jSDocInfo0);
      
      namedType0.setJSDocInfo(jSDocInfo0);
      assertEquals(false, namedType0.isUnionType());
      assertEquals(false, namedType0.isEnumType());
      assertEquals(BooleanLiteralSet.TRUE, namedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, namedType0.isTemplateType());
      assertEquals(false, namedType0.hasCachedValues());
      assertEquals(false, namedType0.isFunctionType());
      assertEquals(false, namedType0.isVoidType());
      assertEquals(false, namedType0.isNullType());
      assertEquals(false, namedType0.isNominalConstructor());
      assertEquals(false, namedType0.isResolved());
      assertEquals(false, namedType0.isEnumElementType());
      assertEquals(false, namedType0.isNumberValueType());
      assertEquals(false, namedType0.isFunctionPrototypeType());
      assertEquals(false, namedType0.isRecordType());
      assertEquals(false, namedType0.isBooleanValueType());
      assertEquals(false, namedType0.isStringValueType());
      assertEquals(2147483647, noResolvedType0.getMaxArguments());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertEquals(2147483647, noResolvedType0.getPropertiesCount());
      assertEquals(true, noResolvedType0.matchesObjectContext());
      assertEquals(false, noResolvedType0.isReturnTypeInferred());
      assertEquals(false, noResolvedType0.isResolved());
      assertEquals(true, noResolvedType0.isConstructor());
      assertEquals(false, noResolvedType0.isEnumElementType());
      assertEquals(false, noResolvedType0.isAllType());
      assertEquals(false, noResolvedType0.isBooleanValueType());
      assertEquals(false, noResolvedType0.isStringValueType());
      assertEquals(true, noResolvedType0.matchesNumberContext());
      assertEquals(false, noResolvedType0.isFunctionPrototypeType());
      assertEquals(false, noResolvedType0.isNominalType());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noResolvedType0.isInterface());
      assertNull(noResolvedType0.getReferenceName());
      assertEquals(false, noResolvedType0.isUnionType());
      assertEquals(false, noResolvedType0.isCheckedUnknownType());
      assertEquals(false, noResolvedType0.isNumberValueType());
      assertEquals(true, noResolvedType0.canBeCalled());
      assertEquals(false, noResolvedType0.isNoObjectType());
      assertNull(noResolvedType0.getTemplateTypeName());
      assertEquals(false, noResolvedType0.hasCachedValues());
      assertEquals(false, noResolvedType0.isOrdinaryFunction());
      assertEquals(false, noResolvedType0.isVoidType());
      assertEquals(false, noResolvedType0.isRecordType());
      assertEquals(true, noResolvedType0.hasInstanceType());
      assertEquals(true, noResolvedType0.matchesStringContext());
      assertEquals(false, noResolvedType0.isNominalConstructor());
      assertEquals(true, noResolvedType0.isNullable());
      assertEquals(false, noResolvedType0.isEnumType());
      assertEquals(false, noResolvedType0.isFunctionType());
      assertEquals(false, noResolvedType0.isNullType());
      assertEquals(false, noResolvedType0.isTemplateType());
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
  }

  @Test
  public void test17()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      boolean boolean0 = false;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0, boolean0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, booleanType0.isFunctionType());
      assertEquals("boolean", booleanType0.getDisplayName());
      assertEquals(false, booleanType0.isInterface());
      assertEquals(false, booleanType0.isNoResolvedType());
      assertEquals(false, booleanType0.isFunctionPrototypeType());
      assertEquals(false, booleanType0.isOrdinaryFunction());
      assertEquals(false, booleanType0.isAllType());
      assertEquals(false, booleanType0.isNoType());
      assertEquals(false, booleanType0.isRecordType());
      assertEquals(false, booleanType0.isUnionType());
      assertEquals(false, booleanType0.isNullable());
      assertEquals(false, booleanType0.isConstructor());
      assertEquals(true, booleanType0.matchesObjectContext());
      assertEquals(false, booleanType0.isEnumType());
      assertEquals(false, booleanType0.isNominalConstructor());
      assertEquals(true, booleanType0.isBooleanValueType());
      assertEquals(false, booleanType0.isCheckedUnknownType());
      assertEquals(false, booleanType0.isNumberValueType());
      assertEquals(false, booleanType0.isNullType());
      assertEquals(BooleanLiteralSet.BOTH, booleanType0.getPossibleToBooleanOutcomes());
      assertEquals(false, booleanType0.isVoidType());
      assertEquals(true, booleanType0.matchesNumberContext());
      assertEquals(false, booleanType0.isResolved());
      assertEquals(false, booleanType0.isNoObjectType());
      assertEquals(false, booleanType0.isTemplateType());
      assertEquals(true, booleanType0.matchesStringContext());
      assertEquals(false, booleanType0.isStringValueType());
      assertEquals(false, booleanType0.isNominalType());
      assertEquals(false, booleanType0.isEnumElementType());
      assertNotNull(booleanType0);
      
      ProxyObjectType proxyObjectType0 = new ProxyObjectType(jSTypeRegistry0, booleanType0);
      assertEquals(false, proxyObjectType0.isBooleanValueType());
      assertEquals(false, proxyObjectType0.isFunctionPrototypeType());
      assertEquals(false, proxyObjectType0.isResolved());
      assertEquals(false, proxyObjectType0.isEnumElementType());
      assertEquals(false, proxyObjectType0.isEnumType());
      assertEquals(BooleanLiteralSet.TRUE, proxyObjectType0.getPossibleToBooleanOutcomes());
      assertEquals(false, proxyObjectType0.isNominalConstructor());
      assertEquals(false, proxyObjectType0.isUnionType());
      assertEquals(false, proxyObjectType0.isFunctionType());
      assertEquals(false, proxyObjectType0.isRecordType());
      assertEquals(false, proxyObjectType0.hasCachedValues());
      assertEquals(false, proxyObjectType0.isStringValueType());
      assertEquals(false, proxyObjectType0.isVoidType());
      assertEquals(false, proxyObjectType0.isTemplateType());
      assertEquals(false, proxyObjectType0.isNumberValueType());
      assertEquals(false, proxyObjectType0.isNullType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, booleanType0.isFunctionType());
      assertEquals("boolean", booleanType0.getDisplayName());
      assertEquals(false, booleanType0.isInterface());
      assertEquals(false, booleanType0.isNoResolvedType());
      assertEquals(false, booleanType0.isFunctionPrototypeType());
      assertEquals(false, booleanType0.isOrdinaryFunction());
      assertEquals(false, booleanType0.isAllType());
      assertEquals(false, booleanType0.isNoType());
      assertEquals(false, booleanType0.isRecordType());
      assertEquals(false, booleanType0.isUnionType());
      assertEquals(false, booleanType0.isNullable());
      assertEquals(false, booleanType0.isConstructor());
      assertEquals(true, booleanType0.matchesObjectContext());
      assertEquals(false, booleanType0.isEnumType());
      assertEquals(false, booleanType0.isNominalConstructor());
      assertEquals(true, booleanType0.isBooleanValueType());
      assertEquals(false, booleanType0.isCheckedUnknownType());
      assertEquals(false, booleanType0.isNumberValueType());
      assertEquals(false, booleanType0.isNullType());
      assertEquals(BooleanLiteralSet.BOTH, booleanType0.getPossibleToBooleanOutcomes());
      assertEquals(false, booleanType0.isVoidType());
      assertEquals(true, booleanType0.matchesNumberContext());
      assertEquals(false, booleanType0.isResolved());
      assertEquals(false, booleanType0.isNoObjectType());
      assertEquals(false, booleanType0.isTemplateType());
      assertEquals(true, booleanType0.matchesStringContext());
      assertEquals(false, booleanType0.isStringValueType());
      assertEquals(false, booleanType0.isNominalType());
      assertEquals(false, booleanType0.isEnumElementType());
      assertNotNull(proxyObjectType0);
      
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      assertEquals(0, jSDocInfo0.getExtendedInterfacesCount());
      assertNull(jSDocInfo0.getFileOverview());
      assertNull(jSDocInfo0.getVisibility());
      assertEquals(0, jSDocInfo0.getImplementedInterfaceCount());
      assertNull(jSDocInfo0.getLicense());
      assertEquals(false, jSDocInfo0.hasBaseType());
      assertEquals(false, jSDocInfo0.isOverride());
      assertEquals(0, jSDocInfo0.getParameterCount());
      assertEquals(false, jSDocInfo0.isConstructor());
      assertNull(jSDocInfo0.getReturnDescription());
      assertEquals(false, jSDocInfo0.isDeprecated());
      assertNull(jSDocInfo0.getMeaning());
      assertEquals(false, jSDocInfo0.isHidden());
      assertEquals(false, jSDocInfo0.isIdGenerator());
      assertEquals(false, jSDocInfo0.hasType());
      assertEquals(false, jSDocInfo0.isExterns());
      assertEquals(false, jSDocInfo0.isInterface());
      assertEquals(false, jSDocInfo0.hasFileOverview());
      assertEquals(false, jSDocInfo0.isNoAlias());
      assertEquals(false, jSDocInfo0.isNoTypeCheck());
      assertNull(jSDocInfo0.getTemplateTypeName());
      assertNull(jSDocInfo0.getSourceName());
      assertNull(jSDocInfo0.getVersion());
      assertEquals(false, jSDocInfo0.containsDeclaration());
      assertEquals(false, jSDocInfo0.isNoSideEffects());
      assertEquals(false, jSDocInfo0.hasModifies());
      assertEquals(false, jSDocInfo0.hasEnumParameterType());
      assertEquals(false, jSDocInfo0.hasReturnType());
      assertEquals(false, jSDocInfo0.isExport());
      assertEquals(false, jSDocInfo0.hasTypedefType());
      assertNull(jSDocInfo0.getDeprecationReason());
      assertNull(jSDocInfo0.getLendsName());
      assertEquals(false, jSDocInfo0.isNoCompile());
      assertEquals(false, jSDocInfo0.shouldPreserveTry());
      assertNull(jSDocInfo0.getOriginalCommentString());
      assertEquals(false, jSDocInfo0.isDefine());
      assertNull(jSDocInfo0.getBlockDescription());
      assertEquals(false, jSDocInfo0.isJavaDispatch());
      assertEquals("JSDocInfo", jSDocInfo0.toString());
      assertNull(jSDocInfo0.getDescription());
      assertEquals(false, jSDocInfo0.isNoShadow());
      assertEquals(false, jSDocInfo0.isConstant());
      assertEquals(false, jSDocInfo0.isImplicitCast());
      assertEquals(false, jSDocInfo0.isConsistentIdGenerator());
      assertEquals(false, jSDocInfo0.hasThisType());
      assertNotNull(jSDocInfo0);
      
      proxyObjectType0.setJSDocInfo(jSDocInfo0);
      assertEquals(false, proxyObjectType0.isBooleanValueType());
      assertEquals(false, proxyObjectType0.isFunctionPrototypeType());
      assertEquals(false, proxyObjectType0.isResolved());
      assertEquals(false, proxyObjectType0.isEnumElementType());
      assertEquals(false, proxyObjectType0.isEnumType());
      assertEquals(BooleanLiteralSet.TRUE, proxyObjectType0.getPossibleToBooleanOutcomes());
      assertEquals(false, proxyObjectType0.isNominalConstructor());
      assertEquals(false, proxyObjectType0.isUnionType());
      assertEquals(false, proxyObjectType0.isFunctionType());
      assertEquals(false, proxyObjectType0.isRecordType());
      assertEquals(false, proxyObjectType0.hasCachedValues());
      assertEquals(false, proxyObjectType0.isStringValueType());
      assertEquals(false, proxyObjectType0.isVoidType());
      assertEquals(false, proxyObjectType0.isTemplateType());
      assertEquals(false, proxyObjectType0.isNumberValueType());
      assertEquals(false, proxyObjectType0.isNullType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, booleanType0.isFunctionType());
      assertEquals("boolean", booleanType0.getDisplayName());
      assertEquals(false, booleanType0.isInterface());
      assertEquals(false, booleanType0.isNoResolvedType());
      assertEquals(false, booleanType0.isFunctionPrototypeType());
      assertEquals(false, booleanType0.isOrdinaryFunction());
      assertEquals(false, booleanType0.isAllType());
      assertEquals(false, booleanType0.isNoType());
      assertEquals(false, booleanType0.isRecordType());
      assertEquals(false, booleanType0.isUnionType());
      assertEquals(false, booleanType0.isNullable());
      assertEquals(false, booleanType0.isConstructor());
      assertEquals(true, booleanType0.matchesObjectContext());
      assertEquals(false, booleanType0.isEnumType());
      assertEquals(false, booleanType0.isNominalConstructor());
      assertEquals(true, booleanType0.isBooleanValueType());
      assertEquals(false, booleanType0.isCheckedUnknownType());
      assertEquals(false, booleanType0.isNumberValueType());
      assertEquals(false, booleanType0.isNullType());
      assertEquals(BooleanLiteralSet.BOTH, booleanType0.getPossibleToBooleanOutcomes());
      assertEquals(false, booleanType0.isVoidType());
      assertEquals(true, booleanType0.matchesNumberContext());
      assertEquals(false, booleanType0.isResolved());
      assertEquals(false, booleanType0.isNoObjectType());
      assertEquals(false, booleanType0.isTemplateType());
      assertEquals(true, booleanType0.matchesStringContext());
      assertEquals(false, booleanType0.isStringValueType());
      assertEquals(false, booleanType0.isNominalType());
      assertEquals(false, booleanType0.isEnumElementType());
      assertEquals(0, jSDocInfo0.getExtendedInterfacesCount());
      assertNull(jSDocInfo0.getFileOverview());
      assertNull(jSDocInfo0.getVisibility());
      assertEquals(0, jSDocInfo0.getImplementedInterfaceCount());
      assertNull(jSDocInfo0.getLicense());
      assertEquals(false, jSDocInfo0.hasBaseType());
      assertEquals(false, jSDocInfo0.isOverride());
      assertEquals(0, jSDocInfo0.getParameterCount());
      assertEquals(false, jSDocInfo0.isConstructor());
      assertNull(jSDocInfo0.getReturnDescription());
      assertEquals(false, jSDocInfo0.isDeprecated());
      assertNull(jSDocInfo0.getMeaning());
      assertEquals(false, jSDocInfo0.isHidden());
      assertEquals(false, jSDocInfo0.isIdGenerator());
      assertEquals(false, jSDocInfo0.hasType());
      assertEquals(false, jSDocInfo0.isExterns());
      assertEquals(false, jSDocInfo0.isInterface());
      assertEquals(false, jSDocInfo0.hasFileOverview());
      assertEquals(false, jSDocInfo0.isNoAlias());
      assertEquals(false, jSDocInfo0.isNoTypeCheck());
      assertNull(jSDocInfo0.getTemplateTypeName());
      assertNull(jSDocInfo0.getSourceName());
      assertNull(jSDocInfo0.getVersion());
      assertEquals(false, jSDocInfo0.containsDeclaration());
      assertEquals(false, jSDocInfo0.isNoSideEffects());
      assertEquals(false, jSDocInfo0.hasModifies());
      assertEquals(false, jSDocInfo0.hasEnumParameterType());
      assertEquals(false, jSDocInfo0.hasReturnType());
      assertEquals(false, jSDocInfo0.isExport());
      assertEquals(false, jSDocInfo0.hasTypedefType());
      assertNull(jSDocInfo0.getDeprecationReason());
      assertNull(jSDocInfo0.getLendsName());
      assertEquals(false, jSDocInfo0.isNoCompile());
      assertEquals(false, jSDocInfo0.shouldPreserveTry());
      assertNull(jSDocInfo0.getOriginalCommentString());
      assertEquals(false, jSDocInfo0.isDefine());
      assertNull(jSDocInfo0.getBlockDescription());
      assertEquals(false, jSDocInfo0.isJavaDispatch());
      assertEquals("JSDocInfo", jSDocInfo0.toString());
      assertNull(jSDocInfo0.getDescription());
      assertEquals(false, jSDocInfo0.isNoShadow());
      assertEquals(false, jSDocInfo0.isConstant());
      assertEquals(false, jSDocInfo0.isImplicitCast());
      assertEquals(false, jSDocInfo0.isConsistentIdGenerator());
      assertEquals(false, jSDocInfo0.hasThisType());
  }

  @Test
  public void test18()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      AllType allType0 = new AllType(jSTypeRegistry0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, allType0.isCheckedUnknownType());
      assertEquals(false, allType0.isBooleanValueType());
      assertEquals(false, allType0.isInterface());
      assertEquals(false, allType0.isTemplateType());
      assertEquals("<Any Type>", allType0.getDisplayName());
      assertEquals(false, allType0.isResolved());
      assertEquals(false, allType0.isNoObjectType());
      assertEquals(true, allType0.matchesObjectContext());
      assertEquals(false, allType0.isFunctionType());
      assertEquals(false, allType0.isUnionType());
      assertEquals(false, allType0.isNullType());
      assertEquals(false, allType0.isNominalType());
      assertEquals(false, allType0.isEnumElementType());
      assertEquals(false, allType0.isRecordType());
      assertEquals(false, allType0.isFunctionPrototypeType());
      assertEquals(false, allType0.isVoidType());
      assertEquals(false, allType0.isStringValueType());
      assertEquals(false, allType0.isOrdinaryFunction());
      assertEquals(true, allType0.isAllType());
      assertEquals(false, allType0.canBeCalled());
      assertEquals(false, allType0.isNominalConstructor());
      assertEquals(false, allType0.isConstructor());
      assertEquals(BooleanLiteralSet.BOTH, allType0.getPossibleToBooleanOutcomes());
      assertEquals(true, allType0.hasDisplayName());
      assertEquals(false, allType0.isEnumType());
      assertEquals(false, allType0.isNumberValueType());
      assertEquals(false, allType0.isNoResolvedType());
      assertEquals(false, allType0.isNoType());
      assertEquals(true, allType0.matchesStringContext());
      assertNotNull(allType0);
      
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNull(noResolvedType0.getTemplateTypeName());
      assertEquals(false, noResolvedType0.isNumberValueType());
      assertEquals(true, noResolvedType0.isConstructor());
      assertEquals(false, noResolvedType0.isNominalConstructor());
      assertEquals(true, noResolvedType0.canBeCalled());
      assertEquals(false, noResolvedType0.isResolved());
      assertEquals(false, noResolvedType0.isVoidType());
      assertNull(noResolvedType0.getReferenceName());
      assertEquals(false, noResolvedType0.isInterface());
      assertEquals(false, noResolvedType0.isEnumElementType());
      assertEquals(false, noResolvedType0.isFunctionPrototypeType());
      assertEquals(false, noResolvedType0.isTemplateType());
      assertEquals(false, noResolvedType0.isBooleanValueType());
      assertEquals(true, noResolvedType0.matchesObjectContext());
      assertEquals(true, noResolvedType0.matchesNumberContext());
      assertEquals(false, noResolvedType0.isFunctionType());
      assertEquals(false, noResolvedType0.isUnionType());
      assertEquals(false, noResolvedType0.isNominalType());
      assertEquals(false, noResolvedType0.isNullType());
      assertEquals(false, noResolvedType0.isStringValueType());
      assertEquals(false, noResolvedType0.isEnumType());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertEquals(true, noResolvedType0.hasInstanceType());
      assertEquals(true, noResolvedType0.matchesStringContext());
      assertEquals(false, noResolvedType0.hasCachedValues());
      assertEquals(2147483647, noResolvedType0.getMaxArguments());
      assertEquals(false, noResolvedType0.isOrdinaryFunction());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertEquals(true, noResolvedType0.isNullable());
      assertEquals(false, noResolvedType0.isNoObjectType());
      assertEquals(false, noResolvedType0.isCheckedUnknownType());
      assertEquals(false, noResolvedType0.isRecordType());
      assertEquals(false, noResolvedType0.isAllType());
      assertEquals(false, noResolvedType0.isReturnTypeInferred());
      assertEquals(2147483647, noResolvedType0.getPropertiesCount());
      assertNotNull(noResolvedType0);
      
      FunctionType functionType0 = JSType.toMaybeFunctionType((JSType) noResolvedType0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNull(noResolvedType0.getTemplateTypeName());
      assertEquals(false, noResolvedType0.isNumberValueType());
      assertEquals(true, noResolvedType0.isConstructor());
      assertEquals(false, noResolvedType0.isNominalConstructor());
      assertEquals(true, noResolvedType0.canBeCalled());
      assertEquals(false, noResolvedType0.isResolved());
      assertEquals(false, noResolvedType0.isVoidType());
      assertNull(noResolvedType0.getReferenceName());
      assertEquals(false, noResolvedType0.isInterface());
      assertEquals(false, noResolvedType0.isEnumElementType());
      assertEquals(false, noResolvedType0.isFunctionPrototypeType());
      assertEquals(false, noResolvedType0.isTemplateType());
      assertEquals(false, noResolvedType0.isBooleanValueType());
      assertEquals(true, noResolvedType0.matchesObjectContext());
      assertEquals(true, noResolvedType0.matchesNumberContext());
      assertEquals(false, noResolvedType0.isFunctionType());
      assertEquals(false, noResolvedType0.isUnionType());
      assertEquals(false, noResolvedType0.isNominalType());
      assertEquals(false, noResolvedType0.isNullType());
      assertEquals(false, noResolvedType0.isStringValueType());
      assertEquals(false, noResolvedType0.isEnumType());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertEquals(true, noResolvedType0.hasInstanceType());
      assertEquals(true, noResolvedType0.matchesStringContext());
      assertEquals(false, noResolvedType0.hasCachedValues());
      assertEquals(2147483647, noResolvedType0.getMaxArguments());
      assertEquals(false, noResolvedType0.isOrdinaryFunction());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertEquals(true, noResolvedType0.isNullable());
      assertEquals(false, noResolvedType0.isNoObjectType());
      assertEquals(false, noResolvedType0.isCheckedUnknownType());
      assertEquals(false, noResolvedType0.isRecordType());
      assertEquals(false, noResolvedType0.isAllType());
      assertEquals(false, noResolvedType0.isReturnTypeInferred());
      assertEquals(2147483647, noResolvedType0.getPropertiesCount());
      assertNull(functionType0);
      
      ParameterizedType parameterizedType0 = new ParameterizedType(jSTypeRegistry0, functionType0, allType0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNull(noResolvedType0.getTemplateTypeName());
      assertEquals(false, noResolvedType0.isNumberValueType());
      assertEquals(true, noResolvedType0.isConstructor());
      assertEquals(false, noResolvedType0.isNominalConstructor());
      assertEquals(true, noResolvedType0.canBeCalled());
      assertEquals(false, noResolvedType0.isResolved());
      assertEquals(false, noResolvedType0.isVoidType());
      assertNull(noResolvedType0.getReferenceName());
      assertEquals(false, noResolvedType0.isInterface());
      assertEquals(false, noResolvedType0.isEnumElementType());
      assertEquals(false, noResolvedType0.isFunctionPrototypeType());
      assertEquals(false, noResolvedType0.isTemplateType());
      assertEquals(false, noResolvedType0.isBooleanValueType());
      assertEquals(true, noResolvedType0.matchesObjectContext());
      assertEquals(true, noResolvedType0.matchesNumberContext());
      assertEquals(false, noResolvedType0.isFunctionType());
      assertEquals(false, noResolvedType0.isUnionType());
      assertEquals(false, noResolvedType0.isNominalType());
      assertEquals(false, noResolvedType0.isNullType());
      assertEquals(false, noResolvedType0.isStringValueType());
      assertEquals(false, noResolvedType0.isEnumType());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertEquals(true, noResolvedType0.hasInstanceType());
      assertEquals(true, noResolvedType0.matchesStringContext());
      assertEquals(false, noResolvedType0.hasCachedValues());
      assertEquals(2147483647, noResolvedType0.getMaxArguments());
      assertEquals(false, noResolvedType0.isOrdinaryFunction());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertEquals(true, noResolvedType0.isNullable());
      assertEquals(false, noResolvedType0.isNoObjectType());
      assertEquals(false, noResolvedType0.isCheckedUnknownType());
      assertEquals(false, noResolvedType0.isRecordType());
      assertEquals(false, noResolvedType0.isAllType());
      assertEquals(false, noResolvedType0.isReturnTypeInferred());
      assertEquals(2147483647, noResolvedType0.getPropertiesCount());
      assertEquals(false, allType0.isCheckedUnknownType());
      assertEquals(false, allType0.isBooleanValueType());
      assertEquals(false, allType0.isInterface());
      assertEquals(false, allType0.isTemplateType());
      assertEquals("<Any Type>", allType0.getDisplayName());
      assertEquals(false, allType0.isResolved());
      assertEquals(false, allType0.isNoObjectType());
      assertEquals(true, allType0.matchesObjectContext());
      assertEquals(false, allType0.isFunctionType());
      assertEquals(false, allType0.isUnionType());
      assertEquals(false, allType0.isNullType());
      assertEquals(false, allType0.isNominalType());
      assertEquals(false, allType0.isEnumElementType());
      assertEquals(false, allType0.isRecordType());
      assertEquals(false, allType0.isFunctionPrototypeType());
      assertEquals(false, allType0.isVoidType());
      assertEquals(false, allType0.isStringValueType());
      assertEquals(false, allType0.isOrdinaryFunction());
      assertEquals(true, allType0.isAllType());
      assertEquals(false, allType0.canBeCalled());
      assertEquals(false, allType0.isNominalConstructor());
      assertEquals(false, allType0.isConstructor());
      assertEquals(BooleanLiteralSet.BOTH, allType0.getPossibleToBooleanOutcomes());
      assertEquals(true, allType0.hasDisplayName());
      assertEquals(false, allType0.isEnumType());
      assertEquals(false, allType0.isNumberValueType());
      assertEquals(false, allType0.isNoResolvedType());
      assertEquals(false, allType0.isNoType());
      assertEquals(true, allType0.matchesStringContext());
      assertEquals(false, parameterizedType0.isStringValueType());
      assertEquals(false, parameterizedType0.isBooleanValueType());
      assertEquals(false, parameterizedType0.isResolved());
      assertEquals(false, parameterizedType0.isNumberValueType());
      assertEquals(BooleanLiteralSet.TRUE, parameterizedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, parameterizedType0.isVoidType());
      assertEquals(false, parameterizedType0.isNullType());
      assertEquals(false, parameterizedType0.hasCachedValues());
      assertEquals(false, parameterizedType0.isTemplateType());
      assertEquals(false, parameterizedType0.isFunctionPrototypeType());
      assertNotNull(parameterizedType0);
      
      String string0 = null;
      UnknownType unknownType0 = (UnknownType)parameterizedType0.getPropertyType(string0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, unknownType0.hasCachedValues());
      assertEquals(true, unknownType0.canBeCalled());
      assertEquals(false, unknownType0.isEnumType());
      assertEquals(false, unknownType0.isCheckedUnknownType());
      assertEquals(false, unknownType0.isNoResolvedType());
      assertEquals(BooleanLiteralSet.BOTH, unknownType0.getPossibleToBooleanOutcomes());
      assertEquals(false, unknownType0.isAllType());
      assertEquals(false, unknownType0.isNullType());
      assertEquals(false, unknownType0.isVoidType());
      assertEquals(true, unknownType0.isNullable());
      assertEquals(false, unknownType0.isInterface());
      assertEquals(true, unknownType0.hasDisplayName());
      assertEquals(false, unknownType0.isOrdinaryFunction());
      assertEquals(false, unknownType0.hasReferenceName());
      assertEquals(true, unknownType0.matchesStringContext());
      assertEquals(true, unknownType0.matchesNumberContext());
      assertEquals(true, unknownType0.isUnknownType());
      assertEquals(false, unknownType0.isNumberValueType());
      assertEquals("Unknown", unknownType0.getDisplayName());
      assertEquals(false, unknownType0.isUnionType());
      assertEquals(false, unknownType0.isFunctionType());
      assertEquals(true, unknownType0.matchesObjectContext());
      assertEquals(false, unknownType0.isTemplateType());
      assertEquals(false, unknownType0.isNoType());
      assertEquals(false, unknownType0.isNativeObjectType());
      assertEquals(false, unknownType0.isConstructor());
      assertEquals(false, unknownType0.isFunctionPrototypeType());
      assertEquals("?", unknownType0.getReferenceName());
      assertEquals(2147483647, unknownType0.getPropertiesCount());
      assertEquals(false, unknownType0.isEnumElementType());
      assertEquals(false, unknownType0.isResolved());
      assertEquals(false, unknownType0.isRecordType());
      assertEquals(false, unknownType0.isNoObjectType());
      assertEquals(false, unknownType0.isNominalType());
      assertEquals(false, unknownType0.isNominalConstructor());
      assertEquals(false, unknownType0.isStringValueType());
      assertEquals(false, unknownType0.isBooleanValueType());
      assertNull(noResolvedType0.getTemplateTypeName());
      assertEquals(false, noResolvedType0.isNumberValueType());
      assertEquals(true, noResolvedType0.isConstructor());
      assertEquals(false, noResolvedType0.isNominalConstructor());
      assertEquals(true, noResolvedType0.canBeCalled());
      assertEquals(false, noResolvedType0.isResolved());
      assertEquals(false, noResolvedType0.isVoidType());
      assertNull(noResolvedType0.getReferenceName());
      assertEquals(false, noResolvedType0.isInterface());
      assertEquals(false, noResolvedType0.isEnumElementType());
      assertEquals(false, noResolvedType0.isFunctionPrototypeType());
      assertEquals(false, noResolvedType0.isTemplateType());
      assertEquals(false, noResolvedType0.isBooleanValueType());
      assertEquals(true, noResolvedType0.matchesObjectContext());
      assertEquals(true, noResolvedType0.matchesNumberContext());
      assertEquals(false, noResolvedType0.isFunctionType());
      assertEquals(false, noResolvedType0.isUnionType());
      assertEquals(false, noResolvedType0.isNominalType());
      assertEquals(false, noResolvedType0.isNullType());
      assertEquals(false, noResolvedType0.isStringValueType());
      assertEquals(false, noResolvedType0.isEnumType());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertEquals(true, noResolvedType0.hasInstanceType());
      assertEquals(true, noResolvedType0.matchesStringContext());
      assertEquals(false, noResolvedType0.hasCachedValues());
      assertEquals(2147483647, noResolvedType0.getMaxArguments());
      assertEquals(false, noResolvedType0.isOrdinaryFunction());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertEquals(true, noResolvedType0.isNullable());
      assertEquals(false, noResolvedType0.isNoObjectType());
      assertEquals(false, noResolvedType0.isCheckedUnknownType());
      assertEquals(false, noResolvedType0.isRecordType());
      assertEquals(false, noResolvedType0.isAllType());
      assertEquals(false, noResolvedType0.isReturnTypeInferred());
      assertEquals(2147483647, noResolvedType0.getPropertiesCount());
      assertEquals(false, allType0.isCheckedUnknownType());
      assertEquals(false, allType0.isBooleanValueType());
      assertEquals(false, allType0.isInterface());
      assertEquals(false, allType0.isTemplateType());
      assertEquals("<Any Type>", allType0.getDisplayName());
      assertEquals(false, allType0.isResolved());
      assertEquals(false, allType0.isNoObjectType());
      assertEquals(true, allType0.matchesObjectContext());
      assertEquals(false, allType0.isFunctionType());
      assertEquals(false, allType0.isUnionType());
      assertEquals(false, allType0.isNullType());
      assertEquals(false, allType0.isNominalType());
      assertEquals(false, allType0.isEnumElementType());
      assertEquals(false, allType0.isRecordType());
      assertEquals(false, allType0.isFunctionPrototypeType());
      assertEquals(false, allType0.isVoidType());
      assertEquals(false, allType0.isStringValueType());
      assertEquals(false, allType0.isOrdinaryFunction());
      assertEquals(true, allType0.isAllType());
      assertEquals(false, allType0.canBeCalled());
      assertEquals(false, allType0.isNominalConstructor());
      assertEquals(false, allType0.isConstructor());
      assertEquals(BooleanLiteralSet.BOTH, allType0.getPossibleToBooleanOutcomes());
      assertEquals(true, allType0.hasDisplayName());
      assertEquals(false, allType0.isEnumType());
      assertEquals(false, allType0.isNumberValueType());
      assertEquals(false, allType0.isNoResolvedType());
      assertEquals(false, allType0.isNoType());
      assertEquals(true, allType0.matchesStringContext());
      assertEquals(false, parameterizedType0.isStringValueType());
      assertEquals(false, parameterizedType0.isBooleanValueType());
      assertEquals(false, parameterizedType0.isResolved());
      assertEquals(false, parameterizedType0.isNumberValueType());
      assertEquals(BooleanLiteralSet.TRUE, parameterizedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, parameterizedType0.isVoidType());
      assertEquals(false, parameterizedType0.isNullType());
      assertEquals(false, parameterizedType0.hasCachedValues());
      assertEquals(false, parameterizedType0.isTemplateType());
      assertEquals(false, parameterizedType0.isFunctionPrototypeType());
      assertNotNull(unknownType0);
  }

  @Test
  public void test19()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      boolean boolean0 = true;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0, boolean0);
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      String string0 = null;
      TemplateType templateType0 = new TemplateType(jSTypeRegistry0, string0);
      assertEquals(false, templateType0.hasCachedValues());
      assertEquals(false, templateType0.isNominalConstructor());
      assertEquals(false, templateType0.isStringValueType());
      assertEquals(false, templateType0.isNumberValueType());
      assertEquals(false, templateType0.isFunctionPrototypeType());
      assertEquals(false, templateType0.isBooleanValueType());
      assertEquals(false, templateType0.isEnumType());
      assertEquals(false, templateType0.isFunctionType());
      assertEquals(false, templateType0.isNullType());
      assertEquals(false, templateType0.isEnumElementType());
      assertEquals(BooleanLiteralSet.TRUE, templateType0.getPossibleToBooleanOutcomes());
      assertNull(templateType0.getReferenceName());
      assertEquals(false, templateType0.isRecordType());
      assertEquals(false, templateType0.isUnionType());
      assertEquals(false, templateType0.isResolved());
      assertEquals(false, templateType0.isVoidType());
      assertEquals(true, templateType0.isTemplateType());
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(templateType0);
      
      UnknownType unknownType0 = (UnknownType)templateType0.getPropertyType(string0);
      assertEquals("Unknown", unknownType0.getDisplayName());
      assertEquals(true, unknownType0.hasDisplayName());
      assertEquals(false, unknownType0.isFunctionType());
      assertEquals(false, unknownType0.isOrdinaryFunction());
      assertEquals(false, unknownType0.isNativeObjectType());
      assertEquals(false, unknownType0.isNoType());
      assertEquals(false, unknownType0.isEnumElementType());
      assertEquals(false, unknownType0.isAllType());
      assertEquals(false, unknownType0.isFunctionPrototypeType());
      assertEquals(true, unknownType0.isNullable());
      assertEquals(true, unknownType0.matchesNumberContext());
      assertEquals(false, unknownType0.isUnionType());
      assertEquals(false, unknownType0.isNumberValueType());
      assertEquals(false, unknownType0.isNominalType());
      assertEquals(false, unknownType0.isCheckedUnknownType());
      assertEquals(false, unknownType0.isTemplateType());
      assertEquals("?", unknownType0.getReferenceName());
      assertEquals(false, unknownType0.isNominalConstructor());
      assertEquals(true, unknownType0.matchesObjectContext());
      assertEquals(false, unknownType0.isRecordType());
      assertEquals(false, unknownType0.isConstructor());
      assertEquals(false, unknownType0.isInterface());
      assertEquals(false, unknownType0.isNullType());
      assertEquals(false, unknownType0.hasReferenceName());
      assertEquals(true, unknownType0.canBeCalled());
      assertEquals(false, unknownType0.isNoObjectType());
      assertEquals(false, unknownType0.isNoResolvedType());
      assertEquals(false, unknownType0.isBooleanValueType());
      assertEquals(2147483647, unknownType0.getPropertiesCount());
      assertEquals(false, unknownType0.isResolved());
      assertEquals(false, unknownType0.hasCachedValues());
      assertEquals(false, unknownType0.isVoidType());
      assertEquals(true, unknownType0.matchesStringContext());
      assertEquals(false, unknownType0.isEnumType());
      assertEquals(false, unknownType0.isStringValueType());
      assertEquals(BooleanLiteralSet.BOTH, unknownType0.getPossibleToBooleanOutcomes());
      assertEquals(true, unknownType0.isUnknownType());
      assertEquals(false, templateType0.hasCachedValues());
      assertEquals(false, templateType0.isNominalConstructor());
      assertEquals(false, templateType0.isStringValueType());
      assertEquals(false, templateType0.isNumberValueType());
      assertEquals(false, templateType0.isFunctionPrototypeType());
      assertEquals(false, templateType0.isBooleanValueType());
      assertEquals(false, templateType0.isEnumType());
      assertEquals(false, templateType0.isFunctionType());
      assertEquals(false, templateType0.isNullType());
      assertEquals(false, templateType0.isEnumElementType());
      assertEquals(BooleanLiteralSet.TRUE, templateType0.getPossibleToBooleanOutcomes());
      assertNull(templateType0.getReferenceName());
      assertEquals(false, templateType0.isRecordType());
      assertEquals(false, templateType0.isUnionType());
      assertEquals(false, templateType0.isResolved());
      assertEquals(false, templateType0.isVoidType());
      assertEquals(true, templateType0.isTemplateType());
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(unknownType0);
  }

  @Test
  public void test20()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      boolean boolean0 = true;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0, boolean0);
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      String string0 = null;
      TemplateType templateType0 = new TemplateType(jSTypeRegistry0, string0);
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, templateType0.isRecordType());
      assertEquals(false, templateType0.isUnionType());
      assertEquals(false, templateType0.isStringValueType());
      assertEquals(false, templateType0.isFunctionType());
      assertEquals(false, templateType0.hasCachedValues());
      assertEquals(false, templateType0.isBooleanValueType());
      assertEquals(false, templateType0.isResolved());
      assertNull(templateType0.getReferenceName());
      assertEquals(false, templateType0.isFunctionPrototypeType());
      assertEquals(BooleanLiteralSet.TRUE, templateType0.getPossibleToBooleanOutcomes());
      assertEquals(false, templateType0.isEnumType());
      assertEquals(false, templateType0.isNullType());
      assertEquals(false, templateType0.isNumberValueType());
      assertEquals(true, templateType0.isTemplateType());
      assertEquals(false, templateType0.isVoidType());
      assertEquals(false, templateType0.isNominalConstructor());
      assertEquals(false, templateType0.isEnumElementType());
      assertNotNull(templateType0);
      
      Set<String> set0 = templateType0.getPropertyNames();
      assertEquals(0, set0.size());
      assertEquals(true, set0.isEmpty());
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, templateType0.isRecordType());
      assertEquals(false, templateType0.isUnionType());
      assertEquals(false, templateType0.isStringValueType());
      assertEquals(false, templateType0.isFunctionType());
      assertEquals(false, templateType0.hasCachedValues());
      assertEquals(false, templateType0.isBooleanValueType());
      assertEquals(false, templateType0.isResolved());
      assertNull(templateType0.getReferenceName());
      assertEquals(false, templateType0.isFunctionPrototypeType());
      assertEquals(BooleanLiteralSet.TRUE, templateType0.getPossibleToBooleanOutcomes());
      assertEquals(false, templateType0.isEnumType());
      assertEquals(false, templateType0.isNullType());
      assertEquals(false, templateType0.isNumberValueType());
      assertEquals(true, templateType0.isTemplateType());
      assertEquals(false, templateType0.isVoidType());
      assertEquals(false, templateType0.isNominalConstructor());
      assertEquals(false, templateType0.isEnumElementType());
      assertNotNull(set0);
  }

  @Test
  public void test21()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      boolean boolean0 = true;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0, boolean0);
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      VoidType voidType0 = new VoidType(jSTypeRegistry0);
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(BooleanLiteralSet.FALSE, voidType0.getPossibleToBooleanOutcomes());
      assertEquals(false, voidType0.isNumberValueType());
      assertEquals(false, voidType0.isNoType());
      assertEquals(false, voidType0.isConstructor());
      assertEquals(false, voidType0.matchesObjectContext());
      assertEquals(false, voidType0.isNoResolvedType());
      assertEquals(false, voidType0.isBooleanValueType());
      assertEquals(true, voidType0.isVoidType());
      assertEquals(false, voidType0.matchesNumberContext());
      assertEquals(false, voidType0.isEnumElementType());
      assertEquals(false, voidType0.isEnumType());
      assertEquals(false, voidType0.isInterface());
      assertEquals(false, voidType0.isNominalConstructor());
      assertEquals(false, voidType0.isOrdinaryFunction());
      assertEquals(false, voidType0.isStringValueType());
      assertEquals(false, voidType0.isFunctionType());
      assertEquals(false, voidType0.isNullType());
      assertEquals(false, voidType0.isUnionType());
      assertEquals(true, voidType0.matchesStringContext());
      assertEquals(false, voidType0.isCheckedUnknownType());
      assertEquals(false, voidType0.isNominalType());
      assertEquals("undefined", voidType0.getDisplayName());
      assertEquals(false, voidType0.isFunctionPrototypeType());
      assertEquals(false, voidType0.isResolved());
      assertEquals(false, voidType0.isAllType());
      assertEquals(false, voidType0.isTemplateType());
      assertEquals(false, voidType0.isRecordType());
      assertEquals(false, voidType0.isNoObjectType());
      assertNotNull(voidType0);
      
      UnknownType unknownType0 = new UnknownType(jSTypeRegistry0, boolean0);
      assertEquals(false, unknownType0.isConstructor());
      assertEquals(true, unknownType0.canBeCalled());
      assertEquals(false, unknownType0.isAllType());
      assertEquals(true, unknownType0.isNullable());
      assertEquals(false, unknownType0.isResolved());
      assertEquals(false, unknownType0.isEnumElementType());
      assertEquals(BooleanLiteralSet.BOTH, unknownType0.getPossibleToBooleanOutcomes());
      assertEquals(false, unknownType0.isNoObjectType());
      assertEquals(false, unknownType0.isStringValueType());
      assertEquals(false, unknownType0.isNativeObjectType());
      assertEquals(false, unknownType0.isRecordType());
      assertEquals(false, unknownType0.isInterface());
      assertEquals(false, unknownType0.isNominalType());
      assertEquals(false, unknownType0.isNumberValueType());
      assertEquals("??", unknownType0.getReferenceName());
      assertEquals(true, unknownType0.matchesStringContext());
      assertEquals(false, unknownType0.isNoResolvedType());
      assertEquals(false, unknownType0.hasCachedValues());
      assertEquals("Unknown", unknownType0.getDisplayName());
      assertEquals(true, unknownType0.hasDisplayName());
      assertEquals(false, unknownType0.isVoidType());
      assertEquals(false, unknownType0.isUnionType());
      assertEquals(2147483647, unknownType0.getPropertiesCount());
      assertEquals(false, unknownType0.isNoType());
      assertEquals(false, unknownType0.isNullType());
      assertEquals(false, unknownType0.isNominalConstructor());
      assertEquals(false, unknownType0.hasReferenceName());
      assertEquals(true, unknownType0.isCheckedUnknownType());
      assertEquals(true, unknownType0.isUnknownType());
      assertEquals(false, unknownType0.isFunctionPrototypeType());
      assertEquals(true, unknownType0.matchesNumberContext());
      assertEquals(false, unknownType0.isEnumType());
      assertEquals(false, unknownType0.isBooleanValueType());
      assertEquals(false, unknownType0.isTemplateType());
      assertEquals(false, unknownType0.isOrdinaryFunction());
      assertEquals(true, unknownType0.matchesObjectContext());
      assertEquals(false, unknownType0.isFunctionType());
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(unknownType0);
      
      FunctionType functionType0 = unknownType0.getOwnerFunction();
      assertEquals(false, unknownType0.isConstructor());
      assertEquals(true, unknownType0.canBeCalled());
      assertEquals(false, unknownType0.isAllType());
      assertEquals(true, unknownType0.isNullable());
      assertEquals(false, unknownType0.isResolved());
      assertEquals(false, unknownType0.isEnumElementType());
      assertEquals(BooleanLiteralSet.BOTH, unknownType0.getPossibleToBooleanOutcomes());
      assertEquals(false, unknownType0.isNoObjectType());
      assertEquals(false, unknownType0.isStringValueType());
      assertEquals(false, unknownType0.isNativeObjectType());
      assertEquals(false, unknownType0.isRecordType());
      assertEquals(false, unknownType0.isInterface());
      assertEquals(false, unknownType0.isNominalType());
      assertEquals(false, unknownType0.isNumberValueType());
      assertEquals("??", unknownType0.getReferenceName());
      assertEquals(true, unknownType0.matchesStringContext());
      assertEquals(false, unknownType0.isNoResolvedType());
      assertEquals(false, unknownType0.hasCachedValues());
      assertEquals("Unknown", unknownType0.getDisplayName());
      assertEquals(true, unknownType0.hasDisplayName());
      assertEquals(false, unknownType0.isVoidType());
      assertEquals(false, unknownType0.isUnionType());
      assertEquals(2147483647, unknownType0.getPropertiesCount());
      assertEquals(false, unknownType0.isNoType());
      assertEquals(false, unknownType0.isNullType());
      assertEquals(false, unknownType0.isNominalConstructor());
      assertEquals(false, unknownType0.hasReferenceName());
      assertEquals(true, unknownType0.isCheckedUnknownType());
      assertEquals(true, unknownType0.isUnknownType());
      assertEquals(false, unknownType0.isFunctionPrototypeType());
      assertEquals(true, unknownType0.matchesNumberContext());
      assertEquals(false, unknownType0.isEnumType());
      assertEquals(false, unknownType0.isBooleanValueType());
      assertEquals(false, unknownType0.isTemplateType());
      assertEquals(false, unknownType0.isOrdinaryFunction());
      assertEquals(true, unknownType0.matchesObjectContext());
      assertEquals(false, unknownType0.isFunctionType());
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNull(functionType0);
      
      ParameterizedType parameterizedType0 = new ParameterizedType(jSTypeRegistry0, functionType0, voidType0);
      assertEquals(false, unknownType0.isConstructor());
      assertEquals(true, unknownType0.canBeCalled());
      assertEquals(false, unknownType0.isAllType());
      assertEquals(true, unknownType0.isNullable());
      assertEquals(false, unknownType0.isResolved());
      assertEquals(false, unknownType0.isEnumElementType());
      assertEquals(BooleanLiteralSet.BOTH, unknownType0.getPossibleToBooleanOutcomes());
      assertEquals(false, unknownType0.isNoObjectType());
      assertEquals(false, unknownType0.isStringValueType());
      assertEquals(false, unknownType0.isNativeObjectType());
      assertEquals(false, unknownType0.isRecordType());
      assertEquals(false, unknownType0.isInterface());
      assertEquals(false, unknownType0.isNominalType());
      assertEquals(false, unknownType0.isNumberValueType());
      assertEquals("??", unknownType0.getReferenceName());
      assertEquals(true, unknownType0.matchesStringContext());
      assertEquals(false, unknownType0.isNoResolvedType());
      assertEquals(false, unknownType0.hasCachedValues());
      assertEquals("Unknown", unknownType0.getDisplayName());
      assertEquals(true, unknownType0.hasDisplayName());
      assertEquals(false, unknownType0.isVoidType());
      assertEquals(false, unknownType0.isUnionType());
      assertEquals(2147483647, unknownType0.getPropertiesCount());
      assertEquals(false, unknownType0.isNoType());
      assertEquals(false, unknownType0.isNullType());
      assertEquals(false, unknownType0.isNominalConstructor());
      assertEquals(false, unknownType0.hasReferenceName());
      assertEquals(true, unknownType0.isCheckedUnknownType());
      assertEquals(true, unknownType0.isUnknownType());
      assertEquals(false, unknownType0.isFunctionPrototypeType());
      assertEquals(true, unknownType0.matchesNumberContext());
      assertEquals(false, unknownType0.isEnumType());
      assertEquals(false, unknownType0.isBooleanValueType());
      assertEquals(false, unknownType0.isTemplateType());
      assertEquals(false, unknownType0.isOrdinaryFunction());
      assertEquals(true, unknownType0.matchesObjectContext());
      assertEquals(false, unknownType0.isFunctionType());
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, parameterizedType0.isTemplateType());
      assertEquals(false, parameterizedType0.isNumberValueType());
      assertEquals(false, parameterizedType0.hasCachedValues());
      assertEquals(false, parameterizedType0.isVoidType());
      assertEquals(false, parameterizedType0.isFunctionPrototypeType());
      assertEquals(false, parameterizedType0.isStringValueType());
      assertEquals(false, parameterizedType0.isResolved());
      assertEquals(false, parameterizedType0.isBooleanValueType());
      assertEquals(false, parameterizedType0.isNullType());
      assertEquals(BooleanLiteralSet.TRUE, parameterizedType0.getPossibleToBooleanOutcomes());
      assertEquals(BooleanLiteralSet.FALSE, voidType0.getPossibleToBooleanOutcomes());
      assertEquals(false, voidType0.isNumberValueType());
      assertEquals(false, voidType0.isNoType());
      assertEquals(false, voidType0.isConstructor());
      assertEquals(false, voidType0.matchesObjectContext());
      assertEquals(false, voidType0.isNoResolvedType());
      assertEquals(false, voidType0.isBooleanValueType());
      assertEquals(true, voidType0.isVoidType());
      assertEquals(false, voidType0.matchesNumberContext());
      assertEquals(false, voidType0.isEnumElementType());
      assertEquals(false, voidType0.isEnumType());
      assertEquals(false, voidType0.isInterface());
      assertEquals(false, voidType0.isNominalConstructor());
      assertEquals(false, voidType0.isOrdinaryFunction());
      assertEquals(false, voidType0.isStringValueType());
      assertEquals(false, voidType0.isFunctionType());
      assertEquals(false, voidType0.isNullType());
      assertEquals(false, voidType0.isUnionType());
      assertEquals(true, voidType0.matchesStringContext());
      assertEquals(false, voidType0.isCheckedUnknownType());
      assertEquals(false, voidType0.isNominalType());
      assertEquals("undefined", voidType0.getDisplayName());
      assertEquals(false, voidType0.isFunctionPrototypeType());
      assertEquals(false, voidType0.isResolved());
      assertEquals(false, voidType0.isAllType());
      assertEquals(false, voidType0.isTemplateType());
      assertEquals(false, voidType0.isRecordType());
      assertEquals(false, voidType0.isNoObjectType());
      assertNotNull(parameterizedType0);
      
      Set<String> set0 = null;
      parameterizedType0.collectPropertyNames(set0);
      assertEquals(false, unknownType0.isConstructor());
      assertEquals(true, unknownType0.canBeCalled());
      assertEquals(false, unknownType0.isAllType());
      assertEquals(true, unknownType0.isNullable());
      assertEquals(false, unknownType0.isResolved());
      assertEquals(false, unknownType0.isEnumElementType());
      assertEquals(BooleanLiteralSet.BOTH, unknownType0.getPossibleToBooleanOutcomes());
      assertEquals(false, unknownType0.isNoObjectType());
      assertEquals(false, unknownType0.isStringValueType());
      assertEquals(false, unknownType0.isNativeObjectType());
      assertEquals(false, unknownType0.isRecordType());
      assertEquals(false, unknownType0.isInterface());
      assertEquals(false, unknownType0.isNominalType());
      assertEquals(false, unknownType0.isNumberValueType());
      assertEquals("??", unknownType0.getReferenceName());
      assertEquals(true, unknownType0.matchesStringContext());
      assertEquals(false, unknownType0.isNoResolvedType());
      assertEquals(false, unknownType0.hasCachedValues());
      assertEquals("Unknown", unknownType0.getDisplayName());
      assertEquals(true, unknownType0.hasDisplayName());
      assertEquals(false, unknownType0.isVoidType());
      assertEquals(false, unknownType0.isUnionType());
      assertEquals(2147483647, unknownType0.getPropertiesCount());
      assertEquals(false, unknownType0.isNoType());
      assertEquals(false, unknownType0.isNullType());
      assertEquals(false, unknownType0.isNominalConstructor());
      assertEquals(false, unknownType0.hasReferenceName());
      assertEquals(true, unknownType0.isCheckedUnknownType());
      assertEquals(true, unknownType0.isUnknownType());
      assertEquals(false, unknownType0.isFunctionPrototypeType());
      assertEquals(true, unknownType0.matchesNumberContext());
      assertEquals(false, unknownType0.isEnumType());
      assertEquals(false, unknownType0.isBooleanValueType());
      assertEquals(false, unknownType0.isTemplateType());
      assertEquals(false, unknownType0.isOrdinaryFunction());
      assertEquals(true, unknownType0.matchesObjectContext());
      assertEquals(false, unknownType0.isFunctionType());
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, parameterizedType0.isTemplateType());
      assertEquals(false, parameterizedType0.isNumberValueType());
      assertEquals(false, parameterizedType0.hasCachedValues());
      assertEquals(false, parameterizedType0.isVoidType());
      assertEquals(false, parameterizedType0.isFunctionPrototypeType());
      assertEquals(false, parameterizedType0.isStringValueType());
      assertEquals(false, parameterizedType0.isResolved());
      assertEquals(false, parameterizedType0.isBooleanValueType());
      assertEquals(false, parameterizedType0.isNullType());
      assertEquals(BooleanLiteralSet.TRUE, parameterizedType0.getPossibleToBooleanOutcomes());
      assertEquals(BooleanLiteralSet.FALSE, voidType0.getPossibleToBooleanOutcomes());
      assertEquals(false, voidType0.isNumberValueType());
      assertEquals(false, voidType0.isNoType());
      assertEquals(false, voidType0.isConstructor());
      assertEquals(false, voidType0.matchesObjectContext());
      assertEquals(false, voidType0.isNoResolvedType());
      assertEquals(false, voidType0.isBooleanValueType());
      assertEquals(true, voidType0.isVoidType());
      assertEquals(false, voidType0.matchesNumberContext());
      assertEquals(false, voidType0.isEnumElementType());
      assertEquals(false, voidType0.isEnumType());
      assertEquals(false, voidType0.isInterface());
      assertEquals(false, voidType0.isNominalConstructor());
      assertEquals(false, voidType0.isOrdinaryFunction());
      assertEquals(false, voidType0.isStringValueType());
      assertEquals(false, voidType0.isFunctionType());
      assertEquals(false, voidType0.isNullType());
      assertEquals(false, voidType0.isUnionType());
      assertEquals(true, voidType0.matchesStringContext());
      assertEquals(false, voidType0.isCheckedUnknownType());
      assertEquals(false, voidType0.isNominalType());
      assertEquals("undefined", voidType0.getDisplayName());
      assertEquals(false, voidType0.isFunctionPrototypeType());
      assertEquals(false, voidType0.isResolved());
      assertEquals(false, voidType0.isAllType());
      assertEquals(false, voidType0.isTemplateType());
      assertEquals(false, voidType0.isRecordType());
      assertEquals(false, voidType0.isNoObjectType());
  }

  @Test
  public void test22()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      boolean boolean0 = true;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0, boolean0);
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      String string0 = "}";
      TemplateType templateType0 = new TemplateType(jSTypeRegistry0, string0);
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, templateType0.isRecordType());
      assertEquals(true, templateType0.isTemplateType());
      assertEquals(false, templateType0.isNominalConstructor());
      assertEquals(false, templateType0.isEnumType());
      assertEquals(false, templateType0.isUnionType());
      assertEquals(BooleanLiteralSet.TRUE, templateType0.getPossibleToBooleanOutcomes());
      assertEquals(false, templateType0.isVoidType());
      assertEquals(false, templateType0.isEnumElementType());
      assertEquals(false, templateType0.isStringValueType());
      assertEquals("}", templateType0.getReferenceName());
      assertEquals(false, templateType0.isResolved());
      assertEquals(false, templateType0.isBooleanValueType());
      assertEquals(false, templateType0.isNullType());
      assertEquals(false, templateType0.isFunctionType());
      assertEquals(false, templateType0.isNumberValueType());
      assertEquals(false, templateType0.isFunctionPrototypeType());
      assertEquals(false, templateType0.hasCachedValues());
      assertNotNull(templateType0);
      
      int int0 = templateType0.getPropertiesCount();
      assertEquals(Integer.MAX_VALUE, int0);
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, templateType0.isRecordType());
      assertEquals(true, templateType0.isTemplateType());
      assertEquals(false, templateType0.isNominalConstructor());
      assertEquals(false, templateType0.isEnumType());
      assertEquals(false, templateType0.isUnionType());
      assertEquals(BooleanLiteralSet.TRUE, templateType0.getPossibleToBooleanOutcomes());
      assertEquals(false, templateType0.isVoidType());
      assertEquals(false, templateType0.isEnumElementType());
      assertEquals(false, templateType0.isStringValueType());
      assertEquals("}", templateType0.getReferenceName());
      assertEquals(false, templateType0.isResolved());
      assertEquals(false, templateType0.isBooleanValueType());
      assertEquals(false, templateType0.isNullType());
      assertEquals(false, templateType0.isFunctionType());
      assertEquals(false, templateType0.isNumberValueType());
      assertEquals(false, templateType0.isFunctionPrototypeType());
      assertEquals(false, templateType0.hasCachedValues());
  }

  @Test
  public void test23()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      boolean boolean0 = true;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0, boolean0);
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      String string0 = null;
      JSType jSType0 = null;
      ProxyObjectType proxyObjectType0 = new ProxyObjectType(jSTypeRegistry0, jSType0);
      assertEquals(false, proxyObjectType0.isBooleanValueType());
      assertEquals(false, proxyObjectType0.isNullType());
      assertEquals(false, proxyObjectType0.isVoidType());
      assertEquals(false, proxyObjectType0.isStringValueType());
      assertEquals(false, proxyObjectType0.isNumberValueType());
      assertEquals(false, proxyObjectType0.isTemplateType());
      assertEquals(false, proxyObjectType0.isFunctionPrototypeType());
      assertEquals(false, proxyObjectType0.isResolved());
      assertEquals(false, proxyObjectType0.hasCachedValues());
      assertEquals(BooleanLiteralSet.TRUE, proxyObjectType0.getPossibleToBooleanOutcomes());
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(proxyObjectType0);
      
      boolean boolean1 = proxyObjectType0.isPropertyInExterns(string0);
      assertFalse(boolean1);
      assertEquals(false, proxyObjectType0.isBooleanValueType());
      assertEquals(false, proxyObjectType0.isNullType());
      assertEquals(false, proxyObjectType0.isVoidType());
      assertEquals(false, proxyObjectType0.isStringValueType());
      assertEquals(false, proxyObjectType0.isNumberValueType());
      assertEquals(false, proxyObjectType0.isTemplateType());
      assertEquals(false, proxyObjectType0.isFunctionPrototypeType());
      assertEquals(false, proxyObjectType0.isResolved());
      assertEquals(false, proxyObjectType0.hasCachedValues());
      assertEquals(BooleanLiteralSet.TRUE, proxyObjectType0.getPossibleToBooleanOutcomes());
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean0 == boolean1);
  }

  @Test
  public void test24()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      boolean boolean0 = true;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0, boolean0);
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      NullType nullType0 = new NullType(jSTypeRegistry0);
      assertEquals(BooleanLiteralSet.FALSE, nullType0.getPossibleToBooleanOutcomes());
      assertEquals(false, nullType0.isBooleanValueType());
      assertEquals(false, nullType0.isVoidType());
      assertEquals(true, nullType0.matchesStringContext());
      assertEquals(false, nullType0.isNoResolvedType());
      assertEquals(false, nullType0.isFunctionType());
      assertEquals(false, nullType0.isUnionType());
      assertEquals(false, nullType0.isInterface());
      assertEquals(false, nullType0.isEnumElementType());
      assertEquals(false, nullType0.isResolved());
      assertEquals(false, nullType0.isEnumType());
      assertEquals(false, nullType0.isStringValueType());
      assertEquals(false, nullType0.isOrdinaryFunction());
      assertEquals(true, nullType0.isNullable());
      assertEquals(false, nullType0.isAllType());
      assertEquals(false, nullType0.isCheckedUnknownType());
      assertEquals(false, nullType0.matchesObjectContext());
      assertEquals(false, nullType0.isNominalType());
      assertEquals(false, nullType0.isNoObjectType());
      assertEquals(true, nullType0.matchesNumberContext());
      assertEquals(false, nullType0.isTemplateType());
      assertEquals(true, nullType0.isNullType());
      assertEquals(false, nullType0.isNoType());
      assertEquals(false, nullType0.isFunctionPrototypeType());
      assertEquals(false, nullType0.isConstructor());
      assertEquals(false, nullType0.isRecordType());
      assertEquals("null", nullType0.getDisplayName());
      assertEquals(false, nullType0.isNominalConstructor());
      assertEquals(false, nullType0.isNumberValueType());
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(nullType0);
      
      NoType noType0 = (NoType)nullType0.dereference();
      assertEquals(BooleanLiteralSet.FALSE, nullType0.getPossibleToBooleanOutcomes());
      assertEquals(false, nullType0.isBooleanValueType());
      assertEquals(false, nullType0.isVoidType());
      assertEquals(true, nullType0.matchesStringContext());
      assertEquals(false, nullType0.isNoResolvedType());
      assertEquals(false, nullType0.isFunctionType());
      assertEquals(false, nullType0.isUnionType());
      assertEquals(false, nullType0.isInterface());
      assertEquals(false, nullType0.isEnumElementType());
      assertEquals(false, nullType0.isResolved());
      assertEquals(false, nullType0.isEnumType());
      assertEquals(false, nullType0.isStringValueType());
      assertEquals(false, nullType0.isOrdinaryFunction());
      assertEquals(true, nullType0.isNullable());
      assertEquals(false, nullType0.isAllType());
      assertEquals(false, nullType0.isCheckedUnknownType());
      assertEquals(false, nullType0.matchesObjectContext());
      assertEquals(false, nullType0.isNominalType());
      assertEquals(false, nullType0.isNoObjectType());
      assertEquals(true, nullType0.matchesNumberContext());
      assertEquals(false, nullType0.isTemplateType());
      assertEquals(true, nullType0.isNullType());
      assertEquals(false, nullType0.isNoType());
      assertEquals(false, nullType0.isFunctionPrototypeType());
      assertEquals(false, nullType0.isConstructor());
      assertEquals(false, nullType0.isRecordType());
      assertEquals("null", nullType0.getDisplayName());
      assertEquals(false, nullType0.isNominalConstructor());
      assertEquals(false, nullType0.isNumberValueType());
      assertEquals(false, noType0.isNullType());
      assertEquals(false, noType0.isNumberValueType());
      assertEquals(false, noType0.isUnionType());
      assertEquals(false, noType0.hasCachedValues());
      assertEquals(false, noType0.isNoResolvedType());
      assertEquals(true, noType0.hasInstanceType());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noType0.isOrdinaryFunction());
      assertNull(noType0.getTemplateTypeName());
      assertEquals(false, noType0.isNominalType());
      assertEquals(false, noType0.isResolved());
      assertEquals(false, noType0.isCheckedUnknownType());
      assertEquals(false, noType0.isAllType());
      assertEquals(false, noType0.isFunctionPrototypeType());
      assertEquals(true, noType0.isNullable());
      assertEquals(false, noType0.isFunctionType());
      assertNull(noType0.getReferenceName());
      assertEquals(2147483647, noType0.getPropertiesCount());
      assertEquals(true, noType0.canBeCalled());
      assertEquals(false, noType0.isNoObjectType());
      assertEquals(true, noType0.isNoType());
      assertEquals(false, noType0.isStringValueType());
      assertEquals(false, noType0.isBooleanValueType());
      assertEquals(false, noType0.isNominalConstructor());
      assertEquals(true, noType0.matchesObjectContext());
      assertEquals(0, noType0.getExtendedInterfacesCount());
      assertEquals(false, noType0.isVoidType());
      assertEquals(false, noType0.isReturnTypeInferred());
      assertEquals(false, noType0.isEnumType());
      assertEquals(false, noType0.isRecordType());
      assertEquals(true, noType0.matchesStringContext());
      assertEquals(false, noType0.isTemplateType());
      assertEquals(false, noType0.isEnumElementType());
      assertEquals(false, noType0.isInterface());
      assertEquals(true, noType0.isConstructor());
      assertEquals(2147483647, noType0.getMaxArguments());
      assertEquals(true, noType0.matchesNumberContext());
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(noType0);
      
      ParameterizedType parameterizedType0 = jSTypeRegistry0.createParameterizedType((ObjectType) noType0, (JSType) noType0);
      assertEquals(BooleanLiteralSet.FALSE, nullType0.getPossibleToBooleanOutcomes());
      assertEquals(false, nullType0.isBooleanValueType());
      assertEquals(false, nullType0.isVoidType());
      assertEquals(true, nullType0.matchesStringContext());
      assertEquals(false, nullType0.isNoResolvedType());
      assertEquals(false, nullType0.isFunctionType());
      assertEquals(false, nullType0.isUnionType());
      assertEquals(false, nullType0.isInterface());
      assertEquals(false, nullType0.isEnumElementType());
      assertEquals(false, nullType0.isResolved());
      assertEquals(false, nullType0.isEnumType());
      assertEquals(false, nullType0.isStringValueType());
      assertEquals(false, nullType0.isOrdinaryFunction());
      assertEquals(true, nullType0.isNullable());
      assertEquals(false, nullType0.isAllType());
      assertEquals(false, nullType0.isCheckedUnknownType());
      assertEquals(false, nullType0.matchesObjectContext());
      assertEquals(false, nullType0.isNominalType());
      assertEquals(false, nullType0.isNoObjectType());
      assertEquals(true, nullType0.matchesNumberContext());
      assertEquals(false, nullType0.isTemplateType());
      assertEquals(true, nullType0.isNullType());
      assertEquals(false, nullType0.isNoType());
      assertEquals(false, nullType0.isFunctionPrototypeType());
      assertEquals(false, nullType0.isConstructor());
      assertEquals(false, nullType0.isRecordType());
      assertEquals("null", nullType0.getDisplayName());
      assertEquals(false, nullType0.isNominalConstructor());
      assertEquals(false, nullType0.isNumberValueType());
      assertEquals(false, parameterizedType0.isResolved());
      assertEquals(false, parameterizedType0.isNumberValueType());
      assertEquals(BooleanLiteralSet.TRUE, parameterizedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, parameterizedType0.hasCachedValues());
      assertEquals(false, parameterizedType0.isBooleanValueType());
      assertEquals(false, parameterizedType0.isFunctionType());
      assertEquals(false, parameterizedType0.isEnumElementType());
      assertEquals(false, parameterizedType0.isNullType());
      assertEquals(false, parameterizedType0.isUnionType());
      assertEquals(false, parameterizedType0.isNominalConstructor());
      assertEquals(false, parameterizedType0.isEnumType());
      assertEquals(false, parameterizedType0.isVoidType());
      assertEquals(false, parameterizedType0.isFunctionPrototypeType());
      assertEquals(false, parameterizedType0.isStringValueType());
      assertEquals(false, parameterizedType0.isRecordType());
      assertEquals(false, parameterizedType0.isTemplateType());
      assertEquals(false, noType0.isNullType());
      assertEquals(false, noType0.isNumberValueType());
      assertEquals(false, noType0.isUnionType());
      assertEquals(false, noType0.hasCachedValues());
      assertEquals(false, noType0.isNoResolvedType());
      assertEquals(true, noType0.hasInstanceType());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noType0.isOrdinaryFunction());
      assertNull(noType0.getTemplateTypeName());
      assertEquals(false, noType0.isNominalType());
      assertEquals(false, noType0.isResolved());
      assertEquals(false, noType0.isCheckedUnknownType());
      assertEquals(false, noType0.isAllType());
      assertEquals(false, noType0.isFunctionPrototypeType());
      assertEquals(true, noType0.isNullable());
      assertEquals(false, noType0.isFunctionType());
      assertNull(noType0.getReferenceName());
      assertEquals(2147483647, noType0.getPropertiesCount());
      assertEquals(true, noType0.canBeCalled());
      assertEquals(false, noType0.isNoObjectType());
      assertEquals(true, noType0.isNoType());
      assertEquals(false, noType0.isStringValueType());
      assertEquals(false, noType0.isBooleanValueType());
      assertEquals(false, noType0.isNominalConstructor());
      assertEquals(true, noType0.matchesObjectContext());
      assertEquals(0, noType0.getExtendedInterfacesCount());
      assertEquals(false, noType0.isVoidType());
      assertEquals(false, noType0.isReturnTypeInferred());
      assertEquals(false, noType0.isEnumType());
      assertEquals(false, noType0.isRecordType());
      assertEquals(true, noType0.matchesStringContext());
      assertEquals(false, noType0.isTemplateType());
      assertEquals(false, noType0.isEnumElementType());
      assertEquals(false, noType0.isInterface());
      assertEquals(true, noType0.isConstructor());
      assertEquals(2147483647, noType0.getMaxArguments());
      assertEquals(true, noType0.matchesNumberContext());
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(parameterizedType0);
      
      String string0 = null;
      // Undeclared exception!
      try {
        boolean boolean1 = parameterizedType0.isPropertyInExterns(string0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test25()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      boolean boolean0 = true;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0, boolean0);
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      String string0 = null;
      JSType jSType0 = null;
      ProxyObjectType proxyObjectType0 = new ProxyObjectType(jSTypeRegistry0, jSType0);
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, proxyObjectType0.isNullType());
      assertEquals(false, proxyObjectType0.isStringValueType());
      assertEquals(false, proxyObjectType0.hasCachedValues());
      assertEquals(false, proxyObjectType0.isBooleanValueType());
      assertEquals(false, proxyObjectType0.isVoidType());
      assertEquals(false, proxyObjectType0.isNumberValueType());
      assertEquals(false, proxyObjectType0.isFunctionPrototypeType());
      assertEquals(false, proxyObjectType0.isResolved());
      assertEquals(BooleanLiteralSet.TRUE, proxyObjectType0.getPossibleToBooleanOutcomes());
      assertEquals(false, proxyObjectType0.isTemplateType());
      assertNotNull(proxyObjectType0);
      
      boolean boolean1 = proxyObjectType0.isPropertyTypeInferred(string0);
      assertFalse(boolean1);
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, proxyObjectType0.isNullType());
      assertEquals(false, proxyObjectType0.isStringValueType());
      assertEquals(false, proxyObjectType0.hasCachedValues());
      assertEquals(false, proxyObjectType0.isBooleanValueType());
      assertEquals(false, proxyObjectType0.isVoidType());
      assertEquals(false, proxyObjectType0.isNumberValueType());
      assertEquals(false, proxyObjectType0.isFunctionPrototypeType());
      assertEquals(false, proxyObjectType0.isResolved());
      assertEquals(BooleanLiteralSet.TRUE, proxyObjectType0.getPossibleToBooleanOutcomes());
      assertEquals(false, proxyObjectType0.isTemplateType());
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean0 == boolean1);
  }

  @Test
  public void test26()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      boolean boolean0 = true;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0, boolean0);
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      NullType nullType0 = new NullType(jSTypeRegistry0);
      assertEquals(false, nullType0.isVoidType());
      assertEquals(true, nullType0.matchesStringContext());
      assertEquals(false, nullType0.isNoObjectType());
      assertEquals(false, nullType0.isRecordType());
      assertEquals(true, nullType0.matchesNumberContext());
      assertEquals(false, nullType0.isUnionType());
      assertEquals("null", nullType0.getDisplayName());
      assertEquals(false, nullType0.isEnumType());
      assertEquals(false, nullType0.matchesObjectContext());
      assertEquals(false, nullType0.isFunctionPrototypeType());
      assertEquals(BooleanLiteralSet.FALSE, nullType0.getPossibleToBooleanOutcomes());
      assertEquals(false, nullType0.isTemplateType());
      assertEquals(false, nullType0.isNominalType());
      assertEquals(false, nullType0.isEnumElementType());
      assertEquals(false, nullType0.isInterface());
      assertEquals(false, nullType0.isResolved());
      assertEquals(true, nullType0.isNullable());
      assertEquals(true, nullType0.isNullType());
      assertEquals(false, nullType0.isBooleanValueType());
      assertEquals(false, nullType0.isNoResolvedType());
      assertEquals(false, nullType0.isNumberValueType());
      assertEquals(false, nullType0.isFunctionType());
      assertEquals(false, nullType0.isCheckedUnknownType());
      assertEquals(false, nullType0.isNoType());
      assertEquals(false, nullType0.isConstructor());
      assertEquals(false, nullType0.isNominalConstructor());
      assertEquals(false, nullType0.isStringValueType());
      assertEquals(false, nullType0.isOrdinaryFunction());
      assertEquals(false, nullType0.isAllType());
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(nullType0);
      
      NoType noType0 = (NoType)nullType0.dereference();
      assertEquals(true, noType0.matchesNumberContext());
      assertEquals(true, noType0.matchesObjectContext());
      assertEquals(false, noType0.isResolved());
      assertEquals(false, noType0.isEnumElementType());
      assertEquals(2147483647, noType0.getPropertiesCount());
      assertEquals(false, noType0.isNumberValueType());
      assertEquals(false, noType0.isAllType());
      assertEquals(true, noType0.isNullable());
      assertEquals(false, noType0.isEnumType());
      assertEquals(false, noType0.isInterface());
      assertEquals(false, noType0.isNoObjectType());
      assertNull(noType0.getReferenceName());
      assertEquals(true, noType0.isNoType());
      assertEquals(0, noType0.getExtendedInterfacesCount());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noType0.isOrdinaryFunction());
      assertEquals(false, noType0.isTemplateType());
      assertEquals(false, noType0.isUnionType());
      assertEquals(true, noType0.isConstructor());
      assertEquals(false, noType0.isStringValueType());
      assertEquals(false, noType0.isVoidType());
      assertEquals(false, noType0.isBooleanValueType());
      assertEquals(false, noType0.isReturnTypeInferred());
      assertEquals(false, noType0.isNullType());
      assertEquals(false, noType0.isFunctionPrototypeType());
      assertEquals(false, noType0.isCheckedUnknownType());
      assertEquals(true, noType0.matchesStringContext());
      assertEquals(false, noType0.isFunctionType());
      assertEquals(false, noType0.isNoResolvedType());
      assertEquals(true, noType0.hasInstanceType());
      assertEquals(true, noType0.canBeCalled());
      assertEquals(false, noType0.hasCachedValues());
      assertNull(noType0.getTemplateTypeName());
      assertEquals(false, noType0.isRecordType());
      assertEquals(false, noType0.isNominalType());
      assertEquals(false, noType0.isNominalConstructor());
      assertEquals(2147483647, noType0.getMaxArguments());
      assertEquals(false, nullType0.isVoidType());
      assertEquals(true, nullType0.matchesStringContext());
      assertEquals(false, nullType0.isNoObjectType());
      assertEquals(false, nullType0.isRecordType());
      assertEquals(true, nullType0.matchesNumberContext());
      assertEquals(false, nullType0.isUnionType());
      assertEquals("null", nullType0.getDisplayName());
      assertEquals(false, nullType0.isEnumType());
      assertEquals(false, nullType0.matchesObjectContext());
      assertEquals(false, nullType0.isFunctionPrototypeType());
      assertEquals(BooleanLiteralSet.FALSE, nullType0.getPossibleToBooleanOutcomes());
      assertEquals(false, nullType0.isTemplateType());
      assertEquals(false, nullType0.isNominalType());
      assertEquals(false, nullType0.isEnumElementType());
      assertEquals(false, nullType0.isInterface());
      assertEquals(false, nullType0.isResolved());
      assertEquals(true, nullType0.isNullable());
      assertEquals(true, nullType0.isNullType());
      assertEquals(false, nullType0.isBooleanValueType());
      assertEquals(false, nullType0.isNoResolvedType());
      assertEquals(false, nullType0.isNumberValueType());
      assertEquals(false, nullType0.isFunctionType());
      assertEquals(false, nullType0.isCheckedUnknownType());
      assertEquals(false, nullType0.isNoType());
      assertEquals(false, nullType0.isConstructor());
      assertEquals(false, nullType0.isNominalConstructor());
      assertEquals(false, nullType0.isStringValueType());
      assertEquals(false, nullType0.isOrdinaryFunction());
      assertEquals(false, nullType0.isAllType());
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(noType0);
      
      ParameterizedType parameterizedType0 = jSTypeRegistry0.createParameterizedType((ObjectType) noType0, (JSType) noType0);
      assertEquals(true, noType0.matchesNumberContext());
      assertEquals(true, noType0.matchesObjectContext());
      assertEquals(false, noType0.isResolved());
      assertEquals(false, noType0.isEnumElementType());
      assertEquals(2147483647, noType0.getPropertiesCount());
      assertEquals(false, noType0.isNumberValueType());
      assertEquals(false, noType0.isAllType());
      assertEquals(true, noType0.isNullable());
      assertEquals(false, noType0.isEnumType());
      assertEquals(false, noType0.isInterface());
      assertEquals(false, noType0.isNoObjectType());
      assertNull(noType0.getReferenceName());
      assertEquals(true, noType0.isNoType());
      assertEquals(0, noType0.getExtendedInterfacesCount());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noType0.isOrdinaryFunction());
      assertEquals(false, noType0.isTemplateType());
      assertEquals(false, noType0.isUnionType());
      assertEquals(true, noType0.isConstructor());
      assertEquals(false, noType0.isStringValueType());
      assertEquals(false, noType0.isVoidType());
      assertEquals(false, noType0.isBooleanValueType());
      assertEquals(false, noType0.isReturnTypeInferred());
      assertEquals(false, noType0.isNullType());
      assertEquals(false, noType0.isFunctionPrototypeType());
      assertEquals(false, noType0.isCheckedUnknownType());
      assertEquals(true, noType0.matchesStringContext());
      assertEquals(false, noType0.isFunctionType());
      assertEquals(false, noType0.isNoResolvedType());
      assertEquals(true, noType0.hasInstanceType());
      assertEquals(true, noType0.canBeCalled());
      assertEquals(false, noType0.hasCachedValues());
      assertNull(noType0.getTemplateTypeName());
      assertEquals(false, noType0.isRecordType());
      assertEquals(false, noType0.isNominalType());
      assertEquals(false, noType0.isNominalConstructor());
      assertEquals(2147483647, noType0.getMaxArguments());
      assertEquals(false, parameterizedType0.isBooleanValueType());
      assertEquals(false, parameterizedType0.isFunctionPrototypeType());
      assertEquals(false, parameterizedType0.isNominalConstructor());
      assertEquals(false, parameterizedType0.isResolved());
      assertEquals(false, parameterizedType0.isEnumElementType());
      assertEquals(false, parameterizedType0.hasCachedValues());
      assertEquals(BooleanLiteralSet.TRUE, parameterizedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, parameterizedType0.isVoidType());
      assertEquals(false, parameterizedType0.isEnumType());
      assertEquals(false, parameterizedType0.isFunctionType());
      assertEquals(false, parameterizedType0.isStringValueType());
      assertEquals(false, parameterizedType0.isUnionType());
      assertEquals(false, parameterizedType0.isRecordType());
      assertEquals(false, parameterizedType0.isNullType());
      assertEquals(false, parameterizedType0.isNumberValueType());
      assertEquals(false, parameterizedType0.isTemplateType());
      assertEquals(false, nullType0.isVoidType());
      assertEquals(true, nullType0.matchesStringContext());
      assertEquals(false, nullType0.isNoObjectType());
      assertEquals(false, nullType0.isRecordType());
      assertEquals(true, nullType0.matchesNumberContext());
      assertEquals(false, nullType0.isUnionType());
      assertEquals("null", nullType0.getDisplayName());
      assertEquals(false, nullType0.isEnumType());
      assertEquals(false, nullType0.matchesObjectContext());
      assertEquals(false, nullType0.isFunctionPrototypeType());
      assertEquals(BooleanLiteralSet.FALSE, nullType0.getPossibleToBooleanOutcomes());
      assertEquals(false, nullType0.isTemplateType());
      assertEquals(false, nullType0.isNominalType());
      assertEquals(false, nullType0.isEnumElementType());
      assertEquals(false, nullType0.isInterface());
      assertEquals(false, nullType0.isResolved());
      assertEquals(true, nullType0.isNullable());
      assertEquals(true, nullType0.isNullType());
      assertEquals(false, nullType0.isBooleanValueType());
      assertEquals(false, nullType0.isNoResolvedType());
      assertEquals(false, nullType0.isNumberValueType());
      assertEquals(false, nullType0.isFunctionType());
      assertEquals(false, nullType0.isCheckedUnknownType());
      assertEquals(false, nullType0.isNoType());
      assertEquals(false, nullType0.isConstructor());
      assertEquals(false, nullType0.isNominalConstructor());
      assertEquals(false, nullType0.isStringValueType());
      assertEquals(false, nullType0.isOrdinaryFunction());
      assertEquals(false, nullType0.isAllType());
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(parameterizedType0);
      
      String string0 = null;
      boolean boolean1 = parameterizedType0.isPropertyTypeInferred(string0);
      assertFalse(boolean1);
      assertEquals(true, noType0.matchesNumberContext());
      assertEquals(true, noType0.matchesObjectContext());
      assertEquals(false, noType0.isResolved());
      assertEquals(false, noType0.isEnumElementType());
      assertEquals(2147483647, noType0.getPropertiesCount());
      assertEquals(false, noType0.isNumberValueType());
      assertEquals(false, noType0.isAllType());
      assertEquals(true, noType0.isNullable());
      assertEquals(false, noType0.isEnumType());
      assertEquals(false, noType0.isInterface());
      assertEquals(false, noType0.isNoObjectType());
      assertNull(noType0.getReferenceName());
      assertEquals(true, noType0.isNoType());
      assertEquals(0, noType0.getExtendedInterfacesCount());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noType0.isOrdinaryFunction());
      assertEquals(false, noType0.isTemplateType());
      assertEquals(false, noType0.isUnionType());
      assertEquals(true, noType0.isConstructor());
      assertEquals(false, noType0.isStringValueType());
      assertEquals(false, noType0.isVoidType());
      assertEquals(false, noType0.isBooleanValueType());
      assertEquals(false, noType0.isReturnTypeInferred());
      assertEquals(false, noType0.isNullType());
      assertEquals(false, noType0.isFunctionPrototypeType());
      assertEquals(false, noType0.isCheckedUnknownType());
      assertEquals(true, noType0.matchesStringContext());
      assertEquals(false, noType0.isFunctionType());
      assertEquals(false, noType0.isNoResolvedType());
      assertEquals(true, noType0.hasInstanceType());
      assertEquals(true, noType0.canBeCalled());
      assertEquals(false, noType0.hasCachedValues());
      assertNull(noType0.getTemplateTypeName());
      assertEquals(false, noType0.isRecordType());
      assertEquals(false, noType0.isNominalType());
      assertEquals(false, noType0.isNominalConstructor());
      assertEquals(2147483647, noType0.getMaxArguments());
      assertEquals(false, parameterizedType0.isBooleanValueType());
      assertEquals(false, parameterizedType0.isFunctionPrototypeType());
      assertEquals(false, parameterizedType0.isNominalConstructor());
      assertEquals(false, parameterizedType0.isResolved());
      assertEquals(false, parameterizedType0.isEnumElementType());
      assertEquals(false, parameterizedType0.hasCachedValues());
      assertEquals(BooleanLiteralSet.TRUE, parameterizedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, parameterizedType0.isVoidType());
      assertEquals(false, parameterizedType0.isEnumType());
      assertEquals(false, parameterizedType0.isFunctionType());
      assertEquals(false, parameterizedType0.isStringValueType());
      assertEquals(false, parameterizedType0.isUnionType());
      assertEquals(false, parameterizedType0.isRecordType());
      assertEquals(false, parameterizedType0.isNullType());
      assertEquals(false, parameterizedType0.isNumberValueType());
      assertEquals(false, parameterizedType0.isTemplateType());
      assertEquals(false, nullType0.isVoidType());
      assertEquals(true, nullType0.matchesStringContext());
      assertEquals(false, nullType0.isNoObjectType());
      assertEquals(false, nullType0.isRecordType());
      assertEquals(true, nullType0.matchesNumberContext());
      assertEquals(false, nullType0.isUnionType());
      assertEquals("null", nullType0.getDisplayName());
      assertEquals(false, nullType0.isEnumType());
      assertEquals(false, nullType0.matchesObjectContext());
      assertEquals(false, nullType0.isFunctionPrototypeType());
      assertEquals(BooleanLiteralSet.FALSE, nullType0.getPossibleToBooleanOutcomes());
      assertEquals(false, nullType0.isTemplateType());
      assertEquals(false, nullType0.isNominalType());
      assertEquals(false, nullType0.isEnumElementType());
      assertEquals(false, nullType0.isInterface());
      assertEquals(false, nullType0.isResolved());
      assertEquals(true, nullType0.isNullable());
      assertEquals(true, nullType0.isNullType());
      assertEquals(false, nullType0.isBooleanValueType());
      assertEquals(false, nullType0.isNoResolvedType());
      assertEquals(false, nullType0.isNumberValueType());
      assertEquals(false, nullType0.isFunctionType());
      assertEquals(false, nullType0.isCheckedUnknownType());
      assertEquals(false, nullType0.isNoType());
      assertEquals(false, nullType0.isConstructor());
      assertEquals(false, nullType0.isNominalConstructor());
      assertEquals(false, nullType0.isStringValueType());
      assertEquals(false, nullType0.isOrdinaryFunction());
      assertEquals(false, nullType0.isAllType());
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean0 == boolean1);
  }

  @Test
  public void test27()  throws Throwable  {
      String string0 = "A5w)3^X*Pb8qqBfQU";
      JSTypeRegistry jSTypeRegistry0 = null;
      StringType stringType0 = new StringType(jSTypeRegistry0);
      assertEquals(false, stringType0.isVoidType());
      assertEquals(false, stringType0.isBooleanValueType());
      assertEquals(false, stringType0.isNoObjectType());
      assertEquals(false, stringType0.isTemplateType());
      assertEquals(false, stringType0.isFunctionPrototypeType());
      assertEquals(false, stringType0.isEnumElementType());
      assertEquals(false, stringType0.isAllType());
      assertEquals(false, stringType0.isNoType());
      assertEquals("string", stringType0.getDisplayName());
      assertEquals(false, stringType0.isEnumType());
      assertEquals(true, stringType0.matchesNumberContext());
      assertEquals(false, stringType0.isNumberValueType());
      assertEquals(BooleanLiteralSet.BOTH, stringType0.getPossibleToBooleanOutcomes());
      assertEquals(false, stringType0.isConstructor());
      assertEquals(false, stringType0.isResolved());
      assertEquals(false, stringType0.isOrdinaryFunction());
      assertEquals(true, stringType0.matchesObjectContext());
      assertEquals(false, stringType0.isInterface());
      assertEquals(false, stringType0.isUnionType());
      assertEquals(false, stringType0.isCheckedUnknownType());
      assertEquals(true, stringType0.matchesStringContext());
      assertEquals(false, stringType0.isNoResolvedType());
      assertEquals(false, stringType0.isRecordType());
      assertEquals(false, stringType0.isNominalConstructor());
      assertEquals(false, stringType0.isNullType());
      assertEquals(true, stringType0.isStringValueType());
      assertEquals(false, stringType0.isFunctionType());
      assertEquals(false, stringType0.isNominalType());
      assertNotNull(stringType0);
      
      ObjectType objectType0 = stringType0.toObjectType();
      assertEquals(false, stringType0.isVoidType());
      assertEquals(false, stringType0.isBooleanValueType());
      assertEquals(false, stringType0.isNoObjectType());
      assertEquals(false, stringType0.isTemplateType());
      assertEquals(false, stringType0.isFunctionPrototypeType());
      assertEquals(false, stringType0.isEnumElementType());
      assertEquals(false, stringType0.isAllType());
      assertEquals(false, stringType0.isNoType());
      assertEquals("string", stringType0.getDisplayName());
      assertEquals(false, stringType0.isEnumType());
      assertEquals(true, stringType0.matchesNumberContext());
      assertEquals(false, stringType0.isNumberValueType());
      assertEquals(BooleanLiteralSet.BOTH, stringType0.getPossibleToBooleanOutcomes());
      assertEquals(false, stringType0.isConstructor());
      assertEquals(false, stringType0.isResolved());
      assertEquals(false, stringType0.isOrdinaryFunction());
      assertEquals(true, stringType0.matchesObjectContext());
      assertEquals(false, stringType0.isInterface());
      assertEquals(false, stringType0.isUnionType());
      assertEquals(false, stringType0.isCheckedUnknownType());
      assertEquals(true, stringType0.matchesStringContext());
      assertEquals(false, stringType0.isNoResolvedType());
      assertEquals(false, stringType0.isRecordType());
      assertEquals(false, stringType0.isNominalConstructor());
      assertEquals(false, stringType0.isNullType());
      assertEquals(true, stringType0.isStringValueType());
      assertEquals(false, stringType0.isFunctionType());
      assertEquals(false, stringType0.isNominalType());
      assertNull(objectType0);
      
      FunctionType functionType0 = JSType.toMaybeFunctionType((JSType) objectType0);
      assertEquals(false, stringType0.isVoidType());
      assertEquals(false, stringType0.isBooleanValueType());
      assertEquals(false, stringType0.isNoObjectType());
      assertEquals(false, stringType0.isTemplateType());
      assertEquals(false, stringType0.isFunctionPrototypeType());
      assertEquals(false, stringType0.isEnumElementType());
      assertEquals(false, stringType0.isAllType());
      assertEquals(false, stringType0.isNoType());
      assertEquals("string", stringType0.getDisplayName());
      assertEquals(false, stringType0.isEnumType());
      assertEquals(true, stringType0.matchesNumberContext());
      assertEquals(false, stringType0.isNumberValueType());
      assertEquals(BooleanLiteralSet.BOTH, stringType0.getPossibleToBooleanOutcomes());
      assertEquals(false, stringType0.isConstructor());
      assertEquals(false, stringType0.isResolved());
      assertEquals(false, stringType0.isOrdinaryFunction());
      assertEquals(true, stringType0.matchesObjectContext());
      assertEquals(false, stringType0.isInterface());
      assertEquals(false, stringType0.isUnionType());
      assertEquals(false, stringType0.isCheckedUnknownType());
      assertEquals(true, stringType0.matchesStringContext());
      assertEquals(false, stringType0.isNoResolvedType());
      assertEquals(false, stringType0.isRecordType());
      assertEquals(false, stringType0.isNominalConstructor());
      assertEquals(false, stringType0.isNullType());
      assertEquals(true, stringType0.isStringValueType());
      assertEquals(false, stringType0.isFunctionType());
      assertEquals(false, stringType0.isNominalType());
      assertNull(functionType0);
      
      IndexedType indexedType0 = new IndexedType(jSTypeRegistry0, functionType0, stringType0);
      assertEquals(false, stringType0.isVoidType());
      assertEquals(false, stringType0.isBooleanValueType());
      assertEquals(false, stringType0.isNoObjectType());
      assertEquals(false, stringType0.isTemplateType());
      assertEquals(false, stringType0.isFunctionPrototypeType());
      assertEquals(false, stringType0.isEnumElementType());
      assertEquals(false, stringType0.isAllType());
      assertEquals(false, stringType0.isNoType());
      assertEquals("string", stringType0.getDisplayName());
      assertEquals(false, stringType0.isEnumType());
      assertEquals(true, stringType0.matchesNumberContext());
      assertEquals(false, stringType0.isNumberValueType());
      assertEquals(BooleanLiteralSet.BOTH, stringType0.getPossibleToBooleanOutcomes());
      assertEquals(false, stringType0.isConstructor());
      assertEquals(false, stringType0.isResolved());
      assertEquals(false, stringType0.isOrdinaryFunction());
      assertEquals(true, stringType0.matchesObjectContext());
      assertEquals(false, stringType0.isInterface());
      assertEquals(false, stringType0.isUnionType());
      assertEquals(false, stringType0.isCheckedUnknownType());
      assertEquals(true, stringType0.matchesStringContext());
      assertEquals(false, stringType0.isNoResolvedType());
      assertEquals(false, stringType0.isRecordType());
      assertEquals(false, stringType0.isNominalConstructor());
      assertEquals(false, stringType0.isNullType());
      assertEquals(true, stringType0.isStringValueType());
      assertEquals(false, stringType0.isFunctionType());
      assertEquals(false, stringType0.isNominalType());
      assertEquals(BooleanLiteralSet.TRUE, indexedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, indexedType0.isBooleanValueType());
      assertEquals(false, indexedType0.isVoidType());
      assertEquals(false, indexedType0.hasCachedValues());
      assertEquals(false, indexedType0.isResolved());
      assertEquals(false, indexedType0.isNumberValueType());
      assertEquals(false, indexedType0.isFunctionPrototypeType());
      assertEquals(false, indexedType0.isNullType());
      assertEquals(false, indexedType0.isTemplateType());
      assertEquals(false, indexedType0.isStringValueType());
      assertNotNull(indexedType0);
      
      Node node0 = indexedType0.getPropertyNode(string0);
      assertEquals(false, stringType0.isVoidType());
      assertEquals(false, stringType0.isBooleanValueType());
      assertEquals(false, stringType0.isNoObjectType());
      assertEquals(false, stringType0.isTemplateType());
      assertEquals(false, stringType0.isFunctionPrototypeType());
      assertEquals(false, stringType0.isEnumElementType());
      assertEquals(false, stringType0.isAllType());
      assertEquals(false, stringType0.isNoType());
      assertEquals("string", stringType0.getDisplayName());
      assertEquals(false, stringType0.isEnumType());
      assertEquals(true, stringType0.matchesNumberContext());
      assertEquals(false, stringType0.isNumberValueType());
      assertEquals(BooleanLiteralSet.BOTH, stringType0.getPossibleToBooleanOutcomes());
      assertEquals(false, stringType0.isConstructor());
      assertEquals(false, stringType0.isResolved());
      assertEquals(false, stringType0.isOrdinaryFunction());
      assertEquals(true, stringType0.matchesObjectContext());
      assertEquals(false, stringType0.isInterface());
      assertEquals(false, stringType0.isUnionType());
      assertEquals(false, stringType0.isCheckedUnknownType());
      assertEquals(true, stringType0.matchesStringContext());
      assertEquals(false, stringType0.isNoResolvedType());
      assertEquals(false, stringType0.isRecordType());
      assertEquals(false, stringType0.isNominalConstructor());
      assertEquals(false, stringType0.isNullType());
      assertEquals(true, stringType0.isStringValueType());
      assertEquals(false, stringType0.isFunctionType());
      assertEquals(false, stringType0.isNominalType());
      assertEquals(BooleanLiteralSet.TRUE, indexedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, indexedType0.isBooleanValueType());
      assertEquals(false, indexedType0.isVoidType());
      assertEquals(false, indexedType0.hasCachedValues());
      assertEquals(false, indexedType0.isResolved());
      assertEquals(false, indexedType0.isNumberValueType());
      assertEquals(false, indexedType0.isFunctionPrototypeType());
      assertEquals(false, indexedType0.isNullType());
      assertEquals(false, indexedType0.isTemplateType());
      assertEquals(false, indexedType0.isStringValueType());
      assertNull(node0);
  }

  @Test
  public void test28()  throws Throwable  {
      String string0 = "com.gogle.javascript.rhino.jstpe.ProxyObjectType";
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      TemplateType templateType0 = new TemplateType(jSTypeRegistry0, string0);
      assertEquals(false, templateType0.isEnumElementType());
      assertEquals("com.gogle.javascript.rhino.jstpe.ProxyObjectType", templateType0.getReferenceName());
      assertEquals(false, templateType0.isEnumType());
      assertEquals(false, templateType0.isNullType());
      assertEquals(true, templateType0.isTemplateType());
      assertEquals(false, templateType0.isResolved());
      assertEquals(false, templateType0.isNumberValueType());
      assertEquals(false, templateType0.isFunctionPrototypeType());
      assertEquals(false, templateType0.isFunctionType());
      assertEquals(false, templateType0.isVoidType());
      assertEquals(false, templateType0.isRecordType());
      assertEquals(false, templateType0.isUnionType());
      assertEquals(BooleanLiteralSet.TRUE, templateType0.getPossibleToBooleanOutcomes());
      assertEquals(false, templateType0.isBooleanValueType());
      assertEquals(false, templateType0.isNominalConstructor());
      assertEquals(false, templateType0.isStringValueType());
      assertEquals(false, templateType0.hasCachedValues());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(templateType0);
      
      Node node0 = templateType0.getPropertyNode(string0);
      assertEquals(false, templateType0.isEnumElementType());
      assertEquals("com.gogle.javascript.rhino.jstpe.ProxyObjectType", templateType0.getReferenceName());
      assertEquals(false, templateType0.isEnumType());
      assertEquals(false, templateType0.isNullType());
      assertEquals(true, templateType0.isTemplateType());
      assertEquals(false, templateType0.isResolved());
      assertEquals(false, templateType0.isNumberValueType());
      assertEquals(false, templateType0.isFunctionPrototypeType());
      assertEquals(false, templateType0.isFunctionType());
      assertEquals(false, templateType0.isVoidType());
      assertEquals(false, templateType0.isRecordType());
      assertEquals(false, templateType0.isUnionType());
      assertEquals(BooleanLiteralSet.TRUE, templateType0.getPossibleToBooleanOutcomes());
      assertEquals(false, templateType0.isBooleanValueType());
      assertEquals(false, templateType0.isNominalConstructor());
      assertEquals(false, templateType0.isStringValueType());
      assertEquals(false, templateType0.hasCachedValues());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNull(node0);
  }

  @Test
  public void test29()  throws Throwable  {
      String string0 = "A5w)3^X*Pb8qqBfQU";
      JSTypeRegistry jSTypeRegistry0 = null;
      StringType stringType0 = new StringType(jSTypeRegistry0);
      assertEquals(true, stringType0.matchesObjectContext());
      assertEquals(true, stringType0.matchesStringContext());
      assertEquals(BooleanLiteralSet.BOTH, stringType0.getPossibleToBooleanOutcomes());
      assertEquals(false, stringType0.isNullType());
      assertEquals(false, stringType0.isEnumElementType());
      assertEquals(false, stringType0.isFunctionType());
      assertEquals(false, stringType0.isBooleanValueType());
      assertEquals(false, stringType0.isEnumType());
      assertEquals(false, stringType0.isNoObjectType());
      assertEquals(false, stringType0.isNoType());
      assertEquals(false, stringType0.isNominalType());
      assertEquals(true, stringType0.matchesNumberContext());
      assertEquals(false, stringType0.isVoidType());
      assertEquals(false, stringType0.isInterface());
      assertEquals("string", stringType0.getDisplayName());
      assertEquals(false, stringType0.isRecordType());
      assertEquals(false, stringType0.isConstructor());
      assertEquals(false, stringType0.isAllType());
      assertEquals(false, stringType0.isNoResolvedType());
      assertEquals(false, stringType0.isUnionType());
      assertEquals(false, stringType0.isNumberValueType());
      assertEquals(false, stringType0.isFunctionPrototypeType());
      assertEquals(false, stringType0.isCheckedUnknownType());
      assertEquals(false, stringType0.isNominalConstructor());
      assertEquals(false, stringType0.isOrdinaryFunction());
      assertEquals(true, stringType0.isStringValueType());
      assertEquals(false, stringType0.isTemplateType());
      assertEquals(false, stringType0.isResolved());
      assertNotNull(stringType0);
      
      ObjectType objectType0 = stringType0.toObjectType();
      assertEquals(true, stringType0.matchesObjectContext());
      assertEquals(true, stringType0.matchesStringContext());
      assertEquals(BooleanLiteralSet.BOTH, stringType0.getPossibleToBooleanOutcomes());
      assertEquals(false, stringType0.isNullType());
      assertEquals(false, stringType0.isEnumElementType());
      assertEquals(false, stringType0.isFunctionType());
      assertEquals(false, stringType0.isBooleanValueType());
      assertEquals(false, stringType0.isEnumType());
      assertEquals(false, stringType0.isNoObjectType());
      assertEquals(false, stringType0.isNoType());
      assertEquals(false, stringType0.isNominalType());
      assertEquals(true, stringType0.matchesNumberContext());
      assertEquals(false, stringType0.isVoidType());
      assertEquals(false, stringType0.isInterface());
      assertEquals("string", stringType0.getDisplayName());
      assertEquals(false, stringType0.isRecordType());
      assertEquals(false, stringType0.isConstructor());
      assertEquals(false, stringType0.isAllType());
      assertEquals(false, stringType0.isNoResolvedType());
      assertEquals(false, stringType0.isUnionType());
      assertEquals(false, stringType0.isNumberValueType());
      assertEquals(false, stringType0.isFunctionPrototypeType());
      assertEquals(false, stringType0.isCheckedUnknownType());
      assertEquals(false, stringType0.isNominalConstructor());
      assertEquals(false, stringType0.isOrdinaryFunction());
      assertEquals(true, stringType0.isStringValueType());
      assertEquals(false, stringType0.isTemplateType());
      assertEquals(false, stringType0.isResolved());
      assertNull(objectType0);
      
      FunctionType functionType0 = JSType.toMaybeFunctionType((JSType) objectType0);
      assertEquals(true, stringType0.matchesObjectContext());
      assertEquals(true, stringType0.matchesStringContext());
      assertEquals(BooleanLiteralSet.BOTH, stringType0.getPossibleToBooleanOutcomes());
      assertEquals(false, stringType0.isNullType());
      assertEquals(false, stringType0.isEnumElementType());
      assertEquals(false, stringType0.isFunctionType());
      assertEquals(false, stringType0.isBooleanValueType());
      assertEquals(false, stringType0.isEnumType());
      assertEquals(false, stringType0.isNoObjectType());
      assertEquals(false, stringType0.isNoType());
      assertEquals(false, stringType0.isNominalType());
      assertEquals(true, stringType0.matchesNumberContext());
      assertEquals(false, stringType0.isVoidType());
      assertEquals(false, stringType0.isInterface());
      assertEquals("string", stringType0.getDisplayName());
      assertEquals(false, stringType0.isRecordType());
      assertEquals(false, stringType0.isConstructor());
      assertEquals(false, stringType0.isAllType());
      assertEquals(false, stringType0.isNoResolvedType());
      assertEquals(false, stringType0.isUnionType());
      assertEquals(false, stringType0.isNumberValueType());
      assertEquals(false, stringType0.isFunctionPrototypeType());
      assertEquals(false, stringType0.isCheckedUnknownType());
      assertEquals(false, stringType0.isNominalConstructor());
      assertEquals(false, stringType0.isOrdinaryFunction());
      assertEquals(true, stringType0.isStringValueType());
      assertEquals(false, stringType0.isTemplateType());
      assertEquals(false, stringType0.isResolved());
      assertNull(functionType0);
      
      IndexedType indexedType0 = new IndexedType(jSTypeRegistry0, functionType0, stringType0);
      assertEquals(false, indexedType0.isBooleanValueType());
      assertEquals(false, indexedType0.isResolved());
      assertEquals(false, indexedType0.isNumberValueType());
      assertEquals(false, indexedType0.isVoidType());
      assertEquals(BooleanLiteralSet.TRUE, indexedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, indexedType0.isFunctionPrototypeType());
      assertEquals(false, indexedType0.hasCachedValues());
      assertEquals(false, indexedType0.isNullType());
      assertEquals(false, indexedType0.isStringValueType());
      assertEquals(false, indexedType0.isTemplateType());
      assertEquals(true, stringType0.matchesObjectContext());
      assertEquals(true, stringType0.matchesStringContext());
      assertEquals(BooleanLiteralSet.BOTH, stringType0.getPossibleToBooleanOutcomes());
      assertEquals(false, stringType0.isNullType());
      assertEquals(false, stringType0.isEnumElementType());
      assertEquals(false, stringType0.isFunctionType());
      assertEquals(false, stringType0.isBooleanValueType());
      assertEquals(false, stringType0.isEnumType());
      assertEquals(false, stringType0.isNoObjectType());
      assertEquals(false, stringType0.isNoType());
      assertEquals(false, stringType0.isNominalType());
      assertEquals(true, stringType0.matchesNumberContext());
      assertEquals(false, stringType0.isVoidType());
      assertEquals(false, stringType0.isInterface());
      assertEquals("string", stringType0.getDisplayName());
      assertEquals(false, stringType0.isRecordType());
      assertEquals(false, stringType0.isConstructor());
      assertEquals(false, stringType0.isAllType());
      assertEquals(false, stringType0.isNoResolvedType());
      assertEquals(false, stringType0.isUnionType());
      assertEquals(false, stringType0.isNumberValueType());
      assertEquals(false, stringType0.isFunctionPrototypeType());
      assertEquals(false, stringType0.isCheckedUnknownType());
      assertEquals(false, stringType0.isNominalConstructor());
      assertEquals(false, stringType0.isOrdinaryFunction());
      assertEquals(true, stringType0.isStringValueType());
      assertEquals(false, stringType0.isTemplateType());
      assertEquals(false, stringType0.isResolved());
      assertNotNull(indexedType0);
      
      boolean boolean0 = indexedType0.isPropertyTypeDeclared(string0);
      assertFalse(boolean0);
      assertEquals(false, indexedType0.isBooleanValueType());
      assertEquals(false, indexedType0.isResolved());
      assertEquals(false, indexedType0.isNumberValueType());
      assertEquals(false, indexedType0.isVoidType());
      assertEquals(BooleanLiteralSet.TRUE, indexedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, indexedType0.isFunctionPrototypeType());
      assertEquals(false, indexedType0.hasCachedValues());
      assertEquals(false, indexedType0.isNullType());
      assertEquals(false, indexedType0.isStringValueType());
      assertEquals(false, indexedType0.isTemplateType());
      assertEquals(true, stringType0.matchesObjectContext());
      assertEquals(true, stringType0.matchesStringContext());
      assertEquals(BooleanLiteralSet.BOTH, stringType0.getPossibleToBooleanOutcomes());
      assertEquals(false, stringType0.isNullType());
      assertEquals(false, stringType0.isEnumElementType());
      assertEquals(false, stringType0.isFunctionType());
      assertEquals(false, stringType0.isBooleanValueType());
      assertEquals(false, stringType0.isEnumType());
      assertEquals(false, stringType0.isNoObjectType());
      assertEquals(false, stringType0.isNoType());
      assertEquals(false, stringType0.isNominalType());
      assertEquals(true, stringType0.matchesNumberContext());
      assertEquals(false, stringType0.isVoidType());
      assertEquals(false, stringType0.isInterface());
      assertEquals("string", stringType0.getDisplayName());
      assertEquals(false, stringType0.isRecordType());
      assertEquals(false, stringType0.isConstructor());
      assertEquals(false, stringType0.isAllType());
      assertEquals(false, stringType0.isNoResolvedType());
      assertEquals(false, stringType0.isUnionType());
      assertEquals(false, stringType0.isNumberValueType());
      assertEquals(false, stringType0.isFunctionPrototypeType());
      assertEquals(false, stringType0.isCheckedUnknownType());
      assertEquals(false, stringType0.isNominalConstructor());
      assertEquals(false, stringType0.isOrdinaryFunction());
      assertEquals(true, stringType0.isStringValueType());
      assertEquals(false, stringType0.isTemplateType());
      assertEquals(false, stringType0.isResolved());
  }

  @Test
  public void test30()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      boolean boolean0 = true;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0, boolean0);
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      String string0 = "Z4}D-jR(`*2eS";
      TemplateType templateType0 = new TemplateType(jSTypeRegistry0, string0);
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, templateType0.isFunctionType());
      assertEquals(false, templateType0.isBooleanValueType());
      assertEquals(false, templateType0.isRecordType());
      assertEquals(false, templateType0.isVoidType());
      assertEquals(false, templateType0.isNullType());
      assertEquals("Z4}D-jR(`*2eS", templateType0.getReferenceName());
      assertEquals(false, templateType0.hasCachedValues());
      assertEquals(false, templateType0.isEnumType());
      assertEquals(BooleanLiteralSet.TRUE, templateType0.getPossibleToBooleanOutcomes());
      assertEquals(false, templateType0.isFunctionPrototypeType());
      assertEquals(false, templateType0.isNominalConstructor());
      assertEquals(false, templateType0.isStringValueType());
      assertEquals(false, templateType0.isResolved());
      assertEquals(false, templateType0.isEnumElementType());
      assertEquals(true, templateType0.isTemplateType());
      assertEquals(false, templateType0.isUnionType());
      assertEquals(false, templateType0.isNumberValueType());
      assertNotNull(templateType0);
      
      boolean boolean1 = templateType0.hasOwnDeclaredProperty(string0);
      assertFalse(boolean1);
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, templateType0.isFunctionType());
      assertEquals(false, templateType0.isBooleanValueType());
      assertEquals(false, templateType0.isRecordType());
      assertEquals(false, templateType0.isVoidType());
      assertEquals(false, templateType0.isNullType());
      assertEquals("Z4}D-jR(`*2eS", templateType0.getReferenceName());
      assertEquals(false, templateType0.hasCachedValues());
      assertEquals(false, templateType0.isEnumType());
      assertEquals(BooleanLiteralSet.TRUE, templateType0.getPossibleToBooleanOutcomes());
      assertEquals(false, templateType0.isFunctionPrototypeType());
      assertEquals(false, templateType0.isNominalConstructor());
      assertEquals(false, templateType0.isStringValueType());
      assertEquals(false, templateType0.isResolved());
      assertEquals(false, templateType0.isEnumElementType());
      assertEquals(true, templateType0.isTemplateType());
      assertEquals(false, templateType0.isUnionType());
      assertEquals(false, templateType0.isNumberValueType());
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean0 == boolean1);
  }

  @Test
  public void test31()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      boolean boolean0 = true;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0, boolean0);
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      String string0 = null;
      JSType jSType0 = null;
      ProxyObjectType proxyObjectType0 = new ProxyObjectType(jSTypeRegistry0, jSType0);
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, proxyObjectType0.isTemplateType());
      assertEquals(false, proxyObjectType0.isResolved());
      assertEquals(false, proxyObjectType0.isVoidType());
      assertEquals(false, proxyObjectType0.isBooleanValueType());
      assertEquals(false, proxyObjectType0.hasCachedValues());
      assertEquals(false, proxyObjectType0.isFunctionPrototypeType());
      assertEquals(false, proxyObjectType0.isNumberValueType());
      assertEquals(false, proxyObjectType0.isNullType());
      assertEquals(BooleanLiteralSet.TRUE, proxyObjectType0.getPossibleToBooleanOutcomes());
      assertEquals(false, proxyObjectType0.isStringValueType());
      assertNotNull(proxyObjectType0);
      
      boolean boolean1 = proxyObjectType0.removeProperty(string0);
      assertFalse(boolean1);
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, proxyObjectType0.isTemplateType());
      assertEquals(false, proxyObjectType0.isResolved());
      assertEquals(false, proxyObjectType0.isVoidType());
      assertEquals(false, proxyObjectType0.isBooleanValueType());
      assertEquals(false, proxyObjectType0.hasCachedValues());
      assertEquals(false, proxyObjectType0.isFunctionPrototypeType());
      assertEquals(false, proxyObjectType0.isNumberValueType());
      assertEquals(false, proxyObjectType0.isNullType());
      assertEquals(BooleanLiteralSet.TRUE, proxyObjectType0.getPossibleToBooleanOutcomes());
      assertEquals(false, proxyObjectType0.isStringValueType());
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean0 == boolean1);
  }

  @Test
  public void test32()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      boolean boolean0 = true;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0, boolean0);
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      NullType nullType0 = new NullType(jSTypeRegistry0);
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, nullType0.isFunctionType());
      assertEquals(BooleanLiteralSet.FALSE, nullType0.getPossibleToBooleanOutcomes());
      assertEquals(true, nullType0.isNullable());
      assertEquals(false, nullType0.isResolved());
      assertEquals(false, nullType0.isConstructor());
      assertEquals(false, nullType0.isNoObjectType());
      assertEquals(true, nullType0.matchesStringContext());
      assertEquals(false, nullType0.matchesObjectContext());
      assertEquals(false, nullType0.isNominalConstructor());
      assertEquals(false, nullType0.isEnumType());
      assertEquals(false, nullType0.isFunctionPrototypeType());
      assertEquals(false, nullType0.isCheckedUnknownType());
      assertEquals(true, nullType0.isNullType());
      assertEquals(false, nullType0.isStringValueType());
      assertEquals(false, nullType0.isNumberValueType());
      assertEquals("null", nullType0.getDisplayName());
      assertEquals(false, nullType0.isEnumElementType());
      assertEquals(false, nullType0.isTemplateType());
      assertEquals(false, nullType0.isNoResolvedType());
      assertEquals(false, nullType0.isRecordType());
      assertEquals(false, nullType0.isNominalType());
      assertEquals(false, nullType0.isOrdinaryFunction());
      assertEquals(false, nullType0.isAllType());
      assertEquals(false, nullType0.isInterface());
      assertEquals(false, nullType0.isNoType());
      assertEquals(true, nullType0.matchesNumberContext());
      assertEquals(false, nullType0.isUnionType());
      assertEquals(false, nullType0.isVoidType());
      assertEquals(false, nullType0.isBooleanValueType());
      assertNotNull(nullType0);
      
      NoType noType0 = (NoType)nullType0.dereference();
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, nullType0.isFunctionType());
      assertEquals(BooleanLiteralSet.FALSE, nullType0.getPossibleToBooleanOutcomes());
      assertEquals(true, nullType0.isNullable());
      assertEquals(false, nullType0.isResolved());
      assertEquals(false, nullType0.isConstructor());
      assertEquals(false, nullType0.isNoObjectType());
      assertEquals(true, nullType0.matchesStringContext());
      assertEquals(false, nullType0.matchesObjectContext());
      assertEquals(false, nullType0.isNominalConstructor());
      assertEquals(false, nullType0.isEnumType());
      assertEquals(false, nullType0.isFunctionPrototypeType());
      assertEquals(false, nullType0.isCheckedUnknownType());
      assertEquals(true, nullType0.isNullType());
      assertEquals(false, nullType0.isStringValueType());
      assertEquals(false, nullType0.isNumberValueType());
      assertEquals("null", nullType0.getDisplayName());
      assertEquals(false, nullType0.isEnumElementType());
      assertEquals(false, nullType0.isTemplateType());
      assertEquals(false, nullType0.isNoResolvedType());
      assertEquals(false, nullType0.isRecordType());
      assertEquals(false, nullType0.isNominalType());
      assertEquals(false, nullType0.isOrdinaryFunction());
      assertEquals(false, nullType0.isAllType());
      assertEquals(false, nullType0.isInterface());
      assertEquals(false, nullType0.isNoType());
      assertEquals(true, nullType0.matchesNumberContext());
      assertEquals(false, nullType0.isUnionType());
      assertEquals(false, nullType0.isVoidType());
      assertEquals(false, nullType0.isBooleanValueType());
      assertEquals(false, noType0.isStringValueType());
      assertEquals(false, noType0.isOrdinaryFunction());
      assertEquals(false, noType0.isFunctionType());
      assertEquals(true, noType0.matchesObjectContext());
      assertEquals(false, noType0.isVoidType());
      assertEquals(false, noType0.isNominalType());
      assertEquals(false, noType0.isTemplateType());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertEquals(true, noType0.canBeCalled());
      assertEquals(false, noType0.isNumberValueType());
      assertEquals(false, noType0.isRecordType());
      assertEquals(true, noType0.hasInstanceType());
      assertEquals(false, noType0.isNominalConstructor());
      assertEquals(2147483647, noType0.getMaxArguments());
      assertEquals(true, noType0.matchesNumberContext());
      assertEquals(false, noType0.isFunctionPrototypeType());
      assertEquals(false, noType0.isUnionType());
      assertEquals(false, noType0.isReturnTypeInferred());
      assertNull(noType0.getReferenceName());
      assertNull(noType0.getTemplateTypeName());
      assertEquals(true, noType0.matchesStringContext());
      assertEquals(false, noType0.hasCachedValues());
      assertEquals(false, noType0.isNoObjectType());
      assertEquals(false, noType0.isEnumElementType());
      assertEquals(false, noType0.isBooleanValueType());
      assertEquals(true, noType0.isNoType());
      assertEquals(false, noType0.isNoResolvedType());
      assertEquals(true, noType0.isConstructor());
      assertEquals(false, noType0.isCheckedUnknownType());
      assertEquals(true, noType0.isNullable());
      assertEquals(false, noType0.isAllType());
      assertEquals(2147483647, noType0.getPropertiesCount());
      assertEquals(false, noType0.isInterface());
      assertEquals(0, noType0.getExtendedInterfacesCount());
      assertEquals(false, noType0.isEnumType());
      assertEquals(false, noType0.isResolved());
      assertEquals(false, noType0.isNullType());
      assertNotNull(noType0);
      
      ParameterizedType parameterizedType0 = jSTypeRegistry0.createParameterizedType((ObjectType) noType0, (JSType) noType0);
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, parameterizedType0.isResolved());
      assertEquals(false, parameterizedType0.isVoidType());
      assertEquals(false, parameterizedType0.isBooleanValueType());
      assertEquals(false, parameterizedType0.isFunctionType());
      assertEquals(false, parameterizedType0.isRecordType());
      assertEquals(false, parameterizedType0.isNullType());
      assertEquals(false, parameterizedType0.isNumberValueType());
      assertEquals(false, parameterizedType0.isTemplateType());
      assertEquals(false, parameterizedType0.isEnumType());
      assertEquals(false, parameterizedType0.isStringValueType());
      assertEquals(BooleanLiteralSet.TRUE, parameterizedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, parameterizedType0.isNominalConstructor());
      assertEquals(false, parameterizedType0.isEnumElementType());
      assertEquals(false, parameterizedType0.isFunctionPrototypeType());
      assertEquals(false, parameterizedType0.hasCachedValues());
      assertEquals(false, parameterizedType0.isUnionType());
      assertEquals(false, nullType0.isFunctionType());
      assertEquals(BooleanLiteralSet.FALSE, nullType0.getPossibleToBooleanOutcomes());
      assertEquals(true, nullType0.isNullable());
      assertEquals(false, nullType0.isResolved());
      assertEquals(false, nullType0.isConstructor());
      assertEquals(false, nullType0.isNoObjectType());
      assertEquals(true, nullType0.matchesStringContext());
      assertEquals(false, nullType0.matchesObjectContext());
      assertEquals(false, nullType0.isNominalConstructor());
      assertEquals(false, nullType0.isEnumType());
      assertEquals(false, nullType0.isFunctionPrototypeType());
      assertEquals(false, nullType0.isCheckedUnknownType());
      assertEquals(true, nullType0.isNullType());
      assertEquals(false, nullType0.isStringValueType());
      assertEquals(false, nullType0.isNumberValueType());
      assertEquals("null", nullType0.getDisplayName());
      assertEquals(false, nullType0.isEnumElementType());
      assertEquals(false, nullType0.isTemplateType());
      assertEquals(false, nullType0.isNoResolvedType());
      assertEquals(false, nullType0.isRecordType());
      assertEquals(false, nullType0.isNominalType());
      assertEquals(false, nullType0.isOrdinaryFunction());
      assertEquals(false, nullType0.isAllType());
      assertEquals(false, nullType0.isInterface());
      assertEquals(false, nullType0.isNoType());
      assertEquals(true, nullType0.matchesNumberContext());
      assertEquals(false, nullType0.isUnionType());
      assertEquals(false, nullType0.isVoidType());
      assertEquals(false, nullType0.isBooleanValueType());
      assertEquals(false, noType0.isStringValueType());
      assertEquals(false, noType0.isOrdinaryFunction());
      assertEquals(false, noType0.isFunctionType());
      assertEquals(true, noType0.matchesObjectContext());
      assertEquals(false, noType0.isVoidType());
      assertEquals(false, noType0.isNominalType());
      assertEquals(false, noType0.isTemplateType());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertEquals(true, noType0.canBeCalled());
      assertEquals(false, noType0.isNumberValueType());
      assertEquals(false, noType0.isRecordType());
      assertEquals(true, noType0.hasInstanceType());
      assertEquals(false, noType0.isNominalConstructor());
      assertEquals(2147483647, noType0.getMaxArguments());
      assertEquals(true, noType0.matchesNumberContext());
      assertEquals(false, noType0.isFunctionPrototypeType());
      assertEquals(false, noType0.isUnionType());
      assertEquals(false, noType0.isReturnTypeInferred());
      assertNull(noType0.getReferenceName());
      assertNull(noType0.getTemplateTypeName());
      assertEquals(true, noType0.matchesStringContext());
      assertEquals(false, noType0.hasCachedValues());
      assertEquals(false, noType0.isNoObjectType());
      assertEquals(false, noType0.isEnumElementType());
      assertEquals(false, noType0.isBooleanValueType());
      assertEquals(true, noType0.isNoType());
      assertEquals(false, noType0.isNoResolvedType());
      assertEquals(true, noType0.isConstructor());
      assertEquals(false, noType0.isCheckedUnknownType());
      assertEquals(true, noType0.isNullable());
      assertEquals(false, noType0.isAllType());
      assertEquals(2147483647, noType0.getPropertiesCount());
      assertEquals(false, noType0.isInterface());
      assertEquals(0, noType0.getExtendedInterfacesCount());
      assertEquals(false, noType0.isEnumType());
      assertEquals(false, noType0.isResolved());
      assertEquals(false, noType0.isNullType());
      assertNotNull(parameterizedType0);
      
      String string0 = null;
      boolean boolean1 = parameterizedType0.removeProperty(string0);
      assertFalse(boolean1);
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, parameterizedType0.isResolved());
      assertEquals(false, parameterizedType0.isVoidType());
      assertEquals(false, parameterizedType0.isBooleanValueType());
      assertEquals(false, parameterizedType0.isFunctionType());
      assertEquals(false, parameterizedType0.isRecordType());
      assertEquals(false, parameterizedType0.isNullType());
      assertEquals(false, parameterizedType0.isNumberValueType());
      assertEquals(false, parameterizedType0.isTemplateType());
      assertEquals(false, parameterizedType0.isEnumType());
      assertEquals(false, parameterizedType0.isStringValueType());
      assertEquals(BooleanLiteralSet.TRUE, parameterizedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, parameterizedType0.isNominalConstructor());
      assertEquals(false, parameterizedType0.isEnumElementType());
      assertEquals(false, parameterizedType0.isFunctionPrototypeType());
      assertEquals(false, parameterizedType0.hasCachedValues());
      assertEquals(false, parameterizedType0.isUnionType());
      assertEquals(false, nullType0.isFunctionType());
      assertEquals(BooleanLiteralSet.FALSE, nullType0.getPossibleToBooleanOutcomes());
      assertEquals(true, nullType0.isNullable());
      assertEquals(false, nullType0.isResolved());
      assertEquals(false, nullType0.isConstructor());
      assertEquals(false, nullType0.isNoObjectType());
      assertEquals(true, nullType0.matchesStringContext());
      assertEquals(false, nullType0.matchesObjectContext());
      assertEquals(false, nullType0.isNominalConstructor());
      assertEquals(false, nullType0.isEnumType());
      assertEquals(false, nullType0.isFunctionPrototypeType());
      assertEquals(false, nullType0.isCheckedUnknownType());
      assertEquals(true, nullType0.isNullType());
      assertEquals(false, nullType0.isStringValueType());
      assertEquals(false, nullType0.isNumberValueType());
      assertEquals("null", nullType0.getDisplayName());
      assertEquals(false, nullType0.isEnumElementType());
      assertEquals(false, nullType0.isTemplateType());
      assertEquals(false, nullType0.isNoResolvedType());
      assertEquals(false, nullType0.isRecordType());
      assertEquals(false, nullType0.isNominalType());
      assertEquals(false, nullType0.isOrdinaryFunction());
      assertEquals(false, nullType0.isAllType());
      assertEquals(false, nullType0.isInterface());
      assertEquals(false, nullType0.isNoType());
      assertEquals(true, nullType0.matchesNumberContext());
      assertEquals(false, nullType0.isUnionType());
      assertEquals(false, nullType0.isVoidType());
      assertEquals(false, nullType0.isBooleanValueType());
      assertEquals(false, noType0.isStringValueType());
      assertEquals(false, noType0.isOrdinaryFunction());
      assertEquals(false, noType0.isFunctionType());
      assertEquals(true, noType0.matchesObjectContext());
      assertEquals(false, noType0.isVoidType());
      assertEquals(false, noType0.isNominalType());
      assertEquals(false, noType0.isTemplateType());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertEquals(true, noType0.canBeCalled());
      assertEquals(false, noType0.isNumberValueType());
      assertEquals(false, noType0.isRecordType());
      assertEquals(true, noType0.hasInstanceType());
      assertEquals(false, noType0.isNominalConstructor());
      assertEquals(2147483647, noType0.getMaxArguments());
      assertEquals(true, noType0.matchesNumberContext());
      assertEquals(false, noType0.isFunctionPrototypeType());
      assertEquals(false, noType0.isUnionType());
      assertEquals(false, noType0.isReturnTypeInferred());
      assertNull(noType0.getReferenceName());
      assertNull(noType0.getTemplateTypeName());
      assertEquals(true, noType0.matchesStringContext());
      assertEquals(false, noType0.hasCachedValues());
      assertEquals(false, noType0.isNoObjectType());
      assertEquals(false, noType0.isEnumElementType());
      assertEquals(false, noType0.isBooleanValueType());
      assertEquals(true, noType0.isNoType());
      assertEquals(false, noType0.isNoResolvedType());
      assertEquals(true, noType0.isConstructor());
      assertEquals(false, noType0.isCheckedUnknownType());
      assertEquals(true, noType0.isNullable());
      assertEquals(false, noType0.isAllType());
      assertEquals(2147483647, noType0.getPropertiesCount());
      assertEquals(false, noType0.isInterface());
      assertEquals(0, noType0.getExtendedInterfacesCount());
      assertEquals(false, noType0.isEnumType());
      assertEquals(false, noType0.isResolved());
      assertEquals(false, noType0.isNullType());
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean0 == boolean1);
  }

  @Test
  public void test33()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = null;
      NumberType numberType0 = new NumberType(jSTypeRegistry0);
      assertEquals(true, numberType0.matchesStringContext());
      assertEquals(true, numberType0.isNumberValueType());
      assertEquals(false, numberType0.isTemplateType());
      assertEquals(false, numberType0.isNominalType());
      assertEquals(false, numberType0.isUnionType());
      assertEquals(false, numberType0.isEnumElementType());
      assertEquals(false, numberType0.isBooleanValueType());
      assertEquals("number", numberType0.getDisplayName());
      assertEquals(false, numberType0.isInterface());
      assertEquals(false, numberType0.isRecordType());
      assertEquals(false, numberType0.isCheckedUnknownType());
      assertEquals(false, numberType0.isNoObjectType());
      assertEquals(false, numberType0.isFunctionPrototypeType());
      assertEquals(false, numberType0.isAllType());
      assertEquals(false, numberType0.isFunctionType());
      assertEquals(false, numberType0.isNominalConstructor());
      assertEquals(false, numberType0.isNullable());
      assertEquals(false, numberType0.isConstructor());
      assertEquals(false, numberType0.isStringValueType());
      assertEquals(false, numberType0.isNoResolvedType());
      assertEquals(false, numberType0.isVoidType());
      assertEquals(false, numberType0.isNoType());
      assertEquals(false, numberType0.isEnumType());
      assertEquals(false, numberType0.isResolved());
      assertEquals(false, numberType0.isOrdinaryFunction());
      assertEquals(false, numberType0.isNullType());
      assertEquals(BooleanLiteralSet.BOTH, numberType0.getPossibleToBooleanOutcomes());
      assertEquals(true, numberType0.matchesNumberContext());
      assertEquals(true, numberType0.matchesObjectContext());
      assertNotNull(numberType0);
      
      FunctionType functionType0 = numberType0.toMaybeFunctionType();
      assertEquals(true, numberType0.matchesStringContext());
      assertEquals(true, numberType0.isNumberValueType());
      assertEquals(false, numberType0.isTemplateType());
      assertEquals(false, numberType0.isNominalType());
      assertEquals(false, numberType0.isUnionType());
      assertEquals(false, numberType0.isEnumElementType());
      assertEquals(false, numberType0.isBooleanValueType());
      assertEquals("number", numberType0.getDisplayName());
      assertEquals(false, numberType0.isInterface());
      assertEquals(false, numberType0.isRecordType());
      assertEquals(false, numberType0.isCheckedUnknownType());
      assertEquals(false, numberType0.isNoObjectType());
      assertEquals(false, numberType0.isFunctionPrototypeType());
      assertEquals(false, numberType0.isAllType());
      assertEquals(false, numberType0.isFunctionType());
      assertEquals(false, numberType0.isNominalConstructor());
      assertEquals(false, numberType0.isNullable());
      assertEquals(false, numberType0.isConstructor());
      assertEquals(false, numberType0.isStringValueType());
      assertEquals(false, numberType0.isNoResolvedType());
      assertEquals(false, numberType0.isVoidType());
      assertEquals(false, numberType0.isNoType());
      assertEquals(false, numberType0.isEnumType());
      assertEquals(false, numberType0.isResolved());
      assertEquals(false, numberType0.isOrdinaryFunction());
      assertEquals(false, numberType0.isNullType());
      assertEquals(BooleanLiteralSet.BOTH, numberType0.getPossibleToBooleanOutcomes());
      assertEquals(true, numberType0.matchesNumberContext());
      assertEquals(true, numberType0.matchesObjectContext());
      assertNull(functionType0);
      
      IndexedType indexedType0 = new IndexedType(jSTypeRegistry0, functionType0, functionType0);
      assertEquals(true, numberType0.matchesStringContext());
      assertEquals(true, numberType0.isNumberValueType());
      assertEquals(false, numberType0.isTemplateType());
      assertEquals(false, numberType0.isNominalType());
      assertEquals(false, numberType0.isUnionType());
      assertEquals(false, numberType0.isEnumElementType());
      assertEquals(false, numberType0.isBooleanValueType());
      assertEquals("number", numberType0.getDisplayName());
      assertEquals(false, numberType0.isInterface());
      assertEquals(false, numberType0.isRecordType());
      assertEquals(false, numberType0.isCheckedUnknownType());
      assertEquals(false, numberType0.isNoObjectType());
      assertEquals(false, numberType0.isFunctionPrototypeType());
      assertEquals(false, numberType0.isAllType());
      assertEquals(false, numberType0.isFunctionType());
      assertEquals(false, numberType0.isNominalConstructor());
      assertEquals(false, numberType0.isNullable());
      assertEquals(false, numberType0.isConstructor());
      assertEquals(false, numberType0.isStringValueType());
      assertEquals(false, numberType0.isNoResolvedType());
      assertEquals(false, numberType0.isVoidType());
      assertEquals(false, numberType0.isNoType());
      assertEquals(false, numberType0.isEnumType());
      assertEquals(false, numberType0.isResolved());
      assertEquals(false, numberType0.isOrdinaryFunction());
      assertEquals(false, numberType0.isNullType());
      assertEquals(BooleanLiteralSet.BOTH, numberType0.getPossibleToBooleanOutcomes());
      assertEquals(true, numberType0.matchesNumberContext());
      assertEquals(true, numberType0.matchesObjectContext());
      assertEquals(false, indexedType0.isVoidType());
      assertEquals(false, indexedType0.isBooleanValueType());
      assertEquals(BooleanLiteralSet.TRUE, indexedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, indexedType0.isResolved());
      assertEquals(false, indexedType0.isNullType());
      assertEquals(false, indexedType0.isTemplateType());
      assertEquals(false, indexedType0.isStringValueType());
      assertEquals(false, indexedType0.isNumberValueType());
      assertEquals(false, indexedType0.hasCachedValues());
      assertEquals(false, indexedType0.isFunctionPrototypeType());
      assertNotNull(indexedType0);
      
      String string0 = "5n";
      boolean boolean0 = numberType0.isInstanceType();
      assertFalse(boolean0);
      assertEquals(true, numberType0.matchesStringContext());
      assertEquals(true, numberType0.isNumberValueType());
      assertEquals(false, numberType0.isTemplateType());
      assertEquals(false, numberType0.isNominalType());
      assertEquals(false, numberType0.isUnionType());
      assertEquals(false, numberType0.isEnumElementType());
      assertEquals(false, numberType0.isBooleanValueType());
      assertEquals("number", numberType0.getDisplayName());
      assertEquals(false, numberType0.isInterface());
      assertEquals(false, numberType0.isRecordType());
      assertEquals(false, numberType0.isCheckedUnknownType());
      assertEquals(false, numberType0.isNoObjectType());
      assertEquals(false, numberType0.isFunctionPrototypeType());
      assertEquals(false, numberType0.isAllType());
      assertEquals(false, numberType0.isFunctionType());
      assertEquals(false, numberType0.isNominalConstructor());
      assertEquals(false, numberType0.isNullable());
      assertEquals(false, numberType0.isConstructor());
      assertEquals(false, numberType0.isStringValueType());
      assertEquals(false, numberType0.isNoResolvedType());
      assertEquals(false, numberType0.isVoidType());
      assertEquals(false, numberType0.isNoType());
      assertEquals(false, numberType0.isEnumType());
      assertEquals(false, numberType0.isResolved());
      assertEquals(false, numberType0.isOrdinaryFunction());
      assertEquals(false, numberType0.isNullType());
      assertEquals(BooleanLiteralSet.BOTH, numberType0.getPossibleToBooleanOutcomes());
      assertEquals(true, numberType0.matchesNumberContext());
      assertEquals(true, numberType0.matchesObjectContext());
      
      UnknownType unknownType0 = new UnknownType(jSTypeRegistry0, boolean0);
      assertEquals(true, numberType0.matchesStringContext());
      assertEquals(true, numberType0.isNumberValueType());
      assertEquals(false, numberType0.isTemplateType());
      assertEquals(false, numberType0.isNominalType());
      assertEquals(false, numberType0.isUnionType());
      assertEquals(false, numberType0.isEnumElementType());
      assertEquals(false, numberType0.isBooleanValueType());
      assertEquals("number", numberType0.getDisplayName());
      assertEquals(false, numberType0.isInterface());
      assertEquals(false, numberType0.isRecordType());
      assertEquals(false, numberType0.isCheckedUnknownType());
      assertEquals(false, numberType0.isNoObjectType());
      assertEquals(false, numberType0.isFunctionPrototypeType());
      assertEquals(false, numberType0.isAllType());
      assertEquals(false, numberType0.isFunctionType());
      assertEquals(false, numberType0.isNominalConstructor());
      assertEquals(false, numberType0.isNullable());
      assertEquals(false, numberType0.isConstructor());
      assertEquals(false, numberType0.isStringValueType());
      assertEquals(false, numberType0.isNoResolvedType());
      assertEquals(false, numberType0.isVoidType());
      assertEquals(false, numberType0.isNoType());
      assertEquals(false, numberType0.isEnumType());
      assertEquals(false, numberType0.isResolved());
      assertEquals(false, numberType0.isOrdinaryFunction());
      assertEquals(false, numberType0.isNullType());
      assertEquals(BooleanLiteralSet.BOTH, numberType0.getPossibleToBooleanOutcomes());
      assertEquals(true, numberType0.matchesNumberContext());
      assertEquals(true, numberType0.matchesObjectContext());
      assertEquals(false, unknownType0.isNoObjectType());
      assertEquals(false, unknownType0.isOrdinaryFunction());
      assertEquals(true, unknownType0.matchesNumberContext());
      assertEquals(false, unknownType0.isAllType());
      assertEquals(false, unknownType0.isCheckedUnknownType());
      assertEquals(true, unknownType0.matchesObjectContext());
      assertEquals(false, unknownType0.isUnionType());
      assertEquals(false, unknownType0.isNumberValueType());
      assertEquals(2147483647, unknownType0.getPropertiesCount());
      assertEquals(false, unknownType0.isBooleanValueType());
      assertEquals(false, unknownType0.hasCachedValues());
      assertEquals(false, unknownType0.isRecordType());
      assertEquals(false, unknownType0.isConstructor());
      assertEquals(false, unknownType0.isStringValueType());
      assertEquals(true, unknownType0.canBeCalled());
      assertEquals(false, unknownType0.isNoResolvedType());
      assertEquals(false, unknownType0.isFunctionPrototypeType());
      assertEquals(BooleanLiteralSet.BOTH, unknownType0.getPossibleToBooleanOutcomes());
      assertEquals(false, unknownType0.isNullType());
      assertEquals("Unknown", unknownType0.getDisplayName());
      assertEquals(true, unknownType0.isUnknownType());
      assertEquals(false, unknownType0.hasReferenceName());
      assertEquals(false, unknownType0.isNoType());
      assertEquals(true, unknownType0.matchesStringContext());
      assertEquals(true, unknownType0.hasDisplayName());
      assertEquals(false, unknownType0.isResolved());
      assertEquals(false, unknownType0.isNativeObjectType());
      assertEquals("?", unknownType0.getReferenceName());
      assertEquals(false, unknownType0.isEnumType());
      assertEquals(false, unknownType0.isEnumElementType());
      assertEquals(false, unknownType0.isTemplateType());
      assertEquals(false, unknownType0.isFunctionType());
      assertEquals(false, unknownType0.isVoidType());
      assertEquals(false, unknownType0.isNominalType());
      assertEquals(true, unknownType0.isNullable());
      assertEquals(false, unknownType0.isNominalConstructor());
      assertEquals(false, unknownType0.isInterface());
      assertNotNull(unknownType0);
      
      Node node0 = unknownType0.getPropertyNode(string0);
      assertEquals(true, numberType0.matchesStringContext());
      assertEquals(true, numberType0.isNumberValueType());
      assertEquals(false, numberType0.isTemplateType());
      assertEquals(false, numberType0.isNominalType());
      assertEquals(false, numberType0.isUnionType());
      assertEquals(false, numberType0.isEnumElementType());
      assertEquals(false, numberType0.isBooleanValueType());
      assertEquals("number", numberType0.getDisplayName());
      assertEquals(false, numberType0.isInterface());
      assertEquals(false, numberType0.isRecordType());
      assertEquals(false, numberType0.isCheckedUnknownType());
      assertEquals(false, numberType0.isNoObjectType());
      assertEquals(false, numberType0.isFunctionPrototypeType());
      assertEquals(false, numberType0.isAllType());
      assertEquals(false, numberType0.isFunctionType());
      assertEquals(false, numberType0.isNominalConstructor());
      assertEquals(false, numberType0.isNullable());
      assertEquals(false, numberType0.isConstructor());
      assertEquals(false, numberType0.isStringValueType());
      assertEquals(false, numberType0.isNoResolvedType());
      assertEquals(false, numberType0.isVoidType());
      assertEquals(false, numberType0.isNoType());
      assertEquals(false, numberType0.isEnumType());
      assertEquals(false, numberType0.isResolved());
      assertEquals(false, numberType0.isOrdinaryFunction());
      assertEquals(false, numberType0.isNullType());
      assertEquals(BooleanLiteralSet.BOTH, numberType0.getPossibleToBooleanOutcomes());
      assertEquals(true, numberType0.matchesNumberContext());
      assertEquals(true, numberType0.matchesObjectContext());
      assertEquals(false, unknownType0.isNoObjectType());
      assertEquals(false, unknownType0.isOrdinaryFunction());
      assertEquals(true, unknownType0.matchesNumberContext());
      assertEquals(false, unknownType0.isAllType());
      assertEquals(false, unknownType0.isCheckedUnknownType());
      assertEquals(true, unknownType0.matchesObjectContext());
      assertEquals(false, unknownType0.isUnionType());
      assertEquals(false, unknownType0.isNumberValueType());
      assertEquals(2147483647, unknownType0.getPropertiesCount());
      assertEquals(false, unknownType0.isBooleanValueType());
      assertEquals(false, unknownType0.hasCachedValues());
      assertEquals(false, unknownType0.isRecordType());
      assertEquals(false, unknownType0.isConstructor());
      assertEquals(false, unknownType0.isStringValueType());
      assertEquals(true, unknownType0.canBeCalled());
      assertEquals(false, unknownType0.isNoResolvedType());
      assertEquals(false, unknownType0.isFunctionPrototypeType());
      assertEquals(BooleanLiteralSet.BOTH, unknownType0.getPossibleToBooleanOutcomes());
      assertEquals(false, unknownType0.isNullType());
      assertEquals("Unknown", unknownType0.getDisplayName());
      assertEquals(true, unknownType0.isUnknownType());
      assertEquals(false, unknownType0.hasReferenceName());
      assertEquals(false, unknownType0.isNoType());
      assertEquals(true, unknownType0.matchesStringContext());
      assertEquals(true, unknownType0.hasDisplayName());
      assertEquals(false, unknownType0.isResolved());
      assertEquals(false, unknownType0.isNativeObjectType());
      assertEquals("?", unknownType0.getReferenceName());
      assertEquals(false, unknownType0.isEnumType());
      assertEquals(false, unknownType0.isEnumElementType());
      assertEquals(false, unknownType0.isTemplateType());
      assertEquals(false, unknownType0.isFunctionType());
      assertEquals(false, unknownType0.isVoidType());
      assertEquals(false, unknownType0.isNominalType());
      assertEquals(true, unknownType0.isNullable());
      assertEquals(false, unknownType0.isNominalConstructor());
      assertEquals(false, unknownType0.isInterface());
      assertNull(node0);
      
      // Undeclared exception!
      try {
        boolean boolean1 = indexedType0.defineDeclaredProperty(string0, (JSType) numberType0, node0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test34()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = null;
      ObjectType objectType0 = null;
      ParameterizedType parameterizedType0 = new ParameterizedType(jSTypeRegistry0, objectType0, objectType0);
      assertEquals(BooleanLiteralSet.TRUE, parameterizedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, parameterizedType0.hasCachedValues());
      assertEquals(false, parameterizedType0.isResolved());
      assertEquals(false, parameterizedType0.isStringValueType());
      assertEquals(false, parameterizedType0.isBooleanValueType());
      assertEquals(false, parameterizedType0.isFunctionPrototypeType());
      assertEquals(false, parameterizedType0.isNullType());
      assertEquals(false, parameterizedType0.isTemplateType());
      assertEquals(false, parameterizedType0.isNumberValueType());
      assertEquals(false, parameterizedType0.isVoidType());
      assertNotNull(parameterizedType0);
      
      ParameterizedType parameterizedType1 = new ParameterizedType(jSTypeRegistry0, parameterizedType0, objectType0);
      assertNotSame(parameterizedType1, parameterizedType0);
      assertEquals(BooleanLiteralSet.TRUE, parameterizedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, parameterizedType0.hasCachedValues());
      assertEquals(false, parameterizedType0.isResolved());
      assertEquals(false, parameterizedType0.isStringValueType());
      assertEquals(false, parameterizedType0.isBooleanValueType());
      assertEquals(false, parameterizedType0.isFunctionPrototypeType());
      assertEquals(false, parameterizedType0.isNullType());
      assertEquals(false, parameterizedType0.isTemplateType());
      assertEquals(false, parameterizedType0.isNumberValueType());
      assertEquals(false, parameterizedType0.isVoidType());
      assertEquals(BooleanLiteralSet.TRUE, parameterizedType1.getPossibleToBooleanOutcomes());
      assertEquals(false, parameterizedType1.isNullType());
      assertEquals(false, parameterizedType1.isResolved());
      assertEquals(false, parameterizedType1.isStringValueType());
      assertEquals(false, parameterizedType1.isBooleanValueType());
      assertEquals(false, parameterizedType1.isVoidType());
      assertEquals(false, parameterizedType1.isFunctionPrototypeType());
      assertEquals(false, parameterizedType1.isNumberValueType());
      assertEquals(false, parameterizedType1.isTemplateType());
      assertEquals(false, parameterizedType1.hasCachedValues());
      assertNotNull(parameterizedType1);
      assertTrue(parameterizedType1.equals((Object)parameterizedType0));
      
      boolean boolean0 = parameterizedType1.detectImplicitPrototypeCycle();
      assertNotSame(parameterizedType1, parameterizedType0);
      assertFalse(boolean0);
      assertEquals(BooleanLiteralSet.TRUE, parameterizedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, parameterizedType0.hasCachedValues());
      assertEquals(false, parameterizedType0.isResolved());
      assertEquals(false, parameterizedType0.isStringValueType());
      assertEquals(false, parameterizedType0.isBooleanValueType());
      assertEquals(false, parameterizedType0.isFunctionPrototypeType());
      assertEquals(false, parameterizedType0.isNullType());
      assertEquals(false, parameterizedType0.isTemplateType());
      assertEquals(false, parameterizedType0.isNumberValueType());
      assertEquals(false, parameterizedType0.isVoidType());
      assertEquals(BooleanLiteralSet.TRUE, parameterizedType1.getPossibleToBooleanOutcomes());
      assertEquals(false, parameterizedType1.isNullType());
      assertEquals(false, parameterizedType1.isResolved());
      assertEquals(false, parameterizedType1.isStringValueType());
      assertEquals(false, parameterizedType1.isBooleanValueType());
      assertEquals(false, parameterizedType1.isVoidType());
      assertEquals(false, parameterizedType1.isFunctionPrototypeType());
      assertEquals(false, parameterizedType1.isNumberValueType());
      assertEquals(false, parameterizedType1.isTemplateType());
      assertEquals(false, parameterizedType1.hasCachedValues());
      assertTrue(parameterizedType1.equals((Object)parameterizedType0));
  }

  @Test
  public void test35()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      boolean boolean0 = true;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0, boolean0);
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      String string0 = "Z4cAD- C0Rn`*G2e*";
      TemplateType templateType0 = new TemplateType(jSTypeRegistry0, string0);
      assertEquals(false, templateType0.isRecordType());
      assertEquals(false, templateType0.isEnumType());
      assertEquals(false, templateType0.isFunctionType());
      assertEquals(false, templateType0.isNullType());
      assertEquals(true, templateType0.isTemplateType());
      assertEquals(false, templateType0.isBooleanValueType());
      assertEquals(BooleanLiteralSet.TRUE, templateType0.getPossibleToBooleanOutcomes());
      assertEquals(false, templateType0.isNumberValueType());
      assertEquals(false, templateType0.isUnionType());
      assertEquals("Z4cAD- C0Rn`*G2e*", templateType0.getReferenceName());
      assertEquals(false, templateType0.isResolved());
      assertEquals(false, templateType0.isNominalConstructor());
      assertEquals(false, templateType0.isEnumElementType());
      assertEquals(false, templateType0.isVoidType());
      assertEquals(false, templateType0.isStringValueType());
      assertEquals(false, templateType0.hasCachedValues());
      assertEquals(false, templateType0.isFunctionPrototypeType());
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(templateType0);
      
      TemplateType templateType1 = (TemplateType)JSType.getLeastSupertype(templateType0, templateType0);
      assertSame(templateType1, templateType0);
      assertSame(templateType0, templateType1);
      assertEquals(false, templateType1.isVoidType());
      assertEquals(false, templateType1.isUnionType());
      assertEquals(false, templateType1.isResolved());
      assertEquals(false, templateType1.isEnumElementType());
      assertEquals(false, templateType1.isNumberValueType());
      assertEquals(false, templateType1.isNominalConstructor());
      assertEquals(false, templateType1.isNullType());
      assertEquals(false, templateType1.isFunctionPrototypeType());
      assertEquals(false, templateType1.isBooleanValueType());
      assertEquals(true, templateType1.isTemplateType());
      assertEquals("Z4cAD- C0Rn`*G2e*", templateType1.getReferenceName());
      assertEquals(false, templateType1.isStringValueType());
      assertEquals(false, templateType1.isFunctionType());
      assertEquals(BooleanLiteralSet.TRUE, templateType1.getPossibleToBooleanOutcomes());
      assertEquals(false, templateType1.isRecordType());
      assertEquals(false, templateType1.isEnumType());
      assertEquals(false, templateType1.hasCachedValues());
      assertEquals(false, templateType0.isRecordType());
      assertEquals(false, templateType0.isEnumType());
      assertEquals(false, templateType0.isFunctionType());
      assertEquals(false, templateType0.isNullType());
      assertEquals(true, templateType0.isTemplateType());
      assertEquals(false, templateType0.isBooleanValueType());
      assertEquals(BooleanLiteralSet.TRUE, templateType0.getPossibleToBooleanOutcomes());
      assertEquals(false, templateType0.isNumberValueType());
      assertEquals(false, templateType0.isUnionType());
      assertEquals("Z4cAD- C0Rn`*G2e*", templateType0.getReferenceName());
      assertEquals(false, templateType0.isResolved());
      assertEquals(false, templateType0.isNominalConstructor());
      assertEquals(false, templateType0.isEnumElementType());
      assertEquals(false, templateType0.isVoidType());
      assertEquals(false, templateType0.isStringValueType());
      assertEquals(false, templateType0.hasCachedValues());
      assertEquals(false, templateType0.isFunctionPrototypeType());
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(templateType1);
  }

  @Test
  public void test36()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      boolean boolean0 = false;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0, boolean0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
      assertEquals(true, booleanType0.matchesObjectContext());
      assertEquals(false, booleanType0.isCheckedUnknownType());
      assertEquals(false, booleanType0.isVoidType());
      assertEquals(false, booleanType0.isUnionType());
      assertEquals(false, booleanType0.isEnumElementType());
      assertEquals(false, booleanType0.isNominalConstructor());
      assertEquals(false, booleanType0.isNullable());
      assertEquals(false, booleanType0.isAllType());
      assertEquals(false, booleanType0.isNumberValueType());
      assertEquals(false, booleanType0.isNominalType());
      assertEquals(false, booleanType0.isRecordType());
      assertEquals(false, booleanType0.isFunctionPrototypeType());
      assertEquals("boolean", booleanType0.getDisplayName());
      assertEquals(false, booleanType0.isEnumType());
      assertEquals(true, booleanType0.matchesNumberContext());
      assertEquals(false, booleanType0.isStringValueType());
      assertEquals(false, booleanType0.isNoType());
      assertEquals(false, booleanType0.isInterface());
      assertEquals(false, booleanType0.isNullType());
      assertEquals(false, booleanType0.isNoObjectType());
      assertEquals(false, booleanType0.isFunctionType());
      assertEquals(false, booleanType0.isTemplateType());
      assertEquals(true, booleanType0.isBooleanValueType());
      assertEquals(true, booleanType0.matchesStringContext());
      assertEquals(BooleanLiteralSet.BOTH, booleanType0.getPossibleToBooleanOutcomes());
      assertEquals(false, booleanType0.isConstructor());
      assertEquals(false, booleanType0.isNoResolvedType());
      assertEquals(false, booleanType0.isResolved());
      assertEquals(false, booleanType0.isOrdinaryFunction());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(booleanType0);
      
      ProxyObjectType proxyObjectType0 = new ProxyObjectType(jSTypeRegistry0, booleanType0);
      assertEquals(false, proxyObjectType0.isStringValueType());
      assertEquals(false, proxyObjectType0.isEnumElementType());
      assertEquals(false, proxyObjectType0.isNominalConstructor());
      assertEquals(false, proxyObjectType0.isFunctionPrototypeType());
      assertEquals(false, proxyObjectType0.isBooleanValueType());
      assertEquals(false, proxyObjectType0.isEnumType());
      assertEquals(false, proxyObjectType0.isRecordType());
      assertEquals(false, proxyObjectType0.hasCachedValues());
      assertEquals(false, proxyObjectType0.isNullType());
      assertEquals(false, proxyObjectType0.isTemplateType());
      assertEquals(BooleanLiteralSet.TRUE, proxyObjectType0.getPossibleToBooleanOutcomes());
      assertEquals(false, proxyObjectType0.isResolved());
      assertEquals(false, proxyObjectType0.isUnionType());
      assertEquals(false, proxyObjectType0.isVoidType());
      assertEquals(false, proxyObjectType0.isFunctionType());
      assertEquals(false, proxyObjectType0.isNumberValueType());
      assertEquals(true, booleanType0.matchesObjectContext());
      assertEquals(false, booleanType0.isCheckedUnknownType());
      assertEquals(false, booleanType0.isVoidType());
      assertEquals(false, booleanType0.isUnionType());
      assertEquals(false, booleanType0.isEnumElementType());
      assertEquals(false, booleanType0.isNominalConstructor());
      assertEquals(false, booleanType0.isNullable());
      assertEquals(false, booleanType0.isAllType());
      assertEquals(false, booleanType0.isNumberValueType());
      assertEquals(false, booleanType0.isNominalType());
      assertEquals(false, booleanType0.isRecordType());
      assertEquals(false, booleanType0.isFunctionPrototypeType());
      assertEquals("boolean", booleanType0.getDisplayName());
      assertEquals(false, booleanType0.isEnumType());
      assertEquals(true, booleanType0.matchesNumberContext());
      assertEquals(false, booleanType0.isStringValueType());
      assertEquals(false, booleanType0.isNoType());
      assertEquals(false, booleanType0.isInterface());
      assertEquals(false, booleanType0.isNullType());
      assertEquals(false, booleanType0.isNoObjectType());
      assertEquals(false, booleanType0.isFunctionType());
      assertEquals(false, booleanType0.isTemplateType());
      assertEquals(true, booleanType0.isBooleanValueType());
      assertEquals(true, booleanType0.matchesStringContext());
      assertEquals(BooleanLiteralSet.BOTH, booleanType0.getPossibleToBooleanOutcomes());
      assertEquals(false, booleanType0.isConstructor());
      assertEquals(false, booleanType0.isNoResolvedType());
      assertEquals(false, booleanType0.isResolved());
      assertEquals(false, booleanType0.isOrdinaryFunction());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(proxyObjectType0);
      
      ProxyObjectType proxyObjectType1 = new ProxyObjectType(jSTypeRegistry0, proxyObjectType0);
      assertNotSame(proxyObjectType0, proxyObjectType1);
      assertNotSame(proxyObjectType1, proxyObjectType0);
      assertEquals(false, proxyObjectType0.isStringValueType());
      assertEquals(false, proxyObjectType0.isEnumElementType());
      assertEquals(false, proxyObjectType0.isNominalConstructor());
      assertEquals(false, proxyObjectType0.isFunctionPrototypeType());
      assertEquals(false, proxyObjectType0.isBooleanValueType());
      assertEquals(false, proxyObjectType0.isEnumType());
      assertEquals(false, proxyObjectType0.isRecordType());
      assertEquals(false, proxyObjectType0.hasCachedValues());
      assertEquals(false, proxyObjectType0.isNullType());
      assertEquals(false, proxyObjectType0.isTemplateType());
      assertEquals(BooleanLiteralSet.TRUE, proxyObjectType0.getPossibleToBooleanOutcomes());
      assertEquals(false, proxyObjectType0.isResolved());
      assertEquals(false, proxyObjectType0.isUnionType());
      assertEquals(false, proxyObjectType0.isVoidType());
      assertEquals(false, proxyObjectType0.isFunctionType());
      assertEquals(false, proxyObjectType0.isNumberValueType());
      assertEquals(false, proxyObjectType1.isStringValueType());
      assertEquals(false, proxyObjectType1.isEnumElementType());
      assertEquals(false, proxyObjectType1.isRecordType());
      assertEquals(false, proxyObjectType1.isVoidType());
      assertEquals(false, proxyObjectType1.isBooleanValueType());
      assertEquals(false, proxyObjectType1.isEnumType());
      assertEquals(false, proxyObjectType1.isFunctionType());
      assertEquals(false, proxyObjectType1.hasCachedValues());
      assertEquals(false, proxyObjectType1.isFunctionPrototypeType());
      assertEquals(false, proxyObjectType1.isNumberValueType());
      assertEquals(false, proxyObjectType1.isResolved());
      assertEquals(BooleanLiteralSet.TRUE, proxyObjectType1.getPossibleToBooleanOutcomes());
      assertEquals(false, proxyObjectType1.isNominalConstructor());
      assertEquals(false, proxyObjectType1.isNullType());
      assertEquals(false, proxyObjectType1.isTemplateType());
      assertEquals(false, proxyObjectType1.isUnionType());
      assertEquals(true, booleanType0.matchesObjectContext());
      assertEquals(false, booleanType0.isCheckedUnknownType());
      assertEquals(false, booleanType0.isVoidType());
      assertEquals(false, booleanType0.isUnionType());
      assertEquals(false, booleanType0.isEnumElementType());
      assertEquals(false, booleanType0.isNominalConstructor());
      assertEquals(false, booleanType0.isNullable());
      assertEquals(false, booleanType0.isAllType());
      assertEquals(false, booleanType0.isNumberValueType());
      assertEquals(false, booleanType0.isNominalType());
      assertEquals(false, booleanType0.isRecordType());
      assertEquals(false, booleanType0.isFunctionPrototypeType());
      assertEquals("boolean", booleanType0.getDisplayName());
      assertEquals(false, booleanType0.isEnumType());
      assertEquals(true, booleanType0.matchesNumberContext());
      assertEquals(false, booleanType0.isStringValueType());
      assertEquals(false, booleanType0.isNoType());
      assertEquals(false, booleanType0.isInterface());
      assertEquals(false, booleanType0.isNullType());
      assertEquals(false, booleanType0.isNoObjectType());
      assertEquals(false, booleanType0.isFunctionType());
      assertEquals(false, booleanType0.isTemplateType());
      assertEquals(true, booleanType0.isBooleanValueType());
      assertEquals(true, booleanType0.matchesStringContext());
      assertEquals(BooleanLiteralSet.BOTH, booleanType0.getPossibleToBooleanOutcomes());
      assertEquals(false, booleanType0.isConstructor());
      assertEquals(false, booleanType0.isNoResolvedType());
      assertEquals(false, booleanType0.isResolved());
      assertEquals(false, booleanType0.isOrdinaryFunction());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(proxyObjectType1);
      assertTrue(proxyObjectType0.equals((Object)proxyObjectType1));
      assertTrue(proxyObjectType1.equals((Object)proxyObjectType0));
      
      Iterable<ObjectType> iterable0 = proxyObjectType1.getCtorImplementedInterfaces();
      assertNotSame(proxyObjectType0, proxyObjectType1);
      assertNotSame(proxyObjectType1, proxyObjectType0);
      assertEquals(false, proxyObjectType0.isStringValueType());
      assertEquals(false, proxyObjectType0.isEnumElementType());
      assertEquals(false, proxyObjectType0.isNominalConstructor());
      assertEquals(false, proxyObjectType0.isFunctionPrototypeType());
      assertEquals(false, proxyObjectType0.isBooleanValueType());
      assertEquals(false, proxyObjectType0.isEnumType());
      assertEquals(false, proxyObjectType0.isRecordType());
      assertEquals(false, proxyObjectType0.hasCachedValues());
      assertEquals(false, proxyObjectType0.isNullType());
      assertEquals(false, proxyObjectType0.isTemplateType());
      assertEquals(BooleanLiteralSet.TRUE, proxyObjectType0.getPossibleToBooleanOutcomes());
      assertEquals(false, proxyObjectType0.isResolved());
      assertEquals(false, proxyObjectType0.isUnionType());
      assertEquals(false, proxyObjectType0.isVoidType());
      assertEquals(false, proxyObjectType0.isFunctionType());
      assertEquals(false, proxyObjectType0.isNumberValueType());
      assertEquals(false, proxyObjectType1.isStringValueType());
      assertEquals(false, proxyObjectType1.isEnumElementType());
      assertEquals(false, proxyObjectType1.isRecordType());
      assertEquals(false, proxyObjectType1.isVoidType());
      assertEquals(false, proxyObjectType1.isBooleanValueType());
      assertEquals(false, proxyObjectType1.isEnumType());
      assertEquals(false, proxyObjectType1.isFunctionType());
      assertEquals(false, proxyObjectType1.hasCachedValues());
      assertEquals(false, proxyObjectType1.isFunctionPrototypeType());
      assertEquals(false, proxyObjectType1.isNumberValueType());
      assertEquals(false, proxyObjectType1.isResolved());
      assertEquals(BooleanLiteralSet.TRUE, proxyObjectType1.getPossibleToBooleanOutcomes());
      assertEquals(false, proxyObjectType1.isNominalConstructor());
      assertEquals(false, proxyObjectType1.isNullType());
      assertEquals(false, proxyObjectType1.isTemplateType());
      assertEquals(false, proxyObjectType1.isUnionType());
      assertEquals(true, booleanType0.matchesObjectContext());
      assertEquals(false, booleanType0.isCheckedUnknownType());
      assertEquals(false, booleanType0.isVoidType());
      assertEquals(false, booleanType0.isUnionType());
      assertEquals(false, booleanType0.isEnumElementType());
      assertEquals(false, booleanType0.isNominalConstructor());
      assertEquals(false, booleanType0.isNullable());
      assertEquals(false, booleanType0.isAllType());
      assertEquals(false, booleanType0.isNumberValueType());
      assertEquals(false, booleanType0.isNominalType());
      assertEquals(false, booleanType0.isRecordType());
      assertEquals(false, booleanType0.isFunctionPrototypeType());
      assertEquals("boolean", booleanType0.getDisplayName());
      assertEquals(false, booleanType0.isEnumType());
      assertEquals(true, booleanType0.matchesNumberContext());
      assertEquals(false, booleanType0.isStringValueType());
      assertEquals(false, booleanType0.isNoType());
      assertEquals(false, booleanType0.isInterface());
      assertEquals(false, booleanType0.isNullType());
      assertEquals(false, booleanType0.isNoObjectType());
      assertEquals(false, booleanType0.isFunctionType());
      assertEquals(false, booleanType0.isTemplateType());
      assertEquals(true, booleanType0.isBooleanValueType());
      assertEquals(true, booleanType0.matchesStringContext());
      assertEquals(BooleanLiteralSet.BOTH, booleanType0.getPossibleToBooleanOutcomes());
      assertEquals(false, booleanType0.isConstructor());
      assertEquals(false, booleanType0.isNoResolvedType());
      assertEquals(false, booleanType0.isResolved());
      assertEquals(false, booleanType0.isOrdinaryFunction());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(iterable0);
      assertTrue(proxyObjectType0.equals((Object)proxyObjectType1));
      assertTrue(proxyObjectType1.equals((Object)proxyObjectType0));
  }

  @Test
  public void test37()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      boolean boolean0 = true;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0, boolean0);
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      VoidType voidType0 = new VoidType(jSTypeRegistry0);
      assertEquals(false, voidType0.isCheckedUnknownType());
      assertEquals(false, voidType0.isFunctionType());
      assertEquals(false, voidType0.isNoType());
      assertEquals(false, voidType0.isNumberValueType());
      assertEquals(false, voidType0.isResolved());
      assertEquals(false, voidType0.isEnumType());
      assertEquals(false, voidType0.isConstructor());
      assertEquals(false, voidType0.isRecordType());
      assertEquals(false, voidType0.isEnumElementType());
      assertEquals(false, voidType0.isUnionType());
      assertEquals(false, voidType0.isOrdinaryFunction());
      assertEquals(false, voidType0.isNullType());
      assertEquals(false, voidType0.matchesObjectContext());
      assertEquals("undefined", voidType0.getDisplayName());
      assertEquals(false, voidType0.isStringValueType());
      assertEquals(false, voidType0.isFunctionPrototypeType());
      assertEquals(false, voidType0.isAllType());
      assertEquals(false, voidType0.isBooleanValueType());
      assertEquals(false, voidType0.isNoObjectType());
      assertEquals(false, voidType0.isTemplateType());
      assertEquals(false, voidType0.isNoResolvedType());
      assertEquals(false, voidType0.isInterface());
      assertEquals(true, voidType0.matchesStringContext());
      assertEquals(BooleanLiteralSet.FALSE, voidType0.getPossibleToBooleanOutcomes());
      assertEquals(true, voidType0.isVoidType());
      assertEquals(false, voidType0.isNominalType());
      assertEquals(false, voidType0.isNominalConstructor());
      assertEquals(false, voidType0.matchesNumberContext());
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(voidType0);
      
      UnknownType unknownType0 = new UnknownType(jSTypeRegistry0, boolean0);
      assertEquals(false, unknownType0.isStringValueType());
      assertEquals("??", unknownType0.getReferenceName());
      assertEquals(false, unknownType0.hasCachedValues());
      assertEquals(false, unknownType0.isVoidType());
      assertEquals(false, unknownType0.isEnumElementType());
      assertEquals(false, unknownType0.isConstructor());
      assertEquals(true, unknownType0.isNullable());
      assertEquals(false, unknownType0.isEnumType());
      assertEquals(false, unknownType0.isTemplateType());
      assertEquals(false, unknownType0.isNominalConstructor());
      assertEquals(false, unknownType0.isFunctionType());
      assertEquals(false, unknownType0.isResolved());
      assertEquals(true, unknownType0.matchesStringContext());
      assertEquals(false, unknownType0.isOrdinaryFunction());
      assertEquals(false, unknownType0.isNoResolvedType());
      assertEquals(false, unknownType0.isInterface());
      assertEquals(true, unknownType0.isUnknownType());
      assertEquals("Unknown", unknownType0.getDisplayName());
      assertEquals(false, unknownType0.isBooleanValueType());
      assertEquals(false, unknownType0.isAllType());
      assertEquals(true, unknownType0.matchesObjectContext());
      assertEquals(true, unknownType0.matchesNumberContext());
      assertEquals(false, unknownType0.isFunctionPrototypeType());
      assertEquals(false, unknownType0.isRecordType());
      assertEquals(false, unknownType0.isNoType());
      assertEquals(false, unknownType0.isNominalType());
      assertEquals(true, unknownType0.isCheckedUnknownType());
      assertEquals(false, unknownType0.isNoObjectType());
      assertEquals(true, unknownType0.hasDisplayName());
      assertEquals(false, unknownType0.isNullType());
      assertEquals(false, unknownType0.isNumberValueType());
      assertEquals(BooleanLiteralSet.BOTH, unknownType0.getPossibleToBooleanOutcomes());
      assertEquals(false, unknownType0.isNativeObjectType());
      assertEquals(2147483647, unknownType0.getPropertiesCount());
      assertEquals(true, unknownType0.canBeCalled());
      assertEquals(false, unknownType0.hasReferenceName());
      assertEquals(false, unknownType0.isUnionType());
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(unknownType0);
      
      FunctionType functionType0 = unknownType0.getOwnerFunction();
      assertEquals(false, unknownType0.isStringValueType());
      assertEquals("??", unknownType0.getReferenceName());
      assertEquals(false, unknownType0.hasCachedValues());
      assertEquals(false, unknownType0.isVoidType());
      assertEquals(false, unknownType0.isEnumElementType());
      assertEquals(false, unknownType0.isConstructor());
      assertEquals(true, unknownType0.isNullable());
      assertEquals(false, unknownType0.isEnumType());
      assertEquals(false, unknownType0.isTemplateType());
      assertEquals(false, unknownType0.isNominalConstructor());
      assertEquals(false, unknownType0.isFunctionType());
      assertEquals(false, unknownType0.isResolved());
      assertEquals(true, unknownType0.matchesStringContext());
      assertEquals(false, unknownType0.isOrdinaryFunction());
      assertEquals(false, unknownType0.isNoResolvedType());
      assertEquals(false, unknownType0.isInterface());
      assertEquals(true, unknownType0.isUnknownType());
      assertEquals("Unknown", unknownType0.getDisplayName());
      assertEquals(false, unknownType0.isBooleanValueType());
      assertEquals(false, unknownType0.isAllType());
      assertEquals(true, unknownType0.matchesObjectContext());
      assertEquals(true, unknownType0.matchesNumberContext());
      assertEquals(false, unknownType0.isFunctionPrototypeType());
      assertEquals(false, unknownType0.isRecordType());
      assertEquals(false, unknownType0.isNoType());
      assertEquals(false, unknownType0.isNominalType());
      assertEquals(true, unknownType0.isCheckedUnknownType());
      assertEquals(false, unknownType0.isNoObjectType());
      assertEquals(true, unknownType0.hasDisplayName());
      assertEquals(false, unknownType0.isNullType());
      assertEquals(false, unknownType0.isNumberValueType());
      assertEquals(BooleanLiteralSet.BOTH, unknownType0.getPossibleToBooleanOutcomes());
      assertEquals(false, unknownType0.isNativeObjectType());
      assertEquals(2147483647, unknownType0.getPropertiesCount());
      assertEquals(true, unknownType0.canBeCalled());
      assertEquals(false, unknownType0.hasReferenceName());
      assertEquals(false, unknownType0.isUnionType());
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNull(functionType0);
      
      ParameterizedType parameterizedType0 = new ParameterizedType(jSTypeRegistry0, functionType0, voidType0);
      assertEquals(false, voidType0.isCheckedUnknownType());
      assertEquals(false, voidType0.isFunctionType());
      assertEquals(false, voidType0.isNoType());
      assertEquals(false, voidType0.isNumberValueType());
      assertEquals(false, voidType0.isResolved());
      assertEquals(false, voidType0.isEnumType());
      assertEquals(false, voidType0.isConstructor());
      assertEquals(false, voidType0.isRecordType());
      assertEquals(false, voidType0.isEnumElementType());
      assertEquals(false, voidType0.isUnionType());
      assertEquals(false, voidType0.isOrdinaryFunction());
      assertEquals(false, voidType0.isNullType());
      assertEquals(false, voidType0.matchesObjectContext());
      assertEquals("undefined", voidType0.getDisplayName());
      assertEquals(false, voidType0.isStringValueType());
      assertEquals(false, voidType0.isFunctionPrototypeType());
      assertEquals(false, voidType0.isAllType());
      assertEquals(false, voidType0.isBooleanValueType());
      assertEquals(false, voidType0.isNoObjectType());
      assertEquals(false, voidType0.isTemplateType());
      assertEquals(false, voidType0.isNoResolvedType());
      assertEquals(false, voidType0.isInterface());
      assertEquals(true, voidType0.matchesStringContext());
      assertEquals(BooleanLiteralSet.FALSE, voidType0.getPossibleToBooleanOutcomes());
      assertEquals(true, voidType0.isVoidType());
      assertEquals(false, voidType0.isNominalType());
      assertEquals(false, voidType0.isNominalConstructor());
      assertEquals(false, voidType0.matchesNumberContext());
      assertEquals(false, unknownType0.isStringValueType());
      assertEquals("??", unknownType0.getReferenceName());
      assertEquals(false, unknownType0.hasCachedValues());
      assertEquals(false, unknownType0.isVoidType());
      assertEquals(false, unknownType0.isEnumElementType());
      assertEquals(false, unknownType0.isConstructor());
      assertEquals(true, unknownType0.isNullable());
      assertEquals(false, unknownType0.isEnumType());
      assertEquals(false, unknownType0.isTemplateType());
      assertEquals(false, unknownType0.isNominalConstructor());
      assertEquals(false, unknownType0.isFunctionType());
      assertEquals(false, unknownType0.isResolved());
      assertEquals(true, unknownType0.matchesStringContext());
      assertEquals(false, unknownType0.isOrdinaryFunction());
      assertEquals(false, unknownType0.isNoResolvedType());
      assertEquals(false, unknownType0.isInterface());
      assertEquals(true, unknownType0.isUnknownType());
      assertEquals("Unknown", unknownType0.getDisplayName());
      assertEquals(false, unknownType0.isBooleanValueType());
      assertEquals(false, unknownType0.isAllType());
      assertEquals(true, unknownType0.matchesObjectContext());
      assertEquals(true, unknownType0.matchesNumberContext());
      assertEquals(false, unknownType0.isFunctionPrototypeType());
      assertEquals(false, unknownType0.isRecordType());
      assertEquals(false, unknownType0.isNoType());
      assertEquals(false, unknownType0.isNominalType());
      assertEquals(true, unknownType0.isCheckedUnknownType());
      assertEquals(false, unknownType0.isNoObjectType());
      assertEquals(true, unknownType0.hasDisplayName());
      assertEquals(false, unknownType0.isNullType());
      assertEquals(false, unknownType0.isNumberValueType());
      assertEquals(BooleanLiteralSet.BOTH, unknownType0.getPossibleToBooleanOutcomes());
      assertEquals(false, unknownType0.isNativeObjectType());
      assertEquals(2147483647, unknownType0.getPropertiesCount());
      assertEquals(true, unknownType0.canBeCalled());
      assertEquals(false, unknownType0.hasReferenceName());
      assertEquals(false, unknownType0.isUnionType());
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(BooleanLiteralSet.TRUE, parameterizedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, parameterizedType0.isFunctionPrototypeType());
      assertEquals(false, parameterizedType0.isNumberValueType());
      assertEquals(false, parameterizedType0.hasCachedValues());
      assertEquals(false, parameterizedType0.isTemplateType());
      assertEquals(false, parameterizedType0.isNullType());
      assertEquals(false, parameterizedType0.isStringValueType());
      assertEquals(false, parameterizedType0.isVoidType());
      assertEquals(false, parameterizedType0.isBooleanValueType());
      assertEquals(false, parameterizedType0.isResolved());
      assertNotNull(parameterizedType0);
      
      FunctionType functionType1 = parameterizedType0.getOwnerFunction();
      assertEquals(false, voidType0.isCheckedUnknownType());
      assertEquals(false, voidType0.isFunctionType());
      assertEquals(false, voidType0.isNoType());
      assertEquals(false, voidType0.isNumberValueType());
      assertEquals(false, voidType0.isResolved());
      assertEquals(false, voidType0.isEnumType());
      assertEquals(false, voidType0.isConstructor());
      assertEquals(false, voidType0.isRecordType());
      assertEquals(false, voidType0.isEnumElementType());
      assertEquals(false, voidType0.isUnionType());
      assertEquals(false, voidType0.isOrdinaryFunction());
      assertEquals(false, voidType0.isNullType());
      assertEquals(false, voidType0.matchesObjectContext());
      assertEquals("undefined", voidType0.getDisplayName());
      assertEquals(false, voidType0.isStringValueType());
      assertEquals(false, voidType0.isFunctionPrototypeType());
      assertEquals(false, voidType0.isAllType());
      assertEquals(false, voidType0.isBooleanValueType());
      assertEquals(false, voidType0.isNoObjectType());
      assertEquals(false, voidType0.isTemplateType());
      assertEquals(false, voidType0.isNoResolvedType());
      assertEquals(false, voidType0.isInterface());
      assertEquals(true, voidType0.matchesStringContext());
      assertEquals(BooleanLiteralSet.FALSE, voidType0.getPossibleToBooleanOutcomes());
      assertEquals(true, voidType0.isVoidType());
      assertEquals(false, voidType0.isNominalType());
      assertEquals(false, voidType0.isNominalConstructor());
      assertEquals(false, voidType0.matchesNumberContext());
      assertEquals(false, unknownType0.isStringValueType());
      assertEquals("??", unknownType0.getReferenceName());
      assertEquals(false, unknownType0.hasCachedValues());
      assertEquals(false, unknownType0.isVoidType());
      assertEquals(false, unknownType0.isEnumElementType());
      assertEquals(false, unknownType0.isConstructor());
      assertEquals(true, unknownType0.isNullable());
      assertEquals(false, unknownType0.isEnumType());
      assertEquals(false, unknownType0.isTemplateType());
      assertEquals(false, unknownType0.isNominalConstructor());
      assertEquals(false, unknownType0.isFunctionType());
      assertEquals(false, unknownType0.isResolved());
      assertEquals(true, unknownType0.matchesStringContext());
      assertEquals(false, unknownType0.isOrdinaryFunction());
      assertEquals(false, unknownType0.isNoResolvedType());
      assertEquals(false, unknownType0.isInterface());
      assertEquals(true, unknownType0.isUnknownType());
      assertEquals("Unknown", unknownType0.getDisplayName());
      assertEquals(false, unknownType0.isBooleanValueType());
      assertEquals(false, unknownType0.isAllType());
      assertEquals(true, unknownType0.matchesObjectContext());
      assertEquals(true, unknownType0.matchesNumberContext());
      assertEquals(false, unknownType0.isFunctionPrototypeType());
      assertEquals(false, unknownType0.isRecordType());
      assertEquals(false, unknownType0.isNoType());
      assertEquals(false, unknownType0.isNominalType());
      assertEquals(true, unknownType0.isCheckedUnknownType());
      assertEquals(false, unknownType0.isNoObjectType());
      assertEquals(true, unknownType0.hasDisplayName());
      assertEquals(false, unknownType0.isNullType());
      assertEquals(false, unknownType0.isNumberValueType());
      assertEquals(BooleanLiteralSet.BOTH, unknownType0.getPossibleToBooleanOutcomes());
      assertEquals(false, unknownType0.isNativeObjectType());
      assertEquals(2147483647, unknownType0.getPropertiesCount());
      assertEquals(true, unknownType0.canBeCalled());
      assertEquals(false, unknownType0.hasReferenceName());
      assertEquals(false, unknownType0.isUnionType());
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(BooleanLiteralSet.TRUE, parameterizedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, parameterizedType0.isFunctionPrototypeType());
      assertEquals(false, parameterizedType0.isNumberValueType());
      assertEquals(false, parameterizedType0.hasCachedValues());
      assertEquals(false, parameterizedType0.isTemplateType());
      assertEquals(false, parameterizedType0.isNullType());
      assertEquals(false, parameterizedType0.isStringValueType());
      assertEquals(false, parameterizedType0.isVoidType());
      assertEquals(false, parameterizedType0.isBooleanValueType());
      assertEquals(false, parameterizedType0.isResolved());
      assertNull(functionType1);
  }

  @Test
  public void test38()  throws Throwable  {
      String string0 = "com.gogle.javascript.rhino.jstpe.ProxyObjectType";
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      TemplateType templateType0 = new TemplateType(jSTypeRegistry0, string0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, templateType0.isEnumType());
      assertEquals(false, templateType0.isNominalConstructor());
      assertEquals(true, templateType0.isTemplateType());
      assertEquals(false, templateType0.isEnumElementType());
      assertEquals(false, templateType0.hasCachedValues());
      assertEquals(BooleanLiteralSet.TRUE, templateType0.getPossibleToBooleanOutcomes());
      assertEquals(false, templateType0.isBooleanValueType());
      assertEquals(false, templateType0.isResolved());
      assertEquals(false, templateType0.isUnionType());
      assertEquals("com.gogle.javascript.rhino.jstpe.ProxyObjectType", templateType0.getReferenceName());
      assertEquals(false, templateType0.isStringValueType());
      assertEquals(false, templateType0.isNullType());
      assertEquals(false, templateType0.isFunctionPrototypeType());
      assertEquals(false, templateType0.isNumberValueType());
      assertEquals(false, templateType0.isVoidType());
      assertEquals(false, templateType0.isFunctionType());
      assertEquals(false, templateType0.isRecordType());
      assertNotNull(templateType0);
      
      boolean boolean0 = templateType0.isFunctionPrototypeType();
      assertFalse(boolean0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, templateType0.isEnumType());
      assertEquals(false, templateType0.isNominalConstructor());
      assertEquals(true, templateType0.isTemplateType());
      assertEquals(false, templateType0.isEnumElementType());
      assertEquals(false, templateType0.hasCachedValues());
      assertEquals(BooleanLiteralSet.TRUE, templateType0.getPossibleToBooleanOutcomes());
      assertEquals(false, templateType0.isBooleanValueType());
      assertEquals(false, templateType0.isResolved());
      assertEquals(false, templateType0.isUnionType());
      assertEquals("com.gogle.javascript.rhino.jstpe.ProxyObjectType", templateType0.getReferenceName());
      assertEquals(false, templateType0.isStringValueType());
      assertEquals(false, templateType0.isNullType());
      assertEquals(false, templateType0.isFunctionPrototypeType());
      assertEquals(false, templateType0.isNumberValueType());
      assertEquals(false, templateType0.isVoidType());
      assertEquals(false, templateType0.isFunctionType());
      assertEquals(false, templateType0.isRecordType());
  }

  @Test
  public void test39()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = null;
      ObjectType objectType0 = null;
      ParameterizedType parameterizedType0 = new ParameterizedType(jSTypeRegistry0, objectType0, objectType0);
      assertEquals(false, parameterizedType0.isNullType());
      assertEquals(false, parameterizedType0.isFunctionPrototypeType());
      assertEquals(false, parameterizedType0.isVoidType());
      assertEquals(false, parameterizedType0.isTemplateType());
      assertEquals(false, parameterizedType0.hasCachedValues());
      assertEquals(false, parameterizedType0.isNumberValueType());
      assertEquals(false, parameterizedType0.isResolved());
      assertEquals(false, parameterizedType0.isBooleanValueType());
      assertEquals(BooleanLiteralSet.TRUE, parameterizedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, parameterizedType0.isStringValueType());
      assertNotNull(parameterizedType0);
      
      ParameterizedType parameterizedType1 = new ParameterizedType(jSTypeRegistry0, parameterizedType0, objectType0);
      assertNotSame(parameterizedType1, parameterizedType0);
      assertEquals(false, parameterizedType0.isNullType());
      assertEquals(false, parameterizedType0.isFunctionPrototypeType());
      assertEquals(false, parameterizedType0.isVoidType());
      assertEquals(false, parameterizedType0.isTemplateType());
      assertEquals(false, parameterizedType0.hasCachedValues());
      assertEquals(false, parameterizedType0.isNumberValueType());
      assertEquals(false, parameterizedType0.isResolved());
      assertEquals(false, parameterizedType0.isBooleanValueType());
      assertEquals(BooleanLiteralSet.TRUE, parameterizedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, parameterizedType0.isStringValueType());
      assertEquals(false, parameterizedType1.isBooleanValueType());
      assertEquals(false, parameterizedType1.isTemplateType());
      assertEquals(false, parameterizedType1.isNullType());
      assertEquals(false, parameterizedType1.isNumberValueType());
      assertEquals(false, parameterizedType1.isStringValueType());
      assertEquals(false, parameterizedType1.isResolved());
      assertEquals(false, parameterizedType1.hasCachedValues());
      assertEquals(BooleanLiteralSet.TRUE, parameterizedType1.getPossibleToBooleanOutcomes());
      assertEquals(false, parameterizedType1.isVoidType());
      assertEquals(false, parameterizedType1.isFunctionPrototypeType());
      assertNotNull(parameterizedType1);
      assertTrue(parameterizedType1.equals((Object)parameterizedType0));
      
      boolean boolean0 = parameterizedType1.isNativeObjectType();
      assertNotSame(parameterizedType1, parameterizedType0);
      assertFalse(boolean0);
      assertEquals(false, parameterizedType0.isNullType());
      assertEquals(false, parameterizedType0.isFunctionPrototypeType());
      assertEquals(false, parameterizedType0.isVoidType());
      assertEquals(false, parameterizedType0.isTemplateType());
      assertEquals(false, parameterizedType0.hasCachedValues());
      assertEquals(false, parameterizedType0.isNumberValueType());
      assertEquals(false, parameterizedType0.isResolved());
      assertEquals(false, parameterizedType0.isBooleanValueType());
      assertEquals(BooleanLiteralSet.TRUE, parameterizedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, parameterizedType0.isStringValueType());
      assertEquals(false, parameterizedType1.isBooleanValueType());
      assertEquals(false, parameterizedType1.isTemplateType());
      assertEquals(false, parameterizedType1.isNullType());
      assertEquals(false, parameterizedType1.isNumberValueType());
      assertEquals(false, parameterizedType1.isStringValueType());
      assertEquals(false, parameterizedType1.isResolved());
      assertEquals(false, parameterizedType1.hasCachedValues());
      assertEquals(BooleanLiteralSet.TRUE, parameterizedType1.getPossibleToBooleanOutcomes());
      assertEquals(false, parameterizedType1.isVoidType());
      assertEquals(false, parameterizedType1.isFunctionPrototypeType());
      assertTrue(parameterizedType1.equals((Object)parameterizedType0));
  }

  @Test
  public void test40()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      StringType stringType0 = new StringType(jSTypeRegistry0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, stringType0.isNominalType());
      assertEquals(false, stringType0.isVoidType());
      assertEquals(true, stringType0.matchesStringContext());
      assertEquals(false, stringType0.isFunctionPrototypeType());
      assertEquals(false, stringType0.isNumberValueType());
      assertEquals(true, stringType0.matchesNumberContext());
      assertEquals(false, stringType0.isNullType());
      assertEquals(false, stringType0.isOrdinaryFunction());
      assertEquals(false, stringType0.isUnionType());
      assertEquals(false, stringType0.isInterface());
      assertEquals(false, stringType0.isResolved());
      assertEquals(false, stringType0.isCheckedUnknownType());
      assertEquals(false, stringType0.isNoType());
      assertEquals(false, stringType0.isFunctionType());
      assertEquals(true, stringType0.matchesObjectContext());
      assertEquals(false, stringType0.isEnumType());
      assertEquals(false, stringType0.isEnumElementType());
      assertEquals(BooleanLiteralSet.BOTH, stringType0.getPossibleToBooleanOutcomes());
      assertEquals(false, stringType0.isNominalConstructor());
      assertEquals(false, stringType0.isAllType());
      assertEquals("string", stringType0.getDisplayName());
      assertEquals(false, stringType0.isRecordType());
      assertEquals(true, stringType0.isStringValueType());
      assertEquals(false, stringType0.isTemplateType());
      assertEquals(false, stringType0.isBooleanValueType());
      assertEquals(false, stringType0.isConstructor());
      assertEquals(false, stringType0.isNoObjectType());
      assertEquals(false, stringType0.isNoResolvedType());
      assertNotNull(stringType0);
      
      UnionType unionType0 = stringType0.toMaybeUnionType();
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, stringType0.isNominalType());
      assertEquals(false, stringType0.isVoidType());
      assertEquals(true, stringType0.matchesStringContext());
      assertEquals(false, stringType0.isFunctionPrototypeType());
      assertEquals(false, stringType0.isNumberValueType());
      assertEquals(true, stringType0.matchesNumberContext());
      assertEquals(false, stringType0.isNullType());
      assertEquals(false, stringType0.isOrdinaryFunction());
      assertEquals(false, stringType0.isUnionType());
      assertEquals(false, stringType0.isInterface());
      assertEquals(false, stringType0.isResolved());
      assertEquals(false, stringType0.isCheckedUnknownType());
      assertEquals(false, stringType0.isNoType());
      assertEquals(false, stringType0.isFunctionType());
      assertEquals(true, stringType0.matchesObjectContext());
      assertEquals(false, stringType0.isEnumType());
      assertEquals(false, stringType0.isEnumElementType());
      assertEquals(BooleanLiteralSet.BOTH, stringType0.getPossibleToBooleanOutcomes());
      assertEquals(false, stringType0.isNominalConstructor());
      assertEquals(false, stringType0.isAllType());
      assertEquals("string", stringType0.getDisplayName());
      assertEquals(false, stringType0.isRecordType());
      assertEquals(true, stringType0.isStringValueType());
      assertEquals(false, stringType0.isTemplateType());
      assertEquals(false, stringType0.isBooleanValueType());
      assertEquals(false, stringType0.isConstructor());
      assertEquals(false, stringType0.isNoObjectType());
      assertEquals(false, stringType0.isNoResolvedType());
      assertNull(unionType0);
      
      FunctionType functionType0 = JSType.toMaybeFunctionType((JSType) unionType0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, stringType0.isNominalType());
      assertEquals(false, stringType0.isVoidType());
      assertEquals(true, stringType0.matchesStringContext());
      assertEquals(false, stringType0.isFunctionPrototypeType());
      assertEquals(false, stringType0.isNumberValueType());
      assertEquals(true, stringType0.matchesNumberContext());
      assertEquals(false, stringType0.isNullType());
      assertEquals(false, stringType0.isOrdinaryFunction());
      assertEquals(false, stringType0.isUnionType());
      assertEquals(false, stringType0.isInterface());
      assertEquals(false, stringType0.isResolved());
      assertEquals(false, stringType0.isCheckedUnknownType());
      assertEquals(false, stringType0.isNoType());
      assertEquals(false, stringType0.isFunctionType());
      assertEquals(true, stringType0.matchesObjectContext());
      assertEquals(false, stringType0.isEnumType());
      assertEquals(false, stringType0.isEnumElementType());
      assertEquals(BooleanLiteralSet.BOTH, stringType0.getPossibleToBooleanOutcomes());
      assertEquals(false, stringType0.isNominalConstructor());
      assertEquals(false, stringType0.isAllType());
      assertEquals("string", stringType0.getDisplayName());
      assertEquals(false, stringType0.isRecordType());
      assertEquals(true, stringType0.isStringValueType());
      assertEquals(false, stringType0.isTemplateType());
      assertEquals(false, stringType0.isBooleanValueType());
      assertEquals(false, stringType0.isConstructor());
      assertEquals(false, stringType0.isNoObjectType());
      assertEquals(false, stringType0.isNoResolvedType());
      assertNull(functionType0);
      
      IndexedType indexedType0 = new IndexedType(jSTypeRegistry0, functionType0, functionType0);
      assertEquals(false, indexedType0.isBooleanValueType());
      assertEquals(false, indexedType0.hasCachedValues());
      assertEquals(false, indexedType0.isResolved());
      assertEquals(false, indexedType0.isFunctionPrototypeType());
      assertEquals(false, indexedType0.isStringValueType());
      assertEquals(BooleanLiteralSet.TRUE, indexedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, indexedType0.isTemplateType());
      assertEquals(false, indexedType0.isNumberValueType());
      assertEquals(false, indexedType0.isNullType());
      assertEquals(false, indexedType0.isVoidType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, stringType0.isNominalType());
      assertEquals(false, stringType0.isVoidType());
      assertEquals(true, stringType0.matchesStringContext());
      assertEquals(false, stringType0.isFunctionPrototypeType());
      assertEquals(false, stringType0.isNumberValueType());
      assertEquals(true, stringType0.matchesNumberContext());
      assertEquals(false, stringType0.isNullType());
      assertEquals(false, stringType0.isOrdinaryFunction());
      assertEquals(false, stringType0.isUnionType());
      assertEquals(false, stringType0.isInterface());
      assertEquals(false, stringType0.isResolved());
      assertEquals(false, stringType0.isCheckedUnknownType());
      assertEquals(false, stringType0.isNoType());
      assertEquals(false, stringType0.isFunctionType());
      assertEquals(true, stringType0.matchesObjectContext());
      assertEquals(false, stringType0.isEnumType());
      assertEquals(false, stringType0.isEnumElementType());
      assertEquals(BooleanLiteralSet.BOTH, stringType0.getPossibleToBooleanOutcomes());
      assertEquals(false, stringType0.isNominalConstructor());
      assertEquals(false, stringType0.isAllType());
      assertEquals("string", stringType0.getDisplayName());
      assertEquals(false, stringType0.isRecordType());
      assertEquals(true, stringType0.isStringValueType());
      assertEquals(false, stringType0.isTemplateType());
      assertEquals(false, stringType0.isBooleanValueType());
      assertEquals(false, stringType0.isConstructor());
      assertEquals(false, stringType0.isNoObjectType());
      assertEquals(false, stringType0.isNoResolvedType());
      assertNotNull(indexedType0);
      
      // Undeclared exception!
      try {
        boolean boolean0 = indexedType0.hasReferenceName();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test41()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      AllType allType0 = new AllType(jSTypeRegistry0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, allType0.isConstructor());
      assertEquals(false, allType0.isFunctionPrototypeType());
      assertEquals(false, allType0.isOrdinaryFunction());
      assertEquals(true, allType0.isAllType());
      assertEquals(false, allType0.isNullType());
      assertEquals(true, allType0.matchesStringContext());
      assertEquals(false, allType0.isNumberValueType());
      assertEquals(false, allType0.canBeCalled());
      assertEquals(false, allType0.isTemplateType());
      assertEquals(false, allType0.isCheckedUnknownType());
      assertEquals(false, allType0.isStringValueType());
      assertEquals(false, allType0.isFunctionType());
      assertEquals(false, allType0.isEnumElementType());
      assertEquals(false, allType0.isNominalType());
      assertEquals(BooleanLiteralSet.BOTH, allType0.getPossibleToBooleanOutcomes());
      assertEquals(false, allType0.isNominalConstructor());
      assertEquals(false, allType0.isBooleanValueType());
      assertEquals(false, allType0.isInterface());
      assertEquals(true, allType0.hasDisplayName());
      assertEquals("<Any Type>", allType0.getDisplayName());
      assertEquals(false, allType0.isResolved());
      assertEquals(false, allType0.isEnumType());
      assertEquals(false, allType0.isNoObjectType());
      assertEquals(false, allType0.isNoType());
      assertEquals(false, allType0.isUnionType());
      assertEquals(false, allType0.isNoResolvedType());
      assertEquals(false, allType0.isRecordType());
      assertEquals(false, allType0.isVoidType());
      assertEquals(true, allType0.matchesObjectContext());
      assertNotNull(allType0);
      
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      assertEquals(2147483647, noResolvedType0.getMaxArguments());
      assertNull(noResolvedType0.getReferenceName());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertEquals(true, noResolvedType0.hasInstanceType());
      assertEquals(false, noResolvedType0.isStringValueType());
      assertEquals(false, noResolvedType0.isResolved());
      assertEquals(false, noResolvedType0.isNoObjectType());
      assertEquals(false, noResolvedType0.isNullType());
      assertEquals(true, noResolvedType0.matchesNumberContext());
      assertEquals(false, noResolvedType0.isFunctionPrototypeType());
      assertEquals(false, noResolvedType0.isRecordType());
      assertEquals(false, noResolvedType0.hasCachedValues());
      assertEquals(false, noResolvedType0.isBooleanValueType());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertEquals(false, noResolvedType0.isTemplateType());
      assertEquals(false, noResolvedType0.isOrdinaryFunction());
      assertEquals(false, noResolvedType0.isFunctionType());
      assertEquals(false, noResolvedType0.isInterface());
      assertEquals(true, noResolvedType0.isNullable());
      assertEquals(true, noResolvedType0.matchesStringContext());
      assertEquals(false, noResolvedType0.isEnumElementType());
      assertEquals(2147483647, noResolvedType0.getPropertiesCount());
      assertNull(noResolvedType0.getTemplateTypeName());
      assertEquals(false, noResolvedType0.isVoidType());
      assertEquals(false, noResolvedType0.isNominalType());
      assertEquals(true, noResolvedType0.matchesObjectContext());
      assertEquals(false, noResolvedType0.isReturnTypeInferred());
      assertEquals(false, noResolvedType0.isAllType());
      assertEquals(false, noResolvedType0.isCheckedUnknownType());
      assertEquals(false, noResolvedType0.isUnionType());
      assertEquals(false, noResolvedType0.isNominalConstructor());
      assertEquals(false, noResolvedType0.isEnumType());
      assertEquals(true, noResolvedType0.isConstructor());
      assertEquals(true, noResolvedType0.canBeCalled());
      assertEquals(false, noResolvedType0.isNumberValueType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(noResolvedType0);
      
      FunctionType functionType0 = JSType.toMaybeFunctionType((JSType) noResolvedType0);
      assertEquals(2147483647, noResolvedType0.getMaxArguments());
      assertNull(noResolvedType0.getReferenceName());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertEquals(true, noResolvedType0.hasInstanceType());
      assertEquals(false, noResolvedType0.isStringValueType());
      assertEquals(false, noResolvedType0.isResolved());
      assertEquals(false, noResolvedType0.isNoObjectType());
      assertEquals(false, noResolvedType0.isNullType());
      assertEquals(true, noResolvedType0.matchesNumberContext());
      assertEquals(false, noResolvedType0.isFunctionPrototypeType());
      assertEquals(false, noResolvedType0.isRecordType());
      assertEquals(false, noResolvedType0.hasCachedValues());
      assertEquals(false, noResolvedType0.isBooleanValueType());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertEquals(false, noResolvedType0.isTemplateType());
      assertEquals(false, noResolvedType0.isOrdinaryFunction());
      assertEquals(false, noResolvedType0.isFunctionType());
      assertEquals(false, noResolvedType0.isInterface());
      assertEquals(true, noResolvedType0.isNullable());
      assertEquals(true, noResolvedType0.matchesStringContext());
      assertEquals(false, noResolvedType0.isEnumElementType());
      assertEquals(2147483647, noResolvedType0.getPropertiesCount());
      assertNull(noResolvedType0.getTemplateTypeName());
      assertEquals(false, noResolvedType0.isVoidType());
      assertEquals(false, noResolvedType0.isNominalType());
      assertEquals(true, noResolvedType0.matchesObjectContext());
      assertEquals(false, noResolvedType0.isReturnTypeInferred());
      assertEquals(false, noResolvedType0.isAllType());
      assertEquals(false, noResolvedType0.isCheckedUnknownType());
      assertEquals(false, noResolvedType0.isUnionType());
      assertEquals(false, noResolvedType0.isNominalConstructor());
      assertEquals(false, noResolvedType0.isEnumType());
      assertEquals(true, noResolvedType0.isConstructor());
      assertEquals(true, noResolvedType0.canBeCalled());
      assertEquals(false, noResolvedType0.isNumberValueType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNull(functionType0);
      
      ParameterizedType parameterizedType0 = new ParameterizedType(jSTypeRegistry0, functionType0, allType0);
      assertEquals(false, parameterizedType0.isNumberValueType());
      assertEquals(false, parameterizedType0.isResolved());
      assertEquals(false, parameterizedType0.isVoidType());
      assertEquals(false, parameterizedType0.isBooleanValueType());
      assertEquals(false, parameterizedType0.hasCachedValues());
      assertEquals(false, parameterizedType0.isTemplateType());
      assertEquals(false, parameterizedType0.isStringValueType());
      assertEquals(BooleanLiteralSet.TRUE, parameterizedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, parameterizedType0.isNullType());
      assertEquals(false, parameterizedType0.isFunctionPrototypeType());
      assertEquals(2147483647, noResolvedType0.getMaxArguments());
      assertNull(noResolvedType0.getReferenceName());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertEquals(true, noResolvedType0.hasInstanceType());
      assertEquals(false, noResolvedType0.isStringValueType());
      assertEquals(false, noResolvedType0.isResolved());
      assertEquals(false, noResolvedType0.isNoObjectType());
      assertEquals(false, noResolvedType0.isNullType());
      assertEquals(true, noResolvedType0.matchesNumberContext());
      assertEquals(false, noResolvedType0.isFunctionPrototypeType());
      assertEquals(false, noResolvedType0.isRecordType());
      assertEquals(false, noResolvedType0.hasCachedValues());
      assertEquals(false, noResolvedType0.isBooleanValueType());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertEquals(false, noResolvedType0.isTemplateType());
      assertEquals(false, noResolvedType0.isOrdinaryFunction());
      assertEquals(false, noResolvedType0.isFunctionType());
      assertEquals(false, noResolvedType0.isInterface());
      assertEquals(true, noResolvedType0.isNullable());
      assertEquals(true, noResolvedType0.matchesStringContext());
      assertEquals(false, noResolvedType0.isEnumElementType());
      assertEquals(2147483647, noResolvedType0.getPropertiesCount());
      assertNull(noResolvedType0.getTemplateTypeName());
      assertEquals(false, noResolvedType0.isVoidType());
      assertEquals(false, noResolvedType0.isNominalType());
      assertEquals(true, noResolvedType0.matchesObjectContext());
      assertEquals(false, noResolvedType0.isReturnTypeInferred());
      assertEquals(false, noResolvedType0.isAllType());
      assertEquals(false, noResolvedType0.isCheckedUnknownType());
      assertEquals(false, noResolvedType0.isUnionType());
      assertEquals(false, noResolvedType0.isNominalConstructor());
      assertEquals(false, noResolvedType0.isEnumType());
      assertEquals(true, noResolvedType0.isConstructor());
      assertEquals(true, noResolvedType0.canBeCalled());
      assertEquals(false, noResolvedType0.isNumberValueType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, allType0.isConstructor());
      assertEquals(false, allType0.isFunctionPrototypeType());
      assertEquals(false, allType0.isOrdinaryFunction());
      assertEquals(true, allType0.isAllType());
      assertEquals(false, allType0.isNullType());
      assertEquals(true, allType0.matchesStringContext());
      assertEquals(false, allType0.isNumberValueType());
      assertEquals(false, allType0.canBeCalled());
      assertEquals(false, allType0.isTemplateType());
      assertEquals(false, allType0.isCheckedUnknownType());
      assertEquals(false, allType0.isStringValueType());
      assertEquals(false, allType0.isFunctionType());
      assertEquals(false, allType0.isEnumElementType());
      assertEquals(false, allType0.isNominalType());
      assertEquals(BooleanLiteralSet.BOTH, allType0.getPossibleToBooleanOutcomes());
      assertEquals(false, allType0.isNominalConstructor());
      assertEquals(false, allType0.isBooleanValueType());
      assertEquals(false, allType0.isInterface());
      assertEquals(true, allType0.hasDisplayName());
      assertEquals("<Any Type>", allType0.getDisplayName());
      assertEquals(false, allType0.isResolved());
      assertEquals(false, allType0.isEnumType());
      assertEquals(false, allType0.isNoObjectType());
      assertEquals(false, allType0.isNoType());
      assertEquals(false, allType0.isUnionType());
      assertEquals(false, allType0.isNoResolvedType());
      assertEquals(false, allType0.isRecordType());
      assertEquals(false, allType0.isVoidType());
      assertEquals(true, allType0.matchesObjectContext());
      assertNotNull(parameterizedType0);
      
      String string0 = parameterizedType0.getNormalizedReferenceName();
      assertEquals("", string0);
      assertEquals(false, parameterizedType0.isNumberValueType());
      assertEquals(false, parameterizedType0.isResolved());
      assertEquals(false, parameterizedType0.isVoidType());
      assertEquals(false, parameterizedType0.isBooleanValueType());
      assertEquals(false, parameterizedType0.hasCachedValues());
      assertEquals(false, parameterizedType0.isTemplateType());
      assertEquals(false, parameterizedType0.isStringValueType());
      assertEquals(BooleanLiteralSet.TRUE, parameterizedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, parameterizedType0.isNullType());
      assertEquals(false, parameterizedType0.isFunctionPrototypeType());
      assertEquals(2147483647, noResolvedType0.getMaxArguments());
      assertNull(noResolvedType0.getReferenceName());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertEquals(true, noResolvedType0.hasInstanceType());
      assertEquals(false, noResolvedType0.isStringValueType());
      assertEquals(false, noResolvedType0.isResolved());
      assertEquals(false, noResolvedType0.isNoObjectType());
      assertEquals(false, noResolvedType0.isNullType());
      assertEquals(true, noResolvedType0.matchesNumberContext());
      assertEquals(false, noResolvedType0.isFunctionPrototypeType());
      assertEquals(false, noResolvedType0.isRecordType());
      assertEquals(false, noResolvedType0.hasCachedValues());
      assertEquals(false, noResolvedType0.isBooleanValueType());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertEquals(false, noResolvedType0.isTemplateType());
      assertEquals(false, noResolvedType0.isOrdinaryFunction());
      assertEquals(false, noResolvedType0.isFunctionType());
      assertEquals(false, noResolvedType0.isInterface());
      assertEquals(true, noResolvedType0.isNullable());
      assertEquals(true, noResolvedType0.matchesStringContext());
      assertEquals(false, noResolvedType0.isEnumElementType());
      assertEquals(2147483647, noResolvedType0.getPropertiesCount());
      assertNull(noResolvedType0.getTemplateTypeName());
      assertEquals(false, noResolvedType0.isVoidType());
      assertEquals(false, noResolvedType0.isNominalType());
      assertEquals(true, noResolvedType0.matchesObjectContext());
      assertEquals(false, noResolvedType0.isReturnTypeInferred());
      assertEquals(false, noResolvedType0.isAllType());
      assertEquals(false, noResolvedType0.isCheckedUnknownType());
      assertEquals(false, noResolvedType0.isUnionType());
      assertEquals(false, noResolvedType0.isNominalConstructor());
      assertEquals(false, noResolvedType0.isEnumType());
      assertEquals(true, noResolvedType0.isConstructor());
      assertEquals(true, noResolvedType0.canBeCalled());
      assertEquals(false, noResolvedType0.isNumberValueType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, allType0.isConstructor());
      assertEquals(false, allType0.isFunctionPrototypeType());
      assertEquals(false, allType0.isOrdinaryFunction());
      assertEquals(true, allType0.isAllType());
      assertEquals(false, allType0.isNullType());
      assertEquals(true, allType0.matchesStringContext());
      assertEquals(false, allType0.isNumberValueType());
      assertEquals(false, allType0.canBeCalled());
      assertEquals(false, allType0.isTemplateType());
      assertEquals(false, allType0.isCheckedUnknownType());
      assertEquals(false, allType0.isStringValueType());
      assertEquals(false, allType0.isFunctionType());
      assertEquals(false, allType0.isEnumElementType());
      assertEquals(false, allType0.isNominalType());
      assertEquals(BooleanLiteralSet.BOTH, allType0.getPossibleToBooleanOutcomes());
      assertEquals(false, allType0.isNominalConstructor());
      assertEquals(false, allType0.isBooleanValueType());
      assertEquals(false, allType0.isInterface());
      assertEquals(true, allType0.hasDisplayName());
      assertEquals("<Any Type>", allType0.getDisplayName());
      assertEquals(false, allType0.isResolved());
      assertEquals(false, allType0.isEnumType());
      assertEquals(false, allType0.isNoObjectType());
      assertEquals(false, allType0.isNoType());
      assertEquals(false, allType0.isUnionType());
      assertEquals(false, allType0.isNoResolvedType());
      assertEquals(false, allType0.isRecordType());
      assertEquals(false, allType0.isVoidType());
      assertEquals(true, allType0.matchesObjectContext());
      assertNotNull(string0);
  }

  @Test
  public void test42()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      boolean boolean0 = true;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0, boolean0);
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      String string0 = null;
      TemplateType templateType0 = new TemplateType(jSTypeRegistry0, string0);
      assertEquals(false, templateType0.isNullType());
      assertEquals(false, templateType0.isNominalConstructor());
      assertEquals(false, templateType0.hasCachedValues());
      assertEquals(false, templateType0.isFunctionType());
      assertEquals(false, templateType0.isEnumElementType());
      assertNull(templateType0.getReferenceName());
      assertEquals(true, templateType0.isTemplateType());
      assertEquals(false, templateType0.isUnionType());
      assertEquals(false, templateType0.isResolved());
      assertEquals(false, templateType0.isEnumType());
      assertEquals(BooleanLiteralSet.TRUE, templateType0.getPossibleToBooleanOutcomes());
      assertEquals(false, templateType0.isRecordType());
      assertEquals(false, templateType0.isVoidType());
      assertEquals(false, templateType0.isBooleanValueType());
      assertEquals(false, templateType0.isFunctionPrototypeType());
      assertEquals(false, templateType0.isStringValueType());
      assertEquals(false, templateType0.isNumberValueType());
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(templateType0);
      
      ParameterizedType parameterizedType0 = jSTypeRegistry0.createParameterizedType((ObjectType) templateType0, (JSType) templateType0);
      assertEquals(false, templateType0.isNullType());
      assertEquals(false, templateType0.isNominalConstructor());
      assertEquals(false, templateType0.hasCachedValues());
      assertEquals(false, templateType0.isFunctionType());
      assertEquals(false, templateType0.isEnumElementType());
      assertNull(templateType0.getReferenceName());
      assertEquals(true, templateType0.isTemplateType());
      assertEquals(false, templateType0.isUnionType());
      assertEquals(false, templateType0.isResolved());
      assertEquals(false, templateType0.isEnumType());
      assertEquals(BooleanLiteralSet.TRUE, templateType0.getPossibleToBooleanOutcomes());
      assertEquals(false, templateType0.isRecordType());
      assertEquals(false, templateType0.isVoidType());
      assertEquals(false, templateType0.isBooleanValueType());
      assertEquals(false, templateType0.isFunctionPrototypeType());
      assertEquals(false, templateType0.isStringValueType());
      assertEquals(false, templateType0.isNumberValueType());
      assertEquals(false, parameterizedType0.isResolved());
      assertEquals(false, parameterizedType0.isStringValueType());
      assertEquals(false, parameterizedType0.isNumberValueType());
      assertEquals(false, parameterizedType0.isEnumElementType());
      assertEquals(false, parameterizedType0.isUnionType());
      assertEquals(false, parameterizedType0.isNullType());
      assertEquals(false, parameterizedType0.isVoidType());
      assertEquals(BooleanLiteralSet.TRUE, parameterizedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, parameterizedType0.isFunctionPrototypeType());
      assertEquals(false, parameterizedType0.isEnumType());
      assertEquals(false, parameterizedType0.isNominalConstructor());
      assertEquals(false, parameterizedType0.hasCachedValues());
      assertEquals(false, parameterizedType0.isTemplateType());
      assertEquals(false, parameterizedType0.isRecordType());
      assertEquals(false, parameterizedType0.isFunctionType());
      assertEquals(false, parameterizedType0.isBooleanValueType());
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(parameterizedType0);
      
      String string1 = parameterizedType0.getNormalizedReferenceName();
      assertEquals(false, templateType0.isNullType());
      assertEquals(false, templateType0.isNominalConstructor());
      assertEquals(false, templateType0.hasCachedValues());
      assertEquals(false, templateType0.isFunctionType());
      assertEquals(false, templateType0.isEnumElementType());
      assertNull(templateType0.getReferenceName());
      assertEquals(true, templateType0.isTemplateType());
      assertEquals(false, templateType0.isUnionType());
      assertEquals(false, templateType0.isResolved());
      assertEquals(false, templateType0.isEnumType());
      assertEquals(BooleanLiteralSet.TRUE, templateType0.getPossibleToBooleanOutcomes());
      assertEquals(false, templateType0.isRecordType());
      assertEquals(false, templateType0.isVoidType());
      assertEquals(false, templateType0.isBooleanValueType());
      assertEquals(false, templateType0.isFunctionPrototypeType());
      assertEquals(false, templateType0.isStringValueType());
      assertEquals(false, templateType0.isNumberValueType());
      assertEquals(false, parameterizedType0.isResolved());
      assertEquals(false, parameterizedType0.isStringValueType());
      assertEquals(false, parameterizedType0.isNumberValueType());
      assertEquals(false, parameterizedType0.isEnumElementType());
      assertEquals(false, parameterizedType0.isUnionType());
      assertEquals(false, parameterizedType0.isNullType());
      assertEquals(false, parameterizedType0.isVoidType());
      assertEquals(BooleanLiteralSet.TRUE, parameterizedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, parameterizedType0.isFunctionPrototypeType());
      assertEquals(false, parameterizedType0.isEnumType());
      assertEquals(false, parameterizedType0.isNominalConstructor());
      assertEquals(false, parameterizedType0.hasCachedValues());
      assertEquals(false, parameterizedType0.isTemplateType());
      assertEquals(false, parameterizedType0.isRecordType());
      assertEquals(false, parameterizedType0.isFunctionType());
      assertEquals(false, parameterizedType0.isBooleanValueType());
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNull(string1);
  }

  @Test
  public void test43()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      boolean boolean0 = true;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0, boolean0);
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      String string0 = "Z4cAD- C0Rn`*G2e*";
      TemplateType templateType0 = new TemplateType(jSTypeRegistry0, string0);
      assertEquals(false, templateType0.isRecordType());
      assertEquals(false, templateType0.isNullType());
      assertEquals(false, templateType0.isResolved());
      assertEquals(false, templateType0.isFunctionPrototypeType());
      assertEquals(false, templateType0.isNominalConstructor());
      assertEquals(BooleanLiteralSet.TRUE, templateType0.getPossibleToBooleanOutcomes());
      assertEquals(false, templateType0.isFunctionType());
      assertEquals(false, templateType0.isBooleanValueType());
      assertEquals(true, templateType0.isTemplateType());
      assertEquals(false, templateType0.isNumberValueType());
      assertEquals("Z4cAD- C0Rn`*G2e*", templateType0.getReferenceName());
      assertEquals(false, templateType0.isEnumType());
      assertEquals(false, templateType0.isEnumElementType());
      assertEquals(false, templateType0.isVoidType());
      assertEquals(false, templateType0.isUnionType());
      assertEquals(false, templateType0.isStringValueType());
      assertEquals(false, templateType0.hasCachedValues());
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(templateType0);
      
      ObjectType.Property objectType_Property0 = templateType0.getOwnSlot(string0);
      assertEquals(false, templateType0.isRecordType());
      assertEquals(false, templateType0.isNullType());
      assertEquals(false, templateType0.isResolved());
      assertEquals(false, templateType0.isFunctionPrototypeType());
      assertEquals(false, templateType0.isNominalConstructor());
      assertEquals(BooleanLiteralSet.TRUE, templateType0.getPossibleToBooleanOutcomes());
      assertEquals(false, templateType0.isFunctionType());
      assertEquals(false, templateType0.isBooleanValueType());
      assertEquals(true, templateType0.isTemplateType());
      assertEquals(false, templateType0.isNumberValueType());
      assertEquals("Z4cAD- C0Rn`*G2e*", templateType0.getReferenceName());
      assertEquals(false, templateType0.isEnumType());
      assertEquals(false, templateType0.isEnumElementType());
      assertEquals(false, templateType0.isVoidType());
      assertEquals(false, templateType0.isUnionType());
      assertEquals(false, templateType0.isStringValueType());
      assertEquals(false, templateType0.hasCachedValues());
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNull(objectType_Property0);
  }

  @Test
  public void test44()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = null;
      ObjectType objectType0 = null;
      ParameterizedType parameterizedType0 = new ParameterizedType(jSTypeRegistry0, objectType0, objectType0);
      assertEquals(BooleanLiteralSet.TRUE, parameterizedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, parameterizedType0.isStringValueType());
      assertEquals(false, parameterizedType0.isNullType());
      assertEquals(false, parameterizedType0.isFunctionPrototypeType());
      assertEquals(false, parameterizedType0.hasCachedValues());
      assertEquals(false, parameterizedType0.isResolved());
      assertEquals(false, parameterizedType0.isBooleanValueType());
      assertEquals(false, parameterizedType0.isTemplateType());
      assertEquals(false, parameterizedType0.isVoidType());
      assertEquals(false, parameterizedType0.isNumberValueType());
      assertNotNull(parameterizedType0);
      
      String string0 = "Jt";
      ObjectType.Property objectType_Property0 = parameterizedType0.getSlot(string0);
      assertEquals(BooleanLiteralSet.TRUE, parameterizedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, parameterizedType0.isStringValueType());
      assertEquals(false, parameterizedType0.isNullType());
      assertEquals(false, parameterizedType0.isFunctionPrototypeType());
      assertEquals(false, parameterizedType0.hasCachedValues());
      assertEquals(false, parameterizedType0.isResolved());
      assertEquals(false, parameterizedType0.isBooleanValueType());
      assertEquals(false, parameterizedType0.isTemplateType());
      assertEquals(false, parameterizedType0.isVoidType());
      assertEquals(false, parameterizedType0.isNumberValueType());
      assertNull(objectType_Property0);
  }

  @Test
  public void test45()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = null;
      StringType stringType0 = new StringType(jSTypeRegistry0);
      assertEquals(false, stringType0.isNumberValueType());
      assertEquals(false, stringType0.isNoResolvedType());
      assertEquals(true, stringType0.matchesObjectContext());
      assertEquals(BooleanLiteralSet.BOTH, stringType0.getPossibleToBooleanOutcomes());
      assertEquals(false, stringType0.isFunctionPrototypeType());
      assertEquals(true, stringType0.isStringValueType());
      assertEquals(false, stringType0.isEnumType());
      assertEquals(false, stringType0.isAllType());
      assertEquals(false, stringType0.isNoType());
      assertEquals(false, stringType0.isUnionType());
      assertEquals(false, stringType0.isEnumElementType());
      assertEquals(false, stringType0.isNoObjectType());
      assertEquals(true, stringType0.matchesStringContext());
      assertEquals("string", stringType0.getDisplayName());
      assertEquals(false, stringType0.isNominalConstructor());
      assertEquals(false, stringType0.isResolved());
      assertEquals(true, stringType0.matchesNumberContext());
      assertEquals(false, stringType0.isBooleanValueType());
      assertEquals(false, stringType0.isRecordType());
      assertEquals(false, stringType0.isTemplateType());
      assertEquals(false, stringType0.isOrdinaryFunction());
      assertEquals(false, stringType0.isFunctionType());
      assertEquals(false, stringType0.isInterface());
      assertEquals(false, stringType0.isNullType());
      assertEquals(false, stringType0.isVoidType());
      assertEquals(false, stringType0.isNominalType());
      assertEquals(false, stringType0.isConstructor());
      assertEquals(false, stringType0.isCheckedUnknownType());
      assertNotNull(stringType0);
      
      ObjectType objectType0 = stringType0.toObjectType();
      assertEquals(false, stringType0.isNumberValueType());
      assertEquals(false, stringType0.isNoResolvedType());
      assertEquals(true, stringType0.matchesObjectContext());
      assertEquals(BooleanLiteralSet.BOTH, stringType0.getPossibleToBooleanOutcomes());
      assertEquals(false, stringType0.isFunctionPrototypeType());
      assertEquals(true, stringType0.isStringValueType());
      assertEquals(false, stringType0.isEnumType());
      assertEquals(false, stringType0.isAllType());
      assertEquals(false, stringType0.isNoType());
      assertEquals(false, stringType0.isUnionType());
      assertEquals(false, stringType0.isEnumElementType());
      assertEquals(false, stringType0.isNoObjectType());
      assertEquals(true, stringType0.matchesStringContext());
      assertEquals("string", stringType0.getDisplayName());
      assertEquals(false, stringType0.isNominalConstructor());
      assertEquals(false, stringType0.isResolved());
      assertEquals(true, stringType0.matchesNumberContext());
      assertEquals(false, stringType0.isBooleanValueType());
      assertEquals(false, stringType0.isRecordType());
      assertEquals(false, stringType0.isTemplateType());
      assertEquals(false, stringType0.isOrdinaryFunction());
      assertEquals(false, stringType0.isFunctionType());
      assertEquals(false, stringType0.isInterface());
      assertEquals(false, stringType0.isNullType());
      assertEquals(false, stringType0.isVoidType());
      assertEquals(false, stringType0.isNominalType());
      assertEquals(false, stringType0.isConstructor());
      assertEquals(false, stringType0.isCheckedUnknownType());
      assertNull(objectType0);
      
      FunctionType functionType0 = JSType.toMaybeFunctionType((JSType) objectType0);
      assertEquals(false, stringType0.isNumberValueType());
      assertEquals(false, stringType0.isNoResolvedType());
      assertEquals(true, stringType0.matchesObjectContext());
      assertEquals(BooleanLiteralSet.BOTH, stringType0.getPossibleToBooleanOutcomes());
      assertEquals(false, stringType0.isFunctionPrototypeType());
      assertEquals(true, stringType0.isStringValueType());
      assertEquals(false, stringType0.isEnumType());
      assertEquals(false, stringType0.isAllType());
      assertEquals(false, stringType0.isNoType());
      assertEquals(false, stringType0.isUnionType());
      assertEquals(false, stringType0.isEnumElementType());
      assertEquals(false, stringType0.isNoObjectType());
      assertEquals(true, stringType0.matchesStringContext());
      assertEquals("string", stringType0.getDisplayName());
      assertEquals(false, stringType0.isNominalConstructor());
      assertEquals(false, stringType0.isResolved());
      assertEquals(true, stringType0.matchesNumberContext());
      assertEquals(false, stringType0.isBooleanValueType());
      assertEquals(false, stringType0.isRecordType());
      assertEquals(false, stringType0.isTemplateType());
      assertEquals(false, stringType0.isOrdinaryFunction());
      assertEquals(false, stringType0.isFunctionType());
      assertEquals(false, stringType0.isInterface());
      assertEquals(false, stringType0.isNullType());
      assertEquals(false, stringType0.isVoidType());
      assertEquals(false, stringType0.isNominalType());
      assertEquals(false, stringType0.isConstructor());
      assertEquals(false, stringType0.isCheckedUnknownType());
      assertNull(functionType0);
      
      IndexedType indexedType0 = new IndexedType(jSTypeRegistry0, functionType0, stringType0);
      assertEquals(false, stringType0.isNumberValueType());
      assertEquals(false, stringType0.isNoResolvedType());
      assertEquals(true, stringType0.matchesObjectContext());
      assertEquals(BooleanLiteralSet.BOTH, stringType0.getPossibleToBooleanOutcomes());
      assertEquals(false, stringType0.isFunctionPrototypeType());
      assertEquals(true, stringType0.isStringValueType());
      assertEquals(false, stringType0.isEnumType());
      assertEquals(false, stringType0.isAllType());
      assertEquals(false, stringType0.isNoType());
      assertEquals(false, stringType0.isUnionType());
      assertEquals(false, stringType0.isEnumElementType());
      assertEquals(false, stringType0.isNoObjectType());
      assertEquals(true, stringType0.matchesStringContext());
      assertEquals("string", stringType0.getDisplayName());
      assertEquals(false, stringType0.isNominalConstructor());
      assertEquals(false, stringType0.isResolved());
      assertEquals(true, stringType0.matchesNumberContext());
      assertEquals(false, stringType0.isBooleanValueType());
      assertEquals(false, stringType0.isRecordType());
      assertEquals(false, stringType0.isTemplateType());
      assertEquals(false, stringType0.isOrdinaryFunction());
      assertEquals(false, stringType0.isFunctionType());
      assertEquals(false, stringType0.isInterface());
      assertEquals(false, stringType0.isNullType());
      assertEquals(false, stringType0.isVoidType());
      assertEquals(false, stringType0.isNominalType());
      assertEquals(false, stringType0.isConstructor());
      assertEquals(false, stringType0.isCheckedUnknownType());
      assertEquals(false, indexedType0.isStringValueType());
      assertEquals(BooleanLiteralSet.TRUE, indexedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, indexedType0.hasCachedValues());
      assertEquals(false, indexedType0.isNumberValueType());
      assertEquals(false, indexedType0.isBooleanValueType());
      assertEquals(false, indexedType0.isTemplateType());
      assertEquals(false, indexedType0.isVoidType());
      assertEquals(false, indexedType0.isFunctionPrototypeType());
      assertEquals(false, indexedType0.isNullType());
      assertEquals(false, indexedType0.isResolved());
      assertNotNull(indexedType0);
      
      JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0);
      assertEquals(false, jSTypeRegistry1.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry1);
      
      ParameterizedType parameterizedType0 = new ParameterizedType(jSTypeRegistry1, indexedType0, indexedType0);
      assertEquals(false, jSTypeRegistry1.shouldTolerateUndefinedValues());
      assertEquals(false, stringType0.isNumberValueType());
      assertEquals(false, stringType0.isNoResolvedType());
      assertEquals(true, stringType0.matchesObjectContext());
      assertEquals(BooleanLiteralSet.BOTH, stringType0.getPossibleToBooleanOutcomes());
      assertEquals(false, stringType0.isFunctionPrototypeType());
      assertEquals(true, stringType0.isStringValueType());
      assertEquals(false, stringType0.isEnumType());
      assertEquals(false, stringType0.isAllType());
      assertEquals(false, stringType0.isNoType());
      assertEquals(false, stringType0.isUnionType());
      assertEquals(false, stringType0.isEnumElementType());
      assertEquals(false, stringType0.isNoObjectType());
      assertEquals(true, stringType0.matchesStringContext());
      assertEquals("string", stringType0.getDisplayName());
      assertEquals(false, stringType0.isNominalConstructor());
      assertEquals(false, stringType0.isResolved());
      assertEquals(true, stringType0.matchesNumberContext());
      assertEquals(false, stringType0.isBooleanValueType());
      assertEquals(false, stringType0.isRecordType());
      assertEquals(false, stringType0.isTemplateType());
      assertEquals(false, stringType0.isOrdinaryFunction());
      assertEquals(false, stringType0.isFunctionType());
      assertEquals(false, stringType0.isInterface());
      assertEquals(false, stringType0.isNullType());
      assertEquals(false, stringType0.isVoidType());
      assertEquals(false, stringType0.isNominalType());
      assertEquals(false, stringType0.isConstructor());
      assertEquals(false, stringType0.isCheckedUnknownType());
      assertEquals(false, indexedType0.isStringValueType());
      assertEquals(BooleanLiteralSet.TRUE, indexedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, indexedType0.hasCachedValues());
      assertEquals(false, indexedType0.isNumberValueType());
      assertEquals(false, indexedType0.isBooleanValueType());
      assertEquals(false, indexedType0.isTemplateType());
      assertEquals(false, indexedType0.isVoidType());
      assertEquals(false, indexedType0.isFunctionPrototypeType());
      assertEquals(false, indexedType0.isNullType());
      assertEquals(false, indexedType0.isResolved());
      assertEquals(false, parameterizedType0.isVoidType());
      assertEquals(false, parameterizedType0.isResolved());
      assertEquals(false, parameterizedType0.isStringValueType());
      assertEquals(false, parameterizedType0.isNullType());
      assertEquals(false, parameterizedType0.isFunctionPrototypeType());
      assertEquals(false, parameterizedType0.isTemplateType());
      assertEquals(false, parameterizedType0.isBooleanValueType());
      assertEquals(false, parameterizedType0.isNumberValueType());
      assertEquals(BooleanLiteralSet.TRUE, parameterizedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, parameterizedType0.hasCachedValues());
      assertNotNull(parameterizedType0);
      
      // Undeclared exception!
      try {
        boolean boolean0 = parameterizedType0.isOrdinaryFunction();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test46()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      boolean boolean0 = true;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0, boolean0);
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      String string0 = "}";
      TemplateType templateType0 = new TemplateType(jSTypeRegistry0, string0);
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, templateType0.isFunctionPrototypeType());
      assertEquals("}", templateType0.getReferenceName());
      assertEquals(false, templateType0.isBooleanValueType());
      assertEquals(false, templateType0.isVoidType());
      assertEquals(false, templateType0.isResolved());
      assertEquals(false, templateType0.isStringValueType());
      assertEquals(false, templateType0.isNullType());
      assertEquals(false, templateType0.isEnumType());
      assertEquals(false, templateType0.isNominalConstructor());
      assertEquals(false, templateType0.isEnumElementType());
      assertEquals(true, templateType0.isTemplateType());
      assertEquals(false, templateType0.isNumberValueType());
      assertEquals(false, templateType0.isUnionType());
      assertEquals(false, templateType0.hasCachedValues());
      assertEquals(false, templateType0.isRecordType());
      assertEquals(false, templateType0.isFunctionType());
      assertEquals(BooleanLiteralSet.TRUE, templateType0.getPossibleToBooleanOutcomes());
      assertNotNull(templateType0);
      
      JSDocInfo jSDocInfo0 = templateType0.getJSDocInfo();
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, templateType0.isFunctionPrototypeType());
      assertEquals("}", templateType0.getReferenceName());
      assertEquals(false, templateType0.isBooleanValueType());
      assertEquals(false, templateType0.isVoidType());
      assertEquals(false, templateType0.isResolved());
      assertEquals(false, templateType0.isStringValueType());
      assertEquals(false, templateType0.isNullType());
      assertEquals(false, templateType0.isEnumType());
      assertEquals(false, templateType0.isNominalConstructor());
      assertEquals(false, templateType0.isEnumElementType());
      assertEquals(true, templateType0.isTemplateType());
      assertEquals(false, templateType0.isNumberValueType());
      assertEquals(false, templateType0.isUnionType());
      assertEquals(false, templateType0.hasCachedValues());
      assertEquals(false, templateType0.isRecordType());
      assertEquals(false, templateType0.isFunctionType());
      assertEquals(BooleanLiteralSet.TRUE, templateType0.getPossibleToBooleanOutcomes());
      assertNull(jSDocInfo0);
  }

  @Test
  public void test47()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      boolean boolean0 = false;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0, boolean0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      String string0 = "4cAD-j0Rv`*G2*";
      TemplateType templateType0 = new TemplateType(jSTypeRegistry0, string0);
      assertEquals(false, templateType0.isStringValueType());
      assertEquals(false, templateType0.isResolved());
      assertEquals(false, templateType0.isFunctionPrototypeType());
      assertEquals(BooleanLiteralSet.TRUE, templateType0.getPossibleToBooleanOutcomes());
      assertEquals(false, templateType0.isNominalConstructor());
      assertEquals(false, templateType0.isBooleanValueType());
      assertEquals(true, templateType0.isTemplateType());
      assertEquals(false, templateType0.isEnumType());
      assertEquals(false, templateType0.isEnumElementType());
      assertEquals(false, templateType0.hasCachedValues());
      assertEquals(false, templateType0.isUnionType());
      assertEquals(false, templateType0.isVoidType());
      assertEquals(false, templateType0.isNullType());
      assertEquals("4cAD-j0Rv`*G2*", templateType0.getReferenceName());
      assertEquals(false, templateType0.isRecordType());
      assertEquals(false, templateType0.isFunctionType());
      assertEquals(false, templateType0.isNumberValueType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(templateType0);
      
      TernaryValue ternaryValue0 = templateType0.testForEquality((JSType) templateType0);
      assertEquals("UNKNOWN", ternaryValue0.name());
      assertEquals(TernaryValue.UNKNOWN, ternaryValue0.not());
      assertEquals(2, ternaryValue0.ordinal());
      assertEquals("unknown", ternaryValue0.toString());
      assertEquals(false, templateType0.isStringValueType());
      assertEquals(false, templateType0.isResolved());
      assertEquals(false, templateType0.isFunctionPrototypeType());
      assertEquals(BooleanLiteralSet.TRUE, templateType0.getPossibleToBooleanOutcomes());
      assertEquals(false, templateType0.isNominalConstructor());
      assertEquals(false, templateType0.isBooleanValueType());
      assertEquals(true, templateType0.isTemplateType());
      assertEquals(false, templateType0.isEnumType());
      assertEquals(false, templateType0.isEnumElementType());
      assertEquals(false, templateType0.hasCachedValues());
      assertEquals(false, templateType0.isUnionType());
      assertEquals(false, templateType0.isVoidType());
      assertEquals(false, templateType0.isNullType());
      assertEquals("4cAD-j0Rv`*G2*", templateType0.getReferenceName());
      assertEquals(false, templateType0.isRecordType());
      assertEquals(false, templateType0.isFunctionType());
      assertEquals(false, templateType0.isNumberValueType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
  }

  @Test
  public void test48()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      boolean boolean0 = true;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0, boolean0);
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      String string0 = null;
      TemplateType templateType0 = new TemplateType(jSTypeRegistry0, string0);
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(BooleanLiteralSet.TRUE, templateType0.getPossibleToBooleanOutcomes());
      assertEquals(false, templateType0.isNumberValueType());
      assertEquals(false, templateType0.isNominalConstructor());
      assertEquals(true, templateType0.isTemplateType());
      assertEquals(false, templateType0.isEnumElementType());
      assertEquals(false, templateType0.isFunctionType());
      assertEquals(false, templateType0.isStringValueType());
      assertEquals(false, templateType0.isFunctionPrototypeType());
      assertEquals(false, templateType0.isEnumType());
      assertEquals(false, templateType0.hasCachedValues());
      assertEquals(false, templateType0.isUnionType());
      assertEquals(false, templateType0.isVoidType());
      assertEquals(false, templateType0.isNullType());
      assertEquals(false, templateType0.isRecordType());
      assertNull(templateType0.getReferenceName());
      assertEquals(false, templateType0.isBooleanValueType());
      assertEquals(false, templateType0.isResolved());
      assertNotNull(templateType0);
      
      ParameterizedType parameterizedType0 = jSTypeRegistry0.createParameterizedType((ObjectType) templateType0, (JSType) templateType0);
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(BooleanLiteralSet.TRUE, templateType0.getPossibleToBooleanOutcomes());
      assertEquals(false, templateType0.isNumberValueType());
      assertEquals(false, templateType0.isNominalConstructor());
      assertEquals(true, templateType0.isTemplateType());
      assertEquals(false, templateType0.isEnumElementType());
      assertEquals(false, templateType0.isFunctionType());
      assertEquals(false, templateType0.isStringValueType());
      assertEquals(false, templateType0.isFunctionPrototypeType());
      assertEquals(false, templateType0.isEnumType());
      assertEquals(false, templateType0.hasCachedValues());
      assertEquals(false, templateType0.isUnionType());
      assertEquals(false, templateType0.isVoidType());
      assertEquals(false, templateType0.isNullType());
      assertEquals(false, templateType0.isRecordType());
      assertNull(templateType0.getReferenceName());
      assertEquals(false, templateType0.isBooleanValueType());
      assertEquals(false, templateType0.isResolved());
      assertEquals(false, parameterizedType0.isEnumType());
      assertEquals(BooleanLiteralSet.TRUE, parameterizedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, parameterizedType0.isNominalConstructor());
      assertEquals(false, parameterizedType0.isFunctionPrototypeType());
      assertEquals(false, parameterizedType0.isFunctionType());
      assertEquals(false, parameterizedType0.isUnionType());
      assertEquals(false, parameterizedType0.isResolved());
      assertEquals(false, parameterizedType0.isVoidType());
      assertEquals(false, parameterizedType0.hasCachedValues());
      assertEquals(false, parameterizedType0.isStringValueType());
      assertEquals(false, parameterizedType0.isEnumElementType());
      assertEquals(false, parameterizedType0.isNumberValueType());
      assertEquals(false, parameterizedType0.isBooleanValueType());
      assertEquals(false, parameterizedType0.isTemplateType());
      assertEquals(false, parameterizedType0.isNullType());
      assertEquals(false, parameterizedType0.isRecordType());
      assertNotNull(parameterizedType0);
      
      boolean boolean1 = parameterizedType0.isInterface();
      assertFalse(boolean1);
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(BooleanLiteralSet.TRUE, templateType0.getPossibleToBooleanOutcomes());
      assertEquals(false, templateType0.isNumberValueType());
      assertEquals(false, templateType0.isNominalConstructor());
      assertEquals(true, templateType0.isTemplateType());
      assertEquals(false, templateType0.isEnumElementType());
      assertEquals(false, templateType0.isFunctionType());
      assertEquals(false, templateType0.isStringValueType());
      assertEquals(false, templateType0.isFunctionPrototypeType());
      assertEquals(false, templateType0.isEnumType());
      assertEquals(false, templateType0.hasCachedValues());
      assertEquals(false, templateType0.isUnionType());
      assertEquals(false, templateType0.isVoidType());
      assertEquals(false, templateType0.isNullType());
      assertEquals(false, templateType0.isRecordType());
      assertNull(templateType0.getReferenceName());
      assertEquals(false, templateType0.isBooleanValueType());
      assertEquals(false, templateType0.isResolved());
      assertEquals(false, parameterizedType0.isEnumType());
      assertEquals(BooleanLiteralSet.TRUE, parameterizedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, parameterizedType0.isNominalConstructor());
      assertEquals(false, parameterizedType0.isFunctionPrototypeType());
      assertEquals(false, parameterizedType0.isFunctionType());
      assertEquals(false, parameterizedType0.isUnionType());
      assertEquals(false, parameterizedType0.isResolved());
      assertEquals(false, parameterizedType0.isVoidType());
      assertEquals(false, parameterizedType0.hasCachedValues());
      assertEquals(false, parameterizedType0.isStringValueType());
      assertEquals(false, parameterizedType0.isEnumElementType());
      assertEquals(false, parameterizedType0.isNumberValueType());
      assertEquals(false, parameterizedType0.isBooleanValueType());
      assertEquals(false, parameterizedType0.isTemplateType());
      assertEquals(false, parameterizedType0.isNullType());
      assertEquals(false, parameterizedType0.isRecordType());
      assertFalse(boolean0 == boolean1);
      assertFalse(boolean1 == boolean0);
  }

  @Test
  public void test49()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      boolean boolean0 = true;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0, boolean0);
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      String string0 = null;
      TemplateType templateType0 = new TemplateType(jSTypeRegistry0, string0);
      assertEquals(false, templateType0.isBooleanValueType());
      assertEquals(false, templateType0.isResolved());
      assertEquals(false, templateType0.hasCachedValues());
      assertEquals(false, templateType0.isFunctionPrototypeType());
      assertEquals(BooleanLiteralSet.TRUE, templateType0.getPossibleToBooleanOutcomes());
      assertEquals(false, templateType0.isEnumType());
      assertNull(templateType0.getReferenceName());
      assertEquals(false, templateType0.isNumberValueType());
      assertEquals(false, templateType0.isNullType());
      assertEquals(false, templateType0.isFunctionType());
      assertEquals(false, templateType0.isNominalConstructor());
      assertEquals(false, templateType0.isStringValueType());
      assertEquals(true, templateType0.isTemplateType());
      assertEquals(false, templateType0.isEnumElementType());
      assertEquals(false, templateType0.isVoidType());
      assertEquals(false, templateType0.isRecordType());
      assertEquals(false, templateType0.isUnionType());
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(templateType0);
      
      UnionType unionType0 = (UnionType)jSTypeRegistry0.createOptionalNullableType((JSType) templateType0);
      assertEquals(false, templateType0.isBooleanValueType());
      assertEquals(false, templateType0.isResolved());
      assertEquals(false, templateType0.hasCachedValues());
      assertEquals(false, templateType0.isFunctionPrototypeType());
      assertEquals(BooleanLiteralSet.TRUE, templateType0.getPossibleToBooleanOutcomes());
      assertEquals(false, templateType0.isEnumType());
      assertNull(templateType0.getReferenceName());
      assertEquals(false, templateType0.isNumberValueType());
      assertEquals(false, templateType0.isNullType());
      assertEquals(false, templateType0.isFunctionType());
      assertEquals(false, templateType0.isNominalConstructor());
      assertEquals(false, templateType0.isStringValueType());
      assertEquals(true, templateType0.isTemplateType());
      assertEquals(false, templateType0.isEnumElementType());
      assertEquals(false, templateType0.isVoidType());
      assertEquals(false, templateType0.isRecordType());
      assertEquals(false, templateType0.isUnionType());
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, unionType0.isNoResolvedType());
      assertEquals(false, unionType0.isInterface());
      assertEquals(false, unionType0.isNominalType());
      assertEquals(false, unionType0.isConstructor());
      assertEquals(false, unionType0.isEnumElementType());
      assertEquals(false, unionType0.isEnumType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isCheckedUnknownType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isNominalConstructor());
      assertEquals(false, unionType0.isOrdinaryFunction());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isFunctionPrototypeType());
      assertEquals(false, unionType0.isNumberValueType());
      assertNotNull(unionType0);
  }

  @Test
  public void test50()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      AllType allType0 = new AllType(jSTypeRegistry0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, allType0.isStringValueType());
      assertEquals(false, allType0.isNoObjectType());
      assertEquals(false, allType0.isNoType());
      assertEquals(false, allType0.isInterface());
      assertEquals(false, allType0.isOrdinaryFunction());
      assertEquals(false, allType0.isCheckedUnknownType());
      assertEquals(false, allType0.isTemplateType());
      assertEquals(false, allType0.isEnumType());
      assertEquals(false, allType0.canBeCalled());
      assertEquals(false, allType0.isVoidType());
      assertEquals(false, allType0.isEnumElementType());
      assertEquals(BooleanLiteralSet.BOTH, allType0.getPossibleToBooleanOutcomes());
      assertEquals(true, allType0.hasDisplayName());
      assertEquals(false, allType0.isNominalConstructor());
      assertEquals(false, allType0.isConstructor());
      assertEquals(false, allType0.isResolved());
      assertEquals(false, allType0.isFunctionPrototypeType());
      assertEquals(true, allType0.matchesObjectContext());
      assertEquals(false, allType0.isUnionType());
      assertEquals(false, allType0.isNominalType());
      assertEquals(false, allType0.isNumberValueType());
      assertEquals(true, allType0.isAllType());
      assertEquals(false, allType0.isBooleanValueType());
      assertEquals(true, allType0.matchesStringContext());
      assertEquals(false, allType0.isNullType());
      assertEquals(false, allType0.isFunctionType());
      assertEquals("<Any Type>", allType0.getDisplayName());
      assertEquals(false, allType0.isNoResolvedType());
      assertEquals(false, allType0.isRecordType());
      assertNotNull(allType0);
      
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, noResolvedType0.hasCachedValues());
      assertEquals(true, noResolvedType0.canBeCalled());
      assertEquals(false, noResolvedType0.isResolved());
      assertEquals(false, noResolvedType0.isTemplateType());
      assertEquals(false, noResolvedType0.isEnumElementType());
      assertEquals(false, noResolvedType0.isNumberValueType());
      assertEquals(false, noResolvedType0.isStringValueType());
      assertEquals(false, noResolvedType0.isUnionType());
      assertEquals(true, noResolvedType0.matchesNumberContext());
      assertEquals(false, noResolvedType0.isOrdinaryFunction());
      assertEquals(false, noResolvedType0.isNullType());
      assertEquals(true, noResolvedType0.hasInstanceType());
      assertEquals(false, noResolvedType0.isCheckedUnknownType());
      assertEquals(false, noResolvedType0.isInterface());
      assertEquals(false, noResolvedType0.isRecordType());
      assertEquals(2147483647, noResolvedType0.getMaxArguments());
      assertEquals(false, noResolvedType0.isNominalType());
      assertEquals(true, noResolvedType0.isConstructor());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertEquals(false, noResolvedType0.isEnumType());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noResolvedType0.isFunctionPrototypeType());
      assertEquals(true, noResolvedType0.isNullable());
      assertEquals(false, noResolvedType0.isNoObjectType());
      assertEquals(false, noResolvedType0.isNominalConstructor());
      assertEquals(false, noResolvedType0.isBooleanValueType());
      assertEquals(true, noResolvedType0.matchesStringContext());
      assertEquals(false, noResolvedType0.isFunctionType());
      assertNull(noResolvedType0.getReferenceName());
      assertEquals(false, noResolvedType0.isReturnTypeInferred());
      assertEquals(2147483647, noResolvedType0.getPropertiesCount());
      assertEquals(false, noResolvedType0.isAllType());
      assertEquals(false, noResolvedType0.isVoidType());
      assertNull(noResolvedType0.getTemplateTypeName());
      assertEquals(true, noResolvedType0.matchesObjectContext());
      assertNotNull(noResolvedType0);
      
      ParameterizedType parameterizedType0 = new ParameterizedType(jSTypeRegistry0, noResolvedType0, allType0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, allType0.isStringValueType());
      assertEquals(false, allType0.isNoObjectType());
      assertEquals(false, allType0.isNoType());
      assertEquals(false, allType0.isInterface());
      assertEquals(false, allType0.isOrdinaryFunction());
      assertEquals(false, allType0.isCheckedUnknownType());
      assertEquals(false, allType0.isTemplateType());
      assertEquals(false, allType0.isEnumType());
      assertEquals(false, allType0.canBeCalled());
      assertEquals(false, allType0.isVoidType());
      assertEquals(false, allType0.isEnumElementType());
      assertEquals(BooleanLiteralSet.BOTH, allType0.getPossibleToBooleanOutcomes());
      assertEquals(true, allType0.hasDisplayName());
      assertEquals(false, allType0.isNominalConstructor());
      assertEquals(false, allType0.isConstructor());
      assertEquals(false, allType0.isResolved());
      assertEquals(false, allType0.isFunctionPrototypeType());
      assertEquals(true, allType0.matchesObjectContext());
      assertEquals(false, allType0.isUnionType());
      assertEquals(false, allType0.isNominalType());
      assertEquals(false, allType0.isNumberValueType());
      assertEquals(true, allType0.isAllType());
      assertEquals(false, allType0.isBooleanValueType());
      assertEquals(true, allType0.matchesStringContext());
      assertEquals(false, allType0.isNullType());
      assertEquals(false, allType0.isFunctionType());
      assertEquals("<Any Type>", allType0.getDisplayName());
      assertEquals(false, allType0.isNoResolvedType());
      assertEquals(false, allType0.isRecordType());
      assertEquals(false, parameterizedType0.isVoidType());
      assertEquals(false, parameterizedType0.isNullType());
      assertEquals(false, parameterizedType0.isFunctionPrototypeType());
      assertEquals(false, parameterizedType0.isEnumType());
      assertEquals(false, parameterizedType0.isNumberValueType());
      assertEquals(false, parameterizedType0.isBooleanValueType());
      assertEquals(BooleanLiteralSet.TRUE, parameterizedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, parameterizedType0.isNominalConstructor());
      assertEquals(false, parameterizedType0.isUnionType());
      assertEquals(false, parameterizedType0.isResolved());
      assertEquals(false, parameterizedType0.isStringValueType());
      assertEquals(false, parameterizedType0.isFunctionType());
      assertEquals(false, parameterizedType0.isTemplateType());
      assertEquals(false, parameterizedType0.hasCachedValues());
      assertEquals(false, parameterizedType0.isEnumElementType());
      assertEquals(false, parameterizedType0.isRecordType());
      assertEquals(false, noResolvedType0.hasCachedValues());
      assertEquals(true, noResolvedType0.canBeCalled());
      assertEquals(false, noResolvedType0.isResolved());
      assertEquals(false, noResolvedType0.isTemplateType());
      assertEquals(false, noResolvedType0.isEnumElementType());
      assertEquals(false, noResolvedType0.isNumberValueType());
      assertEquals(false, noResolvedType0.isStringValueType());
      assertEquals(false, noResolvedType0.isUnionType());
      assertEquals(true, noResolvedType0.matchesNumberContext());
      assertEquals(false, noResolvedType0.isOrdinaryFunction());
      assertEquals(false, noResolvedType0.isNullType());
      assertEquals(true, noResolvedType0.hasInstanceType());
      assertEquals(false, noResolvedType0.isCheckedUnknownType());
      assertEquals(false, noResolvedType0.isInterface());
      assertEquals(false, noResolvedType0.isRecordType());
      assertEquals(2147483647, noResolvedType0.getMaxArguments());
      assertEquals(false, noResolvedType0.isNominalType());
      assertEquals(true, noResolvedType0.isConstructor());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertEquals(false, noResolvedType0.isEnumType());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noResolvedType0.isFunctionPrototypeType());
      assertEquals(true, noResolvedType0.isNullable());
      assertEquals(false, noResolvedType0.isNoObjectType());
      assertEquals(false, noResolvedType0.isNominalConstructor());
      assertEquals(false, noResolvedType0.isBooleanValueType());
      assertEquals(true, noResolvedType0.matchesStringContext());
      assertEquals(false, noResolvedType0.isFunctionType());
      assertNull(noResolvedType0.getReferenceName());
      assertEquals(false, noResolvedType0.isReturnTypeInferred());
      assertEquals(2147483647, noResolvedType0.getPropertiesCount());
      assertEquals(false, noResolvedType0.isAllType());
      assertEquals(false, noResolvedType0.isVoidType());
      assertNull(noResolvedType0.getTemplateTypeName());
      assertEquals(true, noResolvedType0.matchesObjectContext());
      assertNotNull(parameterizedType0);
      
      boolean boolean0 = false;
      String string0 = parameterizedType0.toStringHelper(boolean0);
      assertEquals("NoResolvedType.<*>", string0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, allType0.isStringValueType());
      assertEquals(false, allType0.isNoObjectType());
      assertEquals(false, allType0.isNoType());
      assertEquals(false, allType0.isInterface());
      assertEquals(false, allType0.isOrdinaryFunction());
      assertEquals(false, allType0.isCheckedUnknownType());
      assertEquals(false, allType0.isTemplateType());
      assertEquals(false, allType0.isEnumType());
      assertEquals(false, allType0.canBeCalled());
      assertEquals(false, allType0.isVoidType());
      assertEquals(false, allType0.isEnumElementType());
      assertEquals(BooleanLiteralSet.BOTH, allType0.getPossibleToBooleanOutcomes());
      assertEquals(true, allType0.hasDisplayName());
      assertEquals(false, allType0.isNominalConstructor());
      assertEquals(false, allType0.isConstructor());
      assertEquals(false, allType0.isResolved());
      assertEquals(false, allType0.isFunctionPrototypeType());
      assertEquals(true, allType0.matchesObjectContext());
      assertEquals(false, allType0.isUnionType());
      assertEquals(false, allType0.isNominalType());
      assertEquals(false, allType0.isNumberValueType());
      assertEquals(true, allType0.isAllType());
      assertEquals(false, allType0.isBooleanValueType());
      assertEquals(true, allType0.matchesStringContext());
      assertEquals(false, allType0.isNullType());
      assertEquals(false, allType0.isFunctionType());
      assertEquals("<Any Type>", allType0.getDisplayName());
      assertEquals(false, allType0.isNoResolvedType());
      assertEquals(false, allType0.isRecordType());
      assertEquals(false, parameterizedType0.isVoidType());
      assertEquals(false, parameterizedType0.isNullType());
      assertEquals(false, parameterizedType0.isFunctionPrototypeType());
      assertEquals(false, parameterizedType0.isEnumType());
      assertEquals(false, parameterizedType0.isNumberValueType());
      assertEquals(false, parameterizedType0.isBooleanValueType());
      assertEquals(BooleanLiteralSet.TRUE, parameterizedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, parameterizedType0.isNominalConstructor());
      assertEquals(false, parameterizedType0.isUnionType());
      assertEquals(false, parameterizedType0.isResolved());
      assertEquals(false, parameterizedType0.isStringValueType());
      assertEquals(false, parameterizedType0.isFunctionType());
      assertEquals(false, parameterizedType0.isTemplateType());
      assertEquals(false, parameterizedType0.hasCachedValues());
      assertEquals(false, parameterizedType0.isEnumElementType());
      assertEquals(false, parameterizedType0.isRecordType());
      assertEquals(false, noResolvedType0.hasCachedValues());
      assertEquals(true, noResolvedType0.canBeCalled());
      assertEquals(false, noResolvedType0.isResolved());
      assertEquals(false, noResolvedType0.isTemplateType());
      assertEquals(false, noResolvedType0.isEnumElementType());
      assertEquals(false, noResolvedType0.isNumberValueType());
      assertEquals(false, noResolvedType0.isStringValueType());
      assertEquals(false, noResolvedType0.isUnionType());
      assertEquals(true, noResolvedType0.matchesNumberContext());
      assertEquals(false, noResolvedType0.isOrdinaryFunction());
      assertEquals(false, noResolvedType0.isNullType());
      assertEquals(true, noResolvedType0.hasInstanceType());
      assertEquals(false, noResolvedType0.isCheckedUnknownType());
      assertEquals(false, noResolvedType0.isInterface());
      assertEquals(false, noResolvedType0.isRecordType());
      assertEquals(2147483647, noResolvedType0.getMaxArguments());
      assertEquals(false, noResolvedType0.isNominalType());
      assertEquals(true, noResolvedType0.isConstructor());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertEquals(false, noResolvedType0.isEnumType());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noResolvedType0.isFunctionPrototypeType());
      assertEquals(true, noResolvedType0.isNullable());
      assertEquals(false, noResolvedType0.isNoObjectType());
      assertEquals(false, noResolvedType0.isNominalConstructor());
      assertEquals(false, noResolvedType0.isBooleanValueType());
      assertEquals(true, noResolvedType0.matchesStringContext());
      assertEquals(false, noResolvedType0.isFunctionType());
      assertNull(noResolvedType0.getReferenceName());
      assertEquals(false, noResolvedType0.isReturnTypeInferred());
      assertEquals(2147483647, noResolvedType0.getPropertiesCount());
      assertEquals(false, noResolvedType0.isAllType());
      assertEquals(false, noResolvedType0.isVoidType());
      assertNull(noResolvedType0.getTemplateTypeName());
      assertEquals(true, noResolvedType0.matchesObjectContext());
      assertNotNull(string0);
  }

  @Test
  public void test51() {}
//   @Test
//   public void test51()  throws Throwable  {
//       SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
//       assertNotNull(simpleErrorReporter0);
//       
//       JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0);
//       assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
//       assertNotNull(jSTypeRegistry0);
//       
//       NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
//       assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
//       assertEquals(false, noResolvedType0.isStringValueType());
//       assertEquals(false, noResolvedType0.isAllType());
//       assertEquals(false, noResolvedType0.isNoObjectType());
//       assertEquals(true, noResolvedType0.matchesNumberContext());
//       assertEquals(false, noResolvedType0.hasCachedValues());
//       assertEquals(false, noResolvedType0.isVoidType());
//       assertEquals(false, noResolvedType0.isFunctionType());
//       assertEquals(false, noResolvedType0.isRecordType());
//       assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
//       assertEquals(false, noResolvedType0.isTemplateType());
//       assertEquals(false, noResolvedType0.isResolved());
//       assertEquals(true, noResolvedType0.isNullable());
//       assertEquals(false, noResolvedType0.isNominalConstructor());
//       assertEquals(false, noResolvedType0.isInterface());
//       assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
//       assertEquals(false, noResolvedType0.isUnionType());
//       assertEquals(true, noResolvedType0.hasInstanceType());
//       assertEquals(2147483647, noResolvedType0.getMaxArguments());
//       assertEquals(true, noResolvedType0.isConstructor());
//       assertEquals(false, noResolvedType0.isNumberValueType());
//       assertEquals(false, noResolvedType0.isEnumElementType());
//       assertEquals(false, noResolvedType0.isNullType());
//       assertEquals(false, noResolvedType0.isNominalType());
//       assertEquals(false, noResolvedType0.isCheckedUnknownType());
//       assertEquals(false, noResolvedType0.isFunctionPrototypeType());
//       assertNull(noResolvedType0.getReferenceName());
//       assertEquals(true, noResolvedType0.matchesStringContext());
//       assertEquals(2147483647, noResolvedType0.getPropertiesCount());
//       assertEquals(false, noResolvedType0.isOrdinaryFunction());
//       assertEquals(false, noResolvedType0.isEnumType());
//       assertNull(noResolvedType0.getTemplateTypeName());
//       assertEquals(false, noResolvedType0.isReturnTypeInferred());
//       assertEquals(false, noResolvedType0.isBooleanValueType());
//       assertEquals(true, noResolvedType0.matchesObjectContext());
//       assertEquals(true, noResolvedType0.canBeCalled());
//       assertNotNull(noResolvedType0);
//       
//       ProxyObjectType proxyObjectType0 = new ProxyObjectType(jSTypeRegistry0, noResolvedType0);
//       assertEquals(false, proxyObjectType0.isResolved());
//       assertEquals(false, proxyObjectType0.hasCachedValues());
//       assertEquals(false, proxyObjectType0.isNumberValueType());
//       assertEquals(BooleanLiteralSet.TRUE, proxyObjectType0.getPossibleToBooleanOutcomes());
//       assertEquals(false, proxyObjectType0.isEnumElementType());
//       assertEquals(false, proxyObjectType0.isUnionType());
//       assertEquals(false, proxyObjectType0.isNominalConstructor());
//       assertEquals(false, proxyObjectType0.isNullType());
//       assertEquals(false, proxyObjectType0.isFunctionPrototypeType());
//       assertEquals(false, proxyObjectType0.isFunctionType());
//       assertEquals(false, proxyObjectType0.isStringValueType());
//       assertEquals(false, proxyObjectType0.isRecordType());
//       assertEquals(false, proxyObjectType0.isEnumType());
//       assertEquals(false, proxyObjectType0.isTemplateType());
//       assertEquals(false, proxyObjectType0.isVoidType());
//       assertEquals(false, proxyObjectType0.isBooleanValueType());
//       assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
//       assertEquals(false, noResolvedType0.isStringValueType());
//       assertEquals(false, noResolvedType0.isAllType());
//       assertEquals(false, noResolvedType0.isNoObjectType());
//       assertEquals(true, noResolvedType0.matchesNumberContext());
//       assertEquals(false, noResolvedType0.hasCachedValues());
//       assertEquals(false, noResolvedType0.isVoidType());
//       assertEquals(false, noResolvedType0.isFunctionType());
//       assertEquals(false, noResolvedType0.isRecordType());
//       assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
//       assertEquals(false, noResolvedType0.isTemplateType());
//       assertEquals(false, noResolvedType0.isResolved());
//       assertEquals(true, noResolvedType0.isNullable());
//       assertEquals(false, noResolvedType0.isNominalConstructor());
//       assertEquals(false, noResolvedType0.isInterface());
//       assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
//       assertEquals(false, noResolvedType0.isUnionType());
//       assertEquals(true, noResolvedType0.hasInstanceType());
//       assertEquals(2147483647, noResolvedType0.getMaxArguments());
//       assertEquals(true, noResolvedType0.isConstructor());
//       assertEquals(false, noResolvedType0.isNumberValueType());
//       assertEquals(false, noResolvedType0.isEnumElementType());
//       assertEquals(false, noResolvedType0.isNullType());
//       assertEquals(false, noResolvedType0.isNominalType());
//       assertEquals(false, noResolvedType0.isCheckedUnknownType());
//       assertEquals(false, noResolvedType0.isFunctionPrototypeType());
//       assertNull(noResolvedType0.getReferenceName());
//       assertEquals(true, noResolvedType0.matchesStringContext());
//       assertEquals(2147483647, noResolvedType0.getPropertiesCount());
//       assertEquals(false, noResolvedType0.isOrdinaryFunction());
//       assertEquals(false, noResolvedType0.isEnumType());
//       assertNull(noResolvedType0.getTemplateTypeName());
//       assertEquals(false, noResolvedType0.isReturnTypeInferred());
//       assertEquals(false, noResolvedType0.isBooleanValueType());
//       assertEquals(true, noResolvedType0.matchesObjectContext());
//       assertEquals(true, noResolvedType0.canBeCalled());
//       assertNotNull(proxyObjectType0);
//       
//       int int0 = proxyObjectType0.hashCode();
//       assertEquals(264, int0);
//       assertEquals(false, proxyObjectType0.isResolved());
//       assertEquals(false, proxyObjectType0.hasCachedValues());
//       assertEquals(false, proxyObjectType0.isNumberValueType());
//       assertEquals(BooleanLiteralSet.TRUE, proxyObjectType0.getPossibleToBooleanOutcomes());
//       assertEquals(false, proxyObjectType0.isEnumElementType());
//       assertEquals(false, proxyObjectType0.isUnionType());
//       assertEquals(false, proxyObjectType0.isNominalConstructor());
//       assertEquals(false, proxyObjectType0.isNullType());
//       assertEquals(false, proxyObjectType0.isFunctionPrototypeType());
//       assertEquals(false, proxyObjectType0.isFunctionType());
//       assertEquals(false, proxyObjectType0.isStringValueType());
//       assertEquals(false, proxyObjectType0.isRecordType());
//       assertEquals(false, proxyObjectType0.isEnumType());
//       assertEquals(false, proxyObjectType0.isTemplateType());
//       assertEquals(false, proxyObjectType0.isVoidType());
//       assertEquals(false, proxyObjectType0.isBooleanValueType());
//       assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
//       assertEquals(false, noResolvedType0.isStringValueType());
//       assertEquals(false, noResolvedType0.isAllType());
//       assertEquals(false, noResolvedType0.isNoObjectType());
//       assertEquals(true, noResolvedType0.matchesNumberContext());
//       assertEquals(false, noResolvedType0.hasCachedValues());
//       assertEquals(false, noResolvedType0.isVoidType());
//       assertEquals(false, noResolvedType0.isFunctionType());
//       assertEquals(false, noResolvedType0.isRecordType());
//       assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
//       assertEquals(false, noResolvedType0.isTemplateType());
//       assertEquals(false, noResolvedType0.isResolved());
//       assertEquals(true, noResolvedType0.isNullable());
//       assertEquals(false, noResolvedType0.isNominalConstructor());
//       assertEquals(false, noResolvedType0.isInterface());
//       assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
//       assertEquals(false, noResolvedType0.isUnionType());
//       assertEquals(true, noResolvedType0.hasInstanceType());
//       assertEquals(2147483647, noResolvedType0.getMaxArguments());
//       assertEquals(true, noResolvedType0.isConstructor());
//       assertEquals(false, noResolvedType0.isNumberValueType());
//       assertEquals(false, noResolvedType0.isEnumElementType());
//       assertEquals(false, noResolvedType0.isNullType());
//       assertEquals(false, noResolvedType0.isNominalType());
//       assertEquals(false, noResolvedType0.isCheckedUnknownType());
//       assertEquals(false, noResolvedType0.isFunctionPrototypeType());
//       assertNull(noResolvedType0.getReferenceName());
//       assertEquals(true, noResolvedType0.matchesStringContext());
//       assertEquals(2147483647, noResolvedType0.getPropertiesCount());
//       assertEquals(false, noResolvedType0.isOrdinaryFunction());
//       assertEquals(false, noResolvedType0.isEnumType());
//       assertNull(noResolvedType0.getTemplateTypeName());
//       assertEquals(false, noResolvedType0.isReturnTypeInferred());
//       assertEquals(false, noResolvedType0.isBooleanValueType());
//       assertEquals(true, noResolvedType0.matchesObjectContext());
//       assertEquals(true, noResolvedType0.canBeCalled());
//   }

  @Test
  public void test52()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      boolean boolean0 = false;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0, boolean0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      String string0 = "4cAD-j0Rv`*G2*";
      TemplateType templateType0 = new TemplateType(jSTypeRegistry0, string0);
      assertEquals(false, templateType0.isFunctionPrototypeType());
      assertEquals(false, templateType0.isEnumType());
      assertEquals(false, templateType0.isBooleanValueType());
      assertEquals(false, templateType0.isRecordType());
      assertEquals(false, templateType0.isEnumElementType());
      assertEquals(false, templateType0.isNumberValueType());
      assertEquals(true, templateType0.isTemplateType());
      assertEquals(false, templateType0.isResolved());
      assertEquals(false, templateType0.isUnionType());
      assertEquals(false, templateType0.hasCachedValues());
      assertEquals(false, templateType0.isFunctionType());
      assertEquals(BooleanLiteralSet.TRUE, templateType0.getPossibleToBooleanOutcomes());
      assertEquals(false, templateType0.isNominalConstructor());
      assertEquals("4cAD-j0Rv`*G2*", templateType0.getReferenceName());
      assertEquals(false, templateType0.isStringValueType());
      assertEquals(false, templateType0.isNullType());
      assertEquals(false, templateType0.isVoidType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(templateType0);
      
      boolean boolean1 = templateType0.canAssignTo((JSType) templateType0);
      assertTrue(boolean1);
      assertEquals(false, templateType0.isFunctionPrototypeType());
      assertEquals(false, templateType0.isEnumType());
      assertEquals(false, templateType0.isBooleanValueType());
      assertEquals(false, templateType0.isRecordType());
      assertEquals(false, templateType0.isEnumElementType());
      assertEquals(false, templateType0.isNumberValueType());
      assertEquals(true, templateType0.isTemplateType());
      assertEquals(false, templateType0.isResolved());
      assertEquals(false, templateType0.isUnionType());
      assertEquals(false, templateType0.hasCachedValues());
      assertEquals(false, templateType0.isFunctionType());
      assertEquals(BooleanLiteralSet.TRUE, templateType0.getPossibleToBooleanOutcomes());
      assertEquals(false, templateType0.isNominalConstructor());
      assertEquals("4cAD-j0Rv`*G2*", templateType0.getReferenceName());
      assertEquals(false, templateType0.isStringValueType());
      assertEquals(false, templateType0.isNullType());
      assertEquals(false, templateType0.isVoidType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(boolean0 == boolean1);
      assertFalse(boolean1 == boolean0);
  }

  @Test
  public void test53()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      boolean boolean0 = true;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0, boolean0);
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      String string0 = "}";
      TemplateType templateType0 = new TemplateType(jSTypeRegistry0, string0);
      assertEquals(false, templateType0.isVoidType());
      assertEquals(true, templateType0.isTemplateType());
      assertEquals(false, templateType0.isEnumType());
      assertEquals(false, templateType0.hasCachedValues());
      assertEquals(false, templateType0.isNumberValueType());
      assertEquals(false, templateType0.isNominalConstructor());
      assertEquals(false, templateType0.isEnumElementType());
      assertEquals(false, templateType0.isResolved());
      assertEquals(false, templateType0.isStringValueType());
      assertEquals(BooleanLiteralSet.TRUE, templateType0.getPossibleToBooleanOutcomes());
      assertEquals(false, templateType0.isUnionType());
      assertEquals(false, templateType0.isFunctionPrototypeType());
      assertEquals(false, templateType0.isFunctionType());
      assertEquals(false, templateType0.isBooleanValueType());
      assertEquals(false, templateType0.isRecordType());
      assertEquals("}", templateType0.getReferenceName());
      assertEquals(false, templateType0.isNullType());
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(templateType0);
      
      boolean boolean1 = templateType0.matchesUint32Context();
      assertTrue(boolean1);
      assertEquals(false, templateType0.isVoidType());
      assertEquals(true, templateType0.isTemplateType());
      assertEquals(false, templateType0.isEnumType());
      assertEquals(false, templateType0.hasCachedValues());
      assertEquals(false, templateType0.isNumberValueType());
      assertEquals(false, templateType0.isNominalConstructor());
      assertEquals(false, templateType0.isEnumElementType());
      assertEquals(false, templateType0.isResolved());
      assertEquals(false, templateType0.isStringValueType());
      assertEquals(BooleanLiteralSet.TRUE, templateType0.getPossibleToBooleanOutcomes());
      assertEquals(false, templateType0.isUnionType());
      assertEquals(false, templateType0.isFunctionPrototypeType());
      assertEquals(false, templateType0.isFunctionType());
      assertEquals(false, templateType0.isBooleanValueType());
      assertEquals(false, templateType0.isRecordType());
      assertEquals("}", templateType0.getReferenceName());
      assertEquals(false, templateType0.isNullType());
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertTrue(boolean0 == boolean1);
      assertTrue(boolean1 == boolean0);
  }

  @Test
  public void test54()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      boolean boolean0 = true;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0, boolean0);
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      String string0 = "Z4}D-jR(`*2eS";
      TemplateType templateType0 = new TemplateType(jSTypeRegistry0, string0);
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, templateType0.hasCachedValues());
      assertEquals(false, templateType0.isEnumElementType());
      assertEquals(false, templateType0.isStringValueType());
      assertEquals(false, templateType0.isUnionType());
      assertEquals(BooleanLiteralSet.TRUE, templateType0.getPossibleToBooleanOutcomes());
      assertEquals("Z4}D-jR(`*2eS", templateType0.getReferenceName());
      assertEquals(false, templateType0.isVoidType());
      assertEquals(false, templateType0.isFunctionPrototypeType());
      assertEquals(false, templateType0.isNumberValueType());
      assertEquals(false, templateType0.isRecordType());
      assertEquals(false, templateType0.isFunctionType());
      assertEquals(false, templateType0.isNominalConstructor());
      assertEquals(false, templateType0.isBooleanValueType());
      assertEquals(false, templateType0.isEnumType());
      assertEquals(false, templateType0.isResolved());
      assertEquals(false, templateType0.isNullType());
      assertEquals(true, templateType0.isTemplateType());
      assertNotNull(templateType0);
      
      boolean boolean1 = templateType0.matchesStringContext();
      assertTrue(boolean1);
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, templateType0.hasCachedValues());
      assertEquals(false, templateType0.isEnumElementType());
      assertEquals(false, templateType0.isStringValueType());
      assertEquals(false, templateType0.isUnionType());
      assertEquals(BooleanLiteralSet.TRUE, templateType0.getPossibleToBooleanOutcomes());
      assertEquals("Z4}D-jR(`*2eS", templateType0.getReferenceName());
      assertEquals(false, templateType0.isVoidType());
      assertEquals(false, templateType0.isFunctionPrototypeType());
      assertEquals(false, templateType0.isNumberValueType());
      assertEquals(false, templateType0.isRecordType());
      assertEquals(false, templateType0.isFunctionType());
      assertEquals(false, templateType0.isNominalConstructor());
      assertEquals(false, templateType0.isBooleanValueType());
      assertEquals(false, templateType0.isEnumType());
      assertEquals(false, templateType0.isResolved());
      assertEquals(false, templateType0.isNullType());
      assertEquals(true, templateType0.isTemplateType());
      assertTrue(boolean0 == boolean1);
      assertTrue(boolean1 == boolean0);
  }

  @Test
  public void test55()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      boolean boolean0 = true;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0, boolean0);
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      String string0 = "}";
      TemplateType templateType0 = new TemplateType(jSTypeRegistry0, string0);
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, templateType0.isStringValueType());
      assertEquals(false, templateType0.isVoidType());
      assertEquals(false, templateType0.isNumberValueType());
      assertEquals(false, templateType0.isNominalConstructor());
      assertEquals(false, templateType0.isFunctionPrototypeType());
      assertEquals("}", templateType0.getReferenceName());
      assertEquals(true, templateType0.isTemplateType());
      assertEquals(false, templateType0.isEnumType());
      assertEquals(false, templateType0.hasCachedValues());
      assertEquals(false, templateType0.isResolved());
      assertEquals(false, templateType0.isFunctionType());
      assertEquals(false, templateType0.isNullType());
      assertEquals(BooleanLiteralSet.TRUE, templateType0.getPossibleToBooleanOutcomes());
      assertEquals(false, templateType0.isBooleanValueType());
      assertEquals(false, templateType0.isRecordType());
      assertEquals(false, templateType0.isEnumElementType());
      assertEquals(false, templateType0.isUnionType());
      assertNotNull(templateType0);
      
      boolean boolean1 = templateType0.isEnumElementType();
      assertFalse(boolean1);
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, templateType0.isStringValueType());
      assertEquals(false, templateType0.isVoidType());
      assertEquals(false, templateType0.isNumberValueType());
      assertEquals(false, templateType0.isNominalConstructor());
      assertEquals(false, templateType0.isFunctionPrototypeType());
      assertEquals("}", templateType0.getReferenceName());
      assertEquals(true, templateType0.isTemplateType());
      assertEquals(false, templateType0.isEnumType());
      assertEquals(false, templateType0.hasCachedValues());
      assertEquals(false, templateType0.isResolved());
      assertEquals(false, templateType0.isFunctionType());
      assertEquals(false, templateType0.isNullType());
      assertEquals(BooleanLiteralSet.TRUE, templateType0.getPossibleToBooleanOutcomes());
      assertEquals(false, templateType0.isBooleanValueType());
      assertEquals(false, templateType0.isRecordType());
      assertEquals(false, templateType0.isEnumElementType());
      assertEquals(false, templateType0.isUnionType());
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean0 == boolean1);
  }

  @Test
  public void test56()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      boolean boolean0 = true;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0, boolean0);
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      String string0 = null;
      TemplateType templateType0 = new TemplateType(jSTypeRegistry0, string0);
      assertEquals(BooleanLiteralSet.TRUE, templateType0.getPossibleToBooleanOutcomes());
      assertEquals(false, templateType0.isVoidType());
      assertEquals(false, templateType0.isNominalConstructor());
      assertEquals(false, templateType0.isBooleanValueType());
      assertNull(templateType0.getReferenceName());
      assertEquals(false, templateType0.isEnumType());
      assertEquals(false, templateType0.isEnumElementType());
      assertEquals(false, templateType0.isStringValueType());
      assertEquals(false, templateType0.isNullType());
      assertEquals(false, templateType0.isNumberValueType());
      assertEquals(false, templateType0.isResolved());
      assertEquals(true, templateType0.isTemplateType());
      assertEquals(false, templateType0.isRecordType());
      assertEquals(false, templateType0.isUnionType());
      assertEquals(false, templateType0.hasCachedValues());
      assertEquals(false, templateType0.isFunctionPrototypeType());
      assertEquals(false, templateType0.isFunctionType());
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(templateType0);
      
      ParameterizedType parameterizedType0 = jSTypeRegistry0.createParameterizedType((ObjectType) templateType0, (JSType) templateType0);
      assertEquals(false, parameterizedType0.isStringValueType());
      assertEquals(false, parameterizedType0.isVoidType());
      assertEquals(false, parameterizedType0.isNominalConstructor());
      assertEquals(false, parameterizedType0.isEnumElementType());
      assertEquals(false, parameterizedType0.isEnumType());
      assertEquals(false, parameterizedType0.isRecordType());
      assertEquals(false, parameterizedType0.isUnionType());
      assertEquals(false, parameterizedType0.hasCachedValues());
      assertEquals(false, parameterizedType0.isNumberValueType());
      assertEquals(false, parameterizedType0.isBooleanValueType());
      assertEquals(false, parameterizedType0.isNullType());
      assertEquals(BooleanLiteralSet.TRUE, parameterizedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, parameterizedType0.isFunctionType());
      assertEquals(false, parameterizedType0.isTemplateType());
      assertEquals(false, parameterizedType0.isFunctionPrototypeType());
      assertEquals(false, parameterizedType0.isResolved());
      assertEquals(BooleanLiteralSet.TRUE, templateType0.getPossibleToBooleanOutcomes());
      assertEquals(false, templateType0.isVoidType());
      assertEquals(false, templateType0.isNominalConstructor());
      assertEquals(false, templateType0.isBooleanValueType());
      assertNull(templateType0.getReferenceName());
      assertEquals(false, templateType0.isEnumType());
      assertEquals(false, templateType0.isEnumElementType());
      assertEquals(false, templateType0.isStringValueType());
      assertEquals(false, templateType0.isNullType());
      assertEquals(false, templateType0.isNumberValueType());
      assertEquals(false, templateType0.isResolved());
      assertEquals(true, templateType0.isTemplateType());
      assertEquals(false, templateType0.isRecordType());
      assertEquals(false, templateType0.isUnionType());
      assertEquals(false, templateType0.hasCachedValues());
      assertEquals(false, templateType0.isFunctionPrototypeType());
      assertEquals(false, templateType0.isFunctionType());
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(parameterizedType0);
      
      boolean boolean1 = parameterizedType0.isEnumType();
      assertFalse(boolean1);
      assertEquals(false, parameterizedType0.isStringValueType());
      assertEquals(false, parameterizedType0.isVoidType());
      assertEquals(false, parameterizedType0.isNominalConstructor());
      assertEquals(false, parameterizedType0.isEnumElementType());
      assertEquals(false, parameterizedType0.isEnumType());
      assertEquals(false, parameterizedType0.isRecordType());
      assertEquals(false, parameterizedType0.isUnionType());
      assertEquals(false, parameterizedType0.hasCachedValues());
      assertEquals(false, parameterizedType0.isNumberValueType());
      assertEquals(false, parameterizedType0.isBooleanValueType());
      assertEquals(false, parameterizedType0.isNullType());
      assertEquals(BooleanLiteralSet.TRUE, parameterizedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, parameterizedType0.isFunctionType());
      assertEquals(false, parameterizedType0.isTemplateType());
      assertEquals(false, parameterizedType0.isFunctionPrototypeType());
      assertEquals(false, parameterizedType0.isResolved());
      assertEquals(BooleanLiteralSet.TRUE, templateType0.getPossibleToBooleanOutcomes());
      assertEquals(false, templateType0.isVoidType());
      assertEquals(false, templateType0.isNominalConstructor());
      assertEquals(false, templateType0.isBooleanValueType());
      assertNull(templateType0.getReferenceName());
      assertEquals(false, templateType0.isEnumType());
      assertEquals(false, templateType0.isEnumElementType());
      assertEquals(false, templateType0.isStringValueType());
      assertEquals(false, templateType0.isNullType());
      assertEquals(false, templateType0.isNumberValueType());
      assertEquals(false, templateType0.isResolved());
      assertEquals(true, templateType0.isTemplateType());
      assertEquals(false, templateType0.isRecordType());
      assertEquals(false, templateType0.isUnionType());
      assertEquals(false, templateType0.hasCachedValues());
      assertEquals(false, templateType0.isFunctionPrototypeType());
      assertEquals(false, templateType0.isFunctionType());
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean0 == boolean1);
  }

  @Test
  public void test57()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      boolean boolean0 = true;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0, boolean0);
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      NullType nullType0 = new NullType(jSTypeRegistry0);
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals("null", nullType0.getDisplayName());
      assertEquals(false, nullType0.isNominalConstructor());
      assertEquals(false, nullType0.isConstructor());
      assertEquals(false, nullType0.isStringValueType());
      assertEquals(false, nullType0.matchesObjectContext());
      assertEquals(true, nullType0.matchesStringContext());
      assertEquals(BooleanLiteralSet.FALSE, nullType0.getPossibleToBooleanOutcomes());
      assertEquals(false, nullType0.isNumberValueType());
      assertEquals(false, nullType0.isEnumElementType());
      assertEquals(false, nullType0.isCheckedUnknownType());
      assertEquals(false, nullType0.isUnionType());
      assertEquals(false, nullType0.isNominalType());
      assertEquals(false, nullType0.isResolved());
      assertEquals(false, nullType0.isNoResolvedType());
      assertEquals(false, nullType0.isRecordType());
      assertEquals(false, nullType0.isVoidType());
      assertEquals(false, nullType0.isFunctionPrototypeType());
      assertEquals(false, nullType0.isInterface());
      assertEquals(false, nullType0.isFunctionType());
      assertEquals(false, nullType0.isOrdinaryFunction());
      assertEquals(false, nullType0.isAllType());
      assertEquals(false, nullType0.isTemplateType());
      assertEquals(true, nullType0.matchesNumberContext());
      assertEquals(false, nullType0.isEnumType());
      assertEquals(false, nullType0.isNoObjectType());
      assertEquals(false, nullType0.isNoType());
      assertEquals(true, nullType0.isNullable());
      assertEquals(true, nullType0.isNullType());
      assertEquals(false, nullType0.isBooleanValueType());
      assertNotNull(nullType0);
      
      NoType noType0 = (NoType)nullType0.dereference();
      assertEquals(true, noType0.hasInstanceType());
      assertEquals(true, noType0.isConstructor());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertEquals(true, noType0.canBeCalled());
      assertEquals(false, noType0.isNumberValueType());
      assertEquals(false, noType0.isResolved());
      assertNull(noType0.getReferenceName());
      assertEquals(false, noType0.isTemplateType());
      assertEquals(false, noType0.isFunctionType());
      assertEquals(false, noType0.hasCachedValues());
      assertEquals(false, noType0.isOrdinaryFunction());
      assertEquals(false, noType0.isAllType());
      assertEquals(false, noType0.isCheckedUnknownType());
      assertEquals(true, noType0.isNoType());
      assertEquals(false, noType0.isUnionType());
      assertEquals(2147483647, noType0.getMaxArguments());
      assertEquals(true, noType0.matchesStringContext());
      assertEquals(false, noType0.isNoObjectType());
      assertEquals(false, noType0.isNullType());
      assertEquals(false, noType0.isNominalType());
      assertEquals(2147483647, noType0.getPropertiesCount());
      assertEquals(true, noType0.matchesNumberContext());
      assertEquals(false, noType0.isFunctionPrototypeType());
      assertEquals(false, noType0.isRecordType());
      assertEquals(true, noType0.isNullable());
      assertEquals(false, noType0.isVoidType());
      assertEquals(true, noType0.matchesObjectContext());
      assertEquals(false, noType0.isBooleanValueType());
      assertEquals(false, noType0.isNoResolvedType());
      assertEquals(false, noType0.isNominalConstructor());
      assertNull(noType0.getTemplateTypeName());
      assertEquals(false, noType0.isStringValueType());
      assertEquals(0, noType0.getExtendedInterfacesCount());
      assertEquals(false, noType0.isEnumElementType());
      assertEquals(false, noType0.isEnumType());
      assertEquals(false, noType0.isReturnTypeInferred());
      assertEquals(false, noType0.isInterface());
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals("null", nullType0.getDisplayName());
      assertEquals(false, nullType0.isNominalConstructor());
      assertEquals(false, nullType0.isConstructor());
      assertEquals(false, nullType0.isStringValueType());
      assertEquals(false, nullType0.matchesObjectContext());
      assertEquals(true, nullType0.matchesStringContext());
      assertEquals(BooleanLiteralSet.FALSE, nullType0.getPossibleToBooleanOutcomes());
      assertEquals(false, nullType0.isNumberValueType());
      assertEquals(false, nullType0.isEnumElementType());
      assertEquals(false, nullType0.isCheckedUnknownType());
      assertEquals(false, nullType0.isUnionType());
      assertEquals(false, nullType0.isNominalType());
      assertEquals(false, nullType0.isResolved());
      assertEquals(false, nullType0.isNoResolvedType());
      assertEquals(false, nullType0.isRecordType());
      assertEquals(false, nullType0.isVoidType());
      assertEquals(false, nullType0.isFunctionPrototypeType());
      assertEquals(false, nullType0.isInterface());
      assertEquals(false, nullType0.isFunctionType());
      assertEquals(false, nullType0.isOrdinaryFunction());
      assertEquals(false, nullType0.isAllType());
      assertEquals(false, nullType0.isTemplateType());
      assertEquals(true, nullType0.matchesNumberContext());
      assertEquals(false, nullType0.isEnumType());
      assertEquals(false, nullType0.isNoObjectType());
      assertEquals(false, nullType0.isNoType());
      assertEquals(true, nullType0.isNullable());
      assertEquals(true, nullType0.isNullType());
      assertEquals(false, nullType0.isBooleanValueType());
      assertNotNull(noType0);
      
      ParameterizedType parameterizedType0 = jSTypeRegistry0.createParameterizedType((ObjectType) noType0, (JSType) noType0);
      assertEquals(true, noType0.hasInstanceType());
      assertEquals(true, noType0.isConstructor());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertEquals(true, noType0.canBeCalled());
      assertEquals(false, noType0.isNumberValueType());
      assertEquals(false, noType0.isResolved());
      assertNull(noType0.getReferenceName());
      assertEquals(false, noType0.isTemplateType());
      assertEquals(false, noType0.isFunctionType());
      assertEquals(false, noType0.hasCachedValues());
      assertEquals(false, noType0.isOrdinaryFunction());
      assertEquals(false, noType0.isAllType());
      assertEquals(false, noType0.isCheckedUnknownType());
      assertEquals(true, noType0.isNoType());
      assertEquals(false, noType0.isUnionType());
      assertEquals(2147483647, noType0.getMaxArguments());
      assertEquals(true, noType0.matchesStringContext());
      assertEquals(false, noType0.isNoObjectType());
      assertEquals(false, noType0.isNullType());
      assertEquals(false, noType0.isNominalType());
      assertEquals(2147483647, noType0.getPropertiesCount());
      assertEquals(true, noType0.matchesNumberContext());
      assertEquals(false, noType0.isFunctionPrototypeType());
      assertEquals(false, noType0.isRecordType());
      assertEquals(true, noType0.isNullable());
      assertEquals(false, noType0.isVoidType());
      assertEquals(true, noType0.matchesObjectContext());
      assertEquals(false, noType0.isBooleanValueType());
      assertEquals(false, noType0.isNoResolvedType());
      assertEquals(false, noType0.isNominalConstructor());
      assertNull(noType0.getTemplateTypeName());
      assertEquals(false, noType0.isStringValueType());
      assertEquals(0, noType0.getExtendedInterfacesCount());
      assertEquals(false, noType0.isEnumElementType());
      assertEquals(false, noType0.isEnumType());
      assertEquals(false, noType0.isReturnTypeInferred());
      assertEquals(false, noType0.isInterface());
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, parameterizedType0.isStringValueType());
      assertEquals(false, parameterizedType0.isBooleanValueType());
      assertEquals(false, parameterizedType0.isFunctionType());
      assertEquals(false, parameterizedType0.isNumberValueType());
      assertEquals(false, parameterizedType0.isTemplateType());
      assertEquals(false, parameterizedType0.isFunctionPrototypeType());
      assertEquals(false, parameterizedType0.isResolved());
      assertEquals(false, parameterizedType0.isEnumElementType());
      assertEquals(false, parameterizedType0.isEnumType());
      assertEquals(false, parameterizedType0.isUnionType());
      assertEquals(false, parameterizedType0.hasCachedValues());
      assertEquals(BooleanLiteralSet.TRUE, parameterizedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, parameterizedType0.isRecordType());
      assertEquals(false, parameterizedType0.isNominalConstructor());
      assertEquals(false, parameterizedType0.isNullType());
      assertEquals(false, parameterizedType0.isVoidType());
      assertEquals("null", nullType0.getDisplayName());
      assertEquals(false, nullType0.isNominalConstructor());
      assertEquals(false, nullType0.isConstructor());
      assertEquals(false, nullType0.isStringValueType());
      assertEquals(false, nullType0.matchesObjectContext());
      assertEquals(true, nullType0.matchesStringContext());
      assertEquals(BooleanLiteralSet.FALSE, nullType0.getPossibleToBooleanOutcomes());
      assertEquals(false, nullType0.isNumberValueType());
      assertEquals(false, nullType0.isEnumElementType());
      assertEquals(false, nullType0.isCheckedUnknownType());
      assertEquals(false, nullType0.isUnionType());
      assertEquals(false, nullType0.isNominalType());
      assertEquals(false, nullType0.isResolved());
      assertEquals(false, nullType0.isNoResolvedType());
      assertEquals(false, nullType0.isRecordType());
      assertEquals(false, nullType0.isVoidType());
      assertEquals(false, nullType0.isFunctionPrototypeType());
      assertEquals(false, nullType0.isInterface());
      assertEquals(false, nullType0.isFunctionType());
      assertEquals(false, nullType0.isOrdinaryFunction());
      assertEquals(false, nullType0.isAllType());
      assertEquals(false, nullType0.isTemplateType());
      assertEquals(true, nullType0.matchesNumberContext());
      assertEquals(false, nullType0.isEnumType());
      assertEquals(false, nullType0.isNoObjectType());
      assertEquals(false, nullType0.isNoType());
      assertEquals(true, nullType0.isNullable());
      assertEquals(true, nullType0.isNullType());
      assertEquals(false, nullType0.isBooleanValueType());
      assertNotNull(parameterizedType0);
      
      boolean boolean1 = parameterizedType0.canBeCalled();
      assertTrue(boolean1);
      assertEquals(true, noType0.hasInstanceType());
      assertEquals(true, noType0.isConstructor());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertEquals(true, noType0.canBeCalled());
      assertEquals(false, noType0.isNumberValueType());
      assertEquals(false, noType0.isResolved());
      assertNull(noType0.getReferenceName());
      assertEquals(false, noType0.isTemplateType());
      assertEquals(false, noType0.isFunctionType());
      assertEquals(false, noType0.hasCachedValues());
      assertEquals(false, noType0.isOrdinaryFunction());
      assertEquals(false, noType0.isAllType());
      assertEquals(false, noType0.isCheckedUnknownType());
      assertEquals(true, noType0.isNoType());
      assertEquals(false, noType0.isUnionType());
      assertEquals(2147483647, noType0.getMaxArguments());
      assertEquals(true, noType0.matchesStringContext());
      assertEquals(false, noType0.isNoObjectType());
      assertEquals(false, noType0.isNullType());
      assertEquals(false, noType0.isNominalType());
      assertEquals(2147483647, noType0.getPropertiesCount());
      assertEquals(true, noType0.matchesNumberContext());
      assertEquals(false, noType0.isFunctionPrototypeType());
      assertEquals(false, noType0.isRecordType());
      assertEquals(true, noType0.isNullable());
      assertEquals(false, noType0.isVoidType());
      assertEquals(true, noType0.matchesObjectContext());
      assertEquals(false, noType0.isBooleanValueType());
      assertEquals(false, noType0.isNoResolvedType());
      assertEquals(false, noType0.isNominalConstructor());
      assertNull(noType0.getTemplateTypeName());
      assertEquals(false, noType0.isStringValueType());
      assertEquals(0, noType0.getExtendedInterfacesCount());
      assertEquals(false, noType0.isEnumElementType());
      assertEquals(false, noType0.isEnumType());
      assertEquals(false, noType0.isReturnTypeInferred());
      assertEquals(false, noType0.isInterface());
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, parameterizedType0.isStringValueType());
      assertEquals(false, parameterizedType0.isBooleanValueType());
      assertEquals(false, parameterizedType0.isFunctionType());
      assertEquals(false, parameterizedType0.isNumberValueType());
      assertEquals(false, parameterizedType0.isTemplateType());
      assertEquals(false, parameterizedType0.isFunctionPrototypeType());
      assertEquals(false, parameterizedType0.isResolved());
      assertEquals(false, parameterizedType0.isEnumElementType());
      assertEquals(false, parameterizedType0.isEnumType());
      assertEquals(false, parameterizedType0.isUnionType());
      assertEquals(false, parameterizedType0.hasCachedValues());
      assertEquals(BooleanLiteralSet.TRUE, parameterizedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, parameterizedType0.isRecordType());
      assertEquals(false, parameterizedType0.isNominalConstructor());
      assertEquals(false, parameterizedType0.isNullType());
      assertEquals(false, parameterizedType0.isVoidType());
      assertEquals("null", nullType0.getDisplayName());
      assertEquals(false, nullType0.isNominalConstructor());
      assertEquals(false, nullType0.isConstructor());
      assertEquals(false, nullType0.isStringValueType());
      assertEquals(false, nullType0.matchesObjectContext());
      assertEquals(true, nullType0.matchesStringContext());
      assertEquals(BooleanLiteralSet.FALSE, nullType0.getPossibleToBooleanOutcomes());
      assertEquals(false, nullType0.isNumberValueType());
      assertEquals(false, nullType0.isEnumElementType());
      assertEquals(false, nullType0.isCheckedUnknownType());
      assertEquals(false, nullType0.isUnionType());
      assertEquals(false, nullType0.isNominalType());
      assertEquals(false, nullType0.isResolved());
      assertEquals(false, nullType0.isNoResolvedType());
      assertEquals(false, nullType0.isRecordType());
      assertEquals(false, nullType0.isVoidType());
      assertEquals(false, nullType0.isFunctionPrototypeType());
      assertEquals(false, nullType0.isInterface());
      assertEquals(false, nullType0.isFunctionType());
      assertEquals(false, nullType0.isOrdinaryFunction());
      assertEquals(false, nullType0.isAllType());
      assertEquals(false, nullType0.isTemplateType());
      assertEquals(true, nullType0.matchesNumberContext());
      assertEquals(false, nullType0.isEnumType());
      assertEquals(false, nullType0.isNoObjectType());
      assertEquals(false, nullType0.isNoType());
      assertEquals(true, nullType0.isNullable());
      assertEquals(true, nullType0.isNullType());
      assertEquals(false, nullType0.isBooleanValueType());
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean0 == boolean1);
  }

  @Test
  public void test58()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      boolean boolean0 = true;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0, boolean0);
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      String string0 = "Z4}D-jR(`*2eS";
      TemplateType templateType0 = new TemplateType(jSTypeRegistry0, string0);
      assertEquals(false, templateType0.isBooleanValueType());
      assertEquals(false, templateType0.isUnionType());
      assertEquals(false, templateType0.isEnumElementType());
      assertEquals(true, templateType0.isTemplateType());
      assertEquals(false, templateType0.isVoidType());
      assertEquals("Z4}D-jR(`*2eS", templateType0.getReferenceName());
      assertEquals(false, templateType0.isFunctionType());
      assertEquals(BooleanLiteralSet.TRUE, templateType0.getPossibleToBooleanOutcomes());
      assertEquals(false, templateType0.isStringValueType());
      assertEquals(false, templateType0.isResolved());
      assertEquals(false, templateType0.isRecordType());
      assertEquals(false, templateType0.isNominalConstructor());
      assertEquals(false, templateType0.isNullType());
      assertEquals(false, templateType0.isFunctionPrototypeType());
      assertEquals(false, templateType0.isNumberValueType());
      assertEquals(false, templateType0.isEnumType());
      assertEquals(false, templateType0.hasCachedValues());
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(templateType0);
      
      UnknownType unknownType0 = (UnknownType)templateType0.getReferencedObjTypeInternal();
      assertEquals(false, templateType0.isBooleanValueType());
      assertEquals(false, templateType0.isUnionType());
      assertEquals(false, templateType0.isEnumElementType());
      assertEquals(true, templateType0.isTemplateType());
      assertEquals(false, templateType0.isVoidType());
      assertEquals("Z4}D-jR(`*2eS", templateType0.getReferenceName());
      assertEquals(false, templateType0.isFunctionType());
      assertEquals(BooleanLiteralSet.TRUE, templateType0.getPossibleToBooleanOutcomes());
      assertEquals(false, templateType0.isStringValueType());
      assertEquals(false, templateType0.isResolved());
      assertEquals(false, templateType0.isRecordType());
      assertEquals(false, templateType0.isNominalConstructor());
      assertEquals(false, templateType0.isNullType());
      assertEquals(false, templateType0.isFunctionPrototypeType());
      assertEquals(false, templateType0.isNumberValueType());
      assertEquals(false, templateType0.isEnumType());
      assertEquals(false, templateType0.hasCachedValues());
      assertEquals(true, unknownType0.matchesStringContext());
      assertEquals("?", unknownType0.getReferenceName());
      assertEquals(false, unknownType0.isNoType());
      assertEquals(true, unknownType0.matchesNumberContext());
      assertEquals(false, unknownType0.hasReferenceName());
      assertEquals(false, unknownType0.isEnumType());
      assertEquals(false, unknownType0.isNominalConstructor());
      assertEquals(false, unknownType0.isStringValueType());
      assertEquals(false, unknownType0.isRecordType());
      assertEquals(false, unknownType0.isNominalType());
      assertEquals(false, unknownType0.isBooleanValueType());
      assertEquals(true, unknownType0.canBeCalled());
      assertEquals(false, unknownType0.isNoObjectType());
      assertEquals(false, unknownType0.isFunctionPrototypeType());
      assertEquals(false, unknownType0.isResolved());
      assertEquals(false, unknownType0.isCheckedUnknownType());
      assertEquals(false, unknownType0.isNullType());
      assertEquals(false, unknownType0.isAllType());
      assertEquals(false, unknownType0.isTemplateType());
      assertEquals(true, unknownType0.hasDisplayName());
      assertEquals(false, unknownType0.isNumberValueType());
      assertEquals(false, unknownType0.isInterface());
      assertEquals(false, unknownType0.isConstructor());
      assertEquals("Unknown", unknownType0.getDisplayName());
      assertEquals(true, unknownType0.isNullable());
      assertEquals(2147483647, unknownType0.getPropertiesCount());
      assertEquals(false, unknownType0.hasCachedValues());
      assertEquals(false, unknownType0.isNativeObjectType());
      assertEquals(false, unknownType0.isVoidType());
      assertEquals(false, unknownType0.isUnionType());
      assertEquals(false, unknownType0.isFunctionType());
      assertEquals(false, unknownType0.isNoResolvedType());
      assertEquals(false, unknownType0.isOrdinaryFunction());
      assertEquals(true, unknownType0.isUnknownType());
      assertEquals(true, unknownType0.matchesObjectContext());
      assertEquals(false, unknownType0.isEnumElementType());
      assertEquals(BooleanLiteralSet.BOTH, unknownType0.getPossibleToBooleanOutcomes());
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(unknownType0);
  }

  @Test
  public void test59()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      boolean boolean0 = true;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0, boolean0);
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      NullType nullType0 = new NullType(jSTypeRegistry0);
      assertEquals(false, nullType0.isRecordType());
      assertEquals(false, nullType0.isNoObjectType());
      assertEquals(false, nullType0.isBooleanValueType());
      assertEquals(false, nullType0.isFunctionPrototypeType());
      assertEquals(false, nullType0.isEnumElementType());
      assertEquals(false, nullType0.isNominalConstructor());
      assertEquals(true, nullType0.isNullable());
      assertEquals(true, nullType0.matchesNumberContext());
      assertEquals(BooleanLiteralSet.FALSE, nullType0.getPossibleToBooleanOutcomes());
      assertEquals(false, nullType0.isConstructor());
      assertEquals(false, nullType0.isUnionType());
      assertEquals(false, nullType0.isVoidType());
      assertEquals(false, nullType0.isEnumType());
      assertEquals(false, nullType0.isTemplateType());
      assertEquals(false, nullType0.isAllType());
      assertEquals(false, nullType0.isOrdinaryFunction());
      assertEquals(false, nullType0.isFunctionType());
      assertEquals(true, nullType0.isNullType());
      assertEquals(false, nullType0.isNoResolvedType());
      assertEquals(false, nullType0.isCheckedUnknownType());
      assertEquals(false, nullType0.isNumberValueType());
      assertEquals(false, nullType0.isNominalType());
      assertEquals(true, nullType0.matchesStringContext());
      assertEquals(false, nullType0.isInterface());
      assertEquals(false, nullType0.isNoType());
      assertEquals(false, nullType0.isStringValueType());
      assertEquals(false, nullType0.isResolved());
      assertEquals("null", nullType0.getDisplayName());
      assertEquals(false, nullType0.matchesObjectContext());
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(nullType0);
      
      NoType noType0 = (NoType)nullType0.dereference();
      assertEquals(false, noType0.isResolved());
      assertEquals(false, noType0.isEnumElementType());
      assertEquals(true, noType0.matchesStringContext());
      assertEquals(true, noType0.hasInstanceType());
      assertEquals(true, noType0.matchesNumberContext());
      assertEquals(false, noType0.isCheckedUnknownType());
      assertEquals(2147483647, noType0.getPropertiesCount());
      assertEquals(false, noType0.hasCachedValues());
      assertNull(noType0.getReferenceName());
      assertEquals(true, noType0.isNoType());
      assertEquals(false, noType0.isTemplateType());
      assertEquals(false, noType0.isAllType());
      assertEquals(true, noType0.isNullable());
      assertEquals(false, noType0.isInterface());
      assertEquals(true, noType0.isConstructor());
      assertEquals(true, noType0.matchesObjectContext());
      assertEquals(false, noType0.isReturnTypeInferred());
      assertEquals(false, noType0.isNoObjectType());
      assertEquals(2147483647, noType0.getMaxArguments());
      assertEquals(false, noType0.isEnumType());
      assertEquals(false, noType0.isFunctionPrototypeType());
      assertEquals(false, noType0.isUnionType());
      assertEquals(false, noType0.isRecordType());
      assertEquals(false, noType0.isVoidType());
      assertEquals(false, noType0.isNoResolvedType());
      assertNull(noType0.getTemplateTypeName());
      assertEquals(false, noType0.isFunctionType());
      assertEquals(true, noType0.canBeCalled());
      assertEquals(false, noType0.isNullType());
      assertEquals(false, noType0.isStringValueType());
      assertEquals(false, noType0.isNominalType());
      assertEquals(0, noType0.getExtendedInterfacesCount());
      assertEquals(false, noType0.isNumberValueType());
      assertEquals(false, noType0.isOrdinaryFunction());
      assertEquals(false, noType0.isNominalConstructor());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noType0.isBooleanValueType());
      assertEquals(false, nullType0.isRecordType());
      assertEquals(false, nullType0.isNoObjectType());
      assertEquals(false, nullType0.isBooleanValueType());
      assertEquals(false, nullType0.isFunctionPrototypeType());
      assertEquals(false, nullType0.isEnumElementType());
      assertEquals(false, nullType0.isNominalConstructor());
      assertEquals(true, nullType0.isNullable());
      assertEquals(true, nullType0.matchesNumberContext());
      assertEquals(BooleanLiteralSet.FALSE, nullType0.getPossibleToBooleanOutcomes());
      assertEquals(false, nullType0.isConstructor());
      assertEquals(false, nullType0.isUnionType());
      assertEquals(false, nullType0.isVoidType());
      assertEquals(false, nullType0.isEnumType());
      assertEquals(false, nullType0.isTemplateType());
      assertEquals(false, nullType0.isAllType());
      assertEquals(false, nullType0.isOrdinaryFunction());
      assertEquals(false, nullType0.isFunctionType());
      assertEquals(true, nullType0.isNullType());
      assertEquals(false, nullType0.isNoResolvedType());
      assertEquals(false, nullType0.isCheckedUnknownType());
      assertEquals(false, nullType0.isNumberValueType());
      assertEquals(false, nullType0.isNominalType());
      assertEquals(true, nullType0.matchesStringContext());
      assertEquals(false, nullType0.isInterface());
      assertEquals(false, nullType0.isNoType());
      assertEquals(false, nullType0.isStringValueType());
      assertEquals(false, nullType0.isResolved());
      assertEquals("null", nullType0.getDisplayName());
      assertEquals(false, nullType0.matchesObjectContext());
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(noType0);
      
      ParameterizedType parameterizedType0 = jSTypeRegistry0.createParameterizedType((ObjectType) noType0, (JSType) noType0);
      assertEquals(false, noType0.isResolved());
      assertEquals(false, noType0.isEnumElementType());
      assertEquals(true, noType0.matchesStringContext());
      assertEquals(true, noType0.hasInstanceType());
      assertEquals(true, noType0.matchesNumberContext());
      assertEquals(false, noType0.isCheckedUnknownType());
      assertEquals(2147483647, noType0.getPropertiesCount());
      assertEquals(false, noType0.hasCachedValues());
      assertNull(noType0.getReferenceName());
      assertEquals(true, noType0.isNoType());
      assertEquals(false, noType0.isTemplateType());
      assertEquals(false, noType0.isAllType());
      assertEquals(true, noType0.isNullable());
      assertEquals(false, noType0.isInterface());
      assertEquals(true, noType0.isConstructor());
      assertEquals(true, noType0.matchesObjectContext());
      assertEquals(false, noType0.isReturnTypeInferred());
      assertEquals(false, noType0.isNoObjectType());
      assertEquals(2147483647, noType0.getMaxArguments());
      assertEquals(false, noType0.isEnumType());
      assertEquals(false, noType0.isFunctionPrototypeType());
      assertEquals(false, noType0.isUnionType());
      assertEquals(false, noType0.isRecordType());
      assertEquals(false, noType0.isVoidType());
      assertEquals(false, noType0.isNoResolvedType());
      assertNull(noType0.getTemplateTypeName());
      assertEquals(false, noType0.isFunctionType());
      assertEquals(true, noType0.canBeCalled());
      assertEquals(false, noType0.isNullType());
      assertEquals(false, noType0.isStringValueType());
      assertEquals(false, noType0.isNominalType());
      assertEquals(0, noType0.getExtendedInterfacesCount());
      assertEquals(false, noType0.isNumberValueType());
      assertEquals(false, noType0.isOrdinaryFunction());
      assertEquals(false, noType0.isNominalConstructor());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noType0.isBooleanValueType());
      assertEquals(false, parameterizedType0.isEnumType());
      assertEquals(false, parameterizedType0.isFunctionPrototypeType());
      assertEquals(false, parameterizedType0.isUnionType());
      assertEquals(false, parameterizedType0.isRecordType());
      assertEquals(false, parameterizedType0.isNominalConstructor());
      assertEquals(false, parameterizedType0.isEnumElementType());
      assertEquals(false, parameterizedType0.isFunctionType());
      assertEquals(false, parameterizedType0.isResolved());
      assertEquals(false, parameterizedType0.isVoidType());
      assertEquals(false, parameterizedType0.isNullType());
      assertEquals(false, parameterizedType0.isNumberValueType());
      assertEquals(false, parameterizedType0.isStringValueType());
      assertEquals(false, parameterizedType0.isTemplateType());
      assertEquals(false, parameterizedType0.hasCachedValues());
      assertEquals(false, parameterizedType0.isBooleanValueType());
      assertEquals(BooleanLiteralSet.TRUE, parameterizedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, nullType0.isRecordType());
      assertEquals(false, nullType0.isNoObjectType());
      assertEquals(false, nullType0.isBooleanValueType());
      assertEquals(false, nullType0.isFunctionPrototypeType());
      assertEquals(false, nullType0.isEnumElementType());
      assertEquals(false, nullType0.isNominalConstructor());
      assertEquals(true, nullType0.isNullable());
      assertEquals(true, nullType0.matchesNumberContext());
      assertEquals(BooleanLiteralSet.FALSE, nullType0.getPossibleToBooleanOutcomes());
      assertEquals(false, nullType0.isConstructor());
      assertEquals(false, nullType0.isUnionType());
      assertEquals(false, nullType0.isVoidType());
      assertEquals(false, nullType0.isEnumType());
      assertEquals(false, nullType0.isTemplateType());
      assertEquals(false, nullType0.isAllType());
      assertEquals(false, nullType0.isOrdinaryFunction());
      assertEquals(false, nullType0.isFunctionType());
      assertEquals(true, nullType0.isNullType());
      assertEquals(false, nullType0.isNoResolvedType());
      assertEquals(false, nullType0.isCheckedUnknownType());
      assertEquals(false, nullType0.isNumberValueType());
      assertEquals(false, nullType0.isNominalType());
      assertEquals(true, nullType0.matchesStringContext());
      assertEquals(false, nullType0.isInterface());
      assertEquals(false, nullType0.isNoType());
      assertEquals(false, nullType0.isStringValueType());
      assertEquals(false, nullType0.isResolved());
      assertEquals("null", nullType0.getDisplayName());
      assertEquals(false, nullType0.matchesObjectContext());
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(parameterizedType0);
      
      boolean boolean1 = parameterizedType0.isInstanceType();
      assertFalse(boolean1);
      assertEquals(false, noType0.isResolved());
      assertEquals(false, noType0.isEnumElementType());
      assertEquals(true, noType0.matchesStringContext());
      assertEquals(true, noType0.hasInstanceType());
      assertEquals(true, noType0.matchesNumberContext());
      assertEquals(false, noType0.isCheckedUnknownType());
      assertEquals(2147483647, noType0.getPropertiesCount());
      assertEquals(false, noType0.hasCachedValues());
      assertNull(noType0.getReferenceName());
      assertEquals(true, noType0.isNoType());
      assertEquals(false, noType0.isTemplateType());
      assertEquals(false, noType0.isAllType());
      assertEquals(true, noType0.isNullable());
      assertEquals(false, noType0.isInterface());
      assertEquals(true, noType0.isConstructor());
      assertEquals(true, noType0.matchesObjectContext());
      assertEquals(false, noType0.isReturnTypeInferred());
      assertEquals(false, noType0.isNoObjectType());
      assertEquals(2147483647, noType0.getMaxArguments());
      assertEquals(false, noType0.isEnumType());
      assertEquals(false, noType0.isFunctionPrototypeType());
      assertEquals(false, noType0.isUnionType());
      assertEquals(false, noType0.isRecordType());
      assertEquals(false, noType0.isVoidType());
      assertEquals(false, noType0.isNoResolvedType());
      assertNull(noType0.getTemplateTypeName());
      assertEquals(false, noType0.isFunctionType());
      assertEquals(true, noType0.canBeCalled());
      assertEquals(false, noType0.isNullType());
      assertEquals(false, noType0.isStringValueType());
      assertEquals(false, noType0.isNominalType());
      assertEquals(0, noType0.getExtendedInterfacesCount());
      assertEquals(false, noType0.isNumberValueType());
      assertEquals(false, noType0.isOrdinaryFunction());
      assertEquals(false, noType0.isNominalConstructor());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noType0.isBooleanValueType());
      assertEquals(false, parameterizedType0.isEnumType());
      assertEquals(false, parameterizedType0.isFunctionPrototypeType());
      assertEquals(false, parameterizedType0.isUnionType());
      assertEquals(false, parameterizedType0.isRecordType());
      assertEquals(false, parameterizedType0.isNominalConstructor());
      assertEquals(false, parameterizedType0.isEnumElementType());
      assertEquals(false, parameterizedType0.isFunctionType());
      assertEquals(false, parameterizedType0.isResolved());
      assertEquals(false, parameterizedType0.isVoidType());
      assertEquals(false, parameterizedType0.isNullType());
      assertEquals(false, parameterizedType0.isNumberValueType());
      assertEquals(false, parameterizedType0.isStringValueType());
      assertEquals(false, parameterizedType0.isTemplateType());
      assertEquals(false, parameterizedType0.hasCachedValues());
      assertEquals(false, parameterizedType0.isBooleanValueType());
      assertEquals(BooleanLiteralSet.TRUE, parameterizedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, nullType0.isRecordType());
      assertEquals(false, nullType0.isNoObjectType());
      assertEquals(false, nullType0.isBooleanValueType());
      assertEquals(false, nullType0.isFunctionPrototypeType());
      assertEquals(false, nullType0.isEnumElementType());
      assertEquals(false, nullType0.isNominalConstructor());
      assertEquals(true, nullType0.isNullable());
      assertEquals(true, nullType0.matchesNumberContext());
      assertEquals(BooleanLiteralSet.FALSE, nullType0.getPossibleToBooleanOutcomes());
      assertEquals(false, nullType0.isConstructor());
      assertEquals(false, nullType0.isUnionType());
      assertEquals(false, nullType0.isVoidType());
      assertEquals(false, nullType0.isEnumType());
      assertEquals(false, nullType0.isTemplateType());
      assertEquals(false, nullType0.isAllType());
      assertEquals(false, nullType0.isOrdinaryFunction());
      assertEquals(false, nullType0.isFunctionType());
      assertEquals(true, nullType0.isNullType());
      assertEquals(false, nullType0.isNoResolvedType());
      assertEquals(false, nullType0.isCheckedUnknownType());
      assertEquals(false, nullType0.isNumberValueType());
      assertEquals(false, nullType0.isNominalType());
      assertEquals(true, nullType0.matchesStringContext());
      assertEquals(false, nullType0.isInterface());
      assertEquals(false, nullType0.isNoType());
      assertEquals(false, nullType0.isStringValueType());
      assertEquals(false, nullType0.isResolved());
      assertEquals("null", nullType0.getDisplayName());
      assertEquals(false, nullType0.matchesObjectContext());
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean0 == boolean1);
  }

  @Test
  public void test60()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      boolean boolean0 = false;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0, boolean0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      String string0 = "4cAD-j0Rv`*G2*";
      TemplateType templateType0 = new TemplateType(jSTypeRegistry0, string0);
      assertEquals(false, templateType0.isFunctionType());
      assertEquals(false, templateType0.isNullType());
      assertEquals(false, templateType0.isBooleanValueType());
      assertEquals(false, templateType0.isStringValueType());
      assertEquals(false, templateType0.isEnumType());
      assertEquals(false, templateType0.isEnumElementType());
      assertEquals(false, templateType0.isNumberValueType());
      assertEquals(false, templateType0.isUnionType());
      assertEquals(false, templateType0.isResolved());
      assertEquals(false, templateType0.hasCachedValues());
      assertEquals(false, templateType0.isVoidType());
      assertEquals("4cAD-j0Rv`*G2*", templateType0.getReferenceName());
      assertEquals(false, templateType0.isRecordType());
      assertEquals(false, templateType0.isNominalConstructor());
      assertEquals(BooleanLiteralSet.TRUE, templateType0.getPossibleToBooleanOutcomes());
      assertEquals(true, templateType0.isTemplateType());
      assertEquals(false, templateType0.isFunctionPrototypeType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(templateType0);
      
      boolean boolean1 = templateType0.isNullable();
      assertTrue(boolean1);
      assertEquals(false, templateType0.isFunctionType());
      assertEquals(false, templateType0.isNullType());
      assertEquals(false, templateType0.isBooleanValueType());
      assertEquals(false, templateType0.isStringValueType());
      assertEquals(false, templateType0.isEnumType());
      assertEquals(false, templateType0.isEnumElementType());
      assertEquals(false, templateType0.isNumberValueType());
      assertEquals(false, templateType0.isUnionType());
      assertEquals(false, templateType0.isResolved());
      assertEquals(false, templateType0.hasCachedValues());
      assertEquals(false, templateType0.isVoidType());
      assertEquals("4cAD-j0Rv`*G2*", templateType0.getReferenceName());
      assertEquals(false, templateType0.isRecordType());
      assertEquals(false, templateType0.isNominalConstructor());
      assertEquals(BooleanLiteralSet.TRUE, templateType0.getPossibleToBooleanOutcomes());
      assertEquals(true, templateType0.isTemplateType());
      assertEquals(false, templateType0.isFunctionPrototypeType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(boolean0 == boolean1);
      assertFalse(boolean1 == boolean0);
  }

  @Test
  public void test61()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      boolean boolean0 = true;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0, boolean0);
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      String string0 = "Z4}D-jR(`*2eS";
      TemplateType templateType0 = new TemplateType(jSTypeRegistry0, string0);
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(BooleanLiteralSet.TRUE, templateType0.getPossibleToBooleanOutcomes());
      assertEquals(false, templateType0.isNominalConstructor());
      assertEquals(false, templateType0.isStringValueType());
      assertEquals(false, templateType0.isBooleanValueType());
      assertEquals(false, templateType0.isNumberValueType());
      assertEquals(false, templateType0.isEnumType());
      assertEquals(false, templateType0.isResolved());
      assertEquals(false, templateType0.isEnumElementType());
      assertEquals(false, templateType0.isFunctionType());
      assertEquals(true, templateType0.isTemplateType());
      assertEquals(false, templateType0.hasCachedValues());
      assertEquals(false, templateType0.isNullType());
      assertEquals(false, templateType0.isUnionType());
      assertEquals(false, templateType0.isFunctionPrototypeType());
      assertEquals("Z4}D-jR(`*2eS", templateType0.getReferenceName());
      assertEquals(false, templateType0.isRecordType());
      assertEquals(false, templateType0.isVoidType());
      assertNotNull(templateType0);
      
      boolean boolean1 = templateType0.isString();
      assertTrue(boolean1);
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(BooleanLiteralSet.TRUE, templateType0.getPossibleToBooleanOutcomes());
      assertEquals(false, templateType0.isNominalConstructor());
      assertEquals(false, templateType0.isStringValueType());
      assertEquals(false, templateType0.isBooleanValueType());
      assertEquals(false, templateType0.isNumberValueType());
      assertEquals(false, templateType0.isEnumType());
      assertEquals(false, templateType0.isResolved());
      assertEquals(false, templateType0.isEnumElementType());
      assertEquals(false, templateType0.isFunctionType());
      assertEquals(true, templateType0.isTemplateType());
      assertEquals(false, templateType0.hasCachedValues());
      assertEquals(false, templateType0.isNullType());
      assertEquals(false, templateType0.isUnionType());
      assertEquals(false, templateType0.isFunctionPrototypeType());
      assertEquals("Z4}D-jR(`*2eS", templateType0.getReferenceName());
      assertEquals(false, templateType0.isRecordType());
      assertEquals(false, templateType0.isVoidType());
      assertTrue(boolean0 == boolean1);
      assertTrue(boolean1 == boolean0);
  }

  @Test
  public void test62()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      boolean boolean0 = true;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0, boolean0);
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      String string0 = "Z4cAD- C0Rn`*G2e*";
      TemplateType templateType0 = new TemplateType(jSTypeRegistry0, string0);
      assertEquals(false, templateType0.hasCachedValues());
      assertEquals(false, templateType0.isEnumType());
      assertEquals(false, templateType0.isResolved());
      assertEquals(false, templateType0.isRecordType());
      assertEquals("Z4cAD- C0Rn`*G2e*", templateType0.getReferenceName());
      assertEquals(false, templateType0.isNumberValueType());
      assertEquals(false, templateType0.isNominalConstructor());
      assertEquals(false, templateType0.isBooleanValueType());
      assertEquals(false, templateType0.isStringValueType());
      assertEquals(false, templateType0.isVoidType());
      assertEquals(false, templateType0.isFunctionType());
      assertEquals(false, templateType0.isEnumElementType());
      assertEquals(false, templateType0.isFunctionPrototypeType());
      assertEquals(true, templateType0.isTemplateType());
      assertEquals(false, templateType0.isNullType());
      assertEquals(BooleanLiteralSet.TRUE, templateType0.getPossibleToBooleanOutcomes());
      assertEquals(false, templateType0.isUnionType());
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(templateType0);
      
      VoidType voidType0 = new VoidType(jSTypeRegistry0);
      assertEquals(false, voidType0.isBooleanValueType());
      assertEquals(false, voidType0.isConstructor());
      assertEquals(false, voidType0.isCheckedUnknownType());
      assertEquals(false, voidType0.matchesNumberContext());
      assertEquals(false, voidType0.matchesObjectContext());
      assertEquals(false, voidType0.isNullType());
      assertEquals(false, voidType0.isNoResolvedType());
      assertEquals(false, voidType0.isRecordType());
      assertEquals(false, voidType0.isNominalConstructor());
      assertEquals(false, voidType0.isTemplateType());
      assertEquals(false, voidType0.isNoObjectType());
      assertEquals(false, voidType0.isUnionType());
      assertEquals(false, voidType0.isFunctionPrototypeType());
      assertEquals(false, voidType0.isFunctionType());
      assertEquals(BooleanLiteralSet.FALSE, voidType0.getPossibleToBooleanOutcomes());
      assertEquals(false, voidType0.isAllType());
      assertEquals(false, voidType0.isResolved());
      assertEquals(false, voidType0.isNumberValueType());
      assertEquals(false, voidType0.isNominalType());
      assertEquals(false, voidType0.isInterface());
      assertEquals(true, voidType0.matchesStringContext());
      assertEquals("undefined", voidType0.getDisplayName());
      assertEquals(false, voidType0.isEnumElementType());
      assertEquals(false, voidType0.isNoType());
      assertEquals(false, voidType0.isStringValueType());
      assertEquals(false, voidType0.isOrdinaryFunction());
      assertEquals(false, voidType0.isEnumType());
      assertEquals(true, voidType0.isVoidType());
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(voidType0);
      
      FunctionType functionType0 = voidType0.toMaybeFunctionType();
      assertEquals(false, voidType0.isBooleanValueType());
      assertEquals(false, voidType0.isConstructor());
      assertEquals(false, voidType0.isCheckedUnknownType());
      assertEquals(false, voidType0.matchesNumberContext());
      assertEquals(false, voidType0.matchesObjectContext());
      assertEquals(false, voidType0.isNullType());
      assertEquals(false, voidType0.isNoResolvedType());
      assertEquals(false, voidType0.isRecordType());
      assertEquals(false, voidType0.isNominalConstructor());
      assertEquals(false, voidType0.isTemplateType());
      assertEquals(false, voidType0.isNoObjectType());
      assertEquals(false, voidType0.isUnionType());
      assertEquals(false, voidType0.isFunctionPrototypeType());
      assertEquals(false, voidType0.isFunctionType());
      assertEquals(BooleanLiteralSet.FALSE, voidType0.getPossibleToBooleanOutcomes());
      assertEquals(false, voidType0.isAllType());
      assertEquals(false, voidType0.isResolved());
      assertEquals(false, voidType0.isNumberValueType());
      assertEquals(false, voidType0.isNominalType());
      assertEquals(false, voidType0.isInterface());
      assertEquals(true, voidType0.matchesStringContext());
      assertEquals("undefined", voidType0.getDisplayName());
      assertEquals(false, voidType0.isEnumElementType());
      assertEquals(false, voidType0.isNoType());
      assertEquals(false, voidType0.isStringValueType());
      assertEquals(false, voidType0.isOrdinaryFunction());
      assertEquals(false, voidType0.isEnumType());
      assertEquals(true, voidType0.isVoidType());
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNull(functionType0);
      
      TemplateType templateType1 = (TemplateType)templateType0.resolveInternal(simpleErrorReporter0, functionType0);
      assertSame(templateType1, templateType0);
      assertSame(templateType0, templateType1);
      assertEquals(false, voidType0.isBooleanValueType());
      assertEquals(false, voidType0.isConstructor());
      assertEquals(false, voidType0.isCheckedUnknownType());
      assertEquals(false, voidType0.matchesNumberContext());
      assertEquals(false, voidType0.matchesObjectContext());
      assertEquals(false, voidType0.isNullType());
      assertEquals(false, voidType0.isNoResolvedType());
      assertEquals(false, voidType0.isRecordType());
      assertEquals(false, voidType0.isNominalConstructor());
      assertEquals(false, voidType0.isTemplateType());
      assertEquals(false, voidType0.isNoObjectType());
      assertEquals(false, voidType0.isUnionType());
      assertEquals(false, voidType0.isFunctionPrototypeType());
      assertEquals(false, voidType0.isFunctionType());
      assertEquals(BooleanLiteralSet.FALSE, voidType0.getPossibleToBooleanOutcomes());
      assertEquals(false, voidType0.isAllType());
      assertEquals(false, voidType0.isResolved());
      assertEquals(false, voidType0.isNumberValueType());
      assertEquals(false, voidType0.isNominalType());
      assertEquals(false, voidType0.isInterface());
      assertEquals(true, voidType0.matchesStringContext());
      assertEquals("undefined", voidType0.getDisplayName());
      assertEquals(false, voidType0.isEnumElementType());
      assertEquals(false, voidType0.isNoType());
      assertEquals(false, voidType0.isStringValueType());
      assertEquals(false, voidType0.isOrdinaryFunction());
      assertEquals(false, voidType0.isEnumType());
      assertEquals(true, voidType0.isVoidType());
      assertEquals(false, templateType1.isRecordType());
      assertEquals(false, templateType1.hasCachedValues());
      assertEquals(false, templateType1.isBooleanValueType());
      assertEquals(false, templateType1.isNumberValueType());
      assertEquals(false, templateType1.isFunctionPrototypeType());
      assertEquals(BooleanLiteralSet.TRUE, templateType1.getPossibleToBooleanOutcomes());
      assertEquals(false, templateType1.isResolved());
      assertEquals(false, templateType1.isFunctionType());
      assertEquals(false, templateType1.isStringValueType());
      assertEquals(false, templateType1.isEnumElementType());
      assertEquals(false, templateType1.isVoidType());
      assertEquals("Z4cAD- C0Rn`*G2e*", templateType1.getReferenceName());
      assertEquals(false, templateType1.isUnionType());
      assertEquals(true, templateType1.isTemplateType());
      assertEquals(false, templateType1.isEnumType());
      assertEquals(false, templateType1.isNominalConstructor());
      assertEquals(false, templateType1.isNullType());
      assertEquals(false, templateType0.hasCachedValues());
      assertEquals(false, templateType0.isEnumType());
      assertEquals(false, templateType0.isResolved());
      assertEquals(false, templateType0.isRecordType());
      assertEquals("Z4cAD- C0Rn`*G2e*", templateType0.getReferenceName());
      assertEquals(false, templateType0.isNumberValueType());
      assertEquals(false, templateType0.isNominalConstructor());
      assertEquals(false, templateType0.isBooleanValueType());
      assertEquals(false, templateType0.isStringValueType());
      assertEquals(false, templateType0.isVoidType());
      assertEquals(false, templateType0.isFunctionType());
      assertEquals(false, templateType0.isEnumElementType());
      assertEquals(false, templateType0.isFunctionPrototypeType());
      assertEquals(true, templateType0.isTemplateType());
      assertEquals(false, templateType0.isNullType());
      assertEquals(BooleanLiteralSet.TRUE, templateType0.getPossibleToBooleanOutcomes());
      assertEquals(false, templateType0.isUnionType());
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(templateType1);
  }

  @Test
  public void test63() {}
//   @Test
//   public void test63()  throws Throwable  {
//       String string0 = "com.gogle.javascript.rhino.jstpe.ProxyObjectType";
//       SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
//       assertNotNull(simpleErrorReporter0);
//       
//       JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0);
//       assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
//       assertNotNull(jSTypeRegistry0);
//       
//       TemplateType templateType0 = new TemplateType(jSTypeRegistry0, string0);
//       assertEquals(false, templateType0.isStringValueType());
//       assertEquals(false, templateType0.isFunctionPrototypeType());
//       assertEquals(false, templateType0.isNumberValueType());
//       assertEquals(false, templateType0.isNominalConstructor());
//       assertEquals(false, templateType0.isRecordType());
//       assertEquals(false, templateType0.isUnionType());
//       assertEquals(false, templateType0.isVoidType());
//       assertEquals(BooleanLiteralSet.TRUE, templateType0.getPossibleToBooleanOutcomes());
//       assertEquals(false, templateType0.isBooleanValueType());
//       assertEquals("com.gogle.javascript.rhino.jstpe.ProxyObjectType", templateType0.getReferenceName());
//       assertEquals(false, templateType0.isResolved());
//       assertEquals(false, templateType0.isEnumType());
//       assertEquals(false, templateType0.isEnumElementType());
//       assertEquals(false, templateType0.isNullType());
//       assertEquals(false, templateType0.isFunctionType());
//       assertEquals(true, templateType0.isTemplateType());
//       assertEquals(false, templateType0.hasCachedValues());
//       assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
//       assertNotNull(templateType0);
//       
//       String string1 = templateType0.toDebugHashCodeString();
//       assertNotSame(string0, string1);
//       assertNotSame(string1, string0);
//       assertEquals("{proxy:{9}}", string1);
//       assertEquals(false, templateType0.isStringValueType());
//       assertEquals(false, templateType0.isFunctionPrototypeType());
//       assertEquals(false, templateType0.isNumberValueType());
//       assertEquals(false, templateType0.isNominalConstructor());
//       assertEquals(false, templateType0.isRecordType());
//       assertEquals(false, templateType0.isUnionType());
//       assertEquals(false, templateType0.isVoidType());
//       assertEquals(BooleanLiteralSet.TRUE, templateType0.getPossibleToBooleanOutcomes());
//       assertEquals(false, templateType0.isBooleanValueType());
//       assertEquals("com.gogle.javascript.rhino.jstpe.ProxyObjectType", templateType0.getReferenceName());
//       assertEquals(false, templateType0.isResolved());
//       assertEquals(false, templateType0.isEnumType());
//       assertEquals(false, templateType0.isEnumElementType());
//       assertEquals(false, templateType0.isNullType());
//       assertEquals(false, templateType0.isFunctionType());
//       assertEquals(true, templateType0.isTemplateType());
//       assertEquals(false, templateType0.hasCachedValues());
//       assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
//       assertNotNull(string1);
//       assertFalse(string0.equals((Object)string1));
//       assertFalse(string1.equals((Object)string0));
//   }

  @Test
  public void test64()  throws Throwable  {
      String string0 = "g>";
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      TemplateType templateType0 = new TemplateType(jSTypeRegistry0, string0);
      assertEquals(false, templateType0.isEnumType());
      assertEquals("g>", templateType0.getReferenceName());
      assertEquals(false, templateType0.isBooleanValueType());
      assertEquals(false, templateType0.isFunctionPrototypeType());
      assertEquals(false, templateType0.isResolved());
      assertEquals(BooleanLiteralSet.TRUE, templateType0.getPossibleToBooleanOutcomes());
      assertEquals(false, templateType0.isRecordType());
      assertEquals(false, templateType0.isEnumElementType());
      assertEquals(false, templateType0.isNominalConstructor());
      assertEquals(false, templateType0.isStringValueType());
      assertEquals(false, templateType0.isNullType());
      assertEquals(false, templateType0.isNumberValueType());
      assertEquals(true, templateType0.isTemplateType());
      assertEquals(false, templateType0.isVoidType());
      assertEquals(false, templateType0.isFunctionType());
      assertEquals(false, templateType0.isUnionType());
      assertEquals(false, templateType0.hasCachedValues());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(templateType0);
      
      boolean boolean0 = templateType0.isCheckedUnknownType();
      assertFalse(boolean0);
      assertEquals(false, templateType0.isEnumType());
      assertEquals("g>", templateType0.getReferenceName());
      assertEquals(false, templateType0.isBooleanValueType());
      assertEquals(false, templateType0.isFunctionPrototypeType());
      assertEquals(false, templateType0.isResolved());
      assertEquals(BooleanLiteralSet.TRUE, templateType0.getPossibleToBooleanOutcomes());
      assertEquals(false, templateType0.isRecordType());
      assertEquals(false, templateType0.isEnumElementType());
      assertEquals(false, templateType0.isNominalConstructor());
      assertEquals(false, templateType0.isStringValueType());
      assertEquals(false, templateType0.isNullType());
      assertEquals(false, templateType0.isNumberValueType());
      assertEquals(true, templateType0.isTemplateType());
      assertEquals(false, templateType0.isVoidType());
      assertEquals(false, templateType0.isFunctionType());
      assertEquals(false, templateType0.isUnionType());
      assertEquals(false, templateType0.hasCachedValues());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
  }

  @Test
  public void test65()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      boolean boolean0 = true;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0, boolean0);
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      String string0 = "Z4}D-jR(`*2eS";
      int int0 = 2016;
      NamedType namedType0 = new NamedType(jSTypeRegistry0, string0, string0, int0, int0);
      assertEquals(false, namedType0.isUnionType());
      assertEquals(false, namedType0.isBooleanValueType());
      assertEquals(false, namedType0.isEnumElementType());
      assertEquals(false, namedType0.isEnumType());
      assertEquals(false, namedType0.isVoidType());
      assertEquals(false, namedType0.isRecordType());
      assertEquals(false, namedType0.isFunctionType());
      assertEquals(false, namedType0.isNullType());
      assertEquals(false, namedType0.isResolved());
      assertEquals(false, namedType0.isStringValueType());
      assertEquals(false, namedType0.isNominalConstructor());
      assertEquals(BooleanLiteralSet.TRUE, namedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, namedType0.hasCachedValues());
      assertEquals(false, namedType0.isNumberValueType());
      assertEquals(false, namedType0.isFunctionPrototypeType());
      assertEquals(false, namedType0.isTemplateType());
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(namedType0);
      
      boolean boolean1 = namedType0.matchesObjectContext();
      assertTrue(boolean1);
      assertEquals(false, namedType0.isUnionType());
      assertEquals(false, namedType0.isBooleanValueType());
      assertEquals(false, namedType0.isEnumElementType());
      assertEquals(false, namedType0.isEnumType());
      assertEquals(false, namedType0.isVoidType());
      assertEquals(false, namedType0.isRecordType());
      assertEquals(false, namedType0.isFunctionType());
      assertEquals(false, namedType0.isNullType());
      assertEquals(false, namedType0.isResolved());
      assertEquals(false, namedType0.isStringValueType());
      assertEquals(false, namedType0.isNominalConstructor());
      assertEquals(BooleanLiteralSet.TRUE, namedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, namedType0.hasCachedValues());
      assertEquals(false, namedType0.isNumberValueType());
      assertEquals(false, namedType0.isFunctionPrototypeType());
      assertEquals(false, namedType0.isTemplateType());
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertTrue(boolean0 == boolean1);
      assertTrue(boolean1 == boolean0);
  }

  @Test
  public void test66()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      boolean boolean0 = true;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0, boolean0);
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      NullType nullType0 = new NullType(jSTypeRegistry0);
      assertEquals(false, nullType0.isVoidType());
      assertEquals(false, nullType0.isOrdinaryFunction());
      assertEquals(false, nullType0.isAllType());
      assertEquals(false, nullType0.isNumberValueType());
      assertEquals(false, nullType0.isResolved());
      assertEquals(false, nullType0.isNominalConstructor());
      assertEquals(false, nullType0.isInterface());
      assertEquals(false, nullType0.isNoType());
      assertEquals(true, nullType0.matchesNumberContext());
      assertEquals(false, nullType0.isNoResolvedType());
      assertEquals(false, nullType0.matchesObjectContext());
      assertEquals(false, nullType0.isBooleanValueType());
      assertEquals(false, nullType0.isEnumElementType());
      assertEquals(BooleanLiteralSet.FALSE, nullType0.getPossibleToBooleanOutcomes());
      assertEquals(false, nullType0.isCheckedUnknownType());
      assertEquals(false, nullType0.isNoObjectType());
      assertEquals(false, nullType0.isEnumType());
      assertEquals(false, nullType0.isFunctionPrototypeType());
      assertEquals(true, nullType0.isNullType());
      assertEquals(false, nullType0.isFunctionType());
      assertEquals(true, nullType0.matchesStringContext());
      assertEquals(false, nullType0.isTemplateType());
      assertEquals("null", nullType0.getDisplayName());
      assertEquals(false, nullType0.isStringValueType());
      assertEquals(false, nullType0.isRecordType());
      assertEquals(false, nullType0.isNominalType());
      assertEquals(false, nullType0.isUnionType());
      assertEquals(false, nullType0.isConstructor());
      assertEquals(true, nullType0.isNullable());
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(nullType0);
      
      NoType noType0 = (NoType)nullType0.dereference();
      assertEquals(false, nullType0.isVoidType());
      assertEquals(false, nullType0.isOrdinaryFunction());
      assertEquals(false, nullType0.isAllType());
      assertEquals(false, nullType0.isNumberValueType());
      assertEquals(false, nullType0.isResolved());
      assertEquals(false, nullType0.isNominalConstructor());
      assertEquals(false, nullType0.isInterface());
      assertEquals(false, nullType0.isNoType());
      assertEquals(true, nullType0.matchesNumberContext());
      assertEquals(false, nullType0.isNoResolvedType());
      assertEquals(false, nullType0.matchesObjectContext());
      assertEquals(false, nullType0.isBooleanValueType());
      assertEquals(false, nullType0.isEnumElementType());
      assertEquals(BooleanLiteralSet.FALSE, nullType0.getPossibleToBooleanOutcomes());
      assertEquals(false, nullType0.isCheckedUnknownType());
      assertEquals(false, nullType0.isNoObjectType());
      assertEquals(false, nullType0.isEnumType());
      assertEquals(false, nullType0.isFunctionPrototypeType());
      assertEquals(true, nullType0.isNullType());
      assertEquals(false, nullType0.isFunctionType());
      assertEquals(true, nullType0.matchesStringContext());
      assertEquals(false, nullType0.isTemplateType());
      assertEquals("null", nullType0.getDisplayName());
      assertEquals(false, nullType0.isStringValueType());
      assertEquals(false, nullType0.isRecordType());
      assertEquals(false, nullType0.isNominalType());
      assertEquals(false, nullType0.isUnionType());
      assertEquals(false, nullType0.isConstructor());
      assertEquals(true, nullType0.isNullable());
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, noType0.isEnumType());
      assertEquals(false, noType0.isUnionType());
      assertEquals(true, noType0.matchesNumberContext());
      assertEquals(true, noType0.matchesStringContext());
      assertEquals(false, noType0.isFunctionPrototypeType());
      assertEquals(false, noType0.isBooleanValueType());
      assertEquals(false, noType0.isCheckedUnknownType());
      assertEquals(false, noType0.isStringValueType());
      assertEquals(false, noType0.isInterface());
      assertEquals(false, noType0.isNullType());
      assertEquals(false, noType0.isNoObjectType());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noType0.isVoidType());
      assertEquals(false, noType0.isNominalType());
      assertEquals(true, noType0.isNoType());
      assertEquals(false, noType0.isOrdinaryFunction());
      assertEquals(false, noType0.isNoResolvedType());
      assertEquals(0, noType0.getExtendedInterfacesCount());
      assertEquals(false, noType0.isNominalConstructor());
      assertEquals(true, noType0.canBeCalled());
      assertEquals(false, noType0.isReturnTypeInferred());
      assertEquals(false, noType0.isEnumElementType());
      assertEquals(2147483647, noType0.getPropertiesCount());
      assertEquals(true, noType0.matchesObjectContext());
      assertNull(noType0.getTemplateTypeName());
      assertEquals(false, noType0.isResolved());
      assertEquals(true, noType0.isNullable());
      assertEquals(false, noType0.hasCachedValues());
      assertEquals(false, noType0.isFunctionType());
      assertEquals(false, noType0.isAllType());
      assertEquals(2147483647, noType0.getMaxArguments());
      assertEquals(true, noType0.isConstructor());
      assertEquals(true, noType0.hasInstanceType());
      assertEquals(false, noType0.isTemplateType());
      assertEquals(false, noType0.isRecordType());
      assertEquals(false, noType0.isNumberValueType());
      assertNull(noType0.getReferenceName());
      assertNotNull(noType0);
      
      ParameterizedType parameterizedType0 = jSTypeRegistry0.createParameterizedType((ObjectType) noType0, (JSType) noType0);
      assertEquals(false, parameterizedType0.isEnumElementType());
      assertEquals(false, parameterizedType0.isRecordType());
      assertEquals(false, parameterizedType0.isStringValueType());
      assertEquals(false, parameterizedType0.isFunctionType());
      assertEquals(false, parameterizedType0.isResolved());
      assertEquals(false, parameterizedType0.isFunctionPrototypeType());
      assertEquals(false, parameterizedType0.isUnionType());
      assertEquals(false, parameterizedType0.hasCachedValues());
      assertEquals(false, parameterizedType0.isTemplateType());
      assertEquals(false, parameterizedType0.isVoidType());
      assertEquals(BooleanLiteralSet.TRUE, parameterizedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, parameterizedType0.isNullType());
      assertEquals(false, parameterizedType0.isNumberValueType());
      assertEquals(false, parameterizedType0.isNominalConstructor());
      assertEquals(false, parameterizedType0.isEnumType());
      assertEquals(false, parameterizedType0.isBooleanValueType());
      assertEquals(false, nullType0.isVoidType());
      assertEquals(false, nullType0.isOrdinaryFunction());
      assertEquals(false, nullType0.isAllType());
      assertEquals(false, nullType0.isNumberValueType());
      assertEquals(false, nullType0.isResolved());
      assertEquals(false, nullType0.isNominalConstructor());
      assertEquals(false, nullType0.isInterface());
      assertEquals(false, nullType0.isNoType());
      assertEquals(true, nullType0.matchesNumberContext());
      assertEquals(false, nullType0.isNoResolvedType());
      assertEquals(false, nullType0.matchesObjectContext());
      assertEquals(false, nullType0.isBooleanValueType());
      assertEquals(false, nullType0.isEnumElementType());
      assertEquals(BooleanLiteralSet.FALSE, nullType0.getPossibleToBooleanOutcomes());
      assertEquals(false, nullType0.isCheckedUnknownType());
      assertEquals(false, nullType0.isNoObjectType());
      assertEquals(false, nullType0.isEnumType());
      assertEquals(false, nullType0.isFunctionPrototypeType());
      assertEquals(true, nullType0.isNullType());
      assertEquals(false, nullType0.isFunctionType());
      assertEquals(true, nullType0.matchesStringContext());
      assertEquals(false, nullType0.isTemplateType());
      assertEquals("null", nullType0.getDisplayName());
      assertEquals(false, nullType0.isStringValueType());
      assertEquals(false, nullType0.isRecordType());
      assertEquals(false, nullType0.isNominalType());
      assertEquals(false, nullType0.isUnionType());
      assertEquals(false, nullType0.isConstructor());
      assertEquals(true, nullType0.isNullable());
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, noType0.isEnumType());
      assertEquals(false, noType0.isUnionType());
      assertEquals(true, noType0.matchesNumberContext());
      assertEquals(true, noType0.matchesStringContext());
      assertEquals(false, noType0.isFunctionPrototypeType());
      assertEquals(false, noType0.isBooleanValueType());
      assertEquals(false, noType0.isCheckedUnknownType());
      assertEquals(false, noType0.isStringValueType());
      assertEquals(false, noType0.isInterface());
      assertEquals(false, noType0.isNullType());
      assertEquals(false, noType0.isNoObjectType());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noType0.isVoidType());
      assertEquals(false, noType0.isNominalType());
      assertEquals(true, noType0.isNoType());
      assertEquals(false, noType0.isOrdinaryFunction());
      assertEquals(false, noType0.isNoResolvedType());
      assertEquals(0, noType0.getExtendedInterfacesCount());
      assertEquals(false, noType0.isNominalConstructor());
      assertEquals(true, noType0.canBeCalled());
      assertEquals(false, noType0.isReturnTypeInferred());
      assertEquals(false, noType0.isEnumElementType());
      assertEquals(2147483647, noType0.getPropertiesCount());
      assertEquals(true, noType0.matchesObjectContext());
      assertNull(noType0.getTemplateTypeName());
      assertEquals(false, noType0.isResolved());
      assertEquals(true, noType0.isNullable());
      assertEquals(false, noType0.hasCachedValues());
      assertEquals(false, noType0.isFunctionType());
      assertEquals(false, noType0.isAllType());
      assertEquals(2147483647, noType0.getMaxArguments());
      assertEquals(true, noType0.isConstructor());
      assertEquals(true, noType0.hasInstanceType());
      assertEquals(false, noType0.isTemplateType());
      assertEquals(false, noType0.isRecordType());
      assertEquals(false, noType0.isNumberValueType());
      assertNull(noType0.getReferenceName());
      assertNotNull(parameterizedType0);
      
      boolean boolean1 = parameterizedType0.isNominalType();
      assertFalse(boolean1);
      assertEquals(false, parameterizedType0.isEnumElementType());
      assertEquals(false, parameterizedType0.isRecordType());
      assertEquals(false, parameterizedType0.isStringValueType());
      assertEquals(false, parameterizedType0.isFunctionType());
      assertEquals(false, parameterizedType0.isResolved());
      assertEquals(false, parameterizedType0.isFunctionPrototypeType());
      assertEquals(false, parameterizedType0.isUnionType());
      assertEquals(false, parameterizedType0.hasCachedValues());
      assertEquals(false, parameterizedType0.isTemplateType());
      assertEquals(false, parameterizedType0.isVoidType());
      assertEquals(BooleanLiteralSet.TRUE, parameterizedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, parameterizedType0.isNullType());
      assertEquals(false, parameterizedType0.isNumberValueType());
      assertEquals(false, parameterizedType0.isNominalConstructor());
      assertEquals(false, parameterizedType0.isEnumType());
      assertEquals(false, parameterizedType0.isBooleanValueType());
      assertEquals(false, nullType0.isVoidType());
      assertEquals(false, nullType0.isOrdinaryFunction());
      assertEquals(false, nullType0.isAllType());
      assertEquals(false, nullType0.isNumberValueType());
      assertEquals(false, nullType0.isResolved());
      assertEquals(false, nullType0.isNominalConstructor());
      assertEquals(false, nullType0.isInterface());
      assertEquals(false, nullType0.isNoType());
      assertEquals(true, nullType0.matchesNumberContext());
      assertEquals(false, nullType0.isNoResolvedType());
      assertEquals(false, nullType0.matchesObjectContext());
      assertEquals(false, nullType0.isBooleanValueType());
      assertEquals(false, nullType0.isEnumElementType());
      assertEquals(BooleanLiteralSet.FALSE, nullType0.getPossibleToBooleanOutcomes());
      assertEquals(false, nullType0.isCheckedUnknownType());
      assertEquals(false, nullType0.isNoObjectType());
      assertEquals(false, nullType0.isEnumType());
      assertEquals(false, nullType0.isFunctionPrototypeType());
      assertEquals(true, nullType0.isNullType());
      assertEquals(false, nullType0.isFunctionType());
      assertEquals(true, nullType0.matchesStringContext());
      assertEquals(false, nullType0.isTemplateType());
      assertEquals("null", nullType0.getDisplayName());
      assertEquals(false, nullType0.isStringValueType());
      assertEquals(false, nullType0.isRecordType());
      assertEquals(false, nullType0.isNominalType());
      assertEquals(false, nullType0.isUnionType());
      assertEquals(false, nullType0.isConstructor());
      assertEquals(true, nullType0.isNullable());
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, noType0.isEnumType());
      assertEquals(false, noType0.isUnionType());
      assertEquals(true, noType0.matchesNumberContext());
      assertEquals(true, noType0.matchesStringContext());
      assertEquals(false, noType0.isFunctionPrototypeType());
      assertEquals(false, noType0.isBooleanValueType());
      assertEquals(false, noType0.isCheckedUnknownType());
      assertEquals(false, noType0.isStringValueType());
      assertEquals(false, noType0.isInterface());
      assertEquals(false, noType0.isNullType());
      assertEquals(false, noType0.isNoObjectType());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noType0.isVoidType());
      assertEquals(false, noType0.isNominalType());
      assertEquals(true, noType0.isNoType());
      assertEquals(false, noType0.isOrdinaryFunction());
      assertEquals(false, noType0.isNoResolvedType());
      assertEquals(0, noType0.getExtendedInterfacesCount());
      assertEquals(false, noType0.isNominalConstructor());
      assertEquals(true, noType0.canBeCalled());
      assertEquals(false, noType0.isReturnTypeInferred());
      assertEquals(false, noType0.isEnumElementType());
      assertEquals(2147483647, noType0.getPropertiesCount());
      assertEquals(true, noType0.matchesObjectContext());
      assertNull(noType0.getTemplateTypeName());
      assertEquals(false, noType0.isResolved());
      assertEquals(true, noType0.isNullable());
      assertEquals(false, noType0.hasCachedValues());
      assertEquals(false, noType0.isFunctionType());
      assertEquals(false, noType0.isAllType());
      assertEquals(2147483647, noType0.getMaxArguments());
      assertEquals(true, noType0.isConstructor());
      assertEquals(true, noType0.hasInstanceType());
      assertEquals(false, noType0.isTemplateType());
      assertEquals(false, noType0.isRecordType());
      assertEquals(false, noType0.isNumberValueType());
      assertNull(noType0.getReferenceName());
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean0 == boolean1);
  }

  @Test
  public void test67()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      boolean boolean0 = true;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0, boolean0);
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      String string0 = null;
      TemplateType templateType0 = new TemplateType(jSTypeRegistry0, string0);
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, templateType0.hasCachedValues());
      assertEquals(false, templateType0.isVoidType());
      assertEquals(false, templateType0.isFunctionType());
      assertEquals(false, templateType0.isUnionType());
      assertEquals(false, templateType0.isRecordType());
      assertEquals(false, templateType0.isEnumElementType());
      assertEquals(false, templateType0.isNullType());
      assertEquals(false, templateType0.isFunctionPrototypeType());
      assertEquals(false, templateType0.isStringValueType());
      assertEquals(true, templateType0.isTemplateType());
      assertEquals(false, templateType0.isNumberValueType());
      assertEquals(BooleanLiteralSet.TRUE, templateType0.getPossibleToBooleanOutcomes());
      assertNull(templateType0.getReferenceName());
      assertEquals(false, templateType0.isBooleanValueType());
      assertEquals(false, templateType0.isResolved());
      assertEquals(false, templateType0.isNominalConstructor());
      assertEquals(false, templateType0.isEnumType());
      assertNotNull(templateType0);
      
      ParameterizedType parameterizedType0 = jSTypeRegistry0.createParameterizedType((ObjectType) templateType0, (JSType) templateType0);
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, parameterizedType0.isFunctionPrototypeType());
      assertEquals(false, parameterizedType0.isBooleanValueType());
      assertEquals(false, parameterizedType0.isNominalConstructor());
      assertEquals(false, parameterizedType0.isEnumElementType());
      assertEquals(false, parameterizedType0.isStringValueType());
      assertEquals(false, parameterizedType0.isResolved());
      assertEquals(false, parameterizedType0.isRecordType());
      assertEquals(false, parameterizedType0.hasCachedValues());
      assertEquals(BooleanLiteralSet.TRUE, parameterizedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, parameterizedType0.isTemplateType());
      assertEquals(false, parameterizedType0.isVoidType());
      assertEquals(false, parameterizedType0.isFunctionType());
      assertEquals(false, parameterizedType0.isEnumType());
      assertEquals(false, parameterizedType0.isUnionType());
      assertEquals(false, parameterizedType0.isNumberValueType());
      assertEquals(false, parameterizedType0.isNullType());
      assertEquals(false, templateType0.hasCachedValues());
      assertEquals(false, templateType0.isVoidType());
      assertEquals(false, templateType0.isFunctionType());
      assertEquals(false, templateType0.isUnionType());
      assertEquals(false, templateType0.isRecordType());
      assertEquals(false, templateType0.isEnumElementType());
      assertEquals(false, templateType0.isNullType());
      assertEquals(false, templateType0.isFunctionPrototypeType());
      assertEquals(false, templateType0.isStringValueType());
      assertEquals(true, templateType0.isTemplateType());
      assertEquals(false, templateType0.isNumberValueType());
      assertEquals(BooleanLiteralSet.TRUE, templateType0.getPossibleToBooleanOutcomes());
      assertNull(templateType0.getReferenceName());
      assertEquals(false, templateType0.isBooleanValueType());
      assertEquals(false, templateType0.isResolved());
      assertEquals(false, templateType0.isNominalConstructor());
      assertEquals(false, templateType0.isEnumType());
      assertNotNull(parameterizedType0);
      
      boolean boolean1 = parameterizedType0.isRecordType();
      assertFalse(boolean1);
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, parameterizedType0.isFunctionPrototypeType());
      assertEquals(false, parameterizedType0.isBooleanValueType());
      assertEquals(false, parameterizedType0.isNominalConstructor());
      assertEquals(false, parameterizedType0.isEnumElementType());
      assertEquals(false, parameterizedType0.isStringValueType());
      assertEquals(false, parameterizedType0.isResolved());
      assertEquals(false, parameterizedType0.isRecordType());
      assertEquals(false, parameterizedType0.hasCachedValues());
      assertEquals(BooleanLiteralSet.TRUE, parameterizedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, parameterizedType0.isTemplateType());
      assertEquals(false, parameterizedType0.isVoidType());
      assertEquals(false, parameterizedType0.isFunctionType());
      assertEquals(false, parameterizedType0.isEnumType());
      assertEquals(false, parameterizedType0.isUnionType());
      assertEquals(false, parameterizedType0.isNumberValueType());
      assertEquals(false, parameterizedType0.isNullType());
      assertEquals(false, templateType0.hasCachedValues());
      assertEquals(false, templateType0.isVoidType());
      assertEquals(false, templateType0.isFunctionType());
      assertEquals(false, templateType0.isUnionType());
      assertEquals(false, templateType0.isRecordType());
      assertEquals(false, templateType0.isEnumElementType());
      assertEquals(false, templateType0.isNullType());
      assertEquals(false, templateType0.isFunctionPrototypeType());
      assertEquals(false, templateType0.isStringValueType());
      assertEquals(true, templateType0.isTemplateType());
      assertEquals(false, templateType0.isNumberValueType());
      assertEquals(BooleanLiteralSet.TRUE, templateType0.getPossibleToBooleanOutcomes());
      assertNull(templateType0.getReferenceName());
      assertEquals(false, templateType0.isBooleanValueType());
      assertEquals(false, templateType0.isResolved());
      assertEquals(false, templateType0.isNominalConstructor());
      assertEquals(false, templateType0.isEnumType());
      assertFalse(boolean0 == boolean1);
      assertFalse(boolean1 == boolean0);
  }

  @Test
  public void test68()  throws Throwable  {
      String string0 = "g>";
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      TemplateType templateType0 = new TemplateType(jSTypeRegistry0, string0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, templateType0.isNumberValueType());
      assertEquals(BooleanLiteralSet.TRUE, templateType0.getPossibleToBooleanOutcomes());
      assertEquals(false, templateType0.isStringValueType());
      assertEquals(false, templateType0.isFunctionPrototypeType());
      assertEquals(false, templateType0.hasCachedValues());
      assertEquals(true, templateType0.isTemplateType());
      assertEquals(false, templateType0.isEnumType());
      assertEquals(false, templateType0.isNullType());
      assertEquals(false, templateType0.isResolved());
      assertEquals(false, templateType0.isVoidType());
      assertEquals(false, templateType0.isNominalConstructor());
      assertEquals(false, templateType0.isFunctionType());
      assertEquals(false, templateType0.isBooleanValueType());
      assertEquals("g>", templateType0.getReferenceName());
      assertEquals(false, templateType0.isRecordType());
      assertEquals(false, templateType0.isUnionType());
      assertEquals(false, templateType0.isEnumElementType());
      assertNotNull(templateType0);
      
      templateType0.matchConstraint((ObjectType) templateType0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, templateType0.isNumberValueType());
      assertEquals(BooleanLiteralSet.TRUE, templateType0.getPossibleToBooleanOutcomes());
      assertEquals(false, templateType0.isStringValueType());
      assertEquals(false, templateType0.isFunctionPrototypeType());
      assertEquals(false, templateType0.hasCachedValues());
      assertEquals(true, templateType0.isTemplateType());
      assertEquals(false, templateType0.isEnumType());
      assertEquals(false, templateType0.isNullType());
      assertEquals(false, templateType0.isResolved());
      assertEquals(false, templateType0.isVoidType());
      assertEquals(false, templateType0.isNominalConstructor());
      assertEquals(false, templateType0.isFunctionType());
      assertEquals(false, templateType0.isBooleanValueType());
      assertEquals("g>", templateType0.getReferenceName());
      assertEquals(false, templateType0.isRecordType());
      assertEquals(false, templateType0.isUnionType());
      assertEquals(false, templateType0.isEnumElementType());
  }

  @Test
  public void test69()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      boolean boolean0 = true;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0, boolean0);
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      String string0 = "Z4}D-jR(`*2eS";
      int int0 = 2016;
      NamedType namedType0 = new NamedType(jSTypeRegistry0, string0, string0, int0, int0);
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, namedType0.isResolved());
      assertEquals(false, namedType0.isRecordType());
      assertEquals(false, namedType0.isFunctionPrototypeType());
      assertEquals(false, namedType0.isFunctionType());
      assertEquals(false, namedType0.isNominalConstructor());
      assertEquals(BooleanLiteralSet.TRUE, namedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, namedType0.hasCachedValues());
      assertEquals(false, namedType0.isUnionType());
      assertEquals(false, namedType0.isTemplateType());
      assertEquals(false, namedType0.isBooleanValueType());
      assertEquals(false, namedType0.isStringValueType());
      assertEquals(false, namedType0.isEnumElementType());
      assertEquals(false, namedType0.isNumberValueType());
      assertEquals(false, namedType0.isNullType());
      assertEquals(false, namedType0.isEnumType());
      assertEquals(false, namedType0.isVoidType());
      assertNotNull(namedType0);
      
      boolean boolean1 = namedType0.isConstructor();
      assertFalse(boolean1);
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, namedType0.isResolved());
      assertEquals(false, namedType0.isRecordType());
      assertEquals(false, namedType0.isFunctionPrototypeType());
      assertEquals(false, namedType0.isFunctionType());
      assertEquals(false, namedType0.isNominalConstructor());
      assertEquals(BooleanLiteralSet.TRUE, namedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, namedType0.hasCachedValues());
      assertEquals(false, namedType0.isUnionType());
      assertEquals(false, namedType0.isTemplateType());
      assertEquals(false, namedType0.isBooleanValueType());
      assertEquals(false, namedType0.isStringValueType());
      assertEquals(false, namedType0.isEnumElementType());
      assertEquals(false, namedType0.isNumberValueType());
      assertEquals(false, namedType0.isNullType());
      assertEquals(false, namedType0.isEnumType());
      assertEquals(false, namedType0.isVoidType());
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean0 == boolean1);
  }

  @Test
  public void test70()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = null;
      StringType stringType0 = new StringType(jSTypeRegistry0);
      assertEquals(false, stringType0.isNumberValueType());
      assertEquals(true, stringType0.matchesNumberContext());
      assertEquals(false, stringType0.isResolved());
      assertEquals(false, stringType0.isUnionType());
      assertEquals(false, stringType0.isInterface());
      assertEquals(false, stringType0.isVoidType());
      assertEquals(false, stringType0.isTemplateType());
      assertEquals(false, stringType0.isCheckedUnknownType());
      assertEquals(false, stringType0.isNoResolvedType());
      assertEquals(false, stringType0.isBooleanValueType());
      assertEquals("string", stringType0.getDisplayName());
      assertEquals(false, stringType0.isFunctionPrototypeType());
      assertEquals(false, stringType0.isOrdinaryFunction());
      assertEquals(true, stringType0.matchesStringContext());
      assertEquals(true, stringType0.matchesObjectContext());
      assertEquals(false, stringType0.isConstructor());
      assertEquals(false, stringType0.isEnumElementType());
      assertEquals(false, stringType0.isNominalType());
      assertEquals(true, stringType0.isStringValueType());
      assertEquals(false, stringType0.isFunctionType());
      assertEquals(false, stringType0.isNullType());
      assertEquals(false, stringType0.isRecordType());
      assertEquals(false, stringType0.isEnumType());
      assertEquals(false, stringType0.isNoObjectType());
      assertEquals(false, stringType0.isAllType());
      assertEquals(false, stringType0.isNominalConstructor());
      assertEquals(BooleanLiteralSet.BOTH, stringType0.getPossibleToBooleanOutcomes());
      assertEquals(false, stringType0.isNoType());
      assertNotNull(stringType0);
      
      ObjectType objectType0 = stringType0.toObjectType();
      assertEquals(false, stringType0.isNumberValueType());
      assertEquals(true, stringType0.matchesNumberContext());
      assertEquals(false, stringType0.isResolved());
      assertEquals(false, stringType0.isUnionType());
      assertEquals(false, stringType0.isInterface());
      assertEquals(false, stringType0.isVoidType());
      assertEquals(false, stringType0.isTemplateType());
      assertEquals(false, stringType0.isCheckedUnknownType());
      assertEquals(false, stringType0.isNoResolvedType());
      assertEquals(false, stringType0.isBooleanValueType());
      assertEquals("string", stringType0.getDisplayName());
      assertEquals(false, stringType0.isFunctionPrototypeType());
      assertEquals(false, stringType0.isOrdinaryFunction());
      assertEquals(true, stringType0.matchesStringContext());
      assertEquals(true, stringType0.matchesObjectContext());
      assertEquals(false, stringType0.isConstructor());
      assertEquals(false, stringType0.isEnumElementType());
      assertEquals(false, stringType0.isNominalType());
      assertEquals(true, stringType0.isStringValueType());
      assertEquals(false, stringType0.isFunctionType());
      assertEquals(false, stringType0.isNullType());
      assertEquals(false, stringType0.isRecordType());
      assertEquals(false, stringType0.isEnumType());
      assertEquals(false, stringType0.isNoObjectType());
      assertEquals(false, stringType0.isAllType());
      assertEquals(false, stringType0.isNominalConstructor());
      assertEquals(BooleanLiteralSet.BOTH, stringType0.getPossibleToBooleanOutcomes());
      assertEquals(false, stringType0.isNoType());
      assertNull(objectType0);
      
      FunctionType functionType0 = JSType.toMaybeFunctionType((JSType) objectType0);
      assertEquals(false, stringType0.isNumberValueType());
      assertEquals(true, stringType0.matchesNumberContext());
      assertEquals(false, stringType0.isResolved());
      assertEquals(false, stringType0.isUnionType());
      assertEquals(false, stringType0.isInterface());
      assertEquals(false, stringType0.isVoidType());
      assertEquals(false, stringType0.isTemplateType());
      assertEquals(false, stringType0.isCheckedUnknownType());
      assertEquals(false, stringType0.isNoResolvedType());
      assertEquals(false, stringType0.isBooleanValueType());
      assertEquals("string", stringType0.getDisplayName());
      assertEquals(false, stringType0.isFunctionPrototypeType());
      assertEquals(false, stringType0.isOrdinaryFunction());
      assertEquals(true, stringType0.matchesStringContext());
      assertEquals(true, stringType0.matchesObjectContext());
      assertEquals(false, stringType0.isConstructor());
      assertEquals(false, stringType0.isEnumElementType());
      assertEquals(false, stringType0.isNominalType());
      assertEquals(true, stringType0.isStringValueType());
      assertEquals(false, stringType0.isFunctionType());
      assertEquals(false, stringType0.isNullType());
      assertEquals(false, stringType0.isRecordType());
      assertEquals(false, stringType0.isEnumType());
      assertEquals(false, stringType0.isNoObjectType());
      assertEquals(false, stringType0.isAllType());
      assertEquals(false, stringType0.isNominalConstructor());
      assertEquals(BooleanLiteralSet.BOTH, stringType0.getPossibleToBooleanOutcomes());
      assertEquals(false, stringType0.isNoType());
      assertNull(functionType0);
      
      IndexedType indexedType0 = new IndexedType(jSTypeRegistry0, functionType0, stringType0);
      assertEquals(false, stringType0.isNumberValueType());
      assertEquals(true, stringType0.matchesNumberContext());
      assertEquals(false, stringType0.isResolved());
      assertEquals(false, stringType0.isUnionType());
      assertEquals(false, stringType0.isInterface());
      assertEquals(false, stringType0.isVoidType());
      assertEquals(false, stringType0.isTemplateType());
      assertEquals(false, stringType0.isCheckedUnknownType());
      assertEquals(false, stringType0.isNoResolvedType());
      assertEquals(false, stringType0.isBooleanValueType());
      assertEquals("string", stringType0.getDisplayName());
      assertEquals(false, stringType0.isFunctionPrototypeType());
      assertEquals(false, stringType0.isOrdinaryFunction());
      assertEquals(true, stringType0.matchesStringContext());
      assertEquals(true, stringType0.matchesObjectContext());
      assertEquals(false, stringType0.isConstructor());
      assertEquals(false, stringType0.isEnumElementType());
      assertEquals(false, stringType0.isNominalType());
      assertEquals(true, stringType0.isStringValueType());
      assertEquals(false, stringType0.isFunctionType());
      assertEquals(false, stringType0.isNullType());
      assertEquals(false, stringType0.isRecordType());
      assertEquals(false, stringType0.isEnumType());
      assertEquals(false, stringType0.isNoObjectType());
      assertEquals(false, stringType0.isAllType());
      assertEquals(false, stringType0.isNominalConstructor());
      assertEquals(BooleanLiteralSet.BOTH, stringType0.getPossibleToBooleanOutcomes());
      assertEquals(false, stringType0.isNoType());
      assertEquals(false, indexedType0.isNullType());
      assertEquals(false, indexedType0.isResolved());
      assertEquals(false, indexedType0.isBooleanValueType());
      assertEquals(BooleanLiteralSet.TRUE, indexedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, indexedType0.hasCachedValues());
      assertEquals(false, indexedType0.isVoidType());
      assertEquals(false, indexedType0.isStringValueType());
      assertEquals(false, indexedType0.isTemplateType());
      assertEquals(false, indexedType0.isNumberValueType());
      assertEquals(false, indexedType0.isFunctionPrototypeType());
      assertNotNull(indexedType0);
      
      JSType jSType0 = indexedType0.getReferencedTypeInternal();
      assertEquals(false, stringType0.isNumberValueType());
      assertEquals(true, stringType0.matchesNumberContext());
      assertEquals(false, stringType0.isResolved());
      assertEquals(false, stringType0.isUnionType());
      assertEquals(false, stringType0.isInterface());
      assertEquals(false, stringType0.isVoidType());
      assertEquals(false, stringType0.isTemplateType());
      assertEquals(false, stringType0.isCheckedUnknownType());
      assertEquals(false, stringType0.isNoResolvedType());
      assertEquals(false, stringType0.isBooleanValueType());
      assertEquals("string", stringType0.getDisplayName());
      assertEquals(false, stringType0.isFunctionPrototypeType());
      assertEquals(false, stringType0.isOrdinaryFunction());
      assertEquals(true, stringType0.matchesStringContext());
      assertEquals(true, stringType0.matchesObjectContext());
      assertEquals(false, stringType0.isConstructor());
      assertEquals(false, stringType0.isEnumElementType());
      assertEquals(false, stringType0.isNominalType());
      assertEquals(true, stringType0.isStringValueType());
      assertEquals(false, stringType0.isFunctionType());
      assertEquals(false, stringType0.isNullType());
      assertEquals(false, stringType0.isRecordType());
      assertEquals(false, stringType0.isEnumType());
      assertEquals(false, stringType0.isNoObjectType());
      assertEquals(false, stringType0.isAllType());
      assertEquals(false, stringType0.isNominalConstructor());
      assertEquals(BooleanLiteralSet.BOTH, stringType0.getPossibleToBooleanOutcomes());
      assertEquals(false, stringType0.isNoType());
      assertEquals(false, indexedType0.isNullType());
      assertEquals(false, indexedType0.isResolved());
      assertEquals(false, indexedType0.isBooleanValueType());
      assertEquals(BooleanLiteralSet.TRUE, indexedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, indexedType0.hasCachedValues());
      assertEquals(false, indexedType0.isVoidType());
      assertEquals(false, indexedType0.isStringValueType());
      assertEquals(false, indexedType0.isTemplateType());
      assertEquals(false, indexedType0.isNumberValueType());
      assertEquals(false, indexedType0.isFunctionPrototypeType());
      assertNull(jSType0);
  }

  @Test
  public void test71()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      boolean boolean0 = true;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0, boolean0);
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      String string0 = "}";
      TemplateType templateType0 = new TemplateType(jSTypeRegistry0, string0);
      assertEquals(false, templateType0.isStringValueType());
      assertEquals(false, templateType0.isFunctionPrototypeType());
      assertEquals(BooleanLiteralSet.TRUE, templateType0.getPossibleToBooleanOutcomes());
      assertEquals(true, templateType0.isTemplateType());
      assertEquals(false, templateType0.isFunctionType());
      assertEquals("}", templateType0.getReferenceName());
      assertEquals(false, templateType0.isNumberValueType());
      assertEquals(false, templateType0.isRecordType());
      assertEquals(false, templateType0.isNullType());
      assertEquals(false, templateType0.isBooleanValueType());
      assertEquals(false, templateType0.isVoidType());
      assertEquals(false, templateType0.isEnumElementType());
      assertEquals(false, templateType0.isEnumType());
      assertEquals(false, templateType0.hasCachedValues());
      assertEquals(false, templateType0.isNominalConstructor());
      assertEquals(false, templateType0.isUnionType());
      assertEquals(false, templateType0.isResolved());
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(templateType0);
      
      boolean boolean1 = templateType0.isEmptyType();
      assertFalse(boolean1);
      assertEquals(false, templateType0.isStringValueType());
      assertEquals(false, templateType0.isFunctionPrototypeType());
      assertEquals(BooleanLiteralSet.TRUE, templateType0.getPossibleToBooleanOutcomes());
      assertEquals(true, templateType0.isTemplateType());
      assertEquals(false, templateType0.isFunctionType());
      assertEquals("}", templateType0.getReferenceName());
      assertEquals(false, templateType0.isNumberValueType());
      assertEquals(false, templateType0.isRecordType());
      assertEquals(false, templateType0.isNullType());
      assertEquals(false, templateType0.isBooleanValueType());
      assertEquals(false, templateType0.isVoidType());
      assertEquals(false, templateType0.isEnumElementType());
      assertEquals(false, templateType0.isEnumType());
      assertEquals(false, templateType0.hasCachedValues());
      assertEquals(false, templateType0.isNominalConstructor());
      assertEquals(false, templateType0.isUnionType());
      assertEquals(false, templateType0.isResolved());
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(boolean0 == boolean1);
      assertFalse(boolean1 == boolean0);
  }

  @Test
  public void test72()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSType jSType0 = null;
      FunctionType functionType0 = JSType.toMaybeFunctionType(jSType0);
      assertNull(functionType0);
      
      boolean boolean0 = false;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0, boolean0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      String string0 = null;
      TemplateType templateType0 = new TemplateType(jSTypeRegistry0, string0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(BooleanLiteralSet.TRUE, templateType0.getPossibleToBooleanOutcomes());
      assertNull(templateType0.getReferenceName());
      assertEquals(false, templateType0.isFunctionType());
      assertEquals(false, templateType0.isUnionType());
      assertEquals(false, templateType0.isRecordType());
      assertEquals(true, templateType0.isTemplateType());
      assertEquals(false, templateType0.isResolved());
      assertEquals(false, templateType0.isNumberValueType());
      assertEquals(false, templateType0.isStringValueType());
      assertEquals(false, templateType0.isEnumType());
      assertEquals(false, templateType0.isNullType());
      assertEquals(false, templateType0.isNominalConstructor());
      assertEquals(false, templateType0.isVoidType());
      assertEquals(false, templateType0.isBooleanValueType());
      assertEquals(false, templateType0.hasCachedValues());
      assertEquals(false, templateType0.isFunctionPrototypeType());
      assertEquals(false, templateType0.isEnumElementType());
      assertNotNull(templateType0);
      
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      assertEquals(2147483647, noResolvedType0.getPropertiesCount());
      assertNull(noResolvedType0.getTemplateTypeName());
      assertEquals(false, noResolvedType0.isBooleanValueType());
      assertEquals(false, noResolvedType0.isNominalType());
      assertEquals(false, noResolvedType0.isInterface());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertEquals(false, noResolvedType0.isFunctionType());
      assertEquals(false, noResolvedType0.isNominalConstructor());
      assertEquals(false, noResolvedType0.isNullType());
      assertEquals(false, noResolvedType0.isAllType());
      assertEquals(false, noResolvedType0.isUnionType());
      assertEquals(false, noResolvedType0.isResolved());
      assertEquals(true, noResolvedType0.isConstructor());
      assertEquals(false, noResolvedType0.isEnumElementType());
      assertEquals(false, noResolvedType0.isVoidType());
      assertEquals(false, noResolvedType0.isOrdinaryFunction());
      assertNull(noResolvedType0.getReferenceName());
      assertEquals(false, noResolvedType0.isNumberValueType());
      assertEquals(2147483647, noResolvedType0.getMaxArguments());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertEquals(true, noResolvedType0.isNullable());
      assertEquals(true, noResolvedType0.matchesNumberContext());
      assertEquals(false, noResolvedType0.isStringValueType());
      assertEquals(true, noResolvedType0.canBeCalled());
      assertEquals(false, noResolvedType0.isFunctionPrototypeType());
      assertEquals(false, noResolvedType0.isTemplateType());
      assertEquals(false, noResolvedType0.hasCachedValues());
      assertEquals(true, noResolvedType0.matchesObjectContext());
      assertEquals(false, noResolvedType0.isNoObjectType());
      assertEquals(false, noResolvedType0.isReturnTypeInferred());
      assertEquals(false, noResolvedType0.isRecordType());
      assertEquals(false, noResolvedType0.isCheckedUnknownType());
      assertEquals(false, noResolvedType0.isEnumType());
      assertEquals(true, noResolvedType0.matchesStringContext());
      assertEquals(true, noResolvedType0.hasInstanceType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(noResolvedType0);
      
      Node node0 = noResolvedType0.getSource();
      assertEquals(2147483647, noResolvedType0.getPropertiesCount());
      assertNull(noResolvedType0.getTemplateTypeName());
      assertEquals(false, noResolvedType0.isBooleanValueType());
      assertEquals(false, noResolvedType0.isNominalType());
      assertEquals(false, noResolvedType0.isInterface());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertEquals(false, noResolvedType0.isFunctionType());
      assertEquals(false, noResolvedType0.isNominalConstructor());
      assertEquals(false, noResolvedType0.isNullType());
      assertEquals(false, noResolvedType0.isAllType());
      assertEquals(false, noResolvedType0.isUnionType());
      assertEquals(false, noResolvedType0.isResolved());
      assertEquals(true, noResolvedType0.isConstructor());
      assertEquals(false, noResolvedType0.isEnumElementType());
      assertEquals(false, noResolvedType0.isVoidType());
      assertEquals(false, noResolvedType0.isOrdinaryFunction());
      assertNull(noResolvedType0.getReferenceName());
      assertEquals(false, noResolvedType0.isNumberValueType());
      assertEquals(2147483647, noResolvedType0.getMaxArguments());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertEquals(true, noResolvedType0.isNullable());
      assertEquals(true, noResolvedType0.matchesNumberContext());
      assertEquals(false, noResolvedType0.isStringValueType());
      assertEquals(true, noResolvedType0.canBeCalled());
      assertEquals(false, noResolvedType0.isFunctionPrototypeType());
      assertEquals(false, noResolvedType0.isTemplateType());
      assertEquals(false, noResolvedType0.hasCachedValues());
      assertEquals(true, noResolvedType0.matchesObjectContext());
      assertEquals(false, noResolvedType0.isNoObjectType());
      assertEquals(false, noResolvedType0.isReturnTypeInferred());
      assertEquals(false, noResolvedType0.isRecordType());
      assertEquals(false, noResolvedType0.isCheckedUnknownType());
      assertEquals(false, noResolvedType0.isEnumType());
      assertEquals(true, noResolvedType0.matchesStringContext());
      assertEquals(true, noResolvedType0.hasInstanceType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNull(node0);
      
      boolean boolean1 = templateType0.defineDeclaredProperty(string0, (JSType) functionType0, node0);
      assertTrue(boolean1);
      assertEquals(2147483647, noResolvedType0.getPropertiesCount());
      assertNull(noResolvedType0.getTemplateTypeName());
      assertEquals(false, noResolvedType0.isBooleanValueType());
      assertEquals(false, noResolvedType0.isNominalType());
      assertEquals(false, noResolvedType0.isInterface());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertEquals(false, noResolvedType0.isFunctionType());
      assertEquals(false, noResolvedType0.isNominalConstructor());
      assertEquals(false, noResolvedType0.isNullType());
      assertEquals(false, noResolvedType0.isAllType());
      assertEquals(false, noResolvedType0.isUnionType());
      assertEquals(false, noResolvedType0.isResolved());
      assertEquals(true, noResolvedType0.isConstructor());
      assertEquals(false, noResolvedType0.isEnumElementType());
      assertEquals(false, noResolvedType0.isVoidType());
      assertEquals(false, noResolvedType0.isOrdinaryFunction());
      assertNull(noResolvedType0.getReferenceName());
      assertEquals(false, noResolvedType0.isNumberValueType());
      assertEquals(2147483647, noResolvedType0.getMaxArguments());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertEquals(true, noResolvedType0.isNullable());
      assertEquals(true, noResolvedType0.matchesNumberContext());
      assertEquals(false, noResolvedType0.isStringValueType());
      assertEquals(true, noResolvedType0.canBeCalled());
      assertEquals(false, noResolvedType0.isFunctionPrototypeType());
      assertEquals(false, noResolvedType0.isTemplateType());
      assertEquals(false, noResolvedType0.hasCachedValues());
      assertEquals(true, noResolvedType0.matchesObjectContext());
      assertEquals(false, noResolvedType0.isNoObjectType());
      assertEquals(false, noResolvedType0.isReturnTypeInferred());
      assertEquals(false, noResolvedType0.isRecordType());
      assertEquals(false, noResolvedType0.isCheckedUnknownType());
      assertEquals(false, noResolvedType0.isEnumType());
      assertEquals(true, noResolvedType0.matchesStringContext());
      assertEquals(true, noResolvedType0.hasInstanceType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(BooleanLiteralSet.TRUE, templateType0.getPossibleToBooleanOutcomes());
      assertNull(templateType0.getReferenceName());
      assertEquals(false, templateType0.isFunctionType());
      assertEquals(false, templateType0.isUnionType());
      assertEquals(false, templateType0.isRecordType());
      assertEquals(true, templateType0.isTemplateType());
      assertEquals(false, templateType0.isResolved());
      assertEquals(false, templateType0.isNumberValueType());
      assertEquals(false, templateType0.isStringValueType());
      assertEquals(false, templateType0.isEnumType());
      assertEquals(false, templateType0.isNullType());
      assertEquals(false, templateType0.isNominalConstructor());
      assertEquals(false, templateType0.isVoidType());
      assertEquals(false, templateType0.isBooleanValueType());
      assertEquals(false, templateType0.hasCachedValues());
      assertEquals(false, templateType0.isFunctionPrototypeType());
      assertEquals(false, templateType0.isEnumElementType());
      assertFalse(boolean0 == boolean1);
      assertFalse(boolean1 == boolean0);
  }
}
