/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 19:12:32 GMT 2014
 */

package com.google.javascript.jscomp;

import static org.junit.Assert.*; import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.junit.Test;
import com.google.javascript.jscomp.Compiler;
import com.google.javascript.jscomp.ConcreteType;
import com.google.javascript.jscomp.DisambiguateProperties;
import com.google.javascript.jscomp.TightenTypes;
import com.google.javascript.rhino.Node;
import com.google.javascript.rhino.jstype.AllType;
import com.google.javascript.rhino.jstype.BooleanLiteralSet;
import com.google.javascript.rhino.jstype.JSType;
import com.google.javascript.rhino.jstype.JSTypeRegistry;
import com.google.javascript.rhino.jstype.RecordType;
import java.io.PrintStream;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;



import org.junit.runner.RunWith;


public class DisambiguatePropertiesEvoSuite_branch_Test  {

  @Test
  public void test0()  throws Throwable  {
      PrintStream printStream0 = null;
      Compiler compiler0 = new Compiler(printStream0);
      assertNotNull(compiler0);
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.hasErrors());
      
      DisambiguateProperties<JSType> disambiguateProperties0 = DisambiguateProperties.forJSTypeSystem(compiler0);
      assertNotNull(disambiguateProperties0);
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.hasErrors());
      
      JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
      assertNotNull(jSTypeRegistry0);
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.hasErrors());
      
      String string0 = ":N4M/i$Z0v";
      HashMap<String, AllType> hashMap0 = new HashMap<String, AllType>();
      assertNotNull(hashMap0);
      assertEquals(true, hashMap0.isEmpty());
      assertEquals("{}", hashMap0.toString());
      assertEquals(0, hashMap0.size());
      
      HashMap<String, JSType> hashMap1 = new HashMap<String, JSType>((Map<? extends String, ? extends JSType>) hashMap0);
      assertNotNull(hashMap1);
      assertEquals(true, hashMap0.isEmpty());
      assertEquals("{}", hashMap0.toString());
      assertEquals(0, hashMap0.size());
      assertEquals(true, hashMap1.isEmpty());
      assertEquals("{}", hashMap1.toString());
      assertEquals(0, hashMap1.size());
      
      JSType jSType0 = null;
      JSType jSType1 = hashMap1.put(string0, jSType0);
      assertNull(jSType1);
      assertEquals(true, hashMap0.isEmpty());
      assertEquals("{}", hashMap0.toString());
      assertEquals(0, hashMap0.size());
      assertEquals("{:N4M/i$Z0v=null}", hashMap1.toString());
      assertEquals(false, hashMap1.isEmpty());
      assertEquals(1, hashMap1.size());
      
      RecordType recordType0 = jSTypeRegistry0.createRecordType((Map<String, JSType>) hashMap1);
      assertNotNull(recordType0);
      assertEquals(false, recordType0.isEmptyType());
      assertEquals(false, recordType0.isUnionType());
      assertEquals(false, recordType0.isNoObjectType());
      assertEquals(false, recordType0.isNumberValueType());
      assertEquals(false, recordType0.isStringValueType());
      assertEquals(false, recordType0.isBooleanValueType());
      assertEquals(false, recordType0.isVoidType());
      assertEquals(BooleanLiteralSet.TRUE, recordType0.getPossibleToBooleanOutcomes());
      assertEquals(true, recordType0.isRecordType());
      assertEquals(false, recordType0.isAllType());
      assertEquals(false, recordType0.isFunctionType());
      assertEquals(false, recordType0.isTemplateType());
      assertEquals(false, recordType0.isResolved());
      assertEquals(false, recordType0.isNoType());
      assertEquals(false, recordType0.isNamedType());
      assertEquals(false, recordType0.isNullType());
      assertEquals(true, hashMap0.isEmpty());
      assertEquals("{}", hashMap0.toString());
      assertEquals(0, hashMap0.size());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.hasErrors());
      assertEquals("{:N4M/i$Z0v=null}", hashMap1.toString());
      assertEquals(false, hashMap1.isEmpty());
      assertEquals(1, hashMap1.size());
      
      RecordType recordType1 = (RecordType)disambiguateProperties0.getTypeWithProperty(string0, recordType0);
      assertNotNull(recordType1);
      assertEquals(false, recordType1.isNoType());
      assertEquals(false, recordType1.isNullType());
      assertEquals(false, recordType1.isNoObjectType());
      assertEquals(false, recordType1.isAllType());
      assertEquals(false, recordType1.isFunctionType());
      assertEquals(false, recordType1.isBooleanValueType());
      assertEquals(BooleanLiteralSet.TRUE, recordType1.getPossibleToBooleanOutcomes());
      assertEquals(false, recordType1.isTemplateType());
      assertEquals(false, recordType1.isNamedType());
      assertEquals(false, recordType1.isStringValueType());
      assertEquals(false, recordType1.isUnionType());
      assertEquals(false, recordType1.isResolved());
      assertEquals(false, recordType1.isNumberValueType());
      assertEquals(false, recordType1.isEmptyType());
      assertEquals(false, recordType1.isVoidType());
      assertEquals(true, recordType1.isRecordType());
      assertEquals(false, recordType0.isEmptyType());
      assertEquals(false, recordType0.isUnionType());
      assertEquals(false, recordType0.isNoObjectType());
      assertEquals(false, recordType0.isNumberValueType());
      assertEquals(false, recordType0.isStringValueType());
      assertEquals(false, recordType0.isBooleanValueType());
      assertEquals(false, recordType0.isVoidType());
      assertEquals(BooleanLiteralSet.TRUE, recordType0.getPossibleToBooleanOutcomes());
      assertEquals(true, recordType0.isRecordType());
      assertEquals(false, recordType0.isAllType());
      assertEquals(false, recordType0.isFunctionType());
      assertEquals(false, recordType0.isTemplateType());
      assertEquals(false, recordType0.isResolved());
      assertEquals(false, recordType0.isNoType());
      assertEquals(false, recordType0.isNamedType());
      assertEquals(false, recordType0.isNullType());
      assertEquals(true, hashMap0.isEmpty());
      assertEquals("{}", hashMap0.toString());
      assertEquals(0, hashMap0.size());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.hasErrors());
      assertEquals("{:N4M/i$Z0v=null}", hashMap1.toString());
      assertEquals(false, hashMap1.isEmpty());
      assertEquals(1, hashMap1.size());
      assertSame(recordType1, recordType0);
      assertSame(recordType0, recordType1);
  }

  @Test
  public void test1()  throws Throwable  {
      PrintStream printStream0 = null;
      Compiler compiler0 = new Compiler(printStream0);
      assertNotNull(compiler0);
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.hasErrors());
      
      DisambiguateProperties<JSType> disambiguateProperties0 = DisambiguateProperties.forJSTypeSystem(compiler0);
      assertNotNull(disambiguateProperties0);
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.hasErrors());
      
      JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
      assertNotNull(jSTypeRegistry0);
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.hasErrors());
      
      String string0 = ":N4M/i$Z0v";
      HashMap<String, AllType> hashMap0 = new HashMap<String, AllType>();
      assertNotNull(hashMap0);
      assertEquals("{}", hashMap0.toString());
      assertEquals(0, hashMap0.size());
      assertEquals(true, hashMap0.isEmpty());
      
      HashMap<String, JSType> hashMap1 = new HashMap<String, JSType>((Map<? extends String, ? extends JSType>) hashMap0);
      assertNotNull(hashMap1);
      assertEquals("{}", hashMap1.toString());
      assertEquals(0, hashMap1.size());
      assertEquals(true, hashMap1.isEmpty());
      assertEquals("{}", hashMap0.toString());
      assertEquals(0, hashMap0.size());
      assertEquals(true, hashMap0.isEmpty());
      
      RecordType recordType0 = jSTypeRegistry0.createRecordType((Map<String, JSType>) hashMap1);
      assertNotNull(recordType0);
      assertEquals("{}", hashMap1.toString());
      assertEquals(0, hashMap1.size());
      assertEquals(true, hashMap1.isEmpty());
      assertEquals("{}", hashMap0.toString());
      assertEquals(0, hashMap0.size());
      assertEquals(true, hashMap0.isEmpty());
      assertEquals(false, recordType0.isTemplateType());
      assertEquals(false, recordType0.isResolved());
      assertEquals(false, recordType0.isUnionType());
      assertEquals(false, recordType0.isBooleanValueType());
      assertEquals(false, recordType0.isStringValueType());
      assertEquals(false, recordType0.isNullType());
      assertEquals(false, recordType0.isNoType());
      assertEquals(false, recordType0.isVoidType());
      assertEquals(false, recordType0.isNumberValueType());
      assertEquals(BooleanLiteralSet.TRUE, recordType0.getPossibleToBooleanOutcomes());
      assertEquals(false, recordType0.isNamedType());
      assertEquals(false, recordType0.isAllType());
      assertEquals(true, recordType0.isRecordType());
      assertEquals(false, recordType0.isEmptyType());
      assertEquals(false, recordType0.isNoObjectType());
      assertEquals(false, recordType0.isFunctionType());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.hasErrors());
      
      JSType jSType0 = disambiguateProperties0.getTypeWithProperty(string0, recordType0);
      assertNull(jSType0);
      assertEquals("{}", hashMap1.toString());
      assertEquals(0, hashMap1.size());
      assertEquals(true, hashMap1.isEmpty());
      assertEquals("{}", hashMap0.toString());
      assertEquals(0, hashMap0.size());
      assertEquals(true, hashMap0.isEmpty());
      assertEquals(false, recordType0.isTemplateType());
      assertEquals(false, recordType0.isResolved());
      assertEquals(false, recordType0.isUnionType());
      assertEquals(false, recordType0.isBooleanValueType());
      assertEquals(false, recordType0.isStringValueType());
      assertEquals(false, recordType0.isNullType());
      assertEquals(false, recordType0.isNoType());
      assertEquals(false, recordType0.isVoidType());
      assertEquals(false, recordType0.isNumberValueType());
      assertEquals(BooleanLiteralSet.TRUE, recordType0.getPossibleToBooleanOutcomes());
      assertEquals(false, recordType0.isNamedType());
      assertEquals(false, recordType0.isAllType());
      assertEquals(true, recordType0.isRecordType());
      assertEquals(false, recordType0.isEmptyType());
      assertEquals(false, recordType0.isNoObjectType());
      assertEquals(false, recordType0.isFunctionType());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.hasErrors());
      
      // Undeclared exception!
      try {
        JSType jSType1 = disambiguateProperties0.getTypeWithProperty(string0, jSType0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test2()  throws Throwable  {
      PrintStream printStream0 = null;
      Compiler compiler0 = new Compiler(printStream0);
      assertNotNull(compiler0);
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(false, compiler0.hasErrors());
      
      DisambiguateProperties<JSType> disambiguateProperties0 = DisambiguateProperties.forJSTypeSystem(compiler0);
      assertNotNull(disambiguateProperties0);
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(false, compiler0.hasErrors());
      
      JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
      assertNotNull(jSTypeRegistry0);
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(false, compiler0.hasErrors());
      
      ArrayList<JSType> arrayList0 = new ArrayList<JSType>();
      assertNotNull(arrayList0);
      assertEquals("[]", arrayList0.toString());
      assertEquals(true, arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      Node node0 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) arrayList0);
      assertNotNull(node0);
      assertEquals("[]", arrayList0.toString());
      assertEquals(true, arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isQuotedString());
      assertEquals(0, node0.getChildCount());
      assertEquals(-1, node0.getCharno());
      assertEquals(83, node0.getType());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.hasMoreThanOneChild());
      
      disambiguateProperties0.process(node0, node0);
      assertEquals("[]", arrayList0.toString());
      assertEquals(true, arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isQuotedString());
      assertEquals(0, node0.getChildCount());
      assertEquals(-1, node0.getCharno());
      assertEquals(83, node0.getType());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.hasMoreThanOneChild());
  }

  @Test
  public void test3()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      assertNotNull(compiler0);
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(0, compiler0.getWarningCount());
      
      TightenTypes tightenTypes0 = new TightenTypes(compiler0);
      assertNotNull(tightenTypes0);
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(0, compiler0.getWarningCount());
      
      DisambiguateProperties<ConcreteType> disambiguateProperties0 = DisambiguateProperties.forConcreteTypeSystem(compiler0, tightenTypes0);
      assertNotNull(disambiguateProperties0);
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(0, compiler0.getWarningCount());
  }
}
