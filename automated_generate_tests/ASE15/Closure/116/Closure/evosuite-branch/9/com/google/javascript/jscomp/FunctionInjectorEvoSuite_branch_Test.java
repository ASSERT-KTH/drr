/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 20:54:29 GMT 2014
 */

package com.google.javascript.jscomp;

import static org.junit.Assert.*; import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.junit.Test;
import com.google.common.base.Supplier;
import com.google.javascript.jscomp.AbstractCompiler;
import com.google.javascript.jscomp.Compiler;
import com.google.javascript.jscomp.CompilerInput;
import com.google.javascript.jscomp.CompilerOptions;
import com.google.javascript.jscomp.ErrorManager;
import com.google.javascript.jscomp.FunctionInjector;
import com.google.javascript.jscomp.FunctionToBlockMutator;
import com.google.javascript.jscomp.JSModule;
import com.google.javascript.jscomp.LoggerErrorManager;
import com.google.javascript.jscomp.NameAnalyzer;
import com.google.javascript.jscomp.SourceFile;
import com.google.javascript.jscomp.Tracer;
import com.google.javascript.rhino.Node;
import java.util.ArrayDeque;
import java.util.LinkedHashSet;
import java.util.Set;
import java.util.Stack;
import java.util.logging.Logger;



import org.evosuite.runtime.mock.java.lang.MockIllegalStateException;
import org.junit.runner.RunWith;


public class FunctionInjectorEvoSuite_branch_Test  {

  @Test
  public void test0() {}
//   @Test
//   public void test0()  throws Throwable  {
//       Logger logger0 = Tracer.logger;
//       assertEquals("com.google.javascript.jscomp.Tracer", logger0.getName());
//       assertNull(logger0.getResourceBundleName());
//       assertEquals(false, logger0.getUseParentHandlers());
//       assertNotNull(logger0);
//       
//       LoggerErrorManager loggerErrorManager0 = new LoggerErrorManager(logger0);
//       assertEquals(0, loggerErrorManager0.getErrorCount());
//       assertEquals(0, loggerErrorManager0.getWarningCount());
//       assertEquals(0.0, loggerErrorManager0.getTypedPercent(), 0.01D);
//       assertEquals("com.google.javascript.jscomp.Tracer", logger0.getName());
//       assertNull(logger0.getResourceBundleName());
//       assertEquals(false, logger0.getUseParentHandlers());
//       assertNotNull(loggerErrorManager0);
//       
//       Compiler compiler0 = new Compiler((ErrorManager) loggerErrorManager0);
//       assertEquals(0, compiler0.getErrorCount());
//       assertEquals(0.0, compiler0.getProgress(), 0.01D);
//       assertEquals(0, compiler0.getWarningCount());
//       assertEquals(0, loggerErrorManager0.getErrorCount());
//       assertEquals(0, loggerErrorManager0.getWarningCount());
//       assertEquals(0.0, loggerErrorManager0.getTypedPercent(), 0.01D);
//       assertEquals("com.google.javascript.jscomp.Tracer", logger0.getName());
//       assertNull(logger0.getResourceBundleName());
//       assertEquals(false, logger0.getUseParentHandlers());
//       assertNotNull(compiler0);
//       
//       Supplier<String> supplier0 = compiler0.getUniqueNameIdSupplier();
//       assertEquals(0, compiler0.getErrorCount());
//       assertEquals(0.0, compiler0.getProgress(), 0.01D);
//       assertEquals(0, compiler0.getWarningCount());
//       assertEquals(0, loggerErrorManager0.getErrorCount());
//       assertEquals(0, loggerErrorManager0.getWarningCount());
//       assertEquals(0.0, loggerErrorManager0.getTypedPercent(), 0.01D);
//       assertEquals("com.google.javascript.jscomp.Tracer", logger0.getName());
//       assertNull(logger0.getResourceBundleName());
//       assertEquals(false, logger0.getUseParentHandlers());
//       assertNotNull(supplier0);
//       
//       FunctionToBlockMutator.LabelNameSupplier functionToBlockMutator_LabelNameSupplier0 = new FunctionToBlockMutator.LabelNameSupplier(supplier0);
//       assertEquals(0, compiler0.getErrorCount());
//       assertEquals(0.0, compiler0.getProgress(), 0.01D);
//       assertEquals(0, compiler0.getWarningCount());
//       assertEquals(0, loggerErrorManager0.getErrorCount());
//       assertEquals(0, loggerErrorManager0.getWarningCount());
//       assertEquals(0.0, loggerErrorManager0.getTypedPercent(), 0.01D);
//       assertEquals("com.google.javascript.jscomp.Tracer", logger0.getName());
//       assertNull(logger0.getResourceBundleName());
//       assertEquals(false, logger0.getUseParentHandlers());
//       assertNotNull(functionToBlockMutator_LabelNameSupplier0);
//       
//       boolean boolean0 = true;
//       FunctionInjector functionInjector0 = new FunctionInjector((AbstractCompiler) compiler0, (Supplier<String>) functionToBlockMutator_LabelNameSupplier0, boolean0, boolean0, boolean0);
//       assertEquals(0, compiler0.getErrorCount());
//       assertEquals(0.0, compiler0.getProgress(), 0.01D);
//       assertEquals(0, compiler0.getWarningCount());
//       assertEquals(0, loggerErrorManager0.getErrorCount());
//       assertEquals(0, loggerErrorManager0.getWarningCount());
//       assertEquals(0.0, loggerErrorManager0.getTypedPercent(), 0.01D);
//       assertEquals("com.google.javascript.jscomp.Tracer", logger0.getName());
//       assertNull(logger0.getResourceBundleName());
//       assertEquals(false, logger0.getUseParentHandlers());
//       assertNotNull(functionInjector0);
//       
//       Set<String> set0 = NameAnalyzer.DEFAULT_GLOBAL_NAMES;
//       assertEquals(2, set0.size());
//       assertEquals(false, set0.isEmpty());
//       assertNotNull(set0);
//       
//       functionInjector0.setKnownConstants(set0);
//       assertEquals(0, compiler0.getErrorCount());
//       assertEquals(0.0, compiler0.getProgress(), 0.01D);
//       assertEquals(0, compiler0.getWarningCount());
//       assertEquals(0, loggerErrorManager0.getErrorCount());
//       assertEquals(0, loggerErrorManager0.getWarningCount());
//       assertEquals(0.0, loggerErrorManager0.getTypedPercent(), 0.01D);
//       assertEquals("com.google.javascript.jscomp.Tracer", logger0.getName());
//       assertNull(logger0.getResourceBundleName());
//       assertEquals(false, logger0.getUseParentHandlers());
//       assertEquals(2, set0.size());
//       assertEquals(false, set0.isEmpty());
//       
//       // Undeclared exception!
//       try {
//         functionInjector0.setKnownConstants(set0);
//         fail("Expecting exception: IllegalStateException");
//       
//       } catch(IllegalStateException e) {
//          //
//          // no message in exception (getMessage() returned null)
//          //
//       }
//   }

  @Test
  public void test1()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertNotNull(compiler0);
      
      Supplier<String> supplier0 = compiler0.getUniqueNameIdSupplier();
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertNotNull(supplier0);
      
      FunctionToBlockMutator.LabelNameSupplier functionToBlockMutator_LabelNameSupplier0 = new FunctionToBlockMutator.LabelNameSupplier(supplier0);
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertNotNull(functionToBlockMutator_LabelNameSupplier0);
      
      boolean boolean0 = true;
      FunctionInjector functionInjector0 = new FunctionInjector((AbstractCompiler) compiler0, (Supplier<String>) functionToBlockMutator_LabelNameSupplier0, boolean0, boolean0, boolean0);
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertNotNull(functionInjector0);
      
      String string0 = null;
      JSModule jSModule0 = new JSModule(string0);
      assertNull(jSModule0.toString());
      assertNull(jSModule0.getName());
      assertEquals(-1, jSModule0.getDepth());
      assertNotNull(jSModule0);
      
      Node node0 = null;
      ArrayDeque<FunctionInjector.Reference> arrayDeque0 = new ArrayDeque<FunctionInjector.Reference>();
      assertEquals("[]", arrayDeque0.toString());
      assertEquals(true, arrayDeque0.isEmpty());
      assertEquals(0, arrayDeque0.size());
      assertNotNull(arrayDeque0);
      
      FunctionInjector.InliningMode functionInjector_InliningMode0 = FunctionInjector.InliningMode.DIRECT;
      FunctionInjector.Reference functionInjector_Reference0 = new FunctionInjector.Reference(node0, jSModule0, functionInjector_InliningMode0);
      assertNull(jSModule0.toString());
      assertNull(jSModule0.getName());
      assertEquals(-1, jSModule0.getDepth());
      assertNotNull(functionInjector_Reference0);
      
      boolean boolean1 = arrayDeque0.add(functionInjector_Reference0);
      assertNull(jSModule0.toString());
      assertNull(jSModule0.getName());
      assertEquals(-1, jSModule0.getDepth());
      assertEquals(1, arrayDeque0.size());
      assertEquals(false, arrayDeque0.isEmpty());
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      assertEquals(true, linkedHashSet0.isEmpty());
      assertEquals("[]", linkedHashSet0.toString());
      assertEquals(0, linkedHashSet0.size());
      assertNotNull(linkedHashSet0);
      
      boolean boolean2 = functionInjector0.inliningLowersCost(jSModule0, node0, arrayDeque0, linkedHashSet0, boolean0, boolean0);
      assertEquals(true, linkedHashSet0.isEmpty());
      assertEquals("[]", linkedHashSet0.toString());
      assertEquals(0, linkedHashSet0.size());
      assertNull(jSModule0.toString());
      assertNull(jSModule0.getName());
      assertEquals(-1, jSModule0.getDepth());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(1, arrayDeque0.size());
      assertEquals(false, arrayDeque0.isEmpty());
      assertTrue(boolean2);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean0 == boolean1);
      assertTrue(boolean0 == boolean2);
  }

  @Test
  public void test2()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertNotNull(compiler0);
      
      Supplier<String> supplier0 = compiler0.getUniqueNameIdSupplier();
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertNotNull(supplier0);
      
      FunctionToBlockMutator.LabelNameSupplier functionToBlockMutator_LabelNameSupplier0 = new FunctionToBlockMutator.LabelNameSupplier(supplier0);
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertNotNull(functionToBlockMutator_LabelNameSupplier0);
      
      boolean boolean0 = true;
      FunctionInjector functionInjector0 = new FunctionInjector((AbstractCompiler) compiler0, (Supplier<String>) functionToBlockMutator_LabelNameSupplier0, boolean0, boolean0, boolean0);
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertNotNull(functionInjector0);
      
      String string0 = null;
      JSModule jSModule0 = new JSModule(string0);
      assertEquals(-1, jSModule0.getDepth());
      assertNull(jSModule0.toString());
      assertNull(jSModule0.getName());
      assertNotNull(jSModule0);
      
      Node node0 = null;
      ArrayDeque<FunctionInjector.Reference> arrayDeque0 = new ArrayDeque<FunctionInjector.Reference>();
      assertEquals("[]", arrayDeque0.toString());
      assertEquals(0, arrayDeque0.size());
      assertEquals(true, arrayDeque0.isEmpty());
      assertNotNull(arrayDeque0);
      
      FunctionInjector.InliningMode functionInjector_InliningMode0 = FunctionInjector.InliningMode.BLOCK;
      FunctionInjector.Reference functionInjector_Reference0 = new FunctionInjector.Reference(node0, jSModule0, functionInjector_InliningMode0);
      assertEquals(-1, jSModule0.getDepth());
      assertNull(jSModule0.toString());
      assertNull(jSModule0.getName());
      assertNotNull(functionInjector_Reference0);
      
      boolean boolean1 = arrayDeque0.add(functionInjector_Reference0);
      assertEquals(-1, jSModule0.getDepth());
      assertNull(jSModule0.toString());
      assertNull(jSModule0.getName());
      assertEquals(1, arrayDeque0.size());
      assertEquals(false, arrayDeque0.isEmpty());
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      assertEquals(true, linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertEquals("[]", linkedHashSet0.toString());
      assertNotNull(linkedHashSet0);
      
      // Undeclared exception!
      try {
        boolean boolean2 = functionInjector0.inliningLowersCost(jSModule0, node0, arrayDeque0, linkedHashSet0, boolean0, boolean0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test3() {}
//   @Test
//   public void test3()  throws Throwable  {
//       Logger logger0 = Tracer.logger;
//       assertEquals("com.google.javascript.jscomp.Tracer", logger0.getName());
//       assertEquals(false, logger0.getUseParentHandlers());
//       assertNull(logger0.getResourceBundleName());
//       assertNotNull(logger0);
//       
//       LoggerErrorManager loggerErrorManager0 = new LoggerErrorManager(logger0);
//       assertEquals("com.google.javascript.jscomp.Tracer", logger0.getName());
//       assertEquals(false, logger0.getUseParentHandlers());
//       assertNull(logger0.getResourceBundleName());
//       assertEquals(0, loggerErrorManager0.getWarningCount());
//       assertEquals(0.0, loggerErrorManager0.getTypedPercent(), 0.01D);
//       assertEquals(0, loggerErrorManager0.getErrorCount());
//       assertNotNull(loggerErrorManager0);
//       
//       Compiler compiler0 = new Compiler((ErrorManager) loggerErrorManager0);
//       assertEquals(0, compiler0.getWarningCount());
//       assertEquals(0, compiler0.getErrorCount());
//       assertEquals(0.0, compiler0.getProgress(), 0.01D);
//       assertEquals("com.google.javascript.jscomp.Tracer", logger0.getName());
//       assertEquals(false, logger0.getUseParentHandlers());
//       assertNull(logger0.getResourceBundleName());
//       assertEquals(0, loggerErrorManager0.getWarningCount());
//       assertEquals(0.0, loggerErrorManager0.getTypedPercent(), 0.01D);
//       assertEquals(0, loggerErrorManager0.getErrorCount());
//       assertNotNull(compiler0);
//       
//       Supplier<String> supplier0 = compiler0.getUniqueNameIdSupplier();
//       assertEquals(0, compiler0.getWarningCount());
//       assertEquals(0, compiler0.getErrorCount());
//       assertEquals(0.0, compiler0.getProgress(), 0.01D);
//       assertEquals("com.google.javascript.jscomp.Tracer", logger0.getName());
//       assertEquals(false, logger0.getUseParentHandlers());
//       assertNull(logger0.getResourceBundleName());
//       assertEquals(0, loggerErrorManager0.getWarningCount());
//       assertEquals(0.0, loggerErrorManager0.getTypedPercent(), 0.01D);
//       assertEquals(0, loggerErrorManager0.getErrorCount());
//       assertNotNull(supplier0);
//       
//       FunctionToBlockMutator.LabelNameSupplier functionToBlockMutator_LabelNameSupplier0 = new FunctionToBlockMutator.LabelNameSupplier(supplier0);
//       assertEquals(0, compiler0.getWarningCount());
//       assertEquals(0, compiler0.getErrorCount());
//       assertEquals(0.0, compiler0.getProgress(), 0.01D);
//       assertEquals("com.google.javascript.jscomp.Tracer", logger0.getName());
//       assertEquals(false, logger0.getUseParentHandlers());
//       assertNull(logger0.getResourceBundleName());
//       assertEquals(0, loggerErrorManager0.getWarningCount());
//       assertEquals(0.0, loggerErrorManager0.getTypedPercent(), 0.01D);
//       assertEquals(0, loggerErrorManager0.getErrorCount());
//       assertNotNull(functionToBlockMutator_LabelNameSupplier0);
//       
//       boolean boolean0 = true;
//       FunctionInjector functionInjector0 = new FunctionInjector((AbstractCompiler) compiler0, (Supplier<String>) functionToBlockMutator_LabelNameSupplier0, boolean0, boolean0, boolean0);
//       assertEquals(0, compiler0.getWarningCount());
//       assertEquals(0, compiler0.getErrorCount());
//       assertEquals(0.0, compiler0.getProgress(), 0.01D);
//       assertEquals("com.google.javascript.jscomp.Tracer", logger0.getName());
//       assertEquals(false, logger0.getUseParentHandlers());
//       assertNull(logger0.getResourceBundleName());
//       assertEquals(0, loggerErrorManager0.getWarningCount());
//       assertEquals(0.0, loggerErrorManager0.getTypedPercent(), 0.01D);
//       assertEquals(0, loggerErrorManager0.getErrorCount());
//       assertNotNull(functionInjector0);
//       
//       int int0 = 24;
//       String string0 = "gS[H>Tty4D0=b";
//       Node node0 = Node.newString(int0, string0);
//       assertEquals(false, node0.isDelProp());
//       assertEquals(0, node0.getSideEffectFlags());
//       assertEquals(false, node0.isGetterDef());
//       assertEquals(false, node0.isNumber());
//       assertEquals(false, node0.isDefaultCase());
//       assertNull(node0.getSourceFileName());
//       assertEquals(false, node0.isAssign());
//       assertEquals(false, node0.isNew());
//       assertEquals(false, node0.isAssignAdd());
//       assertEquals(false, node0.isArrayLit());
//       assertEquals(false, node0.isThrow());
//       assertEquals(false, node0.isDec());
//       assertEquals(false, node0.isGetElem());
//       assertEquals(false, node0.isCall());
//       assertEquals(false, node0.isOr());
//       assertEquals(false, node0.isVar());
//       assertEquals(false, node0.isName());
//       assertEquals(false, node0.isCatch());
//       assertEquals(24, node0.getType());
//       assertEquals(false, node0.isDo());
//       assertEquals(false, node0.isLocalResultCall());
//       assertEquals(false, node0.isDebugger());
//       assertEquals(false, node0.isCase());
//       assertEquals(false, node0.isFunction());
//       assertEquals(false, node0.isIf());
//       assertEquals(false, node0.isString());
//       assertEquals(false, node0.isSwitch());
//       assertEquals(false, node0.isHook());
//       assertEquals(false, node0.isNoSideEffectsCall());
//       assertEquals(false, node0.isContinue());
//       assertEquals(false, node0.isBreak());
//       assertEquals(false, node0.isGetProp());
//       assertEquals(false, node0.isIn());
//       assertEquals(false, node0.isScript());
//       assertEquals(0, node0.getChangeTime());
//       assertEquals(0, node0.getChildCount());
//       assertEquals(false, node0.isThis());
//       assertEquals(false, node0.isComma());
//       assertEquals(false, node0.isLabel());
//       assertEquals(false, node0.isStringKey());
//       assertEquals(false, node0.hasMoreThanOneChild());
//       assertEquals(false, node0.isSyntheticBlock());
//       assertEquals(false, node0.isVarArgs());
//       assertEquals(false, node0.hasChildren());
//       assertEquals(false, node0.isOnlyModifiesArgumentsCall());
//       assertEquals(false, node0.isQuotedString());
//       assertEquals(false, node0.isRegExp());
//       assertEquals(false, node0.isWith());
//       assertEquals(false, node0.isInc());
//       assertEquals(false, node0.isInstanceOf());
//       assertEquals(false, node0.hasOneChild());
//       assertEquals(false, node0.isFor());
//       assertEquals(false, node0.isAdd());
//       assertEquals(false, node0.isNull());
//       assertEquals(false, node0.isOptionalArg());
//       assertEquals(-1, node0.getCharno());
//       assertEquals(false, node0.isBlock());
//       assertEquals(0, node0.getLength());
//       assertEquals(false, node0.wasEmptyNode());
//       assertEquals(false, node0.isParamList());
//       assertEquals(false, node0.isExprResult());
//       assertEquals(false, node0.isWhile());
//       assertEquals(false, node0.isNE());
//       assertEquals(false, node0.isReturn());
//       assertEquals(-1, node0.getLineno());
//       assertEquals(-1, node0.getSourcePosition());
//       assertEquals(false, node0.isFalse());
//       assertEquals(false, node0.isAnd());
//       assertEquals(true, node0.mayMutateArguments());
//       assertEquals(false, node0.isOnlyModifiesThisCall());
//       assertEquals(false, node0.isVoid());
//       assertEquals(false, node0.isTry());
//       assertEquals(false, node0.isTypeOf());
//       assertEquals(true, node0.mayMutateGlobalStateOrThrow());
//       assertEquals(false, node0.isFromExterns());
//       assertEquals(false, node0.isTrue());
//       assertEquals(false, node0.isCast());
//       assertEquals(false, node0.isSetterDef());
//       assertEquals(false, node0.isNot());
//       assertEquals(false, node0.isEmpty());
//       assertEquals(false, node0.isObjectLit());
//       assertEquals(false, node0.isLabelName());
//       assertNotNull(node0);
//       
//       SourceFile.Preloaded sourceFile_Preloaded0 = (SourceFile.Preloaded)SourceFile.fromCode(string0, string0);
//       assertEquals("gS[H>Tty4D0=b", sourceFile_Preloaded0.getName());
//       assertEquals("gS[H>Tty4D0=b", sourceFile_Preloaded0.getOriginalPath());
//       assertEquals(false, sourceFile_Preloaded0.isExtern());
//       assertEquals("gS[H>Tty4D0=b", sourceFile_Preloaded0.toString());
//       assertNotNull(sourceFile_Preloaded0);
//       
//       CompilerInput compilerInput0 = new CompilerInput((SourceFile) sourceFile_Preloaded0, boolean0);
//       assertEquals("gS[H>Tty4D0=b", compilerInput0.getName());
//       assertEquals(true, compilerInput0.isExtern());
//       assertEquals("gS[H>Tty4D0=b", compilerInput0.toString());
//       assertEquals("gS[H>Tty4D0=b", sourceFile_Preloaded0.getName());
//       assertEquals("gS[H>Tty4D0=b", sourceFile_Preloaded0.getOriginalPath());
//       assertEquals("gS[H>Tty4D0=b", sourceFile_Preloaded0.toString());
//       assertEquals(true, sourceFile_Preloaded0.isExtern());
//       assertNotNull(compilerInput0);
//       
//       JSModule jSModule0 = compilerInput0.getModule();
//       assertEquals("gS[H>Tty4D0=b", compilerInput0.getName());
//       assertEquals(true, compilerInput0.isExtern());
//       assertEquals("gS[H>Tty4D0=b", compilerInput0.toString());
//       assertEquals("gS[H>Tty4D0=b", sourceFile_Preloaded0.getName());
//       assertEquals("gS[H>Tty4D0=b", sourceFile_Preloaded0.getOriginalPath());
//       assertEquals("gS[H>Tty4D0=b", sourceFile_Preloaded0.toString());
//       assertEquals(true, sourceFile_Preloaded0.isExtern());
//       assertNull(jSModule0);
//       
//       Set<String> set0 = NameAnalyzer.DEFAULT_GLOBAL_NAMES;
//       assertEquals(false, set0.isEmpty());
//       assertEquals(2, set0.size());
//       assertNotNull(set0);
//       
//       Stack<FunctionInjector.Reference> stack0 = new Stack<FunctionInjector.Reference>();
//       assertEquals(0, stack0.size());
//       assertEquals(true, stack0.isEmpty());
//       assertEquals("[]", stack0.toString());
//       assertEquals(true, stack0.empty());
//       assertEquals(10, stack0.capacity());
//       assertNotNull(stack0);
//       
//       boolean boolean1 = functionInjector0.inliningLowersCost(jSModule0, node0, stack0, set0, boolean0, boolean0);
//       assertEquals(0, compiler0.getWarningCount());
//       assertEquals(0, compiler0.getErrorCount());
//       assertEquals(0.0, compiler0.getProgress(), 0.01D);
//       assertEquals("com.google.javascript.jscomp.Tracer", logger0.getName());
//       assertEquals(false, logger0.getUseParentHandlers());
//       assertNull(logger0.getResourceBundleName());
//       assertEquals("gS[H>Tty4D0=b", compilerInput0.getName());
//       assertEquals(true, compilerInput0.isExtern());
//       assertEquals("gS[H>Tty4D0=b", compilerInput0.toString());
//       assertEquals(false, node0.isDelProp());
//       assertEquals(0, node0.getSideEffectFlags());
//       assertEquals(false, node0.isGetterDef());
//       assertEquals(false, node0.isNumber());
//       assertEquals(false, node0.isDefaultCase());
//       assertNull(node0.getSourceFileName());
//       assertEquals(false, node0.isAssign());
//       assertEquals(false, node0.isNew());
//       assertEquals(false, node0.isAssignAdd());
//       assertEquals(false, node0.isArrayLit());
//       assertEquals(false, node0.isThrow());
//       assertEquals(false, node0.isDec());
//       assertEquals(false, node0.isGetElem());
//       assertEquals(false, node0.isCall());
//       assertEquals(false, node0.isOr());
//       assertEquals(false, node0.isVar());
//       assertEquals(false, node0.isName());
//       assertEquals(false, node0.isCatch());
//       assertEquals(24, node0.getType());
//       assertEquals(false, node0.isDo());
//       assertEquals(false, node0.isLocalResultCall());
//       assertEquals(false, node0.isDebugger());
//       assertEquals(false, node0.isCase());
//       assertEquals(false, node0.isFunction());
//       assertEquals(false, node0.isIf());
//       assertEquals(false, node0.isString());
//       assertEquals(false, node0.isSwitch());
//       assertEquals(false, node0.isHook());
//       assertEquals(false, node0.isNoSideEffectsCall());
//       assertEquals(false, node0.isContinue());
//       assertEquals(false, node0.isBreak());
//       assertEquals(false, node0.isGetProp());
//       assertEquals(false, node0.isIn());
//       assertEquals(false, node0.isScript());
//       assertEquals(0, node0.getChangeTime());
//       assertEquals(0, node0.getChildCount());
//       assertEquals(false, node0.isThis());
//       assertEquals(false, node0.isComma());
//       assertEquals(false, node0.isLabel());
//       assertEquals(false, node0.isStringKey());
//       assertEquals(false, node0.hasMoreThanOneChild());
//       assertEquals(false, node0.isSyntheticBlock());
//       assertEquals(false, node0.isVarArgs());
//       assertEquals(false, node0.hasChildren());
//       assertEquals(false, node0.isOnlyModifiesArgumentsCall());
//       assertEquals(false, node0.isQuotedString());
//       assertEquals(false, node0.isRegExp());
//       assertEquals(false, node0.isWith());
//       assertEquals(false, node0.isInc());
//       assertEquals(false, node0.isInstanceOf());
//       assertEquals(false, node0.hasOneChild());
//       assertEquals(false, node0.isFor());
//       assertEquals(false, node0.isAdd());
//       assertEquals(false, node0.isNull());
//       assertEquals(false, node0.isOptionalArg());
//       assertEquals(-1, node0.getCharno());
//       assertEquals(false, node0.isBlock());
//       assertEquals(0, node0.getLength());
//       assertEquals(false, node0.wasEmptyNode());
//       assertEquals(false, node0.isParamList());
//       assertEquals(false, node0.isExprResult());
//       assertEquals(false, node0.isWhile());
//       assertEquals(false, node0.isNE());
//       assertEquals(false, node0.isReturn());
//       assertEquals(-1, node0.getLineno());
//       assertEquals(-1, node0.getSourcePosition());
//       assertEquals(false, node0.isFalse());
//       assertEquals(false, node0.isAnd());
//       assertEquals(true, node0.mayMutateArguments());
//       assertEquals(false, node0.isOnlyModifiesThisCall());
//       assertEquals(false, node0.isVoid());
//       assertEquals(false, node0.isTry());
//       assertEquals(false, node0.isTypeOf());
//       assertEquals(true, node0.mayMutateGlobalStateOrThrow());
//       assertEquals(false, node0.isFromExterns());
//       assertEquals(false, node0.isTrue());
//       assertEquals(false, node0.isCast());
//       assertEquals(false, node0.isSetterDef());
//       assertEquals(false, node0.isNot());
//       assertEquals(false, node0.isEmpty());
//       assertEquals(false, node0.isObjectLit());
//       assertEquals(false, node0.isLabelName());
//       assertEquals(0, loggerErrorManager0.getWarningCount());
//       assertEquals(0.0, loggerErrorManager0.getTypedPercent(), 0.01D);
//       assertEquals(0, loggerErrorManager0.getErrorCount());
//       assertEquals("gS[H>Tty4D0=b", sourceFile_Preloaded0.getName());
//       assertEquals("gS[H>Tty4D0=b", sourceFile_Preloaded0.getOriginalPath());
//       assertEquals("gS[H>Tty4D0=b", sourceFile_Preloaded0.toString());
//       assertEquals(true, sourceFile_Preloaded0.isExtern());
//       assertEquals(0, stack0.size());
//       assertEquals(true, stack0.isEmpty());
//       assertEquals("[]", stack0.toString());
//       assertEquals(true, stack0.empty());
//       assertEquals(10, stack0.capacity());
//       assertEquals(false, set0.isEmpty());
//       assertEquals(2, set0.size());
//       assertTrue(boolean1);
//       assertTrue(boolean0 == boolean1);
//       assertTrue(boolean1 == boolean0);
//   }

  @Test
  public void test4()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertNotNull(compiler0);
      
      Supplier<String> supplier0 = compiler0.getUniqueNameIdSupplier();
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertNotNull(supplier0);
      
      FunctionToBlockMutator.LabelNameSupplier functionToBlockMutator_LabelNameSupplier0 = new FunctionToBlockMutator.LabelNameSupplier(supplier0);
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertNotNull(functionToBlockMutator_LabelNameSupplier0);
      
      boolean boolean0 = false;
      FunctionInjector functionInjector0 = new FunctionInjector((AbstractCompiler) compiler0, (Supplier<String>) functionToBlockMutator_LabelNameSupplier0, boolean0, boolean0, boolean0);
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertNotNull(functionInjector0);
      
      String string0 = null;
      JSModule jSModule0 = new JSModule(string0);
      assertEquals(-1, jSModule0.getDepth());
      assertNull(jSModule0.getName());
      assertNull(jSModule0.toString());
      assertNotNull(jSModule0);
      
      Node node0 = null;
      ArrayDeque<FunctionInjector.Reference> arrayDeque0 = new ArrayDeque<FunctionInjector.Reference>();
      assertEquals("[]", arrayDeque0.toString());
      assertEquals(true, arrayDeque0.isEmpty());
      assertEquals(0, arrayDeque0.size());
      assertNotNull(arrayDeque0);
      
      FunctionInjector.InliningMode functionInjector_InliningMode0 = FunctionInjector.InliningMode.BLOCK;
      FunctionInjector.Reference functionInjector_Reference0 = new FunctionInjector.Reference(node0, jSModule0, functionInjector_InliningMode0);
      assertEquals(-1, jSModule0.getDepth());
      assertNull(jSModule0.getName());
      assertNull(jSModule0.toString());
      assertNotNull(functionInjector_Reference0);
      
      boolean boolean1 = arrayDeque0.add(functionInjector_Reference0);
      assertEquals(false, arrayDeque0.isEmpty());
      assertEquals(1, arrayDeque0.size());
      assertEquals(-1, jSModule0.getDepth());
      assertNull(jSModule0.getName());
      assertNull(jSModule0.toString());
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      assertEquals(0, linkedHashSet0.size());
      assertEquals("[]", linkedHashSet0.toString());
      assertEquals(true, linkedHashSet0.isEmpty());
      assertNotNull(linkedHashSet0);
      
      // Undeclared exception!
      try {
        boolean boolean2 = functionInjector0.inliningLowersCost(jSModule0, node0, arrayDeque0, linkedHashSet0, boolean0, boolean0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test5()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertNotNull(compiler0);
      
      AbstractCompiler.LifeCycleStage abstractCompiler_LifeCycleStage0 = AbstractCompiler.LifeCycleStage.NORMALIZED_OBFUSCATED;
      compiler0.setLifeCycleStage(abstractCompiler_LifeCycleStage0);
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      
      Supplier<String> supplier0 = compiler0.getUniqueNameIdSupplier();
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertNotNull(supplier0);
      
      boolean boolean0 = true;
      FunctionInjector functionInjector0 = new FunctionInjector((AbstractCompiler) compiler0, supplier0, boolean0, boolean0, boolean0);
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertNotNull(functionInjector0);
      
      Node node0 = compiler0.getRoot();
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertNull(node0);
      
      String string0 = null;
      FunctionInjector.InliningMode functionInjector_InliningMode0 = FunctionInjector.InliningMode.DIRECT;
      // Undeclared exception!
      try {
        Node node1 = functionInjector0.inline(node0, string0, node0, functionInjector_InliningMode0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test6()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertNotNull(compiler0);
      
      AbstractCompiler.LifeCycleStage abstractCompiler_LifeCycleStage0 = AbstractCompiler.LifeCycleStage.NORMALIZED_OBFUSCATED;
      compiler0.setLifeCycleStage(abstractCompiler_LifeCycleStage0);
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      
      Supplier<String> supplier0 = compiler0.getUniqueNameIdSupplier();
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertNotNull(supplier0);
      
      boolean boolean0 = true;
      FunctionInjector functionInjector0 = new FunctionInjector((AbstractCompiler) compiler0, supplier0, boolean0, boolean0, boolean0);
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertNotNull(functionInjector0);
      
      Node node0 = compiler0.getRoot();
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertNull(node0);
      
      String string0 = "";
      FunctionInjector.InliningMode functionInjector_InliningMode0 = FunctionInjector.InliningMode.BLOCK;
      // Undeclared exception!
      try {
        Node node1 = functionInjector0.inline(node0, string0, node0, functionInjector_InliningMode0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test7()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertNotNull(compiler0);
      
      boolean boolean0 = false;
      Supplier<String> supplier0 = compiler0.getUniqueNameIdSupplier();
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertNotNull(supplier0);
      
      FunctionInjector functionInjector0 = new FunctionInjector((AbstractCompiler) compiler0, supplier0, boolean0, boolean0, boolean0);
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertNotNull(functionInjector0);
      
      String string0 = "unexpected";
      SourceFile.Preloaded sourceFile_Preloaded0 = (SourceFile.Preloaded)SourceFile.fromCode(string0, string0, string0);
      assertEquals(false, sourceFile_Preloaded0.isExtern());
      assertEquals("unexpected", sourceFile_Preloaded0.toString());
      assertEquals("unexpected", sourceFile_Preloaded0.getName());
      assertEquals("unexpected", sourceFile_Preloaded0.getOriginalPath());
      assertNotNull(sourceFile_Preloaded0);
      
      Node node0 = compiler0.parse((SourceFile) sourceFile_Preloaded0);
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isIf());
      assertEquals(true, node0.isSyntheticBlock());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isNew());
      assertEquals(true, node0.isScript());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isVarArgs());
      assertEquals(1, node0.getLineno());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isName());
      assertEquals(132, node0.getType());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isGetterDef());
      assertEquals(true, node0.mayMutateGlobalStateOrThrow());
      assertEquals(4096, node0.getSourcePosition());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isContinue());
      assertEquals(true, node0.hasChildren());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(0, node0.getChangeTime());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isFunction());
      assertEquals(1, node0.getChildCount());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isCase());
      assertEquals(0, node0.getCharno());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isRegExp());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isString());
      assertEquals(false, node0.isOnlyModifiesArgumentsCall());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isWith());
      assertEquals("unexpected", node0.getSourceFileName());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(true, node0.mayMutateArguments());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isCast());
      assertEquals(false, node0.isStringKey());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isCatch());
      assertEquals(true, node0.hasOneChild());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isFor());
      assertEquals(false, sourceFile_Preloaded0.isExtern());
      assertEquals("unexpected", sourceFile_Preloaded0.toString());
      assertEquals("unexpected", sourceFile_Preloaded0.getName());
      assertEquals("unexpected", sourceFile_Preloaded0.getOriginalPath());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertNotNull(node0);
      
      // Undeclared exception!
      try {
        functionInjector0.maybePrepareCall(node0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
}
