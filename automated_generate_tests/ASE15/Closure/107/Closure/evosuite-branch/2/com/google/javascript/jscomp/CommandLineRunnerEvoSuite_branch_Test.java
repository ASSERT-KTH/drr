/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 20:28:29 GMT 2014
 */

package com.google.javascript.jscomp;

import static org.junit.Assert.*; import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.junit.Test;
import com.google.javascript.jscomp.CheckEventfulObjectDisposal;
import com.google.javascript.jscomp.CommandLineRunner;
import com.google.javascript.jscomp.Compiler;
import com.google.javascript.jscomp.CompilerOptions;
import java.io.File;



import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.lang.MockNullPointerException;
import org.junit.runner.RunWith;


public class CommandLineRunnerEvoSuite_branch_Test  {

  @Test
  public void test0()  throws Throwable  {
      String[] stringArray0 = new String[1];
      String string0 = "";
      stringArray0[0] = string0;
      assertNotNull(stringArray0[0]);
      
      CommandLineRunner commandLineRunner0 = new CommandLineRunner(stringArray0);
      assertEquals(true, commandLineRunner0.shouldRunCompiler());
      assertNotNull(commandLineRunner0);
      
      // Undeclared exception!
      try {
        int int0 = commandLineRunner0.doRun();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test1()  throws Throwable  {
      String[] stringArray0 = new String[1];
      String string0 = "Rln6NAMb";
      stringArray0[0] = string0;
      assertNotNull(stringArray0[0]);
      
      CommandLineRunner commandLineRunner0 = new CommandLineRunner(stringArray0);
      assertEquals(true, commandLineRunner0.shouldRunCompiler());
      assertNotNull(commandLineRunner0);
      
      CompilerOptions compilerOptions0 = commandLineRunner0.createOptions();
      assertFalse(compilerOptions0.instrumentForCoverage);
      assertTrue(compilerOptions0.inlineLocalFunctions);
      assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
      assertTrue(compilerOptions0.convertToDottedProperties);
      assertTrue(compilerOptions0.deadAssignmentElimination);
      assertTrue(compilerOptions0.flowSensitiveInlineVariables);
      assertFalse(compilerOptions0.smartNameRemoval);
      assertFalse(compilerOptions0.generatePseudoNames);
      assertTrue(compilerOptions0.removeUnusedLocalVars);
      assertFalse(compilerOptions0.inlineConstantVars);
      assertTrue(compilerOptions0.checkSuspiciousCode);
      assertTrue(compilerOptions0.removeDeadCode);
      assertTrue(compilerOptions0.coalesceVariableNames);
      assertFalse(compilerOptions0.devirtualizePrototypeMethods);
      assertFalse(compilerOptions0.aliasExternals);
      assertFalse(compilerOptions0.recordFunctionInformation);
      assertFalse(compilerOptions0.lineBreak);
      assertFalse(compilerOptions0.optimizeParameters);
      assertFalse(compilerOptions0.removeTryCatchFinally);
      assertFalse(compilerOptions0.aliasAllStrings);
      assertFalse(compilerOptions0.prettyPrint);
      assertFalse(compilerOptions0.inlineGetters);
      assertFalse(compilerOptions0.checkSymbols);
      assertFalse(compilerOptions0.markNoSideEffectCalls);
      assertFalse(compilerOptions0.aliasKeywords);
      assertFalse(compilerOptions0.preserveGoogRequires);
      assertTrue(compilerOptions0.collapseVariableDeclarations);
      assertFalse(compilerOptions0.checkTypes);
      assertFalse(compilerOptions0.preferLineBreakAtEndOfFile);
      assertFalse(compilerOptions0.inlineFunctions);
      assertFalse(compilerOptions0.removeUnusedClassProperties);
      assertTrue(compilerOptions0.foldConstants);
      assertFalse(compilerOptions0.reserveRawExports);
      assertFalse(compilerOptions0.rewriteFunctionExpressions);
      assertFalse(compilerOptions0.ideMode);
      assertFalse(compilerOptions0.inlineVariables);
      assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
      assertFalse(compilerOptions0.disambiguateProperties);
      assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
      assertFalse(compilerOptions0.optimizeReturns);
      assertFalse(compilerOptions0.collapseAnonymousFunctions);
      assertTrue(compilerOptions0.optimizeArgumentsArray);
      assertFalse(compilerOptions0.crossModuleCodeMotion);
      assertFalse(compilerOptions0.gatherCssNames);
      assertFalse(compilerOptions0.crossModuleMethodMotion);
      assertFalse(compilerOptions0.moveFunctionDeclarations);
      assertFalse(compilerOptions0.optimizeCalls);
      assertFalse(compilerOptions0.removeUnusedVars);
      assertTrue(compilerOptions0.checkControlStructures);
      assertFalse(compilerOptions0.ambiguateProperties);
      assertFalse(compilerOptions0.markAsCompiled);
      assertFalse(compilerOptions0.collapseProperties);
      assertTrue(compilerOptions0.labelRenaming);
      assertTrue(compilerOptions0.closurePass);
      assertFalse(compilerOptions0.exportTestFunctions);
      assertFalse(compilerOptions0.generateExports);
      assertFalse(compilerOptions0.computeFunctionSideEffects);
      assertFalse(compilerOptions0.printInputDelimiter);
      assertFalse(compilerOptions0.jqueryPass);
      assertEquals(true, commandLineRunner0.shouldRunCompiler());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compilerOptions0.getLanguageIn());
      assertEquals(false, compilerOptions0.assumeClosuresOnlyCaptureReferences());
      assertEquals(CheckEventfulObjectDisposal.DisposalCheckingPolicy.OFF, compilerOptions0.getCheckEventfulObjectDisposalPolicy());
      assertEquals(false, compilerOptions0.getCheckDeterminism());
      assertEquals(CompilerOptions.TweakProcessing.OFF, compilerOptions0.getTweakProcessing());
      assertEquals(false, compilerOptions0.isRemoveUnusedClassProperties());
      assertEquals(false, compilerOptions0.getInferTypes());
      assertEquals(CompilerOptions.TracerMode.OFF, compilerOptions0.getTracerMode());
      assertEquals(false, compilerOptions0.assumeStrictThis());
      assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
      assertEquals(false, compilerOptions0.isDisambiguatePrivateProperties());
      assertEquals(false, compilerOptions0.getInstrumentMemoryAllocations());
      assertEquals(false, compilerOptions0.isExternExportsEnabled());
      assertNull(compilerOptions0.getLanguageOut());
      assertNotNull(compilerOptions0);
  }

  @Test
  public void test2()  throws Throwable  {
      String[] stringArray0 = new String[7];
      String string0 = "t!y";
      stringArray0[0] = string0;
      assertNotNull(stringArray0[0]);
      
      stringArray0[1] = stringArray0[0];
      assertNotNull(stringArray0[1]);
      
      stringArray0[2] = string0;
      assertNotNull(stringArray0[2]);
      
      stringArray0[3] = stringArray0[0];
      assertNotNull(stringArray0[3]);
      
      stringArray0[4] = stringArray0[2];
      assertNotNull(stringArray0[4]);
      
      stringArray0[5] = stringArray0[3];
      assertNotNull(stringArray0[5]);
      
      String string1 = "-|5jzm";
      assertNotSame(string1, string0);
      
      stringArray0[6] = string1;
      assertNotNull(stringArray0[6]);
      
      MockFile mockFile0 = new MockFile(stringArray0[2]);
      assertNotNull(mockFile0);
      
      MockPrintStream mockPrintStream0 = new MockPrintStream((File) mockFile0);
      assertNotNull(mockPrintStream0);
      
      CommandLineRunner commandLineRunner0 = new CommandLineRunner(stringArray0, mockPrintStream0, mockPrintStream0);
      assertEquals(false, commandLineRunner0.shouldRunCompiler());
      assertNotNull(commandLineRunner0);
  }

  @Test
  public void test3()  throws Throwable  {
      String[] stringArray0 = new String[1];
      String string0 = "invalidYc(>ment target";
      stringArray0[0] = string0;
      assertNotNull(stringArray0[0]);
      
      CommandLineRunner commandLineRunner0 = new CommandLineRunner(stringArray0);
      assertEquals(true, commandLineRunner0.shouldRunCompiler());
      assertNotNull(commandLineRunner0);
      
      Compiler compiler0 = commandLineRunner0.createCompiler();
      assertEquals(true, commandLineRunner0.shouldRunCompiler());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertNotNull(compiler0);
  }

  @Test
  public void test4()  throws Throwable  {
      String[] stringArray0 = new String[3];
      String string0 = ".o";
      stringArray0[0] = string0;
      assertNotNull(stringArray0[0]);
      
      stringArray0[1] = stringArray0[0];
      assertNotNull(stringArray0[1]);
      
      stringArray0[2] = stringArray0[1];
      assertNotNull(stringArray0[2]);
      
      CommandLineRunner commandLineRunner0 = new CommandLineRunner(stringArray0);
      assertEquals(true, commandLineRunner0.shouldRunCompiler());
      assertNotNull(commandLineRunner0);
      
      boolean boolean0 = commandLineRunner0.shouldRunCompiler();
      assertTrue(boolean0);
      assertEquals(true, commandLineRunner0.shouldRunCompiler());
  }
}
