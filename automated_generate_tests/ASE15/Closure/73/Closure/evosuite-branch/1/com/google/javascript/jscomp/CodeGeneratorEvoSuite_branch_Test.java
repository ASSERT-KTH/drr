/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 21:41:35 GMT 2014
 */

package com.google.javascript.jscomp;

import static org.junit.Assert.*; import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.junit.Test;
import com.google.javascript.jscomp.CodeGenerator;
import java.nio.charset.Charset;
import java.nio.charset.CharsetEncoder;



import org.junit.runner.RunWith;


public class CodeGeneratorEvoSuite_branch_Test  {

  @Test
  public void test00()  throws Throwable  {
      String string0 = "while(";
      String string1 = CodeGenerator.identifierEscape(string0);
      assertEquals("while(", string1);
      assertNotNull(string1);
      assertSame(string1, string0);
      assertSame(string0, string1);
  }

  @Test
  public void test01()  throws Throwable  {
      String string0 = "E_DOUBLE\u0010\u0001\u0012\u000E\n\nTYPE_FLOAT\u0010\u0002\u0012\u000E\n\nTYPE_INT64\u0010\u0003\u0012\u000F\n\u000BTYPE_UINT64\u0010\u0004\u0012\u000E\nTYPE_INT32\u0010\u0005\u0012\u0010\n\fTYPE_FIXED64\u0010\u0006\u0012\u0010\n\fTYPE_FIXED32\u0010\u0007\u0012\r\n\tTYPE_BOOL\u0010\b\u0012\u000F\n\u000BTYPE_STRING\u0010\t\u0012\u000E\n\nTYPE_GROUP\u0010\n\u0012\u0010\n\fTYPE_MESSAGE\u0010\u000B\u0012\u000E\n\nTYPE_BYTES\u0010\f\u0012\u000F\n\u000BTYPE_UINT32\u0010\r\u0012\r\n\tTYPE_ENUM\u0010\u000E\u0012\u0011\n\rTYPE_SFIXED32\u0010\u000F\u0012\u0011\n\rTYPE_SFIXED64\u0010\u0010\u0012\u000F\n\u000BTYPE_SINT32\u0010\u0011\u0012\u000F\n\u000BTYPE_SINT64\u0010A\"C\n\u0005Label\u0012\u0012\n\u000ELABEL_OPTIONAL\u0010\u0001\u0012\u0012\n\u000ELABEL_REQUIRED\u0010\u0002\u0012\u0012\n\u000ELABEL_REPEATED\u0010\u0003\"\u008C\u0001\n\u0013EnumDescriptorProto\u0012\f\n\u0004name\u0018\u0001";
      String string1 = CodeGenerator.identifierEscape(string0);
      assertEquals("E_DOUBLE\\u0010\\u0001\\u0012\\u000e\\u000a\\u000aTYPE_FLOAT\\u0010\\u0002\\u0012\\u000e\\u000a\\u000aTYPE_INT64\\u0010\\u0003\\u0012\\u000f\\u000a\\u000bTYPE_UINT64\\u0010\\u0004\\u0012\\u000e\\u000aTYPE_INT32\\u0010\\u0005\\u0012\\u0010\\u000a\\u000cTYPE_FIXED64\\u0010\\u0006\\u0012\\u0010\\u000a\\u000cTYPE_FIXED32\\u0010\\u0007\\u0012\\u000d\\u000a\\u0009TYPE_BOOL\\u0010\\u0008\\u0012\\u000f\\u000a\\u000bTYPE_STRING\\u0010\\u0009\\u0012\\u000e\\u000a\\u000aTYPE_GROUP\\u0010\\u000a\\u0012\\u0010\\u000a\\u000cTYPE_MESSAGE\\u0010\\u000b\\u0012\\u000e\\u000a\\u000aTYPE_BYTES\\u0010\\u000c\\u0012\\u000f\\u000a\\u000bTYPE_UINT32\\u0010\\u000d\\u0012\\u000d\\u000a\\u0009TYPE_ENUM\\u0010\\u000e\\u0012\\u0011\\u000a\\u000dTYPE_SFIXED32\\u0010\\u000f\\u0012\\u0011\\u000a\\u000dTYPE_SFIXED64\\u0010\\u0010\\u0012\\u000f\\u000a\\u000bTYPE_SINT32\\u0010\\u0011\\u0012\\u000f\\u000a\\u000bTYPE_SINT64\\u0010A\"C\\u000a\\u0005Label\\u0012\\u0012\\u000a\\u000eLABEL_OPTIONAL\\u0010\\u0001\\u0012\\u0012\\u000a\\u000eLABEL_REQUIRED\\u0010\\u0002\\u0012\\u0012\\u000a\\u000eLABEL_REPEATED\\u0010\\u0003\"\\u008c\\u0001\\u000a\\u0013EnumDescriptorProto\\u0012\\u000c\\u000a\\u0004name\\u0018\\u0001", string1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
  }

  @Test
  public void test02()  throws Throwable  {
      String string0 = "7*wjIi2T]]>4!";
      String string1 = CodeGenerator.regexpEscape(string0);
      assertEquals("/7*wjIi2T]]\\>4!/", string1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
  }

  @Test
  public void test03()  throws Throwable  {
      String string0 = "@<+!->NNz\"(]";
      String string1 = CodeGenerator.regexpEscape(string0);
      assertEquals("/@<+!->NNz\"(]/", string1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
  }

  @Test
  public void test04()  throws Throwable  {
      String string0 = "@<!-->CX>X6(]";
      String string1 = CodeGenerator.regexpEscape(string0);
      assertEquals("/@<\\!--\\>CX>X6(]/", string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertNotNull(string1);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
  }

  @Test
  public void test05()  throws Throwable  {
      String string0 = "VO\\]>Hq";
      String string1 = CodeGenerator.regexpEscape(string0);
      assertEquals("/VO\\]>Hq/", string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertNotNull(string1);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
  }

  @Test
  public void test06()  throws Throwable  {
      String string0 = "E_DOUBLE\u0010\u0001\u0012\u000E\n\nTYPE_FLOAT\u0010\u0002\u0012\u000E\n\nTYPE_INT64\u0010\u0003\u0012\u000F\n\u000BTYPE_UINT64\u0010\u0004\u0012\u000E\nTYPE_INT32\u0010\u0005\u0012\u0010\n\fTYPE_FIXED64\u0010\u0006\u0012\u0010\n\fTYPE_FIXED32\u0010\u0007\u0012\r\n\tTYPE_BOOL\u0010\b\u0012\u000F\n\u000BTYPE_STRING\u0010\t\u0012\u000E\n\nTYPE_GROUP\u0010\n\u0012\u0010\n\fTYPE_MESSAGE\u0010\u000B\u0012\u000E\n\nTYPE_BYTES\u0010\f\u0012\u000F\n\u000BTYPE_UINT32\u0010\r\u0012\r\n\tTYPE_ENUM\u0010\u000E\u0012\u0011\n\rTYPE_SFIXED32\u0010\u000F\u0012\u0011\n\rTYPE_SFIXED64\u0010\u0010\u0012\u000F\n\u000BTYPE_SINT32\u0010\u0011\u0012\u000F\n\u000BTYPE_SINT64\u0010A\"C\n\u0005Label\u0012\u0012\n\u000ELABEL_OPTIONAL\u0010\u0001\u0012\u0012\n\u000ELABEL_REQUIRED\u0010\u0002\u0012\u0012\n\u000ELABEL_REPEATED\u0010\u0003\"\u008C\u0001\n\u0013EnumDescriptorProto\u0012\f\n\u0004name\u0018\u0001";
      String string1 = CodeGenerator.regexpEscape(string0);
      assertEquals("/E_DOUBLE\\u0010\\u0001\\u0012\\u000e\\n\\nTYPE_FLOAT\\u0010\\u0002\\u0012\\u000e\\n\\nTYPE_INT64\\u0010\\u0003\\u0012\\u000f\\n\\u000bTYPE_UINT64\\u0010\\u0004\\u0012\\u000e\\nTYPE_INT32\\u0010\\u0005\\u0012\\u0010\\n\\u000cTYPE_FIXED64\\u0010\\u0006\\u0012\\u0010\\n\\u000cTYPE_FIXED32\\u0010\\u0007\\u0012\\r\\n\\tTYPE_BOOL\\u0010\\u0008\\u0012\\u000f\\n\\u000bTYPE_STRING\\u0010\\t\\u0012\\u000e\\n\\nTYPE_GROUP\\u0010\\n\\u0012\\u0010\\n\\u000cTYPE_MESSAGE\\u0010\\u000b\\u0012\\u000e\\n\\nTYPE_BYTES\\u0010\\u000c\\u0012\\u000f\\n\\u000bTYPE_UINT32\\u0010\\r\\u0012\\r\\n\\tTYPE_ENUM\\u0010\\u000e\\u0012\\u0011\\n\\rTYPE_SFIXED32\\u0010\\u000f\\u0012\\u0011\\n\\rTYPE_SFIXED64\\u0010\\u0010\\u0012\\u000f\\n\\u000bTYPE_SINT32\\u0010\\u0011\\u0012\\u000f\\n\\u000bTYPE_SINT64\\u0010A\"C\\n\\u0005Label\\u0012\\u0012\\n\\u000eLABEL_OPTIONAL\\u0010\\u0001\\u0012\\u0012\\n\\u000eLABEL_REQUIRED\\u0010\\u0002\\u0012\\u0012\\n\\u000eLABEL_REPEATED\\u0010\\u0003\"\\u008c\\u0001\\n\\u0013EnumDescriptorProto\\u0012\\u000c\\n\\u0004name\\u0018\\u0001/", string1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
  }

  @Test
  public void test07()  throws Throwable  {
      String string0 = "+[EB'%ABk)M";
      Charset charset0 = Charset.defaultCharset();
      assertEquals("UTF-8", charset0.name());
      assertEquals("UTF-8", charset0.toString());
      assertEquals("UTF-8", charset0.displayName());
      assertEquals(true, charset0.isRegistered());
      assertEquals(true, charset0.canEncode());
      assertNotNull(charset0);
      
      CharsetEncoder charsetEncoder0 = charset0.newEncoder();
      assertEquals(3.0F, charsetEncoder0.maxBytesPerChar(), 0.01F);
      assertEquals(1.1F, charsetEncoder0.averageBytesPerChar(), 0.01F);
      assertEquals("UTF-8", charset0.name());
      assertEquals("UTF-8", charset0.toString());
      assertEquals("UTF-8", charset0.displayName());
      assertEquals(true, charset0.isRegistered());
      assertEquals(true, charset0.canEncode());
      assertNotNull(charsetEncoder0);
      
      String string1 = CodeGenerator.jsString(string0, charsetEncoder0);
      assertEquals("\"+[EB'%ABk)M\"", string1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertEquals(3.0F, charsetEncoder0.maxBytesPerChar(), 0.01F);
      assertEquals(1.1F, charsetEncoder0.averageBytesPerChar(), 0.01F);
      assertEquals("UTF-8", charset0.name());
      assertEquals("UTF-8", charset0.toString());
      assertEquals("UTF-8", charset0.displayName());
      assertEquals(true, charset0.isRegistered());
      assertEquals(true, charset0.canEncode());
      assertNotNull(string1);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
  }

  @Test
  public void test08()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      assertEquals("UTF-8", charset0.toString());
      assertEquals("UTF-8", charset0.name());
      assertEquals("UTF-8", charset0.displayName());
      assertEquals(true, charset0.isRegistered());
      assertEquals(true, charset0.canEncode());
      assertNotNull(charset0);
      
      CharsetEncoder charsetEncoder0 = charset0.newEncoder();
      assertEquals("UTF-8", charset0.toString());
      assertEquals("UTF-8", charset0.name());
      assertEquals("UTF-8", charset0.displayName());
      assertEquals(true, charset0.isRegistered());
      assertEquals(true, charset0.canEncode());
      assertEquals(1.1F, charsetEncoder0.averageBytesPerChar(), 0.01F);
      assertEquals(3.0F, charsetEncoder0.maxBytesPerChar(), 0.01F);
      assertNotNull(charsetEncoder0);
      
      String string0 = "@+<!--\">NyNX>X(\"]";
      String string1 = CodeGenerator.jsString(string0, charsetEncoder0);
      assertEquals("'@+<\\!--\">NyNX>X(\"]'", string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertEquals("UTF-8", charset0.toString());
      assertEquals("UTF-8", charset0.name());
      assertEquals("UTF-8", charset0.displayName());
      assertEquals(true, charset0.isRegistered());
      assertEquals(true, charset0.canEncode());
      assertEquals(1.1F, charsetEncoder0.averageBytesPerChar(), 0.01F);
      assertEquals(3.0F, charsetEncoder0.maxBytesPerChar(), 0.01F);
      assertNotNull(string1);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
  }

  @Test
  public void test09()  throws Throwable  {
      String string0 = "|";
      double double0 = CodeGenerator.getSimpleNumber(string0);
      assertEquals(Double.NaN, double0, 0.01D);
  }

  @Test
  public void test10()  throws Throwable  {
      String string0 = "5";
      double double0 = CodeGenerator.getSimpleNumber(string0);
      assertEquals(5.0, double0, 0.01D);
  }

  @Test
  public void test11()  throws Throwable  {
      String string0 = "!-";
      boolean boolean0 = CodeGenerator.isSimpleNumber(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test12()  throws Throwable  {
      String string0 = "";
      boolean boolean0 = CodeGenerator.isSimpleNumber(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test13()  throws Throwable  {
      String string0 = "!q2c5f-eu}</script";
      String string1 = CodeGenerator.escapeToDoubleQuotedJsString(string0);
      assertEquals("\"!q2c5f-eu}<\\/script\"", string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertNotNull(string1);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
  }

  @Test
  public void test14()  throws Throwable  {
      String string0 = ">lHan}JO7^~W";
      String string1 = CodeGenerator.regexpEscape(string0);
      assertEquals("/>lHan\\u007f}JO7\\u007f^~W/", string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertNotNull(string1);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
  }
}
