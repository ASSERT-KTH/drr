/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 21:52:10 GMT 2014
 */

package com.google.javascript.jscomp;

import static org.junit.Assert.*;
import org.junit.Test;
import com.google.javascript.jscomp.CodeGenerator;
import com.google.javascript.jscomp.SourceFile;
import java.nio.charset.Charset;
import java.nio.charset.CharsetEncoder;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;

import org.evosuite.runtime.mock.java.io.MockFile;
import org.junit.runner.RunWith;


public class CodeGeneratorEvoSuite_branch_Test  {

  @Test
  public void test00()  throws Throwable  {
      String string0 = "oVwX:2*";
      String string1 = CodeGenerator.identifierEscape(string0);
      assertEquals("oVwX:2*", string1);
      assertSame(string0, string1);
      assertSame(string1, string0);
      assertNotNull(string1);
  }

  @Test
  public void test01()  throws Throwable  {
      String string0 = "\n\u0013funtion_info.pro<o\u0012\u0006jscowp\"\u00BF\u0002\n\u0016FsnctionInfratiqnWap\u00123\n\u0005ntry\u0018\u0001 \u0003(\n2$.jscomp.FunctionInformationMap.Entry\u0012H\nmodule\u0018e \u0003(\n27.jscomp.FunctionInformationMap.Module\u001A\u0087\u0001\n\u0005Entry\u0012\n\n\u0002id\u0018\u0002 (\u0005\u0012\u0013\nsource_name\u0018^ \u0002\u0012\u0013\n\u000Bline_number\u0018\u0004 \u0002(\u0005\u0012\u0013\n\u000Bmodule_bae\u0018\u0005 \u0002(\t\u0012\f\n\u0004size\u0018\u0006 \u0002(\u0005\u0012\f\n\u0004nam_\u0018\u0007n\u0002(\t\u0012\u0017\n\u000Fcompiled_source\u0018\b \u0002(\t\u001A/\n\u0006Modwle\u0012\f\n\u0004name\u0018f \u0002(\t\u0012\u0017\n\u000Fcompiled_source\u0018g \u0002(\tB \n8com.google.javascript.jscompP";
      String string1 = CodeGenerator.identifierEscape(string0);
      assertEquals("\\u000a\\u0013funtion_info.pro<o\\u0012\\u0006jscowp\"\\u00bf\\u0002\\u000a\\u0016FsnctionInfratiqnWap\\u00123\\u000a\\u0005ntry\\u0018\\u0001 \\u0003(\\u000a2$.jscomp.FunctionInformationMap.Entry\\u0012H\\u000amodule\\u0018e \\u0003(\\u000a27.jscomp.FunctionInformationMap.Module\\u001a\\u0087\\u0001\\u000a\\u0005Entry\\u0012\\u000a\\u000a\\u0002id\\u0018\\u0002 (\\u0005\\u0012\\u0013\\u000asource_name\\u0018^ \\u0002\\u0012\\u0013\\u000a\\u000bline_number\\u0018\\u0004 \\u0002(\\u0005\\u0012\\u0013\\u000a\\u000bmodule_bae\\u0018\\u0005 \\u0002(\\u0009\\u0012\\u000c\\u000a\\u0004size\\u0018\\u0006 \\u0002(\\u0005\\u0012\\u000c\\u000a\\u0004nam_\\u0018\\u0007n\\u0002(\\u0009\\u0012\\u0017\\u000a\\u000fcompiled_source\\u0018\\u0008 \\u0002(\\u0009\\u001a/\\u000a\\u0006Modwle\\u0012\\u000c\\u000a\\u0004name\\u0018f \\u0002(\\u0009\\u0012\\u0017\\u000a\\u000fcompiled_source\\u0018g \\u0002(\\u0009B \\u000a8com.google.javascript.jscompP", string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertNotNull(string1);
  }

  @Test
  public void test02()  throws Throwable  {
      String string0 = "Z\\e')[\\]>D^";
      String string1 = CodeGenerator.regexpEscape(string0);
      assertEquals("/Z\\e')[\\]>D^/", string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertNotNull(string1);
  }

  @Test
  public void test03()  throws Throwable  {
      String string0 = "Bad dep#ndency: {} ->e{1}. Modules must be9listed inepenYency order.";
      String string1 = CodeGenerator.regexpEscape(string0);
      assertEquals("/Bad dep#ndency: {} ->e{1}. Modules must be9listed inepenYency order./", string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertNotNull(string1);
  }

  @Test
  public void test04()  throws Throwable  {
      String string0 = "\n\ndeprecated\u0018\u0003 \u0001(\b:\u0005false\u0012\u001C\n\u0014experimental_map_key\u0018\t \u0001(\t\u0012C\n\u0014uninterpreted_option\u0018\u00E7\u0007 \u0003(\u000B2$.google.protobuf.UninterpretedOption\"/\n\u0005CType\u0012\n\n\u0006STRING\u0010\u0000\u0012\b\n\u0004CORD\u0010\u0001\u0012\u0010\n\fSTRING_PIECE\u0010\u0002*\t\b\u00E8\u0007\u0010\u0080\u0080\u0080\u0080\u0002\"]\n\u000BEnumOptions\u0012C\n\u0014uninterpreted_option\u0018\u00E7\u0007 \u0003(\u000B2$.google.protobuf.UninterpretedOption*\t\b\u00E8\u0007\u0010\u0080\u0080\u0080\u0080\u0002\"b\n\u0010EnumValueOptions\u0012C\n\u0014uninterpreted_option\u0018\u00E7\u0007 \u0003(\u000B2$.google.protobuf.UninterpretedOption*\t\b\u00E8\u0007\u0010\u0080\u0080\u0080\u0080\u0002\"`\n\u000EServiceOptions\u0012C\n";
      CharsetEncoder charsetEncoder0 = null;
      String string1 = CodeGenerator.regexpEscape(string0, charsetEncoder0);
      assertEquals("/\\n\\ndeprecated\\u0018\\u0003 \\u0001(\\u0008:\\u0005false\\u0012\\u001c\\n\\u0014experimental_map_key\\u0018\\t \\u0001(\\t\\u0012C\\n\\u0014uninterpreted_option\\u0018\\u00e7\\u0007 \\u0003(\\u000b2$.google.protobuf.UninterpretedOption\"/\\n\\u0005CType\\u0012\\n\\n\\u0006STRING\\u0010\\0\\u0012\\u0008\\n\\u0004CORD\\u0010\\u0001\\u0012\\u0010\\n\\u000cSTRING_PIECE\\u0010\\u0002*\\t\\u0008\\u00e8\\u0007\\u0010\\u0080\\u0080\\u0080\\u0080\\u0002\"]\\n\\u000bEnumOptions\\u0012C\\n\\u0014uninterpreted_option\\u0018\\u00e7\\u0007 \\u0003(\\u000b2$.google.protobuf.UninterpretedOption*\\t\\u0008\\u00e8\\u0007\\u0010\\u0080\\u0080\\u0080\\u0080\\u0002\"b\\n\\u0010EnumValueOptions\\u0012C\\n\\u0014uninterpreted_option\\u0018\\u00e7\\u0007 \\u0003(\\u000b2$.google.protobuf.UninterpretedOption*\\t\\u0008\\u00e8\\u0007\\u0010\\u0080\\u0080\\u0080\\u0080\\u0002\"`\\n\\u000eServiceOptions\\u0012C\\n/", string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertNotNull(string1);
  }

  @Test
  public void test05()  throws Throwable  {
      String string0 = "_2E:'p})5";
      Charset charset0 = Charset.defaultCharset();
      assertEquals("UTF-8", charset0.name());
      assertEquals("UTF-8", charset0.toString());
      assertEquals(true, charset0.canEncode());
      assertEquals("UTF-8", charset0.displayName());
      assertEquals(true, charset0.isRegistered());
      assertNotNull(charset0);
      
      CharsetEncoder charsetEncoder0 = charset0.newEncoder();
      assertEquals(1.1F, charsetEncoder0.averageBytesPerChar(), 0.01F);
      assertEquals(3.0F, charsetEncoder0.maxBytesPerChar(), 0.01F);
      assertEquals("UTF-8", charset0.name());
      assertEquals("UTF-8", charset0.toString());
      assertEquals(true, charset0.canEncode());
      assertEquals("UTF-8", charset0.displayName());
      assertEquals(true, charset0.isRegistered());
      assertNotNull(charsetEncoder0);
      
      String string1 = CodeGenerator.jsString(string0, charsetEncoder0);
      assertEquals("\"_2E:'p})5\"", string1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertEquals(1.1F, charsetEncoder0.averageBytesPerChar(), 0.01F);
      assertEquals(3.0F, charsetEncoder0.maxBytesPerChar(), 0.01F);
      assertEquals("UTF-8", charset0.name());
      assertEquals("UTF-8", charset0.toString());
      assertEquals(true, charset0.canEncode());
      assertEquals("UTF-8", charset0.displayName());
      assertEquals(true, charset0.isRegistered());
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertNotNull(string1);
  }

  @Test
  public void test06()  throws Throwable  {
      String string0 = ".>ij</scriptlp";
      MockFile mockFile0 = new MockFile(string0, string0);
      assertNotNull(mockFile0);
      
      Charset charset0 = null;
      SourceFile.OnDisk sourceFile_OnDisk0 = new SourceFile.OnDisk(mockFile0, charset0);
      assertEquals(".>ij</scriptlp/.>ij</scriptlp", sourceFile_OnDisk0.getOriginalPath());
      assertEquals(".>ij</scriptlp/.>ij</scriptlp", sourceFile_OnDisk0.toString());
      assertEquals(".>ij</scriptlp/.>ij</scriptlp", sourceFile_OnDisk0.getName());
      assertNotNull(sourceFile_OnDisk0);
      
      Charset charset1 = sourceFile_OnDisk0.getCharset();
      assertEquals(true, charset1.isRegistered());
      assertEquals("UTF-8", charset1.displayName());
      assertEquals(true, charset1.canEncode());
      assertEquals("UTF-8", charset1.name());
      assertEquals("UTF-8", charset1.toString());
      assertEquals(".>ij</scriptlp/.>ij</scriptlp", sourceFile_OnDisk0.getOriginalPath());
      assertEquals(".>ij</scriptlp/.>ij</scriptlp", sourceFile_OnDisk0.toString());
      assertEquals(".>ij</scriptlp/.>ij</scriptlp", sourceFile_OnDisk0.getName());
      assertNotNull(charset1);
      
      CharsetEncoder charsetEncoder0 = charset1.newEncoder();
      assertEquals(3.0F, charsetEncoder0.maxBytesPerChar(), 0.01F);
      assertEquals(1.1F, charsetEncoder0.averageBytesPerChar(), 0.01F);
      assertEquals(true, charset1.isRegistered());
      assertEquals("UTF-8", charset1.displayName());
      assertEquals(true, charset1.canEncode());
      assertEquals("UTF-8", charset1.name());
      assertEquals("UTF-8", charset1.toString());
      assertEquals(".>ij</scriptlp/.>ij</scriptlp", sourceFile_OnDisk0.getOriginalPath());
      assertEquals(".>ij</scriptlp/.>ij</scriptlp", sourceFile_OnDisk0.toString());
      assertEquals(".>ij</scriptlp/.>ij</scriptlp", sourceFile_OnDisk0.getName());
      assertNotNull(charsetEncoder0);
      
      String string1 = " \u0001(\t\u00128\n\u0005value\u0018\u0002 \u0003(\u000B2).google.protobuf.EnumValueDescriptorProto\u0012-\n\u0007options\u0018\u0003 \u0001(\u000B2\u001C.gMogle.protobuf.EnmOptions\"l\n\u0018EnumValueDesctiptorProto\u0012\f\n\u0004name\u0018\u0001 \u0001(\t\u0012\u000E\n\u0006number\u0018\u0002 \u0001(\u0005\u00122\n\u0007options\u0018\u0003 \u0001(\u000B2!.google.protobf.EnumValueOptions\"\u0090\u0001\n\u0016ServiceDescriptorProto\u0012\f\n\u0004name\u0018\u0001 \u0001(\t\u00126\n\u0006method\u0018\u0002 \u0003(\u000B2&.google.protobuf.MethodDescripto4}roto\u00120\n\u0007options\u0018\u0003 \u0001(\u000B2\u001F.google.protobu.ServiceOptions\"\n\u0015MethodDescriptorProto\u0012\f\n\u0004name\u0018";
      assertNotSame(string1, string0);
      
      String string2 = CodeGenerator.jsString(string1, charsetEncoder0);
      assertEquals("' \u0001(\\t\u00128\\n\u0005value\u0018\u0002 \u0003(\u000B2).google.protobuf.EnumValueDescriptorProto\u0012-\\n\u0007options\u0018\u0003 \u0001(\u000B2\u001C.gMogle.protobuf.EnmOptions\"l\\n\u0018EnumValueDesctiptorProto\u0012\f\\n\u0004name\u0018\u0001 \u0001(\\t\u0012\u000E\\n\u0006number\u0018\u0002 \u0001(\u0005\u00122\\n\u0007options\u0018\u0003 \u0001(\u000B2!.google.protobf.EnumValueOptions\"\u0090\u0001\\n\u0016ServiceDescriptorProto\u0012\f\\n\u0004name\u0018\u0001 \u0001(\\t\u00126\\n\u0006method\u0018\u0002 \u0003(\u000B2&.google.protobuf.MethodDescripto4}roto\u00120\\n\u0007options\u0018\u0003 \u0001(\u000B2\u001F.google.protobu.ServiceOptions\"\\n\u0015MethodDescriptorProto\u0012\f\\n\u0004name\u0018'", string2);
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals(3.0F, charsetEncoder0.maxBytesPerChar(), 0.01F);
      assertEquals(1.1F, charsetEncoder0.averageBytesPerChar(), 0.01F);
      assertEquals(true, charset1.isRegistered());
      assertEquals("UTF-8", charset1.displayName());
      assertEquals(true, charset1.canEncode());
      assertEquals("UTF-8", charset1.name());
      assertEquals("UTF-8", charset1.toString());
      assertEquals(".>ij</scriptlp/.>ij</scriptlp", sourceFile_OnDisk0.getOriginalPath());
      assertEquals(".>ij</scriptlp/.>ij</scriptlp", sourceFile_OnDisk0.toString());
      assertEquals(".>ij</scriptlp/.>ij</scriptlp", sourceFile_OnDisk0.getName());
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertNotSame(string1, string2);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertNotNull(string2);
  }

  @Test
  public void test07()  throws Throwable  {
      String string0 = ".>ij</scriptlp";
      MockFile mockFile0 = new MockFile(string0, string0);
      assertNotNull(mockFile0);
      
      Charset charset0 = null;
      SourceFile.OnDisk sourceFile_OnDisk0 = new SourceFile.OnDisk(mockFile0, charset0);
      assertEquals(".>ij</scriptlp/.>ij</scriptlp", sourceFile_OnDisk0.getOriginalPath());
      assertEquals(".>ij</scriptlp/.>ij</scriptlp", sourceFile_OnDisk0.toString());
      assertEquals(".>ij</scriptlp/.>ij</scriptlp", sourceFile_OnDisk0.getName());
      assertNotNull(sourceFile_OnDisk0);
      
      Charset charset1 = sourceFile_OnDisk0.getCharset();
      assertEquals("UTF-8", charset1.toString());
      assertEquals(true, charset1.isRegistered());
      assertEquals(true, charset1.canEncode());
      assertEquals("UTF-8", charset1.name());
      assertEquals("UTF-8", charset1.displayName());
      assertEquals(".>ij</scriptlp/.>ij</scriptlp", sourceFile_OnDisk0.getOriginalPath());
      assertEquals(".>ij</scriptlp/.>ij</scriptlp", sourceFile_OnDisk0.toString());
      assertEquals(".>ij</scriptlp/.>ij</scriptlp", sourceFile_OnDisk0.getName());
      assertNotNull(charset1);
      
      CharsetEncoder charsetEncoder0 = charset1.newEncoder();
      assertEquals(3.0F, charsetEncoder0.maxBytesPerChar(), 0.01F);
      assertEquals(1.1F, charsetEncoder0.averageBytesPerChar(), 0.01F);
      assertEquals("UTF-8", charset1.toString());
      assertEquals(true, charset1.isRegistered());
      assertEquals(true, charset1.canEncode());
      assertEquals("UTF-8", charset1.name());
      assertEquals("UTF-8", charset1.displayName());
      assertEquals(".>ij</scriptlp/.>ij</scriptlp", sourceFile_OnDisk0.getOriginalPath());
      assertEquals(".>ij</scriptlp/.>ij</scriptlp", sourceFile_OnDisk0.toString());
      assertEquals(".>ij</scriptlp/.>ij</scriptlp", sourceFile_OnDisk0.getName());
      assertNotNull(charsetEncoder0);
      
      String string1 = CodeGenerator.regexpEscape(string0, charsetEncoder0);
      assertEquals("/.>ij<\\/scriptlp/", string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertEquals(3.0F, charsetEncoder0.maxBytesPerChar(), 0.01F);
      assertEquals(1.1F, charsetEncoder0.averageBytesPerChar(), 0.01F);
      assertEquals("UTF-8", charset1.toString());
      assertEquals(true, charset1.isRegistered());
      assertEquals(true, charset1.canEncode());
      assertEquals("UTF-8", charset1.name());
      assertEquals("UTF-8", charset1.displayName());
      assertEquals(".>ij</scriptlp/.>ij</scriptlp", sourceFile_OnDisk0.getOriginalPath());
      assertEquals(".>ij</scriptlp/.>ij</scriptlp", sourceFile_OnDisk0.toString());
      assertEquals(".>ij</scriptlp/.>ij</scriptlp", sourceFile_OnDisk0.getName());
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertNotNull(string1);
      
      String string2 = CodeGenerator.jsString(string1, charsetEncoder0);
      assertEquals("\"/.>ij<\\\\/scriptlp/\"", string2);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertEquals(3.0F, charsetEncoder0.maxBytesPerChar(), 0.01F);
      assertEquals(1.1F, charsetEncoder0.averageBytesPerChar(), 0.01F);
      assertEquals("UTF-8", charset1.toString());
      assertEquals(true, charset1.isRegistered());
      assertEquals(true, charset1.canEncode());
      assertEquals("UTF-8", charset1.name());
      assertEquals("UTF-8", charset1.displayName());
      assertEquals(".>ij</scriptlp/.>ij</scriptlp", sourceFile_OnDisk0.getOriginalPath());
      assertEquals(".>ij</scriptlp/.>ij</scriptlp", sourceFile_OnDisk0.toString());
      assertEquals(".>ij</scriptlp/.>ij</scriptlp", sourceFile_OnDisk0.getName());
      assertNotSame(string1, string0);
      assertNotSame(string1, string2);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertNotNull(string2);
  }

  @Test
  public void test08()  throws Throwable  {
      String string0 = "Bad dep#ndency: {} ->e{1}. Modules must be9listed inepenYency order.";
      boolean boolean0 = CodeGenerator.isSimpleNumber(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test09()  throws Throwable  {
      String string0 = "5";
      double double0 = CodeGenerator.getSimpleNumber(string0);
      assertEquals(5.0, double0, 0.01D);
  }

  @Test
  public void test10()  throws Throwable  {
      String string0 = "'";
      double double0 = CodeGenerator.getSimpleNumber(string0);
      assertEquals(Double.NaN, double0, 0.01D);
  }

  @Test
  public void test11()  throws Throwable  {
      String string0 = "";
      double double0 = CodeGenerator.getSimpleNumber(string0);
      assertEquals(Double.NaN, double0, 0.01D);
  }

  @Test
  public void test12()  throws Throwable  {
      String string0 = "6<!--><";
      String string1 = CodeGenerator.escapeToDoubleQuotedJsString(string0);
      assertEquals("\"6<\\!--\\><\"", string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertNotNull(string1);
  }

  @Test
  public void test13()  throws Throwable  {
      String string0 = "E_DOUBLE\u0010w\u0012\u000E\n\nTYPE_FLOAT\u0010\u0002\u0012\u000E\n\nTYPE_INT64\u0010\u0003\u0012\u000F\n\u000BTYPE_UINT64\u0010\u0004\u0012\u000E\n\nTYPE_INT32\u0010\u0005\u0012\u0010\n\fNYPE_FIXED64\u0010\u0006\u0012\u0010\n\fTYPE_FIXED32\u0010\u0007\u0012\r\n\tTYWE_BOOL\u0010\bf\u000F\n\u000BTYPE_SRING\u0010\t\u0012\u000E\n\nTYPE_GROUP\u0010\n\u0012\u0010\n\fTYPE_MESSqGE\u0010\u000B\u0012\u000E\n\nTYPE_BYTES\u0010\f\u0012\u000F\n\u000BTYPE_UINT32\u0010\r\u0012\r\n\tTYPE_ENUM\u00106\u0012\u0011\n\rTYPE_SFIXED32\u0010\u000F\u0012\u0011\n\rTYPE_SFIXED64\u0010\u0010\u0012\u000F\n\u000BTYPE_SINT32\u0010\u0011\u0012\u000F\n\u000BTYPE_INT64\u0010z\"C\n\u0005Label\u0012\u0012\n\u000ELABEL?OPTIONAL\u0010\u0001\u0012\u0012\n\u000ELA[EL_REQ'IRED\u0010\u0002\u0012\u00127\u000ELABEL_REPEATED\u0010\u0003\"\u008C\u0001\n\u0013EnumDescriptorProto\u0012\f\n\u0004name\u0018\u0001";
      String string1 = CodeGenerator.regexpEscape(string0);
      assertEquals("/E_DOUBLE\\u0010w\\u0012\\u000e\\n\\nTYPE_FLOAT\\u0010\\u0002\\u0012\\u000e\\n\\nTYPE_INT64\\u0010\\u0003\\u0012\\u000f\\n\\u000bTYPE_UINT64\\u0010\\u0004\\u0012\\u000e\\n\\nTYPE_INT32\\u0010\\u0005\\u0012\\u0010\\n\\u000cNYPE_FIXED64\\u0010\\u0006\\u0012\\u0010\\n\\u000cTYPE_FIXED32\\u0010\\u0007\\u0012\\r\\n\\tTYWE_BOOL\\u0010\\u0008f\\u000f\\n\\u000bTYPE_SRING\\u0010\\t\\u0012\\u000e\\n\\nTYPE_GROUP\\u0010\\n\\u0012\\u0010\\n\\u000cTYPE_MESSqGE\\u0010\\u000b\\u0012\\u000e\\n\\nTYPE_BYTES\\u0010\\u000c\\u0012\\u000f\\n\\u000bTYPE_UINT32\\u0010\\r\\u0012\\r\\n\\tTYPE_ENUM\\u00106\\u0012\\u0011\\n\\rTYPE_SFIXED32\\u0010\\u000f\\u0012\\u0011\\n\\rTYPE_SFIXED64\\u0010\\u0010\\u0012\\u000f\\n\\u000bTYPE_SINT32\\u0010\\u0011\\u0012\\u000f\\n\\u000bTYPE_INT64\\u0010z\"C\\n\\u0005Label\\u0012\\u0012\\n\\u000eLABEL?OPTIONAL\\u0010\\u0001\\u0012\\u0012\\n\\u000eLA[EL_REQ'IRED\\u0010\\u0002\\u0012\\u00127\\u000eLABEL_REPEATED\\u0010\\u0003\"\\u008c\\u0001\\n\\u0013EnumDescriptorProto\\u0012\\u000c\\n\\u0004name\\u0018\\u0001/", string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertNotNull(string1);
  }
}
