/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 22:31:46 GMT 2014
 */

package com.google.javascript.rhino.jstype;

import static org.junit.Assert.*;
import org.junit.Test;
import com.google.javascript.rhino.ErrorReporter;
import com.google.javascript.rhino.Node;
import com.google.javascript.rhino.SimpleErrorReporter;
import com.google.javascript.rhino.jstype.BooleanLiteralSet;
import com.google.javascript.rhino.jstype.FunctionType;
import com.google.javascript.rhino.jstype.JSType;
import com.google.javascript.rhino.jstype.JSTypeRegistry;
import com.google.javascript.rhino.jstype.NoObjectType;
import com.google.javascript.rhino.jstype.NumberType;
import com.google.javascript.rhino.jstype.RecordType;
import com.google.javascript.rhino.jstype.RecordTypeBuilder;
import com.google.javascript.rhino.jstype.UnionType;
import java.util.HashMap;
import java.util.Map;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;

import org.junit.runner.RunWith;


public class RecordTypeEvoSuite_branch_Test  {

  @Test
  public void test0()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      HashMap<String, RecordTypeBuilder.RecordProperty> hashMap0 = new HashMap<String, RecordTypeBuilder.RecordProperty>();
      assertEquals("{}", hashMap0.toString());
      assertEquals(true, hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      String string0 = "";
      Node node0 = null;
      NumberType numberType0 = new NumberType(jSTypeRegistry0);
      assertEquals(false, numberType0.isVoidType());
      assertEquals("number", numberType0.getDisplayName());
      assertEquals(false, numberType0.isResolved());
      assertEquals(false, numberType0.isNullable());
      assertEquals(false, numberType0.isFunctionPrototypeType());
      assertEquals(false, numberType0.isNominalType());
      assertEquals(true, numberType0.matchesStringContext());
      assertEquals(false, numberType0.isEnumElementType());
      assertEquals(true, numberType0.matchesObjectContext());
      assertEquals(BooleanLiteralSet.BOTH, numberType0.getPossibleToBooleanOutcomes());
      assertEquals(false, numberType0.isRecordType());
      assertEquals(false, numberType0.isStringValueType());
      assertEquals(false, numberType0.isConstructor());
      assertEquals(false, numberType0.isNullType());
      assertEquals(false, numberType0.isTemplateType());
      assertEquals(false, numberType0.isFunctionType());
      assertEquals(false, numberType0.isBooleanValueType());
      assertEquals(true, numberType0.isNumberValueType());
      assertEquals(true, numberType0.matchesNumberContext());
      assertEquals(false, numberType0.isOrdinaryFunction());
      assertEquals(false, numberType0.isCheckedUnknownType());
      assertEquals(false, numberType0.isEnumType());
      assertEquals("number", numberType0.toString());
      assertEquals(false, numberType0.isAllType());
      assertEquals(false, numberType0.isNoObjectType());
      assertEquals(false, numberType0.isNominalConstructor());
      assertEquals(false, numberType0.isNoResolvedType());
      assertEquals(false, numberType0.isInterface());
      assertEquals(false, numberType0.isUnionType());
      assertEquals(false, numberType0.isNoType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(numberType0);
      
      RecordTypeBuilder.RecordProperty recordTypeBuilder_RecordProperty0 = new RecordTypeBuilder.RecordProperty(numberType0, node0);
      assertEquals(false, numberType0.isVoidType());
      assertEquals("number", numberType0.getDisplayName());
      assertEquals(false, numberType0.isResolved());
      assertEquals(false, numberType0.isNullable());
      assertEquals(false, numberType0.isFunctionPrototypeType());
      assertEquals(false, numberType0.isNominalType());
      assertEquals(true, numberType0.matchesStringContext());
      assertEquals(false, numberType0.isEnumElementType());
      assertEquals(true, numberType0.matchesObjectContext());
      assertEquals(BooleanLiteralSet.BOTH, numberType0.getPossibleToBooleanOutcomes());
      assertEquals(false, numberType0.isRecordType());
      assertEquals(false, numberType0.isStringValueType());
      assertEquals(false, numberType0.isConstructor());
      assertEquals(false, numberType0.isNullType());
      assertEquals(false, numberType0.isTemplateType());
      assertEquals(false, numberType0.isFunctionType());
      assertEquals(false, numberType0.isBooleanValueType());
      assertEquals(true, numberType0.isNumberValueType());
      assertEquals(true, numberType0.matchesNumberContext());
      assertEquals(false, numberType0.isOrdinaryFunction());
      assertEquals(false, numberType0.isCheckedUnknownType());
      assertEquals(false, numberType0.isEnumType());
      assertEquals("number", numberType0.toString());
      assertEquals(false, numberType0.isAllType());
      assertEquals(false, numberType0.isNoObjectType());
      assertEquals(false, numberType0.isNominalConstructor());
      assertEquals(false, numberType0.isNoResolvedType());
      assertEquals(false, numberType0.isInterface());
      assertEquals(false, numberType0.isUnionType());
      assertEquals(false, numberType0.isNoType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(recordTypeBuilder_RecordProperty0);
      
      RecordTypeBuilder.RecordProperty recordTypeBuilder_RecordProperty1 = hashMap0.put(string0, recordTypeBuilder_RecordProperty0);
      assertEquals(1, hashMap0.size());
      assertEquals(false, hashMap0.isEmpty());
      assertEquals(false, numberType0.isVoidType());
      assertEquals("number", numberType0.getDisplayName());
      assertEquals(false, numberType0.isResolved());
      assertEquals(false, numberType0.isNullable());
      assertEquals(false, numberType0.isFunctionPrototypeType());
      assertEquals(false, numberType0.isNominalType());
      assertEquals(true, numberType0.matchesStringContext());
      assertEquals(false, numberType0.isEnumElementType());
      assertEquals(true, numberType0.matchesObjectContext());
      assertEquals(BooleanLiteralSet.BOTH, numberType0.getPossibleToBooleanOutcomes());
      assertEquals(false, numberType0.isRecordType());
      assertEquals(false, numberType0.isStringValueType());
      assertEquals(false, numberType0.isConstructor());
      assertEquals(false, numberType0.isNullType());
      assertEquals(false, numberType0.isTemplateType());
      assertEquals(false, numberType0.isFunctionType());
      assertEquals(false, numberType0.isBooleanValueType());
      assertEquals(true, numberType0.isNumberValueType());
      assertEquals(true, numberType0.matchesNumberContext());
      assertEquals(false, numberType0.isOrdinaryFunction());
      assertEquals(false, numberType0.isCheckedUnknownType());
      assertEquals(false, numberType0.isEnumType());
      assertEquals("number", numberType0.toString());
      assertEquals(false, numberType0.isAllType());
      assertEquals(false, numberType0.isNoObjectType());
      assertEquals(false, numberType0.isNominalConstructor());
      assertEquals(false, numberType0.isNoResolvedType());
      assertEquals(false, numberType0.isInterface());
      assertEquals(false, numberType0.isUnionType());
      assertEquals(false, numberType0.isNoType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNull(recordTypeBuilder_RecordProperty1);
      
      RecordType recordType0 = jSTypeRegistry0.createRecordType((Map<String, RecordTypeBuilder.RecordProperty>) hashMap0);
      assertEquals(1, hashMap0.size());
      assertEquals(false, hashMap0.isEmpty());
      assertEquals(false, recordType0.isOrdinaryFunction());
      assertEquals(false, recordType0.isCheckedUnknownType());
      assertEquals(false, recordType0.isResolved());
      assertEquals(false, recordType0.isEnumType());
      assertEquals(false, recordType0.isStringValueType());
      assertEquals(false, recordType0.isBooleanValueType());
      assertEquals(false, recordType0.isInterface());
      assertEquals(false, recordType0.isFunctionType());
      assertEquals(false, recordType0.isNoResolvedType());
      assertEquals(false, recordType0.isVoidType());
      assertEquals(true, recordType0.isRecordType());
      assertEquals(false, recordType0.isNullType());
      assertEquals(false, recordType0.isNumberValueType());
      assertEquals(false, recordType0.isAllType());
      assertEquals(false, recordType0.isFunctionPrototypeType());
      assertEquals(false, recordType0.isTemplateType());
      assertEquals(false, recordType0.isUnionType());
      assertEquals(BooleanLiteralSet.TRUE, recordType0.getPossibleToBooleanOutcomes());
      assertEquals(false, recordType0.isNominalType());
      assertEquals(false, recordType0.isConstructor());
      assertEquals(false, recordType0.isEnumElementType());
      assertEquals(false, recordType0.isNoObjectType());
      assertEquals(false, recordType0.isNoType());
      assertEquals(false, recordType0.isNominalConstructor());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(recordType0);
      
      RecordType recordType1 = (RecordType)JSType.safeResolve(recordType0, simpleErrorReporter0, recordType0);
      assertSame(recordType1, recordType0);
      assertSame(recordType0, recordType1);
      assertEquals(false, recordType1.isFunctionType());
      assertEquals(false, recordType1.isUnionType());
      assertEquals(false, recordType1.isNullType());
      assertEquals(false, recordType1.isInterface());
      assertEquals(false, recordType1.isStringValueType());
      assertEquals(false, recordType1.isNumberValueType());
      assertEquals(BooleanLiteralSet.TRUE, recordType1.getPossibleToBooleanOutcomes());
      assertEquals(false, recordType1.isCheckedUnknownType());
      assertEquals(false, recordType1.isEnumType());
      assertEquals(false, recordType1.isAllType());
      assertEquals(false, recordType1.isEnumElementType());
      assertEquals(true, recordType1.isRecordType());
      assertEquals(false, recordType1.isConstructor());
      assertEquals(false, recordType1.isNoObjectType());
      assertEquals(false, recordType1.isFunctionPrototypeType());
      assertEquals(false, recordType1.isOrdinaryFunction());
      assertEquals(false, recordType1.isNoType());
      assertEquals(false, recordType1.isNoResolvedType());
      assertEquals(false, recordType1.isTemplateType());
      assertEquals(false, recordType1.isNominalConstructor());
      assertEquals(true, recordType1.isResolved());
      assertEquals(false, recordType1.isNominalType());
      assertEquals(false, recordType1.isBooleanValueType());
      assertEquals(false, recordType1.isVoidType());
      assertEquals(1, hashMap0.size());
      assertEquals(false, hashMap0.isEmpty());
      assertEquals(false, recordType0.isOrdinaryFunction());
      assertEquals(false, recordType0.isCheckedUnknownType());
      assertEquals(false, recordType0.isEnumType());
      assertEquals(false, recordType0.isStringValueType());
      assertEquals(false, recordType0.isBooleanValueType());
      assertEquals(false, recordType0.isInterface());
      assertEquals(false, recordType0.isFunctionType());
      assertEquals(false, recordType0.isNoResolvedType());
      assertEquals(false, recordType0.isVoidType());
      assertEquals(true, recordType0.isRecordType());
      assertEquals(false, recordType0.isNullType());
      assertEquals(false, recordType0.isNumberValueType());
      assertEquals(false, recordType0.isAllType());
      assertEquals(false, recordType0.isFunctionPrototypeType());
      assertEquals(false, recordType0.isTemplateType());
      assertEquals(false, recordType0.isUnionType());
      assertEquals(BooleanLiteralSet.TRUE, recordType0.getPossibleToBooleanOutcomes());
      assertEquals(false, recordType0.isNominalType());
      assertEquals(false, recordType0.isConstructor());
      assertEquals(false, recordType0.isEnumElementType());
      assertEquals(false, recordType0.isNoObjectType());
      assertEquals(true, recordType0.isResolved());
      assertEquals(false, recordType0.isNoType());
      assertEquals(false, recordType0.isNominalConstructor());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(recordType1);
  }

  @Test
  public void test1()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      HashMap<String, RecordTypeBuilder.RecordProperty> hashMap0 = new HashMap<String, RecordTypeBuilder.RecordProperty>();
      assertEquals("{}", hashMap0.toString());
      assertEquals(0, hashMap0.size());
      assertEquals(true, hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      RecordType recordType0 = new RecordType(jSTypeRegistry0, hashMap0);
      assertEquals(false, recordType0.isCheckedUnknownType());
      assertEquals(false, recordType0.isVoidType());
      assertEquals(false, recordType0.isStringValueType());
      assertEquals(false, recordType0.isTemplateType());
      assertEquals(false, recordType0.isConstructor());
      assertEquals(false, recordType0.isNoResolvedType());
      assertEquals(false, recordType0.isNominalType());
      assertEquals(false, recordType0.isResolved());
      assertEquals(false, recordType0.isNominalConstructor());
      assertEquals(false, recordType0.isEnumElementType());
      assertEquals(false, recordType0.isFunctionType());
      assertEquals(BooleanLiteralSet.TRUE, recordType0.getPossibleToBooleanOutcomes());
      assertEquals(false, recordType0.isNoObjectType());
      assertEquals(true, recordType0.isRecordType());
      assertEquals(false, recordType0.isFunctionPrototypeType());
      assertEquals(false, recordType0.isOrdinaryFunction());
      assertEquals(false, recordType0.isNumberValueType());
      assertEquals(false, recordType0.isUnionType());
      assertEquals(false, recordType0.isAllType());
      assertEquals(false, recordType0.isNoType());
      assertEquals(false, recordType0.isNullType());
      assertEquals(false, recordType0.isInterface());
      assertEquals(false, recordType0.isBooleanValueType());
      assertEquals(false, recordType0.isEnumType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals("{}", hashMap0.toString());
      assertEquals(0, hashMap0.size());
      assertEquals(true, hashMap0.isEmpty());
      assertNotNull(recordType0);
      
      String string0 = "";
      Node node0 = null;
      NumberType numberType0 = new NumberType(jSTypeRegistry0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, numberType0.isCheckedUnknownType());
      assertEquals("number", numberType0.getDisplayName());
      assertEquals(false, numberType0.isNominalType());
      assertEquals(true, numberType0.matchesStringContext());
      assertEquals(false, numberType0.isNoType());
      assertEquals(true, numberType0.matchesNumberContext());
      assertEquals(false, numberType0.isEnumType());
      assertEquals(false, numberType0.isStringValueType());
      assertEquals(false, numberType0.isNullable());
      assertEquals(false, numberType0.isNoObjectType());
      assertEquals(false, numberType0.isFunctionPrototypeType());
      assertEquals(false, numberType0.isAllType());
      assertEquals(false, numberType0.isOrdinaryFunction());
      assertEquals(true, numberType0.matchesObjectContext());
      assertEquals(false, numberType0.isRecordType());
      assertEquals(BooleanLiteralSet.BOTH, numberType0.getPossibleToBooleanOutcomes());
      assertEquals("number", numberType0.toString());
      assertEquals(false, numberType0.isInterface());
      assertEquals(false, numberType0.isVoidType());
      assertEquals(false, numberType0.isTemplateType());
      assertEquals(false, numberType0.isNominalConstructor());
      assertEquals(false, numberType0.isConstructor());
      assertEquals(false, numberType0.isEnumElementType());
      assertEquals(false, numberType0.isBooleanValueType());
      assertEquals(false, numberType0.isNullType());
      assertEquals(false, numberType0.isNoResolvedType());
      assertEquals(false, numberType0.isFunctionType());
      assertEquals(true, numberType0.isNumberValueType());
      assertEquals(false, numberType0.isResolved());
      assertEquals(false, numberType0.isUnionType());
      assertNotNull(numberType0);
      
      NoObjectType noObjectType0 = (NoObjectType)numberType0.getGreatestSubtype((JSType) recordType0);
      assertEquals(false, noObjectType0.hasCachedValues());
      assertNull(noObjectType0.getTemplateTypeName());
      assertNull(noObjectType0.getReferenceName());
      assertEquals(false, noObjectType0.isFunctionType());
      assertEquals(false, noObjectType0.isOrdinaryFunction());
      assertEquals(true, noObjectType0.isNoObjectType());
      assertEquals(true, noObjectType0.canBeCalled());
      assertEquals(false, noObjectType0.isNominalConstructor());
      assertEquals(false, noObjectType0.isNoType());
      assertEquals(false, noObjectType0.isNullType());
      assertEquals(false, noObjectType0.isRecordType());
      assertEquals(false, noObjectType0.isTemplateType());
      assertEquals(false, noObjectType0.isUnionType());
      assertEquals(false, noObjectType0.isAllType());
      assertEquals(false, noObjectType0.isReturnTypeInferred());
      assertEquals(2147483647, noObjectType0.getMaxArguments());
      assertEquals(true, noObjectType0.hasInstanceType());
      assertEquals(false, noObjectType0.isResolved());
      assertEquals(false, noObjectType0.isStringValueType());
      assertEquals(false, noObjectType0.isNominalType());
      assertEquals(false, noObjectType0.isInterface());
      assertEquals(true, noObjectType0.matchesStringContext());
      assertEquals(false, noObjectType0.isFunctionPrototypeType());
      assertEquals(false, noObjectType0.isEnumElementType());
      assertEquals(true, noObjectType0.matchesObjectContext());
      assertEquals(false, noObjectType0.isBooleanValueType());
      assertEquals(2147483647, noObjectType0.getPropertiesCount());
      assertEquals(BooleanLiteralSet.TRUE, noObjectType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noObjectType0.isCheckedUnknownType());
      assertEquals("NoObject", noObjectType0.toString());
      assertEquals(true, noObjectType0.matchesNumberContext());
      assertEquals(false, noObjectType0.isEnumType());
      assertEquals(true, noObjectType0.isConstructor());
      assertEquals(false, noObjectType0.isNoResolvedType());
      assertEquals(false, noObjectType0.isNumberValueType());
      assertEquals(false, noObjectType0.isVoidType());
      assertEquals(0, noObjectType0.getExtendedInterfacesCount());
      assertEquals(false, recordType0.isCheckedUnknownType());
      assertEquals(false, recordType0.isVoidType());
      assertEquals(false, recordType0.isStringValueType());
      assertEquals(false, recordType0.isTemplateType());
      assertEquals(false, recordType0.isConstructor());
      assertEquals(false, recordType0.isNoResolvedType());
      assertEquals(false, recordType0.isNominalType());
      assertEquals(false, recordType0.isResolved());
      assertEquals(false, recordType0.isNominalConstructor());
      assertEquals(false, recordType0.isEnumElementType());
      assertEquals(false, recordType0.isFunctionType());
      assertEquals(BooleanLiteralSet.TRUE, recordType0.getPossibleToBooleanOutcomes());
      assertEquals(false, recordType0.isNoObjectType());
      assertEquals(true, recordType0.isRecordType());
      assertEquals(false, recordType0.isFunctionPrototypeType());
      assertEquals(false, recordType0.isOrdinaryFunction());
      assertEquals(false, recordType0.isNumberValueType());
      assertEquals(false, recordType0.isUnionType());
      assertEquals(false, recordType0.isAllType());
      assertEquals(false, recordType0.isNoType());
      assertEquals(false, recordType0.isNullType());
      assertEquals(false, recordType0.isInterface());
      assertEquals(false, recordType0.isBooleanValueType());
      assertEquals(false, recordType0.isEnumType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, numberType0.isCheckedUnknownType());
      assertEquals("number", numberType0.getDisplayName());
      assertEquals(false, numberType0.isNominalType());
      assertEquals(true, numberType0.matchesStringContext());
      assertEquals(false, numberType0.isNoType());
      assertEquals(true, numberType0.matchesNumberContext());
      assertEquals(false, numberType0.isEnumType());
      assertEquals(false, numberType0.isStringValueType());
      assertEquals(false, numberType0.isNullable());
      assertEquals(false, numberType0.isNoObjectType());
      assertEquals(false, numberType0.isFunctionPrototypeType());
      assertEquals(false, numberType0.isAllType());
      assertEquals(false, numberType0.isOrdinaryFunction());
      assertEquals(true, numberType0.matchesObjectContext());
      assertEquals(false, numberType0.isRecordType());
      assertEquals(BooleanLiteralSet.BOTH, numberType0.getPossibleToBooleanOutcomes());
      assertEquals("number", numberType0.toString());
      assertEquals(false, numberType0.isInterface());
      assertEquals(false, numberType0.isVoidType());
      assertEquals(false, numberType0.isTemplateType());
      assertEquals(false, numberType0.isNominalConstructor());
      assertEquals(false, numberType0.isConstructor());
      assertEquals(false, numberType0.isEnumElementType());
      assertEquals(false, numberType0.isBooleanValueType());
      assertEquals(false, numberType0.isNullType());
      assertEquals(false, numberType0.isNoResolvedType());
      assertEquals(false, numberType0.isFunctionType());
      assertEquals(true, numberType0.isNumberValueType());
      assertEquals(false, numberType0.isResolved());
      assertEquals(false, numberType0.isUnionType());
      assertEquals("{}", hashMap0.toString());
      assertEquals(0, hashMap0.size());
      assertEquals(true, hashMap0.isEmpty());
      assertNotNull(noObjectType0);
      
      RecordTypeBuilder.RecordProperty recordTypeBuilder_RecordProperty0 = new RecordTypeBuilder.RecordProperty(recordType0, node0);
      assertEquals(false, recordType0.isCheckedUnknownType());
      assertEquals(false, recordType0.isVoidType());
      assertEquals(false, recordType0.isStringValueType());
      assertEquals(false, recordType0.isTemplateType());
      assertEquals(false, recordType0.isConstructor());
      assertEquals(false, recordType0.isNoResolvedType());
      assertEquals(false, recordType0.isNominalType());
      assertEquals(false, recordType0.isResolved());
      assertEquals(false, recordType0.isNominalConstructor());
      assertEquals(false, recordType0.isEnumElementType());
      assertEquals(false, recordType0.isFunctionType());
      assertEquals(BooleanLiteralSet.TRUE, recordType0.getPossibleToBooleanOutcomes());
      assertEquals(false, recordType0.isNoObjectType());
      assertEquals(true, recordType0.isRecordType());
      assertEquals(false, recordType0.isFunctionPrototypeType());
      assertEquals(false, recordType0.isOrdinaryFunction());
      assertEquals(false, recordType0.isNumberValueType());
      assertEquals(false, recordType0.isUnionType());
      assertEquals(false, recordType0.isAllType());
      assertEquals(false, recordType0.isNoType());
      assertEquals(false, recordType0.isNullType());
      assertEquals(false, recordType0.isInterface());
      assertEquals(false, recordType0.isBooleanValueType());
      assertEquals(false, recordType0.isEnumType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals("{}", hashMap0.toString());
      assertEquals(0, hashMap0.size());
      assertEquals(true, hashMap0.isEmpty());
      assertNotNull(recordTypeBuilder_RecordProperty0);
      
      RecordTypeBuilder.RecordProperty recordTypeBuilder_RecordProperty1 = hashMap0.put(string0, recordTypeBuilder_RecordProperty0);
      assertEquals(false, recordType0.isCheckedUnknownType());
      assertEquals(false, recordType0.isVoidType());
      assertEquals(false, recordType0.isStringValueType());
      assertEquals(false, recordType0.isTemplateType());
      assertEquals(false, recordType0.isConstructor());
      assertEquals(false, recordType0.isNoResolvedType());
      assertEquals(false, recordType0.isNominalType());
      assertEquals(false, recordType0.isResolved());
      assertEquals(false, recordType0.isNominalConstructor());
      assertEquals(false, recordType0.isEnumElementType());
      assertEquals(false, recordType0.isFunctionType());
      assertEquals(BooleanLiteralSet.TRUE, recordType0.getPossibleToBooleanOutcomes());
      assertEquals(false, recordType0.isNoObjectType());
      assertEquals(true, recordType0.isRecordType());
      assertEquals(false, recordType0.isFunctionPrototypeType());
      assertEquals(false, recordType0.isOrdinaryFunction());
      assertEquals(false, recordType0.isNumberValueType());
      assertEquals(false, recordType0.isUnionType());
      assertEquals(false, recordType0.isAllType());
      assertEquals(false, recordType0.isNoType());
      assertEquals(false, recordType0.isNullType());
      assertEquals(false, recordType0.isInterface());
      assertEquals(false, recordType0.isBooleanValueType());
      assertEquals(false, recordType0.isEnumType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(1, hashMap0.size());
      assertEquals(false, hashMap0.isEmpty());
      assertNull(recordTypeBuilder_RecordProperty1);
      
      recordType0.setResolvedTypeInternal(noObjectType0);
      assertEquals(false, noObjectType0.hasCachedValues());
      assertNull(noObjectType0.getTemplateTypeName());
      assertNull(noObjectType0.getReferenceName());
      assertEquals(false, noObjectType0.isFunctionType());
      assertEquals(false, noObjectType0.isOrdinaryFunction());
      assertEquals(true, noObjectType0.isNoObjectType());
      assertEquals(true, noObjectType0.canBeCalled());
      assertEquals(false, noObjectType0.isNominalConstructor());
      assertEquals(false, noObjectType0.isNoType());
      assertEquals(false, noObjectType0.isNullType());
      assertEquals(false, noObjectType0.isRecordType());
      assertEquals(false, noObjectType0.isTemplateType());
      assertEquals(false, noObjectType0.isUnionType());
      assertEquals(false, noObjectType0.isAllType());
      assertEquals(false, noObjectType0.isReturnTypeInferred());
      assertEquals(2147483647, noObjectType0.getMaxArguments());
      assertEquals(true, noObjectType0.hasInstanceType());
      assertEquals(false, noObjectType0.isResolved());
      assertEquals(false, noObjectType0.isStringValueType());
      assertEquals(false, noObjectType0.isNominalType());
      assertEquals(false, noObjectType0.isInterface());
      assertEquals(true, noObjectType0.matchesStringContext());
      assertEquals(false, noObjectType0.isFunctionPrototypeType());
      assertEquals(false, noObjectType0.isEnumElementType());
      assertEquals(true, noObjectType0.matchesObjectContext());
      assertEquals(false, noObjectType0.isBooleanValueType());
      assertEquals(2147483647, noObjectType0.getPropertiesCount());
      assertEquals(BooleanLiteralSet.TRUE, noObjectType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noObjectType0.isCheckedUnknownType());
      assertEquals("NoObject", noObjectType0.toString());
      assertEquals(true, noObjectType0.matchesNumberContext());
      assertEquals(false, noObjectType0.isEnumType());
      assertEquals(true, noObjectType0.isConstructor());
      assertEquals(false, noObjectType0.isNoResolvedType());
      assertEquals(false, noObjectType0.isNumberValueType());
      assertEquals(false, noObjectType0.isVoidType());
      assertEquals(0, noObjectType0.getExtendedInterfacesCount());
      assertEquals(false, recordType0.isCheckedUnknownType());
      assertEquals(false, recordType0.isVoidType());
      assertEquals(false, recordType0.isStringValueType());
      assertEquals(false, recordType0.isTemplateType());
      assertEquals(false, recordType0.isConstructor());
      assertEquals(false, recordType0.isNoResolvedType());
      assertEquals(false, recordType0.isNominalType());
      assertEquals(false, recordType0.isNominalConstructor());
      assertEquals(false, recordType0.isEnumElementType());
      assertEquals(false, recordType0.isFunctionType());
      assertEquals(BooleanLiteralSet.TRUE, recordType0.getPossibleToBooleanOutcomes());
      assertEquals(false, recordType0.isNoObjectType());
      assertEquals(true, recordType0.isRecordType());
      assertEquals(false, recordType0.isFunctionPrototypeType());
      assertEquals(false, recordType0.isOrdinaryFunction());
      assertEquals(false, recordType0.isNumberValueType());
      assertEquals(false, recordType0.isUnionType());
      assertEquals(false, recordType0.isAllType());
      assertEquals(true, recordType0.isResolved());
      assertEquals(false, recordType0.isNoType());
      assertEquals(false, recordType0.isNullType());
      assertEquals(false, recordType0.isInterface());
      assertEquals(false, recordType0.isBooleanValueType());
      assertEquals(false, recordType0.isEnumType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, numberType0.isCheckedUnknownType());
      assertEquals("number", numberType0.getDisplayName());
      assertEquals(false, numberType0.isNominalType());
      assertEquals(true, numberType0.matchesStringContext());
      assertEquals(false, numberType0.isNoType());
      assertEquals(true, numberType0.matchesNumberContext());
      assertEquals(false, numberType0.isEnumType());
      assertEquals(false, numberType0.isStringValueType());
      assertEquals(false, numberType0.isNullable());
      assertEquals(false, numberType0.isNoObjectType());
      assertEquals(false, numberType0.isFunctionPrototypeType());
      assertEquals(false, numberType0.isAllType());
      assertEquals(false, numberType0.isOrdinaryFunction());
      assertEquals(true, numberType0.matchesObjectContext());
      assertEquals(false, numberType0.isRecordType());
      assertEquals(BooleanLiteralSet.BOTH, numberType0.getPossibleToBooleanOutcomes());
      assertEquals("number", numberType0.toString());
      assertEquals(false, numberType0.isInterface());
      assertEquals(false, numberType0.isVoidType());
      assertEquals(false, numberType0.isTemplateType());
      assertEquals(false, numberType0.isNominalConstructor());
      assertEquals(false, numberType0.isConstructor());
      assertEquals(false, numberType0.isEnumElementType());
      assertEquals(false, numberType0.isBooleanValueType());
      assertEquals(false, numberType0.isNullType());
      assertEquals(false, numberType0.isNoResolvedType());
      assertEquals(false, numberType0.isFunctionType());
      assertEquals(true, numberType0.isNumberValueType());
      assertEquals(false, numberType0.isResolved());
      assertEquals(false, numberType0.isUnionType());
      assertEquals(1, hashMap0.size());
      assertEquals(false, hashMap0.isEmpty());
      
      RecordType recordType1 = jSTypeRegistry0.createRecordType((Map<String, RecordTypeBuilder.RecordProperty>) hashMap0);
      assertNotSame(recordType1, recordType0);
      assertFalse(recordType1.equals((Object)recordType0));
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, recordType1.isStringValueType());
      assertEquals(false, recordType1.isBooleanValueType());
      assertEquals(false, recordType1.isCheckedUnknownType());
      assertEquals(false, recordType1.isNumberValueType());
      assertEquals(false, recordType1.isNominalConstructor());
      assertEquals(false, recordType1.isFunctionType());
      assertEquals(false, recordType1.isConstructor());
      assertEquals(false, recordType1.isResolved());
      assertEquals(false, recordType1.isAllType());
      assertEquals(false, recordType1.isNoType());
      assertEquals(false, recordType1.isInterface());
      assertEquals(false, recordType1.isOrdinaryFunction());
      assertEquals(false, recordType1.isUnionType());
      assertEquals(false, recordType1.isTemplateType());
      assertEquals(true, recordType1.isRecordType());
      assertEquals(false, recordType1.isNominalType());
      assertEquals(BooleanLiteralSet.TRUE, recordType1.getPossibleToBooleanOutcomes());
      assertEquals(false, recordType1.isNoResolvedType());
      assertEquals(false, recordType1.isEnumType());
      assertEquals(false, recordType1.isFunctionPrototypeType());
      assertEquals(false, recordType1.isVoidType());
      assertEquals(false, recordType1.isNoObjectType());
      assertEquals(false, recordType1.isNullType());
      assertEquals(false, recordType1.isEnumElementType());
      assertEquals(1, hashMap0.size());
      assertEquals(false, hashMap0.isEmpty());
      assertNotNull(recordType1);
      
      RecordType recordType2 = (RecordType)JSType.safeResolve(recordType1, simpleErrorReporter0, recordType1);
      assertNotSame(recordType2, recordType0);
      assertSame(recordType2, recordType1);
      assertNotSame(recordType1, recordType0);
      assertSame(recordType1, recordType2);
      assertFalse(recordType2.equals((Object)recordType0));
      assertFalse(recordType1.equals((Object)recordType0));
      assertEquals(false, recordType2.isAllType());
      assertEquals(false, recordType2.isNullType());
      assertEquals(false, recordType2.isNominalConstructor());
      assertEquals(false, recordType2.isNoObjectType());
      assertEquals(true, recordType2.isResolved());
      assertEquals(false, recordType2.isNumberValueType());
      assertEquals(true, recordType2.isRecordType());
      assertEquals(false, recordType2.isEnumType());
      assertEquals(BooleanLiteralSet.TRUE, recordType2.getPossibleToBooleanOutcomes());
      assertEquals(false, recordType2.isCheckedUnknownType());
      assertEquals(false, recordType2.isNominalType());
      assertEquals(false, recordType2.isTemplateType());
      assertEquals(false, recordType2.isInterface());
      assertEquals(false, recordType2.isConstructor());
      assertEquals(false, recordType2.isVoidType());
      assertEquals(false, recordType2.isFunctionPrototypeType());
      assertEquals(false, recordType2.isOrdinaryFunction());
      assertEquals(false, recordType2.isEnumElementType());
      assertEquals(false, recordType2.isFunctionType());
      assertEquals(false, recordType2.isNoResolvedType());
      assertEquals(false, recordType2.isStringValueType());
      assertEquals(false, recordType2.isBooleanValueType());
      assertEquals(false, recordType2.isNoType());
      assertEquals(false, recordType2.isUnionType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, recordType1.isStringValueType());
      assertEquals(false, recordType1.isBooleanValueType());
      assertEquals(false, recordType1.isCheckedUnknownType());
      assertEquals(false, recordType1.isNumberValueType());
      assertEquals(false, recordType1.isNominalConstructor());
      assertEquals(false, recordType1.isFunctionType());
      assertEquals(false, recordType1.isConstructor());
      assertEquals(false, recordType1.isAllType());
      assertEquals(false, recordType1.isNoType());
      assertEquals(false, recordType1.isInterface());
      assertEquals(false, recordType1.isOrdinaryFunction());
      assertEquals(false, recordType1.isUnionType());
      assertEquals(false, recordType1.isTemplateType());
      assertEquals(true, recordType1.isRecordType());
      assertEquals(false, recordType1.isNominalType());
      assertEquals(BooleanLiteralSet.TRUE, recordType1.getPossibleToBooleanOutcomes());
      assertEquals(true, recordType1.isResolved());
      assertEquals(false, recordType1.isNoResolvedType());
      assertEquals(false, recordType1.isEnumType());
      assertEquals(false, recordType1.isFunctionPrototypeType());
      assertEquals(false, recordType1.isVoidType());
      assertEquals(false, recordType1.isNoObjectType());
      assertEquals(false, recordType1.isNullType());
      assertEquals(false, recordType1.isEnumElementType());
      assertEquals(1, hashMap0.size());
      assertEquals(false, hashMap0.isEmpty());
      assertNotNull(recordType2);
      
      RecordType recordType3 = jSTypeRegistry0.createRecordType((Map<String, RecordTypeBuilder.RecordProperty>) hashMap0);
      assertNotSame(recordType3, recordType2);
      assertNotSame(recordType3, recordType1);
      assertNotSame(recordType3, recordType0);
      assertFalse(recordType3.equals((Object)recordType2));
      assertFalse(recordType3.equals((Object)recordType1));
      assertFalse(recordType3.equals((Object)recordType0));
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, recordType3.isNoResolvedType());
      assertEquals(false, recordType3.isNumberValueType());
      assertEquals(false, recordType3.isStringValueType());
      assertEquals(false, recordType3.isUnionType());
      assertEquals(false, recordType3.isNominalConstructor());
      assertEquals(false, recordType3.isBooleanValueType());
      assertEquals(false, recordType3.isAllType());
      assertEquals(false, recordType3.isFunctionType());
      assertEquals(false, recordType3.isOrdinaryFunction());
      assertEquals(false, recordType3.isConstructor());
      assertEquals(false, recordType3.isResolved());
      assertEquals(false, recordType3.isNoType());
      assertEquals(true, recordType3.isRecordType());
      assertEquals(false, recordType3.isNominalType());
      assertEquals(false, recordType3.isEnumElementType());
      assertEquals(false, recordType3.isNoObjectType());
      assertEquals(false, recordType3.isEnumType());
      assertEquals(BooleanLiteralSet.TRUE, recordType3.getPossibleToBooleanOutcomes());
      assertEquals(false, recordType3.isCheckedUnknownType());
      assertEquals(false, recordType3.isNullType());
      assertEquals(false, recordType3.isFunctionPrototypeType());
      assertEquals(false, recordType3.isTemplateType());
      assertEquals(false, recordType3.isInterface());
      assertEquals(false, recordType3.isVoidType());
      assertEquals(1, hashMap0.size());
      assertEquals(false, hashMap0.isEmpty());
      assertNotNull(recordType3);
  }

  @Test
  public void test2()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      HashMap<String, RecordTypeBuilder.RecordProperty> hashMap0 = new HashMap<String, RecordTypeBuilder.RecordProperty>();
      assertEquals(true, hashMap0.isEmpty());
      assertEquals("{}", hashMap0.toString());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      RecordType recordType0 = new RecordType(jSTypeRegistry0, hashMap0);
      assertEquals(true, hashMap0.isEmpty());
      assertEquals("{}", hashMap0.toString());
      assertEquals(0, hashMap0.size());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(true, recordType0.isRecordType());
      assertEquals(false, recordType0.isUnionType());
      assertEquals(false, recordType0.isFunctionPrototypeType());
      assertEquals(false, recordType0.isConstructor());
      assertEquals(false, recordType0.isAllType());
      assertEquals(false, recordType0.isFunctionType());
      assertEquals(false, recordType0.isNullType());
      assertEquals(false, recordType0.isTemplateType());
      assertEquals(false, recordType0.isCheckedUnknownType());
      assertEquals(false, recordType0.isNominalConstructor());
      assertEquals(false, recordType0.isNoType());
      assertEquals(false, recordType0.isVoidType());
      assertEquals(false, recordType0.isEnumElementType());
      assertEquals(false, recordType0.isInterface());
      assertEquals(false, recordType0.isNoObjectType());
      assertEquals(false, recordType0.isNominalType());
      assertEquals(false, recordType0.isBooleanValueType());
      assertEquals(false, recordType0.isNoResolvedType());
      assertEquals(false, recordType0.isOrdinaryFunction());
      assertEquals(false, recordType0.isResolved());
      assertEquals(false, recordType0.isEnumType());
      assertEquals(false, recordType0.isNumberValueType());
      assertEquals(BooleanLiteralSet.TRUE, recordType0.getPossibleToBooleanOutcomes());
      assertEquals(false, recordType0.isStringValueType());
      assertNotNull(recordType0);
      
      String string0 = "";
      Node node0 = null;
      NumberType numberType0 = new NumberType(jSTypeRegistry0);
      assertEquals(false, numberType0.isNoResolvedType());
      assertEquals(false, numberType0.isCheckedUnknownType());
      assertEquals(false, numberType0.isNominalConstructor());
      assertEquals(false, numberType0.isNullType());
      assertEquals(false, numberType0.isVoidType());
      assertEquals(true, numberType0.matchesObjectContext());
      assertEquals(false, numberType0.isNoType());
      assertEquals(false, numberType0.isEnumElementType());
      assertEquals(false, numberType0.isBooleanValueType());
      assertEquals(BooleanLiteralSet.BOTH, numberType0.getPossibleToBooleanOutcomes());
      assertEquals(false, numberType0.isRecordType());
      assertEquals(false, numberType0.isConstructor());
      assertEquals(false, numberType0.isNominalType());
      assertEquals(false, numberType0.isEnumType());
      assertEquals(false, numberType0.isAllType());
      assertEquals(false, numberType0.isOrdinaryFunction());
      assertEquals(false, numberType0.isTemplateType());
      assertEquals(false, numberType0.isStringValueType());
      assertEquals(false, numberType0.isInterface());
      assertEquals(false, numberType0.isUnionType());
      assertEquals(false, numberType0.isNullable());
      assertEquals(false, numberType0.isFunctionType());
      assertEquals(true, numberType0.isNumberValueType());
      assertEquals("number", numberType0.toString());
      assertEquals(true, numberType0.matchesStringContext());
      assertEquals(false, numberType0.isResolved());
      assertEquals(true, numberType0.matchesNumberContext());
      assertEquals(false, numberType0.isNoObjectType());
      assertEquals(false, numberType0.isFunctionPrototypeType());
      assertEquals("number", numberType0.getDisplayName());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(numberType0);
      
      String string1 = " kWX?S)VG#>";
      assertNotSame(string1, string0);
      
      RecordTypeBuilder.RecordProperty recordTypeBuilder_RecordProperty0 = new RecordTypeBuilder.RecordProperty(numberType0, node0);
      assertEquals(false, numberType0.isNoResolvedType());
      assertEquals(false, numberType0.isCheckedUnknownType());
      assertEquals(false, numberType0.isNominalConstructor());
      assertEquals(false, numberType0.isNullType());
      assertEquals(false, numberType0.isVoidType());
      assertEquals(true, numberType0.matchesObjectContext());
      assertEquals(false, numberType0.isNoType());
      assertEquals(false, numberType0.isEnumElementType());
      assertEquals(false, numberType0.isBooleanValueType());
      assertEquals(BooleanLiteralSet.BOTH, numberType0.getPossibleToBooleanOutcomes());
      assertEquals(false, numberType0.isRecordType());
      assertEquals(false, numberType0.isConstructor());
      assertEquals(false, numberType0.isNominalType());
      assertEquals(false, numberType0.isEnumType());
      assertEquals(false, numberType0.isAllType());
      assertEquals(false, numberType0.isOrdinaryFunction());
      assertEquals(false, numberType0.isTemplateType());
      assertEquals(false, numberType0.isStringValueType());
      assertEquals(false, numberType0.isInterface());
      assertEquals(false, numberType0.isUnionType());
      assertEquals(false, numberType0.isNullable());
      assertEquals(false, numberType0.isFunctionType());
      assertEquals(true, numberType0.isNumberValueType());
      assertEquals("number", numberType0.toString());
      assertEquals(true, numberType0.matchesStringContext());
      assertEquals(false, numberType0.isResolved());
      assertEquals(true, numberType0.matchesNumberContext());
      assertEquals(false, numberType0.isNoObjectType());
      assertEquals(false, numberType0.isFunctionPrototypeType());
      assertEquals("number", numberType0.getDisplayName());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(recordTypeBuilder_RecordProperty0);
      
      RecordTypeBuilder.RecordProperty recordTypeBuilder_RecordProperty1 = hashMap0.put(string1, recordTypeBuilder_RecordProperty0);
      assertNotSame(string1, string0);
      assertFalse(string1.equals((Object)string0));
      assertEquals(1, hashMap0.size());
      assertEquals(false, hashMap0.isEmpty());
      assertEquals(false, numberType0.isNoResolvedType());
      assertEquals(false, numberType0.isCheckedUnknownType());
      assertEquals(false, numberType0.isNominalConstructor());
      assertEquals(false, numberType0.isNullType());
      assertEquals(false, numberType0.isVoidType());
      assertEquals(true, numberType0.matchesObjectContext());
      assertEquals(false, numberType0.isNoType());
      assertEquals(false, numberType0.isEnumElementType());
      assertEquals(false, numberType0.isBooleanValueType());
      assertEquals(BooleanLiteralSet.BOTH, numberType0.getPossibleToBooleanOutcomes());
      assertEquals(false, numberType0.isRecordType());
      assertEquals(false, numberType0.isConstructor());
      assertEquals(false, numberType0.isNominalType());
      assertEquals(false, numberType0.isEnumType());
      assertEquals(false, numberType0.isAllType());
      assertEquals(false, numberType0.isOrdinaryFunction());
      assertEquals(false, numberType0.isTemplateType());
      assertEquals(false, numberType0.isStringValueType());
      assertEquals(false, numberType0.isInterface());
      assertEquals(false, numberType0.isUnionType());
      assertEquals(false, numberType0.isNullable());
      assertEquals(false, numberType0.isFunctionType());
      assertEquals(true, numberType0.isNumberValueType());
      assertEquals("number", numberType0.toString());
      assertEquals(true, numberType0.matchesStringContext());
      assertEquals(false, numberType0.isResolved());
      assertEquals(true, numberType0.matchesNumberContext());
      assertEquals(false, numberType0.isNoObjectType());
      assertEquals(false, numberType0.isFunctionPrototypeType());
      assertEquals("number", numberType0.getDisplayName());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNull(recordTypeBuilder_RecordProperty1);
      
      RecordTypeBuilder.RecordProperty recordTypeBuilder_RecordProperty2 = hashMap0.put(string0, recordTypeBuilder_RecordProperty0);
      assertNotSame(string0, string1);
      assertFalse(string0.equals((Object)string1));
      assertEquals(2, hashMap0.size());
      assertEquals(false, hashMap0.isEmpty());
      assertEquals(false, numberType0.isNoResolvedType());
      assertEquals(false, numberType0.isCheckedUnknownType());
      assertEquals(false, numberType0.isNominalConstructor());
      assertEquals(false, numberType0.isNullType());
      assertEquals(false, numberType0.isVoidType());
      assertEquals(true, numberType0.matchesObjectContext());
      assertEquals(false, numberType0.isNoType());
      assertEquals(false, numberType0.isEnumElementType());
      assertEquals(false, numberType0.isBooleanValueType());
      assertEquals(BooleanLiteralSet.BOTH, numberType0.getPossibleToBooleanOutcomes());
      assertEquals(false, numberType0.isRecordType());
      assertEquals(false, numberType0.isConstructor());
      assertEquals(false, numberType0.isNominalType());
      assertEquals(false, numberType0.isEnumType());
      assertEquals(false, numberType0.isAllType());
      assertEquals(false, numberType0.isOrdinaryFunction());
      assertEquals(false, numberType0.isTemplateType());
      assertEquals(false, numberType0.isStringValueType());
      assertEquals(false, numberType0.isInterface());
      assertEquals(false, numberType0.isUnionType());
      assertEquals(false, numberType0.isNullable());
      assertEquals(false, numberType0.isFunctionType());
      assertEquals(true, numberType0.isNumberValueType());
      assertEquals("number", numberType0.toString());
      assertEquals(true, numberType0.matchesStringContext());
      assertEquals(false, numberType0.isResolved());
      assertEquals(true, numberType0.matchesNumberContext());
      assertEquals(false, numberType0.isNoObjectType());
      assertEquals(false, numberType0.isFunctionPrototypeType());
      assertEquals("number", numberType0.getDisplayName());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNull(recordTypeBuilder_RecordProperty2);
      
      RecordType recordType1 = jSTypeRegistry0.createRecordType((Map<String, RecordTypeBuilder.RecordProperty>) hashMap0);
      assertNotSame(recordType1, recordType0);
      assertFalse(recordType1.equals((Object)recordType0));
      assertEquals(2, hashMap0.size());
      assertEquals(false, hashMap0.isEmpty());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, recordType1.isResolved());
      assertEquals(false, recordType1.isTemplateType());
      assertEquals(false, recordType1.isEnumElementType());
      assertEquals(false, recordType1.isNominalType());
      assertEquals(false, recordType1.isVoidType());
      assertEquals(false, recordType1.isCheckedUnknownType());
      assertEquals(false, recordType1.isNumberValueType());
      assertEquals(false, recordType1.isNominalConstructor());
      assertEquals(BooleanLiteralSet.TRUE, recordType1.getPossibleToBooleanOutcomes());
      assertEquals(false, recordType1.isUnionType());
      assertEquals(false, recordType1.isEnumType());
      assertEquals(false, recordType1.isOrdinaryFunction());
      assertEquals(false, recordType1.isConstructor());
      assertEquals(false, recordType1.isFunctionType());
      assertEquals(false, recordType1.isNoType());
      assertEquals(true, recordType1.isRecordType());
      assertEquals(false, recordType1.isNullType());
      assertEquals(false, recordType1.isNoObjectType());
      assertEquals(false, recordType1.isInterface());
      assertEquals(false, recordType1.isFunctionPrototypeType());
      assertEquals(false, recordType1.isNoResolvedType());
      assertEquals(false, recordType1.isAllType());
      assertEquals(false, recordType1.isBooleanValueType());
      assertEquals(false, recordType1.isStringValueType());
      assertNotNull(recordType1);
      
      RecordType recordType2 = (RecordType)recordType1.getGreatestSubtypeHelper(recordType0);
      assertNotSame(recordType1, recordType2);
      assertNotSame(recordType1, recordType0);
      assertNotSame(recordType0, recordType1);
      assertNotSame(recordType0, recordType2);
      assertNotSame(recordType2, recordType0);
      assertNotSame(recordType2, recordType1);
      assertTrue(recordType1.equals((Object)recordType2));
      assertFalse(recordType1.equals((Object)recordType0));
      assertFalse(recordType0.equals((Object)recordType1));
      assertFalse(recordType0.equals((Object)recordType2));
      assertFalse(recordType2.equals((Object)recordType0));
      assertTrue(recordType2.equals((Object)recordType1));
      assertEquals(2, hashMap0.size());
      assertEquals(false, hashMap0.isEmpty());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, recordType1.isResolved());
      assertEquals(false, recordType1.isTemplateType());
      assertEquals(false, recordType1.isEnumElementType());
      assertEquals(false, recordType1.isNominalType());
      assertEquals(false, recordType1.isVoidType());
      assertEquals(false, recordType1.isCheckedUnknownType());
      assertEquals(false, recordType1.isNumberValueType());
      assertEquals(false, recordType1.isNominalConstructor());
      assertEquals(BooleanLiteralSet.TRUE, recordType1.getPossibleToBooleanOutcomes());
      assertEquals(false, recordType1.isUnionType());
      assertEquals(false, recordType1.isEnumType());
      assertEquals(false, recordType1.isOrdinaryFunction());
      assertEquals(false, recordType1.isConstructor());
      assertEquals(false, recordType1.isFunctionType());
      assertEquals(false, recordType1.isNoType());
      assertEquals(true, recordType1.isRecordType());
      assertEquals(false, recordType1.isNullType());
      assertEquals(false, recordType1.isNoObjectType());
      assertEquals(false, recordType1.isInterface());
      assertEquals(false, recordType1.isFunctionPrototypeType());
      assertEquals(false, recordType1.isNoResolvedType());
      assertEquals(false, recordType1.isAllType());
      assertEquals(false, recordType1.isBooleanValueType());
      assertEquals(false, recordType1.isStringValueType());
      assertEquals(true, recordType0.isRecordType());
      assertEquals(false, recordType0.isUnionType());
      assertEquals(false, recordType0.isFunctionPrototypeType());
      assertEquals(false, recordType0.isConstructor());
      assertEquals(false, recordType0.isAllType());
      assertEquals(false, recordType0.isFunctionType());
      assertEquals(false, recordType0.isNullType());
      assertEquals(false, recordType0.isTemplateType());
      assertEquals(false, recordType0.isCheckedUnknownType());
      assertEquals(false, recordType0.isNominalConstructor());
      assertEquals(false, recordType0.isNoType());
      assertEquals(false, recordType0.isVoidType());
      assertEquals(false, recordType0.isEnumElementType());
      assertEquals(false, recordType0.isInterface());
      assertEquals(false, recordType0.isNoObjectType());
      assertEquals(false, recordType0.isNominalType());
      assertEquals(false, recordType0.isBooleanValueType());
      assertEquals(false, recordType0.isNoResolvedType());
      assertEquals(false, recordType0.isOrdinaryFunction());
      assertEquals(false, recordType0.isResolved());
      assertEquals(false, recordType0.isEnumType());
      assertEquals(false, recordType0.isNumberValueType());
      assertEquals(BooleanLiteralSet.TRUE, recordType0.getPossibleToBooleanOutcomes());
      assertEquals(false, recordType0.isStringValueType());
      assertEquals(false, recordType2.isNoObjectType());
      assertEquals(false, recordType2.isFunctionType());
      assertEquals(false, recordType2.isBooleanValueType());
      assertEquals(false, recordType2.isNumberValueType());
      assertEquals(false, recordType2.isInterface());
      assertEquals(BooleanLiteralSet.TRUE, recordType2.getPossibleToBooleanOutcomes());
      assertEquals(false, recordType2.isResolved());
      assertEquals(false, recordType2.isOrdinaryFunction());
      assertEquals(false, recordType2.isAllType());
      assertEquals(false, recordType2.isEnumElementType());
      assertEquals(false, recordType2.isCheckedUnknownType());
      assertEquals(false, recordType2.isNullType());
      assertEquals(false, recordType2.isVoidType());
      assertEquals(false, recordType2.isConstructor());
      assertEquals(false, recordType2.isTemplateType());
      assertEquals(false, recordType2.isStringValueType());
      assertEquals(false, recordType2.isNominalType());
      assertEquals(false, recordType2.isNominalConstructor());
      assertEquals(false, recordType2.isNoResolvedType());
      assertEquals(true, recordType2.isRecordType());
      assertEquals(false, recordType2.isEnumType());
      assertEquals(false, recordType2.isFunctionPrototypeType());
      assertEquals(false, recordType2.isUnionType());
      assertEquals(false, recordType2.isNoType());
      assertNotNull(recordType2);
      
      boolean boolean0 = recordType1.removeProperty(string0);
      assertNotSame(recordType1, recordType2);
      assertNotSame(recordType1, recordType0);
      assertNotSame(string0, string1);
      assertTrue(recordType1.equals((Object)recordType2));
      assertFalse(recordType1.equals((Object)recordType0));
      assertFalse(string0.equals((Object)string1));
      assertEquals(2, hashMap0.size());
      assertEquals(false, hashMap0.isEmpty());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, recordType1.isResolved());
      assertEquals(false, recordType1.isTemplateType());
      assertEquals(false, recordType1.isEnumElementType());
      assertEquals(false, recordType1.isNominalType());
      assertEquals(false, recordType1.isVoidType());
      assertEquals(false, recordType1.isCheckedUnknownType());
      assertEquals(false, recordType1.isNumberValueType());
      assertEquals(false, recordType1.isNominalConstructor());
      assertEquals(BooleanLiteralSet.TRUE, recordType1.getPossibleToBooleanOutcomes());
      assertEquals(false, recordType1.isUnionType());
      assertEquals(false, recordType1.isEnumType());
      assertEquals(false, recordType1.isOrdinaryFunction());
      assertEquals(false, recordType1.isConstructor());
      assertEquals(false, recordType1.isFunctionType());
      assertEquals(false, recordType1.isNoType());
      assertEquals(true, recordType1.isRecordType());
      assertEquals(false, recordType1.isNullType());
      assertEquals(false, recordType1.isNoObjectType());
      assertEquals(false, recordType1.isInterface());
      assertEquals(false, recordType1.isFunctionPrototypeType());
      assertEquals(false, recordType1.isNoResolvedType());
      assertEquals(false, recordType1.isAllType());
      assertEquals(false, recordType1.isBooleanValueType());
      assertEquals(false, recordType1.isStringValueType());
      assertTrue(boolean0);
      
      RecordType recordType3 = (RecordType)recordType1.getGreatestSubtypeHelper(recordType1);
      assertNotSame(recordType1, recordType2);
      assertNotSame(recordType1, recordType0);
      assertNotSame(recordType1, recordType3);
      assertNotSame(recordType3, recordType2);
      assertNotSame(recordType3, recordType0);
      assertNotSame(recordType3, recordType1);
      assertTrue(recordType1.equals((Object)recordType2));
      assertFalse(recordType1.equals((Object)recordType0));
      assertFalse(recordType1.equals((Object)recordType3));
      assertFalse(recordType3.equals((Object)recordType2));
      assertFalse(recordType3.equals((Object)recordType0));
      assertFalse(recordType3.equals((Object)recordType1));
      assertEquals(2, hashMap0.size());
      assertEquals(false, hashMap0.isEmpty());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, recordType1.isResolved());
      assertEquals(false, recordType1.isTemplateType());
      assertEquals(false, recordType1.isEnumElementType());
      assertEquals(false, recordType1.isNominalType());
      assertEquals(false, recordType1.isVoidType());
      assertEquals(false, recordType1.isCheckedUnknownType());
      assertEquals(false, recordType1.isNumberValueType());
      assertEquals(false, recordType1.isNominalConstructor());
      assertEquals(BooleanLiteralSet.TRUE, recordType1.getPossibleToBooleanOutcomes());
      assertEquals(false, recordType1.isUnionType());
      assertEquals(false, recordType1.isEnumType());
      assertEquals(false, recordType1.isOrdinaryFunction());
      assertEquals(false, recordType1.isConstructor());
      assertEquals(false, recordType1.isFunctionType());
      assertEquals(false, recordType1.isNoType());
      assertEquals(true, recordType1.isRecordType());
      assertEquals(false, recordType1.isNullType());
      assertEquals(false, recordType1.isNoObjectType());
      assertEquals(false, recordType1.isInterface());
      assertEquals(false, recordType1.isFunctionPrototypeType());
      assertEquals(false, recordType1.isNoResolvedType());
      assertEquals(false, recordType1.isAllType());
      assertEquals(false, recordType1.isBooleanValueType());
      assertEquals(false, recordType1.isStringValueType());
      assertEquals(false, recordType3.isEnumType());
      assertEquals(false, recordType3.isNoResolvedType());
      assertEquals(false, recordType3.isResolved());
      assertEquals(false, recordType3.isNumberValueType());
      assertEquals(false, recordType3.isNominalConstructor());
      assertEquals(false, recordType3.isInterface());
      assertEquals(false, recordType3.isNoType());
      assertEquals(false, recordType3.isUnionType());
      assertEquals(false, recordType3.isEnumElementType());
      assertEquals(false, recordType3.isBooleanValueType());
      assertEquals(BooleanLiteralSet.TRUE, recordType3.getPossibleToBooleanOutcomes());
      assertEquals(false, recordType3.isFunctionPrototypeType());
      assertEquals(false, recordType3.isNominalType());
      assertEquals(false, recordType3.isStringValueType());
      assertEquals(false, recordType3.isTemplateType());
      assertEquals(false, recordType3.isNullType());
      assertEquals(false, recordType3.isFunctionType());
      assertEquals(false, recordType3.isAllType());
      assertEquals(false, recordType3.isNoObjectType());
      assertEquals(false, recordType3.isCheckedUnknownType());
      assertEquals(true, recordType3.isRecordType());
      assertEquals(false, recordType3.isOrdinaryFunction());
      assertEquals(false, recordType3.isConstructor());
      assertEquals(false, recordType3.isVoidType());
      assertNotNull(recordType3);
  }

  @Test
  public void test3()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      HashMap<String, RecordTypeBuilder.RecordProperty> hashMap0 = new HashMap<String, RecordTypeBuilder.RecordProperty>();
      assertEquals("{}", hashMap0.toString());
      assertEquals(true, hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      RecordType recordType0 = new RecordType(jSTypeRegistry0, hashMap0);
      assertEquals(false, recordType0.isNoType());
      assertEquals(false, recordType0.isAllType());
      assertEquals(false, recordType0.isTemplateType());
      assertEquals(false, recordType0.isBooleanValueType());
      assertEquals(false, recordType0.isNullType());
      assertEquals(false, recordType0.isUnionType());
      assertEquals(false, recordType0.isStringValueType());
      assertEquals(false, recordType0.isNominalType());
      assertEquals(false, recordType0.isConstructor());
      assertEquals(true, recordType0.isRecordType());
      assertEquals(false, recordType0.isNoResolvedType());
      assertEquals(BooleanLiteralSet.TRUE, recordType0.getPossibleToBooleanOutcomes());
      assertEquals(false, recordType0.isNumberValueType());
      assertEquals(false, recordType0.isVoidType());
      assertEquals(false, recordType0.isNoObjectType());
      assertEquals(false, recordType0.isFunctionPrototypeType());
      assertEquals(false, recordType0.isInterface());
      assertEquals(false, recordType0.isNominalConstructor());
      assertEquals(false, recordType0.isCheckedUnknownType());
      assertEquals(false, recordType0.isResolved());
      assertEquals(false, recordType0.isEnumElementType());
      assertEquals(false, recordType0.isFunctionType());
      assertEquals(false, recordType0.isOrdinaryFunction());
      assertEquals(false, recordType0.isEnumType());
      assertEquals("{}", hashMap0.toString());
      assertEquals(true, hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(recordType0);
      
      String string0 = "";
      Node node0 = null;
      NumberType numberType0 = new NumberType(jSTypeRegistry0);
      assertEquals(false, numberType0.isTemplateType());
      assertEquals(false, numberType0.isEnumElementType());
      assertEquals(true, numberType0.isNumberValueType());
      assertEquals(false, numberType0.isInterface());
      assertEquals(false, numberType0.isConstructor());
      assertEquals(false, numberType0.isFunctionPrototypeType());
      assertEquals(true, numberType0.matchesNumberContext());
      assertEquals(true, numberType0.matchesObjectContext());
      assertEquals(false, numberType0.isNominalType());
      assertEquals(false, numberType0.isNullable());
      assertEquals(false, numberType0.isRecordType());
      assertEquals("number", numberType0.toString());
      assertEquals(false, numberType0.isNoObjectType());
      assertEquals(false, numberType0.isNominalConstructor());
      assertEquals(false, numberType0.isUnionType());
      assertEquals(false, numberType0.isResolved());
      assertEquals("number", numberType0.getDisplayName());
      assertEquals(false, numberType0.isNoType());
      assertEquals(false, numberType0.isCheckedUnknownType());
      assertEquals(false, numberType0.isNoResolvedType());
      assertEquals(BooleanLiteralSet.BOTH, numberType0.getPossibleToBooleanOutcomes());
      assertEquals(false, numberType0.isNullType());
      assertEquals(false, numberType0.isStringValueType());
      assertEquals(true, numberType0.matchesStringContext());
      assertEquals(false, numberType0.isOrdinaryFunction());
      assertEquals(false, numberType0.isFunctionType());
      assertEquals(false, numberType0.isBooleanValueType());
      assertEquals(false, numberType0.isVoidType());
      assertEquals(false, numberType0.isEnumType());
      assertEquals(false, numberType0.isAllType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(numberType0);
      
      RecordTypeBuilder.RecordProperty recordTypeBuilder_RecordProperty0 = new RecordTypeBuilder.RecordProperty(numberType0, node0);
      assertEquals(false, numberType0.isTemplateType());
      assertEquals(false, numberType0.isEnumElementType());
      assertEquals(true, numberType0.isNumberValueType());
      assertEquals(false, numberType0.isInterface());
      assertEquals(false, numberType0.isConstructor());
      assertEquals(false, numberType0.isFunctionPrototypeType());
      assertEquals(true, numberType0.matchesNumberContext());
      assertEquals(true, numberType0.matchesObjectContext());
      assertEquals(false, numberType0.isNominalType());
      assertEquals(false, numberType0.isNullable());
      assertEquals(false, numberType0.isRecordType());
      assertEquals("number", numberType0.toString());
      assertEquals(false, numberType0.isNoObjectType());
      assertEquals(false, numberType0.isNominalConstructor());
      assertEquals(false, numberType0.isUnionType());
      assertEquals(false, numberType0.isResolved());
      assertEquals("number", numberType0.getDisplayName());
      assertEquals(false, numberType0.isNoType());
      assertEquals(false, numberType0.isCheckedUnknownType());
      assertEquals(false, numberType0.isNoResolvedType());
      assertEquals(BooleanLiteralSet.BOTH, numberType0.getPossibleToBooleanOutcomes());
      assertEquals(false, numberType0.isNullType());
      assertEquals(false, numberType0.isStringValueType());
      assertEquals(true, numberType0.matchesStringContext());
      assertEquals(false, numberType0.isOrdinaryFunction());
      assertEquals(false, numberType0.isFunctionType());
      assertEquals(false, numberType0.isBooleanValueType());
      assertEquals(false, numberType0.isVoidType());
      assertEquals(false, numberType0.isEnumType());
      assertEquals(false, numberType0.isAllType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(recordTypeBuilder_RecordProperty0);
      
      RecordTypeBuilder.RecordProperty recordTypeBuilder_RecordProperty1 = hashMap0.put(string0, recordTypeBuilder_RecordProperty0);
      assertEquals(1, hashMap0.size());
      assertEquals(false, hashMap0.isEmpty());
      assertEquals(false, numberType0.isTemplateType());
      assertEquals(false, numberType0.isEnumElementType());
      assertEquals(true, numberType0.isNumberValueType());
      assertEquals(false, numberType0.isInterface());
      assertEquals(false, numberType0.isConstructor());
      assertEquals(false, numberType0.isFunctionPrototypeType());
      assertEquals(true, numberType0.matchesNumberContext());
      assertEquals(true, numberType0.matchesObjectContext());
      assertEquals(false, numberType0.isNominalType());
      assertEquals(false, numberType0.isNullable());
      assertEquals(false, numberType0.isRecordType());
      assertEquals("number", numberType0.toString());
      assertEquals(false, numberType0.isNoObjectType());
      assertEquals(false, numberType0.isNominalConstructor());
      assertEquals(false, numberType0.isUnionType());
      assertEquals(false, numberType0.isResolved());
      assertEquals("number", numberType0.getDisplayName());
      assertEquals(false, numberType0.isNoType());
      assertEquals(false, numberType0.isCheckedUnknownType());
      assertEquals(false, numberType0.isNoResolvedType());
      assertEquals(BooleanLiteralSet.BOTH, numberType0.getPossibleToBooleanOutcomes());
      assertEquals(false, numberType0.isNullType());
      assertEquals(false, numberType0.isStringValueType());
      assertEquals(true, numberType0.matchesStringContext());
      assertEquals(false, numberType0.isOrdinaryFunction());
      assertEquals(false, numberType0.isFunctionType());
      assertEquals(false, numberType0.isBooleanValueType());
      assertEquals(false, numberType0.isVoidType());
      assertEquals(false, numberType0.isEnumType());
      assertEquals(false, numberType0.isAllType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNull(recordTypeBuilder_RecordProperty1);
      
      Node node1 = recordTypeBuilder_RecordProperty0.getPropertyNode();
      assertEquals(false, numberType0.isTemplateType());
      assertEquals(false, numberType0.isEnumElementType());
      assertEquals(true, numberType0.isNumberValueType());
      assertEquals(false, numberType0.isInterface());
      assertEquals(false, numberType0.isConstructor());
      assertEquals(false, numberType0.isFunctionPrototypeType());
      assertEquals(true, numberType0.matchesNumberContext());
      assertEquals(true, numberType0.matchesObjectContext());
      assertEquals(false, numberType0.isNominalType());
      assertEquals(false, numberType0.isNullable());
      assertEquals(false, numberType0.isRecordType());
      assertEquals("number", numberType0.toString());
      assertEquals(false, numberType0.isNoObjectType());
      assertEquals(false, numberType0.isNominalConstructor());
      assertEquals(false, numberType0.isUnionType());
      assertEquals(false, numberType0.isResolved());
      assertEquals("number", numberType0.getDisplayName());
      assertEquals(false, numberType0.isNoType());
      assertEquals(false, numberType0.isCheckedUnknownType());
      assertEquals(false, numberType0.isNoResolvedType());
      assertEquals(BooleanLiteralSet.BOTH, numberType0.getPossibleToBooleanOutcomes());
      assertEquals(false, numberType0.isNullType());
      assertEquals(false, numberType0.isStringValueType());
      assertEquals(true, numberType0.matchesStringContext());
      assertEquals(false, numberType0.isOrdinaryFunction());
      assertEquals(false, numberType0.isFunctionType());
      assertEquals(false, numberType0.isBooleanValueType());
      assertEquals(false, numberType0.isVoidType());
      assertEquals(false, numberType0.isEnumType());
      assertEquals(false, numberType0.isAllType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNull(node1);
      
      RecordType recordType1 = jSTypeRegistry0.createRecordType((Map<String, RecordTypeBuilder.RecordProperty>) hashMap0);
      assertNotSame(recordType1, recordType0);
      assertFalse(recordType1.equals((Object)recordType0));
      assertEquals(1, hashMap0.size());
      assertEquals(false, hashMap0.isEmpty());
      assertEquals(false, recordType1.isCheckedUnknownType());
      assertEquals(false, recordType1.isNoType());
      assertEquals(false, recordType1.isConstructor());
      assertEquals(false, recordType1.isBooleanValueType());
      assertEquals(false, recordType1.isVoidType());
      assertEquals(false, recordType1.isAllType());
      assertEquals(false, recordType1.isUnionType());
      assertEquals(true, recordType1.isRecordType());
      assertEquals(false, recordType1.isEnumElementType());
      assertEquals(false, recordType1.isNoResolvedType());
      assertEquals(false, recordType1.isOrdinaryFunction());
      assertEquals(false, recordType1.isNullType());
      assertEquals(false, recordType1.isResolved());
      assertEquals(false, recordType1.isStringValueType());
      assertEquals(BooleanLiteralSet.TRUE, recordType1.getPossibleToBooleanOutcomes());
      assertEquals(false, recordType1.isNoObjectType());
      assertEquals(false, recordType1.isNumberValueType());
      assertEquals(false, recordType1.isTemplateType());
      assertEquals(false, recordType1.isFunctionPrototypeType());
      assertEquals(false, recordType1.isEnumType());
      assertEquals(false, recordType1.isInterface());
      assertEquals(false, recordType1.isNominalType());
      assertEquals(false, recordType1.isFunctionType());
      assertEquals(false, recordType1.isNominalConstructor());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(recordType1);
      
      UnionType unionType0 = (UnionType)jSTypeRegistry0.createOptionalType((JSType) recordType1);
      assertNotSame(recordType1, recordType0);
      assertFalse(recordType1.equals((Object)recordType0));
      assertEquals(false, unionType0.isFunctionPrototypeType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isNominalType());
      assertEquals(false, unionType0.isOrdinaryFunction());
      assertEquals(false, unionType0.isCheckedUnknownType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isNoResolvedType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isNominalConstructor());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isEnumElementType());
      assertEquals(false, unionType0.isConstructor());
      assertEquals(false, unionType0.isEnumType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isInterface());
      assertEquals(1, hashMap0.size());
      assertEquals(false, hashMap0.isEmpty());
      assertEquals(false, recordType1.isCheckedUnknownType());
      assertEquals(false, recordType1.isNoType());
      assertEquals(false, recordType1.isConstructor());
      assertEquals(false, recordType1.isBooleanValueType());
      assertEquals(false, recordType1.isVoidType());
      assertEquals(false, recordType1.isAllType());
      assertEquals(false, recordType1.isUnionType());
      assertEquals(true, recordType1.isRecordType());
      assertEquals(false, recordType1.isEnumElementType());
      assertEquals(false, recordType1.isNoResolvedType());
      assertEquals(false, recordType1.isOrdinaryFunction());
      assertEquals(false, recordType1.isNullType());
      assertEquals(false, recordType1.isResolved());
      assertEquals(false, recordType1.isStringValueType());
      assertEquals(BooleanLiteralSet.TRUE, recordType1.getPossibleToBooleanOutcomes());
      assertEquals(false, recordType1.isNoObjectType());
      assertEquals(false, recordType1.isNumberValueType());
      assertEquals(false, recordType1.isTemplateType());
      assertEquals(false, recordType1.isFunctionPrototypeType());
      assertEquals(false, recordType1.isEnumType());
      assertEquals(false, recordType1.isInterface());
      assertEquals(false, recordType1.isNominalType());
      assertEquals(false, recordType1.isFunctionType());
      assertEquals(false, recordType1.isNominalConstructor());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(unionType0);
      
      boolean boolean0 = false;
      JSType[] jSTypeArray0 = new JSType[15];
      FunctionType functionType0 = jSTypeRegistry0.createConstructorType((JSType) recordType0, boolean0, jSTypeArray0);
      assertNotSame(recordType0, recordType1);
      assertFalse(recordType0.equals((Object)recordType1));
      assertEquals(false, recordType0.isNoType());
      assertEquals(false, recordType0.isAllType());
      assertEquals(false, recordType0.isTemplateType());
      assertEquals(false, recordType0.isBooleanValueType());
      assertEquals(false, recordType0.isNullType());
      assertEquals(false, recordType0.isUnionType());
      assertEquals(false, recordType0.isStringValueType());
      assertEquals(false, recordType0.isNominalType());
      assertEquals(false, recordType0.isConstructor());
      assertEquals(true, recordType0.isRecordType());
      assertEquals(false, recordType0.isNoResolvedType());
      assertEquals(BooleanLiteralSet.TRUE, recordType0.getPossibleToBooleanOutcomes());
      assertEquals(false, recordType0.isNumberValueType());
      assertEquals(false, recordType0.isVoidType());
      assertEquals(false, recordType0.isNoObjectType());
      assertEquals(false, recordType0.isFunctionPrototypeType());
      assertEquals(false, recordType0.isInterface());
      assertEquals(false, recordType0.isNominalConstructor());
      assertEquals(false, recordType0.isCheckedUnknownType());
      assertEquals(false, recordType0.isResolved());
      assertEquals(false, recordType0.isEnumElementType());
      assertEquals(false, recordType0.isFunctionType());
      assertEquals(false, recordType0.isOrdinaryFunction());
      assertEquals(false, recordType0.isEnumType());
      assertEquals(true, functionType0.isFunctionType());
      assertEquals(true, functionType0.hasInstanceType());
      assertEquals(false, functionType0.isUnionType());
      assertEquals(false, functionType0.isCheckedUnknownType());
      assertEquals(15, functionType0.getMaxArguments());
      assertEquals(false, functionType0.isNullType());
      assertEquals(false, functionType0.isEnumElementType());
      assertEquals(false, functionType0.hasCachedValues());
      assertEquals(false, functionType0.isStringValueType());
      assertEquals(false, functionType0.isOrdinaryFunction());
      assertEquals(false, functionType0.isNoResolvedType());
      assertEquals(true, functionType0.isConstructor());
      assertEquals(false, functionType0.isNoType());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertNull(functionType0.getTemplateTypeName());
      assertEquals(false, functionType0.isNumberValueType());
      assertEquals(false, functionType0.isInterface());
      assertEquals(false, functionType0.isTemplateType());
      assertEquals(false, functionType0.isRecordType());
      assertEquals(false, functionType0.isNominalConstructor());
      assertEquals(false, functionType0.isReturnTypeInferred());
      assertEquals(false, functionType0.isResolved());
      assertEquals(false, functionType0.isFunctionPrototypeType());
      assertEquals(false, functionType0.isNoObjectType());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertEquals(false, functionType0.isEnumType());
      assertEquals(false, functionType0.isBooleanValueType());
      assertEquals(false, functionType0.isAllType());
      assertEquals(false, functionType0.isNominalType());
      assertEquals(true, functionType0.canBeCalled());
      assertEquals(false, functionType0.isVoidType());
      assertEquals(1, hashMap0.size());
      assertEquals(false, hashMap0.isEmpty());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(functionType0);
      
      recordType1.setOwnerFunction(functionType0);
      assertNotSame(recordType0, recordType1);
      assertNotSame(recordType1, recordType0);
      assertFalse(recordType0.equals((Object)recordType1));
      assertFalse(recordType1.equals((Object)recordType0));
      assertEquals(false, recordType0.isNoType());
      assertEquals(false, recordType0.isAllType());
      assertEquals(false, recordType0.isTemplateType());
      assertEquals(false, recordType0.isBooleanValueType());
      assertEquals(false, recordType0.isNullType());
      assertEquals(false, recordType0.isUnionType());
      assertEquals(false, recordType0.isStringValueType());
      assertEquals(false, recordType0.isNominalType());
      assertEquals(false, recordType0.isConstructor());
      assertEquals(true, recordType0.isRecordType());
      assertEquals(false, recordType0.isNoResolvedType());
      assertEquals(BooleanLiteralSet.TRUE, recordType0.getPossibleToBooleanOutcomes());
      assertEquals(false, recordType0.isNumberValueType());
      assertEquals(false, recordType0.isVoidType());
      assertEquals(false, recordType0.isNoObjectType());
      assertEquals(false, recordType0.isFunctionPrototypeType());
      assertEquals(false, recordType0.isInterface());
      assertEquals(false, recordType0.isNominalConstructor());
      assertEquals(false, recordType0.isCheckedUnknownType());
      assertEquals(false, recordType0.isResolved());
      assertEquals(false, recordType0.isEnumElementType());
      assertEquals(false, recordType0.isFunctionType());
      assertEquals(false, recordType0.isOrdinaryFunction());
      assertEquals(false, recordType0.isEnumType());
      assertEquals(true, functionType0.isFunctionType());
      assertEquals(true, functionType0.hasInstanceType());
      assertEquals(false, functionType0.isUnionType());
      assertEquals(false, functionType0.isCheckedUnknownType());
      assertEquals(15, functionType0.getMaxArguments());
      assertEquals(false, functionType0.isNullType());
      assertEquals(false, functionType0.isEnumElementType());
      assertEquals(false, functionType0.hasCachedValues());
      assertEquals(false, functionType0.isStringValueType());
      assertEquals(false, functionType0.isOrdinaryFunction());
      assertEquals(false, functionType0.isNoResolvedType());
      assertEquals(true, functionType0.isConstructor());
      assertEquals(false, functionType0.isNoType());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertNull(functionType0.getTemplateTypeName());
      assertEquals(false, functionType0.isNumberValueType());
      assertEquals(false, functionType0.isInterface());
      assertEquals(false, functionType0.isTemplateType());
      assertEquals(false, functionType0.isRecordType());
      assertEquals(false, functionType0.isNominalConstructor());
      assertEquals(false, functionType0.isReturnTypeInferred());
      assertEquals(false, functionType0.isResolved());
      assertEquals(false, functionType0.isFunctionPrototypeType());
      assertEquals(false, functionType0.isNoObjectType());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertEquals(false, functionType0.isEnumType());
      assertEquals(false, functionType0.isBooleanValueType());
      assertEquals(false, functionType0.isAllType());
      assertEquals(false, functionType0.isNominalType());
      assertEquals(true, functionType0.canBeCalled());
      assertEquals(false, functionType0.isVoidType());
      assertEquals(1, hashMap0.size());
      assertEquals(false, hashMap0.isEmpty());
      assertEquals(false, recordType1.isCheckedUnknownType());
      assertEquals(false, recordType1.isNoType());
      assertEquals(false, recordType1.isConstructor());
      assertEquals(false, recordType1.isBooleanValueType());
      assertEquals(false, recordType1.isVoidType());
      assertEquals(false, recordType1.isAllType());
      assertEquals(false, recordType1.isUnionType());
      assertEquals(true, recordType1.isRecordType());
      assertEquals(false, recordType1.isEnumElementType());
      assertEquals(false, recordType1.isNoResolvedType());
      assertEquals(false, recordType1.isOrdinaryFunction());
      assertEquals(false, recordType1.isNullType());
      assertEquals(false, recordType1.isResolved());
      assertEquals(false, recordType1.isStringValueType());
      assertEquals(BooleanLiteralSet.TRUE, recordType1.getPossibleToBooleanOutcomes());
      assertEquals(false, recordType1.isNoObjectType());
      assertEquals(false, recordType1.isNumberValueType());
      assertEquals(false, recordType1.isTemplateType());
      assertEquals(false, recordType1.isEnumType());
      assertEquals(false, recordType1.isInterface());
      assertEquals(true, recordType1.isFunctionPrototypeType());
      assertEquals(false, recordType1.isNominalType());
      assertEquals(false, recordType1.isFunctionType());
      assertEquals(false, recordType1.isNominalConstructor());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      boolean boolean1 = recordType1.defineInferredProperty(string0, (JSType) unionType0, node1);
      assertNotSame(recordType1, recordType0);
      assertFalse(recordType1.equals((Object)recordType0));
      assertTrue(boolean1 == boolean0);
      assertEquals(false, unionType0.isFunctionPrototypeType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isNominalType());
      assertEquals(false, unionType0.isOrdinaryFunction());
      assertEquals(false, unionType0.isCheckedUnknownType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isNoResolvedType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isNominalConstructor());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isEnumElementType());
      assertEquals(false, unionType0.isConstructor());
      assertEquals(false, unionType0.isEnumType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isInterface());
      assertEquals(1, hashMap0.size());
      assertEquals(false, hashMap0.isEmpty());
      assertEquals(false, numberType0.isTemplateType());
      assertEquals(false, numberType0.isEnumElementType());
      assertEquals(true, numberType0.isNumberValueType());
      assertEquals(false, numberType0.isInterface());
      assertEquals(false, numberType0.isConstructor());
      assertEquals(false, numberType0.isFunctionPrototypeType());
      assertEquals(true, numberType0.matchesNumberContext());
      assertEquals(true, numberType0.matchesObjectContext());
      assertEquals(false, numberType0.isNominalType());
      assertEquals(false, numberType0.isNullable());
      assertEquals(false, numberType0.isRecordType());
      assertEquals("number", numberType0.toString());
      assertEquals(false, numberType0.isNoObjectType());
      assertEquals(false, numberType0.isNominalConstructor());
      assertEquals(false, numberType0.isUnionType());
      assertEquals(false, numberType0.isResolved());
      assertEquals("number", numberType0.getDisplayName());
      assertEquals(false, numberType0.isNoType());
      assertEquals(false, numberType0.isCheckedUnknownType());
      assertEquals(false, numberType0.isNoResolvedType());
      assertEquals(BooleanLiteralSet.BOTH, numberType0.getPossibleToBooleanOutcomes());
      assertEquals(false, numberType0.isNullType());
      assertEquals(false, numberType0.isStringValueType());
      assertEquals(true, numberType0.matchesStringContext());
      assertEquals(false, numberType0.isOrdinaryFunction());
      assertEquals(false, numberType0.isFunctionType());
      assertEquals(false, numberType0.isBooleanValueType());
      assertEquals(false, numberType0.isVoidType());
      assertEquals(false, numberType0.isEnumType());
      assertEquals(false, numberType0.isAllType());
      assertEquals(false, recordType1.isCheckedUnknownType());
      assertEquals(false, recordType1.isNoType());
      assertEquals(false, recordType1.isConstructor());
      assertEquals(false, recordType1.isBooleanValueType());
      assertEquals(false, recordType1.isVoidType());
      assertEquals(false, recordType1.isAllType());
      assertEquals(false, recordType1.isUnionType());
      assertEquals(true, recordType1.isRecordType());
      assertEquals(false, recordType1.isEnumElementType());
      assertEquals(false, recordType1.isNoResolvedType());
      assertEquals(false, recordType1.isOrdinaryFunction());
      assertEquals(false, recordType1.isNullType());
      assertEquals(false, recordType1.isResolved());
      assertEquals(false, recordType1.isStringValueType());
      assertEquals(BooleanLiteralSet.TRUE, recordType1.getPossibleToBooleanOutcomes());
      assertEquals(false, recordType1.isNoObjectType());
      assertEquals(false, recordType1.isNumberValueType());
      assertEquals(false, recordType1.isTemplateType());
      assertEquals(false, recordType1.isEnumType());
      assertEquals(false, recordType1.isInterface());
      assertEquals(true, recordType1.isFunctionPrototypeType());
      assertEquals(false, recordType1.isNominalType());
      assertEquals(false, recordType1.isFunctionType());
      assertEquals(false, recordType1.isNominalConstructor());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(boolean1);
      
      NoObjectType noObjectType0 = (NoObjectType)recordType1.getGreatestSubtypeHelper(unionType0);
      assertNotSame(recordType1, recordType0);
      assertFalse(recordType1.equals((Object)recordType0));
      assertEquals(false, noObjectType0.isNumberValueType());
      assertEquals(false, noObjectType0.isResolved());
      assertEquals(false, noObjectType0.isNoResolvedType());
      assertNull(noObjectType0.getReferenceName());
      assertEquals(true, noObjectType0.matchesNumberContext());
      assertEquals(false, noObjectType0.isAllType());
      assertEquals(false, noObjectType0.isNominalConstructor());
      assertEquals(false, noObjectType0.isNullType());
      assertEquals(false, noObjectType0.isOrdinaryFunction());
      assertEquals(false, noObjectType0.isTemplateType());
      assertEquals(2147483647, noObjectType0.getPropertiesCount());
      assertEquals(false, noObjectType0.isReturnTypeInferred());
      assertEquals(true, noObjectType0.matchesStringContext());
      assertEquals(false, noObjectType0.isEnumElementType());
      assertEquals(true, noObjectType0.hasInstanceType());
      assertEquals("NoObject", noObjectType0.toString());
      assertEquals(false, noObjectType0.isStringValueType());
      assertEquals(false, noObjectType0.hasCachedValues());
      assertEquals(false, noObjectType0.isNominalType());
      assertEquals(false, noObjectType0.isNoType());
      assertEquals(false, noObjectType0.isBooleanValueType());
      assertNull(noObjectType0.getTemplateTypeName());
      assertEquals(false, noObjectType0.isInterface());
      assertEquals(true, noObjectType0.isConstructor());
      assertEquals(false, noObjectType0.isVoidType());
      assertEquals(0, noObjectType0.getExtendedInterfacesCount());
      assertEquals(true, noObjectType0.isNoObjectType());
      assertEquals(true, noObjectType0.matchesObjectContext());
      assertEquals(BooleanLiteralSet.TRUE, noObjectType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noObjectType0.isEnumType());
      assertEquals(false, noObjectType0.isRecordType());
      assertEquals(false, noObjectType0.isUnionType());
      assertEquals(2147483647, noObjectType0.getMaxArguments());
      assertEquals(true, noObjectType0.canBeCalled());
      assertEquals(false, noObjectType0.isFunctionType());
      assertEquals(false, noObjectType0.isFunctionPrototypeType());
      assertEquals(false, noObjectType0.isCheckedUnknownType());
      assertEquals(false, unionType0.isFunctionPrototypeType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isNominalType());
      assertEquals(false, unionType0.isOrdinaryFunction());
      assertEquals(false, unionType0.isCheckedUnknownType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isNoResolvedType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isNominalConstructor());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isEnumElementType());
      assertEquals(false, unionType0.isConstructor());
      assertEquals(false, unionType0.isEnumType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isInterface());
      assertEquals(1, hashMap0.size());
      assertEquals(false, hashMap0.isEmpty());
      assertEquals(false, recordType1.isCheckedUnknownType());
      assertEquals(false, recordType1.isNoType());
      assertEquals(false, recordType1.isConstructor());
      assertEquals(false, recordType1.isBooleanValueType());
      assertEquals(false, recordType1.isVoidType());
      assertEquals(false, recordType1.isAllType());
      assertEquals(false, recordType1.isUnionType());
      assertEquals(true, recordType1.isRecordType());
      assertEquals(false, recordType1.isEnumElementType());
      assertEquals(false, recordType1.isNoResolvedType());
      assertEquals(false, recordType1.isOrdinaryFunction());
      assertEquals(false, recordType1.isNullType());
      assertEquals(false, recordType1.isResolved());
      assertEquals(false, recordType1.isStringValueType());
      assertEquals(BooleanLiteralSet.TRUE, recordType1.getPossibleToBooleanOutcomes());
      assertEquals(false, recordType1.isNoObjectType());
      assertEquals(false, recordType1.isNumberValueType());
      assertEquals(false, recordType1.isTemplateType());
      assertEquals(false, recordType1.isEnumType());
      assertEquals(false, recordType1.isInterface());
      assertEquals(true, recordType1.isFunctionPrototypeType());
      assertEquals(false, recordType1.isNominalType());
      assertEquals(false, recordType1.isFunctionType());
      assertEquals(false, recordType1.isNominalConstructor());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(noObjectType0);
  }
}
