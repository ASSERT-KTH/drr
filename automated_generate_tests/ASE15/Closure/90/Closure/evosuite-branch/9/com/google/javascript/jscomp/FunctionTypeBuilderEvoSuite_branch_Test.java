/*
 * This file was automatically generated by EvoSuite
 * Fri Dec 12 02:01:47 GMT 2014
 */

package com.google.javascript.jscomp;

import static org.junit.Assert.*;
import org.junit.Test;
import com.google.javascript.jscomp.AbstractCompiler;
import com.google.javascript.jscomp.Compiler;
import com.google.javascript.jscomp.CompilerOptions;
import com.google.javascript.jscomp.FunctionTypeBuilder;
import com.google.javascript.jscomp.JSSourceFile;
import com.google.javascript.jscomp.Result;
import com.google.javascript.jscomp.Scope;
import com.google.javascript.rhino.ErrorReporter;
import com.google.javascript.rhino.JSDocInfo;
import com.google.javascript.rhino.Node;
import com.google.javascript.rhino.SimpleErrorReporter;
import com.google.javascript.rhino.jstype.BooleanLiteralSet;
import com.google.javascript.rhino.jstype.EnumElementType;
import com.google.javascript.rhino.jstype.EnumType;
import com.google.javascript.rhino.jstype.FunctionType;
import com.google.javascript.rhino.jstype.JSType;
import com.google.javascript.rhino.jstype.JSTypeNative;
import com.google.javascript.rhino.jstype.JSTypeRegistry;
import com.google.javascript.rhino.jstype.ObjectType;
import java.util.LinkedList;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;

import org.evosuite.runtime.mock.java.lang.MockIllegalStateException;
import org.junit.runner.RunWith;


public class FunctionTypeBuilderEvoSuite_branch_Test  {

  @Test
  public void test00()  throws Throwable  {
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      assertNotNull(jSDocInfo0);
      assertEquals(false, jSDocInfo0.isNoShadow());
      assertEquals(false, jSDocInfo0.hasTypedefType());
      assertEquals(false, jSDocInfo0.isDefine());
      assertEquals(false, jSDocInfo0.hasEnumParameterType());
      assertEquals(false, jSDocInfo0.isHidden());
      assertEquals(false, jSDocInfo0.hasThisType());
      assertEquals(false, jSDocInfo0.isImplicitCast());
      assertEquals(false, jSDocInfo0.isOverride());
      assertEquals(false, jSDocInfo0.hasModifies());
      assertEquals(false, jSDocInfo0.isConstant());
      assertEquals(false, jSDocInfo0.hasType());
      assertEquals(false, jSDocInfo0.isExport());
      assertNull(jSDocInfo0.getSourceName());
      assertEquals(false, jSDocInfo0.isExterns());
      assertEquals(false, jSDocInfo0.isNoSideEffects());
      assertEquals(0, jSDocInfo0.getImplementedInterfaceCount());
      assertEquals(false, jSDocInfo0.shouldPreserveTry());
      assertEquals(false, jSDocInfo0.isConstructor());
      assertEquals(false, jSDocInfo0.isNoAlias());
      assertEquals(0, jSDocInfo0.getParameterCount());
      assertEquals("JSDocInfo", jSDocInfo0.toString());
      assertEquals(false, jSDocInfo0.isInterface());
      assertNull(jSDocInfo0.getTemplateTypeName());
      assertNull(jSDocInfo0.getDeprecationReason());
      assertEquals(false, jSDocInfo0.isNoCompile());
      assertEquals(false, jSDocInfo0.containsDeclaration());
      assertNull(jSDocInfo0.getReturnDescription());
      assertEquals(false, jSDocInfo0.isDeprecated());
      assertNull(jSDocInfo0.getVisibility());
      assertEquals(false, jSDocInfo0.hasBaseType());
      assertEquals(false, jSDocInfo0.hasReturnType());
      assertEquals(false, jSDocInfo0.hasFileOverview());
      assertNull(jSDocInfo0.getFileOverview());
      assertEquals(false, jSDocInfo0.isNoTypeCheck());
      assertNull(jSDocInfo0.getDescription());
      assertNull(jSDocInfo0.getVersion());
      assertNull(jSDocInfo0.getLicense());
      assertNull(jSDocInfo0.getBlockDescription());
      assertNull(jSDocInfo0.getLendsName());
      assertEquals(false, jSDocInfo0.isJavaDispatch());
      assertNull(jSDocInfo0.getMeaning());
      
      boolean boolean0 = FunctionTypeBuilder.isFunctionTypeDeclaration(jSDocInfo0);
      assertEquals(false, jSDocInfo0.isNoShadow());
      assertEquals(false, jSDocInfo0.hasTypedefType());
      assertEquals(false, jSDocInfo0.isDefine());
      assertEquals(false, jSDocInfo0.hasEnumParameterType());
      assertEquals(false, jSDocInfo0.isHidden());
      assertEquals(false, jSDocInfo0.hasThisType());
      assertEquals(false, jSDocInfo0.isImplicitCast());
      assertEquals(false, jSDocInfo0.isOverride());
      assertEquals(false, jSDocInfo0.hasModifies());
      assertEquals(false, jSDocInfo0.isConstant());
      assertEquals(false, jSDocInfo0.hasType());
      assertEquals(false, jSDocInfo0.isExport());
      assertNull(jSDocInfo0.getSourceName());
      assertEquals(false, jSDocInfo0.isExterns());
      assertEquals(false, jSDocInfo0.isNoSideEffects());
      assertEquals(0, jSDocInfo0.getImplementedInterfaceCount());
      assertEquals(false, jSDocInfo0.shouldPreserveTry());
      assertEquals(false, jSDocInfo0.isConstructor());
      assertEquals(false, jSDocInfo0.isNoAlias());
      assertEquals(0, jSDocInfo0.getParameterCount());
      assertEquals("JSDocInfo", jSDocInfo0.toString());
      assertEquals(false, jSDocInfo0.isInterface());
      assertNull(jSDocInfo0.getTemplateTypeName());
      assertNull(jSDocInfo0.getDeprecationReason());
      assertEquals(false, jSDocInfo0.isNoCompile());
      assertEquals(false, jSDocInfo0.containsDeclaration());
      assertNull(jSDocInfo0.getReturnDescription());
      assertEquals(false, jSDocInfo0.isDeprecated());
      assertNull(jSDocInfo0.getVisibility());
      assertEquals(false, jSDocInfo0.hasBaseType());
      assertEquals(false, jSDocInfo0.hasReturnType());
      assertEquals(false, jSDocInfo0.hasFileOverview());
      assertNull(jSDocInfo0.getFileOverview());
      assertEquals(false, jSDocInfo0.isNoTypeCheck());
      assertNull(jSDocInfo0.getDescription());
      assertNull(jSDocInfo0.getVersion());
      assertNull(jSDocInfo0.getLicense());
      assertNull(jSDocInfo0.getBlockDescription());
      assertNull(jSDocInfo0.getLendsName());
      assertEquals(false, jSDocInfo0.isJavaDispatch());
      assertNull(jSDocInfo0.getMeaning());
      assertFalse(boolean0);
  }

  @Test
  public void test01()  throws Throwable  {
      String string0 = "msg.prop.not.found";
      Compiler compiler0 = new Compiler();
      assertNotNull(compiler0);
      
      Node node0 = compiler0.parseSyntheticCode(string0, string0);
      assertNotNull(node0);
      assertEquals(true, node0.hasChildren());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(1, node0.getLineno());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(true, node0.isSyntheticBlock());
      assertEquals(0, node0.getCharno());
      assertEquals(1, node0.getChildCount());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(132, node0.getType());
      assertEquals(true, node0.hasOneChild());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.isIdeMode());
      
      ObjectType objectType0 = null;
      Scope scope0 = new Scope(node0, objectType0);
      assertNotNull(scope0);
      assertEquals(true, node0.hasChildren());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(1, node0.getLineno());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(true, node0.isSyntheticBlock());
      assertEquals(0, node0.getCharno());
      assertEquals(1, node0.getChildCount());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(132, node0.getType());
      assertEquals(true, node0.hasOneChild());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(false, scope0.isLocal());
      assertEquals(true, scope0.isGlobal());
      assertEquals(0, scope0.getVarCount());
      
      FunctionTypeBuilder functionTypeBuilder0 = new FunctionTypeBuilder(string0, compiler0, node0, string0, scope0);
      assertNotNull(functionTypeBuilder0);
      assertEquals(true, node0.hasChildren());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(1, node0.getLineno());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(true, node0.isSyntheticBlock());
      assertEquals(0, node0.getCharno());
      assertEquals(1, node0.getChildCount());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(132, node0.getType());
      assertEquals(true, node0.hasOneChild());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(false, scope0.isLocal());
      assertEquals(true, scope0.isGlobal());
      assertEquals(0, scope0.getVarCount());
      
      // Undeclared exception!
      try {
        FunctionType functionType0 = functionTypeBuilder0.buildAndRegister();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // All Function types must have params and a return type
         //
      }
  }

  @Test
  public void test02()  throws Throwable  {
      String string0 = "@\\@`[duFCuMY#fh";
      Compiler compiler0 = new Compiler();
      assertNotNull(compiler0);
      
      Node node0 = compiler0.parseSyntheticCode(string0, string0);
      assertNotNull(node0);
      assertEquals(true, compiler0.hasErrors());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(6, compiler0.getErrorCount());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(125, node0.getType());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isVarArgs());
      
      JSDocInfo jSDocInfo0 = null;
      Scope scope0 = compiler0.getTopScope();
      assertNull(scope0);
      assertEquals(true, compiler0.hasErrors());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(6, compiler0.getErrorCount());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.isIdeMode());
      
      FunctionTypeBuilder functionTypeBuilder0 = new FunctionTypeBuilder(string0, compiler0, node0, string0, scope0);
      assertNotNull(functionTypeBuilder0);
      assertEquals(true, compiler0.hasErrors());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(6, compiler0.getErrorCount());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(125, node0.getType());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isVarArgs());
      
      FunctionTypeBuilder functionTypeBuilder1 = functionTypeBuilder0.inferParameterTypes(node0, jSDocInfo0);
      assertNotNull(functionTypeBuilder1);
      assertEquals(true, compiler0.hasErrors());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(6, compiler0.getErrorCount());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(125, node0.getType());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isVarArgs());
      assertSame(functionTypeBuilder0, functionTypeBuilder1);
      assertSame(functionTypeBuilder1, functionTypeBuilder0);
      
      FunctionType functionType0 = functionTypeBuilder1.buildAndRegister();
      assertNotNull(functionType0);
      assertEquals(true, compiler0.hasErrors());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(6, compiler0.getErrorCount());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(false, functionType0.isNominalType());
      assertEquals(false, functionType0.isInterface());
      assertEquals(false, functionType0.isTemplateType());
      assertEquals(false, functionType0.isResolved());
      assertEquals(false, functionType0.hasInstanceType());
      assertEquals(false, functionType0.isFunctionPrototypeType());
      assertEquals(false, functionType0.isAllType());
      assertEquals(false, functionType0.hasCachedValues());
      assertEquals(false, functionType0.isNumberValueType());
      assertEquals(true, functionType0.isOrdinaryFunction());
      assertEquals(0, functionType0.getMaxArguments());
      assertEquals(false, functionType0.isStringValueType());
      assertEquals(false, functionType0.isEnumType());
      assertEquals(false, functionType0.isConstructor());
      assertEquals(false, functionType0.isNoType());
      assertEquals(false, functionType0.isReturnTypeInferred());
      assertEquals(false, functionType0.isVoidType());
      assertEquals(false, functionType0.isEmptyType());
      assertNull(functionType0.getTemplateTypeName());
      assertEquals(true, functionType0.canBeCalled());
      assertEquals(false, functionType0.isRecordType());
      assertEquals(false, functionType0.isNullType());
      assertEquals(false, functionType0.isBooleanValueType());
      assertEquals(true, functionType0.isFunctionType());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, functionType0.isCheckedUnknownType());
      assertEquals(false, functionType0.isEnumElementType());
      assertEquals(false, functionType0.isNoObjectType());
      assertEquals(false, functionType0.isUnionType());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(125, node0.getType());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isVarArgs());
      assertSame(functionTypeBuilder0, functionTypeBuilder1);
      assertSame(functionTypeBuilder1, functionTypeBuilder0);
      
      FunctionType functionType1 = functionTypeBuilder0.buildAndRegister();
      assertNotNull(functionType1);
      assertTrue(functionType1.equals((Object)functionType0));
      assertEquals(true, compiler0.hasErrors());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(6, compiler0.getErrorCount());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(125, node0.getType());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, functionType1.isNoObjectType());
      assertEquals(false, functionType1.isFunctionPrototypeType());
      assertEquals(false, functionType1.isNominalType());
      assertEquals(false, functionType1.isStringValueType());
      assertEquals(false, functionType1.isEnumType());
      assertEquals(true, functionType1.isOrdinaryFunction());
      assertNull(functionType1.getTemplateTypeName());
      assertEquals(false, functionType1.isEnumElementType());
      assertEquals(0, functionType1.getMaxArguments());
      assertEquals(false, functionType1.isVoidType());
      assertEquals(false, functionType1.isReturnTypeInferred());
      assertEquals(false, functionType1.isNumberValueType());
      assertEquals(false, functionType1.hasInstanceType());
      assertEquals(true, functionType1.canBeCalled());
      assertEquals(false, functionType1.isInterface());
      assertEquals(false, functionType1.isCheckedUnknownType());
      assertEquals(false, functionType1.hasCachedValues());
      assertEquals(true, functionType1.isFunctionType());
      assertEquals(false, functionType1.isBooleanValueType());
      assertEquals(false, functionType1.isResolved());
      assertEquals(false, functionType1.isNullType());
      assertEquals(false, functionType1.isConstructor());
      assertEquals(false, functionType1.isEmptyType());
      assertEquals(false, functionType1.isRecordType());
      assertEquals(false, functionType1.isUnionType());
      assertEquals(false, functionType1.isAllType());
      assertEquals(BooleanLiteralSet.TRUE, functionType1.getPossibleToBooleanOutcomes());
      assertEquals(false, functionType1.isTemplateType());
      assertEquals(false, functionType1.isNoType());
      assertSame(functionTypeBuilder0, functionTypeBuilder1);
      assertNotSame(functionType1, functionType0);
  }

  @Test
  public void test03()  throws Throwable  {
      String string0 = "w$ex1b\\r";
      Compiler compiler0 = new Compiler();
      assertNotNull(compiler0);
      
      Node node0 = compiler0.parseSyntheticCode(string0, string0);
      assertNotNull(node0);
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(125, node0.getType());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(-1, node0.getCharno());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(-1, node0.getLineno());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(true, compiler0.hasErrors());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(1, compiler0.getErrorCount());
      
      Scope scope0 = compiler0.getTopScope();
      assertNull(scope0);
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(true, compiler0.hasErrors());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(1, compiler0.getErrorCount());
      
      FunctionTypeBuilder functionTypeBuilder0 = new FunctionTypeBuilder(string0, compiler0, node0, string0, scope0);
      assertNotNull(functionTypeBuilder0);
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(125, node0.getType());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(-1, node0.getCharno());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(-1, node0.getLineno());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(true, compiler0.hasErrors());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(1, compiler0.getErrorCount());
      
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      assertNotNull(jSDocInfo0);
      assertNull(jSDocInfo0.getBlockDescription());
      assertNull(jSDocInfo0.getTemplateTypeName());
      assertEquals(false, jSDocInfo0.isNoCompile());
      assertEquals(false, jSDocInfo0.isConstant());
      assertEquals(false, jSDocInfo0.isExport());
      assertEquals(false, jSDocInfo0.isHidden());
      assertEquals(false, jSDocInfo0.isExterns());
      assertEquals(false, jSDocInfo0.isInterface());
      assertNull(jSDocInfo0.getLendsName());
      assertEquals(false, jSDocInfo0.containsDeclaration());
      assertEquals(false, jSDocInfo0.hasThisType());
      assertEquals(false, jSDocInfo0.isDeprecated());
      assertNull(jSDocInfo0.getFileOverview());
      assertEquals(false, jSDocInfo0.isOverride());
      assertEquals(false, jSDocInfo0.hasEnumParameterType());
      assertEquals(false, jSDocInfo0.isNoSideEffects());
      assertEquals(false, jSDocInfo0.isDefine());
      assertEquals(false, jSDocInfo0.hasModifies());
      assertNull(jSDocInfo0.getDeprecationReason());
      assertEquals(false, jSDocInfo0.isJavaDispatch());
      assertEquals(false, jSDocInfo0.isNoTypeCheck());
      assertEquals(false, jSDocInfo0.hasTypedefType());
      assertEquals(false, jSDocInfo0.shouldPreserveTry());
      assertEquals("JSDocInfo", jSDocInfo0.toString());
      assertEquals(false, jSDocInfo0.isNoAlias());
      assertNull(jSDocInfo0.getMeaning());
      assertNull(jSDocInfo0.getVersion());
      assertEquals(false, jSDocInfo0.hasFileOverview());
      assertEquals(false, jSDocInfo0.isNoShadow());
      assertEquals(0, jSDocInfo0.getImplementedInterfaceCount());
      assertEquals(false, jSDocInfo0.hasBaseType());
      assertEquals(0, jSDocInfo0.getParameterCount());
      assertNull(jSDocInfo0.getSourceName());
      assertNull(jSDocInfo0.getReturnDescription());
      assertEquals(false, jSDocInfo0.hasReturnType());
      assertEquals(false, jSDocInfo0.hasType());
      assertNull(jSDocInfo0.getVisibility());
      assertEquals(false, jSDocInfo0.isImplicitCast());
      assertNull(jSDocInfo0.getDescription());
      assertEquals(false, jSDocInfo0.isConstructor());
      assertNull(jSDocInfo0.getLicense());
      
      FunctionTypeBuilder functionTypeBuilder1 = functionTypeBuilder0.inferTemplateTypeName(jSDocInfo0);
      assertNotNull(functionTypeBuilder1);
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(125, node0.getType());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(-1, node0.getCharno());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(-1, node0.getLineno());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(true, compiler0.hasErrors());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(1, compiler0.getErrorCount());
      assertNull(jSDocInfo0.getBlockDescription());
      assertNull(jSDocInfo0.getTemplateTypeName());
      assertEquals(false, jSDocInfo0.isNoCompile());
      assertEquals(false, jSDocInfo0.isConstant());
      assertEquals(false, jSDocInfo0.isExport());
      assertEquals(false, jSDocInfo0.isHidden());
      assertEquals(false, jSDocInfo0.isExterns());
      assertEquals(false, jSDocInfo0.isInterface());
      assertNull(jSDocInfo0.getLendsName());
      assertEquals(false, jSDocInfo0.containsDeclaration());
      assertEquals(false, jSDocInfo0.hasThisType());
      assertEquals(false, jSDocInfo0.isDeprecated());
      assertNull(jSDocInfo0.getFileOverview());
      assertEquals(false, jSDocInfo0.isOverride());
      assertEquals(false, jSDocInfo0.hasEnumParameterType());
      assertEquals(false, jSDocInfo0.isNoSideEffects());
      assertEquals(false, jSDocInfo0.isDefine());
      assertEquals(false, jSDocInfo0.hasModifies());
      assertNull(jSDocInfo0.getDeprecationReason());
      assertEquals(false, jSDocInfo0.isJavaDispatch());
      assertEquals(false, jSDocInfo0.isNoTypeCheck());
      assertEquals(false, jSDocInfo0.hasTypedefType());
      assertEquals(false, jSDocInfo0.shouldPreserveTry());
      assertEquals("JSDocInfo", jSDocInfo0.toString());
      assertEquals(false, jSDocInfo0.isNoAlias());
      assertNull(jSDocInfo0.getMeaning());
      assertNull(jSDocInfo0.getVersion());
      assertEquals(false, jSDocInfo0.hasFileOverview());
      assertEquals(false, jSDocInfo0.isNoShadow());
      assertEquals(0, jSDocInfo0.getImplementedInterfaceCount());
      assertEquals(false, jSDocInfo0.hasBaseType());
      assertEquals(0, jSDocInfo0.getParameterCount());
      assertNull(jSDocInfo0.getSourceName());
      assertNull(jSDocInfo0.getReturnDescription());
      assertEquals(false, jSDocInfo0.hasReturnType());
      assertEquals(false, jSDocInfo0.hasType());
      assertNull(jSDocInfo0.getVisibility());
      assertEquals(false, jSDocInfo0.isImplicitCast());
      assertNull(jSDocInfo0.getDescription());
      assertEquals(false, jSDocInfo0.isConstructor());
      assertNull(jSDocInfo0.getLicense());
      assertSame(functionTypeBuilder1, functionTypeBuilder0);
      assertSame(functionTypeBuilder0, functionTypeBuilder1);
  }

  @Test
  public void test04()  throws Throwable  {
      String string0 = "a";
      Compiler compiler0 = new Compiler();
      assertNotNull(compiler0);
      
      Node node0 = compiler0.parseSyntheticCode(string0, string0);
      assertNotNull(node0);
      assertEquals(false, compiler0.hasErrors());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(true, node0.hasChildren());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(true, node0.hasOneChild());
      assertEquals(132, node0.getType());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(true, node0.isSyntheticBlock());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(0, node0.getCharno());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(1, node0.getChildCount());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(1, node0.getLineno());
      
      ObjectType objectType0 = null;
      Scope scope0 = new Scope(node0, objectType0);
      assertNotNull(scope0);
      assertEquals(true, scope0.isGlobal());
      assertEquals(0, scope0.getVarCount());
      assertEquals(false, scope0.isLocal());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(true, node0.hasChildren());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(true, node0.hasOneChild());
      assertEquals(132, node0.getType());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(true, node0.isSyntheticBlock());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(0, node0.getCharno());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(1, node0.getChildCount());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(1, node0.getLineno());
      
      FunctionTypeBuilder functionTypeBuilder0 = new FunctionTypeBuilder(string0, compiler0, node0, string0, scope0);
      assertNotNull(functionTypeBuilder0);
      assertEquals(true, scope0.isGlobal());
      assertEquals(0, scope0.getVarCount());
      assertEquals(false, scope0.isLocal());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(true, node0.hasChildren());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(true, node0.hasOneChild());
      assertEquals(132, node0.getType());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(true, node0.isSyntheticBlock());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(0, node0.getCharno());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(1, node0.getChildCount());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(1, node0.getLineno());
      
      JSDocInfo jSDocInfo0 = null;
      FunctionTypeBuilder functionTypeBuilder1 = functionTypeBuilder0.inferTemplateTypeName(jSDocInfo0);
      assertNotNull(functionTypeBuilder1);
      assertEquals(true, scope0.isGlobal());
      assertEquals(0, scope0.getVarCount());
      assertEquals(false, scope0.isLocal());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(true, node0.hasChildren());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(true, node0.hasOneChild());
      assertEquals(132, node0.getType());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(true, node0.isSyntheticBlock());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(0, node0.getCharno());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(1, node0.getChildCount());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(1, node0.getLineno());
      assertSame(functionTypeBuilder1, functionTypeBuilder0);
      assertSame(functionTypeBuilder0, functionTypeBuilder1);
  }

  @Test
  public void test05()  throws Throwable  {
      String string0 = "w$%dx1AbTw";
      Compiler compiler0 = new Compiler();
      assertNotNull(compiler0);
      
      Node node0 = compiler0.parseSyntheticCode(string0, string0);
      assertNotNull(node0);
      assertEquals(1, node0.getChildCount());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(132, node0.getType());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(0, node0.getCharno());
      assertEquals(false, node0.isVarArgs());
      assertEquals(true, node0.hasOneChild());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(true, node0.hasChildren());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(true, node0.isSyntheticBlock());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(1, node0.getLineno());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.isIdeMode());
      
      JSDocInfo jSDocInfo0 = null;
      Scope scope0 = compiler0.getTopScope();
      assertNull(scope0);
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.isIdeMode());
      
      FunctionTypeBuilder functionTypeBuilder0 = new FunctionTypeBuilder(string0, compiler0, node0, string0, scope0);
      assertNotNull(functionTypeBuilder0);
      assertEquals(1, node0.getChildCount());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(132, node0.getType());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(0, node0.getCharno());
      assertEquals(false, node0.isVarArgs());
      assertEquals(true, node0.hasOneChild());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(true, node0.hasChildren());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(true, node0.isSyntheticBlock());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(1, node0.getLineno());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.isIdeMode());
      
      JSDocInfo jSDocInfo1 = new JSDocInfo();
      assertNotNull(jSDocInfo1);
      assertEquals(false, jSDocInfo1.hasFileOverview());
      assertEquals(false, jSDocInfo1.isDefine());
      assertEquals(false, jSDocInfo1.isConstant());
      assertNull(jSDocInfo1.getFileOverview());
      assertEquals(false, jSDocInfo1.isImplicitCast());
      assertNull(jSDocInfo1.getDeprecationReason());
      assertEquals(false, jSDocInfo1.hasTypedefType());
      assertEquals(0, jSDocInfo1.getImplementedInterfaceCount());
      assertNull(jSDocInfo1.getDescription());
      assertNull(jSDocInfo1.getVisibility());
      assertEquals(false, jSDocInfo1.isNoShadow());
      assertEquals(false, jSDocInfo1.containsDeclaration());
      assertEquals(false, jSDocInfo1.isExport());
      assertEquals(false, jSDocInfo1.isOverride());
      assertEquals(false, jSDocInfo1.isNoCompile());
      assertNull(jSDocInfo1.getMeaning());
      assertEquals(0, jSDocInfo1.getParameterCount());
      assertNull(jSDocInfo1.getBlockDescription());
      assertEquals(false, jSDocInfo1.hasType());
      assertEquals(false, jSDocInfo1.hasReturnType());
      assertEquals(false, jSDocInfo1.hasEnumParameterType());
      assertEquals(false, jSDocInfo1.isJavaDispatch());
      assertEquals(false, jSDocInfo1.isInterface());
      assertEquals(false, jSDocInfo1.isNoSideEffects());
      assertEquals(false, jSDocInfo1.hasModifies());
      assertEquals(false, jSDocInfo1.isNoTypeCheck());
      assertEquals(false, jSDocInfo1.isConstructor());
      assertNull(jSDocInfo1.getLendsName());
      assertEquals(false, jSDocInfo1.shouldPreserveTry());
      assertNull(jSDocInfo1.getLicense());
      assertEquals(false, jSDocInfo1.isNoAlias());
      assertEquals(false, jSDocInfo1.isDeprecated());
      assertNull(jSDocInfo1.getTemplateTypeName());
      assertEquals("JSDocInfo", jSDocInfo1.toString());
      assertEquals(false, jSDocInfo1.isHidden());
      assertEquals(false, jSDocInfo1.isExterns());
      assertNull(jSDocInfo1.getVersion());
      assertNull(jSDocInfo1.getReturnDescription());
      assertEquals(false, jSDocInfo1.hasThisType());
      assertNull(jSDocInfo1.getSourceName());
      assertEquals(false, jSDocInfo1.hasBaseType());
      
      Node node1 = null;
      FunctionTypeBuilder functionTypeBuilder1 = functionTypeBuilder0.inferParameterTypes(node1, jSDocInfo1);
      assertNotNull(functionTypeBuilder1);
      assertEquals(1, node0.getChildCount());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(132, node0.getType());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(0, node0.getCharno());
      assertEquals(false, node0.isVarArgs());
      assertEquals(true, node0.hasOneChild());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(true, node0.hasChildren());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(true, node0.isSyntheticBlock());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(1, node0.getLineno());
      assertEquals(false, jSDocInfo1.hasFileOverview());
      assertEquals(false, jSDocInfo1.isDefine());
      assertEquals(false, jSDocInfo1.isConstant());
      assertNull(jSDocInfo1.getFileOverview());
      assertEquals(false, jSDocInfo1.isImplicitCast());
      assertNull(jSDocInfo1.getDeprecationReason());
      assertEquals(false, jSDocInfo1.hasTypedefType());
      assertEquals(0, jSDocInfo1.getImplementedInterfaceCount());
      assertNull(jSDocInfo1.getDescription());
      assertNull(jSDocInfo1.getVisibility());
      assertEquals(false, jSDocInfo1.isNoShadow());
      assertEquals(false, jSDocInfo1.containsDeclaration());
      assertEquals(false, jSDocInfo1.isExport());
      assertEquals(false, jSDocInfo1.isOverride());
      assertEquals(false, jSDocInfo1.isNoCompile());
      assertNull(jSDocInfo1.getMeaning());
      assertEquals(0, jSDocInfo1.getParameterCount());
      assertNull(jSDocInfo1.getBlockDescription());
      assertEquals(false, jSDocInfo1.hasType());
      assertEquals(false, jSDocInfo1.hasReturnType());
      assertEquals(false, jSDocInfo1.hasEnumParameterType());
      assertEquals(false, jSDocInfo1.isJavaDispatch());
      assertEquals(false, jSDocInfo1.isInterface());
      assertEquals(false, jSDocInfo1.isNoSideEffects());
      assertEquals(false, jSDocInfo1.hasModifies());
      assertEquals(false, jSDocInfo1.isNoTypeCheck());
      assertEquals(false, jSDocInfo1.isConstructor());
      assertNull(jSDocInfo1.getLendsName());
      assertEquals(false, jSDocInfo1.shouldPreserveTry());
      assertNull(jSDocInfo1.getLicense());
      assertEquals(false, jSDocInfo1.isNoAlias());
      assertEquals(false, jSDocInfo1.isDeprecated());
      assertNull(jSDocInfo1.getTemplateTypeName());
      assertEquals("JSDocInfo", jSDocInfo1.toString());
      assertEquals(false, jSDocInfo1.isHidden());
      assertEquals(false, jSDocInfo1.isExterns());
      assertNull(jSDocInfo1.getVersion());
      assertNull(jSDocInfo1.getReturnDescription());
      assertEquals(false, jSDocInfo1.hasThisType());
      assertNull(jSDocInfo1.getSourceName());
      assertEquals(false, jSDocInfo1.hasBaseType());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.isIdeMode());
      assertSame(functionTypeBuilder0, functionTypeBuilder1);
      assertSame(functionTypeBuilder1, functionTypeBuilder0);
      
      // Undeclared exception!
      try {
        FunctionTypeBuilder functionTypeBuilder2 = functionTypeBuilder0.inferParameterTypes(node0, jSDocInfo0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // EXPR_RESULT 1 [sourcename: w$%dx1AbTw] is not a string node
         //
      }
  }

  @Test
  public void test06()  throws Throwable  {
      String string0 = "w$:ex1b\\";
      Compiler compiler0 = new Compiler();
      assertNotNull(compiler0);
      
      Node node0 = compiler0.parseSyntheticCode(string0, string0);
      assertNotNull(node0);
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(125, node0.getType());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.hasOneChild());
      assertEquals(0, node0.getChildCount());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(1, compiler0.getErrorCount());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(true, compiler0.hasErrors());
      
      JSDocInfo jSDocInfo0 = null;
      Scope scope0 = compiler0.getTopScope();
      assertNull(scope0);
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(1, compiler0.getErrorCount());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(true, compiler0.hasErrors());
      
      FunctionTypeBuilder functionTypeBuilder0 = new FunctionTypeBuilder(string0, compiler0, node0, string0, scope0);
      assertNotNull(functionTypeBuilder0);
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(125, node0.getType());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.hasOneChild());
      assertEquals(0, node0.getChildCount());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(1, compiler0.getErrorCount());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(true, compiler0.hasErrors());
      
      Node node1 = null;
      FunctionTypeBuilder functionTypeBuilder1 = functionTypeBuilder0.inferParameterTypes(node1, jSDocInfo0);
      assertNotNull(functionTypeBuilder1);
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(125, node0.getType());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.hasOneChild());
      assertEquals(0, node0.getChildCount());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(1, compiler0.getErrorCount());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(true, compiler0.hasErrors());
      assertSame(functionTypeBuilder0, functionTypeBuilder1);
      assertSame(functionTypeBuilder1, functionTypeBuilder0);
  }

  @Test
  public void test07()  throws Throwable  {
      String string0 = "a";
      Compiler compiler0 = new Compiler();
      assertNotNull(compiler0);
      
      Node node0 = compiler0.parseSyntheticCode(string0, string0);
      assertNotNull(node0);
      assertEquals(true, node0.isSyntheticBlock());
      assertEquals(0, node0.getCharno());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(true, node0.hasChildren());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(132, node0.getType());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isVarArgs());
      assertEquals(true, node0.hasOneChild());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(1, node0.getChildCount());
      assertEquals(1, node0.getLineno());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      
      ObjectType objectType0 = null;
      Scope scope0 = new Scope(node0, objectType0);
      assertNotNull(scope0);
      assertEquals(true, node0.isSyntheticBlock());
      assertEquals(0, node0.getCharno());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(true, node0.hasChildren());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(132, node0.getType());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isVarArgs());
      assertEquals(true, node0.hasOneChild());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(1, node0.getChildCount());
      assertEquals(1, node0.getLineno());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, scope0.isLocal());
      assertEquals(true, scope0.isGlobal());
      assertEquals(0, scope0.getVarCount());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      
      FunctionTypeBuilder functionTypeBuilder0 = new FunctionTypeBuilder(string0, compiler0, node0, string0, scope0);
      assertNotNull(functionTypeBuilder0);
      assertEquals(true, node0.isSyntheticBlock());
      assertEquals(0, node0.getCharno());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(true, node0.hasChildren());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(132, node0.getType());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isVarArgs());
      assertEquals(true, node0.hasOneChild());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(1, node0.getChildCount());
      assertEquals(1, node0.getLineno());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, scope0.isLocal());
      assertEquals(true, scope0.isGlobal());
      assertEquals(0, scope0.getVarCount());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      assertEquals("[]", linkedList0.toString());
      
      FunctionType functionType0 = jSTypeRegistry0.createFunctionType((JSType) objectType0, (List<JSType>) linkedList0);
      assertNotNull(functionType0);
      assertEquals(0, linkedList0.size());
      assertEquals("[]", linkedList0.toString());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, functionType0.isRecordType());
      assertEquals(false, functionType0.hasCachedValues());
      assertEquals(true, functionType0.isFunctionType());
      assertEquals(true, functionType0.isOrdinaryFunction());
      assertEquals(false, functionType0.isCheckedUnknownType());
      assertEquals(false, functionType0.isStringValueType());
      assertEquals(false, functionType0.isNominalType());
      assertEquals(false, functionType0.isNumberValueType());
      assertEquals(false, functionType0.isBooleanValueType());
      assertEquals(false, functionType0.isReturnTypeInferred());
      assertEquals(false, functionType0.isNoObjectType());
      assertEquals(false, functionType0.isEnumElementType());
      assertEquals(false, functionType0.isEnumType());
      assertEquals(false, functionType0.isConstructor());
      assertEquals(false, functionType0.isResolved());
      assertEquals(false, functionType0.isNullType());
      assertEquals(false, functionType0.isUnionType());
      assertEquals(false, functionType0.isTemplateType());
      assertEquals(false, functionType0.isFunctionPrototypeType());
      assertNull(functionType0.getTemplateTypeName());
      assertEquals(false, functionType0.isInterface());
      assertEquals(false, functionType0.isVoidType());
      assertEquals(true, functionType0.canBeCalled());
      assertEquals(0, functionType0.getMaxArguments());
      assertEquals(false, functionType0.isEmptyType());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, functionType0.isNoType());
      assertEquals(false, functionType0.hasInstanceType());
      assertEquals(false, functionType0.isAllType());
      
      Node node1 = null;
      EnumType enumType0 = jSTypeRegistry0.createEnumType(string0, (JSType) functionType0);
      assertNotNull(enumType0);
      assertEquals(0, linkedList0.size());
      assertEquals("[]", linkedList0.toString());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, enumType0.isRecordType());
      assertEquals(false, enumType0.isNoType());
      assertEquals(false, enumType0.isStringValueType());
      assertEquals(false, enumType0.isVoidType());
      assertEquals(false, enumType0.isFunctionPrototypeType());
      assertEquals(false, enumType0.isNullType());
      assertEquals(false, enumType0.isNoObjectType());
      assertEquals(false, enumType0.isTemplateType());
      assertEquals(false, enumType0.isNumberValueType());
      assertEquals(BooleanLiteralSet.TRUE, enumType0.getPossibleToBooleanOutcomes());
      assertEquals(true, enumType0.matchesStringContext());
      assertEquals(false, enumType0.isUnionType());
      assertEquals(false, enumType0.isNominalType());
      assertEquals(false, enumType0.isConstructor());
      assertEquals(false, enumType0.matchesNumberContext());
      assertEquals(false, enumType0.isFunctionType());
      assertEquals(true, enumType0.matchesObjectContext());
      assertEquals(false, enumType0.isOrdinaryFunction());
      assertEquals(false, enumType0.isCheckedUnknownType());
      assertEquals(false, enumType0.isAllType());
      assertEquals(false, enumType0.isResolved());
      assertEquals(true, enumType0.isEnumType());
      assertEquals(false, enumType0.isEmptyType());
      assertEquals(false, enumType0.isInterface());
      assertEquals(false, enumType0.isEnumElementType());
      assertEquals(false, enumType0.isBooleanValueType());
      assertEquals(false, functionType0.isRecordType());
      assertEquals(false, functionType0.hasCachedValues());
      assertEquals(true, functionType0.isFunctionType());
      assertEquals(true, functionType0.isOrdinaryFunction());
      assertEquals(false, functionType0.isCheckedUnknownType());
      assertEquals(false, functionType0.isStringValueType());
      assertEquals(false, functionType0.isNominalType());
      assertEquals(false, functionType0.isNumberValueType());
      assertEquals(false, functionType0.isBooleanValueType());
      assertEquals(false, functionType0.isReturnTypeInferred());
      assertEquals(false, functionType0.isNoObjectType());
      assertEquals(false, functionType0.isEnumElementType());
      assertEquals(false, functionType0.isEnumType());
      assertEquals(false, functionType0.isConstructor());
      assertEquals(false, functionType0.isResolved());
      assertEquals(false, functionType0.isNullType());
      assertEquals(false, functionType0.isUnionType());
      assertEquals(false, functionType0.isTemplateType());
      assertEquals(false, functionType0.isFunctionPrototypeType());
      assertNull(functionType0.getTemplateTypeName());
      assertEquals(false, functionType0.isInterface());
      assertEquals(false, functionType0.isVoidType());
      assertEquals(true, functionType0.canBeCalled());
      assertEquals(0, functionType0.getMaxArguments());
      assertEquals(false, functionType0.isEmptyType());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, functionType0.isNoType());
      assertEquals(false, functionType0.hasInstanceType());
      assertEquals(false, functionType0.isAllType());
      
      EnumElementType enumElementType0 = enumType0.getElementsType();
      assertNotNull(enumElementType0);
      assertEquals(0, linkedList0.size());
      assertEquals("[]", linkedList0.toString());
      assertEquals(false, enumElementType0.isNumberValueType());
      assertEquals(false, enumElementType0.isEmptyType());
      assertEquals(BooleanLiteralSet.TRUE, enumElementType0.getPossibleToBooleanOutcomes());
      assertEquals(false, enumElementType0.isCheckedUnknownType());
      assertEquals(false, enumElementType0.isNativeObjectType());
      assertEquals(false, enumElementType0.isConstructor());
      assertEquals(false, enumElementType0.isFunctionType());
      assertEquals(false, enumElementType0.isNullType());
      assertEquals(true, enumElementType0.isEnumElementType());
      assertEquals(true, enumElementType0.hasReferenceName());
      assertEquals(false, enumElementType0.isNoObjectType());
      assertEquals(false, enumElementType0.isStringValueType());
      assertEquals(false, enumElementType0.isEnumType());
      assertEquals(false, enumElementType0.isTemplateType());
      assertEquals(false, enumElementType0.hasCachedValues());
      assertEquals(true, enumElementType0.isNominalType());
      assertEquals(false, enumElementType0.isUnionType());
      assertEquals(false, enumElementType0.isOrdinaryFunction());
      assertEquals(false, enumElementType0.isAllType());
      assertEquals("a", enumElementType0.getReferenceName());
      assertEquals(false, enumElementType0.isVoidType());
      assertEquals(false, enumElementType0.isBooleanValueType());
      assertEquals(false, enumElementType0.isInterface());
      assertEquals(false, enumElementType0.isRecordType());
      assertEquals(false, enumElementType0.isFunctionPrototypeType());
      assertEquals(false, enumElementType0.isNoType());
      assertEquals(false, enumElementType0.isResolved());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, enumType0.isRecordType());
      assertEquals(false, enumType0.isNoType());
      assertEquals(false, enumType0.isStringValueType());
      assertEquals(false, enumType0.isVoidType());
      assertEquals(false, enumType0.isFunctionPrototypeType());
      assertEquals(false, enumType0.isNullType());
      assertEquals(false, enumType0.isNoObjectType());
      assertEquals(false, enumType0.isTemplateType());
      assertEquals(false, enumType0.isNumberValueType());
      assertEquals(BooleanLiteralSet.TRUE, enumType0.getPossibleToBooleanOutcomes());
      assertEquals(true, enumType0.matchesStringContext());
      assertEquals(false, enumType0.isUnionType());
      assertEquals(false, enumType0.isNominalType());
      assertEquals(false, enumType0.isConstructor());
      assertEquals(false, enumType0.matchesNumberContext());
      assertEquals(false, enumType0.isFunctionType());
      assertEquals(true, enumType0.matchesObjectContext());
      assertEquals(false, enumType0.isOrdinaryFunction());
      assertEquals(false, enumType0.isCheckedUnknownType());
      assertEquals(false, enumType0.isAllType());
      assertEquals(false, enumType0.isResolved());
      assertEquals(true, enumType0.isEnumType());
      assertEquals(false, enumType0.isEmptyType());
      assertEquals(false, enumType0.isInterface());
      assertEquals(false, enumType0.isEnumElementType());
      assertEquals(false, enumType0.isBooleanValueType());
      assertEquals(false, functionType0.isRecordType());
      assertEquals(false, functionType0.hasCachedValues());
      assertEquals(true, functionType0.isFunctionType());
      assertEquals(true, functionType0.isOrdinaryFunction());
      assertEquals(false, functionType0.isCheckedUnknownType());
      assertEquals(false, functionType0.isStringValueType());
      assertEquals(false, functionType0.isNominalType());
      assertEquals(false, functionType0.isNumberValueType());
      assertEquals(false, functionType0.isBooleanValueType());
      assertEquals(false, functionType0.isReturnTypeInferred());
      assertEquals(false, functionType0.isNoObjectType());
      assertEquals(false, functionType0.isEnumElementType());
      assertEquals(false, functionType0.isEnumType());
      assertEquals(false, functionType0.isConstructor());
      assertEquals(false, functionType0.isResolved());
      assertEquals(false, functionType0.isNullType());
      assertEquals(false, functionType0.isUnionType());
      assertEquals(false, functionType0.isTemplateType());
      assertEquals(false, functionType0.isFunctionPrototypeType());
      assertNull(functionType0.getTemplateTypeName());
      assertEquals(false, functionType0.isInterface());
      assertEquals(false, functionType0.isVoidType());
      assertEquals(true, functionType0.canBeCalled());
      assertEquals(0, functionType0.getMaxArguments());
      assertEquals(false, functionType0.isEmptyType());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, functionType0.isNoType());
      assertEquals(false, functionType0.hasInstanceType());
      assertEquals(false, functionType0.isAllType());
      
      JSDocInfo jSDocInfo0 = enumElementType0.getOwnPropertyJSDocInfo(string0);
      assertNull(jSDocInfo0);
      assertEquals(0, linkedList0.size());
      assertEquals("[]", linkedList0.toString());
      assertEquals(false, enumElementType0.isNumberValueType());
      assertEquals(false, enumElementType0.isEmptyType());
      assertEquals(BooleanLiteralSet.TRUE, enumElementType0.getPossibleToBooleanOutcomes());
      assertEquals(false, enumElementType0.isCheckedUnknownType());
      assertEquals(false, enumElementType0.isNativeObjectType());
      assertEquals(false, enumElementType0.isConstructor());
      assertEquals(false, enumElementType0.isFunctionType());
      assertEquals(false, enumElementType0.isNullType());
      assertEquals(true, enumElementType0.isEnumElementType());
      assertEquals(true, enumElementType0.hasReferenceName());
      assertEquals(false, enumElementType0.isNoObjectType());
      assertEquals(false, enumElementType0.isStringValueType());
      assertEquals(false, enumElementType0.isEnumType());
      assertEquals(false, enumElementType0.isTemplateType());
      assertEquals(false, enumElementType0.hasCachedValues());
      assertEquals(true, enumElementType0.isNominalType());
      assertEquals(false, enumElementType0.isUnionType());
      assertEquals(false, enumElementType0.isOrdinaryFunction());
      assertEquals(false, enumElementType0.isAllType());
      assertEquals("a", enumElementType0.getReferenceName());
      assertEquals(false, enumElementType0.isVoidType());
      assertEquals(false, enumElementType0.isBooleanValueType());
      assertEquals(false, enumElementType0.isInterface());
      assertEquals(false, enumElementType0.isRecordType());
      assertEquals(false, enumElementType0.isFunctionPrototypeType());
      assertEquals(false, enumElementType0.isNoType());
      assertEquals(false, enumElementType0.isResolved());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, enumType0.isRecordType());
      assertEquals(false, enumType0.isNoType());
      assertEquals(false, enumType0.isStringValueType());
      assertEquals(false, enumType0.isVoidType());
      assertEquals(false, enumType0.isFunctionPrototypeType());
      assertEquals(false, enumType0.isNullType());
      assertEquals(false, enumType0.isNoObjectType());
      assertEquals(false, enumType0.isTemplateType());
      assertEquals(false, enumType0.isNumberValueType());
      assertEquals(BooleanLiteralSet.TRUE, enumType0.getPossibleToBooleanOutcomes());
      assertEquals(true, enumType0.matchesStringContext());
      assertEquals(false, enumType0.isUnionType());
      assertEquals(false, enumType0.isNominalType());
      assertEquals(false, enumType0.isConstructor());
      assertEquals(false, enumType0.matchesNumberContext());
      assertEquals(false, enumType0.isFunctionType());
      assertEquals(true, enumType0.matchesObjectContext());
      assertEquals(false, enumType0.isOrdinaryFunction());
      assertEquals(false, enumType0.isCheckedUnknownType());
      assertEquals(false, enumType0.isAllType());
      assertEquals(false, enumType0.isResolved());
      assertEquals(true, enumType0.isEnumType());
      assertEquals(false, enumType0.isEmptyType());
      assertEquals(false, enumType0.isInterface());
      assertEquals(false, enumType0.isEnumElementType());
      assertEquals(false, enumType0.isBooleanValueType());
      assertEquals(false, functionType0.isRecordType());
      assertEquals(false, functionType0.hasCachedValues());
      assertEquals(true, functionType0.isFunctionType());
      assertEquals(true, functionType0.isOrdinaryFunction());
      assertEquals(false, functionType0.isCheckedUnknownType());
      assertEquals(false, functionType0.isStringValueType());
      assertEquals(false, functionType0.isNominalType());
      assertEquals(false, functionType0.isNumberValueType());
      assertEquals(false, functionType0.isBooleanValueType());
      assertEquals(false, functionType0.isReturnTypeInferred());
      assertEquals(false, functionType0.isNoObjectType());
      assertEquals(false, functionType0.isEnumElementType());
      assertEquals(false, functionType0.isEnumType());
      assertEquals(false, functionType0.isConstructor());
      assertEquals(false, functionType0.isResolved());
      assertEquals(false, functionType0.isNullType());
      assertEquals(false, functionType0.isUnionType());
      assertEquals(false, functionType0.isTemplateType());
      assertEquals(false, functionType0.isFunctionPrototypeType());
      assertNull(functionType0.getTemplateTypeName());
      assertEquals(false, functionType0.isInterface());
      assertEquals(false, functionType0.isVoidType());
      assertEquals(true, functionType0.canBeCalled());
      assertEquals(0, functionType0.getMaxArguments());
      assertEquals(false, functionType0.isEmptyType());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, functionType0.isNoType());
      assertEquals(false, functionType0.hasInstanceType());
      assertEquals(false, functionType0.isAllType());
      
      FunctionTypeBuilder functionTypeBuilder1 = functionTypeBuilder0.inferThisType(jSDocInfo0, node1);
      assertNotNull(functionTypeBuilder1);
      assertEquals(0, linkedList0.size());
      assertEquals("[]", linkedList0.toString());
      assertEquals(false, enumElementType0.isNumberValueType());
      assertEquals(false, enumElementType0.isEmptyType());
      assertEquals(BooleanLiteralSet.TRUE, enumElementType0.getPossibleToBooleanOutcomes());
      assertEquals(false, enumElementType0.isCheckedUnknownType());
      assertEquals(false, enumElementType0.isNativeObjectType());
      assertEquals(false, enumElementType0.isConstructor());
      assertEquals(false, enumElementType0.isFunctionType());
      assertEquals(false, enumElementType0.isNullType());
      assertEquals(true, enumElementType0.isEnumElementType());
      assertEquals(true, enumElementType0.hasReferenceName());
      assertEquals(false, enumElementType0.isNoObjectType());
      assertEquals(false, enumElementType0.isStringValueType());
      assertEquals(false, enumElementType0.isEnumType());
      assertEquals(false, enumElementType0.isTemplateType());
      assertEquals(false, enumElementType0.hasCachedValues());
      assertEquals(true, enumElementType0.isNominalType());
      assertEquals(false, enumElementType0.isUnionType());
      assertEquals(false, enumElementType0.isOrdinaryFunction());
      assertEquals(false, enumElementType0.isAllType());
      assertEquals("a", enumElementType0.getReferenceName());
      assertEquals(false, enumElementType0.isVoidType());
      assertEquals(false, enumElementType0.isBooleanValueType());
      assertEquals(false, enumElementType0.isInterface());
      assertEquals(false, enumElementType0.isRecordType());
      assertEquals(false, enumElementType0.isFunctionPrototypeType());
      assertEquals(false, enumElementType0.isNoType());
      assertEquals(false, enumElementType0.isResolved());
      assertEquals(true, node0.isSyntheticBlock());
      assertEquals(0, node0.getCharno());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(true, node0.hasChildren());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(132, node0.getType());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isVarArgs());
      assertEquals(true, node0.hasOneChild());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(1, node0.getChildCount());
      assertEquals(1, node0.getLineno());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, enumType0.isRecordType());
      assertEquals(false, enumType0.isNoType());
      assertEquals(false, enumType0.isStringValueType());
      assertEquals(false, enumType0.isVoidType());
      assertEquals(false, enumType0.isFunctionPrototypeType());
      assertEquals(false, enumType0.isNullType());
      assertEquals(false, enumType0.isNoObjectType());
      assertEquals(false, enumType0.isTemplateType());
      assertEquals(false, enumType0.isNumberValueType());
      assertEquals(BooleanLiteralSet.TRUE, enumType0.getPossibleToBooleanOutcomes());
      assertEquals(true, enumType0.matchesStringContext());
      assertEquals(false, enumType0.isUnionType());
      assertEquals(false, enumType0.isNominalType());
      assertEquals(false, enumType0.isConstructor());
      assertEquals(false, enumType0.matchesNumberContext());
      assertEquals(false, enumType0.isFunctionType());
      assertEquals(true, enumType0.matchesObjectContext());
      assertEquals(false, enumType0.isOrdinaryFunction());
      assertEquals(false, enumType0.isCheckedUnknownType());
      assertEquals(false, enumType0.isAllType());
      assertEquals(false, enumType0.isResolved());
      assertEquals(true, enumType0.isEnumType());
      assertEquals(false, enumType0.isEmptyType());
      assertEquals(false, enumType0.isInterface());
      assertEquals(false, enumType0.isEnumElementType());
      assertEquals(false, enumType0.isBooleanValueType());
      assertEquals(false, functionType0.isRecordType());
      assertEquals(false, functionType0.hasCachedValues());
      assertEquals(true, functionType0.isFunctionType());
      assertEquals(true, functionType0.isOrdinaryFunction());
      assertEquals(false, functionType0.isCheckedUnknownType());
      assertEquals(false, functionType0.isStringValueType());
      assertEquals(false, functionType0.isNominalType());
      assertEquals(false, functionType0.isNumberValueType());
      assertEquals(false, functionType0.isBooleanValueType());
      assertEquals(false, functionType0.isReturnTypeInferred());
      assertEquals(false, functionType0.isNoObjectType());
      assertEquals(false, functionType0.isEnumElementType());
      assertEquals(false, functionType0.isEnumType());
      assertEquals(false, functionType0.isConstructor());
      assertEquals(false, functionType0.isResolved());
      assertEquals(false, functionType0.isNullType());
      assertEquals(false, functionType0.isUnionType());
      assertEquals(false, functionType0.isTemplateType());
      assertEquals(false, functionType0.isFunctionPrototypeType());
      assertNull(functionType0.getTemplateTypeName());
      assertEquals(false, functionType0.isInterface());
      assertEquals(false, functionType0.isVoidType());
      assertEquals(true, functionType0.canBeCalled());
      assertEquals(0, functionType0.getMaxArguments());
      assertEquals(false, functionType0.isEmptyType());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, functionType0.isNoType());
      assertEquals(false, functionType0.hasInstanceType());
      assertEquals(false, functionType0.isAllType());
      assertEquals(false, scope0.isLocal());
      assertEquals(true, scope0.isGlobal());
      assertEquals(0, scope0.getVarCount());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertSame(functionTypeBuilder1, functionTypeBuilder0);
      assertSame(functionTypeBuilder0, functionTypeBuilder1);
  }

  @Test
  public void test08()  throws Throwable  {
      String string0 = "Highly error prone shadowing of variable name {0}.Consider using a different local variable name.";
      Compiler compiler0 = new Compiler();
      assertNotNull(compiler0);
      
      Node node0 = compiler0.parseSyntheticCode(string0, string0);
      assertNotNull(node0);
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isQuotedString());
      assertEquals(125, node0.getType());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.hasOneChild());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(true, compiler0.hasErrors());
      assertEquals(1, compiler0.getErrorCount());
      
      Scope scope0 = compiler0.getTopScope();
      assertNull(scope0);
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(true, compiler0.hasErrors());
      assertEquals(1, compiler0.getErrorCount());
      
      FunctionTypeBuilder functionTypeBuilder0 = new FunctionTypeBuilder(string0, compiler0, node0, string0, scope0);
      assertNotNull(functionTypeBuilder0);
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isQuotedString());
      assertEquals(125, node0.getType());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.hasOneChild());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(true, compiler0.hasErrors());
      assertEquals(1, compiler0.getErrorCount());
      
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      assertNotNull(jSDocInfo0);
      assertNull(jSDocInfo0.getSourceName());
      assertEquals(false, jSDocInfo0.isJavaDispatch());
      assertEquals(false, jSDocInfo0.isNoShadow());
      assertEquals(false, jSDocInfo0.isNoAlias());
      assertEquals(false, jSDocInfo0.isExterns());
      assertEquals(false, jSDocInfo0.containsDeclaration());
      assertEquals(false, jSDocInfo0.isInterface());
      assertEquals(false, jSDocInfo0.isConstant());
      assertEquals(false, jSDocInfo0.isImplicitCast());
      assertEquals(false, jSDocInfo0.isNoSideEffects());
      assertEquals(false, jSDocInfo0.hasBaseType());
      assertEquals(false, jSDocInfo0.hasType());
      assertEquals(false, jSDocInfo0.hasThisType());
      assertEquals("JSDocInfo", jSDocInfo0.toString());
      assertEquals(false, jSDocInfo0.isDefine());
      assertEquals(false, jSDocInfo0.isNoTypeCheck());
      assertNull(jSDocInfo0.getLendsName());
      assertNull(jSDocInfo0.getVersion());
      assertNull(jSDocInfo0.getFileOverview());
      assertEquals(0, jSDocInfo0.getImplementedInterfaceCount());
      assertEquals(false, jSDocInfo0.isExport());
      assertEquals(false, jSDocInfo0.hasModifies());
      assertNull(jSDocInfo0.getBlockDescription());
      assertNull(jSDocInfo0.getReturnDescription());
      assertEquals(false, jSDocInfo0.isOverride());
      assertEquals(false, jSDocInfo0.isHidden());
      assertEquals(false, jSDocInfo0.shouldPreserveTry());
      assertNull(jSDocInfo0.getDescription());
      assertNull(jSDocInfo0.getDeprecationReason());
      assertNull(jSDocInfo0.getTemplateTypeName());
      assertNull(jSDocInfo0.getLicense());
      assertNull(jSDocInfo0.getMeaning());
      assertEquals(0, jSDocInfo0.getParameterCount());
      assertEquals(false, jSDocInfo0.hasEnumParameterType());
      assertEquals(false, jSDocInfo0.hasReturnType());
      assertNull(jSDocInfo0.getVisibility());
      assertEquals(false, jSDocInfo0.isNoCompile());
      assertEquals(false, jSDocInfo0.hasTypedefType());
      assertEquals(false, jSDocInfo0.isDeprecated());
      assertEquals(false, jSDocInfo0.hasFileOverview());
      assertEquals(false, jSDocInfo0.isConstructor());
      
      // Undeclared exception!
      try {
        FunctionTypeBuilder functionTypeBuilder1 = functionTypeBuilder0.inferThisType(jSDocInfo0, node0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test09()  throws Throwable  {
      String string0 = "";
      Compiler compiler0 = new Compiler();
      assertNotNull(compiler0);
      
      Node node0 = compiler0.parseSyntheticCode(string0, string0);
      assertNotNull(node0);
      assertEquals(false, node0.isVarArgs());
      assertEquals(0, node0.getChildCount());
      assertEquals(132, node0.getType());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(0, node0.getCharno());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(1, node0.getLineno());
      assertEquals(false, node0.hasOneChild());
      assertEquals(true, node0.isSyntheticBlock());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(0, compiler0.getWarningCount());
      
      ObjectType objectType0 = null;
      Scope scope0 = new Scope(node0, objectType0);
      assertNotNull(scope0);
      assertEquals(true, scope0.isGlobal());
      assertEquals(false, scope0.isLocal());
      assertEquals(0, scope0.getVarCount());
      assertEquals(false, node0.isVarArgs());
      assertEquals(0, node0.getChildCount());
      assertEquals(132, node0.getType());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(0, node0.getCharno());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(1, node0.getLineno());
      assertEquals(false, node0.hasOneChild());
      assertEquals(true, node0.isSyntheticBlock());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(0, compiler0.getWarningCount());
      
      FunctionTypeBuilder functionTypeBuilder0 = new FunctionTypeBuilder(string0, compiler0, node0, string0, scope0);
      assertNotNull(functionTypeBuilder0);
      assertEquals(true, scope0.isGlobal());
      assertEquals(false, scope0.isLocal());
      assertEquals(0, scope0.getVarCount());
      assertEquals(false, node0.isVarArgs());
      assertEquals(0, node0.getChildCount());
      assertEquals(132, node0.getType());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(0, node0.getCharno());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(1, node0.getLineno());
      assertEquals(false, node0.hasOneChild());
      assertEquals(true, node0.isSyntheticBlock());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(0, compiler0.getWarningCount());
      
      JSDocInfo jSDocInfo0 = null;
      // Undeclared exception!
      try {
        FunctionTypeBuilder functionTypeBuilder1 = functionTypeBuilder0.inferThisType(jSDocInfo0, node0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test10()  throws Throwable  {
      String string0 = "a";
      Compiler compiler0 = new Compiler();
      assertNotNull(compiler0);
      
      Node node0 = compiler0.parseSyntheticCode(string0, string0);
      assertNotNull(node0);
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(true, node0.hasChildren());
      assertEquals(132, node0.getType());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(true, node0.hasOneChild());
      assertEquals(1, node0.getChildCount());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(1, node0.getLineno());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(0, node0.getCharno());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isVarArgs());
      assertEquals(true, node0.isSyntheticBlock());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.hasErrors());
      
      ObjectType objectType0 = null;
      Scope scope0 = new Scope(node0, objectType0);
      assertNotNull(scope0);
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(true, node0.hasChildren());
      assertEquals(132, node0.getType());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(true, node0.hasOneChild());
      assertEquals(1, node0.getChildCount());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(1, node0.getLineno());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(0, node0.getCharno());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isVarArgs());
      assertEquals(true, node0.isSyntheticBlock());
      assertEquals(true, scope0.isGlobal());
      assertEquals(false, scope0.isLocal());
      assertEquals(0, scope0.getVarCount());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.hasErrors());
      
      FunctionTypeBuilder functionTypeBuilder0 = new FunctionTypeBuilder(string0, compiler0, node0, string0, scope0);
      assertNotNull(functionTypeBuilder0);
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(true, node0.hasChildren());
      assertEquals(132, node0.getType());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(true, node0.hasOneChild());
      assertEquals(1, node0.getChildCount());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(1, node0.getLineno());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(0, node0.getCharno());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isVarArgs());
      assertEquals(true, node0.isSyntheticBlock());
      assertEquals(true, scope0.isGlobal());
      assertEquals(false, scope0.isLocal());
      assertEquals(0, scope0.getVarCount());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.hasErrors());
      
      JSDocInfo jSDocInfo0 = null;
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      assertNotNull(linkedList0);
      assertEquals("[]", linkedList0.toString());
      assertEquals(0, linkedList0.size());
      
      FunctionType functionType0 = jSTypeRegistry0.createFunctionType((JSType) objectType0, (List<JSType>) linkedList0);
      assertNotNull(functionType0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, functionType0.isEnumElementType());
      assertEquals(false, functionType0.isVoidType());
      assertEquals(false, functionType0.isStringValueType());
      assertEquals(false, functionType0.isEnumType());
      assertEquals(true, functionType0.canBeCalled());
      assertEquals(true, functionType0.isFunctionType());
      assertEquals(false, functionType0.isBooleanValueType());
      assertNull(functionType0.getTemplateTypeName());
      assertEquals(false, functionType0.isReturnTypeInferred());
      assertEquals(true, functionType0.isOrdinaryFunction());
      assertEquals(false, functionType0.isNoType());
      assertEquals(false, functionType0.isNominalType());
      assertEquals(false, functionType0.isRecordType());
      assertEquals(false, functionType0.hasInstanceType());
      assertEquals(false, functionType0.hasCachedValues());
      assertEquals(0, functionType0.getMaxArguments());
      assertEquals(false, functionType0.isUnionType());
      assertEquals(false, functionType0.isAllType());
      assertEquals(false, functionType0.isTemplateType());
      assertEquals(false, functionType0.isCheckedUnknownType());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, functionType0.isEmptyType());
      assertEquals(false, functionType0.isConstructor());
      assertEquals(false, functionType0.isNullType());
      assertEquals(false, functionType0.isNumberValueType());
      assertEquals(false, functionType0.isNoObjectType());
      assertEquals(false, functionType0.isFunctionPrototypeType());
      assertEquals(false, functionType0.isInterface());
      assertEquals(false, functionType0.isResolved());
      assertEquals("[]", linkedList0.toString());
      assertEquals(0, linkedList0.size());
      
      EnumType enumType0 = jSTypeRegistry0.createEnumType(string0, (JSType) functionType0);
      assertNotNull(enumType0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, enumType0.matchesNumberContext());
      assertEquals(false, enumType0.isNominalType());
      assertEquals(false, enumType0.isUnionType());
      assertEquals(false, enumType0.isBooleanValueType());
      assertEquals(false, enumType0.isConstructor());
      assertEquals(false, enumType0.isStringValueType());
      assertEquals(false, enumType0.isCheckedUnknownType());
      assertEquals(false, enumType0.isEnumElementType());
      assertEquals(false, enumType0.isNoObjectType());
      assertEquals(false, enumType0.isInterface());
      assertEquals(false, enumType0.isTemplateType());
      assertEquals(false, enumType0.isEmptyType());
      assertEquals(false, enumType0.isResolved());
      assertEquals(false, enumType0.isOrdinaryFunction());
      assertEquals(false, enumType0.isFunctionPrototypeType());
      assertEquals(false, enumType0.isRecordType());
      assertEquals(false, enumType0.isAllType());
      assertEquals(false, enumType0.isNoType());
      assertEquals(true, enumType0.isEnumType());
      assertEquals(true, enumType0.matchesStringContext());
      assertEquals(false, enumType0.isFunctionType());
      assertEquals(BooleanLiteralSet.TRUE, enumType0.getPossibleToBooleanOutcomes());
      assertEquals(true, enumType0.matchesObjectContext());
      assertEquals(false, enumType0.isNullType());
      assertEquals(false, enumType0.isNumberValueType());
      assertEquals(false, enumType0.isVoidType());
      assertEquals(false, functionType0.isEnumElementType());
      assertEquals(false, functionType0.isVoidType());
      assertEquals(false, functionType0.isStringValueType());
      assertEquals(false, functionType0.isEnumType());
      assertEquals(true, functionType0.canBeCalled());
      assertEquals(true, functionType0.isFunctionType());
      assertEquals(false, functionType0.isBooleanValueType());
      assertNull(functionType0.getTemplateTypeName());
      assertEquals(false, functionType0.isReturnTypeInferred());
      assertEquals(true, functionType0.isOrdinaryFunction());
      assertEquals(false, functionType0.isNoType());
      assertEquals(false, functionType0.isNominalType());
      assertEquals(false, functionType0.isRecordType());
      assertEquals(false, functionType0.hasInstanceType());
      assertEquals(false, functionType0.hasCachedValues());
      assertEquals(0, functionType0.getMaxArguments());
      assertEquals(false, functionType0.isUnionType());
      assertEquals(false, functionType0.isAllType());
      assertEquals(false, functionType0.isTemplateType());
      assertEquals(false, functionType0.isCheckedUnknownType());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, functionType0.isEmptyType());
      assertEquals(false, functionType0.isConstructor());
      assertEquals(false, functionType0.isNullType());
      assertEquals(false, functionType0.isNumberValueType());
      assertEquals(false, functionType0.isNoObjectType());
      assertEquals(false, functionType0.isFunctionPrototypeType());
      assertEquals(false, functionType0.isInterface());
      assertEquals(false, functionType0.isResolved());
      assertEquals("[]", linkedList0.toString());
      assertEquals(0, linkedList0.size());
      
      FunctionTypeBuilder functionTypeBuilder1 = functionTypeBuilder0.inferThisType(jSDocInfo0, enumType0);
      assertNotNull(functionTypeBuilder1);
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(true, node0.hasChildren());
      assertEquals(132, node0.getType());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(true, node0.hasOneChild());
      assertEquals(1, node0.getChildCount());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(1, node0.getLineno());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(0, node0.getCharno());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isVarArgs());
      assertEquals(true, node0.isSyntheticBlock());
      assertEquals(true, scope0.isGlobal());
      assertEquals(false, scope0.isLocal());
      assertEquals(0, scope0.getVarCount());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, enumType0.matchesNumberContext());
      assertEquals(false, enumType0.isNominalType());
      assertEquals(false, enumType0.isUnionType());
      assertEquals(false, enumType0.isBooleanValueType());
      assertEquals(false, enumType0.isConstructor());
      assertEquals(false, enumType0.isStringValueType());
      assertEquals(false, enumType0.isCheckedUnknownType());
      assertEquals(false, enumType0.isEnumElementType());
      assertEquals(false, enumType0.isNoObjectType());
      assertEquals(false, enumType0.isInterface());
      assertEquals(false, enumType0.isTemplateType());
      assertEquals(false, enumType0.isEmptyType());
      assertEquals(false, enumType0.isResolved());
      assertEquals(false, enumType0.isOrdinaryFunction());
      assertEquals(false, enumType0.isFunctionPrototypeType());
      assertEquals(false, enumType0.isRecordType());
      assertEquals(false, enumType0.isAllType());
      assertEquals(false, enumType0.isNoType());
      assertEquals(true, enumType0.isEnumType());
      assertEquals(true, enumType0.matchesStringContext());
      assertEquals(false, enumType0.isFunctionType());
      assertEquals(BooleanLiteralSet.TRUE, enumType0.getPossibleToBooleanOutcomes());
      assertEquals(true, enumType0.matchesObjectContext());
      assertEquals(false, enumType0.isNullType());
      assertEquals(false, enumType0.isNumberValueType());
      assertEquals(false, enumType0.isVoidType());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(false, functionType0.isEnumElementType());
      assertEquals(false, functionType0.isVoidType());
      assertEquals(false, functionType0.isStringValueType());
      assertEquals(false, functionType0.isEnumType());
      assertEquals(true, functionType0.canBeCalled());
      assertEquals(true, functionType0.isFunctionType());
      assertEquals(false, functionType0.isBooleanValueType());
      assertNull(functionType0.getTemplateTypeName());
      assertEquals(false, functionType0.isReturnTypeInferred());
      assertEquals(true, functionType0.isOrdinaryFunction());
      assertEquals(false, functionType0.isNoType());
      assertEquals(false, functionType0.isNominalType());
      assertEquals(false, functionType0.isRecordType());
      assertEquals(false, functionType0.hasInstanceType());
      assertEquals(false, functionType0.hasCachedValues());
      assertEquals(0, functionType0.getMaxArguments());
      assertEquals(false, functionType0.isUnionType());
      assertEquals(false, functionType0.isAllType());
      assertEquals(false, functionType0.isTemplateType());
      assertEquals(false, functionType0.isCheckedUnknownType());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, functionType0.isEmptyType());
      assertEquals(false, functionType0.isConstructor());
      assertEquals(false, functionType0.isNullType());
      assertEquals(false, functionType0.isNumberValueType());
      assertEquals(false, functionType0.isNoObjectType());
      assertEquals(false, functionType0.isFunctionPrototypeType());
      assertEquals(false, functionType0.isInterface());
      assertEquals(false, functionType0.isResolved());
      assertEquals("[]", linkedList0.toString());
      assertEquals(0, linkedList0.size());
      assertSame(functionTypeBuilder0, functionTypeBuilder1);
      assertSame(functionTypeBuilder1, functionTypeBuilder0);
  }

  @Test
  public void test11()  throws Throwable  {
      String string0 = "a";
      Compiler compiler0 = new Compiler();
      assertNotNull(compiler0);
      
      Node node0 = compiler0.parseSyntheticCode(string0, string0);
      assertNotNull(node0);
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isQuotedString());
      assertEquals(true, node0.hasOneChild());
      assertEquals(false, node0.isVarArgs());
      assertEquals(132, node0.getType());
      assertEquals(0, node0.getCharno());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(1, node0.getChildCount());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(true, node0.isSyntheticBlock());
      assertEquals(true, node0.hasChildren());
      assertEquals(1, node0.getLineno());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.isIdeMode());
      
      ObjectType objectType0 = null;
      Scope scope0 = new Scope(node0, objectType0);
      assertNotNull(scope0);
      assertEquals(true, scope0.isGlobal());
      assertEquals(0, scope0.getVarCount());
      assertEquals(false, scope0.isLocal());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isQuotedString());
      assertEquals(true, node0.hasOneChild());
      assertEquals(false, node0.isVarArgs());
      assertEquals(132, node0.getType());
      assertEquals(0, node0.getCharno());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(1, node0.getChildCount());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(true, node0.isSyntheticBlock());
      assertEquals(true, node0.hasChildren());
      assertEquals(1, node0.getLineno());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.isIdeMode());
      
      FunctionTypeBuilder functionTypeBuilder0 = new FunctionTypeBuilder(string0, compiler0, node0, string0, scope0);
      assertNotNull(functionTypeBuilder0);
      assertEquals(true, scope0.isGlobal());
      assertEquals(0, scope0.getVarCount());
      assertEquals(false, scope0.isLocal());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isQuotedString());
      assertEquals(true, node0.hasOneChild());
      assertEquals(false, node0.isVarArgs());
      assertEquals(132, node0.getType());
      assertEquals(0, node0.getCharno());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(1, node0.getChildCount());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(true, node0.isSyntheticBlock());
      assertEquals(true, node0.hasChildren());
      assertEquals(1, node0.getLineno());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.isIdeMode());
      
      JSDocInfo jSDocInfo0 = null;
      FunctionTypeBuilder functionTypeBuilder1 = functionTypeBuilder0.inferThisType(jSDocInfo0, objectType0);
      assertNotNull(functionTypeBuilder1);
      assertEquals(true, scope0.isGlobal());
      assertEquals(0, scope0.getVarCount());
      assertEquals(false, scope0.isLocal());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isQuotedString());
      assertEquals(true, node0.hasOneChild());
      assertEquals(false, node0.isVarArgs());
      assertEquals(132, node0.getType());
      assertEquals(0, node0.getCharno());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(1, node0.getChildCount());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(true, node0.isSyntheticBlock());
      assertEquals(true, node0.hasChildren());
      assertEquals(1, node0.getLineno());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.isIdeMode());
      assertSame(functionTypeBuilder0, functionTypeBuilder1);
      assertSame(functionTypeBuilder1, functionTypeBuilder0);
  }

  @Test
  public void test12()  throws Throwable  {
      String string0 = "w$%dx1AbTw";
      Compiler compiler0 = new Compiler();
      assertNotNull(compiler0);
      
      Node node0 = compiler0.parseSyntheticCode(string0, string0);
      assertNotNull(node0);
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(true, node0.hasOneChild());
      assertEquals(false, node0.isQuotedString());
      assertEquals(1, node0.getChildCount());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(true, node0.hasChildren());
      assertEquals(0, node0.getCharno());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(1, node0.getLineno());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(true, node0.isSyntheticBlock());
      assertEquals(132, node0.getType());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      
      Scope scope0 = compiler0.getTopScope();
      assertNull(scope0);
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      
      FunctionTypeBuilder functionTypeBuilder0 = new FunctionTypeBuilder(string0, compiler0, node0, string0, scope0);
      assertNotNull(functionTypeBuilder0);
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(true, node0.hasOneChild());
      assertEquals(false, node0.isQuotedString());
      assertEquals(1, node0.getChildCount());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(true, node0.hasChildren());
      assertEquals(0, node0.getCharno());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(1, node0.getLineno());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(true, node0.isSyntheticBlock());
      assertEquals(132, node0.getType());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      assertNotNull(jSDocInfo0);
      assertEquals(false, jSDocInfo0.hasType());
      assertEquals(0, jSDocInfo0.getParameterCount());
      assertNull(jSDocInfo0.getLendsName());
      assertNull(jSDocInfo0.getTemplateTypeName());
      assertEquals(false, jSDocInfo0.isNoTypeCheck());
      assertEquals(false, jSDocInfo0.shouldPreserveTry());
      assertEquals(false, jSDocInfo0.isNoCompile());
      assertEquals(false, jSDocInfo0.isImplicitCast());
      assertEquals(false, jSDocInfo0.isExport());
      assertNull(jSDocInfo0.getLicense());
      assertEquals(false, jSDocInfo0.hasReturnType());
      assertNull(jSDocInfo0.getVisibility());
      assertEquals(false, jSDocInfo0.hasTypedefType());
      assertNull(jSDocInfo0.getBlockDescription());
      assertEquals(false, jSDocInfo0.hasBaseType());
      assertEquals(false, jSDocInfo0.hasEnumParameterType());
      assertEquals(false, jSDocInfo0.isHidden());
      assertNull(jSDocInfo0.getMeaning());
      assertEquals("JSDocInfo", jSDocInfo0.toString());
      assertNull(jSDocInfo0.getReturnDescription());
      assertNull(jSDocInfo0.getDescription());
      assertEquals(false, jSDocInfo0.isInterface());
      assertEquals(false, jSDocInfo0.isDeprecated());
      assertNull(jSDocInfo0.getVersion());
      assertNull(jSDocInfo0.getSourceName());
      assertEquals(false, jSDocInfo0.hasThisType());
      assertNull(jSDocInfo0.getDeprecationReason());
      assertEquals(false, jSDocInfo0.isOverride());
      assertEquals(false, jSDocInfo0.isConstructor());
      assertEquals(false, jSDocInfo0.isConstant());
      assertEquals(false, jSDocInfo0.hasFileOverview());
      assertEquals(0, jSDocInfo0.getImplementedInterfaceCount());
      assertEquals(false, jSDocInfo0.hasModifies());
      assertNull(jSDocInfo0.getFileOverview());
      assertEquals(false, jSDocInfo0.isJavaDispatch());
      assertEquals(false, jSDocInfo0.isExterns());
      assertEquals(false, jSDocInfo0.isNoSideEffects());
      assertEquals(false, jSDocInfo0.isNoAlias());
      assertEquals(false, jSDocInfo0.containsDeclaration());
      assertEquals(false, jSDocInfo0.isNoShadow());
      assertEquals(false, jSDocInfo0.isDefine());
      
      FunctionTypeBuilder functionTypeBuilder1 = functionTypeBuilder0.inferInheritance(jSDocInfo0);
      assertNotNull(functionTypeBuilder1);
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(true, node0.hasOneChild());
      assertEquals(false, node0.isQuotedString());
      assertEquals(1, node0.getChildCount());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(true, node0.hasChildren());
      assertEquals(0, node0.getCharno());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(1, node0.getLineno());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(true, node0.isSyntheticBlock());
      assertEquals(132, node0.getType());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(false, jSDocInfo0.hasType());
      assertEquals(0, jSDocInfo0.getParameterCount());
      assertNull(jSDocInfo0.getLendsName());
      assertNull(jSDocInfo0.getTemplateTypeName());
      assertEquals(false, jSDocInfo0.isNoTypeCheck());
      assertEquals(false, jSDocInfo0.shouldPreserveTry());
      assertEquals(false, jSDocInfo0.isNoCompile());
      assertEquals(false, jSDocInfo0.isImplicitCast());
      assertEquals(false, jSDocInfo0.isExport());
      assertNull(jSDocInfo0.getLicense());
      assertEquals(false, jSDocInfo0.hasReturnType());
      assertNull(jSDocInfo0.getVisibility());
      assertEquals(false, jSDocInfo0.hasTypedefType());
      assertNull(jSDocInfo0.getBlockDescription());
      assertEquals(false, jSDocInfo0.hasBaseType());
      assertEquals(false, jSDocInfo0.hasEnumParameterType());
      assertEquals(false, jSDocInfo0.isHidden());
      assertNull(jSDocInfo0.getMeaning());
      assertEquals("JSDocInfo", jSDocInfo0.toString());
      assertNull(jSDocInfo0.getReturnDescription());
      assertNull(jSDocInfo0.getDescription());
      assertEquals(false, jSDocInfo0.isInterface());
      assertEquals(false, jSDocInfo0.isDeprecated());
      assertNull(jSDocInfo0.getVersion());
      assertNull(jSDocInfo0.getSourceName());
      assertEquals(false, jSDocInfo0.hasThisType());
      assertNull(jSDocInfo0.getDeprecationReason());
      assertEquals(false, jSDocInfo0.isOverride());
      assertEquals(false, jSDocInfo0.isConstructor());
      assertEquals(false, jSDocInfo0.isConstant());
      assertEquals(false, jSDocInfo0.hasFileOverview());
      assertEquals(0, jSDocInfo0.getImplementedInterfaceCount());
      assertEquals(false, jSDocInfo0.hasModifies());
      assertNull(jSDocInfo0.getFileOverview());
      assertEquals(false, jSDocInfo0.isJavaDispatch());
      assertEquals(false, jSDocInfo0.isExterns());
      assertEquals(false, jSDocInfo0.isNoSideEffects());
      assertEquals(false, jSDocInfo0.isNoAlias());
      assertEquals(false, jSDocInfo0.containsDeclaration());
      assertEquals(false, jSDocInfo0.isNoShadow());
      assertEquals(false, jSDocInfo0.isDefine());
      assertSame(functionTypeBuilder0, functionTypeBuilder1);
      assertSame(functionTypeBuilder1, functionTypeBuilder0);
  }

  @Test
  public void test13()  throws Throwable  {
      String string0 = "msg.prop.not.found";
      Compiler compiler0 = new Compiler();
      assertNotNull(compiler0);
      
      Node node0 = compiler0.parseSyntheticCode(string0, string0);
      assertNotNull(node0);
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(false, node0.isVarArgs());
      assertEquals(1, node0.getLineno());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(0, node0.getCharno());
      assertEquals(true, node0.isSyntheticBlock());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(true, node0.hasChildren());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(1, node0.getChildCount());
      assertEquals(true, node0.hasOneChild());
      assertEquals(132, node0.getType());
      
      ObjectType objectType0 = null;
      Scope scope0 = new Scope(node0, objectType0);
      assertNotNull(scope0);
      assertEquals(0, scope0.getVarCount());
      assertEquals(false, scope0.isLocal());
      assertEquals(true, scope0.isGlobal());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(false, node0.isVarArgs());
      assertEquals(1, node0.getLineno());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(0, node0.getCharno());
      assertEquals(true, node0.isSyntheticBlock());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(true, node0.hasChildren());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(1, node0.getChildCount());
      assertEquals(true, node0.hasOneChild());
      assertEquals(132, node0.getType());
      
      FunctionTypeBuilder functionTypeBuilder0 = new FunctionTypeBuilder(string0, compiler0, node0, string0, scope0);
      assertNotNull(functionTypeBuilder0);
      assertEquals(0, scope0.getVarCount());
      assertEquals(false, scope0.isLocal());
      assertEquals(true, scope0.isGlobal());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(false, node0.isVarArgs());
      assertEquals(1, node0.getLineno());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(0, node0.getCharno());
      assertEquals(true, node0.isSyntheticBlock());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(true, node0.hasChildren());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(1, node0.getChildCount());
      assertEquals(true, node0.hasOneChild());
      assertEquals(132, node0.getType());
      
      JSDocInfo jSDocInfo0 = null;
      FunctionTypeBuilder functionTypeBuilder1 = functionTypeBuilder0.inferInheritance(jSDocInfo0);
      assertNotNull(functionTypeBuilder1);
      assertEquals(0, scope0.getVarCount());
      assertEquals(false, scope0.isLocal());
      assertEquals(true, scope0.isGlobal());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(false, node0.isVarArgs());
      assertEquals(1, node0.getLineno());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(0, node0.getCharno());
      assertEquals(true, node0.isSyntheticBlock());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(true, node0.hasChildren());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(1, node0.getChildCount());
      assertEquals(true, node0.hasOneChild());
      assertEquals(132, node0.getType());
      assertSame(functionTypeBuilder0, functionTypeBuilder1);
      assertSame(functionTypeBuilder1, functionTypeBuilder0);
  }

  @Test
  public void test14() {}
//   @Test
//   public void test14()  throws Throwable  {
//       String string0 = "";
//       Compiler compiler0 = new Compiler();
//       assertNotNull(compiler0);
//       
//       Node node0 = compiler0.parseSyntheticCode(string0, string0);
//       assertNotNull(node0);
//       assertEquals(false, node0.isQuotedString());
//       assertEquals(132, node0.getType());
//       assertEquals(false, node0.isUnscopedQualifiedName());
//       assertEquals(false, node0.wasEmptyNode());
//       assertEquals(false, node0.isVarArgs());
//       assertEquals(false, node0.isOnlyModifiesThisCall());
//       assertEquals(0, node0.getChildCount());
//       assertEquals(false, node0.isOptionalArg());
//       assertEquals(1, node0.getLineno());
//       assertEquals(false, node0.hasChildren());
//       assertEquals(false, node0.isLocalResultCall());
//       assertEquals(false, node0.isNoSideEffectsCall());
//       assertEquals(0, node0.getCharno());
//       assertEquals(false, node0.hasOneChild());
//       assertEquals(0, node0.getSideEffectFlags());
//       assertEquals(false, node0.isQualifiedName());
//       assertEquals(true, node0.isSyntheticBlock());
//       assertEquals(false, node0.hasMoreThanOneChild());
//       assertEquals(false, compiler0.isTypeCheckingEnabled());
//       assertEquals(false, compiler0.isIdeMode());
//       assertEquals(false, compiler0.hasErrors());
//       assertEquals(0, compiler0.getErrorCount());
//       assertEquals(0, compiler0.getWarningCount());
//       
//       JSSourceFile jSSourceFile0 = JSSourceFile.fromFile(string0);
//       assertNotNull(jSSourceFile0);
//       assertEquals("", jSSourceFile0.toString());
//       assertEquals("", jSSourceFile0.getName());
//       assertEquals("", jSSourceFile0.getOriginalPath());
//       
//       JSSourceFile[] jSSourceFileArray0 = new JSSourceFile[4];
//       jSSourceFileArray0[0] = jSSourceFile0;
//       assertNotNull(jSSourceFileArray0[0]);
//       assertEquals("", jSSourceFile0.toString());
//       assertEquals("", jSSourceFile0.getName());
//       assertEquals("", jSSourceFile0.getOriginalPath());
//       assertEquals("", jSSourceFileArray0[0].toString());
//       assertEquals("", jSSourceFileArray0[0].getOriginalPath());
//       assertEquals("", jSSourceFileArray0[0].getName());
//       
//       jSSourceFileArray0[1] = jSSourceFile0;
//       assertNotNull(jSSourceFileArray0[1]);
//       assertEquals("", jSSourceFile0.toString());
//       assertEquals("", jSSourceFile0.getName());
//       assertEquals("", jSSourceFile0.getOriginalPath());
//       assertEquals("", jSSourceFileArray0[1].toString());
//       assertEquals("", jSSourceFileArray0[1].getOriginalPath());
//       assertEquals("", jSSourceFileArray0[1].getName());
//       
//       jSSourceFileArray0[2] = jSSourceFileArray0[0];
//       assertNotNull(jSSourceFileArray0[2]);
//       assertEquals("", jSSourceFileArray0[2].getName());
//       assertEquals("", jSSourceFileArray0[2].getOriginalPath());
//       assertEquals("", jSSourceFileArray0[2].toString());
//       
//       jSSourceFileArray0[3] = jSSourceFileArray0[0];
//       assertNotNull(jSSourceFileArray0[3]);
//       assertEquals("", jSSourceFileArray0[3].getOriginalPath());
//       assertEquals("", jSSourceFileArray0[3].toString());
//       assertEquals("", jSSourceFileArray0[3].getName());
//       
//       CompilerOptions compilerOptions0 = compiler0.getOptions();
//       assertNotNull(compilerOptions0);
//       assertFalse(compilerOptions0.inlineLocalFunctions);
//       assertFalse(compilerOptions0.removeUnusedVars);
//       assertFalse(compilerOptions0.ignoreCajaProperties);
//       assertFalse(compilerOptions0.checkSymbols);
//       assertFalse(compilerOptions0.aliasKeywords);
//       assertFalse(compilerOptions0.checkTypedPropertyCalls);
//       assertFalse(compilerOptions0.collapseAnonymousFunctions);
//       assertFalse(compilerOptions0.lineBreak);
//       assertFalse(compilerOptions0.removeUnusedLocalVars);
//       assertFalse(compilerOptions0.inlineLocalVariables);
//       assertFalse(compilerOptions0.gatherCssNames);
//       assertFalse(compilerOptions0.instrumentForCoverageOnly);
//       assertFalse(compilerOptions0.checkTypes);
//       assertFalse(compilerOptions0.flowSensitiveInlineVariables);
//       assertFalse(compilerOptions0.aliasExternals);
//       assertFalse(compilerOptions0.convertToDottedProperties);
//       assertFalse(compilerOptions0.disambiguateProperties);
//       assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
//       assertFalse(compilerOptions0.inlineConstantVars);
//       assertFalse(compilerOptions0.tightenTypes);
//       assertFalse(compilerOptions0.moveFunctionDeclarations);
//       assertFalse(compilerOptions0.crossModuleMethodMotion);
//       assertFalse(compilerOptions0.generateExports);
//       assertFalse(compilerOptions0.checkEs5Strict);
//       assertFalse(compilerOptions0.optimizeArgumentsArray);
//       assertFalse(compilerOptions0.decomposeExpressions);
//       assertFalse(compilerOptions0.instrumentForCoverage);
//       assertFalse(compilerOptions0.inlineGetters);
//       assertFalse(compilerOptions0.collapseProperties);
//       assertFalse(compilerOptions0.markAsCompiled);
//       assertFalse(compilerOptions0.inlineFunctions);
//       assertFalse(compilerOptions0.foldConstants);
//       assertFalse(compilerOptions0.inlineVariables);
//       assertFalse(compilerOptions0.checkSuspiciousCode);
//       assertFalse(compilerOptions0.removeEmptyFunctions);
//       assertFalse(compilerOptions0.checkControlStructures);
//       assertFalse(compilerOptions0.ideMode);
//       assertFalse(compilerOptions0.checkCaja);
//       assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
//       assertFalse(compilerOptions0.smartNameRemoval);
//       assertFalse(compilerOptions0.ambiguateProperties);
//       assertFalse(compilerOptions0.checkUnusedPropertiesEarly);
//       assertFalse(compilerOptions0.markNoSideEffectCalls);
//       assertFalse(compilerOptions0.strictMessageReplacement);
//       assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
//       assertFalse(compilerOptions0.recordFunctionInformation);
//       assertFalse(compilerOptions0.generatePseudoNames);
//       assertFalse(compilerOptions0.inlineAnonymousFunctionExpressions);
//       assertFalse(compilerOptions0.exportTestFunctions);
//       assertFalse(compilerOptions0.removeDeadCode);
//       assertFalse(compilerOptions0.inferTypesInGlobalScope);
//       assertFalse(compilerOptions0.computeFunctionSideEffects);
//       assertFalse(compilerOptions0.coalesceVariableNames);
//       assertFalse(compilerOptions0.labelRenaming);
//       assertFalse(compilerOptions0.specializeInitialModule);
//       assertFalse(compilerOptions0.prettyPrint);
//       assertFalse(compilerOptions0.printInputDelimiter);
//       assertFalse(compilerOptions0.checkDuplicateMessages);
//       assertFalse(compilerOptions0.collapseVariableDeclarations);
//       assertFalse(compilerOptions0.reserveRawExports);
//       assertFalse(compilerOptions0.deadAssignmentElimination);
//       assertFalse(compilerOptions0.optimizeParameters);
//       assertFalse(compilerOptions0.groupVariableDeclarations);
//       assertFalse(compilerOptions0.rewriteFunctionExpressions);
//       assertFalse(compilerOptions0.allowLegacyJsMessages);
//       assertFalse(compilerOptions0.aliasAllStrings);
//       assertFalse(compilerOptions0.removeTryCatchFinally);
//       assertFalse(compilerOptions0.crossModuleCodeMotion);
//       assertFalse(compilerOptions0.devirtualizePrototypeMethods);
//       assertFalse(compilerOptions0.closurePass);
//       assertEquals(false, compilerOptions0.isExternExportsEnabled());
//       assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
//       assertEquals(false, compiler0.isTypeCheckingEnabled());
//       assertEquals(false, compiler0.isIdeMode());
//       assertEquals(false, compiler0.hasErrors());
//       assertEquals(0, compiler0.getErrorCount());
//       assertEquals(0, compiler0.getWarningCount());
//       
//       Result result0 = compiler0.compile(jSSourceFile0, jSSourceFileArray0, compilerOptions0);
//       assertNotNull(result0);
//       assertFalse(compilerOptions0.inlineLocalFunctions);
//       assertFalse(compilerOptions0.removeUnusedVars);
//       assertFalse(compilerOptions0.ignoreCajaProperties);
//       assertFalse(compilerOptions0.checkSymbols);
//       assertFalse(compilerOptions0.aliasKeywords);
//       assertFalse(compilerOptions0.checkTypedPropertyCalls);
//       assertFalse(compilerOptions0.collapseAnonymousFunctions);
//       assertFalse(compilerOptions0.lineBreak);
//       assertFalse(compilerOptions0.removeUnusedLocalVars);
//       assertFalse(compilerOptions0.inlineLocalVariables);
//       assertFalse(compilerOptions0.gatherCssNames);
//       assertFalse(compilerOptions0.instrumentForCoverageOnly);
//       assertFalse(compilerOptions0.checkTypes);
//       assertFalse(compilerOptions0.flowSensitiveInlineVariables);
//       assertFalse(compilerOptions0.aliasExternals);
//       assertFalse(compilerOptions0.convertToDottedProperties);
//       assertFalse(compilerOptions0.disambiguateProperties);
//       assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
//       assertFalse(compilerOptions0.inlineConstantVars);
//       assertFalse(compilerOptions0.tightenTypes);
//       assertFalse(compilerOptions0.moveFunctionDeclarations);
//       assertFalse(compilerOptions0.crossModuleMethodMotion);
//       assertFalse(compilerOptions0.generateExports);
//       assertFalse(compilerOptions0.checkEs5Strict);
//       assertFalse(compilerOptions0.optimizeArgumentsArray);
//       assertFalse(compilerOptions0.decomposeExpressions);
//       assertFalse(compilerOptions0.instrumentForCoverage);
//       assertFalse(compilerOptions0.inlineGetters);
//       assertFalse(compilerOptions0.collapseProperties);
//       assertFalse(compilerOptions0.markAsCompiled);
//       assertFalse(compilerOptions0.inlineFunctions);
//       assertFalse(compilerOptions0.foldConstants);
//       assertFalse(compilerOptions0.inlineVariables);
//       assertFalse(compilerOptions0.checkSuspiciousCode);
//       assertFalse(compilerOptions0.removeEmptyFunctions);
//       assertFalse(compilerOptions0.checkControlStructures);
//       assertFalse(compilerOptions0.ideMode);
//       assertFalse(compilerOptions0.checkCaja);
//       assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
//       assertFalse(compilerOptions0.smartNameRemoval);
//       assertFalse(compilerOptions0.ambiguateProperties);
//       assertFalse(compilerOptions0.checkUnusedPropertiesEarly);
//       assertFalse(compilerOptions0.markNoSideEffectCalls);
//       assertFalse(compilerOptions0.strictMessageReplacement);
//       assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
//       assertFalse(compilerOptions0.recordFunctionInformation);
//       assertFalse(compilerOptions0.generatePseudoNames);
//       assertFalse(compilerOptions0.inlineAnonymousFunctionExpressions);
//       assertFalse(compilerOptions0.exportTestFunctions);
//       assertFalse(compilerOptions0.removeDeadCode);
//       assertFalse(compilerOptions0.inferTypesInGlobalScope);
//       assertFalse(compilerOptions0.computeFunctionSideEffects);
//       assertFalse(compilerOptions0.coalesceVariableNames);
//       assertFalse(compilerOptions0.labelRenaming);
//       assertFalse(compilerOptions0.specializeInitialModule);
//       assertFalse(compilerOptions0.prettyPrint);
//       assertFalse(compilerOptions0.printInputDelimiter);
//       assertFalse(compilerOptions0.checkDuplicateMessages);
//       assertFalse(compilerOptions0.collapseVariableDeclarations);
//       assertFalse(compilerOptions0.reserveRawExports);
//       assertFalse(compilerOptions0.deadAssignmentElimination);
//       assertFalse(compilerOptions0.optimizeParameters);
//       assertFalse(compilerOptions0.groupVariableDeclarations);
//       assertFalse(compilerOptions0.rewriteFunctionExpressions);
//       assertFalse(compilerOptions0.allowLegacyJsMessages);
//       assertFalse(compilerOptions0.aliasAllStrings);
//       assertFalse(compilerOptions0.removeTryCatchFinally);
//       assertFalse(compilerOptions0.crossModuleCodeMotion);
//       assertFalse(compilerOptions0.devirtualizePrototypeMethods);
//       assertFalse(compilerOptions0.closurePass);
//       assertEquals(false, compilerOptions0.isExternExportsEnabled());
//       assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
//       assertEquals("", jSSourceFile0.toString());
//       assertEquals("", jSSourceFile0.getName());
//       assertEquals("", jSSourceFile0.getOriginalPath());
//       assertEquals(false, compiler0.isTypeCheckingEnabled());
//       assertEquals(false, compiler0.isIdeMode());
//       assertEquals(1, compiler0.getErrorCount());
//       assertEquals(true, compiler0.hasErrors());
//       assertEquals(0, compiler0.getWarningCount());
//       
//       ObjectType objectType0 = null;
//       Scope scope0 = new Scope(node0, objectType0);
//       assertNotNull(scope0);
//       assertEquals(false, node0.isQuotedString());
//       assertEquals(132, node0.getType());
//       assertEquals(false, node0.isUnscopedQualifiedName());
//       assertEquals(false, node0.wasEmptyNode());
//       assertEquals(false, node0.isVarArgs());
//       assertEquals(false, node0.isOnlyModifiesThisCall());
//       assertEquals(0, node0.getChildCount());
//       assertEquals(false, node0.isOptionalArg());
//       assertEquals(1, node0.getLineno());
//       assertEquals(false, node0.hasChildren());
//       assertEquals(false, node0.isLocalResultCall());
//       assertEquals(false, node0.isNoSideEffectsCall());
//       assertEquals(0, node0.getCharno());
//       assertEquals(false, node0.hasOneChild());
//       assertEquals(0, node0.getSideEffectFlags());
//       assertEquals(false, node0.isQualifiedName());
//       assertEquals(true, node0.isSyntheticBlock());
//       assertEquals(false, node0.hasMoreThanOneChild());
//       assertEquals(false, compiler0.isTypeCheckingEnabled());
//       assertEquals(false, compiler0.isIdeMode());
//       assertEquals(1, compiler0.getErrorCount());
//       assertEquals(true, compiler0.hasErrors());
//       assertEquals(0, compiler0.getWarningCount());
//       assertEquals(false, scope0.isLocal());
//       assertEquals(0, scope0.getVarCount());
//       assertEquals(true, scope0.isGlobal());
//       
//       FunctionTypeBuilder functionTypeBuilder0 = new FunctionTypeBuilder(string0, compiler0, node0, string0, scope0);
//       assertNotNull(functionTypeBuilder0);
//       assertEquals(false, node0.isQuotedString());
//       assertEquals(132, node0.getType());
//       assertEquals(false, node0.isUnscopedQualifiedName());
//       assertEquals(false, node0.wasEmptyNode());
//       assertEquals(false, node0.isVarArgs());
//       assertEquals(false, node0.isOnlyModifiesThisCall());
//       assertEquals(0, node0.getChildCount());
//       assertEquals(false, node0.isOptionalArg());
//       assertEquals(1, node0.getLineno());
//       assertEquals(false, node0.hasChildren());
//       assertEquals(false, node0.isLocalResultCall());
//       assertEquals(false, node0.isNoSideEffectsCall());
//       assertEquals(0, node0.getCharno());
//       assertEquals(false, node0.hasOneChild());
//       assertEquals(0, node0.getSideEffectFlags());
//       assertEquals(false, node0.isQualifiedName());
//       assertEquals(true, node0.isSyntheticBlock());
//       assertEquals(false, node0.hasMoreThanOneChild());
//       assertEquals(false, compiler0.isTypeCheckingEnabled());
//       assertEquals(false, compiler0.isIdeMode());
//       assertEquals(1, compiler0.getErrorCount());
//       assertEquals(true, compiler0.hasErrors());
//       assertEquals(0, compiler0.getWarningCount());
//       assertEquals(false, scope0.isLocal());
//       assertEquals(0, scope0.getVarCount());
//       assertEquals(true, scope0.isGlobal());
//       
//       FunctionTypeBuilder functionTypeBuilder1 = functionTypeBuilder0.inferReturnStatementsAsLastResort(node0);
//       assertNotNull(functionTypeBuilder1);
//       assertEquals(false, node0.isQuotedString());
//       assertEquals(132, node0.getType());
//       assertEquals(false, node0.isUnscopedQualifiedName());
//       assertEquals(false, node0.wasEmptyNode());
//       assertEquals(false, node0.isVarArgs());
//       assertEquals(false, node0.isOnlyModifiesThisCall());
//       assertEquals(0, node0.getChildCount());
//       assertEquals(false, node0.isOptionalArg());
//       assertEquals(1, node0.getLineno());
//       assertEquals(false, node0.hasChildren());
//       assertEquals(false, node0.isLocalResultCall());
//       assertEquals(false, node0.isNoSideEffectsCall());
//       assertEquals(0, node0.getCharno());
//       assertEquals(false, node0.hasOneChild());
//       assertEquals(0, node0.getSideEffectFlags());
//       assertEquals(false, node0.isQualifiedName());
//       assertEquals(true, node0.isSyntheticBlock());
//       assertEquals(false, node0.hasMoreThanOneChild());
//       assertEquals(false, compiler0.isTypeCheckingEnabled());
//       assertEquals(false, compiler0.isIdeMode());
//       assertEquals(1, compiler0.getErrorCount());
//       assertEquals(true, compiler0.hasErrors());
//       assertEquals(0, compiler0.getWarningCount());
//       assertEquals(false, scope0.isLocal());
//       assertEquals(0, scope0.getVarCount());
//       assertEquals(true, scope0.isGlobal());
//       assertSame(functionTypeBuilder0, functionTypeBuilder1);
//       assertSame(functionTypeBuilder1, functionTypeBuilder0);
//   }

  @Test
  public void test15()  throws Throwable  {
      String string0 = "";
      Compiler compiler0 = new Compiler();
      assertNotNull(compiler0);
      
      Node node0 = compiler0.parseSyntheticCode(string0, string0);
      assertNotNull(node0);
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(1, node0.getLineno());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.hasOneChild());
      assertEquals(0, node0.getCharno());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(true, node0.isSyntheticBlock());
      assertEquals(132, node0.getType());
      assertEquals(false, node0.hasChildren());
      
      ObjectType objectType0 = null;
      Scope scope0 = new Scope(node0, objectType0);
      assertNotNull(scope0);
      assertEquals(true, scope0.isGlobal());
      assertEquals(false, scope0.isLocal());
      assertEquals(0, scope0.getVarCount());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(1, node0.getLineno());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.hasOneChild());
      assertEquals(0, node0.getCharno());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(true, node0.isSyntheticBlock());
      assertEquals(132, node0.getType());
      assertEquals(false, node0.hasChildren());
      
      FunctionTypeBuilder functionTypeBuilder0 = new FunctionTypeBuilder(string0, compiler0, node0, string0, scope0);
      assertNotNull(functionTypeBuilder0);
      assertEquals(true, scope0.isGlobal());
      assertEquals(false, scope0.isLocal());
      assertEquals(0, scope0.getVarCount());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(1, node0.getLineno());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.hasOneChild());
      assertEquals(0, node0.getCharno());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(true, node0.isSyntheticBlock());
      assertEquals(132, node0.getType());
      assertEquals(false, node0.hasChildren());
      
      Node node1 = node0.getNext();
      assertNull(node1);
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(1, node0.getLineno());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.hasOneChild());
      assertEquals(0, node0.getCharno());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(true, node0.isSyntheticBlock());
      assertEquals(132, node0.getType());
      assertEquals(false, node0.hasChildren());
      
      FunctionTypeBuilder functionTypeBuilder1 = functionTypeBuilder0.inferReturnStatementsAsLastResort(node1);
      assertNotNull(functionTypeBuilder1);
      assertEquals(true, scope0.isGlobal());
      assertEquals(false, scope0.isLocal());
      assertEquals(0, scope0.getVarCount());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(1, node0.getLineno());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.hasOneChild());
      assertEquals(0, node0.getCharno());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(true, node0.isSyntheticBlock());
      assertEquals(132, node0.getType());
      assertEquals(false, node0.hasChildren());
      assertSame(functionTypeBuilder0, functionTypeBuilder1);
      assertSame(functionTypeBuilder1, functionTypeBuilder0);
  }

  @Test
  public void test16()  throws Throwable  {
      String string0 = "Highly error prone shadowing of variable name {0}.Consider using a different local variable name.";
      Compiler compiler0 = new Compiler();
      assertNotNull(compiler0);
      
      Node node0 = compiler0.parseSyntheticCode(string0, string0);
      assertNotNull(node0);
      assertEquals(true, compiler0.hasErrors());
      assertEquals(1, compiler0.getErrorCount());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isVarArgs());
      assertEquals(125, node0.getType());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.hasOneChild());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      
      Scope scope0 = compiler0.getTopScope();
      assertNull(scope0);
      assertEquals(true, compiler0.hasErrors());
      assertEquals(1, compiler0.getErrorCount());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      
      FunctionTypeBuilder functionTypeBuilder0 = new FunctionTypeBuilder(string0, compiler0, node0, string0, scope0);
      assertNotNull(functionTypeBuilder0);
      assertEquals(true, compiler0.hasErrors());
      assertEquals(1, compiler0.getErrorCount());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isVarArgs());
      assertEquals(125, node0.getType());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.hasOneChild());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      assertNotNull(jSDocInfo0);
      assertEquals(false, jSDocInfo0.hasEnumParameterType());
      assertEquals(false, jSDocInfo0.isDefine());
      assertEquals(false, jSDocInfo0.isNoCompile());
      assertEquals(false, jSDocInfo0.shouldPreserveTry());
      assertEquals(false, jSDocInfo0.isExport());
      assertEquals(false, jSDocInfo0.isConstructor());
      assertEquals(false, jSDocInfo0.isImplicitCast());
      assertEquals("JSDocInfo", jSDocInfo0.toString());
      assertEquals(false, jSDocInfo0.hasThisType());
      assertEquals(false, jSDocInfo0.isHidden());
      assertNull(jSDocInfo0.getDescription());
      assertEquals(false, jSDocInfo0.isNoSideEffects());
      assertEquals(false, jSDocInfo0.isNoTypeCheck());
      assertEquals(false, jSDocInfo0.hasTypedefType());
      assertNull(jSDocInfo0.getReturnDescription());
      assertNull(jSDocInfo0.getBlockDescription());
      assertNull(jSDocInfo0.getFileOverview());
      assertNull(jSDocInfo0.getTemplateTypeName());
      assertEquals(false, jSDocInfo0.isJavaDispatch());
      assertEquals(false, jSDocInfo0.containsDeclaration());
      assertEquals(0, jSDocInfo0.getImplementedInterfaceCount());
      assertNull(jSDocInfo0.getSourceName());
      assertNull(jSDocInfo0.getVisibility());
      assertEquals(false, jSDocInfo0.isDeprecated());
      assertNull(jSDocInfo0.getVersion());
      assertNull(jSDocInfo0.getDeprecationReason());
      assertEquals(false, jSDocInfo0.hasType());
      assertEquals(false, jSDocInfo0.isNoAlias());
      assertEquals(false, jSDocInfo0.isInterface());
      assertNull(jSDocInfo0.getLicense());
      assertEquals(false, jSDocInfo0.isOverride());
      assertNull(jSDocInfo0.getLendsName());
      assertEquals(false, jSDocInfo0.isConstant());
      assertEquals(false, jSDocInfo0.hasFileOverview());
      assertEquals(false, jSDocInfo0.hasReturnType());
      assertEquals(false, jSDocInfo0.hasModifies());
      assertEquals(0, jSDocInfo0.getParameterCount());
      assertEquals(false, jSDocInfo0.isExterns());
      assertEquals(false, jSDocInfo0.hasBaseType());
      assertNull(jSDocInfo0.getMeaning());
      assertEquals(false, jSDocInfo0.isNoShadow());
      
      FunctionTypeBuilder functionTypeBuilder1 = functionTypeBuilder0.inferReturnType(jSDocInfo0);
      assertNotNull(functionTypeBuilder1);
      assertEquals(false, jSDocInfo0.hasEnumParameterType());
      assertEquals(false, jSDocInfo0.isDefine());
      assertEquals(false, jSDocInfo0.isNoCompile());
      assertEquals(false, jSDocInfo0.shouldPreserveTry());
      assertEquals(false, jSDocInfo0.isExport());
      assertEquals(false, jSDocInfo0.isConstructor());
      assertEquals(false, jSDocInfo0.isImplicitCast());
      assertEquals("JSDocInfo", jSDocInfo0.toString());
      assertEquals(false, jSDocInfo0.hasThisType());
      assertEquals(false, jSDocInfo0.isHidden());
      assertNull(jSDocInfo0.getDescription());
      assertEquals(false, jSDocInfo0.isNoSideEffects());
      assertEquals(false, jSDocInfo0.isNoTypeCheck());
      assertEquals(false, jSDocInfo0.hasTypedefType());
      assertNull(jSDocInfo0.getReturnDescription());
      assertNull(jSDocInfo0.getBlockDescription());
      assertNull(jSDocInfo0.getFileOverview());
      assertNull(jSDocInfo0.getTemplateTypeName());
      assertEquals(false, jSDocInfo0.isJavaDispatch());
      assertEquals(false, jSDocInfo0.containsDeclaration());
      assertEquals(0, jSDocInfo0.getImplementedInterfaceCount());
      assertNull(jSDocInfo0.getSourceName());
      assertNull(jSDocInfo0.getVisibility());
      assertEquals(false, jSDocInfo0.isDeprecated());
      assertNull(jSDocInfo0.getVersion());
      assertNull(jSDocInfo0.getDeprecationReason());
      assertEquals(false, jSDocInfo0.hasType());
      assertEquals(false, jSDocInfo0.isNoAlias());
      assertEquals(false, jSDocInfo0.isInterface());
      assertNull(jSDocInfo0.getLicense());
      assertEquals(false, jSDocInfo0.isOverride());
      assertNull(jSDocInfo0.getLendsName());
      assertEquals(false, jSDocInfo0.isConstant());
      assertEquals(false, jSDocInfo0.hasFileOverview());
      assertEquals(false, jSDocInfo0.hasReturnType());
      assertEquals(false, jSDocInfo0.hasModifies());
      assertEquals(0, jSDocInfo0.getParameterCount());
      assertEquals(false, jSDocInfo0.isExterns());
      assertEquals(false, jSDocInfo0.hasBaseType());
      assertNull(jSDocInfo0.getMeaning());
      assertEquals(false, jSDocInfo0.isNoShadow());
      assertEquals(true, compiler0.hasErrors());
      assertEquals(1, compiler0.getErrorCount());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isVarArgs());
      assertEquals(125, node0.getType());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.hasOneChild());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertSame(functionTypeBuilder1, functionTypeBuilder0);
      assertSame(functionTypeBuilder0, functionTypeBuilder1);
  }

  @Test
  public void test17()  throws Throwable  {
      String string0 = "msg.prop.not.found";
      Compiler compiler0 = new Compiler();
      assertNotNull(compiler0);
      
      Node node0 = compiler0.parseSyntheticCode(string0, string0);
      assertNotNull(node0);
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(true, node0.isSyntheticBlock());
      assertEquals(132, node0.getType());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isQuotedString());
      assertEquals(1, node0.getLineno());
      assertEquals(true, node0.hasChildren());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(1, node0.getChildCount());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(0, node0.getCharno());
      assertEquals(true, node0.hasOneChild());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isNoSideEffectsCall());
      
      ObjectType objectType0 = null;
      Scope scope0 = new Scope(node0, objectType0);
      assertNotNull(scope0);
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(true, scope0.isGlobal());
      assertEquals(0, scope0.getVarCount());
      assertEquals(false, scope0.isLocal());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(true, node0.isSyntheticBlock());
      assertEquals(132, node0.getType());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isQuotedString());
      assertEquals(1, node0.getLineno());
      assertEquals(true, node0.hasChildren());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(1, node0.getChildCount());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(0, node0.getCharno());
      assertEquals(true, node0.hasOneChild());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isNoSideEffectsCall());
      
      FunctionTypeBuilder functionTypeBuilder0 = new FunctionTypeBuilder(string0, compiler0, node0, string0, scope0);
      assertNotNull(functionTypeBuilder0);
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(true, scope0.isGlobal());
      assertEquals(0, scope0.getVarCount());
      assertEquals(false, scope0.isLocal());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(true, node0.isSyntheticBlock());
      assertEquals(132, node0.getType());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isQuotedString());
      assertEquals(1, node0.getLineno());
      assertEquals(true, node0.hasChildren());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(1, node0.getChildCount());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(0, node0.getCharno());
      assertEquals(true, node0.hasOneChild());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isNoSideEffectsCall());
      
      JSDocInfo jSDocInfo0 = null;
      FunctionTypeBuilder functionTypeBuilder1 = functionTypeBuilder0.inferReturnType(jSDocInfo0);
      assertNotNull(functionTypeBuilder1);
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(true, scope0.isGlobal());
      assertEquals(0, scope0.getVarCount());
      assertEquals(false, scope0.isLocal());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(true, node0.isSyntheticBlock());
      assertEquals(132, node0.getType());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isQuotedString());
      assertEquals(1, node0.getLineno());
      assertEquals(true, node0.hasChildren());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(1, node0.getChildCount());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(0, node0.getCharno());
      assertEquals(true, node0.hasOneChild());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertSame(functionTypeBuilder1, functionTypeBuilder0);
      assertSame(functionTypeBuilder0, functionTypeBuilder1);
  }

  @Test
  public void test18()  throws Throwable  {
      String string0 = "a";
      Compiler compiler0 = new Compiler();
      assertNotNull(compiler0);
      
      Node node0 = compiler0.parseSyntheticCode(string0, string0);
      assertNotNull(node0);
      assertEquals(true, node0.isSyntheticBlock());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(1, node0.getLineno());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isQuotedString());
      assertEquals(0, node0.getCharno());
      assertEquals(132, node0.getType());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(true, node0.hasChildren());
      assertEquals(true, node0.hasOneChild());
      assertEquals(1, node0.getChildCount());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(0, compiler0.getWarningCount());
      
      ObjectType objectType0 = null;
      Scope scope0 = new Scope(node0, objectType0);
      assertNotNull(scope0);
      assertEquals(true, node0.isSyntheticBlock());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(1, node0.getLineno());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isQuotedString());
      assertEquals(0, node0.getCharno());
      assertEquals(132, node0.getType());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(true, node0.hasChildren());
      assertEquals(true, node0.hasOneChild());
      assertEquals(1, node0.getChildCount());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(0, scope0.getVarCount());
      assertEquals(true, scope0.isGlobal());
      assertEquals(false, scope0.isLocal());
      
      FunctionTypeBuilder functionTypeBuilder0 = new FunctionTypeBuilder(string0, compiler0, node0, string0, scope0);
      assertNotNull(functionTypeBuilder0);
      assertEquals(true, node0.isSyntheticBlock());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(1, node0.getLineno());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isQuotedString());
      assertEquals(0, node0.getCharno());
      assertEquals(132, node0.getType());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(true, node0.hasChildren());
      assertEquals(true, node0.hasOneChild());
      assertEquals(1, node0.getChildCount());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(0, scope0.getVarCount());
      assertEquals(true, scope0.isGlobal());
      assertEquals(false, scope0.isLocal());
      
      node0.addChildToBack(node0);
      assertEquals(2, node0.getChildCount());
      assertEquals(true, node0.isSyntheticBlock());
      assertEquals(true, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(1, node0.getLineno());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isQuotedString());
      assertEquals(0, node0.getCharno());
      assertEquals(132, node0.getType());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(true, node0.hasChildren());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(0, compiler0.getWarningCount());
      
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      JSTypeNative jSTypeNative0 = JSTypeNative.REGEXP_FUNCTION_TYPE;
      FunctionType functionType0 = jSTypeRegistry0.getNativeFunctionType(jSTypeNative0);
      assertNotNull(functionType0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, functionType0.isInterface());
      assertEquals(true, functionType0.hasCachedValues());
      assertEquals(false, functionType0.isTemplateType());
      assertEquals(false, functionType0.isVoidType());
      assertEquals(false, functionType0.isStringValueType());
      assertNull(functionType0.getTemplateTypeName());
      assertEquals(false, functionType0.isRecordType());
      assertEquals(false, functionType0.isReturnTypeInferred());
      assertEquals(false, functionType0.isUnionType());
      assertEquals(false, functionType0.isNoObjectType());
      assertEquals(false, functionType0.isNullType());
      assertEquals(false, functionType0.isEnumType());
      assertEquals(false, functionType0.isAllType());
      assertEquals(false, functionType0.isCheckedUnknownType());
      assertEquals(false, functionType0.isEnumElementType());
      assertEquals(false, functionType0.isResolved());
      assertEquals(false, functionType0.isNumberValueType());
      assertEquals(false, functionType0.isEmptyType());
      assertEquals(true, functionType0.canBeCalled());
      assertEquals(false, functionType0.isBooleanValueType());
      assertEquals(false, functionType0.isNoType());
      assertEquals(false, functionType0.isFunctionPrototypeType());
      assertEquals(false, functionType0.isNominalType());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, functionType0.isOrdinaryFunction());
      assertEquals(2, functionType0.getMaxArguments());
      assertEquals(true, functionType0.hasInstanceType());
      assertEquals(true, functionType0.isConstructor());
      assertEquals(true, functionType0.isFunctionType());
      
      FunctionTypeBuilder functionTypeBuilder1 = functionTypeBuilder0.inferFromOverriddenFunction(functionType0, node0);
      assertNotNull(functionTypeBuilder1);
      assertEquals(2, node0.getChildCount());
      assertEquals(true, node0.isSyntheticBlock());
      assertEquals(true, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(1, node0.getLineno());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isQuotedString());
      assertEquals(0, node0.getCharno());
      assertEquals(132, node0.getType());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(true, node0.hasChildren());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, functionType0.isInterface());
      assertEquals(true, functionType0.hasCachedValues());
      assertEquals(false, functionType0.isTemplateType());
      assertEquals(false, functionType0.isVoidType());
      assertEquals(false, functionType0.isStringValueType());
      assertNull(functionType0.getTemplateTypeName());
      assertEquals(false, functionType0.isRecordType());
      assertEquals(false, functionType0.isReturnTypeInferred());
      assertEquals(false, functionType0.isUnionType());
      assertEquals(false, functionType0.isNoObjectType());
      assertEquals(false, functionType0.isNullType());
      assertEquals(false, functionType0.isEnumType());
      assertEquals(false, functionType0.isAllType());
      assertEquals(false, functionType0.isCheckedUnknownType());
      assertEquals(false, functionType0.isEnumElementType());
      assertEquals(false, functionType0.isResolved());
      assertEquals(false, functionType0.isNumberValueType());
      assertEquals(false, functionType0.isEmptyType());
      assertEquals(true, functionType0.canBeCalled());
      assertEquals(false, functionType0.isBooleanValueType());
      assertEquals(false, functionType0.isNoType());
      assertEquals(false, functionType0.isFunctionPrototypeType());
      assertEquals(false, functionType0.isNominalType());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, functionType0.isOrdinaryFunction());
      assertEquals(2, functionType0.getMaxArguments());
      assertEquals(true, functionType0.hasInstanceType());
      assertEquals(true, functionType0.isConstructor());
      assertEquals(true, functionType0.isFunctionType());
      assertEquals(0, scope0.getVarCount());
      assertEquals(true, scope0.isGlobal());
      assertEquals(false, scope0.isLocal());
      assertSame(functionTypeBuilder0, functionTypeBuilder1);
      assertSame(functionTypeBuilder1, functionTypeBuilder0);
  }

  @Test
  public void test19()  throws Throwable  {
      String string0 = "a";
      Compiler compiler0 = new Compiler();
      assertNotNull(compiler0);
      
      Node node0 = compiler0.parseSyntheticCode(string0, string0);
      assertNotNull(node0);
      assertEquals(false, compiler0.hasErrors());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(0, node0.getCharno());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(132, node0.getType());
      assertEquals(1, node0.getLineno());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isVarArgs());
      assertEquals(1, node0.getChildCount());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(true, node0.hasOneChild());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(true, node0.hasChildren());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(true, node0.isSyntheticBlock());
      assertEquals(false, node0.isOptionalArg());
      
      ObjectType objectType0 = null;
      Scope scope0 = new Scope(node0, objectType0);
      assertNotNull(scope0);
      assertEquals(false, compiler0.hasErrors());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(0, scope0.getVarCount());
      assertEquals(false, scope0.isLocal());
      assertEquals(true, scope0.isGlobal());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(0, node0.getCharno());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(132, node0.getType());
      assertEquals(1, node0.getLineno());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isVarArgs());
      assertEquals(1, node0.getChildCount());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(true, node0.hasOneChild());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(true, node0.hasChildren());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(true, node0.isSyntheticBlock());
      assertEquals(false, node0.isOptionalArg());
      
      FunctionTypeBuilder functionTypeBuilder0 = new FunctionTypeBuilder(string0, compiler0, node0, string0, scope0);
      assertNotNull(functionTypeBuilder0);
      assertEquals(false, compiler0.hasErrors());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(0, scope0.getVarCount());
      assertEquals(false, scope0.isLocal());
      assertEquals(true, scope0.isGlobal());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(0, node0.getCharno());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(132, node0.getType());
      assertEquals(1, node0.getLineno());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isVarArgs());
      assertEquals(1, node0.getChildCount());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(true, node0.hasOneChild());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(true, node0.hasChildren());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(true, node0.isSyntheticBlock());
      assertEquals(false, node0.isOptionalArg());
      
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      assertEquals("[]", linkedList0.toString());
      
      FunctionType functionType0 = jSTypeRegistry0.createFunctionType((JSType) objectType0, (List<JSType>) linkedList0);
      assertNotNull(functionType0);
      assertEquals(0, linkedList0.size());
      assertEquals("[]", linkedList0.toString());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, functionType0.isNumberValueType());
      assertEquals(false, functionType0.isNullType());
      assertNull(functionType0.getTemplateTypeName());
      assertEquals(false, functionType0.isVoidType());
      assertEquals(false, functionType0.isEnumElementType());
      assertEquals(false, functionType0.isFunctionPrototypeType());
      assertEquals(false, functionType0.isEmptyType());
      assertEquals(false, functionType0.isCheckedUnknownType());
      assertEquals(false, functionType0.isBooleanValueType());
      assertEquals(false, functionType0.isNoType());
      assertEquals(false, functionType0.isRecordType());
      assertEquals(false, functionType0.isInterface());
      assertEquals(false, functionType0.isEnumType());
      assertEquals(false, functionType0.isNoObjectType());
      assertEquals(false, functionType0.isReturnTypeInferred());
      assertEquals(true, functionType0.isFunctionType());
      assertEquals(false, functionType0.hasInstanceType());
      assertEquals(true, functionType0.canBeCalled());
      assertEquals(false, functionType0.isNominalType());
      assertEquals(false, functionType0.isResolved());
      assertEquals(false, functionType0.isStringValueType());
      assertEquals(false, functionType0.isAllType());
      assertEquals(false, functionType0.isUnionType());
      assertEquals(true, functionType0.isOrdinaryFunction());
      assertEquals(false, functionType0.isTemplateType());
      assertEquals(0, functionType0.getMaxArguments());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, functionType0.isConstructor());
      assertEquals(false, functionType0.hasCachedValues());
      
      Node node1 = null;
      FunctionTypeBuilder functionTypeBuilder1 = functionTypeBuilder0.inferFromOverriddenFunction(functionType0, node1);
      assertNotNull(functionTypeBuilder1);
      assertEquals(false, compiler0.hasErrors());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(0, linkedList0.size());
      assertEquals("[]", linkedList0.toString());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, functionType0.isNumberValueType());
      assertEquals(false, functionType0.isNullType());
      assertNull(functionType0.getTemplateTypeName());
      assertEquals(false, functionType0.isVoidType());
      assertEquals(false, functionType0.isEnumElementType());
      assertEquals(false, functionType0.isFunctionPrototypeType());
      assertEquals(false, functionType0.isEmptyType());
      assertEquals(false, functionType0.isCheckedUnknownType());
      assertEquals(false, functionType0.isBooleanValueType());
      assertEquals(false, functionType0.isNoType());
      assertEquals(false, functionType0.isRecordType());
      assertEquals(false, functionType0.isInterface());
      assertEquals(false, functionType0.isEnumType());
      assertEquals(false, functionType0.isNoObjectType());
      assertEquals(false, functionType0.isReturnTypeInferred());
      assertEquals(true, functionType0.isFunctionType());
      assertEquals(false, functionType0.hasInstanceType());
      assertEquals(true, functionType0.canBeCalled());
      assertEquals(false, functionType0.isNominalType());
      assertEquals(false, functionType0.isResolved());
      assertEquals(false, functionType0.isStringValueType());
      assertEquals(false, functionType0.isAllType());
      assertEquals(false, functionType0.isUnionType());
      assertEquals(true, functionType0.isOrdinaryFunction());
      assertEquals(false, functionType0.isTemplateType());
      assertEquals(0, functionType0.getMaxArguments());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, functionType0.isConstructor());
      assertEquals(false, functionType0.hasCachedValues());
      assertEquals(0, scope0.getVarCount());
      assertEquals(false, scope0.isLocal());
      assertEquals(true, scope0.isGlobal());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(0, node0.getCharno());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(132, node0.getType());
      assertEquals(1, node0.getLineno());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isVarArgs());
      assertEquals(1, node0.getChildCount());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(true, node0.hasOneChild());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(true, node0.hasChildren());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(true, node0.isSyntheticBlock());
      assertEquals(false, node0.isOptionalArg());
      assertSame(functionTypeBuilder0, functionTypeBuilder1);
      assertSame(functionTypeBuilder1, functionTypeBuilder0);
  }

  @Test
  public void test20()  throws Throwable  {
      String string0 = "msg.prop.not.found";
      Compiler compiler0 = new Compiler();
      assertNotNull(compiler0);
      
      Node node0 = compiler0.parseSyntheticCode(string0, string0);
      assertNotNull(node0);
      assertEquals(false, compiler0.hasErrors());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(true, node0.isSyntheticBlock());
      assertEquals(true, node0.hasChildren());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(132, node0.getType());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(1, node0.getLineno());
      assertEquals(true, node0.hasOneChild());
      assertEquals(1, node0.getChildCount());
      assertEquals(0, node0.getCharno());
      
      ObjectType objectType0 = null;
      Scope scope0 = new Scope(node0, objectType0);
      assertNotNull(scope0);
      assertEquals(false, compiler0.hasErrors());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(true, node0.isSyntheticBlock());
      assertEquals(true, node0.hasChildren());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(132, node0.getType());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(1, node0.getLineno());
      assertEquals(true, node0.hasOneChild());
      assertEquals(1, node0.getChildCount());
      assertEquals(0, node0.getCharno());
      assertEquals(false, scope0.isLocal());
      assertEquals(0, scope0.getVarCount());
      assertEquals(true, scope0.isGlobal());
      
      FunctionTypeBuilder functionTypeBuilder0 = new FunctionTypeBuilder(string0, compiler0, node0, string0, scope0);
      assertNotNull(functionTypeBuilder0);
      assertEquals(false, compiler0.hasErrors());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(true, node0.isSyntheticBlock());
      assertEquals(true, node0.hasChildren());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(132, node0.getType());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(1, node0.getLineno());
      assertEquals(true, node0.hasOneChild());
      assertEquals(1, node0.getChildCount());
      assertEquals(0, node0.getCharno());
      assertEquals(false, scope0.isLocal());
      assertEquals(0, scope0.getVarCount());
      assertEquals(true, scope0.isGlobal());
      
      FunctionType functionType0 = null;
      FunctionTypeBuilder functionTypeBuilder1 = functionTypeBuilder0.inferFromOverriddenFunction(functionType0, node0);
      assertNotNull(functionTypeBuilder1);
      assertEquals(false, compiler0.hasErrors());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(true, node0.isSyntheticBlock());
      assertEquals(true, node0.hasChildren());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(132, node0.getType());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(1, node0.getLineno());
      assertEquals(true, node0.hasOneChild());
      assertEquals(1, node0.getChildCount());
      assertEquals(0, node0.getCharno());
      assertEquals(false, scope0.isLocal());
      assertEquals(0, scope0.getVarCount());
      assertEquals(true, scope0.isGlobal());
      assertSame(functionTypeBuilder1, functionTypeBuilder0);
      assertSame(functionTypeBuilder0, functionTypeBuilder1);
  }

  @Test
  public void test21()  throws Throwable  {
      String string0 = "a";
      Compiler compiler0 = new Compiler();
      assertNotNull(compiler0);
      
      Node node0 = compiler0.parseSyntheticCode(string0, string0);
      assertNotNull(node0);
      assertEquals(1, node0.getLineno());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(132, node0.getType());
      assertEquals(true, node0.hasOneChild());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(true, node0.hasChildren());
      assertEquals(1, node0.getChildCount());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(0, node0.getCharno());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(true, node0.isSyntheticBlock());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(false, compiler0.hasErrors());
      
      ObjectType objectType0 = null;
      Scope scope0 = new Scope(node0, objectType0);
      assertNotNull(scope0);
      assertEquals(true, scope0.isGlobal());
      assertEquals(false, scope0.isLocal());
      assertEquals(0, scope0.getVarCount());
      assertEquals(1, node0.getLineno());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(132, node0.getType());
      assertEquals(true, node0.hasOneChild());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(true, node0.hasChildren());
      assertEquals(1, node0.getChildCount());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(0, node0.getCharno());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(true, node0.isSyntheticBlock());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(false, compiler0.hasErrors());
      
      FunctionTypeBuilder functionTypeBuilder0 = new FunctionTypeBuilder(string0, compiler0, node0, string0, scope0);
      assertNotNull(functionTypeBuilder0);
      assertEquals(true, scope0.isGlobal());
      assertEquals(false, scope0.isLocal());
      assertEquals(0, scope0.getVarCount());
      assertEquals(1, node0.getLineno());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(132, node0.getType());
      assertEquals(true, node0.hasOneChild());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(true, node0.hasChildren());
      assertEquals(1, node0.getChildCount());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(0, node0.getCharno());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(true, node0.isSyntheticBlock());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(false, compiler0.hasErrors());
      
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      assertNotNull(linkedList0);
      assertEquals("[]", linkedList0.toString());
      assertEquals(0, linkedList0.size());
      
      FunctionType functionType0 = jSTypeRegistry0.createFunctionType((JSType) objectType0, (List<JSType>) linkedList0);
      assertNotNull(functionType0);
      assertEquals("[]", linkedList0.toString());
      assertEquals(0, linkedList0.size());
      assertEquals(false, functionType0.isVoidType());
      assertEquals(false, functionType0.isConstructor());
      assertEquals(false, functionType0.isNoObjectType());
      assertEquals(false, functionType0.isFunctionPrototypeType());
      assertEquals(false, functionType0.isNullType());
      assertEquals(false, functionType0.isTemplateType());
      assertEquals(false, functionType0.isEnumElementType());
      assertEquals(true, functionType0.isFunctionType());
      assertEquals(false, functionType0.isEmptyType());
      assertEquals(false, functionType0.isUnionType());
      assertEquals(false, functionType0.isInterface());
      assertEquals(false, functionType0.hasCachedValues());
      assertEquals(false, functionType0.isNoType());
      assertEquals(false, functionType0.isStringValueType());
      assertEquals(false, functionType0.isCheckedUnknownType());
      assertEquals(true, functionType0.isOrdinaryFunction());
      assertEquals(false, functionType0.hasInstanceType());
      assertEquals(false, functionType0.isBooleanValueType());
      assertEquals(false, functionType0.isRecordType());
      assertEquals(true, functionType0.canBeCalled());
      assertEquals(false, functionType0.isNominalType());
      assertEquals(0, functionType0.getMaxArguments());
      assertEquals(false, functionType0.isReturnTypeInferred());
      assertEquals(false, functionType0.isAllType());
      assertEquals(false, functionType0.isNumberValueType());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertNull(functionType0.getTemplateTypeName());
      assertEquals(false, functionType0.isEnumType());
      assertEquals(false, functionType0.isResolved());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      // Undeclared exception!
      try {
        FunctionTypeBuilder functionTypeBuilder1 = functionTypeBuilder0.inferFromOverriddenFunction(functionType0, node0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // EXPR_RESULT 1 [sourcename: a] is not a string node
         //
      }
  }

  @Test
  public void test22()  throws Throwable  {
      String string0 = "bs +wSvZ+C";
      byte[] byteArray0 = new byte[4];
      String string1 = null;
      AbstractCompiler abstractCompiler0 = null;
      Node node0 = Node.newString((int) byteArray0[0], string0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(node0);
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(0, node0.getType());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.hasChildren());
      assertEquals(-1, node0.getLineno());
      
      Scope scope0 = null;
      FunctionTypeBuilder functionTypeBuilder0 = null;
      try {
        functionTypeBuilder0 = new FunctionTypeBuilder(string1, abstractCompiler0, node0, string0, scope0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test23()  throws Throwable  {
      String string0 = "";
      Compiler compiler0 = new Compiler();
      assertNotNull(compiler0);
      
      Node node0 = compiler0.parseSyntheticCode(string0, string0);
      assertNotNull(node0);
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(true, node0.isSyntheticBlock());
      assertEquals(1, node0.getLineno());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(0, node0.getCharno());
      assertEquals(132, node0.getType());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.hasOneChild());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(0, compiler0.getWarningCount());
      
      ObjectType objectType0 = null;
      Scope scope0 = new Scope(node0, objectType0);
      assertNotNull(scope0);
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(true, node0.isSyntheticBlock());
      assertEquals(1, node0.getLineno());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(0, node0.getCharno());
      assertEquals(132, node0.getType());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.hasOneChild());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(0, scope0.getVarCount());
      assertEquals(false, scope0.isLocal());
      assertEquals(true, scope0.isGlobal());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(0, compiler0.getWarningCount());
      
      FunctionTypeBuilder functionTypeBuilder0 = new FunctionTypeBuilder(string0, compiler0, node0, string0, scope0);
      assertNotNull(functionTypeBuilder0);
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(true, node0.isSyntheticBlock());
      assertEquals(1, node0.getLineno());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(0, node0.getCharno());
      assertEquals(132, node0.getType());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.hasOneChild());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(0, scope0.getVarCount());
      assertEquals(false, scope0.isLocal());
      assertEquals(true, scope0.isGlobal());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(0, compiler0.getWarningCount());
      
      FunctionTypeBuilder functionTypeBuilder1 = functionTypeBuilder0.setSourceNode(node0);
      assertNotNull(functionTypeBuilder1);
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(true, node0.isSyntheticBlock());
      assertEquals(1, node0.getLineno());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(0, node0.getCharno());
      assertEquals(132, node0.getType());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.hasOneChild());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(0, scope0.getVarCount());
      assertEquals(false, scope0.isLocal());
      assertEquals(true, scope0.isGlobal());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(0, compiler0.getWarningCount());
      assertSame(functionTypeBuilder0, functionTypeBuilder1);
      assertSame(functionTypeBuilder1, functionTypeBuilder0);
  }
}
