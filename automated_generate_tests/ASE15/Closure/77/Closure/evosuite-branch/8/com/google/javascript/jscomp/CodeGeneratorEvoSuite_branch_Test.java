/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 22:59:56 GMT 2014
 */

package com.google.javascript.jscomp;

import static org.junit.Assert.*;
import org.junit.Test;
import com.google.javascript.jscomp.CodeGenerator;
import java.nio.charset.Charset;
import java.nio.charset.CharsetEncoder;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;

import org.junit.runner.RunWith;


public class CodeGeneratorEvoSuite_branch_Test  {

  @Test
  public void test0()  throws Throwable  {
      String string0 = "for(";
      String string1 = CodeGenerator.escapeToDoubleQuotedJsString(string0);
      assertNotNull(string1);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertEquals("\"for(\"", string1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      
      String string2 = CodeGenerator.identifierEscape(string1);
      assertNotNull(string2);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertSame(string1, string2);
      assertNotSame(string2, string0);
      assertSame(string2, string1);
      assertEquals("\"for(\"", string2);
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string2.equals((Object)string0));
  }

  @Test
  public void test1()  throws Throwable  {
      String string0 = "n>*3d![</script!}<!->@i";
      String string1 = CodeGenerator.escapeToDoubleQuotedJsString(string0);
      assertNotNull(string1);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertEquals("\"n>*3d![<\\/script!}<!->@i\"", string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
  }

  @Test
  public void test2()  throws Throwable  {
      String string0 = "e\\ERA% STATb<!--\"\\t\\n\\u000b\\u000c\\r \\u0085\\u1680\\u2028\\u2029\\u205f\\u3000\"t\"\\t\\n\\u000b\\001c\\r 9u0085\\u1680\\u2028\\u2029u205f\\u3000\"n\"\\t\\n\\u000b\\u000c\\r \\u085\\u180\\u2028\\u2029\\u205f\\u3000\"u000b\"\\t\\n\\u000b\\u010c\\r \\u0085\\u1680\\u2028\\u029\\u205f\\u3000\"u003\"\\t\\n\\u010b\\u000c\\r \\P0085\\u1680\\u2028\\u2029\\u205f\\u3000\"r \"\\t\\n\\*00bu000c\\r \\u0085\\u1680\\u2028\\u2029\\u205f\\u3000\"u0085\"\\t\\n\\u000b\\u00nc\\r \\u0085\\u1680\\u2028\\u2029\\u205f\\u3000\"u1680\"\\t\\n\\u000b\\u000c\\r2\\u0085\\u1680\\u2028\\u2029\\u205f\\u3000\"u20l8\"\\t\\n\\u000b\\u000c\\r \\u0085\\u1680\\u2028\\u2029\\u205f\\u3000\"u2029\"\\t\\n\\um00b\\u000c\\r \\u008^\\u1680\\u2028\\u2029\\u205f\\u3000\"205f\"\\t\\n\\u000b\\u000c\\r \\u008i\\u1680\\u2028\\u2029\\u205f\\u3000\"u3000\\ERA% STATb<-->e";
      String string1 = CodeGenerator.regexpEscape(string0);
      assertNotNull(string1);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertEquals("/e\\ERA% STATb<\\!--\"\\t\\n\\u000b\\u000c\\r \\u0085\\u1680\\u2028\\u2029\\u205f\\u3000\"t\"\\t\\n\\u000b\\001c\\r 9u0085\\u1680\\u2028\\u2029u205f\\u3000\"n\"\\t\\n\\u000b\\u000c\\r \\u085\\u180\\u2028\\u2029\\u205f\\u3000\"u000b\"\\t\\n\\u000b\\u010c\\r \\u0085\\u1680\\u2028\\u029\\u205f\\u3000\"u003\"\\t\\n\\u010b\\u000c\\r \\P0085\\u1680\\u2028\\u2029\\u205f\\u3000\"r \"\\t\\n\\*00bu000c\\r \\u0085\\u1680\\u2028\\u2029\\u205f\\u3000\"u0085\"\\t\\n\\u000b\\u00nc\\r \\u0085\\u1680\\u2028\\u2029\\u205f\\u3000\"u1680\"\\t\\n\\u000b\\u000c\\r2\\u0085\\u1680\\u2028\\u2029\\u205f\\u3000\"u20l8\"\\t\\n\\u000b\\u000c\\r \\u0085\\u1680\\u2028\\u2029\\u205f\\u3000\"u2029\"\\t\\n\\um00b\\u000c\\r \\u008^\\u1680\\u2028\\u2029\\u205f\\u3000\"205f\"\\t\\n\\u000b\\u000c\\r \\u008i\\u1680\\u2028\\u2029\\u205f\\u3000\"u3000\\ERA% STATb<--\\>e/", string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
  }

  @Test
  public void test3()  throws Throwable  {
      String string0 = "\t\n\u000B\f\r :z\u1680\u2028\u2029\u205F\u3000";
      String string1 = CodeGenerator.escapeToDoubleQuotedJsString(string0);
      assertNotNull(string1);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertEquals("\"\\t\\n\\u000b\\u000c\\r :z\\u1680\\u2028\\u2029\\u205f\\u3000\"", string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
  }

  @Test
  public void test4()  throws Throwable  {
      String string0 = "for(";
      String string1 = CodeGenerator.escapeToDoubleQuotedJsString(string0);
      assertNotNull(string1);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertEquals("\"for(\"", string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      
      Charset charset0 = Charset.defaultCharset();
      assertNotNull(charset0);
      assertEquals("UTF-8", charset0.toString());
      assertEquals("UTF-8", charset0.displayName());
      assertEquals("UTF-8", charset0.name());
      assertEquals(true, charset0.isRegistered());
      assertEquals(true, charset0.canEncode());
      
      CharsetEncoder charsetEncoder0 = charset0.newEncoder();
      assertNotNull(charsetEncoder0);
      assertEquals("UTF-8", charset0.toString());
      assertEquals("UTF-8", charset0.displayName());
      assertEquals("UTF-8", charset0.name());
      assertEquals(true, charset0.isRegistered());
      assertEquals(true, charset0.canEncode());
      assertEquals(3.0F, charsetEncoder0.maxBytesPerChar(), 0.01F);
      assertEquals(1.1F, charsetEncoder0.averageBytesPerChar(), 0.01F);
      
      String string2 = CodeGenerator.jsString(string1, charsetEncoder0);
      assertNotNull(string2);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertNotSame(string1, string2);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertEquals("'\"for(\"'", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertEquals("UTF-8", charset0.toString());
      assertEquals("UTF-8", charset0.displayName());
      assertEquals("UTF-8", charset0.name());
      assertEquals(true, charset0.isRegistered());
      assertEquals(true, charset0.canEncode());
      assertEquals(3.0F, charsetEncoder0.maxBytesPerChar(), 0.01F);
      assertEquals(1.1F, charsetEncoder0.averageBytesPerChar(), 0.01F);
      
      String string3 = CodeGenerator.jsString(string2, charsetEncoder0);
      assertNotNull(string3);
      assertNotSame(string2, string1);
      assertNotSame(string2, string3);
      assertNotSame(string2, string0);
      assertNotSame(string3, string2);
      assertNotSame(string3, string1);
      assertNotSame(string3, string0);
      assertNotSame(string1, string2);
      assertNotSame(string1, string0);
      assertNotSame(string1, string3);
      assertNotSame(string0, string1);
      assertNotSame(string0, string3);
      assertNotSame(string0, string2);
      assertEquals("\"'\\\"for(\\\"'\"", string3);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string3));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string2));
      assertEquals("UTF-8", charset0.toString());
      assertEquals("UTF-8", charset0.displayName());
      assertEquals("UTF-8", charset0.name());
      assertEquals(true, charset0.isRegistered());
      assertEquals(true, charset0.canEncode());
      assertEquals(3.0F, charsetEncoder0.maxBytesPerChar(), 0.01F);
      assertEquals(1.1F, charsetEncoder0.averageBytesPerChar(), 0.01F);
  }

  @Test
  public void test5()  throws Throwable  {
      String string0 = "$:m$gRh]]]>";
      String string1 = CodeGenerator.escapeToDoubleQuotedJsString(string0);
      assertNotNull(string1);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertEquals("\"$:m$gRh]]]\\>\"", string1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
  }

  @Test
  public void test6()  throws Throwable  {
      String string0 = "6IS mgK(]>.G6J";
      String string1 = CodeGenerator.regexpEscape(string0);
      assertNotNull(string1);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertEquals("/6IS mgK(]>.G6J/", string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
  }

  @Test
  public void test7()  throws Throwable  {
      String string0 = "&\n\u000B\f\r rk2\u205F\u3000";
      String string1 = CodeGenerator.identifierEscape(string0);
      assertNotNull(string1);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertEquals("&\\u000a\\u000b\\u000c\\u000d rk2\\u205f\\u3000", string1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
  }
}
