/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 22:17:32 GMT 2014
 */

package com.google.javascript.jscomp;

import static org.junit.Assert.*; import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.junit.Test;
import com.google.javascript.jscomp.CodeGenerator;
import com.google.javascript.jscomp.SourceFile;
import java.nio.charset.Charset;
import java.nio.charset.CharsetEncoder;



import org.evosuite.runtime.mock.java.io.MockFile;
import org.junit.runner.RunWith;


public class CodeGeneratorEvoSuite_branch_Test  {

  @Test
  public void test00()  throws Throwable  {
      String string0 = "R.aq1";
      String string1 = CodeGenerator.identifierEscape(string0);
      assertSame(string0, string1);
      assertSame(string1, string0);
      assertEquals("R.aq1", string1);
      assertNotNull(string1);
  }

  @Test
  public void test01()  throws Throwable  {
      String string0 = "0QMjc:C0<!--?7.";
      String string1 = "!--> kq";
      assertNotSame(string1, string0);
      
      char char0 = '4';
      Charset charset0 = Charset.defaultCharset();
      assertEquals("UTF-8", charset0.displayName());
      assertEquals("UTF-8", charset0.name());
      assertEquals(true, charset0.canEncode());
      assertEquals(true, charset0.isRegistered());
      assertEquals("UTF-8", charset0.toString());
      assertNotNull(charset0);
      
      CharsetEncoder charsetEncoder0 = charset0.newEncoder();
      assertEquals("UTF-8", charset0.displayName());
      assertEquals("UTF-8", charset0.name());
      assertEquals(true, charset0.canEncode());
      assertEquals(true, charset0.isRegistered());
      assertEquals("UTF-8", charset0.toString());
      assertEquals(3.0F, charsetEncoder0.maxBytesPerChar(), 0.01F);
      assertEquals(1.1F, charsetEncoder0.averageBytesPerChar(), 0.01F);
      assertNotNull(charsetEncoder0);
      
      String string2 = CodeGenerator.strEscape(string1, char0, string1, string1, string0, charsetEncoder0);
      assertEquals("UTF-8", charset0.displayName());
      assertEquals("UTF-8", charset0.name());
      assertEquals(true, charset0.canEncode());
      assertEquals(true, charset0.isRegistered());
      assertEquals("UTF-8", charset0.toString());
      assertEquals(3.0F, charsetEncoder0.maxBytesPerChar(), 0.01F);
      assertEquals(1.1F, charsetEncoder0.averageBytesPerChar(), 0.01F);
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertNotSame(string1, string2);
      assertNotSame(string1, string0);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertEquals("4!--\\> kq4", string2);
      assertNotNull(string2);
  }

  @Test
  public void test02()  throws Throwable  {
      String string0 = ">`H0$#8J/OH?";
      String string1 = CodeGenerator.regexpEscape(string0);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertEquals("/>`H0$#8J/OH?/", string1);
      assertNotNull(string1);
  }

  @Test
  public void test03()  throws Throwable  {
      String string0 = "\t\nT\f\r\u0085g'\u2029\u3000#,V\u00A0m\u202F";
      String string1 = CodeGenerator.regexpEscape(string0);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertEquals("/\\t\\nT\\u000c\\r\\u0085g'\\u2029\\u3000#,V\\u00a0m\\u202f/", string1);
      assertNotNull(string1);
  }

  @Test
  public void test04()  throws Throwable  {
      String string0 = "\n google/protobuf/descriptor.proto\u0012\u000Fgoogle.protobuf\"G\n\u0011FileDescrQptorSet\u00122\n\u0004file\u0018\u0001 \u0003(\u000B2$.google.protobuf.&WleDescriptorProto\"\u00DC\u0002\n\u0013File1escriptorProto\u0012\f\n\u0004name\u0018\u0001 \u0001(\t\u0012\u000F\n\u0007package\u0018\u0002 \u0001(\t\u0012\u0012\n\ndependency\u0018\u0003 \u0003(\t\u00126\n\fmessage_type\u0018\u0004 \u0003(\u000B2 .google.protobuf.DescriptorProto\u00127\n\tenum_type\u0018\u0005 \u0003(v$.google.protobuf.EnumDescriptorProto\u00128\n\u0007service\u0018\u0006 \u0003(\u000B2'.googte.protobuf.ServiceDesciptorProto\u00128\n\textenpion\u0018\u0007 \u0003(\u000B2%.google.p";
      String string1 = CodeGenerator.regexpEscape(string0);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertEquals("/\\n google/protobuf/descriptor.proto\\u0012\\u000fgoogle.protobuf\"G\\n\\u0011FileDescrQptorSet\\u00122\\n\\u0004file\\u0018\\u0001 \\u0003(\\u000b2$.google.protobuf.&WleDescriptorProto\"\\u00dc\\u0002\\n\\u0013File1escriptorProto\\u0012\\u000c\\n\\u0004name\\u0018\\u0001 \\u0001(\\t\\u0012\\u000f\\n\\u0007package\\u0018\\u0002 \\u0001(\\t\\u0012\\u0012\\n\\ndependency\\u0018\\u0003 \\u0003(\\t\\u00126\\n\\u000cmessage_type\\u0018\\u0004 \\u0003(\\u000b2 .google.protobuf.DescriptorProto\\u00127\\n\\tenum_type\\u0018\\u0005 \\u0003(v$.google.protobuf.EnumDescriptorProto\\u00128\\n\\u0007service\\u0018\\u0006 \\u0003(\\u000b2'.googte.protobuf.ServiceDesciptorProto\\u00128\\n\\textenpion\\u0018\\u0007 \\u0003(\\u000b2%.google.p/", string1);
      assertNotNull(string1);
  }

  @Test
  public void test05()  throws Throwable  {
      String string0 = "2^U1->,blxgU'x..u";
      MockFile mockFile0 = new MockFile(string0, string0);
      assertNotNull(mockFile0);
      
      SourceFile.OnDisk sourceFile_OnDisk0 = new SourceFile.OnDisk(mockFile0);
      assertEquals("2^U1->,blxgU'x..u/2^U1->,blxgU'x..u", sourceFile_OnDisk0.toString());
      assertEquals("2^U1->,blxgU'x..u/2^U1->,blxgU'x..u", sourceFile_OnDisk0.getOriginalPath());
      assertEquals("2^U1->,blxgU'x..u/2^U1->,blxgU'x..u", sourceFile_OnDisk0.getName());
      assertNotNull(sourceFile_OnDisk0);
      
      Charset charset0 = sourceFile_OnDisk0.getCharset();
      assertEquals(true, charset0.canEncode());
      assertEquals("UTF-8", charset0.displayName());
      assertEquals("UTF-8", charset0.toString());
      assertEquals("UTF-8", charset0.name());
      assertEquals(true, charset0.isRegistered());
      assertEquals("2^U1->,blxgU'x..u/2^U1->,blxgU'x..u", sourceFile_OnDisk0.toString());
      assertEquals("2^U1->,blxgU'x..u/2^U1->,blxgU'x..u", sourceFile_OnDisk0.getOriginalPath());
      assertEquals("2^U1->,blxgU'x..u/2^U1->,blxgU'x..u", sourceFile_OnDisk0.getName());
      assertNotNull(charset0);
      
      CharsetEncoder charsetEncoder0 = charset0.newEncoder();
      assertEquals(1.1F, charsetEncoder0.averageBytesPerChar(), 0.01F);
      assertEquals(3.0F, charsetEncoder0.maxBytesPerChar(), 0.01F);
      assertEquals(true, charset0.canEncode());
      assertEquals("UTF-8", charset0.displayName());
      assertEquals("UTF-8", charset0.toString());
      assertEquals("UTF-8", charset0.name());
      assertEquals(true, charset0.isRegistered());
      assertEquals("2^U1->,blxgU'x..u/2^U1->,blxgU'x..u", sourceFile_OnDisk0.toString());
      assertEquals("2^U1->,blxgU'x..u/2^U1->,blxgU'x..u", sourceFile_OnDisk0.getOriginalPath());
      assertEquals("2^U1->,blxgU'x..u/2^U1->,blxgU'x..u", sourceFile_OnDisk0.getName());
      assertNotNull(charsetEncoder0);
      
      String string1 = CodeGenerator.jsString(string0, charsetEncoder0);
      assertEquals(1.1F, charsetEncoder0.averageBytesPerChar(), 0.01F);
      assertEquals(3.0F, charsetEncoder0.maxBytesPerChar(), 0.01F);
      assertEquals(true, charset0.canEncode());
      assertEquals("UTF-8", charset0.displayName());
      assertEquals("UTF-8", charset0.toString());
      assertEquals("UTF-8", charset0.name());
      assertEquals(true, charset0.isRegistered());
      assertEquals("2^U1->,blxgU'x..u/2^U1->,blxgU'x..u", sourceFile_OnDisk0.toString());
      assertEquals("2^U1->,blxgU'x..u/2^U1->,blxgU'x..u", sourceFile_OnDisk0.getOriginalPath());
      assertEquals("2^U1->,blxgU'x..u/2^U1->,blxgU'x..u", sourceFile_OnDisk0.getName());
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertEquals("\"2^U1->,blxgU'x..u\"", string1);
      assertNotNull(string1);
  }

  @Test
  public void test06()  throws Throwable  {
      String string0 = "B x:l}Ch[]>,F?\"YU1";
      Charset charset0 = Charset.defaultCharset();
      assertEquals("UTF-8", charset0.toString());
      assertEquals("UTF-8", charset0.displayName());
      assertEquals("UTF-8", charset0.name());
      assertEquals(true, charset0.isRegistered());
      assertEquals(true, charset0.canEncode());
      assertNotNull(charset0);
      
      CharsetEncoder charsetEncoder0 = charset0.newEncoder();
      assertEquals("UTF-8", charset0.toString());
      assertEquals("UTF-8", charset0.displayName());
      assertEquals("UTF-8", charset0.name());
      assertEquals(true, charset0.isRegistered());
      assertEquals(true, charset0.canEncode());
      assertEquals(1.1F, charsetEncoder0.averageBytesPerChar(), 0.01F);
      assertEquals(3.0F, charsetEncoder0.maxBytesPerChar(), 0.01F);
      assertNotNull(charsetEncoder0);
      
      String string1 = CodeGenerator.jsString(string0, charsetEncoder0);
      assertEquals("UTF-8", charset0.toString());
      assertEquals("UTF-8", charset0.displayName());
      assertEquals("UTF-8", charset0.name());
      assertEquals(true, charset0.isRegistered());
      assertEquals(true, charset0.canEncode());
      assertEquals(1.1F, charsetEncoder0.averageBytesPerChar(), 0.01F);
      assertEquals(3.0F, charsetEncoder0.maxBytesPerChar(), 0.01F);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertEquals("'B x:l}Ch[]>,F?\"YU1'", string1);
      assertNotNull(string1);
  }

  @Test
  public void test07()  throws Throwable  {
      String string0 = "0QMjc:C0<!--?7.";
      Charset charset0 = Charset.defaultCharset();
      assertEquals("UTF-8", charset0.displayName());
      assertEquals("UTF-8", charset0.name());
      assertEquals(true, charset0.isRegistered());
      assertEquals(true, charset0.canEncode());
      assertEquals("UTF-8", charset0.toString());
      assertNotNull(charset0);
      
      CharsetEncoder charsetEncoder0 = charset0.newEncoder();
      assertEquals(1.1F, charsetEncoder0.averageBytesPerChar(), 0.01F);
      assertEquals(3.0F, charsetEncoder0.maxBytesPerChar(), 0.01F);
      assertEquals("UTF-8", charset0.displayName());
      assertEquals("UTF-8", charset0.name());
      assertEquals(true, charset0.isRegistered());
      assertEquals(true, charset0.canEncode());
      assertEquals("UTF-8", charset0.toString());
      assertNotNull(charsetEncoder0);
      
      String string1 = CodeGenerator.jsString(string0, charsetEncoder0);
      assertEquals(1.1F, charsetEncoder0.averageBytesPerChar(), 0.01F);
      assertEquals(3.0F, charsetEncoder0.maxBytesPerChar(), 0.01F);
      assertEquals("UTF-8", charset0.displayName());
      assertEquals("UTF-8", charset0.name());
      assertEquals(true, charset0.isRegistered());
      assertEquals(true, charset0.canEncode());
      assertEquals("UTF-8", charset0.toString());
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertEquals("\"0QMjc:C0<\\!--?7.\"", string1);
      assertNotNull(string1);
  }

  @Test
  public void test08()  throws Throwable  {
      String string0 = "0QMjc:C0<!--?7.";
      char char0 = '4';
      Charset charset0 = Charset.defaultCharset();
      assertEquals("UTF-8", charset0.displayName());
      assertEquals(true, charset0.isRegistered());
      assertEquals("UTF-8", charset0.toString());
      assertEquals(true, charset0.canEncode());
      assertEquals("UTF-8", charset0.name());
      assertNotNull(charset0);
      
      CharsetEncoder charsetEncoder0 = charset0.newEncoder();
      assertEquals(1.1F, charsetEncoder0.averageBytesPerChar(), 0.01F);
      assertEquals(3.0F, charsetEncoder0.maxBytesPerChar(), 0.01F);
      assertEquals("UTF-8", charset0.displayName());
      assertEquals(true, charset0.isRegistered());
      assertEquals("UTF-8", charset0.toString());
      assertEquals(true, charset0.canEncode());
      assertEquals("UTF-8", charset0.name());
      assertNotNull(charsetEncoder0);
      
      String string1 = CodeGenerator.strEscape(string0, char0, string0, string0, string0, charsetEncoder0);
      assertEquals(1.1F, charsetEncoder0.averageBytesPerChar(), 0.01F);
      assertEquals(3.0F, charsetEncoder0.maxBytesPerChar(), 0.01F);
      assertEquals("UTF-8", charset0.displayName());
      assertEquals(true, charset0.isRegistered());
      assertEquals("UTF-8", charset0.toString());
      assertEquals(true, charset0.canEncode());
      assertEquals("UTF-8", charset0.name());
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertEquals("40QMjc:C0<\\!--?7.4", string1);
      assertNotNull(string1);
      
      String string2 = CodeGenerator.escapeToDoubleQuotedJsString(string1);
      assertEquals(1.1F, charsetEncoder0.averageBytesPerChar(), 0.01F);
      assertEquals(3.0F, charsetEncoder0.maxBytesPerChar(), 0.01F);
      assertEquals("UTF-8", charset0.displayName());
      assertEquals(true, charset0.isRegistered());
      assertEquals("UTF-8", charset0.toString());
      assertEquals(true, charset0.canEncode());
      assertEquals("UTF-8", charset0.name());
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotSame(string1, string2);
      assertNotSame(string1, string0);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertEquals("\"40QMjc:C0<\\\\!--?7.4\"", string2);
      assertNotNull(string2);
  }

  @Test
  public void test09()  throws Throwable  {
      String string0 = "/!/R\"^</script@/";
      String string1 = CodeGenerator.regexpEscape(string0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertEquals("//!/R\"^<\\/script@//", string1);
      assertNotNull(string1);
  }

  @Test
  public void test10()  throws Throwable  {
      String string0 = "E_DOUBLE\u0010\u0001\u0012\u000E\n\nTYPE_FLOAT\u0010\u0002\u0012\u000E\n\nTYPE_INT64\u0010\u0003\u0012\u000F\n\u000BTYPE_UINT64\u0010\u0004\u0012\u000E\n\nTYP_INT32\u0010\u0005\u0012\u0010\n{TYPE_FIXED64\u0010\u0006\u0012\u0010\n\fTYPE_FIXED32\u0010\u0007\u0012\r\n\tTYPE_BOOL\u0010\b\u0012\u000F\n\u000BTYPE_STRING\u0010\t\u0012\u000E\n\nTYPE_GROUP\u0010\n\u0012\u0010\n\fTYPE_MESSGE\u0010\u000B\u0012\u000E\n\nTYPE_BYTES\u0010\f\u0012\u000F\n\u000BTYPE_UINT32\u0010\r\u0012\r\n\tTYPE_ENUM\u0010\u000E\u0012\u0011\n\rTYPE_SFIXED32\u0010\u000F\u0012\u0011\n\rTYPE_SFIXED64\u0010\u0010\u0012\u000F\n\u000BTYPE_SINT32\u0010\u0011\u0012\u000F\n\u000BTYPE_SINT64\u0010\u0012\"C\n\u0005Label\u0012\u0012\n\u000ELABEL_OPTIONAL\u0010\u0001\u0012\u0012\n\u000ELABEL_REQUIRED\u0010\u0002\u0012\u0012\n\u000ELABEL_REPEATED\u0010\u0003\"\u008C\u0001\n\u0013EnumDescriptoDProto\u0012\f\n\u0004name\u0018\u0001";
      String string1 = CodeGenerator.identifierEscape(string0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertEquals("E_DOUBLE\\u0010\\u0001\\u0012\\u000e\\u000a\\u000aTYPE_FLOAT\\u0010\\u0002\\u0012\\u000e\\u000a\\u000aTYPE_INT64\\u0010\\u0003\\u0012\\u000f\\u000a\\u000bTYPE_UINT64\\u0010\\u0004\\u0012\\u000e\\u000a\\u000aTYP_INT32\\u0010\\u0005\\u0012\\u0010\\u000a{TYPE_FIXED64\\u0010\\u0006\\u0012\\u0010\\u000a\\u000cTYPE_FIXED32\\u0010\\u0007\\u0012\\u000d\\u000a\\u0009TYPE_BOOL\\u0010\\u0008\\u0012\\u000f\\u000a\\u000bTYPE_STRING\\u0010\\u0009\\u0012\\u000e\\u000a\\u000aTYPE_GROUP\\u0010\\u000a\\u0012\\u0010\\u000a\\u000cTYPE_MESSGE\\u0010\\u000b\\u0012\\u000e\\u000a\\u000aTYPE_BYTES\\u0010\\u000c\\u0012\\u000f\\u000a\\u000bTYPE_UINT32\\u0010\\u000d\\u0012\\u000d\\u000a\\u0009TYPE_ENUM\\u0010\\u000e\\u0012\\u0011\\u000a\\u000dTYPE_SFIXED32\\u0010\\u000f\\u0012\\u0011\\u000a\\u000dTYPE_SFIXED64\\u0010\\u0010\\u0012\\u000f\\u000a\\u000bTYPE_SINT32\\u0010\\u0011\\u0012\\u000f\\u000a\\u000bTYPE_SINT64\\u0010\\u0012\"C\\u000a\\u0005Label\\u0012\\u0012\\u000a\\u000eLABEL_OPTIONAL\\u0010\\u0001\\u0012\\u0012\\u000a\\u000eLABEL_REQUIRED\\u0010\\u0002\\u0012\\u0012\\u000a\\u000eLABEL_REPEATED\\u0010\\u0003\"\\u008c\\u0001\\u000a\\u0013EnumDescriptoDProto\\u0012\\u000c\\u000a\\u0004name\\u0018\\u0001", string1);
      assertNotNull(string1);
  }
}
