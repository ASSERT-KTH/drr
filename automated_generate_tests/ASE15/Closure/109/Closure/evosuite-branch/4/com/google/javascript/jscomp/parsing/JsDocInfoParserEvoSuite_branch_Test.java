/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 19:58:45 GMT 2014
 */

package com.google.javascript.jscomp.parsing;

import static org.junit.Assert.*;
import org.junit.Test;
import com.google.javascript.jscomp.parsing.Config;
import com.google.javascript.jscomp.parsing.JsDocInfoParser;
import com.google.javascript.jscomp.parsing.JsDocToken;
import com.google.javascript.jscomp.parsing.JsDocTokenStream;
import com.google.javascript.rhino.JSDocInfo;
import com.google.javascript.rhino.Node;
import com.google.javascript.rhino.head.Context;
import com.google.javascript.rhino.head.ContextFactory;
import com.google.javascript.rhino.head.ErrorReporter;
import com.google.javascript.rhino.head.ast.Comment;
import com.google.javascript.rhino.head.ast.ContinueStatement;
import com.google.javascript.rhino.head.ast.ErrorCollector;
import com.google.javascript.rhino.head.ast.NewExpression;
import com.google.javascript.rhino.head.ast.RegExpLiteral;
import com.google.javascript.rhino.head.ast.WithStatement;
import com.google.javascript.rhino.head.ast.XmlDotQuery;
import com.google.javascript.rhino.head.ast.XmlPropRef;
import com.google.javascript.rhino.head.tools.ToolErrorReporter;
import com.google.javascript.rhino.jstype.SimpleSourceFile;
import com.google.javascript.rhino.jstype.StaticSourceFile;
import java.io.PrintStream;
import java.nio.charset.Charset;
import java.util.LinkedHashSet;
import java.util.Locale;
import java.util.Set;
import java.util.TreeSet;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;

import org.evosuite.runtime.FileSystemHandling;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.junit.runner.RunWith;


public class JsDocInfoParserEvoSuite_branch_Test  {

  @Test
  public void test00()  throws Throwable  {
      String string0 = "[\n";
      Node node0 = JsDocInfoParser.parseTypeString(string0);
      assertNull(node0);
  }

  @Test
  public void test01()  throws Throwable  {
      String string0 = "{J";
      Node node0 = JsDocInfoParser.parseTypeString(string0);
      assertNull(node0);
  }

  @Test
  public void test02()  throws Throwable  {
      String string0 = "{H}1(2";
      Node node0 = JsDocInfoParser.parseTypeString(string0);
      assertNotNull(node0);
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isThis());
      assertEquals(309, node0.getType());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isBreak());
      assertEquals(1, node0.getCharno());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isString());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isFromExterns());
      assertEquals(true, node0.mayMutateGlobalStateOrThrow());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isDelProp());
      assertEquals(1, node0.getChildCount());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isStringKey());
      assertEquals(1, node0.getSourcePosition());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isAssign());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isContinue());
      assertEquals(true, node0.hasChildren());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isHook());
      assertEquals(0, node0.getLength());
      assertEquals(0, node0.getLineno());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isOnlyModifiesArgumentsCall());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isCast());
      assertEquals(true, node0.mayMutateArguments());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isAnd());
      assertEquals(0, node0.getChangeTime());
      assertEquals(false, node0.isScript());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(true, node0.hasOneChild());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isLocalResultCall());
  }

  @Test
  public void test03()  throws Throwable  {
      String string0 = "[f<";
      Node node0 = JsDocInfoParser.parseTypeString(string0);
      assertNull(node0);
  }

  @Test
  public void test04()  throws Throwable  {
      String string0 = "(Ljav/lag/<bject;)Z";
      Node node0 = JsDocInfoParser.parseTypeString(string0);
      assertNotNull(node0);
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(0, node0.getLineno());
      assertEquals(false, node0.isFor());
      assertEquals(true, node0.mayMutateArguments());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isString());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isRegExp());
      assertEquals(true, node0.mayMutateGlobalStateOrThrow());
      assertEquals(1, node0.getCharno());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isCast());
      assertEquals(false, node0.isDebugger());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isOnlyModifiesArgumentsCall());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isLabelName());
      assertEquals(1, node0.getChildCount());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isFromExterns());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isTypeOf());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isIf());
      assertEquals(1, node0.getSourcePosition());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isStringKey());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isEmpty());
      assertEquals(true, node0.hasChildren());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isDelProp());
      assertEquals(0, node0.getChangeTime());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isGetElem());
      assertEquals(true, node0.hasOneChild());
      assertEquals(301, node0.getType());
      assertEquals(false, node0.isScript());
      assertEquals(false, node0.isQuotedString());
  }

  @Test
  public void test05()  throws Throwable  {
      String string0 = "(Hc_p3;0Zik'^>";
      Node node0 = JsDocInfoParser.parseTypeString(string0);
      assertNull(node0);
  }

  @Test
  public void test06()  throws Throwable  {
      String string0 = "9F|Co?|^wT,am";
      Node node0 = JsDocInfoParser.parseTypeString(string0);
      assertNotNull(node0);
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isVoid());
      assertEquals(3, node0.getSourcePosition());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isInc());
      assertEquals(true, node0.mayMutateArguments());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isString());
      assertEquals(false, node0.isRegExp());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.isAnd());
      assertEquals(0, node0.getChangeTime());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(true, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isNE());
      assertEquals(0, node0.getLineno());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isComma());
      assertEquals(301, node0.getType());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isWhile());
      assertEquals(4, node0.getChildCount());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isGetterDef());
      assertEquals(true, node0.hasChildren());
      assertEquals(false, node0.isArrayLit());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isObjectLit());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isScript());
      assertEquals(false, node0.isCast());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isOnlyModifiesArgumentsCall());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isSetterDef());
      assertEquals(true, node0.mayMutateGlobalStateOrThrow());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isStringKey());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isFunction());
      assertEquals(3, node0.getCharno());
  }

  @Test
  public void test07()  throws Throwable  {
      String string0 = "undefined";
      Node node0 = JsDocInfoParser.parseTypeString(string0);
      assertNotNull(node0);
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isScript());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(40, node0.getType());
      assertEquals(false, node0.isContinue());
      assertEquals(true, node0.mayMutateGlobalStateOrThrow());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isOnlyModifiesArgumentsCall());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(true, node0.mayMutateArguments());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isDebugger());
      assertEquals(0, node0.getChildCount());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isThrow());
      assertEquals(true, node0.isString());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isIn());
      assertEquals(0, node0.getSourcePosition());
      assertEquals(0, node0.getChangeTime());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isCast());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isNumber());
      assertEquals(0, node0.getLineno());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isStringKey());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(9, node0.getLength());
      assertEquals(false, node0.isTry());
      assertEquals(0, node0.getCharno());
  }

  @Test
  public void test08()  throws Throwable  {
      String string0 = "function";
      Node node0 = JsDocInfoParser.parseTypeString(string0);
      assertNull(node0);
  }

  @Test
  public void test09()  throws Throwable  {
      String string0 = "{[";
      Node node0 = JsDocInfoParser.parseTypeString(string0);
      assertNull(node0);
  }

  @Test
  public void test10()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      String string0 = "msg.}Gdoc.visibility.p1oAecded";
      Node node0 = JsDocInfoParser.parseTypeString(string0);
      assertNotNull(node0);
      assertEquals(false, node0.isScript());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isDo());
      assertEquals(0, node0.getChangeTime());
      assertEquals(false, node0.isOr());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isSetterDef());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isAnd());
      assertEquals(0, node0.getSourcePosition());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isAdd());
      assertEquals(4, node0.getLength());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isCast());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isIf());
      assertEquals(true, node0.mayMutateGlobalStateOrThrow());
      assertEquals(false, node0.isSwitch());
      assertEquals(40, node0.getType());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isTrue());
      assertEquals(true, node0.isString());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isDebugger());
      assertEquals(true, node0.mayMutateArguments());
      assertEquals(false, node0.isStringKey());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(0, node0.getCharno());
      assertEquals(false, node0.isDefaultCase());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isQuotedString());
      assertEquals(0, node0.getLineno());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isOnlyModifiesArgumentsCall());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isNoSideEffectsCall());
      
      boolean boolean0 = FileSystemHandling.createFolder(evoSuiteFile0);
      assertFalse(boolean0);
      
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream(string0);
      assertNotNull(jsDocTokenStream0);
      
      ContinueStatement continueStatement0 = new ContinueStatement();
      assertNotNull(continueStatement0);
      assertEquals(1, continueStatement0.getLength());
      assertNull(continueStatement0.getJsDoc());
      assertEquals(-1, continueStatement0.getAbsolutePosition());
      assertEquals(121, continueStatement0.getType());
      assertEquals(false, continueStatement0.hasChildren());
      assertEquals(0, continueStatement0.depth());
      assertEquals(-1, continueStatement0.getPosition());
      assertEquals("121", continueStatement0.toString());
      assertEquals(-1, continueStatement0.getLineno());
      
      Comment comment0 = continueStatement0.getJsDocNode();
      assertNull(comment0);
      assertEquals(1, continueStatement0.getLength());
      assertNull(continueStatement0.getJsDoc());
      assertEquals(-1, continueStatement0.getAbsolutePosition());
      assertEquals(121, continueStatement0.getType());
      assertEquals(false, continueStatement0.hasChildren());
      assertEquals(0, continueStatement0.depth());
      assertEquals(-1, continueStatement0.getPosition());
      assertEquals("121", continueStatement0.toString());
      assertEquals(-1, continueStatement0.getLineno());
      
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      assertNotNull(linkedHashSet0);
      assertEquals("[]", linkedHashSet0.toString());
      assertEquals(true, linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5_STRICT;
      Config config0 = new Config(linkedHashSet0, linkedHashSet0, boolean0, config_LanguageMode0, boolean0);
      assertNotNull(config0);
      assertEquals("[]", linkedHashSet0.toString());
      assertEquals(true, linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      
      Context context0 = new Context();
      assertNotNull(context0);
      assertEquals(false, context0.isSealed());
      assertEquals(2147483647, context0.getMaximumInterpreterStackDepth());
      assertEquals(true, context0.isGeneratingSource());
      assertEquals(0, context0.getOptimizationLevel());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertEquals(false, context0.isGeneratingDebug());
      assertEquals(0, context0.getLanguageVersion());
      assertEquals(false, context0.isGeneratingDebugChanged());
      assertFalse(context0.generateObserverCount);
      
      ErrorReporter errorReporter0 = context0.getErrorReporter();
      assertNotNull(errorReporter0);
      assertEquals(false, context0.isSealed());
      assertEquals(2147483647, context0.getMaximumInterpreterStackDepth());
      assertEquals(true, context0.isGeneratingSource());
      assertEquals(0, context0.getOptimizationLevel());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertEquals(false, context0.isGeneratingDebug());
      assertEquals(0, context0.getLanguageVersion());
      assertEquals(false, context0.isGeneratingDebugChanged());
      assertFalse(context0.generateObserverCount);
      
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, comment0, node0, config0, errorReporter0);
      assertNotNull(jsDocInfoParser0);
      assertEquals(false, node0.isScript());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isDo());
      assertEquals(0, node0.getChangeTime());
      assertEquals(false, node0.isOr());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isSetterDef());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isAnd());
      assertEquals(0, node0.getSourcePosition());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isAdd());
      assertEquals(4, node0.getLength());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isCast());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isIf());
      assertEquals(true, node0.mayMutateGlobalStateOrThrow());
      assertEquals(false, node0.isSwitch());
      assertEquals(40, node0.getType());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isTrue());
      assertEquals(true, node0.isString());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isDebugger());
      assertEquals(true, node0.mayMutateArguments());
      assertEquals(false, node0.isStringKey());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(0, node0.getCharno());
      assertEquals(false, node0.isDefaultCase());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isQuotedString());
      assertEquals(0, node0.getLineno());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isOnlyModifiesArgumentsCall());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(1, continueStatement0.getLength());
      assertNull(continueStatement0.getJsDoc());
      assertEquals(-1, continueStatement0.getAbsolutePosition());
      assertEquals(121, continueStatement0.getType());
      assertEquals(false, continueStatement0.hasChildren());
      assertEquals(0, continueStatement0.depth());
      assertEquals(-1, continueStatement0.getPosition());
      assertEquals("121", continueStatement0.toString());
      assertEquals(-1, continueStatement0.getLineno());
      assertEquals(false, context0.isSealed());
      assertEquals(2147483647, context0.getMaximumInterpreterStackDepth());
      assertEquals(true, context0.isGeneratingSource());
      assertEquals(0, context0.getOptimizationLevel());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertEquals(false, context0.isGeneratingDebug());
      assertEquals(0, context0.getLanguageVersion());
      assertEquals(false, context0.isGeneratingDebugChanged());
      assertEquals("[]", linkedHashSet0.toString());
      assertEquals(true, linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertFalse(context0.generateObserverCount);
      
      JsDocToken jsDocToken0 = JsDocToken.STAR;
      Node node1 = jsDocInfoParser0.parseAndRecordTypeNode(jsDocToken0);
      assertNotNull(node1);
      assertEquals(false, node0.isScript());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isDo());
      assertEquals(0, node0.getChangeTime());
      assertEquals(false, node0.isOr());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isSetterDef());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isAnd());
      assertEquals(0, node0.getSourcePosition());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isAdd());
      assertEquals(4, node0.getLength());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isCast());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isIf());
      assertEquals(true, node0.mayMutateGlobalStateOrThrow());
      assertEquals(false, node0.isSwitch());
      assertEquals(40, node0.getType());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isTrue());
      assertEquals(true, node0.isString());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isDebugger());
      assertEquals(true, node0.mayMutateArguments());
      assertEquals(false, node0.isStringKey());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(0, node0.getCharno());
      assertEquals(false, node0.isDefaultCase());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isQuotedString());
      assertEquals(0, node0.getLineno());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isOnlyModifiesArgumentsCall());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(1, continueStatement0.getLength());
      assertNull(continueStatement0.getJsDoc());
      assertEquals(-1, continueStatement0.getAbsolutePosition());
      assertEquals(121, continueStatement0.getType());
      assertEquals(false, continueStatement0.hasChildren());
      assertEquals(0, continueStatement0.depth());
      assertEquals(-1, continueStatement0.getPosition());
      assertEquals("121", continueStatement0.toString());
      assertEquals(-1, continueStatement0.getLineno());
      assertEquals(false, node1.isVar());
      assertEquals(false, node1.isComma());
      assertEquals(false, node1.isLocalResultCall());
      assertEquals(false, node1.isReturn());
      assertEquals(false, node1.wasEmptyNode());
      assertEquals(false, node1.hasMoreThanOneChild());
      assertEquals(0, node1.getSideEffectFlags());
      assertEquals(false, node1.isNull());
      assertEquals(false, node1.isParamList());
      assertNull(node1.getSourceFileName());
      assertEquals(false, node1.isNumber());
      assertEquals(302, node1.getType());
      assertEquals(false, node1.isOnlyModifiesArgumentsCall());
      assertEquals(false, node1.isAssign());
      assertEquals(false, node1.isInstanceOf());
      assertEquals(false, node1.isCase());
      assertEquals(false, node1.isContinue());
      assertEquals(false, node1.isScript());
      assertEquals(true, node1.mayMutateArguments());
      assertEquals(false, node1.isFor());
      assertEquals(true, node1.mayMutateGlobalStateOrThrow());
      assertEquals(false, node1.isOptionalArg());
      assertEquals(0, node1.getLength());
      assertEquals(false, node1.isGetProp());
      assertEquals(false, node1.isAnd());
      assertEquals(-1, node1.getLineno());
      assertEquals(false, node1.isWith());
      assertEquals(-1, node1.getSourcePosition());
      assertEquals(-1, node1.getCharno());
      assertEquals(false, node1.isVoid());
      assertEquals(false, node1.isAssignAdd());
      assertEquals(false, node1.isIf());
      assertEquals(false, node1.isCast());
      assertEquals(false, node1.isSyntheticBlock());
      assertEquals(false, node1.isString());
      assertEquals(false, node1.isIn());
      assertEquals(false, node1.isBlock());
      assertEquals(false, node1.isOnlyModifiesThisCall());
      assertEquals(false, node1.isDec());
      assertEquals(false, node1.isFromExterns());
      assertEquals(false, node1.isEmpty());
      assertEquals(false, node1.isNE());
      assertEquals(false, node1.hasOneChild());
      assertEquals(false, node1.isSwitch());
      assertEquals(false, node1.isObjectLit());
      assertEquals(false, node1.isFunction());
      assertEquals(false, node1.isCall());
      assertEquals(false, node1.isArrayLit());
      assertEquals(false, node1.isHook());
      assertEquals(false, node1.isTry());
      assertEquals(false, node1.isNot());
      assertEquals(false, node1.isNoSideEffectsCall());
      assertEquals(false, node1.isSetterDef());
      assertEquals(false, node1.isThrow());
      assertEquals(false, node1.isCatch());
      assertEquals(false, node1.isLabelName());
      assertEquals(false, node1.isQuotedString());
      assertEquals(false, node1.isInc());
      assertEquals(false, node1.isLabel());
      assertEquals(false, node1.isGetElem());
      assertEquals(false, node1.isThis());
      assertEquals(false, node1.isTrue());
      assertEquals(false, node1.isBreak());
      assertEquals(false, node1.isDefaultCase());
      assertEquals(false, node1.isGetterDef());
      assertEquals(false, node1.isName());
      assertEquals(false, node1.isExprResult());
      assertEquals(false, node1.isWhile());
      assertEquals(false, node1.isFalse());
      assertEquals(false, node1.isDo());
      assertEquals(0, node1.getChangeTime());
      assertEquals(false, node1.isAdd());
      assertEquals(false, node1.hasChildren());
      assertEquals(false, node1.isTypeOf());
      assertEquals(false, node1.isDebugger());
      assertEquals(false, node1.isRegExp());
      assertEquals(false, node1.isNew());
      assertEquals(false, node1.isStringKey());
      assertEquals(false, node1.isVarArgs());
      assertEquals(0, node1.getChildCount());
      assertEquals(false, node1.isOr());
      assertEquals(false, node1.isDelProp());
      assertEquals(false, context0.isSealed());
      assertEquals(2147483647, context0.getMaximumInterpreterStackDepth());
      assertEquals(true, context0.isGeneratingSource());
      assertEquals(0, context0.getOptimizationLevel());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertEquals(false, context0.isGeneratingDebug());
      assertEquals(0, context0.getLanguageVersion());
      assertEquals(false, context0.isGeneratingDebugChanged());
      assertEquals("[]", linkedHashSet0.toString());
      assertEquals(true, linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertFalse(context0.generateObserverCount);
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node0));
      assertNotSame(node0, node1);
      assertNotSame(node1, node0);
  }

  @Test
  public void test11()  throws Throwable  {
      String string0 = "51l!&2-d~MV%Ee5";
      Node node0 = JsDocInfoParser.parseTypeString(string0);
      assertNotNull(node0);
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isScript());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isLabel());
      assertEquals(3, node0.getCharno());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isVar());
      assertEquals(3, node0.getSourcePosition());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isCase());
      assertEquals(1, node0.getChildCount());
      assertEquals(true, node0.hasOneChild());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isOnlyModifiesArgumentsCall());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isVarArgs());
      assertEquals(true, node0.hasChildren());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(306, node0.getType());
      assertEquals(true, node0.mayMutateArguments());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isString());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.wasEmptyNode());
      assertNull(node0.getSourceFileName());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isCast());
      assertEquals(false, node0.isInc());
      assertEquals(true, node0.mayMutateGlobalStateOrThrow());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isStringKey());
      assertEquals(0, node0.getLineno());
      assertEquals(0, node0.getChangeTime());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isName());
  }

  @Test
  public void test12()  throws Throwable  {
      String string0 = "*3B57y%>+giTmwXC";
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream(string0);
      assertNotNull(jsDocTokenStream0);
      
      NewExpression newExpression0 = new NewExpression(jsDocTokenStream0.cursor, jsDocTokenStream0.cursor);
      assertNotNull(newExpression0);
      assertEquals(-1, newExpression0.getLp());
      assertEquals("30", newExpression0.toString());
      assertEquals(-1, newExpression0.getLineno());
      assertEquals(-1, newExpression0.getRp());
      assertEquals(0, newExpression0.getPosition());
      assertEquals(0, newExpression0.getAbsolutePosition());
      assertEquals(0, newExpression0.depth());
      assertEquals(30, newExpression0.getType());
      assertNull(newExpression0.getJsDoc());
      assertEquals(0, newExpression0.getLength());
      assertEquals(false, newExpression0.hasChildren());
      
      Comment comment0 = newExpression0.getJsDocNode();
      assertNull(comment0);
      assertEquals(-1, newExpression0.getLp());
      assertEquals("30", newExpression0.toString());
      assertEquals(-1, newExpression0.getLineno());
      assertEquals(-1, newExpression0.getRp());
      assertEquals(0, newExpression0.getPosition());
      assertEquals(0, newExpression0.getAbsolutePosition());
      assertEquals(0, newExpression0.depth());
      assertEquals(30, newExpression0.getType());
      assertNull(newExpression0.getJsDoc());
      assertEquals(0, newExpression0.getLength());
      assertEquals(false, newExpression0.hasChildren());
      
      Node node0 = null;
      TreeSet<String> treeSet0 = new TreeSet<String>();
      assertNotNull(treeSet0);
      assertEquals("[]", treeSet0.toString());
      
      boolean boolean0 = true;
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5_STRICT;
      ErrorCollector errorCollector0 = new ErrorCollector();
      assertNotNull(errorCollector0);
      
      Config config0 = new Config(treeSet0, treeSet0, boolean0, config_LanguageMode0, boolean0);
      assertNotNull(config0);
      assertEquals("[]", treeSet0.toString());
      
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, comment0, node0, config0, errorCollector0);
      assertNotNull(jsDocInfoParser0);
      assertEquals(-1, newExpression0.getLp());
      assertEquals("30", newExpression0.toString());
      assertEquals(-1, newExpression0.getLineno());
      assertEquals(-1, newExpression0.getRp());
      assertEquals(0, newExpression0.getPosition());
      assertEquals(0, newExpression0.getAbsolutePosition());
      assertEquals(0, newExpression0.depth());
      assertEquals(30, newExpression0.getType());
      assertNull(newExpression0.getJsDoc());
      assertEquals(0, newExpression0.getLength());
      assertEquals(false, newExpression0.hasChildren());
      assertEquals("[]", treeSet0.toString());
      
      // Undeclared exception!
      try {
        boolean boolean1 = jsDocInfoParser0.parse();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test13()  throws Throwable  {
      String string0 = "() {";
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream(string0);
      assertNotNull(jsDocTokenStream0);
      
      NewExpression newExpression0 = new NewExpression(jsDocTokenStream0.cursor, jsDocTokenStream0.cursor);
      assertNotNull(newExpression0);
      assertEquals(false, newExpression0.hasChildren());
      assertEquals(0, newExpression0.getPosition());
      assertNull(newExpression0.getJsDoc());
      assertEquals(-1, newExpression0.getRp());
      assertEquals(0, newExpression0.getLength());
      assertEquals(-1, newExpression0.getLineno());
      assertEquals(0, newExpression0.depth());
      assertEquals(-1, newExpression0.getLp());
      assertEquals(0, newExpression0.getAbsolutePosition());
      assertEquals(30, newExpression0.getType());
      assertEquals("30", newExpression0.toString());
      
      Comment comment0 = newExpression0.getJsDocNode();
      assertNull(comment0);
      assertEquals(false, newExpression0.hasChildren());
      assertEquals(0, newExpression0.getPosition());
      assertNull(newExpression0.getJsDoc());
      assertEquals(-1, newExpression0.getRp());
      assertEquals(0, newExpression0.getLength());
      assertEquals(-1, newExpression0.getLineno());
      assertEquals(0, newExpression0.depth());
      assertEquals(-1, newExpression0.getLp());
      assertEquals(0, newExpression0.getAbsolutePosition());
      assertEquals(30, newExpression0.getType());
      assertEquals("30", newExpression0.toString());
      
      Node node0 = null;
      int int0 = jsDocTokenStream0.getChar();
      assertEquals(40, int0);
      
      TreeSet<String> treeSet0 = new TreeSet<String>();
      assertNotNull(treeSet0);
      assertEquals("[]", treeSet0.toString());
      
      boolean boolean0 = true;
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5_STRICT;
      ErrorCollector errorCollector0 = new ErrorCollector();
      assertNotNull(errorCollector0);
      
      Config config0 = new Config(treeSet0, treeSet0, boolean0, config_LanguageMode0, boolean0);
      assertNotNull(config0);
      assertEquals("[]", treeSet0.toString());
      
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, comment0, node0, config0, errorCollector0);
      assertNotNull(jsDocInfoParser0);
      assertEquals(false, newExpression0.hasChildren());
      assertEquals(0, newExpression0.getPosition());
      assertNull(newExpression0.getJsDoc());
      assertEquals(-1, newExpression0.getRp());
      assertEquals(0, newExpression0.getLength());
      assertEquals(-1, newExpression0.getLineno());
      assertEquals(0, newExpression0.depth());
      assertEquals(-1, newExpression0.getLp());
      assertEquals(0, newExpression0.getAbsolutePosition());
      assertEquals(30, newExpression0.getType());
      assertEquals("30", newExpression0.toString());
      assertEquals("[]", treeSet0.toString());
      
      // Undeclared exception!
      try {
        boolean boolean1 = jsDocInfoParser0.parse();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test14() {}
//   @Test
//   public void test14()  throws Throwable  {
//       String string0 = "9F|C.?|^wT\"am";
//       Node node0 = JsDocInfoParser.parseTypeString(string0);
//       //  // Unstable assertion: assertNotNull(node0);
//       //  // Unstable assertion: assertEquals(false, node0.isFromExterns());
//       //  // Unstable assertion: assertEquals(true, node0.hasMoreThanOneChild());
//       //  // Unstable assertion: assertEquals(false, node0.isGetProp());
//       //  // Unstable assertion: assertEquals(false, node0.isOr());
//       //  // Unstable assertion: assertEquals(false, node0.isWith());
//       //  // Unstable assertion: assertEquals(false, node0.isAssignAdd());
//       //  // Unstable assertion: assertEquals(false, node0.isComma());
//       //  // Unstable assertion: assertEquals(true, node0.mayMutateGlobalStateOrThrow());
//       //  // Unstable assertion: assertEquals(0, node0.getLength());
//       //  // Unstable assertion: assertNull(node0.getSourceFileName());
//       //  // Unstable assertion: assertEquals(false, node0.isBlock());
//       //  // Unstable assertion: assertEquals(false, node0.isDec());
//       //  // Unstable assertion: assertEquals(false, node0.isQuotedString());
//       //  // Unstable assertion: assertEquals(false, node0.isCall());
//       //  // Unstable assertion: assertEquals(false, node0.isContinue());
//       //  // Unstable assertion: assertEquals(false, node0.isLabel());
//       //  // Unstable assertion: assertEquals(false, node0.isGetterDef());
//       //  // Unstable assertion: assertEquals(false, node0.isDefaultCase());
//       //  // Unstable assertion: assertEquals(false, node0.isName());
//       //  // Unstable assertion: assertEquals(false, node0.isObjectLit());
//       //  // Unstable assertion: assertEquals(true, node0.mayMutateArguments());
//       //  // Unstable assertion: assertEquals(false, node0.isDebugger());
//       //  // Unstable assertion: assertEquals(false, node0.isCatch());
//       //  // Unstable assertion: assertEquals(false, node0.isAssign());
//       //  // Unstable assertion: assertEquals(false, node0.isInstanceOf());
//       //  // Unstable assertion: assertEquals(false, node0.isIn());
//       //  // Unstable assertion: assertEquals(false, node0.isDelProp());
//       //  // Unstable assertion: assertEquals(false, node0.isIf());
//       //  // Unstable assertion: assertEquals(false, node0.isHook());
//       //  // Unstable assertion: assertEquals(false, node0.isParamList());
//       //  // Unstable assertion: assertEquals(0, node0.getSideEffectFlags());
//       //  // Unstable assertion: assertEquals(false, node0.isReturn());
//       //  // Unstable assertion: assertEquals(false, node0.isRegExp());
//       //  // Unstable assertion: assertEquals(false, node0.isLocalResultCall());
//       //  // Unstable assertion: assertEquals(301, node0.getType());
//       //  // Unstable assertion: assertEquals(false, node0.isTypeOf());
//       //  // Unstable assertion: assertEquals(0, node0.getChangeTime());
//       //  // Unstable assertion: assertEquals(false, node0.isFunction());
//       //  // Unstable assertion: assertEquals(false, node0.isOptionalArg());
//       //  // Unstable assertion: assertEquals(true, node0.hasChildren());
//       //  // Unstable assertion: assertEquals(false, node0.isCast());
//       //  // Unstable assertion: assertEquals(false, node0.isNull());
//       //  // Unstable assertion: assertEquals(false, node0.isSyntheticBlock());
//       //  // Unstable assertion: assertEquals(false, node0.isVarArgs());
//       //  // Unstable assertion: assertEquals(false, node0.isAnd());
//       //  // Unstable assertion: assertEquals(false, node0.isSetterDef());
//       //  // Unstable assertion: assertEquals(false, node0.isVar());
//       //  // Unstable assertion: assertEquals(false, node0.isDo());
//       //  // Unstable assertion: assertEquals(3, node0.getChildCount());
//       //  // Unstable assertion: assertEquals(false, node0.isBreak());
//       //  // Unstable assertion: assertEquals(false, node0.isScript());
//       //  // Unstable assertion: assertEquals(false, node0.isOnlyModifiesArgumentsCall());
//       //  // Unstable assertion: assertEquals(false, node0.isGetElem());
//       //  // Unstable assertion: assertEquals(false, node0.isLabelName());
//       //  // Unstable assertion: assertEquals(false, node0.isNE());
//       //  // Unstable assertion: assertEquals(false, node0.isNew());
//       //  // Unstable assertion: assertEquals(false, node0.isTry());
//       //  // Unstable assertion: assertEquals(3, node0.getSourcePosition());
//       //  // Unstable assertion: assertEquals(false, node0.isTrue());
//       //  // Unstable assertion: assertEquals(false, node0.isArrayLit());
//       //  // Unstable assertion: assertEquals(false, node0.isOnlyModifiesThisCall());
//       //  // Unstable assertion: assertEquals(false, node0.isSwitch());
//       //  // Unstable assertion: assertEquals(false, node0.isInc());
//       //  // Unstable assertion: assertEquals(false, node0.hasOneChild());
//       //  // Unstable assertion: assertEquals(false, node0.isCase());
//       //  // Unstable assertion: assertEquals(false, node0.isNot());
//       //  // Unstable assertion: assertEquals(false, node0.wasEmptyNode());
//       //  // Unstable assertion: assertEquals(false, node0.isThrow());
//       //  // Unstable assertion: assertEquals(false, node0.isEmpty());
//       //  // Unstable assertion: assertEquals(false, node0.isNoSideEffectsCall());
//       //  // Unstable assertion: assertEquals(0, node0.getLineno());
//       //  // Unstable assertion: assertEquals(false, node0.isVoid());
//       //  // Unstable assertion: assertEquals(false, node0.isExprResult());
//       //  // Unstable assertion: assertEquals(false, node0.isStringKey());
//       //  // Unstable assertion: assertEquals(false, node0.isNumber());
//       //  // Unstable assertion: assertEquals(false, node0.isThis());
//       //  // Unstable assertion: assertEquals(false, node0.isAdd());
//       //  // Unstable assertion: assertEquals(false, node0.isString());
//       //  // Unstable assertion: assertEquals(false, node0.isWhile());
//       //  // Unstable assertion: assertEquals(false, node0.isFalse());
//       //  // Unstable assertion: assertEquals(false, node0.isFor());
//       //  // Unstable assertion: assertEquals(3, node0.getCharno());
//       
//       int int0 = 331;
//       JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream(string0, int0, int0);
//       //  // Unstable assertion: assertNotNull(jsDocTokenStream0);
//       
//       ContextFactory contextFactory0 = new ContextFactory();
//       //  // Unstable assertion: assertNotNull(contextFactory0);
//       //  // Unstable assertion: assertEquals(false, contextFactory0.hasExplicitGlobal());
//       //  // Unstable assertion: assertEquals(false, contextFactory0.isSealed());
//       
//       Context context0 = contextFactory0.enter();
//       //  // Unstable assertion: assertNotNull(context0);
//       //  // Unstable assertion: assertEquals(false, contextFactory0.hasExplicitGlobal());
//       //  // Unstable assertion: assertEquals(false, contextFactory0.isSealed());
//       //  // Unstable assertion: assertEquals(331, context0.getInstructionObserverThreshold());
//       //  // Unstable assertion: assertEquals(true, context0.isGeneratingDebugChanged());
//       //  // Unstable assertion: assertEquals(false, context0.isGeneratingDebug());
//       //  // Unstable assertion: assertEquals(true, context0.isGeneratingSource());
//       //  // Unstable assertion: assertEquals(0, context0.getLanguageVersion());
//       //  // Unstable assertion: assertEquals(2147483647, context0.getMaximumInterpreterStackDepth());
//       //  // Unstable assertion: assertEquals(false, context0.isSealed());
//       //  // Unstable assertion: assertEquals(0, context0.getOptimizationLevel());
//       //  // Unstable assertion: assertTrue(context0.generateObserverCount);
//       
//       Locale locale0 = Locale.ROOT;
//       //  // Unstable assertion: assertNotNull(locale0);
//       //  // Unstable assertion: assertEquals("", locale0.getVariant());
//       //  // Unstable assertion: assertEquals("", locale0.getLanguage());
//       //  // Unstable assertion: assertEquals("", locale0.getISO3Language());
//       //  // Unstable assertion: assertEquals("", locale0.getCountry());
//       //  // Unstable assertion: assertEquals("", locale0.toString());
//       //  // Unstable assertion: assertEquals("", locale0.getISO3Country());
//       
//       Set<String> set0 = locale0.getUnicodeLocaleAttributes();
//       //  // Unstable assertion: assertNotNull(set0);
//       //  // Unstable assertion: assertEquals(0, set0.size());
//       //  // Unstable assertion: assertEquals(true, set0.isEmpty());
//       //  // Unstable assertion: assertEquals("", locale0.getVariant());
//       //  // Unstable assertion: assertEquals("", locale0.getLanguage());
//       //  // Unstable assertion: assertEquals("", locale0.getISO3Language());
//       //  // Unstable assertion: assertEquals("", locale0.getCountry());
//       //  // Unstable assertion: assertEquals("", locale0.toString());
//       //  // Unstable assertion: assertEquals("", locale0.getISO3Country());
//       
//       RegExpLiteral regExpLiteral0 = new RegExpLiteral(int0, int0);
//       //  // Unstable assertion: assertNotNull(regExpLiteral0);
//       //  // Unstable assertion: assertEquals(48, regExpLiteral0.getType());
//       //  // Unstable assertion: assertEquals(331, regExpLiteral0.getLength());
//       //  // Unstable assertion: assertEquals(false, regExpLiteral0.hasChildren());
//       //  // Unstable assertion: assertNull(regExpLiteral0.getValue());
//       //  // Unstable assertion: assertNull(regExpLiteral0.getJsDoc());
//       //  // Unstable assertion: assertNull(regExpLiteral0.getFlags());
//       //  // Unstable assertion: assertEquals(331, regExpLiteral0.getPosition());
//       //  // Unstable assertion: assertEquals(331, regExpLiteral0.getAbsolutePosition());
//       //  // Unstable assertion: assertEquals(0, regExpLiteral0.depth());
//       //  // Unstable assertion: assertEquals(-1, regExpLiteral0.getLineno());
//       //  // Unstable assertion: assertEquals("48", regExpLiteral0.toString());
//       
//       Comment comment0 = regExpLiteral0.getJsDocNode();
//       //  // Unstable assertion: assertNull(comment0);
//       //  // Unstable assertion: assertEquals(48, regExpLiteral0.getType());
//       //  // Unstable assertion: assertEquals(331, regExpLiteral0.getLength());
//       //  // Unstable assertion: assertEquals(false, regExpLiteral0.hasChildren());
//       //  // Unstable assertion: assertNull(regExpLiteral0.getValue());
//       //  // Unstable assertion: assertNull(regExpLiteral0.getJsDoc());
//       //  // Unstable assertion: assertNull(regExpLiteral0.getFlags());
//       //  // Unstable assertion: assertEquals(331, regExpLiteral0.getPosition());
//       //  // Unstable assertion: assertEquals(331, regExpLiteral0.getAbsolutePosition());
//       //  // Unstable assertion: assertEquals(0, regExpLiteral0.depth());
//       //  // Unstable assertion: assertEquals(-1, regExpLiteral0.getLineno());
//       //  // Unstable assertion: assertEquals("48", regExpLiteral0.toString());
//       
//       Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT3;
//       Config config0 = new Config(set0, set0, context0.generateObserverCount, config_LanguageMode0, context0.generateObserverCount);
//       //  // Unstable assertion: assertNotNull(config0);
//       //  // Unstable assertion: assertEquals(false, contextFactory0.hasExplicitGlobal());
//       //  // Unstable assertion: assertEquals(false, contextFactory0.isSealed());
//       //  // Unstable assertion: assertEquals(0, set0.size());
//       //  // Unstable assertion: assertEquals(true, set0.isEmpty());
//       //  // Unstable assertion: assertEquals(331, context0.getInstructionObserverThreshold());
//       //  // Unstable assertion: assertEquals(true, context0.isGeneratingDebugChanged());
//       //  // Unstable assertion: assertEquals(false, context0.isGeneratingDebug());
//       //  // Unstable assertion: assertEquals(true, context0.isGeneratingSource());
//       //  // Unstable assertion: assertEquals(0, context0.getLanguageVersion());
//       //  // Unstable assertion: assertEquals(2147483647, context0.getMaximumInterpreterStackDepth());
//       //  // Unstable assertion: assertEquals(false, context0.isSealed());
//       //  // Unstable assertion: assertEquals(0, context0.getOptimizationLevel());
//       //  // Unstable assertion: assertEquals("", locale0.getVariant());
//       //  // Unstable assertion: assertEquals("", locale0.getLanguage());
//       //  // Unstable assertion: assertEquals("", locale0.getISO3Language());
//       //  // Unstable assertion: assertEquals("", locale0.getCountry());
//       //  // Unstable assertion: assertEquals("", locale0.toString());
//       //  // Unstable assertion: assertEquals("", locale0.getISO3Country());
//       //  // Unstable assertion: assertTrue(context0.generateObserverCount);
//       
//       ToolErrorReporter toolErrorReporter0 = (ToolErrorReporter)context0.getErrorReporter();
//       //  // Unstable assertion: assertNotNull(toolErrorReporter0);
//       //  // Unstable assertion: assertEquals(false, contextFactory0.hasExplicitGlobal());
//       //  // Unstable assertion: assertEquals(false, contextFactory0.isSealed());
//       //  // Unstable assertion: assertEquals(331, context0.getInstructionObserverThreshold());
//       //  // Unstable assertion: assertEquals(true, context0.isGeneratingDebugChanged());
//       //  // Unstable assertion: assertEquals(false, context0.isGeneratingDebug());
//       //  // Unstable assertion: assertEquals(true, context0.isGeneratingSource());
//       //  // Unstable assertion: assertEquals(0, context0.getLanguageVersion());
//       //  // Unstable assertion: assertEquals(2147483647, context0.getMaximumInterpreterStackDepth());
//       //  // Unstable assertion: assertEquals(false, context0.isSealed());
//       //  // Unstable assertion: assertEquals(0, context0.getOptimizationLevel());
//       //  // Unstable assertion: assertEquals(true, toolErrorReporter0.isReportingWarnings());
//       //  // Unstable assertion: assertEquals(false, toolErrorReporter0.hasReportedError());
//       //  // Unstable assertion: assertTrue(context0.generateObserverCount);
//       
//       JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, comment0, node0, config0, toolErrorReporter0);
//       //  // Unstable assertion: assertNotNull(jsDocInfoParser0);
//       //  // Unstable assertion: assertEquals(false, contextFactory0.hasExplicitGlobal());
//       //  // Unstable assertion: assertEquals(false, contextFactory0.isSealed());
//       //  // Unstable assertion: assertEquals(false, node0.isFromExterns());
//       //  // Unstable assertion: assertEquals(true, node0.hasMoreThanOneChild());
//       //  // Unstable assertion: assertEquals(false, node0.isGetProp());
//       //  // Unstable assertion: assertEquals(false, node0.isOr());
//       //  // Unstable assertion: assertEquals(false, node0.isWith());
//       //  // Unstable assertion: assertEquals(false, node0.isAssignAdd());
//       //  // Unstable assertion: assertEquals(false, node0.isComma());
//       //  // Unstable assertion: assertEquals(true, node0.mayMutateGlobalStateOrThrow());
//       //  // Unstable assertion: assertEquals(0, node0.getLength());
//       //  // Unstable assertion: assertNull(node0.getSourceFileName());
//       //  // Unstable assertion: assertEquals(false, node0.isBlock());
//       //  // Unstable assertion: assertEquals(false, node0.isDec());
//       //  // Unstable assertion: assertEquals(false, node0.isQuotedString());
//       //  // Unstable assertion: assertEquals(false, node0.isCall());
//       //  // Unstable assertion: assertEquals(false, node0.isContinue());
//       //  // Unstable assertion: assertEquals(false, node0.isLabel());
//       //  // Unstable assertion: assertEquals(false, node0.isGetterDef());
//       //  // Unstable assertion: assertEquals(false, node0.isDefaultCase());
//       //  // Unstable assertion: assertEquals(false, node0.isName());
//       //  // Unstable assertion: assertEquals(false, node0.isObjectLit());
//       //  // Unstable assertion: assertEquals(true, node0.mayMutateArguments());
//       //  // Unstable assertion: assertEquals(false, node0.isDebugger());
//       //  // Unstable assertion: assertEquals(false, node0.isCatch());
//       //  // Unstable assertion: assertEquals(false, node0.isAssign());
//       //  // Unstable assertion: assertEquals(false, node0.isInstanceOf());
//       //  // Unstable assertion: assertEquals(false, node0.isIn());
//       //  // Unstable assertion: assertEquals(false, node0.isDelProp());
//       //  // Unstable assertion: assertEquals(false, node0.isIf());
//       //  // Unstable assertion: assertEquals(false, node0.isHook());
//       //  // Unstable assertion: assertEquals(false, node0.isParamList());
//       //  // Unstable assertion: assertEquals(0, node0.getSideEffectFlags());
//       //  // Unstable assertion: assertEquals(false, node0.isReturn());
//       //  // Unstable assertion: assertEquals(false, node0.isRegExp());
//       //  // Unstable assertion: assertEquals(false, node0.isLocalResultCall());
//       //  // Unstable assertion: assertEquals(301, node0.getType());
//       //  // Unstable assertion: assertEquals(false, node0.isTypeOf());
//       //  // Unstable assertion: assertEquals(0, node0.getChangeTime());
//       //  // Unstable assertion: assertEquals(false, node0.isFunction());
//       //  // Unstable assertion: assertEquals(false, node0.isOptionalArg());
//       //  // Unstable assertion: assertEquals(true, node0.hasChildren());
//       //  // Unstable assertion: assertEquals(false, node0.isCast());
//       //  // Unstable assertion: assertEquals(false, node0.isNull());
//       //  // Unstable assertion: assertEquals(false, node0.isSyntheticBlock());
//       //  // Unstable assertion: assertEquals(false, node0.isVarArgs());
//       //  // Unstable assertion: assertEquals(false, node0.isAnd());
//       //  // Unstable assertion: assertEquals(false, node0.isSetterDef());
//       //  // Unstable assertion: assertEquals(false, node0.isVar());
//       //  // Unstable assertion: assertEquals(false, node0.isDo());
//       //  // Unstable assertion: assertEquals(3, node0.getChildCount());
//       //  // Unstable assertion: assertEquals(false, node0.isBreak());
//       //  // Unstable assertion: assertEquals(false, node0.isScript());
//       //  // Unstable assertion: assertEquals(false, node0.isOnlyModifiesArgumentsCall());
//       //  // Unstable assertion: assertEquals(false, node0.isGetElem());
//       //  // Unstable assertion: assertEquals(false, node0.isLabelName());
//       //  // Unstable assertion: assertEquals(false, node0.isNE());
//       //  // Unstable assertion: assertEquals(false, node0.isNew());
//       //  // Unstable assertion: assertEquals(false, node0.isTry());
//       //  // Unstable assertion: assertEquals(3, node0.getSourcePosition());
//       //  // Unstable assertion: assertEquals(false, node0.isTrue());
//       //  // Unstable assertion: assertEquals(false, node0.isArrayLit());
//       //  // Unstable assertion: assertEquals(false, node0.isOnlyModifiesThisCall());
//       //  // Unstable assertion: assertEquals(false, node0.isSwitch());
//       //  // Unstable assertion: assertEquals(false, node0.isInc());
//       //  // Unstable assertion: assertEquals(false, node0.hasOneChild());
//       //  // Unstable assertion: assertEquals(false, node0.isCase());
//       //  // Unstable assertion: assertEquals(false, node0.isNot());
//       //  // Unstable assertion: assertEquals(false, node0.wasEmptyNode());
//       //  // Unstable assertion: assertEquals(false, node0.isThrow());
//       //  // Unstable assertion: assertEquals(false, node0.isEmpty());
//       //  // Unstable assertion: assertEquals(false, node0.isNoSideEffectsCall());
//       //  // Unstable assertion: assertEquals(0, node0.getLineno());
//       //  // Unstable assertion: assertEquals(false, node0.isVoid());
//       //  // Unstable assertion: assertEquals(false, node0.isExprResult());
//       //  // Unstable assertion: assertEquals(false, node0.isStringKey());
//       //  // Unstable assertion: assertEquals(false, node0.isNumber());
//       //  // Unstable assertion: assertEquals(false, node0.isThis());
//       //  // Unstable assertion: assertEquals(false, node0.isAdd());
//       //  // Unstable assertion: assertEquals(false, node0.isString());
//       //  // Unstable assertion: assertEquals(false, node0.isWhile());
//       //  // Unstable assertion: assertEquals(false, node0.isFalse());
//       //  // Unstable assertion: assertEquals(false, node0.isFor());
//       //  // Unstable assertion: assertEquals(3, node0.getCharno());
//       //  // Unstable assertion: assertEquals(0, set0.size());
//       //  // Unstable assertion: assertEquals(true, set0.isEmpty());
//       //  // Unstable assertion: assertEquals(331, context0.getInstructionObserverThreshold());
//       //  // Unstable assertion: assertEquals(true, context0.isGeneratingDebugChanged());
//       //  // Unstable assertion: assertEquals(false, context0.isGeneratingDebug());
//       //  // Unstable assertion: assertEquals(true, context0.isGeneratingSource());
//       //  // Unstable assertion: assertEquals(0, context0.getLanguageVersion());
//       //  // Unstable assertion: assertEquals(2147483647, context0.getMaximumInterpreterStackDepth());
//       //  // Unstable assertion: assertEquals(false, context0.isSealed());
//       //  // Unstable assertion: assertEquals(0, context0.getOptimizationLevel());
//       //  // Unstable assertion: assertEquals(48, regExpLiteral0.getType());
//       //  // Unstable assertion: assertEquals(331, regExpLiteral0.getLength());
//       //  // Unstable assertion: assertEquals(false, regExpLiteral0.hasChildren());
//       //  // Unstable assertion: assertNull(regExpLiteral0.getValue());
//       //  // Unstable assertion: assertNull(regExpLiteral0.getJsDoc());
//       //  // Unstable assertion: assertNull(regExpLiteral0.getFlags());
//       //  // Unstable assertion: assertEquals(331, regExpLiteral0.getPosition());
//       //  // Unstable assertion: assertEquals(331, regExpLiteral0.getAbsolutePosition());
//       //  // Unstable assertion: assertEquals(0, regExpLiteral0.depth());
//       //  // Unstable assertion: assertEquals(-1, regExpLiteral0.getLineno());
//       //  // Unstable assertion: assertEquals("48", regExpLiteral0.toString());
//       //  // Unstable assertion: assertEquals("", locale0.getVariant());
//       //  // Unstable assertion: assertEquals("", locale0.getLanguage());
//       //  // Unstable assertion: assertEquals("", locale0.getISO3Language());
//       //  // Unstable assertion: assertEquals("", locale0.getCountry());
//       //  // Unstable assertion: assertEquals("", locale0.toString());
//       //  // Unstable assertion: assertEquals("", locale0.getISO3Country());
//       //  // Unstable assertion: assertEquals(true, toolErrorReporter0.isReportingWarnings());
//       //  // Unstable assertion: assertEquals(false, toolErrorReporter0.hasReportedError());
//       //  // Unstable assertion: assertTrue(context0.generateObserverCount);
//       
//       JsDocToken jsDocToken0 = JsDocToken.BANG;
//       Node node1 = jsDocInfoParser0.parseAndRecordTypeNode(jsDocToken0);
//       //  // Unstable assertion: assertNotNull(node1);
//       //  // Unstable assertion: assertEquals(false, contextFactory0.hasExplicitGlobal());
//       //  // Unstable assertion: assertEquals(false, contextFactory0.isSealed());
//       //  // Unstable assertion: assertEquals(false, node0.isFromExterns());
//       //  // Unstable assertion: assertEquals(true, node0.hasMoreThanOneChild());
//       //  // Unstable assertion: assertEquals(false, node0.isGetProp());
//       //  // Unstable assertion: assertEquals(false, node0.isOr());
//       //  // Unstable assertion: assertEquals(false, node0.isWith());
//       //  // Unstable assertion: assertEquals(false, node0.isAssignAdd());
//       //  // Unstable assertion: assertEquals(false, node0.isComma());
//       //  // Unstable assertion: assertEquals(true, node0.mayMutateGlobalStateOrThrow());
//       //  // Unstable assertion: assertEquals(0, node0.getLength());
//       //  // Unstable assertion: assertNull(node0.getSourceFileName());
//       //  // Unstable assertion: assertEquals(false, node0.isBlock());
//       //  // Unstable assertion: assertEquals(false, node0.isDec());
//       //  // Unstable assertion: assertEquals(false, node0.isQuotedString());
//       //  // Unstable assertion: assertEquals(false, node0.isCall());
//       //  // Unstable assertion: assertEquals(false, node0.isContinue());
//       //  // Unstable assertion: assertEquals(false, node0.isLabel());
//       //  // Unstable assertion: assertEquals(false, node0.isGetterDef());
//       //  // Unstable assertion: assertEquals(false, node0.isDefaultCase());
//       //  // Unstable assertion: assertEquals(false, node0.isName());
//       //  // Unstable assertion: assertEquals(false, node0.isObjectLit());
//       //  // Unstable assertion: assertEquals(true, node0.mayMutateArguments());
//       //  // Unstable assertion: assertEquals(false, node0.isDebugger());
//       //  // Unstable assertion: assertEquals(false, node0.isCatch());
//       //  // Unstable assertion: assertEquals(false, node0.isAssign());
//       //  // Unstable assertion: assertEquals(false, node0.isInstanceOf());
//       //  // Unstable assertion: assertEquals(false, node0.isIn());
//       //  // Unstable assertion: assertEquals(false, node0.isDelProp());
//       //  // Unstable assertion: assertEquals(false, node0.isIf());
//       //  // Unstable assertion: assertEquals(false, node0.isHook());
//       //  // Unstable assertion: assertEquals(false, node0.isParamList());
//       //  // Unstable assertion: assertEquals(0, node0.getSideEffectFlags());
//       //  // Unstable assertion: assertEquals(false, node0.isReturn());
//       //  // Unstable assertion: assertEquals(false, node0.isRegExp());
//       //  // Unstable assertion: assertEquals(false, node0.isLocalResultCall());
//       //  // Unstable assertion: assertEquals(301, node0.getType());
//       //  // Unstable assertion: assertEquals(false, node0.isTypeOf());
//       //  // Unstable assertion: assertEquals(0, node0.getChangeTime());
//       //  // Unstable assertion: assertEquals(false, node0.isFunction());
//       //  // Unstable assertion: assertEquals(false, node0.isOptionalArg());
//       //  // Unstable assertion: assertEquals(true, node0.hasChildren());
//       //  // Unstable assertion: assertEquals(false, node0.isCast());
//       //  // Unstable assertion: assertEquals(false, node0.isNull());
//       //  // Unstable assertion: assertEquals(false, node0.isSyntheticBlock());
//       //  // Unstable assertion: assertEquals(false, node0.isVarArgs());
//       //  // Unstable assertion: assertEquals(false, node0.isAnd());
//       //  // Unstable assertion: assertEquals(false, node0.isSetterDef());
//       //  // Unstable assertion: assertEquals(false, node0.isVar());
//       //  // Unstable assertion: assertEquals(false, node0.isDo());
//       //  // Unstable assertion: assertEquals(3, node0.getChildCount());
//       //  // Unstable assertion: assertEquals(false, node0.isBreak());
//       //  // Unstable assertion: assertEquals(false, node0.isScript());
//       //  // Unstable assertion: assertEquals(false, node0.isOnlyModifiesArgumentsCall());
//       //  // Unstable assertion: assertEquals(false, node0.isGetElem());
//       //  // Unstable assertion: assertEquals(false, node0.isLabelName());
//       //  // Unstable assertion: assertEquals(false, node0.isNE());
//       //  // Unstable assertion: assertEquals(false, node0.isNew());
//       //  // Unstable assertion: assertEquals(false, node0.isTry());
//       //  // Unstable assertion: assertEquals(3, node0.getSourcePosition());
//       //  // Unstable assertion: assertEquals(false, node0.isTrue());
//       //  // Unstable assertion: assertEquals(false, node0.isArrayLit());
//       //  // Unstable assertion: assertEquals(false, node0.isOnlyModifiesThisCall());
//       //  // Unstable assertion: assertEquals(false, node0.isSwitch());
//       //  // Unstable assertion: assertEquals(false, node0.isInc());
//       //  // Unstable assertion: assertEquals(false, node0.hasOneChild());
//       //  // Unstable assertion: assertEquals(false, node0.isCase());
//       //  // Unstable assertion: assertEquals(false, node0.isNot());
//       //  // Unstable assertion: assertEquals(false, node0.wasEmptyNode());
//       //  // Unstable assertion: assertEquals(false, node0.isThrow());
//       //  // Unstable assertion: assertEquals(false, node0.isEmpty());
//       //  // Unstable assertion: assertEquals(false, node0.isNoSideEffectsCall());
//       //  // Unstable assertion: assertEquals(0, node0.getLineno());
//       //  // Unstable assertion: assertEquals(false, node0.isVoid());
//       //  // Unstable assertion: assertEquals(false, node0.isExprResult());
//       //  // Unstable assertion: assertEquals(false, node0.isStringKey());
//       //  // Unstable assertion: assertEquals(false, node0.isNumber());
//       //  // Unstable assertion: assertEquals(false, node0.isThis());
//       //  // Unstable assertion: assertEquals(false, node0.isAdd());
//       //  // Unstable assertion: assertEquals(false, node0.isString());
//       //  // Unstable assertion: assertEquals(false, node0.isWhile());
//       //  // Unstable assertion: assertEquals(false, node0.isFalse());
//       //  // Unstable assertion: assertEquals(false, node0.isFor());
//       //  // Unstable assertion: assertEquals(3, node0.getCharno());
//       //  // Unstable assertion: assertEquals(0, set0.size());
//       //  // Unstable assertion: assertEquals(true, set0.isEmpty());
//       //  // Unstable assertion: assertEquals(331, context0.getInstructionObserverThreshold());
//       //  // Unstable assertion: assertEquals(true, context0.isGeneratingDebugChanged());
//       //  // Unstable assertion: assertEquals(false, context0.isGeneratingDebug());
//       //  // Unstable assertion: assertEquals(true, context0.isGeneratingSource());
//       //  // Unstable assertion: assertEquals(0, context0.getLanguageVersion());
//       //  // Unstable assertion: assertEquals(2147483647, context0.getMaximumInterpreterStackDepth());
//       //  // Unstable assertion: assertEquals(false, context0.isSealed());
//       //  // Unstable assertion: assertEquals(0, context0.getOptimizationLevel());
//       //  // Unstable assertion: assertEquals(48, regExpLiteral0.getType());
//       //  // Unstable assertion: assertEquals(331, regExpLiteral0.getLength());
//       //  // Unstable assertion: assertEquals(false, regExpLiteral0.hasChildren());
//       //  // Unstable assertion: assertNull(regExpLiteral0.getValue());
//       //  // Unstable assertion: assertNull(regExpLiteral0.getJsDoc());
//       //  // Unstable assertion: assertNull(regExpLiteral0.getFlags());
//       //  // Unstable assertion: assertEquals(331, regExpLiteral0.getPosition());
//       //  // Unstable assertion: assertEquals(331, regExpLiteral0.getAbsolutePosition());
//       //  // Unstable assertion: assertEquals(0, regExpLiteral0.depth());
//       //  // Unstable assertion: assertEquals(-1, regExpLiteral0.getLineno());
//       //  // Unstable assertion: assertEquals("48", regExpLiteral0.toString());
//       //  // Unstable assertion: assertEquals("", locale0.getVariant());
//       //  // Unstable assertion: assertEquals("", locale0.getLanguage());
//       //  // Unstable assertion: assertEquals("", locale0.getISO3Language());
//       //  // Unstable assertion: assertEquals("", locale0.getCountry());
//       //  // Unstable assertion: assertEquals("", locale0.toString());
//       //  // Unstable assertion: assertEquals("", locale0.getISO3Country());
//       //  // Unstable assertion: assertEquals(true, toolErrorReporter0.isReportingWarnings());
//       //  // Unstable assertion: assertEquals(false, toolErrorReporter0.hasReportedError());
//       //  // Unstable assertion: assertEquals(false, node1.isCast());
//       //  // Unstable assertion: assertEquals(false, node1.isParamList());
//       //  // Unstable assertion: assertEquals(false, node1.isAssignAdd());
//       //  // Unstable assertion: assertEquals(306, node1.getType());
//       //  // Unstable assertion: assertEquals(false, node1.isStringKey());
//       //  // Unstable assertion: assertEquals(false, node1.isString());
//       //  // Unstable assertion: assertEquals(false, node1.isNumber());
//       //  // Unstable assertion: assertEquals(false, node1.isVar());
//       //  // Unstable assertion: assertEquals(false, node1.isNoSideEffectsCall());
//       //  // Unstable assertion: assertEquals(false, node1.isThis());
//       //  // Unstable assertion: assertEquals(false, node1.isReturn());
//       //  // Unstable assertion: assertEquals(false, node1.isHook());
//       //  // Unstable assertion: assertEquals(false, node1.isSyntheticBlock());
//       //  // Unstable assertion: assertEquals(false, node1.isIf());
//       //  // Unstable assertion: assertEquals(0, node1.getLength());
//       //  // Unstable assertion: assertEquals(false, node1.isDec());
//       //  // Unstable assertion: assertEquals(false, node1.isLabel());
//       //  // Unstable assertion: assertEquals(false, node1.isFromExterns());
//       //  // Unstable assertion: assertEquals(false, node1.isWhile());
//       //  // Unstable assertion: assertEquals(331, node1.getLineno());
//       //  // Unstable assertion: assertEquals(false, node1.isContinue());
//       //  // Unstable assertion: assertEquals(0, node1.getSideEffectFlags());
//       //  // Unstable assertion: assertEquals(false, node1.isInc());
//       //  // Unstable assertion: assertEquals(false, node1.isVoid());
//       //  // Unstable assertion: assertEquals(false, node1.isFor());
//       //  // Unstable assertion: assertEquals(false, node1.isAnd());
//       //  // Unstable assertion: assertEquals(1, node1.getChildCount());
//       //  // Unstable assertion: assertEquals(false, node1.isQuotedString());
//       //  // Unstable assertion: assertEquals(false, node1.isObjectLit());
//       //  // Unstable assertion: assertEquals(false, node1.isDebugger());
//       //  // Unstable assertion: assertEquals(0, node1.getChangeTime());
//       //  // Unstable assertion: assertEquals(false, node1.isNE());
//       //  // Unstable assertion: assertEquals(false, node1.isDo());
//       //  // Unstable assertion: assertEquals(false, node1.isLabelName());
//       //  // Unstable assertion: assertEquals(false, node1.isGetterDef());
//       //  // Unstable assertion: assertEquals(true, node1.mayMutateGlobalStateOrThrow());
//       //  // Unstable assertion: assertEquals(333, node1.getCharno());
//       //  // Unstable assertion: assertEquals(false, node1.isWith());
//       //  // Unstable assertion: assertEquals(false, node1.isVarArgs());
//       //  // Unstable assertion: assertNull(node1.getSourceFileName());
//       //  // Unstable assertion: assertEquals(1356109, node1.getSourcePosition());
//       //  // Unstable assertion: assertEquals(false, node1.isBreak());
//       //  // Unstable assertion: assertEquals(true, node1.hasOneChild());
//       //  // Unstable assertion: assertEquals(false, node1.isRegExp());
//       //  // Unstable assertion: assertEquals(false, node1.isNew());
//       //  // Unstable assertion: assertEquals(false, node1.isName());
//       //  // Unstable assertion: assertEquals(false, node1.isBlock());
//       //  // Unstable assertion: assertEquals(false, node1.isCase());
//       //  // Unstable assertion: assertEquals(false, node1.isTry());
//       //  // Unstable assertion: assertEquals(false, node1.isArrayLit());
//       //  // Unstable assertion: assertEquals(false, node1.isGetProp());
//       //  // Unstable assertion: assertEquals(true, node1.hasChildren());
//       //  // Unstable assertion: assertEquals(false, node1.isOptionalArg());
//       //  // Unstable assertion: assertEquals(false, node1.isTrue());
//       //  // Unstable assertion: assertEquals(false, node1.isOr());
//       //  // Unstable assertion: assertEquals(false, node1.wasEmptyNode());
//       //  // Unstable assertion: assertEquals(false, node1.isTypeOf());
//       //  // Unstable assertion: assertEquals(false, node1.isNull());
//       //  // Unstable assertion: assertEquals(false, node1.isFalse());
//       //  // Unstable assertion: assertEquals(false, node1.isAssign());
//       //  // Unstable assertion: assertEquals(false, node1.isComma());
//       //  // Unstable assertion: assertEquals(false, node1.isOnlyModifiesThisCall());
//       //  // Unstable assertion: assertEquals(false, node1.isDelProp());
//       //  // Unstable assertion: assertEquals(false, node1.isInstanceOf());
//       //  // Unstable assertion: assertEquals(false, node1.isNot());
//       //  // Unstable assertion: assertEquals(false, node1.isFunction());
//       //  // Unstable assertion: assertEquals(false, node1.isGetElem());
//       //  // Unstable assertion: assertEquals(false, node1.isIn());
//       //  // Unstable assertion: assertEquals(false, node1.isScript());
//       //  // Unstable assertion: assertEquals(false, node1.isEmpty());
//       //  // Unstable assertion: assertEquals(false, node1.isThrow());
//       //  // Unstable assertion: assertEquals(false, node1.isCatch());
//       //  // Unstable assertion: assertEquals(false, node1.isSetterDef());
//       //  // Unstable assertion: assertEquals(false, node1.hasMoreThanOneChild());
//       //  // Unstable assertion: assertEquals(false, node1.isSwitch());
//       //  // Unstable assertion: assertEquals(false, node1.isLocalResultCall());
//       //  // Unstable assertion: assertEquals(false, node1.isAdd());
//       //  // Unstable assertion: assertEquals(false, node1.isDefaultCase());
//       //  // Unstable assertion: assertEquals(false, node1.isOnlyModifiesArgumentsCall());
//       //  // Unstable assertion: assertEquals(true, node1.mayMutateArguments());
//       //  // Unstable assertion: assertEquals(false, node1.isCall());
//       //  // Unstable assertion: assertEquals(false, node1.isExprResult());
//       //  // Unstable assertion: assertTrue(context0.generateObserverCount);
//       //  // Unstable assertion: assertFalse(node0.equals((Object)node1));
//       //  // Unstable assertion: assertFalse(node1.equals((Object)node0));
//       //  // Unstable assertion: assertNotSame(node0, node1);
//       //  // Unstable assertion: assertNotSame(node1, node0);
//       
//       boolean boolean0 = jsDocInfoParser0.parse();
//       //  // Unstable assertion: assertEquals(false, contextFactory0.hasExplicitGlobal());
//       //  // Unstable assertion: assertEquals(false, contextFactory0.isSealed());
//       //  // Unstable assertion: assertEquals(false, node0.isFromExterns());
//       //  // Unstable assertion: assertEquals(true, node0.hasMoreThanOneChild());
//       //  // Unstable assertion: assertEquals(false, node0.isGetProp());
//       //  // Unstable assertion: assertEquals(false, node0.isOr());
//       //  // Unstable assertion: assertEquals(false, node0.isWith());
//       //  // Unstable assertion: assertEquals(false, node0.isAssignAdd());
//       //  // Unstable assertion: assertEquals(false, node0.isComma());
//       //  // Unstable assertion: assertEquals(true, node0.mayMutateGlobalStateOrThrow());
//       //  // Unstable assertion: assertEquals(0, node0.getLength());
//       //  // Unstable assertion: assertNull(node0.getSourceFileName());
//       //  // Unstable assertion: assertEquals(false, node0.isBlock());
//       //  // Unstable assertion: assertEquals(false, node0.isDec());
//       //  // Unstable assertion: assertEquals(false, node0.isQuotedString());
//       //  // Unstable assertion: assertEquals(false, node0.isCall());
//       //  // Unstable assertion: assertEquals(false, node0.isContinue());
//       //  // Unstable assertion: assertEquals(false, node0.isLabel());
//       //  // Unstable assertion: assertEquals(false, node0.isGetterDef());
//       //  // Unstable assertion: assertEquals(false, node0.isDefaultCase());
//       //  // Unstable assertion: assertEquals(false, node0.isName());
//       //  // Unstable assertion: assertEquals(false, node0.isObjectLit());
//       //  // Unstable assertion: assertEquals(true, node0.mayMutateArguments());
//       //  // Unstable assertion: assertEquals(false, node0.isDebugger());
//       //  // Unstable assertion: assertEquals(false, node0.isCatch());
//       //  // Unstable assertion: assertEquals(false, node0.isAssign());
//       //  // Unstable assertion: assertEquals(false, node0.isInstanceOf());
//       //  // Unstable assertion: assertEquals(false, node0.isIn());
//       //  // Unstable assertion: assertEquals(false, node0.isDelProp());
//       //  // Unstable assertion: assertEquals(false, node0.isIf());
//       //  // Unstable assertion: assertEquals(false, node0.isHook());
//       //  // Unstable assertion: assertEquals(false, node0.isParamList());
//       //  // Unstable assertion: assertEquals(0, node0.getSideEffectFlags());
//       //  // Unstable assertion: assertEquals(false, node0.isReturn());
//       //  // Unstable assertion: assertEquals(false, node0.isRegExp());
//       //  // Unstable assertion: assertEquals(false, node0.isLocalResultCall());
//       //  // Unstable assertion: assertEquals(301, node0.getType());
//       //  // Unstable assertion: assertEquals(false, node0.isTypeOf());
//       //  // Unstable assertion: assertEquals(0, node0.getChangeTime());
//       //  // Unstable assertion: assertEquals(false, node0.isFunction());
//       //  // Unstable assertion: assertEquals(false, node0.isOptionalArg());
//       //  // Unstable assertion: assertEquals(true, node0.hasChildren());
//       //  // Unstable assertion: assertEquals(false, node0.isCast());
//       //  // Unstable assertion: assertEquals(false, node0.isNull());
//       //  // Unstable assertion: assertEquals(false, node0.isSyntheticBlock());
//       //  // Unstable assertion: assertEquals(false, node0.isVarArgs());
//       //  // Unstable assertion: assertEquals(false, node0.isAnd());
//       //  // Unstable assertion: assertEquals(false, node0.isSetterDef());
//       //  // Unstable assertion: assertEquals(false, node0.isVar());
//       //  // Unstable assertion: assertEquals(false, node0.isDo());
//       //  // Unstable assertion: assertEquals(3, node0.getChildCount());
//       //  // Unstable assertion: assertEquals(false, node0.isBreak());
//       //  // Unstable assertion: assertEquals(false, node0.isScript());
//       //  // Unstable assertion: assertEquals(false, node0.isOnlyModifiesArgumentsCall());
//       //  // Unstable assertion: assertEquals(false, node0.isGetElem());
//       //  // Unstable assertion: assertEquals(false, node0.isLabelName());
//       //  // Unstable assertion: assertEquals(false, node0.isNE());
//       //  // Unstable assertion: assertEquals(false, node0.isNew());
//       //  // Unstable assertion: assertEquals(false, node0.isTry());
//       //  // Unstable assertion: assertEquals(3, node0.getSourcePosition());
//       //  // Unstable assertion: assertEquals(false, node0.isTrue());
//       //  // Unstable assertion: assertEquals(false, node0.isArrayLit());
//       //  // Unstable assertion: assertEquals(false, node0.isOnlyModifiesThisCall());
//       //  // Unstable assertion: assertEquals(false, node0.isSwitch());
//       //  // Unstable assertion: assertEquals(false, node0.isInc());
//       //  // Unstable assertion: assertEquals(false, node0.hasOneChild());
//       //  // Unstable assertion: assertEquals(false, node0.isCase());
//       //  // Unstable assertion: assertEquals(false, node0.isNot());
//       //  // Unstable assertion: assertEquals(false, node0.wasEmptyNode());
//       //  // Unstable assertion: assertEquals(false, node0.isThrow());
//       //  // Unstable assertion: assertEquals(false, node0.isEmpty());
//       //  // Unstable assertion: assertEquals(false, node0.isNoSideEffectsCall());
//       //  // Unstable assertion: assertEquals(0, node0.getLineno());
//       //  // Unstable assertion: assertEquals(false, node0.isVoid());
//       //  // Unstable assertion: assertEquals(false, node0.isExprResult());
//       //  // Unstable assertion: assertEquals(false, node0.isStringKey());
//       //  // Unstable assertion: assertEquals(false, node0.isNumber());
//       //  // Unstable assertion: assertEquals(false, node0.isThis());
//       //  // Unstable assertion: assertEquals(false, node0.isAdd());
//       //  // Unstable assertion: assertEquals(false, node0.isString());
//       //  // Unstable assertion: assertEquals(false, node0.isWhile());
//       //  // Unstable assertion: assertEquals(false, node0.isFalse());
//       //  // Unstable assertion: assertEquals(false, node0.isFor());
//       //  // Unstable assertion: assertEquals(3, node0.getCharno());
//       //  // Unstable assertion: assertEquals(0, set0.size());
//       //  // Unstable assertion: assertEquals(true, set0.isEmpty());
//       //  // Unstable assertion: assertEquals(331, context0.getInstructionObserverThreshold());
//       //  // Unstable assertion: assertEquals(true, context0.isGeneratingDebugChanged());
//       //  // Unstable assertion: assertEquals(false, context0.isGeneratingDebug());
//       //  // Unstable assertion: assertEquals(true, context0.isGeneratingSource());
//       //  // Unstable assertion: assertEquals(0, context0.getLanguageVersion());
//       //  // Unstable assertion: assertEquals(2147483647, context0.getMaximumInterpreterStackDepth());
//       //  // Unstable assertion: assertEquals(false, context0.isSealed());
//       //  // Unstable assertion: assertEquals(0, context0.getOptimizationLevel());
//       //  // Unstable assertion: assertEquals(48, regExpLiteral0.getType());
//       //  // Unstable assertion: assertEquals(331, regExpLiteral0.getLength());
//       //  // Unstable assertion: assertEquals(false, regExpLiteral0.hasChildren());
//       //  // Unstable assertion: assertNull(regExpLiteral0.getValue());
//       //  // Unstable assertion: assertNull(regExpLiteral0.getJsDoc());
//       //  // Unstable assertion: assertNull(regExpLiteral0.getFlags());
//       //  // Unstable assertion: assertEquals(331, regExpLiteral0.getPosition());
//       //  // Unstable assertion: assertEquals(331, regExpLiteral0.getAbsolutePosition());
//       //  // Unstable assertion: assertEquals(0, regExpLiteral0.depth());
//       //  // Unstable assertion: assertEquals(-1, regExpLiteral0.getLineno());
//       //  // Unstable assertion: assertEquals("48", regExpLiteral0.toString());
//       //  // Unstable assertion: assertEquals("", locale0.getVariant());
//       //  // Unstable assertion: assertEquals("", locale0.getLanguage());
//       //  // Unstable assertion: assertEquals("", locale0.getISO3Language());
//       //  // Unstable assertion: assertEquals("", locale0.getCountry());
//       //  // Unstable assertion: assertEquals("", locale0.toString());
//       //  // Unstable assertion: assertEquals("", locale0.getISO3Country());
//       //  // Unstable assertion: assertEquals(true, toolErrorReporter0.isReportingWarnings());
//       //  // Unstable assertion: assertEquals(false, toolErrorReporter0.hasReportedError());
//       //  // Unstable assertion: assertTrue(context0.generateObserverCount);
//       //  // Unstable assertion: assertFalse(boolean0);
//       //  // Unstable assertion: assertFalse(node0.equals((Object)node1));
//       //  // Unstable assertion: assertNotSame(node0, node1);
//   }

  @Test
  public void test15()  throws Throwable  {
      String string0 = "[";
      int int0 = 150;
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream(string0, int0, int0);
      assertNotNull(jsDocTokenStream0);
      
      WithStatement withStatement0 = new WithStatement();
      assertNotNull(withStatement0);
      assertEquals(-1, withStatement0.getLp());
      assertEquals(1, withStatement0.getLength());
      assertEquals(-1, withStatement0.getLineno());
      assertEquals(-1, withStatement0.getRp());
      assertEquals(false, withStatement0.hasChildren());
      assertNull(withStatement0.getJsDoc());
      assertEquals(0, withStatement0.depth());
      assertEquals("123", withStatement0.toString());
      assertEquals(-1, withStatement0.getAbsolutePosition());
      assertEquals(-1, withStatement0.getPosition());
      assertEquals(123, withStatement0.getType());
      
      Comment comment0 = withStatement0.getJsDocNode();
      assertNull(comment0);
      assertEquals(-1, withStatement0.getLp());
      assertEquals(1, withStatement0.getLength());
      assertEquals(-1, withStatement0.getLineno());
      assertEquals(-1, withStatement0.getRp());
      assertEquals(false, withStatement0.hasChildren());
      assertNull(withStatement0.getJsDoc());
      assertEquals(0, withStatement0.depth());
      assertEquals("123", withStatement0.toString());
      assertEquals(-1, withStatement0.getAbsolutePosition());
      assertEquals(-1, withStatement0.getPosition());
      assertEquals(123, withStatement0.getType());
      
      Node node0 = null;
      TreeSet<String> treeSet0 = new TreeSet<String>();
      assertNotNull(treeSet0);
      assertEquals("[]", treeSet0.toString());
      
      boolean boolean0 = true;
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5_STRICT;
      Config config0 = new Config(treeSet0, treeSet0, boolean0, config_LanguageMode0, boolean0);
      assertNotNull(config0);
      assertEquals("[]", treeSet0.toString());
      
      MockPrintStream mockPrintStream0 = new MockPrintStream(string0);
      assertNotNull(mockPrintStream0);
      
      ToolErrorReporter toolErrorReporter0 = new ToolErrorReporter(boolean0, (PrintStream) mockPrintStream0);
      assertNotNull(toolErrorReporter0);
      assertEquals(true, toolErrorReporter0.isReportingWarnings());
      assertEquals(false, toolErrorReporter0.hasReportedError());
      
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, comment0, node0, config0, toolErrorReporter0);
      assertNotNull(jsDocInfoParser0);
      assertEquals(-1, withStatement0.getLp());
      assertEquals(1, withStatement0.getLength());
      assertEquals(-1, withStatement0.getLineno());
      assertEquals(-1, withStatement0.getRp());
      assertEquals(false, withStatement0.hasChildren());
      assertNull(withStatement0.getJsDoc());
      assertEquals(0, withStatement0.depth());
      assertEquals("123", withStatement0.toString());
      assertEquals(-1, withStatement0.getAbsolutePosition());
      assertEquals(-1, withStatement0.getPosition());
      assertEquals(123, withStatement0.getType());
      assertEquals(true, toolErrorReporter0.isReportingWarnings());
      assertEquals(false, toolErrorReporter0.hasReportedError());
      assertEquals("[]", treeSet0.toString());
      
      boolean boolean1 = jsDocInfoParser0.parse();
      assertEquals(-1, withStatement0.getLp());
      assertEquals(1, withStatement0.getLength());
      assertEquals(-1, withStatement0.getLineno());
      assertEquals(-1, withStatement0.getRp());
      assertEquals(false, withStatement0.hasChildren());
      assertNull(withStatement0.getJsDoc());
      assertEquals(0, withStatement0.depth());
      assertEquals("123", withStatement0.toString());
      assertEquals(-1, withStatement0.getAbsolutePosition());
      assertEquals(-1, withStatement0.getPosition());
      assertEquals(123, withStatement0.getType());
      assertEquals(true, toolErrorReporter0.isReportingWarnings());
      assertEquals(false, toolErrorReporter0.hasReportedError());
      assertEquals("[]", treeSet0.toString());
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean0 == boolean1);
  }

  @Test
  public void test16()  throws Throwable  {
      String string0 = "\\.B5a%>Seg?TNmwXo";
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream(string0);
      assertNotNull(jsDocTokenStream0);
      
      NewExpression newExpression0 = new NewExpression(jsDocTokenStream0.cursor, jsDocTokenStream0.cursor);
      assertNotNull(newExpression0);
      assertEquals(-1, newExpression0.getLineno());
      assertEquals(-1, newExpression0.getRp());
      assertEquals(false, newExpression0.hasChildren());
      assertEquals(0, newExpression0.getLength());
      assertEquals(0, newExpression0.getPosition());
      assertEquals(0, newExpression0.getAbsolutePosition());
      assertEquals("30", newExpression0.toString());
      assertEquals(0, newExpression0.depth());
      assertNull(newExpression0.getJsDoc());
      assertEquals(-1, newExpression0.getLp());
      assertEquals(30, newExpression0.getType());
      
      Comment comment0 = newExpression0.getJsDocNode();
      assertNull(comment0);
      assertEquals(-1, newExpression0.getLineno());
      assertEquals(-1, newExpression0.getRp());
      assertEquals(false, newExpression0.hasChildren());
      assertEquals(0, newExpression0.getLength());
      assertEquals(0, newExpression0.getPosition());
      assertEquals(0, newExpression0.getAbsolutePosition());
      assertEquals("30", newExpression0.toString());
      assertEquals(0, newExpression0.depth());
      assertNull(newExpression0.getJsDoc());
      assertEquals(-1, newExpression0.getLp());
      assertEquals(30, newExpression0.getType());
      
      Node node0 = null;
      JsDocToken jsDocToken0 = jsDocTokenStream0.getJsDocToken();
      assertEquals("STRING", jsDocToken0.toString());
      assertEquals(4, jsDocToken0.ordinal());
      assertEquals("STRING", jsDocToken0.name());
      
      TreeSet<String> treeSet0 = new TreeSet<String>();
      assertNotNull(treeSet0);
      assertEquals("[]", treeSet0.toString());
      
      boolean boolean0 = true;
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5_STRICT;
      ErrorCollector errorCollector0 = new ErrorCollector();
      assertNotNull(errorCollector0);
      
      Config config0 = new Config(treeSet0, treeSet0, boolean0, config_LanguageMode0, boolean0);
      assertNotNull(config0);
      assertEquals("[]", treeSet0.toString());
      
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, comment0, node0, config0, errorCollector0);
      assertNotNull(jsDocInfoParser0);
      assertEquals(-1, newExpression0.getLineno());
      assertEquals(-1, newExpression0.getRp());
      assertEquals(false, newExpression0.hasChildren());
      assertEquals(0, newExpression0.getLength());
      assertEquals(0, newExpression0.getPosition());
      assertEquals(0, newExpression0.getAbsolutePosition());
      assertEquals("30", newExpression0.toString());
      assertEquals(0, newExpression0.depth());
      assertNull(newExpression0.getJsDoc());
      assertEquals(-1, newExpression0.getLp());
      assertEquals(30, newExpression0.getType());
      assertEquals("[]", treeSet0.toString());
      
      // Undeclared exception!
      try {
        boolean boolean1 = jsDocInfoParser0.parse();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test17()  throws Throwable  {
      String string0 = "() {";
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream(string0);
      assertNotNull(jsDocTokenStream0);
      
      NewExpression newExpression0 = new NewExpression(jsDocTokenStream0.cursor, jsDocTokenStream0.cursor);
      assertNotNull(newExpression0);
      assertEquals(-1, newExpression0.getLp());
      assertEquals(-1, newExpression0.getLineno());
      assertEquals(0, newExpression0.getPosition());
      assertEquals(0, newExpression0.getAbsolutePosition());
      assertEquals(-1, newExpression0.getRp());
      assertEquals(false, newExpression0.hasChildren());
      assertEquals(0, newExpression0.getLength());
      assertEquals("30", newExpression0.toString());
      assertNull(newExpression0.getJsDoc());
      assertEquals(30, newExpression0.getType());
      assertEquals(0, newExpression0.depth());
      
      Comment comment0 = newExpression0.getJsDocNode();
      assertNull(comment0);
      assertEquals(-1, newExpression0.getLp());
      assertEquals(-1, newExpression0.getLineno());
      assertEquals(0, newExpression0.getPosition());
      assertEquals(0, newExpression0.getAbsolutePosition());
      assertEquals(-1, newExpression0.getRp());
      assertEquals(false, newExpression0.hasChildren());
      assertEquals(0, newExpression0.getLength());
      assertEquals("30", newExpression0.toString());
      assertNull(newExpression0.getJsDoc());
      assertEquals(30, newExpression0.getType());
      assertEquals(0, newExpression0.depth());
      
      Node node0 = null;
      TreeSet<String> treeSet0 = new TreeSet<String>();
      assertNotNull(treeSet0);
      assertEquals("[]", treeSet0.toString());
      
      boolean boolean0 = true;
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5_STRICT;
      ErrorCollector errorCollector0 = new ErrorCollector();
      assertNotNull(errorCollector0);
      
      Config config0 = new Config(treeSet0, treeSet0, boolean0, config_LanguageMode0, boolean0);
      assertNotNull(config0);
      assertEquals("[]", treeSet0.toString());
      
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, comment0, node0, config0, errorCollector0);
      assertNotNull(jsDocInfoParser0);
      assertEquals("[]", treeSet0.toString());
      assertEquals(-1, newExpression0.getLp());
      assertEquals(-1, newExpression0.getLineno());
      assertEquals(0, newExpression0.getPosition());
      assertEquals(0, newExpression0.getAbsolutePosition());
      assertEquals(-1, newExpression0.getRp());
      assertEquals(false, newExpression0.hasChildren());
      assertEquals(0, newExpression0.getLength());
      assertEquals("30", newExpression0.toString());
      assertNull(newExpression0.getJsDoc());
      assertEquals(30, newExpression0.getType());
      assertEquals(0, newExpression0.depth());
      
      // Undeclared exception!
      try {
        boolean boolean1 = jsDocInfoParser0.parse();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test18()  throws Throwable  {
      String string0 = "9F|C.?|^wT\"am";
      Node node0 = JsDocInfoParser.parseTypeString(string0);
      //  // Unstable assertion: assertNotNull(node0);
      //  // Unstable assertion: assertEquals(false, node0.isDec());
      //  // Unstable assertion: assertEquals(false, node0.isName());
      //  // Unstable assertion: assertEquals(3, node0.getSourcePosition());
      //  // Unstable assertion: assertEquals(false, node0.isLabelName());
      //  // Unstable assertion: assertEquals(false, node0.isBlock());
      //  // Unstable assertion: assertEquals(false, node0.isGetterDef());
      //  // Unstable assertion: assertEquals(false, node0.isTry());
      //  // Unstable assertion: assertEquals(false, node0.isSetterDef());
      //  // Unstable assertion: assertEquals(false, node0.isParamList());
      //  // Unstable assertion: assertEquals(false, node0.isLocalResultCall());
      //  // Unstable assertion: assertNull(node0.getSourceFileName());
      //  // Unstable assertion: assertEquals(false, node0.isVoid());
      //  // Unstable assertion: assertEquals(false, node0.isOr());
      //  // Unstable assertion: assertEquals(false, node0.isNew());
      //  // Unstable assertion: assertEquals(false, node0.isWith());
      //  // Unstable assertion: assertEquals(false, node0.isOnlyModifiesArgumentsCall());
      //  // Unstable assertion: assertEquals(false, node0.hasOneChild());
      //  // Unstable assertion: assertEquals(false, node0.isComma());
      //  // Unstable assertion: assertEquals(false, node0.isNull());
      //  // Unstable assertion: assertEquals(false, node0.isScript());
      //  // Unstable assertion: assertEquals(0, node0.getLineno());
      //  // Unstable assertion: assertEquals(false, node0.isWhile());
      //  // Unstable assertion: assertEquals(false, node0.isTypeOf());
      //  // Unstable assertion: assertEquals(false, node0.isNumber());
      //  // Unstable assertion: assertEquals(false, node0.isFor());
      //  // Unstable assertion: assertEquals(false, node0.isCast());
      //  // Unstable assertion: assertEquals(false, node0.isCatch());
      //  // Unstable assertion: assertEquals(3, node0.getChildCount());
      //  // Unstable assertion: assertEquals(false, node0.isObjectLit());
      //  // Unstable assertion: assertEquals(false, node0.isOptionalArg());
      //  // Unstable assertion: assertEquals(false, node0.isEmpty());
      //  // Unstable assertion: assertEquals(false, node0.isCall());
      //  // Unstable assertion: assertEquals(false, node0.isVar());
      //  // Unstable assertion: assertEquals(false, node0.isFromExterns());
      //  // Unstable assertion: assertEquals(false, node0.isThrow());
      //  // Unstable assertion: assertEquals(false, node0.isBreak());
      //  // Unstable assertion: assertEquals(0, node0.getSideEffectFlags());
      //  // Unstable assertion: assertEquals(false, node0.isFalse());
      //  // Unstable assertion: assertEquals(false, node0.isNE());
      //  // Unstable assertion: assertEquals(false, node0.isLabel());
      //  // Unstable assertion: assertEquals(false, node0.isVarArgs());
      //  // Unstable assertion: assertEquals(false, node0.isAnd());
      //  // Unstable assertion: assertEquals(false, node0.isIn());
      //  // Unstable assertion: assertEquals(0, node0.getChangeTime());
      //  // Unstable assertion: assertEquals(false, node0.isRegExp());
      //  // Unstable assertion: assertEquals(false, node0.isInc());
      //  // Unstable assertion: assertEquals(false, node0.isContinue());
      //  // Unstable assertion: assertEquals(false, node0.isReturn());
      //  // Unstable assertion: assertEquals(false, node0.isQuotedString());
      //  // Unstable assertion: assertEquals(true, node0.mayMutateGlobalStateOrThrow());
      //  // Unstable assertion: assertEquals(true, node0.hasChildren());
      //  // Unstable assertion: assertEquals(false, node0.isExprResult());
      //  // Unstable assertion: assertEquals(false, node0.isAdd());
      //  // Unstable assertion: assertEquals(false, node0.isIf());
      //  // Unstable assertion: assertEquals(true, node0.mayMutateArguments());
      //  // Unstable assertion: assertEquals(false, node0.isSwitch());
      //  // Unstable assertion: assertEquals(false, node0.isArrayLit());
      //  // Unstable assertion: assertEquals(true, node0.hasMoreThanOneChild());
      //  // Unstable assertion: assertEquals(false, node0.isHook());
      //  // Unstable assertion: assertEquals(false, node0.isDo());
      //  // Unstable assertion: assertEquals(0, node0.getLength());
      //  // Unstable assertion: assertEquals(301, node0.getType());
      //  // Unstable assertion: assertEquals(3, node0.getCharno());
      //  // Unstable assertion: assertEquals(false, node0.wasEmptyNode());
      //  // Unstable assertion: assertEquals(false, node0.isAssign());
      //  // Unstable assertion: assertEquals(false, node0.isFunction());
      //  // Unstable assertion: assertEquals(false, node0.isSyntheticBlock());
      //  // Unstable assertion: assertEquals(false, node0.isDelProp());
      //  // Unstable assertion: assertEquals(false, node0.isNoSideEffectsCall());
      //  // Unstable assertion: assertEquals(false, node0.isInstanceOf());
      //  // Unstable assertion: assertEquals(false, node0.isStringKey());
      //  // Unstable assertion: assertEquals(false, node0.isThis());
      //  // Unstable assertion: assertEquals(false, node0.isTrue());
      //  // Unstable assertion: assertEquals(false, node0.isCase());
      //  // Unstable assertion: assertEquals(false, node0.isOnlyModifiesThisCall());
      //  // Unstable assertion: assertEquals(false, node0.isDefaultCase());
      //  // Unstable assertion: assertEquals(false, node0.isGetElem());
      //  // Unstable assertion: assertEquals(false, node0.isNot());
      //  // Unstable assertion: assertEquals(false, node0.isGetProp());
      //  // Unstable assertion: assertEquals(false, node0.isString());
      //  // Unstable assertion: assertEquals(false, node0.isDebugger());
      //  // Unstable assertion: assertEquals(false, node0.isAssignAdd());
      
      int int0 = 331;
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream(string0, int0, int0);
      //  // Unstable assertion: assertNotNull(jsDocTokenStream0);
      
      ContextFactory contextFactory0 = new ContextFactory();
      //  // Unstable assertion: assertNotNull(contextFactory0);
      //  // Unstable assertion: assertEquals(false, contextFactory0.isSealed());
      //  // Unstable assertion: assertEquals(false, contextFactory0.hasExplicitGlobal());
      
      Context context0 = contextFactory0.enter();
      //  // Unstable assertion: assertNotNull(context0);
      //  // Unstable assertion: assertEquals(0, context0.getLanguageVersion());
      //  // Unstable assertion: assertEquals(331, context0.getInstructionObserverThreshold());
      //  // Unstable assertion: assertEquals(true, context0.isGeneratingSource());
      //  // Unstable assertion: assertEquals(false, context0.isSealed());
      //  // Unstable assertion: assertEquals(0, context0.getOptimizationLevel());
      //  // Unstable assertion: assertEquals(true, context0.isGeneratingDebugChanged());
      //  // Unstable assertion: assertEquals(false, context0.isGeneratingDebug());
      //  // Unstable assertion: assertEquals(2147483647, context0.getMaximumInterpreterStackDepth());
      //  // Unstable assertion: assertEquals(false, contextFactory0.isSealed());
      //  // Unstable assertion: assertEquals(false, contextFactory0.hasExplicitGlobal());
      //  // Unstable assertion: assertTrue(context0.generateObserverCount);
      
      Locale locale0 = Locale.ROOT;
      //  // Unstable assertion: assertNotNull(locale0);
      //  // Unstable assertion: assertEquals("", locale0.toString());
      //  // Unstable assertion: assertEquals("", locale0.getISO3Country());
      //  // Unstable assertion: assertEquals("", locale0.getLanguage());
      //  // Unstable assertion: assertEquals("", locale0.getISO3Language());
      //  // Unstable assertion: assertEquals("", locale0.getVariant());
      //  // Unstable assertion: assertEquals("", locale0.getCountry());
      
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      //  // Unstable assertion: assertNotNull(set0);
      //  // Unstable assertion: assertEquals(0, set0.size());
      //  // Unstable assertion: assertEquals(true, set0.isEmpty());
      //  // Unstable assertion: assertEquals("", locale0.toString());
      //  // Unstable assertion: assertEquals("", locale0.getISO3Country());
      //  // Unstable assertion: assertEquals("", locale0.getLanguage());
      //  // Unstable assertion: assertEquals("", locale0.getISO3Language());
      //  // Unstable assertion: assertEquals("", locale0.getVariant());
      //  // Unstable assertion: assertEquals("", locale0.getCountry());
      
      RegExpLiteral regExpLiteral0 = new RegExpLiteral(int0, int0);
      //  // Unstable assertion: assertNotNull(regExpLiteral0);
      //  // Unstable assertion: assertEquals(0, regExpLiteral0.depth());
      //  // Unstable assertion: assertEquals(331, regExpLiteral0.getAbsolutePosition());
      //  // Unstable assertion: assertEquals(48, regExpLiteral0.getType());
      //  // Unstable assertion: assertNull(regExpLiteral0.getFlags());
      //  // Unstable assertion: assertEquals(331, regExpLiteral0.getPosition());
      //  // Unstable assertion: assertEquals("48", regExpLiteral0.toString());
      //  // Unstable assertion: assertNull(regExpLiteral0.getJsDoc());
      //  // Unstable assertion: assertEquals(false, regExpLiteral0.hasChildren());
      //  // Unstable assertion: assertEquals(-1, regExpLiteral0.getLineno());
      //  // Unstable assertion: assertEquals(331, regExpLiteral0.getLength());
      //  // Unstable assertion: assertNull(regExpLiteral0.getValue());
      
      Comment comment0 = regExpLiteral0.getJsDocNode();
      //  // Unstable assertion: assertNull(comment0);
      //  // Unstable assertion: assertEquals(0, regExpLiteral0.depth());
      //  // Unstable assertion: assertEquals(331, regExpLiteral0.getAbsolutePosition());
      //  // Unstable assertion: assertEquals(48, regExpLiteral0.getType());
      //  // Unstable assertion: assertNull(regExpLiteral0.getFlags());
      //  // Unstable assertion: assertEquals(331, regExpLiteral0.getPosition());
      //  // Unstable assertion: assertEquals("48", regExpLiteral0.toString());
      //  // Unstable assertion: assertNull(regExpLiteral0.getJsDoc());
      //  // Unstable assertion: assertEquals(false, regExpLiteral0.hasChildren());
      //  // Unstable assertion: assertEquals(-1, regExpLiteral0.getLineno());
      //  // Unstable assertion: assertEquals(331, regExpLiteral0.getLength());
      //  // Unstable assertion: assertNull(regExpLiteral0.getValue());
      
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT3;
      Config config0 = new Config(set0, set0, context0.generateObserverCount, config_LanguageMode0, context0.generateObserverCount);
      //  // Unstable assertion: assertNotNull(config0);
      //  // Unstable assertion: assertEquals(0, set0.size());
      //  // Unstable assertion: assertEquals(true, set0.isEmpty());
      //  // Unstable assertion: assertEquals(0, context0.getLanguageVersion());
      //  // Unstable assertion: assertEquals(331, context0.getInstructionObserverThreshold());
      //  // Unstable assertion: assertEquals(true, context0.isGeneratingSource());
      //  // Unstable assertion: assertEquals(false, context0.isSealed());
      //  // Unstable assertion: assertEquals(0, context0.getOptimizationLevel());
      //  // Unstable assertion: assertEquals(true, context0.isGeneratingDebugChanged());
      //  // Unstable assertion: assertEquals(false, context0.isGeneratingDebug());
      //  // Unstable assertion: assertEquals(2147483647, context0.getMaximumInterpreterStackDepth());
      //  // Unstable assertion: assertEquals("", locale0.toString());
      //  // Unstable assertion: assertEquals("", locale0.getISO3Country());
      //  // Unstable assertion: assertEquals("", locale0.getLanguage());
      //  // Unstable assertion: assertEquals("", locale0.getISO3Language());
      //  // Unstable assertion: assertEquals("", locale0.getVariant());
      //  // Unstable assertion: assertEquals("", locale0.getCountry());
      //  // Unstable assertion: assertEquals(false, contextFactory0.isSealed());
      //  // Unstable assertion: assertEquals(false, contextFactory0.hasExplicitGlobal());
      //  // Unstable assertion: assertTrue(context0.generateObserverCount);
      
      ErrorReporter errorReporter0 = null;
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, comment0, node0, config0, errorReporter0);
      //  // Unstable assertion: assertNotNull(jsDocInfoParser0);
      //  // Unstable assertion: assertEquals(0, regExpLiteral0.depth());
      //  // Unstable assertion: assertEquals(331, regExpLiteral0.getAbsolutePosition());
      //  // Unstable assertion: assertEquals(48, regExpLiteral0.getType());
      //  // Unstable assertion: assertNull(regExpLiteral0.getFlags());
      //  // Unstable assertion: assertEquals(331, regExpLiteral0.getPosition());
      //  // Unstable assertion: assertEquals("48", regExpLiteral0.toString());
      //  // Unstable assertion: assertNull(regExpLiteral0.getJsDoc());
      //  // Unstable assertion: assertEquals(false, regExpLiteral0.hasChildren());
      //  // Unstable assertion: assertEquals(-1, regExpLiteral0.getLineno());
      //  // Unstable assertion: assertEquals(331, regExpLiteral0.getLength());
      //  // Unstable assertion: assertNull(regExpLiteral0.getValue());
      //  // Unstable assertion: assertEquals(0, set0.size());
      //  // Unstable assertion: assertEquals(true, set0.isEmpty());
      //  // Unstable assertion: assertEquals(0, context0.getLanguageVersion());
      //  // Unstable assertion: assertEquals(331, context0.getInstructionObserverThreshold());
      //  // Unstable assertion: assertEquals(true, context0.isGeneratingSource());
      //  // Unstable assertion: assertEquals(false, context0.isSealed());
      //  // Unstable assertion: assertEquals(0, context0.getOptimizationLevel());
      //  // Unstable assertion: assertEquals(true, context0.isGeneratingDebugChanged());
      //  // Unstable assertion: assertEquals(false, context0.isGeneratingDebug());
      //  // Unstable assertion: assertEquals(2147483647, context0.getMaximumInterpreterStackDepth());
      //  // Unstable assertion: assertEquals(false, node0.isDec());
      //  // Unstable assertion: assertEquals(false, node0.isName());
      //  // Unstable assertion: assertEquals(3, node0.getSourcePosition());
      //  // Unstable assertion: assertEquals(false, node0.isLabelName());
      //  // Unstable assertion: assertEquals(false, node0.isBlock());
      //  // Unstable assertion: assertEquals(false, node0.isGetterDef());
      //  // Unstable assertion: assertEquals(false, node0.isTry());
      //  // Unstable assertion: assertEquals(false, node0.isSetterDef());
      //  // Unstable assertion: assertEquals(false, node0.isParamList());
      //  // Unstable assertion: assertEquals(false, node0.isLocalResultCall());
      //  // Unstable assertion: assertNull(node0.getSourceFileName());
      //  // Unstable assertion: assertEquals(false, node0.isVoid());
      //  // Unstable assertion: assertEquals(false, node0.isOr());
      //  // Unstable assertion: assertEquals(false, node0.isNew());
      //  // Unstable assertion: assertEquals(false, node0.isWith());
      //  // Unstable assertion: assertEquals(false, node0.isOnlyModifiesArgumentsCall());
      //  // Unstable assertion: assertEquals(false, node0.hasOneChild());
      //  // Unstable assertion: assertEquals(false, node0.isComma());
      //  // Unstable assertion: assertEquals(false, node0.isNull());
      //  // Unstable assertion: assertEquals(false, node0.isScript());
      //  // Unstable assertion: assertEquals(0, node0.getLineno());
      //  // Unstable assertion: assertEquals(false, node0.isWhile());
      //  // Unstable assertion: assertEquals(false, node0.isTypeOf());
      //  // Unstable assertion: assertEquals(false, node0.isNumber());
      //  // Unstable assertion: assertEquals(false, node0.isFor());
      //  // Unstable assertion: assertEquals(false, node0.isCast());
      //  // Unstable assertion: assertEquals(false, node0.isCatch());
      //  // Unstable assertion: assertEquals(3, node0.getChildCount());
      //  // Unstable assertion: assertEquals(false, node0.isObjectLit());
      //  // Unstable assertion: assertEquals(false, node0.isOptionalArg());
      //  // Unstable assertion: assertEquals(false, node0.isEmpty());
      //  // Unstable assertion: assertEquals(false, node0.isCall());
      //  // Unstable assertion: assertEquals(false, node0.isVar());
      //  // Unstable assertion: assertEquals(false, node0.isFromExterns());
      //  // Unstable assertion: assertEquals(false, node0.isThrow());
      //  // Unstable assertion: assertEquals(false, node0.isBreak());
      //  // Unstable assertion: assertEquals(0, node0.getSideEffectFlags());
      //  // Unstable assertion: assertEquals(false, node0.isFalse());
      //  // Unstable assertion: assertEquals(false, node0.isNE());
      //  // Unstable assertion: assertEquals(false, node0.isLabel());
      //  // Unstable assertion: assertEquals(false, node0.isVarArgs());
      //  // Unstable assertion: assertEquals(false, node0.isAnd());
      //  // Unstable assertion: assertEquals(false, node0.isIn());
      //  // Unstable assertion: assertEquals(0, node0.getChangeTime());
      //  // Unstable assertion: assertEquals(false, node0.isRegExp());
      //  // Unstable assertion: assertEquals(false, node0.isInc());
      //  // Unstable assertion: assertEquals(false, node0.isContinue());
      //  // Unstable assertion: assertEquals(false, node0.isReturn());
      //  // Unstable assertion: assertEquals(false, node0.isQuotedString());
      //  // Unstable assertion: assertEquals(true, node0.mayMutateGlobalStateOrThrow());
      //  // Unstable assertion: assertEquals(true, node0.hasChildren());
      //  // Unstable assertion: assertEquals(false, node0.isExprResult());
      //  // Unstable assertion: assertEquals(false, node0.isAdd());
      //  // Unstable assertion: assertEquals(false, node0.isIf());
      //  // Unstable assertion: assertEquals(true, node0.mayMutateArguments());
      //  // Unstable assertion: assertEquals(false, node0.isSwitch());
      //  // Unstable assertion: assertEquals(false, node0.isArrayLit());
      //  // Unstable assertion: assertEquals(true, node0.hasMoreThanOneChild());
      //  // Unstable assertion: assertEquals(false, node0.isHook());
      //  // Unstable assertion: assertEquals(false, node0.isDo());
      //  // Unstable assertion: assertEquals(0, node0.getLength());
      //  // Unstable assertion: assertEquals(301, node0.getType());
      //  // Unstable assertion: assertEquals(3, node0.getCharno());
      //  // Unstable assertion: assertEquals(false, node0.wasEmptyNode());
      //  // Unstable assertion: assertEquals(false, node0.isAssign());
      //  // Unstable assertion: assertEquals(false, node0.isFunction());
      //  // Unstable assertion: assertEquals(false, node0.isSyntheticBlock());
      //  // Unstable assertion: assertEquals(false, node0.isDelProp());
      //  // Unstable assertion: assertEquals(false, node0.isNoSideEffectsCall());
      //  // Unstable assertion: assertEquals(false, node0.isInstanceOf());
      //  // Unstable assertion: assertEquals(false, node0.isStringKey());
      //  // Unstable assertion: assertEquals(false, node0.isThis());
      //  // Unstable assertion: assertEquals(false, node0.isTrue());
      //  // Unstable assertion: assertEquals(false, node0.isCase());
      //  // Unstable assertion: assertEquals(false, node0.isOnlyModifiesThisCall());
      //  // Unstable assertion: assertEquals(false, node0.isDefaultCase());
      //  // Unstable assertion: assertEquals(false, node0.isGetElem());
      //  // Unstable assertion: assertEquals(false, node0.isNot());
      //  // Unstable assertion: assertEquals(false, node0.isGetProp());
      //  // Unstable assertion: assertEquals(false, node0.isString());
      //  // Unstable assertion: assertEquals(false, node0.isDebugger());
      //  // Unstable assertion: assertEquals(false, node0.isAssignAdd());
      //  // Unstable assertion: assertEquals("", locale0.toString());
      //  // Unstable assertion: assertEquals("", locale0.getISO3Country());
      //  // Unstable assertion: assertEquals("", locale0.getLanguage());
      //  // Unstable assertion: assertEquals("", locale0.getISO3Language());
      //  // Unstable assertion: assertEquals("", locale0.getVariant());
      //  // Unstable assertion: assertEquals("", locale0.getCountry());
      //  // Unstable assertion: assertEquals(false, contextFactory0.isSealed());
      //  // Unstable assertion: assertEquals(false, contextFactory0.hasExplicitGlobal());
      //  // Unstable assertion: assertTrue(context0.generateObserverCount);
      
      JsDocToken jsDocToken0 = JsDocToken.LC;
      // Undeclared exception!
      try {
        Node node1 = jsDocInfoParser0.parseAndRecordTypeNode(jsDocToken0);
       //  fail("Expecting exception: NullPointerException");
       // Unstable assertion
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test19()  throws Throwable  {
      String string0 = "*3B57y%>+giTmwXC";
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream(string0);
      assertNotNull(jsDocTokenStream0);
      
      NewExpression newExpression0 = new NewExpression(jsDocTokenStream0.cursor, jsDocTokenStream0.cursor);
      assertNotNull(newExpression0);
      assertEquals(-1, newExpression0.getLineno());
      assertNull(newExpression0.getJsDoc());
      assertEquals(0, newExpression0.getLength());
      assertEquals(false, newExpression0.hasChildren());
      assertEquals(30, newExpression0.getType());
      assertEquals("30", newExpression0.toString());
      assertEquals(0, newExpression0.getAbsolutePosition());
      assertEquals(-1, newExpression0.getRp());
      assertEquals(-1, newExpression0.getLp());
      assertEquals(0, newExpression0.depth());
      assertEquals(0, newExpression0.getPosition());
      
      Comment comment0 = newExpression0.getJsDocNode();
      assertNull(comment0);
      assertEquals(-1, newExpression0.getLineno());
      assertNull(newExpression0.getJsDoc());
      assertEquals(0, newExpression0.getLength());
      assertEquals(false, newExpression0.hasChildren());
      assertEquals(30, newExpression0.getType());
      assertEquals("30", newExpression0.toString());
      assertEquals(0, newExpression0.getAbsolutePosition());
      assertEquals(-1, newExpression0.getRp());
      assertEquals(-1, newExpression0.getLp());
      assertEquals(0, newExpression0.depth());
      assertEquals(0, newExpression0.getPosition());
      
      Node node0 = null;
      TreeSet<String> treeSet0 = new TreeSet<String>();
      assertNotNull(treeSet0);
      assertEquals("[]", treeSet0.toString());
      
      boolean boolean0 = false;
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5_STRICT;
      ErrorCollector errorCollector0 = new ErrorCollector();
      assertNotNull(errorCollector0);
      
      Config config0 = new Config(treeSet0, treeSet0, boolean0, config_LanguageMode0, boolean0);
      assertNotNull(config0);
      assertEquals("[]", treeSet0.toString());
      
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, comment0, node0, config0, errorCollector0);
      assertNotNull(jsDocInfoParser0);
      assertEquals("[]", treeSet0.toString());
      assertEquals(-1, newExpression0.getLineno());
      assertNull(newExpression0.getJsDoc());
      assertEquals(0, newExpression0.getLength());
      assertEquals(false, newExpression0.hasChildren());
      assertEquals(30, newExpression0.getType());
      assertEquals("30", newExpression0.toString());
      assertEquals(0, newExpression0.getAbsolutePosition());
      assertEquals(-1, newExpression0.getRp());
      assertEquals(-1, newExpression0.getLp());
      assertEquals(0, newExpression0.depth());
      assertEquals(0, newExpression0.getPosition());
      
      // Undeclared exception!
      try {
        boolean boolean1 = jsDocInfoParser0.parse();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test20()  throws Throwable  {
      String string0 = "qFOHc";
      Node node0 = JsDocInfoParser.parseTypeString(string0);
      assertNotNull(node0);
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isParamList());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isComma());
      assertEquals(40, node0.getType());
      assertEquals(false, node0.isScript());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isInc());
      assertEquals(0, node0.getSourcePosition());
      assertEquals(0, node0.getCharno());
      assertEquals(0, node0.getChangeTime());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isIn());
      assertEquals(true, node0.isString());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isSwitch());
      assertNull(node0.getSourceFileName());
      assertEquals(5, node0.getLength());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isStringKey());
      assertEquals(true, node0.mayMutateGlobalStateOrThrow());
      assertEquals(false, node0.isCast());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isVar());
      assertEquals(true, node0.mayMutateArguments());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isCatch());
      assertEquals(0, node0.getLineno());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isOnlyModifiesArgumentsCall());
      assertEquals(false, node0.isDo());
      assertEquals(0, node0.getSideEffectFlags());
      
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream(string0);
      assertNotNull(jsDocTokenStream0);
      
      int int0 = (-400);
      XmlPropRef xmlPropRef0 = new XmlPropRef(int0);
      assertNotNull(xmlPropRef0);
      assertEquals(-400, xmlPropRef0.getPosition());
      assertEquals(false, xmlPropRef0.isAttributeAccess());
      assertEquals(79, xmlPropRef0.getType());
      assertEquals(false, xmlPropRef0.hasChildren());
      assertEquals(-1, xmlPropRef0.getColonPos());
      assertEquals("79", xmlPropRef0.toString());
      assertEquals(-1, xmlPropRef0.getAtPos());
      assertEquals(-1, xmlPropRef0.getLineno());
      assertEquals(0, xmlPropRef0.depth());
      assertEquals(-400, xmlPropRef0.getAbsolutePosition());
      assertNull(xmlPropRef0.getJsDoc());
      assertEquals(1, xmlPropRef0.getLength());
      
      Comment comment0 = xmlPropRef0.getJsDocNode();
      assertNull(comment0);
      assertEquals(-400, xmlPropRef0.getPosition());
      assertEquals(false, xmlPropRef0.isAttributeAccess());
      assertEquals(79, xmlPropRef0.getType());
      assertEquals(false, xmlPropRef0.hasChildren());
      assertEquals(-1, xmlPropRef0.getColonPos());
      assertEquals("79", xmlPropRef0.toString());
      assertEquals(-1, xmlPropRef0.getAtPos());
      assertEquals(-1, xmlPropRef0.getLineno());
      assertEquals(0, xmlPropRef0.depth());
      assertEquals(-400, xmlPropRef0.getAbsolutePosition());
      assertNull(xmlPropRef0.getJsDoc());
      assertEquals(1, xmlPropRef0.getLength());
      
      boolean boolean0 = true;
      Charset charset0 = Charset.defaultCharset();
      assertNotNull(charset0);
      assertEquals(true, charset0.isRegistered());
      assertEquals("UTF-8", charset0.name());
      assertEquals("UTF-8", charset0.toString());
      assertEquals("UTF-8", charset0.displayName());
      assertEquals(true, charset0.canEncode());
      
      Set<String> set0 = charset0.aliases();
      assertNotNull(set0);
      assertEquals(2, set0.size());
      assertEquals(false, set0.isEmpty());
      assertEquals(true, charset0.isRegistered());
      assertEquals("UTF-8", charset0.name());
      assertEquals("UTF-8", charset0.toString());
      assertEquals("UTF-8", charset0.displayName());
      assertEquals(true, charset0.canEncode());
      
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5_STRICT;
      boolean boolean1 = node0.isAssignAdd();
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isParamList());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isComma());
      assertEquals(40, node0.getType());
      assertEquals(false, node0.isScript());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isInc());
      assertEquals(0, node0.getSourcePosition());
      assertEquals(0, node0.getCharno());
      assertEquals(0, node0.getChangeTime());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isIn());
      assertEquals(true, node0.isString());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isSwitch());
      assertNull(node0.getSourceFileName());
      assertEquals(5, node0.getLength());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isStringKey());
      assertEquals(true, node0.mayMutateGlobalStateOrThrow());
      assertEquals(false, node0.isCast());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isVar());
      assertEquals(true, node0.mayMutateArguments());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isCatch());
      assertEquals(0, node0.getLineno());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isOnlyModifiesArgumentsCall());
      assertEquals(false, node0.isDo());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      Config config0 = new Config(set0, set0, boolean0, config_LanguageMode0, boolean1);
      assertNotNull(config0);
      assertEquals(2, set0.size());
      assertEquals(false, set0.isEmpty());
      assertEquals(true, charset0.isRegistered());
      assertEquals("UTF-8", charset0.name());
      assertEquals("UTF-8", charset0.toString());
      assertEquals("UTF-8", charset0.displayName());
      assertEquals(true, charset0.canEncode());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isParamList());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isComma());
      assertEquals(40, node0.getType());
      assertEquals(false, node0.isScript());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isInc());
      assertEquals(0, node0.getSourcePosition());
      assertEquals(0, node0.getCharno());
      assertEquals(0, node0.getChangeTime());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isIn());
      assertEquals(true, node0.isString());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isSwitch());
      assertNull(node0.getSourceFileName());
      assertEquals(5, node0.getLength());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isStringKey());
      assertEquals(true, node0.mayMutateGlobalStateOrThrow());
      assertEquals(false, node0.isCast());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isVar());
      assertEquals(true, node0.mayMutateArguments());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isCatch());
      assertEquals(0, node0.getLineno());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isOnlyModifiesArgumentsCall());
      assertEquals(false, node0.isDo());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(boolean0 == boolean1);
      assertFalse(boolean1 == boolean0);
      
      Context context0 = new Context();
      assertNotNull(context0);
      assertEquals(2147483647, context0.getMaximumInterpreterStackDepth());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertEquals(false, context0.isGeneratingDebug());
      assertEquals(0, context0.getLanguageVersion());
      assertEquals(0, context0.getOptimizationLevel());
      assertEquals(true, context0.isGeneratingSource());
      assertEquals(false, context0.isSealed());
      assertEquals(false, context0.isGeneratingDebugChanged());
      assertFalse(context0.generateObserverCount);
      
      ToolErrorReporter toolErrorReporter0 = new ToolErrorReporter(context0.generateObserverCount);
      assertNotNull(toolErrorReporter0);
      assertEquals(false, toolErrorReporter0.hasReportedError());
      assertEquals(false, toolErrorReporter0.isReportingWarnings());
      assertEquals(2147483647, context0.getMaximumInterpreterStackDepth());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertEquals(false, context0.isGeneratingDebug());
      assertEquals(0, context0.getLanguageVersion());
      assertEquals(0, context0.getOptimizationLevel());
      assertEquals(true, context0.isGeneratingSource());
      assertEquals(false, context0.isSealed());
      assertEquals(false, context0.isGeneratingDebugChanged());
      assertFalse(context0.generateObserverCount);
      
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, comment0, node0, config0, toolErrorReporter0);
      assertNotNull(jsDocInfoParser0);
      assertEquals(-400, xmlPropRef0.getPosition());
      assertEquals(false, xmlPropRef0.isAttributeAccess());
      assertEquals(79, xmlPropRef0.getType());
      assertEquals(false, xmlPropRef0.hasChildren());
      assertEquals(-1, xmlPropRef0.getColonPos());
      assertEquals("79", xmlPropRef0.toString());
      assertEquals(-1, xmlPropRef0.getAtPos());
      assertEquals(-1, xmlPropRef0.getLineno());
      assertEquals(0, xmlPropRef0.depth());
      assertEquals(-400, xmlPropRef0.getAbsolutePosition());
      assertNull(xmlPropRef0.getJsDoc());
      assertEquals(1, xmlPropRef0.getLength());
      assertEquals(false, toolErrorReporter0.hasReportedError());
      assertEquals(false, toolErrorReporter0.isReportingWarnings());
      assertEquals(2, set0.size());
      assertEquals(false, set0.isEmpty());
      assertEquals(2147483647, context0.getMaximumInterpreterStackDepth());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertEquals(false, context0.isGeneratingDebug());
      assertEquals(0, context0.getLanguageVersion());
      assertEquals(0, context0.getOptimizationLevel());
      assertEquals(true, context0.isGeneratingSource());
      assertEquals(false, context0.isSealed());
      assertEquals(false, context0.isGeneratingDebugChanged());
      assertEquals(true, charset0.isRegistered());
      assertEquals("UTF-8", charset0.name());
      assertEquals("UTF-8", charset0.toString());
      assertEquals("UTF-8", charset0.displayName());
      assertEquals(true, charset0.canEncode());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isParamList());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isComma());
      assertEquals(40, node0.getType());
      assertEquals(false, node0.isScript());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isInc());
      assertEquals(0, node0.getSourcePosition());
      assertEquals(0, node0.getCharno());
      assertEquals(0, node0.getChangeTime());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isIn());
      assertEquals(true, node0.isString());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isSwitch());
      assertNull(node0.getSourceFileName());
      assertEquals(5, node0.getLength());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isStringKey());
      assertEquals(true, node0.mayMutateGlobalStateOrThrow());
      assertEquals(false, node0.isCast());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isVar());
      assertEquals(true, node0.mayMutateArguments());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isCatch());
      assertEquals(0, node0.getLineno());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isOnlyModifiesArgumentsCall());
      assertEquals(false, node0.isDo());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(context0.generateObserverCount);
      assertFalse(boolean0 == boolean1);
      assertFalse(boolean1 == boolean0);
      
      JsDocToken jsDocToken0 = JsDocToken.ANNOTATION;
      Node node1 = jsDocInfoParser0.parseAndRecordTypeNode(jsDocToken0);
      assertNull(node1);
      assertEquals(-400, xmlPropRef0.getPosition());
      assertEquals(false, xmlPropRef0.isAttributeAccess());
      assertEquals(79, xmlPropRef0.getType());
      assertEquals(false, xmlPropRef0.hasChildren());
      assertEquals(-1, xmlPropRef0.getColonPos());
      assertEquals("79", xmlPropRef0.toString());
      assertEquals(-1, xmlPropRef0.getAtPos());
      assertEquals(-1, xmlPropRef0.getLineno());
      assertEquals(0, xmlPropRef0.depth());
      assertEquals(-400, xmlPropRef0.getAbsolutePosition());
      assertNull(xmlPropRef0.getJsDoc());
      assertEquals(1, xmlPropRef0.getLength());
      assertEquals(false, toolErrorReporter0.hasReportedError());
      assertEquals(false, toolErrorReporter0.isReportingWarnings());
      assertEquals(2, set0.size());
      assertEquals(false, set0.isEmpty());
      assertEquals(2147483647, context0.getMaximumInterpreterStackDepth());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertEquals(false, context0.isGeneratingDebug());
      assertEquals(0, context0.getLanguageVersion());
      assertEquals(0, context0.getOptimizationLevel());
      assertEquals(true, context0.isGeneratingSource());
      assertEquals(false, context0.isSealed());
      assertEquals(false, context0.isGeneratingDebugChanged());
      assertEquals(true, charset0.isRegistered());
      assertEquals("UTF-8", charset0.name());
      assertEquals("UTF-8", charset0.toString());
      assertEquals("UTF-8", charset0.displayName());
      assertEquals(true, charset0.canEncode());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isParamList());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isComma());
      assertEquals(40, node0.getType());
      assertEquals(false, node0.isScript());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isInc());
      assertEquals(0, node0.getSourcePosition());
      assertEquals(0, node0.getCharno());
      assertEquals(0, node0.getChangeTime());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isIn());
      assertEquals(true, node0.isString());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isSwitch());
      assertNull(node0.getSourceFileName());
      assertEquals(5, node0.getLength());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isStringKey());
      assertEquals(true, node0.mayMutateGlobalStateOrThrow());
      assertEquals(false, node0.isCast());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isVar());
      assertEquals(true, node0.mayMutateArguments());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isCatch());
      assertEquals(0, node0.getLineno());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isOnlyModifiesArgumentsCall());
      assertEquals(false, node0.isDo());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(context0.generateObserverCount);
      assertFalse(boolean0 == boolean1);
      assertFalse(boolean1 == boolean0);
      
      boolean boolean2 = jsDocInfoParser0.parse();
      assertEquals(-400, xmlPropRef0.getPosition());
      assertEquals(false, xmlPropRef0.isAttributeAccess());
      assertEquals(79, xmlPropRef0.getType());
      assertEquals(false, xmlPropRef0.hasChildren());
      assertEquals(-1, xmlPropRef0.getColonPos());
      assertEquals("79", xmlPropRef0.toString());
      assertEquals(-1, xmlPropRef0.getAtPos());
      assertEquals(-1, xmlPropRef0.getLineno());
      assertEquals(0, xmlPropRef0.depth());
      assertEquals(-400, xmlPropRef0.getAbsolutePosition());
      assertNull(xmlPropRef0.getJsDoc());
      assertEquals(1, xmlPropRef0.getLength());
      assertEquals(false, toolErrorReporter0.hasReportedError());
      assertEquals(false, toolErrorReporter0.isReportingWarnings());
      assertEquals(2, set0.size());
      assertEquals(false, set0.isEmpty());
      assertEquals(2147483647, context0.getMaximumInterpreterStackDepth());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertEquals(false, context0.isGeneratingDebug());
      assertEquals(0, context0.getLanguageVersion());
      assertEquals(0, context0.getOptimizationLevel());
      assertEquals(true, context0.isGeneratingSource());
      assertEquals(false, context0.isSealed());
      assertEquals(false, context0.isGeneratingDebugChanged());
      assertEquals(true, charset0.isRegistered());
      assertEquals("UTF-8", charset0.name());
      assertEquals("UTF-8", charset0.toString());
      assertEquals("UTF-8", charset0.displayName());
      assertEquals(true, charset0.canEncode());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isParamList());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isComma());
      assertEquals(40, node0.getType());
      assertEquals(false, node0.isScript());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isInc());
      assertEquals(0, node0.getSourcePosition());
      assertEquals(0, node0.getCharno());
      assertEquals(0, node0.getChangeTime());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isIn());
      assertEquals(true, node0.isString());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isSwitch());
      assertNull(node0.getSourceFileName());
      assertEquals(5, node0.getLength());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isStringKey());
      assertEquals(true, node0.mayMutateGlobalStateOrThrow());
      assertEquals(false, node0.isCast());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isVar());
      assertEquals(true, node0.mayMutateArguments());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isCatch());
      assertEquals(0, node0.getLineno());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isOnlyModifiesArgumentsCall());
      assertEquals(false, node0.isDo());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(context0.generateObserverCount);
      assertFalse(boolean2);
      assertFalse(boolean0 == boolean1);
      assertFalse(boolean0 == boolean2);
      assertTrue(boolean1 == boolean2);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
  }

  @Test
  public void test21()  throws Throwable  {
      String string0 = "qFOHc";
      Node node0 = JsDocInfoParser.parseTypeString(string0);
      assertNotNull(node0);
      assertEquals(false, node0.isOnlyModifiesArgumentsCall());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(40, node0.getType());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isTypeOf());
      assertEquals(0, node0.getSourcePosition());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isDelProp());
      assertEquals(true, node0.mayMutateArguments());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isDebugger());
      assertEquals(true, node0.isString());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(0, node0.getChangeTime());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isTrue());
      assertEquals(0, node0.getCharno());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isScript());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isStringKey());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isComma());
      assertEquals(0, node0.getLineno());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isGetterDef());
      assertEquals(5, node0.getLength());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isParamList());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isExprResult());
      assertEquals(true, node0.mayMutateGlobalStateOrThrow());
      assertEquals(false, node0.isObjectLit());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isCast());
      assertEquals(false, node0.isNull());
      
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream(string0);
      assertNotNull(jsDocTokenStream0);
      
      int int0 = (-400);
      XmlPropRef xmlPropRef0 = new XmlPropRef(int0);
      assertNotNull(xmlPropRef0);
      assertEquals(0, xmlPropRef0.depth());
      assertEquals(-1, xmlPropRef0.getLineno());
      assertEquals(-400, xmlPropRef0.getPosition());
      assertEquals(-1, xmlPropRef0.getColonPos());
      assertEquals(false, xmlPropRef0.hasChildren());
      assertEquals(-400, xmlPropRef0.getAbsolutePosition());
      assertEquals("79", xmlPropRef0.toString());
      assertEquals(-1, xmlPropRef0.getAtPos());
      assertNull(xmlPropRef0.getJsDoc());
      assertEquals(79, xmlPropRef0.getType());
      assertEquals(false, xmlPropRef0.isAttributeAccess());
      assertEquals(1, xmlPropRef0.getLength());
      
      Comment comment0 = xmlPropRef0.getJsDocNode();
      assertNull(comment0);
      assertEquals(0, xmlPropRef0.depth());
      assertEquals(-1, xmlPropRef0.getLineno());
      assertEquals(-400, xmlPropRef0.getPosition());
      assertEquals(-1, xmlPropRef0.getColonPos());
      assertEquals(false, xmlPropRef0.hasChildren());
      assertEquals(-400, xmlPropRef0.getAbsolutePosition());
      assertEquals("79", xmlPropRef0.toString());
      assertEquals(-1, xmlPropRef0.getAtPos());
      assertNull(xmlPropRef0.getJsDoc());
      assertEquals(79, xmlPropRef0.getType());
      assertEquals(false, xmlPropRef0.isAttributeAccess());
      assertEquals(1, xmlPropRef0.getLength());
      
      boolean boolean0 = true;
      Charset charset0 = Charset.defaultCharset();
      assertNotNull(charset0);
      assertEquals("UTF-8", charset0.displayName());
      assertEquals("UTF-8", charset0.toString());
      assertEquals(true, charset0.isRegistered());
      assertEquals("UTF-8", charset0.name());
      assertEquals(true, charset0.canEncode());
      
      Set<String> set0 = charset0.aliases();
      assertNotNull(set0);
      assertEquals("UTF-8", charset0.displayName());
      assertEquals("UTF-8", charset0.toString());
      assertEquals(true, charset0.isRegistered());
      assertEquals("UTF-8", charset0.name());
      assertEquals(true, charset0.canEncode());
      assertEquals(2, set0.size());
      assertEquals(false, set0.isEmpty());
      
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5_STRICT;
      boolean boolean1 = node0.isAssignAdd();
      assertEquals(false, node0.isOnlyModifiesArgumentsCall());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(40, node0.getType());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isTypeOf());
      assertEquals(0, node0.getSourcePosition());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isDelProp());
      assertEquals(true, node0.mayMutateArguments());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isDebugger());
      assertEquals(true, node0.isString());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(0, node0.getChangeTime());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isTrue());
      assertEquals(0, node0.getCharno());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isScript());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isStringKey());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isComma());
      assertEquals(0, node0.getLineno());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isGetterDef());
      assertEquals(5, node0.getLength());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isParamList());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isExprResult());
      assertEquals(true, node0.mayMutateGlobalStateOrThrow());
      assertEquals(false, node0.isObjectLit());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isCast());
      assertEquals(false, node0.isNull());
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      Config config0 = new Config(set0, set0, boolean0, config_LanguageMode0, boolean1);
      assertNotNull(config0);
      assertEquals("UTF-8", charset0.displayName());
      assertEquals("UTF-8", charset0.toString());
      assertEquals(true, charset0.isRegistered());
      assertEquals("UTF-8", charset0.name());
      assertEquals(true, charset0.canEncode());
      assertEquals(2, set0.size());
      assertEquals(false, set0.isEmpty());
      assertEquals(false, node0.isOnlyModifiesArgumentsCall());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(40, node0.getType());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isTypeOf());
      assertEquals(0, node0.getSourcePosition());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isDelProp());
      assertEquals(true, node0.mayMutateArguments());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isDebugger());
      assertEquals(true, node0.isString());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(0, node0.getChangeTime());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isTrue());
      assertEquals(0, node0.getCharno());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isScript());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isStringKey());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isComma());
      assertEquals(0, node0.getLineno());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isGetterDef());
      assertEquals(5, node0.getLength());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isParamList());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isExprResult());
      assertEquals(true, node0.mayMutateGlobalStateOrThrow());
      assertEquals(false, node0.isObjectLit());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isCast());
      assertEquals(false, node0.isNull());
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean0 == boolean1);
      
      Context context0 = new Context();
      assertNotNull(context0);
      assertEquals(false, context0.isGeneratingDebug());
      assertEquals(2147483647, context0.getMaximumInterpreterStackDepth());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertEquals(0, context0.getOptimizationLevel());
      assertEquals(false, context0.isGeneratingDebugChanged());
      assertEquals(true, context0.isGeneratingSource());
      assertEquals(false, context0.isSealed());
      assertEquals(0, context0.getLanguageVersion());
      assertFalse(context0.generateObserverCount);
      
      ToolErrorReporter toolErrorReporter0 = new ToolErrorReporter(context0.generateObserverCount);
      assertNotNull(toolErrorReporter0);
      assertEquals(false, toolErrorReporter0.isReportingWarnings());
      assertEquals(false, toolErrorReporter0.hasReportedError());
      assertEquals(false, context0.isGeneratingDebug());
      assertEquals(2147483647, context0.getMaximumInterpreterStackDepth());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertEquals(0, context0.getOptimizationLevel());
      assertEquals(false, context0.isGeneratingDebugChanged());
      assertEquals(true, context0.isGeneratingSource());
      assertEquals(false, context0.isSealed());
      assertEquals(0, context0.getLanguageVersion());
      assertFalse(context0.generateObserverCount);
      
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, comment0, node0, config0, toolErrorReporter0);
      assertNotNull(jsDocInfoParser0);
      assertEquals(0, xmlPropRef0.depth());
      assertEquals(-1, xmlPropRef0.getLineno());
      assertEquals(-400, xmlPropRef0.getPosition());
      assertEquals(-1, xmlPropRef0.getColonPos());
      assertEquals(false, xmlPropRef0.hasChildren());
      assertEquals(-400, xmlPropRef0.getAbsolutePosition());
      assertEquals("79", xmlPropRef0.toString());
      assertEquals(-1, xmlPropRef0.getAtPos());
      assertNull(xmlPropRef0.getJsDoc());
      assertEquals(79, xmlPropRef0.getType());
      assertEquals(false, xmlPropRef0.isAttributeAccess());
      assertEquals(1, xmlPropRef0.getLength());
      assertEquals(false, toolErrorReporter0.isReportingWarnings());
      assertEquals(false, toolErrorReporter0.hasReportedError());
      assertEquals(false, context0.isGeneratingDebug());
      assertEquals(2147483647, context0.getMaximumInterpreterStackDepth());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertEquals(0, context0.getOptimizationLevel());
      assertEquals(false, context0.isGeneratingDebugChanged());
      assertEquals(true, context0.isGeneratingSource());
      assertEquals(false, context0.isSealed());
      assertEquals(0, context0.getLanguageVersion());
      assertEquals("UTF-8", charset0.displayName());
      assertEquals("UTF-8", charset0.toString());
      assertEquals(true, charset0.isRegistered());
      assertEquals("UTF-8", charset0.name());
      assertEquals(true, charset0.canEncode());
      assertEquals(2, set0.size());
      assertEquals(false, set0.isEmpty());
      assertEquals(false, node0.isOnlyModifiesArgumentsCall());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(40, node0.getType());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isTypeOf());
      assertEquals(0, node0.getSourcePosition());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isDelProp());
      assertEquals(true, node0.mayMutateArguments());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isDebugger());
      assertEquals(true, node0.isString());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(0, node0.getChangeTime());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isTrue());
      assertEquals(0, node0.getCharno());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isScript());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isStringKey());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isComma());
      assertEquals(0, node0.getLineno());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isGetterDef());
      assertEquals(5, node0.getLength());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isParamList());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isExprResult());
      assertEquals(true, node0.mayMutateGlobalStateOrThrow());
      assertEquals(false, node0.isObjectLit());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isCast());
      assertEquals(false, node0.isNull());
      assertFalse(context0.generateObserverCount);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean0 == boolean1);
      
      JsDocToken jsDocToken0 = JsDocToken.ANNOTATION;
      Node node1 = jsDocInfoParser0.parseAndRecordTypeNode(jsDocToken0);
      assertNull(node1);
      assertEquals(0, xmlPropRef0.depth());
      assertEquals(-1, xmlPropRef0.getLineno());
      assertEquals(-400, xmlPropRef0.getPosition());
      assertEquals(-1, xmlPropRef0.getColonPos());
      assertEquals(false, xmlPropRef0.hasChildren());
      assertEquals(-400, xmlPropRef0.getAbsolutePosition());
      assertEquals("79", xmlPropRef0.toString());
      assertEquals(-1, xmlPropRef0.getAtPos());
      assertNull(xmlPropRef0.getJsDoc());
      assertEquals(79, xmlPropRef0.getType());
      assertEquals(false, xmlPropRef0.isAttributeAccess());
      assertEquals(1, xmlPropRef0.getLength());
      assertEquals(false, toolErrorReporter0.isReportingWarnings());
      assertEquals(false, toolErrorReporter0.hasReportedError());
      assertEquals(false, context0.isGeneratingDebug());
      assertEquals(2147483647, context0.getMaximumInterpreterStackDepth());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertEquals(0, context0.getOptimizationLevel());
      assertEquals(false, context0.isGeneratingDebugChanged());
      assertEquals(true, context0.isGeneratingSource());
      assertEquals(false, context0.isSealed());
      assertEquals(0, context0.getLanguageVersion());
      assertEquals("UTF-8", charset0.displayName());
      assertEquals("UTF-8", charset0.toString());
      assertEquals(true, charset0.isRegistered());
      assertEquals("UTF-8", charset0.name());
      assertEquals(true, charset0.canEncode());
      assertEquals(2, set0.size());
      assertEquals(false, set0.isEmpty());
      assertEquals(false, node0.isOnlyModifiesArgumentsCall());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(40, node0.getType());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isTypeOf());
      assertEquals(0, node0.getSourcePosition());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isDelProp());
      assertEquals(true, node0.mayMutateArguments());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isDebugger());
      assertEquals(true, node0.isString());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(0, node0.getChangeTime());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isTrue());
      assertEquals(0, node0.getCharno());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isScript());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isStringKey());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isComma());
      assertEquals(0, node0.getLineno());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isGetterDef());
      assertEquals(5, node0.getLength());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isParamList());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isExprResult());
      assertEquals(true, node0.mayMutateGlobalStateOrThrow());
      assertEquals(false, node0.isObjectLit());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isCast());
      assertEquals(false, node0.isNull());
      assertFalse(context0.generateObserverCount);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean0 == boolean1);
      
      JSDocInfo jSDocInfo0 = jsDocInfoParser0.parseInlineTypeDoc();
      assertNull(jSDocInfo0);
      assertEquals(0, xmlPropRef0.depth());
      assertEquals(-1, xmlPropRef0.getLineno());
      assertEquals(-400, xmlPropRef0.getPosition());
      assertEquals(-1, xmlPropRef0.getColonPos());
      assertEquals(false, xmlPropRef0.hasChildren());
      assertEquals(-400, xmlPropRef0.getAbsolutePosition());
      assertEquals("79", xmlPropRef0.toString());
      assertEquals(-1, xmlPropRef0.getAtPos());
      assertNull(xmlPropRef0.getJsDoc());
      assertEquals(79, xmlPropRef0.getType());
      assertEquals(false, xmlPropRef0.isAttributeAccess());
      assertEquals(1, xmlPropRef0.getLength());
      assertEquals(false, toolErrorReporter0.isReportingWarnings());
      assertEquals(false, toolErrorReporter0.hasReportedError());
      assertEquals(false, context0.isGeneratingDebug());
      assertEquals(2147483647, context0.getMaximumInterpreterStackDepth());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertEquals(0, context0.getOptimizationLevel());
      assertEquals(false, context0.isGeneratingDebugChanged());
      assertEquals(true, context0.isGeneratingSource());
      assertEquals(false, context0.isSealed());
      assertEquals(0, context0.getLanguageVersion());
      assertEquals("UTF-8", charset0.displayName());
      assertEquals("UTF-8", charset0.toString());
      assertEquals(true, charset0.isRegistered());
      assertEquals("UTF-8", charset0.name());
      assertEquals(true, charset0.canEncode());
      assertEquals(2, set0.size());
      assertEquals(false, set0.isEmpty());
      assertEquals(false, node0.isOnlyModifiesArgumentsCall());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(40, node0.getType());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isTypeOf());
      assertEquals(0, node0.getSourcePosition());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isDelProp());
      assertEquals(true, node0.mayMutateArguments());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isDebugger());
      assertEquals(true, node0.isString());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(0, node0.getChangeTime());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isTrue());
      assertEquals(0, node0.getCharno());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isScript());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isStringKey());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isComma());
      assertEquals(0, node0.getLineno());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isGetterDef());
      assertEquals(5, node0.getLength());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isParamList());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isExprResult());
      assertEquals(true, node0.mayMutateGlobalStateOrThrow());
      assertEquals(false, node0.isObjectLit());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isCast());
      assertEquals(false, node0.isNull());
      assertFalse(context0.generateObserverCount);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean0 == boolean1);
  }

  @Test
  public void test22()  throws Throwable  {
      String string0 = "qFOHc";
      Node node0 = JsDocInfoParser.parseTypeString(string0);
      assertNotNull(node0);
      assertEquals(false, node0.isOnlyModifiesArgumentsCall());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isTypeOf());
      assertEquals(5, node0.getLength());
      assertEquals(false, node0.isTry());
      assertEquals(true, node0.isString());
      assertEquals(false, node0.isNumber());
      assertEquals(40, node0.getType());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isOr());
      assertEquals(true, node0.mayMutateGlobalStateOrThrow());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isScript());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isStringKey());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isThrow());
      assertEquals(0, node0.getSourcePosition());
      assertEquals(0, node0.getChangeTime());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.hasChildren());
      assertEquals(0, node0.getLineno());
      assertEquals(0, node0.getCharno());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isDo());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isCast());
      assertEquals(false, node0.isWhile());
      assertEquals(true, node0.mayMutateArguments());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isGetterDef());
      
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream(string0);
      assertNotNull(jsDocTokenStream0);
      
      int int0 = (-400);
      XmlPropRef xmlPropRef0 = new XmlPropRef(int0);
      assertNotNull(xmlPropRef0);
      assertEquals(-1, xmlPropRef0.getColonPos());
      assertEquals(-400, xmlPropRef0.getAbsolutePosition());
      assertEquals(0, xmlPropRef0.depth());
      assertEquals(false, xmlPropRef0.hasChildren());
      assertEquals(-400, xmlPropRef0.getPosition());
      assertEquals(false, xmlPropRef0.isAttributeAccess());
      assertNull(xmlPropRef0.getJsDoc());
      assertEquals("79", xmlPropRef0.toString());
      assertEquals(79, xmlPropRef0.getType());
      assertEquals(-1, xmlPropRef0.getLineno());
      assertEquals(-1, xmlPropRef0.getAtPos());
      assertEquals(1, xmlPropRef0.getLength());
      
      Comment comment0 = xmlPropRef0.getJsDocNode();
      assertNull(comment0);
      assertEquals(-1, xmlPropRef0.getColonPos());
      assertEquals(-400, xmlPropRef0.getAbsolutePosition());
      assertEquals(0, xmlPropRef0.depth());
      assertEquals(false, xmlPropRef0.hasChildren());
      assertEquals(-400, xmlPropRef0.getPosition());
      assertEquals(false, xmlPropRef0.isAttributeAccess());
      assertNull(xmlPropRef0.getJsDoc());
      assertEquals("79", xmlPropRef0.toString());
      assertEquals(79, xmlPropRef0.getType());
      assertEquals(-1, xmlPropRef0.getLineno());
      assertEquals(-1, xmlPropRef0.getAtPos());
      assertEquals(1, xmlPropRef0.getLength());
      
      boolean boolean0 = true;
      SimpleSourceFile simpleSourceFile0 = new SimpleSourceFile(string0, boolean0);
      assertNotNull(simpleSourceFile0);
      assertEquals("qFOHc", simpleSourceFile0.getName());
      assertEquals("qFOHc", simpleSourceFile0.toString());
      assertEquals(true, simpleSourceFile0.isExtern());
      
      node0.setStaticSourceFile((StaticSourceFile) simpleSourceFile0);
      assertEquals("qFOHc", simpleSourceFile0.getName());
      assertEquals("qFOHc", simpleSourceFile0.toString());
      assertEquals(true, simpleSourceFile0.isExtern());
      assertEquals(false, node0.isOnlyModifiesArgumentsCall());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isTypeOf());
      assertEquals(5, node0.getLength());
      assertEquals(false, node0.isTry());
      assertEquals(true, node0.isString());
      assertEquals(false, node0.isNumber());
      assertEquals(40, node0.getType());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isIf());
      assertEquals(true, node0.isFromExterns());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isAssign());
      assertEquals("qFOHc", node0.getSourceFileName());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isOr());
      assertEquals(true, node0.mayMutateGlobalStateOrThrow());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isScript());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isStringKey());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isThrow());
      assertEquals(0, node0.getSourcePosition());
      assertEquals(0, node0.getChangeTime());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.hasChildren());
      assertEquals(0, node0.getLineno());
      assertEquals(0, node0.getCharno());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isCast());
      assertEquals(false, node0.isWhile());
      assertEquals(true, node0.mayMutateArguments());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isGetterDef());
      
      Charset charset0 = Charset.defaultCharset();
      assertNotNull(charset0);
      assertEquals(true, charset0.isRegistered());
      assertEquals("UTF-8", charset0.toString());
      assertEquals("UTF-8", charset0.displayName());
      assertEquals(true, charset0.canEncode());
      assertEquals("UTF-8", charset0.name());
      
      Set<String> set0 = charset0.aliases();
      assertNotNull(set0);
      assertEquals(true, charset0.isRegistered());
      assertEquals("UTF-8", charset0.toString());
      assertEquals("UTF-8", charset0.displayName());
      assertEquals(true, charset0.canEncode());
      assertEquals("UTF-8", charset0.name());
      assertEquals(false, set0.isEmpty());
      assertEquals(2, set0.size());
      
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5_STRICT;
      boolean boolean1 = node0.isAssignAdd();
      assertEquals(false, node0.isOnlyModifiesArgumentsCall());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isTypeOf());
      assertEquals(5, node0.getLength());
      assertEquals(false, node0.isTry());
      assertEquals(true, node0.isString());
      assertEquals(false, node0.isNumber());
      assertEquals(40, node0.getType());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isIf());
      assertEquals(true, node0.isFromExterns());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isAssign());
      assertEquals("qFOHc", node0.getSourceFileName());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isOr());
      assertEquals(true, node0.mayMutateGlobalStateOrThrow());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isScript());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isStringKey());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isThrow());
      assertEquals(0, node0.getSourcePosition());
      assertEquals(0, node0.getChangeTime());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.hasChildren());
      assertEquals(0, node0.getLineno());
      assertEquals(0, node0.getCharno());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isCast());
      assertEquals(false, node0.isWhile());
      assertEquals(true, node0.mayMutateArguments());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isGetterDef());
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      Config config0 = new Config(set0, set0, boolean0, config_LanguageMode0, boolean1);
      assertNotNull(config0);
      assertEquals(true, charset0.isRegistered());
      assertEquals("UTF-8", charset0.toString());
      assertEquals("UTF-8", charset0.displayName());
      assertEquals(true, charset0.canEncode());
      assertEquals("UTF-8", charset0.name());
      assertEquals(false, node0.isOnlyModifiesArgumentsCall());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isTypeOf());
      assertEquals(5, node0.getLength());
      assertEquals(false, node0.isTry());
      assertEquals(true, node0.isString());
      assertEquals(false, node0.isNumber());
      assertEquals(40, node0.getType());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isIf());
      assertEquals(true, node0.isFromExterns());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isAssign());
      assertEquals("qFOHc", node0.getSourceFileName());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isOr());
      assertEquals(true, node0.mayMutateGlobalStateOrThrow());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isScript());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isStringKey());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isThrow());
      assertEquals(0, node0.getSourcePosition());
      assertEquals(0, node0.getChangeTime());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.hasChildren());
      assertEquals(0, node0.getLineno());
      assertEquals(0, node0.getCharno());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isCast());
      assertEquals(false, node0.isWhile());
      assertEquals(true, node0.mayMutateArguments());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, set0.isEmpty());
      assertEquals(2, set0.size());
      assertFalse(boolean0 == boolean1);
      assertFalse(boolean1 == boolean0);
      
      Context context0 = new Context();
      assertNotNull(context0);
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertEquals(0, context0.getLanguageVersion());
      assertEquals(false, context0.isSealed());
      assertEquals(true, context0.isGeneratingSource());
      assertEquals(false, context0.isGeneratingDebugChanged());
      assertEquals(false, context0.isGeneratingDebug());
      assertEquals(2147483647, context0.getMaximumInterpreterStackDepth());
      assertEquals(0, context0.getOptimizationLevel());
      assertFalse(context0.generateObserverCount);
      
      ToolErrorReporter toolErrorReporter0 = new ToolErrorReporter(context0.generateObserverCount);
      assertNotNull(toolErrorReporter0);
      assertEquals(false, toolErrorReporter0.hasReportedError());
      assertEquals(false, toolErrorReporter0.isReportingWarnings());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertEquals(0, context0.getLanguageVersion());
      assertEquals(false, context0.isSealed());
      assertEquals(true, context0.isGeneratingSource());
      assertEquals(false, context0.isGeneratingDebugChanged());
      assertEquals(false, context0.isGeneratingDebug());
      assertEquals(2147483647, context0.getMaximumInterpreterStackDepth());
      assertEquals(0, context0.getOptimizationLevel());
      assertFalse(context0.generateObserverCount);
      
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, comment0, node0, config0, toolErrorReporter0);
      assertNotNull(jsDocInfoParser0);
      assertEquals(true, charset0.isRegistered());
      assertEquals("UTF-8", charset0.toString());
      assertEquals("UTF-8", charset0.displayName());
      assertEquals(true, charset0.canEncode());
      assertEquals("UTF-8", charset0.name());
      assertEquals(-1, xmlPropRef0.getColonPos());
      assertEquals(-400, xmlPropRef0.getAbsolutePosition());
      assertEquals(0, xmlPropRef0.depth());
      assertEquals(false, xmlPropRef0.hasChildren());
      assertEquals(-400, xmlPropRef0.getPosition());
      assertEquals(false, xmlPropRef0.isAttributeAccess());
      assertNull(xmlPropRef0.getJsDoc());
      assertEquals("79", xmlPropRef0.toString());
      assertEquals(79, xmlPropRef0.getType());
      assertEquals(-1, xmlPropRef0.getLineno());
      assertEquals(-1, xmlPropRef0.getAtPos());
      assertEquals(1, xmlPropRef0.getLength());
      assertEquals(false, node0.isOnlyModifiesArgumentsCall());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isTypeOf());
      assertEquals(5, node0.getLength());
      assertEquals(false, node0.isTry());
      assertEquals(true, node0.isString());
      assertEquals(false, node0.isNumber());
      assertEquals(40, node0.getType());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isIf());
      assertEquals(true, node0.isFromExterns());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isAssign());
      assertEquals("qFOHc", node0.getSourceFileName());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isOr());
      assertEquals(true, node0.mayMutateGlobalStateOrThrow());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isScript());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isStringKey());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isThrow());
      assertEquals(0, node0.getSourcePosition());
      assertEquals(0, node0.getChangeTime());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.hasChildren());
      assertEquals(0, node0.getLineno());
      assertEquals(0, node0.getCharno());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isCast());
      assertEquals(false, node0.isWhile());
      assertEquals(true, node0.mayMutateArguments());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, toolErrorReporter0.hasReportedError());
      assertEquals(false, toolErrorReporter0.isReportingWarnings());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertEquals(0, context0.getLanguageVersion());
      assertEquals(false, context0.isSealed());
      assertEquals(true, context0.isGeneratingSource());
      assertEquals(false, context0.isGeneratingDebugChanged());
      assertEquals(false, context0.isGeneratingDebug());
      assertEquals(2147483647, context0.getMaximumInterpreterStackDepth());
      assertEquals(0, context0.getOptimizationLevel());
      assertEquals(false, set0.isEmpty());
      assertEquals(2, set0.size());
      assertFalse(context0.generateObserverCount);
      assertFalse(boolean0 == boolean1);
      assertFalse(boolean1 == boolean0);
      
      JsDocToken jsDocToken0 = JsDocToken.ANNOTATION;
      Node node1 = jsDocInfoParser0.parseAndRecordTypeNode(jsDocToken0);
      assertNull(node1);
      assertEquals(true, charset0.isRegistered());
      assertEquals("UTF-8", charset0.toString());
      assertEquals("UTF-8", charset0.displayName());
      assertEquals(true, charset0.canEncode());
      assertEquals("UTF-8", charset0.name());
      assertEquals(-1, xmlPropRef0.getColonPos());
      assertEquals(-400, xmlPropRef0.getAbsolutePosition());
      assertEquals(0, xmlPropRef0.depth());
      assertEquals(false, xmlPropRef0.hasChildren());
      assertEquals(-400, xmlPropRef0.getPosition());
      assertEquals(false, xmlPropRef0.isAttributeAccess());
      assertNull(xmlPropRef0.getJsDoc());
      assertEquals("79", xmlPropRef0.toString());
      assertEquals(79, xmlPropRef0.getType());
      assertEquals(-1, xmlPropRef0.getLineno());
      assertEquals(-1, xmlPropRef0.getAtPos());
      assertEquals(1, xmlPropRef0.getLength());
      assertEquals(false, node0.isOnlyModifiesArgumentsCall());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isTypeOf());
      assertEquals(5, node0.getLength());
      assertEquals(false, node0.isTry());
      assertEquals(true, node0.isString());
      assertEquals(false, node0.isNumber());
      assertEquals(40, node0.getType());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isIf());
      assertEquals(true, node0.isFromExterns());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isAssign());
      assertEquals("qFOHc", node0.getSourceFileName());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isOr());
      assertEquals(true, node0.mayMutateGlobalStateOrThrow());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isScript());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isStringKey());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isThrow());
      assertEquals(0, node0.getSourcePosition());
      assertEquals(0, node0.getChangeTime());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.hasChildren());
      assertEquals(0, node0.getLineno());
      assertEquals(0, node0.getCharno());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isCast());
      assertEquals(false, node0.isWhile());
      assertEquals(true, node0.mayMutateArguments());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, toolErrorReporter0.hasReportedError());
      assertEquals(false, toolErrorReporter0.isReportingWarnings());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertEquals(0, context0.getLanguageVersion());
      assertEquals(false, context0.isSealed());
      assertEquals(true, context0.isGeneratingSource());
      assertEquals(false, context0.isGeneratingDebugChanged());
      assertEquals(false, context0.isGeneratingDebug());
      assertEquals(2147483647, context0.getMaximumInterpreterStackDepth());
      assertEquals(0, context0.getOptimizationLevel());
      assertEquals(false, set0.isEmpty());
      assertEquals(2, set0.size());
      assertFalse(context0.generateObserverCount);
      assertFalse(boolean0 == boolean1);
      assertFalse(boolean1 == boolean0);
  }

  @Test
  public void test23()  throws Throwable  {
      String string0 = "qFOHc";
      Node node0 = JsDocInfoParser.parseTypeString(string0);
      assertNotNull(node0);
      assertEquals(0, node0.getChangeTime());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isSetterDef());
      assertEquals(0, node0.getCharno());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isScript());
      assertEquals(true, node0.isString());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(5, node0.getLength());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isOnlyModifiesArgumentsCall());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isBlock());
      assertEquals(0, node0.getLineno());
      assertEquals(false, node0.isCast());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isDebugger());
      assertEquals(true, node0.mayMutateGlobalStateOrThrow());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isStringKey());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isCase());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isVarArgs());
      assertEquals(40, node0.getType());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isDelProp());
      assertEquals(true, node0.mayMutateArguments());
      assertEquals(false, node0.isAssign());
      assertEquals(0, node0.getSourcePosition());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isParamList());
      
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream(string0);
      assertNotNull(jsDocTokenStream0);
      
      int int0 = (-400);
      XmlPropRef xmlPropRef0 = new XmlPropRef(int0);
      assertNotNull(xmlPropRef0);
      assertEquals(-400, xmlPropRef0.getPosition());
      assertEquals(79, xmlPropRef0.getType());
      assertEquals(1, xmlPropRef0.getLength());
      assertNull(xmlPropRef0.getJsDoc());
      assertEquals(-400, xmlPropRef0.getAbsolutePosition());
      assertEquals("79", xmlPropRef0.toString());
      assertEquals(false, xmlPropRef0.hasChildren());
      assertEquals(-1, xmlPropRef0.getLineno());
      assertEquals(-1, xmlPropRef0.getAtPos());
      assertEquals(0, xmlPropRef0.depth());
      assertEquals(-1, xmlPropRef0.getColonPos());
      assertEquals(false, xmlPropRef0.isAttributeAccess());
      
      Comment comment0 = xmlPropRef0.getJsDocNode();
      assertNull(comment0);
      assertEquals(-400, xmlPropRef0.getPosition());
      assertEquals(79, xmlPropRef0.getType());
      assertEquals(1, xmlPropRef0.getLength());
      assertNull(xmlPropRef0.getJsDoc());
      assertEquals(-400, xmlPropRef0.getAbsolutePosition());
      assertEquals("79", xmlPropRef0.toString());
      assertEquals(false, xmlPropRef0.hasChildren());
      assertEquals(-1, xmlPropRef0.getLineno());
      assertEquals(-1, xmlPropRef0.getAtPos());
      assertEquals(0, xmlPropRef0.depth());
      assertEquals(-1, xmlPropRef0.getColonPos());
      assertEquals(false, xmlPropRef0.isAttributeAccess());
      
      boolean boolean0 = true;
      Charset charset0 = Charset.defaultCharset();
      assertNotNull(charset0);
      assertEquals("UTF-8", charset0.toString());
      assertEquals("UTF-8", charset0.name());
      assertEquals(true, charset0.isRegistered());
      assertEquals("UTF-8", charset0.displayName());
      assertEquals(true, charset0.canEncode());
      
      Set<String> set0 = charset0.aliases();
      assertNotNull(set0);
      assertEquals("UTF-8", charset0.toString());
      assertEquals("UTF-8", charset0.name());
      assertEquals(true, charset0.isRegistered());
      assertEquals("UTF-8", charset0.displayName());
      assertEquals(true, charset0.canEncode());
      assertEquals(false, set0.isEmpty());
      assertEquals(2, set0.size());
      
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5_STRICT;
      boolean boolean1 = node0.isAssignAdd();
      assertEquals(0, node0.getChangeTime());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isSetterDef());
      assertEquals(0, node0.getCharno());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isScript());
      assertEquals(true, node0.isString());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(5, node0.getLength());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isOnlyModifiesArgumentsCall());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isBlock());
      assertEquals(0, node0.getLineno());
      assertEquals(false, node0.isCast());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isDebugger());
      assertEquals(true, node0.mayMutateGlobalStateOrThrow());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isStringKey());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isCase());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isVarArgs());
      assertEquals(40, node0.getType());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isDelProp());
      assertEquals(true, node0.mayMutateArguments());
      assertEquals(false, node0.isAssign());
      assertEquals(0, node0.getSourcePosition());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isParamList());
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      Config config0 = new Config(set0, set0, boolean0, config_LanguageMode0, boolean1);
      assertNotNull(config0);
      assertEquals("UTF-8", charset0.toString());
      assertEquals("UTF-8", charset0.name());
      assertEquals(true, charset0.isRegistered());
      assertEquals("UTF-8", charset0.displayName());
      assertEquals(true, charset0.canEncode());
      assertEquals(0, node0.getChangeTime());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isSetterDef());
      assertEquals(0, node0.getCharno());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isScript());
      assertEquals(true, node0.isString());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(5, node0.getLength());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isOnlyModifiesArgumentsCall());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isBlock());
      assertEquals(0, node0.getLineno());
      assertEquals(false, node0.isCast());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isDebugger());
      assertEquals(true, node0.mayMutateGlobalStateOrThrow());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isStringKey());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isCase());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isVarArgs());
      assertEquals(40, node0.getType());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isDelProp());
      assertEquals(true, node0.mayMutateArguments());
      assertEquals(false, node0.isAssign());
      assertEquals(0, node0.getSourcePosition());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isParamList());
      assertEquals(false, set0.isEmpty());
      assertEquals(2, set0.size());
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean0 == boolean1);
      
      Context context0 = new Context();
      assertNotNull(context0);
      assertEquals(true, context0.isGeneratingSource());
      assertEquals(0, context0.getLanguageVersion());
      assertEquals(false, context0.isSealed());
      assertEquals(2147483647, context0.getMaximumInterpreterStackDepth());
      assertEquals(false, context0.isGeneratingDebug());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertEquals(0, context0.getOptimizationLevel());
      assertEquals(false, context0.isGeneratingDebugChanged());
      assertFalse(context0.generateObserverCount);
      
      ToolErrorReporter toolErrorReporter0 = new ToolErrorReporter(context0.generateObserverCount);
      assertNotNull(toolErrorReporter0);
      assertEquals(true, context0.isGeneratingSource());
      assertEquals(0, context0.getLanguageVersion());
      assertEquals(false, context0.isSealed());
      assertEquals(2147483647, context0.getMaximumInterpreterStackDepth());
      assertEquals(false, context0.isGeneratingDebug());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertEquals(0, context0.getOptimizationLevel());
      assertEquals(false, context0.isGeneratingDebugChanged());
      assertEquals(false, toolErrorReporter0.isReportingWarnings());
      assertEquals(false, toolErrorReporter0.hasReportedError());
      assertFalse(context0.generateObserverCount);
      
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, comment0, node0, config0, toolErrorReporter0);
      assertNotNull(jsDocInfoParser0);
      assertEquals(true, context0.isGeneratingSource());
      assertEquals(0, context0.getLanguageVersion());
      assertEquals(false, context0.isSealed());
      assertEquals(2147483647, context0.getMaximumInterpreterStackDepth());
      assertEquals(false, context0.isGeneratingDebug());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertEquals(0, context0.getOptimizationLevel());
      assertEquals(false, context0.isGeneratingDebugChanged());
      assertEquals(-400, xmlPropRef0.getPosition());
      assertEquals(79, xmlPropRef0.getType());
      assertEquals(1, xmlPropRef0.getLength());
      assertNull(xmlPropRef0.getJsDoc());
      assertEquals(-400, xmlPropRef0.getAbsolutePosition());
      assertEquals("79", xmlPropRef0.toString());
      assertEquals(false, xmlPropRef0.hasChildren());
      assertEquals(-1, xmlPropRef0.getLineno());
      assertEquals(-1, xmlPropRef0.getAtPos());
      assertEquals(0, xmlPropRef0.depth());
      assertEquals(-1, xmlPropRef0.getColonPos());
      assertEquals(false, xmlPropRef0.isAttributeAccess());
      assertEquals("UTF-8", charset0.toString());
      assertEquals("UTF-8", charset0.name());
      assertEquals(true, charset0.isRegistered());
      assertEquals("UTF-8", charset0.displayName());
      assertEquals(true, charset0.canEncode());
      assertEquals(0, node0.getChangeTime());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isSetterDef());
      assertEquals(0, node0.getCharno());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isScript());
      assertEquals(true, node0.isString());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(5, node0.getLength());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isOnlyModifiesArgumentsCall());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isBlock());
      assertEquals(0, node0.getLineno());
      assertEquals(false, node0.isCast());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isDebugger());
      assertEquals(true, node0.mayMutateGlobalStateOrThrow());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isStringKey());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isCase());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isVarArgs());
      assertEquals(40, node0.getType());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isDelProp());
      assertEquals(true, node0.mayMutateArguments());
      assertEquals(false, node0.isAssign());
      assertEquals(0, node0.getSourcePosition());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isParamList());
      assertEquals(false, toolErrorReporter0.isReportingWarnings());
      assertEquals(false, toolErrorReporter0.hasReportedError());
      assertEquals(false, set0.isEmpty());
      assertEquals(2, set0.size());
      assertFalse(context0.generateObserverCount);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean0 == boolean1);
      
      JSDocInfo jSDocInfo0 = jsDocInfoParser0.parseInlineTypeDoc();
      assertNotNull(jSDocInfo0);
      assertEquals(true, context0.isGeneratingSource());
      assertEquals(0, context0.getLanguageVersion());
      assertEquals(false, context0.isSealed());
      assertEquals(2147483647, context0.getMaximumInterpreterStackDepth());
      assertEquals(false, context0.isGeneratingDebug());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertEquals(0, context0.getOptimizationLevel());
      assertEquals(false, context0.isGeneratingDebugChanged());
      assertEquals(-400, xmlPropRef0.getPosition());
      assertEquals(79, xmlPropRef0.getType());
      assertEquals(1, xmlPropRef0.getLength());
      assertNull(xmlPropRef0.getJsDoc());
      assertEquals(-400, xmlPropRef0.getAbsolutePosition());
      assertEquals("79", xmlPropRef0.toString());
      assertEquals(false, xmlPropRef0.hasChildren());
      assertEquals(-1, xmlPropRef0.getLineno());
      assertEquals(-1, xmlPropRef0.getAtPos());
      assertEquals(0, xmlPropRef0.depth());
      assertEquals(-1, xmlPropRef0.getColonPos());
      assertEquals(false, xmlPropRef0.isAttributeAccess());
      assertEquals("UTF-8", charset0.toString());
      assertEquals("UTF-8", charset0.name());
      assertEquals(true, charset0.isRegistered());
      assertEquals("UTF-8", charset0.displayName());
      assertEquals(true, charset0.canEncode());
      assertEquals(0, node0.getChangeTime());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isSetterDef());
      assertEquals(0, node0.getCharno());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isScript());
      assertEquals(true, node0.isString());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(5, node0.getLength());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isOnlyModifiesArgumentsCall());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isBlock());
      assertEquals(0, node0.getLineno());
      assertEquals(false, node0.isCast());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isDebugger());
      assertEquals(true, node0.mayMutateGlobalStateOrThrow());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isStringKey());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isCase());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isVarArgs());
      assertEquals(40, node0.getType());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isDelProp());
      assertEquals(true, node0.mayMutateArguments());
      assertEquals(false, node0.isAssign());
      assertEquals(0, node0.getSourcePosition());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isParamList());
      assertEquals(false, jSDocInfo0.isWizaction());
      assertEquals(0, jSDocInfo0.getOriginalCommentPosition());
      assertEquals(false, jSDocInfo0.hasThisType());
      assertEquals(false, jSDocInfo0.isDefine());
      assertEquals(false, jSDocInfo0.isConsistentIdGenerator());
      assertEquals(false, jSDocInfo0.isJavaDispatch());
      assertNull(jSDocInfo0.getReturnDescription());
      assertEquals(false, jSDocInfo0.isNoShadow());
      assertEquals(0, jSDocInfo0.getParameterCount());
      assertEquals("JSDocInfo", jSDocInfo0.toString());
      assertEquals(false, jSDocInfo0.hasEnumParameterType());
      assertNull(jSDocInfo0.getMeaning());
      assertEquals(false, jSDocInfo0.hasModifies());
      assertEquals(false, jSDocInfo0.isConstant());
      assertEquals(false, jSDocInfo0.hasTypedefType());
      assertEquals(false, jSDocInfo0.isExport());
      assertEquals(true, jSDocInfo0.containsDeclaration());
      assertEquals(false, jSDocInfo0.isOverride());
      assertNull(jSDocInfo0.getLendsName());
      assertEquals(false, jSDocInfo0.isHidden());
      assertEquals(0, jSDocInfo0.getImplementedInterfaceCount());
      assertNull(jSDocInfo0.getLicense());
      assertEquals(false, jSDocInfo0.isNoCompile());
      assertEquals(0, jSDocInfo0.getExtendedInterfacesCount());
      assertEquals(false, jSDocInfo0.hasBaseType());
      assertEquals(false, jSDocInfo0.isMappedIdGenerator());
      assertEquals(false, jSDocInfo0.isStableIdGenerator());
      assertNull(jSDocInfo0.getFileOverview());
      assertEquals(false, jSDocInfo0.isNoTypeCheck());
      assertNull(jSDocInfo0.getDescription());
      assertEquals(false, jSDocInfo0.isNoSideEffects());
      assertEquals(false, jSDocInfo0.isNgInject());
      assertEquals(false, jSDocInfo0.isNoAlias());
      assertNull(jSDocInfo0.getVersion());
      assertEquals(false, jSDocInfo0.hasFileOverview());
      assertNull(jSDocInfo0.getSourceName());
      assertEquals(false, jSDocInfo0.isImplicitCast());
      assertEquals(true, jSDocInfo0.hasType());
      assertEquals(false, jSDocInfo0.isIdGenerator());
      assertEquals(false, jSDocInfo0.isConstructor());
      assertEquals(false, jSDocInfo0.shouldPreserveTry());
      assertEquals(false, jSDocInfo0.isExterns());
      assertEquals(false, jSDocInfo0.makesStructs());
      assertEquals(false, jSDocInfo0.makesDicts());
      assertEquals(false, jSDocInfo0.isJaggerProvide());
      assertEquals(false, jSDocInfo0.isJaggerModule());
      assertEquals(false, jSDocInfo0.isInterface());
      assertNull(jSDocInfo0.getOriginalCommentString());
      assertEquals(false, jSDocInfo0.isDeprecated());
      assertEquals(JSDocInfo.Visibility.INHERITED, jSDocInfo0.getVisibility());
      assertEquals(false, jSDocInfo0.hasReturnType());
      assertEquals(false, jSDocInfo0.isExpose());
      assertNull(jSDocInfo0.getBlockDescription());
      assertEquals(false, jSDocInfo0.isDisposes());
      assertNull(jSDocInfo0.getDeprecationReason());
      assertEquals(false, jSDocInfo0.isJaggerInject());
      assertEquals(false, toolErrorReporter0.isReportingWarnings());
      assertEquals(false, toolErrorReporter0.hasReportedError());
      assertEquals(false, set0.isEmpty());
      assertEquals(2, set0.size());
      assertFalse(context0.generateObserverCount);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean0 == boolean1);
      
      jsDocInfoParser0.setFileOverviewJSDocInfo(jSDocInfo0);
      assertEquals(true, context0.isGeneratingSource());
      assertEquals(0, context0.getLanguageVersion());
      assertEquals(false, context0.isSealed());
      assertEquals(2147483647, context0.getMaximumInterpreterStackDepth());
      assertEquals(false, context0.isGeneratingDebug());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertEquals(0, context0.getOptimizationLevel());
      assertEquals(false, context0.isGeneratingDebugChanged());
      assertEquals(-400, xmlPropRef0.getPosition());
      assertEquals(79, xmlPropRef0.getType());
      assertEquals(1, xmlPropRef0.getLength());
      assertNull(xmlPropRef0.getJsDoc());
      assertEquals(-400, xmlPropRef0.getAbsolutePosition());
      assertEquals("79", xmlPropRef0.toString());
      assertEquals(false, xmlPropRef0.hasChildren());
      assertEquals(-1, xmlPropRef0.getLineno());
      assertEquals(-1, xmlPropRef0.getAtPos());
      assertEquals(0, xmlPropRef0.depth());
      assertEquals(-1, xmlPropRef0.getColonPos());
      assertEquals(false, xmlPropRef0.isAttributeAccess());
      assertEquals("UTF-8", charset0.toString());
      assertEquals("UTF-8", charset0.name());
      assertEquals(true, charset0.isRegistered());
      assertEquals("UTF-8", charset0.displayName());
      assertEquals(true, charset0.canEncode());
      assertEquals(0, node0.getChangeTime());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isSetterDef());
      assertEquals(0, node0.getCharno());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isScript());
      assertEquals(true, node0.isString());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(5, node0.getLength());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isOnlyModifiesArgumentsCall());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isBlock());
      assertEquals(0, node0.getLineno());
      assertEquals(false, node0.isCast());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isDebugger());
      assertEquals(true, node0.mayMutateGlobalStateOrThrow());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isStringKey());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isCase());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isVarArgs());
      assertEquals(40, node0.getType());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isDelProp());
      assertEquals(true, node0.mayMutateArguments());
      assertEquals(false, node0.isAssign());
      assertEquals(0, node0.getSourcePosition());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isParamList());
      assertEquals(false, jSDocInfo0.isWizaction());
      assertEquals(0, jSDocInfo0.getOriginalCommentPosition());
      assertEquals(false, jSDocInfo0.hasThisType());
      assertEquals(false, jSDocInfo0.isDefine());
      assertEquals(false, jSDocInfo0.isConsistentIdGenerator());
      assertEquals(false, jSDocInfo0.isJavaDispatch());
      assertNull(jSDocInfo0.getReturnDescription());
      assertEquals(false, jSDocInfo0.isNoShadow());
      assertEquals(0, jSDocInfo0.getParameterCount());
      assertEquals("JSDocInfo", jSDocInfo0.toString());
      assertEquals(false, jSDocInfo0.hasEnumParameterType());
      assertNull(jSDocInfo0.getMeaning());
      assertEquals(false, jSDocInfo0.hasModifies());
      assertEquals(false, jSDocInfo0.isConstant());
      assertEquals(false, jSDocInfo0.hasTypedefType());
      assertEquals(false, jSDocInfo0.isExport());
      assertEquals(true, jSDocInfo0.containsDeclaration());
      assertEquals(false, jSDocInfo0.isOverride());
      assertNull(jSDocInfo0.getLendsName());
      assertEquals(false, jSDocInfo0.isHidden());
      assertEquals(0, jSDocInfo0.getImplementedInterfaceCount());
      assertNull(jSDocInfo0.getLicense());
      assertEquals(false, jSDocInfo0.isNoCompile());
      assertEquals(0, jSDocInfo0.getExtendedInterfacesCount());
      assertEquals(false, jSDocInfo0.hasBaseType());
      assertEquals(false, jSDocInfo0.isMappedIdGenerator());
      assertEquals(false, jSDocInfo0.isStableIdGenerator());
      assertNull(jSDocInfo0.getFileOverview());
      assertEquals(false, jSDocInfo0.isNoTypeCheck());
      assertNull(jSDocInfo0.getDescription());
      assertEquals(false, jSDocInfo0.isNoSideEffects());
      assertEquals(false, jSDocInfo0.isNgInject());
      assertEquals(false, jSDocInfo0.isNoAlias());
      assertNull(jSDocInfo0.getVersion());
      assertEquals(false, jSDocInfo0.hasFileOverview());
      assertNull(jSDocInfo0.getSourceName());
      assertEquals(false, jSDocInfo0.isImplicitCast());
      assertEquals(true, jSDocInfo0.hasType());
      assertEquals(false, jSDocInfo0.isIdGenerator());
      assertEquals(false, jSDocInfo0.isConstructor());
      assertEquals(false, jSDocInfo0.shouldPreserveTry());
      assertEquals(false, jSDocInfo0.isExterns());
      assertEquals(false, jSDocInfo0.makesStructs());
      assertEquals(false, jSDocInfo0.makesDicts());
      assertEquals(false, jSDocInfo0.isJaggerProvide());
      assertEquals(false, jSDocInfo0.isJaggerModule());
      assertEquals(false, jSDocInfo0.isInterface());
      assertNull(jSDocInfo0.getOriginalCommentString());
      assertEquals(false, jSDocInfo0.isDeprecated());
      assertEquals(JSDocInfo.Visibility.INHERITED, jSDocInfo0.getVisibility());
      assertEquals(false, jSDocInfo0.hasReturnType());
      assertEquals(false, jSDocInfo0.isExpose());
      assertNull(jSDocInfo0.getBlockDescription());
      assertEquals(false, jSDocInfo0.isDisposes());
      assertNull(jSDocInfo0.getDeprecationReason());
      assertEquals(false, jSDocInfo0.isJaggerInject());
      assertEquals(false, toolErrorReporter0.isReportingWarnings());
      assertEquals(false, toolErrorReporter0.hasReportedError());
      assertEquals(false, set0.isEmpty());
      assertEquals(2, set0.size());
      assertFalse(context0.generateObserverCount);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean0 == boolean1);
  }

  @Test
  public void test24()  throws Throwable  {
      String string0 = "[";
      int int0 = 150;
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream(string0, int0, int0);
      assertNotNull(jsDocTokenStream0);
      
      WithStatement withStatement0 = new WithStatement();
      assertNotNull(withStatement0);
      assertNull(withStatement0.getJsDoc());
      assertEquals(-1, withStatement0.getLp());
      assertEquals(-1, withStatement0.getPosition());
      assertEquals("123", withStatement0.toString());
      assertEquals(-1, withStatement0.getRp());
      assertEquals(0, withStatement0.depth());
      assertEquals(false, withStatement0.hasChildren());
      assertEquals(123, withStatement0.getType());
      assertEquals(-1, withStatement0.getLineno());
      assertEquals(1, withStatement0.getLength());
      assertEquals(-1, withStatement0.getAbsolutePosition());
      
      Comment comment0 = withStatement0.getJsDocNode();
      assertNull(comment0);
      assertNull(withStatement0.getJsDoc());
      assertEquals(-1, withStatement0.getLp());
      assertEquals(-1, withStatement0.getPosition());
      assertEquals("123", withStatement0.toString());
      assertEquals(-1, withStatement0.getRp());
      assertEquals(0, withStatement0.depth());
      assertEquals(false, withStatement0.hasChildren());
      assertEquals(123, withStatement0.getType());
      assertEquals(-1, withStatement0.getLineno());
      assertEquals(1, withStatement0.getLength());
      assertEquals(-1, withStatement0.getAbsolutePosition());
      
      Node node0 = null;
      TreeSet<String> treeSet0 = new TreeSet<String>();
      assertNotNull(treeSet0);
      assertEquals("[]", treeSet0.toString());
      
      boolean boolean0 = true;
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5_STRICT;
      Config config0 = new Config(treeSet0, treeSet0, boolean0, config_LanguageMode0, boolean0);
      assertNotNull(config0);
      assertEquals("[]", treeSet0.toString());
      
      MockPrintStream mockPrintStream0 = new MockPrintStream(string0);
      assertNotNull(mockPrintStream0);
      
      ToolErrorReporter toolErrorReporter0 = new ToolErrorReporter(boolean0, (PrintStream) mockPrintStream0);
      assertNotNull(toolErrorReporter0);
      assertEquals(false, toolErrorReporter0.hasReportedError());
      assertEquals(true, toolErrorReporter0.isReportingWarnings());
      
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, comment0, node0, config0, toolErrorReporter0);
      assertNotNull(jsDocInfoParser0);
      assertEquals(false, toolErrorReporter0.hasReportedError());
      assertEquals(true, toolErrorReporter0.isReportingWarnings());
      assertNull(withStatement0.getJsDoc());
      assertEquals(-1, withStatement0.getLp());
      assertEquals(-1, withStatement0.getPosition());
      assertEquals("123", withStatement0.toString());
      assertEquals(-1, withStatement0.getRp());
      assertEquals(0, withStatement0.depth());
      assertEquals(false, withStatement0.hasChildren());
      assertEquals(123, withStatement0.getType());
      assertEquals(-1, withStatement0.getLineno());
      assertEquals(1, withStatement0.getLength());
      assertEquals(-1, withStatement0.getAbsolutePosition());
      assertEquals("[]", treeSet0.toString());
      
      JsDocToken jsDocToken0 = JsDocToken.LP;
      Node node1 = jsDocInfoParser0.parseAndRecordTypeNode(jsDocToken0);
      assertNull(node1);
      assertEquals(false, toolErrorReporter0.hasReportedError());
      assertEquals(true, toolErrorReporter0.isReportingWarnings());
      assertNull(withStatement0.getJsDoc());
      assertEquals(-1, withStatement0.getLp());
      assertEquals(-1, withStatement0.getPosition());
      assertEquals("123", withStatement0.toString());
      assertEquals(-1, withStatement0.getRp());
      assertEquals(0, withStatement0.depth());
      assertEquals(false, withStatement0.hasChildren());
      assertEquals(123, withStatement0.getType());
      assertEquals(-1, withStatement0.getLineno());
      assertEquals(1, withStatement0.getLength());
      assertEquals(-1, withStatement0.getAbsolutePosition());
      assertEquals("[]", treeSet0.toString());
  }

  @Test
  public void test25() {}
//   @Test
//   public void test25()  throws Throwable  {
//       EvoSuiteFile evoSuiteFile0 = null;
//       boolean boolean0 = FileSystemHandling.createFolder(evoSuiteFile0);
//       //  // Unstable assertion: assertFalse(boolean0);
//       
//       String string0 = "LEBA[\"QUo*/s;'";
//       int int0 = 690;
//       JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream(string0, int0, int0);
//       //  // Unstable assertion: assertNotNull(jsDocTokenStream0);
//       
//       XmlDotQuery xmlDotQuery0 = new XmlDotQuery(int0);
//       //  // Unstable assertion: assertNotNull(xmlDotQuery0);
//       //  // Unstable assertion: assertNull(xmlDotQuery0.getJsDoc());
//       //  // Unstable assertion: assertEquals(false, xmlDotQuery0.hasChildren());
//       //  // Unstable assertion: assertEquals("146", xmlDotQuery0.toString());
//       //  // Unstable assertion: assertEquals(-1, xmlDotQuery0.getLineno());
//       //  // Unstable assertion: assertEquals(146, xmlDotQuery0.getType());
//       //  // Unstable assertion: assertEquals(-1, xmlDotQuery0.getRp());
//       //  // Unstable assertion: assertEquals(1, xmlDotQuery0.getLength());
//       //  // Unstable assertion: assertEquals(690, xmlDotQuery0.getAbsolutePosition());
//       //  // Unstable assertion: assertEquals(0, xmlDotQuery0.depth());
//       //  // Unstable assertion: assertEquals(-1, xmlDotQuery0.getOperatorPosition());
//       //  // Unstable assertion: assertEquals(690, xmlDotQuery0.getPosition());
//       
//       Comment comment0 = xmlDotQuery0.getJsDocNode();
//       //  // Unstable assertion: assertNull(comment0);
//       //  // Unstable assertion: assertNull(xmlDotQuery0.getJsDoc());
//       //  // Unstable assertion: assertEquals(false, xmlDotQuery0.hasChildren());
//       //  // Unstable assertion: assertEquals("146", xmlDotQuery0.toString());
//       //  // Unstable assertion: assertEquals(-1, xmlDotQuery0.getLineno());
//       //  // Unstable assertion: assertEquals(146, xmlDotQuery0.getType());
//       //  // Unstable assertion: assertEquals(-1, xmlDotQuery0.getRp());
//       //  // Unstable assertion: assertEquals(1, xmlDotQuery0.getLength());
//       //  // Unstable assertion: assertEquals(690, xmlDotQuery0.getAbsolutePosition());
//       //  // Unstable assertion: assertEquals(0, xmlDotQuery0.depth());
//       //  // Unstable assertion: assertEquals(-1, xmlDotQuery0.getOperatorPosition());
//       //  // Unstable assertion: assertEquals(690, xmlDotQuery0.getPosition());
//       
//       Node node0 = Node.newNumber((double) int0, int0, int0);
//       //  // Unstable assertion: assertNotNull(node0);
//       //  // Unstable assertion: assertEquals(true, node0.isNumber());
//       //  // Unstable assertion: assertEquals(false, node0.isQuotedString());
//       //  // Unstable assertion: assertEquals(false, node0.isStringKey());
//       //  // Unstable assertion: assertEquals(false, node0.isWith());
//       //  // Unstable assertion: assertEquals(false, node0.isDelProp());
//       //  // Unstable assertion: assertEquals(false, node0.isTypeOf());
//       //  // Unstable assertion: assertEquals(false, node0.isContinue());
//       //  // Unstable assertion: assertEquals(false, node0.isOr());
//       //  // Unstable assertion: assertEquals(false, node0.isFunction());
//       //  // Unstable assertion: assertEquals(39, node0.getType());
//       //  // Unstable assertion: assertEquals(690, node0.getLineno());
//       //  // Unstable assertion: assertEquals(false, node0.isAnd());
//       //  // Unstable assertion: assertEquals(false, node0.isObjectLit());
//       //  // Unstable assertion: assertEquals(690, node0.getCharno());
//       //  // Unstable assertion: assertEquals(false, node0.isComma());
//       //  // Unstable assertion: assertEquals(false, node0.isFromExterns());
//       //  // Unstable assertion: assertEquals(0, node0.getSideEffectFlags());
//       //  // Unstable assertion: assertEquals(false, node0.isNull());
//       //  // Unstable assertion: assertEquals(false, node0.isTry());
//       //  // Unstable assertion: assertEquals(false, node0.hasOneChild());
//       //  // Unstable assertion: assertEquals(false, node0.isLabel());
//       //  // Unstable assertion: assertEquals(false, node0.isRegExp());
//       //  // Unstable assertion: assertEquals(false, node0.isDefaultCase());
//       //  // Unstable assertion: assertEquals(false, node0.isInstanceOf());
//       //  // Unstable assertion: assertEquals(false, node0.isEmpty());
//       //  // Unstable assertion: assertEquals(false, node0.isArrayLit());
//       //  // Unstable assertion: assertEquals(false, node0.isSetterDef());
//       //  // Unstable assertion: assertEquals(false, node0.isLocalResultCall());
//       //  // Unstable assertion: assertEquals(false, node0.isString());
//       //  // Unstable assertion: assertEquals(false, node0.isHook());
//       //  // Unstable assertion: assertEquals(false, node0.isFalse());
//       //  // Unstable assertion: assertEquals(false, node0.isDec());
//       //  // Unstable assertion: assertEquals(false, node0.isFor());
//       //  // Unstable assertion: assertEquals(false, node0.isNot());
//       //  // Unstable assertion: assertEquals(0, node0.getLength());
//       //  // Unstable assertion: assertEquals(false, node0.isSwitch());
//       //  // Unstable assertion: assertEquals(false, node0.isIn());
//       //  // Unstable assertion: assertEquals(2826930, node0.getSourcePosition());
//       //  // Unstable assertion: assertEquals(false, node0.isScript());
//       //  // Unstable assertion: assertEquals(false, node0.isGetterDef());
//       //  // Unstable assertion: assertEquals(false, node0.isSyntheticBlock());
//       //  // Unstable assertion: assertEquals(false, node0.isBlock());
//       //  // Unstable assertion: assertEquals(false, node0.isBreak());
//       //  // Unstable assertion: assertEquals(false, node0.isCall());
//       //  // Unstable assertion: assertEquals(false, node0.isGetElem());
//       //  // Unstable assertion: assertEquals(false, node0.isIf());
//       //  // Unstable assertion: assertEquals(false, node0.isAssignAdd());
//       //  // Unstable assertion: assertEquals(false, node0.isName());
//       //  // Unstable assertion: assertEquals(false, node0.isNew());
//       //  // Unstable assertion: assertEquals(false, node0.isWhile());
//       //  // Unstable assertion: assertEquals(false, node0.isNE());
//       //  // Unstable assertion: assertEquals(0, node0.getChangeTime());
//       //  // Unstable assertion: assertNull(node0.getSourceFileName());
//       //  // Unstable assertion: assertEquals(false, node0.isVarArgs());
//       //  // Unstable assertion: assertEquals(false, node0.isLabelName());
//       //  // Unstable assertion: assertEquals(false, node0.isCast());
//       //  // Unstable assertion: assertEquals(false, node0.isThrow());
//       //  // Unstable assertion: assertEquals(false, node0.isNoSideEffectsCall());
//       //  // Unstable assertion: assertEquals(false, node0.isVar());
//       //  // Unstable assertion: assertEquals(false, node0.isAssign());
//       //  // Unstable assertion: assertEquals(false, node0.wasEmptyNode());
//       //  // Unstable assertion: assertEquals(false, node0.isGetProp());
//       //  // Unstable assertion: assertEquals(false, node0.isThis());
//       //  // Unstable assertion: assertEquals(false, node0.isOnlyModifiesThisCall());
//       //  // Unstable assertion: assertEquals(false, node0.isDebugger());
//       //  // Unstable assertion: assertEquals(false, node0.isOptionalArg());
//       //  // Unstable assertion: assertEquals(true, node0.mayMutateArguments());
//       //  // Unstable assertion: assertEquals(0, node0.getChildCount());
//       //  // Unstable assertion: assertEquals(false, node0.isExprResult());
//       //  // Unstable assertion: assertEquals(false, node0.isParamList());
//       //  // Unstable assertion: assertEquals(false, node0.isVoid());
//       //  // Unstable assertion: assertEquals(false, node0.isInc());
//       //  // Unstable assertion: assertEquals(true, node0.mayMutateGlobalStateOrThrow());
//       //  // Unstable assertion: assertEquals(false, node0.isAdd());
//       //  // Unstable assertion: assertEquals(false, node0.hasChildren());
//       //  // Unstable assertion: assertEquals(false, node0.isCatch());
//       //  // Unstable assertion: assertEquals(false, node0.isCase());
//       //  // Unstable assertion: assertEquals(false, node0.isTrue());
//       //  // Unstable assertion: assertEquals(false, node0.hasMoreThanOneChild());
//       //  // Unstable assertion: assertEquals(false, node0.isReturn());
//       //  // Unstable assertion: assertEquals(false, node0.isOnlyModifiesArgumentsCall());
//       //  // Unstable assertion: assertEquals(false, node0.isDo());
//       
//       Locale locale0 = Locale.TRADITIONAL_CHINESE;
//       //  // Unstable assertion: assertNotNull(locale0);
//       //  // Unstable assertion: assertEquals("zho", locale0.getISO3Language());
//       //  // Unstable assertion: assertEquals("zh", locale0.getLanguage());
//       //  // Unstable assertion: assertEquals("TW", locale0.getCountry());
//       //  // Unstable assertion: assertEquals("zh_TW", locale0.toString());
//       //  // Unstable assertion: assertEquals("TWN", locale0.getISO3Country());
//       //  // Unstable assertion: assertEquals("", locale0.getVariant());
//       
//       Set<String> set0 = locale0.getUnicodeLocaleKeys();
//       //  // Unstable assertion: assertNotNull(set0);
//       //  // Unstable assertion: assertEquals(0, set0.size());
//       //  // Unstable assertion: assertEquals(true, set0.isEmpty());
//       //  // Unstable assertion: assertEquals("zho", locale0.getISO3Language());
//       //  // Unstable assertion: assertEquals("zh", locale0.getLanguage());
//       //  // Unstable assertion: assertEquals("TW", locale0.getCountry());
//       //  // Unstable assertion: assertEquals("zh_TW", locale0.toString());
//       //  // Unstable assertion: assertEquals("TWN", locale0.getISO3Country());
//       //  // Unstable assertion: assertEquals("", locale0.getVariant());
//       
//       Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT3;
//       Config config0 = new Config(set0, set0, boolean0, config_LanguageMode0, boolean0);
//       //  // Unstable assertion: assertNotNull(config0);
//       //  // Unstable assertion: assertEquals(0, set0.size());
//       //  // Unstable assertion: assertEquals(true, set0.isEmpty());
//       //  // Unstable assertion: assertEquals("zho", locale0.getISO3Language());
//       //  // Unstable assertion: assertEquals("zh", locale0.getLanguage());
//       //  // Unstable assertion: assertEquals("TW", locale0.getCountry());
//       //  // Unstable assertion: assertEquals("zh_TW", locale0.toString());
//       //  // Unstable assertion: assertEquals("TWN", locale0.getISO3Country());
//       //  // Unstable assertion: assertEquals("", locale0.getVariant());
//       
//       Context context0 = Context.getCurrentContext();
//       //  // Unstable assertion: assertNotNull(context0);
//       //  // Unstable assertion: assertEquals(true, context0.isGeneratingDebugChanged());
//       //  // Unstable assertion: assertEquals(2147483647, context0.getMaximumInterpreterStackDepth());
//       //  // Unstable assertion: assertEquals(true, context0.isGeneratingSource());
//       //  // Unstable assertion: assertEquals(false, context0.isGeneratingDebug());
//       //  // Unstable assertion: assertEquals(false, context0.isSealed());
//       //  // Unstable assertion: assertEquals(0, context0.getOptimizationLevel());
//       //  // Unstable assertion: assertEquals(331, context0.getInstructionObserverThreshold());
//       //  // Unstable assertion: assertEquals(0, context0.getLanguageVersion());
//       //  // Unstable assertion: assertTrue(context0.generateObserverCount);
//       
//       ToolErrorReporter toolErrorReporter0 = (ToolErrorReporter)context0.getErrorReporter();
//       //  // Unstable assertion: assertNotNull(toolErrorReporter0);
//       //  // Unstable assertion: assertEquals(true, toolErrorReporter0.isReportingWarnings());
//       //  // Unstable assertion: assertEquals(false, toolErrorReporter0.hasReportedError());
//       //  // Unstable assertion: assertEquals(true, context0.isGeneratingDebugChanged());
//       //  // Unstable assertion: assertEquals(2147483647, context0.getMaximumInterpreterStackDepth());
//       //  // Unstable assertion: assertEquals(true, context0.isGeneratingSource());
//       //  // Unstable assertion: assertEquals(false, context0.isGeneratingDebug());
//       //  // Unstable assertion: assertEquals(false, context0.isSealed());
//       //  // Unstable assertion: assertEquals(0, context0.getOptimizationLevel());
//       //  // Unstable assertion: assertEquals(331, context0.getInstructionObserverThreshold());
//       //  // Unstable assertion: assertEquals(0, context0.getLanguageVersion());
//       //  // Unstable assertion: assertTrue(context0.generateObserverCount);
//       
//       JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, comment0, node0, config0, toolErrorReporter0);
//       //  // Unstable assertion: assertNotNull(jsDocInfoParser0);
//       //  // Unstable assertion: assertEquals(true, toolErrorReporter0.isReportingWarnings());
//       //  // Unstable assertion: assertEquals(false, toolErrorReporter0.hasReportedError());
//       //  // Unstable assertion: assertEquals(true, context0.isGeneratingDebugChanged());
//       //  // Unstable assertion: assertEquals(2147483647, context0.getMaximumInterpreterStackDepth());
//       //  // Unstable assertion: assertEquals(true, context0.isGeneratingSource());
//       //  // Unstable assertion: assertEquals(false, context0.isGeneratingDebug());
//       //  // Unstable assertion: assertEquals(false, context0.isSealed());
//       //  // Unstable assertion: assertEquals(0, context0.getOptimizationLevel());
//       //  // Unstable assertion: assertEquals(331, context0.getInstructionObserverThreshold());
//       //  // Unstable assertion: assertEquals(0, context0.getLanguageVersion());
//       //  // Unstable assertion: assertNull(xmlDotQuery0.getJsDoc());
//       //  // Unstable assertion: assertEquals(false, xmlDotQuery0.hasChildren());
//       //  // Unstable assertion: assertEquals("146", xmlDotQuery0.toString());
//       //  // Unstable assertion: assertEquals(-1, xmlDotQuery0.getLineno());
//       //  // Unstable assertion: assertEquals(146, xmlDotQuery0.getType());
//       //  // Unstable assertion: assertEquals(-1, xmlDotQuery0.getRp());
//       //  // Unstable assertion: assertEquals(1, xmlDotQuery0.getLength());
//       //  // Unstable assertion: assertEquals(690, xmlDotQuery0.getAbsolutePosition());
//       //  // Unstable assertion: assertEquals(0, xmlDotQuery0.depth());
//       //  // Unstable assertion: assertEquals(-1, xmlDotQuery0.getOperatorPosition());
//       //  // Unstable assertion: assertEquals(690, xmlDotQuery0.getPosition());
//       //  // Unstable assertion: assertEquals(0, set0.size());
//       //  // Unstable assertion: assertEquals(true, set0.isEmpty());
//       //  // Unstable assertion: assertEquals(true, node0.isNumber());
//       //  // Unstable assertion: assertEquals(false, node0.isQuotedString());
//       //  // Unstable assertion: assertEquals(false, node0.isStringKey());
//       //  // Unstable assertion: assertEquals(false, node0.isWith());
//       //  // Unstable assertion: assertEquals(false, node0.isDelProp());
//       //  // Unstable assertion: assertEquals(false, node0.isTypeOf());
//       //  // Unstable assertion: assertEquals(false, node0.isContinue());
//       //  // Unstable assertion: assertEquals(false, node0.isOr());
//       //  // Unstable assertion: assertEquals(false, node0.isFunction());
//       //  // Unstable assertion: assertEquals(39, node0.getType());
//       //  // Unstable assertion: assertEquals(690, node0.getLineno());
//       //  // Unstable assertion: assertEquals(false, node0.isAnd());
//       //  // Unstable assertion: assertEquals(false, node0.isObjectLit());
//       //  // Unstable assertion: assertEquals(690, node0.getCharno());
//       //  // Unstable assertion: assertEquals(false, node0.isComma());
//       //  // Unstable assertion: assertEquals(false, node0.isFromExterns());
//       //  // Unstable assertion: assertEquals(0, node0.getSideEffectFlags());
//       //  // Unstable assertion: assertEquals(false, node0.isNull());
//       //  // Unstable assertion: assertEquals(false, node0.isTry());
//       //  // Unstable assertion: assertEquals(false, node0.hasOneChild());
//       //  // Unstable assertion: assertEquals(false, node0.isLabel());
//       //  // Unstable assertion: assertEquals(false, node0.isRegExp());
//       //  // Unstable assertion: assertEquals(false, node0.isDefaultCase());
//       //  // Unstable assertion: assertEquals(false, node0.isInstanceOf());
//       //  // Unstable assertion: assertEquals(false, node0.isEmpty());
//       //  // Unstable assertion: assertEquals(false, node0.isArrayLit());
//       //  // Unstable assertion: assertEquals(false, node0.isSetterDef());
//       //  // Unstable assertion: assertEquals(false, node0.isLocalResultCall());
//       //  // Unstable assertion: assertEquals(false, node0.isString());
//       //  // Unstable assertion: assertEquals(false, node0.isHook());
//       //  // Unstable assertion: assertEquals(false, node0.isFalse());
//       //  // Unstable assertion: assertEquals(false, node0.isDec());
//       //  // Unstable assertion: assertEquals(false, node0.isFor());
//       //  // Unstable assertion: assertEquals(false, node0.isNot());
//       //  // Unstable assertion: assertEquals(0, node0.getLength());
//       //  // Unstable assertion: assertEquals(false, node0.isSwitch());
//       //  // Unstable assertion: assertEquals(false, node0.isIn());
//       //  // Unstable assertion: assertEquals(2826930, node0.getSourcePosition());
//       //  // Unstable assertion: assertEquals(false, node0.isScript());
//       //  // Unstable assertion: assertEquals(false, node0.isGetterDef());
//       //  // Unstable assertion: assertEquals(false, node0.isSyntheticBlock());
//       //  // Unstable assertion: assertEquals(false, node0.isBlock());
//       //  // Unstable assertion: assertEquals(false, node0.isBreak());
//       //  // Unstable assertion: assertEquals(false, node0.isCall());
//       //  // Unstable assertion: assertEquals(false, node0.isGetElem());
//       //  // Unstable assertion: assertEquals(false, node0.isIf());
//       //  // Unstable assertion: assertEquals(false, node0.isAssignAdd());
//       //  // Unstable assertion: assertEquals(false, node0.isName());
//       //  // Unstable assertion: assertEquals(false, node0.isNew());
//       //  // Unstable assertion: assertEquals(false, node0.isWhile());
//       //  // Unstable assertion: assertEquals(false, node0.isNE());
//       //  // Unstable assertion: assertEquals(0, node0.getChangeTime());
//       //  // Unstable assertion: assertNull(node0.getSourceFileName());
//       //  // Unstable assertion: assertEquals(false, node0.isVarArgs());
//       //  // Unstable assertion: assertEquals(false, node0.isLabelName());
//       //  // Unstable assertion: assertEquals(false, node0.isCast());
//       //  // Unstable assertion: assertEquals(false, node0.isThrow());
//       //  // Unstable assertion: assertEquals(false, node0.isNoSideEffectsCall());
//       //  // Unstable assertion: assertEquals(false, node0.isVar());
//       //  // Unstable assertion: assertEquals(false, node0.isAssign());
//       //  // Unstable assertion: assertEquals(false, node0.wasEmptyNode());
//       //  // Unstable assertion: assertEquals(false, node0.isGetProp());
//       //  // Unstable assertion: assertEquals(false, node0.isThis());
//       //  // Unstable assertion: assertEquals(false, node0.isOnlyModifiesThisCall());
//       //  // Unstable assertion: assertEquals(false, node0.isDebugger());
//       //  // Unstable assertion: assertEquals(false, node0.isOptionalArg());
//       //  // Unstable assertion: assertEquals(true, node0.mayMutateArguments());
//       //  // Unstable assertion: assertEquals(0, node0.getChildCount());
//       //  // Unstable assertion: assertEquals(false, node0.isExprResult());
//       //  // Unstable assertion: assertEquals(false, node0.isParamList());
//       //  // Unstable assertion: assertEquals(false, node0.isVoid());
//       //  // Unstable assertion: assertEquals(false, node0.isInc());
//       //  // Unstable assertion: assertEquals(true, node0.mayMutateGlobalStateOrThrow());
//       //  // Unstable assertion: assertEquals(false, node0.isAdd());
//       //  // Unstable assertion: assertEquals(false, node0.hasChildren());
//       //  // Unstable assertion: assertEquals(false, node0.isCatch());
//       //  // Unstable assertion: assertEquals(false, node0.isCase());
//       //  // Unstable assertion: assertEquals(false, node0.isTrue());
//       //  // Unstable assertion: assertEquals(false, node0.hasMoreThanOneChild());
//       //  // Unstable assertion: assertEquals(false, node0.isReturn());
//       //  // Unstable assertion: assertEquals(false, node0.isOnlyModifiesArgumentsCall());
//       //  // Unstable assertion: assertEquals(false, node0.isDo());
//       //  // Unstable assertion: assertEquals("zho", locale0.getISO3Language());
//       //  // Unstable assertion: assertEquals("zh", locale0.getLanguage());
//       //  // Unstable assertion: assertEquals("TW", locale0.getCountry());
//       //  // Unstable assertion: assertEquals("zh_TW", locale0.toString());
//       //  // Unstable assertion: assertEquals("TWN", locale0.getISO3Country());
//       //  // Unstable assertion: assertEquals("", locale0.getVariant());
//       //  // Unstable assertion: assertTrue(context0.generateObserverCount);
//       
//       boolean boolean1 = jsDocInfoParser0.parse();
//       //  // Unstable assertion: assertEquals(true, toolErrorReporter0.isReportingWarnings());
//       //  // Unstable assertion: assertEquals(false, toolErrorReporter0.hasReportedError());
//       //  // Unstable assertion: assertEquals(true, context0.isGeneratingDebugChanged());
//       //  // Unstable assertion: assertEquals(2147483647, context0.getMaximumInterpreterStackDepth());
//       //  // Unstable assertion: assertEquals(true, context0.isGeneratingSource());
//       //  // Unstable assertion: assertEquals(false, context0.isGeneratingDebug());
//       //  // Unstable assertion: assertEquals(false, context0.isSealed());
//       //  // Unstable assertion: assertEquals(0, context0.getOptimizationLevel());
//       //  // Unstable assertion: assertEquals(331, context0.getInstructionObserverThreshold());
//       //  // Unstable assertion: assertEquals(0, context0.getLanguageVersion());
//       //  // Unstable assertion: assertNull(xmlDotQuery0.getJsDoc());
//       //  // Unstable assertion: assertEquals(false, xmlDotQuery0.hasChildren());
//       //  // Unstable assertion: assertEquals("146", xmlDotQuery0.toString());
//       //  // Unstable assertion: assertEquals(-1, xmlDotQuery0.getLineno());
//       //  // Unstable assertion: assertEquals(146, xmlDotQuery0.getType());
//       //  // Unstable assertion: assertEquals(-1, xmlDotQuery0.getRp());
//       //  // Unstable assertion: assertEquals(1, xmlDotQuery0.getLength());
//       //  // Unstable assertion: assertEquals(690, xmlDotQuery0.getAbsolutePosition());
//       //  // Unstable assertion: assertEquals(0, xmlDotQuery0.depth());
//       //  // Unstable assertion: assertEquals(-1, xmlDotQuery0.getOperatorPosition());
//       //  // Unstable assertion: assertEquals(690, xmlDotQuery0.getPosition());
//       //  // Unstable assertion: assertEquals(0, set0.size());
//       //  // Unstable assertion: assertEquals(true, set0.isEmpty());
//       //  // Unstable assertion: assertEquals(true, node0.isNumber());
//       //  // Unstable assertion: assertEquals(false, node0.isQuotedString());
//       //  // Unstable assertion: assertEquals(false, node0.isStringKey());
//       //  // Unstable assertion: assertEquals(false, node0.isWith());
//       //  // Unstable assertion: assertEquals(false, node0.isDelProp());
//       //  // Unstable assertion: assertEquals(false, node0.isTypeOf());
//       //  // Unstable assertion: assertEquals(false, node0.isContinue());
//       //  // Unstable assertion: assertEquals(false, node0.isOr());
//       //  // Unstable assertion: assertEquals(false, node0.isFunction());
//       //  // Unstable assertion: assertEquals(39, node0.getType());
//       //  // Unstable assertion: assertEquals(690, node0.getLineno());
//       //  // Unstable assertion: assertEquals(false, node0.isAnd());
//       //  // Unstable assertion: assertEquals(false, node0.isObjectLit());
//       //  // Unstable assertion: assertEquals(690, node0.getCharno());
//       //  // Unstable assertion: assertEquals(false, node0.isComma());
//       //  // Unstable assertion: assertEquals(false, node0.isFromExterns());
//       //  // Unstable assertion: assertEquals(0, node0.getSideEffectFlags());
//       //  // Unstable assertion: assertEquals(false, node0.isNull());
//       //  // Unstable assertion: assertEquals(false, node0.isTry());
//       //  // Unstable assertion: assertEquals(false, node0.hasOneChild());
//       //  // Unstable assertion: assertEquals(false, node0.isLabel());
//       //  // Unstable assertion: assertEquals(false, node0.isRegExp());
//       //  // Unstable assertion: assertEquals(false, node0.isDefaultCase());
//       //  // Unstable assertion: assertEquals(false, node0.isInstanceOf());
//       //  // Unstable assertion: assertEquals(false, node0.isEmpty());
//       //  // Unstable assertion: assertEquals(false, node0.isArrayLit());
//       //  // Unstable assertion: assertEquals(false, node0.isSetterDef());
//       //  // Unstable assertion: assertEquals(false, node0.isLocalResultCall());
//       //  // Unstable assertion: assertEquals(false, node0.isString());
//       //  // Unstable assertion: assertEquals(false, node0.isHook());
//       //  // Unstable assertion: assertEquals(false, node0.isFalse());
//       //  // Unstable assertion: assertEquals(false, node0.isDec());
//       //  // Unstable assertion: assertEquals(false, node0.isFor());
//       //  // Unstable assertion: assertEquals(false, node0.isNot());
//       //  // Unstable assertion: assertEquals(0, node0.getLength());
//       //  // Unstable assertion: assertEquals(false, node0.isSwitch());
//       //  // Unstable assertion: assertEquals(false, node0.isIn());
//       //  // Unstable assertion: assertEquals(2826930, node0.getSourcePosition());
//       //  // Unstable assertion: assertEquals(false, node0.isScript());
//       //  // Unstable assertion: assertEquals(false, node0.isGetterDef());
//       //  // Unstable assertion: assertEquals(false, node0.isSyntheticBlock());
//       //  // Unstable assertion: assertEquals(false, node0.isBlock());
//       //  // Unstable assertion: assertEquals(false, node0.isBreak());
//       //  // Unstable assertion: assertEquals(false, node0.isCall());
//       //  // Unstable assertion: assertEquals(false, node0.isGetElem());
//       //  // Unstable assertion: assertEquals(false, node0.isIf());
//       //  // Unstable assertion: assertEquals(false, node0.isAssignAdd());
//       //  // Unstable assertion: assertEquals(false, node0.isName());
//       //  // Unstable assertion: assertEquals(false, node0.isNew());
//       //  // Unstable assertion: assertEquals(false, node0.isWhile());
//       //  // Unstable assertion: assertEquals(false, node0.isNE());
//       //  // Unstable assertion: assertEquals(0, node0.getChangeTime());
//       //  // Unstable assertion: assertNull(node0.getSourceFileName());
//       //  // Unstable assertion: assertEquals(false, node0.isVarArgs());
//       //  // Unstable assertion: assertEquals(false, node0.isLabelName());
//       //  // Unstable assertion: assertEquals(false, node0.isCast());
//       //  // Unstable assertion: assertEquals(false, node0.isThrow());
//       //  // Unstable assertion: assertEquals(false, node0.isNoSideEffectsCall());
//       //  // Unstable assertion: assertEquals(false, node0.isVar());
//       //  // Unstable assertion: assertEquals(false, node0.isAssign());
//       //  // Unstable assertion: assertEquals(false, node0.wasEmptyNode());
//       //  // Unstable assertion: assertEquals(false, node0.isGetProp());
//       //  // Unstable assertion: assertEquals(false, node0.isThis());
//       //  // Unstable assertion: assertEquals(false, node0.isOnlyModifiesThisCall());
//       //  // Unstable assertion: assertEquals(false, node0.isDebugger());
//       //  // Unstable assertion: assertEquals(false, node0.isOptionalArg());
//       //  // Unstable assertion: assertEquals(true, node0.mayMutateArguments());
//       //  // Unstable assertion: assertEquals(0, node0.getChildCount());
//       //  // Unstable assertion: assertEquals(false, node0.isExprResult());
//       //  // Unstable assertion: assertEquals(false, node0.isParamList());
//       //  // Unstable assertion: assertEquals(false, node0.isVoid());
//       //  // Unstable assertion: assertEquals(false, node0.isInc());
//       //  // Unstable assertion: assertEquals(true, node0.mayMutateGlobalStateOrThrow());
//       //  // Unstable assertion: assertEquals(false, node0.isAdd());
//       //  // Unstable assertion: assertEquals(false, node0.hasChildren());
//       //  // Unstable assertion: assertEquals(false, node0.isCatch());
//       //  // Unstable assertion: assertEquals(false, node0.isCase());
//       //  // Unstable assertion: assertEquals(false, node0.isTrue());
//       //  // Unstable assertion: assertEquals(false, node0.hasMoreThanOneChild());
//       //  // Unstable assertion: assertEquals(false, node0.isReturn());
//       //  // Unstable assertion: assertEquals(false, node0.isOnlyModifiesArgumentsCall());
//       //  // Unstable assertion: assertEquals(false, node0.isDo());
//       //  // Unstable assertion: assertEquals("zho", locale0.getISO3Language());
//       //  // Unstable assertion: assertEquals("zh", locale0.getLanguage());
//       //  // Unstable assertion: assertEquals("TW", locale0.getCountry());
//       //  // Unstable assertion: assertEquals("zh_TW", locale0.toString());
//       //  // Unstable assertion: assertEquals("TWN", locale0.getISO3Country());
//       //  // Unstable assertion: assertEquals("", locale0.getVariant());
//       //  // Unstable assertion: assertTrue(context0.generateObserverCount);
//       //  // Unstable assertion: assertTrue(boolean1);
//       //  // Unstable assertion: assertFalse(boolean0 == boolean1);
//       //  // Unstable assertion: assertFalse(boolean1 == boolean0);
//   }

  @Test
  public void test26()  throws Throwable  {
      String string0 = "null";
      Node node0 = JsDocInfoParser.parseTypeString(string0);
      assertNotNull(node0);
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isIf());
      assertEquals(40, node0.getType());
      assertEquals(false, node0.isComma());
      assertEquals(0, node0.getChangeTime());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isCast());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isDelProp());
      assertEquals(0, node0.getCharno());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isFromExterns());
      assertEquals(true, node0.isString());
      assertEquals(false, node0.isStringKey());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isParamList());
      assertEquals(4, node0.getLength());
      assertEquals(0, node0.getLineno());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isExprResult());
      assertEquals(true, node0.mayMutateArguments());
      assertEquals(false, node0.isHook());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isScript());
      assertEquals(false, node0.isThrow());
      assertEquals(true, node0.mayMutateGlobalStateOrThrow());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isSwitch());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isFalse());
      assertEquals(0, node0.getSourcePosition());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isOnlyModifiesArgumentsCall());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isAssign());
  }

  @Test
  public void test27()  throws Throwable  {
      String string0 = "~d/D]);:|";
      JsDocTokenStream jsDocTokenStream0 = null;
      int int0 = 1560;
      XmlDotQuery xmlDotQuery0 = new XmlDotQuery(int0, int0);
      assertNotNull(xmlDotQuery0);
      assertNull(xmlDotQuery0.getJsDoc());
      assertEquals(-1, xmlDotQuery0.getRp());
      assertEquals(1560, xmlDotQuery0.getAbsolutePosition());
      assertEquals(146, xmlDotQuery0.getType());
      assertEquals(0, xmlDotQuery0.depth());
      assertEquals("146", xmlDotQuery0.toString());
      assertEquals(false, xmlDotQuery0.hasChildren());
      assertEquals(1560, xmlDotQuery0.getLength());
      assertEquals(1560, xmlDotQuery0.getPosition());
      assertEquals(-1, xmlDotQuery0.getLineno());
      assertEquals(-1, xmlDotQuery0.getOperatorPosition());
      
      Comment comment0 = xmlDotQuery0.getJsDocNode();
      assertNull(comment0);
      assertNull(xmlDotQuery0.getJsDoc());
      assertEquals(-1, xmlDotQuery0.getRp());
      assertEquals(1560, xmlDotQuery0.getAbsolutePosition());
      assertEquals(146, xmlDotQuery0.getType());
      assertEquals(0, xmlDotQuery0.depth());
      assertEquals("146", xmlDotQuery0.toString());
      assertEquals(false, xmlDotQuery0.hasChildren());
      assertEquals(1560, xmlDotQuery0.getLength());
      assertEquals(1560, xmlDotQuery0.getPosition());
      assertEquals(-1, xmlDotQuery0.getLineno());
      assertEquals(-1, xmlDotQuery0.getOperatorPosition());
      
      Node node0 = Node.newString(int0, string0, int0, int0);
      assertNotNull(node0);
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isLabel());
      assertEquals(1560, node0.getType());
      assertEquals(false, node0.isCast());
      assertEquals(false, node0.isTypeOf());
      assertEquals(true, node0.mayMutateGlobalStateOrThrow());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isVarArgs());
      assertEquals(true, node0.mayMutateArguments());
      assertEquals(0, node0.getChildCount());
      assertEquals(6391320, node0.getSourcePosition());
      assertEquals(1560, node0.getCharno());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isLabelName());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isOnlyModifiesArgumentsCall());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(0, node0.getChangeTime());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isIf());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isScript());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isStringKey());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isDec());
      assertEquals(1560, node0.getLineno());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isString());
      assertEquals(false, node0.hasOneChild());
      
      Locale locale0 = Locale.TAIWAN;
      assertNotNull(locale0);
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh_TW", locale0.toString());
      
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      assertNotNull(set0);
      assertEquals(0, set0.size());
      assertEquals(true, set0.isEmpty());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh_TW", locale0.toString());
      
      boolean boolean0 = false;
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT3;
      Config config0 = new Config(set0, set0, boolean0, config_LanguageMode0, boolean0);
      assertNotNull(config0);
      assertEquals(0, set0.size());
      assertEquals(true, set0.isEmpty());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh_TW", locale0.toString());
      
      ErrorCollector errorCollector0 = new ErrorCollector();
      assertNotNull(errorCollector0);
      
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, comment0, node0, config0, errorCollector0);
      assertNotNull(jsDocInfoParser0);
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isLabel());
      assertEquals(1560, node0.getType());
      assertEquals(false, node0.isCast());
      assertEquals(false, node0.isTypeOf());
      assertEquals(true, node0.mayMutateGlobalStateOrThrow());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isVarArgs());
      assertEquals(true, node0.mayMutateArguments());
      assertEquals(0, node0.getChildCount());
      assertEquals(6391320, node0.getSourcePosition());
      assertEquals(1560, node0.getCharno());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isLabelName());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isOnlyModifiesArgumentsCall());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(0, node0.getChangeTime());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isIf());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isScript());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isStringKey());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isDec());
      assertEquals(1560, node0.getLineno());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isString());
      assertEquals(false, node0.hasOneChild());
      assertEquals(0, set0.size());
      assertEquals(true, set0.isEmpty());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh_TW", locale0.toString());
      assertNull(xmlDotQuery0.getJsDoc());
      assertEquals(-1, xmlDotQuery0.getRp());
      assertEquals(1560, xmlDotQuery0.getAbsolutePosition());
      assertEquals(146, xmlDotQuery0.getType());
      assertEquals(0, xmlDotQuery0.depth());
      assertEquals("146", xmlDotQuery0.toString());
      assertEquals(false, xmlDotQuery0.hasChildren());
      assertEquals(1560, xmlDotQuery0.getLength());
      assertEquals(1560, xmlDotQuery0.getPosition());
      assertEquals(-1, xmlDotQuery0.getLineno());
      assertEquals(-1, xmlDotQuery0.getOperatorPosition());
      
      Node.FileLevelJsDocBuilder node_FileLevelJsDocBuilder0 = node0.new FileLevelJsDocBuilder();
      assertNotNull(node_FileLevelJsDocBuilder0);
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isLabel());
      assertEquals(1560, node0.getType());
      assertEquals(false, node0.isCast());
      assertEquals(false, node0.isTypeOf());
      assertEquals(true, node0.mayMutateGlobalStateOrThrow());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isVarArgs());
      assertEquals(true, node0.mayMutateArguments());
      assertEquals(0, node0.getChildCount());
      assertEquals(6391320, node0.getSourcePosition());
      assertEquals(1560, node0.getCharno());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isLabelName());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isOnlyModifiesArgumentsCall());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(0, node0.getChangeTime());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isIf());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isScript());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isStringKey());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isDec());
      assertEquals(1560, node0.getLineno());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isString());
      assertEquals(false, node0.hasOneChild());
      
      jsDocInfoParser0.setFileLevelJsDocBuilder(node_FileLevelJsDocBuilder0);
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isLabel());
      assertEquals(1560, node0.getType());
      assertEquals(false, node0.isCast());
      assertEquals(false, node0.isTypeOf());
      assertEquals(true, node0.mayMutateGlobalStateOrThrow());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isVarArgs());
      assertEquals(true, node0.mayMutateArguments());
      assertEquals(0, node0.getChildCount());
      assertEquals(6391320, node0.getSourcePosition());
      assertEquals(1560, node0.getCharno());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isLabelName());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isOnlyModifiesArgumentsCall());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(0, node0.getChangeTime());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isIf());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isScript());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isStringKey());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isDec());
      assertEquals(1560, node0.getLineno());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isString());
      assertEquals(false, node0.hasOneChild());
      assertEquals(0, set0.size());
      assertEquals(true, set0.isEmpty());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh_TW", locale0.toString());
      assertNull(xmlDotQuery0.getJsDoc());
      assertEquals(-1, xmlDotQuery0.getRp());
      assertEquals(1560, xmlDotQuery0.getAbsolutePosition());
      assertEquals(146, xmlDotQuery0.getType());
      assertEquals(0, xmlDotQuery0.depth());
      assertEquals("146", xmlDotQuery0.toString());
      assertEquals(false, xmlDotQuery0.hasChildren());
      assertEquals(1560, xmlDotQuery0.getLength());
      assertEquals(1560, xmlDotQuery0.getPosition());
      assertEquals(-1, xmlDotQuery0.getLineno());
      assertEquals(-1, xmlDotQuery0.getOperatorPosition());
  }

  @Test
  public void test28()  throws Throwable  {
      String string0 = "~d/D]);:|";
      JsDocTokenStream jsDocTokenStream0 = null;
      int int0 = 1560;
      XmlDotQuery xmlDotQuery0 = new XmlDotQuery(int0, int0);
      assertNotNull(xmlDotQuery0);
      assertEquals(-1, xmlDotQuery0.getLineno());
      assertEquals(-1, xmlDotQuery0.getRp());
      assertEquals(1560, xmlDotQuery0.getAbsolutePosition());
      assertEquals(146, xmlDotQuery0.getType());
      assertEquals(1560, xmlDotQuery0.getLength());
      assertNull(xmlDotQuery0.getJsDoc());
      assertEquals(1560, xmlDotQuery0.getPosition());
      assertEquals("146", xmlDotQuery0.toString());
      assertEquals(-1, xmlDotQuery0.getOperatorPosition());
      assertEquals(false, xmlDotQuery0.hasChildren());
      assertEquals(0, xmlDotQuery0.depth());
      
      Comment comment0 = xmlDotQuery0.getJsDocNode();
      assertNull(comment0);
      assertEquals(-1, xmlDotQuery0.getLineno());
      assertEquals(-1, xmlDotQuery0.getRp());
      assertEquals(1560, xmlDotQuery0.getAbsolutePosition());
      assertEquals(146, xmlDotQuery0.getType());
      assertEquals(1560, xmlDotQuery0.getLength());
      assertNull(xmlDotQuery0.getJsDoc());
      assertEquals(1560, xmlDotQuery0.getPosition());
      assertEquals("146", xmlDotQuery0.toString());
      assertEquals(-1, xmlDotQuery0.getOperatorPosition());
      assertEquals(false, xmlDotQuery0.hasChildren());
      assertEquals(0, xmlDotQuery0.depth());
      
      Node node0 = Node.newString(int0, string0, int0, int0);
      assertNotNull(node0);
      assertEquals(false, node0.isExprResult());
      assertEquals(1560, node0.getLineno());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isStringKey());
      assertEquals(false, node0.isTrue());
      assertEquals(6391320, node0.getSourcePosition());
      assertEquals(false, node0.isOnlyModifiesArgumentsCall());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isReturn());
      assertEquals(1560, node0.getCharno());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isString());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(true, node0.mayMutateArguments());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isIn());
      assertEquals(true, node0.mayMutateGlobalStateOrThrow());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isScript());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isInc());
      assertEquals(0, node0.getChangeTime());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isDelProp());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isCatch());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isVoid());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isCast());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isFunction());
      assertEquals(1560, node0.getType());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isName());
      
      Locale locale0 = Locale.TAIWAN;
      assertNotNull(locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("TWN", locale0.getISO3Country());
      
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      assertNotNull(set0);
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals(true, set0.isEmpty());
      assertEquals(0, set0.size());
      
      boolean boolean0 = false;
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT3;
      Config config0 = new Config(set0, set0, boolean0, config_LanguageMode0, boolean0);
      assertNotNull(config0);
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals(true, set0.isEmpty());
      assertEquals(0, set0.size());
      
      ErrorCollector errorCollector0 = new ErrorCollector();
      assertNotNull(errorCollector0);
      
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, comment0, node0, config0, errorCollector0);
      assertNotNull(jsDocInfoParser0);
      assertEquals(false, node0.isExprResult());
      assertEquals(1560, node0.getLineno());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isStringKey());
      assertEquals(false, node0.isTrue());
      assertEquals(6391320, node0.getSourcePosition());
      assertEquals(false, node0.isOnlyModifiesArgumentsCall());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isReturn());
      assertEquals(1560, node0.getCharno());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isString());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(true, node0.mayMutateArguments());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isIn());
      assertEquals(true, node0.mayMutateGlobalStateOrThrow());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isScript());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isInc());
      assertEquals(0, node0.getChangeTime());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isDelProp());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isCatch());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isVoid());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isCast());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isFunction());
      assertEquals(1560, node0.getType());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isName());
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals(true, set0.isEmpty());
      assertEquals(0, set0.size());
      assertEquals(-1, xmlDotQuery0.getLineno());
      assertEquals(-1, xmlDotQuery0.getRp());
      assertEquals(1560, xmlDotQuery0.getAbsolutePosition());
      assertEquals(146, xmlDotQuery0.getType());
      assertEquals(1560, xmlDotQuery0.getLength());
      assertNull(xmlDotQuery0.getJsDoc());
      assertEquals(1560, xmlDotQuery0.getPosition());
      assertEquals("146", xmlDotQuery0.toString());
      assertEquals(-1, xmlDotQuery0.getOperatorPosition());
      assertEquals(false, xmlDotQuery0.hasChildren());
      assertEquals(0, xmlDotQuery0.depth());
      
      boolean boolean1 = jsDocInfoParser0.hasParsedJSDocInfo();
      assertEquals(false, node0.isExprResult());
      assertEquals(1560, node0.getLineno());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isStringKey());
      assertEquals(false, node0.isTrue());
      assertEquals(6391320, node0.getSourcePosition());
      assertEquals(false, node0.isOnlyModifiesArgumentsCall());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isReturn());
      assertEquals(1560, node0.getCharno());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isString());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(true, node0.mayMutateArguments());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isIn());
      assertEquals(true, node0.mayMutateGlobalStateOrThrow());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isScript());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isInc());
      assertEquals(0, node0.getChangeTime());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isDelProp());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isCatch());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isVoid());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isCast());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isFunction());
      assertEquals(1560, node0.getType());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isName());
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals(true, set0.isEmpty());
      assertEquals(0, set0.size());
      assertEquals(-1, xmlDotQuery0.getLineno());
      assertEquals(-1, xmlDotQuery0.getRp());
      assertEquals(1560, xmlDotQuery0.getAbsolutePosition());
      assertEquals(146, xmlDotQuery0.getType());
      assertEquals(1560, xmlDotQuery0.getLength());
      assertNull(xmlDotQuery0.getJsDoc());
      assertEquals(1560, xmlDotQuery0.getPosition());
      assertEquals("146", xmlDotQuery0.toString());
      assertEquals(-1, xmlDotQuery0.getOperatorPosition());
      assertEquals(false, xmlDotQuery0.hasChildren());
      assertEquals(0, xmlDotQuery0.depth());
      assertFalse(boolean1);
      assertTrue(boolean0 == boolean1);
      assertTrue(boolean1 == boolean0);
  }

  @Test
  public void test29()  throws Throwable  {
      String string0 = "qFOHc";
      Node node0 = JsDocInfoParser.parseTypeString(string0);
      assertNotNull(node0);
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isThis());
      assertEquals(5, node0.getLength());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isIf());
      assertEquals(0, node0.getLineno());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isQuotedString());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isTry());
      assertEquals(true, node0.isString());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isScript());
      assertEquals(false, node0.isAdd());
      assertEquals(0, node0.getSourcePosition());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isCast());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isNull());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isBreak());
      assertEquals(true, node0.mayMutateArguments());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isNumber());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isOnlyModifiesArgumentsCall());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isTypeOf());
      assertEquals(0, node0.getCharno());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(0, node0.getChangeTime());
      assertEquals(true, node0.mayMutateGlobalStateOrThrow());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isStringKey());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.hasChildren());
      assertEquals(40, node0.getType());
      assertEquals(false, node0.isComma());
      
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream(string0);
      assertNotNull(jsDocTokenStream0);
      
      int int0 = (-400);
      XmlPropRef xmlPropRef0 = new XmlPropRef(int0);
      assertNotNull(xmlPropRef0);
      assertEquals("79", xmlPropRef0.toString());
      assertEquals(-400, xmlPropRef0.getAbsolutePosition());
      assertEquals(-1, xmlPropRef0.getAtPos());
      assertEquals(false, xmlPropRef0.hasChildren());
      assertEquals(-400, xmlPropRef0.getPosition());
      assertEquals(0, xmlPropRef0.depth());
      assertEquals(-1, xmlPropRef0.getColonPos());
      assertNull(xmlPropRef0.getJsDoc());
      assertEquals(false, xmlPropRef0.isAttributeAccess());
      assertEquals(-1, xmlPropRef0.getLineno());
      assertEquals(1, xmlPropRef0.getLength());
      assertEquals(79, xmlPropRef0.getType());
      
      Comment comment0 = xmlPropRef0.getJsDocNode();
      assertNull(comment0);
      assertEquals("79", xmlPropRef0.toString());
      assertEquals(-400, xmlPropRef0.getAbsolutePosition());
      assertEquals(-1, xmlPropRef0.getAtPos());
      assertEquals(false, xmlPropRef0.hasChildren());
      assertEquals(-400, xmlPropRef0.getPosition());
      assertEquals(0, xmlPropRef0.depth());
      assertEquals(-1, xmlPropRef0.getColonPos());
      assertNull(xmlPropRef0.getJsDoc());
      assertEquals(false, xmlPropRef0.isAttributeAccess());
      assertEquals(-1, xmlPropRef0.getLineno());
      assertEquals(1, xmlPropRef0.getLength());
      assertEquals(79, xmlPropRef0.getType());
      
      Charset charset0 = Charset.defaultCharset();
      assertNotNull(charset0);
      assertEquals("UTF-8", charset0.displayName());
      assertEquals(true, charset0.canEncode());
      assertEquals("UTF-8", charset0.toString());
      assertEquals(true, charset0.isRegistered());
      assertEquals("UTF-8", charset0.name());
      
      Set<String> set0 = charset0.aliases();
      assertNotNull(set0);
      assertEquals("UTF-8", charset0.displayName());
      assertEquals(true, charset0.canEncode());
      assertEquals("UTF-8", charset0.toString());
      assertEquals(true, charset0.isRegistered());
      assertEquals("UTF-8", charset0.name());
      assertEquals(false, set0.isEmpty());
      assertEquals(2, set0.size());
      
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT3;
      boolean boolean0 = node0.isAssignAdd();
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isThis());
      assertEquals(5, node0.getLength());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isIf());
      assertEquals(0, node0.getLineno());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isQuotedString());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isTry());
      assertEquals(true, node0.isString());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isScript());
      assertEquals(false, node0.isAdd());
      assertEquals(0, node0.getSourcePosition());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isCast());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isNull());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isBreak());
      assertEquals(true, node0.mayMutateArguments());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isNumber());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isOnlyModifiesArgumentsCall());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isTypeOf());
      assertEquals(0, node0.getCharno());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(0, node0.getChangeTime());
      assertEquals(true, node0.mayMutateGlobalStateOrThrow());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isStringKey());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.hasChildren());
      assertEquals(40, node0.getType());
      assertEquals(false, node0.isComma());
      assertFalse(boolean0);
      
      Context context0 = new Context();
      assertNotNull(context0);
      assertEquals(true, context0.isGeneratingSource());
      assertEquals(0, context0.getOptimizationLevel());
      assertEquals(false, context0.isGeneratingDebugChanged());
      assertEquals(2147483647, context0.getMaximumInterpreterStackDepth());
      assertEquals(false, context0.isSealed());
      assertEquals(0, context0.getLanguageVersion());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertEquals(false, context0.isGeneratingDebug());
      assertFalse(context0.generateObserverCount);
      
      ToolErrorReporter toolErrorReporter0 = new ToolErrorReporter(context0.generateObserverCount);
      assertNotNull(toolErrorReporter0);
      assertEquals(true, context0.isGeneratingSource());
      assertEquals(0, context0.getOptimizationLevel());
      assertEquals(false, context0.isGeneratingDebugChanged());
      assertEquals(2147483647, context0.getMaximumInterpreterStackDepth());
      assertEquals(false, context0.isSealed());
      assertEquals(0, context0.getLanguageVersion());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertEquals(false, context0.isGeneratingDebug());
      assertEquals(false, toolErrorReporter0.hasReportedError());
      assertEquals(false, toolErrorReporter0.isReportingWarnings());
      assertFalse(context0.generateObserverCount);
      
      Config config0 = new Config(set0, set0, boolean0, config_LanguageMode0, boolean0);
      assertNotNull(config0);
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isThis());
      assertEquals(5, node0.getLength());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isIf());
      assertEquals(0, node0.getLineno());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isQuotedString());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isTry());
      assertEquals(true, node0.isString());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isScript());
      assertEquals(false, node0.isAdd());
      assertEquals(0, node0.getSourcePosition());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isCast());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isNull());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isBreak());
      assertEquals(true, node0.mayMutateArguments());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isNumber());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isOnlyModifiesArgumentsCall());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isTypeOf());
      assertEquals(0, node0.getCharno());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(0, node0.getChangeTime());
      assertEquals(true, node0.mayMutateGlobalStateOrThrow());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isStringKey());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.hasChildren());
      assertEquals(40, node0.getType());
      assertEquals(false, node0.isComma());
      assertEquals("UTF-8", charset0.displayName());
      assertEquals(true, charset0.canEncode());
      assertEquals("UTF-8", charset0.toString());
      assertEquals(true, charset0.isRegistered());
      assertEquals("UTF-8", charset0.name());
      assertEquals(false, set0.isEmpty());
      assertEquals(2, set0.size());
      
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, comment0, node0, config0, toolErrorReporter0);
      assertNotNull(jsDocInfoParser0);
      assertEquals(true, context0.isGeneratingSource());
      assertEquals(0, context0.getOptimizationLevel());
      assertEquals(false, context0.isGeneratingDebugChanged());
      assertEquals(2147483647, context0.getMaximumInterpreterStackDepth());
      assertEquals(false, context0.isSealed());
      assertEquals(0, context0.getLanguageVersion());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertEquals(false, context0.isGeneratingDebug());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isThis());
      assertEquals(5, node0.getLength());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isIf());
      assertEquals(0, node0.getLineno());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isQuotedString());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isTry());
      assertEquals(true, node0.isString());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isScript());
      assertEquals(false, node0.isAdd());
      assertEquals(0, node0.getSourcePosition());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isCast());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isNull());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isBreak());
      assertEquals(true, node0.mayMutateArguments());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isNumber());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isOnlyModifiesArgumentsCall());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isTypeOf());
      assertEquals(0, node0.getCharno());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(0, node0.getChangeTime());
      assertEquals(true, node0.mayMutateGlobalStateOrThrow());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isStringKey());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.hasChildren());
      assertEquals(40, node0.getType());
      assertEquals(false, node0.isComma());
      assertEquals(false, toolErrorReporter0.hasReportedError());
      assertEquals(false, toolErrorReporter0.isReportingWarnings());
      assertEquals("79", xmlPropRef0.toString());
      assertEquals(-400, xmlPropRef0.getAbsolutePosition());
      assertEquals(-1, xmlPropRef0.getAtPos());
      assertEquals(false, xmlPropRef0.hasChildren());
      assertEquals(-400, xmlPropRef0.getPosition());
      assertEquals(0, xmlPropRef0.depth());
      assertEquals(-1, xmlPropRef0.getColonPos());
      assertNull(xmlPropRef0.getJsDoc());
      assertEquals(false, xmlPropRef0.isAttributeAccess());
      assertEquals(-1, xmlPropRef0.getLineno());
      assertEquals(1, xmlPropRef0.getLength());
      assertEquals(79, xmlPropRef0.getType());
      assertEquals("UTF-8", charset0.displayName());
      assertEquals(true, charset0.canEncode());
      assertEquals("UTF-8", charset0.toString());
      assertEquals(true, charset0.isRegistered());
      assertEquals("UTF-8", charset0.name());
      assertEquals(false, set0.isEmpty());
      assertEquals(2, set0.size());
      assertFalse(context0.generateObserverCount);
      
      JsDocToken jsDocToken0 = JsDocToken.ANNOTATION;
      Node node1 = jsDocInfoParser0.parseAndRecordTypeNode(jsDocToken0);
      assertNull(node1);
      assertEquals(true, context0.isGeneratingSource());
      assertEquals(0, context0.getOptimizationLevel());
      assertEquals(false, context0.isGeneratingDebugChanged());
      assertEquals(2147483647, context0.getMaximumInterpreterStackDepth());
      assertEquals(false, context0.isSealed());
      assertEquals(0, context0.getLanguageVersion());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertEquals(false, context0.isGeneratingDebug());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isThis());
      assertEquals(5, node0.getLength());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isIf());
      assertEquals(0, node0.getLineno());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isQuotedString());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isTry());
      assertEquals(true, node0.isString());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isScript());
      assertEquals(false, node0.isAdd());
      assertEquals(0, node0.getSourcePosition());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isCast());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isNull());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isBreak());
      assertEquals(true, node0.mayMutateArguments());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isNumber());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isOnlyModifiesArgumentsCall());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isTypeOf());
      assertEquals(0, node0.getCharno());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(0, node0.getChangeTime());
      assertEquals(true, node0.mayMutateGlobalStateOrThrow());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isStringKey());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.hasChildren());
      assertEquals(40, node0.getType());
      assertEquals(false, node0.isComma());
      assertEquals(false, toolErrorReporter0.hasReportedError());
      assertEquals(false, toolErrorReporter0.isReportingWarnings());
      assertEquals("79", xmlPropRef0.toString());
      assertEquals(-400, xmlPropRef0.getAbsolutePosition());
      assertEquals(-1, xmlPropRef0.getAtPos());
      assertEquals(false, xmlPropRef0.hasChildren());
      assertEquals(-400, xmlPropRef0.getPosition());
      assertEquals(0, xmlPropRef0.depth());
      assertEquals(-1, xmlPropRef0.getColonPos());
      assertNull(xmlPropRef0.getJsDoc());
      assertEquals(false, xmlPropRef0.isAttributeAccess());
      assertEquals(-1, xmlPropRef0.getLineno());
      assertEquals(1, xmlPropRef0.getLength());
      assertEquals(79, xmlPropRef0.getType());
      assertEquals("UTF-8", charset0.displayName());
      assertEquals(true, charset0.canEncode());
      assertEquals("UTF-8", charset0.toString());
      assertEquals(true, charset0.isRegistered());
      assertEquals("UTF-8", charset0.name());
      assertEquals(false, set0.isEmpty());
      assertEquals(2, set0.size());
      assertFalse(context0.generateObserverCount);
      
      boolean boolean1 = jsDocInfoParser0.parse();
      assertEquals(true, context0.isGeneratingSource());
      assertEquals(0, context0.getOptimizationLevel());
      assertEquals(false, context0.isGeneratingDebugChanged());
      assertEquals(2147483647, context0.getMaximumInterpreterStackDepth());
      assertEquals(false, context0.isSealed());
      assertEquals(0, context0.getLanguageVersion());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertEquals(false, context0.isGeneratingDebug());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isThis());
      assertEquals(5, node0.getLength());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isIf());
      assertEquals(0, node0.getLineno());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isQuotedString());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isTry());
      assertEquals(true, node0.isString());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isScript());
      assertEquals(false, node0.isAdd());
      assertEquals(0, node0.getSourcePosition());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isCast());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isNull());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isBreak());
      assertEquals(true, node0.mayMutateArguments());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isNumber());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isOnlyModifiesArgumentsCall());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isTypeOf());
      assertEquals(0, node0.getCharno());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(0, node0.getChangeTime());
      assertEquals(true, node0.mayMutateGlobalStateOrThrow());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isStringKey());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.hasChildren());
      assertEquals(40, node0.getType());
      assertEquals(false, node0.isComma());
      assertEquals(false, toolErrorReporter0.hasReportedError());
      assertEquals(false, toolErrorReporter0.isReportingWarnings());
      assertEquals("79", xmlPropRef0.toString());
      assertEquals(-400, xmlPropRef0.getAbsolutePosition());
      assertEquals(-1, xmlPropRef0.getAtPos());
      assertEquals(false, xmlPropRef0.hasChildren());
      assertEquals(-400, xmlPropRef0.getPosition());
      assertEquals(0, xmlPropRef0.depth());
      assertEquals(-1, xmlPropRef0.getColonPos());
      assertNull(xmlPropRef0.getJsDoc());
      assertEquals(false, xmlPropRef0.isAttributeAccess());
      assertEquals(-1, xmlPropRef0.getLineno());
      assertEquals(1, xmlPropRef0.getLength());
      assertEquals(79, xmlPropRef0.getType());
      assertEquals("UTF-8", charset0.displayName());
      assertEquals(true, charset0.canEncode());
      assertEquals("UTF-8", charset0.toString());
      assertEquals(true, charset0.isRegistered());
      assertEquals("UTF-8", charset0.name());
      assertEquals(false, set0.isEmpty());
      assertEquals(2, set0.size());
      assertFalse(context0.generateObserverCount);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean0 == boolean1);
  }

  @Test
  public void test30()  throws Throwable  {
      String string0 = "!";
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream(string0);
      assertNotNull(jsDocTokenStream0);
      
      int int0 = 0;
      NewExpression newExpression0 = new NewExpression(int0, int0);
      assertNotNull(newExpression0);
      assertEquals("30", newExpression0.toString());
      assertEquals(0, newExpression0.getPosition());
      assertNull(newExpression0.getJsDoc());
      assertEquals(-1, newExpression0.getLineno());
      assertEquals(-1, newExpression0.getRp());
      assertEquals(0, newExpression0.getAbsolutePosition());
      assertEquals(0, newExpression0.depth());
      assertEquals(0, newExpression0.getLength());
      assertEquals(30, newExpression0.getType());
      assertEquals(-1, newExpression0.getLp());
      assertEquals(false, newExpression0.hasChildren());
      
      Comment comment0 = newExpression0.getJsDocNode();
      assertNull(comment0);
      assertEquals("30", newExpression0.toString());
      assertEquals(0, newExpression0.getPosition());
      assertNull(newExpression0.getJsDoc());
      assertEquals(-1, newExpression0.getLineno());
      assertEquals(-1, newExpression0.getRp());
      assertEquals(0, newExpression0.getAbsolutePosition());
      assertEquals(0, newExpression0.depth());
      assertEquals(0, newExpression0.getLength());
      assertEquals(30, newExpression0.getType());
      assertEquals(-1, newExpression0.getLp());
      assertEquals(false, newExpression0.hasChildren());
      
      Node node0 = null;
      TreeSet<String> treeSet0 = new TreeSet<String>();
      assertNotNull(treeSet0);
      assertEquals("[]", treeSet0.toString());
      
      boolean boolean0 = true;
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5;
      Config config0 = new Config(treeSet0, treeSet0, boolean0, config_LanguageMode0, boolean0);
      assertNotNull(config0);
      assertEquals("[]", treeSet0.toString());
      
      ErrorCollector errorCollector0 = new ErrorCollector();
      assertNotNull(errorCollector0);
      
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, comment0, node0, config0, errorCollector0);
      assertNotNull(jsDocInfoParser0);
      assertEquals("30", newExpression0.toString());
      assertEquals(0, newExpression0.getPosition());
      assertNull(newExpression0.getJsDoc());
      assertEquals(-1, newExpression0.getLineno());
      assertEquals(-1, newExpression0.getRp());
      assertEquals(0, newExpression0.getAbsolutePosition());
      assertEquals(0, newExpression0.depth());
      assertEquals(0, newExpression0.getLength());
      assertEquals(30, newExpression0.getType());
      assertEquals(-1, newExpression0.getLp());
      assertEquals(false, newExpression0.hasChildren());
      assertEquals("[]", treeSet0.toString());
      
      // Undeclared exception!
      try {
        boolean boolean1 = jsDocInfoParser0.parse();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
}
