/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 20:53:32 GMT 2014
 */

package com.google.javascript.jscomp.parsing;

import static org.junit.Assert.*;
import org.junit.Test;
import com.google.javascript.jscomp.parsing.Config;
import com.google.javascript.jscomp.parsing.JsDocInfoParser;
import com.google.javascript.jscomp.parsing.JsDocToken;
import com.google.javascript.jscomp.parsing.JsDocTokenStream;
import com.google.javascript.rhino.JSDocInfo;
import com.google.javascript.rhino.Node;
import com.google.javascript.rhino.head.Context;
import com.google.javascript.rhino.head.ErrorReporter;
import com.google.javascript.rhino.head.Token;
import com.google.javascript.rhino.head.ast.Comment;
import com.google.javascript.rhino.head.ast.ErrorCollector;
import com.google.javascript.rhino.head.ast.NumberLiteral;
import com.google.javascript.rhino.head.ast.WhileLoop;
import com.google.javascript.rhino.head.tools.ToolErrorReporter;
import com.google.javascript.rhino.jstype.SimpleSourceFile;
import com.google.javascript.rhino.jstype.StaticSourceFile;
import java.nio.charset.Charset;
import java.util.Locale;
import java.util.Set;
import java.util.TreeSet;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;

import org.evosuite.runtime.FileSystemHandling;
import org.junit.runner.RunWith;


public class JsDocInfoParserEvoSuite_branch_Test  {

  @Test
  public void test00()  throws Throwable  {
      String string0 = "{proxy:";
      Node node0 = JsDocInfoParser.parseTypeString(string0);
      assertNull(node0);
  }

  @Test
  public void test01()  throws Throwable  {
      String string0 = "[Y]q,";
      Node node0 = JsDocInfoParser.parseTypeString(string0);
      assertEquals(308, node0.getType());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isNE());
      assertEquals(1, node0.getCharno());
      assertEquals(1, node0.getChildCount());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isThis());
      assertEquals(0, node0.getChangeTime());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isOnlyModifiesArgumentsCall());
      assertEquals(0, node0.getLineno());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isThrow());
      assertEquals(true, node0.mayMutateGlobalStateOrThrow());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isGetterDef());
      assertEquals(true, node0.mayMutateArguments());
      assertEquals(true, node0.hasOneChild());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isString());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isCast());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isAnd());
      assertEquals(1, node0.getSourcePosition());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isScript());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isStringKey());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isNew());
      assertEquals(true, node0.hasChildren());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isRegExp());
      assertNotNull(node0);
  }

  @Test
  public void test02()  throws Throwable  {
      String string0 = "[";
      Node node0 = JsDocInfoParser.parseTypeString(string0);
      assertNull(node0);
  }

  @Test
  public void test03()  throws Throwable  {
      String string0 = "(-T~)";
      Node node0 = JsDocInfoParser.parseTypeString(string0);
      assertEquals(false, node0.isAdd());
      assertEquals(1, node0.getChildCount());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isGetElem());
      assertEquals(1, node0.getCharno());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isStringKey());
      assertEquals(false, node0.isOnlyModifiesArgumentsCall());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isRegExp());
      assertEquals(true, node0.mayMutateArguments());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(1, node0.getSourcePosition());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(true, node0.hasChildren());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isExprResult());
      assertEquals(true, node0.hasOneChild());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isScript());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isCatch());
      assertEquals(0, node0.getChangeTime());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isAnd());
      assertEquals(0, node0.getLineno());
      assertEquals(false, node0.isCast());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isString());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isHook());
      assertEquals(301, node0.getType());
      assertNull(node0.getSourceFileName());
      assertEquals(true, node0.mayMutateGlobalStateOrThrow());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isNE());
      assertNotNull(node0);
  }

  @Test
  public void test04()  throws Throwable  {
      String string0 = "function (";
      Node node0 = JsDocInfoParser.parseTypeString(string0);
      assertNull(node0);
  }

  @Test
  public void test05()  throws Throwable  {
      String string0 = "null";
      Node node0 = JsDocInfoParser.parseTypeString(string0);
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(0, node0.getCharno());
      assertEquals(false, node0.isDelProp());
      assertEquals(true, node0.mayMutateArguments());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(4, node0.getLength());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.isOr());
      assertEquals(0, node0.getSourcePosition());
      assertEquals(0, node0.getChangeTime());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isVoid());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isScript());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isDo());
      assertEquals(40, node0.getType());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isReturn());
      assertEquals(0, node0.getLineno());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isBreak());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isAssign());
      assertEquals(true, node0.mayMutateGlobalStateOrThrow());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(true, node0.isString());
      assertEquals(false, node0.isStringKey());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isCast());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isOnlyModifiesArgumentsCall());
      assertEquals(false, node0.isDefaultCase());
      assertNotNull(node0);
  }

  @Test
  public void test06()  throws Throwable  {
      String string0 = "*xW;hLT>W";
      Node node0 = JsDocInfoParser.parseTypeString(string0);
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isCast());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isAssign());
      assertEquals(true, node0.mayMutateArguments());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isScript());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isQuotedString());
      assertEquals(302, node0.getType());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isNew());
      assertEquals(0, node0.getChangeTime());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(0, node0.getSourcePosition());
      assertEquals(false, node0.hasChildren());
      assertEquals(true, node0.mayMutateGlobalStateOrThrow());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isStringKey());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isSwitch());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(0, node0.getLineno());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isNull());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isCatch());
      assertEquals(0, node0.getCharno());
      assertEquals(false, node0.isDo());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isString());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isOnlyModifiesArgumentsCall());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isVarArgs());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isWith());
      assertNotNull(node0);
  }

  @Test
  public void test07()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      boolean boolean0 = FileSystemHandling.createFolder(evoSuiteFile0);
      assertFalse(boolean0);
      
      String string0 = "n;\\S-F3X7'B&";
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream(string0);
      assertNotNull(jsDocTokenStream0);
      
      Comment comment0 = null;
      Node node0 = JsDocInfoParser.parseTypeString(string0);
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isOnlyModifiesArgumentsCall());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.hasChildren());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isScript());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isOr());
      assertEquals(40, node0.getType());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isCast());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isAdd());
      assertEquals(0, node0.getSourcePosition());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isDelProp());
      assertEquals(0, node0.getLineno());
      assertEquals(true, node0.mayMutateArguments());
      assertEquals(false, node0.isStringKey());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isIn());
      assertEquals(true, node0.isString());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isSwitch());
      assertEquals(true, node0.mayMutateGlobalStateOrThrow());
      assertEquals(false, node0.isTrue());
      assertEquals(0, node0.getChangeTime());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isExprResult());
      assertEquals(12, node0.getLength());
      assertEquals(0, node0.getCharno());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isReturn());
      assertNotNull(node0);
      
      Locale locale0 = Locale.GERMANY;
      assertEquals("de_DE", locale0.toString());
      assertEquals("DE", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("de", locale0.getLanguage());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("DEU", locale0.getISO3Country());
      assertNotNull(locale0);
      
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      assertEquals("de_DE", locale0.toString());
      assertEquals("DE", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("de", locale0.getLanguage());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals(true, set0.isEmpty());
      assertEquals(0, set0.size());
      assertNotNull(set0);
      
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5_STRICT;
      Config config0 = new Config(set0, set0, boolean0, config_LanguageMode0, boolean0);
      assertEquals("de_DE", locale0.toString());
      assertEquals("DE", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("de", locale0.getLanguage());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals(true, set0.isEmpty());
      assertEquals(0, set0.size());
      assertNotNull(config0);
      
      ErrorReporter errorReporter0 = null;
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, comment0, node0, config0, errorReporter0);
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isOnlyModifiesArgumentsCall());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.hasChildren());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isScript());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isOr());
      assertEquals(40, node0.getType());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isCast());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isAdd());
      assertEquals(0, node0.getSourcePosition());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isDelProp());
      assertEquals(0, node0.getLineno());
      assertEquals(true, node0.mayMutateArguments());
      assertEquals(false, node0.isStringKey());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isIn());
      assertEquals(true, node0.isString());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isSwitch());
      assertEquals(true, node0.mayMutateGlobalStateOrThrow());
      assertEquals(false, node0.isTrue());
      assertEquals(0, node0.getChangeTime());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isExprResult());
      assertEquals(12, node0.getLength());
      assertEquals(0, node0.getCharno());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isReturn());
      assertEquals("de_DE", locale0.toString());
      assertEquals("DE", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("de", locale0.getLanguage());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals(true, set0.isEmpty());
      assertEquals(0, set0.size());
      assertNotNull(jsDocInfoParser0);
      
      JsDocToken jsDocToken0 = JsDocToken.BANG;
      Node node1 = jsDocInfoParser0.parseAndRecordTypeNode(jsDocToken0);
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node0));
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isOnlyModifiesArgumentsCall());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.hasChildren());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isScript());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isOr());
      assertEquals(40, node0.getType());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isCast());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isAdd());
      assertEquals(0, node0.getSourcePosition());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isDelProp());
      assertEquals(0, node0.getLineno());
      assertEquals(true, node0.mayMutateArguments());
      assertEquals(false, node0.isStringKey());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isIn());
      assertEquals(true, node0.isString());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isSwitch());
      assertEquals(true, node0.mayMutateGlobalStateOrThrow());
      assertEquals(false, node0.isTrue());
      assertEquals(0, node0.getChangeTime());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isExprResult());
      assertEquals(12, node0.getLength());
      assertEquals(0, node0.getCharno());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isReturn());
      assertEquals("de_DE", locale0.toString());
      assertEquals("DE", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("de", locale0.getLanguage());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals(false, node1.isThrow());
      assertEquals(false, node1.isInc());
      assertEquals(false, node1.isContinue());
      assertEquals(1, node1.getChildCount());
      assertEquals(false, node1.isVoid());
      assertEquals(true, node1.mayMutateArguments());
      assertEquals(0, node1.getLength());
      assertEquals(true, node1.hasChildren());
      assertEquals(306, node1.getType());
      assertEquals(false, node1.isDebugger());
      assertEquals(false, node1.isNot());
      assertEquals(false, node1.isFromExterns());
      assertEquals(false, node1.isLocalResultCall());
      assertEquals(false, node1.isString());
      assertEquals(false, node1.isGetProp());
      assertEquals(false, node1.isCase());
      assertEquals(false, node1.isFalse());
      assertNull(node1.getSourceFileName());
      assertEquals(false, node1.isAdd());
      assertEquals(false, node1.isFor());
      assertEquals(false, node1.isParamList());
      assertEquals(false, node1.isTry());
      assertEquals(false, node1.isWith());
      assertEquals(false, node1.isArrayLit());
      assertEquals(false, node1.isOptionalArg());
      assertEquals(false, node1.isStringKey());
      assertEquals(false, node1.isNE());
      assertEquals(false, node1.isOnlyModifiesArgumentsCall());
      assertEquals(false, node1.isHook());
      assertEquals(false, node1.isEmpty());
      assertEquals(false, node1.isInstanceOf());
      assertEquals(false, node1.isCall());
      assertEquals(false, node1.isLabel());
      assertEquals(false, node1.isBreak());
      assertEquals(true, node1.hasOneChild());
      assertEquals(false, node1.isDec());
      assertEquals(false, node1.isName());
      assertEquals(false, node1.isNoSideEffectsCall());
      assertEquals(true, node1.mayMutateGlobalStateOrThrow());
      assertEquals(false, node1.isCast());
      assertEquals(false, node1.isIf());
      assertEquals(false, node1.isReturn());
      assertEquals(false, node1.isFunction());
      assertEquals(false, node1.isAnd());
      assertEquals(11, node1.getSourcePosition());
      assertEquals(false, node1.isCatch());
      assertEquals(0, node1.getChangeTime());
      assertEquals(false, node1.isLabelName());
      assertEquals(false, node1.isDefaultCase());
      assertEquals(false, node1.isIn());
      assertEquals(false, node1.isExprResult());
      assertEquals(false, node1.isRegExp());
      assertEquals(false, node1.isNew());
      assertEquals(false, node1.wasEmptyNode());
      assertEquals(false, node1.isDelProp());
      assertEquals(false, node1.isGetElem());
      assertEquals(false, node1.isAssign());
      assertEquals(false, node1.isSyntheticBlock());
      assertEquals(false, node1.isSwitch());
      assertEquals(false, node1.isWhile());
      assertEquals(false, node1.isBlock());
      assertEquals(11, node1.getCharno());
      assertEquals(false, node1.isAssignAdd());
      assertEquals(false, node1.isTrue());
      assertEquals(0, node1.getLineno());
      assertEquals(false, node1.isNumber());
      assertEquals(false, node1.isComma());
      assertEquals(false, node1.isThis());
      assertEquals(false, node1.hasMoreThanOneChild());
      assertEquals(false, node1.isObjectLit());
      assertEquals(false, node1.isQuotedString());
      assertEquals(0, node1.getSideEffectFlags());
      assertEquals(false, node1.isOr());
      assertEquals(false, node1.isVar());
      assertEquals(false, node1.isSetterDef());
      assertEquals(false, node1.isScript());
      assertEquals(false, node1.isOnlyModifiesThisCall());
      assertEquals(false, node1.isDo());
      assertEquals(false, node1.isGetterDef());
      assertEquals(false, node1.isNull());
      assertEquals(false, node1.isVarArgs());
      assertEquals(false, node1.isTypeOf());
      assertEquals(true, set0.isEmpty());
      assertEquals(0, set0.size());
      assertNotNull(node1);
      assertNotSame(node0, node1);
      assertNotSame(node1, node0);
  }

  @Test
  public void test08()  throws Throwable  {
      String string0 = "?";
      Node node0 = JsDocInfoParser.parseTypeString(string0);
      assertNull(node0);
  }

  @Test
  public void test09()  throws Throwable  {
      String string0 = "{";
      int int0 = 99;
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream(string0, int0, int0);
      assertNotNull(jsDocTokenStream0);
      
      NumberLiteral numberLiteral0 = new NumberLiteral(int0, int0);
      assertNull(numberLiteral0.getJsDoc());
      assertEquals(99, numberLiteral0.getPosition());
      assertNull(numberLiteral0.getValue());
      assertEquals("40", numberLiteral0.toString());
      assertEquals(false, numberLiteral0.hasChildren());
      assertEquals(40, numberLiteral0.getType());
      assertEquals(99, numberLiteral0.getAbsolutePosition());
      assertEquals(0.0, numberLiteral0.getDouble(), 0.01D);
      assertEquals(0, numberLiteral0.depth());
      assertEquals(-1, numberLiteral0.getLineno());
      assertEquals(0.0, numberLiteral0.getNumber(), 0.01D);
      assertEquals(99, numberLiteral0.getLength());
      assertNotNull(numberLiteral0);
      
      Comment comment0 = numberLiteral0.getJsDocNode();
      assertNull(numberLiteral0.getJsDoc());
      assertEquals(99, numberLiteral0.getPosition());
      assertNull(numberLiteral0.getValue());
      assertEquals("40", numberLiteral0.toString());
      assertEquals(false, numberLiteral0.hasChildren());
      assertEquals(40, numberLiteral0.getType());
      assertEquals(99, numberLiteral0.getAbsolutePosition());
      assertEquals(0.0, numberLiteral0.getDouble(), 0.01D);
      assertEquals(0, numberLiteral0.depth());
      assertEquals(-1, numberLiteral0.getLineno());
      assertEquals(0.0, numberLiteral0.getNumber(), 0.01D);
      assertEquals(99, numberLiteral0.getLength());
      assertNull(comment0);
      
      Node node0 = null;
      TreeSet<String> treeSet0 = new TreeSet<String>();
      assertEquals("[]", treeSet0.toString());
      assertNotNull(treeSet0);
      
      boolean boolean0 = false;
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5;
      Config config0 = new Config(treeSet0, treeSet0, boolean0, config_LanguageMode0, boolean0);
      assertEquals("[]", treeSet0.toString());
      assertNotNull(config0);
      
      Context context0 = new Context();
      assertEquals(0, context0.getOptimizationLevel());
      assertEquals(false, context0.isSealed());
      assertEquals(false, context0.isGeneratingDebug());
      assertEquals(2147483647, context0.getMaximumInterpreterStackDepth());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertEquals(false, context0.isGeneratingDebugChanged());
      assertEquals(true, context0.isGeneratingSource());
      assertEquals(0, context0.getLanguageVersion());
      assertFalse(context0.generateObserverCount);
      assertNotNull(context0);
      
      ErrorReporter errorReporter0 = context0.getErrorReporter();
      assertEquals(0, context0.getOptimizationLevel());
      assertEquals(false, context0.isSealed());
      assertEquals(false, context0.isGeneratingDebug());
      assertEquals(2147483647, context0.getMaximumInterpreterStackDepth());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertEquals(false, context0.isGeneratingDebugChanged());
      assertEquals(true, context0.isGeneratingSource());
      assertEquals(0, context0.getLanguageVersion());
      assertFalse(context0.generateObserverCount);
      assertNotNull(errorReporter0);
      
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, comment0, node0, config0, errorReporter0);
      assertEquals(0, context0.getOptimizationLevel());
      assertEquals(false, context0.isSealed());
      assertEquals(false, context0.isGeneratingDebug());
      assertEquals(2147483647, context0.getMaximumInterpreterStackDepth());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertEquals(false, context0.isGeneratingDebugChanged());
      assertEquals(true, context0.isGeneratingSource());
      assertEquals(0, context0.getLanguageVersion());
      assertNull(numberLiteral0.getJsDoc());
      assertEquals(99, numberLiteral0.getPosition());
      assertNull(numberLiteral0.getValue());
      assertEquals("40", numberLiteral0.toString());
      assertEquals(false, numberLiteral0.hasChildren());
      assertEquals(40, numberLiteral0.getType());
      assertEquals(99, numberLiteral0.getAbsolutePosition());
      assertEquals(0.0, numberLiteral0.getDouble(), 0.01D);
      assertEquals(0, numberLiteral0.depth());
      assertEquals(-1, numberLiteral0.getLineno());
      assertEquals(0.0, numberLiteral0.getNumber(), 0.01D);
      assertEquals(99, numberLiteral0.getLength());
      assertEquals("[]", treeSet0.toString());
      assertFalse(context0.generateObserverCount);
      assertNotNull(jsDocInfoParser0);
      
      JsDocToken jsDocToken0 = JsDocToken.LC;
      Node node1 = jsDocInfoParser0.parseAndRecordTypeNode(jsDocToken0);
      assertEquals(0, context0.getOptimizationLevel());
      assertEquals(false, context0.isSealed());
      assertEquals(false, context0.isGeneratingDebug());
      assertEquals(2147483647, context0.getMaximumInterpreterStackDepth());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertEquals(false, context0.isGeneratingDebugChanged());
      assertEquals(true, context0.isGeneratingSource());
      assertEquals(0, context0.getLanguageVersion());
      assertNull(numberLiteral0.getJsDoc());
      assertEquals(99, numberLiteral0.getPosition());
      assertNull(numberLiteral0.getValue());
      assertEquals("40", numberLiteral0.toString());
      assertEquals(false, numberLiteral0.hasChildren());
      assertEquals(40, numberLiteral0.getType());
      assertEquals(99, numberLiteral0.getAbsolutePosition());
      assertEquals(0.0, numberLiteral0.getDouble(), 0.01D);
      assertEquals(0, numberLiteral0.depth());
      assertEquals(-1, numberLiteral0.getLineno());
      assertEquals(0.0, numberLiteral0.getNumber(), 0.01D);
      assertEquals(99, numberLiteral0.getLength());
      assertEquals("[]", treeSet0.toString());
      assertFalse(context0.generateObserverCount);
      assertNull(node1);
  }

  @Test
  public void test10() {}
//   @Test
//   public void test10()  throws Throwable  {
//       boolean boolean0 = true;
//       String string0 = "a7>@DD/F^<!q";
//       int int0 = 305;
//       JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream(string0, int0);
//       assertNotNull(jsDocTokenStream0);
//       
//       WhileLoop whileLoop0 = new WhileLoop(int0);
//       assertEquals("117", whileLoop0.toString());
//       assertEquals(305, whileLoop0.getAbsolutePosition());
//       assertEquals(0, whileLoop0.depth());
//       assertNull(whileLoop0.getJsDoc());
//       assertEquals(117, whileLoop0.getType());
//       assertEquals(false, whileLoop0.hasChildren());
//       assertEquals(305, whileLoop0.getPosition());
//       assertEquals(1, whileLoop0.getLength());
//       assertEquals(-1, whileLoop0.getLineno());
//       assertEquals(-1, whileLoop0.getRp());
//       assertEquals(-1, whileLoop0.getLp());
//       assertNotNull(whileLoop0);
//       
//       Comment comment0 = whileLoop0.getJsDocNode();
//       assertEquals("117", whileLoop0.toString());
//       assertEquals(305, whileLoop0.getAbsolutePosition());
//       assertEquals(0, whileLoop0.depth());
//       assertNull(whileLoop0.getJsDoc());
//       assertEquals(117, whileLoop0.getType());
//       assertEquals(false, whileLoop0.hasChildren());
//       assertEquals(305, whileLoop0.getPosition());
//       assertEquals(1, whileLoop0.getLength());
//       assertEquals(-1, whileLoop0.getLineno());
//       assertEquals(-1, whileLoop0.getRp());
//       assertEquals(-1, whileLoop0.getLp());
//       assertNull(comment0);
//       
//       Node node0 = null;
//       Charset charset0 = Charset.defaultCharset();
//       assertEquals(true, charset0.isRegistered());
//       assertEquals("UTF-8", charset0.name());
//       assertEquals(true, charset0.canEncode());
//       assertEquals("UTF-8", charset0.toString());
//       assertEquals("UTF-8", charset0.displayName());
//       assertNotNull(charset0);
//       
//       Set<String> set0 = charset0.aliases();
//       assertEquals(false, set0.isEmpty());
//       assertEquals(2, set0.size());
//       assertEquals(true, charset0.isRegistered());
//       assertEquals("UTF-8", charset0.name());
//       assertEquals(true, charset0.canEncode());
//       assertEquals("UTF-8", charset0.toString());
//       assertEquals("UTF-8", charset0.displayName());
//       assertNotNull(set0);
//       
//       Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5;
//       Config config0 = new Config(set0, set0, boolean0, config_LanguageMode0, boolean0);
//       assertEquals(false, set0.isEmpty());
//       assertEquals(2, set0.size());
//       assertEquals(true, charset0.isRegistered());
//       assertEquals("UTF-8", charset0.name());
//       assertEquals(true, charset0.canEncode());
//       assertEquals("UTF-8", charset0.toString());
//       assertEquals("UTF-8", charset0.displayName());
//       assertNotNull(config0);
//       
//       Context context0 = Context.getCurrentContext();
//       assertEquals(false, context0.isGeneratingDebugChanged());
//       assertEquals(true, context0.isSealed());
//       assertEquals(false, context0.isGeneratingDebug());
//       assertEquals(0, context0.getOptimizationLevel());
//       assertEquals(true, context0.isGeneratingSource());
//       assertEquals(2147483647, context0.getMaximumInterpreterStackDepth());
//       assertEquals(0, context0.getInstructionObserverThreshold());
//       assertEquals(0, context0.getLanguageVersion());
//       assertTrue(context0.generateObserverCount);
//       assertNotNull(context0);
//       
//       ToolErrorReporter toolErrorReporter0 = new ToolErrorReporter(context0.generateObserverCount);
//       assertEquals(true, toolErrorReporter0.isReportingWarnings());
//       assertEquals(false, toolErrorReporter0.hasReportedError());
//       assertEquals(false, context0.isGeneratingDebugChanged());
//       assertEquals(true, context0.isSealed());
//       assertEquals(false, context0.isGeneratingDebug());
//       assertEquals(0, context0.getOptimizationLevel());
//       assertEquals(true, context0.isGeneratingSource());
//       assertEquals(2147483647, context0.getMaximumInterpreterStackDepth());
//       assertEquals(0, context0.getInstructionObserverThreshold());
//       assertEquals(0, context0.getLanguageVersion());
//       assertTrue(context0.generateObserverCount);
//       assertNotNull(toolErrorReporter0);
//       
//       JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, comment0, node0, config0, toolErrorReporter0);
//       assertEquals("117", whileLoop0.toString());
//       assertEquals(305, whileLoop0.getAbsolutePosition());
//       assertEquals(0, whileLoop0.depth());
//       assertNull(whileLoop0.getJsDoc());
//       assertEquals(117, whileLoop0.getType());
//       assertEquals(false, whileLoop0.hasChildren());
//       assertEquals(305, whileLoop0.getPosition());
//       assertEquals(1, whileLoop0.getLength());
//       assertEquals(-1, whileLoop0.getLineno());
//       assertEquals(-1, whileLoop0.getRp());
//       assertEquals(-1, whileLoop0.getLp());
//       assertEquals(false, set0.isEmpty());
//       assertEquals(2, set0.size());
//       assertEquals(true, charset0.isRegistered());
//       assertEquals("UTF-8", charset0.name());
//       assertEquals(true, charset0.canEncode());
//       assertEquals("UTF-8", charset0.toString());
//       assertEquals("UTF-8", charset0.displayName());
//       assertEquals(true, toolErrorReporter0.isReportingWarnings());
//       assertEquals(false, toolErrorReporter0.hasReportedError());
//       assertEquals(false, context0.isGeneratingDebugChanged());
//       assertEquals(true, context0.isSealed());
//       assertEquals(false, context0.isGeneratingDebug());
//       assertEquals(0, context0.getOptimizationLevel());
//       assertEquals(true, context0.isGeneratingSource());
//       assertEquals(2147483647, context0.getMaximumInterpreterStackDepth());
//       assertEquals(0, context0.getInstructionObserverThreshold());
//       assertEquals(0, context0.getLanguageVersion());
//       assertTrue(context0.generateObserverCount);
//       assertNotNull(jsDocInfoParser0);
//       
//       JsDocToken jsDocToken0 = JsDocToken.EOC;
//       Node node1 = jsDocInfoParser0.parseAndRecordTypeNode(jsDocToken0);
//       assertEquals("117", whileLoop0.toString());
//       assertEquals(305, whileLoop0.getAbsolutePosition());
//       assertEquals(0, whileLoop0.depth());
//       assertNull(whileLoop0.getJsDoc());
//       assertEquals(117, whileLoop0.getType());
//       assertEquals(false, whileLoop0.hasChildren());
//       assertEquals(305, whileLoop0.getPosition());
//       assertEquals(1, whileLoop0.getLength());
//       assertEquals(-1, whileLoop0.getLineno());
//       assertEquals(-1, whileLoop0.getRp());
//       assertEquals(-1, whileLoop0.getLp());
//       assertEquals(false, set0.isEmpty());
//       assertEquals(2, set0.size());
//       assertEquals(true, charset0.isRegistered());
//       assertEquals("UTF-8", charset0.name());
//       assertEquals(true, charset0.canEncode());
//       assertEquals("UTF-8", charset0.toString());
//       assertEquals("UTF-8", charset0.displayName());
//       assertEquals(true, toolErrorReporter0.isReportingWarnings());
//       assertEquals(false, toolErrorReporter0.hasReportedError());
//       assertEquals(false, context0.isGeneratingDebugChanged());
//       assertEquals(true, context0.isSealed());
//       assertEquals(false, context0.isGeneratingDebug());
//       assertEquals(0, context0.getOptimizationLevel());
//       assertEquals(true, context0.isGeneratingSource());
//       assertEquals(2147483647, context0.getMaximumInterpreterStackDepth());
//       assertEquals(0, context0.getInstructionObserverThreshold());
//       assertEquals(0, context0.getLanguageVersion());
//       assertTrue(context0.generateObserverCount);
//       assertNull(node1);
//       
//       boolean boolean1 = jsDocInfoParser0.parse();
//       assertTrue(boolean0 == boolean1);
//       assertTrue(boolean1 == boolean0);
//       assertEquals("117", whileLoop0.toString());
//       assertEquals(305, whileLoop0.getAbsolutePosition());
//       assertEquals(0, whileLoop0.depth());
//       assertNull(whileLoop0.getJsDoc());
//       assertEquals(117, whileLoop0.getType());
//       assertEquals(false, whileLoop0.hasChildren());
//       assertEquals(305, whileLoop0.getPosition());
//       assertEquals(1, whileLoop0.getLength());
//       assertEquals(-1, whileLoop0.getLineno());
//       assertEquals(-1, whileLoop0.getRp());
//       assertEquals(-1, whileLoop0.getLp());
//       assertEquals(false, set0.isEmpty());
//       assertEquals(2, set0.size());
//       assertEquals(true, charset0.isRegistered());
//       assertEquals("UTF-8", charset0.name());
//       assertEquals(true, charset0.canEncode());
//       assertEquals("UTF-8", charset0.toString());
//       assertEquals("UTF-8", charset0.displayName());
//       assertEquals(true, toolErrorReporter0.isReportingWarnings());
//       assertEquals(false, toolErrorReporter0.hasReportedError());
//       assertEquals(false, context0.isGeneratingDebugChanged());
//       assertEquals(true, context0.isSealed());
//       assertEquals(false, context0.isGeneratingDebug());
//       assertEquals(0, context0.getOptimizationLevel());
//       assertEquals(true, context0.isGeneratingSource());
//       assertEquals(2147483647, context0.getMaximumInterpreterStackDepth());
//       assertEquals(0, context0.getInstructionObserverThreshold());
//       assertEquals(0, context0.getLanguageVersion());
//       assertTrue(boolean1);
//       assertTrue(context0.generateObserverCount);
//   }

  @Test
  public void test11() {}
//   @Test
//   public void test11()  throws Throwable  {
//       boolean boolean0 = true;
//       String string0 = "SETELEM";
//       int int0 = 0;
//       JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream(string0, int0);
//       assertNotNull(jsDocTokenStream0);
//       
//       WhileLoop whileLoop0 = new WhileLoop(int0);
//       assertEquals(-1, whileLoop0.getRp());
//       assertEquals(0, whileLoop0.depth());
//       assertEquals("117", whileLoop0.toString());
//       assertEquals(0, whileLoop0.getPosition());
//       assertEquals(-1, whileLoop0.getLineno());
//       assertEquals(117, whileLoop0.getType());
//       assertEquals(1, whileLoop0.getLength());
//       assertEquals(-1, whileLoop0.getLp());
//       assertEquals(false, whileLoop0.hasChildren());
//       assertNull(whileLoop0.getJsDoc());
//       assertEquals(0, whileLoop0.getAbsolutePosition());
//       assertNotNull(whileLoop0);
//       
//       Comment comment0 = whileLoop0.getJsDocNode();
//       assertEquals(-1, whileLoop0.getRp());
//       assertEquals(0, whileLoop0.depth());
//       assertEquals("117", whileLoop0.toString());
//       assertEquals(0, whileLoop0.getPosition());
//       assertEquals(-1, whileLoop0.getLineno());
//       assertEquals(117, whileLoop0.getType());
//       assertEquals(1, whileLoop0.getLength());
//       assertEquals(-1, whileLoop0.getLp());
//       assertEquals(false, whileLoop0.hasChildren());
//       assertNull(whileLoop0.getJsDoc());
//       assertEquals(0, whileLoop0.getAbsolutePosition());
//       assertNull(comment0);
//       
//       Node node0 = null;
//       Charset charset0 = Charset.defaultCharset();
//       assertEquals(true, charset0.isRegistered());
//       assertEquals("UTF-8", charset0.name());
//       assertEquals(true, charset0.canEncode());
//       assertEquals("UTF-8", charset0.toString());
//       assertEquals("UTF-8", charset0.displayName());
//       assertNotNull(charset0);
//       
//       Set<String> set0 = charset0.aliases();
//       assertEquals(false, set0.isEmpty());
//       assertEquals(2, set0.size());
//       assertEquals(true, charset0.isRegistered());
//       assertEquals("UTF-8", charset0.name());
//       assertEquals(true, charset0.canEncode());
//       assertEquals("UTF-8", charset0.toString());
//       assertEquals("UTF-8", charset0.displayName());
//       assertNotNull(set0);
//       
//       Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5_STRICT;
//       Config config0 = new Config(set0, set0, boolean0, config_LanguageMode0, boolean0);
//       assertEquals(false, set0.isEmpty());
//       assertEquals(2, set0.size());
//       assertEquals(true, charset0.isRegistered());
//       assertEquals("UTF-8", charset0.name());
//       assertEquals(true, charset0.canEncode());
//       assertEquals("UTF-8", charset0.toString());
//       assertEquals("UTF-8", charset0.displayName());
//       assertNotNull(config0);
//       
//       Context context0 = Context.getCurrentContext();
//       assertEquals(0, context0.getLanguageVersion());
//       assertEquals(false, context0.isGeneratingDebug());
//       assertEquals(0, context0.getInstructionObserverThreshold());
//       assertEquals(false, context0.isGeneratingDebugChanged());
//       assertEquals(true, context0.isSealed());
//       assertEquals(0, context0.getOptimizationLevel());
//       assertEquals(2147483647, context0.getMaximumInterpreterStackDepth());
//       assertEquals(true, context0.isGeneratingSource());
//       assertTrue(context0.generateObserverCount);
//       assertNotNull(context0);
//       
//       ToolErrorReporter toolErrorReporter0 = new ToolErrorReporter(context0.generateObserverCount);
//       assertEquals(0, context0.getLanguageVersion());
//       assertEquals(false, context0.isGeneratingDebug());
//       assertEquals(0, context0.getInstructionObserverThreshold());
//       assertEquals(false, context0.isGeneratingDebugChanged());
//       assertEquals(true, context0.isSealed());
//       assertEquals(0, context0.getOptimizationLevel());
//       assertEquals(2147483647, context0.getMaximumInterpreterStackDepth());
//       assertEquals(true, context0.isGeneratingSource());
//       assertEquals(false, toolErrorReporter0.hasReportedError());
//       assertEquals(true, toolErrorReporter0.isReportingWarnings());
//       assertTrue(context0.generateObserverCount);
//       assertNotNull(toolErrorReporter0);
//       
//       JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, comment0, node0, config0, toolErrorReporter0);
//       assertEquals(false, set0.isEmpty());
//       assertEquals(2, set0.size());
//       assertEquals(true, charset0.isRegistered());
//       assertEquals("UTF-8", charset0.name());
//       assertEquals(true, charset0.canEncode());
//       assertEquals("UTF-8", charset0.toString());
//       assertEquals("UTF-8", charset0.displayName());
//       assertEquals(-1, whileLoop0.getRp());
//       assertEquals(0, whileLoop0.depth());
//       assertEquals("117", whileLoop0.toString());
//       assertEquals(0, whileLoop0.getPosition());
//       assertEquals(-1, whileLoop0.getLineno());
//       assertEquals(117, whileLoop0.getType());
//       assertEquals(1, whileLoop0.getLength());
//       assertEquals(-1, whileLoop0.getLp());
//       assertEquals(false, whileLoop0.hasChildren());
//       assertNull(whileLoop0.getJsDoc());
//       assertEquals(0, whileLoop0.getAbsolutePosition());
//       assertEquals(0, context0.getLanguageVersion());
//       assertEquals(false, context0.isGeneratingDebug());
//       assertEquals(0, context0.getInstructionObserverThreshold());
//       assertEquals(false, context0.isGeneratingDebugChanged());
//       assertEquals(true, context0.isSealed());
//       assertEquals(0, context0.getOptimizationLevel());
//       assertEquals(2147483647, context0.getMaximumInterpreterStackDepth());
//       assertEquals(true, context0.isGeneratingSource());
//       assertEquals(false, toolErrorReporter0.hasReportedError());
//       assertEquals(true, toolErrorReporter0.isReportingWarnings());
//       assertTrue(context0.generateObserverCount);
//       assertNotNull(jsDocInfoParser0);
//       
//       JsDocToken jsDocToken0 = JsDocToken.LT;
//       Node node1 = jsDocInfoParser0.parseAndRecordTypeNode(jsDocToken0);
//       assertEquals(false, set0.isEmpty());
//       assertEquals(2, set0.size());
//       assertEquals(true, charset0.isRegistered());
//       assertEquals("UTF-8", charset0.name());
//       assertEquals(true, charset0.canEncode());
//       assertEquals("UTF-8", charset0.toString());
//       assertEquals("UTF-8", charset0.displayName());
//       assertEquals(-1, whileLoop0.getRp());
//       assertEquals(0, whileLoop0.depth());
//       assertEquals("117", whileLoop0.toString());
//       assertEquals(0, whileLoop0.getPosition());
//       assertEquals(-1, whileLoop0.getLineno());
//       assertEquals(117, whileLoop0.getType());
//       assertEquals(1, whileLoop0.getLength());
//       assertEquals(-1, whileLoop0.getLp());
//       assertEquals(false, whileLoop0.hasChildren());
//       assertNull(whileLoop0.getJsDoc());
//       assertEquals(0, whileLoop0.getAbsolutePosition());
//       assertEquals(0, context0.getLanguageVersion());
//       assertEquals(false, context0.isGeneratingDebug());
//       assertEquals(0, context0.getInstructionObserverThreshold());
//       assertEquals(false, context0.isGeneratingDebugChanged());
//       assertEquals(true, context0.isSealed());
//       assertEquals(0, context0.getOptimizationLevel());
//       assertEquals(2147483647, context0.getMaximumInterpreterStackDepth());
//       assertEquals(true, context0.isGeneratingSource());
//       assertEquals(false, toolErrorReporter0.hasReportedError());
//       assertEquals(true, toolErrorReporter0.isReportingWarnings());
//       assertTrue(context0.generateObserverCount);
//       assertNull(node1);
//       
//       boolean boolean1 = jsDocInfoParser0.parse();
//       assertFalse(boolean1 == boolean0);
//       assertFalse(boolean0 == boolean1);
//       assertEquals(false, set0.isEmpty());
//       assertEquals(2, set0.size());
//       assertEquals(true, charset0.isRegistered());
//       assertEquals("UTF-8", charset0.name());
//       assertEquals(true, charset0.canEncode());
//       assertEquals("UTF-8", charset0.toString());
//       assertEquals("UTF-8", charset0.displayName());
//       assertEquals(-1, whileLoop0.getRp());
//       assertEquals(0, whileLoop0.depth());
//       assertEquals("117", whileLoop0.toString());
//       assertEquals(0, whileLoop0.getPosition());
//       assertEquals(-1, whileLoop0.getLineno());
//       assertEquals(117, whileLoop0.getType());
//       assertEquals(1, whileLoop0.getLength());
//       assertEquals(-1, whileLoop0.getLp());
//       assertEquals(false, whileLoop0.hasChildren());
//       assertNull(whileLoop0.getJsDoc());
//       assertEquals(0, whileLoop0.getAbsolutePosition());
//       assertEquals(0, context0.getLanguageVersion());
//       assertEquals(false, context0.isGeneratingDebug());
//       assertEquals(0, context0.getInstructionObserverThreshold());
//       assertEquals(false, context0.isGeneratingDebugChanged());
//       assertEquals(true, context0.isSealed());
//       assertEquals(0, context0.getOptimizationLevel());
//       assertEquals(2147483647, context0.getMaximumInterpreterStackDepth());
//       assertEquals(true, context0.isGeneratingSource());
//       assertEquals(false, toolErrorReporter0.hasReportedError());
//       assertEquals(true, toolErrorReporter0.isReportingWarnings());
//       assertFalse(boolean1);
//       assertTrue(context0.generateObserverCount);
//   }

  @Test
  public void test12() {}
//   @Test
//   public void test12()  throws Throwable  {
//       boolean boolean0 = true;
//       String string0 = "SETELEM";
//       int int0 = 0;
//       JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream(string0, int0);
//       assertNotNull(jsDocTokenStream0);
//       
//       WhileLoop whileLoop0 = new WhileLoop(int0);
//       assertEquals(0, whileLoop0.depth());
//       assertEquals(0, whileLoop0.getAbsolutePosition());
//       assertEquals(-1, whileLoop0.getLineno());
//       assertEquals(1, whileLoop0.getLength());
//       assertEquals(false, whileLoop0.hasChildren());
//       assertEquals(117, whileLoop0.getType());
//       assertEquals(0, whileLoop0.getPosition());
//       assertEquals(-1, whileLoop0.getRp());
//       assertNull(whileLoop0.getJsDoc());
//       assertEquals("117", whileLoop0.toString());
//       assertEquals(-1, whileLoop0.getLp());
//       assertNotNull(whileLoop0);
//       
//       Comment comment0 = whileLoop0.getJsDocNode();
//       assertEquals(0, whileLoop0.depth());
//       assertEquals(0, whileLoop0.getAbsolutePosition());
//       assertEquals(-1, whileLoop0.getLineno());
//       assertEquals(1, whileLoop0.getLength());
//       assertEquals(false, whileLoop0.hasChildren());
//       assertEquals(117, whileLoop0.getType());
//       assertEquals(0, whileLoop0.getPosition());
//       assertEquals(-1, whileLoop0.getRp());
//       assertNull(whileLoop0.getJsDoc());
//       assertEquals("117", whileLoop0.toString());
//       assertEquals(-1, whileLoop0.getLp());
//       assertNull(comment0);
//       
//       Node node0 = null;
//       Charset charset0 = Charset.defaultCharset();
//       assertEquals("UTF-8", charset0.name());
//       assertEquals("UTF-8", charset0.displayName());
//       assertEquals("UTF-8", charset0.toString());
//       assertEquals(true, charset0.isRegistered());
//       assertEquals(true, charset0.canEncode());
//       assertNotNull(charset0);
//       
//       Set<String> set0 = charset0.aliases();
//       assertEquals("UTF-8", charset0.name());
//       assertEquals("UTF-8", charset0.displayName());
//       assertEquals("UTF-8", charset0.toString());
//       assertEquals(true, charset0.isRegistered());
//       assertEquals(true, charset0.canEncode());
//       assertEquals(false, set0.isEmpty());
//       assertEquals(2, set0.size());
//       assertNotNull(set0);
//       
//       Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5;
//       Config config0 = new Config(set0, set0, boolean0, config_LanguageMode0, boolean0);
//       assertEquals("UTF-8", charset0.name());
//       assertEquals("UTF-8", charset0.displayName());
//       assertEquals("UTF-8", charset0.toString());
//       assertEquals(true, charset0.isRegistered());
//       assertEquals(true, charset0.canEncode());
//       assertEquals(false, set0.isEmpty());
//       assertEquals(2, set0.size());
//       assertNotNull(config0);
//       
//       Context context0 = Context.getCurrentContext();
//       assertEquals(0, context0.getInstructionObserverThreshold());
//       assertEquals(false, context0.isGeneratingDebug());
//       assertEquals(0, context0.getOptimizationLevel());
//       assertEquals(0, context0.getLanguageVersion());
//       assertEquals(true, context0.isSealed());
//       assertEquals(2147483647, context0.getMaximumInterpreterStackDepth());
//       assertEquals(false, context0.isGeneratingDebugChanged());
//       assertEquals(true, context0.isGeneratingSource());
//       assertTrue(context0.generateObserverCount);
//       assertNotNull(context0);
//       
//       ToolErrorReporter toolErrorReporter0 = new ToolErrorReporter(context0.generateObserverCount);
//       assertEquals(true, toolErrorReporter0.isReportingWarnings());
//       assertEquals(false, toolErrorReporter0.hasReportedError());
//       assertEquals(0, context0.getInstructionObserverThreshold());
//       assertEquals(false, context0.isGeneratingDebug());
//       assertEquals(0, context0.getOptimizationLevel());
//       assertEquals(0, context0.getLanguageVersion());
//       assertEquals(true, context0.isSealed());
//       assertEquals(2147483647, context0.getMaximumInterpreterStackDepth());
//       assertEquals(false, context0.isGeneratingDebugChanged());
//       assertEquals(true, context0.isGeneratingSource());
//       assertTrue(context0.generateObserverCount);
//       assertNotNull(toolErrorReporter0);
//       
//       JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, comment0, node0, config0, toolErrorReporter0);
//       assertEquals(0, whileLoop0.depth());
//       assertEquals(0, whileLoop0.getAbsolutePosition());
//       assertEquals(-1, whileLoop0.getLineno());
//       assertEquals(1, whileLoop0.getLength());
//       assertEquals(false, whileLoop0.hasChildren());
//       assertEquals(117, whileLoop0.getType());
//       assertEquals(0, whileLoop0.getPosition());
//       assertEquals(-1, whileLoop0.getRp());
//       assertNull(whileLoop0.getJsDoc());
//       assertEquals("117", whileLoop0.toString());
//       assertEquals(-1, whileLoop0.getLp());
//       assertEquals("UTF-8", charset0.name());
//       assertEquals("UTF-8", charset0.displayName());
//       assertEquals("UTF-8", charset0.toString());
//       assertEquals(true, charset0.isRegistered());
//       assertEquals(true, charset0.canEncode());
//       assertEquals(true, toolErrorReporter0.isReportingWarnings());
//       assertEquals(false, toolErrorReporter0.hasReportedError());
//       assertEquals(false, set0.isEmpty());
//       assertEquals(2, set0.size());
//       assertEquals(0, context0.getInstructionObserverThreshold());
//       assertEquals(false, context0.isGeneratingDebug());
//       assertEquals(0, context0.getOptimizationLevel());
//       assertEquals(0, context0.getLanguageVersion());
//       assertEquals(true, context0.isSealed());
//       assertEquals(2147483647, context0.getMaximumInterpreterStackDepth());
//       assertEquals(false, context0.isGeneratingDebugChanged());
//       assertEquals(true, context0.isGeneratingSource());
//       assertTrue(context0.generateObserverCount);
//       assertNotNull(jsDocInfoParser0);
//       
//       JsDocToken jsDocToken0 = JsDocToken.COMMA;
//       Node node1 = jsDocInfoParser0.parseAndRecordTypeNode(jsDocToken0);
//       assertEquals(0, whileLoop0.depth());
//       assertEquals(0, whileLoop0.getAbsolutePosition());
//       assertEquals(-1, whileLoop0.getLineno());
//       assertEquals(1, whileLoop0.getLength());
//       assertEquals(false, whileLoop0.hasChildren());
//       assertEquals(117, whileLoop0.getType());
//       assertEquals(0, whileLoop0.getPosition());
//       assertEquals(-1, whileLoop0.getRp());
//       assertNull(whileLoop0.getJsDoc());
//       assertEquals("117", whileLoop0.toString());
//       assertEquals(-1, whileLoop0.getLp());
//       assertEquals("UTF-8", charset0.name());
//       assertEquals("UTF-8", charset0.displayName());
//       assertEquals("UTF-8", charset0.toString());
//       assertEquals(true, charset0.isRegistered());
//       assertEquals(true, charset0.canEncode());
//       assertEquals(true, toolErrorReporter0.isReportingWarnings());
//       assertEquals(false, toolErrorReporter0.hasReportedError());
//       assertEquals(false, set0.isEmpty());
//       assertEquals(2, set0.size());
//       assertEquals(0, context0.getInstructionObserverThreshold());
//       assertEquals(false, context0.isGeneratingDebug());
//       assertEquals(0, context0.getOptimizationLevel());
//       assertEquals(0, context0.getLanguageVersion());
//       assertEquals(true, context0.isSealed());
//       assertEquals(2147483647, context0.getMaximumInterpreterStackDepth());
//       assertEquals(false, context0.isGeneratingDebugChanged());
//       assertEquals(true, context0.isGeneratingSource());
//       assertTrue(context0.generateObserverCount);
//       assertNull(node1);
//       
//       boolean boolean1 = jsDocInfoParser0.parse();
//       assertFalse(boolean0 == boolean1);
//       assertFalse(boolean1 == boolean0);
//       assertEquals(0, whileLoop0.depth());
//       assertEquals(0, whileLoop0.getAbsolutePosition());
//       assertEquals(-1, whileLoop0.getLineno());
//       assertEquals(1, whileLoop0.getLength());
//       assertEquals(false, whileLoop0.hasChildren());
//       assertEquals(117, whileLoop0.getType());
//       assertEquals(0, whileLoop0.getPosition());
//       assertEquals(-1, whileLoop0.getRp());
//       assertNull(whileLoop0.getJsDoc());
//       assertEquals("117", whileLoop0.toString());
//       assertEquals(-1, whileLoop0.getLp());
//       assertEquals("UTF-8", charset0.name());
//       assertEquals("UTF-8", charset0.displayName());
//       assertEquals("UTF-8", charset0.toString());
//       assertEquals(true, charset0.isRegistered());
//       assertEquals(true, charset0.canEncode());
//       assertEquals(true, toolErrorReporter0.isReportingWarnings());
//       assertEquals(false, toolErrorReporter0.hasReportedError());
//       assertEquals(false, set0.isEmpty());
//       assertEquals(2, set0.size());
//       assertEquals(0, context0.getInstructionObserverThreshold());
//       assertEquals(false, context0.isGeneratingDebug());
//       assertEquals(0, context0.getOptimizationLevel());
//       assertEquals(0, context0.getLanguageVersion());
//       assertEquals(true, context0.isSealed());
//       assertEquals(2147483647, context0.getMaximumInterpreterStackDepth());
//       assertEquals(false, context0.isGeneratingDebugChanged());
//       assertEquals(true, context0.isGeneratingSource());
//       assertFalse(boolean1);
//       assertTrue(context0.generateObserverCount);
//   }

  @Test
  public void test13() {}
//   @Test
//   public void test13()  throws Throwable  {
//       boolean boolean0 = true;
//       String string0 = "a7>@DD/F^<!q";
//       int int0 = 305;
//       JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream(string0, int0);
//       assertNotNull(jsDocTokenStream0);
//       
//       JsDocToken jsDocToken0 = jsDocTokenStream0.getJsDocToken();
//       assertEquals(4, jsDocToken0.ordinal());
//       assertEquals("STRING", jsDocToken0.name());
//       assertEquals("STRING", jsDocToken0.toString());
//       
//       WhileLoop whileLoop0 = new WhileLoop(int0);
//       assertEquals(1, whileLoop0.getLength());
//       assertEquals(-1, whileLoop0.getRp());
//       assertNull(whileLoop0.getJsDoc());
//       assertEquals(false, whileLoop0.hasChildren());
//       assertEquals(305, whileLoop0.getPosition());
//       assertEquals("117", whileLoop0.toString());
//       assertEquals(-1, whileLoop0.getLineno());
//       assertEquals(0, whileLoop0.depth());
//       assertEquals(117, whileLoop0.getType());
//       assertEquals(305, whileLoop0.getAbsolutePosition());
//       assertEquals(-1, whileLoop0.getLp());
//       assertNotNull(whileLoop0);
//       
//       Comment comment0 = whileLoop0.getJsDocNode();
//       assertEquals(1, whileLoop0.getLength());
//       assertEquals(-1, whileLoop0.getRp());
//       assertNull(whileLoop0.getJsDoc());
//       assertEquals(false, whileLoop0.hasChildren());
//       assertEquals(305, whileLoop0.getPosition());
//       assertEquals("117", whileLoop0.toString());
//       assertEquals(-1, whileLoop0.getLineno());
//       assertEquals(0, whileLoop0.depth());
//       assertEquals(117, whileLoop0.getType());
//       assertEquals(305, whileLoop0.getAbsolutePosition());
//       assertEquals(-1, whileLoop0.getLp());
//       assertNull(comment0);
//       
//       Node node0 = null;
//       Charset charset0 = Charset.defaultCharset();
//       assertEquals("UTF-8", charset0.displayName());
//       assertEquals("UTF-8", charset0.name());
//       assertEquals("UTF-8", charset0.toString());
//       assertEquals(true, charset0.isRegistered());
//       assertEquals(true, charset0.canEncode());
//       assertNotNull(charset0);
//       
//       Set<String> set0 = charset0.aliases();
//       assertEquals("UTF-8", charset0.displayName());
//       assertEquals("UTF-8", charset0.name());
//       assertEquals("UTF-8", charset0.toString());
//       assertEquals(true, charset0.isRegistered());
//       assertEquals(true, charset0.canEncode());
//       assertEquals(2, set0.size());
//       assertEquals(false, set0.isEmpty());
//       assertNotNull(set0);
//       
//       Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5;
//       Config config0 = new Config(set0, set0, boolean0, config_LanguageMode0, boolean0);
//       assertEquals("UTF-8", charset0.displayName());
//       assertEquals("UTF-8", charset0.name());
//       assertEquals("UTF-8", charset0.toString());
//       assertEquals(true, charset0.isRegistered());
//       assertEquals(true, charset0.canEncode());
//       assertEquals(2, set0.size());
//       assertEquals(false, set0.isEmpty());
//       assertNotNull(config0);
//       
//       Context context0 = Context.getCurrentContext();
//       assertEquals(0, context0.getOptimizationLevel());
//       assertEquals(true, context0.isGeneratingSource());
//       assertEquals(false, context0.isGeneratingDebugChanged());
//       assertEquals(2147483647, context0.getMaximumInterpreterStackDepth());
//       assertEquals(0, context0.getInstructionObserverThreshold());
//       assertEquals(false, context0.isGeneratingDebug());
//       assertEquals(true, context0.isSealed());
//       assertEquals(0, context0.getLanguageVersion());
//       assertTrue(context0.generateObserverCount);
//       assertNotNull(context0);
//       
//       ToolErrorReporter toolErrorReporter0 = new ToolErrorReporter(context0.generateObserverCount);
//       assertEquals(false, toolErrorReporter0.hasReportedError());
//       assertEquals(true, toolErrorReporter0.isReportingWarnings());
//       assertEquals(0, context0.getOptimizationLevel());
//       assertEquals(true, context0.isGeneratingSource());
//       assertEquals(false, context0.isGeneratingDebugChanged());
//       assertEquals(2147483647, context0.getMaximumInterpreterStackDepth());
//       assertEquals(0, context0.getInstructionObserverThreshold());
//       assertEquals(false, context0.isGeneratingDebug());
//       assertEquals(true, context0.isSealed());
//       assertEquals(0, context0.getLanguageVersion());
//       assertTrue(context0.generateObserverCount);
//       assertNotNull(toolErrorReporter0);
//       
//       int int1 = jsDocTokenStream0.getChar();
//       assertFalse(int1 == int0);
//       assertFalse(int0 == int1);
//       assertEquals(62, int1);
//       
//       JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, comment0, node0, config0, toolErrorReporter0);
//       assertFalse(int0 == int1);
//       assertEquals(false, toolErrorReporter0.hasReportedError());
//       assertEquals(true, toolErrorReporter0.isReportingWarnings());
//       assertEquals(0, context0.getOptimizationLevel());
//       assertEquals(true, context0.isGeneratingSource());
//       assertEquals(false, context0.isGeneratingDebugChanged());
//       assertEquals(2147483647, context0.getMaximumInterpreterStackDepth());
//       assertEquals(0, context0.getInstructionObserverThreshold());
//       assertEquals(false, context0.isGeneratingDebug());
//       assertEquals(true, context0.isSealed());
//       assertEquals(0, context0.getLanguageVersion());
//       assertEquals("UTF-8", charset0.displayName());
//       assertEquals("UTF-8", charset0.name());
//       assertEquals("UTF-8", charset0.toString());
//       assertEquals(true, charset0.isRegistered());
//       assertEquals(true, charset0.canEncode());
//       assertEquals(1, whileLoop0.getLength());
//       assertEquals(-1, whileLoop0.getRp());
//       assertNull(whileLoop0.getJsDoc());
//       assertEquals(false, whileLoop0.hasChildren());
//       assertEquals(305, whileLoop0.getPosition());
//       assertEquals("117", whileLoop0.toString());
//       assertEquals(-1, whileLoop0.getLineno());
//       assertEquals(0, whileLoop0.depth());
//       assertEquals(117, whileLoop0.getType());
//       assertEquals(305, whileLoop0.getAbsolutePosition());
//       assertEquals(-1, whileLoop0.getLp());
//       assertEquals(2, set0.size());
//       assertEquals(false, set0.isEmpty());
//       assertTrue(context0.generateObserverCount);
//       assertNotNull(jsDocInfoParser0);
//       
//       boolean boolean1 = jsDocInfoParser0.parse();
//       assertFalse(boolean1 == boolean0);
//       assertFalse(boolean0 == boolean1);
//       assertFalse(int0 == int1);
//       assertEquals(false, toolErrorReporter0.hasReportedError());
//       assertEquals(true, toolErrorReporter0.isReportingWarnings());
//       assertEquals(0, context0.getOptimizationLevel());
//       assertEquals(true, context0.isGeneratingSource());
//       assertEquals(false, context0.isGeneratingDebugChanged());
//       assertEquals(2147483647, context0.getMaximumInterpreterStackDepth());
//       assertEquals(0, context0.getInstructionObserverThreshold());
//       assertEquals(false, context0.isGeneratingDebug());
//       assertEquals(true, context0.isSealed());
//       assertEquals(0, context0.getLanguageVersion());
//       assertEquals("UTF-8", charset0.displayName());
//       assertEquals("UTF-8", charset0.name());
//       assertEquals("UTF-8", charset0.toString());
//       assertEquals(true, charset0.isRegistered());
//       assertEquals(true, charset0.canEncode());
//       assertEquals(1, whileLoop0.getLength());
//       assertEquals(-1, whileLoop0.getRp());
//       assertNull(whileLoop0.getJsDoc());
//       assertEquals(false, whileLoop0.hasChildren());
//       assertEquals(305, whileLoop0.getPosition());
//       assertEquals("117", whileLoop0.toString());
//       assertEquals(-1, whileLoop0.getLineno());
//       assertEquals(0, whileLoop0.depth());
//       assertEquals(117, whileLoop0.getType());
//       assertEquals(305, whileLoop0.getAbsolutePosition());
//       assertEquals(-1, whileLoop0.getLp());
//       assertEquals(2, set0.size());
//       assertEquals(false, set0.isEmpty());
//       assertFalse(boolean1);
//       assertTrue(context0.generateObserverCount);
//   }

  @Test
  public void test14()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      boolean boolean0 = FileSystemHandling.createFolder(evoSuiteFile0);
      assertFalse(boolean0);
      
      String string0 = "n;\\S-F3X7'B&";
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream(string0);
      assertNotNull(jsDocTokenStream0);
      
      Comment comment0 = null;
      Node node0 = JsDocInfoParser.parseTypeString(string0);
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isScript());
      assertEquals(false, node0.isFunction());
      assertEquals(0, node0.getCharno());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isCast());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(40, node0.getType());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isNumber());
      assertEquals(true, node0.mayMutateArguments());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isLabelName());
      assertEquals(0, node0.getLineno());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(true, node0.isString());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isNull());
      assertEquals(0, node0.getSourcePosition());
      assertEquals(false, node0.isThrow());
      assertEquals(12, node0.getLength());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isRegExp());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isComma());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isOnlyModifiesArgumentsCall());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isStringKey());
      assertEquals(false, node0.isFor());
      assertEquals(0, node0.getChangeTime());
      assertEquals(true, node0.mayMutateGlobalStateOrThrow());
      assertNotNull(node0);
      
      Locale locale0 = Locale.GERMANY;
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("DE", locale0.getCountry());
      assertEquals("de_DE", locale0.toString());
      assertEquals("de", locale0.getLanguage());
      assertNotNull(locale0);
      
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      assertEquals(0, set0.size());
      assertEquals(true, set0.isEmpty());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("DE", locale0.getCountry());
      assertEquals("de_DE", locale0.toString());
      assertEquals("de", locale0.getLanguage());
      assertNotNull(set0);
      
      SimpleSourceFile simpleSourceFile0 = new SimpleSourceFile(string0, boolean0);
      assertEquals(false, simpleSourceFile0.isExtern());
      assertEquals("n;\\S-F3X7'B&", simpleSourceFile0.toString());
      assertEquals("n;\\S-F3X7'B&", simpleSourceFile0.getName());
      assertNotNull(simpleSourceFile0);
      
      node0.setStaticSourceFile((StaticSourceFile) simpleSourceFile0);
      assertEquals(false, simpleSourceFile0.isExtern());
      assertEquals("n;\\S-F3X7'B&", simpleSourceFile0.toString());
      assertEquals("n;\\S-F3X7'B&", simpleSourceFile0.getName());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isScript());
      assertEquals(false, node0.isFunction());
      assertEquals(0, node0.getCharno());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isCast());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(40, node0.getType());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isNumber());
      assertEquals(true, node0.mayMutateArguments());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isLabelName());
      assertEquals(0, node0.getLineno());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(true, node0.isString());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isNull());
      assertEquals(0, node0.getSourcePosition());
      assertEquals(false, node0.isThrow());
      assertEquals(12, node0.getLength());
      assertEquals("n;\\S-F3X7'B&", node0.getSourceFileName());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isComma());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isOnlyModifiesArgumentsCall());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isStringKey());
      assertEquals(false, node0.isFor());
      assertEquals(0, node0.getChangeTime());
      assertEquals(true, node0.mayMutateGlobalStateOrThrow());
      
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5_STRICT;
      Config config0 = new Config(set0, set0, boolean0, config_LanguageMode0, boolean0);
      assertEquals(0, set0.size());
      assertEquals(true, set0.isEmpty());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("DE", locale0.getCountry());
      assertEquals("de_DE", locale0.toString());
      assertEquals("de", locale0.getLanguage());
      assertNotNull(config0);
      
      ErrorReporter errorReporter0 = null;
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, comment0, node0, config0, errorReporter0);
      assertEquals(0, set0.size());
      assertEquals(true, set0.isEmpty());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("DE", locale0.getCountry());
      assertEquals("de_DE", locale0.toString());
      assertEquals("de", locale0.getLanguage());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isScript());
      assertEquals(false, node0.isFunction());
      assertEquals(0, node0.getCharno());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isCast());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(40, node0.getType());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isNumber());
      assertEquals(true, node0.mayMutateArguments());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isLabelName());
      assertEquals(0, node0.getLineno());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(true, node0.isString());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isNull());
      assertEquals(0, node0.getSourcePosition());
      assertEquals(false, node0.isThrow());
      assertEquals(12, node0.getLength());
      assertEquals("n;\\S-F3X7'B&", node0.getSourceFileName());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isComma());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isOnlyModifiesArgumentsCall());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isStringKey());
      assertEquals(false, node0.isFor());
      assertEquals(0, node0.getChangeTime());
      assertEquals(true, node0.mayMutateGlobalStateOrThrow());
      assertNotNull(jsDocInfoParser0);
      
      JSDocInfo jSDocInfo0 = jsDocInfoParser0.parseInlineTypeDoc();
      assertEquals(0, set0.size());
      assertEquals(true, set0.isEmpty());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("DE", locale0.getCountry());
      assertEquals("de_DE", locale0.toString());
      assertEquals("de", locale0.getLanguage());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isScript());
      assertEquals(false, node0.isFunction());
      assertEquals(0, node0.getCharno());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isCast());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(40, node0.getType());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isNumber());
      assertEquals(true, node0.mayMutateArguments());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isLabelName());
      assertEquals(0, node0.getLineno());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(true, node0.isString());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isNull());
      assertEquals(0, node0.getSourcePosition());
      assertEquals(false, node0.isThrow());
      assertEquals(12, node0.getLength());
      assertEquals("n;\\S-F3X7'B&", node0.getSourceFileName());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isComma());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isOnlyModifiesArgumentsCall());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isStringKey());
      assertEquals(false, node0.isFor());
      assertEquals(0, node0.getChangeTime());
      assertEquals(true, node0.mayMutateGlobalStateOrThrow());
      assertNull(jSDocInfo0.getLendsName());
      assertEquals(false, jSDocInfo0.isDefine());
      assertEquals(false, jSDocInfo0.isHidden());
      assertEquals(false, jSDocInfo0.isOverride());
      assertEquals(false, jSDocInfo0.hasBaseType());
      assertEquals(false, jSDocInfo0.hasFileOverview());
      assertNull(jSDocInfo0.getBlockDescription());
      assertEquals(false, jSDocInfo0.isNoAlias());
      assertEquals(false, jSDocInfo0.hasEnumParameterType());
      assertEquals(false, jSDocInfo0.isInterface());
      assertEquals(false, jSDocInfo0.isConsistentIdGenerator());
      assertEquals(0, jSDocInfo0.getParameterCount());
      assertNull(jSDocInfo0.getFileOverview());
      assertEquals(false, jSDocInfo0.isJaggerProvide());
      assertEquals(false, jSDocInfo0.isExpose());
      assertEquals(false, jSDocInfo0.isDisposes());
      assertEquals(false, jSDocInfo0.hasThisType());
      assertEquals(false, jSDocInfo0.isJavaDispatch());
      assertEquals(false, jSDocInfo0.isConstant());
      assertEquals(true, jSDocInfo0.containsDeclaration());
      assertEquals(false, jSDocInfo0.isIdGenerator());
      assertEquals(0, jSDocInfo0.getExtendedInterfacesCount());
      assertEquals(false, jSDocInfo0.isStableIdGenerator());
      assertNull(jSDocInfo0.getOriginalCommentString());
      assertEquals("JSDocInfo", jSDocInfo0.toString());
      assertEquals(false, jSDocInfo0.hasTypedefType());
      assertEquals(false, jSDocInfo0.isJaggerModule());
      assertEquals(false, jSDocInfo0.isJaggerInject());
      assertEquals(JSDocInfo.Visibility.INHERITED, jSDocInfo0.getVisibility());
      assertNull(jSDocInfo0.getDescription());
      assertEquals(false, jSDocInfo0.isDeprecated());
      assertEquals(false, jSDocInfo0.isExterns());
      assertNull(jSDocInfo0.getLicense());
      assertEquals(false, jSDocInfo0.isMappedIdGenerator());
      assertEquals(false, jSDocInfo0.isImplicitCast());
      assertNull(jSDocInfo0.getVersion());
      assertEquals(0, jSDocInfo0.getOriginalCommentPosition());
      assertEquals(false, jSDocInfo0.makesStructs());
      assertEquals(false, jSDocInfo0.hasModifies());
      assertEquals(false, jSDocInfo0.isNoSideEffects());
      assertNull(jSDocInfo0.getDeprecationReason());
      assertEquals(false, jSDocInfo0.isWizaction());
      assertNull(jSDocInfo0.getReturnDescription());
      assertEquals("n;\\S-F3X7'B&", jSDocInfo0.getSourceName());
      assertEquals(false, jSDocInfo0.isConstructor());
      assertNull(jSDocInfo0.getMeaning());
      assertEquals(false, jSDocInfo0.isNoShadow());
      assertEquals(0, jSDocInfo0.getImplementedInterfaceCount());
      assertEquals(true, jSDocInfo0.hasType());
      assertEquals(false, jSDocInfo0.isExport());
      assertEquals(false, jSDocInfo0.isNgInject());
      assertEquals(false, jSDocInfo0.isNoTypeCheck());
      assertEquals(false, jSDocInfo0.hasReturnType());
      assertEquals(false, jSDocInfo0.makesDicts());
      assertEquals(false, jSDocInfo0.isNoCompile());
      assertEquals(false, jSDocInfo0.shouldPreserveTry());
      assertNotNull(jSDocInfo0);
  }

  @Test
  public void test15() {}
//   @Test
//   public void test15()  throws Throwable  {
//       boolean boolean0 = false;
//       String string0 = "a7>@DD/F!q";
//       int int0 = (-7);
//       JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream(string0, int0);
//       assertNotNull(jsDocTokenStream0);
//       
//       WhileLoop whileLoop0 = new WhileLoop(int0);
//       assertEquals(1, whileLoop0.getLength());
//       assertNull(whileLoop0.getJsDoc());
//       assertEquals(0, whileLoop0.depth());
//       assertEquals(-7, whileLoop0.getAbsolutePosition());
//       assertEquals(-1, whileLoop0.getLineno());
//       assertEquals(-1, whileLoop0.getRp());
//       assertEquals(false, whileLoop0.hasChildren());
//       assertEquals(-1, whileLoop0.getLp());
//       assertEquals(-7, whileLoop0.getPosition());
//       assertEquals(117, whileLoop0.getType());
//       assertEquals("117", whileLoop0.toString());
//       assertNotNull(whileLoop0);
//       
//       Comment comment0 = whileLoop0.getJsDocNode();
//       assertEquals(1, whileLoop0.getLength());
//       assertNull(whileLoop0.getJsDoc());
//       assertEquals(0, whileLoop0.depth());
//       assertEquals(-7, whileLoop0.getAbsolutePosition());
//       assertEquals(-1, whileLoop0.getLineno());
//       assertEquals(-1, whileLoop0.getRp());
//       assertEquals(false, whileLoop0.hasChildren());
//       assertEquals(-1, whileLoop0.getLp());
//       assertEquals(-7, whileLoop0.getPosition());
//       assertEquals(117, whileLoop0.getType());
//       assertEquals("117", whileLoop0.toString());
//       assertNull(comment0);
//       
//       Node node0 = null;
//       Charset charset0 = Charset.defaultCharset();
//       assertEquals(true, charset0.isRegistered());
//       assertEquals("UTF-8", charset0.toString());
//       assertEquals("UTF-8", charset0.displayName());
//       assertEquals("UTF-8", charset0.name());
//       assertEquals(true, charset0.canEncode());
//       assertNotNull(charset0);
//       
//       Set<String> set0 = charset0.aliases();
//       assertEquals(2, set0.size());
//       assertEquals(false, set0.isEmpty());
//       assertEquals(true, charset0.isRegistered());
//       assertEquals("UTF-8", charset0.toString());
//       assertEquals("UTF-8", charset0.displayName());
//       assertEquals("UTF-8", charset0.name());
//       assertEquals(true, charset0.canEncode());
//       assertNotNull(set0);
//       
//       Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5_STRICT;
//       Config config0 = new Config(set0, set0, boolean0, config_LanguageMode0, boolean0);
//       assertEquals(2, set0.size());
//       assertEquals(false, set0.isEmpty());
//       assertEquals(true, charset0.isRegistered());
//       assertEquals("UTF-8", charset0.toString());
//       assertEquals("UTF-8", charset0.displayName());
//       assertEquals("UTF-8", charset0.name());
//       assertEquals(true, charset0.canEncode());
//       assertNotNull(config0);
//       
//       Context context0 = Context.getCurrentContext();
//       assertEquals(2147483647, context0.getMaximumInterpreterStackDepth());
//       assertEquals(0, context0.getLanguageVersion());
//       assertEquals(0, context0.getInstructionObserverThreshold());
//       assertEquals(false, context0.isGeneratingDebug());
//       assertEquals(true, context0.isSealed());
//       assertEquals(false, context0.isGeneratingDebugChanged());
//       assertEquals(0, context0.getOptimizationLevel());
//       assertEquals(true, context0.isGeneratingSource());
//       assertTrue(context0.generateObserverCount);
//       assertNotNull(context0);
//       
//       ToolErrorReporter toolErrorReporter0 = new ToolErrorReporter(context0.generateObserverCount);
//       assertEquals(2147483647, context0.getMaximumInterpreterStackDepth());
//       assertEquals(0, context0.getLanguageVersion());
//       assertEquals(0, context0.getInstructionObserverThreshold());
//       assertEquals(false, context0.isGeneratingDebug());
//       assertEquals(true, context0.isSealed());
//       assertEquals(false, context0.isGeneratingDebugChanged());
//       assertEquals(0, context0.getOptimizationLevel());
//       assertEquals(true, context0.isGeneratingSource());
//       assertEquals(false, toolErrorReporter0.hasReportedError());
//       assertEquals(true, toolErrorReporter0.isReportingWarnings());
//       assertTrue(context0.generateObserverCount);
//       assertNotNull(toolErrorReporter0);
//       
//       JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, comment0, node0, config0, toolErrorReporter0);
//       assertEquals(2, set0.size());
//       assertEquals(false, set0.isEmpty());
//       assertEquals(2147483647, context0.getMaximumInterpreterStackDepth());
//       assertEquals(0, context0.getLanguageVersion());
//       assertEquals(0, context0.getInstructionObserverThreshold());
//       assertEquals(false, context0.isGeneratingDebug());
//       assertEquals(true, context0.isSealed());
//       assertEquals(false, context0.isGeneratingDebugChanged());
//       assertEquals(0, context0.getOptimizationLevel());
//       assertEquals(true, context0.isGeneratingSource());
//       assertEquals(1, whileLoop0.getLength());
//       assertNull(whileLoop0.getJsDoc());
//       assertEquals(0, whileLoop0.depth());
//       assertEquals(-7, whileLoop0.getAbsolutePosition());
//       assertEquals(-1, whileLoop0.getLineno());
//       assertEquals(-1, whileLoop0.getRp());
//       assertEquals(false, whileLoop0.hasChildren());
//       assertEquals(-1, whileLoop0.getLp());
//       assertEquals(-7, whileLoop0.getPosition());
//       assertEquals(117, whileLoop0.getType());
//       assertEquals("117", whileLoop0.toString());
//       assertEquals(true, charset0.isRegistered());
//       assertEquals("UTF-8", charset0.toString());
//       assertEquals("UTF-8", charset0.displayName());
//       assertEquals("UTF-8", charset0.name());
//       assertEquals(true, charset0.canEncode());
//       assertEquals(false, toolErrorReporter0.hasReportedError());
//       assertEquals(true, toolErrorReporter0.isReportingWarnings());
//       assertTrue(context0.generateObserverCount);
//       assertNotNull(jsDocInfoParser0);
//       
//       JsDocToken jsDocToken0 = JsDocToken.EOC;
//       Node node1 = jsDocInfoParser0.parseAndRecordTypeNode(jsDocToken0);
//       assertEquals(2, set0.size());
//       assertEquals(false, set0.isEmpty());
//       assertEquals(2147483647, context0.getMaximumInterpreterStackDepth());
//       assertEquals(0, context0.getLanguageVersion());
//       assertEquals(0, context0.getInstructionObserverThreshold());
//       assertEquals(false, context0.isGeneratingDebug());
//       assertEquals(true, context0.isSealed());
//       assertEquals(false, context0.isGeneratingDebugChanged());
//       assertEquals(0, context0.getOptimizationLevel());
//       assertEquals(true, context0.isGeneratingSource());
//       assertEquals(1, whileLoop0.getLength());
//       assertNull(whileLoop0.getJsDoc());
//       assertEquals(0, whileLoop0.depth());
//       assertEquals(-7, whileLoop0.getAbsolutePosition());
//       assertEquals(-1, whileLoop0.getLineno());
//       assertEquals(-1, whileLoop0.getRp());
//       assertEquals(false, whileLoop0.hasChildren());
//       assertEquals(-1, whileLoop0.getLp());
//       assertEquals(-7, whileLoop0.getPosition());
//       assertEquals(117, whileLoop0.getType());
//       assertEquals("117", whileLoop0.toString());
//       assertEquals(true, charset0.isRegistered());
//       assertEquals("UTF-8", charset0.toString());
//       assertEquals("UTF-8", charset0.displayName());
//       assertEquals("UTF-8", charset0.name());
//       assertEquals(true, charset0.canEncode());
//       assertEquals(false, toolErrorReporter0.hasReportedError());
//       assertEquals(true, toolErrorReporter0.isReportingWarnings());
//       assertTrue(context0.generateObserverCount);
//       assertNull(node1);
//       
//       boolean boolean1 = jsDocInfoParser0.parse();
//       assertFalse(boolean0 == boolean1);
//       assertFalse(boolean1 == boolean0);
//       assertEquals(2, set0.size());
//       assertEquals(false, set0.isEmpty());
//       assertEquals(2147483647, context0.getMaximumInterpreterStackDepth());
//       assertEquals(0, context0.getLanguageVersion());
//       assertEquals(0, context0.getInstructionObserverThreshold());
//       assertEquals(false, context0.isGeneratingDebug());
//       assertEquals(true, context0.isSealed());
//       assertEquals(false, context0.isGeneratingDebugChanged());
//       assertEquals(0, context0.getOptimizationLevel());
//       assertEquals(true, context0.isGeneratingSource());
//       assertEquals(1, whileLoop0.getLength());
//       assertNull(whileLoop0.getJsDoc());
//       assertEquals(0, whileLoop0.depth());
//       assertEquals(-7, whileLoop0.getAbsolutePosition());
//       assertEquals(-1, whileLoop0.getLineno());
//       assertEquals(-1, whileLoop0.getRp());
//       assertEquals(false, whileLoop0.hasChildren());
//       assertEquals(-1, whileLoop0.getLp());
//       assertEquals(-7, whileLoop0.getPosition());
//       assertEquals(117, whileLoop0.getType());
//       assertEquals("117", whileLoop0.toString());
//       assertEquals(true, charset0.isRegistered());
//       assertEquals("UTF-8", charset0.toString());
//       assertEquals("UTF-8", charset0.displayName());
//       assertEquals("UTF-8", charset0.name());
//       assertEquals(true, charset0.canEncode());
//       assertEquals(false, toolErrorReporter0.hasReportedError());
//       assertEquals(true, toolErrorReporter0.isReportingWarnings());
//       assertTrue(boolean1);
//       assertTrue(context0.generateObserverCount);
//   }

  @Test
  public void test16() {}
//   @Test
//   public void test16()  throws Throwable  {
//       boolean boolean0 = true;
//       String string0 = "a7>@DD/F^<!q";
//       int int0 = 305;
//       JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream(string0, int0);
//       assertNotNull(jsDocTokenStream0);
//       
//       WhileLoop whileLoop0 = new WhileLoop(int0);
//       assertEquals(-1, whileLoop0.getRp());
//       assertEquals(117, whileLoop0.getType());
//       assertEquals(1, whileLoop0.getLength());
//       assertEquals(-1, whileLoop0.getLp());
//       assertEquals(0, whileLoop0.depth());
//       assertEquals(false, whileLoop0.hasChildren());
//       assertNull(whileLoop0.getJsDoc());
//       assertEquals(-1, whileLoop0.getLineno());
//       assertEquals("117", whileLoop0.toString());
//       assertEquals(305, whileLoop0.getAbsolutePosition());
//       assertEquals(305, whileLoop0.getPosition());
//       assertNotNull(whileLoop0);
//       
//       Comment comment0 = whileLoop0.getJsDocNode();
//       assertEquals(-1, whileLoop0.getRp());
//       assertEquals(117, whileLoop0.getType());
//       assertEquals(1, whileLoop0.getLength());
//       assertEquals(-1, whileLoop0.getLp());
//       assertEquals(0, whileLoop0.depth());
//       assertEquals(false, whileLoop0.hasChildren());
//       assertNull(whileLoop0.getJsDoc());
//       assertEquals(-1, whileLoop0.getLineno());
//       assertEquals("117", whileLoop0.toString());
//       assertEquals(305, whileLoop0.getAbsolutePosition());
//       assertEquals(305, whileLoop0.getPosition());
//       assertNull(comment0);
//       
//       Node node0 = null;
//       Charset charset0 = Charset.defaultCharset();
//       assertEquals("UTF-8", charset0.name());
//       assertEquals(true, charset0.canEncode());
//       assertEquals(true, charset0.isRegistered());
//       assertEquals("UTF-8", charset0.toString());
//       assertEquals("UTF-8", charset0.displayName());
//       assertNotNull(charset0);
//       
//       Set<String> set0 = charset0.aliases();
//       assertEquals("UTF-8", charset0.name());
//       assertEquals(true, charset0.canEncode());
//       assertEquals(true, charset0.isRegistered());
//       assertEquals("UTF-8", charset0.toString());
//       assertEquals("UTF-8", charset0.displayName());
//       assertEquals(2, set0.size());
//       assertEquals(false, set0.isEmpty());
//       assertNotNull(set0);
//       
//       Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5;
//       Config config0 = new Config(set0, set0, boolean0, config_LanguageMode0, boolean0);
//       assertEquals("UTF-8", charset0.name());
//       assertEquals(true, charset0.canEncode());
//       assertEquals(true, charset0.isRegistered());
//       assertEquals("UTF-8", charset0.toString());
//       assertEquals("UTF-8", charset0.displayName());
//       assertEquals(2, set0.size());
//       assertEquals(false, set0.isEmpty());
//       assertNotNull(config0);
//       
//       Context context0 = Context.getCurrentContext();
//       assertEquals(2147483647, context0.getMaximumInterpreterStackDepth());
//       assertEquals(0, context0.getInstructionObserverThreshold());
//       assertEquals(true, context0.isGeneratingSource());
//       assertEquals(0, context0.getLanguageVersion());
//       assertEquals(true, context0.isSealed());
//       assertEquals(false, context0.isGeneratingDebug());
//       assertEquals(0, context0.getOptimizationLevel());
//       assertEquals(false, context0.isGeneratingDebugChanged());
//       assertTrue(context0.generateObserverCount);
//       assertNotNull(context0);
//       
//       ToolErrorReporter toolErrorReporter0 = new ToolErrorReporter(context0.generateObserverCount);
//       assertEquals(false, toolErrorReporter0.hasReportedError());
//       assertEquals(true, toolErrorReporter0.isReportingWarnings());
//       assertEquals(2147483647, context0.getMaximumInterpreterStackDepth());
//       assertEquals(0, context0.getInstructionObserverThreshold());
//       assertEquals(true, context0.isGeneratingSource());
//       assertEquals(0, context0.getLanguageVersion());
//       assertEquals(true, context0.isSealed());
//       assertEquals(false, context0.isGeneratingDebug());
//       assertEquals(0, context0.getOptimizationLevel());
//       assertEquals(false, context0.isGeneratingDebugChanged());
//       assertTrue(context0.generateObserverCount);
//       assertNotNull(toolErrorReporter0);
//       
//       JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, comment0, node0, config0, toolErrorReporter0);
//       assertEquals(false, toolErrorReporter0.hasReportedError());
//       assertEquals(true, toolErrorReporter0.isReportingWarnings());
//       assertEquals(2147483647, context0.getMaximumInterpreterStackDepth());
//       assertEquals(0, context0.getInstructionObserverThreshold());
//       assertEquals(true, context0.isGeneratingSource());
//       assertEquals(0, context0.getLanguageVersion());
//       assertEquals(true, context0.isSealed());
//       assertEquals(false, context0.isGeneratingDebug());
//       assertEquals(0, context0.getOptimizationLevel());
//       assertEquals(false, context0.isGeneratingDebugChanged());
//       assertEquals("UTF-8", charset0.name());
//       assertEquals(true, charset0.canEncode());
//       assertEquals(true, charset0.isRegistered());
//       assertEquals("UTF-8", charset0.toString());
//       assertEquals("UTF-8", charset0.displayName());
//       assertEquals(2, set0.size());
//       assertEquals(false, set0.isEmpty());
//       assertEquals(-1, whileLoop0.getRp());
//       assertEquals(117, whileLoop0.getType());
//       assertEquals(1, whileLoop0.getLength());
//       assertEquals(-1, whileLoop0.getLp());
//       assertEquals(0, whileLoop0.depth());
//       assertEquals(false, whileLoop0.hasChildren());
//       assertNull(whileLoop0.getJsDoc());
//       assertEquals(-1, whileLoop0.getLineno());
//       assertEquals("117", whileLoop0.toString());
//       assertEquals(305, whileLoop0.getAbsolutePosition());
//       assertEquals(305, whileLoop0.getPosition());
//       assertTrue(context0.generateObserverCount);
//       assertNotNull(jsDocInfoParser0);
//       
//       JSDocInfo jSDocInfo0 = jsDocInfoParser0.getFileOverviewJSDocInfo();
//       assertEquals(false, toolErrorReporter0.hasReportedError());
//       assertEquals(true, toolErrorReporter0.isReportingWarnings());
//       assertEquals(2147483647, context0.getMaximumInterpreterStackDepth());
//       assertEquals(0, context0.getInstructionObserverThreshold());
//       assertEquals(true, context0.isGeneratingSource());
//       assertEquals(0, context0.getLanguageVersion());
//       assertEquals(true, context0.isSealed());
//       assertEquals(false, context0.isGeneratingDebug());
//       assertEquals(0, context0.getOptimizationLevel());
//       assertEquals(false, context0.isGeneratingDebugChanged());
//       assertEquals("UTF-8", charset0.name());
//       assertEquals(true, charset0.canEncode());
//       assertEquals(true, charset0.isRegistered());
//       assertEquals("UTF-8", charset0.toString());
//       assertEquals("UTF-8", charset0.displayName());
//       assertEquals(2, set0.size());
//       assertEquals(false, set0.isEmpty());
//       assertEquals(-1, whileLoop0.getRp());
//       assertEquals(117, whileLoop0.getType());
//       assertEquals(1, whileLoop0.getLength());
//       assertEquals(-1, whileLoop0.getLp());
//       assertEquals(0, whileLoop0.depth());
//       assertEquals(false, whileLoop0.hasChildren());
//       assertNull(whileLoop0.getJsDoc());
//       assertEquals(-1, whileLoop0.getLineno());
//       assertEquals("117", whileLoop0.toString());
//       assertEquals(305, whileLoop0.getAbsolutePosition());
//       assertEquals(305, whileLoop0.getPosition());
//       assertTrue(context0.generateObserverCount);
//       assertNull(jSDocInfo0);
//   }

  @Test
  public void test17()  throws Throwable  {
      String string0 = "D#M}'{VN";
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream(string0);
      assertNotNull(jsDocTokenStream0);
      
      int int0 = 112;
      Token.CommentType token_CommentType0 = Token.CommentType.HTML;
      Comment comment0 = new Comment(int0, int0, token_CommentType0, string0);
      assertEquals(112, comment0.getLength());
      assertEquals("161", comment0.toString());
      assertEquals(-1, comment0.getLineno());
      assertEquals(161, comment0.getType());
      assertEquals(112, comment0.getPosition());
      assertEquals(0, comment0.depth());
      assertNull(comment0.getJsDoc());
      assertEquals(Token.CommentType.HTML, comment0.getCommentType());
      assertEquals(false, comment0.hasChildren());
      assertEquals(112, comment0.getAbsolutePosition());
      assertEquals("D#M}'{VN", comment0.getValue());
      assertNotNull(comment0);
      
      Node node0 = null;
      Locale locale0 = Locale.FRANCE;
      assertEquals("", locale0.getVariant());
      assertEquals("FRA", locale0.getISO3Country());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("fr_FR", locale0.toString());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("FR", locale0.getCountry());
      assertNotNull(locale0);
      
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      assertEquals(0, set0.size());
      assertEquals(true, set0.isEmpty());
      assertEquals("", locale0.getVariant());
      assertEquals("FRA", locale0.getISO3Country());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("fr_FR", locale0.toString());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("FR", locale0.getCountry());
      assertNotNull(set0);
      
      boolean boolean0 = true;
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5;
      Config config0 = new Config(set0, set0, boolean0, config_LanguageMode0, boolean0);
      assertEquals(0, set0.size());
      assertEquals(true, set0.isEmpty());
      assertEquals("", locale0.getVariant());
      assertEquals("FRA", locale0.getISO3Country());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("fr_FR", locale0.toString());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("FR", locale0.getCountry());
      assertNotNull(config0);
      
      ErrorCollector errorCollector0 = new ErrorCollector();
      assertNotNull(errorCollector0);
      
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, comment0, node0, config0, errorCollector0);
      assertEquals(0, set0.size());
      assertEquals(true, set0.isEmpty());
      assertEquals("", locale0.getVariant());
      assertEquals("FRA", locale0.getISO3Country());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("fr_FR", locale0.toString());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("FR", locale0.getCountry());
      assertEquals(112, comment0.getLength());
      assertEquals("161", comment0.toString());
      assertEquals(-1, comment0.getLineno());
      assertEquals(161, comment0.getType());
      assertEquals(112, comment0.getPosition());
      assertEquals(0, comment0.depth());
      assertNull(comment0.getJsDoc());
      assertEquals(Token.CommentType.HTML, comment0.getCommentType());
      assertEquals(false, comment0.hasChildren());
      assertEquals(112, comment0.getAbsolutePosition());
      assertEquals("D#M}'{VN", comment0.getValue());
      assertNotNull(jsDocInfoParser0);
      
      boolean boolean1 = jsDocInfoParser0.hasParsedJSDocInfo();
      assertFalse(boolean0 == boolean1);
      assertFalse(boolean1 == boolean0);
      assertEquals(0, set0.size());
      assertEquals(true, set0.isEmpty());
      assertEquals("", locale0.getVariant());
      assertEquals("FRA", locale0.getISO3Country());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("fr_FR", locale0.toString());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("FR", locale0.getCountry());
      assertEquals(112, comment0.getLength());
      assertEquals("161", comment0.toString());
      assertEquals(-1, comment0.getLineno());
      assertEquals(161, comment0.getType());
      assertEquals(112, comment0.getPosition());
      assertEquals(0, comment0.depth());
      assertNull(comment0.getJsDoc());
      assertEquals(Token.CommentType.HTML, comment0.getCommentType());
      assertEquals(false, comment0.hasChildren());
      assertEquals(112, comment0.getAbsolutePosition());
      assertEquals("D#M}'{VN", comment0.getValue());
      assertFalse(boolean1);
  }

  @Test
  public void test18()  throws Throwable  {
      String string0 = "[`q(kQ5KNU.?h";
      Node node0 = JsDocInfoParser.parseTypeString(string0);
      assertNull(node0);
  }
}
