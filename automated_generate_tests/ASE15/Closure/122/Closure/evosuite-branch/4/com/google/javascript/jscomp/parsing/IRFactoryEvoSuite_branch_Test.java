/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 20:08:27 GMT 2014
 */

package com.google.javascript.jscomp.parsing;

import static org.junit.Assert.*; import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.junit.Test;
import com.google.javascript.jscomp.parsing.Config;
import com.google.javascript.jscomp.parsing.IRFactory;
import com.google.javascript.rhino.Node;
import com.google.javascript.rhino.head.ErrorReporter;
import com.google.javascript.rhino.head.ast.AstNode;
import com.google.javascript.rhino.head.ast.AstRoot;
import com.google.javascript.rhino.head.ast.ContinueStatement;
import com.google.javascript.rhino.head.ast.ErrorCollector;
import com.google.javascript.rhino.head.ast.Name;
import com.google.javascript.rhino.head.ast.NumberLiteral;
import com.google.javascript.rhino.head.ast.RegExpLiteral;
import com.google.javascript.rhino.head.ast.ReturnStatement;
import com.google.javascript.rhino.head.ast.WhileLoop;
import com.google.javascript.rhino.head.tools.ToolErrorReporter;
import com.google.javascript.rhino.jstype.SimpleSourceFile;
import com.google.javascript.rhino.jstype.StaticSourceFile;
import java.util.LinkedHashSet;
import java.util.Locale;
import java.util.Set;




import org.evosuite.runtime.mock.java.lang.MockIllegalStateException;
import org.junit.runner.RunWith;


public class IRFactoryEvoSuite_branch_Test  {

  @Test
  public void test0()  throws Throwable  {
      int int0 = (-6);
      AstRoot astRoot0 = new AstRoot(int0);
      assertNull(astRoot0.getSourceName());
      assertEquals(false, astRoot0.isInStrictMode());
      assertEquals(-1, astRoot0.getEncodedSourceStart());
      assertEquals(-6, astRoot0.getAbsolutePosition());
      assertEquals(0, astRoot0.depth());
      assertEquals(1, astRoot0.getLength());
      assertEquals(-6, astRoot0.getPosition());
      assertEquals(-1, astRoot0.getLineno());
      assertEquals(0, astRoot0.getParamCount());
      assertEquals("136", astRoot0.toString());
      assertEquals(-1, astRoot0.getBaseLineno());
      assertEquals(0, astRoot0.getRegexpCount());
      assertNull(astRoot0.getJsDoc());
      assertEquals(-1, astRoot0.getEncodedSourceEnd());
      assertNull(astRoot0.getEncodedSource());
      assertEquals(136, astRoot0.getType());
      assertEquals(false, astRoot0.hasChildren());
      assertEquals(-1, astRoot0.getEndLineno());
      assertEquals(0, astRoot0.getFunctionCount());
      assertNotNull(astRoot0);
      
      String string0 = "";
      Name name0 = new Name(int0, string0);
      assertEquals(39, name0.getType());
      assertEquals(-6, name0.getPosition());
      assertNull(name0.getJsDoc());
      assertEquals(-6, name0.getAbsolutePosition());
      assertEquals(0, name0.depth());
      assertEquals("39", name0.toString());
      assertEquals(0, name0.length());
      assertEquals(-1, name0.getLineno());
      assertEquals(false, name0.hasChildren());
      assertEquals(0, name0.getLength());
      assertEquals("", name0.getIdentifier());
      assertEquals("", name0.getString());
      assertNotNull(name0);
      
      ContinueStatement continueStatement0 = new ContinueStatement(int0, name0);
      assertEquals(39, name0.getType());
      assertNull(name0.getJsDoc());
      assertEquals(-6, name0.getAbsolutePosition());
      assertEquals("39", name0.toString());
      assertEquals(1, name0.depth());
      assertEquals(0, name0.length());
      assertEquals(-1, name0.getLineno());
      assertEquals(false, name0.hasChildren());
      assertEquals(0, name0.getLength());
      assertEquals("", name0.getIdentifier());
      assertEquals(0, name0.getPosition());
      assertEquals("", name0.getString());
      assertEquals(-6, continueStatement0.getAbsolutePosition());
      assertEquals(-1, continueStatement0.getLineno());
      assertEquals(121, continueStatement0.getType());
      assertEquals(-6, continueStatement0.getPosition());
      assertEquals(0, continueStatement0.depth());
      assertEquals(-1, continueStatement0.getLength());
      assertNull(continueStatement0.getJsDoc());
      assertEquals(false, continueStatement0.hasChildren());
      assertEquals("121", continueStatement0.toString());
      assertNotNull(continueStatement0);
      
      astRoot0.addChild((AstNode) continueStatement0);
      assertEquals(39, name0.getType());
      assertNull(name0.getJsDoc());
      assertEquals(2, name0.depth());
      assertEquals(-6, name0.getAbsolutePosition());
      assertEquals("39", name0.toString());
      assertEquals(0, name0.length());
      assertEquals(-1, name0.getLineno());
      assertEquals(false, name0.hasChildren());
      assertEquals(0, name0.getLength());
      assertEquals("", name0.getIdentifier());
      assertEquals(0, name0.getPosition());
      assertEquals("", name0.getString());
      assertEquals(-6, continueStatement0.getAbsolutePosition());
      assertEquals(0, continueStatement0.getPosition());
      assertEquals(-1, continueStatement0.getLineno());
      assertEquals(121, continueStatement0.getType());
      assertEquals(-1, continueStatement0.getLength());
      assertEquals(1, continueStatement0.depth());
      assertNull(continueStatement0.getJsDoc());
      assertEquals(false, continueStatement0.hasChildren());
      assertEquals("121", continueStatement0.toString());
      assertNull(astRoot0.getSourceName());
      assertEquals(false, astRoot0.isInStrictMode());
      assertEquals(true, astRoot0.hasChildren());
      assertEquals(-1, astRoot0.getEncodedSourceStart());
      assertEquals(-6, astRoot0.getAbsolutePosition());
      assertEquals(0, astRoot0.depth());
      assertEquals(-6, astRoot0.getPosition());
      assertEquals(-1, astRoot0.getLineno());
      assertEquals(0, astRoot0.getParamCount());
      assertEquals("136", astRoot0.toString());
      assertEquals(-1, astRoot0.getBaseLineno());
      assertEquals(0, astRoot0.getRegexpCount());
      assertNull(astRoot0.getJsDoc());
      assertEquals(-1, astRoot0.getEncodedSourceEnd());
      assertNull(astRoot0.getEncodedSource());
      assertEquals(136, astRoot0.getType());
      assertEquals(-1, astRoot0.getEndLineno());
      assertEquals(0, astRoot0.getFunctionCount());
      assertEquals(-1, astRoot0.getLength());
      
      StaticSourceFile staticSourceFile0 = null;
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      assertEquals("[]", linkedHashSet0.toString());
      assertEquals(0, linkedHashSet0.size());
      assertEquals(true, linkedHashSet0.isEmpty());
      assertNotNull(linkedHashSet0);
      
      boolean boolean0 = true;
      ToolErrorReporter toolErrorReporter0 = new ToolErrorReporter(boolean0);
      assertEquals(false, toolErrorReporter0.hasReportedError());
      assertEquals(true, toolErrorReporter0.isReportingWarnings());
      assertNotNull(toolErrorReporter0);
      
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5_STRICT;
      Config config0 = new Config(linkedHashSet0, linkedHashSet0, boolean0, config_LanguageMode0, boolean0);
      assertEquals("[]", linkedHashSet0.toString());
      assertEquals(0, linkedHashSet0.size());
      assertEquals(true, linkedHashSet0.isEmpty());
      assertNotNull(config0);
      
      Node node0 = IRFactory.transformTree(astRoot0, staticSourceFile0, string0, config0, (ErrorReporter) toolErrorReporter0);
      assertEquals("[]", linkedHashSet0.toString());
      assertEquals(0, linkedHashSet0.size());
      assertEquals(true, linkedHashSet0.isEmpty());
      assertEquals(false, toolErrorReporter0.hasReportedError());
      assertEquals(true, toolErrorReporter0.isReportingWarnings());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isBlock());
      assertEquals(0, node0.getChangeTime());
      assertEquals(-1, node0.getLength());
      assertEquals(false, node0.isString());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isCast());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isSwitch());
      assertEquals(true, node0.hasOneChild());
      assertEquals(false, node0.isDelProp());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isStringKey());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isContinue());
      assertEquals(true, node0.hasChildren());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isOnlyModifiesArgumentsCall());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isCatch());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isSetterDef());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isQuotedString());
      assertEquals(132, node0.getType());
      assertEquals(false, node0.isAssign());
      assertEquals(true, node0.mayMutateGlobalStateOrThrow());
      assertEquals(true, node0.mayMutateArguments());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isFromExterns());
      assertEquals(1, node0.getChildCount());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isIf());
      assertEquals(true, node0.isScript());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isFalse());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isGetProp());
      assertNull(astRoot0.getSourceName());
      assertEquals(false, astRoot0.isInStrictMode());
      assertEquals(true, astRoot0.hasChildren());
      assertEquals(-1, astRoot0.getEncodedSourceStart());
      assertEquals(-6, astRoot0.getAbsolutePosition());
      assertEquals(0, astRoot0.depth());
      assertEquals(-6, astRoot0.getPosition());
      assertEquals(-1, astRoot0.getLineno());
      assertEquals(0, astRoot0.getParamCount());
      assertEquals("136", astRoot0.toString());
      assertEquals(-1, astRoot0.getBaseLineno());
      assertEquals(0, astRoot0.getRegexpCount());
      assertNull(astRoot0.getJsDoc());
      assertEquals(-1, astRoot0.getEncodedSourceEnd());
      assertNull(astRoot0.getEncodedSource());
      assertEquals(136, astRoot0.getType());
      assertEquals(-1, astRoot0.getEndLineno());
      assertEquals(0, astRoot0.getFunctionCount());
      assertEquals(-1, astRoot0.getLength());
      assertNotNull(node0);
  }

  @Test
  public void test1() {}
//   @Test
//   public void test1()  throws Throwable  {
//       int int0 = (-6);
//       AstRoot astRoot0 = new AstRoot(int0);
//       assertEquals(false, astRoot0.isInStrictMode());
//       assertEquals(0, astRoot0.getParamCount());
//       assertEquals(-1, astRoot0.getLineno());
//       assertEquals(136, astRoot0.getType());
//       assertEquals("136", astRoot0.toString());
//       assertEquals(-1, astRoot0.getEncodedSourceEnd());
//       assertEquals(1, astRoot0.getLength());
//       assertNull(astRoot0.getEncodedSource());
//       assertNull(astRoot0.getJsDoc());
//       assertEquals(0, astRoot0.getRegexpCount());
//       assertEquals(-6, astRoot0.getAbsolutePosition());
//       assertEquals(0, astRoot0.depth());
//       assertNull(astRoot0.getSourceName());
//       assertEquals(-6, astRoot0.getPosition());
//       assertEquals(-1, astRoot0.getEndLineno());
//       assertEquals(0, astRoot0.getFunctionCount());
//       assertEquals(false, astRoot0.hasChildren());
//       assertEquals(-1, astRoot0.getEncodedSourceStart());
//       assertEquals(-1, astRoot0.getBaseLineno());
//       assertNotNull(astRoot0);
//       
//       String string0 = "super";
//       Name name0 = new Name(int0, string0);
//       assertEquals(-6, name0.getAbsolutePosition());
//       assertEquals(5, name0.length());
//       assertEquals(false, name0.hasChildren());
//       assertEquals(0, name0.depth());
//       assertEquals(-6, name0.getPosition());
//       assertEquals(5, name0.getLength());
//       assertNull(name0.getJsDoc());
//       assertEquals("super", name0.getIdentifier());
//       assertEquals("39", name0.toString());
//       assertEquals(-1, name0.getLineno());
//       assertEquals(39, name0.getType());
//       assertEquals("super", name0.getString());
//       assertNotNull(name0);
//       
//       ContinueStatement continueStatement0 = new ContinueStatement(int0, name0);
//       assertEquals(121, continueStatement0.getType());
//       assertEquals("121", continueStatement0.toString());
//       assertEquals(0, continueStatement0.depth());
//       assertEquals(-1, continueStatement0.getLineno());
//       assertNull(continueStatement0.getJsDoc());
//       assertEquals(-6, continueStatement0.getPosition());
//       assertEquals(-1, continueStatement0.getLength());
//       assertEquals(false, continueStatement0.hasChildren());
//       assertEquals(-6, continueStatement0.getAbsolutePosition());
//       assertEquals(-6, name0.getAbsolutePosition());
//       assertEquals(5, name0.length());
//       assertEquals(false, name0.hasChildren());
//       assertEquals(1, name0.depth());
//       assertEquals(5, name0.getLength());
//       assertNull(name0.getJsDoc());
//       assertEquals("super", name0.getIdentifier());
//       assertEquals("39", name0.toString());
//       assertEquals(-1, name0.getLineno());
//       assertEquals(0, name0.getPosition());
//       assertEquals(39, name0.getType());
//       assertEquals("super", name0.getString());
//       assertNotNull(continueStatement0);
//       
//       astRoot0.addChild((AstNode) continueStatement0);
//       assertEquals(-1, astRoot0.getLength());
//       assertEquals(false, astRoot0.isInStrictMode());
//       assertEquals(0, astRoot0.getParamCount());
//       assertEquals(-1, astRoot0.getLineno());
//       assertEquals(136, astRoot0.getType());
//       assertEquals("136", astRoot0.toString());
//       assertEquals(-1, astRoot0.getEncodedSourceEnd());
//       assertNull(astRoot0.getEncodedSource());
//       assertNull(astRoot0.getJsDoc());
//       assertEquals(0, astRoot0.getRegexpCount());
//       assertEquals(-6, astRoot0.getAbsolutePosition());
//       assertEquals(0, astRoot0.depth());
//       assertNull(astRoot0.getSourceName());
//       assertEquals(-6, astRoot0.getPosition());
//       assertEquals(-1, astRoot0.getEndLineno());
//       assertEquals(0, astRoot0.getFunctionCount());
//       assertEquals(-1, astRoot0.getEncodedSourceStart());
//       assertEquals(true, astRoot0.hasChildren());
//       assertEquals(-1, astRoot0.getBaseLineno());
//       assertEquals(121, continueStatement0.getType());
//       assertEquals("121", continueStatement0.toString());
//       assertEquals(1, continueStatement0.depth());
//       assertEquals(-1, continueStatement0.getLineno());
//       assertNull(continueStatement0.getJsDoc());
//       assertEquals(0, continueStatement0.getPosition());
//       assertEquals(-1, continueStatement0.getLength());
//       assertEquals(false, continueStatement0.hasChildren());
//       assertEquals(-6, continueStatement0.getAbsolutePosition());
//       assertEquals(-6, name0.getAbsolutePosition());
//       assertEquals(5, name0.length());
//       assertEquals(false, name0.hasChildren());
//       assertEquals(5, name0.getLength());
//       assertNull(name0.getJsDoc());
//       assertEquals("super", name0.getIdentifier());
//       assertEquals("39", name0.toString());
//       assertEquals(2, name0.depth());
//       assertEquals(-1, name0.getLineno());
//       assertEquals(0, name0.getPosition());
//       assertEquals(39, name0.getType());
//       assertEquals("super", name0.getString());
//       
//       StaticSourceFile staticSourceFile0 = null;
//       LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
//       assertEquals(0, linkedHashSet0.size());
//       assertEquals(true, linkedHashSet0.isEmpty());
//       assertEquals("[]", linkedHashSet0.toString());
//       assertNotNull(linkedHashSet0);
//       
//       boolean boolean0 = true;
//       Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5_STRICT;
//       Config config0 = new Config(linkedHashSet0, linkedHashSet0, boolean0, config_LanguageMode0, boolean0);
//       assertEquals(0, linkedHashSet0.size());
//       assertEquals(true, linkedHashSet0.isEmpty());
//       assertEquals("[]", linkedHashSet0.toString());
//       assertNotNull(config0);
//       
//       ToolErrorReporter toolErrorReporter0 = new ToolErrorReporter(boolean0);
//       assertEquals(true, toolErrorReporter0.isReportingWarnings());
//       assertEquals(false, toolErrorReporter0.hasReportedError());
//       assertNotNull(toolErrorReporter0);
//       
//       Node node0 = IRFactory.transformTree(astRoot0, staticSourceFile0, string0, config0, (ErrorReporter) toolErrorReporter0);
//       assertEquals(false, node0.isDec());
//       assertEquals(false, node0.isLabel());
//       assertEquals(true, node0.hasOneChild());
//       assertEquals(false, node0.isAnd());
//       assertEquals(false, node0.isThrow());
//       assertEquals(false, node0.hasMoreThanOneChild());
//       assertEquals(false, node0.isOptionalArg());
//       assertEquals(false, node0.isWith());
//       assertEquals(false, node0.isVar());
//       assertEquals(-1, node0.getLength());
//       assertEquals(false, node0.isNot());
//       assertEquals(false, node0.isVoid());
//       assertEquals(false, node0.isNoSideEffectsCall());
//       assertEquals(false, node0.isBreak());
//       assertEquals(true, node0.hasChildren());
//       assertEquals(false, node0.isString());
//       assertEquals(false, node0.isReturn());
//       assertEquals(0, node0.getSideEffectFlags());
//       assertEquals(false, node0.isDebugger());
//       assertEquals(false, node0.isOr());
//       assertEquals(false, node0.isLocalResultCall());
//       assertEquals(false, node0.isDelProp());
//       assertEquals(false, node0.isTypeOf());
//       assertEquals(false, node0.isHook());
//       assertEquals(false, node0.isFunction());
//       assertEquals(false, node0.isTrue());
//       assertEquals(false, node0.isVarArgs());
//       assertEquals(false, node0.isArrayLit());
//       assertEquals(false, node0.isNumber());
//       assertEquals(false, node0.isComma());
//       assertEquals(false, node0.isDefaultCase());
//       assertEquals(false, node0.isStringKey());
//       assertEquals(false, node0.isIn());
//       assertEquals(false, node0.isFalse());
//       assertEquals(false, node0.isFor());
//       assertEquals(false, node0.isCall());
//       assertEquals(false, node0.isInstanceOf());
//       assertEquals(false, node0.isIf());
//       assertEquals(false, node0.isWhile());
//       assertEquals(false, node0.isRegExp());
//       assertEquals(false, node0.isNew());
//       assertEquals(true, node0.isScript());
//       assertEquals(false, node0.isExprResult());
//       assertEquals(false, node0.isName());
//       assertEquals(false, node0.isSetterDef());
//       assertEquals(false, node0.isNull());
//       assertEquals(false, node0.isSyntheticBlock());
//       assertEquals(false, node0.isParamList());
//       assertEquals(false, node0.isThis());
//       assertNull(node0.getSourceFileName());
//       assertEquals(1, node0.getChildCount());
//       assertEquals(false, node0.isFromExterns());
//       assertEquals(-1, node0.getCharno());
//       assertEquals(false, node0.isCatch());
//       assertEquals(false, node0.isObjectLit());
//       assertEquals(false, node0.isOnlyModifiesArgumentsCall());
//       assertEquals(-1, node0.getSourcePosition());
//       assertEquals(false, node0.isGetElem());
//       assertEquals(false, node0.isOnlyModifiesThisCall());
//       assertEquals(false, node0.isInc());
//       assertEquals(false, node0.isAssignAdd());
//       assertEquals(false, node0.isNE());
//       assertEquals(false, node0.isBlock());
//       assertEquals(false, node0.isQuotedString());
//       assertEquals(0, node0.getChangeTime());
//       assertEquals(false, node0.isContinue());
//       assertEquals(-1, node0.getLineno());
//       assertEquals(true, node0.mayMutateArguments());
//       assertEquals(false, node0.isAdd());
//       assertEquals(false, node0.isSwitch());
//       assertEquals(132, node0.getType());
//       assertEquals(false, node0.isDo());
//       assertEquals(true, node0.mayMutateGlobalStateOrThrow());
//       assertEquals(false, node0.isCase());
//       assertEquals(false, node0.isLabelName());
//       assertEquals(false, node0.isTry());
//       assertEquals(false, node0.isGetProp());
//       assertEquals(false, node0.isEmpty());
//       assertEquals(false, node0.wasEmptyNode());
//       assertEquals(false, node0.isCast());
//       assertEquals(false, node0.isGetterDef());
//       assertEquals(false, node0.isAssign());
//       assertEquals(true, toolErrorReporter0.hasReportedError());
//       assertEquals(true, toolErrorReporter0.isReportingWarnings());
//       assertEquals(-1, astRoot0.getLength());
//       assertEquals(false, astRoot0.isInStrictMode());
//       assertEquals(0, astRoot0.getParamCount());
//       assertEquals(-1, astRoot0.getLineno());
//       assertEquals(136, astRoot0.getType());
//       assertEquals("136", astRoot0.toString());
//       assertEquals(-1, astRoot0.getEncodedSourceEnd());
//       assertNull(astRoot0.getEncodedSource());
//       assertNull(astRoot0.getJsDoc());
//       assertEquals(0, astRoot0.getRegexpCount());
//       assertEquals(-6, astRoot0.getAbsolutePosition());
//       assertEquals(0, astRoot0.depth());
//       assertNull(astRoot0.getSourceName());
//       assertEquals(-6, astRoot0.getPosition());
//       assertEquals(-1, astRoot0.getEndLineno());
//       assertEquals(0, astRoot0.getFunctionCount());
//       assertEquals(-1, astRoot0.getEncodedSourceStart());
//       assertEquals(true, astRoot0.hasChildren());
//       assertEquals(-1, astRoot0.getBaseLineno());
//       assertEquals(0, linkedHashSet0.size());
//       assertEquals(true, linkedHashSet0.isEmpty());
//       assertEquals("[]", linkedHashSet0.toString());
//       assertNotNull(node0);
//   }

  @Test
  public void test2()  throws Throwable  {
      int int0 = 601;
      AstRoot astRoot0 = new AstRoot(int0);
      //  // Unstable assertion: assertEquals(-1, astRoot0.getEncodedSourceStart());
      //  // Unstable assertion: assertEquals(1, astRoot0.getLength());
      //  // Unstable assertion: assertEquals(-1, astRoot0.getEndLineno());
      //  // Unstable assertion: assertEquals(601, astRoot0.getAbsolutePosition());
      //  // Unstable assertion: assertEquals(0, astRoot0.getRegexpCount());
      //  // Unstable assertion: assertEquals(-1, astRoot0.getBaseLineno());
      //  // Unstable assertion: assertEquals(601, astRoot0.getPosition());
      //  // Unstable assertion: assertEquals(false, astRoot0.isInStrictMode());
      //  // Unstable assertion: assertEquals(0, astRoot0.depth());
      //  // Unstable assertion: assertEquals(136, astRoot0.getType());
      //  // Unstable assertion: assertEquals("136", astRoot0.toString());
      //  // Unstable assertion: assertNull(astRoot0.getJsDoc());
      //  // Unstable assertion: assertEquals(-1, astRoot0.getEncodedSourceEnd());
      //  // Unstable assertion: assertEquals(0, astRoot0.getFunctionCount());
      //  // Unstable assertion: assertNull(astRoot0.getEncodedSource());
      //  // Unstable assertion: assertNull(astRoot0.getSourceName());
      //  // Unstable assertion: assertEquals(-1, astRoot0.getLineno());
      //  // Unstable assertion: assertEquals(false, astRoot0.hasChildren());
      //  // Unstable assertion: assertEquals(0, astRoot0.getParamCount());
      //  // Unstable assertion: assertNotNull(astRoot0);
      
      StaticSourceFile staticSourceFile0 = null;
      String string0 = "(/|(\n[ \t]*))\\p[ \t]*@[a-zG-Z]";
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      //  // Unstable assertion: assertEquals("zh", locale0.getLanguage());
      //  // Unstable assertion: assertEquals("", locale0.getVariant());
      //  // Unstable assertion: assertEquals("CN", locale0.getCountry());
      //  // Unstable assertion: assertEquals("zh_CN", locale0.toString());
      //  // Unstable assertion: assertEquals("zho", locale0.getISO3Language());
      //  // Unstable assertion: assertEquals("CHN", locale0.getISO3Country());
      //  // Unstable assertion: assertNotNull(locale0);
      
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      //  // Unstable assertion: assertEquals("zh", locale0.getLanguage());
      //  // Unstable assertion: assertEquals("", locale0.getVariant());
      //  // Unstable assertion: assertEquals("CN", locale0.getCountry());
      //  // Unstable assertion: assertEquals("zh_CN", locale0.toString());
      //  // Unstable assertion: assertEquals("zho", locale0.getISO3Language());
      //  // Unstable assertion: assertEquals("CHN", locale0.getISO3Country());
      //  // Unstable assertion: assertEquals(0, set0.size());
      //  // Unstable assertion: assertEquals(true, set0.isEmpty());
      //  // Unstable assertion: assertNotNull(set0);
      
      boolean boolean0 = false;
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5_STRICT;
      Config config0 = new Config(set0, set0, boolean0, config_LanguageMode0, boolean0);
      //  // Unstable assertion: assertEquals("zh", locale0.getLanguage());
      //  // Unstable assertion: assertEquals("", locale0.getVariant());
      //  // Unstable assertion: assertEquals("CN", locale0.getCountry());
      //  // Unstable assertion: assertEquals("zh_CN", locale0.toString());
      //  // Unstable assertion: assertEquals("zho", locale0.getISO3Language());
      //  // Unstable assertion: assertEquals("CHN", locale0.getISO3Country());
      //  // Unstable assertion: assertEquals(0, set0.size());
      //  // Unstable assertion: assertEquals(true, set0.isEmpty());
      //  // Unstable assertion: assertNotNull(config0);
      
      ErrorReporter errorReporter0 = null;
      Node node0 = IRFactory.transformTree(astRoot0, staticSourceFile0, string0, config0, errorReporter0);
      //  // Unstable assertion: assertEquals(-1, astRoot0.getEncodedSourceStart());
      //  // Unstable assertion: assertEquals(1, astRoot0.getLength());
      //  // Unstable assertion: assertEquals(-1, astRoot0.getEndLineno());
      //  // Unstable assertion: assertEquals(601, astRoot0.getAbsolutePosition());
      //  // Unstable assertion: assertEquals(0, astRoot0.getRegexpCount());
      //  // Unstable assertion: assertEquals(-1, astRoot0.getBaseLineno());
      //  // Unstable assertion: assertEquals(601, astRoot0.getPosition());
      //  // Unstable assertion: assertEquals(false, astRoot0.isInStrictMode());
      //  // Unstable assertion: assertEquals(0, astRoot0.depth());
      //  // Unstable assertion: assertEquals(136, astRoot0.getType());
      //  // Unstable assertion: assertEquals("136", astRoot0.toString());
      //  // Unstable assertion: assertNull(astRoot0.getJsDoc());
      //  // Unstable assertion: assertEquals(-1, astRoot0.getEncodedSourceEnd());
      //  // Unstable assertion: assertEquals(0, astRoot0.getFunctionCount());
      //  // Unstable assertion: assertNull(astRoot0.getEncodedSource());
      //  // Unstable assertion: assertNull(astRoot0.getSourceName());
      //  // Unstable assertion: assertEquals(-1, astRoot0.getLineno());
      //  // Unstable assertion: assertEquals(false, astRoot0.hasChildren());
      //  // Unstable assertion: assertEquals(0, astRoot0.getParamCount());
      //  // Unstable assertion: assertEquals("zh", locale0.getLanguage());
      //  // Unstable assertion: assertEquals("", locale0.getVariant());
      //  // Unstable assertion: assertEquals("CN", locale0.getCountry());
      //  // Unstable assertion: assertEquals("zh_CN", locale0.toString());
      //  // Unstable assertion: assertEquals("zho", locale0.getISO3Language());
      //  // Unstable assertion: assertEquals("CHN", locale0.getISO3Country());
      //  // Unstable assertion: assertEquals(-1, node0.getSourcePosition());
      //  // Unstable assertion: assertEquals(true, node0.isScript());
      //  // Unstable assertion: assertEquals(false, node0.isThrow());
      //  // Unstable assertion: assertEquals(false, node0.isRegExp());
      //  // Unstable assertion: assertEquals(false, node0.isDelProp());
      //  // Unstable assertion: assertEquals(false, node0.isAssign());
      //  // Unstable assertion: assertEquals(false, node0.isDefaultCase());
      //  // Unstable assertion: assertEquals(false, node0.isFunction());
      //  // Unstable assertion: assertEquals(false, node0.isTrue());
      //  // Unstable assertion: assertEquals(false, node0.isOnlyModifiesThisCall());
      //  // Unstable assertion: assertEquals(false, node0.isContinue());
      //  // Unstable assertion: assertEquals(false, node0.isParamList());
      //  // Unstable assertion: assertEquals(false, node0.isDo());
      //  // Unstable assertion: assertEquals(false, node0.isThis());
      //  // Unstable assertion: assertEquals(false, node0.isInc());
      //  // Unstable assertion: assertEquals(false, node0.isGetProp());
      //  // Unstable assertion: assertEquals(false, node0.isNew());
      //  // Unstable assertion: assertEquals(false, node0.isDebugger());
      //  // Unstable assertion: assertEquals(false, node0.isCast());
      //  // Unstable assertion: assertEquals(false, node0.isNumber());
      //  // Unstable assertion: assertEquals(false, node0.isBlock());
      //  // Unstable assertion: assertEquals(false, node0.isLabel());
      //  // Unstable assertion: assertEquals(false, node0.isNE());
      //  // Unstable assertion: assertEquals(false, node0.isAnd());
      //  // Unstable assertion: assertEquals(false, node0.hasChildren());
      //  // Unstable assertion: assertEquals(false, node0.isSyntheticBlock());
      //  // Unstable assertion: assertEquals(false, node0.isHook());
      //  // Unstable assertion: assertEquals(false, node0.isAssignAdd());
      //  // Unstable assertion: assertEquals(false, node0.isEmpty());
      //  // Unstable assertion: assertEquals(true, node0.mayMutateArguments());
      //  // Unstable assertion: assertEquals(false, node0.wasEmptyNode());
      //  // Unstable assertion: assertEquals(false, node0.hasOneChild());
      //  // Unstable assertion: assertEquals(false, node0.isOnlyModifiesArgumentsCall());
      //  // Unstable assertion: assertEquals(false, node0.isLabelName());
      //  // Unstable assertion: assertEquals(true, node0.mayMutateGlobalStateOrThrow());
      //  // Unstable assertion: assertEquals(false, node0.isQuotedString());
      //  // Unstable assertion: assertEquals(false, node0.isGetElem());
      //  // Unstable assertion: assertEquals(0, node0.getSideEffectFlags());
      //  // Unstable assertion: assertEquals(false, node0.isArrayLit());
      //  // Unstable assertion: assertEquals(false, node0.isCase());
      //  // Unstable assertion: assertEquals(false, node0.isWhile());
      //  // Unstable assertion: assertEquals(false, node0.isAdd());
      //  // Unstable assertion: assertEquals(-1, node0.getLineno());
      //  // Unstable assertion: assertEquals(false, node0.isObjectLit());
      //  // Unstable assertion: assertEquals(false, node0.isFor());
      //  // Unstable assertion: assertEquals(false, node0.isInstanceOf());
      //  // Unstable assertion: assertEquals(false, node0.isCall());
      //  // Unstable assertion: assertEquals(false, node0.hasMoreThanOneChild());
      //  // Unstable assertion: assertNull(node0.getSourceFileName());
      //  // Unstable assertion: assertEquals(false, node0.isName());
      //  // Unstable assertion: assertEquals(132, node0.getType());
      //  // Unstable assertion: assertEquals(-1, node0.getCharno());
      //  // Unstable assertion: assertEquals(false, node0.isOptionalArg());
      //  // Unstable assertion: assertEquals(false, node0.isNoSideEffectsCall());
      //  // Unstable assertion: assertEquals(false, node0.isSetterDef());
      //  // Unstable assertion: assertEquals(false, node0.isWith());
      //  // Unstable assertion: assertEquals(false, node0.isLocalResultCall());
      //  // Unstable assertion: assertEquals(false, node0.isDec());
      //  // Unstable assertion: assertEquals(false, node0.isReturn());
      //  // Unstable assertion: assertEquals(false, node0.isComma());
      //  // Unstable assertion: assertEquals(false, node0.isOr());
      //  // Unstable assertion: assertEquals(false, node0.isStringKey());
      //  // Unstable assertion: assertEquals(false, node0.isExprResult());
      //  // Unstable assertion: assertEquals(false, node0.isCatch());
      //  // Unstable assertion: assertEquals(false, node0.isTry());
      //  // Unstable assertion: assertEquals(false, node0.isFalse());
      //  // Unstable assertion: assertEquals(false, node0.isSwitch());
      //  // Unstable assertion: assertEquals(false, node0.isString());
      //  // Unstable assertion: assertEquals(false, node0.isNot());
      //  // Unstable assertion: assertEquals(false, node0.isFromExterns());
      //  // Unstable assertion: assertEquals(false, node0.isVoid());
      //  // Unstable assertion: assertEquals(false, node0.isGetterDef());
      //  // Unstable assertion: assertEquals(false, node0.isTypeOf());
      //  // Unstable assertion: assertEquals(false, node0.isNull());
      //  // Unstable assertion: assertEquals(false, node0.isIf());
      //  // Unstable assertion: assertEquals(0, node0.getChildCount());
      //  // Unstable assertion: assertEquals(false, node0.isVarArgs());
      //  // Unstable assertion: assertEquals(0, node0.getLength());
      //  // Unstable assertion: assertEquals(false, node0.isVar());
      //  // Unstable assertion: assertEquals(false, node0.isBreak());
      //  // Unstable assertion: assertEquals(false, node0.isIn());
      //  // Unstable assertion: assertEquals(0, node0.getChangeTime());
      //  // Unstable assertion: assertEquals(0, set0.size());
      //  // Unstable assertion: assertEquals(true, set0.isEmpty());
      //  // Unstable assertion: assertNotNull(node0);
  }

  @Test
  public void test3()  throws Throwable  {
      boolean boolean0 = true;
      ReturnStatement returnStatement0 = new ReturnStatement();
      assertEquals(4, returnStatement0.getType());
      assertNull(returnStatement0.getJsDoc());
      assertEquals(-1, returnStatement0.getAbsolutePosition());
      assertEquals(-1, returnStatement0.getLineno());
      assertEquals(1, returnStatement0.getLength());
      assertEquals("4", returnStatement0.toString());
      assertEquals(false, returnStatement0.hasChildren());
      assertEquals(0, returnStatement0.depth());
      assertEquals(-1, returnStatement0.getPosition());
      assertNotNull(returnStatement0);
      
      AstRoot astRoot0 = returnStatement0.getAstRoot();
      assertEquals(4, returnStatement0.getType());
      assertNull(returnStatement0.getJsDoc());
      assertEquals(-1, returnStatement0.getAbsolutePosition());
      assertEquals(-1, returnStatement0.getLineno());
      assertEquals(1, returnStatement0.getLength());
      assertEquals("4", returnStatement0.toString());
      assertEquals(false, returnStatement0.hasChildren());
      assertEquals(0, returnStatement0.depth());
      assertEquals(-1, returnStatement0.getPosition());
      assertNull(astRoot0);
      
      String string0 = "7req!@F";
      SimpleSourceFile simpleSourceFile0 = new SimpleSourceFile(string0, boolean0);
      assertEquals(true, simpleSourceFile0.isExtern());
      assertEquals("7req!@F", simpleSourceFile0.toString());
      assertEquals("7req!@F", simpleSourceFile0.getName());
      assertNotNull(simpleSourceFile0);
      
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      assertEquals("[]", linkedHashSet0.toString());
      assertEquals(true, linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertNotNull(linkedHashSet0);
      
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT3;
      Config config0 = new Config(linkedHashSet0, linkedHashSet0, boolean0, config_LanguageMode0, boolean0);
      assertEquals("[]", linkedHashSet0.toString());
      assertEquals(true, linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertNotNull(config0);
      
      ToolErrorReporter toolErrorReporter0 = new ToolErrorReporter(boolean0);
      assertEquals(false, toolErrorReporter0.hasReportedError());
      assertEquals(true, toolErrorReporter0.isReportingWarnings());
      assertNotNull(toolErrorReporter0);
      
      // Undeclared exception!
      try {
        Node node0 = IRFactory.transformTree(astRoot0, (StaticSourceFile) simpleSourceFile0, string0, config0, (ErrorReporter) toolErrorReporter0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test4()  throws Throwable  {
      int int0 = (-6);
      AstRoot astRoot0 = new AstRoot(int0);
      assertEquals(0, astRoot0.depth());
      assertEquals(-1, astRoot0.getBaseLineno());
      assertEquals(-6, astRoot0.getAbsolutePosition());
      assertEquals(1, astRoot0.getLength());
      assertEquals(false, astRoot0.hasChildren());
      assertEquals(false, astRoot0.isInStrictMode());
      assertEquals("136", astRoot0.toString());
      assertNull(astRoot0.getEncodedSource());
      assertNull(astRoot0.getSourceName());
      assertEquals(-6, astRoot0.getPosition());
      assertEquals(136, astRoot0.getType());
      assertEquals(-1, astRoot0.getEncodedSourceEnd());
      assertNull(astRoot0.getJsDoc());
      assertEquals(-1, astRoot0.getEndLineno());
      assertEquals(0, astRoot0.getRegexpCount());
      assertEquals(-1, astRoot0.getEncodedSourceStart());
      assertEquals(0, astRoot0.getParamCount());
      assertEquals(0, astRoot0.getFunctionCount());
      assertEquals(-1, astRoot0.getLineno());
      assertNotNull(astRoot0);
      
      String string0 = "super";
      RegExpLiteral regExpLiteral0 = new RegExpLiteral(int0);
      assertNull(regExpLiteral0.getFlags());
      assertEquals(48, regExpLiteral0.getType());
      assertEquals(-6, regExpLiteral0.getAbsolutePosition());
      assertEquals(-6, regExpLiteral0.getPosition());
      assertEquals(0, regExpLiteral0.depth());
      assertEquals(-1, regExpLiteral0.getLineno());
      assertNull(regExpLiteral0.getValue());
      assertEquals("48", regExpLiteral0.toString());
      assertEquals(1, regExpLiteral0.getLength());
      assertEquals(false, regExpLiteral0.hasChildren());
      assertNull(regExpLiteral0.getJsDoc());
      assertNotNull(regExpLiteral0);
      
      astRoot0.addChildToBack((com.google.javascript.rhino.head.Node) regExpLiteral0);
      assertNull(regExpLiteral0.getFlags());
      assertEquals(48, regExpLiteral0.getType());
      assertEquals(-6, regExpLiteral0.getAbsolutePosition());
      assertEquals(-6, regExpLiteral0.getPosition());
      assertEquals(0, regExpLiteral0.depth());
      assertEquals(-1, regExpLiteral0.getLineno());
      assertNull(regExpLiteral0.getValue());
      assertEquals("48", regExpLiteral0.toString());
      assertEquals(1, regExpLiteral0.getLength());
      assertEquals(false, regExpLiteral0.hasChildren());
      assertNull(regExpLiteral0.getJsDoc());
      assertEquals(0, astRoot0.depth());
      assertEquals(-1, astRoot0.getBaseLineno());
      assertEquals(-6, astRoot0.getAbsolutePosition());
      assertEquals(1, astRoot0.getLength());
      assertEquals(false, astRoot0.isInStrictMode());
      assertEquals("136", astRoot0.toString());
      assertNull(astRoot0.getEncodedSource());
      assertNull(astRoot0.getSourceName());
      assertEquals(-6, astRoot0.getPosition());
      assertEquals(136, astRoot0.getType());
      assertEquals(-1, astRoot0.getEncodedSourceEnd());
      assertNull(astRoot0.getJsDoc());
      assertEquals(-1, astRoot0.getEndLineno());
      assertEquals(0, astRoot0.getRegexpCount());
      assertEquals(true, astRoot0.hasChildren());
      assertEquals(-1, astRoot0.getEncodedSourceStart());
      assertEquals(0, astRoot0.getParamCount());
      assertEquals(0, astRoot0.getFunctionCount());
      assertEquals(-1, astRoot0.getLineno());
      
      StaticSourceFile staticSourceFile0 = null;
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      assertEquals("[]", linkedHashSet0.toString());
      assertEquals(true, linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertNotNull(linkedHashSet0);
      
      boolean boolean0 = true;
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5_STRICT;
      Config config0 = new Config(linkedHashSet0, linkedHashSet0, boolean0, config_LanguageMode0, boolean0);
      assertEquals("[]", linkedHashSet0.toString());
      assertEquals(true, linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertNotNull(config0);
      
      ToolErrorReporter toolErrorReporter0 = new ToolErrorReporter(boolean0);
      assertEquals(false, toolErrorReporter0.hasReportedError());
      assertEquals(true, toolErrorReporter0.isReportingWarnings());
      assertNotNull(toolErrorReporter0);
      
      // Undeclared exception!
      try {
        Node node0 = IRFactory.transformTree(astRoot0, staticSourceFile0, string0, config0, (ErrorReporter) toolErrorReporter0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // StringNode: str is null
         //
      }
  }

  @Test
  public void test5()  throws Throwable  {
      int int0 = (-6);
      AstRoot astRoot0 = new AstRoot(int0);
      assertEquals(0, astRoot0.getRegexpCount());
      assertEquals(-1, astRoot0.getEndLineno());
      assertEquals(false, astRoot0.hasChildren());
      assertEquals(-1, astRoot0.getBaseLineno());
      assertNull(astRoot0.getJsDoc());
      assertEquals(-6, astRoot0.getPosition());
      assertEquals(0, astRoot0.getFunctionCount());
      assertEquals("136", astRoot0.toString());
      assertEquals(0, astRoot0.depth());
      assertEquals(-1, astRoot0.getEncodedSourceStart());
      assertEquals(136, astRoot0.getType());
      assertEquals(false, astRoot0.isInStrictMode());
      assertNull(astRoot0.getSourceName());
      assertEquals(0, astRoot0.getParamCount());
      assertEquals(-1, astRoot0.getLineno());
      assertEquals(1, astRoot0.getLength());
      assertEquals(-6, astRoot0.getAbsolutePosition());
      assertNull(astRoot0.getEncodedSource());
      assertEquals(-1, astRoot0.getEncodedSourceEnd());
      assertNotNull(astRoot0);
      
      String string0 = "";
      Name name0 = new Name(int0, string0);
      assertEquals(0, name0.getLength());
      assertEquals(0, name0.depth());
      assertEquals(39, name0.getType());
      assertEquals("", name0.getString());
      assertEquals(-6, name0.getAbsolutePosition());
      assertEquals(-1, name0.getLineno());
      assertEquals("", name0.getIdentifier());
      assertNull(name0.getJsDoc());
      assertEquals(0, name0.length());
      assertEquals("39", name0.toString());
      assertEquals(-6, name0.getPosition());
      assertEquals(false, name0.hasChildren());
      assertNotNull(name0);
      
      ContinueStatement continueStatement0 = new ContinueStatement(int0, name0);
      assertEquals(0, name0.getLength());
      assertEquals(39, name0.getType());
      assertEquals("", name0.getString());
      assertEquals(-6, name0.getAbsolutePosition());
      assertEquals(-1, name0.getLineno());
      assertEquals(1, name0.depth());
      assertEquals("", name0.getIdentifier());
      assertNull(name0.getJsDoc());
      assertEquals(0, name0.length());
      assertEquals("39", name0.toString());
      assertEquals(0, name0.getPosition());
      assertEquals(false, name0.hasChildren());
      assertEquals(-6, continueStatement0.getAbsolutePosition());
      assertNull(continueStatement0.getJsDoc());
      assertEquals(false, continueStatement0.hasChildren());
      assertEquals(-1, continueStatement0.getLength());
      assertEquals(0, continueStatement0.depth());
      assertEquals("121", continueStatement0.toString());
      assertEquals(121, continueStatement0.getType());
      assertEquals(-6, continueStatement0.getPosition());
      assertEquals(-1, continueStatement0.getLineno());
      assertNotNull(continueStatement0);
      
      astRoot0.addChild((AstNode) continueStatement0);
      assertEquals(0, name0.getLength());
      assertEquals(39, name0.getType());
      assertEquals("", name0.getString());
      assertEquals(-6, name0.getAbsolutePosition());
      assertEquals(2, name0.depth());
      assertEquals(-1, name0.getLineno());
      assertEquals("", name0.getIdentifier());
      assertNull(name0.getJsDoc());
      assertEquals(0, name0.length());
      assertEquals("39", name0.toString());
      assertEquals(0, name0.getPosition());
      assertEquals(false, name0.hasChildren());
      assertEquals(-6, continueStatement0.getAbsolutePosition());
      assertEquals(0, continueStatement0.getPosition());
      assertNull(continueStatement0.getJsDoc());
      assertEquals(false, continueStatement0.hasChildren());
      assertEquals(-1, continueStatement0.getLength());
      assertEquals(1, continueStatement0.depth());
      assertEquals("121", continueStatement0.toString());
      assertEquals(121, continueStatement0.getType());
      assertEquals(-1, continueStatement0.getLineno());
      assertEquals(0, astRoot0.getRegexpCount());
      assertEquals(-1, astRoot0.getEndLineno());
      assertEquals(-1, astRoot0.getBaseLineno());
      assertNull(astRoot0.getJsDoc());
      assertEquals(-6, astRoot0.getPosition());
      assertEquals(0, astRoot0.getFunctionCount());
      assertEquals("136", astRoot0.toString());
      assertEquals(0, astRoot0.depth());
      assertEquals(-1, astRoot0.getEncodedSourceStart());
      assertEquals(136, astRoot0.getType());
      assertEquals(false, astRoot0.isInStrictMode());
      assertNull(astRoot0.getSourceName());
      assertEquals(0, astRoot0.getParamCount());
      assertEquals(-1, astRoot0.getLineno());
      assertEquals(-1, astRoot0.getLength());
      assertEquals(true, astRoot0.hasChildren());
      assertEquals(-6, astRoot0.getAbsolutePosition());
      assertNull(astRoot0.getEncodedSource());
      assertEquals(-1, astRoot0.getEncodedSourceEnd());
      
      StaticSourceFile staticSourceFile0 = null;
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      assertEquals(true, linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertEquals("[]", linkedHashSet0.toString());
      assertNotNull(linkedHashSet0);
      
      boolean boolean0 = true;
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT3;
      Config config0 = new Config(linkedHashSet0, linkedHashSet0, boolean0, config_LanguageMode0, boolean0);
      assertEquals(true, linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertEquals("[]", linkedHashSet0.toString());
      assertNotNull(config0);
      
      ToolErrorReporter toolErrorReporter0 = new ToolErrorReporter(boolean0);
      assertEquals(false, toolErrorReporter0.hasReportedError());
      assertEquals(true, toolErrorReporter0.isReportingWarnings());
      assertNotNull(toolErrorReporter0);
      
      Node node0 = IRFactory.transformTree(astRoot0, staticSourceFile0, string0, config0, (ErrorReporter) toolErrorReporter0);
      assertEquals(true, linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertEquals("[]", linkedHashSet0.toString());
      assertEquals(false, toolErrorReporter0.hasReportedError());
      assertEquals(true, toolErrorReporter0.isReportingWarnings());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isLabel());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isNew());
      assertEquals(-1, node0.getLength());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(true, node0.mayMutateArguments());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(false, node0.isOnlyModifiesArgumentsCall());
      assertEquals(false, node0.isSetterDef());
      assertEquals(true, node0.hasOneChild());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(0, node0.getChangeTime());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isGetProp());
      assertEquals(132, node0.getType());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isFromExterns());
      assertEquals(true, node0.mayMutateGlobalStateOrThrow());
      assertEquals(true, node0.hasChildren());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isNE());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isCast());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(true, node0.isScript());
      assertEquals(false, node0.isStringKey());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isHook());
      assertEquals(1, node0.getChildCount());
      assertEquals(false, node0.isString());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(0, astRoot0.getRegexpCount());
      assertEquals(-1, astRoot0.getEndLineno());
      assertEquals(-1, astRoot0.getBaseLineno());
      assertNull(astRoot0.getJsDoc());
      assertEquals(-6, astRoot0.getPosition());
      assertEquals(0, astRoot0.getFunctionCount());
      assertEquals("136", astRoot0.toString());
      assertEquals(0, astRoot0.depth());
      assertEquals(-1, astRoot0.getEncodedSourceStart());
      assertEquals(136, astRoot0.getType());
      assertEquals(false, astRoot0.isInStrictMode());
      assertNull(astRoot0.getSourceName());
      assertEquals(0, astRoot0.getParamCount());
      assertEquals(-1, astRoot0.getLineno());
      assertEquals(-1, astRoot0.getLength());
      assertEquals(true, astRoot0.hasChildren());
      assertEquals(-6, astRoot0.getAbsolutePosition());
      assertNull(astRoot0.getEncodedSource());
      assertEquals(-1, astRoot0.getEncodedSourceEnd());
      assertNotNull(node0);
  }

  @Test
  public void test6()  throws Throwable  {
      int int0 = 65506;
      AstRoot astRoot0 = new AstRoot(int0);
      assertEquals(-1, astRoot0.getEncodedSourceEnd());
      assertNull(astRoot0.getSourceName());
      assertEquals(-1, astRoot0.getEncodedSourceStart());
      assertNull(astRoot0.getJsDoc());
      assertEquals(-1, astRoot0.getEndLineno());
      assertEquals(0, astRoot0.getParamCount());
      assertEquals(0, astRoot0.getFunctionCount());
      assertEquals(65506, astRoot0.getAbsolutePosition());
      assertEquals(-1, astRoot0.getBaseLineno());
      assertEquals(false, astRoot0.hasChildren());
      assertNull(astRoot0.getEncodedSource());
      assertEquals(136, astRoot0.getType());
      assertEquals(0, astRoot0.depth());
      assertEquals(0, astRoot0.getRegexpCount());
      assertEquals(false, astRoot0.isInStrictMode());
      assertEquals(65506, astRoot0.getPosition());
      assertEquals(1, astRoot0.getLength());
      assertEquals(-1, astRoot0.getLineno());
      assertEquals("136", astRoot0.toString());
      assertNotNull(astRoot0);
      
      StaticSourceFile staticSourceFile0 = null;
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      assertEquals(0, linkedHashSet0.size());
      assertEquals("[]", linkedHashSet0.toString());
      assertEquals(true, linkedHashSet0.isEmpty());
      assertNotNull(linkedHashSet0);
      
      boolean boolean0 = true;
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5;
      String string0 = "";
      Config config0 = new Config(linkedHashSet0, linkedHashSet0, boolean0, config_LanguageMode0, boolean0);
      assertEquals(0, linkedHashSet0.size());
      assertEquals("[]", linkedHashSet0.toString());
      assertEquals(true, linkedHashSet0.isEmpty());
      assertNotNull(config0);
      
      ErrorCollector errorCollector0 = new ErrorCollector();
      assertNotNull(errorCollector0);
      
      WhileLoop whileLoop0 = new WhileLoop();
      assertEquals(117, whileLoop0.getType());
      assertEquals(-1, whileLoop0.getPosition());
      assertEquals("117", whileLoop0.toString());
      assertEquals(1, whileLoop0.getLength());
      assertEquals(-1, whileLoop0.getLp());
      assertEquals(-1, whileLoop0.getLineno());
      assertEquals(-1, whileLoop0.getAbsolutePosition());
      assertNull(whileLoop0.getJsDoc());
      assertEquals(false, whileLoop0.hasChildren());
      assertEquals(0, whileLoop0.depth());
      assertEquals(-1, whileLoop0.getRp());
      assertNotNull(whileLoop0);
      
      astRoot0.addChild((AstNode) whileLoop0);
      assertEquals(-1, astRoot0.getEncodedSourceEnd());
      assertNull(astRoot0.getSourceName());
      assertEquals(-1, astRoot0.getEncodedSourceStart());
      assertNull(astRoot0.getJsDoc());
      assertEquals(-1, astRoot0.getEndLineno());
      assertEquals(0, astRoot0.getParamCount());
      assertEquals(0, astRoot0.getFunctionCount());
      assertEquals(65506, astRoot0.getAbsolutePosition());
      assertEquals(-1, astRoot0.getBaseLineno());
      assertNull(astRoot0.getEncodedSource());
      assertEquals(136, astRoot0.getType());
      assertEquals(0, astRoot0.depth());
      assertEquals(0, astRoot0.getRegexpCount());
      assertEquals(-65506, astRoot0.getLength());
      assertEquals(false, astRoot0.isInStrictMode());
      assertEquals(65506, astRoot0.getPosition());
      assertEquals(-1, astRoot0.getLineno());
      assertEquals("136", astRoot0.toString());
      assertEquals(true, astRoot0.hasChildren());
      assertEquals(117, whileLoop0.getType());
      assertEquals("117", whileLoop0.toString());
      assertEquals(1, whileLoop0.getLength());
      assertEquals(-1, whileLoop0.getLp());
      assertEquals(-1, whileLoop0.getLineno());
      assertEquals(-1, whileLoop0.getAbsolutePosition());
      assertNull(whileLoop0.getJsDoc());
      assertEquals(false, whileLoop0.hasChildren());
      assertEquals(-1, whileLoop0.getRp());
      assertEquals(-65507, whileLoop0.getPosition());
      assertEquals(1, whileLoop0.depth());
      
      // Undeclared exception!
      try {
        Node node0 = IRFactory.transformTree(astRoot0, staticSourceFile0, string0, config0, (ErrorReporter) errorCollector0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test7()  throws Throwable  {
      int int0 = (-6);
      AstRoot astRoot0 = new AstRoot(int0);
      assertNull(astRoot0.getEncodedSource());
      assertEquals(-1, astRoot0.getEncodedSourceEnd());
      assertNull(astRoot0.getJsDoc());
      assertEquals(-1, astRoot0.getEndLineno());
      assertEquals(-1, astRoot0.getEncodedSourceStart());
      assertNull(astRoot0.getSourceName());
      assertEquals(0, astRoot0.depth());
      assertEquals(-1, astRoot0.getBaseLineno());
      assertEquals(-1, astRoot0.getLineno());
      assertEquals(0, astRoot0.getFunctionCount());
      assertEquals(0, astRoot0.getRegexpCount());
      assertEquals(-6, astRoot0.getAbsolutePosition());
      assertEquals(false, astRoot0.hasChildren());
      assertEquals("136", astRoot0.toString());
      assertEquals(1, astRoot0.getLength());
      assertEquals(0, astRoot0.getParamCount());
      assertEquals(136, astRoot0.getType());
      assertEquals(false, astRoot0.isInStrictMode());
      assertEquals(-6, astRoot0.getPosition());
      assertNotNull(astRoot0);
      
      String string0 = "";
      RegExpLiteral regExpLiteral0 = new RegExpLiteral(int0);
      assertNull(regExpLiteral0.getFlags());
      assertEquals("48", regExpLiteral0.toString());
      assertEquals(false, regExpLiteral0.hasChildren());
      assertEquals(0, regExpLiteral0.depth());
      assertEquals(-1, regExpLiteral0.getLineno());
      assertNull(regExpLiteral0.getJsDoc());
      assertEquals(48, regExpLiteral0.getType());
      assertNull(regExpLiteral0.getValue());
      assertEquals(1, regExpLiteral0.getLength());
      assertEquals(-6, regExpLiteral0.getPosition());
      assertEquals(-6, regExpLiteral0.getAbsolutePosition());
      assertNotNull(regExpLiteral0);
      
      RegExpLiteral regExpLiteral1 = (RegExpLiteral)regExpLiteral0.setType(int0);
      assertSame(regExpLiteral1, regExpLiteral0);
      assertSame(regExpLiteral0, regExpLiteral1);
      assertEquals("-6", regExpLiteral1.toString());
      assertEquals(1, regExpLiteral1.getLength());
      assertEquals(-6, regExpLiteral1.getType());
      assertNull(regExpLiteral1.getJsDoc());
      assertNull(regExpLiteral1.getFlags());
      assertEquals(-1, regExpLiteral1.getLineno());
      assertNull(regExpLiteral1.getValue());
      assertEquals(-6, regExpLiteral1.getAbsolutePosition());
      assertEquals(-6, regExpLiteral1.getPosition());
      assertEquals(false, regExpLiteral1.hasChildren());
      assertEquals(0, regExpLiteral1.depth());
      assertNull(regExpLiteral0.getFlags());
      assertEquals(false, regExpLiteral0.hasChildren());
      assertEquals("-6", regExpLiteral0.toString());
      assertEquals(0, regExpLiteral0.depth());
      assertEquals(-1, regExpLiteral0.getLineno());
      assertNull(regExpLiteral0.getJsDoc());
      assertEquals(-6, regExpLiteral0.getType());
      assertNull(regExpLiteral0.getValue());
      assertEquals(1, regExpLiteral0.getLength());
      assertEquals(-6, regExpLiteral0.getPosition());
      assertEquals(-6, regExpLiteral0.getAbsolutePosition());
      assertNotNull(regExpLiteral1);
      
      astRoot0.addChildToBack((com.google.javascript.rhino.head.Node) regExpLiteral0);
      assertSame(regExpLiteral0, regExpLiteral1);
      assertNull(astRoot0.getEncodedSource());
      assertEquals(-1, astRoot0.getEncodedSourceEnd());
      assertNull(astRoot0.getJsDoc());
      assertEquals(-1, astRoot0.getEndLineno());
      assertEquals(-1, astRoot0.getEncodedSourceStart());
      assertNull(astRoot0.getSourceName());
      assertEquals(0, astRoot0.depth());
      assertEquals(-1, astRoot0.getBaseLineno());
      assertEquals(-1, astRoot0.getLineno());
      assertEquals(0, astRoot0.getFunctionCount());
      assertEquals(0, astRoot0.getRegexpCount());
      assertEquals(-6, astRoot0.getAbsolutePosition());
      assertEquals("136", astRoot0.toString());
      assertEquals(true, astRoot0.hasChildren());
      assertEquals(1, astRoot0.getLength());
      assertEquals(0, astRoot0.getParamCount());
      assertEquals(136, astRoot0.getType());
      assertEquals(false, astRoot0.isInStrictMode());
      assertEquals(-6, astRoot0.getPosition());
      assertNull(regExpLiteral0.getFlags());
      assertEquals(false, regExpLiteral0.hasChildren());
      assertEquals("-6", regExpLiteral0.toString());
      assertEquals(0, regExpLiteral0.depth());
      assertEquals(-1, regExpLiteral0.getLineno());
      assertNull(regExpLiteral0.getJsDoc());
      assertEquals(-6, regExpLiteral0.getType());
      assertNull(regExpLiteral0.getValue());
      assertEquals(1, regExpLiteral0.getLength());
      assertEquals(-6, regExpLiteral0.getPosition());
      assertEquals(-6, regExpLiteral0.getAbsolutePosition());
      
      StaticSourceFile staticSourceFile0 = null;
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      assertEquals(true, linkedHashSet0.isEmpty());
      assertEquals("[]", linkedHashSet0.toString());
      assertEquals(0, linkedHashSet0.size());
      assertNotNull(linkedHashSet0);
      
      boolean boolean0 = true;
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT3;
      Config config0 = new Config(linkedHashSet0, linkedHashSet0, boolean0, config_LanguageMode0, boolean0);
      assertEquals(true, linkedHashSet0.isEmpty());
      assertEquals("[]", linkedHashSet0.toString());
      assertEquals(0, linkedHashSet0.size());
      assertNotNull(config0);
      
      ToolErrorReporter toolErrorReporter0 = new ToolErrorReporter(boolean0);
      assertEquals(false, toolErrorReporter0.hasReportedError());
      assertEquals(true, toolErrorReporter0.isReportingWarnings());
      assertNotNull(toolErrorReporter0);
      
      // Undeclared exception!
      try {
        Node node0 = IRFactory.transformTree(astRoot0, staticSourceFile0, string0, config0, (ErrorReporter) toolErrorReporter0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // -6
         //
      }
  }

  @Test
  public void test8()  throws Throwable  {
      int int0 = 65506;
      AstRoot astRoot0 = new AstRoot(int0);
      assertEquals(false, astRoot0.hasChildren());
      assertEquals(-1, astRoot0.getLineno());
      assertNull(astRoot0.getEncodedSource());
      assertEquals(1, astRoot0.getLength());
      assertEquals(-1, astRoot0.getEndLineno());
      assertNull(astRoot0.getJsDoc());
      assertEquals(0, astRoot0.getRegexpCount());
      assertEquals(0, astRoot0.depth());
      assertNull(astRoot0.getSourceName());
      assertEquals(false, astRoot0.isInStrictMode());
      assertEquals("136", astRoot0.toString());
      assertEquals(-1, astRoot0.getBaseLineno());
      assertEquals(-1, astRoot0.getEncodedSourceStart());
      assertEquals(136, astRoot0.getType());
      assertEquals(0, astRoot0.getParamCount());
      assertEquals(65506, astRoot0.getPosition());
      assertEquals(-1, astRoot0.getEncodedSourceEnd());
      assertEquals(65506, astRoot0.getAbsolutePosition());
      assertEquals(0, astRoot0.getFunctionCount());
      assertNotNull(astRoot0);
      
      StaticSourceFile staticSourceFile0 = null;
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      assertEquals(true, linkedHashSet0.isEmpty());
      assertEquals("[]", linkedHashSet0.toString());
      assertEquals(0, linkedHashSet0.size());
      assertNotNull(linkedHashSet0);
      
      NumberLiteral numberLiteral0 = (NumberLiteral)com.google.javascript.rhino.head.Node.newNumber((double) int0);
      assertEquals(-1, numberLiteral0.getPosition());
      assertEquals(40, numberLiteral0.getType());
      assertEquals(65506.0, numberLiteral0.getDouble(), 0.01D);
      assertEquals(false, numberLiteral0.hasChildren());
      assertEquals(0, numberLiteral0.depth());
      assertEquals("40", numberLiteral0.toString());
      assertEquals(65506.0, numberLiteral0.getNumber(), 0.01D);
      assertNull(numberLiteral0.getValue());
      assertNull(numberLiteral0.getJsDoc());
      assertEquals(1, numberLiteral0.getLength());
      assertEquals(-1, numberLiteral0.getAbsolutePosition());
      assertEquals(-1, numberLiteral0.getLineno());
      assertNotNull(numberLiteral0);
      
      astRoot0.addChildrenToBack((com.google.javascript.rhino.head.Node) numberLiteral0);
      assertEquals(-1, numberLiteral0.getPosition());
      assertEquals(40, numberLiteral0.getType());
      assertEquals(65506.0, numberLiteral0.getDouble(), 0.01D);
      assertEquals(false, numberLiteral0.hasChildren());
      assertEquals(0, numberLiteral0.depth());
      assertEquals("40", numberLiteral0.toString());
      assertEquals(65506.0, numberLiteral0.getNumber(), 0.01D);
      assertNull(numberLiteral0.getValue());
      assertNull(numberLiteral0.getJsDoc());
      assertEquals(1, numberLiteral0.getLength());
      assertEquals(-1, numberLiteral0.getAbsolutePosition());
      assertEquals(-1, numberLiteral0.getLineno());
      assertEquals(-1, astRoot0.getLineno());
      assertNull(astRoot0.getEncodedSource());
      assertEquals(1, astRoot0.getLength());
      assertEquals(-1, astRoot0.getEndLineno());
      assertNull(astRoot0.getJsDoc());
      assertEquals(0, astRoot0.getRegexpCount());
      assertEquals(0, astRoot0.depth());
      assertNull(astRoot0.getSourceName());
      assertEquals(false, astRoot0.isInStrictMode());
      assertEquals("136", astRoot0.toString());
      assertEquals(-1, astRoot0.getBaseLineno());
      assertEquals(-1, astRoot0.getEncodedSourceStart());
      assertEquals(136, astRoot0.getType());
      assertEquals(0, astRoot0.getParamCount());
      assertEquals(65506, astRoot0.getPosition());
      assertEquals(-1, astRoot0.getEncodedSourceEnd());
      assertEquals(true, astRoot0.hasChildren());
      assertEquals(65506, astRoot0.getAbsolutePosition());
      assertEquals(0, astRoot0.getFunctionCount());
      
      boolean boolean0 = true;
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5;
      String string0 = "";
      Config config0 = new Config(linkedHashSet0, linkedHashSet0, boolean0, config_LanguageMode0, boolean0);
      assertEquals(true, linkedHashSet0.isEmpty());
      assertEquals("[]", linkedHashSet0.toString());
      assertEquals(0, linkedHashSet0.size());
      assertNotNull(config0);
      
      ErrorCollector errorCollector0 = new ErrorCollector();
      assertNotNull(errorCollector0);
      
      Node node0 = IRFactory.transformTree(astRoot0, staticSourceFile0, string0, config0, (ErrorReporter) errorCollector0);
      assertEquals(true, linkedHashSet0.isEmpty());
      assertEquals("[]", linkedHashSet0.toString());
      assertEquals(0, linkedHashSet0.size());
      assertEquals(-1, astRoot0.getLineno());
      assertNull(astRoot0.getEncodedSource());
      assertEquals(1, astRoot0.getLength());
      assertEquals(-1, astRoot0.getEndLineno());
      assertNull(astRoot0.getJsDoc());
      assertEquals(0, astRoot0.getRegexpCount());
      assertEquals(0, astRoot0.depth());
      assertNull(astRoot0.getSourceName());
      assertEquals(false, astRoot0.isInStrictMode());
      assertEquals("136", astRoot0.toString());
      assertEquals(-1, astRoot0.getBaseLineno());
      assertEquals(-1, astRoot0.getEncodedSourceStart());
      assertEquals(136, astRoot0.getType());
      assertEquals(0, astRoot0.getParamCount());
      assertEquals(65506, astRoot0.getPosition());
      assertEquals(-1, astRoot0.getEncodedSourceEnd());
      assertEquals(true, astRoot0.hasChildren());
      assertEquals(65506, astRoot0.getAbsolutePosition());
      assertEquals(0, astRoot0.getFunctionCount());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(true, node0.hasChildren());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isGetterDef());
      assertNull(node0.getSourceFileName());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(-1, node0.getCharno());
      assertEquals(1, node0.getLength());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isIn());
      assertEquals(0, node0.getChangeTime());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isStringKey());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isExprResult());
      assertEquals(true, node0.mayMutateGlobalStateOrThrow());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isString());
      assertEquals(true, node0.isScript());
      assertEquals(false, node0.isNE());
      assertEquals(1, node0.getChildCount());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isBreak());
      assertEquals(true, node0.hasOneChild());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isOnlyModifiesArgumentsCall());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isSetterDef());
      assertEquals(true, node0.mayMutateArguments());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isWhile());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isCast());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isLabelName());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isNull());
      assertEquals(132, node0.getType());
      assertEquals(false, node0.isWith());
      assertNotNull(node0);
  }
}
