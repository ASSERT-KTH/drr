/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 22:18:33 GMT 2014
 */

package com.google.javascript.jscomp.parsing;

import static org.junit.Assert.*; import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.junit.Test;
import com.google.javascript.jscomp.mozilla.rhino.Context;
import com.google.javascript.jscomp.mozilla.rhino.ErrorReporter;
import com.google.javascript.jscomp.mozilla.rhino.EvaluatorException;
import com.google.javascript.jscomp.mozilla.rhino.Node;
import com.google.javascript.jscomp.mozilla.rhino.ast.AstNode;
import com.google.javascript.jscomp.mozilla.rhino.ast.AstRoot;
import com.google.javascript.jscomp.mozilla.rhino.ast.BreakStatement;
import com.google.javascript.jscomp.mozilla.rhino.ast.FunctionNode;
import com.google.javascript.jscomp.mozilla.rhino.ast.ObjectProperty;
import com.google.javascript.jscomp.mozilla.rhino.ast.ReturnStatement;
import com.google.javascript.jscomp.mozilla.rhino.ast.SwitchCase;
import com.google.javascript.jscomp.mozilla.rhino.tools.ToolErrorReporter;
import com.google.javascript.jscomp.parsing.Config;
import com.google.javascript.jscomp.parsing.IRFactory;
import java.util.Locale;
import java.util.Set;
import java.util.TreeSet;



import org.junit.runner.RunWith;


public class IRFactoryEvoSuite_branch_Test  {

  @Test
  public void test0() {}
//   @Test
//   public void test0()  throws Throwable  {
//       AstRoot astRoot0 = new AstRoot();
//       assertEquals(false, astRoot0.hasChildren());
//       assertEquals(-1, astRoot0.getEncodedSourceEnd());
//       assertEquals(0, astRoot0.getRegexpCount());
//       assertEquals(-1, astRoot0.getBaseLineno());
//       assertNull(astRoot0.getJsDoc());
//       assertEquals(136, astRoot0.getType());
//       assertEquals(0, astRoot0.getFunctionCount());
//       assertNull(astRoot0.getSourceName());
//       assertEquals("136", astRoot0.toString());
//       assertNull(astRoot0.getEncodedSource());
//       assertEquals(-1, astRoot0.getLineno());
//       assertEquals(1, astRoot0.getLength());
//       assertEquals(-1, astRoot0.getPosition());
//       assertEquals(0, astRoot0.depth());
//       assertEquals(false, astRoot0.isInStrictMode());
//       assertEquals(-1, astRoot0.getEncodedSourceStart());
//       assertEquals(0, astRoot0.getParamCount());
//       assertEquals(-1, astRoot0.getAbsolutePosition());
//       assertEquals(-1, astRoot0.getEndLineno());
//       assertNotNull(astRoot0);
//       
//       int int0 = 3;
//       SwitchCase switchCase0 = new SwitchCase(int0, int0);
//       assertEquals(3, switchCase0.getAbsolutePosition());
//       assertEquals(3, switchCase0.getLength());
//       assertEquals(3, switchCase0.getPosition());
//       assertEquals(true, switchCase0.isDefault());
//       assertEquals(0, switchCase0.depth());
//       assertNull(switchCase0.getJsDoc());
//       assertEquals(115, switchCase0.getType());
//       assertEquals(-1, switchCase0.getLineno());
//       assertEquals("115", switchCase0.toString());
//       assertEquals(false, switchCase0.hasChildren());
//       assertNotNull(switchCase0);
//       
//       Node node0 = null;
//       switchCase0.addStatement((AstNode) astRoot0);
//       assertEquals(false, astRoot0.hasChildren());
//       assertEquals(-1, astRoot0.getEncodedSourceEnd());
//       assertEquals(0, astRoot0.getRegexpCount());
//       assertEquals(-1, astRoot0.getBaseLineno());
//       assertNull(astRoot0.getJsDoc());
//       assertEquals(136, astRoot0.getType());
//       assertEquals(0, astRoot0.getFunctionCount());
//       assertNull(astRoot0.getSourceName());
//       assertEquals("136", astRoot0.toString());
//       assertNull(astRoot0.getEncodedSource());
//       assertEquals(-4, astRoot0.getPosition());
//       assertEquals(-1, astRoot0.getLineno());
//       assertEquals(1, astRoot0.getLength());
//       assertEquals(false, astRoot0.isInStrictMode());
//       assertEquals(-1, astRoot0.getEncodedSourceStart());
//       assertEquals(1, astRoot0.depth());
//       assertEquals(0, astRoot0.getParamCount());
//       assertEquals(-1, astRoot0.getAbsolutePosition());
//       assertEquals(-1, astRoot0.getEndLineno());
//       assertEquals(3, switchCase0.getAbsolutePosition());
//       assertEquals(3, switchCase0.getPosition());
//       assertEquals(true, switchCase0.isDefault());
//       assertEquals(0, switchCase0.depth());
//       assertNull(switchCase0.getJsDoc());
//       assertEquals(115, switchCase0.getType());
//       assertEquals(-1, switchCase0.getLineno());
//       assertEquals("115", switchCase0.toString());
//       assertEquals(-3, switchCase0.getLength());
//       assertEquals(false, switchCase0.hasChildren());
//       
//       astRoot0.addChildBefore((Node) switchCase0, node0);
//       assertEquals(-1, astRoot0.getEncodedSourceEnd());
//       assertEquals(0, astRoot0.getRegexpCount());
//       assertEquals(-1, astRoot0.getBaseLineno());
//       assertNull(astRoot0.getJsDoc());
//       assertEquals(136, astRoot0.getType());
//       assertEquals(0, astRoot0.getFunctionCount());
//       assertNull(astRoot0.getSourceName());
//       assertEquals("136", astRoot0.toString());
//       assertNull(astRoot0.getEncodedSource());
//       assertEquals(-4, astRoot0.getPosition());
//       assertEquals(true, astRoot0.hasChildren());
//       assertEquals(-1, astRoot0.getLineno());
//       assertEquals(1, astRoot0.getLength());
//       assertEquals(false, astRoot0.isInStrictMode());
//       assertEquals(-1, astRoot0.getEncodedSourceStart());
//       assertEquals(1, astRoot0.depth());
//       assertEquals(0, astRoot0.getParamCount());
//       assertEquals(-1, astRoot0.getAbsolutePosition());
//       assertEquals(-1, astRoot0.getEndLineno());
//       assertEquals(3, switchCase0.getAbsolutePosition());
//       assertEquals(3, switchCase0.getPosition());
//       assertEquals(true, switchCase0.isDefault());
//       assertEquals(0, switchCase0.depth());
//       assertNull(switchCase0.getJsDoc());
//       assertEquals(115, switchCase0.getType());
//       assertEquals(-1, switchCase0.getLineno());
//       assertEquals("115", switchCase0.toString());
//       assertEquals(-3, switchCase0.getLength());
//       assertEquals(false, switchCase0.hasChildren());
//       
//       String string0 = "n";
//       Context context0 = new Context();
//       assertFalse(context0.generateObserverCount);
//       assertEquals(false, context0.isGeneratingDebugChanged());
//       assertEquals(false, context0.hasCompileFunctionsWithDynamicScope());
//       assertEquals(0, context0.getInstructionObserverThreshold());
//       assertEquals(0, context0.getLanguageVersion());
//       assertEquals(true, context0.isGeneratingSource());
//       assertEquals(2147483647, context0.getMaximumInterpreterStackDepth());
//       assertEquals(false, context0.isSealed());
//       assertEquals(false, context0.isGeneratingDebug());
//       assertEquals(0, context0.getOptimizationLevel());
//       assertNotNull(context0);
//       
//       Locale locale0 = context0.getLocale();
//       assertFalse(context0.generateObserverCount);
//       assertEquals(false, context0.isGeneratingDebugChanged());
//       assertEquals(false, context0.hasCompileFunctionsWithDynamicScope());
//       assertEquals(0, context0.getInstructionObserverThreshold());
//       assertEquals(0, context0.getLanguageVersion());
//       assertEquals(true, context0.isGeneratingSource());
//       assertEquals(2147483647, context0.getMaximumInterpreterStackDepth());
//       assertEquals(false, context0.isSealed());
//       assertEquals(false, context0.isGeneratingDebug());
//       assertEquals(0, context0.getOptimizationLevel());
//       assertEquals("zh_TW", locale0.toString());
//       assertEquals("TWN", locale0.getISO3Country());
//       assertEquals("", locale0.getVariant());
//       assertEquals("TW", locale0.getCountry());
//       assertEquals("zh", locale0.getLanguage());
//       assertEquals("zho", locale0.getISO3Language());
//       assertNotNull(locale0);
//       
//       Set<String> set0 = locale0.getUnicodeLocaleAttributes();
//       assertFalse(context0.generateObserverCount);
//       assertEquals(0, set0.size());
//       assertEquals(true, set0.isEmpty());
//       assertEquals(false, context0.isGeneratingDebugChanged());
//       assertEquals(false, context0.hasCompileFunctionsWithDynamicScope());
//       assertEquals(0, context0.getInstructionObserverThreshold());
//       assertEquals(0, context0.getLanguageVersion());
//       assertEquals(true, context0.isGeneratingSource());
//       assertEquals(2147483647, context0.getMaximumInterpreterStackDepth());
//       assertEquals(false, context0.isSealed());
//       assertEquals(false, context0.isGeneratingDebug());
//       assertEquals(0, context0.getOptimizationLevel());
//       assertEquals("zh_TW", locale0.toString());
//       assertEquals("TWN", locale0.getISO3Country());
//       assertEquals("", locale0.getVariant());
//       assertEquals("TW", locale0.getCountry());
//       assertEquals("zh", locale0.getLanguage());
//       assertEquals("zho", locale0.getISO3Language());
//       assertNotNull(set0);
//       
//       Config config0 = new Config(set0, set0, context0.generateObserverCount, context0.generateObserverCount, context0.generateObserverCount);
//       assertFalse(context0.generateObserverCount);
//       assertEquals(0, set0.size());
//       assertEquals(true, set0.isEmpty());
//       assertEquals(false, context0.isGeneratingDebugChanged());
//       assertEquals(false, context0.hasCompileFunctionsWithDynamicScope());
//       assertEquals(0, context0.getInstructionObserverThreshold());
//       assertEquals(0, context0.getLanguageVersion());
//       assertEquals(true, context0.isGeneratingSource());
//       assertEquals(2147483647, context0.getMaximumInterpreterStackDepth());
//       assertEquals(false, context0.isSealed());
//       assertEquals(false, context0.isGeneratingDebug());
//       assertEquals(0, context0.getOptimizationLevel());
//       assertEquals("zh_TW", locale0.toString());
//       assertEquals("TWN", locale0.getISO3Country());
//       assertEquals("", locale0.getVariant());
//       assertEquals("TW", locale0.getCountry());
//       assertEquals("zh", locale0.getLanguage());
//       assertEquals("zho", locale0.getISO3Language());
//       assertNotNull(config0);
//       
//       ErrorReporter errorReporter0 = context0.getErrorReporter();
//       assertFalse(context0.generateObserverCount);
//       assertEquals(false, context0.isGeneratingDebugChanged());
//       assertEquals(false, context0.hasCompileFunctionsWithDynamicScope());
//       assertEquals(0, context0.getInstructionObserverThreshold());
//       assertEquals(0, context0.getLanguageVersion());
//       assertEquals(true, context0.isGeneratingSource());
//       assertEquals(2147483647, context0.getMaximumInterpreterStackDepth());
//       assertEquals(false, context0.isSealed());
//       assertEquals(false, context0.isGeneratingDebug());
//       assertEquals(0, context0.getOptimizationLevel());
//       assertNotNull(errorReporter0);
//       
//       // Undeclared exception!
//       try {
//         com.google.javascript.rhino.Node node1 = IRFactory.transformTree(astRoot0, string0, config0, errorReporter0);
//         fail("Expecting exception: StackOverflowError");
//       
//       } catch(StackOverflowError e) {
//          //
//          // no message in exception (getMessage() returned null)
//          //
//       }
//   }

  @Test
  public void test1() {}
//   @Test
//   public void test1()  throws Throwable  {
//       AstRoot astRoot0 = new AstRoot();
//       assertEquals(0, astRoot0.getParamCount());
//       assertEquals(0, astRoot0.getFunctionCount());
//       assertEquals(0, astRoot0.getRegexpCount());
//       assertEquals(0, astRoot0.depth());
//       assertEquals(1, astRoot0.getLength());
//       assertEquals(136, astRoot0.getType());
//       assertNull(astRoot0.getJsDoc());
//       assertEquals(-1, astRoot0.getEncodedSourceEnd());
//       assertNull(astRoot0.getEncodedSource());
//       assertEquals(-1, astRoot0.getAbsolutePosition());
//       assertEquals("136", astRoot0.toString());
//       assertEquals(-1, astRoot0.getBaseLineno());
//       assertEquals(false, astRoot0.isInStrictMode());
//       assertEquals(-1, astRoot0.getLineno());
//       assertEquals(-1, astRoot0.getEndLineno());
//       assertEquals(-1, astRoot0.getPosition());
//       assertEquals(false, astRoot0.hasChildren());
//       assertEquals(-1, astRoot0.getEncodedSourceStart());
//       assertNull(astRoot0.getSourceName());
//       assertNotNull(astRoot0);
//       
//       int int0 = 3;
//       SwitchCase switchCase0 = new SwitchCase(int0, int0);
//       assertEquals(3, switchCase0.getAbsolutePosition());
//       assertEquals("115", switchCase0.toString());
//       assertEquals(false, switchCase0.hasChildren());
//       assertEquals(true, switchCase0.isDefault());
//       assertNull(switchCase0.getJsDoc());
//       assertEquals(3, switchCase0.getPosition());
//       assertEquals(0, switchCase0.depth());
//       assertEquals(-1, switchCase0.getLineno());
//       assertEquals(115, switchCase0.getType());
//       assertEquals(3, switchCase0.getLength());
//       assertNotNull(switchCase0);
//       
//       Node node0 = null;
//       astRoot0.addChildBefore((Node) switchCase0, node0);
//       assertEquals(0, astRoot0.getParamCount());
//       assertEquals(0, astRoot0.getFunctionCount());
//       assertEquals(0, astRoot0.getRegexpCount());
//       assertEquals(0, astRoot0.depth());
//       assertEquals(1, astRoot0.getLength());
//       assertEquals(136, astRoot0.getType());
//       assertNull(astRoot0.getJsDoc());
//       assertEquals(-1, astRoot0.getEncodedSourceEnd());
//       assertNull(astRoot0.getEncodedSource());
//       assertEquals(-1, astRoot0.getAbsolutePosition());
//       assertEquals("136", astRoot0.toString());
//       assertEquals(-1, astRoot0.getBaseLineno());
//       assertEquals(false, astRoot0.isInStrictMode());
//       assertEquals(-1, astRoot0.getLineno());
//       assertEquals(-1, astRoot0.getEndLineno());
//       assertEquals(-1, astRoot0.getPosition());
//       assertEquals(-1, astRoot0.getEncodedSourceStart());
//       assertNull(astRoot0.getSourceName());
//       assertEquals(true, astRoot0.hasChildren());
//       assertEquals(3, switchCase0.getAbsolutePosition());
//       assertEquals("115", switchCase0.toString());
//       assertEquals(false, switchCase0.hasChildren());
//       assertEquals(true, switchCase0.isDefault());
//       assertNull(switchCase0.getJsDoc());
//       assertEquals(3, switchCase0.getPosition());
//       assertEquals(0, switchCase0.depth());
//       assertEquals(-1, switchCase0.getLineno());
//       assertEquals(115, switchCase0.getType());
//       assertEquals(3, switchCase0.getLength());
//       
//       String string0 = "n";
//       Context context0 = new Context();
//       assertFalse(context0.generateObserverCount);
//       assertEquals(true, context0.isGeneratingSource());
//       assertEquals(false, context0.isGeneratingDebug());
//       assertEquals(2147483647, context0.getMaximumInterpreterStackDepth());
//       assertEquals(0, context0.getInstructionObserverThreshold());
//       assertEquals(false, context0.isGeneratingDebugChanged());
//       assertEquals(false, context0.isSealed());
//       assertEquals(0, context0.getOptimizationLevel());
//       assertEquals(false, context0.hasCompileFunctionsWithDynamicScope());
//       assertEquals(0, context0.getLanguageVersion());
//       assertNotNull(context0);
//       
//       Locale locale0 = context0.getLocale();
//       assertFalse(context0.generateObserverCount);
//       assertEquals(true, context0.isGeneratingSource());
//       assertEquals(false, context0.isGeneratingDebug());
//       assertEquals(2147483647, context0.getMaximumInterpreterStackDepth());
//       assertEquals(0, context0.getInstructionObserverThreshold());
//       assertEquals(false, context0.isGeneratingDebugChanged());
//       assertEquals(false, context0.isSealed());
//       assertEquals(0, context0.getOptimizationLevel());
//       assertEquals(false, context0.hasCompileFunctionsWithDynamicScope());
//       assertEquals(0, context0.getLanguageVersion());
//       assertEquals("zh_TW", locale0.toString());
//       assertEquals("TWN", locale0.getISO3Country());
//       assertEquals("zho", locale0.getISO3Language());
//       assertEquals("zh", locale0.getLanguage());
//       assertEquals("", locale0.getVariant());
//       assertEquals("TW", locale0.getCountry());
//       assertNotNull(locale0);
//       
//       Set<String> set0 = locale0.getUnicodeLocaleAttributes();
//       assertFalse(context0.generateObserverCount);
//       assertEquals(true, context0.isGeneratingSource());
//       assertEquals(false, context0.isGeneratingDebug());
//       assertEquals(2147483647, context0.getMaximumInterpreterStackDepth());
//       assertEquals(0, context0.getInstructionObserverThreshold());
//       assertEquals(false, context0.isGeneratingDebugChanged());
//       assertEquals(false, context0.isSealed());
//       assertEquals(0, context0.getOptimizationLevel());
//       assertEquals(false, context0.hasCompileFunctionsWithDynamicScope());
//       assertEquals(0, context0.getLanguageVersion());
//       assertEquals("zh_TW", locale0.toString());
//       assertEquals("TWN", locale0.getISO3Country());
//       assertEquals("zho", locale0.getISO3Language());
//       assertEquals("zh", locale0.getLanguage());
//       assertEquals("", locale0.getVariant());
//       assertEquals("TW", locale0.getCountry());
//       assertEquals(true, set0.isEmpty());
//       assertEquals(0, set0.size());
//       assertNotNull(set0);
//       
//       Config config0 = new Config(set0, set0, context0.generateObserverCount, context0.generateObserverCount, context0.generateObserverCount);
//       assertFalse(context0.generateObserverCount);
//       assertEquals(true, context0.isGeneratingSource());
//       assertEquals(false, context0.isGeneratingDebug());
//       assertEquals(2147483647, context0.getMaximumInterpreterStackDepth());
//       assertEquals(0, context0.getInstructionObserverThreshold());
//       assertEquals(false, context0.isGeneratingDebugChanged());
//       assertEquals(false, context0.isSealed());
//       assertEquals(0, context0.getOptimizationLevel());
//       assertEquals(false, context0.hasCompileFunctionsWithDynamicScope());
//       assertEquals(0, context0.getLanguageVersion());
//       assertEquals("zh_TW", locale0.toString());
//       assertEquals("TWN", locale0.getISO3Country());
//       assertEquals("zho", locale0.getISO3Language());
//       assertEquals("zh", locale0.getLanguage());
//       assertEquals("", locale0.getVariant());
//       assertEquals("TW", locale0.getCountry());
//       assertEquals(true, set0.isEmpty());
//       assertEquals(0, set0.size());
//       assertNotNull(config0);
//       
//       ErrorReporter errorReporter0 = context0.getErrorReporter();
//       assertFalse(context0.generateObserverCount);
//       assertEquals(true, context0.isGeneratingSource());
//       assertEquals(false, context0.isGeneratingDebug());
//       assertEquals(2147483647, context0.getMaximumInterpreterStackDepth());
//       assertEquals(0, context0.getInstructionObserverThreshold());
//       assertEquals(false, context0.isGeneratingDebugChanged());
//       assertEquals(false, context0.isSealed());
//       assertEquals(0, context0.getOptimizationLevel());
//       assertEquals(false, context0.hasCompileFunctionsWithDynamicScope());
//       assertEquals(0, context0.getLanguageVersion());
//       assertNotNull(errorReporter0);
//       
//       com.google.javascript.rhino.Node node1 = IRFactory.transformTree(astRoot0, string0, config0, errorReporter0);
//       assertFalse(context0.generateObserverCount);
//       assertEquals(0, astRoot0.getParamCount());
//       assertEquals(0, astRoot0.getFunctionCount());
//       assertEquals(0, astRoot0.getRegexpCount());
//       assertEquals(0, astRoot0.depth());
//       assertEquals(1, astRoot0.getLength());
//       assertEquals(136, astRoot0.getType());
//       assertNull(astRoot0.getJsDoc());
//       assertEquals(-1, astRoot0.getEncodedSourceEnd());
//       assertNull(astRoot0.getEncodedSource());
//       assertEquals(-1, astRoot0.getAbsolutePosition());
//       assertEquals("136", astRoot0.toString());
//       assertEquals(-1, astRoot0.getBaseLineno());
//       assertEquals(false, astRoot0.isInStrictMode());
//       assertEquals(-1, astRoot0.getLineno());
//       assertEquals(-1, astRoot0.getEndLineno());
//       assertEquals(-1, astRoot0.getPosition());
//       assertEquals(-1, astRoot0.getEncodedSourceStart());
//       assertNull(astRoot0.getSourceName());
//       assertEquals(true, astRoot0.hasChildren());
//       assertEquals(true, context0.isGeneratingSource());
//       assertEquals(false, context0.isGeneratingDebug());
//       assertEquals(2147483647, context0.getMaximumInterpreterStackDepth());
//       assertEquals(0, context0.getInstructionObserverThreshold());
//       assertEquals(false, context0.isGeneratingDebugChanged());
//       assertEquals(false, context0.isSealed());
//       assertEquals(0, context0.getOptimizationLevel());
//       assertEquals(false, context0.hasCompileFunctionsWithDynamicScope());
//       assertEquals(0, context0.getLanguageVersion());
//       assertEquals(false, node1.isUnscopedQualifiedName());
//       assertEquals(-1, node1.getCharno());
//       assertEquals(-1, node1.getLineno());
//       assertEquals(132, node1.getType());
//       assertEquals(false, node1.wasEmptyNode());
//       assertEquals(true, node1.hasOneChild());
//       assertEquals(false, node1.isOnlyModifiesThisCall());
//       assertEquals(false, node1.isOptionalArg());
//       assertEquals(false, node1.isSyntheticBlock());
//       assertEquals(false, node1.isVarArgs());
//       assertEquals(0, node1.getSideEffectFlags());
//       assertEquals(false, node1.hasMoreThanOneChild());
//       assertEquals(true, node1.hasChildren());
//       assertEquals(false, node1.isQualifiedName());
//       assertEquals(false, node1.isQuotedString());
//       assertEquals(1, node1.getChildCount());
//       assertEquals(false, node1.isLocalResultCall());
//       assertEquals(false, node1.isNoSideEffectsCall());
//       assertEquals("zh_TW", locale0.toString());
//       assertEquals("TWN", locale0.getISO3Country());
//       assertEquals("zho", locale0.getISO3Language());
//       assertEquals("zh", locale0.getLanguage());
//       assertEquals("", locale0.getVariant());
//       assertEquals("TW", locale0.getCountry());
//       assertEquals(true, set0.isEmpty());
//       assertEquals(0, set0.size());
//       assertNotNull(node1);
//   }

  @Test
  public void test2() {}
//   @Test
//   public void test2()  throws Throwable  {
//       AstRoot astRoot0 = new AstRoot();
//       assertEquals(-1, astRoot0.getLineno());
//       assertNull(astRoot0.getEncodedSource());
//       assertEquals(0, astRoot0.getFunctionCount());
//       assertEquals(1, astRoot0.getLength());
//       assertEquals(false, astRoot0.hasChildren());
//       assertEquals(false, astRoot0.isInStrictMode());
//       assertEquals(0, astRoot0.getParamCount());
//       assertEquals(-1, astRoot0.getEncodedSourceStart());
//       assertEquals(-1, astRoot0.getBaseLineno());
//       assertEquals(-1, astRoot0.getEncodedSourceEnd());
//       assertEquals(-1, astRoot0.getAbsolutePosition());
//       assertEquals(136, astRoot0.getType());
//       assertNull(astRoot0.getJsDoc());
//       assertEquals(-1, astRoot0.getPosition());
//       assertEquals(0, astRoot0.getRegexpCount());
//       assertEquals(-1, astRoot0.getEndLineno());
//       assertEquals(0, astRoot0.depth());
//       assertNull(astRoot0.getSourceName());
//       assertEquals("136", astRoot0.toString());
//       assertNotNull(astRoot0);
//       
//       int int0 = 1068;
//       ReturnStatement returnStatement0 = new ReturnStatement(int0, int0);
//       assertEquals(1068, returnStatement0.getAbsolutePosition());
//       assertEquals(0, returnStatement0.depth());
//       assertEquals(false, returnStatement0.hasChildren());
//       assertNull(returnStatement0.getJsDoc());
//       assertEquals(1068, returnStatement0.getPosition());
//       assertEquals("4", returnStatement0.toString());
//       assertEquals(-1, returnStatement0.getLineno());
//       assertEquals(4, returnStatement0.getType());
//       assertEquals(1068, returnStatement0.getLength());
//       assertNotNull(returnStatement0);
//       
//       astRoot0.addChildrenToBack((Node) returnStatement0);
//       assertEquals(-1, astRoot0.getLineno());
//       assertNull(astRoot0.getEncodedSource());
//       assertEquals(0, astRoot0.getFunctionCount());
//       assertEquals(1, astRoot0.getLength());
//       assertEquals(false, astRoot0.isInStrictMode());
//       assertEquals(0, astRoot0.getParamCount());
//       assertEquals(-1, astRoot0.getEncodedSourceStart());
//       assertEquals(true, astRoot0.hasChildren());
//       assertEquals(-1, astRoot0.getBaseLineno());
//       assertEquals(-1, astRoot0.getEncodedSourceEnd());
//       assertEquals(-1, astRoot0.getAbsolutePosition());
//       assertEquals(136, astRoot0.getType());
//       assertNull(astRoot0.getJsDoc());
//       assertEquals(-1, astRoot0.getPosition());
//       assertEquals(0, astRoot0.getRegexpCount());
//       assertEquals(-1, astRoot0.getEndLineno());
//       assertEquals(0, astRoot0.depth());
//       assertNull(astRoot0.getSourceName());
//       assertEquals("136", astRoot0.toString());
//       assertEquals(1068, returnStatement0.getAbsolutePosition());
//       assertEquals(0, returnStatement0.depth());
//       assertEquals(false, returnStatement0.hasChildren());
//       assertNull(returnStatement0.getJsDoc());
//       assertEquals(1068, returnStatement0.getPosition());
//       assertEquals("4", returnStatement0.toString());
//       assertEquals(-1, returnStatement0.getLineno());
//       assertEquals(4, returnStatement0.getType());
//       assertEquals(1068, returnStatement0.getLength());
//       
//       String string0 = "~[/IyaH`";
//       Context context0 = new Context();
//       assertFalse(context0.generateObserverCount);
//       assertEquals(0, context0.getLanguageVersion());
//       assertEquals(false, context0.hasCompileFunctionsWithDynamicScope());
//       assertEquals(true, context0.isGeneratingSource());
//       assertEquals(false, context0.isGeneratingDebug());
//       assertEquals(2147483647, context0.getMaximumInterpreterStackDepth());
//       assertEquals(0, context0.getInstructionObserverThreshold());
//       assertEquals(false, context0.isSealed());
//       assertEquals(false, context0.isGeneratingDebugChanged());
//       assertEquals(0, context0.getOptimizationLevel());
//       assertNotNull(context0);
//       
//       Locale locale0 = context0.getLocale();
//       assertFalse(context0.generateObserverCount);
//       assertEquals("TWN", locale0.getISO3Country());
//       assertEquals("zh_TW", locale0.toString());
//       assertEquals("zh", locale0.getLanguage());
//       assertEquals("zho", locale0.getISO3Language());
//       assertEquals("", locale0.getVariant());
//       assertEquals("TW", locale0.getCountry());
//       assertEquals(0, context0.getLanguageVersion());
//       assertEquals(false, context0.hasCompileFunctionsWithDynamicScope());
//       assertEquals(true, context0.isGeneratingSource());
//       assertEquals(false, context0.isGeneratingDebug());
//       assertEquals(2147483647, context0.getMaximumInterpreterStackDepth());
//       assertEquals(0, context0.getInstructionObserverThreshold());
//       assertEquals(false, context0.isSealed());
//       assertEquals(false, context0.isGeneratingDebugChanged());
//       assertEquals(0, context0.getOptimizationLevel());
//       assertNotNull(locale0);
//       
//       Set<String> set0 = locale0.getUnicodeLocaleAttributes();
//       assertFalse(context0.generateObserverCount);
//       assertEquals(0, set0.size());
//       assertEquals(true, set0.isEmpty());
//       assertEquals("TWN", locale0.getISO3Country());
//       assertEquals("zh_TW", locale0.toString());
//       assertEquals("zh", locale0.getLanguage());
//       assertEquals("zho", locale0.getISO3Language());
//       assertEquals("", locale0.getVariant());
//       assertEquals("TW", locale0.getCountry());
//       assertEquals(0, context0.getLanguageVersion());
//       assertEquals(false, context0.hasCompileFunctionsWithDynamicScope());
//       assertEquals(true, context0.isGeneratingSource());
//       assertEquals(false, context0.isGeneratingDebug());
//       assertEquals(2147483647, context0.getMaximumInterpreterStackDepth());
//       assertEquals(0, context0.getInstructionObserverThreshold());
//       assertEquals(false, context0.isSealed());
//       assertEquals(false, context0.isGeneratingDebugChanged());
//       assertEquals(0, context0.getOptimizationLevel());
//       assertNotNull(set0);
//       
//       Config config0 = new Config(set0, set0, context0.generateObserverCount, context0.generateObserverCount, context0.generateObserverCount);
//       assertFalse(context0.generateObserverCount);
//       assertEquals(0, set0.size());
//       assertEquals(true, set0.isEmpty());
//       assertEquals("TWN", locale0.getISO3Country());
//       assertEquals("zh_TW", locale0.toString());
//       assertEquals("zh", locale0.getLanguage());
//       assertEquals("zho", locale0.getISO3Language());
//       assertEquals("", locale0.getVariant());
//       assertEquals("TW", locale0.getCountry());
//       assertEquals(0, context0.getLanguageVersion());
//       assertEquals(false, context0.hasCompileFunctionsWithDynamicScope());
//       assertEquals(true, context0.isGeneratingSource());
//       assertEquals(false, context0.isGeneratingDebug());
//       assertEquals(2147483647, context0.getMaximumInterpreterStackDepth());
//       assertEquals(0, context0.getInstructionObserverThreshold());
//       assertEquals(false, context0.isSealed());
//       assertEquals(false, context0.isGeneratingDebugChanged());
//       assertEquals(0, context0.getOptimizationLevel());
//       assertNotNull(config0);
//       
//       ErrorReporter errorReporter0 = context0.getErrorReporter();
//       assertFalse(context0.generateObserverCount);
//       assertEquals(0, context0.getLanguageVersion());
//       assertEquals(false, context0.hasCompileFunctionsWithDynamicScope());
//       assertEquals(true, context0.isGeneratingSource());
//       assertEquals(false, context0.isGeneratingDebug());
//       assertEquals(2147483647, context0.getMaximumInterpreterStackDepth());
//       assertEquals(0, context0.getInstructionObserverThreshold());
//       assertEquals(false, context0.isSealed());
//       assertEquals(false, context0.isGeneratingDebugChanged());
//       assertEquals(0, context0.getOptimizationLevel());
//       assertNotNull(errorReporter0);
//       
//       com.google.javascript.rhino.Node node0 = IRFactory.transformTree(astRoot0, string0, config0, errorReporter0);
//       assertFalse(context0.generateObserverCount);
//       assertEquals(0, set0.size());
//       assertEquals(true, set0.isEmpty());
//       assertEquals("TWN", locale0.getISO3Country());
//       assertEquals("zh_TW", locale0.toString());
//       assertEquals("zh", locale0.getLanguage());
//       assertEquals("zho", locale0.getISO3Language());
//       assertEquals("", locale0.getVariant());
//       assertEquals("TW", locale0.getCountry());
//       assertEquals(0, context0.getLanguageVersion());
//       assertEquals(false, context0.hasCompileFunctionsWithDynamicScope());
//       assertEquals(true, context0.isGeneratingSource());
//       assertEquals(false, context0.isGeneratingDebug());
//       assertEquals(2147483647, context0.getMaximumInterpreterStackDepth());
//       assertEquals(0, context0.getInstructionObserverThreshold());
//       assertEquals(false, context0.isSealed());
//       assertEquals(false, context0.isGeneratingDebugChanged());
//       assertEquals(0, context0.getOptimizationLevel());
//       assertEquals(-1, astRoot0.getLineno());
//       assertNull(astRoot0.getEncodedSource());
//       assertEquals(0, astRoot0.getFunctionCount());
//       assertEquals(1, astRoot0.getLength());
//       assertEquals(false, astRoot0.isInStrictMode());
//       assertEquals(0, astRoot0.getParamCount());
//       assertEquals(-1, astRoot0.getEncodedSourceStart());
//       assertEquals(true, astRoot0.hasChildren());
//       assertEquals(-1, astRoot0.getBaseLineno());
//       assertEquals(-1, astRoot0.getEncodedSourceEnd());
//       assertEquals(-1, astRoot0.getAbsolutePosition());
//       assertEquals(136, astRoot0.getType());
//       assertNull(astRoot0.getJsDoc());
//       assertEquals(-1, astRoot0.getPosition());
//       assertEquals(0, astRoot0.getRegexpCount());
//       assertEquals(-1, astRoot0.getEndLineno());
//       assertEquals(0, astRoot0.depth());
//       assertNull(astRoot0.getSourceName());
//       assertEquals("136", astRoot0.toString());
//       assertEquals(false, node0.hasMoreThanOneChild());
//       assertEquals(false, node0.isOptionalArg());
//       assertEquals(false, node0.isQuotedString());
//       assertEquals(false, node0.isUnscopedQualifiedName());
//       assertEquals(false, node0.wasEmptyNode());
//       assertEquals(132, node0.getType());
//       assertEquals(-1, node0.getCharno());
//       assertEquals(false, node0.isVarArgs());
//       assertEquals(false, node0.isSyntheticBlock());
//       assertEquals(false, node0.isLocalResultCall());
//       assertEquals(false, node0.isOnlyModifiesThisCall());
//       assertEquals(1, node0.getChildCount());
//       assertEquals(true, node0.hasOneChild());
//       assertEquals(0, node0.getSideEffectFlags());
//       assertEquals(-1, node0.getLineno());
//       assertEquals(false, node0.isNoSideEffectsCall());
//       assertEquals(true, node0.hasChildren());
//       assertEquals(false, node0.isQualifiedName());
//       assertNotNull(node0);
//   }

  @Test
  public void test3()  throws Throwable  {
      AstRoot astRoot0 = new AstRoot();
      assertEquals(0, astRoot0.getFunctionCount());
      assertEquals(-1, astRoot0.getAbsolutePosition());
      assertEquals(false, astRoot0.isInStrictMode());
      assertNull(astRoot0.getEncodedSource());
      assertNull(astRoot0.getJsDoc());
      assertEquals(0, astRoot0.getParamCount());
      assertEquals(-1, astRoot0.getEncodedSourceStart());
      assertEquals(false, astRoot0.hasChildren());
      assertEquals(136, astRoot0.getType());
      assertEquals(-1, astRoot0.getBaseLineno());
      assertNull(astRoot0.getSourceName());
      assertEquals(-1, astRoot0.getLineno());
      assertEquals(0, astRoot0.getRegexpCount());
      assertEquals(1, astRoot0.getLength());
      assertEquals("136", astRoot0.toString());
      assertEquals(-1, astRoot0.getEndLineno());
      assertEquals(0, astRoot0.depth());
      assertEquals(-1, astRoot0.getPosition());
      assertEquals(-1, astRoot0.getEncodedSourceEnd());
      assertNotNull(astRoot0);
      
      FunctionNode functionNode0 = new FunctionNode();
      assertEquals(0, functionNode0.getRegexpCount());
      assertEquals(-1, functionNode0.getRp());
      assertEquals(-1, functionNode0.getEncodedSourceEnd());
      assertEquals(0, functionNode0.getParamCount());
      assertEquals(-1, functionNode0.getBaseLineno());
      assertEquals(1, functionNode0.getLength());
      assertEquals("109", functionNode0.toString());
      assertEquals(false, functionNode0.isExpressionClosure());
      assertEquals(0, functionNode0.depth());
      assertEquals(false, functionNode0.getIgnoreDynamicScope());
      assertEquals(false, functionNode0.isGenerator());
      assertEquals(false, functionNode0.hasChildren());
      assertEquals(false, functionNode0.requiresActivation());
      assertEquals(0, functionNode0.getFunctionType());
      assertEquals(-1, functionNode0.getLineno());
      assertNull(functionNode0.getJsDoc());
      assertEquals(-1, functionNode0.getLp());
      assertEquals(false, functionNode0.isGetterOrSetter());
      assertNull(functionNode0.getEncodedSource());
      assertEquals(109, functionNode0.getType());
      assertEquals(-1, functionNode0.getEncodedSourceStart());
      assertEquals("", functionNode0.getName());
      assertEquals(false, functionNode0.isSetter());
      assertEquals(-1, functionNode0.getAbsolutePosition());
      assertEquals(-1, functionNode0.getEndLineno());
      assertEquals(-1, functionNode0.getPosition());
      assertEquals(false, functionNode0.isGetter());
      assertNull(functionNode0.getSourceName());
      assertEquals(0, functionNode0.getFunctionCount());
      assertNotNull(functionNode0);
      
      astRoot0.addChild((AstNode) functionNode0);
      assertEquals(0, astRoot0.getFunctionCount());
      assertEquals(-1, astRoot0.getAbsolutePosition());
      assertEquals(false, astRoot0.isInStrictMode());
      assertNull(astRoot0.getEncodedSource());
      assertNull(astRoot0.getJsDoc());
      assertEquals(0, astRoot0.getParamCount());
      assertEquals(-1, astRoot0.getEncodedSourceStart());
      assertEquals(136, astRoot0.getType());
      assertEquals(-1, astRoot0.getBaseLineno());
      assertNull(astRoot0.getSourceName());
      assertEquals(-1, astRoot0.getLineno());
      assertEquals(0, astRoot0.getRegexpCount());
      assertEquals(1, astRoot0.getLength());
      assertEquals("136", astRoot0.toString());
      assertEquals(-1, astRoot0.getEndLineno());
      assertEquals(0, astRoot0.depth());
      assertEquals(-1, astRoot0.getPosition());
      assertEquals(true, astRoot0.hasChildren());
      assertEquals(-1, astRoot0.getEncodedSourceEnd());
      assertEquals(0, functionNode0.getRegexpCount());
      assertEquals(-1, functionNode0.getRp());
      assertEquals(0, functionNode0.getPosition());
      assertEquals(-1, functionNode0.getEncodedSourceEnd());
      assertEquals(0, functionNode0.getParamCount());
      assertEquals(-1, functionNode0.getBaseLineno());
      assertEquals(1, functionNode0.getLength());
      assertEquals("109", functionNode0.toString());
      assertEquals(false, functionNode0.isExpressionClosure());
      assertEquals(false, functionNode0.getIgnoreDynamicScope());
      assertEquals(false, functionNode0.isGenerator());
      assertEquals(false, functionNode0.hasChildren());
      assertEquals(false, functionNode0.requiresActivation());
      assertEquals(0, functionNode0.getFunctionType());
      assertEquals(-1, functionNode0.getLineno());
      assertNull(functionNode0.getJsDoc());
      assertEquals(-1, functionNode0.getLp());
      assertEquals(false, functionNode0.isGetterOrSetter());
      assertNull(functionNode0.getEncodedSource());
      assertEquals(109, functionNode0.getType());
      assertEquals(-1, functionNode0.getEncodedSourceStart());
      assertEquals("", functionNode0.getName());
      assertEquals(false, functionNode0.isSetter());
      assertEquals(1, functionNode0.depth());
      assertEquals(-1, functionNode0.getAbsolutePosition());
      assertEquals(-1, functionNode0.getEndLineno());
      assertEquals(false, functionNode0.isGetter());
      assertNull(functionNode0.getSourceName());
      assertEquals(0, functionNode0.getFunctionCount());
      
      String string0 = "";
      Context context0 = new Context();
      assertFalse(context0.generateObserverCount);
      assertEquals(2147483647, context0.getMaximumInterpreterStackDepth());
      assertEquals(false, context0.isGeneratingDebug());
      assertEquals(0, context0.getOptimizationLevel());
      assertEquals(false, context0.isGeneratingDebugChanged());
      assertEquals(0, context0.getLanguageVersion());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertEquals(true, context0.isGeneratingSource());
      assertEquals(false, context0.isSealed());
      assertEquals(false, context0.hasCompileFunctionsWithDynamicScope());
      assertNotNull(context0);
      
      TreeSet<String> treeSet0 = new TreeSet<String>();
      assertEquals("[]", treeSet0.toString());
      assertNotNull(treeSet0);
      
      int int0 = (-3);
      BreakStatement breakStatement0 = new BreakStatement(int0, int0);
      assertEquals(-3, breakStatement0.getPosition());
      assertEquals(false, breakStatement0.hasChildren());
      assertNull(breakStatement0.getJsDoc());
      assertEquals(120, breakStatement0.getType());
      assertEquals(-3, breakStatement0.getLength());
      assertEquals(0, breakStatement0.depth());
      assertEquals(-3, breakStatement0.getAbsolutePosition());
      assertEquals(-1, breakStatement0.getLineno());
      assertEquals("120", breakStatement0.toString());
      assertNotNull(breakStatement0);
      
      functionNode0.setBody((AstNode) breakStatement0);
      assertEquals(0, functionNode0.getRegexpCount());
      assertEquals(0, functionNode0.getEncodedSourceStart());
      assertEquals(-1, functionNode0.getRp());
      assertEquals(0, functionNode0.getPosition());
      assertEquals(0, functionNode0.getParamCount());
      assertEquals(-1, functionNode0.getBaseLineno());
      assertEquals("109", functionNode0.toString());
      assertEquals(false, functionNode0.isExpressionClosure());
      assertEquals(false, functionNode0.getIgnoreDynamicScope());
      assertEquals(false, functionNode0.isGenerator());
      assertEquals(false, functionNode0.hasChildren());
      assertEquals(false, functionNode0.requiresActivation());
      assertEquals(0, functionNode0.getFunctionType());
      assertEquals(-1, functionNode0.getLineno());
      assertNull(functionNode0.getJsDoc());
      assertEquals(-1, functionNode0.getLp());
      assertEquals(false, functionNode0.isGetterOrSetter());
      assertNull(functionNode0.getEncodedSource());
      assertEquals(109, functionNode0.getType());
      assertEquals("", functionNode0.getName());
      assertEquals(false, functionNode0.isSetter());
      assertEquals(1, functionNode0.depth());
      assertEquals(-6, functionNode0.getLength());
      assertEquals(-1, functionNode0.getAbsolutePosition());
      assertEquals(-1, functionNode0.getEndLineno());
      assertEquals(false, functionNode0.isGetter());
      assertNull(functionNode0.getSourceName());
      assertEquals(-6, functionNode0.getEncodedSourceEnd());
      assertEquals(0, functionNode0.getFunctionCount());
      assertEquals(-4, breakStatement0.getAbsolutePosition());
      assertEquals(-3, breakStatement0.getPosition());
      assertEquals(false, breakStatement0.hasChildren());
      assertNull(breakStatement0.getJsDoc());
      assertEquals(120, breakStatement0.getType());
      assertEquals(-3, breakStatement0.getLength());
      assertEquals(2, breakStatement0.depth());
      assertEquals(-1, breakStatement0.getLineno());
      assertEquals("120", breakStatement0.toString());
      
      Config config0 = new Config(treeSet0, treeSet0, context0.generateObserverCount, context0.generateObserverCount, context0.generateObserverCount);
      assertFalse(context0.generateObserverCount);
      assertEquals("[]", treeSet0.toString());
      assertEquals(2147483647, context0.getMaximumInterpreterStackDepth());
      assertEquals(false, context0.isGeneratingDebug());
      assertEquals(0, context0.getOptimizationLevel());
      assertEquals(false, context0.isGeneratingDebugChanged());
      assertEquals(0, context0.getLanguageVersion());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertEquals(true, context0.isGeneratingSource());
      assertEquals(false, context0.isSealed());
      assertEquals(false, context0.hasCompileFunctionsWithDynamicScope());
      assertNotNull(config0);
      
      ToolErrorReporter toolErrorReporter0 = new ToolErrorReporter(context0.generateObserverCount);
      assertFalse(context0.generateObserverCount);
      assertEquals(2147483647, context0.getMaximumInterpreterStackDepth());
      assertEquals(false, context0.isGeneratingDebug());
      assertEquals(0, context0.getOptimizationLevel());
      assertEquals(false, context0.isGeneratingDebugChanged());
      assertEquals(0, context0.getLanguageVersion());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertEquals(true, context0.isGeneratingSource());
      assertEquals(false, context0.isSealed());
      assertEquals(false, context0.hasCompileFunctionsWithDynamicScope());
      assertEquals(false, toolErrorReporter0.isReportingWarnings());
      assertEquals(false, toolErrorReporter0.hasReportedError());
      assertNotNull(toolErrorReporter0);
      
      com.google.javascript.rhino.Node node0 = IRFactory.transformTree(astRoot0, string0, config0, (ErrorReporter) toolErrorReporter0);
      assertFalse(context0.generateObserverCount);
      assertEquals("[]", treeSet0.toString());
      assertEquals(0, astRoot0.getFunctionCount());
      assertEquals(-1, astRoot0.getAbsolutePosition());
      assertEquals(false, astRoot0.isInStrictMode());
      assertNull(astRoot0.getEncodedSource());
      assertNull(astRoot0.getJsDoc());
      assertEquals(0, astRoot0.getParamCount());
      assertEquals(-1, astRoot0.getEncodedSourceStart());
      assertEquals(136, astRoot0.getType());
      assertEquals(-1, astRoot0.getBaseLineno());
      assertNull(astRoot0.getSourceName());
      assertEquals(-1, astRoot0.getLineno());
      assertEquals(0, astRoot0.getRegexpCount());
      assertEquals(1, astRoot0.getLength());
      assertEquals("136", astRoot0.toString());
      assertEquals(-1, astRoot0.getEndLineno());
      assertEquals(0, astRoot0.depth());
      assertEquals(-1, astRoot0.getPosition());
      assertEquals(true, astRoot0.hasChildren());
      assertEquals(-1, astRoot0.getEncodedSourceEnd());
      assertEquals(true, node0.hasOneChild());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isQuotedString());
      assertEquals(true, node0.hasChildren());
      assertEquals(1, node0.getChildCount());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(-1, node0.getCharno());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(-1, node0.getLineno());
      assertEquals(132, node0.getType());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(2147483647, context0.getMaximumInterpreterStackDepth());
      assertEquals(false, context0.isGeneratingDebug());
      assertEquals(0, context0.getOptimizationLevel());
      assertEquals(false, context0.isGeneratingDebugChanged());
      assertEquals(0, context0.getLanguageVersion());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertEquals(true, context0.isGeneratingSource());
      assertEquals(false, context0.isSealed());
      assertEquals(false, context0.hasCompileFunctionsWithDynamicScope());
      assertEquals(true, toolErrorReporter0.hasReportedError());
      assertEquals(false, toolErrorReporter0.isReportingWarnings());
      assertNotNull(node0);
  }

  @Test
  public void test4() {}
//   @Test
//   public void test4()  throws Throwable  {
//       AstRoot astRoot0 = new AstRoot();
//       assertNull(astRoot0.getSourceName());
//       assertEquals(-1, astRoot0.getLineno());
//       assertNull(astRoot0.getEncodedSource());
//       assertEquals(-1, astRoot0.getEncodedSourceStart());
//       assertEquals(-1, astRoot0.getBaseLineno());
//       assertNull(astRoot0.getJsDoc());
//       assertEquals(0, astRoot0.getParamCount());
//       assertEquals(-1, astRoot0.getEndLineno());
//       assertEquals(0, astRoot0.getRegexpCount());
//       assertEquals(1, astRoot0.getLength());
//       assertEquals(-1, astRoot0.getPosition());
//       assertEquals("136", astRoot0.toString());
//       assertEquals(-1, astRoot0.getAbsolutePosition());
//       assertEquals(0, astRoot0.depth());
//       assertEquals(false, astRoot0.isInStrictMode());
//       assertEquals(false, astRoot0.hasChildren());
//       assertEquals(0, astRoot0.getFunctionCount());
//       assertEquals(136, astRoot0.getType());
//       assertEquals(-1, astRoot0.getEncodedSourceEnd());
//       assertNotNull(astRoot0);
//       
//       ObjectProperty objectProperty0 = new ObjectProperty();
//       assertEquals(-1, objectProperty0.getLineno());
//       assertEquals(0, objectProperty0.depth());
//       assertNull(objectProperty0.getJsDoc());
//       assertEquals(-1, objectProperty0.getAbsolutePosition());
//       assertEquals(-1, objectProperty0.getOperatorPosition());
//       assertEquals(-1, objectProperty0.getPosition());
//       assertEquals(false, objectProperty0.isSetter());
//       assertEquals(1, objectProperty0.getLength());
//       assertEquals("103", objectProperty0.toString());
//       assertEquals(false, objectProperty0.hasChildren());
//       assertEquals(103, objectProperty0.getType());
//       assertEquals(false, objectProperty0.isGetter());
//       assertNotNull(objectProperty0);
//       
//       String string0 = "{!a B";
//       astRoot0.addChildrenToFront((Node) objectProperty0);
//       assertEquals(true, astRoot0.hasChildren());
//       assertNull(astRoot0.getSourceName());
//       assertEquals(-1, astRoot0.getLineno());
//       assertNull(astRoot0.getEncodedSource());
//       assertEquals(-1, astRoot0.getEncodedSourceStart());
//       assertEquals(-1, astRoot0.getBaseLineno());
//       assertNull(astRoot0.getJsDoc());
//       assertEquals(0, astRoot0.getParamCount());
//       assertEquals(-1, astRoot0.getEndLineno());
//       assertEquals(0, astRoot0.getRegexpCount());
//       assertEquals(1, astRoot0.getLength());
//       assertEquals(-1, astRoot0.getPosition());
//       assertEquals("136", astRoot0.toString());
//       assertEquals(-1, astRoot0.getAbsolutePosition());
//       assertEquals(0, astRoot0.depth());
//       assertEquals(false, astRoot0.isInStrictMode());
//       assertEquals(0, astRoot0.getFunctionCount());
//       assertEquals(136, astRoot0.getType());
//       assertEquals(-1, astRoot0.getEncodedSourceEnd());
//       assertEquals(-1, objectProperty0.getLineno());
//       assertEquals(0, objectProperty0.depth());
//       assertNull(objectProperty0.getJsDoc());
//       assertEquals(-1, objectProperty0.getAbsolutePosition());
//       assertEquals(-1, objectProperty0.getOperatorPosition());
//       assertEquals(-1, objectProperty0.getPosition());
//       assertEquals(false, objectProperty0.isSetter());
//       assertEquals(1, objectProperty0.getLength());
//       assertEquals("103", objectProperty0.toString());
//       assertEquals(false, objectProperty0.hasChildren());
//       assertEquals(103, objectProperty0.getType());
//       assertEquals(false, objectProperty0.isGetter());
//       
//       Context context0 = new Context();
//       assertFalse(context0.generateObserverCount);
//       assertEquals(false, context0.isGeneratingDebug());
//       assertEquals(false, context0.isGeneratingDebugChanged());
//       assertEquals(0, context0.getLanguageVersion());
//       assertEquals(0, context0.getInstructionObserverThreshold());
//       assertEquals(2147483647, context0.getMaximumInterpreterStackDepth());
//       assertEquals(false, context0.isSealed());
//       assertEquals(true, context0.isGeneratingSource());
//       assertEquals(false, context0.hasCompileFunctionsWithDynamicScope());
//       assertEquals(0, context0.getOptimizationLevel());
//       assertNotNull(context0);
//       
//       Locale locale0 = context0.getLocale();
//       assertFalse(context0.generateObserverCount);
//       assertEquals(false, context0.isGeneratingDebug());
//       assertEquals(false, context0.isGeneratingDebugChanged());
//       assertEquals(0, context0.getLanguageVersion());
//       assertEquals(0, context0.getInstructionObserverThreshold());
//       assertEquals(2147483647, context0.getMaximumInterpreterStackDepth());
//       assertEquals(false, context0.isSealed());
//       assertEquals(true, context0.isGeneratingSource());
//       assertEquals(false, context0.hasCompileFunctionsWithDynamicScope());
//       assertEquals(0, context0.getOptimizationLevel());
//       assertEquals("", locale0.getVariant());
//       assertEquals("TW", locale0.getCountry());
//       assertEquals("zho", locale0.getISO3Language());
//       assertEquals("zh_TW", locale0.toString());
//       assertEquals("TWN", locale0.getISO3Country());
//       assertEquals("zh", locale0.getLanguage());
//       assertNotNull(locale0);
//       
//       Set<String> set0 = locale0.getUnicodeLocaleAttributes();
//       assertFalse(context0.generateObserverCount);
//       assertEquals(false, context0.isGeneratingDebug());
//       assertEquals(false, context0.isGeneratingDebugChanged());
//       assertEquals(0, context0.getLanguageVersion());
//       assertEquals(0, context0.getInstructionObserverThreshold());
//       assertEquals(2147483647, context0.getMaximumInterpreterStackDepth());
//       assertEquals(false, context0.isSealed());
//       assertEquals(true, context0.isGeneratingSource());
//       assertEquals(false, context0.hasCompileFunctionsWithDynamicScope());
//       assertEquals(0, context0.getOptimizationLevel());
//       assertEquals(true, set0.isEmpty());
//       assertEquals(0, set0.size());
//       assertEquals("", locale0.getVariant());
//       assertEquals("TW", locale0.getCountry());
//       assertEquals("zho", locale0.getISO3Language());
//       assertEquals("zh_TW", locale0.toString());
//       assertEquals("TWN", locale0.getISO3Country());
//       assertEquals("zh", locale0.getLanguage());
//       assertNotNull(set0);
//       
//       Config config0 = new Config(set0, set0, context0.generateObserverCount, context0.generateObserverCount, context0.generateObserverCount);
//       assertFalse(context0.generateObserverCount);
//       assertEquals(false, context0.isGeneratingDebug());
//       assertEquals(false, context0.isGeneratingDebugChanged());
//       assertEquals(0, context0.getLanguageVersion());
//       assertEquals(0, context0.getInstructionObserverThreshold());
//       assertEquals(2147483647, context0.getMaximumInterpreterStackDepth());
//       assertEquals(false, context0.isSealed());
//       assertEquals(true, context0.isGeneratingSource());
//       assertEquals(false, context0.hasCompileFunctionsWithDynamicScope());
//       assertEquals(0, context0.getOptimizationLevel());
//       assertEquals(true, set0.isEmpty());
//       assertEquals(0, set0.size());
//       assertEquals("", locale0.getVariant());
//       assertEquals("TW", locale0.getCountry());
//       assertEquals("zho", locale0.getISO3Language());
//       assertEquals("zh_TW", locale0.toString());
//       assertEquals("TWN", locale0.getISO3Country());
//       assertEquals("zh", locale0.getLanguage());
//       assertNotNull(config0);
//       
//       ErrorReporter errorReporter0 = context0.getErrorReporter();
//       assertFalse(context0.generateObserverCount);
//       assertEquals(false, context0.isGeneratingDebug());
//       assertEquals(false, context0.isGeneratingDebugChanged());
//       assertEquals(0, context0.getLanguageVersion());
//       assertEquals(0, context0.getInstructionObserverThreshold());
//       assertEquals(2147483647, context0.getMaximumInterpreterStackDepth());
//       assertEquals(false, context0.isSealed());
//       assertEquals(true, context0.isGeneratingSource());
//       assertEquals(false, context0.hasCompileFunctionsWithDynamicScope());
//       assertEquals(0, context0.getOptimizationLevel());
//       assertNotNull(errorReporter0);
//       
//       // Undeclared exception!
//       try {
//         com.google.javascript.rhino.Node node0 = IRFactory.transformTree(astRoot0, string0, config0, errorReporter0);
//         fail("Expecting exception: NullPointerException");
//       
//       } catch(NullPointerException e) {
//          //
//          // no message in exception (getMessage() returned null)
//          //
//       }
//   }

  @Test
  public void test5() {}
//   @Test
//   public void test5()  throws Throwable  {
//       AstRoot astRoot0 = new AstRoot();
//       assertEquals(0, astRoot0.getParamCount());
//       assertEquals(1, astRoot0.getLength());
//       assertEquals(-1, astRoot0.getAbsolutePosition());
//       assertEquals(136, astRoot0.getType());
//       assertEquals(-1, astRoot0.getBaseLineno());
//       assertEquals(-1, astRoot0.getEndLineno());
//       assertEquals(0, astRoot0.depth());
//       assertEquals(false, astRoot0.hasChildren());
//       assertEquals(-1, astRoot0.getLineno());
//       assertEquals(0, astRoot0.getRegexpCount());
//       assertEquals(-1, astRoot0.getPosition());
//       assertEquals(0, astRoot0.getFunctionCount());
//       assertEquals(-1, astRoot0.getEncodedSourceStart());
//       assertNull(astRoot0.getEncodedSource());
//       assertNull(astRoot0.getJsDoc());
//       assertNull(astRoot0.getSourceName());
//       assertEquals(false, astRoot0.isInStrictMode());
//       assertEquals("136", astRoot0.toString());
//       assertEquals(-1, astRoot0.getEncodedSourceEnd());
//       assertNotNull(astRoot0);
//       
//       int int0 = 0;
//       AstRoot astRoot1 = (AstRoot)astRoot0.setType(int0);
//       assertSame(astRoot1, astRoot0);
//       assertSame(astRoot0, astRoot1);
//       assertEquals(-1, astRoot1.getPosition());
//       assertNull(astRoot1.getEncodedSource());
//       assertEquals(-1, astRoot1.getAbsolutePosition());
//       assertEquals(0, astRoot1.getFunctionCount());
//       assertNull(astRoot1.getSourceName());
//       assertEquals(-1, astRoot1.getBaseLineno());
//       assertEquals(0, astRoot1.getRegexpCount());
//       assertEquals(false, astRoot1.hasChildren());
//       assertEquals(0, astRoot1.getParamCount());
//       assertEquals(-1, astRoot1.getEncodedSourceStart());
//       assertEquals(1, astRoot1.getLength());
//       assertNull(astRoot1.getJsDoc());
//       assertEquals(0, astRoot1.getType());
//       assertEquals(0, astRoot1.depth());
//       assertEquals(-1, astRoot1.getLineno());
//       assertEquals(-1, astRoot1.getEncodedSourceEnd());
//       assertEquals("0", astRoot1.toString());
//       assertEquals(-1, astRoot1.getEndLineno());
//       assertEquals(false, astRoot1.isInStrictMode());
//       assertEquals(0, astRoot0.getParamCount());
//       assertEquals(1, astRoot0.getLength());
//       assertEquals(-1, astRoot0.getAbsolutePosition());
//       assertEquals(0, astRoot0.getType());
//       assertEquals(-1, astRoot0.getBaseLineno());
//       assertEquals(-1, astRoot0.getEndLineno());
//       assertEquals(0, astRoot0.depth());
//       assertEquals(false, astRoot0.hasChildren());
//       assertEquals(-1, astRoot0.getLineno());
//       assertEquals(0, astRoot0.getRegexpCount());
//       assertEquals(-1, astRoot0.getPosition());
//       assertEquals(0, astRoot0.getFunctionCount());
//       assertEquals(-1, astRoot0.getEncodedSourceStart());
//       assertNull(astRoot0.getEncodedSource());
//       assertNull(astRoot0.getJsDoc());
//       assertNull(astRoot0.getSourceName());
//       assertEquals("0", astRoot0.toString());
//       assertEquals(false, astRoot0.isInStrictMode());
//       assertEquals(-1, astRoot0.getEncodedSourceEnd());
//       assertNotNull(astRoot1);
//       
//       String string0 = "invalid decrement target";
//       Context context0 = new Context();
//       assertFalse(context0.generateObserverCount);
//       assertEquals(false, context0.hasCompileFunctionsWithDynamicScope());
//       assertEquals(0, context0.getOptimizationLevel());
//       assertEquals(false, context0.isSealed());
//       assertEquals(0, context0.getLanguageVersion());
//       assertEquals(true, context0.isGeneratingSource());
//       assertEquals(false, context0.isGeneratingDebugChanged());
//       assertEquals(0, context0.getInstructionObserverThreshold());
//       assertEquals(2147483647, context0.getMaximumInterpreterStackDepth());
//       assertEquals(false, context0.isGeneratingDebug());
//       assertNotNull(context0);
//       
//       Locale locale0 = context0.getLocale();
//       assertFalse(context0.generateObserverCount);
//       assertEquals("", locale0.getVariant());
//       assertEquals("zh", locale0.getLanguage());
//       assertEquals("TWN", locale0.getISO3Country());
//       assertEquals("zh_TW", locale0.toString());
//       assertEquals("zho", locale0.getISO3Language());
//       assertEquals("TW", locale0.getCountry());
//       assertEquals(false, context0.hasCompileFunctionsWithDynamicScope());
//       assertEquals(0, context0.getOptimizationLevel());
//       assertEquals(false, context0.isSealed());
//       assertEquals(0, context0.getLanguageVersion());
//       assertEquals(true, context0.isGeneratingSource());
//       assertEquals(false, context0.isGeneratingDebugChanged());
//       assertEquals(0, context0.getInstructionObserverThreshold());
//       assertEquals(2147483647, context0.getMaximumInterpreterStackDepth());
//       assertEquals(false, context0.isGeneratingDebug());
//       assertNotNull(locale0);
//       
//       Set<String> set0 = locale0.getUnicodeLocaleAttributes();
//       assertFalse(context0.generateObserverCount);
//       assertEquals("", locale0.getVariant());
//       assertEquals("zh", locale0.getLanguage());
//       assertEquals("TWN", locale0.getISO3Country());
//       assertEquals("zh_TW", locale0.toString());
//       assertEquals("zho", locale0.getISO3Language());
//       assertEquals("TW", locale0.getCountry());
//       assertEquals(false, context0.hasCompileFunctionsWithDynamicScope());
//       assertEquals(0, context0.getOptimizationLevel());
//       assertEquals(false, context0.isSealed());
//       assertEquals(0, context0.getLanguageVersion());
//       assertEquals(true, context0.isGeneratingSource());
//       assertEquals(false, context0.isGeneratingDebugChanged());
//       assertEquals(0, context0.getInstructionObserverThreshold());
//       assertEquals(2147483647, context0.getMaximumInterpreterStackDepth());
//       assertEquals(false, context0.isGeneratingDebug());
//       assertEquals(true, set0.isEmpty());
//       assertEquals(0, set0.size());
//       assertNotNull(set0);
//       
//       Config config0 = new Config(set0, set0, context0.generateObserverCount, context0.generateObserverCount, context0.generateObserverCount);
//       assertFalse(context0.generateObserverCount);
//       assertEquals("", locale0.getVariant());
//       assertEquals("zh", locale0.getLanguage());
//       assertEquals("TWN", locale0.getISO3Country());
//       assertEquals("zh_TW", locale0.toString());
//       assertEquals("zho", locale0.getISO3Language());
//       assertEquals("TW", locale0.getCountry());
//       assertEquals(false, context0.hasCompileFunctionsWithDynamicScope());
//       assertEquals(0, context0.getOptimizationLevel());
//       assertEquals(false, context0.isSealed());
//       assertEquals(0, context0.getLanguageVersion());
//       assertEquals(true, context0.isGeneratingSource());
//       assertEquals(false, context0.isGeneratingDebugChanged());
//       assertEquals(0, context0.getInstructionObserverThreshold());
//       assertEquals(2147483647, context0.getMaximumInterpreterStackDepth());
//       assertEquals(false, context0.isGeneratingDebug());
//       assertEquals(true, set0.isEmpty());
//       assertEquals(0, set0.size());
//       assertNotNull(config0);
//       
//       ErrorReporter errorReporter0 = context0.getErrorReporter();
//       assertFalse(context0.generateObserverCount);
//       assertEquals(false, context0.hasCompileFunctionsWithDynamicScope());
//       assertEquals(0, context0.getOptimizationLevel());
//       assertEquals(false, context0.isSealed());
//       assertEquals(0, context0.getLanguageVersion());
//       assertEquals(true, context0.isGeneratingSource());
//       assertEquals(false, context0.isGeneratingDebugChanged());
//       assertEquals(0, context0.getInstructionObserverThreshold());
//       assertEquals(2147483647, context0.getMaximumInterpreterStackDepth());
//       assertEquals(false, context0.isGeneratingDebug());
//       assertNotNull(errorReporter0);
//       
//       // Undeclared exception!
//       try {
//         com.google.javascript.rhino.Node node0 = IRFactory.transformTree(astRoot0, string0, config0, errorReporter0);
//         fail("Expecting exception: RuntimeException");
//       
//       } catch(RuntimeException e) {
//          //
//          // Unsupported syntax: EOF
//          //
//       }
//   }
}
