/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 22:29:10 GMT 2014
 */

package com.google.javascript.jscomp.parsing;

import static org.junit.Assert.*;
import org.junit.Test;
import com.google.javascript.jscomp.mozilla.rhino.Context;
import com.google.javascript.jscomp.mozilla.rhino.ContextFactory;
import com.google.javascript.jscomp.mozilla.rhino.ErrorReporter;
import com.google.javascript.jscomp.mozilla.rhino.Token;
import com.google.javascript.jscomp.mozilla.rhino.ast.ArrayComprehensionLoop;
import com.google.javascript.jscomp.mozilla.rhino.ast.AstNode;
import com.google.javascript.jscomp.mozilla.rhino.ast.AstRoot;
import com.google.javascript.jscomp.mozilla.rhino.ast.BreakStatement;
import com.google.javascript.jscomp.mozilla.rhino.ast.Comment;
import com.google.javascript.jscomp.mozilla.rhino.ast.Name;
import com.google.javascript.jscomp.mozilla.rhino.ast.NumberLiteral;
import com.google.javascript.jscomp.mozilla.rhino.ast.RegExpLiteral;
import com.google.javascript.jscomp.mozilla.rhino.tools.ToolErrorReporter;
import com.google.javascript.jscomp.parsing.Config;
import com.google.javascript.jscomp.parsing.IRFactory;
import com.google.javascript.rhino.Node;
import java.io.PrintStream;
import java.util.TreeSet;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;

import org.evosuite.runtime.FileSystemHandling;
import org.junit.runner.RunWith;


public class IRFactoryEvoSuite_branch_Test  {

  @Test
  public void test0()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      int int0 = 953;
      AstRoot astRoot0 = new AstRoot(int0);
      assertEquals(953, astRoot0.getAbsolutePosition());
      assertEquals(-1, astRoot0.getEndLineno());
      assertEquals(-1, astRoot0.getEncodedSourceStart());
      assertEquals(false, astRoot0.isInStrictMode());
      assertNull(astRoot0.getEncodedSource());
      assertEquals(false, astRoot0.hasChildren());
      assertEquals(0, astRoot0.depth());
      assertNull(astRoot0.getSourceName());
      assertEquals(1, astRoot0.getLength());
      assertNull(astRoot0.getJsDoc());
      assertEquals(0, astRoot0.getParamCount());
      assertEquals("136", astRoot0.toString());
      assertEquals(-1, astRoot0.getBaseLineno());
      assertEquals(-1, astRoot0.getEncodedSourceEnd());
      assertEquals(-1, astRoot0.getLineno());
      assertEquals(0, astRoot0.getFunctionCount());
      assertEquals(953, astRoot0.getPosition());
      assertEquals(136, astRoot0.getType());
      assertEquals(0, astRoot0.getRegexpCount());
      assertNotNull(astRoot0);
      
      String string0 = "";
      RegExpLiteral regExpLiteral0 = new RegExpLiteral();
      assertNull(regExpLiteral0.getFlags());
      assertEquals(false, regExpLiteral0.hasChildren());
      assertEquals(-1, regExpLiteral0.getPosition());
      assertEquals(0, regExpLiteral0.depth());
      assertEquals(-1, regExpLiteral0.getLineno());
      assertNull(regExpLiteral0.getValue());
      assertEquals("48", regExpLiteral0.toString());
      assertEquals(-1, regExpLiteral0.getAbsolutePosition());
      assertEquals(48, regExpLiteral0.getType());
      assertEquals(1, regExpLiteral0.getLength());
      assertNull(regExpLiteral0.getJsDoc());
      assertNotNull(regExpLiteral0);
      
      astRoot0.addChild((AstNode) regExpLiteral0);
      assertNull(regExpLiteral0.getFlags());
      assertEquals(false, regExpLiteral0.hasChildren());
      assertEquals(-1, regExpLiteral0.getLineno());
      assertEquals(-954, regExpLiteral0.getPosition());
      assertNull(regExpLiteral0.getValue());
      assertEquals("48", regExpLiteral0.toString());
      assertEquals(-1, regExpLiteral0.getAbsolutePosition());
      assertEquals(1, regExpLiteral0.depth());
      assertEquals(48, regExpLiteral0.getType());
      assertEquals(1, regExpLiteral0.getLength());
      assertNull(regExpLiteral0.getJsDoc());
      assertEquals(953, astRoot0.getAbsolutePosition());
      assertEquals(-1, astRoot0.getEndLineno());
      assertEquals(-1, astRoot0.getEncodedSourceStart());
      assertEquals(-953, astRoot0.getLength());
      assertEquals(false, astRoot0.isInStrictMode());
      assertNull(astRoot0.getEncodedSource());
      assertEquals(0, astRoot0.depth());
      assertNull(astRoot0.getSourceName());
      assertNull(astRoot0.getJsDoc());
      assertEquals(0, astRoot0.getParamCount());
      assertEquals("136", astRoot0.toString());
      assertEquals(-1, astRoot0.getBaseLineno());
      assertEquals(-1, astRoot0.getEncodedSourceEnd());
      assertEquals(-1, astRoot0.getLineno());
      assertEquals(0, astRoot0.getFunctionCount());
      assertEquals(true, astRoot0.hasChildren());
      assertEquals(953, astRoot0.getPosition());
      assertEquals(136, astRoot0.getType());
      assertEquals(0, astRoot0.getRegexpCount());
      
      regExpLiteral0.setValue(string0);
      assertNull(regExpLiteral0.getFlags());
      assertEquals(false, regExpLiteral0.hasChildren());
      assertEquals(-1, regExpLiteral0.getLineno());
      assertEquals(-954, regExpLiteral0.getPosition());
      assertEquals("", regExpLiteral0.getValue());
      assertEquals("48", regExpLiteral0.toString());
      assertEquals(-1, regExpLiteral0.getAbsolutePosition());
      assertEquals(1, regExpLiteral0.depth());
      assertEquals(48, regExpLiteral0.getType());
      assertEquals(1, regExpLiteral0.getLength());
      assertNull(regExpLiteral0.getJsDoc());
      
      TreeSet<String> treeSet0 = new TreeSet<String>();
      assertEquals("[]", treeSet0.toString());
      assertNotNull(treeSet0);
      
      regExpLiteral0.setFlags(string0);
      assertEquals("", regExpLiteral0.getFlags());
      assertEquals(false, regExpLiteral0.hasChildren());
      assertEquals(-1, regExpLiteral0.getLineno());
      assertEquals(-954, regExpLiteral0.getPosition());
      assertEquals("", regExpLiteral0.getValue());
      assertEquals("48", regExpLiteral0.toString());
      assertEquals(-1, regExpLiteral0.getAbsolutePosition());
      assertEquals(1, regExpLiteral0.depth());
      assertEquals(48, regExpLiteral0.getType());
      assertEquals(1, regExpLiteral0.getLength());
      assertNull(regExpLiteral0.getJsDoc());
      
      Config config0 = new Config(treeSet0, treeSet0, boolean0, boolean0, boolean0);
      assertEquals("[]", treeSet0.toString());
      assertNotNull(config0);
      
      ToolErrorReporter toolErrorReporter0 = new ToolErrorReporter(boolean0);
      assertEquals(true, toolErrorReporter0.isReportingWarnings());
      assertEquals(false, toolErrorReporter0.hasReportedError());
      assertNotNull(toolErrorReporter0);
      
      Node node0 = IRFactory.transformTree(astRoot0, string0, config0, (ErrorReporter) toolErrorReporter0);
      assertEquals(true, toolErrorReporter0.isReportingWarnings());
      assertEquals(false, toolErrorReporter0.hasReportedError());
      assertEquals("[]", treeSet0.toString());
      assertEquals(1, node0.getChildCount());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(true, node0.hasOneChild());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isQuotedString());
      assertEquals(-1, node0.getLineno());
      assertEquals(true, node0.hasChildren());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(132, node0.getType());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(953, astRoot0.getAbsolutePosition());
      assertEquals(-1, astRoot0.getEndLineno());
      assertEquals(-1, astRoot0.getEncodedSourceStart());
      assertEquals(-953, astRoot0.getLength());
      assertEquals(false, astRoot0.isInStrictMode());
      assertNull(astRoot0.getEncodedSource());
      assertEquals(0, astRoot0.depth());
      assertNull(astRoot0.getSourceName());
      assertNull(astRoot0.getJsDoc());
      assertEquals(0, astRoot0.getParamCount());
      assertEquals("136", astRoot0.toString());
      assertEquals(-1, astRoot0.getBaseLineno());
      assertEquals(-1, astRoot0.getEncodedSourceEnd());
      assertEquals(-1, astRoot0.getLineno());
      assertEquals(0, astRoot0.getFunctionCount());
      assertEquals(true, astRoot0.hasChildren());
      assertEquals(953, astRoot0.getPosition());
      assertEquals(136, astRoot0.getType());
      assertEquals(0, astRoot0.getRegexpCount());
      assertNotNull(node0);
  }

  @Test
  public void test1()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      int int0 = 8230;
      AstRoot astRoot0 = new AstRoot(int0);
      assertNull(astRoot0.getSourceName());
      assertEquals(0, astRoot0.getRegexpCount());
      assertNull(astRoot0.getJsDoc());
      assertEquals(0, astRoot0.getFunctionCount());
      assertEquals(-1, astRoot0.getBaseLineno());
      assertEquals(136, astRoot0.getType());
      assertEquals(false, astRoot0.hasChildren());
      assertEquals("136", astRoot0.toString());
      assertNull(astRoot0.getEncodedSource());
      assertEquals(0, astRoot0.depth());
      assertEquals(8230, astRoot0.getPosition());
      assertEquals(-1, astRoot0.getEncodedSourceStart());
      assertEquals(-1, astRoot0.getEncodedSourceEnd());
      assertEquals(-1, astRoot0.getLineno());
      assertEquals(1, astRoot0.getLength());
      assertEquals(false, astRoot0.isInStrictMode());
      assertEquals(0, astRoot0.getParamCount());
      assertEquals(-1, astRoot0.getEndLineno());
      assertEquals(8230, astRoot0.getAbsolutePosition());
      assertNotNull(astRoot0);
      
      String string0 = "s";
      RegExpLiteral regExpLiteral0 = new RegExpLiteral();
      assertEquals(1, regExpLiteral0.getLength());
      assertEquals("48", regExpLiteral0.toString());
      assertEquals(-1, regExpLiteral0.getLineno());
      assertNull(regExpLiteral0.getFlags());
      assertEquals(48, regExpLiteral0.getType());
      assertNull(regExpLiteral0.getValue());
      assertEquals(false, regExpLiteral0.hasChildren());
      assertNull(regExpLiteral0.getJsDoc());
      assertEquals(-1, regExpLiteral0.getAbsolutePosition());
      assertEquals(-1, regExpLiteral0.getPosition());
      assertEquals(0, regExpLiteral0.depth());
      assertNotNull(regExpLiteral0);
      
      astRoot0.addChild((AstNode) regExpLiteral0);
      assertEquals(1, regExpLiteral0.getLength());
      assertEquals("48", regExpLiteral0.toString());
      assertEquals(-1, regExpLiteral0.getLineno());
      assertEquals(-8231, regExpLiteral0.getPosition());
      assertNull(regExpLiteral0.getFlags());
      assertEquals(48, regExpLiteral0.getType());
      assertNull(regExpLiteral0.getValue());
      assertEquals(false, regExpLiteral0.hasChildren());
      assertEquals(1, regExpLiteral0.depth());
      assertNull(regExpLiteral0.getJsDoc());
      assertEquals(-1, regExpLiteral0.getAbsolutePosition());
      assertNull(astRoot0.getSourceName());
      assertEquals(0, astRoot0.getRegexpCount());
      assertNull(astRoot0.getJsDoc());
      assertEquals(0, astRoot0.getFunctionCount());
      assertEquals(-1, astRoot0.getBaseLineno());
      assertEquals(136, astRoot0.getType());
      assertEquals("136", astRoot0.toString());
      assertEquals(-8230, astRoot0.getLength());
      assertNull(astRoot0.getEncodedSource());
      assertEquals(0, astRoot0.depth());
      assertEquals(8230, astRoot0.getPosition());
      assertEquals(true, astRoot0.hasChildren());
      assertEquals(-1, astRoot0.getEncodedSourceStart());
      assertEquals(-1, astRoot0.getEncodedSourceEnd());
      assertEquals(-1, astRoot0.getLineno());
      assertEquals(false, astRoot0.isInStrictMode());
      assertEquals(0, astRoot0.getParamCount());
      assertEquals(-1, astRoot0.getEndLineno());
      assertEquals(8230, astRoot0.getAbsolutePosition());
      
      regExpLiteral0.setValue(string0);
      assertEquals(1, regExpLiteral0.getLength());
      assertEquals("48", regExpLiteral0.toString());
      assertEquals(-1, regExpLiteral0.getLineno());
      assertEquals(-8231, regExpLiteral0.getPosition());
      assertNull(regExpLiteral0.getFlags());
      assertEquals(48, regExpLiteral0.getType());
      assertEquals(false, regExpLiteral0.hasChildren());
      assertEquals(1, regExpLiteral0.depth());
      assertEquals("s", regExpLiteral0.getValue());
      assertNull(regExpLiteral0.getJsDoc());
      assertEquals(-1, regExpLiteral0.getAbsolutePosition());
      
      TreeSet<String> treeSet0 = new TreeSet<String>();
      assertEquals("[]", treeSet0.toString());
      assertNotNull(treeSet0);
      
      regExpLiteral0.setFlags(string0);
      assertEquals(1, regExpLiteral0.getLength());
      assertEquals("48", regExpLiteral0.toString());
      assertEquals(-1, regExpLiteral0.getLineno());
      assertEquals(-8231, regExpLiteral0.getPosition());
      assertEquals("s", regExpLiteral0.getFlags());
      assertEquals(48, regExpLiteral0.getType());
      assertEquals(false, regExpLiteral0.hasChildren());
      assertEquals(1, regExpLiteral0.depth());
      assertEquals("s", regExpLiteral0.getValue());
      assertNull(regExpLiteral0.getJsDoc());
      assertEquals(-1, regExpLiteral0.getAbsolutePosition());
      
      Config config0 = new Config(treeSet0, treeSet0, boolean0, boolean0, boolean0);
      assertEquals("[]", treeSet0.toString());
      assertNotNull(config0);
      
      PrintStream printStream0 = null;
      ToolErrorReporter toolErrorReporter0 = new ToolErrorReporter(boolean0, printStream0);
      assertEquals(false, toolErrorReporter0.hasReportedError());
      assertEquals(true, toolErrorReporter0.isReportingWarnings());
      assertNotNull(toolErrorReporter0);
      
      Node node0 = IRFactory.transformTree(astRoot0, string0, config0, (ErrorReporter) toolErrorReporter0);
      assertNull(astRoot0.getSourceName());
      assertEquals(0, astRoot0.getRegexpCount());
      assertNull(astRoot0.getJsDoc());
      assertEquals(0, astRoot0.getFunctionCount());
      assertEquals(-1, astRoot0.getBaseLineno());
      assertEquals(136, astRoot0.getType());
      assertEquals("136", astRoot0.toString());
      assertEquals(-8230, astRoot0.getLength());
      assertNull(astRoot0.getEncodedSource());
      assertEquals(0, astRoot0.depth());
      assertEquals(8230, astRoot0.getPosition());
      assertEquals(true, astRoot0.hasChildren());
      assertEquals(-1, astRoot0.getEncodedSourceStart());
      assertEquals(-1, astRoot0.getEncodedSourceEnd());
      assertEquals(-1, astRoot0.getLineno());
      assertEquals(false, astRoot0.isInStrictMode());
      assertEquals(0, astRoot0.getParamCount());
      assertEquals(-1, astRoot0.getEndLineno());
      assertEquals(8230, astRoot0.getAbsolutePosition());
      assertEquals("[]", treeSet0.toString());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isQuotedString());
      assertEquals(-1, node0.getCharno());
      assertEquals(132, node0.getType());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(-1, node0.getLineno());
      assertEquals(1, node0.getChildCount());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(true, node0.hasChildren());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(true, node0.hasOneChild());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, toolErrorReporter0.hasReportedError());
      assertEquals(true, toolErrorReporter0.isReportingWarnings());
      assertNotNull(node0);
  }

  @Test
  public void test2()  throws Throwable  {
      int int0 = 100;
      AstRoot astRoot0 = new AstRoot(int0);
      //  // Unstable assertion: assertEquals(100, astRoot0.getPosition());
      //  // Unstable assertion: assertEquals(-1, astRoot0.getEncodedSourceEnd());
      //  // Unstable assertion: assertEquals(-1, astRoot0.getEndLineno());
      //  // Unstable assertion: assertEquals(0, astRoot0.getRegexpCount());
      //  // Unstable assertion: assertEquals(100, astRoot0.getAbsolutePosition());
      //  // Unstable assertion: assertEquals(1, astRoot0.getLength());
      //  // Unstable assertion: assertNull(astRoot0.getSourceName());
      //  // Unstable assertion: assertEquals(0, astRoot0.getFunctionCount());
      //  // Unstable assertion: assertEquals(false, astRoot0.hasChildren());
      //  // Unstable assertion: assertEquals(0, astRoot0.depth());
      //  // Unstable assertion: assertEquals(-1, astRoot0.getBaseLineno());
      //  // Unstable assertion: assertEquals(0, astRoot0.getParamCount());
      //  // Unstable assertion: assertEquals(-1, astRoot0.getLineno());
      //  // Unstable assertion: assertNull(astRoot0.getJsDoc());
      //  // Unstable assertion: assertEquals(false, astRoot0.isInStrictMode());
      //  // Unstable assertion: assertEquals(-1, astRoot0.getEncodedSourceStart());
      //  // Unstable assertion: assertNull(astRoot0.getEncodedSource());
      //  // Unstable assertion: assertEquals("136", astRoot0.toString());
      //  // Unstable assertion: assertEquals(136, astRoot0.getType());
      //  // Unstable assertion: assertNotNull(astRoot0);
      
      String string0 = "Su6";
      TreeSet<String> treeSet0 = new TreeSet<String>();
      //  // Unstable assertion: assertEquals("[]", treeSet0.toString());
      //  // Unstable assertion: assertNotNull(treeSet0);
      
      Token.CommentType token_CommentType0 = Token.CommentType.JSDOC;
      ContextFactory contextFactory0 = new ContextFactory();
      //  // Unstable assertion: assertEquals(false, contextFactory0.hasExplicitGlobal());
      //  // Unstable assertion: assertEquals(false, contextFactory0.isSealed());
      //  // Unstable assertion: assertNotNull(contextFactory0);
      
      Context context0 = contextFactory0.enterContext();
      //  // Unstable assertion: assertEquals(true, context0.isSealed());
      //  // Unstable assertion: assertEquals(false, context0.hasCompileFunctionsWithDynamicScope());
      //  // Unstable assertion: assertEquals(false, context0.isGeneratingDebugChanged());
      //  // Unstable assertion: assertEquals(0, context0.getOptimizationLevel());
      //  // Unstable assertion: assertEquals(0, context0.getLanguageVersion());
      //  // Unstable assertion: assertEquals(false, context0.isGeneratingDebug());
      //  // Unstable assertion: assertEquals(0, context0.getInstructionObserverThreshold());
      //  // Unstable assertion: assertEquals(2147483647, context0.getMaximumInterpreterStackDepth());
      //  // Unstable assertion: assertEquals(true, context0.isGeneratingSource());
      //  // Unstable assertion: assertEquals(false, contextFactory0.hasExplicitGlobal());
      //  // Unstable assertion: assertEquals(false, contextFactory0.isSealed());
      //  // Unstable assertion: assertFalse(context0.generateObserverCount);
      //  // Unstable assertion: assertNotNull(context0);
      
      Comment comment0 = new Comment(int0, int0, token_CommentType0, string0);
      //  // Unstable assertion: assertEquals(false, comment0.isParsed());
      //  // Unstable assertion: assertEquals("161", comment0.toString());
      //  // Unstable assertion: assertEquals("Su6", comment0.getValue());
      //  // Unstable assertion: assertEquals(100, comment0.getLength());
      //  // Unstable assertion: assertEquals(100, comment0.getPosition());
      //  // Unstable assertion: assertEquals(161, comment0.getType());
      //  // Unstable assertion: assertEquals(0, comment0.depth());
      //  // Unstable assertion: assertNull(comment0.getJsDoc());
      //  // Unstable assertion: assertEquals(Token.CommentType.JSDOC, comment0.getCommentType());
      //  // Unstable assertion: assertEquals(false, comment0.hasChildren());
      //  // Unstable assertion: assertEquals(-1, comment0.getLineno());
      //  // Unstable assertion: assertEquals(100, comment0.getAbsolutePosition());
      //  // Unstable assertion: assertNotNull(comment0);
      
      astRoot0.setJsDocNode(comment0);
      //  // Unstable assertion: assertEquals(false, comment0.isParsed());
      //  // Unstable assertion: assertEquals("161", comment0.toString());
      //  // Unstable assertion: assertEquals("Su6", comment0.getValue());
      //  // Unstable assertion: assertEquals(100, comment0.getLength());
      //  // Unstable assertion: assertEquals(100, comment0.getPosition());
      //  // Unstable assertion: assertEquals(161, comment0.getType());
      //  // Unstable assertion: assertEquals(0, comment0.depth());
      //  // Unstable assertion: assertNull(comment0.getJsDoc());
      //  // Unstable assertion: assertEquals(Token.CommentType.JSDOC, comment0.getCommentType());
      //  // Unstable assertion: assertEquals(false, comment0.hasChildren());
      //  // Unstable assertion: assertEquals(-1, comment0.getLineno());
      //  // Unstable assertion: assertEquals(100, comment0.getAbsolutePosition());
      //  // Unstable assertion: assertEquals(100, astRoot0.getPosition());
      //  // Unstable assertion: assertEquals(-1, astRoot0.getEncodedSourceEnd());
      //  // Unstable assertion: assertEquals(-1, astRoot0.getEndLineno());
      //  // Unstable assertion: assertEquals(0, astRoot0.getRegexpCount());
      //  // Unstable assertion: assertEquals(100, astRoot0.getAbsolutePosition());
      //  // Unstable assertion: assertEquals(1, astRoot0.getLength());
      //  // Unstable assertion: assertNull(astRoot0.getSourceName());
      //  // Unstable assertion: assertEquals(0, astRoot0.getFunctionCount());
      //  // Unstable assertion: assertEquals(false, astRoot0.hasChildren());
      //  // Unstable assertion: assertEquals(0, astRoot0.depth());
      //  // Unstable assertion: assertEquals(-1, astRoot0.getBaseLineno());
      //  // Unstable assertion: assertEquals(0, astRoot0.getParamCount());
      //  // Unstable assertion: assertEquals(-1, astRoot0.getLineno());
      //  // Unstable assertion: assertEquals(false, astRoot0.isInStrictMode());
      //  // Unstable assertion: assertEquals(-1, astRoot0.getEncodedSourceStart());
      //  // Unstable assertion: assertNull(astRoot0.getEncodedSource());
      //  // Unstable assertion: assertEquals("136", astRoot0.toString());
      //  // Unstable assertion: assertEquals(136, astRoot0.getType());
      //  // Unstable assertion: assertEquals("Su6", astRoot0.getJsDoc());
      
      Config config0 = new Config(treeSet0, treeSet0, context0.generateObserverCount, context0.generateObserverCount, context0.generateObserverCount);
      //  // Unstable assertion: assertEquals("[]", treeSet0.toString());
      //  // Unstable assertion: assertEquals(true, context0.isSealed());
      //  // Unstable assertion: assertEquals(false, context0.hasCompileFunctionsWithDynamicScope());
      //  // Unstable assertion: assertEquals(false, context0.isGeneratingDebugChanged());
      //  // Unstable assertion: assertEquals(0, context0.getOptimizationLevel());
      //  // Unstable assertion: assertEquals(0, context0.getLanguageVersion());
      //  // Unstable assertion: assertEquals(false, context0.isGeneratingDebug());
      //  // Unstable assertion: assertEquals(0, context0.getInstructionObserverThreshold());
      //  // Unstable assertion: assertEquals(2147483647, context0.getMaximumInterpreterStackDepth());
      //  // Unstable assertion: assertEquals(true, context0.isGeneratingSource());
      //  // Unstable assertion: assertEquals(false, contextFactory0.hasExplicitGlobal());
      //  // Unstable assertion: assertEquals(false, contextFactory0.isSealed());
      //  // Unstable assertion: assertFalse(context0.generateObserverCount);
      //  // Unstable assertion: assertNotNull(config0);
      
      ToolErrorReporter toolErrorReporter0 = new ToolErrorReporter(context0.generateObserverCount);
      //  // Unstable assertion: assertEquals(false, toolErrorReporter0.hasReportedError());
      //  // Unstable assertion: assertEquals(false, toolErrorReporter0.isReportingWarnings());
      //  // Unstable assertion: assertEquals(true, context0.isSealed());
      //  // Unstable assertion: assertEquals(false, context0.hasCompileFunctionsWithDynamicScope());
      //  // Unstable assertion: assertEquals(false, context0.isGeneratingDebugChanged());
      //  // Unstable assertion: assertEquals(0, context0.getOptimizationLevel());
      //  // Unstable assertion: assertEquals(0, context0.getLanguageVersion());
      //  // Unstable assertion: assertEquals(false, context0.isGeneratingDebug());
      //  // Unstable assertion: assertEquals(0, context0.getInstructionObserverThreshold());
      //  // Unstable assertion: assertEquals(2147483647, context0.getMaximumInterpreterStackDepth());
      //  // Unstable assertion: assertEquals(true, context0.isGeneratingSource());
      //  // Unstable assertion: assertEquals(false, contextFactory0.hasExplicitGlobal());
      //  // Unstable assertion: assertEquals(false, contextFactory0.isSealed());
      //  // Unstable assertion: assertFalse(context0.generateObserverCount);
      //  // Unstable assertion: assertNotNull(toolErrorReporter0);
      
      Node node0 = IRFactory.transformTree(astRoot0, string0, config0, (ErrorReporter) toolErrorReporter0);
      //  // Unstable assertion: assertEquals("[]", treeSet0.toString());
      //  // Unstable assertion: assertEquals(false, node0.hasMoreThanOneChild());
      //  // Unstable assertion: assertEquals(false, node0.isVarArgs());
      //  // Unstable assertion: assertEquals(false, node0.hasOneChild());
      //  // Unstable assertion: assertEquals(0, node0.getChildCount());
      //  // Unstable assertion: assertEquals(132, node0.getType());
      //  // Unstable assertion: assertEquals(false, node0.isQuotedString());
      //  // Unstable assertion: assertEquals(false, node0.hasChildren());
      //  // Unstable assertion: assertEquals(false, node0.isSyntheticBlock());
      //  // Unstable assertion: assertEquals(false, node0.isQualifiedName());
      //  // Unstable assertion: assertEquals(false, node0.isOptionalArg());
      //  // Unstable assertion: assertEquals(-1, node0.getLineno());
      //  // Unstable assertion: assertEquals(false, node0.isOnlyModifiesThisCall());
      //  // Unstable assertion: assertEquals(0, node0.getSideEffectFlags());
      //  // Unstable assertion: assertEquals(-1, node0.getCharno());
      //  // Unstable assertion: assertEquals(false, node0.isLocalResultCall());
      //  // Unstable assertion: assertEquals(false, node0.wasEmptyNode());
      //  // Unstable assertion: assertEquals(false, node0.isNoSideEffectsCall());
      //  // Unstable assertion: assertEquals(false, node0.isUnscopedQualifiedName());
      //  // Unstable assertion: assertEquals(100, astRoot0.getPosition());
      //  // Unstable assertion: assertEquals(-1, astRoot0.getEncodedSourceEnd());
      //  // Unstable assertion: assertEquals(-1, astRoot0.getEndLineno());
      //  // Unstable assertion: assertEquals(0, astRoot0.getRegexpCount());
      //  // Unstable assertion: assertEquals(100, astRoot0.getAbsolutePosition());
      //  // Unstable assertion: assertEquals(1, astRoot0.getLength());
      //  // Unstable assertion: assertNull(astRoot0.getSourceName());
      //  // Unstable assertion: assertEquals(0, astRoot0.getFunctionCount());
      //  // Unstable assertion: assertEquals(false, astRoot0.hasChildren());
      //  // Unstable assertion: assertEquals(0, astRoot0.depth());
      //  // Unstable assertion: assertEquals(-1, astRoot0.getBaseLineno());
      //  // Unstable assertion: assertEquals(0, astRoot0.getParamCount());
      //  // Unstable assertion: assertEquals(-1, astRoot0.getLineno());
      //  // Unstable assertion: assertEquals(false, astRoot0.isInStrictMode());
      //  // Unstable assertion: assertEquals(-1, astRoot0.getEncodedSourceStart());
      //  // Unstable assertion: assertNull(astRoot0.getEncodedSource());
      //  // Unstable assertion: assertEquals("136", astRoot0.toString());
      //  // Unstable assertion: assertEquals(136, astRoot0.getType());
      //  // Unstable assertion: assertEquals("Su6", astRoot0.getJsDoc());
      //  // Unstable assertion: assertEquals(false, toolErrorReporter0.hasReportedError());
      //  // Unstable assertion: assertEquals(false, toolErrorReporter0.isReportingWarnings());
      //  // Unstable assertion: assertEquals(true, context0.isSealed());
      //  // Unstable assertion: assertEquals(false, context0.hasCompileFunctionsWithDynamicScope());
      //  // Unstable assertion: assertEquals(false, context0.isGeneratingDebugChanged());
      //  // Unstable assertion: assertEquals(0, context0.getOptimizationLevel());
      //  // Unstable assertion: assertEquals(0, context0.getLanguageVersion());
      //  // Unstable assertion: assertEquals(false, context0.isGeneratingDebug());
      //  // Unstable assertion: assertEquals(0, context0.getInstructionObserverThreshold());
      //  // Unstable assertion: assertEquals(2147483647, context0.getMaximumInterpreterStackDepth());
      //  // Unstable assertion: assertEquals(true, context0.isGeneratingSource());
      //  // Unstable assertion: assertEquals(false, contextFactory0.hasExplicitGlobal());
      //  // Unstable assertion: assertEquals(false, contextFactory0.isSealed());
      //  // Unstable assertion: assertFalse(context0.generateObserverCount);
      //  // Unstable assertion: assertNotNull(node0);
  }

  @Test
  public void test3()  throws Throwable  {
      int int0 = (-1575);
      AstRoot astRoot0 = new AstRoot(int0);
      assertEquals(false, astRoot0.isInStrictMode());
      assertEquals(-1575, astRoot0.getPosition());
      assertEquals(1, astRoot0.getLength());
      assertEquals(0, astRoot0.depth());
      assertEquals(-1575, astRoot0.getAbsolutePosition());
      assertEquals(0, astRoot0.getRegexpCount());
      assertNull(astRoot0.getJsDoc());
      assertEquals(136, astRoot0.getType());
      assertNull(astRoot0.getEncodedSource());
      assertEquals(false, astRoot0.hasChildren());
      assertNull(astRoot0.getSourceName());
      assertEquals(0, astRoot0.getParamCount());
      assertEquals(-1, astRoot0.getEncodedSourceEnd());
      assertEquals(-1, astRoot0.getBaseLineno());
      assertEquals("136", astRoot0.toString());
      assertEquals(0, astRoot0.getFunctionCount());
      assertEquals(-1, astRoot0.getLineno());
      assertEquals(-1, astRoot0.getEncodedSourceStart());
      assertEquals(-1, astRoot0.getEndLineno());
      assertNotNull(astRoot0);
      
      String string0 = "setters are not supported in Internet Explorer";
      EvoSuiteFile evoSuiteFile0 = null;
      boolean boolean0 = FileSystemHandling.appendStringToFile(evoSuiteFile0, string0);
      assertFalse(boolean0);
      
      TreeSet<String> treeSet0 = new TreeSet<String>();
      assertEquals("[]", treeSet0.toString());
      assertNotNull(treeSet0);
      
      Token.CommentType token_CommentType0 = Token.CommentType.JSDOC;
      Comment comment0 = new Comment(int0, int0, token_CommentType0, string0);
      assertEquals(false, comment0.hasChildren());
      assertEquals(Token.CommentType.JSDOC, comment0.getCommentType());
      assertEquals(-1, comment0.getLineno());
      assertEquals(false, comment0.isParsed());
      assertNull(comment0.getJsDoc());
      assertEquals(161, comment0.getType());
      assertEquals(0, comment0.depth());
      assertEquals("setters are not supported in Internet Explorer", comment0.getValue());
      assertEquals(-1575, comment0.getPosition());
      assertEquals(-1575, comment0.getLength());
      assertEquals(-1575, comment0.getAbsolutePosition());
      assertEquals("161", comment0.toString());
      assertNotNull(comment0);
      
      astRoot0.addComment(comment0);
      assertEquals(false, astRoot0.isInStrictMode());
      assertEquals(-1575, astRoot0.getPosition());
      assertEquals(1, astRoot0.getLength());
      assertEquals(0, astRoot0.depth());
      assertEquals(-1575, astRoot0.getAbsolutePosition());
      assertEquals(0, astRoot0.getRegexpCount());
      assertNull(astRoot0.getJsDoc());
      assertEquals(136, astRoot0.getType());
      assertNull(astRoot0.getEncodedSource());
      assertEquals(false, astRoot0.hasChildren());
      assertNull(astRoot0.getSourceName());
      assertEquals(0, astRoot0.getParamCount());
      assertEquals(-1, astRoot0.getEncodedSourceEnd());
      assertEquals(-1, astRoot0.getBaseLineno());
      assertEquals("136", astRoot0.toString());
      assertEquals(0, astRoot0.getFunctionCount());
      assertEquals(-1, astRoot0.getLineno());
      assertEquals(-1, astRoot0.getEncodedSourceStart());
      assertEquals(-1, astRoot0.getEndLineno());
      assertEquals(false, comment0.hasChildren());
      assertEquals(Token.CommentType.JSDOC, comment0.getCommentType());
      assertEquals(-1, comment0.getLineno());
      assertEquals(false, comment0.isParsed());
      assertNull(comment0.getJsDoc());
      assertEquals(1, comment0.depth());
      assertEquals(161, comment0.getType());
      assertEquals("setters are not supported in Internet Explorer", comment0.getValue());
      assertEquals(-1575, comment0.getLength());
      assertEquals(-1575, comment0.getAbsolutePosition());
      assertEquals("161", comment0.toString());
      assertEquals(0, comment0.getPosition());
      
      Config config0 = new Config(treeSet0, treeSet0, boolean0, boolean0, boolean0);
      assertEquals("[]", treeSet0.toString());
      assertNotNull(config0);
      
      ToolErrorReporter toolErrorReporter0 = new ToolErrorReporter(boolean0);
      assertEquals(false, toolErrorReporter0.hasReportedError());
      assertEquals(false, toolErrorReporter0.isReportingWarnings());
      assertNotNull(toolErrorReporter0);
      
      Node node0 = IRFactory.transformTree(astRoot0, string0, config0, (ErrorReporter) toolErrorReporter0);
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(0, node0.getChildCount());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(132, node0.getType());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, toolErrorReporter0.hasReportedError());
      assertEquals(false, toolErrorReporter0.isReportingWarnings());
      assertEquals("[]", treeSet0.toString());
      assertEquals(false, astRoot0.isInStrictMode());
      assertEquals(-1575, astRoot0.getPosition());
      assertEquals(1, astRoot0.getLength());
      assertEquals(0, astRoot0.depth());
      assertEquals(-1575, astRoot0.getAbsolutePosition());
      assertEquals(0, astRoot0.getRegexpCount());
      assertNull(astRoot0.getJsDoc());
      assertEquals(136, astRoot0.getType());
      assertNull(astRoot0.getEncodedSource());
      assertEquals(false, astRoot0.hasChildren());
      assertNull(astRoot0.getSourceName());
      assertEquals(0, astRoot0.getParamCount());
      assertEquals(-1, astRoot0.getEncodedSourceEnd());
      assertEquals(-1, astRoot0.getBaseLineno());
      assertEquals("136", astRoot0.toString());
      assertEquals(0, astRoot0.getFunctionCount());
      assertEquals(-1, astRoot0.getLineno());
      assertEquals(-1, astRoot0.getEncodedSourceStart());
      assertEquals(-1, astRoot0.getEndLineno());
      assertNotNull(node0);
      
      Node node1 = IRFactory.transformTree(astRoot0, string0, config0, (ErrorReporter) toolErrorReporter0);
      assertEquals(false, toolErrorReporter0.hasReportedError());
      assertEquals(false, toolErrorReporter0.isReportingWarnings());
      assertEquals("[]", treeSet0.toString());
      assertEquals(false, node1.hasChildren());
      assertEquals(false, node1.isVarArgs());
      assertEquals(-1, node1.getLineno());
      assertEquals(132, node1.getType());
      assertEquals(false, node1.isQualifiedName());
      assertEquals(false, node1.isNoSideEffectsCall());
      assertEquals(-1, node1.getCharno());
      assertEquals(0, node1.getChildCount());
      assertEquals(false, node1.isUnscopedQualifiedName());
      assertEquals(false, node1.isLocalResultCall());
      assertEquals(false, node1.isOptionalArg());
      assertEquals(0, node1.getSideEffectFlags());
      assertEquals(false, node1.wasEmptyNode());
      assertEquals(false, node1.isQuotedString());
      assertEquals(false, node1.hasMoreThanOneChild());
      assertEquals(false, node1.isSyntheticBlock());
      assertEquals(false, node1.isOnlyModifiesThisCall());
      assertEquals(false, node1.hasOneChild());
      assertEquals(false, astRoot0.isInStrictMode());
      assertEquals(-1575, astRoot0.getPosition());
      assertEquals(1, astRoot0.getLength());
      assertEquals(0, astRoot0.depth());
      assertEquals(-1575, astRoot0.getAbsolutePosition());
      assertEquals(0, astRoot0.getRegexpCount());
      assertNull(astRoot0.getJsDoc());
      assertEquals(136, astRoot0.getType());
      assertNull(astRoot0.getEncodedSource());
      assertEquals(false, astRoot0.hasChildren());
      assertNull(astRoot0.getSourceName());
      assertEquals(0, astRoot0.getParamCount());
      assertEquals(-1, astRoot0.getEncodedSourceEnd());
      assertEquals(-1, astRoot0.getBaseLineno());
      assertEquals("136", astRoot0.toString());
      assertEquals(0, astRoot0.getFunctionCount());
      assertEquals(-1, astRoot0.getLineno());
      assertEquals(-1, astRoot0.getEncodedSourceStart());
      assertEquals(-1, astRoot0.getEndLineno());
      assertNotSame(node1, node0);
      assertFalse(node1.equals((Object)node0));
      assertNotNull(node1);
  }

  @Test
  public void test4()  throws Throwable  {
      int int0 = 1925;
      AstRoot astRoot0 = new AstRoot(int0);
      assertEquals(0, astRoot0.depth());
      assertEquals("136", astRoot0.toString());
      assertEquals(0, astRoot0.getParamCount());
      assertEquals(0, astRoot0.getRegexpCount());
      assertEquals(1925, astRoot0.getPosition());
      assertEquals(-1, astRoot0.getBaseLineno());
      assertNull(astRoot0.getSourceName());
      assertEquals(1925, astRoot0.getAbsolutePosition());
      assertNull(astRoot0.getJsDoc());
      assertEquals(0, astRoot0.getFunctionCount());
      assertEquals(-1, astRoot0.getLineno());
      assertEquals(1, astRoot0.getLength());
      assertEquals(-1, astRoot0.getEncodedSourceEnd());
      assertEquals(-1, astRoot0.getEncodedSourceStart());
      assertEquals(false, astRoot0.isInStrictMode());
      assertEquals(-1, astRoot0.getEndLineno());
      assertEquals(false, astRoot0.hasChildren());
      assertEquals(136, astRoot0.getType());
      assertNull(astRoot0.getEncodedSource());
      assertNotNull(astRoot0);
      
      String string0 = "|OJ}d-";
      TreeSet<String> treeSet0 = new TreeSet<String>();
      assertEquals("[]", treeSet0.toString());
      assertNotNull(treeSet0);
      
      boolean boolean0 = true;
      Config config0 = new Config(treeSet0, treeSet0, boolean0, boolean0, boolean0);
      assertEquals("[]", treeSet0.toString());
      assertNotNull(config0);
      
      Token.CommentType token_CommentType0 = Token.CommentType.HTML;
      Comment comment0 = new Comment(int0, int0, token_CommentType0, string0);
      assertEquals(1925, comment0.getAbsolutePosition());
      assertEquals(1925, comment0.getPosition());
      assertEquals(false, comment0.isParsed());
      assertEquals(161, comment0.getType());
      assertEquals(0, comment0.depth());
      assertEquals("161", comment0.toString());
      assertEquals(false, comment0.hasChildren());
      assertEquals(1925, comment0.getLength());
      assertEquals(-1, comment0.getLineno());
      assertNull(comment0.getJsDoc());
      assertEquals("|OJ}d-", comment0.getValue());
      assertEquals(Token.CommentType.HTML, comment0.getCommentType());
      assertNotNull(comment0);
      
      astRoot0.addComment(comment0);
      assertEquals(1925, comment0.getAbsolutePosition());
      assertEquals(false, comment0.isParsed());
      assertEquals(161, comment0.getType());
      assertEquals("161", comment0.toString());
      assertEquals(false, comment0.hasChildren());
      assertEquals(1, comment0.depth());
      assertEquals(1925, comment0.getLength());
      assertEquals(-1, comment0.getLineno());
      assertNull(comment0.getJsDoc());
      assertEquals(0, comment0.getPosition());
      assertEquals("|OJ}d-", comment0.getValue());
      assertEquals(Token.CommentType.HTML, comment0.getCommentType());
      assertEquals(0, astRoot0.depth());
      assertEquals("136", astRoot0.toString());
      assertEquals(0, astRoot0.getParamCount());
      assertEquals(0, astRoot0.getRegexpCount());
      assertEquals(1925, astRoot0.getPosition());
      assertEquals(-1, astRoot0.getBaseLineno());
      assertNull(astRoot0.getSourceName());
      assertEquals(1925, astRoot0.getAbsolutePosition());
      assertNull(astRoot0.getJsDoc());
      assertEquals(0, astRoot0.getFunctionCount());
      assertEquals(-1, astRoot0.getLineno());
      assertEquals(1, astRoot0.getLength());
      assertEquals(-1, astRoot0.getEncodedSourceEnd());
      assertEquals(-1, astRoot0.getEncodedSourceStart());
      assertEquals(false, astRoot0.isInStrictMode());
      assertEquals(-1, astRoot0.getEndLineno());
      assertEquals(false, astRoot0.hasChildren());
      assertEquals(136, astRoot0.getType());
      assertNull(astRoot0.getEncodedSource());
      
      ToolErrorReporter toolErrorReporter0 = new ToolErrorReporter(boolean0);
      assertEquals(true, toolErrorReporter0.isReportingWarnings());
      assertEquals(false, toolErrorReporter0.hasReportedError());
      assertNotNull(toolErrorReporter0);
      
      Node node0 = IRFactory.transformTree(astRoot0, string0, config0, (ErrorReporter) toolErrorReporter0);
      assertEquals("[]", treeSet0.toString());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isQuotedString());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.hasChildren());
      assertEquals(132, node0.getType());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(-1, node0.getLineno());
      assertEquals(true, toolErrorReporter0.isReportingWarnings());
      assertEquals(false, toolErrorReporter0.hasReportedError());
      assertEquals(0, astRoot0.depth());
      assertEquals("136", astRoot0.toString());
      assertEquals(0, astRoot0.getParamCount());
      assertEquals(0, astRoot0.getRegexpCount());
      assertEquals(1925, astRoot0.getPosition());
      assertEquals(-1, astRoot0.getBaseLineno());
      assertNull(astRoot0.getSourceName());
      assertEquals(1925, astRoot0.getAbsolutePosition());
      assertNull(astRoot0.getJsDoc());
      assertEquals(0, astRoot0.getFunctionCount());
      assertEquals(-1, astRoot0.getLineno());
      assertEquals(1, astRoot0.getLength());
      assertEquals(-1, astRoot0.getEncodedSourceEnd());
      assertEquals(-1, astRoot0.getEncodedSourceStart());
      assertEquals(false, astRoot0.isInStrictMode());
      assertEquals(-1, astRoot0.getEndLineno());
      assertEquals(false, astRoot0.hasChildren());
      assertEquals(136, astRoot0.getType());
      assertNull(astRoot0.getEncodedSource());
      assertNotNull(node0);
  }

  @Test
  public void test5()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      int int0 = 8230;
      AstRoot astRoot0 = new AstRoot(int0);
      assertEquals(0, astRoot0.getParamCount());
      assertEquals(0, astRoot0.getRegexpCount());
      assertEquals(-1, astRoot0.getEndLineno());
      assertEquals(-1, astRoot0.getBaseLineno());
      assertEquals(false, astRoot0.isInStrictMode());
      assertEquals(0, astRoot0.depth());
      assertEquals(1, astRoot0.getLength());
      assertEquals(136, astRoot0.getType());
      assertEquals(-1, astRoot0.getEncodedSourceStart());
      assertNull(astRoot0.getSourceName());
      assertEquals("136", astRoot0.toString());
      assertEquals(8230, astRoot0.getPosition());
      assertEquals(0, astRoot0.getFunctionCount());
      assertEquals(-1, astRoot0.getEncodedSourceEnd());
      assertEquals(false, astRoot0.hasChildren());
      assertEquals(-1, astRoot0.getLineno());
      assertEquals(8230, astRoot0.getAbsolutePosition());
      assertNull(astRoot0.getEncodedSource());
      assertNull(astRoot0.getJsDoc());
      assertNotNull(astRoot0);
      
      String string0 = "s";
      RegExpLiteral regExpLiteral0 = new RegExpLiteral();
      assertEquals(0, regExpLiteral0.depth());
      assertEquals(1, regExpLiteral0.getLength());
      assertEquals(-1, regExpLiteral0.getAbsolutePosition());
      assertNull(regExpLiteral0.getJsDoc());
      assertNull(regExpLiteral0.getFlags());
      assertEquals("48", regExpLiteral0.toString());
      assertEquals(-1, regExpLiteral0.getLineno());
      assertEquals(false, regExpLiteral0.hasChildren());
      assertEquals(-1, regExpLiteral0.getPosition());
      assertEquals(48, regExpLiteral0.getType());
      assertNull(regExpLiteral0.getValue());
      assertNotNull(regExpLiteral0);
      
      astRoot0.addChild((AstNode) regExpLiteral0);
      assertEquals(0, astRoot0.getParamCount());
      assertEquals(0, astRoot0.getRegexpCount());
      assertEquals(-1, astRoot0.getEndLineno());
      assertEquals(true, astRoot0.hasChildren());
      assertEquals(-1, astRoot0.getBaseLineno());
      assertEquals(false, astRoot0.isInStrictMode());
      assertEquals(0, astRoot0.depth());
      assertEquals(136, astRoot0.getType());
      assertEquals(-1, astRoot0.getEncodedSourceStart());
      assertNull(astRoot0.getSourceName());
      assertEquals("136", astRoot0.toString());
      assertEquals(8230, astRoot0.getPosition());
      assertEquals(0, astRoot0.getFunctionCount());
      assertEquals(-8230, astRoot0.getLength());
      assertEquals(-1, astRoot0.getEncodedSourceEnd());
      assertEquals(-1, astRoot0.getLineno());
      assertEquals(8230, astRoot0.getAbsolutePosition());
      assertNull(astRoot0.getEncodedSource());
      assertNull(astRoot0.getJsDoc());
      assertEquals(1, regExpLiteral0.getLength());
      assertEquals(1, regExpLiteral0.depth());
      assertEquals(-1, regExpLiteral0.getAbsolutePosition());
      assertNull(regExpLiteral0.getJsDoc());
      assertNull(regExpLiteral0.getFlags());
      assertEquals("48", regExpLiteral0.toString());
      assertEquals(-1, regExpLiteral0.getLineno());
      assertEquals(false, regExpLiteral0.hasChildren());
      assertEquals(-8231, regExpLiteral0.getPosition());
      assertEquals(48, regExpLiteral0.getType());
      assertNull(regExpLiteral0.getValue());
      
      regExpLiteral0.setValue(string0);
      assertEquals(1, regExpLiteral0.getLength());
      assertEquals(1, regExpLiteral0.depth());
      assertEquals(-1, regExpLiteral0.getAbsolutePosition());
      assertNull(regExpLiteral0.getJsDoc());
      assertNull(regExpLiteral0.getFlags());
      assertEquals("48", regExpLiteral0.toString());
      assertEquals(-1, regExpLiteral0.getLineno());
      assertEquals("s", regExpLiteral0.getValue());
      assertEquals(false, regExpLiteral0.hasChildren());
      assertEquals(-8231, regExpLiteral0.getPosition());
      assertEquals(48, regExpLiteral0.getType());
      
      TreeSet<String> treeSet0 = new TreeSet<String>();
      assertEquals("[]", treeSet0.toString());
      assertNotNull(treeSet0);
      
      Config config0 = new Config(treeSet0, treeSet0, boolean0, boolean0, boolean0);
      assertEquals("[]", treeSet0.toString());
      assertNotNull(config0);
      
      PrintStream printStream0 = null;
      ToolErrorReporter toolErrorReporter0 = new ToolErrorReporter(boolean0, printStream0);
      assertEquals(true, toolErrorReporter0.isReportingWarnings());
      assertEquals(false, toolErrorReporter0.hasReportedError());
      assertNotNull(toolErrorReporter0);
      
      Node node0 = IRFactory.transformTree(astRoot0, string0, config0, (ErrorReporter) toolErrorReporter0);
      assertEquals(true, toolErrorReporter0.isReportingWarnings());
      assertEquals(false, toolErrorReporter0.hasReportedError());
      assertEquals(0, astRoot0.getParamCount());
      assertEquals(0, astRoot0.getRegexpCount());
      assertEquals(-1, astRoot0.getEndLineno());
      assertEquals(true, astRoot0.hasChildren());
      assertEquals(-1, astRoot0.getBaseLineno());
      assertEquals(false, astRoot0.isInStrictMode());
      assertEquals(0, astRoot0.depth());
      assertEquals(136, astRoot0.getType());
      assertEquals(-1, astRoot0.getEncodedSourceStart());
      assertNull(astRoot0.getSourceName());
      assertEquals("136", astRoot0.toString());
      assertEquals(8230, astRoot0.getPosition());
      assertEquals(0, astRoot0.getFunctionCount());
      assertEquals(-8230, astRoot0.getLength());
      assertEquals(-1, astRoot0.getEncodedSourceEnd());
      assertEquals(-1, astRoot0.getLineno());
      assertEquals(8230, astRoot0.getAbsolutePosition());
      assertNull(astRoot0.getEncodedSource());
      assertNull(astRoot0.getJsDoc());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(-1, node0.getLineno());
      assertEquals(1, node0.getChildCount());
      assertEquals(132, node0.getType());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(true, node0.hasChildren());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isQuotedString());
      assertEquals(true, node0.hasOneChild());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals("[]", treeSet0.toString());
      assertNotNull(node0);
  }

  @Test
  public void test6()  throws Throwable  {
      int int0 = 85;
      AstRoot astRoot0 = new AstRoot(int0);
      assertNull(astRoot0.getEncodedSource());
      assertEquals("136", astRoot0.toString());
      assertEquals(-1, astRoot0.getLineno());
      assertEquals(136, astRoot0.getType());
      assertEquals(-1, astRoot0.getBaseLineno());
      assertNull(astRoot0.getJsDoc());
      assertEquals(0, astRoot0.getFunctionCount());
      assertEquals(85, astRoot0.getAbsolutePosition());
      assertEquals(0, astRoot0.depth());
      assertEquals(-1, astRoot0.getEncodedSourceEnd());
      assertEquals(false, astRoot0.hasChildren());
      assertEquals(-1, astRoot0.getEncodedSourceStart());
      assertEquals(85, astRoot0.getPosition());
      assertNull(astRoot0.getSourceName());
      assertEquals(1, astRoot0.getLength());
      assertEquals(0, astRoot0.getRegexpCount());
      assertEquals(-1, astRoot0.getEndLineno());
      assertEquals(0, astRoot0.getParamCount());
      assertEquals(false, astRoot0.isInStrictMode());
      assertNotNull(astRoot0);
      
      String string0 = "S-u6";
      ArrayComprehensionLoop arrayComprehensionLoop0 = new ArrayComprehensionLoop(int0);
      assertEquals(-1, arrayComprehensionLoop0.getLp());
      assertEquals(1, arrayComprehensionLoop0.getLength());
      assertEquals(-1, arrayComprehensionLoop0.getLineno());
      assertEquals(-1, arrayComprehensionLoop0.getEachPosition());
      assertEquals(false, arrayComprehensionLoop0.hasChildren());
      assertEquals("119", arrayComprehensionLoop0.toString());
      assertEquals(0, arrayComprehensionLoop0.depth());
      assertNull(arrayComprehensionLoop0.getJsDoc());
      assertEquals(119, arrayComprehensionLoop0.getType());
      assertEquals(false, arrayComprehensionLoop0.isForEach());
      assertEquals(85, arrayComprehensionLoop0.getAbsolutePosition());
      assertEquals(-1, arrayComprehensionLoop0.getRp());
      assertEquals(-1, arrayComprehensionLoop0.getInPosition());
      assertEquals(85, arrayComprehensionLoop0.getPosition());
      assertNotNull(arrayComprehensionLoop0);
      
      astRoot0.addChildrenToBack((com.google.javascript.jscomp.mozilla.rhino.Node) arrayComprehensionLoop0);
      assertEquals(-1, arrayComprehensionLoop0.getLp());
      assertEquals(1, arrayComprehensionLoop0.getLength());
      assertEquals(-1, arrayComprehensionLoop0.getLineno());
      assertEquals(-1, arrayComprehensionLoop0.getEachPosition());
      assertEquals(false, arrayComprehensionLoop0.hasChildren());
      assertEquals("119", arrayComprehensionLoop0.toString());
      assertEquals(0, arrayComprehensionLoop0.depth());
      assertNull(arrayComprehensionLoop0.getJsDoc());
      assertEquals(119, arrayComprehensionLoop0.getType());
      assertEquals(false, arrayComprehensionLoop0.isForEach());
      assertEquals(85, arrayComprehensionLoop0.getAbsolutePosition());
      assertEquals(-1, arrayComprehensionLoop0.getRp());
      assertEquals(-1, arrayComprehensionLoop0.getInPosition());
      assertEquals(85, arrayComprehensionLoop0.getPosition());
      assertNull(astRoot0.getEncodedSource());
      assertEquals("136", astRoot0.toString());
      assertEquals(-1, astRoot0.getLineno());
      assertEquals(136, astRoot0.getType());
      assertEquals(-1, astRoot0.getBaseLineno());
      assertNull(astRoot0.getJsDoc());
      assertEquals(0, astRoot0.getFunctionCount());
      assertEquals(true, astRoot0.hasChildren());
      assertEquals(85, astRoot0.getAbsolutePosition());
      assertEquals(0, astRoot0.depth());
      assertEquals(-1, astRoot0.getEncodedSourceEnd());
      assertEquals(-1, astRoot0.getEncodedSourceStart());
      assertEquals(85, astRoot0.getPosition());
      assertNull(astRoot0.getSourceName());
      assertEquals(1, astRoot0.getLength());
      assertEquals(0, astRoot0.getRegexpCount());
      assertEquals(-1, astRoot0.getEndLineno());
      assertEquals(0, astRoot0.getParamCount());
      assertEquals(false, astRoot0.isInStrictMode());
      
      TreeSet<String> treeSet0 = new TreeSet<String>();
      assertEquals("[]", treeSet0.toString());
      assertNotNull(treeSet0);
      
      boolean boolean0 = true;
      Config config0 = new Config(treeSet0, treeSet0, boolean0, boolean0, boolean0);
      assertEquals("[]", treeSet0.toString());
      assertNotNull(config0);
      
      ToolErrorReporter toolErrorReporter0 = new ToolErrorReporter(boolean0);
      assertEquals(false, toolErrorReporter0.hasReportedError());
      assertEquals(true, toolErrorReporter0.isReportingWarnings());
      assertNotNull(toolErrorReporter0);
      
      // Undeclared exception!
      try {
        Node node0 = IRFactory.transformTree(astRoot0, string0, config0, (ErrorReporter) toolErrorReporter0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test7()  throws Throwable  {
      int int0 = 1925;
      AstRoot astRoot0 = new AstRoot(int0);
      assertEquals(1, astRoot0.getLength());
      assertNull(astRoot0.getEncodedSource());
      assertEquals(-1, astRoot0.getEndLineno());
      assertNull(astRoot0.getJsDoc());
      assertEquals(-1, astRoot0.getLineno());
      assertEquals(1925, astRoot0.getPosition());
      assertNull(astRoot0.getSourceName());
      assertEquals("136", astRoot0.toString());
      assertEquals(false, astRoot0.isInStrictMode());
      assertEquals(-1, astRoot0.getEncodedSourceEnd());
      assertEquals(false, astRoot0.hasChildren());
      assertEquals(-1, astRoot0.getEncodedSourceStart());
      assertEquals(1925, astRoot0.getAbsolutePosition());
      assertEquals(-1, astRoot0.getBaseLineno());
      assertEquals(136, astRoot0.getType());
      assertEquals(0, astRoot0.getRegexpCount());
      assertEquals(0, astRoot0.depth());
      assertEquals(0, astRoot0.getFunctionCount());
      assertEquals(0, astRoot0.getParamCount());
      assertNotNull(astRoot0);
      
      String string0 = "|OJ}d-";
      TreeSet<String> treeSet0 = new TreeSet<String>();
      assertEquals("[]", treeSet0.toString());
      assertNotNull(treeSet0);
      
      boolean boolean0 = true;
      Config config0 = new Config(treeSet0, treeSet0, boolean0, boolean0, boolean0);
      assertEquals("[]", treeSet0.toString());
      assertNotNull(config0);
      
      ToolErrorReporter toolErrorReporter0 = new ToolErrorReporter(boolean0);
      assertEquals(false, toolErrorReporter0.hasReportedError());
      assertEquals(true, toolErrorReporter0.isReportingWarnings());
      assertNotNull(toolErrorReporter0);
      
      NumberLiteral numberLiteral0 = (NumberLiteral)com.google.javascript.jscomp.mozilla.rhino.Node.newNumber((double) int0);
      assertEquals(0, numberLiteral0.depth());
      assertEquals("40", numberLiteral0.toString());
      assertEquals(1, numberLiteral0.getLength());
      assertEquals(-1, numberLiteral0.getPosition());
      assertNull(numberLiteral0.getValue());
      assertEquals(-1, numberLiteral0.getLineno());
      assertNull(numberLiteral0.getJsDoc());
      assertEquals(1925.0, numberLiteral0.getNumber(), 0.01D);
      assertEquals(40, numberLiteral0.getType());
      assertEquals(false, numberLiteral0.hasChildren());
      assertEquals(-1, numberLiteral0.getAbsolutePosition());
      assertEquals(1925.0, numberLiteral0.getDouble(), 0.01D);
      assertNotNull(numberLiteral0);
      
      astRoot0.addChildToBack((com.google.javascript.jscomp.mozilla.rhino.Node) numberLiteral0);
      assertEquals(1, astRoot0.getLength());
      assertNull(astRoot0.getEncodedSource());
      assertEquals(-1, astRoot0.getEndLineno());
      assertNull(astRoot0.getJsDoc());
      assertEquals(-1, astRoot0.getLineno());
      assertEquals(1925, astRoot0.getPosition());
      assertNull(astRoot0.getSourceName());
      assertEquals("136", astRoot0.toString());
      assertEquals(false, astRoot0.isInStrictMode());
      assertEquals(-1, astRoot0.getEncodedSourceEnd());
      assertEquals(true, astRoot0.hasChildren());
      assertEquals(-1, astRoot0.getEncodedSourceStart());
      assertEquals(1925, astRoot0.getAbsolutePosition());
      assertEquals(-1, astRoot0.getBaseLineno());
      assertEquals(136, astRoot0.getType());
      assertEquals(0, astRoot0.getRegexpCount());
      assertEquals(0, astRoot0.depth());
      assertEquals(0, astRoot0.getFunctionCount());
      assertEquals(0, astRoot0.getParamCount());
      assertEquals(0, numberLiteral0.depth());
      assertEquals("40", numberLiteral0.toString());
      assertEquals(1, numberLiteral0.getLength());
      assertEquals(-1, numberLiteral0.getPosition());
      assertNull(numberLiteral0.getValue());
      assertEquals(-1, numberLiteral0.getLineno());
      assertNull(numberLiteral0.getJsDoc());
      assertEquals(1925.0, numberLiteral0.getNumber(), 0.01D);
      assertEquals(40, numberLiteral0.getType());
      assertEquals(false, numberLiteral0.hasChildren());
      assertEquals(-1, numberLiteral0.getAbsolutePosition());
      assertEquals(1925.0, numberLiteral0.getDouble(), 0.01D);
      
      Node node0 = IRFactory.transformTree(astRoot0, string0, config0, (ErrorReporter) toolErrorReporter0);
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(-1, node0.getCharno());
      assertEquals(132, node0.getType());
      assertEquals(1, node0.getChildCount());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(true, node0.hasOneChild());
      assertEquals(true, node0.hasChildren());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, toolErrorReporter0.hasReportedError());
      assertEquals(true, toolErrorReporter0.isReportingWarnings());
      assertEquals("[]", treeSet0.toString());
      assertEquals(1, astRoot0.getLength());
      assertNull(astRoot0.getEncodedSource());
      assertEquals(-1, astRoot0.getEndLineno());
      assertNull(astRoot0.getJsDoc());
      assertEquals(-1, astRoot0.getLineno());
      assertEquals(1925, astRoot0.getPosition());
      assertNull(astRoot0.getSourceName());
      assertEquals("136", astRoot0.toString());
      assertEquals(false, astRoot0.isInStrictMode());
      assertEquals(-1, astRoot0.getEncodedSourceEnd());
      assertEquals(true, astRoot0.hasChildren());
      assertEquals(-1, astRoot0.getEncodedSourceStart());
      assertEquals(1925, astRoot0.getAbsolutePosition());
      assertEquals(-1, astRoot0.getBaseLineno());
      assertEquals(136, astRoot0.getType());
      assertEquals(0, astRoot0.getRegexpCount());
      assertEquals(0, astRoot0.depth());
      assertEquals(0, astRoot0.getFunctionCount());
      assertEquals(0, astRoot0.getParamCount());
      assertNotNull(node0);
  }

  @Test
  public void test8()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      int int0 = 8230;
      AstRoot astRoot0 = new AstRoot(int0);
      assertEquals(8230, astRoot0.getPosition());
      assertEquals(8230, astRoot0.getAbsolutePosition());
      assertEquals(-1, astRoot0.getEndLineno());
      assertNull(astRoot0.getSourceName());
      assertEquals(0, astRoot0.depth());
      assertEquals(1, astRoot0.getLength());
      assertEquals(0, astRoot0.getFunctionCount());
      assertEquals(-1, astRoot0.getEncodedSourceEnd());
      assertEquals(0, astRoot0.getRegexpCount());
      assertNull(astRoot0.getJsDoc());
      assertEquals("136", astRoot0.toString());
      assertEquals(false, astRoot0.isInStrictMode());
      assertEquals(-1, astRoot0.getBaseLineno());
      assertEquals(false, astRoot0.hasChildren());
      assertEquals(-1, astRoot0.getEncodedSourceStart());
      assertNull(astRoot0.getEncodedSource());
      assertEquals(-1, astRoot0.getLineno());
      assertEquals(0, astRoot0.getParamCount());
      assertEquals(136, astRoot0.getType());
      assertNotNull(astRoot0);
      
      int int1 = astRoot0.getIntProp(int0, int0);
      assertEquals(8230, astRoot0.getPosition());
      assertEquals(8230, astRoot0.getAbsolutePosition());
      assertEquals(-1, astRoot0.getEndLineno());
      assertNull(astRoot0.getSourceName());
      assertEquals(0, astRoot0.depth());
      assertEquals(1, astRoot0.getLength());
      assertEquals(0, astRoot0.getFunctionCount());
      assertEquals(-1, astRoot0.getEncodedSourceEnd());
      assertEquals(0, astRoot0.getRegexpCount());
      assertNull(astRoot0.getJsDoc());
      assertEquals("136", astRoot0.toString());
      assertEquals(false, astRoot0.isInStrictMode());
      assertEquals(-1, astRoot0.getBaseLineno());
      assertEquals(false, astRoot0.hasChildren());
      assertEquals(-1, astRoot0.getEncodedSourceStart());
      assertNull(astRoot0.getEncodedSource());
      assertEquals(-1, astRoot0.getLineno());
      assertEquals(0, astRoot0.getParamCount());
      assertEquals(136, astRoot0.getType());
      assertEquals(8230, int1);
      assertTrue(int0 == int1);
      assertTrue(int1 == int0);
      
      String string0 = "s";
      BreakStatement breakStatement0 = new BreakStatement(int1);
      assertEquals(8230, astRoot0.getPosition());
      assertEquals(8230, astRoot0.getAbsolutePosition());
      assertEquals(-1, astRoot0.getEndLineno());
      assertNull(astRoot0.getSourceName());
      assertEquals(0, astRoot0.depth());
      assertEquals(1, astRoot0.getLength());
      assertEquals(0, astRoot0.getFunctionCount());
      assertEquals(-1, astRoot0.getEncodedSourceEnd());
      assertEquals(0, astRoot0.getRegexpCount());
      assertNull(astRoot0.getJsDoc());
      assertEquals("136", astRoot0.toString());
      assertEquals(false, astRoot0.isInStrictMode());
      assertEquals(-1, astRoot0.getBaseLineno());
      assertEquals(false, astRoot0.hasChildren());
      assertEquals(-1, astRoot0.getEncodedSourceStart());
      assertNull(astRoot0.getEncodedSource());
      assertEquals(-1, astRoot0.getLineno());
      assertEquals(0, astRoot0.getParamCount());
      assertEquals(136, astRoot0.getType());
      assertEquals("120", breakStatement0.toString());
      assertEquals(-1, breakStatement0.getLineno());
      assertEquals(8230, breakStatement0.getPosition());
      assertEquals(8230, breakStatement0.getAbsolutePosition());
      assertEquals(1, breakStatement0.getLength());
      assertNull(breakStatement0.getJsDoc());
      assertEquals(false, breakStatement0.hasChildren());
      assertEquals(120, breakStatement0.getType());
      assertEquals(0, breakStatement0.depth());
      assertTrue(int0 == int1);
      assertTrue(int1 == int0);
      assertNotNull(breakStatement0);
      
      Name name0 = new Name(int1, string0);
      assertEquals(8230, astRoot0.getPosition());
      assertEquals(8230, astRoot0.getAbsolutePosition());
      assertEquals(-1, astRoot0.getEndLineno());
      assertNull(astRoot0.getSourceName());
      assertEquals(0, astRoot0.depth());
      assertEquals(1, astRoot0.getLength());
      assertEquals(0, astRoot0.getFunctionCount());
      assertEquals(-1, astRoot0.getEncodedSourceEnd());
      assertEquals(0, astRoot0.getRegexpCount());
      assertNull(astRoot0.getJsDoc());
      assertEquals("136", astRoot0.toString());
      assertEquals(false, astRoot0.isInStrictMode());
      assertEquals(-1, astRoot0.getBaseLineno());
      assertEquals(false, astRoot0.hasChildren());
      assertEquals(-1, astRoot0.getEncodedSourceStart());
      assertNull(astRoot0.getEncodedSource());
      assertEquals(-1, astRoot0.getLineno());
      assertEquals(0, astRoot0.getParamCount());
      assertEquals(136, astRoot0.getType());
      assertEquals("39", name0.toString());
      assertEquals(-1, name0.getLineno());
      assertEquals(0, name0.depth());
      assertEquals("s", name0.getIdentifier());
      assertEquals(8230, name0.getPosition());
      assertEquals(39, name0.getType());
      assertNull(name0.getJsDoc());
      assertEquals(false, name0.hasChildren());
      assertEquals(1, name0.getLength());
      assertEquals(1, name0.length());
      assertEquals(8230, name0.getAbsolutePosition());
      assertEquals("s", name0.getString());
      assertTrue(int0 == int1);
      assertTrue(int1 == int0);
      assertNotNull(name0);
      
      breakStatement0.setBreakLabel(name0);
      assertEquals(8230, astRoot0.getPosition());
      assertEquals(8230, astRoot0.getAbsolutePosition());
      assertEquals(-1, astRoot0.getEndLineno());
      assertNull(astRoot0.getSourceName());
      assertEquals(0, astRoot0.depth());
      assertEquals(1, astRoot0.getLength());
      assertEquals(0, astRoot0.getFunctionCount());
      assertEquals(-1, astRoot0.getEncodedSourceEnd());
      assertEquals(0, astRoot0.getRegexpCount());
      assertNull(astRoot0.getJsDoc());
      assertEquals("136", astRoot0.toString());
      assertEquals(false, astRoot0.isInStrictMode());
      assertEquals(-1, astRoot0.getBaseLineno());
      assertEquals(false, astRoot0.hasChildren());
      assertEquals(-1, astRoot0.getEncodedSourceStart());
      assertNull(astRoot0.getEncodedSource());
      assertEquals(-1, astRoot0.getLineno());
      assertEquals(0, astRoot0.getParamCount());
      assertEquals(136, astRoot0.getType());
      assertEquals("39", name0.toString());
      assertEquals(-1, name0.getLineno());
      assertEquals("s", name0.getIdentifier());
      assertEquals(39, name0.getType());
      assertNull(name0.getJsDoc());
      assertEquals(0, name0.getPosition());
      assertEquals(false, name0.hasChildren());
      assertEquals(1, name0.getLength());
      assertEquals(1, name0.length());
      assertEquals(8230, name0.getAbsolutePosition());
      assertEquals("s", name0.getString());
      assertEquals(1, name0.depth());
      assertEquals("120", breakStatement0.toString());
      assertEquals(-1, breakStatement0.getLineno());
      assertEquals(8230, breakStatement0.getPosition());
      assertEquals(8230, breakStatement0.getAbsolutePosition());
      assertEquals(1, breakStatement0.getLength());
      assertNull(breakStatement0.getJsDoc());
      assertEquals(false, breakStatement0.hasChildren());
      assertEquals(120, breakStatement0.getType());
      assertEquals(0, breakStatement0.depth());
      assertTrue(int0 == int1);
      assertTrue(int1 == int0);
      
      astRoot0.addChildToBack((com.google.javascript.jscomp.mozilla.rhino.Node) breakStatement0);
      assertEquals(8230, astRoot0.getPosition());
      assertEquals(8230, astRoot0.getAbsolutePosition());
      assertEquals(-1, astRoot0.getEndLineno());
      assertNull(astRoot0.getSourceName());
      assertEquals(0, astRoot0.depth());
      assertEquals(1, astRoot0.getLength());
      assertEquals(0, astRoot0.getFunctionCount());
      assertEquals(-1, astRoot0.getEncodedSourceEnd());
      assertEquals(0, astRoot0.getRegexpCount());
      assertEquals(true, astRoot0.hasChildren());
      assertNull(astRoot0.getJsDoc());
      assertEquals("136", astRoot0.toString());
      assertEquals(false, astRoot0.isInStrictMode());
      assertEquals(-1, astRoot0.getBaseLineno());
      assertEquals(-1, astRoot0.getEncodedSourceStart());
      assertNull(astRoot0.getEncodedSource());
      assertEquals(-1, astRoot0.getLineno());
      assertEquals(0, astRoot0.getParamCount());
      assertEquals(136, astRoot0.getType());
      assertEquals("120", breakStatement0.toString());
      assertEquals(-1, breakStatement0.getLineno());
      assertEquals(8230, breakStatement0.getPosition());
      assertEquals(8230, breakStatement0.getAbsolutePosition());
      assertEquals(1, breakStatement0.getLength());
      assertNull(breakStatement0.getJsDoc());
      assertEquals(false, breakStatement0.hasChildren());
      assertEquals(120, breakStatement0.getType());
      assertEquals(0, breakStatement0.depth());
      assertTrue(int0 == int1);
      assertTrue(int1 == int0);
      
      TreeSet<String> treeSet0 = new TreeSet<String>();
      assertEquals("[]", treeSet0.toString());
      assertNotNull(treeSet0);
      
      Config config0 = new Config(treeSet0, treeSet0, boolean0, boolean0, boolean0);
      assertEquals("[]", treeSet0.toString());
      assertNotNull(config0);
      
      PrintStream printStream0 = null;
      ToolErrorReporter toolErrorReporter0 = new ToolErrorReporter(boolean0, printStream0);
      assertEquals(true, toolErrorReporter0.isReportingWarnings());
      assertEquals(false, toolErrorReporter0.hasReportedError());
      assertNotNull(toolErrorReporter0);
      
      Node node0 = IRFactory.transformTree(astRoot0, string0, config0, (ErrorReporter) toolErrorReporter0);
      assertEquals(true, toolErrorReporter0.isReportingWarnings());
      assertEquals(false, toolErrorReporter0.hasReportedError());
      assertEquals("[]", treeSet0.toString());
      assertEquals(8230, astRoot0.getPosition());
      assertEquals(8230, astRoot0.getAbsolutePosition());
      assertEquals(-1, astRoot0.getEndLineno());
      assertNull(astRoot0.getSourceName());
      assertEquals(0, astRoot0.depth());
      assertEquals(1, astRoot0.getLength());
      assertEquals(0, astRoot0.getFunctionCount());
      assertEquals(-1, astRoot0.getEncodedSourceEnd());
      assertEquals(0, astRoot0.getRegexpCount());
      assertEquals(true, astRoot0.hasChildren());
      assertNull(astRoot0.getJsDoc());
      assertEquals("136", astRoot0.toString());
      assertEquals(false, astRoot0.isInStrictMode());
      assertEquals(-1, astRoot0.getBaseLineno());
      assertEquals(-1, astRoot0.getEncodedSourceStart());
      assertNull(astRoot0.getEncodedSource());
      assertEquals(-1, astRoot0.getLineno());
      assertEquals(0, astRoot0.getParamCount());
      assertEquals(136, astRoot0.getType());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(true, node0.hasChildren());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(132, node0.getType());
      assertEquals(true, node0.hasOneChild());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isQuotedString());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(1, node0.getChildCount());
      assertTrue(int0 == int1);
      assertNotNull(node0);
  }

  @Test
  public void test9()  throws Throwable  {
      int int0 = (-1575);
      AstRoot astRoot0 = new AstRoot(int0);
      assertEquals(-1, astRoot0.getEncodedSourceStart());
      assertEquals(-1, astRoot0.getEndLineno());
      assertEquals(-1, astRoot0.getBaseLineno());
      assertNull(astRoot0.getJsDoc());
      assertEquals(1, astRoot0.getLength());
      assertEquals(false, astRoot0.isInStrictMode());
      assertEquals(false, astRoot0.hasChildren());
      assertEquals(0, astRoot0.getRegexpCount());
      assertNull(astRoot0.getSourceName());
      assertEquals(136, astRoot0.getType());
      assertEquals(-1, astRoot0.getEncodedSourceEnd());
      assertEquals(0, astRoot0.getFunctionCount());
      assertEquals("136", astRoot0.toString());
      assertEquals(-1575, astRoot0.getPosition());
      assertNull(astRoot0.getEncodedSource());
      assertEquals(0, astRoot0.depth());
      assertEquals(-1, astRoot0.getLineno());
      assertEquals(-1575, astRoot0.getAbsolutePosition());
      assertEquals(0, astRoot0.getParamCount());
      assertNotNull(astRoot0);
      
      String string0 = "setters are not supported in Internet Explorer";
      EvoSuiteFile evoSuiteFile0 = null;
      boolean boolean0 = FileSystemHandling.appendStringToFile(evoSuiteFile0, string0);
      assertFalse(boolean0);
      
      TreeSet<String> treeSet0 = new TreeSet<String>();
      assertEquals("[]", treeSet0.toString());
      assertNotNull(treeSet0);
      
      Token.CommentType token_CommentType0 = Token.CommentType.JSDOC;
      Comment comment0 = new Comment(int0, int0, token_CommentType0, string0);
      assertEquals("setters are not supported in Internet Explorer", comment0.getValue());
      assertEquals(Token.CommentType.JSDOC, comment0.getCommentType());
      assertEquals(-1, comment0.getLineno());
      assertEquals(false, comment0.isParsed());
      assertEquals("161", comment0.toString());
      assertEquals(-1575, comment0.getPosition());
      assertEquals(161, comment0.getType());
      assertEquals(0, comment0.depth());
      assertNull(comment0.getJsDoc());
      assertEquals(-1575, comment0.getAbsolutePosition());
      assertEquals(-1575, comment0.getLength());
      assertEquals(false, comment0.hasChildren());
      assertNotNull(comment0);
      
      Config config0 = new Config(treeSet0, treeSet0, boolean0, boolean0, boolean0);
      assertEquals("[]", treeSet0.toString());
      assertNotNull(config0);
      
      ToolErrorReporter toolErrorReporter0 = new ToolErrorReporter(boolean0);
      assertEquals(false, toolErrorReporter0.hasReportedError());
      assertEquals(false, toolErrorReporter0.isReportingWarnings());
      assertNotNull(toolErrorReporter0);
      
      astRoot0.addChildToBack((com.google.javascript.jscomp.mozilla.rhino.Node) comment0);
      assertEquals(-1, astRoot0.getEncodedSourceStart());
      assertEquals(-1, astRoot0.getEndLineno());
      assertEquals(-1, astRoot0.getBaseLineno());
      assertNull(astRoot0.getJsDoc());
      assertEquals(1, astRoot0.getLength());
      assertEquals(false, astRoot0.isInStrictMode());
      assertEquals(0, astRoot0.getRegexpCount());
      assertNull(astRoot0.getSourceName());
      assertEquals(136, astRoot0.getType());
      assertEquals(-1, astRoot0.getEncodedSourceEnd());
      assertEquals(true, astRoot0.hasChildren());
      assertEquals(0, astRoot0.getFunctionCount());
      assertEquals("136", astRoot0.toString());
      assertEquals(-1575, astRoot0.getPosition());
      assertNull(astRoot0.getEncodedSource());
      assertEquals(0, astRoot0.depth());
      assertEquals(-1, astRoot0.getLineno());
      assertEquals(-1575, astRoot0.getAbsolutePosition());
      assertEquals(0, astRoot0.getParamCount());
      assertEquals("setters are not supported in Internet Explorer", comment0.getValue());
      assertEquals(Token.CommentType.JSDOC, comment0.getCommentType());
      assertEquals(-1, comment0.getLineno());
      assertEquals(false, comment0.isParsed());
      assertEquals("161", comment0.toString());
      assertEquals(-1575, comment0.getPosition());
      assertEquals(161, comment0.getType());
      assertEquals(0, comment0.depth());
      assertNull(comment0.getJsDoc());
      assertEquals(-1575, comment0.getAbsolutePosition());
      assertEquals(-1575, comment0.getLength());
      assertEquals(false, comment0.hasChildren());
      
      Node node0 = IRFactory.transformTree(astRoot0, string0, config0, (ErrorReporter) toolErrorReporter0);
      assertEquals(true, toolErrorReporter0.hasReportedError());
      assertEquals(false, toolErrorReporter0.isReportingWarnings());
      assertEquals("[]", treeSet0.toString());
      assertEquals(-1, astRoot0.getEncodedSourceStart());
      assertEquals(-1, astRoot0.getEndLineno());
      assertEquals(-1, astRoot0.getBaseLineno());
      assertNull(astRoot0.getJsDoc());
      assertEquals(1, astRoot0.getLength());
      assertEquals(false, astRoot0.isInStrictMode());
      assertEquals(0, astRoot0.getRegexpCount());
      assertNull(astRoot0.getSourceName());
      assertEquals(136, astRoot0.getType());
      assertEquals(-1, astRoot0.getEncodedSourceEnd());
      assertEquals(true, astRoot0.hasChildren());
      assertEquals(0, astRoot0.getFunctionCount());
      assertEquals("136", astRoot0.toString());
      assertEquals(-1575, astRoot0.getPosition());
      assertNull(astRoot0.getEncodedSource());
      assertEquals(0, astRoot0.depth());
      assertEquals(-1, astRoot0.getLineno());
      assertEquals(-1575, astRoot0.getAbsolutePosition());
      assertEquals(0, astRoot0.getParamCount());
      assertEquals(-1, node0.getLineno());
      assertEquals(132, node0.getType());
      assertEquals(false, node0.isQuotedString());
      assertEquals(true, node0.hasChildren());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(true, node0.hasOneChild());
      assertEquals(1, node0.getChildCount());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertNotNull(node0);
  }
}
