/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 21:46:32 GMT 2014
 */

package com.google.javascript.jscomp.parsing;

import static org.junit.Assert.*; import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.junit.Test;
import com.google.javascript.jscomp.mozilla.rhino.Context;
import com.google.javascript.jscomp.mozilla.rhino.ErrorReporter;
import com.google.javascript.jscomp.mozilla.rhino.Node;
import com.google.javascript.jscomp.mozilla.rhino.Token;
import com.google.javascript.jscomp.mozilla.rhino.ast.ArrayLiteral;
import com.google.javascript.jscomp.mozilla.rhino.ast.AstNode;
import com.google.javascript.jscomp.mozilla.rhino.ast.AstRoot;
import com.google.javascript.jscomp.mozilla.rhino.ast.Block;
import com.google.javascript.jscomp.mozilla.rhino.ast.Comment;
import com.google.javascript.jscomp.mozilla.rhino.ast.EmptyExpression;
import com.google.javascript.jscomp.mozilla.rhino.ast.ErrorCollector;
import com.google.javascript.jscomp.mozilla.rhino.ast.FunctionNode;
import com.google.javascript.jscomp.mozilla.rhino.ast.LetNode;
import com.google.javascript.jscomp.mozilla.rhino.ast.NewExpression;
import com.google.javascript.jscomp.mozilla.rhino.ast.NumberLiteral;
import com.google.javascript.jscomp.mozilla.rhino.ast.ReturnStatement;
import com.google.javascript.jscomp.mozilla.rhino.ast.SwitchCase;
import com.google.javascript.jscomp.mozilla.rhino.tools.ToolErrorReporter;
import com.google.javascript.jscomp.parsing.Config;
import com.google.javascript.jscomp.parsing.IRFactory;
import java.nio.charset.Charset;
import java.util.Locale;
import java.util.Set;



import org.junit.runner.RunWith;


public class IRFactoryEvoSuite_branch_Test  {

  @Test
  public void test00()  throws Throwable  {
      AstRoot astRoot0 = new AstRoot();
      assertEquals(-1, astRoot0.getPosition());
      assertEquals(0, astRoot0.getRegexpCount());
      assertNull(astRoot0.getJsDoc());
      assertNull(astRoot0.getEncodedSource());
      assertEquals(1, astRoot0.getLength());
      assertEquals(0, astRoot0.getParamCount());
      assertEquals(false, astRoot0.isInStrictMode());
      assertEquals(0, astRoot0.getFunctionCount());
      assertEquals(0, astRoot0.depth());
      assertEquals(-1, astRoot0.getEndLineno());
      assertEquals(-1, astRoot0.getEncodedSourceEnd());
      assertEquals(false, astRoot0.hasChildren());
      assertNull(astRoot0.getSourceName());
      assertEquals("136", astRoot0.toString());
      assertEquals(-1, astRoot0.getLineno());
      assertEquals(-1, astRoot0.getBaseLineno());
      assertEquals(-1, astRoot0.getAbsolutePosition());
      assertEquals(136, astRoot0.getType());
      assertEquals(-1, astRoot0.getEncodedSourceStart());
      assertNotNull(astRoot0);
      
      int int0 = (-1744);
      SwitchCase switchCase0 = new SwitchCase(int0);
      assertEquals(1, switchCase0.getLength());
      assertEquals(-1744, switchCase0.getAbsolutePosition());
      assertEquals(false, switchCase0.hasChildren());
      assertEquals(true, switchCase0.isDefault());
      assertEquals("115", switchCase0.toString());
      assertNull(switchCase0.getJsDoc());
      assertEquals(0, switchCase0.depth());
      assertEquals(-1, switchCase0.getLineno());
      assertEquals(115, switchCase0.getType());
      assertEquals(-1744, switchCase0.getPosition());
      assertNotNull(switchCase0);
      
      astRoot0.addChildrenToFront((Node) switchCase0);
      assertEquals(1, switchCase0.getLength());
      assertEquals(-1744, switchCase0.getAbsolutePosition());
      assertEquals(false, switchCase0.hasChildren());
      assertEquals(true, switchCase0.isDefault());
      assertEquals("115", switchCase0.toString());
      assertNull(switchCase0.getJsDoc());
      assertEquals(0, switchCase0.depth());
      assertEquals(-1, switchCase0.getLineno());
      assertEquals(115, switchCase0.getType());
      assertEquals(-1744, switchCase0.getPosition());
      assertEquals(-1, astRoot0.getPosition());
      assertEquals(0, astRoot0.getRegexpCount());
      assertEquals(true, astRoot0.hasChildren());
      assertNull(astRoot0.getJsDoc());
      assertNull(astRoot0.getEncodedSource());
      assertEquals(1, astRoot0.getLength());
      assertEquals(0, astRoot0.getParamCount());
      assertEquals(false, astRoot0.isInStrictMode());
      assertEquals(0, astRoot0.getFunctionCount());
      assertEquals(0, astRoot0.depth());
      assertEquals(-1, astRoot0.getEndLineno());
      assertEquals(-1, astRoot0.getEncodedSourceEnd());
      assertNull(astRoot0.getSourceName());
      assertEquals("136", astRoot0.toString());
      assertEquals(-1, astRoot0.getLineno());
      assertEquals(-1, astRoot0.getBaseLineno());
      assertEquals(-1, astRoot0.getAbsolutePosition());
      assertEquals(136, astRoot0.getType());
      assertEquals(-1, astRoot0.getEncodedSourceStart());
      
      Locale locale0 = Locale.GERMANY;
      assertEquals("de", locale0.getLanguage());
      assertEquals("de_DE", locale0.toString());
      assertEquals("DE", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("DEU", locale0.getISO3Country());
      assertNotNull(locale0);
      
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      assertEquals(true, set0.isEmpty());
      assertEquals(0, set0.size());
      assertEquals("de", locale0.getLanguage());
      assertEquals("de_DE", locale0.toString());
      assertEquals("DE", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("DEU", locale0.getISO3Country());
      assertNotNull(set0);
      
      switchCase0.addStatement((AstNode) astRoot0);
      assertEquals(-1744, switchCase0.getAbsolutePosition());
      assertEquals(1744, switchCase0.getLength());
      assertEquals(false, switchCase0.hasChildren());
      assertEquals(true, switchCase0.isDefault());
      assertEquals("115", switchCase0.toString());
      assertNull(switchCase0.getJsDoc());
      assertEquals(0, switchCase0.depth());
      assertEquals(-1, switchCase0.getLineno());
      assertEquals(115, switchCase0.getType());
      assertEquals(-1744, switchCase0.getPosition());
      assertEquals(0, astRoot0.getRegexpCount());
      assertEquals(true, astRoot0.hasChildren());
      assertNull(astRoot0.getJsDoc());
      assertNull(astRoot0.getEncodedSource());
      assertEquals(1, astRoot0.getLength());
      assertEquals(0, astRoot0.getParamCount());
      assertEquals(false, astRoot0.isInStrictMode());
      assertEquals(0, astRoot0.getFunctionCount());
      assertEquals(1, astRoot0.depth());
      assertEquals(1743, astRoot0.getPosition());
      assertEquals(-1, astRoot0.getEndLineno());
      assertEquals(-1, astRoot0.getEncodedSourceEnd());
      assertNull(astRoot0.getSourceName());
      assertEquals("136", astRoot0.toString());
      assertEquals(-1, astRoot0.getLineno());
      assertEquals(-1, astRoot0.getBaseLineno());
      assertEquals(-1, astRoot0.getAbsolutePosition());
      assertEquals(136, astRoot0.getType());
      assertEquals(-1, astRoot0.getEncodedSourceStart());
      
      boolean boolean0 = true;
      Config config0 = new Config(set0, set0, boolean0, boolean0, boolean0);
      assertEquals(true, set0.isEmpty());
      assertEquals(0, set0.size());
      assertEquals("de", locale0.getLanguage());
      assertEquals("de_DE", locale0.toString());
      assertEquals("DE", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("DEU", locale0.getISO3Country());
      assertNotNull(config0);
      
      ToolErrorReporter toolErrorReporter0 = new ToolErrorReporter(boolean0);
      assertEquals(false, toolErrorReporter0.hasReportedError());
      assertEquals(true, toolErrorReporter0.isReportingWarnings());
      assertNotNull(toolErrorReporter0);
      
      String string0 = "c6v9vqyCjR<i";
      // Undeclared exception!
      try {
        com.google.javascript.rhino.Node node0 = IRFactory.transformTree(astRoot0, string0, config0, (ErrorReporter) toolErrorReporter0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test01()  throws Throwable  {
      AstRoot astRoot0 = new AstRoot();
      assertEquals(-1, astRoot0.getEncodedSourceStart());
      assertEquals(0, astRoot0.getFunctionCount());
      assertEquals(false, astRoot0.isInStrictMode());
      assertEquals(false, astRoot0.hasChildren());
      assertEquals(-1, astRoot0.getBaseLineno());
      assertNull(astRoot0.getEncodedSource());
      assertNull(astRoot0.getSourceName());
      assertEquals(0, astRoot0.getRegexpCount());
      assertEquals(-1, astRoot0.getPosition());
      assertEquals(-1, astRoot0.getAbsolutePosition());
      assertNull(astRoot0.getJsDoc());
      assertEquals(-1, astRoot0.getLineno());
      assertEquals(0, astRoot0.getParamCount());
      assertEquals("136", astRoot0.toString());
      assertEquals(136, astRoot0.getType());
      assertEquals(0, astRoot0.depth());
      assertEquals(1, astRoot0.getLength());
      assertEquals(-1, astRoot0.getEncodedSourceEnd());
      assertEquals(-1, astRoot0.getEndLineno());
      assertNotNull(astRoot0);
      
      int int0 = (-1744);
      SwitchCase switchCase0 = new SwitchCase(int0);
      assertEquals(0, switchCase0.depth());
      assertNull(switchCase0.getJsDoc());
      assertEquals("115", switchCase0.toString());
      assertEquals(-1744, switchCase0.getPosition());
      assertEquals(true, switchCase0.isDefault());
      assertEquals(1, switchCase0.getLength());
      assertEquals(-1744, switchCase0.getAbsolutePosition());
      assertEquals(115, switchCase0.getType());
      assertEquals(-1, switchCase0.getLineno());
      assertEquals(false, switchCase0.hasChildren());
      assertNotNull(switchCase0);
      
      astRoot0.addChildrenToFront((Node) switchCase0);
      assertEquals(0, switchCase0.depth());
      assertNull(switchCase0.getJsDoc());
      assertEquals("115", switchCase0.toString());
      assertEquals(-1744, switchCase0.getPosition());
      assertEquals(true, switchCase0.isDefault());
      assertEquals(1, switchCase0.getLength());
      assertEquals(-1744, switchCase0.getAbsolutePosition());
      assertEquals(115, switchCase0.getType());
      assertEquals(-1, switchCase0.getLineno());
      assertEquals(false, switchCase0.hasChildren());
      assertEquals(-1, astRoot0.getEncodedSourceStart());
      assertEquals(0, astRoot0.getFunctionCount());
      assertEquals(false, astRoot0.isInStrictMode());
      assertEquals(-1, astRoot0.getBaseLineno());
      assertNull(astRoot0.getEncodedSource());
      assertNull(astRoot0.getSourceName());
      assertEquals(0, astRoot0.getRegexpCount());
      assertEquals(-1, astRoot0.getPosition());
      assertEquals(-1, astRoot0.getAbsolutePosition());
      assertNull(astRoot0.getJsDoc());
      assertEquals(-1, astRoot0.getLineno());
      assertEquals(0, astRoot0.getParamCount());
      assertEquals(true, astRoot0.hasChildren());
      assertEquals("136", astRoot0.toString());
      assertEquals(136, astRoot0.getType());
      assertEquals(0, astRoot0.depth());
      assertEquals(1, astRoot0.getLength());
      assertEquals(-1, astRoot0.getEncodedSourceEnd());
      assertEquals(-1, astRoot0.getEndLineno());
      
      Locale locale0 = Locale.GERMANY;
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("DE", locale0.getCountry());
      assertEquals("de_DE", locale0.toString());
      assertEquals("de", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertNotNull(locale0);
      
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("DE", locale0.getCountry());
      assertEquals("de_DE", locale0.toString());
      assertEquals("de", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals(0, set0.size());
      assertEquals(true, set0.isEmpty());
      assertNotNull(set0);
      
      boolean boolean0 = true;
      Config config0 = new Config(set0, set0, boolean0, boolean0, boolean0);
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("DE", locale0.getCountry());
      assertEquals("de_DE", locale0.toString());
      assertEquals("de", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals(0, set0.size());
      assertEquals(true, set0.isEmpty());
      assertNotNull(config0);
      
      ToolErrorReporter toolErrorReporter0 = new ToolErrorReporter(boolean0);
      assertEquals(true, toolErrorReporter0.isReportingWarnings());
      assertEquals(false, toolErrorReporter0.hasReportedError());
      assertNotNull(toolErrorReporter0);
      
      String string0 = "c6v9vqyCjR<i";
      com.google.javascript.rhino.Node node0 = IRFactory.transformTree(astRoot0, string0, config0, (ErrorReporter) toolErrorReporter0);
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("DE", locale0.getCountry());
      assertEquals("de_DE", locale0.toString());
      assertEquals("de", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals(-1, astRoot0.getEncodedSourceStart());
      assertEquals(0, astRoot0.getFunctionCount());
      assertEquals(false, astRoot0.isInStrictMode());
      assertEquals(-1, astRoot0.getBaseLineno());
      assertNull(astRoot0.getEncodedSource());
      assertNull(astRoot0.getSourceName());
      assertEquals(0, astRoot0.getRegexpCount());
      assertEquals(-1, astRoot0.getPosition());
      assertEquals(-1, astRoot0.getAbsolutePosition());
      assertNull(astRoot0.getJsDoc());
      assertEquals(-1, astRoot0.getLineno());
      assertEquals(0, astRoot0.getParamCount());
      assertEquals(true, astRoot0.hasChildren());
      assertEquals("136", astRoot0.toString());
      assertEquals(136, astRoot0.getType());
      assertEquals(0, astRoot0.depth());
      assertEquals(1, astRoot0.getLength());
      assertEquals(-1, astRoot0.getEncodedSourceEnd());
      assertEquals(-1, astRoot0.getEndLineno());
      assertEquals(true, toolErrorReporter0.isReportingWarnings());
      assertEquals(false, toolErrorReporter0.hasReportedError());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(1, node0.getChildCount());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(-1, node0.getCharno());
      assertEquals(true, node0.hasChildren());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(true, node0.hasOneChild());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(132, node0.getType());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(-1, node0.getLineno());
      assertEquals(0, set0.size());
      assertEquals(true, set0.isEmpty());
      assertNotNull(node0);
  }

  @Test
  public void test02()  throws Throwable  {
      AstRoot astRoot0 = new AstRoot();
      assertEquals(-1, astRoot0.getPosition());
      assertEquals(0, astRoot0.getRegexpCount());
      assertEquals(-1, astRoot0.getEncodedSourceEnd());
      assertEquals(0, astRoot0.getFunctionCount());
      assertEquals(-1, astRoot0.getLineno());
      assertEquals(false, astRoot0.isInStrictMode());
      assertEquals("136", astRoot0.toString());
      assertNull(astRoot0.getJsDoc());
      assertEquals(false, astRoot0.hasChildren());
      assertEquals(-1, astRoot0.getEncodedSourceStart());
      assertNull(astRoot0.getSourceName());
      assertEquals(1, astRoot0.getLength());
      assertEquals(0, astRoot0.getParamCount());
      assertEquals(-1, astRoot0.getAbsolutePosition());
      assertNull(astRoot0.getEncodedSource());
      assertEquals(136, astRoot0.getType());
      assertEquals(0, astRoot0.depth());
      assertEquals(-1, astRoot0.getEndLineno());
      assertEquals(-1, astRoot0.getBaseLineno());
      assertNotNull(astRoot0);
      
      int int0 = 57296;
      String string0 = "TN3j%4#qZy";
      Charset charset0 = Charset.defaultCharset();
      assertEquals(true, charset0.canEncode());
      assertEquals("UTF-8", charset0.toString());
      assertEquals("UTF-8", charset0.displayName());
      assertEquals("UTF-8", charset0.name());
      assertEquals(true, charset0.isRegistered());
      assertNotNull(charset0);
      
      Set<String> set0 = charset0.aliases();
      assertEquals(2, set0.size());
      assertEquals(false, set0.isEmpty());
      assertEquals(true, charset0.canEncode());
      assertEquals("UTF-8", charset0.toString());
      assertEquals("UTF-8", charset0.displayName());
      assertEquals("UTF-8", charset0.name());
      assertEquals(true, charset0.isRegistered());
      assertNotNull(set0);
      
      boolean boolean0 = true;
      Config config0 = new Config(set0, set0, boolean0, boolean0, boolean0);
      assertEquals(2, set0.size());
      assertEquals(false, set0.isEmpty());
      assertEquals(true, charset0.canEncode());
      assertEquals("UTF-8", charset0.toString());
      assertEquals("UTF-8", charset0.displayName());
      assertEquals("UTF-8", charset0.name());
      assertEquals(true, charset0.isRegistered());
      assertNotNull(config0);
      
      ReturnStatement returnStatement0 = new ReturnStatement(int0, int0, (AstNode) astRoot0);
      assertEquals(57296, returnStatement0.getPosition());
      assertEquals(57296, returnStatement0.getLength());
      assertEquals(4, returnStatement0.getType());
      assertEquals("4", returnStatement0.toString());
      assertEquals(-1, returnStatement0.getLineno());
      assertEquals(false, returnStatement0.hasChildren());
      assertNull(returnStatement0.getJsDoc());
      assertEquals(0, returnStatement0.depth());
      assertEquals(57296, returnStatement0.getAbsolutePosition());
      assertEquals(0, astRoot0.getRegexpCount());
      assertEquals(-1, astRoot0.getEncodedSourceEnd());
      assertEquals(1, astRoot0.depth());
      assertEquals(0, astRoot0.getFunctionCount());
      assertEquals(-1, astRoot0.getLineno());
      assertEquals(-57297, astRoot0.getPosition());
      assertEquals(false, astRoot0.isInStrictMode());
      assertEquals("136", astRoot0.toString());
      assertNull(astRoot0.getJsDoc());
      assertEquals(false, astRoot0.hasChildren());
      assertEquals(-1, astRoot0.getEncodedSourceStart());
      assertNull(astRoot0.getSourceName());
      assertEquals(1, astRoot0.getLength());
      assertEquals(0, astRoot0.getParamCount());
      assertEquals(-1, astRoot0.getAbsolutePosition());
      assertNull(astRoot0.getEncodedSource());
      assertEquals(136, astRoot0.getType());
      assertEquals(-1, astRoot0.getEndLineno());
      assertEquals(-1, astRoot0.getBaseLineno());
      assertNotNull(returnStatement0);
      
      astRoot0.addChildrenToBack((Node) returnStatement0);
      assertEquals(57296, returnStatement0.getPosition());
      assertEquals(57296, returnStatement0.getLength());
      assertEquals(4, returnStatement0.getType());
      assertEquals("4", returnStatement0.toString());
      assertEquals(-1, returnStatement0.getLineno());
      assertEquals(false, returnStatement0.hasChildren());
      assertNull(returnStatement0.getJsDoc());
      assertEquals(0, returnStatement0.depth());
      assertEquals(57296, returnStatement0.getAbsolutePosition());
      assertEquals(0, astRoot0.getRegexpCount());
      assertEquals(-1, astRoot0.getEncodedSourceEnd());
      assertEquals(1, astRoot0.depth());
      assertEquals(0, astRoot0.getFunctionCount());
      assertEquals(true, astRoot0.hasChildren());
      assertEquals(-1, astRoot0.getLineno());
      assertEquals(-57297, astRoot0.getPosition());
      assertEquals(false, astRoot0.isInStrictMode());
      assertEquals("136", astRoot0.toString());
      assertNull(astRoot0.getJsDoc());
      assertEquals(-1, astRoot0.getEncodedSourceStart());
      assertNull(astRoot0.getSourceName());
      assertEquals(1, astRoot0.getLength());
      assertEquals(0, astRoot0.getParamCount());
      assertEquals(-1, astRoot0.getAbsolutePosition());
      assertNull(astRoot0.getEncodedSource());
      assertEquals(136, astRoot0.getType());
      assertEquals(-1, astRoot0.getEndLineno());
      assertEquals(-1, astRoot0.getBaseLineno());
      
      ToolErrorReporter toolErrorReporter0 = new ToolErrorReporter(boolean0);
      assertEquals(true, toolErrorReporter0.isReportingWarnings());
      assertEquals(false, toolErrorReporter0.hasReportedError());
      assertNotNull(toolErrorReporter0);
      
      // Undeclared exception!
      try {
        com.google.javascript.rhino.Node node0 = IRFactory.transformTree(astRoot0, string0, config0, (ErrorReporter) toolErrorReporter0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test03()  throws Throwable  {
      AstRoot astRoot0 = new AstRoot();
      assertNull(astRoot0.getEncodedSource());
      assertEquals(0, astRoot0.getParamCount());
      assertEquals(136, astRoot0.getType());
      assertEquals(-1, astRoot0.getEncodedSourceEnd());
      assertEquals(-1, astRoot0.getPosition());
      assertNull(astRoot0.getJsDoc());
      assertEquals(0, astRoot0.getRegexpCount());
      assertEquals(-1, astRoot0.getLineno());
      assertEquals(false, astRoot0.hasChildren());
      assertNull(astRoot0.getSourceName());
      assertEquals(-1, astRoot0.getBaseLineno());
      assertEquals(-1, astRoot0.getEndLineno());
      assertEquals(-1, astRoot0.getEncodedSourceStart());
      assertEquals(-1, astRoot0.getAbsolutePosition());
      assertEquals(false, astRoot0.isInStrictMode());
      assertEquals(0, astRoot0.depth());
      assertEquals(0, astRoot0.getFunctionCount());
      assertEquals(1, astRoot0.getLength());
      assertEquals("136", astRoot0.toString());
      assertNotNull(astRoot0);
      
      int int0 = 3705;
      ArrayLiteral arrayLiteral0 = new ArrayLiteral(int0);
      assertNull(arrayLiteral0.getJsDoc());
      assertEquals(0, arrayLiteral0.getSkipCount());
      assertEquals(3705, arrayLiteral0.getPosition());
      assertEquals(0, arrayLiteral0.getSize());
      assertEquals(-1, arrayLiteral0.getLineno());
      assertEquals(3705, arrayLiteral0.getAbsolutePosition());
      assertEquals(0, arrayLiteral0.getDestructuringLength());
      assertEquals(false, arrayLiteral0.hasChildren());
      assertEquals(0, arrayLiteral0.depth());
      assertEquals(65, arrayLiteral0.getType());
      assertEquals("65", arrayLiteral0.toString());
      assertEquals(1, arrayLiteral0.getLength());
      assertEquals(false, arrayLiteral0.isDestructuring());
      assertNotNull(arrayLiteral0);
      
      astRoot0.addChild((AstNode) arrayLiteral0);
      assertNull(astRoot0.getEncodedSource());
      assertEquals(3707, astRoot0.getLength());
      assertEquals(0, astRoot0.getParamCount());
      assertEquals(136, astRoot0.getType());
      assertEquals(-1, astRoot0.getEncodedSourceEnd());
      assertEquals(true, astRoot0.hasChildren());
      assertEquals(-1, astRoot0.getPosition());
      assertNull(astRoot0.getJsDoc());
      assertEquals(0, astRoot0.getRegexpCount());
      assertEquals(-1, astRoot0.getLineno());
      assertNull(astRoot0.getSourceName());
      assertEquals(-1, astRoot0.getBaseLineno());
      assertEquals(-1, astRoot0.getEndLineno());
      assertEquals(-1, astRoot0.getEncodedSourceStart());
      assertEquals(-1, astRoot0.getAbsolutePosition());
      assertEquals(false, astRoot0.isInStrictMode());
      assertEquals(0, astRoot0.depth());
      assertEquals(0, astRoot0.getFunctionCount());
      assertEquals("136", astRoot0.toString());
      assertEquals(0, arrayLiteral0.getDestructuringLength());
      assertEquals(3705, arrayLiteral0.getAbsolutePosition());
      assertEquals(1, arrayLiteral0.depth());
      assertEquals("65", arrayLiteral0.toString());
      assertEquals(65, arrayLiteral0.getType());
      assertEquals(0, arrayLiteral0.getSkipCount());
      assertNull(arrayLiteral0.getJsDoc());
      assertEquals(0, arrayLiteral0.getSize());
      assertEquals(-1, arrayLiteral0.getLineno());
      assertEquals(false, arrayLiteral0.hasChildren());
      assertEquals(3706, arrayLiteral0.getPosition());
      assertEquals(false, arrayLiteral0.isDestructuring());
      assertEquals(1, arrayLiteral0.getLength());
      
      String string0 = "";
      Charset charset0 = Charset.defaultCharset();
      assertEquals(true, charset0.isRegistered());
      assertEquals("UTF-8", charset0.toString());
      assertEquals("UTF-8", charset0.displayName());
      assertEquals(true, charset0.canEncode());
      assertEquals("UTF-8", charset0.name());
      assertNotNull(charset0);
      
      Set<String> set0 = charset0.aliases();
      assertEquals(false, set0.isEmpty());
      assertEquals(2, set0.size());
      assertEquals(true, charset0.isRegistered());
      assertEquals("UTF-8", charset0.toString());
      assertEquals("UTF-8", charset0.displayName());
      assertEquals(true, charset0.canEncode());
      assertEquals("UTF-8", charset0.name());
      assertNotNull(set0);
      
      boolean boolean0 = false;
      Config config0 = new Config(set0, set0, boolean0, boolean0, boolean0);
      assertEquals(false, set0.isEmpty());
      assertEquals(2, set0.size());
      assertEquals(true, charset0.isRegistered());
      assertEquals("UTF-8", charset0.toString());
      assertEquals("UTF-8", charset0.displayName());
      assertEquals(true, charset0.canEncode());
      assertEquals("UTF-8", charset0.name());
      assertNotNull(config0);
      
      ToolErrorReporter toolErrorReporter0 = new ToolErrorReporter(boolean0);
      assertEquals(false, toolErrorReporter0.isReportingWarnings());
      assertEquals(false, toolErrorReporter0.hasReportedError());
      assertNotNull(toolErrorReporter0);
      
      com.google.javascript.rhino.Node node0 = IRFactory.transformTree(astRoot0, string0, config0, (ErrorReporter) toolErrorReporter0);
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(1, node0.getChildCount());
      assertEquals(132, node0.getType());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(-1, node0.getLineno());
      assertEquals(true, node0.hasOneChild());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(true, node0.hasChildren());
      assertEquals(false, set0.isEmpty());
      assertEquals(2, set0.size());
      assertEquals(true, charset0.isRegistered());
      assertEquals("UTF-8", charset0.toString());
      assertEquals("UTF-8", charset0.displayName());
      assertEquals(true, charset0.canEncode());
      assertEquals("UTF-8", charset0.name());
      assertNull(astRoot0.getEncodedSource());
      assertEquals(3707, astRoot0.getLength());
      assertEquals(0, astRoot0.getParamCount());
      assertEquals(136, astRoot0.getType());
      assertEquals(-1, astRoot0.getEncodedSourceEnd());
      assertEquals(true, astRoot0.hasChildren());
      assertEquals(-1, astRoot0.getPosition());
      assertNull(astRoot0.getJsDoc());
      assertEquals(0, astRoot0.getRegexpCount());
      assertEquals(-1, astRoot0.getLineno());
      assertNull(astRoot0.getSourceName());
      assertEquals(-1, astRoot0.getBaseLineno());
      assertEquals(-1, astRoot0.getEndLineno());
      assertEquals(-1, astRoot0.getEncodedSourceStart());
      assertEquals(-1, astRoot0.getAbsolutePosition());
      assertEquals(false, astRoot0.isInStrictMode());
      assertEquals(0, astRoot0.depth());
      assertEquals(0, astRoot0.getFunctionCount());
      assertEquals("136", astRoot0.toString());
      assertEquals(false, toolErrorReporter0.isReportingWarnings());
      assertEquals(false, toolErrorReporter0.hasReportedError());
      assertNotNull(node0);
  }

  @Test
  public void test04()  throws Throwable  {
      AstRoot astRoot0 = new AstRoot();
      assertEquals(-1, astRoot0.getEncodedSourceStart());
      assertEquals(-1, astRoot0.getEndLineno());
      assertEquals(1, astRoot0.getLength());
      assertNull(astRoot0.getEncodedSource());
      assertEquals(0, astRoot0.getRegexpCount());
      assertEquals(false, astRoot0.hasChildren());
      assertNull(astRoot0.getSourceName());
      assertEquals(136, astRoot0.getType());
      assertEquals("136", astRoot0.toString());
      assertEquals(-1, astRoot0.getEncodedSourceEnd());
      assertEquals(0, astRoot0.getParamCount());
      assertEquals(-1, astRoot0.getPosition());
      assertEquals(-1, astRoot0.getBaseLineno());
      assertEquals(0, astRoot0.getFunctionCount());
      assertEquals(-1, astRoot0.getAbsolutePosition());
      assertNull(astRoot0.getJsDoc());
      assertEquals(-1, astRoot0.getLineno());
      assertEquals(false, astRoot0.isInStrictMode());
      assertEquals(0, astRoot0.depth());
      assertNotNull(astRoot0);
      
      String string0 = "?/";
      int int0 = 1439;
      Block block0 = new Block(int0, int0);
      assertEquals(-1, block0.getLineno());
      assertNull(block0.getJsDoc());
      assertEquals(1439, block0.getPosition());
      assertEquals(0, block0.depth());
      assertEquals(false, block0.hasChildren());
      assertEquals("129", block0.toString());
      assertEquals(1439, block0.getLength());
      assertEquals(1439, block0.getAbsolutePosition());
      assertEquals(129, block0.getType());
      assertNotNull(block0);
      
      astRoot0.addChild((AstNode) block0);
      assertEquals(-1, astRoot0.getEncodedSourceStart());
      assertEquals(-1, astRoot0.getEndLineno());
      assertNull(astRoot0.getEncodedSource());
      assertEquals(2879, astRoot0.getLength());
      assertEquals(0, astRoot0.getRegexpCount());
      assertNull(astRoot0.getSourceName());
      assertEquals(136, astRoot0.getType());
      assertEquals("136", astRoot0.toString());
      assertEquals(-1, astRoot0.getEncodedSourceEnd());
      assertEquals(0, astRoot0.getParamCount());
      assertEquals(-1, astRoot0.getPosition());
      assertEquals(-1, astRoot0.getBaseLineno());
      assertEquals(0, astRoot0.getFunctionCount());
      assertEquals(-1, astRoot0.getAbsolutePosition());
      assertNull(astRoot0.getJsDoc());
      assertEquals(true, astRoot0.hasChildren());
      assertEquals(-1, astRoot0.getLineno());
      assertEquals(false, astRoot0.isInStrictMode());
      assertEquals(0, astRoot0.depth());
      assertEquals(-1, block0.getLineno());
      assertEquals(1440, block0.getPosition());
      assertNull(block0.getJsDoc());
      assertEquals(1, block0.depth());
      assertEquals(false, block0.hasChildren());
      assertEquals("129", block0.toString());
      assertEquals(1439, block0.getLength());
      assertEquals(1439, block0.getAbsolutePosition());
      assertEquals(129, block0.getType());
      
      Locale locale0 = Locale.GERMANY;
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("de", locale0.getLanguage());
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("de_DE", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("DE", locale0.getCountry());
      assertNotNull(locale0);
      
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      assertEquals(true, set0.isEmpty());
      assertEquals(0, set0.size());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("de", locale0.getLanguage());
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("de_DE", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("DE", locale0.getCountry());
      assertNotNull(set0);
      
      boolean boolean0 = false;
      Config config0 = new Config(set0, set0, boolean0, boolean0, boolean0);
      assertEquals(true, set0.isEmpty());
      assertEquals(0, set0.size());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("de", locale0.getLanguage());
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("de_DE", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("DE", locale0.getCountry());
      assertNotNull(config0);
      
      Context context0 = new Context();
      assertEquals(false, context0.hasCompileFunctionsWithDynamicScope());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertEquals(2147483647, context0.getMaximumInterpreterStackDepth());
      assertEquals(false, context0.isGeneratingDebugChanged());
      assertEquals(true, context0.isGeneratingSource());
      assertEquals(false, context0.isSealed());
      assertEquals(0, context0.getLanguageVersion());
      assertEquals(false, context0.isGeneratingDebug());
      assertEquals(0, context0.getOptimizationLevel());
      assertFalse(context0.generateObserverCount);
      assertNotNull(context0);
      
      ToolErrorReporter toolErrorReporter0 = new ToolErrorReporter(context0.generateObserverCount);
      assertEquals(false, toolErrorReporter0.isReportingWarnings());
      assertEquals(false, toolErrorReporter0.hasReportedError());
      assertEquals(false, context0.hasCompileFunctionsWithDynamicScope());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertEquals(2147483647, context0.getMaximumInterpreterStackDepth());
      assertEquals(false, context0.isGeneratingDebugChanged());
      assertEquals(true, context0.isGeneratingSource());
      assertEquals(false, context0.isSealed());
      assertEquals(0, context0.getLanguageVersion());
      assertEquals(false, context0.isGeneratingDebug());
      assertEquals(0, context0.getOptimizationLevel());
      assertFalse(context0.generateObserverCount);
      assertNotNull(toolErrorReporter0);
      
      com.google.javascript.rhino.Node node0 = IRFactory.transformTree(astRoot0, string0, config0, (ErrorReporter) toolErrorReporter0);
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(132, node0.getType());
      assertEquals(true, node0.hasChildren());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(1, node0.getChildCount());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(-1, node0.getLineno());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isQuotedString());
      assertEquals(true, node0.hasOneChild());
      assertEquals(true, set0.isEmpty());
      assertEquals(0, set0.size());
      assertEquals(-1, astRoot0.getEncodedSourceStart());
      assertEquals(-1, astRoot0.getEndLineno());
      assertNull(astRoot0.getEncodedSource());
      assertEquals(2879, astRoot0.getLength());
      assertEquals(0, astRoot0.getRegexpCount());
      assertNull(astRoot0.getSourceName());
      assertEquals(136, astRoot0.getType());
      assertEquals("136", astRoot0.toString());
      assertEquals(-1, astRoot0.getEncodedSourceEnd());
      assertEquals(0, astRoot0.getParamCount());
      assertEquals(-1, astRoot0.getPosition());
      assertEquals(-1, astRoot0.getBaseLineno());
      assertEquals(0, astRoot0.getFunctionCount());
      assertEquals(-1, astRoot0.getAbsolutePosition());
      assertNull(astRoot0.getJsDoc());
      assertEquals(true, astRoot0.hasChildren());
      assertEquals(-1, astRoot0.getLineno());
      assertEquals(false, astRoot0.isInStrictMode());
      assertEquals(0, astRoot0.depth());
      assertEquals(false, toolErrorReporter0.isReportingWarnings());
      assertEquals(false, toolErrorReporter0.hasReportedError());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("de", locale0.getLanguage());
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("de_DE", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("DE", locale0.getCountry());
      assertEquals(false, context0.hasCompileFunctionsWithDynamicScope());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertEquals(2147483647, context0.getMaximumInterpreterStackDepth());
      assertEquals(false, context0.isGeneratingDebugChanged());
      assertEquals(true, context0.isGeneratingSource());
      assertEquals(false, context0.isSealed());
      assertEquals(0, context0.getLanguageVersion());
      assertEquals(false, context0.isGeneratingDebug());
      assertEquals(0, context0.getOptimizationLevel());
      assertFalse(context0.generateObserverCount);
      assertNotNull(node0);
  }

  @Test
  public void test05()  throws Throwable  {
      AstRoot astRoot0 = new AstRoot();
      assertEquals(136, astRoot0.getType());
      assertNull(astRoot0.getJsDoc());
      assertEquals(0, astRoot0.depth());
      assertEquals(-1, astRoot0.getEncodedSourceEnd());
      assertEquals(false, astRoot0.hasChildren());
      assertEquals(-1, astRoot0.getAbsolutePosition());
      assertEquals(-1, astRoot0.getEndLineno());
      assertEquals(-1, astRoot0.getEncodedSourceStart());
      assertEquals(-1, astRoot0.getBaseLineno());
      assertEquals(false, astRoot0.isInStrictMode());
      assertEquals(0, astRoot0.getRegexpCount());
      assertEquals(-1, astRoot0.getLineno());
      assertEquals(0, astRoot0.getFunctionCount());
      assertEquals(1, astRoot0.getLength());
      assertNull(astRoot0.getEncodedSource());
      assertEquals("136", astRoot0.toString());
      assertEquals(-1, astRoot0.getPosition());
      assertEquals(0, astRoot0.getParamCount());
      assertNull(astRoot0.getSourceName());
      assertNotNull(astRoot0);
      
      String string0 = "<BNe2c}ZW~%r";
      int int0 = 0;
      Token.CommentType token_CommentType0 = Token.CommentType.BLOCK;
      Comment comment0 = new Comment(int0, int0, token_CommentType0, string0);
      assertEquals(false, comment0.isParsed());
      assertEquals("<BNe2c}ZW~%r", comment0.getValue());
      assertEquals(161, comment0.getType());
      assertNull(comment0.getJsDoc());
      assertEquals(false, comment0.hasChildren());
      assertEquals(0, comment0.getPosition());
      assertEquals(0, comment0.getAbsolutePosition());
      assertEquals(0, comment0.depth());
      assertEquals(Token.CommentType.BLOCK, comment0.getCommentType());
      assertEquals(-1, comment0.getLineno());
      assertEquals(0, comment0.getLength());
      assertEquals("161", comment0.toString());
      assertNotNull(comment0);
      
      astRoot0.addComment(comment0);
      assertEquals(136, astRoot0.getType());
      assertNull(astRoot0.getJsDoc());
      assertEquals(0, astRoot0.depth());
      assertEquals(-1, astRoot0.getEncodedSourceEnd());
      assertEquals(false, astRoot0.hasChildren());
      assertEquals(-1, astRoot0.getAbsolutePosition());
      assertEquals(-1, astRoot0.getEndLineno());
      assertEquals(-1, astRoot0.getEncodedSourceStart());
      assertEquals(-1, astRoot0.getBaseLineno());
      assertEquals(false, astRoot0.isInStrictMode());
      assertEquals(0, astRoot0.getRegexpCount());
      assertEquals(-1, astRoot0.getLineno());
      assertEquals(0, astRoot0.getFunctionCount());
      assertEquals(1, astRoot0.getLength());
      assertNull(astRoot0.getEncodedSource());
      assertEquals("136", astRoot0.toString());
      assertEquals(-1, astRoot0.getPosition());
      assertEquals(0, astRoot0.getParamCount());
      assertNull(astRoot0.getSourceName());
      assertEquals(false, comment0.isParsed());
      assertEquals("<BNe2c}ZW~%r", comment0.getValue());
      assertEquals(161, comment0.getType());
      assertNull(comment0.getJsDoc());
      assertEquals(false, comment0.hasChildren());
      assertEquals(1, comment0.getPosition());
      assertEquals(0, comment0.getAbsolutePosition());
      assertEquals(Token.CommentType.BLOCK, comment0.getCommentType());
      assertEquals(1, comment0.depth());
      assertEquals(-1, comment0.getLineno());
      assertEquals(0, comment0.getLength());
      assertEquals("161", comment0.toString());
      
      Locale locale0 = Locale.US;
      assertEquals("", locale0.getVariant());
      assertEquals("US", locale0.getCountry());
      assertEquals("USA", locale0.getISO3Country());
      assertEquals("en", locale0.getLanguage());
      assertEquals("en_US", locale0.toString());
      assertEquals("eng", locale0.getISO3Language());
      assertNotNull(locale0);
      
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      assertEquals(0, set0.size());
      assertEquals(true, set0.isEmpty());
      assertEquals("", locale0.getVariant());
      assertEquals("US", locale0.getCountry());
      assertEquals("USA", locale0.getISO3Country());
      assertEquals("en", locale0.getLanguage());
      assertEquals("en_US", locale0.toString());
      assertEquals("eng", locale0.getISO3Language());
      assertNotNull(set0);
      
      boolean boolean0 = true;
      Config config0 = new Config(set0, set0, boolean0, boolean0, boolean0);
      assertEquals(0, set0.size());
      assertEquals(true, set0.isEmpty());
      assertEquals("", locale0.getVariant());
      assertEquals("US", locale0.getCountry());
      assertEquals("USA", locale0.getISO3Country());
      assertEquals("en", locale0.getLanguage());
      assertEquals("en_US", locale0.toString());
      assertEquals("eng", locale0.getISO3Language());
      assertNotNull(config0);
      
      ErrorCollector errorCollector0 = new ErrorCollector();
      assertNotNull(errorCollector0);
      
      com.google.javascript.rhino.Node node0 = IRFactory.transformTree(astRoot0, string0, config0, (ErrorReporter) errorCollector0);
      assertEquals(136, astRoot0.getType());
      assertNull(astRoot0.getJsDoc());
      assertEquals(0, astRoot0.depth());
      assertEquals(-1, astRoot0.getEncodedSourceEnd());
      assertEquals(false, astRoot0.hasChildren());
      assertEquals(-1, astRoot0.getAbsolutePosition());
      assertEquals(-1, astRoot0.getEndLineno());
      assertEquals(-1, astRoot0.getEncodedSourceStart());
      assertEquals(-1, astRoot0.getBaseLineno());
      assertEquals(false, astRoot0.isInStrictMode());
      assertEquals(0, astRoot0.getRegexpCount());
      assertEquals(-1, astRoot0.getLineno());
      assertEquals(0, astRoot0.getFunctionCount());
      assertEquals(1, astRoot0.getLength());
      assertNull(astRoot0.getEncodedSource());
      assertEquals("136", astRoot0.toString());
      assertEquals(-1, astRoot0.getPosition());
      assertEquals(0, astRoot0.getParamCount());
      assertNull(astRoot0.getSourceName());
      assertEquals(0, set0.size());
      assertEquals(true, set0.isEmpty());
      assertEquals("", locale0.getVariant());
      assertEquals("US", locale0.getCountry());
      assertEquals("USA", locale0.getISO3Country());
      assertEquals("en", locale0.getLanguage());
      assertEquals("en_US", locale0.toString());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals(false, node0.isQuotedString());
      assertEquals(-1, node0.getCharno());
      assertEquals(132, node0.getType());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertNotNull(node0);
  }

  @Test
  public void test06()  throws Throwable  {
      AstRoot astRoot0 = new AstRoot();
      assertNull(astRoot0.getEncodedSource());
      assertEquals(-1, astRoot0.getAbsolutePosition());
      assertEquals(-1, astRoot0.getEncodedSourceStart());
      assertEquals(136, astRoot0.getType());
      assertEquals(-1, astRoot0.getEndLineno());
      assertEquals(-1, astRoot0.getEncodedSourceEnd());
      assertEquals(-1, astRoot0.getPosition());
      assertEquals(false, astRoot0.isInStrictMode());
      assertEquals(0, astRoot0.getParamCount());
      assertEquals(-1, astRoot0.getBaseLineno());
      assertEquals(false, astRoot0.hasChildren());
      assertNull(astRoot0.getJsDoc());
      assertEquals(0, astRoot0.getRegexpCount());
      assertEquals("136", astRoot0.toString());
      assertEquals(0, astRoot0.depth());
      assertEquals(-1, astRoot0.getLineno());
      assertNull(astRoot0.getSourceName());
      assertEquals(0, astRoot0.getFunctionCount());
      assertEquals(1, astRoot0.getLength());
      assertNotNull(astRoot0);
      
      String string0 = "<BNe2c}ZW~%r";
      int int0 = 0;
      Token.CommentType token_CommentType0 = Token.CommentType.JSDOC;
      Comment comment0 = new Comment(int0, int0, token_CommentType0, string0);
      assertEquals(0, comment0.getAbsolutePosition());
      assertEquals(161, comment0.getType());
      assertEquals(false, comment0.hasChildren());
      assertEquals(0, comment0.getLength());
      assertEquals(false, comment0.isParsed());
      assertEquals(Token.CommentType.JSDOC, comment0.getCommentType());
      assertEquals("<BNe2c}ZW~%r", comment0.getValue());
      assertNull(comment0.getJsDoc());
      assertEquals(-1, comment0.getLineno());
      assertEquals("161", comment0.toString());
      assertEquals(0, comment0.depth());
      assertEquals(0, comment0.getPosition());
      assertNotNull(comment0);
      
      astRoot0.addComment(comment0);
      assertNull(astRoot0.getEncodedSource());
      assertEquals(-1, astRoot0.getAbsolutePosition());
      assertEquals(-1, astRoot0.getEncodedSourceStart());
      assertEquals(136, astRoot0.getType());
      assertEquals(-1, astRoot0.getEndLineno());
      assertEquals(-1, astRoot0.getEncodedSourceEnd());
      assertEquals(-1, astRoot0.getPosition());
      assertEquals(false, astRoot0.isInStrictMode());
      assertEquals(0, astRoot0.getParamCount());
      assertEquals(-1, astRoot0.getBaseLineno());
      assertEquals(false, astRoot0.hasChildren());
      assertNull(astRoot0.getJsDoc());
      assertEquals(0, astRoot0.getRegexpCount());
      assertEquals("136", astRoot0.toString());
      assertEquals(0, astRoot0.depth());
      assertEquals(-1, astRoot0.getLineno());
      assertNull(astRoot0.getSourceName());
      assertEquals(0, astRoot0.getFunctionCount());
      assertEquals(1, astRoot0.getLength());
      assertEquals(0, comment0.getAbsolutePosition());
      assertEquals(161, comment0.getType());
      assertEquals(false, comment0.hasChildren());
      assertEquals(0, comment0.getLength());
      assertEquals(false, comment0.isParsed());
      assertEquals(Token.CommentType.JSDOC, comment0.getCommentType());
      assertEquals("<BNe2c}ZW~%r", comment0.getValue());
      assertNull(comment0.getJsDoc());
      assertEquals(-1, comment0.getLineno());
      assertEquals("161", comment0.toString());
      assertEquals(1, comment0.depth());
      assertEquals(1, comment0.getPosition());
      
      Locale locale0 = Locale.US;
      assertEquals("en", locale0.getLanguage());
      assertEquals("USA", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en_US", locale0.toString());
      assertEquals("US", locale0.getCountry());
      assertNotNull(locale0);
      
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      assertEquals(true, set0.isEmpty());
      assertEquals(0, set0.size());
      assertEquals("en", locale0.getLanguage());
      assertEquals("USA", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en_US", locale0.toString());
      assertEquals("US", locale0.getCountry());
      assertNotNull(set0);
      
      boolean boolean0 = true;
      Config config0 = new Config(set0, set0, boolean0, boolean0, boolean0);
      assertEquals(true, set0.isEmpty());
      assertEquals(0, set0.size());
      assertEquals("en", locale0.getLanguage());
      assertEquals("USA", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en_US", locale0.toString());
      assertEquals("US", locale0.getCountry());
      assertNotNull(config0);
      
      ErrorCollector errorCollector0 = new ErrorCollector();
      assertNotNull(errorCollector0);
      
      // Undeclared exception!
      try {
        com.google.javascript.rhino.Node node0 = IRFactory.transformTree(astRoot0, string0, config0, (ErrorReporter) errorCollector0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test07()  throws Throwable  {
      AstRoot astRoot0 = new AstRoot();
      assertEquals(0, astRoot0.getFunctionCount());
      assertEquals(0, astRoot0.depth());
      assertEquals(-1, astRoot0.getEndLineno());
      assertNull(astRoot0.getJsDoc());
      assertEquals(1, astRoot0.getLength());
      assertEquals(-1, astRoot0.getEncodedSourceStart());
      assertEquals(-1, astRoot0.getBaseLineno());
      assertEquals(false, astRoot0.isInStrictMode());
      assertEquals(136, astRoot0.getType());
      assertEquals(-1, astRoot0.getPosition());
      assertEquals("136", astRoot0.toString());
      assertEquals(0, astRoot0.getRegexpCount());
      assertEquals(false, astRoot0.hasChildren());
      assertEquals(-1, astRoot0.getAbsolutePosition());
      assertEquals(-1, astRoot0.getEncodedSourceEnd());
      assertEquals(0, astRoot0.getParamCount());
      assertEquals(-1, astRoot0.getLineno());
      assertNull(astRoot0.getSourceName());
      assertNull(astRoot0.getEncodedSource());
      assertNotNull(astRoot0);
      
      int int0 = 108;
      String string0 = "|;[Q~Y";
      Locale locale0 = Locale.GERMANY;
      assertEquals("DE", locale0.getCountry());
      assertEquals("de", locale0.getLanguage());
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("de_DE", locale0.toString());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertNotNull(locale0);
      
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      assertEquals("DE", locale0.getCountry());
      assertEquals("de", locale0.getLanguage());
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("de_DE", locale0.toString());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals(true, set0.isEmpty());
      assertEquals(0, set0.size());
      assertNotNull(set0);
      
      boolean boolean0 = true;
      Config config0 = new Config(set0, set0, boolean0, boolean0, boolean0);
      assertEquals("DE", locale0.getCountry());
      assertEquals("de", locale0.getLanguage());
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("de_DE", locale0.toString());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals(true, set0.isEmpty());
      assertEquals(0, set0.size());
      assertNotNull(config0);
      
      ToolErrorReporter toolErrorReporter0 = new ToolErrorReporter(boolean0);
      assertEquals(false, toolErrorReporter0.hasReportedError());
      assertEquals(true, toolErrorReporter0.isReportingWarnings());
      assertNotNull(toolErrorReporter0);
      
      NumberLiteral numberLiteral0 = (NumberLiteral)Node.newNumber((double) int0);
      assertEquals(108.0, numberLiteral0.getDouble(), 0.01D);
      assertEquals("40", numberLiteral0.toString());
      assertEquals(-1, numberLiteral0.getPosition());
      assertEquals(108.0, numberLiteral0.getNumber(), 0.01D);
      assertEquals(-1, numberLiteral0.getLineno());
      assertEquals(-1, numberLiteral0.getAbsolutePosition());
      assertEquals(0, numberLiteral0.depth());
      assertEquals(false, numberLiteral0.hasChildren());
      assertNull(numberLiteral0.getJsDoc());
      assertEquals(1, numberLiteral0.getLength());
      assertEquals(40, numberLiteral0.getType());
      assertNull(numberLiteral0.getValue());
      assertNotNull(numberLiteral0);
      
      astRoot0.addChildToBack((Node) numberLiteral0);
      assertEquals(0, astRoot0.getFunctionCount());
      assertEquals(0, astRoot0.depth());
      assertEquals(-1, astRoot0.getEndLineno());
      assertNull(astRoot0.getJsDoc());
      assertEquals(1, astRoot0.getLength());
      assertEquals(-1, astRoot0.getEncodedSourceStart());
      assertEquals(-1, astRoot0.getBaseLineno());
      assertEquals(false, astRoot0.isInStrictMode());
      assertEquals(136, astRoot0.getType());
      assertEquals(-1, astRoot0.getPosition());
      assertEquals("136", astRoot0.toString());
      assertEquals(0, astRoot0.getRegexpCount());
      assertEquals(-1, astRoot0.getAbsolutePosition());
      assertEquals(-1, astRoot0.getEncodedSourceEnd());
      assertEquals(0, astRoot0.getParamCount());
      assertEquals(-1, astRoot0.getLineno());
      assertEquals(true, astRoot0.hasChildren());
      assertNull(astRoot0.getSourceName());
      assertNull(astRoot0.getEncodedSource());
      assertEquals(108.0, numberLiteral0.getDouble(), 0.01D);
      assertEquals("40", numberLiteral0.toString());
      assertEquals(-1, numberLiteral0.getPosition());
      assertEquals(108.0, numberLiteral0.getNumber(), 0.01D);
      assertEquals(-1, numberLiteral0.getLineno());
      assertEquals(-1, numberLiteral0.getAbsolutePosition());
      assertEquals(0, numberLiteral0.depth());
      assertEquals(false, numberLiteral0.hasChildren());
      assertNull(numberLiteral0.getJsDoc());
      assertEquals(1, numberLiteral0.getLength());
      assertEquals(40, numberLiteral0.getType());
      assertNull(numberLiteral0.getValue());
      
      com.google.javascript.rhino.Node node0 = IRFactory.transformTree(astRoot0, string0, config0, (ErrorReporter) toolErrorReporter0);
      assertEquals(0, astRoot0.getFunctionCount());
      assertEquals(0, astRoot0.depth());
      assertEquals(-1, astRoot0.getEndLineno());
      assertNull(astRoot0.getJsDoc());
      assertEquals(1, astRoot0.getLength());
      assertEquals(-1, astRoot0.getEncodedSourceStart());
      assertEquals(-1, astRoot0.getBaseLineno());
      assertEquals(false, astRoot0.isInStrictMode());
      assertEquals(136, astRoot0.getType());
      assertEquals(-1, astRoot0.getPosition());
      assertEquals("136", astRoot0.toString());
      assertEquals(0, astRoot0.getRegexpCount());
      assertEquals(-1, astRoot0.getAbsolutePosition());
      assertEquals(-1, astRoot0.getEncodedSourceEnd());
      assertEquals(0, astRoot0.getParamCount());
      assertEquals(-1, astRoot0.getLineno());
      assertEquals(true, astRoot0.hasChildren());
      assertNull(astRoot0.getSourceName());
      assertNull(astRoot0.getEncodedSource());
      assertEquals("DE", locale0.getCountry());
      assertEquals("de", locale0.getLanguage());
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("de_DE", locale0.toString());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals(true, set0.isEmpty());
      assertEquals(0, set0.size());
      assertEquals(false, node0.isQuotedString());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(-1, node0.getCharno());
      assertEquals(-1, node0.getLineno());
      assertEquals(132, node0.getType());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(true, node0.hasOneChild());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(1, node0.getChildCount());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(true, node0.hasChildren());
      assertEquals(false, toolErrorReporter0.hasReportedError());
      assertEquals(true, toolErrorReporter0.isReportingWarnings());
      assertNotNull(node0);
  }

  @Test
  public void test08()  throws Throwable  {
      AstRoot astRoot0 = new AstRoot();
      assertEquals(0, astRoot0.getParamCount());
      assertEquals(0, astRoot0.getFunctionCount());
      assertEquals(false, astRoot0.hasChildren());
      assertEquals(-1, astRoot0.getBaseLineno());
      assertEquals(-1, astRoot0.getEncodedSourceStart());
      assertEquals(1, astRoot0.getLength());
      assertEquals(-1, astRoot0.getPosition());
      assertEquals(-1, astRoot0.getEncodedSourceEnd());
      assertEquals(0, astRoot0.getRegexpCount());
      assertEquals(-1, astRoot0.getAbsolutePosition());
      assertNull(astRoot0.getEncodedSource());
      assertEquals(-1, astRoot0.getLineno());
      assertEquals(-1, astRoot0.getEndLineno());
      assertEquals(136, astRoot0.getType());
      assertEquals(0, astRoot0.depth());
      assertEquals("136", astRoot0.toString());
      assertEquals(false, astRoot0.isInStrictMode());
      assertNull(astRoot0.getSourceName());
      assertNull(astRoot0.getJsDoc());
      assertNotNull(astRoot0);
      
      int int0 = 57296;
      EmptyExpression emptyExpression0 = new EmptyExpression(int0, int0);
      assertEquals("128", emptyExpression0.toString());
      assertEquals(57296, emptyExpression0.getPosition());
      assertEquals(false, emptyExpression0.hasChildren());
      assertNull(emptyExpression0.getJsDoc());
      assertEquals(128, emptyExpression0.getType());
      assertEquals(57296, emptyExpression0.getLength());
      assertEquals(-1, emptyExpression0.getLineno());
      assertEquals(57296, emptyExpression0.getAbsolutePosition());
      assertEquals(0, emptyExpression0.depth());
      assertNotNull(emptyExpression0);
      
      astRoot0.addChild((AstNode) emptyExpression0);
      assertEquals(0, astRoot0.getParamCount());
      assertEquals(0, astRoot0.getFunctionCount());
      assertEquals(-1, astRoot0.getBaseLineno());
      assertEquals(-1, astRoot0.getEncodedSourceStart());
      assertEquals(-1, astRoot0.getPosition());
      assertEquals(-1, astRoot0.getEncodedSourceEnd());
      assertEquals(0, astRoot0.getRegexpCount());
      assertEquals(-1, astRoot0.getAbsolutePosition());
      assertNull(astRoot0.getEncodedSource());
      assertEquals(-1, astRoot0.getLineno());
      assertEquals(-1, astRoot0.getEndLineno());
      assertEquals(136, astRoot0.getType());
      assertEquals(0, astRoot0.depth());
      assertEquals("136", astRoot0.toString());
      assertEquals(false, astRoot0.isInStrictMode());
      assertNull(astRoot0.getSourceName());
      assertEquals(114593, astRoot0.getLength());
      assertEquals(true, astRoot0.hasChildren());
      assertNull(astRoot0.getJsDoc());
      assertEquals(1, emptyExpression0.depth());
      assertEquals("128", emptyExpression0.toString());
      assertEquals(false, emptyExpression0.hasChildren());
      assertNull(emptyExpression0.getJsDoc());
      assertEquals(128, emptyExpression0.getType());
      assertEquals(57297, emptyExpression0.getPosition());
      assertEquals(57296, emptyExpression0.getLength());
      assertEquals(-1, emptyExpression0.getLineno());
      assertEquals(57296, emptyExpression0.getAbsolutePosition());
      
      String string0 = "TN3j%4#qZy";
      Charset charset0 = Charset.defaultCharset();
      assertEquals(true, charset0.canEncode());
      assertEquals("UTF-8", charset0.toString());
      assertEquals("UTF-8", charset0.displayName());
      assertEquals(true, charset0.isRegistered());
      assertEquals("UTF-8", charset0.name());
      assertNotNull(charset0);
      
      Set<String> set0 = charset0.aliases();
      assertEquals(true, charset0.canEncode());
      assertEquals("UTF-8", charset0.toString());
      assertEquals("UTF-8", charset0.displayName());
      assertEquals(true, charset0.isRegistered());
      assertEquals("UTF-8", charset0.name());
      assertEquals(2, set0.size());
      assertEquals(false, set0.isEmpty());
      assertNotNull(set0);
      
      boolean boolean0 = true;
      Config config0 = new Config(set0, set0, boolean0, boolean0, boolean0);
      assertEquals(true, charset0.canEncode());
      assertEquals("UTF-8", charset0.toString());
      assertEquals("UTF-8", charset0.displayName());
      assertEquals(true, charset0.isRegistered());
      assertEquals("UTF-8", charset0.name());
      assertEquals(2, set0.size());
      assertEquals(false, set0.isEmpty());
      assertNotNull(config0);
      
      ToolErrorReporter toolErrorReporter0 = new ToolErrorReporter(boolean0);
      assertEquals(true, toolErrorReporter0.isReportingWarnings());
      assertEquals(false, toolErrorReporter0.hasReportedError());
      assertNotNull(toolErrorReporter0);
      
      com.google.javascript.rhino.Node node0 = IRFactory.transformTree(astRoot0, string0, config0, (ErrorReporter) toolErrorReporter0);
      assertEquals(true, toolErrorReporter0.isReportingWarnings());
      assertEquals(false, toolErrorReporter0.hasReportedError());
      assertEquals(0, astRoot0.getParamCount());
      assertEquals(0, astRoot0.getFunctionCount());
      assertEquals(-1, astRoot0.getBaseLineno());
      assertEquals(-1, astRoot0.getEncodedSourceStart());
      assertEquals(-1, astRoot0.getPosition());
      assertEquals(-1, astRoot0.getEncodedSourceEnd());
      assertEquals(0, astRoot0.getRegexpCount());
      assertEquals(-1, astRoot0.getAbsolutePosition());
      assertNull(astRoot0.getEncodedSource());
      assertEquals(-1, astRoot0.getLineno());
      assertEquals(-1, astRoot0.getEndLineno());
      assertEquals(136, astRoot0.getType());
      assertEquals(0, astRoot0.depth());
      assertEquals("136", astRoot0.toString());
      assertEquals(false, astRoot0.isInStrictMode());
      assertNull(astRoot0.getSourceName());
      assertEquals(114593, astRoot0.getLength());
      assertEquals(true, astRoot0.hasChildren());
      assertNull(astRoot0.getJsDoc());
      assertEquals(true, charset0.canEncode());
      assertEquals("UTF-8", charset0.toString());
      assertEquals("UTF-8", charset0.displayName());
      assertEquals(true, charset0.isRegistered());
      assertEquals("UTF-8", charset0.name());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isVarArgs());
      assertEquals(132, node0.getType());
      assertEquals(-1, node0.getLineno());
      assertEquals(true, node0.hasChildren());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(true, node0.hasOneChild());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(1, node0.getChildCount());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(2, set0.size());
      assertEquals(false, set0.isEmpty());
      assertNotNull(node0);
  }

  @Test
  public void test09()  throws Throwable  {
      AstRoot astRoot0 = new AstRoot();
      assertEquals(false, astRoot0.isInStrictMode());
      assertEquals(0, astRoot0.getParamCount());
      assertEquals(-1, astRoot0.getEncodedSourceStart());
      assertEquals(-1, astRoot0.getBaseLineno());
      assertNull(astRoot0.getEncodedSource());
      assertEquals(-1, astRoot0.getEncodedSourceEnd());
      assertEquals(-1, astRoot0.getLineno());
      assertNull(astRoot0.getSourceName());
      assertEquals("136", astRoot0.toString());
      assertNull(astRoot0.getJsDoc());
      assertEquals(-1, astRoot0.getEndLineno());
      assertEquals(0, astRoot0.depth());
      assertEquals(0, astRoot0.getRegexpCount());
      assertEquals(false, astRoot0.hasChildren());
      assertEquals(-1, astRoot0.getPosition());
      assertEquals(0, astRoot0.getFunctionCount());
      assertEquals(1, astRoot0.getLength());
      assertEquals(-1, astRoot0.getAbsolutePosition());
      assertEquals(136, astRoot0.getType());
      assertNotNull(astRoot0);
      
      FunctionNode functionNode0 = new FunctionNode();
      assertEquals(false, functionNode0.getIgnoreDynamicScope());
      assertEquals(1, functionNode0.getLength());
      assertEquals(false, functionNode0.hasChildren());
      assertEquals(false, functionNode0.isGetter());
      assertNull(functionNode0.getEncodedSource());
      assertEquals(false, functionNode0.isGetterOrSetter());
      assertEquals(-1, functionNode0.getEncodedSourceStart());
      assertEquals(0, functionNode0.getRegexpCount());
      assertEquals(false, functionNode0.isExpressionClosure());
      assertNull(functionNode0.getSourceName());
      assertEquals(false, functionNode0.isGenerator());
      assertEquals(-1, functionNode0.getLineno());
      assertEquals(0, functionNode0.depth());
      assertEquals(false, functionNode0.requiresActivation());
      assertEquals(false, functionNode0.isSetter());
      assertEquals(-1, functionNode0.getLp());
      assertEquals(0, functionNode0.getParamCount());
      assertEquals(-1, functionNode0.getAbsolutePosition());
      assertEquals("", functionNode0.getName());
      assertNull(functionNode0.getJsDoc());
      assertEquals(-1, functionNode0.getEncodedSourceEnd());
      assertEquals(-1, functionNode0.getRp());
      assertEquals(0, functionNode0.getFunctionCount());
      assertEquals(0, functionNode0.getFunctionType());
      assertEquals(-1, functionNode0.getPosition());
      assertEquals(109, functionNode0.getType());
      assertEquals(-1, functionNode0.getBaseLineno());
      assertEquals("109", functionNode0.toString());
      assertEquals(-1, functionNode0.getEndLineno());
      assertNotNull(functionNode0);
      
      astRoot0.addChildrenToFront((Node) functionNode0);
      assertEquals(false, functionNode0.getIgnoreDynamicScope());
      assertEquals(1, functionNode0.getLength());
      assertEquals(false, functionNode0.hasChildren());
      assertEquals(false, functionNode0.isGetter());
      assertNull(functionNode0.getEncodedSource());
      assertEquals(false, functionNode0.isGetterOrSetter());
      assertEquals(-1, functionNode0.getEncodedSourceStart());
      assertEquals(0, functionNode0.getRegexpCount());
      assertEquals(false, functionNode0.isExpressionClosure());
      assertNull(functionNode0.getSourceName());
      assertEquals(false, functionNode0.isGenerator());
      assertEquals(-1, functionNode0.getLineno());
      assertEquals(0, functionNode0.depth());
      assertEquals(false, functionNode0.requiresActivation());
      assertEquals(false, functionNode0.isSetter());
      assertEquals(-1, functionNode0.getLp());
      assertEquals(0, functionNode0.getParamCount());
      assertEquals(-1, functionNode0.getAbsolutePosition());
      assertEquals("", functionNode0.getName());
      assertNull(functionNode0.getJsDoc());
      assertEquals(-1, functionNode0.getEncodedSourceEnd());
      assertEquals(-1, functionNode0.getRp());
      assertEquals(0, functionNode0.getFunctionCount());
      assertEquals(0, functionNode0.getFunctionType());
      assertEquals(-1, functionNode0.getPosition());
      assertEquals(109, functionNode0.getType());
      assertEquals(-1, functionNode0.getBaseLineno());
      assertEquals("109", functionNode0.toString());
      assertEquals(-1, functionNode0.getEndLineno());
      assertEquals(false, astRoot0.isInStrictMode());
      assertEquals(true, astRoot0.hasChildren());
      assertEquals(0, astRoot0.getParamCount());
      assertEquals(-1, astRoot0.getEncodedSourceStart());
      assertEquals(-1, astRoot0.getBaseLineno());
      assertNull(astRoot0.getEncodedSource());
      assertEquals(-1, astRoot0.getEncodedSourceEnd());
      assertEquals(-1, astRoot0.getLineno());
      assertNull(astRoot0.getSourceName());
      assertEquals("136", astRoot0.toString());
      assertNull(astRoot0.getJsDoc());
      assertEquals(-1, astRoot0.getEndLineno());
      assertEquals(0, astRoot0.depth());
      assertEquals(0, astRoot0.getRegexpCount());
      assertEquals(-1, astRoot0.getPosition());
      assertEquals(0, astRoot0.getFunctionCount());
      assertEquals(1, astRoot0.getLength());
      assertEquals(-1, astRoot0.getAbsolutePosition());
      assertEquals(136, astRoot0.getType());
      
      String string0 = "com.google.javascript.jscomp.mozilla.rhino.tools.resources.Messages";
      Locale locale0 = Locale.GERMANY;
      assertEquals("DE", locale0.getCountry());
      assertEquals("de_DE", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("de", locale0.getLanguage());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("DEU", locale0.getISO3Country());
      assertNotNull(locale0);
      
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      assertEquals(true, set0.isEmpty());
      assertEquals(0, set0.size());
      assertEquals("DE", locale0.getCountry());
      assertEquals("de_DE", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("de", locale0.getLanguage());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("DEU", locale0.getISO3Country());
      assertNotNull(set0);
      
      boolean boolean0 = true;
      Config config0 = new Config(set0, set0, boolean0, boolean0, boolean0);
      assertEquals(true, set0.isEmpty());
      assertEquals(0, set0.size());
      assertEquals("DE", locale0.getCountry());
      assertEquals("de_DE", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("de", locale0.getLanguage());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("DEU", locale0.getISO3Country());
      assertNotNull(config0);
      
      ToolErrorReporter toolErrorReporter0 = new ToolErrorReporter(boolean0);
      assertEquals(true, toolErrorReporter0.isReportingWarnings());
      assertEquals(false, toolErrorReporter0.hasReportedError());
      assertNotNull(toolErrorReporter0);
      
      // Undeclared exception!
      try {
        com.google.javascript.rhino.Node node0 = IRFactory.transformTree(astRoot0, string0, config0, (ErrorReporter) toolErrorReporter0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test10()  throws Throwable  {
      AstRoot astRoot0 = new AstRoot();
      assertEquals(-1, astRoot0.getLineno());
      assertEquals(false, astRoot0.hasChildren());
      assertEquals(-1, astRoot0.getEncodedSourceEnd());
      assertEquals(136, astRoot0.getType());
      assertEquals("136", astRoot0.toString());
      assertEquals(-1, astRoot0.getAbsolutePosition());
      assertEquals(-1, astRoot0.getEncodedSourceStart());
      assertEquals(-1, astRoot0.getPosition());
      assertNull(astRoot0.getSourceName());
      assertNull(astRoot0.getJsDoc());
      assertEquals(0, astRoot0.getRegexpCount());
      assertEquals(-1, astRoot0.getBaseLineno());
      assertNull(astRoot0.getEncodedSource());
      assertEquals(false, astRoot0.isInStrictMode());
      assertEquals(0, astRoot0.getParamCount());
      assertEquals(0, astRoot0.getFunctionCount());
      assertEquals(1, astRoot0.getLength());
      assertEquals(0, astRoot0.depth());
      assertEquals(-1, astRoot0.getEndLineno());
      assertNotNull(astRoot0);
      
      String string0 = "?/";
      int int0 = 1439;
      Block block0 = new Block(int0, int0);
      assertEquals(1439, block0.getAbsolutePosition());
      assertEquals(0, block0.depth());
      assertEquals("129", block0.toString());
      assertEquals(false, block0.hasChildren());
      assertEquals(1439, block0.getLength());
      assertEquals(1439, block0.getPosition());
      assertEquals(-1, block0.getLineno());
      assertEquals(129, block0.getType());
      assertNull(block0.getJsDoc());
      assertNotNull(block0);
      
      astRoot0.addChild((AstNode) block0);
      assertEquals(1439, block0.getAbsolutePosition());
      assertEquals("129", block0.toString());
      assertEquals(1, block0.depth());
      assertEquals(false, block0.hasChildren());
      assertEquals(1439, block0.getLength());
      assertEquals(1440, block0.getPosition());
      assertEquals(-1, block0.getLineno());
      assertEquals(129, block0.getType());
      assertNull(block0.getJsDoc());
      assertEquals(-1, astRoot0.getLineno());
      assertEquals(-1, astRoot0.getEncodedSourceEnd());
      assertEquals(136, astRoot0.getType());
      assertEquals("136", astRoot0.toString());
      assertEquals(-1, astRoot0.getAbsolutePosition());
      assertEquals(-1, astRoot0.getEncodedSourceStart());
      assertEquals(-1, astRoot0.getPosition());
      assertNull(astRoot0.getSourceName());
      assertNull(astRoot0.getJsDoc());
      assertEquals(2879, astRoot0.getLength());
      assertEquals(0, astRoot0.getRegexpCount());
      assertEquals(-1, astRoot0.getBaseLineno());
      assertEquals(true, astRoot0.hasChildren());
      assertNull(astRoot0.getEncodedSource());
      assertEquals(false, astRoot0.isInStrictMode());
      assertEquals(0, astRoot0.getParamCount());
      assertEquals(0, astRoot0.getFunctionCount());
      assertEquals(0, astRoot0.depth());
      assertEquals(-1, astRoot0.getEndLineno());
      
      Locale locale0 = Locale.GERMANY;
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("de", locale0.getLanguage());
      assertEquals("DE", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("de_DE", locale0.toString());
      assertNotNull(locale0);
      
      NewExpression newExpression0 = new NewExpression(int0, int0);
      assertNull(newExpression0.getJsDoc());
      assertEquals(0, newExpression0.depth());
      assertEquals(-1, newExpression0.getLineno());
      assertEquals(1439, newExpression0.getLength());
      assertEquals(1439, newExpression0.getPosition());
      assertEquals("30", newExpression0.toString());
      assertEquals(false, newExpression0.hasChildren());
      assertEquals(1439, newExpression0.getAbsolutePosition());
      assertEquals(-1, newExpression0.getLp());
      assertEquals(-1, newExpression0.getRp());
      assertEquals(30, newExpression0.getType());
      assertNotNull(newExpression0);
      
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      assertEquals(true, set0.isEmpty());
      assertEquals(0, set0.size());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("de", locale0.getLanguage());
      assertEquals("DE", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("de_DE", locale0.toString());
      assertNotNull(set0);
      
      boolean boolean0 = false;
      Config config0 = new Config(set0, set0, boolean0, boolean0, boolean0);
      assertEquals(true, set0.isEmpty());
      assertEquals(0, set0.size());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("de", locale0.getLanguage());
      assertEquals("DE", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("de_DE", locale0.toString());
      assertNotNull(config0);
      
      Context context0 = new Context();
      assertEquals(0, context0.getOptimizationLevel());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertEquals(false, context0.isGeneratingDebugChanged());
      assertEquals(false, context0.isGeneratingDebug());
      assertEquals(false, context0.hasCompileFunctionsWithDynamicScope());
      assertEquals(false, context0.isSealed());
      assertEquals(true, context0.isGeneratingSource());
      assertEquals(2147483647, context0.getMaximumInterpreterStackDepth());
      assertEquals(0, context0.getLanguageVersion());
      assertFalse(context0.generateObserverCount);
      assertNotNull(context0);
      
      ToolErrorReporter toolErrorReporter0 = new ToolErrorReporter(context0.generateObserverCount);
      assertEquals(false, toolErrorReporter0.isReportingWarnings());
      assertEquals(false, toolErrorReporter0.hasReportedError());
      assertEquals(0, context0.getOptimizationLevel());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertEquals(false, context0.isGeneratingDebugChanged());
      assertEquals(false, context0.isGeneratingDebug());
      assertEquals(false, context0.hasCompileFunctionsWithDynamicScope());
      assertEquals(false, context0.isSealed());
      assertEquals(true, context0.isGeneratingSource());
      assertEquals(2147483647, context0.getMaximumInterpreterStackDepth());
      assertEquals(0, context0.getLanguageVersion());
      assertFalse(context0.generateObserverCount);
      assertNotNull(toolErrorReporter0);
      
      block0.addChildrenToFront((Node) newExpression0);
      assertNull(newExpression0.getJsDoc());
      assertEquals(0, newExpression0.depth());
      assertEquals(-1, newExpression0.getLineno());
      assertEquals(1439, newExpression0.getLength());
      assertEquals(1439, newExpression0.getPosition());
      assertEquals("30", newExpression0.toString());
      assertEquals(false, newExpression0.hasChildren());
      assertEquals(1439, newExpression0.getAbsolutePosition());
      assertEquals(-1, newExpression0.getLp());
      assertEquals(-1, newExpression0.getRp());
      assertEquals(30, newExpression0.getType());
      assertEquals(1439, block0.getAbsolutePosition());
      assertEquals("129", block0.toString());
      assertEquals(1, block0.depth());
      assertEquals(1439, block0.getLength());
      assertEquals(1440, block0.getPosition());
      assertEquals(-1, block0.getLineno());
      assertEquals(129, block0.getType());
      assertNull(block0.getJsDoc());
      assertEquals(true, block0.hasChildren());
      
      // Undeclared exception!
      try {
        com.google.javascript.rhino.Node node0 = IRFactory.transformTree(astRoot0, string0, config0, (ErrorReporter) toolErrorReporter0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test11()  throws Throwable  {
      AstRoot astRoot0 = new AstRoot();
      assertNull(astRoot0.getSourceName());
      assertEquals(-1, astRoot0.getAbsolutePosition());
      assertEquals(1, astRoot0.getLength());
      assertEquals(-1, astRoot0.getPosition());
      assertEquals("136", astRoot0.toString());
      assertEquals(-1, astRoot0.getEndLineno());
      assertEquals(false, astRoot0.hasChildren());
      assertEquals(0, astRoot0.getParamCount());
      assertEquals(-1, astRoot0.getEncodedSourceStart());
      assertNull(astRoot0.getJsDoc());
      assertEquals(false, astRoot0.isInStrictMode());
      assertEquals(0, astRoot0.depth());
      assertEquals(0, astRoot0.getRegexpCount());
      assertEquals(-1, astRoot0.getBaseLineno());
      assertEquals(-1, astRoot0.getLineno());
      assertEquals(-1, astRoot0.getEncodedSourceEnd());
      assertEquals(136, astRoot0.getType());
      assertEquals(0, astRoot0.getFunctionCount());
      assertNull(astRoot0.getEncodedSource());
      assertNotNull(astRoot0);
      
      String string0 = "?/";
      int int0 = 1439;
      Locale locale0 = Locale.GERMANY;
      assertEquals("", locale0.getVariant());
      assertEquals("de_DE", locale0.toString());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("DE", locale0.getCountry());
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("de", locale0.getLanguage());
      assertNotNull(locale0);
      
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      assertEquals(0, set0.size());
      assertEquals(true, set0.isEmpty());
      assertEquals("", locale0.getVariant());
      assertEquals("de_DE", locale0.toString());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("DE", locale0.getCountry());
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("de", locale0.getLanguage());
      assertNotNull(set0);
      
      boolean boolean0 = false;
      Config config0 = new Config(set0, set0, boolean0, boolean0, boolean0);
      assertEquals(0, set0.size());
      assertEquals(true, set0.isEmpty());
      assertEquals("", locale0.getVariant());
      assertEquals("de_DE", locale0.toString());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("DE", locale0.getCountry());
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("de", locale0.getLanguage());
      assertNotNull(config0);
      
      Context context0 = new Context();
      assertEquals(2147483647, context0.getMaximumInterpreterStackDepth());
      assertEquals(true, context0.isGeneratingSource());
      assertEquals(false, context0.isGeneratingDebugChanged());
      assertEquals(false, context0.isGeneratingDebug());
      assertEquals(false, context0.isSealed());
      assertEquals(0, context0.getLanguageVersion());
      assertEquals(0, context0.getOptimizationLevel());
      assertEquals(false, context0.hasCompileFunctionsWithDynamicScope());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertFalse(context0.generateObserverCount);
      assertNotNull(context0);
      
      ToolErrorReporter toolErrorReporter0 = new ToolErrorReporter(context0.generateObserverCount);
      assertEquals(false, toolErrorReporter0.isReportingWarnings());
      assertEquals(false, toolErrorReporter0.hasReportedError());
      assertEquals(2147483647, context0.getMaximumInterpreterStackDepth());
      assertEquals(true, context0.isGeneratingSource());
      assertEquals(false, context0.isGeneratingDebugChanged());
      assertEquals(false, context0.isGeneratingDebug());
      assertEquals(false, context0.isSealed());
      assertEquals(0, context0.getLanguageVersion());
      assertEquals(0, context0.getOptimizationLevel());
      assertEquals(false, context0.hasCompileFunctionsWithDynamicScope());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertFalse(context0.generateObserverCount);
      assertNotNull(toolErrorReporter0);
      
      LetNode letNode0 = new LetNode(int0);
      assertEquals(1439, letNode0.getAbsolutePosition());
      assertNull(letNode0.getJsDoc());
      assertEquals(0, letNode0.depth());
      assertEquals(false, letNode0.hasChildren());
      assertEquals(-1, letNode0.getRp());
      assertEquals("158", letNode0.toString());
      assertEquals(-1, letNode0.getLp());
      assertEquals(-1, letNode0.getLineno());
      assertEquals(1439, letNode0.getPosition());
      assertEquals(158, letNode0.getType());
      assertEquals(1, letNode0.getLength());
      assertNotNull(letNode0);
      
      astRoot0.addChildToFront((Node) letNode0);
      assertNull(astRoot0.getSourceName());
      assertEquals(-1, astRoot0.getAbsolutePosition());
      assertEquals(1, astRoot0.getLength());
      assertEquals(-1, astRoot0.getPosition());
      assertEquals("136", astRoot0.toString());
      assertEquals(-1, astRoot0.getEndLineno());
      assertEquals(0, astRoot0.getParamCount());
      assertEquals(-1, astRoot0.getEncodedSourceStart());
      assertNull(astRoot0.getJsDoc());
      assertEquals(false, astRoot0.isInStrictMode());
      assertEquals(0, astRoot0.depth());
      assertEquals(0, astRoot0.getRegexpCount());
      assertEquals(-1, astRoot0.getBaseLineno());
      assertEquals(-1, astRoot0.getLineno());
      assertEquals(-1, astRoot0.getEncodedSourceEnd());
      assertEquals(136, astRoot0.getType());
      assertEquals(0, astRoot0.getFunctionCount());
      assertEquals(true, astRoot0.hasChildren());
      assertNull(astRoot0.getEncodedSource());
      assertEquals(1439, letNode0.getAbsolutePosition());
      assertNull(letNode0.getJsDoc());
      assertEquals(0, letNode0.depth());
      assertEquals(false, letNode0.hasChildren());
      assertEquals(-1, letNode0.getRp());
      assertEquals("158", letNode0.toString());
      assertEquals(-1, letNode0.getLp());
      assertEquals(-1, letNode0.getLineno());
      assertEquals(1439, letNode0.getPosition());
      assertEquals(158, letNode0.getType());
      assertEquals(1, letNode0.getLength());
      
      com.google.javascript.rhino.Node node0 = IRFactory.transformTree(astRoot0, string0, config0, (ErrorReporter) toolErrorReporter0);
      assertNull(astRoot0.getSourceName());
      assertEquals(-1, astRoot0.getAbsolutePosition());
      assertEquals(1, astRoot0.getLength());
      assertEquals(-1, astRoot0.getPosition());
      assertEquals("136", astRoot0.toString());
      assertEquals(-1, astRoot0.getEndLineno());
      assertEquals(0, astRoot0.getParamCount());
      assertEquals(-1, astRoot0.getEncodedSourceStart());
      assertNull(astRoot0.getJsDoc());
      assertEquals(false, astRoot0.isInStrictMode());
      assertEquals(0, astRoot0.depth());
      assertEquals(0, astRoot0.getRegexpCount());
      assertEquals(-1, astRoot0.getBaseLineno());
      assertEquals(-1, astRoot0.getLineno());
      assertEquals(-1, astRoot0.getEncodedSourceEnd());
      assertEquals(136, astRoot0.getType());
      assertEquals(0, astRoot0.getFunctionCount());
      assertEquals(true, astRoot0.hasChildren());
      assertNull(astRoot0.getEncodedSource());
      assertEquals(0, set0.size());
      assertEquals(true, set0.isEmpty());
      assertEquals(false, toolErrorReporter0.isReportingWarnings());
      assertEquals(true, toolErrorReporter0.hasReportedError());
      assertEquals(2147483647, context0.getMaximumInterpreterStackDepth());
      assertEquals(true, context0.isGeneratingSource());
      assertEquals(false, context0.isGeneratingDebugChanged());
      assertEquals(false, context0.isGeneratingDebug());
      assertEquals(false, context0.isSealed());
      assertEquals(0, context0.getLanguageVersion());
      assertEquals(0, context0.getOptimizationLevel());
      assertEquals(false, context0.hasCompileFunctionsWithDynamicScope());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertEquals("", locale0.getVariant());
      assertEquals("de_DE", locale0.toString());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("DE", locale0.getCountry());
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("de", locale0.getLanguage());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(1, node0.getChildCount());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isQuotedString());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(-1, node0.getLineno());
      assertEquals(true, node0.hasChildren());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(132, node0.getType());
      assertEquals(true, node0.hasOneChild());
      assertFalse(context0.generateObserverCount);
      assertNotNull(node0);
  }
}
