/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 22:07:56 GMT 2014
 */

package com.google.javascript.jscomp.parsing;

import static org.junit.Assert.*;
import org.junit.Test;
import com.google.javascript.jscomp.mozilla.rhino.Context;
import com.google.javascript.jscomp.mozilla.rhino.ErrorReporter;
import com.google.javascript.jscomp.mozilla.rhino.Node;
import com.google.javascript.jscomp.mozilla.rhino.ast.AstRoot;
import com.google.javascript.jscomp.mozilla.rhino.ast.ErrorCollector;
import com.google.javascript.jscomp.mozilla.rhino.ast.NewExpression;
import com.google.javascript.jscomp.mozilla.rhino.ast.NumberLiteral;
import com.google.javascript.jscomp.mozilla.rhino.ast.ReturnStatement;
import com.google.javascript.jscomp.mozilla.rhino.ast.Scope;
import com.google.javascript.jscomp.parsing.Config;
import com.google.javascript.jscomp.parsing.IRFactory;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;

import org.evosuite.runtime.mock.java.lang.MockIllegalStateException;
import org.junit.runner.RunWith;


public class IRFactoryEvoSuite_branch_Test  {

  @Test
  public void test0()  throws Throwable  {
      AstRoot astRoot0 = new AstRoot();
      assertEquals(-1, astRoot0.getBaseLineno());
      assertEquals(false, astRoot0.hasChildren());
      assertEquals(0, astRoot0.getFunctionCount());
      assertEquals(1, astRoot0.getLength());
      assertEquals(-1, astRoot0.getEncodedSourceEnd());
      assertEquals(false, astRoot0.isInStrictMode());
      assertEquals(-1, astRoot0.getPosition());
      assertEquals(-1, astRoot0.getEncodedSourceStart());
      assertEquals(0, astRoot0.depth());
      assertEquals("136", astRoot0.toString());
      assertEquals(-1, astRoot0.getLineno());
      assertNull(astRoot0.getJsDoc());
      assertEquals(136, astRoot0.getType());
      assertNull(astRoot0.getEncodedSource());
      assertEquals(0, astRoot0.getRegexpCount());
      assertNull(astRoot0.getSourceName());
      assertEquals(-1, astRoot0.getEndLineno());
      assertEquals(-1, astRoot0.getAbsolutePosition());
      assertEquals(0, astRoot0.getParamCount());
      assertNotNull(astRoot0);
      
      String string0 = "[m-P#(#l";
      int int0 = 371;
      ReturnStatement returnStatement0 = new ReturnStatement(int0);
      assertEquals(0, returnStatement0.depth());
      assertEquals(false, returnStatement0.hasChildren());
      assertEquals(1, returnStatement0.getLength());
      assertEquals(371, returnStatement0.getAbsolutePosition());
      assertEquals(371, returnStatement0.getPosition());
      assertNull(returnStatement0.getJsDoc());
      assertEquals(4, returnStatement0.getType());
      assertEquals(-1, returnStatement0.getLineno());
      assertEquals("4", returnStatement0.toString());
      assertNotNull(returnStatement0);
      
      astRoot0.addChildToBack((Node) returnStatement0);
      assertEquals(0, returnStatement0.depth());
      assertEquals(false, returnStatement0.hasChildren());
      assertEquals(1, returnStatement0.getLength());
      assertEquals(371, returnStatement0.getAbsolutePosition());
      assertEquals(371, returnStatement0.getPosition());
      assertNull(returnStatement0.getJsDoc());
      assertEquals(4, returnStatement0.getType());
      assertEquals(-1, returnStatement0.getLineno());
      assertEquals("4", returnStatement0.toString());
      assertEquals(-1, astRoot0.getBaseLineno());
      assertEquals(0, astRoot0.getFunctionCount());
      assertEquals(1, astRoot0.getLength());
      assertEquals(-1, astRoot0.getEncodedSourceEnd());
      assertEquals(false, astRoot0.isInStrictMode());
      assertEquals(-1, astRoot0.getPosition());
      assertEquals(-1, astRoot0.getEncodedSourceStart());
      assertEquals(0, astRoot0.depth());
      assertEquals("136", astRoot0.toString());
      assertEquals(-1, astRoot0.getLineno());
      assertNull(astRoot0.getJsDoc());
      assertEquals(136, astRoot0.getType());
      assertNull(astRoot0.getEncodedSource());
      assertEquals(0, astRoot0.getRegexpCount());
      assertEquals(true, astRoot0.hasChildren());
      assertNull(astRoot0.getSourceName());
      assertEquals(-1, astRoot0.getEndLineno());
      assertEquals(-1, astRoot0.getAbsolutePosition());
      assertEquals(0, astRoot0.getParamCount());
      
      Config config0 = null;
      Context context0 = new Context();
      assertFalse(context0.generateObserverCount);
      assertEquals(true, context0.isGeneratingSource());
      assertEquals(false, context0.isGeneratingDebugChanged());
      assertEquals(false, context0.isSealed());
      assertEquals(0, context0.getLanguageVersion());
      assertEquals(false, context0.isGeneratingDebug());
      assertEquals(2147483647, context0.getMaximumInterpreterStackDepth());
      assertEquals(false, context0.hasCompileFunctionsWithDynamicScope());
      assertEquals(0, context0.getOptimizationLevel());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertNotNull(context0);
      
      ErrorReporter errorReporter0 = context0.getErrorReporter();
      assertFalse(context0.generateObserverCount);
      assertEquals(true, context0.isGeneratingSource());
      assertEquals(false, context0.isGeneratingDebugChanged());
      assertEquals(false, context0.isSealed());
      assertEquals(0, context0.getLanguageVersion());
      assertEquals(false, context0.isGeneratingDebug());
      assertEquals(2147483647, context0.getMaximumInterpreterStackDepth());
      assertEquals(false, context0.hasCompileFunctionsWithDynamicScope());
      assertEquals(0, context0.getOptimizationLevel());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertNotNull(errorReporter0);
      
      com.google.javascript.rhino.Node node0 = IRFactory.transformTree(astRoot0, string0, config0, errorReporter0);
      assertFalse(context0.generateObserverCount);
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isQuotedString());
      assertEquals(true, node0.hasOneChild());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(1, node0.getChildCount());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(132, node0.getType());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(true, node0.hasChildren());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(true, context0.isGeneratingSource());
      assertEquals(false, context0.isGeneratingDebugChanged());
      assertEquals(false, context0.isSealed());
      assertEquals(0, context0.getLanguageVersion());
      assertEquals(false, context0.isGeneratingDebug());
      assertEquals(2147483647, context0.getMaximumInterpreterStackDepth());
      assertEquals(false, context0.hasCompileFunctionsWithDynamicScope());
      assertEquals(0, context0.getOptimizationLevel());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertEquals(-1, astRoot0.getBaseLineno());
      assertEquals(0, astRoot0.getFunctionCount());
      assertEquals(1, astRoot0.getLength());
      assertEquals(-1, astRoot0.getEncodedSourceEnd());
      assertEquals(false, astRoot0.isInStrictMode());
      assertEquals(-1, astRoot0.getPosition());
      assertEquals(-1, astRoot0.getEncodedSourceStart());
      assertEquals(0, astRoot0.depth());
      assertEquals("136", astRoot0.toString());
      assertEquals(-1, astRoot0.getLineno());
      assertNull(astRoot0.getJsDoc());
      assertEquals(136, astRoot0.getType());
      assertNull(astRoot0.getEncodedSource());
      assertEquals(0, astRoot0.getRegexpCount());
      assertEquals(true, astRoot0.hasChildren());
      assertNull(astRoot0.getSourceName());
      assertEquals(-1, astRoot0.getEndLineno());
      assertEquals(-1, astRoot0.getAbsolutePosition());
      assertEquals(0, astRoot0.getParamCount());
      assertNotNull(node0);
  }

  @Test
  public void test1()  throws Throwable  {
      AstRoot astRoot0 = new AstRoot();
      assertNull(astRoot0.getSourceName());
      assertEquals(-1, astRoot0.getEncodedSourceStart());
      assertEquals(1, astRoot0.getLength());
      assertEquals(0, astRoot0.getRegexpCount());
      assertEquals(0, astRoot0.depth());
      assertEquals(-1, astRoot0.getEndLineno());
      assertEquals(0, astRoot0.getFunctionCount());
      assertEquals(-1, astRoot0.getLineno());
      assertNull(astRoot0.getEncodedSource());
      assertEquals(-1, astRoot0.getBaseLineno());
      assertEquals(false, astRoot0.hasChildren());
      assertEquals(0, astRoot0.getParamCount());
      assertEquals(136, astRoot0.getType());
      assertEquals(-1, astRoot0.getPosition());
      assertEquals(-1, astRoot0.getEncodedSourceEnd());
      assertNull(astRoot0.getJsDoc());
      assertEquals(-1, astRoot0.getAbsolutePosition());
      assertEquals(false, astRoot0.isInStrictMode());
      assertEquals("136", astRoot0.toString());
      assertNotNull(astRoot0);
      
      String string0 = "(f";
      Config config0 = null;
      ErrorCollector errorCollector0 = new ErrorCollector();
      assertNotNull(errorCollector0);
      
      com.google.javascript.rhino.Node node0 = IRFactory.transformTree(astRoot0, string0, config0, (ErrorReporter) errorCollector0);
      assertNull(astRoot0.getSourceName());
      assertEquals(-1, astRoot0.getEncodedSourceStart());
      assertEquals(1, astRoot0.getLength());
      assertEquals(0, astRoot0.getRegexpCount());
      assertEquals(0, astRoot0.depth());
      assertEquals(-1, astRoot0.getEndLineno());
      assertEquals(0, astRoot0.getFunctionCount());
      assertEquals(-1, astRoot0.getLineno());
      assertNull(astRoot0.getEncodedSource());
      assertEquals(-1, astRoot0.getBaseLineno());
      assertEquals(false, astRoot0.hasChildren());
      assertEquals(0, astRoot0.getParamCount());
      assertEquals(136, astRoot0.getType());
      assertEquals(-1, astRoot0.getPosition());
      assertEquals(-1, astRoot0.getEncodedSourceEnd());
      assertNull(astRoot0.getJsDoc());
      assertEquals(-1, astRoot0.getAbsolutePosition());
      assertEquals(false, astRoot0.isInStrictMode());
      assertEquals("136", astRoot0.toString());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.hasOneChild());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isVarArgs());
      assertEquals(0, node0.getChildCount());
      assertEquals(-1, node0.getLineno());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(132, node0.getType());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isSyntheticBlock());
      assertNotNull(node0);
  }

  @Test
  public void test2()  throws Throwable  {
      AstRoot astRoot0 = new AstRoot();
      assertEquals(false, astRoot0.hasChildren());
      assertEquals("136", astRoot0.toString());
      assertEquals(-1, astRoot0.getAbsolutePosition());
      assertEquals(0, astRoot0.getParamCount());
      assertEquals(0, astRoot0.getRegexpCount());
      assertEquals(false, astRoot0.isInStrictMode());
      assertEquals(0, astRoot0.depth());
      assertEquals(-1, astRoot0.getLineno());
      assertEquals(0, astRoot0.getFunctionCount());
      assertEquals(-1, astRoot0.getBaseLineno());
      assertEquals(-1, astRoot0.getEncodedSourceEnd());
      assertNull(astRoot0.getJsDoc());
      assertEquals(-1, astRoot0.getEncodedSourceStart());
      assertNull(astRoot0.getSourceName());
      assertEquals(136, astRoot0.getType());
      assertEquals(1, astRoot0.getLength());
      assertEquals(-1, astRoot0.getPosition());
      assertEquals(-1, astRoot0.getEndLineno());
      assertNull(astRoot0.getEncodedSource());
      assertNotNull(astRoot0);
      
      int int0 = (-94);
      NumberLiteral numberLiteral0 = (NumberLiteral)Node.newNumber((double) int0);
      assertEquals(40, numberLiteral0.getType());
      assertNull(numberLiteral0.getValue());
      assertNull(numberLiteral0.getJsDoc());
      assertEquals(-1, numberLiteral0.getLineno());
      assertEquals(-1, numberLiteral0.getAbsolutePosition());
      assertEquals((-94.0), numberLiteral0.getDouble(), 0.01D);
      assertEquals(0, numberLiteral0.depth());
      assertEquals((-94.0), numberLiteral0.getNumber(), 0.01D);
      assertEquals(-1, numberLiteral0.getPosition());
      assertEquals(false, numberLiteral0.hasChildren());
      assertEquals("40", numberLiteral0.toString());
      assertEquals(1, numberLiteral0.getLength());
      assertNotNull(numberLiteral0);
      
      astRoot0.addChildToFront((Node) numberLiteral0);
      assertEquals(40, numberLiteral0.getType());
      assertNull(numberLiteral0.getValue());
      assertNull(numberLiteral0.getJsDoc());
      assertEquals(-1, numberLiteral0.getLineno());
      assertEquals(-1, numberLiteral0.getAbsolutePosition());
      assertEquals((-94.0), numberLiteral0.getDouble(), 0.01D);
      assertEquals(0, numberLiteral0.depth());
      assertEquals((-94.0), numberLiteral0.getNumber(), 0.01D);
      assertEquals(-1, numberLiteral0.getPosition());
      assertEquals(false, numberLiteral0.hasChildren());
      assertEquals("40", numberLiteral0.toString());
      assertEquals(1, numberLiteral0.getLength());
      assertEquals("136", astRoot0.toString());
      assertEquals(-1, astRoot0.getAbsolutePosition());
      assertEquals(0, astRoot0.getParamCount());
      assertEquals(0, astRoot0.getRegexpCount());
      assertEquals(false, astRoot0.isInStrictMode());
      assertEquals(0, astRoot0.depth());
      assertEquals(-1, astRoot0.getLineno());
      assertEquals(0, astRoot0.getFunctionCount());
      assertEquals(-1, astRoot0.getBaseLineno());
      assertEquals(-1, astRoot0.getEncodedSourceEnd());
      assertNull(astRoot0.getJsDoc());
      assertEquals(-1, astRoot0.getEncodedSourceStart());
      assertEquals(true, astRoot0.hasChildren());
      assertNull(astRoot0.getSourceName());
      assertEquals(136, astRoot0.getType());
      assertEquals(1, astRoot0.getLength());
      assertEquals(-1, astRoot0.getPosition());
      assertEquals(-1, astRoot0.getEndLineno());
      assertNull(astRoot0.getEncodedSource());
      
      String string0 = "getters are not supported in Internet Explorer";
      Config config0 = null;
      ErrorCollector errorCollector0 = new ErrorCollector();
      assertNotNull(errorCollector0);
      
      com.google.javascript.rhino.Node node0 = IRFactory.transformTree(astRoot0, string0, config0, (ErrorReporter) errorCollector0);
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isQuotedString());
      assertEquals(true, node0.hasChildren());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(true, node0.hasOneChild());
      assertEquals(1, node0.getChildCount());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(132, node0.getType());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals("136", astRoot0.toString());
      assertEquals(-1, astRoot0.getAbsolutePosition());
      assertEquals(0, astRoot0.getParamCount());
      assertEquals(0, astRoot0.getRegexpCount());
      assertEquals(false, astRoot0.isInStrictMode());
      assertEquals(0, astRoot0.depth());
      assertEquals(-1, astRoot0.getLineno());
      assertEquals(0, astRoot0.getFunctionCount());
      assertEquals(-1, astRoot0.getBaseLineno());
      assertEquals(-1, astRoot0.getEncodedSourceEnd());
      assertNull(astRoot0.getJsDoc());
      assertEquals(-1, astRoot0.getEncodedSourceStart());
      assertEquals(true, astRoot0.hasChildren());
      assertNull(astRoot0.getSourceName());
      assertEquals(136, astRoot0.getType());
      assertEquals(1, astRoot0.getLength());
      assertEquals(-1, astRoot0.getPosition());
      assertEquals(-1, astRoot0.getEndLineno());
      assertNull(astRoot0.getEncodedSource());
      assertNotNull(node0);
  }

  @Test
  public void test3()  throws Throwable  {
      AstRoot astRoot0 = new AstRoot();
      assertEquals(-1, astRoot0.getBaseLineno());
      assertEquals(0, astRoot0.depth());
      assertEquals(-1, astRoot0.getEncodedSourceStart());
      assertEquals(0, astRoot0.getFunctionCount());
      assertEquals(136, astRoot0.getType());
      assertEquals(-1, astRoot0.getEndLineno());
      assertNull(astRoot0.getSourceName());
      assertEquals("136", astRoot0.toString());
      assertEquals(1, astRoot0.getLength());
      assertEquals(false, astRoot0.isInStrictMode());
      assertEquals(0, astRoot0.getRegexpCount());
      assertEquals(-1, astRoot0.getLineno());
      assertNull(astRoot0.getEncodedSource());
      assertEquals(-1, astRoot0.getEncodedSourceEnd());
      assertEquals(0, astRoot0.getParamCount());
      assertEquals(false, astRoot0.hasChildren());
      assertNull(astRoot0.getJsDoc());
      assertEquals(-1, astRoot0.getPosition());
      assertEquals(-1, astRoot0.getAbsolutePosition());
      assertNotNull(astRoot0);
      
      int int0 = (-94);
      NewExpression newExpression0 = new NewExpression(int0, int0);
      assertEquals(-94, newExpression0.getAbsolutePosition());
      assertEquals(0, newExpression0.depth());
      assertEquals(-1, newExpression0.getRp());
      assertEquals(30, newExpression0.getType());
      assertNull(newExpression0.getJsDoc());
      assertEquals(-94, newExpression0.getLength());
      assertEquals(-1, newExpression0.getLp());
      assertEquals(-94, newExpression0.getPosition());
      assertEquals(false, newExpression0.hasChildren());
      assertEquals(-1, newExpression0.getLineno());
      assertEquals("30", newExpression0.toString());
      assertNotNull(newExpression0);
      
      astRoot0.addChildToBack((Node) newExpression0);
      assertEquals(-1, astRoot0.getBaseLineno());
      assertEquals(0, astRoot0.depth());
      assertEquals(-1, astRoot0.getEncodedSourceStart());
      assertEquals(0, astRoot0.getFunctionCount());
      assertEquals(136, astRoot0.getType());
      assertEquals(-1, astRoot0.getEndLineno());
      assertNull(astRoot0.getSourceName());
      assertEquals("136", astRoot0.toString());
      assertEquals(1, astRoot0.getLength());
      assertEquals(true, astRoot0.hasChildren());
      assertEquals(false, astRoot0.isInStrictMode());
      assertEquals(0, astRoot0.getRegexpCount());
      assertEquals(-1, astRoot0.getLineno());
      assertNull(astRoot0.getEncodedSource());
      assertEquals(-1, astRoot0.getEncodedSourceEnd());
      assertEquals(0, astRoot0.getParamCount());
      assertNull(astRoot0.getJsDoc());
      assertEquals(-1, astRoot0.getPosition());
      assertEquals(-1, astRoot0.getAbsolutePosition());
      assertEquals(-94, newExpression0.getAbsolutePosition());
      assertEquals(0, newExpression0.depth());
      assertEquals(-1, newExpression0.getRp());
      assertEquals(30, newExpression0.getType());
      assertNull(newExpression0.getJsDoc());
      assertEquals(-94, newExpression0.getLength());
      assertEquals(-1, newExpression0.getLp());
      assertEquals(-94, newExpression0.getPosition());
      assertEquals(false, newExpression0.hasChildren());
      assertEquals(-1, newExpression0.getLineno());
      assertEquals("30", newExpression0.toString());
      
      String string0 = "getters are not supported in Internet Explorer";
      Config config0 = null;
      ErrorCollector errorCollector0 = new ErrorCollector();
      assertNotNull(errorCollector0);
      
      // Undeclared exception!
      try {
        com.google.javascript.rhino.Node node0 = IRFactory.transformTree(astRoot0, string0, config0, (ErrorReporter) errorCollector0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test4()  throws Throwable  {
      AstRoot astRoot0 = new AstRoot();
      assertNull(astRoot0.getSourceName());
      assertEquals(false, astRoot0.isInStrictMode());
      assertEquals(0, astRoot0.getFunctionCount());
      assertEquals(-1, astRoot0.getEncodedSourceEnd());
      assertEquals(-1, astRoot0.getBaseLineno());
      assertEquals(-1, astRoot0.getEndLineno());
      assertEquals(-1, astRoot0.getEncodedSourceStart());
      assertEquals(-1, astRoot0.getPosition());
      assertEquals("136", astRoot0.toString());
      assertNull(astRoot0.getJsDoc());
      assertEquals(-1, astRoot0.getLineno());
      assertEquals(136, astRoot0.getType());
      assertNull(astRoot0.getEncodedSource());
      assertEquals(false, astRoot0.hasChildren());
      assertEquals(0, astRoot0.getParamCount());
      assertEquals(0, astRoot0.getRegexpCount());
      assertEquals(-1, astRoot0.getAbsolutePosition());
      assertEquals(0, astRoot0.depth());
      assertEquals(1, astRoot0.getLength());
      assertNotNull(astRoot0);
      
      String string0 = "[m-P#(#l";
      Config config0 = null;
      int int0 = astRoot0.getType();
      assertNull(astRoot0.getSourceName());
      assertEquals(false, astRoot0.isInStrictMode());
      assertEquals(0, astRoot0.getFunctionCount());
      assertEquals(-1, astRoot0.getEncodedSourceEnd());
      assertEquals(-1, astRoot0.getBaseLineno());
      assertEquals(-1, astRoot0.getEndLineno());
      assertEquals(-1, astRoot0.getEncodedSourceStart());
      assertEquals(-1, astRoot0.getPosition());
      assertEquals("136", astRoot0.toString());
      assertNull(astRoot0.getJsDoc());
      assertEquals(-1, astRoot0.getLineno());
      assertEquals(136, astRoot0.getType());
      assertNull(astRoot0.getEncodedSource());
      assertEquals(false, astRoot0.hasChildren());
      assertEquals(0, astRoot0.getParamCount());
      assertEquals(0, astRoot0.getRegexpCount());
      assertEquals(-1, astRoot0.getAbsolutePosition());
      assertEquals(0, astRoot0.depth());
      assertEquals(1, astRoot0.getLength());
      assertEquals(136, int0);
      
      Scope scope0 = new Scope(int0);
      assertNull(scope0.getJsDoc());
      assertEquals(false, scope0.hasChildren());
      assertEquals(1, scope0.getLength());
      assertEquals(-1, scope0.getLineno());
      assertEquals(0, scope0.depth());
      assertEquals("129", scope0.toString());
      assertEquals(136, scope0.getPosition());
      assertEquals(129, scope0.getType());
      assertEquals(136, scope0.getAbsolutePosition());
      assertNull(astRoot0.getSourceName());
      assertEquals(false, astRoot0.isInStrictMode());
      assertEquals(0, astRoot0.getFunctionCount());
      assertEquals(-1, astRoot0.getEncodedSourceEnd());
      assertEquals(-1, astRoot0.getBaseLineno());
      assertEquals(-1, astRoot0.getEndLineno());
      assertEquals(-1, astRoot0.getEncodedSourceStart());
      assertEquals(-1, astRoot0.getPosition());
      assertEquals("136", astRoot0.toString());
      assertNull(astRoot0.getJsDoc());
      assertEquals(-1, astRoot0.getLineno());
      assertEquals(136, astRoot0.getType());
      assertNull(astRoot0.getEncodedSource());
      assertEquals(false, astRoot0.hasChildren());
      assertEquals(0, astRoot0.getParamCount());
      assertEquals(0, astRoot0.getRegexpCount());
      assertEquals(-1, astRoot0.getAbsolutePosition());
      assertEquals(0, astRoot0.depth());
      assertEquals(1, astRoot0.getLength());
      assertNotNull(scope0);
      
      astRoot0.addChildrenToFront((Node) scope0);
      assertNull(scope0.getJsDoc());
      assertEquals(false, scope0.hasChildren());
      assertEquals(1, scope0.getLength());
      assertEquals(-1, scope0.getLineno());
      assertEquals(0, scope0.depth());
      assertEquals("129", scope0.toString());
      assertEquals(136, scope0.getPosition());
      assertEquals(129, scope0.getType());
      assertEquals(136, scope0.getAbsolutePosition());
      assertNull(astRoot0.getSourceName());
      assertEquals(false, astRoot0.isInStrictMode());
      assertEquals(0, astRoot0.getFunctionCount());
      assertEquals(-1, astRoot0.getEncodedSourceEnd());
      assertEquals(-1, astRoot0.getBaseLineno());
      assertEquals(-1, astRoot0.getEndLineno());
      assertEquals(-1, astRoot0.getEncodedSourceStart());
      assertEquals(-1, astRoot0.getPosition());
      assertEquals("136", astRoot0.toString());
      assertNull(astRoot0.getJsDoc());
      assertEquals(-1, astRoot0.getLineno());
      assertEquals(true, astRoot0.hasChildren());
      assertEquals(136, astRoot0.getType());
      assertNull(astRoot0.getEncodedSource());
      assertEquals(0, astRoot0.getParamCount());
      assertEquals(0, astRoot0.getRegexpCount());
      assertEquals(-1, astRoot0.getAbsolutePosition());
      assertEquals(0, astRoot0.depth());
      assertEquals(1, astRoot0.getLength());
      
      ErrorCollector errorCollector0 = new ErrorCollector();
      assertNotNull(errorCollector0);
      
      com.google.javascript.rhino.Node node0 = IRFactory.transformTree(astRoot0, string0, config0, (ErrorReporter) errorCollector0);
      assertNull(astRoot0.getSourceName());
      assertEquals(false, astRoot0.isInStrictMode());
      assertEquals(0, astRoot0.getFunctionCount());
      assertEquals(-1, astRoot0.getEncodedSourceEnd());
      assertEquals(-1, astRoot0.getBaseLineno());
      assertEquals(-1, astRoot0.getEndLineno());
      assertEquals(-1, astRoot0.getEncodedSourceStart());
      assertEquals(-1, astRoot0.getPosition());
      assertEquals("136", astRoot0.toString());
      assertNull(astRoot0.getJsDoc());
      assertEquals(-1, astRoot0.getLineno());
      assertEquals(true, astRoot0.hasChildren());
      assertEquals(136, astRoot0.getType());
      assertNull(astRoot0.getEncodedSource());
      assertEquals(0, astRoot0.getParamCount());
      assertEquals(0, astRoot0.getRegexpCount());
      assertEquals(-1, astRoot0.getAbsolutePosition());
      assertEquals(0, astRoot0.depth());
      assertEquals(1, astRoot0.getLength());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(132, node0.getType());
      assertEquals(1, node0.getChildCount());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(true, node0.hasChildren());
      assertEquals(false, node0.isQuotedString());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(true, node0.hasOneChild());
      assertEquals(-1, node0.getCharno());
      assertNotNull(node0);
  }

  @Test
  public void test5()  throws Throwable  {
      AstRoot astRoot0 = new AstRoot();
      assertEquals(0, astRoot0.getRegexpCount());
      assertEquals(false, astRoot0.hasChildren());
      assertEquals(-1, astRoot0.getEncodedSourceStart());
      assertEquals(-1, astRoot0.getBaseLineno());
      assertNull(astRoot0.getJsDoc());
      assertEquals(-1, astRoot0.getAbsolutePosition());
      assertEquals(1, astRoot0.getLength());
      assertEquals(-1, astRoot0.getEncodedSourceEnd());
      assertEquals(-1, astRoot0.getEndLineno());
      assertNull(astRoot0.getEncodedSource());
      assertEquals(0, astRoot0.getFunctionCount());
      assertEquals(136, astRoot0.getType());
      assertEquals(-1, astRoot0.getPosition());
      assertEquals(0, astRoot0.getParamCount());
      assertEquals("136", astRoot0.toString());
      assertEquals(0, astRoot0.depth());
      assertNull(astRoot0.getSourceName());
      assertEquals(-1, astRoot0.getLineno());
      assertEquals(false, astRoot0.isInStrictMode());
      assertNotNull(astRoot0);
      
      int int0 = 1939;
      AstRoot astRoot1 = (AstRoot)astRoot0.setType(int0);
      assertSame(astRoot0, astRoot1);
      assertSame(astRoot1, astRoot0);
      assertEquals(0, astRoot0.getRegexpCount());
      assertEquals(false, astRoot0.hasChildren());
      assertEquals(-1, astRoot0.getEncodedSourceStart());
      assertEquals(-1, astRoot0.getBaseLineno());
      assertNull(astRoot0.getJsDoc());
      assertEquals(-1, astRoot0.getAbsolutePosition());
      assertEquals(1, astRoot0.getLength());
      assertEquals(-1, astRoot0.getEncodedSourceEnd());
      assertEquals(-1, astRoot0.getEndLineno());
      assertNull(astRoot0.getEncodedSource());
      assertEquals(0, astRoot0.getFunctionCount());
      assertEquals("1939", astRoot0.toString());
      assertEquals(-1, astRoot0.getPosition());
      assertEquals(1939, astRoot0.getType());
      assertEquals(0, astRoot0.getParamCount());
      assertEquals(0, astRoot0.depth());
      assertNull(astRoot0.getSourceName());
      assertEquals(-1, astRoot0.getLineno());
      assertEquals(false, astRoot0.isInStrictMode());
      assertEquals("1939", astRoot1.toString());
      assertEquals(-1, astRoot1.getAbsolutePosition());
      assertNull(astRoot1.getSourceName());
      assertNull(astRoot1.getEncodedSource());
      assertEquals(1, astRoot1.getLength());
      assertEquals(false, astRoot1.hasChildren());
      assertEquals(-1, astRoot1.getEndLineno());
      assertNull(astRoot1.getJsDoc());
      assertEquals(-1, astRoot1.getEncodedSourceEnd());
      assertEquals(-1, astRoot1.getBaseLineno());
      assertEquals(0, astRoot1.getParamCount());
      assertEquals(-1, astRoot1.getEncodedSourceStart());
      assertEquals(1939, astRoot1.getType());
      assertEquals(0, astRoot1.getFunctionCount());
      assertEquals(0, astRoot1.getRegexpCount());
      assertEquals(false, astRoot1.isInStrictMode());
      assertEquals(-1, astRoot1.getPosition());
      assertEquals(-1, astRoot1.getLineno());
      assertEquals(0, astRoot1.depth());
      assertNotNull(astRoot1);
      
      String string0 = "?Do,Q>3$uBN";
      Config config0 = null;
      ErrorCollector errorCollector0 = new ErrorCollector();
      assertNotNull(errorCollector0);
      
      // Undeclared exception!
      try {
        com.google.javascript.rhino.Node node0 = IRFactory.transformTree(astRoot0, string0, config0, (ErrorReporter) errorCollector0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 1939
         //
      }
  }
}
