/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 21:57:15 GMT 2014
 */

package com.google.javascript.jscomp.parsing;

import static org.junit.Assert.*;
import org.junit.Test;
import com.google.javascript.jscomp.mozilla.rhino.ErrorReporter;
import com.google.javascript.jscomp.mozilla.rhino.Token;
import com.google.javascript.jscomp.mozilla.rhino.ast.AstNode;
import com.google.javascript.jscomp.mozilla.rhino.ast.AstRoot;
import com.google.javascript.jscomp.mozilla.rhino.ast.Comment;
import com.google.javascript.jscomp.mozilla.rhino.ast.ErrorCollector;
import com.google.javascript.jscomp.mozilla.rhino.ast.ExpressionStatement;
import com.google.javascript.jscomp.mozilla.rhino.ast.NumberLiteral;
import com.google.javascript.jscomp.mozilla.rhino.ast.VariableDeclaration;
import com.google.javascript.jscomp.mozilla.rhino.ast.VariableInitializer;
import com.google.javascript.jscomp.mozilla.rhino.tools.ToolErrorReporter;
import com.google.javascript.jscomp.parsing.Config;
import com.google.javascript.jscomp.parsing.IRFactory;
import com.google.javascript.rhino.Node;
import java.util.Collection;
import java.util.LinkedHashSet;
import java.util.Locale;
import java.util.Set;
import java.util.TreeSet;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;

import org.evosuite.runtime.mock.java.lang.MockIllegalStateException;
import org.junit.runner.RunWith;


public class IRFactoryEvoSuite_branch_Test  {

  @Test
  public void test0()  throws Throwable  {
      int int0 = 39;
      AstRoot astRoot0 = new AstRoot(int0);
      assertNotNull(astRoot0);
      assertEquals(-1, astRoot0.getEndLineno());
      assertNull(astRoot0.getSourceName());
      assertEquals(1, astRoot0.getLength());
      assertNull(astRoot0.getJsDoc());
      assertEquals(false, astRoot0.hasChildren());
      assertEquals("136", astRoot0.toString());
      assertEquals(39, astRoot0.getAbsolutePosition());
      assertEquals(0, astRoot0.getFunctionCount());
      assertEquals(-1, astRoot0.getBaseLineno());
      assertEquals(false, astRoot0.isInStrictMode());
      assertEquals(0, astRoot0.getParamCount());
      assertNull(astRoot0.getEncodedSource());
      assertEquals(-1, astRoot0.getLineno());
      assertEquals(136, astRoot0.getType());
      assertEquals(0, astRoot0.getRegexpCount());
      assertEquals(-1, astRoot0.getEncodedSourceEnd());
      assertEquals(0, astRoot0.depth());
      assertEquals(-1, astRoot0.getEncodedSourceStart());
      assertEquals(39, astRoot0.getPosition());
      
      String string0 = "";
      ExpressionStatement expressionStatement0 = new ExpressionStatement();
      assertNotNull(expressionStatement0);
      assertEquals(0, expressionStatement0.depth());
      assertNull(expressionStatement0.getJsDoc());
      assertEquals(1, expressionStatement0.getLength());
      assertEquals(-1, expressionStatement0.getPosition());
      assertEquals(-1, expressionStatement0.getAbsolutePosition());
      assertEquals(false, expressionStatement0.hasChildren());
      assertEquals(-1, expressionStatement0.getLineno());
      assertEquals(133, expressionStatement0.getType());
      assertEquals("133", expressionStatement0.toString());
      
      astRoot0.addChild((AstNode) expressionStatement0);
      assertEquals(1, expressionStatement0.depth());
      assertNull(expressionStatement0.getJsDoc());
      assertEquals(1, expressionStatement0.getLength());
      assertEquals(-40, expressionStatement0.getPosition());
      assertEquals(-1, expressionStatement0.getAbsolutePosition());
      assertEquals(false, expressionStatement0.hasChildren());
      assertEquals(-1, expressionStatement0.getLineno());
      assertEquals(133, expressionStatement0.getType());
      assertEquals("133", expressionStatement0.toString());
      assertEquals(-39, astRoot0.getLength());
      assertEquals(-1, astRoot0.getEndLineno());
      assertNull(astRoot0.getSourceName());
      assertNull(astRoot0.getJsDoc());
      assertEquals("136", astRoot0.toString());
      assertEquals(39, astRoot0.getAbsolutePosition());
      assertEquals(0, astRoot0.getFunctionCount());
      assertEquals(-1, astRoot0.getBaseLineno());
      assertEquals(false, astRoot0.isInStrictMode());
      assertEquals(true, astRoot0.hasChildren());
      assertEquals(0, astRoot0.getParamCount());
      assertNull(astRoot0.getEncodedSource());
      assertEquals(-1, astRoot0.getLineno());
      assertEquals(136, astRoot0.getType());
      assertEquals(0, astRoot0.getRegexpCount());
      assertEquals(-1, astRoot0.getEncodedSourceEnd());
      assertEquals(0, astRoot0.depth());
      assertEquals(-1, astRoot0.getEncodedSourceStart());
      assertEquals(39, astRoot0.getPosition());
      
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>(int0, int0);
      assertNotNull(linkedHashSet0);
      assertEquals(true, linkedHashSet0.isEmpty());
      assertEquals("[]", linkedHashSet0.toString());
      assertEquals(0, linkedHashSet0.size());
      
      TreeSet<String> treeSet0 = new TreeSet<String>((Collection<? extends String>) linkedHashSet0);
      assertNotNull(treeSet0);
      assertEquals(true, linkedHashSet0.isEmpty());
      assertEquals("[]", linkedHashSet0.toString());
      assertEquals(0, linkedHashSet0.size());
      assertEquals("[]", treeSet0.toString());
      
      expressionStatement0.setHasResult();
      assertEquals(1, expressionStatement0.depth());
      assertEquals("134", expressionStatement0.toString());
      assertNull(expressionStatement0.getJsDoc());
      assertEquals(1, expressionStatement0.getLength());
      assertEquals(-40, expressionStatement0.getPosition());
      assertEquals(134, expressionStatement0.getType());
      assertEquals(-1, expressionStatement0.getAbsolutePosition());
      assertEquals(false, expressionStatement0.hasChildren());
      assertEquals(-1, expressionStatement0.getLineno());
      
      boolean boolean0 = linkedHashSet0.add(string0);
      assertTrue(boolean0);
      assertEquals(false, linkedHashSet0.isEmpty());
      assertEquals("[]", linkedHashSet0.toString());
      assertEquals(1, linkedHashSet0.size());
      
      Config config0 = new Config(treeSet0, linkedHashSet0, boolean0, boolean0, boolean0);
      assertNotNull(config0);
      assertEquals(false, linkedHashSet0.isEmpty());
      assertEquals("[]", linkedHashSet0.toString());
      assertEquals(1, linkedHashSet0.size());
      assertEquals("[]", treeSet0.toString());
      
      ErrorCollector errorCollector0 = new ErrorCollector();
      assertNotNull(errorCollector0);
      
      // Undeclared exception!
      try {
        Node node0 = IRFactory.transformTree(astRoot0, string0, config0, (ErrorReporter) errorCollector0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test1()  throws Throwable  {
      int int0 = 3135;
      AstRoot astRoot0 = new AstRoot(int0);
      assertNotNull(astRoot0);
      assertEquals(3135, astRoot0.getAbsolutePosition());
      assertEquals(-1, astRoot0.getEndLineno());
      assertEquals(1, astRoot0.getLength());
      assertEquals(3135, astRoot0.getPosition());
      assertEquals(false, astRoot0.hasChildren());
      assertEquals(-1, astRoot0.getLineno());
      assertEquals("136", astRoot0.toString());
      assertEquals(-1, astRoot0.getEncodedSourceStart());
      assertNull(astRoot0.getSourceName());
      assertEquals(0, astRoot0.getRegexpCount());
      assertEquals(-1, astRoot0.getBaseLineno());
      assertEquals(false, astRoot0.isInStrictMode());
      assertNull(astRoot0.getJsDoc());
      assertEquals(0, astRoot0.getParamCount());
      assertEquals(136, astRoot0.getType());
      assertEquals(0, astRoot0.getFunctionCount());
      assertEquals(-1, astRoot0.getEncodedSourceEnd());
      assertNull(astRoot0.getEncodedSource());
      assertEquals(0, astRoot0.depth());
      
      String string0 = "";
      VariableDeclaration variableDeclaration0 = new VariableDeclaration(int0, int0);
      assertNotNull(variableDeclaration0);
      assertEquals(false, variableDeclaration0.hasChildren());
      assertEquals(3135, variableDeclaration0.getAbsolutePosition());
      assertEquals(0, variableDeclaration0.depth());
      assertNull(variableDeclaration0.getJsDoc());
      assertEquals(-1, variableDeclaration0.getLineno());
      assertEquals("122", variableDeclaration0.toString());
      assertEquals(false, variableDeclaration0.isLet());
      assertEquals(3135, variableDeclaration0.getLength());
      assertEquals(false, variableDeclaration0.isConst());
      assertEquals(true, variableDeclaration0.isVar());
      assertEquals(122, variableDeclaration0.getType());
      assertEquals(3135, variableDeclaration0.getPosition());
      
      astRoot0.addChild((AstNode) variableDeclaration0);
      assertEquals(1, variableDeclaration0.depth());
      assertEquals(false, variableDeclaration0.hasChildren());
      assertEquals(3135, variableDeclaration0.getAbsolutePosition());
      assertEquals(0, variableDeclaration0.getPosition());
      assertNull(variableDeclaration0.getJsDoc());
      assertEquals(-1, variableDeclaration0.getLineno());
      assertEquals("122", variableDeclaration0.toString());
      assertEquals(false, variableDeclaration0.isLet());
      assertEquals(3135, variableDeclaration0.getLength());
      assertEquals(false, variableDeclaration0.isConst());
      assertEquals(true, variableDeclaration0.isVar());
      assertEquals(122, variableDeclaration0.getType());
      assertEquals(3135, astRoot0.getAbsolutePosition());
      assertEquals(-1, astRoot0.getEndLineno());
      assertEquals(3135, astRoot0.getPosition());
      assertEquals(-1, astRoot0.getLineno());
      assertEquals("136", astRoot0.toString());
      assertEquals(-1, astRoot0.getEncodedSourceStart());
      assertNull(astRoot0.getSourceName());
      assertEquals(0, astRoot0.getRegexpCount());
      assertEquals(-1, astRoot0.getBaseLineno());
      assertEquals(false, astRoot0.isInStrictMode());
      assertNull(astRoot0.getJsDoc());
      assertEquals(0, astRoot0.getParamCount());
      assertEquals(3135, astRoot0.getLength());
      assertEquals(true, astRoot0.hasChildren());
      assertEquals(136, astRoot0.getType());
      assertEquals(0, astRoot0.getFunctionCount());
      assertEquals(-1, astRoot0.getEncodedSourceEnd());
      assertNull(astRoot0.getEncodedSource());
      assertEquals(0, astRoot0.depth());
      
      Locale locale0 = Locale.forLanguageTag(string0);
      assertNotNull(locale0);
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.toString());
      
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      assertNotNull(set0);
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.toString());
      assertEquals(true, set0.isEmpty());
      assertEquals(0, set0.size());
      
      boolean boolean0 = true;
      Config config0 = new Config(set0, set0, boolean0, boolean0, boolean0);
      assertNotNull(config0);
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.toString());
      assertEquals(true, set0.isEmpty());
      assertEquals(0, set0.size());
      
      VariableInitializer variableInitializer0 = new VariableInitializer(int0);
      assertNotNull(variableInitializer0);
      assertEquals(-1, variableInitializer0.getLineno());
      assertEquals(3135, variableInitializer0.getPosition());
      assertEquals(122, variableInitializer0.getType());
      assertEquals(3135, variableInitializer0.getAbsolutePosition());
      assertEquals(false, variableInitializer0.hasChildren());
      assertEquals(1, variableInitializer0.getLength());
      assertEquals(true, variableInitializer0.isDestructuring());
      assertEquals(0, variableInitializer0.depth());
      assertEquals("122", variableInitializer0.toString());
      assertNull(variableInitializer0.getJsDoc());
      
      variableDeclaration0.addVariable(variableInitializer0);
      assertEquals(-1, variableInitializer0.getLineno());
      assertEquals(3135, variableInitializer0.getPosition());
      assertEquals(6270, variableInitializer0.getAbsolutePosition());
      assertEquals(122, variableInitializer0.getType());
      assertEquals(false, variableInitializer0.hasChildren());
      assertEquals(2, variableInitializer0.depth());
      assertEquals(1, variableInitializer0.getLength());
      assertEquals(true, variableInitializer0.isDestructuring());
      assertEquals("122", variableInitializer0.toString());
      assertNull(variableInitializer0.getJsDoc());
      assertEquals(1, variableDeclaration0.depth());
      assertEquals(false, variableDeclaration0.hasChildren());
      assertEquals(3135, variableDeclaration0.getAbsolutePosition());
      assertEquals(0, variableDeclaration0.getPosition());
      assertNull(variableDeclaration0.getJsDoc());
      assertEquals(-1, variableDeclaration0.getLineno());
      assertEquals("122", variableDeclaration0.toString());
      assertEquals(false, variableDeclaration0.isLet());
      assertEquals(3135, variableDeclaration0.getLength());
      assertEquals(false, variableDeclaration0.isConst());
      assertEquals(true, variableDeclaration0.isVar());
      assertEquals(122, variableDeclaration0.getType());
      
      ErrorCollector errorCollector0 = new ErrorCollector();
      assertNotNull(errorCollector0);
      
      // Undeclared exception!
      try {
        Node node0 = IRFactory.transformTree(astRoot0, string0, config0, (ErrorReporter) errorCollector0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test2()  throws Throwable  {
      int int0 = 3135;
      AstRoot astRoot0 = new AstRoot(int0);
      assertNotNull(astRoot0);
      assertEquals(3135, astRoot0.getPosition());
      assertEquals(0, astRoot0.getRegexpCount());
      assertEquals(1, astRoot0.getLength());
      assertEquals(-1, astRoot0.getBaseLineno());
      assertEquals(0, astRoot0.depth());
      assertNull(astRoot0.getJsDoc());
      assertNull(astRoot0.getEncodedSource());
      assertEquals(0, astRoot0.getParamCount());
      assertEquals(-1, astRoot0.getEndLineno());
      assertEquals(false, astRoot0.isInStrictMode());
      assertEquals(-1, astRoot0.getLineno());
      assertEquals(false, astRoot0.hasChildren());
      assertEquals(136, astRoot0.getType());
      assertEquals("136", astRoot0.toString());
      assertEquals(3135, astRoot0.getAbsolutePosition());
      assertEquals(-1, astRoot0.getEncodedSourceStart());
      assertEquals(0, astRoot0.getFunctionCount());
      assertEquals(-1, astRoot0.getEncodedSourceEnd());
      assertNull(astRoot0.getSourceName());
      
      String string0 = "";
      VariableDeclaration variableDeclaration0 = new VariableDeclaration(int0, int0);
      assertNotNull(variableDeclaration0);
      assertEquals(-1, variableDeclaration0.getLineno());
      assertEquals(false, variableDeclaration0.hasChildren());
      assertEquals(3135, variableDeclaration0.getAbsolutePosition());
      assertNull(variableDeclaration0.getJsDoc());
      assertEquals(0, variableDeclaration0.depth());
      assertEquals("122", variableDeclaration0.toString());
      assertEquals(122, variableDeclaration0.getType());
      assertEquals(3135, variableDeclaration0.getPosition());
      assertEquals(false, variableDeclaration0.isLet());
      assertEquals(3135, variableDeclaration0.getLength());
      assertEquals(false, variableDeclaration0.isConst());
      assertEquals(true, variableDeclaration0.isVar());
      
      astRoot0.addChild((AstNode) variableDeclaration0);
      assertEquals(-1, variableDeclaration0.getLineno());
      assertEquals(0, variableDeclaration0.getPosition());
      assertEquals(false, variableDeclaration0.hasChildren());
      assertEquals(3135, variableDeclaration0.getAbsolutePosition());
      assertNull(variableDeclaration0.getJsDoc());
      assertEquals("122", variableDeclaration0.toString());
      assertEquals(1, variableDeclaration0.depth());
      assertEquals(122, variableDeclaration0.getType());
      assertEquals(false, variableDeclaration0.isLet());
      assertEquals(3135, variableDeclaration0.getLength());
      assertEquals(false, variableDeclaration0.isConst());
      assertEquals(true, variableDeclaration0.isVar());
      assertEquals(3135, astRoot0.getPosition());
      assertEquals(0, astRoot0.getRegexpCount());
      assertEquals(-1, astRoot0.getBaseLineno());
      assertEquals(0, astRoot0.depth());
      assertNull(astRoot0.getJsDoc());
      assertNull(astRoot0.getEncodedSource());
      assertEquals(0, astRoot0.getParamCount());
      assertEquals(-1, astRoot0.getEndLineno());
      assertEquals(false, astRoot0.isInStrictMode());
      assertEquals(-1, astRoot0.getLineno());
      assertEquals(136, astRoot0.getType());
      assertEquals("136", astRoot0.toString());
      assertEquals(3135, astRoot0.getLength());
      assertEquals(3135, astRoot0.getAbsolutePosition());
      assertEquals(true, astRoot0.hasChildren());
      assertEquals(-1, astRoot0.getEncodedSourceStart());
      assertEquals(0, astRoot0.getFunctionCount());
      assertEquals(-1, astRoot0.getEncodedSourceEnd());
      assertNull(astRoot0.getSourceName());
      
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>(int0, int0);
      assertNotNull(linkedHashSet0);
      assertEquals(0, linkedHashSet0.size());
      assertEquals(true, linkedHashSet0.isEmpty());
      assertEquals("[]", linkedHashSet0.toString());
      
      TreeSet<String> treeSet0 = new TreeSet<String>((Collection<? extends String>) linkedHashSet0);
      assertNotNull(treeSet0);
      assertEquals("[]", treeSet0.toString());
      assertEquals(0, linkedHashSet0.size());
      assertEquals(true, linkedHashSet0.isEmpty());
      assertEquals("[]", linkedHashSet0.toString());
      
      boolean boolean0 = astRoot0.hasSideEffects();
      assertFalse(boolean0);
      assertEquals(3135, astRoot0.getPosition());
      assertEquals(0, astRoot0.getRegexpCount());
      assertEquals(-1, astRoot0.getBaseLineno());
      assertEquals(0, astRoot0.depth());
      assertNull(astRoot0.getJsDoc());
      assertNull(astRoot0.getEncodedSource());
      assertEquals(0, astRoot0.getParamCount());
      assertEquals(-1, astRoot0.getEndLineno());
      assertEquals(false, astRoot0.isInStrictMode());
      assertEquals(-1, astRoot0.getLineno());
      assertEquals(136, astRoot0.getType());
      assertEquals("136", astRoot0.toString());
      assertEquals(3135, astRoot0.getLength());
      assertEquals(3135, astRoot0.getAbsolutePosition());
      assertEquals(true, astRoot0.hasChildren());
      assertEquals(-1, astRoot0.getEncodedSourceStart());
      assertEquals(0, astRoot0.getFunctionCount());
      assertEquals(-1, astRoot0.getEncodedSourceEnd());
      assertNull(astRoot0.getSourceName());
      
      Config config0 = new Config(treeSet0, linkedHashSet0, boolean0, boolean0, boolean0);
      assertNotNull(config0);
      assertEquals("[]", treeSet0.toString());
      assertEquals(3135, astRoot0.getPosition());
      assertEquals(0, astRoot0.getRegexpCount());
      assertEquals(-1, astRoot0.getBaseLineno());
      assertEquals(0, astRoot0.depth());
      assertNull(astRoot0.getJsDoc());
      assertNull(astRoot0.getEncodedSource());
      assertEquals(0, astRoot0.getParamCount());
      assertEquals(-1, astRoot0.getEndLineno());
      assertEquals(false, astRoot0.isInStrictMode());
      assertEquals(-1, astRoot0.getLineno());
      assertEquals(136, astRoot0.getType());
      assertEquals("136", astRoot0.toString());
      assertEquals(3135, astRoot0.getLength());
      assertEquals(3135, astRoot0.getAbsolutePosition());
      assertEquals(true, astRoot0.hasChildren());
      assertEquals(-1, astRoot0.getEncodedSourceStart());
      assertEquals(0, astRoot0.getFunctionCount());
      assertEquals(-1, astRoot0.getEncodedSourceEnd());
      assertNull(astRoot0.getSourceName());
      assertEquals(0, linkedHashSet0.size());
      assertEquals(true, linkedHashSet0.isEmpty());
      assertEquals("[]", linkedHashSet0.toString());
      
      ErrorCollector errorCollector0 = new ErrorCollector();
      assertNotNull(errorCollector0);
      
      Node node0 = IRFactory.transformTree(astRoot0, string0, config0, (ErrorReporter) errorCollector0);
      assertNotNull(node0);
      assertEquals("[]", treeSet0.toString());
      assertEquals(3135, astRoot0.getPosition());
      assertEquals(0, astRoot0.getRegexpCount());
      assertEquals(-1, astRoot0.getBaseLineno());
      assertEquals(0, astRoot0.depth());
      assertNull(astRoot0.getJsDoc());
      assertNull(astRoot0.getEncodedSource());
      assertEquals(0, astRoot0.getParamCount());
      assertEquals(-1, astRoot0.getEndLineno());
      assertEquals(false, astRoot0.isInStrictMode());
      assertEquals(-1, astRoot0.getLineno());
      assertEquals(136, astRoot0.getType());
      assertEquals("136", astRoot0.toString());
      assertEquals(3135, astRoot0.getLength());
      assertEquals(3135, astRoot0.getAbsolutePosition());
      assertEquals(true, astRoot0.hasChildren());
      assertEquals(-1, astRoot0.getEncodedSourceStart());
      assertEquals(0, astRoot0.getFunctionCount());
      assertEquals(-1, astRoot0.getEncodedSourceEnd());
      assertNull(astRoot0.getSourceName());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(-1, node0.getCharno());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(132, node0.getType());
      assertEquals(true, node0.hasChildren());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(true, node0.hasOneChild());
      assertEquals(1, node0.getChildCount());
      assertEquals(false, node0.isVarArgs());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(0, linkedHashSet0.size());
      assertEquals(true, linkedHashSet0.isEmpty());
      assertEquals("[]", linkedHashSet0.toString());
  }

  @Test
  public void test3()  throws Throwable  {
      int int0 = 3090;
      AstRoot astRoot0 = new AstRoot(int0);
      assertNotNull(astRoot0);
      assertEquals(false, astRoot0.isInStrictMode());
      assertNull(astRoot0.getSourceName());
      assertEquals(1, astRoot0.getLength());
      assertEquals(0, astRoot0.getRegexpCount());
      assertNull(astRoot0.getJsDoc());
      assertEquals(-1, astRoot0.getEncodedSourceStart());
      assertEquals(3090, astRoot0.getPosition());
      assertEquals(136, astRoot0.getType());
      assertEquals(0, astRoot0.getFunctionCount());
      assertEquals(false, astRoot0.hasChildren());
      assertEquals(0, astRoot0.depth());
      assertEquals("136", astRoot0.toString());
      assertEquals(-1, astRoot0.getEndLineno());
      assertEquals(-1, astRoot0.getLineno());
      assertNull(astRoot0.getEncodedSource());
      assertEquals(3090, astRoot0.getAbsolutePosition());
      assertEquals(0, astRoot0.getParamCount());
      assertEquals(-1, astRoot0.getBaseLineno());
      assertEquals(-1, astRoot0.getEncodedSourceEnd());
      
      String string0 = "ShI}uld 2ot happe8\n";
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>(int0, int0);
      assertNotNull(linkedHashSet0);
      assertEquals(0, linkedHashSet0.size());
      assertEquals("[]", linkedHashSet0.toString());
      assertEquals(true, linkedHashSet0.isEmpty());
      
      TreeSet<String> treeSet0 = new TreeSet<String>((Collection<? extends String>) linkedHashSet0);
      assertNotNull(treeSet0);
      assertEquals(0, linkedHashSet0.size());
      assertEquals("[]", linkedHashSet0.toString());
      assertEquals(true, linkedHashSet0.isEmpty());
      assertEquals("[]", treeSet0.toString());
      
      Token.CommentType token_CommentType0 = Token.CommentType.JSDOC;
      boolean boolean0 = linkedHashSet0.equals((Object) treeSet0);
      assertTrue(boolean0);
      assertEquals(0, linkedHashSet0.size());
      assertEquals("[]", linkedHashSet0.toString());
      assertEquals(true, linkedHashSet0.isEmpty());
      assertEquals("[]", treeSet0.toString());
      
      Comment comment0 = new Comment(int0, int0, token_CommentType0, string0);
      assertNotNull(comment0);
      assertEquals(false, comment0.isParsed());
      assertEquals(Token.CommentType.JSDOC, comment0.getCommentType());
      assertEquals("161", comment0.toString());
      assertEquals(3090, comment0.getLength());
      assertEquals(3090, comment0.getPosition());
      assertEquals(false, comment0.hasChildren());
      assertEquals(-1, comment0.getLineno());
      assertEquals(3090, comment0.getAbsolutePosition());
      assertEquals("ShI}uld 2ot happe8\n", comment0.getValue());
      assertNull(comment0.getJsDoc());
      assertEquals(0, comment0.depth());
      assertEquals(161, comment0.getType());
      
      astRoot0.addComment(comment0);
      assertEquals(false, astRoot0.isInStrictMode());
      assertNull(astRoot0.getSourceName());
      assertEquals(1, astRoot0.getLength());
      assertEquals(0, astRoot0.getRegexpCount());
      assertNull(astRoot0.getJsDoc());
      assertEquals(-1, astRoot0.getEncodedSourceStart());
      assertEquals(3090, astRoot0.getPosition());
      assertEquals(136, astRoot0.getType());
      assertEquals(0, astRoot0.getFunctionCount());
      assertEquals(false, astRoot0.hasChildren());
      assertEquals(0, astRoot0.depth());
      assertEquals("136", astRoot0.toString());
      assertEquals(-1, astRoot0.getEndLineno());
      assertEquals(-1, astRoot0.getLineno());
      assertNull(astRoot0.getEncodedSource());
      assertEquals(3090, astRoot0.getAbsolutePosition());
      assertEquals(0, astRoot0.getParamCount());
      assertEquals(-1, astRoot0.getBaseLineno());
      assertEquals(-1, astRoot0.getEncodedSourceEnd());
      assertEquals(0, comment0.getPosition());
      assertEquals(false, comment0.isParsed());
      assertEquals(Token.CommentType.JSDOC, comment0.getCommentType());
      assertEquals("161", comment0.toString());
      assertEquals(3090, comment0.getLength());
      assertEquals(false, comment0.hasChildren());
      assertEquals(-1, comment0.getLineno());
      assertEquals(3090, comment0.getAbsolutePosition());
      assertEquals("ShI}uld 2ot happe8\n", comment0.getValue());
      assertNull(comment0.getJsDoc());
      assertEquals(1, comment0.depth());
      assertEquals(161, comment0.getType());
      
      Config config0 = new Config(linkedHashSet0, linkedHashSet0, boolean0, boolean0, boolean0);
      assertNotNull(config0);
      assertEquals(0, linkedHashSet0.size());
      assertEquals("[]", linkedHashSet0.toString());
      assertEquals(true, linkedHashSet0.isEmpty());
      assertEquals("[]", treeSet0.toString());
      
      ToolErrorReporter toolErrorReporter0 = new ToolErrorReporter(boolean0);
      assertNotNull(toolErrorReporter0);
      assertEquals(0, linkedHashSet0.size());
      assertEquals("[]", linkedHashSet0.toString());
      assertEquals(true, linkedHashSet0.isEmpty());
      assertEquals("[]", treeSet0.toString());
      assertEquals(true, toolErrorReporter0.isReportingWarnings());
      assertEquals(false, toolErrorReporter0.hasReportedError());
      
      Node node0 = IRFactory.transformTree(astRoot0, string0, config0, (ErrorReporter) toolErrorReporter0);
      assertNotNull(node0);
      assertEquals(false, astRoot0.isInStrictMode());
      assertNull(astRoot0.getSourceName());
      assertEquals(1, astRoot0.getLength());
      assertEquals(0, astRoot0.getRegexpCount());
      assertNull(astRoot0.getJsDoc());
      assertEquals(-1, astRoot0.getEncodedSourceStart());
      assertEquals(3090, astRoot0.getPosition());
      assertEquals(136, astRoot0.getType());
      assertEquals(0, astRoot0.getFunctionCount());
      assertEquals(false, astRoot0.hasChildren());
      assertEquals(0, astRoot0.depth());
      assertEquals("136", astRoot0.toString());
      assertEquals(-1, astRoot0.getEndLineno());
      assertEquals(-1, astRoot0.getLineno());
      assertNull(astRoot0.getEncodedSource());
      assertEquals(3090, astRoot0.getAbsolutePosition());
      assertEquals(0, astRoot0.getParamCount());
      assertEquals(-1, astRoot0.getBaseLineno());
      assertEquals(-1, astRoot0.getEncodedSourceEnd());
      assertEquals(0, linkedHashSet0.size());
      assertEquals("[]", linkedHashSet0.toString());
      assertEquals(true, linkedHashSet0.isEmpty());
      assertEquals("[]", treeSet0.toString());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(132, node0.getType());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.hasOneChild());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.hasChildren());
      assertEquals(true, toolErrorReporter0.isReportingWarnings());
      assertEquals(false, toolErrorReporter0.hasReportedError());
      
      ErrorCollector errorCollector0 = new ErrorCollector();
      assertNotNull(errorCollector0);
      
      Node node1 = IRFactory.transformTree(astRoot0, string0, config0, (ErrorReporter) errorCollector0);
      assertNotNull(node1);
      assertNotSame(node1, node0);
      assertFalse(node1.equals((Object)node0));
      assertEquals(false, astRoot0.isInStrictMode());
      assertNull(astRoot0.getSourceName());
      assertEquals(1, astRoot0.getLength());
      assertEquals(0, astRoot0.getRegexpCount());
      assertNull(astRoot0.getJsDoc());
      assertEquals(-1, astRoot0.getEncodedSourceStart());
      assertEquals(3090, astRoot0.getPosition());
      assertEquals(136, astRoot0.getType());
      assertEquals(0, astRoot0.getFunctionCount());
      assertEquals(false, astRoot0.hasChildren());
      assertEquals(0, astRoot0.depth());
      assertEquals("136", astRoot0.toString());
      assertEquals(-1, astRoot0.getEndLineno());
      assertEquals(-1, astRoot0.getLineno());
      assertNull(astRoot0.getEncodedSource());
      assertEquals(3090, astRoot0.getAbsolutePosition());
      assertEquals(0, astRoot0.getParamCount());
      assertEquals(-1, astRoot0.getBaseLineno());
      assertEquals(-1, astRoot0.getEncodedSourceEnd());
      assertEquals(0, linkedHashSet0.size());
      assertEquals("[]", linkedHashSet0.toString());
      assertEquals(true, linkedHashSet0.isEmpty());
      assertEquals("[]", treeSet0.toString());
      assertEquals(false, node1.hasChildren());
      assertEquals(false, node1.isOnlyModifiesThisCall());
      assertEquals(false, node1.hasOneChild());
      assertEquals(0, node1.getSideEffectFlags());
      assertEquals(false, node1.isUnscopedQualifiedName());
      assertEquals(false, node1.isQuotedString());
      assertEquals(-1, node1.getCharno());
      assertEquals(false, node1.isNoSideEffectsCall());
      assertEquals(132, node1.getType());
      assertEquals(false, node1.isLocalResultCall());
      assertEquals(false, node1.wasEmptyNode());
      assertEquals(false, node1.isVarArgs());
      assertEquals(0, node1.getChildCount());
      assertEquals(false, node1.hasMoreThanOneChild());
      assertEquals(false, node1.isOptionalArg());
      assertEquals(false, node1.isQualifiedName());
      assertEquals(-1, node1.getLineno());
      assertEquals(false, node1.isSyntheticBlock());
  }

  @Test
  public void test4()  throws Throwable  {
      int int0 = 3135;
      AstRoot astRoot0 = new AstRoot(int0);
      assertNotNull(astRoot0);
      assertEquals(-1, astRoot0.getEndLineno());
      assertEquals(false, astRoot0.isInStrictMode());
      assertNull(astRoot0.getJsDoc());
      assertNull(astRoot0.getEncodedSource());
      assertEquals(false, astRoot0.hasChildren());
      assertEquals(0, astRoot0.getParamCount());
      assertEquals(0, astRoot0.depth());
      assertEquals(-1, astRoot0.getEncodedSourceStart());
      assertEquals(-1, astRoot0.getLineno());
      assertEquals(0, astRoot0.getFunctionCount());
      assertNull(astRoot0.getSourceName());
      assertEquals(3135, astRoot0.getAbsolutePosition());
      assertEquals(3135, astRoot0.getPosition());
      assertEquals(0, astRoot0.getRegexpCount());
      assertEquals(-1, astRoot0.getEncodedSourceEnd());
      assertEquals(1, astRoot0.getLength());
      assertEquals(-1, astRoot0.getBaseLineno());
      assertEquals("136", astRoot0.toString());
      assertEquals(136, astRoot0.getType());
      
      String string0 = "ShI}uld 2ot happe8\n";
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>(int0, int0);
      assertNotNull(linkedHashSet0);
      assertEquals("[]", linkedHashSet0.toString());
      assertEquals(0, linkedHashSet0.size());
      assertEquals(true, linkedHashSet0.isEmpty());
      
      boolean boolean0 = linkedHashSet0.add(string0);
      assertTrue(boolean0);
      assertEquals(1, linkedHashSet0.size());
      assertEquals("[ShI}uld 2ot happe8\n]", linkedHashSet0.toString());
      assertEquals(false, linkedHashSet0.isEmpty());
      
      Token.CommentType token_CommentType0 = Token.CommentType.HTML;
      Comment comment0 = new Comment(int0, int0, token_CommentType0, string0);
      assertNotNull(comment0);
      assertEquals(3135, comment0.getPosition());
      assertEquals(-1, comment0.getLineno());
      assertEquals(false, comment0.isParsed());
      assertNull(comment0.getJsDoc());
      assertEquals(Token.CommentType.HTML, comment0.getCommentType());
      assertEquals(3135, comment0.getLength());
      assertEquals(3135, comment0.getAbsolutePosition());
      assertEquals(161, comment0.getType());
      assertEquals("161", comment0.toString());
      assertEquals(0, comment0.depth());
      assertEquals("ShI}uld 2ot happe8\n", comment0.getValue());
      assertEquals(false, comment0.hasChildren());
      
      astRoot0.addComment(comment0);
      assertEquals(0, comment0.getPosition());
      assertEquals(-1, comment0.getLineno());
      assertEquals(false, comment0.isParsed());
      assertNull(comment0.getJsDoc());
      assertEquals(Token.CommentType.HTML, comment0.getCommentType());
      assertEquals(3135, comment0.getLength());
      assertEquals(3135, comment0.getAbsolutePosition());
      assertEquals(161, comment0.getType());
      assertEquals("161", comment0.toString());
      assertEquals("ShI}uld 2ot happe8\n", comment0.getValue());
      assertEquals(false, comment0.hasChildren());
      assertEquals(1, comment0.depth());
      assertEquals(-1, astRoot0.getEndLineno());
      assertEquals(false, astRoot0.isInStrictMode());
      assertNull(astRoot0.getJsDoc());
      assertNull(astRoot0.getEncodedSource());
      assertEquals(false, astRoot0.hasChildren());
      assertEquals(0, astRoot0.getParamCount());
      assertEquals(0, astRoot0.depth());
      assertEquals(-1, astRoot0.getEncodedSourceStart());
      assertEquals(-1, astRoot0.getLineno());
      assertEquals(0, astRoot0.getFunctionCount());
      assertNull(astRoot0.getSourceName());
      assertEquals(3135, astRoot0.getAbsolutePosition());
      assertEquals(3135, astRoot0.getPosition());
      assertEquals(0, astRoot0.getRegexpCount());
      assertEquals(-1, astRoot0.getEncodedSourceEnd());
      assertEquals(1, astRoot0.getLength());
      assertEquals(-1, astRoot0.getBaseLineno());
      assertEquals("136", astRoot0.toString());
      assertEquals(136, astRoot0.getType());
      
      Config config0 = new Config(linkedHashSet0, linkedHashSet0, boolean0, boolean0, boolean0);
      assertNotNull(config0);
      assertEquals(1, linkedHashSet0.size());
      assertEquals("[ShI}uld 2ot happe8\n]", linkedHashSet0.toString());
      assertEquals(false, linkedHashSet0.isEmpty());
      
      ToolErrorReporter toolErrorReporter0 = new ToolErrorReporter(boolean0);
      assertNotNull(toolErrorReporter0);
      assertEquals(1, linkedHashSet0.size());
      assertEquals("[ShI}uld 2ot happe8\n]", linkedHashSet0.toString());
      assertEquals(false, linkedHashSet0.isEmpty());
      assertEquals(true, toolErrorReporter0.isReportingWarnings());
      assertEquals(false, toolErrorReporter0.hasReportedError());
      
      Node node0 = IRFactory.transformTree(astRoot0, string0, config0, (ErrorReporter) toolErrorReporter0);
      assertNotNull(node0);
      assertEquals(1, linkedHashSet0.size());
      assertEquals("[ShI}uld 2ot happe8\n]", linkedHashSet0.toString());
      assertEquals(false, linkedHashSet0.isEmpty());
      assertEquals(-1, astRoot0.getEndLineno());
      assertEquals(false, astRoot0.isInStrictMode());
      assertNull(astRoot0.getJsDoc());
      assertNull(astRoot0.getEncodedSource());
      assertEquals(false, astRoot0.hasChildren());
      assertEquals(0, astRoot0.getParamCount());
      assertEquals(0, astRoot0.depth());
      assertEquals(-1, astRoot0.getEncodedSourceStart());
      assertEquals(-1, astRoot0.getLineno());
      assertEquals(0, astRoot0.getFunctionCount());
      assertNull(astRoot0.getSourceName());
      assertEquals(3135, astRoot0.getAbsolutePosition());
      assertEquals(3135, astRoot0.getPosition());
      assertEquals(0, astRoot0.getRegexpCount());
      assertEquals(-1, astRoot0.getEncodedSourceEnd());
      assertEquals(1, astRoot0.getLength());
      assertEquals(-1, astRoot0.getBaseLineno());
      assertEquals("136", astRoot0.toString());
      assertEquals(136, astRoot0.getType());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isQuotedString());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(132, node0.getType());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(true, toolErrorReporter0.isReportingWarnings());
      assertEquals(false, toolErrorReporter0.hasReportedError());
  }

  @Test
  public void test5()  throws Throwable  {
      int int0 = 2972;
      AstRoot astRoot0 = new AstRoot(int0);
      assertNotNull(astRoot0);
      assertEquals(0, astRoot0.getParamCount());
      assertEquals(2972, astRoot0.getPosition());
      assertEquals(0, astRoot0.getRegexpCount());
      assertEquals(-1, astRoot0.getBaseLineno());
      assertEquals(0, astRoot0.getFunctionCount());
      assertEquals(-1, astRoot0.getEncodedSourceStart());
      assertEquals(-1, astRoot0.getEndLineno());
      assertEquals(2972, astRoot0.getAbsolutePosition());
      assertEquals(1, astRoot0.getLength());
      assertEquals(0, astRoot0.depth());
      assertEquals(false, astRoot0.isInStrictMode());
      assertNull(astRoot0.getJsDoc());
      assertEquals("136", astRoot0.toString());
      assertEquals(136, astRoot0.getType());
      assertNull(astRoot0.getEncodedSource());
      assertEquals(-1, astRoot0.getLineno());
      assertEquals(-1, astRoot0.getEncodedSourceEnd());
      assertNull(astRoot0.getSourceName());
      assertEquals(false, astRoot0.hasChildren());
      
      String string0 = "label_id_prop";
      ExpressionStatement expressionStatement0 = new ExpressionStatement();
      assertNotNull(expressionStatement0);
      assertEquals("133", expressionStatement0.toString());
      assertNull(expressionStatement0.getJsDoc());
      assertEquals(133, expressionStatement0.getType());
      assertEquals(-1, expressionStatement0.getAbsolutePosition());
      assertEquals(-1, expressionStatement0.getPosition());
      assertEquals(false, expressionStatement0.hasChildren());
      assertEquals(0, expressionStatement0.depth());
      assertEquals(1, expressionStatement0.getLength());
      assertEquals(-1, expressionStatement0.getLineno());
      
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>(int0, int0);
      assertNotNull(linkedHashSet0);
      assertEquals(true, linkedHashSet0.isEmpty());
      assertEquals("[]", linkedHashSet0.toString());
      assertEquals(0, linkedHashSet0.size());
      
      TreeSet<String> treeSet0 = new TreeSet<String>((Collection<? extends String>) linkedHashSet0);
      assertNotNull(treeSet0);
      assertEquals(true, linkedHashSet0.isEmpty());
      assertEquals("[]", linkedHashSet0.toString());
      assertEquals(0, linkedHashSet0.size());
      assertEquals("[]", treeSet0.toString());
      
      boolean boolean0 = linkedHashSet0.add(string0);
      assertTrue(boolean0);
      assertEquals(1, linkedHashSet0.size());
      assertEquals(false, linkedHashSet0.isEmpty());
      assertEquals("[label_id_prop]", linkedHashSet0.toString());
      
      astRoot0.addChildToBack((com.google.javascript.jscomp.mozilla.rhino.Node) expressionStatement0);
      assertEquals(0, astRoot0.getParamCount());
      assertEquals(2972, astRoot0.getPosition());
      assertEquals(0, astRoot0.getRegexpCount());
      assertEquals(-1, astRoot0.getBaseLineno());
      assertEquals(0, astRoot0.getFunctionCount());
      assertEquals(-1, astRoot0.getEncodedSourceStart());
      assertEquals(-1, astRoot0.getEndLineno());
      assertEquals(2972, astRoot0.getAbsolutePosition());
      assertEquals(1, astRoot0.getLength());
      assertEquals(0, astRoot0.depth());
      assertEquals(false, astRoot0.isInStrictMode());
      assertNull(astRoot0.getJsDoc());
      assertEquals(true, astRoot0.hasChildren());
      assertEquals("136", astRoot0.toString());
      assertEquals(136, astRoot0.getType());
      assertNull(astRoot0.getEncodedSource());
      assertEquals(-1, astRoot0.getLineno());
      assertEquals(-1, astRoot0.getEncodedSourceEnd());
      assertNull(astRoot0.getSourceName());
      assertEquals("133", expressionStatement0.toString());
      assertNull(expressionStatement0.getJsDoc());
      assertEquals(133, expressionStatement0.getType());
      assertEquals(-1, expressionStatement0.getAbsolutePosition());
      assertEquals(-1, expressionStatement0.getPosition());
      assertEquals(false, expressionStatement0.hasChildren());
      assertEquals(0, expressionStatement0.depth());
      assertEquals(1, expressionStatement0.getLength());
      assertEquals(-1, expressionStatement0.getLineno());
      
      Config config0 = new Config(treeSet0, linkedHashSet0, boolean0, boolean0, boolean0);
      assertNotNull(config0);
      assertEquals(1, linkedHashSet0.size());
      assertEquals(false, linkedHashSet0.isEmpty());
      assertEquals("[label_id_prop]", linkedHashSet0.toString());
      assertEquals("[]", treeSet0.toString());
      
      ErrorCollector errorCollector0 = new ErrorCollector();
      assertNotNull(errorCollector0);
      
      // Undeclared exception!
      try {
        Node node0 = IRFactory.transformTree(astRoot0, string0, config0, (ErrorReporter) errorCollector0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test6()  throws Throwable  {
      int int0 = 3135;
      AstRoot astRoot0 = new AstRoot(int0);
      assertNotNull(astRoot0);
      assertEquals(-1, astRoot0.getBaseLineno());
      assertEquals(0, astRoot0.getRegexpCount());
      assertEquals(0, astRoot0.getFunctionCount());
      assertEquals(3135, astRoot0.getPosition());
      assertEquals(136, astRoot0.getType());
      assertEquals(1, astRoot0.getLength());
      assertEquals(false, astRoot0.hasChildren());
      assertEquals(-1, astRoot0.getLineno());
      assertEquals(-1, astRoot0.getEncodedSourceStart());
      assertEquals(3135, astRoot0.getAbsolutePosition());
      assertNull(astRoot0.getEncodedSource());
      assertEquals("136", astRoot0.toString());
      assertEquals(-1, astRoot0.getEndLineno());
      assertEquals(false, astRoot0.isInStrictMode());
      assertNull(astRoot0.getJsDoc());
      assertEquals(0, astRoot0.getParamCount());
      assertEquals(-1, astRoot0.getEncodedSourceEnd());
      assertNull(astRoot0.getSourceName());
      assertEquals(0, astRoot0.depth());
      
      String string0 = "|kinally ";
      NumberLiteral numberLiteral0 = (NumberLiteral)com.google.javascript.jscomp.mozilla.rhino.Node.newNumber((double) int0);
      assertNotNull(numberLiteral0);
      assertEquals(false, numberLiteral0.hasChildren());
      assertEquals(0, numberLiteral0.depth());
      assertEquals(-1, numberLiteral0.getPosition());
      assertEquals(40, numberLiteral0.getType());
      assertEquals("40", numberLiteral0.toString());
      assertEquals(-1, numberLiteral0.getAbsolutePosition());
      assertNull(numberLiteral0.getValue());
      assertEquals(3135.0, numberLiteral0.getDouble(), 0.01D);
      assertEquals(-1, numberLiteral0.getLineno());
      assertEquals(3135.0, numberLiteral0.getNumber(), 0.01D);
      assertEquals(1, numberLiteral0.getLength());
      assertNull(numberLiteral0.getJsDoc());
      
      astRoot0.addChildToBack((com.google.javascript.jscomp.mozilla.rhino.Node) numberLiteral0);
      assertEquals(false, numberLiteral0.hasChildren());
      assertEquals(0, numberLiteral0.depth());
      assertEquals(-1, numberLiteral0.getPosition());
      assertEquals(40, numberLiteral0.getType());
      assertEquals("40", numberLiteral0.toString());
      assertEquals(-1, numberLiteral0.getAbsolutePosition());
      assertNull(numberLiteral0.getValue());
      assertEquals(3135.0, numberLiteral0.getDouble(), 0.01D);
      assertEquals(-1, numberLiteral0.getLineno());
      assertEquals(3135.0, numberLiteral0.getNumber(), 0.01D);
      assertEquals(1, numberLiteral0.getLength());
      assertNull(numberLiteral0.getJsDoc());
      assertEquals(-1, astRoot0.getBaseLineno());
      assertEquals(0, astRoot0.getRegexpCount());
      assertEquals(0, astRoot0.getFunctionCount());
      assertEquals(3135, astRoot0.getPosition());
      assertEquals(136, astRoot0.getType());
      assertEquals(1, astRoot0.getLength());
      assertEquals(true, astRoot0.hasChildren());
      assertEquals(-1, astRoot0.getLineno());
      assertEquals(-1, astRoot0.getEncodedSourceStart());
      assertEquals(3135, astRoot0.getAbsolutePosition());
      assertNull(astRoot0.getEncodedSource());
      assertEquals("136", astRoot0.toString());
      assertEquals(-1, astRoot0.getEndLineno());
      assertEquals(false, astRoot0.isInStrictMode());
      assertNull(astRoot0.getJsDoc());
      assertEquals(0, astRoot0.getParamCount());
      assertEquals(-1, astRoot0.getEncodedSourceEnd());
      assertNull(astRoot0.getSourceName());
      assertEquals(0, astRoot0.depth());
      
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>(int0, int0);
      assertNotNull(linkedHashSet0);
      assertEquals(true, linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertEquals("[]", linkedHashSet0.toString());
      
      TreeSet<String> treeSet0 = new TreeSet<String>((Collection<? extends String>) linkedHashSet0);
      assertNotNull(treeSet0);
      assertEquals("[]", treeSet0.toString());
      assertEquals(true, linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertEquals("[]", linkedHashSet0.toString());
      
      boolean boolean0 = numberLiteral0.hasSideEffects();
      assertFalse(boolean0);
      assertEquals(false, numberLiteral0.hasChildren());
      assertEquals(0, numberLiteral0.depth());
      assertEquals(-1, numberLiteral0.getPosition());
      assertEquals(40, numberLiteral0.getType());
      assertEquals("40", numberLiteral0.toString());
      assertEquals(-1, numberLiteral0.getAbsolutePosition());
      assertNull(numberLiteral0.getValue());
      assertEquals(3135.0, numberLiteral0.getDouble(), 0.01D);
      assertEquals(-1, numberLiteral0.getLineno());
      assertEquals(3135.0, numberLiteral0.getNumber(), 0.01D);
      assertEquals(1, numberLiteral0.getLength());
      assertNull(numberLiteral0.getJsDoc());
      
      Config config0 = new Config(treeSet0, linkedHashSet0, boolean0, boolean0, boolean0);
      assertNotNull(config0);
      assertEquals("[]", treeSet0.toString());
      assertEquals(false, numberLiteral0.hasChildren());
      assertEquals(0, numberLiteral0.depth());
      assertEquals(-1, numberLiteral0.getPosition());
      assertEquals(40, numberLiteral0.getType());
      assertEquals("40", numberLiteral0.toString());
      assertEquals(-1, numberLiteral0.getAbsolutePosition());
      assertNull(numberLiteral0.getValue());
      assertEquals(3135.0, numberLiteral0.getDouble(), 0.01D);
      assertEquals(-1, numberLiteral0.getLineno());
      assertEquals(3135.0, numberLiteral0.getNumber(), 0.01D);
      assertEquals(1, numberLiteral0.getLength());
      assertNull(numberLiteral0.getJsDoc());
      assertEquals(true, linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertEquals("[]", linkedHashSet0.toString());
      
      ErrorCollector errorCollector0 = new ErrorCollector();
      assertNotNull(errorCollector0);
      
      Node node0 = IRFactory.transformTree(astRoot0, string0, config0, (ErrorReporter) errorCollector0);
      assertNotNull(node0);
      assertEquals("[]", treeSet0.toString());
      assertEquals(false, numberLiteral0.hasChildren());
      assertEquals(0, numberLiteral0.depth());
      assertEquals(-1, numberLiteral0.getPosition());
      assertEquals(40, numberLiteral0.getType());
      assertEquals("40", numberLiteral0.toString());
      assertEquals(-1, numberLiteral0.getAbsolutePosition());
      assertNull(numberLiteral0.getValue());
      assertEquals(3135.0, numberLiteral0.getDouble(), 0.01D);
      assertEquals(-1, numberLiteral0.getLineno());
      assertEquals(3135.0, numberLiteral0.getNumber(), 0.01D);
      assertEquals(1, numberLiteral0.getLength());
      assertNull(numberLiteral0.getJsDoc());
      assertEquals(-1, astRoot0.getBaseLineno());
      assertEquals(0, astRoot0.getRegexpCount());
      assertEquals(0, astRoot0.getFunctionCount());
      assertEquals(3135, astRoot0.getPosition());
      assertEquals(136, astRoot0.getType());
      assertEquals(1, astRoot0.getLength());
      assertEquals(true, astRoot0.hasChildren());
      assertEquals(-1, astRoot0.getLineno());
      assertEquals(-1, astRoot0.getEncodedSourceStart());
      assertEquals(3135, astRoot0.getAbsolutePosition());
      assertNull(astRoot0.getEncodedSource());
      assertEquals("136", astRoot0.toString());
      assertEquals(-1, astRoot0.getEndLineno());
      assertEquals(false, astRoot0.isInStrictMode());
      assertNull(astRoot0.getJsDoc());
      assertEquals(0, astRoot0.getParamCount());
      assertEquals(-1, astRoot0.getEncodedSourceEnd());
      assertNull(astRoot0.getSourceName());
      assertEquals(0, astRoot0.depth());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(-1, node0.getCharno());
      assertEquals(1, node0.getChildCount());
      assertEquals(true, node0.hasChildren());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(132, node0.getType());
      assertEquals(true, node0.hasOneChild());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isQuotedString());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(true, linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertEquals("[]", linkedHashSet0.toString());
  }

  @Test
  public void test7()  throws Throwable  {
      int int0 = (-897);
      AstRoot astRoot0 = new AstRoot(int0);
      assertNotNull(astRoot0);
      assertNull(astRoot0.getSourceName());
      assertEquals(0, astRoot0.depth());
      assertEquals(136, astRoot0.getType());
      assertEquals(-1, astRoot0.getEndLineno());
      assertEquals(-897, astRoot0.getAbsolutePosition());
      assertEquals(false, astRoot0.isInStrictMode());
      assertEquals(-1, astRoot0.getEncodedSourceStart());
      assertEquals(-1, astRoot0.getBaseLineno());
      assertNull(astRoot0.getEncodedSource());
      assertEquals("136", astRoot0.toString());
      assertEquals(0, astRoot0.getRegexpCount());
      assertEquals(-897, astRoot0.getPosition());
      assertNull(astRoot0.getJsDoc());
      assertEquals(1, astRoot0.getLength());
      assertEquals(-1, astRoot0.getEncodedSourceEnd());
      assertEquals(-1, astRoot0.getLineno());
      assertEquals(0, astRoot0.getFunctionCount());
      assertEquals(false, astRoot0.hasChildren());
      assertEquals(0, astRoot0.getParamCount());
      
      String string0 = "  ";
      Locale locale0 = Locale.UK;
      assertNotNull(locale0);
      assertEquals("GB", locale0.getCountry());
      assertEquals("en_GB", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("GBR", locale0.getISO3Country());
      assertEquals("en", locale0.getLanguage());
      
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      assertNotNull(set0);
      assertEquals(true, set0.isEmpty());
      assertEquals(0, set0.size());
      assertEquals("GB", locale0.getCountry());
      assertEquals("en_GB", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("GBR", locale0.getISO3Country());
      assertEquals("en", locale0.getLanguage());
      
      boolean boolean0 = false;
      Config config0 = new Config(set0, set0, boolean0, boolean0, boolean0);
      assertNotNull(config0);
      assertEquals(true, set0.isEmpty());
      assertEquals(0, set0.size());
      assertEquals("GB", locale0.getCountry());
      assertEquals("en_GB", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("GBR", locale0.getISO3Country());
      assertEquals("en", locale0.getLanguage());
      
      ErrorCollector errorCollector0 = new ErrorCollector();
      assertNotNull(errorCollector0);
      
      AstRoot astRoot1 = (AstRoot)astRoot0.setType(int0);
      assertNotNull(astRoot1);
      assertSame(astRoot1, astRoot0);
      assertSame(astRoot0, astRoot1);
      assertNull(astRoot1.getEncodedSource());
      assertEquals(-1, astRoot1.getLineno());
      assertEquals(-897, astRoot1.getType());
      assertEquals(0, astRoot1.getParamCount());
      assertEquals(-897, astRoot1.getAbsolutePosition());
      assertEquals(-1, astRoot1.getEncodedSourceStart());
      assertEquals(1, astRoot1.getLength());
      assertNull(astRoot1.getJsDoc());
      assertEquals(-1, astRoot1.getEndLineno());
      assertNull(astRoot1.getSourceName());
      assertEquals(false, astRoot1.hasChildren());
      assertEquals(0, astRoot1.getRegexpCount());
      assertEquals(-897, astRoot1.getPosition());
      assertEquals(-1, astRoot1.getEncodedSourceEnd());
      assertEquals(false, astRoot1.isInStrictMode());
      assertEquals(0, astRoot1.depth());
      assertEquals(-1, astRoot1.getBaseLineno());
      assertEquals(0, astRoot1.getFunctionCount());
      assertEquals("-897", astRoot1.toString());
      assertNull(astRoot0.getSourceName());
      assertEquals(0, astRoot0.depth());
      assertEquals("-897", astRoot0.toString());
      assertEquals(-1, astRoot0.getEndLineno());
      assertEquals(-897, astRoot0.getAbsolutePosition());
      assertEquals(false, astRoot0.isInStrictMode());
      assertEquals(-1, astRoot0.getEncodedSourceStart());
      assertEquals(-1, astRoot0.getBaseLineno());
      assertNull(astRoot0.getEncodedSource());
      assertEquals(0, astRoot0.getRegexpCount());
      assertEquals(-897, astRoot0.getPosition());
      assertNull(astRoot0.getJsDoc());
      assertEquals(1, astRoot0.getLength());
      assertEquals(-897, astRoot0.getType());
      assertEquals(-1, astRoot0.getEncodedSourceEnd());
      assertEquals(-1, astRoot0.getLineno());
      assertEquals(0, astRoot0.getFunctionCount());
      assertEquals(false, astRoot0.hasChildren());
      assertEquals(0, astRoot0.getParamCount());
      
      // Undeclared exception!
      try {
        Node node0 = IRFactory.transformTree(astRoot0, string0, config0, (ErrorReporter) errorCollector0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // -897
         //
      }
  }
}
