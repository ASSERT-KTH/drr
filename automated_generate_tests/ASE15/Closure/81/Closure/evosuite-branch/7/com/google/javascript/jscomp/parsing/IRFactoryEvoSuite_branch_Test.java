/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 23:28:05 GMT 2014
 */

package com.google.javascript.jscomp.parsing;

import static org.junit.Assert.*; import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.junit.Test;
import com.google.javascript.jscomp.mozilla.rhino.Context;
import com.google.javascript.jscomp.mozilla.rhino.ErrorReporter;
import com.google.javascript.jscomp.mozilla.rhino.Node;
import com.google.javascript.jscomp.mozilla.rhino.Token;
import com.google.javascript.jscomp.mozilla.rhino.ast.ArrayLiteral;
import com.google.javascript.jscomp.mozilla.rhino.ast.AstNode;
import com.google.javascript.jscomp.mozilla.rhino.ast.AstRoot;
import com.google.javascript.jscomp.mozilla.rhino.ast.Comment;
import com.google.javascript.jscomp.mozilla.rhino.ast.ContinueStatement;
import com.google.javascript.jscomp.mozilla.rhino.ast.ElementGet;
import com.google.javascript.jscomp.mozilla.rhino.ast.ExpressionStatement;
import com.google.javascript.jscomp.mozilla.rhino.ast.Name;
import com.google.javascript.jscomp.mozilla.rhino.ast.NumberLiteral;
import com.google.javascript.jscomp.mozilla.rhino.ast.ObjectProperty;
import com.google.javascript.jscomp.mozilla.rhino.ast.ParenthesizedExpression;
import com.google.javascript.jscomp.mozilla.rhino.ast.SwitchCase;
import com.google.javascript.jscomp.mozilla.rhino.tools.ToolErrorReporter;
import com.google.javascript.jscomp.parsing.Config;
import com.google.javascript.jscomp.parsing.IRFactory;
import java.util.Locale;
import java.util.Set;



import org.junit.runner.RunWith;


public class IRFactoryEvoSuite_branch_Test  {

  @Test
  public void test00()  throws Throwable  {
      int int0 = 453;
      AstRoot astRoot0 = new AstRoot(int0);
      assertNull(astRoot0.getSourceName());
      assertEquals(136, astRoot0.getType());
      assertNull(astRoot0.getEncodedSource());
      assertEquals(0, astRoot0.getRegexpCount());
      assertNull(astRoot0.getJsDoc());
      assertEquals(-1, astRoot0.getBaseLineno());
      assertEquals(-1, astRoot0.getLineno());
      assertEquals(453, astRoot0.getPosition());
      assertEquals(-1, astRoot0.getEncodedSourceStart());
      assertEquals(-1, astRoot0.getEndLineno());
      assertEquals(453, astRoot0.getAbsolutePosition());
      assertEquals(false, astRoot0.hasChildren());
      assertEquals(false, astRoot0.isInStrictMode());
      assertEquals(-1, astRoot0.getEncodedSourceEnd());
      assertEquals(1, astRoot0.getLength());
      assertEquals(0, astRoot0.getParamCount());
      assertEquals(0, astRoot0.depth());
      assertEquals("136", astRoot0.toString());
      assertEquals(0, astRoot0.getFunctionCount());
      assertNotNull(astRoot0);
      
      ExpressionStatement expressionStatement0 = new ExpressionStatement();
      assertEquals(-1, expressionStatement0.getPosition());
      assertEquals(false, expressionStatement0.hasChildren());
      assertEquals(-1, expressionStatement0.getLineno());
      assertEquals(-1, expressionStatement0.getAbsolutePosition());
      assertEquals("133", expressionStatement0.toString());
      assertEquals(1, expressionStatement0.getLength());
      assertEquals(133, expressionStatement0.getType());
      assertEquals(0, expressionStatement0.depth());
      assertNull(expressionStatement0.getJsDoc());
      assertNotNull(expressionStatement0);
      
      expressionStatement0.setHasResult();
      assertEquals(-1, expressionStatement0.getPosition());
      assertEquals(false, expressionStatement0.hasChildren());
      assertEquals("134", expressionStatement0.toString());
      assertEquals(-1, expressionStatement0.getLineno());
      assertEquals(-1, expressionStatement0.getAbsolutePosition());
      assertEquals(1, expressionStatement0.getLength());
      assertEquals(0, expressionStatement0.depth());
      assertEquals(134, expressionStatement0.getType());
      assertNull(expressionStatement0.getJsDoc());
      
      astRoot0.addChildToFront((Node) expressionStatement0);
      assertNull(astRoot0.getSourceName());
      assertEquals(136, astRoot0.getType());
      assertNull(astRoot0.getEncodedSource());
      assertEquals(0, astRoot0.getRegexpCount());
      assertNull(astRoot0.getJsDoc());
      assertEquals(-1, astRoot0.getBaseLineno());
      assertEquals(-1, astRoot0.getLineno());
      assertEquals(453, astRoot0.getPosition());
      assertEquals(-1, astRoot0.getEncodedSourceStart());
      assertEquals(-1, astRoot0.getEndLineno());
      assertEquals(453, astRoot0.getAbsolutePosition());
      assertEquals(false, astRoot0.isInStrictMode());
      assertEquals(-1, astRoot0.getEncodedSourceEnd());
      assertEquals(1, astRoot0.getLength());
      assertEquals(0, astRoot0.getParamCount());
      assertEquals(0, astRoot0.depth());
      assertEquals(true, astRoot0.hasChildren());
      assertEquals("136", astRoot0.toString());
      assertEquals(0, astRoot0.getFunctionCount());
      assertEquals(-1, expressionStatement0.getPosition());
      assertEquals(false, expressionStatement0.hasChildren());
      assertEquals("134", expressionStatement0.toString());
      assertEquals(-1, expressionStatement0.getLineno());
      assertEquals(-1, expressionStatement0.getAbsolutePosition());
      assertEquals(1, expressionStatement0.getLength());
      assertEquals(0, expressionStatement0.depth());
      assertEquals(134, expressionStatement0.getType());
      assertNull(expressionStatement0.getJsDoc());
      
      String string0 = " ";
      Config config0 = null;
      boolean boolean0 = false;
      ToolErrorReporter toolErrorReporter0 = new ToolErrorReporter(boolean0);
      assertEquals(false, toolErrorReporter0.isReportingWarnings());
      assertEquals(false, toolErrorReporter0.hasReportedError());
      assertNotNull(toolErrorReporter0);
      
      // Undeclared exception!
      try {
        com.google.javascript.rhino.Node node0 = IRFactory.transformTree(astRoot0, string0, config0, (ErrorReporter) toolErrorReporter0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test01()  throws Throwable  {
      int int0 = 53;
      AstRoot astRoot0 = new AstRoot(int0);
      assertNull(astRoot0.getSourceName());
      assertEquals(0, astRoot0.depth());
      assertNull(astRoot0.getEncodedSource());
      assertEquals(53, astRoot0.getAbsolutePosition());
      assertEquals("136", astRoot0.toString());
      assertEquals(0, astRoot0.getRegexpCount());
      assertEquals(-1, astRoot0.getEncodedSourceEnd());
      assertNull(astRoot0.getJsDoc());
      assertEquals(-1, astRoot0.getLineno());
      assertEquals(false, astRoot0.isInStrictMode());
      assertEquals(false, astRoot0.hasChildren());
      assertEquals(0, astRoot0.getParamCount());
      assertEquals(-1, astRoot0.getEncodedSourceStart());
      assertEquals(-1, astRoot0.getEndLineno());
      assertEquals(1, astRoot0.getLength());
      assertEquals(53, astRoot0.getPosition());
      assertEquals(-1, astRoot0.getBaseLineno());
      assertEquals(136, astRoot0.getType());
      assertEquals(0, astRoot0.getFunctionCount());
      assertNotNull(astRoot0);
      
      String string0 = ":[gbKU^KN";
      ObjectProperty objectProperty0 = new ObjectProperty(int0);
      assertEquals("103", objectProperty0.toString());
      assertEquals(103, objectProperty0.getType());
      assertEquals(53, objectProperty0.getAbsolutePosition());
      assertEquals(false, objectProperty0.isSetter());
      assertEquals(-1, objectProperty0.getOperatorPosition());
      assertEquals(1, objectProperty0.getLength());
      assertEquals(53, objectProperty0.getPosition());
      assertNull(objectProperty0.getJsDoc());
      assertEquals(false, objectProperty0.isGetter());
      assertEquals(0, objectProperty0.depth());
      assertEquals(-1, objectProperty0.getLineno());
      assertEquals(false, objectProperty0.hasChildren());
      assertNotNull(objectProperty0);
      
      objectProperty0.setOperator(int0);
      assertEquals(53, objectProperty0.getAbsolutePosition());
      assertEquals(false, objectProperty0.isSetter());
      assertEquals(-1, objectProperty0.getOperatorPosition());
      assertEquals(1, objectProperty0.getLength());
      assertEquals(53, objectProperty0.getPosition());
      assertEquals("53", objectProperty0.toString());
      assertNull(objectProperty0.getJsDoc());
      assertEquals(false, objectProperty0.isGetter());
      assertEquals(53, objectProperty0.getType());
      assertEquals(0, objectProperty0.depth());
      assertEquals(-1, objectProperty0.getLineno());
      assertEquals(false, objectProperty0.hasChildren());
      
      astRoot0.addChildToFront((Node) objectProperty0);
      assertEquals(53, objectProperty0.getAbsolutePosition());
      assertEquals(false, objectProperty0.isSetter());
      assertEquals(-1, objectProperty0.getOperatorPosition());
      assertEquals(1, objectProperty0.getLength());
      assertEquals(53, objectProperty0.getPosition());
      assertEquals("53", objectProperty0.toString());
      assertNull(objectProperty0.getJsDoc());
      assertEquals(false, objectProperty0.isGetter());
      assertEquals(53, objectProperty0.getType());
      assertEquals(0, objectProperty0.depth());
      assertEquals(-1, objectProperty0.getLineno());
      assertEquals(false, objectProperty0.hasChildren());
      assertNull(astRoot0.getSourceName());
      assertEquals(0, astRoot0.depth());
      assertNull(astRoot0.getEncodedSource());
      assertEquals(53, astRoot0.getAbsolutePosition());
      assertEquals("136", astRoot0.toString());
      assertEquals(0, astRoot0.getRegexpCount());
      assertEquals(-1, astRoot0.getEncodedSourceEnd());
      assertNull(astRoot0.getJsDoc());
      assertEquals(-1, astRoot0.getLineno());
      assertEquals(false, astRoot0.isInStrictMode());
      assertEquals(0, astRoot0.getParamCount());
      assertEquals(-1, astRoot0.getEncodedSourceStart());
      assertEquals(-1, astRoot0.getEndLineno());
      assertEquals(1, astRoot0.getLength());
      assertEquals(53, astRoot0.getPosition());
      assertEquals(-1, astRoot0.getBaseLineno());
      assertEquals(136, astRoot0.getType());
      assertEquals(0, astRoot0.getFunctionCount());
      assertEquals(true, astRoot0.hasChildren());
      
      Config config0 = null;
      ToolErrorReporter toolErrorReporter0 = null;
      // Undeclared exception!
      try {
        com.google.javascript.rhino.Node node0 = IRFactory.transformTree(astRoot0, string0, config0, (ErrorReporter) toolErrorReporter0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test02()  throws Throwable  {
      int int0 = 46;
      AstRoot astRoot0 = new AstRoot(int0);
      assertEquals(1, astRoot0.getLength());
      assertEquals(0, astRoot0.depth());
      assertEquals(-1, astRoot0.getBaseLineno());
      assertEquals(0, astRoot0.getRegexpCount());
      assertEquals(-1, astRoot0.getEncodedSourceStart());
      assertNull(astRoot0.getJsDoc());
      assertEquals(false, astRoot0.isInStrictMode());
      assertEquals(-1, astRoot0.getLineno());
      assertEquals(-1, astRoot0.getEndLineno());
      assertEquals("136", astRoot0.toString());
      assertEquals(0, astRoot0.getParamCount());
      assertEquals(46, astRoot0.getAbsolutePosition());
      assertEquals(136, astRoot0.getType());
      assertNull(astRoot0.getEncodedSource());
      assertEquals(46, astRoot0.getPosition());
      assertEquals(0, astRoot0.getFunctionCount());
      assertNull(astRoot0.getSourceName());
      assertEquals(-1, astRoot0.getEncodedSourceEnd());
      assertEquals(false, astRoot0.hasChildren());
      assertNotNull(astRoot0);
      
      String string0 = "setters are not supported in Internet Explorer";
      Locale locale0 = Locale.ITALIAN;
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("it", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertNotNull(locale0);
      
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      assertEquals(true, set0.isEmpty());
      assertEquals(0, set0.size());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("it", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertNotNull(set0);
      
      boolean boolean0 = false;
      Config config0 = new Config(set0, set0, boolean0, boolean0, boolean0);
      assertEquals(true, set0.isEmpty());
      assertEquals(0, set0.size());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("it", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertNotNull(config0);
      
      ObjectProperty objectProperty0 = new ObjectProperty(int0);
      assertEquals(false, objectProperty0.isGetter());
      assertEquals(-1, objectProperty0.getLineno());
      assertEquals(46, objectProperty0.getPosition());
      assertEquals(1, objectProperty0.getLength());
      assertEquals(-1, objectProperty0.getOperatorPosition());
      assertEquals(false, objectProperty0.isSetter());
      assertEquals(46, objectProperty0.getAbsolutePosition());
      assertEquals("103", objectProperty0.toString());
      assertNull(objectProperty0.getJsDoc());
      assertEquals(false, objectProperty0.hasChildren());
      assertEquals(103, objectProperty0.getType());
      assertEquals(0, objectProperty0.depth());
      assertNotNull(objectProperty0);
      
      objectProperty0.setOperator(int0);
      assertEquals(false, objectProperty0.isGetter());
      assertEquals(-1, objectProperty0.getLineno());
      assertEquals(46, objectProperty0.getType());
      assertEquals(46, objectProperty0.getPosition());
      assertEquals("46", objectProperty0.toString());
      assertEquals(1, objectProperty0.getLength());
      assertEquals(-1, objectProperty0.getOperatorPosition());
      assertEquals(false, objectProperty0.isSetter());
      assertEquals(46, objectProperty0.getAbsolutePosition());
      assertNull(objectProperty0.getJsDoc());
      assertEquals(false, objectProperty0.hasChildren());
      assertEquals(0, objectProperty0.depth());
      
      astRoot0.addChildToFront((Node) objectProperty0);
      assertEquals(1, astRoot0.getLength());
      assertEquals(0, astRoot0.depth());
      assertEquals(-1, astRoot0.getBaseLineno());
      assertEquals(0, astRoot0.getRegexpCount());
      assertEquals(-1, astRoot0.getEncodedSourceStart());
      assertNull(astRoot0.getJsDoc());
      assertEquals(false, astRoot0.isInStrictMode());
      assertEquals(-1, astRoot0.getLineno());
      assertEquals(-1, astRoot0.getEndLineno());
      assertEquals(true, astRoot0.hasChildren());
      assertEquals("136", astRoot0.toString());
      assertEquals(0, astRoot0.getParamCount());
      assertEquals(46, astRoot0.getAbsolutePosition());
      assertEquals(136, astRoot0.getType());
      assertNull(astRoot0.getEncodedSource());
      assertEquals(46, astRoot0.getPosition());
      assertEquals(0, astRoot0.getFunctionCount());
      assertNull(astRoot0.getSourceName());
      assertEquals(-1, astRoot0.getEncodedSourceEnd());
      assertEquals(false, objectProperty0.isGetter());
      assertEquals(-1, objectProperty0.getLineno());
      assertEquals(46, objectProperty0.getType());
      assertEquals(46, objectProperty0.getPosition());
      assertEquals("46", objectProperty0.toString());
      assertEquals(1, objectProperty0.getLength());
      assertEquals(-1, objectProperty0.getOperatorPosition());
      assertEquals(false, objectProperty0.isSetter());
      assertEquals(46, objectProperty0.getAbsolutePosition());
      assertNull(objectProperty0.getJsDoc());
      assertEquals(false, objectProperty0.hasChildren());
      assertEquals(0, objectProperty0.depth());
      
      Context context0 = new Context();
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertEquals(false, context0.isGeneratingDebug());
      assertEquals(2147483647, context0.getMaximumInterpreterStackDepth());
      assertEquals(false, context0.isSealed());
      assertEquals(false, context0.isGeneratingDebugChanged());
      assertEquals(0, context0.getOptimizationLevel());
      assertEquals(0, context0.getLanguageVersion());
      assertEquals(true, context0.isGeneratingSource());
      assertEquals(false, context0.hasCompileFunctionsWithDynamicScope());
      assertNotNull(context0);
      assertFalse(context0.generateObserverCount);
      
      ToolErrorReporter toolErrorReporter0 = new ToolErrorReporter(context0.generateObserverCount);
      assertEquals(false, toolErrorReporter0.isReportingWarnings());
      assertEquals(false, toolErrorReporter0.hasReportedError());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertEquals(false, context0.isGeneratingDebug());
      assertEquals(2147483647, context0.getMaximumInterpreterStackDepth());
      assertEquals(false, context0.isSealed());
      assertEquals(false, context0.isGeneratingDebugChanged());
      assertEquals(0, context0.getOptimizationLevel());
      assertEquals(0, context0.getLanguageVersion());
      assertEquals(true, context0.isGeneratingSource());
      assertEquals(false, context0.hasCompileFunctionsWithDynamicScope());
      assertNotNull(toolErrorReporter0);
      assertFalse(context0.generateObserverCount);
      
      // Undeclared exception!
      try {
        com.google.javascript.rhino.Node node0 = IRFactory.transformTree(astRoot0, string0, config0, (ErrorReporter) toolErrorReporter0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test03()  throws Throwable  {
      int int0 = 26;
      AstRoot astRoot0 = new AstRoot(int0);
      assertEquals(-1, astRoot0.getEncodedSourceStart());
      assertEquals(0, astRoot0.depth());
      assertEquals(false, astRoot0.isInStrictMode());
      assertEquals(0, astRoot0.getFunctionCount());
      assertEquals(136, astRoot0.getType());
      assertEquals(-1, astRoot0.getBaseLineno());
      assertEquals(false, astRoot0.hasChildren());
      assertEquals(26, astRoot0.getAbsolutePosition());
      assertEquals(-1, astRoot0.getLineno());
      assertEquals(0, astRoot0.getRegexpCount());
      assertNull(astRoot0.getJsDoc());
      assertEquals(-1, astRoot0.getEncodedSourceEnd());
      assertEquals(-1, astRoot0.getEndLineno());
      assertEquals(0, astRoot0.getParamCount());
      assertNull(astRoot0.getSourceName());
      assertEquals(1, astRoot0.getLength());
      assertNull(astRoot0.getEncodedSource());
      assertEquals(26, astRoot0.getPosition());
      assertEquals("136", astRoot0.toString());
      assertNotNull(astRoot0);
      
      String string0 = ":[gbKU(KN";
      ObjectProperty objectProperty0 = new ObjectProperty(int0);
      assertEquals(-1, objectProperty0.getOperatorPosition());
      assertEquals(false, objectProperty0.hasChildren());
      assertEquals(103, objectProperty0.getType());
      assertEquals(26, objectProperty0.getAbsolutePosition());
      assertEquals("103", objectProperty0.toString());
      assertEquals(false, objectProperty0.isSetter());
      assertEquals(26, objectProperty0.getPosition());
      assertNull(objectProperty0.getJsDoc());
      assertEquals(-1, objectProperty0.getLineno());
      assertEquals(1, objectProperty0.getLength());
      assertEquals(0, objectProperty0.depth());
      assertEquals(false, objectProperty0.isGetter());
      assertNotNull(objectProperty0);
      
      int int1 = 23;
      objectProperty0.setOperator(int1);
      assertEquals(-1, objectProperty0.getOperatorPosition());
      assertEquals(23, objectProperty0.getType());
      assertEquals(false, objectProperty0.hasChildren());
      assertEquals("23", objectProperty0.toString());
      assertEquals(26, objectProperty0.getAbsolutePosition());
      assertEquals(false, objectProperty0.isSetter());
      assertEquals(26, objectProperty0.getPosition());
      assertNull(objectProperty0.getJsDoc());
      assertEquals(-1, objectProperty0.getLineno());
      assertEquals(1, objectProperty0.getLength());
      assertEquals(0, objectProperty0.depth());
      assertEquals(false, objectProperty0.isGetter());
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      
      astRoot0.addChildToFront((Node) objectProperty0);
      assertEquals(true, astRoot0.hasChildren());
      assertEquals(-1, astRoot0.getEncodedSourceStart());
      assertEquals(0, astRoot0.depth());
      assertEquals(false, astRoot0.isInStrictMode());
      assertEquals(0, astRoot0.getFunctionCount());
      assertEquals(136, astRoot0.getType());
      assertEquals(-1, astRoot0.getBaseLineno());
      assertEquals(26, astRoot0.getAbsolutePosition());
      assertEquals(-1, astRoot0.getLineno());
      assertEquals(0, astRoot0.getRegexpCount());
      assertNull(astRoot0.getJsDoc());
      assertEquals(-1, astRoot0.getEncodedSourceEnd());
      assertEquals(-1, astRoot0.getEndLineno());
      assertEquals(0, astRoot0.getParamCount());
      assertNull(astRoot0.getSourceName());
      assertEquals(1, astRoot0.getLength());
      assertNull(astRoot0.getEncodedSource());
      assertEquals(26, astRoot0.getPosition());
      assertEquals("136", astRoot0.toString());
      assertEquals(-1, objectProperty0.getOperatorPosition());
      assertEquals(23, objectProperty0.getType());
      assertEquals(false, objectProperty0.hasChildren());
      assertEquals("23", objectProperty0.toString());
      assertEquals(26, objectProperty0.getAbsolutePosition());
      assertEquals(false, objectProperty0.isSetter());
      assertEquals(26, objectProperty0.getPosition());
      assertNull(objectProperty0.getJsDoc());
      assertEquals(-1, objectProperty0.getLineno());
      assertEquals(1, objectProperty0.getLength());
      assertEquals(0, objectProperty0.depth());
      assertEquals(false, objectProperty0.isGetter());
      assertFalse(int0 == int1);
      
      Config config0 = null;
      Context context0 = new Context();
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertEquals(0, context0.getLanguageVersion());
      assertEquals(false, context0.isGeneratingDebugChanged());
      assertEquals(false, context0.hasCompileFunctionsWithDynamicScope());
      assertEquals(false, context0.isGeneratingDebug());
      assertEquals(2147483647, context0.getMaximumInterpreterStackDepth());
      assertEquals(0, context0.getOptimizationLevel());
      assertEquals(true, context0.isGeneratingSource());
      assertEquals(false, context0.isSealed());
      assertNotNull(context0);
      assertFalse(context0.generateObserverCount);
      
      ToolErrorReporter toolErrorReporter0 = new ToolErrorReporter(context0.generateObserverCount);
      assertEquals(false, toolErrorReporter0.hasReportedError());
      assertEquals(false, toolErrorReporter0.isReportingWarnings());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertEquals(0, context0.getLanguageVersion());
      assertEquals(false, context0.isGeneratingDebugChanged());
      assertEquals(false, context0.hasCompileFunctionsWithDynamicScope());
      assertEquals(false, context0.isGeneratingDebug());
      assertEquals(2147483647, context0.getMaximumInterpreterStackDepth());
      assertEquals(0, context0.getOptimizationLevel());
      assertEquals(true, context0.isGeneratingSource());
      assertEquals(false, context0.isSealed());
      assertNotNull(toolErrorReporter0);
      assertFalse(context0.generateObserverCount);
      
      // Undeclared exception!
      try {
        com.google.javascript.rhino.Node node0 = IRFactory.transformTree(astRoot0, string0, config0, (ErrorReporter) toolErrorReporter0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test04()  throws Throwable  {
      int int0 = 18;
      AstRoot astRoot0 = new AstRoot(int0);
      assertEquals(136, astRoot0.getType());
      assertEquals(-1, astRoot0.getEndLineno());
      assertEquals(-1, astRoot0.getEncodedSourceStart());
      assertEquals("136", astRoot0.toString());
      assertEquals(-1, astRoot0.getEncodedSourceEnd());
      assertEquals(0, astRoot0.getRegexpCount());
      assertNull(astRoot0.getJsDoc());
      assertEquals(18, astRoot0.getAbsolutePosition());
      assertNull(astRoot0.getEncodedSource());
      assertEquals(-1, astRoot0.getBaseLineno());
      assertEquals(1, astRoot0.getLength());
      assertEquals(false, astRoot0.hasChildren());
      assertEquals(-1, astRoot0.getLineno());
      assertEquals(18, astRoot0.getPosition());
      assertNull(astRoot0.getSourceName());
      assertEquals(0, astRoot0.depth());
      assertEquals(false, astRoot0.isInStrictMode());
      assertEquals(0, astRoot0.getFunctionCount());
      assertEquals(0, astRoot0.getParamCount());
      assertNotNull(astRoot0);
      
      String string0 = ":[gbKU(KN";
      ObjectProperty objectProperty0 = new ObjectProperty(int0);
      assertEquals(0, objectProperty0.depth());
      assertEquals(-1, objectProperty0.getOperatorPosition());
      assertEquals(103, objectProperty0.getType());
      assertEquals(false, objectProperty0.hasChildren());
      assertEquals(false, objectProperty0.isSetter());
      assertEquals(false, objectProperty0.isGetter());
      assertNull(objectProperty0.getJsDoc());
      assertEquals("103", objectProperty0.toString());
      assertEquals(1, objectProperty0.getLength());
      assertEquals(18, objectProperty0.getPosition());
      assertEquals(18, objectProperty0.getAbsolutePosition());
      assertEquals(-1, objectProperty0.getLineno());
      assertNotNull(objectProperty0);
      
      int int1 = 16;
      objectProperty0.setOperator(int1);
      assertEquals(16, objectProperty0.getType());
      assertEquals(0, objectProperty0.depth());
      assertEquals(-1, objectProperty0.getOperatorPosition());
      assertEquals(false, objectProperty0.hasChildren());
      assertEquals(false, objectProperty0.isSetter());
      assertEquals(false, objectProperty0.isGetter());
      assertNull(objectProperty0.getJsDoc());
      assertEquals(1, objectProperty0.getLength());
      assertEquals(18, objectProperty0.getPosition());
      assertEquals(18, objectProperty0.getAbsolutePosition());
      assertEquals("16", objectProperty0.toString());
      assertEquals(-1, objectProperty0.getLineno());
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      
      astRoot0.addChildToFront((Node) objectProperty0);
      assertEquals(16, objectProperty0.getType());
      assertEquals(0, objectProperty0.depth());
      assertEquals(-1, objectProperty0.getOperatorPosition());
      assertEquals(false, objectProperty0.hasChildren());
      assertEquals(false, objectProperty0.isSetter());
      assertEquals(false, objectProperty0.isGetter());
      assertNull(objectProperty0.getJsDoc());
      assertEquals(1, objectProperty0.getLength());
      assertEquals(18, objectProperty0.getPosition());
      assertEquals(18, objectProperty0.getAbsolutePosition());
      assertEquals("16", objectProperty0.toString());
      assertEquals(-1, objectProperty0.getLineno());
      assertEquals(true, astRoot0.hasChildren());
      assertEquals(136, astRoot0.getType());
      assertEquals(-1, astRoot0.getEndLineno());
      assertEquals(-1, astRoot0.getEncodedSourceStart());
      assertEquals("136", astRoot0.toString());
      assertEquals(-1, astRoot0.getEncodedSourceEnd());
      assertEquals(0, astRoot0.getRegexpCount());
      assertNull(astRoot0.getJsDoc());
      assertEquals(18, astRoot0.getAbsolutePosition());
      assertNull(astRoot0.getEncodedSource());
      assertEquals(-1, astRoot0.getBaseLineno());
      assertEquals(1, astRoot0.getLength());
      assertEquals(-1, astRoot0.getLineno());
      assertEquals(18, astRoot0.getPosition());
      assertNull(astRoot0.getSourceName());
      assertEquals(0, astRoot0.depth());
      assertEquals(false, astRoot0.isInStrictMode());
      assertEquals(0, astRoot0.getFunctionCount());
      assertEquals(0, astRoot0.getParamCount());
      assertFalse(int0 == int1);
      
      Config config0 = null;
      Context context0 = new Context();
      assertEquals(false, context0.isSealed());
      assertEquals(true, context0.isGeneratingSource());
      assertEquals(false, context0.hasCompileFunctionsWithDynamicScope());
      assertEquals(false, context0.isGeneratingDebugChanged());
      assertEquals(0, context0.getOptimizationLevel());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertEquals(2147483647, context0.getMaximumInterpreterStackDepth());
      assertEquals(false, context0.isGeneratingDebug());
      assertEquals(0, context0.getLanguageVersion());
      assertNotNull(context0);
      assertFalse(context0.generateObserverCount);
      
      ToolErrorReporter toolErrorReporter0 = new ToolErrorReporter(context0.generateObserverCount);
      assertEquals(false, context0.isSealed());
      assertEquals(true, context0.isGeneratingSource());
      assertEquals(false, context0.hasCompileFunctionsWithDynamicScope());
      assertEquals(false, context0.isGeneratingDebugChanged());
      assertEquals(0, context0.getOptimizationLevel());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertEquals(2147483647, context0.getMaximumInterpreterStackDepth());
      assertEquals(false, context0.isGeneratingDebug());
      assertEquals(0, context0.getLanguageVersion());
      assertEquals(false, toolErrorReporter0.isReportingWarnings());
      assertEquals(false, toolErrorReporter0.hasReportedError());
      assertNotNull(toolErrorReporter0);
      assertFalse(context0.generateObserverCount);
      
      // Undeclared exception!
      try {
        com.google.javascript.rhino.Node node0 = IRFactory.transformTree(astRoot0, string0, config0, (ErrorReporter) toolErrorReporter0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test05()  throws Throwable  {
      int int0 = 9;
      AstRoot astRoot0 = new AstRoot(int0);
      assertEquals(0, astRoot0.getFunctionCount());
      assertNull(astRoot0.getJsDoc());
      assertEquals(-1, astRoot0.getLineno());
      assertEquals(-1, astRoot0.getEndLineno());
      assertEquals(0, astRoot0.getRegexpCount());
      assertEquals(-1, astRoot0.getEncodedSourceStart());
      assertEquals(136, astRoot0.getType());
      assertEquals(0, astRoot0.depth());
      assertEquals(false, astRoot0.hasChildren());
      assertEquals("136", astRoot0.toString());
      assertEquals(9, astRoot0.getAbsolutePosition());
      assertNull(astRoot0.getEncodedSource());
      assertEquals(1, astRoot0.getLength());
      assertEquals(9, astRoot0.getPosition());
      assertEquals(-1, astRoot0.getBaseLineno());
      assertNull(astRoot0.getSourceName());
      assertEquals(-1, astRoot0.getEncodedSourceEnd());
      assertEquals(false, astRoot0.isInStrictMode());
      assertEquals(0, astRoot0.getParamCount());
      assertNotNull(astRoot0);
      
      String string0 = "2))l_gxCJ=cGC";
      ObjectProperty objectProperty0 = new ObjectProperty(int0);
      assertEquals("103", objectProperty0.toString());
      assertEquals(1, objectProperty0.getLength());
      assertEquals(false, objectProperty0.isGetter());
      assertEquals(0, objectProperty0.depth());
      assertEquals(false, objectProperty0.isSetter());
      assertEquals(103, objectProperty0.getType());
      assertEquals(-1, objectProperty0.getOperatorPosition());
      assertNull(objectProperty0.getJsDoc());
      assertEquals(false, objectProperty0.hasChildren());
      assertEquals(9, objectProperty0.getPosition());
      assertEquals(9, objectProperty0.getAbsolutePosition());
      assertEquals(-1, objectProperty0.getLineno());
      assertNotNull(objectProperty0);
      
      objectProperty0.setOperator(int0);
      assertEquals(1, objectProperty0.getLength());
      assertEquals(9, objectProperty0.getType());
      assertEquals(false, objectProperty0.isGetter());
      assertEquals(0, objectProperty0.depth());
      assertEquals(false, objectProperty0.isSetter());
      assertEquals(-1, objectProperty0.getOperatorPosition());
      assertNull(objectProperty0.getJsDoc());
      assertEquals(false, objectProperty0.hasChildren());
      assertEquals(9, objectProperty0.getPosition());
      assertEquals(9, objectProperty0.getAbsolutePosition());
      assertEquals("9", objectProperty0.toString());
      assertEquals(-1, objectProperty0.getLineno());
      
      astRoot0.addChildToFront((Node) objectProperty0);
      assertEquals(1, objectProperty0.getLength());
      assertEquals(9, objectProperty0.getType());
      assertEquals(false, objectProperty0.isGetter());
      assertEquals(0, objectProperty0.depth());
      assertEquals(false, objectProperty0.isSetter());
      assertEquals(-1, objectProperty0.getOperatorPosition());
      assertNull(objectProperty0.getJsDoc());
      assertEquals(false, objectProperty0.hasChildren());
      assertEquals(9, objectProperty0.getPosition());
      assertEquals(9, objectProperty0.getAbsolutePosition());
      assertEquals("9", objectProperty0.toString());
      assertEquals(-1, objectProperty0.getLineno());
      assertEquals(0, astRoot0.getFunctionCount());
      assertNull(astRoot0.getJsDoc());
      assertEquals(true, astRoot0.hasChildren());
      assertEquals(-1, astRoot0.getLineno());
      assertEquals(-1, astRoot0.getEndLineno());
      assertEquals(0, astRoot0.getRegexpCount());
      assertEquals(-1, astRoot0.getEncodedSourceStart());
      assertEquals(136, astRoot0.getType());
      assertEquals(0, astRoot0.depth());
      assertEquals("136", astRoot0.toString());
      assertEquals(9, astRoot0.getAbsolutePosition());
      assertNull(astRoot0.getEncodedSource());
      assertEquals(1, astRoot0.getLength());
      assertEquals(9, astRoot0.getPosition());
      assertEquals(-1, astRoot0.getBaseLineno());
      assertNull(astRoot0.getSourceName());
      assertEquals(-1, astRoot0.getEncodedSourceEnd());
      assertEquals(false, astRoot0.isInStrictMode());
      assertEquals(0, astRoot0.getParamCount());
      
      Config config0 = null;
      ToolErrorReporter toolErrorReporter0 = null;
      // Undeclared exception!
      try {
        com.google.javascript.rhino.Node node0 = IRFactory.transformTree(astRoot0, string0, config0, (ErrorReporter) toolErrorReporter0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test06()  throws Throwable  {
      int int0 = 24;
      AstRoot astRoot0 = new AstRoot(int0);
      assertEquals(-1, astRoot0.getBaseLineno());
      assertEquals(0, astRoot0.depth());
      assertEquals(0, astRoot0.getFunctionCount());
      assertEquals(0, astRoot0.getRegexpCount());
      assertNull(astRoot0.getEncodedSource());
      assertNull(astRoot0.getJsDoc());
      assertEquals(false, astRoot0.hasChildren());
      assertEquals(0, astRoot0.getParamCount());
      assertEquals(-1, astRoot0.getEndLineno());
      assertEquals(24, astRoot0.getPosition());
      assertEquals(136, astRoot0.getType());
      assertEquals(false, astRoot0.isInStrictMode());
      assertEquals(-1, astRoot0.getEncodedSourceStart());
      assertNull(astRoot0.getSourceName());
      assertEquals(-1, astRoot0.getEncodedSourceEnd());
      assertEquals(24, astRoot0.getAbsolutePosition());
      assertEquals(-1, astRoot0.getLineno());
      assertEquals(1, astRoot0.getLength());
      assertEquals("136", astRoot0.toString());
      assertNotNull(astRoot0);
      
      SwitchCase switchCase0 = new SwitchCase(int0);
      assertEquals(24, switchCase0.getAbsolutePosition());
      assertEquals(-1, switchCase0.getLineno());
      assertEquals(1, switchCase0.getLength());
      assertEquals(24, switchCase0.getPosition());
      assertEquals(115, switchCase0.getType());
      assertEquals(false, switchCase0.hasChildren());
      assertNull(switchCase0.getJsDoc());
      assertEquals(true, switchCase0.isDefault());
      assertEquals(0, switchCase0.depth());
      assertEquals("115", switchCase0.toString());
      assertNotNull(switchCase0);
      
      astRoot0.addChildrenToBack((Node) switchCase0);
      assertEquals(-1, astRoot0.getBaseLineno());
      assertEquals(0, astRoot0.depth());
      assertEquals(0, astRoot0.getFunctionCount());
      assertEquals(0, astRoot0.getRegexpCount());
      assertNull(astRoot0.getEncodedSource());
      assertNull(astRoot0.getJsDoc());
      assertEquals(0, astRoot0.getParamCount());
      assertEquals(-1, astRoot0.getEndLineno());
      assertEquals(24, astRoot0.getPosition());
      assertEquals(true, astRoot0.hasChildren());
      assertEquals(136, astRoot0.getType());
      assertEquals(false, astRoot0.isInStrictMode());
      assertEquals(-1, astRoot0.getEncodedSourceStart());
      assertNull(astRoot0.getSourceName());
      assertEquals(-1, astRoot0.getEncodedSourceEnd());
      assertEquals(24, astRoot0.getAbsolutePosition());
      assertEquals(-1, astRoot0.getLineno());
      assertEquals(1, astRoot0.getLength());
      assertEquals("136", astRoot0.toString());
      assertEquals(24, switchCase0.getAbsolutePosition());
      assertEquals(-1, switchCase0.getLineno());
      assertEquals(1, switchCase0.getLength());
      assertEquals(24, switchCase0.getPosition());
      assertEquals(115, switchCase0.getType());
      assertEquals(false, switchCase0.hasChildren());
      assertNull(switchCase0.getJsDoc());
      assertEquals(true, switchCase0.isDefault());
      assertEquals(0, switchCase0.depth());
      assertEquals("115", switchCase0.toString());
      
      String string0 = "N#)RB]'i+Qmj#)o";
      Config config0 = null;
      boolean boolean0 = true;
      switchCase0.addStatement((AstNode) astRoot0);
      assertEquals(-1, astRoot0.getBaseLineno());
      assertEquals(0, astRoot0.getFunctionCount());
      assertEquals(0, astRoot0.getRegexpCount());
      assertNull(astRoot0.getEncodedSource());
      assertNull(astRoot0.getJsDoc());
      assertEquals(1, astRoot0.depth());
      assertEquals(0, astRoot0.getParamCount());
      assertEquals(0, astRoot0.getPosition());
      assertEquals(-1, astRoot0.getEndLineno());
      assertEquals(true, astRoot0.hasChildren());
      assertEquals(136, astRoot0.getType());
      assertEquals(false, astRoot0.isInStrictMode());
      assertEquals(-1, astRoot0.getEncodedSourceStart());
      assertNull(astRoot0.getSourceName());
      assertEquals(-1, astRoot0.getEncodedSourceEnd());
      assertEquals(24, astRoot0.getAbsolutePosition());
      assertEquals(-1, astRoot0.getLineno());
      assertEquals(1, astRoot0.getLength());
      assertEquals("136", astRoot0.toString());
      assertEquals(24, switchCase0.getAbsolutePosition());
      assertEquals(-1, switchCase0.getLineno());
      assertEquals(1, switchCase0.getLength());
      assertEquals(24, switchCase0.getPosition());
      assertEquals(115, switchCase0.getType());
      assertEquals(false, switchCase0.hasChildren());
      assertNull(switchCase0.getJsDoc());
      assertEquals(true, switchCase0.isDefault());
      assertEquals(0, switchCase0.depth());
      assertEquals("115", switchCase0.toString());
      
      ToolErrorReporter toolErrorReporter0 = new ToolErrorReporter(boolean0);
      assertEquals(false, toolErrorReporter0.hasReportedError());
      assertEquals(true, toolErrorReporter0.isReportingWarnings());
      assertNotNull(toolErrorReporter0);
      
      // Undeclared exception!
      try {
        com.google.javascript.rhino.Node node0 = IRFactory.transformTree(astRoot0, string0, config0, (ErrorReporter) toolErrorReporter0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test07()  throws Throwable  {
      int int0 = 24;
      AstRoot astRoot0 = new AstRoot(int0);
      assertEquals(1, astRoot0.getLength());
      assertEquals(24, astRoot0.getPosition());
      assertNull(astRoot0.getSourceName());
      assertEquals("136", astRoot0.toString());
      assertEquals(0, astRoot0.getParamCount());
      assertEquals(136, astRoot0.getType());
      assertEquals(-1, astRoot0.getLineno());
      assertEquals(24, astRoot0.getAbsolutePosition());
      assertEquals(-1, astRoot0.getBaseLineno());
      assertEquals(false, astRoot0.isInStrictMode());
      assertEquals(0, astRoot0.getRegexpCount());
      assertEquals(false, astRoot0.hasChildren());
      assertEquals(-1, astRoot0.getEndLineno());
      assertEquals(-1, astRoot0.getEncodedSourceEnd());
      assertNull(astRoot0.getEncodedSource());
      assertEquals(0, astRoot0.depth());
      assertNull(astRoot0.getJsDoc());
      assertEquals(-1, astRoot0.getEncodedSourceStart());
      assertEquals(0, astRoot0.getFunctionCount());
      assertNotNull(astRoot0);
      
      SwitchCase switchCase0 = new SwitchCase(int0);
      assertEquals(0, switchCase0.depth());
      assertEquals("115", switchCase0.toString());
      assertEquals(24, switchCase0.getPosition());
      assertEquals(115, switchCase0.getType());
      assertEquals(-1, switchCase0.getLineno());
      assertEquals(1, switchCase0.getLength());
      assertEquals(24, switchCase0.getAbsolutePosition());
      assertEquals(false, switchCase0.hasChildren());
      assertEquals(true, switchCase0.isDefault());
      assertNull(switchCase0.getJsDoc());
      assertNotNull(switchCase0);
      
      astRoot0.addChildrenToBack((Node) switchCase0);
      assertEquals(0, switchCase0.depth());
      assertEquals("115", switchCase0.toString());
      assertEquals(24, switchCase0.getPosition());
      assertEquals(115, switchCase0.getType());
      assertEquals(-1, switchCase0.getLineno());
      assertEquals(1, switchCase0.getLength());
      assertEquals(24, switchCase0.getAbsolutePosition());
      assertEquals(false, switchCase0.hasChildren());
      assertEquals(true, switchCase0.isDefault());
      assertNull(switchCase0.getJsDoc());
      assertEquals(1, astRoot0.getLength());
      assertEquals(24, astRoot0.getPosition());
      assertNull(astRoot0.getSourceName());
      assertEquals("136", astRoot0.toString());
      assertEquals(0, astRoot0.getParamCount());
      assertEquals(136, astRoot0.getType());
      assertEquals(-1, astRoot0.getLineno());
      assertEquals(24, astRoot0.getAbsolutePosition());
      assertEquals(-1, astRoot0.getBaseLineno());
      assertEquals(false, astRoot0.isInStrictMode());
      assertEquals(true, astRoot0.hasChildren());
      assertEquals(0, astRoot0.getRegexpCount());
      assertEquals(-1, astRoot0.getEndLineno());
      assertEquals(-1, astRoot0.getEncodedSourceEnd());
      assertNull(astRoot0.getEncodedSource());
      assertEquals(0, astRoot0.depth());
      assertNull(astRoot0.getJsDoc());
      assertEquals(-1, astRoot0.getEncodedSourceStart());
      assertEquals(0, astRoot0.getFunctionCount());
      
      String string0 = "N#)RB]'i+Qmj#)o";
      Config config0 = null;
      boolean boolean0 = true;
      ToolErrorReporter toolErrorReporter0 = new ToolErrorReporter(boolean0);
      assertEquals(true, toolErrorReporter0.isReportingWarnings());
      assertEquals(false, toolErrorReporter0.hasReportedError());
      assertNotNull(toolErrorReporter0);
      
      com.google.javascript.rhino.Node node0 = IRFactory.transformTree(astRoot0, string0, config0, (ErrorReporter) toolErrorReporter0);
      assertEquals(true, toolErrorReporter0.isReportingWarnings());
      assertEquals(false, toolErrorReporter0.hasReportedError());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isQuotedString());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(true, node0.hasOneChild());
      assertEquals(132, node0.getType());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(true, node0.hasChildren());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isVarArgs());
      assertEquals(1, node0.getChildCount());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(1, astRoot0.getLength());
      assertEquals(24, astRoot0.getPosition());
      assertNull(astRoot0.getSourceName());
      assertEquals("136", astRoot0.toString());
      assertEquals(0, astRoot0.getParamCount());
      assertEquals(136, astRoot0.getType());
      assertEquals(-1, astRoot0.getLineno());
      assertEquals(24, astRoot0.getAbsolutePosition());
      assertEquals(-1, astRoot0.getBaseLineno());
      assertEquals(false, astRoot0.isInStrictMode());
      assertEquals(true, astRoot0.hasChildren());
      assertEquals(0, astRoot0.getRegexpCount());
      assertEquals(-1, astRoot0.getEndLineno());
      assertEquals(-1, astRoot0.getEncodedSourceEnd());
      assertNull(astRoot0.getEncodedSource());
      assertEquals(0, astRoot0.depth());
      assertNull(astRoot0.getJsDoc());
      assertEquals(-1, astRoot0.getEncodedSourceStart());
      assertEquals(0, astRoot0.getFunctionCount());
      assertNotNull(node0);
  }

  @Test
  public void test08()  throws Throwable  {
      int int0 = (-2448);
      AstRoot astRoot0 = new AstRoot(int0);
      assertEquals(false, astRoot0.isInStrictMode());
      assertEquals(-1, astRoot0.getBaseLineno());
      assertNull(astRoot0.getSourceName());
      assertEquals(-2448, astRoot0.getAbsolutePosition());
      assertEquals(0, astRoot0.getParamCount());
      assertEquals(-1, astRoot0.getEncodedSourceEnd());
      assertNull(astRoot0.getEncodedSource());
      assertEquals(0, astRoot0.depth());
      assertEquals("136", astRoot0.toString());
      assertEquals(-1, astRoot0.getEndLineno());
      assertEquals(-1, astRoot0.getEncodedSourceStart());
      assertEquals(0, astRoot0.getFunctionCount());
      assertEquals(-1, astRoot0.getLineno());
      assertEquals(136, astRoot0.getType());
      assertEquals(0, astRoot0.getRegexpCount());
      assertEquals(-2448, astRoot0.getPosition());
      assertNull(astRoot0.getJsDoc());
      assertEquals(1, astRoot0.getLength());
      assertEquals(false, astRoot0.hasChildren());
      assertNotNull(astRoot0);
      
      Name name0 = null;
      ContinueStatement continueStatement0 = new ContinueStatement(int0, name0);
      assertEquals(-1, continueStatement0.getLineno());
      assertEquals(121, continueStatement0.getType());
      assertEquals("121", continueStatement0.toString());
      assertEquals(-2448, continueStatement0.getPosition());
      assertEquals(0, continueStatement0.depth());
      assertNull(continueStatement0.getJsDoc());
      assertEquals(-2448, continueStatement0.getAbsolutePosition());
      assertEquals(false, continueStatement0.hasChildren());
      assertEquals(-1, continueStatement0.getLength());
      assertNotNull(continueStatement0);
      
      astRoot0.addChildToBack((Node) continueStatement0);
      assertEquals(-1, continueStatement0.getLineno());
      assertEquals(121, continueStatement0.getType());
      assertEquals("121", continueStatement0.toString());
      assertEquals(-2448, continueStatement0.getPosition());
      assertEquals(0, continueStatement0.depth());
      assertNull(continueStatement0.getJsDoc());
      assertEquals(-2448, continueStatement0.getAbsolutePosition());
      assertEquals(false, continueStatement0.hasChildren());
      assertEquals(-1, continueStatement0.getLength());
      assertEquals(false, astRoot0.isInStrictMode());
      assertEquals(-1, astRoot0.getBaseLineno());
      assertNull(astRoot0.getSourceName());
      assertEquals(-2448, astRoot0.getAbsolutePosition());
      assertEquals(0, astRoot0.getParamCount());
      assertEquals(-1, astRoot0.getEncodedSourceEnd());
      assertNull(astRoot0.getEncodedSource());
      assertEquals(0, astRoot0.depth());
      assertEquals("136", astRoot0.toString());
      assertEquals(-1, astRoot0.getEndLineno());
      assertEquals(-1, astRoot0.getEncodedSourceStart());
      assertEquals(0, astRoot0.getFunctionCount());
      assertEquals(true, astRoot0.hasChildren());
      assertEquals(-1, astRoot0.getLineno());
      assertEquals(136, astRoot0.getType());
      assertEquals(0, astRoot0.getRegexpCount());
      assertEquals(-2448, astRoot0.getPosition());
      assertNull(astRoot0.getJsDoc());
      assertEquals(1, astRoot0.getLength());
      
      String string0 = "";
      Config config0 = null;
      boolean boolean0 = false;
      ToolErrorReporter toolErrorReporter0 = new ToolErrorReporter(boolean0);
      assertEquals(false, toolErrorReporter0.hasReportedError());
      assertEquals(false, toolErrorReporter0.isReportingWarnings());
      assertNotNull(toolErrorReporter0);
      
      com.google.javascript.rhino.Node node0 = IRFactory.transformTree(astRoot0, string0, config0, (ErrorReporter) toolErrorReporter0);
      assertEquals(false, toolErrorReporter0.hasReportedError());
      assertEquals(false, toolErrorReporter0.isReportingWarnings());
      assertEquals(false, astRoot0.isInStrictMode());
      assertEquals(-1, astRoot0.getBaseLineno());
      assertNull(astRoot0.getSourceName());
      assertEquals(-2448, astRoot0.getAbsolutePosition());
      assertEquals(0, astRoot0.getParamCount());
      assertEquals(-1, astRoot0.getEncodedSourceEnd());
      assertNull(astRoot0.getEncodedSource());
      assertEquals(0, astRoot0.depth());
      assertEquals("136", astRoot0.toString());
      assertEquals(-1, astRoot0.getEndLineno());
      assertEquals(-1, astRoot0.getEncodedSourceStart());
      assertEquals(0, astRoot0.getFunctionCount());
      assertEquals(true, astRoot0.hasChildren());
      assertEquals(-1, astRoot0.getLineno());
      assertEquals(136, astRoot0.getType());
      assertEquals(0, astRoot0.getRegexpCount());
      assertEquals(-2448, astRoot0.getPosition());
      assertNull(astRoot0.getJsDoc());
      assertEquals(1, astRoot0.getLength());
      assertEquals(1, node0.getChildCount());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(-1, node0.getCharno());
      assertEquals(true, node0.hasChildren());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isQuotedString());
      assertEquals(true, node0.hasOneChild());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(132, node0.getType());
      assertEquals(false, node0.isVarArgs());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertNotNull(node0);
  }

  @Test
  public void test09()  throws Throwable  {
      int int0 = 453;
      AstRoot astRoot0 = new AstRoot(int0);
      assertEquals("136", astRoot0.toString());
      assertNull(astRoot0.getJsDoc());
      assertEquals(0, astRoot0.getFunctionCount());
      assertEquals(-1, astRoot0.getBaseLineno());
      assertNull(astRoot0.getSourceName());
      assertEquals(136, astRoot0.getType());
      assertEquals(0, astRoot0.depth());
      assertNull(astRoot0.getEncodedSource());
      assertEquals(-1, astRoot0.getEncodedSourceStart());
      assertEquals(0, astRoot0.getRegexpCount());
      assertEquals(453, astRoot0.getAbsolutePosition());
      assertEquals(-1, astRoot0.getEndLineno());
      assertEquals(false, astRoot0.isInStrictMode());
      assertEquals(-1, astRoot0.getEncodedSourceEnd());
      assertEquals(false, astRoot0.hasChildren());
      assertEquals(-1, astRoot0.getLineno());
      assertEquals(453, astRoot0.getPosition());
      assertEquals(0, astRoot0.getParamCount());
      assertEquals(1, astRoot0.getLength());
      assertNotNull(astRoot0);
      
      ArrayLiteral arrayLiteral0 = new ArrayLiteral();
      assertEquals(65, arrayLiteral0.getType());
      assertNull(arrayLiteral0.getJsDoc());
      assertEquals(-1, arrayLiteral0.getLineno());
      assertEquals(0, arrayLiteral0.getSize());
      assertEquals(0, arrayLiteral0.depth());
      assertEquals("65", arrayLiteral0.toString());
      assertEquals(-1, arrayLiteral0.getPosition());
      assertEquals(0, arrayLiteral0.getDestructuringLength());
      assertEquals(false, arrayLiteral0.hasChildren());
      assertEquals(1, arrayLiteral0.getLength());
      assertEquals(-1, arrayLiteral0.getAbsolutePosition());
      assertEquals(0, arrayLiteral0.getSkipCount());
      assertEquals(false, arrayLiteral0.isDestructuring());
      assertNotNull(arrayLiteral0);
      
      astRoot0.addChildrenToFront((Node) arrayLiteral0);
      assertEquals("136", astRoot0.toString());
      assertNull(astRoot0.getJsDoc());
      assertEquals(true, astRoot0.hasChildren());
      assertEquals(0, astRoot0.getFunctionCount());
      assertEquals(-1, astRoot0.getBaseLineno());
      assertNull(astRoot0.getSourceName());
      assertEquals(136, astRoot0.getType());
      assertEquals(0, astRoot0.depth());
      assertNull(astRoot0.getEncodedSource());
      assertEquals(-1, astRoot0.getEncodedSourceStart());
      assertEquals(0, astRoot0.getRegexpCount());
      assertEquals(453, astRoot0.getAbsolutePosition());
      assertEquals(-1, astRoot0.getEndLineno());
      assertEquals(false, astRoot0.isInStrictMode());
      assertEquals(-1, astRoot0.getEncodedSourceEnd());
      assertEquals(-1, astRoot0.getLineno());
      assertEquals(453, astRoot0.getPosition());
      assertEquals(0, astRoot0.getParamCount());
      assertEquals(1, astRoot0.getLength());
      assertEquals(65, arrayLiteral0.getType());
      assertNull(arrayLiteral0.getJsDoc());
      assertEquals(-1, arrayLiteral0.getLineno());
      assertEquals(0, arrayLiteral0.getSize());
      assertEquals(0, arrayLiteral0.depth());
      assertEquals("65", arrayLiteral0.toString());
      assertEquals(-1, arrayLiteral0.getPosition());
      assertEquals(0, arrayLiteral0.getDestructuringLength());
      assertEquals(false, arrayLiteral0.hasChildren());
      assertEquals(1, arrayLiteral0.getLength());
      assertEquals(-1, arrayLiteral0.getAbsolutePosition());
      assertEquals(0, arrayLiteral0.getSkipCount());
      assertEquals(false, arrayLiteral0.isDestructuring());
      
      String string0 = " ";
      Config config0 = null;
      boolean boolean0 = false;
      ToolErrorReporter toolErrorReporter0 = new ToolErrorReporter(boolean0);
      assertEquals(false, toolErrorReporter0.hasReportedError());
      assertEquals(false, toolErrorReporter0.isReportingWarnings());
      assertNotNull(toolErrorReporter0);
      
      com.google.javascript.rhino.Node node0 = IRFactory.transformTree(astRoot0, string0, config0, (ErrorReporter) toolErrorReporter0);
      assertEquals(false, toolErrorReporter0.hasReportedError());
      assertEquals(false, toolErrorReporter0.isReportingWarnings());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(true, node0.hasOneChild());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(true, node0.hasChildren());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isQuotedString());
      assertEquals(132, node0.getType());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(1, node0.getChildCount());
      assertEquals(-1, node0.getLineno());
      assertEquals("136", astRoot0.toString());
      assertNull(astRoot0.getJsDoc());
      assertEquals(true, astRoot0.hasChildren());
      assertEquals(0, astRoot0.getFunctionCount());
      assertEquals(-1, astRoot0.getBaseLineno());
      assertNull(astRoot0.getSourceName());
      assertEquals(136, astRoot0.getType());
      assertEquals(0, astRoot0.depth());
      assertNull(astRoot0.getEncodedSource());
      assertEquals(-1, astRoot0.getEncodedSourceStart());
      assertEquals(0, astRoot0.getRegexpCount());
      assertEquals(453, astRoot0.getAbsolutePosition());
      assertEquals(-1, astRoot0.getEndLineno());
      assertEquals(false, astRoot0.isInStrictMode());
      assertEquals(-1, astRoot0.getEncodedSourceEnd());
      assertEquals(-1, astRoot0.getLineno());
      assertEquals(453, astRoot0.getPosition());
      assertEquals(0, astRoot0.getParamCount());
      assertEquals(1, astRoot0.getLength());
      assertNotNull(node0);
  }

  @Test
  public void test10()  throws Throwable  {
      int int0 = 71;
      AstRoot astRoot0 = new AstRoot(int0);
      assertEquals(0, astRoot0.depth());
      assertEquals(136, astRoot0.getType());
      assertEquals(-1, astRoot0.getEncodedSourceStart());
      assertNull(astRoot0.getJsDoc());
      assertNull(astRoot0.getSourceName());
      assertEquals(-1, astRoot0.getEndLineno());
      assertEquals(false, astRoot0.isInStrictMode());
      assertEquals(0, astRoot0.getRegexpCount());
      assertEquals(71, astRoot0.getAbsolutePosition());
      assertEquals(-1, astRoot0.getLineno());
      assertEquals(-1, astRoot0.getEncodedSourceEnd());
      assertEquals(0, astRoot0.getFunctionCount());
      assertEquals(0, astRoot0.getParamCount());
      assertEquals(false, astRoot0.hasChildren());
      assertEquals(1, astRoot0.getLength());
      assertEquals(71, astRoot0.getPosition());
      assertNull(astRoot0.getEncodedSource());
      assertEquals(-1, astRoot0.getBaseLineno());
      assertEquals("136", astRoot0.toString());
      assertNotNull(astRoot0);
      
      Token.CommentType token_CommentType0 = Token.CommentType.LINE;
      String string0 = "NP#p)B]'i+Q{m#)o";
      Comment comment0 = new Comment(int0, int0, token_CommentType0, string0);
      assertEquals(161, comment0.getType());
      assertEquals(-1, comment0.getLineno());
      assertEquals(false, comment0.hasChildren());
      assertEquals(71, comment0.getAbsolutePosition());
      assertNull(comment0.getJsDoc());
      assertEquals(Token.CommentType.LINE, comment0.getCommentType());
      assertEquals(0, comment0.depth());
      assertEquals(71, comment0.getLength());
      assertEquals(71, comment0.getPosition());
      assertEquals(false, comment0.isParsed());
      assertEquals("NP#p)B]'i+Q{m#)o", comment0.getValue());
      assertEquals("161", comment0.toString());
      assertNotNull(comment0);
      
      astRoot0.addComment(comment0);
      assertEquals(0, astRoot0.depth());
      assertEquals(136, astRoot0.getType());
      assertEquals(-1, astRoot0.getEncodedSourceStart());
      assertNull(astRoot0.getJsDoc());
      assertNull(astRoot0.getSourceName());
      assertEquals(-1, astRoot0.getEndLineno());
      assertEquals(false, astRoot0.isInStrictMode());
      assertEquals(0, astRoot0.getRegexpCount());
      assertEquals(71, astRoot0.getAbsolutePosition());
      assertEquals(-1, astRoot0.getLineno());
      assertEquals(-1, astRoot0.getEncodedSourceEnd());
      assertEquals(0, astRoot0.getFunctionCount());
      assertEquals(0, astRoot0.getParamCount());
      assertEquals(false, astRoot0.hasChildren());
      assertEquals(1, astRoot0.getLength());
      assertEquals(71, astRoot0.getPosition());
      assertNull(astRoot0.getEncodedSource());
      assertEquals(-1, astRoot0.getBaseLineno());
      assertEquals("136", astRoot0.toString());
      assertEquals(161, comment0.getType());
      assertEquals(-1, comment0.getLineno());
      assertEquals(false, comment0.hasChildren());
      assertEquals(71, comment0.getAbsolutePosition());
      assertNull(comment0.getJsDoc());
      assertEquals(1, comment0.depth());
      assertEquals(Token.CommentType.LINE, comment0.getCommentType());
      assertEquals(71, comment0.getLength());
      assertEquals(0, comment0.getPosition());
      assertEquals(false, comment0.isParsed());
      assertEquals("NP#p)B]'i+Q{m#)o", comment0.getValue());
      assertEquals("161", comment0.toString());
      
      Config config0 = null;
      boolean boolean0 = false;
      ToolErrorReporter toolErrorReporter0 = new ToolErrorReporter(boolean0);
      assertEquals(false, toolErrorReporter0.hasReportedError());
      assertEquals(false, toolErrorReporter0.isReportingWarnings());
      assertNotNull(toolErrorReporter0);
      
      com.google.javascript.rhino.Node node0 = IRFactory.transformTree(astRoot0, string0, config0, (ErrorReporter) toolErrorReporter0);
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(132, node0.getType());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(-1, node0.getCharno());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isVarArgs());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(0, astRoot0.depth());
      assertEquals(136, astRoot0.getType());
      assertEquals(-1, astRoot0.getEncodedSourceStart());
      assertNull(astRoot0.getJsDoc());
      assertNull(astRoot0.getSourceName());
      assertEquals(-1, astRoot0.getEndLineno());
      assertEquals(false, astRoot0.isInStrictMode());
      assertEquals(0, astRoot0.getRegexpCount());
      assertEquals(71, astRoot0.getAbsolutePosition());
      assertEquals(-1, astRoot0.getLineno());
      assertEquals(-1, astRoot0.getEncodedSourceEnd());
      assertEquals(0, astRoot0.getFunctionCount());
      assertEquals(0, astRoot0.getParamCount());
      assertEquals(false, astRoot0.hasChildren());
      assertEquals(1, astRoot0.getLength());
      assertEquals(71, astRoot0.getPosition());
      assertNull(astRoot0.getEncodedSource());
      assertEquals(-1, astRoot0.getBaseLineno());
      assertEquals("136", astRoot0.toString());
      assertEquals(false, toolErrorReporter0.hasReportedError());
      assertEquals(false, toolErrorReporter0.isReportingWarnings());
      assertNotNull(node0);
  }

  @Test
  public void test11()  throws Throwable  {
      int int0 = 52;
      AstRoot astRoot0 = new AstRoot(int0);
      assertEquals(0, astRoot0.getRegexpCount());
      assertEquals(52, astRoot0.getPosition());
      assertEquals(false, astRoot0.isInStrictMode());
      assertEquals(-1, astRoot0.getBaseLineno());
      assertEquals(0, astRoot0.getParamCount());
      assertNull(astRoot0.getJsDoc());
      assertEquals(false, astRoot0.hasChildren());
      assertEquals(1, astRoot0.getLength());
      assertEquals(-1, astRoot0.getLineno());
      assertNull(astRoot0.getSourceName());
      assertEquals(0, astRoot0.getFunctionCount());
      assertEquals(-1, astRoot0.getEncodedSourceStart());
      assertEquals(0, astRoot0.depth());
      assertEquals("136", astRoot0.toString());
      assertEquals(52, astRoot0.getAbsolutePosition());
      assertEquals(-1, astRoot0.getEndLineno());
      assertEquals(136, astRoot0.getType());
      assertEquals(-1, astRoot0.getEncodedSourceEnd());
      assertNull(astRoot0.getEncodedSource());
      assertNotNull(astRoot0);
      
      Token.CommentType token_CommentType0 = Token.CommentType.JSDOC;
      String string0 = "N-#))B]'i+Qmj#)o";
      Comment comment0 = new Comment(int0, int0, token_CommentType0, string0);
      assertEquals("N-#))B]'i+Qmj#)o", comment0.getValue());
      assertEquals("161", comment0.toString());
      assertEquals(false, comment0.isParsed());
      assertEquals(52, comment0.getAbsolutePosition());
      assertEquals(52, comment0.getPosition());
      assertEquals(0, comment0.depth());
      assertEquals(52, comment0.getLength());
      assertEquals(false, comment0.hasChildren());
      assertEquals(161, comment0.getType());
      assertNull(comment0.getJsDoc());
      assertEquals(-1, comment0.getLineno());
      assertEquals(Token.CommentType.JSDOC, comment0.getCommentType());
      assertNotNull(comment0);
      
      astRoot0.addComment(comment0);
      assertEquals(0, astRoot0.getRegexpCount());
      assertEquals(52, astRoot0.getPosition());
      assertEquals(false, astRoot0.isInStrictMode());
      assertEquals(-1, astRoot0.getBaseLineno());
      assertEquals(0, astRoot0.getParamCount());
      assertNull(astRoot0.getJsDoc());
      assertEquals(false, astRoot0.hasChildren());
      assertEquals(1, astRoot0.getLength());
      assertEquals(-1, astRoot0.getLineno());
      assertNull(astRoot0.getSourceName());
      assertEquals(0, astRoot0.getFunctionCount());
      assertEquals(-1, astRoot0.getEncodedSourceStart());
      assertEquals(0, astRoot0.depth());
      assertEquals("136", astRoot0.toString());
      assertEquals(52, astRoot0.getAbsolutePosition());
      assertEquals(-1, astRoot0.getEndLineno());
      assertEquals(136, astRoot0.getType());
      assertEquals(-1, astRoot0.getEncodedSourceEnd());
      assertNull(astRoot0.getEncodedSource());
      assertEquals("N-#))B]'i+Qmj#)o", comment0.getValue());
      assertEquals(0, comment0.getPosition());
      assertEquals("161", comment0.toString());
      assertEquals(1, comment0.depth());
      assertEquals(false, comment0.isParsed());
      assertEquals(52, comment0.getAbsolutePosition());
      assertEquals(52, comment0.getLength());
      assertEquals(false, comment0.hasChildren());
      assertEquals(161, comment0.getType());
      assertNull(comment0.getJsDoc());
      assertEquals(-1, comment0.getLineno());
      assertEquals(Token.CommentType.JSDOC, comment0.getCommentType());
      
      Config config0 = null;
      boolean boolean0 = true;
      comment0.setParsed(boolean0);
      assertEquals("N-#))B]'i+Qmj#)o", comment0.getValue());
      assertEquals(0, comment0.getPosition());
      assertEquals("161", comment0.toString());
      assertEquals(1, comment0.depth());
      assertEquals(52, comment0.getAbsolutePosition());
      assertEquals(52, comment0.getLength());
      assertEquals(false, comment0.hasChildren());
      assertEquals(true, comment0.isParsed());
      assertEquals(161, comment0.getType());
      assertNull(comment0.getJsDoc());
      assertEquals(-1, comment0.getLineno());
      assertEquals(Token.CommentType.JSDOC, comment0.getCommentType());
      
      ToolErrorReporter toolErrorReporter0 = new ToolErrorReporter(boolean0);
      assertEquals(true, toolErrorReporter0.isReportingWarnings());
      assertEquals(false, toolErrorReporter0.hasReportedError());
      assertNotNull(toolErrorReporter0);
      
      com.google.javascript.rhino.Node node0 = IRFactory.transformTree(astRoot0, string0, config0, (ErrorReporter) toolErrorReporter0);
      assertEquals(0, astRoot0.getRegexpCount());
      assertEquals(52, astRoot0.getPosition());
      assertEquals(false, astRoot0.isInStrictMode());
      assertEquals(-1, astRoot0.getBaseLineno());
      assertEquals(0, astRoot0.getParamCount());
      assertNull(astRoot0.getJsDoc());
      assertEquals(false, astRoot0.hasChildren());
      assertEquals(1, astRoot0.getLength());
      assertEquals(-1, astRoot0.getLineno());
      assertNull(astRoot0.getSourceName());
      assertEquals(0, astRoot0.getFunctionCount());
      assertEquals(-1, astRoot0.getEncodedSourceStart());
      assertEquals(0, astRoot0.depth());
      assertEquals("136", astRoot0.toString());
      assertEquals(52, astRoot0.getAbsolutePosition());
      assertEquals(-1, astRoot0.getEndLineno());
      assertEquals(136, astRoot0.getType());
      assertEquals(-1, astRoot0.getEncodedSourceEnd());
      assertNull(astRoot0.getEncodedSource());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.hasChildren());
      assertEquals(-1, node0.getCharno());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(132, node0.getType());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(0, node0.getChildCount());
      assertEquals(true, toolErrorReporter0.isReportingWarnings());
      assertEquals(false, toolErrorReporter0.hasReportedError());
      assertNotNull(node0);
  }

  @Test
  public void test12()  throws Throwable  {
      int int0 = (-2448);
      AstRoot astRoot0 = new AstRoot(int0);
      assertEquals(-1, astRoot0.getLineno());
      assertEquals("136", astRoot0.toString());
      assertEquals(false, astRoot0.isInStrictMode());
      assertEquals(-1, astRoot0.getEncodedSourceEnd());
      assertEquals(0, astRoot0.getFunctionCount());
      assertNull(astRoot0.getEncodedSource());
      assertEquals(-1, astRoot0.getEndLineno());
      assertEquals(-2448, astRoot0.getAbsolutePosition());
      assertEquals(0, astRoot0.getParamCount());
      assertEquals(0, astRoot0.getRegexpCount());
      assertEquals(-1, astRoot0.getEncodedSourceStart());
      assertNull(astRoot0.getJsDoc());
      assertEquals(false, astRoot0.hasChildren());
      assertNull(astRoot0.getSourceName());
      assertEquals(1, astRoot0.getLength());
      assertEquals(0, astRoot0.depth());
      assertEquals(136, astRoot0.getType());
      assertEquals(-1, astRoot0.getBaseLineno());
      assertEquals(-2448, astRoot0.getPosition());
      assertNotNull(astRoot0);
      
      Token.CommentType token_CommentType0 = Token.CommentType.JSDOC;
      String string0 = "";
      Comment comment0 = new Comment(int0, int0, token_CommentType0, string0);
      assertNull(comment0.getJsDoc());
      assertEquals(-2448, comment0.getLength());
      assertEquals(Token.CommentType.JSDOC, comment0.getCommentType());
      assertEquals(-2448, comment0.getAbsolutePosition());
      assertEquals(false, comment0.hasChildren());
      assertEquals("161", comment0.toString());
      assertEquals(161, comment0.getType());
      assertEquals(false, comment0.isParsed());
      assertEquals(0, comment0.depth());
      assertEquals(-1, comment0.getLineno());
      assertEquals(-2448, comment0.getPosition());
      assertEquals("", comment0.getValue());
      assertNotNull(comment0);
      
      astRoot0.addComment(comment0);
      assertNull(comment0.getJsDoc());
      assertEquals(-2448, comment0.getLength());
      assertEquals(Token.CommentType.JSDOC, comment0.getCommentType());
      assertEquals(-2448, comment0.getAbsolutePosition());
      assertEquals(false, comment0.hasChildren());
      assertEquals("161", comment0.toString());
      assertEquals(161, comment0.getType());
      assertEquals(false, comment0.isParsed());
      assertEquals(-1, comment0.getLineno());
      assertEquals(1, comment0.depth());
      assertEquals(0, comment0.getPosition());
      assertEquals("", comment0.getValue());
      assertEquals(-1, astRoot0.getLineno());
      assertEquals("136", astRoot0.toString());
      assertEquals(false, astRoot0.isInStrictMode());
      assertEquals(-1, astRoot0.getEncodedSourceEnd());
      assertEquals(0, astRoot0.getFunctionCount());
      assertNull(astRoot0.getEncodedSource());
      assertEquals(-1, astRoot0.getEndLineno());
      assertEquals(-2448, astRoot0.getAbsolutePosition());
      assertEquals(0, astRoot0.getParamCount());
      assertEquals(0, astRoot0.getRegexpCount());
      assertEquals(-1, astRoot0.getEncodedSourceStart());
      assertNull(astRoot0.getJsDoc());
      assertEquals(false, astRoot0.hasChildren());
      assertNull(astRoot0.getSourceName());
      assertEquals(1, astRoot0.getLength());
      assertEquals(0, astRoot0.depth());
      assertEquals(136, astRoot0.getType());
      assertEquals(-1, astRoot0.getBaseLineno());
      assertEquals(-2448, astRoot0.getPosition());
      
      Config config0 = null;
      boolean boolean0 = false;
      ToolErrorReporter toolErrorReporter0 = new ToolErrorReporter(boolean0);
      assertEquals(false, toolErrorReporter0.isReportingWarnings());
      assertEquals(false, toolErrorReporter0.hasReportedError());
      assertNotNull(toolErrorReporter0);
      
      // Undeclared exception!
      try {
        com.google.javascript.rhino.Node node0 = IRFactory.transformTree(astRoot0, string0, config0, (ErrorReporter) toolErrorReporter0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -3
         //
      }
  }

  @Test
  public void test13()  throws Throwable  {
      int int0 = 453;
      AstRoot astRoot0 = new AstRoot(int0);
      assertNull(astRoot0.getEncodedSource());
      assertEquals(false, astRoot0.hasChildren());
      assertEquals(1, astRoot0.getLength());
      assertEquals(-1, astRoot0.getEndLineno());
      assertEquals(-1, astRoot0.getLineno());
      assertNull(astRoot0.getSourceName());
      assertEquals(0, astRoot0.getRegexpCount());
      assertNull(astRoot0.getJsDoc());
      assertEquals(-1, astRoot0.getBaseLineno());
      assertEquals(0, astRoot0.depth());
      assertEquals(136, astRoot0.getType());
      assertEquals(453, astRoot0.getPosition());
      assertEquals(-1, astRoot0.getEncodedSourceEnd());
      assertEquals(453, astRoot0.getAbsolutePosition());
      assertEquals("136", astRoot0.toString());
      assertEquals(0, astRoot0.getFunctionCount());
      assertEquals(false, astRoot0.isInStrictMode());
      assertEquals(-1, astRoot0.getEncodedSourceStart());
      assertEquals(0, astRoot0.getParamCount());
      assertNotNull(astRoot0);
      
      ExpressionStatement expressionStatement0 = new ExpressionStatement();
      assertEquals(0, expressionStatement0.depth());
      assertEquals(-1, expressionStatement0.getPosition());
      assertNull(expressionStatement0.getJsDoc());
      assertEquals(1, expressionStatement0.getLength());
      assertEquals(-1, expressionStatement0.getAbsolutePosition());
      assertEquals(-1, expressionStatement0.getLineno());
      assertEquals("133", expressionStatement0.toString());
      assertEquals(false, expressionStatement0.hasChildren());
      assertEquals(133, expressionStatement0.getType());
      assertNotNull(expressionStatement0);
      
      astRoot0.addChildToFront((Node) expressionStatement0);
      assertNull(astRoot0.getEncodedSource());
      assertEquals(1, astRoot0.getLength());
      assertEquals(-1, astRoot0.getEndLineno());
      assertEquals(-1, astRoot0.getLineno());
      assertNull(astRoot0.getSourceName());
      assertEquals(0, astRoot0.getRegexpCount());
      assertNull(astRoot0.getJsDoc());
      assertEquals(-1, astRoot0.getBaseLineno());
      assertEquals(0, astRoot0.depth());
      assertEquals(136, astRoot0.getType());
      assertEquals(453, astRoot0.getPosition());
      assertEquals(true, astRoot0.hasChildren());
      assertEquals(-1, astRoot0.getEncodedSourceEnd());
      assertEquals(453, astRoot0.getAbsolutePosition());
      assertEquals("136", astRoot0.toString());
      assertEquals(0, astRoot0.getFunctionCount());
      assertEquals(false, astRoot0.isInStrictMode());
      assertEquals(-1, astRoot0.getEncodedSourceStart());
      assertEquals(0, astRoot0.getParamCount());
      assertEquals(0, expressionStatement0.depth());
      assertEquals(-1, expressionStatement0.getPosition());
      assertNull(expressionStatement0.getJsDoc());
      assertEquals(1, expressionStatement0.getLength());
      assertEquals(-1, expressionStatement0.getAbsolutePosition());
      assertEquals(-1, expressionStatement0.getLineno());
      assertEquals("133", expressionStatement0.toString());
      assertEquals(false, expressionStatement0.hasChildren());
      assertEquals(133, expressionStatement0.getType());
      
      String string0 = " ";
      Config config0 = null;
      boolean boolean0 = false;
      ToolErrorReporter toolErrorReporter0 = new ToolErrorReporter(boolean0);
      assertEquals(false, toolErrorReporter0.hasReportedError());
      assertEquals(false, toolErrorReporter0.isReportingWarnings());
      assertNotNull(toolErrorReporter0);
      
      // Undeclared exception!
      try {
        com.google.javascript.rhino.Node node0 = IRFactory.transformTree(astRoot0, string0, config0, (ErrorReporter) toolErrorReporter0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test14()  throws Throwable  {
      int int0 = 1986;
      AstRoot astRoot0 = new AstRoot(int0);
      assertEquals(-1, astRoot0.getEncodedSourceStart());
      assertNull(astRoot0.getEncodedSource());
      assertEquals(1, astRoot0.getLength());
      assertEquals(-1, astRoot0.getLineno());
      assertEquals(1986, astRoot0.getPosition());
      assertEquals("136", astRoot0.toString());
      assertNull(astRoot0.getSourceName());
      assertEquals(false, astRoot0.isInStrictMode());
      assertEquals(-1, astRoot0.getEndLineno());
      assertEquals(0, astRoot0.getParamCount());
      assertEquals(-1, astRoot0.getBaseLineno());
      assertEquals(-1, astRoot0.getEncodedSourceEnd());
      assertEquals(0, astRoot0.depth());
      assertEquals(136, astRoot0.getType());
      assertEquals(1986, astRoot0.getAbsolutePosition());
      assertNull(astRoot0.getJsDoc());
      assertEquals(0, astRoot0.getRegexpCount());
      assertEquals(false, astRoot0.hasChildren());
      assertEquals(0, astRoot0.getFunctionCount());
      assertNotNull(astRoot0);
      
      String string0 = "!EP_ROP";
      NumberLiteral numberLiteral0 = new NumberLiteral(int0, string0);
      assertEquals(1986, numberLiteral0.getAbsolutePosition());
      assertEquals(40, numberLiteral0.getType());
      assertEquals(-1, numberLiteral0.getLineno());
      assertEquals(0.0, numberLiteral0.getNumber(), 0.01D);
      assertEquals(0.0, numberLiteral0.getDouble(), 0.01D);
      assertNull(numberLiteral0.getJsDoc());
      assertEquals("!EP_ROP", numberLiteral0.getValue());
      assertEquals(0, numberLiteral0.depth());
      assertEquals(7, numberLiteral0.getLength());
      assertEquals(false, numberLiteral0.hasChildren());
      assertEquals("40", numberLiteral0.toString());
      assertEquals(1986, numberLiteral0.getPosition());
      assertNotNull(numberLiteral0);
      
      astRoot0.addChildToBack((Node) numberLiteral0);
      assertEquals(-1, astRoot0.getEncodedSourceStart());
      assertNull(astRoot0.getEncodedSource());
      assertEquals(1, astRoot0.getLength());
      assertEquals(-1, astRoot0.getLineno());
      assertEquals(1986, astRoot0.getPosition());
      assertEquals("136", astRoot0.toString());
      assertNull(astRoot0.getSourceName());
      assertEquals(false, astRoot0.isInStrictMode());
      assertEquals(-1, astRoot0.getEndLineno());
      assertEquals(0, astRoot0.getParamCount());
      assertEquals(-1, astRoot0.getBaseLineno());
      assertEquals(-1, astRoot0.getEncodedSourceEnd());
      assertEquals(0, astRoot0.depth());
      assertEquals(136, astRoot0.getType());
      assertEquals(1986, astRoot0.getAbsolutePosition());
      assertNull(astRoot0.getJsDoc());
      assertEquals(0, astRoot0.getRegexpCount());
      assertEquals(true, astRoot0.hasChildren());
      assertEquals(0, astRoot0.getFunctionCount());
      assertEquals(1986, numberLiteral0.getAbsolutePosition());
      assertEquals(40, numberLiteral0.getType());
      assertEquals(-1, numberLiteral0.getLineno());
      assertEquals(0.0, numberLiteral0.getNumber(), 0.01D);
      assertEquals(0.0, numberLiteral0.getDouble(), 0.01D);
      assertNull(numberLiteral0.getJsDoc());
      assertEquals("!EP_ROP", numberLiteral0.getValue());
      assertEquals(0, numberLiteral0.depth());
      assertEquals(7, numberLiteral0.getLength());
      assertEquals(false, numberLiteral0.hasChildren());
      assertEquals("40", numberLiteral0.toString());
      assertEquals(1986, numberLiteral0.getPosition());
      
      Config config0 = null;
      Context context0 = new Context();
      assertEquals(false, context0.isSealed());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertEquals(0, context0.getOptimizationLevel());
      assertEquals(false, context0.isGeneratingDebug());
      assertEquals(false, context0.hasCompileFunctionsWithDynamicScope());
      assertEquals(true, context0.isGeneratingSource());
      assertEquals(2147483647, context0.getMaximumInterpreterStackDepth());
      assertEquals(0, context0.getLanguageVersion());
      assertEquals(false, context0.isGeneratingDebugChanged());
      assertNotNull(context0);
      assertFalse(context0.generateObserverCount);
      
      ToolErrorReporter toolErrorReporter0 = new ToolErrorReporter(context0.generateObserverCount);
      assertEquals(false, toolErrorReporter0.hasReportedError());
      assertEquals(false, toolErrorReporter0.isReportingWarnings());
      assertEquals(false, context0.isSealed());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertEquals(0, context0.getOptimizationLevel());
      assertEquals(false, context0.isGeneratingDebug());
      assertEquals(false, context0.hasCompileFunctionsWithDynamicScope());
      assertEquals(true, context0.isGeneratingSource());
      assertEquals(2147483647, context0.getMaximumInterpreterStackDepth());
      assertEquals(0, context0.getLanguageVersion());
      assertEquals(false, context0.isGeneratingDebugChanged());
      assertNotNull(toolErrorReporter0);
      assertFalse(context0.generateObserverCount);
      
      com.google.javascript.rhino.Node node0 = IRFactory.transformTree(astRoot0, string0, config0, (ErrorReporter) toolErrorReporter0);
      assertEquals(-1, astRoot0.getEncodedSourceStart());
      assertNull(astRoot0.getEncodedSource());
      assertEquals(1, astRoot0.getLength());
      assertEquals(-1, astRoot0.getLineno());
      assertEquals(1986, astRoot0.getPosition());
      assertEquals("136", astRoot0.toString());
      assertNull(astRoot0.getSourceName());
      assertEquals(false, astRoot0.isInStrictMode());
      assertEquals(-1, astRoot0.getEndLineno());
      assertEquals(0, astRoot0.getParamCount());
      assertEquals(-1, astRoot0.getBaseLineno());
      assertEquals(-1, astRoot0.getEncodedSourceEnd());
      assertEquals(0, astRoot0.depth());
      assertEquals(136, astRoot0.getType());
      assertEquals(1986, astRoot0.getAbsolutePosition());
      assertNull(astRoot0.getJsDoc());
      assertEquals(0, astRoot0.getRegexpCount());
      assertEquals(true, astRoot0.hasChildren());
      assertEquals(0, astRoot0.getFunctionCount());
      assertEquals(false, toolErrorReporter0.hasReportedError());
      assertEquals(false, toolErrorReporter0.isReportingWarnings());
      assertEquals(1, node0.getChildCount());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isQuotedString());
      assertEquals(true, node0.hasChildren());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(132, node0.getType());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(true, node0.hasOneChild());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isVarArgs());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, context0.isSealed());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertEquals(0, context0.getOptimizationLevel());
      assertEquals(false, context0.isGeneratingDebug());
      assertEquals(false, context0.hasCompileFunctionsWithDynamicScope());
      assertEquals(true, context0.isGeneratingSource());
      assertEquals(2147483647, context0.getMaximumInterpreterStackDepth());
      assertEquals(0, context0.getLanguageVersion());
      assertEquals(false, context0.isGeneratingDebugChanged());
      assertNotNull(node0);
      assertFalse(context0.generateObserverCount);
  }

  @Test
  public void test15()  throws Throwable  {
      int int0 = 51;
      AstRoot astRoot0 = new AstRoot(int0);
      assertEquals(false, astRoot0.hasChildren());
      assertEquals(-1, astRoot0.getBaseLineno());
      assertEquals(-1, astRoot0.getEncodedSourceEnd());
      assertEquals(51, astRoot0.getAbsolutePosition());
      assertEquals(0, astRoot0.getRegexpCount());
      assertEquals(1, astRoot0.getLength());
      assertEquals(-1, astRoot0.getLineno());
      assertNull(astRoot0.getEncodedSource());
      assertEquals(136, astRoot0.getType());
      assertEquals(0, astRoot0.getParamCount());
      assertNull(astRoot0.getJsDoc());
      assertEquals(51, astRoot0.getPosition());
      assertEquals(-1, astRoot0.getEncodedSourceStart());
      assertEquals(0, astRoot0.getFunctionCount());
      assertEquals(false, astRoot0.isInStrictMode());
      assertEquals("136", astRoot0.toString());
      assertEquals(-1, astRoot0.getEndLineno());
      assertNull(astRoot0.getSourceName());
      assertEquals(0, astRoot0.depth());
      assertNotNull(astRoot0);
      
      String string0 = "_$0&B3:%d-)44tdk";
      Config config0 = null;
      boolean boolean0 = true;
      ParenthesizedExpression parenthesizedExpression0 = new ParenthesizedExpression((AstNode) astRoot0);
      assertEquals("87", parenthesizedExpression0.toString());
      assertNull(parenthesizedExpression0.getJsDoc());
      assertEquals(-1, parenthesizedExpression0.getLineno());
      assertEquals(51, parenthesizedExpression0.getPosition());
      assertEquals(1, parenthesizedExpression0.getLength());
      assertEquals(51, parenthesizedExpression0.getAbsolutePosition());
      assertEquals(0, parenthesizedExpression0.depth());
      assertEquals(87, parenthesizedExpression0.getType());
      assertEquals(false, parenthesizedExpression0.hasChildren());
      assertEquals(false, astRoot0.hasChildren());
      assertEquals(-1, astRoot0.getBaseLineno());
      assertEquals(-1, astRoot0.getEncodedSourceEnd());
      assertEquals(51, astRoot0.getAbsolutePosition());
      assertEquals(0, astRoot0.getRegexpCount());
      assertEquals(1, astRoot0.getLength());
      assertEquals(-1, astRoot0.getLineno());
      assertNull(astRoot0.getEncodedSource());
      assertEquals(136, astRoot0.getType());
      assertEquals(0, astRoot0.getPosition());
      assertEquals(0, astRoot0.getParamCount());
      assertNull(astRoot0.getJsDoc());
      assertEquals(-1, astRoot0.getEncodedSourceStart());
      assertEquals(0, astRoot0.getFunctionCount());
      assertEquals(false, astRoot0.isInStrictMode());
      assertEquals("136", astRoot0.toString());
      assertEquals(-1, astRoot0.getEndLineno());
      assertEquals(1, astRoot0.depth());
      assertNull(astRoot0.getSourceName());
      assertNotNull(parenthesizedExpression0);
      
      astRoot0.addChildrenToFront((Node) parenthesizedExpression0);
      assertEquals("87", parenthesizedExpression0.toString());
      assertNull(parenthesizedExpression0.getJsDoc());
      assertEquals(-1, parenthesizedExpression0.getLineno());
      assertEquals(51, parenthesizedExpression0.getPosition());
      assertEquals(1, parenthesizedExpression0.getLength());
      assertEquals(51, parenthesizedExpression0.getAbsolutePosition());
      assertEquals(0, parenthesizedExpression0.depth());
      assertEquals(87, parenthesizedExpression0.getType());
      assertEquals(false, parenthesizedExpression0.hasChildren());
      assertEquals(true, astRoot0.hasChildren());
      assertEquals(-1, astRoot0.getBaseLineno());
      assertEquals(-1, astRoot0.getEncodedSourceEnd());
      assertEquals(51, astRoot0.getAbsolutePosition());
      assertEquals(0, astRoot0.getRegexpCount());
      assertEquals(1, astRoot0.getLength());
      assertEquals(-1, astRoot0.getLineno());
      assertNull(astRoot0.getEncodedSource());
      assertEquals(136, astRoot0.getType());
      assertEquals(0, astRoot0.getPosition());
      assertEquals(0, astRoot0.getParamCount());
      assertNull(astRoot0.getJsDoc());
      assertEquals(-1, astRoot0.getEncodedSourceStart());
      assertEquals(0, astRoot0.getFunctionCount());
      assertEquals(false, astRoot0.isInStrictMode());
      assertEquals("136", astRoot0.toString());
      assertEquals(-1, astRoot0.getEndLineno());
      assertEquals(1, astRoot0.depth());
      assertNull(astRoot0.getSourceName());
      
      ToolErrorReporter toolErrorReporter0 = new ToolErrorReporter(boolean0);
      assertEquals(false, toolErrorReporter0.hasReportedError());
      assertEquals(true, toolErrorReporter0.isReportingWarnings());
      assertNotNull(toolErrorReporter0);
      
      // Undeclared exception!
      try {
        com.google.javascript.rhino.Node node0 = IRFactory.transformTree(astRoot0, string0, config0, (ErrorReporter) toolErrorReporter0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test16()  throws Throwable  {
      int int0 = 31;
      AstRoot astRoot0 = new AstRoot(int0);
      assertEquals(-1, astRoot0.getEndLineno());
      assertEquals(0, astRoot0.getFunctionCount());
      assertEquals("136", astRoot0.toString());
      assertNull(astRoot0.getEncodedSource());
      assertEquals(-1, astRoot0.getEncodedSourceEnd());
      assertEquals(31, astRoot0.getAbsolutePosition());
      assertEquals(false, astRoot0.isInStrictMode());
      assertEquals(0, astRoot0.depth());
      assertEquals(-1, astRoot0.getBaseLineno());
      assertNull(astRoot0.getSourceName());
      assertNull(astRoot0.getJsDoc());
      assertEquals(false, astRoot0.hasChildren());
      assertEquals(0, astRoot0.getParamCount());
      assertEquals(-1, astRoot0.getEncodedSourceStart());
      assertEquals(0, astRoot0.getRegexpCount());
      assertEquals(31, astRoot0.getPosition());
      assertEquals(136, astRoot0.getType());
      assertEquals(1, astRoot0.getLength());
      assertEquals(-1, astRoot0.getLineno());
      assertNotNull(astRoot0);
      
      ObjectProperty objectProperty0 = new ObjectProperty(int0);
      assertEquals(1, objectProperty0.getLength());
      assertEquals(false, objectProperty0.hasChildren());
      assertNull(objectProperty0.getJsDoc());
      assertEquals(-1, objectProperty0.getLineno());
      assertEquals(31, objectProperty0.getPosition());
      assertEquals(false, objectProperty0.isSetter());
      assertEquals(103, objectProperty0.getType());
      assertEquals(-1, objectProperty0.getOperatorPosition());
      assertEquals(0, objectProperty0.depth());
      assertEquals(31, objectProperty0.getAbsolutePosition());
      assertEquals("103", objectProperty0.toString());
      assertEquals(false, objectProperty0.isGetter());
      assertNotNull(objectProperty0);
      
      astRoot0.addChildToFront((Node) objectProperty0);
      assertEquals(1, objectProperty0.getLength());
      assertEquals(false, objectProperty0.hasChildren());
      assertNull(objectProperty0.getJsDoc());
      assertEquals(-1, objectProperty0.getLineno());
      assertEquals(31, objectProperty0.getPosition());
      assertEquals(false, objectProperty0.isSetter());
      assertEquals(103, objectProperty0.getType());
      assertEquals(-1, objectProperty0.getOperatorPosition());
      assertEquals(0, objectProperty0.depth());
      assertEquals(31, objectProperty0.getAbsolutePosition());
      assertEquals("103", objectProperty0.toString());
      assertEquals(false, objectProperty0.isGetter());
      assertEquals(-1, astRoot0.getEndLineno());
      assertEquals(0, astRoot0.getFunctionCount());
      assertEquals("136", astRoot0.toString());
      assertNull(astRoot0.getEncodedSource());
      assertEquals(-1, astRoot0.getEncodedSourceEnd());
      assertEquals(31, astRoot0.getAbsolutePosition());
      assertEquals(false, astRoot0.isInStrictMode());
      assertEquals(0, astRoot0.depth());
      assertEquals(-1, astRoot0.getBaseLineno());
      assertNull(astRoot0.getSourceName());
      assertNull(astRoot0.getJsDoc());
      assertEquals(0, astRoot0.getParamCount());
      assertEquals(true, astRoot0.hasChildren());
      assertEquals(-1, astRoot0.getEncodedSourceStart());
      assertEquals(0, astRoot0.getRegexpCount());
      assertEquals(31, astRoot0.getPosition());
      assertEquals(136, astRoot0.getType());
      assertEquals(1, astRoot0.getLength());
      assertEquals(-1, astRoot0.getLineno());
      
      String string0 = "OE3'^{r(b&d|Y_$c";
      Config config0 = null;
      Context context0 = new Context();
      assertEquals(false, context0.isSealed());
      assertEquals(false, context0.isGeneratingDebug());
      assertEquals(2147483647, context0.getMaximumInterpreterStackDepth());
      assertEquals(false, context0.isGeneratingDebugChanged());
      assertEquals(0, context0.getOptimizationLevel());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertEquals(true, context0.isGeneratingSource());
      assertEquals(0, context0.getLanguageVersion());
      assertEquals(false, context0.hasCompileFunctionsWithDynamicScope());
      assertNotNull(context0);
      assertFalse(context0.generateObserverCount);
      
      ToolErrorReporter toolErrorReporter0 = new ToolErrorReporter(context0.generateObserverCount);
      assertEquals(false, toolErrorReporter0.hasReportedError());
      assertEquals(false, toolErrorReporter0.isReportingWarnings());
      assertEquals(false, context0.isSealed());
      assertEquals(false, context0.isGeneratingDebug());
      assertEquals(2147483647, context0.getMaximumInterpreterStackDepth());
      assertEquals(false, context0.isGeneratingDebugChanged());
      assertEquals(0, context0.getOptimizationLevel());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertEquals(true, context0.isGeneratingSource());
      assertEquals(0, context0.getLanguageVersion());
      assertEquals(false, context0.hasCompileFunctionsWithDynamicScope());
      assertNotNull(toolErrorReporter0);
      assertFalse(context0.generateObserverCount);
      
      // Undeclared exception!
      try {
        com.google.javascript.rhino.Node node0 = IRFactory.transformTree(astRoot0, string0, config0, (ErrorReporter) toolErrorReporter0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test17()  throws Throwable  {
      int int0 = (-2114);
      AstRoot astRoot0 = new AstRoot(int0);
      assertNull(astRoot0.getEncodedSource());
      assertEquals(false, astRoot0.hasChildren());
      assertEquals(136, astRoot0.getType());
      assertEquals(-1, astRoot0.getEncodedSourceStart());
      assertEquals(false, astRoot0.isInStrictMode());
      assertNull(astRoot0.getSourceName());
      assertNull(astRoot0.getJsDoc());
      assertEquals(-1, astRoot0.getEndLineno());
      assertEquals(0, astRoot0.getRegexpCount());
      assertEquals(0, astRoot0.getParamCount());
      assertEquals(0, astRoot0.depth());
      assertEquals("136", astRoot0.toString());
      assertEquals(-2114, astRoot0.getPosition());
      assertEquals(-2114, astRoot0.getAbsolutePosition());
      assertEquals(0, astRoot0.getFunctionCount());
      assertEquals(-1, astRoot0.getBaseLineno());
      assertEquals(1, astRoot0.getLength());
      assertEquals(-1, astRoot0.getLineno());
      assertEquals(-1, astRoot0.getEncodedSourceEnd());
      assertNotNull(astRoot0);
      
      ElementGet elementGet0 = new ElementGet(int0, int0);
      assertEquals(-2114, elementGet0.getAbsolutePosition());
      assertEquals(-1, elementGet0.getRb());
      assertEquals(0, elementGet0.depth());
      assertEquals(36, elementGet0.getType());
      assertEquals(false, elementGet0.hasChildren());
      assertNull(elementGet0.getJsDoc());
      assertEquals(-2114, elementGet0.getPosition());
      assertEquals(-1, elementGet0.getLb());
      assertEquals("36", elementGet0.toString());
      assertEquals(-1, elementGet0.getLineno());
      assertEquals(-2114, elementGet0.getLength());
      assertNotNull(elementGet0);
      
      astRoot0.addChildrenToBack((Node) elementGet0);
      assertEquals(true, astRoot0.hasChildren());
      assertNull(astRoot0.getEncodedSource());
      assertEquals(136, astRoot0.getType());
      assertEquals(-1, astRoot0.getEncodedSourceStart());
      assertEquals(false, astRoot0.isInStrictMode());
      assertNull(astRoot0.getSourceName());
      assertNull(astRoot0.getJsDoc());
      assertEquals(-1, astRoot0.getEndLineno());
      assertEquals(0, astRoot0.getRegexpCount());
      assertEquals(0, astRoot0.getParamCount());
      assertEquals(0, astRoot0.depth());
      assertEquals("136", astRoot0.toString());
      assertEquals(-2114, astRoot0.getPosition());
      assertEquals(-2114, astRoot0.getAbsolutePosition());
      assertEquals(0, astRoot0.getFunctionCount());
      assertEquals(-1, astRoot0.getBaseLineno());
      assertEquals(1, astRoot0.getLength());
      assertEquals(-1, astRoot0.getLineno());
      assertEquals(-1, astRoot0.getEncodedSourceEnd());
      assertEquals(-2114, elementGet0.getAbsolutePosition());
      assertEquals(-1, elementGet0.getRb());
      assertEquals(0, elementGet0.depth());
      assertEquals(36, elementGet0.getType());
      assertEquals(false, elementGet0.hasChildren());
      assertNull(elementGet0.getJsDoc());
      assertEquals(-2114, elementGet0.getPosition());
      assertEquals(-1, elementGet0.getLb());
      assertEquals("36", elementGet0.toString());
      assertEquals(-1, elementGet0.getLineno());
      assertEquals(-2114, elementGet0.getLength());
      
      String string0 = "ODE3<'^(r\\E$c";
      Config config0 = null;
      boolean boolean0 = true;
      ToolErrorReporter toolErrorReporter0 = new ToolErrorReporter(boolean0);
      assertEquals(true, toolErrorReporter0.isReportingWarnings());
      assertEquals(false, toolErrorReporter0.hasReportedError());
      assertNotNull(toolErrorReporter0);
      
      // Undeclared exception!
      try {
        com.google.javascript.rhino.Node node0 = IRFactory.transformTree(astRoot0, string0, config0, (ErrorReporter) toolErrorReporter0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test18()  throws Throwable  {
      int int0 = 71;
      AstRoot astRoot0 = new AstRoot(int0);
      assertEquals(71, astRoot0.getPosition());
      assertEquals(0, astRoot0.getFunctionCount());
      assertEquals(false, astRoot0.hasChildren());
      assertEquals(0, astRoot0.getRegexpCount());
      assertEquals(false, astRoot0.isInStrictMode());
      assertEquals(1, astRoot0.getLength());
      assertEquals(71, astRoot0.getAbsolutePosition());
      assertNull(astRoot0.getEncodedSource());
      assertEquals(0, astRoot0.depth());
      assertEquals(-1, astRoot0.getLineno());
      assertEquals(-1, astRoot0.getEncodedSourceEnd());
      assertEquals(136, astRoot0.getType());
      assertNull(astRoot0.getSourceName());
      assertNull(astRoot0.getJsDoc());
      assertEquals(-1, astRoot0.getEncodedSourceStart());
      assertEquals("136", astRoot0.toString());
      assertEquals(-1, astRoot0.getEndLineno());
      assertEquals(0, astRoot0.getParamCount());
      assertEquals(-1, astRoot0.getBaseLineno());
      assertNotNull(astRoot0);
      
      Token.CommentType token_CommentType0 = Token.CommentType.LINE;
      String string0 = "NP#p)B]'i+Q{m#)o";
      Comment comment0 = new Comment(int0, int0, token_CommentType0, string0);
      assertEquals(-1, comment0.getLineno());
      assertEquals(71, comment0.getPosition());
      assertEquals(Token.CommentType.LINE, comment0.getCommentType());
      assertEquals(71, comment0.getLength());
      assertEquals(71, comment0.getAbsolutePosition());
      assertEquals(161, comment0.getType());
      assertEquals("NP#p)B]'i+Q{m#)o", comment0.getValue());
      assertEquals(0, comment0.depth());
      assertEquals(false, comment0.hasChildren());
      assertEquals(false, comment0.isParsed());
      assertEquals("161", comment0.toString());
      assertNull(comment0.getJsDoc());
      assertNotNull(comment0);
      
      Config config0 = null;
      astRoot0.addChildToFront((Node) comment0);
      assertEquals(-1, comment0.getLineno());
      assertEquals(71, comment0.getPosition());
      assertEquals(Token.CommentType.LINE, comment0.getCommentType());
      assertEquals(71, comment0.getLength());
      assertEquals(71, comment0.getAbsolutePosition());
      assertEquals(161, comment0.getType());
      assertEquals("NP#p)B]'i+Q{m#)o", comment0.getValue());
      assertEquals(0, comment0.depth());
      assertEquals(false, comment0.hasChildren());
      assertEquals(false, comment0.isParsed());
      assertEquals("161", comment0.toString());
      assertNull(comment0.getJsDoc());
      assertEquals(71, astRoot0.getPosition());
      assertEquals(0, astRoot0.getFunctionCount());
      assertEquals(0, astRoot0.getRegexpCount());
      assertEquals(false, astRoot0.isInStrictMode());
      assertEquals(1, astRoot0.getLength());
      assertEquals(71, astRoot0.getAbsolutePosition());
      assertNull(astRoot0.getEncodedSource());
      assertEquals(0, astRoot0.depth());
      assertEquals(-1, astRoot0.getLineno());
      assertEquals(-1, astRoot0.getEncodedSourceEnd());
      assertEquals(136, astRoot0.getType());
      assertNull(astRoot0.getSourceName());
      assertNull(astRoot0.getJsDoc());
      assertEquals(-1, astRoot0.getEncodedSourceStart());
      assertEquals("136", astRoot0.toString());
      assertEquals(-1, astRoot0.getEndLineno());
      assertEquals(true, astRoot0.hasChildren());
      assertEquals(0, astRoot0.getParamCount());
      assertEquals(-1, astRoot0.getBaseLineno());
      
      boolean boolean0 = false;
      ToolErrorReporter toolErrorReporter0 = new ToolErrorReporter(boolean0);
      assertEquals(false, toolErrorReporter0.hasReportedError());
      assertEquals(false, toolErrorReporter0.isReportingWarnings());
      assertNotNull(toolErrorReporter0);
      
      com.google.javascript.rhino.Node node0 = IRFactory.transformTree(astRoot0, string0, config0, (ErrorReporter) toolErrorReporter0);
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(1, node0.getChildCount());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isQuotedString());
      assertEquals(true, node0.hasOneChild());
      assertEquals(132, node0.getType());
      assertEquals(-1, node0.getLineno());
      assertEquals(true, node0.hasChildren());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(71, astRoot0.getPosition());
      assertEquals(0, astRoot0.getFunctionCount());
      assertEquals(0, astRoot0.getRegexpCount());
      assertEquals(false, astRoot0.isInStrictMode());
      assertEquals(1, astRoot0.getLength());
      assertEquals(71, astRoot0.getAbsolutePosition());
      assertNull(astRoot0.getEncodedSource());
      assertEquals(0, astRoot0.depth());
      assertEquals(-1, astRoot0.getLineno());
      assertEquals(-1, astRoot0.getEncodedSourceEnd());
      assertEquals(136, astRoot0.getType());
      assertNull(astRoot0.getSourceName());
      assertNull(astRoot0.getJsDoc());
      assertEquals(-1, astRoot0.getEncodedSourceStart());
      assertEquals("136", astRoot0.toString());
      assertEquals(-1, astRoot0.getEndLineno());
      assertEquals(true, astRoot0.hasChildren());
      assertEquals(0, astRoot0.getParamCount());
      assertEquals(-1, astRoot0.getBaseLineno());
      assertEquals(true, toolErrorReporter0.hasReportedError());
      assertEquals(false, toolErrorReporter0.isReportingWarnings());
      assertNotNull(node0);
  }
}
