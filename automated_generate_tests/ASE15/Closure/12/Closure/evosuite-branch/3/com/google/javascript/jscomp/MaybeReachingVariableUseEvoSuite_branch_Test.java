/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 19:54:05 GMT 2014
 */

package com.google.javascript.jscomp;

import static org.junit.Assert.*; import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.junit.Test;
import com.google.javascript.jscomp.Compiler;
import com.google.javascript.jscomp.ControlFlowGraph;
import com.google.javascript.jscomp.MaybeReachingVariableUse;
import com.google.javascript.jscomp.Scope;
import com.google.javascript.rhino.Node;



import org.junit.runner.RunWith;


public class MaybeReachingVariableUseEvoSuite_branch_Test  {

  @Test
  public void test0()  throws Throwable  {
      MaybeReachingVariableUse.ReachingUses maybeReachingVariableUse_ReachingUses0 = new MaybeReachingVariableUse.ReachingUses();
      assertNotNull(maybeReachingVariableUse_ReachingUses0);
      
      boolean boolean0 = maybeReachingVariableUse_ReachingUses0.equals((Object) maybeReachingVariableUse_ReachingUses0);
      assertTrue(boolean0);
  }

  @Test
  public void test1()  throws Throwable  {
      MaybeReachingVariableUse.ReachingUses maybeReachingVariableUse_ReachingUses0 = new MaybeReachingVariableUse.ReachingUses();
      assertNotNull(maybeReachingVariableUse_ReachingUses0);
      
      boolean boolean0 = true;
      ControlFlowGraph<MaybeReachingVariableUse.ReachingUses> controlFlowGraph0 = new ControlFlowGraph<MaybeReachingVariableUse.ReachingUses>(maybeReachingVariableUse_ReachingUses0, boolean0, boolean0);
      assertEquals(true, controlFlowGraph0.isDirected());
      assertEquals("LinkedGraph", controlFlowGraph0.getName());
      assertNotNull(controlFlowGraph0);
      
      boolean boolean1 = maybeReachingVariableUse_ReachingUses0.equals((Object) controlFlowGraph0);
      assertEquals(true, controlFlowGraph0.isDirected());
      assertEquals("LinkedGraph", controlFlowGraph0.getName());
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean0 == boolean1);
  }

  @Test
  public void test2()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertNotNull(compiler0);
      
      ControlFlowGraph<Node> controlFlowGraph0 = null;
      Scope scope0 = null;
      MaybeReachingVariableUse maybeReachingVariableUse0 = null;
      try {
        maybeReachingVariableUse0 = new MaybeReachingVariableUse(controlFlowGraph0, scope0, compiler0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test3()  throws Throwable  {
      MaybeReachingVariableUse.ReachingUses maybeReachingVariableUse_ReachingUses0 = new MaybeReachingVariableUse.ReachingUses();
      assertNotNull(maybeReachingVariableUse_ReachingUses0);
      
      MaybeReachingVariableUse.ReachingUses maybeReachingVariableUse_ReachingUses1 = new MaybeReachingVariableUse.ReachingUses(maybeReachingVariableUse_ReachingUses0);
      assertNotNull(maybeReachingVariableUse_ReachingUses1);
      assertNotSame(maybeReachingVariableUse_ReachingUses0, maybeReachingVariableUse_ReachingUses1);
      assertNotSame(maybeReachingVariableUse_ReachingUses1, maybeReachingVariableUse_ReachingUses0);
      assertTrue(maybeReachingVariableUse_ReachingUses0.equals((Object)maybeReachingVariableUse_ReachingUses1));
      assertTrue(maybeReachingVariableUse_ReachingUses1.equals((Object)maybeReachingVariableUse_ReachingUses0));
  }
}
