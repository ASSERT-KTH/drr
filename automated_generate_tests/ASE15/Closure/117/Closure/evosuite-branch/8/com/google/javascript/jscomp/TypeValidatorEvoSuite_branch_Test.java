/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 20:45:30 GMT 2014
 */

package com.google.javascript.jscomp;

import static org.junit.Assert.*; import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.junit.Test;
import com.google.javascript.jscomp.AbstractCompiler;
import com.google.javascript.jscomp.CheckLevel;
import com.google.javascript.jscomp.CheckUnreachableCode;
import com.google.javascript.jscomp.Compiler;
import com.google.javascript.jscomp.CompilerInput;
import com.google.javascript.jscomp.CompilerOptions;
import com.google.javascript.jscomp.Denormalize;
import com.google.javascript.jscomp.DiagnosticType;
import com.google.javascript.jscomp.InferJSDocInfo;
import com.google.javascript.jscomp.JSError;
import com.google.javascript.jscomp.NodeTraversal;
import com.google.javascript.jscomp.Scope;
import com.google.javascript.jscomp.TightenTypes;
import com.google.javascript.jscomp.TypeCheck;
import com.google.javascript.jscomp.TypeValidator;
import com.google.javascript.rhino.ErrorReporter;
import com.google.javascript.rhino.InputId;
import com.google.javascript.rhino.Node;
import com.google.javascript.rhino.jstype.BooleanLiteralSet;
import com.google.javascript.rhino.jstype.FunctionType;
import com.google.javascript.rhino.jstype.JSType;
import com.google.javascript.rhino.jstype.JSTypeNative;
import com.google.javascript.rhino.jstype.JSTypeRegistry;
import com.google.javascript.rhino.jstype.ObjectType;
import com.google.javascript.rhino.jstype.StaticScope;
import com.google.javascript.rhino.jstype.TemplatizedType;



import org.evosuite.runtime.mock.java.lang.MockIllegalStateException;
import org.junit.runner.RunWith;


public class TypeValidatorEvoSuite_branch_Test  {

  @Test
  public void test00()  throws Throwable  {
      JSType jSType0 = null;
      JSError jSError0 = null;
      TypeValidator.TypeMismatch typeValidator_TypeMismatch0 = new TypeValidator.TypeMismatch(jSType0, jSType0, jSError0);
      //  // Unstable assertion: assertNotNull(typeValidator_TypeMismatch0);
      
      // Undeclared exception!
      try {
        boolean boolean0 = typeValidator_TypeMismatch0.equals((Object) typeValidator_TypeMismatch0);
       //  fail("Expecting exception: NullPointerException");
       // Unstable assertion
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test01()  throws Throwable  {
      JSType jSType0 = null;
      String string0 = "S>";
      int int0 = (-3830);
      Node node0 = Node.newString(string0, int0, int0);
      //  // Unstable assertion: assertNotNull(node0);
      //  // Unstable assertion: assertEquals(false, node0.isScript());
      //  // Unstable assertion: assertEquals(false, node0.isExprResult());
      //  // Unstable assertion: assertEquals(false, node0.isThis());
      //  // Unstable assertion: assertEquals(false, node0.isLocalResultCall());
      //  // Unstable assertion: assertEquals(false, node0.isCase());
      //  // Unstable assertion: assertEquals(true, node0.mayMutateGlobalStateOrThrow());
      //  // Unstable assertion: assertEquals(false, node0.isAssignAdd());
      //  // Unstable assertion: assertEquals(false, node0.isFor());
      //  // Unstable assertion: assertEquals(false, node0.isSyntheticBlock());
      //  // Unstable assertion: assertEquals(false, node0.isAdd());
      //  // Unstable assertion: assertEquals(false, node0.isVar());
      //  // Unstable assertion: assertEquals(false, node0.wasEmptyNode());
      //  // Unstable assertion: assertEquals(false, node0.isName());
      //  // Unstable assertion: assertEquals(false, node0.isSetterDef());
      //  // Unstable assertion: assertEquals(false, node0.isNoSideEffectsCall());
      //  // Unstable assertion: assertEquals(false, node0.isRegExp());
      //  // Unstable assertion: assertEquals(false, node0.isWhile());
      //  // Unstable assertion: assertEquals(false, node0.isFromExterns());
      //  // Unstable assertion: assertEquals(false, node0.isReturn());
      //  // Unstable assertion: assertEquals(false, node0.isNE());
      //  // Unstable assertion: assertEquals(false, node0.isDo());
      //  // Unstable assertion: assertEquals(false, node0.isDelProp());
      //  // Unstable assertion: assertEquals(-1, node0.getLineno());
      //  // Unstable assertion: assertEquals(0, node0.getSideEffectFlags());
      //  // Unstable assertion: assertEquals(false, node0.isObjectLit());
      //  // Unstable assertion: assertEquals(false, node0.isStringKey());
      //  // Unstable assertion: assertEquals(false, node0.isNew());
      //  // Unstable assertion: assertEquals(false, node0.isCast());
      //  // Unstable assertion: assertEquals(false, node0.isBreak());
      //  // Unstable assertion: assertEquals(0, node0.getChangeTime());
      //  // Unstable assertion: assertEquals(false, node0.isLabelName());
      //  // Unstable assertion: assertEquals(false, node0.isThrow());
      //  // Unstable assertion: assertEquals(false, node0.isTypeOf());
      //  // Unstable assertion: assertEquals(false, node0.isArrayLit());
      //  // Unstable assertion: assertEquals(true, node0.mayMutateArguments());
      //  // Unstable assertion: assertEquals(false, node0.isNumber());
      //  // Unstable assertion: assertEquals(false, node0.isParamList());
      //  // Unstable assertion: assertEquals(0, node0.getChildCount());
      //  // Unstable assertion: assertEquals(true, node0.isString());
      //  // Unstable assertion: assertEquals(false, node0.isDebugger());
      //  // Unstable assertion: assertEquals(false, node0.isContinue());
      //  // Unstable assertion: assertEquals(0, node0.getLength());
      //  // Unstable assertion: assertEquals(false, node0.isFunction());
      //  // Unstable assertion: assertNull(node0.getSourceFileName());
      //  // Unstable assertion: assertEquals(false, node0.isHook());
      //  // Unstable assertion: assertEquals(false, node0.isTrue());
      //  // Unstable assertion: assertEquals(false, node0.isTry());
      //  // Unstable assertion: assertEquals(false, node0.isCatch());
      //  // Unstable assertion: assertEquals(false, node0.isDec());
      //  // Unstable assertion: assertEquals(false, node0.isCall());
      //  // Unstable assertion: assertEquals(false, node0.isFalse());
      //  // Unstable assertion: assertEquals(false, node0.isVoid());
      //  // Unstable assertion: assertEquals(false, node0.isOr());
      //  // Unstable assertion: assertEquals(false, node0.isBlock());
      //  // Unstable assertion: assertEquals(false, node0.isGetterDef());
      //  // Unstable assertion: assertEquals(false, node0.isInc());
      //  // Unstable assertion: assertEquals(false, node0.isGetElem());
      //  // Unstable assertion: assertEquals(false, node0.isOnlyModifiesArgumentsCall());
      //  // Unstable assertion: assertEquals(false, node0.isWith());
      //  // Unstable assertion: assertEquals(false, node0.isNot());
      //  // Unstable assertion: assertEquals(false, node0.isNull());
      //  // Unstable assertion: assertEquals(40, node0.getType());
      //  // Unstable assertion: assertEquals(false, node0.hasMoreThanOneChild());
      //  // Unstable assertion: assertEquals(false, node0.isQuotedString());
      //  // Unstable assertion: assertEquals(false, node0.isLabel());
      //  // Unstable assertion: assertEquals(false, node0.isOptionalArg());
      //  // Unstable assertion: assertEquals(false, node0.isGetProp());
      //  // Unstable assertion: assertEquals(false, node0.isAnd());
      //  // Unstable assertion: assertEquals(false, node0.isIn());
      //  // Unstable assertion: assertEquals(false, node0.isOnlyModifiesThisCall());
      //  // Unstable assertion: assertEquals(false, node0.isDefaultCase());
      //  // Unstable assertion: assertEquals(false, node0.isVarArgs());
      //  // Unstable assertion: assertEquals(false, node0.isAssign());
      //  // Unstable assertion: assertEquals(false, node0.isIf());
      //  // Unstable assertion: assertEquals(false, node0.hasOneChild());
      //  // Unstable assertion: assertEquals(false, node0.isComma());
      //  // Unstable assertion: assertEquals(false, node0.isSwitch());
      //  // Unstable assertion: assertEquals(false, node0.isEmpty());
      //  // Unstable assertion: assertEquals(-1, node0.getCharno());
      //  // Unstable assertion: assertEquals(false, node0.hasChildren());
      //  // Unstable assertion: assertEquals(false, node0.isInstanceOf());
      //  // Unstable assertion: assertEquals(-1, node0.getSourcePosition());
      
      DiagnosticType diagnosticType0 = TypeCheck.FUNCTION_MASKS_VARIABLE;
      //  // Unstable assertion: assertNotNull(diagnosticType0);
      
      String[] stringArray0 = new String[12];
      JSError jSError0 = JSError.make(string0, node0, diagnosticType0, stringArray0);
      //  // Unstable assertion: assertNotNull(jSError0);
      //  // Unstable assertion: assertEquals(false, node0.isScript());
      //  // Unstable assertion: assertEquals(false, node0.isExprResult());
      //  // Unstable assertion: assertEquals(false, node0.isThis());
      //  // Unstable assertion: assertEquals(false, node0.isLocalResultCall());
      //  // Unstable assertion: assertEquals(false, node0.isCase());
      //  // Unstable assertion: assertEquals(true, node0.mayMutateGlobalStateOrThrow());
      //  // Unstable assertion: assertEquals(false, node0.isAssignAdd());
      //  // Unstable assertion: assertEquals(false, node0.isFor());
      //  // Unstable assertion: assertEquals(false, node0.isSyntheticBlock());
      //  // Unstable assertion: assertEquals(false, node0.isAdd());
      //  // Unstable assertion: assertEquals(false, node0.isVar());
      //  // Unstable assertion: assertEquals(false, node0.wasEmptyNode());
      //  // Unstable assertion: assertEquals(false, node0.isName());
      //  // Unstable assertion: assertEquals(false, node0.isSetterDef());
      //  // Unstable assertion: assertEquals(false, node0.isNoSideEffectsCall());
      //  // Unstable assertion: assertEquals(false, node0.isRegExp());
      //  // Unstable assertion: assertEquals(false, node0.isWhile());
      //  // Unstable assertion: assertEquals(false, node0.isFromExterns());
      //  // Unstable assertion: assertEquals(false, node0.isReturn());
      //  // Unstable assertion: assertEquals(false, node0.isNE());
      //  // Unstable assertion: assertEquals(false, node0.isDo());
      //  // Unstable assertion: assertEquals(false, node0.isDelProp());
      //  // Unstable assertion: assertEquals(-1, node0.getLineno());
      //  // Unstable assertion: assertEquals(0, node0.getSideEffectFlags());
      //  // Unstable assertion: assertEquals(false, node0.isObjectLit());
      //  // Unstable assertion: assertEquals(false, node0.isStringKey());
      //  // Unstable assertion: assertEquals(false, node0.isNew());
      //  // Unstable assertion: assertEquals(false, node0.isCast());
      //  // Unstable assertion: assertEquals(false, node0.isBreak());
      //  // Unstable assertion: assertEquals(0, node0.getChangeTime());
      //  // Unstable assertion: assertEquals(false, node0.isLabelName());
      //  // Unstable assertion: assertEquals(false, node0.isThrow());
      //  // Unstable assertion: assertEquals(false, node0.isTypeOf());
      //  // Unstable assertion: assertEquals(false, node0.isArrayLit());
      //  // Unstable assertion: assertEquals(true, node0.mayMutateArguments());
      //  // Unstable assertion: assertEquals(false, node0.isNumber());
      //  // Unstable assertion: assertEquals(false, node0.isParamList());
      //  // Unstable assertion: assertEquals(0, node0.getChildCount());
      //  // Unstable assertion: assertEquals(true, node0.isString());
      //  // Unstable assertion: assertEquals(false, node0.isDebugger());
      //  // Unstable assertion: assertEquals(false, node0.isContinue());
      //  // Unstable assertion: assertEquals(0, node0.getLength());
      //  // Unstable assertion: assertEquals(false, node0.isFunction());
      //  // Unstable assertion: assertNull(node0.getSourceFileName());
      //  // Unstable assertion: assertEquals(false, node0.isHook());
      //  // Unstable assertion: assertEquals(false, node0.isTrue());
      //  // Unstable assertion: assertEquals(false, node0.isTry());
      //  // Unstable assertion: assertEquals(false, node0.isCatch());
      //  // Unstable assertion: assertEquals(false, node0.isDec());
      //  // Unstable assertion: assertEquals(false, node0.isCall());
      //  // Unstable assertion: assertEquals(false, node0.isFalse());
      //  // Unstable assertion: assertEquals(false, node0.isVoid());
      //  // Unstable assertion: assertEquals(false, node0.isOr());
      //  // Unstable assertion: assertEquals(false, node0.isBlock());
      //  // Unstable assertion: assertEquals(false, node0.isGetterDef());
      //  // Unstable assertion: assertEquals(false, node0.isInc());
      //  // Unstable assertion: assertEquals(false, node0.isGetElem());
      //  // Unstable assertion: assertEquals(false, node0.isOnlyModifiesArgumentsCall());
      //  // Unstable assertion: assertEquals(false, node0.isWith());
      //  // Unstable assertion: assertEquals(false, node0.isNot());
      //  // Unstable assertion: assertEquals(false, node0.isNull());
      //  // Unstable assertion: assertEquals(40, node0.getType());
      //  // Unstable assertion: assertEquals(false, node0.hasMoreThanOneChild());
      //  // Unstable assertion: assertEquals(false, node0.isQuotedString());
      //  // Unstable assertion: assertEquals(false, node0.isLabel());
      //  // Unstable assertion: assertEquals(false, node0.isOptionalArg());
      //  // Unstable assertion: assertEquals(false, node0.isGetProp());
      //  // Unstable assertion: assertEquals(false, node0.isAnd());
      //  // Unstable assertion: assertEquals(false, node0.isIn());
      //  // Unstable assertion: assertEquals(false, node0.isOnlyModifiesThisCall());
      //  // Unstable assertion: assertEquals(false, node0.isDefaultCase());
      //  // Unstable assertion: assertEquals(false, node0.isVarArgs());
      //  // Unstable assertion: assertEquals(false, node0.isAssign());
      //  // Unstable assertion: assertEquals(false, node0.isIf());
      //  // Unstable assertion: assertEquals(false, node0.hasOneChild());
      //  // Unstable assertion: assertEquals(false, node0.isComma());
      //  // Unstable assertion: assertEquals(false, node0.isSwitch());
      //  // Unstable assertion: assertEquals(false, node0.isEmpty());
      //  // Unstable assertion: assertEquals(-1, node0.getCharno());
      //  // Unstable assertion: assertEquals(false, node0.hasChildren());
      //  // Unstable assertion: assertEquals(false, node0.isInstanceOf());
      //  // Unstable assertion: assertEquals(-1, node0.getSourcePosition());
      //  // Unstable assertion: assertEquals(CheckLevel.OFF, jSError0.getDefaultLevel());
      //  // Unstable assertion: assertEquals(-1, jSError0.getLineNumber());
      //  // Unstable assertion: assertEquals(-1, jSError0.getCharno());
      //  // Unstable assertion: assertEquals(0, jSError0.getNodeLength());
      
      TypeValidator.TypeMismatch typeValidator_TypeMismatch0 = new TypeValidator.TypeMismatch(jSType0, jSType0, jSError0);
      //  // Unstable assertion: assertNotNull(typeValidator_TypeMismatch0);
      //  // Unstable assertion: assertEquals(false, node0.isScript());
      //  // Unstable assertion: assertEquals(false, node0.isExprResult());
      //  // Unstable assertion: assertEquals(false, node0.isThis());
      //  // Unstable assertion: assertEquals(false, node0.isLocalResultCall());
      //  // Unstable assertion: assertEquals(false, node0.isCase());
      //  // Unstable assertion: assertEquals(true, node0.mayMutateGlobalStateOrThrow());
      //  // Unstable assertion: assertEquals(false, node0.isAssignAdd());
      //  // Unstable assertion: assertEquals(false, node0.isFor());
      //  // Unstable assertion: assertEquals(false, node0.isSyntheticBlock());
      //  // Unstable assertion: assertEquals(false, node0.isAdd());
      //  // Unstable assertion: assertEquals(false, node0.isVar());
      //  // Unstable assertion: assertEquals(false, node0.wasEmptyNode());
      //  // Unstable assertion: assertEquals(false, node0.isName());
      //  // Unstable assertion: assertEquals(false, node0.isSetterDef());
      //  // Unstable assertion: assertEquals(false, node0.isNoSideEffectsCall());
      //  // Unstable assertion: assertEquals(false, node0.isRegExp());
      //  // Unstable assertion: assertEquals(false, node0.isWhile());
      //  // Unstable assertion: assertEquals(false, node0.isFromExterns());
      //  // Unstable assertion: assertEquals(false, node0.isReturn());
      //  // Unstable assertion: assertEquals(false, node0.isNE());
      //  // Unstable assertion: assertEquals(false, node0.isDo());
      //  // Unstable assertion: assertEquals(false, node0.isDelProp());
      //  // Unstable assertion: assertEquals(-1, node0.getLineno());
      //  // Unstable assertion: assertEquals(0, node0.getSideEffectFlags());
      //  // Unstable assertion: assertEquals(false, node0.isObjectLit());
      //  // Unstable assertion: assertEquals(false, node0.isStringKey());
      //  // Unstable assertion: assertEquals(false, node0.isNew());
      //  // Unstable assertion: assertEquals(false, node0.isCast());
      //  // Unstable assertion: assertEquals(false, node0.isBreak());
      //  // Unstable assertion: assertEquals(0, node0.getChangeTime());
      //  // Unstable assertion: assertEquals(false, node0.isLabelName());
      //  // Unstable assertion: assertEquals(false, node0.isThrow());
      //  // Unstable assertion: assertEquals(false, node0.isTypeOf());
      //  // Unstable assertion: assertEquals(false, node0.isArrayLit());
      //  // Unstable assertion: assertEquals(true, node0.mayMutateArguments());
      //  // Unstable assertion: assertEquals(false, node0.isNumber());
      //  // Unstable assertion: assertEquals(false, node0.isParamList());
      //  // Unstable assertion: assertEquals(0, node0.getChildCount());
      //  // Unstable assertion: assertEquals(true, node0.isString());
      //  // Unstable assertion: assertEquals(false, node0.isDebugger());
      //  // Unstable assertion: assertEquals(false, node0.isContinue());
      //  // Unstable assertion: assertEquals(0, node0.getLength());
      //  // Unstable assertion: assertEquals(false, node0.isFunction());
      //  // Unstable assertion: assertNull(node0.getSourceFileName());
      //  // Unstable assertion: assertEquals(false, node0.isHook());
      //  // Unstable assertion: assertEquals(false, node0.isTrue());
      //  // Unstable assertion: assertEquals(false, node0.isTry());
      //  // Unstable assertion: assertEquals(false, node0.isCatch());
      //  // Unstable assertion: assertEquals(false, node0.isDec());
      //  // Unstable assertion: assertEquals(false, node0.isCall());
      //  // Unstable assertion: assertEquals(false, node0.isFalse());
      //  // Unstable assertion: assertEquals(false, node0.isVoid());
      //  // Unstable assertion: assertEquals(false, node0.isOr());
      //  // Unstable assertion: assertEquals(false, node0.isBlock());
      //  // Unstable assertion: assertEquals(false, node0.isGetterDef());
      //  // Unstable assertion: assertEquals(false, node0.isInc());
      //  // Unstable assertion: assertEquals(false, node0.isGetElem());
      //  // Unstable assertion: assertEquals(false, node0.isOnlyModifiesArgumentsCall());
      //  // Unstable assertion: assertEquals(false, node0.isWith());
      //  // Unstable assertion: assertEquals(false, node0.isNot());
      //  // Unstable assertion: assertEquals(false, node0.isNull());
      //  // Unstable assertion: assertEquals(40, node0.getType());
      //  // Unstable assertion: assertEquals(false, node0.hasMoreThanOneChild());
      //  // Unstable assertion: assertEquals(false, node0.isQuotedString());
      //  // Unstable assertion: assertEquals(false, node0.isLabel());
      //  // Unstable assertion: assertEquals(false, node0.isOptionalArg());
      //  // Unstable assertion: assertEquals(false, node0.isGetProp());
      //  // Unstable assertion: assertEquals(false, node0.isAnd());
      //  // Unstable assertion: assertEquals(false, node0.isIn());
      //  // Unstable assertion: assertEquals(false, node0.isOnlyModifiesThisCall());
      //  // Unstable assertion: assertEquals(false, node0.isDefaultCase());
      //  // Unstable assertion: assertEquals(false, node0.isVarArgs());
      //  // Unstable assertion: assertEquals(false, node0.isAssign());
      //  // Unstable assertion: assertEquals(false, node0.isIf());
      //  // Unstable assertion: assertEquals(false, node0.hasOneChild());
      //  // Unstable assertion: assertEquals(false, node0.isComma());
      //  // Unstable assertion: assertEquals(false, node0.isSwitch());
      //  // Unstable assertion: assertEquals(false, node0.isEmpty());
      //  // Unstable assertion: assertEquals(-1, node0.getCharno());
      //  // Unstable assertion: assertEquals(false, node0.hasChildren());
      //  // Unstable assertion: assertEquals(false, node0.isInstanceOf());
      //  // Unstable assertion: assertEquals(-1, node0.getSourcePosition());
      //  // Unstable assertion: assertEquals(CheckLevel.OFF, jSError0.getDefaultLevel());
      //  // Unstable assertion: assertEquals(-1, jSError0.getLineNumber());
      //  // Unstable assertion: assertEquals(-1, jSError0.getCharno());
      //  // Unstable assertion: assertEquals(0, jSError0.getNodeLength());
      
      boolean boolean0 = typeValidator_TypeMismatch0.equals((Object) string0);
      //  // Unstable assertion: assertEquals(false, node0.isScript());
      //  // Unstable assertion: assertEquals(false, node0.isExprResult());
      //  // Unstable assertion: assertEquals(false, node0.isThis());
      //  // Unstable assertion: assertEquals(false, node0.isLocalResultCall());
      //  // Unstable assertion: assertEquals(false, node0.isCase());
      //  // Unstable assertion: assertEquals(true, node0.mayMutateGlobalStateOrThrow());
      //  // Unstable assertion: assertEquals(false, node0.isAssignAdd());
      //  // Unstable assertion: assertEquals(false, node0.isFor());
      //  // Unstable assertion: assertEquals(false, node0.isSyntheticBlock());
      //  // Unstable assertion: assertEquals(false, node0.isAdd());
      //  // Unstable assertion: assertEquals(false, node0.isVar());
      //  // Unstable assertion: assertEquals(false, node0.wasEmptyNode());
      //  // Unstable assertion: assertEquals(false, node0.isName());
      //  // Unstable assertion: assertEquals(false, node0.isSetterDef());
      //  // Unstable assertion: assertEquals(false, node0.isNoSideEffectsCall());
      //  // Unstable assertion: assertEquals(false, node0.isRegExp());
      //  // Unstable assertion: assertEquals(false, node0.isWhile());
      //  // Unstable assertion: assertEquals(false, node0.isFromExterns());
      //  // Unstable assertion: assertEquals(false, node0.isReturn());
      //  // Unstable assertion: assertEquals(false, node0.isNE());
      //  // Unstable assertion: assertEquals(false, node0.isDo());
      //  // Unstable assertion: assertEquals(false, node0.isDelProp());
      //  // Unstable assertion: assertEquals(-1, node0.getLineno());
      //  // Unstable assertion: assertEquals(0, node0.getSideEffectFlags());
      //  // Unstable assertion: assertEquals(false, node0.isObjectLit());
      //  // Unstable assertion: assertEquals(false, node0.isStringKey());
      //  // Unstable assertion: assertEquals(false, node0.isNew());
      //  // Unstable assertion: assertEquals(false, node0.isCast());
      //  // Unstable assertion: assertEquals(false, node0.isBreak());
      //  // Unstable assertion: assertEquals(0, node0.getChangeTime());
      //  // Unstable assertion: assertEquals(false, node0.isLabelName());
      //  // Unstable assertion: assertEquals(false, node0.isThrow());
      //  // Unstable assertion: assertEquals(false, node0.isTypeOf());
      //  // Unstable assertion: assertEquals(false, node0.isArrayLit());
      //  // Unstable assertion: assertEquals(true, node0.mayMutateArguments());
      //  // Unstable assertion: assertEquals(false, node0.isNumber());
      //  // Unstable assertion: assertEquals(false, node0.isParamList());
      //  // Unstable assertion: assertEquals(0, node0.getChildCount());
      //  // Unstable assertion: assertEquals(true, node0.isString());
      //  // Unstable assertion: assertEquals(false, node0.isDebugger());
      //  // Unstable assertion: assertEquals(false, node0.isContinue());
      //  // Unstable assertion: assertEquals(0, node0.getLength());
      //  // Unstable assertion: assertEquals(false, node0.isFunction());
      //  // Unstable assertion: assertNull(node0.getSourceFileName());
      //  // Unstable assertion: assertEquals(false, node0.isHook());
      //  // Unstable assertion: assertEquals(false, node0.isTrue());
      //  // Unstable assertion: assertEquals(false, node0.isTry());
      //  // Unstable assertion: assertEquals(false, node0.isCatch());
      //  // Unstable assertion: assertEquals(false, node0.isDec());
      //  // Unstable assertion: assertEquals(false, node0.isCall());
      //  // Unstable assertion: assertEquals(false, node0.isFalse());
      //  // Unstable assertion: assertEquals(false, node0.isVoid());
      //  // Unstable assertion: assertEquals(false, node0.isOr());
      //  // Unstable assertion: assertEquals(false, node0.isBlock());
      //  // Unstable assertion: assertEquals(false, node0.isGetterDef());
      //  // Unstable assertion: assertEquals(false, node0.isInc());
      //  // Unstable assertion: assertEquals(false, node0.isGetElem());
      //  // Unstable assertion: assertEquals(false, node0.isOnlyModifiesArgumentsCall());
      //  // Unstable assertion: assertEquals(false, node0.isWith());
      //  // Unstable assertion: assertEquals(false, node0.isNot());
      //  // Unstable assertion: assertEquals(false, node0.isNull());
      //  // Unstable assertion: assertEquals(40, node0.getType());
      //  // Unstable assertion: assertEquals(false, node0.hasMoreThanOneChild());
      //  // Unstable assertion: assertEquals(false, node0.isQuotedString());
      //  // Unstable assertion: assertEquals(false, node0.isLabel());
      //  // Unstable assertion: assertEquals(false, node0.isOptionalArg());
      //  // Unstable assertion: assertEquals(false, node0.isGetProp());
      //  // Unstable assertion: assertEquals(false, node0.isAnd());
      //  // Unstable assertion: assertEquals(false, node0.isIn());
      //  // Unstable assertion: assertEquals(false, node0.isOnlyModifiesThisCall());
      //  // Unstable assertion: assertEquals(false, node0.isDefaultCase());
      //  // Unstable assertion: assertEquals(false, node0.isVarArgs());
      //  // Unstable assertion: assertEquals(false, node0.isAssign());
      //  // Unstable assertion: assertEquals(false, node0.isIf());
      //  // Unstable assertion: assertEquals(false, node0.hasOneChild());
      //  // Unstable assertion: assertEquals(false, node0.isComma());
      //  // Unstable assertion: assertEquals(false, node0.isSwitch());
      //  // Unstable assertion: assertEquals(false, node0.isEmpty());
      //  // Unstable assertion: assertEquals(-1, node0.getCharno());
      //  // Unstable assertion: assertEquals(false, node0.hasChildren());
      //  // Unstable assertion: assertEquals(false, node0.isInstanceOf());
      //  // Unstable assertion: assertEquals(-1, node0.getSourcePosition());
      //  // Unstable assertion: assertEquals(CheckLevel.OFF, jSError0.getDefaultLevel());
      //  // Unstable assertion: assertEquals(-1, jSError0.getLineNumber());
      //  // Unstable assertion: assertEquals(-1, jSError0.getCharno());
      //  // Unstable assertion: assertEquals(0, jSError0.getNodeLength());
      //  // Unstable assertion: assertFalse(boolean0);
  }

  @Test
  public void test02() {}
//   @Test
//   public void test02()  throws Throwable  {
//       Compiler compiler0 = new Compiler();
//       assertNotNull(compiler0);
//       assertEquals(0.0, compiler0.getProgress(), 0.01D);
//       
//       String string0 = "&";
//       Node node0 = compiler0.parseTestCode(string0);
//       assertNotNull(node0);
//       assertEquals(false, compiler0.isTypeCheckingEnabled());
//       assertEquals(true, compiler0.hasErrors());
//       assertEquals(0, compiler0.getWarningCount());
//       assertEquals(false, compiler0.acceptConstKeyword());
//       assertEquals(false, compiler0.isIdeMode());
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
//       assertEquals(0.0, compiler0.getProgress(), 0.01D);
//       assertEquals(1, compiler0.getErrorCount());
//       assertEquals(false, node0.isFunction());
//       assertEquals(false, node0.isDo());
//       assertEquals(false, node0.isDec());
//       assertEquals(false, node0.isBreak());
//       assertEquals(false, node0.isNumber());
//       assertEquals(false, node0.isAssignAdd());
//       assertEquals(false, node0.hasMoreThanOneChild());
//       assertEquals(false, node0.isRegExp());
//       assertEquals(false, node0.isHook());
//       assertEquals(false, node0.isLocalResultCall());
//       assertEquals(false, node0.isNE());
//       assertEquals(false, node0.isComma());
//       assertEquals(false, node0.isFalse());
//       assertEquals(0, node0.getChildCount());
//       assertEquals(-1, node0.getSourcePosition());
//       assertEquals(false, node0.isSyntheticBlock());
//       assertEquals(false, node0.isThrow());
//       assertEquals(false, node0.isStringKey());
//       assertEquals(false, node0.hasChildren());
//       assertEquals(false, node0.isAdd());
//       assertEquals(false, node0.isFor());
//       assertEquals(false, node0.isEmpty());
//       assertEquals(false, node0.isThis());
//       assertEquals(false, node0.isNoSideEffectsCall());
//       assertEquals(false, node0.isNew());
//       assertEquals(false, node0.isTry());
//       assertEquals(false, node0.isOptionalArg());
//       assertEquals(false, node0.isExprResult());
//       assertEquals(false, node0.hasOneChild());
//       assertEquals(132, node0.getType());
//       assertEquals(-1, node0.getLineno());
//       assertEquals("[testcode]", node0.getSourceFileName());
//       assertEquals(false, node0.isVar());
//       assertEquals(false, node0.isCall());
//       assertEquals(-1, node0.getCharno());
//       assertEquals(false, node0.isGetProp());
//       assertEquals(false, node0.isAssign());
//       assertEquals(0, node0.getLength());
//       assertEquals(false, node0.isContinue());
//       assertEquals(false, node0.isOnlyModifiesThisCall());
//       assertEquals(false, node0.isLabel());
//       assertEquals(false, node0.isCase());
//       assertEquals(false, node0.isSetterDef());
//       assertEquals(false, node0.isDebugger());
//       assertEquals(false, node0.isVoid());
//       assertEquals(false, node0.isParamList());
//       assertEquals(false, node0.isOr());
//       assertEquals(0, node0.getChangeTime());
//       assertEquals(false, node0.isName());
//       assertEquals(false, node0.isGetElem());
//       assertEquals(false, node0.isDefaultCase());
//       assertEquals(false, node0.isQuotedString());
//       assertEquals(false, node0.isNot());
//       assertEquals(false, node0.isSwitch());
//       assertEquals(false, node0.isWith());
//       assertEquals(false, node0.isInc());
//       assertEquals(false, node0.isOnlyModifiesArgumentsCall());
//       assertEquals(false, node0.isString());
//       assertEquals(false, node0.isCast());
//       assertEquals(false, node0.isIf());
//       assertEquals(false, node0.isReturn());
//       assertEquals(false, node0.isObjectLit());
//       assertEquals(false, node0.isFromExterns());
//       assertEquals(false, node0.isLabelName());
//       assertEquals(false, node0.isGetterDef());
//       assertEquals(false, node0.isIn());
//       assertEquals(false, node0.isNull());
//       assertEquals(false, node0.wasEmptyNode());
//       assertEquals(false, node0.isArrayLit());
//       assertEquals(false, node0.isVarArgs());
//       assertEquals(false, node0.isCatch());
//       assertEquals(false, node0.isWhile());
//       assertEquals(true, node0.mayMutateGlobalStateOrThrow());
//       assertEquals(true, node0.isScript());
//       assertEquals(false, node0.isTypeOf());
//       assertEquals(false, node0.isDelProp());
//       assertEquals(false, node0.isBlock());
//       assertEquals(false, node0.isTrue());
//       assertEquals(false, node0.isAnd());
//       assertEquals(0, node0.getSideEffectFlags());
//       assertEquals(false, node0.isInstanceOf());
//       assertEquals(true, node0.mayMutateArguments());
//       
//       TypeValidator typeValidator0 = new TypeValidator(compiler0);
//       assertNotNull(typeValidator0);
//       assertEquals(false, compiler0.isTypeCheckingEnabled());
//       assertEquals(true, compiler0.hasErrors());
//       assertEquals(0, compiler0.getWarningCount());
//       assertEquals(false, compiler0.acceptConstKeyword());
//       assertEquals(false, compiler0.isIdeMode());
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
//       assertEquals(0.0, compiler0.getProgress(), 0.01D);
//       assertEquals(1, compiler0.getErrorCount());
//       
//       TightenTypes tightenTypes0 = new TightenTypes(compiler0);
//       assertNotNull(tightenTypes0);
//       assertEquals(false, compiler0.isTypeCheckingEnabled());
//       assertEquals(true, compiler0.hasErrors());
//       assertEquals(0, compiler0.getWarningCount());
//       assertEquals(false, compiler0.acceptConstKeyword());
//       assertEquals(false, compiler0.isIdeMode());
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
//       assertEquals(0.0, compiler0.getProgress(), 0.01D);
//       assertEquals(1, compiler0.getErrorCount());
//       
//       JSTypeRegistry jSTypeRegistry0 = tightenTypes0.getTypeRegistry();
//       assertNotNull(jSTypeRegistry0);
//       assertEquals(false, compiler0.isTypeCheckingEnabled());
//       assertEquals(true, compiler0.hasErrors());
//       assertEquals(0, compiler0.getWarningCount());
//       assertEquals(false, compiler0.acceptConstKeyword());
//       assertEquals(false, compiler0.isIdeMode());
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
//       assertEquals(0.0, compiler0.getProgress(), 0.01D);
//       assertEquals(1, compiler0.getErrorCount());
//       assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
//       
//       JSTypeNative jSTypeNative0 = JSTypeNative.FUNCTION_PROTOTYPE;
//       JSType jSType0 = jSTypeRegistry0.getNativeType(jSTypeNative0);
//       assertNotNull(jSType0);
//       assertEquals(false, jSType0.isNominalType());
//       assertEquals(false, jSType0.isInterface());
//       assertEquals(false, jSType0.isResolved());
//       assertEquals(false, jSType0.isNullType());
//       assertEquals(false, jSType0.isRecordType());
//       assertEquals(false, jSType0.isBooleanValueType());
//       assertEquals(false, jSType0.isAllType());
//       assertEquals(false, jSType0.isFunctionType());
//       assertEquals(false, jSType0.isNoResolvedType());
//       assertEquals(false, jSType0.isOrdinaryFunction());
//       assertEquals(false, jSType0.isStringValueType());
//       assertEquals(false, jSType0.isTemplateType());
//       assertEquals(false, jSType0.isTemplatizedType());
//       assertEquals(false, jSType0.isConstructor());
//       assertEquals(false, jSType0.isNoObjectType());
//       assertEquals(false, jSType0.isEnumElementType());
//       assertEquals(false, jSType0.isNoType());
//       assertEquals(false, jSType0.isNominalConstructor());
//       assertEquals(false, jSType0.isVoidType());
//       assertEquals(true, jSType0.isFunctionPrototypeType());
//       assertEquals(false, jSType0.isNumberValueType());
//       assertEquals(false, jSType0.isUnionType());
//       assertEquals(false, jSType0.isEnumType());
//       assertEquals(false, jSType0.isCheckedUnknownType());
//       assertEquals(false, compiler0.isTypeCheckingEnabled());
//       assertEquals(true, compiler0.hasErrors());
//       assertEquals(0, compiler0.getWarningCount());
//       assertEquals(false, compiler0.acceptConstKeyword());
//       assertEquals(false, compiler0.isIdeMode());
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
//       assertEquals(0.0, compiler0.getProgress(), 0.01D);
//       assertEquals(1, compiler0.getErrorCount());
//       assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
//       
//       Denormalize denormalize0 = new Denormalize(compiler0);
//       assertNotNull(denormalize0);
//       assertEquals(false, compiler0.isTypeCheckingEnabled());
//       assertEquals(true, compiler0.hasErrors());
//       assertEquals(0, compiler0.getWarningCount());
//       assertEquals(false, compiler0.acceptConstKeyword());
//       assertEquals(false, compiler0.isIdeMode());
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
//       assertEquals(0.0, compiler0.getProgress(), 0.01D);
//       assertEquals(1, compiler0.getErrorCount());
//       
//       NodeTraversal nodeTraversal0 = new NodeTraversal((AbstractCompiler) compiler0, (NodeTraversal.Callback) denormalize0);
//       assertNotNull(nodeTraversal0);
//       assertEquals(0, nodeTraversal0.getLineNumber());
//       assertEquals("", nodeTraversal0.getSourceName());
//       assertEquals(false, compiler0.isTypeCheckingEnabled());
//       assertEquals(true, compiler0.hasErrors());
//       assertEquals(0, compiler0.getWarningCount());
//       assertEquals(false, compiler0.acceptConstKeyword());
//       assertEquals(false, compiler0.isIdeMode());
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
//       assertEquals(0.0, compiler0.getProgress(), 0.01D);
//       assertEquals(1, compiler0.getErrorCount());
//       
//       typeValidator0.expectBitwiseable(nodeTraversal0, node0, jSType0, string0);
//       assertEquals(0, nodeTraversal0.getLineNumber());
//       assertEquals("", nodeTraversal0.getSourceName());
//       assertEquals(false, jSType0.isNominalType());
//       assertEquals(false, jSType0.isInterface());
//       assertEquals(false, jSType0.isResolved());
//       assertEquals(false, jSType0.isNullType());
//       assertEquals(false, jSType0.isRecordType());
//       assertEquals(false, jSType0.isBooleanValueType());
//       assertEquals(false, jSType0.isAllType());
//       assertEquals(false, jSType0.isFunctionType());
//       assertEquals(false, jSType0.isNoResolvedType());
//       assertEquals(false, jSType0.isOrdinaryFunction());
//       assertEquals(false, jSType0.isStringValueType());
//       assertEquals(false, jSType0.isTemplateType());
//       assertEquals(false, jSType0.isTemplatizedType());
//       assertEquals(false, jSType0.isConstructor());
//       assertEquals(false, jSType0.isNoObjectType());
//       assertEquals(false, jSType0.isEnumElementType());
//       assertEquals(false, jSType0.isNoType());
//       assertEquals(false, jSType0.isNominalConstructor());
//       assertEquals(false, jSType0.isVoidType());
//       assertEquals(true, jSType0.isFunctionPrototypeType());
//       assertEquals(false, jSType0.isNumberValueType());
//       assertEquals(false, jSType0.isUnionType());
//       assertEquals(false, jSType0.isEnumType());
//       assertEquals(false, jSType0.isCheckedUnknownType());
//       assertEquals(false, compiler0.isTypeCheckingEnabled());
//       assertEquals(true, compiler0.hasErrors());
//       assertEquals(1, compiler0.getWarningCount());
//       assertEquals(false, compiler0.acceptConstKeyword());
//       assertEquals(false, compiler0.isIdeMode());
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
//       assertEquals(0.0, compiler0.getProgress(), 0.01D);
//       assertEquals(1, compiler0.getErrorCount());
//       assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
//       assertEquals(false, node0.isFunction());
//       assertEquals(false, node0.isDo());
//       assertEquals(false, node0.isDec());
//       assertEquals(false, node0.isBreak());
//       assertEquals(false, node0.isNumber());
//       assertEquals(false, node0.isAssignAdd());
//       assertEquals(false, node0.hasMoreThanOneChild());
//       assertEquals(false, node0.isRegExp());
//       assertEquals(false, node0.isHook());
//       assertEquals(false, node0.isLocalResultCall());
//       assertEquals(false, node0.isNE());
//       assertEquals(false, node0.isComma());
//       assertEquals(false, node0.isFalse());
//       assertEquals(0, node0.getChildCount());
//       assertEquals(-1, node0.getSourcePosition());
//       assertEquals(false, node0.isSyntheticBlock());
//       assertEquals(false, node0.isThrow());
//       assertEquals(false, node0.isStringKey());
//       assertEquals(false, node0.hasChildren());
//       assertEquals(false, node0.isAdd());
//       assertEquals(false, node0.isFor());
//       assertEquals(false, node0.isEmpty());
//       assertEquals(false, node0.isThis());
//       assertEquals(false, node0.isNoSideEffectsCall());
//       assertEquals(false, node0.isNew());
//       assertEquals(false, node0.isTry());
//       assertEquals(false, node0.isOptionalArg());
//       assertEquals(false, node0.isExprResult());
//       assertEquals(false, node0.hasOneChild());
//       assertEquals(132, node0.getType());
//       assertEquals(-1, node0.getLineno());
//       assertEquals("[testcode]", node0.getSourceFileName());
//       assertEquals(false, node0.isVar());
//       assertEquals(false, node0.isCall());
//       assertEquals(-1, node0.getCharno());
//       assertEquals(false, node0.isGetProp());
//       assertEquals(false, node0.isAssign());
//       assertEquals(0, node0.getLength());
//       assertEquals(false, node0.isContinue());
//       assertEquals(false, node0.isOnlyModifiesThisCall());
//       assertEquals(false, node0.isLabel());
//       assertEquals(false, node0.isCase());
//       assertEquals(false, node0.isSetterDef());
//       assertEquals(false, node0.isDebugger());
//       assertEquals(false, node0.isVoid());
//       assertEquals(false, node0.isParamList());
//       assertEquals(false, node0.isOr());
//       assertEquals(0, node0.getChangeTime());
//       assertEquals(false, node0.isName());
//       assertEquals(false, node0.isGetElem());
//       assertEquals(false, node0.isDefaultCase());
//       assertEquals(false, node0.isQuotedString());
//       assertEquals(false, node0.isNot());
//       assertEquals(false, node0.isSwitch());
//       assertEquals(false, node0.isWith());
//       assertEquals(false, node0.isInc());
//       assertEquals(false, node0.isOnlyModifiesArgumentsCall());
//       assertEquals(false, node0.isString());
//       assertEquals(false, node0.isCast());
//       assertEquals(false, node0.isIf());
//       assertEquals(false, node0.isReturn());
//       assertEquals(false, node0.isObjectLit());
//       assertEquals(false, node0.isFromExterns());
//       assertEquals(false, node0.isLabelName());
//       assertEquals(false, node0.isGetterDef());
//       assertEquals(false, node0.isIn());
//       assertEquals(false, node0.isNull());
//       assertEquals(false, node0.wasEmptyNode());
//       assertEquals(false, node0.isArrayLit());
//       assertEquals(false, node0.isVarArgs());
//       assertEquals(false, node0.isCatch());
//       assertEquals(false, node0.isWhile());
//       assertEquals(true, node0.mayMutateGlobalStateOrThrow());
//       assertEquals(true, node0.isScript());
//       assertEquals(false, node0.isTypeOf());
//       assertEquals(false, node0.isDelProp());
//       assertEquals(false, node0.isBlock());
//       assertEquals(false, node0.isTrue());
//       assertEquals(false, node0.isAnd());
//       assertEquals(0, node0.getSideEffectFlags());
//       assertEquals(false, node0.isInstanceOf());
//       assertEquals(true, node0.mayMutateArguments());
//   }

  @Test
  public void test03() {}
//   @Test
//   public void test03()  throws Throwable  {
//       Compiler compiler0 = new Compiler();
//       assertNotNull(compiler0);
//       assertEquals(0.0, compiler0.getProgress(), 0.01D);
//       
//       String string0 = "&";
//       Node node0 = compiler0.parseTestCode(string0);
//       assertNotNull(node0);
//       assertEquals(true, compiler0.hasErrors());
//       assertEquals(0.0, compiler0.getProgress(), 0.01D);
//       assertEquals(false, compiler0.acceptConstKeyword());
//       assertEquals(1, compiler0.getErrorCount());
//       assertEquals(false, compiler0.isTypeCheckingEnabled());
//       assertEquals(false, compiler0.isIdeMode());
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
//       assertEquals(0, compiler0.getWarningCount());
//       assertEquals(false, node0.isParamList());
//       assertEquals(false, node0.isFor());
//       assertEquals(false, node0.isNew());
//       assertEquals(false, node0.isAssign());
//       assertEquals("[testcode]", node0.getSourceFileName());
//       assertEquals(false, node0.isDefaultCase());
//       assertEquals(false, node0.isComma());
//       assertEquals(false, node0.isTrue());
//       assertEquals(false, node0.isTypeOf());
//       assertEquals(false, node0.isOnlyModifiesArgumentsCall());
//       assertEquals(false, node0.isThis());
//       assertEquals(false, node0.isSyntheticBlock());
//       assertEquals(false, node0.isAdd());
//       assertEquals(false, node0.isRegExp());
//       assertEquals(false, node0.isVarArgs());
//       assertEquals(false, node0.isLabel());
//       assertEquals(false, node0.isQuotedString());
//       assertEquals(0, node0.getSideEffectFlags());
//       assertEquals(-1, node0.getSourcePosition());
//       assertEquals(false, node0.isReturn());
//       assertEquals(false, node0.isDelProp());
//       assertEquals(false, node0.isContinue());
//       assertEquals(false, node0.isInstanceOf());
//       assertEquals(false, node0.isFromExterns());
//       assertEquals(false, node0.isBlock());
//       assertEquals(false, node0.isDo());
//       assertEquals(false, node0.isNoSideEffectsCall());
//       assertEquals(false, node0.isOnlyModifiesThisCall());
//       assertEquals(false, node0.isExprResult());
//       assertEquals(false, node0.isFalse());
//       assertEquals(false, node0.isNull());
//       assertEquals(false, node0.isCatch());
//       assertEquals(false, node0.isAnd());
//       assertEquals(false, node0.isThrow());
//       assertEquals(false, node0.isCase());
//       assertEquals(false, node0.isHook());
//       assertEquals(132, node0.getType());
//       assertEquals(false, node0.isSetterDef());
//       assertEquals(true, node0.mayMutateArguments());
//       assertEquals(0, node0.getLength());
//       assertEquals(false, node0.isTry());
//       assertEquals(false, node0.isArrayLit());
//       assertEquals(-1, node0.getCharno());
//       assertEquals(false, node0.isGetProp());
//       assertEquals(true, node0.mayMutateGlobalStateOrThrow());
//       assertEquals(false, node0.isGetterDef());
//       assertEquals(false, node0.hasMoreThanOneChild());
//       assertEquals(false, node0.isEmpty());
//       assertEquals(false, node0.isCall());
//       assertEquals(false, node0.isOr());
//       assertEquals(false, node0.isNE());
//       assertEquals(false, node0.isNumber());
//       assertEquals(false, node0.isOptionalArg());
//       assertEquals(false, node0.wasEmptyNode());
//       assertEquals(false, node0.isBreak());
//       assertEquals(false, node0.isWith());
//       assertEquals(false, node0.isNot());
//       assertEquals(0, node0.getChangeTime());
//       assertEquals(false, node0.isInc());
//       assertEquals(true, node0.isScript());
//       assertEquals(false, node0.isStringKey());
//       assertEquals(false, node0.isLabelName());
//       assertEquals(false, node0.isIn());
//       assertEquals(false, node0.isIf());
//       assertEquals(false, node0.isAssignAdd());
//       assertEquals(false, node0.isGetElem());
//       assertEquals(false, node0.hasOneChild());
//       assertEquals(-1, node0.getLineno());
//       assertEquals(false, node0.isName());
//       assertEquals(false, node0.isFunction());
//       assertEquals(0, node0.getChildCount());
//       assertEquals(false, node0.hasChildren());
//       assertEquals(false, node0.isDec());
//       assertEquals(false, node0.isDebugger());
//       assertEquals(false, node0.isVar());
//       assertEquals(false, node0.isObjectLit());
//       assertEquals(false, node0.isString());
//       assertEquals(false, node0.isLocalResultCall());
//       assertEquals(false, node0.isCast());
//       assertEquals(false, node0.isVoid());
//       assertEquals(false, node0.isWhile());
//       assertEquals(false, node0.isSwitch());
//       
//       TypeValidator typeValidator0 = new TypeValidator(compiler0);
//       assertNotNull(typeValidator0);
//       assertEquals(true, compiler0.hasErrors());
//       assertEquals(0.0, compiler0.getProgress(), 0.01D);
//       assertEquals(false, compiler0.acceptConstKeyword());
//       assertEquals(1, compiler0.getErrorCount());
//       assertEquals(false, compiler0.isTypeCheckingEnabled());
//       assertEquals(false, compiler0.isIdeMode());
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
//       assertEquals(0, compiler0.getWarningCount());
//       
//       CheckLevel checkLevel0 = CheckLevel.ERROR;
//       CheckUnreachableCode checkUnreachableCode0 = new CheckUnreachableCode(compiler0, checkLevel0);
//       assertNotNull(checkUnreachableCode0);
//       assertEquals(true, compiler0.hasErrors());
//       assertEquals(0.0, compiler0.getProgress(), 0.01D);
//       assertEquals(false, compiler0.acceptConstKeyword());
//       assertEquals(1, compiler0.getErrorCount());
//       assertEquals(false, compiler0.isTypeCheckingEnabled());
//       assertEquals(false, compiler0.isIdeMode());
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
//       assertEquals(0, compiler0.getWarningCount());
//       
//       NodeTraversal nodeTraversal0 = new NodeTraversal((AbstractCompiler) compiler0, (NodeTraversal.Callback) checkUnreachableCode0);
//       assertNotNull(nodeTraversal0);
//       assertEquals(true, compiler0.hasErrors());
//       assertEquals(0.0, compiler0.getProgress(), 0.01D);
//       assertEquals(false, compiler0.acceptConstKeyword());
//       assertEquals(1, compiler0.getErrorCount());
//       assertEquals(false, compiler0.isTypeCheckingEnabled());
//       assertEquals(false, compiler0.isIdeMode());
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
//       assertEquals(0, compiler0.getWarningCount());
//       assertEquals("", nodeTraversal0.getSourceName());
//       assertEquals(0, nodeTraversal0.getLineNumber());
//       
//       ErrorReporter errorReporter0 = null;
//       JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(errorReporter0);
//       assertNotNull(jSTypeRegistry0);
//       assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
//       
//       JSTypeNative jSTypeNative0 = JSTypeNative.FUNCTION_FUNCTION_TYPE;
//       FunctionType functionType0 = (FunctionType)jSTypeRegistry0.getNativeType(jSTypeNative0);
//       assertNotNull(functionType0);
//       assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
//       assertEquals(true, functionType0.canBeCalled());
//       assertEquals(false, functionType0.isBooleanValueType());
//       assertEquals(false, functionType0.isInterface());
//       assertEquals(false, functionType0.isVoidType());
//       assertEquals(true, functionType0.hasInstanceType());
//       assertEquals(true, functionType0.isFunctionType());
//       assertEquals(false, functionType0.isNullType());
//       assertEquals(false, functionType0.isTemplatizedType());
//       assertEquals(2147483647, functionType0.getMaxArguments());
//       assertEquals(false, functionType0.isEnumElementType());
//       assertEquals(false, functionType0.isRecordType());
//       assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
//       assertEquals(false, functionType0.isReturnTypeInferred());
//       assertEquals(false, functionType0.isAllType());
//       assertEquals(false, functionType0.isEnumType());
//       assertEquals(false, functionType0.isUnionType());
//       assertEquals(false, functionType0.isResolved());
//       assertEquals(false, functionType0.isStringValueType());
//       assertEquals(true, functionType0.isNominalConstructor());
//       assertEquals(0, functionType0.getExtendedInterfacesCount());
//       assertEquals(false, functionType0.isNumberValueType());
//       assertEquals(false, functionType0.isNoResolvedType());
//       assertEquals(true, functionType0.hasCachedValues());
//       assertEquals(false, functionType0.isTemplateType());
//       assertEquals(false, functionType0.isOrdinaryFunction());
//       assertEquals(false, functionType0.isNoType());
//       assertEquals(false, functionType0.isFunctionPrototypeType());
//       assertEquals(true, functionType0.isConstructor());
//       assertEquals(false, functionType0.isNominalType());
//       assertEquals(false, functionType0.isNoObjectType());
//       assertEquals(false, functionType0.isCheckedUnknownType());
//       
//       FunctionType functionType1 = JSType.toMaybeFunctionType((JSType) functionType0);
//       assertNotNull(functionType1);
//       assertSame(functionType1, functionType0);
//       assertSame(functionType0, functionType1);
//       assertEquals(true, functionType1.hasInstanceType());
//       assertEquals(false, functionType1.isRecordType());
//       assertEquals(true, functionType1.canBeCalled());
//       assertEquals(false, functionType1.isTemplateType());
//       assertEquals(false, functionType1.isNoResolvedType());
//       assertEquals(BooleanLiteralSet.TRUE, functionType1.getPossibleToBooleanOutcomes());
//       assertEquals(false, functionType1.isFunctionPrototypeType());
//       assertEquals(false, functionType1.isReturnTypeInferred());
//       assertEquals(false, functionType1.isUnionType());
//       assertEquals(false, functionType1.isEnumType());
//       assertEquals(false, functionType1.isVoidType());
//       assertEquals(false, functionType1.isOrdinaryFunction());
//       assertEquals(false, functionType1.isNullType());
//       assertEquals(2147483647, functionType1.getMaxArguments());
//       assertEquals(false, functionType1.isNumberValueType());
//       assertEquals(false, functionType1.isAllType());
//       assertEquals(true, functionType1.hasCachedValues());
//       assertEquals(false, functionType1.isResolved());
//       assertEquals(false, functionType1.isInterface());
//       assertEquals(false, functionType1.isCheckedUnknownType());
//       assertEquals(false, functionType1.isTemplatizedType());
//       assertEquals(false, functionType1.isNoObjectType());
//       assertEquals(false, functionType1.isNoType());
//       assertEquals(true, functionType1.isNominalConstructor());
//       assertEquals(0, functionType1.getExtendedInterfacesCount());
//       assertEquals(false, functionType1.isNominalType());
//       assertEquals(false, functionType1.isEnumElementType());
//       assertEquals(true, functionType1.isFunctionType());
//       assertEquals(false, functionType1.isBooleanValueType());
//       assertEquals(true, functionType1.isConstructor());
//       assertEquals(false, functionType1.isStringValueType());
//       assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
//       assertEquals(true, functionType0.canBeCalled());
//       assertEquals(false, functionType0.isBooleanValueType());
//       assertEquals(false, functionType0.isInterface());
//       assertEquals(false, functionType0.isVoidType());
//       assertEquals(true, functionType0.hasInstanceType());
//       assertEquals(true, functionType0.isFunctionType());
//       assertEquals(false, functionType0.isNullType());
//       assertEquals(false, functionType0.isTemplatizedType());
//       assertEquals(2147483647, functionType0.getMaxArguments());
//       assertEquals(false, functionType0.isEnumElementType());
//       assertEquals(false, functionType0.isRecordType());
//       assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
//       assertEquals(false, functionType0.isReturnTypeInferred());
//       assertEquals(false, functionType0.isAllType());
//       assertEquals(false, functionType0.isEnumType());
//       assertEquals(false, functionType0.isUnionType());
//       assertEquals(false, functionType0.isResolved());
//       assertEquals(false, functionType0.isStringValueType());
//       assertEquals(true, functionType0.isNominalConstructor());
//       assertEquals(0, functionType0.getExtendedInterfacesCount());
//       assertEquals(false, functionType0.isNumberValueType());
//       assertEquals(false, functionType0.isNoResolvedType());
//       assertEquals(true, functionType0.hasCachedValues());
//       assertEquals(false, functionType0.isTemplateType());
//       assertEquals(false, functionType0.isOrdinaryFunction());
//       assertEquals(false, functionType0.isNoType());
//       assertEquals(false, functionType0.isFunctionPrototypeType());
//       assertEquals(true, functionType0.isConstructor());
//       assertEquals(false, functionType0.isNominalType());
//       assertEquals(false, functionType0.isNoObjectType());
//       assertEquals(false, functionType0.isCheckedUnknownType());
//       
//       typeValidator0.expectAllInterfaceProperties(nodeTraversal0, node0, functionType1);
//       assertSame(functionType1, functionType0);
//       assertSame(functionType0, functionType1);
//       assertEquals(true, compiler0.hasErrors());
//       assertEquals(0.0, compiler0.getProgress(), 0.01D);
//       assertEquals(false, compiler0.acceptConstKeyword());
//       assertEquals(1, compiler0.getErrorCount());
//       assertEquals(false, compiler0.isTypeCheckingEnabled());
//       assertEquals(false, compiler0.isIdeMode());
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
//       assertEquals(0, compiler0.getWarningCount());
//       assertEquals(true, functionType1.hasInstanceType());
//       assertEquals(false, functionType1.isRecordType());
//       assertEquals(true, functionType1.canBeCalled());
//       assertEquals(false, functionType1.isTemplateType());
//       assertEquals(false, functionType1.isNoResolvedType());
//       assertEquals(BooleanLiteralSet.TRUE, functionType1.getPossibleToBooleanOutcomes());
//       assertEquals(false, functionType1.isFunctionPrototypeType());
//       assertEquals(false, functionType1.isReturnTypeInferred());
//       assertEquals(false, functionType1.isUnionType());
//       assertEquals(false, functionType1.isEnumType());
//       assertEquals(false, functionType1.isVoidType());
//       assertEquals(false, functionType1.isOrdinaryFunction());
//       assertEquals(false, functionType1.isNullType());
//       assertEquals(2147483647, functionType1.getMaxArguments());
//       assertEquals(false, functionType1.isNumberValueType());
//       assertEquals(false, functionType1.isAllType());
//       assertEquals(true, functionType1.hasCachedValues());
//       assertEquals(false, functionType1.isResolved());
//       assertEquals(false, functionType1.isInterface());
//       assertEquals(false, functionType1.isCheckedUnknownType());
//       assertEquals(false, functionType1.isTemplatizedType());
//       assertEquals(false, functionType1.isNoObjectType());
//       assertEquals(false, functionType1.isNoType());
//       assertEquals(true, functionType1.isNominalConstructor());
//       assertEquals(0, functionType1.getExtendedInterfacesCount());
//       assertEquals(false, functionType1.isNominalType());
//       assertEquals(false, functionType1.isEnumElementType());
//       assertEquals(true, functionType1.isFunctionType());
//       assertEquals(false, functionType1.isBooleanValueType());
//       assertEquals(true, functionType1.isConstructor());
//       assertEquals(false, functionType1.isStringValueType());
//       assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
//       assertEquals(false, node0.isParamList());
//       assertEquals(false, node0.isFor());
//       assertEquals(false, node0.isNew());
//       assertEquals(false, node0.isAssign());
//       assertEquals("[testcode]", node0.getSourceFileName());
//       assertEquals(false, node0.isDefaultCase());
//       assertEquals(false, node0.isComma());
//       assertEquals(false, node0.isTrue());
//       assertEquals(false, node0.isTypeOf());
//       assertEquals(false, node0.isOnlyModifiesArgumentsCall());
//       assertEquals(false, node0.isThis());
//       assertEquals(false, node0.isSyntheticBlock());
//       assertEquals(false, node0.isAdd());
//       assertEquals(false, node0.isRegExp());
//       assertEquals(false, node0.isVarArgs());
//       assertEquals(false, node0.isLabel());
//       assertEquals(false, node0.isQuotedString());
//       assertEquals(0, node0.getSideEffectFlags());
//       assertEquals(-1, node0.getSourcePosition());
//       assertEquals(false, node0.isReturn());
//       assertEquals(false, node0.isDelProp());
//       assertEquals(false, node0.isContinue());
//       assertEquals(false, node0.isInstanceOf());
//       assertEquals(false, node0.isFromExterns());
//       assertEquals(false, node0.isBlock());
//       assertEquals(false, node0.isDo());
//       assertEquals(false, node0.isNoSideEffectsCall());
//       assertEquals(false, node0.isOnlyModifiesThisCall());
//       assertEquals(false, node0.isExprResult());
//       assertEquals(false, node0.isFalse());
//       assertEquals(false, node0.isNull());
//       assertEquals(false, node0.isCatch());
//       assertEquals(false, node0.isAnd());
//       assertEquals(false, node0.isThrow());
//       assertEquals(false, node0.isCase());
//       assertEquals(false, node0.isHook());
//       assertEquals(132, node0.getType());
//       assertEquals(false, node0.isSetterDef());
//       assertEquals(true, node0.mayMutateArguments());
//       assertEquals(0, node0.getLength());
//       assertEquals(false, node0.isTry());
//       assertEquals(false, node0.isArrayLit());
//       assertEquals(-1, node0.getCharno());
//       assertEquals(false, node0.isGetProp());
//       assertEquals(true, node0.mayMutateGlobalStateOrThrow());
//       assertEquals(false, node0.isGetterDef());
//       assertEquals(false, node0.hasMoreThanOneChild());
//       assertEquals(false, node0.isEmpty());
//       assertEquals(false, node0.isCall());
//       assertEquals(false, node0.isOr());
//       assertEquals(false, node0.isNE());
//       assertEquals(false, node0.isNumber());
//       assertEquals(false, node0.isOptionalArg());
//       assertEquals(false, node0.wasEmptyNode());
//       assertEquals(false, node0.isBreak());
//       assertEquals(false, node0.isWith());
//       assertEquals(false, node0.isNot());
//       assertEquals(0, node0.getChangeTime());
//       assertEquals(false, node0.isInc());
//       assertEquals(true, node0.isScript());
//       assertEquals(false, node0.isStringKey());
//       assertEquals(false, node0.isLabelName());
//       assertEquals(false, node0.isIn());
//       assertEquals(false, node0.isIf());
//       assertEquals(false, node0.isAssignAdd());
//       assertEquals(false, node0.isGetElem());
//       assertEquals(false, node0.hasOneChild());
//       assertEquals(-1, node0.getLineno());
//       assertEquals(false, node0.isName());
//       assertEquals(false, node0.isFunction());
//       assertEquals(0, node0.getChildCount());
//       assertEquals(false, node0.hasChildren());
//       assertEquals(false, node0.isDec());
//       assertEquals(false, node0.isDebugger());
//       assertEquals(false, node0.isVar());
//       assertEquals(false, node0.isObjectLit());
//       assertEquals(false, node0.isString());
//       assertEquals(false, node0.isLocalResultCall());
//       assertEquals(false, node0.isCast());
//       assertEquals(false, node0.isVoid());
//       assertEquals(false, node0.isWhile());
//       assertEquals(false, node0.isSwitch());
//       assertEquals(true, functionType0.canBeCalled());
//       assertEquals(false, functionType0.isBooleanValueType());
//       assertEquals(false, functionType0.isInterface());
//       assertEquals(false, functionType0.isVoidType());
//       assertEquals(true, functionType0.hasInstanceType());
//       assertEquals(true, functionType0.isFunctionType());
//       assertEquals(false, functionType0.isNullType());
//       assertEquals(false, functionType0.isTemplatizedType());
//       assertEquals(2147483647, functionType0.getMaxArguments());
//       assertEquals(false, functionType0.isEnumElementType());
//       assertEquals(false, functionType0.isRecordType());
//       assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
//       assertEquals(false, functionType0.isReturnTypeInferred());
//       assertEquals(false, functionType0.isAllType());
//       assertEquals(false, functionType0.isEnumType());
//       assertEquals(false, functionType0.isUnionType());
//       assertEquals(false, functionType0.isResolved());
//       assertEquals(false, functionType0.isStringValueType());
//       assertEquals(true, functionType0.isNominalConstructor());
//       assertEquals(0, functionType0.getExtendedInterfacesCount());
//       assertEquals(false, functionType0.isNumberValueType());
//       assertEquals(false, functionType0.isNoResolvedType());
//       assertEquals(true, functionType0.hasCachedValues());
//       assertEquals(false, functionType0.isTemplateType());
//       assertEquals(false, functionType0.isOrdinaryFunction());
//       assertEquals(false, functionType0.isNoType());
//       assertEquals(false, functionType0.isFunctionPrototypeType());
//       assertEquals(true, functionType0.isConstructor());
//       assertEquals(false, functionType0.isNominalType());
//       assertEquals(false, functionType0.isNoObjectType());
//       assertEquals(false, functionType0.isCheckedUnknownType());
//       assertEquals("", nodeTraversal0.getSourceName());
//       assertEquals(0, nodeTraversal0.getLineNumber());
//   }

  @Test
  public void test04() {}
//   @Test
//   public void test04()  throws Throwable  {
//       Compiler compiler0 = new Compiler();
//       assertNotNull(compiler0);
//       assertEquals(0.0, compiler0.getProgress(), 0.01D);
//       
//       String string0 = "&";
//       Node node0 = compiler0.parseTestCode(string0);
//       assertNotNull(node0);
//       assertEquals(0, compiler0.getWarningCount());
//       assertEquals(0.0, compiler0.getProgress(), 0.01D);
//       assertEquals(false, compiler0.acceptConstKeyword());
//       assertEquals(false, compiler0.isIdeMode());
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
//       assertEquals(1, compiler0.getErrorCount());
//       assertEquals(false, compiler0.isTypeCheckingEnabled());
//       assertEquals(true, compiler0.hasErrors());
//       assertEquals(false, node0.isTrue());
//       assertEquals(false, node0.isLabel());
//       assertEquals(true, node0.mayMutateArguments());
//       assertEquals(false, node0.isRegExp());
//       assertEquals(false, node0.hasChildren());
//       assertEquals(false, node0.isBreak());
//       assertEquals(false, node0.wasEmptyNode());
//       assertEquals(false, node0.isDec());
//       assertEquals(false, node0.isIn());
//       assertEquals(false, node0.isSwitch());
//       assertEquals(false, node0.isNew());
//       assertEquals(false, node0.isLocalResultCall());
//       assertEquals(false, node0.isSetterDef());
//       assertEquals(false, node0.isBlock());
//       assertEquals(false, node0.isFromExterns());
//       assertEquals(false, node0.isAssignAdd());
//       assertEquals(false, node0.isEmpty());
//       assertEquals(false, node0.isFalse());
//       assertEquals(false, node0.isIf());
//       assertEquals(false, node0.isArrayLit());
//       assertEquals(false, node0.isThis());
//       assertEquals(false, node0.isCatch());
//       assertEquals(132, node0.getType());
//       assertEquals(false, node0.isDefaultCase());
//       assertEquals(false, node0.isOnlyModifiesThisCall());
//       assertEquals(true, node0.isScript());
//       assertEquals(false, node0.isCall());
//       assertEquals(false, node0.isVar());
//       assertEquals(false, node0.isOr());
//       assertEquals(false, node0.isInc());
//       assertEquals(false, node0.isStringKey());
//       assertEquals(0, node0.getSideEffectFlags());
//       assertEquals(false, node0.isAdd());
//       assertEquals(false, node0.hasMoreThanOneChild());
//       assertEquals(false, node0.isThrow());
//       assertEquals(false, node0.isHook());
//       assertEquals(false, node0.isGetterDef());
//       assertEquals(false, node0.hasOneChild());
//       assertEquals(false, node0.isContinue());
//       assertEquals("[testcode]", node0.getSourceFileName());
//       assertEquals(false, node0.isString());
//       assertEquals(-1, node0.getCharno());
//       assertEquals(false, node0.isNot());
//       assertEquals(false, node0.isTypeOf());
//       assertEquals(false, node0.isVoid());
//       assertEquals(false, node0.isObjectLit());
//       assertEquals(false, node0.isSyntheticBlock());
//       assertEquals(false, node0.isFor());
//       assertEquals(false, node0.isQuotedString());
//       assertEquals(false, node0.isGetProp());
//       assertEquals(false, node0.isComma());
//       assertEquals(false, node0.isOnlyModifiesArgumentsCall());
//       assertEquals(-1, node0.getLineno());
//       assertEquals(false, node0.isDo());
//       assertEquals(false, node0.isExprResult());
//       assertEquals(0, node0.getChangeTime());
//       assertEquals(false, node0.isNumber());
//       assertEquals(false, node0.isVarArgs());
//       assertEquals(false, node0.isFunction());
//       assertEquals(-1, node0.getSourcePosition());
//       assertEquals(false, node0.isLabelName());
//       assertEquals(false, node0.isReturn());
//       assertEquals(0, node0.getChildCount());
//       assertEquals(false, node0.isGetElem());
//       assertEquals(false, node0.isAssign());
//       assertEquals(false, node0.isAnd());
//       assertEquals(0, node0.getLength());
//       assertEquals(false, node0.isWhile());
//       assertEquals(false, node0.isNull());
//       assertEquals(false, node0.isNoSideEffectsCall());
//       assertEquals(false, node0.isDebugger());
//       assertEquals(false, node0.isNE());
//       assertEquals(false, node0.isDelProp());
//       assertEquals(false, node0.isName());
//       assertEquals(true, node0.mayMutateGlobalStateOrThrow());
//       assertEquals(false, node0.isOptionalArg());
//       assertEquals(false, node0.isCast());
//       assertEquals(false, node0.isWith());
//       assertEquals(false, node0.isInstanceOf());
//       assertEquals(false, node0.isTry());
//       assertEquals(false, node0.isCase());
//       assertEquals(false, node0.isParamList());
//       
//       TypeValidator typeValidator0 = new TypeValidator(compiler0);
//       assertNotNull(typeValidator0);
//       assertEquals(0, compiler0.getWarningCount());
//       assertEquals(0.0, compiler0.getProgress(), 0.01D);
//       assertEquals(false, compiler0.acceptConstKeyword());
//       assertEquals(false, compiler0.isIdeMode());
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
//       assertEquals(1, compiler0.getErrorCount());
//       assertEquals(false, compiler0.isTypeCheckingEnabled());
//       assertEquals(true, compiler0.hasErrors());
//       
//       boolean boolean0 = false;
//       String string1 = typeValidator0.getReadableJSTypeName(node0, boolean0);
//       assertNotNull(string1);
//       assertNotSame(string1, string0);
//       assertNotSame(string0, string1);
//       assertFalse(string1.equals((Object)string0));
//       assertFalse(string0.equals((Object)string1));
//       assertEquals(0, compiler0.getWarningCount());
//       assertEquals(0.0, compiler0.getProgress(), 0.01D);
//       assertEquals(false, compiler0.acceptConstKeyword());
//       assertEquals(false, compiler0.isIdeMode());
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
//       assertEquals(1, compiler0.getErrorCount());
//       assertEquals(false, compiler0.isTypeCheckingEnabled());
//       assertEquals(true, compiler0.hasErrors());
//       assertEquals(false, node0.isTrue());
//       assertEquals(false, node0.isLabel());
//       assertEquals(true, node0.mayMutateArguments());
//       assertEquals(false, node0.isRegExp());
//       assertEquals(false, node0.hasChildren());
//       assertEquals(false, node0.isBreak());
//       assertEquals(false, node0.wasEmptyNode());
//       assertEquals(false, node0.isDec());
//       assertEquals(false, node0.isIn());
//       assertEquals(false, node0.isSwitch());
//       assertEquals(false, node0.isNew());
//       assertEquals(false, node0.isLocalResultCall());
//       assertEquals(false, node0.isSetterDef());
//       assertEquals(false, node0.isBlock());
//       assertEquals(false, node0.isFromExterns());
//       assertEquals(false, node0.isAssignAdd());
//       assertEquals(false, node0.isEmpty());
//       assertEquals(false, node0.isFalse());
//       assertEquals(false, node0.isIf());
//       assertEquals(false, node0.isArrayLit());
//       assertEquals(false, node0.isThis());
//       assertEquals(false, node0.isCatch());
//       assertEquals(132, node0.getType());
//       assertEquals(false, node0.isDefaultCase());
//       assertEquals(false, node0.isOnlyModifiesThisCall());
//       assertEquals(true, node0.isScript());
//       assertEquals(false, node0.isCall());
//       assertEquals(false, node0.isVar());
//       assertEquals(false, node0.isOr());
//       assertEquals(false, node0.isInc());
//       assertEquals(false, node0.isStringKey());
//       assertEquals(0, node0.getSideEffectFlags());
//       assertEquals(false, node0.isAdd());
//       assertEquals(false, node0.hasMoreThanOneChild());
//       assertEquals(false, node0.isThrow());
//       assertEquals(false, node0.isHook());
//       assertEquals(false, node0.isGetterDef());
//       assertEquals(false, node0.hasOneChild());
//       assertEquals(false, node0.isContinue());
//       assertEquals("[testcode]", node0.getSourceFileName());
//       assertEquals(false, node0.isString());
//       assertEquals(-1, node0.getCharno());
//       assertEquals(false, node0.isNot());
//       assertEquals(false, node0.isTypeOf());
//       assertEquals(false, node0.isVoid());
//       assertEquals(false, node0.isObjectLit());
//       assertEquals(false, node0.isSyntheticBlock());
//       assertEquals(false, node0.isFor());
//       assertEquals(false, node0.isQuotedString());
//       assertEquals(false, node0.isGetProp());
//       assertEquals(false, node0.isComma());
//       assertEquals(false, node0.isOnlyModifiesArgumentsCall());
//       assertEquals(-1, node0.getLineno());
//       assertEquals(false, node0.isDo());
//       assertEquals(false, node0.isExprResult());
//       assertEquals(0, node0.getChangeTime());
//       assertEquals(false, node0.isNumber());
//       assertEquals(false, node0.isVarArgs());
//       assertEquals(false, node0.isFunction());
//       assertEquals(-1, node0.getSourcePosition());
//       assertEquals(false, node0.isLabelName());
//       assertEquals(false, node0.isReturn());
//       assertEquals(0, node0.getChildCount());
//       assertEquals(false, node0.isGetElem());
//       assertEquals(false, node0.isAssign());
//       assertEquals(false, node0.isAnd());
//       assertEquals(0, node0.getLength());
//       assertEquals(false, node0.isWhile());
//       assertEquals(false, node0.isNull());
//       assertEquals(false, node0.isNoSideEffectsCall());
//       assertEquals(false, node0.isDebugger());
//       assertEquals(false, node0.isNE());
//       assertEquals(false, node0.isDelProp());
//       assertEquals(false, node0.isName());
//       assertEquals(true, node0.mayMutateGlobalStateOrThrow());
//       assertEquals(false, node0.isOptionalArg());
//       assertEquals(false, node0.isCast());
//       assertEquals(false, node0.isWith());
//       assertEquals(false, node0.isInstanceOf());
//       assertEquals(false, node0.isTry());
//       assertEquals(false, node0.isCase());
//       assertEquals(false, node0.isParamList());
//       assertEquals("?", string1);
//       
//       InferJSDocInfo inferJSDocInfo0 = new InferJSDocInfo(compiler0);
//       assertNotNull(inferJSDocInfo0);
//       assertEquals(0, compiler0.getWarningCount());
//       assertEquals(0.0, compiler0.getProgress(), 0.01D);
//       assertEquals(false, compiler0.acceptConstKeyword());
//       assertEquals(false, compiler0.isIdeMode());
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
//       assertEquals(1, compiler0.getErrorCount());
//       assertEquals(false, compiler0.isTypeCheckingEnabled());
//       assertEquals(true, compiler0.hasErrors());
//       
//       NodeTraversal nodeTraversal0 = new NodeTraversal((AbstractCompiler) compiler0, (NodeTraversal.Callback) inferJSDocInfo0);
//       assertNotNull(nodeTraversal0);
//       assertEquals(0, nodeTraversal0.getLineNumber());
//       assertEquals("", nodeTraversal0.getSourceName());
//       assertEquals(0, compiler0.getWarningCount());
//       assertEquals(0.0, compiler0.getProgress(), 0.01D);
//       assertEquals(false, compiler0.acceptConstKeyword());
//       assertEquals(false, compiler0.isIdeMode());
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
//       assertEquals(1, compiler0.getErrorCount());
//       assertEquals(false, compiler0.isTypeCheckingEnabled());
//       assertEquals(true, compiler0.hasErrors());
//       
//       JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
//       assertNotNull(jSTypeRegistry0);
//       assertEquals(0, compiler0.getWarningCount());
//       assertEquals(0.0, compiler0.getProgress(), 0.01D);
//       assertEquals(false, compiler0.acceptConstKeyword());
//       assertEquals(false, compiler0.isIdeMode());
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
//       assertEquals(1, compiler0.getErrorCount());
//       assertEquals(false, compiler0.isTypeCheckingEnabled());
//       assertEquals(true, compiler0.hasErrors());
//       assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
//       
//       nodeTraversal0.traverse(node0);
//       assertNotSame(string0, string1);
//       assertFalse(string0.equals((Object)string1));
//       assertEquals(0, nodeTraversal0.getLineNumber());
//       assertEquals("[testcode]", nodeTraversal0.getSourceName());
//       assertEquals(0, compiler0.getWarningCount());
//       assertEquals(0.0, compiler0.getProgress(), 0.01D);
//       assertEquals(false, compiler0.acceptConstKeyword());
//       assertEquals(false, compiler0.isIdeMode());
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
//       assertEquals(1, compiler0.getErrorCount());
//       assertEquals(false, compiler0.isTypeCheckingEnabled());
//       assertEquals(true, compiler0.hasErrors());
//       assertEquals(false, node0.isTrue());
//       assertEquals(false, node0.isLabel());
//       assertEquals(true, node0.mayMutateArguments());
//       assertEquals(false, node0.isRegExp());
//       assertEquals(false, node0.hasChildren());
//       assertEquals(false, node0.isBreak());
//       assertEquals(false, node0.wasEmptyNode());
//       assertEquals(false, node0.isDec());
//       assertEquals(false, node0.isIn());
//       assertEquals(false, node0.isSwitch());
//       assertEquals(false, node0.isNew());
//       assertEquals(false, node0.isLocalResultCall());
//       assertEquals(false, node0.isSetterDef());
//       assertEquals(false, node0.isBlock());
//       assertEquals(false, node0.isFromExterns());
//       assertEquals(false, node0.isAssignAdd());
//       assertEquals(false, node0.isEmpty());
//       assertEquals(false, node0.isFalse());
//       assertEquals(false, node0.isIf());
//       assertEquals(false, node0.isArrayLit());
//       assertEquals(false, node0.isThis());
//       assertEquals(false, node0.isCatch());
//       assertEquals(132, node0.getType());
//       assertEquals(false, node0.isDefaultCase());
//       assertEquals(false, node0.isOnlyModifiesThisCall());
//       assertEquals(true, node0.isScript());
//       assertEquals(false, node0.isCall());
//       assertEquals(false, node0.isVar());
//       assertEquals(false, node0.isOr());
//       assertEquals(false, node0.isInc());
//       assertEquals(false, node0.isStringKey());
//       assertEquals(0, node0.getSideEffectFlags());
//       assertEquals(false, node0.isAdd());
//       assertEquals(false, node0.hasMoreThanOneChild());
//       assertEquals(false, node0.isThrow());
//       assertEquals(false, node0.isHook());
//       assertEquals(false, node0.isGetterDef());
//       assertEquals(false, node0.hasOneChild());
//       assertEquals(false, node0.isContinue());
//       assertEquals("[testcode]", node0.getSourceFileName());
//       assertEquals(false, node0.isString());
//       assertEquals(-1, node0.getCharno());
//       assertEquals(false, node0.isNot());
//       assertEquals(false, node0.isTypeOf());
//       assertEquals(false, node0.isVoid());
//       assertEquals(false, node0.isObjectLit());
//       assertEquals(false, node0.isSyntheticBlock());
//       assertEquals(false, node0.isFor());
//       assertEquals(false, node0.isQuotedString());
//       assertEquals(false, node0.isGetProp());
//       assertEquals(false, node0.isComma());
//       assertEquals(false, node0.isOnlyModifiesArgumentsCall());
//       assertEquals(-1, node0.getLineno());
//       assertEquals(false, node0.isDo());
//       assertEquals(false, node0.isExprResult());
//       assertEquals(0, node0.getChangeTime());
//       assertEquals(false, node0.isNumber());
//       assertEquals(false, node0.isVarArgs());
//       assertEquals(false, node0.isFunction());
//       assertEquals(-1, node0.getSourcePosition());
//       assertEquals(false, node0.isLabelName());
//       assertEquals(false, node0.isReturn());
//       assertEquals(0, node0.getChildCount());
//       assertEquals(false, node0.isGetElem());
//       assertEquals(false, node0.isAssign());
//       assertEquals(false, node0.isAnd());
//       assertEquals(0, node0.getLength());
//       assertEquals(false, node0.isWhile());
//       assertEquals(false, node0.isNull());
//       assertEquals(false, node0.isNoSideEffectsCall());
//       assertEquals(false, node0.isDebugger());
//       assertEquals(false, node0.isNE());
//       assertEquals(false, node0.isDelProp());
//       assertEquals(false, node0.isName());
//       assertEquals(true, node0.mayMutateGlobalStateOrThrow());
//       assertEquals(false, node0.isOptionalArg());
//       assertEquals(false, node0.isCast());
//       assertEquals(false, node0.isWith());
//       assertEquals(false, node0.isInstanceOf());
//       assertEquals(false, node0.isTry());
//       assertEquals(false, node0.isCase());
//       assertEquals(false, node0.isParamList());
//       
//       Scope scope0 = Scope.createGlobalScope(node0);
//       assertNotNull(scope0);
//       assertNotSame(string0, string1);
//       assertFalse(string0.equals((Object)string1));
//       assertEquals(false, scope0.isLocal());
//       assertEquals(0, scope0.getVarCount());
//       assertEquals(true, scope0.isGlobal());
//       assertEquals(0, compiler0.getWarningCount());
//       assertEquals(0.0, compiler0.getProgress(), 0.01D);
//       assertEquals(false, compiler0.acceptConstKeyword());
//       assertEquals(false, compiler0.isIdeMode());
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
//       assertEquals(1, compiler0.getErrorCount());
//       assertEquals(false, compiler0.isTypeCheckingEnabled());
//       assertEquals(true, compiler0.hasErrors());
//       assertEquals(false, node0.isTrue());
//       assertEquals(false, node0.isLabel());
//       assertEquals(true, node0.mayMutateArguments());
//       assertEquals(false, node0.isRegExp());
//       assertEquals(false, node0.hasChildren());
//       assertEquals(false, node0.isBreak());
//       assertEquals(false, node0.wasEmptyNode());
//       assertEquals(false, node0.isDec());
//       assertEquals(false, node0.isIn());
//       assertEquals(false, node0.isSwitch());
//       assertEquals(false, node0.isNew());
//       assertEquals(false, node0.isLocalResultCall());
//       assertEquals(false, node0.isSetterDef());
//       assertEquals(false, node0.isBlock());
//       assertEquals(false, node0.isFromExterns());
//       assertEquals(false, node0.isAssignAdd());
//       assertEquals(false, node0.isEmpty());
//       assertEquals(false, node0.isFalse());
//       assertEquals(false, node0.isIf());
//       assertEquals(false, node0.isArrayLit());
//       assertEquals(false, node0.isThis());
//       assertEquals(false, node0.isCatch());
//       assertEquals(132, node0.getType());
//       assertEquals(false, node0.isDefaultCase());
//       assertEquals(false, node0.isOnlyModifiesThisCall());
//       assertEquals(true, node0.isScript());
//       assertEquals(false, node0.isCall());
//       assertEquals(false, node0.isVar());
//       assertEquals(false, node0.isOr());
//       assertEquals(false, node0.isInc());
//       assertEquals(false, node0.isStringKey());
//       assertEquals(0, node0.getSideEffectFlags());
//       assertEquals(false, node0.isAdd());
//       assertEquals(false, node0.hasMoreThanOneChild());
//       assertEquals(false, node0.isThrow());
//       assertEquals(false, node0.isHook());
//       assertEquals(false, node0.isGetterDef());
//       assertEquals(false, node0.hasOneChild());
//       assertEquals(false, node0.isContinue());
//       assertEquals("[testcode]", node0.getSourceFileName());
//       assertEquals(false, node0.isString());
//       assertEquals(-1, node0.getCharno());
//       assertEquals(false, node0.isNot());
//       assertEquals(false, node0.isTypeOf());
//       assertEquals(false, node0.isVoid());
//       assertEquals(false, node0.isObjectLit());
//       assertEquals(false, node0.isSyntheticBlock());
//       assertEquals(false, node0.isFor());
//       assertEquals(false, node0.isQuotedString());
//       assertEquals(false, node0.isGetProp());
//       assertEquals(false, node0.isComma());
//       assertEquals(false, node0.isOnlyModifiesArgumentsCall());
//       assertEquals(-1, node0.getLineno());
//       assertEquals(false, node0.isDo());
//       assertEquals(false, node0.isExprResult());
//       assertEquals(0, node0.getChangeTime());
//       assertEquals(false, node0.isNumber());
//       assertEquals(false, node0.isVarArgs());
//       assertEquals(false, node0.isFunction());
//       assertEquals(-1, node0.getSourcePosition());
//       assertEquals(false, node0.isLabelName());
//       assertEquals(false, node0.isReturn());
//       assertEquals(0, node0.getChildCount());
//       assertEquals(false, node0.isGetElem());
//       assertEquals(false, node0.isAssign());
//       assertEquals(false, node0.isAnd());
//       assertEquals(0, node0.getLength());
//       assertEquals(false, node0.isWhile());
//       assertEquals(false, node0.isNull());
//       assertEquals(false, node0.isNoSideEffectsCall());
//       assertEquals(false, node0.isDebugger());
//       assertEquals(false, node0.isNE());
//       assertEquals(false, node0.isDelProp());
//       assertEquals(false, node0.isName());
//       assertEquals(true, node0.mayMutateGlobalStateOrThrow());
//       assertEquals(false, node0.isOptionalArg());
//       assertEquals(false, node0.isCast());
//       assertEquals(false, node0.isWith());
//       assertEquals(false, node0.isInstanceOf());
//       assertEquals(false, node0.isTry());
//       assertEquals(false, node0.isCase());
//       assertEquals(false, node0.isParamList());
//       
//       int int0 = (-1544);
//       JSType jSType0 = jSTypeRegistry0.getType((StaticScope<JSType>) scope0, string0, string0, int0, int0);
//       assertNotNull(jSType0);
//       assertNotSame(string0, string1);
//       assertFalse(string0.equals((Object)string1));
//       assertEquals(false, scope0.isLocal());
//       assertEquals(0, scope0.getVarCount());
//       assertEquals(true, scope0.isGlobal());
//       assertEquals(0, compiler0.getWarningCount());
//       assertEquals(0.0, compiler0.getProgress(), 0.01D);
//       assertEquals(false, compiler0.acceptConstKeyword());
//       assertEquals(false, compiler0.isIdeMode());
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
//       assertEquals(1, compiler0.getErrorCount());
//       assertEquals(false, compiler0.isTypeCheckingEnabled());
//       assertEquals(true, compiler0.hasErrors());
//       assertEquals(false, jSType0.isTemplatizedType());
//       assertEquals(false, jSType0.isNullType());
//       assertEquals(false, jSType0.isEnumElementType());
//       assertEquals(false, jSType0.isBooleanValueType());
//       assertEquals(false, jSType0.isNominalConstructor());
//       assertEquals(false, jSType0.isNoResolvedType());
//       assertEquals(false, jSType0.isNumberValueType());
//       assertEquals(true, jSType0.isNominalType());
//       assertEquals(false, jSType0.isNoType());
//       assertEquals(false, jSType0.isCheckedUnknownType());
//       assertEquals(false, jSType0.isResolved());
//       assertEquals(false, jSType0.isEnumType());
//       assertEquals(false, jSType0.isTemplateType());
//       assertEquals(false, jSType0.isOrdinaryFunction());
//       assertEquals(false, jSType0.isStringValueType());
//       assertEquals(false, jSType0.isInterface());
//       assertEquals(false, jSType0.isNoObjectType());
//       assertEquals(false, jSType0.isUnionType());
//       assertEquals(false, jSType0.isVoidType());
//       assertEquals(false, jSType0.isFunctionType());
//       assertEquals(false, jSType0.isAllType());
//       assertEquals(false, jSType0.isConstructor());
//       assertEquals(false, jSType0.isFunctionPrototypeType());
//       assertEquals(false, jSType0.isRecordType());
//       assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
//       assertEquals(false, node0.isTrue());
//       assertEquals(false, node0.isLabel());
//       assertEquals(true, node0.mayMutateArguments());
//       assertEquals(false, node0.isRegExp());
//       assertEquals(false, node0.hasChildren());
//       assertEquals(false, node0.isBreak());
//       assertEquals(false, node0.wasEmptyNode());
//       assertEquals(false, node0.isDec());
//       assertEquals(false, node0.isIn());
//       assertEquals(false, node0.isSwitch());
//       assertEquals(false, node0.isNew());
//       assertEquals(false, node0.isLocalResultCall());
//       assertEquals(false, node0.isSetterDef());
//       assertEquals(false, node0.isBlock());
//       assertEquals(false, node0.isFromExterns());
//       assertEquals(false, node0.isAssignAdd());
//       assertEquals(false, node0.isEmpty());
//       assertEquals(false, node0.isFalse());
//       assertEquals(false, node0.isIf());
//       assertEquals(false, node0.isArrayLit());
//       assertEquals(false, node0.isThis());
//       assertEquals(false, node0.isCatch());
//       assertEquals(132, node0.getType());
//       assertEquals(false, node0.isDefaultCase());
//       assertEquals(false, node0.isOnlyModifiesThisCall());
//       assertEquals(true, node0.isScript());
//       assertEquals(false, node0.isCall());
//       assertEquals(false, node0.isVar());
//       assertEquals(false, node0.isOr());
//       assertEquals(false, node0.isInc());
//       assertEquals(false, node0.isStringKey());
//       assertEquals(0, node0.getSideEffectFlags());
//       assertEquals(false, node0.isAdd());
//       assertEquals(false, node0.hasMoreThanOneChild());
//       assertEquals(false, node0.isThrow());
//       assertEquals(false, node0.isHook());
//       assertEquals(false, node0.isGetterDef());
//       assertEquals(false, node0.hasOneChild());
//       assertEquals(false, node0.isContinue());
//       assertEquals("[testcode]", node0.getSourceFileName());
//       assertEquals(false, node0.isString());
//       assertEquals(-1, node0.getCharno());
//       assertEquals(false, node0.isNot());
//       assertEquals(false, node0.isTypeOf());
//       assertEquals(false, node0.isVoid());
//       assertEquals(false, node0.isObjectLit());
//       assertEquals(false, node0.isSyntheticBlock());
//       assertEquals(false, node0.isFor());
//       assertEquals(false, node0.isQuotedString());
//       assertEquals(false, node0.isGetProp());
//       assertEquals(false, node0.isComma());
//       assertEquals(false, node0.isOnlyModifiesArgumentsCall());
//       assertEquals(-1, node0.getLineno());
//       assertEquals(false, node0.isDo());
//       assertEquals(false, node0.isExprResult());
//       assertEquals(0, node0.getChangeTime());
//       assertEquals(false, node0.isNumber());
//       assertEquals(false, node0.isVarArgs());
//       assertEquals(false, node0.isFunction());
//       assertEquals(-1, node0.getSourcePosition());
//       assertEquals(false, node0.isLabelName());
//       assertEquals(false, node0.isReturn());
//       assertEquals(0, node0.getChildCount());
//       assertEquals(false, node0.isGetElem());
//       assertEquals(false, node0.isAssign());
//       assertEquals(false, node0.isAnd());
//       assertEquals(0, node0.getLength());
//       assertEquals(false, node0.isWhile());
//       assertEquals(false, node0.isNull());
//       assertEquals(false, node0.isNoSideEffectsCall());
//       assertEquals(false, node0.isDebugger());
//       assertEquals(false, node0.isNE());
//       assertEquals(false, node0.isDelProp());
//       assertEquals(false, node0.isName());
//       assertEquals(true, node0.mayMutateGlobalStateOrThrow());
//       assertEquals(false, node0.isOptionalArg());
//       assertEquals(false, node0.isCast());
//       assertEquals(false, node0.isWith());
//       assertEquals(false, node0.isInstanceOf());
//       assertEquals(false, node0.isTry());
//       assertEquals(false, node0.isCase());
//       assertEquals(false, node0.isParamList());
//       
//       CompilerInput compilerInput0 = nodeTraversal0.getInput();
//       assertNotNull(compilerInput0);
//       assertEquals(0, nodeTraversal0.getLineNumber());
//       assertEquals("[testcode]", nodeTraversal0.getSourceName());
//       assertEquals(0, compiler0.getWarningCount());
//       assertEquals(0.0, compiler0.getProgress(), 0.01D);
//       assertEquals(false, compiler0.acceptConstKeyword());
//       assertEquals(false, compiler0.isIdeMode());
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
//       assertEquals(1, compiler0.getErrorCount());
//       assertEquals(false, compiler0.isTypeCheckingEnabled());
//       assertEquals(true, compiler0.hasErrors());
//       assertEquals("[testcode]", compilerInput0.toString());
//       assertEquals(false, compilerInput0.isExtern());
//       assertEquals("[testcode]", compilerInput0.getName());
//       
//       Scope.Var scope_Var0 = scope0.declare(string1, node0, jSType0, compilerInput0);
//       assertNotNull(scope_Var0);
//       assertNotSame(string1, string0);
//       assertNotSame(string0, string1);
//       assertFalse(string0.equals((Object)string1));
//       assertFalse(string1.equals((Object)string0));
//       assertEquals(false, scope0.isLocal());
//       assertEquals(1, scope0.getVarCount());
//       assertEquals(true, scope0.isGlobal());
//       assertEquals(0, nodeTraversal0.getLineNumber());
//       assertEquals("[testcode]", nodeTraversal0.getSourceName());
//       assertEquals(0, compiler0.getWarningCount());
//       assertEquals(0.0, compiler0.getProgress(), 0.01D);
//       assertEquals(false, compiler0.acceptConstKeyword());
//       assertEquals(false, compiler0.isIdeMode());
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
//       assertEquals(1, compiler0.getErrorCount());
//       assertEquals(false, compiler0.isTypeCheckingEnabled());
//       assertEquals(true, compiler0.hasErrors());
//       assertEquals(false, jSType0.isTemplatizedType());
//       assertEquals(false, jSType0.isNullType());
//       assertEquals(false, jSType0.isEnumElementType());
//       assertEquals(false, jSType0.isBooleanValueType());
//       assertEquals(false, jSType0.isNominalConstructor());
//       assertEquals(false, jSType0.isNoResolvedType());
//       assertEquals(false, jSType0.isNumberValueType());
//       assertEquals(true, jSType0.isNominalType());
//       assertEquals(false, jSType0.isNoType());
//       assertEquals(false, jSType0.isCheckedUnknownType());
//       assertEquals(false, jSType0.isResolved());
//       assertEquals(false, jSType0.isEnumType());
//       assertEquals(false, jSType0.isTemplateType());
//       assertEquals(false, jSType0.isOrdinaryFunction());
//       assertEquals(false, jSType0.isStringValueType());
//       assertEquals(false, jSType0.isInterface());
//       assertEquals(false, jSType0.isNoObjectType());
//       assertEquals(false, jSType0.isUnionType());
//       assertEquals(false, jSType0.isVoidType());
//       assertEquals(false, jSType0.isFunctionType());
//       assertEquals(false, jSType0.isAllType());
//       assertEquals(false, jSType0.isConstructor());
//       assertEquals(false, jSType0.isFunctionPrototypeType());
//       assertEquals(false, jSType0.isRecordType());
//       assertEquals("[testcode]", compilerInput0.toString());
//       assertEquals(false, compilerInput0.isExtern());
//       assertEquals("[testcode]", compilerInput0.getName());
//       assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
//       assertEquals(false, node0.isTrue());
//       assertEquals(false, node0.isLabel());
//       assertEquals(true, node0.mayMutateArguments());
//       assertEquals(false, node0.isRegExp());
//       assertEquals(false, node0.hasChildren());
//       assertEquals(false, node0.isBreak());
//       assertEquals(false, node0.wasEmptyNode());
//       assertEquals(false, node0.isDec());
//       assertEquals(false, node0.isIn());
//       assertEquals(false, node0.isSwitch());
//       assertEquals(false, node0.isNew());
//       assertEquals(false, node0.isLocalResultCall());
//       assertEquals(false, node0.isSetterDef());
//       assertEquals(false, node0.isBlock());
//       assertEquals(false, node0.isFromExterns());
//       assertEquals(false, node0.isAssignAdd());
//       assertEquals(false, node0.isEmpty());
//       assertEquals(false, node0.isFalse());
//       assertEquals(false, node0.isIf());
//       assertEquals(false, node0.isArrayLit());
//       assertEquals(false, node0.isThis());
//       assertEquals(false, node0.isCatch());
//       assertEquals(132, node0.getType());
//       assertEquals(false, node0.isDefaultCase());
//       assertEquals(false, node0.isOnlyModifiesThisCall());
//       assertEquals(true, node0.isScript());
//       assertEquals(false, node0.isCall());
//       assertEquals(false, node0.isVar());
//       assertEquals(false, node0.isOr());
//       assertEquals(false, node0.isInc());
//       assertEquals(false, node0.isStringKey());
//       assertEquals(0, node0.getSideEffectFlags());
//       assertEquals(false, node0.isAdd());
//       assertEquals(false, node0.hasMoreThanOneChild());
//       assertEquals(false, node0.isThrow());
//       assertEquals(false, node0.isHook());
//       assertEquals(false, node0.isGetterDef());
//       assertEquals(false, node0.hasOneChild());
//       assertEquals(false, node0.isContinue());
//       assertEquals("[testcode]", node0.getSourceFileName());
//       assertEquals(false, node0.isString());
//       assertEquals(-1, node0.getCharno());
//       assertEquals(false, node0.isNot());
//       assertEquals(false, node0.isTypeOf());
//       assertEquals(false, node0.isVoid());
//       assertEquals(false, node0.isObjectLit());
//       assertEquals(false, node0.isSyntheticBlock());
//       assertEquals(false, node0.isFor());
//       assertEquals(false, node0.isQuotedString());
//       assertEquals(false, node0.isGetProp());
//       assertEquals(false, node0.isComma());
//       assertEquals(false, node0.isOnlyModifiesArgumentsCall());
//       assertEquals(-1, node0.getLineno());
//       assertEquals(false, node0.isDo());
//       assertEquals(false, node0.isExprResult());
//       assertEquals(0, node0.getChangeTime());
//       assertEquals(false, node0.isNumber());
//       assertEquals(false, node0.isVarArgs());
//       assertEquals(false, node0.isFunction());
//       assertEquals(-1, node0.getSourcePosition());
//       assertEquals(false, node0.isLabelName());
//       assertEquals(false, node0.isReturn());
//       assertEquals(0, node0.getChildCount());
//       assertEquals(false, node0.isGetElem());
//       assertEquals(false, node0.isAssign());
//       assertEquals(false, node0.isAnd());
//       assertEquals(0, node0.getLength());
//       assertEquals(false, node0.isWhile());
//       assertEquals(false, node0.isNull());
//       assertEquals(false, node0.isNoSideEffectsCall());
//       assertEquals(false, node0.isDebugger());
//       assertEquals(false, node0.isNE());
//       assertEquals(false, node0.isDelProp());
//       assertEquals(false, node0.isName());
//       assertEquals(true, node0.mayMutateGlobalStateOrThrow());
//       assertEquals(false, node0.isOptionalArg());
//       assertEquals(false, node0.isCast());
//       assertEquals(false, node0.isWith());
//       assertEquals(false, node0.isInstanceOf());
//       assertEquals(false, node0.isTry());
//       assertEquals(false, node0.isCase());
//       assertEquals(false, node0.isParamList());
//       
//       // Undeclared exception!
//       try {
//         Scope.Var scope_Var1 = typeValidator0.expectUndeclaredVariable(string1, compilerInput0, node0, node0, scope_Var0, string0, jSType0);
//         fail("Expecting exception: NullPointerException");
//       
//       } catch(NullPointerException e) {
//          //
//          // no message in exception (getMessage() returned null)
//          //
//       }
//   }

  @Test
  public void test05()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      assertNotNull(compiler0);
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      
      String string0 = "&";
      Node node0 = compiler0.parseTestCode(string0);
      assertNotNull(node0);
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isCast());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isHook());
      assertEquals("[testcode]", node0.getSourceFileName());
      assertEquals(false, node0.isStringKey());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isContinue());
      assertEquals(true, node0.isScript());
      assertEquals(false, node0.isTrue());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isLabelName());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isDebugger());
      assertEquals(true, node0.mayMutateGlobalStateOrThrow());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isNumber());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isOnlyModifiesArgumentsCall());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isRegExp());
      assertEquals(132, node0.getType());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isString());
      assertEquals(false, node0.isThis());
      assertEquals(0, node0.getChangeTime());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isArrayLit());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isWith());
      assertEquals(true, node0.mayMutateArguments());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(true, compiler0.hasErrors());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(1, compiler0.getErrorCount());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(0, compiler0.getWarningCount());
      
      TypeValidator typeValidator0 = new TypeValidator(compiler0);
      assertNotNull(typeValidator0);
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(true, compiler0.hasErrors());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(1, compiler0.getErrorCount());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(0, compiler0.getWarningCount());
      
      boolean boolean0 = false;
      String string1 = typeValidator0.getReadableJSTypeName(node0, boolean0);
      assertNotNull(string1);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isCast());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isHook());
      assertEquals("[testcode]", node0.getSourceFileName());
      assertEquals(false, node0.isStringKey());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isContinue());
      assertEquals(true, node0.isScript());
      assertEquals(false, node0.isTrue());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isLabelName());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isDebugger());
      assertEquals(true, node0.mayMutateGlobalStateOrThrow());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isNumber());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isOnlyModifiesArgumentsCall());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isRegExp());
      assertEquals(132, node0.getType());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isString());
      assertEquals(false, node0.isThis());
      assertEquals(0, node0.getChangeTime());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isArrayLit());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isWith());
      assertEquals(true, node0.mayMutateArguments());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(true, compiler0.hasErrors());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(1, compiler0.getErrorCount());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(0, compiler0.getWarningCount());
      assertEquals("?", string1);
      
      InferJSDocInfo inferJSDocInfo0 = new InferJSDocInfo(compiler0);
      assertNotNull(inferJSDocInfo0);
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(true, compiler0.hasErrors());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(1, compiler0.getErrorCount());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(0, compiler0.getWarningCount());
      
      NodeTraversal nodeTraversal0 = new NodeTraversal((AbstractCompiler) compiler0, (NodeTraversal.Callback) inferJSDocInfo0);
      assertNotNull(nodeTraversal0);
      assertEquals(0, nodeTraversal0.getLineNumber());
      assertEquals("", nodeTraversal0.getSourceName());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(true, compiler0.hasErrors());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(1, compiler0.getErrorCount());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(0, compiler0.getWarningCount());
      
      JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
      assertNotNull(jSTypeRegistry0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(true, compiler0.hasErrors());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(1, compiler0.getErrorCount());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(0, compiler0.getWarningCount());
      
      Scope scope0 = Scope.createGlobalScope(node0);
      assertNotNull(scope0);
      assertNotSame(string0, string1);
      assertFalse(string0.equals((Object)string1));
      assertEquals(0, scope0.getVarCount());
      assertEquals(false, scope0.isLocal());
      assertEquals(true, scope0.isGlobal());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isCast());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isHook());
      assertEquals("[testcode]", node0.getSourceFileName());
      assertEquals(false, node0.isStringKey());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isContinue());
      assertEquals(true, node0.isScript());
      assertEquals(false, node0.isTrue());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isLabelName());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isDebugger());
      assertEquals(true, node0.mayMutateGlobalStateOrThrow());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isNumber());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isOnlyModifiesArgumentsCall());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isRegExp());
      assertEquals(132, node0.getType());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isString());
      assertEquals(false, node0.isThis());
      assertEquals(0, node0.getChangeTime());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isArrayLit());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isWith());
      assertEquals(true, node0.mayMutateArguments());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(true, compiler0.hasErrors());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(1, compiler0.getErrorCount());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(0, compiler0.getWarningCount());
      
      int int0 = (-1544);
      JSType jSType0 = jSTypeRegistry0.getType((StaticScope<JSType>) scope0, string1, string1, int0, int0);
      assertNotNull(jSType0);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertEquals(0, scope0.getVarCount());
      assertEquals(false, scope0.isLocal());
      assertEquals(true, scope0.isGlobal());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, jSType0.isAllType());
      assertEquals(false, jSType0.isTemplateType());
      assertEquals(false, jSType0.isNullType());
      assertEquals(false, jSType0.isUnionType());
      assertEquals(false, jSType0.isVoidType());
      assertEquals(false, jSType0.isResolved());
      assertEquals(false, jSType0.isEnumType());
      assertEquals(false, jSType0.isEnumElementType());
      assertEquals(false, jSType0.isNoResolvedType());
      assertEquals(false, jSType0.isNumberValueType());
      assertEquals(false, jSType0.isInterface());
      assertEquals(false, jSType0.isCheckedUnknownType());
      assertEquals(false, jSType0.isRecordType());
      assertEquals(false, jSType0.isNominalConstructor());
      assertEquals(false, jSType0.isNoObjectType());
      assertEquals(false, jSType0.isBooleanValueType());
      assertEquals(false, jSType0.isStringValueType());
      assertEquals(true, jSType0.isNominalType());
      assertEquals(false, jSType0.isFunctionPrototypeType());
      assertEquals(false, jSType0.isTemplatizedType());
      assertEquals(false, jSType0.isConstructor());
      assertEquals(false, jSType0.isNoType());
      assertEquals(false, jSType0.isOrdinaryFunction());
      assertEquals(false, jSType0.isFunctionType());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isCast());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isHook());
      assertEquals("[testcode]", node0.getSourceFileName());
      assertEquals(false, node0.isStringKey());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isContinue());
      assertEquals(true, node0.isScript());
      assertEquals(false, node0.isTrue());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isLabelName());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isDebugger());
      assertEquals(true, node0.mayMutateGlobalStateOrThrow());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isNumber());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isOnlyModifiesArgumentsCall());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isRegExp());
      assertEquals(132, node0.getType());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isString());
      assertEquals(false, node0.isThis());
      assertEquals(0, node0.getChangeTime());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isArrayLit());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isWith());
      assertEquals(true, node0.mayMutateArguments());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(true, compiler0.hasErrors());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(1, compiler0.getErrorCount());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(0, compiler0.getWarningCount());
      
      CompilerInput compilerInput0 = nodeTraversal0.getInput();
      assertNull(compilerInput0);
      assertEquals(0, nodeTraversal0.getLineNumber());
      assertEquals("", nodeTraversal0.getSourceName());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(true, compiler0.hasErrors());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(1, compiler0.getErrorCount());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(0, compiler0.getWarningCount());
      
      Scope.Var scope_Var0 = scope0.declare(string1, node0, jSType0, compilerInput0);
      assertNotNull(scope_Var0);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertEquals(false, scope0.isLocal());
      assertEquals(1, scope0.getVarCount());
      assertEquals(true, scope0.isGlobal());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, jSType0.isAllType());
      assertEquals(false, jSType0.isTemplateType());
      assertEquals(false, jSType0.isNullType());
      assertEquals(false, jSType0.isUnionType());
      assertEquals(false, jSType0.isVoidType());
      assertEquals(false, jSType0.isResolved());
      assertEquals(false, jSType0.isEnumType());
      assertEquals(false, jSType0.isEnumElementType());
      assertEquals(false, jSType0.isNoResolvedType());
      assertEquals(false, jSType0.isNumberValueType());
      assertEquals(false, jSType0.isInterface());
      assertEquals(false, jSType0.isCheckedUnknownType());
      assertEquals(false, jSType0.isRecordType());
      assertEquals(false, jSType0.isNominalConstructor());
      assertEquals(false, jSType0.isNoObjectType());
      assertEquals(false, jSType0.isBooleanValueType());
      assertEquals(false, jSType0.isStringValueType());
      assertEquals(true, jSType0.isNominalType());
      assertEquals(false, jSType0.isFunctionPrototypeType());
      assertEquals(false, jSType0.isTemplatizedType());
      assertEquals(false, jSType0.isConstructor());
      assertEquals(false, jSType0.isNoType());
      assertEquals(false, jSType0.isOrdinaryFunction());
      assertEquals(false, jSType0.isFunctionType());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isCast());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isHook());
      assertEquals("[testcode]", node0.getSourceFileName());
      assertEquals(false, node0.isStringKey());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isContinue());
      assertEquals(true, node0.isScript());
      assertEquals(false, node0.isTrue());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isLabelName());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isDebugger());
      assertEquals(true, node0.mayMutateGlobalStateOrThrow());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isNumber());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isOnlyModifiesArgumentsCall());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isRegExp());
      assertEquals(132, node0.getType());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isString());
      assertEquals(false, node0.isThis());
      assertEquals(0, node0.getChangeTime());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isArrayLit());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isWith());
      assertEquals(true, node0.mayMutateArguments());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isGetProp());
      assertEquals(0, nodeTraversal0.getLineNumber());
      assertEquals("", nodeTraversal0.getSourceName());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(true, compiler0.hasErrors());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(1, compiler0.getErrorCount());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(0, compiler0.getWarningCount());
      
      // Undeclared exception!
      try {
        Scope.Var scope_Var1 = typeValidator0.expectUndeclaredVariable(string1, compilerInput0, node0, node0, scope_Var0, string1, jSType0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test06() {}
//   @Test
//   public void test06()  throws Throwable  {
//       Compiler compiler0 = new Compiler();
//       assertNotNull(compiler0);
//       assertEquals(0.0, compiler0.getProgress(), 0.01D);
//       
//       String string0 = "!";
//       Node node0 = compiler0.parseTestCode(string0);
//       assertNotNull(node0);
//       assertEquals(0.0, compiler0.getProgress(), 0.01D);
//       assertEquals(true, compiler0.hasErrors());
//       assertEquals(0, compiler0.getWarningCount());
//       assertEquals(1, compiler0.getErrorCount());
//       assertEquals(false, compiler0.acceptConstKeyword());
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
//       assertEquals(false, compiler0.isTypeCheckingEnabled());
//       assertEquals(false, compiler0.isIdeMode());
//       assertEquals(false, node0.isTrue());
//       assertEquals(false, node0.isThis());
//       assertEquals(false, node0.isWhile());
//       assertEquals(-1, node0.getLineno());
//       assertEquals(false, node0.isInc());
//       assertEquals(false, node0.isIn());
//       assertEquals(false, node0.isInstanceOf());
//       assertEquals(false, node0.isEmpty());
//       assertEquals(false, node0.isLocalResultCall());
//       assertEquals(0, node0.getSideEffectFlags());
//       assertEquals(false, node0.isIf());
//       assertEquals(false, node0.isContinue());
//       assertEquals(false, node0.isComma());
//       assertEquals(false, node0.isLabelName());
//       assertEquals(false, node0.isAnd());
//       assertEquals(false, node0.wasEmptyNode());
//       assertEquals(false, node0.isTry());
//       assertEquals(true, node0.isScript());
//       assertEquals(false, node0.isGetterDef());
//       assertEquals(false, node0.isOr());
//       assertEquals(false, node0.isHook());
//       assertEquals(false, node0.isDefaultCase());
//       assertEquals(0, node0.getChangeTime());
//       assertEquals(false, node0.hasMoreThanOneChild());
//       assertEquals(false, node0.isName());
//       assertEquals(false, node0.isQuotedString());
//       assertEquals(false, node0.isParamList());
//       assertEquals(false, node0.isThrow());
//       assertEquals(false, node0.hasChildren());
//       assertEquals(false, node0.isReturn());
//       assertEquals(false, node0.isNot());
//       assertEquals(false, node0.isObjectLit());
//       assertEquals(false, node0.isDo());
//       assertEquals(0, node0.getLength());
//       assertEquals(false, node0.isFromExterns());
//       assertEquals(false, node0.isNull());
//       assertEquals(true, node0.mayMutateArguments());
//       assertEquals(132, node0.getType());
//       assertEquals(false, node0.isCall());
//       assertEquals(false, node0.isArrayLit());
//       assertEquals(false, node0.isNumber());
//       assertEquals("[testcode]", node0.getSourceFileName());
//       assertEquals(false, node0.isVoid());
//       assertEquals(false, node0.isBlock());
//       assertEquals(false, node0.isGetProp());
//       assertEquals(false, node0.isSetterDef());
//       assertEquals(false, node0.isCast());
//       assertEquals(false, node0.isString());
//       assertEquals(false, node0.isFalse());
//       assertEquals(false, node0.isDec());
//       assertEquals(false, node0.isNew());
//       assertEquals(0, node0.getChildCount());
//       assertEquals(false, node0.isVarArgs());
//       assertEquals(false, node0.isRegExp());
//       assertEquals(false, node0.isTypeOf());
//       assertEquals(false, node0.isWith());
//       assertEquals(false, node0.isCatch());
//       assertEquals(false, node0.isAssignAdd());
//       assertEquals(-1, node0.getCharno());
//       assertEquals(-1, node0.getSourcePosition());
//       assertEquals(false, node0.isSyntheticBlock());
//       assertEquals(false, node0.isSwitch());
//       assertEquals(false, node0.isOnlyModifiesThisCall());
//       assertEquals(false, node0.isLabel());
//       assertEquals(false, node0.isDelProp());
//       assertEquals(false, node0.hasOneChild());
//       assertEquals(false, node0.isVar());
//       assertEquals(true, node0.mayMutateGlobalStateOrThrow());
//       assertEquals(false, node0.isAdd());
//       assertEquals(false, node0.isFunction());
//       assertEquals(false, node0.isNoSideEffectsCall());
//       assertEquals(false, node0.isOptionalArg());
//       assertEquals(false, node0.isExprResult());
//       assertEquals(false, node0.isOnlyModifiesArgumentsCall());
//       assertEquals(false, node0.isDebugger());
//       assertEquals(false, node0.isCase());
//       assertEquals(false, node0.isAssign());
//       assertEquals(false, node0.isFor());
//       assertEquals(false, node0.isStringKey());
//       assertEquals(false, node0.isGetElem());
//       assertEquals(false, node0.isBreak());
//       assertEquals(false, node0.isNE());
//       
//       TypeValidator typeValidator0 = new TypeValidator(compiler0);
//       assertNotNull(typeValidator0);
//       assertEquals(0.0, compiler0.getProgress(), 0.01D);
//       assertEquals(true, compiler0.hasErrors());
//       assertEquals(0, compiler0.getWarningCount());
//       assertEquals(1, compiler0.getErrorCount());
//       assertEquals(false, compiler0.acceptConstKeyword());
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
//       assertEquals(false, compiler0.isTypeCheckingEnabled());
//       assertEquals(false, compiler0.isIdeMode());
//       
//       InputId inputId0 = null;
//       CompilerInput compilerInput0 = compiler0.getInput(inputId0);
//       assertNull(compilerInput0);
//       assertEquals(0.0, compiler0.getProgress(), 0.01D);
//       assertEquals(true, compiler0.hasErrors());
//       assertEquals(0, compiler0.getWarningCount());
//       assertEquals(1, compiler0.getErrorCount());
//       assertEquals(false, compiler0.acceptConstKeyword());
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
//       assertEquals(false, compiler0.isTypeCheckingEnabled());
//       assertEquals(false, compiler0.isIdeMode());
//       
//       Scope scope0 = Scope.createGlobalScope(node0);
//       assertNotNull(scope0);
//       assertEquals(0.0, compiler0.getProgress(), 0.01D);
//       assertEquals(true, compiler0.hasErrors());
//       assertEquals(0, compiler0.getWarningCount());
//       assertEquals(1, compiler0.getErrorCount());
//       assertEquals(false, compiler0.acceptConstKeyword());
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
//       assertEquals(false, compiler0.isTypeCheckingEnabled());
//       assertEquals(false, compiler0.isIdeMode());
//       assertEquals(0, scope0.getVarCount());
//       assertEquals(true, scope0.isGlobal());
//       assertEquals(false, scope0.isLocal());
//       assertEquals(false, node0.isTrue());
//       assertEquals(false, node0.isThis());
//       assertEquals(false, node0.isWhile());
//       assertEquals(-1, node0.getLineno());
//       assertEquals(false, node0.isInc());
//       assertEquals(false, node0.isIn());
//       assertEquals(false, node0.isInstanceOf());
//       assertEquals(false, node0.isEmpty());
//       assertEquals(false, node0.isLocalResultCall());
//       assertEquals(0, node0.getSideEffectFlags());
//       assertEquals(false, node0.isIf());
//       assertEquals(false, node0.isContinue());
//       assertEquals(false, node0.isComma());
//       assertEquals(false, node0.isLabelName());
//       assertEquals(false, node0.isAnd());
//       assertEquals(false, node0.wasEmptyNode());
//       assertEquals(false, node0.isTry());
//       assertEquals(true, node0.isScript());
//       assertEquals(false, node0.isGetterDef());
//       assertEquals(false, node0.isOr());
//       assertEquals(false, node0.isHook());
//       assertEquals(false, node0.isDefaultCase());
//       assertEquals(0, node0.getChangeTime());
//       assertEquals(false, node0.hasMoreThanOneChild());
//       assertEquals(false, node0.isName());
//       assertEquals(false, node0.isQuotedString());
//       assertEquals(false, node0.isParamList());
//       assertEquals(false, node0.isThrow());
//       assertEquals(false, node0.hasChildren());
//       assertEquals(false, node0.isReturn());
//       assertEquals(false, node0.isNot());
//       assertEquals(false, node0.isObjectLit());
//       assertEquals(false, node0.isDo());
//       assertEquals(0, node0.getLength());
//       assertEquals(false, node0.isFromExterns());
//       assertEquals(false, node0.isNull());
//       assertEquals(true, node0.mayMutateArguments());
//       assertEquals(132, node0.getType());
//       assertEquals(false, node0.isCall());
//       assertEquals(false, node0.isArrayLit());
//       assertEquals(false, node0.isNumber());
//       assertEquals("[testcode]", node0.getSourceFileName());
//       assertEquals(false, node0.isVoid());
//       assertEquals(false, node0.isBlock());
//       assertEquals(false, node0.isGetProp());
//       assertEquals(false, node0.isSetterDef());
//       assertEquals(false, node0.isCast());
//       assertEquals(false, node0.isString());
//       assertEquals(false, node0.isFalse());
//       assertEquals(false, node0.isDec());
//       assertEquals(false, node0.isNew());
//       assertEquals(0, node0.getChildCount());
//       assertEquals(false, node0.isVarArgs());
//       assertEquals(false, node0.isRegExp());
//       assertEquals(false, node0.isTypeOf());
//       assertEquals(false, node0.isWith());
//       assertEquals(false, node0.isCatch());
//       assertEquals(false, node0.isAssignAdd());
//       assertEquals(-1, node0.getCharno());
//       assertEquals(-1, node0.getSourcePosition());
//       assertEquals(false, node0.isSyntheticBlock());
//       assertEquals(false, node0.isSwitch());
//       assertEquals(false, node0.isOnlyModifiesThisCall());
//       assertEquals(false, node0.isLabel());
//       assertEquals(false, node0.isDelProp());
//       assertEquals(false, node0.hasOneChild());
//       assertEquals(false, node0.isVar());
//       assertEquals(true, node0.mayMutateGlobalStateOrThrow());
//       assertEquals(false, node0.isAdd());
//       assertEquals(false, node0.isFunction());
//       assertEquals(false, node0.isNoSideEffectsCall());
//       assertEquals(false, node0.isOptionalArg());
//       assertEquals(false, node0.isExprResult());
//       assertEquals(false, node0.isOnlyModifiesArgumentsCall());
//       assertEquals(false, node0.isDebugger());
//       assertEquals(false, node0.isCase());
//       assertEquals(false, node0.isAssign());
//       assertEquals(false, node0.isFor());
//       assertEquals(false, node0.isStringKey());
//       assertEquals(false, node0.isGetElem());
//       assertEquals(false, node0.isBreak());
//       assertEquals(false, node0.isNE());
//       
//       JSType jSType0 = null;
//       boolean boolean0 = true;
//       Scope.Var scope_Var0 = scope0.declare(string0, node0, jSType0, compilerInput0, boolean0);
//       assertNotNull(scope_Var0);
//       assertEquals(0.0, compiler0.getProgress(), 0.01D);
//       assertEquals(true, compiler0.hasErrors());
//       assertEquals(0, compiler0.getWarningCount());
//       assertEquals(1, compiler0.getErrorCount());
//       assertEquals(false, compiler0.acceptConstKeyword());
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
//       assertEquals(false, compiler0.isTypeCheckingEnabled());
//       assertEquals(false, compiler0.isIdeMode());
//       assertEquals(1, scope0.getVarCount());
//       assertEquals(true, scope0.isGlobal());
//       assertEquals(false, scope0.isLocal());
//       assertEquals(false, node0.isTrue());
//       assertEquals(false, node0.isThis());
//       assertEquals(false, node0.isWhile());
//       assertEquals(-1, node0.getLineno());
//       assertEquals(false, node0.isInc());
//       assertEquals(false, node0.isIn());
//       assertEquals(false, node0.isInstanceOf());
//       assertEquals(false, node0.isEmpty());
//       assertEquals(false, node0.isLocalResultCall());
//       assertEquals(0, node0.getSideEffectFlags());
//       assertEquals(false, node0.isIf());
//       assertEquals(false, node0.isContinue());
//       assertEquals(false, node0.isComma());
//       assertEquals(false, node0.isLabelName());
//       assertEquals(false, node0.isAnd());
//       assertEquals(false, node0.wasEmptyNode());
//       assertEquals(false, node0.isTry());
//       assertEquals(true, node0.isScript());
//       assertEquals(false, node0.isGetterDef());
//       assertEquals(false, node0.isOr());
//       assertEquals(false, node0.isHook());
//       assertEquals(false, node0.isDefaultCase());
//       assertEquals(0, node0.getChangeTime());
//       assertEquals(false, node0.hasMoreThanOneChild());
//       assertEquals(false, node0.isName());
//       assertEquals(false, node0.isQuotedString());
//       assertEquals(false, node0.isParamList());
//       assertEquals(false, node0.isThrow());
//       assertEquals(false, node0.hasChildren());
//       assertEquals(false, node0.isReturn());
//       assertEquals(false, node0.isNot());
//       assertEquals(false, node0.isObjectLit());
//       assertEquals(false, node0.isDo());
//       assertEquals(0, node0.getLength());
//       assertEquals(false, node0.isFromExterns());
//       assertEquals(false, node0.isNull());
//       assertEquals(true, node0.mayMutateArguments());
//       assertEquals(132, node0.getType());
//       assertEquals(false, node0.isCall());
//       assertEquals(false, node0.isArrayLit());
//       assertEquals(false, node0.isNumber());
//       assertEquals("[testcode]", node0.getSourceFileName());
//       assertEquals(false, node0.isVoid());
//       assertEquals(false, node0.isBlock());
//       assertEquals(false, node0.isGetProp());
//       assertEquals(false, node0.isSetterDef());
//       assertEquals(false, node0.isCast());
//       assertEquals(false, node0.isString());
//       assertEquals(false, node0.isFalse());
//       assertEquals(false, node0.isDec());
//       assertEquals(false, node0.isNew());
//       assertEquals(0, node0.getChildCount());
//       assertEquals(false, node0.isVarArgs());
//       assertEquals(false, node0.isRegExp());
//       assertEquals(false, node0.isTypeOf());
//       assertEquals(false, node0.isWith());
//       assertEquals(false, node0.isCatch());
//       assertEquals(false, node0.isAssignAdd());
//       assertEquals(-1, node0.getCharno());
//       assertEquals(-1, node0.getSourcePosition());
//       assertEquals(false, node0.isSyntheticBlock());
//       assertEquals(false, node0.isSwitch());
//       assertEquals(false, node0.isOnlyModifiesThisCall());
//       assertEquals(false, node0.isLabel());
//       assertEquals(false, node0.isDelProp());
//       assertEquals(false, node0.hasOneChild());
//       assertEquals(false, node0.isVar());
//       assertEquals(true, node0.mayMutateGlobalStateOrThrow());
//       assertEquals(false, node0.isAdd());
//       assertEquals(false, node0.isFunction());
//       assertEquals(false, node0.isNoSideEffectsCall());
//       assertEquals(false, node0.isOptionalArg());
//       assertEquals(false, node0.isExprResult());
//       assertEquals(false, node0.isOnlyModifiesArgumentsCall());
//       assertEquals(false, node0.isDebugger());
//       assertEquals(false, node0.isCase());
//       assertEquals(false, node0.isAssign());
//       assertEquals(false, node0.isFor());
//       assertEquals(false, node0.isStringKey());
//       assertEquals(false, node0.isGetElem());
//       assertEquals(false, node0.isBreak());
//       assertEquals(false, node0.isNE());
//       
//       Scope.Var scope_Var1 = typeValidator0.expectUndeclaredVariable(string0, compilerInput0, node0, node0, scope_Var0, string0, jSType0);
//       assertNotNull(scope_Var1);
//       assertSame(scope_Var1, scope_Var0);
//       assertSame(scope_Var0, scope_Var1);
//       assertEquals(0.0, compiler0.getProgress(), 0.01D);
//       assertEquals(true, compiler0.hasErrors());
//       assertEquals(0, compiler0.getWarningCount());
//       assertEquals(1, compiler0.getErrorCount());
//       assertEquals(false, compiler0.acceptConstKeyword());
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
//       assertEquals(false, compiler0.isTypeCheckingEnabled());
//       assertEquals(false, compiler0.isIdeMode());
//       assertEquals(1, scope0.getVarCount());
//       assertEquals(true, scope0.isGlobal());
//       assertEquals(false, scope0.isLocal());
//       assertEquals(false, node0.isTrue());
//       assertEquals(false, node0.isThis());
//       assertEquals(false, node0.isWhile());
//       assertEquals(-1, node0.getLineno());
//       assertEquals(false, node0.isInc());
//       assertEquals(false, node0.isIn());
//       assertEquals(false, node0.isInstanceOf());
//       assertEquals(false, node0.isEmpty());
//       assertEquals(false, node0.isLocalResultCall());
//       assertEquals(0, node0.getSideEffectFlags());
//       assertEquals(false, node0.isIf());
//       assertEquals(false, node0.isContinue());
//       assertEquals(false, node0.isComma());
//       assertEquals(false, node0.isLabelName());
//       assertEquals(false, node0.isAnd());
//       assertEquals(false, node0.wasEmptyNode());
//       assertEquals(false, node0.isTry());
//       assertEquals(true, node0.isScript());
//       assertEquals(false, node0.isGetterDef());
//       assertEquals(false, node0.isOr());
//       assertEquals(false, node0.isHook());
//       assertEquals(false, node0.isDefaultCase());
//       assertEquals(0, node0.getChangeTime());
//       assertEquals(false, node0.hasMoreThanOneChild());
//       assertEquals(false, node0.isName());
//       assertEquals(false, node0.isQuotedString());
//       assertEquals(false, node0.isParamList());
//       assertEquals(false, node0.isThrow());
//       assertEquals(false, node0.hasChildren());
//       assertEquals(false, node0.isReturn());
//       assertEquals(false, node0.isNot());
//       assertEquals(false, node0.isObjectLit());
//       assertEquals(false, node0.isDo());
//       assertEquals(0, node0.getLength());
//       assertEquals(false, node0.isFromExterns());
//       assertEquals(false, node0.isNull());
//       assertEquals(true, node0.mayMutateArguments());
//       assertEquals(132, node0.getType());
//       assertEquals(false, node0.isCall());
//       assertEquals(false, node0.isArrayLit());
//       assertEquals(false, node0.isNumber());
//       assertEquals("[testcode]", node0.getSourceFileName());
//       assertEquals(false, node0.isVoid());
//       assertEquals(false, node0.isBlock());
//       assertEquals(false, node0.isGetProp());
//       assertEquals(false, node0.isSetterDef());
//       assertEquals(false, node0.isCast());
//       assertEquals(false, node0.isString());
//       assertEquals(false, node0.isFalse());
//       assertEquals(false, node0.isDec());
//       assertEquals(false, node0.isNew());
//       assertEquals(0, node0.getChildCount());
//       assertEquals(false, node0.isVarArgs());
//       assertEquals(false, node0.isRegExp());
//       assertEquals(false, node0.isTypeOf());
//       assertEquals(false, node0.isWith());
//       assertEquals(false, node0.isCatch());
//       assertEquals(false, node0.isAssignAdd());
//       assertEquals(-1, node0.getCharno());
//       assertEquals(-1, node0.getSourcePosition());
//       assertEquals(false, node0.isSyntheticBlock());
//       assertEquals(false, node0.isSwitch());
//       assertEquals(false, node0.isOnlyModifiesThisCall());
//       assertEquals(false, node0.isLabel());
//       assertEquals(false, node0.isDelProp());
//       assertEquals(false, node0.hasOneChild());
//       assertEquals(false, node0.isVar());
//       assertEquals(true, node0.mayMutateGlobalStateOrThrow());
//       assertEquals(false, node0.isAdd());
//       assertEquals(false, node0.isFunction());
//       assertEquals(false, node0.isNoSideEffectsCall());
//       assertEquals(false, node0.isOptionalArg());
//       assertEquals(false, node0.isExprResult());
//       assertEquals(false, node0.isOnlyModifiesArgumentsCall());
//       assertEquals(false, node0.isDebugger());
//       assertEquals(false, node0.isCase());
//       assertEquals(false, node0.isAssign());
//       assertEquals(false, node0.isFor());
//       assertEquals(false, node0.isStringKey());
//       assertEquals(false, node0.isGetElem());
//       assertEquals(false, node0.isBreak());
//       assertEquals(false, node0.isNE());
//   }

  @Test
  public void test07() {}
//   @Test
//   public void test07()  throws Throwable  {
//       Compiler compiler0 = new Compiler();
//       assertNotNull(compiler0);
//       assertEquals(0.0, compiler0.getProgress(), 0.01D);
//       
//       String string0 = "&";
//       Node node0 = compiler0.parseTestCode(string0);
//       assertNotNull(node0);
//       assertEquals(0, compiler0.getWarningCount());
//       assertEquals(true, compiler0.hasErrors());
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
//       assertEquals(0.0, compiler0.getProgress(), 0.01D);
//       assertEquals(false, compiler0.isTypeCheckingEnabled());
//       assertEquals(false, compiler0.isIdeMode());
//       assertEquals(false, compiler0.acceptConstKeyword());
//       assertEquals(1, compiler0.getErrorCount());
//       assertEquals(false, node0.isInstanceOf());
//       assertEquals(false, node0.isSetterDef());
//       assertEquals(false, node0.isTypeOf());
//       assertEquals(false, node0.isFor());
//       assertEquals(false, node0.isAssignAdd());
//       assertEquals(false, node0.wasEmptyNode());
//       assertEquals(false, node0.isNot());
//       assertEquals(false, node0.hasChildren());
//       assertEquals(-1, node0.getCharno());
//       assertEquals(-1, node0.getLineno());
//       assertEquals(false, node0.isOr());
//       assertEquals(false, node0.isReturn());
//       assertEquals(false, node0.isDec());
//       assertEquals(false, node0.hasMoreThanOneChild());
//       assertEquals(false, node0.isBreak());
//       assertEquals(false, node0.isHook());
//       assertEquals(false, node0.hasOneChild());
//       assertEquals(0, node0.getSideEffectFlags());
//       assertEquals(false, node0.isNew());
//       assertEquals(false, node0.isLabel());
//       assertEquals(false, node0.isCall());
//       assertEquals(false, node0.isWhile());
//       assertEquals(true, node0.mayMutateGlobalStateOrThrow());
//       assertEquals(false, node0.isOptionalArg());
//       assertEquals(true, node0.mayMutateArguments());
//       assertEquals(false, node0.isAnd());
//       assertEquals(false, node0.isEmpty());
//       assertEquals(false, node0.isGetProp());
//       assertEquals(0, node0.getChangeTime());
//       assertEquals(false, node0.isComma());
//       assertEquals(false, node0.isFalse());
//       assertEquals(false, node0.isObjectLit());
//       assertEquals(false, node0.isDefaultCase());
//       assertEquals(false, node0.isQuotedString());
//       assertEquals(132, node0.getType());
//       assertEquals(false, node0.isNE());
//       assertEquals(false, node0.isSwitch());
//       assertEquals(false, node0.isNull());
//       assertEquals(false, node0.isRegExp());
//       assertEquals(false, node0.isThis());
//       assertEquals(false, node0.isStringKey());
//       assertEquals(false, node0.isTrue());
//       assertEquals(false, node0.isAdd());
//       assertEquals(false, node0.isOnlyModifiesArgumentsCall());
//       assertEquals(false, node0.isName());
//       assertEquals(false, node0.isInc());
//       assertEquals("[testcode]", node0.getSourceFileName());
//       assertEquals(false, node0.isNoSideEffectsCall());
//       assertEquals(0, node0.getLength());
//       assertEquals(false, node0.isCase());
//       assertEquals(false, node0.isDebugger());
//       assertEquals(false, node0.isNumber());
//       assertEquals(false, node0.isThrow());
//       assertEquals(false, node0.isContinue());
//       assertEquals(false, node0.isLabelName());
//       assertEquals(false, node0.isSyntheticBlock());
//       assertEquals(-1, node0.getSourcePosition());
//       assertEquals(false, node0.isIn());
//       assertEquals(false, node0.isString());
//       assertEquals(false, node0.isCatch());
//       assertEquals(false, node0.isGetterDef());
//       assertEquals(false, node0.isBlock());
//       assertEquals(false, node0.isIf());
//       assertEquals(false, node0.isDelProp());
//       assertEquals(false, node0.isExprResult());
//       assertEquals(false, node0.isTry());
//       assertEquals(false, node0.isFunction());
//       assertEquals(false, node0.isCast());
//       assertEquals(0, node0.getChildCount());
//       assertEquals(false, node0.isVar());
//       assertEquals(false, node0.isDo());
//       assertEquals(false, node0.isParamList());
//       assertEquals(false, node0.isLocalResultCall());
//       assertEquals(false, node0.isFromExterns());
//       assertEquals(false, node0.isGetElem());
//       assertEquals(false, node0.isAssign());
//       assertEquals(false, node0.isVoid());
//       assertEquals(true, node0.isScript());
//       assertEquals(false, node0.isWith());
//       assertEquals(false, node0.isVarArgs());
//       assertEquals(false, node0.isArrayLit());
//       assertEquals(false, node0.isOnlyModifiesThisCall());
//       
//       TypeValidator typeValidator0 = new TypeValidator(compiler0);
//       assertNotNull(typeValidator0);
//       assertEquals(0, compiler0.getWarningCount());
//       assertEquals(true, compiler0.hasErrors());
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
//       assertEquals(0.0, compiler0.getProgress(), 0.01D);
//       assertEquals(false, compiler0.isTypeCheckingEnabled());
//       assertEquals(false, compiler0.isIdeMode());
//       assertEquals(false, compiler0.acceptConstKeyword());
//       assertEquals(1, compiler0.getErrorCount());
//       
//       CheckLevel checkLevel0 = CheckLevel.ERROR;
//       CheckUnreachableCode checkUnreachableCode0 = new CheckUnreachableCode(compiler0, checkLevel0);
//       assertNotNull(checkUnreachableCode0);
//       assertEquals(0, compiler0.getWarningCount());
//       assertEquals(true, compiler0.hasErrors());
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
//       assertEquals(0.0, compiler0.getProgress(), 0.01D);
//       assertEquals(false, compiler0.isTypeCheckingEnabled());
//       assertEquals(false, compiler0.isIdeMode());
//       assertEquals(false, compiler0.acceptConstKeyword());
//       assertEquals(1, compiler0.getErrorCount());
//       
//       NodeTraversal nodeTraversal0 = new NodeTraversal((AbstractCompiler) compiler0, (NodeTraversal.Callback) checkUnreachableCode0);
//       assertNotNull(nodeTraversal0);
//       assertEquals(0, compiler0.getWarningCount());
//       assertEquals(true, compiler0.hasErrors());
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
//       assertEquals(0.0, compiler0.getProgress(), 0.01D);
//       assertEquals(false, compiler0.isTypeCheckingEnabled());
//       assertEquals(false, compiler0.isIdeMode());
//       assertEquals(false, compiler0.acceptConstKeyword());
//       assertEquals(1, compiler0.getErrorCount());
//       assertEquals(0, nodeTraversal0.getLineNumber());
//       assertEquals("", nodeTraversal0.getSourceName());
//       
//       ErrorReporter errorReporter0 = null;
//       JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(errorReporter0);
//       assertNotNull(jSTypeRegistry0);
//       assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
//       
//       JSTypeNative jSTypeNative0 = JSTypeNative.FUNCTION_FUNCTION_TYPE;
//       FunctionType functionType0 = (FunctionType)jSTypeRegistry0.getNativeType(jSTypeNative0);
//       assertNotNull(functionType0);
//       assertEquals(false, functionType0.isAllType());
//       assertEquals(false, functionType0.isInterface());
//       assertEquals(false, functionType0.isUnionType());
//       assertEquals(2147483647, functionType0.getMaxArguments());
//       assertEquals(false, functionType0.isEnumElementType());
//       assertEquals(false, functionType0.isNominalType());
//       assertEquals(false, functionType0.isEnumType());
//       assertEquals(false, functionType0.isNoType());
//       assertEquals(false, functionType0.isOrdinaryFunction());
//       assertEquals(false, functionType0.isRecordType());
//       assertEquals(true, functionType0.isNominalConstructor());
//       assertEquals(false, functionType0.isCheckedUnknownType());
//       assertEquals(false, functionType0.isVoidType());
//       assertEquals(false, functionType0.isResolved());
//       assertEquals(true, functionType0.hasInstanceType());
//       assertEquals(true, functionType0.isConstructor());
//       assertEquals(false, functionType0.isNumberValueType());
//       assertEquals(false, functionType0.isStringValueType());
//       assertEquals(0, functionType0.getExtendedInterfacesCount());
//       assertEquals(true, functionType0.canBeCalled());
//       assertEquals(false, functionType0.isBooleanValueType());
//       assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
//       assertEquals(true, functionType0.hasCachedValues());
//       assertEquals(true, functionType0.isFunctionType());
//       assertEquals(false, functionType0.isNoObjectType());
//       assertEquals(false, functionType0.isReturnTypeInferred());
//       assertEquals(false, functionType0.isNullType());
//       assertEquals(false, functionType0.isTemplatizedType());
//       assertEquals(false, functionType0.isTemplateType());
//       assertEquals(false, functionType0.isNoResolvedType());
//       assertEquals(false, functionType0.isFunctionPrototypeType());
//       assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
//       
//       FunctionType functionType1 = JSType.toMaybeFunctionType((JSType) functionType0);
//       assertNotNull(functionType1);
//       assertSame(functionType0, functionType1);
//       assertSame(functionType1, functionType0);
//       assertEquals(false, functionType0.isAllType());
//       assertEquals(false, functionType0.isInterface());
//       assertEquals(false, functionType0.isUnionType());
//       assertEquals(2147483647, functionType0.getMaxArguments());
//       assertEquals(false, functionType0.isEnumElementType());
//       assertEquals(false, functionType0.isNominalType());
//       assertEquals(false, functionType0.isEnumType());
//       assertEquals(false, functionType0.isNoType());
//       assertEquals(false, functionType0.isOrdinaryFunction());
//       assertEquals(false, functionType0.isRecordType());
//       assertEquals(true, functionType0.isNominalConstructor());
//       assertEquals(false, functionType0.isCheckedUnknownType());
//       assertEquals(false, functionType0.isVoidType());
//       assertEquals(false, functionType0.isResolved());
//       assertEquals(true, functionType0.hasInstanceType());
//       assertEquals(true, functionType0.isConstructor());
//       assertEquals(false, functionType0.isNumberValueType());
//       assertEquals(false, functionType0.isStringValueType());
//       assertEquals(0, functionType0.getExtendedInterfacesCount());
//       assertEquals(true, functionType0.canBeCalled());
//       assertEquals(false, functionType0.isBooleanValueType());
//       assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
//       assertEquals(true, functionType0.hasCachedValues());
//       assertEquals(true, functionType0.isFunctionType());
//       assertEquals(false, functionType0.isNoObjectType());
//       assertEquals(false, functionType0.isReturnTypeInferred());
//       assertEquals(false, functionType0.isNullType());
//       assertEquals(false, functionType0.isTemplatizedType());
//       assertEquals(false, functionType0.isTemplateType());
//       assertEquals(false, functionType0.isNoResolvedType());
//       assertEquals(false, functionType0.isFunctionPrototypeType());
//       assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
//       assertEquals(false, functionType1.isBooleanValueType());
//       assertEquals(false, functionType1.isAllType());
//       assertEquals(true, functionType1.isFunctionType());
//       assertEquals(false, functionType1.isCheckedUnknownType());
//       assertEquals(true, functionType1.isNominalConstructor());
//       assertEquals(0, functionType1.getExtendedInterfacesCount());
//       assertEquals(false, functionType1.isUnionType());
//       assertEquals(BooleanLiteralSet.TRUE, functionType1.getPossibleToBooleanOutcomes());
//       assertEquals(false, functionType1.isTemplateType());
//       assertEquals(false, functionType1.isReturnTypeInferred());
//       assertEquals(true, functionType1.canBeCalled());
//       assertEquals(false, functionType1.isOrdinaryFunction());
//       assertEquals(true, functionType1.isConstructor());
//       assertEquals(true, functionType1.hasCachedValues());
//       assertEquals(false, functionType1.isNominalType());
//       assertEquals(false, functionType1.isInterface());
//       assertEquals(false, functionType1.isNumberValueType());
//       assertEquals(false, functionType1.isStringValueType());
//       assertEquals(false, functionType1.isNoResolvedType());
//       assertEquals(true, functionType1.hasInstanceType());
//       assertEquals(false, functionType1.isEnumType());
//       assertEquals(false, functionType1.isNoType());
//       assertEquals(false, functionType1.isEnumElementType());
//       assertEquals(false, functionType1.isNullType());
//       assertEquals(false, functionType1.isTemplatizedType());
//       assertEquals(false, functionType1.isFunctionPrototypeType());
//       assertEquals(false, functionType1.isRecordType());
//       assertEquals(false, functionType1.isVoidType());
//       assertEquals(false, functionType1.isNoObjectType());
//       assertEquals(false, functionType1.isResolved());
//       assertEquals(2147483647, functionType1.getMaxArguments());
//       
//       typeValidator0.expectCanCast(nodeTraversal0, node0, functionType0, functionType1);
//       assertSame(functionType0, functionType1);
//       assertSame(functionType1, functionType0);
//       assertEquals(0, compiler0.getWarningCount());
//       assertEquals(true, compiler0.hasErrors());
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
//       assertEquals(0.0, compiler0.getProgress(), 0.01D);
//       assertEquals(false, compiler0.isTypeCheckingEnabled());
//       assertEquals(false, compiler0.isIdeMode());
//       assertEquals(false, compiler0.acceptConstKeyword());
//       assertEquals(1, compiler0.getErrorCount());
//       assertEquals(false, functionType0.isAllType());
//       assertEquals(false, functionType0.isInterface());
//       assertEquals(false, functionType0.isUnionType());
//       assertEquals(2147483647, functionType0.getMaxArguments());
//       assertEquals(false, functionType0.isEnumElementType());
//       assertEquals(false, functionType0.isNominalType());
//       assertEquals(false, functionType0.isEnumType());
//       assertEquals(false, functionType0.isNoType());
//       assertEquals(false, functionType0.isOrdinaryFunction());
//       assertEquals(false, functionType0.isRecordType());
//       assertEquals(true, functionType0.isNominalConstructor());
//       assertEquals(false, functionType0.isCheckedUnknownType());
//       assertEquals(false, functionType0.isVoidType());
//       assertEquals(false, functionType0.isResolved());
//       assertEquals(true, functionType0.hasInstanceType());
//       assertEquals(true, functionType0.isConstructor());
//       assertEquals(false, functionType0.isNumberValueType());
//       assertEquals(false, functionType0.isStringValueType());
//       assertEquals(0, functionType0.getExtendedInterfacesCount());
//       assertEquals(true, functionType0.canBeCalled());
//       assertEquals(false, functionType0.isBooleanValueType());
//       assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
//       assertEquals(true, functionType0.hasCachedValues());
//       assertEquals(true, functionType0.isFunctionType());
//       assertEquals(false, functionType0.isNoObjectType());
//       assertEquals(false, functionType0.isReturnTypeInferred());
//       assertEquals(false, functionType0.isNullType());
//       assertEquals(false, functionType0.isTemplatizedType());
//       assertEquals(false, functionType0.isTemplateType());
//       assertEquals(false, functionType0.isNoResolvedType());
//       assertEquals(false, functionType0.isFunctionPrototypeType());
//       assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
//       assertEquals(false, node0.isInstanceOf());
//       assertEquals(false, node0.isSetterDef());
//       assertEquals(false, node0.isTypeOf());
//       assertEquals(false, node0.isFor());
//       assertEquals(false, node0.isAssignAdd());
//       assertEquals(false, node0.wasEmptyNode());
//       assertEquals(false, node0.isNot());
//       assertEquals(false, node0.hasChildren());
//       assertEquals(-1, node0.getCharno());
//       assertEquals(-1, node0.getLineno());
//       assertEquals(false, node0.isOr());
//       assertEquals(false, node0.isReturn());
//       assertEquals(false, node0.isDec());
//       assertEquals(false, node0.hasMoreThanOneChild());
//       assertEquals(false, node0.isBreak());
//       assertEquals(false, node0.isHook());
//       assertEquals(false, node0.hasOneChild());
//       assertEquals(0, node0.getSideEffectFlags());
//       assertEquals(false, node0.isNew());
//       assertEquals(false, node0.isLabel());
//       assertEquals(false, node0.isCall());
//       assertEquals(false, node0.isWhile());
//       assertEquals(true, node0.mayMutateGlobalStateOrThrow());
//       assertEquals(false, node0.isOptionalArg());
//       assertEquals(true, node0.mayMutateArguments());
//       assertEquals(false, node0.isAnd());
//       assertEquals(false, node0.isEmpty());
//       assertEquals(false, node0.isGetProp());
//       assertEquals(0, node0.getChangeTime());
//       assertEquals(false, node0.isComma());
//       assertEquals(false, node0.isFalse());
//       assertEquals(false, node0.isObjectLit());
//       assertEquals(false, node0.isDefaultCase());
//       assertEquals(false, node0.isQuotedString());
//       assertEquals(132, node0.getType());
//       assertEquals(false, node0.isNE());
//       assertEquals(false, node0.isSwitch());
//       assertEquals(false, node0.isNull());
//       assertEquals(false, node0.isRegExp());
//       assertEquals(false, node0.isThis());
//       assertEquals(false, node0.isStringKey());
//       assertEquals(false, node0.isTrue());
//       assertEquals(false, node0.isAdd());
//       assertEquals(false, node0.isOnlyModifiesArgumentsCall());
//       assertEquals(false, node0.isName());
//       assertEquals(false, node0.isInc());
//       assertEquals("[testcode]", node0.getSourceFileName());
//       assertEquals(false, node0.isNoSideEffectsCall());
//       assertEquals(0, node0.getLength());
//       assertEquals(false, node0.isCase());
//       assertEquals(false, node0.isDebugger());
//       assertEquals(false, node0.isNumber());
//       assertEquals(false, node0.isThrow());
//       assertEquals(false, node0.isContinue());
//       assertEquals(false, node0.isLabelName());
//       assertEquals(false, node0.isSyntheticBlock());
//       assertEquals(-1, node0.getSourcePosition());
//       assertEquals(false, node0.isIn());
//       assertEquals(false, node0.isString());
//       assertEquals(false, node0.isCatch());
//       assertEquals(false, node0.isGetterDef());
//       assertEquals(false, node0.isBlock());
//       assertEquals(false, node0.isIf());
//       assertEquals(false, node0.isDelProp());
//       assertEquals(false, node0.isExprResult());
//       assertEquals(false, node0.isTry());
//       assertEquals(false, node0.isFunction());
//       assertEquals(false, node0.isCast());
//       assertEquals(0, node0.getChildCount());
//       assertEquals(false, node0.isVar());
//       assertEquals(false, node0.isDo());
//       assertEquals(false, node0.isParamList());
//       assertEquals(false, node0.isLocalResultCall());
//       assertEquals(false, node0.isFromExterns());
//       assertEquals(false, node0.isGetElem());
//       assertEquals(false, node0.isAssign());
//       assertEquals(false, node0.isVoid());
//       assertEquals(true, node0.isScript());
//       assertEquals(false, node0.isWith());
//       assertEquals(false, node0.isVarArgs());
//       assertEquals(false, node0.isArrayLit());
//       assertEquals(false, node0.isOnlyModifiesThisCall());
//       assertEquals(false, functionType1.isBooleanValueType());
//       assertEquals(false, functionType1.isAllType());
//       assertEquals(true, functionType1.isFunctionType());
//       assertEquals(false, functionType1.isCheckedUnknownType());
//       assertEquals(true, functionType1.isNominalConstructor());
//       assertEquals(0, functionType1.getExtendedInterfacesCount());
//       assertEquals(false, functionType1.isUnionType());
//       assertEquals(BooleanLiteralSet.TRUE, functionType1.getPossibleToBooleanOutcomes());
//       assertEquals(false, functionType1.isTemplateType());
//       assertEquals(false, functionType1.isReturnTypeInferred());
//       assertEquals(true, functionType1.canBeCalled());
//       assertEquals(false, functionType1.isOrdinaryFunction());
//       assertEquals(true, functionType1.isConstructor());
//       assertEquals(true, functionType1.hasCachedValues());
//       assertEquals(false, functionType1.isNominalType());
//       assertEquals(false, functionType1.isInterface());
//       assertEquals(false, functionType1.isNumberValueType());
//       assertEquals(false, functionType1.isStringValueType());
//       assertEquals(false, functionType1.isNoResolvedType());
//       assertEquals(true, functionType1.hasInstanceType());
//       assertEquals(false, functionType1.isEnumType());
//       assertEquals(false, functionType1.isNoType());
//       assertEquals(false, functionType1.isEnumElementType());
//       assertEquals(false, functionType1.isNullType());
//       assertEquals(false, functionType1.isTemplatizedType());
//       assertEquals(false, functionType1.isFunctionPrototypeType());
//       assertEquals(false, functionType1.isRecordType());
//       assertEquals(false, functionType1.isVoidType());
//       assertEquals(false, functionType1.isNoObjectType());
//       assertEquals(false, functionType1.isResolved());
//       assertEquals(2147483647, functionType1.getMaxArguments());
//       assertEquals(0, nodeTraversal0.getLineNumber());
//       assertEquals("", nodeTraversal0.getSourceName());
//   }

  @Test
  public void test08() {}
//   @Test
//   public void test08()  throws Throwable  {
//       Compiler compiler0 = new Compiler();
//       assertNotNull(compiler0);
//       assertEquals(0.0, compiler0.getProgress(), 0.01D);
//       
//       String string0 = "&";
//       Node node0 = compiler0.parseTestCode(string0);
//       assertNotNull(node0);
//       assertEquals(0.0, compiler0.getProgress(), 0.01D);
//       assertEquals(0, compiler0.getWarningCount());
//       assertEquals(false, compiler0.isTypeCheckingEnabled());
//       assertEquals(true, compiler0.hasErrors());
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
//       assertEquals(1, compiler0.getErrorCount());
//       assertEquals(false, compiler0.isIdeMode());
//       assertEquals(false, compiler0.acceptConstKeyword());
//       assertEquals(false, node0.isVar());
//       assertEquals(false, node0.isStringKey());
//       assertEquals(false, node0.isOnlyModifiesArgumentsCall());
//       assertEquals(0, node0.getSideEffectFlags());
//       assertEquals(false, node0.isBreak());
//       assertEquals(false, node0.isVarArgs());
//       assertEquals(false, node0.isThis());
//       assertEquals(false, node0.isRegExp());
//       assertEquals(false, node0.isCatch());
//       assertEquals(false, node0.isObjectLit());
//       assertEquals(false, node0.isReturn());
//       assertEquals(false, node0.isLocalResultCall());
//       assertEquals(false, node0.isArrayLit());
//       assertEquals(false, node0.isNot());
//       assertEquals(false, node0.isGetterDef());
//       assertEquals(false, node0.isParamList());
//       assertEquals(false, node0.isOr());
//       assertEquals(false, node0.isSetterDef());
//       assertEquals(false, node0.isContinue());
//       assertEquals(false, node0.isAnd());
//       assertEquals(false, node0.isHook());
//       assertEquals(0, node0.getChangeTime());
//       assertEquals(false, node0.isQuotedString());
//       assertEquals(false, node0.isCase());
//       assertEquals(false, node0.isGetElem());
//       assertEquals(false, node0.isDefaultCase());
//       assertEquals(false, node0.isNull());
//       assertEquals(false, node0.isNew());
//       assertEquals(true, node0.isScript());
//       assertEquals(false, node0.isFunction());
//       assertEquals(false, node0.isOptionalArg());
//       assertEquals(false, node0.hasOneChild());
//       assertEquals(false, node0.isNoSideEffectsCall());
//       assertEquals(false, node0.isEmpty());
//       assertEquals(false, node0.isName());
//       assertEquals(false, node0.isFor());
//       assertEquals(false, node0.isDo());
//       assertEquals(false, node0.isNumber());
//       assertEquals(false, node0.hasChildren());
//       assertEquals(true, node0.mayMutateGlobalStateOrThrow());
//       assertEquals(false, node0.isSwitch());
//       assertEquals(false, node0.isTry());
//       assertEquals(false, node0.isBlock());
//       assertEquals(false, node0.isDelProp());
//       assertEquals(false, node0.isDebugger());
//       assertEquals(false, node0.hasMoreThanOneChild());
//       assertEquals(-1, node0.getLineno());
//       assertEquals(false, node0.isThrow());
//       assertEquals(false, node0.isWhile());
//       assertEquals("[testcode]", node0.getSourceFileName());
//       assertEquals(0, node0.getLength());
//       assertEquals(false, node0.isCall());
//       assertEquals(false, node0.isAssignAdd());
//       assertEquals(false, node0.isVoid());
//       assertEquals(false, node0.isIf());
//       assertEquals(false, node0.isAssign());
//       assertEquals(false, node0.isFalse());
//       assertEquals(false, node0.isGetProp());
//       assertEquals(false, node0.isLabelName());
//       assertEquals(false, node0.isInstanceOf());
//       assertEquals(false, node0.isNE());
//       assertEquals(false, node0.isWith());
//       assertEquals(-1, node0.getCharno());
//       assertEquals(false, node0.isDec());
//       assertEquals(false, node0.isOnlyModifiesThisCall());
//       assertEquals(false, node0.isSyntheticBlock());
//       assertEquals(132, node0.getType());
//       assertEquals(false, node0.isTrue());
//       assertEquals(false, node0.isString());
//       assertEquals(false, node0.isIn());
//       assertEquals(false, node0.isTypeOf());
//       assertEquals(false, node0.isAdd());
//       assertEquals(false, node0.isLabel());
//       assertEquals(true, node0.mayMutateArguments());
//       assertEquals(false, node0.wasEmptyNode());
//       assertEquals(0, node0.getChildCount());
//       assertEquals(false, node0.isCast());
//       assertEquals(false, node0.isExprResult());
//       assertEquals(-1, node0.getSourcePosition());
//       assertEquals(false, node0.isComma());
//       assertEquals(false, node0.isInc());
//       assertEquals(false, node0.isFromExterns());
//       
//       TypeValidator typeValidator0 = new TypeValidator(compiler0);
//       assertNotNull(typeValidator0);
//       assertEquals(0.0, compiler0.getProgress(), 0.01D);
//       assertEquals(0, compiler0.getWarningCount());
//       assertEquals(false, compiler0.isTypeCheckingEnabled());
//       assertEquals(true, compiler0.hasErrors());
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
//       assertEquals(1, compiler0.getErrorCount());
//       assertEquals(false, compiler0.isIdeMode());
//       assertEquals(false, compiler0.acceptConstKeyword());
//       
//       CheckLevel checkLevel0 = CheckLevel.ERROR;
//       CheckUnreachableCode checkUnreachableCode0 = new CheckUnreachableCode(compiler0, checkLevel0);
//       assertNotNull(checkUnreachableCode0);
//       assertEquals(0.0, compiler0.getProgress(), 0.01D);
//       assertEquals(0, compiler0.getWarningCount());
//       assertEquals(false, compiler0.isTypeCheckingEnabled());
//       assertEquals(true, compiler0.hasErrors());
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
//       assertEquals(1, compiler0.getErrorCount());
//       assertEquals(false, compiler0.isIdeMode());
//       assertEquals(false, compiler0.acceptConstKeyword());
//       
//       NodeTraversal nodeTraversal0 = new NodeTraversal((AbstractCompiler) compiler0, (NodeTraversal.Callback) checkUnreachableCode0);
//       assertNotNull(nodeTraversal0);
//       assertEquals(0.0, compiler0.getProgress(), 0.01D);
//       assertEquals(0, compiler0.getWarningCount());
//       assertEquals(false, compiler0.isTypeCheckingEnabled());
//       assertEquals(true, compiler0.hasErrors());
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
//       assertEquals(1, compiler0.getErrorCount());
//       assertEquals(false, compiler0.isIdeMode());
//       assertEquals(false, compiler0.acceptConstKeyword());
//       assertEquals(0, nodeTraversal0.getLineNumber());
//       assertEquals("", nodeTraversal0.getSourceName());
//       
//       ErrorReporter errorReporter0 = null;
//       JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(errorReporter0);
//       assertNotNull(jSTypeRegistry0);
//       assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
//       
//       JSTypeNative jSTypeNative0 = JSTypeNative.FUNCTION_INSTANCE_TYPE;
//       JSType jSType0 = jSTypeRegistry0.getNativeType(jSTypeNative0);
//       assertNotNull(jSType0);
//       assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
//       assertEquals(false, jSType0.isNoObjectType());
//       assertEquals(false, jSType0.isOrdinaryFunction());
//       assertEquals(true, jSType0.isNominalConstructor());
//       assertEquals(false, jSType0.isNumberValueType());
//       assertEquals(false, jSType0.isTemplatizedType());
//       assertEquals(true, jSType0.isConstructor());
//       assertEquals(false, jSType0.isVoidType());
//       assertEquals(false, jSType0.isRecordType());
//       assertEquals(false, jSType0.isResolved());
//       assertEquals(false, jSType0.isUnionType());
//       assertEquals(false, jSType0.isNoResolvedType());
//       assertEquals(false, jSType0.isStringValueType());
//       assertEquals(false, jSType0.isEnumElementType());
//       assertEquals(false, jSType0.isCheckedUnknownType());
//       assertEquals(false, jSType0.isBooleanValueType());
//       assertEquals(false, jSType0.isAllType());
//       assertEquals(true, jSType0.isFunctionType());
//       assertEquals(false, jSType0.isEnumType());
//       assertEquals(false, jSType0.isFunctionPrototypeType());
//       assertEquals(false, jSType0.isNullType());
//       assertEquals(false, jSType0.isInterface());
//       assertEquals(false, jSType0.isNominalType());
//       assertEquals(false, jSType0.isTemplateType());
//       assertEquals(false, jSType0.isNoType());
//       
//       FunctionType functionType0 = JSType.toMaybeFunctionType(jSType0);
//       assertNotNull(functionType0);
//       assertEquals(false, functionType0.isReturnTypeInferred());
//       assertEquals(true, functionType0.isConstructor());
//       assertEquals(false, functionType0.isNoType());
//       assertEquals(false, functionType0.hasCachedValues());
//       assertEquals(false, functionType0.isNumberValueType());
//       assertEquals(true, functionType0.hasInstanceType());
//       assertEquals(false, functionType0.isRecordType());
//       assertEquals(0, functionType0.getExtendedInterfacesCount());
//       assertEquals(false, functionType0.isVoidType());
//       assertEquals(false, functionType0.isNominalType());
//       assertEquals(false, functionType0.isTemplateType());
//       assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
//       assertEquals(true, functionType0.isFunctionType());
//       assertEquals(2147483647, functionType0.getMaxArguments());
//       assertEquals(false, functionType0.isAllType());
//       assertEquals(false, functionType0.isResolved());
//       assertEquals(false, functionType0.isOrdinaryFunction());
//       assertEquals(false, functionType0.isStringValueType());
//       assertEquals(false, functionType0.isEnumElementType());
//       assertEquals(false, functionType0.isEnumType());
//       assertEquals(false, functionType0.isBooleanValueType());
//       assertEquals(false, functionType0.isNoResolvedType());
//       assertEquals(false, functionType0.isNullType());
//       assertEquals(false, functionType0.isInterface());
//       assertEquals(false, functionType0.isFunctionPrototypeType());
//       assertEquals(true, functionType0.isNominalConstructor());
//       assertEquals(false, functionType0.isUnionType());
//       assertEquals(false, functionType0.isCheckedUnknownType());
//       assertEquals(true, functionType0.canBeCalled());
//       assertEquals(false, functionType0.isTemplatizedType());
//       assertEquals(false, functionType0.isNoObjectType());
//       assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
//       assertEquals(false, jSType0.isNoObjectType());
//       assertEquals(false, jSType0.isOrdinaryFunction());
//       assertEquals(true, jSType0.isNominalConstructor());
//       assertEquals(false, jSType0.isNumberValueType());
//       assertEquals(false, jSType0.isTemplatizedType());
//       assertEquals(true, jSType0.isConstructor());
//       assertEquals(false, jSType0.isVoidType());
//       assertEquals(false, jSType0.isRecordType());
//       assertEquals(false, jSType0.isResolved());
//       assertEquals(false, jSType0.isUnionType());
//       assertEquals(false, jSType0.isNoResolvedType());
//       assertEquals(false, jSType0.isStringValueType());
//       assertEquals(false, jSType0.isEnumElementType());
//       assertEquals(false, jSType0.isCheckedUnknownType());
//       assertEquals(false, jSType0.isBooleanValueType());
//       assertEquals(false, jSType0.isAllType());
//       assertEquals(true, jSType0.isFunctionType());
//       assertEquals(false, jSType0.isEnumType());
//       assertEquals(false, jSType0.isFunctionPrototypeType());
//       assertEquals(false, jSType0.isNullType());
//       assertEquals(false, jSType0.isInterface());
//       assertEquals(false, jSType0.isNominalType());
//       assertEquals(false, jSType0.isTemplateType());
//       assertEquals(false, jSType0.isNoType());
//       
//       typeValidator0.expectSuperType(nodeTraversal0, node0, functionType0, functionType0);
//       assertEquals(false, functionType0.isReturnTypeInferred());
//       assertEquals(true, functionType0.hasCachedValues());
//       assertEquals(true, functionType0.isConstructor());
//       assertEquals(false, functionType0.isNoType());
//       assertEquals(false, functionType0.isNumberValueType());
//       assertEquals(true, functionType0.hasInstanceType());
//       assertEquals(false, functionType0.isRecordType());
//       assertEquals(0, functionType0.getExtendedInterfacesCount());
//       assertEquals(false, functionType0.isVoidType());
//       assertEquals(false, functionType0.isNominalType());
//       assertEquals(false, functionType0.isTemplateType());
//       assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
//       assertEquals(true, functionType0.isFunctionType());
//       assertEquals(2147483647, functionType0.getMaxArguments());
//       assertEquals(false, functionType0.isAllType());
//       assertEquals(false, functionType0.isResolved());
//       assertEquals(false, functionType0.isOrdinaryFunction());
//       assertEquals(false, functionType0.isStringValueType());
//       assertEquals(false, functionType0.isEnumElementType());
//       assertEquals(false, functionType0.isEnumType());
//       assertEquals(false, functionType0.isBooleanValueType());
//       assertEquals(false, functionType0.isNoResolvedType());
//       assertEquals(false, functionType0.isNullType());
//       assertEquals(false, functionType0.isInterface());
//       assertEquals(false, functionType0.isFunctionPrototypeType());
//       assertEquals(true, functionType0.isNominalConstructor());
//       assertEquals(false, functionType0.isUnionType());
//       assertEquals(false, functionType0.isCheckedUnknownType());
//       assertEquals(true, functionType0.canBeCalled());
//       assertEquals(false, functionType0.isTemplatizedType());
//       assertEquals(false, functionType0.isNoObjectType());
//       assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
//       assertEquals(0.0, compiler0.getProgress(), 0.01D);
//       assertEquals(1, compiler0.getWarningCount());
//       assertEquals(false, compiler0.isTypeCheckingEnabled());
//       assertEquals(true, compiler0.hasErrors());
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
//       assertEquals(1, compiler0.getErrorCount());
//       assertEquals(false, compiler0.isIdeMode());
//       assertEquals(false, compiler0.acceptConstKeyword());
//       assertEquals(false, jSType0.isNoObjectType());
//       assertEquals(false, jSType0.isOrdinaryFunction());
//       assertEquals(true, jSType0.isNominalConstructor());
//       assertEquals(false, jSType0.isNumberValueType());
//       assertEquals(false, jSType0.isTemplatizedType());
//       assertEquals(true, jSType0.isConstructor());
//       assertEquals(false, jSType0.isVoidType());
//       assertEquals(false, jSType0.isRecordType());
//       assertEquals(false, jSType0.isResolved());
//       assertEquals(false, jSType0.isUnionType());
//       assertEquals(false, jSType0.isNoResolvedType());
//       assertEquals(false, jSType0.isStringValueType());
//       assertEquals(false, jSType0.isEnumElementType());
//       assertEquals(false, jSType0.isCheckedUnknownType());
//       assertEquals(false, jSType0.isBooleanValueType());
//       assertEquals(false, jSType0.isAllType());
//       assertEquals(true, jSType0.isFunctionType());
//       assertEquals(false, jSType0.isEnumType());
//       assertEquals(false, jSType0.isFunctionPrototypeType());
//       assertEquals(false, jSType0.isNullType());
//       assertEquals(false, jSType0.isInterface());
//       assertEquals(false, jSType0.isNominalType());
//       assertEquals(false, jSType0.isTemplateType());
//       assertEquals(false, jSType0.isNoType());
//       assertEquals(0, nodeTraversal0.getLineNumber());
//       assertEquals("", nodeTraversal0.getSourceName());
//       assertEquals(false, node0.isVar());
//       assertEquals(false, node0.isStringKey());
//       assertEquals(false, node0.isOnlyModifiesArgumentsCall());
//       assertEquals(0, node0.getSideEffectFlags());
//       assertEquals(false, node0.isBreak());
//       assertEquals(false, node0.isVarArgs());
//       assertEquals(false, node0.isThis());
//       assertEquals(false, node0.isRegExp());
//       assertEquals(false, node0.isCatch());
//       assertEquals(false, node0.isObjectLit());
//       assertEquals(false, node0.isReturn());
//       assertEquals(false, node0.isLocalResultCall());
//       assertEquals(false, node0.isArrayLit());
//       assertEquals(false, node0.isNot());
//       assertEquals(false, node0.isGetterDef());
//       assertEquals(false, node0.isParamList());
//       assertEquals(false, node0.isOr());
//       assertEquals(false, node0.isSetterDef());
//       assertEquals(false, node0.isContinue());
//       assertEquals(false, node0.isAnd());
//       assertEquals(false, node0.isHook());
//       assertEquals(0, node0.getChangeTime());
//       assertEquals(false, node0.isQuotedString());
//       assertEquals(false, node0.isCase());
//       assertEquals(false, node0.isGetElem());
//       assertEquals(false, node0.isDefaultCase());
//       assertEquals(false, node0.isNull());
//       assertEquals(false, node0.isNew());
//       assertEquals(true, node0.isScript());
//       assertEquals(false, node0.isFunction());
//       assertEquals(false, node0.isOptionalArg());
//       assertEquals(false, node0.hasOneChild());
//       assertEquals(false, node0.isNoSideEffectsCall());
//       assertEquals(false, node0.isEmpty());
//       assertEquals(false, node0.isName());
//       assertEquals(false, node0.isFor());
//       assertEquals(false, node0.isDo());
//       assertEquals(false, node0.isNumber());
//       assertEquals(false, node0.hasChildren());
//       assertEquals(true, node0.mayMutateGlobalStateOrThrow());
//       assertEquals(false, node0.isSwitch());
//       assertEquals(false, node0.isTry());
//       assertEquals(false, node0.isBlock());
//       assertEquals(false, node0.isDelProp());
//       assertEquals(false, node0.isDebugger());
//       assertEquals(false, node0.hasMoreThanOneChild());
//       assertEquals(-1, node0.getLineno());
//       assertEquals(false, node0.isThrow());
//       assertEquals(false, node0.isWhile());
//       assertEquals("[testcode]", node0.getSourceFileName());
//       assertEquals(0, node0.getLength());
//       assertEquals(false, node0.isCall());
//       assertEquals(false, node0.isAssignAdd());
//       assertEquals(false, node0.isVoid());
//       assertEquals(false, node0.isIf());
//       assertEquals(false, node0.isAssign());
//       assertEquals(false, node0.isFalse());
//       assertEquals(false, node0.isGetProp());
//       assertEquals(false, node0.isLabelName());
//       assertEquals(false, node0.isInstanceOf());
//       assertEquals(false, node0.isNE());
//       assertEquals(false, node0.isWith());
//       assertEquals(-1, node0.getCharno());
//       assertEquals(false, node0.isDec());
//       assertEquals(false, node0.isOnlyModifiesThisCall());
//       assertEquals(false, node0.isSyntheticBlock());
//       assertEquals(132, node0.getType());
//       assertEquals(false, node0.isTrue());
//       assertEquals(false, node0.isString());
//       assertEquals(false, node0.isIn());
//       assertEquals(false, node0.isTypeOf());
//       assertEquals(false, node0.isAdd());
//       assertEquals(false, node0.isLabel());
//       assertEquals(true, node0.mayMutateArguments());
//       assertEquals(false, node0.wasEmptyNode());
//       assertEquals(0, node0.getChildCount());
//       assertEquals(false, node0.isCast());
//       assertEquals(false, node0.isExprResult());
//       assertEquals(-1, node0.getSourcePosition());
//       assertEquals(false, node0.isComma());
//       assertEquals(false, node0.isInc());
//       assertEquals(false, node0.isFromExterns());
//   }

  @Test
  public void test09() {}
//   @Test
//   public void test09()  throws Throwable  {
//       Compiler compiler0 = new Compiler();
//       assertNotNull(compiler0);
//       assertEquals(0.0, compiler0.getProgress(), 0.01D);
//       
//       String string0 = "&";
//       Node node0 = compiler0.parseTestCode(string0);
//       assertNotNull(node0);
//       assertEquals(true, compiler0.hasErrors());
//       assertEquals(0, compiler0.getWarningCount());
//       assertEquals(0.0, compiler0.getProgress(), 0.01D);
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
//       assertEquals(false, compiler0.acceptConstKeyword());
//       assertEquals(false, compiler0.isTypeCheckingEnabled());
//       assertEquals(1, compiler0.getErrorCount());
//       assertEquals(false, compiler0.isIdeMode());
//       assertEquals(false, node0.isBreak());
//       assertEquals(false, node0.isGetElem());
//       assertEquals(false, node0.isHook());
//       assertEquals(false, node0.isFor());
//       assertEquals(-1, node0.getLineno());
//       assertEquals(false, node0.isInc());
//       assertEquals(false, node0.isOr());
//       assertEquals(false, node0.isString());
//       assertEquals(0, node0.getChildCount());
//       assertEquals(false, node0.wasEmptyNode());
//       assertEquals(false, node0.hasOneChild());
//       assertEquals(false, node0.isDo());
//       assertEquals(false, node0.isFromExterns());
//       assertEquals(false, node0.isExprResult());
//       assertEquals(false, node0.isParamList());
//       assertEquals(false, node0.hasChildren());
//       assertEquals(0, node0.getLength());
//       assertEquals(false, node0.isWith());
//       assertEquals(false, node0.isSetterDef());
//       assertEquals(false, node0.isIn());
//       assertEquals(false, node0.isDelProp());
//       assertEquals(false, node0.isEmpty());
//       assertEquals(false, node0.isIf());
//       assertEquals(false, node0.isDec());
//       assertEquals(false, node0.isNoSideEffectsCall());
//       assertEquals(false, node0.isCatch());
//       assertEquals(false, node0.isInstanceOf());
//       assertEquals(false, node0.isSyntheticBlock());
//       assertEquals(false, node0.isLabel());
//       assertEquals(false, node0.isStringKey());
//       assertEquals(false, node0.isLabelName());
//       assertEquals(false, node0.isAdd());
//       assertEquals(false, node0.isDefaultCase());
//       assertEquals(true, node0.mayMutateArguments());
//       assertEquals(false, node0.isCase());
//       assertEquals("[testcode]", node0.getSourceFileName());
//       assertEquals(false, node0.isGetterDef());
//       assertEquals(false, node0.isNull());
//       assertEquals(false, node0.isQuotedString());
//       assertEquals(false, node0.isThis());
//       assertEquals(132, node0.getType());
//       assertEquals(true, node0.isScript());
//       assertEquals(false, node0.isNumber());
//       assertEquals(false, node0.isFunction());
//       assertEquals(false, node0.isFalse());
//       assertEquals(false, node0.isSwitch());
//       assertEquals(false, node0.isComma());
//       assertEquals(true, node0.mayMutateGlobalStateOrThrow());
//       assertEquals(false, node0.isNew());
//       assertEquals(false, node0.isTrue());
//       assertEquals(false, node0.isThrow());
//       assertEquals(false, node0.isReturn());
//       assertEquals(false, node0.isOnlyModifiesArgumentsCall());
//       assertEquals(false, node0.isBlock());
//       assertEquals(false, node0.isTypeOf());
//       assertEquals(-1, node0.getSourcePosition());
//       assertEquals(0, node0.getChangeTime());
//       assertEquals(false, node0.isNE());
//       assertEquals(0, node0.getSideEffectFlags());
//       assertEquals(false, node0.hasMoreThanOneChild());
//       assertEquals(false, node0.isContinue());
//       assertEquals(false, node0.isObjectLit());
//       assertEquals(false, node0.isCast());
//       assertEquals(false, node0.isLocalResultCall());
//       assertEquals(false, node0.isRegExp());
//       assertEquals(false, node0.isNot());
//       assertEquals(false, node0.isOnlyModifiesThisCall());
//       assertEquals(false, node0.isArrayLit());
//       assertEquals(false, node0.isDebugger());
//       assertEquals(false, node0.isVoid());
//       assertEquals(false, node0.isAnd());
//       assertEquals(false, node0.isVar());
//       assertEquals(false, node0.isAssignAdd());
//       assertEquals(false, node0.isName());
//       assertEquals(false, node0.isAssign());
//       assertEquals(false, node0.isGetProp());
//       assertEquals(false, node0.isWhile());
//       assertEquals(-1, node0.getCharno());
//       assertEquals(false, node0.isCall());
//       assertEquals(false, node0.isOptionalArg());
//       assertEquals(false, node0.isVarArgs());
//       assertEquals(false, node0.isTry());
//       
//       TypeValidator typeValidator0 = new TypeValidator(compiler0);
//       assertNotNull(typeValidator0);
//       assertEquals(true, compiler0.hasErrors());
//       assertEquals(0, compiler0.getWarningCount());
//       assertEquals(0.0, compiler0.getProgress(), 0.01D);
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
//       assertEquals(false, compiler0.acceptConstKeyword());
//       assertEquals(false, compiler0.isTypeCheckingEnabled());
//       assertEquals(1, compiler0.getErrorCount());
//       assertEquals(false, compiler0.isIdeMode());
//       
//       CheckLevel checkLevel0 = CheckLevel.ERROR;
//       CheckUnreachableCode checkUnreachableCode0 = new CheckUnreachableCode(compiler0, checkLevel0);
//       assertNotNull(checkUnreachableCode0);
//       assertEquals(true, compiler0.hasErrors());
//       assertEquals(0, compiler0.getWarningCount());
//       assertEquals(0.0, compiler0.getProgress(), 0.01D);
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
//       assertEquals(false, compiler0.acceptConstKeyword());
//       assertEquals(false, compiler0.isTypeCheckingEnabled());
//       assertEquals(1, compiler0.getErrorCount());
//       assertEquals(false, compiler0.isIdeMode());
//       
//       NodeTraversal nodeTraversal0 = new NodeTraversal((AbstractCompiler) compiler0, (NodeTraversal.Callback) checkUnreachableCode0);
//       assertNotNull(nodeTraversal0);
//       assertEquals(true, compiler0.hasErrors());
//       assertEquals(0, compiler0.getWarningCount());
//       assertEquals(0.0, compiler0.getProgress(), 0.01D);
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
//       assertEquals(false, compiler0.acceptConstKeyword());
//       assertEquals(false, compiler0.isTypeCheckingEnabled());
//       assertEquals(1, compiler0.getErrorCount());
//       assertEquals(false, compiler0.isIdeMode());
//       assertEquals(0, nodeTraversal0.getLineNumber());
//       assertEquals("", nodeTraversal0.getSourceName());
//       
//       ErrorReporter errorReporter0 = null;
//       JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(errorReporter0);
//       assertNotNull(jSTypeRegistry0);
//       assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
//       
//       JSTypeNative jSTypeNative0 = JSTypeNative.FUNCTION_FUNCTION_TYPE;
//       FunctionType functionType0 = (FunctionType)jSTypeRegistry0.getNativeType(jSTypeNative0);
//       assertNotNull(functionType0);
//       assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
//       assertEquals(false, functionType0.isTemplatizedType());
//       assertEquals(false, functionType0.isNoObjectType());
//       assertEquals(true, functionType0.hasInstanceType());
//       assertEquals(false, functionType0.isNoResolvedType());
//       assertEquals(false, functionType0.isStringValueType());
//       assertEquals(0, functionType0.getExtendedInterfacesCount());
//       assertEquals(false, functionType0.isAllType());
//       assertEquals(false, functionType0.isNoType());
//       assertEquals(false, functionType0.isBooleanValueType());
//       assertEquals(false, functionType0.isReturnTypeInferred());
//       assertEquals(false, functionType0.isResolved());
//       assertEquals(false, functionType0.isRecordType());
//       assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
//       assertEquals(false, functionType0.isNumberValueType());
//       assertEquals(true, functionType0.hasCachedValues());
//       assertEquals(false, functionType0.isTemplateType());
//       assertEquals(true, functionType0.isNominalConstructor());
//       assertEquals(false, functionType0.isEnumType());
//       assertEquals(false, functionType0.isNullType());
//       assertEquals(true, functionType0.isFunctionType());
//       assertEquals(false, functionType0.isCheckedUnknownType());
//       assertEquals(true, functionType0.canBeCalled());
//       assertEquals(false, functionType0.isOrdinaryFunction());
//       assertEquals(false, functionType0.isNominalType());
//       assertEquals(true, functionType0.isConstructor());
//       assertEquals(false, functionType0.isInterface());
//       assertEquals(false, functionType0.isUnionType());
//       assertEquals(false, functionType0.isEnumElementType());
//       assertEquals(false, functionType0.isFunctionPrototypeType());
//       assertEquals(2147483647, functionType0.getMaxArguments());
//       assertEquals(false, functionType0.isVoidType());
//       
//       FunctionType functionType1 = JSType.toMaybeFunctionType((JSType) functionType0);
//       assertNotNull(functionType1);
//       assertSame(functionType1, functionType0);
//       assertSame(functionType0, functionType1);
//       assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
//       assertEquals(false, functionType1.isReturnTypeInferred());
//       assertEquals(true, functionType1.hasCachedValues());
//       assertEquals(true, functionType1.isFunctionType());
//       assertEquals(false, functionType1.isEnumType());
//       assertEquals(false, functionType1.isFunctionPrototypeType());
//       assertEquals(2147483647, functionType1.getMaxArguments());
//       assertEquals(false, functionType1.isStringValueType());
//       assertEquals(false, functionType1.isNoObjectType());
//       assertEquals(false, functionType1.isTemplatizedType());
//       assertEquals(false, functionType1.isResolved());
//       assertEquals(true, functionType1.isNominalConstructor());
//       assertEquals(false, functionType1.isCheckedUnknownType());
//       assertEquals(true, functionType1.canBeCalled());
//       assertEquals(BooleanLiteralSet.TRUE, functionType1.getPossibleToBooleanOutcomes());
//       assertEquals(false, functionType1.isNumberValueType());
//       assertEquals(false, functionType1.isRecordType());
//       assertEquals(false, functionType1.isBooleanValueType());
//       assertEquals(true, functionType1.isConstructor());
//       assertEquals(false, functionType1.isEnumElementType());
//       assertEquals(false, functionType1.isNominalType());
//       assertEquals(true, functionType1.hasInstanceType());
//       assertEquals(false, functionType1.isAllType());
//       assertEquals(false, functionType1.isTemplateType());
//       assertEquals(false, functionType1.isNullType());
//       assertEquals(false, functionType1.isOrdinaryFunction());
//       assertEquals(false, functionType1.isUnionType());
//       assertEquals(false, functionType1.isVoidType());
//       assertEquals(false, functionType1.isInterface());
//       assertEquals(0, functionType1.getExtendedInterfacesCount());
//       assertEquals(false, functionType1.isNoResolvedType());
//       assertEquals(false, functionType1.isNoType());
//       assertEquals(false, functionType0.isTemplatizedType());
//       assertEquals(false, functionType0.isNoObjectType());
//       assertEquals(true, functionType0.hasInstanceType());
//       assertEquals(false, functionType0.isNoResolvedType());
//       assertEquals(false, functionType0.isStringValueType());
//       assertEquals(0, functionType0.getExtendedInterfacesCount());
//       assertEquals(false, functionType0.isAllType());
//       assertEquals(false, functionType0.isNoType());
//       assertEquals(false, functionType0.isBooleanValueType());
//       assertEquals(false, functionType0.isReturnTypeInferred());
//       assertEquals(false, functionType0.isResolved());
//       assertEquals(false, functionType0.isRecordType());
//       assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
//       assertEquals(false, functionType0.isNumberValueType());
//       assertEquals(true, functionType0.hasCachedValues());
//       assertEquals(false, functionType0.isTemplateType());
//       assertEquals(true, functionType0.isNominalConstructor());
//       assertEquals(false, functionType0.isEnumType());
//       assertEquals(false, functionType0.isNullType());
//       assertEquals(true, functionType0.isFunctionType());
//       assertEquals(false, functionType0.isCheckedUnknownType());
//       assertEquals(true, functionType0.canBeCalled());
//       assertEquals(false, functionType0.isOrdinaryFunction());
//       assertEquals(false, functionType0.isNominalType());
//       assertEquals(true, functionType0.isConstructor());
//       assertEquals(false, functionType0.isInterface());
//       assertEquals(false, functionType0.isUnionType());
//       assertEquals(false, functionType0.isEnumElementType());
//       assertEquals(false, functionType0.isFunctionPrototypeType());
//       assertEquals(2147483647, functionType0.getMaxArguments());
//       assertEquals(false, functionType0.isVoidType());
//       
//       typeValidator0.expectSuperType(nodeTraversal0, node0, functionType1, functionType1);
//       assertSame(functionType1, functionType0);
//       assertSame(functionType0, functionType1);
//       assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
//       assertEquals(true, compiler0.hasErrors());
//       assertEquals(0, compiler0.getWarningCount());
//       assertEquals(0.0, compiler0.getProgress(), 0.01D);
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
//       assertEquals(false, compiler0.acceptConstKeyword());
//       assertEquals(false, compiler0.isTypeCheckingEnabled());
//       assertEquals(1, compiler0.getErrorCount());
//       assertEquals(false, compiler0.isIdeMode());
//       assertEquals(false, functionType1.isReturnTypeInferred());
//       assertEquals(true, functionType1.hasCachedValues());
//       assertEquals(true, functionType1.isFunctionType());
//       assertEquals(false, functionType1.isEnumType());
//       assertEquals(false, functionType1.isFunctionPrototypeType());
//       assertEquals(2147483647, functionType1.getMaxArguments());
//       assertEquals(false, functionType1.isStringValueType());
//       assertEquals(false, functionType1.isNoObjectType());
//       assertEquals(false, functionType1.isTemplatizedType());
//       assertEquals(false, functionType1.isResolved());
//       assertEquals(true, functionType1.isNominalConstructor());
//       assertEquals(false, functionType1.isCheckedUnknownType());
//       assertEquals(true, functionType1.canBeCalled());
//       assertEquals(BooleanLiteralSet.TRUE, functionType1.getPossibleToBooleanOutcomes());
//       assertEquals(false, functionType1.isNumberValueType());
//       assertEquals(false, functionType1.isRecordType());
//       assertEquals(false, functionType1.isBooleanValueType());
//       assertEquals(true, functionType1.isConstructor());
//       assertEquals(false, functionType1.isEnumElementType());
//       assertEquals(false, functionType1.isNominalType());
//       assertEquals(true, functionType1.hasInstanceType());
//       assertEquals(false, functionType1.isAllType());
//       assertEquals(false, functionType1.isTemplateType());
//       assertEquals(false, functionType1.isNullType());
//       assertEquals(false, functionType1.isOrdinaryFunction());
//       assertEquals(false, functionType1.isUnionType());
//       assertEquals(false, functionType1.isVoidType());
//       assertEquals(false, functionType1.isInterface());
//       assertEquals(0, functionType1.getExtendedInterfacesCount());
//       assertEquals(false, functionType1.isNoResolvedType());
//       assertEquals(false, functionType1.isNoType());
//       assertEquals(0, nodeTraversal0.getLineNumber());
//       assertEquals("", nodeTraversal0.getSourceName());
//       assertEquals(false, node0.isBreak());
//       assertEquals(false, node0.isGetElem());
//       assertEquals(false, node0.isHook());
//       assertEquals(false, node0.isFor());
//       assertEquals(-1, node0.getLineno());
//       assertEquals(false, node0.isInc());
//       assertEquals(false, node0.isOr());
//       assertEquals(false, node0.isString());
//       assertEquals(0, node0.getChildCount());
//       assertEquals(false, node0.wasEmptyNode());
//       assertEquals(false, node0.hasOneChild());
//       assertEquals(false, node0.isDo());
//       assertEquals(false, node0.isFromExterns());
//       assertEquals(false, node0.isExprResult());
//       assertEquals(false, node0.isParamList());
//       assertEquals(false, node0.hasChildren());
//       assertEquals(0, node0.getLength());
//       assertEquals(false, node0.isWith());
//       assertEquals(false, node0.isSetterDef());
//       assertEquals(false, node0.isIn());
//       assertEquals(false, node0.isDelProp());
//       assertEquals(false, node0.isEmpty());
//       assertEquals(false, node0.isIf());
//       assertEquals(false, node0.isDec());
//       assertEquals(false, node0.isNoSideEffectsCall());
//       assertEquals(false, node0.isCatch());
//       assertEquals(false, node0.isInstanceOf());
//       assertEquals(false, node0.isSyntheticBlock());
//       assertEquals(false, node0.isLabel());
//       assertEquals(false, node0.isStringKey());
//       assertEquals(false, node0.isLabelName());
//       assertEquals(false, node0.isAdd());
//       assertEquals(false, node0.isDefaultCase());
//       assertEquals(true, node0.mayMutateArguments());
//       assertEquals(false, node0.isCase());
//       assertEquals("[testcode]", node0.getSourceFileName());
//       assertEquals(false, node0.isGetterDef());
//       assertEquals(false, node0.isNull());
//       assertEquals(false, node0.isQuotedString());
//       assertEquals(false, node0.isThis());
//       assertEquals(132, node0.getType());
//       assertEquals(true, node0.isScript());
//       assertEquals(false, node0.isNumber());
//       assertEquals(false, node0.isFunction());
//       assertEquals(false, node0.isFalse());
//       assertEquals(false, node0.isSwitch());
//       assertEquals(false, node0.isComma());
//       assertEquals(true, node0.mayMutateGlobalStateOrThrow());
//       assertEquals(false, node0.isNew());
//       assertEquals(false, node0.isTrue());
//       assertEquals(false, node0.isThrow());
//       assertEquals(false, node0.isReturn());
//       assertEquals(false, node0.isOnlyModifiesArgumentsCall());
//       assertEquals(false, node0.isBlock());
//       assertEquals(false, node0.isTypeOf());
//       assertEquals(-1, node0.getSourcePosition());
//       assertEquals(0, node0.getChangeTime());
//       assertEquals(false, node0.isNE());
//       assertEquals(0, node0.getSideEffectFlags());
//       assertEquals(false, node0.hasMoreThanOneChild());
//       assertEquals(false, node0.isContinue());
//       assertEquals(false, node0.isObjectLit());
//       assertEquals(false, node0.isCast());
//       assertEquals(false, node0.isLocalResultCall());
//       assertEquals(false, node0.isRegExp());
//       assertEquals(false, node0.isNot());
//       assertEquals(false, node0.isOnlyModifiesThisCall());
//       assertEquals(false, node0.isArrayLit());
//       assertEquals(false, node0.isDebugger());
//       assertEquals(false, node0.isVoid());
//       assertEquals(false, node0.isAnd());
//       assertEquals(false, node0.isVar());
//       assertEquals(false, node0.isAssignAdd());
//       assertEquals(false, node0.isName());
//       assertEquals(false, node0.isAssign());
//       assertEquals(false, node0.isGetProp());
//       assertEquals(false, node0.isWhile());
//       assertEquals(-1, node0.getCharno());
//       assertEquals(false, node0.isCall());
//       assertEquals(false, node0.isOptionalArg());
//       assertEquals(false, node0.isVarArgs());
//       assertEquals(false, node0.isTry());
//       assertEquals(false, functionType0.isTemplatizedType());
//       assertEquals(false, functionType0.isNoObjectType());
//       assertEquals(true, functionType0.hasInstanceType());
//       assertEquals(false, functionType0.isNoResolvedType());
//       assertEquals(false, functionType0.isStringValueType());
//       assertEquals(0, functionType0.getExtendedInterfacesCount());
//       assertEquals(false, functionType0.isAllType());
//       assertEquals(false, functionType0.isNoType());
//       assertEquals(false, functionType0.isBooleanValueType());
//       assertEquals(false, functionType0.isReturnTypeInferred());
//       assertEquals(false, functionType0.isResolved());
//       assertEquals(false, functionType0.isRecordType());
//       assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
//       assertEquals(false, functionType0.isNumberValueType());
//       assertEquals(true, functionType0.hasCachedValues());
//       assertEquals(false, functionType0.isTemplateType());
//       assertEquals(true, functionType0.isNominalConstructor());
//       assertEquals(false, functionType0.isEnumType());
//       assertEquals(false, functionType0.isNullType());
//       assertEquals(true, functionType0.isFunctionType());
//       assertEquals(false, functionType0.isCheckedUnknownType());
//       assertEquals(true, functionType0.canBeCalled());
//       assertEquals(false, functionType0.isOrdinaryFunction());
//       assertEquals(false, functionType0.isNominalType());
//       assertEquals(true, functionType0.isConstructor());
//       assertEquals(false, functionType0.isInterface());
//       assertEquals(false, functionType0.isUnionType());
//       assertEquals(false, functionType0.isEnumElementType());
//       assertEquals(false, functionType0.isFunctionPrototypeType());
//       assertEquals(2147483647, functionType0.getMaxArguments());
//       assertEquals(false, functionType0.isVoidType());
//   }

  @Test
  public void test10() {}
//   @Test
//   public void test10()  throws Throwable  {
//       Compiler compiler0 = new Compiler();
//       assertNotNull(compiler0);
//       assertEquals(0.0, compiler0.getProgress(), 0.01D);
//       
//       String string0 = "!";
//       Node node0 = compiler0.parseTestCode(string0);
//       assertNotNull(node0);
//       assertEquals(false, compiler0.isTypeCheckingEnabled());
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
//       assertEquals(0, compiler0.getWarningCount());
//       assertEquals(false, compiler0.isIdeMode());
//       assertEquals(0.0, compiler0.getProgress(), 0.01D);
//       assertEquals(1, compiler0.getErrorCount());
//       assertEquals(true, compiler0.hasErrors());
//       assertEquals(false, compiler0.acceptConstKeyword());
//       assertEquals(false, node0.isCase());
//       assertEquals(true, node0.mayMutateGlobalStateOrThrow());
//       assertEquals(false, node0.isTypeOf());
//       assertEquals(true, node0.mayMutateArguments());
//       assertEquals(false, node0.isWhile());
//       assertEquals(false, node0.isFalse());
//       assertEquals(-1, node0.getLineno());
//       assertEquals(false, node0.isDebugger());
//       assertEquals(false, node0.isThis());
//       assertEquals(false, node0.isTry());
//       assertEquals(false, node0.isGetProp());
//       assertEquals(false, node0.wasEmptyNode());
//       assertEquals(false, node0.isNew());
//       assertEquals(false, node0.isGetElem());
//       assertEquals(-1, node0.getSourcePosition());
//       assertEquals(false, node0.isOnlyModifiesArgumentsCall());
//       assertEquals(false, node0.isTrue());
//       assertEquals(false, node0.isObjectLit());
//       assertEquals(false, node0.isAssignAdd());
//       assertEquals(false, node0.isCatch());
//       assertEquals(false, node0.isExprResult());
//       assertEquals(false, node0.isOnlyModifiesThisCall());
//       assertEquals(false, node0.isVarArgs());
//       assertEquals(false, node0.isSyntheticBlock());
//       assertEquals("[testcode]", node0.getSourceFileName());
//       assertEquals(true, node0.isScript());
//       assertEquals(false, node0.isAnd());
//       assertEquals(false, node0.isQuotedString());
//       assertEquals(false, node0.isInstanceOf());
//       assertEquals(false, node0.isGetterDef());
//       assertEquals(false, node0.isDo());
//       assertEquals(false, node0.hasMoreThanOneChild());
//       assertEquals(false, node0.isNumber());
//       assertEquals(false, node0.isStringKey());
//       assertEquals(false, node0.isName());
//       assertEquals(false, node0.isFor());
//       assertEquals(false, node0.isString());
//       assertEquals(false, node0.isRegExp());
//       assertEquals(false, node0.isFromExterns());
//       assertEquals(false, node0.isInc());
//       assertEquals(false, node0.isArrayLit());
//       assertEquals(false, node0.isSwitch());
//       assertEquals(false, node0.isCast());
//       assertEquals(false, node0.isBreak());
//       assertEquals(false, node0.isFunction());
//       assertEquals(false, node0.isLabel());
//       assertEquals(false, node0.isEmpty());
//       assertEquals(false, node0.isNoSideEffectsCall());
//       assertEquals(false, node0.isLabelName());
//       assertEquals(false, node0.isReturn());
//       assertEquals(false, node0.isIf());
//       assertEquals(false, node0.isParamList());
//       assertEquals(false, node0.isVoid());
//       assertEquals(false, node0.isNull());
//       assertEquals(false, node0.isOptionalArg());
//       assertEquals(false, node0.isWith());
//       assertEquals(false, node0.isOr());
//       assertEquals(-1, node0.getCharno());
//       assertEquals(0, node0.getChildCount());
//       assertEquals(false, node0.isVar());
//       assertEquals(false, node0.isDec());
//       assertEquals(false, node0.isLocalResultCall());
//       assertEquals(false, node0.isNot());
//       assertEquals(0, node0.getChangeTime());
//       assertEquals(false, node0.isComma());
//       assertEquals(false, node0.isSetterDef());
//       assertEquals(false, node0.isAdd());
//       assertEquals(false, node0.isContinue());
//       assertEquals(false, node0.isDelProp());
//       assertEquals(false, node0.hasChildren());
//       assertEquals(false, node0.isBlock());
//       assertEquals(0, node0.getLength());
//       assertEquals(132, node0.getType());
//       assertEquals(0, node0.getSideEffectFlags());
//       assertEquals(false, node0.isAssign());
//       assertEquals(false, node0.isCall());
//       assertEquals(false, node0.hasOneChild());
//       assertEquals(false, node0.isIn());
//       assertEquals(false, node0.isNE());
//       assertEquals(false, node0.isThrow());
//       assertEquals(false, node0.isHook());
//       assertEquals(false, node0.isDefaultCase());
//       
//       TypeValidator typeValidator0 = new TypeValidator(compiler0);
//       assertNotNull(typeValidator0);
//       assertEquals(false, compiler0.isTypeCheckingEnabled());
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
//       assertEquals(0, compiler0.getWarningCount());
//       assertEquals(false, compiler0.isIdeMode());
//       assertEquals(0.0, compiler0.getProgress(), 0.01D);
//       assertEquals(1, compiler0.getErrorCount());
//       assertEquals(true, compiler0.hasErrors());
//       assertEquals(false, compiler0.acceptConstKeyword());
//       
//       CheckLevel checkLevel0 = CheckLevel.ERROR;
//       CheckUnreachableCode checkUnreachableCode0 = new CheckUnreachableCode(compiler0, checkLevel0);
//       assertNotNull(checkUnreachableCode0);
//       assertEquals(false, compiler0.isTypeCheckingEnabled());
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
//       assertEquals(0, compiler0.getWarningCount());
//       assertEquals(false, compiler0.isIdeMode());
//       assertEquals(0.0, compiler0.getProgress(), 0.01D);
//       assertEquals(1, compiler0.getErrorCount());
//       assertEquals(true, compiler0.hasErrors());
//       assertEquals(false, compiler0.acceptConstKeyword());
//       
//       NodeTraversal nodeTraversal0 = new NodeTraversal((AbstractCompiler) compiler0, (NodeTraversal.Callback) checkUnreachableCode0);
//       assertNotNull(nodeTraversal0);
//       assertEquals(false, compiler0.isTypeCheckingEnabled());
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
//       assertEquals(0, compiler0.getWarningCount());
//       assertEquals(false, compiler0.isIdeMode());
//       assertEquals(0.0, compiler0.getProgress(), 0.01D);
//       assertEquals(1, compiler0.getErrorCount());
//       assertEquals(true, compiler0.hasErrors());
//       assertEquals(false, compiler0.acceptConstKeyword());
//       assertEquals(0, nodeTraversal0.getLineNumber());
//       assertEquals("", nodeTraversal0.getSourceName());
//       
//       TightenTypes tightenTypes0 = new TightenTypes(compiler0);
//       assertNotNull(tightenTypes0);
//       assertEquals(false, compiler0.isTypeCheckingEnabled());
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
//       assertEquals(0, compiler0.getWarningCount());
//       assertEquals(false, compiler0.isIdeMode());
//       assertEquals(0.0, compiler0.getProgress(), 0.01D);
//       assertEquals(1, compiler0.getErrorCount());
//       assertEquals(true, compiler0.hasErrors());
//       assertEquals(false, compiler0.acceptConstKeyword());
//       
//       JSTypeRegistry jSTypeRegistry0 = tightenTypes0.getTypeRegistry();
//       assertNotNull(jSTypeRegistry0);
//       assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
//       assertEquals(false, compiler0.isTypeCheckingEnabled());
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
//       assertEquals(0, compiler0.getWarningCount());
//       assertEquals(false, compiler0.isIdeMode());
//       assertEquals(0.0, compiler0.getProgress(), 0.01D);
//       assertEquals(1, compiler0.getErrorCount());
//       assertEquals(true, compiler0.hasErrors());
//       assertEquals(false, compiler0.acceptConstKeyword());
//       
//       JSTypeNative jSTypeNative0 = JSTypeNative.FUNCTION_INSTANCE_TYPE;
//       JSType jSType0 = jSTypeRegistry0.getNativeType(jSTypeNative0);
//       assertNotNull(jSType0);
//       assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
//       assertEquals(false, compiler0.isTypeCheckingEnabled());
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
//       assertEquals(0, compiler0.getWarningCount());
//       assertEquals(false, compiler0.isIdeMode());
//       assertEquals(0.0, compiler0.getProgress(), 0.01D);
//       assertEquals(1, compiler0.getErrorCount());
//       assertEquals(true, compiler0.hasErrors());
//       assertEquals(false, compiler0.acceptConstKeyword());
//       assertEquals(true, jSType0.isFunctionType());
//       assertEquals(false, jSType0.isVoidType());
//       assertEquals(false, jSType0.isUnionType());
//       assertEquals(false, jSType0.isFunctionPrototypeType());
//       assertEquals(false, jSType0.isStringValueType());
//       assertEquals(false, jSType0.isRecordType());
//       assertEquals(false, jSType0.isBooleanValueType());
//       assertEquals(false, jSType0.isTemplateType());
//       assertEquals(false, jSType0.isNoObjectType());
//       assertEquals(false, jSType0.isInterface());
//       assertEquals(false, jSType0.isCheckedUnknownType());
//       assertEquals(false, jSType0.isNullType());
//       assertEquals(false, jSType0.isEnumElementType());
//       assertEquals(false, jSType0.isTemplatizedType());
//       assertEquals(false, jSType0.isOrdinaryFunction());
//       assertEquals(false, jSType0.isAllType());
//       assertEquals(false, jSType0.isResolved());
//       assertEquals(false, jSType0.isNominalType());
//       assertEquals(false, jSType0.isEnumType());
//       assertEquals(true, jSType0.isConstructor());
//       assertEquals(false, jSType0.isNumberValueType());
//       assertEquals(false, jSType0.isNoType());
//       assertEquals(false, jSType0.isNoResolvedType());
//       assertEquals(true, jSType0.isNominalConstructor());
//       
//       FunctionType functionType0 = JSType.toMaybeFunctionType(jSType0);
//       assertNotNull(functionType0);
//       assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
//       assertEquals(false, compiler0.isTypeCheckingEnabled());
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
//       assertEquals(0, compiler0.getWarningCount());
//       assertEquals(false, compiler0.isIdeMode());
//       assertEquals(0.0, compiler0.getProgress(), 0.01D);
//       assertEquals(1, compiler0.getErrorCount());
//       assertEquals(true, compiler0.hasErrors());
//       assertEquals(false, compiler0.acceptConstKeyword());
//       assertEquals(true, jSType0.isFunctionType());
//       assertEquals(false, jSType0.isVoidType());
//       assertEquals(false, jSType0.isUnionType());
//       assertEquals(false, jSType0.isFunctionPrototypeType());
//       assertEquals(false, jSType0.isStringValueType());
//       assertEquals(false, jSType0.isRecordType());
//       assertEquals(false, jSType0.isBooleanValueType());
//       assertEquals(false, jSType0.isTemplateType());
//       assertEquals(false, jSType0.isNoObjectType());
//       assertEquals(false, jSType0.isInterface());
//       assertEquals(false, jSType0.isCheckedUnknownType());
//       assertEquals(false, jSType0.isNullType());
//       assertEquals(false, jSType0.isEnumElementType());
//       assertEquals(false, jSType0.isTemplatizedType());
//       assertEquals(false, jSType0.isOrdinaryFunction());
//       assertEquals(false, jSType0.isAllType());
//       assertEquals(false, jSType0.isResolved());
//       assertEquals(false, jSType0.isNominalType());
//       assertEquals(false, jSType0.isEnumType());
//       assertEquals(true, jSType0.isConstructor());
//       assertEquals(false, jSType0.isNumberValueType());
//       assertEquals(false, jSType0.isNoType());
//       assertEquals(false, jSType0.isNoResolvedType());
//       assertEquals(true, jSType0.isNominalConstructor());
//       assertEquals(true, functionType0.isNominalConstructor());
//       assertEquals(false, functionType0.hasCachedValues());
//       assertEquals(true, functionType0.isConstructor());
//       assertEquals(false, functionType0.isFunctionPrototypeType());
//       assertEquals(false, functionType0.isRecordType());
//       assertEquals(false, functionType0.isNoType());
//       assertEquals(false, functionType0.isCheckedUnknownType());
//       assertEquals(false, functionType0.isAllType());
//       assertEquals(2147483647, functionType0.getMaxArguments());
//       assertEquals(false, functionType0.isVoidType());
//       assertEquals(false, functionType0.isBooleanValueType());
//       assertEquals(false, functionType0.isReturnTypeInferred());
//       assertEquals(false, functionType0.isNoObjectType());
//       assertEquals(true, functionType0.canBeCalled());
//       assertEquals(true, functionType0.hasInstanceType());
//       assertEquals(false, functionType0.isUnionType());
//       assertEquals(false, functionType0.isStringValueType());
//       assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
//       assertEquals(0, functionType0.getExtendedInterfacesCount());
//       assertEquals(true, functionType0.isFunctionType());
//       assertEquals(false, functionType0.isNoResolvedType());
//       assertEquals(false, functionType0.isNullType());
//       assertEquals(false, functionType0.isEnumElementType());
//       assertEquals(false, functionType0.isResolved());
//       assertEquals(false, functionType0.isInterface());
//       assertEquals(false, functionType0.isNumberValueType());
//       assertEquals(false, functionType0.isTemplateType());
//       assertEquals(false, functionType0.isTemplatizedType());
//       assertEquals(false, functionType0.isEnumType());
//       assertEquals(false, functionType0.isNominalType());
//       assertEquals(false, functionType0.isOrdinaryFunction());
//       
//       typeValidator0.expectSuperType(nodeTraversal0, node0, functionType0, functionType0);
//       assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
//       assertEquals(false, compiler0.isTypeCheckingEnabled());
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
//       assertEquals(false, compiler0.isIdeMode());
//       assertEquals(0.0, compiler0.getProgress(), 0.01D);
//       assertEquals(1, compiler0.getErrorCount());
//       assertEquals(1, compiler0.getWarningCount());
//       assertEquals(true, compiler0.hasErrors());
//       assertEquals(false, compiler0.acceptConstKeyword());
//       assertEquals(false, node0.isCase());
//       assertEquals(true, node0.mayMutateGlobalStateOrThrow());
//       assertEquals(false, node0.isTypeOf());
//       assertEquals(true, node0.mayMutateArguments());
//       assertEquals(false, node0.isWhile());
//       assertEquals(false, node0.isFalse());
//       assertEquals(-1, node0.getLineno());
//       assertEquals(false, node0.isDebugger());
//       assertEquals(false, node0.isThis());
//       assertEquals(false, node0.isTry());
//       assertEquals(false, node0.isGetProp());
//       assertEquals(false, node0.wasEmptyNode());
//       assertEquals(false, node0.isNew());
//       assertEquals(false, node0.isGetElem());
//       assertEquals(-1, node0.getSourcePosition());
//       assertEquals(false, node0.isOnlyModifiesArgumentsCall());
//       assertEquals(false, node0.isTrue());
//       assertEquals(false, node0.isObjectLit());
//       assertEquals(false, node0.isAssignAdd());
//       assertEquals(false, node0.isCatch());
//       assertEquals(false, node0.isExprResult());
//       assertEquals(false, node0.isOnlyModifiesThisCall());
//       assertEquals(false, node0.isVarArgs());
//       assertEquals(false, node0.isSyntheticBlock());
//       assertEquals("[testcode]", node0.getSourceFileName());
//       assertEquals(true, node0.isScript());
//       assertEquals(false, node0.isAnd());
//       assertEquals(false, node0.isQuotedString());
//       assertEquals(false, node0.isInstanceOf());
//       assertEquals(false, node0.isGetterDef());
//       assertEquals(false, node0.isDo());
//       assertEquals(false, node0.hasMoreThanOneChild());
//       assertEquals(false, node0.isNumber());
//       assertEquals(false, node0.isStringKey());
//       assertEquals(false, node0.isName());
//       assertEquals(false, node0.isFor());
//       assertEquals(false, node0.isString());
//       assertEquals(false, node0.isRegExp());
//       assertEquals(false, node0.isFromExterns());
//       assertEquals(false, node0.isInc());
//       assertEquals(false, node0.isArrayLit());
//       assertEquals(false, node0.isSwitch());
//       assertEquals(false, node0.isCast());
//       assertEquals(false, node0.isBreak());
//       assertEquals(false, node0.isFunction());
//       assertEquals(false, node0.isLabel());
//       assertEquals(false, node0.isEmpty());
//       assertEquals(false, node0.isNoSideEffectsCall());
//       assertEquals(false, node0.isLabelName());
//       assertEquals(false, node0.isReturn());
//       assertEquals(false, node0.isIf());
//       assertEquals(false, node0.isParamList());
//       assertEquals(false, node0.isVoid());
//       assertEquals(false, node0.isNull());
//       assertEquals(false, node0.isOptionalArg());
//       assertEquals(false, node0.isWith());
//       assertEquals(false, node0.isOr());
//       assertEquals(-1, node0.getCharno());
//       assertEquals(0, node0.getChildCount());
//       assertEquals(false, node0.isVar());
//       assertEquals(false, node0.isDec());
//       assertEquals(false, node0.isLocalResultCall());
//       assertEquals(false, node0.isNot());
//       assertEquals(0, node0.getChangeTime());
//       assertEquals(false, node0.isComma());
//       assertEquals(false, node0.isSetterDef());
//       assertEquals(false, node0.isAdd());
//       assertEquals(false, node0.isContinue());
//       assertEquals(false, node0.isDelProp());
//       assertEquals(false, node0.hasChildren());
//       assertEquals(false, node0.isBlock());
//       assertEquals(0, node0.getLength());
//       assertEquals(132, node0.getType());
//       assertEquals(0, node0.getSideEffectFlags());
//       assertEquals(false, node0.isAssign());
//       assertEquals(false, node0.isCall());
//       assertEquals(false, node0.hasOneChild());
//       assertEquals(false, node0.isIn());
//       assertEquals(false, node0.isNE());
//       assertEquals(false, node0.isThrow());
//       assertEquals(false, node0.isHook());
//       assertEquals(false, node0.isDefaultCase());
//       assertEquals(true, jSType0.isFunctionType());
//       assertEquals(false, jSType0.isVoidType());
//       assertEquals(false, jSType0.isUnionType());
//       assertEquals(false, jSType0.isFunctionPrototypeType());
//       assertEquals(false, jSType0.isStringValueType());
//       assertEquals(false, jSType0.isRecordType());
//       assertEquals(false, jSType0.isBooleanValueType());
//       assertEquals(false, jSType0.isTemplateType());
//       assertEquals(false, jSType0.isNoObjectType());
//       assertEquals(false, jSType0.isInterface());
//       assertEquals(false, jSType0.isCheckedUnknownType());
//       assertEquals(false, jSType0.isNullType());
//       assertEquals(false, jSType0.isEnumElementType());
//       assertEquals(false, jSType0.isTemplatizedType());
//       assertEquals(false, jSType0.isOrdinaryFunction());
//       assertEquals(false, jSType0.isAllType());
//       assertEquals(false, jSType0.isResolved());
//       assertEquals(false, jSType0.isNominalType());
//       assertEquals(false, jSType0.isEnumType());
//       assertEquals(true, jSType0.isConstructor());
//       assertEquals(false, jSType0.isNumberValueType());
//       assertEquals(false, jSType0.isNoType());
//       assertEquals(false, jSType0.isNoResolvedType());
//       assertEquals(true, jSType0.isNominalConstructor());
//       assertEquals(0, nodeTraversal0.getLineNumber());
//       assertEquals("", nodeTraversal0.getSourceName());
//       assertEquals(true, functionType0.isNominalConstructor());
//       assertEquals(true, functionType0.isConstructor());
//       assertEquals(false, functionType0.isFunctionPrototypeType());
//       assertEquals(false, functionType0.isRecordType());
//       assertEquals(false, functionType0.isNoType());
//       assertEquals(false, functionType0.isCheckedUnknownType());
//       assertEquals(false, functionType0.isAllType());
//       assertEquals(2147483647, functionType0.getMaxArguments());
//       assertEquals(false, functionType0.isVoidType());
//       assertEquals(false, functionType0.isBooleanValueType());
//       assertEquals(false, functionType0.isReturnTypeInferred());
//       assertEquals(false, functionType0.isNoObjectType());
//       assertEquals(true, functionType0.canBeCalled());
//       assertEquals(true, functionType0.hasInstanceType());
//       assertEquals(false, functionType0.isUnionType());
//       assertEquals(false, functionType0.isStringValueType());
//       assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
//       assertEquals(0, functionType0.getExtendedInterfacesCount());
//       assertEquals(true, functionType0.hasCachedValues());
//       assertEquals(true, functionType0.isFunctionType());
//       assertEquals(false, functionType0.isNoResolvedType());
//       assertEquals(false, functionType0.isNullType());
//       assertEquals(false, functionType0.isEnumElementType());
//       assertEquals(false, functionType0.isResolved());
//       assertEquals(false, functionType0.isInterface());
//       assertEquals(false, functionType0.isNumberValueType());
//       assertEquals(false, functionType0.isTemplateType());
//       assertEquals(false, functionType0.isTemplatizedType());
//       assertEquals(false, functionType0.isEnumType());
//       assertEquals(false, functionType0.isNominalType());
//       assertEquals(false, functionType0.isOrdinaryFunction());
//   }

  @Test
  public void test11()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      assertNotNull(compiler0);
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      
      String string0 = "&";
      Node node0 = compiler0.parseTestCode(string0);
      assertNotNull(node0);
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isLabel());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isGetProp());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(true, node0.isScript());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isGetElem());
      assertEquals(0, node0.getChangeTime());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isBreak());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isCast());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isString());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isStringKey());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isDelProp());
      assertEquals("[testcode]", node0.getSourceFileName());
      assertEquals(false, node0.isOnlyModifiesArgumentsCall());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isSwitch());
      assertEquals(true, node0.mayMutateArguments());
      assertEquals(132, node0.getType());
      assertEquals(false, node0.isFromExterns());
      assertEquals(true, node0.mayMutateGlobalStateOrThrow());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isIn());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isDo());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(true, compiler0.hasErrors());
      assertEquals(1, compiler0.getErrorCount());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(false, compiler0.isIdeMode());
      
      TypeValidator typeValidator0 = new TypeValidator(compiler0);
      assertNotNull(typeValidator0);
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(true, compiler0.hasErrors());
      assertEquals(1, compiler0.getErrorCount());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(false, compiler0.isIdeMode());
      
      CheckLevel checkLevel0 = CheckLevel.ERROR;
      CheckUnreachableCode checkUnreachableCode0 = new CheckUnreachableCode(compiler0, checkLevel0);
      assertNotNull(checkUnreachableCode0);
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(true, compiler0.hasErrors());
      assertEquals(1, compiler0.getErrorCount());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(false, compiler0.isIdeMode());
      
      NodeTraversal nodeTraversal0 = new NodeTraversal((AbstractCompiler) compiler0, (NodeTraversal.Callback) checkUnreachableCode0);
      assertNotNull(nodeTraversal0);
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(true, compiler0.hasErrors());
      assertEquals(1, compiler0.getErrorCount());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(0, nodeTraversal0.getLineNumber());
      assertEquals("", nodeTraversal0.getSourceName());
      
      ErrorReporter errorReporter0 = null;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(errorReporter0);
      assertNotNull(jSTypeRegistry0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      JSTypeNative jSTypeNative0 = JSTypeNative.FUNCTION_FUNCTION_TYPE;
      FunctionType functionType0 = (FunctionType)jSTypeRegistry0.getNativeType(jSTypeNative0);
      assertNotNull(functionType0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, functionType0.isBooleanValueType());
      assertEquals(false, functionType0.isNullType());
      assertEquals(2147483647, functionType0.getMaxArguments());
      assertEquals(false, functionType0.isFunctionPrototypeType());
      assertEquals(false, functionType0.isEnumType());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertEquals(true, functionType0.isNominalConstructor());
      assertEquals(false, functionType0.isResolved());
      assertEquals(false, functionType0.isCheckedUnknownType());
      assertEquals(true, functionType0.hasCachedValues());
      assertEquals(false, functionType0.isUnionType());
      assertEquals(false, functionType0.isReturnTypeInferred());
      assertEquals(true, functionType0.isConstructor());
      assertEquals(false, functionType0.isNoObjectType());
      assertEquals(false, functionType0.isTemplateType());
      assertEquals(false, functionType0.isNominalType());
      assertEquals(false, functionType0.isOrdinaryFunction());
      assertEquals(true, functionType0.hasInstanceType());
      assertEquals(false, functionType0.isInterface());
      assertEquals(true, functionType0.isFunctionType());
      assertEquals(false, functionType0.isNumberValueType());
      assertEquals(false, functionType0.isStringValueType());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertEquals(false, functionType0.isVoidType());
      assertEquals(false, functionType0.isEnumElementType());
      assertEquals(false, functionType0.isNoType());
      assertEquals(false, functionType0.isAllType());
      assertEquals(false, functionType0.isRecordType());
      assertEquals(false, functionType0.isNoResolvedType());
      assertEquals(true, functionType0.canBeCalled());
      assertEquals(false, functionType0.isTemplatizedType());
      
      typeValidator0.expectCanOverride(nodeTraversal0, node0, functionType0, functionType0, string0, functionType0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isLabel());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isGetProp());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(true, node0.isScript());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isGetElem());
      assertEquals(0, node0.getChangeTime());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isBreak());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isCast());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isString());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isStringKey());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isDelProp());
      assertEquals("[testcode]", node0.getSourceFileName());
      assertEquals(false, node0.isOnlyModifiesArgumentsCall());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isSwitch());
      assertEquals(true, node0.mayMutateArguments());
      assertEquals(132, node0.getType());
      assertEquals(false, node0.isFromExterns());
      assertEquals(true, node0.mayMutateGlobalStateOrThrow());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isIn());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isDo());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(true, compiler0.hasErrors());
      assertEquals(1, compiler0.getErrorCount());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(0, nodeTraversal0.getLineNumber());
      assertEquals("", nodeTraversal0.getSourceName());
      assertEquals(false, functionType0.isBooleanValueType());
      assertEquals(false, functionType0.isNullType());
      assertEquals(2147483647, functionType0.getMaxArguments());
      assertEquals(false, functionType0.isFunctionPrototypeType());
      assertEquals(false, functionType0.isEnumType());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertEquals(true, functionType0.isNominalConstructor());
      assertEquals(false, functionType0.isResolved());
      assertEquals(false, functionType0.isCheckedUnknownType());
      assertEquals(true, functionType0.hasCachedValues());
      assertEquals(false, functionType0.isUnionType());
      assertEquals(false, functionType0.isReturnTypeInferred());
      assertEquals(true, functionType0.isConstructor());
      assertEquals(false, functionType0.isNoObjectType());
      assertEquals(false, functionType0.isTemplateType());
      assertEquals(false, functionType0.isNominalType());
      assertEquals(false, functionType0.isOrdinaryFunction());
      assertEquals(true, functionType0.hasInstanceType());
      assertEquals(false, functionType0.isInterface());
      assertEquals(true, functionType0.isFunctionType());
      assertEquals(false, functionType0.isNumberValueType());
      assertEquals(false, functionType0.isStringValueType());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertEquals(false, functionType0.isVoidType());
      assertEquals(false, functionType0.isEnumElementType());
      assertEquals(false, functionType0.isNoType());
      assertEquals(false, functionType0.isAllType());
      assertEquals(false, functionType0.isRecordType());
      assertEquals(false, functionType0.isNoResolvedType());
      assertEquals(true, functionType0.canBeCalled());
      assertEquals(false, functionType0.isTemplatizedType());
  }

  @Test
  public void test12() {}
//   @Test
//   public void test12()  throws Throwable  {
//       Compiler compiler0 = new Compiler();
//       assertNotNull(compiler0);
//       assertEquals(0.0, compiler0.getProgress(), 0.01D);
//       
//       String string0 = "Tv";
//       Node node0 = compiler0.parseTestCode(string0);
//       assertNotNull(node0);
//       assertEquals("[testcode]", node0.getSourceFileName());
//       assertEquals(true, node0.mayMutateGlobalStateOrThrow());
//       assertEquals(false, node0.isGetProp());
//       assertEquals(false, node0.isHook());
//       assertEquals(false, node0.isName());
//       assertEquals(false, node0.isString());
//       assertEquals(false, node0.isBreak());
//       assertEquals(false, node0.isLabel());
//       assertEquals(false, node0.isAnd());
//       assertEquals(false, node0.isTypeOf());
//       assertEquals(false, node0.isIn());
//       assertEquals(false, node0.isCall());
//       assertEquals(0, node0.getCharno());
//       assertEquals(false, node0.isOr());
//       assertEquals(132, node0.getType());
//       assertEquals(false, node0.isIf());
//       assertEquals(0, node0.getChangeTime());
//       assertEquals(false, node0.isContinue());
//       assertEquals(false, node0.isOnlyModifiesArgumentsCall());
//       assertEquals(true, node0.hasOneChild());
//       assertEquals(false, node0.isCast());
//       assertEquals(false, node0.isInc());
//       assertEquals(false, node0.wasEmptyNode());
//       assertEquals(false, node0.isGetterDef());
//       assertEquals(false, node0.isAssignAdd());
//       assertEquals(false, node0.isTrue());
//       assertEquals(false, node0.isAssign());
//       assertEquals(false, node0.isOnlyModifiesThisCall());
//       assertEquals(false, node0.isAdd());
//       assertEquals(false, node0.isDebugger());
//       assertEquals(false, node0.isOptionalArg());
//       assertEquals(false, node0.isWhile());
//       assertEquals(false, node0.isNoSideEffectsCall());
//       assertEquals(false, node0.isBlock());
//       assertEquals(false, node0.isThis());
//       assertEquals(false, node0.isReturn());
//       assertEquals(false, node0.isTry());
//       assertEquals(false, node0.isInstanceOf());
//       assertEquals(false, node0.isSetterDef());
//       assertEquals(false, node0.isStringKey());
//       assertEquals(false, node0.isSwitch());
//       assertEquals(false, node0.isDelProp());
//       assertEquals(true, node0.hasChildren());
//       assertEquals(false, node0.isNull());
//       assertEquals(false, node0.isDec());
//       assertEquals(false, node0.isComma());
//       assertEquals(false, node0.isVar());
//       assertEquals(false, node0.isObjectLit());
//       assertEquals(true, node0.isSyntheticBlock());
//       assertEquals(false, node0.isCase());
//       assertEquals(true, node0.mayMutateArguments());
//       assertEquals(1, node0.getLineno());
//       assertEquals(false, node0.isArrayLit());
//       assertEquals(false, node0.isThrow());
//       assertEquals(false, node0.isVoid());
//       assertEquals(false, node0.isDefaultCase());
//       assertEquals(false, node0.isDo());
//       assertEquals(false, node0.isLabelName());
//       assertEquals(false, node0.isEmpty());
//       assertEquals(false, node0.isFalse());
//       assertEquals(0, node0.getSideEffectFlags());
//       assertEquals(false, node0.isNE());
//       assertEquals(false, node0.isNumber());
//       assertEquals(false, node0.isVarArgs());
//       assertEquals(false, node0.isExprResult());
//       assertEquals(0, node0.getLength());
//       assertEquals(false, node0.isWith());
//       assertEquals(false, node0.isGetElem());
//       assertEquals(false, node0.hasMoreThanOneChild());
//       assertEquals(false, node0.isParamList());
//       assertEquals(false, node0.isRegExp());
//       assertEquals(false, node0.isFunction());
//       assertEquals(false, node0.isLocalResultCall());
//       assertEquals(false, node0.isCatch());
//       assertEquals(false, node0.isNew());
//       assertEquals(4096, node0.getSourcePosition());
//       assertEquals(false, node0.isFor());
//       assertEquals(true, node0.isScript());
//       assertEquals(1, node0.getChildCount());
//       assertEquals(false, node0.isQuotedString());
//       assertEquals(false, node0.isFromExterns());
//       assertEquals(false, node0.isNot());
//       assertEquals(0, compiler0.getWarningCount());
//       assertEquals(false, compiler0.isTypeCheckingEnabled());
//       assertEquals(0, compiler0.getErrorCount());
//       assertEquals(false, compiler0.hasErrors());
//       assertEquals(false, compiler0.acceptConstKeyword());
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
//       assertEquals(false, compiler0.isIdeMode());
//       assertEquals(0.0, compiler0.getProgress(), 0.01D);
//       
//       TypeValidator typeValidator0 = new TypeValidator(compiler0);
//       assertNotNull(typeValidator0);
//       assertEquals(0, compiler0.getWarningCount());
//       assertEquals(false, compiler0.isTypeCheckingEnabled());
//       assertEquals(0, compiler0.getErrorCount());
//       assertEquals(false, compiler0.hasErrors());
//       assertEquals(false, compiler0.acceptConstKeyword());
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
//       assertEquals(false, compiler0.isIdeMode());
//       assertEquals(0.0, compiler0.getProgress(), 0.01D);
//       
//       CheckLevel checkLevel0 = CheckLevel.ERROR;
//       CheckUnreachableCode checkUnreachableCode0 = new CheckUnreachableCode(compiler0, checkLevel0);
//       assertNotNull(checkUnreachableCode0);
//       assertEquals(0, compiler0.getWarningCount());
//       assertEquals(false, compiler0.isTypeCheckingEnabled());
//       assertEquals(0, compiler0.getErrorCount());
//       assertEquals(false, compiler0.hasErrors());
//       assertEquals(false, compiler0.acceptConstKeyword());
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
//       assertEquals(false, compiler0.isIdeMode());
//       assertEquals(0.0, compiler0.getProgress(), 0.01D);
//       
//       NodeTraversal nodeTraversal0 = new NodeTraversal((AbstractCompiler) compiler0, (NodeTraversal.Callback) checkUnreachableCode0);
//       assertNotNull(nodeTraversal0);
//       assertEquals("", nodeTraversal0.getSourceName());
//       assertEquals(0, nodeTraversal0.getLineNumber());
//       assertEquals(0, compiler0.getWarningCount());
//       assertEquals(false, compiler0.isTypeCheckingEnabled());
//       assertEquals(0, compiler0.getErrorCount());
//       assertEquals(false, compiler0.hasErrors());
//       assertEquals(false, compiler0.acceptConstKeyword());
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
//       assertEquals(false, compiler0.isIdeMode());
//       assertEquals(0.0, compiler0.getProgress(), 0.01D);
//       
//       ErrorReporter errorReporter0 = null;
//       JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(errorReporter0);
//       assertNotNull(jSTypeRegistry0);
//       assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
//       
//       JSTypeNative jSTypeNative0 = JSTypeNative.FUNCTION_FUNCTION_TYPE;
//       FunctionType functionType0 = (FunctionType)jSTypeRegistry0.getNativeType(jSTypeNative0);
//       assertNotNull(functionType0);
//       assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
//       assertEquals(false, functionType0.isNumberValueType());
//       assertEquals(2147483647, functionType0.getMaxArguments());
//       assertEquals(false, functionType0.isInterface());
//       assertEquals(false, functionType0.isNullType());
//       assertEquals(true, functionType0.hasInstanceType());
//       assertEquals(false, functionType0.isFunctionPrototypeType());
//       assertEquals(true, functionType0.isConstructor());
//       assertEquals(false, functionType0.isResolved());
//       assertEquals(0, functionType0.getExtendedInterfacesCount());
//       assertEquals(false, functionType0.isNoObjectType());
//       assertEquals(false, functionType0.isTemplateType());
//       assertEquals(false, functionType0.isBooleanValueType());
//       assertEquals(false, functionType0.isStringValueType());
//       assertEquals(true, functionType0.hasCachedValues());
//       assertEquals(false, functionType0.isNoType());
//       assertEquals(false, functionType0.isNominalType());
//       assertEquals(false, functionType0.isRecordType());
//       assertEquals(false, functionType0.isReturnTypeInferred());
//       assertEquals(true, functionType0.isFunctionType());
//       assertEquals(false, functionType0.isUnionType());
//       assertEquals(true, functionType0.isNominalConstructor());
//       assertEquals(false, functionType0.isVoidType());
//       assertEquals(false, functionType0.isTemplatizedType());
//       assertEquals(true, functionType0.canBeCalled());
//       assertEquals(false, functionType0.isAllType());
//       assertEquals(false, functionType0.isEnumElementType());
//       assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
//       assertEquals(false, functionType0.isCheckedUnknownType());
//       assertEquals(false, functionType0.isEnumType());
//       assertEquals(false, functionType0.isOrdinaryFunction());
//       assertEquals(false, functionType0.isNoResolvedType());
//       
//       FunctionType functionType1 = JSType.toMaybeFunctionType((JSType) functionType0);
//       assertNotNull(functionType1);
//       assertSame(functionType0, functionType1);
//       assertSame(functionType1, functionType0);
//       assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
//       assertEquals(false, functionType0.isNumberValueType());
//       assertEquals(2147483647, functionType0.getMaxArguments());
//       assertEquals(false, functionType0.isInterface());
//       assertEquals(false, functionType0.isNullType());
//       assertEquals(true, functionType0.hasInstanceType());
//       assertEquals(false, functionType0.isFunctionPrototypeType());
//       assertEquals(true, functionType0.isConstructor());
//       assertEquals(false, functionType0.isResolved());
//       assertEquals(0, functionType0.getExtendedInterfacesCount());
//       assertEquals(false, functionType0.isNoObjectType());
//       assertEquals(false, functionType0.isTemplateType());
//       assertEquals(false, functionType0.isBooleanValueType());
//       assertEquals(false, functionType0.isStringValueType());
//       assertEquals(true, functionType0.hasCachedValues());
//       assertEquals(false, functionType0.isNoType());
//       assertEquals(false, functionType0.isNominalType());
//       assertEquals(false, functionType0.isRecordType());
//       assertEquals(false, functionType0.isReturnTypeInferred());
//       assertEquals(true, functionType0.isFunctionType());
//       assertEquals(false, functionType0.isUnionType());
//       assertEquals(true, functionType0.isNominalConstructor());
//       assertEquals(false, functionType0.isVoidType());
//       assertEquals(false, functionType0.isTemplatizedType());
//       assertEquals(true, functionType0.canBeCalled());
//       assertEquals(false, functionType0.isAllType());
//       assertEquals(false, functionType0.isEnumElementType());
//       assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
//       assertEquals(false, functionType0.isCheckedUnknownType());
//       assertEquals(false, functionType0.isEnumType());
//       assertEquals(false, functionType0.isOrdinaryFunction());
//       assertEquals(false, functionType0.isNoResolvedType());
//       assertEquals(false, functionType1.isCheckedUnknownType());
//       assertEquals(2147483647, functionType1.getMaxArguments());
//       assertEquals(false, functionType1.isAllType());
//       assertEquals(false, functionType1.isRecordType());
//       assertEquals(false, functionType1.isBooleanValueType());
//       assertEquals(false, functionType1.isResolved());
//       assertEquals(false, functionType1.isStringValueType());
//       assertEquals(false, functionType1.isNoType());
//       assertEquals(false, functionType1.isInterface());
//       assertEquals(false, functionType1.isEnumType());
//       assertEquals(false, functionType1.isNullType());
//       assertEquals(false, functionType1.isReturnTypeInferred());
//       assertEquals(false, functionType1.isNoResolvedType());
//       assertEquals(false, functionType1.isNumberValueType());
//       assertEquals(true, functionType1.canBeCalled());
//       assertEquals(false, functionType1.isVoidType());
//       assertEquals(false, functionType1.isOrdinaryFunction());
//       assertEquals(false, functionType1.isTemplateType());
//       assertEquals(false, functionType1.isEnumElementType());
//       assertEquals(true, functionType1.isConstructor());
//       assertEquals(true, functionType1.isNominalConstructor());
//       assertEquals(false, functionType1.isNominalType());
//       assertEquals(false, functionType1.isFunctionPrototypeType());
//       assertEquals(false, functionType1.isUnionType());
//       assertEquals(false, functionType1.isNoObjectType());
//       assertEquals(true, functionType1.hasInstanceType());
//       assertEquals(true, functionType1.isFunctionType());
//       assertEquals(true, functionType1.hasCachedValues());
//       assertEquals(false, functionType1.isTemplatizedType());
//       assertEquals(BooleanLiteralSet.TRUE, functionType1.getPossibleToBooleanOutcomes());
//       assertEquals(0, functionType1.getExtendedInterfacesCount());
//       
//       ObjectType objectType0 = jSTypeRegistry0.createObjectType(string0, node0, (ObjectType) functionType1);
//       assertNotNull(objectType0);
//       assertSame(functionType0, functionType1);
//       assertSame(functionType1, functionType0);
//       assertEquals("[testcode]", node0.getSourceFileName());
//       assertEquals(true, node0.mayMutateGlobalStateOrThrow());
//       assertEquals(false, node0.isGetProp());
//       assertEquals(false, node0.isHook());
//       assertEquals(false, node0.isName());
//       assertEquals(false, node0.isString());
//       assertEquals(false, node0.isBreak());
//       assertEquals(false, node0.isLabel());
//       assertEquals(false, node0.isAnd());
//       assertEquals(false, node0.isTypeOf());
//       assertEquals(false, node0.isIn());
//       assertEquals(false, node0.isCall());
//       assertEquals(0, node0.getCharno());
//       assertEquals(false, node0.isOr());
//       assertEquals(132, node0.getType());
//       assertEquals(false, node0.isIf());
//       assertEquals(0, node0.getChangeTime());
//       assertEquals(false, node0.isContinue());
//       assertEquals(false, node0.isOnlyModifiesArgumentsCall());
//       assertEquals(true, node0.hasOneChild());
//       assertEquals(false, node0.isCast());
//       assertEquals(false, node0.isInc());
//       assertEquals(false, node0.wasEmptyNode());
//       assertEquals(false, node0.isGetterDef());
//       assertEquals(false, node0.isAssignAdd());
//       assertEquals(false, node0.isTrue());
//       assertEquals(false, node0.isAssign());
//       assertEquals(false, node0.isOnlyModifiesThisCall());
//       assertEquals(false, node0.isAdd());
//       assertEquals(false, node0.isDebugger());
//       assertEquals(false, node0.isOptionalArg());
//       assertEquals(false, node0.isWhile());
//       assertEquals(false, node0.isNoSideEffectsCall());
//       assertEquals(false, node0.isBlock());
//       assertEquals(false, node0.isThis());
//       assertEquals(false, node0.isReturn());
//       assertEquals(false, node0.isTry());
//       assertEquals(false, node0.isInstanceOf());
//       assertEquals(false, node0.isSetterDef());
//       assertEquals(false, node0.isStringKey());
//       assertEquals(false, node0.isSwitch());
//       assertEquals(false, node0.isDelProp());
//       assertEquals(true, node0.hasChildren());
//       assertEquals(false, node0.isNull());
//       assertEquals(false, node0.isDec());
//       assertEquals(false, node0.isComma());
//       assertEquals(false, node0.isVar());
//       assertEquals(false, node0.isObjectLit());
//       assertEquals(true, node0.isSyntheticBlock());
//       assertEquals(false, node0.isCase());
//       assertEquals(true, node0.mayMutateArguments());
//       assertEquals(1, node0.getLineno());
//       assertEquals(false, node0.isArrayLit());
//       assertEquals(false, node0.isThrow());
//       assertEquals(false, node0.isVoid());
//       assertEquals(false, node0.isDefaultCase());
//       assertEquals(false, node0.isDo());
//       assertEquals(false, node0.isLabelName());
//       assertEquals(false, node0.isEmpty());
//       assertEquals(false, node0.isFalse());
//       assertEquals(0, node0.getSideEffectFlags());
//       assertEquals(false, node0.isNE());
//       assertEquals(false, node0.isNumber());
//       assertEquals(false, node0.isVarArgs());
//       assertEquals(false, node0.isExprResult());
//       assertEquals(0, node0.getLength());
//       assertEquals(false, node0.isWith());
//       assertEquals(false, node0.isGetElem());
//       assertEquals(false, node0.hasMoreThanOneChild());
//       assertEquals(false, node0.isParamList());
//       assertEquals(false, node0.isRegExp());
//       assertEquals(false, node0.isFunction());
//       assertEquals(false, node0.isLocalResultCall());
//       assertEquals(false, node0.isCatch());
//       assertEquals(false, node0.isNew());
//       assertEquals(4096, node0.getSourcePosition());
//       assertEquals(false, node0.isFor());
//       assertEquals(true, node0.isScript());
//       assertEquals(1, node0.getChildCount());
//       assertEquals(false, node0.isQuotedString());
//       assertEquals(false, node0.isFromExterns());
//       assertEquals(false, node0.isNot());
//       assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
//       assertEquals(false, objectType0.isNominalType());
//       assertEquals(false, objectType0.isEnumType());
//       assertEquals(false, objectType0.isVoidType());
//       assertEquals(false, objectType0.hasCachedValues());
//       assertEquals(false, objectType0.isTemplateType());
//       assertEquals(false, objectType0.isAllType());
//       assertEquals(false, objectType0.isResolved());
//       assertEquals(false, objectType0.isOrdinaryFunction());
//       assertEquals(false, objectType0.isCheckedUnknownType());
//       assertEquals(false, objectType0.isFunctionPrototypeType());
//       assertEquals(false, objectType0.isBooleanValueType());
//       assertEquals(false, objectType0.isNominalConstructor());
//       assertEquals(false, objectType0.isNullType());
//       assertEquals(false, objectType0.isConstructor());
//       assertEquals(false, objectType0.isNoObjectType());
//       assertEquals(false, objectType0.isInterface());
//       assertEquals(false, objectType0.isEnumElementType());
//       assertEquals(false, objectType0.isRecordType());
//       assertEquals(false, objectType0.isNoType());
//       assertEquals(false, objectType0.isUnionType());
//       assertEquals(false, objectType0.isTemplatizedType());
//       assertEquals(BooleanLiteralSet.TRUE, objectType0.getPossibleToBooleanOutcomes());
//       assertEquals(false, objectType0.isNumberValueType());
//       assertEquals(false, objectType0.isFunctionType());
//       assertEquals(false, objectType0.isNativeObjectType());
//       assertEquals(true, objectType0.hasReferenceName());
//       assertEquals(false, objectType0.isNoResolvedType());
//       assertEquals(false, objectType0.isStringValueType());
//       assertEquals(0, compiler0.getWarningCount());
//       assertEquals(false, compiler0.isTypeCheckingEnabled());
//       assertEquals(0, compiler0.getErrorCount());
//       assertEquals(false, compiler0.hasErrors());
//       assertEquals(false, compiler0.acceptConstKeyword());
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
//       assertEquals(false, compiler0.isIdeMode());
//       assertEquals(0.0, compiler0.getProgress(), 0.01D);
//       assertEquals(false, functionType0.isNumberValueType());
//       assertEquals(2147483647, functionType0.getMaxArguments());
//       assertEquals(false, functionType0.isInterface());
//       assertEquals(false, functionType0.isNullType());
//       assertEquals(true, functionType0.hasInstanceType());
//       assertEquals(false, functionType0.isFunctionPrototypeType());
//       assertEquals(true, functionType0.isConstructor());
//       assertEquals(false, functionType0.isResolved());
//       assertEquals(0, functionType0.getExtendedInterfacesCount());
//       assertEquals(false, functionType0.isNoObjectType());
//       assertEquals(false, functionType0.isTemplateType());
//       assertEquals(false, functionType0.isBooleanValueType());
//       assertEquals(false, functionType0.isStringValueType());
//       assertEquals(true, functionType0.hasCachedValues());
//       assertEquals(false, functionType0.isNoType());
//       assertEquals(false, functionType0.isNominalType());
//       assertEquals(false, functionType0.isRecordType());
//       assertEquals(false, functionType0.isReturnTypeInferred());
//       assertEquals(true, functionType0.isFunctionType());
//       assertEquals(false, functionType0.isUnionType());
//       assertEquals(true, functionType0.isNominalConstructor());
//       assertEquals(false, functionType0.isVoidType());
//       assertEquals(false, functionType0.isTemplatizedType());
//       assertEquals(true, functionType0.canBeCalled());
//       assertEquals(false, functionType0.isAllType());
//       assertEquals(false, functionType0.isEnumElementType());
//       assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
//       assertEquals(false, functionType0.isCheckedUnknownType());
//       assertEquals(false, functionType0.isEnumType());
//       assertEquals(false, functionType0.isOrdinaryFunction());
//       assertEquals(false, functionType0.isNoResolvedType());
//       assertEquals(false, functionType1.isCheckedUnknownType());
//       assertEquals(2147483647, functionType1.getMaxArguments());
//       assertEquals(false, functionType1.isAllType());
//       assertEquals(false, functionType1.isRecordType());
//       assertEquals(false, functionType1.isBooleanValueType());
//       assertEquals(false, functionType1.isResolved());
//       assertEquals(false, functionType1.isStringValueType());
//       assertEquals(false, functionType1.isNoType());
//       assertEquals(false, functionType1.isInterface());
//       assertEquals(false, functionType1.isEnumType());
//       assertEquals(false, functionType1.isNullType());
//       assertEquals(false, functionType1.isReturnTypeInferred());
//       assertEquals(false, functionType1.isNoResolvedType());
//       assertEquals(false, functionType1.isNumberValueType());
//       assertEquals(true, functionType1.canBeCalled());
//       assertEquals(false, functionType1.isVoidType());
//       assertEquals(false, functionType1.isOrdinaryFunction());
//       assertEquals(false, functionType1.isTemplateType());
//       assertEquals(false, functionType1.isEnumElementType());
//       assertEquals(true, functionType1.isConstructor());
//       assertEquals(true, functionType1.isNominalConstructor());
//       assertEquals(false, functionType1.isNominalType());
//       assertEquals(false, functionType1.isFunctionPrototypeType());
//       assertEquals(false, functionType1.isUnionType());
//       assertEquals(false, functionType1.isNoObjectType());
//       assertEquals(true, functionType1.hasInstanceType());
//       assertEquals(true, functionType1.isFunctionType());
//       assertEquals(true, functionType1.hasCachedValues());
//       assertEquals(false, functionType1.isTemplatizedType());
//       assertEquals(BooleanLiteralSet.TRUE, functionType1.getPossibleToBooleanOutcomes());
//       assertEquals(0, functionType1.getExtendedInterfacesCount());
//       
//       int int0 = 3429;
//       typeValidator0.expectArgumentMatchesParameter(nodeTraversal0, node0, functionType0, objectType0, node0, int0);
//       assertSame(functionType0, functionType1);
//       assertSame(functionType1, functionType0);
//       assertEquals("", nodeTraversal0.getSourceName());
//       assertEquals(0, nodeTraversal0.getLineNumber());
//       assertEquals("[testcode]", node0.getSourceFileName());
//       assertEquals(true, node0.mayMutateGlobalStateOrThrow());
//       assertEquals(false, node0.isGetProp());
//       assertEquals(false, node0.isHook());
//       assertEquals(false, node0.isName());
//       assertEquals(false, node0.isString());
//       assertEquals(false, node0.isBreak());
//       assertEquals(false, node0.isLabel());
//       assertEquals(false, node0.isAnd());
//       assertEquals(false, node0.isTypeOf());
//       assertEquals(false, node0.isIn());
//       assertEquals(false, node0.isCall());
//       assertEquals(0, node0.getCharno());
//       assertEquals(false, node0.isOr());
//       assertEquals(132, node0.getType());
//       assertEquals(false, node0.isIf());
//       assertEquals(0, node0.getChangeTime());
//       assertEquals(false, node0.isContinue());
//       assertEquals(false, node0.isOnlyModifiesArgumentsCall());
//       assertEquals(true, node0.hasOneChild());
//       assertEquals(false, node0.isCast());
//       assertEquals(false, node0.isInc());
//       assertEquals(false, node0.wasEmptyNode());
//       assertEquals(false, node0.isGetterDef());
//       assertEquals(false, node0.isAssignAdd());
//       assertEquals(false, node0.isTrue());
//       assertEquals(false, node0.isAssign());
//       assertEquals(false, node0.isOnlyModifiesThisCall());
//       assertEquals(false, node0.isAdd());
//       assertEquals(false, node0.isDebugger());
//       assertEquals(false, node0.isOptionalArg());
//       assertEquals(false, node0.isWhile());
//       assertEquals(false, node0.isNoSideEffectsCall());
//       assertEquals(false, node0.isBlock());
//       assertEquals(false, node0.isThis());
//       assertEquals(false, node0.isReturn());
//       assertEquals(false, node0.isTry());
//       assertEquals(false, node0.isInstanceOf());
//       assertEquals(false, node0.isSetterDef());
//       assertEquals(false, node0.isStringKey());
//       assertEquals(false, node0.isSwitch());
//       assertEquals(false, node0.isDelProp());
//       assertEquals(true, node0.hasChildren());
//       assertEquals(false, node0.isNull());
//       assertEquals(false, node0.isDec());
//       assertEquals(false, node0.isComma());
//       assertEquals(false, node0.isVar());
//       assertEquals(false, node0.isObjectLit());
//       assertEquals(true, node0.isSyntheticBlock());
//       assertEquals(false, node0.isCase());
//       assertEquals(true, node0.mayMutateArguments());
//       assertEquals(1, node0.getLineno());
//       assertEquals(false, node0.isArrayLit());
//       assertEquals(false, node0.isThrow());
//       assertEquals(false, node0.isVoid());
//       assertEquals(false, node0.isDefaultCase());
//       assertEquals(false, node0.isDo());
//       assertEquals(false, node0.isLabelName());
//       assertEquals(false, node0.isEmpty());
//       assertEquals(false, node0.isFalse());
//       assertEquals(0, node0.getSideEffectFlags());
//       assertEquals(false, node0.isNE());
//       assertEquals(false, node0.isNumber());
//       assertEquals(false, node0.isVarArgs());
//       assertEquals(false, node0.isExprResult());
//       assertEquals(0, node0.getLength());
//       assertEquals(false, node0.isWith());
//       assertEquals(false, node0.isGetElem());
//       assertEquals(false, node0.hasMoreThanOneChild());
//       assertEquals(false, node0.isParamList());
//       assertEquals(false, node0.isRegExp());
//       assertEquals(false, node0.isFunction());
//       assertEquals(false, node0.isLocalResultCall());
//       assertEquals(false, node0.isCatch());
//       assertEquals(false, node0.isNew());
//       assertEquals(4096, node0.getSourcePosition());
//       assertEquals(false, node0.isFor());
//       assertEquals(true, node0.isScript());
//       assertEquals(1, node0.getChildCount());
//       assertEquals(false, node0.isQuotedString());
//       assertEquals(false, node0.isFromExterns());
//       assertEquals(false, node0.isNot());
//       assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
//       assertEquals(false, objectType0.isNominalType());
//       assertEquals(false, objectType0.isEnumType());
//       assertEquals(false, objectType0.isVoidType());
//       assertEquals(false, objectType0.isTemplateType());
//       assertEquals(false, objectType0.isAllType());
//       assertEquals(true, objectType0.hasCachedValues());
//       assertEquals(false, objectType0.isResolved());
//       assertEquals(false, objectType0.isOrdinaryFunction());
//       assertEquals(false, objectType0.isCheckedUnknownType());
//       assertEquals(false, objectType0.isFunctionPrototypeType());
//       assertEquals(false, objectType0.isBooleanValueType());
//       assertEquals(false, objectType0.isNominalConstructor());
//       assertEquals(false, objectType0.isNullType());
//       assertEquals(false, objectType0.isConstructor());
//       assertEquals(false, objectType0.isNoObjectType());
//       assertEquals(false, objectType0.isInterface());
//       assertEquals(false, objectType0.isEnumElementType());
//       assertEquals(false, objectType0.isRecordType());
//       assertEquals(false, objectType0.isNoType());
//       assertEquals(false, objectType0.isUnionType());
//       assertEquals(false, objectType0.isTemplatizedType());
//       assertEquals(BooleanLiteralSet.TRUE, objectType0.getPossibleToBooleanOutcomes());
//       assertEquals(false, objectType0.isNumberValueType());
//       assertEquals(false, objectType0.isFunctionType());
//       assertEquals(false, objectType0.isNativeObjectType());
//       assertEquals(true, objectType0.hasReferenceName());
//       assertEquals(false, objectType0.isNoResolvedType());
//       assertEquals(false, objectType0.isStringValueType());
//       assertEquals(false, compiler0.isTypeCheckingEnabled());
//       assertEquals(1, compiler0.getWarningCount());
//       assertEquals(0, compiler0.getErrorCount());
//       assertEquals(false, compiler0.hasErrors());
//       assertEquals(false, compiler0.acceptConstKeyword());
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
//       assertEquals(false, compiler0.isIdeMode());
//       assertEquals(0.0, compiler0.getProgress(), 0.01D);
//       assertEquals(false, functionType0.isNumberValueType());
//       assertEquals(2147483647, functionType0.getMaxArguments());
//       assertEquals(false, functionType0.isInterface());
//       assertEquals(false, functionType0.isNullType());
//       assertEquals(true, functionType0.hasInstanceType());
//       assertEquals(false, functionType0.isFunctionPrototypeType());
//       assertEquals(true, functionType0.isConstructor());
//       assertEquals(false, functionType0.isResolved());
//       assertEquals(0, functionType0.getExtendedInterfacesCount());
//       assertEquals(false, functionType0.isNoObjectType());
//       assertEquals(false, functionType0.isTemplateType());
//       assertEquals(false, functionType0.isBooleanValueType());
//       assertEquals(false, functionType0.isStringValueType());
//       assertEquals(true, functionType0.hasCachedValues());
//       assertEquals(false, functionType0.isNoType());
//       assertEquals(false, functionType0.isNominalType());
//       assertEquals(false, functionType0.isRecordType());
//       assertEquals(false, functionType0.isReturnTypeInferred());
//       assertEquals(true, functionType0.isFunctionType());
//       assertEquals(false, functionType0.isUnionType());
//       assertEquals(true, functionType0.isNominalConstructor());
//       assertEquals(false, functionType0.isVoidType());
//       assertEquals(false, functionType0.isTemplatizedType());
//       assertEquals(true, functionType0.canBeCalled());
//       assertEquals(false, functionType0.isAllType());
//       assertEquals(false, functionType0.isEnumElementType());
//       assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
//       assertEquals(false, functionType0.isCheckedUnknownType());
//       assertEquals(false, functionType0.isEnumType());
//       assertEquals(false, functionType0.isOrdinaryFunction());
//       assertEquals(false, functionType0.isNoResolvedType());
//       assertEquals(false, functionType1.isCheckedUnknownType());
//       assertEquals(2147483647, functionType1.getMaxArguments());
//       assertEquals(false, functionType1.isAllType());
//       assertEquals(false, functionType1.isRecordType());
//       assertEquals(false, functionType1.isBooleanValueType());
//       assertEquals(false, functionType1.isResolved());
//       assertEquals(false, functionType1.isStringValueType());
//       assertEquals(false, functionType1.isNoType());
//       assertEquals(false, functionType1.isInterface());
//       assertEquals(false, functionType1.isEnumType());
//       assertEquals(false, functionType1.isNullType());
//       assertEquals(false, functionType1.isReturnTypeInferred());
//       assertEquals(false, functionType1.isNoResolvedType());
//       assertEquals(false, functionType1.isNumberValueType());
//       assertEquals(true, functionType1.canBeCalled());
//       assertEquals(false, functionType1.isVoidType());
//       assertEquals(false, functionType1.isOrdinaryFunction());
//       assertEquals(false, functionType1.isTemplateType());
//       assertEquals(false, functionType1.isEnumElementType());
//       assertEquals(true, functionType1.isConstructor());
//       assertEquals(true, functionType1.isNominalConstructor());
//       assertEquals(false, functionType1.isNominalType());
//       assertEquals(false, functionType1.isFunctionPrototypeType());
//       assertEquals(false, functionType1.isUnionType());
//       assertEquals(false, functionType1.isNoObjectType());
//       assertEquals(true, functionType1.hasInstanceType());
//       assertEquals(true, functionType1.isFunctionType());
//       assertEquals(true, functionType1.hasCachedValues());
//       assertEquals(false, functionType1.isTemplatizedType());
//       assertEquals(BooleanLiteralSet.TRUE, functionType1.getPossibleToBooleanOutcomes());
//       assertEquals(0, functionType1.getExtendedInterfacesCount());
//   }

  @Test
  public void test13()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      assertNotNull(compiler0);
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      
      String string0 = "";
      Node node0 = compiler0.parseTestCode(string0);
      assertNotNull(node0);
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isObjectLit());
      assertEquals(0, node0.getCharno());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isCatch());
      assertEquals(true, node0.mayMutateArguments());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isGetElem());
      assertEquals("[testcode]", node0.getSourceFileName());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(0, node0.getChangeTime());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isOnlyModifiesArgumentsCall());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isComma());
      assertEquals(0, node0.getLength());
      assertEquals(true, node0.isScript());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isArrayLit());
      assertEquals(1, node0.getLineno());
      assertEquals(true, node0.mayMutateGlobalStateOrThrow());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.hasChildren());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isString());
      assertEquals(132, node0.getType());
      assertEquals(false, node0.isStringKey());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isCast());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isLabel());
      assertEquals(4096, node0.getSourcePosition());
      assertEquals(false, node0.isNull());
      assertEquals(true, node0.isSyntheticBlock());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isNot());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(false, compiler0.hasErrors());
      
      TypeValidator typeValidator0 = new TypeValidator(compiler0);
      assertNotNull(typeValidator0);
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(false, compiler0.hasErrors());
      
      boolean boolean0 = false;
      String string1 = typeValidator0.getReadableJSTypeName(node0, boolean0);
      assertNotNull(string1);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isObjectLit());
      assertEquals(0, node0.getCharno());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isCatch());
      assertEquals(true, node0.mayMutateArguments());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isGetElem());
      assertEquals("[testcode]", node0.getSourceFileName());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(0, node0.getChangeTime());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isOnlyModifiesArgumentsCall());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isComma());
      assertEquals(0, node0.getLength());
      assertEquals(true, node0.isScript());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isArrayLit());
      assertEquals(1, node0.getLineno());
      assertEquals(true, node0.mayMutateGlobalStateOrThrow());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.hasChildren());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isString());
      assertEquals(132, node0.getType());
      assertEquals(false, node0.isStringKey());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isCast());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isLabel());
      assertEquals(4096, node0.getSourcePosition());
      assertEquals(false, node0.isNull());
      assertEquals(true, node0.isSyntheticBlock());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isNot());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(false, compiler0.hasErrors());
      assertEquals("?", string1);
      
      InferJSDocInfo inferJSDocInfo0 = new InferJSDocInfo(compiler0);
      assertNotNull(inferJSDocInfo0);
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(false, compiler0.hasErrors());
      
      NodeTraversal nodeTraversal0 = new NodeTraversal((AbstractCompiler) compiler0, (NodeTraversal.Callback) inferJSDocInfo0);
      assertNotNull(nodeTraversal0);
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(0, nodeTraversal0.getLineNumber());
      assertEquals("", nodeTraversal0.getSourceName());
      
      JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
      assertNotNull(jSTypeRegistry0);
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      Scope scope0 = Scope.createGlobalScope(node0);
      assertNotNull(scope0);
      assertNotSame(string0, string1);
      assertFalse(string0.equals((Object)string1));
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isObjectLit());
      assertEquals(0, node0.getCharno());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isCatch());
      assertEquals(true, node0.mayMutateArguments());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isGetElem());
      assertEquals("[testcode]", node0.getSourceFileName());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(0, node0.getChangeTime());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isOnlyModifiesArgumentsCall());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isComma());
      assertEquals(0, node0.getLength());
      assertEquals(true, node0.isScript());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isArrayLit());
      assertEquals(1, node0.getLineno());
      assertEquals(true, node0.mayMutateGlobalStateOrThrow());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.hasChildren());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isString());
      assertEquals(132, node0.getType());
      assertEquals(false, node0.isStringKey());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isCast());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isLabel());
      assertEquals(4096, node0.getSourcePosition());
      assertEquals(false, node0.isNull());
      assertEquals(true, node0.isSyntheticBlock());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isNot());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(true, scope0.isGlobal());
      assertEquals(0, scope0.getVarCount());
      assertEquals(false, scope0.isLocal());
      
      int int0 = (-1544);
      JSType jSType0 = jSTypeRegistry0.getType((StaticScope<JSType>) scope0, string1, string1, int0, int0);
      assertNotNull(jSType0);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isObjectLit());
      assertEquals(0, node0.getCharno());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isCatch());
      assertEquals(true, node0.mayMutateArguments());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isGetElem());
      assertEquals("[testcode]", node0.getSourceFileName());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(0, node0.getChangeTime());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isOnlyModifiesArgumentsCall());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isComma());
      assertEquals(0, node0.getLength());
      assertEquals(true, node0.isScript());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isArrayLit());
      assertEquals(1, node0.getLineno());
      assertEquals(true, node0.mayMutateGlobalStateOrThrow());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.hasChildren());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isString());
      assertEquals(132, node0.getType());
      assertEquals(false, node0.isStringKey());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isCast());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isLabel());
      assertEquals(4096, node0.getSourcePosition());
      assertEquals(false, node0.isNull());
      assertEquals(true, node0.isSyntheticBlock());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isNot());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(true, scope0.isGlobal());
      assertEquals(0, scope0.getVarCount());
      assertEquals(false, scope0.isLocal());
      assertEquals(false, jSType0.isAllType());
      assertEquals(false, jSType0.isEnumType());
      assertEquals(false, jSType0.isNullType());
      assertEquals(true, jSType0.isNominalType());
      assertEquals(false, jSType0.isNominalConstructor());
      assertEquals(false, jSType0.isStringValueType());
      assertEquals(false, jSType0.isConstructor());
      assertEquals(false, jSType0.isInterface());
      assertEquals(false, jSType0.isNoType());
      assertEquals(false, jSType0.isVoidType());
      assertEquals(false, jSType0.isTemplatizedType());
      assertEquals(false, jSType0.isResolved());
      assertEquals(false, jSType0.isNumberValueType());
      assertEquals(false, jSType0.isOrdinaryFunction());
      assertEquals(false, jSType0.isRecordType());
      assertEquals(false, jSType0.isNoResolvedType());
      assertEquals(false, jSType0.isEnumElementType());
      assertEquals(false, jSType0.isCheckedUnknownType());
      assertEquals(false, jSType0.isBooleanValueType());
      assertEquals(false, jSType0.isFunctionPrototypeType());
      assertEquals(false, jSType0.isUnionType());
      assertEquals(false, jSType0.isFunctionType());
      assertEquals(false, jSType0.isTemplateType());
      assertEquals(false, jSType0.isNoObjectType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      typeValidator0.expectArgumentMatchesParameter(nodeTraversal0, node0, jSType0, jSType0, node0, int0);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isObjectLit());
      assertEquals(0, node0.getCharno());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isCatch());
      assertEquals(true, node0.mayMutateArguments());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isGetElem());
      assertEquals("[testcode]", node0.getSourceFileName());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(0, node0.getChangeTime());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isOnlyModifiesArgumentsCall());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isComma());
      assertEquals(0, node0.getLength());
      assertEquals(true, node0.isScript());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isArrayLit());
      assertEquals(1, node0.getLineno());
      assertEquals(true, node0.mayMutateGlobalStateOrThrow());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.hasChildren());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isString());
      assertEquals(132, node0.getType());
      assertEquals(false, node0.isStringKey());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isCast());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isLabel());
      assertEquals(4096, node0.getSourcePosition());
      assertEquals(false, node0.isNull());
      assertEquals(true, node0.isSyntheticBlock());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isNot());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(true, scope0.isGlobal());
      assertEquals(0, scope0.getVarCount());
      assertEquals(false, scope0.isLocal());
      assertEquals(false, jSType0.isAllType());
      assertEquals(false, jSType0.isEnumType());
      assertEquals(false, jSType0.isNullType());
      assertEquals(true, jSType0.isNominalType());
      assertEquals(false, jSType0.isNominalConstructor());
      assertEquals(false, jSType0.isStringValueType());
      assertEquals(false, jSType0.isConstructor());
      assertEquals(false, jSType0.isInterface());
      assertEquals(false, jSType0.isNoType());
      assertEquals(false, jSType0.isVoidType());
      assertEquals(false, jSType0.isTemplatizedType());
      assertEquals(false, jSType0.isResolved());
      assertEquals(false, jSType0.isNumberValueType());
      assertEquals(false, jSType0.isOrdinaryFunction());
      assertEquals(false, jSType0.isRecordType());
      assertEquals(false, jSType0.isNoResolvedType());
      assertEquals(false, jSType0.isEnumElementType());
      assertEquals(false, jSType0.isCheckedUnknownType());
      assertEquals(false, jSType0.isBooleanValueType());
      assertEquals(false, jSType0.isFunctionPrototypeType());
      assertEquals(false, jSType0.isUnionType());
      assertEquals(false, jSType0.isFunctionType());
      assertEquals(false, jSType0.isTemplateType());
      assertEquals(false, jSType0.isNoObjectType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(0, nodeTraversal0.getLineNumber());
      assertEquals("", nodeTraversal0.getSourceName());
  }

  @Test
  public void test14() {}
//   @Test
//   public void test14()  throws Throwable  {
//       Compiler compiler0 = new Compiler();
//       assertNotNull(compiler0);
//       assertEquals(0.0, compiler0.getProgress(), 0.01D);
//       
//       String string0 = "&";
//       Node node0 = compiler0.parseTestCode(string0);
//       assertNotNull(node0);
//       assertEquals(false, node0.isAnd());
//       assertEquals(false, node0.isExprResult());
//       assertEquals(0, node0.getLength());
//       assertEquals(false, node0.isDefaultCase());
//       assertEquals(false, node0.wasEmptyNode());
//       assertEquals(false, node0.isTypeOf());
//       assertEquals(false, node0.isEmpty());
//       assertEquals(false, node0.hasOneChild());
//       assertEquals(false, node0.isReturn());
//       assertEquals(false, node0.isAdd());
//       assertEquals(false, node0.isCall());
//       assertEquals(-1, node0.getLineno());
//       assertEquals(false, node0.isWith());
//       assertEquals(false, node0.isComma());
//       assertEquals(false, node0.hasChildren());
//       assertEquals(false, node0.isName());
//       assertEquals(false, node0.isQuotedString());
//       assertEquals(false, node0.isVar());
//       assertEquals(false, node0.isFunction());
//       assertEquals(false, node0.isNoSideEffectsCall());
//       assertEquals(false, node0.isDelProp());
//       assertEquals(false, node0.isFor());
//       assertEquals(false, node0.isLabelName());
//       assertEquals(false, node0.isVarArgs());
//       assertEquals(false, node0.isStringKey());
//       assertEquals(false, node0.isSetterDef());
//       assertEquals(false, node0.isIf());
//       assertEquals(false, node0.isDebugger());
//       assertEquals(false, node0.isFromExterns());
//       assertEquals(false, node0.isGetterDef());
//       assertEquals(false, node0.isParamList());
//       assertEquals(false, node0.isSyntheticBlock());
//       assertEquals(false, node0.isSwitch());
//       assertEquals(false, node0.isWhile());
//       assertEquals(false, node0.isObjectLit());
//       assertEquals(false, node0.isIn());
//       assertEquals(false, node0.isInstanceOf());
//       assertEquals(false, node0.isArrayLit());
//       assertEquals(false, node0.isInc());
//       assertEquals(false, node0.isNumber());
//       assertEquals(false, node0.isOnlyModifiesArgumentsCall());
//       assertEquals(false, node0.isAssign());
//       assertEquals(false, node0.isNew());
//       assertEquals(false, node0.isGetProp());
//       assertEquals(false, node0.isNE());
//       assertEquals(false, node0.isLabel());
//       assertEquals(false, node0.isThis());
//       assertEquals(false, node0.isContinue());
//       assertEquals(false, node0.isOr());
//       assertEquals(false, node0.isCase());
//       assertEquals(true, node0.mayMutateGlobalStateOrThrow());
//       assertEquals(false, node0.hasMoreThanOneChild());
//       assertEquals(false, node0.isDec());
//       assertEquals(false, node0.isLocalResultCall());
//       assertEquals(0, node0.getSideEffectFlags());
//       assertEquals(-1, node0.getSourcePosition());
//       assertEquals(false, node0.isHook());
//       assertEquals(0, node0.getChangeTime());
//       assertEquals(false, node0.isGetElem());
//       assertEquals(false, node0.isVoid());
//       assertEquals(0, node0.getChildCount());
//       assertEquals(-1, node0.getCharno());
//       assertEquals(false, node0.isDo());
//       assertEquals(false, node0.isOnlyModifiesThisCall());
//       assertEquals(false, node0.isTry());
//       assertEquals(false, node0.isNull());
//       assertEquals(false, node0.isThrow());
//       assertEquals("[testcode]", node0.getSourceFileName());
//       assertEquals(false, node0.isCatch());
//       assertEquals(false, node0.isFalse());
//       assertEquals(true, node0.mayMutateArguments());
//       assertEquals(false, node0.isBlock());
//       assertEquals(false, node0.isString());
//       assertEquals(false, node0.isRegExp());
//       assertEquals(true, node0.isScript());
//       assertEquals(false, node0.isOptionalArg());
//       assertEquals(132, node0.getType());
//       assertEquals(false, node0.isCast());
//       assertEquals(false, node0.isAssignAdd());
//       assertEquals(false, node0.isNot());
//       assertEquals(false, node0.isTrue());
//       assertEquals(false, node0.isBreak());
//       assertEquals(0.0, compiler0.getProgress(), 0.01D);
//       assertEquals(true, compiler0.hasErrors());
//       assertEquals(0, compiler0.getWarningCount());
//       assertEquals(false, compiler0.isIdeMode());
//       assertEquals(false, compiler0.acceptConstKeyword());
//       assertEquals(false, compiler0.isTypeCheckingEnabled());
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
//       assertEquals(1, compiler0.getErrorCount());
//       
//       TypeValidator typeValidator0 = new TypeValidator(compiler0);
//       assertNotNull(typeValidator0);
//       assertEquals(0.0, compiler0.getProgress(), 0.01D);
//       assertEquals(true, compiler0.hasErrors());
//       assertEquals(0, compiler0.getWarningCount());
//       assertEquals(false, compiler0.isIdeMode());
//       assertEquals(false, compiler0.acceptConstKeyword());
//       assertEquals(false, compiler0.isTypeCheckingEnabled());
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
//       assertEquals(1, compiler0.getErrorCount());
//       
//       TightenTypes tightenTypes0 = new TightenTypes(compiler0);
//       assertNotNull(tightenTypes0);
//       assertEquals(0.0, compiler0.getProgress(), 0.01D);
//       assertEquals(true, compiler0.hasErrors());
//       assertEquals(0, compiler0.getWarningCount());
//       assertEquals(false, compiler0.isIdeMode());
//       assertEquals(false, compiler0.acceptConstKeyword());
//       assertEquals(false, compiler0.isTypeCheckingEnabled());
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
//       assertEquals(1, compiler0.getErrorCount());
//       
//       JSTypeRegistry jSTypeRegistry0 = tightenTypes0.getTypeRegistry();
//       assertNotNull(jSTypeRegistry0);
//       assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
//       assertEquals(0.0, compiler0.getProgress(), 0.01D);
//       assertEquals(true, compiler0.hasErrors());
//       assertEquals(0, compiler0.getWarningCount());
//       assertEquals(false, compiler0.isIdeMode());
//       assertEquals(false, compiler0.acceptConstKeyword());
//       assertEquals(false, compiler0.isTypeCheckingEnabled());
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
//       assertEquals(1, compiler0.getErrorCount());
//       
//       JSTypeNative jSTypeNative0 = JSTypeNative.FUNCTION_INSTANCE_TYPE;
//       JSType jSType0 = jSTypeRegistry0.getNativeType(jSTypeNative0);
//       assertNotNull(jSType0);
//       assertEquals(false, jSType0.isResolved());
//       assertEquals(false, jSType0.isEnumType());
//       assertEquals(false, jSType0.isNoType());
//       assertEquals(false, jSType0.isStringValueType());
//       assertEquals(false, jSType0.isNominalType());
//       assertEquals(false, jSType0.isNumberValueType());
//       assertEquals(false, jSType0.isTemplatizedType());
//       assertEquals(false, jSType0.isCheckedUnknownType());
//       assertEquals(false, jSType0.isNoObjectType());
//       assertEquals(false, jSType0.isVoidType());
//       assertEquals(false, jSType0.isBooleanValueType());
//       assertEquals(true, jSType0.isFunctionType());
//       assertEquals(false, jSType0.isFunctionPrototypeType());
//       assertEquals(false, jSType0.isEnumElementType());
//       assertEquals(false, jSType0.isInterface());
//       assertEquals(true, jSType0.isConstructor());
//       assertEquals(false, jSType0.isAllType());
//       assertEquals(false, jSType0.isNullType());
//       assertEquals(false, jSType0.isTemplateType());
//       assertEquals(false, jSType0.isNoResolvedType());
//       assertEquals(false, jSType0.isRecordType());
//       assertEquals(false, jSType0.isUnionType());
//       assertEquals(false, jSType0.isOrdinaryFunction());
//       assertEquals(true, jSType0.isNominalConstructor());
//       assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
//       assertEquals(0.0, compiler0.getProgress(), 0.01D);
//       assertEquals(true, compiler0.hasErrors());
//       assertEquals(0, compiler0.getWarningCount());
//       assertEquals(false, compiler0.isIdeMode());
//       assertEquals(false, compiler0.acceptConstKeyword());
//       assertEquals(false, compiler0.isTypeCheckingEnabled());
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
//       assertEquals(1, compiler0.getErrorCount());
//       
//       Denormalize denormalize0 = new Denormalize(compiler0);
//       assertNotNull(denormalize0);
//       assertEquals(0.0, compiler0.getProgress(), 0.01D);
//       assertEquals(true, compiler0.hasErrors());
//       assertEquals(0, compiler0.getWarningCount());
//       assertEquals(false, compiler0.isIdeMode());
//       assertEquals(false, compiler0.acceptConstKeyword());
//       assertEquals(false, compiler0.isTypeCheckingEnabled());
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
//       assertEquals(1, compiler0.getErrorCount());
//       
//       NodeTraversal nodeTraversal0 = new NodeTraversal((AbstractCompiler) compiler0, (NodeTraversal.Callback) denormalize0);
//       assertNotNull(nodeTraversal0);
//       assertEquals(0, nodeTraversal0.getLineNumber());
//       assertEquals("", nodeTraversal0.getSourceName());
//       assertEquals(0.0, compiler0.getProgress(), 0.01D);
//       assertEquals(true, compiler0.hasErrors());
//       assertEquals(0, compiler0.getWarningCount());
//       assertEquals(false, compiler0.isIdeMode());
//       assertEquals(false, compiler0.acceptConstKeyword());
//       assertEquals(false, compiler0.isTypeCheckingEnabled());
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
//       assertEquals(1, compiler0.getErrorCount());
//       
//       boolean boolean0 = typeValidator0.expectCanAssignTo(nodeTraversal0, node0, jSType0, jSType0, string0);
//       assertEquals(0, nodeTraversal0.getLineNumber());
//       assertEquals("", nodeTraversal0.getSourceName());
//       assertEquals(false, jSType0.isResolved());
//       assertEquals(false, jSType0.isEnumType());
//       assertEquals(false, jSType0.isNoType());
//       assertEquals(false, jSType0.isStringValueType());
//       assertEquals(false, jSType0.isNominalType());
//       assertEquals(false, jSType0.isNumberValueType());
//       assertEquals(false, jSType0.isTemplatizedType());
//       assertEquals(false, jSType0.isCheckedUnknownType());
//       assertEquals(false, jSType0.isNoObjectType());
//       assertEquals(false, jSType0.isVoidType());
//       assertEquals(false, jSType0.isBooleanValueType());
//       assertEquals(true, jSType0.isFunctionType());
//       assertEquals(false, jSType0.isFunctionPrototypeType());
//       assertEquals(false, jSType0.isEnumElementType());
//       assertEquals(false, jSType0.isInterface());
//       assertEquals(true, jSType0.isConstructor());
//       assertEquals(false, jSType0.isAllType());
//       assertEquals(false, jSType0.isNullType());
//       assertEquals(false, jSType0.isTemplateType());
//       assertEquals(false, jSType0.isNoResolvedType());
//       assertEquals(false, jSType0.isRecordType());
//       assertEquals(false, jSType0.isUnionType());
//       assertEquals(false, jSType0.isOrdinaryFunction());
//       assertEquals(true, jSType0.isNominalConstructor());
//       assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
//       assertEquals(false, node0.isAnd());
//       assertEquals(false, node0.isExprResult());
//       assertEquals(0, node0.getLength());
//       assertEquals(false, node0.isDefaultCase());
//       assertEquals(false, node0.wasEmptyNode());
//       assertEquals(false, node0.isTypeOf());
//       assertEquals(false, node0.isEmpty());
//       assertEquals(false, node0.hasOneChild());
//       assertEquals(false, node0.isReturn());
//       assertEquals(false, node0.isAdd());
//       assertEquals(false, node0.isCall());
//       assertEquals(-1, node0.getLineno());
//       assertEquals(false, node0.isWith());
//       assertEquals(false, node0.isComma());
//       assertEquals(false, node0.hasChildren());
//       assertEquals(false, node0.isName());
//       assertEquals(false, node0.isQuotedString());
//       assertEquals(false, node0.isVar());
//       assertEquals(false, node0.isFunction());
//       assertEquals(false, node0.isNoSideEffectsCall());
//       assertEquals(false, node0.isDelProp());
//       assertEquals(false, node0.isFor());
//       assertEquals(false, node0.isLabelName());
//       assertEquals(false, node0.isVarArgs());
//       assertEquals(false, node0.isStringKey());
//       assertEquals(false, node0.isSetterDef());
//       assertEquals(false, node0.isIf());
//       assertEquals(false, node0.isDebugger());
//       assertEquals(false, node0.isFromExterns());
//       assertEquals(false, node0.isGetterDef());
//       assertEquals(false, node0.isParamList());
//       assertEquals(false, node0.isSyntheticBlock());
//       assertEquals(false, node0.isSwitch());
//       assertEquals(false, node0.isWhile());
//       assertEquals(false, node0.isObjectLit());
//       assertEquals(false, node0.isIn());
//       assertEquals(false, node0.isInstanceOf());
//       assertEquals(false, node0.isArrayLit());
//       assertEquals(false, node0.isInc());
//       assertEquals(false, node0.isNumber());
//       assertEquals(false, node0.isOnlyModifiesArgumentsCall());
//       assertEquals(false, node0.isAssign());
//       assertEquals(false, node0.isNew());
//       assertEquals(false, node0.isGetProp());
//       assertEquals(false, node0.isNE());
//       assertEquals(false, node0.isLabel());
//       assertEquals(false, node0.isThis());
//       assertEquals(false, node0.isContinue());
//       assertEquals(false, node0.isOr());
//       assertEquals(false, node0.isCase());
//       assertEquals(true, node0.mayMutateGlobalStateOrThrow());
//       assertEquals(false, node0.hasMoreThanOneChild());
//       assertEquals(false, node0.isDec());
//       assertEquals(false, node0.isLocalResultCall());
//       assertEquals(0, node0.getSideEffectFlags());
//       assertEquals(-1, node0.getSourcePosition());
//       assertEquals(false, node0.isHook());
//       assertEquals(0, node0.getChangeTime());
//       assertEquals(false, node0.isGetElem());
//       assertEquals(false, node0.isVoid());
//       assertEquals(0, node0.getChildCount());
//       assertEquals(-1, node0.getCharno());
//       assertEquals(false, node0.isDo());
//       assertEquals(false, node0.isOnlyModifiesThisCall());
//       assertEquals(false, node0.isTry());
//       assertEquals(false, node0.isNull());
//       assertEquals(false, node0.isThrow());
//       assertEquals("[testcode]", node0.getSourceFileName());
//       assertEquals(false, node0.isCatch());
//       assertEquals(false, node0.isFalse());
//       assertEquals(true, node0.mayMutateArguments());
//       assertEquals(false, node0.isBlock());
//       assertEquals(false, node0.isString());
//       assertEquals(false, node0.isRegExp());
//       assertEquals(true, node0.isScript());
//       assertEquals(false, node0.isOptionalArg());
//       assertEquals(132, node0.getType());
//       assertEquals(false, node0.isCast());
//       assertEquals(false, node0.isAssignAdd());
//       assertEquals(false, node0.isNot());
//       assertEquals(false, node0.isTrue());
//       assertEquals(false, node0.isBreak());
//       assertEquals(0.0, compiler0.getProgress(), 0.01D);
//       assertEquals(true, compiler0.hasErrors());
//       assertEquals(0, compiler0.getWarningCount());
//       assertEquals(false, compiler0.isIdeMode());
//       assertEquals(false, compiler0.acceptConstKeyword());
//       assertEquals(false, compiler0.isTypeCheckingEnabled());
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
//       assertEquals(1, compiler0.getErrorCount());
//       assertTrue(boolean0);
//   }

  @Test
  public void test15()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      assertNotNull(compiler0);
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      
      String string0 = "";
      Node node0 = compiler0.parseTestCode(string0);
      assertNotNull(node0);
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isCast());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isNE());
      assertEquals(true, node0.isSyntheticBlock());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isTypeOf());
      assertEquals(0, node0.getCharno());
      assertEquals(true, node0.mayMutateArguments());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isTry());
      assertEquals(0, node0.getChangeTime());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isCatch());
      assertEquals(true, node0.isScript());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isStringKey());
      assertEquals(4096, node0.getSourcePosition());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isOnlyModifiesArgumentsCall());
      assertEquals(false, node0.isDec());
      assertEquals(132, node0.getType());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isNew());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isThrow());
      assertEquals(1, node0.getLineno());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isHook());
      assertEquals("[testcode]", node0.getSourceFileName());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isString());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isBreak());
      assertEquals(true, node0.mayMutateGlobalStateOrThrow());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      
      TypeValidator typeValidator0 = new TypeValidator(compiler0);
      assertNotNull(typeValidator0);
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      
      boolean boolean0 = false;
      String string1 = typeValidator0.getReadableJSTypeName(node0, boolean0);
      assertNotNull(string1);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isCast());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isNE());
      assertEquals(true, node0.isSyntheticBlock());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isTypeOf());
      assertEquals(0, node0.getCharno());
      assertEquals(true, node0.mayMutateArguments());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isTry());
      assertEquals(0, node0.getChangeTime());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isCatch());
      assertEquals(true, node0.isScript());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isStringKey());
      assertEquals(4096, node0.getSourcePosition());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isOnlyModifiesArgumentsCall());
      assertEquals(false, node0.isDec());
      assertEquals(132, node0.getType());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isNew());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isThrow());
      assertEquals(1, node0.getLineno());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isHook());
      assertEquals("[testcode]", node0.getSourceFileName());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isString());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isBreak());
      assertEquals(true, node0.mayMutateGlobalStateOrThrow());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals("?", string1);
      
      InferJSDocInfo inferJSDocInfo0 = new InferJSDocInfo(compiler0);
      assertNotNull(inferJSDocInfo0);
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      
      NodeTraversal nodeTraversal0 = new NodeTraversal((AbstractCompiler) compiler0, (NodeTraversal.Callback) inferJSDocInfo0);
      assertNotNull(nodeTraversal0);
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals("", nodeTraversal0.getSourceName());
      assertEquals(0, nodeTraversal0.getLineNumber());
      
      JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
      assertNotNull(jSTypeRegistry0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      
      Scope scope0 = Scope.createGlobalScope(node0);
      assertNotNull(scope0);
      assertNotSame(string0, string1);
      assertFalse(string0.equals((Object)string1));
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isCast());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isNE());
      assertEquals(true, node0.isSyntheticBlock());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isTypeOf());
      assertEquals(0, node0.getCharno());
      assertEquals(true, node0.mayMutateArguments());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isTry());
      assertEquals(0, node0.getChangeTime());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isCatch());
      assertEquals(true, node0.isScript());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isStringKey());
      assertEquals(4096, node0.getSourcePosition());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isOnlyModifiesArgumentsCall());
      assertEquals(false, node0.isDec());
      assertEquals(132, node0.getType());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isNew());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isThrow());
      assertEquals(1, node0.getLineno());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isHook());
      assertEquals("[testcode]", node0.getSourceFileName());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isString());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isBreak());
      assertEquals(true, node0.mayMutateGlobalStateOrThrow());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(false, scope0.isLocal());
      assertEquals(0, scope0.getVarCount());
      assertEquals(true, scope0.isGlobal());
      
      int int0 = (-1544);
      JSType jSType0 = jSTypeRegistry0.getType((StaticScope<JSType>) scope0, string1, string1, int0, int0);
      assertNotNull(jSType0);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertEquals(false, jSType0.isEnumType());
      assertEquals(false, jSType0.isInterface());
      assertEquals(false, jSType0.isRecordType());
      assertEquals(false, jSType0.isConstructor());
      assertEquals(false, jSType0.isCheckedUnknownType());
      assertEquals(false, jSType0.isFunctionPrototypeType());
      assertEquals(false, jSType0.isVoidType());
      assertEquals(false, jSType0.isResolved());
      assertEquals(false, jSType0.isFunctionType());
      assertEquals(false, jSType0.isBooleanValueType());
      assertEquals(false, jSType0.isTemplateType());
      assertEquals(false, jSType0.isNullType());
      assertEquals(true, jSType0.isNominalType());
      assertEquals(false, jSType0.isNominalConstructor());
      assertEquals(false, jSType0.isNoType());
      assertEquals(false, jSType0.isNumberValueType());
      assertEquals(false, jSType0.isOrdinaryFunction());
      assertEquals(false, jSType0.isEnumElementType());
      assertEquals(false, jSType0.isNoResolvedType());
      assertEquals(false, jSType0.isUnionType());
      assertEquals(false, jSType0.isAllType());
      assertEquals(false, jSType0.isStringValueType());
      assertEquals(false, jSType0.isTemplatizedType());
      assertEquals(false, jSType0.isNoObjectType());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isCast());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isNE());
      assertEquals(true, node0.isSyntheticBlock());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isTypeOf());
      assertEquals(0, node0.getCharno());
      assertEquals(true, node0.mayMutateArguments());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isTry());
      assertEquals(0, node0.getChangeTime());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isCatch());
      assertEquals(true, node0.isScript());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isStringKey());
      assertEquals(4096, node0.getSourcePosition());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isOnlyModifiesArgumentsCall());
      assertEquals(false, node0.isDec());
      assertEquals(132, node0.getType());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isNew());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isThrow());
      assertEquals(1, node0.getLineno());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isHook());
      assertEquals("[testcode]", node0.getSourceFileName());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isString());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isBreak());
      assertEquals(true, node0.mayMutateGlobalStateOrThrow());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(false, scope0.isLocal());
      assertEquals(0, scope0.getVarCount());
      assertEquals(true, scope0.isGlobal());
      
      boolean boolean1 = typeValidator0.expectCanAssignToPropertyOf(nodeTraversal0, node0, jSType0, jSType0, node0, string0);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertFalse(boolean0 == boolean1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(boolean1 == boolean0);
      assertFalse(string1.equals((Object)string0));
      assertEquals(false, jSType0.isEnumType());
      assertEquals(false, jSType0.isInterface());
      assertEquals(false, jSType0.isRecordType());
      assertEquals(false, jSType0.isConstructor());
      assertEquals(false, jSType0.isCheckedUnknownType());
      assertEquals(false, jSType0.isFunctionPrototypeType());
      assertEquals(false, jSType0.isVoidType());
      assertEquals(false, jSType0.isResolved());
      assertEquals(false, jSType0.isFunctionType());
      assertEquals(false, jSType0.isBooleanValueType());
      assertEquals(false, jSType0.isTemplateType());
      assertEquals(false, jSType0.isNullType());
      assertEquals(true, jSType0.isNominalType());
      assertEquals(false, jSType0.isNominalConstructor());
      assertEquals(false, jSType0.isNoType());
      assertEquals(false, jSType0.isNumberValueType());
      assertEquals(false, jSType0.isOrdinaryFunction());
      assertEquals(false, jSType0.isEnumElementType());
      assertEquals(false, jSType0.isNoResolvedType());
      assertEquals(false, jSType0.isUnionType());
      assertEquals(false, jSType0.isAllType());
      assertEquals(false, jSType0.isStringValueType());
      assertEquals(false, jSType0.isTemplatizedType());
      assertEquals(false, jSType0.isNoObjectType());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isCast());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isNE());
      assertEquals(true, node0.isSyntheticBlock());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isTypeOf());
      assertEquals(0, node0.getCharno());
      assertEquals(true, node0.mayMutateArguments());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isTry());
      assertEquals(0, node0.getChangeTime());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isCatch());
      assertEquals(true, node0.isScript());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isStringKey());
      assertEquals(4096, node0.getSourcePosition());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isOnlyModifiesArgumentsCall());
      assertEquals(false, node0.isDec());
      assertEquals(132, node0.getType());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isNew());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isThrow());
      assertEquals(1, node0.getLineno());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isHook());
      assertEquals("[testcode]", node0.getSourceFileName());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isString());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isBreak());
      assertEquals(true, node0.mayMutateGlobalStateOrThrow());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(false, scope0.isLocal());
      assertEquals(0, scope0.getVarCount());
      assertEquals(true, scope0.isGlobal());
      assertEquals("", nodeTraversal0.getSourceName());
      assertEquals(0, nodeTraversal0.getLineNumber());
      assertTrue(boolean1);
  }

  @Test
  public void test16() {}
//   @Test
//   public void test16()  throws Throwable  {
//       Compiler compiler0 = new Compiler();
//       assertNotNull(compiler0);
//       assertEquals(0.0, compiler0.getProgress(), 0.01D);
//       
//       String string0 = "&";
//       Node node0 = compiler0.parseTestCode(string0);
//       assertNotNull(node0);
//       assertEquals(false, compiler0.isTypeCheckingEnabled());
//       assertEquals(false, compiler0.isIdeMode());
//       assertEquals(false, compiler0.acceptConstKeyword());
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
//       assertEquals(0.0, compiler0.getProgress(), 0.01D);
//       assertEquals(0, compiler0.getWarningCount());
//       assertEquals(1, compiler0.getErrorCount());
//       assertEquals(true, compiler0.hasErrors());
//       assertEquals(false, node0.isGetterDef());
//       assertEquals(false, node0.isNE());
//       assertEquals(false, node0.isCall());
//       assertEquals(false, node0.isGetProp());
//       assertEquals(false, node0.isVar());
//       assertEquals(false, node0.isIn());
//       assertEquals(false, node0.hasChildren());
//       assertEquals(false, node0.isLocalResultCall());
//       assertEquals(false, node0.isDebugger());
//       assertEquals(false, node0.isEmpty());
//       assertEquals(false, node0.isArrayLit());
//       assertEquals(false, node0.isIf());
//       assertEquals(false, node0.isOnlyModifiesThisCall());
//       assertEquals(false, node0.hasOneChild());
//       assertEquals(false, node0.isNew());
//       assertEquals(false, node0.isTrue());
//       assertEquals(false, node0.isDelProp());
//       assertEquals(false, node0.isHook());
//       assertEquals(false, node0.isDec());
//       assertEquals(false, node0.isCatch());
//       assertEquals(false, node0.isSetterDef());
//       assertEquals(false, node0.isString());
//       assertEquals(0, node0.getSideEffectFlags());
//       assertEquals(true, node0.isScript());
//       assertEquals(false, node0.isSyntheticBlock());
//       assertEquals(false, node0.isName());
//       assertEquals(false, node0.isNumber());
//       assertEquals(false, node0.isTry());
//       assertEquals(false, node0.isLabel());
//       assertEquals(-1, node0.getSourcePosition());
//       assertEquals(false, node0.isVarArgs());
//       assertEquals(false, node0.isLabelName());
//       assertEquals(false, node0.isAssignAdd());
//       assertEquals("[testcode]", node0.getSourceFileName());
//       assertEquals(132, node0.getType());
//       assertEquals(false, node0.isWhile());
//       assertEquals(false, node0.isDefaultCase());
//       assertEquals(false, node0.isRegExp());
//       assertEquals(false, node0.isAnd());
//       assertEquals(false, node0.isNull());
//       assertEquals(false, node0.isInc());
//       assertEquals(false, node0.isFunction());
//       assertEquals(false, node0.isNoSideEffectsCall());
//       assertEquals(false, node0.isAdd());
//       assertEquals(false, node0.isDo());
//       assertEquals(false, node0.isReturn());
//       assertEquals(false, node0.hasMoreThanOneChild());
//       assertEquals(false, node0.isParamList());
//       assertEquals(false, node0.isOr());
//       assertEquals(false, node0.isFor());
//       assertEquals(0, node0.getChangeTime());
//       assertEquals(false, node0.isExprResult());
//       assertEquals(false, node0.isCase());
//       assertEquals(false, node0.isFromExterns());
//       assertEquals(0, node0.getLength());
//       assertEquals(false, node0.isNot());
//       assertEquals(false, node0.isGetElem());
//       assertEquals(false, node0.isObjectLit());
//       assertEquals(0, node0.getChildCount());
//       assertEquals(false, node0.isStringKey());
//       assertEquals(false, node0.isSwitch());
//       assertEquals(false, node0.isInstanceOf());
//       assertEquals(false, node0.isAssign());
//       assertEquals(false, node0.isWith());
//       assertEquals(false, node0.isContinue());
//       assertEquals(false, node0.isQuotedString());
//       assertEquals(false, node0.isVoid());
//       assertEquals(false, node0.isCast());
//       assertEquals(false, node0.wasEmptyNode());
//       assertEquals(false, node0.isOptionalArg());
//       assertEquals(false, node0.isOnlyModifiesArgumentsCall());
//       assertEquals(false, node0.isBlock());
//       assertEquals(-1, node0.getCharno());
//       assertEquals(false, node0.isFalse());
//       assertEquals(false, node0.isThrow());
//       assertEquals(false, node0.isThis());
//       assertEquals(true, node0.mayMutateGlobalStateOrThrow());
//       assertEquals(true, node0.mayMutateArguments());
//       assertEquals(false, node0.isBreak());
//       assertEquals(false, node0.isTypeOf());
//       assertEquals(-1, node0.getLineno());
//       assertEquals(false, node0.isComma());
//       
//       TypeValidator typeValidator0 = new TypeValidator(compiler0);
//       assertNotNull(typeValidator0);
//       assertEquals(false, compiler0.isTypeCheckingEnabled());
//       assertEquals(false, compiler0.isIdeMode());
//       assertEquals(false, compiler0.acceptConstKeyword());
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
//       assertEquals(0.0, compiler0.getProgress(), 0.01D);
//       assertEquals(0, compiler0.getWarningCount());
//       assertEquals(1, compiler0.getErrorCount());
//       assertEquals(true, compiler0.hasErrors());
//       
//       InferJSDocInfo inferJSDocInfo0 = new InferJSDocInfo(compiler0);
//       assertNotNull(inferJSDocInfo0);
//       assertEquals(false, compiler0.isTypeCheckingEnabled());
//       assertEquals(false, compiler0.isIdeMode());
//       assertEquals(false, compiler0.acceptConstKeyword());
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
//       assertEquals(0.0, compiler0.getProgress(), 0.01D);
//       assertEquals(0, compiler0.getWarningCount());
//       assertEquals(1, compiler0.getErrorCount());
//       assertEquals(true, compiler0.hasErrors());
//       
//       NodeTraversal nodeTraversal0 = new NodeTraversal((AbstractCompiler) compiler0, (NodeTraversal.Callback) inferJSDocInfo0);
//       assertNotNull(nodeTraversal0);
//       assertEquals(false, compiler0.isTypeCheckingEnabled());
//       assertEquals(false, compiler0.isIdeMode());
//       assertEquals(false, compiler0.acceptConstKeyword());
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
//       assertEquals(0.0, compiler0.getProgress(), 0.01D);
//       assertEquals(0, compiler0.getWarningCount());
//       assertEquals(1, compiler0.getErrorCount());
//       assertEquals(true, compiler0.hasErrors());
//       assertEquals("", nodeTraversal0.getSourceName());
//       assertEquals(0, nodeTraversal0.getLineNumber());
//       
//       JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
//       assertNotNull(jSTypeRegistry0);
//       assertEquals(false, compiler0.isTypeCheckingEnabled());
//       assertEquals(false, compiler0.isIdeMode());
//       assertEquals(false, compiler0.acceptConstKeyword());
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
//       assertEquals(0.0, compiler0.getProgress(), 0.01D);
//       assertEquals(0, compiler0.getWarningCount());
//       assertEquals(1, compiler0.getErrorCount());
//       assertEquals(true, compiler0.hasErrors());
//       assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
//       
//       Scope scope0 = Scope.createGlobalScope(node0);
//       assertNotNull(scope0);
//       assertEquals(false, compiler0.isTypeCheckingEnabled());
//       assertEquals(false, compiler0.isIdeMode());
//       assertEquals(false, compiler0.acceptConstKeyword());
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
//       assertEquals(0.0, compiler0.getProgress(), 0.01D);
//       assertEquals(0, compiler0.getWarningCount());
//       assertEquals(1, compiler0.getErrorCount());
//       assertEquals(true, compiler0.hasErrors());
//       assertEquals(false, node0.isGetterDef());
//       assertEquals(false, node0.isNE());
//       assertEquals(false, node0.isCall());
//       assertEquals(false, node0.isGetProp());
//       assertEquals(false, node0.isVar());
//       assertEquals(false, node0.isIn());
//       assertEquals(false, node0.hasChildren());
//       assertEquals(false, node0.isLocalResultCall());
//       assertEquals(false, node0.isDebugger());
//       assertEquals(false, node0.isEmpty());
//       assertEquals(false, node0.isArrayLit());
//       assertEquals(false, node0.isIf());
//       assertEquals(false, node0.isOnlyModifiesThisCall());
//       assertEquals(false, node0.hasOneChild());
//       assertEquals(false, node0.isNew());
//       assertEquals(false, node0.isTrue());
//       assertEquals(false, node0.isDelProp());
//       assertEquals(false, node0.isHook());
//       assertEquals(false, node0.isDec());
//       assertEquals(false, node0.isCatch());
//       assertEquals(false, node0.isSetterDef());
//       assertEquals(false, node0.isString());
//       assertEquals(0, node0.getSideEffectFlags());
//       assertEquals(true, node0.isScript());
//       assertEquals(false, node0.isSyntheticBlock());
//       assertEquals(false, node0.isName());
//       assertEquals(false, node0.isNumber());
//       assertEquals(false, node0.isTry());
//       assertEquals(false, node0.isLabel());
//       assertEquals(-1, node0.getSourcePosition());
//       assertEquals(false, node0.isVarArgs());
//       assertEquals(false, node0.isLabelName());
//       assertEquals(false, node0.isAssignAdd());
//       assertEquals("[testcode]", node0.getSourceFileName());
//       assertEquals(132, node0.getType());
//       assertEquals(false, node0.isWhile());
//       assertEquals(false, node0.isDefaultCase());
//       assertEquals(false, node0.isRegExp());
//       assertEquals(false, node0.isAnd());
//       assertEquals(false, node0.isNull());
//       assertEquals(false, node0.isInc());
//       assertEquals(false, node0.isFunction());
//       assertEquals(false, node0.isNoSideEffectsCall());
//       assertEquals(false, node0.isAdd());
//       assertEquals(false, node0.isDo());
//       assertEquals(false, node0.isReturn());
//       assertEquals(false, node0.hasMoreThanOneChild());
//       assertEquals(false, node0.isParamList());
//       assertEquals(false, node0.isOr());
//       assertEquals(false, node0.isFor());
//       assertEquals(0, node0.getChangeTime());
//       assertEquals(false, node0.isExprResult());
//       assertEquals(false, node0.isCase());
//       assertEquals(false, node0.isFromExterns());
//       assertEquals(0, node0.getLength());
//       assertEquals(false, node0.isNot());
//       assertEquals(false, node0.isGetElem());
//       assertEquals(false, node0.isObjectLit());
//       assertEquals(0, node0.getChildCount());
//       assertEquals(false, node0.isStringKey());
//       assertEquals(false, node0.isSwitch());
//       assertEquals(false, node0.isInstanceOf());
//       assertEquals(false, node0.isAssign());
//       assertEquals(false, node0.isWith());
//       assertEquals(false, node0.isContinue());
//       assertEquals(false, node0.isQuotedString());
//       assertEquals(false, node0.isVoid());
//       assertEquals(false, node0.isCast());
//       assertEquals(false, node0.wasEmptyNode());
//       assertEquals(false, node0.isOptionalArg());
//       assertEquals(false, node0.isOnlyModifiesArgumentsCall());
//       assertEquals(false, node0.isBlock());
//       assertEquals(-1, node0.getCharno());
//       assertEquals(false, node0.isFalse());
//       assertEquals(false, node0.isThrow());
//       assertEquals(false, node0.isThis());
//       assertEquals(true, node0.mayMutateGlobalStateOrThrow());
//       assertEquals(true, node0.mayMutateArguments());
//       assertEquals(false, node0.isBreak());
//       assertEquals(false, node0.isTypeOf());
//       assertEquals(-1, node0.getLineno());
//       assertEquals(false, node0.isComma());
//       assertEquals(false, scope0.isLocal());
//       assertEquals(true, scope0.isGlobal());
//       assertEquals(0, scope0.getVarCount());
//       
//       int int0 = (-1544);
//       JSType jSType0 = jSTypeRegistry0.getType((StaticScope<JSType>) scope0, string0, string0, int0, int0);
//       assertNotNull(jSType0);
//       assertEquals(false, compiler0.isTypeCheckingEnabled());
//       assertEquals(false, compiler0.isIdeMode());
//       assertEquals(false, compiler0.acceptConstKeyword());
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
//       assertEquals(0.0, compiler0.getProgress(), 0.01D);
//       assertEquals(0, compiler0.getWarningCount());
//       assertEquals(1, compiler0.getErrorCount());
//       assertEquals(true, compiler0.hasErrors());
//       assertEquals(false, node0.isGetterDef());
//       assertEquals(false, node0.isNE());
//       assertEquals(false, node0.isCall());
//       assertEquals(false, node0.isGetProp());
//       assertEquals(false, node0.isVar());
//       assertEquals(false, node0.isIn());
//       assertEquals(false, node0.hasChildren());
//       assertEquals(false, node0.isLocalResultCall());
//       assertEquals(false, node0.isDebugger());
//       assertEquals(false, node0.isEmpty());
//       assertEquals(false, node0.isArrayLit());
//       assertEquals(false, node0.isIf());
//       assertEquals(false, node0.isOnlyModifiesThisCall());
//       assertEquals(false, node0.hasOneChild());
//       assertEquals(false, node0.isNew());
//       assertEquals(false, node0.isTrue());
//       assertEquals(false, node0.isDelProp());
//       assertEquals(false, node0.isHook());
//       assertEquals(false, node0.isDec());
//       assertEquals(false, node0.isCatch());
//       assertEquals(false, node0.isSetterDef());
//       assertEquals(false, node0.isString());
//       assertEquals(0, node0.getSideEffectFlags());
//       assertEquals(true, node0.isScript());
//       assertEquals(false, node0.isSyntheticBlock());
//       assertEquals(false, node0.isName());
//       assertEquals(false, node0.isNumber());
//       assertEquals(false, node0.isTry());
//       assertEquals(false, node0.isLabel());
//       assertEquals(-1, node0.getSourcePosition());
//       assertEquals(false, node0.isVarArgs());
//       assertEquals(false, node0.isLabelName());
//       assertEquals(false, node0.isAssignAdd());
//       assertEquals("[testcode]", node0.getSourceFileName());
//       assertEquals(132, node0.getType());
//       assertEquals(false, node0.isWhile());
//       assertEquals(false, node0.isDefaultCase());
//       assertEquals(false, node0.isRegExp());
//       assertEquals(false, node0.isAnd());
//       assertEquals(false, node0.isNull());
//       assertEquals(false, node0.isInc());
//       assertEquals(false, node0.isFunction());
//       assertEquals(false, node0.isNoSideEffectsCall());
//       assertEquals(false, node0.isAdd());
//       assertEquals(false, node0.isDo());
//       assertEquals(false, node0.isReturn());
//       assertEquals(false, node0.hasMoreThanOneChild());
//       assertEquals(false, node0.isParamList());
//       assertEquals(false, node0.isOr());
//       assertEquals(false, node0.isFor());
//       assertEquals(0, node0.getChangeTime());
//       assertEquals(false, node0.isExprResult());
//       assertEquals(false, node0.isCase());
//       assertEquals(false, node0.isFromExterns());
//       assertEquals(0, node0.getLength());
//       assertEquals(false, node0.isNot());
//       assertEquals(false, node0.isGetElem());
//       assertEquals(false, node0.isObjectLit());
//       assertEquals(0, node0.getChildCount());
//       assertEquals(false, node0.isStringKey());
//       assertEquals(false, node0.isSwitch());
//       assertEquals(false, node0.isInstanceOf());
//       assertEquals(false, node0.isAssign());
//       assertEquals(false, node0.isWith());
//       assertEquals(false, node0.isContinue());
//       assertEquals(false, node0.isQuotedString());
//       assertEquals(false, node0.isVoid());
//       assertEquals(false, node0.isCast());
//       assertEquals(false, node0.wasEmptyNode());
//       assertEquals(false, node0.isOptionalArg());
//       assertEquals(false, node0.isOnlyModifiesArgumentsCall());
//       assertEquals(false, node0.isBlock());
//       assertEquals(-1, node0.getCharno());
//       assertEquals(false, node0.isFalse());
//       assertEquals(false, node0.isThrow());
//       assertEquals(false, node0.isThis());
//       assertEquals(true, node0.mayMutateGlobalStateOrThrow());
//       assertEquals(true, node0.mayMutateArguments());
//       assertEquals(false, node0.isBreak());
//       assertEquals(false, node0.isTypeOf());
//       assertEquals(-1, node0.getLineno());
//       assertEquals(false, node0.isComma());
//       assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
//       assertEquals(false, jSType0.isConstructor());
//       assertEquals(false, jSType0.isTemplatizedType());
//       assertEquals(false, jSType0.isEnumElementType());
//       assertEquals(false, jSType0.isRecordType());
//       assertEquals(false, jSType0.isNominalConstructor());
//       assertEquals(false, jSType0.isInterface());
//       assertEquals(true, jSType0.isNominalType());
//       assertEquals(false, jSType0.isNoObjectType());
//       assertEquals(false, jSType0.isNoType());
//       assertEquals(false, jSType0.isNullType());
//       assertEquals(false, jSType0.isCheckedUnknownType());
//       assertEquals(false, jSType0.isUnionType());
//       assertEquals(false, jSType0.isStringValueType());
//       assertEquals(false, jSType0.isFunctionType());
//       assertEquals(false, jSType0.isEnumType());
//       assertEquals(false, jSType0.isNoResolvedType());
//       assertEquals(false, jSType0.isAllType());
//       assertEquals(false, jSType0.isTemplateType());
//       assertEquals(false, jSType0.isResolved());
//       assertEquals(false, jSType0.isBooleanValueType());
//       assertEquals(false, jSType0.isOrdinaryFunction());
//       assertEquals(false, jSType0.isFunctionPrototypeType());
//       assertEquals(false, jSType0.isNumberValueType());
//       assertEquals(false, jSType0.isVoidType());
//       assertEquals(false, scope0.isLocal());
//       assertEquals(true, scope0.isGlobal());
//       assertEquals(0, scope0.getVarCount());
//       
//       typeValidator0.expectSwitchMatchesCase(nodeTraversal0, node0, jSType0, jSType0);
//       assertEquals(false, compiler0.isTypeCheckingEnabled());
//       assertEquals(false, compiler0.isIdeMode());
//       assertEquals(false, compiler0.acceptConstKeyword());
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
//       assertEquals(0.0, compiler0.getProgress(), 0.01D);
//       assertEquals(0, compiler0.getWarningCount());
//       assertEquals(1, compiler0.getErrorCount());
//       assertEquals(true, compiler0.hasErrors());
//       assertEquals(false, node0.isGetterDef());
//       assertEquals(false, node0.isNE());
//       assertEquals(false, node0.isCall());
//       assertEquals(false, node0.isGetProp());
//       assertEquals(false, node0.isVar());
//       assertEquals(false, node0.isIn());
//       assertEquals(false, node0.hasChildren());
//       assertEquals(false, node0.isLocalResultCall());
//       assertEquals(false, node0.isDebugger());
//       assertEquals(false, node0.isEmpty());
//       assertEquals(false, node0.isArrayLit());
//       assertEquals(false, node0.isIf());
//       assertEquals(false, node0.isOnlyModifiesThisCall());
//       assertEquals(false, node0.hasOneChild());
//       assertEquals(false, node0.isNew());
//       assertEquals(false, node0.isTrue());
//       assertEquals(false, node0.isDelProp());
//       assertEquals(false, node0.isHook());
//       assertEquals(false, node0.isDec());
//       assertEquals(false, node0.isCatch());
//       assertEquals(false, node0.isSetterDef());
//       assertEquals(false, node0.isString());
//       assertEquals(0, node0.getSideEffectFlags());
//       assertEquals(true, node0.isScript());
//       assertEquals(false, node0.isSyntheticBlock());
//       assertEquals(false, node0.isName());
//       assertEquals(false, node0.isNumber());
//       assertEquals(false, node0.isTry());
//       assertEquals(false, node0.isLabel());
//       assertEquals(-1, node0.getSourcePosition());
//       assertEquals(false, node0.isVarArgs());
//       assertEquals(false, node0.isLabelName());
//       assertEquals(false, node0.isAssignAdd());
//       assertEquals("[testcode]", node0.getSourceFileName());
//       assertEquals(132, node0.getType());
//       assertEquals(false, node0.isWhile());
//       assertEquals(false, node0.isDefaultCase());
//       assertEquals(false, node0.isRegExp());
//       assertEquals(false, node0.isAnd());
//       assertEquals(false, node0.isNull());
//       assertEquals(false, node0.isInc());
//       assertEquals(false, node0.isFunction());
//       assertEquals(false, node0.isNoSideEffectsCall());
//       assertEquals(false, node0.isAdd());
//       assertEquals(false, node0.isDo());
//       assertEquals(false, node0.isReturn());
//       assertEquals(false, node0.hasMoreThanOneChild());
//       assertEquals(false, node0.isParamList());
//       assertEquals(false, node0.isOr());
//       assertEquals(false, node0.isFor());
//       assertEquals(0, node0.getChangeTime());
//       assertEquals(false, node0.isExprResult());
//       assertEquals(false, node0.isCase());
//       assertEquals(false, node0.isFromExterns());
//       assertEquals(0, node0.getLength());
//       assertEquals(false, node0.isNot());
//       assertEquals(false, node0.isGetElem());
//       assertEquals(false, node0.isObjectLit());
//       assertEquals(0, node0.getChildCount());
//       assertEquals(false, node0.isStringKey());
//       assertEquals(false, node0.isSwitch());
//       assertEquals(false, node0.isInstanceOf());
//       assertEquals(false, node0.isAssign());
//       assertEquals(false, node0.isWith());
//       assertEquals(false, node0.isContinue());
//       assertEquals(false, node0.isQuotedString());
//       assertEquals(false, node0.isVoid());
//       assertEquals(false, node0.isCast());
//       assertEquals(false, node0.wasEmptyNode());
//       assertEquals(false, node0.isOptionalArg());
//       assertEquals(false, node0.isOnlyModifiesArgumentsCall());
//       assertEquals(false, node0.isBlock());
//       assertEquals(-1, node0.getCharno());
//       assertEquals(false, node0.isFalse());
//       assertEquals(false, node0.isThrow());
//       assertEquals(false, node0.isThis());
//       assertEquals(true, node0.mayMutateGlobalStateOrThrow());
//       assertEquals(true, node0.mayMutateArguments());
//       assertEquals(false, node0.isBreak());
//       assertEquals(false, node0.isTypeOf());
//       assertEquals(-1, node0.getLineno());
//       assertEquals(false, node0.isComma());
//       assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
//       assertEquals("", nodeTraversal0.getSourceName());
//       assertEquals(0, nodeTraversal0.getLineNumber());
//       assertEquals(false, jSType0.isConstructor());
//       assertEquals(false, jSType0.isTemplatizedType());
//       assertEquals(false, jSType0.isEnumElementType());
//       assertEquals(false, jSType0.isRecordType());
//       assertEquals(false, jSType0.isNominalConstructor());
//       assertEquals(false, jSType0.isInterface());
//       assertEquals(true, jSType0.isNominalType());
//       assertEquals(false, jSType0.isNoObjectType());
//       assertEquals(false, jSType0.isNoType());
//       assertEquals(false, jSType0.isNullType());
//       assertEquals(false, jSType0.isCheckedUnknownType());
//       assertEquals(false, jSType0.isUnionType());
//       assertEquals(false, jSType0.isStringValueType());
//       assertEquals(false, jSType0.isFunctionType());
//       assertEquals(false, jSType0.isEnumType());
//       assertEquals(false, jSType0.isNoResolvedType());
//       assertEquals(false, jSType0.isAllType());
//       assertEquals(false, jSType0.isTemplateType());
//       assertEquals(false, jSType0.isResolved());
//       assertEquals(false, jSType0.isBooleanValueType());
//       assertEquals(false, jSType0.isOrdinaryFunction());
//       assertEquals(false, jSType0.isFunctionPrototypeType());
//       assertEquals(false, jSType0.isNumberValueType());
//       assertEquals(false, jSType0.isVoidType());
//       assertEquals(false, scope0.isLocal());
//       assertEquals(true, scope0.isGlobal());
//       assertEquals(0, scope0.getVarCount());
//   }

  @Test
  public void test17()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      assertNotNull(compiler0);
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      
      String string0 = "&";
      Node node0 = compiler0.parseTestCode(string0);
      assertNotNull(node0);
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(1, compiler0.getErrorCount());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(true, compiler0.hasErrors());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(true, node0.mayMutateArguments());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isTry());
      assertEquals(true, node0.mayMutateGlobalStateOrThrow());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isCast());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isStringKey());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals("[testcode]", node0.getSourceFileName());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isNumber());
      assertEquals(0, node0.getChangeTime());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isAssign());
      assertEquals(true, node0.isScript());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isWhile());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isAdd());
      assertEquals(132, node0.getType());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isString());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isOnlyModifiesArgumentsCall());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isGetElem());
      
      TypeValidator typeValidator0 = new TypeValidator(compiler0);
      assertNotNull(typeValidator0);
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(1, compiler0.getErrorCount());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(true, compiler0.hasErrors());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      
      TightenTypes tightenTypes0 = new TightenTypes(compiler0);
      assertNotNull(tightenTypes0);
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(1, compiler0.getErrorCount());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(true, compiler0.hasErrors());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      
      JSTypeRegistry jSTypeRegistry0 = tightenTypes0.getTypeRegistry();
      assertNotNull(jSTypeRegistry0);
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(1, compiler0.getErrorCount());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(true, compiler0.hasErrors());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      JSTypeNative jSTypeNative0 = JSTypeNative.FUNCTION_INSTANCE_TYPE;
      JSType jSType0 = jSTypeRegistry0.getNativeType(jSTypeNative0);
      assertNotNull(jSType0);
      assertEquals(false, jSType0.isAllType());
      assertEquals(false, jSType0.isOrdinaryFunction());
      assertEquals(false, jSType0.isNominalType());
      assertEquals(true, jSType0.isNominalConstructor());
      assertEquals(true, jSType0.isConstructor());
      assertEquals(false, jSType0.isResolved());
      assertEquals(false, jSType0.isInterface());
      assertEquals(false, jSType0.isCheckedUnknownType());
      assertEquals(false, jSType0.isNoObjectType());
      assertEquals(false, jSType0.isEnumElementType());
      assertEquals(false, jSType0.isTemplateType());
      assertEquals(false, jSType0.isNullType());
      assertEquals(false, jSType0.isNoResolvedType());
      assertEquals(false, jSType0.isNoType());
      assertEquals(false, jSType0.isUnionType());
      assertEquals(false, jSType0.isTemplatizedType());
      assertEquals(true, jSType0.isFunctionType());
      assertEquals(false, jSType0.isBooleanValueType());
      assertEquals(false, jSType0.isVoidType());
      assertEquals(false, jSType0.isFunctionPrototypeType());
      assertEquals(false, jSType0.isEnumType());
      assertEquals(false, jSType0.isStringValueType());
      assertEquals(false, jSType0.isRecordType());
      assertEquals(false, jSType0.isNumberValueType());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(1, compiler0.getErrorCount());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(true, compiler0.hasErrors());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      Denormalize denormalize0 = new Denormalize(compiler0);
      assertNotNull(denormalize0);
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(1, compiler0.getErrorCount());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(true, compiler0.hasErrors());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      
      NodeTraversal nodeTraversal0 = new NodeTraversal((AbstractCompiler) compiler0, (NodeTraversal.Callback) denormalize0);
      assertNotNull(nodeTraversal0);
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(1, compiler0.getErrorCount());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(true, compiler0.hasErrors());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals("", nodeTraversal0.getSourceName());
      assertEquals(0, nodeTraversal0.getLineNumber());
      
      TemplatizedType templatizedType0 = JSType.toMaybeTemplatizedType(jSType0);
      assertNull(templatizedType0);
      assertEquals(false, jSType0.isAllType());
      assertEquals(false, jSType0.isOrdinaryFunction());
      assertEquals(false, jSType0.isNominalType());
      assertEquals(true, jSType0.isNominalConstructor());
      assertEquals(true, jSType0.isConstructor());
      assertEquals(false, jSType0.isResolved());
      assertEquals(false, jSType0.isInterface());
      assertEquals(false, jSType0.isCheckedUnknownType());
      assertEquals(false, jSType0.isNoObjectType());
      assertEquals(false, jSType0.isEnumElementType());
      assertEquals(false, jSType0.isTemplateType());
      assertEquals(false, jSType0.isNullType());
      assertEquals(false, jSType0.isNoResolvedType());
      assertEquals(false, jSType0.isNoType());
      assertEquals(false, jSType0.isUnionType());
      assertEquals(false, jSType0.isTemplatizedType());
      assertEquals(true, jSType0.isFunctionType());
      assertEquals(false, jSType0.isBooleanValueType());
      assertEquals(false, jSType0.isVoidType());
      assertEquals(false, jSType0.isFunctionPrototypeType());
      assertEquals(false, jSType0.isEnumType());
      assertEquals(false, jSType0.isStringValueType());
      assertEquals(false, jSType0.isRecordType());
      assertEquals(false, jSType0.isNumberValueType());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(1, compiler0.getErrorCount());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(true, compiler0.hasErrors());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      boolean boolean0 = typeValidator0.expectNotNullOrUndefined(nodeTraversal0, node0, jSType0, string0, templatizedType0);
      assertEquals(false, jSType0.isAllType());
      assertEquals(false, jSType0.isOrdinaryFunction());
      assertEquals(false, jSType0.isNominalType());
      assertEquals(true, jSType0.isNominalConstructor());
      assertEquals(true, jSType0.isConstructor());
      assertEquals(false, jSType0.isResolved());
      assertEquals(false, jSType0.isInterface());
      assertEquals(false, jSType0.isCheckedUnknownType());
      assertEquals(false, jSType0.isNoObjectType());
      assertEquals(false, jSType0.isEnumElementType());
      assertEquals(false, jSType0.isTemplateType());
      assertEquals(false, jSType0.isNullType());
      assertEquals(false, jSType0.isNoResolvedType());
      assertEquals(false, jSType0.isNoType());
      assertEquals(false, jSType0.isUnionType());
      assertEquals(false, jSType0.isTemplatizedType());
      assertEquals(true, jSType0.isFunctionType());
      assertEquals(false, jSType0.isBooleanValueType());
      assertEquals(false, jSType0.isVoidType());
      assertEquals(false, jSType0.isFunctionPrototypeType());
      assertEquals(false, jSType0.isEnumType());
      assertEquals(false, jSType0.isStringValueType());
      assertEquals(false, jSType0.isRecordType());
      assertEquals(false, jSType0.isNumberValueType());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(1, compiler0.getErrorCount());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(true, compiler0.hasErrors());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals("", nodeTraversal0.getSourceName());
      assertEquals(0, nodeTraversal0.getLineNumber());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(true, node0.mayMutateArguments());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isTry());
      assertEquals(true, node0.mayMutateGlobalStateOrThrow());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isCast());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isStringKey());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals("[testcode]", node0.getSourceFileName());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isNumber());
      assertEquals(0, node0.getChangeTime());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isAssign());
      assertEquals(true, node0.isScript());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isWhile());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isAdd());
      assertEquals(132, node0.getType());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isString());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isOnlyModifiesArgumentsCall());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isGetElem());
      assertTrue(boolean0);
  }

  @Test
  public void test18() {}
//   @Test
//   public void test18()  throws Throwable  {
//       Compiler compiler0 = new Compiler();
//       assertNotNull(compiler0);
//       assertEquals(0.0, compiler0.getProgress(), 0.01D);
//       
//       String string0 = "&";
//       Node node0 = compiler0.parseTestCode(string0);
//       assertNotNull(node0);
//       assertEquals(false, compiler0.acceptConstKeyword());
//       assertEquals(0, compiler0.getWarningCount());
//       assertEquals(true, compiler0.hasErrors());
//       assertEquals(1, compiler0.getErrorCount());
//       assertEquals(false, compiler0.isIdeMode());
//       assertEquals(false, compiler0.isTypeCheckingEnabled());
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
//       assertEquals(0.0, compiler0.getProgress(), 0.01D);
//       assertEquals("[testcode]", node0.getSourceFileName());
//       assertEquals(false, node0.isComma());
//       assertEquals(false, node0.isVoid());
//       assertEquals(false, node0.isWith());
//       assertEquals(false, node0.hasMoreThanOneChild());
//       assertEquals(-1, node0.getSourcePosition());
//       assertEquals(false, node0.isFunction());
//       assertEquals(true, node0.isScript());
//       assertEquals(false, node0.isDo());
//       assertEquals(false, node0.isWhile());
//       assertEquals(false, node0.isDefaultCase());
//       assertEquals(false, node0.isObjectLit());
//       assertEquals(false, node0.isInc());
//       assertEquals(0, node0.getLength());
//       assertEquals(false, node0.isOnlyModifiesThisCall());
//       assertEquals(false, node0.isSyntheticBlock());
//       assertEquals(false, node0.isNot());
//       assertEquals(-1, node0.getLineno());
//       assertEquals(false, node0.isString());
//       assertEquals(0, node0.getChildCount());
//       assertEquals(false, node0.isEmpty());
//       assertEquals(false, node0.isFromExterns());
//       assertEquals(false, node0.isThis());
//       assertEquals(false, node0.isStringKey());
//       assertEquals(false, node0.isAdd());
//       assertEquals(true, node0.mayMutateArguments());
//       assertEquals(0, node0.getChangeTime());
//       assertEquals(true, node0.mayMutateGlobalStateOrThrow());
//       assertEquals(false, node0.isBlock());
//       assertEquals(false, node0.isBreak());
//       assertEquals(false, node0.isOnlyModifiesArgumentsCall());
//       assertEquals(false, node0.isName());
//       assertEquals(false, node0.isReturn());
//       assertEquals(false, node0.isCast());
//       assertEquals(false, node0.isLocalResultCall());
//       assertEquals(132, node0.getType());
//       assertEquals(false, node0.isRegExp());
//       assertEquals(false, node0.isIf());
//       assertEquals(false, node0.isVarArgs());
//       assertEquals(false, node0.isFalse());
//       assertEquals(false, node0.isContinue());
//       assertEquals(false, node0.isInstanceOf());
//       assertEquals(false, node0.isTrue());
//       assertEquals(false, node0.isFor());
//       assertEquals(false, node0.isTry());
//       assertEquals(false, node0.isGetterDef());
//       assertEquals(false, node0.isGetElem());
//       assertEquals(false, node0.isAssignAdd());
//       assertEquals(false, node0.isTypeOf());
//       assertEquals(0, node0.getSideEffectFlags());
//       assertEquals(false, node0.isSwitch());
//       assertEquals(false, node0.isQuotedString());
//       assertEquals(false, node0.isCall());
//       assertEquals(false, node0.isParamList());
//       assertEquals(false, node0.isArrayLit());
//       assertEquals(false, node0.isNumber());
//       assertEquals(false, node0.wasEmptyNode());
//       assertEquals(false, node0.isIn());
//       assertEquals(false, node0.isDec());
//       assertEquals(false, node0.isHook());
//       assertEquals(false, node0.isSetterDef());
//       assertEquals(false, node0.isNE());
//       assertEquals(false, node0.isDebugger());
//       assertEquals(false, node0.isVar());
//       assertEquals(false, node0.isDelProp());
//       assertEquals(false, node0.isCatch());
//       assertEquals(false, node0.isGetProp());
//       assertEquals(false, node0.isNoSideEffectsCall());
//       assertEquals(false, node0.hasChildren());
//       assertEquals(false, node0.isExprResult());
//       assertEquals(-1, node0.getCharno());
//       assertEquals(false, node0.isNew());
//       assertEquals(false, node0.isNull());
//       assertEquals(false, node0.isLabel());
//       assertEquals(false, node0.isThrow());
//       assertEquals(false, node0.isOptionalArg());
//       assertEquals(false, node0.hasOneChild());
//       assertEquals(false, node0.isCase());
//       assertEquals(false, node0.isOr());
//       assertEquals(false, node0.isAssign());
//       assertEquals(false, node0.isAnd());
//       assertEquals(false, node0.isLabelName());
//       
//       TypeValidator typeValidator0 = new TypeValidator(compiler0);
//       assertNotNull(typeValidator0);
//       assertEquals(false, compiler0.acceptConstKeyword());
//       assertEquals(0, compiler0.getWarningCount());
//       assertEquals(true, compiler0.hasErrors());
//       assertEquals(1, compiler0.getErrorCount());
//       assertEquals(false, compiler0.isIdeMode());
//       assertEquals(false, compiler0.isTypeCheckingEnabled());
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
//       assertEquals(0.0, compiler0.getProgress(), 0.01D);
//       
//       InferJSDocInfo inferJSDocInfo0 = new InferJSDocInfo(compiler0);
//       assertNotNull(inferJSDocInfo0);
//       assertEquals(false, compiler0.acceptConstKeyword());
//       assertEquals(0, compiler0.getWarningCount());
//       assertEquals(true, compiler0.hasErrors());
//       assertEquals(1, compiler0.getErrorCount());
//       assertEquals(false, compiler0.isIdeMode());
//       assertEquals(false, compiler0.isTypeCheckingEnabled());
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
//       assertEquals(0.0, compiler0.getProgress(), 0.01D);
//       
//       NodeTraversal nodeTraversal0 = new NodeTraversal((AbstractCompiler) compiler0, (NodeTraversal.Callback) inferJSDocInfo0);
//       assertNotNull(nodeTraversal0);
//       assertEquals("", nodeTraversal0.getSourceName());
//       assertEquals(0, nodeTraversal0.getLineNumber());
//       assertEquals(false, compiler0.acceptConstKeyword());
//       assertEquals(0, compiler0.getWarningCount());
//       assertEquals(true, compiler0.hasErrors());
//       assertEquals(1, compiler0.getErrorCount());
//       assertEquals(false, compiler0.isIdeMode());
//       assertEquals(false, compiler0.isTypeCheckingEnabled());
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
//       assertEquals(0.0, compiler0.getProgress(), 0.01D);
//       
//       JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
//       assertNotNull(jSTypeRegistry0);
//       assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
//       assertEquals(false, compiler0.acceptConstKeyword());
//       assertEquals(0, compiler0.getWarningCount());
//       assertEquals(true, compiler0.hasErrors());
//       assertEquals(1, compiler0.getErrorCount());
//       assertEquals(false, compiler0.isIdeMode());
//       assertEquals(false, compiler0.isTypeCheckingEnabled());
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
//       assertEquals(0.0, compiler0.getProgress(), 0.01D);
//       
//       Scope scope0 = Scope.createGlobalScope(node0);
//       assertNotNull(scope0);
//       assertEquals(true, scope0.isGlobal());
//       assertEquals(0, scope0.getVarCount());
//       assertEquals(false, scope0.isLocal());
//       assertEquals(false, compiler0.acceptConstKeyword());
//       assertEquals(0, compiler0.getWarningCount());
//       assertEquals(true, compiler0.hasErrors());
//       assertEquals(1, compiler0.getErrorCount());
//       assertEquals(false, compiler0.isIdeMode());
//       assertEquals(false, compiler0.isTypeCheckingEnabled());
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
//       assertEquals(0.0, compiler0.getProgress(), 0.01D);
//       assertEquals("[testcode]", node0.getSourceFileName());
//       assertEquals(false, node0.isComma());
//       assertEquals(false, node0.isVoid());
//       assertEquals(false, node0.isWith());
//       assertEquals(false, node0.hasMoreThanOneChild());
//       assertEquals(-1, node0.getSourcePosition());
//       assertEquals(false, node0.isFunction());
//       assertEquals(true, node0.isScript());
//       assertEquals(false, node0.isDo());
//       assertEquals(false, node0.isWhile());
//       assertEquals(false, node0.isDefaultCase());
//       assertEquals(false, node0.isObjectLit());
//       assertEquals(false, node0.isInc());
//       assertEquals(0, node0.getLength());
//       assertEquals(false, node0.isOnlyModifiesThisCall());
//       assertEquals(false, node0.isSyntheticBlock());
//       assertEquals(false, node0.isNot());
//       assertEquals(-1, node0.getLineno());
//       assertEquals(false, node0.isString());
//       assertEquals(0, node0.getChildCount());
//       assertEquals(false, node0.isEmpty());
//       assertEquals(false, node0.isFromExterns());
//       assertEquals(false, node0.isThis());
//       assertEquals(false, node0.isStringKey());
//       assertEquals(false, node0.isAdd());
//       assertEquals(true, node0.mayMutateArguments());
//       assertEquals(0, node0.getChangeTime());
//       assertEquals(true, node0.mayMutateGlobalStateOrThrow());
//       assertEquals(false, node0.isBlock());
//       assertEquals(false, node0.isBreak());
//       assertEquals(false, node0.isOnlyModifiesArgumentsCall());
//       assertEquals(false, node0.isName());
//       assertEquals(false, node0.isReturn());
//       assertEquals(false, node0.isCast());
//       assertEquals(false, node0.isLocalResultCall());
//       assertEquals(132, node0.getType());
//       assertEquals(false, node0.isRegExp());
//       assertEquals(false, node0.isIf());
//       assertEquals(false, node0.isVarArgs());
//       assertEquals(false, node0.isFalse());
//       assertEquals(false, node0.isContinue());
//       assertEquals(false, node0.isInstanceOf());
//       assertEquals(false, node0.isTrue());
//       assertEquals(false, node0.isFor());
//       assertEquals(false, node0.isTry());
//       assertEquals(false, node0.isGetterDef());
//       assertEquals(false, node0.isGetElem());
//       assertEquals(false, node0.isAssignAdd());
//       assertEquals(false, node0.isTypeOf());
//       assertEquals(0, node0.getSideEffectFlags());
//       assertEquals(false, node0.isSwitch());
//       assertEquals(false, node0.isQuotedString());
//       assertEquals(false, node0.isCall());
//       assertEquals(false, node0.isParamList());
//       assertEquals(false, node0.isArrayLit());
//       assertEquals(false, node0.isNumber());
//       assertEquals(false, node0.wasEmptyNode());
//       assertEquals(false, node0.isIn());
//       assertEquals(false, node0.isDec());
//       assertEquals(false, node0.isHook());
//       assertEquals(false, node0.isSetterDef());
//       assertEquals(false, node0.isNE());
//       assertEquals(false, node0.isDebugger());
//       assertEquals(false, node0.isVar());
//       assertEquals(false, node0.isDelProp());
//       assertEquals(false, node0.isCatch());
//       assertEquals(false, node0.isGetProp());
//       assertEquals(false, node0.isNoSideEffectsCall());
//       assertEquals(false, node0.hasChildren());
//       assertEquals(false, node0.isExprResult());
//       assertEquals(-1, node0.getCharno());
//       assertEquals(false, node0.isNew());
//       assertEquals(false, node0.isNull());
//       assertEquals(false, node0.isLabel());
//       assertEquals(false, node0.isThrow());
//       assertEquals(false, node0.isOptionalArg());
//       assertEquals(false, node0.hasOneChild());
//       assertEquals(false, node0.isCase());
//       assertEquals(false, node0.isOr());
//       assertEquals(false, node0.isAssign());
//       assertEquals(false, node0.isAnd());
//       assertEquals(false, node0.isLabelName());
//       
//       int int0 = (-1544);
//       JSType jSType0 = jSTypeRegistry0.getType((StaticScope<JSType>) scope0, string0, string0, int0, int0);
//       assertNotNull(jSType0);
//       assertEquals(true, scope0.isGlobal());
//       assertEquals(0, scope0.getVarCount());
//       assertEquals(false, scope0.isLocal());
//       assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
//       assertEquals(false, jSType0.isAllType());
//       assertEquals(false, jSType0.isUnionType());
//       assertEquals(false, jSType0.isEnumType());
//       assertEquals(false, jSType0.isNominalConstructor());
//       assertEquals(false, jSType0.isEnumElementType());
//       assertEquals(false, jSType0.isCheckedUnknownType());
//       assertEquals(false, jSType0.isTemplateType());
//       assertEquals(false, jSType0.isNullType());
//       assertEquals(false, jSType0.isRecordType());
//       assertEquals(false, jSType0.isConstructor());
//       assertEquals(false, jSType0.isBooleanValueType());
//       assertEquals(false, jSType0.isNoObjectType());
//       assertEquals(false, jSType0.isNoType());
//       assertEquals(false, jSType0.isOrdinaryFunction());
//       assertEquals(false, jSType0.isInterface());
//       assertEquals(false, jSType0.isTemplatizedType());
//       assertEquals(false, jSType0.isFunctionType());
//       assertEquals(false, jSType0.isNoResolvedType());
//       assertEquals(false, jSType0.isResolved());
//       assertEquals(false, jSType0.isVoidType());
//       assertEquals(false, jSType0.isStringValueType());
//       assertEquals(false, jSType0.isFunctionPrototypeType());
//       assertEquals(true, jSType0.isNominalType());
//       assertEquals(false, jSType0.isNumberValueType());
//       assertEquals(false, compiler0.acceptConstKeyword());
//       assertEquals(0, compiler0.getWarningCount());
//       assertEquals(true, compiler0.hasErrors());
//       assertEquals(1, compiler0.getErrorCount());
//       assertEquals(false, compiler0.isIdeMode());
//       assertEquals(false, compiler0.isTypeCheckingEnabled());
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
//       assertEquals(0.0, compiler0.getProgress(), 0.01D);
//       assertEquals("[testcode]", node0.getSourceFileName());
//       assertEquals(false, node0.isComma());
//       assertEquals(false, node0.isVoid());
//       assertEquals(false, node0.isWith());
//       assertEquals(false, node0.hasMoreThanOneChild());
//       assertEquals(-1, node0.getSourcePosition());
//       assertEquals(false, node0.isFunction());
//       assertEquals(true, node0.isScript());
//       assertEquals(false, node0.isDo());
//       assertEquals(false, node0.isWhile());
//       assertEquals(false, node0.isDefaultCase());
//       assertEquals(false, node0.isObjectLit());
//       assertEquals(false, node0.isInc());
//       assertEquals(0, node0.getLength());
//       assertEquals(false, node0.isOnlyModifiesThisCall());
//       assertEquals(false, node0.isSyntheticBlock());
//       assertEquals(false, node0.isNot());
//       assertEquals(-1, node0.getLineno());
//       assertEquals(false, node0.isString());
//       assertEquals(0, node0.getChildCount());
//       assertEquals(false, node0.isEmpty());
//       assertEquals(false, node0.isFromExterns());
//       assertEquals(false, node0.isThis());
//       assertEquals(false, node0.isStringKey());
//       assertEquals(false, node0.isAdd());
//       assertEquals(true, node0.mayMutateArguments());
//       assertEquals(0, node0.getChangeTime());
//       assertEquals(true, node0.mayMutateGlobalStateOrThrow());
//       assertEquals(false, node0.isBlock());
//       assertEquals(false, node0.isBreak());
//       assertEquals(false, node0.isOnlyModifiesArgumentsCall());
//       assertEquals(false, node0.isName());
//       assertEquals(false, node0.isReturn());
//       assertEquals(false, node0.isCast());
//       assertEquals(false, node0.isLocalResultCall());
//       assertEquals(132, node0.getType());
//       assertEquals(false, node0.isRegExp());
//       assertEquals(false, node0.isIf());
//       assertEquals(false, node0.isVarArgs());
//       assertEquals(false, node0.isFalse());
//       assertEquals(false, node0.isContinue());
//       assertEquals(false, node0.isInstanceOf());
//       assertEquals(false, node0.isTrue());
//       assertEquals(false, node0.isFor());
//       assertEquals(false, node0.isTry());
//       assertEquals(false, node0.isGetterDef());
//       assertEquals(false, node0.isGetElem());
//       assertEquals(false, node0.isAssignAdd());
//       assertEquals(false, node0.isTypeOf());
//       assertEquals(0, node0.getSideEffectFlags());
//       assertEquals(false, node0.isSwitch());
//       assertEquals(false, node0.isQuotedString());
//       assertEquals(false, node0.isCall());
//       assertEquals(false, node0.isParamList());
//       assertEquals(false, node0.isArrayLit());
//       assertEquals(false, node0.isNumber());
//       assertEquals(false, node0.wasEmptyNode());
//       assertEquals(false, node0.isIn());
//       assertEquals(false, node0.isDec());
//       assertEquals(false, node0.isHook());
//       assertEquals(false, node0.isSetterDef());
//       assertEquals(false, node0.isNE());
//       assertEquals(false, node0.isDebugger());
//       assertEquals(false, node0.isVar());
//       assertEquals(false, node0.isDelProp());
//       assertEquals(false, node0.isCatch());
//       assertEquals(false, node0.isGetProp());
//       assertEquals(false, node0.isNoSideEffectsCall());
//       assertEquals(false, node0.hasChildren());
//       assertEquals(false, node0.isExprResult());
//       assertEquals(-1, node0.getCharno());
//       assertEquals(false, node0.isNew());
//       assertEquals(false, node0.isNull());
//       assertEquals(false, node0.isLabel());
//       assertEquals(false, node0.isThrow());
//       assertEquals(false, node0.isOptionalArg());
//       assertEquals(false, node0.hasOneChild());
//       assertEquals(false, node0.isCase());
//       assertEquals(false, node0.isOr());
//       assertEquals(false, node0.isAssign());
//       assertEquals(false, node0.isAnd());
//       assertEquals(false, node0.isLabelName());
//       
//       boolean boolean0 = typeValidator0.expectNotNullOrUndefined(nodeTraversal0, node0, jSType0, string0, jSType0);
//       assertEquals(true, scope0.isGlobal());
//       assertEquals(0, scope0.getVarCount());
//       assertEquals(false, scope0.isLocal());
//       assertEquals("", nodeTraversal0.getSourceName());
//       assertEquals(0, nodeTraversal0.getLineNumber());
//       assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
//       assertEquals(false, jSType0.isAllType());
//       assertEquals(false, jSType0.isUnionType());
//       assertEquals(false, jSType0.isEnumType());
//       assertEquals(false, jSType0.isNominalConstructor());
//       assertEquals(false, jSType0.isEnumElementType());
//       assertEquals(false, jSType0.isCheckedUnknownType());
//       assertEquals(false, jSType0.isTemplateType());
//       assertEquals(false, jSType0.isNullType());
//       assertEquals(false, jSType0.isRecordType());
//       assertEquals(false, jSType0.isConstructor());
//       assertEquals(false, jSType0.isBooleanValueType());
//       assertEquals(false, jSType0.isNoObjectType());
//       assertEquals(false, jSType0.isNoType());
//       assertEquals(false, jSType0.isOrdinaryFunction());
//       assertEquals(false, jSType0.isInterface());
//       assertEquals(false, jSType0.isTemplatizedType());
//       assertEquals(false, jSType0.isFunctionType());
//       assertEquals(false, jSType0.isNoResolvedType());
//       assertEquals(false, jSType0.isResolved());
//       assertEquals(false, jSType0.isVoidType());
//       assertEquals(false, jSType0.isStringValueType());
//       assertEquals(false, jSType0.isFunctionPrototypeType());
//       assertEquals(true, jSType0.isNominalType());
//       assertEquals(false, jSType0.isNumberValueType());
//       assertEquals(false, compiler0.acceptConstKeyword());
//       assertEquals(0, compiler0.getWarningCount());
//       assertEquals(true, compiler0.hasErrors());
//       assertEquals(1, compiler0.getErrorCount());
//       assertEquals(false, compiler0.isIdeMode());
//       assertEquals(false, compiler0.isTypeCheckingEnabled());
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
//       assertEquals(0.0, compiler0.getProgress(), 0.01D);
//       assertEquals("[testcode]", node0.getSourceFileName());
//       assertEquals(false, node0.isComma());
//       assertEquals(false, node0.isVoid());
//       assertEquals(false, node0.isWith());
//       assertEquals(false, node0.hasMoreThanOneChild());
//       assertEquals(-1, node0.getSourcePosition());
//       assertEquals(false, node0.isFunction());
//       assertEquals(true, node0.isScript());
//       assertEquals(false, node0.isDo());
//       assertEquals(false, node0.isWhile());
//       assertEquals(false, node0.isDefaultCase());
//       assertEquals(false, node0.isObjectLit());
//       assertEquals(false, node0.isInc());
//       assertEquals(0, node0.getLength());
//       assertEquals(false, node0.isOnlyModifiesThisCall());
//       assertEquals(false, node0.isSyntheticBlock());
//       assertEquals(false, node0.isNot());
//       assertEquals(-1, node0.getLineno());
//       assertEquals(false, node0.isString());
//       assertEquals(0, node0.getChildCount());
//       assertEquals(false, node0.isEmpty());
//       assertEquals(false, node0.isFromExterns());
//       assertEquals(false, node0.isThis());
//       assertEquals(false, node0.isStringKey());
//       assertEquals(false, node0.isAdd());
//       assertEquals(true, node0.mayMutateArguments());
//       assertEquals(0, node0.getChangeTime());
//       assertEquals(true, node0.mayMutateGlobalStateOrThrow());
//       assertEquals(false, node0.isBlock());
//       assertEquals(false, node0.isBreak());
//       assertEquals(false, node0.isOnlyModifiesArgumentsCall());
//       assertEquals(false, node0.isName());
//       assertEquals(false, node0.isReturn());
//       assertEquals(false, node0.isCast());
//       assertEquals(false, node0.isLocalResultCall());
//       assertEquals(132, node0.getType());
//       assertEquals(false, node0.isRegExp());
//       assertEquals(false, node0.isIf());
//       assertEquals(false, node0.isVarArgs());
//       assertEquals(false, node0.isFalse());
//       assertEquals(false, node0.isContinue());
//       assertEquals(false, node0.isInstanceOf());
//       assertEquals(false, node0.isTrue());
//       assertEquals(false, node0.isFor());
//       assertEquals(false, node0.isTry());
//       assertEquals(false, node0.isGetterDef());
//       assertEquals(false, node0.isGetElem());
//       assertEquals(false, node0.isAssignAdd());
//       assertEquals(false, node0.isTypeOf());
//       assertEquals(0, node0.getSideEffectFlags());
//       assertEquals(false, node0.isSwitch());
//       assertEquals(false, node0.isQuotedString());
//       assertEquals(false, node0.isCall());
//       assertEquals(false, node0.isParamList());
//       assertEquals(false, node0.isArrayLit());
//       assertEquals(false, node0.isNumber());
//       assertEquals(false, node0.wasEmptyNode());
//       assertEquals(false, node0.isIn());
//       assertEquals(false, node0.isDec());
//       assertEquals(false, node0.isHook());
//       assertEquals(false, node0.isSetterDef());
//       assertEquals(false, node0.isNE());
//       assertEquals(false, node0.isDebugger());
//       assertEquals(false, node0.isVar());
//       assertEquals(false, node0.isDelProp());
//       assertEquals(false, node0.isCatch());
//       assertEquals(false, node0.isGetProp());
//       assertEquals(false, node0.isNoSideEffectsCall());
//       assertEquals(false, node0.hasChildren());
//       assertEquals(false, node0.isExprResult());
//       assertEquals(-1, node0.getCharno());
//       assertEquals(false, node0.isNew());
//       assertEquals(false, node0.isNull());
//       assertEquals(false, node0.isLabel());
//       assertEquals(false, node0.isThrow());
//       assertEquals(false, node0.isOptionalArg());
//       assertEquals(false, node0.hasOneChild());
//       assertEquals(false, node0.isCase());
//       assertEquals(false, node0.isOr());
//       assertEquals(false, node0.isAssign());
//       assertEquals(false, node0.isAnd());
//       assertEquals(false, node0.isLabelName());
//       assertTrue(boolean0);
//   }

  @Test
  public void test19()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      assertNotNull(compiler0);
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      
      String string0 = "&";
      Node node0 = compiler0.parseTestCode(string0);
      assertNotNull(node0);
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isStringKey());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isString());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isComma());
      assertEquals(0, node0.getChangeTime());
      assertEquals(132, node0.getType());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isReturn());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isNumber());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isOnlyModifiesArgumentsCall());
      assertEquals("[testcode]", node0.getSourceFileName());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isWith());
      assertEquals(true, node0.mayMutateArguments());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isGetterDef());
      assertEquals(true, node0.isScript());
      assertEquals(false, node0.hasOneChild());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isThrow());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isCast());
      assertEquals(false, node0.isAdd());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isCall());
      assertEquals(true, node0.mayMutateGlobalStateOrThrow());
      assertEquals(false, node0.isNE());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isBlock());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(true, compiler0.hasErrors());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(1, compiler0.getErrorCount());
      assertEquals(false, compiler0.isIdeMode());
      
      TypeValidator typeValidator0 = new TypeValidator(compiler0);
      assertNotNull(typeValidator0);
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(true, compiler0.hasErrors());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(1, compiler0.getErrorCount());
      assertEquals(false, compiler0.isIdeMode());
      
      CheckLevel checkLevel0 = CheckLevel.ERROR;
      CheckUnreachableCode checkUnreachableCode0 = new CheckUnreachableCode(compiler0, checkLevel0);
      assertNotNull(checkUnreachableCode0);
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(true, compiler0.hasErrors());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(1, compiler0.getErrorCount());
      assertEquals(false, compiler0.isIdeMode());
      
      NodeTraversal nodeTraversal0 = new NodeTraversal((AbstractCompiler) compiler0, (NodeTraversal.Callback) checkUnreachableCode0);
      assertNotNull(nodeTraversal0);
      assertEquals(0, nodeTraversal0.getLineNumber());
      assertEquals("", nodeTraversal0.getSourceName());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(true, compiler0.hasErrors());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(1, compiler0.getErrorCount());
      assertEquals(false, compiler0.isIdeMode());
      
      ErrorReporter errorReporter0 = null;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(errorReporter0);
      assertNotNull(jSTypeRegistry0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      JSTypeNative jSTypeNative0 = JSTypeNative.FUNCTION_INSTANCE_TYPE;
      JSType jSType0 = jSTypeRegistry0.getNativeType(jSTypeNative0);
      assertNotNull(jSType0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, jSType0.isVoidType());
      assertEquals(false, jSType0.isResolved());
      assertEquals(false, jSType0.isEnumElementType());
      assertEquals(false, jSType0.isOrdinaryFunction());
      assertEquals(false, jSType0.isFunctionPrototypeType());
      assertEquals(false, jSType0.isNullType());
      assertEquals(false, jSType0.isUnionType());
      assertEquals(false, jSType0.isBooleanValueType());
      assertEquals(true, jSType0.isConstructor());
      assertEquals(false, jSType0.isInterface());
      assertEquals(false, jSType0.isNumberValueType());
      assertEquals(true, jSType0.isFunctionType());
      assertEquals(false, jSType0.isNoType());
      assertEquals(false, jSType0.isNoResolvedType());
      assertEquals(false, jSType0.isStringValueType());
      assertEquals(false, jSType0.isNominalType());
      assertEquals(false, jSType0.isNoObjectType());
      assertEquals(false, jSType0.isTemplatizedType());
      assertEquals(false, jSType0.isEnumType());
      assertEquals(false, jSType0.isTemplateType());
      assertEquals(false, jSType0.isRecordType());
      assertEquals(true, jSType0.isNominalConstructor());
      assertEquals(false, jSType0.isCheckedUnknownType());
      assertEquals(false, jSType0.isAllType());
      
      FunctionType functionType0 = JSType.toMaybeFunctionType(jSType0);
      assertNotNull(functionType0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, jSType0.isVoidType());
      assertEquals(false, jSType0.isResolved());
      assertEquals(false, jSType0.isEnumElementType());
      assertEquals(false, jSType0.isOrdinaryFunction());
      assertEquals(false, jSType0.isFunctionPrototypeType());
      assertEquals(false, jSType0.isNullType());
      assertEquals(false, jSType0.isUnionType());
      assertEquals(false, jSType0.isBooleanValueType());
      assertEquals(true, jSType0.isConstructor());
      assertEquals(false, jSType0.isInterface());
      assertEquals(false, jSType0.isNumberValueType());
      assertEquals(true, jSType0.isFunctionType());
      assertEquals(false, jSType0.isNoType());
      assertEquals(false, jSType0.isNoResolvedType());
      assertEquals(false, jSType0.isStringValueType());
      assertEquals(false, jSType0.isNominalType());
      assertEquals(false, jSType0.isNoObjectType());
      assertEquals(false, jSType0.isTemplatizedType());
      assertEquals(false, jSType0.isEnumType());
      assertEquals(false, jSType0.isTemplateType());
      assertEquals(false, jSType0.isRecordType());
      assertEquals(true, jSType0.isNominalConstructor());
      assertEquals(false, jSType0.isCheckedUnknownType());
      assertEquals(false, jSType0.isAllType());
      assertEquals(false, functionType0.isNoType());
      assertEquals(false, functionType0.isVoidType());
      assertEquals(false, functionType0.isEnumElementType());
      assertEquals(false, functionType0.isTemplateType());
      assertEquals(false, functionType0.isNumberValueType());
      assertEquals(false, functionType0.isNominalType());
      assertEquals(true, functionType0.isFunctionType());
      assertEquals(false, functionType0.isNoObjectType());
      assertEquals(true, functionType0.isNominalConstructor());
      assertEquals(false, functionType0.isCheckedUnknownType());
      assertEquals(false, functionType0.isReturnTypeInferred());
      assertEquals(false, functionType0.isOrdinaryFunction());
      assertEquals(false, functionType0.isNullType());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, functionType0.isTemplatizedType());
      assertEquals(true, functionType0.canBeCalled());
      assertEquals(false, functionType0.isNoResolvedType());
      assertEquals(2147483647, functionType0.getMaxArguments());
      assertEquals(false, functionType0.isResolved());
      assertEquals(false, functionType0.isStringValueType());
      assertEquals(false, functionType0.isRecordType());
      assertEquals(false, functionType0.isBooleanValueType());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertEquals(true, functionType0.hasInstanceType());
      assertEquals(false, functionType0.isEnumType());
      assertEquals(false, functionType0.isInterface());
      assertEquals(false, functionType0.hasCachedValues());
      assertEquals(false, functionType0.isFunctionPrototypeType());
      assertEquals(true, functionType0.isConstructor());
      assertEquals(false, functionType0.isUnionType());
      assertEquals(false, functionType0.isAllType());
      
      typeValidator0.expectStringOrNumber(nodeTraversal0, node0, functionType0, string0);
      assertEquals(0, nodeTraversal0.getLineNumber());
      assertEquals("", nodeTraversal0.getSourceName());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isStringKey());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isString());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isComma());
      assertEquals(0, node0.getChangeTime());
      assertEquals(132, node0.getType());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isReturn());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isNumber());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isOnlyModifiesArgumentsCall());
      assertEquals("[testcode]", node0.getSourceFileName());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isWith());
      assertEquals(true, node0.mayMutateArguments());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isGetterDef());
      assertEquals(true, node0.isScript());
      assertEquals(false, node0.hasOneChild());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isThrow());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isCast());
      assertEquals(false, node0.isAdd());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isCall());
      assertEquals(true, node0.mayMutateGlobalStateOrThrow());
      assertEquals(false, node0.isNE());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isBlock());
      assertEquals(false, jSType0.isVoidType());
      assertEquals(false, jSType0.isResolved());
      assertEquals(false, jSType0.isEnumElementType());
      assertEquals(false, jSType0.isOrdinaryFunction());
      assertEquals(false, jSType0.isFunctionPrototypeType());
      assertEquals(false, jSType0.isNullType());
      assertEquals(false, jSType0.isUnionType());
      assertEquals(false, jSType0.isBooleanValueType());
      assertEquals(true, jSType0.isConstructor());
      assertEquals(false, jSType0.isInterface());
      assertEquals(false, jSType0.isNumberValueType());
      assertEquals(true, jSType0.isFunctionType());
      assertEquals(false, jSType0.isNoType());
      assertEquals(false, jSType0.isNoResolvedType());
      assertEquals(false, jSType0.isStringValueType());
      assertEquals(false, jSType0.isNominalType());
      assertEquals(false, jSType0.isNoObjectType());
      assertEquals(false, jSType0.isTemplatizedType());
      assertEquals(false, jSType0.isEnumType());
      assertEquals(false, jSType0.isTemplateType());
      assertEquals(false, jSType0.isRecordType());
      assertEquals(true, jSType0.isNominalConstructor());
      assertEquals(false, jSType0.isCheckedUnknownType());
      assertEquals(false, jSType0.isAllType());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(true, compiler0.hasErrors());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(1, compiler0.getErrorCount());
      assertEquals(1, compiler0.getWarningCount());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(false, functionType0.isNoType());
      assertEquals(false, functionType0.isVoidType());
      assertEquals(false, functionType0.isEnumElementType());
      assertEquals(false, functionType0.isTemplateType());
      assertEquals(false, functionType0.isNumberValueType());
      assertEquals(false, functionType0.isNominalType());
      assertEquals(true, functionType0.hasCachedValues());
      assertEquals(true, functionType0.isFunctionType());
      assertEquals(false, functionType0.isNoObjectType());
      assertEquals(true, functionType0.isNominalConstructor());
      assertEquals(false, functionType0.isCheckedUnknownType());
      assertEquals(false, functionType0.isReturnTypeInferred());
      assertEquals(false, functionType0.isOrdinaryFunction());
      assertEquals(false, functionType0.isNullType());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, functionType0.isTemplatizedType());
      assertEquals(true, functionType0.canBeCalled());
      assertEquals(false, functionType0.isNoResolvedType());
      assertEquals(2147483647, functionType0.getMaxArguments());
      assertEquals(false, functionType0.isResolved());
      assertEquals(false, functionType0.isStringValueType());
      assertEquals(false, functionType0.isRecordType());
      assertEquals(false, functionType0.isBooleanValueType());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertEquals(true, functionType0.hasInstanceType());
      assertEquals(false, functionType0.isEnumType());
      assertEquals(false, functionType0.isInterface());
      assertEquals(false, functionType0.isFunctionPrototypeType());
      assertEquals(true, functionType0.isConstructor());
      assertEquals(false, functionType0.isUnionType());
      assertEquals(false, functionType0.isAllType());
  }

  @Test
  public void test20() {}
//   @Test
//   public void test20()  throws Throwable  {
//       Compiler compiler0 = new Compiler();
//       assertNotNull(compiler0);
//       assertEquals(0.0, compiler0.getProgress(), 0.01D);
//       
//       String string0 = "&";
//       Node node0 = compiler0.parseTestCode(string0);
//       assertNotNull(node0);
//       assertEquals(false, compiler0.acceptConstKeyword());
//       assertEquals(1, compiler0.getErrorCount());
//       assertEquals(false, compiler0.isTypeCheckingEnabled());
//       assertEquals(true, compiler0.hasErrors());
//       assertEquals(0.0, compiler0.getProgress(), 0.01D);
//       assertEquals(0, compiler0.getWarningCount());
//       assertEquals(false, compiler0.isIdeMode());
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
//       assertEquals(false, node0.isTry());
//       assertEquals(false, node0.isFunction());
//       assertEquals(0, node0.getLength());
//       assertEquals(false, node0.isVar());
//       assertEquals("[testcode]", node0.getSourceFileName());
//       assertEquals(false, node0.isIn());
//       assertEquals(false, node0.isHook());
//       assertEquals(false, node0.isInstanceOf());
//       assertEquals(false, node0.isAssignAdd());
//       assertEquals(false, node0.isBlock());
//       assertEquals(false, node0.isLabel());
//       assertEquals(false, node0.isGetElem());
//       assertEquals(false, node0.isString());
//       assertEquals(false, node0.isCast());
//       assertEquals(false, node0.isAssign());
//       assertEquals(false, node0.isAnd());
//       assertEquals(false, node0.isFor());
//       assertEquals(false, node0.isIf());
//       assertEquals(false, node0.isInc());
//       assertEquals(false, node0.isSyntheticBlock());
//       assertEquals(-1, node0.getCharno());
//       assertEquals(false, node0.isNE());
//       assertEquals(false, node0.isDec());
//       assertEquals(132, node0.getType());
//       assertEquals(true, node0.isScript());
//       assertEquals(false, node0.isAdd());
//       assertEquals(false, node0.isWith());
//       assertEquals(false, node0.isNot());
//       assertEquals(false, node0.isDefaultCase());
//       assertEquals(false, node0.isCall());
//       assertEquals(-1, node0.getLineno());
//       assertEquals(false, node0.isContinue());
//       assertEquals(false, node0.isFromExterns());
//       assertEquals(false, node0.isNew());
//       assertEquals(false, node0.isThrow());
//       assertEquals(false, node0.isDelProp());
//       assertEquals(false, node0.isWhile());
//       assertEquals(true, node0.mayMutateGlobalStateOrThrow());
//       assertEquals(true, node0.mayMutateArguments());
//       assertEquals(false, node0.isObjectLit());
//       assertEquals(false, node0.isNull());
//       assertEquals(false, node0.isNumber());
//       assertEquals(0, node0.getSideEffectFlags());
//       assertEquals(false, node0.isTypeOf());
//       assertEquals(false, node0.isDebugger());
//       assertEquals(false, node0.isBreak());
//       assertEquals(false, node0.isVoid());
//       assertEquals(false, node0.isSwitch());
//       assertEquals(false, node0.isGetterDef());
//       assertEquals(-1, node0.getSourcePosition());
//       assertEquals(false, node0.isReturn());
//       assertEquals(false, node0.isEmpty());
//       assertEquals(false, node0.isFalse());
//       assertEquals(false, node0.isDo());
//       assertEquals(0, node0.getChangeTime());
//       assertEquals(false, node0.isOr());
//       assertEquals(false, node0.isNoSideEffectsCall());
//       assertEquals(false, node0.isOnlyModifiesThisCall());
//       assertEquals(false, node0.isOnlyModifiesArgumentsCall());
//       assertEquals(false, node0.isSetterDef());
//       assertEquals(false, node0.wasEmptyNode());
//       assertEquals(false, node0.isParamList());
//       assertEquals(false, node0.isGetProp());
//       assertEquals(false, node0.isTrue());
//       assertEquals(false, node0.isCatch());
//       assertEquals(false, node0.isOptionalArg());
//       assertEquals(false, node0.isVarArgs());
//       assertEquals(false, node0.isLocalResultCall());
//       assertEquals(0, node0.getChildCount());
//       assertEquals(false, node0.isExprResult());
//       assertEquals(false, node0.isThis());
//       assertEquals(false, node0.hasChildren());
//       assertEquals(false, node0.isCase());
//       assertEquals(false, node0.isStringKey());
//       assertEquals(false, node0.isArrayLit());
//       assertEquals(false, node0.isLabelName());
//       assertEquals(false, node0.hasMoreThanOneChild());
//       assertEquals(false, node0.isComma());
//       assertEquals(false, node0.hasOneChild());
//       assertEquals(false, node0.isName());
//       assertEquals(false, node0.isQuotedString());
//       assertEquals(false, node0.isRegExp());
//       
//       TypeValidator typeValidator0 = new TypeValidator(compiler0);
//       assertNotNull(typeValidator0);
//       assertEquals(false, compiler0.acceptConstKeyword());
//       assertEquals(1, compiler0.getErrorCount());
//       assertEquals(false, compiler0.isTypeCheckingEnabled());
//       assertEquals(true, compiler0.hasErrors());
//       assertEquals(0.0, compiler0.getProgress(), 0.01D);
//       assertEquals(0, compiler0.getWarningCount());
//       assertEquals(false, compiler0.isIdeMode());
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
//       
//       InferJSDocInfo inferJSDocInfo0 = new InferJSDocInfo(compiler0);
//       assertNotNull(inferJSDocInfo0);
//       assertEquals(false, compiler0.acceptConstKeyword());
//       assertEquals(1, compiler0.getErrorCount());
//       assertEquals(false, compiler0.isTypeCheckingEnabled());
//       assertEquals(true, compiler0.hasErrors());
//       assertEquals(0.0, compiler0.getProgress(), 0.01D);
//       assertEquals(0, compiler0.getWarningCount());
//       assertEquals(false, compiler0.isIdeMode());
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
//       
//       NodeTraversal nodeTraversal0 = new NodeTraversal((AbstractCompiler) compiler0, (NodeTraversal.Callback) inferJSDocInfo0);
//       assertNotNull(nodeTraversal0);
//       assertEquals(false, compiler0.acceptConstKeyword());
//       assertEquals(1, compiler0.getErrorCount());
//       assertEquals(false, compiler0.isTypeCheckingEnabled());
//       assertEquals(true, compiler0.hasErrors());
//       assertEquals(0.0, compiler0.getProgress(), 0.01D);
//       assertEquals(0, compiler0.getWarningCount());
//       assertEquals(false, compiler0.isIdeMode());
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
//       assertEquals(0, nodeTraversal0.getLineNumber());
//       assertEquals("", nodeTraversal0.getSourceName());
//       
//       JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
//       assertNotNull(jSTypeRegistry0);
//       assertEquals(false, compiler0.acceptConstKeyword());
//       assertEquals(1, compiler0.getErrorCount());
//       assertEquals(false, compiler0.isTypeCheckingEnabled());
//       assertEquals(true, compiler0.hasErrors());
//       assertEquals(0.0, compiler0.getProgress(), 0.01D);
//       assertEquals(0, compiler0.getWarningCount());
//       assertEquals(false, compiler0.isIdeMode());
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
//       assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
//       
//       Scope scope0 = Scope.createGlobalScope(node0);
//       assertNotNull(scope0);
//       assertEquals(false, compiler0.acceptConstKeyword());
//       assertEquals(1, compiler0.getErrorCount());
//       assertEquals(false, compiler0.isTypeCheckingEnabled());
//       assertEquals(true, compiler0.hasErrors());
//       assertEquals(0.0, compiler0.getProgress(), 0.01D);
//       assertEquals(0, compiler0.getWarningCount());
//       assertEquals(false, compiler0.isIdeMode());
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
//       assertEquals(false, scope0.isLocal());
//       assertEquals(true, scope0.isGlobal());
//       assertEquals(0, scope0.getVarCount());
//       assertEquals(false, node0.isTry());
//       assertEquals(false, node0.isFunction());
//       assertEquals(0, node0.getLength());
//       assertEquals(false, node0.isVar());
//       assertEquals("[testcode]", node0.getSourceFileName());
//       assertEquals(false, node0.isIn());
//       assertEquals(false, node0.isHook());
//       assertEquals(false, node0.isInstanceOf());
//       assertEquals(false, node0.isAssignAdd());
//       assertEquals(false, node0.isBlock());
//       assertEquals(false, node0.isLabel());
//       assertEquals(false, node0.isGetElem());
//       assertEquals(false, node0.isString());
//       assertEquals(false, node0.isCast());
//       assertEquals(false, node0.isAssign());
//       assertEquals(false, node0.isAnd());
//       assertEquals(false, node0.isFor());
//       assertEquals(false, node0.isIf());
//       assertEquals(false, node0.isInc());
//       assertEquals(false, node0.isSyntheticBlock());
//       assertEquals(-1, node0.getCharno());
//       assertEquals(false, node0.isNE());
//       assertEquals(false, node0.isDec());
//       assertEquals(132, node0.getType());
//       assertEquals(true, node0.isScript());
//       assertEquals(false, node0.isAdd());
//       assertEquals(false, node0.isWith());
//       assertEquals(false, node0.isNot());
//       assertEquals(false, node0.isDefaultCase());
//       assertEquals(false, node0.isCall());
//       assertEquals(-1, node0.getLineno());
//       assertEquals(false, node0.isContinue());
//       assertEquals(false, node0.isFromExterns());
//       assertEquals(false, node0.isNew());
//       assertEquals(false, node0.isThrow());
//       assertEquals(false, node0.isDelProp());
//       assertEquals(false, node0.isWhile());
//       assertEquals(true, node0.mayMutateGlobalStateOrThrow());
//       assertEquals(true, node0.mayMutateArguments());
//       assertEquals(false, node0.isObjectLit());
//       assertEquals(false, node0.isNull());
//       assertEquals(false, node0.isNumber());
//       assertEquals(0, node0.getSideEffectFlags());
//       assertEquals(false, node0.isTypeOf());
//       assertEquals(false, node0.isDebugger());
//       assertEquals(false, node0.isBreak());
//       assertEquals(false, node0.isVoid());
//       assertEquals(false, node0.isSwitch());
//       assertEquals(false, node0.isGetterDef());
//       assertEquals(-1, node0.getSourcePosition());
//       assertEquals(false, node0.isReturn());
//       assertEquals(false, node0.isEmpty());
//       assertEquals(false, node0.isFalse());
//       assertEquals(false, node0.isDo());
//       assertEquals(0, node0.getChangeTime());
//       assertEquals(false, node0.isOr());
//       assertEquals(false, node0.isNoSideEffectsCall());
//       assertEquals(false, node0.isOnlyModifiesThisCall());
//       assertEquals(false, node0.isOnlyModifiesArgumentsCall());
//       assertEquals(false, node0.isSetterDef());
//       assertEquals(false, node0.wasEmptyNode());
//       assertEquals(false, node0.isParamList());
//       assertEquals(false, node0.isGetProp());
//       assertEquals(false, node0.isTrue());
//       assertEquals(false, node0.isCatch());
//       assertEquals(false, node0.isOptionalArg());
//       assertEquals(false, node0.isVarArgs());
//       assertEquals(false, node0.isLocalResultCall());
//       assertEquals(0, node0.getChildCount());
//       assertEquals(false, node0.isExprResult());
//       assertEquals(false, node0.isThis());
//       assertEquals(false, node0.hasChildren());
//       assertEquals(false, node0.isCase());
//       assertEquals(false, node0.isStringKey());
//       assertEquals(false, node0.isArrayLit());
//       assertEquals(false, node0.isLabelName());
//       assertEquals(false, node0.hasMoreThanOneChild());
//       assertEquals(false, node0.isComma());
//       assertEquals(false, node0.hasOneChild());
//       assertEquals(false, node0.isName());
//       assertEquals(false, node0.isQuotedString());
//       assertEquals(false, node0.isRegExp());
//       
//       int int0 = (-1544);
//       JSType jSType0 = jSTypeRegistry0.getType((StaticScope<JSType>) scope0, string0, string0, int0, int0);
//       assertNotNull(jSType0);
//       assertEquals(false, compiler0.acceptConstKeyword());
//       assertEquals(1, compiler0.getErrorCount());
//       assertEquals(false, compiler0.isTypeCheckingEnabled());
//       assertEquals(true, compiler0.hasErrors());
//       assertEquals(0.0, compiler0.getProgress(), 0.01D);
//       assertEquals(0, compiler0.getWarningCount());
//       assertEquals(false, compiler0.isIdeMode());
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
//       assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
//       assertEquals(false, scope0.isLocal());
//       assertEquals(true, scope0.isGlobal());
//       assertEquals(0, scope0.getVarCount());
//       assertEquals(false, jSType0.isNullType());
//       assertEquals(true, jSType0.isNominalType());
//       assertEquals(false, jSType0.isRecordType());
//       assertEquals(false, jSType0.isNoObjectType());
//       assertEquals(false, jSType0.isFunctionPrototypeType());
//       assertEquals(false, jSType0.isEnumElementType());
//       assertEquals(false, jSType0.isConstructor());
//       assertEquals(false, jSType0.isUnionType());
//       assertEquals(false, jSType0.isStringValueType());
//       assertEquals(false, jSType0.isTemplateType());
//       assertEquals(false, jSType0.isBooleanValueType());
//       assertEquals(false, jSType0.isOrdinaryFunction());
//       assertEquals(false, jSType0.isFunctionType());
//       assertEquals(false, jSType0.isTemplatizedType());
//       assertEquals(false, jSType0.isNumberValueType());
//       assertEquals(false, jSType0.isVoidType());
//       assertEquals(false, jSType0.isResolved());
//       assertEquals(false, jSType0.isNoType());
//       assertEquals(false, jSType0.isAllType());
//       assertEquals(false, jSType0.isInterface());
//       assertEquals(false, jSType0.isEnumType());
//       assertEquals(false, jSType0.isNoResolvedType());
//       assertEquals(false, jSType0.isNominalConstructor());
//       assertEquals(false, jSType0.isCheckedUnknownType());
//       assertEquals(false, node0.isTry());
//       assertEquals(false, node0.isFunction());
//       assertEquals(0, node0.getLength());
//       assertEquals(false, node0.isVar());
//       assertEquals("[testcode]", node0.getSourceFileName());
//       assertEquals(false, node0.isIn());
//       assertEquals(false, node0.isHook());
//       assertEquals(false, node0.isInstanceOf());
//       assertEquals(false, node0.isAssignAdd());
//       assertEquals(false, node0.isBlock());
//       assertEquals(false, node0.isLabel());
//       assertEquals(false, node0.isGetElem());
//       assertEquals(false, node0.isString());
//       assertEquals(false, node0.isCast());
//       assertEquals(false, node0.isAssign());
//       assertEquals(false, node0.isAnd());
//       assertEquals(false, node0.isFor());
//       assertEquals(false, node0.isIf());
//       assertEquals(false, node0.isInc());
//       assertEquals(false, node0.isSyntheticBlock());
//       assertEquals(-1, node0.getCharno());
//       assertEquals(false, node0.isNE());
//       assertEquals(false, node0.isDec());
//       assertEquals(132, node0.getType());
//       assertEquals(true, node0.isScript());
//       assertEquals(false, node0.isAdd());
//       assertEquals(false, node0.isWith());
//       assertEquals(false, node0.isNot());
//       assertEquals(false, node0.isDefaultCase());
//       assertEquals(false, node0.isCall());
//       assertEquals(-1, node0.getLineno());
//       assertEquals(false, node0.isContinue());
//       assertEquals(false, node0.isFromExterns());
//       assertEquals(false, node0.isNew());
//       assertEquals(false, node0.isThrow());
//       assertEquals(false, node0.isDelProp());
//       assertEquals(false, node0.isWhile());
//       assertEquals(true, node0.mayMutateGlobalStateOrThrow());
//       assertEquals(true, node0.mayMutateArguments());
//       assertEquals(false, node0.isObjectLit());
//       assertEquals(false, node0.isNull());
//       assertEquals(false, node0.isNumber());
//       assertEquals(0, node0.getSideEffectFlags());
//       assertEquals(false, node0.isTypeOf());
//       assertEquals(false, node0.isDebugger());
//       assertEquals(false, node0.isBreak());
//       assertEquals(false, node0.isVoid());
//       assertEquals(false, node0.isSwitch());
//       assertEquals(false, node0.isGetterDef());
//       assertEquals(-1, node0.getSourcePosition());
//       assertEquals(false, node0.isReturn());
//       assertEquals(false, node0.isEmpty());
//       assertEquals(false, node0.isFalse());
//       assertEquals(false, node0.isDo());
//       assertEquals(0, node0.getChangeTime());
//       assertEquals(false, node0.isOr());
//       assertEquals(false, node0.isNoSideEffectsCall());
//       assertEquals(false, node0.isOnlyModifiesThisCall());
//       assertEquals(false, node0.isOnlyModifiesArgumentsCall());
//       assertEquals(false, node0.isSetterDef());
//       assertEquals(false, node0.wasEmptyNode());
//       assertEquals(false, node0.isParamList());
//       assertEquals(false, node0.isGetProp());
//       assertEquals(false, node0.isTrue());
//       assertEquals(false, node0.isCatch());
//       assertEquals(false, node0.isOptionalArg());
//       assertEquals(false, node0.isVarArgs());
//       assertEquals(false, node0.isLocalResultCall());
//       assertEquals(0, node0.getChildCount());
//       assertEquals(false, node0.isExprResult());
//       assertEquals(false, node0.isThis());
//       assertEquals(false, node0.hasChildren());
//       assertEquals(false, node0.isCase());
//       assertEquals(false, node0.isStringKey());
//       assertEquals(false, node0.isArrayLit());
//       assertEquals(false, node0.isLabelName());
//       assertEquals(false, node0.hasMoreThanOneChild());
//       assertEquals(false, node0.isComma());
//       assertEquals(false, node0.hasOneChild());
//       assertEquals(false, node0.isName());
//       assertEquals(false, node0.isQuotedString());
//       assertEquals(false, node0.isRegExp());
//       
//       typeValidator0.expectStringOrNumber(nodeTraversal0, node0, jSType0, string0);
//       assertEquals(false, compiler0.acceptConstKeyword());
//       assertEquals(1, compiler0.getErrorCount());
//       assertEquals(false, compiler0.isTypeCheckingEnabled());
//       assertEquals(true, compiler0.hasErrors());
//       assertEquals(0.0, compiler0.getProgress(), 0.01D);
//       assertEquals(0, compiler0.getWarningCount());
//       assertEquals(false, compiler0.isIdeMode());
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
//       assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
//       assertEquals(false, scope0.isLocal());
//       assertEquals(true, scope0.isGlobal());
//       assertEquals(0, scope0.getVarCount());
//       assertEquals(false, jSType0.isNullType());
//       assertEquals(true, jSType0.isNominalType());
//       assertEquals(false, jSType0.isRecordType());
//       assertEquals(false, jSType0.isNoObjectType());
//       assertEquals(false, jSType0.isFunctionPrototypeType());
//       assertEquals(false, jSType0.isEnumElementType());
//       assertEquals(false, jSType0.isConstructor());
//       assertEquals(false, jSType0.isUnionType());
//       assertEquals(false, jSType0.isStringValueType());
//       assertEquals(false, jSType0.isTemplateType());
//       assertEquals(false, jSType0.isBooleanValueType());
//       assertEquals(false, jSType0.isOrdinaryFunction());
//       assertEquals(false, jSType0.isFunctionType());
//       assertEquals(false, jSType0.isTemplatizedType());
//       assertEquals(false, jSType0.isNumberValueType());
//       assertEquals(false, jSType0.isVoidType());
//       assertEquals(false, jSType0.isResolved());
//       assertEquals(false, jSType0.isNoType());
//       assertEquals(false, jSType0.isAllType());
//       assertEquals(false, jSType0.isInterface());
//       assertEquals(false, jSType0.isEnumType());
//       assertEquals(false, jSType0.isNoResolvedType());
//       assertEquals(false, jSType0.isNominalConstructor());
//       assertEquals(false, jSType0.isCheckedUnknownType());
//       assertEquals(false, node0.isTry());
//       assertEquals(false, node0.isFunction());
//       assertEquals(0, node0.getLength());
//       assertEquals(false, node0.isVar());
//       assertEquals("[testcode]", node0.getSourceFileName());
//       assertEquals(false, node0.isIn());
//       assertEquals(false, node0.isHook());
//       assertEquals(false, node0.isInstanceOf());
//       assertEquals(false, node0.isAssignAdd());
//       assertEquals(false, node0.isBlock());
//       assertEquals(false, node0.isLabel());
//       assertEquals(false, node0.isGetElem());
//       assertEquals(false, node0.isString());
//       assertEquals(false, node0.isCast());
//       assertEquals(false, node0.isAssign());
//       assertEquals(false, node0.isAnd());
//       assertEquals(false, node0.isFor());
//       assertEquals(false, node0.isIf());
//       assertEquals(false, node0.isInc());
//       assertEquals(false, node0.isSyntheticBlock());
//       assertEquals(-1, node0.getCharno());
//       assertEquals(false, node0.isNE());
//       assertEquals(false, node0.isDec());
//       assertEquals(132, node0.getType());
//       assertEquals(true, node0.isScript());
//       assertEquals(false, node0.isAdd());
//       assertEquals(false, node0.isWith());
//       assertEquals(false, node0.isNot());
//       assertEquals(false, node0.isDefaultCase());
//       assertEquals(false, node0.isCall());
//       assertEquals(-1, node0.getLineno());
//       assertEquals(false, node0.isContinue());
//       assertEquals(false, node0.isFromExterns());
//       assertEquals(false, node0.isNew());
//       assertEquals(false, node0.isThrow());
//       assertEquals(false, node0.isDelProp());
//       assertEquals(false, node0.isWhile());
//       assertEquals(true, node0.mayMutateGlobalStateOrThrow());
//       assertEquals(true, node0.mayMutateArguments());
//       assertEquals(false, node0.isObjectLit());
//       assertEquals(false, node0.isNull());
//       assertEquals(false, node0.isNumber());
//       assertEquals(0, node0.getSideEffectFlags());
//       assertEquals(false, node0.isTypeOf());
//       assertEquals(false, node0.isDebugger());
//       assertEquals(false, node0.isBreak());
//       assertEquals(false, node0.isVoid());
//       assertEquals(false, node0.isSwitch());
//       assertEquals(false, node0.isGetterDef());
//       assertEquals(-1, node0.getSourcePosition());
//       assertEquals(false, node0.isReturn());
//       assertEquals(false, node0.isEmpty());
//       assertEquals(false, node0.isFalse());
//       assertEquals(false, node0.isDo());
//       assertEquals(0, node0.getChangeTime());
//       assertEquals(false, node0.isOr());
//       assertEquals(false, node0.isNoSideEffectsCall());
//       assertEquals(false, node0.isOnlyModifiesThisCall());
//       assertEquals(false, node0.isOnlyModifiesArgumentsCall());
//       assertEquals(false, node0.isSetterDef());
//       assertEquals(false, node0.wasEmptyNode());
//       assertEquals(false, node0.isParamList());
//       assertEquals(false, node0.isGetProp());
//       assertEquals(false, node0.isTrue());
//       assertEquals(false, node0.isCatch());
//       assertEquals(false, node0.isOptionalArg());
//       assertEquals(false, node0.isVarArgs());
//       assertEquals(false, node0.isLocalResultCall());
//       assertEquals(0, node0.getChildCount());
//       assertEquals(false, node0.isExprResult());
//       assertEquals(false, node0.isThis());
//       assertEquals(false, node0.hasChildren());
//       assertEquals(false, node0.isCase());
//       assertEquals(false, node0.isStringKey());
//       assertEquals(false, node0.isArrayLit());
//       assertEquals(false, node0.isLabelName());
//       assertEquals(false, node0.hasMoreThanOneChild());
//       assertEquals(false, node0.isComma());
//       assertEquals(false, node0.hasOneChild());
//       assertEquals(false, node0.isName());
//       assertEquals(false, node0.isQuotedString());
//       assertEquals(false, node0.isRegExp());
//       assertEquals(0, nodeTraversal0.getLineNumber());
//       assertEquals("", nodeTraversal0.getSourceName());
//   }

  @Test
  public void test21()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      assertNotNull(compiler0);
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      
      String string0 = "&";
      Node node0 = compiler0.parseTestCode(string0);
      assertNotNull(node0);
      assertEquals(false, node0.isWhile());
      assertEquals(true, node0.mayMutateArguments());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isFalse());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isCase());
      assertEquals(true, node0.mayMutateGlobalStateOrThrow());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isCast());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isOnlyModifiesArgumentsCall());
      assertEquals(true, node0.isScript());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isStringKey());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isAssign());
      assertEquals("[testcode]", node0.getSourceFileName());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isNumber());
      assertEquals(0, node0.getChangeTime());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isArrayLit());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isFor());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isNew());
      assertEquals(-1, node0.getCharno());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isDebugger());
      assertEquals(132, node0.getType());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isString());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isHook());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(true, compiler0.hasErrors());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(1, compiler0.getErrorCount());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      
      TypeValidator typeValidator0 = new TypeValidator(compiler0);
      assertNotNull(typeValidator0);
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(true, compiler0.hasErrors());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(1, compiler0.getErrorCount());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      
      boolean boolean0 = true;
      String string1 = typeValidator0.getReadableJSTypeName(node0, boolean0);
      assertNotNull(string1);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertEquals(false, node0.isWhile());
      assertEquals(true, node0.mayMutateArguments());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isFalse());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isCase());
      assertEquals(true, node0.mayMutateGlobalStateOrThrow());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isCast());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isOnlyModifiesArgumentsCall());
      assertEquals(true, node0.isScript());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isStringKey());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isAssign());
      assertEquals("[testcode]", node0.getSourceFileName());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isNumber());
      assertEquals(0, node0.getChangeTime());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isArrayLit());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isFor());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isNew());
      assertEquals(-1, node0.getCharno());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isDebugger());
      assertEquals(132, node0.getType());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isString());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isHook());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(true, compiler0.hasErrors());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(1, compiler0.getErrorCount());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals("?", string1);
      
      TightenTypes tightenTypes0 = new TightenTypes(compiler0);
      assertNotNull(tightenTypes0);
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(true, compiler0.hasErrors());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(1, compiler0.getErrorCount());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      
      JSTypeRegistry jSTypeRegistry0 = tightenTypes0.getTypeRegistry();
      assertNotNull(jSTypeRegistry0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(true, compiler0.hasErrors());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(1, compiler0.getErrorCount());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      
      JSTypeNative jSTypeNative0 = JSTypeNative.FUNCTION_INSTANCE_TYPE;
      JSType jSType0 = jSTypeRegistry0.getNativeType(jSTypeNative0);
      assertNotNull(jSType0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(true, compiler0.hasErrors());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(1, compiler0.getErrorCount());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(false, jSType0.isInterface());
      assertEquals(false, jSType0.isOrdinaryFunction());
      assertEquals(false, jSType0.isStringValueType());
      assertEquals(false, jSType0.isNullType());
      assertEquals(false, jSType0.isNominalType());
      assertEquals(false, jSType0.isTemplateType());
      assertEquals(false, jSType0.isNumberValueType());
      assertEquals(true, jSType0.isFunctionType());
      assertEquals(false, jSType0.isResolved());
      assertEquals(false, jSType0.isUnionType());
      assertEquals(false, jSType0.isVoidType());
      assertEquals(false, jSType0.isNoType());
      assertEquals(true, jSType0.isConstructor());
      assertEquals(false, jSType0.isEnumType());
      assertEquals(true, jSType0.isNominalConstructor());
      assertEquals(false, jSType0.isEnumElementType());
      assertEquals(false, jSType0.isBooleanValueType());
      assertEquals(false, jSType0.isFunctionPrototypeType());
      assertEquals(false, jSType0.isAllType());
      assertEquals(false, jSType0.isNoObjectType());
      assertEquals(false, jSType0.isCheckedUnknownType());
      assertEquals(false, jSType0.isRecordType());
      assertEquals(false, jSType0.isTemplatizedType());
      assertEquals(false, jSType0.isNoResolvedType());
      
      Denormalize denormalize0 = new Denormalize(compiler0);
      assertNotNull(denormalize0);
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(true, compiler0.hasErrors());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(1, compiler0.getErrorCount());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      
      NodeTraversal nodeTraversal0 = new NodeTraversal((AbstractCompiler) compiler0, (NodeTraversal.Callback) denormalize0);
      assertNotNull(nodeTraversal0);
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(true, compiler0.hasErrors());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(1, compiler0.getErrorCount());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(0, nodeTraversal0.getLineNumber());
      assertEquals("", nodeTraversal0.getSourceName());
      
      typeValidator0.expectBitwiseable(nodeTraversal0, node0, jSType0, string1);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, node0.isWhile());
      assertEquals(true, node0.mayMutateArguments());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isFalse());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isCase());
      assertEquals(true, node0.mayMutateGlobalStateOrThrow());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isCast());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isOnlyModifiesArgumentsCall());
      assertEquals(true, node0.isScript());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isStringKey());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isAssign());
      assertEquals("[testcode]", node0.getSourceFileName());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isNumber());
      assertEquals(0, node0.getChangeTime());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isArrayLit());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isFor());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isNew());
      assertEquals(-1, node0.getCharno());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isDebugger());
      assertEquals(132, node0.getType());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isString());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isHook());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(true, compiler0.hasErrors());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(1, compiler0.getWarningCount());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(1, compiler0.getErrorCount());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(0, nodeTraversal0.getLineNumber());
      assertEquals("", nodeTraversal0.getSourceName());
      assertEquals(false, jSType0.isInterface());
      assertEquals(false, jSType0.isOrdinaryFunction());
      assertEquals(false, jSType0.isStringValueType());
      assertEquals(false, jSType0.isNullType());
      assertEquals(false, jSType0.isNominalType());
      assertEquals(false, jSType0.isTemplateType());
      assertEquals(false, jSType0.isNumberValueType());
      assertEquals(true, jSType0.isFunctionType());
      assertEquals(false, jSType0.isResolved());
      assertEquals(false, jSType0.isUnionType());
      assertEquals(false, jSType0.isVoidType());
      assertEquals(false, jSType0.isNoType());
      assertEquals(true, jSType0.isConstructor());
      assertEquals(false, jSType0.isEnumType());
      assertEquals(true, jSType0.isNominalConstructor());
      assertEquals(false, jSType0.isEnumElementType());
      assertEquals(false, jSType0.isBooleanValueType());
      assertEquals(false, jSType0.isFunctionPrototypeType());
      assertEquals(false, jSType0.isAllType());
      assertEquals(false, jSType0.isNoObjectType());
      assertEquals(false, jSType0.isCheckedUnknownType());
      assertEquals(false, jSType0.isRecordType());
      assertEquals(false, jSType0.isTemplatizedType());
      assertEquals(false, jSType0.isNoResolvedType());
  }

  @Test
  public void test22() {}
//   @Test
//   public void test22()  throws Throwable  {
//       Compiler compiler0 = new Compiler();
//       assertNotNull(compiler0);
//       assertEquals(0.0, compiler0.getProgress(), 0.01D);
//       
//       String string0 = "&";
//       Node node0 = compiler0.parseTestCode(string0);
//       assertNotNull(node0);
//       assertEquals(1, compiler0.getErrorCount());
//       assertEquals(false, compiler0.isIdeMode());
//       assertEquals(false, compiler0.acceptConstKeyword());
//       assertEquals(0, compiler0.getWarningCount());
//       assertEquals(0.0, compiler0.getProgress(), 0.01D);
//       assertEquals(true, compiler0.hasErrors());
//       assertEquals(false, compiler0.isTypeCheckingEnabled());
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
//       assertEquals(false, node0.isTrue());
//       assertEquals(false, node0.isContinue());
//       assertEquals(false, node0.isDefaultCase());
//       assertEquals(false, node0.isCase());
//       assertEquals(false, node0.isNE());
//       assertEquals(false, node0.isLabel());
//       assertEquals(false, node0.isIn());
//       assertEquals(false, node0.isSyntheticBlock());
//       assertEquals(false, node0.isOptionalArg());
//       assertEquals(false, node0.isGetElem());
//       assertEquals(false, node0.isExprResult());
//       assertEquals(0, node0.getChildCount());
//       assertEquals(-1, node0.getSourcePosition());
//       assertEquals(false, node0.isFor());
//       assertEquals(false, node0.isCast());
//       assertEquals(false, node0.isAdd());
//       assertEquals(false, node0.isDebugger());
//       assertEquals(true, node0.isScript());
//       assertEquals(false, node0.isComma());
//       assertEquals(false, node0.isName());
//       assertEquals(false, node0.isAssignAdd());
//       assertEquals(false, node0.hasOneChild());
//       assertEquals(0, node0.getChangeTime());
//       assertEquals(false, node0.isAnd());
//       assertEquals(false, node0.isAssign());
//       assertEquals(false, node0.isVoid());
//       assertEquals(false, node0.isWith());
//       assertEquals(false, node0.isGetProp());
//       assertEquals(0, node0.getSideEffectFlags());
//       assertEquals(false, node0.isDelProp());
//       assertEquals(false, node0.isGetterDef());
//       assertEquals(false, node0.isStringKey());
//       assertEquals(false, node0.hasMoreThanOneChild());
//       assertEquals(false, node0.isNumber());
//       assertEquals(false, node0.isArrayLit());
//       assertEquals(false, node0.isOnlyModifiesThisCall());
//       assertEquals(false, node0.isDo());
//       assertEquals(false, node0.isThrow());
//       assertEquals(false, node0.isVarArgs());
//       assertEquals(false, node0.isEmpty());
//       assertEquals(false, node0.isIf());
//       assertEquals(-1, node0.getLineno());
//       assertEquals(false, node0.isBreak());
//       assertEquals(false, node0.isObjectLit());
//       assertEquals(false, node0.isLabelName());
//       assertEquals(false, node0.isVar());
//       assertEquals(false, node0.isThis());
//       assertEquals(false, node0.isDec());
//       assertEquals(false, node0.hasChildren());
//       assertEquals(false, node0.isFromExterns());
//       assertEquals(false, node0.isTry());
//       assertEquals(false, node0.isNot());
//       assertEquals(-1, node0.getCharno());
//       assertEquals(false, node0.isOr());
//       assertEquals(false, node0.wasEmptyNode());
//       assertEquals(false, node0.isNew());
//       assertEquals(false, node0.isWhile());
//       assertEquals(false, node0.isNoSideEffectsCall());
//       assertEquals(true, node0.mayMutateArguments());
//       assertEquals(false, node0.isSetterDef());
//       assertEquals(false, node0.isOnlyModifiesArgumentsCall());
//       assertEquals(false, node0.isBlock());
//       assertEquals("[testcode]", node0.getSourceFileName());
//       assertEquals(false, node0.isInc());
//       assertEquals(false, node0.isInstanceOf());
//       assertEquals(0, node0.getLength());
//       assertEquals(false, node0.isFunction());
//       assertEquals(false, node0.isNull());
//       assertEquals(false, node0.isRegExp());
//       assertEquals(false, node0.isReturn());
//       assertEquals(false, node0.isCall());
//       assertEquals(false, node0.isLocalResultCall());
//       assertEquals(false, node0.isQuotedString());
//       assertEquals(false, node0.isString());
//       assertEquals(false, node0.isHook());
//       assertEquals(false, node0.isTypeOf());
//       assertEquals(true, node0.mayMutateGlobalStateOrThrow());
//       assertEquals(132, node0.getType());
//       assertEquals(false, node0.isParamList());
//       assertEquals(false, node0.isFalse());
//       assertEquals(false, node0.isSwitch());
//       assertEquals(false, node0.isCatch());
//       
//       TypeValidator typeValidator0 = new TypeValidator(compiler0);
//       assertNotNull(typeValidator0);
//       assertEquals(1, compiler0.getErrorCount());
//       assertEquals(false, compiler0.isIdeMode());
//       assertEquals(false, compiler0.acceptConstKeyword());
//       assertEquals(0, compiler0.getWarningCount());
//       assertEquals(0.0, compiler0.getProgress(), 0.01D);
//       assertEquals(true, compiler0.hasErrors());
//       assertEquals(false, compiler0.isTypeCheckingEnabled());
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
//       
//       InferJSDocInfo inferJSDocInfo0 = new InferJSDocInfo(compiler0);
//       assertNotNull(inferJSDocInfo0);
//       assertEquals(1, compiler0.getErrorCount());
//       assertEquals(false, compiler0.isIdeMode());
//       assertEquals(false, compiler0.acceptConstKeyword());
//       assertEquals(0, compiler0.getWarningCount());
//       assertEquals(0.0, compiler0.getProgress(), 0.01D);
//       assertEquals(true, compiler0.hasErrors());
//       assertEquals(false, compiler0.isTypeCheckingEnabled());
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
//       
//       NodeTraversal nodeTraversal0 = new NodeTraversal((AbstractCompiler) compiler0, (NodeTraversal.Callback) inferJSDocInfo0);
//       assertNotNull(nodeTraversal0);
//       assertEquals(1, compiler0.getErrorCount());
//       assertEquals(false, compiler0.isIdeMode());
//       assertEquals(false, compiler0.acceptConstKeyword());
//       assertEquals(0, compiler0.getWarningCount());
//       assertEquals(0.0, compiler0.getProgress(), 0.01D);
//       assertEquals(true, compiler0.hasErrors());
//       assertEquals(false, compiler0.isTypeCheckingEnabled());
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
//       assertEquals("", nodeTraversal0.getSourceName());
//       assertEquals(0, nodeTraversal0.getLineNumber());
//       
//       JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
//       assertNotNull(jSTypeRegistry0);
//       assertEquals(1, compiler0.getErrorCount());
//       assertEquals(false, compiler0.isIdeMode());
//       assertEquals(false, compiler0.acceptConstKeyword());
//       assertEquals(0, compiler0.getWarningCount());
//       assertEquals(0.0, compiler0.getProgress(), 0.01D);
//       assertEquals(true, compiler0.hasErrors());
//       assertEquals(false, compiler0.isTypeCheckingEnabled());
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
//       assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
//       
//       Scope scope0 = Scope.createGlobalScope(node0);
//       assertNotNull(scope0);
//       assertEquals(1, compiler0.getErrorCount());
//       assertEquals(false, compiler0.isIdeMode());
//       assertEquals(false, compiler0.acceptConstKeyword());
//       assertEquals(0, compiler0.getWarningCount());
//       assertEquals(0.0, compiler0.getProgress(), 0.01D);
//       assertEquals(true, compiler0.hasErrors());
//       assertEquals(false, compiler0.isTypeCheckingEnabled());
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
//       assertEquals(0, scope0.getVarCount());
//       assertEquals(true, scope0.isGlobal());
//       assertEquals(false, scope0.isLocal());
//       assertEquals(false, node0.isTrue());
//       assertEquals(false, node0.isContinue());
//       assertEquals(false, node0.isDefaultCase());
//       assertEquals(false, node0.isCase());
//       assertEquals(false, node0.isNE());
//       assertEquals(false, node0.isLabel());
//       assertEquals(false, node0.isIn());
//       assertEquals(false, node0.isSyntheticBlock());
//       assertEquals(false, node0.isOptionalArg());
//       assertEquals(false, node0.isGetElem());
//       assertEquals(false, node0.isExprResult());
//       assertEquals(0, node0.getChildCount());
//       assertEquals(-1, node0.getSourcePosition());
//       assertEquals(false, node0.isFor());
//       assertEquals(false, node0.isCast());
//       assertEquals(false, node0.isAdd());
//       assertEquals(false, node0.isDebugger());
//       assertEquals(true, node0.isScript());
//       assertEquals(false, node0.isComma());
//       assertEquals(false, node0.isName());
//       assertEquals(false, node0.isAssignAdd());
//       assertEquals(false, node0.hasOneChild());
//       assertEquals(0, node0.getChangeTime());
//       assertEquals(false, node0.isAnd());
//       assertEquals(false, node0.isAssign());
//       assertEquals(false, node0.isVoid());
//       assertEquals(false, node0.isWith());
//       assertEquals(false, node0.isGetProp());
//       assertEquals(0, node0.getSideEffectFlags());
//       assertEquals(false, node0.isDelProp());
//       assertEquals(false, node0.isGetterDef());
//       assertEquals(false, node0.isStringKey());
//       assertEquals(false, node0.hasMoreThanOneChild());
//       assertEquals(false, node0.isNumber());
//       assertEquals(false, node0.isArrayLit());
//       assertEquals(false, node0.isOnlyModifiesThisCall());
//       assertEquals(false, node0.isDo());
//       assertEquals(false, node0.isThrow());
//       assertEquals(false, node0.isVarArgs());
//       assertEquals(false, node0.isEmpty());
//       assertEquals(false, node0.isIf());
//       assertEquals(-1, node0.getLineno());
//       assertEquals(false, node0.isBreak());
//       assertEquals(false, node0.isObjectLit());
//       assertEquals(false, node0.isLabelName());
//       assertEquals(false, node0.isVar());
//       assertEquals(false, node0.isThis());
//       assertEquals(false, node0.isDec());
//       assertEquals(false, node0.hasChildren());
//       assertEquals(false, node0.isFromExterns());
//       assertEquals(false, node0.isTry());
//       assertEquals(false, node0.isNot());
//       assertEquals(-1, node0.getCharno());
//       assertEquals(false, node0.isOr());
//       assertEquals(false, node0.wasEmptyNode());
//       assertEquals(false, node0.isNew());
//       assertEquals(false, node0.isWhile());
//       assertEquals(false, node0.isNoSideEffectsCall());
//       assertEquals(true, node0.mayMutateArguments());
//       assertEquals(false, node0.isSetterDef());
//       assertEquals(false, node0.isOnlyModifiesArgumentsCall());
//       assertEquals(false, node0.isBlock());
//       assertEquals("[testcode]", node0.getSourceFileName());
//       assertEquals(false, node0.isInc());
//       assertEquals(false, node0.isInstanceOf());
//       assertEquals(0, node0.getLength());
//       assertEquals(false, node0.isFunction());
//       assertEquals(false, node0.isNull());
//       assertEquals(false, node0.isRegExp());
//       assertEquals(false, node0.isReturn());
//       assertEquals(false, node0.isCall());
//       assertEquals(false, node0.isLocalResultCall());
//       assertEquals(false, node0.isQuotedString());
//       assertEquals(false, node0.isString());
//       assertEquals(false, node0.isHook());
//       assertEquals(false, node0.isTypeOf());
//       assertEquals(true, node0.mayMutateGlobalStateOrThrow());
//       assertEquals(132, node0.getType());
//       assertEquals(false, node0.isParamList());
//       assertEquals(false, node0.isFalse());
//       assertEquals(false, node0.isSwitch());
//       assertEquals(false, node0.isCatch());
//       
//       int int0 = (-1544);
//       JSType jSType0 = jSTypeRegistry0.getType((StaticScope<JSType>) scope0, string0, string0, int0, int0);
//       assertNotNull(jSType0);
//       assertEquals(1, compiler0.getErrorCount());
//       assertEquals(false, compiler0.isIdeMode());
//       assertEquals(false, compiler0.acceptConstKeyword());
//       assertEquals(0, compiler0.getWarningCount());
//       assertEquals(0.0, compiler0.getProgress(), 0.01D);
//       assertEquals(true, compiler0.hasErrors());
//       assertEquals(false, compiler0.isTypeCheckingEnabled());
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
//       assertEquals(false, jSType0.isFunctionPrototypeType());
//       assertEquals(false, jSType0.isNullType());
//       assertEquals(false, jSType0.isStringValueType());
//       assertEquals(false, jSType0.isVoidType());
//       assertEquals(false, jSType0.isCheckedUnknownType());
//       assertEquals(false, jSType0.isEnumType());
//       assertEquals(false, jSType0.isNoType());
//       assertEquals(false, jSType0.isUnionType());
//       assertEquals(false, jSType0.isEnumElementType());
//       assertEquals(false, jSType0.isOrdinaryFunction());
//       assertEquals(false, jSType0.isBooleanValueType());
//       assertEquals(false, jSType0.isFunctionType());
//       assertEquals(false, jSType0.isInterface());
//       assertEquals(false, jSType0.isNoObjectType());
//       assertEquals(false, jSType0.isTemplateType());
//       assertEquals(false, jSType0.isResolved());
//       assertEquals(false, jSType0.isNoResolvedType());
//       assertEquals(false, jSType0.isAllType());
//       assertEquals(false, jSType0.isNumberValueType());
//       assertEquals(false, jSType0.isNominalConstructor());
//       assertEquals(false, jSType0.isConstructor());
//       assertEquals(true, jSType0.isNominalType());
//       assertEquals(false, jSType0.isTemplatizedType());
//       assertEquals(false, jSType0.isRecordType());
//       assertEquals(0, scope0.getVarCount());
//       assertEquals(true, scope0.isGlobal());
//       assertEquals(false, scope0.isLocal());
//       assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
//       assertEquals(false, node0.isTrue());
//       assertEquals(false, node0.isContinue());
//       assertEquals(false, node0.isDefaultCase());
//       assertEquals(false, node0.isCase());
//       assertEquals(false, node0.isNE());
//       assertEquals(false, node0.isLabel());
//       assertEquals(false, node0.isIn());
//       assertEquals(false, node0.isSyntheticBlock());
//       assertEquals(false, node0.isOptionalArg());
//       assertEquals(false, node0.isGetElem());
//       assertEquals(false, node0.isExprResult());
//       assertEquals(0, node0.getChildCount());
//       assertEquals(-1, node0.getSourcePosition());
//       assertEquals(false, node0.isFor());
//       assertEquals(false, node0.isCast());
//       assertEquals(false, node0.isAdd());
//       assertEquals(false, node0.isDebugger());
//       assertEquals(true, node0.isScript());
//       assertEquals(false, node0.isComma());
//       assertEquals(false, node0.isName());
//       assertEquals(false, node0.isAssignAdd());
//       assertEquals(false, node0.hasOneChild());
//       assertEquals(0, node0.getChangeTime());
//       assertEquals(false, node0.isAnd());
//       assertEquals(false, node0.isAssign());
//       assertEquals(false, node0.isVoid());
//       assertEquals(false, node0.isWith());
//       assertEquals(false, node0.isGetProp());
//       assertEquals(0, node0.getSideEffectFlags());
//       assertEquals(false, node0.isDelProp());
//       assertEquals(false, node0.isGetterDef());
//       assertEquals(false, node0.isStringKey());
//       assertEquals(false, node0.hasMoreThanOneChild());
//       assertEquals(false, node0.isNumber());
//       assertEquals(false, node0.isArrayLit());
//       assertEquals(false, node0.isOnlyModifiesThisCall());
//       assertEquals(false, node0.isDo());
//       assertEquals(false, node0.isThrow());
//       assertEquals(false, node0.isVarArgs());
//       assertEquals(false, node0.isEmpty());
//       assertEquals(false, node0.isIf());
//       assertEquals(-1, node0.getLineno());
//       assertEquals(false, node0.isBreak());
//       assertEquals(false, node0.isObjectLit());
//       assertEquals(false, node0.isLabelName());
//       assertEquals(false, node0.isVar());
//       assertEquals(false, node0.isThis());
//       assertEquals(false, node0.isDec());
//       assertEquals(false, node0.hasChildren());
//       assertEquals(false, node0.isFromExterns());
//       assertEquals(false, node0.isTry());
//       assertEquals(false, node0.isNot());
//       assertEquals(-1, node0.getCharno());
//       assertEquals(false, node0.isOr());
//       assertEquals(false, node0.wasEmptyNode());
//       assertEquals(false, node0.isNew());
//       assertEquals(false, node0.isWhile());
//       assertEquals(false, node0.isNoSideEffectsCall());
//       assertEquals(true, node0.mayMutateArguments());
//       assertEquals(false, node0.isSetterDef());
//       assertEquals(false, node0.isOnlyModifiesArgumentsCall());
//       assertEquals(false, node0.isBlock());
//       assertEquals("[testcode]", node0.getSourceFileName());
//       assertEquals(false, node0.isInc());
//       assertEquals(false, node0.isInstanceOf());
//       assertEquals(0, node0.getLength());
//       assertEquals(false, node0.isFunction());
//       assertEquals(false, node0.isNull());
//       assertEquals(false, node0.isRegExp());
//       assertEquals(false, node0.isReturn());
//       assertEquals(false, node0.isCall());
//       assertEquals(false, node0.isLocalResultCall());
//       assertEquals(false, node0.isQuotedString());
//       assertEquals(false, node0.isString());
//       assertEquals(false, node0.isHook());
//       assertEquals(false, node0.isTypeOf());
//       assertEquals(true, node0.mayMutateGlobalStateOrThrow());
//       assertEquals(132, node0.getType());
//       assertEquals(false, node0.isParamList());
//       assertEquals(false, node0.isFalse());
//       assertEquals(false, node0.isSwitch());
//       assertEquals(false, node0.isCatch());
//       
//       typeValidator0.expectBitwiseable(nodeTraversal0, node0, jSType0, string0);
//       assertEquals(1, compiler0.getErrorCount());
//       assertEquals(false, compiler0.isIdeMode());
//       assertEquals(false, compiler0.acceptConstKeyword());
//       assertEquals(0, compiler0.getWarningCount());
//       assertEquals(0.0, compiler0.getProgress(), 0.01D);
//       assertEquals(true, compiler0.hasErrors());
//       assertEquals(false, compiler0.isTypeCheckingEnabled());
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
//       assertEquals(false, jSType0.isFunctionPrototypeType());
//       assertEquals(false, jSType0.isNullType());
//       assertEquals(false, jSType0.isStringValueType());
//       assertEquals(false, jSType0.isVoidType());
//       assertEquals(false, jSType0.isCheckedUnknownType());
//       assertEquals(false, jSType0.isEnumType());
//       assertEquals(false, jSType0.isNoType());
//       assertEquals(false, jSType0.isUnionType());
//       assertEquals(false, jSType0.isEnumElementType());
//       assertEquals(false, jSType0.isOrdinaryFunction());
//       assertEquals(false, jSType0.isBooleanValueType());
//       assertEquals(false, jSType0.isFunctionType());
//       assertEquals(false, jSType0.isInterface());
//       assertEquals(false, jSType0.isNoObjectType());
//       assertEquals(false, jSType0.isTemplateType());
//       assertEquals(false, jSType0.isResolved());
//       assertEquals(false, jSType0.isNoResolvedType());
//       assertEquals(false, jSType0.isAllType());
//       assertEquals(false, jSType0.isNumberValueType());
//       assertEquals(false, jSType0.isNominalConstructor());
//       assertEquals(false, jSType0.isConstructor());
//       assertEquals(true, jSType0.isNominalType());
//       assertEquals(false, jSType0.isTemplatizedType());
//       assertEquals(false, jSType0.isRecordType());
//       assertEquals(0, scope0.getVarCount());
//       assertEquals(true, scope0.isGlobal());
//       assertEquals(false, scope0.isLocal());
//       assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
//       assertEquals("", nodeTraversal0.getSourceName());
//       assertEquals(0, nodeTraversal0.getLineNumber());
//       assertEquals(false, node0.isTrue());
//       assertEquals(false, node0.isContinue());
//       assertEquals(false, node0.isDefaultCase());
//       assertEquals(false, node0.isCase());
//       assertEquals(false, node0.isNE());
//       assertEquals(false, node0.isLabel());
//       assertEquals(false, node0.isIn());
//       assertEquals(false, node0.isSyntheticBlock());
//       assertEquals(false, node0.isOptionalArg());
//       assertEquals(false, node0.isGetElem());
//       assertEquals(false, node0.isExprResult());
//       assertEquals(0, node0.getChildCount());
//       assertEquals(-1, node0.getSourcePosition());
//       assertEquals(false, node0.isFor());
//       assertEquals(false, node0.isCast());
//       assertEquals(false, node0.isAdd());
//       assertEquals(false, node0.isDebugger());
//       assertEquals(true, node0.isScript());
//       assertEquals(false, node0.isComma());
//       assertEquals(false, node0.isName());
//       assertEquals(false, node0.isAssignAdd());
//       assertEquals(false, node0.hasOneChild());
//       assertEquals(0, node0.getChangeTime());
//       assertEquals(false, node0.isAnd());
//       assertEquals(false, node0.isAssign());
//       assertEquals(false, node0.isVoid());
//       assertEquals(false, node0.isWith());
//       assertEquals(false, node0.isGetProp());
//       assertEquals(0, node0.getSideEffectFlags());
//       assertEquals(false, node0.isDelProp());
//       assertEquals(false, node0.isGetterDef());
//       assertEquals(false, node0.isStringKey());
//       assertEquals(false, node0.hasMoreThanOneChild());
//       assertEquals(false, node0.isNumber());
//       assertEquals(false, node0.isArrayLit());
//       assertEquals(false, node0.isOnlyModifiesThisCall());
//       assertEquals(false, node0.isDo());
//       assertEquals(false, node0.isThrow());
//       assertEquals(false, node0.isVarArgs());
//       assertEquals(false, node0.isEmpty());
//       assertEquals(false, node0.isIf());
//       assertEquals(-1, node0.getLineno());
//       assertEquals(false, node0.isBreak());
//       assertEquals(false, node0.isObjectLit());
//       assertEquals(false, node0.isLabelName());
//       assertEquals(false, node0.isVar());
//       assertEquals(false, node0.isThis());
//       assertEquals(false, node0.isDec());
//       assertEquals(false, node0.hasChildren());
//       assertEquals(false, node0.isFromExterns());
//       assertEquals(false, node0.isTry());
//       assertEquals(false, node0.isNot());
//       assertEquals(-1, node0.getCharno());
//       assertEquals(false, node0.isOr());
//       assertEquals(false, node0.wasEmptyNode());
//       assertEquals(false, node0.isNew());
//       assertEquals(false, node0.isWhile());
//       assertEquals(false, node0.isNoSideEffectsCall());
//       assertEquals(true, node0.mayMutateArguments());
//       assertEquals(false, node0.isSetterDef());
//       assertEquals(false, node0.isOnlyModifiesArgumentsCall());
//       assertEquals(false, node0.isBlock());
//       assertEquals("[testcode]", node0.getSourceFileName());
//       assertEquals(false, node0.isInc());
//       assertEquals(false, node0.isInstanceOf());
//       assertEquals(0, node0.getLength());
//       assertEquals(false, node0.isFunction());
//       assertEquals(false, node0.isNull());
//       assertEquals(false, node0.isRegExp());
//       assertEquals(false, node0.isReturn());
//       assertEquals(false, node0.isCall());
//       assertEquals(false, node0.isLocalResultCall());
//       assertEquals(false, node0.isQuotedString());
//       assertEquals(false, node0.isString());
//       assertEquals(false, node0.isHook());
//       assertEquals(false, node0.isTypeOf());
//       assertEquals(true, node0.mayMutateGlobalStateOrThrow());
//       assertEquals(132, node0.getType());
//       assertEquals(false, node0.isParamList());
//       assertEquals(false, node0.isFalse());
//       assertEquals(false, node0.isSwitch());
//       assertEquals(false, node0.isCatch());
//   }

  @Test
  public void test23()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      assertNotNull(compiler0);
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      
      String string0 = "&";
      Node node0 = compiler0.parseTestCode(string0);
      assertNotNull(node0);
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(true, compiler0.hasErrors());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(1, compiler0.getErrorCount());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isVoid());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.isStringKey());
      assertEquals(false, node0.isString());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isFor());
      assertEquals(true, node0.mayMutateArguments());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.hasOneChild());
      assertEquals(0, node0.getChangeTime());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isExprResult());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isOr());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(true, node0.mayMutateGlobalStateOrThrow());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isThis());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isBlock());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isReturn());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isDec());
      assertEquals(true, node0.isScript());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isAssign());
      assertEquals(132, node0.getType());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isAnd());
      assertEquals("[testcode]", node0.getSourceFileName());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isCast());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isOnlyModifiesArgumentsCall());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isSetterDef());
      
      TypeValidator typeValidator0 = new TypeValidator(compiler0);
      assertNotNull(typeValidator0);
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(true, compiler0.hasErrors());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(1, compiler0.getErrorCount());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      
      InferJSDocInfo inferJSDocInfo0 = new InferJSDocInfo(compiler0);
      assertNotNull(inferJSDocInfo0);
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(true, compiler0.hasErrors());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(1, compiler0.getErrorCount());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      
      NodeTraversal nodeTraversal0 = new NodeTraversal((AbstractCompiler) compiler0, (NodeTraversal.Callback) inferJSDocInfo0);
      assertNotNull(nodeTraversal0);
      assertEquals(0, nodeTraversal0.getLineNumber());
      assertEquals("", nodeTraversal0.getSourceName());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(true, compiler0.hasErrors());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(1, compiler0.getErrorCount());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      
      JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
      assertNotNull(jSTypeRegistry0);
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(true, compiler0.hasErrors());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(1, compiler0.getErrorCount());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      Scope scope0 = Scope.createGlobalScope(node0);
      assertNotNull(scope0);
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(true, compiler0.hasErrors());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(1, compiler0.getErrorCount());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(0, scope0.getVarCount());
      assertEquals(false, scope0.isLocal());
      assertEquals(true, scope0.isGlobal());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isVoid());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.isStringKey());
      assertEquals(false, node0.isString());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isFor());
      assertEquals(true, node0.mayMutateArguments());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.hasOneChild());
      assertEquals(0, node0.getChangeTime());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isExprResult());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isOr());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(true, node0.mayMutateGlobalStateOrThrow());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isThis());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isBlock());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isReturn());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isDec());
      assertEquals(true, node0.isScript());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isAssign());
      assertEquals(132, node0.getType());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isAnd());
      assertEquals("[testcode]", node0.getSourceFileName());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isCast());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isOnlyModifiesArgumentsCall());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isSetterDef());
      
      int int0 = (-1544);
      JSType jSType0 = jSTypeRegistry0.getType((StaticScope<JSType>) scope0, string0, string0, int0, int0);
      assertNotNull(jSType0);
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(true, compiler0.hasErrors());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(1, compiler0.getErrorCount());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(0, scope0.getVarCount());
      assertEquals(false, scope0.isLocal());
      assertEquals(true, scope0.isGlobal());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, jSType0.isNoObjectType());
      assertEquals(false, jSType0.isNoResolvedType());
      assertEquals(false, jSType0.isRecordType());
      assertEquals(false, jSType0.isVoidType());
      assertEquals(false, jSType0.isTemplatizedType());
      assertEquals(false, jSType0.isEnumType());
      assertEquals(false, jSType0.isEnumElementType());
      assertEquals(false, jSType0.isTemplateType());
      assertEquals(false, jSType0.isNominalConstructor());
      assertEquals(false, jSType0.isFunctionPrototypeType());
      assertEquals(true, jSType0.isNominalType());
      assertEquals(false, jSType0.isOrdinaryFunction());
      assertEquals(false, jSType0.isConstructor());
      assertEquals(false, jSType0.isAllType());
      assertEquals(false, jSType0.isInterface());
      assertEquals(false, jSType0.isFunctionType());
      assertEquals(false, jSType0.isNumberValueType());
      assertEquals(false, jSType0.isNoType());
      assertEquals(false, jSType0.isStringValueType());
      assertEquals(false, jSType0.isUnionType());
      assertEquals(false, jSType0.isBooleanValueType());
      assertEquals(false, jSType0.isNullType());
      assertEquals(false, jSType0.isCheckedUnknownType());
      assertEquals(false, jSType0.isResolved());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isVoid());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.isStringKey());
      assertEquals(false, node0.isString());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isFor());
      assertEquals(true, node0.mayMutateArguments());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.hasOneChild());
      assertEquals(0, node0.getChangeTime());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isExprResult());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isOr());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(true, node0.mayMutateGlobalStateOrThrow());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isThis());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isBlock());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isReturn());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isDec());
      assertEquals(true, node0.isScript());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isAssign());
      assertEquals(132, node0.getType());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isAnd());
      assertEquals("[testcode]", node0.getSourceFileName());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isCast());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isOnlyModifiesArgumentsCall());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isSetterDef());
      
      typeValidator0.expectNumber(nodeTraversal0, node0, jSType0, string0);
      assertEquals(0, nodeTraversal0.getLineNumber());
      assertEquals("", nodeTraversal0.getSourceName());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(true, compiler0.hasErrors());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(1, compiler0.getErrorCount());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(0, scope0.getVarCount());
      assertEquals(false, scope0.isLocal());
      assertEquals(true, scope0.isGlobal());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, jSType0.isNoObjectType());
      assertEquals(false, jSType0.isNoResolvedType());
      assertEquals(false, jSType0.isRecordType());
      assertEquals(false, jSType0.isVoidType());
      assertEquals(false, jSType0.isTemplatizedType());
      assertEquals(false, jSType0.isEnumType());
      assertEquals(false, jSType0.isEnumElementType());
      assertEquals(false, jSType0.isTemplateType());
      assertEquals(false, jSType0.isNominalConstructor());
      assertEquals(false, jSType0.isFunctionPrototypeType());
      assertEquals(true, jSType0.isNominalType());
      assertEquals(false, jSType0.isOrdinaryFunction());
      assertEquals(false, jSType0.isConstructor());
      assertEquals(false, jSType0.isAllType());
      assertEquals(false, jSType0.isInterface());
      assertEquals(false, jSType0.isFunctionType());
      assertEquals(false, jSType0.isNumberValueType());
      assertEquals(false, jSType0.isNoType());
      assertEquals(false, jSType0.isStringValueType());
      assertEquals(false, jSType0.isUnionType());
      assertEquals(false, jSType0.isBooleanValueType());
      assertEquals(false, jSType0.isNullType());
      assertEquals(false, jSType0.isCheckedUnknownType());
      assertEquals(false, jSType0.isResolved());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isVoid());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.isStringKey());
      assertEquals(false, node0.isString());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isFor());
      assertEquals(true, node0.mayMutateArguments());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.hasOneChild());
      assertEquals(0, node0.getChangeTime());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isExprResult());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isOr());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(true, node0.mayMutateGlobalStateOrThrow());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isThis());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isBlock());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isReturn());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isDec());
      assertEquals(true, node0.isScript());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isAssign());
      assertEquals(132, node0.getType());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isAnd());
      assertEquals("[testcode]", node0.getSourceFileName());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isCast());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isOnlyModifiesArgumentsCall());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isSetterDef());
  }

  @Test
  public void test24() {}
//   @Test
//   public void test24()  throws Throwable  {
//       Compiler compiler0 = new Compiler();
//       assertNotNull(compiler0);
//       assertEquals(0.0, compiler0.getProgress(), 0.01D);
//       
//       String string0 = "&";
//       Node node0 = compiler0.parseTestCode(string0);
//       assertNotNull(node0);
//       assertEquals(132, node0.getType());
//       assertEquals(false, node0.isCall());
//       assertEquals(false, node0.isLabelName());
//       assertEquals(false, node0.isBlock());
//       assertEquals(false, node0.isOptionalArg());
//       assertEquals(false, node0.isExprResult());
//       assertEquals(false, node0.isDelProp());
//       assertEquals(false, node0.isOnlyModifiesArgumentsCall());
//       assertEquals(false, node0.hasChildren());
//       assertEquals(false, node0.isObjectLit());
//       assertEquals(false, node0.isOr());
//       assertEquals(false, node0.isFunction());
//       assertEquals(false, node0.isVarArgs());
//       assertEquals(false, node0.isDec());
//       assertEquals(false, node0.isName());
//       assertEquals(false, node0.isThrow());
//       assertEquals(false, node0.isGetProp());
//       assertEquals(false, node0.isFromExterns());
//       assertEquals(false, node0.isAssignAdd());
//       assertEquals(false, node0.isTrue());
//       assertEquals(false, node0.isBreak());
//       assertEquals(false, node0.isNumber());
//       assertEquals(false, node0.isSwitch());
//       assertEquals(false, node0.isComma());
//       assertEquals(false, node0.isVoid());
//       assertEquals(false, node0.isArrayLit());
//       assertEquals(0, node0.getLength());
//       assertEquals(false, node0.isCast());
//       assertEquals(false, node0.isAdd());
//       assertEquals(false, node0.isTypeOf());
//       assertEquals(false, node0.isFor());
//       assertEquals(false, node0.isDo());
//       assertEquals(false, node0.hasOneChild());
//       assertEquals(false, node0.isDefaultCase());
//       assertEquals(false, node0.isNull());
//       assertEquals(false, node0.isSetterDef());
//       assertEquals(true, node0.mayMutateGlobalStateOrThrow());
//       assertEquals(false, node0.isDebugger());
//       assertEquals(false, node0.isGetterDef());
//       assertEquals(-1, node0.getSourcePosition());
//       assertEquals(false, node0.isParamList());
//       assertEquals(false, node0.isWith());
//       assertEquals(false, node0.isFalse());
//       assertEquals(false, node0.isQuotedString());
//       assertEquals(-1, node0.getLineno());
//       assertEquals(false, node0.isOnlyModifiesThisCall());
//       assertEquals(false, node0.isRegExp());
//       assertEquals(false, node0.isEmpty());
//       assertEquals(false, node0.isGetElem());
//       assertEquals(false, node0.isIf());
//       assertEquals(false, node0.isReturn());
//       assertEquals(false, node0.isCatch());
//       assertEquals(false, node0.isLocalResultCall());
//       assertEquals(false, node0.isVar());
//       assertEquals(false, node0.isStringKey());
//       assertEquals("[testcode]", node0.getSourceFileName());
//       assertEquals(-1, node0.getCharno());
//       assertEquals(false, node0.isIn());
//       assertEquals(false, node0.isNoSideEffectsCall());
//       assertEquals(true, node0.mayMutateArguments());
//       assertEquals(false, node0.isLabel());
//       assertEquals(false, node0.isNE());
//       assertEquals(false, node0.isAnd());
//       assertEquals(false, node0.isContinue());
//       assertEquals(false, node0.isSyntheticBlock());
//       assertEquals(true, node0.isScript());
//       assertEquals(false, node0.isNot());
//       assertEquals(0, node0.getChildCount());
//       assertEquals(false, node0.isInstanceOf());
//       assertEquals(false, node0.isCase());
//       assertEquals(false, node0.isHook());
//       assertEquals(false, node0.isThis());
//       assertEquals(false, node0.isInc());
//       assertEquals(false, node0.isWhile());
//       assertEquals(0, node0.getChangeTime());
//       assertEquals(false, node0.isString());
//       assertEquals(false, node0.wasEmptyNode());
//       assertEquals(false, node0.hasMoreThanOneChild());
//       assertEquals(0, node0.getSideEffectFlags());
//       assertEquals(false, node0.isAssign());
//       assertEquals(false, node0.isNew());
//       assertEquals(false, node0.isTry());
//       assertEquals(0, compiler0.getWarningCount());
//       assertEquals(0.0, compiler0.getProgress(), 0.01D);
//       assertEquals(true, compiler0.hasErrors());
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
//       assertEquals(false, compiler0.isTypeCheckingEnabled());
//       assertEquals(false, compiler0.isIdeMode());
//       assertEquals(false, compiler0.acceptConstKeyword());
//       assertEquals(1, compiler0.getErrorCount());
//       
//       TypeValidator typeValidator0 = new TypeValidator(compiler0);
//       assertNotNull(typeValidator0);
//       assertEquals(0, compiler0.getWarningCount());
//       assertEquals(0.0, compiler0.getProgress(), 0.01D);
//       assertEquals(true, compiler0.hasErrors());
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
//       assertEquals(false, compiler0.isTypeCheckingEnabled());
//       assertEquals(false, compiler0.isIdeMode());
//       assertEquals(false, compiler0.acceptConstKeyword());
//       assertEquals(1, compiler0.getErrorCount());
//       
//       CheckLevel checkLevel0 = CheckLevel.ERROR;
//       CheckUnreachableCode checkUnreachableCode0 = new CheckUnreachableCode(compiler0, checkLevel0);
//       assertNotNull(checkUnreachableCode0);
//       assertEquals(0, compiler0.getWarningCount());
//       assertEquals(0.0, compiler0.getProgress(), 0.01D);
//       assertEquals(true, compiler0.hasErrors());
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
//       assertEquals(false, compiler0.isTypeCheckingEnabled());
//       assertEquals(false, compiler0.isIdeMode());
//       assertEquals(false, compiler0.acceptConstKeyword());
//       assertEquals(1, compiler0.getErrorCount());
//       
//       NodeTraversal nodeTraversal0 = new NodeTraversal((AbstractCompiler) compiler0, (NodeTraversal.Callback) checkUnreachableCode0);
//       assertNotNull(nodeTraversal0);
//       assertEquals(0, compiler0.getWarningCount());
//       assertEquals(0.0, compiler0.getProgress(), 0.01D);
//       assertEquals(true, compiler0.hasErrors());
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
//       assertEquals(false, compiler0.isTypeCheckingEnabled());
//       assertEquals(false, compiler0.isIdeMode());
//       assertEquals(false, compiler0.acceptConstKeyword());
//       assertEquals(1, compiler0.getErrorCount());
//       assertEquals(0, nodeTraversal0.getLineNumber());
//       assertEquals("", nodeTraversal0.getSourceName());
//       
//       ErrorReporter errorReporter0 = null;
//       JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(errorReporter0);
//       assertNotNull(jSTypeRegistry0);
//       assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
//       
//       JSTypeNative jSTypeNative0 = JSTypeNative.FUNCTION_FUNCTION_TYPE;
//       FunctionType functionType0 = (FunctionType)jSTypeRegistry0.getNativeType(jSTypeNative0);
//       assertNotNull(functionType0);
//       assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
//       assertEquals(false, functionType0.isInterface());
//       assertEquals(false, functionType0.isReturnTypeInferred());
//       assertEquals(false, functionType0.isTemplatizedType());
//       assertEquals(false, functionType0.isCheckedUnknownType());
//       assertEquals(false, functionType0.isEnumElementType());
//       assertEquals(false, functionType0.isNullType());
//       assertEquals(true, functionType0.isFunctionType());
//       assertEquals(false, functionType0.isNoType());
//       assertEquals(false, functionType0.isOrdinaryFunction());
//       assertEquals(false, functionType0.isRecordType());
//       assertEquals(false, functionType0.isFunctionPrototypeType());
//       assertEquals(true, functionType0.isConstructor());
//       assertEquals(true, functionType0.hasCachedValues());
//       assertEquals(true, functionType0.canBeCalled());
//       assertEquals(false, functionType0.isTemplateType());
//       assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
//       assertEquals(false, functionType0.isAllType());
//       assertEquals(false, functionType0.isEnumType());
//       assertEquals(false, functionType0.isStringValueType());
//       assertEquals(2147483647, functionType0.getMaxArguments());
//       assertEquals(false, functionType0.isVoidType());
//       assertEquals(0, functionType0.getExtendedInterfacesCount());
//       assertEquals(false, functionType0.isNoObjectType());
//       assertEquals(false, functionType0.isUnionType());
//       assertEquals(false, functionType0.isNumberValueType());
//       assertEquals(true, functionType0.isNominalConstructor());
//       assertEquals(true, functionType0.hasInstanceType());
//       assertEquals(false, functionType0.isBooleanValueType());
//       assertEquals(false, functionType0.isNoResolvedType());
//       assertEquals(false, functionType0.isResolved());
//       assertEquals(false, functionType0.isNominalType());
//       
//       FunctionType functionType1 = JSType.toMaybeFunctionType((JSType) functionType0);
//       assertNotNull(functionType1);
//       assertSame(functionType0, functionType1);
//       assertSame(functionType1, functionType0);
//       assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
//       assertEquals(false, functionType0.isInterface());
//       assertEquals(false, functionType0.isReturnTypeInferred());
//       assertEquals(false, functionType0.isTemplatizedType());
//       assertEquals(false, functionType0.isCheckedUnknownType());
//       assertEquals(false, functionType0.isEnumElementType());
//       assertEquals(false, functionType0.isNullType());
//       assertEquals(true, functionType0.isFunctionType());
//       assertEquals(false, functionType0.isNoType());
//       assertEquals(false, functionType0.isOrdinaryFunction());
//       assertEquals(false, functionType0.isRecordType());
//       assertEquals(false, functionType0.isFunctionPrototypeType());
//       assertEquals(true, functionType0.isConstructor());
//       assertEquals(true, functionType0.hasCachedValues());
//       assertEquals(true, functionType0.canBeCalled());
//       assertEquals(false, functionType0.isTemplateType());
//       assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
//       assertEquals(false, functionType0.isAllType());
//       assertEquals(false, functionType0.isEnumType());
//       assertEquals(false, functionType0.isStringValueType());
//       assertEquals(2147483647, functionType0.getMaxArguments());
//       assertEquals(false, functionType0.isVoidType());
//       assertEquals(0, functionType0.getExtendedInterfacesCount());
//       assertEquals(false, functionType0.isNoObjectType());
//       assertEquals(false, functionType0.isUnionType());
//       assertEquals(false, functionType0.isNumberValueType());
//       assertEquals(true, functionType0.isNominalConstructor());
//       assertEquals(true, functionType0.hasInstanceType());
//       assertEquals(false, functionType0.isBooleanValueType());
//       assertEquals(false, functionType0.isNoResolvedType());
//       assertEquals(false, functionType0.isResolved());
//       assertEquals(false, functionType0.isNominalType());
//       assertEquals(false, functionType1.isCheckedUnknownType());
//       assertEquals(true, functionType1.canBeCalled());
//       assertEquals(BooleanLiteralSet.TRUE, functionType1.getPossibleToBooleanOutcomes());
//       assertEquals(false, functionType1.isNoObjectType());
//       assertEquals(false, functionType1.isInterface());
//       assertEquals(false, functionType1.isNoResolvedType());
//       assertEquals(false, functionType1.isOrdinaryFunction());
//       assertEquals(false, functionType1.isNoType());
//       assertEquals(true, functionType1.hasInstanceType());
//       assertEquals(0, functionType1.getExtendedInterfacesCount());
//       assertEquals(false, functionType1.isResolved());
//       assertEquals(true, functionType1.isConstructor());
//       assertEquals(false, functionType1.isNumberValueType());
//       assertEquals(true, functionType1.isNominalConstructor());
//       assertEquals(true, functionType1.hasCachedValues());
//       assertEquals(false, functionType1.isStringValueType());
//       assertEquals(false, functionType1.isBooleanValueType());
//       assertEquals(false, functionType1.isRecordType());
//       assertEquals(false, functionType1.isVoidType());
//       assertEquals(false, functionType1.isAllType());
//       assertEquals(false, functionType1.isNullType());
//       assertEquals(false, functionType1.isFunctionPrototypeType());
//       assertEquals(false, functionType1.isTemplatizedType());
//       assertEquals(false, functionType1.isNominalType());
//       assertEquals(2147483647, functionType1.getMaxArguments());
//       assertEquals(false, functionType1.isTemplateType());
//       assertEquals(false, functionType1.isEnumElementType());
//       assertEquals(false, functionType1.isEnumType());
//       assertEquals(true, functionType1.isFunctionType());
//       assertEquals(false, functionType1.isUnionType());
//       assertEquals(false, functionType1.isReturnTypeInferred());
//       
//       typeValidator0.expectString(nodeTraversal0, node0, functionType1, string0);
//       assertSame(functionType0, functionType1);
//       assertSame(functionType1, functionType0);
//       assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
//       assertEquals(132, node0.getType());
//       assertEquals(false, node0.isCall());
//       assertEquals(false, node0.isLabelName());
//       assertEquals(false, node0.isBlock());
//       assertEquals(false, node0.isOptionalArg());
//       assertEquals(false, node0.isExprResult());
//       assertEquals(false, node0.isDelProp());
//       assertEquals(false, node0.isOnlyModifiesArgumentsCall());
//       assertEquals(false, node0.hasChildren());
//       assertEquals(false, node0.isObjectLit());
//       assertEquals(false, node0.isOr());
//       assertEquals(false, node0.isFunction());
//       assertEquals(false, node0.isVarArgs());
//       assertEquals(false, node0.isDec());
//       assertEquals(false, node0.isName());
//       assertEquals(false, node0.isThrow());
//       assertEquals(false, node0.isGetProp());
//       assertEquals(false, node0.isFromExterns());
//       assertEquals(false, node0.isAssignAdd());
//       assertEquals(false, node0.isTrue());
//       assertEquals(false, node0.isBreak());
//       assertEquals(false, node0.isNumber());
//       assertEquals(false, node0.isSwitch());
//       assertEquals(false, node0.isComma());
//       assertEquals(false, node0.isVoid());
//       assertEquals(false, node0.isArrayLit());
//       assertEquals(0, node0.getLength());
//       assertEquals(false, node0.isCast());
//       assertEquals(false, node0.isAdd());
//       assertEquals(false, node0.isTypeOf());
//       assertEquals(false, node0.isFor());
//       assertEquals(false, node0.isDo());
//       assertEquals(false, node0.hasOneChild());
//       assertEquals(false, node0.isDefaultCase());
//       assertEquals(false, node0.isNull());
//       assertEquals(false, node0.isSetterDef());
//       assertEquals(true, node0.mayMutateGlobalStateOrThrow());
//       assertEquals(false, node0.isDebugger());
//       assertEquals(false, node0.isGetterDef());
//       assertEquals(-1, node0.getSourcePosition());
//       assertEquals(false, node0.isParamList());
//       assertEquals(false, node0.isWith());
//       assertEquals(false, node0.isFalse());
//       assertEquals(false, node0.isQuotedString());
//       assertEquals(-1, node0.getLineno());
//       assertEquals(false, node0.isOnlyModifiesThisCall());
//       assertEquals(false, node0.isRegExp());
//       assertEquals(false, node0.isEmpty());
//       assertEquals(false, node0.isGetElem());
//       assertEquals(false, node0.isIf());
//       assertEquals(false, node0.isReturn());
//       assertEquals(false, node0.isCatch());
//       assertEquals(false, node0.isLocalResultCall());
//       assertEquals(false, node0.isVar());
//       assertEquals(false, node0.isStringKey());
//       assertEquals("[testcode]", node0.getSourceFileName());
//       assertEquals(-1, node0.getCharno());
//       assertEquals(false, node0.isIn());
//       assertEquals(false, node0.isNoSideEffectsCall());
//       assertEquals(true, node0.mayMutateArguments());
//       assertEquals(false, node0.isLabel());
//       assertEquals(false, node0.isNE());
//       assertEquals(false, node0.isAnd());
//       assertEquals(false, node0.isContinue());
//       assertEquals(false, node0.isSyntheticBlock());
//       assertEquals(true, node0.isScript());
//       assertEquals(false, node0.isNot());
//       assertEquals(0, node0.getChildCount());
//       assertEquals(false, node0.isInstanceOf());
//       assertEquals(false, node0.isCase());
//       assertEquals(false, node0.isHook());
//       assertEquals(false, node0.isThis());
//       assertEquals(false, node0.isInc());
//       assertEquals(false, node0.isWhile());
//       assertEquals(0, node0.getChangeTime());
//       assertEquals(false, node0.isString());
//       assertEquals(false, node0.wasEmptyNode());
//       assertEquals(false, node0.hasMoreThanOneChild());
//       assertEquals(0, node0.getSideEffectFlags());
//       assertEquals(false, node0.isAssign());
//       assertEquals(false, node0.isNew());
//       assertEquals(false, node0.isTry());
//       assertEquals(false, functionType0.isInterface());
//       assertEquals(false, functionType0.isReturnTypeInferred());
//       assertEquals(false, functionType0.isTemplatizedType());
//       assertEquals(false, functionType0.isCheckedUnknownType());
//       assertEquals(false, functionType0.isEnumElementType());
//       assertEquals(false, functionType0.isNullType());
//       assertEquals(true, functionType0.isFunctionType());
//       assertEquals(false, functionType0.isNoType());
//       assertEquals(false, functionType0.isOrdinaryFunction());
//       assertEquals(false, functionType0.isRecordType());
//       assertEquals(false, functionType0.isFunctionPrototypeType());
//       assertEquals(true, functionType0.isConstructor());
//       assertEquals(true, functionType0.hasCachedValues());
//       assertEquals(true, functionType0.canBeCalled());
//       assertEquals(false, functionType0.isTemplateType());
//       assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
//       assertEquals(false, functionType0.isAllType());
//       assertEquals(false, functionType0.isEnumType());
//       assertEquals(false, functionType0.isStringValueType());
//       assertEquals(2147483647, functionType0.getMaxArguments());
//       assertEquals(false, functionType0.isVoidType());
//       assertEquals(0, functionType0.getExtendedInterfacesCount());
//       assertEquals(false, functionType0.isNoObjectType());
//       assertEquals(false, functionType0.isUnionType());
//       assertEquals(false, functionType0.isNumberValueType());
//       assertEquals(true, functionType0.isNominalConstructor());
//       assertEquals(true, functionType0.hasInstanceType());
//       assertEquals(false, functionType0.isBooleanValueType());
//       assertEquals(false, functionType0.isNoResolvedType());
//       assertEquals(false, functionType0.isResolved());
//       assertEquals(false, functionType0.isNominalType());
//       assertEquals(false, functionType1.isCheckedUnknownType());
//       assertEquals(true, functionType1.canBeCalled());
//       assertEquals(BooleanLiteralSet.TRUE, functionType1.getPossibleToBooleanOutcomes());
//       assertEquals(false, functionType1.isNoObjectType());
//       assertEquals(false, functionType1.isInterface());
//       assertEquals(false, functionType1.isNoResolvedType());
//       assertEquals(false, functionType1.isOrdinaryFunction());
//       assertEquals(false, functionType1.isNoType());
//       assertEquals(true, functionType1.hasInstanceType());
//       assertEquals(0, functionType1.getExtendedInterfacesCount());
//       assertEquals(false, functionType1.isResolved());
//       assertEquals(true, functionType1.isConstructor());
//       assertEquals(false, functionType1.isNumberValueType());
//       assertEquals(true, functionType1.isNominalConstructor());
//       assertEquals(true, functionType1.hasCachedValues());
//       assertEquals(false, functionType1.isStringValueType());
//       assertEquals(false, functionType1.isBooleanValueType());
//       assertEquals(false, functionType1.isRecordType());
//       assertEquals(false, functionType1.isVoidType());
//       assertEquals(false, functionType1.isAllType());
//       assertEquals(false, functionType1.isNullType());
//       assertEquals(false, functionType1.isFunctionPrototypeType());
//       assertEquals(false, functionType1.isTemplatizedType());
//       assertEquals(false, functionType1.isNominalType());
//       assertEquals(2147483647, functionType1.getMaxArguments());
//       assertEquals(false, functionType1.isTemplateType());
//       assertEquals(false, functionType1.isEnumElementType());
//       assertEquals(false, functionType1.isEnumType());
//       assertEquals(true, functionType1.isFunctionType());
//       assertEquals(false, functionType1.isUnionType());
//       assertEquals(false, functionType1.isReturnTypeInferred());
//       assertEquals(0.0, compiler0.getProgress(), 0.01D);
//       assertEquals(true, compiler0.hasErrors());
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
//       assertEquals(1, compiler0.getWarningCount());
//       assertEquals(false, compiler0.isTypeCheckingEnabled());
//       assertEquals(false, compiler0.isIdeMode());
//       assertEquals(false, compiler0.acceptConstKeyword());
//       assertEquals(1, compiler0.getErrorCount());
//       assertEquals(0, nodeTraversal0.getLineNumber());
//       assertEquals("", nodeTraversal0.getSourceName());
//   }

  @Test
  public void test25()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      assertNotNull(compiler0);
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      
      String string0 = "&";
      Node node0 = compiler0.parseTestCode(string0);
      assertNotNull(node0);
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(true, compiler0.hasErrors());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(1, compiler0.getErrorCount());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(true, node0.mayMutateArguments());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isStringKey());
      assertEquals(false, node0.isSetterDef());
      assertEquals(132, node0.getType());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isOnlyModifiesArgumentsCall());
      assertEquals(false, node0.hasOneChild());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isArrayLit());
      assertEquals(true, node0.mayMutateGlobalStateOrThrow());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(true, node0.isScript());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isCast());
      assertEquals(false, node0.isIf());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isDebugger());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isParamList());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isAnd());
      assertEquals("[testcode]", node0.getSourceFileName());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isString());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isCase());
      assertEquals(0, node0.getChangeTime());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isObjectLit());
      
      TypeValidator typeValidator0 = new TypeValidator(compiler0);
      assertNotNull(typeValidator0);
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(true, compiler0.hasErrors());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(1, compiler0.getErrorCount());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      
      InferJSDocInfo inferJSDocInfo0 = new InferJSDocInfo(compiler0);
      assertNotNull(inferJSDocInfo0);
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(true, compiler0.hasErrors());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(1, compiler0.getErrorCount());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      
      NodeTraversal nodeTraversal0 = new NodeTraversal((AbstractCompiler) compiler0, (NodeTraversal.Callback) inferJSDocInfo0);
      assertNotNull(nodeTraversal0);
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(true, compiler0.hasErrors());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(1, compiler0.getErrorCount());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals("", nodeTraversal0.getSourceName());
      assertEquals(0, nodeTraversal0.getLineNumber());
      
      JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
      assertNotNull(jSTypeRegistry0);
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(true, compiler0.hasErrors());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(1, compiler0.getErrorCount());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      Scope scope0 = Scope.createGlobalScope(node0);
      assertNotNull(scope0);
      assertEquals(true, scope0.isGlobal());
      assertEquals(0, scope0.getVarCount());
      assertEquals(false, scope0.isLocal());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(true, compiler0.hasErrors());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(1, compiler0.getErrorCount());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(true, node0.mayMutateArguments());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isStringKey());
      assertEquals(false, node0.isSetterDef());
      assertEquals(132, node0.getType());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isOnlyModifiesArgumentsCall());
      assertEquals(false, node0.hasOneChild());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isArrayLit());
      assertEquals(true, node0.mayMutateGlobalStateOrThrow());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(true, node0.isScript());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isCast());
      assertEquals(false, node0.isIf());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isDebugger());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isParamList());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isAnd());
      assertEquals("[testcode]", node0.getSourceFileName());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isString());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isCase());
      assertEquals(0, node0.getChangeTime());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isObjectLit());
      
      int int0 = (-1544);
      JSType jSType0 = jSTypeRegistry0.getType((StaticScope<JSType>) scope0, string0, string0, int0, int0);
      assertNotNull(jSType0);
      assertEquals(false, jSType0.isNoObjectType());
      assertEquals(false, jSType0.isFunctionPrototypeType());
      assertEquals(false, jSType0.isCheckedUnknownType());
      assertEquals(false, jSType0.isUnionType());
      assertEquals(false, jSType0.isConstructor());
      assertEquals(false, jSType0.isAllType());
      assertEquals(false, jSType0.isTemplatizedType());
      assertEquals(false, jSType0.isStringValueType());
      assertEquals(false, jSType0.isInterface());
      assertEquals(false, jSType0.isOrdinaryFunction());
      assertEquals(false, jSType0.isNoType());
      assertEquals(false, jSType0.isResolved());
      assertEquals(false, jSType0.isEnumElementType());
      assertEquals(false, jSType0.isTemplateType());
      assertEquals(false, jSType0.isNominalConstructor());
      assertEquals(true, jSType0.isNominalType());
      assertEquals(false, jSType0.isEnumType());
      assertEquals(false, jSType0.isVoidType());
      assertEquals(false, jSType0.isNoResolvedType());
      assertEquals(false, jSType0.isBooleanValueType());
      assertEquals(false, jSType0.isNullType());
      assertEquals(false, jSType0.isRecordType());
      assertEquals(false, jSType0.isNumberValueType());
      assertEquals(false, jSType0.isFunctionType());
      assertEquals(true, scope0.isGlobal());
      assertEquals(0, scope0.getVarCount());
      assertEquals(false, scope0.isLocal());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(true, compiler0.hasErrors());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(1, compiler0.getErrorCount());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(true, node0.mayMutateArguments());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isStringKey());
      assertEquals(false, node0.isSetterDef());
      assertEquals(132, node0.getType());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isOnlyModifiesArgumentsCall());
      assertEquals(false, node0.hasOneChild());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isArrayLit());
      assertEquals(true, node0.mayMutateGlobalStateOrThrow());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(true, node0.isScript());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isCast());
      assertEquals(false, node0.isIf());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isDebugger());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isParamList());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isAnd());
      assertEquals("[testcode]", node0.getSourceFileName());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isString());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isCase());
      assertEquals(0, node0.getChangeTime());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isObjectLit());
      
      typeValidator0.expectString(nodeTraversal0, node0, jSType0, string0);
      assertEquals(false, jSType0.isNoObjectType());
      assertEquals(false, jSType0.isFunctionPrototypeType());
      assertEquals(false, jSType0.isCheckedUnknownType());
      assertEquals(false, jSType0.isUnionType());
      assertEquals(false, jSType0.isConstructor());
      assertEquals(false, jSType0.isAllType());
      assertEquals(false, jSType0.isTemplatizedType());
      assertEquals(false, jSType0.isStringValueType());
      assertEquals(false, jSType0.isInterface());
      assertEquals(false, jSType0.isOrdinaryFunction());
      assertEquals(false, jSType0.isNoType());
      assertEquals(false, jSType0.isResolved());
      assertEquals(false, jSType0.isEnumElementType());
      assertEquals(false, jSType0.isTemplateType());
      assertEquals(false, jSType0.isNominalConstructor());
      assertEquals(true, jSType0.isNominalType());
      assertEquals(false, jSType0.isEnumType());
      assertEquals(false, jSType0.isVoidType());
      assertEquals(false, jSType0.isNoResolvedType());
      assertEquals(false, jSType0.isBooleanValueType());
      assertEquals(false, jSType0.isNullType());
      assertEquals(false, jSType0.isRecordType());
      assertEquals(false, jSType0.isNumberValueType());
      assertEquals(false, jSType0.isFunctionType());
      assertEquals(true, scope0.isGlobal());
      assertEquals(0, scope0.getVarCount());
      assertEquals(false, scope0.isLocal());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(true, compiler0.hasErrors());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(1, compiler0.getErrorCount());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals("", nodeTraversal0.getSourceName());
      assertEquals(0, nodeTraversal0.getLineNumber());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(true, node0.mayMutateArguments());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isStringKey());
      assertEquals(false, node0.isSetterDef());
      assertEquals(132, node0.getType());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isOnlyModifiesArgumentsCall());
      assertEquals(false, node0.hasOneChild());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isArrayLit());
      assertEquals(true, node0.mayMutateGlobalStateOrThrow());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(true, node0.isScript());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isCast());
      assertEquals(false, node0.isIf());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isDebugger());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isParamList());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isAnd());
      assertEquals("[testcode]", node0.getSourceFileName());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isString());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isCase());
      assertEquals(0, node0.getChangeTime());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isObjectLit());
  }

  @Test
  public void test26() {}
//   @Test
//   public void test26()  throws Throwable  {
//       Compiler compiler0 = new Compiler();
//       assertNotNull(compiler0);
//       assertEquals(0.0, compiler0.getProgress(), 0.01D);
//       
//       String string0 = "!";
//       Node node0 = compiler0.parseTestCode(string0);
//       assertNotNull(node0);
//       assertEquals(false, node0.isNE());
//       assertEquals(false, node0.isNull());
//       assertEquals(false, node0.isOnlyModifiesThisCall());
//       assertEquals(false, node0.isBreak());
//       assertEquals(false, node0.isRegExp());
//       assertEquals(false, node0.isLocalResultCall());
//       assertEquals(false, node0.isDec());
//       assertEquals(false, node0.isVoid());
//       assertEquals(false, node0.isGetterDef());
//       assertEquals(false, node0.isAnd());
//       assertEquals(false, node0.isAdd());
//       assertEquals(false, node0.isInstanceOf());
//       assertEquals(-1, node0.getCharno());
//       assertEquals(132, node0.getType());
//       assertEquals(false, node0.isAssignAdd());
//       assertEquals(false, node0.isIn());
//       assertEquals(false, node0.isGetProp());
//       assertEquals(false, node0.isNew());
//       assertEquals(false, node0.isWith());
//       assertEquals(0, node0.getLength());
//       assertEquals(false, node0.hasMoreThanOneChild());
//       assertEquals(false, node0.isCast());
//       assertEquals(false, node0.isIf());
//       assertEquals(false, node0.hasOneChild());
//       assertEquals(false, node0.isDefaultCase());
//       assertEquals(false, node0.isVarArgs());
//       assertEquals(false, node0.isNumber());
//       assertEquals(0, node0.getSideEffectFlags());
//       assertEquals(false, node0.isInc());
//       assertEquals(false, node0.isFunction());
//       assertEquals("[testcode]", node0.getSourceFileName());
//       assertEquals(false, node0.isNoSideEffectsCall());
//       assertEquals(false, node0.isCase());
//       assertEquals(false, node0.isString());
//       assertEquals(false, node0.isQuotedString());
//       assertEquals(false, node0.isEmpty());
//       assertEquals(false, node0.isDebugger());
//       assertEquals(false, node0.isSyntheticBlock());
//       assertEquals(false, node0.isSetterDef());
//       assertEquals(true, node0.isScript());
//       assertEquals(false, node0.isNot());
//       assertEquals(true, node0.mayMutateGlobalStateOrThrow());
//       assertEquals(false, node0.isTypeOf());
//       assertEquals(false, node0.isOr());
//       assertEquals(false, node0.isReturn());
//       assertEquals(false, node0.wasEmptyNode());
//       assertEquals(false, node0.isFromExterns());
//       assertEquals(false, node0.isParamList());
//       assertEquals(false, node0.isTrue());
//       assertEquals(false, node0.isObjectLit());
//       assertEquals(false, node0.isVar());
//       assertEquals(false, node0.isArrayLit());
//       assertEquals(false, node0.isThis());
//       assertEquals(false, node0.isName());
//       assertEquals(false, node0.isLabel());
//       assertEquals(0, node0.getChildCount());
//       assertEquals(-1, node0.getSourcePosition());
//       assertEquals(false, node0.isStringKey());
//       assertEquals(false, node0.isLabelName());
//       assertEquals(false, node0.isFor());
//       assertEquals(false, node0.isComma());
//       assertEquals(false, node0.isDelProp());
//       assertEquals(false, node0.isCatch());
//       assertEquals(false, node0.isCall());
//       assertEquals(false, node0.hasChildren());
//       assertEquals(false, node0.isSwitch());
//       assertEquals(false, node0.isThrow());
//       assertEquals(false, node0.isHook());
//       assertEquals(false, node0.isAssign());
//       assertEquals(false, node0.isContinue());
//       assertEquals(false, node0.isWhile());
//       assertEquals(false, node0.isDo());
//       assertEquals(false, node0.isFalse());
//       assertEquals(false, node0.isGetElem());
//       assertEquals(false, node0.isTry());
//       assertEquals(false, node0.isBlock());
//       assertEquals(false, node0.isExprResult());
//       assertEquals(false, node0.isOnlyModifiesArgumentsCall());
//       assertEquals(0, node0.getChangeTime());
//       assertEquals(-1, node0.getLineno());
//       assertEquals(true, node0.mayMutateArguments());
//       assertEquals(false, node0.isOptionalArg());
//       assertEquals(0, compiler0.getWarningCount());
//       assertEquals(false, compiler0.acceptConstKeyword());
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
//       assertEquals(1, compiler0.getErrorCount());
//       assertEquals(0.0, compiler0.getProgress(), 0.01D);
//       assertEquals(true, compiler0.hasErrors());
//       assertEquals(false, compiler0.isTypeCheckingEnabled());
//       assertEquals(false, compiler0.isIdeMode());
//       
//       TypeValidator typeValidator0 = new TypeValidator(compiler0);
//       assertNotNull(typeValidator0);
//       assertEquals(0, compiler0.getWarningCount());
//       assertEquals(false, compiler0.acceptConstKeyword());
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
//       assertEquals(1, compiler0.getErrorCount());
//       assertEquals(0.0, compiler0.getProgress(), 0.01D);
//       assertEquals(true, compiler0.hasErrors());
//       assertEquals(false, compiler0.isTypeCheckingEnabled());
//       assertEquals(false, compiler0.isIdeMode());
//       
//       CheckLevel checkLevel0 = CheckLevel.ERROR;
//       CheckUnreachableCode checkUnreachableCode0 = new CheckUnreachableCode(compiler0, checkLevel0);
//       assertNotNull(checkUnreachableCode0);
//       assertEquals(0, compiler0.getWarningCount());
//       assertEquals(false, compiler0.acceptConstKeyword());
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
//       assertEquals(1, compiler0.getErrorCount());
//       assertEquals(0.0, compiler0.getProgress(), 0.01D);
//       assertEquals(true, compiler0.hasErrors());
//       assertEquals(false, compiler0.isTypeCheckingEnabled());
//       assertEquals(false, compiler0.isIdeMode());
//       
//       NodeTraversal nodeTraversal0 = new NodeTraversal((AbstractCompiler) compiler0, (NodeTraversal.Callback) checkUnreachableCode0);
//       assertNotNull(nodeTraversal0);
//       assertEquals("", nodeTraversal0.getSourceName());
//       assertEquals(0, nodeTraversal0.getLineNumber());
//       assertEquals(0, compiler0.getWarningCount());
//       assertEquals(false, compiler0.acceptConstKeyword());
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
//       assertEquals(1, compiler0.getErrorCount());
//       assertEquals(0.0, compiler0.getProgress(), 0.01D);
//       assertEquals(true, compiler0.hasErrors());
//       assertEquals(false, compiler0.isTypeCheckingEnabled());
//       assertEquals(false, compiler0.isIdeMode());
//       
//       TightenTypes tightenTypes0 = new TightenTypes(compiler0);
//       assertNotNull(tightenTypes0);
//       assertEquals(0, compiler0.getWarningCount());
//       assertEquals(false, compiler0.acceptConstKeyword());
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
//       assertEquals(1, compiler0.getErrorCount());
//       assertEquals(0.0, compiler0.getProgress(), 0.01D);
//       assertEquals(true, compiler0.hasErrors());
//       assertEquals(false, compiler0.isTypeCheckingEnabled());
//       assertEquals(false, compiler0.isIdeMode());
//       
//       JSTypeRegistry jSTypeRegistry0 = tightenTypes0.getTypeRegistry();
//       assertNotNull(jSTypeRegistry0);
//       assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
//       assertEquals(0, compiler0.getWarningCount());
//       assertEquals(false, compiler0.acceptConstKeyword());
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
//       assertEquals(1, compiler0.getErrorCount());
//       assertEquals(0.0, compiler0.getProgress(), 0.01D);
//       assertEquals(true, compiler0.hasErrors());
//       assertEquals(false, compiler0.isTypeCheckingEnabled());
//       assertEquals(false, compiler0.isIdeMode());
//       
//       JSTypeNative jSTypeNative0 = JSTypeNative.FUNCTION_INSTANCE_TYPE;
//       JSType jSType0 = jSTypeRegistry0.getNativeType(jSTypeNative0);
//       assertNotNull(jSType0);
//       assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
//       assertEquals(false, jSType0.isRecordType());
//       assertEquals(false, jSType0.isUnionType());
//       assertEquals(true, jSType0.isFunctionType());
//       assertEquals(false, jSType0.isVoidType());
//       assertEquals(false, jSType0.isNumberValueType());
//       assertEquals(true, jSType0.isConstructor());
//       assertEquals(false, jSType0.isNoObjectType());
//       assertEquals(false, jSType0.isResolved());
//       assertEquals(false, jSType0.isStringValueType());
//       assertEquals(false, jSType0.isNullType());
//       assertEquals(false, jSType0.isTemplatizedType());
//       assertEquals(false, jSType0.isNominalType());
//       assertEquals(false, jSType0.isCheckedUnknownType());
//       assertEquals(true, jSType0.isNominalConstructor());
//       assertEquals(false, jSType0.isAllType());
//       assertEquals(false, jSType0.isEnumType());
//       assertEquals(false, jSType0.isOrdinaryFunction());
//       assertEquals(false, jSType0.isFunctionPrototypeType());
//       assertEquals(false, jSType0.isInterface());
//       assertEquals(false, jSType0.isTemplateType());
//       assertEquals(false, jSType0.isNoType());
//       assertEquals(false, jSType0.isBooleanValueType());
//       assertEquals(false, jSType0.isEnumElementType());
//       assertEquals(false, jSType0.isNoResolvedType());
//       assertEquals(0, compiler0.getWarningCount());
//       assertEquals(false, compiler0.acceptConstKeyword());
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
//       assertEquals(1, compiler0.getErrorCount());
//       assertEquals(0.0, compiler0.getProgress(), 0.01D);
//       assertEquals(true, compiler0.hasErrors());
//       assertEquals(false, compiler0.isTypeCheckingEnabled());
//       assertEquals(false, compiler0.isIdeMode());
//       
//       FunctionType functionType0 = JSType.toMaybeFunctionType(jSType0);
//       assertNotNull(functionType0);
//       assertEquals(false, functionType0.isTemplateType());
//       assertEquals(false, functionType0.isNominalType());
//       assertEquals(true, functionType0.isNominalConstructor());
//       assertEquals(false, functionType0.isNoResolvedType());
//       assertEquals(false, functionType0.isEnumType());
//       assertEquals(false, functionType0.isOrdinaryFunction());
//       assertEquals(false, functionType0.isCheckedUnknownType());
//       assertEquals(false, functionType0.isVoidType());
//       assertEquals(false, functionType0.isAllType());
//       assertEquals(false, functionType0.isStringValueType());
//       assertEquals(false, functionType0.isInterface());
//       assertEquals(false, functionType0.isReturnTypeInferred());
//       assertEquals(false, functionType0.hasCachedValues());
//       assertEquals(true, functionType0.isConstructor());
//       assertEquals(false, functionType0.isNumberValueType());
//       assertEquals(true, functionType0.hasInstanceType());
//       assertEquals(false, functionType0.isNoType());
//       assertEquals(true, functionType0.canBeCalled());
//       assertEquals(false, functionType0.isFunctionPrototypeType());
//       assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
//       assertEquals(false, functionType0.isNullType());
//       assertEquals(false, functionType0.isRecordType());
//       assertEquals(0, functionType0.getExtendedInterfacesCount());
//       assertEquals(2147483647, functionType0.getMaxArguments());
//       assertEquals(false, functionType0.isNoObjectType());
//       assertEquals(false, functionType0.isResolved());
//       assertEquals(true, functionType0.isFunctionType());
//       assertEquals(false, functionType0.isUnionType());
//       assertEquals(false, functionType0.isTemplatizedType());
//       assertEquals(false, functionType0.isBooleanValueType());
//       assertEquals(false, functionType0.isEnumElementType());
//       assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
//       assertEquals(false, jSType0.isRecordType());
//       assertEquals(false, jSType0.isUnionType());
//       assertEquals(true, jSType0.isFunctionType());
//       assertEquals(false, jSType0.isVoidType());
//       assertEquals(false, jSType0.isNumberValueType());
//       assertEquals(true, jSType0.isConstructor());
//       assertEquals(false, jSType0.isNoObjectType());
//       assertEquals(false, jSType0.isResolved());
//       assertEquals(false, jSType0.isStringValueType());
//       assertEquals(false, jSType0.isNullType());
//       assertEquals(false, jSType0.isTemplatizedType());
//       assertEquals(false, jSType0.isNominalType());
//       assertEquals(false, jSType0.isCheckedUnknownType());
//       assertEquals(true, jSType0.isNominalConstructor());
//       assertEquals(false, jSType0.isAllType());
//       assertEquals(false, jSType0.isEnumType());
//       assertEquals(false, jSType0.isOrdinaryFunction());
//       assertEquals(false, jSType0.isFunctionPrototypeType());
//       assertEquals(false, jSType0.isInterface());
//       assertEquals(false, jSType0.isTemplateType());
//       assertEquals(false, jSType0.isNoType());
//       assertEquals(false, jSType0.isBooleanValueType());
//       assertEquals(false, jSType0.isEnumElementType());
//       assertEquals(false, jSType0.isNoResolvedType());
//       assertEquals(0, compiler0.getWarningCount());
//       assertEquals(false, compiler0.acceptConstKeyword());
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
//       assertEquals(1, compiler0.getErrorCount());
//       assertEquals(0.0, compiler0.getProgress(), 0.01D);
//       assertEquals(true, compiler0.hasErrors());
//       assertEquals(false, compiler0.isTypeCheckingEnabled());
//       assertEquals(false, compiler0.isIdeMode());
//       
//       typeValidator0.expectAnyObject(nodeTraversal0, node0, functionType0, string0);
//       assertEquals(false, functionType0.isTemplateType());
//       assertEquals(false, functionType0.isNominalType());
//       assertEquals(true, functionType0.isNominalConstructor());
//       assertEquals(false, functionType0.isNoResolvedType());
//       assertEquals(false, functionType0.isEnumType());
//       assertEquals(false, functionType0.isOrdinaryFunction());
//       assertEquals(false, functionType0.isCheckedUnknownType());
//       assertEquals(false, functionType0.isVoidType());
//       assertEquals(false, functionType0.isAllType());
//       assertEquals(false, functionType0.isStringValueType());
//       assertEquals(false, functionType0.isInterface());
//       assertEquals(false, functionType0.isReturnTypeInferred());
//       assertEquals(true, functionType0.isConstructor());
//       assertEquals(false, functionType0.isNumberValueType());
//       assertEquals(true, functionType0.hasInstanceType());
//       assertEquals(false, functionType0.isNoType());
//       assertEquals(true, functionType0.canBeCalled());
//       assertEquals(false, functionType0.isFunctionPrototypeType());
//       assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
//       assertEquals(false, functionType0.isNullType());
//       assertEquals(false, functionType0.isRecordType());
//       assertEquals(true, functionType0.hasCachedValues());
//       assertEquals(0, functionType0.getExtendedInterfacesCount());
//       assertEquals(2147483647, functionType0.getMaxArguments());
//       assertEquals(false, functionType0.isNoObjectType());
//       assertEquals(false, functionType0.isResolved());
//       assertEquals(true, functionType0.isFunctionType());
//       assertEquals(false, functionType0.isUnionType());
//       assertEquals(false, functionType0.isTemplatizedType());
//       assertEquals(false, functionType0.isBooleanValueType());
//       assertEquals(false, functionType0.isEnumElementType());
//       assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
//       assertEquals(false, node0.isNE());
//       assertEquals(false, node0.isNull());
//       assertEquals(false, node0.isOnlyModifiesThisCall());
//       assertEquals(false, node0.isBreak());
//       assertEquals(false, node0.isRegExp());
//       assertEquals(false, node0.isLocalResultCall());
//       assertEquals(false, node0.isDec());
//       assertEquals(false, node0.isVoid());
//       assertEquals(false, node0.isGetterDef());
//       assertEquals(false, node0.isAnd());
//       assertEquals(false, node0.isAdd());
//       assertEquals(false, node0.isInstanceOf());
//       assertEquals(-1, node0.getCharno());
//       assertEquals(132, node0.getType());
//       assertEquals(false, node0.isAssignAdd());
//       assertEquals(false, node0.isIn());
//       assertEquals(false, node0.isGetProp());
//       assertEquals(false, node0.isNew());
//       assertEquals(false, node0.isWith());
//       assertEquals(0, node0.getLength());
//       assertEquals(false, node0.hasMoreThanOneChild());
//       assertEquals(false, node0.isCast());
//       assertEquals(false, node0.isIf());
//       assertEquals(false, node0.hasOneChild());
//       assertEquals(false, node0.isDefaultCase());
//       assertEquals(false, node0.isVarArgs());
//       assertEquals(false, node0.isNumber());
//       assertEquals(0, node0.getSideEffectFlags());
//       assertEquals(false, node0.isInc());
//       assertEquals(false, node0.isFunction());
//       assertEquals("[testcode]", node0.getSourceFileName());
//       assertEquals(false, node0.isNoSideEffectsCall());
//       assertEquals(false, node0.isCase());
//       assertEquals(false, node0.isString());
//       assertEquals(false, node0.isQuotedString());
//       assertEquals(false, node0.isEmpty());
//       assertEquals(false, node0.isDebugger());
//       assertEquals(false, node0.isSyntheticBlock());
//       assertEquals(false, node0.isSetterDef());
//       assertEquals(true, node0.isScript());
//       assertEquals(false, node0.isNot());
//       assertEquals(true, node0.mayMutateGlobalStateOrThrow());
//       assertEquals(false, node0.isTypeOf());
//       assertEquals(false, node0.isOr());
//       assertEquals(false, node0.isReturn());
//       assertEquals(false, node0.wasEmptyNode());
//       assertEquals(false, node0.isFromExterns());
//       assertEquals(false, node0.isParamList());
//       assertEquals(false, node0.isTrue());
//       assertEquals(false, node0.isObjectLit());
//       assertEquals(false, node0.isVar());
//       assertEquals(false, node0.isArrayLit());
//       assertEquals(false, node0.isThis());
//       assertEquals(false, node0.isName());
//       assertEquals(false, node0.isLabel());
//       assertEquals(0, node0.getChildCount());
//       assertEquals(-1, node0.getSourcePosition());
//       assertEquals(false, node0.isStringKey());
//       assertEquals(false, node0.isLabelName());
//       assertEquals(false, node0.isFor());
//       assertEquals(false, node0.isComma());
//       assertEquals(false, node0.isDelProp());
//       assertEquals(false, node0.isCatch());
//       assertEquals(false, node0.isCall());
//       assertEquals(false, node0.hasChildren());
//       assertEquals(false, node0.isSwitch());
//       assertEquals(false, node0.isThrow());
//       assertEquals(false, node0.isHook());
//       assertEquals(false, node0.isAssign());
//       assertEquals(false, node0.isContinue());
//       assertEquals(false, node0.isWhile());
//       assertEquals(false, node0.isDo());
//       assertEquals(false, node0.isFalse());
//       assertEquals(false, node0.isGetElem());
//       assertEquals(false, node0.isTry());
//       assertEquals(false, node0.isBlock());
//       assertEquals(false, node0.isExprResult());
//       assertEquals(false, node0.isOnlyModifiesArgumentsCall());
//       assertEquals(0, node0.getChangeTime());
//       assertEquals(-1, node0.getLineno());
//       assertEquals(true, node0.mayMutateArguments());
//       assertEquals(false, node0.isOptionalArg());
//       assertEquals(false, jSType0.isRecordType());
//       assertEquals(false, jSType0.isUnionType());
//       assertEquals(true, jSType0.isFunctionType());
//       assertEquals(false, jSType0.isVoidType());
//       assertEquals(false, jSType0.isNumberValueType());
//       assertEquals(true, jSType0.isConstructor());
//       assertEquals(false, jSType0.isNoObjectType());
//       assertEquals(false, jSType0.isResolved());
//       assertEquals(false, jSType0.isStringValueType());
//       assertEquals(false, jSType0.isNullType());
//       assertEquals(false, jSType0.isTemplatizedType());
//       assertEquals(false, jSType0.isNominalType());
//       assertEquals(false, jSType0.isCheckedUnknownType());
//       assertEquals(true, jSType0.isNominalConstructor());
//       assertEquals(false, jSType0.isAllType());
//       assertEquals(false, jSType0.isEnumType());
//       assertEquals(false, jSType0.isOrdinaryFunction());
//       assertEquals(false, jSType0.isFunctionPrototypeType());
//       assertEquals(false, jSType0.isInterface());
//       assertEquals(false, jSType0.isTemplateType());
//       assertEquals(false, jSType0.isNoType());
//       assertEquals(false, jSType0.isBooleanValueType());
//       assertEquals(false, jSType0.isEnumElementType());
//       assertEquals(false, jSType0.isNoResolvedType());
//       assertEquals("", nodeTraversal0.getSourceName());
//       assertEquals(0, nodeTraversal0.getLineNumber());
//       assertEquals(0, compiler0.getWarningCount());
//       assertEquals(false, compiler0.acceptConstKeyword());
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
//       assertEquals(1, compiler0.getErrorCount());
//       assertEquals(0.0, compiler0.getProgress(), 0.01D);
//       assertEquals(true, compiler0.hasErrors());
//       assertEquals(false, compiler0.isTypeCheckingEnabled());
//       assertEquals(false, compiler0.isIdeMode());
//   }

  @Test
  public void test27() {}
//   @Test
//   public void test27()  throws Throwable  {
//       Compiler compiler0 = new Compiler();
//       assertNotNull(compiler0);
//       assertEquals(0.0, compiler0.getProgress(), 0.01D);
//       
//       String string0 = "&";
//       Node node0 = compiler0.parseTestCode(string0);
//       assertNotNull(node0);
//       assertEquals(0, compiler0.getWarningCount());
//       assertEquals(true, compiler0.hasErrors());
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
//       assertEquals(false, compiler0.isIdeMode());
//       assertEquals(1, compiler0.getErrorCount());
//       assertEquals(false, compiler0.acceptConstKeyword());
//       assertEquals(false, compiler0.isTypeCheckingEnabled());
//       assertEquals(0.0, compiler0.getProgress(), 0.01D);
//       assertEquals(0, node0.getChildCount());
//       assertEquals(false, node0.isReturn());
//       assertEquals(false, node0.isNew());
//       assertEquals(false, node0.isDelProp());
//       assertEquals(false, node0.isVar());
//       assertEquals(-1, node0.getCharno());
//       assertEquals(false, node0.isBreak());
//       assertEquals(false, node0.isAdd());
//       assertEquals(132, node0.getType());
//       assertEquals(false, node0.isWith());
//       assertEquals(false, node0.isObjectLit());
//       assertEquals(false, node0.isExprResult());
//       assertEquals(false, node0.isThis());
//       assertEquals(false, node0.isTry());
//       assertEquals(false, node0.isGetProp());
//       assertEquals(false, node0.isDec());
//       assertEquals(false, node0.isFunction());
//       assertEquals(false, node0.isNoSideEffectsCall());
//       assertEquals(false, node0.isThrow());
//       assertEquals(false, node0.isSetterDef());
//       assertEquals(false, node0.isCatch());
//       assertEquals(false, node0.isCast());
//       assertEquals(false, node0.isSwitch());
//       assertEquals(false, node0.isGetElem());
//       assertEquals(false, node0.isTrue());
//       assertEquals(false, node0.isFalse());
//       assertEquals(-1, node0.getLineno());
//       assertEquals(false, node0.isLabel());
//       assertEquals(false, node0.hasChildren());
//       assertEquals(false, node0.isEmpty());
//       assertEquals(false, node0.isGetterDef());
//       assertEquals(false, node0.isIn());
//       assertEquals(false, node0.isStringKey());
//       assertEquals(false, node0.isDefaultCase());
//       assertEquals(false, node0.isComma());
//       assertEquals(false, node0.isInc());
//       assertEquals(false, node0.isQuotedString());
//       assertEquals(true, node0.isScript());
//       assertEquals(false, node0.isCase());
//       assertEquals(false, node0.isLabelName());
//       assertEquals(false, node0.isString());
//       assertEquals(false, node0.isVoid());
//       assertEquals(false, node0.isBlock());
//       assertEquals(true, node0.mayMutateGlobalStateOrThrow());
//       assertEquals(false, node0.hasOneChild());
//       assertEquals(0, node0.getLength());
//       assertEquals(false, node0.isWhile());
//       assertEquals(false, node0.isNE());
//       assertEquals(false, node0.isIf());
//       assertEquals(false, node0.hasMoreThanOneChild());
//       assertEquals(false, node0.isNull());
//       assertEquals(true, node0.mayMutateArguments());
//       assertEquals(false, node0.isAssignAdd());
//       assertEquals(false, node0.isInstanceOf());
//       assertEquals(false, node0.isRegExp());
//       assertEquals(-1, node0.getSourcePosition());
//       assertEquals(false, node0.isHook());
//       assertEquals(false, node0.isFor());
//       assertEquals(false, node0.isOnlyModifiesArgumentsCall());
//       assertEquals(false, node0.isDo());
//       assertEquals(false, node0.isVarArgs());
//       assertEquals(0, node0.getChangeTime());
//       assertEquals(false, node0.wasEmptyNode());
//       assertEquals(false, node0.isOnlyModifiesThisCall());
//       assertEquals(false, node0.isOr());
//       assertEquals(false, node0.isFromExterns());
//       assertEquals(false, node0.isAnd());
//       assertEquals(0, node0.getSideEffectFlags());
//       assertEquals("[testcode]", node0.getSourceFileName());
//       assertEquals(false, node0.isOptionalArg());
//       assertEquals(false, node0.isNumber());
//       assertEquals(false, node0.isAssign());
//       assertEquals(false, node0.isName());
//       assertEquals(false, node0.isLocalResultCall());
//       assertEquals(false, node0.isSyntheticBlock());
//       assertEquals(false, node0.isDebugger());
//       assertEquals(false, node0.isParamList());
//       assertEquals(false, node0.isContinue());
//       assertEquals(false, node0.isNot());
//       assertEquals(false, node0.isCall());
//       assertEquals(false, node0.isArrayLit());
//       assertEquals(false, node0.isTypeOf());
//       
//       TypeValidator typeValidator0 = new TypeValidator(compiler0);
//       assertNotNull(typeValidator0);
//       assertEquals(0, compiler0.getWarningCount());
//       assertEquals(true, compiler0.hasErrors());
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
//       assertEquals(false, compiler0.isIdeMode());
//       assertEquals(1, compiler0.getErrorCount());
//       assertEquals(false, compiler0.acceptConstKeyword());
//       assertEquals(false, compiler0.isTypeCheckingEnabled());
//       assertEquals(0.0, compiler0.getProgress(), 0.01D);
//       
//       CheckLevel checkLevel0 = CheckLevel.ERROR;
//       CheckUnreachableCode checkUnreachableCode0 = new CheckUnreachableCode(compiler0, checkLevel0);
//       assertNotNull(checkUnreachableCode0);
//       assertEquals(0, compiler0.getWarningCount());
//       assertEquals(true, compiler0.hasErrors());
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
//       assertEquals(false, compiler0.isIdeMode());
//       assertEquals(1, compiler0.getErrorCount());
//       assertEquals(false, compiler0.acceptConstKeyword());
//       assertEquals(false, compiler0.isTypeCheckingEnabled());
//       assertEquals(0.0, compiler0.getProgress(), 0.01D);
//       
//       NodeTraversal nodeTraversal0 = new NodeTraversal((AbstractCompiler) compiler0, (NodeTraversal.Callback) checkUnreachableCode0);
//       assertNotNull(nodeTraversal0);
//       assertEquals(0, compiler0.getWarningCount());
//       assertEquals(true, compiler0.hasErrors());
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
//       assertEquals(false, compiler0.isIdeMode());
//       assertEquals(1, compiler0.getErrorCount());
//       assertEquals(false, compiler0.acceptConstKeyword());
//       assertEquals(false, compiler0.isTypeCheckingEnabled());
//       assertEquals(0.0, compiler0.getProgress(), 0.01D);
//       assertEquals(0, nodeTraversal0.getLineNumber());
//       assertEquals("", nodeTraversal0.getSourceName());
//       
//       ErrorReporter errorReporter0 = null;
//       JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(errorReporter0);
//       assertNotNull(jSTypeRegistry0);
//       assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
//       
//       JSTypeNative jSTypeNative0 = JSTypeNative.FUNCTION_INSTANCE_TYPE;
//       JSType jSType0 = jSTypeRegistry0.getNativeType(jSTypeNative0);
//       assertNotNull(jSType0);
//       assertEquals(false, jSType0.isTemplatizedType());
//       assertEquals(true, jSType0.isNominalConstructor());
//       assertEquals(false, jSType0.isNominalType());
//       assertEquals(false, jSType0.isNoType());
//       assertEquals(true, jSType0.isFunctionType());
//       assertEquals(false, jSType0.isBooleanValueType());
//       assertEquals(false, jSType0.isNullType());
//       assertEquals(false, jSType0.isCheckedUnknownType());
//       assertEquals(false, jSType0.isNoResolvedType());
//       assertEquals(false, jSType0.isOrdinaryFunction());
//       assertEquals(false, jSType0.isResolved());
//       assertEquals(false, jSType0.isFunctionPrototypeType());
//       assertEquals(false, jSType0.isStringValueType());
//       assertEquals(false, jSType0.isUnionType());
//       assertEquals(false, jSType0.isRecordType());
//       assertEquals(false, jSType0.isNumberValueType());
//       assertEquals(false, jSType0.isAllType());
//       assertEquals(false, jSType0.isEnumType());
//       assertEquals(true, jSType0.isConstructor());
//       assertEquals(false, jSType0.isInterface());
//       assertEquals(false, jSType0.isVoidType());
//       assertEquals(false, jSType0.isNoObjectType());
//       assertEquals(false, jSType0.isEnumElementType());
//       assertEquals(false, jSType0.isTemplateType());
//       assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
//       
//       FunctionType functionType0 = JSType.toMaybeFunctionType(jSType0);
//       assertNotNull(functionType0);
//       assertEquals(false, functionType0.isNumberValueType());
//       assertEquals(false, functionType0.isVoidType());
//       assertEquals(false, functionType0.isReturnTypeInferred());
//       assertEquals(true, functionType0.isFunctionType());
//       assertEquals(false, functionType0.isNoResolvedType());
//       assertEquals(false, functionType0.isInterface());
//       assertEquals(0, functionType0.getExtendedInterfacesCount());
//       assertEquals(false, functionType0.isEnumType());
//       assertEquals(false, functionType0.isFunctionPrototypeType());
//       assertEquals(false, functionType0.isUnionType());
//       assertEquals(2147483647, functionType0.getMaxArguments());
//       assertEquals(true, functionType0.hasInstanceType());
//       assertEquals(false, functionType0.hasCachedValues());
//       assertEquals(true, functionType0.canBeCalled());
//       assertEquals(false, functionType0.isRecordType());
//       assertEquals(true, functionType0.isNominalConstructor());
//       assertEquals(false, functionType0.isResolved());
//       assertEquals(false, functionType0.isCheckedUnknownType());
//       assertEquals(false, functionType0.isOrdinaryFunction());
//       assertEquals(false, functionType0.isNoType());
//       assertEquals(false, functionType0.isBooleanValueType());
//       assertEquals(true, functionType0.isConstructor());
//       assertEquals(false, functionType0.isNoObjectType());
//       assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
//       assertEquals(false, functionType0.isEnumElementType());
//       assertEquals(false, functionType0.isTemplateType());
//       assertEquals(false, functionType0.isNominalType());
//       assertEquals(false, functionType0.isNullType());
//       assertEquals(false, functionType0.isAllType());
//       assertEquals(false, functionType0.isStringValueType());
//       assertEquals(false, functionType0.isTemplatizedType());
//       assertEquals(false, jSType0.isTemplatizedType());
//       assertEquals(true, jSType0.isNominalConstructor());
//       assertEquals(false, jSType0.isNominalType());
//       assertEquals(false, jSType0.isNoType());
//       assertEquals(true, jSType0.isFunctionType());
//       assertEquals(false, jSType0.isBooleanValueType());
//       assertEquals(false, jSType0.isNullType());
//       assertEquals(false, jSType0.isCheckedUnknownType());
//       assertEquals(false, jSType0.isNoResolvedType());
//       assertEquals(false, jSType0.isOrdinaryFunction());
//       assertEquals(false, jSType0.isResolved());
//       assertEquals(false, jSType0.isFunctionPrototypeType());
//       assertEquals(false, jSType0.isStringValueType());
//       assertEquals(false, jSType0.isUnionType());
//       assertEquals(false, jSType0.isRecordType());
//       assertEquals(false, jSType0.isNumberValueType());
//       assertEquals(false, jSType0.isAllType());
//       assertEquals(false, jSType0.isEnumType());
//       assertEquals(true, jSType0.isConstructor());
//       assertEquals(false, jSType0.isInterface());
//       assertEquals(false, jSType0.isVoidType());
//       assertEquals(false, jSType0.isNoObjectType());
//       assertEquals(false, jSType0.isEnumElementType());
//       assertEquals(false, jSType0.isTemplateType());
//       assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
//       
//       typeValidator0.expectActualObject(nodeTraversal0, node0, functionType0, string0);
//       assertEquals(0, compiler0.getWarningCount());
//       assertEquals(true, compiler0.hasErrors());
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
//       assertEquals(false, compiler0.isIdeMode());
//       assertEquals(1, compiler0.getErrorCount());
//       assertEquals(false, compiler0.acceptConstKeyword());
//       assertEquals(false, compiler0.isTypeCheckingEnabled());
//       assertEquals(0.0, compiler0.getProgress(), 0.01D);
//       assertEquals(0, nodeTraversal0.getLineNumber());
//       assertEquals("", nodeTraversal0.getSourceName());
//       assertEquals(false, functionType0.isNumberValueType());
//       assertEquals(false, functionType0.isVoidType());
//       assertEquals(false, functionType0.isReturnTypeInferred());
//       assertEquals(true, functionType0.isFunctionType());
//       assertEquals(false, functionType0.isNoResolvedType());
//       assertEquals(false, functionType0.isInterface());
//       assertEquals(0, functionType0.getExtendedInterfacesCount());
//       assertEquals(false, functionType0.isEnumType());
//       assertEquals(false, functionType0.isFunctionPrototypeType());
//       assertEquals(false, functionType0.isUnionType());
//       assertEquals(2147483647, functionType0.getMaxArguments());
//       assertEquals(true, functionType0.hasInstanceType());
//       assertEquals(false, functionType0.hasCachedValues());
//       assertEquals(true, functionType0.canBeCalled());
//       assertEquals(false, functionType0.isRecordType());
//       assertEquals(true, functionType0.isNominalConstructor());
//       assertEquals(false, functionType0.isResolved());
//       assertEquals(false, functionType0.isCheckedUnknownType());
//       assertEquals(false, functionType0.isOrdinaryFunction());
//       assertEquals(false, functionType0.isNoType());
//       assertEquals(false, functionType0.isBooleanValueType());
//       assertEquals(true, functionType0.isConstructor());
//       assertEquals(false, functionType0.isNoObjectType());
//       assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
//       assertEquals(false, functionType0.isEnumElementType());
//       assertEquals(false, functionType0.isTemplateType());
//       assertEquals(false, functionType0.isNominalType());
//       assertEquals(false, functionType0.isNullType());
//       assertEquals(false, functionType0.isAllType());
//       assertEquals(false, functionType0.isStringValueType());
//       assertEquals(false, functionType0.isTemplatizedType());
//       assertEquals(false, jSType0.isTemplatizedType());
//       assertEquals(true, jSType0.isNominalConstructor());
//       assertEquals(false, jSType0.isNominalType());
//       assertEquals(false, jSType0.isNoType());
//       assertEquals(true, jSType0.isFunctionType());
//       assertEquals(false, jSType0.isBooleanValueType());
//       assertEquals(false, jSType0.isNullType());
//       assertEquals(false, jSType0.isCheckedUnknownType());
//       assertEquals(false, jSType0.isNoResolvedType());
//       assertEquals(false, jSType0.isOrdinaryFunction());
//       assertEquals(false, jSType0.isResolved());
//       assertEquals(false, jSType0.isFunctionPrototypeType());
//       assertEquals(false, jSType0.isStringValueType());
//       assertEquals(false, jSType0.isUnionType());
//       assertEquals(false, jSType0.isRecordType());
//       assertEquals(false, jSType0.isNumberValueType());
//       assertEquals(false, jSType0.isAllType());
//       assertEquals(false, jSType0.isEnumType());
//       assertEquals(true, jSType0.isConstructor());
//       assertEquals(false, jSType0.isInterface());
//       assertEquals(false, jSType0.isVoidType());
//       assertEquals(false, jSType0.isNoObjectType());
//       assertEquals(false, jSType0.isEnumElementType());
//       assertEquals(false, jSType0.isTemplateType());
//       assertEquals(0, node0.getChildCount());
//       assertEquals(false, node0.isReturn());
//       assertEquals(false, node0.isNew());
//       assertEquals(false, node0.isDelProp());
//       assertEquals(false, node0.isVar());
//       assertEquals(-1, node0.getCharno());
//       assertEquals(false, node0.isBreak());
//       assertEquals(false, node0.isAdd());
//       assertEquals(132, node0.getType());
//       assertEquals(false, node0.isWith());
//       assertEquals(false, node0.isObjectLit());
//       assertEquals(false, node0.isExprResult());
//       assertEquals(false, node0.isThis());
//       assertEquals(false, node0.isTry());
//       assertEquals(false, node0.isGetProp());
//       assertEquals(false, node0.isDec());
//       assertEquals(false, node0.isFunction());
//       assertEquals(false, node0.isNoSideEffectsCall());
//       assertEquals(false, node0.isThrow());
//       assertEquals(false, node0.isSetterDef());
//       assertEquals(false, node0.isCatch());
//       assertEquals(false, node0.isCast());
//       assertEquals(false, node0.isSwitch());
//       assertEquals(false, node0.isGetElem());
//       assertEquals(false, node0.isTrue());
//       assertEquals(false, node0.isFalse());
//       assertEquals(-1, node0.getLineno());
//       assertEquals(false, node0.isLabel());
//       assertEquals(false, node0.hasChildren());
//       assertEquals(false, node0.isEmpty());
//       assertEquals(false, node0.isGetterDef());
//       assertEquals(false, node0.isIn());
//       assertEquals(false, node0.isStringKey());
//       assertEquals(false, node0.isDefaultCase());
//       assertEquals(false, node0.isComma());
//       assertEquals(false, node0.isInc());
//       assertEquals(false, node0.isQuotedString());
//       assertEquals(true, node0.isScript());
//       assertEquals(false, node0.isCase());
//       assertEquals(false, node0.isLabelName());
//       assertEquals(false, node0.isString());
//       assertEquals(false, node0.isVoid());
//       assertEquals(false, node0.isBlock());
//       assertEquals(true, node0.mayMutateGlobalStateOrThrow());
//       assertEquals(false, node0.hasOneChild());
//       assertEquals(0, node0.getLength());
//       assertEquals(false, node0.isWhile());
//       assertEquals(false, node0.isNE());
//       assertEquals(false, node0.isIf());
//       assertEquals(false, node0.hasMoreThanOneChild());
//       assertEquals(false, node0.isNull());
//       assertEquals(true, node0.mayMutateArguments());
//       assertEquals(false, node0.isAssignAdd());
//       assertEquals(false, node0.isInstanceOf());
//       assertEquals(false, node0.isRegExp());
//       assertEquals(-1, node0.getSourcePosition());
//       assertEquals(false, node0.isHook());
//       assertEquals(false, node0.isFor());
//       assertEquals(false, node0.isOnlyModifiesArgumentsCall());
//       assertEquals(false, node0.isDo());
//       assertEquals(false, node0.isVarArgs());
//       assertEquals(0, node0.getChangeTime());
//       assertEquals(false, node0.wasEmptyNode());
//       assertEquals(false, node0.isOnlyModifiesThisCall());
//       assertEquals(false, node0.isOr());
//       assertEquals(false, node0.isFromExterns());
//       assertEquals(false, node0.isAnd());
//       assertEquals(0, node0.getSideEffectFlags());
//       assertEquals("[testcode]", node0.getSourceFileName());
//       assertEquals(false, node0.isOptionalArg());
//       assertEquals(false, node0.isNumber());
//       assertEquals(false, node0.isAssign());
//       assertEquals(false, node0.isName());
//       assertEquals(false, node0.isLocalResultCall());
//       assertEquals(false, node0.isSyntheticBlock());
//       assertEquals(false, node0.isDebugger());
//       assertEquals(false, node0.isParamList());
//       assertEquals(false, node0.isContinue());
//       assertEquals(false, node0.isNot());
//       assertEquals(false, node0.isCall());
//       assertEquals(false, node0.isArrayLit());
//       assertEquals(false, node0.isTypeOf());
//       assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
//   }

  @Test
  public void test28()  throws Throwable  {
      JSType jSType0 = null;
      String string0 = "S>";
      int int0 = (-3830);
      Node node0 = Node.newString(string0, int0, int0);
      //  // Unstable assertion: assertNotNull(node0);
      //  // Unstable assertion: assertEquals(false, node0.isIf());
      //  // Unstable assertion: assertEquals(false, node0.isAssign());
      //  // Unstable assertion: assertEquals(false, node0.isEmpty());
      //  // Unstable assertion: assertEquals(false, node0.isWhile());
      //  // Unstable assertion: assertEquals(false, node0.isNoSideEffectsCall());
      //  // Unstable assertion: assertEquals(false, node0.isRegExp());
      //  // Unstable assertion: assertEquals(false, node0.isFalse());
      //  // Unstable assertion: assertEquals(-1, node0.getLineno());
      //  // Unstable assertion: assertEquals(false, node0.isParamList());
      //  // Unstable assertion: assertEquals(false, node0.isWith());
      //  // Unstable assertion: assertEquals(false, node0.isScript());
      //  // Unstable assertion: assertEquals(false, node0.isObjectLit());
      //  // Unstable assertion: assertEquals(false, node0.isCatch());
      //  // Unstable assertion: assertEquals(0, node0.getChildCount());
      //  // Unstable assertion: assertEquals(false, node0.isCast());
      //  // Unstable assertion: assertEquals(false, node0.isNE());
      //  // Unstable assertion: assertEquals(false, node0.isIn());
      //  // Unstable assertion: assertEquals(false, node0.isVar());
      //  // Unstable assertion: assertEquals(false, node0.isVarArgs());
      //  // Unstable assertion: assertEquals(false, node0.isFromExterns());
      //  // Unstable assertion: assertEquals(false, node0.isDec());
      //  // Unstable assertion: assertEquals(false, node0.isExprResult());
      //  // Unstable assertion: assertEquals(false, node0.isGetterDef());
      //  // Unstable assertion: assertEquals(false, node0.isBlock());
      //  // Unstable assertion: assertEquals(false, node0.isGetElem());
      //  // Unstable assertion: assertEquals(false, node0.isAssignAdd());
      //  // Unstable assertion: assertEquals(false, node0.isOptionalArg());
      //  // Unstable assertion: assertEquals(false, node0.isComma());
      //  // Unstable assertion: assertEquals(false, node0.isNew());
      //  // Unstable assertion: assertEquals(0, node0.getSideEffectFlags());
      //  // Unstable assertion: assertEquals(false, node0.isFor());
      //  // Unstable assertion: assertEquals(false, node0.isCase());
      //  // Unstable assertion: assertEquals(true, node0.mayMutateGlobalStateOrThrow());
      //  // Unstable assertion: assertEquals(false, node0.isTypeOf());
      //  // Unstable assertion: assertEquals(false, node0.isVoid());
      //  // Unstable assertion: assertEquals(false, node0.isDelProp());
      //  // Unstable assertion: assertEquals(false, node0.isThis());
      //  // Unstable assertion: assertEquals(false, node0.isInstanceOf());
      //  // Unstable assertion: assertEquals(-1, node0.getCharno());
      //  // Unstable assertion: assertEquals(0, node0.getLength());
      //  // Unstable assertion: assertEquals(false, node0.isFunction());
      //  // Unstable assertion: assertEquals(40, node0.getType());
      //  // Unstable assertion: assertEquals(false, node0.isArrayLit());
      //  // Unstable assertion: assertEquals(false, node0.isDo());
      //  // Unstable assertion: assertEquals(false, node0.isSwitch());
      //  // Unstable assertion: assertEquals(false, node0.isInc());
      //  // Unstable assertion: assertEquals(false, node0.isGetProp());
      //  // Unstable assertion: assertEquals(-1, node0.getSourcePosition());
      //  // Unstable assertion: assertEquals(false, node0.isLabel());
      //  // Unstable assertion: assertEquals(false, node0.isDebugger());
      //  // Unstable assertion: assertEquals(false, node0.isAnd());
      //  // Unstable assertion: assertEquals(false, node0.hasChildren());
      //  // Unstable assertion: assertEquals(false, node0.isQuotedString());
      //  // Unstable assertion: assertEquals(false, node0.isDefaultCase());
      //  // Unstable assertion: assertEquals(false, node0.isOnlyModifiesThisCall());
      //  // Unstable assertion: assertEquals(false, node0.isLabelName());
      //  // Unstable assertion: assertEquals(false, node0.isAdd());
      //  // Unstable assertion: assertEquals(false, node0.isThrow());
      //  // Unstable assertion: assertEquals(false, node0.isTrue());
      //  // Unstable assertion: assertEquals(false, node0.isCall());
      //  // Unstable assertion: assertEquals(false, node0.isTry());
      //  // Unstable assertion: assertEquals(0, node0.getChangeTime());
      //  // Unstable assertion: assertEquals(false, node0.hasOneChild());
      //  // Unstable assertion: assertEquals(true, node0.mayMutateArguments());
      //  // Unstable assertion: assertEquals(false, node0.isNumber());
      //  // Unstable assertion: assertEquals(false, node0.isBreak());
      //  // Unstable assertion: assertEquals(false, node0.isHook());
      //  // Unstable assertion: assertEquals(true, node0.isString());
      //  // Unstable assertion: assertEquals(false, node0.isContinue());
      //  // Unstable assertion: assertEquals(false, node0.isNot());
      //  // Unstable assertion: assertEquals(false, node0.isNull());
      //  // Unstable assertion: assertEquals(false, node0.hasMoreThanOneChild());
      //  // Unstable assertion: assertEquals(false, node0.isReturn());
      //  // Unstable assertion: assertEquals(false, node0.wasEmptyNode());
      //  // Unstable assertion: assertEquals(false, node0.isOr());
      //  // Unstable assertion: assertEquals(false, node0.isLocalResultCall());
      //  // Unstable assertion: assertEquals(false, node0.isOnlyModifiesArgumentsCall());
      //  // Unstable assertion: assertEquals(false, node0.isStringKey());
      //  // Unstable assertion: assertEquals(false, node0.isSetterDef());
      //  // Unstable assertion: assertEquals(false, node0.isSyntheticBlock());
      //  // Unstable assertion: assertNull(node0.getSourceFileName());
      //  // Unstable assertion: assertEquals(false, node0.isName());
      
      DiagnosticType diagnosticType0 = TypeCheck.FUNCTION_MASKS_VARIABLE;
      //  // Unstable assertion: assertNotNull(diagnosticType0);
      
      String[] stringArray0 = new String[12];
      JSError jSError0 = JSError.make(string0, node0, diagnosticType0, stringArray0);
      //  // Unstable assertion: assertNotNull(jSError0);
      //  // Unstable assertion: assertEquals(-1, jSError0.getLineNumber());
      //  // Unstable assertion: assertEquals(-1, jSError0.getCharno());
      //  // Unstable assertion: assertEquals(0, jSError0.getNodeLength());
      //  // Unstable assertion: assertEquals(CheckLevel.OFF, jSError0.getDefaultLevel());
      //  // Unstable assertion: assertEquals(false, node0.isIf());
      //  // Unstable assertion: assertEquals(false, node0.isAssign());
      //  // Unstable assertion: assertEquals(false, node0.isEmpty());
      //  // Unstable assertion: assertEquals(false, node0.isWhile());
      //  // Unstable assertion: assertEquals(false, node0.isNoSideEffectsCall());
      //  // Unstable assertion: assertEquals(false, node0.isRegExp());
      //  // Unstable assertion: assertEquals(false, node0.isFalse());
      //  // Unstable assertion: assertEquals(-1, node0.getLineno());
      //  // Unstable assertion: assertEquals(false, node0.isParamList());
      //  // Unstable assertion: assertEquals(false, node0.isWith());
      //  // Unstable assertion: assertEquals(false, node0.isScript());
      //  // Unstable assertion: assertEquals(false, node0.isObjectLit());
      //  // Unstable assertion: assertEquals(false, node0.isCatch());
      //  // Unstable assertion: assertEquals(0, node0.getChildCount());
      //  // Unstable assertion: assertEquals(false, node0.isCast());
      //  // Unstable assertion: assertEquals(false, node0.isNE());
      //  // Unstable assertion: assertEquals(false, node0.isIn());
      //  // Unstable assertion: assertEquals(false, node0.isVar());
      //  // Unstable assertion: assertEquals(false, node0.isVarArgs());
      //  // Unstable assertion: assertEquals(false, node0.isFromExterns());
      //  // Unstable assertion: assertEquals(false, node0.isDec());
      //  // Unstable assertion: assertEquals(false, node0.isExprResult());
      //  // Unstable assertion: assertEquals(false, node0.isGetterDef());
      //  // Unstable assertion: assertEquals(false, node0.isBlock());
      //  // Unstable assertion: assertEquals(false, node0.isGetElem());
      //  // Unstable assertion: assertEquals(false, node0.isAssignAdd());
      //  // Unstable assertion: assertEquals(false, node0.isOptionalArg());
      //  // Unstable assertion: assertEquals(false, node0.isComma());
      //  // Unstable assertion: assertEquals(false, node0.isNew());
      //  // Unstable assertion: assertEquals(0, node0.getSideEffectFlags());
      //  // Unstable assertion: assertEquals(false, node0.isFor());
      //  // Unstable assertion: assertEquals(false, node0.isCase());
      //  // Unstable assertion: assertEquals(true, node0.mayMutateGlobalStateOrThrow());
      //  // Unstable assertion: assertEquals(false, node0.isTypeOf());
      //  // Unstable assertion: assertEquals(false, node0.isVoid());
      //  // Unstable assertion: assertEquals(false, node0.isDelProp());
      //  // Unstable assertion: assertEquals(false, node0.isThis());
      //  // Unstable assertion: assertEquals(false, node0.isInstanceOf());
      //  // Unstable assertion: assertEquals(-1, node0.getCharno());
      //  // Unstable assertion: assertEquals(0, node0.getLength());
      //  // Unstable assertion: assertEquals(false, node0.isFunction());
      //  // Unstable assertion: assertEquals(40, node0.getType());
      //  // Unstable assertion: assertEquals(false, node0.isArrayLit());
      //  // Unstable assertion: assertEquals(false, node0.isDo());
      //  // Unstable assertion: assertEquals(false, node0.isSwitch());
      //  // Unstable assertion: assertEquals(false, node0.isInc());
      //  // Unstable assertion: assertEquals(false, node0.isGetProp());
      //  // Unstable assertion: assertEquals(-1, node0.getSourcePosition());
      //  // Unstable assertion: assertEquals(false, node0.isLabel());
      //  // Unstable assertion: assertEquals(false, node0.isDebugger());
      //  // Unstable assertion: assertEquals(false, node0.isAnd());
      //  // Unstable assertion: assertEquals(false, node0.hasChildren());
      //  // Unstable assertion: assertEquals(false, node0.isQuotedString());
      //  // Unstable assertion: assertEquals(false, node0.isDefaultCase());
      //  // Unstable assertion: assertEquals(false, node0.isOnlyModifiesThisCall());
      //  // Unstable assertion: assertEquals(false, node0.isLabelName());
      //  // Unstable assertion: assertEquals(false, node0.isAdd());
      //  // Unstable assertion: assertEquals(false, node0.isThrow());
      //  // Unstable assertion: assertEquals(false, node0.isTrue());
      //  // Unstable assertion: assertEquals(false, node0.isCall());
      //  // Unstable assertion: assertEquals(false, node0.isTry());
      //  // Unstable assertion: assertEquals(0, node0.getChangeTime());
      //  // Unstable assertion: assertEquals(false, node0.hasOneChild());
      //  // Unstable assertion: assertEquals(true, node0.mayMutateArguments());
      //  // Unstable assertion: assertEquals(false, node0.isNumber());
      //  // Unstable assertion: assertEquals(false, node0.isBreak());
      //  // Unstable assertion: assertEquals(false, node0.isHook());
      //  // Unstable assertion: assertEquals(true, node0.isString());
      //  // Unstable assertion: assertEquals(false, node0.isContinue());
      //  // Unstable assertion: assertEquals(false, node0.isNot());
      //  // Unstable assertion: assertEquals(false, node0.isNull());
      //  // Unstable assertion: assertEquals(false, node0.hasMoreThanOneChild());
      //  // Unstable assertion: assertEquals(false, node0.isReturn());
      //  // Unstable assertion: assertEquals(false, node0.wasEmptyNode());
      //  // Unstable assertion: assertEquals(false, node0.isOr());
      //  // Unstable assertion: assertEquals(false, node0.isLocalResultCall());
      //  // Unstable assertion: assertEquals(false, node0.isOnlyModifiesArgumentsCall());
      //  // Unstable assertion: assertEquals(false, node0.isStringKey());
      //  // Unstable assertion: assertEquals(false, node0.isSetterDef());
      //  // Unstable assertion: assertEquals(false, node0.isSyntheticBlock());
      //  // Unstable assertion: assertNull(node0.getSourceFileName());
      //  // Unstable assertion: assertEquals(false, node0.isName());
      
      TypeValidator.TypeMismatch typeValidator_TypeMismatch0 = new TypeValidator.TypeMismatch(jSType0, jSType0, jSError0);
      //  // Unstable assertion: assertNotNull(typeValidator_TypeMismatch0);
      //  // Unstable assertion: assertEquals(-1, jSError0.getLineNumber());
      //  // Unstable assertion: assertEquals(-1, jSError0.getCharno());
      //  // Unstable assertion: assertEquals(0, jSError0.getNodeLength());
      //  // Unstable assertion: assertEquals(CheckLevel.OFF, jSError0.getDefaultLevel());
      //  // Unstable assertion: assertEquals(false, node0.isIf());
      //  // Unstable assertion: assertEquals(false, node0.isAssign());
      //  // Unstable assertion: assertEquals(false, node0.isEmpty());
      //  // Unstable assertion: assertEquals(false, node0.isWhile());
      //  // Unstable assertion: assertEquals(false, node0.isNoSideEffectsCall());
      //  // Unstable assertion: assertEquals(false, node0.isRegExp());
      //  // Unstable assertion: assertEquals(false, node0.isFalse());
      //  // Unstable assertion: assertEquals(-1, node0.getLineno());
      //  // Unstable assertion: assertEquals(false, node0.isParamList());
      //  // Unstable assertion: assertEquals(false, node0.isWith());
      //  // Unstable assertion: assertEquals(false, node0.isScript());
      //  // Unstable assertion: assertEquals(false, node0.isObjectLit());
      //  // Unstable assertion: assertEquals(false, node0.isCatch());
      //  // Unstable assertion: assertEquals(0, node0.getChildCount());
      //  // Unstable assertion: assertEquals(false, node0.isCast());
      //  // Unstable assertion: assertEquals(false, node0.isNE());
      //  // Unstable assertion: assertEquals(false, node0.isIn());
      //  // Unstable assertion: assertEquals(false, node0.isVar());
      //  // Unstable assertion: assertEquals(false, node0.isVarArgs());
      //  // Unstable assertion: assertEquals(false, node0.isFromExterns());
      //  // Unstable assertion: assertEquals(false, node0.isDec());
      //  // Unstable assertion: assertEquals(false, node0.isExprResult());
      //  // Unstable assertion: assertEquals(false, node0.isGetterDef());
      //  // Unstable assertion: assertEquals(false, node0.isBlock());
      //  // Unstable assertion: assertEquals(false, node0.isGetElem());
      //  // Unstable assertion: assertEquals(false, node0.isAssignAdd());
      //  // Unstable assertion: assertEquals(false, node0.isOptionalArg());
      //  // Unstable assertion: assertEquals(false, node0.isComma());
      //  // Unstable assertion: assertEquals(false, node0.isNew());
      //  // Unstable assertion: assertEquals(0, node0.getSideEffectFlags());
      //  // Unstable assertion: assertEquals(false, node0.isFor());
      //  // Unstable assertion: assertEquals(false, node0.isCase());
      //  // Unstable assertion: assertEquals(true, node0.mayMutateGlobalStateOrThrow());
      //  // Unstable assertion: assertEquals(false, node0.isTypeOf());
      //  // Unstable assertion: assertEquals(false, node0.isVoid());
      //  // Unstable assertion: assertEquals(false, node0.isDelProp());
      //  // Unstable assertion: assertEquals(false, node0.isThis());
      //  // Unstable assertion: assertEquals(false, node0.isInstanceOf());
      //  // Unstable assertion: assertEquals(-1, node0.getCharno());
      //  // Unstable assertion: assertEquals(0, node0.getLength());
      //  // Unstable assertion: assertEquals(false, node0.isFunction());
      //  // Unstable assertion: assertEquals(40, node0.getType());
      //  // Unstable assertion: assertEquals(false, node0.isArrayLit());
      //  // Unstable assertion: assertEquals(false, node0.isDo());
      //  // Unstable assertion: assertEquals(false, node0.isSwitch());
      //  // Unstable assertion: assertEquals(false, node0.isInc());
      //  // Unstable assertion: assertEquals(false, node0.isGetProp());
      //  // Unstable assertion: assertEquals(-1, node0.getSourcePosition());
      //  // Unstable assertion: assertEquals(false, node0.isLabel());
      //  // Unstable assertion: assertEquals(false, node0.isDebugger());
      //  // Unstable assertion: assertEquals(false, node0.isAnd());
      //  // Unstable assertion: assertEquals(false, node0.hasChildren());
      //  // Unstable assertion: assertEquals(false, node0.isQuotedString());
      //  // Unstable assertion: assertEquals(false, node0.isDefaultCase());
      //  // Unstable assertion: assertEquals(false, node0.isOnlyModifiesThisCall());
      //  // Unstable assertion: assertEquals(false, node0.isLabelName());
      //  // Unstable assertion: assertEquals(false, node0.isAdd());
      //  // Unstable assertion: assertEquals(false, node0.isThrow());
      //  // Unstable assertion: assertEquals(false, node0.isTrue());
      //  // Unstable assertion: assertEquals(false, node0.isCall());
      //  // Unstable assertion: assertEquals(false, node0.isTry());
      //  // Unstable assertion: assertEquals(0, node0.getChangeTime());
      //  // Unstable assertion: assertEquals(false, node0.hasOneChild());
      //  // Unstable assertion: assertEquals(true, node0.mayMutateArguments());
      //  // Unstable assertion: assertEquals(false, node0.isNumber());
      //  // Unstable assertion: assertEquals(false, node0.isBreak());
      //  // Unstable assertion: assertEquals(false, node0.isHook());
      //  // Unstable assertion: assertEquals(true, node0.isString());
      //  // Unstable assertion: assertEquals(false, node0.isContinue());
      //  // Unstable assertion: assertEquals(false, node0.isNot());
      //  // Unstable assertion: assertEquals(false, node0.isNull());
      //  // Unstable assertion: assertEquals(false, node0.hasMoreThanOneChild());
      //  // Unstable assertion: assertEquals(false, node0.isReturn());
      //  // Unstable assertion: assertEquals(false, node0.wasEmptyNode());
      //  // Unstable assertion: assertEquals(false, node0.isOr());
      //  // Unstable assertion: assertEquals(false, node0.isLocalResultCall());
      //  // Unstable assertion: assertEquals(false, node0.isOnlyModifiesArgumentsCall());
      //  // Unstable assertion: assertEquals(false, node0.isStringKey());
      //  // Unstable assertion: assertEquals(false, node0.isSetterDef());
      //  // Unstable assertion: assertEquals(false, node0.isSyntheticBlock());
      //  // Unstable assertion: assertNull(node0.getSourceFileName());
      //  // Unstable assertion: assertEquals(false, node0.isName());
      
      String string1 = typeValidator_TypeMismatch0.toString();
      //  // Unstable assertion: assertNotNull(string1);
      //  // Unstable assertion: assertNotSame(string1, string0);
      //  // Unstable assertion: assertNotSame(string0, string1);
      //  // Unstable assertion: assertFalse(string1.equals((Object)string0));
      //  // Unstable assertion: assertFalse(string0.equals((Object)string1));
      //  // Unstable assertion: assertEquals(-1, jSError0.getLineNumber());
      //  // Unstable assertion: assertEquals(-1, jSError0.getCharno());
      //  // Unstable assertion: assertEquals(0, jSError0.getNodeLength());
      //  // Unstable assertion: assertEquals(CheckLevel.OFF, jSError0.getDefaultLevel());
      //  // Unstable assertion: assertEquals(false, node0.isIf());
      //  // Unstable assertion: assertEquals(false, node0.isAssign());
      //  // Unstable assertion: assertEquals(false, node0.isEmpty());
      //  // Unstable assertion: assertEquals(false, node0.isWhile());
      //  // Unstable assertion: assertEquals(false, node0.isNoSideEffectsCall());
      //  // Unstable assertion: assertEquals(false, node0.isRegExp());
      //  // Unstable assertion: assertEquals(false, node0.isFalse());
      //  // Unstable assertion: assertEquals(-1, node0.getLineno());
      //  // Unstable assertion: assertEquals(false, node0.isParamList());
      //  // Unstable assertion: assertEquals(false, node0.isWith());
      //  // Unstable assertion: assertEquals(false, node0.isScript());
      //  // Unstable assertion: assertEquals(false, node0.isObjectLit());
      //  // Unstable assertion: assertEquals(false, node0.isCatch());
      //  // Unstable assertion: assertEquals(0, node0.getChildCount());
      //  // Unstable assertion: assertEquals(false, node0.isCast());
      //  // Unstable assertion: assertEquals(false, node0.isNE());
      //  // Unstable assertion: assertEquals(false, node0.isIn());
      //  // Unstable assertion: assertEquals(false, node0.isVar());
      //  // Unstable assertion: assertEquals(false, node0.isVarArgs());
      //  // Unstable assertion: assertEquals(false, node0.isFromExterns());
      //  // Unstable assertion: assertEquals(false, node0.isDec());
      //  // Unstable assertion: assertEquals(false, node0.isExprResult());
      //  // Unstable assertion: assertEquals(false, node0.isGetterDef());
      //  // Unstable assertion: assertEquals(false, node0.isBlock());
      //  // Unstable assertion: assertEquals(false, node0.isGetElem());
      //  // Unstable assertion: assertEquals(false, node0.isAssignAdd());
      //  // Unstable assertion: assertEquals(false, node0.isOptionalArg());
      //  // Unstable assertion: assertEquals(false, node0.isComma());
      //  // Unstable assertion: assertEquals(false, node0.isNew());
      //  // Unstable assertion: assertEquals(0, node0.getSideEffectFlags());
      //  // Unstable assertion: assertEquals(false, node0.isFor());
      //  // Unstable assertion: assertEquals(false, node0.isCase());
      //  // Unstable assertion: assertEquals(true, node0.mayMutateGlobalStateOrThrow());
      //  // Unstable assertion: assertEquals(false, node0.isTypeOf());
      //  // Unstable assertion: assertEquals(false, node0.isVoid());
      //  // Unstable assertion: assertEquals(false, node0.isDelProp());
      //  // Unstable assertion: assertEquals(false, node0.isThis());
      //  // Unstable assertion: assertEquals(false, node0.isInstanceOf());
      //  // Unstable assertion: assertEquals(-1, node0.getCharno());
      //  // Unstable assertion: assertEquals(0, node0.getLength());
      //  // Unstable assertion: assertEquals(false, node0.isFunction());
      //  // Unstable assertion: assertEquals(40, node0.getType());
      //  // Unstable assertion: assertEquals(false, node0.isArrayLit());
      //  // Unstable assertion: assertEquals(false, node0.isDo());
      //  // Unstable assertion: assertEquals(false, node0.isSwitch());
      //  // Unstable assertion: assertEquals(false, node0.isInc());
      //  // Unstable assertion: assertEquals(false, node0.isGetProp());
      //  // Unstable assertion: assertEquals(-1, node0.getSourcePosition());
      //  // Unstable assertion: assertEquals(false, node0.isLabel());
      //  // Unstable assertion: assertEquals(false, node0.isDebugger());
      //  // Unstable assertion: assertEquals(false, node0.isAnd());
      //  // Unstable assertion: assertEquals(false, node0.hasChildren());
      //  // Unstable assertion: assertEquals(false, node0.isQuotedString());
      //  // Unstable assertion: assertEquals(false, node0.isDefaultCase());
      //  // Unstable assertion: assertEquals(false, node0.isOnlyModifiesThisCall());
      //  // Unstable assertion: assertEquals(false, node0.isLabelName());
      //  // Unstable assertion: assertEquals(false, node0.isAdd());
      //  // Unstable assertion: assertEquals(false, node0.isThrow());
      //  // Unstable assertion: assertEquals(false, node0.isTrue());
      //  // Unstable assertion: assertEquals(false, node0.isCall());
      //  // Unstable assertion: assertEquals(false, node0.isTry());
      //  // Unstable assertion: assertEquals(0, node0.getChangeTime());
      //  // Unstable assertion: assertEquals(false, node0.hasOneChild());
      //  // Unstable assertion: assertEquals(true, node0.mayMutateArguments());
      //  // Unstable assertion: assertEquals(false, node0.isNumber());
      //  // Unstable assertion: assertEquals(false, node0.isBreak());
      //  // Unstable assertion: assertEquals(false, node0.isHook());
      //  // Unstable assertion: assertEquals(true, node0.isString());
      //  // Unstable assertion: assertEquals(false, node0.isContinue());
      //  // Unstable assertion: assertEquals(false, node0.isNot());
      //  // Unstable assertion: assertEquals(false, node0.isNull());
      //  // Unstable assertion: assertEquals(false, node0.hasMoreThanOneChild());
      //  // Unstable assertion: assertEquals(false, node0.isReturn());
      //  // Unstable assertion: assertEquals(false, node0.wasEmptyNode());
      //  // Unstable assertion: assertEquals(false, node0.isOr());
      //  // Unstable assertion: assertEquals(false, node0.isLocalResultCall());
      //  // Unstable assertion: assertEquals(false, node0.isOnlyModifiesArgumentsCall());
      //  // Unstable assertion: assertEquals(false, node0.isStringKey());
      //  // Unstable assertion: assertEquals(false, node0.isSetterDef());
      //  // Unstable assertion: assertEquals(false, node0.isSyntheticBlock());
      //  // Unstable assertion: assertNull(node0.getSourceFileName());
      //  // Unstable assertion: assertEquals(false, node0.isName());
      //  // Unstable assertion: assertEquals("(null, null)", string1);
  }

  @Test
  public void test29()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      assertNotNull(compiler0);
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      
      String string0 = "k";
      Node node0 = compiler0.parseTestCode(string0);
      assertNotNull(node0);
      assertEquals(false, node0.isThis());
      assertEquals("[testcode]", node0.getSourceFileName());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isString());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isStringKey());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isOr());
      assertEquals(4096, node0.getSourcePosition());
      assertEquals(false, node0.isDebugger());
      assertEquals(1, node0.getChildCount());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isGetProp());
      assertEquals(true, node0.hasOneChild());
      assertEquals(false, node0.isTypeOf());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isWhile());
      assertEquals(0, node0.getCharno());
      assertEquals(true, node0.isScript());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isNull());
      assertEquals(true, node0.mayMutateArguments());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isCast());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isBreak());
      assertEquals(true, node0.hasChildren());
      assertEquals(false, node0.isSwitch());
      assertEquals(0, node0.getLength());
      assertEquals(1, node0.getLineno());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isCall());
      assertEquals(true, node0.isSyntheticBlock());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(132, node0.getType());
      assertEquals(false, node0.isDec());
      assertEquals(true, node0.mayMutateGlobalStateOrThrow());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isOnlyModifiesArgumentsCall());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(0, node0.getChangeTime());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isSetterDef());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(false, compiler0.isIdeMode());
      
      TypeValidator typeValidator0 = new TypeValidator(compiler0);
      assertNotNull(typeValidator0);
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(false, compiler0.isIdeMode());
      
      Iterable<TypeValidator.TypeMismatch> iterable0 = typeValidator0.getMismatches();
      assertNotNull(iterable0);
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(false, compiler0.isIdeMode());
  }
}
