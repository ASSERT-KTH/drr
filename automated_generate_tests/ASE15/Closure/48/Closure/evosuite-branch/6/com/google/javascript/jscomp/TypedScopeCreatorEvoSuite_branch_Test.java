/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 22:04:49 GMT 2014
 */

package com.google.javascript.jscomp;

import static org.junit.Assert.*; import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.junit.Test;
import com.google.javascript.jscomp.ClosureCodingConvention;
import com.google.javascript.jscomp.Compiler;
import com.google.javascript.jscomp.CompilerOptions;
import com.google.javascript.jscomp.ErrorManager;
import com.google.javascript.jscomp.PrintStreamErrorManager;
import com.google.javascript.jscomp.Scope;
import com.google.javascript.jscomp.TypedScopeCreator;
import com.google.javascript.rhino.Node;
import java.io.PrintStream;



import org.evosuite.runtime.mock.java.lang.MockRuntimeException;
import org.junit.runner.RunWith;


public class TypedScopeCreatorEvoSuite_branch_Test  {

  @Test
  public void test0()  throws Throwable  {
      PrintStream printStream0 = null;
      PrintStreamErrorManager printStreamErrorManager0 = new PrintStreamErrorManager(printStream0);
      assertEquals(0, printStreamErrorManager0.getWarningCount());
      assertEquals(0, printStreamErrorManager0.getErrorCount());
      assertEquals(0.0, printStreamErrorManager0.getTypedPercent(), 0.01D);
      assertNotNull(printStreamErrorManager0);
      
      Compiler compiler0 = new Compiler((ErrorManager) printStreamErrorManager0);
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(0, printStreamErrorManager0.getWarningCount());
      assertEquals(0, printStreamErrorManager0.getErrorCount());
      assertEquals(0.0, printStreamErrorManager0.getTypedPercent(), 0.01D);
      assertNotNull(compiler0);
      
      String string0 = "JSC_LED+=ON_NOG_qBJECT";
      Node node0 = compiler0.parseTestCode(string0);
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isDo());
      assertEquals(" [testcode] ", node0.getSourceFileName());
      assertEquals(false, node0.isString());
      assertEquals(false, node0.isVar());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isExprResult());
      assertEquals(1, node0.getLineno());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(132, node0.getType());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isLabel());
      assertEquals(0, node0.getCharno());
      assertEquals(false, node0.isBlock());
      assertEquals(true, node0.isScript());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isEmpty());
      assertEquals(1, node0.getChildCount());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isSetterDef());
      assertEquals(true, node0.isSyntheticBlock());
      assertEquals(false, node0.isFromExterns());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isNot());
      assertEquals(true, node0.hasOneChild());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(true, node0.hasChildren());
      assertEquals(4096, node0.getSourcePosition());
      assertEquals(0, printStreamErrorManager0.getWarningCount());
      assertEquals(0, printStreamErrorManager0.getErrorCount());
      assertEquals(0.0, printStreamErrorManager0.getTypedPercent(), 0.01D);
      assertNotNull(node0);
      
      String string1 = "co.googljaasctjscomk.Pa8nfgate";
      assertNotSame(string1, string0);
      
      Node node1 = compiler0.parseSyntheticCode(string0, string1);
      assertFalse(node1.equals((Object)node0));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertEquals(false, node1.isComma());
      assertEquals(false, node1.isNumber());
      assertEquals(false, node1.isOr());
      assertEquals(false, node1.isName());
      assertEquals(false, node1.isQuotedString());
      assertEquals(false, node1.isCall());
      assertEquals(false, node1.isArrayLit());
      assertEquals(false, node1.isVoid());
      assertEquals(0, node1.getCharno());
      assertEquals(false, node1.isNull());
      assertEquals(false, node1.isLabel());
      assertEquals(false, node1.isUnscopedQualifiedName());
      assertEquals(false, node1.isFunction());
      assertEquals(false, node1.isOnlyModifiesThisCall());
      assertEquals(false, node1.isSwitch());
      assertEquals(false, node1.isExprResult());
      assertEquals(false, node1.isDefaultCase());
      assertEquals(false, node1.isGetterDef());
      assertEquals(false, node1.isHook());
      assertEquals(false, node1.isRegExp());
      assertEquals(false, node1.wasEmptyNode());
      assertEquals(0, node1.getSideEffectFlags());
      assertEquals(false, node1.isThis());
      assertEquals(false, node1.isSetterDef());
      assertEquals(false, node1.isAnd());
      assertEquals(false, node1.isDec());
      assertEquals(false, node1.isVar());
      assertEquals(false, node1.isTrue());
      assertEquals(false, node1.isReturn());
      assertEquals(false, node1.isParamList());
      assertEquals(4096, node1.getSourcePosition());
      assertEquals(false, node1.isFromExterns());
      assertEquals(false, node1.isOptionalArg());
      assertEquals(true, node1.isSyntheticBlock());
      assertEquals(false, node1.isString());
      assertEquals(false, node1.isNew());
      assertEquals(false, node1.isInc());
      assertEquals(false, node1.isBlock());
      assertEquals(false, node1.isIf());
      assertEquals(false, node1.isEmpty());
      assertEquals(false, node1.isObjectLit());
      assertEquals(false, node1.isFor());
      assertEquals(false, node1.isCase());
      assertEquals(false, node1.isLocalResultCall());
      assertEquals(false, node1.isFalse());
      assertEquals(true, node1.isScript());
      assertEquals(false, node1.isCatch());
      assertEquals(false, node1.isGetProp());
      assertEquals(false, node1.isThrow());
      assertEquals(false, node1.hasMoreThanOneChild());
      assertEquals(false, node1.isAssign());
      assertEquals(1, node1.getLineno());
      assertEquals(false, node1.isQualifiedName());
      assertEquals("JSC_LED+=ON_NOG_qBJECT", node1.getSourceFileName());
      assertEquals(true, node1.hasChildren());
      assertEquals(false, node1.isTry());
      assertEquals(false, node1.isNoSideEffectsCall());
      assertEquals(0, node1.getLength());
      assertEquals(false, node1.isNot());
      assertEquals(1, node1.getChildCount());
      assertEquals(false, node1.isVarArgs());
      assertEquals(false, node1.isDo());
      assertEquals(false, node1.isGetElem());
      assertEquals(false, node1.isAdd());
      assertEquals(132, node1.getType());
      assertEquals(false, node1.isLabelName());
      assertEquals(true, node1.hasOneChild());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(0, printStreamErrorManager0.getWarningCount());
      assertEquals(0, printStreamErrorManager0.getErrorCount());
      assertEquals(0.0, printStreamErrorManager0.getTypedPercent(), 0.01D);
      assertNotSame(node1, node0);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertNotNull(node1);
      
      TypedScopeCreator typedScopeCreator0 = new TypedScopeCreator(compiler0);
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(0, printStreamErrorManager0.getWarningCount());
      assertEquals(0, printStreamErrorManager0.getErrorCount());
      assertEquals(0.0, printStreamErrorManager0.getTypedPercent(), 0.01D);
      assertNotNull(typedScopeCreator0);
      
      node1.addChildrenToFront(node0);
      assertFalse(node1.equals((Object)node0));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertFalse(node0.equals((Object)node1));
      assertEquals(false, node1.isComma());
      assertEquals(false, node1.isNumber());
      assertEquals(false, node1.isOr());
      assertEquals(false, node1.isName());
      assertEquals(false, node1.isQuotedString());
      assertEquals(false, node1.isCall());
      assertEquals(false, node1.isArrayLit());
      assertEquals(false, node1.isVoid());
      assertEquals(0, node1.getCharno());
      assertEquals(false, node1.isNull());
      assertEquals(false, node1.isLabel());
      assertEquals(false, node1.isUnscopedQualifiedName());
      assertEquals(false, node1.isFunction());
      assertEquals(false, node1.isOnlyModifiesThisCall());
      assertEquals(false, node1.isSwitch());
      assertEquals(false, node1.isExprResult());
      assertEquals(false, node1.isDefaultCase());
      assertEquals(false, node1.isGetterDef());
      assertEquals(false, node1.isHook());
      assertEquals(false, node1.isRegExp());
      assertEquals(false, node1.wasEmptyNode());
      assertEquals(0, node1.getSideEffectFlags());
      assertEquals(false, node1.isThis());
      assertEquals(false, node1.isSetterDef());
      assertEquals(false, node1.isAnd());
      assertEquals(true, node1.hasMoreThanOneChild());
      assertEquals(false, node1.isDec());
      assertEquals(2, node1.getChildCount());
      assertEquals(false, node1.isVar());
      assertEquals(false, node1.isTrue());
      assertEquals(false, node1.isReturn());
      assertEquals(false, node1.isParamList());
      assertEquals(4096, node1.getSourcePosition());
      assertEquals(false, node1.isFromExterns());
      assertEquals(false, node1.isOptionalArg());
      assertEquals(true, node1.isSyntheticBlock());
      assertEquals(false, node1.isString());
      assertEquals(false, node1.isNew());
      assertEquals(false, node1.hasOneChild());
      assertEquals(false, node1.isInc());
      assertEquals(false, node1.isBlock());
      assertEquals(false, node1.isIf());
      assertEquals(false, node1.isEmpty());
      assertEquals(false, node1.isObjectLit());
      assertEquals(false, node1.isFor());
      assertEquals(false, node1.isCase());
      assertEquals(false, node1.isLocalResultCall());
      assertEquals(false, node1.isFalse());
      assertEquals(true, node1.isScript());
      assertEquals(false, node1.isCatch());
      assertEquals(false, node1.isGetProp());
      assertEquals(false, node1.isThrow());
      assertEquals(false, node1.isAssign());
      assertEquals(1, node1.getLineno());
      assertEquals(false, node1.isQualifiedName());
      assertEquals("JSC_LED+=ON_NOG_qBJECT", node1.getSourceFileName());
      assertEquals(true, node1.hasChildren());
      assertEquals(false, node1.isTry());
      assertEquals(false, node1.isNoSideEffectsCall());
      assertEquals(0, node1.getLength());
      assertEquals(false, node1.isNot());
      assertEquals(false, node1.isVarArgs());
      assertEquals(false, node1.isDo());
      assertEquals(false, node1.isGetElem());
      assertEquals(false, node1.isAdd());
      assertEquals(132, node1.getType());
      assertEquals(false, node1.isLabelName());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isDo());
      assertEquals(" [testcode] ", node0.getSourceFileName());
      assertEquals(false, node0.isString());
      assertEquals(false, node0.isVar());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isExprResult());
      assertEquals(1, node0.getLineno());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(132, node0.getType());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isLabel());
      assertEquals(0, node0.getCharno());
      assertEquals(false, node0.isBlock());
      assertEquals(true, node0.isScript());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isEmpty());
      assertEquals(1, node0.getChildCount());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isSetterDef());
      assertEquals(true, node0.isSyntheticBlock());
      assertEquals(false, node0.isFromExterns());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isNot());
      assertEquals(true, node0.hasOneChild());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(true, node0.hasChildren());
      assertEquals(4096, node0.getSourcePosition());
      assertEquals(0, printStreamErrorManager0.getWarningCount());
      assertEquals(0, printStreamErrorManager0.getErrorCount());
      assertEquals(0.0, printStreamErrorManager0.getTypedPercent(), 0.01D);
      assertNotSame(node1, node0);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertNotSame(node0, node1);
      
      Scope scope0 = null;
      Scope scope1 = typedScopeCreator0.createScope(node1, scope0);
      assertFalse(node1.equals((Object)node0));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertEquals(false, node1.isComma());
      assertEquals(false, node1.isNumber());
      assertEquals(false, node1.isOr());
      assertEquals(false, node1.isName());
      assertEquals(false, node1.isQuotedString());
      assertEquals(false, node1.isCall());
      assertEquals(false, node1.isArrayLit());
      assertEquals(false, node1.isVoid());
      assertEquals(0, node1.getCharno());
      assertEquals(false, node1.isNull());
      assertEquals(false, node1.isLabel());
      assertEquals(false, node1.isUnscopedQualifiedName());
      assertEquals(false, node1.isFunction());
      assertEquals(false, node1.isOnlyModifiesThisCall());
      assertEquals(false, node1.isSwitch());
      assertEquals(false, node1.isExprResult());
      assertEquals(false, node1.isDefaultCase());
      assertEquals(false, node1.isGetterDef());
      assertEquals(false, node1.isHook());
      assertEquals(false, node1.isRegExp());
      assertEquals(false, node1.wasEmptyNode());
      assertEquals(0, node1.getSideEffectFlags());
      assertEquals(false, node1.isThis());
      assertEquals(false, node1.isSetterDef());
      assertEquals(false, node1.isAnd());
      assertEquals(true, node1.hasMoreThanOneChild());
      assertEquals(false, node1.isDec());
      assertEquals(2, node1.getChildCount());
      assertEquals(false, node1.isVar());
      assertEquals(false, node1.isTrue());
      assertEquals(false, node1.isReturn());
      assertEquals(false, node1.isParamList());
      assertEquals(4096, node1.getSourcePosition());
      assertEquals(false, node1.isFromExterns());
      assertEquals(false, node1.isOptionalArg());
      assertEquals(true, node1.isSyntheticBlock());
      assertEquals(false, node1.isString());
      assertEquals(false, node1.isNew());
      assertEquals(false, node1.hasOneChild());
      assertEquals(false, node1.isInc());
      assertEquals(false, node1.isBlock());
      assertEquals(false, node1.isIf());
      assertEquals(false, node1.isEmpty());
      assertEquals(false, node1.isObjectLit());
      assertEquals(false, node1.isFor());
      assertEquals(false, node1.isCase());
      assertEquals(false, node1.isLocalResultCall());
      assertEquals(false, node1.isFalse());
      assertEquals(true, node1.isScript());
      assertEquals(false, node1.isCatch());
      assertEquals(false, node1.isGetProp());
      assertEquals(false, node1.isThrow());
      assertEquals(false, node1.isAssign());
      assertEquals(1, node1.getLineno());
      assertEquals(false, node1.isQualifiedName());
      assertEquals("JSC_LED+=ON_NOG_qBJECT", node1.getSourceFileName());
      assertEquals(true, node1.hasChildren());
      assertEquals(false, node1.isTry());
      assertEquals(false, node1.isNoSideEffectsCall());
      assertEquals(0, node1.getLength());
      assertEquals(false, node1.isNot());
      assertEquals(false, node1.isVarArgs());
      assertEquals(false, node1.isDo());
      assertEquals(false, node1.isGetElem());
      assertEquals(false, node1.isAdd());
      assertEquals(132, node1.getType());
      assertEquals(false, node1.isLabelName());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(33, scope1.getVarCount());
      assertEquals(true, scope1.isGlobal());
      assertEquals(false, scope1.isLocal());
      assertEquals(0, printStreamErrorManager0.getWarningCount());
      assertEquals(0, printStreamErrorManager0.getErrorCount());
      assertEquals(0.0, printStreamErrorManager0.getTypedPercent(), 0.01D);
      assertNotSame(node1, node0);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertNotNull(scope1);
  }

  @Test
  public void test1()  throws Throwable  {
      PrintStream printStream0 = null;
      PrintStreamErrorManager printStreamErrorManager0 = new PrintStreamErrorManager(printStream0);
      assertEquals(0.0, printStreamErrorManager0.getTypedPercent(), 0.01D);
      assertEquals(0, printStreamErrorManager0.getErrorCount());
      assertEquals(0, printStreamErrorManager0.getWarningCount());
      assertNotNull(printStreamErrorManager0);
      
      Compiler compiler0 = new Compiler((ErrorManager) printStreamErrorManager0);
      assertEquals(0.0, printStreamErrorManager0.getTypedPercent(), 0.01D);
      assertEquals(0, printStreamErrorManager0.getErrorCount());
      assertEquals(0, printStreamErrorManager0.getWarningCount());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(0, compiler0.getErrorCount());
      assertNotNull(compiler0);
      
      String string0 = "JSC_LED+=ON_NOG_qBJECT";
      Node node0 = compiler0.parseTestCode(string0);
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isVarArgs());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isOr());
      assertEquals(" [testcode] ", node0.getSourceFileName());
      assertEquals(true, node0.isScript());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isThrow());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isString());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isFalse());
      assertEquals(4096, node0.getSourcePosition());
      assertEquals(true, node0.hasChildren());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(1, node0.getLineno());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isLabel());
      assertEquals(true, node0.isSyntheticBlock());
      assertEquals(0, node0.getCharno());
      assertEquals(1, node0.getChildCount());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isIf());
      assertEquals(true, node0.hasOneChild());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isGetProp());
      assertEquals(132, node0.getType());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isArrayLit());
      assertEquals(0.0, printStreamErrorManager0.getTypedPercent(), 0.01D);
      assertEquals(0, printStreamErrorManager0.getErrorCount());
      assertEquals(0, printStreamErrorManager0.getWarningCount());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(false, compiler0.hasErrors());
      assertNotNull(node0);
      
      Node node1 = compiler0.parseSyntheticCode(string0, string0);
      assertFalse(node1.equals((Object)node0));
      assertEquals(0.0, printStreamErrorManager0.getTypedPercent(), 0.01D);
      assertEquals(0, printStreamErrorManager0.getErrorCount());
      assertEquals(0, printStreamErrorManager0.getWarningCount());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(false, node1.isHook());
      assertEquals("JSC_LED+=ON_NOG_qBJECT", node1.getSourceFileName());
      assertEquals(false, node1.isThrow());
      assertEquals(false, node1.isNoSideEffectsCall());
      assertEquals(false, node1.isVar());
      assertEquals(false, node1.isSetterDef());
      assertEquals(false, node1.isBlock());
      assertEquals(false, node1.isThis());
      assertEquals(false, node1.isAssign());
      assertEquals(1, node1.getChildCount());
      assertEquals(false, node1.isUnscopedQualifiedName());
      assertEquals(1, node1.getLineno());
      assertEquals(false, node1.isOptionalArg());
      assertEquals(false, node1.isTrue());
      assertEquals(false, node1.isObjectLit());
      assertEquals(false, node1.isNull());
      assertEquals(0, node1.getLength());
      assertEquals(false, node1.isQualifiedName());
      assertEquals(false, node1.isSwitch());
      assertEquals(0, node1.getCharno());
      assertEquals(false, node1.isCall());
      assertEquals(false, node1.isOnlyModifiesThisCall());
      assertEquals(false, node1.isInc());
      assertEquals(132, node1.getType());
      assertEquals(false, node1.wasEmptyNode());
      assertEquals(false, node1.isIf());
      assertEquals(false, node1.isNew());
      assertEquals(false, node1.isDec());
      assertEquals(false, node1.isGetProp());
      assertEquals(false, node1.isLabelName());
      assertEquals(false, node1.isNot());
      assertEquals(false, node1.isFor());
      assertEquals(false, node1.isTry());
      assertEquals(false, node1.isVarArgs());
      assertEquals(false, node1.hasMoreThanOneChild());
      assertEquals(false, node1.isLabel());
      assertEquals(false, node1.isQuotedString());
      assertEquals(0, node1.getSideEffectFlags());
      assertEquals(true, node1.hasOneChild());
      assertEquals(false, node1.isDo());
      assertEquals(false, node1.isFromExterns());
      assertEquals(false, node1.isComma());
      assertEquals(false, node1.isEmpty());
      assertEquals(false, node1.isAdd());
      assertEquals(false, node1.isGetterDef());
      assertEquals(false, node1.isDefaultCase());
      assertEquals(false, node1.isString());
      assertEquals(false, node1.isGetElem());
      assertEquals(false, node1.isOr());
      assertEquals(true, node1.hasChildren());
      assertEquals(true, node1.isSyntheticBlock());
      assertEquals(false, node1.isCatch());
      assertEquals(false, node1.isNumber());
      assertEquals(false, node1.isCase());
      assertEquals(false, node1.isFalse());
      assertEquals(false, node1.isRegExp());
      assertEquals(true, node1.isScript());
      assertEquals(false, node1.isLocalResultCall());
      assertEquals(false, node1.isFunction());
      assertEquals(false, node1.isName());
      assertEquals(false, node1.isVoid());
      assertEquals(false, node1.isExprResult());
      assertEquals(4096, node1.getSourcePosition());
      assertEquals(false, node1.isParamList());
      assertEquals(false, node1.isReturn());
      assertEquals(false, node1.isAnd());
      assertEquals(false, node1.isArrayLit());
      assertNotSame(node1, node0);
      assertNotNull(node1);
      
      TypedScopeCreator typedScopeCreator0 = new TypedScopeCreator(compiler0);
      assertEquals(0.0, printStreamErrorManager0.getTypedPercent(), 0.01D);
      assertEquals(0, printStreamErrorManager0.getErrorCount());
      assertEquals(0, printStreamErrorManager0.getWarningCount());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(false, compiler0.hasErrors());
      assertNotNull(typedScopeCreator0);
      
      int int0 = 118;
      node1.setType(int0);
      assertFalse(node1.equals((Object)node0));
      assertEquals(0.0, printStreamErrorManager0.getTypedPercent(), 0.01D);
      assertEquals(0, printStreamErrorManager0.getErrorCount());
      assertEquals(0, printStreamErrorManager0.getWarningCount());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(false, node1.isHook());
      assertEquals("JSC_LED+=ON_NOG_qBJECT", node1.getSourceFileName());
      assertEquals(false, node1.isThrow());
      assertEquals(false, node1.isNoSideEffectsCall());
      assertEquals(false, node1.isSetterDef());
      assertEquals(false, node1.isBlock());
      assertEquals(false, node1.isThis());
      assertEquals(false, node1.isAssign());
      assertEquals(1, node1.getChildCount());
      assertEquals(false, node1.isUnscopedQualifiedName());
      assertEquals(1, node1.getLineno());
      assertEquals(false, node1.isOptionalArg());
      assertEquals(false, node1.isTrue());
      assertEquals(false, node1.isObjectLit());
      assertEquals(false, node1.isNull());
      assertEquals(0, node1.getLength());
      assertEquals(false, node1.isQualifiedName());
      assertEquals(false, node1.isSwitch());
      assertEquals(0, node1.getCharno());
      assertEquals(false, node1.isCall());
      assertEquals(false, node1.isOnlyModifiesThisCall());
      assertEquals(false, node1.isInc());
      assertEquals(false, node1.wasEmptyNode());
      assertEquals(false, node1.isIf());
      assertEquals(false, node1.isNew());
      assertEquals(false, node1.isDec());
      assertEquals(false, node1.isGetProp());
      assertEquals(false, node1.isLabelName());
      assertEquals(false, node1.isNot());
      assertEquals(118, node1.getType());
      assertEquals(false, node1.isFor());
      assertEquals(false, node1.isTry());
      assertEquals(false, node1.isVarArgs());
      assertEquals(false, node1.hasMoreThanOneChild());
      assertEquals(false, node1.isLabel());
      assertEquals(false, node1.isQuotedString());
      assertEquals(0, node1.getSideEffectFlags());
      assertEquals(true, node1.hasOneChild());
      assertEquals(false, node1.isDo());
      assertEquals(true, node1.isVar());
      assertEquals(false, node1.isFromExterns());
      assertEquals(false, node1.isComma());
      assertEquals(false, node1.isEmpty());
      assertEquals(false, node1.isAdd());
      assertEquals(false, node1.isGetterDef());
      assertEquals(false, node1.isDefaultCase());
      assertEquals(false, node1.isString());
      assertEquals(false, node1.isGetElem());
      assertEquals(false, node1.isOr());
      assertEquals(true, node1.hasChildren());
      assertEquals(true, node1.isSyntheticBlock());
      assertEquals(false, node1.isCatch());
      assertEquals(false, node1.isNumber());
      assertEquals(false, node1.isCase());
      assertEquals(false, node1.isFalse());
      assertEquals(false, node1.isRegExp());
      assertEquals(false, node1.isLocalResultCall());
      assertEquals(false, node1.isFunction());
      assertEquals(false, node1.isName());
      assertEquals(false, node1.isVoid());
      assertEquals(false, node1.isExprResult());
      assertEquals(4096, node1.getSourcePosition());
      assertEquals(false, node1.isParamList());
      assertEquals(false, node1.isReturn());
      assertEquals(false, node1.isAnd());
      assertEquals(false, node1.isArrayLit());
      assertEquals(false, node1.isScript());
      assertNotSame(node1, node0);
      
      node1.addChildrenToFront(node0);
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node0));
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isVarArgs());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isOr());
      assertEquals(" [testcode] ", node0.getSourceFileName());
      assertEquals(true, node0.isScript());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isThrow());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isString());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isFalse());
      assertEquals(4096, node0.getSourcePosition());
      assertEquals(true, node0.hasChildren());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(1, node0.getLineno());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isLabel());
      assertEquals(true, node0.isSyntheticBlock());
      assertEquals(0, node0.getCharno());
      assertEquals(1, node0.getChildCount());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isIf());
      assertEquals(true, node0.hasOneChild());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isGetProp());
      assertEquals(132, node0.getType());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isArrayLit());
      assertEquals(0.0, printStreamErrorManager0.getTypedPercent(), 0.01D);
      assertEquals(0, printStreamErrorManager0.getErrorCount());
      assertEquals(0, printStreamErrorManager0.getWarningCount());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(false, node1.isHook());
      assertEquals("JSC_LED+=ON_NOG_qBJECT", node1.getSourceFileName());
      assertEquals(false, node1.isThrow());
      assertEquals(false, node1.isNoSideEffectsCall());
      assertEquals(false, node1.isSetterDef());
      assertEquals(false, node1.isBlock());
      assertEquals(false, node1.isThis());
      assertEquals(false, node1.isAssign());
      assertEquals(false, node1.isUnscopedQualifiedName());
      assertEquals(1, node1.getLineno());
      assertEquals(false, node1.isOptionalArg());
      assertEquals(false, node1.isTrue());
      assertEquals(false, node1.isObjectLit());
      assertEquals(false, node1.isNull());
      assertEquals(0, node1.getLength());
      assertEquals(false, node1.isQualifiedName());
      assertEquals(false, node1.isSwitch());
      assertEquals(0, node1.getCharno());
      assertEquals(false, node1.isCall());
      assertEquals(false, node1.isOnlyModifiesThisCall());
      assertEquals(false, node1.isInc());
      assertEquals(false, node1.wasEmptyNode());
      assertEquals(false, node1.isIf());
      assertEquals(false, node1.isNew());
      assertEquals(false, node1.isDec());
      assertEquals(false, node1.isGetProp());
      assertEquals(false, node1.isLabelName());
      assertEquals(2, node1.getChildCount());
      assertEquals(false, node1.isNot());
      assertEquals(118, node1.getType());
      assertEquals(false, node1.isFor());
      assertEquals(false, node1.isTry());
      assertEquals(false, node1.isVarArgs());
      assertEquals(false, node1.isLabel());
      assertEquals(false, node1.isQuotedString());
      assertEquals(0, node1.getSideEffectFlags());
      assertEquals(false, node1.isDo());
      assertEquals(true, node1.isVar());
      assertEquals(false, node1.isFromExterns());
      assertEquals(false, node1.isComma());
      assertEquals(false, node1.isEmpty());
      assertEquals(false, node1.isAdd());
      assertEquals(false, node1.isGetterDef());
      assertEquals(false, node1.isDefaultCase());
      assertEquals(false, node1.isString());
      assertEquals(false, node1.isGetElem());
      assertEquals(false, node1.isOr());
      assertEquals(true, node1.hasChildren());
      assertEquals(true, node1.isSyntheticBlock());
      assertEquals(false, node1.isCatch());
      assertEquals(false, node1.isNumber());
      assertEquals(false, node1.isCase());
      assertEquals(false, node1.isFalse());
      assertEquals(false, node1.isRegExp());
      assertEquals(false, node1.isLocalResultCall());
      assertEquals(false, node1.isFunction());
      assertEquals(false, node1.isName());
      assertEquals(false, node1.isVoid());
      assertEquals(false, node1.isExprResult());
      assertEquals(4096, node1.getSourcePosition());
      assertEquals(false, node1.hasOneChild());
      assertEquals(true, node1.hasMoreThanOneChild());
      assertEquals(false, node1.isParamList());
      assertEquals(false, node1.isReturn());
      assertEquals(false, node1.isAnd());
      assertEquals(false, node1.isArrayLit());
      assertEquals(false, node1.isScript());
      assertNotSame(node0, node1);
      assertNotSame(node1, node0);
      
      Scope scope0 = null;
      // Undeclared exception!
      try {
        Scope scope1 = typedScopeCreator0.createScope(node1, scope0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // INTERNAL COMPILER ERROR.
         // Please report this problem.
         // null
         //   Node(VAR):  [testcode] :1:0
         // JSC_LED+=ON_NOG_qBJECT
         //   Parent: NULL
         //
      }
  }

  @Test
  public void test2()  throws Throwable  {
      PrintStream printStream0 = null;
      PrintStreamErrorManager printStreamErrorManager0 = new PrintStreamErrorManager(printStream0);
      assertEquals(0.0, printStreamErrorManager0.getTypedPercent(), 0.01D);
      assertEquals(0, printStreamErrorManager0.getErrorCount());
      assertEquals(0, printStreamErrorManager0.getWarningCount());
      assertNotNull(printStreamErrorManager0);
      
      Compiler compiler0 = new Compiler((ErrorManager) printStreamErrorManager0);
      assertEquals(0.0, printStreamErrorManager0.getTypedPercent(), 0.01D);
      assertEquals(0, printStreamErrorManager0.getErrorCount());
      assertEquals(0, printStreamErrorManager0.getWarningCount());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(0, compiler0.getWarningCount());
      assertNotNull(compiler0);
      
      String string0 = "JSC_ES=ON_NON_BECT";
      Node node0 = compiler0.parseTestCode(string0);
      assertEquals(" [testcode] ", node0.getSourceFileName());
      assertEquals(0, node0.getCharno());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isFor());
      assertEquals(true, node0.isSyntheticBlock());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(4096, node0.getSourcePosition());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(1, node0.getLineno());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isString());
      assertEquals(false, node0.isVar());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isCall());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isSwitch());
      assertEquals(1, node0.getChildCount());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(true, node0.isScript());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isVarArgs());
      assertEquals(true, node0.hasOneChild());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isNot());
      assertEquals(true, node0.hasChildren());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(132, node0.getType());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isAnd());
      assertEquals(0.0, printStreamErrorManager0.getTypedPercent(), 0.01D);
      assertEquals(0, printStreamErrorManager0.getErrorCount());
      assertEquals(0, printStreamErrorManager0.getWarningCount());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertNotNull(node0);
      
      String string1 = ";bKt.rs";
      assertNotSame(string1, string0);
      
      Node node1 = compiler0.parseSyntheticCode(string0, string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(node1.equals((Object)node0));
      assertFalse(string0.equals((Object)string1));
      assertEquals(0.0, printStreamErrorManager0.getTypedPercent(), 0.01D);
      assertEquals(0, printStreamErrorManager0.getErrorCount());
      assertEquals(0, printStreamErrorManager0.getWarningCount());
      assertEquals(0, node1.getSideEffectFlags());
      assertEquals(false, node1.isOnlyModifiesThisCall());
      assertEquals(false, node1.isEmpty());
      assertEquals(false, node1.isReturn());
      assertEquals(false, node1.isVarArgs());
      assertEquals(false, node1.isHook());
      assertEquals(false, node1.isLocalResultCall());
      assertEquals(false, node1.isParamList());
      assertEquals(false, node1.isNumber());
      assertEquals(false, node1.isDec());
      assertEquals(false, node1.isDefaultCase());
      assertEquals(false, node1.isNot());
      assertEquals(false, node1.isAdd());
      assertEquals(false, node1.isThis());
      assertEquals(false, node1.isSetterDef());
      assertEquals(4096, node1.getSourcePosition());
      assertEquals(false, node1.isRegExp());
      assertEquals(true, node1.isScript());
      assertEquals(false, node1.hasOneChild());
      assertEquals(false, node1.isVoid());
      assertEquals(1, node1.getLineno());
      assertEquals(false, node1.isBlock());
      assertEquals(false, node1.isAnd());
      assertEquals(true, node1.isSyntheticBlock());
      assertEquals(false, node1.isString());
      assertEquals(false, node1.isAssign());
      assertEquals(false, node1.isOptionalArg());
      assertEquals(false, node1.isThrow());
      assertEquals(false, node1.isVar());
      assertEquals(2, node1.getChildCount());
      assertEquals(false, node1.isFunction());
      assertEquals(false, node1.isGetProp());
      assertEquals(false, node1.isNoSideEffectsCall());
      assertEquals(false, node1.isCall());
      assertEquals(false, node1.isIf());
      assertEquals(0, node1.getLength());
      assertEquals(false, node1.isName());
      assertEquals(false, node1.isQuotedString());
      assertEquals(false, node1.isSwitch());
      assertEquals("JSC_ES=ON_NON_BECT", node1.getSourceFileName());
      assertEquals(false, node1.isNew());
      assertEquals(false, node1.isExprResult());
      assertEquals(false, node1.wasEmptyNode());
      assertEquals(false, node1.isArrayLit());
      assertEquals(false, node1.isObjectLit());
      assertEquals(0, node1.getCharno());
      assertEquals(false, node1.isInc());
      assertEquals(false, node1.isCatch());
      assertEquals(false, node1.isQualifiedName());
      assertEquals(true, node1.hasMoreThanOneChild());
      assertEquals(false, node1.isFalse());
      assertEquals(false, node1.isFromExterns());
      assertEquals(false, node1.isCase());
      assertEquals(true, node1.hasChildren());
      assertEquals(false, node1.isUnscopedQualifiedName());
      assertEquals(false, node1.isTrue());
      assertEquals(false, node1.isDo());
      assertEquals(false, node1.isGetterDef());
      assertEquals(false, node1.isGetElem());
      assertEquals(false, node1.isOr());
      assertEquals(false, node1.isLabelName());
      assertEquals(false, node1.isLabel());
      assertEquals(false, node1.isComma());
      assertEquals(false, node1.isFor());
      assertEquals(false, node1.isNull());
      assertEquals(false, node1.isTry());
      assertEquals(132, node1.getType());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertNotSame(string1, string0);
      assertNotSame(node1, node0);
      assertNotSame(string0, string1);
      assertNotNull(node1);
      
      TypedScopeCreator typedScopeCreator0 = new TypedScopeCreator(compiler0);
      assertEquals(0.0, printStreamErrorManager0.getTypedPercent(), 0.01D);
      assertEquals(0, printStreamErrorManager0.getErrorCount());
      assertEquals(0, printStreamErrorManager0.getWarningCount());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertNotNull(typedScopeCreator0);
      
      Scope scope0 = null;
      Scope scope1 = typedScopeCreator0.createScope(node0, scope0);
      assertFalse(node0.equals((Object)node1));
      assertFalse(string0.equals((Object)string1));
      assertEquals(" [testcode] ", node0.getSourceFileName());
      assertEquals(0, node0.getCharno());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isFor());
      assertEquals(true, node0.isSyntheticBlock());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(4096, node0.getSourcePosition());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(1, node0.getLineno());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isString());
      assertEquals(false, node0.isVar());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isCall());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isSwitch());
      assertEquals(1, node0.getChildCount());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(true, node0.isScript());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isVarArgs());
      assertEquals(true, node0.hasOneChild());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isNot());
      assertEquals(true, node0.hasChildren());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(132, node0.getType());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isAnd());
      assertEquals(32, scope1.getVarCount());
      assertEquals(true, scope1.isGlobal());
      assertEquals(false, scope1.isLocal());
      assertEquals(0.0, printStreamErrorManager0.getTypedPercent(), 0.01D);
      assertEquals(0, printStreamErrorManager0.getErrorCount());
      assertEquals(0, printStreamErrorManager0.getWarningCount());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertNotSame(node0, node1);
      assertNotSame(string0, string1);
      assertNotNull(scope1);
      
      Scope scope2 = typedScopeCreator0.createScope(node1, scope1);
      assertFalse(scope2.equals((Object)scope1));
      assertFalse(node0.equals((Object)node1));
      assertFalse(string1.equals((Object)string0));
      assertFalse(scope1.equals((Object)scope2));
      assertFalse(node1.equals((Object)node0));
      assertFalse(string0.equals((Object)string1));
      assertEquals(false, scope2.isGlobal());
      assertEquals(1, scope2.getVarCount());
      assertEquals(true, scope2.isLocal());
      assertEquals(" [testcode] ", node0.getSourceFileName());
      assertEquals(0, node0.getCharno());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isFor());
      assertEquals(true, node0.isSyntheticBlock());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(4096, node0.getSourcePosition());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(1, node0.getLineno());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isString());
      assertEquals(false, node0.isVar());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isCall());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isSwitch());
      assertEquals(1, node0.getChildCount());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(true, node0.isScript());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isVarArgs());
      assertEquals(true, node0.hasOneChild());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isNot());
      assertEquals(true, node0.hasChildren());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(132, node0.getType());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isAnd());
      assertEquals(32, scope1.getVarCount());
      assertEquals(true, scope1.isGlobal());
      assertEquals(false, scope1.isLocal());
      assertEquals(0.0, printStreamErrorManager0.getTypedPercent(), 0.01D);
      assertEquals(0, printStreamErrorManager0.getErrorCount());
      assertEquals(0, printStreamErrorManager0.getWarningCount());
      assertEquals(0, node1.getSideEffectFlags());
      assertEquals(false, node1.isOnlyModifiesThisCall());
      assertEquals(false, node1.isEmpty());
      assertEquals(false, node1.isReturn());
      assertEquals(false, node1.isVarArgs());
      assertEquals(false, node1.isHook());
      assertEquals(false, node1.isLocalResultCall());
      assertEquals(false, node1.isParamList());
      assertEquals(false, node1.isNumber());
      assertEquals(false, node1.isDec());
      assertEquals(false, node1.isDefaultCase());
      assertEquals(false, node1.isNot());
      assertEquals(false, node1.isAdd());
      assertEquals(false, node1.isThis());
      assertEquals(false, node1.isSetterDef());
      assertEquals(4096, node1.getSourcePosition());
      assertEquals(false, node1.isRegExp());
      assertEquals(true, node1.isScript());
      assertEquals(false, node1.hasOneChild());
      assertEquals(false, node1.isVoid());
      assertEquals(1, node1.getLineno());
      assertEquals(false, node1.isBlock());
      assertEquals(false, node1.isAnd());
      assertEquals(true, node1.isSyntheticBlock());
      assertEquals(false, node1.isString());
      assertEquals(false, node1.isAssign());
      assertEquals(false, node1.isOptionalArg());
      assertEquals(false, node1.isThrow());
      assertEquals(false, node1.isVar());
      assertEquals(2, node1.getChildCount());
      assertEquals(false, node1.isFunction());
      assertEquals(false, node1.isGetProp());
      assertEquals(false, node1.isNoSideEffectsCall());
      assertEquals(false, node1.isCall());
      assertEquals(false, node1.isIf());
      assertEquals(0, node1.getLength());
      assertEquals(false, node1.isName());
      assertEquals(false, node1.isQuotedString());
      assertEquals(false, node1.isSwitch());
      assertEquals("JSC_ES=ON_NON_BECT", node1.getSourceFileName());
      assertEquals(false, node1.isNew());
      assertEquals(false, node1.isExprResult());
      assertEquals(false, node1.wasEmptyNode());
      assertEquals(false, node1.isArrayLit());
      assertEquals(false, node1.isObjectLit());
      assertEquals(0, node1.getCharno());
      assertEquals(false, node1.isInc());
      assertEquals(false, node1.isCatch());
      assertEquals(false, node1.isQualifiedName());
      assertEquals(true, node1.hasMoreThanOneChild());
      assertEquals(false, node1.isFalse());
      assertEquals(false, node1.isFromExterns());
      assertEquals(false, node1.isCase());
      assertEquals(true, node1.hasChildren());
      assertEquals(false, node1.isUnscopedQualifiedName());
      assertEquals(false, node1.isTrue());
      assertEquals(false, node1.isDo());
      assertEquals(false, node1.isGetterDef());
      assertEquals(false, node1.isGetElem());
      assertEquals(false, node1.isOr());
      assertEquals(false, node1.isLabelName());
      assertEquals(false, node1.isLabel());
      assertEquals(false, node1.isComma());
      assertEquals(false, node1.isFor());
      assertEquals(false, node1.isNull());
      assertEquals(false, node1.isTry());
      assertEquals(132, node1.getType());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertNotSame(scope2, scope1);
      assertNotSame(node0, node1);
      assertNotSame(string1, string0);
      assertNotSame(scope1, scope2);
      assertNotSame(node1, node0);
      assertNotSame(string0, string1);
      assertNotNull(scope2);
  }

  @Test
  public void test3()  throws Throwable  {
      PrintStream printStream0 = null;
      PrintStreamErrorManager printStreamErrorManager0 = new PrintStreamErrorManager(printStream0);
      assertEquals(0, printStreamErrorManager0.getWarningCount());
      assertEquals(0.0, printStreamErrorManager0.getTypedPercent(), 0.01D);
      assertEquals(0, printStreamErrorManager0.getErrorCount());
      assertNotNull(printStreamErrorManager0);
      
      Compiler compiler0 = new Compiler((ErrorManager) printStreamErrorManager0);
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(0, printStreamErrorManager0.getWarningCount());
      assertEquals(0.0, printStreamErrorManager0.getTypedPercent(), 0.01D);
      assertEquals(0, printStreamErrorManager0.getErrorCount());
      assertNotNull(compiler0);
      
      String string0 = "\\18/\\6bnW";
      String string1 = "{0}\nfound   : {1}\nrequired: {2}";
      assertNotSame(string1, string0);
      
      Node node0 = compiler0.parseSyntheticCode(string0, string1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(4096, node0.getSourcePosition());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isObjectLit());
      assertEquals(132, node0.getType());
      assertEquals(true, node0.isScript());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isString());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isRegExp());
      assertEquals(3, node0.getChildCount());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isReturn());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isParamList());
      assertEquals("\\18/\\6bnW", node0.getSourceFileName());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isTry());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isLabelName());
      assertEquals(1, node0.getLineno());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isEmpty());
      assertEquals(true, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isHook());
      assertEquals(true, node0.hasChildren());
      assertEquals(0, node0.getCharno());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isArrayLit());
      assertEquals(true, node0.isSyntheticBlock());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(0, printStreamErrorManager0.getWarningCount());
      assertEquals(0.0, printStreamErrorManager0.getTypedPercent(), 0.01D);
      assertEquals(0, printStreamErrorManager0.getErrorCount());
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertNotNull(node0);
      
      ClosureCodingConvention closureCodingConvention0 = (ClosureCodingConvention)compiler0.getCodingConvention();
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals("goog.abstractMethod", closureCodingConvention0.getAbstractMethodName());
      assertEquals("goog.exportSymbol", closureCodingConvention0.getExportSymbolFunction());
      assertEquals("goog.global", closureCodingConvention0.getGlobalObject());
      assertEquals("goog.exportProperty", closureCodingConvention0.getExportPropertyFunction());
      assertEquals(0, printStreamErrorManager0.getWarningCount());
      assertEquals(0.0, printStreamErrorManager0.getTypedPercent(), 0.01D);
      assertEquals(0, printStreamErrorManager0.getErrorCount());
      assertNotNull(closureCodingConvention0);
      
      TypedScopeCreator typedScopeCreator0 = new TypedScopeCreator(compiler0, closureCodingConvention0);
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals("goog.abstractMethod", closureCodingConvention0.getAbstractMethodName());
      assertEquals("goog.exportSymbol", closureCodingConvention0.getExportSymbolFunction());
      assertEquals("goog.global", closureCodingConvention0.getGlobalObject());
      assertEquals("goog.exportProperty", closureCodingConvention0.getExportPropertyFunction());
      assertEquals(0, printStreamErrorManager0.getWarningCount());
      assertEquals(0.0, printStreamErrorManager0.getTypedPercent(), 0.01D);
      assertEquals(0, printStreamErrorManager0.getErrorCount());
      assertNotNull(typedScopeCreator0);
      
      Scope scope0 = null;
      Scope scope1 = typedScopeCreator0.createScope(node0, scope0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals("goog.abstractMethod", closureCodingConvention0.getAbstractMethodName());
      assertEquals("goog.exportSymbol", closureCodingConvention0.getExportSymbolFunction());
      assertEquals("goog.global", closureCodingConvention0.getGlobalObject());
      assertEquals("goog.exportProperty", closureCodingConvention0.getExportPropertyFunction());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(4096, node0.getSourcePosition());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isObjectLit());
      assertEquals(132, node0.getType());
      assertEquals(true, node0.isScript());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isString());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isRegExp());
      assertEquals(3, node0.getChildCount());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isReturn());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isParamList());
      assertEquals("\\18/\\6bnW", node0.getSourceFileName());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isTry());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isLabelName());
      assertEquals(1, node0.getLineno());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isEmpty());
      assertEquals(true, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isHook());
      assertEquals(true, node0.hasChildren());
      assertEquals(0, node0.getCharno());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isArrayLit());
      assertEquals(true, node0.isSyntheticBlock());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(true, scope1.isGlobal());
      assertEquals(false, scope1.isLocal());
      assertEquals(32, scope1.getVarCount());
      assertEquals(0, printStreamErrorManager0.getWarningCount());
      assertEquals(0.0, printStreamErrorManager0.getTypedPercent(), 0.01D);
      assertEquals(0, printStreamErrorManager0.getErrorCount());
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertNotNull(scope1);
  }

  @Test
  public void test4()  throws Throwable  {
      PrintStream printStream0 = null;
      PrintStreamErrorManager printStreamErrorManager0 = new PrintStreamErrorManager(printStream0);
      assertEquals(0, printStreamErrorManager0.getWarningCount());
      assertEquals(0.0, printStreamErrorManager0.getTypedPercent(), 0.01D);
      assertEquals(0, printStreamErrorManager0.getErrorCount());
      assertNotNull(printStreamErrorManager0);
      
      Compiler compiler0 = new Compiler((ErrorManager) printStreamErrorManager0);
      assertEquals(0, printStreamErrorManager0.getWarningCount());
      assertEquals(0.0, printStreamErrorManager0.getTypedPercent(), 0.01D);
      assertEquals(0, printStreamErrorManager0.getErrorCount());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(0, compiler0.getErrorCount());
      assertNotNull(compiler0);
      
      String string0 = "JSC_LED+=ON_NOG_qBJECT";
      Node node0 = compiler0.parseTestCode(string0);
      assertEquals(0, printStreamErrorManager0.getWarningCount());
      assertEquals(0.0, printStreamErrorManager0.getTypedPercent(), 0.01D);
      assertEquals(0, printStreamErrorManager0.getErrorCount());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(" [testcode] ", node0.getSourceFileName());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isArrayLit());
      assertEquals(true, node0.hasChildren());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isNumber());
      assertEquals(132, node0.getType());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isDo());
      assertEquals(1, node0.getChildCount());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isString());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isNull());
      assertEquals(0, node0.getLength());
      assertEquals(true, node0.hasOneChild());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isGetElem());
      assertEquals(true, node0.isSyntheticBlock());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isEmpty());
      assertEquals(0, node0.getCharno());
      assertEquals(1, node0.getLineno());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isBlock());
      assertEquals(true, node0.isScript());
      assertEquals(false, node0.isCatch());
      assertEquals(4096, node0.getSourcePosition());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isIf());
      assertNotNull(node0);
      
      TypedScopeCreator typedScopeCreator0 = new TypedScopeCreator(compiler0);
      assertEquals(0, printStreamErrorManager0.getWarningCount());
      assertEquals(0.0, printStreamErrorManager0.getTypedPercent(), 0.01D);
      assertEquals(0, printStreamErrorManager0.getErrorCount());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.hasErrors());
      assertNotNull(typedScopeCreator0);
      
      int int0 = 118;
      node0.setType(int0);
      assertEquals(0, printStreamErrorManager0.getWarningCount());
      assertEquals(0.0, printStreamErrorManager0.getTypedPercent(), 0.01D);
      assertEquals(0, printStreamErrorManager0.getErrorCount());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isScript());
      assertEquals(true, node0.isVar());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(" [testcode] ", node0.getSourceFileName());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isSetterDef());
      assertEquals(118, node0.getType());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isArrayLit());
      assertEquals(true, node0.hasChildren());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isDo());
      assertEquals(1, node0.getChildCount());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isString());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isNull());
      assertEquals(0, node0.getLength());
      assertEquals(true, node0.hasOneChild());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isGetElem());
      assertEquals(true, node0.isSyntheticBlock());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isEmpty());
      assertEquals(0, node0.getCharno());
      assertEquals(1, node0.getLineno());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isCatch());
      assertEquals(4096, node0.getSourcePosition());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isIf());
      
      Scope scope0 = null;
      // Undeclared exception!
      try {
        Scope scope1 = typedScopeCreator0.createScope(node0, scope0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // INTERNAL COMPILER ERROR.
         // Please report this problem.
         // null
         //
      }
  }

  @Test
  public void test5()  throws Throwable  {
      PrintStream printStream0 = null;
      PrintStreamErrorManager printStreamErrorManager0 = new PrintStreamErrorManager(printStream0);
      assertEquals(0.0, printStreamErrorManager0.getTypedPercent(), 0.01D);
      assertEquals(0, printStreamErrorManager0.getWarningCount());
      assertEquals(0, printStreamErrorManager0.getErrorCount());
      assertNotNull(printStreamErrorManager0);
      
      Compiler compiler0 = new Compiler((ErrorManager) printStreamErrorManager0);
      assertEquals(0.0, printStreamErrorManager0.getTypedPercent(), 0.01D);
      assertEquals(0, printStreamErrorManager0.getWarningCount());
      assertEquals(0, printStreamErrorManager0.getErrorCount());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(0, compiler0.getWarningCount());
      assertNotNull(compiler0);
      
      String string0 = "\\18/\\6bnW";
      Node node0 = compiler0.parseSyntheticCode(string0, string0);
      assertEquals(1, printStreamErrorManager0.getErrorCount());
      assertEquals(0.0, printStreamErrorManager0.getTypedPercent(), 0.01D);
      assertEquals(0, printStreamErrorManager0.getWarningCount());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(1, compiler0.getErrorCount());
      assertEquals(true, compiler0.hasErrors());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isString());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isCatch());
      assertEquals(132, node0.getType());
      assertEquals(true, node0.isScript());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isTry());
      assertEquals("\\18/\\6bnW", node0.getSourceFileName());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isAssign());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isNew());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isDo());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isOptionalArg());
      assertNotNull(node0);
      
      TypedScopeCreator typedScopeCreator0 = new TypedScopeCreator(compiler0);
      assertEquals(1, printStreamErrorManager0.getErrorCount());
      assertEquals(0.0, printStreamErrorManager0.getTypedPercent(), 0.01D);
      assertEquals(0, printStreamErrorManager0.getWarningCount());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(1, compiler0.getErrorCount());
      assertEquals(true, compiler0.hasErrors());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertNotNull(typedScopeCreator0);
      
      Scope scope0 = typedScopeCreator0.createInitialScope(node0);
      assertEquals(32, scope0.getVarCount());
      assertEquals(true, scope0.isGlobal());
      assertEquals(false, scope0.isLocal());
      assertEquals(1, printStreamErrorManager0.getErrorCount());
      assertEquals(0.0, printStreamErrorManager0.getTypedPercent(), 0.01D);
      assertEquals(0, printStreamErrorManager0.getWarningCount());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(1, compiler0.getErrorCount());
      assertEquals(true, compiler0.hasErrors());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isString());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isCatch());
      assertEquals(132, node0.getType());
      assertEquals(true, node0.isScript());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isTry());
      assertEquals("\\18/\\6bnW", node0.getSourceFileName());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isAssign());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isNew());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isDo());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isOptionalArg());
      assertNotNull(scope0);
      
      typedScopeCreator0.patchGlobalScope(scope0, node0);
      assertEquals(32, scope0.getVarCount());
      assertEquals(true, scope0.isGlobal());
      assertEquals(false, scope0.isLocal());
      assertEquals(1, printStreamErrorManager0.getErrorCount());
      assertEquals(0.0, printStreamErrorManager0.getTypedPercent(), 0.01D);
      assertEquals(0, printStreamErrorManager0.getWarningCount());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(1, compiler0.getErrorCount());
      assertEquals(true, compiler0.hasErrors());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isString());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isCatch());
      assertEquals(132, node0.getType());
      assertEquals(true, node0.isScript());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isTry());
      assertEquals("\\18/\\6bnW", node0.getSourceFileName());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isAssign());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isNew());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isDo());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isOptionalArg());
  }

  @Test
  public void test6()  throws Throwable  {
      PrintStream printStream0 = null;
      PrintStreamErrorManager printStreamErrorManager0 = new PrintStreamErrorManager(printStream0);
      assertEquals(0, printStreamErrorManager0.getErrorCount());
      assertEquals(0.0, printStreamErrorManager0.getTypedPercent(), 0.01D);
      assertEquals(0, printStreamErrorManager0.getWarningCount());
      assertNotNull(printStreamErrorManager0);
      
      Compiler compiler0 = new Compiler((ErrorManager) printStreamErrorManager0);
      assertEquals(0, printStreamErrorManager0.getErrorCount());
      assertEquals(0.0, printStreamErrorManager0.getTypedPercent(), 0.01D);
      assertEquals(0, printStreamErrorManager0.getWarningCount());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(0, compiler0.getErrorCount());
      assertNotNull(compiler0);
      
      String string0 = "JSC_LED+=ON_NOG_qBJECT";
      Node node0 = compiler0.parseTestCode(string0);
      assertEquals(0, printStreamErrorManager0.getErrorCount());
      assertEquals(0.0, printStreamErrorManager0.getTypedPercent(), 0.01D);
      assertEquals(0, printStreamErrorManager0.getWarningCount());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isString());
      assertEquals(0, node0.getLength());
      assertEquals(1, node0.getChildCount());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isEmpty());
      assertEquals(true, node0.hasOneChild());
      assertEquals(false, node0.isTrue());
      assertEquals(4096, node0.getSourcePosition());
      assertEquals(false, node0.isNew());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isCase());
      assertEquals(" [testcode] ", node0.getSourceFileName());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isAnd());
      assertEquals(true, node0.hasChildren());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isFor());
      assertEquals(1, node0.getLineno());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isCatch());
      assertEquals(0, node0.getCharno());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isGetterDef());
      assertEquals(true, node0.isSyntheticBlock());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isDec());
      assertEquals(true, node0.isScript());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(132, node0.getType());
      assertEquals(false, node0.isParamList());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(0, compiler0.getErrorCount());
      assertNotNull(node0);
      
      TypedScopeCreator typedScopeCreator0 = new TypedScopeCreator(compiler0);
      assertEquals(0, printStreamErrorManager0.getErrorCount());
      assertEquals(0.0, printStreamErrorManager0.getTypedPercent(), 0.01D);
      assertEquals(0, printStreamErrorManager0.getWarningCount());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(0, compiler0.getErrorCount());
      assertNotNull(typedScopeCreator0);
      
      int int0 = 37;
      node0.setType(int0);
      assertEquals(0, printStreamErrorManager0.getErrorCount());
      assertEquals(0.0, printStreamErrorManager0.getTypedPercent(), 0.01D);
      assertEquals(0, printStreamErrorManager0.getWarningCount());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isScript());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isString());
      assertEquals(0, node0.getLength());
      assertEquals(1, node0.getChildCount());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isEmpty());
      assertEquals(true, node0.hasOneChild());
      assertEquals(false, node0.isTrue());
      assertEquals(4096, node0.getSourcePosition());
      assertEquals(false, node0.isNew());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(37, node0.getType());
      assertEquals(true, node0.isCall());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isCase());
      assertEquals(" [testcode] ", node0.getSourceFileName());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isAnd());
      assertEquals(true, node0.hasChildren());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isFor());
      assertEquals(1, node0.getLineno());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isCatch());
      assertEquals(0, node0.getCharno());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isGetterDef());
      assertEquals(true, node0.isSyntheticBlock());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isParamList());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(0, compiler0.getErrorCount());
      
      Scope scope0 = null;
      Scope scope1 = typedScopeCreator0.createScope(node0, scope0);
      assertEquals(0, printStreamErrorManager0.getErrorCount());
      assertEquals(0.0, printStreamErrorManager0.getTypedPercent(), 0.01D);
      assertEquals(0, printStreamErrorManager0.getWarningCount());
      assertEquals(true, scope1.isGlobal());
      assertEquals(32, scope1.getVarCount());
      assertEquals(false, scope1.isLocal());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isScript());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isString());
      assertEquals(0, node0.getLength());
      assertEquals(1, node0.getChildCount());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isEmpty());
      assertEquals(true, node0.hasOneChild());
      assertEquals(false, node0.isTrue());
      assertEquals(4096, node0.getSourcePosition());
      assertEquals(false, node0.isNew());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(37, node0.getType());
      assertEquals(true, node0.isCall());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isCase());
      assertEquals(" [testcode] ", node0.getSourceFileName());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isAnd());
      assertEquals(true, node0.hasChildren());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isFor());
      assertEquals(1, node0.getLineno());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isCatch());
      assertEquals(0, node0.getCharno());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isGetterDef());
      assertEquals(true, node0.isSyntheticBlock());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isParamList());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(0, compiler0.getErrorCount());
      assertNotNull(scope1);
  }

  @Test
  public void test7()  throws Throwable  {
      PrintStream printStream0 = null;
      PrintStreamErrorManager printStreamErrorManager0 = new PrintStreamErrorManager(printStream0);
      assertEquals(0, printStreamErrorManager0.getWarningCount());
      assertEquals(0, printStreamErrorManager0.getErrorCount());
      assertEquals(0.0, printStreamErrorManager0.getTypedPercent(), 0.01D);
      assertNotNull(printStreamErrorManager0);
      
      Compiler compiler0 = new Compiler((ErrorManager) printStreamErrorManager0);
      assertEquals(0, printStreamErrorManager0.getWarningCount());
      assertEquals(0, printStreamErrorManager0.getErrorCount());
      assertEquals(0.0, printStreamErrorManager0.getTypedPercent(), 0.01D);
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(0, compiler0.getErrorCount());
      assertNotNull(compiler0);
      
      String string0 = "@uVce)E^?,";
      String string1 = "com.google.javtscript.jscomp.PassConf=g$State";
      assertNotSame(string1, string0);
      
      Node node0 = compiler0.parseSyntheticCode(string0, string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertEquals(0, printStreamErrorManager0.getWarningCount());
      assertEquals(0, printStreamErrorManager0.getErrorCount());
      assertEquals(0.0, printStreamErrorManager0.getTypedPercent(), 0.01D);
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isDo());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isGetProp());
      assertEquals(132, node0.getType());
      assertEquals(false, node0.isQuotedString());
      assertEquals(true, node0.isSyntheticBlock());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isTrue());
      assertEquals(4096, node0.getSourcePosition());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isFromExterns());
      assertEquals(true, node0.isScript());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(true, node0.hasOneChild());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(0, node0.getCharno());
      assertEquals(false, node0.isLabel());
      assertEquals(1, node0.getLineno());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isGetElem());
      assertEquals(true, node0.hasChildren());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isString());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isExprResult());
      assertEquals(1, node0.getChildCount());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isName());
      assertEquals("@uVce)E^?,", node0.getSourceFileName());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isAnd());
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertNotNull(node0);
      
      ClosureCodingConvention closureCodingConvention0 = (ClosureCodingConvention)compiler0.getCodingConvention();
      assertEquals("goog.abstractMethod", closureCodingConvention0.getAbstractMethodName());
      assertEquals("goog.exportProperty", closureCodingConvention0.getExportPropertyFunction());
      assertEquals("goog.exportSymbol", closureCodingConvention0.getExportSymbolFunction());
      assertEquals("goog.global", closureCodingConvention0.getGlobalObject());
      assertEquals(0, printStreamErrorManager0.getWarningCount());
      assertEquals(0, printStreamErrorManager0.getErrorCount());
      assertEquals(0.0, printStreamErrorManager0.getTypedPercent(), 0.01D);
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.hasErrors());
      assertNotNull(closureCodingConvention0);
      
      TypedScopeCreator typedScopeCreator0 = new TypedScopeCreator(compiler0, closureCodingConvention0);
      assertEquals("goog.abstractMethod", closureCodingConvention0.getAbstractMethodName());
      assertEquals("goog.exportProperty", closureCodingConvention0.getExportPropertyFunction());
      assertEquals("goog.exportSymbol", closureCodingConvention0.getExportSymbolFunction());
      assertEquals("goog.global", closureCodingConvention0.getGlobalObject());
      assertEquals(0, printStreamErrorManager0.getWarningCount());
      assertEquals(0, printStreamErrorManager0.getErrorCount());
      assertEquals(0.0, printStreamErrorManager0.getTypedPercent(), 0.01D);
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.hasErrors());
      assertNotNull(typedScopeCreator0);
      
      Scope scope0 = null;
      Scope scope1 = typedScopeCreator0.createScope(node0, scope0);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertEquals("goog.abstractMethod", closureCodingConvention0.getAbstractMethodName());
      assertEquals("goog.exportProperty", closureCodingConvention0.getExportPropertyFunction());
      assertEquals("goog.exportSymbol", closureCodingConvention0.getExportSymbolFunction());
      assertEquals("goog.global", closureCodingConvention0.getGlobalObject());
      assertEquals(0, printStreamErrorManager0.getWarningCount());
      assertEquals(0, printStreamErrorManager0.getErrorCount());
      assertEquals(0.0, printStreamErrorManager0.getTypedPercent(), 0.01D);
      assertEquals(32, scope1.getVarCount());
      assertEquals(false, scope1.isLocal());
      assertEquals(true, scope1.isGlobal());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isDo());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isGetProp());
      assertEquals(132, node0.getType());
      assertEquals(false, node0.isQuotedString());
      assertEquals(true, node0.isSyntheticBlock());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isTrue());
      assertEquals(4096, node0.getSourcePosition());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isFromExterns());
      assertEquals(true, node0.isScript());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(true, node0.hasOneChild());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(0, node0.getCharno());
      assertEquals(false, node0.isLabel());
      assertEquals(1, node0.getLineno());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isGetElem());
      assertEquals(true, node0.hasChildren());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isString());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isExprResult());
      assertEquals(1, node0.getChildCount());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isName());
      assertEquals("@uVce)E^?,", node0.getSourceFileName());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isAnd());
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertNotNull(scope1);
  }
}
