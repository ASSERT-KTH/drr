/*
 * This file was automatically generated by EvoSuite
 * Fri Dec 12 07:46:14 GMT 2014
 */

package com.google.javascript.jscomp;

import static org.junit.Assert.*;
import org.junit.Test;
import com.google.common.base.Supplier;
import com.google.javascript.jscomp.Compiler;
import com.google.javascript.jscomp.CompilerOptions;
import com.google.javascript.jscomp.InlineObjectLiterals;
import com.google.javascript.jscomp.JSSourceFile;
import com.google.javascript.jscomp.Result;
import com.google.javascript.jscomp.SourceFile;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;

import org.junit.runner.RunWith;


public class InlineObjectLiteralsEvoSuite_branch_Test  {

  @Test
  public void test0() {}
//   @Test
//   public void test0()  throws Throwable  {
//       Compiler compiler0 = new Compiler();
//       assertNotNull(compiler0);
//       assertEquals(0.0, compiler0.getProgress(), 0.01D);
//       
//       String string0 = "function JSCompiler_returnArg(JSCompiler_returnArg_value) {  return function() {return JSCompiler_returnArg_value}}";
//       SourceFile.Preloaded sourceFile_Preloaded0 = (SourceFile.Preloaded)SourceFile.fromCode(string0, string0);
//       assertNotNull(sourceFile_Preloaded0);
//       assertEquals("function JSCompiler_returnArg(JSCompiler_returnArg_value) {  return function() {return JSCompiler_returnArg_value}}", sourceFile_Preloaded0.toString());
//       assertEquals(false, sourceFile_Preloaded0.isExtern());
//       assertEquals("function JSCompiler_returnArg(JSCompiler_returnArg_value) {  return function() {return JSCompiler_returnArg_value}}", sourceFile_Preloaded0.getName());
//       assertEquals("function JSCompiler_returnArg(JSCompiler_returnArg_value) {  return function() {return JSCompiler_returnArg_value}}", sourceFile_Preloaded0.getOriginalPath());
//       
//       String string1 = "uum";
//       assertNotSame(string1, string0);
//       
//       JSSourceFile jSSourceFile0 = JSSourceFile.fromCode(string1, string0);
//       assertNotSame(string0, string1);
//       assertNotSame(string1, string0);
//       assertNotNull(jSSourceFile0);
//       assertEquals(false, jSSourceFile0.isExtern());
//       assertEquals("uum", jSSourceFile0.getName());
//       assertEquals("uum", jSSourceFile0.toString());
//       assertEquals("uum", jSSourceFile0.getOriginalPath());
//       assertFalse(string0.equals((Object)string1));
//       assertFalse(string1.equals((Object)string0));
//       
//       CompilerOptions compilerOptions0 = compiler0.newCompilerOptions();
//       assertNotNull(compilerOptions0);
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compilerOptions0.getLanguageIn());
//       assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
//       assertEquals(CompilerOptions.TracerMode.OFF, compilerOptions0.getTracerMode());
//       assertEquals(false, compilerOptions0.assumeClosuresOnlyCaptureReferences());
//       assertEquals(CompilerOptions.TweakProcessing.OFF, compilerOptions0.getTweakProcessing());
//       assertEquals(false, compilerOptions0.isExternExportsEnabled());
//       assertNull(compilerOptions0.getLanguageOut());
//       assertEquals(false, compilerOptions0.assumeStrictThis());
//       assertEquals(false, compilerOptions0.getInferTypes());
//       assertEquals(0.0, compiler0.getProgress(), 0.01D);
//       assertFalse(compilerOptions0.crossModuleMethodMotion);
//       assertFalse(compilerOptions0.collapseAnonymousFunctions);
//       assertFalse(compilerOptions0.inlineLocalFunctions);
//       assertFalse(compilerOptions0.reserveRawExports);
//       assertFalse(compilerOptions0.moveFunctionDeclarations);
//       assertFalse(compilerOptions0.checkSymbols);
//       assertFalse(compilerOptions0.checkControlStructures);
//       assertFalse(compilerOptions0.checkTypes);
//       assertFalse(compilerOptions0.markNoSideEffectCalls);
//       assertFalse(compilerOptions0.computeFunctionSideEffects);
//       assertFalse(compilerOptions0.smartNameRemoval);
//       assertFalse(compilerOptions0.lineBreak);
//       assertFalse(compilerOptions0.aliasKeywords);
//       assertFalse(compilerOptions0.ambiguateProperties);
//       assertFalse(compilerOptions0.convertToDottedProperties);
//       assertFalse(compilerOptions0.inlineConstantVars);
//       assertFalse(compilerOptions0.optimizeArgumentsArray);
//       assertFalse(compilerOptions0.crossModuleCodeMotion);
//       assertFalse(compilerOptions0.jqueryPass);
//       assertFalse(compilerOptions0.gatherCssNames);
//       assertFalse(compilerOptions0.collapseProperties);
//       assertFalse(compilerOptions0.coalesceVariableNames);
//       assertFalse(compilerOptions0.inlineFunctions);
//       assertFalse(compilerOptions0.closurePass);
//       assertFalse(compilerOptions0.deadAssignmentElimination);
//       assertFalse(compilerOptions0.aliasExternals);
//       assertFalse(compilerOptions0.removeUnusedVars);
//       assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
//       assertFalse(compilerOptions0.exportTestFunctions);
//       assertFalse(compilerOptions0.ideMode);
//       assertFalse(compilerOptions0.optimizeReturns);
//       assertFalse(compilerOptions0.removeTryCatchFinally);
//       assertFalse(compilerOptions0.collapseVariableDeclarations);
//       assertFalse(compilerOptions0.checkSuspiciousCode);
//       assertFalse(compilerOptions0.optimizeCalls);
//       assertFalse(compilerOptions0.foldConstants);
//       assertFalse(compilerOptions0.flowSensitiveInlineVariables);
//       assertFalse(compilerOptions0.aliasAllStrings);
//       assertFalse(compilerOptions0.devirtualizePrototypeMethods);
//       assertFalse(compilerOptions0.disambiguateProperties);
//       assertFalse(compilerOptions0.preferLineBreakAtEndOfFile);
//       assertFalse(compilerOptions0.markAsCompiled);
//       assertFalse(compilerOptions0.printInputDelimiter);
//       assertFalse(compilerOptions0.optimizeParameters);
//       assertFalse(compilerOptions0.removeDeadCode);
//       assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
//       assertFalse(compilerOptions0.inlineGetters);
//       assertFalse(compilerOptions0.inlineVariables);
//       assertFalse(compilerOptions0.removeUnusedLocalVars);
//       assertFalse(compilerOptions0.recordFunctionInformation);
//       assertFalse(compilerOptions0.prettyPrint);
//       assertFalse(compilerOptions0.generatePseudoNames);
//       assertFalse(compilerOptions0.generateExports);
//       assertFalse(compilerOptions0.rewriteFunctionExpressions);
//       assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
//       assertFalse(compilerOptions0.labelRenaming);
//       
//       Result result0 = compiler0.compile((SourceFile) sourceFile_Preloaded0, (SourceFile) jSSourceFile0, compilerOptions0);
//       assertNotSame(string0, string1);
//       assertNotSame(string1, string0);
//       assertNotNull(result0);
//       assertEquals(false, jSSourceFile0.isExtern());
//       assertEquals("uum", jSSourceFile0.getName());
//       assertEquals("uum", jSSourceFile0.toString());
//       assertEquals("uum", jSSourceFile0.getOriginalPath());
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compilerOptions0.getLanguageIn());
//       assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
//       assertEquals(CompilerOptions.TracerMode.OFF, compilerOptions0.getTracerMode());
//       assertEquals(false, compilerOptions0.assumeClosuresOnlyCaptureReferences());
//       assertEquals(CompilerOptions.TweakProcessing.OFF, compilerOptions0.getTweakProcessing());
//       assertEquals(false, compilerOptions0.isExternExportsEnabled());
//       assertNull(compilerOptions0.getLanguageOut());
//       assertEquals(false, compilerOptions0.assumeStrictThis());
//       assertEquals(false, compilerOptions0.getInferTypes());
//       assertEquals(false, compiler0.isIdeMode());
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
//       assertEquals(1, compiler0.getWarningCount());
//       assertEquals(false, compiler0.hasErrors());
//       assertEquals(0, compiler0.getErrorCount());
//       assertEquals(false, compiler0.isTypeCheckingEnabled());
//       assertEquals(1.0, compiler0.getProgress(), 0.01D);
//       assertEquals(false, compiler0.acceptConstKeyword());
//       assertEquals("function JSCompiler_returnArg(JSCompiler_returnArg_value) {  return function() {return JSCompiler_returnArg_value}}", sourceFile_Preloaded0.toString());
//       assertEquals("function JSCompiler_returnArg(JSCompiler_returnArg_value) {  return function() {return JSCompiler_returnArg_value}}", sourceFile_Preloaded0.getName());
//       assertEquals("function JSCompiler_returnArg(JSCompiler_returnArg_value) {  return function() {return JSCompiler_returnArg_value}}", sourceFile_Preloaded0.getOriginalPath());
//       assertEquals(true, sourceFile_Preloaded0.isExtern());
//       assertFalse(string0.equals((Object)string1));
//       assertFalse(string1.equals((Object)string0));
//       assertFalse(compilerOptions0.crossModuleMethodMotion);
//       assertFalse(compilerOptions0.collapseAnonymousFunctions);
//       assertFalse(compilerOptions0.inlineLocalFunctions);
//       assertFalse(compilerOptions0.reserveRawExports);
//       assertFalse(compilerOptions0.moveFunctionDeclarations);
//       assertFalse(compilerOptions0.checkSymbols);
//       assertFalse(compilerOptions0.checkControlStructures);
//       assertFalse(compilerOptions0.checkTypes);
//       assertFalse(compilerOptions0.markNoSideEffectCalls);
//       assertFalse(compilerOptions0.computeFunctionSideEffects);
//       assertFalse(compilerOptions0.smartNameRemoval);
//       assertFalse(compilerOptions0.lineBreak);
//       assertFalse(compilerOptions0.aliasKeywords);
//       assertFalse(compilerOptions0.ambiguateProperties);
//       assertFalse(compilerOptions0.convertToDottedProperties);
//       assertFalse(compilerOptions0.inlineConstantVars);
//       assertFalse(compilerOptions0.optimizeArgumentsArray);
//       assertFalse(compilerOptions0.crossModuleCodeMotion);
//       assertFalse(compilerOptions0.jqueryPass);
//       assertFalse(compilerOptions0.gatherCssNames);
//       assertFalse(compilerOptions0.collapseProperties);
//       assertFalse(compilerOptions0.coalesceVariableNames);
//       assertFalse(compilerOptions0.inlineFunctions);
//       assertFalse(compilerOptions0.closurePass);
//       assertFalse(compilerOptions0.deadAssignmentElimination);
//       assertFalse(compilerOptions0.aliasExternals);
//       assertFalse(compilerOptions0.removeUnusedVars);
//       assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
//       assertFalse(compilerOptions0.exportTestFunctions);
//       assertFalse(compilerOptions0.ideMode);
//       assertFalse(compilerOptions0.optimizeReturns);
//       assertFalse(compilerOptions0.removeTryCatchFinally);
//       assertFalse(compilerOptions0.collapseVariableDeclarations);
//       assertFalse(compilerOptions0.checkSuspiciousCode);
//       assertFalse(compilerOptions0.optimizeCalls);
//       assertFalse(compilerOptions0.foldConstants);
//       assertFalse(compilerOptions0.flowSensitiveInlineVariables);
//       assertFalse(compilerOptions0.aliasAllStrings);
//       assertFalse(compilerOptions0.devirtualizePrototypeMethods);
//       assertFalse(compilerOptions0.disambiguateProperties);
//       assertFalse(compilerOptions0.preferLineBreakAtEndOfFile);
//       assertFalse(compilerOptions0.markAsCompiled);
//       assertFalse(compilerOptions0.printInputDelimiter);
//       assertFalse(compilerOptions0.optimizeParameters);
//       assertFalse(compilerOptions0.removeDeadCode);
//       assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
//       assertFalse(compilerOptions0.inlineGetters);
//       assertFalse(compilerOptions0.inlineVariables);
//       assertFalse(compilerOptions0.removeUnusedLocalVars);
//       assertFalse(compilerOptions0.recordFunctionInformation);
//       assertFalse(compilerOptions0.prettyPrint);
//       assertFalse(compilerOptions0.generatePseudoNames);
//       assertFalse(compilerOptions0.generateExports);
//       assertFalse(compilerOptions0.rewriteFunctionExpressions);
//       assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
//       assertFalse(compilerOptions0.labelRenaming);
//       
//       Supplier<String> supplier0 = null;
//       InlineObjectLiterals inlineObjectLiterals0 = new InlineObjectLiterals(compiler0, supplier0);
//       assertNotNull(inlineObjectLiterals0);
//       assertEquals(false, compiler0.isIdeMode());
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
//       assertEquals(1, compiler0.getWarningCount());
//       assertEquals(false, compiler0.hasErrors());
//       assertEquals(0, compiler0.getErrorCount());
//       assertEquals(false, compiler0.isTypeCheckingEnabled());
//       assertEquals(1.0, compiler0.getProgress(), 0.01D);
//       assertEquals(false, compiler0.acceptConstKeyword());
//       
//       compiler0.process(inlineObjectLiterals0);
//       assertEquals(false, compiler0.isIdeMode());
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
//       assertEquals(1, compiler0.getWarningCount());
//       assertEquals(false, compiler0.hasErrors());
//       assertEquals(0, compiler0.getErrorCount());
//       assertEquals(false, compiler0.isTypeCheckingEnabled());
//       assertEquals(1.0, compiler0.getProgress(), 0.01D);
//       assertEquals(false, compiler0.acceptConstKeyword());
//   }
}
