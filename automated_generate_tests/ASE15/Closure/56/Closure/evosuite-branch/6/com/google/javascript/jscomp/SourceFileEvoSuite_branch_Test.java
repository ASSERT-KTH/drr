/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 22:09:27 GMT 2014
 */

package com.google.javascript.jscomp;

import static org.junit.Assert.*; import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.junit.Test;
import com.google.javascript.jscomp.Region;
import com.google.javascript.jscomp.SimpleRegion;
import com.google.javascript.jscomp.SourceFile;
import java.io.File;
import java.io.InputStream;
import java.io.Reader;
import java.io.StringReader;
import java.nio.charset.Charset;



import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.mock.java.io.MockFileReader;

import org.junit.runner.RunWith;


public class SourceFileEvoSuite_branch_Test  {

  @Test
  public void test00()  throws Throwable  {
      String string0 = "\nActual: ";
      SourceFile.Preloaded sourceFile_Preloaded0 = new SourceFile.Preloaded(string0, string0);
      assertNotNull(sourceFile_Preloaded0);
      assertEquals("\nActual: ", sourceFile_Preloaded0.getName());
      assertEquals("\nActual: ", sourceFile_Preloaded0.getOriginalPath());
      assertEquals(false, sourceFile_Preloaded0.isExtern());
      assertEquals("\nActual: ", sourceFile_Preloaded0.toString());
      
      int int0 = 0;
      SimpleRegion simpleRegion0 = (SimpleRegion)sourceFile_Preloaded0.getRegion(int0);
      assertNotNull(simpleRegion0);
      assertEquals(2, simpleRegion0.getEndingLineNumber());
      assertEquals("\nActual: ", simpleRegion0.getSourceExcerpt());
      assertEquals(1, simpleRegion0.getBeginningLineNumber());
      assertEquals("\nActual: ", sourceFile_Preloaded0.getName());
      assertEquals("\nActual: ", sourceFile_Preloaded0.getOriginalPath());
      assertEquals(false, sourceFile_Preloaded0.isExtern());
      assertEquals("\nActual: ", sourceFile_Preloaded0.toString());
  }

  @Test
  public void test01()  throws Throwable  {
      String string0 = "\n";
      SourceFile.Preloaded sourceFile_Preloaded0 = new SourceFile.Preloaded(string0, string0);
      assertNotNull(sourceFile_Preloaded0);
      assertEquals(false, sourceFile_Preloaded0.isExtern());
      assertEquals("\n", sourceFile_Preloaded0.getOriginalPath());
      assertEquals("\n", sourceFile_Preloaded0.getName());
      assertEquals("\n", sourceFile_Preloaded0.toString());
      
      int int0 = 3834;
      Region region0 = sourceFile_Preloaded0.getRegion(int0);
      assertNull(region0);
      assertEquals(false, sourceFile_Preloaded0.isExtern());
      assertEquals("\n", sourceFile_Preloaded0.getOriginalPath());
      assertEquals("\n", sourceFile_Preloaded0.getName());
      assertEquals("\n", sourceFile_Preloaded0.toString());
  }

  @Test
  public void test02()  throws Throwable  {
      String string0 = "S3\n";
      SourceFile.Preloaded sourceFile_Preloaded0 = new SourceFile.Preloaded(string0, string0);
      assertNotNull(sourceFile_Preloaded0);
      assertEquals("S3\n", sourceFile_Preloaded0.getName());
      assertEquals(false, sourceFile_Preloaded0.isExtern());
      assertEquals("S3\n", sourceFile_Preloaded0.toString());
      assertEquals("S3\n", sourceFile_Preloaded0.getOriginalPath());
      
      int int0 = (-3361);
      SimpleRegion simpleRegion0 = (SimpleRegion)sourceFile_Preloaded0.getRegion(int0);
      assertNotNull(simpleRegion0);
      assertEquals("S3", simpleRegion0.getSourceExcerpt());
      assertEquals(1, simpleRegion0.getBeginningLineNumber());
      assertEquals(2, simpleRegion0.getEndingLineNumber());
      assertEquals("S3\n", sourceFile_Preloaded0.getName());
      assertEquals(false, sourceFile_Preloaded0.isExtern());
      assertEquals("S3\n", sourceFile_Preloaded0.toString());
      assertEquals("S3\n", sourceFile_Preloaded0.getOriginalPath());
  }

  @Test
  public void test03()  throws Throwable  {
      String string0 = "com.google.javascript.jscomp.SourceFile$OnDisk";
      SourceFile.Preloaded sourceFile_Preloaded0 = new SourceFile.Preloaded(string0, string0);
      assertNotNull(sourceFile_Preloaded0);
      assertEquals(false, sourceFile_Preloaded0.isExtern());
      assertEquals("com.google.javascript.jscomp.SourceFile$OnDisk", sourceFile_Preloaded0.getOriginalPath());
      assertEquals("com.google.javascript.jscomp.SourceFile$OnDisk", sourceFile_Preloaded0.getName());
      assertEquals("com.google.javascript.jscomp.SourceFile$OnDisk", sourceFile_Preloaded0.toString());
      
      int int0 = sourceFile_Preloaded0.getNumLines();
      assertEquals(false, sourceFile_Preloaded0.isExtern());
      assertEquals("com.google.javascript.jscomp.SourceFile$OnDisk", sourceFile_Preloaded0.getOriginalPath());
      assertEquals("com.google.javascript.jscomp.SourceFile$OnDisk", sourceFile_Preloaded0.getName());
      assertEquals("com.google.javascript.jscomp.SourceFile$OnDisk", sourceFile_Preloaded0.toString());
      assertEquals(1, int0);
      
      String string1 = sourceFile_Preloaded0.getLine(int0);
      assertNotNull(string1);
      assertEquals(false, sourceFile_Preloaded0.isExtern());
      assertEquals("com.google.javascript.jscomp.SourceFile$OnDisk", sourceFile_Preloaded0.getOriginalPath());
      assertEquals("com.google.javascript.jscomp.SourceFile$OnDisk", sourceFile_Preloaded0.getName());
      assertEquals("com.google.javascript.jscomp.SourceFile$OnDisk", sourceFile_Preloaded0.toString());
      assertEquals("com.google.javascript.jscomp.SourceFile$OnDisk", string1);
      assertSame(string1, string0);
      assertSame(string0, string1);
  }

  @Test
  public void test04()  throws Throwable  {
      String string0 = "\nActual: ";
      String string1 = "";
      assertNotSame(string1, string0);
      
      int int0 = 0;
      SourceFile.Preloaded sourceFile_Preloaded0 = new SourceFile.Preloaded(string0, string1, string1);
      assertNotNull(sourceFile_Preloaded0);
      assertEquals(false, sourceFile_Preloaded0.isExtern());
      assertEquals("\nActual: ", sourceFile_Preloaded0.toString());
      assertEquals("\nActual: ", sourceFile_Preloaded0.getName());
      assertEquals("", sourceFile_Preloaded0.getOriginalPath());
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      
      String string2 = sourceFile_Preloaded0.getLine(int0);
      assertNull(string2);
      assertEquals(false, sourceFile_Preloaded0.isExtern());
      assertEquals("\nActual: ", sourceFile_Preloaded0.toString());
      assertEquals("\nActual: ", sourceFile_Preloaded0.getName());
      assertEquals("", sourceFile_Preloaded0.getOriginalPath());
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
  }

  @Test
  public void test05()  throws Throwable  {
      String string0 = "\n";
      SourceFile.Preloaded sourceFile_Preloaded0 = new SourceFile.Preloaded(string0, string0);
      assertNotNull(sourceFile_Preloaded0);
      assertEquals("\n", sourceFile_Preloaded0.toString());
      assertEquals(false, sourceFile_Preloaded0.isExtern());
      assertEquals("\n", sourceFile_Preloaded0.getOriginalPath());
      assertEquals("\n", sourceFile_Preloaded0.getName());
      
      int int0 = 3834;
      String string1 = sourceFile_Preloaded0.getLine(int0);
      assertNull(string1);
      assertEquals("\n", sourceFile_Preloaded0.toString());
      assertEquals(false, sourceFile_Preloaded0.isExtern());
      assertEquals("\n", sourceFile_Preloaded0.getOriginalPath());
      assertEquals("\n", sourceFile_Preloaded0.getName());
  }

  @Test
  public void test06()  throws Throwable  {
      String string0 = "\nActual: ";
      SourceFile.Preloaded sourceFile_Preloaded0 = new SourceFile.Preloaded(string0, string0);
      assertNotNull(sourceFile_Preloaded0);
      assertEquals("\nActual: ", sourceFile_Preloaded0.toString());
      assertEquals("\nActual: ", sourceFile_Preloaded0.getName());
      assertEquals("\nActual: ", sourceFile_Preloaded0.getOriginalPath());
      assertEquals(false, sourceFile_Preloaded0.isExtern());
      
      int int0 = 0;
      String string1 = sourceFile_Preloaded0.getLine(int0);
      assertNotNull(string1);
      assertEquals("\nActual: ", sourceFile_Preloaded0.toString());
      assertEquals("\nActual: ", sourceFile_Preloaded0.getName());
      assertEquals("\nActual: ", sourceFile_Preloaded0.getOriginalPath());
      assertEquals(false, sourceFile_Preloaded0.isExtern());
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
  }

  @Test
  public void test07()  throws Throwable  {
      String string0 = "L|ZJf0||j6}WU{Ly_";
      MockFile mockFile0 = (MockFile)MockFile.createTempFile(string0, string0);
      assertNotNull(mockFile0);
      
      Charset charset0 = Charset.defaultCharset();
      assertNotNull(charset0);
      assertEquals(true, charset0.canEncode());
      assertEquals("UTF-8", charset0.toString());
      assertEquals("UTF-8", charset0.displayName());
      assertEquals("UTF-8", charset0.name());
      assertEquals(true, charset0.isRegistered());
      
      SourceFile.OnDisk sourceFile_OnDisk0 = new SourceFile.OnDisk(mockFile0, charset0);
      assertNotNull(sourceFile_OnDisk0);
      assertEquals(false, sourceFile_OnDisk0.isExtern());
      assertEquals("/tmp/L|ZJf0||j6}WU{Ly_0L|ZJf0||j6}WU{Ly_", sourceFile_OnDisk0.toString());
      assertEquals("/tmp/L|ZJf0||j6}WU{Ly_0L|ZJf0||j6}WU{Ly_", sourceFile_OnDisk0.getOriginalPath());
      assertEquals("/tmp/L|ZJf0||j6}WU{Ly_0L|ZJf0||j6}WU{Ly_", sourceFile_OnDisk0.getName());
      assertEquals(true, charset0.canEncode());
      assertEquals("UTF-8", charset0.toString());
      assertEquals("UTF-8", charset0.displayName());
      assertEquals("UTF-8", charset0.name());
      assertEquals(true, charset0.isRegistered());
      
      MockFileReader mockFileReader0 = (MockFileReader)sourceFile_OnDisk0.getCodeReader();
      assertNotNull(mockFileReader0);
      assertEquals(false, sourceFile_OnDisk0.isExtern());
      assertEquals("/tmp/L|ZJf0||j6}WU{Ly_0L|ZJf0||j6}WU{Ly_", sourceFile_OnDisk0.toString());
      assertEquals("/tmp/L|ZJf0||j6}WU{Ly_0L|ZJf0||j6}WU{Ly_", sourceFile_OnDisk0.getOriginalPath());
      assertEquals("/tmp/L|ZJf0||j6}WU{Ly_0L|ZJf0||j6}WU{Ly_", sourceFile_OnDisk0.getName());
      assertEquals(false, mockFileReader0.markSupported());
      assertEquals(true, charset0.canEncode());
      assertEquals("UTF-8", charset0.toString());
      assertEquals("UTF-8", charset0.displayName());
      assertEquals("UTF-8", charset0.name());
      assertEquals(true, charset0.isRegistered());
  }

  @Test
  public void test08()  throws Throwable  {
      String string0 = "\n";
      SourceFile.Preloaded sourceFile_Preloaded0 = new SourceFile.Preloaded(string0, string0);
      assertNotNull(sourceFile_Preloaded0);
      assertEquals("\n", sourceFile_Preloaded0.getOriginalPath());
      assertEquals("\n", sourceFile_Preloaded0.toString());
      assertEquals("\n", sourceFile_Preloaded0.getName());
      assertEquals(false, sourceFile_Preloaded0.isExtern());
      
      String string1 = sourceFile_Preloaded0.getOriginalPath();
      assertNotNull(string1);
      assertEquals("\n", sourceFile_Preloaded0.getOriginalPath());
      assertEquals("\n", sourceFile_Preloaded0.toString());
      assertEquals("\n", sourceFile_Preloaded0.getName());
      assertEquals(false, sourceFile_Preloaded0.isExtern());
      assertEquals("\n", string1);
      assertSame(string1, string0);
      assertSame(string0, string1);
  }

  @Test
  public void test09()  throws Throwable  {
      String string0 = "J";
      Charset charset0 = Charset.defaultCharset();
      assertNotNull(charset0);
      assertEquals(true, charset0.isRegistered());
      assertEquals("UTF-8", charset0.toString());
      assertEquals("UTF-8", charset0.name());
      assertEquals(true, charset0.canEncode());
      assertEquals("UTF-8", charset0.displayName());
      
      SourceFile.OnDisk sourceFile_OnDisk0 = (SourceFile.OnDisk)SourceFile.fromFile(string0, charset0);
      assertNotNull(sourceFile_OnDisk0);
      assertEquals("J", sourceFile_OnDisk0.getOriginalPath());
      assertEquals(false, sourceFile_OnDisk0.isExtern());
      assertEquals("J", sourceFile_OnDisk0.toString());
      assertEquals("J", sourceFile_OnDisk0.getName());
      assertEquals(true, charset0.isRegistered());
      assertEquals("UTF-8", charset0.toString());
      assertEquals("UTF-8", charset0.name());
      assertEquals(true, charset0.canEncode());
      assertEquals("UTF-8", charset0.displayName());
      
      String string1 = sourceFile_OnDisk0.getOriginalPath();
      assertNotNull(string1);
      assertEquals("J", sourceFile_OnDisk0.getOriginalPath());
      assertEquals(false, sourceFile_OnDisk0.isExtern());
      assertEquals("J", sourceFile_OnDisk0.toString());
      assertEquals("J", sourceFile_OnDisk0.getName());
      assertEquals(true, charset0.isRegistered());
      assertEquals("UTF-8", charset0.toString());
      assertEquals("UTF-8", charset0.name());
      assertEquals(true, charset0.canEncode());
      assertEquals("UTF-8", charset0.displayName());
      assertEquals("J", string1);
      assertSame(string1, string0);
      assertSame(string0, string1);
  }

  @Test
  public void test10()  throws Throwable  {
      String string0 = "\nActual: ";
      SourceFile.Preloaded sourceFile_Preloaded0 = new SourceFile.Preloaded(string0, string0, string0);
      assertNotNull(sourceFile_Preloaded0);
      assertEquals("\nActual: ", sourceFile_Preloaded0.getName());
      assertEquals("\nActual: ", sourceFile_Preloaded0.getOriginalPath());
      assertEquals(false, sourceFile_Preloaded0.isExtern());
      assertEquals("\nActual: ", sourceFile_Preloaded0.toString());
      
      int int0 = 1;
      int int1 = sourceFile_Preloaded0.getLineOffset(int0);
      assertEquals("\nActual: ", sourceFile_Preloaded0.getName());
      assertEquals("\nActual: ", sourceFile_Preloaded0.getOriginalPath());
      assertEquals(false, sourceFile_Preloaded0.isExtern());
      assertEquals("\nActual: ", sourceFile_Preloaded0.toString());
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      
      int int2 = sourceFile_Preloaded0.getNumLines();
      assertEquals("\nActual: ", sourceFile_Preloaded0.getName());
      assertEquals("\nActual: ", sourceFile_Preloaded0.getOriginalPath());
      assertEquals(false, sourceFile_Preloaded0.isExtern());
      assertEquals("\nActual: ", sourceFile_Preloaded0.toString());
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals(2, int2);
  }

  @Test
  public void test11()  throws Throwable  {
      String string0 = "u`'";
      SourceFile.Preloaded sourceFile_Preloaded0 = new SourceFile.Preloaded(string0, string0, string0);
      assertNotNull(sourceFile_Preloaded0);
      assertEquals("u`'", sourceFile_Preloaded0.getOriginalPath());
      assertEquals(false, sourceFile_Preloaded0.isExtern());
      assertEquals("u`'", sourceFile_Preloaded0.toString());
      assertEquals("u`'", sourceFile_Preloaded0.getName());
      
      int int0 = 2201;
      // Undeclared exception!
      try {
        int int1 = sourceFile_Preloaded0.getLineOffset(int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Expected line number between 1 and 1
         // Actual: 2201
         //
      }
  }

  @Test
  public void test12()  throws Throwable  {
      String string0 = "J";
      Charset charset0 = Charset.defaultCharset();
      assertNotNull(charset0);
      assertEquals("UTF-8", charset0.name());
      assertEquals(true, charset0.isRegistered());
      assertEquals("UTF-8", charset0.toString());
      assertEquals(true, charset0.canEncode());
      assertEquals("UTF-8", charset0.displayName());
      
      SourceFile.OnDisk sourceFile_OnDisk0 = (SourceFile.OnDisk)SourceFile.fromFile(string0, charset0);
      assertNotNull(sourceFile_OnDisk0);
      assertEquals("J", sourceFile_OnDisk0.getName());
      assertEquals("J", sourceFile_OnDisk0.toString());
      assertEquals("J", sourceFile_OnDisk0.getOriginalPath());
      assertEquals(false, sourceFile_OnDisk0.isExtern());
      assertEquals("UTF-8", charset0.name());
      assertEquals(true, charset0.isRegistered());
      assertEquals("UTF-8", charset0.toString());
      assertEquals(true, charset0.canEncode());
      assertEquals("UTF-8", charset0.displayName());
      
      int int0 = (-29);
      // Undeclared exception!
      try {
        int int1 = sourceFile_OnDisk0.getLineOffset(int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Expected line number between 1 and 1
         // Actual: -29
         //
      }
  }

  @Test
  public void test13()  throws Throwable  {
      String string0 = "u`'";
      SourceFile.Preloaded sourceFile_Preloaded0 = new SourceFile.Preloaded(string0, string0, string0);
      assertNotNull(sourceFile_Preloaded0);
      assertEquals("u`'", sourceFile_Preloaded0.toString());
      assertEquals(false, sourceFile_Preloaded0.isExtern());
      assertEquals("u`'", sourceFile_Preloaded0.getName());
      assertEquals("u`'", sourceFile_Preloaded0.getOriginalPath());
      
      int int0 = sourceFile_Preloaded0.getNumLines();
      assertEquals("u`'", sourceFile_Preloaded0.toString());
      assertEquals(false, sourceFile_Preloaded0.isExtern());
      assertEquals("u`'", sourceFile_Preloaded0.getName());
      assertEquals("u`'", sourceFile_Preloaded0.getOriginalPath());
      assertEquals(1, int0);
      
      int int1 = sourceFile_Preloaded0.getLineOffset(int0);
      assertEquals("u`'", sourceFile_Preloaded0.toString());
      assertEquals(false, sourceFile_Preloaded0.isExtern());
      assertEquals("u`'", sourceFile_Preloaded0.getName());
      assertEquals("u`'", sourceFile_Preloaded0.getOriginalPath());
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertEquals(0, int1);
  }

  @Test
  public void test14()  throws Throwable  {
      String string0 = "%s (%s) must not be greater than size (%s)";
      MockFile mockFile0 = (MockFile)MockFile.createTempFile(string0, string0);
      assertNotNull(mockFile0);
      
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream((File) mockFile0);
      assertNotNull(mockFileInputStream0);
      assertEquals(false, mockFileInputStream0.markSupported());
      
      String string1 = null;
      // Undeclared exception!
      try {
        SourceFile sourceFile0 = SourceFile.fromInputStream(string1, (InputStream) mockFileInputStream0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // a source must have a name
         //
      }
  }

  @Test
  public void test15()  throws Throwable  {
      String string0 = "\n";
      SourceFile.Preloaded sourceFile_Preloaded0 = (SourceFile.Preloaded)SourceFile.fromCode(string0, string0, string0);
      assertNotNull(sourceFile_Preloaded0);
      assertEquals("\n", sourceFile_Preloaded0.getOriginalPath());
      assertEquals(false, sourceFile_Preloaded0.isExtern());
      assertEquals("\n", sourceFile_Preloaded0.getName());
      assertEquals("\n", sourceFile_Preloaded0.toString());
  }

  @Test
  public void test16()  throws Throwable  {
      String string0 = "";
      StringReader stringReader0 = new StringReader(string0);
      assertNotNull(stringReader0);
      assertEquals(true, stringReader0.ready());
      assertEquals(true, stringReader0.markSupported());
      
      // Undeclared exception!
      try {
        SourceFile sourceFile0 = SourceFile.fromReader(string0, (Reader) stringReader0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // a source must have a name
         //
      }
  }

  @Test
  public void test17()  throws Throwable  {
      String string0 = "\nActual: ";
      SourceFile.Preloaded sourceFile_Preloaded0 = new SourceFile.Preloaded(string0, string0);
      assertNotNull(sourceFile_Preloaded0);
      assertEquals("\nActual: ", sourceFile_Preloaded0.toString());
      assertEquals("\nActual: ", sourceFile_Preloaded0.getOriginalPath());
      assertEquals("\nActual: ", sourceFile_Preloaded0.getName());
      assertEquals(false, sourceFile_Preloaded0.isExtern());
      
      String string1 = sourceFile_Preloaded0.getCodeNoCache();
      assertNotNull(string1);
      assertEquals("\nActual: ", sourceFile_Preloaded0.toString());
      assertEquals("\nActual: ", sourceFile_Preloaded0.getOriginalPath());
      assertEquals("\nActual: ", sourceFile_Preloaded0.getName());
      assertEquals(false, sourceFile_Preloaded0.isExtern());
      assertEquals("\nActual: ", string1);
      assertSame(string1, string0);
      assertSame(string0, string1);
      
      SourceFile.OnDisk sourceFile_OnDisk0 = (SourceFile.OnDisk)SourceFile.fromFile(string1);
      assertNotNull(sourceFile_OnDisk0);
      assertEquals(false, sourceFile_OnDisk0.isExtern());
      assertEquals("\nActual: ", sourceFile_OnDisk0.getName());
      assertEquals("\nActual: ", sourceFile_OnDisk0.getOriginalPath());
      assertEquals("\nActual: ", sourceFile_OnDisk0.toString());
      assertEquals("\nActual: ", sourceFile_Preloaded0.toString());
      assertEquals("\nActual: ", sourceFile_Preloaded0.getOriginalPath());
      assertEquals("\nActual: ", sourceFile_Preloaded0.getName());
      assertEquals(false, sourceFile_Preloaded0.isExtern());
      assertSame(string1, string0);
      assertSame(string0, string1);
  }

  @Test
  public void test18()  throws Throwable  {
      String string0 = "com.google.javascript.jscomp.SourceFile$OnDisk";
      MockFile mockFile0 = new MockFile(string0, string0);
      assertNotNull(mockFile0);
      
      SourceFile.OnDisk sourceFile_OnDisk0 = new SourceFile.OnDisk(mockFile0);
      assertNotNull(sourceFile_OnDisk0);
      assertEquals("com.google.javascript.jscomp.SourceFile$OnDisk/com.google.javascript.jscomp.SourceFile$OnDisk", sourceFile_OnDisk0.getName());
      assertEquals(false, sourceFile_OnDisk0.isExtern());
      assertEquals("com.google.javascript.jscomp.SourceFile$OnDisk/com.google.javascript.jscomp.SourceFile$OnDisk", sourceFile_OnDisk0.toString());
      assertEquals("com.google.javascript.jscomp.SourceFile$OnDisk/com.google.javascript.jscomp.SourceFile$OnDisk", sourceFile_OnDisk0.getOriginalPath());
      
      String string1 = sourceFile_OnDisk0.getName();
      assertNotNull(string1);
      assertEquals("com.google.javascript.jscomp.SourceFile$OnDisk/com.google.javascript.jscomp.SourceFile$OnDisk", sourceFile_OnDisk0.getName());
      assertEquals(false, sourceFile_OnDisk0.isExtern());
      assertEquals("com.google.javascript.jscomp.SourceFile$OnDisk/com.google.javascript.jscomp.SourceFile$OnDisk", sourceFile_OnDisk0.toString());
      assertEquals("com.google.javascript.jscomp.SourceFile$OnDisk/com.google.javascript.jscomp.SourceFile$OnDisk", sourceFile_OnDisk0.getOriginalPath());
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertEquals("com.google.javascript.jscomp.SourceFile$OnDisk/com.google.javascript.jscomp.SourceFile$OnDisk", string1);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
  }

  @Test
  public void test19()  throws Throwable  {
      String string0 = "com.google.javascript.jscomp.SourceFile$OnDisk";
      SourceFile.Preloaded sourceFile_Preloaded0 = new SourceFile.Preloaded(string0, string0);
      assertNotNull(sourceFile_Preloaded0);
      assertEquals("com.google.javascript.jscomp.SourceFile$OnDisk", sourceFile_Preloaded0.getOriginalPath());
      assertEquals("com.google.javascript.jscomp.SourceFile$OnDisk", sourceFile_Preloaded0.getName());
      assertEquals(false, sourceFile_Preloaded0.isExtern());
      assertEquals("com.google.javascript.jscomp.SourceFile$OnDisk", sourceFile_Preloaded0.toString());
      
      String string1 = sourceFile_Preloaded0.toString();
      assertNotNull(string1);
      assertEquals("com.google.javascript.jscomp.SourceFile$OnDisk", sourceFile_Preloaded0.getOriginalPath());
      assertEquals("com.google.javascript.jscomp.SourceFile$OnDisk", sourceFile_Preloaded0.getName());
      assertEquals(false, sourceFile_Preloaded0.isExtern());
      assertEquals("com.google.javascript.jscomp.SourceFile$OnDisk", sourceFile_Preloaded0.toString());
      assertEquals("com.google.javascript.jscomp.SourceFile$OnDisk", string1);
      assertSame(string1, string0);
      assertSame(string0, string1);
  }

  @Test
  public void test20()  throws Throwable  {
      String string0 = "|?\\U";
      SourceFile.Preloaded sourceFile_Preloaded0 = new SourceFile.Preloaded(string0, string0, string0);
      assertNotNull(sourceFile_Preloaded0);
      assertEquals(false, sourceFile_Preloaded0.isExtern());
      assertEquals("|?\\U", sourceFile_Preloaded0.getOriginalPath());
      assertEquals("|?\\U", sourceFile_Preloaded0.toString());
      assertEquals("|?\\U", sourceFile_Preloaded0.getName());
      
      sourceFile_Preloaded0.clearCachedSource();
      assertEquals(false, sourceFile_Preloaded0.isExtern());
      assertEquals("|?\\U", sourceFile_Preloaded0.getOriginalPath());
      assertEquals("|?\\U", sourceFile_Preloaded0.toString());
      assertEquals("|?\\U", sourceFile_Preloaded0.getName());
  }

  @Test
  public void test21()  throws Throwable  {
      String string0 = "\nActual: ";
      SourceFile.Preloaded sourceFile_Preloaded0 = new SourceFile.Preloaded(string0, string0);
      assertNotNull(sourceFile_Preloaded0);
      assertEquals(false, sourceFile_Preloaded0.isExtern());
      assertEquals("\nActual: ", sourceFile_Preloaded0.getOriginalPath());
      assertEquals("\nActual: ", sourceFile_Preloaded0.getName());
      assertEquals("\nActual: ", sourceFile_Preloaded0.toString());
      
      boolean boolean0 = sourceFile_Preloaded0.isExtern();
      assertEquals(false, sourceFile_Preloaded0.isExtern());
      assertEquals("\nActual: ", sourceFile_Preloaded0.getOriginalPath());
      assertEquals("\nActual: ", sourceFile_Preloaded0.getName());
      assertEquals("\nActual: ", sourceFile_Preloaded0.toString());
      assertFalse(boolean0);
  }

  @Test
  public void test22()  throws Throwable  {
      String string0 = "com.google.javascript.jscomp.SourceFile$OnDisk";
      MockFile mockFile0 = new MockFile(string0, string0);
      assertNotNull(mockFile0);
      
      SourceFile.OnDisk sourceFile_OnDisk0 = new SourceFile.OnDisk(mockFile0);
      assertNotNull(sourceFile_OnDisk0);
      assertEquals("com.google.javascript.jscomp.SourceFile$OnDisk/com.google.javascript.jscomp.SourceFile$OnDisk", sourceFile_OnDisk0.toString());
      assertEquals("com.google.javascript.jscomp.SourceFile$OnDisk/com.google.javascript.jscomp.SourceFile$OnDisk", sourceFile_OnDisk0.getOriginalPath());
      assertEquals(false, sourceFile_OnDisk0.isExtern());
      assertEquals("com.google.javascript.jscomp.SourceFile$OnDisk/com.google.javascript.jscomp.SourceFile$OnDisk", sourceFile_OnDisk0.getName());
      
      boolean boolean0 = false;
      sourceFile_OnDisk0.setIsExtern(boolean0);
      assertEquals("com.google.javascript.jscomp.SourceFile$OnDisk/com.google.javascript.jscomp.SourceFile$OnDisk", sourceFile_OnDisk0.toString());
      assertEquals("com.google.javascript.jscomp.SourceFile$OnDisk/com.google.javascript.jscomp.SourceFile$OnDisk", sourceFile_OnDisk0.getOriginalPath());
      assertEquals(false, sourceFile_OnDisk0.isExtern());
      assertEquals("com.google.javascript.jscomp.SourceFile$OnDisk/com.google.javascript.jscomp.SourceFile$OnDisk", sourceFile_OnDisk0.getName());
  }

  @Test
  public void test23()  throws Throwable  {
      String string0 = "%s (%s) must not be greater than size (%s)";
      MockFile mockFile0 = (MockFile)MockFile.createTempFile(string0, string0);
      assertNotNull(mockFile0);
      
      Charset charset0 = null;
      SourceFile.OnDisk sourceFile_OnDisk0 = new SourceFile.OnDisk(mockFile0, charset0);
      assertNotNull(sourceFile_OnDisk0);
      assertEquals("/tmp/%s (%s) must not be greater than size (%s)0%s (%s) must not be greater than size (%s)", sourceFile_OnDisk0.getOriginalPath());
      assertEquals(false, sourceFile_OnDisk0.isExtern());
      assertEquals("/tmp/%s (%s) must not be greater than size (%s)0%s (%s) must not be greater than size (%s)", sourceFile_OnDisk0.getName());
      assertEquals("/tmp/%s (%s) must not be greater than size (%s)0%s (%s) must not be greater than size (%s)", sourceFile_OnDisk0.toString());
      
      int int0 = sourceFile_OnDisk0.getNumLines();
      assertEquals("/tmp/%s (%s) must not be greater than size (%s)0%s (%s) must not be greater than size (%s)", sourceFile_OnDisk0.getOriginalPath());
      assertEquals(false, sourceFile_OnDisk0.isExtern());
      assertEquals("/tmp/%s (%s) must not be greater than size (%s)0%s (%s) must not be greater than size (%s)", sourceFile_OnDisk0.getName());
      assertEquals("/tmp/%s (%s) must not be greater than size (%s)0%s (%s) must not be greater than size (%s)", sourceFile_OnDisk0.toString());
      assertEquals(1, int0);
      
      StringReader stringReader0 = (StringReader)sourceFile_OnDisk0.getCodeReader();
      assertNotNull(stringReader0);
      assertEquals(true, stringReader0.ready());
      assertEquals(true, stringReader0.markSupported());
      assertEquals("/tmp/%s (%s) must not be greater than size (%s)0%s (%s) must not be greater than size (%s)", sourceFile_OnDisk0.getOriginalPath());
      assertEquals(false, sourceFile_OnDisk0.isExtern());
      assertEquals("/tmp/%s (%s) must not be greater than size (%s)0%s (%s) must not be greater than size (%s)", sourceFile_OnDisk0.getName());
      assertEquals("/tmp/%s (%s) must not be greater than size (%s)0%s (%s) must not be greater than size (%s)", sourceFile_OnDisk0.toString());
  }

  @Test
  public void test24()  throws Throwable  {
      String string0 = "J";
      Charset charset0 = Charset.defaultCharset();
      assertNotNull(charset0);
      assertEquals("UTF-8", charset0.displayName());
      assertEquals("UTF-8", charset0.toString());
      assertEquals("UTF-8", charset0.name());
      assertEquals(true, charset0.canEncode());
      assertEquals(true, charset0.isRegistered());
      
      MockFile mockFile0 = new MockFile(string0);
      assertNotNull(mockFile0);
      
      SourceFile.OnDisk sourceFile_OnDisk0 = new SourceFile.OnDisk(mockFile0, charset0);
      assertNotNull(sourceFile_OnDisk0);
      assertEquals(false, sourceFile_OnDisk0.isExtern());
      assertEquals("J", sourceFile_OnDisk0.toString());
      assertEquals("J", sourceFile_OnDisk0.getName());
      assertEquals("J", sourceFile_OnDisk0.getOriginalPath());
      assertEquals("UTF-8", charset0.displayName());
      assertEquals("UTF-8", charset0.toString());
      assertEquals("UTF-8", charset0.name());
      assertEquals(true, charset0.canEncode());
      assertEquals(true, charset0.isRegistered());
      
      sourceFile_OnDisk0.clearCachedSource();
      assertEquals(false, sourceFile_OnDisk0.isExtern());
      assertEquals("J", sourceFile_OnDisk0.toString());
      assertEquals("J", sourceFile_OnDisk0.getName());
      assertEquals("J", sourceFile_OnDisk0.getOriginalPath());
      assertEquals("UTF-8", charset0.displayName());
      assertEquals("UTF-8", charset0.toString());
      assertEquals("UTF-8", charset0.name());
      assertEquals(true, charset0.canEncode());
      assertEquals(true, charset0.isRegistered());
  }
}
