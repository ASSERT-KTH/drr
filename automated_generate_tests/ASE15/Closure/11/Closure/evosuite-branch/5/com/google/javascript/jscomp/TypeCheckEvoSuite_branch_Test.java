/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 20:14:58 GMT 2014
 */

package com.google.javascript.jscomp;

import static org.junit.Assert.*;
import org.junit.Test;
import com.google.javascript.jscomp.AbstractCompiler;
import com.google.javascript.jscomp.Compiler;
import com.google.javascript.jscomp.CompilerOptions;
import com.google.javascript.jscomp.DefaultPassConfig;
import com.google.javascript.jscomp.JSSourceFile;
import com.google.javascript.jscomp.MemoizedScopeCreator;
import com.google.javascript.jscomp.NodeTraversal;
import com.google.javascript.jscomp.Normalize;
import com.google.javascript.jscomp.Result;
import com.google.javascript.jscomp.Scope;
import com.google.javascript.jscomp.ScopeCreator;
import com.google.javascript.jscomp.SourceFile;
import com.google.javascript.jscomp.TypeCheck;
import com.google.javascript.jscomp.type.ReverseAbstractInterpreter;
import com.google.javascript.rhino.Node;
import com.google.javascript.rhino.jstype.JSType;
import com.google.javascript.rhino.jstype.JSTypeRegistry;
import java.io.File;
import java.util.List;
import java.util.Stack;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;

import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.lang.MockIllegalStateException;
import org.junit.runner.RunWith;


public class TypeCheckEvoSuite_branch_Test  {

  @Test
  public void test0() {}
//   @Test
//   public void test0()  throws Throwable  {
//       Compiler compiler0 = new Compiler();
//       assertEquals(0.0, compiler0.getProgress(), 0.01D);
//       assertNotNull(compiler0);
//       
//       String string0 = "s";
//       MockFile mockFile0 = new MockFile(string0);
//       assertNotNull(mockFile0);
//       
//       JSSourceFile jSSourceFile0 = JSSourceFile.fromFile((File) mockFile0);
//       assertEquals("s", jSSourceFile0.getOriginalPath());
//       assertEquals("s", jSSourceFile0.getName());
//       assertEquals("s", jSSourceFile0.toString());
//       assertEquals(false, jSSourceFile0.isExtern());
//       assertNotNull(jSSourceFile0);
//       
//       CompilerOptions compilerOptions0 = new CompilerOptions();
//       assertFalse(compilerOptions0.optimizeCalls);
//       assertFalse(compilerOptions0.preferLineBreakAtEndOfFile);
//       assertFalse(compilerOptions0.flowSensitiveInlineVariables);
//       assertFalse(compilerOptions0.optimizeParameters);
//       assertFalse(compilerOptions0.inlineVariables);
//       assertFalse(compilerOptions0.disambiguateProperties);
//       assertFalse(compilerOptions0.jqueryPass);
//       assertFalse(compilerOptions0.collapseVariableDeclarations);
//       assertFalse(compilerOptions0.printInputDelimiter);
//       assertFalse(compilerOptions0.checkSuspiciousCode);
//       assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
//       assertFalse(compilerOptions0.ideMode);
//       assertFalse(compilerOptions0.computeFunctionSideEffects);
//       assertFalse(compilerOptions0.inlineLocalFunctions);
//       assertFalse(compilerOptions0.prettyPrint);
//       assertFalse(compilerOptions0.crossModuleCodeMotion);
//       assertFalse(compilerOptions0.checkTypes);
//       assertFalse(compilerOptions0.inlineFunctions);
//       assertFalse(compilerOptions0.removeUnusedClassProperties);
//       assertFalse(compilerOptions0.optimizeReturns);
//       assertFalse(compilerOptions0.crossModuleMethodMotion);
//       assertFalse(compilerOptions0.deadAssignmentElimination);
//       assertFalse(compilerOptions0.aliasAllStrings);
//       assertFalse(compilerOptions0.exportTestFunctions);
//       assertFalse(compilerOptions0.inlineGetters);
//       assertFalse(compilerOptions0.lineBreak);
//       assertFalse(compilerOptions0.generateExports);
//       assertFalse(compilerOptions0.ambiguateProperties);
//       assertFalse(compilerOptions0.convertToDottedProperties);
//       assertFalse(compilerOptions0.recordFunctionInformation);
//       assertFalse(compilerOptions0.reserveRawExports);
//       assertFalse(compilerOptions0.foldConstants);
//       assertFalse(compilerOptions0.checkSymbols);
//       assertFalse(compilerOptions0.labelRenaming);
//       assertFalse(compilerOptions0.moveFunctionDeclarations);
//       assertFalse(compilerOptions0.rewriteFunctionExpressions);
//       assertFalse(compilerOptions0.smartNameRemoval);
//       assertFalse(compilerOptions0.aliasKeywords);
//       assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
//       assertFalse(compilerOptions0.markAsCompiled);
//       assertFalse(compilerOptions0.removeUnusedVars);
//       assertFalse(compilerOptions0.removeUnusedLocalVars);
//       assertFalse(compilerOptions0.aliasExternals);
//       assertFalse(compilerOptions0.gatherCssNames);
//       assertFalse(compilerOptions0.coalesceVariableNames);
//       assertFalse(compilerOptions0.optimizeArgumentsArray);
//       assertFalse(compilerOptions0.checkControlStructures);
//       assertFalse(compilerOptions0.inlineConstantVars);
//       assertFalse(compilerOptions0.collapseAnonymousFunctions);
//       assertFalse(compilerOptions0.generatePseudoNames);
//       assertFalse(compilerOptions0.devirtualizePrototypeMethods);
//       assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
//       assertFalse(compilerOptions0.closurePass);
//       assertFalse(compilerOptions0.removeTryCatchFinally);
//       assertFalse(compilerOptions0.collapseProperties);
//       assertFalse(compilerOptions0.removeDeadCode);
//       assertFalse(compilerOptions0.markNoSideEffectCalls);
//       assertEquals(false, compilerOptions0.isExternExportsEnabled());
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compilerOptions0.getLanguageIn());
//       assertEquals(false, compilerOptions0.assumeStrictThis());
//       assertEquals(CompilerOptions.TracerMode.OFF, compilerOptions0.getTracerMode());
//       assertEquals(CompilerOptions.TweakProcessing.OFF, compilerOptions0.getTweakProcessing());
//       assertEquals(false, compilerOptions0.getInferTypes());
//       assertEquals(false, compilerOptions0.isRemoveUnusedClassProperties());
//       assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
//       assertEquals(false, compilerOptions0.assumeClosuresOnlyCaptureReferences());
//       assertNull(compilerOptions0.getLanguageOut());
//       assertNotNull(compilerOptions0);
//       
//       Result result0 = compiler0.compile((SourceFile) jSSourceFile0, (SourceFile) jSSourceFile0, compilerOptions0);
//       assertFalse(compilerOptions0.optimizeCalls);
//       assertFalse(compilerOptions0.preferLineBreakAtEndOfFile);
//       assertFalse(compilerOptions0.flowSensitiveInlineVariables);
//       assertFalse(compilerOptions0.optimizeParameters);
//       assertFalse(compilerOptions0.inlineVariables);
//       assertFalse(compilerOptions0.disambiguateProperties);
//       assertFalse(compilerOptions0.jqueryPass);
//       assertFalse(compilerOptions0.collapseVariableDeclarations);
//       assertFalse(compilerOptions0.printInputDelimiter);
//       assertFalse(compilerOptions0.checkSuspiciousCode);
//       assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
//       assertFalse(compilerOptions0.ideMode);
//       assertFalse(compilerOptions0.computeFunctionSideEffects);
//       assertFalse(compilerOptions0.inlineLocalFunctions);
//       assertFalse(compilerOptions0.prettyPrint);
//       assertFalse(compilerOptions0.crossModuleCodeMotion);
//       assertFalse(compilerOptions0.checkTypes);
//       assertFalse(compilerOptions0.inlineFunctions);
//       assertFalse(compilerOptions0.removeUnusedClassProperties);
//       assertFalse(compilerOptions0.optimizeReturns);
//       assertFalse(compilerOptions0.crossModuleMethodMotion);
//       assertFalse(compilerOptions0.deadAssignmentElimination);
//       assertFalse(compilerOptions0.aliasAllStrings);
//       assertFalse(compilerOptions0.exportTestFunctions);
//       assertFalse(compilerOptions0.inlineGetters);
//       assertFalse(compilerOptions0.lineBreak);
//       assertFalse(compilerOptions0.generateExports);
//       assertFalse(compilerOptions0.ambiguateProperties);
//       assertFalse(compilerOptions0.convertToDottedProperties);
//       assertFalse(compilerOptions0.recordFunctionInformation);
//       assertFalse(compilerOptions0.reserveRawExports);
//       assertFalse(compilerOptions0.foldConstants);
//       assertFalse(compilerOptions0.checkSymbols);
//       assertFalse(compilerOptions0.labelRenaming);
//       assertFalse(compilerOptions0.moveFunctionDeclarations);
//       assertFalse(compilerOptions0.rewriteFunctionExpressions);
//       assertFalse(compilerOptions0.smartNameRemoval);
//       assertFalse(compilerOptions0.aliasKeywords);
//       assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
//       assertFalse(compilerOptions0.markAsCompiled);
//       assertFalse(compilerOptions0.removeUnusedVars);
//       assertFalse(compilerOptions0.removeUnusedLocalVars);
//       assertFalse(compilerOptions0.aliasExternals);
//       assertFalse(compilerOptions0.gatherCssNames);
//       assertFalse(compilerOptions0.coalesceVariableNames);
//       assertFalse(compilerOptions0.optimizeArgumentsArray);
//       assertFalse(compilerOptions0.checkControlStructures);
//       assertFalse(compilerOptions0.inlineConstantVars);
//       assertFalse(compilerOptions0.collapseAnonymousFunctions);
//       assertFalse(compilerOptions0.generatePseudoNames);
//       assertFalse(compilerOptions0.devirtualizePrototypeMethods);
//       assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
//       assertFalse(compilerOptions0.closurePass);
//       assertFalse(compilerOptions0.removeTryCatchFinally);
//       assertFalse(compilerOptions0.collapseProperties);
//       assertFalse(compilerOptions0.removeDeadCode);
//       assertFalse(compilerOptions0.markNoSideEffectCalls);
//       assertEquals(false, compilerOptions0.isExternExportsEnabled());
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compilerOptions0.getLanguageIn());
//       assertEquals(false, compilerOptions0.assumeStrictThis());
//       assertEquals(CompilerOptions.TracerMode.OFF, compilerOptions0.getTracerMode());
//       assertEquals(CompilerOptions.TweakProcessing.OFF, compilerOptions0.getTweakProcessing());
//       assertEquals(false, compilerOptions0.getInferTypes());
//       assertEquals(false, compilerOptions0.isRemoveUnusedClassProperties());
//       assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
//       assertEquals(false, compilerOptions0.assumeClosuresOnlyCaptureReferences());
//       assertNull(compilerOptions0.getLanguageOut());
//       assertEquals(0, compiler0.getWarningCount());
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
//       assertEquals(true, compiler0.hasErrors());
//       assertEquals(false, compiler0.acceptConstKeyword());
//       assertEquals(1, compiler0.getErrorCount());
//       assertEquals(0.0, compiler0.getProgress(), 0.01D);
//       assertEquals(false, compiler0.isIdeMode());
//       assertEquals(false, compiler0.isTypeCheckingEnabled());
//       assertEquals("s", jSSourceFile0.getOriginalPath());
//       assertEquals("s", jSSourceFile0.getName());
//       assertEquals(true, jSSourceFile0.isExtern());
//       assertEquals("s", jSSourceFile0.toString());
//       assertNotNull(result0);
//       
//       DefaultPassConfig defaultPassConfig0 = new DefaultPassConfig(compilerOptions0);
//       assertFalse(compilerOptions0.optimizeCalls);
//       assertFalse(compilerOptions0.preferLineBreakAtEndOfFile);
//       assertFalse(compilerOptions0.flowSensitiveInlineVariables);
//       assertFalse(compilerOptions0.optimizeParameters);
//       assertFalse(compilerOptions0.inlineVariables);
//       assertFalse(compilerOptions0.disambiguateProperties);
//       assertFalse(compilerOptions0.jqueryPass);
//       assertFalse(compilerOptions0.collapseVariableDeclarations);
//       assertFalse(compilerOptions0.printInputDelimiter);
//       assertFalse(compilerOptions0.checkSuspiciousCode);
//       assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
//       assertFalse(compilerOptions0.ideMode);
//       assertFalse(compilerOptions0.computeFunctionSideEffects);
//       assertFalse(compilerOptions0.inlineLocalFunctions);
//       assertFalse(compilerOptions0.prettyPrint);
//       assertFalse(compilerOptions0.crossModuleCodeMotion);
//       assertFalse(compilerOptions0.checkTypes);
//       assertFalse(compilerOptions0.inlineFunctions);
//       assertFalse(compilerOptions0.removeUnusedClassProperties);
//       assertFalse(compilerOptions0.optimizeReturns);
//       assertFalse(compilerOptions0.crossModuleMethodMotion);
//       assertFalse(compilerOptions0.deadAssignmentElimination);
//       assertFalse(compilerOptions0.aliasAllStrings);
//       assertFalse(compilerOptions0.exportTestFunctions);
//       assertFalse(compilerOptions0.inlineGetters);
//       assertFalse(compilerOptions0.lineBreak);
//       assertFalse(compilerOptions0.generateExports);
//       assertFalse(compilerOptions0.ambiguateProperties);
//       assertFalse(compilerOptions0.convertToDottedProperties);
//       assertFalse(compilerOptions0.recordFunctionInformation);
//       assertFalse(compilerOptions0.reserveRawExports);
//       assertFalse(compilerOptions0.foldConstants);
//       assertFalse(compilerOptions0.checkSymbols);
//       assertFalse(compilerOptions0.labelRenaming);
//       assertFalse(compilerOptions0.moveFunctionDeclarations);
//       assertFalse(compilerOptions0.rewriteFunctionExpressions);
//       assertFalse(compilerOptions0.smartNameRemoval);
//       assertFalse(compilerOptions0.aliasKeywords);
//       assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
//       assertFalse(compilerOptions0.markAsCompiled);
//       assertFalse(compilerOptions0.removeUnusedVars);
//       assertFalse(compilerOptions0.removeUnusedLocalVars);
//       assertFalse(compilerOptions0.aliasExternals);
//       assertFalse(compilerOptions0.gatherCssNames);
//       assertFalse(compilerOptions0.coalesceVariableNames);
//       assertFalse(compilerOptions0.optimizeArgumentsArray);
//       assertFalse(compilerOptions0.checkControlStructures);
//       assertFalse(compilerOptions0.inlineConstantVars);
//       assertFalse(compilerOptions0.collapseAnonymousFunctions);
//       assertFalse(compilerOptions0.generatePseudoNames);
//       assertFalse(compilerOptions0.devirtualizePrototypeMethods);
//       assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
//       assertFalse(compilerOptions0.closurePass);
//       assertFalse(compilerOptions0.removeTryCatchFinally);
//       assertFalse(compilerOptions0.collapseProperties);
//       assertFalse(compilerOptions0.removeDeadCode);
//       assertFalse(compilerOptions0.markNoSideEffectCalls);
//       assertEquals(false, compilerOptions0.isExternExportsEnabled());
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compilerOptions0.getLanguageIn());
//       assertEquals(false, compilerOptions0.assumeStrictThis());
//       assertEquals(CompilerOptions.TracerMode.OFF, compilerOptions0.getTracerMode());
//       assertEquals(CompilerOptions.TweakProcessing.OFF, compilerOptions0.getTweakProcessing());
//       assertEquals(false, compilerOptions0.getInferTypes());
//       assertEquals(false, compilerOptions0.isRemoveUnusedClassProperties());
//       assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
//       assertEquals(false, compilerOptions0.assumeClosuresOnlyCaptureReferences());
//       assertNull(compilerOptions0.getLanguageOut());
//       assertNotNull(defaultPassConfig0);
//       
//       TypeCheck typeCheck0 = defaultPassConfig0.makeTypeCheck(compiler0);
//       assertFalse(compilerOptions0.optimizeCalls);
//       assertFalse(compilerOptions0.preferLineBreakAtEndOfFile);
//       assertFalse(compilerOptions0.flowSensitiveInlineVariables);
//       assertFalse(compilerOptions0.optimizeParameters);
//       assertFalse(compilerOptions0.inlineVariables);
//       assertFalse(compilerOptions0.disambiguateProperties);
//       assertFalse(compilerOptions0.jqueryPass);
//       assertFalse(compilerOptions0.collapseVariableDeclarations);
//       assertFalse(compilerOptions0.printInputDelimiter);
//       assertFalse(compilerOptions0.checkSuspiciousCode);
//       assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
//       assertFalse(compilerOptions0.ideMode);
//       assertFalse(compilerOptions0.computeFunctionSideEffects);
//       assertFalse(compilerOptions0.inlineLocalFunctions);
//       assertFalse(compilerOptions0.prettyPrint);
//       assertFalse(compilerOptions0.crossModuleCodeMotion);
//       assertFalse(compilerOptions0.checkTypes);
//       assertFalse(compilerOptions0.inlineFunctions);
//       assertFalse(compilerOptions0.removeUnusedClassProperties);
//       assertFalse(compilerOptions0.optimizeReturns);
//       assertFalse(compilerOptions0.crossModuleMethodMotion);
//       assertFalse(compilerOptions0.deadAssignmentElimination);
//       assertFalse(compilerOptions0.aliasAllStrings);
//       assertFalse(compilerOptions0.exportTestFunctions);
//       assertFalse(compilerOptions0.inlineGetters);
//       assertFalse(compilerOptions0.lineBreak);
//       assertFalse(compilerOptions0.generateExports);
//       assertFalse(compilerOptions0.ambiguateProperties);
//       assertFalse(compilerOptions0.convertToDottedProperties);
//       assertFalse(compilerOptions0.recordFunctionInformation);
//       assertFalse(compilerOptions0.reserveRawExports);
//       assertFalse(compilerOptions0.foldConstants);
//       assertFalse(compilerOptions0.checkSymbols);
//       assertFalse(compilerOptions0.labelRenaming);
//       assertFalse(compilerOptions0.moveFunctionDeclarations);
//       assertFalse(compilerOptions0.rewriteFunctionExpressions);
//       assertFalse(compilerOptions0.smartNameRemoval);
//       assertFalse(compilerOptions0.aliasKeywords);
//       assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
//       assertFalse(compilerOptions0.markAsCompiled);
//       assertFalse(compilerOptions0.removeUnusedVars);
//       assertFalse(compilerOptions0.removeUnusedLocalVars);
//       assertFalse(compilerOptions0.aliasExternals);
//       assertFalse(compilerOptions0.gatherCssNames);
//       assertFalse(compilerOptions0.coalesceVariableNames);
//       assertFalse(compilerOptions0.optimizeArgumentsArray);
//       assertFalse(compilerOptions0.checkControlStructures);
//       assertFalse(compilerOptions0.inlineConstantVars);
//       assertFalse(compilerOptions0.collapseAnonymousFunctions);
//       assertFalse(compilerOptions0.generatePseudoNames);
//       assertFalse(compilerOptions0.devirtualizePrototypeMethods);
//       assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
//       assertFalse(compilerOptions0.closurePass);
//       assertFalse(compilerOptions0.removeTryCatchFinally);
//       assertFalse(compilerOptions0.collapseProperties);
//       assertFalse(compilerOptions0.removeDeadCode);
//       assertFalse(compilerOptions0.markNoSideEffectCalls);
//       assertEquals(false, compilerOptions0.isExternExportsEnabled());
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compilerOptions0.getLanguageIn());
//       assertEquals(false, compilerOptions0.assumeStrictThis());
//       assertEquals(CompilerOptions.TracerMode.OFF, compilerOptions0.getTracerMode());
//       assertEquals(CompilerOptions.TweakProcessing.OFF, compilerOptions0.getTweakProcessing());
//       assertEquals(false, compilerOptions0.getInferTypes());
//       assertEquals(false, compilerOptions0.isRemoveUnusedClassProperties());
//       assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
//       assertEquals(false, compilerOptions0.assumeClosuresOnlyCaptureReferences());
//       assertNull(compilerOptions0.getLanguageOut());
//       assertEquals(0, compiler0.getWarningCount());
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
//       assertEquals(true, compiler0.hasErrors());
//       assertEquals(false, compiler0.acceptConstKeyword());
//       assertEquals(1, compiler0.getErrorCount());
//       assertEquals(0.0, compiler0.getProgress(), 0.01D);
//       assertEquals(false, compiler0.isIdeMode());
//       assertEquals(false, compiler0.isTypeCheckingEnabled());
//       assertNotNull(typeCheck0);
//       
//       double double0 = typeCheck0.getTypedPercent();
//       assertFalse(compilerOptions0.optimizeCalls);
//       assertFalse(compilerOptions0.preferLineBreakAtEndOfFile);
//       assertFalse(compilerOptions0.flowSensitiveInlineVariables);
//       assertFalse(compilerOptions0.optimizeParameters);
//       assertFalse(compilerOptions0.inlineVariables);
//       assertFalse(compilerOptions0.disambiguateProperties);
//       assertFalse(compilerOptions0.jqueryPass);
//       assertFalse(compilerOptions0.collapseVariableDeclarations);
//       assertFalse(compilerOptions0.printInputDelimiter);
//       assertFalse(compilerOptions0.checkSuspiciousCode);
//       assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
//       assertFalse(compilerOptions0.ideMode);
//       assertFalse(compilerOptions0.computeFunctionSideEffects);
//       assertFalse(compilerOptions0.inlineLocalFunctions);
//       assertFalse(compilerOptions0.prettyPrint);
//       assertFalse(compilerOptions0.crossModuleCodeMotion);
//       assertFalse(compilerOptions0.checkTypes);
//       assertFalse(compilerOptions0.inlineFunctions);
//       assertFalse(compilerOptions0.removeUnusedClassProperties);
//       assertFalse(compilerOptions0.optimizeReturns);
//       assertFalse(compilerOptions0.crossModuleMethodMotion);
//       assertFalse(compilerOptions0.deadAssignmentElimination);
//       assertFalse(compilerOptions0.aliasAllStrings);
//       assertFalse(compilerOptions0.exportTestFunctions);
//       assertFalse(compilerOptions0.inlineGetters);
//       assertFalse(compilerOptions0.lineBreak);
//       assertFalse(compilerOptions0.generateExports);
//       assertFalse(compilerOptions0.ambiguateProperties);
//       assertFalse(compilerOptions0.convertToDottedProperties);
//       assertFalse(compilerOptions0.recordFunctionInformation);
//       assertFalse(compilerOptions0.reserveRawExports);
//       assertFalse(compilerOptions0.foldConstants);
//       assertFalse(compilerOptions0.checkSymbols);
//       assertFalse(compilerOptions0.labelRenaming);
//       assertFalse(compilerOptions0.moveFunctionDeclarations);
//       assertFalse(compilerOptions0.rewriteFunctionExpressions);
//       assertFalse(compilerOptions0.smartNameRemoval);
//       assertFalse(compilerOptions0.aliasKeywords);
//       assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
//       assertFalse(compilerOptions0.markAsCompiled);
//       assertFalse(compilerOptions0.removeUnusedVars);
//       assertFalse(compilerOptions0.removeUnusedLocalVars);
//       assertFalse(compilerOptions0.aliasExternals);
//       assertFalse(compilerOptions0.gatherCssNames);
//       assertFalse(compilerOptions0.coalesceVariableNames);
//       assertFalse(compilerOptions0.optimizeArgumentsArray);
//       assertFalse(compilerOptions0.checkControlStructures);
//       assertFalse(compilerOptions0.inlineConstantVars);
//       assertFalse(compilerOptions0.collapseAnonymousFunctions);
//       assertFalse(compilerOptions0.generatePseudoNames);
//       assertFalse(compilerOptions0.devirtualizePrototypeMethods);
//       assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
//       assertFalse(compilerOptions0.closurePass);
//       assertFalse(compilerOptions0.removeTryCatchFinally);
//       assertFalse(compilerOptions0.collapseProperties);
//       assertFalse(compilerOptions0.removeDeadCode);
//       assertFalse(compilerOptions0.markNoSideEffectCalls);
//       assertEquals(false, compilerOptions0.isExternExportsEnabled());
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compilerOptions0.getLanguageIn());
//       assertEquals(false, compilerOptions0.assumeStrictThis());
//       assertEquals(CompilerOptions.TracerMode.OFF, compilerOptions0.getTracerMode());
//       assertEquals(CompilerOptions.TweakProcessing.OFF, compilerOptions0.getTweakProcessing());
//       assertEquals(false, compilerOptions0.getInferTypes());
//       assertEquals(false, compilerOptions0.isRemoveUnusedClassProperties());
//       assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
//       assertEquals(false, compilerOptions0.assumeClosuresOnlyCaptureReferences());
//       assertNull(compilerOptions0.getLanguageOut());
//       assertEquals(0, compiler0.getWarningCount());
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
//       assertEquals(true, compiler0.hasErrors());
//       assertEquals(false, compiler0.acceptConstKeyword());
//       assertEquals(1, compiler0.getErrorCount());
//       assertEquals(0.0, compiler0.getProgress(), 0.01D);
//       assertEquals(false, compiler0.isIdeMode());
//       assertEquals(false, compiler0.isTypeCheckingEnabled());
//       assertEquals(0.0, double0, 0.01D);
//       
//       NodeTraversal nodeTraversal0 = null;
//       int int0 = 2246;
//       Node node0 = Node.newNumber(double0, int0, int0);
//       assertFalse(compilerOptions0.optimizeCalls);
//       assertFalse(compilerOptions0.preferLineBreakAtEndOfFile);
//       assertFalse(compilerOptions0.flowSensitiveInlineVariables);
//       assertFalse(compilerOptions0.optimizeParameters);
//       assertFalse(compilerOptions0.inlineVariables);
//       assertFalse(compilerOptions0.disambiguateProperties);
//       assertFalse(compilerOptions0.jqueryPass);
//       assertFalse(compilerOptions0.collapseVariableDeclarations);
//       assertFalse(compilerOptions0.printInputDelimiter);
//       assertFalse(compilerOptions0.checkSuspiciousCode);
//       assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
//       assertFalse(compilerOptions0.ideMode);
//       assertFalse(compilerOptions0.computeFunctionSideEffects);
//       assertFalse(compilerOptions0.inlineLocalFunctions);
//       assertFalse(compilerOptions0.prettyPrint);
//       assertFalse(compilerOptions0.crossModuleCodeMotion);
//       assertFalse(compilerOptions0.checkTypes);
//       assertFalse(compilerOptions0.inlineFunctions);
//       assertFalse(compilerOptions0.removeUnusedClassProperties);
//       assertFalse(compilerOptions0.optimizeReturns);
//       assertFalse(compilerOptions0.crossModuleMethodMotion);
//       assertFalse(compilerOptions0.deadAssignmentElimination);
//       assertFalse(compilerOptions0.aliasAllStrings);
//       assertFalse(compilerOptions0.exportTestFunctions);
//       assertFalse(compilerOptions0.inlineGetters);
//       assertFalse(compilerOptions0.lineBreak);
//       assertFalse(compilerOptions0.generateExports);
//       assertFalse(compilerOptions0.ambiguateProperties);
//       assertFalse(compilerOptions0.convertToDottedProperties);
//       assertFalse(compilerOptions0.recordFunctionInformation);
//       assertFalse(compilerOptions0.reserveRawExports);
//       assertFalse(compilerOptions0.foldConstants);
//       assertFalse(compilerOptions0.checkSymbols);
//       assertFalse(compilerOptions0.labelRenaming);
//       assertFalse(compilerOptions0.moveFunctionDeclarations);
//       assertFalse(compilerOptions0.rewriteFunctionExpressions);
//       assertFalse(compilerOptions0.smartNameRemoval);
//       assertFalse(compilerOptions0.aliasKeywords);
//       assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
//       assertFalse(compilerOptions0.markAsCompiled);
//       assertFalse(compilerOptions0.removeUnusedVars);
//       assertFalse(compilerOptions0.removeUnusedLocalVars);
//       assertFalse(compilerOptions0.aliasExternals);
//       assertFalse(compilerOptions0.gatherCssNames);
//       assertFalse(compilerOptions0.coalesceVariableNames);
//       assertFalse(compilerOptions0.optimizeArgumentsArray);
//       assertFalse(compilerOptions0.checkControlStructures);
//       assertFalse(compilerOptions0.inlineConstantVars);
//       assertFalse(compilerOptions0.collapseAnonymousFunctions);
//       assertFalse(compilerOptions0.generatePseudoNames);
//       assertFalse(compilerOptions0.devirtualizePrototypeMethods);
//       assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
//       assertFalse(compilerOptions0.closurePass);
//       assertFalse(compilerOptions0.removeTryCatchFinally);
//       assertFalse(compilerOptions0.collapseProperties);
//       assertFalse(compilerOptions0.removeDeadCode);
//       assertFalse(compilerOptions0.markNoSideEffectCalls);
//       assertEquals(false, node0.isGetterDef());
//       assertEquals(false, node0.isIn());
//       assertEquals(false, node0.isNot());
//       assertNull(node0.getSourceFileName());
//       assertEquals(true, node0.isNumber());
//       assertEquals(false, node0.isGetElem());
//       assertEquals(false, node0.isName());
//       assertEquals(false, node0.isIf());
//       assertEquals(false, node0.isExprResult());
//       assertEquals(false, node0.isStringKey());
//       assertEquals(0, node0.getChildCount());
//       assertEquals(false, node0.isVoid());
//       assertEquals(false, node0.isSyntheticBlock());
//       assertEquals(false, node0.isQuotedString());
//       assertEquals(false, node0.isCall());
//       assertEquals(false, node0.isScript());
//       assertEquals(false, node0.isNE());
//       assertEquals(false, node0.isAnd());
//       assertEquals(false, node0.isEmpty());
//       assertEquals(false, node0.isComma());
//       assertEquals(false, node0.isThrow());
//       assertEquals(false, node0.isDefaultCase());
//       assertEquals(false, node0.isVarArgs());
//       assertEquals(false, node0.isInc());
//       assertEquals(false, node0.isParamList());
//       assertEquals(false, node0.isBreak());
//       assertEquals(false, node0.isArrayLit());
//       assertEquals(false, node0.isContinue());
//       assertEquals(false, node0.isTry());
//       assertEquals(false, node0.isBlock());
//       assertEquals(39, node0.getType());
//       assertEquals(false, node0.isFor());
//       assertEquals(false, node0.isDelProp());
//       assertEquals(false, node0.isString());
//       assertEquals(false, node0.wasEmptyNode());
//       assertEquals(false, node0.isNew());
//       assertEquals(false, node0.isThis());
//       assertEquals(2246, node0.getCharno());
//       assertEquals(false, node0.isAssignAdd());
//       assertEquals(false, node0.isHook());
//       assertEquals(false, node0.isSetterDef());
//       assertEquals(false, node0.isLabel());
//       assertEquals(false, node0.isOnlyModifiesThisCall());
//       assertEquals(false, node0.isCase());
//       assertEquals(false, node0.isReturn());
//       assertEquals(false, node0.isLocalResultCall());
//       assertEquals(0, node0.getSideEffectFlags());
//       assertEquals(false, node0.isInstanceOf());
//       assertEquals(false, node0.isCatch());
//       assertEquals(false, node0.isOr());
//       assertEquals(9201862, node0.getSourcePosition());
//       assertEquals(false, node0.isTrue());
//       assertEquals(false, node0.isFalse());
//       assertEquals(false, node0.isGetProp());
//       assertEquals(false, node0.isSwitch());
//       assertEquals(0, node0.getLength());
//       assertEquals(false, node0.isDebugger());
//       assertEquals(false, node0.isFromExterns());
//       assertEquals(false, node0.isWhile());
//       assertEquals(false, node0.isObjectLit());
//       assertEquals(false, node0.isNull());
//       assertEquals(false, node0.isDo());
//       assertEquals(false, node0.isAdd());
//       assertEquals(false, node0.isNoSideEffectsCall());
//       assertEquals(false, node0.hasChildren());
//       assertEquals(false, node0.isWith());
//       assertEquals(false, node0.isOptionalArg());
//       assertEquals(false, node0.isFunction());
//       assertEquals(false, node0.isTypeOf());
//       assertEquals(2246, node0.getLineno());
//       assertEquals(false, node0.isLabelName());
//       assertEquals(false, node0.isAssign());
//       assertEquals(false, node0.isVar());
//       assertEquals(false, node0.hasMoreThanOneChild());
//       assertEquals(false, node0.isRegExp());
//       assertEquals(false, node0.isDec());
//       assertEquals(false, node0.hasOneChild());
//       assertEquals(false, compilerOptions0.isExternExportsEnabled());
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compilerOptions0.getLanguageIn());
//       assertEquals(false, compilerOptions0.assumeStrictThis());
//       assertEquals(CompilerOptions.TracerMode.OFF, compilerOptions0.getTracerMode());
//       assertEquals(CompilerOptions.TweakProcessing.OFF, compilerOptions0.getTweakProcessing());
//       assertEquals(false, compilerOptions0.getInferTypes());
//       assertEquals(false, compilerOptions0.isRemoveUnusedClassProperties());
//       assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
//       assertEquals(false, compilerOptions0.assumeClosuresOnlyCaptureReferences());
//       assertNull(compilerOptions0.getLanguageOut());
//       assertEquals(0, compiler0.getWarningCount());
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
//       assertEquals(true, compiler0.hasErrors());
//       assertEquals(false, compiler0.acceptConstKeyword());
//       assertEquals(1, compiler0.getErrorCount());
//       assertEquals(0.0, compiler0.getProgress(), 0.01D);
//       assertEquals(false, compiler0.isIdeMode());
//       assertEquals(false, compiler0.isTypeCheckingEnabled());
//       assertNotNull(node0);
//       
//       typeCheck0.visit(nodeTraversal0, node0, node0);
//       assertFalse(compilerOptions0.optimizeCalls);
//       assertFalse(compilerOptions0.preferLineBreakAtEndOfFile);
//       assertFalse(compilerOptions0.flowSensitiveInlineVariables);
//       assertFalse(compilerOptions0.optimizeParameters);
//       assertFalse(compilerOptions0.inlineVariables);
//       assertFalse(compilerOptions0.disambiguateProperties);
//       assertFalse(compilerOptions0.jqueryPass);
//       assertFalse(compilerOptions0.collapseVariableDeclarations);
//       assertFalse(compilerOptions0.printInputDelimiter);
//       assertFalse(compilerOptions0.checkSuspiciousCode);
//       assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
//       assertFalse(compilerOptions0.ideMode);
//       assertFalse(compilerOptions0.computeFunctionSideEffects);
//       assertFalse(compilerOptions0.inlineLocalFunctions);
//       assertFalse(compilerOptions0.prettyPrint);
//       assertFalse(compilerOptions0.crossModuleCodeMotion);
//       assertFalse(compilerOptions0.checkTypes);
//       assertFalse(compilerOptions0.inlineFunctions);
//       assertFalse(compilerOptions0.removeUnusedClassProperties);
//       assertFalse(compilerOptions0.optimizeReturns);
//       assertFalse(compilerOptions0.crossModuleMethodMotion);
//       assertFalse(compilerOptions0.deadAssignmentElimination);
//       assertFalse(compilerOptions0.aliasAllStrings);
//       assertFalse(compilerOptions0.exportTestFunctions);
//       assertFalse(compilerOptions0.inlineGetters);
//       assertFalse(compilerOptions0.lineBreak);
//       assertFalse(compilerOptions0.generateExports);
//       assertFalse(compilerOptions0.ambiguateProperties);
//       assertFalse(compilerOptions0.convertToDottedProperties);
//       assertFalse(compilerOptions0.recordFunctionInformation);
//       assertFalse(compilerOptions0.reserveRawExports);
//       assertFalse(compilerOptions0.foldConstants);
//       assertFalse(compilerOptions0.checkSymbols);
//       assertFalse(compilerOptions0.labelRenaming);
//       assertFalse(compilerOptions0.moveFunctionDeclarations);
//       assertFalse(compilerOptions0.rewriteFunctionExpressions);
//       assertFalse(compilerOptions0.smartNameRemoval);
//       assertFalse(compilerOptions0.aliasKeywords);
//       assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
//       assertFalse(compilerOptions0.markAsCompiled);
//       assertFalse(compilerOptions0.removeUnusedVars);
//       assertFalse(compilerOptions0.removeUnusedLocalVars);
//       assertFalse(compilerOptions0.aliasExternals);
//       assertFalse(compilerOptions0.gatherCssNames);
//       assertFalse(compilerOptions0.coalesceVariableNames);
//       assertFalse(compilerOptions0.optimizeArgumentsArray);
//       assertFalse(compilerOptions0.checkControlStructures);
//       assertFalse(compilerOptions0.inlineConstantVars);
//       assertFalse(compilerOptions0.collapseAnonymousFunctions);
//       assertFalse(compilerOptions0.generatePseudoNames);
//       assertFalse(compilerOptions0.devirtualizePrototypeMethods);
//       assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
//       assertFalse(compilerOptions0.closurePass);
//       assertFalse(compilerOptions0.removeTryCatchFinally);
//       assertFalse(compilerOptions0.collapseProperties);
//       assertFalse(compilerOptions0.removeDeadCode);
//       assertFalse(compilerOptions0.markNoSideEffectCalls);
//       assertEquals(false, node0.isGetterDef());
//       assertEquals(false, node0.isIn());
//       assertEquals(false, node0.isNot());
//       assertNull(node0.getSourceFileName());
//       assertEquals(true, node0.isNumber());
//       assertEquals(false, node0.isGetElem());
//       assertEquals(false, node0.isName());
//       assertEquals(false, node0.isIf());
//       assertEquals(false, node0.isExprResult());
//       assertEquals(false, node0.isStringKey());
//       assertEquals(0, node0.getChildCount());
//       assertEquals(false, node0.isVoid());
//       assertEquals(false, node0.isSyntheticBlock());
//       assertEquals(false, node0.isQuotedString());
//       assertEquals(false, node0.isCall());
//       assertEquals(false, node0.isScript());
//       assertEquals(false, node0.isNE());
//       assertEquals(false, node0.isAnd());
//       assertEquals(false, node0.isEmpty());
//       assertEquals(false, node0.isComma());
//       assertEquals(false, node0.isThrow());
//       assertEquals(false, node0.isDefaultCase());
//       assertEquals(false, node0.isVarArgs());
//       assertEquals(false, node0.isInc());
//       assertEquals(false, node0.isParamList());
//       assertEquals(false, node0.isBreak());
//       assertEquals(false, node0.isArrayLit());
//       assertEquals(false, node0.isContinue());
//       assertEquals(false, node0.isTry());
//       assertEquals(false, node0.isBlock());
//       assertEquals(39, node0.getType());
//       assertEquals(false, node0.isFor());
//       assertEquals(false, node0.isDelProp());
//       assertEquals(false, node0.isString());
//       assertEquals(false, node0.wasEmptyNode());
//       assertEquals(false, node0.isNew());
//       assertEquals(false, node0.isThis());
//       assertEquals(2246, node0.getCharno());
//       assertEquals(false, node0.isAssignAdd());
//       assertEquals(false, node0.isHook());
//       assertEquals(false, node0.isSetterDef());
//       assertEquals(false, node0.isLabel());
//       assertEquals(false, node0.isOnlyModifiesThisCall());
//       assertEquals(false, node0.isCase());
//       assertEquals(false, node0.isReturn());
//       assertEquals(false, node0.isLocalResultCall());
//       assertEquals(0, node0.getSideEffectFlags());
//       assertEquals(false, node0.isInstanceOf());
//       assertEquals(false, node0.isCatch());
//       assertEquals(false, node0.isOr());
//       assertEquals(9201862, node0.getSourcePosition());
//       assertEquals(false, node0.isTrue());
//       assertEquals(false, node0.isFalse());
//       assertEquals(false, node0.isGetProp());
//       assertEquals(false, node0.isSwitch());
//       assertEquals(0, node0.getLength());
//       assertEquals(false, node0.isDebugger());
//       assertEquals(false, node0.isFromExterns());
//       assertEquals(false, node0.isWhile());
//       assertEquals(false, node0.isObjectLit());
//       assertEquals(false, node0.isNull());
//       assertEquals(false, node0.isDo());
//       assertEquals(false, node0.isAdd());
//       assertEquals(false, node0.isNoSideEffectsCall());
//       assertEquals(false, node0.hasChildren());
//       assertEquals(false, node0.isWith());
//       assertEquals(false, node0.isOptionalArg());
//       assertEquals(false, node0.isFunction());
//       assertEquals(false, node0.isTypeOf());
//       assertEquals(2246, node0.getLineno());
//       assertEquals(false, node0.isLabelName());
//       assertEquals(false, node0.isAssign());
//       assertEquals(false, node0.isVar());
//       assertEquals(false, node0.hasMoreThanOneChild());
//       assertEquals(false, node0.isRegExp());
//       assertEquals(false, node0.isDec());
//       assertEquals(false, node0.hasOneChild());
//       assertEquals(false, compilerOptions0.isExternExportsEnabled());
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compilerOptions0.getLanguageIn());
//       assertEquals(false, compilerOptions0.assumeStrictThis());
//       assertEquals(CompilerOptions.TracerMode.OFF, compilerOptions0.getTracerMode());
//       assertEquals(CompilerOptions.TweakProcessing.OFF, compilerOptions0.getTweakProcessing());
//       assertEquals(false, compilerOptions0.getInferTypes());
//       assertEquals(false, compilerOptions0.isRemoveUnusedClassProperties());
//       assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
//       assertEquals(false, compilerOptions0.assumeClosuresOnlyCaptureReferences());
//       assertNull(compilerOptions0.getLanguageOut());
//       assertEquals(0, compiler0.getWarningCount());
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
//       assertEquals(true, compiler0.hasErrors());
//       assertEquals(false, compiler0.acceptConstKeyword());
//       assertEquals(1, compiler0.getErrorCount());
//       assertEquals(0.0, compiler0.getProgress(), 0.01D);
//       assertEquals(false, compiler0.isIdeMode());
//       assertEquals(false, compiler0.isTypeCheckingEnabled());
//       
//       double double1 = typeCheck0.getTypedPercent();
//       assertFalse(double1 == double0);
//       assertFalse(compilerOptions0.optimizeCalls);
//       assertFalse(compilerOptions0.preferLineBreakAtEndOfFile);
//       assertFalse(compilerOptions0.flowSensitiveInlineVariables);
//       assertFalse(compilerOptions0.optimizeParameters);
//       assertFalse(compilerOptions0.inlineVariables);
//       assertFalse(compilerOptions0.disambiguateProperties);
//       assertFalse(compilerOptions0.jqueryPass);
//       assertFalse(compilerOptions0.collapseVariableDeclarations);
//       assertFalse(compilerOptions0.printInputDelimiter);
//       assertFalse(compilerOptions0.checkSuspiciousCode);
//       assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
//       assertFalse(compilerOptions0.ideMode);
//       assertFalse(compilerOptions0.computeFunctionSideEffects);
//       assertFalse(compilerOptions0.inlineLocalFunctions);
//       assertFalse(compilerOptions0.prettyPrint);
//       assertFalse(compilerOptions0.crossModuleCodeMotion);
//       assertFalse(compilerOptions0.checkTypes);
//       assertFalse(compilerOptions0.inlineFunctions);
//       assertFalse(compilerOptions0.removeUnusedClassProperties);
//       assertFalse(compilerOptions0.optimizeReturns);
//       assertFalse(compilerOptions0.crossModuleMethodMotion);
//       assertFalse(compilerOptions0.deadAssignmentElimination);
//       assertFalse(compilerOptions0.aliasAllStrings);
//       assertFalse(compilerOptions0.exportTestFunctions);
//       assertFalse(compilerOptions0.inlineGetters);
//       assertFalse(compilerOptions0.lineBreak);
//       assertFalse(compilerOptions0.generateExports);
//       assertFalse(compilerOptions0.ambiguateProperties);
//       assertFalse(compilerOptions0.convertToDottedProperties);
//       assertFalse(compilerOptions0.recordFunctionInformation);
//       assertFalse(compilerOptions0.reserveRawExports);
//       assertFalse(compilerOptions0.foldConstants);
//       assertFalse(compilerOptions0.checkSymbols);
//       assertFalse(compilerOptions0.labelRenaming);
//       assertFalse(compilerOptions0.moveFunctionDeclarations);
//       assertFalse(compilerOptions0.rewriteFunctionExpressions);
//       assertFalse(compilerOptions0.smartNameRemoval);
//       assertFalse(compilerOptions0.aliasKeywords);
//       assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
//       assertFalse(compilerOptions0.markAsCompiled);
//       assertFalse(compilerOptions0.removeUnusedVars);
//       assertFalse(compilerOptions0.removeUnusedLocalVars);
//       assertFalse(compilerOptions0.aliasExternals);
//       assertFalse(compilerOptions0.gatherCssNames);
//       assertFalse(compilerOptions0.coalesceVariableNames);
//       assertFalse(compilerOptions0.optimizeArgumentsArray);
//       assertFalse(compilerOptions0.checkControlStructures);
//       assertFalse(compilerOptions0.inlineConstantVars);
//       assertFalse(compilerOptions0.collapseAnonymousFunctions);
//       assertFalse(compilerOptions0.generatePseudoNames);
//       assertFalse(compilerOptions0.devirtualizePrototypeMethods);
//       assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
//       assertFalse(compilerOptions0.closurePass);
//       assertFalse(compilerOptions0.removeTryCatchFinally);
//       assertFalse(compilerOptions0.collapseProperties);
//       assertFalse(compilerOptions0.removeDeadCode);
//       assertFalse(compilerOptions0.markNoSideEffectCalls);
//       assertEquals(false, compilerOptions0.isExternExportsEnabled());
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compilerOptions0.getLanguageIn());
//       assertEquals(false, compilerOptions0.assumeStrictThis());
//       assertEquals(CompilerOptions.TracerMode.OFF, compilerOptions0.getTracerMode());
//       assertEquals(CompilerOptions.TweakProcessing.OFF, compilerOptions0.getTweakProcessing());
//       assertEquals(false, compilerOptions0.getInferTypes());
//       assertEquals(false, compilerOptions0.isRemoveUnusedClassProperties());
//       assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
//       assertEquals(false, compilerOptions0.assumeClosuresOnlyCaptureReferences());
//       assertNull(compilerOptions0.getLanguageOut());
//       assertEquals(0, compiler0.getWarningCount());
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
//       assertEquals(true, compiler0.hasErrors());
//       assertEquals(false, compiler0.acceptConstKeyword());
//       assertEquals(1, compiler0.getErrorCount());
//       assertEquals(0.0, compiler0.getProgress(), 0.01D);
//       assertEquals(false, compiler0.isIdeMode());
//       assertEquals(false, compiler0.isTypeCheckingEnabled());
//       assertEquals(100.0, double1, 0.01D);
//   }

  @Test
  public void test1() {}
//   @Test
//   public void test1()  throws Throwable  {
//       Compiler compiler0 = new Compiler();
//       assertEquals(0.0, compiler0.getProgress(), 0.01D);
//       assertNotNull(compiler0);
//       
//       String string0 = "s";
//       MockFile mockFile0 = new MockFile(string0);
//       assertNotNull(mockFile0);
//       
//       JSSourceFile jSSourceFile0 = JSSourceFile.fromFile((File) mockFile0);
//       assertEquals("s", jSSourceFile0.getName());
//       assertEquals("s", jSSourceFile0.toString());
//       assertEquals("s", jSSourceFile0.getOriginalPath());
//       assertEquals(false, jSSourceFile0.isExtern());
//       assertNotNull(jSSourceFile0);
//       
//       CompilerOptions compilerOptions0 = new CompilerOptions();
//       assertFalse(compilerOptions0.crossModuleMethodMotion);
//       assertFalse(compilerOptions0.disambiguateProperties);
//       assertFalse(compilerOptions0.flowSensitiveInlineVariables);
//       assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
//       assertFalse(compilerOptions0.foldConstants);
//       assertFalse(compilerOptions0.checkTypes);
//       assertFalse(compilerOptions0.optimizeReturns);
//       assertFalse(compilerOptions0.coalesceVariableNames);
//       assertFalse(compilerOptions0.collapseVariableDeclarations);
//       assertFalse(compilerOptions0.removeTryCatchFinally);
//       assertFalse(compilerOptions0.gatherCssNames);
//       assertFalse(compilerOptions0.computeFunctionSideEffects);
//       assertFalse(compilerOptions0.removeUnusedClassProperties);
//       assertFalse(compilerOptions0.deadAssignmentElimination);
//       assertFalse(compilerOptions0.inlineVariables);
//       assertFalse(compilerOptions0.aliasKeywords);
//       assertFalse(compilerOptions0.checkSuspiciousCode);
//       assertFalse(compilerOptions0.aliasExternals);
//       assertFalse(compilerOptions0.collapseAnonymousFunctions);
//       assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
//       assertFalse(compilerOptions0.inlineGetters);
//       assertFalse(compilerOptions0.aliasAllStrings);
//       assertFalse(compilerOptions0.convertToDottedProperties);
//       assertFalse(compilerOptions0.markAsCompiled);
//       assertFalse(compilerOptions0.markNoSideEffectCalls);
//       assertFalse(compilerOptions0.exportTestFunctions);
//       assertFalse(compilerOptions0.inlineFunctions);
//       assertFalse(compilerOptions0.generateExports);
//       assertFalse(compilerOptions0.optimizeParameters);
//       assertFalse(compilerOptions0.removeUnusedVars);
//       assertFalse(compilerOptions0.closurePass);
//       assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
//       assertFalse(compilerOptions0.devirtualizePrototypeMethods);
//       assertFalse(compilerOptions0.rewriteFunctionExpressions);
//       assertFalse(compilerOptions0.printInputDelimiter);
//       assertFalse(compilerOptions0.inlineLocalFunctions);
//       assertFalse(compilerOptions0.optimizeArgumentsArray);
//       assertFalse(compilerOptions0.labelRenaming);
//       assertFalse(compilerOptions0.preferLineBreakAtEndOfFile);
//       assertFalse(compilerOptions0.generatePseudoNames);
//       assertFalse(compilerOptions0.collapseProperties);
//       assertFalse(compilerOptions0.moveFunctionDeclarations);
//       assertFalse(compilerOptions0.removeUnusedLocalVars);
//       assertFalse(compilerOptions0.checkControlStructures);
//       assertFalse(compilerOptions0.jqueryPass);
//       assertFalse(compilerOptions0.recordFunctionInformation);
//       assertFalse(compilerOptions0.prettyPrint);
//       assertFalse(compilerOptions0.checkSymbols);
//       assertFalse(compilerOptions0.crossModuleCodeMotion);
//       assertFalse(compilerOptions0.smartNameRemoval);
//       assertFalse(compilerOptions0.optimizeCalls);
//       assertFalse(compilerOptions0.ideMode);
//       assertFalse(compilerOptions0.removeDeadCode);
//       assertFalse(compilerOptions0.ambiguateProperties);
//       assertFalse(compilerOptions0.lineBreak);
//       assertFalse(compilerOptions0.reserveRawExports);
//       assertFalse(compilerOptions0.inlineConstantVars);
//       assertEquals(false, compilerOptions0.assumeStrictThis());
//       assertEquals(false, compilerOptions0.assumeClosuresOnlyCaptureReferences());
//       assertEquals(CompilerOptions.TweakProcessing.OFF, compilerOptions0.getTweakProcessing());
//       assertEquals(false, compilerOptions0.getInferTypes());
//       assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
//       assertEquals(false, compilerOptions0.isRemoveUnusedClassProperties());
//       assertEquals(false, compilerOptions0.isExternExportsEnabled());
//       assertNull(compilerOptions0.getLanguageOut());
//       assertEquals(CompilerOptions.TracerMode.OFF, compilerOptions0.getTracerMode());
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compilerOptions0.getLanguageIn());
//       assertNotNull(compilerOptions0);
//       
//       Result result0 = compiler0.compile((SourceFile) jSSourceFile0, (SourceFile) jSSourceFile0, compilerOptions0);
//       assertFalse(compilerOptions0.crossModuleMethodMotion);
//       assertFalse(compilerOptions0.disambiguateProperties);
//       assertFalse(compilerOptions0.flowSensitiveInlineVariables);
//       assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
//       assertFalse(compilerOptions0.foldConstants);
//       assertFalse(compilerOptions0.checkTypes);
//       assertFalse(compilerOptions0.optimizeReturns);
//       assertFalse(compilerOptions0.coalesceVariableNames);
//       assertFalse(compilerOptions0.collapseVariableDeclarations);
//       assertFalse(compilerOptions0.removeTryCatchFinally);
//       assertFalse(compilerOptions0.gatherCssNames);
//       assertFalse(compilerOptions0.computeFunctionSideEffects);
//       assertFalse(compilerOptions0.removeUnusedClassProperties);
//       assertFalse(compilerOptions0.deadAssignmentElimination);
//       assertFalse(compilerOptions0.inlineVariables);
//       assertFalse(compilerOptions0.aliasKeywords);
//       assertFalse(compilerOptions0.checkSuspiciousCode);
//       assertFalse(compilerOptions0.aliasExternals);
//       assertFalse(compilerOptions0.collapseAnonymousFunctions);
//       assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
//       assertFalse(compilerOptions0.inlineGetters);
//       assertFalse(compilerOptions0.aliasAllStrings);
//       assertFalse(compilerOptions0.convertToDottedProperties);
//       assertFalse(compilerOptions0.markAsCompiled);
//       assertFalse(compilerOptions0.markNoSideEffectCalls);
//       assertFalse(compilerOptions0.exportTestFunctions);
//       assertFalse(compilerOptions0.inlineFunctions);
//       assertFalse(compilerOptions0.generateExports);
//       assertFalse(compilerOptions0.optimizeParameters);
//       assertFalse(compilerOptions0.removeUnusedVars);
//       assertFalse(compilerOptions0.closurePass);
//       assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
//       assertFalse(compilerOptions0.devirtualizePrototypeMethods);
//       assertFalse(compilerOptions0.rewriteFunctionExpressions);
//       assertFalse(compilerOptions0.printInputDelimiter);
//       assertFalse(compilerOptions0.inlineLocalFunctions);
//       assertFalse(compilerOptions0.optimizeArgumentsArray);
//       assertFalse(compilerOptions0.labelRenaming);
//       assertFalse(compilerOptions0.preferLineBreakAtEndOfFile);
//       assertFalse(compilerOptions0.generatePseudoNames);
//       assertFalse(compilerOptions0.collapseProperties);
//       assertFalse(compilerOptions0.moveFunctionDeclarations);
//       assertFalse(compilerOptions0.removeUnusedLocalVars);
//       assertFalse(compilerOptions0.checkControlStructures);
//       assertFalse(compilerOptions0.jqueryPass);
//       assertFalse(compilerOptions0.recordFunctionInformation);
//       assertFalse(compilerOptions0.prettyPrint);
//       assertFalse(compilerOptions0.checkSymbols);
//       assertFalse(compilerOptions0.crossModuleCodeMotion);
//       assertFalse(compilerOptions0.smartNameRemoval);
//       assertFalse(compilerOptions0.optimizeCalls);
//       assertFalse(compilerOptions0.ideMode);
//       assertFalse(compilerOptions0.removeDeadCode);
//       assertFalse(compilerOptions0.ambiguateProperties);
//       assertFalse(compilerOptions0.lineBreak);
//       assertFalse(compilerOptions0.reserveRawExports);
//       assertFalse(compilerOptions0.inlineConstantVars);
//       assertEquals(false, compilerOptions0.assumeStrictThis());
//       assertEquals(false, compilerOptions0.assumeClosuresOnlyCaptureReferences());
//       assertEquals(CompilerOptions.TweakProcessing.OFF, compilerOptions0.getTweakProcessing());
//       assertEquals(false, compilerOptions0.getInferTypes());
//       assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
//       assertEquals(false, compilerOptions0.isRemoveUnusedClassProperties());
//       assertEquals(false, compilerOptions0.isExternExportsEnabled());
//       assertNull(compilerOptions0.getLanguageOut());
//       assertEquals(CompilerOptions.TracerMode.OFF, compilerOptions0.getTracerMode());
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compilerOptions0.getLanguageIn());
//       assertEquals("s", jSSourceFile0.getName());
//       assertEquals("s", jSSourceFile0.toString());
//       assertEquals("s", jSSourceFile0.getOriginalPath());
//       assertEquals(true, jSSourceFile0.isExtern());
//       assertEquals(true, compiler0.hasErrors());
//       assertEquals(0, compiler0.getWarningCount());
//       assertEquals(0.0, compiler0.getProgress(), 0.01D);
//       assertEquals(1, compiler0.getErrorCount());
//       assertEquals(false, compiler0.isTypeCheckingEnabled());
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
//       assertEquals(false, compiler0.acceptConstKeyword());
//       assertEquals(false, compiler0.isIdeMode());
//       assertNotNull(result0);
//       
//       DefaultPassConfig defaultPassConfig0 = new DefaultPassConfig(compilerOptions0);
//       assertFalse(compilerOptions0.crossModuleMethodMotion);
//       assertFalse(compilerOptions0.disambiguateProperties);
//       assertFalse(compilerOptions0.flowSensitiveInlineVariables);
//       assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
//       assertFalse(compilerOptions0.foldConstants);
//       assertFalse(compilerOptions0.checkTypes);
//       assertFalse(compilerOptions0.optimizeReturns);
//       assertFalse(compilerOptions0.coalesceVariableNames);
//       assertFalse(compilerOptions0.collapseVariableDeclarations);
//       assertFalse(compilerOptions0.removeTryCatchFinally);
//       assertFalse(compilerOptions0.gatherCssNames);
//       assertFalse(compilerOptions0.computeFunctionSideEffects);
//       assertFalse(compilerOptions0.removeUnusedClassProperties);
//       assertFalse(compilerOptions0.deadAssignmentElimination);
//       assertFalse(compilerOptions0.inlineVariables);
//       assertFalse(compilerOptions0.aliasKeywords);
//       assertFalse(compilerOptions0.checkSuspiciousCode);
//       assertFalse(compilerOptions0.aliasExternals);
//       assertFalse(compilerOptions0.collapseAnonymousFunctions);
//       assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
//       assertFalse(compilerOptions0.inlineGetters);
//       assertFalse(compilerOptions0.aliasAllStrings);
//       assertFalse(compilerOptions0.convertToDottedProperties);
//       assertFalse(compilerOptions0.markAsCompiled);
//       assertFalse(compilerOptions0.markNoSideEffectCalls);
//       assertFalse(compilerOptions0.exportTestFunctions);
//       assertFalse(compilerOptions0.inlineFunctions);
//       assertFalse(compilerOptions0.generateExports);
//       assertFalse(compilerOptions0.optimizeParameters);
//       assertFalse(compilerOptions0.removeUnusedVars);
//       assertFalse(compilerOptions0.closurePass);
//       assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
//       assertFalse(compilerOptions0.devirtualizePrototypeMethods);
//       assertFalse(compilerOptions0.rewriteFunctionExpressions);
//       assertFalse(compilerOptions0.printInputDelimiter);
//       assertFalse(compilerOptions0.inlineLocalFunctions);
//       assertFalse(compilerOptions0.optimizeArgumentsArray);
//       assertFalse(compilerOptions0.labelRenaming);
//       assertFalse(compilerOptions0.preferLineBreakAtEndOfFile);
//       assertFalse(compilerOptions0.generatePseudoNames);
//       assertFalse(compilerOptions0.collapseProperties);
//       assertFalse(compilerOptions0.moveFunctionDeclarations);
//       assertFalse(compilerOptions0.removeUnusedLocalVars);
//       assertFalse(compilerOptions0.checkControlStructures);
//       assertFalse(compilerOptions0.jqueryPass);
//       assertFalse(compilerOptions0.recordFunctionInformation);
//       assertFalse(compilerOptions0.prettyPrint);
//       assertFalse(compilerOptions0.checkSymbols);
//       assertFalse(compilerOptions0.crossModuleCodeMotion);
//       assertFalse(compilerOptions0.smartNameRemoval);
//       assertFalse(compilerOptions0.optimizeCalls);
//       assertFalse(compilerOptions0.ideMode);
//       assertFalse(compilerOptions0.removeDeadCode);
//       assertFalse(compilerOptions0.ambiguateProperties);
//       assertFalse(compilerOptions0.lineBreak);
//       assertFalse(compilerOptions0.reserveRawExports);
//       assertFalse(compilerOptions0.inlineConstantVars);
//       assertEquals(false, compilerOptions0.assumeStrictThis());
//       assertEquals(false, compilerOptions0.assumeClosuresOnlyCaptureReferences());
//       assertEquals(CompilerOptions.TweakProcessing.OFF, compilerOptions0.getTweakProcessing());
//       assertEquals(false, compilerOptions0.getInferTypes());
//       assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
//       assertEquals(false, compilerOptions0.isRemoveUnusedClassProperties());
//       assertEquals(false, compilerOptions0.isExternExportsEnabled());
//       assertNull(compilerOptions0.getLanguageOut());
//       assertEquals(CompilerOptions.TracerMode.OFF, compilerOptions0.getTracerMode());
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compilerOptions0.getLanguageIn());
//       assertNotNull(defaultPassConfig0);
//       
//       TypeCheck typeCheck0 = defaultPassConfig0.makeTypeCheck(compiler0);
//       assertFalse(compilerOptions0.crossModuleMethodMotion);
//       assertFalse(compilerOptions0.disambiguateProperties);
//       assertFalse(compilerOptions0.flowSensitiveInlineVariables);
//       assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
//       assertFalse(compilerOptions0.foldConstants);
//       assertFalse(compilerOptions0.checkTypes);
//       assertFalse(compilerOptions0.optimizeReturns);
//       assertFalse(compilerOptions0.coalesceVariableNames);
//       assertFalse(compilerOptions0.collapseVariableDeclarations);
//       assertFalse(compilerOptions0.removeTryCatchFinally);
//       assertFalse(compilerOptions0.gatherCssNames);
//       assertFalse(compilerOptions0.computeFunctionSideEffects);
//       assertFalse(compilerOptions0.removeUnusedClassProperties);
//       assertFalse(compilerOptions0.deadAssignmentElimination);
//       assertFalse(compilerOptions0.inlineVariables);
//       assertFalse(compilerOptions0.aliasKeywords);
//       assertFalse(compilerOptions0.checkSuspiciousCode);
//       assertFalse(compilerOptions0.aliasExternals);
//       assertFalse(compilerOptions0.collapseAnonymousFunctions);
//       assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
//       assertFalse(compilerOptions0.inlineGetters);
//       assertFalse(compilerOptions0.aliasAllStrings);
//       assertFalse(compilerOptions0.convertToDottedProperties);
//       assertFalse(compilerOptions0.markAsCompiled);
//       assertFalse(compilerOptions0.markNoSideEffectCalls);
//       assertFalse(compilerOptions0.exportTestFunctions);
//       assertFalse(compilerOptions0.inlineFunctions);
//       assertFalse(compilerOptions0.generateExports);
//       assertFalse(compilerOptions0.optimizeParameters);
//       assertFalse(compilerOptions0.removeUnusedVars);
//       assertFalse(compilerOptions0.closurePass);
//       assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
//       assertFalse(compilerOptions0.devirtualizePrototypeMethods);
//       assertFalse(compilerOptions0.rewriteFunctionExpressions);
//       assertFalse(compilerOptions0.printInputDelimiter);
//       assertFalse(compilerOptions0.inlineLocalFunctions);
//       assertFalse(compilerOptions0.optimizeArgumentsArray);
//       assertFalse(compilerOptions0.labelRenaming);
//       assertFalse(compilerOptions0.preferLineBreakAtEndOfFile);
//       assertFalse(compilerOptions0.generatePseudoNames);
//       assertFalse(compilerOptions0.collapseProperties);
//       assertFalse(compilerOptions0.moveFunctionDeclarations);
//       assertFalse(compilerOptions0.removeUnusedLocalVars);
//       assertFalse(compilerOptions0.checkControlStructures);
//       assertFalse(compilerOptions0.jqueryPass);
//       assertFalse(compilerOptions0.recordFunctionInformation);
//       assertFalse(compilerOptions0.prettyPrint);
//       assertFalse(compilerOptions0.checkSymbols);
//       assertFalse(compilerOptions0.crossModuleCodeMotion);
//       assertFalse(compilerOptions0.smartNameRemoval);
//       assertFalse(compilerOptions0.optimizeCalls);
//       assertFalse(compilerOptions0.ideMode);
//       assertFalse(compilerOptions0.removeDeadCode);
//       assertFalse(compilerOptions0.ambiguateProperties);
//       assertFalse(compilerOptions0.lineBreak);
//       assertFalse(compilerOptions0.reserveRawExports);
//       assertFalse(compilerOptions0.inlineConstantVars);
//       assertEquals(false, compilerOptions0.assumeStrictThis());
//       assertEquals(false, compilerOptions0.assumeClosuresOnlyCaptureReferences());
//       assertEquals(CompilerOptions.TweakProcessing.OFF, compilerOptions0.getTweakProcessing());
//       assertEquals(false, compilerOptions0.getInferTypes());
//       assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
//       assertEquals(false, compilerOptions0.isRemoveUnusedClassProperties());
//       assertEquals(false, compilerOptions0.isExternExportsEnabled());
//       assertNull(compilerOptions0.getLanguageOut());
//       assertEquals(CompilerOptions.TracerMode.OFF, compilerOptions0.getTracerMode());
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compilerOptions0.getLanguageIn());
//       assertEquals(true, compiler0.hasErrors());
//       assertEquals(0, compiler0.getWarningCount());
//       assertEquals(0.0, compiler0.getProgress(), 0.01D);
//       assertEquals(1, compiler0.getErrorCount());
//       assertEquals(false, compiler0.isTypeCheckingEnabled());
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
//       assertEquals(false, compiler0.acceptConstKeyword());
//       assertEquals(false, compiler0.isIdeMode());
//       assertNotNull(typeCheck0);
//       
//       JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
//       assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
//       assertEquals(true, compiler0.hasErrors());
//       assertEquals(0, compiler0.getWarningCount());
//       assertEquals(0.0, compiler0.getProgress(), 0.01D);
//       assertEquals(1, compiler0.getErrorCount());
//       assertEquals(false, compiler0.isTypeCheckingEnabled());
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
//       assertEquals(false, compiler0.acceptConstKeyword());
//       assertEquals(false, compiler0.isIdeMode());
//       assertNotNull(jSTypeRegistry0);
//       
//       double double0 = typeCheck0.getTypedPercent();
//       assertFalse(compilerOptions0.crossModuleMethodMotion);
//       assertFalse(compilerOptions0.disambiguateProperties);
//       assertFalse(compilerOptions0.flowSensitiveInlineVariables);
//       assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
//       assertFalse(compilerOptions0.foldConstants);
//       assertFalse(compilerOptions0.checkTypes);
//       assertFalse(compilerOptions0.optimizeReturns);
//       assertFalse(compilerOptions0.coalesceVariableNames);
//       assertFalse(compilerOptions0.collapseVariableDeclarations);
//       assertFalse(compilerOptions0.removeTryCatchFinally);
//       assertFalse(compilerOptions0.gatherCssNames);
//       assertFalse(compilerOptions0.computeFunctionSideEffects);
//       assertFalse(compilerOptions0.removeUnusedClassProperties);
//       assertFalse(compilerOptions0.deadAssignmentElimination);
//       assertFalse(compilerOptions0.inlineVariables);
//       assertFalse(compilerOptions0.aliasKeywords);
//       assertFalse(compilerOptions0.checkSuspiciousCode);
//       assertFalse(compilerOptions0.aliasExternals);
//       assertFalse(compilerOptions0.collapseAnonymousFunctions);
//       assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
//       assertFalse(compilerOptions0.inlineGetters);
//       assertFalse(compilerOptions0.aliasAllStrings);
//       assertFalse(compilerOptions0.convertToDottedProperties);
//       assertFalse(compilerOptions0.markAsCompiled);
//       assertFalse(compilerOptions0.markNoSideEffectCalls);
//       assertFalse(compilerOptions0.exportTestFunctions);
//       assertFalse(compilerOptions0.inlineFunctions);
//       assertFalse(compilerOptions0.generateExports);
//       assertFalse(compilerOptions0.optimizeParameters);
//       assertFalse(compilerOptions0.removeUnusedVars);
//       assertFalse(compilerOptions0.closurePass);
//       assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
//       assertFalse(compilerOptions0.devirtualizePrototypeMethods);
//       assertFalse(compilerOptions0.rewriteFunctionExpressions);
//       assertFalse(compilerOptions0.printInputDelimiter);
//       assertFalse(compilerOptions0.inlineLocalFunctions);
//       assertFalse(compilerOptions0.optimizeArgumentsArray);
//       assertFalse(compilerOptions0.labelRenaming);
//       assertFalse(compilerOptions0.preferLineBreakAtEndOfFile);
//       assertFalse(compilerOptions0.generatePseudoNames);
//       assertFalse(compilerOptions0.collapseProperties);
//       assertFalse(compilerOptions0.moveFunctionDeclarations);
//       assertFalse(compilerOptions0.removeUnusedLocalVars);
//       assertFalse(compilerOptions0.checkControlStructures);
//       assertFalse(compilerOptions0.jqueryPass);
//       assertFalse(compilerOptions0.recordFunctionInformation);
//       assertFalse(compilerOptions0.prettyPrint);
//       assertFalse(compilerOptions0.checkSymbols);
//       assertFalse(compilerOptions0.crossModuleCodeMotion);
//       assertFalse(compilerOptions0.smartNameRemoval);
//       assertFalse(compilerOptions0.optimizeCalls);
//       assertFalse(compilerOptions0.ideMode);
//       assertFalse(compilerOptions0.removeDeadCode);
//       assertFalse(compilerOptions0.ambiguateProperties);
//       assertFalse(compilerOptions0.lineBreak);
//       assertFalse(compilerOptions0.reserveRawExports);
//       assertFalse(compilerOptions0.inlineConstantVars);
//       assertEquals(false, compilerOptions0.assumeStrictThis());
//       assertEquals(false, compilerOptions0.assumeClosuresOnlyCaptureReferences());
//       assertEquals(CompilerOptions.TweakProcessing.OFF, compilerOptions0.getTweakProcessing());
//       assertEquals(false, compilerOptions0.getInferTypes());
//       assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
//       assertEquals(false, compilerOptions0.isRemoveUnusedClassProperties());
//       assertEquals(false, compilerOptions0.isExternExportsEnabled());
//       assertNull(compilerOptions0.getLanguageOut());
//       assertEquals(CompilerOptions.TracerMode.OFF, compilerOptions0.getTracerMode());
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compilerOptions0.getLanguageIn());
//       assertEquals(true, compiler0.hasErrors());
//       assertEquals(0, compiler0.getWarningCount());
//       assertEquals(0.0, compiler0.getProgress(), 0.01D);
//       assertEquals(1, compiler0.getErrorCount());
//       assertEquals(false, compiler0.isTypeCheckingEnabled());
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
//       assertEquals(false, compiler0.acceptConstKeyword());
//       assertEquals(false, compiler0.isIdeMode());
//       assertEquals(0.0, double0, 0.01D);
//       
//       int int0 = 2246;
//       Stack<JSType> stack0 = new Stack<JSType>();
//       assertEquals(10, stack0.capacity());
//       assertEquals(true, stack0.isEmpty());
//       assertEquals("[]", stack0.toString());
//       assertEquals(true, stack0.empty());
//       assertEquals(0, stack0.size());
//       assertNotNull(stack0);
//       
//       Node node0 = jSTypeRegistry0.createParameters((List<JSType>) stack0);
//       assertEquals(10, stack0.capacity());
//       assertEquals(true, stack0.isEmpty());
//       assertEquals("[]", stack0.toString());
//       assertEquals(true, stack0.empty());
//       assertEquals(0, stack0.size());
//       assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
//       assertEquals(true, compiler0.hasErrors());
//       assertEquals(0, compiler0.getWarningCount());
//       assertEquals(0.0, compiler0.getProgress(), 0.01D);
//       assertEquals(1, compiler0.getErrorCount());
//       assertEquals(false, compiler0.isTypeCheckingEnabled());
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
//       assertEquals(false, compiler0.acceptConstKeyword());
//       assertEquals(false, compiler0.isIdeMode());
//       assertEquals(83, node0.getType());
//       assertEquals(false, node0.isLocalResultCall());
//       assertEquals(false, node0.isOnlyModifiesThisCall());
//       assertEquals(false, node0.isTypeOf());
//       assertEquals(false, node0.isNot());
//       assertEquals(false, node0.isBreak());
//       assertEquals(false, node0.isDo());
//       assertEquals(false, node0.isThrow());
//       assertEquals(false, node0.isAdd());
//       assertEquals(false, node0.isVoid());
//       assertEquals(false, node0.isLabel());
//       assertEquals(-1, node0.getSourcePosition());
//       assertEquals(false, node0.isStringKey());
//       assertEquals(false, node0.isFromExterns());
//       assertEquals(0, node0.getChildCount());
//       assertEquals(false, node0.isWith());
//       assertEquals(false, node0.isSetterDef());
//       assertEquals(false, node0.isAssignAdd());
//       assertEquals(false, node0.isNull());
//       assertEquals(false, node0.wasEmptyNode());
//       assertEquals(false, node0.isIn());
//       assertEquals(0, node0.getLength());
//       assertEquals(false, node0.isCatch());
//       assertEquals(false, node0.isExprResult());
//       assertEquals(false, node0.isNE());
//       assertEquals(false, node0.isThis());
//       assertEquals(false, node0.isString());
//       assertEquals(false, node0.hasOneChild());
//       assertEquals(false, node0.isRegExp());
//       assertEquals(false, node0.isSwitch());
//       assertEquals(-1, node0.getLineno());
//       assertEquals(false, node0.isCase());
//       assertEquals(false, node0.isDelProp());
//       assertEquals(false, node0.isNew());
//       assertEquals(false, node0.isSyntheticBlock());
//       assertEquals(false, node0.isDefaultCase());
//       assertEquals(false, node0.hasChildren());
//       assertEquals(false, node0.isBlock());
//       assertEquals(false, node0.isIf());
//       assertEquals(false, node0.isInc());
//       assertEquals(false, node0.isTry());
//       assertEquals(0, node0.getSideEffectFlags());
//       assertEquals(false, node0.isAnd());
//       assertEquals(false, node0.isGetElem());
//       assertEquals(false, node0.isAssign());
//       assertEquals(false, node0.isReturn());
//       assertEquals(false, node0.isArrayLit());
//       assertEquals(-1, node0.getCharno());
//       assertEquals(false, node0.isNoSideEffectsCall());
//       assertEquals(false, node0.isEmpty());
//       assertEquals(false, node0.isScript());
//       assertEquals(false, node0.isDec());
//       assertEquals(false, node0.isWhile());
//       assertEquals(false, node0.isNumber());
//       assertEquals(false, node0.isFunction());
//       assertEquals(false, node0.isFor());
//       assertEquals(false, node0.isTrue());
//       assertEquals(false, node0.isQuotedString());
//       assertEquals(false, node0.isDebugger());
//       assertEquals(false, node0.hasMoreThanOneChild());
//       assertEquals(false, node0.isVarArgs());
//       assertEquals(false, node0.isName());
//       assertEquals(false, node0.isVar());
//       assertEquals(false, node0.isObjectLit());
//       assertEquals(false, node0.isOr());
//       assertEquals(false, node0.isInstanceOf());
//       assertEquals(false, node0.isGetterDef());
//       assertEquals(false, node0.isHook());
//       assertNull(node0.getSourceFileName());
//       assertEquals(false, node0.isGetProp());
//       assertEquals(false, node0.isLabelName());
//       assertEquals(false, node0.isCall());
//       assertEquals(false, node0.isComma());
//       assertEquals(false, node0.isOptionalArg());
//       assertEquals(true, node0.isParamList());
//       assertEquals(false, node0.isFalse());
//       assertEquals(false, node0.isContinue());
//       assertNotNull(node0);
//       
//       Node node1 = Node.newNumber(double0, int0, int0);
//       assertNotSame(node1, node0);
//       assertFalse(node1.equals((Object)node0));
//       assertFalse(compilerOptions0.crossModuleMethodMotion);
//       assertFalse(compilerOptions0.disambiguateProperties);
//       assertFalse(compilerOptions0.flowSensitiveInlineVariables);
//       assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
//       assertFalse(compilerOptions0.foldConstants);
//       assertFalse(compilerOptions0.checkTypes);
//       assertFalse(compilerOptions0.optimizeReturns);
//       assertFalse(compilerOptions0.coalesceVariableNames);
//       assertFalse(compilerOptions0.collapseVariableDeclarations);
//       assertFalse(compilerOptions0.removeTryCatchFinally);
//       assertFalse(compilerOptions0.gatherCssNames);
//       assertFalse(compilerOptions0.computeFunctionSideEffects);
//       assertFalse(compilerOptions0.removeUnusedClassProperties);
//       assertFalse(compilerOptions0.deadAssignmentElimination);
//       assertFalse(compilerOptions0.inlineVariables);
//       assertFalse(compilerOptions0.aliasKeywords);
//       assertFalse(compilerOptions0.checkSuspiciousCode);
//       assertFalse(compilerOptions0.aliasExternals);
//       assertFalse(compilerOptions0.collapseAnonymousFunctions);
//       assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
//       assertFalse(compilerOptions0.inlineGetters);
//       assertFalse(compilerOptions0.aliasAllStrings);
//       assertFalse(compilerOptions0.convertToDottedProperties);
//       assertFalse(compilerOptions0.markAsCompiled);
//       assertFalse(compilerOptions0.markNoSideEffectCalls);
//       assertFalse(compilerOptions0.exportTestFunctions);
//       assertFalse(compilerOptions0.inlineFunctions);
//       assertFalse(compilerOptions0.generateExports);
//       assertFalse(compilerOptions0.optimizeParameters);
//       assertFalse(compilerOptions0.removeUnusedVars);
//       assertFalse(compilerOptions0.closurePass);
//       assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
//       assertFalse(compilerOptions0.devirtualizePrototypeMethods);
//       assertFalse(compilerOptions0.rewriteFunctionExpressions);
//       assertFalse(compilerOptions0.printInputDelimiter);
//       assertFalse(compilerOptions0.inlineLocalFunctions);
//       assertFalse(compilerOptions0.optimizeArgumentsArray);
//       assertFalse(compilerOptions0.labelRenaming);
//       assertFalse(compilerOptions0.preferLineBreakAtEndOfFile);
//       assertFalse(compilerOptions0.generatePseudoNames);
//       assertFalse(compilerOptions0.collapseProperties);
//       assertFalse(compilerOptions0.moveFunctionDeclarations);
//       assertFalse(compilerOptions0.removeUnusedLocalVars);
//       assertFalse(compilerOptions0.checkControlStructures);
//       assertFalse(compilerOptions0.jqueryPass);
//       assertFalse(compilerOptions0.recordFunctionInformation);
//       assertFalse(compilerOptions0.prettyPrint);
//       assertFalse(compilerOptions0.checkSymbols);
//       assertFalse(compilerOptions0.crossModuleCodeMotion);
//       assertFalse(compilerOptions0.smartNameRemoval);
//       assertFalse(compilerOptions0.optimizeCalls);
//       assertFalse(compilerOptions0.ideMode);
//       assertFalse(compilerOptions0.removeDeadCode);
//       assertFalse(compilerOptions0.ambiguateProperties);
//       assertFalse(compilerOptions0.lineBreak);
//       assertFalse(compilerOptions0.reserveRawExports);
//       assertFalse(compilerOptions0.inlineConstantVars);
//       assertEquals(false, compilerOptions0.assumeStrictThis());
//       assertEquals(false, compilerOptions0.assumeClosuresOnlyCaptureReferences());
//       assertEquals(CompilerOptions.TweakProcessing.OFF, compilerOptions0.getTweakProcessing());
//       assertEquals(false, compilerOptions0.getInferTypes());
//       assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
//       assertEquals(false, compilerOptions0.isRemoveUnusedClassProperties());
//       assertEquals(false, compilerOptions0.isExternExportsEnabled());
//       assertNull(compilerOptions0.getLanguageOut());
//       assertEquals(CompilerOptions.TracerMode.OFF, compilerOptions0.getTracerMode());
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compilerOptions0.getLanguageIn());
//       assertEquals(true, compiler0.hasErrors());
//       assertEquals(0, compiler0.getWarningCount());
//       assertEquals(0.0, compiler0.getProgress(), 0.01D);
//       assertEquals(1, compiler0.getErrorCount());
//       assertEquals(false, compiler0.isTypeCheckingEnabled());
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
//       assertEquals(false, compiler0.acceptConstKeyword());
//       assertEquals(false, compiler0.isIdeMode());
//       assertEquals(false, node1.isDo());
//       assertEquals(false, node1.isLocalResultCall());
//       assertEquals(false, node1.isLabelName());
//       assertEquals(false, node1.isTry());
//       assertEquals(false, node1.isInstanceOf());
//       assertEquals(false, node1.isFalse());
//       assertEquals(false, node1.isOnlyModifiesThisCall());
//       assertEquals(false, node1.isWhile());
//       assertEquals(false, node1.isDelProp());
//       assertEquals(false, node1.isSetterDef());
//       assertEquals(false, node1.isAdd());
//       assertEquals(true, node1.isNumber());
//       assertEquals(false, node1.isTrue());
//       assertEquals(false, node1.isNew());
//       assertEquals(false, node1.isGetProp());
//       assertEquals(false, node1.isDec());
//       assertEquals(false, node1.isContinue());
//       assertEquals(false, node1.isThis());
//       assertEquals(false, node1.isHook());
//       assertEquals(2246, node1.getLineno());
//       assertEquals(false, node1.isBreak());
//       assertEquals(false, node1.isOptionalArg());
//       assertEquals(false, node1.isLabel());
//       assertEquals(2246, node1.getCharno());
//       assertEquals(false, node1.isGetElem());
//       assertEquals(false, node1.isDefaultCase());
//       assertEquals(false, node1.isCall());
//       assertEquals(false, node1.isInc());
//       assertEquals(0, node1.getSideEffectFlags());
//       assertEquals(false, node1.isName());
//       assertEquals(false, node1.isNot());
//       assertEquals(false, node1.isSyntheticBlock());
//       assertEquals(false, node1.isArrayLit());
//       assertNull(node1.getSourceFileName());
//       assertEquals(false, node1.hasChildren());
//       assertEquals(false, node1.isThrow());
//       assertEquals(false, node1.isNull());
//       assertEquals(false, node1.isOr());
//       assertEquals(false, node1.isSwitch());
//       assertEquals(false, node1.isIf());
//       assertEquals(false, node1.isVarArgs());
//       assertEquals(false, node1.isObjectLit());
//       assertEquals(false, node1.isComma());
//       assertEquals(false, node1.isVoid());
//       assertEquals(false, node1.hasOneChild());
//       assertEquals(false, node1.isGetterDef());
//       assertEquals(false, node1.isBlock());
//       assertEquals(false, node1.isFromExterns());
//       assertEquals(0, node1.getChildCount());
//       assertEquals(false, node1.isDebugger());
//       assertEquals(false, node1.isFunction());
//       assertEquals(false, node1.isCase());
//       assertEquals(false, node1.isVar());
//       assertEquals(39, node1.getType());
//       assertEquals(false, node1.isReturn());
//       assertEquals(false, node1.isWith());
//       assertEquals(9201862, node1.getSourcePosition());
//       assertEquals(false, node1.isScript());
//       assertEquals(false, node1.isNE());
//       assertEquals(false, node1.isQuotedString());
//       assertEquals(false, node1.isCatch());
//       assertEquals(0, node1.getLength());
//       assertEquals(false, node1.isTypeOf());
//       assertEquals(false, node1.isAssign());
//       assertEquals(false, node1.isRegExp());
//       assertEquals(false, node1.isEmpty());
//       assertEquals(false, node1.isAssignAdd());
//       assertEquals(false, node1.isString());
//       assertEquals(false, node1.hasMoreThanOneChild());
//       assertEquals(false, node1.isFor());
//       assertEquals(false, node1.isExprResult());
//       assertEquals(false, node1.isStringKey());
//       assertEquals(false, node1.isIn());
//       assertEquals(false, node1.wasEmptyNode());
//       assertEquals(false, node1.isParamList());
//       assertEquals(false, node1.isAnd());
//       assertEquals(false, node1.isNoSideEffectsCall());
//       assertNotNull(node1);
//       
//       node1.addSuppression(compilerOptions0.syntheticBlockEndMarker);
//       assertNotSame(node1, node0);
//       assertFalse(node1.equals((Object)node0));
//       assertFalse(compilerOptions0.crossModuleMethodMotion);
//       assertFalse(compilerOptions0.disambiguateProperties);
//       assertFalse(compilerOptions0.flowSensitiveInlineVariables);
//       assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
//       assertFalse(compilerOptions0.foldConstants);
//       assertFalse(compilerOptions0.checkTypes);
//       assertFalse(compilerOptions0.optimizeReturns);
//       assertFalse(compilerOptions0.coalesceVariableNames);
//       assertFalse(compilerOptions0.collapseVariableDeclarations);
//       assertFalse(compilerOptions0.removeTryCatchFinally);
//       assertFalse(compilerOptions0.gatherCssNames);
//       assertFalse(compilerOptions0.computeFunctionSideEffects);
//       assertFalse(compilerOptions0.removeUnusedClassProperties);
//       assertFalse(compilerOptions0.deadAssignmentElimination);
//       assertFalse(compilerOptions0.inlineVariables);
//       assertFalse(compilerOptions0.aliasKeywords);
//       assertFalse(compilerOptions0.checkSuspiciousCode);
//       assertFalse(compilerOptions0.aliasExternals);
//       assertFalse(compilerOptions0.collapseAnonymousFunctions);
//       assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
//       assertFalse(compilerOptions0.inlineGetters);
//       assertFalse(compilerOptions0.aliasAllStrings);
//       assertFalse(compilerOptions0.convertToDottedProperties);
//       assertFalse(compilerOptions0.markAsCompiled);
//       assertFalse(compilerOptions0.markNoSideEffectCalls);
//       assertFalse(compilerOptions0.exportTestFunctions);
//       assertFalse(compilerOptions0.inlineFunctions);
//       assertFalse(compilerOptions0.generateExports);
//       assertFalse(compilerOptions0.optimizeParameters);
//       assertFalse(compilerOptions0.removeUnusedVars);
//       assertFalse(compilerOptions0.closurePass);
//       assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
//       assertFalse(compilerOptions0.devirtualizePrototypeMethods);
//       assertFalse(compilerOptions0.rewriteFunctionExpressions);
//       assertFalse(compilerOptions0.printInputDelimiter);
//       assertFalse(compilerOptions0.inlineLocalFunctions);
//       assertFalse(compilerOptions0.optimizeArgumentsArray);
//       assertFalse(compilerOptions0.labelRenaming);
//       assertFalse(compilerOptions0.preferLineBreakAtEndOfFile);
//       assertFalse(compilerOptions0.generatePseudoNames);
//       assertFalse(compilerOptions0.collapseProperties);
//       assertFalse(compilerOptions0.moveFunctionDeclarations);
//       assertFalse(compilerOptions0.removeUnusedLocalVars);
//       assertFalse(compilerOptions0.checkControlStructures);
//       assertFalse(compilerOptions0.jqueryPass);
//       assertFalse(compilerOptions0.recordFunctionInformation);
//       assertFalse(compilerOptions0.prettyPrint);
//       assertFalse(compilerOptions0.checkSymbols);
//       assertFalse(compilerOptions0.crossModuleCodeMotion);
//       assertFalse(compilerOptions0.smartNameRemoval);
//       assertFalse(compilerOptions0.optimizeCalls);
//       assertFalse(compilerOptions0.ideMode);
//       assertFalse(compilerOptions0.removeDeadCode);
//       assertFalse(compilerOptions0.ambiguateProperties);
//       assertFalse(compilerOptions0.lineBreak);
//       assertFalse(compilerOptions0.reserveRawExports);
//       assertFalse(compilerOptions0.inlineConstantVars);
//       assertEquals(false, compilerOptions0.assumeStrictThis());
//       assertEquals(false, compilerOptions0.assumeClosuresOnlyCaptureReferences());
//       assertEquals(CompilerOptions.TweakProcessing.OFF, compilerOptions0.getTweakProcessing());
//       assertEquals(false, compilerOptions0.getInferTypes());
//       assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
//       assertEquals(false, compilerOptions0.isRemoveUnusedClassProperties());
//       assertEquals(false, compilerOptions0.isExternExportsEnabled());
//       assertNull(compilerOptions0.getLanguageOut());
//       assertEquals(CompilerOptions.TracerMode.OFF, compilerOptions0.getTracerMode());
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compilerOptions0.getLanguageIn());
//       assertEquals(true, compiler0.hasErrors());
//       assertEquals(0, compiler0.getWarningCount());
//       assertEquals(0.0, compiler0.getProgress(), 0.01D);
//       assertEquals(1, compiler0.getErrorCount());
//       assertEquals(false, compiler0.isTypeCheckingEnabled());
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
//       assertEquals(false, compiler0.acceptConstKeyword());
//       assertEquals(false, compiler0.isIdeMode());
//       assertEquals(false, node1.isDo());
//       assertEquals(false, node1.isLocalResultCall());
//       assertEquals(false, node1.isLabelName());
//       assertEquals(false, node1.isTry());
//       assertEquals(false, node1.isInstanceOf());
//       assertEquals(false, node1.isFalse());
//       assertEquals(false, node1.isOnlyModifiesThisCall());
//       assertEquals(false, node1.isWhile());
//       assertEquals(false, node1.isDelProp());
//       assertEquals(false, node1.isSetterDef());
//       assertEquals(false, node1.isAdd());
//       assertEquals(true, node1.isNumber());
//       assertEquals(false, node1.isTrue());
//       assertEquals(false, node1.isNew());
//       assertEquals(false, node1.isGetProp());
//       assertEquals(false, node1.isDec());
//       assertEquals(false, node1.isContinue());
//       assertEquals(false, node1.isThis());
//       assertEquals(false, node1.isHook());
//       assertEquals(2246, node1.getLineno());
//       assertEquals(false, node1.isBreak());
//       assertEquals(false, node1.isOptionalArg());
//       assertEquals(false, node1.isLabel());
//       assertEquals(2246, node1.getCharno());
//       assertEquals(false, node1.isGetElem());
//       assertEquals(false, node1.isDefaultCase());
//       assertEquals(false, node1.isCall());
//       assertEquals(false, node1.isInc());
//       assertEquals(0, node1.getSideEffectFlags());
//       assertEquals(false, node1.isName());
//       assertEquals(false, node1.isNot());
//       assertEquals(false, node1.isSyntheticBlock());
//       assertEquals(false, node1.isArrayLit());
//       assertNull(node1.getSourceFileName());
//       assertEquals(false, node1.hasChildren());
//       assertEquals(false, node1.isThrow());
//       assertEquals(false, node1.isNull());
//       assertEquals(false, node1.isOr());
//       assertEquals(false, node1.isSwitch());
//       assertEquals(false, node1.isIf());
//       assertEquals(false, node1.isVarArgs());
//       assertEquals(false, node1.isObjectLit());
//       assertEquals(false, node1.isComma());
//       assertEquals(false, node1.isVoid());
//       assertEquals(false, node1.hasOneChild());
//       assertEquals(false, node1.isGetterDef());
//       assertEquals(false, node1.isBlock());
//       assertEquals(false, node1.isFromExterns());
//       assertEquals(0, node1.getChildCount());
//       assertEquals(false, node1.isDebugger());
//       assertEquals(false, node1.isFunction());
//       assertEquals(false, node1.isCase());
//       assertEquals(false, node1.isVar());
//       assertEquals(39, node1.getType());
//       assertEquals(false, node1.isReturn());
//       assertEquals(false, node1.isWith());
//       assertEquals(9201862, node1.getSourcePosition());
//       assertEquals(false, node1.isScript());
//       assertEquals(false, node1.isNE());
//       assertEquals(false, node1.isQuotedString());
//       assertEquals(false, node1.isCatch());
//       assertEquals(0, node1.getLength());
//       assertEquals(false, node1.isTypeOf());
//       assertEquals(false, node1.isAssign());
//       assertEquals(false, node1.isRegExp());
//       assertEquals(false, node1.isEmpty());
//       assertEquals(false, node1.isAssignAdd());
//       assertEquals(false, node1.isString());
//       assertEquals(false, node1.hasMoreThanOneChild());
//       assertEquals(false, node1.isFor());
//       assertEquals(false, node1.isExprResult());
//       assertEquals(false, node1.isStringKey());
//       assertEquals(false, node1.isIn());
//       assertEquals(false, node1.wasEmptyNode());
//       assertEquals(false, node1.isParamList());
//       assertEquals(false, node1.isAnd());
//       assertEquals(false, node1.isNoSideEffectsCall());
//       
//       node0.addChildToFront(node1);
//       assertNotSame(node1, node0);
//       assertNotSame(node0, node1);
//       assertFalse(node1.equals((Object)node0));
//       assertFalse(node0.equals((Object)node1));
//       assertFalse(compilerOptions0.crossModuleMethodMotion);
//       assertFalse(compilerOptions0.disambiguateProperties);
//       assertFalse(compilerOptions0.flowSensitiveInlineVariables);
//       assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
//       assertFalse(compilerOptions0.foldConstants);
//       assertFalse(compilerOptions0.checkTypes);
//       assertFalse(compilerOptions0.optimizeReturns);
//       assertFalse(compilerOptions0.coalesceVariableNames);
//       assertFalse(compilerOptions0.collapseVariableDeclarations);
//       assertFalse(compilerOptions0.removeTryCatchFinally);
//       assertFalse(compilerOptions0.gatherCssNames);
//       assertFalse(compilerOptions0.computeFunctionSideEffects);
//       assertFalse(compilerOptions0.removeUnusedClassProperties);
//       assertFalse(compilerOptions0.deadAssignmentElimination);
//       assertFalse(compilerOptions0.inlineVariables);
//       assertFalse(compilerOptions0.aliasKeywords);
//       assertFalse(compilerOptions0.checkSuspiciousCode);
//       assertFalse(compilerOptions0.aliasExternals);
//       assertFalse(compilerOptions0.collapseAnonymousFunctions);
//       assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
//       assertFalse(compilerOptions0.inlineGetters);
//       assertFalse(compilerOptions0.aliasAllStrings);
//       assertFalse(compilerOptions0.convertToDottedProperties);
//       assertFalse(compilerOptions0.markAsCompiled);
//       assertFalse(compilerOptions0.markNoSideEffectCalls);
//       assertFalse(compilerOptions0.exportTestFunctions);
//       assertFalse(compilerOptions0.inlineFunctions);
//       assertFalse(compilerOptions0.generateExports);
//       assertFalse(compilerOptions0.optimizeParameters);
//       assertFalse(compilerOptions0.removeUnusedVars);
//       assertFalse(compilerOptions0.closurePass);
//       assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
//       assertFalse(compilerOptions0.devirtualizePrototypeMethods);
//       assertFalse(compilerOptions0.rewriteFunctionExpressions);
//       assertFalse(compilerOptions0.printInputDelimiter);
//       assertFalse(compilerOptions0.inlineLocalFunctions);
//       assertFalse(compilerOptions0.optimizeArgumentsArray);
//       assertFalse(compilerOptions0.labelRenaming);
//       assertFalse(compilerOptions0.preferLineBreakAtEndOfFile);
//       assertFalse(compilerOptions0.generatePseudoNames);
//       assertFalse(compilerOptions0.collapseProperties);
//       assertFalse(compilerOptions0.moveFunctionDeclarations);
//       assertFalse(compilerOptions0.removeUnusedLocalVars);
//       assertFalse(compilerOptions0.checkControlStructures);
//       assertFalse(compilerOptions0.jqueryPass);
//       assertFalse(compilerOptions0.recordFunctionInformation);
//       assertFalse(compilerOptions0.prettyPrint);
//       assertFalse(compilerOptions0.checkSymbols);
//       assertFalse(compilerOptions0.crossModuleCodeMotion);
//       assertFalse(compilerOptions0.smartNameRemoval);
//       assertFalse(compilerOptions0.optimizeCalls);
//       assertFalse(compilerOptions0.ideMode);
//       assertFalse(compilerOptions0.removeDeadCode);
//       assertFalse(compilerOptions0.ambiguateProperties);
//       assertFalse(compilerOptions0.lineBreak);
//       assertFalse(compilerOptions0.reserveRawExports);
//       assertFalse(compilerOptions0.inlineConstantVars);
//       assertEquals(false, compilerOptions0.assumeStrictThis());
//       assertEquals(false, compilerOptions0.assumeClosuresOnlyCaptureReferences());
//       assertEquals(CompilerOptions.TweakProcessing.OFF, compilerOptions0.getTweakProcessing());
//       assertEquals(false, compilerOptions0.getInferTypes());
//       assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
//       assertEquals(false, compilerOptions0.isRemoveUnusedClassProperties());
//       assertEquals(false, compilerOptions0.isExternExportsEnabled());
//       assertNull(compilerOptions0.getLanguageOut());
//       assertEquals(CompilerOptions.TracerMode.OFF, compilerOptions0.getTracerMode());
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compilerOptions0.getLanguageIn());
//       assertEquals(10, stack0.capacity());
//       assertEquals(true, stack0.isEmpty());
//       assertEquals("[]", stack0.toString());
//       assertEquals(true, stack0.empty());
//       assertEquals(0, stack0.size());
//       assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
//       assertEquals(true, compiler0.hasErrors());
//       assertEquals(0, compiler0.getWarningCount());
//       assertEquals(0.0, compiler0.getProgress(), 0.01D);
//       assertEquals(1, compiler0.getErrorCount());
//       assertEquals(false, compiler0.isTypeCheckingEnabled());
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
//       assertEquals(false, compiler0.acceptConstKeyword());
//       assertEquals(false, compiler0.isIdeMode());
//       assertEquals(false, node1.isDo());
//       assertEquals(false, node1.isLocalResultCall());
//       assertEquals(false, node1.isLabelName());
//       assertEquals(false, node1.isTry());
//       assertEquals(false, node1.isInstanceOf());
//       assertEquals(false, node1.isFalse());
//       assertEquals(false, node1.isOnlyModifiesThisCall());
//       assertEquals(false, node1.isWhile());
//       assertEquals(false, node1.isDelProp());
//       assertEquals(false, node1.isSetterDef());
//       assertEquals(false, node1.isAdd());
//       assertEquals(true, node1.isNumber());
//       assertEquals(false, node1.isTrue());
//       assertEquals(false, node1.isNew());
//       assertEquals(false, node1.isGetProp());
//       assertEquals(false, node1.isDec());
//       assertEquals(false, node1.isContinue());
//       assertEquals(false, node1.isThis());
//       assertEquals(false, node1.isHook());
//       assertEquals(2246, node1.getLineno());
//       assertEquals(false, node1.isBreak());
//       assertEquals(false, node1.isOptionalArg());
//       assertEquals(false, node1.isLabel());
//       assertEquals(2246, node1.getCharno());
//       assertEquals(false, node1.isGetElem());
//       assertEquals(false, node1.isDefaultCase());
//       assertEquals(false, node1.isCall());
//       assertEquals(false, node1.isInc());
//       assertEquals(0, node1.getSideEffectFlags());
//       assertEquals(false, node1.isName());
//       assertEquals(false, node1.isNot());
//       assertEquals(false, node1.isSyntheticBlock());
//       assertEquals(false, node1.isArrayLit());
//       assertNull(node1.getSourceFileName());
//       assertEquals(false, node1.hasChildren());
//       assertEquals(false, node1.isThrow());
//       assertEquals(false, node1.isNull());
//       assertEquals(false, node1.isOr());
//       assertEquals(false, node1.isSwitch());
//       assertEquals(false, node1.isIf());
//       assertEquals(false, node1.isVarArgs());
//       assertEquals(false, node1.isObjectLit());
//       assertEquals(false, node1.isComma());
//       assertEquals(false, node1.isVoid());
//       assertEquals(false, node1.hasOneChild());
//       assertEquals(false, node1.isGetterDef());
//       assertEquals(false, node1.isBlock());
//       assertEquals(false, node1.isFromExterns());
//       assertEquals(0, node1.getChildCount());
//       assertEquals(false, node1.isDebugger());
//       assertEquals(false, node1.isFunction());
//       assertEquals(false, node1.isCase());
//       assertEquals(false, node1.isVar());
//       assertEquals(39, node1.getType());
//       assertEquals(false, node1.isReturn());
//       assertEquals(false, node1.isWith());
//       assertEquals(9201862, node1.getSourcePosition());
//       assertEquals(false, node1.isScript());
//       assertEquals(false, node1.isNE());
//       assertEquals(false, node1.isQuotedString());
//       assertEquals(false, node1.isCatch());
//       assertEquals(0, node1.getLength());
//       assertEquals(false, node1.isTypeOf());
//       assertEquals(false, node1.isAssign());
//       assertEquals(false, node1.isRegExp());
//       assertEquals(false, node1.isEmpty());
//       assertEquals(false, node1.isAssignAdd());
//       assertEquals(false, node1.isString());
//       assertEquals(false, node1.hasMoreThanOneChild());
//       assertEquals(false, node1.isFor());
//       assertEquals(false, node1.isExprResult());
//       assertEquals(false, node1.isStringKey());
//       assertEquals(false, node1.isIn());
//       assertEquals(false, node1.wasEmptyNode());
//       assertEquals(false, node1.isParamList());
//       assertEquals(false, node1.isAnd());
//       assertEquals(false, node1.isNoSideEffectsCall());
//       assertEquals(83, node0.getType());
//       assertEquals(false, node0.isLocalResultCall());
//       assertEquals(false, node0.isOnlyModifiesThisCall());
//       assertEquals(false, node0.isTypeOf());
//       assertEquals(false, node0.isNot());
//       assertEquals(true, node0.hasOneChild());
//       assertEquals(false, node0.isBreak());
//       assertEquals(false, node0.isDo());
//       assertEquals(false, node0.isThrow());
//       assertEquals(false, node0.isAdd());
//       assertEquals(false, node0.isVoid());
//       assertEquals(false, node0.isLabel());
//       assertEquals(-1, node0.getSourcePosition());
//       assertEquals(false, node0.isStringKey());
//       assertEquals(false, node0.isFromExterns());
//       assertEquals(false, node0.isWith());
//       assertEquals(false, node0.isSetterDef());
//       assertEquals(false, node0.isAssignAdd());
//       assertEquals(false, node0.isNull());
//       assertEquals(false, node0.wasEmptyNode());
//       assertEquals(false, node0.isIn());
//       assertEquals(0, node0.getLength());
//       assertEquals(false, node0.isCatch());
//       assertEquals(false, node0.isExprResult());
//       assertEquals(false, node0.isNE());
//       assertEquals(false, node0.isThis());
//       assertEquals(false, node0.isString());
//       assertEquals(false, node0.isRegExp());
//       assertEquals(false, node0.isSwitch());
//       assertEquals(-1, node0.getLineno());
//       assertEquals(false, node0.isCase());
//       assertEquals(false, node0.isDelProp());
//       assertEquals(false, node0.isNew());
//       assertEquals(1, node0.getChildCount());
//       assertEquals(false, node0.isSyntheticBlock());
//       assertEquals(false, node0.isDefaultCase());
//       assertEquals(false, node0.isBlock());
//       assertEquals(false, node0.isIf());
//       assertEquals(false, node0.isInc());
//       assertEquals(false, node0.isTry());
//       assertEquals(0, node0.getSideEffectFlags());
//       assertEquals(false, node0.isAnd());
//       assertEquals(false, node0.isGetElem());
//       assertEquals(false, node0.isAssign());
//       assertEquals(false, node0.isReturn());
//       assertEquals(false, node0.isArrayLit());
//       assertEquals(-1, node0.getCharno());
//       assertEquals(false, node0.isNoSideEffectsCall());
//       assertEquals(false, node0.isEmpty());
//       assertEquals(false, node0.isScript());
//       assertEquals(false, node0.isDec());
//       assertEquals(false, node0.isWhile());
//       assertEquals(false, node0.isNumber());
//       assertEquals(false, node0.isFunction());
//       assertEquals(false, node0.isFor());
//       assertEquals(false, node0.isTrue());
//       assertEquals(false, node0.isQuotedString());
//       assertEquals(false, node0.isDebugger());
//       assertEquals(false, node0.hasMoreThanOneChild());
//       assertEquals(false, node0.isVarArgs());
//       assertEquals(false, node0.isName());
//       assertEquals(false, node0.isVar());
//       assertEquals(false, node0.isObjectLit());
//       assertEquals(false, node0.isOr());
//       assertEquals(true, node0.hasChildren());
//       assertEquals(false, node0.isInstanceOf());
//       assertEquals(false, node0.isGetterDef());
//       assertEquals(false, node0.isHook());
//       assertNull(node0.getSourceFileName());
//       assertEquals(false, node0.isGetProp());
//       assertEquals(false, node0.isLabelName());
//       assertEquals(false, node0.isCall());
//       assertEquals(false, node0.isComma());
//       assertEquals(false, node0.isOptionalArg());
//       assertEquals(true, node0.isParamList());
//       assertEquals(false, node0.isFalse());
//       assertEquals(false, node0.isContinue());
//       
//       Scope scope0 = typeCheck0.processForTesting(node1, node1);
//       assertNotSame(node1, node0);
//       assertFalse(node1.equals((Object)node0));
//       assertFalse(compilerOptions0.crossModuleMethodMotion);
//       assertFalse(compilerOptions0.disambiguateProperties);
//       assertFalse(compilerOptions0.flowSensitiveInlineVariables);
//       assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
//       assertFalse(compilerOptions0.foldConstants);
//       assertFalse(compilerOptions0.checkTypes);
//       assertFalse(compilerOptions0.optimizeReturns);
//       assertFalse(compilerOptions0.coalesceVariableNames);
//       assertFalse(compilerOptions0.collapseVariableDeclarations);
//       assertFalse(compilerOptions0.removeTryCatchFinally);
//       assertFalse(compilerOptions0.gatherCssNames);
//       assertFalse(compilerOptions0.computeFunctionSideEffects);
//       assertFalse(compilerOptions0.removeUnusedClassProperties);
//       assertFalse(compilerOptions0.deadAssignmentElimination);
//       assertFalse(compilerOptions0.inlineVariables);
//       assertFalse(compilerOptions0.aliasKeywords);
//       assertFalse(compilerOptions0.checkSuspiciousCode);
//       assertFalse(compilerOptions0.aliasExternals);
//       assertFalse(compilerOptions0.collapseAnonymousFunctions);
//       assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
//       assertFalse(compilerOptions0.inlineGetters);
//       assertFalse(compilerOptions0.aliasAllStrings);
//       assertFalse(compilerOptions0.convertToDottedProperties);
//       assertFalse(compilerOptions0.markAsCompiled);
//       assertFalse(compilerOptions0.markNoSideEffectCalls);
//       assertFalse(compilerOptions0.exportTestFunctions);
//       assertFalse(compilerOptions0.inlineFunctions);
//       assertFalse(compilerOptions0.generateExports);
//       assertFalse(compilerOptions0.optimizeParameters);
//       assertFalse(compilerOptions0.removeUnusedVars);
//       assertFalse(compilerOptions0.closurePass);
//       assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
//       assertFalse(compilerOptions0.devirtualizePrototypeMethods);
//       assertFalse(compilerOptions0.rewriteFunctionExpressions);
//       assertFalse(compilerOptions0.printInputDelimiter);
//       assertFalse(compilerOptions0.inlineLocalFunctions);
//       assertFalse(compilerOptions0.optimizeArgumentsArray);
//       assertFalse(compilerOptions0.labelRenaming);
//       assertFalse(compilerOptions0.preferLineBreakAtEndOfFile);
//       assertFalse(compilerOptions0.generatePseudoNames);
//       assertFalse(compilerOptions0.collapseProperties);
//       assertFalse(compilerOptions0.moveFunctionDeclarations);
//       assertFalse(compilerOptions0.removeUnusedLocalVars);
//       assertFalse(compilerOptions0.checkControlStructures);
//       assertFalse(compilerOptions0.jqueryPass);
//       assertFalse(compilerOptions0.recordFunctionInformation);
//       assertFalse(compilerOptions0.prettyPrint);
//       assertFalse(compilerOptions0.checkSymbols);
//       assertFalse(compilerOptions0.crossModuleCodeMotion);
//       assertFalse(compilerOptions0.smartNameRemoval);
//       assertFalse(compilerOptions0.optimizeCalls);
//       assertFalse(compilerOptions0.ideMode);
//       assertFalse(compilerOptions0.removeDeadCode);
//       assertFalse(compilerOptions0.ambiguateProperties);
//       assertFalse(compilerOptions0.lineBreak);
//       assertFalse(compilerOptions0.reserveRawExports);
//       assertFalse(compilerOptions0.inlineConstantVars);
//       assertEquals(false, compilerOptions0.assumeStrictThis());
//       assertEquals(false, compilerOptions0.assumeClosuresOnlyCaptureReferences());
//       assertEquals(CompilerOptions.TweakProcessing.OFF, compilerOptions0.getTweakProcessing());
//       assertEquals(false, compilerOptions0.getInferTypes());
//       assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
//       assertEquals(false, compilerOptions0.isRemoveUnusedClassProperties());
//       assertEquals(false, compilerOptions0.isExternExportsEnabled());
//       assertNull(compilerOptions0.getLanguageOut());
//       assertEquals(CompilerOptions.TracerMode.OFF, compilerOptions0.getTracerMode());
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compilerOptions0.getLanguageIn());
//       assertEquals(32, scope0.getVarCount());
//       assertEquals(true, scope0.isGlobal());
//       assertEquals(false, scope0.isLocal());
//       assertEquals(true, compiler0.hasErrors());
//       assertEquals(0, compiler0.getWarningCount());
//       assertEquals(0.0, compiler0.getProgress(), 0.01D);
//       assertEquals(1, compiler0.getErrorCount());
//       assertEquals(false, compiler0.isTypeCheckingEnabled());
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
//       assertEquals(false, compiler0.acceptConstKeyword());
//       assertEquals(false, compiler0.isIdeMode());
//       assertEquals(false, node1.isDo());
//       assertEquals(false, node1.isLocalResultCall());
//       assertEquals(false, node1.isLabelName());
//       assertEquals(false, node1.isTry());
//       assertEquals(false, node1.isInstanceOf());
//       assertEquals(false, node1.isFalse());
//       assertEquals(false, node1.isOnlyModifiesThisCall());
//       assertEquals(false, node1.isWhile());
//       assertEquals(false, node1.isDelProp());
//       assertEquals(false, node1.isSetterDef());
//       assertEquals(false, node1.isAdd());
//       assertEquals(true, node1.isNumber());
//       assertEquals(false, node1.isTrue());
//       assertEquals(false, node1.isNew());
//       assertEquals(false, node1.isGetProp());
//       assertEquals(false, node1.isDec());
//       assertEquals(false, node1.isContinue());
//       assertEquals(false, node1.isThis());
//       assertEquals(false, node1.isHook());
//       assertEquals(2246, node1.getLineno());
//       assertEquals(false, node1.isBreak());
//       assertEquals(false, node1.isOptionalArg());
//       assertEquals(false, node1.isLabel());
//       assertEquals(2246, node1.getCharno());
//       assertEquals(false, node1.isGetElem());
//       assertEquals(false, node1.isDefaultCase());
//       assertEquals(false, node1.isCall());
//       assertEquals(false, node1.isInc());
//       assertEquals(0, node1.getSideEffectFlags());
//       assertEquals(false, node1.isName());
//       assertEquals(false, node1.isNot());
//       assertEquals(false, node1.isSyntheticBlock());
//       assertEquals(false, node1.isArrayLit());
//       assertNull(node1.getSourceFileName());
//       assertEquals(false, node1.hasChildren());
//       assertEquals(false, node1.isThrow());
//       assertEquals(false, node1.isNull());
//       assertEquals(false, node1.isOr());
//       assertEquals(false, node1.isSwitch());
//       assertEquals(false, node1.isIf());
//       assertEquals(false, node1.isVarArgs());
//       assertEquals(false, node1.isObjectLit());
//       assertEquals(false, node1.isComma());
//       assertEquals(false, node1.isVoid());
//       assertEquals(false, node1.hasOneChild());
//       assertEquals(false, node1.isGetterDef());
//       assertEquals(false, node1.isBlock());
//       assertEquals(false, node1.isFromExterns());
//       assertEquals(0, node1.getChildCount());
//       assertEquals(false, node1.isDebugger());
//       assertEquals(false, node1.isFunction());
//       assertEquals(false, node1.isCase());
//       assertEquals(false, node1.isVar());
//       assertEquals(39, node1.getType());
//       assertEquals(false, node1.isReturn());
//       assertEquals(false, node1.isWith());
//       assertEquals(9201862, node1.getSourcePosition());
//       assertEquals(false, node1.isScript());
//       assertEquals(false, node1.isNE());
//       assertEquals(false, node1.isQuotedString());
//       assertEquals(false, node1.isCatch());
//       assertEquals(0, node1.getLength());
//       assertEquals(false, node1.isTypeOf());
//       assertEquals(false, node1.isAssign());
//       assertEquals(false, node1.isRegExp());
//       assertEquals(false, node1.isEmpty());
//       assertEquals(false, node1.isAssignAdd());
//       assertEquals(false, node1.isString());
//       assertEquals(false, node1.hasMoreThanOneChild());
//       assertEquals(false, node1.isFor());
//       assertEquals(false, node1.isExprResult());
//       assertEquals(false, node1.isStringKey());
//       assertEquals(false, node1.isIn());
//       assertEquals(false, node1.wasEmptyNode());
//       assertEquals(false, node1.isParamList());
//       assertEquals(false, node1.isAnd());
//       assertEquals(false, node1.isNoSideEffectsCall());
//       assertNotNull(scope0);
//   }

  @Test
  public void test2() {}
//   @Test
//   public void test2()  throws Throwable  {
//       Compiler compiler0 = new Compiler();
//       assertEquals(0.0, compiler0.getProgress(), 0.01D);
//       assertNotNull(compiler0);
//       
//       String string0 = "s";
//       MockFile mockFile0 = new MockFile(string0);
//       assertNotNull(mockFile0);
//       
//       JSSourceFile jSSourceFile0 = JSSourceFile.fromFile((File) mockFile0);
//       assertEquals(false, jSSourceFile0.isExtern());
//       assertEquals("s", jSSourceFile0.getOriginalPath());
//       assertEquals("s", jSSourceFile0.toString());
//       assertEquals("s", jSSourceFile0.getName());
//       assertNotNull(jSSourceFile0);
//       
//       CompilerOptions compilerOptions0 = new CompilerOptions();
//       assertFalse(compilerOptions0.preferLineBreakAtEndOfFile);
//       assertFalse(compilerOptions0.checkSuspiciousCode);
//       assertFalse(compilerOptions0.computeFunctionSideEffects);
//       assertFalse(compilerOptions0.removeUnusedVars);
//       assertFalse(compilerOptions0.checkControlStructures);
//       assertFalse(compilerOptions0.prettyPrint);
//       assertFalse(compilerOptions0.coalesceVariableNames);
//       assertFalse(compilerOptions0.convertToDottedProperties);
//       assertFalse(compilerOptions0.aliasKeywords);
//       assertFalse(compilerOptions0.inlineConstantVars);
//       assertFalse(compilerOptions0.aliasAllStrings);
//       assertFalse(compilerOptions0.generateExports);
//       assertFalse(compilerOptions0.jqueryPass);
//       assertFalse(compilerOptions0.checkTypes);
//       assertFalse(compilerOptions0.foldConstants);
//       assertFalse(compilerOptions0.devirtualizePrototypeMethods);
//       assertFalse(compilerOptions0.generatePseudoNames);
//       assertFalse(compilerOptions0.rewriteFunctionExpressions);
//       assertFalse(compilerOptions0.moveFunctionDeclarations);
//       assertFalse(compilerOptions0.recordFunctionInformation);
//       assertFalse(compilerOptions0.aliasExternals);
//       assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
//       assertFalse(compilerOptions0.removeUnusedClassProperties);
//       assertFalse(compilerOptions0.collapseVariableDeclarations);
//       assertFalse(compilerOptions0.inlineFunctions);
//       assertFalse(compilerOptions0.removeUnusedLocalVars);
//       assertFalse(compilerOptions0.optimizeReturns);
//       assertFalse(compilerOptions0.collapseAnonymousFunctions);
//       assertFalse(compilerOptions0.flowSensitiveInlineVariables);
//       assertFalse(compilerOptions0.exportTestFunctions);
//       assertFalse(compilerOptions0.crossModuleCodeMotion);
//       assertFalse(compilerOptions0.optimizeParameters);
//       assertFalse(compilerOptions0.checkSymbols);
//       assertFalse(compilerOptions0.optimizeArgumentsArray);
//       assertFalse(compilerOptions0.smartNameRemoval);
//       assertFalse(compilerOptions0.ambiguateProperties);
//       assertFalse(compilerOptions0.removeTryCatchFinally);
//       assertFalse(compilerOptions0.ideMode);
//       assertFalse(compilerOptions0.optimizeCalls);
//       assertFalse(compilerOptions0.lineBreak);
//       assertFalse(compilerOptions0.closurePass);
//       assertFalse(compilerOptions0.markAsCompiled);
//       assertFalse(compilerOptions0.inlineGetters);
//       assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
//       assertFalse(compilerOptions0.inlineLocalFunctions);
//       assertFalse(compilerOptions0.inlineVariables);
//       assertFalse(compilerOptions0.gatherCssNames);
//       assertFalse(compilerOptions0.crossModuleMethodMotion);
//       assertFalse(compilerOptions0.labelRenaming);
//       assertFalse(compilerOptions0.removeDeadCode);
//       assertFalse(compilerOptions0.reserveRawExports);
//       assertFalse(compilerOptions0.printInputDelimiter);
//       assertFalse(compilerOptions0.deadAssignmentElimination);
//       assertFalse(compilerOptions0.markNoSideEffectCalls);
//       assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
//       assertFalse(compilerOptions0.disambiguateProperties);
//       assertFalse(compilerOptions0.collapseProperties);
//       assertEquals(false, compilerOptions0.isRemoveUnusedClassProperties());
//       assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
//       assertEquals(false, compilerOptions0.assumeStrictThis());
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compilerOptions0.getLanguageIn());
//       assertEquals(CompilerOptions.TracerMode.OFF, compilerOptions0.getTracerMode());
//       assertEquals(false, compilerOptions0.isExternExportsEnabled());
//       assertEquals(false, compilerOptions0.assumeClosuresOnlyCaptureReferences());
//       assertEquals(CompilerOptions.TweakProcessing.OFF, compilerOptions0.getTweakProcessing());
//       assertEquals(false, compilerOptions0.getInferTypes());
//       assertNull(compilerOptions0.getLanguageOut());
//       assertNotNull(compilerOptions0);
//       
//       Result result0 = compiler0.compile((SourceFile) jSSourceFile0, (SourceFile) jSSourceFile0, compilerOptions0);
//       assertFalse(compilerOptions0.preferLineBreakAtEndOfFile);
//       assertFalse(compilerOptions0.checkSuspiciousCode);
//       assertFalse(compilerOptions0.computeFunctionSideEffects);
//       assertFalse(compilerOptions0.removeUnusedVars);
//       assertFalse(compilerOptions0.checkControlStructures);
//       assertFalse(compilerOptions0.prettyPrint);
//       assertFalse(compilerOptions0.coalesceVariableNames);
//       assertFalse(compilerOptions0.convertToDottedProperties);
//       assertFalse(compilerOptions0.aliasKeywords);
//       assertFalse(compilerOptions0.inlineConstantVars);
//       assertFalse(compilerOptions0.aliasAllStrings);
//       assertFalse(compilerOptions0.generateExports);
//       assertFalse(compilerOptions0.jqueryPass);
//       assertFalse(compilerOptions0.checkTypes);
//       assertFalse(compilerOptions0.foldConstants);
//       assertFalse(compilerOptions0.devirtualizePrototypeMethods);
//       assertFalse(compilerOptions0.generatePseudoNames);
//       assertFalse(compilerOptions0.rewriteFunctionExpressions);
//       assertFalse(compilerOptions0.moveFunctionDeclarations);
//       assertFalse(compilerOptions0.recordFunctionInformation);
//       assertFalse(compilerOptions0.aliasExternals);
//       assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
//       assertFalse(compilerOptions0.removeUnusedClassProperties);
//       assertFalse(compilerOptions0.collapseVariableDeclarations);
//       assertFalse(compilerOptions0.inlineFunctions);
//       assertFalse(compilerOptions0.removeUnusedLocalVars);
//       assertFalse(compilerOptions0.optimizeReturns);
//       assertFalse(compilerOptions0.collapseAnonymousFunctions);
//       assertFalse(compilerOptions0.flowSensitiveInlineVariables);
//       assertFalse(compilerOptions0.exportTestFunctions);
//       assertFalse(compilerOptions0.crossModuleCodeMotion);
//       assertFalse(compilerOptions0.optimizeParameters);
//       assertFalse(compilerOptions0.checkSymbols);
//       assertFalse(compilerOptions0.optimizeArgumentsArray);
//       assertFalse(compilerOptions0.smartNameRemoval);
//       assertFalse(compilerOptions0.ambiguateProperties);
//       assertFalse(compilerOptions0.removeTryCatchFinally);
//       assertFalse(compilerOptions0.ideMode);
//       assertFalse(compilerOptions0.optimizeCalls);
//       assertFalse(compilerOptions0.lineBreak);
//       assertFalse(compilerOptions0.closurePass);
//       assertFalse(compilerOptions0.markAsCompiled);
//       assertFalse(compilerOptions0.inlineGetters);
//       assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
//       assertFalse(compilerOptions0.inlineLocalFunctions);
//       assertFalse(compilerOptions0.inlineVariables);
//       assertFalse(compilerOptions0.gatherCssNames);
//       assertFalse(compilerOptions0.crossModuleMethodMotion);
//       assertFalse(compilerOptions0.labelRenaming);
//       assertFalse(compilerOptions0.removeDeadCode);
//       assertFalse(compilerOptions0.reserveRawExports);
//       assertFalse(compilerOptions0.printInputDelimiter);
//       assertFalse(compilerOptions0.deadAssignmentElimination);
//       assertFalse(compilerOptions0.markNoSideEffectCalls);
//       assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
//       assertFalse(compilerOptions0.disambiguateProperties);
//       assertFalse(compilerOptions0.collapseProperties);
//       assertEquals(false, compilerOptions0.isRemoveUnusedClassProperties());
//       assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
//       assertEquals(false, compilerOptions0.assumeStrictThis());
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compilerOptions0.getLanguageIn());
//       assertEquals(CompilerOptions.TracerMode.OFF, compilerOptions0.getTracerMode());
//       assertEquals(false, compilerOptions0.isExternExportsEnabled());
//       assertEquals(false, compilerOptions0.assumeClosuresOnlyCaptureReferences());
//       assertEquals(CompilerOptions.TweakProcessing.OFF, compilerOptions0.getTweakProcessing());
//       assertEquals(false, compilerOptions0.getInferTypes());
//       assertNull(compilerOptions0.getLanguageOut());
//       assertEquals("s", jSSourceFile0.getOriginalPath());
//       assertEquals("s", jSSourceFile0.toString());
//       assertEquals("s", jSSourceFile0.getName());
//       assertEquals(true, jSSourceFile0.isExtern());
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
//       assertEquals(0, compiler0.getWarningCount());
//       assertEquals(0.0, compiler0.getProgress(), 0.01D);
//       assertEquals(1, compiler0.getErrorCount());
//       assertEquals(false, compiler0.isIdeMode());
//       assertEquals(false, compiler0.isTypeCheckingEnabled());
//       assertEquals(true, compiler0.hasErrors());
//       assertEquals(false, compiler0.acceptConstKeyword());
//       assertNotNull(result0);
//       
//       DefaultPassConfig defaultPassConfig0 = new DefaultPassConfig(compilerOptions0);
//       assertFalse(compilerOptions0.preferLineBreakAtEndOfFile);
//       assertFalse(compilerOptions0.checkSuspiciousCode);
//       assertFalse(compilerOptions0.computeFunctionSideEffects);
//       assertFalse(compilerOptions0.removeUnusedVars);
//       assertFalse(compilerOptions0.checkControlStructures);
//       assertFalse(compilerOptions0.prettyPrint);
//       assertFalse(compilerOptions0.coalesceVariableNames);
//       assertFalse(compilerOptions0.convertToDottedProperties);
//       assertFalse(compilerOptions0.aliasKeywords);
//       assertFalse(compilerOptions0.inlineConstantVars);
//       assertFalse(compilerOptions0.aliasAllStrings);
//       assertFalse(compilerOptions0.generateExports);
//       assertFalse(compilerOptions0.jqueryPass);
//       assertFalse(compilerOptions0.checkTypes);
//       assertFalse(compilerOptions0.foldConstants);
//       assertFalse(compilerOptions0.devirtualizePrototypeMethods);
//       assertFalse(compilerOptions0.generatePseudoNames);
//       assertFalse(compilerOptions0.rewriteFunctionExpressions);
//       assertFalse(compilerOptions0.moveFunctionDeclarations);
//       assertFalse(compilerOptions0.recordFunctionInformation);
//       assertFalse(compilerOptions0.aliasExternals);
//       assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
//       assertFalse(compilerOptions0.removeUnusedClassProperties);
//       assertFalse(compilerOptions0.collapseVariableDeclarations);
//       assertFalse(compilerOptions0.inlineFunctions);
//       assertFalse(compilerOptions0.removeUnusedLocalVars);
//       assertFalse(compilerOptions0.optimizeReturns);
//       assertFalse(compilerOptions0.collapseAnonymousFunctions);
//       assertFalse(compilerOptions0.flowSensitiveInlineVariables);
//       assertFalse(compilerOptions0.exportTestFunctions);
//       assertFalse(compilerOptions0.crossModuleCodeMotion);
//       assertFalse(compilerOptions0.optimizeParameters);
//       assertFalse(compilerOptions0.checkSymbols);
//       assertFalse(compilerOptions0.optimizeArgumentsArray);
//       assertFalse(compilerOptions0.smartNameRemoval);
//       assertFalse(compilerOptions0.ambiguateProperties);
//       assertFalse(compilerOptions0.removeTryCatchFinally);
//       assertFalse(compilerOptions0.ideMode);
//       assertFalse(compilerOptions0.optimizeCalls);
//       assertFalse(compilerOptions0.lineBreak);
//       assertFalse(compilerOptions0.closurePass);
//       assertFalse(compilerOptions0.markAsCompiled);
//       assertFalse(compilerOptions0.inlineGetters);
//       assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
//       assertFalse(compilerOptions0.inlineLocalFunctions);
//       assertFalse(compilerOptions0.inlineVariables);
//       assertFalse(compilerOptions0.gatherCssNames);
//       assertFalse(compilerOptions0.crossModuleMethodMotion);
//       assertFalse(compilerOptions0.labelRenaming);
//       assertFalse(compilerOptions0.removeDeadCode);
//       assertFalse(compilerOptions0.reserveRawExports);
//       assertFalse(compilerOptions0.printInputDelimiter);
//       assertFalse(compilerOptions0.deadAssignmentElimination);
//       assertFalse(compilerOptions0.markNoSideEffectCalls);
//       assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
//       assertFalse(compilerOptions0.disambiguateProperties);
//       assertFalse(compilerOptions0.collapseProperties);
//       assertEquals(false, compilerOptions0.isRemoveUnusedClassProperties());
//       assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
//       assertEquals(false, compilerOptions0.assumeStrictThis());
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compilerOptions0.getLanguageIn());
//       assertEquals(CompilerOptions.TracerMode.OFF, compilerOptions0.getTracerMode());
//       assertEquals(false, compilerOptions0.isExternExportsEnabled());
//       assertEquals(false, compilerOptions0.assumeClosuresOnlyCaptureReferences());
//       assertEquals(CompilerOptions.TweakProcessing.OFF, compilerOptions0.getTweakProcessing());
//       assertEquals(false, compilerOptions0.getInferTypes());
//       assertNull(compilerOptions0.getLanguageOut());
//       assertNotNull(defaultPassConfig0);
//       
//       TypeCheck typeCheck0 = defaultPassConfig0.makeTypeCheck(compiler0);
//       assertFalse(compilerOptions0.preferLineBreakAtEndOfFile);
//       assertFalse(compilerOptions0.checkSuspiciousCode);
//       assertFalse(compilerOptions0.computeFunctionSideEffects);
//       assertFalse(compilerOptions0.removeUnusedVars);
//       assertFalse(compilerOptions0.checkControlStructures);
//       assertFalse(compilerOptions0.prettyPrint);
//       assertFalse(compilerOptions0.coalesceVariableNames);
//       assertFalse(compilerOptions0.convertToDottedProperties);
//       assertFalse(compilerOptions0.aliasKeywords);
//       assertFalse(compilerOptions0.inlineConstantVars);
//       assertFalse(compilerOptions0.aliasAllStrings);
//       assertFalse(compilerOptions0.generateExports);
//       assertFalse(compilerOptions0.jqueryPass);
//       assertFalse(compilerOptions0.checkTypes);
//       assertFalse(compilerOptions0.foldConstants);
//       assertFalse(compilerOptions0.devirtualizePrototypeMethods);
//       assertFalse(compilerOptions0.generatePseudoNames);
//       assertFalse(compilerOptions0.rewriteFunctionExpressions);
//       assertFalse(compilerOptions0.moveFunctionDeclarations);
//       assertFalse(compilerOptions0.recordFunctionInformation);
//       assertFalse(compilerOptions0.aliasExternals);
//       assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
//       assertFalse(compilerOptions0.removeUnusedClassProperties);
//       assertFalse(compilerOptions0.collapseVariableDeclarations);
//       assertFalse(compilerOptions0.inlineFunctions);
//       assertFalse(compilerOptions0.removeUnusedLocalVars);
//       assertFalse(compilerOptions0.optimizeReturns);
//       assertFalse(compilerOptions0.collapseAnonymousFunctions);
//       assertFalse(compilerOptions0.flowSensitiveInlineVariables);
//       assertFalse(compilerOptions0.exportTestFunctions);
//       assertFalse(compilerOptions0.crossModuleCodeMotion);
//       assertFalse(compilerOptions0.optimizeParameters);
//       assertFalse(compilerOptions0.checkSymbols);
//       assertFalse(compilerOptions0.optimizeArgumentsArray);
//       assertFalse(compilerOptions0.smartNameRemoval);
//       assertFalse(compilerOptions0.ambiguateProperties);
//       assertFalse(compilerOptions0.removeTryCatchFinally);
//       assertFalse(compilerOptions0.ideMode);
//       assertFalse(compilerOptions0.optimizeCalls);
//       assertFalse(compilerOptions0.lineBreak);
//       assertFalse(compilerOptions0.closurePass);
//       assertFalse(compilerOptions0.markAsCompiled);
//       assertFalse(compilerOptions0.inlineGetters);
//       assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
//       assertFalse(compilerOptions0.inlineLocalFunctions);
//       assertFalse(compilerOptions0.inlineVariables);
//       assertFalse(compilerOptions0.gatherCssNames);
//       assertFalse(compilerOptions0.crossModuleMethodMotion);
//       assertFalse(compilerOptions0.labelRenaming);
//       assertFalse(compilerOptions0.removeDeadCode);
//       assertFalse(compilerOptions0.reserveRawExports);
//       assertFalse(compilerOptions0.printInputDelimiter);
//       assertFalse(compilerOptions0.deadAssignmentElimination);
//       assertFalse(compilerOptions0.markNoSideEffectCalls);
//       assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
//       assertFalse(compilerOptions0.disambiguateProperties);
//       assertFalse(compilerOptions0.collapseProperties);
//       assertEquals(false, compilerOptions0.isRemoveUnusedClassProperties());
//       assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
//       assertEquals(false, compilerOptions0.assumeStrictThis());
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compilerOptions0.getLanguageIn());
//       assertEquals(CompilerOptions.TracerMode.OFF, compilerOptions0.getTracerMode());
//       assertEquals(false, compilerOptions0.isExternExportsEnabled());
//       assertEquals(false, compilerOptions0.assumeClosuresOnlyCaptureReferences());
//       assertEquals(CompilerOptions.TweakProcessing.OFF, compilerOptions0.getTweakProcessing());
//       assertEquals(false, compilerOptions0.getInferTypes());
//       assertNull(compilerOptions0.getLanguageOut());
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
//       assertEquals(0, compiler0.getWarningCount());
//       assertEquals(0.0, compiler0.getProgress(), 0.01D);
//       assertEquals(1, compiler0.getErrorCount());
//       assertEquals(false, compiler0.isIdeMode());
//       assertEquals(false, compiler0.isTypeCheckingEnabled());
//       assertEquals(true, compiler0.hasErrors());
//       assertEquals(false, compiler0.acceptConstKeyword());
//       assertNotNull(typeCheck0);
//       
//       double double0 = typeCheck0.getTypedPercent();
//       assertFalse(compilerOptions0.preferLineBreakAtEndOfFile);
//       assertFalse(compilerOptions0.checkSuspiciousCode);
//       assertFalse(compilerOptions0.computeFunctionSideEffects);
//       assertFalse(compilerOptions0.removeUnusedVars);
//       assertFalse(compilerOptions0.checkControlStructures);
//       assertFalse(compilerOptions0.prettyPrint);
//       assertFalse(compilerOptions0.coalesceVariableNames);
//       assertFalse(compilerOptions0.convertToDottedProperties);
//       assertFalse(compilerOptions0.aliasKeywords);
//       assertFalse(compilerOptions0.inlineConstantVars);
//       assertFalse(compilerOptions0.aliasAllStrings);
//       assertFalse(compilerOptions0.generateExports);
//       assertFalse(compilerOptions0.jqueryPass);
//       assertFalse(compilerOptions0.checkTypes);
//       assertFalse(compilerOptions0.foldConstants);
//       assertFalse(compilerOptions0.devirtualizePrototypeMethods);
//       assertFalse(compilerOptions0.generatePseudoNames);
//       assertFalse(compilerOptions0.rewriteFunctionExpressions);
//       assertFalse(compilerOptions0.moveFunctionDeclarations);
//       assertFalse(compilerOptions0.recordFunctionInformation);
//       assertFalse(compilerOptions0.aliasExternals);
//       assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
//       assertFalse(compilerOptions0.removeUnusedClassProperties);
//       assertFalse(compilerOptions0.collapseVariableDeclarations);
//       assertFalse(compilerOptions0.inlineFunctions);
//       assertFalse(compilerOptions0.removeUnusedLocalVars);
//       assertFalse(compilerOptions0.optimizeReturns);
//       assertFalse(compilerOptions0.collapseAnonymousFunctions);
//       assertFalse(compilerOptions0.flowSensitiveInlineVariables);
//       assertFalse(compilerOptions0.exportTestFunctions);
//       assertFalse(compilerOptions0.crossModuleCodeMotion);
//       assertFalse(compilerOptions0.optimizeParameters);
//       assertFalse(compilerOptions0.checkSymbols);
//       assertFalse(compilerOptions0.optimizeArgumentsArray);
//       assertFalse(compilerOptions0.smartNameRemoval);
//       assertFalse(compilerOptions0.ambiguateProperties);
//       assertFalse(compilerOptions0.removeTryCatchFinally);
//       assertFalse(compilerOptions0.ideMode);
//       assertFalse(compilerOptions0.optimizeCalls);
//       assertFalse(compilerOptions0.lineBreak);
//       assertFalse(compilerOptions0.closurePass);
//       assertFalse(compilerOptions0.markAsCompiled);
//       assertFalse(compilerOptions0.inlineGetters);
//       assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
//       assertFalse(compilerOptions0.inlineLocalFunctions);
//       assertFalse(compilerOptions0.inlineVariables);
//       assertFalse(compilerOptions0.gatherCssNames);
//       assertFalse(compilerOptions0.crossModuleMethodMotion);
//       assertFalse(compilerOptions0.labelRenaming);
//       assertFalse(compilerOptions0.removeDeadCode);
//       assertFalse(compilerOptions0.reserveRawExports);
//       assertFalse(compilerOptions0.printInputDelimiter);
//       assertFalse(compilerOptions0.deadAssignmentElimination);
//       assertFalse(compilerOptions0.markNoSideEffectCalls);
//       assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
//       assertFalse(compilerOptions0.disambiguateProperties);
//       assertFalse(compilerOptions0.collapseProperties);
//       assertEquals(false, compilerOptions0.isRemoveUnusedClassProperties());
//       assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
//       assertEquals(false, compilerOptions0.assumeStrictThis());
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compilerOptions0.getLanguageIn());
//       assertEquals(CompilerOptions.TracerMode.OFF, compilerOptions0.getTracerMode());
//       assertEquals(false, compilerOptions0.isExternExportsEnabled());
//       assertEquals(false, compilerOptions0.assumeClosuresOnlyCaptureReferences());
//       assertEquals(CompilerOptions.TweakProcessing.OFF, compilerOptions0.getTweakProcessing());
//       assertEquals(false, compilerOptions0.getInferTypes());
//       assertNull(compilerOptions0.getLanguageOut());
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
//       assertEquals(0, compiler0.getWarningCount());
//       assertEquals(0.0, compiler0.getProgress(), 0.01D);
//       assertEquals(1, compiler0.getErrorCount());
//       assertEquals(false, compiler0.isIdeMode());
//       assertEquals(false, compiler0.isTypeCheckingEnabled());
//       assertEquals(true, compiler0.hasErrors());
//       assertEquals(false, compiler0.acceptConstKeyword());
//       assertEquals(0.0, double0, 0.01D);
//       
//       NodeTraversal nodeTraversal0 = null;
//       int int0 = 2246;
//       Node node0 = Node.newNumber(double0, int0, int0);
//       assertFalse(compilerOptions0.preferLineBreakAtEndOfFile);
//       assertFalse(compilerOptions0.checkSuspiciousCode);
//       assertFalse(compilerOptions0.computeFunctionSideEffects);
//       assertFalse(compilerOptions0.removeUnusedVars);
//       assertFalse(compilerOptions0.checkControlStructures);
//       assertFalse(compilerOptions0.prettyPrint);
//       assertFalse(compilerOptions0.coalesceVariableNames);
//       assertFalse(compilerOptions0.convertToDottedProperties);
//       assertFalse(compilerOptions0.aliasKeywords);
//       assertFalse(compilerOptions0.inlineConstantVars);
//       assertFalse(compilerOptions0.aliasAllStrings);
//       assertFalse(compilerOptions0.generateExports);
//       assertFalse(compilerOptions0.jqueryPass);
//       assertFalse(compilerOptions0.checkTypes);
//       assertFalse(compilerOptions0.foldConstants);
//       assertFalse(compilerOptions0.devirtualizePrototypeMethods);
//       assertFalse(compilerOptions0.generatePseudoNames);
//       assertFalse(compilerOptions0.rewriteFunctionExpressions);
//       assertFalse(compilerOptions0.moveFunctionDeclarations);
//       assertFalse(compilerOptions0.recordFunctionInformation);
//       assertFalse(compilerOptions0.aliasExternals);
//       assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
//       assertFalse(compilerOptions0.removeUnusedClassProperties);
//       assertFalse(compilerOptions0.collapseVariableDeclarations);
//       assertFalse(compilerOptions0.inlineFunctions);
//       assertFalse(compilerOptions0.removeUnusedLocalVars);
//       assertFalse(compilerOptions0.optimizeReturns);
//       assertFalse(compilerOptions0.collapseAnonymousFunctions);
//       assertFalse(compilerOptions0.flowSensitiveInlineVariables);
//       assertFalse(compilerOptions0.exportTestFunctions);
//       assertFalse(compilerOptions0.crossModuleCodeMotion);
//       assertFalse(compilerOptions0.optimizeParameters);
//       assertFalse(compilerOptions0.checkSymbols);
//       assertFalse(compilerOptions0.optimizeArgumentsArray);
//       assertFalse(compilerOptions0.smartNameRemoval);
//       assertFalse(compilerOptions0.ambiguateProperties);
//       assertFalse(compilerOptions0.removeTryCatchFinally);
//       assertFalse(compilerOptions0.ideMode);
//       assertFalse(compilerOptions0.optimizeCalls);
//       assertFalse(compilerOptions0.lineBreak);
//       assertFalse(compilerOptions0.closurePass);
//       assertFalse(compilerOptions0.markAsCompiled);
//       assertFalse(compilerOptions0.inlineGetters);
//       assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
//       assertFalse(compilerOptions0.inlineLocalFunctions);
//       assertFalse(compilerOptions0.inlineVariables);
//       assertFalse(compilerOptions0.gatherCssNames);
//       assertFalse(compilerOptions0.crossModuleMethodMotion);
//       assertFalse(compilerOptions0.labelRenaming);
//       assertFalse(compilerOptions0.removeDeadCode);
//       assertFalse(compilerOptions0.reserveRawExports);
//       assertFalse(compilerOptions0.printInputDelimiter);
//       assertFalse(compilerOptions0.deadAssignmentElimination);
//       assertFalse(compilerOptions0.markNoSideEffectCalls);
//       assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
//       assertFalse(compilerOptions0.disambiguateProperties);
//       assertFalse(compilerOptions0.collapseProperties);
//       assertEquals(false, node0.isOnlyModifiesThisCall());
//       assertEquals(false, node0.isFor());
//       assertEquals(false, node0.isParamList());
//       assertEquals(false, node0.isLabel());
//       assertEquals(false, node0.isAssign());
//       assertEquals(false, node0.isAdd());
//       assertEquals(false, node0.isThis());
//       assertEquals(false, node0.isNull());
//       assertEquals(false, node0.isOptionalArg());
//       assertEquals(false, node0.isReturn());
//       assertEquals(false, node0.isNew());
//       assertEquals(false, node0.hasMoreThanOneChild());
//       assertEquals(false, node0.isString());
//       assertEquals(0, node0.getSideEffectFlags());
//       assertEquals(false, node0.isNE());
//       assertEquals(true, node0.isNumber());
//       assertEquals(false, node0.isWith());
//       assertNull(node0.getSourceFileName());
//       assertEquals(false, node0.isVoid());
//       assertEquals(false, node0.wasEmptyNode());
//       assertEquals(false, node0.isInstanceOf());
//       assertEquals(false, node0.isBlock());
//       assertEquals(false, node0.isDebugger());
//       assertEquals(false, node0.isDo());
//       assertEquals(false, node0.isGetterDef());
//       assertEquals(9201862, node0.getSourcePosition());
//       assertEquals(false, node0.isVar());
//       assertEquals(0, node0.getChildCount());
//       assertEquals(false, node0.isContinue());
//       assertEquals(false, node0.isObjectLit());
//       assertEquals(false, node0.hasChildren());
//       assertEquals(2246, node0.getCharno());
//       assertEquals(false, node0.isScript());
//       assertEquals(false, node0.isStringKey());
//       assertEquals(false, node0.isSwitch());
//       assertEquals(false, node0.isDec());
//       assertEquals(false, node0.isThrow());
//       assertEquals(false, node0.isGetElem());
//       assertEquals(false, node0.isNot());
//       assertEquals(false, node0.isAssignAdd());
//       assertEquals(false, node0.isTypeOf());
//       assertEquals(false, node0.isQuotedString());
//       assertEquals(false, node0.isSetterDef());
//       assertEquals(false, node0.isDelProp());
//       assertEquals(false, node0.isSyntheticBlock());
//       assertEquals(false, node0.isCall());
//       assertEquals(false, node0.isEmpty());
//       assertEquals(false, node0.isInc());
//       assertEquals(false, node0.isComma());
//       assertEquals(2246, node0.getLineno());
//       assertEquals(false, node0.isName());
//       assertEquals(false, node0.isNoSideEffectsCall());
//       assertEquals(false, node0.hasOneChild());
//       assertEquals(false, node0.isLabelName());
//       assertEquals(false, node0.isFalse());
//       assertEquals(false, node0.isDefaultCase());
//       assertEquals(false, node0.isExprResult());
//       assertEquals(false, node0.isIf());
//       assertEquals(false, node0.isCase());
//       assertEquals(39, node0.getType());
//       assertEquals(false, node0.isRegExp());
//       assertEquals(false, node0.isCatch());
//       assertEquals(false, node0.isFromExterns());
//       assertEquals(false, node0.isGetProp());
//       assertEquals(false, node0.isOr());
//       assertEquals(false, node0.isFunction());
//       assertEquals(0, node0.getLength());
//       assertEquals(false, node0.isVarArgs());
//       assertEquals(false, node0.isIn());
//       assertEquals(false, node0.isHook());
//       assertEquals(false, node0.isArrayLit());
//       assertEquals(false, node0.isBreak());
//       assertEquals(false, node0.isLocalResultCall());
//       assertEquals(false, node0.isTrue());
//       assertEquals(false, node0.isAnd());
//       assertEquals(false, node0.isTry());
//       assertEquals(false, node0.isWhile());
//       assertEquals(false, compilerOptions0.isRemoveUnusedClassProperties());
//       assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
//       assertEquals(false, compilerOptions0.assumeStrictThis());
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compilerOptions0.getLanguageIn());
//       assertEquals(CompilerOptions.TracerMode.OFF, compilerOptions0.getTracerMode());
//       assertEquals(false, compilerOptions0.isExternExportsEnabled());
//       assertEquals(false, compilerOptions0.assumeClosuresOnlyCaptureReferences());
//       assertEquals(CompilerOptions.TweakProcessing.OFF, compilerOptions0.getTweakProcessing());
//       assertEquals(false, compilerOptions0.getInferTypes());
//       assertNull(compilerOptions0.getLanguageOut());
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
//       assertEquals(0, compiler0.getWarningCount());
//       assertEquals(0.0, compiler0.getProgress(), 0.01D);
//       assertEquals(1, compiler0.getErrorCount());
//       assertEquals(false, compiler0.isIdeMode());
//       assertEquals(false, compiler0.isTypeCheckingEnabled());
//       assertEquals(true, compiler0.hasErrors());
//       assertEquals(false, compiler0.acceptConstKeyword());
//       assertNotNull(node0);
//       
//       typeCheck0.visit(nodeTraversal0, node0, node0);
//       assertFalse(compilerOptions0.preferLineBreakAtEndOfFile);
//       assertFalse(compilerOptions0.checkSuspiciousCode);
//       assertFalse(compilerOptions0.computeFunctionSideEffects);
//       assertFalse(compilerOptions0.removeUnusedVars);
//       assertFalse(compilerOptions0.checkControlStructures);
//       assertFalse(compilerOptions0.prettyPrint);
//       assertFalse(compilerOptions0.coalesceVariableNames);
//       assertFalse(compilerOptions0.convertToDottedProperties);
//       assertFalse(compilerOptions0.aliasKeywords);
//       assertFalse(compilerOptions0.inlineConstantVars);
//       assertFalse(compilerOptions0.aliasAllStrings);
//       assertFalse(compilerOptions0.generateExports);
//       assertFalse(compilerOptions0.jqueryPass);
//       assertFalse(compilerOptions0.checkTypes);
//       assertFalse(compilerOptions0.foldConstants);
//       assertFalse(compilerOptions0.devirtualizePrototypeMethods);
//       assertFalse(compilerOptions0.generatePseudoNames);
//       assertFalse(compilerOptions0.rewriteFunctionExpressions);
//       assertFalse(compilerOptions0.moveFunctionDeclarations);
//       assertFalse(compilerOptions0.recordFunctionInformation);
//       assertFalse(compilerOptions0.aliasExternals);
//       assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
//       assertFalse(compilerOptions0.removeUnusedClassProperties);
//       assertFalse(compilerOptions0.collapseVariableDeclarations);
//       assertFalse(compilerOptions0.inlineFunctions);
//       assertFalse(compilerOptions0.removeUnusedLocalVars);
//       assertFalse(compilerOptions0.optimizeReturns);
//       assertFalse(compilerOptions0.collapseAnonymousFunctions);
//       assertFalse(compilerOptions0.flowSensitiveInlineVariables);
//       assertFalse(compilerOptions0.exportTestFunctions);
//       assertFalse(compilerOptions0.crossModuleCodeMotion);
//       assertFalse(compilerOptions0.optimizeParameters);
//       assertFalse(compilerOptions0.checkSymbols);
//       assertFalse(compilerOptions0.optimizeArgumentsArray);
//       assertFalse(compilerOptions0.smartNameRemoval);
//       assertFalse(compilerOptions0.ambiguateProperties);
//       assertFalse(compilerOptions0.removeTryCatchFinally);
//       assertFalse(compilerOptions0.ideMode);
//       assertFalse(compilerOptions0.optimizeCalls);
//       assertFalse(compilerOptions0.lineBreak);
//       assertFalse(compilerOptions0.closurePass);
//       assertFalse(compilerOptions0.markAsCompiled);
//       assertFalse(compilerOptions0.inlineGetters);
//       assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
//       assertFalse(compilerOptions0.inlineLocalFunctions);
//       assertFalse(compilerOptions0.inlineVariables);
//       assertFalse(compilerOptions0.gatherCssNames);
//       assertFalse(compilerOptions0.crossModuleMethodMotion);
//       assertFalse(compilerOptions0.labelRenaming);
//       assertFalse(compilerOptions0.removeDeadCode);
//       assertFalse(compilerOptions0.reserveRawExports);
//       assertFalse(compilerOptions0.printInputDelimiter);
//       assertFalse(compilerOptions0.deadAssignmentElimination);
//       assertFalse(compilerOptions0.markNoSideEffectCalls);
//       assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
//       assertFalse(compilerOptions0.disambiguateProperties);
//       assertFalse(compilerOptions0.collapseProperties);
//       assertEquals(false, node0.isOnlyModifiesThisCall());
//       assertEquals(false, node0.isFor());
//       assertEquals(false, node0.isParamList());
//       assertEquals(false, node0.isLabel());
//       assertEquals(false, node0.isAssign());
//       assertEquals(false, node0.isAdd());
//       assertEquals(false, node0.isThis());
//       assertEquals(false, node0.isNull());
//       assertEquals(false, node0.isOptionalArg());
//       assertEquals(false, node0.isReturn());
//       assertEquals(false, node0.isNew());
//       assertEquals(false, node0.hasMoreThanOneChild());
//       assertEquals(false, node0.isString());
//       assertEquals(0, node0.getSideEffectFlags());
//       assertEquals(false, node0.isNE());
//       assertEquals(true, node0.isNumber());
//       assertEquals(false, node0.isWith());
//       assertNull(node0.getSourceFileName());
//       assertEquals(false, node0.isVoid());
//       assertEquals(false, node0.wasEmptyNode());
//       assertEquals(false, node0.isInstanceOf());
//       assertEquals(false, node0.isBlock());
//       assertEquals(false, node0.isDebugger());
//       assertEquals(false, node0.isDo());
//       assertEquals(false, node0.isGetterDef());
//       assertEquals(9201862, node0.getSourcePosition());
//       assertEquals(false, node0.isVar());
//       assertEquals(0, node0.getChildCount());
//       assertEquals(false, node0.isContinue());
//       assertEquals(false, node0.isObjectLit());
//       assertEquals(false, node0.hasChildren());
//       assertEquals(2246, node0.getCharno());
//       assertEquals(false, node0.isScript());
//       assertEquals(false, node0.isStringKey());
//       assertEquals(false, node0.isSwitch());
//       assertEquals(false, node0.isDec());
//       assertEquals(false, node0.isThrow());
//       assertEquals(false, node0.isGetElem());
//       assertEquals(false, node0.isNot());
//       assertEquals(false, node0.isAssignAdd());
//       assertEquals(false, node0.isTypeOf());
//       assertEquals(false, node0.isQuotedString());
//       assertEquals(false, node0.isSetterDef());
//       assertEquals(false, node0.isDelProp());
//       assertEquals(false, node0.isSyntheticBlock());
//       assertEquals(false, node0.isCall());
//       assertEquals(false, node0.isEmpty());
//       assertEquals(false, node0.isInc());
//       assertEquals(false, node0.isComma());
//       assertEquals(2246, node0.getLineno());
//       assertEquals(false, node0.isName());
//       assertEquals(false, node0.isNoSideEffectsCall());
//       assertEquals(false, node0.hasOneChild());
//       assertEquals(false, node0.isLabelName());
//       assertEquals(false, node0.isFalse());
//       assertEquals(false, node0.isDefaultCase());
//       assertEquals(false, node0.isExprResult());
//       assertEquals(false, node0.isIf());
//       assertEquals(false, node0.isCase());
//       assertEquals(39, node0.getType());
//       assertEquals(false, node0.isRegExp());
//       assertEquals(false, node0.isCatch());
//       assertEquals(false, node0.isFromExterns());
//       assertEquals(false, node0.isGetProp());
//       assertEquals(false, node0.isOr());
//       assertEquals(false, node0.isFunction());
//       assertEquals(0, node0.getLength());
//       assertEquals(false, node0.isVarArgs());
//       assertEquals(false, node0.isIn());
//       assertEquals(false, node0.isHook());
//       assertEquals(false, node0.isArrayLit());
//       assertEquals(false, node0.isBreak());
//       assertEquals(false, node0.isLocalResultCall());
//       assertEquals(false, node0.isTrue());
//       assertEquals(false, node0.isAnd());
//       assertEquals(false, node0.isTry());
//       assertEquals(false, node0.isWhile());
//       assertEquals(false, compilerOptions0.isRemoveUnusedClassProperties());
//       assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
//       assertEquals(false, compilerOptions0.assumeStrictThis());
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compilerOptions0.getLanguageIn());
//       assertEquals(CompilerOptions.TracerMode.OFF, compilerOptions0.getTracerMode());
//       assertEquals(false, compilerOptions0.isExternExportsEnabled());
//       assertEquals(false, compilerOptions0.assumeClosuresOnlyCaptureReferences());
//       assertEquals(CompilerOptions.TweakProcessing.OFF, compilerOptions0.getTweakProcessing());
//       assertEquals(false, compilerOptions0.getInferTypes());
//       assertNull(compilerOptions0.getLanguageOut());
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
//       assertEquals(0, compiler0.getWarningCount());
//       assertEquals(0.0, compiler0.getProgress(), 0.01D);
//       assertEquals(1, compiler0.getErrorCount());
//       assertEquals(false, compiler0.isIdeMode());
//       assertEquals(false, compiler0.isTypeCheckingEnabled());
//       assertEquals(true, compiler0.hasErrors());
//       assertEquals(false, compiler0.acceptConstKeyword());
//       
//       boolean boolean0 = typeCheck0.visitName(nodeTraversal0, node0, node0);
//       assertFalse(compilerOptions0.preferLineBreakAtEndOfFile);
//       assertFalse(compilerOptions0.checkSuspiciousCode);
//       assertFalse(compilerOptions0.computeFunctionSideEffects);
//       assertFalse(compilerOptions0.removeUnusedVars);
//       assertFalse(compilerOptions0.checkControlStructures);
//       assertFalse(compilerOptions0.prettyPrint);
//       assertFalse(compilerOptions0.coalesceVariableNames);
//       assertFalse(compilerOptions0.convertToDottedProperties);
//       assertFalse(compilerOptions0.aliasKeywords);
//       assertFalse(compilerOptions0.inlineConstantVars);
//       assertFalse(compilerOptions0.aliasAllStrings);
//       assertFalse(compilerOptions0.generateExports);
//       assertFalse(compilerOptions0.jqueryPass);
//       assertFalse(compilerOptions0.checkTypes);
//       assertFalse(compilerOptions0.foldConstants);
//       assertFalse(compilerOptions0.devirtualizePrototypeMethods);
//       assertFalse(compilerOptions0.generatePseudoNames);
//       assertFalse(compilerOptions0.rewriteFunctionExpressions);
//       assertFalse(compilerOptions0.moveFunctionDeclarations);
//       assertFalse(compilerOptions0.recordFunctionInformation);
//       assertFalse(compilerOptions0.aliasExternals);
//       assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
//       assertFalse(compilerOptions0.removeUnusedClassProperties);
//       assertFalse(compilerOptions0.collapseVariableDeclarations);
//       assertFalse(compilerOptions0.inlineFunctions);
//       assertFalse(compilerOptions0.removeUnusedLocalVars);
//       assertFalse(compilerOptions0.optimizeReturns);
//       assertFalse(compilerOptions0.collapseAnonymousFunctions);
//       assertFalse(compilerOptions0.flowSensitiveInlineVariables);
//       assertFalse(compilerOptions0.exportTestFunctions);
//       assertFalse(compilerOptions0.crossModuleCodeMotion);
//       assertFalse(compilerOptions0.optimizeParameters);
//       assertFalse(compilerOptions0.checkSymbols);
//       assertFalse(compilerOptions0.optimizeArgumentsArray);
//       assertFalse(compilerOptions0.smartNameRemoval);
//       assertFalse(compilerOptions0.ambiguateProperties);
//       assertFalse(compilerOptions0.removeTryCatchFinally);
//       assertFalse(compilerOptions0.ideMode);
//       assertFalse(compilerOptions0.optimizeCalls);
//       assertFalse(compilerOptions0.lineBreak);
//       assertFalse(compilerOptions0.closurePass);
//       assertFalse(compilerOptions0.markAsCompiled);
//       assertFalse(compilerOptions0.inlineGetters);
//       assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
//       assertFalse(compilerOptions0.inlineLocalFunctions);
//       assertFalse(compilerOptions0.inlineVariables);
//       assertFalse(compilerOptions0.gatherCssNames);
//       assertFalse(compilerOptions0.crossModuleMethodMotion);
//       assertFalse(compilerOptions0.labelRenaming);
//       assertFalse(compilerOptions0.removeDeadCode);
//       assertFalse(compilerOptions0.reserveRawExports);
//       assertFalse(compilerOptions0.printInputDelimiter);
//       assertFalse(compilerOptions0.deadAssignmentElimination);
//       assertFalse(compilerOptions0.markNoSideEffectCalls);
//       assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
//       assertFalse(compilerOptions0.disambiguateProperties);
//       assertFalse(compilerOptions0.collapseProperties);
//       assertEquals(false, node0.isOnlyModifiesThisCall());
//       assertEquals(false, node0.isFor());
//       assertEquals(false, node0.isParamList());
//       assertEquals(false, node0.isLabel());
//       assertEquals(false, node0.isAssign());
//       assertEquals(false, node0.isAdd());
//       assertEquals(false, node0.isThis());
//       assertEquals(false, node0.isNull());
//       assertEquals(false, node0.isOptionalArg());
//       assertEquals(false, node0.isReturn());
//       assertEquals(false, node0.isNew());
//       assertEquals(false, node0.hasMoreThanOneChild());
//       assertEquals(false, node0.isString());
//       assertEquals(0, node0.getSideEffectFlags());
//       assertEquals(false, node0.isNE());
//       assertEquals(true, node0.isNumber());
//       assertEquals(false, node0.isWith());
//       assertNull(node0.getSourceFileName());
//       assertEquals(false, node0.isVoid());
//       assertEquals(false, node0.wasEmptyNode());
//       assertEquals(false, node0.isInstanceOf());
//       assertEquals(false, node0.isBlock());
//       assertEquals(false, node0.isDebugger());
//       assertEquals(false, node0.isDo());
//       assertEquals(false, node0.isGetterDef());
//       assertEquals(9201862, node0.getSourcePosition());
//       assertEquals(false, node0.isVar());
//       assertEquals(0, node0.getChildCount());
//       assertEquals(false, node0.isContinue());
//       assertEquals(false, node0.isObjectLit());
//       assertEquals(false, node0.hasChildren());
//       assertEquals(2246, node0.getCharno());
//       assertEquals(false, node0.isScript());
//       assertEquals(false, node0.isStringKey());
//       assertEquals(false, node0.isSwitch());
//       assertEquals(false, node0.isDec());
//       assertEquals(false, node0.isThrow());
//       assertEquals(false, node0.isGetElem());
//       assertEquals(false, node0.isNot());
//       assertEquals(false, node0.isAssignAdd());
//       assertEquals(false, node0.isTypeOf());
//       assertEquals(false, node0.isQuotedString());
//       assertEquals(false, node0.isSetterDef());
//       assertEquals(false, node0.isDelProp());
//       assertEquals(false, node0.isSyntheticBlock());
//       assertEquals(false, node0.isCall());
//       assertEquals(false, node0.isEmpty());
//       assertEquals(false, node0.isInc());
//       assertEquals(false, node0.isComma());
//       assertEquals(2246, node0.getLineno());
//       assertEquals(false, node0.isName());
//       assertEquals(false, node0.isNoSideEffectsCall());
//       assertEquals(false, node0.hasOneChild());
//       assertEquals(false, node0.isLabelName());
//       assertEquals(false, node0.isFalse());
//       assertEquals(false, node0.isDefaultCase());
//       assertEquals(false, node0.isExprResult());
//       assertEquals(false, node0.isIf());
//       assertEquals(false, node0.isCase());
//       assertEquals(39, node0.getType());
//       assertEquals(false, node0.isRegExp());
//       assertEquals(false, node0.isCatch());
//       assertEquals(false, node0.isFromExterns());
//       assertEquals(false, node0.isGetProp());
//       assertEquals(false, node0.isOr());
//       assertEquals(false, node0.isFunction());
//       assertEquals(0, node0.getLength());
//       assertEquals(false, node0.isVarArgs());
//       assertEquals(false, node0.isIn());
//       assertEquals(false, node0.isHook());
//       assertEquals(false, node0.isArrayLit());
//       assertEquals(false, node0.isBreak());
//       assertEquals(false, node0.isLocalResultCall());
//       assertEquals(false, node0.isTrue());
//       assertEquals(false, node0.isAnd());
//       assertEquals(false, node0.isTry());
//       assertEquals(false, node0.isWhile());
//       assertEquals(false, compilerOptions0.isRemoveUnusedClassProperties());
//       assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
//       assertEquals(false, compilerOptions0.assumeStrictThis());
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compilerOptions0.getLanguageIn());
//       assertEquals(CompilerOptions.TracerMode.OFF, compilerOptions0.getTracerMode());
//       assertEquals(false, compilerOptions0.isExternExportsEnabled());
//       assertEquals(false, compilerOptions0.assumeClosuresOnlyCaptureReferences());
//       assertEquals(CompilerOptions.TweakProcessing.OFF, compilerOptions0.getTweakProcessing());
//       assertEquals(false, compilerOptions0.getInferTypes());
//       assertNull(compilerOptions0.getLanguageOut());
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
//       assertEquals(0, compiler0.getWarningCount());
//       assertEquals(0.0, compiler0.getProgress(), 0.01D);
//       assertEquals(1, compiler0.getErrorCount());
//       assertEquals(false, compiler0.isIdeMode());
//       assertEquals(false, compiler0.isTypeCheckingEnabled());
//       assertEquals(true, compiler0.hasErrors());
//       assertEquals(false, compiler0.acceptConstKeyword());
//       assertTrue(boolean0);
//   }

  @Test
  public void test3() {}
//   @Test
//   public void test3()  throws Throwable  {
//       Compiler compiler0 = new Compiler();
//       assertEquals(0.0, compiler0.getProgress(), 0.01D);
//       assertNotNull(compiler0);
//       
//       String string0 = "s";
//       MockFile mockFile0 = new MockFile(string0);
//       assertNotNull(mockFile0);
//       
//       JSSourceFile jSSourceFile0 = JSSourceFile.fromFile((File) mockFile0);
//       assertEquals(false, jSSourceFile0.isExtern());
//       assertEquals("s", jSSourceFile0.toString());
//       assertEquals("s", jSSourceFile0.getName());
//       assertEquals("s", jSSourceFile0.getOriginalPath());
//       assertNotNull(jSSourceFile0);
//       
//       CompilerOptions compilerOptions0 = new CompilerOptions();
//       assertFalse(compilerOptions0.checkSuspiciousCode);
//       assertFalse(compilerOptions0.aliasKeywords);
//       assertFalse(compilerOptions0.checkTypes);
//       assertFalse(compilerOptions0.removeUnusedClassProperties);
//       assertFalse(compilerOptions0.preferLineBreakAtEndOfFile);
//       assertFalse(compilerOptions0.removeTryCatchFinally);
//       assertFalse(compilerOptions0.aliasAllStrings);
//       assertFalse(compilerOptions0.ideMode);
//       assertFalse(compilerOptions0.coalesceVariableNames);
//       assertFalse(compilerOptions0.checkControlStructures);
//       assertFalse(compilerOptions0.inlineLocalFunctions);
//       assertFalse(compilerOptions0.collapseAnonymousFunctions);
//       assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
//       assertFalse(compilerOptions0.prettyPrint);
//       assertFalse(compilerOptions0.lineBreak);
//       assertFalse(compilerOptions0.smartNameRemoval);
//       assertFalse(compilerOptions0.disambiguateProperties);
//       assertFalse(compilerOptions0.recordFunctionInformation);
//       assertFalse(compilerOptions0.optimizeReturns);
//       assertFalse(compilerOptions0.markAsCompiled);
//       assertFalse(compilerOptions0.removeUnusedLocalVars);
//       assertFalse(compilerOptions0.foldConstants);
//       assertFalse(compilerOptions0.collapseProperties);
//       assertFalse(compilerOptions0.labelRenaming);
//       assertFalse(compilerOptions0.rewriteFunctionExpressions);
//       assertFalse(compilerOptions0.exportTestFunctions);
//       assertFalse(compilerOptions0.removeDeadCode);
//       assertFalse(compilerOptions0.aliasExternals);
//       assertFalse(compilerOptions0.moveFunctionDeclarations);
//       assertFalse(compilerOptions0.collapseVariableDeclarations);
//       assertFalse(compilerOptions0.inlineFunctions);
//       assertFalse(compilerOptions0.convertToDottedProperties);
//       assertFalse(compilerOptions0.checkSymbols);
//       assertFalse(compilerOptions0.devirtualizePrototypeMethods);
//       assertFalse(compilerOptions0.optimizeCalls);
//       assertFalse(compilerOptions0.printInputDelimiter);
//       assertFalse(compilerOptions0.removeUnusedVars);
//       assertFalse(compilerOptions0.inlineVariables);
//       assertFalse(compilerOptions0.ambiguateProperties);
//       assertFalse(compilerOptions0.closurePass);
//       assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
//       assertFalse(compilerOptions0.generateExports);
//       assertFalse(compilerOptions0.generatePseudoNames);
//       assertFalse(compilerOptions0.gatherCssNames);
//       assertFalse(compilerOptions0.computeFunctionSideEffects);
//       assertFalse(compilerOptions0.reserveRawExports);
//       assertFalse(compilerOptions0.optimizeParameters);
//       assertFalse(compilerOptions0.inlineGetters);
//       assertFalse(compilerOptions0.inlineConstantVars);
//       assertFalse(compilerOptions0.deadAssignmentElimination);
//       assertFalse(compilerOptions0.optimizeArgumentsArray);
//       assertFalse(compilerOptions0.crossModuleMethodMotion);
//       assertFalse(compilerOptions0.flowSensitiveInlineVariables);
//       assertFalse(compilerOptions0.markNoSideEffectCalls);
//       assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
//       assertFalse(compilerOptions0.jqueryPass);
//       assertFalse(compilerOptions0.crossModuleCodeMotion);
//       assertEquals(false, compilerOptions0.isRemoveUnusedClassProperties());
//       assertEquals(false, compilerOptions0.assumeStrictThis());
//       assertEquals(CompilerOptions.TweakProcessing.OFF, compilerOptions0.getTweakProcessing());
//       assertEquals(CompilerOptions.TracerMode.OFF, compilerOptions0.getTracerMode());
//       assertEquals(false, compilerOptions0.assumeClosuresOnlyCaptureReferences());
//       assertEquals(false, compilerOptions0.isExternExportsEnabled());
//       assertNull(compilerOptions0.getLanguageOut());
//       assertEquals(false, compilerOptions0.getInferTypes());
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compilerOptions0.getLanguageIn());
//       assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
//       assertNotNull(compilerOptions0);
//       
//       Result result0 = compiler0.compile((SourceFile) jSSourceFile0, (SourceFile) jSSourceFile0, compilerOptions0);
//       assertFalse(compilerOptions0.checkSuspiciousCode);
//       assertFalse(compilerOptions0.aliasKeywords);
//       assertFalse(compilerOptions0.checkTypes);
//       assertFalse(compilerOptions0.removeUnusedClassProperties);
//       assertFalse(compilerOptions0.preferLineBreakAtEndOfFile);
//       assertFalse(compilerOptions0.removeTryCatchFinally);
//       assertFalse(compilerOptions0.aliasAllStrings);
//       assertFalse(compilerOptions0.ideMode);
//       assertFalse(compilerOptions0.coalesceVariableNames);
//       assertFalse(compilerOptions0.checkControlStructures);
//       assertFalse(compilerOptions0.inlineLocalFunctions);
//       assertFalse(compilerOptions0.collapseAnonymousFunctions);
//       assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
//       assertFalse(compilerOptions0.prettyPrint);
//       assertFalse(compilerOptions0.lineBreak);
//       assertFalse(compilerOptions0.smartNameRemoval);
//       assertFalse(compilerOptions0.disambiguateProperties);
//       assertFalse(compilerOptions0.recordFunctionInformation);
//       assertFalse(compilerOptions0.optimizeReturns);
//       assertFalse(compilerOptions0.markAsCompiled);
//       assertFalse(compilerOptions0.removeUnusedLocalVars);
//       assertFalse(compilerOptions0.foldConstants);
//       assertFalse(compilerOptions0.collapseProperties);
//       assertFalse(compilerOptions0.labelRenaming);
//       assertFalse(compilerOptions0.rewriteFunctionExpressions);
//       assertFalse(compilerOptions0.exportTestFunctions);
//       assertFalse(compilerOptions0.removeDeadCode);
//       assertFalse(compilerOptions0.aliasExternals);
//       assertFalse(compilerOptions0.moveFunctionDeclarations);
//       assertFalse(compilerOptions0.collapseVariableDeclarations);
//       assertFalse(compilerOptions0.inlineFunctions);
//       assertFalse(compilerOptions0.convertToDottedProperties);
//       assertFalse(compilerOptions0.checkSymbols);
//       assertFalse(compilerOptions0.devirtualizePrototypeMethods);
//       assertFalse(compilerOptions0.optimizeCalls);
//       assertFalse(compilerOptions0.printInputDelimiter);
//       assertFalse(compilerOptions0.removeUnusedVars);
//       assertFalse(compilerOptions0.inlineVariables);
//       assertFalse(compilerOptions0.ambiguateProperties);
//       assertFalse(compilerOptions0.closurePass);
//       assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
//       assertFalse(compilerOptions0.generateExports);
//       assertFalse(compilerOptions0.generatePseudoNames);
//       assertFalse(compilerOptions0.gatherCssNames);
//       assertFalse(compilerOptions0.computeFunctionSideEffects);
//       assertFalse(compilerOptions0.reserveRawExports);
//       assertFalse(compilerOptions0.optimizeParameters);
//       assertFalse(compilerOptions0.inlineGetters);
//       assertFalse(compilerOptions0.inlineConstantVars);
//       assertFalse(compilerOptions0.deadAssignmentElimination);
//       assertFalse(compilerOptions0.optimizeArgumentsArray);
//       assertFalse(compilerOptions0.crossModuleMethodMotion);
//       assertFalse(compilerOptions0.flowSensitiveInlineVariables);
//       assertFalse(compilerOptions0.markNoSideEffectCalls);
//       assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
//       assertFalse(compilerOptions0.jqueryPass);
//       assertFalse(compilerOptions0.crossModuleCodeMotion);
//       assertEquals(false, compilerOptions0.isRemoveUnusedClassProperties());
//       assertEquals(false, compilerOptions0.assumeStrictThis());
//       assertEquals(CompilerOptions.TweakProcessing.OFF, compilerOptions0.getTweakProcessing());
//       assertEquals(CompilerOptions.TracerMode.OFF, compilerOptions0.getTracerMode());
//       assertEquals(false, compilerOptions0.assumeClosuresOnlyCaptureReferences());
//       assertEquals(false, compilerOptions0.isExternExportsEnabled());
//       assertNull(compilerOptions0.getLanguageOut());
//       assertEquals(false, compilerOptions0.getInferTypes());
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compilerOptions0.getLanguageIn());
//       assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
//       assertEquals(false, compiler0.acceptConstKeyword());
//       assertEquals(0.0, compiler0.getProgress(), 0.01D);
//       assertEquals(true, compiler0.hasErrors());
//       assertEquals(1, compiler0.getErrorCount());
//       assertEquals(false, compiler0.isTypeCheckingEnabled());
//       assertEquals(false, compiler0.isIdeMode());
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
//       assertEquals(0, compiler0.getWarningCount());
//       assertEquals("s", jSSourceFile0.toString());
//       assertEquals("s", jSSourceFile0.getName());
//       assertEquals(true, jSSourceFile0.isExtern());
//       assertEquals("s", jSSourceFile0.getOriginalPath());
//       assertNotNull(result0);
//       
//       DefaultPassConfig defaultPassConfig0 = new DefaultPassConfig(compilerOptions0);
//       assertFalse(compilerOptions0.checkSuspiciousCode);
//       assertFalse(compilerOptions0.aliasKeywords);
//       assertFalse(compilerOptions0.checkTypes);
//       assertFalse(compilerOptions0.removeUnusedClassProperties);
//       assertFalse(compilerOptions0.preferLineBreakAtEndOfFile);
//       assertFalse(compilerOptions0.removeTryCatchFinally);
//       assertFalse(compilerOptions0.aliasAllStrings);
//       assertFalse(compilerOptions0.ideMode);
//       assertFalse(compilerOptions0.coalesceVariableNames);
//       assertFalse(compilerOptions0.checkControlStructures);
//       assertFalse(compilerOptions0.inlineLocalFunctions);
//       assertFalse(compilerOptions0.collapseAnonymousFunctions);
//       assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
//       assertFalse(compilerOptions0.prettyPrint);
//       assertFalse(compilerOptions0.lineBreak);
//       assertFalse(compilerOptions0.smartNameRemoval);
//       assertFalse(compilerOptions0.disambiguateProperties);
//       assertFalse(compilerOptions0.recordFunctionInformation);
//       assertFalse(compilerOptions0.optimizeReturns);
//       assertFalse(compilerOptions0.markAsCompiled);
//       assertFalse(compilerOptions0.removeUnusedLocalVars);
//       assertFalse(compilerOptions0.foldConstants);
//       assertFalse(compilerOptions0.collapseProperties);
//       assertFalse(compilerOptions0.labelRenaming);
//       assertFalse(compilerOptions0.rewriteFunctionExpressions);
//       assertFalse(compilerOptions0.exportTestFunctions);
//       assertFalse(compilerOptions0.removeDeadCode);
//       assertFalse(compilerOptions0.aliasExternals);
//       assertFalse(compilerOptions0.moveFunctionDeclarations);
//       assertFalse(compilerOptions0.collapseVariableDeclarations);
//       assertFalse(compilerOptions0.inlineFunctions);
//       assertFalse(compilerOptions0.convertToDottedProperties);
//       assertFalse(compilerOptions0.checkSymbols);
//       assertFalse(compilerOptions0.devirtualizePrototypeMethods);
//       assertFalse(compilerOptions0.optimizeCalls);
//       assertFalse(compilerOptions0.printInputDelimiter);
//       assertFalse(compilerOptions0.removeUnusedVars);
//       assertFalse(compilerOptions0.inlineVariables);
//       assertFalse(compilerOptions0.ambiguateProperties);
//       assertFalse(compilerOptions0.closurePass);
//       assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
//       assertFalse(compilerOptions0.generateExports);
//       assertFalse(compilerOptions0.generatePseudoNames);
//       assertFalse(compilerOptions0.gatherCssNames);
//       assertFalse(compilerOptions0.computeFunctionSideEffects);
//       assertFalse(compilerOptions0.reserveRawExports);
//       assertFalse(compilerOptions0.optimizeParameters);
//       assertFalse(compilerOptions0.inlineGetters);
//       assertFalse(compilerOptions0.inlineConstantVars);
//       assertFalse(compilerOptions0.deadAssignmentElimination);
//       assertFalse(compilerOptions0.optimizeArgumentsArray);
//       assertFalse(compilerOptions0.crossModuleMethodMotion);
//       assertFalse(compilerOptions0.flowSensitiveInlineVariables);
//       assertFalse(compilerOptions0.markNoSideEffectCalls);
//       assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
//       assertFalse(compilerOptions0.jqueryPass);
//       assertFalse(compilerOptions0.crossModuleCodeMotion);
//       assertEquals(false, compilerOptions0.isRemoveUnusedClassProperties());
//       assertEquals(false, compilerOptions0.assumeStrictThis());
//       assertEquals(CompilerOptions.TweakProcessing.OFF, compilerOptions0.getTweakProcessing());
//       assertEquals(CompilerOptions.TracerMode.OFF, compilerOptions0.getTracerMode());
//       assertEquals(false, compilerOptions0.assumeClosuresOnlyCaptureReferences());
//       assertEquals(false, compilerOptions0.isExternExportsEnabled());
//       assertNull(compilerOptions0.getLanguageOut());
//       assertEquals(false, compilerOptions0.getInferTypes());
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compilerOptions0.getLanguageIn());
//       assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
//       assertNotNull(defaultPassConfig0);
//       
//       TypeCheck typeCheck0 = defaultPassConfig0.makeTypeCheck(compiler0);
//       assertFalse(compilerOptions0.checkSuspiciousCode);
//       assertFalse(compilerOptions0.aliasKeywords);
//       assertFalse(compilerOptions0.checkTypes);
//       assertFalse(compilerOptions0.removeUnusedClassProperties);
//       assertFalse(compilerOptions0.preferLineBreakAtEndOfFile);
//       assertFalse(compilerOptions0.removeTryCatchFinally);
//       assertFalse(compilerOptions0.aliasAllStrings);
//       assertFalse(compilerOptions0.ideMode);
//       assertFalse(compilerOptions0.coalesceVariableNames);
//       assertFalse(compilerOptions0.checkControlStructures);
//       assertFalse(compilerOptions0.inlineLocalFunctions);
//       assertFalse(compilerOptions0.collapseAnonymousFunctions);
//       assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
//       assertFalse(compilerOptions0.prettyPrint);
//       assertFalse(compilerOptions0.lineBreak);
//       assertFalse(compilerOptions0.smartNameRemoval);
//       assertFalse(compilerOptions0.disambiguateProperties);
//       assertFalse(compilerOptions0.recordFunctionInformation);
//       assertFalse(compilerOptions0.optimizeReturns);
//       assertFalse(compilerOptions0.markAsCompiled);
//       assertFalse(compilerOptions0.removeUnusedLocalVars);
//       assertFalse(compilerOptions0.foldConstants);
//       assertFalse(compilerOptions0.collapseProperties);
//       assertFalse(compilerOptions0.labelRenaming);
//       assertFalse(compilerOptions0.rewriteFunctionExpressions);
//       assertFalse(compilerOptions0.exportTestFunctions);
//       assertFalse(compilerOptions0.removeDeadCode);
//       assertFalse(compilerOptions0.aliasExternals);
//       assertFalse(compilerOptions0.moveFunctionDeclarations);
//       assertFalse(compilerOptions0.collapseVariableDeclarations);
//       assertFalse(compilerOptions0.inlineFunctions);
//       assertFalse(compilerOptions0.convertToDottedProperties);
//       assertFalse(compilerOptions0.checkSymbols);
//       assertFalse(compilerOptions0.devirtualizePrototypeMethods);
//       assertFalse(compilerOptions0.optimizeCalls);
//       assertFalse(compilerOptions0.printInputDelimiter);
//       assertFalse(compilerOptions0.removeUnusedVars);
//       assertFalse(compilerOptions0.inlineVariables);
//       assertFalse(compilerOptions0.ambiguateProperties);
//       assertFalse(compilerOptions0.closurePass);
//       assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
//       assertFalse(compilerOptions0.generateExports);
//       assertFalse(compilerOptions0.generatePseudoNames);
//       assertFalse(compilerOptions0.gatherCssNames);
//       assertFalse(compilerOptions0.computeFunctionSideEffects);
//       assertFalse(compilerOptions0.reserveRawExports);
//       assertFalse(compilerOptions0.optimizeParameters);
//       assertFalse(compilerOptions0.inlineGetters);
//       assertFalse(compilerOptions0.inlineConstantVars);
//       assertFalse(compilerOptions0.deadAssignmentElimination);
//       assertFalse(compilerOptions0.optimizeArgumentsArray);
//       assertFalse(compilerOptions0.crossModuleMethodMotion);
//       assertFalse(compilerOptions0.flowSensitiveInlineVariables);
//       assertFalse(compilerOptions0.markNoSideEffectCalls);
//       assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
//       assertFalse(compilerOptions0.jqueryPass);
//       assertFalse(compilerOptions0.crossModuleCodeMotion);
//       assertEquals(false, compilerOptions0.isRemoveUnusedClassProperties());
//       assertEquals(false, compilerOptions0.assumeStrictThis());
//       assertEquals(CompilerOptions.TweakProcessing.OFF, compilerOptions0.getTweakProcessing());
//       assertEquals(CompilerOptions.TracerMode.OFF, compilerOptions0.getTracerMode());
//       assertEquals(false, compilerOptions0.assumeClosuresOnlyCaptureReferences());
//       assertEquals(false, compilerOptions0.isExternExportsEnabled());
//       assertNull(compilerOptions0.getLanguageOut());
//       assertEquals(false, compilerOptions0.getInferTypes());
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compilerOptions0.getLanguageIn());
//       assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
//       assertEquals(false, compiler0.acceptConstKeyword());
//       assertEquals(0.0, compiler0.getProgress(), 0.01D);
//       assertEquals(true, compiler0.hasErrors());
//       assertEquals(1, compiler0.getErrorCount());
//       assertEquals(false, compiler0.isTypeCheckingEnabled());
//       assertEquals(false, compiler0.isIdeMode());
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
//       assertEquals(0, compiler0.getWarningCount());
//       assertNotNull(typeCheck0);
//       
//       double double0 = typeCheck0.getTypedPercent();
//       assertFalse(compilerOptions0.checkSuspiciousCode);
//       assertFalse(compilerOptions0.aliasKeywords);
//       assertFalse(compilerOptions0.checkTypes);
//       assertFalse(compilerOptions0.removeUnusedClassProperties);
//       assertFalse(compilerOptions0.preferLineBreakAtEndOfFile);
//       assertFalse(compilerOptions0.removeTryCatchFinally);
//       assertFalse(compilerOptions0.aliasAllStrings);
//       assertFalse(compilerOptions0.ideMode);
//       assertFalse(compilerOptions0.coalesceVariableNames);
//       assertFalse(compilerOptions0.checkControlStructures);
//       assertFalse(compilerOptions0.inlineLocalFunctions);
//       assertFalse(compilerOptions0.collapseAnonymousFunctions);
//       assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
//       assertFalse(compilerOptions0.prettyPrint);
//       assertFalse(compilerOptions0.lineBreak);
//       assertFalse(compilerOptions0.smartNameRemoval);
//       assertFalse(compilerOptions0.disambiguateProperties);
//       assertFalse(compilerOptions0.recordFunctionInformation);
//       assertFalse(compilerOptions0.optimizeReturns);
//       assertFalse(compilerOptions0.markAsCompiled);
//       assertFalse(compilerOptions0.removeUnusedLocalVars);
//       assertFalse(compilerOptions0.foldConstants);
//       assertFalse(compilerOptions0.collapseProperties);
//       assertFalse(compilerOptions0.labelRenaming);
//       assertFalse(compilerOptions0.rewriteFunctionExpressions);
//       assertFalse(compilerOptions0.exportTestFunctions);
//       assertFalse(compilerOptions0.removeDeadCode);
//       assertFalse(compilerOptions0.aliasExternals);
//       assertFalse(compilerOptions0.moveFunctionDeclarations);
//       assertFalse(compilerOptions0.collapseVariableDeclarations);
//       assertFalse(compilerOptions0.inlineFunctions);
//       assertFalse(compilerOptions0.convertToDottedProperties);
//       assertFalse(compilerOptions0.checkSymbols);
//       assertFalse(compilerOptions0.devirtualizePrototypeMethods);
//       assertFalse(compilerOptions0.optimizeCalls);
//       assertFalse(compilerOptions0.printInputDelimiter);
//       assertFalse(compilerOptions0.removeUnusedVars);
//       assertFalse(compilerOptions0.inlineVariables);
//       assertFalse(compilerOptions0.ambiguateProperties);
//       assertFalse(compilerOptions0.closurePass);
//       assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
//       assertFalse(compilerOptions0.generateExports);
//       assertFalse(compilerOptions0.generatePseudoNames);
//       assertFalse(compilerOptions0.gatherCssNames);
//       assertFalse(compilerOptions0.computeFunctionSideEffects);
//       assertFalse(compilerOptions0.reserveRawExports);
//       assertFalse(compilerOptions0.optimizeParameters);
//       assertFalse(compilerOptions0.inlineGetters);
//       assertFalse(compilerOptions0.inlineConstantVars);
//       assertFalse(compilerOptions0.deadAssignmentElimination);
//       assertFalse(compilerOptions0.optimizeArgumentsArray);
//       assertFalse(compilerOptions0.crossModuleMethodMotion);
//       assertFalse(compilerOptions0.flowSensitiveInlineVariables);
//       assertFalse(compilerOptions0.markNoSideEffectCalls);
//       assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
//       assertFalse(compilerOptions0.jqueryPass);
//       assertFalse(compilerOptions0.crossModuleCodeMotion);
//       assertEquals(false, compilerOptions0.isRemoveUnusedClassProperties());
//       assertEquals(false, compilerOptions0.assumeStrictThis());
//       assertEquals(CompilerOptions.TweakProcessing.OFF, compilerOptions0.getTweakProcessing());
//       assertEquals(CompilerOptions.TracerMode.OFF, compilerOptions0.getTracerMode());
//       assertEquals(false, compilerOptions0.assumeClosuresOnlyCaptureReferences());
//       assertEquals(false, compilerOptions0.isExternExportsEnabled());
//       assertNull(compilerOptions0.getLanguageOut());
//       assertEquals(false, compilerOptions0.getInferTypes());
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compilerOptions0.getLanguageIn());
//       assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
//       assertEquals(false, compiler0.acceptConstKeyword());
//       assertEquals(0.0, compiler0.getProgress(), 0.01D);
//       assertEquals(true, compiler0.hasErrors());
//       assertEquals(1, compiler0.getErrorCount());
//       assertEquals(false, compiler0.isTypeCheckingEnabled());
//       assertEquals(false, compiler0.isIdeMode());
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
//       assertEquals(0, compiler0.getWarningCount());
//       assertEquals(0.0, double0, 0.01D);
//       
//       NodeTraversal nodeTraversal0 = null;
//       int int0 = 2246;
//       Node node0 = Node.newNumber(double0, int0, int0);
//       assertFalse(compilerOptions0.checkSuspiciousCode);
//       assertFalse(compilerOptions0.aliasKeywords);
//       assertFalse(compilerOptions0.checkTypes);
//       assertFalse(compilerOptions0.removeUnusedClassProperties);
//       assertFalse(compilerOptions0.preferLineBreakAtEndOfFile);
//       assertFalse(compilerOptions0.removeTryCatchFinally);
//       assertFalse(compilerOptions0.aliasAllStrings);
//       assertFalse(compilerOptions0.ideMode);
//       assertFalse(compilerOptions0.coalesceVariableNames);
//       assertFalse(compilerOptions0.checkControlStructures);
//       assertFalse(compilerOptions0.inlineLocalFunctions);
//       assertFalse(compilerOptions0.collapseAnonymousFunctions);
//       assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
//       assertFalse(compilerOptions0.prettyPrint);
//       assertFalse(compilerOptions0.lineBreak);
//       assertFalse(compilerOptions0.smartNameRemoval);
//       assertFalse(compilerOptions0.disambiguateProperties);
//       assertFalse(compilerOptions0.recordFunctionInformation);
//       assertFalse(compilerOptions0.optimizeReturns);
//       assertFalse(compilerOptions0.markAsCompiled);
//       assertFalse(compilerOptions0.removeUnusedLocalVars);
//       assertFalse(compilerOptions0.foldConstants);
//       assertFalse(compilerOptions0.collapseProperties);
//       assertFalse(compilerOptions0.labelRenaming);
//       assertFalse(compilerOptions0.rewriteFunctionExpressions);
//       assertFalse(compilerOptions0.exportTestFunctions);
//       assertFalse(compilerOptions0.removeDeadCode);
//       assertFalse(compilerOptions0.aliasExternals);
//       assertFalse(compilerOptions0.moveFunctionDeclarations);
//       assertFalse(compilerOptions0.collapseVariableDeclarations);
//       assertFalse(compilerOptions0.inlineFunctions);
//       assertFalse(compilerOptions0.convertToDottedProperties);
//       assertFalse(compilerOptions0.checkSymbols);
//       assertFalse(compilerOptions0.devirtualizePrototypeMethods);
//       assertFalse(compilerOptions0.optimizeCalls);
//       assertFalse(compilerOptions0.printInputDelimiter);
//       assertFalse(compilerOptions0.removeUnusedVars);
//       assertFalse(compilerOptions0.inlineVariables);
//       assertFalse(compilerOptions0.ambiguateProperties);
//       assertFalse(compilerOptions0.closurePass);
//       assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
//       assertFalse(compilerOptions0.generateExports);
//       assertFalse(compilerOptions0.generatePseudoNames);
//       assertFalse(compilerOptions0.gatherCssNames);
//       assertFalse(compilerOptions0.computeFunctionSideEffects);
//       assertFalse(compilerOptions0.reserveRawExports);
//       assertFalse(compilerOptions0.optimizeParameters);
//       assertFalse(compilerOptions0.inlineGetters);
//       assertFalse(compilerOptions0.inlineConstantVars);
//       assertFalse(compilerOptions0.deadAssignmentElimination);
//       assertFalse(compilerOptions0.optimizeArgumentsArray);
//       assertFalse(compilerOptions0.crossModuleMethodMotion);
//       assertFalse(compilerOptions0.flowSensitiveInlineVariables);
//       assertFalse(compilerOptions0.markNoSideEffectCalls);
//       assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
//       assertFalse(compilerOptions0.jqueryPass);
//       assertFalse(compilerOptions0.crossModuleCodeMotion);
//       assertEquals(false, compilerOptions0.isRemoveUnusedClassProperties());
//       assertEquals(false, compilerOptions0.assumeStrictThis());
//       assertEquals(CompilerOptions.TweakProcessing.OFF, compilerOptions0.getTweakProcessing());
//       assertEquals(CompilerOptions.TracerMode.OFF, compilerOptions0.getTracerMode());
//       assertEquals(false, compilerOptions0.assumeClosuresOnlyCaptureReferences());
//       assertEquals(false, compilerOptions0.isExternExportsEnabled());
//       assertNull(compilerOptions0.getLanguageOut());
//       assertEquals(false, compilerOptions0.getInferTypes());
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compilerOptions0.getLanguageIn());
//       assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
//       assertEquals(false, compiler0.acceptConstKeyword());
//       assertEquals(0.0, compiler0.getProgress(), 0.01D);
//       assertEquals(true, compiler0.hasErrors());
//       assertEquals(1, compiler0.getErrorCount());
//       assertEquals(false, compiler0.isTypeCheckingEnabled());
//       assertEquals(false, compiler0.isIdeMode());
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
//       assertEquals(0, compiler0.getWarningCount());
//       assertEquals(2246, node0.getLineno());
//       assertEquals(false, node0.isNE());
//       assertEquals(false, node0.isFunction());
//       assertEquals(false, node0.isNull());
//       assertEquals(false, node0.isCall());
//       assertEquals(false, node0.isDefaultCase());
//       assertEquals(false, node0.isString());
//       assertEquals(false, node0.isEmpty());
//       assertEquals(false, node0.isBlock());
//       assertEquals(false, node0.isInc());
//       assertEquals(false, node0.isAdd());
//       assertEquals(false, node0.isDo());
//       assertEquals(false, node0.isFromExterns());
//       assertEquals(false, node0.isCatch());
//       assertEquals(false, node0.hasOneChild());
//       assertEquals(false, node0.isFor());
//       assertNull(node0.getSourceFileName());
//       assertEquals(39, node0.getType());
//       assertEquals(false, node0.isNew());
//       assertEquals(false, node0.isVar());
//       assertEquals(false, node0.isScript());
//       assertEquals(false, node0.isQuotedString());
//       assertEquals(false, node0.isTypeOf());
//       assertEquals(false, node0.isObjectLit());
//       assertEquals(false, node0.isTry());
//       assertEquals(0, node0.getSideEffectFlags());
//       assertEquals(false, node0.isReturn());
//       assertEquals(false, node0.isNot());
//       assertEquals(false, node0.isIn());
//       assertEquals(0, node0.getChildCount());
//       assertEquals(2246, node0.getCharno());
//       assertEquals(false, node0.isStringKey());
//       assertEquals(false, node0.isNoSideEffectsCall());
//       assertEquals(false, node0.isHook());
//       assertEquals(false, node0.isFalse());
//       assertEquals(false, node0.isIf());
//       assertEquals(false, node0.hasMoreThanOneChild());
//       assertEquals(false, node0.isRegExp());
//       assertEquals(false, node0.isDebugger());
//       assertEquals(false, node0.wasEmptyNode());
//       assertEquals(false, node0.isOnlyModifiesThisCall());
//       assertEquals(false, node0.isParamList());
//       assertEquals(false, node0.isVarArgs());
//       assertEquals(false, node0.hasChildren());
//       assertEquals(false, node0.isSetterDef());
//       assertEquals(false, node0.isLabelName());
//       assertEquals(false, node0.isTrue());
//       assertEquals(false, node0.isGetProp());
//       assertEquals(false, node0.isOptionalArg());
//       assertEquals(true, node0.isNumber());
//       assertEquals(false, node0.isSwitch());
//       assertEquals(false, node0.isOr());
//       assertEquals(false, node0.isDec());
//       assertEquals(false, node0.isAnd());
//       assertEquals(false, node0.isGetElem());
//       assertEquals(false, node0.isContinue());
//       assertEquals(false, node0.isExprResult());
//       assertEquals(false, node0.isThrow());
//       assertEquals(false, node0.isThis());
//       assertEquals(false, node0.isInstanceOf());
//       assertEquals(9201862, node0.getSourcePosition());
//       assertEquals(false, node0.isArrayLit());
//       assertEquals(false, node0.isLabel());
//       assertEquals(false, node0.isComma());
//       assertEquals(false, node0.isWhile());
//       assertEquals(false, node0.isLocalResultCall());
//       assertEquals(false, node0.isDelProp());
//       assertEquals(false, node0.isName());
//       assertEquals(false, node0.isWith());
//       assertEquals(false, node0.isVoid());
//       assertEquals(false, node0.isBreak());
//       assertEquals(0, node0.getLength());
//       assertEquals(false, node0.isSyntheticBlock());
//       assertEquals(false, node0.isCase());
//       assertEquals(false, node0.isAssignAdd());
//       assertEquals(false, node0.isGetterDef());
//       assertEquals(false, node0.isAssign());
//       assertNotNull(node0);
//       
//       // Undeclared exception!
//       try {
//         boolean boolean0 = typeCheck0.visitName(nodeTraversal0, node0, node0);
//         fail("Expecting exception: NullPointerException");
//       
//       } catch(NullPointerException e) {
//          //
//          // no message in exception (getMessage() returned null)
//          //
//       }
//   }

  @Test
  public void test4() {}
//   @Test
//   public void test4()  throws Throwable  {
//       Compiler compiler0 = new Compiler();
//       assertEquals(0.0, compiler0.getProgress(), 0.01D);
//       assertNotNull(compiler0);
//       
//       String string0 = "s";
//       MockFile mockFile0 = new MockFile(string0);
//       assertNotNull(mockFile0);
//       
//       JSSourceFile jSSourceFile0 = JSSourceFile.fromFile((File) mockFile0);
//       assertEquals(false, jSSourceFile0.isExtern());
//       assertEquals("s", jSSourceFile0.toString());
//       assertEquals("s", jSSourceFile0.getName());
//       assertEquals("s", jSSourceFile0.getOriginalPath());
//       assertNotNull(jSSourceFile0);
//       
//       CompilerOptions compilerOptions0 = new CompilerOptions();
//       assertFalse(compilerOptions0.prettyPrint);
//       assertFalse(compilerOptions0.ambiguateProperties);
//       assertFalse(compilerOptions0.markAsCompiled);
//       assertFalse(compilerOptions0.checkSymbols);
//       assertFalse(compilerOptions0.ideMode);
//       assertFalse(compilerOptions0.moveFunctionDeclarations);
//       assertFalse(compilerOptions0.markNoSideEffectCalls);
//       assertFalse(compilerOptions0.aliasExternals);
//       assertFalse(compilerOptions0.removeUnusedVars);
//       assertFalse(compilerOptions0.labelRenaming);
//       assertFalse(compilerOptions0.coalesceVariableNames);
//       assertFalse(compilerOptions0.preferLineBreakAtEndOfFile);
//       assertFalse(compilerOptions0.inlineVariables);
//       assertFalse(compilerOptions0.crossModuleMethodMotion);
//       assertFalse(compilerOptions0.crossModuleCodeMotion);
//       assertFalse(compilerOptions0.checkControlStructures);
//       assertFalse(compilerOptions0.gatherCssNames);
//       assertFalse(compilerOptions0.optimizeParameters);
//       assertFalse(compilerOptions0.generateExports);
//       assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
//       assertFalse(compilerOptions0.printInputDelimiter);
//       assertFalse(compilerOptions0.recordFunctionInformation);
//       assertFalse(compilerOptions0.flowSensitiveInlineVariables);
//       assertFalse(compilerOptions0.rewriteFunctionExpressions);
//       assertFalse(compilerOptions0.jqueryPass);
//       assertFalse(compilerOptions0.removeUnusedClassProperties);
//       assertFalse(compilerOptions0.aliasKeywords);
//       assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
//       assertFalse(compilerOptions0.smartNameRemoval);
//       assertFalse(compilerOptions0.optimizeReturns);
//       assertFalse(compilerOptions0.inlineLocalFunctions);
//       assertFalse(compilerOptions0.devirtualizePrototypeMethods);
//       assertFalse(compilerOptions0.removeDeadCode);
//       assertFalse(compilerOptions0.reserveRawExports);
//       assertFalse(compilerOptions0.collapseProperties);
//       assertFalse(compilerOptions0.optimizeArgumentsArray);
//       assertFalse(compilerOptions0.inlineConstantVars);
//       assertFalse(compilerOptions0.removeUnusedLocalVars);
//       assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
//       assertFalse(compilerOptions0.convertToDottedProperties);
//       assertFalse(compilerOptions0.deadAssignmentElimination);
//       assertFalse(compilerOptions0.inlineGetters);
//       assertFalse(compilerOptions0.collapseAnonymousFunctions);
//       assertFalse(compilerOptions0.aliasAllStrings);
//       assertFalse(compilerOptions0.exportTestFunctions);
//       assertFalse(compilerOptions0.closurePass);
//       assertFalse(compilerOptions0.collapseVariableDeclarations);
//       assertFalse(compilerOptions0.checkTypes);
//       assertFalse(compilerOptions0.disambiguateProperties);
//       assertFalse(compilerOptions0.lineBreak);
//       assertFalse(compilerOptions0.optimizeCalls);
//       assertFalse(compilerOptions0.generatePseudoNames);
//       assertFalse(compilerOptions0.inlineFunctions);
//       assertFalse(compilerOptions0.foldConstants);
//       assertFalse(compilerOptions0.checkSuspiciousCode);
//       assertFalse(compilerOptions0.computeFunctionSideEffects);
//       assertFalse(compilerOptions0.removeTryCatchFinally);
//       assertEquals(false, compilerOptions0.assumeClosuresOnlyCaptureReferences());
//       assertEquals(false, compilerOptions0.getInferTypes());
//       assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
//       assertEquals(CompilerOptions.TweakProcessing.OFF, compilerOptions0.getTweakProcessing());
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compilerOptions0.getLanguageIn());
//       assertEquals(false, compilerOptions0.isExternExportsEnabled());
//       assertEquals(false, compilerOptions0.isRemoveUnusedClassProperties());
//       assertEquals(false, compilerOptions0.assumeStrictThis());
//       assertNull(compilerOptions0.getLanguageOut());
//       assertEquals(CompilerOptions.TracerMode.OFF, compilerOptions0.getTracerMode());
//       assertNotNull(compilerOptions0);
//       
//       Result result0 = compiler0.compile((SourceFile) jSSourceFile0, (SourceFile) jSSourceFile0, compilerOptions0);
//       assertFalse(compilerOptions0.prettyPrint);
//       assertFalse(compilerOptions0.ambiguateProperties);
//       assertFalse(compilerOptions0.markAsCompiled);
//       assertFalse(compilerOptions0.checkSymbols);
//       assertFalse(compilerOptions0.ideMode);
//       assertFalse(compilerOptions0.moveFunctionDeclarations);
//       assertFalse(compilerOptions0.markNoSideEffectCalls);
//       assertFalse(compilerOptions0.aliasExternals);
//       assertFalse(compilerOptions0.removeUnusedVars);
//       assertFalse(compilerOptions0.labelRenaming);
//       assertFalse(compilerOptions0.coalesceVariableNames);
//       assertFalse(compilerOptions0.preferLineBreakAtEndOfFile);
//       assertFalse(compilerOptions0.inlineVariables);
//       assertFalse(compilerOptions0.crossModuleMethodMotion);
//       assertFalse(compilerOptions0.crossModuleCodeMotion);
//       assertFalse(compilerOptions0.checkControlStructures);
//       assertFalse(compilerOptions0.gatherCssNames);
//       assertFalse(compilerOptions0.optimizeParameters);
//       assertFalse(compilerOptions0.generateExports);
//       assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
//       assertFalse(compilerOptions0.printInputDelimiter);
//       assertFalse(compilerOptions0.recordFunctionInformation);
//       assertFalse(compilerOptions0.flowSensitiveInlineVariables);
//       assertFalse(compilerOptions0.rewriteFunctionExpressions);
//       assertFalse(compilerOptions0.jqueryPass);
//       assertFalse(compilerOptions0.removeUnusedClassProperties);
//       assertFalse(compilerOptions0.aliasKeywords);
//       assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
//       assertFalse(compilerOptions0.smartNameRemoval);
//       assertFalse(compilerOptions0.optimizeReturns);
//       assertFalse(compilerOptions0.inlineLocalFunctions);
//       assertFalse(compilerOptions0.devirtualizePrototypeMethods);
//       assertFalse(compilerOptions0.removeDeadCode);
//       assertFalse(compilerOptions0.reserveRawExports);
//       assertFalse(compilerOptions0.collapseProperties);
//       assertFalse(compilerOptions0.optimizeArgumentsArray);
//       assertFalse(compilerOptions0.inlineConstantVars);
//       assertFalse(compilerOptions0.removeUnusedLocalVars);
//       assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
//       assertFalse(compilerOptions0.convertToDottedProperties);
//       assertFalse(compilerOptions0.deadAssignmentElimination);
//       assertFalse(compilerOptions0.inlineGetters);
//       assertFalse(compilerOptions0.collapseAnonymousFunctions);
//       assertFalse(compilerOptions0.aliasAllStrings);
//       assertFalse(compilerOptions0.exportTestFunctions);
//       assertFalse(compilerOptions0.closurePass);
//       assertFalse(compilerOptions0.collapseVariableDeclarations);
//       assertFalse(compilerOptions0.checkTypes);
//       assertFalse(compilerOptions0.disambiguateProperties);
//       assertFalse(compilerOptions0.lineBreak);
//       assertFalse(compilerOptions0.optimizeCalls);
//       assertFalse(compilerOptions0.generatePseudoNames);
//       assertFalse(compilerOptions0.inlineFunctions);
//       assertFalse(compilerOptions0.foldConstants);
//       assertFalse(compilerOptions0.checkSuspiciousCode);
//       assertFalse(compilerOptions0.computeFunctionSideEffects);
//       assertFalse(compilerOptions0.removeTryCatchFinally);
//       assertEquals(false, compiler0.isIdeMode());
//       assertEquals(false, compiler0.acceptConstKeyword());
//       assertEquals(true, compiler0.hasErrors());
//       assertEquals(false, compiler0.isTypeCheckingEnabled());
//       assertEquals(0.0, compiler0.getProgress(), 0.01D);
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
//       assertEquals(1, compiler0.getErrorCount());
//       assertEquals(0, compiler0.getWarningCount());
//       assertEquals(false, compilerOptions0.assumeClosuresOnlyCaptureReferences());
//       assertEquals(false, compilerOptions0.getInferTypes());
//       assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
//       assertEquals(CompilerOptions.TweakProcessing.OFF, compilerOptions0.getTweakProcessing());
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compilerOptions0.getLanguageIn());
//       assertEquals(false, compilerOptions0.isExternExportsEnabled());
//       assertEquals(false, compilerOptions0.isRemoveUnusedClassProperties());
//       assertEquals(false, compilerOptions0.assumeStrictThis());
//       assertNull(compilerOptions0.getLanguageOut());
//       assertEquals(CompilerOptions.TracerMode.OFF, compilerOptions0.getTracerMode());
//       assertEquals(true, jSSourceFile0.isExtern());
//       assertEquals("s", jSSourceFile0.toString());
//       assertEquals("s", jSSourceFile0.getName());
//       assertEquals("s", jSSourceFile0.getOriginalPath());
//       assertNotNull(result0);
//       
//       DefaultPassConfig defaultPassConfig0 = new DefaultPassConfig(compilerOptions0);
//       assertFalse(compilerOptions0.prettyPrint);
//       assertFalse(compilerOptions0.ambiguateProperties);
//       assertFalse(compilerOptions0.markAsCompiled);
//       assertFalse(compilerOptions0.checkSymbols);
//       assertFalse(compilerOptions0.ideMode);
//       assertFalse(compilerOptions0.moveFunctionDeclarations);
//       assertFalse(compilerOptions0.markNoSideEffectCalls);
//       assertFalse(compilerOptions0.aliasExternals);
//       assertFalse(compilerOptions0.removeUnusedVars);
//       assertFalse(compilerOptions0.labelRenaming);
//       assertFalse(compilerOptions0.coalesceVariableNames);
//       assertFalse(compilerOptions0.preferLineBreakAtEndOfFile);
//       assertFalse(compilerOptions0.inlineVariables);
//       assertFalse(compilerOptions0.crossModuleMethodMotion);
//       assertFalse(compilerOptions0.crossModuleCodeMotion);
//       assertFalse(compilerOptions0.checkControlStructures);
//       assertFalse(compilerOptions0.gatherCssNames);
//       assertFalse(compilerOptions0.optimizeParameters);
//       assertFalse(compilerOptions0.generateExports);
//       assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
//       assertFalse(compilerOptions0.printInputDelimiter);
//       assertFalse(compilerOptions0.recordFunctionInformation);
//       assertFalse(compilerOptions0.flowSensitiveInlineVariables);
//       assertFalse(compilerOptions0.rewriteFunctionExpressions);
//       assertFalse(compilerOptions0.jqueryPass);
//       assertFalse(compilerOptions0.removeUnusedClassProperties);
//       assertFalse(compilerOptions0.aliasKeywords);
//       assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
//       assertFalse(compilerOptions0.smartNameRemoval);
//       assertFalse(compilerOptions0.optimizeReturns);
//       assertFalse(compilerOptions0.inlineLocalFunctions);
//       assertFalse(compilerOptions0.devirtualizePrototypeMethods);
//       assertFalse(compilerOptions0.removeDeadCode);
//       assertFalse(compilerOptions0.reserveRawExports);
//       assertFalse(compilerOptions0.collapseProperties);
//       assertFalse(compilerOptions0.optimizeArgumentsArray);
//       assertFalse(compilerOptions0.inlineConstantVars);
//       assertFalse(compilerOptions0.removeUnusedLocalVars);
//       assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
//       assertFalse(compilerOptions0.convertToDottedProperties);
//       assertFalse(compilerOptions0.deadAssignmentElimination);
//       assertFalse(compilerOptions0.inlineGetters);
//       assertFalse(compilerOptions0.collapseAnonymousFunctions);
//       assertFalse(compilerOptions0.aliasAllStrings);
//       assertFalse(compilerOptions0.exportTestFunctions);
//       assertFalse(compilerOptions0.closurePass);
//       assertFalse(compilerOptions0.collapseVariableDeclarations);
//       assertFalse(compilerOptions0.checkTypes);
//       assertFalse(compilerOptions0.disambiguateProperties);
//       assertFalse(compilerOptions0.lineBreak);
//       assertFalse(compilerOptions0.optimizeCalls);
//       assertFalse(compilerOptions0.generatePseudoNames);
//       assertFalse(compilerOptions0.inlineFunctions);
//       assertFalse(compilerOptions0.foldConstants);
//       assertFalse(compilerOptions0.checkSuspiciousCode);
//       assertFalse(compilerOptions0.computeFunctionSideEffects);
//       assertFalse(compilerOptions0.removeTryCatchFinally);
//       assertEquals(false, compilerOptions0.assumeClosuresOnlyCaptureReferences());
//       assertEquals(false, compilerOptions0.getInferTypes());
//       assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
//       assertEquals(CompilerOptions.TweakProcessing.OFF, compilerOptions0.getTweakProcessing());
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compilerOptions0.getLanguageIn());
//       assertEquals(false, compilerOptions0.isExternExportsEnabled());
//       assertEquals(false, compilerOptions0.isRemoveUnusedClassProperties());
//       assertEquals(false, compilerOptions0.assumeStrictThis());
//       assertNull(compilerOptions0.getLanguageOut());
//       assertEquals(CompilerOptions.TracerMode.OFF, compilerOptions0.getTracerMode());
//       assertNotNull(defaultPassConfig0);
//       
//       TypeCheck typeCheck0 = defaultPassConfig0.makeTypeCheck(compiler0);
//       assertFalse(compilerOptions0.prettyPrint);
//       assertFalse(compilerOptions0.ambiguateProperties);
//       assertFalse(compilerOptions0.markAsCompiled);
//       assertFalse(compilerOptions0.checkSymbols);
//       assertFalse(compilerOptions0.ideMode);
//       assertFalse(compilerOptions0.moveFunctionDeclarations);
//       assertFalse(compilerOptions0.markNoSideEffectCalls);
//       assertFalse(compilerOptions0.aliasExternals);
//       assertFalse(compilerOptions0.removeUnusedVars);
//       assertFalse(compilerOptions0.labelRenaming);
//       assertFalse(compilerOptions0.coalesceVariableNames);
//       assertFalse(compilerOptions0.preferLineBreakAtEndOfFile);
//       assertFalse(compilerOptions0.inlineVariables);
//       assertFalse(compilerOptions0.crossModuleMethodMotion);
//       assertFalse(compilerOptions0.crossModuleCodeMotion);
//       assertFalse(compilerOptions0.checkControlStructures);
//       assertFalse(compilerOptions0.gatherCssNames);
//       assertFalse(compilerOptions0.optimizeParameters);
//       assertFalse(compilerOptions0.generateExports);
//       assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
//       assertFalse(compilerOptions0.printInputDelimiter);
//       assertFalse(compilerOptions0.recordFunctionInformation);
//       assertFalse(compilerOptions0.flowSensitiveInlineVariables);
//       assertFalse(compilerOptions0.rewriteFunctionExpressions);
//       assertFalse(compilerOptions0.jqueryPass);
//       assertFalse(compilerOptions0.removeUnusedClassProperties);
//       assertFalse(compilerOptions0.aliasKeywords);
//       assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
//       assertFalse(compilerOptions0.smartNameRemoval);
//       assertFalse(compilerOptions0.optimizeReturns);
//       assertFalse(compilerOptions0.inlineLocalFunctions);
//       assertFalse(compilerOptions0.devirtualizePrototypeMethods);
//       assertFalse(compilerOptions0.removeDeadCode);
//       assertFalse(compilerOptions0.reserveRawExports);
//       assertFalse(compilerOptions0.collapseProperties);
//       assertFalse(compilerOptions0.optimizeArgumentsArray);
//       assertFalse(compilerOptions0.inlineConstantVars);
//       assertFalse(compilerOptions0.removeUnusedLocalVars);
//       assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
//       assertFalse(compilerOptions0.convertToDottedProperties);
//       assertFalse(compilerOptions0.deadAssignmentElimination);
//       assertFalse(compilerOptions0.inlineGetters);
//       assertFalse(compilerOptions0.collapseAnonymousFunctions);
//       assertFalse(compilerOptions0.aliasAllStrings);
//       assertFalse(compilerOptions0.exportTestFunctions);
//       assertFalse(compilerOptions0.closurePass);
//       assertFalse(compilerOptions0.collapseVariableDeclarations);
//       assertFalse(compilerOptions0.checkTypes);
//       assertFalse(compilerOptions0.disambiguateProperties);
//       assertFalse(compilerOptions0.lineBreak);
//       assertFalse(compilerOptions0.optimizeCalls);
//       assertFalse(compilerOptions0.generatePseudoNames);
//       assertFalse(compilerOptions0.inlineFunctions);
//       assertFalse(compilerOptions0.foldConstants);
//       assertFalse(compilerOptions0.checkSuspiciousCode);
//       assertFalse(compilerOptions0.computeFunctionSideEffects);
//       assertFalse(compilerOptions0.removeTryCatchFinally);
//       assertEquals(false, compiler0.isIdeMode());
//       assertEquals(false, compiler0.acceptConstKeyword());
//       assertEquals(true, compiler0.hasErrors());
//       assertEquals(false, compiler0.isTypeCheckingEnabled());
//       assertEquals(0.0, compiler0.getProgress(), 0.01D);
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
//       assertEquals(1, compiler0.getErrorCount());
//       assertEquals(0, compiler0.getWarningCount());
//       assertEquals(false, compilerOptions0.assumeClosuresOnlyCaptureReferences());
//       assertEquals(false, compilerOptions0.getInferTypes());
//       assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
//       assertEquals(CompilerOptions.TweakProcessing.OFF, compilerOptions0.getTweakProcessing());
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compilerOptions0.getLanguageIn());
//       assertEquals(false, compilerOptions0.isExternExportsEnabled());
//       assertEquals(false, compilerOptions0.isRemoveUnusedClassProperties());
//       assertEquals(false, compilerOptions0.assumeStrictThis());
//       assertNull(compilerOptions0.getLanguageOut());
//       assertEquals(CompilerOptions.TracerMode.OFF, compilerOptions0.getTracerMode());
//       assertNotNull(typeCheck0);
//       
//       JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
//       assertEquals(false, compiler0.isIdeMode());
//       assertEquals(false, compiler0.acceptConstKeyword());
//       assertEquals(true, compiler0.hasErrors());
//       assertEquals(false, compiler0.isTypeCheckingEnabled());
//       assertEquals(0.0, compiler0.getProgress(), 0.01D);
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
//       assertEquals(1, compiler0.getErrorCount());
//       assertEquals(0, compiler0.getWarningCount());
//       assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
//       assertNotNull(jSTypeRegistry0);
//       
//       NodeTraversal nodeTraversal0 = null;
//       Stack<JSType> stack0 = new Stack<JSType>();
//       assertEquals(true, stack0.empty());
//       assertEquals(10, stack0.capacity());
//       assertEquals(true, stack0.isEmpty());
//       assertEquals("[]", stack0.toString());
//       assertEquals(0, stack0.size());
//       assertNotNull(stack0);
//       
//       Node node0 = jSTypeRegistry0.createParameters((List<JSType>) stack0);
//       assertEquals(false, compiler0.isIdeMode());
//       assertEquals(false, compiler0.acceptConstKeyword());
//       assertEquals(true, compiler0.hasErrors());
//       assertEquals(false, compiler0.isTypeCheckingEnabled());
//       assertEquals(0.0, compiler0.getProgress(), 0.01D);
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
//       assertEquals(1, compiler0.getErrorCount());
//       assertEquals(0, compiler0.getWarningCount());
//       assertEquals(true, stack0.empty());
//       assertEquals(10, stack0.capacity());
//       assertEquals(true, stack0.isEmpty());
//       assertEquals("[]", stack0.toString());
//       assertEquals(0, stack0.size());
//       assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
//       assertEquals(false, node0.isDebugger());
//       assertNull(node0.getSourceFileName());
//       assertEquals(false, node0.isAnd());
//       assertEquals(false, node0.isVarArgs());
//       assertEquals(0, node0.getLength());
//       assertEquals(false, node0.isBlock());
//       assertEquals(false, node0.isWhile());
//       assertEquals(false, node0.isFunction());
//       assertEquals(false, node0.isTry());
//       assertEquals(false, node0.isCatch());
//       assertEquals(false, node0.isCall());
//       assertEquals(false, node0.isTypeOf());
//       assertEquals(false, node0.isTrue());
//       assertEquals(false, node0.isSwitch());
//       assertEquals(false, node0.isVar());
//       assertEquals(false, node0.isIn());
//       assertEquals(false, node0.isNE());
//       assertEquals(false, node0.isDelProp());
//       assertEquals(0, node0.getSideEffectFlags());
//       assertEquals(false, node0.isGetProp());
//       assertEquals(-1, node0.getLineno());
//       assertEquals(false, node0.isObjectLit());
//       assertEquals(false, node0.isOptionalArg());
//       assertEquals(false, node0.isCase());
//       assertEquals(false, node0.isWith());
//       assertEquals(false, node0.isString());
//       assertEquals(false, node0.isLabel());
//       assertEquals(false, node0.isFromExterns());
//       assertEquals(false, node0.isScript());
//       assertEquals(false, node0.isAssign());
//       assertEquals(false, node0.isAssignAdd());
//       assertEquals(false, node0.isThis());
//       assertEquals(false, node0.isVoid());
//       assertEquals(0, node0.getChildCount());
//       assertEquals(false, node0.isIf());
//       assertEquals(false, node0.isDec());
//       assertEquals(false, node0.wasEmptyNode());
//       assertEquals(83, node0.getType());
//       assertEquals(false, node0.isNoSideEffectsCall());
//       assertEquals(false, node0.isStringKey());
//       assertEquals(false, node0.isContinue());
//       assertEquals(false, node0.isDefaultCase());
//       assertEquals(false, node0.isName());
//       assertEquals(false, node0.isGetterDef());
//       assertEquals(-1, node0.getSourcePosition());
//       assertEquals(false, node0.isGetElem());
//       assertEquals(false, node0.isArrayLit());
//       assertEquals(false, node0.isExprResult());
//       assertEquals(false, node0.isAdd());
//       assertEquals(false, node0.hasOneChild());
//       assertEquals(false, node0.isNull());
//       assertEquals(false, node0.isReturn());
//       assertEquals(false, node0.isQuotedString());
//       assertEquals(false, node0.isFalse());
//       assertEquals(false, node0.isOr());
//       assertEquals(false, node0.hasMoreThanOneChild());
//       assertEquals(false, node0.isNumber());
//       assertEquals(false, node0.isNew());
//       assertEquals(false, node0.isBreak());
//       assertEquals(false, node0.isSyntheticBlock());
//       assertEquals(false, node0.isNot());
//       assertEquals(true, node0.isParamList());
//       assertEquals(false, node0.isDo());
//       assertEquals(false, node0.isHook());
//       assertEquals(false, node0.isInc());
//       assertEquals(false, node0.isFor());
//       assertEquals(false, node0.isSetterDef());
//       assertEquals(false, node0.isOnlyModifiesThisCall());
//       assertEquals(false, node0.isLocalResultCall());
//       assertEquals(false, node0.isComma());
//       assertEquals(false, node0.isInstanceOf());
//       assertEquals(false, node0.isThrow());
//       assertEquals(false, node0.isRegExp());
//       assertEquals(-1, node0.getCharno());
//       assertEquals(false, node0.hasChildren());
//       assertEquals(false, node0.isEmpty());
//       assertEquals(false, node0.isLabelName());
//       assertNotNull(node0);
//       
//       boolean boolean0 = typeCheck0.visitName(nodeTraversal0, node0, node0);
//       assertFalse(compilerOptions0.prettyPrint);
//       assertFalse(compilerOptions0.ambiguateProperties);
//       assertFalse(compilerOptions0.markAsCompiled);
//       assertFalse(compilerOptions0.checkSymbols);
//       assertFalse(compilerOptions0.ideMode);
//       assertFalse(compilerOptions0.moveFunctionDeclarations);
//       assertFalse(compilerOptions0.markNoSideEffectCalls);
//       assertFalse(compilerOptions0.aliasExternals);
//       assertFalse(compilerOptions0.removeUnusedVars);
//       assertFalse(compilerOptions0.labelRenaming);
//       assertFalse(compilerOptions0.coalesceVariableNames);
//       assertFalse(compilerOptions0.preferLineBreakAtEndOfFile);
//       assertFalse(compilerOptions0.inlineVariables);
//       assertFalse(compilerOptions0.crossModuleMethodMotion);
//       assertFalse(compilerOptions0.crossModuleCodeMotion);
//       assertFalse(compilerOptions0.checkControlStructures);
//       assertFalse(compilerOptions0.gatherCssNames);
//       assertFalse(compilerOptions0.optimizeParameters);
//       assertFalse(compilerOptions0.generateExports);
//       assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
//       assertFalse(compilerOptions0.printInputDelimiter);
//       assertFalse(compilerOptions0.recordFunctionInformation);
//       assertFalse(compilerOptions0.flowSensitiveInlineVariables);
//       assertFalse(compilerOptions0.rewriteFunctionExpressions);
//       assertFalse(compilerOptions0.jqueryPass);
//       assertFalse(compilerOptions0.removeUnusedClassProperties);
//       assertFalse(compilerOptions0.aliasKeywords);
//       assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
//       assertFalse(compilerOptions0.smartNameRemoval);
//       assertFalse(compilerOptions0.optimizeReturns);
//       assertFalse(compilerOptions0.inlineLocalFunctions);
//       assertFalse(compilerOptions0.devirtualizePrototypeMethods);
//       assertFalse(compilerOptions0.removeDeadCode);
//       assertFalse(compilerOptions0.reserveRawExports);
//       assertFalse(compilerOptions0.collapseProperties);
//       assertFalse(compilerOptions0.optimizeArgumentsArray);
//       assertFalse(compilerOptions0.inlineConstantVars);
//       assertFalse(compilerOptions0.removeUnusedLocalVars);
//       assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
//       assertFalse(compilerOptions0.convertToDottedProperties);
//       assertFalse(compilerOptions0.deadAssignmentElimination);
//       assertFalse(compilerOptions0.inlineGetters);
//       assertFalse(compilerOptions0.collapseAnonymousFunctions);
//       assertFalse(compilerOptions0.aliasAllStrings);
//       assertFalse(compilerOptions0.exportTestFunctions);
//       assertFalse(compilerOptions0.closurePass);
//       assertFalse(compilerOptions0.collapseVariableDeclarations);
//       assertFalse(compilerOptions0.checkTypes);
//       assertFalse(compilerOptions0.disambiguateProperties);
//       assertFalse(compilerOptions0.lineBreak);
//       assertFalse(compilerOptions0.optimizeCalls);
//       assertFalse(compilerOptions0.generatePseudoNames);
//       assertFalse(compilerOptions0.inlineFunctions);
//       assertFalse(compilerOptions0.foldConstants);
//       assertFalse(compilerOptions0.checkSuspiciousCode);
//       assertFalse(compilerOptions0.computeFunctionSideEffects);
//       assertFalse(compilerOptions0.removeTryCatchFinally);
//       assertEquals(false, compiler0.isIdeMode());
//       assertEquals(false, compiler0.acceptConstKeyword());
//       assertEquals(true, compiler0.hasErrors());
//       assertEquals(false, compiler0.isTypeCheckingEnabled());
//       assertEquals(0.0, compiler0.getProgress(), 0.01D);
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
//       assertEquals(1, compiler0.getErrorCount());
//       assertEquals(0, compiler0.getWarningCount());
//       assertEquals(true, stack0.empty());
//       assertEquals(10, stack0.capacity());
//       assertEquals(true, stack0.isEmpty());
//       assertEquals("[]", stack0.toString());
//       assertEquals(0, stack0.size());
//       assertEquals(false, compilerOptions0.assumeClosuresOnlyCaptureReferences());
//       assertEquals(false, compilerOptions0.getInferTypes());
//       assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
//       assertEquals(CompilerOptions.TweakProcessing.OFF, compilerOptions0.getTweakProcessing());
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compilerOptions0.getLanguageIn());
//       assertEquals(false, compilerOptions0.isExternExportsEnabled());
//       assertEquals(false, compilerOptions0.isRemoveUnusedClassProperties());
//       assertEquals(false, compilerOptions0.assumeStrictThis());
//       assertNull(compilerOptions0.getLanguageOut());
//       assertEquals(CompilerOptions.TracerMode.OFF, compilerOptions0.getTracerMode());
//       assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
//       assertEquals(false, node0.isDebugger());
//       assertNull(node0.getSourceFileName());
//       assertEquals(false, node0.isAnd());
//       assertEquals(false, node0.isVarArgs());
//       assertEquals(0, node0.getLength());
//       assertEquals(false, node0.isBlock());
//       assertEquals(false, node0.isWhile());
//       assertEquals(false, node0.isFunction());
//       assertEquals(false, node0.isTry());
//       assertEquals(false, node0.isCatch());
//       assertEquals(false, node0.isCall());
//       assertEquals(false, node0.isTypeOf());
//       assertEquals(false, node0.isTrue());
//       assertEquals(false, node0.isSwitch());
//       assertEquals(false, node0.isVar());
//       assertEquals(false, node0.isIn());
//       assertEquals(false, node0.isNE());
//       assertEquals(false, node0.isDelProp());
//       assertEquals(0, node0.getSideEffectFlags());
//       assertEquals(false, node0.isGetProp());
//       assertEquals(-1, node0.getLineno());
//       assertEquals(false, node0.isObjectLit());
//       assertEquals(false, node0.isOptionalArg());
//       assertEquals(false, node0.isCase());
//       assertEquals(false, node0.isWith());
//       assertEquals(false, node0.isString());
//       assertEquals(false, node0.isLabel());
//       assertEquals(false, node0.isFromExterns());
//       assertEquals(false, node0.isScript());
//       assertEquals(false, node0.isAssign());
//       assertEquals(false, node0.isAssignAdd());
//       assertEquals(false, node0.isThis());
//       assertEquals(false, node0.isVoid());
//       assertEquals(0, node0.getChildCount());
//       assertEquals(false, node0.isIf());
//       assertEquals(false, node0.isDec());
//       assertEquals(false, node0.wasEmptyNode());
//       assertEquals(83, node0.getType());
//       assertEquals(false, node0.isNoSideEffectsCall());
//       assertEquals(false, node0.isStringKey());
//       assertEquals(false, node0.isContinue());
//       assertEquals(false, node0.isDefaultCase());
//       assertEquals(false, node0.isName());
//       assertEquals(false, node0.isGetterDef());
//       assertEquals(-1, node0.getSourcePosition());
//       assertEquals(false, node0.isGetElem());
//       assertEquals(false, node0.isArrayLit());
//       assertEquals(false, node0.isExprResult());
//       assertEquals(false, node0.isAdd());
//       assertEquals(false, node0.hasOneChild());
//       assertEquals(false, node0.isNull());
//       assertEquals(false, node0.isReturn());
//       assertEquals(false, node0.isQuotedString());
//       assertEquals(false, node0.isFalse());
//       assertEquals(false, node0.isOr());
//       assertEquals(false, node0.hasMoreThanOneChild());
//       assertEquals(false, node0.isNumber());
//       assertEquals(false, node0.isNew());
//       assertEquals(false, node0.isBreak());
//       assertEquals(false, node0.isSyntheticBlock());
//       assertEquals(false, node0.isNot());
//       assertEquals(true, node0.isParamList());
//       assertEquals(false, node0.isDo());
//       assertEquals(false, node0.isHook());
//       assertEquals(false, node0.isInc());
//       assertEquals(false, node0.isFor());
//       assertEquals(false, node0.isSetterDef());
//       assertEquals(false, node0.isOnlyModifiesThisCall());
//       assertEquals(false, node0.isLocalResultCall());
//       assertEquals(false, node0.isComma());
//       assertEquals(false, node0.isInstanceOf());
//       assertEquals(false, node0.isThrow());
//       assertEquals(false, node0.isRegExp());
//       assertEquals(-1, node0.getCharno());
//       assertEquals(false, node0.hasChildren());
//       assertEquals(false, node0.isEmpty());
//       assertEquals(false, node0.isLabelName());
//       assertFalse(boolean0);
//   }

  @Test
  public void test5() {}
//   @Test
//   public void test5()  throws Throwable  {
//       Compiler compiler0 = new Compiler();
//       assertEquals(0.0, compiler0.getProgress(), 0.01D);
//       assertNotNull(compiler0);
//       
//       String string0 = "s";
//       MockFile mockFile0 = new MockFile(string0);
//       assertNotNull(mockFile0);
//       
//       JSSourceFile jSSourceFile0 = JSSourceFile.fromFile((File) mockFile0);
//       assertEquals("s", jSSourceFile0.getName());
//       assertEquals("s", jSSourceFile0.toString());
//       assertEquals("s", jSSourceFile0.getOriginalPath());
//       assertEquals(false, jSSourceFile0.isExtern());
//       assertNotNull(jSSourceFile0);
//       
//       CompilerOptions compilerOptions0 = new CompilerOptions();
//       assertFalse(compilerOptions0.ambiguateProperties);
//       assertFalse(compilerOptions0.coalesceVariableNames);
//       assertFalse(compilerOptions0.disambiguateProperties);
//       assertFalse(compilerOptions0.checkControlStructures);
//       assertFalse(compilerOptions0.smartNameRemoval);
//       assertFalse(compilerOptions0.removeUnusedVars);
//       assertFalse(compilerOptions0.checkSuspiciousCode);
//       assertFalse(compilerOptions0.generatePseudoNames);
//       assertFalse(compilerOptions0.ideMode);
//       assertFalse(compilerOptions0.removeDeadCode);
//       assertFalse(compilerOptions0.checkTypes);
//       assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
//       assertFalse(compilerOptions0.gatherCssNames);
//       assertFalse(compilerOptions0.computeFunctionSideEffects);
//       assertFalse(compilerOptions0.crossModuleMethodMotion);
//       assertFalse(compilerOptions0.aliasAllStrings);
//       assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
//       assertFalse(compilerOptions0.aliasKeywords);
//       assertFalse(compilerOptions0.recordFunctionInformation);
//       assertFalse(compilerOptions0.aliasExternals);
//       assertFalse(compilerOptions0.generateExports);
//       assertFalse(compilerOptions0.devirtualizePrototypeMethods);
//       assertFalse(compilerOptions0.removeUnusedLocalVars);
//       assertFalse(compilerOptions0.inlineLocalFunctions);
//       assertFalse(compilerOptions0.reserveRawExports);
//       assertFalse(compilerOptions0.foldConstants);
//       assertFalse(compilerOptions0.optimizeParameters);
//       assertFalse(compilerOptions0.inlineConstantVars);
//       assertFalse(compilerOptions0.lineBreak);
//       assertFalse(compilerOptions0.optimizeArgumentsArray);
//       assertFalse(compilerOptions0.prettyPrint);
//       assertFalse(compilerOptions0.closurePass);
//       assertFalse(compilerOptions0.exportTestFunctions);
//       assertFalse(compilerOptions0.moveFunctionDeclarations);
//       assertFalse(compilerOptions0.checkSymbols);
//       assertFalse(compilerOptions0.preferLineBreakAtEndOfFile);
//       assertFalse(compilerOptions0.collapseVariableDeclarations);
//       assertFalse(compilerOptions0.deadAssignmentElimination);
//       assertFalse(compilerOptions0.removeTryCatchFinally);
//       assertFalse(compilerOptions0.convertToDottedProperties);
//       assertFalse(compilerOptions0.collapseAnonymousFunctions);
//       assertFalse(compilerOptions0.inlineVariables);
//       assertFalse(compilerOptions0.optimizeCalls);
//       assertFalse(compilerOptions0.labelRenaming);
//       assertFalse(compilerOptions0.inlineGetters);
//       assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
//       assertFalse(compilerOptions0.removeUnusedClassProperties);
//       assertFalse(compilerOptions0.crossModuleCodeMotion);
//       assertFalse(compilerOptions0.flowSensitiveInlineVariables);
//       assertFalse(compilerOptions0.jqueryPass);
//       assertFalse(compilerOptions0.printInputDelimiter);
//       assertFalse(compilerOptions0.optimizeReturns);
//       assertFalse(compilerOptions0.collapseProperties);
//       assertFalse(compilerOptions0.markAsCompiled);
//       assertFalse(compilerOptions0.rewriteFunctionExpressions);
//       assertFalse(compilerOptions0.inlineFunctions);
//       assertFalse(compilerOptions0.markNoSideEffectCalls);
//       assertNull(compilerOptions0.getLanguageOut());
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compilerOptions0.getLanguageIn());
//       assertEquals(false, compilerOptions0.assumeStrictThis());
//       assertEquals(CompilerOptions.TracerMode.OFF, compilerOptions0.getTracerMode());
//       assertEquals(false, compilerOptions0.isExternExportsEnabled());
//       assertEquals(false, compilerOptions0.isRemoveUnusedClassProperties());
//       assertEquals(CompilerOptions.TweakProcessing.OFF, compilerOptions0.getTweakProcessing());
//       assertEquals(false, compilerOptions0.getInferTypes());
//       assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
//       assertEquals(false, compilerOptions0.assumeClosuresOnlyCaptureReferences());
//       assertNotNull(compilerOptions0);
//       
//       Result result0 = compiler0.compile((SourceFile) jSSourceFile0, (SourceFile) jSSourceFile0, compilerOptions0);
//       assertFalse(compilerOptions0.ambiguateProperties);
//       assertFalse(compilerOptions0.coalesceVariableNames);
//       assertFalse(compilerOptions0.disambiguateProperties);
//       assertFalse(compilerOptions0.checkControlStructures);
//       assertFalse(compilerOptions0.smartNameRemoval);
//       assertFalse(compilerOptions0.removeUnusedVars);
//       assertFalse(compilerOptions0.checkSuspiciousCode);
//       assertFalse(compilerOptions0.generatePseudoNames);
//       assertFalse(compilerOptions0.ideMode);
//       assertFalse(compilerOptions0.removeDeadCode);
//       assertFalse(compilerOptions0.checkTypes);
//       assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
//       assertFalse(compilerOptions0.gatherCssNames);
//       assertFalse(compilerOptions0.computeFunctionSideEffects);
//       assertFalse(compilerOptions0.crossModuleMethodMotion);
//       assertFalse(compilerOptions0.aliasAllStrings);
//       assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
//       assertFalse(compilerOptions0.aliasKeywords);
//       assertFalse(compilerOptions0.recordFunctionInformation);
//       assertFalse(compilerOptions0.aliasExternals);
//       assertFalse(compilerOptions0.generateExports);
//       assertFalse(compilerOptions0.devirtualizePrototypeMethods);
//       assertFalse(compilerOptions0.removeUnusedLocalVars);
//       assertFalse(compilerOptions0.inlineLocalFunctions);
//       assertFalse(compilerOptions0.reserveRawExports);
//       assertFalse(compilerOptions0.foldConstants);
//       assertFalse(compilerOptions0.optimizeParameters);
//       assertFalse(compilerOptions0.inlineConstantVars);
//       assertFalse(compilerOptions0.lineBreak);
//       assertFalse(compilerOptions0.optimizeArgumentsArray);
//       assertFalse(compilerOptions0.prettyPrint);
//       assertFalse(compilerOptions0.closurePass);
//       assertFalse(compilerOptions0.exportTestFunctions);
//       assertFalse(compilerOptions0.moveFunctionDeclarations);
//       assertFalse(compilerOptions0.checkSymbols);
//       assertFalse(compilerOptions0.preferLineBreakAtEndOfFile);
//       assertFalse(compilerOptions0.collapseVariableDeclarations);
//       assertFalse(compilerOptions0.deadAssignmentElimination);
//       assertFalse(compilerOptions0.removeTryCatchFinally);
//       assertFalse(compilerOptions0.convertToDottedProperties);
//       assertFalse(compilerOptions0.collapseAnonymousFunctions);
//       assertFalse(compilerOptions0.inlineVariables);
//       assertFalse(compilerOptions0.optimizeCalls);
//       assertFalse(compilerOptions0.labelRenaming);
//       assertFalse(compilerOptions0.inlineGetters);
//       assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
//       assertFalse(compilerOptions0.removeUnusedClassProperties);
//       assertFalse(compilerOptions0.crossModuleCodeMotion);
//       assertFalse(compilerOptions0.flowSensitiveInlineVariables);
//       assertFalse(compilerOptions0.jqueryPass);
//       assertFalse(compilerOptions0.printInputDelimiter);
//       assertFalse(compilerOptions0.optimizeReturns);
//       assertFalse(compilerOptions0.collapseProperties);
//       assertFalse(compilerOptions0.markAsCompiled);
//       assertFalse(compilerOptions0.rewriteFunctionExpressions);
//       assertFalse(compilerOptions0.inlineFunctions);
//       assertFalse(compilerOptions0.markNoSideEffectCalls);
//       assertNull(compilerOptions0.getLanguageOut());
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compilerOptions0.getLanguageIn());
//       assertEquals(false, compilerOptions0.assumeStrictThis());
//       assertEquals(CompilerOptions.TracerMode.OFF, compilerOptions0.getTracerMode());
//       assertEquals(false, compilerOptions0.isExternExportsEnabled());
//       assertEquals(false, compilerOptions0.isRemoveUnusedClassProperties());
//       assertEquals(CompilerOptions.TweakProcessing.OFF, compilerOptions0.getTweakProcessing());
//       assertEquals(false, compilerOptions0.getInferTypes());
//       assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
//       assertEquals(false, compilerOptions0.assumeClosuresOnlyCaptureReferences());
//       assertEquals("s", jSSourceFile0.getName());
//       assertEquals("s", jSSourceFile0.toString());
//       assertEquals(true, jSSourceFile0.isExtern());
//       assertEquals("s", jSSourceFile0.getOriginalPath());
//       assertEquals(1, compiler0.getErrorCount());
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
//       assertEquals(false, compiler0.isTypeCheckingEnabled());
//       assertEquals(true, compiler0.hasErrors());
//       assertEquals(false, compiler0.acceptConstKeyword());
//       assertEquals(false, compiler0.isIdeMode());
//       assertEquals(0.0, compiler0.getProgress(), 0.01D);
//       assertEquals(0, compiler0.getWarningCount());
//       assertNotNull(result0);
//       
//       DefaultPassConfig defaultPassConfig0 = new DefaultPassConfig(compilerOptions0);
//       assertFalse(compilerOptions0.ambiguateProperties);
//       assertFalse(compilerOptions0.coalesceVariableNames);
//       assertFalse(compilerOptions0.disambiguateProperties);
//       assertFalse(compilerOptions0.checkControlStructures);
//       assertFalse(compilerOptions0.smartNameRemoval);
//       assertFalse(compilerOptions0.removeUnusedVars);
//       assertFalse(compilerOptions0.checkSuspiciousCode);
//       assertFalse(compilerOptions0.generatePseudoNames);
//       assertFalse(compilerOptions0.ideMode);
//       assertFalse(compilerOptions0.removeDeadCode);
//       assertFalse(compilerOptions0.checkTypes);
//       assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
//       assertFalse(compilerOptions0.gatherCssNames);
//       assertFalse(compilerOptions0.computeFunctionSideEffects);
//       assertFalse(compilerOptions0.crossModuleMethodMotion);
//       assertFalse(compilerOptions0.aliasAllStrings);
//       assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
//       assertFalse(compilerOptions0.aliasKeywords);
//       assertFalse(compilerOptions0.recordFunctionInformation);
//       assertFalse(compilerOptions0.aliasExternals);
//       assertFalse(compilerOptions0.generateExports);
//       assertFalse(compilerOptions0.devirtualizePrototypeMethods);
//       assertFalse(compilerOptions0.removeUnusedLocalVars);
//       assertFalse(compilerOptions0.inlineLocalFunctions);
//       assertFalse(compilerOptions0.reserveRawExports);
//       assertFalse(compilerOptions0.foldConstants);
//       assertFalse(compilerOptions0.optimizeParameters);
//       assertFalse(compilerOptions0.inlineConstantVars);
//       assertFalse(compilerOptions0.lineBreak);
//       assertFalse(compilerOptions0.optimizeArgumentsArray);
//       assertFalse(compilerOptions0.prettyPrint);
//       assertFalse(compilerOptions0.closurePass);
//       assertFalse(compilerOptions0.exportTestFunctions);
//       assertFalse(compilerOptions0.moveFunctionDeclarations);
//       assertFalse(compilerOptions0.checkSymbols);
//       assertFalse(compilerOptions0.preferLineBreakAtEndOfFile);
//       assertFalse(compilerOptions0.collapseVariableDeclarations);
//       assertFalse(compilerOptions0.deadAssignmentElimination);
//       assertFalse(compilerOptions0.removeTryCatchFinally);
//       assertFalse(compilerOptions0.convertToDottedProperties);
//       assertFalse(compilerOptions0.collapseAnonymousFunctions);
//       assertFalse(compilerOptions0.inlineVariables);
//       assertFalse(compilerOptions0.optimizeCalls);
//       assertFalse(compilerOptions0.labelRenaming);
//       assertFalse(compilerOptions0.inlineGetters);
//       assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
//       assertFalse(compilerOptions0.removeUnusedClassProperties);
//       assertFalse(compilerOptions0.crossModuleCodeMotion);
//       assertFalse(compilerOptions0.flowSensitiveInlineVariables);
//       assertFalse(compilerOptions0.jqueryPass);
//       assertFalse(compilerOptions0.printInputDelimiter);
//       assertFalse(compilerOptions0.optimizeReturns);
//       assertFalse(compilerOptions0.collapseProperties);
//       assertFalse(compilerOptions0.markAsCompiled);
//       assertFalse(compilerOptions0.rewriteFunctionExpressions);
//       assertFalse(compilerOptions0.inlineFunctions);
//       assertFalse(compilerOptions0.markNoSideEffectCalls);
//       assertNull(compilerOptions0.getLanguageOut());
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compilerOptions0.getLanguageIn());
//       assertEquals(false, compilerOptions0.assumeStrictThis());
//       assertEquals(CompilerOptions.TracerMode.OFF, compilerOptions0.getTracerMode());
//       assertEquals(false, compilerOptions0.isExternExportsEnabled());
//       assertEquals(false, compilerOptions0.isRemoveUnusedClassProperties());
//       assertEquals(CompilerOptions.TweakProcessing.OFF, compilerOptions0.getTweakProcessing());
//       assertEquals(false, compilerOptions0.getInferTypes());
//       assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
//       assertEquals(false, compilerOptions0.assumeClosuresOnlyCaptureReferences());
//       assertNotNull(defaultPassConfig0);
//       
//       TypeCheck typeCheck0 = defaultPassConfig0.makeTypeCheck(compiler0);
//       assertFalse(compilerOptions0.ambiguateProperties);
//       assertFalse(compilerOptions0.coalesceVariableNames);
//       assertFalse(compilerOptions0.disambiguateProperties);
//       assertFalse(compilerOptions0.checkControlStructures);
//       assertFalse(compilerOptions0.smartNameRemoval);
//       assertFalse(compilerOptions0.removeUnusedVars);
//       assertFalse(compilerOptions0.checkSuspiciousCode);
//       assertFalse(compilerOptions0.generatePseudoNames);
//       assertFalse(compilerOptions0.ideMode);
//       assertFalse(compilerOptions0.removeDeadCode);
//       assertFalse(compilerOptions0.checkTypes);
//       assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
//       assertFalse(compilerOptions0.gatherCssNames);
//       assertFalse(compilerOptions0.computeFunctionSideEffects);
//       assertFalse(compilerOptions0.crossModuleMethodMotion);
//       assertFalse(compilerOptions0.aliasAllStrings);
//       assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
//       assertFalse(compilerOptions0.aliasKeywords);
//       assertFalse(compilerOptions0.recordFunctionInformation);
//       assertFalse(compilerOptions0.aliasExternals);
//       assertFalse(compilerOptions0.generateExports);
//       assertFalse(compilerOptions0.devirtualizePrototypeMethods);
//       assertFalse(compilerOptions0.removeUnusedLocalVars);
//       assertFalse(compilerOptions0.inlineLocalFunctions);
//       assertFalse(compilerOptions0.reserveRawExports);
//       assertFalse(compilerOptions0.foldConstants);
//       assertFalse(compilerOptions0.optimizeParameters);
//       assertFalse(compilerOptions0.inlineConstantVars);
//       assertFalse(compilerOptions0.lineBreak);
//       assertFalse(compilerOptions0.optimizeArgumentsArray);
//       assertFalse(compilerOptions0.prettyPrint);
//       assertFalse(compilerOptions0.closurePass);
//       assertFalse(compilerOptions0.exportTestFunctions);
//       assertFalse(compilerOptions0.moveFunctionDeclarations);
//       assertFalse(compilerOptions0.checkSymbols);
//       assertFalse(compilerOptions0.preferLineBreakAtEndOfFile);
//       assertFalse(compilerOptions0.collapseVariableDeclarations);
//       assertFalse(compilerOptions0.deadAssignmentElimination);
//       assertFalse(compilerOptions0.removeTryCatchFinally);
//       assertFalse(compilerOptions0.convertToDottedProperties);
//       assertFalse(compilerOptions0.collapseAnonymousFunctions);
//       assertFalse(compilerOptions0.inlineVariables);
//       assertFalse(compilerOptions0.optimizeCalls);
//       assertFalse(compilerOptions0.labelRenaming);
//       assertFalse(compilerOptions0.inlineGetters);
//       assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
//       assertFalse(compilerOptions0.removeUnusedClassProperties);
//       assertFalse(compilerOptions0.crossModuleCodeMotion);
//       assertFalse(compilerOptions0.flowSensitiveInlineVariables);
//       assertFalse(compilerOptions0.jqueryPass);
//       assertFalse(compilerOptions0.printInputDelimiter);
//       assertFalse(compilerOptions0.optimizeReturns);
//       assertFalse(compilerOptions0.collapseProperties);
//       assertFalse(compilerOptions0.markAsCompiled);
//       assertFalse(compilerOptions0.rewriteFunctionExpressions);
//       assertFalse(compilerOptions0.inlineFunctions);
//       assertFalse(compilerOptions0.markNoSideEffectCalls);
//       assertNull(compilerOptions0.getLanguageOut());
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compilerOptions0.getLanguageIn());
//       assertEquals(false, compilerOptions0.assumeStrictThis());
//       assertEquals(CompilerOptions.TracerMode.OFF, compilerOptions0.getTracerMode());
//       assertEquals(false, compilerOptions0.isExternExportsEnabled());
//       assertEquals(false, compilerOptions0.isRemoveUnusedClassProperties());
//       assertEquals(CompilerOptions.TweakProcessing.OFF, compilerOptions0.getTweakProcessing());
//       assertEquals(false, compilerOptions0.getInferTypes());
//       assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
//       assertEquals(false, compilerOptions0.assumeClosuresOnlyCaptureReferences());
//       assertEquals(1, compiler0.getErrorCount());
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
//       assertEquals(false, compiler0.isTypeCheckingEnabled());
//       assertEquals(true, compiler0.hasErrors());
//       assertEquals(false, compiler0.acceptConstKeyword());
//       assertEquals(false, compiler0.isIdeMode());
//       assertEquals(0.0, compiler0.getProgress(), 0.01D);
//       assertEquals(0, compiler0.getWarningCount());
//       assertNotNull(typeCheck0);
//       
//       JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
//       assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
//       assertEquals(1, compiler0.getErrorCount());
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
//       assertEquals(false, compiler0.isTypeCheckingEnabled());
//       assertEquals(true, compiler0.hasErrors());
//       assertEquals(false, compiler0.acceptConstKeyword());
//       assertEquals(false, compiler0.isIdeMode());
//       assertEquals(0.0, compiler0.getProgress(), 0.01D);
//       assertEquals(0, compiler0.getWarningCount());
//       assertNotNull(jSTypeRegistry0);
//       
//       NodeTraversal nodeTraversal0 = null;
//       Stack<JSType> stack0 = new Stack<JSType>();
//       assertEquals(true, stack0.empty());
//       assertEquals(0, stack0.size());
//       assertEquals(true, stack0.isEmpty());
//       assertEquals(10, stack0.capacity());
//       assertEquals("[]", stack0.toString());
//       assertNotNull(stack0);
//       
//       Node node0 = jSTypeRegistry0.createParameters((List<JSType>) stack0);
//       assertEquals(false, node0.isTrue());
//       assertEquals(false, node0.isInstanceOf());
//       assertEquals(false, node0.isDo());
//       assertEquals(false, node0.isAdd());
//       assertEquals(false, node0.isFunction());
//       assertEquals(false, node0.isTypeOf());
//       assertEquals(false, node0.isVarArgs());
//       assertEquals(false, node0.isWhile());
//       assertEquals(false, node0.isEmpty());
//       assertEquals(false, node0.isBlock());
//       assertEquals(false, node0.isRegExp());
//       assertEquals(false, node0.isDelProp());
//       assertEquals(false, node0.hasOneChild());
//       assertEquals(false, node0.isReturn());
//       assertEquals(0, node0.getSideEffectFlags());
//       assertEquals(false, node0.isString());
//       assertEquals(false, node0.hasChildren());
//       assertEquals(false, node0.isDebugger());
//       assertEquals(false, node0.isVar());
//       assertEquals(false, node0.isFalse());
//       assertEquals(false, node0.isFor());
//       assertEquals(0, node0.getLength());
//       assertEquals(false, node0.isQuotedString());
//       assertEquals(false, node0.isAssignAdd());
//       assertEquals(-1, node0.getSourcePosition());
//       assertEquals(false, node0.isTry());
//       assertEquals(false, node0.isNot());
//       assertEquals(false, node0.hasMoreThanOneChild());
//       assertEquals(false, node0.isFromExterns());
//       assertEquals(false, node0.isWith());
//       assertEquals(-1, node0.getLineno());
//       assertEquals(false, node0.isInc());
//       assertEquals(false, node0.isLocalResultCall());
//       assertEquals(false, node0.isAnd());
//       assertEquals(false, node0.isComma());
//       assertEquals(false, node0.isNoSideEffectsCall());
//       assertEquals(false, node0.isVoid());
//       assertEquals(false, node0.isOptionalArg());
//       assertEquals(false, node0.isThis());
//       assertEquals(false, node0.isThrow());
//       assertEquals(false, node0.isCase());
//       assertEquals(83, node0.getType());
//       assertEquals(false, node0.isName());
//       assertEquals(false, node0.isCatch());
//       assertEquals(false, node0.isAssign());
//       assertEquals(false, node0.wasEmptyNode());
//       assertEquals(false, node0.isGetElem());
//       assertEquals(false, node0.isSyntheticBlock());
//       assertEquals(true, node0.isParamList());
//       assertEquals(false, node0.isCall());
//       assertEquals(false, node0.isNull());
//       assertEquals(false, node0.isArrayLit());
//       assertEquals(false, node0.isContinue());
//       assertEquals(false, node0.isIn());
//       assertEquals(false, node0.isOr());
//       assertEquals(false, node0.isExprResult());
//       assertEquals(false, node0.isLabelName());
//       assertEquals(false, node0.isGetterDef());
//       assertEquals(false, node0.isObjectLit());
//       assertEquals(false, node0.isNumber());
//       assertEquals(false, node0.isHook());
//       assertEquals(false, node0.isOnlyModifiesThisCall());
//       assertEquals(false, node0.isNew());
//       assertEquals(false, node0.isSwitch());
//       assertEquals(false, node0.isDec());
//       assertEquals(false, node0.isNE());
//       assertEquals(-1, node0.getCharno());
//       assertEquals(false, node0.isBreak());
//       assertEquals(false, node0.isStringKey());
//       assertEquals(0, node0.getChildCount());
//       assertEquals(false, node0.isIf());
//       assertEquals(false, node0.isLabel());
//       assertEquals(false, node0.isSetterDef());
//       assertEquals(false, node0.isDefaultCase());
//       assertEquals(false, node0.isScript());
//       assertNull(node0.getSourceFileName());
//       assertEquals(false, node0.isGetProp());
//       assertEquals(true, stack0.empty());
//       assertEquals(0, stack0.size());
//       assertEquals(true, stack0.isEmpty());
//       assertEquals(10, stack0.capacity());
//       assertEquals("[]", stack0.toString());
//       assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
//       assertEquals(1, compiler0.getErrorCount());
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
//       assertEquals(false, compiler0.isTypeCheckingEnabled());
//       assertEquals(true, compiler0.hasErrors());
//       assertEquals(false, compiler0.acceptConstKeyword());
//       assertEquals(false, compiler0.isIdeMode());
//       assertEquals(0.0, compiler0.getProgress(), 0.01D);
//       assertEquals(0, compiler0.getWarningCount());
//       assertNotNull(node0);
//       
//       Node node1 = Normalize.parseAndNormalizeSyntheticCode(compiler0, string0, string0);
//       assertNotSame(node1, node0);
//       assertFalse(node1.equals((Object)node0));
//       assertEquals(false, node1.isSyntheticBlock());
//       assertEquals(false, node1.isBlock());
//       assertEquals(false, node1.isRegExp());
//       assertEquals(false, node1.isStringKey());
//       assertEquals(false, node1.isReturn());
//       assertEquals(false, node1.isSwitch());
//       assertEquals(false, node1.isDefaultCase());
//       assertEquals(false, node1.isWith());
//       assertEquals(false, node1.isIn());
//       assertEquals(false, node1.isFunction());
//       assertEquals(false, node1.isTry());
//       assertEquals(false, node1.isSetterDef());
//       assertEquals(false, node1.isTypeOf());
//       assertEquals(false, node1.isOnlyModifiesThisCall());
//       assertEquals(0, node1.getLength());
//       assertEquals(false, node1.isFalse());
//       assertEquals(false, node1.isNoSideEffectsCall());
//       assertEquals(false, node1.isLabel());
//       assertEquals(-1, node1.getSourcePosition());
//       assertEquals(false, node1.isNew());
//       assertEquals(false, node1.isQuotedString());
//       assertEquals(false, node1.isWhile());
//       assertEquals(false, node1.isLocalResultCall());
//       assertEquals(false, node1.isDec());
//       assertEquals(false, node1.isOr());
//       assertEquals(false, node1.isInc());
//       assertEquals(false, node1.isCase());
//       assertEquals(false, node1.isOptionalArg());
//       assertEquals(false, node1.isFor());
//       assertEquals(false, node1.isThrow());
//       assertEquals(false, node1.isIf());
//       assertEquals(false, node1.isVoid());
//       assertEquals(false, node1.isNull());
//       assertEquals(false, node1.isNumber());
//       assertEquals(false, node1.isFromExterns());
//       assertEquals(false, node1.isString());
//       assertEquals(false, node1.isLabelName());
//       assertEquals(false, node1.isArrayLit());
//       assertEquals(false, node1.isGetProp());
//       assertEquals(false, node1.isGetElem());
//       assertEquals(false, node1.isThis());
//       assertEquals(false, node1.isComma());
//       assertEquals(-1, node1.getCharno());
//       assertEquals(false, node1.isTrue());
//       assertEquals(0, node1.getChildCount());
//       assertEquals(false, node1.isObjectLit());
//       assertEquals(false, node1.isVar());
//       assertEquals(false, node1.isAnd());
//       assertEquals(false, node1.hasMoreThanOneChild());
//       assertEquals(false, node1.isGetterDef());
//       assertEquals(false, node1.isDebugger());
//       assertEquals(false, node1.isParamList());
//       assertEquals(false, node1.isVarArgs());
//       assertEquals(132, node1.getType());
//       assertEquals(false, node1.isExprResult());
//       assertEquals(false, node1.isNE());
//       assertEquals(false, node1.isContinue());
//       assertEquals(false, node1.isNot());
//       assertEquals(false, node1.isCatch());
//       assertEquals(0, node1.getSideEffectFlags());
//       assertEquals(false, node1.isCall());
//       assertEquals(false, node1.wasEmptyNode());
//       assertEquals(true, node1.isScript());
//       assertEquals(false, node1.isInstanceOf());
//       assertEquals(false, node1.hasChildren());
//       assertEquals(-1, node1.getLineno());
//       assertEquals(false, node1.isDo());
//       assertEquals(false, node1.isAssignAdd());
//       assertEquals(false, node1.isBreak());
//       assertEquals(false, node1.isDelProp());
//       assertEquals(" [synthetic:1] ", node1.getSourceFileName());
//       assertEquals(false, node1.isAssign());
//       assertEquals(false, node1.hasOneChild());
//       assertEquals(false, node1.isHook());
//       assertEquals(false, node1.isName());
//       assertEquals(false, node1.isEmpty());
//       assertEquals(false, node1.isAdd());
//       assertEquals(1, compiler0.getErrorCount());
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
//       assertEquals(false, compiler0.isTypeCheckingEnabled());
//       assertEquals(true, compiler0.hasErrors());
//       assertEquals(false, compiler0.acceptConstKeyword());
//       assertEquals(false, compiler0.isIdeMode());
//       assertEquals(0.0, compiler0.getProgress(), 0.01D);
//       assertEquals(0, compiler0.getWarningCount());
//       assertNotNull(node1);
//       
//       typeCheck0.visit(nodeTraversal0, node1, node0);
//       assertNotSame(node0, node1);
//       assertNotSame(node1, node0);
//       assertFalse(node0.equals((Object)node1));
//       assertFalse(node1.equals((Object)node0));
//       assertFalse(compilerOptions0.ambiguateProperties);
//       assertFalse(compilerOptions0.coalesceVariableNames);
//       assertFalse(compilerOptions0.disambiguateProperties);
//       assertFalse(compilerOptions0.checkControlStructures);
//       assertFalse(compilerOptions0.smartNameRemoval);
//       assertFalse(compilerOptions0.removeUnusedVars);
//       assertFalse(compilerOptions0.checkSuspiciousCode);
//       assertFalse(compilerOptions0.generatePseudoNames);
//       assertFalse(compilerOptions0.ideMode);
//       assertFalse(compilerOptions0.removeDeadCode);
//       assertFalse(compilerOptions0.checkTypes);
//       assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
//       assertFalse(compilerOptions0.gatherCssNames);
//       assertFalse(compilerOptions0.computeFunctionSideEffects);
//       assertFalse(compilerOptions0.crossModuleMethodMotion);
//       assertFalse(compilerOptions0.aliasAllStrings);
//       assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
//       assertFalse(compilerOptions0.aliasKeywords);
//       assertFalse(compilerOptions0.recordFunctionInformation);
//       assertFalse(compilerOptions0.aliasExternals);
//       assertFalse(compilerOptions0.generateExports);
//       assertFalse(compilerOptions0.devirtualizePrototypeMethods);
//       assertFalse(compilerOptions0.removeUnusedLocalVars);
//       assertFalse(compilerOptions0.inlineLocalFunctions);
//       assertFalse(compilerOptions0.reserveRawExports);
//       assertFalse(compilerOptions0.foldConstants);
//       assertFalse(compilerOptions0.optimizeParameters);
//       assertFalse(compilerOptions0.inlineConstantVars);
//       assertFalse(compilerOptions0.lineBreak);
//       assertFalse(compilerOptions0.optimizeArgumentsArray);
//       assertFalse(compilerOptions0.prettyPrint);
//       assertFalse(compilerOptions0.closurePass);
//       assertFalse(compilerOptions0.exportTestFunctions);
//       assertFalse(compilerOptions0.moveFunctionDeclarations);
//       assertFalse(compilerOptions0.checkSymbols);
//       assertFalse(compilerOptions0.preferLineBreakAtEndOfFile);
//       assertFalse(compilerOptions0.collapseVariableDeclarations);
//       assertFalse(compilerOptions0.deadAssignmentElimination);
//       assertFalse(compilerOptions0.removeTryCatchFinally);
//       assertFalse(compilerOptions0.convertToDottedProperties);
//       assertFalse(compilerOptions0.collapseAnonymousFunctions);
//       assertFalse(compilerOptions0.inlineVariables);
//       assertFalse(compilerOptions0.optimizeCalls);
//       assertFalse(compilerOptions0.labelRenaming);
//       assertFalse(compilerOptions0.inlineGetters);
//       assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
//       assertFalse(compilerOptions0.removeUnusedClassProperties);
//       assertFalse(compilerOptions0.crossModuleCodeMotion);
//       assertFalse(compilerOptions0.flowSensitiveInlineVariables);
//       assertFalse(compilerOptions0.jqueryPass);
//       assertFalse(compilerOptions0.printInputDelimiter);
//       assertFalse(compilerOptions0.optimizeReturns);
//       assertFalse(compilerOptions0.collapseProperties);
//       assertFalse(compilerOptions0.markAsCompiled);
//       assertFalse(compilerOptions0.rewriteFunctionExpressions);
//       assertFalse(compilerOptions0.inlineFunctions);
//       assertFalse(compilerOptions0.markNoSideEffectCalls);
//       assertEquals(false, node0.isTrue());
//       assertEquals(false, node0.isInstanceOf());
//       assertEquals(false, node0.isDo());
//       assertEquals(false, node0.isAdd());
//       assertEquals(false, node0.isFunction());
//       assertEquals(false, node0.isTypeOf());
//       assertEquals(false, node0.isVarArgs());
//       assertEquals(false, node0.isWhile());
//       assertEquals(false, node0.isEmpty());
//       assertEquals(false, node0.isBlock());
//       assertEquals(false, node0.isRegExp());
//       assertEquals(false, node0.isDelProp());
//       assertEquals(false, node0.hasOneChild());
//       assertEquals(false, node0.isReturn());
//       assertEquals(0, node0.getSideEffectFlags());
//       assertEquals(false, node0.isString());
//       assertEquals(false, node0.hasChildren());
//       assertEquals(false, node0.isDebugger());
//       assertEquals(false, node0.isVar());
//       assertEquals(false, node0.isFalse());
//       assertEquals(false, node0.isFor());
//       assertEquals(0, node0.getLength());
//       assertEquals(false, node0.isQuotedString());
//       assertEquals(false, node0.isAssignAdd());
//       assertEquals(-1, node0.getSourcePosition());
//       assertEquals(false, node0.isTry());
//       assertEquals(false, node0.isNot());
//       assertEquals(false, node0.hasMoreThanOneChild());
//       assertEquals(false, node0.isFromExterns());
//       assertEquals(false, node0.isWith());
//       assertEquals(-1, node0.getLineno());
//       assertEquals(false, node0.isInc());
//       assertEquals(false, node0.isLocalResultCall());
//       assertEquals(false, node0.isAnd());
//       assertEquals(false, node0.isComma());
//       assertEquals(false, node0.isNoSideEffectsCall());
//       assertEquals(false, node0.isVoid());
//       assertEquals(false, node0.isOptionalArg());
//       assertEquals(false, node0.isThis());
//       assertEquals(false, node0.isThrow());
//       assertEquals(false, node0.isCase());
//       assertEquals(83, node0.getType());
//       assertEquals(false, node0.isName());
//       assertEquals(false, node0.isCatch());
//       assertEquals(false, node0.isAssign());
//       assertEquals(false, node0.wasEmptyNode());
//       assertEquals(false, node0.isGetElem());
//       assertEquals(false, node0.isSyntheticBlock());
//       assertEquals(true, node0.isParamList());
//       assertEquals(false, node0.isCall());
//       assertEquals(false, node0.isNull());
//       assertEquals(false, node0.isArrayLit());
//       assertEquals(false, node0.isContinue());
//       assertEquals(false, node0.isIn());
//       assertEquals(false, node0.isOr());
//       assertEquals(false, node0.isExprResult());
//       assertEquals(false, node0.isLabelName());
//       assertEquals(false, node0.isGetterDef());
//       assertEquals(false, node0.isObjectLit());
//       assertEquals(false, node0.isNumber());
//       assertEquals(false, node0.isHook());
//       assertEquals(false, node0.isOnlyModifiesThisCall());
//       assertEquals(false, node0.isNew());
//       assertEquals(false, node0.isSwitch());
//       assertEquals(false, node0.isDec());
//       assertEquals(false, node0.isNE());
//       assertEquals(-1, node0.getCharno());
//       assertEquals(false, node0.isBreak());
//       assertEquals(false, node0.isStringKey());
//       assertEquals(0, node0.getChildCount());
//       assertEquals(false, node0.isIf());
//       assertEquals(false, node0.isLabel());
//       assertEquals(false, node0.isSetterDef());
//       assertEquals(false, node0.isDefaultCase());
//       assertEquals(false, node0.isScript());
//       assertNull(node0.getSourceFileName());
//       assertEquals(false, node0.isGetProp());
//       assertEquals(true, stack0.empty());
//       assertEquals(0, stack0.size());
//       assertEquals(true, stack0.isEmpty());
//       assertEquals(10, stack0.capacity());
//       assertEquals("[]", stack0.toString());
//       assertNull(compilerOptions0.getLanguageOut());
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compilerOptions0.getLanguageIn());
//       assertEquals(false, compilerOptions0.assumeStrictThis());
//       assertEquals(CompilerOptions.TracerMode.OFF, compilerOptions0.getTracerMode());
//       assertEquals(false, compilerOptions0.isExternExportsEnabled());
//       assertEquals(false, compilerOptions0.isRemoveUnusedClassProperties());
//       assertEquals(CompilerOptions.TweakProcessing.OFF, compilerOptions0.getTweakProcessing());
//       assertEquals(false, compilerOptions0.getInferTypes());
//       assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
//       assertEquals(false, compilerOptions0.assumeClosuresOnlyCaptureReferences());
//       assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
//       assertEquals(false, node1.isSyntheticBlock());
//       assertEquals(false, node1.isBlock());
//       assertEquals(false, node1.isRegExp());
//       assertEquals(false, node1.isStringKey());
//       assertEquals(false, node1.isReturn());
//       assertEquals(false, node1.isSwitch());
//       assertEquals(false, node1.isDefaultCase());
//       assertEquals(false, node1.isWith());
//       assertEquals(false, node1.isIn());
//       assertEquals(false, node1.isFunction());
//       assertEquals(false, node1.isTry());
//       assertEquals(false, node1.isSetterDef());
//       assertEquals(false, node1.isTypeOf());
//       assertEquals(false, node1.isOnlyModifiesThisCall());
//       assertEquals(0, node1.getLength());
//       assertEquals(false, node1.isFalse());
//       assertEquals(false, node1.isNoSideEffectsCall());
//       assertEquals(false, node1.isLabel());
//       assertEquals(-1, node1.getSourcePosition());
//       assertEquals(false, node1.isNew());
//       assertEquals(false, node1.isQuotedString());
//       assertEquals(false, node1.isWhile());
//       assertEquals(false, node1.isLocalResultCall());
//       assertEquals(false, node1.isDec());
//       assertEquals(false, node1.isOr());
//       assertEquals(false, node1.isInc());
//       assertEquals(false, node1.isCase());
//       assertEquals(false, node1.isOptionalArg());
//       assertEquals(false, node1.isFor());
//       assertEquals(false, node1.isThrow());
//       assertEquals(false, node1.isIf());
//       assertEquals(false, node1.isVoid());
//       assertEquals(false, node1.isNull());
//       assertEquals(false, node1.isNumber());
//       assertEquals(false, node1.isFromExterns());
//       assertEquals(false, node1.isString());
//       assertEquals(false, node1.isLabelName());
//       assertEquals(false, node1.isArrayLit());
//       assertEquals(false, node1.isGetProp());
//       assertEquals(false, node1.isGetElem());
//       assertEquals(false, node1.isThis());
//       assertEquals(false, node1.isComma());
//       assertEquals(-1, node1.getCharno());
//       assertEquals(false, node1.isTrue());
//       assertEquals(0, node1.getChildCount());
//       assertEquals(false, node1.isObjectLit());
//       assertEquals(false, node1.isVar());
//       assertEquals(false, node1.isAnd());
//       assertEquals(false, node1.hasMoreThanOneChild());
//       assertEquals(false, node1.isGetterDef());
//       assertEquals(false, node1.isDebugger());
//       assertEquals(false, node1.isParamList());
//       assertEquals(false, node1.isVarArgs());
//       assertEquals(132, node1.getType());
//       assertEquals(false, node1.isExprResult());
//       assertEquals(false, node1.isNE());
//       assertEquals(false, node1.isContinue());
//       assertEquals(false, node1.isNot());
//       assertEquals(false, node1.isCatch());
//       assertEquals(0, node1.getSideEffectFlags());
//       assertEquals(false, node1.isCall());
//       assertEquals(false, node1.wasEmptyNode());
//       assertEquals(true, node1.isScript());
//       assertEquals(false, node1.isInstanceOf());
//       assertEquals(false, node1.hasChildren());
//       assertEquals(-1, node1.getLineno());
//       assertEquals(false, node1.isDo());
//       assertEquals(false, node1.isAssignAdd());
//       assertEquals(false, node1.isBreak());
//       assertEquals(false, node1.isDelProp());
//       assertEquals(" [synthetic:1] ", node1.getSourceFileName());
//       assertEquals(false, node1.isAssign());
//       assertEquals(false, node1.hasOneChild());
//       assertEquals(false, node1.isHook());
//       assertEquals(false, node1.isName());
//       assertEquals(false, node1.isEmpty());
//       assertEquals(false, node1.isAdd());
//       assertEquals(1, compiler0.getErrorCount());
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
//       assertEquals(false, compiler0.isTypeCheckingEnabled());
//       assertEquals(true, compiler0.hasErrors());
//       assertEquals(false, compiler0.acceptConstKeyword());
//       assertEquals(false, compiler0.isIdeMode());
//       assertEquals(0.0, compiler0.getProgress(), 0.01D);
//       assertEquals(0, compiler0.getWarningCount());
//   }

  @Test
  public void test6() {}
//   @Test
//   public void test6()  throws Throwable  {
//       Compiler compiler0 = new Compiler();
//       assertEquals(0.0, compiler0.getProgress(), 0.01D);
//       assertNotNull(compiler0);
//       
//       String string0 = "s";
//       MockFile mockFile0 = new MockFile(string0);
//       assertNotNull(mockFile0);
//       
//       JSSourceFile jSSourceFile0 = JSSourceFile.fromFile((File) mockFile0);
//       assertEquals(false, jSSourceFile0.isExtern());
//       assertEquals("s", jSSourceFile0.toString());
//       assertEquals("s", jSSourceFile0.getName());
//       assertEquals("s", jSSourceFile0.getOriginalPath());
//       assertNotNull(jSSourceFile0);
//       
//       CompilerOptions compilerOptions0 = new CompilerOptions();
//       assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
//       assertFalse(compilerOptions0.removeDeadCode);
//       assertFalse(compilerOptions0.flowSensitiveInlineVariables);
//       assertFalse(compilerOptions0.ambiguateProperties);
//       assertFalse(compilerOptions0.jqueryPass);
//       assertFalse(compilerOptions0.smartNameRemoval);
//       assertFalse(compilerOptions0.collapseVariableDeclarations);
//       assertFalse(compilerOptions0.removeUnusedVars);
//       assertFalse(compilerOptions0.inlineLocalFunctions);
//       assertFalse(compilerOptions0.labelRenaming);
//       assertFalse(compilerOptions0.optimizeCalls);
//       assertFalse(compilerOptions0.computeFunctionSideEffects);
//       assertFalse(compilerOptions0.inlineConstantVars);
//       assertFalse(compilerOptions0.generatePseudoNames);
//       assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
//       assertFalse(compilerOptions0.coalesceVariableNames);
//       assertFalse(compilerOptions0.rewriteFunctionExpressions);
//       assertFalse(compilerOptions0.markAsCompiled);
//       assertFalse(compilerOptions0.moveFunctionDeclarations);
//       assertFalse(compilerOptions0.aliasAllStrings);
//       assertFalse(compilerOptions0.optimizeArgumentsArray);
//       assertFalse(compilerOptions0.removeUnusedClassProperties);
//       assertFalse(compilerOptions0.inlineFunctions);
//       assertFalse(compilerOptions0.optimizeParameters);
//       assertFalse(compilerOptions0.removeUnusedLocalVars);
//       assertFalse(compilerOptions0.aliasExternals);
//       assertFalse(compilerOptions0.ideMode);
//       assertFalse(compilerOptions0.printInputDelimiter);
//       assertFalse(compilerOptions0.collapseProperties);
//       assertFalse(compilerOptions0.inlineVariables);
//       assertFalse(compilerOptions0.exportTestFunctions);
//       assertFalse(compilerOptions0.foldConstants);
//       assertFalse(compilerOptions0.disambiguateProperties);
//       assertFalse(compilerOptions0.checkTypes);
//       assertFalse(compilerOptions0.removeTryCatchFinally);
//       assertFalse(compilerOptions0.gatherCssNames);
//       assertFalse(compilerOptions0.crossModuleMethodMotion);
//       assertFalse(compilerOptions0.lineBreak);
//       assertFalse(compilerOptions0.markNoSideEffectCalls);
//       assertFalse(compilerOptions0.inlineGetters);
//       assertFalse(compilerOptions0.prettyPrint);
//       assertFalse(compilerOptions0.reserveRawExports);
//       assertFalse(compilerOptions0.convertToDottedProperties);
//       assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
//       assertFalse(compilerOptions0.devirtualizePrototypeMethods);
//       assertFalse(compilerOptions0.preferLineBreakAtEndOfFile);
//       assertFalse(compilerOptions0.aliasKeywords);
//       assertFalse(compilerOptions0.checkControlStructures);
//       assertFalse(compilerOptions0.collapseAnonymousFunctions);
//       assertFalse(compilerOptions0.checkSuspiciousCode);
//       assertFalse(compilerOptions0.recordFunctionInformation);
//       assertFalse(compilerOptions0.deadAssignmentElimination);
//       assertFalse(compilerOptions0.crossModuleCodeMotion);
//       assertFalse(compilerOptions0.checkSymbols);
//       assertFalse(compilerOptions0.closurePass);
//       assertFalse(compilerOptions0.generateExports);
//       assertFalse(compilerOptions0.optimizeReturns);
//       assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
//       assertEquals(CompilerOptions.TracerMode.OFF, compilerOptions0.getTracerMode());
//       assertNull(compilerOptions0.getLanguageOut());
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compilerOptions0.getLanguageIn());
//       assertEquals(CompilerOptions.TweakProcessing.OFF, compilerOptions0.getTweakProcessing());
//       assertEquals(false, compilerOptions0.assumeStrictThis());
//       assertEquals(false, compilerOptions0.isRemoveUnusedClassProperties());
//       assertEquals(false, compilerOptions0.isExternExportsEnabled());
//       assertEquals(false, compilerOptions0.getInferTypes());
//       assertEquals(false, compilerOptions0.assumeClosuresOnlyCaptureReferences());
//       assertNotNull(compilerOptions0);
//       
//       Result result0 = compiler0.compile((SourceFile) jSSourceFile0, (SourceFile) jSSourceFile0, compilerOptions0);
//       assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
//       assertFalse(compilerOptions0.removeDeadCode);
//       assertFalse(compilerOptions0.flowSensitiveInlineVariables);
//       assertFalse(compilerOptions0.ambiguateProperties);
//       assertFalse(compilerOptions0.jqueryPass);
//       assertFalse(compilerOptions0.smartNameRemoval);
//       assertFalse(compilerOptions0.collapseVariableDeclarations);
//       assertFalse(compilerOptions0.removeUnusedVars);
//       assertFalse(compilerOptions0.inlineLocalFunctions);
//       assertFalse(compilerOptions0.labelRenaming);
//       assertFalse(compilerOptions0.optimizeCalls);
//       assertFalse(compilerOptions0.computeFunctionSideEffects);
//       assertFalse(compilerOptions0.inlineConstantVars);
//       assertFalse(compilerOptions0.generatePseudoNames);
//       assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
//       assertFalse(compilerOptions0.coalesceVariableNames);
//       assertFalse(compilerOptions0.rewriteFunctionExpressions);
//       assertFalse(compilerOptions0.markAsCompiled);
//       assertFalse(compilerOptions0.moveFunctionDeclarations);
//       assertFalse(compilerOptions0.aliasAllStrings);
//       assertFalse(compilerOptions0.optimizeArgumentsArray);
//       assertFalse(compilerOptions0.removeUnusedClassProperties);
//       assertFalse(compilerOptions0.inlineFunctions);
//       assertFalse(compilerOptions0.optimizeParameters);
//       assertFalse(compilerOptions0.removeUnusedLocalVars);
//       assertFalse(compilerOptions0.aliasExternals);
//       assertFalse(compilerOptions0.ideMode);
//       assertFalse(compilerOptions0.printInputDelimiter);
//       assertFalse(compilerOptions0.collapseProperties);
//       assertFalse(compilerOptions0.inlineVariables);
//       assertFalse(compilerOptions0.exportTestFunctions);
//       assertFalse(compilerOptions0.foldConstants);
//       assertFalse(compilerOptions0.disambiguateProperties);
//       assertFalse(compilerOptions0.checkTypes);
//       assertFalse(compilerOptions0.removeTryCatchFinally);
//       assertFalse(compilerOptions0.gatherCssNames);
//       assertFalse(compilerOptions0.crossModuleMethodMotion);
//       assertFalse(compilerOptions0.lineBreak);
//       assertFalse(compilerOptions0.markNoSideEffectCalls);
//       assertFalse(compilerOptions0.inlineGetters);
//       assertFalse(compilerOptions0.prettyPrint);
//       assertFalse(compilerOptions0.reserveRawExports);
//       assertFalse(compilerOptions0.convertToDottedProperties);
//       assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
//       assertFalse(compilerOptions0.devirtualizePrototypeMethods);
//       assertFalse(compilerOptions0.preferLineBreakAtEndOfFile);
//       assertFalse(compilerOptions0.aliasKeywords);
//       assertFalse(compilerOptions0.checkControlStructures);
//       assertFalse(compilerOptions0.collapseAnonymousFunctions);
//       assertFalse(compilerOptions0.checkSuspiciousCode);
//       assertFalse(compilerOptions0.recordFunctionInformation);
//       assertFalse(compilerOptions0.deadAssignmentElimination);
//       assertFalse(compilerOptions0.crossModuleCodeMotion);
//       assertFalse(compilerOptions0.checkSymbols);
//       assertFalse(compilerOptions0.closurePass);
//       assertFalse(compilerOptions0.generateExports);
//       assertFalse(compilerOptions0.optimizeReturns);
//       assertEquals(true, jSSourceFile0.isExtern());
//       assertEquals("s", jSSourceFile0.toString());
//       assertEquals("s", jSSourceFile0.getName());
//       assertEquals("s", jSSourceFile0.getOriginalPath());
//       assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
//       assertEquals(CompilerOptions.TracerMode.OFF, compilerOptions0.getTracerMode());
//       assertNull(compilerOptions0.getLanguageOut());
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compilerOptions0.getLanguageIn());
//       assertEquals(CompilerOptions.TweakProcessing.OFF, compilerOptions0.getTweakProcessing());
//       assertEquals(false, compilerOptions0.assumeStrictThis());
//       assertEquals(false, compilerOptions0.isRemoveUnusedClassProperties());
//       assertEquals(false, compilerOptions0.isExternExportsEnabled());
//       assertEquals(false, compilerOptions0.getInferTypes());
//       assertEquals(false, compilerOptions0.assumeClosuresOnlyCaptureReferences());
//       assertEquals(0, compiler0.getWarningCount());
//       assertEquals(true, compiler0.hasErrors());
//       assertEquals(0.0, compiler0.getProgress(), 0.01D);
//       assertEquals(false, compiler0.acceptConstKeyword());
//       assertEquals(false, compiler0.isTypeCheckingEnabled());
//       assertEquals(false, compiler0.isIdeMode());
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
//       assertEquals(1, compiler0.getErrorCount());
//       assertNotNull(result0);
//       
//       DefaultPassConfig defaultPassConfig0 = new DefaultPassConfig(compilerOptions0);
//       assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
//       assertFalse(compilerOptions0.removeDeadCode);
//       assertFalse(compilerOptions0.flowSensitiveInlineVariables);
//       assertFalse(compilerOptions0.ambiguateProperties);
//       assertFalse(compilerOptions0.jqueryPass);
//       assertFalse(compilerOptions0.smartNameRemoval);
//       assertFalse(compilerOptions0.collapseVariableDeclarations);
//       assertFalse(compilerOptions0.removeUnusedVars);
//       assertFalse(compilerOptions0.inlineLocalFunctions);
//       assertFalse(compilerOptions0.labelRenaming);
//       assertFalse(compilerOptions0.optimizeCalls);
//       assertFalse(compilerOptions0.computeFunctionSideEffects);
//       assertFalse(compilerOptions0.inlineConstantVars);
//       assertFalse(compilerOptions0.generatePseudoNames);
//       assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
//       assertFalse(compilerOptions0.coalesceVariableNames);
//       assertFalse(compilerOptions0.rewriteFunctionExpressions);
//       assertFalse(compilerOptions0.markAsCompiled);
//       assertFalse(compilerOptions0.moveFunctionDeclarations);
//       assertFalse(compilerOptions0.aliasAllStrings);
//       assertFalse(compilerOptions0.optimizeArgumentsArray);
//       assertFalse(compilerOptions0.removeUnusedClassProperties);
//       assertFalse(compilerOptions0.inlineFunctions);
//       assertFalse(compilerOptions0.optimizeParameters);
//       assertFalse(compilerOptions0.removeUnusedLocalVars);
//       assertFalse(compilerOptions0.aliasExternals);
//       assertFalse(compilerOptions0.ideMode);
//       assertFalse(compilerOptions0.printInputDelimiter);
//       assertFalse(compilerOptions0.collapseProperties);
//       assertFalse(compilerOptions0.inlineVariables);
//       assertFalse(compilerOptions0.exportTestFunctions);
//       assertFalse(compilerOptions0.foldConstants);
//       assertFalse(compilerOptions0.disambiguateProperties);
//       assertFalse(compilerOptions0.checkTypes);
//       assertFalse(compilerOptions0.removeTryCatchFinally);
//       assertFalse(compilerOptions0.gatherCssNames);
//       assertFalse(compilerOptions0.crossModuleMethodMotion);
//       assertFalse(compilerOptions0.lineBreak);
//       assertFalse(compilerOptions0.markNoSideEffectCalls);
//       assertFalse(compilerOptions0.inlineGetters);
//       assertFalse(compilerOptions0.prettyPrint);
//       assertFalse(compilerOptions0.reserveRawExports);
//       assertFalse(compilerOptions0.convertToDottedProperties);
//       assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
//       assertFalse(compilerOptions0.devirtualizePrototypeMethods);
//       assertFalse(compilerOptions0.preferLineBreakAtEndOfFile);
//       assertFalse(compilerOptions0.aliasKeywords);
//       assertFalse(compilerOptions0.checkControlStructures);
//       assertFalse(compilerOptions0.collapseAnonymousFunctions);
//       assertFalse(compilerOptions0.checkSuspiciousCode);
//       assertFalse(compilerOptions0.recordFunctionInformation);
//       assertFalse(compilerOptions0.deadAssignmentElimination);
//       assertFalse(compilerOptions0.crossModuleCodeMotion);
//       assertFalse(compilerOptions0.checkSymbols);
//       assertFalse(compilerOptions0.closurePass);
//       assertFalse(compilerOptions0.generateExports);
//       assertFalse(compilerOptions0.optimizeReturns);
//       assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
//       assertEquals(CompilerOptions.TracerMode.OFF, compilerOptions0.getTracerMode());
//       assertNull(compilerOptions0.getLanguageOut());
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compilerOptions0.getLanguageIn());
//       assertEquals(CompilerOptions.TweakProcessing.OFF, compilerOptions0.getTweakProcessing());
//       assertEquals(false, compilerOptions0.assumeStrictThis());
//       assertEquals(false, compilerOptions0.isRemoveUnusedClassProperties());
//       assertEquals(false, compilerOptions0.isExternExportsEnabled());
//       assertEquals(false, compilerOptions0.getInferTypes());
//       assertEquals(false, compilerOptions0.assumeClosuresOnlyCaptureReferences());
//       assertNotNull(defaultPassConfig0);
//       
//       TypeCheck typeCheck0 = defaultPassConfig0.makeTypeCheck(compiler0);
//       assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
//       assertFalse(compilerOptions0.removeDeadCode);
//       assertFalse(compilerOptions0.flowSensitiveInlineVariables);
//       assertFalse(compilerOptions0.ambiguateProperties);
//       assertFalse(compilerOptions0.jqueryPass);
//       assertFalse(compilerOptions0.smartNameRemoval);
//       assertFalse(compilerOptions0.collapseVariableDeclarations);
//       assertFalse(compilerOptions0.removeUnusedVars);
//       assertFalse(compilerOptions0.inlineLocalFunctions);
//       assertFalse(compilerOptions0.labelRenaming);
//       assertFalse(compilerOptions0.optimizeCalls);
//       assertFalse(compilerOptions0.computeFunctionSideEffects);
//       assertFalse(compilerOptions0.inlineConstantVars);
//       assertFalse(compilerOptions0.generatePseudoNames);
//       assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
//       assertFalse(compilerOptions0.coalesceVariableNames);
//       assertFalse(compilerOptions0.rewriteFunctionExpressions);
//       assertFalse(compilerOptions0.markAsCompiled);
//       assertFalse(compilerOptions0.moveFunctionDeclarations);
//       assertFalse(compilerOptions0.aliasAllStrings);
//       assertFalse(compilerOptions0.optimizeArgumentsArray);
//       assertFalse(compilerOptions0.removeUnusedClassProperties);
//       assertFalse(compilerOptions0.inlineFunctions);
//       assertFalse(compilerOptions0.optimizeParameters);
//       assertFalse(compilerOptions0.removeUnusedLocalVars);
//       assertFalse(compilerOptions0.aliasExternals);
//       assertFalse(compilerOptions0.ideMode);
//       assertFalse(compilerOptions0.printInputDelimiter);
//       assertFalse(compilerOptions0.collapseProperties);
//       assertFalse(compilerOptions0.inlineVariables);
//       assertFalse(compilerOptions0.exportTestFunctions);
//       assertFalse(compilerOptions0.foldConstants);
//       assertFalse(compilerOptions0.disambiguateProperties);
//       assertFalse(compilerOptions0.checkTypes);
//       assertFalse(compilerOptions0.removeTryCatchFinally);
//       assertFalse(compilerOptions0.gatherCssNames);
//       assertFalse(compilerOptions0.crossModuleMethodMotion);
//       assertFalse(compilerOptions0.lineBreak);
//       assertFalse(compilerOptions0.markNoSideEffectCalls);
//       assertFalse(compilerOptions0.inlineGetters);
//       assertFalse(compilerOptions0.prettyPrint);
//       assertFalse(compilerOptions0.reserveRawExports);
//       assertFalse(compilerOptions0.convertToDottedProperties);
//       assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
//       assertFalse(compilerOptions0.devirtualizePrototypeMethods);
//       assertFalse(compilerOptions0.preferLineBreakAtEndOfFile);
//       assertFalse(compilerOptions0.aliasKeywords);
//       assertFalse(compilerOptions0.checkControlStructures);
//       assertFalse(compilerOptions0.collapseAnonymousFunctions);
//       assertFalse(compilerOptions0.checkSuspiciousCode);
//       assertFalse(compilerOptions0.recordFunctionInformation);
//       assertFalse(compilerOptions0.deadAssignmentElimination);
//       assertFalse(compilerOptions0.crossModuleCodeMotion);
//       assertFalse(compilerOptions0.checkSymbols);
//       assertFalse(compilerOptions0.closurePass);
//       assertFalse(compilerOptions0.generateExports);
//       assertFalse(compilerOptions0.optimizeReturns);
//       assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
//       assertEquals(CompilerOptions.TracerMode.OFF, compilerOptions0.getTracerMode());
//       assertNull(compilerOptions0.getLanguageOut());
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compilerOptions0.getLanguageIn());
//       assertEquals(CompilerOptions.TweakProcessing.OFF, compilerOptions0.getTweakProcessing());
//       assertEquals(false, compilerOptions0.assumeStrictThis());
//       assertEquals(false, compilerOptions0.isRemoveUnusedClassProperties());
//       assertEquals(false, compilerOptions0.isExternExportsEnabled());
//       assertEquals(false, compilerOptions0.getInferTypes());
//       assertEquals(false, compilerOptions0.assumeClosuresOnlyCaptureReferences());
//       assertEquals(0, compiler0.getWarningCount());
//       assertEquals(true, compiler0.hasErrors());
//       assertEquals(0.0, compiler0.getProgress(), 0.01D);
//       assertEquals(false, compiler0.acceptConstKeyword());
//       assertEquals(false, compiler0.isTypeCheckingEnabled());
//       assertEquals(false, compiler0.isIdeMode());
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
//       assertEquals(1, compiler0.getErrorCount());
//       assertNotNull(typeCheck0);
//       
//       JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
//       assertEquals(0, compiler0.getWarningCount());
//       assertEquals(true, compiler0.hasErrors());
//       assertEquals(0.0, compiler0.getProgress(), 0.01D);
//       assertEquals(false, compiler0.acceptConstKeyword());
//       assertEquals(false, compiler0.isTypeCheckingEnabled());
//       assertEquals(false, compiler0.isIdeMode());
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
//       assertEquals(1, compiler0.getErrorCount());
//       assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
//       assertNotNull(jSTypeRegistry0);
//       
//       Stack<JSType> stack0 = new Stack<JSType>();
//       assertEquals(true, stack0.isEmpty());
//       assertEquals(true, stack0.empty());
//       assertEquals("[]", stack0.toString());
//       assertEquals(10, stack0.capacity());
//       assertEquals(0, stack0.size());
//       assertNotNull(stack0);
//       
//       Node node0 = jSTypeRegistry0.createParameters((List<JSType>) stack0);
//       assertEquals(false, node0.isVoid());
//       assertEquals(false, node0.isContinue());
//       assertEquals(false, node0.isOr());
//       assertEquals(0, node0.getLength());
//       assertEquals(-1, node0.getLineno());
//       assertEquals(false, node0.isDebugger());
//       assertEquals(false, node0.isLabelName());
//       assertEquals(false, node0.isCatch());
//       assertEquals(false, node0.isQuotedString());
//       assertEquals(false, node0.isWith());
//       assertEquals(false, node0.isFor());
//       assertEquals(false, node0.isSwitch());
//       assertEquals(false, node0.isAssignAdd());
//       assertEquals(false, node0.isHook());
//       assertEquals(false, node0.isIn());
//       assertEquals(false, node0.isLabel());
//       assertEquals(false, node0.isGetterDef());
//       assertEquals(false, node0.isVarArgs());
//       assertEquals(false, node0.isRegExp());
//       assertEquals(false, node0.isEmpty());
//       assertEquals(false, node0.isWhile());
//       assertEquals(false, node0.isIf());
//       assertEquals(true, node0.isParamList());
//       assertEquals(false, node0.isNull());
//       assertEquals(false, node0.hasMoreThanOneChild());
//       assertEquals(false, node0.isInc());
//       assertEquals(false, node0.isSetterDef());
//       assertEquals(false, node0.isScript());
//       assertEquals(false, node0.isExprResult());
//       assertEquals(false, node0.isCase());
//       assertEquals(false, node0.isDec());
//       assertEquals(false, node0.isFromExterns());
//       assertEquals(false, node0.isInstanceOf());
//       assertEquals(false, node0.isGetProp());
//       assertEquals(false, node0.isNumber());
//       assertEquals(83, node0.getType());
//       assertEquals(-1, node0.getCharno());
//       assertEquals(false, node0.isAssign());
//       assertEquals(false, node0.isDelProp());
//       assertEquals(false, node0.isThis());
//       assertEquals(false, node0.isGetElem());
//       assertEquals(false, node0.isCall());
//       assertEquals(false, node0.isTrue());
//       assertEquals(false, node0.isVar());
//       assertEquals(false, node0.isName());
//       assertEquals(false, node0.isThrow());
//       assertEquals(false, node0.isOnlyModifiesThisCall());
//       assertEquals(false, node0.isString());
//       assertEquals(false, node0.isReturn());
//       assertEquals(false, node0.isOptionalArg());
//       assertNull(node0.getSourceFileName());
//       assertEquals(false, node0.hasChildren());
//       assertEquals(false, node0.isTry());
//       assertEquals(false, node0.isAdd());
//       assertEquals(false, node0.isFunction());
//       assertEquals(false, node0.isTypeOf());
//       assertEquals(0, node0.getSideEffectFlags());
//       assertEquals(false, node0.isDo());
//       assertEquals(-1, node0.getSourcePosition());
//       assertEquals(false, node0.wasEmptyNode());
//       assertEquals(false, node0.isObjectLit());
//       assertEquals(false, node0.isNoSideEffectsCall());
//       assertEquals(false, node0.isStringKey());
//       assertEquals(false, node0.isLocalResultCall());
//       assertEquals(false, node0.isFalse());
//       assertEquals(false, node0.isComma());
//       assertEquals(false, node0.isSyntheticBlock());
//       assertEquals(false, node0.isDefaultCase());
//       assertEquals(false, node0.isBlock());
//       assertEquals(false, node0.isNew());
//       assertEquals(false, node0.isNE());
//       assertEquals(false, node0.hasOneChild());
//       assertEquals(false, node0.isAnd());
//       assertEquals(0, node0.getChildCount());
//       assertEquals(false, node0.isArrayLit());
//       assertEquals(false, node0.isNot());
//       assertEquals(false, node0.isBreak());
//       assertEquals(0, compiler0.getWarningCount());
//       assertEquals(true, compiler0.hasErrors());
//       assertEquals(0.0, compiler0.getProgress(), 0.01D);
//       assertEquals(false, compiler0.acceptConstKeyword());
//       assertEquals(false, compiler0.isTypeCheckingEnabled());
//       assertEquals(false, compiler0.isIdeMode());
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
//       assertEquals(1, compiler0.getErrorCount());
//       assertEquals(true, stack0.isEmpty());
//       assertEquals(true, stack0.empty());
//       assertEquals("[]", stack0.toString());
//       assertEquals(10, stack0.capacity());
//       assertEquals(0, stack0.size());
//       assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
//       assertNotNull(node0);
//       
//       MemoizedScopeCreator memoizedScopeCreator0 = defaultPassConfig0.getTypedScopeCreator();
//       assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
//       assertFalse(compilerOptions0.removeDeadCode);
//       assertFalse(compilerOptions0.flowSensitiveInlineVariables);
//       assertFalse(compilerOptions0.ambiguateProperties);
//       assertFalse(compilerOptions0.jqueryPass);
//       assertFalse(compilerOptions0.smartNameRemoval);
//       assertFalse(compilerOptions0.collapseVariableDeclarations);
//       assertFalse(compilerOptions0.removeUnusedVars);
//       assertFalse(compilerOptions0.inlineLocalFunctions);
//       assertFalse(compilerOptions0.labelRenaming);
//       assertFalse(compilerOptions0.optimizeCalls);
//       assertFalse(compilerOptions0.computeFunctionSideEffects);
//       assertFalse(compilerOptions0.inlineConstantVars);
//       assertFalse(compilerOptions0.generatePseudoNames);
//       assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
//       assertFalse(compilerOptions0.coalesceVariableNames);
//       assertFalse(compilerOptions0.rewriteFunctionExpressions);
//       assertFalse(compilerOptions0.markAsCompiled);
//       assertFalse(compilerOptions0.moveFunctionDeclarations);
//       assertFalse(compilerOptions0.aliasAllStrings);
//       assertFalse(compilerOptions0.optimizeArgumentsArray);
//       assertFalse(compilerOptions0.removeUnusedClassProperties);
//       assertFalse(compilerOptions0.inlineFunctions);
//       assertFalse(compilerOptions0.optimizeParameters);
//       assertFalse(compilerOptions0.removeUnusedLocalVars);
//       assertFalse(compilerOptions0.aliasExternals);
//       assertFalse(compilerOptions0.ideMode);
//       assertFalse(compilerOptions0.printInputDelimiter);
//       assertFalse(compilerOptions0.collapseProperties);
//       assertFalse(compilerOptions0.inlineVariables);
//       assertFalse(compilerOptions0.exportTestFunctions);
//       assertFalse(compilerOptions0.foldConstants);
//       assertFalse(compilerOptions0.disambiguateProperties);
//       assertFalse(compilerOptions0.checkTypes);
//       assertFalse(compilerOptions0.removeTryCatchFinally);
//       assertFalse(compilerOptions0.gatherCssNames);
//       assertFalse(compilerOptions0.crossModuleMethodMotion);
//       assertFalse(compilerOptions0.lineBreak);
//       assertFalse(compilerOptions0.markNoSideEffectCalls);
//       assertFalse(compilerOptions0.inlineGetters);
//       assertFalse(compilerOptions0.prettyPrint);
//       assertFalse(compilerOptions0.reserveRawExports);
//       assertFalse(compilerOptions0.convertToDottedProperties);
//       assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
//       assertFalse(compilerOptions0.devirtualizePrototypeMethods);
//       assertFalse(compilerOptions0.preferLineBreakAtEndOfFile);
//       assertFalse(compilerOptions0.aliasKeywords);
//       assertFalse(compilerOptions0.checkControlStructures);
//       assertFalse(compilerOptions0.collapseAnonymousFunctions);
//       assertFalse(compilerOptions0.checkSuspiciousCode);
//       assertFalse(compilerOptions0.recordFunctionInformation);
//       assertFalse(compilerOptions0.deadAssignmentElimination);
//       assertFalse(compilerOptions0.crossModuleCodeMotion);
//       assertFalse(compilerOptions0.checkSymbols);
//       assertFalse(compilerOptions0.closurePass);
//       assertFalse(compilerOptions0.generateExports);
//       assertFalse(compilerOptions0.optimizeReturns);
//       assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
//       assertEquals(CompilerOptions.TracerMode.OFF, compilerOptions0.getTracerMode());
//       assertNull(compilerOptions0.getLanguageOut());
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compilerOptions0.getLanguageIn());
//       assertEquals(CompilerOptions.TweakProcessing.OFF, compilerOptions0.getTweakProcessing());
//       assertEquals(false, compilerOptions0.assumeStrictThis());
//       assertEquals(false, compilerOptions0.isRemoveUnusedClassProperties());
//       assertEquals(false, compilerOptions0.isExternExportsEnabled());
//       assertEquals(false, compilerOptions0.getInferTypes());
//       assertEquals(false, compilerOptions0.assumeClosuresOnlyCaptureReferences());
//       assertNull(memoizedScopeCreator0);
//       
//       NodeTraversal nodeTraversal0 = new NodeTraversal((AbstractCompiler) compiler0, (NodeTraversal.Callback) typeCheck0, (ScopeCreator) memoizedScopeCreator0);
//       assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
//       assertFalse(compilerOptions0.removeDeadCode);
//       assertFalse(compilerOptions0.flowSensitiveInlineVariables);
//       assertFalse(compilerOptions0.ambiguateProperties);
//       assertFalse(compilerOptions0.jqueryPass);
//       assertFalse(compilerOptions0.smartNameRemoval);
//       assertFalse(compilerOptions0.collapseVariableDeclarations);
//       assertFalse(compilerOptions0.removeUnusedVars);
//       assertFalse(compilerOptions0.inlineLocalFunctions);
//       assertFalse(compilerOptions0.labelRenaming);
//       assertFalse(compilerOptions0.optimizeCalls);
//       assertFalse(compilerOptions0.computeFunctionSideEffects);
//       assertFalse(compilerOptions0.inlineConstantVars);
//       assertFalse(compilerOptions0.generatePseudoNames);
//       assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
//       assertFalse(compilerOptions0.coalesceVariableNames);
//       assertFalse(compilerOptions0.rewriteFunctionExpressions);
//       assertFalse(compilerOptions0.markAsCompiled);
//       assertFalse(compilerOptions0.moveFunctionDeclarations);
//       assertFalse(compilerOptions0.aliasAllStrings);
//       assertFalse(compilerOptions0.optimizeArgumentsArray);
//       assertFalse(compilerOptions0.removeUnusedClassProperties);
//       assertFalse(compilerOptions0.inlineFunctions);
//       assertFalse(compilerOptions0.optimizeParameters);
//       assertFalse(compilerOptions0.removeUnusedLocalVars);
//       assertFalse(compilerOptions0.aliasExternals);
//       assertFalse(compilerOptions0.ideMode);
//       assertFalse(compilerOptions0.printInputDelimiter);
//       assertFalse(compilerOptions0.collapseProperties);
//       assertFalse(compilerOptions0.inlineVariables);
//       assertFalse(compilerOptions0.exportTestFunctions);
//       assertFalse(compilerOptions0.foldConstants);
//       assertFalse(compilerOptions0.disambiguateProperties);
//       assertFalse(compilerOptions0.checkTypes);
//       assertFalse(compilerOptions0.removeTryCatchFinally);
//       assertFalse(compilerOptions0.gatherCssNames);
//       assertFalse(compilerOptions0.crossModuleMethodMotion);
//       assertFalse(compilerOptions0.lineBreak);
//       assertFalse(compilerOptions0.markNoSideEffectCalls);
//       assertFalse(compilerOptions0.inlineGetters);
//       assertFalse(compilerOptions0.prettyPrint);
//       assertFalse(compilerOptions0.reserveRawExports);
//       assertFalse(compilerOptions0.convertToDottedProperties);
//       assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
//       assertFalse(compilerOptions0.devirtualizePrototypeMethods);
//       assertFalse(compilerOptions0.preferLineBreakAtEndOfFile);
//       assertFalse(compilerOptions0.aliasKeywords);
//       assertFalse(compilerOptions0.checkControlStructures);
//       assertFalse(compilerOptions0.collapseAnonymousFunctions);
//       assertFalse(compilerOptions0.checkSuspiciousCode);
//       assertFalse(compilerOptions0.recordFunctionInformation);
//       assertFalse(compilerOptions0.deadAssignmentElimination);
//       assertFalse(compilerOptions0.crossModuleCodeMotion);
//       assertFalse(compilerOptions0.checkSymbols);
//       assertFalse(compilerOptions0.closurePass);
//       assertFalse(compilerOptions0.generateExports);
//       assertFalse(compilerOptions0.optimizeReturns);
//       assertEquals(0, nodeTraversal0.getLineNumber());
//       assertEquals("", nodeTraversal0.getSourceName());
//       assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
//       assertEquals(CompilerOptions.TracerMode.OFF, compilerOptions0.getTracerMode());
//       assertNull(compilerOptions0.getLanguageOut());
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compilerOptions0.getLanguageIn());
//       assertEquals(CompilerOptions.TweakProcessing.OFF, compilerOptions0.getTweakProcessing());
//       assertEquals(false, compilerOptions0.assumeStrictThis());
//       assertEquals(false, compilerOptions0.isRemoveUnusedClassProperties());
//       assertEquals(false, compilerOptions0.isExternExportsEnabled());
//       assertEquals(false, compilerOptions0.getInferTypes());
//       assertEquals(false, compilerOptions0.assumeClosuresOnlyCaptureReferences());
//       assertEquals(0, compiler0.getWarningCount());
//       assertEquals(true, compiler0.hasErrors());
//       assertEquals(0.0, compiler0.getProgress(), 0.01D);
//       assertEquals(false, compiler0.acceptConstKeyword());
//       assertEquals(false, compiler0.isTypeCheckingEnabled());
//       assertEquals(false, compiler0.isIdeMode());
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
//       assertEquals(1, compiler0.getErrorCount());
//       assertNotNull(nodeTraversal0);
//       
//       typeCheck0.visit(nodeTraversal0, node0, node0);
//       assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
//       assertFalse(compilerOptions0.removeDeadCode);
//       assertFalse(compilerOptions0.flowSensitiveInlineVariables);
//       assertFalse(compilerOptions0.ambiguateProperties);
//       assertFalse(compilerOptions0.jqueryPass);
//       assertFalse(compilerOptions0.smartNameRemoval);
//       assertFalse(compilerOptions0.collapseVariableDeclarations);
//       assertFalse(compilerOptions0.removeUnusedVars);
//       assertFalse(compilerOptions0.inlineLocalFunctions);
//       assertFalse(compilerOptions0.labelRenaming);
//       assertFalse(compilerOptions0.optimizeCalls);
//       assertFalse(compilerOptions0.computeFunctionSideEffects);
//       assertFalse(compilerOptions0.inlineConstantVars);
//       assertFalse(compilerOptions0.generatePseudoNames);
//       assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
//       assertFalse(compilerOptions0.coalesceVariableNames);
//       assertFalse(compilerOptions0.rewriteFunctionExpressions);
//       assertFalse(compilerOptions0.markAsCompiled);
//       assertFalse(compilerOptions0.moveFunctionDeclarations);
//       assertFalse(compilerOptions0.aliasAllStrings);
//       assertFalse(compilerOptions0.optimizeArgumentsArray);
//       assertFalse(compilerOptions0.removeUnusedClassProperties);
//       assertFalse(compilerOptions0.inlineFunctions);
//       assertFalse(compilerOptions0.optimizeParameters);
//       assertFalse(compilerOptions0.removeUnusedLocalVars);
//       assertFalse(compilerOptions0.aliasExternals);
//       assertFalse(compilerOptions0.ideMode);
//       assertFalse(compilerOptions0.printInputDelimiter);
//       assertFalse(compilerOptions0.collapseProperties);
//       assertFalse(compilerOptions0.inlineVariables);
//       assertFalse(compilerOptions0.exportTestFunctions);
//       assertFalse(compilerOptions0.foldConstants);
//       assertFalse(compilerOptions0.disambiguateProperties);
//       assertFalse(compilerOptions0.checkTypes);
//       assertFalse(compilerOptions0.removeTryCatchFinally);
//       assertFalse(compilerOptions0.gatherCssNames);
//       assertFalse(compilerOptions0.crossModuleMethodMotion);
//       assertFalse(compilerOptions0.lineBreak);
//       assertFalse(compilerOptions0.markNoSideEffectCalls);
//       assertFalse(compilerOptions0.inlineGetters);
//       assertFalse(compilerOptions0.prettyPrint);
//       assertFalse(compilerOptions0.reserveRawExports);
//       assertFalse(compilerOptions0.convertToDottedProperties);
//       assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
//       assertFalse(compilerOptions0.devirtualizePrototypeMethods);
//       assertFalse(compilerOptions0.preferLineBreakAtEndOfFile);
//       assertFalse(compilerOptions0.aliasKeywords);
//       assertFalse(compilerOptions0.checkControlStructures);
//       assertFalse(compilerOptions0.collapseAnonymousFunctions);
//       assertFalse(compilerOptions0.checkSuspiciousCode);
//       assertFalse(compilerOptions0.recordFunctionInformation);
//       assertFalse(compilerOptions0.deadAssignmentElimination);
//       assertFalse(compilerOptions0.crossModuleCodeMotion);
//       assertFalse(compilerOptions0.checkSymbols);
//       assertFalse(compilerOptions0.closurePass);
//       assertFalse(compilerOptions0.generateExports);
//       assertFalse(compilerOptions0.optimizeReturns);
//       assertEquals(0, nodeTraversal0.getLineNumber());
//       assertEquals("", nodeTraversal0.getSourceName());
//       assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
//       assertEquals(CompilerOptions.TracerMode.OFF, compilerOptions0.getTracerMode());
//       assertNull(compilerOptions0.getLanguageOut());
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compilerOptions0.getLanguageIn());
//       assertEquals(CompilerOptions.TweakProcessing.OFF, compilerOptions0.getTweakProcessing());
//       assertEquals(false, compilerOptions0.assumeStrictThis());
//       assertEquals(false, compilerOptions0.isRemoveUnusedClassProperties());
//       assertEquals(false, compilerOptions0.isExternExportsEnabled());
//       assertEquals(false, compilerOptions0.getInferTypes());
//       assertEquals(false, compilerOptions0.assumeClosuresOnlyCaptureReferences());
//       assertEquals(false, node0.isVoid());
//       assertEquals(false, node0.isContinue());
//       assertEquals(false, node0.isOr());
//       assertEquals(0, node0.getLength());
//       assertEquals(-1, node0.getLineno());
//       assertEquals(false, node0.isDebugger());
//       assertEquals(false, node0.isLabelName());
//       assertEquals(false, node0.isCatch());
//       assertEquals(false, node0.isQuotedString());
//       assertEquals(false, node0.isWith());
//       assertEquals(false, node0.isFor());
//       assertEquals(false, node0.isSwitch());
//       assertEquals(false, node0.isAssignAdd());
//       assertEquals(false, node0.isHook());
//       assertEquals(false, node0.isIn());
//       assertEquals(false, node0.isLabel());
//       assertEquals(false, node0.isGetterDef());
//       assertEquals(false, node0.isVarArgs());
//       assertEquals(false, node0.isRegExp());
//       assertEquals(false, node0.isEmpty());
//       assertEquals(false, node0.isWhile());
//       assertEquals(false, node0.isIf());
//       assertEquals(true, node0.isParamList());
//       assertEquals(false, node0.isNull());
//       assertEquals(false, node0.hasMoreThanOneChild());
//       assertEquals(false, node0.isInc());
//       assertEquals(false, node0.isSetterDef());
//       assertEquals(false, node0.isScript());
//       assertEquals(false, node0.isExprResult());
//       assertEquals(false, node0.isCase());
//       assertEquals(false, node0.isDec());
//       assertEquals(false, node0.isFromExterns());
//       assertEquals(false, node0.isInstanceOf());
//       assertEquals(false, node0.isGetProp());
//       assertEquals(false, node0.isNumber());
//       assertEquals(83, node0.getType());
//       assertEquals(-1, node0.getCharno());
//       assertEquals(false, node0.isAssign());
//       assertEquals(false, node0.isDelProp());
//       assertEquals(false, node0.isThis());
//       assertEquals(false, node0.isGetElem());
//       assertEquals(false, node0.isCall());
//       assertEquals(false, node0.isTrue());
//       assertEquals(false, node0.isVar());
//       assertEquals(false, node0.isName());
//       assertEquals(false, node0.isThrow());
//       assertEquals(false, node0.isOnlyModifiesThisCall());
//       assertEquals(false, node0.isString());
//       assertEquals(false, node0.isReturn());
//       assertEquals(false, node0.isOptionalArg());
//       assertNull(node0.getSourceFileName());
//       assertEquals(false, node0.hasChildren());
//       assertEquals(false, node0.isTry());
//       assertEquals(false, node0.isAdd());
//       assertEquals(false, node0.isFunction());
//       assertEquals(false, node0.isTypeOf());
//       assertEquals(0, node0.getSideEffectFlags());
//       assertEquals(false, node0.isDo());
//       assertEquals(-1, node0.getSourcePosition());
//       assertEquals(false, node0.wasEmptyNode());
//       assertEquals(false, node0.isObjectLit());
//       assertEquals(false, node0.isNoSideEffectsCall());
//       assertEquals(false, node0.isStringKey());
//       assertEquals(false, node0.isLocalResultCall());
//       assertEquals(false, node0.isFalse());
//       assertEquals(false, node0.isComma());
//       assertEquals(false, node0.isSyntheticBlock());
//       assertEquals(false, node0.isDefaultCase());
//       assertEquals(false, node0.isBlock());
//       assertEquals(false, node0.isNew());
//       assertEquals(false, node0.isNE());
//       assertEquals(false, node0.hasOneChild());
//       assertEquals(false, node0.isAnd());
//       assertEquals(0, node0.getChildCount());
//       assertEquals(false, node0.isArrayLit());
//       assertEquals(false, node0.isNot());
//       assertEquals(false, node0.isBreak());
//       assertEquals(0, compiler0.getWarningCount());
//       assertEquals(true, compiler0.hasErrors());
//       assertEquals(0.0, compiler0.getProgress(), 0.01D);
//       assertEquals(false, compiler0.acceptConstKeyword());
//       assertEquals(false, compiler0.isTypeCheckingEnabled());
//       assertEquals(false, compiler0.isIdeMode());
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
//       assertEquals(1, compiler0.getErrorCount());
//       assertEquals(true, stack0.isEmpty());
//       assertEquals(true, stack0.empty());
//       assertEquals("[]", stack0.toString());
//       assertEquals(10, stack0.capacity());
//       assertEquals(0, stack0.size());
//       assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
//   }

  @Test
  public void test7() {}
//   @Test
//   public void test7()  throws Throwable  {
//       Compiler compiler0 = new Compiler();
//       assertEquals(0.0, compiler0.getProgress(), 0.01D);
//       assertNotNull(compiler0);
//       
//       String string0 = "s";
//       MockFile mockFile0 = new MockFile(string0);
//       assertNotNull(mockFile0);
//       
//       JSSourceFile jSSourceFile0 = JSSourceFile.fromFile((File) mockFile0);
//       assertEquals(false, jSSourceFile0.isExtern());
//       assertEquals("s", jSSourceFile0.getName());
//       assertEquals("s", jSSourceFile0.getOriginalPath());
//       assertEquals("s", jSSourceFile0.toString());
//       assertNotNull(jSSourceFile0);
//       
//       CompilerOptions compilerOptions0 = new CompilerOptions();
//       assertFalse(compilerOptions0.moveFunctionDeclarations);
//       assertFalse(compilerOptions0.inlineVariables);
//       assertFalse(compilerOptions0.collapseVariableDeclarations);
//       assertFalse(compilerOptions0.generatePseudoNames);
//       assertFalse(compilerOptions0.lineBreak);
//       assertFalse(compilerOptions0.gatherCssNames);
//       assertFalse(compilerOptions0.checkControlStructures);
//       assertFalse(compilerOptions0.inlineGetters);
//       assertFalse(compilerOptions0.closurePass);
//       assertFalse(compilerOptions0.checkSymbols);
//       assertFalse(compilerOptions0.aliasKeywords);
//       assertFalse(compilerOptions0.crossModuleCodeMotion);
//       assertFalse(compilerOptions0.recordFunctionInformation);
//       assertFalse(compilerOptions0.removeDeadCode);
//       assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
//       assertFalse(compilerOptions0.collapseAnonymousFunctions);
//       assertFalse(compilerOptions0.ambiguateProperties);
//       assertFalse(compilerOptions0.removeUnusedClassProperties);
//       assertFalse(compilerOptions0.optimizeCalls);
//       assertFalse(compilerOptions0.rewriteFunctionExpressions);
//       assertFalse(compilerOptions0.removeTryCatchFinally);
//       assertFalse(compilerOptions0.computeFunctionSideEffects);
//       assertFalse(compilerOptions0.disambiguateProperties);
//       assertFalse(compilerOptions0.foldConstants);
//       assertFalse(compilerOptions0.checkSuspiciousCode);
//       assertFalse(compilerOptions0.aliasExternals);
//       assertFalse(compilerOptions0.removeUnusedVars);
//       assertFalse(compilerOptions0.flowSensitiveInlineVariables);
//       assertFalse(compilerOptions0.crossModuleMethodMotion);
//       assertFalse(compilerOptions0.printInputDelimiter);
//       assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
//       assertFalse(compilerOptions0.jqueryPass);
//       assertFalse(compilerOptions0.inlineFunctions);
//       assertFalse(compilerOptions0.coalesceVariableNames);
//       assertFalse(compilerOptions0.exportTestFunctions);
//       assertFalse(compilerOptions0.markNoSideEffectCalls);
//       assertFalse(compilerOptions0.deadAssignmentElimination);
//       assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
//       assertFalse(compilerOptions0.generateExports);
//       assertFalse(compilerOptions0.ideMode);
//       assertFalse(compilerOptions0.optimizeReturns);
//       assertFalse(compilerOptions0.collapseProperties);
//       assertFalse(compilerOptions0.checkTypes);
//       assertFalse(compilerOptions0.smartNameRemoval);
//       assertFalse(compilerOptions0.optimizeArgumentsArray);
//       assertFalse(compilerOptions0.preferLineBreakAtEndOfFile);
//       assertFalse(compilerOptions0.aliasAllStrings);
//       assertFalse(compilerOptions0.markAsCompiled);
//       assertFalse(compilerOptions0.labelRenaming);
//       assertFalse(compilerOptions0.inlineConstantVars);
//       assertFalse(compilerOptions0.prettyPrint);
//       assertFalse(compilerOptions0.convertToDottedProperties);
//       assertFalse(compilerOptions0.optimizeParameters);
//       assertFalse(compilerOptions0.inlineLocalFunctions);
//       assertFalse(compilerOptions0.devirtualizePrototypeMethods);
//       assertFalse(compilerOptions0.removeUnusedLocalVars);
//       assertFalse(compilerOptions0.reserveRawExports);
//       assertEquals(CompilerOptions.TracerMode.OFF, compilerOptions0.getTracerMode());
//       assertNull(compilerOptions0.getLanguageOut());
//       assertEquals(false, compilerOptions0.assumeStrictThis());
//       assertEquals(false, compilerOptions0.assumeClosuresOnlyCaptureReferences());
//       assertEquals(false, compilerOptions0.isRemoveUnusedClassProperties());
//       assertEquals(false, compilerOptions0.isExternExportsEnabled());
//       assertEquals(false, compilerOptions0.getInferTypes());
//       assertEquals(CompilerOptions.TweakProcessing.OFF, compilerOptions0.getTweakProcessing());
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compilerOptions0.getLanguageIn());
//       assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
//       assertNotNull(compilerOptions0);
//       
//       Result result0 = compiler0.compile((SourceFile) jSSourceFile0, (SourceFile) jSSourceFile0, compilerOptions0);
//       assertFalse(compilerOptions0.moveFunctionDeclarations);
//       assertFalse(compilerOptions0.inlineVariables);
//       assertFalse(compilerOptions0.collapseVariableDeclarations);
//       assertFalse(compilerOptions0.generatePseudoNames);
//       assertFalse(compilerOptions0.lineBreak);
//       assertFalse(compilerOptions0.gatherCssNames);
//       assertFalse(compilerOptions0.checkControlStructures);
//       assertFalse(compilerOptions0.inlineGetters);
//       assertFalse(compilerOptions0.closurePass);
//       assertFalse(compilerOptions0.checkSymbols);
//       assertFalse(compilerOptions0.aliasKeywords);
//       assertFalse(compilerOptions0.crossModuleCodeMotion);
//       assertFalse(compilerOptions0.recordFunctionInformation);
//       assertFalse(compilerOptions0.removeDeadCode);
//       assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
//       assertFalse(compilerOptions0.collapseAnonymousFunctions);
//       assertFalse(compilerOptions0.ambiguateProperties);
//       assertFalse(compilerOptions0.removeUnusedClassProperties);
//       assertFalse(compilerOptions0.optimizeCalls);
//       assertFalse(compilerOptions0.rewriteFunctionExpressions);
//       assertFalse(compilerOptions0.removeTryCatchFinally);
//       assertFalse(compilerOptions0.computeFunctionSideEffects);
//       assertFalse(compilerOptions0.disambiguateProperties);
//       assertFalse(compilerOptions0.foldConstants);
//       assertFalse(compilerOptions0.checkSuspiciousCode);
//       assertFalse(compilerOptions0.aliasExternals);
//       assertFalse(compilerOptions0.removeUnusedVars);
//       assertFalse(compilerOptions0.flowSensitiveInlineVariables);
//       assertFalse(compilerOptions0.crossModuleMethodMotion);
//       assertFalse(compilerOptions0.printInputDelimiter);
//       assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
//       assertFalse(compilerOptions0.jqueryPass);
//       assertFalse(compilerOptions0.inlineFunctions);
//       assertFalse(compilerOptions0.coalesceVariableNames);
//       assertFalse(compilerOptions0.exportTestFunctions);
//       assertFalse(compilerOptions0.markNoSideEffectCalls);
//       assertFalse(compilerOptions0.deadAssignmentElimination);
//       assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
//       assertFalse(compilerOptions0.generateExports);
//       assertFalse(compilerOptions0.ideMode);
//       assertFalse(compilerOptions0.optimizeReturns);
//       assertFalse(compilerOptions0.collapseProperties);
//       assertFalse(compilerOptions0.checkTypes);
//       assertFalse(compilerOptions0.smartNameRemoval);
//       assertFalse(compilerOptions0.optimizeArgumentsArray);
//       assertFalse(compilerOptions0.preferLineBreakAtEndOfFile);
//       assertFalse(compilerOptions0.aliasAllStrings);
//       assertFalse(compilerOptions0.markAsCompiled);
//       assertFalse(compilerOptions0.labelRenaming);
//       assertFalse(compilerOptions0.inlineConstantVars);
//       assertFalse(compilerOptions0.prettyPrint);
//       assertFalse(compilerOptions0.convertToDottedProperties);
//       assertFalse(compilerOptions0.optimizeParameters);
//       assertFalse(compilerOptions0.inlineLocalFunctions);
//       assertFalse(compilerOptions0.devirtualizePrototypeMethods);
//       assertFalse(compilerOptions0.removeUnusedLocalVars);
//       assertFalse(compilerOptions0.reserveRawExports);
//       assertEquals(CompilerOptions.TracerMode.OFF, compilerOptions0.getTracerMode());
//       assertNull(compilerOptions0.getLanguageOut());
//       assertEquals(false, compilerOptions0.assumeStrictThis());
//       assertEquals(false, compilerOptions0.assumeClosuresOnlyCaptureReferences());
//       assertEquals(false, compilerOptions0.isRemoveUnusedClassProperties());
//       assertEquals(false, compilerOptions0.isExternExportsEnabled());
//       assertEquals(false, compilerOptions0.getInferTypes());
//       assertEquals(CompilerOptions.TweakProcessing.OFF, compilerOptions0.getTweakProcessing());
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compilerOptions0.getLanguageIn());
//       assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
//       assertEquals(true, compiler0.hasErrors());
//       assertEquals(false, compiler0.acceptConstKeyword());
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
//       assertEquals(1, compiler0.getErrorCount());
//       assertEquals(0.0, compiler0.getProgress(), 0.01D);
//       assertEquals(false, compiler0.isTypeCheckingEnabled());
//       assertEquals(false, compiler0.isIdeMode());
//       assertEquals(0, compiler0.getWarningCount());
//       assertEquals(true, jSSourceFile0.isExtern());
//       assertEquals("s", jSSourceFile0.getName());
//       assertEquals("s", jSSourceFile0.getOriginalPath());
//       assertEquals("s", jSSourceFile0.toString());
//       assertNotNull(result0);
//       
//       DefaultPassConfig defaultPassConfig0 = new DefaultPassConfig(compilerOptions0);
//       assertFalse(compilerOptions0.moveFunctionDeclarations);
//       assertFalse(compilerOptions0.inlineVariables);
//       assertFalse(compilerOptions0.collapseVariableDeclarations);
//       assertFalse(compilerOptions0.generatePseudoNames);
//       assertFalse(compilerOptions0.lineBreak);
//       assertFalse(compilerOptions0.gatherCssNames);
//       assertFalse(compilerOptions0.checkControlStructures);
//       assertFalse(compilerOptions0.inlineGetters);
//       assertFalse(compilerOptions0.closurePass);
//       assertFalse(compilerOptions0.checkSymbols);
//       assertFalse(compilerOptions0.aliasKeywords);
//       assertFalse(compilerOptions0.crossModuleCodeMotion);
//       assertFalse(compilerOptions0.recordFunctionInformation);
//       assertFalse(compilerOptions0.removeDeadCode);
//       assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
//       assertFalse(compilerOptions0.collapseAnonymousFunctions);
//       assertFalse(compilerOptions0.ambiguateProperties);
//       assertFalse(compilerOptions0.removeUnusedClassProperties);
//       assertFalse(compilerOptions0.optimizeCalls);
//       assertFalse(compilerOptions0.rewriteFunctionExpressions);
//       assertFalse(compilerOptions0.removeTryCatchFinally);
//       assertFalse(compilerOptions0.computeFunctionSideEffects);
//       assertFalse(compilerOptions0.disambiguateProperties);
//       assertFalse(compilerOptions0.foldConstants);
//       assertFalse(compilerOptions0.checkSuspiciousCode);
//       assertFalse(compilerOptions0.aliasExternals);
//       assertFalse(compilerOptions0.removeUnusedVars);
//       assertFalse(compilerOptions0.flowSensitiveInlineVariables);
//       assertFalse(compilerOptions0.crossModuleMethodMotion);
//       assertFalse(compilerOptions0.printInputDelimiter);
//       assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
//       assertFalse(compilerOptions0.jqueryPass);
//       assertFalse(compilerOptions0.inlineFunctions);
//       assertFalse(compilerOptions0.coalesceVariableNames);
//       assertFalse(compilerOptions0.exportTestFunctions);
//       assertFalse(compilerOptions0.markNoSideEffectCalls);
//       assertFalse(compilerOptions0.deadAssignmentElimination);
//       assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
//       assertFalse(compilerOptions0.generateExports);
//       assertFalse(compilerOptions0.ideMode);
//       assertFalse(compilerOptions0.optimizeReturns);
//       assertFalse(compilerOptions0.collapseProperties);
//       assertFalse(compilerOptions0.checkTypes);
//       assertFalse(compilerOptions0.smartNameRemoval);
//       assertFalse(compilerOptions0.optimizeArgumentsArray);
//       assertFalse(compilerOptions0.preferLineBreakAtEndOfFile);
//       assertFalse(compilerOptions0.aliasAllStrings);
//       assertFalse(compilerOptions0.markAsCompiled);
//       assertFalse(compilerOptions0.labelRenaming);
//       assertFalse(compilerOptions0.inlineConstantVars);
//       assertFalse(compilerOptions0.prettyPrint);
//       assertFalse(compilerOptions0.convertToDottedProperties);
//       assertFalse(compilerOptions0.optimizeParameters);
//       assertFalse(compilerOptions0.inlineLocalFunctions);
//       assertFalse(compilerOptions0.devirtualizePrototypeMethods);
//       assertFalse(compilerOptions0.removeUnusedLocalVars);
//       assertFalse(compilerOptions0.reserveRawExports);
//       assertEquals(CompilerOptions.TracerMode.OFF, compilerOptions0.getTracerMode());
//       assertNull(compilerOptions0.getLanguageOut());
//       assertEquals(false, compilerOptions0.assumeStrictThis());
//       assertEquals(false, compilerOptions0.assumeClosuresOnlyCaptureReferences());
//       assertEquals(false, compilerOptions0.isRemoveUnusedClassProperties());
//       assertEquals(false, compilerOptions0.isExternExportsEnabled());
//       assertEquals(false, compilerOptions0.getInferTypes());
//       assertEquals(CompilerOptions.TweakProcessing.OFF, compilerOptions0.getTweakProcessing());
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compilerOptions0.getLanguageIn());
//       assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
//       assertNotNull(defaultPassConfig0);
//       
//       TypeCheck typeCheck0 = defaultPassConfig0.makeTypeCheck(compiler0);
//       assertFalse(compilerOptions0.moveFunctionDeclarations);
//       assertFalse(compilerOptions0.inlineVariables);
//       assertFalse(compilerOptions0.collapseVariableDeclarations);
//       assertFalse(compilerOptions0.generatePseudoNames);
//       assertFalse(compilerOptions0.lineBreak);
//       assertFalse(compilerOptions0.gatherCssNames);
//       assertFalse(compilerOptions0.checkControlStructures);
//       assertFalse(compilerOptions0.inlineGetters);
//       assertFalse(compilerOptions0.closurePass);
//       assertFalse(compilerOptions0.checkSymbols);
//       assertFalse(compilerOptions0.aliasKeywords);
//       assertFalse(compilerOptions0.crossModuleCodeMotion);
//       assertFalse(compilerOptions0.recordFunctionInformation);
//       assertFalse(compilerOptions0.removeDeadCode);
//       assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
//       assertFalse(compilerOptions0.collapseAnonymousFunctions);
//       assertFalse(compilerOptions0.ambiguateProperties);
//       assertFalse(compilerOptions0.removeUnusedClassProperties);
//       assertFalse(compilerOptions0.optimizeCalls);
//       assertFalse(compilerOptions0.rewriteFunctionExpressions);
//       assertFalse(compilerOptions0.removeTryCatchFinally);
//       assertFalse(compilerOptions0.computeFunctionSideEffects);
//       assertFalse(compilerOptions0.disambiguateProperties);
//       assertFalse(compilerOptions0.foldConstants);
//       assertFalse(compilerOptions0.checkSuspiciousCode);
//       assertFalse(compilerOptions0.aliasExternals);
//       assertFalse(compilerOptions0.removeUnusedVars);
//       assertFalse(compilerOptions0.flowSensitiveInlineVariables);
//       assertFalse(compilerOptions0.crossModuleMethodMotion);
//       assertFalse(compilerOptions0.printInputDelimiter);
//       assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
//       assertFalse(compilerOptions0.jqueryPass);
//       assertFalse(compilerOptions0.inlineFunctions);
//       assertFalse(compilerOptions0.coalesceVariableNames);
//       assertFalse(compilerOptions0.exportTestFunctions);
//       assertFalse(compilerOptions0.markNoSideEffectCalls);
//       assertFalse(compilerOptions0.deadAssignmentElimination);
//       assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
//       assertFalse(compilerOptions0.generateExports);
//       assertFalse(compilerOptions0.ideMode);
//       assertFalse(compilerOptions0.optimizeReturns);
//       assertFalse(compilerOptions0.collapseProperties);
//       assertFalse(compilerOptions0.checkTypes);
//       assertFalse(compilerOptions0.smartNameRemoval);
//       assertFalse(compilerOptions0.optimizeArgumentsArray);
//       assertFalse(compilerOptions0.preferLineBreakAtEndOfFile);
//       assertFalse(compilerOptions0.aliasAllStrings);
//       assertFalse(compilerOptions0.markAsCompiled);
//       assertFalse(compilerOptions0.labelRenaming);
//       assertFalse(compilerOptions0.inlineConstantVars);
//       assertFalse(compilerOptions0.prettyPrint);
//       assertFalse(compilerOptions0.convertToDottedProperties);
//       assertFalse(compilerOptions0.optimizeParameters);
//       assertFalse(compilerOptions0.inlineLocalFunctions);
//       assertFalse(compilerOptions0.devirtualizePrototypeMethods);
//       assertFalse(compilerOptions0.removeUnusedLocalVars);
//       assertFalse(compilerOptions0.reserveRawExports);
//       assertEquals(CompilerOptions.TracerMode.OFF, compilerOptions0.getTracerMode());
//       assertNull(compilerOptions0.getLanguageOut());
//       assertEquals(false, compilerOptions0.assumeStrictThis());
//       assertEquals(false, compilerOptions0.assumeClosuresOnlyCaptureReferences());
//       assertEquals(false, compilerOptions0.isRemoveUnusedClassProperties());
//       assertEquals(false, compilerOptions0.isExternExportsEnabled());
//       assertEquals(false, compilerOptions0.getInferTypes());
//       assertEquals(CompilerOptions.TweakProcessing.OFF, compilerOptions0.getTweakProcessing());
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compilerOptions0.getLanguageIn());
//       assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
//       assertEquals(true, compiler0.hasErrors());
//       assertEquals(false, compiler0.acceptConstKeyword());
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
//       assertEquals(1, compiler0.getErrorCount());
//       assertEquals(0.0, compiler0.getProgress(), 0.01D);
//       assertEquals(false, compiler0.isTypeCheckingEnabled());
//       assertEquals(false, compiler0.isIdeMode());
//       assertEquals(0, compiler0.getWarningCount());
//       assertNotNull(typeCheck0);
//       
//       double double0 = typeCheck0.getTypedPercent();
//       assertFalse(compilerOptions0.moveFunctionDeclarations);
//       assertFalse(compilerOptions0.inlineVariables);
//       assertFalse(compilerOptions0.collapseVariableDeclarations);
//       assertFalse(compilerOptions0.generatePseudoNames);
//       assertFalse(compilerOptions0.lineBreak);
//       assertFalse(compilerOptions0.gatherCssNames);
//       assertFalse(compilerOptions0.checkControlStructures);
//       assertFalse(compilerOptions0.inlineGetters);
//       assertFalse(compilerOptions0.closurePass);
//       assertFalse(compilerOptions0.checkSymbols);
//       assertFalse(compilerOptions0.aliasKeywords);
//       assertFalse(compilerOptions0.crossModuleCodeMotion);
//       assertFalse(compilerOptions0.recordFunctionInformation);
//       assertFalse(compilerOptions0.removeDeadCode);
//       assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
//       assertFalse(compilerOptions0.collapseAnonymousFunctions);
//       assertFalse(compilerOptions0.ambiguateProperties);
//       assertFalse(compilerOptions0.removeUnusedClassProperties);
//       assertFalse(compilerOptions0.optimizeCalls);
//       assertFalse(compilerOptions0.rewriteFunctionExpressions);
//       assertFalse(compilerOptions0.removeTryCatchFinally);
//       assertFalse(compilerOptions0.computeFunctionSideEffects);
//       assertFalse(compilerOptions0.disambiguateProperties);
//       assertFalse(compilerOptions0.foldConstants);
//       assertFalse(compilerOptions0.checkSuspiciousCode);
//       assertFalse(compilerOptions0.aliasExternals);
//       assertFalse(compilerOptions0.removeUnusedVars);
//       assertFalse(compilerOptions0.flowSensitiveInlineVariables);
//       assertFalse(compilerOptions0.crossModuleMethodMotion);
//       assertFalse(compilerOptions0.printInputDelimiter);
//       assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
//       assertFalse(compilerOptions0.jqueryPass);
//       assertFalse(compilerOptions0.inlineFunctions);
//       assertFalse(compilerOptions0.coalesceVariableNames);
//       assertFalse(compilerOptions0.exportTestFunctions);
//       assertFalse(compilerOptions0.markNoSideEffectCalls);
//       assertFalse(compilerOptions0.deadAssignmentElimination);
//       assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
//       assertFalse(compilerOptions0.generateExports);
//       assertFalse(compilerOptions0.ideMode);
//       assertFalse(compilerOptions0.optimizeReturns);
//       assertFalse(compilerOptions0.collapseProperties);
//       assertFalse(compilerOptions0.checkTypes);
//       assertFalse(compilerOptions0.smartNameRemoval);
//       assertFalse(compilerOptions0.optimizeArgumentsArray);
//       assertFalse(compilerOptions0.preferLineBreakAtEndOfFile);
//       assertFalse(compilerOptions0.aliasAllStrings);
//       assertFalse(compilerOptions0.markAsCompiled);
//       assertFalse(compilerOptions0.labelRenaming);
//       assertFalse(compilerOptions0.inlineConstantVars);
//       assertFalse(compilerOptions0.prettyPrint);
//       assertFalse(compilerOptions0.convertToDottedProperties);
//       assertFalse(compilerOptions0.optimizeParameters);
//       assertFalse(compilerOptions0.inlineLocalFunctions);
//       assertFalse(compilerOptions0.devirtualizePrototypeMethods);
//       assertFalse(compilerOptions0.removeUnusedLocalVars);
//       assertFalse(compilerOptions0.reserveRawExports);
//       assertEquals(CompilerOptions.TracerMode.OFF, compilerOptions0.getTracerMode());
//       assertNull(compilerOptions0.getLanguageOut());
//       assertEquals(false, compilerOptions0.assumeStrictThis());
//       assertEquals(false, compilerOptions0.assumeClosuresOnlyCaptureReferences());
//       assertEquals(false, compilerOptions0.isRemoveUnusedClassProperties());
//       assertEquals(false, compilerOptions0.isExternExportsEnabled());
//       assertEquals(false, compilerOptions0.getInferTypes());
//       assertEquals(CompilerOptions.TweakProcessing.OFF, compilerOptions0.getTweakProcessing());
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compilerOptions0.getLanguageIn());
//       assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
//       assertEquals(true, compiler0.hasErrors());
//       assertEquals(false, compiler0.acceptConstKeyword());
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
//       assertEquals(1, compiler0.getErrorCount());
//       assertEquals(0.0, compiler0.getProgress(), 0.01D);
//       assertEquals(false, compiler0.isTypeCheckingEnabled());
//       assertEquals(false, compiler0.isIdeMode());
//       assertEquals(0, compiler0.getWarningCount());
//       assertEquals(0.0, double0, 0.01D);
//       
//       int int0 = 2246;
//       Node node0 = Node.newNumber(double0, int0, int0);
//       assertFalse(compilerOptions0.moveFunctionDeclarations);
//       assertFalse(compilerOptions0.inlineVariables);
//       assertFalse(compilerOptions0.collapseVariableDeclarations);
//       assertFalse(compilerOptions0.generatePseudoNames);
//       assertFalse(compilerOptions0.lineBreak);
//       assertFalse(compilerOptions0.gatherCssNames);
//       assertFalse(compilerOptions0.checkControlStructures);
//       assertFalse(compilerOptions0.inlineGetters);
//       assertFalse(compilerOptions0.closurePass);
//       assertFalse(compilerOptions0.checkSymbols);
//       assertFalse(compilerOptions0.aliasKeywords);
//       assertFalse(compilerOptions0.crossModuleCodeMotion);
//       assertFalse(compilerOptions0.recordFunctionInformation);
//       assertFalse(compilerOptions0.removeDeadCode);
//       assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
//       assertFalse(compilerOptions0.collapseAnonymousFunctions);
//       assertFalse(compilerOptions0.ambiguateProperties);
//       assertFalse(compilerOptions0.removeUnusedClassProperties);
//       assertFalse(compilerOptions0.optimizeCalls);
//       assertFalse(compilerOptions0.rewriteFunctionExpressions);
//       assertFalse(compilerOptions0.removeTryCatchFinally);
//       assertFalse(compilerOptions0.computeFunctionSideEffects);
//       assertFalse(compilerOptions0.disambiguateProperties);
//       assertFalse(compilerOptions0.foldConstants);
//       assertFalse(compilerOptions0.checkSuspiciousCode);
//       assertFalse(compilerOptions0.aliasExternals);
//       assertFalse(compilerOptions0.removeUnusedVars);
//       assertFalse(compilerOptions0.flowSensitiveInlineVariables);
//       assertFalse(compilerOptions0.crossModuleMethodMotion);
//       assertFalse(compilerOptions0.printInputDelimiter);
//       assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
//       assertFalse(compilerOptions0.jqueryPass);
//       assertFalse(compilerOptions0.inlineFunctions);
//       assertFalse(compilerOptions0.coalesceVariableNames);
//       assertFalse(compilerOptions0.exportTestFunctions);
//       assertFalse(compilerOptions0.markNoSideEffectCalls);
//       assertFalse(compilerOptions0.deadAssignmentElimination);
//       assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
//       assertFalse(compilerOptions0.generateExports);
//       assertFalse(compilerOptions0.ideMode);
//       assertFalse(compilerOptions0.optimizeReturns);
//       assertFalse(compilerOptions0.collapseProperties);
//       assertFalse(compilerOptions0.checkTypes);
//       assertFalse(compilerOptions0.smartNameRemoval);
//       assertFalse(compilerOptions0.optimizeArgumentsArray);
//       assertFalse(compilerOptions0.preferLineBreakAtEndOfFile);
//       assertFalse(compilerOptions0.aliasAllStrings);
//       assertFalse(compilerOptions0.markAsCompiled);
//       assertFalse(compilerOptions0.labelRenaming);
//       assertFalse(compilerOptions0.inlineConstantVars);
//       assertFalse(compilerOptions0.prettyPrint);
//       assertFalse(compilerOptions0.convertToDottedProperties);
//       assertFalse(compilerOptions0.optimizeParameters);
//       assertFalse(compilerOptions0.inlineLocalFunctions);
//       assertFalse(compilerOptions0.devirtualizePrototypeMethods);
//       assertFalse(compilerOptions0.removeUnusedLocalVars);
//       assertFalse(compilerOptions0.reserveRawExports);
//       assertEquals(false, node0.isName());
//       assertEquals(false, node0.isBreak());
//       assertEquals(false, node0.hasChildren());
//       assertEquals(false, node0.isThis());
//       assertEquals(false, node0.isTypeOf());
//       assertEquals(false, node0.isContinue());
//       assertEquals(false, node0.isFromExterns());
//       assertEquals(false, node0.isAssignAdd());
//       assertEquals(true, node0.isNumber());
//       assertEquals(false, node0.isExprResult());
//       assertEquals(false, node0.isObjectLit());
//       assertEquals(false, node0.isAssign());
//       assertEquals(false, node0.hasOneChild());
//       assertEquals(false, node0.isDelProp());
//       assertEquals(false, node0.isIn());
//       assertEquals(false, node0.isNoSideEffectsCall());
//       assertEquals(false, node0.isOnlyModifiesThisCall());
//       assertEquals(false, node0.isNull());
//       assertEquals(false, node0.isRegExp());
//       assertEquals(false, node0.isIf());
//       assertEquals(false, node0.isGetElem());
//       assertEquals(false, node0.isFor());
//       assertEquals(false, node0.isStringKey());
//       assertEquals(false, node0.isEmpty());
//       assertEquals(false, node0.isDo());
//       assertEquals(false, node0.isCase());
//       assertEquals(false, node0.wasEmptyNode());
//       assertEquals(false, node0.isVarArgs());
//       assertEquals(false, node0.isGetterDef());
//       assertEquals(false, node0.isOr());
//       assertEquals(false, node0.isSyntheticBlock());
//       assertEquals(false, node0.isThrow());
//       assertEquals(false, node0.isScript());
//       assertEquals(0, node0.getChildCount());
//       assertEquals(false, node0.isInstanceOf());
//       assertEquals(false, node0.isFunction());
//       assertEquals(false, node0.isGetProp());
//       assertEquals(false, node0.isInc());
//       assertEquals(false, node0.isSwitch());
//       assertEquals(false, node0.isHook());
//       assertEquals(false, node0.isVar());
//       assertEquals(false, node0.isNew());
//       assertEquals(false, node0.isDebugger());
//       assertEquals(false, node0.isReturn());
//       assertEquals(39, node0.getType());
//       assertEquals(false, node0.isString());
//       assertEquals(2246, node0.getCharno());
//       assertEquals(false, node0.isBlock());
//       assertEquals(2246, node0.getLineno());
//       assertEquals(false, node0.isWith());
//       assertEquals(false, node0.isTry());
//       assertEquals(false, node0.isArrayLit());
//       assertEquals(false, node0.isDec());
//       assertEquals(false, node0.isAdd());
//       assertEquals(false, node0.isVoid());
//       assertEquals(false, node0.isDefaultCase());
//       assertEquals(false, node0.isComma());
//       assertEquals(false, node0.isOptionalArg());
//       assertEquals(false, node0.isLabel());
//       assertEquals(false, node0.isLabelName());
//       assertEquals(false, node0.isCall());
//       assertEquals(false, node0.isTrue());
//       assertEquals(false, node0.isNE());
//       assertEquals(9201862, node0.getSourcePosition());
//       assertEquals(false, node0.isFalse());
//       assertEquals(false, node0.isParamList());
//       assertEquals(0, node0.getSideEffectFlags());
//       assertEquals(0, node0.getLength());
//       assertEquals(false, node0.isQuotedString());
//       assertEquals(false, node0.isNot());
//       assertEquals(false, node0.isLocalResultCall());
//       assertEquals(false, node0.isCatch());
//       assertNull(node0.getSourceFileName());
//       assertEquals(false, node0.hasMoreThanOneChild());
//       assertEquals(false, node0.isSetterDef());
//       assertEquals(false, node0.isAnd());
//       assertEquals(false, node0.isWhile());
//       assertEquals(CompilerOptions.TracerMode.OFF, compilerOptions0.getTracerMode());
//       assertNull(compilerOptions0.getLanguageOut());
//       assertEquals(false, compilerOptions0.assumeStrictThis());
//       assertEquals(false, compilerOptions0.assumeClosuresOnlyCaptureReferences());
//       assertEquals(false, compilerOptions0.isRemoveUnusedClassProperties());
//       assertEquals(false, compilerOptions0.isExternExportsEnabled());
//       assertEquals(false, compilerOptions0.getInferTypes());
//       assertEquals(CompilerOptions.TweakProcessing.OFF, compilerOptions0.getTweakProcessing());
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compilerOptions0.getLanguageIn());
//       assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
//       assertEquals(true, compiler0.hasErrors());
//       assertEquals(false, compiler0.acceptConstKeyword());
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
//       assertEquals(1, compiler0.getErrorCount());
//       assertEquals(0.0, compiler0.getProgress(), 0.01D);
//       assertEquals(false, compiler0.isTypeCheckingEnabled());
//       assertEquals(false, compiler0.isIdeMode());
//       assertEquals(0, compiler0.getWarningCount());
//       assertNotNull(node0);
//       
//       Node node1 = Normalize.parseAndNormalizeSyntheticCode(compiler0, string0, string0);
//       assertNotSame(node1, node0);
//       assertFalse(node1.equals((Object)node0));
//       assertEquals(true, compiler0.hasErrors());
//       assertEquals(false, compiler0.acceptConstKeyword());
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
//       assertEquals(1, compiler0.getErrorCount());
//       assertEquals(0.0, compiler0.getProgress(), 0.01D);
//       assertEquals(false, compiler0.isTypeCheckingEnabled());
//       assertEquals(false, compiler0.isIdeMode());
//       assertEquals(0, compiler0.getWarningCount());
//       assertEquals(false, node1.isNew());
//       assertEquals(false, node1.isTry());
//       assertEquals(false, node1.isThrow());
//       assertEquals(false, node1.isAdd());
//       assertEquals(-1, node1.getSourcePosition());
//       assertEquals(false, node1.isReturn());
//       assertEquals(false, node1.isParamList());
//       assertEquals(false, node1.isFromExterns());
//       assertEquals(false, node1.isNot());
//       assertEquals(false, node1.isSwitch());
//       assertEquals(false, node1.isDo());
//       assertEquals(0, node1.getSideEffectFlags());
//       assertEquals(false, node1.isLabel());
//       assertEquals(-1, node1.getCharno());
//       assertEquals(" [synthetic:1] ", node1.getSourceFileName());
//       assertEquals(false, node1.isAnd());
//       assertEquals(false, node1.isLocalResultCall());
//       assertEquals(false, node1.isOnlyModifiesThisCall());
//       assertEquals(false, node1.isFalse());
//       assertEquals(false, node1.isStringKey());
//       assertEquals(false, node1.wasEmptyNode());
//       assertEquals(false, node1.isTypeOf());
//       assertEquals(false, node1.hasMoreThanOneChild());
//       assertEquals(false, node1.isGetProp());
//       assertEquals(false, node1.isAssign());
//       assertEquals(false, node1.isCall());
//       assertEquals(false, node1.isQuotedString());
//       assertEquals(false, node1.isNE());
//       assertEquals(false, node1.isHook());
//       assertEquals(false, node1.hasChildren());
//       assertEquals(false, node1.isString());
//       assertEquals(false, node1.isWhile());
//       assertEquals(false, node1.isThis());
//       assertEquals(false, node1.hasOneChild());
//       assertEquals(false, node1.isSyntheticBlock());
//       assertEquals(false, node1.isBlock());
//       assertEquals(false, node1.isNumber());
//       assertEquals(false, node1.isRegExp());
//       assertEquals(false, node1.isDec());
//       assertEquals(false, node1.isExprResult());
//       assertEquals(false, node1.isDefaultCase());
//       assertEquals(false, node1.isComma());
//       assertEquals(false, node1.isIf());
//       assertEquals(false, node1.isOr());
//       assertEquals(false, node1.isInc());
//       assertEquals(false, node1.isFunction());
//       assertEquals(false, node1.isVar());
//       assertEquals(false, node1.isIn());
//       assertEquals(false, node1.isDebugger());
//       assertEquals(false, node1.isArrayLit());
//       assertEquals(false, node1.isCatch());
//       assertEquals(0, node1.getChildCount());
//       assertEquals(false, node1.isContinue());
//       assertEquals(false, node1.isFor());
//       assertEquals(0, node1.getLength());
//       assertEquals(false, node1.isBreak());
//       assertEquals(false, node1.isDelProp());
//       assertEquals(true, node1.isScript());
//       assertEquals(false, node1.isObjectLit());
//       assertEquals(false, node1.isTrue());
//       assertEquals(false, node1.isWith());
//       assertEquals(132, node1.getType());
//       assertEquals(false, node1.isGetElem());
//       assertEquals(false, node1.isCase());
//       assertEquals(false, node1.isNoSideEffectsCall());
//       assertEquals(false, node1.isSetterDef());
//       assertEquals(false, node1.isInstanceOf());
//       assertEquals(-1, node1.getLineno());
//       assertEquals(false, node1.isLabelName());
//       assertEquals(false, node1.isVoid());
//       assertEquals(false, node1.isOptionalArg());
//       assertEquals(false, node1.isAssignAdd());
//       assertEquals(false, node1.isEmpty());
//       assertEquals(false, node1.isName());
//       assertEquals(false, node1.isNull());
//       assertEquals(false, node1.isVarArgs());
//       assertEquals(false, node1.isGetterDef());
//       assertNotNull(node1);
//       
//       node1.addChildToFront(node0);
//       assertNotSame(node0, node1);
//       assertNotSame(node1, node0);
//       assertFalse(node0.equals((Object)node1));
//       assertFalse(node1.equals((Object)node0));
//       assertFalse(compilerOptions0.moveFunctionDeclarations);
//       assertFalse(compilerOptions0.inlineVariables);
//       assertFalse(compilerOptions0.collapseVariableDeclarations);
//       assertFalse(compilerOptions0.generatePseudoNames);
//       assertFalse(compilerOptions0.lineBreak);
//       assertFalse(compilerOptions0.gatherCssNames);
//       assertFalse(compilerOptions0.checkControlStructures);
//       assertFalse(compilerOptions0.inlineGetters);
//       assertFalse(compilerOptions0.closurePass);
//       assertFalse(compilerOptions0.checkSymbols);
//       assertFalse(compilerOptions0.aliasKeywords);
//       assertFalse(compilerOptions0.crossModuleCodeMotion);
//       assertFalse(compilerOptions0.recordFunctionInformation);
//       assertFalse(compilerOptions0.removeDeadCode);
//       assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
//       assertFalse(compilerOptions0.collapseAnonymousFunctions);
//       assertFalse(compilerOptions0.ambiguateProperties);
//       assertFalse(compilerOptions0.removeUnusedClassProperties);
//       assertFalse(compilerOptions0.optimizeCalls);
//       assertFalse(compilerOptions0.rewriteFunctionExpressions);
//       assertFalse(compilerOptions0.removeTryCatchFinally);
//       assertFalse(compilerOptions0.computeFunctionSideEffects);
//       assertFalse(compilerOptions0.disambiguateProperties);
//       assertFalse(compilerOptions0.foldConstants);
//       assertFalse(compilerOptions0.checkSuspiciousCode);
//       assertFalse(compilerOptions0.aliasExternals);
//       assertFalse(compilerOptions0.removeUnusedVars);
//       assertFalse(compilerOptions0.flowSensitiveInlineVariables);
//       assertFalse(compilerOptions0.crossModuleMethodMotion);
//       assertFalse(compilerOptions0.printInputDelimiter);
//       assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
//       assertFalse(compilerOptions0.jqueryPass);
//       assertFalse(compilerOptions0.inlineFunctions);
//       assertFalse(compilerOptions0.coalesceVariableNames);
//       assertFalse(compilerOptions0.exportTestFunctions);
//       assertFalse(compilerOptions0.markNoSideEffectCalls);
//       assertFalse(compilerOptions0.deadAssignmentElimination);
//       assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
//       assertFalse(compilerOptions0.generateExports);
//       assertFalse(compilerOptions0.ideMode);
//       assertFalse(compilerOptions0.optimizeReturns);
//       assertFalse(compilerOptions0.collapseProperties);
//       assertFalse(compilerOptions0.checkTypes);
//       assertFalse(compilerOptions0.smartNameRemoval);
//       assertFalse(compilerOptions0.optimizeArgumentsArray);
//       assertFalse(compilerOptions0.preferLineBreakAtEndOfFile);
//       assertFalse(compilerOptions0.aliasAllStrings);
//       assertFalse(compilerOptions0.markAsCompiled);
//       assertFalse(compilerOptions0.labelRenaming);
//       assertFalse(compilerOptions0.inlineConstantVars);
//       assertFalse(compilerOptions0.prettyPrint);
//       assertFalse(compilerOptions0.convertToDottedProperties);
//       assertFalse(compilerOptions0.optimizeParameters);
//       assertFalse(compilerOptions0.inlineLocalFunctions);
//       assertFalse(compilerOptions0.devirtualizePrototypeMethods);
//       assertFalse(compilerOptions0.removeUnusedLocalVars);
//       assertFalse(compilerOptions0.reserveRawExports);
//       assertEquals(false, node0.isName());
//       assertEquals(false, node0.isBreak());
//       assertEquals(false, node0.hasChildren());
//       assertEquals(false, node0.isThis());
//       assertEquals(false, node0.isTypeOf());
//       assertEquals(false, node0.isContinue());
//       assertEquals(false, node0.isFromExterns());
//       assertEquals(false, node0.isAssignAdd());
//       assertEquals(true, node0.isNumber());
//       assertEquals(false, node0.isExprResult());
//       assertEquals(false, node0.isObjectLit());
//       assertEquals(false, node0.isAssign());
//       assertEquals(false, node0.hasOneChild());
//       assertEquals(false, node0.isDelProp());
//       assertEquals(false, node0.isIn());
//       assertEquals(false, node0.isNoSideEffectsCall());
//       assertEquals(false, node0.isOnlyModifiesThisCall());
//       assertEquals(false, node0.isNull());
//       assertEquals(false, node0.isRegExp());
//       assertEquals(false, node0.isIf());
//       assertEquals(false, node0.isGetElem());
//       assertEquals(false, node0.isFor());
//       assertEquals(false, node0.isStringKey());
//       assertEquals(false, node0.isEmpty());
//       assertEquals(false, node0.isDo());
//       assertEquals(false, node0.isCase());
//       assertEquals(false, node0.wasEmptyNode());
//       assertEquals(false, node0.isVarArgs());
//       assertEquals(false, node0.isGetterDef());
//       assertEquals(false, node0.isOr());
//       assertEquals(false, node0.isSyntheticBlock());
//       assertEquals(false, node0.isThrow());
//       assertEquals(false, node0.isScript());
//       assertEquals(0, node0.getChildCount());
//       assertEquals(false, node0.isInstanceOf());
//       assertEquals(false, node0.isFunction());
//       assertEquals(false, node0.isGetProp());
//       assertEquals(false, node0.isInc());
//       assertEquals(false, node0.isSwitch());
//       assertEquals(false, node0.isHook());
//       assertEquals(false, node0.isVar());
//       assertEquals(false, node0.isNew());
//       assertEquals(false, node0.isDebugger());
//       assertEquals(false, node0.isReturn());
//       assertEquals(39, node0.getType());
//       assertEquals(false, node0.isString());
//       assertEquals(2246, node0.getCharno());
//       assertEquals(false, node0.isBlock());
//       assertEquals(2246, node0.getLineno());
//       assertEquals(false, node0.isWith());
//       assertEquals(false, node0.isTry());
//       assertEquals(false, node0.isArrayLit());
//       assertEquals(false, node0.isDec());
//       assertEquals(false, node0.isAdd());
//       assertEquals(false, node0.isVoid());
//       assertEquals(false, node0.isDefaultCase());
//       assertEquals(false, node0.isComma());
//       assertEquals(false, node0.isOptionalArg());
//       assertEquals(false, node0.isLabel());
//       assertEquals(false, node0.isLabelName());
//       assertEquals(false, node0.isCall());
//       assertEquals(false, node0.isTrue());
//       assertEquals(false, node0.isNE());
//       assertEquals(9201862, node0.getSourcePosition());
//       assertEquals(false, node0.isFalse());
//       assertEquals(false, node0.isParamList());
//       assertEquals(0, node0.getSideEffectFlags());
//       assertEquals(0, node0.getLength());
//       assertEquals(false, node0.isQuotedString());
//       assertEquals(false, node0.isNot());
//       assertEquals(false, node0.isLocalResultCall());
//       assertEquals(false, node0.isCatch());
//       assertNull(node0.getSourceFileName());
//       assertEquals(false, node0.hasMoreThanOneChild());
//       assertEquals(false, node0.isSetterDef());
//       assertEquals(false, node0.isAnd());
//       assertEquals(false, node0.isWhile());
//       assertEquals(CompilerOptions.TracerMode.OFF, compilerOptions0.getTracerMode());
//       assertNull(compilerOptions0.getLanguageOut());
//       assertEquals(false, compilerOptions0.assumeStrictThis());
//       assertEquals(false, compilerOptions0.assumeClosuresOnlyCaptureReferences());
//       assertEquals(false, compilerOptions0.isRemoveUnusedClassProperties());
//       assertEquals(false, compilerOptions0.isExternExportsEnabled());
//       assertEquals(false, compilerOptions0.getInferTypes());
//       assertEquals(CompilerOptions.TweakProcessing.OFF, compilerOptions0.getTweakProcessing());
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compilerOptions0.getLanguageIn());
//       assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
//       assertEquals(true, compiler0.hasErrors());
//       assertEquals(false, compiler0.acceptConstKeyword());
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
//       assertEquals(1, compiler0.getErrorCount());
//       assertEquals(0.0, compiler0.getProgress(), 0.01D);
//       assertEquals(false, compiler0.isTypeCheckingEnabled());
//       assertEquals(false, compiler0.isIdeMode());
//       assertEquals(0, compiler0.getWarningCount());
//       assertEquals(false, node1.isNew());
//       assertEquals(false, node1.isTry());
//       assertEquals(false, node1.isThrow());
//       assertEquals(false, node1.isAdd());
//       assertEquals(-1, node1.getSourcePosition());
//       assertEquals(false, node1.isReturn());
//       assertEquals(false, node1.isParamList());
//       assertEquals(false, node1.isFromExterns());
//       assertEquals(false, node1.isNot());
//       assertEquals(false, node1.isSwitch());
//       assertEquals(false, node1.isDo());
//       assertEquals(0, node1.getSideEffectFlags());
//       assertEquals(true, node1.hasChildren());
//       assertEquals(false, node1.isLabel());
//       assertEquals(-1, node1.getCharno());
//       assertEquals(" [synthetic:1] ", node1.getSourceFileName());
//       assertEquals(false, node1.isAnd());
//       assertEquals(false, node1.isLocalResultCall());
//       assertEquals(false, node1.isOnlyModifiesThisCall());
//       assertEquals(false, node1.isFalse());
//       assertEquals(false, node1.isStringKey());
//       assertEquals(false, node1.wasEmptyNode());
//       assertEquals(false, node1.isTypeOf());
//       assertEquals(false, node1.hasMoreThanOneChild());
//       assertEquals(false, node1.isGetProp());
//       assertEquals(false, node1.isAssign());
//       assertEquals(false, node1.isCall());
//       assertEquals(false, node1.isQuotedString());
//       assertEquals(false, node1.isNE());
//       assertEquals(false, node1.isHook());
//       assertEquals(false, node1.isString());
//       assertEquals(false, node1.isWhile());
//       assertEquals(1, node1.getChildCount());
//       assertEquals(false, node1.isThis());
//       assertEquals(false, node1.isSyntheticBlock());
//       assertEquals(false, node1.isBlock());
//       assertEquals(false, node1.isNumber());
//       assertEquals(false, node1.isRegExp());
//       assertEquals(false, node1.isDec());
//       assertEquals(false, node1.isExprResult());
//       assertEquals(false, node1.isDefaultCase());
//       assertEquals(false, node1.isComma());
//       assertEquals(true, node1.hasOneChild());
//       assertEquals(false, node1.isIf());
//       assertEquals(false, node1.isOr());
//       assertEquals(false, node1.isInc());
//       assertEquals(false, node1.isFunction());
//       assertEquals(false, node1.isVar());
//       assertEquals(false, node1.isIn());
//       assertEquals(false, node1.isDebugger());
//       assertEquals(false, node1.isArrayLit());
//       assertEquals(false, node1.isCatch());
//       assertEquals(false, node1.isContinue());
//       assertEquals(false, node1.isFor());
//       assertEquals(0, node1.getLength());
//       assertEquals(false, node1.isBreak());
//       assertEquals(false, node1.isDelProp());
//       assertEquals(true, node1.isScript());
//       assertEquals(false, node1.isObjectLit());
//       assertEquals(false, node1.isTrue());
//       assertEquals(false, node1.isWith());
//       assertEquals(132, node1.getType());
//       assertEquals(false, node1.isGetElem());
//       assertEquals(false, node1.isCase());
//       assertEquals(false, node1.isNoSideEffectsCall());
//       assertEquals(false, node1.isSetterDef());
//       assertEquals(false, node1.isInstanceOf());
//       assertEquals(-1, node1.getLineno());
//       assertEquals(false, node1.isLabelName());
//       assertEquals(false, node1.isVoid());
//       assertEquals(false, node1.isOptionalArg());
//       assertEquals(false, node1.isAssignAdd());
//       assertEquals(false, node1.isEmpty());
//       assertEquals(false, node1.isName());
//       assertEquals(false, node1.isNull());
//       assertEquals(false, node1.isVarArgs());
//       assertEquals(false, node1.isGetterDef());
//       
//       Node node2 = new Node(int0, node1, node1, int0, int0);
//       assertNotSame(node2, node0);
//       assertNotSame(node2, node1);
//       assertNotSame(node1, node0);
//       assertNotSame(node1, node2);
//       assertFalse(node2.equals((Object)node0));
//       assertFalse(node2.equals((Object)node1));
//       assertFalse(node1.equals((Object)node0));
//       assertFalse(node1.equals((Object)node2));
//       assertEquals(false, node2.wasEmptyNode());
//       assertEquals(false, node2.isParamList());
//       assertEquals(false, node2.isVarArgs());
//       assertEquals(false, node2.isFalse());
//       assertEquals(9201862, node2.getSourcePosition());
//       assertEquals(false, node2.isOptionalArg());
//       assertEquals(false, node2.isArrayLit());
//       assertEquals(false, node2.isBlock());
//       assertEquals(false, node2.isExprResult());
//       assertEquals(false, node2.isSwitch());
//       assertEquals(false, node2.isDelProp());
//       assertEquals(false, node2.isLabel());
//       assertEquals(false, node2.isCatch());
//       assertEquals(false, node2.isWhile());
//       assertEquals(false, node2.isInstanceOf());
//       assertEquals(false, node2.isDo());
//       assertEquals(false, node2.isAnd());
//       assertEquals(false, node2.isCase());
//       assertEquals(false, node2.isGetterDef());
//       assertEquals(false, node2.hasMoreThanOneChild());
//       assertEquals(false, node2.isSyntheticBlock());
//       assertEquals(false, node2.isName());
//       assertEquals(false, node2.isDefaultCase());
//       assertEquals(false, node2.isNot());
//       assertEquals(1, node2.getChildCount());
//       assertEquals(false, node2.isVoid());
//       assertEquals(false, node2.isString());
//       assertEquals(false, node2.isScript());
//       assertEquals(0, node2.getLength());
//       assertEquals(false, node2.isRegExp());
//       assertEquals(false, node2.isWith());
//       assertEquals(2246, node2.getCharno());
//       assertEquals(false, node2.isObjectLit());
//       assertEquals(false, node2.isOr());
//       assertEquals(false, node2.isLabelName());
//       assertEquals(false, node2.isBreak());
//       assertEquals(false, node2.isAssignAdd());
//       assertEquals(false, node2.isGetElem());
//       assertEquals(false, node2.isNE());
//       assertEquals(false, node2.isNew());
//       assertNull(node2.getSourceFileName());
//       assertEquals(false, node2.isReturn());
//       assertEquals(false, node2.isAdd());
//       assertEquals(false, node2.isNoSideEffectsCall());
//       assertEquals(false, node2.isFor());
//       assertEquals(false, node2.isCall());
//       assertEquals(false, node2.isStringKey());
//       assertEquals(false, node2.isSetterDef());
//       assertEquals(true, node2.hasOneChild());
//       assertEquals(false, node2.isEmpty());
//       assertEquals(false, node2.isTrue());
//       assertEquals(false, node2.isOnlyModifiesThisCall());
//       assertEquals(false, node2.isInc());
//       assertEquals(false, node2.isLocalResultCall());
//       assertEquals(false, node2.isThis());
//       assertEquals(false, node2.isTypeOf());
//       assertEquals(0, node2.getSideEffectFlags());
//       assertEquals(false, node2.isIn());
//       assertEquals(false, node2.isContinue());
//       assertEquals(false, node2.isDebugger());
//       assertEquals(false, node2.isVar());
//       assertEquals(2246, node2.getLineno());
//       assertEquals(false, node2.isNull());
//       assertEquals(false, node2.isThrow());
//       assertEquals(false, node2.isIf());
//       assertEquals(true, node2.hasChildren());
//       assertEquals(false, node2.isFromExterns());
//       assertEquals(false, node2.isGetProp());
//       assertEquals(false, node2.isComma());
//       assertEquals(false, node2.isFunction());
//       assertEquals(2246, node2.getType());
//       assertEquals(false, node2.isNumber());
//       assertEquals(false, node2.isHook());
//       assertEquals(false, node2.isDec());
//       assertEquals(false, node2.isQuotedString());
//       assertEquals(false, node2.isAssign());
//       assertEquals(false, node2.isTry());
//       assertEquals(true, compiler0.hasErrors());
//       assertEquals(false, compiler0.acceptConstKeyword());
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
//       assertEquals(1, compiler0.getErrorCount());
//       assertEquals(0.0, compiler0.getProgress(), 0.01D);
//       assertEquals(false, compiler0.isTypeCheckingEnabled());
//       assertEquals(false, compiler0.isIdeMode());
//       assertEquals(0, compiler0.getWarningCount());
//       assertEquals(false, node1.isNew());
//       assertEquals(false, node1.isTry());
//       assertEquals(false, node1.isThrow());
//       assertEquals(false, node1.isAdd());
//       assertEquals(-1, node1.getSourcePosition());
//       assertEquals(false, node1.isReturn());
//       assertEquals(false, node1.isParamList());
//       assertEquals(false, node1.isFromExterns());
//       assertEquals(false, node1.isNot());
//       assertEquals(false, node1.isSwitch());
//       assertEquals(false, node1.isDo());
//       assertEquals(0, node1.getSideEffectFlags());
//       assertEquals(true, node1.hasChildren());
//       assertEquals(false, node1.isLabel());
//       assertEquals(-1, node1.getCharno());
//       assertEquals(" [synthetic:1] ", node1.getSourceFileName());
//       assertEquals(false, node1.isAnd());
//       assertEquals(false, node1.isLocalResultCall());
//       assertEquals(false, node1.isOnlyModifiesThisCall());
//       assertEquals(false, node1.isFalse());
//       assertEquals(false, node1.isStringKey());
//       assertEquals(false, node1.wasEmptyNode());
//       assertEquals(false, node1.isTypeOf());
//       assertEquals(false, node1.hasMoreThanOneChild());
//       assertEquals(false, node1.isGetProp());
//       assertEquals(false, node1.isAssign());
//       assertEquals(false, node1.isCall());
//       assertEquals(false, node1.isQuotedString());
//       assertEquals(false, node1.isNE());
//       assertEquals(false, node1.isHook());
//       assertEquals(false, node1.isString());
//       assertEquals(false, node1.isWhile());
//       assertEquals(1, node1.getChildCount());
//       assertEquals(false, node1.isThis());
//       assertEquals(false, node1.isSyntheticBlock());
//       assertEquals(false, node1.isBlock());
//       assertEquals(false, node1.isNumber());
//       assertEquals(false, node1.isRegExp());
//       assertEquals(false, node1.isDec());
//       assertEquals(false, node1.isExprResult());
//       assertEquals(false, node1.isDefaultCase());
//       assertEquals(false, node1.isComma());
//       assertEquals(true, node1.hasOneChild());
//       assertEquals(false, node1.isIf());
//       assertEquals(false, node1.isOr());
//       assertEquals(false, node1.isInc());
//       assertEquals(false, node1.isFunction());
//       assertEquals(false, node1.isVar());
//       assertEquals(false, node1.isIn());
//       assertEquals(false, node1.isDebugger());
//       assertEquals(false, node1.isArrayLit());
//       assertEquals(false, node1.isCatch());
//       assertEquals(false, node1.isContinue());
//       assertEquals(false, node1.isFor());
//       assertEquals(0, node1.getLength());
//       assertEquals(false, node1.isBreak());
//       assertEquals(false, node1.isDelProp());
//       assertEquals(true, node1.isScript());
//       assertEquals(false, node1.isObjectLit());
//       assertEquals(false, node1.isTrue());
//       assertEquals(false, node1.isWith());
//       assertEquals(132, node1.getType());
//       assertEquals(false, node1.isGetElem());
//       assertEquals(false, node1.isCase());
//       assertEquals(false, node1.isNoSideEffectsCall());
//       assertEquals(false, node1.isSetterDef());
//       assertEquals(false, node1.isInstanceOf());
//       assertEquals(-1, node1.getLineno());
//       assertEquals(false, node1.isLabelName());
//       assertEquals(false, node1.isVoid());
//       assertEquals(false, node1.isOptionalArg());
//       assertEquals(false, node1.isAssignAdd());
//       assertEquals(false, node1.isEmpty());
//       assertEquals(false, node1.isName());
//       assertEquals(false, node1.isNull());
//       assertEquals(false, node1.isVarArgs());
//       assertEquals(false, node1.isGetterDef());
//       assertNotNull(node2);
//       
//       Scope scope0 = typeCheck0.processForTesting(node0, node0);
//       assertNotSame(node0, node2);
//       assertNotSame(node0, node1);
//       assertFalse(node0.equals((Object)node2));
//       assertFalse(node0.equals((Object)node1));
//       assertFalse(compilerOptions0.moveFunctionDeclarations);
//       assertFalse(compilerOptions0.inlineVariables);
//       assertFalse(compilerOptions0.collapseVariableDeclarations);
//       assertFalse(compilerOptions0.generatePseudoNames);
//       assertFalse(compilerOptions0.lineBreak);
//       assertFalse(compilerOptions0.gatherCssNames);
//       assertFalse(compilerOptions0.checkControlStructures);
//       assertFalse(compilerOptions0.inlineGetters);
//       assertFalse(compilerOptions0.closurePass);
//       assertFalse(compilerOptions0.checkSymbols);
//       assertFalse(compilerOptions0.aliasKeywords);
//       assertFalse(compilerOptions0.crossModuleCodeMotion);
//       assertFalse(compilerOptions0.recordFunctionInformation);
//       assertFalse(compilerOptions0.removeDeadCode);
//       assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
//       assertFalse(compilerOptions0.collapseAnonymousFunctions);
//       assertFalse(compilerOptions0.ambiguateProperties);
//       assertFalse(compilerOptions0.removeUnusedClassProperties);
//       assertFalse(compilerOptions0.optimizeCalls);
//       assertFalse(compilerOptions0.rewriteFunctionExpressions);
//       assertFalse(compilerOptions0.removeTryCatchFinally);
//       assertFalse(compilerOptions0.computeFunctionSideEffects);
//       assertFalse(compilerOptions0.disambiguateProperties);
//       assertFalse(compilerOptions0.foldConstants);
//       assertFalse(compilerOptions0.checkSuspiciousCode);
//       assertFalse(compilerOptions0.aliasExternals);
//       assertFalse(compilerOptions0.removeUnusedVars);
//       assertFalse(compilerOptions0.flowSensitiveInlineVariables);
//       assertFalse(compilerOptions0.crossModuleMethodMotion);
//       assertFalse(compilerOptions0.printInputDelimiter);
//       assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
//       assertFalse(compilerOptions0.jqueryPass);
//       assertFalse(compilerOptions0.inlineFunctions);
//       assertFalse(compilerOptions0.coalesceVariableNames);
//       assertFalse(compilerOptions0.exportTestFunctions);
//       assertFalse(compilerOptions0.markNoSideEffectCalls);
//       assertFalse(compilerOptions0.deadAssignmentElimination);
//       assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
//       assertFalse(compilerOptions0.generateExports);
//       assertFalse(compilerOptions0.ideMode);
//       assertFalse(compilerOptions0.optimizeReturns);
//       assertFalse(compilerOptions0.collapseProperties);
//       assertFalse(compilerOptions0.checkTypes);
//       assertFalse(compilerOptions0.smartNameRemoval);
//       assertFalse(compilerOptions0.optimizeArgumentsArray);
//       assertFalse(compilerOptions0.preferLineBreakAtEndOfFile);
//       assertFalse(compilerOptions0.aliasAllStrings);
//       assertFalse(compilerOptions0.markAsCompiled);
//       assertFalse(compilerOptions0.labelRenaming);
//       assertFalse(compilerOptions0.inlineConstantVars);
//       assertFalse(compilerOptions0.prettyPrint);
//       assertFalse(compilerOptions0.convertToDottedProperties);
//       assertFalse(compilerOptions0.optimizeParameters);
//       assertFalse(compilerOptions0.inlineLocalFunctions);
//       assertFalse(compilerOptions0.devirtualizePrototypeMethods);
//       assertFalse(compilerOptions0.removeUnusedLocalVars);
//       assertFalse(compilerOptions0.reserveRawExports);
//       assertEquals(true, scope0.isGlobal());
//       assertEquals(false, scope0.isLocal());
//       assertEquals(32, scope0.getVarCount());
//       assertEquals(false, node0.isName());
//       assertEquals(false, node0.isBreak());
//       assertEquals(false, node0.hasChildren());
//       assertEquals(false, node0.isThis());
//       assertEquals(false, node0.isTypeOf());
//       assertEquals(false, node0.isContinue());
//       assertEquals(false, node0.isFromExterns());
//       assertEquals(false, node0.isAssignAdd());
//       assertEquals(true, node0.isNumber());
//       assertEquals(false, node0.isExprResult());
//       assertEquals(false, node0.isObjectLit());
//       assertEquals(false, node0.isAssign());
//       assertEquals(false, node0.hasOneChild());
//       assertEquals(false, node0.isDelProp());
//       assertEquals(false, node0.isIn());
//       assertEquals(false, node0.isNoSideEffectsCall());
//       assertEquals(false, node0.isOnlyModifiesThisCall());
//       assertEquals(false, node0.isNull());
//       assertEquals(false, node0.isRegExp());
//       assertEquals(false, node0.isIf());
//       assertEquals(false, node0.isGetElem());
//       assertEquals(false, node0.isFor());
//       assertEquals(false, node0.isStringKey());
//       assertEquals(false, node0.isEmpty());
//       assertEquals(false, node0.isDo());
//       assertEquals(false, node0.isCase());
//       assertEquals(false, node0.wasEmptyNode());
//       assertEquals(false, node0.isVarArgs());
//       assertEquals(false, node0.isGetterDef());
//       assertEquals(false, node0.isOr());
//       assertEquals(false, node0.isSyntheticBlock());
//       assertEquals(false, node0.isThrow());
//       assertEquals(false, node0.isScript());
//       assertEquals(0, node0.getChildCount());
//       assertEquals(false, node0.isInstanceOf());
//       assertEquals(false, node0.isFunction());
//       assertEquals(false, node0.isGetProp());
//       assertEquals(false, node0.isInc());
//       assertEquals(false, node0.isSwitch());
//       assertEquals(false, node0.isHook());
//       assertEquals(false, node0.isVar());
//       assertEquals(false, node0.isNew());
//       assertEquals(false, node0.isDebugger());
//       assertEquals(false, node0.isReturn());
//       assertEquals(39, node0.getType());
//       assertEquals(false, node0.isString());
//       assertEquals(2246, node0.getCharno());
//       assertEquals(false, node0.isBlock());
//       assertEquals(2246, node0.getLineno());
//       assertEquals(false, node0.isWith());
//       assertEquals(false, node0.isTry());
//       assertEquals(false, node0.isArrayLit());
//       assertEquals(false, node0.isDec());
//       assertEquals(false, node0.isAdd());
//       assertEquals(false, node0.isVoid());
//       assertEquals(false, node0.isDefaultCase());
//       assertEquals(false, node0.isComma());
//       assertEquals(false, node0.isOptionalArg());
//       assertEquals(false, node0.isLabel());
//       assertEquals(false, node0.isLabelName());
//       assertEquals(false, node0.isCall());
//       assertEquals(false, node0.isTrue());
//       assertEquals(false, node0.isNE());
//       assertEquals(9201862, node0.getSourcePosition());
//       assertEquals(false, node0.isFalse());
//       assertEquals(false, node0.isParamList());
//       assertEquals(0, node0.getSideEffectFlags());
//       assertEquals(0, node0.getLength());
//       assertEquals(false, node0.isQuotedString());
//       assertEquals(false, node0.isNot());
//       assertEquals(false, node0.isLocalResultCall());
//       assertEquals(false, node0.isCatch());
//       assertNull(node0.getSourceFileName());
//       assertEquals(false, node0.hasMoreThanOneChild());
//       assertEquals(false, node0.isSetterDef());
//       assertEquals(false, node0.isAnd());
//       assertEquals(false, node0.isWhile());
//       assertEquals(CompilerOptions.TracerMode.OFF, compilerOptions0.getTracerMode());
//       assertNull(compilerOptions0.getLanguageOut());
//       assertEquals(false, compilerOptions0.assumeStrictThis());
//       assertEquals(false, compilerOptions0.assumeClosuresOnlyCaptureReferences());
//       assertEquals(false, compilerOptions0.isRemoveUnusedClassProperties());
//       assertEquals(false, compilerOptions0.isExternExportsEnabled());
//       assertEquals(false, compilerOptions0.getInferTypes());
//       assertEquals(CompilerOptions.TweakProcessing.OFF, compilerOptions0.getTweakProcessing());
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compilerOptions0.getLanguageIn());
//       assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
//       assertEquals(true, compiler0.hasErrors());
//       assertEquals(false, compiler0.acceptConstKeyword());
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
//       assertEquals(1, compiler0.getErrorCount());
//       assertEquals(0.0, compiler0.getProgress(), 0.01D);
//       assertEquals(false, compiler0.isTypeCheckingEnabled());
//       assertEquals(false, compiler0.isIdeMode());
//       assertEquals(0, compiler0.getWarningCount());
//       assertNotNull(scope0);
//       
//       // Undeclared exception!
//       try {
//         typeCheck0.process(node0, node1);
//         fail("Expecting exception: IllegalStateException");
//       
//       } catch(IllegalStateException e) {
//          //
//          // no message in exception (getMessage() returned null)
//          //
//       }
//   }

  @Test
  public void test8() {}
//   @Test
//   public void test8()  throws Throwable  {
//       Compiler compiler0 = new Compiler();
//       assertEquals(0.0, compiler0.getProgress(), 0.01D);
//       assertNotNull(compiler0);
//       
//       ReverseAbstractInterpreter reverseAbstractInterpreter0 = null;
//       String string0 = "s";
//       MockFile mockFile0 = new MockFile(string0);
//       assertNotNull(mockFile0);
//       
//       JSSourceFile jSSourceFile0 = JSSourceFile.fromFile((File) mockFile0);
//       assertEquals(false, jSSourceFile0.isExtern());
//       assertEquals("s", jSSourceFile0.getName());
//       assertEquals("s", jSSourceFile0.toString());
//       assertEquals("s", jSSourceFile0.getOriginalPath());
//       assertNotNull(jSSourceFile0);
//       
//       CompilerOptions compilerOptions0 = new CompilerOptions();
//       assertFalse(compilerOptions0.aliasExternals);
//       assertFalse(compilerOptions0.markAsCompiled);
//       assertFalse(compilerOptions0.removeUnusedLocalVars);
//       assertFalse(compilerOptions0.smartNameRemoval);
//       assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
//       assertFalse(compilerOptions0.removeUnusedVars);
//       assertFalse(compilerOptions0.deadAssignmentElimination);
//       assertFalse(compilerOptions0.computeFunctionSideEffects);
//       assertFalse(compilerOptions0.inlineFunctions);
//       assertFalse(compilerOptions0.recordFunctionInformation);
//       assertFalse(compilerOptions0.ambiguateProperties);
//       assertFalse(compilerOptions0.flowSensitiveInlineVariables);
//       assertFalse(compilerOptions0.reserveRawExports);
//       assertFalse(compilerOptions0.crossModuleCodeMotion);
//       assertFalse(compilerOptions0.aliasKeywords);
//       assertFalse(compilerOptions0.aliasAllStrings);
//       assertFalse(compilerOptions0.inlineLocalFunctions);
//       assertFalse(compilerOptions0.removeDeadCode);
//       assertFalse(compilerOptions0.prettyPrint);
//       assertFalse(compilerOptions0.optimizeArgumentsArray);
//       assertFalse(compilerOptions0.inlineConstantVars);
//       assertFalse(compilerOptions0.inlineVariables);
//       assertFalse(compilerOptions0.collapseAnonymousFunctions);
//       assertFalse(compilerOptions0.coalesceVariableNames);
//       assertFalse(compilerOptions0.checkControlStructures);
//       assertFalse(compilerOptions0.optimizeReturns);
//       assertFalse(compilerOptions0.jqueryPass);
//       assertFalse(compilerOptions0.checkSuspiciousCode);
//       assertFalse(compilerOptions0.generateExports);
//       assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
//       assertFalse(compilerOptions0.exportTestFunctions);
//       assertFalse(compilerOptions0.ideMode);
//       assertFalse(compilerOptions0.checkSymbols);
//       assertFalse(compilerOptions0.gatherCssNames);
//       assertFalse(compilerOptions0.inlineGetters);
//       assertFalse(compilerOptions0.lineBreak);
//       assertFalse(compilerOptions0.checkTypes);
//       assertFalse(compilerOptions0.disambiguateProperties);
//       assertFalse(compilerOptions0.collapseProperties);
//       assertFalse(compilerOptions0.devirtualizePrototypeMethods);
//       assertFalse(compilerOptions0.removeTryCatchFinally);
//       assertFalse(compilerOptions0.convertToDottedProperties);
//       assertFalse(compilerOptions0.collapseVariableDeclarations);
//       assertFalse(compilerOptions0.preferLineBreakAtEndOfFile);
//       assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
//       assertFalse(compilerOptions0.printInputDelimiter);
//       assertFalse(compilerOptions0.labelRenaming);
//       assertFalse(compilerOptions0.optimizeCalls);
//       assertFalse(compilerOptions0.markNoSideEffectCalls);
//       assertFalse(compilerOptions0.closurePass);
//       assertFalse(compilerOptions0.optimizeParameters);
//       assertFalse(compilerOptions0.generatePseudoNames);
//       assertFalse(compilerOptions0.foldConstants);
//       assertFalse(compilerOptions0.removeUnusedClassProperties);
//       assertFalse(compilerOptions0.moveFunctionDeclarations);
//       assertFalse(compilerOptions0.rewriteFunctionExpressions);
//       assertFalse(compilerOptions0.crossModuleMethodMotion);
//       assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
//       assertEquals(false, compilerOptions0.isExternExportsEnabled());
//       assertEquals(false, compilerOptions0.getInferTypes());
//       assertEquals(CompilerOptions.TracerMode.OFF, compilerOptions0.getTracerMode());
//       assertEquals(CompilerOptions.TweakProcessing.OFF, compilerOptions0.getTweakProcessing());
//       assertEquals(false, compilerOptions0.assumeStrictThis());
//       assertEquals(false, compilerOptions0.isRemoveUnusedClassProperties());
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compilerOptions0.getLanguageIn());
//       assertNull(compilerOptions0.getLanguageOut());
//       assertEquals(false, compilerOptions0.assumeClosuresOnlyCaptureReferences());
//       assertNotNull(compilerOptions0);
//       
//       Result result0 = compiler0.compile((SourceFile) jSSourceFile0, (SourceFile) jSSourceFile0, compilerOptions0);
//       assertFalse(compilerOptions0.aliasExternals);
//       assertFalse(compilerOptions0.markAsCompiled);
//       assertFalse(compilerOptions0.removeUnusedLocalVars);
//       assertFalse(compilerOptions0.smartNameRemoval);
//       assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
//       assertFalse(compilerOptions0.removeUnusedVars);
//       assertFalse(compilerOptions0.deadAssignmentElimination);
//       assertFalse(compilerOptions0.computeFunctionSideEffects);
//       assertFalse(compilerOptions0.inlineFunctions);
//       assertFalse(compilerOptions0.recordFunctionInformation);
//       assertFalse(compilerOptions0.ambiguateProperties);
//       assertFalse(compilerOptions0.flowSensitiveInlineVariables);
//       assertFalse(compilerOptions0.reserveRawExports);
//       assertFalse(compilerOptions0.crossModuleCodeMotion);
//       assertFalse(compilerOptions0.aliasKeywords);
//       assertFalse(compilerOptions0.aliasAllStrings);
//       assertFalse(compilerOptions0.inlineLocalFunctions);
//       assertFalse(compilerOptions0.removeDeadCode);
//       assertFalse(compilerOptions0.prettyPrint);
//       assertFalse(compilerOptions0.optimizeArgumentsArray);
//       assertFalse(compilerOptions0.inlineConstantVars);
//       assertFalse(compilerOptions0.inlineVariables);
//       assertFalse(compilerOptions0.collapseAnonymousFunctions);
//       assertFalse(compilerOptions0.coalesceVariableNames);
//       assertFalse(compilerOptions0.checkControlStructures);
//       assertFalse(compilerOptions0.optimizeReturns);
//       assertFalse(compilerOptions0.jqueryPass);
//       assertFalse(compilerOptions0.checkSuspiciousCode);
//       assertFalse(compilerOptions0.generateExports);
//       assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
//       assertFalse(compilerOptions0.exportTestFunctions);
//       assertFalse(compilerOptions0.ideMode);
//       assertFalse(compilerOptions0.checkSymbols);
//       assertFalse(compilerOptions0.gatherCssNames);
//       assertFalse(compilerOptions0.inlineGetters);
//       assertFalse(compilerOptions0.lineBreak);
//       assertFalse(compilerOptions0.checkTypes);
//       assertFalse(compilerOptions0.disambiguateProperties);
//       assertFalse(compilerOptions0.collapseProperties);
//       assertFalse(compilerOptions0.devirtualizePrototypeMethods);
//       assertFalse(compilerOptions0.removeTryCatchFinally);
//       assertFalse(compilerOptions0.convertToDottedProperties);
//       assertFalse(compilerOptions0.collapseVariableDeclarations);
//       assertFalse(compilerOptions0.preferLineBreakAtEndOfFile);
//       assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
//       assertFalse(compilerOptions0.printInputDelimiter);
//       assertFalse(compilerOptions0.labelRenaming);
//       assertFalse(compilerOptions0.optimizeCalls);
//       assertFalse(compilerOptions0.markNoSideEffectCalls);
//       assertFalse(compilerOptions0.closurePass);
//       assertFalse(compilerOptions0.optimizeParameters);
//       assertFalse(compilerOptions0.generatePseudoNames);
//       assertFalse(compilerOptions0.foldConstants);
//       assertFalse(compilerOptions0.removeUnusedClassProperties);
//       assertFalse(compilerOptions0.moveFunctionDeclarations);
//       assertFalse(compilerOptions0.rewriteFunctionExpressions);
//       assertFalse(compilerOptions0.crossModuleMethodMotion);
//       assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
//       assertEquals(false, compilerOptions0.isExternExportsEnabled());
//       assertEquals(false, compilerOptions0.getInferTypes());
//       assertEquals(CompilerOptions.TracerMode.OFF, compilerOptions0.getTracerMode());
//       assertEquals(CompilerOptions.TweakProcessing.OFF, compilerOptions0.getTweakProcessing());
//       assertEquals(false, compilerOptions0.assumeStrictThis());
//       assertEquals(false, compilerOptions0.isRemoveUnusedClassProperties());
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compilerOptions0.getLanguageIn());
//       assertNull(compilerOptions0.getLanguageOut());
//       assertEquals(false, compilerOptions0.assumeClosuresOnlyCaptureReferences());
//       assertEquals(true, jSSourceFile0.isExtern());
//       assertEquals("s", jSSourceFile0.getName());
//       assertEquals("s", jSSourceFile0.toString());
//       assertEquals("s", jSSourceFile0.getOriginalPath());
//       assertEquals(0.0, compiler0.getProgress(), 0.01D);
//       assertEquals(false, compiler0.isTypeCheckingEnabled());
//       assertEquals(0, compiler0.getWarningCount());
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
//       assertEquals(true, compiler0.hasErrors());
//       assertEquals(false, compiler0.acceptConstKeyword());
//       assertEquals(1, compiler0.getErrorCount());
//       assertEquals(false, compiler0.isIdeMode());
//       assertNotNull(result0);
//       
//       JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
//       assertEquals(0.0, compiler0.getProgress(), 0.01D);
//       assertEquals(false, compiler0.isTypeCheckingEnabled());
//       assertEquals(0, compiler0.getWarningCount());
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
//       assertEquals(true, compiler0.hasErrors());
//       assertEquals(false, compiler0.acceptConstKeyword());
//       assertEquals(1, compiler0.getErrorCount());
//       assertEquals(false, compiler0.isIdeMode());
//       assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
//       assertNotNull(jSTypeRegistry0);
//       
//       TypeCheck typeCheck0 = new TypeCheck(compiler0, reverseAbstractInterpreter0, jSTypeRegistry0);
//       assertEquals(0.0, compiler0.getProgress(), 0.01D);
//       assertEquals(false, compiler0.isTypeCheckingEnabled());
//       assertEquals(0, compiler0.getWarningCount());
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
//       assertEquals(true, compiler0.hasErrors());
//       assertEquals(false, compiler0.acceptConstKeyword());
//       assertEquals(1, compiler0.getErrorCount());
//       assertEquals(false, compiler0.isIdeMode());
//       assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
//       assertNotNull(typeCheck0);
//   }

  @Test
  public void test9() {}
//   @Test
//   public void test9()  throws Throwable  {
//       Compiler compiler0 = new Compiler();
//       assertEquals(0.0, compiler0.getProgress(), 0.01D);
//       assertNotNull(compiler0);
//       
//       ReverseAbstractInterpreter reverseAbstractInterpreter0 = null;
//       String string0 = "s";
//       MockFile mockFile0 = new MockFile(string0);
//       assertNotNull(mockFile0);
//       
//       JSSourceFile jSSourceFile0 = JSSourceFile.fromFile((File) mockFile0);
//       assertEquals(false, jSSourceFile0.isExtern());
//       assertEquals("s", jSSourceFile0.toString());
//       assertEquals("s", jSSourceFile0.getName());
//       assertEquals("s", jSSourceFile0.getOriginalPath());
//       assertNotNull(jSSourceFile0);
//       
//       CompilerOptions compilerOptions0 = new CompilerOptions();
//       assertFalse(compilerOptions0.labelRenaming);
//       assertFalse(compilerOptions0.lineBreak);
//       assertFalse(compilerOptions0.checkSymbols);
//       assertFalse(compilerOptions0.convertToDottedProperties);
//       assertFalse(compilerOptions0.foldConstants);
//       assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
//       assertFalse(compilerOptions0.checkControlStructures);
//       assertFalse(compilerOptions0.prettyPrint);
//       assertFalse(compilerOptions0.collapseVariableDeclarations);
//       assertFalse(compilerOptions0.collapseProperties);
//       assertFalse(compilerOptions0.computeFunctionSideEffects);
//       assertFalse(compilerOptions0.optimizeArgumentsArray);
//       assertFalse(compilerOptions0.flowSensitiveInlineVariables);
//       assertFalse(compilerOptions0.jqueryPass);
//       assertFalse(compilerOptions0.inlineLocalFunctions);
//       assertFalse(compilerOptions0.optimizeParameters);
//       assertFalse(compilerOptions0.coalesceVariableNames);
//       assertFalse(compilerOptions0.optimizeReturns);
//       assertFalse(compilerOptions0.exportTestFunctions);
//       assertFalse(compilerOptions0.checkSuspiciousCode);
//       assertFalse(compilerOptions0.crossModuleMethodMotion);
//       assertFalse(compilerOptions0.inlineGetters);
//       assertFalse(compilerOptions0.removeUnusedLocalVars);
//       assertFalse(compilerOptions0.crossModuleCodeMotion);
//       assertFalse(compilerOptions0.disambiguateProperties);
//       assertFalse(compilerOptions0.inlineVariables);
//       assertFalse(compilerOptions0.removeTryCatchFinally);
//       assertFalse(compilerOptions0.inlineFunctions);
//       assertFalse(compilerOptions0.markNoSideEffectCalls);
//       assertFalse(compilerOptions0.removeDeadCode);
//       assertFalse(compilerOptions0.reserveRawExports);
//       assertFalse(compilerOptions0.collapseAnonymousFunctions);
//       assertFalse(compilerOptions0.inlineConstantVars);
//       assertFalse(compilerOptions0.rewriteFunctionExpressions);
//       assertFalse(compilerOptions0.aliasKeywords);
//       assertFalse(compilerOptions0.deadAssignmentElimination);
//       assertFalse(compilerOptions0.removeUnusedVars);
//       assertFalse(compilerOptions0.ideMode);
//       assertFalse(compilerOptions0.generatePseudoNames);
//       assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
//       assertFalse(compilerOptions0.devirtualizePrototypeMethods);
//       assertFalse(compilerOptions0.optimizeCalls);
//       assertFalse(compilerOptions0.aliasExternals);
//       assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
//       assertFalse(compilerOptions0.aliasAllStrings);
//       assertFalse(compilerOptions0.printInputDelimiter);
//       assertFalse(compilerOptions0.gatherCssNames);
//       assertFalse(compilerOptions0.recordFunctionInformation);
//       assertFalse(compilerOptions0.removeUnusedClassProperties);
//       assertFalse(compilerOptions0.moveFunctionDeclarations);
//       assertFalse(compilerOptions0.preferLineBreakAtEndOfFile);
//       assertFalse(compilerOptions0.smartNameRemoval);
//       assertFalse(compilerOptions0.closurePass);
//       assertFalse(compilerOptions0.ambiguateProperties);
//       assertFalse(compilerOptions0.generateExports);
//       assertFalse(compilerOptions0.markAsCompiled);
//       assertFalse(compilerOptions0.checkTypes);
//       assertEquals(CompilerOptions.TweakProcessing.OFF, compilerOptions0.getTweakProcessing());
//       assertEquals(false, compilerOptions0.isExternExportsEnabled());
//       assertNull(compilerOptions0.getLanguageOut());
//       assertEquals(false, compilerOptions0.getInferTypes());
//       assertEquals(false, compilerOptions0.assumeClosuresOnlyCaptureReferences());
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compilerOptions0.getLanguageIn());
//       assertEquals(false, compilerOptions0.assumeStrictThis());
//       assertEquals(CompilerOptions.TracerMode.OFF, compilerOptions0.getTracerMode());
//       assertEquals(false, compilerOptions0.isRemoveUnusedClassProperties());
//       assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
//       assertNotNull(compilerOptions0);
//       
//       Result result0 = compiler0.compile((SourceFile) jSSourceFile0, (SourceFile) jSSourceFile0, compilerOptions0);
//       assertFalse(compilerOptions0.labelRenaming);
//       assertFalse(compilerOptions0.lineBreak);
//       assertFalse(compilerOptions0.checkSymbols);
//       assertFalse(compilerOptions0.convertToDottedProperties);
//       assertFalse(compilerOptions0.foldConstants);
//       assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
//       assertFalse(compilerOptions0.checkControlStructures);
//       assertFalse(compilerOptions0.prettyPrint);
//       assertFalse(compilerOptions0.collapseVariableDeclarations);
//       assertFalse(compilerOptions0.collapseProperties);
//       assertFalse(compilerOptions0.computeFunctionSideEffects);
//       assertFalse(compilerOptions0.optimizeArgumentsArray);
//       assertFalse(compilerOptions0.flowSensitiveInlineVariables);
//       assertFalse(compilerOptions0.jqueryPass);
//       assertFalse(compilerOptions0.inlineLocalFunctions);
//       assertFalse(compilerOptions0.optimizeParameters);
//       assertFalse(compilerOptions0.coalesceVariableNames);
//       assertFalse(compilerOptions0.optimizeReturns);
//       assertFalse(compilerOptions0.exportTestFunctions);
//       assertFalse(compilerOptions0.checkSuspiciousCode);
//       assertFalse(compilerOptions0.crossModuleMethodMotion);
//       assertFalse(compilerOptions0.inlineGetters);
//       assertFalse(compilerOptions0.removeUnusedLocalVars);
//       assertFalse(compilerOptions0.crossModuleCodeMotion);
//       assertFalse(compilerOptions0.disambiguateProperties);
//       assertFalse(compilerOptions0.inlineVariables);
//       assertFalse(compilerOptions0.removeTryCatchFinally);
//       assertFalse(compilerOptions0.inlineFunctions);
//       assertFalse(compilerOptions0.markNoSideEffectCalls);
//       assertFalse(compilerOptions0.removeDeadCode);
//       assertFalse(compilerOptions0.reserveRawExports);
//       assertFalse(compilerOptions0.collapseAnonymousFunctions);
//       assertFalse(compilerOptions0.inlineConstantVars);
//       assertFalse(compilerOptions0.rewriteFunctionExpressions);
//       assertFalse(compilerOptions0.aliasKeywords);
//       assertFalse(compilerOptions0.deadAssignmentElimination);
//       assertFalse(compilerOptions0.removeUnusedVars);
//       assertFalse(compilerOptions0.ideMode);
//       assertFalse(compilerOptions0.generatePseudoNames);
//       assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
//       assertFalse(compilerOptions0.devirtualizePrototypeMethods);
//       assertFalse(compilerOptions0.optimizeCalls);
//       assertFalse(compilerOptions0.aliasExternals);
//       assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
//       assertFalse(compilerOptions0.aliasAllStrings);
//       assertFalse(compilerOptions0.printInputDelimiter);
//       assertFalse(compilerOptions0.gatherCssNames);
//       assertFalse(compilerOptions0.recordFunctionInformation);
//       assertFalse(compilerOptions0.removeUnusedClassProperties);
//       assertFalse(compilerOptions0.moveFunctionDeclarations);
//       assertFalse(compilerOptions0.preferLineBreakAtEndOfFile);
//       assertFalse(compilerOptions0.smartNameRemoval);
//       assertFalse(compilerOptions0.closurePass);
//       assertFalse(compilerOptions0.ambiguateProperties);
//       assertFalse(compilerOptions0.generateExports);
//       assertFalse(compilerOptions0.markAsCompiled);
//       assertFalse(compilerOptions0.checkTypes);
//       assertEquals(true, jSSourceFile0.isExtern());
//       assertEquals("s", jSSourceFile0.toString());
//       assertEquals("s", jSSourceFile0.getName());
//       assertEquals("s", jSSourceFile0.getOriginalPath());
//       assertEquals(CompilerOptions.TweakProcessing.OFF, compilerOptions0.getTweakProcessing());
//       assertEquals(false, compilerOptions0.isExternExportsEnabled());
//       assertNull(compilerOptions0.getLanguageOut());
//       assertEquals(false, compilerOptions0.getInferTypes());
//       assertEquals(false, compilerOptions0.assumeClosuresOnlyCaptureReferences());
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compilerOptions0.getLanguageIn());
//       assertEquals(false, compilerOptions0.assumeStrictThis());
//       assertEquals(CompilerOptions.TracerMode.OFF, compilerOptions0.getTracerMode());
//       assertEquals(false, compilerOptions0.isRemoveUnusedClassProperties());
//       assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
//       assertEquals(0.0, compiler0.getProgress(), 0.01D);
//       assertEquals(0, compiler0.getWarningCount());
//       assertEquals(false, compiler0.isIdeMode());
//       assertEquals(false, compiler0.isTypeCheckingEnabled());
//       assertEquals(true, compiler0.hasErrors());
//       assertEquals(1, compiler0.getErrorCount());
//       assertEquals(false, compiler0.acceptConstKeyword());
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
//       assertNotNull(result0);
//       
//       JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
//       assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
//       assertEquals(0.0, compiler0.getProgress(), 0.01D);
//       assertEquals(0, compiler0.getWarningCount());
//       assertEquals(false, compiler0.isIdeMode());
//       assertEquals(false, compiler0.isTypeCheckingEnabled());
//       assertEquals(true, compiler0.hasErrors());
//       assertEquals(1, compiler0.getErrorCount());
//       assertEquals(false, compiler0.acceptConstKeyword());
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
//       assertNotNull(jSTypeRegistry0);
//       
//       TypeCheck typeCheck0 = new TypeCheck((AbstractCompiler) compiler0, reverseAbstractInterpreter0, jSTypeRegistry0, compilerOptions0.checkProvides, compilerOptions0.aggressiveVarCheck);
//       assertFalse(compilerOptions0.labelRenaming);
//       assertFalse(compilerOptions0.lineBreak);
//       assertFalse(compilerOptions0.checkSymbols);
//       assertFalse(compilerOptions0.convertToDottedProperties);
//       assertFalse(compilerOptions0.foldConstants);
//       assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
//       assertFalse(compilerOptions0.checkControlStructures);
//       assertFalse(compilerOptions0.prettyPrint);
//       assertFalse(compilerOptions0.collapseVariableDeclarations);
//       assertFalse(compilerOptions0.collapseProperties);
//       assertFalse(compilerOptions0.computeFunctionSideEffects);
//       assertFalse(compilerOptions0.optimizeArgumentsArray);
//       assertFalse(compilerOptions0.flowSensitiveInlineVariables);
//       assertFalse(compilerOptions0.jqueryPass);
//       assertFalse(compilerOptions0.inlineLocalFunctions);
//       assertFalse(compilerOptions0.optimizeParameters);
//       assertFalse(compilerOptions0.coalesceVariableNames);
//       assertFalse(compilerOptions0.optimizeReturns);
//       assertFalse(compilerOptions0.exportTestFunctions);
//       assertFalse(compilerOptions0.checkSuspiciousCode);
//       assertFalse(compilerOptions0.crossModuleMethodMotion);
//       assertFalse(compilerOptions0.inlineGetters);
//       assertFalse(compilerOptions0.removeUnusedLocalVars);
//       assertFalse(compilerOptions0.crossModuleCodeMotion);
//       assertFalse(compilerOptions0.disambiguateProperties);
//       assertFalse(compilerOptions0.inlineVariables);
//       assertFalse(compilerOptions0.removeTryCatchFinally);
//       assertFalse(compilerOptions0.inlineFunctions);
//       assertFalse(compilerOptions0.markNoSideEffectCalls);
//       assertFalse(compilerOptions0.removeDeadCode);
//       assertFalse(compilerOptions0.reserveRawExports);
//       assertFalse(compilerOptions0.collapseAnonymousFunctions);
//       assertFalse(compilerOptions0.inlineConstantVars);
//       assertFalse(compilerOptions0.rewriteFunctionExpressions);
//       assertFalse(compilerOptions0.aliasKeywords);
//       assertFalse(compilerOptions0.deadAssignmentElimination);
//       assertFalse(compilerOptions0.removeUnusedVars);
//       assertFalse(compilerOptions0.ideMode);
//       assertFalse(compilerOptions0.generatePseudoNames);
//       assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
//       assertFalse(compilerOptions0.devirtualizePrototypeMethods);
//       assertFalse(compilerOptions0.optimizeCalls);
//       assertFalse(compilerOptions0.aliasExternals);
//       assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
//       assertFalse(compilerOptions0.aliasAllStrings);
//       assertFalse(compilerOptions0.printInputDelimiter);
//       assertFalse(compilerOptions0.gatherCssNames);
//       assertFalse(compilerOptions0.recordFunctionInformation);
//       assertFalse(compilerOptions0.removeUnusedClassProperties);
//       assertFalse(compilerOptions0.moveFunctionDeclarations);
//       assertFalse(compilerOptions0.preferLineBreakAtEndOfFile);
//       assertFalse(compilerOptions0.smartNameRemoval);
//       assertFalse(compilerOptions0.closurePass);
//       assertFalse(compilerOptions0.ambiguateProperties);
//       assertFalse(compilerOptions0.generateExports);
//       assertFalse(compilerOptions0.markAsCompiled);
//       assertFalse(compilerOptions0.checkTypes);
//       assertEquals(CompilerOptions.TweakProcessing.OFF, compilerOptions0.getTweakProcessing());
//       assertEquals(false, compilerOptions0.isExternExportsEnabled());
//       assertNull(compilerOptions0.getLanguageOut());
//       assertEquals(false, compilerOptions0.getInferTypes());
//       assertEquals(false, compilerOptions0.assumeClosuresOnlyCaptureReferences());
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compilerOptions0.getLanguageIn());
//       assertEquals(false, compilerOptions0.assumeStrictThis());
//       assertEquals(CompilerOptions.TracerMode.OFF, compilerOptions0.getTracerMode());
//       assertEquals(false, compilerOptions0.isRemoveUnusedClassProperties());
//       assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
//       assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
//       assertEquals(0.0, compiler0.getProgress(), 0.01D);
//       assertEquals(0, compiler0.getWarningCount());
//       assertEquals(false, compiler0.isIdeMode());
//       assertEquals(false, compiler0.isTypeCheckingEnabled());
//       assertEquals(true, compiler0.hasErrors());
//       assertEquals(1, compiler0.getErrorCount());
//       assertEquals(false, compiler0.acceptConstKeyword());
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
//       assertNotNull(typeCheck0);
//   }
}
