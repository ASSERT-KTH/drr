/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 23:04:28 GMT 2014
 */

package com.google.javascript.rhino.jstype;

import static org.junit.Assert.*;
import org.junit.Test;
import com.google.common.collect.ImmutableList;
import com.google.javascript.rhino.ErrorReporter;
import com.google.javascript.rhino.Node;
import com.google.javascript.rhino.SimpleErrorReporter;
import com.google.javascript.rhino.jstype.ArrowType;
import com.google.javascript.rhino.jstype.BooleanLiteralSet;
import com.google.javascript.rhino.jstype.EquivalenceMethod;
import com.google.javascript.rhino.jstype.ErrorFunctionType;
import com.google.javascript.rhino.jstype.FunctionType;
import com.google.javascript.rhino.jstype.InstanceObjectType;
import com.google.javascript.rhino.jstype.JSType;
import com.google.javascript.rhino.jstype.JSTypeNative;
import com.google.javascript.rhino.jstype.JSTypeRegistry;
import com.google.javascript.rhino.jstype.NoObjectType;
import com.google.javascript.rhino.jstype.NoResolvedType;
import com.google.javascript.rhino.jstype.NoType;
import com.google.javascript.rhino.jstype.ObjectType;
import com.google.javascript.rhino.jstype.StringType;
import com.google.javascript.rhino.jstype.UnknownType;
import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;
import java.util.Set;
import java.util.Stack;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;

import org.evosuite.runtime.mock.java.lang.MockIllegalArgumentException;
import org.junit.runner.RunWith;


public class FunctionTypeEvoSuite_branch_Test  {

  @Test
  public void test00() {}
//   @Test
//   public void test00()  throws Throwable  {
//       SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
//       assertNotNull(simpleErrorReporter0);
//       
//       boolean boolean0 = false;
//       JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0, boolean0);
//       assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
//       assertNotNull(jSTypeRegistry0);
//       
//       String string0 = "dy-LTc+cK.&yC";
//       ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, string0);
//       assertEquals(true, errorFunctionType0.isConstructor());
//       assertEquals(false, errorFunctionType0.isInterface());
//       assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
//       assertEquals(false, errorFunctionType0.isFunctionPrototypeType());
//       assertEquals(false, errorFunctionType0.hasCachedValues());
//       assertEquals(false, errorFunctionType0.isStringValueType());
//       assertEquals(false, errorFunctionType0.isEnumType());
//       assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
//       assertEquals(false, errorFunctionType0.isNoType());
//       assertEquals(false, errorFunctionType0.isEnumElementType());
//       assertEquals(true, errorFunctionType0.isNominalConstructor());
//       assertEquals(true, errorFunctionType0.isFunctionType());
//       assertEquals(false, errorFunctionType0.isNoObjectType());
//       assertEquals(false, errorFunctionType0.isUnionType());
//       assertEquals(false, errorFunctionType0.isNominalType());
//       assertEquals(false, errorFunctionType0.isNullType());
//       assertEquals(false, errorFunctionType0.isResolved());
//       assertEquals(false, errorFunctionType0.isRecordType());
//       assertEquals(false, errorFunctionType0.isBooleanValueType());
//       assertEquals(true, errorFunctionType0.canBeCalled());
//       assertEquals(false, errorFunctionType0.isOrdinaryFunction());
//       assertEquals(false, errorFunctionType0.isParameterizedType());
//       assertEquals(true, errorFunctionType0.hasInstanceType());
//       assertEquals(false, errorFunctionType0.isReturnTypeInferred());
//       assertEquals(3, errorFunctionType0.getMaxArguments());
//       assertEquals(false, errorFunctionType0.isNumberValueType());
//       assertEquals(false, errorFunctionType0.isVoidType());
//       assertEquals(false, errorFunctionType0.isCheckedUnknownType());
//       assertEquals(false, errorFunctionType0.isAllType());
//       assertEquals(false, errorFunctionType0.isNoResolvedType());
//       assertEquals(false, errorFunctionType0.isTemplateType());
//       assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
//       assertNotNull(errorFunctionType0);
//       
//       errorFunctionType0.setInstanceType(errorFunctionType0);
//       assertEquals(true, errorFunctionType0.isConstructor());
//       assertEquals(false, errorFunctionType0.isInterface());
//       assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
//       assertEquals(false, errorFunctionType0.isFunctionPrototypeType());
//       assertEquals(false, errorFunctionType0.hasCachedValues());
//       assertEquals(false, errorFunctionType0.isStringValueType());
//       assertEquals(false, errorFunctionType0.isEnumType());
//       assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
//       assertEquals(false, errorFunctionType0.isNoType());
//       assertEquals(false, errorFunctionType0.isEnumElementType());
//       assertEquals(true, errorFunctionType0.isNominalConstructor());
//       assertEquals(true, errorFunctionType0.isFunctionType());
//       assertEquals(false, errorFunctionType0.isNoObjectType());
//       assertEquals(false, errorFunctionType0.isUnionType());
//       assertEquals(false, errorFunctionType0.isNominalType());
//       assertEquals(false, errorFunctionType0.isNullType());
//       assertEquals(false, errorFunctionType0.isResolved());
//       assertEquals(false, errorFunctionType0.isRecordType());
//       assertEquals(false, errorFunctionType0.isBooleanValueType());
//       assertEquals(true, errorFunctionType0.canBeCalled());
//       assertEquals(false, errorFunctionType0.isOrdinaryFunction());
//       assertEquals(false, errorFunctionType0.isParameterizedType());
//       assertEquals(true, errorFunctionType0.hasInstanceType());
//       assertEquals(false, errorFunctionType0.isReturnTypeInferred());
//       assertEquals(3, errorFunctionType0.getMaxArguments());
//       assertEquals(false, errorFunctionType0.isNumberValueType());
//       assertEquals(false, errorFunctionType0.isVoidType());
//       assertEquals(false, errorFunctionType0.isCheckedUnknownType());
//       assertEquals(false, errorFunctionType0.isAllType());
//       assertEquals(false, errorFunctionType0.isNoResolvedType());
//       assertEquals(false, errorFunctionType0.isTemplateType());
//       assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
//       
//       String string1 = errorFunctionType0.toDebugHashCodeString();
//       assertNotSame(string1, string0);
//       assertNotSame(string0, string1);
//       assertEquals(true, errorFunctionType0.isConstructor());
//       assertEquals(false, errorFunctionType0.isInterface());
//       assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
//       assertEquals(false, errorFunctionType0.isFunctionPrototypeType());
//       assertEquals(true, errorFunctionType0.hasCachedValues());
//       assertEquals(false, errorFunctionType0.isStringValueType());
//       assertEquals(false, errorFunctionType0.isEnumType());
//       assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
//       assertEquals(false, errorFunctionType0.isNoType());
//       assertEquals(false, errorFunctionType0.isEnumElementType());
//       assertEquals(true, errorFunctionType0.isNominalConstructor());
//       assertEquals(true, errorFunctionType0.isFunctionType());
//       assertEquals(false, errorFunctionType0.isNoObjectType());
//       assertEquals(false, errorFunctionType0.isUnionType());
//       assertEquals(false, errorFunctionType0.isNominalType());
//       assertEquals(false, errorFunctionType0.isNullType());
//       assertEquals(false, errorFunctionType0.isResolved());
//       assertEquals(false, errorFunctionType0.isRecordType());
//       assertEquals(false, errorFunctionType0.isBooleanValueType());
//       assertEquals(true, errorFunctionType0.canBeCalled());
//       assertEquals(false, errorFunctionType0.isOrdinaryFunction());
//       assertEquals(false, errorFunctionType0.isParameterizedType());
//       assertEquals(true, errorFunctionType0.hasInstanceType());
//       assertEquals(false, errorFunctionType0.isReturnTypeInferred());
//       assertEquals(3, errorFunctionType0.getMaxArguments());
//       assertEquals(false, errorFunctionType0.isNumberValueType());
//       assertEquals(false, errorFunctionType0.isVoidType());
//       assertEquals(false, errorFunctionType0.isCheckedUnknownType());
//       assertEquals(false, errorFunctionType0.isAllType());
//       assertEquals(false, errorFunctionType0.isNoResolvedType());
//       assertEquals(false, errorFunctionType0.isTemplateType());
//       assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
//       assertNotNull(string1);
//       assertEquals("function (this:me, {13}, {13}, {13}): {-494821678}", string1);
//       assertFalse(string1.equals((Object)string0));
//       assertFalse(string0.equals((Object)string1));
//   }

  @Test
  public void test01()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      //  // Unstable assertion: assertNotNull(simpleErrorReporter0);
      
      boolean boolean0 = false;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0, boolean0);
      //  // Unstable assertion: assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      //  // Unstable assertion: assertNotNull(jSTypeRegistry0);
      
      String string0 = "protoyp";
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, string0);
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isUnionType());
      //  // Unstable assertion: assertEquals(true, errorFunctionType0.canBeCalled());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isReturnTypeInferred());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isRecordType());
      //  // Unstable assertion: assertEquals(true, errorFunctionType0.isNominalConstructor());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isResolved());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.hasCachedValues());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isCheckedUnknownType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isFunctionPrototypeType());
      //  // Unstable assertion: assertEquals(true, errorFunctionType0.isConstructor());
      //  // Unstable assertion: assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isNumberValueType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isNoType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isInterface());
      //  // Unstable assertion: assertEquals(true, errorFunctionType0.hasInstanceType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isNoResolvedType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isVoidType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isBooleanValueType());
      //  // Unstable assertion: assertEquals(3, errorFunctionType0.getMaxArguments());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isNoObjectType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isTemplateType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isNullType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isEnumElementType());
      //  // Unstable assertion: assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isParameterizedType());
      //  // Unstable assertion: assertEquals(true, errorFunctionType0.isFunctionType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isNominalType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isStringValueType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isAllType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isEnumType());
      //  // Unstable assertion: assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      //  // Unstable assertion: assertNotNull(errorFunctionType0);
      
      int int0 = 0;
      FunctionType functionType0 = errorFunctionType0.getBindReturnType(int0);
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isUnionType());
      //  // Unstable assertion: assertEquals(true, errorFunctionType0.canBeCalled());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isReturnTypeInferred());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isRecordType());
      //  // Unstable assertion: assertEquals(true, errorFunctionType0.isNominalConstructor());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isResolved());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.hasCachedValues());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isCheckedUnknownType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isFunctionPrototypeType());
      //  // Unstable assertion: assertEquals(true, errorFunctionType0.isConstructor());
      //  // Unstable assertion: assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isNumberValueType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isNoType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isInterface());
      //  // Unstable assertion: assertEquals(true, errorFunctionType0.hasInstanceType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isNoResolvedType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isVoidType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isBooleanValueType());
      //  // Unstable assertion: assertEquals(3, errorFunctionType0.getMaxArguments());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isNoObjectType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isTemplateType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isNullType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isEnumElementType());
      //  // Unstable assertion: assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isParameterizedType());
      //  // Unstable assertion: assertEquals(true, errorFunctionType0.isFunctionType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isNominalType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isStringValueType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isAllType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isEnumType());
      //  // Unstable assertion: assertEquals(false, functionType0.isNullType());
      //  // Unstable assertion: assertEquals(false, functionType0.isNumberValueType());
      //  // Unstable assertion: assertEquals(true, functionType0.canBeCalled());
      //  // Unstable assertion: assertEquals(false, functionType0.isUnionType());
      //  // Unstable assertion: assertEquals(false, functionType0.isBooleanValueType());
      //  // Unstable assertion: assertEquals(false, functionType0.isConstructor());
      //  // Unstable assertion: assertEquals(false, functionType0.isNoObjectType());
      //  // Unstable assertion: assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      //  // Unstable assertion: assertEquals(false, functionType0.isEnumType());
      //  // Unstable assertion: assertEquals(false, functionType0.isTemplateType());
      //  // Unstable assertion: assertEquals(false, functionType0.isNoResolvedType());
      //  // Unstable assertion: assertEquals(true, functionType0.isFunctionType());
      //  // Unstable assertion: assertEquals(false, functionType0.hasCachedValues());
      //  // Unstable assertion: assertEquals(false, functionType0.hasInstanceType());
      //  // Unstable assertion: assertEquals(3, functionType0.getMaxArguments());
      //  // Unstable assertion: assertEquals(false, functionType0.isInterface());
      //  // Unstable assertion: assertEquals(false, functionType0.isCheckedUnknownType());
      //  // Unstable assertion: assertEquals(false, functionType0.isEnumElementType());
      //  // Unstable assertion: assertEquals(false, functionType0.isNominalConstructor());
      //  // Unstable assertion: assertEquals(false, functionType0.isFunctionPrototypeType());
      //  // Unstable assertion: assertEquals(true, functionType0.isOrdinaryFunction());
      //  // Unstable assertion: assertEquals(false, functionType0.isResolved());
      //  // Unstable assertion: assertEquals(false, functionType0.isVoidType());
      //  // Unstable assertion: assertEquals(0, functionType0.getExtendedInterfacesCount());
      //  // Unstable assertion: assertEquals(false, functionType0.isReturnTypeInferred());
      //  // Unstable assertion: assertEquals(false, functionType0.isRecordType());
      //  // Unstable assertion: assertEquals(false, functionType0.isNominalType());
      //  // Unstable assertion: assertEquals(false, functionType0.isAllType());
      //  // Unstable assertion: assertEquals(false, functionType0.isStringValueType());
      //  // Unstable assertion: assertEquals(false, functionType0.isNoType());
      //  // Unstable assertion: assertEquals(false, functionType0.isParameterizedType());
      //  // Unstable assertion: assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      //  // Unstable assertion: assertNotNull(functionType0);
      
      String string1 = functionType0.toDebugHashCodeString();
      //  // Unstable assertion: assertNotSame(string1, string0);
      //  // Unstable assertion: assertNotSame(string0, string1);
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isUnionType());
      //  // Unstable assertion: assertEquals(true, errorFunctionType0.canBeCalled());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isReturnTypeInferred());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isRecordType());
      //  // Unstable assertion: assertEquals(true, errorFunctionType0.isNominalConstructor());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isResolved());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isCheckedUnknownType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isFunctionPrototypeType());
      //  // Unstable assertion: assertEquals(true, errorFunctionType0.isConstructor());
      //  // Unstable assertion: assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isNumberValueType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isNoType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isInterface());
      //  // Unstable assertion: assertEquals(true, errorFunctionType0.hasInstanceType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isNoResolvedType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isVoidType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isBooleanValueType());
      //  // Unstable assertion: assertEquals(3, errorFunctionType0.getMaxArguments());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isNoObjectType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isTemplateType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isNullType());
      //  // Unstable assertion: assertEquals(true, errorFunctionType0.hasCachedValues());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isEnumElementType());
      //  // Unstable assertion: assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isParameterizedType());
      //  // Unstable assertion: assertEquals(true, errorFunctionType0.isFunctionType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isNominalType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isStringValueType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isAllType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isEnumType());
      //  // Unstable assertion: assertEquals(false, functionType0.isNullType());
      //  // Unstable assertion: assertEquals(false, functionType0.isNumberValueType());
      //  // Unstable assertion: assertEquals(true, functionType0.canBeCalled());
      //  // Unstable assertion: assertEquals(false, functionType0.isUnionType());
      //  // Unstable assertion: assertEquals(false, functionType0.isBooleanValueType());
      //  // Unstable assertion: assertEquals(false, functionType0.isConstructor());
      //  // Unstable assertion: assertEquals(false, functionType0.isNoObjectType());
      //  // Unstable assertion: assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      //  // Unstable assertion: assertEquals(false, functionType0.isEnumType());
      //  // Unstable assertion: assertEquals(false, functionType0.isTemplateType());
      //  // Unstable assertion: assertEquals(false, functionType0.isNoResolvedType());
      //  // Unstable assertion: assertEquals(true, functionType0.isFunctionType());
      //  // Unstable assertion: assertEquals(false, functionType0.hasInstanceType());
      //  // Unstable assertion: assertEquals(true, functionType0.hasCachedValues());
      //  // Unstable assertion: assertEquals(3, functionType0.getMaxArguments());
      //  // Unstable assertion: assertEquals(false, functionType0.isInterface());
      //  // Unstable assertion: assertEquals(false, functionType0.isCheckedUnknownType());
      //  // Unstable assertion: assertEquals(false, functionType0.isEnumElementType());
      //  // Unstable assertion: assertEquals(false, functionType0.isNominalConstructor());
      //  // Unstable assertion: assertEquals(false, functionType0.isFunctionPrototypeType());
      //  // Unstable assertion: assertEquals(true, functionType0.isOrdinaryFunction());
      //  // Unstable assertion: assertEquals(false, functionType0.isResolved());
      //  // Unstable assertion: assertEquals(false, functionType0.isVoidType());
      //  // Unstable assertion: assertEquals(0, functionType0.getExtendedInterfacesCount());
      //  // Unstable assertion: assertEquals(false, functionType0.isReturnTypeInferred());
      //  // Unstable assertion: assertEquals(false, functionType0.isRecordType());
      //  // Unstable assertion: assertEquals(false, functionType0.isNominalType());
      //  // Unstable assertion: assertEquals(false, functionType0.isAllType());
      //  // Unstable assertion: assertEquals(false, functionType0.isStringValueType());
      //  // Unstable assertion: assertEquals(false, functionType0.isNoType());
      //  // Unstable assertion: assertEquals(false, functionType0.isParameterizedType());
      //  // Unstable assertion: assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      //  // Unstable assertion: assertNotNull(string1);
      //  // Unstable assertion: assertEquals("function ({13}, {13}, {13}): {-309002497}", string1);
      //  // Unstable assertion: assertFalse(string1.equals((Object)string0));
      //  // Unstable assertion: assertFalse(string0.equals((Object)string1));
  }

  @Test
  public void test02()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      //  // Unstable assertion: assertNotNull(simpleErrorReporter0);
      
      boolean boolean0 = false;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0, boolean0);
      //  // Unstable assertion: assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      //  // Unstable assertion: assertNotNull(jSTypeRegistry0);
      
      String string0 = "protoyp";
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, string0);
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isEnumType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isNullType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isResolved());
      //  // Unstable assertion: assertEquals(true, errorFunctionType0.isNominalConstructor());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isNoType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isNoResolvedType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isEnumElementType());
      //  // Unstable assertion: assertEquals(true, errorFunctionType0.hasInstanceType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isUnionType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isBooleanValueType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isNumberValueType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isAllType());
      //  // Unstable assertion: assertEquals(true, errorFunctionType0.isConstructor());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isRecordType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isVoidType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.hasCachedValues());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isReturnTypeInferred());
      //  // Unstable assertion: assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isStringValueType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isFunctionPrototypeType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isNominalType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isInterface());
      //  // Unstable assertion: assertEquals(true, errorFunctionType0.isFunctionType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isParameterizedType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isTemplateType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isNoObjectType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isCheckedUnknownType());
      //  // Unstable assertion: assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      //  // Unstable assertion: assertEquals(true, errorFunctionType0.canBeCalled());
      //  // Unstable assertion: assertEquals(3, errorFunctionType0.getMaxArguments());
      //  // Unstable assertion: assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      //  // Unstable assertion: assertNotNull(errorFunctionType0);
      
      int int0 = 1523;
      FunctionType functionType0 = errorFunctionType0.getBindReturnType(int0);
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isEnumType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isNullType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isResolved());
      //  // Unstable assertion: assertEquals(true, errorFunctionType0.isNominalConstructor());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isNoType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isNoResolvedType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isEnumElementType());
      //  // Unstable assertion: assertEquals(true, errorFunctionType0.hasInstanceType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isUnionType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isBooleanValueType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isNumberValueType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isAllType());
      //  // Unstable assertion: assertEquals(true, errorFunctionType0.isConstructor());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isRecordType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isVoidType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.hasCachedValues());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isReturnTypeInferred());
      //  // Unstable assertion: assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isStringValueType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isFunctionPrototypeType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isNominalType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isInterface());
      //  // Unstable assertion: assertEquals(true, errorFunctionType0.isFunctionType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isParameterizedType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isTemplateType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isNoObjectType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isCheckedUnknownType());
      //  // Unstable assertion: assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      //  // Unstable assertion: assertEquals(true, errorFunctionType0.canBeCalled());
      //  // Unstable assertion: assertEquals(3, errorFunctionType0.getMaxArguments());
      //  // Unstable assertion: assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      //  // Unstable assertion: assertEquals(0, functionType0.getMaxArguments());
      //  // Unstable assertion: assertEquals(false, functionType0.isTemplateType());
      //  // Unstable assertion: assertEquals(true, functionType0.isOrdinaryFunction());
      //  // Unstable assertion: assertEquals(false, functionType0.isStringValueType());
      //  // Unstable assertion: assertEquals(false, functionType0.isNominalConstructor());
      //  // Unstable assertion: assertEquals(0, functionType0.getExtendedInterfacesCount());
      //  // Unstable assertion: assertEquals(false, functionType0.isNoObjectType());
      //  // Unstable assertion: assertEquals(false, functionType0.isBooleanValueType());
      //  // Unstable assertion: assertEquals(false, functionType0.isVoidType());
      //  // Unstable assertion: assertEquals(false, functionType0.isInterface());
      //  // Unstable assertion: assertEquals(false, functionType0.isAllType());
      //  // Unstable assertion: assertEquals(false, functionType0.isEnumType());
      //  // Unstable assertion: assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      //  // Unstable assertion: assertEquals(false, functionType0.isParameterizedType());
      //  // Unstable assertion: assertEquals(false, functionType0.isReturnTypeInferred());
      //  // Unstable assertion: assertEquals(false, functionType0.isUnionType());
      //  // Unstable assertion: assertEquals(false, functionType0.isCheckedUnknownType());
      //  // Unstable assertion: assertEquals(false, functionType0.hasCachedValues());
      //  // Unstable assertion: assertEquals(true, functionType0.isFunctionType());
      //  // Unstable assertion: assertEquals(false, functionType0.isNoResolvedType());
      //  // Unstable assertion: assertEquals(false, functionType0.isNumberValueType());
      //  // Unstable assertion: assertEquals(false, functionType0.isEnumElementType());
      //  // Unstable assertion: assertEquals(true, functionType0.canBeCalled());
      //  // Unstable assertion: assertEquals(false, functionType0.isNullType());
      //  // Unstable assertion: assertEquals(false, functionType0.isNominalType());
      //  // Unstable assertion: assertEquals(false, functionType0.isNoType());
      //  // Unstable assertion: assertEquals(false, functionType0.isRecordType());
      //  // Unstable assertion: assertEquals(false, functionType0.isResolved());
      //  // Unstable assertion: assertEquals(false, functionType0.hasInstanceType());
      //  // Unstable assertion: assertEquals(false, functionType0.isConstructor());
      //  // Unstable assertion: assertEquals(false, functionType0.isFunctionPrototypeType());
      //  // Unstable assertion: assertNotNull(functionType0);
      
      String string1 = functionType0.toDebugHashCodeString();
      //  // Unstable assertion: assertNotSame(string0, string1);
      //  // Unstable assertion: assertNotSame(string1, string0);
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isEnumType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isNullType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isResolved());
      //  // Unstable assertion: assertEquals(true, errorFunctionType0.isNominalConstructor());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isNoType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isNoResolvedType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isEnumElementType());
      //  // Unstable assertion: assertEquals(true, errorFunctionType0.hasInstanceType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isUnionType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isBooleanValueType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isNumberValueType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isAllType());
      //  // Unstable assertion: assertEquals(true, errorFunctionType0.isConstructor());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isRecordType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isVoidType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isReturnTypeInferred());
      //  // Unstable assertion: assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isStringValueType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isFunctionPrototypeType());
      //  // Unstable assertion: assertEquals(true, errorFunctionType0.hasCachedValues());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isNominalType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isInterface());
      //  // Unstable assertion: assertEquals(true, errorFunctionType0.isFunctionType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isParameterizedType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isTemplateType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isNoObjectType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isCheckedUnknownType());
      //  // Unstable assertion: assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      //  // Unstable assertion: assertEquals(true, errorFunctionType0.canBeCalled());
      //  // Unstable assertion: assertEquals(3, errorFunctionType0.getMaxArguments());
      //  // Unstable assertion: assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      //  // Unstable assertion: assertEquals(0, functionType0.getMaxArguments());
      //  // Unstable assertion: assertEquals(false, functionType0.isTemplateType());
      //  // Unstable assertion: assertEquals(true, functionType0.isOrdinaryFunction());
      //  // Unstable assertion: assertEquals(false, functionType0.isStringValueType());
      //  // Unstable assertion: assertEquals(false, functionType0.isNominalConstructor());
      //  // Unstable assertion: assertEquals(0, functionType0.getExtendedInterfacesCount());
      //  // Unstable assertion: assertEquals(false, functionType0.isNoObjectType());
      //  // Unstable assertion: assertEquals(false, functionType0.isBooleanValueType());
      //  // Unstable assertion: assertEquals(false, functionType0.isVoidType());
      //  // Unstable assertion: assertEquals(false, functionType0.isInterface());
      //  // Unstable assertion: assertEquals(false, functionType0.isAllType());
      //  // Unstable assertion: assertEquals(true, functionType0.hasCachedValues());
      //  // Unstable assertion: assertEquals(false, functionType0.isEnumType());
      //  // Unstable assertion: assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      //  // Unstable assertion: assertEquals(false, functionType0.isParameterizedType());
      //  // Unstable assertion: assertEquals(false, functionType0.isReturnTypeInferred());
      //  // Unstable assertion: assertEquals(false, functionType0.isUnionType());
      //  // Unstable assertion: assertEquals(false, functionType0.isCheckedUnknownType());
      //  // Unstable assertion: assertEquals(true, functionType0.isFunctionType());
      //  // Unstable assertion: assertEquals(false, functionType0.isNoResolvedType());
      //  // Unstable assertion: assertEquals(false, functionType0.isNumberValueType());
      //  // Unstable assertion: assertEquals(false, functionType0.isEnumElementType());
      //  // Unstable assertion: assertEquals(true, functionType0.canBeCalled());
      //  // Unstable assertion: assertEquals(false, functionType0.isNullType());
      //  // Unstable assertion: assertEquals(false, functionType0.isNominalType());
      //  // Unstable assertion: assertEquals(false, functionType0.isNoType());
      //  // Unstable assertion: assertEquals(false, functionType0.isRecordType());
      //  // Unstable assertion: assertEquals(false, functionType0.isResolved());
      //  // Unstable assertion: assertEquals(false, functionType0.hasInstanceType());
      //  // Unstable assertion: assertEquals(false, functionType0.isConstructor());
      //  // Unstable assertion: assertEquals(false, functionType0.isFunctionPrototypeType());
      //  // Unstable assertion: assertNotNull(string1);
      //  // Unstable assertion: assertEquals("function (): {-309002497}", string1);
      //  // Unstable assertion: assertFalse(string0.equals((Object)string1));
      //  // Unstable assertion: assertFalse(string1.equals((Object)string0));
  }

  @Test
  public void test03() {}
//   @Test
//   public void test03()  throws Throwable  {
//       SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
//       assertNotNull(simpleErrorReporter0);
//       
//       boolean boolean0 = false;
//       JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0, boolean0);
//       assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
//       assertNotNull(jSTypeRegistry0);
//       
//       String string0 = "dy-LTc+cK.&yC";
//       ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, string0);
//       assertEquals(false, errorFunctionType0.isCheckedUnknownType());
//       assertEquals(true, errorFunctionType0.isNominalConstructor());
//       assertEquals(false, errorFunctionType0.hasCachedValues());
//       assertEquals(false, errorFunctionType0.isBooleanValueType());
//       assertEquals(false, errorFunctionType0.isVoidType());
//       assertEquals(false, errorFunctionType0.isResolved());
//       assertEquals(false, errorFunctionType0.isOrdinaryFunction());
//       assertEquals(false, errorFunctionType0.isNoType());
//       assertEquals(false, errorFunctionType0.isAllType());
//       assertEquals(false, errorFunctionType0.isStringValueType());
//       assertEquals(false, errorFunctionType0.isEnumElementType());
//       assertEquals(false, errorFunctionType0.isNullType());
//       assertEquals(true, errorFunctionType0.canBeCalled());
//       assertEquals(false, errorFunctionType0.isInterface());
//       assertEquals(false, errorFunctionType0.isFunctionPrototypeType());
//       assertEquals(true, errorFunctionType0.isFunctionType());
//       assertEquals(false, errorFunctionType0.isNominalType());
//       assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
//       assertEquals(false, errorFunctionType0.isParameterizedType());
//       assertEquals(3, errorFunctionType0.getMaxArguments());
//       assertEquals(true, errorFunctionType0.hasInstanceType());
//       assertEquals(false, errorFunctionType0.isRecordType());
//       assertEquals(false, errorFunctionType0.isEnumType());
//       assertEquals(false, errorFunctionType0.isNumberValueType());
//       assertEquals(false, errorFunctionType0.isTemplateType());
//       assertEquals(false, errorFunctionType0.isNoObjectType());
//       assertEquals(false, errorFunctionType0.isReturnTypeInferred());
//       assertEquals(false, errorFunctionType0.isNoResolvedType());
//       assertEquals(false, errorFunctionType0.isUnionType());
//       assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
//       assertEquals(true, errorFunctionType0.isConstructor());
//       assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
//       assertNotNull(errorFunctionType0);
//       
//       String string1 = errorFunctionType0.toDebugHashCodeString();
//       assertNotSame(string1, string0);
//       assertNotSame(string0, string1);
//       assertEquals(false, errorFunctionType0.isCheckedUnknownType());
//       assertEquals(true, errorFunctionType0.isNominalConstructor());
//       assertEquals(true, errorFunctionType0.hasCachedValues());
//       assertEquals(false, errorFunctionType0.isBooleanValueType());
//       assertEquals(false, errorFunctionType0.isVoidType());
//       assertEquals(false, errorFunctionType0.isResolved());
//       assertEquals(false, errorFunctionType0.isOrdinaryFunction());
//       assertEquals(false, errorFunctionType0.isNoType());
//       assertEquals(false, errorFunctionType0.isAllType());
//       assertEquals(false, errorFunctionType0.isStringValueType());
//       assertEquals(false, errorFunctionType0.isEnumElementType());
//       assertEquals(false, errorFunctionType0.isNullType());
//       assertEquals(true, errorFunctionType0.canBeCalled());
//       assertEquals(false, errorFunctionType0.isInterface());
//       assertEquals(false, errorFunctionType0.isFunctionPrototypeType());
//       assertEquals(true, errorFunctionType0.isFunctionType());
//       assertEquals(false, errorFunctionType0.isNominalType());
//       assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
//       assertEquals(false, errorFunctionType0.isParameterizedType());
//       assertEquals(3, errorFunctionType0.getMaxArguments());
//       assertEquals(true, errorFunctionType0.hasInstanceType());
//       assertEquals(false, errorFunctionType0.isRecordType());
//       assertEquals(false, errorFunctionType0.isEnumType());
//       assertEquals(false, errorFunctionType0.isNumberValueType());
//       assertEquals(false, errorFunctionType0.isTemplateType());
//       assertEquals(false, errorFunctionType0.isNoObjectType());
//       assertEquals(false, errorFunctionType0.isReturnTypeInferred());
//       assertEquals(false, errorFunctionType0.isNoResolvedType());
//       assertEquals(false, errorFunctionType0.isUnionType());
//       assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
//       assertEquals(true, errorFunctionType0.isConstructor());
//       assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
//       assertNotNull(string1);
//       assertEquals("function (this:{-494821678}, {13}, {13}, {13}): {-494821678}", string1);
//       assertFalse(string1.equals((Object)string0));
//       assertFalse(string0.equals((Object)string1));
//   }

  @Test
  public void test04()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      //  // Unstable assertion: assertNotNull(simpleErrorReporter0);
      
      boolean boolean0 = false;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0, boolean0);
      //  // Unstable assertion: assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      //  // Unstable assertion: assertNotNull(jSTypeRegistry0);
      
      String string0 = "dy-LTc+cK.&yC";
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, string0);
      //  // Unstable assertion: assertEquals(true, errorFunctionType0.hasInstanceType());
      //  // Unstable assertion: assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isTemplateType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isNoResolvedType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isRecordType());
      //  // Unstable assertion: assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isNullType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isNumberValueType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isEnumType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isInterface());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isNoType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isResolved());
      //  // Unstable assertion: assertEquals(3, errorFunctionType0.getMaxArguments());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isFunctionPrototypeType());
      //  // Unstable assertion: assertEquals(true, errorFunctionType0.isConstructor());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isNoObjectType());
      //  // Unstable assertion: assertEquals(true, errorFunctionType0.canBeCalled());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.hasCachedValues());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isReturnTypeInferred());
      //  // Unstable assertion: assertEquals(true, errorFunctionType0.isFunctionType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isCheckedUnknownType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isNominalType());
      //  // Unstable assertion: assertEquals(true, errorFunctionType0.isNominalConstructor());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isVoidType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isUnionType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isParameterizedType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isStringValueType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isEnumElementType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isBooleanValueType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isAllType());
      //  // Unstable assertion: assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      //  // Unstable assertion: assertNotNull(errorFunctionType0);
      
      FunctionType functionType0 = errorFunctionType0.cloneWithoutArrowType();
      //  // Unstable assertion: assertEquals(false, functionType0.isNoResolvedType());
      //  // Unstable assertion: assertEquals(false, functionType0.isNumberValueType());
      //  // Unstable assertion: assertEquals(false, functionType0.isUnionType());
      //  // Unstable assertion: assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      //  // Unstable assertion: assertEquals(false, functionType0.isBooleanValueType());
      //  // Unstable assertion: assertEquals(true, functionType0.canBeCalled());
      //  // Unstable assertion: assertEquals(false, functionType0.isAllType());
      //  // Unstable assertion: assertEquals(2147483647, functionType0.getMaxArguments());
      //  // Unstable assertion: assertEquals(true, functionType0.hasCachedValues());
      //  // Unstable assertion: assertEquals(true, functionType0.isConstructor());
      //  // Unstable assertion: assertEquals(false, functionType0.isStringValueType());
      //  // Unstable assertion: assertEquals(false, functionType0.isTemplateType());
      //  // Unstable assertion: assertEquals(false, functionType0.isNominalType());
      //  // Unstable assertion: assertEquals(true, functionType0.isFunctionType());
      //  // Unstable assertion: assertEquals(false, functionType0.isNoType());
      //  // Unstable assertion: assertEquals(false, functionType0.isNoObjectType());
      //  // Unstable assertion: assertEquals(false, functionType0.isResolved());
      //  // Unstable assertion: assertEquals(false, functionType0.isEnumType());
      //  // Unstable assertion: assertEquals(false, functionType0.isParameterizedType());
      //  // Unstable assertion: assertEquals(false, functionType0.isReturnTypeInferred());
      //  // Unstable assertion: assertEquals(false, functionType0.isVoidType());
      //  // Unstable assertion: assertEquals(false, functionType0.isNominalConstructor());
      //  // Unstable assertion: assertEquals(true, functionType0.hasInstanceType());
      //  // Unstable assertion: assertEquals(false, functionType0.isInterface());
      //  // Unstable assertion: assertEquals(false, functionType0.isRecordType());
      //  // Unstable assertion: assertEquals(false, functionType0.isOrdinaryFunction());
      //  // Unstable assertion: assertEquals(false, functionType0.isNullType());
      //  // Unstable assertion: assertEquals(false, functionType0.isEnumElementType());
      //  // Unstable assertion: assertEquals(false, functionType0.isCheckedUnknownType());
      //  // Unstable assertion: assertEquals(false, functionType0.isFunctionPrototypeType());
      //  // Unstable assertion: assertEquals(0, functionType0.getExtendedInterfacesCount());
      //  // Unstable assertion: assertEquals(true, errorFunctionType0.hasInstanceType());
      //  // Unstable assertion: assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isTemplateType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isNoResolvedType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isRecordType());
      //  // Unstable assertion: assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isNullType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isNumberValueType());
      //  // Unstable assertion: assertEquals(true, errorFunctionType0.hasCachedValues());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isEnumType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isInterface());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isNoType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isResolved());
      //  // Unstable assertion: assertEquals(3, errorFunctionType0.getMaxArguments());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isFunctionPrototypeType());
      //  // Unstable assertion: assertEquals(true, errorFunctionType0.isConstructor());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isNoObjectType());
      //  // Unstable assertion: assertEquals(true, errorFunctionType0.canBeCalled());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isReturnTypeInferred());
      //  // Unstable assertion: assertEquals(true, errorFunctionType0.isFunctionType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isCheckedUnknownType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isNominalType());
      //  // Unstable assertion: assertEquals(true, errorFunctionType0.isNominalConstructor());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isVoidType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isUnionType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isParameterizedType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isStringValueType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isEnumElementType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isBooleanValueType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isAllType());
      //  // Unstable assertion: assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      //  // Unstable assertion: assertNotNull(functionType0);
      
      ErrorFunctionType errorFunctionType1 = (ErrorFunctionType)JSType.safeResolve(errorFunctionType0, simpleErrorReporter0, errorFunctionType0);
      //  // Unstable assertion: assertSame(errorFunctionType1, errorFunctionType0);
      //  // Unstable assertion: assertSame(errorFunctionType0, errorFunctionType1);
      //  // Unstable assertion: assertEquals(true, errorFunctionType1.isFunctionType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType1.isNumberValueType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType1.isUnionType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType1.isBooleanValueType());
      //  // Unstable assertion: assertEquals(true, errorFunctionType1.isResolved());
      //  // Unstable assertion: assertEquals(false, errorFunctionType1.isTemplateType());
      //  // Unstable assertion: assertEquals(true, errorFunctionType1.hasInstanceType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType1.isEnumElementType());
      //  // Unstable assertion: assertEquals(true, errorFunctionType1.hasCachedValues());
      //  // Unstable assertion: assertEquals(3, errorFunctionType1.getMaxArguments());
      //  // Unstable assertion: assertEquals(0, errorFunctionType1.getExtendedInterfacesCount());
      //  // Unstable assertion: assertEquals(false, errorFunctionType1.isParameterizedType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType1.isFunctionPrototypeType());
      //  // Unstable assertion: assertEquals(BooleanLiteralSet.TRUE, errorFunctionType1.getPossibleToBooleanOutcomes());
      //  // Unstable assertion: assertEquals(false, errorFunctionType1.isReturnTypeInferred());
      //  // Unstable assertion: assertEquals(false, errorFunctionType1.isStringValueType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType1.isCheckedUnknownType());
      //  // Unstable assertion: assertEquals(true, errorFunctionType1.canBeCalled());
      //  // Unstable assertion: assertEquals(false, errorFunctionType1.isEnumType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType1.isNoType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType1.isOrdinaryFunction());
      //  // Unstable assertion: assertEquals(false, errorFunctionType1.isNullType());
      //  // Unstable assertion: assertEquals(true, errorFunctionType1.isConstructor());
      //  // Unstable assertion: assertEquals(false, errorFunctionType1.isNoObjectType());
      //  // Unstable assertion: assertEquals(true, errorFunctionType1.isNominalConstructor());
      //  // Unstable assertion: assertEquals(false, errorFunctionType1.isNoResolvedType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType1.isInterface());
      //  // Unstable assertion: assertEquals(false, errorFunctionType1.isAllType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType1.isRecordType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType1.isNominalType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType1.isVoidType());
      //  // Unstable assertion: assertEquals(true, errorFunctionType0.hasInstanceType());
      //  // Unstable assertion: assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isTemplateType());
      //  // Unstable assertion: assertEquals(true, errorFunctionType0.isResolved());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isNoResolvedType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isRecordType());
      //  // Unstable assertion: assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isNullType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isNumberValueType());
      //  // Unstable assertion: assertEquals(true, errorFunctionType0.hasCachedValues());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isEnumType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isInterface());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isNoType());
      //  // Unstable assertion: assertEquals(3, errorFunctionType0.getMaxArguments());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isFunctionPrototypeType());
      //  // Unstable assertion: assertEquals(true, errorFunctionType0.isConstructor());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isNoObjectType());
      //  // Unstable assertion: assertEquals(true, errorFunctionType0.canBeCalled());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isReturnTypeInferred());
      //  // Unstable assertion: assertEquals(true, errorFunctionType0.isFunctionType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isCheckedUnknownType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isNominalType());
      //  // Unstable assertion: assertEquals(true, errorFunctionType0.isNominalConstructor());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isVoidType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isUnionType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isParameterizedType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isStringValueType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isEnumElementType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isBooleanValueType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isAllType());
      //  // Unstable assertion: assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      //  // Unstable assertion: assertNotNull(errorFunctionType1);
  }

  @Test
  public void test05()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      String string0 = "";
      boolean boolean0 = false;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0, boolean0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, string0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, errorFunctionType0.isCheckedUnknownType());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertEquals(false, errorFunctionType0.isAllType());
      assertEquals(false, errorFunctionType0.isEnumElementType());
      assertEquals(true, errorFunctionType0.isConstructor());
      assertEquals(false, errorFunctionType0.isNoObjectType());
      assertEquals(false, errorFunctionType0.isTemplateType());
      assertEquals(false, errorFunctionType0.isNullType());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, errorFunctionType0.isRecordType());
      assertEquals(false, errorFunctionType0.isInterface());
      assertEquals(false, errorFunctionType0.isNominalType());
      assertEquals(false, errorFunctionType0.isUnionType());
      assertEquals(false, errorFunctionType0.isBooleanValueType());
      assertEquals(true, errorFunctionType0.canBeCalled());
      assertEquals(false, errorFunctionType0.hasCachedValues());
      assertEquals(3, errorFunctionType0.getMaxArguments());
      assertEquals(true, errorFunctionType0.isFunctionType());
      assertEquals(false, errorFunctionType0.isReturnTypeInferred());
      assertEquals(false, errorFunctionType0.isResolved());
      assertEquals(false, errorFunctionType0.isFunctionPrototypeType());
      assertEquals(false, errorFunctionType0.isEnumType());
      assertEquals(false, errorFunctionType0.isVoidType());
      assertEquals(false, errorFunctionType0.isStringValueType());
      assertEquals(false, errorFunctionType0.isNoType());
      assertEquals(true, errorFunctionType0.hasInstanceType());
      assertEquals(true, errorFunctionType0.isNominalConstructor());
      assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      assertEquals(false, errorFunctionType0.isNoResolvedType());
      assertEquals(false, errorFunctionType0.isParameterizedType());
      assertEquals(false, errorFunctionType0.isNumberValueType());
      assertNotNull(errorFunctionType0);
      
      boolean boolean1 = errorFunctionType0.isSubtype((JSType) errorFunctionType0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, errorFunctionType0.isCheckedUnknownType());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertEquals(false, errorFunctionType0.isAllType());
      assertEquals(false, errorFunctionType0.isEnumElementType());
      assertEquals(true, errorFunctionType0.isConstructor());
      assertEquals(false, errorFunctionType0.isNoObjectType());
      assertEquals(false, errorFunctionType0.isTemplateType());
      assertEquals(false, errorFunctionType0.isNullType());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, errorFunctionType0.isRecordType());
      assertEquals(false, errorFunctionType0.isInterface());
      assertEquals(false, errorFunctionType0.isNominalType());
      assertEquals(false, errorFunctionType0.isUnionType());
      assertEquals(false, errorFunctionType0.isBooleanValueType());
      assertEquals(true, errorFunctionType0.canBeCalled());
      assertEquals(3, errorFunctionType0.getMaxArguments());
      assertEquals(true, errorFunctionType0.isFunctionType());
      assertEquals(false, errorFunctionType0.isReturnTypeInferred());
      assertEquals(false, errorFunctionType0.isResolved());
      assertEquals(false, errorFunctionType0.isFunctionPrototypeType());
      assertEquals(false, errorFunctionType0.isEnumType());
      assertEquals(false, errorFunctionType0.isVoidType());
      assertEquals(false, errorFunctionType0.isStringValueType());
      assertEquals(true, errorFunctionType0.hasCachedValues());
      assertEquals(false, errorFunctionType0.isNoType());
      assertEquals(true, errorFunctionType0.hasInstanceType());
      assertEquals(true, errorFunctionType0.isNominalConstructor());
      assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      assertEquals(false, errorFunctionType0.isNoResolvedType());
      assertEquals(false, errorFunctionType0.isParameterizedType());
      assertEquals(false, errorFunctionType0.isNumberValueType());
      assertTrue(boolean1);
      assertFalse(boolean0 == boolean1);
      assertFalse(boolean1 == boolean0);
      
      boolean boolean2 = errorFunctionType0.hasCachedValues();
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, errorFunctionType0.isCheckedUnknownType());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertEquals(false, errorFunctionType0.isAllType());
      assertEquals(false, errorFunctionType0.isEnumElementType());
      assertEquals(true, errorFunctionType0.isConstructor());
      assertEquals(false, errorFunctionType0.isNoObjectType());
      assertEquals(false, errorFunctionType0.isTemplateType());
      assertEquals(false, errorFunctionType0.isNullType());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, errorFunctionType0.isRecordType());
      assertEquals(false, errorFunctionType0.isInterface());
      assertEquals(false, errorFunctionType0.isNominalType());
      assertEquals(false, errorFunctionType0.isUnionType());
      assertEquals(false, errorFunctionType0.isBooleanValueType());
      assertEquals(true, errorFunctionType0.canBeCalled());
      assertEquals(3, errorFunctionType0.getMaxArguments());
      assertEquals(true, errorFunctionType0.isFunctionType());
      assertEquals(false, errorFunctionType0.isReturnTypeInferred());
      assertEquals(false, errorFunctionType0.isResolved());
      assertEquals(false, errorFunctionType0.isFunctionPrototypeType());
      assertEquals(false, errorFunctionType0.isEnumType());
      assertEquals(false, errorFunctionType0.isVoidType());
      assertEquals(false, errorFunctionType0.isStringValueType());
      assertEquals(true, errorFunctionType0.hasCachedValues());
      assertEquals(false, errorFunctionType0.isNoType());
      assertEquals(true, errorFunctionType0.hasInstanceType());
      assertEquals(true, errorFunctionType0.isNominalConstructor());
      assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      assertEquals(false, errorFunctionType0.isNoResolvedType());
      assertEquals(false, errorFunctionType0.isParameterizedType());
      assertEquals(false, errorFunctionType0.isNumberValueType());
      assertTrue(boolean2);
      assertFalse(boolean0 == boolean1);
      assertFalse(boolean0 == boolean2);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
  }

  @Test
  public void test06()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      assertEquals(true, noResolvedType0.matchesStringContext());
      assertEquals(false, noResolvedType0.isNoObjectType());
      assertEquals(false, noResolvedType0.isVoidType());
      assertEquals(false, noResolvedType0.isReturnTypeInferred());
      assertEquals(true, noResolvedType0.isConstructor());
      assertEquals(false, noResolvedType0.isNominalConstructor());
      assertEquals(false, noResolvedType0.isNumberValueType());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertEquals(false, noResolvedType0.isFunctionType());
      assertEquals(false, noResolvedType0.isNominalType());
      assertEquals(true, noResolvedType0.canBeCalled());
      assertEquals(2147483647, noResolvedType0.getMaxArguments());
      assertEquals(false, noResolvedType0.isStringValueType());
      assertEquals(false, noResolvedType0.isCheckedUnknownType());
      assertEquals(false, noResolvedType0.isBooleanValueType());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noResolvedType0.isAllType());
      assertEquals(false, noResolvedType0.isParameterizedType());
      assertEquals(false, noResolvedType0.isUnionType());
      assertNull(noResolvedType0.getReferenceName());
      assertEquals(false, noResolvedType0.isEnumElementType());
      assertEquals(false, noResolvedType0.isTemplateType());
      assertEquals(false, noResolvedType0.isNullType());
      assertEquals(false, noResolvedType0.isOrdinaryFunction());
      assertEquals(true, noResolvedType0.hasInstanceType());
      assertEquals(false, noResolvedType0.isInterface());
      assertEquals(true, noResolvedType0.matchesNumberContext());
      assertEquals(false, noResolvedType0.isResolved());
      assertEquals(false, noResolvedType0.hasCachedValues());
      assertEquals(false, noResolvedType0.isEnumType());
      assertEquals(true, noResolvedType0.matchesObjectContext());
      assertEquals(false, noResolvedType0.isRecordType());
      assertEquals(2147483647, noResolvedType0.getPropertiesCount());
      assertEquals(false, noResolvedType0.isFunctionPrototypeType());
      assertEquals(true, noResolvedType0.isNullable());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(noResolvedType0);
      
      String string0 = "this:";
      NoResolvedType noResolvedType1 = (NoResolvedType)noResolvedType0.getTopMostDefiningType(string0);
      assertSame(noResolvedType0, noResolvedType1);
      assertSame(noResolvedType1, noResolvedType0);
      assertEquals(true, noResolvedType0.matchesStringContext());
      assertEquals(false, noResolvedType0.isNoObjectType());
      assertEquals(false, noResolvedType0.isVoidType());
      assertEquals(false, noResolvedType0.isReturnTypeInferred());
      assertEquals(true, noResolvedType0.isConstructor());
      assertEquals(false, noResolvedType0.isNominalConstructor());
      assertEquals(false, noResolvedType0.isNumberValueType());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertEquals(false, noResolvedType0.isFunctionType());
      assertEquals(false, noResolvedType0.isNominalType());
      assertEquals(true, noResolvedType0.canBeCalled());
      assertEquals(2147483647, noResolvedType0.getMaxArguments());
      assertEquals(false, noResolvedType0.isStringValueType());
      assertEquals(false, noResolvedType0.isCheckedUnknownType());
      assertEquals(false, noResolvedType0.isBooleanValueType());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noResolvedType0.isAllType());
      assertEquals(false, noResolvedType0.isParameterizedType());
      assertEquals(false, noResolvedType0.isUnionType());
      assertNull(noResolvedType0.getReferenceName());
      assertEquals(false, noResolvedType0.isEnumElementType());
      assertEquals(true, noResolvedType0.hasCachedValues());
      assertEquals(false, noResolvedType0.isTemplateType());
      assertEquals(false, noResolvedType0.isNullType());
      assertEquals(false, noResolvedType0.isOrdinaryFunction());
      assertEquals(true, noResolvedType0.hasInstanceType());
      assertEquals(false, noResolvedType0.isInterface());
      assertEquals(true, noResolvedType0.matchesNumberContext());
      assertEquals(false, noResolvedType0.isResolved());
      assertEquals(false, noResolvedType0.isEnumType());
      assertEquals(true, noResolvedType0.matchesObjectContext());
      assertEquals(false, noResolvedType0.isRecordType());
      assertEquals(2147483647, noResolvedType0.getPropertiesCount());
      assertEquals(false, noResolvedType0.isFunctionPrototypeType());
      assertEquals(true, noResolvedType0.isNullable());
      assertEquals(true, noResolvedType1.hasInstanceType());
      assertEquals(false, noResolvedType1.isFunctionType());
      assertEquals(false, noResolvedType1.isNullType());
      assertEquals(false, noResolvedType1.isNoObjectType());
      assertEquals(false, noResolvedType1.isOrdinaryFunction());
      assertEquals(true, noResolvedType1.isConstructor());
      assertEquals(false, noResolvedType1.isReturnTypeInferred());
      assertEquals(false, noResolvedType1.isEnumType());
      assertEquals(true, noResolvedType1.matchesStringContext());
      assertEquals(true, noResolvedType1.matchesObjectContext());
      assertEquals(false, noResolvedType1.isParameterizedType());
      assertEquals(false, noResolvedType1.isBooleanValueType());
      assertEquals(true, noResolvedType1.isNullable());
      assertEquals(false, noResolvedType1.isInterface());
      assertEquals(false, noResolvedType1.isResolved());
      assertNull(noResolvedType1.getReferenceName());
      assertEquals(false, noResolvedType1.isStringValueType());
      assertEquals(false, noResolvedType1.isFunctionPrototypeType());
      assertEquals(false, noResolvedType1.isAllType());
      assertEquals(2147483647, noResolvedType1.getMaxArguments());
      assertEquals(false, noResolvedType1.isNominalType());
      assertEquals(false, noResolvedType1.isVoidType());
      assertEquals(true, noResolvedType1.matchesNumberContext());
      assertEquals(false, noResolvedType1.isNumberValueType());
      assertEquals(false, noResolvedType1.isCheckedUnknownType());
      assertEquals(2147483647, noResolvedType1.getPropertiesCount());
      assertEquals(true, noResolvedType1.hasCachedValues());
      assertEquals(false, noResolvedType1.isNominalConstructor());
      assertEquals(0, noResolvedType1.getExtendedInterfacesCount());
      assertEquals(false, noResolvedType1.isUnionType());
      assertEquals(false, noResolvedType1.isTemplateType());
      assertEquals(true, noResolvedType1.canBeCalled());
      assertEquals(false, noResolvedType1.isRecordType());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType1.getPossibleToBooleanOutcomes());
      assertEquals(false, noResolvedType1.isEnumElementType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(noResolvedType1);
      
      boolean boolean0 = noResolvedType1.hasCachedValues();
      assertSame(noResolvedType0, noResolvedType1);
      assertSame(noResolvedType1, noResolvedType0);
      assertEquals(true, noResolvedType0.matchesStringContext());
      assertEquals(false, noResolvedType0.isNoObjectType());
      assertEquals(false, noResolvedType0.isVoidType());
      assertEquals(false, noResolvedType0.isReturnTypeInferred());
      assertEquals(true, noResolvedType0.isConstructor());
      assertEquals(false, noResolvedType0.isNominalConstructor());
      assertEquals(false, noResolvedType0.isNumberValueType());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertEquals(false, noResolvedType0.isFunctionType());
      assertEquals(false, noResolvedType0.isNominalType());
      assertEquals(true, noResolvedType0.canBeCalled());
      assertEquals(2147483647, noResolvedType0.getMaxArguments());
      assertEquals(false, noResolvedType0.isStringValueType());
      assertEquals(false, noResolvedType0.isCheckedUnknownType());
      assertEquals(false, noResolvedType0.isBooleanValueType());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noResolvedType0.isAllType());
      assertEquals(false, noResolvedType0.isParameterizedType());
      assertEquals(false, noResolvedType0.isUnionType());
      assertNull(noResolvedType0.getReferenceName());
      assertEquals(false, noResolvedType0.isEnumElementType());
      assertEquals(true, noResolvedType0.hasCachedValues());
      assertEquals(false, noResolvedType0.isTemplateType());
      assertEquals(false, noResolvedType0.isNullType());
      assertEquals(false, noResolvedType0.isOrdinaryFunction());
      assertEquals(true, noResolvedType0.hasInstanceType());
      assertEquals(false, noResolvedType0.isInterface());
      assertEquals(true, noResolvedType0.matchesNumberContext());
      assertEquals(false, noResolvedType0.isResolved());
      assertEquals(false, noResolvedType0.isEnumType());
      assertEquals(true, noResolvedType0.matchesObjectContext());
      assertEquals(false, noResolvedType0.isRecordType());
      assertEquals(2147483647, noResolvedType0.getPropertiesCount());
      assertEquals(false, noResolvedType0.isFunctionPrototypeType());
      assertEquals(true, noResolvedType0.isNullable());
      assertEquals(true, noResolvedType1.hasInstanceType());
      assertEquals(false, noResolvedType1.isFunctionType());
      assertEquals(false, noResolvedType1.isNullType());
      assertEquals(false, noResolvedType1.isNoObjectType());
      assertEquals(false, noResolvedType1.isOrdinaryFunction());
      assertEquals(true, noResolvedType1.isConstructor());
      assertEquals(false, noResolvedType1.isReturnTypeInferred());
      assertEquals(false, noResolvedType1.isEnumType());
      assertEquals(true, noResolvedType1.matchesStringContext());
      assertEquals(true, noResolvedType1.matchesObjectContext());
      assertEquals(false, noResolvedType1.isParameterizedType());
      assertEquals(false, noResolvedType1.isBooleanValueType());
      assertEquals(true, noResolvedType1.isNullable());
      assertEquals(false, noResolvedType1.isInterface());
      assertEquals(false, noResolvedType1.isResolved());
      assertNull(noResolvedType1.getReferenceName());
      assertEquals(false, noResolvedType1.isStringValueType());
      assertEquals(false, noResolvedType1.isFunctionPrototypeType());
      assertEquals(false, noResolvedType1.isAllType());
      assertEquals(2147483647, noResolvedType1.getMaxArguments());
      assertEquals(false, noResolvedType1.isNominalType());
      assertEquals(false, noResolvedType1.isVoidType());
      assertEquals(true, noResolvedType1.matchesNumberContext());
      assertEquals(false, noResolvedType1.isNumberValueType());
      assertEquals(false, noResolvedType1.isCheckedUnknownType());
      assertEquals(2147483647, noResolvedType1.getPropertiesCount());
      assertEquals(true, noResolvedType1.hasCachedValues());
      assertEquals(false, noResolvedType1.isNominalConstructor());
      assertEquals(0, noResolvedType1.getExtendedInterfacesCount());
      assertEquals(false, noResolvedType1.isUnionType());
      assertEquals(false, noResolvedType1.isTemplateType());
      assertEquals(true, noResolvedType1.canBeCalled());
      assertEquals(false, noResolvedType1.isRecordType());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType1.getPossibleToBooleanOutcomes());
      assertEquals(false, noResolvedType1.isEnumElementType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertTrue(boolean0);
  }

  @Test
  public void test07()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      boolean boolean0 = true;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0, boolean0);
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      JSTypeNative[] jSTypeNativeArray0 = new JSTypeNative[4];
      JSTypeNative jSTypeNative0 = JSTypeNative.NULL_TYPE;
      jSTypeNativeArray0[0] = jSTypeNative0;
      assertEquals("NULL_TYPE", jSTypeNativeArray0[0].name());
      assertEquals("NULL_TYPE", jSTypeNativeArray0[0].toString());
      assertEquals(15, jSTypeNativeArray0[0].ordinal());
      
      JSTypeNative jSTypeNative1 = JSTypeNative.EVAL_ERROR_TYPE;
      assertNotSame(jSTypeNative1, jSTypeNative0);
      
      jSTypeNativeArray0[1] = jSTypeNative1;
      assertEquals(11, jSTypeNativeArray0[1].ordinal());
      assertEquals("EVAL_ERROR_TYPE", jSTypeNativeArray0[1].toString());
      assertEquals("EVAL_ERROR_TYPE", jSTypeNativeArray0[1].name());
      
      // Undeclared exception!
      try {
        JSType jSType0 = jSTypeRegistry0.createUnionType(jSTypeNativeArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test08()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      boolean boolean0 = false;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0, boolean0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      String string0 = ":yLTc+cK.&y";
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      assertEquals(false, noResolvedType0.isNumberValueType());
      assertEquals(2147483647, noResolvedType0.getMaxArguments());
      assertEquals(false, noResolvedType0.isResolved());
      assertEquals(2147483647, noResolvedType0.getPropertiesCount());
      assertEquals(false, noResolvedType0.isNullType());
      assertNull(noResolvedType0.getReferenceName());
      assertEquals(true, noResolvedType0.hasInstanceType());
      assertEquals(false, noResolvedType0.isInterface());
      assertEquals(false, noResolvedType0.isAllType());
      assertEquals(false, noResolvedType0.isRecordType());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertEquals(false, noResolvedType0.isEnumElementType());
      assertEquals(false, noResolvedType0.isFunctionType());
      assertEquals(false, noResolvedType0.isNominalConstructor());
      assertEquals(false, noResolvedType0.isNoObjectType());
      assertEquals(false, noResolvedType0.isStringValueType());
      assertEquals(false, noResolvedType0.isEnumType());
      assertEquals(true, noResolvedType0.matchesNumberContext());
      assertEquals(true, noResolvedType0.matchesObjectContext());
      assertEquals(false, noResolvedType0.isReturnTypeInferred());
      assertEquals(false, noResolvedType0.isParameterizedType());
      assertEquals(false, noResolvedType0.isFunctionPrototypeType());
      assertEquals(false, noResolvedType0.isCheckedUnknownType());
      assertEquals(true, noResolvedType0.isConstructor());
      assertEquals(true, noResolvedType0.matchesStringContext());
      assertEquals(false, noResolvedType0.isVoidType());
      assertEquals(true, noResolvedType0.canBeCalled());
      assertEquals(false, noResolvedType0.isNominalType());
      assertEquals(false, noResolvedType0.isUnionType());
      assertEquals(true, noResolvedType0.isNullable());
      assertEquals(false, noResolvedType0.isOrdinaryFunction());
      assertEquals(false, noResolvedType0.hasCachedValues());
      assertEquals(false, noResolvedType0.isBooleanValueType());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noResolvedType0.isTemplateType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(noResolvedType0);
      
      int int0 = 83;
      FunctionType functionType0 = noResolvedType0.getSuperClassConstructor();
      assertEquals(false, noResolvedType0.isNumberValueType());
      assertEquals(2147483647, noResolvedType0.getMaxArguments());
      assertEquals(false, noResolvedType0.isResolved());
      assertEquals(2147483647, noResolvedType0.getPropertiesCount());
      assertEquals(false, noResolvedType0.isNullType());
      assertNull(noResolvedType0.getReferenceName());
      assertEquals(true, noResolvedType0.hasInstanceType());
      assertEquals(false, noResolvedType0.isInterface());
      assertEquals(false, noResolvedType0.isAllType());
      assertEquals(false, noResolvedType0.isRecordType());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertEquals(false, noResolvedType0.isEnumElementType());
      assertEquals(false, noResolvedType0.isFunctionType());
      assertEquals(false, noResolvedType0.isNominalConstructor());
      assertEquals(false, noResolvedType0.isNoObjectType());
      assertEquals(true, noResolvedType0.hasCachedValues());
      assertEquals(false, noResolvedType0.isStringValueType());
      assertEquals(false, noResolvedType0.isEnumType());
      assertEquals(true, noResolvedType0.matchesNumberContext());
      assertEquals(true, noResolvedType0.matchesObjectContext());
      assertEquals(false, noResolvedType0.isReturnTypeInferred());
      assertEquals(false, noResolvedType0.isParameterizedType());
      assertEquals(false, noResolvedType0.isFunctionPrototypeType());
      assertEquals(false, noResolvedType0.isCheckedUnknownType());
      assertEquals(true, noResolvedType0.isConstructor());
      assertEquals(true, noResolvedType0.matchesStringContext());
      assertEquals(false, noResolvedType0.isVoidType());
      assertEquals(true, noResolvedType0.canBeCalled());
      assertEquals(false, noResolvedType0.isNominalType());
      assertEquals(false, noResolvedType0.isUnionType());
      assertEquals(true, noResolvedType0.isNullable());
      assertEquals(false, noResolvedType0.isOrdinaryFunction());
      assertEquals(false, noResolvedType0.isBooleanValueType());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noResolvedType0.isTemplateType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNull(functionType0);
      
      Node node0 = Node.newString(string0, int0, int0);
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isStringKey());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isDec());
      assertNull(node0.getSourceFileName());
      assertEquals(true, node0.isString());
      assertEquals(83, node0.getLineno());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isNull());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isScript());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isAnd());
      assertEquals(340051, node0.getSourcePosition());
      assertEquals(false, node0.isBlock());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isWhile());
      assertEquals(83, node0.getCharno());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isInc());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(40, node0.getType());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isReturn());
      assertNotNull(node0);
      
      noResolvedType0.setSource(node0);
      assertEquals(false, noResolvedType0.isNumberValueType());
      assertEquals(2147483647, noResolvedType0.getMaxArguments());
      assertEquals(false, noResolvedType0.isResolved());
      assertEquals(2147483647, noResolvedType0.getPropertiesCount());
      assertEquals(false, noResolvedType0.isNullType());
      assertNull(noResolvedType0.getReferenceName());
      assertEquals(true, noResolvedType0.hasInstanceType());
      assertEquals(false, noResolvedType0.isInterface());
      assertEquals(false, noResolvedType0.isAllType());
      assertEquals(false, noResolvedType0.isRecordType());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertEquals(false, noResolvedType0.isEnumElementType());
      assertEquals(false, noResolvedType0.isFunctionType());
      assertEquals(false, noResolvedType0.isNominalConstructor());
      assertEquals(false, noResolvedType0.isNoObjectType());
      assertEquals(true, noResolvedType0.hasCachedValues());
      assertEquals(false, noResolvedType0.isStringValueType());
      assertEquals(false, noResolvedType0.isEnumType());
      assertEquals(true, noResolvedType0.matchesNumberContext());
      assertEquals(true, noResolvedType0.matchesObjectContext());
      assertEquals(false, noResolvedType0.isReturnTypeInferred());
      assertEquals(false, noResolvedType0.isParameterizedType());
      assertEquals(false, noResolvedType0.isFunctionPrototypeType());
      assertEquals(false, noResolvedType0.isCheckedUnknownType());
      assertEquals(true, noResolvedType0.isConstructor());
      assertEquals(true, noResolvedType0.matchesStringContext());
      assertEquals(false, noResolvedType0.isVoidType());
      assertEquals(true, noResolvedType0.canBeCalled());
      assertEquals(false, noResolvedType0.isNominalType());
      assertEquals(false, noResolvedType0.isUnionType());
      assertEquals(true, noResolvedType0.isNullable());
      assertEquals(false, noResolvedType0.isOrdinaryFunction());
      assertEquals(false, noResolvedType0.isBooleanValueType());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noResolvedType0.isTemplateType());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isStringKey());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isDec());
      assertNull(node0.getSourceFileName());
      assertEquals(true, node0.isString());
      assertEquals(83, node0.getLineno());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isNull());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isScript());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isAnd());
      assertEquals(340051, node0.getSourcePosition());
      assertEquals(false, node0.isBlock());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isWhile());
      assertEquals(83, node0.getCharno());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isInc());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(40, node0.getType());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isReturn());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      noResolvedType0.setSource(node0);
      assertEquals(false, noResolvedType0.isNumberValueType());
      assertEquals(2147483647, noResolvedType0.getMaxArguments());
      assertEquals(false, noResolvedType0.isResolved());
      assertEquals(2147483647, noResolvedType0.getPropertiesCount());
      assertEquals(false, noResolvedType0.isNullType());
      assertNull(noResolvedType0.getReferenceName());
      assertEquals(true, noResolvedType0.hasInstanceType());
      assertEquals(false, noResolvedType0.isInterface());
      assertEquals(false, noResolvedType0.isAllType());
      assertEquals(false, noResolvedType0.isRecordType());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertEquals(false, noResolvedType0.isEnumElementType());
      assertEquals(false, noResolvedType0.isFunctionType());
      assertEquals(false, noResolvedType0.isNominalConstructor());
      assertEquals(false, noResolvedType0.isNoObjectType());
      assertEquals(true, noResolvedType0.hasCachedValues());
      assertEquals(false, noResolvedType0.isStringValueType());
      assertEquals(false, noResolvedType0.isEnumType());
      assertEquals(true, noResolvedType0.matchesNumberContext());
      assertEquals(true, noResolvedType0.matchesObjectContext());
      assertEquals(false, noResolvedType0.isReturnTypeInferred());
      assertEquals(false, noResolvedType0.isParameterizedType());
      assertEquals(false, noResolvedType0.isFunctionPrototypeType());
      assertEquals(false, noResolvedType0.isCheckedUnknownType());
      assertEquals(true, noResolvedType0.isConstructor());
      assertEquals(true, noResolvedType0.matchesStringContext());
      assertEquals(false, noResolvedType0.isVoidType());
      assertEquals(true, noResolvedType0.canBeCalled());
      assertEquals(false, noResolvedType0.isNominalType());
      assertEquals(false, noResolvedType0.isUnionType());
      assertEquals(true, noResolvedType0.isNullable());
      assertEquals(false, noResolvedType0.isOrdinaryFunction());
      assertEquals(false, noResolvedType0.isBooleanValueType());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noResolvedType0.isTemplateType());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isStringKey());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isDec());
      assertNull(node0.getSourceFileName());
      assertEquals(true, node0.isString());
      assertEquals(83, node0.getLineno());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isNull());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isScript());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isAnd());
      assertEquals(340051, node0.getSourcePosition());
      assertEquals(false, node0.isBlock());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isWhile());
      assertEquals(83, node0.getCharno());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isInc());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(40, node0.getType());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isReturn());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
  }

  @Test
  public void test09()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      boolean boolean0 = false;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0, boolean0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      assertEquals(false, noResolvedType0.isTemplateType());
      assertEquals(2147483647, noResolvedType0.getPropertiesCount());
      assertNull(noResolvedType0.getReferenceName());
      assertEquals(false, noResolvedType0.isEnumType());
      assertEquals(false, noResolvedType0.isNoObjectType());
      assertEquals(true, noResolvedType0.matchesStringContext());
      assertEquals(false, noResolvedType0.isStringValueType());
      assertEquals(false, noResolvedType0.isAllType());
      assertEquals(false, noResolvedType0.isInterface());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertEquals(false, noResolvedType0.isFunctionType());
      assertEquals(false, noResolvedType0.isNominalType());
      assertEquals(false, noResolvedType0.isFunctionPrototypeType());
      assertEquals(true, noResolvedType0.canBeCalled());
      assertEquals(true, noResolvedType0.hasInstanceType());
      assertEquals(false, noResolvedType0.isNumberValueType());
      assertEquals(false, noResolvedType0.isNullType());
      assertEquals(true, noResolvedType0.isNullable());
      assertEquals(true, noResolvedType0.matchesNumberContext());
      assertEquals(true, noResolvedType0.isConstructor());
      assertEquals(false, noResolvedType0.isNominalConstructor());
      assertEquals(false, noResolvedType0.isRecordType());
      assertEquals(false, noResolvedType0.isReturnTypeInferred());
      assertEquals(false, noResolvedType0.isCheckedUnknownType());
      assertEquals(false, noResolvedType0.isEnumElementType());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertEquals(true, noResolvedType0.matchesObjectContext());
      assertEquals(false, noResolvedType0.isOrdinaryFunction());
      assertEquals(false, noResolvedType0.hasCachedValues());
      assertEquals(false, noResolvedType0.isVoidType());
      assertEquals(false, noResolvedType0.isBooleanValueType());
      assertEquals(2147483647, noResolvedType0.getMaxArguments());
      assertEquals(false, noResolvedType0.isUnionType());
      assertEquals(false, noResolvedType0.isParameterizedType());
      assertEquals(false, noResolvedType0.isResolved());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(noResolvedType0);
      
      Node node0 = noResolvedType0.getSource();
      assertEquals(false, noResolvedType0.isTemplateType());
      assertEquals(2147483647, noResolvedType0.getPropertiesCount());
      assertNull(noResolvedType0.getReferenceName());
      assertEquals(false, noResolvedType0.isEnumType());
      assertEquals(false, noResolvedType0.isNoObjectType());
      assertEquals(true, noResolvedType0.matchesStringContext());
      assertEquals(false, noResolvedType0.isStringValueType());
      assertEquals(false, noResolvedType0.isAllType());
      assertEquals(false, noResolvedType0.isInterface());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertEquals(false, noResolvedType0.isFunctionType());
      assertEquals(false, noResolvedType0.isNominalType());
      assertEquals(false, noResolvedType0.isFunctionPrototypeType());
      assertEquals(true, noResolvedType0.canBeCalled());
      assertEquals(true, noResolvedType0.hasInstanceType());
      assertEquals(false, noResolvedType0.isNumberValueType());
      assertEquals(false, noResolvedType0.isNullType());
      assertEquals(true, noResolvedType0.isNullable());
      assertEquals(true, noResolvedType0.matchesNumberContext());
      assertEquals(true, noResolvedType0.isConstructor());
      assertEquals(false, noResolvedType0.isNominalConstructor());
      assertEquals(false, noResolvedType0.isRecordType());
      assertEquals(false, noResolvedType0.isReturnTypeInferred());
      assertEquals(false, noResolvedType0.isCheckedUnknownType());
      assertEquals(false, noResolvedType0.isEnumElementType());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertEquals(true, noResolvedType0.matchesObjectContext());
      assertEquals(false, noResolvedType0.isOrdinaryFunction());
      assertEquals(false, noResolvedType0.hasCachedValues());
      assertEquals(false, noResolvedType0.isVoidType());
      assertEquals(false, noResolvedType0.isBooleanValueType());
      assertEquals(2147483647, noResolvedType0.getMaxArguments());
      assertEquals(false, noResolvedType0.isUnionType());
      assertEquals(false, noResolvedType0.isParameterizedType());
      assertEquals(false, noResolvedType0.isResolved());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNull(node0);
      
      FunctionType functionType0 = noResolvedType0.getSuperClassConstructor();
      assertEquals(false, noResolvedType0.isTemplateType());
      assertEquals(2147483647, noResolvedType0.getPropertiesCount());
      assertNull(noResolvedType0.getReferenceName());
      assertEquals(false, noResolvedType0.isEnumType());
      assertEquals(false, noResolvedType0.isNoObjectType());
      assertEquals(true, noResolvedType0.matchesStringContext());
      assertEquals(false, noResolvedType0.isStringValueType());
      assertEquals(false, noResolvedType0.isAllType());
      assertEquals(false, noResolvedType0.isInterface());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertEquals(false, noResolvedType0.isFunctionType());
      assertEquals(false, noResolvedType0.isNominalType());
      assertEquals(false, noResolvedType0.isFunctionPrototypeType());
      assertEquals(true, noResolvedType0.canBeCalled());
      assertEquals(true, noResolvedType0.hasInstanceType());
      assertEquals(true, noResolvedType0.hasCachedValues());
      assertEquals(false, noResolvedType0.isNumberValueType());
      assertEquals(false, noResolvedType0.isNullType());
      assertEquals(true, noResolvedType0.isNullable());
      assertEquals(true, noResolvedType0.matchesNumberContext());
      assertEquals(true, noResolvedType0.isConstructor());
      assertEquals(false, noResolvedType0.isNominalConstructor());
      assertEquals(false, noResolvedType0.isRecordType());
      assertEquals(false, noResolvedType0.isReturnTypeInferred());
      assertEquals(false, noResolvedType0.isCheckedUnknownType());
      assertEquals(false, noResolvedType0.isEnumElementType());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertEquals(true, noResolvedType0.matchesObjectContext());
      assertEquals(false, noResolvedType0.isOrdinaryFunction());
      assertEquals(false, noResolvedType0.isVoidType());
      assertEquals(false, noResolvedType0.isBooleanValueType());
      assertEquals(2147483647, noResolvedType0.getMaxArguments());
      assertEquals(false, noResolvedType0.isUnionType());
      assertEquals(false, noResolvedType0.isParameterizedType());
      assertEquals(false, noResolvedType0.isResolved());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNull(functionType0);
      
      noResolvedType0.setSource(node0);
      assertEquals(false, noResolvedType0.isTemplateType());
      assertEquals(2147483647, noResolvedType0.getPropertiesCount());
      assertNull(noResolvedType0.getReferenceName());
      assertEquals(false, noResolvedType0.isEnumType());
      assertEquals(false, noResolvedType0.isNoObjectType());
      assertEquals(true, noResolvedType0.matchesStringContext());
      assertEquals(false, noResolvedType0.isStringValueType());
      assertEquals(false, noResolvedType0.isAllType());
      assertEquals(false, noResolvedType0.isInterface());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertEquals(false, noResolvedType0.isFunctionType());
      assertEquals(false, noResolvedType0.isNominalType());
      assertEquals(false, noResolvedType0.isFunctionPrototypeType());
      assertEquals(true, noResolvedType0.canBeCalled());
      assertEquals(true, noResolvedType0.hasInstanceType());
      assertEquals(true, noResolvedType0.hasCachedValues());
      assertEquals(false, noResolvedType0.isNumberValueType());
      assertEquals(false, noResolvedType0.isNullType());
      assertEquals(true, noResolvedType0.isNullable());
      assertEquals(true, noResolvedType0.matchesNumberContext());
      assertEquals(true, noResolvedType0.isConstructor());
      assertEquals(false, noResolvedType0.isNominalConstructor());
      assertEquals(false, noResolvedType0.isRecordType());
      assertEquals(false, noResolvedType0.isReturnTypeInferred());
      assertEquals(false, noResolvedType0.isCheckedUnknownType());
      assertEquals(false, noResolvedType0.isEnumElementType());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertEquals(true, noResolvedType0.matchesObjectContext());
      assertEquals(false, noResolvedType0.isOrdinaryFunction());
      assertEquals(false, noResolvedType0.isVoidType());
      assertEquals(false, noResolvedType0.isBooleanValueType());
      assertEquals(2147483647, noResolvedType0.getMaxArguments());
      assertEquals(false, noResolvedType0.isUnionType());
      assertEquals(false, noResolvedType0.isParameterizedType());
      assertEquals(false, noResolvedType0.isResolved());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
  }

  @Test
  public void test10()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      boolean boolean0 = false;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0, boolean0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      String string0 = ":yLTc+cK.&y";
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, string0);
      assertEquals(false, errorFunctionType0.isNoType());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertEquals(false, errorFunctionType0.isNumberValueType());
      assertEquals(false, errorFunctionType0.isEnumElementType());
      assertEquals(false, errorFunctionType0.isResolved());
      assertEquals(false, errorFunctionType0.isVoidType());
      assertEquals(true, errorFunctionType0.canBeCalled());
      assertEquals(false, errorFunctionType0.isNoResolvedType());
      assertEquals(true, errorFunctionType0.isConstructor());
      assertEquals(false, errorFunctionType0.isCheckedUnknownType());
      assertEquals(true, errorFunctionType0.hasInstanceType());
      assertEquals(false, errorFunctionType0.isNominalType());
      assertEquals(false, errorFunctionType0.isInterface());
      assertEquals(false, errorFunctionType0.isAllType());
      assertEquals(false, errorFunctionType0.isFunctionPrototypeType());
      assertEquals(false, errorFunctionType0.isNoObjectType());
      assertEquals(false, errorFunctionType0.hasCachedValues());
      assertEquals(false, errorFunctionType0.isBooleanValueType());
      assertEquals(false, errorFunctionType0.isEnumType());
      assertEquals(true, errorFunctionType0.isNominalConstructor());
      assertEquals(3, errorFunctionType0.getMaxArguments());
      assertEquals(false, errorFunctionType0.isTemplateType());
      assertEquals(false, errorFunctionType0.isReturnTypeInferred());
      assertEquals(true, errorFunctionType0.isFunctionType());
      assertEquals(false, errorFunctionType0.isNullType());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, errorFunctionType0.isRecordType());
      assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      assertEquals(false, errorFunctionType0.isParameterizedType());
      assertEquals(false, errorFunctionType0.isUnionType());
      assertEquals(false, errorFunctionType0.isStringValueType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(errorFunctionType0);
      
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(true, noResolvedType0.matchesObjectContext());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertEquals(false, noResolvedType0.isNumberValueType());
      assertEquals(false, noResolvedType0.isOrdinaryFunction());
      assertEquals(false, noResolvedType0.isTemplateType());
      assertEquals(false, noResolvedType0.isRecordType());
      assertEquals(false, noResolvedType0.isVoidType());
      assertEquals(false, noResolvedType0.isUnionType());
      assertEquals(false, noResolvedType0.isParameterizedType());
      assertEquals(2147483647, noResolvedType0.getMaxArguments());
      assertEquals(false, noResolvedType0.isCheckedUnknownType());
      assertEquals(false, noResolvedType0.isReturnTypeInferred());
      assertNull(noResolvedType0.getReferenceName());
      assertEquals(false, noResolvedType0.isFunctionPrototypeType());
      assertEquals(false, noResolvedType0.isAllType());
      assertEquals(true, noResolvedType0.isConstructor());
      assertEquals(true, noResolvedType0.canBeCalled());
      assertEquals(false, noResolvedType0.isEnumType());
      assertEquals(true, noResolvedType0.matchesStringContext());
      assertEquals(false, noResolvedType0.isNominalConstructor());
      assertEquals(false, noResolvedType0.hasCachedValues());
      assertEquals(2147483647, noResolvedType0.getPropertiesCount());
      assertEquals(false, noResolvedType0.isStringValueType());
      assertEquals(false, noResolvedType0.isEnumElementType());
      assertEquals(false, noResolvedType0.isBooleanValueType());
      assertEquals(false, noResolvedType0.isResolved());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertEquals(true, noResolvedType0.hasInstanceType());
      assertEquals(false, noResolvedType0.isNoObjectType());
      assertEquals(true, noResolvedType0.isNullable());
      assertEquals(false, noResolvedType0.isNullType());
      assertEquals(true, noResolvedType0.matchesNumberContext());
      assertEquals(false, noResolvedType0.isFunctionType());
      assertEquals(false, noResolvedType0.isInterface());
      assertEquals(false, noResolvedType0.isNominalType());
      assertNotNull(noResolvedType0);
      
      Node node0 = noResolvedType0.getSource();
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(true, noResolvedType0.matchesObjectContext());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertEquals(false, noResolvedType0.isNumberValueType());
      assertEquals(false, noResolvedType0.isOrdinaryFunction());
      assertEquals(false, noResolvedType0.isTemplateType());
      assertEquals(false, noResolvedType0.isRecordType());
      assertEquals(false, noResolvedType0.isVoidType());
      assertEquals(false, noResolvedType0.isUnionType());
      assertEquals(false, noResolvedType0.isParameterizedType());
      assertEquals(2147483647, noResolvedType0.getMaxArguments());
      assertEquals(false, noResolvedType0.isCheckedUnknownType());
      assertEquals(false, noResolvedType0.isReturnTypeInferred());
      assertNull(noResolvedType0.getReferenceName());
      assertEquals(false, noResolvedType0.isFunctionPrototypeType());
      assertEquals(false, noResolvedType0.isAllType());
      assertEquals(true, noResolvedType0.isConstructor());
      assertEquals(true, noResolvedType0.canBeCalled());
      assertEquals(false, noResolvedType0.isEnumType());
      assertEquals(true, noResolvedType0.matchesStringContext());
      assertEquals(false, noResolvedType0.isNominalConstructor());
      assertEquals(false, noResolvedType0.hasCachedValues());
      assertEquals(2147483647, noResolvedType0.getPropertiesCount());
      assertEquals(false, noResolvedType0.isStringValueType());
      assertEquals(false, noResolvedType0.isEnumElementType());
      assertEquals(false, noResolvedType0.isBooleanValueType());
      assertEquals(false, noResolvedType0.isResolved());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertEquals(true, noResolvedType0.hasInstanceType());
      assertEquals(false, noResolvedType0.isNoObjectType());
      assertEquals(true, noResolvedType0.isNullable());
      assertEquals(false, noResolvedType0.isNullType());
      assertEquals(true, noResolvedType0.matchesNumberContext());
      assertEquals(false, noResolvedType0.isFunctionType());
      assertEquals(false, noResolvedType0.isInterface());
      assertEquals(false, noResolvedType0.isNominalType());
      assertNull(node0);
      
      errorFunctionType0.setSource(node0);
      assertEquals(false, errorFunctionType0.isNoType());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertEquals(false, errorFunctionType0.isNumberValueType());
      assertEquals(false, errorFunctionType0.isEnumElementType());
      assertEquals(false, errorFunctionType0.isResolved());
      assertEquals(false, errorFunctionType0.isVoidType());
      assertEquals(true, errorFunctionType0.canBeCalled());
      assertEquals(false, errorFunctionType0.isNoResolvedType());
      assertEquals(true, errorFunctionType0.isConstructor());
      assertEquals(false, errorFunctionType0.isCheckedUnknownType());
      assertEquals(true, errorFunctionType0.hasInstanceType());
      assertEquals(false, errorFunctionType0.isNominalType());
      assertEquals(false, errorFunctionType0.isInterface());
      assertEquals(false, errorFunctionType0.isAllType());
      assertEquals(false, errorFunctionType0.isFunctionPrototypeType());
      assertEquals(false, errorFunctionType0.isNoObjectType());
      assertEquals(false, errorFunctionType0.hasCachedValues());
      assertEquals(false, errorFunctionType0.isBooleanValueType());
      assertEquals(false, errorFunctionType0.isEnumType());
      assertEquals(true, errorFunctionType0.isNominalConstructor());
      assertEquals(3, errorFunctionType0.getMaxArguments());
      assertEquals(false, errorFunctionType0.isTemplateType());
      assertEquals(false, errorFunctionType0.isReturnTypeInferred());
      assertEquals(true, errorFunctionType0.isFunctionType());
      assertEquals(false, errorFunctionType0.isNullType());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, errorFunctionType0.isRecordType());
      assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      assertEquals(false, errorFunctionType0.isParameterizedType());
      assertEquals(false, errorFunctionType0.isUnionType());
      assertEquals(false, errorFunctionType0.isStringValueType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(true, noResolvedType0.matchesObjectContext());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertEquals(false, noResolvedType0.isNumberValueType());
      assertEquals(false, noResolvedType0.isOrdinaryFunction());
      assertEquals(false, noResolvedType0.isTemplateType());
      assertEquals(false, noResolvedType0.isRecordType());
      assertEquals(false, noResolvedType0.isVoidType());
      assertEquals(false, noResolvedType0.isUnionType());
      assertEquals(false, noResolvedType0.isParameterizedType());
      assertEquals(2147483647, noResolvedType0.getMaxArguments());
      assertEquals(false, noResolvedType0.isCheckedUnknownType());
      assertEquals(false, noResolvedType0.isReturnTypeInferred());
      assertNull(noResolvedType0.getReferenceName());
      assertEquals(false, noResolvedType0.isFunctionPrototypeType());
      assertEquals(false, noResolvedType0.isAllType());
      assertEquals(true, noResolvedType0.isConstructor());
      assertEquals(true, noResolvedType0.canBeCalled());
      assertEquals(false, noResolvedType0.isEnumType());
      assertEquals(true, noResolvedType0.matchesStringContext());
      assertEquals(false, noResolvedType0.isNominalConstructor());
      assertEquals(false, noResolvedType0.hasCachedValues());
      assertEquals(2147483647, noResolvedType0.getPropertiesCount());
      assertEquals(false, noResolvedType0.isStringValueType());
      assertEquals(false, noResolvedType0.isEnumElementType());
      assertEquals(false, noResolvedType0.isBooleanValueType());
      assertEquals(false, noResolvedType0.isResolved());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertEquals(true, noResolvedType0.hasInstanceType());
      assertEquals(false, noResolvedType0.isNoObjectType());
      assertEquals(true, noResolvedType0.isNullable());
      assertEquals(false, noResolvedType0.isNullType());
      assertEquals(true, noResolvedType0.matchesNumberContext());
      assertEquals(false, noResolvedType0.isFunctionType());
      assertEquals(false, noResolvedType0.isInterface());
      assertEquals(false, noResolvedType0.isNominalType());
  }

  @Test
  public void test11()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      //  // Unstable assertion: assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0);
      //  // Unstable assertion: assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      //  // Unstable assertion: assertNotNull(jSTypeRegistry0);
      
      String string0 = "prototype";
      boolean boolean0 = true;
      UnknownType unknownType0 = new UnknownType(jSTypeRegistry0, boolean0);
      //  // Unstable assertion: assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      //  // Unstable assertion: assertEquals(false, unknownType0.isFunctionPrototypeType());
      //  // Unstable assertion: assertEquals(false, unknownType0.isEnumType());
      //  // Unstable assertion: assertEquals(true, unknownType0.matchesStringContext());
      //  // Unstable assertion: assertEquals(true, unknownType0.isCheckedUnknownType());
      //  // Unstable assertion: assertEquals(false, unknownType0.isEnumElementType());
      //  // Unstable assertion: assertEquals(true, unknownType0.matchesNumberContext());
      //  // Unstable assertion: assertEquals(false, unknownType0.isOrdinaryFunction());
      //  // Unstable assertion: assertEquals(false, unknownType0.isNominalType());
      //  // Unstable assertion: assertEquals(2147483647, unknownType0.getPropertiesCount());
      //  // Unstable assertion: assertEquals(false, unknownType0.isFunctionType());
      //  // Unstable assertion: assertEquals(false, unknownType0.isTemplateType());
      //  // Unstable assertion: assertEquals(true, unknownType0.isNullable());
      //  // Unstable assertion: assertEquals(false, unknownType0.isResolved());
      //  // Unstable assertion: assertEquals(false, unknownType0.isRecordType());
      //  // Unstable assertion: assertEquals(false, unknownType0.isUnionType());
      //  // Unstable assertion: assertEquals(true, unknownType0.matchesObjectContext());
      //  // Unstable assertion: assertEquals("Unknown", unknownType0.getDisplayName());
      //  // Unstable assertion: assertEquals(false, unknownType0.isNoResolvedType());
      //  // Unstable assertion: assertEquals(false, unknownType0.hasCachedValues());
      //  // Unstable assertion: assertEquals(false, unknownType0.isBooleanValueType());
      //  // Unstable assertion: assertEquals(false, unknownType0.isNullType());
      //  // Unstable assertion: assertEquals(true, unknownType0.hasDisplayName());
      //  // Unstable assertion: assertEquals(false, unknownType0.isAllType());
      //  // Unstable assertion: assertEquals(true, unknownType0.isUnknownType());
      //  // Unstable assertion: assertEquals(false, unknownType0.isNumberValueType());
      //  // Unstable assertion: assertEquals(false, unknownType0.isInterface());
      //  // Unstable assertion: assertEquals(false, unknownType0.isParameterizedType());
      //  // Unstable assertion: assertEquals("??", unknownType0.getReferenceName());
      //  // Unstable assertion: assertEquals(false, unknownType0.isVoidType());
      //  // Unstable assertion: assertEquals(false, unknownType0.isNativeObjectType());
      //  // Unstable assertion: assertEquals(BooleanLiteralSet.BOTH, unknownType0.getPossibleToBooleanOutcomes());
      //  // Unstable assertion: assertEquals(false, unknownType0.hasReferenceName());
      //  // Unstable assertion: assertEquals(false, unknownType0.isNominalConstructor());
      //  // Unstable assertion: assertEquals(false, unknownType0.isStringValueType());
      //  // Unstable assertion: assertEquals(false, unknownType0.isNoObjectType());
      //  // Unstable assertion: assertEquals(false, unknownType0.isNoType());
      //  // Unstable assertion: assertEquals(true, unknownType0.canBeCalled());
      //  // Unstable assertion: assertEquals(false, unknownType0.isConstructor());
      //  // Unstable assertion: assertNotNull(unknownType0);
      
      Node node0 = unknownType0.getRootNode();
      //  // Unstable assertion: assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      //  // Unstable assertion: assertEquals(false, unknownType0.isFunctionPrototypeType());
      //  // Unstable assertion: assertEquals(false, unknownType0.isEnumType());
      //  // Unstable assertion: assertEquals(true, unknownType0.matchesStringContext());
      //  // Unstable assertion: assertEquals(true, unknownType0.isCheckedUnknownType());
      //  // Unstable assertion: assertEquals(false, unknownType0.isEnumElementType());
      //  // Unstable assertion: assertEquals(true, unknownType0.matchesNumberContext());
      //  // Unstable assertion: assertEquals(false, unknownType0.isOrdinaryFunction());
      //  // Unstable assertion: assertEquals(false, unknownType0.isNominalType());
      //  // Unstable assertion: assertEquals(2147483647, unknownType0.getPropertiesCount());
      //  // Unstable assertion: assertEquals(false, unknownType0.isFunctionType());
      //  // Unstable assertion: assertEquals(false, unknownType0.isTemplateType());
      //  // Unstable assertion: assertEquals(true, unknownType0.isNullable());
      //  // Unstable assertion: assertEquals(false, unknownType0.isResolved());
      //  // Unstable assertion: assertEquals(false, unknownType0.isRecordType());
      //  // Unstable assertion: assertEquals(false, unknownType0.isUnionType());
      //  // Unstable assertion: assertEquals(true, unknownType0.matchesObjectContext());
      //  // Unstable assertion: assertEquals("Unknown", unknownType0.getDisplayName());
      //  // Unstable assertion: assertEquals(false, unknownType0.isNoResolvedType());
      //  // Unstable assertion: assertEquals(false, unknownType0.hasCachedValues());
      //  // Unstable assertion: assertEquals(false, unknownType0.isBooleanValueType());
      //  // Unstable assertion: assertEquals(false, unknownType0.isNullType());
      //  // Unstable assertion: assertEquals(true, unknownType0.hasDisplayName());
      //  // Unstable assertion: assertEquals(false, unknownType0.isAllType());
      //  // Unstable assertion: assertEquals(true, unknownType0.isUnknownType());
      //  // Unstable assertion: assertEquals(false, unknownType0.isNumberValueType());
      //  // Unstable assertion: assertEquals(false, unknownType0.isInterface());
      //  // Unstable assertion: assertEquals(false, unknownType0.isParameterizedType());
      //  // Unstable assertion: assertEquals("??", unknownType0.getReferenceName());
      //  // Unstable assertion: assertEquals(false, unknownType0.isVoidType());
      //  // Unstable assertion: assertEquals(false, unknownType0.isNativeObjectType());
      //  // Unstable assertion: assertEquals(BooleanLiteralSet.BOTH, unknownType0.getPossibleToBooleanOutcomes());
      //  // Unstable assertion: assertEquals(false, unknownType0.hasReferenceName());
      //  // Unstable assertion: assertEquals(false, unknownType0.isNominalConstructor());
      //  // Unstable assertion: assertEquals(false, unknownType0.isStringValueType());
      //  // Unstable assertion: assertEquals(false, unknownType0.isNoObjectType());
      //  // Unstable assertion: assertEquals(false, unknownType0.isNoType());
      //  // Unstable assertion: assertEquals(true, unknownType0.canBeCalled());
      //  // Unstable assertion: assertEquals(false, unknownType0.isConstructor());
      //  // Unstable assertion: assertNull(node0);
      
      FunctionType functionType0 = FunctionType.forInterface(jSTypeRegistry0, string0, node0);
      //  // Unstable assertion: assertEquals(true, functionType0.isInterface());
      //  // Unstable assertion: assertEquals(false, functionType0.isNoType());
      //  // Unstable assertion: assertEquals(false, functionType0.isNoResolvedType());
      //  // Unstable assertion: assertEquals(false, functionType0.isNumberValueType());
      //  // Unstable assertion: assertEquals(false, functionType0.isCheckedUnknownType());
      //  // Unstable assertion: assertEquals(0, functionType0.getExtendedInterfacesCount());
      //  // Unstable assertion: assertEquals(false, functionType0.isOrdinaryFunction());
      //  // Unstable assertion: assertEquals(false, functionType0.isConstructor());
      //  // Unstable assertion: assertEquals(false, functionType0.hasCachedValues());
      //  // Unstable assertion: assertEquals(false, functionType0.isRecordType());
      //  // Unstable assertion: assertEquals(false, functionType0.isUnionType());
      //  // Unstable assertion: assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      //  // Unstable assertion: assertEquals(0, functionType0.getMaxArguments());
      //  // Unstable assertion: assertEquals(false, functionType0.isFunctionPrototypeType());
      //  // Unstable assertion: assertEquals(false, functionType0.isBooleanValueType());
      //  // Unstable assertion: assertEquals(false, functionType0.isEnumType());
      //  // Unstable assertion: assertEquals(false, functionType0.isStringValueType());
      //  // Unstable assertion: assertEquals(false, functionType0.isTemplateType());
      //  // Unstable assertion: assertEquals(true, functionType0.hasInstanceType());
      //  // Unstable assertion: assertEquals(true, functionType0.canBeCalled());
      //  // Unstable assertion: assertEquals(true, functionType0.isFunctionType());
      //  // Unstable assertion: assertEquals(false, functionType0.isResolved());
      //  // Unstable assertion: assertEquals(false, functionType0.isNoObjectType());
      //  // Unstable assertion: assertEquals(false, functionType0.isParameterizedType());
      //  // Unstable assertion: assertEquals(false, functionType0.isNominalType());
      //  // Unstable assertion: assertEquals(false, functionType0.isVoidType());
      //  // Unstable assertion: assertEquals(false, functionType0.isEnumElementType());
      //  // Unstable assertion: assertEquals(false, functionType0.isReturnTypeInferred());
      //  // Unstable assertion: assertEquals(false, functionType0.isNominalConstructor());
      //  // Unstable assertion: assertEquals(false, functionType0.isNullType());
      //  // Unstable assertion: assertEquals(false, functionType0.isAllType());
      //  // Unstable assertion: assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      //  // Unstable assertion: assertEquals(false, unknownType0.isFunctionPrototypeType());
      //  // Unstable assertion: assertEquals(false, unknownType0.isEnumType());
      //  // Unstable assertion: assertEquals(true, unknownType0.matchesStringContext());
      //  // Unstable assertion: assertEquals(true, unknownType0.isCheckedUnknownType());
      //  // Unstable assertion: assertEquals(false, unknownType0.isEnumElementType());
      //  // Unstable assertion: assertEquals(true, unknownType0.matchesNumberContext());
      //  // Unstable assertion: assertEquals(false, unknownType0.isOrdinaryFunction());
      //  // Unstable assertion: assertEquals(false, unknownType0.isNominalType());
      //  // Unstable assertion: assertEquals(2147483647, unknownType0.getPropertiesCount());
      //  // Unstable assertion: assertEquals(false, unknownType0.isFunctionType());
      //  // Unstable assertion: assertEquals(false, unknownType0.isTemplateType());
      //  // Unstable assertion: assertEquals(true, unknownType0.isNullable());
      //  // Unstable assertion: assertEquals(false, unknownType0.isResolved());
      //  // Unstable assertion: assertEquals(false, unknownType0.isRecordType());
      //  // Unstable assertion: assertEquals(false, unknownType0.isUnionType());
      //  // Unstable assertion: assertEquals(true, unknownType0.matchesObjectContext());
      //  // Unstable assertion: assertEquals("Unknown", unknownType0.getDisplayName());
      //  // Unstable assertion: assertEquals(false, unknownType0.isNoResolvedType());
      //  // Unstable assertion: assertEquals(false, unknownType0.hasCachedValues());
      //  // Unstable assertion: assertEquals(false, unknownType0.isBooleanValueType());
      //  // Unstable assertion: assertEquals(false, unknownType0.isNullType());
      //  // Unstable assertion: assertEquals(true, unknownType0.hasDisplayName());
      //  // Unstable assertion: assertEquals(false, unknownType0.isAllType());
      //  // Unstable assertion: assertEquals(true, unknownType0.isUnknownType());
      //  // Unstable assertion: assertEquals(false, unknownType0.isNumberValueType());
      //  // Unstable assertion: assertEquals(false, unknownType0.isInterface());
      //  // Unstable assertion: assertEquals(false, unknownType0.isParameterizedType());
      //  // Unstable assertion: assertEquals("??", unknownType0.getReferenceName());
      //  // Unstable assertion: assertEquals(false, unknownType0.isVoidType());
      //  // Unstable assertion: assertEquals(false, unknownType0.isNativeObjectType());
      //  // Unstable assertion: assertEquals(BooleanLiteralSet.BOTH, unknownType0.getPossibleToBooleanOutcomes());
      //  // Unstable assertion: assertEquals(false, unknownType0.hasReferenceName());
      //  // Unstable assertion: assertEquals(false, unknownType0.isNominalConstructor());
      //  // Unstable assertion: assertEquals(false, unknownType0.isStringValueType());
      //  // Unstable assertion: assertEquals(false, unknownType0.isNoObjectType());
      //  // Unstable assertion: assertEquals(false, unknownType0.isNoType());
      //  // Unstable assertion: assertEquals(true, unknownType0.canBeCalled());
      //  // Unstable assertion: assertEquals(false, unknownType0.isConstructor());
      //  // Unstable assertion: assertNotNull(functionType0);
      
      FunctionType functionType1 = (FunctionType)FunctionType.getTopDefiningInterface((ObjectType) functionType0, string0);
      //  // Unstable assertion: assertSame(functionType1, functionType0);
      //  // Unstable assertion: assertSame(functionType0, functionType1);
      //  // Unstable assertion: assertEquals(false, functionType1.isNoType());
      //  // Unstable assertion: assertEquals(false, functionType1.isFunctionPrototypeType());
      //  // Unstable assertion: assertEquals(false, functionType1.isRecordType());
      //  // Unstable assertion: assertEquals(false, functionType1.isEnumType());
      //  // Unstable assertion: assertEquals(false, functionType1.isReturnTypeInferred());
      //  // Unstable assertion: assertEquals(0, functionType1.getMaxArguments());
      //  // Unstable assertion: assertEquals(true, functionType1.hasCachedValues());
      //  // Unstable assertion: assertEquals(false, functionType1.isUnionType());
      //  // Unstable assertion: assertEquals(false, functionType1.isNumberValueType());
      //  // Unstable assertion: assertEquals(false, functionType1.isCheckedUnknownType());
      //  // Unstable assertion: assertEquals(false, functionType1.isStringValueType());
      //  // Unstable assertion: assertEquals(false, functionType1.isTemplateType());
      //  // Unstable assertion: assertEquals(0, functionType1.getExtendedInterfacesCount());
      //  // Unstable assertion: assertEquals(true, functionType1.canBeCalled());
      //  // Unstable assertion: assertEquals(false, functionType1.isConstructor());
      //  // Unstable assertion: assertEquals(false, functionType1.isResolved());
      //  // Unstable assertion: assertEquals(false, functionType1.isOrdinaryFunction());
      //  // Unstable assertion: assertEquals(false, functionType1.isNullType());
      //  // Unstable assertion: assertEquals(false, functionType1.isVoidType());
      //  // Unstable assertion: assertEquals(true, functionType1.isInterface());
      //  // Unstable assertion: assertEquals(true, functionType1.isFunctionType());
      //  // Unstable assertion: assertEquals(false, functionType1.isNoResolvedType());
      //  // Unstable assertion: assertEquals(false, functionType1.isNominalConstructor());
      //  // Unstable assertion: assertEquals(false, functionType1.isNoObjectType());
      //  // Unstable assertion: assertEquals(true, functionType1.hasInstanceType());
      //  // Unstable assertion: assertEquals(false, functionType1.isParameterizedType());
      //  // Unstable assertion: assertEquals(false, functionType1.isBooleanValueType());
      //  // Unstable assertion: assertEquals(false, functionType1.isNominalType());
      //  // Unstable assertion: assertEquals(false, functionType1.isEnumElementType());
      //  // Unstable assertion: assertEquals(false, functionType1.isAllType());
      //  // Unstable assertion: assertEquals(BooleanLiteralSet.TRUE, functionType1.getPossibleToBooleanOutcomes());
      //  // Unstable assertion: assertEquals(true, functionType0.isInterface());
      //  // Unstable assertion: assertEquals(false, functionType0.isNoType());
      //  // Unstable assertion: assertEquals(false, functionType0.isNoResolvedType());
      //  // Unstable assertion: assertEquals(false, functionType0.isNumberValueType());
      //  // Unstable assertion: assertEquals(false, functionType0.isCheckedUnknownType());
      //  // Unstable assertion: assertEquals(0, functionType0.getExtendedInterfacesCount());
      //  // Unstable assertion: assertEquals(false, functionType0.isOrdinaryFunction());
      //  // Unstable assertion: assertEquals(false, functionType0.isConstructor());
      //  // Unstable assertion: assertEquals(false, functionType0.isRecordType());
      //  // Unstable assertion: assertEquals(false, functionType0.isUnionType());
      //  // Unstable assertion: assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      //  // Unstable assertion: assertEquals(0, functionType0.getMaxArguments());
      //  // Unstable assertion: assertEquals(false, functionType0.isFunctionPrototypeType());
      //  // Unstable assertion: assertEquals(false, functionType0.isBooleanValueType());
      //  // Unstable assertion: assertEquals(false, functionType0.isEnumType());
      //  // Unstable assertion: assertEquals(true, functionType0.hasCachedValues());
      //  // Unstable assertion: assertEquals(false, functionType0.isStringValueType());
      //  // Unstable assertion: assertEquals(false, functionType0.isTemplateType());
      //  // Unstable assertion: assertEquals(true, functionType0.hasInstanceType());
      //  // Unstable assertion: assertEquals(true, functionType0.canBeCalled());
      //  // Unstable assertion: assertEquals(true, functionType0.isFunctionType());
      //  // Unstable assertion: assertEquals(false, functionType0.isResolved());
      //  // Unstable assertion: assertEquals(false, functionType0.isNoObjectType());
      //  // Unstable assertion: assertEquals(false, functionType0.isParameterizedType());
      //  // Unstable assertion: assertEquals(false, functionType0.isNominalType());
      //  // Unstable assertion: assertEquals(false, functionType0.isVoidType());
      //  // Unstable assertion: assertEquals(false, functionType0.isEnumElementType());
      //  // Unstable assertion: assertEquals(false, functionType0.isReturnTypeInferred());
      //  // Unstable assertion: assertEquals(false, functionType0.isNominalConstructor());
      //  // Unstable assertion: assertEquals(false, functionType0.isNullType());
      //  // Unstable assertion: assertEquals(false, functionType0.isAllType());
      //  // Unstable assertion: assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      //  // Unstable assertion: assertEquals(false, unknownType0.isFunctionPrototypeType());
      //  // Unstable assertion: assertEquals(false, unknownType0.isEnumType());
      //  // Unstable assertion: assertEquals(true, unknownType0.matchesStringContext());
      //  // Unstable assertion: assertEquals(true, unknownType0.isCheckedUnknownType());
      //  // Unstable assertion: assertEquals(false, unknownType0.isEnumElementType());
      //  // Unstable assertion: assertEquals(true, unknownType0.matchesNumberContext());
      //  // Unstable assertion: assertEquals(false, unknownType0.isOrdinaryFunction());
      //  // Unstable assertion: assertEquals(false, unknownType0.isNominalType());
      //  // Unstable assertion: assertEquals(2147483647, unknownType0.getPropertiesCount());
      //  // Unstable assertion: assertEquals(false, unknownType0.isFunctionType());
      //  // Unstable assertion: assertEquals(false, unknownType0.isTemplateType());
      //  // Unstable assertion: assertEquals(true, unknownType0.isNullable());
      //  // Unstable assertion: assertEquals(false, unknownType0.isResolved());
      //  // Unstable assertion: assertEquals(false, unknownType0.isRecordType());
      //  // Unstable assertion: assertEquals(false, unknownType0.isUnionType());
      //  // Unstable assertion: assertEquals(true, unknownType0.matchesObjectContext());
      //  // Unstable assertion: assertEquals("Unknown", unknownType0.getDisplayName());
      //  // Unstable assertion: assertEquals(false, unknownType0.isNoResolvedType());
      //  // Unstable assertion: assertEquals(false, unknownType0.hasCachedValues());
      //  // Unstable assertion: assertEquals(false, unknownType0.isBooleanValueType());
      //  // Unstable assertion: assertEquals(false, unknownType0.isNullType());
      //  // Unstable assertion: assertEquals(true, unknownType0.hasDisplayName());
      //  // Unstable assertion: assertEquals(false, unknownType0.isAllType());
      //  // Unstable assertion: assertEquals(true, unknownType0.isUnknownType());
      //  // Unstable assertion: assertEquals(false, unknownType0.isNumberValueType());
      //  // Unstable assertion: assertEquals(false, unknownType0.isInterface());
      //  // Unstable assertion: assertEquals(false, unknownType0.isParameterizedType());
      //  // Unstable assertion: assertEquals("??", unknownType0.getReferenceName());
      //  // Unstable assertion: assertEquals(false, unknownType0.isVoidType());
      //  // Unstable assertion: assertEquals(false, unknownType0.isNativeObjectType());
      //  // Unstable assertion: assertEquals(BooleanLiteralSet.BOTH, unknownType0.getPossibleToBooleanOutcomes());
      //  // Unstable assertion: assertEquals(false, unknownType0.hasReferenceName());
      //  // Unstable assertion: assertEquals(false, unknownType0.isNominalConstructor());
      //  // Unstable assertion: assertEquals(false, unknownType0.isStringValueType());
      //  // Unstable assertion: assertEquals(false, unknownType0.isNoObjectType());
      //  // Unstable assertion: assertEquals(false, unknownType0.isNoType());
      //  // Unstable assertion: assertEquals(true, unknownType0.canBeCalled());
      //  // Unstable assertion: assertEquals(false, unknownType0.isConstructor());
      //  // Unstable assertion: assertNotNull(functionType1);
      
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      //  // Unstable assertion: assertEquals(true, noResolvedType0.hasInstanceType());
      //  // Unstable assertion: assertEquals(false, noResolvedType0.isNominalType());
      //  // Unstable assertion: assertEquals(false, noResolvedType0.isParameterizedType());
      //  // Unstable assertion: assertNull(noResolvedType0.getReferenceName());
      //  // Unstable assertion: assertEquals(false, noResolvedType0.isAllType());
      //  // Unstable assertion: assertEquals(false, noResolvedType0.isCheckedUnknownType());
      //  // Unstable assertion: assertEquals(true, noResolvedType0.matchesObjectContext());
      //  // Unstable assertion: assertEquals(false, noResolvedType0.isStringValueType());
      //  // Unstable assertion: assertEquals(true, noResolvedType0.matchesNumberContext());
      //  // Unstable assertion: assertEquals(false, noResolvedType0.isVoidType());
      //  // Unstable assertion: assertEquals(false, noResolvedType0.isEnumElementType());
      //  // Unstable assertion: assertEquals(true, noResolvedType0.isNullable());
      //  // Unstable assertion: assertEquals(false, noResolvedType0.isUnionType());
      //  // Unstable assertion: assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      //  // Unstable assertion: assertEquals(false, noResolvedType0.isFunctionPrototypeType());
      //  // Unstable assertion: assertEquals(2147483647, noResolvedType0.getMaxArguments());
      //  // Unstable assertion: assertEquals(false, noResolvedType0.isTemplateType());
      //  // Unstable assertion: assertEquals(false, noResolvedType0.isBooleanValueType());
      //  // Unstable assertion: assertEquals(false, noResolvedType0.isRecordType());
      //  // Unstable assertion: assertEquals(false, noResolvedType0.isEnumType());
      //  // Unstable assertion: assertEquals(false, noResolvedType0.hasCachedValues());
      //  // Unstable assertion: assertEquals(true, noResolvedType0.matchesStringContext());
      //  // Unstable assertion: assertEquals(false, noResolvedType0.isNumberValueType());
      //  // Unstable assertion: assertEquals(false, noResolvedType0.isNominalConstructor());
      //  // Unstable assertion: assertEquals(false, noResolvedType0.isNoObjectType());
      //  // Unstable assertion: assertEquals(true, noResolvedType0.canBeCalled());
      //  // Unstable assertion: assertEquals(2147483647, noResolvedType0.getPropertiesCount());
      //  // Unstable assertion: assertEquals(false, noResolvedType0.isNullType());
      //  // Unstable assertion: assertEquals(false, noResolvedType0.isReturnTypeInferred());
      //  // Unstable assertion: assertEquals(true, noResolvedType0.isConstructor());
      //  // Unstable assertion: assertEquals(false, noResolvedType0.isInterface());
      //  // Unstable assertion: assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      //  // Unstable assertion: assertEquals(false, noResolvedType0.isFunctionType());
      //  // Unstable assertion: assertEquals(false, noResolvedType0.isResolved());
      //  // Unstable assertion: assertEquals(false, noResolvedType0.isOrdinaryFunction());
      //  // Unstable assertion: assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      //  // Unstable assertion: assertNotNull(noResolvedType0);
      
      int int0 = (-1);
      FunctionType functionType2 = noResolvedType0.getBindReturnType(int0);
      //  // Unstable assertion: assertNotSame(functionType2, functionType0);
      //  // Unstable assertion: assertNotSame(functionType2, functionType1);
      //  // Unstable assertion: assertEquals(true, noResolvedType0.hasInstanceType());
      //  // Unstable assertion: assertEquals(false, noResolvedType0.isNominalType());
      //  // Unstable assertion: assertEquals(false, noResolvedType0.isParameterizedType());
      //  // Unstable assertion: assertNull(noResolvedType0.getReferenceName());
      //  // Unstable assertion: assertEquals(false, noResolvedType0.isAllType());
      //  // Unstable assertion: assertEquals(false, noResolvedType0.isCheckedUnknownType());
      //  // Unstable assertion: assertEquals(true, noResolvedType0.matchesObjectContext());
      //  // Unstable assertion: assertEquals(false, noResolvedType0.isStringValueType());
      //  // Unstable assertion: assertEquals(true, noResolvedType0.matchesNumberContext());
      //  // Unstable assertion: assertEquals(false, noResolvedType0.isVoidType());
      //  // Unstable assertion: assertEquals(false, noResolvedType0.isEnumElementType());
      //  // Unstable assertion: assertEquals(true, noResolvedType0.isNullable());
      //  // Unstable assertion: assertEquals(false, noResolvedType0.isUnionType());
      //  // Unstable assertion: assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      //  // Unstable assertion: assertEquals(false, noResolvedType0.isFunctionPrototypeType());
      //  // Unstable assertion: assertEquals(2147483647, noResolvedType0.getMaxArguments());
      //  // Unstable assertion: assertEquals(false, noResolvedType0.isTemplateType());
      //  // Unstable assertion: assertEquals(false, noResolvedType0.isBooleanValueType());
      //  // Unstable assertion: assertEquals(false, noResolvedType0.isRecordType());
      //  // Unstable assertion: assertEquals(false, noResolvedType0.isEnumType());
      //  // Unstable assertion: assertEquals(false, noResolvedType0.hasCachedValues());
      //  // Unstable assertion: assertEquals(true, noResolvedType0.matchesStringContext());
      //  // Unstable assertion: assertEquals(false, noResolvedType0.isNumberValueType());
      //  // Unstable assertion: assertEquals(false, noResolvedType0.isNominalConstructor());
      //  // Unstable assertion: assertEquals(false, noResolvedType0.isNoObjectType());
      //  // Unstable assertion: assertEquals(true, noResolvedType0.canBeCalled());
      //  // Unstable assertion: assertEquals(2147483647, noResolvedType0.getPropertiesCount());
      //  // Unstable assertion: assertEquals(false, noResolvedType0.isNullType());
      //  // Unstable assertion: assertEquals(false, noResolvedType0.isReturnTypeInferred());
      //  // Unstable assertion: assertEquals(true, noResolvedType0.isConstructor());
      //  // Unstable assertion: assertEquals(false, noResolvedType0.isInterface());
      //  // Unstable assertion: assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      //  // Unstable assertion: assertEquals(false, noResolvedType0.isFunctionType());
      //  // Unstable assertion: assertEquals(false, noResolvedType0.isResolved());
      //  // Unstable assertion: assertEquals(false, noResolvedType0.isOrdinaryFunction());
      //  // Unstable assertion: assertEquals(false, functionType2.isNominalConstructor());
      //  // Unstable assertion: assertEquals(false, functionType2.isNoType());
      //  // Unstable assertion: assertEquals(false, functionType2.isNumberValueType());
      //  // Unstable assertion: assertEquals(true, functionType2.canBeCalled());
      //  // Unstable assertion: assertEquals(false, functionType2.isConstructor());
      //  // Unstable assertion: assertEquals(false, functionType2.isNoObjectType());
      //  // Unstable assertion: assertEquals(false, functionType2.isUnionType());
      //  // Unstable assertion: assertEquals(false, functionType2.isVoidType());
      //  // Unstable assertion: assertEquals(false, functionType2.isNoResolvedType());
      //  // Unstable assertion: assertEquals(false, functionType2.isInterface());
      //  // Unstable assertion: assertEquals(true, functionType2.isOrdinaryFunction());
      //  // Unstable assertion: assertEquals(false, functionType2.isCheckedUnknownType());
      //  // Unstable assertion: assertEquals(false, functionType2.hasInstanceType());
      //  // Unstable assertion: assertEquals(false, functionType2.isAllType());
      //  // Unstable assertion: assertEquals(false, functionType2.isResolved());
      //  // Unstable assertion: assertEquals(2147483647, functionType2.getMaxArguments());
      //  // Unstable assertion: assertEquals(false, functionType2.isTemplateType());
      //  // Unstable assertion: assertEquals(false, functionType2.isRecordType());
      //  // Unstable assertion: assertEquals(true, functionType2.hasCachedValues());
      //  // Unstable assertion: assertEquals(false, functionType2.isNominalType());
      //  // Unstable assertion: assertEquals(false, functionType2.isEnumType());
      //  // Unstable assertion: assertEquals(false, functionType2.isParameterizedType());
      //  // Unstable assertion: assertEquals(false, functionType2.isEnumElementType());
      //  // Unstable assertion: assertEquals(BooleanLiteralSet.TRUE, functionType2.getPossibleToBooleanOutcomes());
      //  // Unstable assertion: assertEquals(false, functionType2.isStringValueType());
      //  // Unstable assertion: assertEquals(true, functionType2.isFunctionType());
      //  // Unstable assertion: assertEquals(false, functionType2.isReturnTypeInferred());
      //  // Unstable assertion: assertEquals(false, functionType2.isFunctionPrototypeType());
      //  // Unstable assertion: assertEquals(0, functionType2.getExtendedInterfacesCount());
      //  // Unstable assertion: assertEquals(false, functionType2.isBooleanValueType());
      //  // Unstable assertion: assertEquals(false, functionType2.isNullType());
      //  // Unstable assertion: assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      //  // Unstable assertion: assertNotNull(functionType2);
      //  // Unstable assertion: assertFalse(functionType2.equals((Object)functionType0));
      //  // Unstable assertion: assertFalse(functionType2.equals((Object)functionType1));
      
      boolean boolean1 = functionType0.defineDeclaredProperty(string0, (JSType) functionType2, node0);
      //  // Unstable assertion: assertNotSame(functionType2, functionType0);
      //  // Unstable assertion: assertNotSame(functionType2, functionType1);
      //  // Unstable assertion: assertSame(functionType0, functionType1);
      //  // Unstable assertion: assertNotSame(functionType0, functionType2);
      //  // Unstable assertion: assertEquals(true, noResolvedType0.hasInstanceType());
      //  // Unstable assertion: assertEquals(false, noResolvedType0.isNominalType());
      //  // Unstable assertion: assertEquals(false, noResolvedType0.isParameterizedType());
      //  // Unstable assertion: assertNull(noResolvedType0.getReferenceName());
      //  // Unstable assertion: assertEquals(false, noResolvedType0.isAllType());
      //  // Unstable assertion: assertEquals(false, noResolvedType0.isCheckedUnknownType());
      //  // Unstable assertion: assertEquals(true, noResolvedType0.matchesObjectContext());
      //  // Unstable assertion: assertEquals(false, noResolvedType0.isStringValueType());
      //  // Unstable assertion: assertEquals(true, noResolvedType0.matchesNumberContext());
      //  // Unstable assertion: assertEquals(false, noResolvedType0.isVoidType());
      //  // Unstable assertion: assertEquals(false, noResolvedType0.isEnumElementType());
      //  // Unstable assertion: assertEquals(true, noResolvedType0.isNullable());
      //  // Unstable assertion: assertEquals(false, noResolvedType0.isUnionType());
      //  // Unstable assertion: assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      //  // Unstable assertion: assertEquals(false, noResolvedType0.isFunctionPrototypeType());
      //  // Unstable assertion: assertEquals(2147483647, noResolvedType0.getMaxArguments());
      //  // Unstable assertion: assertEquals(false, noResolvedType0.isTemplateType());
      //  // Unstable assertion: assertEquals(false, noResolvedType0.isBooleanValueType());
      //  // Unstable assertion: assertEquals(false, noResolvedType0.isRecordType());
      //  // Unstable assertion: assertEquals(false, noResolvedType0.isEnumType());
      //  // Unstable assertion: assertEquals(false, noResolvedType0.hasCachedValues());
      //  // Unstable assertion: assertEquals(true, noResolvedType0.matchesStringContext());
      //  // Unstable assertion: assertEquals(false, noResolvedType0.isNumberValueType());
      //  // Unstable assertion: assertEquals(false, noResolvedType0.isNominalConstructor());
      //  // Unstable assertion: assertEquals(false, noResolvedType0.isNoObjectType());
      //  // Unstable assertion: assertEquals(true, noResolvedType0.canBeCalled());
      //  // Unstable assertion: assertEquals(2147483647, noResolvedType0.getPropertiesCount());
      //  // Unstable assertion: assertEquals(false, noResolvedType0.isNullType());
      //  // Unstable assertion: assertEquals(false, noResolvedType0.isReturnTypeInferred());
      //  // Unstable assertion: assertEquals(true, noResolvedType0.isConstructor());
      //  // Unstable assertion: assertEquals(false, noResolvedType0.isInterface());
      //  // Unstable assertion: assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      //  // Unstable assertion: assertEquals(false, noResolvedType0.isFunctionType());
      //  // Unstable assertion: assertEquals(false, noResolvedType0.isResolved());
      //  // Unstable assertion: assertEquals(false, noResolvedType0.isOrdinaryFunction());
      //  // Unstable assertion: assertEquals(false, functionType2.isNominalConstructor());
      //  // Unstable assertion: assertEquals(false, functionType2.isNoType());
      //  // Unstable assertion: assertEquals(false, functionType2.isNumberValueType());
      //  // Unstable assertion: assertEquals(true, functionType2.canBeCalled());
      //  // Unstable assertion: assertEquals(false, functionType2.isConstructor());
      //  // Unstable assertion: assertEquals(false, functionType2.isNoObjectType());
      //  // Unstable assertion: assertEquals(false, functionType2.isUnionType());
      //  // Unstable assertion: assertEquals(false, functionType2.isVoidType());
      //  // Unstable assertion: assertEquals(false, functionType2.isNoResolvedType());
      //  // Unstable assertion: assertEquals(false, functionType2.isInterface());
      //  // Unstable assertion: assertEquals(true, functionType2.isOrdinaryFunction());
      //  // Unstable assertion: assertEquals(false, functionType2.isCheckedUnknownType());
      //  // Unstable assertion: assertEquals(false, functionType2.hasInstanceType());
      //  // Unstable assertion: assertEquals(false, functionType2.isAllType());
      //  // Unstable assertion: assertEquals(false, functionType2.isResolved());
      //  // Unstable assertion: assertEquals(2147483647, functionType2.getMaxArguments());
      //  // Unstable assertion: assertEquals(false, functionType2.isTemplateType());
      //  // Unstable assertion: assertEquals(false, functionType2.isRecordType());
      //  // Unstable assertion: assertEquals(true, functionType2.hasCachedValues());
      //  // Unstable assertion: assertEquals(false, functionType2.isNominalType());
      //  // Unstable assertion: assertEquals(false, functionType2.isEnumType());
      //  // Unstable assertion: assertEquals(true, functionType2.isFunctionPrototypeType());
      //  // Unstable assertion: assertEquals(false, functionType2.isParameterizedType());
      //  // Unstable assertion: assertEquals(false, functionType2.isEnumElementType());
      //  // Unstable assertion: assertEquals(BooleanLiteralSet.TRUE, functionType2.getPossibleToBooleanOutcomes());
      //  // Unstable assertion: assertEquals(false, functionType2.isStringValueType());
      //  // Unstable assertion: assertEquals(true, functionType2.isFunctionType());
      //  // Unstable assertion: assertEquals(false, functionType2.isReturnTypeInferred());
      //  // Unstable assertion: assertEquals(0, functionType2.getExtendedInterfacesCount());
      //  // Unstable assertion: assertEquals(false, functionType2.isBooleanValueType());
      //  // Unstable assertion: assertEquals(false, functionType2.isNullType());
      //  // Unstable assertion: assertEquals(true, functionType0.isInterface());
      //  // Unstable assertion: assertEquals(false, functionType0.isNoType());
      //  // Unstable assertion: assertEquals(false, functionType0.isNoResolvedType());
      //  // Unstable assertion: assertEquals(false, functionType0.isNumberValueType());
      //  // Unstable assertion: assertEquals(false, functionType0.isCheckedUnknownType());
      //  // Unstable assertion: assertEquals(0, functionType0.getExtendedInterfacesCount());
      //  // Unstable assertion: assertEquals(false, functionType0.isOrdinaryFunction());
      //  // Unstable assertion: assertEquals(false, functionType0.isConstructor());
      //  // Unstable assertion: assertEquals(false, functionType0.isRecordType());
      //  // Unstable assertion: assertEquals(false, functionType0.isUnionType());
      //  // Unstable assertion: assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      //  // Unstable assertion: assertEquals(0, functionType0.getMaxArguments());
      //  // Unstable assertion: assertEquals(false, functionType0.isFunctionPrototypeType());
      //  // Unstable assertion: assertEquals(false, functionType0.isBooleanValueType());
      //  // Unstable assertion: assertEquals(false, functionType0.isEnumType());
      //  // Unstable assertion: assertEquals(true, functionType0.hasCachedValues());
      //  // Unstable assertion: assertEquals(false, functionType0.isStringValueType());
      //  // Unstable assertion: assertEquals(false, functionType0.isTemplateType());
      //  // Unstable assertion: assertEquals(true, functionType0.hasInstanceType());
      //  // Unstable assertion: assertEquals(true, functionType0.canBeCalled());
      //  // Unstable assertion: assertEquals(true, functionType0.isFunctionType());
      //  // Unstable assertion: assertEquals(false, functionType0.isResolved());
      //  // Unstable assertion: assertEquals(false, functionType0.isNoObjectType());
      //  // Unstable assertion: assertEquals(false, functionType0.isParameterizedType());
      //  // Unstable assertion: assertEquals(false, functionType0.isNominalType());
      //  // Unstable assertion: assertEquals(false, functionType0.isVoidType());
      //  // Unstable assertion: assertEquals(false, functionType0.isEnumElementType());
      //  // Unstable assertion: assertEquals(false, functionType0.isReturnTypeInferred());
      //  // Unstable assertion: assertEquals(false, functionType0.isNominalConstructor());
      //  // Unstable assertion: assertEquals(false, functionType0.isNullType());
      //  // Unstable assertion: assertEquals(false, functionType0.isAllType());
      //  // Unstable assertion: assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      //  // Unstable assertion: assertEquals(false, unknownType0.isFunctionPrototypeType());
      //  // Unstable assertion: assertEquals(false, unknownType0.isEnumType());
      //  // Unstable assertion: assertEquals(true, unknownType0.matchesStringContext());
      //  // Unstable assertion: assertEquals(true, unknownType0.isCheckedUnknownType());
      //  // Unstable assertion: assertEquals(false, unknownType0.isEnumElementType());
      //  // Unstable assertion: assertEquals(true, unknownType0.matchesNumberContext());
      //  // Unstable assertion: assertEquals(false, unknownType0.isOrdinaryFunction());
      //  // Unstable assertion: assertEquals(false, unknownType0.isNominalType());
      //  // Unstable assertion: assertEquals(2147483647, unknownType0.getPropertiesCount());
      //  // Unstable assertion: assertEquals(false, unknownType0.isFunctionType());
      //  // Unstable assertion: assertEquals(false, unknownType0.isTemplateType());
      //  // Unstable assertion: assertEquals(true, unknownType0.isNullable());
      //  // Unstable assertion: assertEquals(false, unknownType0.isResolved());
      //  // Unstable assertion: assertEquals(false, unknownType0.isRecordType());
      //  // Unstable assertion: assertEquals(false, unknownType0.isUnionType());
      //  // Unstable assertion: assertEquals(true, unknownType0.matchesObjectContext());
      //  // Unstable assertion: assertEquals("Unknown", unknownType0.getDisplayName());
      //  // Unstable assertion: assertEquals(false, unknownType0.isNoResolvedType());
      //  // Unstable assertion: assertEquals(false, unknownType0.hasCachedValues());
      //  // Unstable assertion: assertEquals(false, unknownType0.isBooleanValueType());
      //  // Unstable assertion: assertEquals(false, unknownType0.isNullType());
      //  // Unstable assertion: assertEquals(true, unknownType0.hasDisplayName());
      //  // Unstable assertion: assertEquals(false, unknownType0.isAllType());
      //  // Unstable assertion: assertEquals(true, unknownType0.isUnknownType());
      //  // Unstable assertion: assertEquals(false, unknownType0.isNumberValueType());
      //  // Unstable assertion: assertEquals(false, unknownType0.isInterface());
      //  // Unstable assertion: assertEquals(false, unknownType0.isParameterizedType());
      //  // Unstable assertion: assertEquals("??", unknownType0.getReferenceName());
      //  // Unstable assertion: assertEquals(false, unknownType0.isVoidType());
      //  // Unstable assertion: assertEquals(false, unknownType0.isNativeObjectType());
      //  // Unstable assertion: assertEquals(BooleanLiteralSet.BOTH, unknownType0.getPossibleToBooleanOutcomes());
      //  // Unstable assertion: assertEquals(false, unknownType0.hasReferenceName());
      //  // Unstable assertion: assertEquals(false, unknownType0.isNominalConstructor());
      //  // Unstable assertion: assertEquals(false, unknownType0.isStringValueType());
      //  // Unstable assertion: assertEquals(false, unknownType0.isNoObjectType());
      //  // Unstable assertion: assertEquals(false, unknownType0.isNoType());
      //  // Unstable assertion: assertEquals(true, unknownType0.canBeCalled());
      //  // Unstable assertion: assertEquals(false, unknownType0.isConstructor());
      //  // Unstable assertion: assertTrue(boolean1);
      //  // Unstable assertion: assertFalse(functionType2.equals((Object)functionType0));
      //  // Unstable assertion: assertFalse(functionType2.equals((Object)functionType1));
      //  // Unstable assertion: assertFalse(functionType0.equals((Object)functionType2));
      //  // Unstable assertion: assertTrue(boolean0 == boolean1);
      //  // Unstable assertion: assertTrue(boolean1 == boolean0);
  }

  @Test
  public void test12()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      //  // Unstable assertion: assertNotNull(simpleErrorReporter0);
      
      boolean boolean0 = false;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0, boolean0);
      //  // Unstable assertion: assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      //  // Unstable assertion: assertNotNull(jSTypeRegistry0);
      
      String string0 = "protoyp";
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, string0);
      //  // Unstable assertion: assertEquals(true, errorFunctionType0.hasInstanceType());
      //  // Unstable assertion: assertEquals(true, errorFunctionType0.isNominalConstructor());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isEnumType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isStringValueType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isNumberValueType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isBooleanValueType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      //  // Unstable assertion: assertEquals(3, errorFunctionType0.getMaxArguments());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isUnionType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isNoResolvedType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isCheckedUnknownType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isNominalType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isVoidType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isReturnTypeInferred());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isParameterizedType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isInterface());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isEnumElementType());
      //  // Unstable assertion: assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isTemplateType());
      //  // Unstable assertion: assertEquals(true, errorFunctionType0.isFunctionType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isResolved());
      //  // Unstable assertion: assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isAllType());
      //  // Unstable assertion: assertEquals(true, errorFunctionType0.isConstructor());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.hasCachedValues());
      //  // Unstable assertion: assertEquals(true, errorFunctionType0.canBeCalled());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isNullType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isNoObjectType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isRecordType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isNoType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isFunctionPrototypeType());
      //  // Unstable assertion: assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      //  // Unstable assertion: assertNotNull(errorFunctionType0);
      
      int int0 = 1523;
      String string1 = "a";
      //  // Unstable assertion: assertNotSame(string1, string0);
      
      FunctionType functionType0 = errorFunctionType0.getBindReturnType(int0);
      //  // Unstable assertion: assertNotSame(string0, string1);
      //  // Unstable assertion: assertEquals(true, errorFunctionType0.hasInstanceType());
      //  // Unstable assertion: assertEquals(true, errorFunctionType0.isNominalConstructor());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isEnumType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isStringValueType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isNumberValueType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isBooleanValueType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      //  // Unstable assertion: assertEquals(3, errorFunctionType0.getMaxArguments());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isUnionType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isNoResolvedType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isCheckedUnknownType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isNominalType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isVoidType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isReturnTypeInferred());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isParameterizedType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isInterface());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isEnumElementType());
      //  // Unstable assertion: assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isTemplateType());
      //  // Unstable assertion: assertEquals(true, errorFunctionType0.isFunctionType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isResolved());
      //  // Unstable assertion: assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isAllType());
      //  // Unstable assertion: assertEquals(true, errorFunctionType0.isConstructor());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.hasCachedValues());
      //  // Unstable assertion: assertEquals(true, errorFunctionType0.canBeCalled());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isNullType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isNoObjectType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isRecordType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isNoType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isFunctionPrototypeType());
      //  // Unstable assertion: assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      //  // Unstable assertion: assertEquals(false, functionType0.isNoResolvedType());
      //  // Unstable assertion: assertEquals(false, functionType0.isInterface());
      //  // Unstable assertion: assertEquals(false, functionType0.isTemplateType());
      //  // Unstable assertion: assertEquals(true, functionType0.canBeCalled());
      //  // Unstable assertion: assertEquals(false, functionType0.isNominalConstructor());
      //  // Unstable assertion: assertEquals(false, functionType0.isEnumType());
      //  // Unstable assertion: assertEquals(false, functionType0.isNoType());
      //  // Unstable assertion: assertEquals(0, functionType0.getExtendedInterfacesCount());
      //  // Unstable assertion: assertEquals(false, functionType0.isBooleanValueType());
      //  // Unstable assertion: assertEquals(false, functionType0.isNumberValueType());
      //  // Unstable assertion: assertEquals(true, functionType0.isFunctionType());
      //  // Unstable assertion: assertEquals(false, functionType0.isVoidType());
      //  // Unstable assertion: assertEquals(false, functionType0.isResolved());
      //  // Unstable assertion: assertEquals(false, functionType0.isRecordType());
      //  // Unstable assertion: assertEquals(false, functionType0.hasInstanceType());
      //  // Unstable assertion: assertEquals(false, functionType0.isNullType());
      //  // Unstable assertion: assertEquals(0, functionType0.getMaxArguments());
      //  // Unstable assertion: assertEquals(false, functionType0.isFunctionPrototypeType());
      //  // Unstable assertion: assertEquals(false, functionType0.isStringValueType());
      //  // Unstable assertion: assertEquals(false, functionType0.isNoObjectType());
      //  // Unstable assertion: assertEquals(false, functionType0.isParameterizedType());
      //  // Unstable assertion: assertEquals(false, functionType0.isNominalType());
      //  // Unstable assertion: assertEquals(false, functionType0.isEnumElementType());
      //  // Unstable assertion: assertEquals(false, functionType0.hasCachedValues());
      //  // Unstable assertion: assertEquals(false, functionType0.isAllType());
      //  // Unstable assertion: assertEquals(false, functionType0.isCheckedUnknownType());
      //  // Unstable assertion: assertEquals(true, functionType0.isOrdinaryFunction());
      //  // Unstable assertion: assertEquals(false, functionType0.isReturnTypeInferred());
      //  // Unstable assertion: assertEquals(false, functionType0.isUnionType());
      //  // Unstable assertion: assertEquals(false, functionType0.isConstructor());
      //  // Unstable assertion: assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      //  // Unstable assertion: assertNotNull(functionType0);
      //  // Unstable assertion: assertFalse(string0.equals((Object)string1));
      
      ErrorFunctionType errorFunctionType1 = new ErrorFunctionType(jSTypeRegistry0, string1);
      //  // Unstable assertion: assertNotSame(string1, string0);
      //  // Unstable assertion: assertNotSame(errorFunctionType1, errorFunctionType0);
      //  // Unstable assertion: assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      //  // Unstable assertion: assertEquals(true, errorFunctionType1.isFunctionType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType1.isVoidType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType1.isAllType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType1.isNominalType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType1.isNullType());
      //  // Unstable assertion: assertEquals(0, errorFunctionType1.getExtendedInterfacesCount());
      //  // Unstable assertion: assertEquals(false, errorFunctionType1.isBooleanValueType());
      //  // Unstable assertion: assertEquals(true, errorFunctionType1.hasCachedValues());
      //  // Unstable assertion: assertEquals(false, errorFunctionType1.isNoType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType1.isOrdinaryFunction());
      //  // Unstable assertion: assertEquals(false, errorFunctionType1.isInterface());
      //  // Unstable assertion: assertEquals(BooleanLiteralSet.TRUE, errorFunctionType1.getPossibleToBooleanOutcomes());
      //  // Unstable assertion: assertEquals(false, errorFunctionType1.isUnionType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType1.isEnumType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType1.isNoObjectType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType1.isEnumElementType());
      //  // Unstable assertion: assertEquals(true, errorFunctionType1.isNominalConstructor());
      //  // Unstable assertion: assertEquals(false, errorFunctionType1.isReturnTypeInferred());
      //  // Unstable assertion: assertEquals(true, errorFunctionType1.isConstructor());
      //  // Unstable assertion: assertEquals(false, errorFunctionType1.isFunctionPrototypeType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType1.isStringValueType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType1.isNumberValueType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType1.isRecordType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType1.isParameterizedType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType1.isNoResolvedType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType1.isTemplateType());
      //  // Unstable assertion: assertEquals(3, errorFunctionType1.getMaxArguments());
      //  // Unstable assertion: assertEquals(true, errorFunctionType1.hasInstanceType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType1.isResolved());
      //  // Unstable assertion: assertEquals(false, errorFunctionType1.isCheckedUnknownType());
      //  // Unstable assertion: assertEquals(true, errorFunctionType1.canBeCalled());
      //  // Unstable assertion: assertNotNull(errorFunctionType1);
      //  // Unstable assertion: assertFalse(string1.equals((Object)string0));
      //  // Unstable assertion: assertFalse(errorFunctionType1.equals((Object)errorFunctionType0));
      
      boolean boolean1 = functionType0.canAssignTo((JSType) errorFunctionType1);
      //  // Unstable assertion: assertNotSame(errorFunctionType0, errorFunctionType1);
      //  // Unstable assertion: assertNotSame(string0, string1);
      //  // Unstable assertion: assertNotSame(string1, string0);
      //  // Unstable assertion: assertNotSame(errorFunctionType1, errorFunctionType0);
      //  // Unstable assertion: assertEquals(true, errorFunctionType0.hasInstanceType());
      //  // Unstable assertion: assertEquals(true, errorFunctionType0.isNominalConstructor());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isEnumType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isStringValueType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isNumberValueType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isBooleanValueType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      //  // Unstable assertion: assertEquals(3, errorFunctionType0.getMaxArguments());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isUnionType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isNoResolvedType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isCheckedUnknownType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isNominalType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isVoidType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isReturnTypeInferred());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isParameterizedType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isInterface());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isEnumElementType());
      //  // Unstable assertion: assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isTemplateType());
      //  // Unstable assertion: assertEquals(true, errorFunctionType0.isFunctionType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isResolved());
      //  // Unstable assertion: assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isAllType());
      //  // Unstable assertion: assertEquals(true, errorFunctionType0.isConstructor());
      //  // Unstable assertion: assertEquals(true, errorFunctionType0.hasCachedValues());
      //  // Unstable assertion: assertEquals(true, errorFunctionType0.canBeCalled());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isNullType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isNoObjectType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isRecordType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isNoType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isFunctionPrototypeType());
      //  // Unstable assertion: assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      //  // Unstable assertion: assertEquals(false, functionType0.isNoResolvedType());
      //  // Unstable assertion: assertEquals(false, functionType0.isInterface());
      //  // Unstable assertion: assertEquals(false, functionType0.isTemplateType());
      //  // Unstable assertion: assertEquals(true, functionType0.canBeCalled());
      //  // Unstable assertion: assertEquals(false, functionType0.isNominalConstructor());
      //  // Unstable assertion: assertEquals(false, functionType0.isEnumType());
      //  // Unstable assertion: assertEquals(false, functionType0.isNoType());
      //  // Unstable assertion: assertEquals(0, functionType0.getExtendedInterfacesCount());
      //  // Unstable assertion: assertEquals(false, functionType0.isBooleanValueType());
      //  // Unstable assertion: assertEquals(false, functionType0.isNumberValueType());
      //  // Unstable assertion: assertEquals(true, functionType0.isFunctionType());
      //  // Unstable assertion: assertEquals(false, functionType0.isVoidType());
      //  // Unstable assertion: assertEquals(false, functionType0.isResolved());
      //  // Unstable assertion: assertEquals(false, functionType0.isRecordType());
      //  // Unstable assertion: assertEquals(false, functionType0.hasInstanceType());
      //  // Unstable assertion: assertEquals(false, functionType0.isNullType());
      //  // Unstable assertion: assertEquals(0, functionType0.getMaxArguments());
      //  // Unstable assertion: assertEquals(false, functionType0.isFunctionPrototypeType());
      //  // Unstable assertion: assertEquals(false, functionType0.isStringValueType());
      //  // Unstable assertion: assertEquals(false, functionType0.isNoObjectType());
      //  // Unstable assertion: assertEquals(false, functionType0.isParameterizedType());
      //  // Unstable assertion: assertEquals(false, functionType0.isNominalType());
      //  // Unstable assertion: assertEquals(false, functionType0.isEnumElementType());
      //  // Unstable assertion: assertEquals(false, functionType0.isAllType());
      //  // Unstable assertion: assertEquals(false, functionType0.isCheckedUnknownType());
      //  // Unstable assertion: assertEquals(true, functionType0.isOrdinaryFunction());
      //  // Unstable assertion: assertEquals(false, functionType0.isReturnTypeInferred());
      //  // Unstable assertion: assertEquals(false, functionType0.isUnionType());
      //  // Unstable assertion: assertEquals(true, functionType0.hasCachedValues());
      //  // Unstable assertion: assertEquals(false, functionType0.isConstructor());
      //  // Unstable assertion: assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      //  // Unstable assertion: assertEquals(true, errorFunctionType1.isFunctionType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType1.isVoidType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType1.isAllType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType1.isNominalType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType1.isNullType());
      //  // Unstable assertion: assertEquals(0, errorFunctionType1.getExtendedInterfacesCount());
      //  // Unstable assertion: assertEquals(false, errorFunctionType1.isBooleanValueType());
      //  // Unstable assertion: assertEquals(true, errorFunctionType1.hasCachedValues());
      //  // Unstable assertion: assertEquals(false, errorFunctionType1.isNoType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType1.isOrdinaryFunction());
      //  // Unstable assertion: assertEquals(false, errorFunctionType1.isInterface());
      //  // Unstable assertion: assertEquals(BooleanLiteralSet.TRUE, errorFunctionType1.getPossibleToBooleanOutcomes());
      //  // Unstable assertion: assertEquals(false, errorFunctionType1.isUnionType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType1.isEnumType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType1.isNoObjectType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType1.isEnumElementType());
      //  // Unstable assertion: assertEquals(true, errorFunctionType1.isNominalConstructor());
      //  // Unstable assertion: assertEquals(false, errorFunctionType1.isReturnTypeInferred());
      //  // Unstable assertion: assertEquals(true, errorFunctionType1.isConstructor());
      //  // Unstable assertion: assertEquals(false, errorFunctionType1.isFunctionPrototypeType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType1.isStringValueType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType1.isNumberValueType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType1.isRecordType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType1.isParameterizedType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType1.isNoResolvedType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType1.isTemplateType());
      //  // Unstable assertion: assertEquals(3, errorFunctionType1.getMaxArguments());
      //  // Unstable assertion: assertEquals(true, errorFunctionType1.hasInstanceType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType1.isResolved());
      //  // Unstable assertion: assertEquals(false, errorFunctionType1.isCheckedUnknownType());
      //  // Unstable assertion: assertEquals(true, errorFunctionType1.canBeCalled());
      //  // Unstable assertion: assertFalse(boolean1);
      //  // Unstable assertion: assertTrue(boolean1 == boolean0);
      //  // Unstable assertion: assertFalse(errorFunctionType0.equals((Object)errorFunctionType1));
      //  // Unstable assertion: assertFalse(string0.equals((Object)string1));
      //  // Unstable assertion: assertTrue(boolean0 == boolean1);
      //  // Unstable assertion: assertFalse(string1.equals((Object)string0));
      //  // Unstable assertion: assertFalse(errorFunctionType1.equals((Object)errorFunctionType0));
  }

  @Test
  public void test13()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      //  // Unstable assertion: assertNotNull(simpleErrorReporter0);
      
      boolean boolean0 = false;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0, boolean0);
      //  // Unstable assertion: assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      //  // Unstable assertion: assertNotNull(jSTypeRegistry0);
      
      String string0 = "protoyp";
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, string0);
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isReturnTypeInferred());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isNoResolvedType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isNominalType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isVoidType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isCheckedUnknownType());
      //  // Unstable assertion: assertEquals(true, errorFunctionType0.isConstructor());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isRecordType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isNoObjectType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isStringValueType());
      //  // Unstable assertion: assertEquals(true, errorFunctionType0.canBeCalled());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isNoType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isFunctionPrototypeType());
      //  // Unstable assertion: assertEquals(true, errorFunctionType0.isFunctionType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isAllType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isBooleanValueType());
      //  // Unstable assertion: assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isEnumType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isUnionType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.hasCachedValues());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isTemplateType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isNumberValueType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isResolved());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isEnumElementType());
      //  // Unstable assertion: assertEquals(true, errorFunctionType0.isNominalConstructor());
      //  // Unstable assertion: assertEquals(true, errorFunctionType0.hasInstanceType());
      //  // Unstable assertion: assertEquals(3, errorFunctionType0.getMaxArguments());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isParameterizedType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isNullType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isInterface());
      //  // Unstable assertion: assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      //  // Unstable assertion: assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      //  // Unstable assertion: assertNotNull(errorFunctionType0);
      
      String string1 = "a";
      //  // Unstable assertion: assertNotSame(string1, string0);
      
      ErrorFunctionType errorFunctionType1 = new ErrorFunctionType(jSTypeRegistry0, string1);
      //  // Unstable assertion: assertNotSame(errorFunctionType1, errorFunctionType0);
      //  // Unstable assertion: assertNotSame(string1, string0);
      //  // Unstable assertion: assertEquals(0, errorFunctionType1.getExtendedInterfacesCount());
      //  // Unstable assertion: assertEquals(false, errorFunctionType1.isResolved());
      //  // Unstable assertion: assertEquals(false, errorFunctionType1.isFunctionPrototypeType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType1.isCheckedUnknownType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType1.isInterface());
      //  // Unstable assertion: assertEquals(false, errorFunctionType1.isUnionType());
      //  // Unstable assertion: assertEquals(true, errorFunctionType1.isConstructor());
      //  // Unstable assertion: assertEquals(3, errorFunctionType1.getMaxArguments());
      //  // Unstable assertion: assertEquals(false, errorFunctionType1.isRecordType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType1.isVoidType());
      //  // Unstable assertion: assertEquals(true, errorFunctionType1.hasInstanceType());
      //  // Unstable assertion: assertEquals(BooleanLiteralSet.TRUE, errorFunctionType1.getPossibleToBooleanOutcomes());
      //  // Unstable assertion: assertEquals(false, errorFunctionType1.isBooleanValueType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType1.isNoObjectType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType1.isAllType());
      //  // Unstable assertion: assertEquals(true, errorFunctionType1.isNominalConstructor());
      //  // Unstable assertion: assertEquals(false, errorFunctionType1.isParameterizedType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType1.isEnumType());
      //  // Unstable assertion: assertEquals(true, errorFunctionType1.isFunctionType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType1.isNumberValueType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType1.isNoType());
      //  // Unstable assertion: assertEquals(true, errorFunctionType1.canBeCalled());
      //  // Unstable assertion: assertEquals(false, errorFunctionType1.isTemplateType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType1.isNominalType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType1.isNoResolvedType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType1.isEnumElementType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType1.isNullType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType1.isReturnTypeInferred());
      //  // Unstable assertion: assertEquals(false, errorFunctionType1.isStringValueType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType1.isOrdinaryFunction());
      //  // Unstable assertion: assertEquals(true, errorFunctionType1.hasCachedValues());
      //  // Unstable assertion: assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      //  // Unstable assertion: assertNotNull(errorFunctionType1);
      //  // Unstable assertion: assertFalse(errorFunctionType1.equals((Object)errorFunctionType0));
      //  // Unstable assertion: assertFalse(string1.equals((Object)string0));
      
      boolean boolean1 = errorFunctionType0.canAssignTo((JSType) errorFunctionType1);
      //  // Unstable assertion: assertNotSame(string0, string1);
      //  // Unstable assertion: assertNotSame(errorFunctionType1, errorFunctionType0);
      //  // Unstable assertion: assertNotSame(string1, string0);
      //  // Unstable assertion: assertNotSame(errorFunctionType0, errorFunctionType1);
      //  // Unstable assertion: assertEquals(0, errorFunctionType1.getExtendedInterfacesCount());
      //  // Unstable assertion: assertEquals(false, errorFunctionType1.isResolved());
      //  // Unstable assertion: assertEquals(false, errorFunctionType1.isFunctionPrototypeType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType1.isCheckedUnknownType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType1.isInterface());
      //  // Unstable assertion: assertEquals(false, errorFunctionType1.isUnionType());
      //  // Unstable assertion: assertEquals(true, errorFunctionType1.isConstructor());
      //  // Unstable assertion: assertEquals(3, errorFunctionType1.getMaxArguments());
      //  // Unstable assertion: assertEquals(false, errorFunctionType1.isRecordType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType1.isVoidType());
      //  // Unstable assertion: assertEquals(true, errorFunctionType1.hasInstanceType());
      //  // Unstable assertion: assertEquals(BooleanLiteralSet.TRUE, errorFunctionType1.getPossibleToBooleanOutcomes());
      //  // Unstable assertion: assertEquals(false, errorFunctionType1.isBooleanValueType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType1.isNoObjectType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType1.isAllType());
      //  // Unstable assertion: assertEquals(true, errorFunctionType1.isNominalConstructor());
      //  // Unstable assertion: assertEquals(false, errorFunctionType1.isParameterizedType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType1.isEnumType());
      //  // Unstable assertion: assertEquals(true, errorFunctionType1.isFunctionType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType1.isNumberValueType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType1.isNoType());
      //  // Unstable assertion: assertEquals(true, errorFunctionType1.canBeCalled());
      //  // Unstable assertion: assertEquals(false, errorFunctionType1.isTemplateType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType1.isNominalType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType1.isNoResolvedType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType1.isEnumElementType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType1.isNullType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType1.isReturnTypeInferred());
      //  // Unstable assertion: assertEquals(false, errorFunctionType1.isStringValueType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType1.isOrdinaryFunction());
      //  // Unstable assertion: assertEquals(true, errorFunctionType1.hasCachedValues());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isReturnTypeInferred());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isNoResolvedType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isNominalType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isVoidType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isCheckedUnknownType());
      //  // Unstable assertion: assertEquals(true, errorFunctionType0.isConstructor());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isRecordType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isNoObjectType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isStringValueType());
      //  // Unstable assertion: assertEquals(true, errorFunctionType0.canBeCalled());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isNoType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isFunctionPrototypeType());
      //  // Unstable assertion: assertEquals(true, errorFunctionType0.isFunctionType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isAllType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isBooleanValueType());
      //  // Unstable assertion: assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isEnumType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isUnionType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isTemplateType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isNumberValueType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isResolved());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isEnumElementType());
      //  // Unstable assertion: assertEquals(true, errorFunctionType0.isNominalConstructor());
      //  // Unstable assertion: assertEquals(true, errorFunctionType0.hasInstanceType());
      //  // Unstable assertion: assertEquals(3, errorFunctionType0.getMaxArguments());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isParameterizedType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isNullType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isInterface());
      //  // Unstable assertion: assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      //  // Unstable assertion: assertEquals(true, errorFunctionType0.hasCachedValues());
      //  // Unstable assertion: assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      //  // Unstable assertion: assertFalse(boolean1);
      //  // Unstable assertion: assertFalse(string0.equals((Object)string1));
      //  // Unstable assertion: assertFalse(errorFunctionType1.equals((Object)errorFunctionType0));
      //  // Unstable assertion: assertFalse(string1.equals((Object)string0));
      //  // Unstable assertion: assertFalse(errorFunctionType0.equals((Object)errorFunctionType1));
      //  // Unstable assertion: assertTrue(boolean1 == boolean0);
      //  // Unstable assertion: assertTrue(boolean0 == boolean1);
  }

  @Test
  public void test14()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      boolean boolean0 = false;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0, boolean0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      String string0 = "]";
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, string0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(true, errorFunctionType0.canBeCalled());
      assertEquals(false, errorFunctionType0.isNoResolvedType());
      assertEquals(false, errorFunctionType0.isUnionType());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, errorFunctionType0.isResolved());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertEquals(false, errorFunctionType0.isCheckedUnknownType());
      assertEquals(false, errorFunctionType0.isFunctionPrototypeType());
      assertEquals(false, errorFunctionType0.isNumberValueType());
      assertEquals(true, errorFunctionType0.isConstructor());
      assertEquals(false, errorFunctionType0.isNullType());
      assertEquals(false, errorFunctionType0.isTemplateType());
      assertEquals(false, errorFunctionType0.isNoType());
      assertEquals(false, errorFunctionType0.isInterface());
      assertEquals(false, errorFunctionType0.isStringValueType());
      assertEquals(false, errorFunctionType0.isVoidType());
      assertEquals(false, errorFunctionType0.isNominalType());
      assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      assertEquals(false, errorFunctionType0.isRecordType());
      assertEquals(false, errorFunctionType0.isEnumType());
      assertEquals(false, errorFunctionType0.isEnumElementType());
      assertEquals(false, errorFunctionType0.isReturnTypeInferred());
      assertEquals(false, errorFunctionType0.isBooleanValueType());
      assertEquals(true, errorFunctionType0.isFunctionType());
      assertEquals(true, errorFunctionType0.hasInstanceType());
      assertEquals(true, errorFunctionType0.isNominalConstructor());
      assertEquals(3, errorFunctionType0.getMaxArguments());
      assertEquals(false, errorFunctionType0.hasCachedValues());
      assertEquals(false, errorFunctionType0.isParameterizedType());
      assertEquals(false, errorFunctionType0.isAllType());
      assertEquals(false, errorFunctionType0.isNoObjectType());
      assertNotNull(errorFunctionType0);
      
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      assertEquals(true, noResolvedType0.matchesNumberContext());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noResolvedType0.isStringValueType());
      assertEquals(false, noResolvedType0.isInterface());
      assertEquals(false, noResolvedType0.isTemplateType());
      assertEquals(false, noResolvedType0.isRecordType());
      assertEquals(false, noResolvedType0.isCheckedUnknownType());
      assertEquals(false, noResolvedType0.isOrdinaryFunction());
      assertEquals(false, noResolvedType0.isResolved());
      assertEquals(true, noResolvedType0.canBeCalled());
      assertEquals(false, noResolvedType0.isEnumElementType());
      assertEquals(false, noResolvedType0.isAllType());
      assertEquals(false, noResolvedType0.isNullType());
      assertEquals(true, noResolvedType0.isConstructor());
      assertEquals(false, noResolvedType0.hasCachedValues());
      assertEquals(false, noResolvedType0.isReturnTypeInferred());
      assertEquals(false, noResolvedType0.isUnionType());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertEquals(true, noResolvedType0.isNullable());
      assertEquals(false, noResolvedType0.isFunctionPrototypeType());
      assertEquals(false, noResolvedType0.isNominalConstructor());
      assertEquals(true, noResolvedType0.matchesStringContext());
      assertEquals(false, noResolvedType0.isNoObjectType());
      assertEquals(true, noResolvedType0.matchesObjectContext());
      assertEquals(false, noResolvedType0.isFunctionType());
      assertEquals(2147483647, noResolvedType0.getPropertiesCount());
      assertEquals(false, noResolvedType0.isNominalType());
      assertEquals(false, noResolvedType0.isVoidType());
      assertEquals(false, noResolvedType0.isEnumType());
      assertEquals(true, noResolvedType0.hasInstanceType());
      assertNull(noResolvedType0.getReferenceName());
      assertEquals(false, noResolvedType0.isBooleanValueType());
      assertEquals(2147483647, noResolvedType0.getMaxArguments());
      assertEquals(false, noResolvedType0.isNumberValueType());
      assertEquals(false, noResolvedType0.isParameterizedType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(noResolvedType0);
      
      FunctionType functionType0 = noResolvedType0.cloneWithoutArrowType();
      assertEquals(false, functionType0.isNoResolvedType());
      assertEquals(false, functionType0.isBooleanValueType());
      assertEquals(false, functionType0.isVoidType());
      assertEquals(false, functionType0.hasCachedValues());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertEquals(false, functionType0.isResolved());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, functionType0.isTemplateType());
      assertEquals(false, functionType0.isNominalConstructor());
      assertEquals(false, functionType0.isCheckedUnknownType());
      assertEquals(false, functionType0.isUnionType());
      assertEquals(2147483647, functionType0.getMaxArguments());
      assertEquals(true, functionType0.isConstructor());
      assertEquals(false, functionType0.isEnumElementType());
      assertEquals(true, functionType0.isFunctionType());
      assertEquals(false, functionType0.isNoObjectType());
      assertEquals(false, functionType0.isNominalType());
      assertEquals(false, functionType0.isInterface());
      assertEquals(false, functionType0.isParameterizedType());
      assertEquals(false, functionType0.isNoType());
      assertEquals(false, functionType0.isStringValueType());
      assertEquals(false, functionType0.isRecordType());
      assertEquals(false, functionType0.isReturnTypeInferred());
      assertEquals(false, functionType0.isNullType());
      assertEquals(true, functionType0.hasInstanceType());
      assertEquals(false, functionType0.isOrdinaryFunction());
      assertEquals(false, functionType0.isNumberValueType());
      assertEquals(false, functionType0.isEnumType());
      assertEquals(false, functionType0.isAllType());
      assertEquals(true, functionType0.canBeCalled());
      assertEquals(false, functionType0.isFunctionPrototypeType());
      assertEquals(true, noResolvedType0.matchesNumberContext());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noResolvedType0.isStringValueType());
      assertEquals(false, noResolvedType0.isInterface());
      assertEquals(false, noResolvedType0.isTemplateType());
      assertEquals(false, noResolvedType0.isRecordType());
      assertEquals(false, noResolvedType0.isCheckedUnknownType());
      assertEquals(false, noResolvedType0.isOrdinaryFunction());
      assertEquals(false, noResolvedType0.isResolved());
      assertEquals(true, noResolvedType0.canBeCalled());
      assertEquals(false, noResolvedType0.isEnumElementType());
      assertEquals(false, noResolvedType0.isAllType());
      assertEquals(false, noResolvedType0.isNullType());
      assertEquals(true, noResolvedType0.isConstructor());
      assertEquals(false, noResolvedType0.hasCachedValues());
      assertEquals(false, noResolvedType0.isReturnTypeInferred());
      assertEquals(false, noResolvedType0.isUnionType());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertEquals(true, noResolvedType0.isNullable());
      assertEquals(false, noResolvedType0.isFunctionPrototypeType());
      assertEquals(false, noResolvedType0.isNominalConstructor());
      assertEquals(true, noResolvedType0.matchesStringContext());
      assertEquals(false, noResolvedType0.isNoObjectType());
      assertEquals(true, noResolvedType0.matchesObjectContext());
      assertEquals(false, noResolvedType0.isFunctionType());
      assertEquals(2147483647, noResolvedType0.getPropertiesCount());
      assertEquals(false, noResolvedType0.isNominalType());
      assertEquals(false, noResolvedType0.isVoidType());
      assertEquals(false, noResolvedType0.isEnumType());
      assertEquals(true, noResolvedType0.hasInstanceType());
      assertNull(noResolvedType0.getReferenceName());
      assertEquals(false, noResolvedType0.isBooleanValueType());
      assertEquals(2147483647, noResolvedType0.getMaxArguments());
      assertEquals(false, noResolvedType0.isNumberValueType());
      assertEquals(false, noResolvedType0.isParameterizedType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(functionType0);
      
      boolean boolean1 = functionType0.isSubtype((JSType) errorFunctionType0);
      assertEquals(false, functionType0.isNoResolvedType());
      assertEquals(false, functionType0.isBooleanValueType());
      assertEquals(false, functionType0.isVoidType());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertEquals(false, functionType0.isResolved());
      assertEquals(true, functionType0.hasCachedValues());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, functionType0.isTemplateType());
      assertEquals(false, functionType0.isNominalConstructor());
      assertEquals(false, functionType0.isCheckedUnknownType());
      assertEquals(false, functionType0.isUnionType());
      assertEquals(2147483647, functionType0.getMaxArguments());
      assertEquals(true, functionType0.isConstructor());
      assertEquals(false, functionType0.isEnumElementType());
      assertEquals(true, functionType0.isFunctionType());
      assertEquals(false, functionType0.isNoObjectType());
      assertEquals(false, functionType0.isNominalType());
      assertEquals(false, functionType0.isInterface());
      assertEquals(false, functionType0.isParameterizedType());
      assertEquals(false, functionType0.isNoType());
      assertEquals(false, functionType0.isStringValueType());
      assertEquals(false, functionType0.isRecordType());
      assertEquals(false, functionType0.isReturnTypeInferred());
      assertEquals(false, functionType0.isNullType());
      assertEquals(true, functionType0.hasInstanceType());
      assertEquals(false, functionType0.isOrdinaryFunction());
      assertEquals(false, functionType0.isNumberValueType());
      assertEquals(false, functionType0.isEnumType());
      assertEquals(false, functionType0.isAllType());
      assertEquals(true, functionType0.canBeCalled());
      assertEquals(false, functionType0.isFunctionPrototypeType());
      assertEquals(true, noResolvedType0.matchesNumberContext());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noResolvedType0.isStringValueType());
      assertEquals(false, noResolvedType0.isInterface());
      assertEquals(false, noResolvedType0.isTemplateType());
      assertEquals(false, noResolvedType0.isRecordType());
      assertEquals(false, noResolvedType0.isCheckedUnknownType());
      assertEquals(false, noResolvedType0.isOrdinaryFunction());
      assertEquals(false, noResolvedType0.isResolved());
      assertEquals(true, noResolvedType0.canBeCalled());
      assertEquals(false, noResolvedType0.isEnumElementType());
      assertEquals(false, noResolvedType0.isAllType());
      assertEquals(false, noResolvedType0.isNullType());
      assertEquals(true, noResolvedType0.isConstructor());
      assertEquals(false, noResolvedType0.isReturnTypeInferred());
      assertEquals(false, noResolvedType0.isUnionType());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertEquals(true, noResolvedType0.isNullable());
      assertEquals(false, noResolvedType0.isFunctionPrototypeType());
      assertEquals(true, noResolvedType0.hasCachedValues());
      assertEquals(false, noResolvedType0.isNominalConstructor());
      assertEquals(true, noResolvedType0.matchesStringContext());
      assertEquals(false, noResolvedType0.isNoObjectType());
      assertEquals(true, noResolvedType0.matchesObjectContext());
      assertEquals(false, noResolvedType0.isFunctionType());
      assertEquals(2147483647, noResolvedType0.getPropertiesCount());
      assertEquals(false, noResolvedType0.isNominalType());
      assertEquals(false, noResolvedType0.isVoidType());
      assertEquals(false, noResolvedType0.isEnumType());
      assertEquals(true, noResolvedType0.hasInstanceType());
      assertNull(noResolvedType0.getReferenceName());
      assertEquals(false, noResolvedType0.isBooleanValueType());
      assertEquals(2147483647, noResolvedType0.getMaxArguments());
      assertEquals(false, noResolvedType0.isNumberValueType());
      assertEquals(false, noResolvedType0.isParameterizedType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(true, errorFunctionType0.canBeCalled());
      assertEquals(false, errorFunctionType0.isNoResolvedType());
      assertEquals(false, errorFunctionType0.isUnionType());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, errorFunctionType0.isResolved());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertEquals(false, errorFunctionType0.isCheckedUnknownType());
      assertEquals(false, errorFunctionType0.isFunctionPrototypeType());
      assertEquals(false, errorFunctionType0.isNumberValueType());
      assertEquals(true, errorFunctionType0.isConstructor());
      assertEquals(false, errorFunctionType0.isNullType());
      assertEquals(true, errorFunctionType0.hasCachedValues());
      assertEquals(false, errorFunctionType0.isTemplateType());
      assertEquals(false, errorFunctionType0.isNoType());
      assertEquals(false, errorFunctionType0.isInterface());
      assertEquals(false, errorFunctionType0.isStringValueType());
      assertEquals(false, errorFunctionType0.isVoidType());
      assertEquals(false, errorFunctionType0.isNominalType());
      assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      assertEquals(false, errorFunctionType0.isRecordType());
      assertEquals(false, errorFunctionType0.isEnumType());
      assertEquals(false, errorFunctionType0.isEnumElementType());
      assertEquals(false, errorFunctionType0.isReturnTypeInferred());
      assertEquals(false, errorFunctionType0.isBooleanValueType());
      assertEquals(true, errorFunctionType0.isFunctionType());
      assertEquals(true, errorFunctionType0.hasInstanceType());
      assertEquals(true, errorFunctionType0.isNominalConstructor());
      assertEquals(3, errorFunctionType0.getMaxArguments());
      assertEquals(false, errorFunctionType0.isParameterizedType());
      assertEquals(false, errorFunctionType0.isAllType());
      assertEquals(false, errorFunctionType0.isNoObjectType());
      assertTrue(boolean1);
      assertFalse(boolean0 == boolean1);
      assertFalse(boolean1 == boolean0);
  }

  @Test
  public void test15()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      //  // Unstable assertion: assertNotNull(simpleErrorReporter0);
      
      boolean boolean0 = false;
      String string0 = "bind";
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0, boolean0);
      //  // Unstable assertion: assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      //  // Unstable assertion: assertNotNull(jSTypeRegistry0);
      
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      //  // Unstable assertion: assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      //  // Unstable assertion: assertEquals(false, noResolvedType0.isFunctionPrototypeType());
      //  // Unstable assertion: assertEquals(true, noResolvedType0.isNullable());
      //  // Unstable assertion: assertEquals(2147483647, noResolvedType0.getPropertiesCount());
      //  // Unstable assertion: assertEquals(false, noResolvedType0.isBooleanValueType());
      //  // Unstable assertion: assertEquals(false, noResolvedType0.isStringValueType());
      //  // Unstable assertion: assertEquals(true, noResolvedType0.matchesNumberContext());
      //  // Unstable assertion: assertEquals(false, noResolvedType0.isNominalConstructor());
      //  // Unstable assertion: assertEquals(false, noResolvedType0.isNullType());
      //  // Unstable assertion: assertEquals(false, noResolvedType0.isFunctionType());
      //  // Unstable assertion: assertEquals(false, noResolvedType0.isAllType());
      //  // Unstable assertion: assertEquals(false, noResolvedType0.isEnumType());
      //  // Unstable assertion: assertEquals(false, noResolvedType0.isUnionType());
      //  // Unstable assertion: assertEquals(true, noResolvedType0.hasInstanceType());
      //  // Unstable assertion: assertEquals(false, noResolvedType0.isNoObjectType());
      //  // Unstable assertion: assertEquals(false, noResolvedType0.isTemplateType());
      //  // Unstable assertion: assertEquals(false, noResolvedType0.isInterface());
      //  // Unstable assertion: assertEquals(false, noResolvedType0.hasCachedValues());
      //  // Unstable assertion: assertEquals(2147483647, noResolvedType0.getMaxArguments());
      //  // Unstable assertion: assertEquals(false, noResolvedType0.isParameterizedType());
      //  // Unstable assertion: assertNull(noResolvedType0.getReferenceName());
      //  // Unstable assertion: assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      //  // Unstable assertion: assertEquals(false, noResolvedType0.isVoidType());
      //  // Unstable assertion: assertEquals(true, noResolvedType0.matchesObjectContext());
      //  // Unstable assertion: assertEquals(true, noResolvedType0.matchesStringContext());
      //  // Unstable assertion: assertEquals(false, noResolvedType0.isOrdinaryFunction());
      //  // Unstable assertion: assertEquals(false, noResolvedType0.isReturnTypeInferred());
      //  // Unstable assertion: assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      //  // Unstable assertion: assertEquals(false, noResolvedType0.isRecordType());
      //  // Unstable assertion: assertEquals(false, noResolvedType0.isCheckedUnknownType());
      //  // Unstable assertion: assertEquals(true, noResolvedType0.isConstructor());
      //  // Unstable assertion: assertEquals(true, noResolvedType0.canBeCalled());
      //  // Unstable assertion: assertEquals(false, noResolvedType0.isNominalType());
      //  // Unstable assertion: assertEquals(false, noResolvedType0.isNumberValueType());
      //  // Unstable assertion: assertEquals(false, noResolvedType0.isResolved());
      //  // Unstable assertion: assertEquals(false, noResolvedType0.isEnumElementType());
      //  // Unstable assertion: assertNotNull(noResolvedType0);
      
      FunctionType functionType0 = noResolvedType0.cloneWithoutArrowType();
      //  // Unstable assertion: assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      //  // Unstable assertion: assertEquals(false, functionType0.isNoType());
      //  // Unstable assertion: assertEquals(false, functionType0.isInterface());
      //  // Unstable assertion: assertEquals(true, functionType0.canBeCalled());
      //  // Unstable assertion: assertEquals(0, functionType0.getExtendedInterfacesCount());
      //  // Unstable assertion: assertEquals(false, functionType0.isReturnTypeInferred());
      //  // Unstable assertion: assertEquals(false, functionType0.isNominalType());
      //  // Unstable assertion: assertEquals(false, functionType0.isVoidType());
      //  // Unstable assertion: assertEquals(2147483647, functionType0.getMaxArguments());
      //  // Unstable assertion: assertEquals(false, functionType0.isNumberValueType());
      //  // Unstable assertion: assertEquals(true, functionType0.hasInstanceType());
      //  // Unstable assertion: assertEquals(false, functionType0.isAllType());
      //  // Unstable assertion: assertEquals(false, functionType0.isBooleanValueType());
      //  // Unstable assertion: assertEquals(false, functionType0.isRecordType());
      //  // Unstable assertion: assertEquals(false, functionType0.isNoResolvedType());
      //  // Unstable assertion: assertEquals(false, functionType0.isUnionType());
      //  // Unstable assertion: assertEquals(false, functionType0.hasCachedValues());
      //  // Unstable assertion: assertEquals(false, functionType0.isParameterizedType());
      //  // Unstable assertion: assertEquals(false, functionType0.isNullType());
      //  // Unstable assertion: assertEquals(false, functionType0.isNominalConstructor());
      //  // Unstable assertion: assertEquals(false, functionType0.isOrdinaryFunction());
      //  // Unstable assertion: assertEquals(false, functionType0.isStringValueType());
      //  // Unstable assertion: assertEquals(false, functionType0.isEnumElementType());
      //  // Unstable assertion: assertEquals(false, functionType0.isCheckedUnknownType());
      //  // Unstable assertion: assertEquals(true, functionType0.isFunctionType());
      //  // Unstable assertion: assertEquals(false, functionType0.isFunctionPrototypeType());
      //  // Unstable assertion: assertEquals(true, functionType0.isConstructor());
      //  // Unstable assertion: assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      //  // Unstable assertion: assertEquals(false, functionType0.isResolved());
      //  // Unstable assertion: assertEquals(false, functionType0.isEnumType());
      //  // Unstable assertion: assertEquals(false, functionType0.isTemplateType());
      //  // Unstable assertion: assertEquals(false, functionType0.isNoObjectType());
      //  // Unstable assertion: assertEquals(false, noResolvedType0.isFunctionPrototypeType());
      //  // Unstable assertion: assertEquals(true, noResolvedType0.isNullable());
      //  // Unstable assertion: assertEquals(2147483647, noResolvedType0.getPropertiesCount());
      //  // Unstable assertion: assertEquals(false, noResolvedType0.isBooleanValueType());
      //  // Unstable assertion: assertEquals(false, noResolvedType0.isStringValueType());
      //  // Unstable assertion: assertEquals(true, noResolvedType0.matchesNumberContext());
      //  // Unstable assertion: assertEquals(false, noResolvedType0.isNominalConstructor());
      //  // Unstable assertion: assertEquals(false, noResolvedType0.isNullType());
      //  // Unstable assertion: assertEquals(false, noResolvedType0.isFunctionType());
      //  // Unstable assertion: assertEquals(false, noResolvedType0.isAllType());
      //  // Unstable assertion: assertEquals(false, noResolvedType0.isEnumType());
      //  // Unstable assertion: assertEquals(false, noResolvedType0.isUnionType());
      //  // Unstable assertion: assertEquals(true, noResolvedType0.hasInstanceType());
      //  // Unstable assertion: assertEquals(false, noResolvedType0.isNoObjectType());
      //  // Unstable assertion: assertEquals(false, noResolvedType0.isTemplateType());
      //  // Unstable assertion: assertEquals(false, noResolvedType0.isInterface());
      //  // Unstable assertion: assertEquals(false, noResolvedType0.hasCachedValues());
      //  // Unstable assertion: assertEquals(2147483647, noResolvedType0.getMaxArguments());
      //  // Unstable assertion: assertEquals(false, noResolvedType0.isParameterizedType());
      //  // Unstable assertion: assertNull(noResolvedType0.getReferenceName());
      //  // Unstable assertion: assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      //  // Unstable assertion: assertEquals(false, noResolvedType0.isVoidType());
      //  // Unstable assertion: assertEquals(true, noResolvedType0.matchesObjectContext());
      //  // Unstable assertion: assertEquals(true, noResolvedType0.matchesStringContext());
      //  // Unstable assertion: assertEquals(false, noResolvedType0.isOrdinaryFunction());
      //  // Unstable assertion: assertEquals(false, noResolvedType0.isReturnTypeInferred());
      //  // Unstable assertion: assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      //  // Unstable assertion: assertEquals(false, noResolvedType0.isRecordType());
      //  // Unstable assertion: assertEquals(false, noResolvedType0.isCheckedUnknownType());
      //  // Unstable assertion: assertEquals(true, noResolvedType0.isConstructor());
      //  // Unstable assertion: assertEquals(true, noResolvedType0.canBeCalled());
      //  // Unstable assertion: assertEquals(false, noResolvedType0.isNominalType());
      //  // Unstable assertion: assertEquals(false, noResolvedType0.isNumberValueType());
      //  // Unstable assertion: assertEquals(false, noResolvedType0.isResolved());
      //  // Unstable assertion: assertEquals(false, noResolvedType0.isEnumElementType());
      //  // Unstable assertion: assertNotNull(functionType0);
      
      FunctionType functionType1 = (FunctionType)functionType0.getPropertyType(string0);
      //  // Unstable assertion: assertNotSame(functionType1, functionType0);
      //  // Unstable assertion: assertNotSame(functionType0, functionType1);
      //  // Unstable assertion: assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      //  // Unstable assertion: assertEquals(true, functionType1.canBeCalled());
      //  // Unstable assertion: assertEquals(false, functionType1.isCheckedUnknownType());
      //  // Unstable assertion: assertEquals(false, functionType1.isParameterizedType());
      //  // Unstable assertion: assertEquals(false, functionType1.hasInstanceType());
      //  // Unstable assertion: assertEquals(false, functionType1.isNominalConstructor());
      //  // Unstable assertion: assertEquals(true, functionType1.isOrdinaryFunction());
      //  // Unstable assertion: assertEquals(false, functionType1.isNominalType());
      //  // Unstable assertion: assertEquals(false, functionType1.isUnionType());
      //  // Unstable assertion: assertEquals(false, functionType1.isEnumElementType());
      //  // Unstable assertion: assertEquals(true, functionType1.isFunctionType());
      //  // Unstable assertion: assertEquals(false, functionType1.isNoObjectType());
      //  // Unstable assertion: assertEquals(false, functionType1.isNoType());
      //  // Unstable assertion: assertEquals(0, functionType1.getExtendedInterfacesCount());
      //  // Unstable assertion: assertEquals(false, functionType1.isFunctionPrototypeType());
      //  // Unstable assertion: assertEquals(false, functionType1.isRecordType());
      //  // Unstable assertion: assertEquals(false, functionType1.isReturnTypeInferred());
      //  // Unstable assertion: assertEquals(false, functionType1.isEnumType());
      //  // Unstable assertion: assertEquals(BooleanLiteralSet.TRUE, functionType1.getPossibleToBooleanOutcomes());
      //  // Unstable assertion: assertEquals(false, functionType1.isStringValueType());
      //  // Unstable assertion: assertEquals(false, functionType1.isTemplateType());
      //  // Unstable assertion: assertEquals(false, functionType1.isConstructor());
      //  // Unstable assertion: assertEquals(false, functionType1.isNumberValueType());
      //  // Unstable assertion: assertEquals(false, functionType1.isInterface());
      //  // Unstable assertion: assertEquals(false, functionType1.isNullType());
      //  // Unstable assertion: assertEquals(false, functionType1.isAllType());
      //  // Unstable assertion: assertEquals(false, functionType1.isVoidType());
      //  // Unstable assertion: assertEquals(false, functionType1.isResolved());
      //  // Unstable assertion: assertEquals(false, functionType1.isNoResolvedType());
      //  // Unstable assertion: assertEquals(true, functionType1.hasCachedValues());
      //  // Unstable assertion: assertEquals(2147483647, functionType1.getMaxArguments());
      //  // Unstable assertion: assertEquals(false, functionType1.isBooleanValueType());
      //  // Unstable assertion: assertEquals(false, functionType0.isNoType());
      //  // Unstable assertion: assertEquals(false, functionType0.isInterface());
      //  // Unstable assertion: assertEquals(true, functionType0.canBeCalled());
      //  // Unstable assertion: assertEquals(0, functionType0.getExtendedInterfacesCount());
      //  // Unstable assertion: assertEquals(true, functionType0.hasCachedValues());
      //  // Unstable assertion: assertEquals(false, functionType0.isReturnTypeInferred());
      //  // Unstable assertion: assertEquals(false, functionType0.isNominalType());
      //  // Unstable assertion: assertEquals(false, functionType0.isVoidType());
      //  // Unstable assertion: assertEquals(2147483647, functionType0.getMaxArguments());
      //  // Unstable assertion: assertEquals(false, functionType0.isNumberValueType());
      //  // Unstable assertion: assertEquals(true, functionType0.hasInstanceType());
      //  // Unstable assertion: assertEquals(false, functionType0.isAllType());
      //  // Unstable assertion: assertEquals(false, functionType0.isBooleanValueType());
      //  // Unstable assertion: assertEquals(false, functionType0.isRecordType());
      //  // Unstable assertion: assertEquals(false, functionType0.isNoResolvedType());
      //  // Unstable assertion: assertEquals(false, functionType0.isUnionType());
      //  // Unstable assertion: assertEquals(false, functionType0.isParameterizedType());
      //  // Unstable assertion: assertEquals(false, functionType0.isNullType());
      //  // Unstable assertion: assertEquals(false, functionType0.isNominalConstructor());
      //  // Unstable assertion: assertEquals(false, functionType0.isOrdinaryFunction());
      //  // Unstable assertion: assertEquals(false, functionType0.isStringValueType());
      //  // Unstable assertion: assertEquals(false, functionType0.isEnumElementType());
      //  // Unstable assertion: assertEquals(false, functionType0.isCheckedUnknownType());
      //  // Unstable assertion: assertEquals(true, functionType0.isFunctionType());
      //  // Unstable assertion: assertEquals(false, functionType0.isFunctionPrototypeType());
      //  // Unstable assertion: assertEquals(true, functionType0.isConstructor());
      //  // Unstable assertion: assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      //  // Unstable assertion: assertEquals(false, functionType0.isResolved());
      //  // Unstable assertion: assertEquals(false, functionType0.isEnumType());
      //  // Unstable assertion: assertEquals(false, functionType0.isTemplateType());
      //  // Unstable assertion: assertEquals(false, functionType0.isNoObjectType());
      //  // Unstable assertion: assertEquals(false, noResolvedType0.isFunctionPrototypeType());
      //  // Unstable assertion: assertEquals(true, noResolvedType0.isNullable());
      //  // Unstable assertion: assertEquals(2147483647, noResolvedType0.getPropertiesCount());
      //  // Unstable assertion: assertEquals(false, noResolvedType0.isBooleanValueType());
      //  // Unstable assertion: assertEquals(false, noResolvedType0.isStringValueType());
      //  // Unstable assertion: assertEquals(true, noResolvedType0.hasCachedValues());
      //  // Unstable assertion: assertEquals(true, noResolvedType0.matchesNumberContext());
      //  // Unstable assertion: assertEquals(false, noResolvedType0.isNominalConstructor());
      //  // Unstable assertion: assertEquals(false, noResolvedType0.isNullType());
      //  // Unstable assertion: assertEquals(false, noResolvedType0.isFunctionType());
      //  // Unstable assertion: assertEquals(false, noResolvedType0.isAllType());
      //  // Unstable assertion: assertEquals(false, noResolvedType0.isEnumType());
      //  // Unstable assertion: assertEquals(false, noResolvedType0.isUnionType());
      //  // Unstable assertion: assertEquals(true, noResolvedType0.hasInstanceType());
      //  // Unstable assertion: assertEquals(false, noResolvedType0.isNoObjectType());
      //  // Unstable assertion: assertEquals(false, noResolvedType0.isTemplateType());
      //  // Unstable assertion: assertEquals(false, noResolvedType0.isInterface());
      //  // Unstable assertion: assertEquals(2147483647, noResolvedType0.getMaxArguments());
      //  // Unstable assertion: assertEquals(false, noResolvedType0.isParameterizedType());
      //  // Unstable assertion: assertNull(noResolvedType0.getReferenceName());
      //  // Unstable assertion: assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      //  // Unstable assertion: assertEquals(false, noResolvedType0.isVoidType());
      //  // Unstable assertion: assertEquals(true, noResolvedType0.matchesObjectContext());
      //  // Unstable assertion: assertEquals(true, noResolvedType0.matchesStringContext());
      //  // Unstable assertion: assertEquals(false, noResolvedType0.isOrdinaryFunction());
      //  // Unstable assertion: assertEquals(false, noResolvedType0.isReturnTypeInferred());
      //  // Unstable assertion: assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      //  // Unstable assertion: assertEquals(false, noResolvedType0.isRecordType());
      //  // Unstable assertion: assertEquals(false, noResolvedType0.isCheckedUnknownType());
      //  // Unstable assertion: assertEquals(true, noResolvedType0.isConstructor());
      //  // Unstable assertion: assertEquals(true, noResolvedType0.canBeCalled());
      //  // Unstable assertion: assertEquals(false, noResolvedType0.isNominalType());
      //  // Unstable assertion: assertEquals(false, noResolvedType0.isNumberValueType());
      //  // Unstable assertion: assertEquals(false, noResolvedType0.isResolved());
      //  // Unstable assertion: assertEquals(false, noResolvedType0.isEnumElementType());
      //  // Unstable assertion: assertNotNull(functionType1);
      //  // Unstable assertion: assertFalse(functionType1.equals((Object)functionType0));
      //  // Unstable assertion: assertFalse(functionType0.equals((Object)functionType1));
      
      boolean boolean1 = functionType0.canAssignTo((JSType) functionType1);
      //  // Unstable assertion: assertNotSame(functionType1, functionType0);
      //  // Unstable assertion: assertNotSame(functionType0, functionType1);
      //  // Unstable assertion: assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      //  // Unstable assertion: assertEquals(true, functionType1.canBeCalled());
      //  // Unstable assertion: assertEquals(false, functionType1.isCheckedUnknownType());
      //  // Unstable assertion: assertEquals(false, functionType1.isParameterizedType());
      //  // Unstable assertion: assertEquals(false, functionType1.hasInstanceType());
      //  // Unstable assertion: assertEquals(false, functionType1.isNominalConstructor());
      //  // Unstable assertion: assertEquals(true, functionType1.isOrdinaryFunction());
      //  // Unstable assertion: assertEquals(false, functionType1.isNominalType());
      //  // Unstable assertion: assertEquals(false, functionType1.isUnionType());
      //  // Unstable assertion: assertEquals(false, functionType1.isEnumElementType());
      //  // Unstable assertion: assertEquals(true, functionType1.isFunctionType());
      //  // Unstable assertion: assertEquals(false, functionType1.isNoObjectType());
      //  // Unstable assertion: assertEquals(false, functionType1.isNoType());
      //  // Unstable assertion: assertEquals(0, functionType1.getExtendedInterfacesCount());
      //  // Unstable assertion: assertEquals(false, functionType1.isFunctionPrototypeType());
      //  // Unstable assertion: assertEquals(false, functionType1.isRecordType());
      //  // Unstable assertion: assertEquals(false, functionType1.isReturnTypeInferred());
      //  // Unstable assertion: assertEquals(false, functionType1.isEnumType());
      //  // Unstable assertion: assertEquals(BooleanLiteralSet.TRUE, functionType1.getPossibleToBooleanOutcomes());
      //  // Unstable assertion: assertEquals(false, functionType1.isStringValueType());
      //  // Unstable assertion: assertEquals(false, functionType1.isTemplateType());
      //  // Unstable assertion: assertEquals(false, functionType1.isConstructor());
      //  // Unstable assertion: assertEquals(false, functionType1.isNumberValueType());
      //  // Unstable assertion: assertEquals(false, functionType1.isInterface());
      //  // Unstable assertion: assertEquals(false, functionType1.isNullType());
      //  // Unstable assertion: assertEquals(false, functionType1.isAllType());
      //  // Unstable assertion: assertEquals(false, functionType1.isVoidType());
      //  // Unstable assertion: assertEquals(false, functionType1.isResolved());
      //  // Unstable assertion: assertEquals(false, functionType1.isNoResolvedType());
      //  // Unstable assertion: assertEquals(true, functionType1.hasCachedValues());
      //  // Unstable assertion: assertEquals(2147483647, functionType1.getMaxArguments());
      //  // Unstable assertion: assertEquals(false, functionType1.isBooleanValueType());
      //  // Unstable assertion: assertEquals(false, functionType0.isNoType());
      //  // Unstable assertion: assertEquals(false, functionType0.isInterface());
      //  // Unstable assertion: assertEquals(true, functionType0.canBeCalled());
      //  // Unstable assertion: assertEquals(0, functionType0.getExtendedInterfacesCount());
      //  // Unstable assertion: assertEquals(true, functionType0.hasCachedValues());
      //  // Unstable assertion: assertEquals(false, functionType0.isReturnTypeInferred());
      //  // Unstable assertion: assertEquals(false, functionType0.isNominalType());
      //  // Unstable assertion: assertEquals(false, functionType0.isVoidType());
      //  // Unstable assertion: assertEquals(2147483647, functionType0.getMaxArguments());
      //  // Unstable assertion: assertEquals(false, functionType0.isNumberValueType());
      //  // Unstable assertion: assertEquals(true, functionType0.hasInstanceType());
      //  // Unstable assertion: assertEquals(false, functionType0.isAllType());
      //  // Unstable assertion: assertEquals(false, functionType0.isBooleanValueType());
      //  // Unstable assertion: assertEquals(false, functionType0.isRecordType());
      //  // Unstable assertion: assertEquals(false, functionType0.isNoResolvedType());
      //  // Unstable assertion: assertEquals(false, functionType0.isUnionType());
      //  // Unstable assertion: assertEquals(false, functionType0.isParameterizedType());
      //  // Unstable assertion: assertEquals(false, functionType0.isNullType());
      //  // Unstable assertion: assertEquals(false, functionType0.isNominalConstructor());
      //  // Unstable assertion: assertEquals(false, functionType0.isOrdinaryFunction());
      //  // Unstable assertion: assertEquals(false, functionType0.isStringValueType());
      //  // Unstable assertion: assertEquals(false, functionType0.isEnumElementType());
      //  // Unstable assertion: assertEquals(false, functionType0.isCheckedUnknownType());
      //  // Unstable assertion: assertEquals(true, functionType0.isFunctionType());
      //  // Unstable assertion: assertEquals(false, functionType0.isFunctionPrototypeType());
      //  // Unstable assertion: assertEquals(true, functionType0.isConstructor());
      //  // Unstable assertion: assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      //  // Unstable assertion: assertEquals(false, functionType0.isResolved());
      //  // Unstable assertion: assertEquals(false, functionType0.isEnumType());
      //  // Unstable assertion: assertEquals(false, functionType0.isTemplateType());
      //  // Unstable assertion: assertEquals(false, functionType0.isNoObjectType());
      //  // Unstable assertion: assertEquals(false, noResolvedType0.isFunctionPrototypeType());
      //  // Unstable assertion: assertEquals(true, noResolvedType0.isNullable());
      //  // Unstable assertion: assertEquals(2147483647, noResolvedType0.getPropertiesCount());
      //  // Unstable assertion: assertEquals(false, noResolvedType0.isBooleanValueType());
      //  // Unstable assertion: assertEquals(false, noResolvedType0.isStringValueType());
      //  // Unstable assertion: assertEquals(true, noResolvedType0.hasCachedValues());
      //  // Unstable assertion: assertEquals(true, noResolvedType0.matchesNumberContext());
      //  // Unstable assertion: assertEquals(false, noResolvedType0.isNominalConstructor());
      //  // Unstable assertion: assertEquals(false, noResolvedType0.isNullType());
      //  // Unstable assertion: assertEquals(false, noResolvedType0.isFunctionType());
      //  // Unstable assertion: assertEquals(false, noResolvedType0.isAllType());
      //  // Unstable assertion: assertEquals(false, noResolvedType0.isEnumType());
      //  // Unstable assertion: assertEquals(false, noResolvedType0.isUnionType());
      //  // Unstable assertion: assertEquals(true, noResolvedType0.hasInstanceType());
      //  // Unstable assertion: assertEquals(false, noResolvedType0.isNoObjectType());
      //  // Unstable assertion: assertEquals(false, noResolvedType0.isTemplateType());
      //  // Unstable assertion: assertEquals(false, noResolvedType0.isInterface());
      //  // Unstable assertion: assertEquals(2147483647, noResolvedType0.getMaxArguments());
      //  // Unstable assertion: assertEquals(false, noResolvedType0.isParameterizedType());
      //  // Unstable assertion: assertNull(noResolvedType0.getReferenceName());
      //  // Unstable assertion: assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      //  // Unstable assertion: assertEquals(false, noResolvedType0.isVoidType());
      //  // Unstable assertion: assertEquals(true, noResolvedType0.matchesObjectContext());
      //  // Unstable assertion: assertEquals(true, noResolvedType0.matchesStringContext());
      //  // Unstable assertion: assertEquals(false, noResolvedType0.isOrdinaryFunction());
      //  // Unstable assertion: assertEquals(false, noResolvedType0.isReturnTypeInferred());
      //  // Unstable assertion: assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      //  // Unstable assertion: assertEquals(false, noResolvedType0.isRecordType());
      //  // Unstable assertion: assertEquals(false, noResolvedType0.isCheckedUnknownType());
      //  // Unstable assertion: assertEquals(true, noResolvedType0.isConstructor());
      //  // Unstable assertion: assertEquals(true, noResolvedType0.canBeCalled());
      //  // Unstable assertion: assertEquals(false, noResolvedType0.isNominalType());
      //  // Unstable assertion: assertEquals(false, noResolvedType0.isNumberValueType());
      //  // Unstable assertion: assertEquals(false, noResolvedType0.isResolved());
      //  // Unstable assertion: assertEquals(false, noResolvedType0.isEnumElementType());
      //  // Unstable assertion: assertTrue(boolean1);
      //  // Unstable assertion: assertFalse(boolean0 == boolean1);
      //  // Unstable assertion: assertFalse(boolean1 == boolean0);
      //  // Unstable assertion: assertFalse(functionType1.equals((Object)functionType0));
      //  // Unstable assertion: assertFalse(functionType0.equals((Object)functionType1));
  }

  @Test
  public void test16()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      //  // Unstable assertion: assertNotNull(simpleErrorReporter0);
      
      String string0 = "";
      boolean boolean0 = false;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0, boolean0);
      //  // Unstable assertion: assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      //  // Unstable assertion: assertNotNull(jSTypeRegistry0);
      
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, string0);
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isVoidType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isEnumType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isNullType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isRecordType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isNoResolvedType());
      //  // Unstable assertion: assertEquals(true, errorFunctionType0.isNominalConstructor());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isNoType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isNominalType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isStringValueType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isResolved());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isCheckedUnknownType());
      //  // Unstable assertion: assertEquals(true, errorFunctionType0.hasInstanceType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isBooleanValueType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.hasCachedValues());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isAllType());
      //  // Unstable assertion: assertEquals(3, errorFunctionType0.getMaxArguments());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isTemplateType());
      //  // Unstable assertion: assertEquals(true, errorFunctionType0.isConstructor());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isParameterizedType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isInterface());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isReturnTypeInferred());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isEnumElementType());
      //  // Unstable assertion: assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      //  // Unstable assertion: assertEquals(true, errorFunctionType0.canBeCalled());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isNumberValueType());
      //  // Unstable assertion: assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isNoObjectType());
      //  // Unstable assertion: assertEquals(true, errorFunctionType0.isFunctionType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isUnionType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isFunctionPrototypeType());
      //  // Unstable assertion: assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      //  // Unstable assertion: assertNotNull(errorFunctionType0);
      
      ArrowType arrowType0 = errorFunctionType0.getInternalArrowType();
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isVoidType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isEnumType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isNullType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isRecordType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isNoResolvedType());
      //  // Unstable assertion: assertEquals(true, errorFunctionType0.isNominalConstructor());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isNoType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isNominalType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isStringValueType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isResolved());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isCheckedUnknownType());
      //  // Unstable assertion: assertEquals(true, errorFunctionType0.hasInstanceType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isBooleanValueType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.hasCachedValues());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isAllType());
      //  // Unstable assertion: assertEquals(3, errorFunctionType0.getMaxArguments());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isTemplateType());
      //  // Unstable assertion: assertEquals(true, errorFunctionType0.isConstructor());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isParameterizedType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isInterface());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isReturnTypeInferred());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isEnumElementType());
      //  // Unstable assertion: assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      //  // Unstable assertion: assertEquals(true, errorFunctionType0.canBeCalled());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isNumberValueType());
      //  // Unstable assertion: assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isNoObjectType());
      //  // Unstable assertion: assertEquals(true, errorFunctionType0.isFunctionType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isUnionType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isFunctionPrototypeType());
      //  // Unstable assertion: assertEquals(false, arrowType0.isEnumType());
      //  // Unstable assertion: assertEquals(false, arrowType0.isStringValueType());
      //  // Unstable assertion: assertEquals(false, arrowType0.isNoResolvedType());
      //  // Unstable assertion: assertEquals(false, arrowType0.isNoObjectType());
      //  // Unstable assertion: assertEquals(false, arrowType0.isNumberValueType());
      //  // Unstable assertion: assertEquals(false, arrowType0.isParameterizedType());
      //  // Unstable assertion: assertEquals(false, arrowType0.isAllType());
      //  // Unstable assertion: assertEquals(false, arrowType0.isFunctionType());
      //  // Unstable assertion: assertEquals(false, arrowType0.isInterface());
      //  // Unstable assertion: assertEquals(false, arrowType0.isTemplateType());
      //  // Unstable assertion: assertEquals(false, arrowType0.isVoidType());
      //  // Unstable assertion: assertEquals(false, arrowType0.isNullType());
      //  // Unstable assertion: assertEquals(false, arrowType0.isOrdinaryFunction());
      //  // Unstable assertion: assertEquals(false, arrowType0.isResolved());
      //  // Unstable assertion: assertEquals(false, arrowType0.isCheckedUnknownType());
      //  // Unstable assertion: assertEquals(false, arrowType0.isBooleanValueType());
      //  // Unstable assertion: assertEquals(false, arrowType0.isUnionType());
      //  // Unstable assertion: assertEquals(false, arrowType0.isNoType());
      //  // Unstable assertion: assertEquals(false, arrowType0.isConstructor());
      //  // Unstable assertion: assertEquals(false, arrowType0.isNominalType());
      //  // Unstable assertion: assertEquals(false, arrowType0.isFunctionPrototypeType());
      //  // Unstable assertion: assertEquals(false, arrowType0.isNominalConstructor());
      //  // Unstable assertion: assertEquals(false, arrowType0.isEnumElementType());
      //  // Unstable assertion: assertEquals(false, arrowType0.isRecordType());
      //  // Unstable assertion: assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      //  // Unstable assertion: assertNotNull(arrowType0);
      
      JSType[] jSTypeArray0 = new JSType[10];
      jSTypeArray0[1] = (JSType) arrowType0;
      //  // Unstable assertion: assertEquals(false, jSTypeArray0[1].isNoType());
      //  // Unstable assertion: assertEquals(false, jSTypeArray0[1].isParameterizedType());
      //  // Unstable assertion: assertEquals(false, jSTypeArray0[1].isCheckedUnknownType());
      //  // Unstable assertion: assertEquals(false, jSTypeArray0[1].isFunctionPrototypeType());
      //  // Unstable assertion: assertEquals(false, jSTypeArray0[1].isNominalConstructor());
      //  // Unstable assertion: assertEquals(false, jSTypeArray0[1].isAllType());
      //  // Unstable assertion: assertEquals(false, jSTypeArray0[1].isNoObjectType());
      //  // Unstable assertion: assertEquals(false, jSTypeArray0[1].isFunctionType());
      //  // Unstable assertion: assertEquals(false, jSTypeArray0[1].isEnumElementType());
      //  // Unstable assertion: assertEquals(false, jSTypeArray0[1].isEnumType());
      //  // Unstable assertion: assertEquals(false, jSTypeArray0[1].isResolved());
      //  // Unstable assertion: assertEquals(false, jSTypeArray0[1].isVoidType());
      //  // Unstable assertion: assertEquals(false, jSTypeArray0[1].isNumberValueType());
      //  // Unstable assertion: assertEquals(false, jSTypeArray0[1].isUnionType());
      //  // Unstable assertion: assertEquals(false, jSTypeArray0[1].isConstructor());
      //  // Unstable assertion: assertEquals(false, jSTypeArray0[1].isOrdinaryFunction());
      //  // Unstable assertion: assertEquals(false, jSTypeArray0[1].isTemplateType());
      //  // Unstable assertion: assertEquals(false, jSTypeArray0[1].isBooleanValueType());
      //  // Unstable assertion: assertEquals(false, jSTypeArray0[1].isInterface());
      //  // Unstable assertion: assertEquals(false, jSTypeArray0[1].isNullType());
      //  // Unstable assertion: assertEquals(false, jSTypeArray0[1].isStringValueType());
      //  // Unstable assertion: assertEquals(false, jSTypeArray0[1].isNoResolvedType());
      //  // Unstable assertion: assertEquals(false, jSTypeArray0[1].isNominalType());
      //  // Unstable assertion: assertEquals(false, jSTypeArray0[1].isRecordType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isVoidType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isEnumType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isNullType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isRecordType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isNoResolvedType());
      //  // Unstable assertion: assertEquals(true, errorFunctionType0.isNominalConstructor());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isNoType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isNominalType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isStringValueType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isResolved());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isCheckedUnknownType());
      //  // Unstable assertion: assertEquals(true, errorFunctionType0.hasInstanceType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isBooleanValueType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.hasCachedValues());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isAllType());
      //  // Unstable assertion: assertEquals(3, errorFunctionType0.getMaxArguments());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isTemplateType());
      //  // Unstable assertion: assertEquals(true, errorFunctionType0.isConstructor());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isParameterizedType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isInterface());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isReturnTypeInferred());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isEnumElementType());
      //  // Unstable assertion: assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      //  // Unstable assertion: assertEquals(true, errorFunctionType0.canBeCalled());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isNumberValueType());
      //  // Unstable assertion: assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isNoObjectType());
      //  // Unstable assertion: assertEquals(true, errorFunctionType0.isFunctionType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isUnionType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isFunctionPrototypeType());
      //  // Unstable assertion: assertEquals(false, arrowType0.isEnumType());
      //  // Unstable assertion: assertEquals(false, arrowType0.isStringValueType());
      //  // Unstable assertion: assertEquals(false, arrowType0.isNoResolvedType());
      //  // Unstable assertion: assertEquals(false, arrowType0.isNoObjectType());
      //  // Unstable assertion: assertEquals(false, arrowType0.isNumberValueType());
      //  // Unstable assertion: assertEquals(false, arrowType0.isParameterizedType());
      //  // Unstable assertion: assertEquals(false, arrowType0.isAllType());
      //  // Unstable assertion: assertEquals(false, arrowType0.isFunctionType());
      //  // Unstable assertion: assertEquals(false, arrowType0.isInterface());
      //  // Unstable assertion: assertEquals(false, arrowType0.isTemplateType());
      //  // Unstable assertion: assertEquals(false, arrowType0.isVoidType());
      //  // Unstable assertion: assertEquals(false, arrowType0.isNullType());
      //  // Unstable assertion: assertEquals(false, arrowType0.isOrdinaryFunction());
      //  // Unstable assertion: assertEquals(false, arrowType0.isResolved());
      //  // Unstable assertion: assertEquals(false, arrowType0.isCheckedUnknownType());
      //  // Unstable assertion: assertEquals(false, arrowType0.isBooleanValueType());
      //  // Unstable assertion: assertEquals(false, arrowType0.isUnionType());
      //  // Unstable assertion: assertEquals(false, arrowType0.isNoType());
      //  // Unstable assertion: assertEquals(false, arrowType0.isConstructor());
      //  // Unstable assertion: assertEquals(false, arrowType0.isNominalType());
      //  // Unstable assertion: assertEquals(false, arrowType0.isFunctionPrototypeType());
      //  // Unstable assertion: assertEquals(false, arrowType0.isNominalConstructor());
      //  // Unstable assertion: assertEquals(false, arrowType0.isEnumElementType());
      //  // Unstable assertion: assertEquals(false, arrowType0.isRecordType());
      //  // Unstable assertion: assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      //  // Unstable assertion: assertNotNull(jSTypeArray0[1]);
      
      jSTypeArray0[3] = (JSType) errorFunctionType0;
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isVoidType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isEnumType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isNullType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isRecordType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isNoResolvedType());
      //  // Unstable assertion: assertEquals(true, errorFunctionType0.isNominalConstructor());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isNoType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isNominalType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isStringValueType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isResolved());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isCheckedUnknownType());
      //  // Unstable assertion: assertEquals(true, errorFunctionType0.hasInstanceType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isBooleanValueType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.hasCachedValues());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isAllType());
      //  // Unstable assertion: assertEquals(3, errorFunctionType0.getMaxArguments());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isTemplateType());
      //  // Unstable assertion: assertEquals(true, errorFunctionType0.isConstructor());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isParameterizedType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isInterface());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isReturnTypeInferred());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isEnumElementType());
      //  // Unstable assertion: assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      //  // Unstable assertion: assertEquals(true, errorFunctionType0.canBeCalled());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isNumberValueType());
      //  // Unstable assertion: assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isNoObjectType());
      //  // Unstable assertion: assertEquals(true, errorFunctionType0.isFunctionType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isUnionType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isFunctionPrototypeType());
      //  // Unstable assertion: assertEquals(false, jSTypeArray0[3].isBooleanValueType());
      //  // Unstable assertion: assertEquals(false, jSTypeArray0[3].isCheckedUnknownType());
      //  // Unstable assertion: assertEquals(false, jSTypeArray0[3].isNoType());
      //  // Unstable assertion: assertEquals(true, jSTypeArray0[3].isNominalConstructor());
      //  // Unstable assertion: assertEquals(false, jSTypeArray0[3].isInterface());
      //  // Unstable assertion: assertEquals(false, jSTypeArray0[3].isResolved());
      //  // Unstable assertion: assertEquals(false, jSTypeArray0[3].isVoidType());
      //  // Unstable assertion: assertEquals(false, jSTypeArray0[3].isParameterizedType());
      //  // Unstable assertion: assertEquals(false, jSTypeArray0[3].isTemplateType());
      //  // Unstable assertion: assertEquals(false, jSTypeArray0[3].isNullType());
      //  // Unstable assertion: assertEquals(true, jSTypeArray0[3].isFunctionType());
      //  // Unstable assertion: assertEquals(false, jSTypeArray0[3].isEnumElementType());
      //  // Unstable assertion: assertEquals(true, jSTypeArray0[3].isConstructor());
      //  // Unstable assertion: assertEquals(false, jSTypeArray0[3].isOrdinaryFunction());
      //  // Unstable assertion: assertEquals(false, jSTypeArray0[3].isNoResolvedType());
      //  // Unstable assertion: assertEquals(false, jSTypeArray0[3].isStringValueType());
      //  // Unstable assertion: assertEquals(false, jSTypeArray0[3].isRecordType());
      //  // Unstable assertion: assertEquals(false, jSTypeArray0[3].isFunctionPrototypeType());
      //  // Unstable assertion: assertEquals(false, jSTypeArray0[3].isNoObjectType());
      //  // Unstable assertion: assertEquals(false, jSTypeArray0[3].isNumberValueType());
      //  // Unstable assertion: assertEquals(false, jSTypeArray0[3].isNominalType());
      //  // Unstable assertion: assertEquals(false, jSTypeArray0[3].isUnionType());
      //  // Unstable assertion: assertEquals(false, jSTypeArray0[3].isAllType());
      //  // Unstable assertion: assertEquals(false, jSTypeArray0[3].isEnumType());
      //  // Unstable assertion: assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      //  // Unstable assertion: assertNotNull(jSTypeArray0[3]);
      
      jSTypeArray0[0] = (JSType) errorFunctionType0;
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isVoidType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isEnumType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isNullType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isRecordType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isNoResolvedType());
      //  // Unstable assertion: assertEquals(true, errorFunctionType0.isNominalConstructor());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isNoType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isNominalType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isStringValueType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isResolved());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isCheckedUnknownType());
      //  // Unstable assertion: assertEquals(true, errorFunctionType0.hasInstanceType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isBooleanValueType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.hasCachedValues());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isAllType());
      //  // Unstable assertion: assertEquals(3, errorFunctionType0.getMaxArguments());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isTemplateType());
      //  // Unstable assertion: assertEquals(true, errorFunctionType0.isConstructor());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isParameterizedType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isInterface());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isReturnTypeInferred());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isEnumElementType());
      //  // Unstable assertion: assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      //  // Unstable assertion: assertEquals(true, errorFunctionType0.canBeCalled());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isNumberValueType());
      //  // Unstable assertion: assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isNoObjectType());
      //  // Unstable assertion: assertEquals(true, errorFunctionType0.isFunctionType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isUnionType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isFunctionPrototypeType());
      //  // Unstable assertion: assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      //  // Unstable assertion: assertEquals(true, jSTypeArray0[0].isNominalConstructor());
      //  // Unstable assertion: assertEquals(false, jSTypeArray0[0].isResolved());
      //  // Unstable assertion: assertEquals(false, jSTypeArray0[0].isNoType());
      //  // Unstable assertion: assertEquals(false, jSTypeArray0[0].isNullType());
      //  // Unstable assertion: assertEquals(false, jSTypeArray0[0].isStringValueType());
      //  // Unstable assertion: assertEquals(true, jSTypeArray0[0].isFunctionType());
      //  // Unstable assertion: assertEquals(false, jSTypeArray0[0].isNominalType());
      //  // Unstable assertion: assertEquals(false, jSTypeArray0[0].isEnumType());
      //  // Unstable assertion: assertEquals(false, jSTypeArray0[0].isNumberValueType());
      //  // Unstable assertion: assertEquals(false, jSTypeArray0[0].isBooleanValueType());
      //  // Unstable assertion: assertEquals(false, jSTypeArray0[0].isInterface());
      //  // Unstable assertion: assertEquals(false, jSTypeArray0[0].isNoResolvedType());
      //  // Unstable assertion: assertEquals(true, jSTypeArray0[0].isConstructor());
      //  // Unstable assertion: assertEquals(false, jSTypeArray0[0].isFunctionPrototypeType());
      //  // Unstable assertion: assertEquals(false, jSTypeArray0[0].isCheckedUnknownType());
      //  // Unstable assertion: assertEquals(false, jSTypeArray0[0].isNoObjectType());
      //  // Unstable assertion: assertEquals(false, jSTypeArray0[0].isParameterizedType());
      //  // Unstable assertion: assertEquals(false, jSTypeArray0[0].isVoidType());
      //  // Unstable assertion: assertEquals(false, jSTypeArray0[0].isOrdinaryFunction());
      //  // Unstable assertion: assertEquals(false, jSTypeArray0[0].isTemplateType());
      //  // Unstable assertion: assertEquals(false, jSTypeArray0[0].isRecordType());
      //  // Unstable assertion: assertEquals(false, jSTypeArray0[0].isEnumElementType());
      //  // Unstable assertion: assertEquals(false, jSTypeArray0[0].isUnionType());
      //  // Unstable assertion: assertEquals(false, jSTypeArray0[0].isAllType());
      //  // Unstable assertion: assertNotNull(jSTypeArray0[0]);
      
      jSTypeArray0[2] = (JSType) errorFunctionType0;
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isVoidType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isEnumType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isNullType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isRecordType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isNoResolvedType());
      //  // Unstable assertion: assertEquals(true, errorFunctionType0.isNominalConstructor());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isNoType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isNominalType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isStringValueType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isResolved());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isCheckedUnknownType());
      //  // Unstable assertion: assertEquals(true, errorFunctionType0.hasInstanceType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isBooleanValueType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.hasCachedValues());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isAllType());
      //  // Unstable assertion: assertEquals(3, errorFunctionType0.getMaxArguments());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isTemplateType());
      //  // Unstable assertion: assertEquals(true, errorFunctionType0.isConstructor());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isParameterizedType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isInterface());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isReturnTypeInferred());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isEnumElementType());
      //  // Unstable assertion: assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      //  // Unstable assertion: assertEquals(true, errorFunctionType0.canBeCalled());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isNumberValueType());
      //  // Unstable assertion: assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isNoObjectType());
      //  // Unstable assertion: assertEquals(true, errorFunctionType0.isFunctionType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isUnionType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isFunctionPrototypeType());
      //  // Unstable assertion: assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      //  // Unstable assertion: assertEquals(false, jSTypeArray0[2].isParameterizedType());
      //  // Unstable assertion: assertEquals(false, jSTypeArray0[2].isVoidType());
      //  // Unstable assertion: assertEquals(false, jSTypeArray0[2].isOrdinaryFunction());
      //  // Unstable assertion: assertEquals(false, jSTypeArray0[2].isNominalType());
      //  // Unstable assertion: assertEquals(true, jSTypeArray0[2].isFunctionType());
      //  // Unstable assertion: assertEquals(false, jSTypeArray0[2].isRecordType());
      //  // Unstable assertion: assertEquals(false, jSTypeArray0[2].isBooleanValueType());
      //  // Unstable assertion: assertEquals(false, jSTypeArray0[2].isNumberValueType());
      //  // Unstable assertion: assertEquals(false, jSTypeArray0[2].isFunctionPrototypeType());
      //  // Unstable assertion: assertEquals(false, jSTypeArray0[2].isNoResolvedType());
      //  // Unstable assertion: assertEquals(false, jSTypeArray0[2].isInterface());
      //  // Unstable assertion: assertEquals(true, jSTypeArray0[2].isConstructor());
      //  // Unstable assertion: assertEquals(false, jSTypeArray0[2].isUnionType());
      //  // Unstable assertion: assertEquals(false, jSTypeArray0[2].isTemplateType());
      //  // Unstable assertion: assertEquals(true, jSTypeArray0[2].isNominalConstructor());
      //  // Unstable assertion: assertEquals(false, jSTypeArray0[2].isNoType());
      //  // Unstable assertion: assertEquals(false, jSTypeArray0[2].isEnumType());
      //  // Unstable assertion: assertEquals(false, jSTypeArray0[2].isAllType());
      //  // Unstable assertion: assertEquals(false, jSTypeArray0[2].isStringValueType());
      //  // Unstable assertion: assertEquals(false, jSTypeArray0[2].isResolved());
      //  // Unstable assertion: assertEquals(false, jSTypeArray0[2].isCheckedUnknownType());
      //  // Unstable assertion: assertEquals(false, jSTypeArray0[2].isNoObjectType());
      //  // Unstable assertion: assertEquals(false, jSTypeArray0[2].isNullType());
      //  // Unstable assertion: assertEquals(false, jSTypeArray0[2].isEnumElementType());
      //  // Unstable assertion: assertNotNull(jSTypeArray0[2]);
      
      jSTypeArray0[4] = (JSType) arrowType0;
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isVoidType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isEnumType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isNullType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isRecordType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isNoResolvedType());
      //  // Unstable assertion: assertEquals(true, errorFunctionType0.isNominalConstructor());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isNoType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isNominalType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isStringValueType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isResolved());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isCheckedUnknownType());
      //  // Unstable assertion: assertEquals(true, errorFunctionType0.hasInstanceType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isBooleanValueType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.hasCachedValues());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isAllType());
      //  // Unstable assertion: assertEquals(3, errorFunctionType0.getMaxArguments());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isTemplateType());
      //  // Unstable assertion: assertEquals(true, errorFunctionType0.isConstructor());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isParameterizedType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isInterface());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isReturnTypeInferred());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isEnumElementType());
      //  // Unstable assertion: assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      //  // Unstable assertion: assertEquals(true, errorFunctionType0.canBeCalled());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isNumberValueType());
      //  // Unstable assertion: assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isNoObjectType());
      //  // Unstable assertion: assertEquals(true, errorFunctionType0.isFunctionType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isUnionType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isFunctionPrototypeType());
      //  // Unstable assertion: assertEquals(false, jSTypeArray0[4].isConstructor());
      //  // Unstable assertion: assertEquals(false, jSTypeArray0[4].isVoidType());
      //  // Unstable assertion: assertEquals(false, jSTypeArray0[4].isInterface());
      //  // Unstable assertion: assertEquals(false, jSTypeArray0[4].isEnumElementType());
      //  // Unstable assertion: assertEquals(false, jSTypeArray0[4].isCheckedUnknownType());
      //  // Unstable assertion: assertEquals(false, jSTypeArray0[4].isFunctionPrototypeType());
      //  // Unstable assertion: assertEquals(false, jSTypeArray0[4].isNominalConstructor());
      //  // Unstable assertion: assertEquals(false, jSTypeArray0[4].isFunctionType());
      //  // Unstable assertion: assertEquals(false, jSTypeArray0[4].isRecordType());
      //  // Unstable assertion: assertEquals(false, jSTypeArray0[4].isNoResolvedType());
      //  // Unstable assertion: assertEquals(false, jSTypeArray0[4].isNumberValueType());
      //  // Unstable assertion: assertEquals(false, jSTypeArray0[4].isNullType());
      //  // Unstable assertion: assertEquals(false, jSTypeArray0[4].isNoObjectType());
      //  // Unstable assertion: assertEquals(false, jSTypeArray0[4].isStringValueType());
      //  // Unstable assertion: assertEquals(false, jSTypeArray0[4].isResolved());
      //  // Unstable assertion: assertEquals(false, jSTypeArray0[4].isNominalType());
      //  // Unstable assertion: assertEquals(false, jSTypeArray0[4].isOrdinaryFunction());
      //  // Unstable assertion: assertEquals(false, jSTypeArray0[4].isBooleanValueType());
      //  // Unstable assertion: assertEquals(false, jSTypeArray0[4].isUnionType());
      //  // Unstable assertion: assertEquals(false, jSTypeArray0[4].isAllType());
      //  // Unstable assertion: assertEquals(false, jSTypeArray0[4].isParameterizedType());
      //  // Unstable assertion: assertEquals(false, jSTypeArray0[4].isEnumType());
      //  // Unstable assertion: assertEquals(false, jSTypeArray0[4].isTemplateType());
      //  // Unstable assertion: assertEquals(false, jSTypeArray0[4].isNoType());
      //  // Unstable assertion: assertEquals(false, arrowType0.isEnumType());
      //  // Unstable assertion: assertEquals(false, arrowType0.isStringValueType());
      //  // Unstable assertion: assertEquals(false, arrowType0.isNoResolvedType());
      //  // Unstable assertion: assertEquals(false, arrowType0.isNoObjectType());
      //  // Unstable assertion: assertEquals(false, arrowType0.isNumberValueType());
      //  // Unstable assertion: assertEquals(false, arrowType0.isParameterizedType());
      //  // Unstable assertion: assertEquals(false, arrowType0.isAllType());
      //  // Unstable assertion: assertEquals(false, arrowType0.isFunctionType());
      //  // Unstable assertion: assertEquals(false, arrowType0.isInterface());
      //  // Unstable assertion: assertEquals(false, arrowType0.isTemplateType());
      //  // Unstable assertion: assertEquals(false, arrowType0.isVoidType());
      //  // Unstable assertion: assertEquals(false, arrowType0.isNullType());
      //  // Unstable assertion: assertEquals(false, arrowType0.isOrdinaryFunction());
      //  // Unstable assertion: assertEquals(false, arrowType0.isResolved());
      //  // Unstable assertion: assertEquals(false, arrowType0.isCheckedUnknownType());
      //  // Unstable assertion: assertEquals(false, arrowType0.isBooleanValueType());
      //  // Unstable assertion: assertEquals(false, arrowType0.isUnionType());
      //  // Unstable assertion: assertEquals(false, arrowType0.isNoType());
      //  // Unstable assertion: assertEquals(false, arrowType0.isConstructor());
      //  // Unstable assertion: assertEquals(false, arrowType0.isNominalType());
      //  // Unstable assertion: assertEquals(false, arrowType0.isFunctionPrototypeType());
      //  // Unstable assertion: assertEquals(false, arrowType0.isNominalConstructor());
      //  // Unstable assertion: assertEquals(false, arrowType0.isEnumElementType());
      //  // Unstable assertion: assertEquals(false, arrowType0.isRecordType());
      //  // Unstable assertion: assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      //  // Unstable assertion: assertNotNull(jSTypeArray0[4]);
      
      jSTypeArray0[5] = (JSType) arrowType0;
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isVoidType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isEnumType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isNullType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isRecordType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isNoResolvedType());
      //  // Unstable assertion: assertEquals(true, errorFunctionType0.isNominalConstructor());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isNoType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isNominalType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isStringValueType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isResolved());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isCheckedUnknownType());
      //  // Unstable assertion: assertEquals(true, errorFunctionType0.hasInstanceType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isBooleanValueType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.hasCachedValues());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isAllType());
      //  // Unstable assertion: assertEquals(3, errorFunctionType0.getMaxArguments());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isTemplateType());
      //  // Unstable assertion: assertEquals(true, errorFunctionType0.isConstructor());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isParameterizedType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isInterface());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isReturnTypeInferred());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isEnumElementType());
      //  // Unstable assertion: assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      //  // Unstable assertion: assertEquals(true, errorFunctionType0.canBeCalled());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isNumberValueType());
      //  // Unstable assertion: assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isNoObjectType());
      //  // Unstable assertion: assertEquals(true, errorFunctionType0.isFunctionType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isUnionType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isFunctionPrototypeType());
      //  // Unstable assertion: assertEquals(false, jSTypeArray0[5].isNoType());
      //  // Unstable assertion: assertEquals(false, jSTypeArray0[5].isNoResolvedType());
      //  // Unstable assertion: assertEquals(false, jSTypeArray0[5].isNullType());
      //  // Unstable assertion: assertEquals(false, jSTypeArray0[5].isInterface());
      //  // Unstable assertion: assertEquals(false, jSTypeArray0[5].isConstructor());
      //  // Unstable assertion: assertEquals(false, jSTypeArray0[5].isResolved());
      //  // Unstable assertion: assertEquals(false, jSTypeArray0[5].isAllType());
      //  // Unstable assertion: assertEquals(false, jSTypeArray0[5].isEnumType());
      //  // Unstable assertion: assertEquals(false, jSTypeArray0[5].isFunctionPrototypeType());
      //  // Unstable assertion: assertEquals(false, jSTypeArray0[5].isOrdinaryFunction());
      //  // Unstable assertion: assertEquals(false, jSTypeArray0[5].isVoidType());
      //  // Unstable assertion: assertEquals(false, jSTypeArray0[5].isFunctionType());
      //  // Unstable assertion: assertEquals(false, jSTypeArray0[5].isEnumElementType());
      //  // Unstable assertion: assertEquals(false, jSTypeArray0[5].isCheckedUnknownType());
      //  // Unstable assertion: assertEquals(false, jSTypeArray0[5].isBooleanValueType());
      //  // Unstable assertion: assertEquals(false, jSTypeArray0[5].isNumberValueType());
      //  // Unstable assertion: assertEquals(false, jSTypeArray0[5].isNominalConstructor());
      //  // Unstable assertion: assertEquals(false, jSTypeArray0[5].isNoObjectType());
      //  // Unstable assertion: assertEquals(false, jSTypeArray0[5].isRecordType());
      //  // Unstable assertion: assertEquals(false, jSTypeArray0[5].isTemplateType());
      //  // Unstable assertion: assertEquals(false, jSTypeArray0[5].isNominalType());
      //  // Unstable assertion: assertEquals(false, jSTypeArray0[5].isUnionType());
      //  // Unstable assertion: assertEquals(false, jSTypeArray0[5].isStringValueType());
      //  // Unstable assertion: assertEquals(false, jSTypeArray0[5].isParameterizedType());
      //  // Unstable assertion: assertEquals(false, arrowType0.isEnumType());
      //  // Unstable assertion: assertEquals(false, arrowType0.isStringValueType());
      //  // Unstable assertion: assertEquals(false, arrowType0.isNoResolvedType());
      //  // Unstable assertion: assertEquals(false, arrowType0.isNoObjectType());
      //  // Unstable assertion: assertEquals(false, arrowType0.isNumberValueType());
      //  // Unstable assertion: assertEquals(false, arrowType0.isParameterizedType());
      //  // Unstable assertion: assertEquals(false, arrowType0.isAllType());
      //  // Unstable assertion: assertEquals(false, arrowType0.isFunctionType());
      //  // Unstable assertion: assertEquals(false, arrowType0.isInterface());
      //  // Unstable assertion: assertEquals(false, arrowType0.isTemplateType());
      //  // Unstable assertion: assertEquals(false, arrowType0.isVoidType());
      //  // Unstable assertion: assertEquals(false, arrowType0.isNullType());
      //  // Unstable assertion: assertEquals(false, arrowType0.isOrdinaryFunction());
      //  // Unstable assertion: assertEquals(false, arrowType0.isResolved());
      //  // Unstable assertion: assertEquals(false, arrowType0.isCheckedUnknownType());
      //  // Unstable assertion: assertEquals(false, arrowType0.isBooleanValueType());
      //  // Unstable assertion: assertEquals(false, arrowType0.isUnionType());
      //  // Unstable assertion: assertEquals(false, arrowType0.isNoType());
      //  // Unstable assertion: assertEquals(false, arrowType0.isConstructor());
      //  // Unstable assertion: assertEquals(false, arrowType0.isNominalType());
      //  // Unstable assertion: assertEquals(false, arrowType0.isFunctionPrototypeType());
      //  // Unstable assertion: assertEquals(false, arrowType0.isNominalConstructor());
      //  // Unstable assertion: assertEquals(false, arrowType0.isEnumElementType());
      //  // Unstable assertion: assertEquals(false, arrowType0.isRecordType());
      //  // Unstable assertion: assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      //  // Unstable assertion: assertNotNull(jSTypeArray0[5]);
      
      jSTypeArray0[6] = (JSType) errorFunctionType0;
      //  // Unstable assertion: assertEquals(false, jSTypeArray0[6].isEnumElementType());
      //  // Unstable assertion: assertEquals(false, jSTypeArray0[6].isFunctionPrototypeType());
      //  // Unstable assertion: assertEquals(false, jSTypeArray0[6].isNoType());
      //  // Unstable assertion: assertEquals(false, jSTypeArray0[6].isTemplateType());
      //  // Unstable assertion: assertEquals(false, jSTypeArray0[6].isNumberValueType());
      //  // Unstable assertion: assertEquals(false, jSTypeArray0[6].isNullType());
      //  // Unstable assertion: assertEquals(true, jSTypeArray0[6].isConstructor());
      //  // Unstable assertion: assertEquals(false, jSTypeArray0[6].isRecordType());
      //  // Unstable assertion: assertEquals(false, jSTypeArray0[6].isResolved());
      //  // Unstable assertion: assertEquals(false, jSTypeArray0[6].isInterface());
      //  // Unstable assertion: assertEquals(false, jSTypeArray0[6].isAllType());
      //  // Unstable assertion: assertEquals(false, jSTypeArray0[6].isParameterizedType());
      //  // Unstable assertion: assertEquals(false, jSTypeArray0[6].isOrdinaryFunction());
      //  // Unstable assertion: assertEquals(false, jSTypeArray0[6].isUnionType());
      //  // Unstable assertion: assertEquals(false, jSTypeArray0[6].isBooleanValueType());
      //  // Unstable assertion: assertEquals(false, jSTypeArray0[6].isVoidType());
      //  // Unstable assertion: assertEquals(false, jSTypeArray0[6].isNoResolvedType());
      //  // Unstable assertion: assertEquals(true, jSTypeArray0[6].isFunctionType());
      //  // Unstable assertion: assertEquals(true, jSTypeArray0[6].isNominalConstructor());
      //  // Unstable assertion: assertEquals(false, jSTypeArray0[6].isEnumType());
      //  // Unstable assertion: assertEquals(false, jSTypeArray0[6].isCheckedUnknownType());
      //  // Unstable assertion: assertEquals(false, jSTypeArray0[6].isNoObjectType());
      //  // Unstable assertion: assertEquals(false, jSTypeArray0[6].isStringValueType());
      //  // Unstable assertion: assertEquals(false, jSTypeArray0[6].isNominalType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isVoidType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isEnumType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isNullType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isRecordType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isNoResolvedType());
      //  // Unstable assertion: assertEquals(true, errorFunctionType0.isNominalConstructor());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isNoType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isNominalType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isStringValueType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isResolved());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isCheckedUnknownType());
      //  // Unstable assertion: assertEquals(true, errorFunctionType0.hasInstanceType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isBooleanValueType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.hasCachedValues());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isAllType());
      //  // Unstable assertion: assertEquals(3, errorFunctionType0.getMaxArguments());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isTemplateType());
      //  // Unstable assertion: assertEquals(true, errorFunctionType0.isConstructor());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isParameterizedType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isInterface());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isReturnTypeInferred());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isEnumElementType());
      //  // Unstable assertion: assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      //  // Unstable assertion: assertEquals(true, errorFunctionType0.canBeCalled());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isNumberValueType());
      //  // Unstable assertion: assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isNoObjectType());
      //  // Unstable assertion: assertEquals(true, errorFunctionType0.isFunctionType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isUnionType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isFunctionPrototypeType());
      //  // Unstable assertion: assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      //  // Unstable assertion: assertNotNull(jSTypeArray0[6]);
      
      jSTypeArray0[7] = (JSType) arrowType0;
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isVoidType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isEnumType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isNullType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isRecordType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isNoResolvedType());
      //  // Unstable assertion: assertEquals(true, errorFunctionType0.isNominalConstructor());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isNoType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isNominalType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isStringValueType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isResolved());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isCheckedUnknownType());
      //  // Unstable assertion: assertEquals(true, errorFunctionType0.hasInstanceType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isBooleanValueType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.hasCachedValues());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isAllType());
      //  // Unstable assertion: assertEquals(3, errorFunctionType0.getMaxArguments());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isTemplateType());
      //  // Unstable assertion: assertEquals(true, errorFunctionType0.isConstructor());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isParameterizedType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isInterface());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isReturnTypeInferred());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isEnumElementType());
      //  // Unstable assertion: assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      //  // Unstable assertion: assertEquals(true, errorFunctionType0.canBeCalled());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isNumberValueType());
      //  // Unstable assertion: assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isNoObjectType());
      //  // Unstable assertion: assertEquals(true, errorFunctionType0.isFunctionType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isUnionType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isFunctionPrototypeType());
      //  // Unstable assertion: assertEquals(false, arrowType0.isEnumType());
      //  // Unstable assertion: assertEquals(false, arrowType0.isStringValueType());
      //  // Unstable assertion: assertEquals(false, arrowType0.isNoResolvedType());
      //  // Unstable assertion: assertEquals(false, arrowType0.isNoObjectType());
      //  // Unstable assertion: assertEquals(false, arrowType0.isNumberValueType());
      //  // Unstable assertion: assertEquals(false, arrowType0.isParameterizedType());
      //  // Unstable assertion: assertEquals(false, arrowType0.isAllType());
      //  // Unstable assertion: assertEquals(false, arrowType0.isFunctionType());
      //  // Unstable assertion: assertEquals(false, arrowType0.isInterface());
      //  // Unstable assertion: assertEquals(false, arrowType0.isTemplateType());
      //  // Unstable assertion: assertEquals(false, arrowType0.isVoidType());
      //  // Unstable assertion: assertEquals(false, arrowType0.isNullType());
      //  // Unstable assertion: assertEquals(false, arrowType0.isOrdinaryFunction());
      //  // Unstable assertion: assertEquals(false, arrowType0.isResolved());
      //  // Unstable assertion: assertEquals(false, arrowType0.isCheckedUnknownType());
      //  // Unstable assertion: assertEquals(false, arrowType0.isBooleanValueType());
      //  // Unstable assertion: assertEquals(false, arrowType0.isUnionType());
      //  // Unstable assertion: assertEquals(false, arrowType0.isNoType());
      //  // Unstable assertion: assertEquals(false, arrowType0.isConstructor());
      //  // Unstable assertion: assertEquals(false, arrowType0.isNominalType());
      //  // Unstable assertion: assertEquals(false, arrowType0.isFunctionPrototypeType());
      //  // Unstable assertion: assertEquals(false, arrowType0.isNominalConstructor());
      //  // Unstable assertion: assertEquals(false, arrowType0.isEnumElementType());
      //  // Unstable assertion: assertEquals(false, arrowType0.isRecordType());
      //  // Unstable assertion: assertEquals(false, jSTypeArray0[7].isConstructor());
      //  // Unstable assertion: assertEquals(false, jSTypeArray0[7].isNoResolvedType());
      //  // Unstable assertion: assertEquals(false, jSTypeArray0[7].isCheckedUnknownType());
      //  // Unstable assertion: assertEquals(false, jSTypeArray0[7].isInterface());
      //  // Unstable assertion: assertEquals(false, jSTypeArray0[7].isFunctionPrototypeType());
      //  // Unstable assertion: assertEquals(false, jSTypeArray0[7].isNominalType());
      //  // Unstable assertion: assertEquals(false, jSTypeArray0[7].isRecordType());
      //  // Unstable assertion: assertEquals(false, jSTypeArray0[7].isParameterizedType());
      //  // Unstable assertion: assertEquals(false, jSTypeArray0[7].isNoType());
      //  // Unstable assertion: assertEquals(false, jSTypeArray0[7].isEnumElementType());
      //  // Unstable assertion: assertEquals(false, jSTypeArray0[7].isEnumType());
      //  // Unstable assertion: assertEquals(false, jSTypeArray0[7].isAllType());
      //  // Unstable assertion: assertEquals(false, jSTypeArray0[7].isResolved());
      //  // Unstable assertion: assertEquals(false, jSTypeArray0[7].isVoidType());
      //  // Unstable assertion: assertEquals(false, jSTypeArray0[7].isTemplateType());
      //  // Unstable assertion: assertEquals(false, jSTypeArray0[7].isNullType());
      //  // Unstable assertion: assertEquals(false, jSTypeArray0[7].isNoObjectType());
      //  // Unstable assertion: assertEquals(false, jSTypeArray0[7].isOrdinaryFunction());
      //  // Unstable assertion: assertEquals(false, jSTypeArray0[7].isNumberValueType());
      //  // Unstable assertion: assertEquals(false, jSTypeArray0[7].isBooleanValueType());
      //  // Unstable assertion: assertEquals(false, jSTypeArray0[7].isStringValueType());
      //  // Unstable assertion: assertEquals(false, jSTypeArray0[7].isNominalConstructor());
      //  // Unstable assertion: assertEquals(false, jSTypeArray0[7].isFunctionType());
      //  // Unstable assertion: assertEquals(false, jSTypeArray0[7].isUnionType());
      //  // Unstable assertion: assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      //  // Unstable assertion: assertNotNull(jSTypeArray0[7]);
      
      jSTypeArray0[8] = (JSType) arrowType0;
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isVoidType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isEnumType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isNullType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isRecordType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isNoResolvedType());
      //  // Unstable assertion: assertEquals(true, errorFunctionType0.isNominalConstructor());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isNoType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isNominalType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isStringValueType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isResolved());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isCheckedUnknownType());
      //  // Unstable assertion: assertEquals(true, errorFunctionType0.hasInstanceType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isBooleanValueType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.hasCachedValues());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isAllType());
      //  // Unstable assertion: assertEquals(3, errorFunctionType0.getMaxArguments());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isTemplateType());
      //  // Unstable assertion: assertEquals(true, errorFunctionType0.isConstructor());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isParameterizedType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isInterface());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isReturnTypeInferred());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isEnumElementType());
      //  // Unstable assertion: assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      //  // Unstable assertion: assertEquals(true, errorFunctionType0.canBeCalled());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isNumberValueType());
      //  // Unstable assertion: assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isNoObjectType());
      //  // Unstable assertion: assertEquals(true, errorFunctionType0.isFunctionType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isUnionType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isFunctionPrototypeType());
      //  // Unstable assertion: assertEquals(false, arrowType0.isEnumType());
      //  // Unstable assertion: assertEquals(false, arrowType0.isStringValueType());
      //  // Unstable assertion: assertEquals(false, arrowType0.isNoResolvedType());
      //  // Unstable assertion: assertEquals(false, arrowType0.isNoObjectType());
      //  // Unstable assertion: assertEquals(false, arrowType0.isNumberValueType());
      //  // Unstable assertion: assertEquals(false, arrowType0.isParameterizedType());
      //  // Unstable assertion: assertEquals(false, arrowType0.isAllType());
      //  // Unstable assertion: assertEquals(false, arrowType0.isFunctionType());
      //  // Unstable assertion: assertEquals(false, arrowType0.isInterface());
      //  // Unstable assertion: assertEquals(false, arrowType0.isTemplateType());
      //  // Unstable assertion: assertEquals(false, arrowType0.isVoidType());
      //  // Unstable assertion: assertEquals(false, arrowType0.isNullType());
      //  // Unstable assertion: assertEquals(false, arrowType0.isOrdinaryFunction());
      //  // Unstable assertion: assertEquals(false, arrowType0.isResolved());
      //  // Unstable assertion: assertEquals(false, arrowType0.isCheckedUnknownType());
      //  // Unstable assertion: assertEquals(false, arrowType0.isBooleanValueType());
      //  // Unstable assertion: assertEquals(false, arrowType0.isUnionType());
      //  // Unstable assertion: assertEquals(false, arrowType0.isNoType());
      //  // Unstable assertion: assertEquals(false, arrowType0.isConstructor());
      //  // Unstable assertion: assertEquals(false, arrowType0.isNominalType());
      //  // Unstable assertion: assertEquals(false, arrowType0.isFunctionPrototypeType());
      //  // Unstable assertion: assertEquals(false, arrowType0.isNominalConstructor());
      //  // Unstable assertion: assertEquals(false, arrowType0.isEnumElementType());
      //  // Unstable assertion: assertEquals(false, arrowType0.isRecordType());
      //  // Unstable assertion: assertEquals(false, jSTypeArray0[8].isNominalConstructor());
      //  // Unstable assertion: assertEquals(false, jSTypeArray0[8].isFunctionPrototypeType());
      //  // Unstable assertion: assertEquals(false, jSTypeArray0[8].isTemplateType());
      //  // Unstable assertion: assertEquals(false, jSTypeArray0[8].isFunctionType());
      //  // Unstable assertion: assertEquals(false, jSTypeArray0[8].isRecordType());
      //  // Unstable assertion: assertEquals(false, jSTypeArray0[8].isUnionType());
      //  // Unstable assertion: assertEquals(false, jSTypeArray0[8].isNoType());
      //  // Unstable assertion: assertEquals(false, jSTypeArray0[8].isEnumType());
      //  // Unstable assertion: assertEquals(false, jSTypeArray0[8].isParameterizedType());
      //  // Unstable assertion: assertEquals(false, jSTypeArray0[8].isCheckedUnknownType());
      //  // Unstable assertion: assertEquals(false, jSTypeArray0[8].isStringValueType());
      //  // Unstable assertion: assertEquals(false, jSTypeArray0[8].isConstructor());
      //  // Unstable assertion: assertEquals(false, jSTypeArray0[8].isBooleanValueType());
      //  // Unstable assertion: assertEquals(false, jSTypeArray0[8].isNoResolvedType());
      //  // Unstable assertion: assertEquals(false, jSTypeArray0[8].isInterface());
      //  // Unstable assertion: assertEquals(false, jSTypeArray0[8].isNoObjectType());
      //  // Unstable assertion: assertEquals(false, jSTypeArray0[8].isResolved());
      //  // Unstable assertion: assertEquals(false, jSTypeArray0[8].isOrdinaryFunction());
      //  // Unstable assertion: assertEquals(false, jSTypeArray0[8].isNumberValueType());
      //  // Unstable assertion: assertEquals(false, jSTypeArray0[8].isEnumElementType());
      //  // Unstable assertion: assertEquals(false, jSTypeArray0[8].isNominalType());
      //  // Unstable assertion: assertEquals(false, jSTypeArray0[8].isVoidType());
      //  // Unstable assertion: assertEquals(false, jSTypeArray0[8].isNullType());
      //  // Unstable assertion: assertEquals(false, jSTypeArray0[8].isAllType());
      //  // Unstable assertion: assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      //  // Unstable assertion: assertNotNull(jSTypeArray0[8]);
      
      jSTypeArray0[9] = (JSType) errorFunctionType0;
      //  // Unstable assertion: assertEquals(false, jSTypeArray0[9].isStringValueType());
      //  // Unstable assertion: assertEquals(true, jSTypeArray0[9].isFunctionType());
      //  // Unstable assertion: assertEquals(false, jSTypeArray0[9].isNoResolvedType());
      //  // Unstable assertion: assertEquals(false, jSTypeArray0[9].isCheckedUnknownType());
      //  // Unstable assertion: assertEquals(false, jSTypeArray0[9].isUnionType());
      //  // Unstable assertion: assertEquals(false, jSTypeArray0[9].isNoType());
      //  // Unstable assertion: assertEquals(false, jSTypeArray0[9].isParameterizedType());
      //  // Unstable assertion: assertEquals(false, jSTypeArray0[9].isEnumType());
      //  // Unstable assertion: assertEquals(false, jSTypeArray0[9].isEnumElementType());
      //  // Unstable assertion: assertEquals(false, jSTypeArray0[9].isNullType());
      //  // Unstable assertion: assertEquals(false, jSTypeArray0[9].isRecordType());
      //  // Unstable assertion: assertEquals(false, jSTypeArray0[9].isNumberValueType());
      //  // Unstable assertion: assertEquals(true, jSTypeArray0[9].isNominalConstructor());
      //  // Unstable assertion: assertEquals(false, jSTypeArray0[9].isTemplateType());
      //  // Unstable assertion: assertEquals(false, jSTypeArray0[9].isFunctionPrototypeType());
      //  // Unstable assertion: assertEquals(false, jSTypeArray0[9].isNoObjectType());
      //  // Unstable assertion: assertEquals(false, jSTypeArray0[9].isAllType());
      //  // Unstable assertion: assertEquals(true, jSTypeArray0[9].isConstructor());
      //  // Unstable assertion: assertEquals(false, jSTypeArray0[9].isVoidType());
      //  // Unstable assertion: assertEquals(false, jSTypeArray0[9].isBooleanValueType());
      //  // Unstable assertion: assertEquals(false, jSTypeArray0[9].isOrdinaryFunction());
      //  // Unstable assertion: assertEquals(false, jSTypeArray0[9].isNominalType());
      //  // Unstable assertion: assertEquals(false, jSTypeArray0[9].isInterface());
      //  // Unstable assertion: assertEquals(false, jSTypeArray0[9].isResolved());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isVoidType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isEnumType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isNullType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isRecordType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isNoResolvedType());
      //  // Unstable assertion: assertEquals(true, errorFunctionType0.isNominalConstructor());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isNoType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isNominalType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isStringValueType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isResolved());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isCheckedUnknownType());
      //  // Unstable assertion: assertEquals(true, errorFunctionType0.hasInstanceType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isBooleanValueType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.hasCachedValues());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isAllType());
      //  // Unstable assertion: assertEquals(3, errorFunctionType0.getMaxArguments());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isTemplateType());
      //  // Unstable assertion: assertEquals(true, errorFunctionType0.isConstructor());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isParameterizedType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isInterface());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isReturnTypeInferred());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isEnumElementType());
      //  // Unstable assertion: assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      //  // Unstable assertion: assertEquals(true, errorFunctionType0.canBeCalled());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isNumberValueType());
      //  // Unstable assertion: assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isNoObjectType());
      //  // Unstable assertion: assertEquals(true, errorFunctionType0.isFunctionType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isUnionType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isFunctionPrototypeType());
      //  // Unstable assertion: assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      //  // Unstable assertion: assertNotNull(jSTypeArray0[9]);
      
      FunctionType functionType0 = jSTypeRegistry0.createFunctionTypeWithVarArgs((JSType) arrowType0, jSTypeArray0);
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isVoidType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isEnumType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isNullType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isRecordType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isNoResolvedType());
      //  // Unstable assertion: assertEquals(true, errorFunctionType0.isNominalConstructor());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isNoType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isNominalType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isStringValueType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isResolved());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isCheckedUnknownType());
      //  // Unstable assertion: assertEquals(true, errorFunctionType0.hasCachedValues());
      //  // Unstable assertion: assertEquals(true, errorFunctionType0.hasInstanceType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isBooleanValueType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isAllType());
      //  // Unstable assertion: assertEquals(3, errorFunctionType0.getMaxArguments());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isTemplateType());
      //  // Unstable assertion: assertEquals(true, errorFunctionType0.isConstructor());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isParameterizedType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isInterface());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isReturnTypeInferred());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isEnumElementType());
      //  // Unstable assertion: assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      //  // Unstable assertion: assertEquals(true, errorFunctionType0.canBeCalled());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isNumberValueType());
      //  // Unstable assertion: assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isNoObjectType());
      //  // Unstable assertion: assertEquals(true, errorFunctionType0.isFunctionType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isUnionType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isFunctionPrototypeType());
      //  // Unstable assertion: assertEquals(false, arrowType0.isEnumType());
      //  // Unstable assertion: assertEquals(false, arrowType0.isStringValueType());
      //  // Unstable assertion: assertEquals(false, arrowType0.isNoResolvedType());
      //  // Unstable assertion: assertEquals(false, arrowType0.isNoObjectType());
      //  // Unstable assertion: assertEquals(false, arrowType0.isNumberValueType());
      //  // Unstable assertion: assertEquals(false, arrowType0.isParameterizedType());
      //  // Unstable assertion: assertEquals(false, arrowType0.isAllType());
      //  // Unstable assertion: assertEquals(false, arrowType0.isFunctionType());
      //  // Unstable assertion: assertEquals(false, arrowType0.isInterface());
      //  // Unstable assertion: assertEquals(false, arrowType0.isTemplateType());
      //  // Unstable assertion: assertEquals(false, arrowType0.isVoidType());
      //  // Unstable assertion: assertEquals(false, arrowType0.isNullType());
      //  // Unstable assertion: assertEquals(false, arrowType0.isOrdinaryFunction());
      //  // Unstable assertion: assertEquals(false, arrowType0.isResolved());
      //  // Unstable assertion: assertEquals(false, arrowType0.isCheckedUnknownType());
      //  // Unstable assertion: assertEquals(false, arrowType0.isBooleanValueType());
      //  // Unstable assertion: assertEquals(false, arrowType0.isUnionType());
      //  // Unstable assertion: assertEquals(false, arrowType0.isNoType());
      //  // Unstable assertion: assertEquals(false, arrowType0.isConstructor());
      //  // Unstable assertion: assertEquals(false, arrowType0.isNominalType());
      //  // Unstable assertion: assertEquals(false, arrowType0.isFunctionPrototypeType());
      //  // Unstable assertion: assertEquals(false, arrowType0.isNominalConstructor());
      //  // Unstable assertion: assertEquals(false, arrowType0.isEnumElementType());
      //  // Unstable assertion: assertEquals(false, arrowType0.isRecordType());
      //  // Unstable assertion: assertEquals(false, functionType0.isNominalType());
      //  // Unstable assertion: assertEquals(false, functionType0.isEnumType());
      //  // Unstable assertion: assertEquals(true, functionType0.isFunctionType());
      //  // Unstable assertion: assertEquals(true, functionType0.canBeCalled());
      //  // Unstable assertion: assertEquals(false, functionType0.isCheckedUnknownType());
      //  // Unstable assertion: assertEquals(false, functionType0.isVoidType());
      //  // Unstable assertion: assertEquals(false, functionType0.isResolved());
      //  // Unstable assertion: assertEquals(false, functionType0.isBooleanValueType());
      //  // Unstable assertion: assertEquals(false, functionType0.isNoResolvedType());
      //  // Unstable assertion: assertEquals(false, functionType0.isInterface());
      //  // Unstable assertion: assertEquals(false, functionType0.isUnionType());
      //  // Unstable assertion: assertEquals(false, functionType0.isTemplateType());
      //  // Unstable assertion: assertEquals(true, functionType0.isOrdinaryFunction());
      //  // Unstable assertion: assertEquals(false, functionType0.hasCachedValues());
      //  // Unstable assertion: assertEquals(false, functionType0.isNominalConstructor());
      //  // Unstable assertion: assertEquals(false, functionType0.isNumberValueType());
      //  // Unstable assertion: assertEquals(false, functionType0.isRecordType());
      //  // Unstable assertion: assertEquals(false, functionType0.isNullType());
      //  // Unstable assertion: assertEquals(false, functionType0.isStringValueType());
      //  // Unstable assertion: assertEquals(false, functionType0.isAllType());
      //  // Unstable assertion: assertEquals(0, functionType0.getExtendedInterfacesCount());
      //  // Unstable assertion: assertEquals(2147483647, functionType0.getMaxArguments());
      //  // Unstable assertion: assertEquals(false, functionType0.isNoObjectType());
      //  // Unstable assertion: assertEquals(false, functionType0.hasInstanceType());
      //  // Unstable assertion: assertEquals(false, functionType0.isEnumElementType());
      //  // Unstable assertion: assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      //  // Unstable assertion: assertEquals(false, functionType0.isParameterizedType());
      //  // Unstable assertion: assertEquals(false, functionType0.isFunctionPrototypeType());
      //  // Unstable assertion: assertEquals(false, functionType0.isReturnTypeInferred());
      //  // Unstable assertion: assertEquals(false, functionType0.isConstructor());
      //  // Unstable assertion: assertEquals(false, functionType0.isNoType());
      //  // Unstable assertion: assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      //  // Unstable assertion: assertNotNull(functionType0);
      
      String string1 = functionType0.toStringHelper(boolean0);
      //  // Unstable assertion: assertNotSame(string0, string1);
      //  // Unstable assertion: assertNotSame(string1, string0);
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isVoidType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isEnumType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isNullType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isRecordType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isNoResolvedType());
      //  // Unstable assertion: assertEquals(true, errorFunctionType0.isNominalConstructor());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isNoType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isNominalType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isStringValueType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isResolved());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isCheckedUnknownType());
      //  // Unstable assertion: assertEquals(true, errorFunctionType0.hasCachedValues());
      //  // Unstable assertion: assertEquals(true, errorFunctionType0.hasInstanceType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isBooleanValueType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isAllType());
      //  // Unstable assertion: assertEquals(3, errorFunctionType0.getMaxArguments());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isTemplateType());
      //  // Unstable assertion: assertEquals(true, errorFunctionType0.isConstructor());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isParameterizedType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isInterface());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isReturnTypeInferred());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isEnumElementType());
      //  // Unstable assertion: assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      //  // Unstable assertion: assertEquals(true, errorFunctionType0.canBeCalled());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isNumberValueType());
      //  // Unstable assertion: assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isNoObjectType());
      //  // Unstable assertion: assertEquals(true, errorFunctionType0.isFunctionType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isUnionType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isFunctionPrototypeType());
      //  // Unstable assertion: assertEquals(false, arrowType0.isEnumType());
      //  // Unstable assertion: assertEquals(false, arrowType0.isStringValueType());
      //  // Unstable assertion: assertEquals(false, arrowType0.isNoResolvedType());
      //  // Unstable assertion: assertEquals(false, arrowType0.isNoObjectType());
      //  // Unstable assertion: assertEquals(false, arrowType0.isNumberValueType());
      //  // Unstable assertion: assertEquals(false, arrowType0.isParameterizedType());
      //  // Unstable assertion: assertEquals(false, arrowType0.isAllType());
      //  // Unstable assertion: assertEquals(false, arrowType0.isFunctionType());
      //  // Unstable assertion: assertEquals(false, arrowType0.isInterface());
      //  // Unstable assertion: assertEquals(false, arrowType0.isTemplateType());
      //  // Unstable assertion: assertEquals(false, arrowType0.isVoidType());
      //  // Unstable assertion: assertEquals(false, arrowType0.isNullType());
      //  // Unstable assertion: assertEquals(false, arrowType0.isOrdinaryFunction());
      //  // Unstable assertion: assertEquals(false, arrowType0.isResolved());
      //  // Unstable assertion: assertEquals(false, arrowType0.isCheckedUnknownType());
      //  // Unstable assertion: assertEquals(false, arrowType0.isBooleanValueType());
      //  // Unstable assertion: assertEquals(false, arrowType0.isUnionType());
      //  // Unstable assertion: assertEquals(false, arrowType0.isNoType());
      //  // Unstable assertion: assertEquals(false, arrowType0.isConstructor());
      //  // Unstable assertion: assertEquals(false, arrowType0.isNominalType());
      //  // Unstable assertion: assertEquals(false, arrowType0.isFunctionPrototypeType());
      //  // Unstable assertion: assertEquals(false, arrowType0.isNominalConstructor());
      //  // Unstable assertion: assertEquals(false, arrowType0.isEnumElementType());
      //  // Unstable assertion: assertEquals(false, arrowType0.isRecordType());
      //  // Unstable assertion: assertEquals(false, functionType0.isNominalType());
      //  // Unstable assertion: assertEquals(false, functionType0.isEnumType());
      //  // Unstable assertion: assertEquals(true, functionType0.isFunctionType());
      //  // Unstable assertion: assertEquals(true, functionType0.canBeCalled());
      //  // Unstable assertion: assertEquals(false, functionType0.isCheckedUnknownType());
      //  // Unstable assertion: assertEquals(false, functionType0.isVoidType());
      //  // Unstable assertion: assertEquals(false, functionType0.isResolved());
      //  // Unstable assertion: assertEquals(false, functionType0.isBooleanValueType());
      //  // Unstable assertion: assertEquals(false, functionType0.isNoResolvedType());
      //  // Unstable assertion: assertEquals(false, functionType0.isInterface());
      //  // Unstable assertion: assertEquals(false, functionType0.isUnionType());
      //  // Unstable assertion: assertEquals(false, functionType0.isTemplateType());
      //  // Unstable assertion: assertEquals(true, functionType0.isOrdinaryFunction());
      //  // Unstable assertion: assertEquals(false, functionType0.isNominalConstructor());
      //  // Unstable assertion: assertEquals(true, functionType0.hasCachedValues());
      //  // Unstable assertion: assertEquals(false, functionType0.isNumberValueType());
      //  // Unstable assertion: assertEquals(false, functionType0.isRecordType());
      //  // Unstable assertion: assertEquals(false, functionType0.isNullType());
      //  // Unstable assertion: assertEquals(false, functionType0.isStringValueType());
      //  // Unstable assertion: assertEquals(false, functionType0.isAllType());
      //  // Unstable assertion: assertEquals(0, functionType0.getExtendedInterfacesCount());
      //  // Unstable assertion: assertEquals(2147483647, functionType0.getMaxArguments());
      //  // Unstable assertion: assertEquals(false, functionType0.isNoObjectType());
      //  // Unstable assertion: assertEquals(false, functionType0.hasInstanceType());
      //  // Unstable assertion: assertEquals(false, functionType0.isEnumElementType());
      //  // Unstable assertion: assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      //  // Unstable assertion: assertEquals(false, functionType0.isParameterizedType());
      //  // Unstable assertion: assertEquals(false, functionType0.isFunctionPrototypeType());
      //  // Unstable assertion: assertEquals(false, functionType0.isReturnTypeInferred());
      //  // Unstable assertion: assertEquals(false, functionType0.isConstructor());
      //  // Unstable assertion: assertEquals(false, functionType0.isNoType());
      //  // Unstable assertion: assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      //  // Unstable assertion: assertNotNull(string1);
      //  // Unstable assertion: assertEquals("function (function (new:, *=, *=, *=): , [ArrowType], function (new:, *=, *=, *=): , function (new:, *=, *=, *=): , [ArrowType], [ArrowType], function (new:, *=, *=, *=): , [ArrowType], [ArrowType], ...[function (new:, *=, *=, *=): ]): [ArrowType]", string1);
      //  // Unstable assertion: assertFalse(string0.equals((Object)string1));
      //  // Unstable assertion: assertFalse(string1.equals((Object)string0));
  }

  @Test
  public void test17()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      //  // Unstable assertion: assertNotNull(simpleErrorReporter0);
      
      String string0 = "";
      boolean boolean0 = false;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0, boolean0);
      //  // Unstable assertion: assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      //  // Unstable assertion: assertNotNull(jSTypeRegistry0);
      
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, string0);
      //  // Unstable assertion: assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isResolved());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isReturnTypeInferred());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isTemplateType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isNoResolvedType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isUnionType());
      //  // Unstable assertion: assertEquals(true, errorFunctionType0.canBeCalled());
      //  // Unstable assertion: assertEquals(true, errorFunctionType0.isFunctionType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isNoType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isVoidType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isNumberValueType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isCheckedUnknownType());
      //  // Unstable assertion: assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isNominalType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isStringValueType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isEnumElementType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isInterface());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      //  // Unstable assertion: assertEquals(3, errorFunctionType0.getMaxArguments());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isEnumType());
      //  // Unstable assertion: assertEquals(true, errorFunctionType0.hasInstanceType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isNullType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isParameterizedType());
      //  // Unstable assertion: assertEquals(true, errorFunctionType0.isConstructor());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isFunctionPrototypeType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isRecordType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isBooleanValueType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isNoObjectType());
      //  // Unstable assertion: assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      //  // Unstable assertion: assertEquals(true, errorFunctionType0.isNominalConstructor());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.hasCachedValues());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isAllType());
      //  // Unstable assertion: assertNotNull(errorFunctionType0);
      
      ArrowType arrowType0 = errorFunctionType0.getInternalArrowType();
      //  // Unstable assertion: assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      //  // Unstable assertion: assertEquals(false, arrowType0.isCheckedUnknownType());
      //  // Unstable assertion: assertEquals(false, arrowType0.isNoResolvedType());
      //  // Unstable assertion: assertEquals(false, arrowType0.isUnionType());
      //  // Unstable assertion: assertEquals(false, arrowType0.isBooleanValueType());
      //  // Unstable assertion: assertEquals(false, arrowType0.isParameterizedType());
      //  // Unstable assertion: assertEquals(false, arrowType0.isNoObjectType());
      //  // Unstable assertion: assertEquals(false, arrowType0.isNominalConstructor());
      //  // Unstable assertion: assertEquals(false, arrowType0.isOrdinaryFunction());
      //  // Unstable assertion: assertEquals(false, arrowType0.isAllType());
      //  // Unstable assertion: assertEquals(false, arrowType0.isNoType());
      //  // Unstable assertion: assertEquals(false, arrowType0.isResolved());
      //  // Unstable assertion: assertEquals(false, arrowType0.isTemplateType());
      //  // Unstable assertion: assertEquals(false, arrowType0.isConstructor());
      //  // Unstable assertion: assertEquals(false, arrowType0.isEnumType());
      //  // Unstable assertion: assertEquals(false, arrowType0.isFunctionType());
      //  // Unstable assertion: assertEquals(false, arrowType0.isNominalType());
      //  // Unstable assertion: assertEquals(false, arrowType0.isRecordType());
      //  // Unstable assertion: assertEquals(false, arrowType0.isInterface());
      //  // Unstable assertion: assertEquals(false, arrowType0.isNullType());
      //  // Unstable assertion: assertEquals(false, arrowType0.isNumberValueType());
      //  // Unstable assertion: assertEquals(false, arrowType0.isStringValueType());
      //  // Unstable assertion: assertEquals(false, arrowType0.isEnumElementType());
      //  // Unstable assertion: assertEquals(false, arrowType0.isFunctionPrototypeType());
      //  // Unstable assertion: assertEquals(false, arrowType0.isVoidType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isResolved());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isReturnTypeInferred());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isTemplateType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isNoResolvedType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isUnionType());
      //  // Unstable assertion: assertEquals(true, errorFunctionType0.canBeCalled());
      //  // Unstable assertion: assertEquals(true, errorFunctionType0.isFunctionType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isNoType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isVoidType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isNumberValueType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isCheckedUnknownType());
      //  // Unstable assertion: assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isNominalType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isStringValueType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isEnumElementType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isInterface());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      //  // Unstable assertion: assertEquals(3, errorFunctionType0.getMaxArguments());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isEnumType());
      //  // Unstable assertion: assertEquals(true, errorFunctionType0.hasInstanceType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isNullType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isParameterizedType());
      //  // Unstable assertion: assertEquals(true, errorFunctionType0.isConstructor());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isFunctionPrototypeType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isRecordType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isBooleanValueType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isNoObjectType());
      //  // Unstable assertion: assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      //  // Unstable assertion: assertEquals(true, errorFunctionType0.isNominalConstructor());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.hasCachedValues());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isAllType());
      //  // Unstable assertion: assertNotNull(arrowType0);
      
      JSTypeNative jSTypeNative0 = JSTypeNative.ARRAY_FUNCTION_TYPE;
      FunctionType functionType0 = (FunctionType)errorFunctionType0.getNativeType(jSTypeNative0);
      //  // Unstable assertion: assertEquals(false, functionType0.isBooleanValueType());
      //  // Unstable assertion: assertEquals(true, functionType0.isFunctionType());
      //  // Unstable assertion: assertEquals(0, functionType0.getExtendedInterfacesCount());
      //  // Unstable assertion: assertEquals(false, functionType0.isStringValueType());
      //  // Unstable assertion: assertEquals(true, functionType0.hasInstanceType());
      //  // Unstable assertion: assertEquals(false, functionType0.isNoType());
      //  // Unstable assertion: assertEquals(false, functionType0.isEnumType());
      //  // Unstable assertion: assertEquals(false, functionType0.isUnionType());
      //  // Unstable assertion: assertEquals(false, functionType0.isOrdinaryFunction());
      //  // Unstable assertion: assertEquals(true, functionType0.isConstructor());
      //  // Unstable assertion: assertEquals(false, functionType0.isEnumElementType());
      //  // Unstable assertion: assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      //  // Unstable assertion: assertEquals(false, functionType0.isAllType());
      //  // Unstable assertion: assertEquals(false, functionType0.isNoResolvedType());
      //  // Unstable assertion: assertEquals(true, functionType0.canBeCalled());
      //  // Unstable assertion: assertEquals(true, functionType0.hasCachedValues());
      //  // Unstable assertion: assertEquals(false, functionType0.isCheckedUnknownType());
      //  // Unstable assertion: assertEquals(false, functionType0.isReturnTypeInferred());
      //  // Unstable assertion: assertEquals(false, functionType0.isNominalType());
      //  // Unstable assertion: assertEquals(2147483647, functionType0.getMaxArguments());
      //  // Unstable assertion: assertEquals(false, functionType0.isParameterizedType());
      //  // Unstable assertion: assertEquals(false, functionType0.isInterface());
      //  // Unstable assertion: assertEquals(false, functionType0.isNullType());
      //  // Unstable assertion: assertEquals(false, functionType0.isNumberValueType());
      //  // Unstable assertion: assertEquals(false, functionType0.isResolved());
      //  // Unstable assertion: assertEquals(false, functionType0.isNoObjectType());
      //  // Unstable assertion: assertEquals(true, functionType0.isNominalConstructor());
      //  // Unstable assertion: assertEquals(false, functionType0.isRecordType());
      //  // Unstable assertion: assertEquals(false, functionType0.isVoidType());
      //  // Unstable assertion: assertEquals(false, functionType0.isFunctionPrototypeType());
      //  // Unstable assertion: assertEquals(false, functionType0.isTemplateType());
      //  // Unstable assertion: assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isResolved());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isReturnTypeInferred());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isTemplateType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isNoResolvedType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isUnionType());
      //  // Unstable assertion: assertEquals(true, errorFunctionType0.canBeCalled());
      //  // Unstable assertion: assertEquals(true, errorFunctionType0.isFunctionType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isNoType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isVoidType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isNumberValueType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isCheckedUnknownType());
      //  // Unstable assertion: assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isNominalType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isStringValueType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isEnumElementType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isInterface());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      //  // Unstable assertion: assertEquals(3, errorFunctionType0.getMaxArguments());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isEnumType());
      //  // Unstable assertion: assertEquals(true, errorFunctionType0.hasInstanceType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isNullType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isParameterizedType());
      //  // Unstable assertion: assertEquals(true, errorFunctionType0.isConstructor());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isFunctionPrototypeType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isRecordType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isBooleanValueType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isNoObjectType());
      //  // Unstable assertion: assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      //  // Unstable assertion: assertEquals(true, errorFunctionType0.isNominalConstructor());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.hasCachedValues());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isAllType());
      //  // Unstable assertion: assertNotNull(functionType0);
      
      JSType[] jSTypeArray0 = new JSType[10];
      jSTypeArray0[0] = (JSType) functionType0;
      //  // Unstable assertion: assertEquals(false, functionType0.isBooleanValueType());
      //  // Unstable assertion: assertEquals(true, functionType0.isFunctionType());
      //  // Unstable assertion: assertEquals(0, functionType0.getExtendedInterfacesCount());
      //  // Unstable assertion: assertEquals(false, functionType0.isStringValueType());
      //  // Unstable assertion: assertEquals(true, functionType0.hasInstanceType());
      //  // Unstable assertion: assertEquals(false, functionType0.isNoType());
      //  // Unstable assertion: assertEquals(false, functionType0.isEnumType());
      //  // Unstable assertion: assertEquals(false, functionType0.isUnionType());
      //  // Unstable assertion: assertEquals(false, functionType0.isOrdinaryFunction());
      //  // Unstable assertion: assertEquals(true, functionType0.isConstructor());
      //  // Unstable assertion: assertEquals(false, functionType0.isEnumElementType());
      //  // Unstable assertion: assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      //  // Unstable assertion: assertEquals(false, functionType0.isAllType());
      //  // Unstable assertion: assertEquals(false, functionType0.isNoResolvedType());
      //  // Unstable assertion: assertEquals(true, functionType0.canBeCalled());
      //  // Unstable assertion: assertEquals(true, functionType0.hasCachedValues());
      //  // Unstable assertion: assertEquals(false, functionType0.isCheckedUnknownType());
      //  // Unstable assertion: assertEquals(false, functionType0.isReturnTypeInferred());
      //  // Unstable assertion: assertEquals(false, functionType0.isNominalType());
      //  // Unstable assertion: assertEquals(2147483647, functionType0.getMaxArguments());
      //  // Unstable assertion: assertEquals(false, functionType0.isParameterizedType());
      //  // Unstable assertion: assertEquals(false, functionType0.isInterface());
      //  // Unstable assertion: assertEquals(false, functionType0.isNullType());
      //  // Unstable assertion: assertEquals(false, functionType0.isNumberValueType());
      //  // Unstable assertion: assertEquals(false, functionType0.isResolved());
      //  // Unstable assertion: assertEquals(false, functionType0.isNoObjectType());
      //  // Unstable assertion: assertEquals(true, functionType0.isNominalConstructor());
      //  // Unstable assertion: assertEquals(false, functionType0.isRecordType());
      //  // Unstable assertion: assertEquals(false, functionType0.isVoidType());
      //  // Unstable assertion: assertEquals(false, functionType0.isFunctionPrototypeType());
      //  // Unstable assertion: assertEquals(false, functionType0.isTemplateType());
      //  // Unstable assertion: assertEquals(false, jSTypeArray0[0].isBooleanValueType());
      //  // Unstable assertion: assertEquals(false, jSTypeArray0[0].isNoObjectType());
      //  // Unstable assertion: assertEquals(false, jSTypeArray0[0].isInterface());
      //  // Unstable assertion: assertEquals(false, jSTypeArray0[0].isUnionType());
      //  // Unstable assertion: assertEquals(false, jSTypeArray0[0].isEnumType());
      //  // Unstable assertion: assertEquals(false, jSTypeArray0[0].isCheckedUnknownType());
      //  // Unstable assertion: assertEquals(false, jSTypeArray0[0].isRecordType());
      //  // Unstable assertion: assertEquals(false, jSTypeArray0[0].isNumberValueType());
      //  // Unstable assertion: assertEquals(true, jSTypeArray0[0].isNominalConstructor());
      //  // Unstable assertion: assertEquals(true, jSTypeArray0[0].isFunctionType());
      //  // Unstable assertion: assertEquals(false, jSTypeArray0[0].isResolved());
      //  // Unstable assertion: assertEquals(false, jSTypeArray0[0].isOrdinaryFunction());
      //  // Unstable assertion: assertEquals(false, jSTypeArray0[0].isNoType());
      //  // Unstable assertion: assertEquals(false, jSTypeArray0[0].isNominalType());
      //  // Unstable assertion: assertEquals(false, jSTypeArray0[0].isNullType());
      //  // Unstable assertion: assertEquals(false, jSTypeArray0[0].isEnumElementType());
      //  // Unstable assertion: assertEquals(false, jSTypeArray0[0].isVoidType());
      //  // Unstable assertion: assertEquals(false, jSTypeArray0[0].isFunctionPrototypeType());
      //  // Unstable assertion: assertEquals(false, jSTypeArray0[0].isNoResolvedType());
      //  // Unstable assertion: assertEquals(false, jSTypeArray0[0].isAllType());
      //  // Unstable assertion: assertEquals(false, jSTypeArray0[0].isParameterizedType());
      //  // Unstable assertion: assertEquals(false, jSTypeArray0[0].isStringValueType());
      //  // Unstable assertion: assertEquals(true, jSTypeArray0[0].isConstructor());
      //  // Unstable assertion: assertEquals(false, jSTypeArray0[0].isTemplateType());
      //  // Unstable assertion: assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isResolved());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isReturnTypeInferred());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isTemplateType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isNoResolvedType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isUnionType());
      //  // Unstable assertion: assertEquals(true, errorFunctionType0.canBeCalled());
      //  // Unstable assertion: assertEquals(true, errorFunctionType0.isFunctionType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isNoType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isVoidType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isNumberValueType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isCheckedUnknownType());
      //  // Unstable assertion: assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isNominalType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isStringValueType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isEnumElementType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isInterface());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      //  // Unstable assertion: assertEquals(3, errorFunctionType0.getMaxArguments());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isEnumType());
      //  // Unstable assertion: assertEquals(true, errorFunctionType0.hasInstanceType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isNullType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isParameterizedType());
      //  // Unstable assertion: assertEquals(true, errorFunctionType0.isConstructor());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isFunctionPrototypeType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isRecordType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isBooleanValueType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isNoObjectType());
      //  // Unstable assertion: assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      //  // Unstable assertion: assertEquals(true, errorFunctionType0.isNominalConstructor());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.hasCachedValues());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isAllType());
      //  // Unstable assertion: assertNotNull(jSTypeArray0[0]);
      
      jSTypeArray0[9] = (JSType) functionType0;
      //  // Unstable assertion: assertEquals(false, jSTypeArray0[9].isNumberValueType());
      //  // Unstable assertion: assertEquals(false, jSTypeArray0[9].isBooleanValueType());
      //  // Unstable assertion: assertEquals(false, jSTypeArray0[9].isOrdinaryFunction());
      //  // Unstable assertion: assertEquals(false, jSTypeArray0[9].isStringValueType());
      //  // Unstable assertion: assertEquals(false, jSTypeArray0[9].isNominalType());
      //  // Unstable assertion: assertEquals(false, jSTypeArray0[9].isUnionType());
      //  // Unstable assertion: assertEquals(false, jSTypeArray0[9].isEnumType());
      //  // Unstable assertion: assertEquals(true, jSTypeArray0[9].isNominalConstructor());
      //  // Unstable assertion: assertEquals(false, jSTypeArray0[9].isNullType());
      //  // Unstable assertion: assertEquals(false, jSTypeArray0[9].isNoResolvedType());
      //  // Unstable assertion: assertEquals(false, jSTypeArray0[9].isFunctionPrototypeType());
      //  // Unstable assertion: assertEquals(false, jSTypeArray0[9].isNoObjectType());
      //  // Unstable assertion: assertEquals(true, jSTypeArray0[9].isConstructor());
      //  // Unstable assertion: assertEquals(false, jSTypeArray0[9].isAllType());
      //  // Unstable assertion: assertEquals(false, jSTypeArray0[9].isInterface());
      //  // Unstable assertion: assertEquals(true, jSTypeArray0[9].isFunctionType());
      //  // Unstable assertion: assertEquals(false, jSTypeArray0[9].isRecordType());
      //  // Unstable assertion: assertEquals(false, jSTypeArray0[9].isTemplateType());
      //  // Unstable assertion: assertEquals(false, jSTypeArray0[9].isEnumElementType());
      //  // Unstable assertion: assertEquals(false, jSTypeArray0[9].isResolved());
      //  // Unstable assertion: assertEquals(false, jSTypeArray0[9].isParameterizedType());
      //  // Unstable assertion: assertEquals(false, jSTypeArray0[9].isNoType());
      //  // Unstable assertion: assertEquals(false, jSTypeArray0[9].isCheckedUnknownType());
      //  // Unstable assertion: assertEquals(false, jSTypeArray0[9].isVoidType());
      //  // Unstable assertion: assertEquals(false, functionType0.isBooleanValueType());
      //  // Unstable assertion: assertEquals(true, functionType0.isFunctionType());
      //  // Unstable assertion: assertEquals(0, functionType0.getExtendedInterfacesCount());
      //  // Unstable assertion: assertEquals(false, functionType0.isStringValueType());
      //  // Unstable assertion: assertEquals(true, functionType0.hasInstanceType());
      //  // Unstable assertion: assertEquals(false, functionType0.isNoType());
      //  // Unstable assertion: assertEquals(false, functionType0.isEnumType());
      //  // Unstable assertion: assertEquals(false, functionType0.isUnionType());
      //  // Unstable assertion: assertEquals(false, functionType0.isOrdinaryFunction());
      //  // Unstable assertion: assertEquals(true, functionType0.isConstructor());
      //  // Unstable assertion: assertEquals(false, functionType0.isEnumElementType());
      //  // Unstable assertion: assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      //  // Unstable assertion: assertEquals(false, functionType0.isAllType());
      //  // Unstable assertion: assertEquals(false, functionType0.isNoResolvedType());
      //  // Unstable assertion: assertEquals(true, functionType0.canBeCalled());
      //  // Unstable assertion: assertEquals(true, functionType0.hasCachedValues());
      //  // Unstable assertion: assertEquals(false, functionType0.isCheckedUnknownType());
      //  // Unstable assertion: assertEquals(false, functionType0.isReturnTypeInferred());
      //  // Unstable assertion: assertEquals(false, functionType0.isNominalType());
      //  // Unstable assertion: assertEquals(2147483647, functionType0.getMaxArguments());
      //  // Unstable assertion: assertEquals(false, functionType0.isParameterizedType());
      //  // Unstable assertion: assertEquals(false, functionType0.isInterface());
      //  // Unstable assertion: assertEquals(false, functionType0.isNullType());
      //  // Unstable assertion: assertEquals(false, functionType0.isNumberValueType());
      //  // Unstable assertion: assertEquals(false, functionType0.isResolved());
      //  // Unstable assertion: assertEquals(false, functionType0.isNoObjectType());
      //  // Unstable assertion: assertEquals(true, functionType0.isNominalConstructor());
      //  // Unstable assertion: assertEquals(false, functionType0.isRecordType());
      //  // Unstable assertion: assertEquals(false, functionType0.isVoidType());
      //  // Unstable assertion: assertEquals(false, functionType0.isFunctionPrototypeType());
      //  // Unstable assertion: assertEquals(false, functionType0.isTemplateType());
      //  // Unstable assertion: assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isResolved());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isReturnTypeInferred());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isTemplateType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isNoResolvedType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isUnionType());
      //  // Unstable assertion: assertEquals(true, errorFunctionType0.canBeCalled());
      //  // Unstable assertion: assertEquals(true, errorFunctionType0.isFunctionType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isNoType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isVoidType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isNumberValueType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isCheckedUnknownType());
      //  // Unstable assertion: assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isNominalType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isStringValueType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isEnumElementType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isInterface());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      //  // Unstable assertion: assertEquals(3, errorFunctionType0.getMaxArguments());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isEnumType());
      //  // Unstable assertion: assertEquals(true, errorFunctionType0.hasInstanceType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isNullType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isParameterizedType());
      //  // Unstable assertion: assertEquals(true, errorFunctionType0.isConstructor());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isFunctionPrototypeType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isRecordType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isBooleanValueType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isNoObjectType());
      //  // Unstable assertion: assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      //  // Unstable assertion: assertEquals(true, errorFunctionType0.isNominalConstructor());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.hasCachedValues());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isAllType());
      //  // Unstable assertion: assertNotNull(jSTypeArray0[9]);
      
      FunctionType functionType1 = jSTypeRegistry0.createFunctionTypeWithVarArgs((JSType) arrowType0, jSTypeArray0);
      //  // Unstable assertion: assertNotSame(functionType1, functionType0);
      //  // Unstable assertion: assertEquals(false, functionType1.isNominalType());
      //  // Unstable assertion: assertEquals(false, functionType1.isAllType());
      //  // Unstable assertion: assertEquals(false, functionType1.isNoObjectType());
      //  // Unstable assertion: assertEquals(false, functionType1.isRecordType());
      //  // Unstable assertion: assertEquals(false, functionType1.isNominalConstructor());
      //  // Unstable assertion: assertEquals(false, functionType1.isTemplateType());
      //  // Unstable assertion: assertEquals(false, functionType1.isConstructor());
      //  // Unstable assertion: assertEquals(false, functionType1.isFunctionPrototypeType());
      //  // Unstable assertion: assertEquals(false, functionType1.isNoResolvedType());
      //  // Unstable assertion: assertEquals(true, functionType1.isFunctionType());
      //  // Unstable assertion: assertEquals(false, functionType1.isReturnTypeInferred());
      //  // Unstable assertion: assertEquals(false, functionType1.isNullType());
      //  // Unstable assertion: assertEquals(false, functionType1.isCheckedUnknownType());
      //  // Unstable assertion: assertEquals(false, functionType1.isNoType());
      //  // Unstable assertion: assertEquals(0, functionType1.getExtendedInterfacesCount());
      //  // Unstable assertion: assertEquals(false, functionType1.isEnumType());
      //  // Unstable assertion: assertEquals(true, functionType1.canBeCalled());
      //  // Unstable assertion: assertEquals(false, functionType1.isBooleanValueType());
      //  // Unstable assertion: assertEquals(false, functionType1.isNumberValueType());
      //  // Unstable assertion: assertEquals(false, functionType1.isVoidType());
      //  // Unstable assertion: assertEquals(false, functionType1.hasInstanceType());
      //  // Unstable assertion: assertEquals(false, functionType1.isInterface());
      //  // Unstable assertion: assertEquals(false, functionType1.isParameterizedType());
      //  // Unstable assertion: assertEquals(false, functionType1.isResolved());
      //  // Unstable assertion: assertEquals(BooleanLiteralSet.TRUE, functionType1.getPossibleToBooleanOutcomes());
      //  // Unstable assertion: assertEquals(false, functionType1.isEnumElementType());
      //  // Unstable assertion: assertEquals(true, functionType1.hasCachedValues());
      //  // Unstable assertion: assertEquals(false, functionType1.isStringValueType());
      //  // Unstable assertion: assertEquals(2147483647, functionType1.getMaxArguments());
      //  // Unstable assertion: assertEquals(false, functionType1.isUnionType());
      //  // Unstable assertion: assertEquals(true, functionType1.isOrdinaryFunction());
      //  // Unstable assertion: assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      //  // Unstable assertion: assertEquals(false, arrowType0.isCheckedUnknownType());
      //  // Unstable assertion: assertEquals(false, arrowType0.isNoResolvedType());
      //  // Unstable assertion: assertEquals(false, arrowType0.isUnionType());
      //  // Unstable assertion: assertEquals(false, arrowType0.isBooleanValueType());
      //  // Unstable assertion: assertEquals(false, arrowType0.isParameterizedType());
      //  // Unstable assertion: assertEquals(false, arrowType0.isNoObjectType());
      //  // Unstable assertion: assertEquals(false, arrowType0.isNominalConstructor());
      //  // Unstable assertion: assertEquals(false, arrowType0.isOrdinaryFunction());
      //  // Unstable assertion: assertEquals(false, arrowType0.isAllType());
      //  // Unstable assertion: assertEquals(false, arrowType0.isNoType());
      //  // Unstable assertion: assertEquals(false, arrowType0.isResolved());
      //  // Unstable assertion: assertEquals(false, arrowType0.isTemplateType());
      //  // Unstable assertion: assertEquals(false, arrowType0.isConstructor());
      //  // Unstable assertion: assertEquals(false, arrowType0.isEnumType());
      //  // Unstable assertion: assertEquals(false, arrowType0.isFunctionType());
      //  // Unstable assertion: assertEquals(false, arrowType0.isNominalType());
      //  // Unstable assertion: assertEquals(false, arrowType0.isRecordType());
      //  // Unstable assertion: assertEquals(false, arrowType0.isInterface());
      //  // Unstable assertion: assertEquals(false, arrowType0.isNullType());
      //  // Unstable assertion: assertEquals(false, arrowType0.isNumberValueType());
      //  // Unstable assertion: assertEquals(false, arrowType0.isStringValueType());
      //  // Unstable assertion: assertEquals(false, arrowType0.isEnumElementType());
      //  // Unstable assertion: assertEquals(false, arrowType0.isFunctionPrototypeType());
      //  // Unstable assertion: assertEquals(false, arrowType0.isVoidType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isResolved());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isReturnTypeInferred());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isTemplateType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isNoResolvedType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isUnionType());
      //  // Unstable assertion: assertEquals(true, errorFunctionType0.canBeCalled());
      //  // Unstable assertion: assertEquals(true, errorFunctionType0.isFunctionType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isNoType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isVoidType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isNumberValueType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isCheckedUnknownType());
      //  // Unstable assertion: assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isNominalType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isStringValueType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isEnumElementType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isInterface());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      //  // Unstable assertion: assertEquals(3, errorFunctionType0.getMaxArguments());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isEnumType());
      //  // Unstable assertion: assertEquals(true, errorFunctionType0.hasInstanceType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isNullType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isParameterizedType());
      //  // Unstable assertion: assertEquals(true, errorFunctionType0.isConstructor());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isFunctionPrototypeType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isRecordType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isBooleanValueType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isNoObjectType());
      //  // Unstable assertion: assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      //  // Unstable assertion: assertEquals(true, errorFunctionType0.isNominalConstructor());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.hasCachedValues());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isAllType());
      //  // Unstable assertion: assertNotNull(functionType1);
      //  // Unstable assertion: assertFalse(functionType1.equals((Object)functionType0));
      
      // Undeclared exception!
      try {
        String string1 = functionType1.toStringHelper(boolean0);
       //  fail("Expecting exception: NullPointerException");
       // Unstable assertion
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test18()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      //  // Unstable assertion: assertNotNull(simpleErrorReporter0);
      
      boolean boolean0 = true;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0, boolean0);
      //  // Unstable assertion: assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      //  // Unstable assertion: assertNotNull(jSTypeRegistry0);
      
      String string0 = "NpaV?\\";
      NoType noType0 = new NoType(jSTypeRegistry0);
      //  // Unstable assertion: assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      //  // Unstable assertion: assertEquals(false, noType0.isInterface());
      //  // Unstable assertion: assertEquals(false, noType0.isUnionType());
      //  // Unstable assertion: assertEquals(false, noType0.isNominalType());
      //  // Unstable assertion: assertEquals(false, noType0.isResolved());
      //  // Unstable assertion: assertEquals(true, noType0.hasInstanceType());
      //  // Unstable assertion: assertEquals(false, noType0.isNoResolvedType());
      //  // Unstable assertion: assertEquals(false, noType0.isReturnTypeInferred());
      //  // Unstable assertion: assertEquals(false, noType0.isOrdinaryFunction());
      //  // Unstable assertion: assertEquals(true, noType0.matchesObjectContext());
      //  // Unstable assertion: assertEquals(2147483647, noType0.getPropertiesCount());
      //  // Unstable assertion: assertEquals(false, noType0.isEnumElementType());
      //  // Unstable assertion: assertEquals(true, noType0.isNoType());
      //  // Unstable assertion: assertEquals(false, noType0.isFunctionType());
      //  // Unstable assertion: assertEquals(false, noType0.isEnumType());
      //  // Unstable assertion: assertEquals(false, noType0.isVoidType());
      //  // Unstable assertion: assertNull(noType0.getReferenceName());
      //  // Unstable assertion: assertEquals(false, noType0.isNumberValueType());
      //  // Unstable assertion: assertEquals(false, noType0.isAllType());
      //  // Unstable assertion: assertEquals(true, noType0.matchesNumberContext());
      //  // Unstable assertion: assertEquals(false, noType0.isParameterizedType());
      //  // Unstable assertion: assertEquals(false, noType0.isNoObjectType());
      //  // Unstable assertion: assertEquals(false, noType0.isBooleanValueType());
      //  // Unstable assertion: assertEquals(false, noType0.isFunctionPrototypeType());
      //  // Unstable assertion: assertEquals(false, noType0.isTemplateType());
      //  // Unstable assertion: assertEquals(false, noType0.isNullType());
      //  // Unstable assertion: assertEquals(false, noType0.isStringValueType());
      //  // Unstable assertion: assertEquals(0, noType0.getExtendedInterfacesCount());
      //  // Unstable assertion: assertEquals(2147483647, noType0.getMaxArguments());
      //  // Unstable assertion: assertEquals(false, noType0.hasCachedValues());
      //  // Unstable assertion: assertEquals(true, noType0.isConstructor());
      //  // Unstable assertion: assertEquals(true, noType0.canBeCalled());
      //  // Unstable assertion: assertEquals(true, noType0.isNullable());
      //  // Unstable assertion: assertEquals(false, noType0.isRecordType());
      //  // Unstable assertion: assertEquals(true, noType0.matchesStringContext());
      //  // Unstable assertion: assertEquals(false, noType0.isCheckedUnknownType());
      //  // Unstable assertion: assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      //  // Unstable assertion: assertEquals(false, noType0.isNominalConstructor());
      //  // Unstable assertion: assertNotNull(noType0);
      
      Node node0 = noType0.getRootNode();
      //  // Unstable assertion: assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      //  // Unstable assertion: assertEquals(false, noType0.isInterface());
      //  // Unstable assertion: assertEquals(false, noType0.isUnionType());
      //  // Unstable assertion: assertEquals(false, noType0.isNominalType());
      //  // Unstable assertion: assertEquals(false, noType0.isResolved());
      //  // Unstable assertion: assertEquals(true, noType0.hasInstanceType());
      //  // Unstable assertion: assertEquals(false, noType0.isNoResolvedType());
      //  // Unstable assertion: assertEquals(false, noType0.isReturnTypeInferred());
      //  // Unstable assertion: assertEquals(false, noType0.isOrdinaryFunction());
      //  // Unstable assertion: assertEquals(true, noType0.matchesObjectContext());
      //  // Unstable assertion: assertEquals(2147483647, noType0.getPropertiesCount());
      //  // Unstable assertion: assertEquals(false, noType0.isEnumElementType());
      //  // Unstable assertion: assertEquals(true, noType0.isNoType());
      //  // Unstable assertion: assertEquals(false, noType0.isFunctionType());
      //  // Unstable assertion: assertEquals(false, noType0.isEnumType());
      //  // Unstable assertion: assertEquals(false, noType0.isVoidType());
      //  // Unstable assertion: assertNull(noType0.getReferenceName());
      //  // Unstable assertion: assertEquals(false, noType0.isNumberValueType());
      //  // Unstable assertion: assertEquals(false, noType0.isAllType());
      //  // Unstable assertion: assertEquals(true, noType0.matchesNumberContext());
      //  // Unstable assertion: assertEquals(false, noType0.isParameterizedType());
      //  // Unstable assertion: assertEquals(false, noType0.isNoObjectType());
      //  // Unstable assertion: assertEquals(false, noType0.isBooleanValueType());
      //  // Unstable assertion: assertEquals(false, noType0.isFunctionPrototypeType());
      //  // Unstable assertion: assertEquals(false, noType0.isTemplateType());
      //  // Unstable assertion: assertEquals(false, noType0.isNullType());
      //  // Unstable assertion: assertEquals(false, noType0.isStringValueType());
      //  // Unstable assertion: assertEquals(0, noType0.getExtendedInterfacesCount());
      //  // Unstable assertion: assertEquals(2147483647, noType0.getMaxArguments());
      //  // Unstable assertion: assertEquals(false, noType0.hasCachedValues());
      //  // Unstable assertion: assertEquals(true, noType0.isConstructor());
      //  // Unstable assertion: assertEquals(true, noType0.canBeCalled());
      //  // Unstable assertion: assertEquals(true, noType0.isNullable());
      //  // Unstable assertion: assertEquals(false, noType0.isRecordType());
      //  // Unstable assertion: assertEquals(true, noType0.matchesStringContext());
      //  // Unstable assertion: assertEquals(false, noType0.isCheckedUnknownType());
      //  // Unstable assertion: assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      //  // Unstable assertion: assertEquals(false, noType0.isNominalConstructor());
      //  // Unstable assertion: assertNull(node0);
      
      FunctionType functionType0 = FunctionType.forInterface(jSTypeRegistry0, string0, node0);
      //  // Unstable assertion: assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      //  // Unstable assertion: assertEquals(false, noType0.isInterface());
      //  // Unstable assertion: assertEquals(false, noType0.isUnionType());
      //  // Unstable assertion: assertEquals(false, noType0.isNominalType());
      //  // Unstable assertion: assertEquals(false, noType0.isResolved());
      //  // Unstable assertion: assertEquals(true, noType0.hasInstanceType());
      //  // Unstable assertion: assertEquals(false, noType0.isNoResolvedType());
      //  // Unstable assertion: assertEquals(false, noType0.isReturnTypeInferred());
      //  // Unstable assertion: assertEquals(false, noType0.isOrdinaryFunction());
      //  // Unstable assertion: assertEquals(true, noType0.matchesObjectContext());
      //  // Unstable assertion: assertEquals(2147483647, noType0.getPropertiesCount());
      //  // Unstable assertion: assertEquals(false, noType0.isEnumElementType());
      //  // Unstable assertion: assertEquals(true, noType0.isNoType());
      //  // Unstable assertion: assertEquals(false, noType0.isFunctionType());
      //  // Unstable assertion: assertEquals(false, noType0.isEnumType());
      //  // Unstable assertion: assertEquals(false, noType0.isVoidType());
      //  // Unstable assertion: assertNull(noType0.getReferenceName());
      //  // Unstable assertion: assertEquals(false, noType0.isNumberValueType());
      //  // Unstable assertion: assertEquals(false, noType0.isAllType());
      //  // Unstable assertion: assertEquals(true, noType0.matchesNumberContext());
      //  // Unstable assertion: assertEquals(false, noType0.isParameterizedType());
      //  // Unstable assertion: assertEquals(false, noType0.isNoObjectType());
      //  // Unstable assertion: assertEquals(false, noType0.isBooleanValueType());
      //  // Unstable assertion: assertEquals(false, noType0.isFunctionPrototypeType());
      //  // Unstable assertion: assertEquals(false, noType0.isTemplateType());
      //  // Unstable assertion: assertEquals(false, noType0.isNullType());
      //  // Unstable assertion: assertEquals(false, noType0.isStringValueType());
      //  // Unstable assertion: assertEquals(0, noType0.getExtendedInterfacesCount());
      //  // Unstable assertion: assertEquals(2147483647, noType0.getMaxArguments());
      //  // Unstable assertion: assertEquals(false, noType0.hasCachedValues());
      //  // Unstable assertion: assertEquals(true, noType0.isConstructor());
      //  // Unstable assertion: assertEquals(true, noType0.canBeCalled());
      //  // Unstable assertion: assertEquals(true, noType0.isNullable());
      //  // Unstable assertion: assertEquals(false, noType0.isRecordType());
      //  // Unstable assertion: assertEquals(true, noType0.matchesStringContext());
      //  // Unstable assertion: assertEquals(false, noType0.isCheckedUnknownType());
      //  // Unstable assertion: assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      //  // Unstable assertion: assertEquals(false, noType0.isNominalConstructor());
      //  // Unstable assertion: assertEquals(false, functionType0.isNominalType());
      //  // Unstable assertion: assertEquals(false, functionType0.isNoObjectType());
      //  // Unstable assertion: assertEquals(false, functionType0.isEnumElementType());
      //  // Unstable assertion: assertEquals(false, functionType0.isParameterizedType());
      //  // Unstable assertion: assertEquals(true, functionType0.isFunctionType());
      //  // Unstable assertion: assertEquals(false, functionType0.isResolved());
      //  // Unstable assertion: assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      //  // Unstable assertion: assertEquals(false, functionType0.isNoResolvedType());
      //  // Unstable assertion: assertEquals(false, functionType0.isNoType());
      //  // Unstable assertion: assertEquals(false, functionType0.isOrdinaryFunction());
      //  // Unstable assertion: assertEquals(false, functionType0.isStringValueType());
      //  // Unstable assertion: assertEquals(true, functionType0.isInterface());
      //  // Unstable assertion: assertEquals(true, functionType0.canBeCalled());
      //  // Unstable assertion: assertEquals(false, functionType0.isEnumType());
      //  // Unstable assertion: assertEquals(false, functionType0.isReturnTypeInferred());
      //  // Unstable assertion: assertEquals(false, functionType0.isBooleanValueType());
      //  // Unstable assertion: assertEquals(true, functionType0.hasInstanceType());
      //  // Unstable assertion: assertEquals(false, functionType0.isFunctionPrototypeType());
      //  // Unstable assertion: assertEquals(false, functionType0.isUnionType());
      //  // Unstable assertion: assertEquals(false, functionType0.isAllType());
      //  // Unstable assertion: assertEquals(false, functionType0.isNominalConstructor());
      //  // Unstable assertion: assertEquals(false, functionType0.isConstructor());
      //  // Unstable assertion: assertEquals(false, functionType0.isCheckedUnknownType());
      //  // Unstable assertion: assertEquals(false, functionType0.isVoidType());
      //  // Unstable assertion: assertEquals(false, functionType0.hasCachedValues());
      //  // Unstable assertion: assertEquals(0, functionType0.getExtendedInterfacesCount());
      //  // Unstable assertion: assertEquals(false, functionType0.isNullType());
      //  // Unstable assertion: assertEquals(false, functionType0.isRecordType());
      //  // Unstable assertion: assertEquals(0, functionType0.getMaxArguments());
      //  // Unstable assertion: assertEquals(false, functionType0.isTemplateType());
      //  // Unstable assertion: assertEquals(false, functionType0.isNumberValueType());
      //  // Unstable assertion: assertNotNull(functionType0);
      
      String string1 = functionType0.toStringHelper(boolean0);
      //  // Unstable assertion: assertNotSame(string1, string0);
      //  // Unstable assertion: assertNotSame(string0, string1);
      //  // Unstable assertion: assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      //  // Unstable assertion: assertEquals(false, noType0.isInterface());
      //  // Unstable assertion: assertEquals(false, noType0.isUnionType());
      //  // Unstable assertion: assertEquals(false, noType0.isNominalType());
      //  // Unstable assertion: assertEquals(false, noType0.isResolved());
      //  // Unstable assertion: assertEquals(true, noType0.hasInstanceType());
      //  // Unstable assertion: assertEquals(false, noType0.isNoResolvedType());
      //  // Unstable assertion: assertEquals(false, noType0.isReturnTypeInferred());
      //  // Unstable assertion: assertEquals(false, noType0.isOrdinaryFunction());
      //  // Unstable assertion: assertEquals(true, noType0.matchesObjectContext());
      //  // Unstable assertion: assertEquals(2147483647, noType0.getPropertiesCount());
      //  // Unstable assertion: assertEquals(false, noType0.isEnumElementType());
      //  // Unstable assertion: assertEquals(true, noType0.isNoType());
      //  // Unstable assertion: assertEquals(false, noType0.isFunctionType());
      //  // Unstable assertion: assertEquals(false, noType0.isEnumType());
      //  // Unstable assertion: assertEquals(false, noType0.isVoidType());
      //  // Unstable assertion: assertNull(noType0.getReferenceName());
      //  // Unstable assertion: assertEquals(false, noType0.isNumberValueType());
      //  // Unstable assertion: assertEquals(false, noType0.isAllType());
      //  // Unstable assertion: assertEquals(true, noType0.matchesNumberContext());
      //  // Unstable assertion: assertEquals(false, noType0.isParameterizedType());
      //  // Unstable assertion: assertEquals(false, noType0.isNoObjectType());
      //  // Unstable assertion: assertEquals(false, noType0.isBooleanValueType());
      //  // Unstable assertion: assertEquals(false, noType0.isFunctionPrototypeType());
      //  // Unstable assertion: assertEquals(false, noType0.isTemplateType());
      //  // Unstable assertion: assertEquals(false, noType0.isNullType());
      //  // Unstable assertion: assertEquals(false, noType0.isStringValueType());
      //  // Unstable assertion: assertEquals(0, noType0.getExtendedInterfacesCount());
      //  // Unstable assertion: assertEquals(2147483647, noType0.getMaxArguments());
      //  // Unstable assertion: assertEquals(false, noType0.hasCachedValues());
      //  // Unstable assertion: assertEquals(true, noType0.isConstructor());
      //  // Unstable assertion: assertEquals(true, noType0.canBeCalled());
      //  // Unstable assertion: assertEquals(true, noType0.isNullable());
      //  // Unstable assertion: assertEquals(false, noType0.isRecordType());
      //  // Unstable assertion: assertEquals(true, noType0.matchesStringContext());
      //  // Unstable assertion: assertEquals(false, noType0.isCheckedUnknownType());
      //  // Unstable assertion: assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      //  // Unstable assertion: assertEquals(false, noType0.isNominalConstructor());
      //  // Unstable assertion: assertEquals(false, functionType0.isNominalType());
      //  // Unstable assertion: assertEquals(false, functionType0.isNoObjectType());
      //  // Unstable assertion: assertEquals(false, functionType0.isEnumElementType());
      //  // Unstable assertion: assertEquals(false, functionType0.isParameterizedType());
      //  // Unstable assertion: assertEquals(true, functionType0.isFunctionType());
      //  // Unstable assertion: assertEquals(true, functionType0.hasCachedValues());
      //  // Unstable assertion: assertEquals(false, functionType0.isResolved());
      //  // Unstable assertion: assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      //  // Unstable assertion: assertEquals(false, functionType0.isNoResolvedType());
      //  // Unstable assertion: assertEquals(false, functionType0.isNoType());
      //  // Unstable assertion: assertEquals(false, functionType0.isOrdinaryFunction());
      //  // Unstable assertion: assertEquals(false, functionType0.isStringValueType());
      //  // Unstable assertion: assertEquals(true, functionType0.isInterface());
      //  // Unstable assertion: assertEquals(true, functionType0.canBeCalled());
      //  // Unstable assertion: assertEquals(false, functionType0.isEnumType());
      //  // Unstable assertion: assertEquals(false, functionType0.isReturnTypeInferred());
      //  // Unstable assertion: assertEquals(false, functionType0.isBooleanValueType());
      //  // Unstable assertion: assertEquals(true, functionType0.hasInstanceType());
      //  // Unstable assertion: assertEquals(false, functionType0.isFunctionPrototypeType());
      //  // Unstable assertion: assertEquals(false, functionType0.isUnionType());
      //  // Unstable assertion: assertEquals(false, functionType0.isAllType());
      //  // Unstable assertion: assertEquals(false, functionType0.isNominalConstructor());
      //  // Unstable assertion: assertEquals(false, functionType0.isConstructor());
      //  // Unstable assertion: assertEquals(false, functionType0.isCheckedUnknownType());
      //  // Unstable assertion: assertEquals(false, functionType0.isVoidType());
      //  // Unstable assertion: assertEquals(0, functionType0.getExtendedInterfacesCount());
      //  // Unstable assertion: assertEquals(false, functionType0.isNullType());
      //  // Unstable assertion: assertEquals(false, functionType0.isRecordType());
      //  // Unstable assertion: assertEquals(0, functionType0.getMaxArguments());
      //  // Unstable assertion: assertEquals(false, functionType0.isTemplateType());
      //  // Unstable assertion: assertEquals(false, functionType0.isNumberValueType());
      //  // Unstable assertion: assertNotNull(string1);
      //  // Unstable assertion: assertEquals("function (this:NpaV?\\): ?", string1);
      //  // Unstable assertion: assertFalse(string1.equals((Object)string0));
      //  // Unstable assertion: assertFalse(string0.equals((Object)string1));
  }

  @Test
  public void test19()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      boolean boolean0 = false;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0, boolean0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, noResolvedType0.isTemplateType());
      assertEquals(false, noResolvedType0.isEnumElementType());
      assertEquals(false, noResolvedType0.isNominalConstructor());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertEquals(false, noResolvedType0.isParameterizedType());
      assertEquals(false, noResolvedType0.isNominalType());
      assertEquals(false, noResolvedType0.isFunctionType());
      assertEquals(true, noResolvedType0.hasInstanceType());
      assertEquals(true, noResolvedType0.matchesNumberContext());
      assertEquals(true, noResolvedType0.matchesStringContext());
      assertEquals(false, noResolvedType0.isVoidType());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noResolvedType0.isStringValueType());
      assertEquals(true, noResolvedType0.isNullable());
      assertEquals(false, noResolvedType0.isNumberValueType());
      assertEquals(false, noResolvedType0.isRecordType());
      assertEquals(true, noResolvedType0.isConstructor());
      assertEquals(false, noResolvedType0.isNullType());
      assertEquals(false, noResolvedType0.isUnionType());
      assertEquals(true, noResolvedType0.canBeCalled());
      assertEquals(false, noResolvedType0.isBooleanValueType());
      assertEquals(false, noResolvedType0.isEnumType());
      assertNull(noResolvedType0.getReferenceName());
      assertEquals(2147483647, noResolvedType0.getPropertiesCount());
      assertEquals(false, noResolvedType0.hasCachedValues());
      assertEquals(false, noResolvedType0.isCheckedUnknownType());
      assertEquals(false, noResolvedType0.isFunctionPrototypeType());
      assertEquals(false, noResolvedType0.isInterface());
      assertEquals(false, noResolvedType0.isOrdinaryFunction());
      assertEquals(true, noResolvedType0.matchesObjectContext());
      assertEquals(2147483647, noResolvedType0.getMaxArguments());
      assertEquals(false, noResolvedType0.isResolved());
      assertEquals(false, noResolvedType0.isReturnTypeInferred());
      assertEquals(false, noResolvedType0.isAllType());
      assertEquals(false, noResolvedType0.isNoObjectType());
      assertNotNull(noResolvedType0);
      
      FunctionType functionType0 = noResolvedType0.cloneWithoutArrowType();
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, functionType0.isResolved());
      assertEquals(false, functionType0.isEnumElementType());
      assertEquals(false, functionType0.isNoObjectType());
      assertEquals(false, functionType0.isEnumType());
      assertEquals(false, functionType0.isVoidType());
      assertEquals(false, functionType0.isReturnTypeInferred());
      assertEquals(false, functionType0.isNullType());
      assertEquals(false, functionType0.isBooleanValueType());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, functionType0.isUnionType());
      assertEquals(false, functionType0.isNominalConstructor());
      assertEquals(true, functionType0.isFunctionType());
      assertEquals(false, functionType0.isNoType());
      assertEquals(true, functionType0.hasInstanceType());
      assertEquals(false, functionType0.isRecordType());
      assertEquals(false, functionType0.isStringValueType());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertEquals(false, functionType0.isParameterizedType());
      assertEquals(false, functionType0.isNoResolvedType());
      assertEquals(false, functionType0.isTemplateType());
      assertEquals(false, functionType0.isAllType());
      assertEquals(true, functionType0.isConstructor());
      assertEquals(false, functionType0.isNumberValueType());
      assertEquals(2147483647, functionType0.getMaxArguments());
      assertEquals(false, functionType0.isCheckedUnknownType());
      assertEquals(false, functionType0.hasCachedValues());
      assertEquals(false, functionType0.isNominalType());
      assertEquals(true, functionType0.canBeCalled());
      assertEquals(false, functionType0.isOrdinaryFunction());
      assertEquals(false, functionType0.isInterface());
      assertEquals(false, functionType0.isFunctionPrototypeType());
      assertEquals(false, noResolvedType0.isTemplateType());
      assertEquals(false, noResolvedType0.isEnumElementType());
      assertEquals(false, noResolvedType0.isNominalConstructor());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertEquals(false, noResolvedType0.isParameterizedType());
      assertEquals(false, noResolvedType0.isNominalType());
      assertEquals(false, noResolvedType0.isFunctionType());
      assertEquals(true, noResolvedType0.hasInstanceType());
      assertEquals(true, noResolvedType0.matchesNumberContext());
      assertEquals(true, noResolvedType0.matchesStringContext());
      assertEquals(false, noResolvedType0.isVoidType());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noResolvedType0.isStringValueType());
      assertEquals(true, noResolvedType0.isNullable());
      assertEquals(false, noResolvedType0.isNumberValueType());
      assertEquals(false, noResolvedType0.isRecordType());
      assertEquals(true, noResolvedType0.isConstructor());
      assertEquals(false, noResolvedType0.isNullType());
      assertEquals(false, noResolvedType0.isUnionType());
      assertEquals(true, noResolvedType0.canBeCalled());
      assertEquals(false, noResolvedType0.isBooleanValueType());
      assertEquals(false, noResolvedType0.isEnumType());
      assertNull(noResolvedType0.getReferenceName());
      assertEquals(2147483647, noResolvedType0.getPropertiesCount());
      assertEquals(false, noResolvedType0.hasCachedValues());
      assertEquals(false, noResolvedType0.isCheckedUnknownType());
      assertEquals(false, noResolvedType0.isFunctionPrototypeType());
      assertEquals(false, noResolvedType0.isInterface());
      assertEquals(false, noResolvedType0.isOrdinaryFunction());
      assertEquals(true, noResolvedType0.matchesObjectContext());
      assertEquals(2147483647, noResolvedType0.getMaxArguments());
      assertEquals(false, noResolvedType0.isResolved());
      assertEquals(false, noResolvedType0.isReturnTypeInferred());
      assertEquals(false, noResolvedType0.isAllType());
      assertEquals(false, noResolvedType0.isNoObjectType());
      assertNotNull(functionType0);
      
      boolean boolean1 = true;
      FunctionType functionType1 = noResolvedType0.supAndInfHelper(functionType0, boolean1);
      assertNotSame(functionType1, functionType0);
      assertNotSame(functionType0, functionType1);
      assertEquals(false, functionType1.isResolved());
      assertEquals(true, functionType1.hasCachedValues());
      assertEquals(false, functionType1.isParameterizedType());
      assertEquals(false, functionType1.isNoObjectType());
      assertEquals(false, functionType1.isInterface());
      assertEquals(true, functionType1.hasInstanceType());
      assertEquals(false, functionType1.isCheckedUnknownType());
      assertEquals(true, functionType1.isNominalConstructor());
      assertEquals(false, functionType1.isEnumElementType());
      assertEquals(false, functionType1.isVoidType());
      assertEquals(false, functionType1.isOrdinaryFunction());
      assertEquals(false, functionType1.isEnumType());
      assertEquals(false, functionType1.isRecordType());
      assertEquals(false, functionType1.isAllType());
      assertEquals(false, functionType1.isUnionType());
      assertEquals(false, functionType1.isFunctionPrototypeType());
      assertEquals(false, functionType1.isTemplateType());
      assertEquals(false, functionType1.isNumberValueType());
      assertEquals(false, functionType1.isNominalType());
      assertEquals(true, functionType1.canBeCalled());
      assertEquals(false, functionType1.isReturnTypeInferred());
      assertEquals(true, functionType1.isFunctionType());
      assertEquals(BooleanLiteralSet.TRUE, functionType1.getPossibleToBooleanOutcomes());
      assertEquals(false, functionType1.isBooleanValueType());
      assertEquals(2147483647, functionType1.getMaxArguments());
      assertEquals(false, functionType1.isNullType());
      assertEquals(false, functionType1.isNoType());
      assertEquals(true, functionType1.isConstructor());
      assertEquals(0, functionType1.getExtendedInterfacesCount());
      assertEquals(false, functionType1.isStringValueType());
      assertEquals(false, functionType1.isNoResolvedType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, functionType0.isResolved());
      assertEquals(false, functionType0.isEnumElementType());
      assertEquals(false, functionType0.isNoObjectType());
      assertEquals(false, functionType0.isEnumType());
      assertEquals(false, functionType0.isVoidType());
      assertEquals(false, functionType0.isReturnTypeInferred());
      assertEquals(false, functionType0.isNullType());
      assertEquals(false, functionType0.isBooleanValueType());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, functionType0.isUnionType());
      assertEquals(false, functionType0.isNominalConstructor());
      assertEquals(true, functionType0.isFunctionType());
      assertEquals(false, functionType0.isNoType());
      assertEquals(true, functionType0.hasInstanceType());
      assertEquals(false, functionType0.isRecordType());
      assertEquals(false, functionType0.isStringValueType());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertEquals(false, functionType0.isParameterizedType());
      assertEquals(false, functionType0.isNoResolvedType());
      assertEquals(false, functionType0.isTemplateType());
      assertEquals(false, functionType0.isAllType());
      assertEquals(true, functionType0.isConstructor());
      assertEquals(false, functionType0.isNumberValueType());
      assertEquals(true, functionType0.hasCachedValues());
      assertEquals(2147483647, functionType0.getMaxArguments());
      assertEquals(false, functionType0.isCheckedUnknownType());
      assertEquals(false, functionType0.isNominalType());
      assertEquals(true, functionType0.canBeCalled());
      assertEquals(false, functionType0.isOrdinaryFunction());
      assertEquals(false, functionType0.isInterface());
      assertEquals(false, functionType0.isFunctionPrototypeType());
      assertEquals(false, noResolvedType0.isTemplateType());
      assertEquals(false, noResolvedType0.isEnumElementType());
      assertEquals(false, noResolvedType0.isNominalConstructor());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertEquals(false, noResolvedType0.isParameterizedType());
      assertEquals(false, noResolvedType0.isNominalType());
      assertEquals(false, noResolvedType0.isFunctionType());
      assertEquals(true, noResolvedType0.hasInstanceType());
      assertEquals(true, noResolvedType0.matchesNumberContext());
      assertEquals(true, noResolvedType0.matchesStringContext());
      assertEquals(false, noResolvedType0.isVoidType());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noResolvedType0.isStringValueType());
      assertEquals(true, noResolvedType0.isNullable());
      assertEquals(false, noResolvedType0.isNumberValueType());
      assertEquals(false, noResolvedType0.isRecordType());
      assertEquals(true, noResolvedType0.isConstructor());
      assertEquals(false, noResolvedType0.isNullType());
      assertEquals(false, noResolvedType0.isUnionType());
      assertEquals(true, noResolvedType0.canBeCalled());
      assertEquals(false, noResolvedType0.isBooleanValueType());
      assertEquals(false, noResolvedType0.isEnumType());
      assertNull(noResolvedType0.getReferenceName());
      assertEquals(2147483647, noResolvedType0.getPropertiesCount());
      assertEquals(true, noResolvedType0.hasCachedValues());
      assertEquals(false, noResolvedType0.isCheckedUnknownType());
      assertEquals(false, noResolvedType0.isFunctionPrototypeType());
      assertEquals(false, noResolvedType0.isInterface());
      assertEquals(false, noResolvedType0.isOrdinaryFunction());
      assertEquals(true, noResolvedType0.matchesObjectContext());
      assertEquals(2147483647, noResolvedType0.getMaxArguments());
      assertEquals(false, noResolvedType0.isResolved());
      assertEquals(false, noResolvedType0.isReturnTypeInferred());
      assertEquals(false, noResolvedType0.isAllType());
      assertEquals(false, noResolvedType0.isNoObjectType());
      assertNotNull(functionType1);
      assertFalse(boolean1 == boolean0);
      assertFalse(functionType1.equals((Object)functionType0));
      assertFalse(boolean0 == boolean1);
      assertFalse(functionType0.equals((Object)functionType1));
      
      String string0 = functionType1.toAnnotationString();
      assertNotSame(functionType1, functionType0);
      assertNotSame(functionType0, functionType1);
      assertEquals(false, functionType1.isResolved());
      assertEquals(true, functionType1.hasCachedValues());
      assertEquals(false, functionType1.isParameterizedType());
      assertEquals(false, functionType1.isNoObjectType());
      assertEquals(false, functionType1.isInterface());
      assertEquals(true, functionType1.hasInstanceType());
      assertEquals(false, functionType1.isCheckedUnknownType());
      assertEquals(true, functionType1.isNominalConstructor());
      assertEquals(false, functionType1.isEnumElementType());
      assertEquals(false, functionType1.isVoidType());
      assertEquals(false, functionType1.isOrdinaryFunction());
      assertEquals(false, functionType1.isEnumType());
      assertEquals(false, functionType1.isRecordType());
      assertEquals(false, functionType1.isAllType());
      assertEquals(false, functionType1.isUnionType());
      assertEquals(false, functionType1.isFunctionPrototypeType());
      assertEquals(false, functionType1.isTemplateType());
      assertEquals(false, functionType1.isNumberValueType());
      assertEquals(false, functionType1.isNominalType());
      assertEquals(true, functionType1.canBeCalled());
      assertEquals(false, functionType1.isReturnTypeInferred());
      assertEquals(true, functionType1.isFunctionType());
      assertEquals(BooleanLiteralSet.TRUE, functionType1.getPossibleToBooleanOutcomes());
      assertEquals(false, functionType1.isBooleanValueType());
      assertEquals(2147483647, functionType1.getMaxArguments());
      assertEquals(false, functionType1.isNullType());
      assertEquals(false, functionType1.isNoType());
      assertEquals(true, functionType1.isConstructor());
      assertEquals(0, functionType1.getExtendedInterfacesCount());
      assertEquals(false, functionType1.isStringValueType());
      assertEquals(false, functionType1.isNoResolvedType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, functionType0.isResolved());
      assertEquals(false, functionType0.isEnumElementType());
      assertEquals(false, functionType0.isNoObjectType());
      assertEquals(false, functionType0.isEnumType());
      assertEquals(false, functionType0.isVoidType());
      assertEquals(false, functionType0.isReturnTypeInferred());
      assertEquals(false, functionType0.isNullType());
      assertEquals(false, functionType0.isBooleanValueType());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, functionType0.isUnionType());
      assertEquals(false, functionType0.isNominalConstructor());
      assertEquals(true, functionType0.isFunctionType());
      assertEquals(false, functionType0.isNoType());
      assertEquals(true, functionType0.hasInstanceType());
      assertEquals(false, functionType0.isRecordType());
      assertEquals(false, functionType0.isStringValueType());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertEquals(false, functionType0.isParameterizedType());
      assertEquals(false, functionType0.isNoResolvedType());
      assertEquals(false, functionType0.isTemplateType());
      assertEquals(false, functionType0.isAllType());
      assertEquals(true, functionType0.isConstructor());
      assertEquals(false, functionType0.isNumberValueType());
      assertEquals(true, functionType0.hasCachedValues());
      assertEquals(2147483647, functionType0.getMaxArguments());
      assertEquals(false, functionType0.isCheckedUnknownType());
      assertEquals(false, functionType0.isNominalType());
      assertEquals(true, functionType0.canBeCalled());
      assertEquals(false, functionType0.isOrdinaryFunction());
      assertEquals(false, functionType0.isInterface());
      assertEquals(false, functionType0.isFunctionPrototypeType());
      assertEquals(false, noResolvedType0.isTemplateType());
      assertEquals(false, noResolvedType0.isEnumElementType());
      assertEquals(false, noResolvedType0.isNominalConstructor());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertEquals(false, noResolvedType0.isParameterizedType());
      assertEquals(false, noResolvedType0.isNominalType());
      assertEquals(false, noResolvedType0.isFunctionType());
      assertEquals(true, noResolvedType0.hasInstanceType());
      assertEquals(true, noResolvedType0.matchesNumberContext());
      assertEquals(true, noResolvedType0.matchesStringContext());
      assertEquals(false, noResolvedType0.isVoidType());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noResolvedType0.isStringValueType());
      assertEquals(true, noResolvedType0.isNullable());
      assertEquals(false, noResolvedType0.isNumberValueType());
      assertEquals(false, noResolvedType0.isRecordType());
      assertEquals(true, noResolvedType0.isConstructor());
      assertEquals(false, noResolvedType0.isNullType());
      assertEquals(false, noResolvedType0.isUnionType());
      assertEquals(true, noResolvedType0.canBeCalled());
      assertEquals(false, noResolvedType0.isBooleanValueType());
      assertEquals(false, noResolvedType0.isEnumType());
      assertNull(noResolvedType0.getReferenceName());
      assertEquals(2147483647, noResolvedType0.getPropertiesCount());
      assertEquals(true, noResolvedType0.hasCachedValues());
      assertEquals(false, noResolvedType0.isCheckedUnknownType());
      assertEquals(false, noResolvedType0.isFunctionPrototypeType());
      assertEquals(false, noResolvedType0.isInterface());
      assertEquals(false, noResolvedType0.isOrdinaryFunction());
      assertEquals(true, noResolvedType0.matchesObjectContext());
      assertEquals(2147483647, noResolvedType0.getMaxArguments());
      assertEquals(false, noResolvedType0.isResolved());
      assertEquals(false, noResolvedType0.isReturnTypeInferred());
      assertEquals(false, noResolvedType0.isAllType());
      assertEquals(false, noResolvedType0.isNoObjectType());
      assertNotNull(string0);
      assertEquals("Function", string0);
      assertFalse(boolean1 == boolean0);
      assertFalse(functionType1.equals((Object)functionType0));
      assertFalse(boolean0 == boolean1);
      assertFalse(functionType0.equals((Object)functionType1));
  }

  @Test
  public void test20()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      boolean boolean0 = false;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0, boolean0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      String string0 = "dy-LTc+cK.&yC";
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, string0);
      assertEquals(false, errorFunctionType0.isVoidType());
      assertEquals(false, errorFunctionType0.isTemplateType());
      assertEquals(true, errorFunctionType0.isConstructor());
      assertEquals(false, errorFunctionType0.isEnumElementType());
      assertEquals(false, errorFunctionType0.isNumberValueType());
      assertEquals(false, errorFunctionType0.isResolved());
      assertEquals(false, errorFunctionType0.isEnumType());
      assertEquals(false, errorFunctionType0.isInterface());
      assertEquals(false, errorFunctionType0.isUnionType());
      assertEquals(false, errorFunctionType0.isNullType());
      assertEquals(false, errorFunctionType0.isNoResolvedType());
      assertEquals(false, errorFunctionType0.hasCachedValues());
      assertEquals(false, errorFunctionType0.isNoType());
      assertEquals(false, errorFunctionType0.isRecordType());
      assertEquals(true, errorFunctionType0.canBeCalled());
      assertEquals(false, errorFunctionType0.isParameterizedType());
      assertEquals(false, errorFunctionType0.isNominalType());
      assertEquals(false, errorFunctionType0.isStringValueType());
      assertEquals(true, errorFunctionType0.isNominalConstructor());
      assertEquals(false, errorFunctionType0.isReturnTypeInferred());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertEquals(true, errorFunctionType0.hasInstanceType());
      assertEquals(3, errorFunctionType0.getMaxArguments());
      assertEquals(true, errorFunctionType0.isFunctionType());
      assertEquals(false, errorFunctionType0.isBooleanValueType());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      assertEquals(false, errorFunctionType0.isNoObjectType());
      assertEquals(false, errorFunctionType0.isCheckedUnknownType());
      assertEquals(false, errorFunctionType0.isAllType());
      assertEquals(false, errorFunctionType0.isFunctionPrototypeType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(errorFunctionType0);
      
      boolean boolean1 = errorFunctionType0.makesStructs();
      assertEquals(false, errorFunctionType0.isVoidType());
      assertEquals(false, errorFunctionType0.isTemplateType());
      assertEquals(true, errorFunctionType0.isConstructor());
      assertEquals(true, errorFunctionType0.hasCachedValues());
      assertEquals(false, errorFunctionType0.isEnumElementType());
      assertEquals(false, errorFunctionType0.isNumberValueType());
      assertEquals(false, errorFunctionType0.isResolved());
      assertEquals(false, errorFunctionType0.isEnumType());
      assertEquals(false, errorFunctionType0.isInterface());
      assertEquals(false, errorFunctionType0.isUnionType());
      assertEquals(false, errorFunctionType0.isNullType());
      assertEquals(false, errorFunctionType0.isNoResolvedType());
      assertEquals(false, errorFunctionType0.isNoType());
      assertEquals(false, errorFunctionType0.isRecordType());
      assertEquals(true, errorFunctionType0.canBeCalled());
      assertEquals(false, errorFunctionType0.isParameterizedType());
      assertEquals(false, errorFunctionType0.isNominalType());
      assertEquals(false, errorFunctionType0.isStringValueType());
      assertEquals(true, errorFunctionType0.isNominalConstructor());
      assertEquals(false, errorFunctionType0.isReturnTypeInferred());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertEquals(true, errorFunctionType0.hasInstanceType());
      assertEquals(3, errorFunctionType0.getMaxArguments());
      assertEquals(true, errorFunctionType0.isFunctionType());
      assertEquals(false, errorFunctionType0.isBooleanValueType());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      assertEquals(false, errorFunctionType0.isNoObjectType());
      assertEquals(false, errorFunctionType0.isCheckedUnknownType());
      assertEquals(false, errorFunctionType0.isAllType());
      assertEquals(false, errorFunctionType0.isFunctionPrototypeType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(boolean1);
      assertTrue(boolean0 == boolean1);
      assertTrue(boolean1 == boolean0);
      
      errorFunctionType0.setInstanceType(errorFunctionType0);
      assertEquals(false, errorFunctionType0.isVoidType());
      assertEquals(false, errorFunctionType0.isTemplateType());
      assertEquals(true, errorFunctionType0.isConstructor());
      assertEquals(true, errorFunctionType0.hasCachedValues());
      assertEquals(false, errorFunctionType0.isEnumElementType());
      assertEquals(false, errorFunctionType0.isNumberValueType());
      assertEquals(false, errorFunctionType0.isResolved());
      assertEquals(false, errorFunctionType0.isEnumType());
      assertEquals(false, errorFunctionType0.isInterface());
      assertEquals(false, errorFunctionType0.isUnionType());
      assertEquals(false, errorFunctionType0.isNullType());
      assertEquals(false, errorFunctionType0.isNoResolvedType());
      assertEquals(false, errorFunctionType0.isNoType());
      assertEquals(false, errorFunctionType0.isRecordType());
      assertEquals(true, errorFunctionType0.canBeCalled());
      assertEquals(false, errorFunctionType0.isParameterizedType());
      assertEquals(false, errorFunctionType0.isNominalType());
      assertEquals(false, errorFunctionType0.isStringValueType());
      assertEquals(true, errorFunctionType0.isNominalConstructor());
      assertEquals(false, errorFunctionType0.isReturnTypeInferred());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertEquals(true, errorFunctionType0.hasInstanceType());
      assertEquals(3, errorFunctionType0.getMaxArguments());
      assertEquals(true, errorFunctionType0.isFunctionType());
      assertEquals(false, errorFunctionType0.isBooleanValueType());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      assertEquals(false, errorFunctionType0.isNoObjectType());
      assertEquals(false, errorFunctionType0.isCheckedUnknownType());
      assertEquals(false, errorFunctionType0.isAllType());
      assertEquals(false, errorFunctionType0.isFunctionPrototypeType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertTrue(boolean0 == boolean1);
      
      String string1 = errorFunctionType0.toStringHelper(boolean1);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertEquals(false, errorFunctionType0.isVoidType());
      assertEquals(false, errorFunctionType0.isTemplateType());
      assertEquals(true, errorFunctionType0.isConstructor());
      assertEquals(true, errorFunctionType0.hasCachedValues());
      assertEquals(false, errorFunctionType0.isEnumElementType());
      assertEquals(false, errorFunctionType0.isNumberValueType());
      assertEquals(false, errorFunctionType0.isResolved());
      assertEquals(false, errorFunctionType0.isEnumType());
      assertEquals(false, errorFunctionType0.isInterface());
      assertEquals(false, errorFunctionType0.isUnionType());
      assertEquals(false, errorFunctionType0.isNullType());
      assertEquals(false, errorFunctionType0.isNoResolvedType());
      assertEquals(false, errorFunctionType0.isNoType());
      assertEquals(false, errorFunctionType0.isRecordType());
      assertEquals(true, errorFunctionType0.canBeCalled());
      assertEquals(false, errorFunctionType0.isParameterizedType());
      assertEquals(false, errorFunctionType0.isNominalType());
      assertEquals(false, errorFunctionType0.isStringValueType());
      assertEquals(true, errorFunctionType0.isNominalConstructor());
      assertEquals(false, errorFunctionType0.isReturnTypeInferred());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertEquals(true, errorFunctionType0.hasInstanceType());
      assertEquals(3, errorFunctionType0.getMaxArguments());
      assertEquals(true, errorFunctionType0.isFunctionType());
      assertEquals(false, errorFunctionType0.isBooleanValueType());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      assertEquals(false, errorFunctionType0.isNoObjectType());
      assertEquals(false, errorFunctionType0.isCheckedUnknownType());
      assertEquals(false, errorFunctionType0.isAllType());
      assertEquals(false, errorFunctionType0.isFunctionPrototypeType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(string1);
      assertEquals("function (new:Function, *=, *=, *=): dy-LTc+cK.&yC", string1);
      assertTrue(boolean0 == boolean1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertTrue(boolean1 == boolean0);
  }

  @Test
  public void test21()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      String string0 = "prototype";
      boolean boolean0 = true;
      UnknownType unknownType0 = new UnknownType(jSTypeRegistry0, boolean0);
      assertEquals(false, unknownType0.isVoidType());
      assertEquals(false, unknownType0.isInterface());
      assertEquals(false, unknownType0.isUnionType());
      assertEquals(false, unknownType0.isNativeObjectType());
      assertEquals(false, unknownType0.isEnumElementType());
      assertEquals(2147483647, unknownType0.getPropertiesCount());
      assertEquals(false, unknownType0.isNoResolvedType());
      assertEquals(false, unknownType0.isAllType());
      assertEquals(false, unknownType0.isNumberValueType());
      assertEquals(false, unknownType0.hasReferenceName());
      assertEquals(true, unknownType0.isUnknownType());
      assertEquals(false, unknownType0.isNoType());
      assertEquals(false, unknownType0.isNullType());
      assertEquals("Unknown", unknownType0.getDisplayName());
      assertEquals(true, unknownType0.matchesStringContext());
      assertEquals(false, unknownType0.isParameterizedType());
      assertEquals(false, unknownType0.isStringValueType());
      assertEquals(BooleanLiteralSet.BOTH, unknownType0.getPossibleToBooleanOutcomes());
      assertEquals(false, unknownType0.hasCachedValues());
      assertEquals(false, unknownType0.isRecordType());
      assertEquals(false, unknownType0.isTemplateType());
      assertEquals(true, unknownType0.matchesObjectContext());
      assertEquals(true, unknownType0.hasDisplayName());
      assertEquals(false, unknownType0.isResolved());
      assertEquals(false, unknownType0.isEnumType());
      assertEquals(false, unknownType0.isNominalConstructor());
      assertEquals(false, unknownType0.isNominalType());
      assertEquals(false, unknownType0.isFunctionPrototypeType());
      assertEquals(false, unknownType0.isOrdinaryFunction());
      assertEquals(true, unknownType0.canBeCalled());
      assertEquals(true, unknownType0.matchesNumberContext());
      assertEquals(false, unknownType0.isNoObjectType());
      assertEquals("??", unknownType0.getReferenceName());
      assertEquals(false, unknownType0.isConstructor());
      assertEquals(true, unknownType0.isNullable());
      assertEquals(true, unknownType0.isCheckedUnknownType());
      assertEquals(false, unknownType0.isFunctionType());
      assertEquals(false, unknownType0.isBooleanValueType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(unknownType0);
      
      Node node0 = unknownType0.getRootNode();
      assertEquals(false, unknownType0.isVoidType());
      assertEquals(false, unknownType0.isInterface());
      assertEquals(false, unknownType0.isUnionType());
      assertEquals(false, unknownType0.isNativeObjectType());
      assertEquals(false, unknownType0.isEnumElementType());
      assertEquals(2147483647, unknownType0.getPropertiesCount());
      assertEquals(false, unknownType0.isNoResolvedType());
      assertEquals(false, unknownType0.isAllType());
      assertEquals(false, unknownType0.isNumberValueType());
      assertEquals(false, unknownType0.hasReferenceName());
      assertEquals(true, unknownType0.isUnknownType());
      assertEquals(false, unknownType0.isNoType());
      assertEquals(false, unknownType0.isNullType());
      assertEquals("Unknown", unknownType0.getDisplayName());
      assertEquals(true, unknownType0.matchesStringContext());
      assertEquals(false, unknownType0.isParameterizedType());
      assertEquals(false, unknownType0.isStringValueType());
      assertEquals(BooleanLiteralSet.BOTH, unknownType0.getPossibleToBooleanOutcomes());
      assertEquals(false, unknownType0.hasCachedValues());
      assertEquals(false, unknownType0.isRecordType());
      assertEquals(false, unknownType0.isTemplateType());
      assertEquals(true, unknownType0.matchesObjectContext());
      assertEquals(true, unknownType0.hasDisplayName());
      assertEquals(false, unknownType0.isResolved());
      assertEquals(false, unknownType0.isEnumType());
      assertEquals(false, unknownType0.isNominalConstructor());
      assertEquals(false, unknownType0.isNominalType());
      assertEquals(false, unknownType0.isFunctionPrototypeType());
      assertEquals(false, unknownType0.isOrdinaryFunction());
      assertEquals(true, unknownType0.canBeCalled());
      assertEquals(true, unknownType0.matchesNumberContext());
      assertEquals(false, unknownType0.isNoObjectType());
      assertEquals("??", unknownType0.getReferenceName());
      assertEquals(false, unknownType0.isConstructor());
      assertEquals(true, unknownType0.isNullable());
      assertEquals(true, unknownType0.isCheckedUnknownType());
      assertEquals(false, unknownType0.isFunctionType());
      assertEquals(false, unknownType0.isBooleanValueType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNull(node0);
      
      FunctionType functionType0 = FunctionType.forInterface(jSTypeRegistry0, string0, node0);
      assertEquals(false, functionType0.isParameterizedType());
      assertEquals(false, functionType0.isCheckedUnknownType());
      assertEquals(false, functionType0.isNoResolvedType());
      assertEquals(false, functionType0.isUnionType());
      assertEquals(false, functionType0.isNominalType());
      assertEquals(false, functionType0.isEnumType());
      assertEquals(false, functionType0.isStringValueType());
      assertEquals(true, functionType0.isFunctionType());
      assertEquals(false, functionType0.isConstructor());
      assertEquals(false, functionType0.isBooleanValueType());
      assertEquals(false, functionType0.isFunctionPrototypeType());
      assertEquals(false, functionType0.isNumberValueType());
      assertEquals(true, functionType0.hasInstanceType());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertEquals(false, functionType0.isNullType());
      assertEquals(false, functionType0.isNoObjectType());
      assertEquals(false, functionType0.isNominalConstructor());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, functionType0.isEnumElementType());
      assertEquals(false, functionType0.isOrdinaryFunction());
      assertEquals(false, functionType0.isResolved());
      assertEquals(false, functionType0.isNoType());
      assertEquals(0, functionType0.getMaxArguments());
      assertEquals(false, functionType0.hasCachedValues());
      assertEquals(false, functionType0.isReturnTypeInferred());
      assertEquals(true, functionType0.isInterface());
      assertEquals(false, functionType0.isTemplateType());
      assertEquals(false, functionType0.isVoidType());
      assertEquals(false, functionType0.isAllType());
      assertEquals(false, functionType0.isRecordType());
      assertEquals(true, functionType0.canBeCalled());
      assertEquals(false, unknownType0.isVoidType());
      assertEquals(false, unknownType0.isInterface());
      assertEquals(false, unknownType0.isUnionType());
      assertEquals(false, unknownType0.isNativeObjectType());
      assertEquals(false, unknownType0.isEnumElementType());
      assertEquals(2147483647, unknownType0.getPropertiesCount());
      assertEquals(false, unknownType0.isNoResolvedType());
      assertEquals(false, unknownType0.isAllType());
      assertEquals(false, unknownType0.isNumberValueType());
      assertEquals(false, unknownType0.hasReferenceName());
      assertEquals(true, unknownType0.isUnknownType());
      assertEquals(false, unknownType0.isNoType());
      assertEquals(false, unknownType0.isNullType());
      assertEquals("Unknown", unknownType0.getDisplayName());
      assertEquals(true, unknownType0.matchesStringContext());
      assertEquals(false, unknownType0.isParameterizedType());
      assertEquals(false, unknownType0.isStringValueType());
      assertEquals(BooleanLiteralSet.BOTH, unknownType0.getPossibleToBooleanOutcomes());
      assertEquals(false, unknownType0.hasCachedValues());
      assertEquals(false, unknownType0.isRecordType());
      assertEquals(false, unknownType0.isTemplateType());
      assertEquals(true, unknownType0.matchesObjectContext());
      assertEquals(true, unknownType0.hasDisplayName());
      assertEquals(false, unknownType0.isResolved());
      assertEquals(false, unknownType0.isEnumType());
      assertEquals(false, unknownType0.isNominalConstructor());
      assertEquals(false, unknownType0.isNominalType());
      assertEquals(false, unknownType0.isFunctionPrototypeType());
      assertEquals(false, unknownType0.isOrdinaryFunction());
      assertEquals(true, unknownType0.canBeCalled());
      assertEquals(true, unknownType0.matchesNumberContext());
      assertEquals(false, unknownType0.isNoObjectType());
      assertEquals("??", unknownType0.getReferenceName());
      assertEquals(false, unknownType0.isConstructor());
      assertEquals(true, unknownType0.isNullable());
      assertEquals(true, unknownType0.isCheckedUnknownType());
      assertEquals(false, unknownType0.isFunctionType());
      assertEquals(false, unknownType0.isBooleanValueType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(functionType0);
      
      int int0 = functionType0.hashCode();
      assertEquals(false, functionType0.isParameterizedType());
      assertEquals(false, functionType0.isCheckedUnknownType());
      assertEquals(false, functionType0.isNoResolvedType());
      assertEquals(false, functionType0.isUnionType());
      assertEquals(false, functionType0.isNominalType());
      assertEquals(false, functionType0.isEnumType());
      assertEquals(false, functionType0.isStringValueType());
      assertEquals(true, functionType0.isFunctionType());
      assertEquals(false, functionType0.isConstructor());
      assertEquals(false, functionType0.isBooleanValueType());
      assertEquals(false, functionType0.isFunctionPrototypeType());
      assertEquals(false, functionType0.isNumberValueType());
      assertEquals(true, functionType0.hasInstanceType());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertEquals(false, functionType0.isNullType());
      assertEquals(false, functionType0.isNoObjectType());
      assertEquals(false, functionType0.isNominalConstructor());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, functionType0.isEnumElementType());
      assertEquals(false, functionType0.isOrdinaryFunction());
      assertEquals(false, functionType0.isResolved());
      assertEquals(false, functionType0.isNoType());
      assertEquals(0, functionType0.getMaxArguments());
      assertEquals(false, functionType0.hasCachedValues());
      assertEquals(false, functionType0.isReturnTypeInferred());
      assertEquals(true, functionType0.isInterface());
      assertEquals(false, functionType0.isTemplateType());
      assertEquals(false, functionType0.isVoidType());
      assertEquals(false, functionType0.isAllType());
      assertEquals(false, functionType0.isRecordType());
      assertEquals(true, functionType0.canBeCalled());
      assertEquals(false, unknownType0.isVoidType());
      assertEquals(false, unknownType0.isInterface());
      assertEquals(false, unknownType0.isUnionType());
      assertEquals(false, unknownType0.isNativeObjectType());
      assertEquals(false, unknownType0.isEnumElementType());
      assertEquals(2147483647, unknownType0.getPropertiesCount());
      assertEquals(false, unknownType0.isNoResolvedType());
      assertEquals(false, unknownType0.isAllType());
      assertEquals(false, unknownType0.isNumberValueType());
      assertEquals(false, unknownType0.hasReferenceName());
      assertEquals(true, unknownType0.isUnknownType());
      assertEquals(false, unknownType0.isNoType());
      assertEquals(false, unknownType0.isNullType());
      assertEquals("Unknown", unknownType0.getDisplayName());
      assertEquals(true, unknownType0.matchesStringContext());
      assertEquals(false, unknownType0.isParameterizedType());
      assertEquals(false, unknownType0.isStringValueType());
      assertEquals(BooleanLiteralSet.BOTH, unknownType0.getPossibleToBooleanOutcomes());
      assertEquals(false, unknownType0.hasCachedValues());
      assertEquals(false, unknownType0.isRecordType());
      assertEquals(false, unknownType0.isTemplateType());
      assertEquals(true, unknownType0.matchesObjectContext());
      assertEquals(true, unknownType0.hasDisplayName());
      assertEquals(false, unknownType0.isResolved());
      assertEquals(false, unknownType0.isEnumType());
      assertEquals(false, unknownType0.isNominalConstructor());
      assertEquals(false, unknownType0.isNominalType());
      assertEquals(false, unknownType0.isFunctionPrototypeType());
      assertEquals(false, unknownType0.isOrdinaryFunction());
      assertEquals(true, unknownType0.canBeCalled());
      assertEquals(true, unknownType0.matchesNumberContext());
      assertEquals(false, unknownType0.isNoObjectType());
      assertEquals("??", unknownType0.getReferenceName());
      assertEquals(false, unknownType0.isConstructor());
      assertEquals(true, unknownType0.isNullable());
      assertEquals(true, unknownType0.isCheckedUnknownType());
      assertEquals(false, unknownType0.isFunctionType());
      assertEquals(false, unknownType0.isBooleanValueType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals((-598792926), int0);
  }

  @Test
  public void test22() {}
//   @Test
//   public void test22()  throws Throwable  {
//       SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
//       assertNotNull(simpleErrorReporter0);
//       
//       String string0 = "";
//       boolean boolean0 = false;
//       JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0, boolean0);
//       assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
//       assertNotNull(jSTypeRegistry0);
//       
//       ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, string0);
//       assertEquals(false, errorFunctionType0.isNoResolvedType());
//       assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
//       assertEquals(false, errorFunctionType0.isVoidType());
//       assertEquals(false, errorFunctionType0.isEnumType());
//       assertEquals(false, errorFunctionType0.isBooleanValueType());
//       assertEquals(false, errorFunctionType0.hasCachedValues());
//       assertEquals(false, errorFunctionType0.isNullType());
//       assertEquals(false, errorFunctionType0.isOrdinaryFunction());
//       assertEquals(false, errorFunctionType0.isNumberValueType());
//       assertEquals(false, errorFunctionType0.isNominalType());
//       assertEquals(3, errorFunctionType0.getMaxArguments());
//       assertEquals(false, errorFunctionType0.isNoObjectType());
//       assertEquals(false, errorFunctionType0.isAllType());
//       assertEquals(false, errorFunctionType0.isUnionType());
//       assertEquals(false, errorFunctionType0.isStringValueType());
//       assertEquals(true, errorFunctionType0.isNominalConstructor());
//       assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
//       assertEquals(false, errorFunctionType0.isEnumElementType());
//       assertEquals(true, errorFunctionType0.canBeCalled());
//       assertEquals(false, errorFunctionType0.isTemplateType());
//       assertEquals(true, errorFunctionType0.isFunctionType());
//       assertEquals(false, errorFunctionType0.isRecordType());
//       assertEquals(true, errorFunctionType0.hasInstanceType());
//       assertEquals(false, errorFunctionType0.isReturnTypeInferred());
//       assertEquals(false, errorFunctionType0.isParameterizedType());
//       assertEquals(false, errorFunctionType0.isInterface());
//       assertEquals(true, errorFunctionType0.isConstructor());
//       assertEquals(false, errorFunctionType0.isNoType());
//       assertEquals(false, errorFunctionType0.isCheckedUnknownType());
//       assertEquals(false, errorFunctionType0.isResolved());
//       assertEquals(false, errorFunctionType0.isFunctionPrototypeType());
//       assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
//       assertNotNull(errorFunctionType0);
//       
//       int int0 = errorFunctionType0.hashCode();
//       assertEquals(false, errorFunctionType0.isNoResolvedType());
//       assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
//       assertEquals(false, errorFunctionType0.isVoidType());
//       assertEquals(false, errorFunctionType0.isEnumType());
//       assertEquals(false, errorFunctionType0.isBooleanValueType());
//       assertEquals(false, errorFunctionType0.hasCachedValues());
//       assertEquals(false, errorFunctionType0.isNullType());
//       assertEquals(false, errorFunctionType0.isOrdinaryFunction());
//       assertEquals(false, errorFunctionType0.isNumberValueType());
//       assertEquals(false, errorFunctionType0.isNominalType());
//       assertEquals(3, errorFunctionType0.getMaxArguments());
//       assertEquals(false, errorFunctionType0.isNoObjectType());
//       assertEquals(false, errorFunctionType0.isAllType());
//       assertEquals(false, errorFunctionType0.isUnionType());
//       assertEquals(false, errorFunctionType0.isStringValueType());
//       assertEquals(true, errorFunctionType0.isNominalConstructor());
//       assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
//       assertEquals(false, errorFunctionType0.isEnumElementType());
//       assertEquals(true, errorFunctionType0.canBeCalled());
//       assertEquals(false, errorFunctionType0.isTemplateType());
//       assertEquals(true, errorFunctionType0.isFunctionType());
//       assertEquals(false, errorFunctionType0.isRecordType());
//       assertEquals(true, errorFunctionType0.hasInstanceType());
//       assertEquals(false, errorFunctionType0.isReturnTypeInferred());
//       assertEquals(false, errorFunctionType0.isParameterizedType());
//       assertEquals(false, errorFunctionType0.isInterface());
//       assertEquals(true, errorFunctionType0.isConstructor());
//       assertEquals(false, errorFunctionType0.isNoType());
//       assertEquals(false, errorFunctionType0.isCheckedUnknownType());
//       assertEquals(false, errorFunctionType0.isResolved());
//       assertEquals(false, errorFunctionType0.isFunctionPrototypeType());
//       assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
//       assertEquals(39, int0);
//   }

  @Test
  public void test23()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      boolean boolean0 = false;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0, boolean0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      JSTypeNative[] jSTypeNativeArray0 = new JSTypeNative[9];
      JSTypeNative jSTypeNative0 = JSTypeNative.RANGE_ERROR_FUNCTION_TYPE;
      jSTypeNativeArray0[0] = jSTypeNative0;
      assertEquals("RANGE_ERROR_FUNCTION_TYPE", jSTypeNativeArray0[0].name());
      assertEquals(22, jSTypeNativeArray0[0].ordinal());
      assertEquals("RANGE_ERROR_FUNCTION_TYPE", jSTypeNativeArray0[0].toString());
      
      jSTypeNativeArray0[1] = jSTypeNative0;
      assertEquals("RANGE_ERROR_FUNCTION_TYPE", jSTypeNativeArray0[1].name());
      assertEquals(22, jSTypeNativeArray0[1].ordinal());
      assertEquals("RANGE_ERROR_FUNCTION_TYPE", jSTypeNativeArray0[1].toString());
      
      jSTypeNativeArray0[2] = jSTypeNativeArray0[0];
      assertEquals("RANGE_ERROR_FUNCTION_TYPE", jSTypeNativeArray0[2].toString());
      assertEquals("RANGE_ERROR_FUNCTION_TYPE", jSTypeNativeArray0[2].name());
      assertEquals(22, jSTypeNativeArray0[2].ordinal());
      
      JSTypeNative jSTypeNative1 = JSTypeNative.LEAST_FUNCTION_TYPE;
      assertNotSame(jSTypeNative1, jSTypeNative0);
      
      jSTypeNativeArray0[3] = jSTypeNative1;
      assertEquals(49, jSTypeNativeArray0[3].ordinal());
      assertEquals("LEAST_FUNCTION_TYPE", jSTypeNativeArray0[3].name());
      assertEquals("LEAST_FUNCTION_TYPE", jSTypeNativeArray0[3].toString());
      
      jSTypeNativeArray0[4] = jSTypeNativeArray0[3];
      assertEquals("LEAST_FUNCTION_TYPE", jSTypeNativeArray0[4].toString());
      assertEquals("LEAST_FUNCTION_TYPE", jSTypeNativeArray0[4].name());
      assertEquals(49, jSTypeNativeArray0[4].ordinal());
      
      // Undeclared exception!
      try {
        JSType jSType0 = jSTypeRegistry0.createUnionType(jSTypeNativeArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test24()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      boolean boolean0 = false;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0, boolean0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      JSTypeNative[] jSTypeNativeArray0 = new JSTypeNative[9];
      JSTypeNative jSTypeNative0 = JSTypeNative.RANGE_ERROR_FUNCTION_TYPE;
      jSTypeNativeArray0[0] = jSTypeNative0;
      assertEquals(22, jSTypeNativeArray0[0].ordinal());
      assertEquals("RANGE_ERROR_FUNCTION_TYPE", jSTypeNativeArray0[0].toString());
      assertEquals("RANGE_ERROR_FUNCTION_TYPE", jSTypeNativeArray0[0].name());
      
      jSTypeNativeArray0[1] = jSTypeNativeArray0[0];
      assertEquals("RANGE_ERROR_FUNCTION_TYPE", jSTypeNativeArray0[1].toString());
      assertEquals(22, jSTypeNativeArray0[1].ordinal());
      assertEquals("RANGE_ERROR_FUNCTION_TYPE", jSTypeNativeArray0[1].name());
      
      jSTypeNativeArray0[2] = jSTypeNative0;
      assertEquals(22, jSTypeNativeArray0[2].ordinal());
      assertEquals("RANGE_ERROR_FUNCTION_TYPE", jSTypeNativeArray0[2].toString());
      assertEquals("RANGE_ERROR_FUNCTION_TYPE", jSTypeNativeArray0[2].name());
      
      JSTypeNative jSTypeNative1 = JSTypeNative.U2U_FUNCTION_TYPE;
      assertNotSame(jSTypeNative1, jSTypeNative0);
      
      jSTypeNativeArray0[3] = jSTypeNative1;
      assertEquals("U2U_FUNCTION_TYPE", jSTypeNativeArray0[3].toString());
      assertEquals("U2U_FUNCTION_TYPE", jSTypeNativeArray0[3].name());
      assertEquals(48, jSTypeNativeArray0[3].ordinal());
      
      jSTypeNativeArray0[4] = jSTypeNativeArray0[1];
      assertEquals("RANGE_ERROR_FUNCTION_TYPE", jSTypeNativeArray0[4].name());
      assertEquals(22, jSTypeNativeArray0[4].ordinal());
      assertEquals("RANGE_ERROR_FUNCTION_TYPE", jSTypeNativeArray0[4].toString());
      
      jSTypeNativeArray0[5] = jSTypeNativeArray0[0];
      assertEquals(22, jSTypeNativeArray0[5].ordinal());
      assertEquals("RANGE_ERROR_FUNCTION_TYPE", jSTypeNativeArray0[5].name());
      assertEquals("RANGE_ERROR_FUNCTION_TYPE", jSTypeNativeArray0[5].toString());
      
      jSTypeNativeArray0[6] = jSTypeNativeArray0[0];
      assertEquals("RANGE_ERROR_FUNCTION_TYPE", jSTypeNativeArray0[6].toString());
      assertEquals("RANGE_ERROR_FUNCTION_TYPE", jSTypeNativeArray0[6].name());
      assertEquals(22, jSTypeNativeArray0[6].ordinal());
      
      jSTypeNativeArray0[7] = jSTypeNativeArray0[3];
      assertEquals("U2U_FUNCTION_TYPE", jSTypeNativeArray0[7].toString());
      assertEquals("U2U_FUNCTION_TYPE", jSTypeNativeArray0[7].name());
      assertEquals(48, jSTypeNativeArray0[7].ordinal());
      
      // Undeclared exception!
      try {
        JSType jSType0 = jSTypeRegistry0.createUnionType(jSTypeNativeArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test25()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      //  // Unstable assertion: assertNotNull(simpleErrorReporter0);
      
      boolean boolean0 = true;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0, boolean0);
      //  // Unstable assertion: assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      //  // Unstable assertion: assertNotNull(jSTypeRegistry0);
      
      String string0 = "NpaV?\\";
      NoType noType0 = new NoType(jSTypeRegistry0);
      //  // Unstable assertion: assertEquals(false, noType0.isOrdinaryFunction());
      //  // Unstable assertion: assertEquals(false, noType0.hasCachedValues());
      //  // Unstable assertion: assertEquals(false, noType0.isReturnTypeInferred());
      //  // Unstable assertion: assertEquals(false, noType0.isNoObjectType());
      //  // Unstable assertion: assertEquals(true, noType0.isConstructor());
      //  // Unstable assertion: assertEquals(2147483647, noType0.getPropertiesCount());
      //  // Unstable assertion: assertEquals(false, noType0.isEnumElementType());
      //  // Unstable assertion: assertEquals(false, noType0.isBooleanValueType());
      //  // Unstable assertion: assertEquals(true, noType0.canBeCalled());
      //  // Unstable assertion: assertEquals(true, noType0.matchesObjectContext());
      //  // Unstable assertion: assertEquals(false, noType0.isNoResolvedType());
      //  // Unstable assertion: assertEquals(false, noType0.isTemplateType());
      //  // Unstable assertion: assertEquals(true, noType0.isNullable());
      //  // Unstable assertion: assertEquals(false, noType0.isEnumType());
      //  // Unstable assertion: assertEquals(true, noType0.matchesNumberContext());
      //  // Unstable assertion: assertEquals(false, noType0.isNominalConstructor());
      //  // Unstable assertion: assertEquals(false, noType0.isCheckedUnknownType());
      //  // Unstable assertion: assertEquals(true, noType0.hasInstanceType());
      //  // Unstable assertion: assertEquals(0, noType0.getExtendedInterfacesCount());
      //  // Unstable assertion: assertEquals(false, noType0.isNumberValueType());
      //  // Unstable assertion: assertEquals(false, noType0.isNominalType());
      //  // Unstable assertion: assertEquals(false, noType0.isRecordType());
      //  // Unstable assertion: assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      //  // Unstable assertion: assertEquals(true, noType0.isNoType());
      //  // Unstable assertion: assertEquals(true, noType0.matchesStringContext());
      //  // Unstable assertion: assertEquals(false, noType0.isNullType());
      //  // Unstable assertion: assertEquals(false, noType0.isFunctionPrototypeType());
      //  // Unstable assertion: assertEquals(false, noType0.isInterface());
      //  // Unstable assertion: assertEquals(false, noType0.isVoidType());
      //  // Unstable assertion: assertEquals(false, noType0.isResolved());
      //  // Unstable assertion: assertEquals(2147483647, noType0.getMaxArguments());
      //  // Unstable assertion: assertEquals(false, noType0.isParameterizedType());
      //  // Unstable assertion: assertEquals(false, noType0.isUnionType());
      //  // Unstable assertion: assertEquals(false, noType0.isStringValueType());
      //  // Unstable assertion: assertEquals(false, noType0.isAllType());
      //  // Unstable assertion: assertNull(noType0.getReferenceName());
      //  // Unstable assertion: assertEquals(false, noType0.isFunctionType());
      //  // Unstable assertion: assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      //  // Unstable assertion: assertNotNull(noType0);
      
      Node node0 = noType0.getRootNode();
      //  // Unstable assertion: assertEquals(false, noType0.isOrdinaryFunction());
      //  // Unstable assertion: assertEquals(false, noType0.hasCachedValues());
      //  // Unstable assertion: assertEquals(false, noType0.isReturnTypeInferred());
      //  // Unstable assertion: assertEquals(false, noType0.isNoObjectType());
      //  // Unstable assertion: assertEquals(true, noType0.isConstructor());
      //  // Unstable assertion: assertEquals(2147483647, noType0.getPropertiesCount());
      //  // Unstable assertion: assertEquals(false, noType0.isEnumElementType());
      //  // Unstable assertion: assertEquals(false, noType0.isBooleanValueType());
      //  // Unstable assertion: assertEquals(true, noType0.canBeCalled());
      //  // Unstable assertion: assertEquals(true, noType0.matchesObjectContext());
      //  // Unstable assertion: assertEquals(false, noType0.isNoResolvedType());
      //  // Unstable assertion: assertEquals(false, noType0.isTemplateType());
      //  // Unstable assertion: assertEquals(true, noType0.isNullable());
      //  // Unstable assertion: assertEquals(false, noType0.isEnumType());
      //  // Unstable assertion: assertEquals(true, noType0.matchesNumberContext());
      //  // Unstable assertion: assertEquals(false, noType0.isNominalConstructor());
      //  // Unstable assertion: assertEquals(false, noType0.isCheckedUnknownType());
      //  // Unstable assertion: assertEquals(true, noType0.hasInstanceType());
      //  // Unstable assertion: assertEquals(0, noType0.getExtendedInterfacesCount());
      //  // Unstable assertion: assertEquals(false, noType0.isNumberValueType());
      //  // Unstable assertion: assertEquals(false, noType0.isNominalType());
      //  // Unstable assertion: assertEquals(false, noType0.isRecordType());
      //  // Unstable assertion: assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      //  // Unstable assertion: assertEquals(true, noType0.isNoType());
      //  // Unstable assertion: assertEquals(true, noType0.matchesStringContext());
      //  // Unstable assertion: assertEquals(false, noType0.isNullType());
      //  // Unstable assertion: assertEquals(false, noType0.isFunctionPrototypeType());
      //  // Unstable assertion: assertEquals(false, noType0.isInterface());
      //  // Unstable assertion: assertEquals(false, noType0.isVoidType());
      //  // Unstable assertion: assertEquals(false, noType0.isResolved());
      //  // Unstable assertion: assertEquals(2147483647, noType0.getMaxArguments());
      //  // Unstable assertion: assertEquals(false, noType0.isParameterizedType());
      //  // Unstable assertion: assertEquals(false, noType0.isUnionType());
      //  // Unstable assertion: assertEquals(false, noType0.isStringValueType());
      //  // Unstable assertion: assertEquals(false, noType0.isAllType());
      //  // Unstable assertion: assertNull(noType0.getReferenceName());
      //  // Unstable assertion: assertEquals(false, noType0.isFunctionType());
      //  // Unstable assertion: assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      //  // Unstable assertion: assertNull(node0);
      
      FunctionType functionType0 = FunctionType.forInterface(jSTypeRegistry0, string0, node0);
      //  // Unstable assertion: assertEquals(false, noType0.isOrdinaryFunction());
      //  // Unstable assertion: assertEquals(false, noType0.hasCachedValues());
      //  // Unstable assertion: assertEquals(false, noType0.isReturnTypeInferred());
      //  // Unstable assertion: assertEquals(false, noType0.isNoObjectType());
      //  // Unstable assertion: assertEquals(true, noType0.isConstructor());
      //  // Unstable assertion: assertEquals(2147483647, noType0.getPropertiesCount());
      //  // Unstable assertion: assertEquals(false, noType0.isEnumElementType());
      //  // Unstable assertion: assertEquals(false, noType0.isBooleanValueType());
      //  // Unstable assertion: assertEquals(true, noType0.canBeCalled());
      //  // Unstable assertion: assertEquals(true, noType0.matchesObjectContext());
      //  // Unstable assertion: assertEquals(false, noType0.isNoResolvedType());
      //  // Unstable assertion: assertEquals(false, noType0.isTemplateType());
      //  // Unstable assertion: assertEquals(true, noType0.isNullable());
      //  // Unstable assertion: assertEquals(false, noType0.isEnumType());
      //  // Unstable assertion: assertEquals(true, noType0.matchesNumberContext());
      //  // Unstable assertion: assertEquals(false, noType0.isNominalConstructor());
      //  // Unstable assertion: assertEquals(false, noType0.isCheckedUnknownType());
      //  // Unstable assertion: assertEquals(true, noType0.hasInstanceType());
      //  // Unstable assertion: assertEquals(0, noType0.getExtendedInterfacesCount());
      //  // Unstable assertion: assertEquals(false, noType0.isNumberValueType());
      //  // Unstable assertion: assertEquals(false, noType0.isNominalType());
      //  // Unstable assertion: assertEquals(false, noType0.isRecordType());
      //  // Unstable assertion: assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      //  // Unstable assertion: assertEquals(true, noType0.isNoType());
      //  // Unstable assertion: assertEquals(true, noType0.matchesStringContext());
      //  // Unstable assertion: assertEquals(false, noType0.isNullType());
      //  // Unstable assertion: assertEquals(false, noType0.isFunctionPrototypeType());
      //  // Unstable assertion: assertEquals(false, noType0.isInterface());
      //  // Unstable assertion: assertEquals(false, noType0.isVoidType());
      //  // Unstable assertion: assertEquals(false, noType0.isResolved());
      //  // Unstable assertion: assertEquals(2147483647, noType0.getMaxArguments());
      //  // Unstable assertion: assertEquals(false, noType0.isParameterizedType());
      //  // Unstable assertion: assertEquals(false, noType0.isUnionType());
      //  // Unstable assertion: assertEquals(false, noType0.isStringValueType());
      //  // Unstable assertion: assertEquals(false, noType0.isAllType());
      //  // Unstable assertion: assertNull(noType0.getReferenceName());
      //  // Unstable assertion: assertEquals(false, noType0.isFunctionType());
      //  // Unstable assertion: assertEquals(false, functionType0.isStringValueType());
      //  // Unstable assertion: assertEquals(false, functionType0.isCheckedUnknownType());
      //  // Unstable assertion: assertEquals(false, functionType0.isNoResolvedType());
      //  // Unstable assertion: assertEquals(false, functionType0.isAllType());
      //  // Unstable assertion: assertEquals(true, functionType0.canBeCalled());
      //  // Unstable assertion: assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      //  // Unstable assertion: assertEquals(false, functionType0.isTemplateType());
      //  // Unstable assertion: assertEquals(false, functionType0.isNoObjectType());
      //  // Unstable assertion: assertEquals(0, functionType0.getExtendedInterfacesCount());
      //  // Unstable assertion: assertEquals(false, functionType0.isNumberValueType());
      //  // Unstable assertion: assertEquals(false, functionType0.isBooleanValueType());
      //  // Unstable assertion: assertEquals(true, functionType0.hasInstanceType());
      //  // Unstable assertion: assertEquals(false, functionType0.isReturnTypeInferred());
      //  // Unstable assertion: assertEquals(false, functionType0.isNominalType());
      //  // Unstable assertion: assertEquals(false, functionType0.isResolved());
      //  // Unstable assertion: assertEquals(false, functionType0.isConstructor());
      //  // Unstable assertion: assertEquals(false, functionType0.isEnumElementType());
      //  // Unstable assertion: assertEquals(false, functionType0.isVoidType());
      //  // Unstable assertion: assertEquals(0, functionType0.getMaxArguments());
      //  // Unstable assertion: assertEquals(false, functionType0.isEnumType());
      //  // Unstable assertion: assertEquals(false, functionType0.isRecordType());
      //  // Unstable assertion: assertEquals(false, functionType0.isUnionType());
      //  // Unstable assertion: assertEquals(false, functionType0.isNominalConstructor());
      //  // Unstable assertion: assertEquals(true, functionType0.isFunctionType());
      //  // Unstable assertion: assertEquals(false, functionType0.isNoType());
      //  // Unstable assertion: assertEquals(false, functionType0.isNullType());
      //  // Unstable assertion: assertEquals(true, functionType0.isInterface());
      //  // Unstable assertion: assertEquals(false, functionType0.isOrdinaryFunction());
      //  // Unstable assertion: assertEquals(false, functionType0.hasCachedValues());
      //  // Unstable assertion: assertEquals(false, functionType0.isFunctionPrototypeType());
      //  // Unstable assertion: assertEquals(false, functionType0.isParameterizedType());
      //  // Unstable assertion: assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      //  // Unstable assertion: assertNotNull(functionType0);
      
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      //  // Unstable assertion: assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      //  // Unstable assertion: assertEquals(true, noResolvedType0.isNullable());
      //  // Unstable assertion: assertEquals(false, noResolvedType0.isOrdinaryFunction());
      //  // Unstable assertion: assertEquals(false, noResolvedType0.isResolved());
      //  // Unstable assertion: assertEquals(false, noResolvedType0.isNoObjectType());
      //  // Unstable assertion: assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      //  // Unstable assertion: assertEquals(false, noResolvedType0.isNullType());
      //  // Unstable assertion: assertEquals(true, noResolvedType0.matchesObjectContext());
      //  // Unstable assertion: assertEquals(false, noResolvedType0.isNumberValueType());
      //  // Unstable assertion: assertEquals(false, noResolvedType0.hasCachedValues());
      //  // Unstable assertion: assertEquals(false, noResolvedType0.isEnumType());
      //  // Unstable assertion: assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      //  // Unstable assertion: assertEquals(false, noResolvedType0.isInterface());
      //  // Unstable assertion: assertEquals(false, noResolvedType0.isUnionType());
      //  // Unstable assertion: assertNull(noResolvedType0.getReferenceName());
      //  // Unstable assertion: assertEquals(true, noResolvedType0.canBeCalled());
      //  // Unstable assertion: assertEquals(false, noResolvedType0.isFunctionType());
      //  // Unstable assertion: assertEquals(false, noResolvedType0.isTemplateType());
      //  // Unstable assertion: assertEquals(true, noResolvedType0.matchesStringContext());
      //  // Unstable assertion: assertEquals(true, noResolvedType0.hasInstanceType());
      //  // Unstable assertion: assertEquals(false, noResolvedType0.isEnumElementType());
      //  // Unstable assertion: assertEquals(true, noResolvedType0.isConstructor());
      //  // Unstable assertion: assertEquals(true, noResolvedType0.matchesNumberContext());
      //  // Unstable assertion: assertEquals(false, noResolvedType0.isAllType());
      //  // Unstable assertion: assertEquals(false, noResolvedType0.isParameterizedType());
      //  // Unstable assertion: assertEquals(false, noResolvedType0.isNominalType());
      //  // Unstable assertion: assertEquals(false, noResolvedType0.isFunctionPrototypeType());
      //  // Unstable assertion: assertEquals(2147483647, noResolvedType0.getPropertiesCount());
      //  // Unstable assertion: assertEquals(false, noResolvedType0.isNominalConstructor());
      //  // Unstable assertion: assertEquals(false, noResolvedType0.isRecordType());
      //  // Unstable assertion: assertEquals(false, noResolvedType0.isStringValueType());
      //  // Unstable assertion: assertEquals(false, noResolvedType0.isCheckedUnknownType());
      //  // Unstable assertion: assertEquals(false, noResolvedType0.isBooleanValueType());
      //  // Unstable assertion: assertEquals(2147483647, noResolvedType0.getMaxArguments());
      //  // Unstable assertion: assertEquals(false, noResolvedType0.isVoidType());
      //  // Unstable assertion: assertEquals(false, noResolvedType0.isReturnTypeInferred());
      //  // Unstable assertion: assertNotNull(noResolvedType0);
      
      int int0 = 0;
      FunctionType functionType1 = noResolvedType0.getBindReturnType(int0);
      //  // Unstable assertion: assertNotSame(functionType1, functionType0);
      //  // Unstable assertion: assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      //  // Unstable assertion: assertEquals(false, functionType1.isReturnTypeInferred());
      //  // Unstable assertion: assertEquals(false, functionType1.isEnumType());
      //  // Unstable assertion: assertEquals(false, functionType1.isNullType());
      //  // Unstable assertion: assertEquals(BooleanLiteralSet.TRUE, functionType1.getPossibleToBooleanOutcomes());
      //  // Unstable assertion: assertEquals(false, functionType1.isNumberValueType());
      //  // Unstable assertion: assertEquals(false, functionType1.isFunctionPrototypeType());
      //  // Unstable assertion: assertEquals(false, functionType1.hasInstanceType());
      //  // Unstable assertion: assertEquals(false, functionType1.isNominalType());
      //  // Unstable assertion: assertEquals(false, functionType1.isStringValueType());
      //  // Unstable assertion: assertEquals(false, functionType1.isNominalConstructor());
      //  // Unstable assertion: assertEquals(false, functionType1.isNoResolvedType());
      //  // Unstable assertion: assertEquals(false, functionType1.isTemplateType());
      //  // Unstable assertion: assertEquals(false, functionType1.isCheckedUnknownType());
      //  // Unstable assertion: assertEquals(0, functionType1.getExtendedInterfacesCount());
      //  // Unstable assertion: assertEquals(false, functionType1.isNoType());
      //  // Unstable assertion: assertEquals(true, functionType1.isOrdinaryFunction());
      //  // Unstable assertion: assertEquals(false, functionType1.isUnionType());
      //  // Unstable assertion: assertEquals(true, functionType1.isFunctionType());
      //  // Unstable assertion: assertEquals(false, functionType1.isResolved());
      //  // Unstable assertion: assertEquals(false, functionType1.isParameterizedType());
      //  // Unstable assertion: assertEquals(false, functionType1.isVoidType());
      //  // Unstable assertion: assertEquals(false, functionType1.isEnumElementType());
      //  // Unstable assertion: assertEquals(false, functionType1.isBooleanValueType());
      //  // Unstable assertion: assertEquals(true, functionType1.hasCachedValues());
      //  // Unstable assertion: assertEquals(false, functionType1.isInterface());
      //  // Unstable assertion: assertEquals(false, functionType1.isAllType());
      //  // Unstable assertion: assertEquals(true, functionType1.canBeCalled());
      //  // Unstable assertion: assertEquals(false, functionType1.isConstructor());
      //  // Unstable assertion: assertEquals(false, functionType1.isNoObjectType());
      //  // Unstable assertion: assertEquals(2147483647, functionType1.getMaxArguments());
      //  // Unstable assertion: assertEquals(false, functionType1.isRecordType());
      //  // Unstable assertion: assertEquals(true, noResolvedType0.isNullable());
      //  // Unstable assertion: assertEquals(false, noResolvedType0.isOrdinaryFunction());
      //  // Unstable assertion: assertEquals(false, noResolvedType0.isResolved());
      //  // Unstable assertion: assertEquals(false, noResolvedType0.isNoObjectType());
      //  // Unstable assertion: assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      //  // Unstable assertion: assertEquals(false, noResolvedType0.isNullType());
      //  // Unstable assertion: assertEquals(true, noResolvedType0.matchesObjectContext());
      //  // Unstable assertion: assertEquals(false, noResolvedType0.isNumberValueType());
      //  // Unstable assertion: assertEquals(false, noResolvedType0.hasCachedValues());
      //  // Unstable assertion: assertEquals(false, noResolvedType0.isEnumType());
      //  // Unstable assertion: assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      //  // Unstable assertion: assertEquals(false, noResolvedType0.isInterface());
      //  // Unstable assertion: assertEquals(false, noResolvedType0.isUnionType());
      //  // Unstable assertion: assertNull(noResolvedType0.getReferenceName());
      //  // Unstable assertion: assertEquals(true, noResolvedType0.canBeCalled());
      //  // Unstable assertion: assertEquals(false, noResolvedType0.isFunctionType());
      //  // Unstable assertion: assertEquals(false, noResolvedType0.isTemplateType());
      //  // Unstable assertion: assertEquals(true, noResolvedType0.matchesStringContext());
      //  // Unstable assertion: assertEquals(true, noResolvedType0.hasInstanceType());
      //  // Unstable assertion: assertEquals(false, noResolvedType0.isEnumElementType());
      //  // Unstable assertion: assertEquals(true, noResolvedType0.isConstructor());
      //  // Unstable assertion: assertEquals(true, noResolvedType0.matchesNumberContext());
      //  // Unstable assertion: assertEquals(false, noResolvedType0.isAllType());
      //  // Unstable assertion: assertEquals(false, noResolvedType0.isParameterizedType());
      //  // Unstable assertion: assertEquals(false, noResolvedType0.isNominalType());
      //  // Unstable assertion: assertEquals(false, noResolvedType0.isFunctionPrototypeType());
      //  // Unstable assertion: assertEquals(2147483647, noResolvedType0.getPropertiesCount());
      //  // Unstable assertion: assertEquals(false, noResolvedType0.isNominalConstructor());
      //  // Unstable assertion: assertEquals(false, noResolvedType0.isRecordType());
      //  // Unstable assertion: assertEquals(false, noResolvedType0.isStringValueType());
      //  // Unstable assertion: assertEquals(false, noResolvedType0.isCheckedUnknownType());
      //  // Unstable assertion: assertEquals(false, noResolvedType0.isBooleanValueType());
      //  // Unstable assertion: assertEquals(2147483647, noResolvedType0.getMaxArguments());
      //  // Unstable assertion: assertEquals(false, noResolvedType0.isVoidType());
      //  // Unstable assertion: assertEquals(false, noResolvedType0.isReturnTypeInferred());
      //  // Unstable assertion: assertNotNull(functionType1);
      //  // Unstable assertion: assertFalse(functionType1.equals((Object)functionType0));
      
      boolean boolean1 = JSType.isEquivalent((JSType) functionType1, (JSType) functionType0);
      //  // Unstable assertion: assertNotSame(functionType0, functionType1);
      //  // Unstable assertion: assertNotSame(functionType1, functionType0);
      //  // Unstable assertion: assertEquals(false, noType0.isOrdinaryFunction());
      //  // Unstable assertion: assertEquals(false, noType0.hasCachedValues());
      //  // Unstable assertion: assertEquals(false, noType0.isReturnTypeInferred());
      //  // Unstable assertion: assertEquals(false, noType0.isNoObjectType());
      //  // Unstable assertion: assertEquals(true, noType0.isConstructor());
      //  // Unstable assertion: assertEquals(2147483647, noType0.getPropertiesCount());
      //  // Unstable assertion: assertEquals(false, noType0.isEnumElementType());
      //  // Unstable assertion: assertEquals(false, noType0.isBooleanValueType());
      //  // Unstable assertion: assertEquals(true, noType0.canBeCalled());
      //  // Unstable assertion: assertEquals(true, noType0.matchesObjectContext());
      //  // Unstable assertion: assertEquals(false, noType0.isNoResolvedType());
      //  // Unstable assertion: assertEquals(false, noType0.isTemplateType());
      //  // Unstable assertion: assertEquals(true, noType0.isNullable());
      //  // Unstable assertion: assertEquals(false, noType0.isEnumType());
      //  // Unstable assertion: assertEquals(true, noType0.matchesNumberContext());
      //  // Unstable assertion: assertEquals(false, noType0.isNominalConstructor());
      //  // Unstable assertion: assertEquals(false, noType0.isCheckedUnknownType());
      //  // Unstable assertion: assertEquals(true, noType0.hasInstanceType());
      //  // Unstable assertion: assertEquals(0, noType0.getExtendedInterfacesCount());
      //  // Unstable assertion: assertEquals(false, noType0.isNumberValueType());
      //  // Unstable assertion: assertEquals(false, noType0.isNominalType());
      //  // Unstable assertion: assertEquals(false, noType0.isRecordType());
      //  // Unstable assertion: assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      //  // Unstable assertion: assertEquals(true, noType0.isNoType());
      //  // Unstable assertion: assertEquals(true, noType0.matchesStringContext());
      //  // Unstable assertion: assertEquals(false, noType0.isNullType());
      //  // Unstable assertion: assertEquals(false, noType0.isFunctionPrototypeType());
      //  // Unstable assertion: assertEquals(false, noType0.isInterface());
      //  // Unstable assertion: assertEquals(false, noType0.isVoidType());
      //  // Unstable assertion: assertEquals(false, noType0.isResolved());
      //  // Unstable assertion: assertEquals(2147483647, noType0.getMaxArguments());
      //  // Unstable assertion: assertEquals(false, noType0.isParameterizedType());
      //  // Unstable assertion: assertEquals(false, noType0.isUnionType());
      //  // Unstable assertion: assertEquals(false, noType0.isStringValueType());
      //  // Unstable assertion: assertEquals(false, noType0.isAllType());
      //  // Unstable assertion: assertNull(noType0.getReferenceName());
      //  // Unstable assertion: assertEquals(false, noType0.isFunctionType());
      //  // Unstable assertion: assertEquals(false, functionType0.isStringValueType());
      //  // Unstable assertion: assertEquals(false, functionType0.isCheckedUnknownType());
      //  // Unstable assertion: assertEquals(false, functionType0.isNoResolvedType());
      //  // Unstable assertion: assertEquals(false, functionType0.isAllType());
      //  // Unstable assertion: assertEquals(true, functionType0.canBeCalled());
      //  // Unstable assertion: assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      //  // Unstable assertion: assertEquals(false, functionType0.isTemplateType());
      //  // Unstable assertion: assertEquals(false, functionType0.isNoObjectType());
      //  // Unstable assertion: assertEquals(0, functionType0.getExtendedInterfacesCount());
      //  // Unstable assertion: assertEquals(false, functionType0.isNumberValueType());
      //  // Unstable assertion: assertEquals(false, functionType0.isBooleanValueType());
      //  // Unstable assertion: assertEquals(true, functionType0.hasInstanceType());
      //  // Unstable assertion: assertEquals(false, functionType0.isReturnTypeInferred());
      //  // Unstable assertion: assertEquals(false, functionType0.isNominalType());
      //  // Unstable assertion: assertEquals(true, functionType0.hasCachedValues());
      //  // Unstable assertion: assertEquals(false, functionType0.isResolved());
      //  // Unstable assertion: assertEquals(false, functionType0.isConstructor());
      //  // Unstable assertion: assertEquals(false, functionType0.isEnumElementType());
      //  // Unstable assertion: assertEquals(false, functionType0.isVoidType());
      //  // Unstable assertion: assertEquals(0, functionType0.getMaxArguments());
      //  // Unstable assertion: assertEquals(false, functionType0.isEnumType());
      //  // Unstable assertion: assertEquals(false, functionType0.isRecordType());
      //  // Unstable assertion: assertEquals(false, functionType0.isUnionType());
      //  // Unstable assertion: assertEquals(false, functionType0.isNominalConstructor());
      //  // Unstable assertion: assertEquals(true, functionType0.isFunctionType());
      //  // Unstable assertion: assertEquals(false, functionType0.isNoType());
      //  // Unstable assertion: assertEquals(false, functionType0.isNullType());
      //  // Unstable assertion: assertEquals(true, functionType0.isInterface());
      //  // Unstable assertion: assertEquals(false, functionType0.isOrdinaryFunction());
      //  // Unstable assertion: assertEquals(false, functionType0.isFunctionPrototypeType());
      //  // Unstable assertion: assertEquals(false, functionType0.isParameterizedType());
      //  // Unstable assertion: assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      //  // Unstable assertion: assertEquals(false, functionType1.isReturnTypeInferred());
      //  // Unstable assertion: assertEquals(false, functionType1.isEnumType());
      //  // Unstable assertion: assertEquals(false, functionType1.isNullType());
      //  // Unstable assertion: assertEquals(BooleanLiteralSet.TRUE, functionType1.getPossibleToBooleanOutcomes());
      //  // Unstable assertion: assertEquals(false, functionType1.isNumberValueType());
      //  // Unstable assertion: assertEquals(false, functionType1.isFunctionPrototypeType());
      //  // Unstable assertion: assertEquals(false, functionType1.hasInstanceType());
      //  // Unstable assertion: assertEquals(false, functionType1.isNominalType());
      //  // Unstable assertion: assertEquals(false, functionType1.isStringValueType());
      //  // Unstable assertion: assertEquals(false, functionType1.isNominalConstructor());
      //  // Unstable assertion: assertEquals(false, functionType1.isNoResolvedType());
      //  // Unstable assertion: assertEquals(false, functionType1.isTemplateType());
      //  // Unstable assertion: assertEquals(false, functionType1.isCheckedUnknownType());
      //  // Unstable assertion: assertEquals(0, functionType1.getExtendedInterfacesCount());
      //  // Unstable assertion: assertEquals(false, functionType1.isNoType());
      //  // Unstable assertion: assertEquals(true, functionType1.isOrdinaryFunction());
      //  // Unstable assertion: assertEquals(false, functionType1.isUnionType());
      //  // Unstable assertion: assertEquals(true, functionType1.isFunctionType());
      //  // Unstable assertion: assertEquals(false, functionType1.isResolved());
      //  // Unstable assertion: assertEquals(false, functionType1.isParameterizedType());
      //  // Unstable assertion: assertEquals(false, functionType1.isVoidType());
      //  // Unstable assertion: assertEquals(false, functionType1.isEnumElementType());
      //  // Unstable assertion: assertEquals(false, functionType1.isBooleanValueType());
      //  // Unstable assertion: assertEquals(true, functionType1.hasCachedValues());
      //  // Unstable assertion: assertEquals(false, functionType1.isInterface());
      //  // Unstable assertion: assertEquals(false, functionType1.isAllType());
      //  // Unstable assertion: assertEquals(true, functionType1.canBeCalled());
      //  // Unstable assertion: assertEquals(false, functionType1.isConstructor());
      //  // Unstable assertion: assertEquals(false, functionType1.isNoObjectType());
      //  // Unstable assertion: assertEquals(2147483647, functionType1.getMaxArguments());
      //  // Unstable assertion: assertEquals(false, functionType1.isRecordType());
      //  // Unstable assertion: assertEquals(true, noResolvedType0.isNullable());
      //  // Unstable assertion: assertEquals(false, noResolvedType0.isOrdinaryFunction());
      //  // Unstable assertion: assertEquals(false, noResolvedType0.isResolved());
      //  // Unstable assertion: assertEquals(false, noResolvedType0.isNoObjectType());
      //  // Unstable assertion: assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      //  // Unstable assertion: assertEquals(false, noResolvedType0.isNullType());
      //  // Unstable assertion: assertEquals(true, noResolvedType0.matchesObjectContext());
      //  // Unstable assertion: assertEquals(false, noResolvedType0.isNumberValueType());
      //  // Unstable assertion: assertEquals(false, noResolvedType0.hasCachedValues());
      //  // Unstable assertion: assertEquals(false, noResolvedType0.isEnumType());
      //  // Unstable assertion: assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      //  // Unstable assertion: assertEquals(false, noResolvedType0.isInterface());
      //  // Unstable assertion: assertEquals(false, noResolvedType0.isUnionType());
      //  // Unstable assertion: assertNull(noResolvedType0.getReferenceName());
      //  // Unstable assertion: assertEquals(true, noResolvedType0.canBeCalled());
      //  // Unstable assertion: assertEquals(false, noResolvedType0.isFunctionType());
      //  // Unstable assertion: assertEquals(false, noResolvedType0.isTemplateType());
      //  // Unstable assertion: assertEquals(true, noResolvedType0.matchesStringContext());
      //  // Unstable assertion: assertEquals(true, noResolvedType0.hasInstanceType());
      //  // Unstable assertion: assertEquals(false, noResolvedType0.isEnumElementType());
      //  // Unstable assertion: assertEquals(true, noResolvedType0.isConstructor());
      //  // Unstable assertion: assertEquals(true, noResolvedType0.matchesNumberContext());
      //  // Unstable assertion: assertEquals(false, noResolvedType0.isAllType());
      //  // Unstable assertion: assertEquals(false, noResolvedType0.isParameterizedType());
      //  // Unstable assertion: assertEquals(false, noResolvedType0.isNominalType());
      //  // Unstable assertion: assertEquals(false, noResolvedType0.isFunctionPrototypeType());
      //  // Unstable assertion: assertEquals(2147483647, noResolvedType0.getPropertiesCount());
      //  // Unstable assertion: assertEquals(false, noResolvedType0.isNominalConstructor());
      //  // Unstable assertion: assertEquals(false, noResolvedType0.isRecordType());
      //  // Unstable assertion: assertEquals(false, noResolvedType0.isStringValueType());
      //  // Unstable assertion: assertEquals(false, noResolvedType0.isCheckedUnknownType());
      //  // Unstable assertion: assertEquals(false, noResolvedType0.isBooleanValueType());
      //  // Unstable assertion: assertEquals(2147483647, noResolvedType0.getMaxArguments());
      //  // Unstable assertion: assertEquals(false, noResolvedType0.isVoidType());
      //  // Unstable assertion: assertEquals(false, noResolvedType0.isReturnTypeInferred());
      //  // Unstable assertion: assertFalse(boolean1);
      //  // Unstable assertion: assertFalse(functionType0.equals((Object)functionType1));
      //  // Unstable assertion: assertFalse(boolean0 == boolean1);
      //  // Unstable assertion: assertFalse(functionType1.equals((Object)functionType0));
      //  // Unstable assertion: assertFalse(boolean1 == boolean0);
  }

  @Test
  public void test26()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      boolean boolean0 = false;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0, boolean0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      String string0 = ":yLTc+cK.&yC";
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, string0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, errorFunctionType0.isParameterizedType());
      assertEquals(false, errorFunctionType0.isEnumType());
      assertEquals(false, errorFunctionType0.isNullType());
      assertEquals(false, errorFunctionType0.isResolved());
      assertEquals(false, errorFunctionType0.isReturnTypeInferred());
      assertEquals(false, errorFunctionType0.hasCachedValues());
      assertEquals(3, errorFunctionType0.getMaxArguments());
      assertEquals(false, errorFunctionType0.isBooleanValueType());
      assertEquals(false, errorFunctionType0.isNoType());
      assertEquals(false, errorFunctionType0.isAllType());
      assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      assertEquals(false, errorFunctionType0.isTemplateType());
      assertEquals(false, errorFunctionType0.isEnumElementType());
      assertEquals(false, errorFunctionType0.isCheckedUnknownType());
      assertEquals(true, errorFunctionType0.isConstructor());
      assertEquals(false, errorFunctionType0.isUnionType());
      assertEquals(true, errorFunctionType0.hasInstanceType());
      assertEquals(false, errorFunctionType0.isRecordType());
      assertEquals(false, errorFunctionType0.isVoidType());
      assertEquals(false, errorFunctionType0.isStringValueType());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertEquals(false, errorFunctionType0.isNumberValueType());
      assertEquals(true, errorFunctionType0.canBeCalled());
      assertEquals(false, errorFunctionType0.isNoObjectType());
      assertEquals(false, errorFunctionType0.isNominalType());
      assertEquals(true, errorFunctionType0.isNominalConstructor());
      assertEquals(false, errorFunctionType0.isInterface());
      assertEquals(false, errorFunctionType0.isNoResolvedType());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertEquals(true, errorFunctionType0.isFunctionType());
      assertEquals(false, errorFunctionType0.isFunctionPrototypeType());
      assertNotNull(errorFunctionType0);
      
      EquivalenceMethod equivalenceMethod0 = EquivalenceMethod.DATA_FLOW;
      boolean boolean1 = errorFunctionType0.checkFunctionEquivalenceHelper(errorFunctionType0, equivalenceMethod0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, errorFunctionType0.isParameterizedType());
      assertEquals(false, errorFunctionType0.isEnumType());
      assertEquals(false, errorFunctionType0.isNullType());
      assertEquals(false, errorFunctionType0.isResolved());
      assertEquals(false, errorFunctionType0.isReturnTypeInferred());
      assertEquals(false, errorFunctionType0.hasCachedValues());
      assertEquals(3, errorFunctionType0.getMaxArguments());
      assertEquals(false, errorFunctionType0.isBooleanValueType());
      assertEquals(false, errorFunctionType0.isNoType());
      assertEquals(false, errorFunctionType0.isAllType());
      assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      assertEquals(false, errorFunctionType0.isTemplateType());
      assertEquals(false, errorFunctionType0.isEnumElementType());
      assertEquals(false, errorFunctionType0.isCheckedUnknownType());
      assertEquals(true, errorFunctionType0.isConstructor());
      assertEquals(false, errorFunctionType0.isUnionType());
      assertEquals(true, errorFunctionType0.hasInstanceType());
      assertEquals(false, errorFunctionType0.isRecordType());
      assertEquals(false, errorFunctionType0.isVoidType());
      assertEquals(false, errorFunctionType0.isStringValueType());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertEquals(false, errorFunctionType0.isNumberValueType());
      assertEquals(true, errorFunctionType0.canBeCalled());
      assertEquals(false, errorFunctionType0.isNoObjectType());
      assertEquals(false, errorFunctionType0.isNominalType());
      assertEquals(true, errorFunctionType0.isNominalConstructor());
      assertEquals(false, errorFunctionType0.isInterface());
      assertEquals(false, errorFunctionType0.isNoResolvedType());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertEquals(true, errorFunctionType0.isFunctionType());
      assertEquals(false, errorFunctionType0.isFunctionPrototypeType());
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean0 == boolean1);
  }

  @Test
  public void test27()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      String string0 = "prototype";
      boolean boolean0 = true;
      UnknownType unknownType0 = new UnknownType(jSTypeRegistry0, boolean0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, unknownType0.isUnionType());
      assertEquals(false, unknownType0.isInterface());
      assertEquals(false, unknownType0.hasCachedValues());
      assertEquals(false, unknownType0.isNominalConstructor());
      assertEquals(true, unknownType0.isUnknownType());
      assertEquals(false, unknownType0.isVoidType());
      assertEquals("Unknown", unknownType0.getDisplayName());
      assertEquals(false, unknownType0.isNominalType());
      assertEquals(true, unknownType0.matchesStringContext());
      assertEquals(true, unknownType0.isCheckedUnknownType());
      assertEquals(true, unknownType0.matchesNumberContext());
      assertEquals(2147483647, unknownType0.getPropertiesCount());
      assertEquals(false, unknownType0.isNoType());
      assertEquals(false, unknownType0.isRecordType());
      assertEquals(false, unknownType0.isEnumType());
      assertEquals(true, unknownType0.isNullable());
      assertEquals("??", unknownType0.getReferenceName());
      assertEquals(false, unknownType0.isTemplateType());
      assertEquals(false, unknownType0.isEnumElementType());
      assertEquals(false, unknownType0.isAllType());
      assertEquals(false, unknownType0.isBooleanValueType());
      assertEquals(false, unknownType0.isNoResolvedType());
      assertEquals(true, unknownType0.hasDisplayName());
      assertEquals(false, unknownType0.isConstructor());
      assertEquals(false, unknownType0.isParameterizedType());
      assertEquals(BooleanLiteralSet.BOTH, unknownType0.getPossibleToBooleanOutcomes());
      assertEquals(true, unknownType0.matchesObjectContext());
      assertEquals(false, unknownType0.isNoObjectType());
      assertEquals(false, unknownType0.isResolved());
      assertEquals(false, unknownType0.isStringValueType());
      assertEquals(false, unknownType0.hasReferenceName());
      assertEquals(false, unknownType0.isNumberValueType());
      assertEquals(false, unknownType0.isNativeObjectType());
      assertEquals(true, unknownType0.canBeCalled());
      assertEquals(false, unknownType0.isOrdinaryFunction());
      assertEquals(false, unknownType0.isNullType());
      assertEquals(false, unknownType0.isFunctionType());
      assertEquals(false, unknownType0.isFunctionPrototypeType());
      assertNotNull(unknownType0);
      
      Node node0 = unknownType0.getRootNode();
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, unknownType0.isUnionType());
      assertEquals(false, unknownType0.isInterface());
      assertEquals(false, unknownType0.hasCachedValues());
      assertEquals(false, unknownType0.isNominalConstructor());
      assertEquals(true, unknownType0.isUnknownType());
      assertEquals(false, unknownType0.isVoidType());
      assertEquals("Unknown", unknownType0.getDisplayName());
      assertEquals(false, unknownType0.isNominalType());
      assertEquals(true, unknownType0.matchesStringContext());
      assertEquals(true, unknownType0.isCheckedUnknownType());
      assertEquals(true, unknownType0.matchesNumberContext());
      assertEquals(2147483647, unknownType0.getPropertiesCount());
      assertEquals(false, unknownType0.isNoType());
      assertEquals(false, unknownType0.isRecordType());
      assertEquals(false, unknownType0.isEnumType());
      assertEquals(true, unknownType0.isNullable());
      assertEquals("??", unknownType0.getReferenceName());
      assertEquals(false, unknownType0.isTemplateType());
      assertEquals(false, unknownType0.isEnumElementType());
      assertEquals(false, unknownType0.isAllType());
      assertEquals(false, unknownType0.isBooleanValueType());
      assertEquals(false, unknownType0.isNoResolvedType());
      assertEquals(true, unknownType0.hasDisplayName());
      assertEquals(false, unknownType0.isConstructor());
      assertEquals(false, unknownType0.isParameterizedType());
      assertEquals(BooleanLiteralSet.BOTH, unknownType0.getPossibleToBooleanOutcomes());
      assertEquals(true, unknownType0.matchesObjectContext());
      assertEquals(false, unknownType0.isNoObjectType());
      assertEquals(false, unknownType0.isResolved());
      assertEquals(false, unknownType0.isStringValueType());
      assertEquals(false, unknownType0.hasReferenceName());
      assertEquals(false, unknownType0.isNumberValueType());
      assertEquals(false, unknownType0.isNativeObjectType());
      assertEquals(true, unknownType0.canBeCalled());
      assertEquals(false, unknownType0.isOrdinaryFunction());
      assertEquals(false, unknownType0.isNullType());
      assertEquals(false, unknownType0.isFunctionType());
      assertEquals(false, unknownType0.isFunctionPrototypeType());
      assertNull(node0);
      
      FunctionType functionType0 = FunctionType.forInterface(jSTypeRegistry0, string0, node0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, functionType0.isBooleanValueType());
      assertEquals(false, functionType0.isResolved());
      assertEquals(false, functionType0.isVoidType());
      assertEquals(false, functionType0.isOrdinaryFunction());
      assertEquals(false, functionType0.isParameterizedType());
      assertEquals(false, functionType0.isUnionType());
      assertEquals(false, functionType0.isReturnTypeInferred());
      assertEquals(false, functionType0.isFunctionPrototypeType());
      assertEquals(false, functionType0.isNoResolvedType());
      assertEquals(true, functionType0.isFunctionType());
      assertEquals(false, functionType0.isNoObjectType());
      assertEquals(false, functionType0.isStringValueType());
      assertEquals(true, functionType0.isInterface());
      assertEquals(false, functionType0.isNominalConstructor());
      assertEquals(0, functionType0.getMaxArguments());
      assertEquals(true, functionType0.hasInstanceType());
      assertEquals(false, functionType0.isTemplateType());
      assertEquals(false, functionType0.isCheckedUnknownType());
      assertEquals(false, functionType0.isNumberValueType());
      assertEquals(false, functionType0.isEnumType());
      assertEquals(false, functionType0.isAllType());
      assertEquals(true, functionType0.canBeCalled());
      assertEquals(false, functionType0.isNullType());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, functionType0.hasCachedValues());
      assertEquals(false, functionType0.isEnumElementType());
      assertEquals(false, functionType0.isNoType());
      assertEquals(false, functionType0.isRecordType());
      assertEquals(false, functionType0.isConstructor());
      assertEquals(false, functionType0.isNominalType());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertEquals(false, unknownType0.isUnionType());
      assertEquals(false, unknownType0.isInterface());
      assertEquals(false, unknownType0.hasCachedValues());
      assertEquals(false, unknownType0.isNominalConstructor());
      assertEquals(true, unknownType0.isUnknownType());
      assertEquals(false, unknownType0.isVoidType());
      assertEquals("Unknown", unknownType0.getDisplayName());
      assertEquals(false, unknownType0.isNominalType());
      assertEquals(true, unknownType0.matchesStringContext());
      assertEquals(true, unknownType0.isCheckedUnknownType());
      assertEquals(true, unknownType0.matchesNumberContext());
      assertEquals(2147483647, unknownType0.getPropertiesCount());
      assertEquals(false, unknownType0.isNoType());
      assertEquals(false, unknownType0.isRecordType());
      assertEquals(false, unknownType0.isEnumType());
      assertEquals(true, unknownType0.isNullable());
      assertEquals("??", unknownType0.getReferenceName());
      assertEquals(false, unknownType0.isTemplateType());
      assertEquals(false, unknownType0.isEnumElementType());
      assertEquals(false, unknownType0.isAllType());
      assertEquals(false, unknownType0.isBooleanValueType());
      assertEquals(false, unknownType0.isNoResolvedType());
      assertEquals(true, unknownType0.hasDisplayName());
      assertEquals(false, unknownType0.isConstructor());
      assertEquals(false, unknownType0.isParameterizedType());
      assertEquals(BooleanLiteralSet.BOTH, unknownType0.getPossibleToBooleanOutcomes());
      assertEquals(true, unknownType0.matchesObjectContext());
      assertEquals(false, unknownType0.isNoObjectType());
      assertEquals(false, unknownType0.isResolved());
      assertEquals(false, unknownType0.isStringValueType());
      assertEquals(false, unknownType0.hasReferenceName());
      assertEquals(false, unknownType0.isNumberValueType());
      assertEquals(false, unknownType0.isNativeObjectType());
      assertEquals(true, unknownType0.canBeCalled());
      assertEquals(false, unknownType0.isOrdinaryFunction());
      assertEquals(false, unknownType0.isNullType());
      assertEquals(false, unknownType0.isFunctionType());
      assertEquals(false, unknownType0.isFunctionPrototypeType());
      assertNotNull(functionType0);
      
      functionType0.setPrototypeBasedOn((ObjectType) unknownType0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, functionType0.isBooleanValueType());
      assertEquals(false, functionType0.isResolved());
      assertEquals(false, functionType0.isVoidType());
      assertEquals(false, functionType0.isOrdinaryFunction());
      assertEquals(false, functionType0.isParameterizedType());
      assertEquals(false, functionType0.isUnionType());
      assertEquals(false, functionType0.isReturnTypeInferred());
      assertEquals(false, functionType0.isFunctionPrototypeType());
      assertEquals(false, functionType0.isNoResolvedType());
      assertEquals(true, functionType0.isFunctionType());
      assertEquals(false, functionType0.isNoObjectType());
      assertEquals(false, functionType0.isStringValueType());
      assertEquals(true, functionType0.hasCachedValues());
      assertEquals(true, functionType0.isInterface());
      assertEquals(false, functionType0.isNominalConstructor());
      assertEquals(0, functionType0.getMaxArguments());
      assertEquals(true, functionType0.hasInstanceType());
      assertEquals(false, functionType0.isTemplateType());
      assertEquals(false, functionType0.isCheckedUnknownType());
      assertEquals(false, functionType0.isNumberValueType());
      assertEquals(false, functionType0.isEnumType());
      assertEquals(false, functionType0.isAllType());
      assertEquals(true, functionType0.canBeCalled());
      assertEquals(false, functionType0.isNullType());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, functionType0.isEnumElementType());
      assertEquals(false, functionType0.isNoType());
      assertEquals(false, functionType0.isRecordType());
      assertEquals(false, functionType0.isConstructor());
      assertEquals(false, functionType0.isNominalType());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertEquals(false, unknownType0.isUnionType());
      assertEquals(false, unknownType0.isInterface());
      assertEquals(false, unknownType0.hasCachedValues());
      assertEquals(false, unknownType0.isNominalConstructor());
      assertEquals(true, unknownType0.isUnknownType());
      assertEquals(false, unknownType0.isVoidType());
      assertEquals("Unknown", unknownType0.getDisplayName());
      assertEquals(false, unknownType0.isNominalType());
      assertEquals(true, unknownType0.matchesStringContext());
      assertEquals(true, unknownType0.isCheckedUnknownType());
      assertEquals(true, unknownType0.matchesNumberContext());
      assertEquals(2147483647, unknownType0.getPropertiesCount());
      assertEquals(false, unknownType0.isNoType());
      assertEquals(false, unknownType0.isRecordType());
      assertEquals(false, unknownType0.isEnumType());
      assertEquals(true, unknownType0.isNullable());
      assertEquals("??", unknownType0.getReferenceName());
      assertEquals(false, unknownType0.isTemplateType());
      assertEquals(false, unknownType0.isEnumElementType());
      assertEquals(false, unknownType0.isAllType());
      assertEquals(false, unknownType0.isBooleanValueType());
      assertEquals(false, unknownType0.isNoResolvedType());
      assertEquals(true, unknownType0.hasDisplayName());
      assertEquals(false, unknownType0.isConstructor());
      assertEquals(false, unknownType0.isParameterizedType());
      assertEquals(BooleanLiteralSet.BOTH, unknownType0.getPossibleToBooleanOutcomes());
      assertEquals(true, unknownType0.matchesObjectContext());
      assertEquals(false, unknownType0.isNoObjectType());
      assertEquals(false, unknownType0.isResolved());
      assertEquals(false, unknownType0.isStringValueType());
      assertEquals(false, unknownType0.hasReferenceName());
      assertEquals(false, unknownType0.isNumberValueType());
      assertEquals(false, unknownType0.isNativeObjectType());
      assertEquals(true, unknownType0.canBeCalled());
      assertEquals(false, unknownType0.isOrdinaryFunction());
      assertEquals(false, unknownType0.isNullType());
      assertEquals(false, unknownType0.isFunctionType());
      assertEquals(false, unknownType0.isFunctionPrototypeType());
      
      InstanceObjectType instanceObjectType0 = (InstanceObjectType)functionType0.getTopMostDefiningType(string0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, instanceObjectType0.isOrdinaryFunction());
      assertEquals(false, instanceObjectType0.isFunctionType());
      assertEquals(false, instanceObjectType0.isNoResolvedType());
      assertEquals(false, instanceObjectType0.isInterface());
      assertEquals(false, instanceObjectType0.isTemplateType());
      assertEquals(false, instanceObjectType0.isConstructor());
      assertEquals(false, instanceObjectType0.isAllType());
      assertEquals(BooleanLiteralSet.TRUE, instanceObjectType0.getPossibleToBooleanOutcomes());
      assertEquals(false, instanceObjectType0.isCheckedUnknownType());
      assertEquals(false, instanceObjectType0.isBooleanValueType());
      assertEquals(false, instanceObjectType0.isResolved());
      assertEquals(false, instanceObjectType0.isFunctionPrototypeType());
      assertEquals(false, instanceObjectType0.isEnumType());
      assertEquals(false, instanceObjectType0.isUnionType());
      assertEquals(false, instanceObjectType0.isParameterizedType());
      assertEquals(false, instanceObjectType0.isVoidType());
      assertEquals(false, instanceObjectType0.isNumberValueType());
      assertEquals(false, instanceObjectType0.isRecordType());
      assertEquals(false, instanceObjectType0.isStringValueType());
      assertEquals(false, instanceObjectType0.isNoObjectType());
      assertEquals(false, instanceObjectType0.isNoType());
      assertEquals(false, instanceObjectType0.isNullType());
      assertEquals(false, instanceObjectType0.isEnumElementType());
      assertEquals(false, instanceObjectType0.isNominalConstructor());
      assertEquals(false, functionType0.isBooleanValueType());
      assertEquals(false, functionType0.isResolved());
      assertEquals(false, functionType0.isVoidType());
      assertEquals(false, functionType0.isOrdinaryFunction());
      assertEquals(false, functionType0.isParameterizedType());
      assertEquals(false, functionType0.isUnionType());
      assertEquals(false, functionType0.isReturnTypeInferred());
      assertEquals(false, functionType0.isFunctionPrototypeType());
      assertEquals(false, functionType0.isNoResolvedType());
      assertEquals(true, functionType0.isFunctionType());
      assertEquals(false, functionType0.isNoObjectType());
      assertEquals(false, functionType0.isStringValueType());
      assertEquals(true, functionType0.hasCachedValues());
      assertEquals(true, functionType0.isInterface());
      assertEquals(false, functionType0.isNominalConstructor());
      assertEquals(0, functionType0.getMaxArguments());
      assertEquals(true, functionType0.hasInstanceType());
      assertEquals(false, functionType0.isTemplateType());
      assertEquals(false, functionType0.isCheckedUnknownType());
      assertEquals(false, functionType0.isNumberValueType());
      assertEquals(false, functionType0.isEnumType());
      assertEquals(false, functionType0.isAllType());
      assertEquals(true, functionType0.canBeCalled());
      assertEquals(false, functionType0.isNullType());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, functionType0.isEnumElementType());
      assertEquals(false, functionType0.isNoType());
      assertEquals(false, functionType0.isRecordType());
      assertEquals(false, functionType0.isConstructor());
      assertEquals(false, functionType0.isNominalType());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertEquals(false, unknownType0.isUnionType());
      assertEquals(false, unknownType0.isInterface());
      assertEquals(false, unknownType0.hasCachedValues());
      assertEquals(false, unknownType0.isNominalConstructor());
      assertEquals(true, unknownType0.isUnknownType());
      assertEquals(false, unknownType0.isVoidType());
      assertEquals("Unknown", unknownType0.getDisplayName());
      assertEquals(false, unknownType0.isNominalType());
      assertEquals(true, unknownType0.matchesStringContext());
      assertEquals(true, unknownType0.isCheckedUnknownType());
      assertEquals(true, unknownType0.matchesNumberContext());
      assertEquals(2147483647, unknownType0.getPropertiesCount());
      assertEquals(false, unknownType0.isNoType());
      assertEquals(false, unknownType0.isRecordType());
      assertEquals(false, unknownType0.isEnumType());
      assertEquals(true, unknownType0.isNullable());
      assertEquals("??", unknownType0.getReferenceName());
      assertEquals(false, unknownType0.isTemplateType());
      assertEquals(false, unknownType0.isEnumElementType());
      assertEquals(false, unknownType0.isAllType());
      assertEquals(false, unknownType0.isBooleanValueType());
      assertEquals(false, unknownType0.isNoResolvedType());
      assertEquals(true, unknownType0.hasDisplayName());
      assertEquals(false, unknownType0.isConstructor());
      assertEquals(false, unknownType0.isParameterizedType());
      assertEquals(BooleanLiteralSet.BOTH, unknownType0.getPossibleToBooleanOutcomes());
      assertEquals(true, unknownType0.matchesObjectContext());
      assertEquals(false, unknownType0.isNoObjectType());
      assertEquals(false, unknownType0.isResolved());
      assertEquals(false, unknownType0.isStringValueType());
      assertEquals(false, unknownType0.hasReferenceName());
      assertEquals(false, unknownType0.isNumberValueType());
      assertEquals(false, unknownType0.isNativeObjectType());
      assertEquals(true, unknownType0.canBeCalled());
      assertEquals(false, unknownType0.isOrdinaryFunction());
      assertEquals(false, unknownType0.isNullType());
      assertEquals(false, unknownType0.isFunctionType());
      assertEquals(false, unknownType0.isFunctionPrototypeType());
      assertNotNull(instanceObjectType0);
  }

  @Test
  public void test28()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      boolean boolean0 = false;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0, boolean0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      String string0 = "]";
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, string0);
      assertEquals(false, errorFunctionType0.hasCachedValues());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertEquals(true, errorFunctionType0.isNominalConstructor());
      assertEquals(3, errorFunctionType0.getMaxArguments());
      assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      assertEquals(true, errorFunctionType0.hasInstanceType());
      assertEquals(false, errorFunctionType0.isUnionType());
      assertEquals(false, errorFunctionType0.isTemplateType());
      assertEquals(false, errorFunctionType0.isRecordType());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertEquals(true, errorFunctionType0.isConstructor());
      assertEquals(false, errorFunctionType0.isNoType());
      assertEquals(false, errorFunctionType0.isReturnTypeInferred());
      assertEquals(false, errorFunctionType0.isNullType());
      assertEquals(false, errorFunctionType0.isEnumType());
      assertEquals(false, errorFunctionType0.isFunctionPrototypeType());
      assertEquals(false, errorFunctionType0.isVoidType());
      assertEquals(false, errorFunctionType0.isNominalType());
      assertEquals(false, errorFunctionType0.isCheckedUnknownType());
      assertEquals(false, errorFunctionType0.isNoResolvedType());
      assertEquals(false, errorFunctionType0.isAllType());
      assertEquals(false, errorFunctionType0.isNoObjectType());
      assertEquals(false, errorFunctionType0.isResolved());
      assertEquals(false, errorFunctionType0.isStringValueType());
      assertEquals(false, errorFunctionType0.isNumberValueType());
      assertEquals(false, errorFunctionType0.isBooleanValueType());
      assertEquals(true, errorFunctionType0.canBeCalled());
      assertEquals(false, errorFunctionType0.isInterface());
      assertEquals(true, errorFunctionType0.isFunctionType());
      assertEquals(false, errorFunctionType0.isParameterizedType());
      assertEquals(false, errorFunctionType0.isEnumElementType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(errorFunctionType0);
      
      int int0 = 7;
      FunctionType functionType0 = errorFunctionType0.getBindReturnType(int0);
      assertEquals(false, errorFunctionType0.hasCachedValues());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertEquals(true, errorFunctionType0.isNominalConstructor());
      assertEquals(3, errorFunctionType0.getMaxArguments());
      assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      assertEquals(true, errorFunctionType0.hasInstanceType());
      assertEquals(false, errorFunctionType0.isUnionType());
      assertEquals(false, errorFunctionType0.isTemplateType());
      assertEquals(false, errorFunctionType0.isRecordType());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertEquals(true, errorFunctionType0.isConstructor());
      assertEquals(false, errorFunctionType0.isNoType());
      assertEquals(false, errorFunctionType0.isReturnTypeInferred());
      assertEquals(false, errorFunctionType0.isNullType());
      assertEquals(false, errorFunctionType0.isEnumType());
      assertEquals(false, errorFunctionType0.isFunctionPrototypeType());
      assertEquals(false, errorFunctionType0.isVoidType());
      assertEquals(false, errorFunctionType0.isNominalType());
      assertEquals(false, errorFunctionType0.isCheckedUnknownType());
      assertEquals(false, errorFunctionType0.isNoResolvedType());
      assertEquals(false, errorFunctionType0.isAllType());
      assertEquals(false, errorFunctionType0.isNoObjectType());
      assertEquals(false, errorFunctionType0.isResolved());
      assertEquals(false, errorFunctionType0.isStringValueType());
      assertEquals(false, errorFunctionType0.isNumberValueType());
      assertEquals(false, errorFunctionType0.isBooleanValueType());
      assertEquals(true, errorFunctionType0.canBeCalled());
      assertEquals(false, errorFunctionType0.isInterface());
      assertEquals(true, errorFunctionType0.isFunctionType());
      assertEquals(false, errorFunctionType0.isParameterizedType());
      assertEquals(false, errorFunctionType0.isEnumElementType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, functionType0.isParameterizedType());
      assertEquals(false, functionType0.isAllType());
      assertEquals(false, functionType0.isNullType());
      assertEquals(false, functionType0.isUnionType());
      assertEquals(false, functionType0.isNumberValueType());
      assertEquals(0, functionType0.getMaxArguments());
      assertEquals(false, functionType0.isNoObjectType());
      assertEquals(false, functionType0.isFunctionPrototypeType());
      assertEquals(false, functionType0.isNominalType());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertEquals(false, functionType0.isNoType());
      assertEquals(false, functionType0.isVoidType());
      assertEquals(false, functionType0.isRecordType());
      assertEquals(true, functionType0.isOrdinaryFunction());
      assertEquals(false, functionType0.isReturnTypeInferred());
      assertEquals(false, functionType0.isNominalConstructor());
      assertEquals(false, functionType0.isCheckedUnknownType());
      assertEquals(false, functionType0.isEnumElementType());
      assertEquals(false, functionType0.isResolved());
      assertEquals(false, functionType0.isEnumType());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, functionType0.isNoResolvedType());
      assertEquals(false, functionType0.hasInstanceType());
      assertEquals(false, functionType0.isBooleanValueType());
      assertEquals(true, functionType0.isFunctionType());
      assertEquals(false, functionType0.isTemplateType());
      assertEquals(true, functionType0.canBeCalled());
      assertEquals(false, functionType0.isConstructor());
      assertEquals(false, functionType0.hasCachedValues());
      assertEquals(false, functionType0.isStringValueType());
      assertEquals(false, functionType0.isInterface());
      assertNotNull(functionType0);
      
      // Undeclared exception!
      try {
        FunctionType functionType1 = functionType0.getSuperClassConstructor();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test29()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      boolean boolean0 = false;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0, boolean0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      String string0 = ":yLTc+cK.&yC";
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, string0);
      assertEquals(false, errorFunctionType0.isUnionType());
      assertEquals(false, errorFunctionType0.isAllType());
      assertEquals(false, errorFunctionType0.isNoObjectType());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertEquals(true, errorFunctionType0.isConstructor());
      assertEquals(true, errorFunctionType0.isFunctionType());
      assertEquals(false, errorFunctionType0.isParameterizedType());
      assertEquals(false, errorFunctionType0.isNumberValueType());
      assertEquals(false, errorFunctionType0.isResolved());
      assertEquals(false, errorFunctionType0.isNominalType());
      assertEquals(false, errorFunctionType0.isEnumElementType());
      assertEquals(false, errorFunctionType0.isVoidType());
      assertEquals(false, errorFunctionType0.isNoResolvedType());
      assertEquals(true, errorFunctionType0.hasInstanceType());
      assertEquals(false, errorFunctionType0.isInterface());
      assertEquals(false, errorFunctionType0.isBooleanValueType());
      assertEquals(false, errorFunctionType0.isEnumType());
      assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      assertEquals(false, errorFunctionType0.isRecordType());
      assertEquals(false, errorFunctionType0.hasCachedValues());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, errorFunctionType0.isNullType());
      assertEquals(true, errorFunctionType0.isNominalConstructor());
      assertEquals(3, errorFunctionType0.getMaxArguments());
      assertEquals(false, errorFunctionType0.isReturnTypeInferred());
      assertEquals(false, errorFunctionType0.isTemplateType());
      assertEquals(true, errorFunctionType0.canBeCalled());
      assertEquals(false, errorFunctionType0.isFunctionPrototypeType());
      assertEquals(false, errorFunctionType0.isCheckedUnknownType());
      assertEquals(false, errorFunctionType0.isStringValueType());
      assertEquals(false, errorFunctionType0.isNoType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(errorFunctionType0);
      
      NoObjectType noObjectType0 = new NoObjectType(jSTypeRegistry0);
      assertEquals(false, noObjectType0.isUnionType());
      assertEquals(false, noObjectType0.isVoidType());
      assertEquals(false, noObjectType0.isParameterizedType());
      assertEquals(false, noObjectType0.isBooleanValueType());
      assertEquals(2147483647, noObjectType0.getPropertiesCount());
      assertEquals(false, noObjectType0.isCheckedUnknownType());
      assertEquals(false, noObjectType0.isReturnTypeInferred());
      assertEquals(true, noObjectType0.matchesObjectContext());
      assertEquals(false, noObjectType0.isFunctionPrototypeType());
      assertEquals(false, noObjectType0.isTemplateType());
      assertEquals(false, noObjectType0.isNumberValueType());
      assertEquals(true, noObjectType0.hasInstanceType());
      assertEquals(false, noObjectType0.isEnumElementType());
      assertEquals(false, noObjectType0.isAllType());
      assertEquals(false, noObjectType0.isEnumType());
      assertEquals(true, noObjectType0.isConstructor());
      assertEquals(false, noObjectType0.isNoResolvedType());
      assertEquals(BooleanLiteralSet.TRUE, noObjectType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noObjectType0.isNullType());
      assertEquals(0, noObjectType0.getExtendedInterfacesCount());
      assertEquals(false, noObjectType0.isNominalConstructor());
      assertEquals(true, noObjectType0.matchesNumberContext());
      assertEquals(false, noObjectType0.isNominalType());
      assertEquals(true, noObjectType0.isNoObjectType());
      assertEquals(false, noObjectType0.isRecordType());
      assertEquals(false, noObjectType0.isResolved());
      assertNull(noObjectType0.getReferenceName());
      assertEquals(false, noObjectType0.isInterface());
      assertEquals(false, noObjectType0.isStringValueType());
      assertEquals(true, noObjectType0.canBeCalled());
      assertEquals(false, noObjectType0.isFunctionType());
      assertEquals(false, noObjectType0.isNoType());
      assertEquals(false, noObjectType0.hasCachedValues());
      assertEquals(true, noObjectType0.matchesStringContext());
      assertEquals(false, noObjectType0.isOrdinaryFunction());
      assertEquals(2147483647, noObjectType0.getMaxArguments());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(noObjectType0);
      
      FunctionType functionType0 = errorFunctionType0.supAndInfHelper(noObjectType0, boolean0);
      assertEquals(false, noObjectType0.isUnionType());
      assertEquals(false, noObjectType0.isVoidType());
      assertEquals(false, noObjectType0.isParameterizedType());
      assertEquals(false, noObjectType0.isBooleanValueType());
      assertEquals(2147483647, noObjectType0.getPropertiesCount());
      assertEquals(false, noObjectType0.isCheckedUnknownType());
      assertEquals(false, noObjectType0.isReturnTypeInferred());
      assertEquals(true, noObjectType0.hasCachedValues());
      assertEquals(true, noObjectType0.matchesObjectContext());
      assertEquals(false, noObjectType0.isFunctionPrototypeType());
      assertEquals(false, noObjectType0.isTemplateType());
      assertEquals(false, noObjectType0.isNumberValueType());
      assertEquals(true, noObjectType0.hasInstanceType());
      assertEquals(false, noObjectType0.isEnumElementType());
      assertEquals(false, noObjectType0.isAllType());
      assertEquals(false, noObjectType0.isEnumType());
      assertEquals(true, noObjectType0.isConstructor());
      assertEquals(false, noObjectType0.isNoResolvedType());
      assertEquals(BooleanLiteralSet.TRUE, noObjectType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noObjectType0.isNullType());
      assertEquals(0, noObjectType0.getExtendedInterfacesCount());
      assertEquals(false, noObjectType0.isNominalConstructor());
      assertEquals(true, noObjectType0.matchesNumberContext());
      assertEquals(false, noObjectType0.isNominalType());
      assertEquals(true, noObjectType0.isNoObjectType());
      assertEquals(false, noObjectType0.isRecordType());
      assertEquals(false, noObjectType0.isResolved());
      assertNull(noObjectType0.getReferenceName());
      assertEquals(false, noObjectType0.isInterface());
      assertEquals(false, noObjectType0.isStringValueType());
      assertEquals(true, noObjectType0.canBeCalled());
      assertEquals(false, noObjectType0.isFunctionType());
      assertEquals(false, noObjectType0.isNoType());
      assertEquals(true, noObjectType0.matchesStringContext());
      assertEquals(false, noObjectType0.isOrdinaryFunction());
      assertEquals(2147483647, noObjectType0.getMaxArguments());
      assertEquals(false, errorFunctionType0.isUnionType());
      assertEquals(false, errorFunctionType0.isAllType());
      assertEquals(false, errorFunctionType0.isNoObjectType());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertEquals(true, errorFunctionType0.isConstructor());
      assertEquals(true, errorFunctionType0.isFunctionType());
      assertEquals(false, errorFunctionType0.isParameterizedType());
      assertEquals(false, errorFunctionType0.isNumberValueType());
      assertEquals(false, errorFunctionType0.isResolved());
      assertEquals(false, errorFunctionType0.isNominalType());
      assertEquals(false, errorFunctionType0.isEnumElementType());
      assertEquals(false, errorFunctionType0.isVoidType());
      assertEquals(false, errorFunctionType0.isNoResolvedType());
      assertEquals(true, errorFunctionType0.hasCachedValues());
      assertEquals(true, errorFunctionType0.hasInstanceType());
      assertEquals(false, errorFunctionType0.isInterface());
      assertEquals(false, errorFunctionType0.isBooleanValueType());
      assertEquals(false, errorFunctionType0.isEnumType());
      assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      assertEquals(false, errorFunctionType0.isRecordType());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, errorFunctionType0.isNullType());
      assertEquals(true, errorFunctionType0.isNominalConstructor());
      assertEquals(3, errorFunctionType0.getMaxArguments());
      assertEquals(false, errorFunctionType0.isReturnTypeInferred());
      assertEquals(false, errorFunctionType0.isTemplateType());
      assertEquals(true, errorFunctionType0.canBeCalled());
      assertEquals(false, errorFunctionType0.isFunctionPrototypeType());
      assertEquals(false, errorFunctionType0.isCheckedUnknownType());
      assertEquals(false, errorFunctionType0.isStringValueType());
      assertEquals(false, errorFunctionType0.isNoType());
      assertEquals(false, functionType0.isRecordType());
      assertEquals(false, functionType0.isNoObjectType());
      assertEquals(false, functionType0.isReturnTypeInferred());
      assertEquals(2147483647, functionType0.getMaxArguments());
      assertEquals(false, functionType0.isNoResolvedType());
      assertEquals(false, functionType0.isStringValueType());
      assertEquals(false, functionType0.isCheckedUnknownType());
      assertEquals(false, functionType0.hasCachedValues());
      assertEquals(true, functionType0.isOrdinaryFunction());
      assertEquals(false, functionType0.hasInstanceType());
      assertEquals(false, functionType0.isBooleanValueType());
      assertEquals(false, functionType0.isTemplateType());
      assertEquals(false, functionType0.isNoType());
      assertEquals(false, functionType0.isNullType());
      assertEquals(false, functionType0.isNominalConstructor());
      assertEquals(true, functionType0.canBeCalled());
      assertEquals(false, functionType0.isParameterizedType());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertEquals(false, functionType0.isVoidType());
      assertEquals(false, functionType0.isAllType());
      assertEquals(false, functionType0.isNumberValueType());
      assertEquals(false, functionType0.isConstructor());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, functionType0.isNominalType());
      assertEquals(true, functionType0.isFunctionType());
      assertEquals(false, functionType0.isInterface());
      assertEquals(false, functionType0.isUnionType());
      assertEquals(false, functionType0.isResolved());
      assertEquals(false, functionType0.isFunctionPrototypeType());
      assertEquals(false, functionType0.isEnumElementType());
      assertEquals(false, functionType0.isEnumType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(functionType0);
  }

  @Test
  public void test30()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      boolean boolean0 = false;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0, boolean0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, noResolvedType0.isUnionType());
      assertEquals(false, noResolvedType0.isNoObjectType());
      assertEquals(false, noResolvedType0.isTemplateType());
      assertEquals(2147483647, noResolvedType0.getPropertiesCount());
      assertEquals(false, noResolvedType0.isBooleanValueType());
      assertEquals(false, noResolvedType0.isNominalType());
      assertEquals(true, noResolvedType0.isConstructor());
      assertEquals(true, noResolvedType0.matchesObjectContext());
      assertEquals(false, noResolvedType0.isNominalConstructor());
      assertEquals(false, noResolvedType0.isNullType());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertEquals(false, noResolvedType0.isInterface());
      assertEquals(false, noResolvedType0.isNumberValueType());
      assertEquals(false, noResolvedType0.isFunctionPrototypeType());
      assertEquals(false, noResolvedType0.isVoidType());
      assertEquals(true, noResolvedType0.matchesNumberContext());
      assertEquals(false, noResolvedType0.isEnumType());
      assertEquals(false, noResolvedType0.isResolved());
      assertEquals(false, noResolvedType0.isCheckedUnknownType());
      assertEquals(false, noResolvedType0.isStringValueType());
      assertEquals(true, noResolvedType0.canBeCalled());
      assertEquals(true, noResolvedType0.matchesStringContext());
      assertEquals(false, noResolvedType0.isAllType());
      assertEquals(2147483647, noResolvedType0.getMaxArguments());
      assertEquals(true, noResolvedType0.hasInstanceType());
      assertEquals(false, noResolvedType0.isOrdinaryFunction());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertEquals(true, noResolvedType0.isNullable());
      assertEquals(false, noResolvedType0.isParameterizedType());
      assertEquals(false, noResolvedType0.isFunctionType());
      assertEquals(false, noResolvedType0.isReturnTypeInferred());
      assertNull(noResolvedType0.getReferenceName());
      assertEquals(false, noResolvedType0.isRecordType());
      assertEquals(false, noResolvedType0.hasCachedValues());
      assertEquals(false, noResolvedType0.isEnumElementType());
      assertNotNull(noResolvedType0);
      
      FunctionType functionType0 = noResolvedType0.cloneWithoutArrowType();
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, functionType0.hasCachedValues());
      assertEquals(2147483647, functionType0.getMaxArguments());
      assertEquals(false, functionType0.isAllType());
      assertEquals(false, functionType0.isNominalConstructor());
      assertEquals(false, functionType0.isNumberValueType());
      assertEquals(true, functionType0.isConstructor());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertEquals(false, functionType0.isNominalType());
      assertEquals(false, functionType0.isVoidType());
      assertEquals(false, functionType0.isEnumElementType());
      assertEquals(false, functionType0.isOrdinaryFunction());
      assertEquals(false, functionType0.isNullType());
      assertEquals(false, functionType0.isStringValueType());
      assertEquals(true, functionType0.isFunctionType());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, functionType0.isEnumType());
      assertEquals(false, functionType0.isNoResolvedType());
      assertEquals(false, functionType0.isCheckedUnknownType());
      assertEquals(false, functionType0.isBooleanValueType());
      assertEquals(false, functionType0.isNoObjectType());
      assertEquals(false, functionType0.isInterface());
      assertEquals(false, functionType0.isUnionType());
      assertEquals(false, functionType0.isParameterizedType());
      assertEquals(false, functionType0.isFunctionPrototypeType());
      assertEquals(false, functionType0.isRecordType());
      assertEquals(true, functionType0.canBeCalled());
      assertEquals(true, functionType0.hasInstanceType());
      assertEquals(false, functionType0.isNoType());
      assertEquals(false, functionType0.isTemplateType());
      assertEquals(false, functionType0.isResolved());
      assertEquals(false, functionType0.isReturnTypeInferred());
      assertEquals(false, noResolvedType0.isUnionType());
      assertEquals(false, noResolvedType0.isNoObjectType());
      assertEquals(false, noResolvedType0.isTemplateType());
      assertEquals(2147483647, noResolvedType0.getPropertiesCount());
      assertEquals(false, noResolvedType0.isBooleanValueType());
      assertEquals(false, noResolvedType0.isNominalType());
      assertEquals(true, noResolvedType0.isConstructor());
      assertEquals(true, noResolvedType0.matchesObjectContext());
      assertEquals(false, noResolvedType0.isNominalConstructor());
      assertEquals(false, noResolvedType0.isNullType());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertEquals(false, noResolvedType0.isInterface());
      assertEquals(false, noResolvedType0.isNumberValueType());
      assertEquals(false, noResolvedType0.isFunctionPrototypeType());
      assertEquals(false, noResolvedType0.isVoidType());
      assertEquals(true, noResolvedType0.matchesNumberContext());
      assertEquals(false, noResolvedType0.isEnumType());
      assertEquals(false, noResolvedType0.isResolved());
      assertEquals(false, noResolvedType0.isCheckedUnknownType());
      assertEquals(false, noResolvedType0.isStringValueType());
      assertEquals(true, noResolvedType0.canBeCalled());
      assertEquals(true, noResolvedType0.matchesStringContext());
      assertEquals(false, noResolvedType0.isAllType());
      assertEquals(2147483647, noResolvedType0.getMaxArguments());
      assertEquals(true, noResolvedType0.hasInstanceType());
      assertEquals(false, noResolvedType0.isOrdinaryFunction());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertEquals(true, noResolvedType0.isNullable());
      assertEquals(false, noResolvedType0.isParameterizedType());
      assertEquals(false, noResolvedType0.isFunctionType());
      assertEquals(false, noResolvedType0.isReturnTypeInferred());
      assertNull(noResolvedType0.getReferenceName());
      assertEquals(false, noResolvedType0.isRecordType());
      assertEquals(false, noResolvedType0.hasCachedValues());
      assertEquals(false, noResolvedType0.isEnumElementType());
      assertNotNull(functionType0);
      
      String string0 = "";
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, string0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, errorFunctionType0.isVoidType());
      assertEquals(false, errorFunctionType0.isCheckedUnknownType());
      assertEquals(false, errorFunctionType0.isRecordType());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, errorFunctionType0.isNullType());
      assertEquals(false, errorFunctionType0.isParameterizedType());
      assertEquals(false, errorFunctionType0.isUnionType());
      assertEquals(false, errorFunctionType0.isFunctionPrototypeType());
      assertEquals(false, errorFunctionType0.isEnumElementType());
      assertEquals(false, errorFunctionType0.hasCachedValues());
      assertEquals(true, errorFunctionType0.isFunctionType());
      assertEquals(false, errorFunctionType0.isNumberValueType());
      assertEquals(true, errorFunctionType0.canBeCalled());
      assertEquals(false, errorFunctionType0.isReturnTypeInferred());
      assertEquals(false, errorFunctionType0.isResolved());
      assertEquals(false, errorFunctionType0.isEnumType());
      assertEquals(false, errorFunctionType0.isAllType());
      assertEquals(true, errorFunctionType0.isNominalConstructor());
      assertEquals(false, errorFunctionType0.isNoObjectType());
      assertEquals(false, errorFunctionType0.isNoType());
      assertEquals(true, errorFunctionType0.hasInstanceType());
      assertEquals(3, errorFunctionType0.getMaxArguments());
      assertEquals(false, errorFunctionType0.isNoResolvedType());
      assertEquals(false, errorFunctionType0.isInterface());
      assertEquals(false, errorFunctionType0.isNominalType());
      assertEquals(false, errorFunctionType0.isStringValueType());
      assertEquals(false, errorFunctionType0.isTemplateType());
      assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      assertEquals(true, errorFunctionType0.isConstructor());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertEquals(false, errorFunctionType0.isBooleanValueType());
      assertNotNull(errorFunctionType0);
      
      JSType jSType0 = errorFunctionType0.getLeastSupertype((JSType) functionType0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, errorFunctionType0.isVoidType());
      assertEquals(false, errorFunctionType0.isCheckedUnknownType());
      assertEquals(false, errorFunctionType0.isRecordType());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, errorFunctionType0.isNullType());
      assertEquals(false, errorFunctionType0.isParameterizedType());
      assertEquals(false, errorFunctionType0.isUnionType());
      assertEquals(false, errorFunctionType0.isFunctionPrototypeType());
      assertEquals(false, errorFunctionType0.isEnumElementType());
      assertEquals(true, errorFunctionType0.isFunctionType());
      assertEquals(false, errorFunctionType0.isNumberValueType());
      assertEquals(true, errorFunctionType0.canBeCalled());
      assertEquals(false, errorFunctionType0.isReturnTypeInferred());
      assertEquals(false, errorFunctionType0.isResolved());
      assertEquals(false, errorFunctionType0.isEnumType());
      assertEquals(false, errorFunctionType0.isAllType());
      assertEquals(true, errorFunctionType0.hasCachedValues());
      assertEquals(true, errorFunctionType0.isNominalConstructor());
      assertEquals(false, errorFunctionType0.isNoObjectType());
      assertEquals(false, errorFunctionType0.isNoType());
      assertEquals(true, errorFunctionType0.hasInstanceType());
      assertEquals(3, errorFunctionType0.getMaxArguments());
      assertEquals(false, errorFunctionType0.isNoResolvedType());
      assertEquals(false, errorFunctionType0.isInterface());
      assertEquals(false, errorFunctionType0.isNominalType());
      assertEquals(false, errorFunctionType0.isStringValueType());
      assertEquals(false, errorFunctionType0.isTemplateType());
      assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      assertEquals(true, errorFunctionType0.isConstructor());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertEquals(false, errorFunctionType0.isBooleanValueType());
      assertEquals(false, jSType0.isNumberValueType());
      assertEquals(true, jSType0.isFunctionType());
      assertEquals(false, jSType0.isTemplateType());
      assertEquals(false, jSType0.isNominalType());
      assertEquals(false, jSType0.isStringValueType());
      assertEquals(false, jSType0.isOrdinaryFunction());
      assertEquals(false, jSType0.isUnionType());
      assertEquals(false, jSType0.isParameterizedType());
      assertEquals(false, jSType0.isRecordType());
      assertEquals(false, jSType0.isVoidType());
      assertEquals(false, jSType0.isFunctionPrototypeType());
      assertEquals(false, jSType0.isNoResolvedType());
      assertEquals(false, jSType0.isCheckedUnknownType());
      assertEquals(false, jSType0.isEnumElementType());
      assertEquals(false, jSType0.isNullType());
      assertEquals(true, jSType0.isNominalConstructor());
      assertEquals(true, jSType0.isConstructor());
      assertEquals(false, jSType0.isAllType());
      assertEquals(false, jSType0.isResolved());
      assertEquals(false, jSType0.isNoObjectType());
      assertEquals(false, jSType0.isEnumType());
      assertEquals(false, jSType0.isNoType());
      assertEquals(false, jSType0.isInterface());
      assertEquals(false, jSType0.isBooleanValueType());
      assertEquals(2147483647, functionType0.getMaxArguments());
      assertEquals(false, functionType0.isAllType());
      assertEquals(false, functionType0.isNominalConstructor());
      assertEquals(false, functionType0.isNumberValueType());
      assertEquals(true, functionType0.isConstructor());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertEquals(false, functionType0.isNominalType());
      assertEquals(false, functionType0.isVoidType());
      assertEquals(false, functionType0.isEnumElementType());
      assertEquals(false, functionType0.isOrdinaryFunction());
      assertEquals(false, functionType0.isNullType());
      assertEquals(false, functionType0.isStringValueType());
      assertEquals(true, functionType0.isFunctionType());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, functionType0.isEnumType());
      assertEquals(false, functionType0.isNoResolvedType());
      assertEquals(false, functionType0.isCheckedUnknownType());
      assertEquals(false, functionType0.isBooleanValueType());
      assertEquals(false, functionType0.isNoObjectType());
      assertEquals(false, functionType0.isInterface());
      assertEquals(false, functionType0.isUnionType());
      assertEquals(false, functionType0.isParameterizedType());
      assertEquals(false, functionType0.isFunctionPrototypeType());
      assertEquals(false, functionType0.isRecordType());
      assertEquals(true, functionType0.canBeCalled());
      assertEquals(true, functionType0.hasInstanceType());
      assertEquals(false, functionType0.isNoType());
      assertEquals(false, functionType0.isTemplateType());
      assertEquals(true, functionType0.hasCachedValues());
      assertEquals(false, functionType0.isResolved());
      assertEquals(false, functionType0.isReturnTypeInferred());
      assertEquals(false, noResolvedType0.isUnionType());
      assertEquals(false, noResolvedType0.isNoObjectType());
      assertEquals(false, noResolvedType0.isTemplateType());
      assertEquals(2147483647, noResolvedType0.getPropertiesCount());
      assertEquals(false, noResolvedType0.isBooleanValueType());
      assertEquals(false, noResolvedType0.isNominalType());
      assertEquals(true, noResolvedType0.isConstructor());
      assertEquals(true, noResolvedType0.matchesObjectContext());
      assertEquals(false, noResolvedType0.isNominalConstructor());
      assertEquals(false, noResolvedType0.isNullType());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertEquals(false, noResolvedType0.isInterface());
      assertEquals(false, noResolvedType0.isNumberValueType());
      assertEquals(false, noResolvedType0.isFunctionPrototypeType());
      assertEquals(false, noResolvedType0.isVoidType());
      assertEquals(true, noResolvedType0.matchesNumberContext());
      assertEquals(false, noResolvedType0.isEnumType());
      assertEquals(false, noResolvedType0.isResolved());
      assertEquals(false, noResolvedType0.isCheckedUnknownType());
      assertEquals(false, noResolvedType0.isStringValueType());
      assertEquals(true, noResolvedType0.canBeCalled());
      assertEquals(true, noResolvedType0.matchesStringContext());
      assertEquals(false, noResolvedType0.isAllType());
      assertEquals(2147483647, noResolvedType0.getMaxArguments());
      assertEquals(true, noResolvedType0.hasInstanceType());
      assertEquals(false, noResolvedType0.isOrdinaryFunction());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertEquals(true, noResolvedType0.isNullable());
      assertEquals(false, noResolvedType0.isParameterizedType());
      assertEquals(false, noResolvedType0.isFunctionType());
      assertEquals(false, noResolvedType0.isReturnTypeInferred());
      assertNull(noResolvedType0.getReferenceName());
      assertEquals(false, noResolvedType0.isRecordType());
      assertEquals(false, noResolvedType0.hasCachedValues());
      assertEquals(false, noResolvedType0.isEnumElementType());
      assertNotNull(jSType0);
      
      JSType jSType1 = JSType.getLeastSupertype(functionType0, jSType0);
      assertSame(jSType1, jSType0);
      assertSame(jSType0, jSType1);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, errorFunctionType0.isVoidType());
      assertEquals(false, errorFunctionType0.isCheckedUnknownType());
      assertEquals(false, errorFunctionType0.isRecordType());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, errorFunctionType0.isNullType());
      assertEquals(false, errorFunctionType0.isParameterizedType());
      assertEquals(false, errorFunctionType0.isUnionType());
      assertEquals(false, errorFunctionType0.isFunctionPrototypeType());
      assertEquals(false, errorFunctionType0.isEnumElementType());
      assertEquals(true, errorFunctionType0.isFunctionType());
      assertEquals(false, errorFunctionType0.isNumberValueType());
      assertEquals(true, errorFunctionType0.canBeCalled());
      assertEquals(false, errorFunctionType0.isReturnTypeInferred());
      assertEquals(false, errorFunctionType0.isResolved());
      assertEquals(false, errorFunctionType0.isEnumType());
      assertEquals(false, errorFunctionType0.isAllType());
      assertEquals(true, errorFunctionType0.hasCachedValues());
      assertEquals(true, errorFunctionType0.isNominalConstructor());
      assertEquals(false, errorFunctionType0.isNoObjectType());
      assertEquals(false, errorFunctionType0.isNoType());
      assertEquals(true, errorFunctionType0.hasInstanceType());
      assertEquals(3, errorFunctionType0.getMaxArguments());
      assertEquals(false, errorFunctionType0.isNoResolvedType());
      assertEquals(false, errorFunctionType0.isInterface());
      assertEquals(false, errorFunctionType0.isNominalType());
      assertEquals(false, errorFunctionType0.isStringValueType());
      assertEquals(false, errorFunctionType0.isTemplateType());
      assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      assertEquals(true, errorFunctionType0.isConstructor());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertEquals(false, errorFunctionType0.isBooleanValueType());
      assertEquals(false, jSType1.isVoidType());
      assertEquals(true, jSType1.isNominalConstructor());
      assertEquals(false, jSType1.isTemplateType());
      assertEquals(false, jSType1.isInterface());
      assertEquals(false, jSType1.isNullType());
      assertEquals(false, jSType1.isAllType());
      assertEquals(false, jSType1.isNoResolvedType());
      assertEquals(false, jSType1.isEnumElementType());
      assertEquals(false, jSType1.isEnumType());
      assertEquals(true, jSType1.isFunctionType());
      assertEquals(false, jSType1.isNoType());
      assertEquals(false, jSType1.isNumberValueType());
      assertEquals(false, jSType1.isOrdinaryFunction());
      assertEquals(false, jSType1.isRecordType());
      assertEquals(false, jSType1.isCheckedUnknownType());
      assertEquals(false, jSType1.isNoObjectType());
      assertEquals(true, jSType1.isConstructor());
      assertEquals(false, jSType1.isFunctionPrototypeType());
      assertEquals(false, jSType1.isParameterizedType());
      assertEquals(false, jSType1.isResolved());
      assertEquals(false, jSType1.isStringValueType());
      assertEquals(false, jSType1.isUnionType());
      assertEquals(false, jSType1.isBooleanValueType());
      assertEquals(false, jSType1.isNominalType());
      assertEquals(false, jSType0.isNumberValueType());
      assertEquals(true, jSType0.isFunctionType());
      assertEquals(false, jSType0.isTemplateType());
      assertEquals(false, jSType0.isNominalType());
      assertEquals(false, jSType0.isStringValueType());
      assertEquals(false, jSType0.isOrdinaryFunction());
      assertEquals(false, jSType0.isUnionType());
      assertEquals(false, jSType0.isParameterizedType());
      assertEquals(false, jSType0.isRecordType());
      assertEquals(false, jSType0.isVoidType());
      assertEquals(false, jSType0.isFunctionPrototypeType());
      assertEquals(false, jSType0.isNoResolvedType());
      assertEquals(false, jSType0.isCheckedUnknownType());
      assertEquals(false, jSType0.isEnumElementType());
      assertEquals(false, jSType0.isNullType());
      assertEquals(true, jSType0.isNominalConstructor());
      assertEquals(true, jSType0.isConstructor());
      assertEquals(false, jSType0.isAllType());
      assertEquals(false, jSType0.isResolved());
      assertEquals(false, jSType0.isNoObjectType());
      assertEquals(false, jSType0.isEnumType());
      assertEquals(false, jSType0.isNoType());
      assertEquals(false, jSType0.isInterface());
      assertEquals(false, jSType0.isBooleanValueType());
      assertEquals(2147483647, functionType0.getMaxArguments());
      assertEquals(false, functionType0.isAllType());
      assertEquals(false, functionType0.isNominalConstructor());
      assertEquals(false, functionType0.isNumberValueType());
      assertEquals(true, functionType0.isConstructor());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertEquals(false, functionType0.isNominalType());
      assertEquals(false, functionType0.isVoidType());
      assertEquals(false, functionType0.isEnumElementType());
      assertEquals(false, functionType0.isOrdinaryFunction());
      assertEquals(false, functionType0.isNullType());
      assertEquals(false, functionType0.isStringValueType());
      assertEquals(true, functionType0.isFunctionType());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, functionType0.isEnumType());
      assertEquals(false, functionType0.isNoResolvedType());
      assertEquals(false, functionType0.isCheckedUnknownType());
      assertEquals(false, functionType0.isBooleanValueType());
      assertEquals(false, functionType0.isNoObjectType());
      assertEquals(false, functionType0.isInterface());
      assertEquals(false, functionType0.isUnionType());
      assertEquals(false, functionType0.isParameterizedType());
      assertEquals(false, functionType0.isFunctionPrototypeType());
      assertEquals(false, functionType0.isRecordType());
      assertEquals(true, functionType0.canBeCalled());
      assertEquals(true, functionType0.hasInstanceType());
      assertEquals(false, functionType0.isNoType());
      assertEquals(false, functionType0.isTemplateType());
      assertEquals(true, functionType0.hasCachedValues());
      assertEquals(false, functionType0.isResolved());
      assertEquals(false, functionType0.isReturnTypeInferred());
      assertEquals(false, noResolvedType0.isUnionType());
      assertEquals(false, noResolvedType0.isNoObjectType());
      assertEquals(false, noResolvedType0.isTemplateType());
      assertEquals(2147483647, noResolvedType0.getPropertiesCount());
      assertEquals(false, noResolvedType0.isBooleanValueType());
      assertEquals(false, noResolvedType0.isNominalType());
      assertEquals(true, noResolvedType0.isConstructor());
      assertEquals(true, noResolvedType0.matchesObjectContext());
      assertEquals(false, noResolvedType0.isNominalConstructor());
      assertEquals(false, noResolvedType0.isNullType());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertEquals(false, noResolvedType0.isInterface());
      assertEquals(false, noResolvedType0.isNumberValueType());
      assertEquals(false, noResolvedType0.isFunctionPrototypeType());
      assertEquals(false, noResolvedType0.isVoidType());
      assertEquals(true, noResolvedType0.matchesNumberContext());
      assertEquals(false, noResolvedType0.isEnumType());
      assertEquals(false, noResolvedType0.isResolved());
      assertEquals(false, noResolvedType0.isCheckedUnknownType());
      assertEquals(false, noResolvedType0.isStringValueType());
      assertEquals(true, noResolvedType0.canBeCalled());
      assertEquals(true, noResolvedType0.matchesStringContext());
      assertEquals(false, noResolvedType0.isAllType());
      assertEquals(2147483647, noResolvedType0.getMaxArguments());
      assertEquals(true, noResolvedType0.hasInstanceType());
      assertEquals(false, noResolvedType0.isOrdinaryFunction());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertEquals(true, noResolvedType0.isNullable());
      assertEquals(false, noResolvedType0.isParameterizedType());
      assertEquals(false, noResolvedType0.isFunctionType());
      assertEquals(false, noResolvedType0.isReturnTypeInferred());
      assertNull(noResolvedType0.getReferenceName());
      assertEquals(false, noResolvedType0.isRecordType());
      assertEquals(false, noResolvedType0.hasCachedValues());
      assertEquals(false, noResolvedType0.isEnumElementType());
      assertNotNull(jSType1);
  }

  @Test
  public void test31()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      boolean boolean0 = false;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0, boolean0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noResolvedType0.isInterface());
      assertEquals(false, noResolvedType0.isResolved());
      assertEquals(false, noResolvedType0.isStringValueType());
      assertEquals(false, noResolvedType0.isAllType());
      assertEquals(true, noResolvedType0.matchesNumberContext());
      assertEquals(true, noResolvedType0.isConstructor());
      assertEquals(false, noResolvedType0.isNullType());
      assertEquals(false, noResolvedType0.isTemplateType());
      assertEquals(false, noResolvedType0.isNumberValueType());
      assertEquals(false, noResolvedType0.isVoidType());
      assertNull(noResolvedType0.getReferenceName());
      assertEquals(true, noResolvedType0.canBeCalled());
      assertEquals(false, noResolvedType0.isCheckedUnknownType());
      assertEquals(false, noResolvedType0.isFunctionType());
      assertEquals(false, noResolvedType0.isUnionType());
      assertEquals(false, noResolvedType0.isEnumType());
      assertEquals(2147483647, noResolvedType0.getMaxArguments());
      assertEquals(false, noResolvedType0.isNoObjectType());
      assertEquals(2147483647, noResolvedType0.getPropertiesCount());
      assertEquals(true, noResolvedType0.matchesStringContext());
      assertEquals(false, noResolvedType0.hasCachedValues());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertEquals(false, noResolvedType0.isOrdinaryFunction());
      assertEquals(false, noResolvedType0.isEnumElementType());
      assertEquals(false, noResolvedType0.isBooleanValueType());
      assertEquals(true, noResolvedType0.hasInstanceType());
      assertEquals(false, noResolvedType0.isReturnTypeInferred());
      assertEquals(true, noResolvedType0.matchesObjectContext());
      assertEquals(false, noResolvedType0.isNominalConstructor());
      assertEquals(false, noResolvedType0.isRecordType());
      assertEquals(false, noResolvedType0.isParameterizedType());
      assertEquals(false, noResolvedType0.isFunctionPrototypeType());
      assertEquals(false, noResolvedType0.isNominalType());
      assertEquals(true, noResolvedType0.isNullable());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(noResolvedType0);
      
      FunctionType functionType0 = noResolvedType0.cloneWithoutArrowType();
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noResolvedType0.isInterface());
      assertEquals(false, noResolvedType0.isResolved());
      assertEquals(false, noResolvedType0.isStringValueType());
      assertEquals(false, noResolvedType0.isAllType());
      assertEquals(true, noResolvedType0.matchesNumberContext());
      assertEquals(true, noResolvedType0.isConstructor());
      assertEquals(false, noResolvedType0.isNullType());
      assertEquals(false, noResolvedType0.isTemplateType());
      assertEquals(false, noResolvedType0.isNumberValueType());
      assertEquals(false, noResolvedType0.isVoidType());
      assertNull(noResolvedType0.getReferenceName());
      assertEquals(true, noResolvedType0.canBeCalled());
      assertEquals(false, noResolvedType0.isCheckedUnknownType());
      assertEquals(false, noResolvedType0.isFunctionType());
      assertEquals(false, noResolvedType0.isUnionType());
      assertEquals(false, noResolvedType0.isEnumType());
      assertEquals(2147483647, noResolvedType0.getMaxArguments());
      assertEquals(false, noResolvedType0.isNoObjectType());
      assertEquals(2147483647, noResolvedType0.getPropertiesCount());
      assertEquals(true, noResolvedType0.matchesStringContext());
      assertEquals(false, noResolvedType0.hasCachedValues());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertEquals(false, noResolvedType0.isOrdinaryFunction());
      assertEquals(false, noResolvedType0.isEnumElementType());
      assertEquals(false, noResolvedType0.isBooleanValueType());
      assertEquals(true, noResolvedType0.hasInstanceType());
      assertEquals(false, noResolvedType0.isReturnTypeInferred());
      assertEquals(true, noResolvedType0.matchesObjectContext());
      assertEquals(false, noResolvedType0.isNominalConstructor());
      assertEquals(false, noResolvedType0.isRecordType());
      assertEquals(false, noResolvedType0.isParameterizedType());
      assertEquals(false, noResolvedType0.isFunctionPrototypeType());
      assertEquals(false, noResolvedType0.isNominalType());
      assertEquals(true, noResolvedType0.isNullable());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, functionType0.isNumberValueType());
      assertEquals(false, functionType0.isNoResolvedType());
      assertEquals(false, functionType0.isNominalType());
      assertEquals(false, functionType0.isTemplateType());
      assertEquals(false, functionType0.isVoidType());
      assertEquals(false, functionType0.isStringValueType());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertEquals(false, functionType0.isEnumType());
      assertEquals(true, functionType0.isConstructor());
      assertEquals(false, functionType0.isCheckedUnknownType());
      assertEquals(false, functionType0.isNominalConstructor());
      assertEquals(false, functionType0.isNoObjectType());
      assertEquals(false, functionType0.isFunctionPrototypeType());
      assertEquals(true, functionType0.canBeCalled());
      assertEquals(false, functionType0.hasCachedValues());
      assertEquals(2147483647, functionType0.getMaxArguments());
      assertEquals(false, functionType0.isUnionType());
      assertEquals(false, functionType0.isEnumElementType());
      assertEquals(false, functionType0.isOrdinaryFunction());
      assertEquals(false, functionType0.isAllType());
      assertEquals(false, functionType0.isInterface());
      assertEquals(false, functionType0.isResolved());
      assertEquals(false, functionType0.isRecordType());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertEquals(true, functionType0.isFunctionType());
      assertEquals(false, functionType0.isNullType());
      assertEquals(false, functionType0.isParameterizedType());
      assertEquals(false, functionType0.isNoType());
      assertEquals(true, functionType0.hasInstanceType());
      assertEquals(false, functionType0.isBooleanValueType());
      assertEquals(false, functionType0.isReturnTypeInferred());
      assertNotNull(functionType0);
      
      boolean boolean1 = true;
      FunctionType functionType1 = noResolvedType0.supAndInfHelper(functionType0, boolean1);
      assertNotSame(functionType0, functionType1);
      assertNotSame(functionType1, functionType0);
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noResolvedType0.isInterface());
      assertEquals(false, noResolvedType0.isResolved());
      assertEquals(false, noResolvedType0.isStringValueType());
      assertEquals(false, noResolvedType0.isAllType());
      assertEquals(true, noResolvedType0.matchesNumberContext());
      assertEquals(true, noResolvedType0.isConstructor());
      assertEquals(false, noResolvedType0.isNullType());
      assertEquals(false, noResolvedType0.isTemplateType());
      assertEquals(false, noResolvedType0.isNumberValueType());
      assertEquals(false, noResolvedType0.isVoidType());
      assertNull(noResolvedType0.getReferenceName());
      assertEquals(true, noResolvedType0.canBeCalled());
      assertEquals(false, noResolvedType0.isCheckedUnknownType());
      assertEquals(false, noResolvedType0.isFunctionType());
      assertEquals(false, noResolvedType0.isUnionType());
      assertEquals(false, noResolvedType0.isEnumType());
      assertEquals(2147483647, noResolvedType0.getMaxArguments());
      assertEquals(false, noResolvedType0.isNoObjectType());
      assertEquals(2147483647, noResolvedType0.getPropertiesCount());
      assertEquals(true, noResolvedType0.matchesStringContext());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertEquals(false, noResolvedType0.isOrdinaryFunction());
      assertEquals(true, noResolvedType0.hasCachedValues());
      assertEquals(false, noResolvedType0.isEnumElementType());
      assertEquals(false, noResolvedType0.isBooleanValueType());
      assertEquals(true, noResolvedType0.hasInstanceType());
      assertEquals(false, noResolvedType0.isReturnTypeInferred());
      assertEquals(true, noResolvedType0.matchesObjectContext());
      assertEquals(false, noResolvedType0.isNominalConstructor());
      assertEquals(false, noResolvedType0.isRecordType());
      assertEquals(false, noResolvedType0.isParameterizedType());
      assertEquals(false, noResolvedType0.isFunctionPrototypeType());
      assertEquals(false, noResolvedType0.isNominalType());
      assertEquals(true, noResolvedType0.isNullable());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, functionType0.isNumberValueType());
      assertEquals(true, functionType0.hasCachedValues());
      assertEquals(false, functionType0.isNoResolvedType());
      assertEquals(false, functionType0.isNominalType());
      assertEquals(false, functionType0.isTemplateType());
      assertEquals(false, functionType0.isVoidType());
      assertEquals(false, functionType0.isStringValueType());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertEquals(false, functionType0.isEnumType());
      assertEquals(true, functionType0.isConstructor());
      assertEquals(false, functionType0.isCheckedUnknownType());
      assertEquals(false, functionType0.isNominalConstructor());
      assertEquals(false, functionType0.isNoObjectType());
      assertEquals(false, functionType0.isFunctionPrototypeType());
      assertEquals(true, functionType0.canBeCalled());
      assertEquals(2147483647, functionType0.getMaxArguments());
      assertEquals(false, functionType0.isUnionType());
      assertEquals(false, functionType0.isEnumElementType());
      assertEquals(false, functionType0.isOrdinaryFunction());
      assertEquals(false, functionType0.isAllType());
      assertEquals(false, functionType0.isInterface());
      assertEquals(false, functionType0.isResolved());
      assertEquals(false, functionType0.isRecordType());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertEquals(true, functionType0.isFunctionType());
      assertEquals(false, functionType0.isNullType());
      assertEquals(false, functionType0.isParameterizedType());
      assertEquals(false, functionType0.isNoType());
      assertEquals(true, functionType0.hasInstanceType());
      assertEquals(false, functionType0.isBooleanValueType());
      assertEquals(false, functionType0.isReturnTypeInferred());
      assertEquals(false, functionType1.isNominalType());
      assertEquals(false, functionType1.isEnumElementType());
      assertEquals(false, functionType1.isAllType());
      assertEquals(false, functionType1.isNoType());
      assertEquals(false, functionType1.isNoResolvedType());
      assertEquals(0, functionType1.getExtendedInterfacesCount());
      assertEquals(2147483647, functionType1.getMaxArguments());
      assertEquals(true, functionType1.isFunctionType());
      assertEquals(false, functionType1.isEnumType());
      assertEquals(false, functionType1.isFunctionPrototypeType());
      assertEquals(false, functionType1.isStringValueType());
      assertEquals(false, functionType1.isNumberValueType());
      assertEquals(false, functionType1.isRecordType());
      assertEquals(true, functionType1.isConstructor());
      assertEquals(false, functionType1.isNoObjectType());
      assertEquals(false, functionType1.isParameterizedType());
      assertEquals(false, functionType1.isInterface());
      assertEquals(true, functionType1.hasInstanceType());
      assertEquals(true, functionType1.isNominalConstructor());
      assertEquals(false, functionType1.isUnionType());
      assertEquals(true, functionType1.canBeCalled());
      assertEquals(false, functionType1.isTemplateType());
      assertEquals(false, functionType1.isOrdinaryFunction());
      assertEquals(BooleanLiteralSet.TRUE, functionType1.getPossibleToBooleanOutcomes());
      assertEquals(true, functionType1.hasCachedValues());
      assertEquals(false, functionType1.isBooleanValueType());
      assertEquals(false, functionType1.isReturnTypeInferred());
      assertEquals(false, functionType1.isResolved());
      assertEquals(false, functionType1.isVoidType());
      assertEquals(false, functionType1.isNullType());
      assertEquals(false, functionType1.isCheckedUnknownType());
      assertNotNull(functionType1);
      assertFalse(boolean0 == boolean1);
      assertFalse(functionType0.equals((Object)functionType1));
      assertFalse(functionType1.equals((Object)functionType0));
      assertFalse(boolean1 == boolean0);
      
      boolean boolean2 = functionType0.canTestForShallowEqualityWith((JSType) functionType1);
      assertNotSame(functionType0, functionType1);
      assertNotSame(functionType1, functionType0);
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noResolvedType0.isInterface());
      assertEquals(false, noResolvedType0.isResolved());
      assertEquals(false, noResolvedType0.isStringValueType());
      assertEquals(false, noResolvedType0.isAllType());
      assertEquals(true, noResolvedType0.matchesNumberContext());
      assertEquals(true, noResolvedType0.isConstructor());
      assertEquals(false, noResolvedType0.isNullType());
      assertEquals(false, noResolvedType0.isTemplateType());
      assertEquals(false, noResolvedType0.isNumberValueType());
      assertEquals(false, noResolvedType0.isVoidType());
      assertNull(noResolvedType0.getReferenceName());
      assertEquals(true, noResolvedType0.canBeCalled());
      assertEquals(false, noResolvedType0.isCheckedUnknownType());
      assertEquals(false, noResolvedType0.isFunctionType());
      assertEquals(false, noResolvedType0.isUnionType());
      assertEquals(false, noResolvedType0.isEnumType());
      assertEquals(2147483647, noResolvedType0.getMaxArguments());
      assertEquals(false, noResolvedType0.isNoObjectType());
      assertEquals(2147483647, noResolvedType0.getPropertiesCount());
      assertEquals(true, noResolvedType0.matchesStringContext());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertEquals(false, noResolvedType0.isOrdinaryFunction());
      assertEquals(true, noResolvedType0.hasCachedValues());
      assertEquals(false, noResolvedType0.isEnumElementType());
      assertEquals(false, noResolvedType0.isBooleanValueType());
      assertEquals(true, noResolvedType0.hasInstanceType());
      assertEquals(false, noResolvedType0.isReturnTypeInferred());
      assertEquals(true, noResolvedType0.matchesObjectContext());
      assertEquals(false, noResolvedType0.isNominalConstructor());
      assertEquals(false, noResolvedType0.isRecordType());
      assertEquals(false, noResolvedType0.isParameterizedType());
      assertEquals(false, noResolvedType0.isFunctionPrototypeType());
      assertEquals(false, noResolvedType0.isNominalType());
      assertEquals(true, noResolvedType0.isNullable());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, functionType0.isNumberValueType());
      assertEquals(true, functionType0.hasCachedValues());
      assertEquals(false, functionType0.isNoResolvedType());
      assertEquals(false, functionType0.isNominalType());
      assertEquals(false, functionType0.isTemplateType());
      assertEquals(false, functionType0.isVoidType());
      assertEquals(false, functionType0.isStringValueType());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertEquals(false, functionType0.isEnumType());
      assertEquals(true, functionType0.isConstructor());
      assertEquals(false, functionType0.isCheckedUnknownType());
      assertEquals(false, functionType0.isNominalConstructor());
      assertEquals(false, functionType0.isNoObjectType());
      assertEquals(false, functionType0.isFunctionPrototypeType());
      assertEquals(true, functionType0.canBeCalled());
      assertEquals(2147483647, functionType0.getMaxArguments());
      assertEquals(false, functionType0.isUnionType());
      assertEquals(false, functionType0.isEnumElementType());
      assertEquals(false, functionType0.isOrdinaryFunction());
      assertEquals(false, functionType0.isAllType());
      assertEquals(false, functionType0.isInterface());
      assertEquals(false, functionType0.isResolved());
      assertEquals(false, functionType0.isRecordType());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertEquals(true, functionType0.isFunctionType());
      assertEquals(false, functionType0.isNullType());
      assertEquals(false, functionType0.isParameterizedType());
      assertEquals(false, functionType0.isNoType());
      assertEquals(true, functionType0.hasInstanceType());
      assertEquals(false, functionType0.isBooleanValueType());
      assertEquals(false, functionType0.isReturnTypeInferred());
      assertEquals(false, functionType1.isNominalType());
      assertEquals(false, functionType1.isEnumElementType());
      assertEquals(false, functionType1.isAllType());
      assertEquals(false, functionType1.isNoType());
      assertEquals(false, functionType1.isNoResolvedType());
      assertEquals(0, functionType1.getExtendedInterfacesCount());
      assertEquals(2147483647, functionType1.getMaxArguments());
      assertEquals(true, functionType1.isFunctionType());
      assertEquals(false, functionType1.isEnumType());
      assertEquals(false, functionType1.isFunctionPrototypeType());
      assertEquals(false, functionType1.isStringValueType());
      assertEquals(false, functionType1.isNumberValueType());
      assertEquals(false, functionType1.isRecordType());
      assertEquals(true, functionType1.isConstructor());
      assertEquals(false, functionType1.isNoObjectType());
      assertEquals(false, functionType1.isParameterizedType());
      assertEquals(false, functionType1.isInterface());
      assertEquals(true, functionType1.hasInstanceType());
      assertEquals(true, functionType1.isNominalConstructor());
      assertEquals(false, functionType1.isUnionType());
      assertEquals(true, functionType1.canBeCalled());
      assertEquals(false, functionType1.isTemplateType());
      assertEquals(false, functionType1.isOrdinaryFunction());
      assertEquals(BooleanLiteralSet.TRUE, functionType1.getPossibleToBooleanOutcomes());
      assertEquals(true, functionType1.hasCachedValues());
      assertEquals(false, functionType1.isBooleanValueType());
      assertEquals(false, functionType1.isReturnTypeInferred());
      assertEquals(false, functionType1.isResolved());
      assertEquals(false, functionType1.isVoidType());
      assertEquals(false, functionType1.isNullType());
      assertEquals(false, functionType1.isCheckedUnknownType());
      assertTrue(boolean2);
      assertFalse(boolean0 == boolean2);
      assertFalse(boolean0 == boolean1);
      assertFalse(functionType0.equals((Object)functionType1));
      assertFalse(functionType1.equals((Object)functionType0));
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1 == boolean2);
  }

  @Test
  public void test32()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      boolean boolean0 = false;
      int int0 = 512;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0, boolean0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, noResolvedType0.isOrdinaryFunction());
      assertEquals(false, noResolvedType0.isEnumType());
      assertEquals(true, noResolvedType0.matchesObjectContext());
      assertEquals(false, noResolvedType0.isUnionType());
      assertEquals(true, noResolvedType0.isConstructor());
      assertEquals(true, noResolvedType0.matchesStringContext());
      assertEquals(false, noResolvedType0.isResolved());
      assertEquals(false, noResolvedType0.isReturnTypeInferred());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertEquals(false, noResolvedType0.isFunctionPrototypeType());
      assertNull(noResolvedType0.getReferenceName());
      assertEquals(false, noResolvedType0.isStringValueType());
      assertEquals(false, noResolvedType0.isRecordType());
      assertEquals(false, noResolvedType0.isVoidType());
      assertEquals(true, noResolvedType0.isNullable());
      assertEquals(false, noResolvedType0.isParameterizedType());
      assertEquals(false, noResolvedType0.isAllType());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noResolvedType0.isTemplateType());
      assertEquals(false, noResolvedType0.isNumberValueType());
      assertEquals(false, noResolvedType0.isNoObjectType());
      assertEquals(2147483647, noResolvedType0.getPropertiesCount());
      assertEquals(false, noResolvedType0.isNullType());
      assertEquals(true, noResolvedType0.matchesNumberContext());
      assertEquals(false, noResolvedType0.isBooleanValueType());
      assertEquals(false, noResolvedType0.isCheckedUnknownType());
      assertEquals(false, noResolvedType0.hasCachedValues());
      assertEquals(false, noResolvedType0.isFunctionType());
      assertEquals(false, noResolvedType0.isNominalType());
      assertEquals(true, noResolvedType0.hasInstanceType());
      assertEquals(false, noResolvedType0.isNominalConstructor());
      assertEquals(true, noResolvedType0.canBeCalled());
      assertEquals(false, noResolvedType0.isEnumElementType());
      assertEquals(false, noResolvedType0.isInterface());
      assertEquals(2147483647, noResolvedType0.getMaxArguments());
      assertNotNull(noResolvedType0);
      
      FunctionType functionType0 = noResolvedType0.getBindReturnType(int0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, functionType0.isFunctionPrototypeType());
      assertEquals(false, functionType0.isEnumElementType());
      assertEquals(true, functionType0.isFunctionType());
      assertEquals(false, functionType0.isResolved());
      assertEquals(false, functionType0.isCheckedUnknownType());
      assertEquals(false, functionType0.hasInstanceType());
      assertEquals(false, functionType0.isNominalType());
      assertEquals(false, functionType0.isStringValueType());
      assertEquals(false, functionType0.isEnumType());
      assertEquals(false, functionType0.isRecordType());
      assertEquals(false, functionType0.isNumberValueType());
      assertEquals(false, functionType0.isNominalConstructor());
      assertEquals(false, functionType0.isAllType());
      assertEquals(false, functionType0.isParameterizedType());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, functionType0.isNoResolvedType());
      assertEquals(true, functionType0.canBeCalled());
      assertEquals(true, functionType0.isOrdinaryFunction());
      assertEquals(false, functionType0.isBooleanValueType());
      assertEquals(2147483647, functionType0.getMaxArguments());
      assertEquals(false, functionType0.isNoObjectType());
      assertEquals(false, functionType0.isInterface());
      assertEquals(false, functionType0.isConstructor());
      assertEquals(false, functionType0.hasCachedValues());
      assertEquals(false, functionType0.isNoType());
      assertEquals(false, functionType0.isReturnTypeInferred());
      assertEquals(false, functionType0.isVoidType());
      assertEquals(false, functionType0.isUnionType());
      assertEquals(false, functionType0.isNullType());
      assertEquals(false, functionType0.isTemplateType());
      assertEquals(false, noResolvedType0.isOrdinaryFunction());
      assertEquals(false, noResolvedType0.isEnumType());
      assertEquals(true, noResolvedType0.matchesObjectContext());
      assertEquals(false, noResolvedType0.isUnionType());
      assertEquals(true, noResolvedType0.isConstructor());
      assertEquals(true, noResolvedType0.matchesStringContext());
      assertEquals(false, noResolvedType0.isResolved());
      assertEquals(false, noResolvedType0.isReturnTypeInferred());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertEquals(false, noResolvedType0.isFunctionPrototypeType());
      assertNull(noResolvedType0.getReferenceName());
      assertEquals(false, noResolvedType0.isStringValueType());
      assertEquals(false, noResolvedType0.isRecordType());
      assertEquals(false, noResolvedType0.isVoidType());
      assertEquals(true, noResolvedType0.isNullable());
      assertEquals(false, noResolvedType0.isParameterizedType());
      assertEquals(false, noResolvedType0.isAllType());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noResolvedType0.isTemplateType());
      assertEquals(false, noResolvedType0.isNumberValueType());
      assertEquals(false, noResolvedType0.isNoObjectType());
      assertEquals(2147483647, noResolvedType0.getPropertiesCount());
      assertEquals(false, noResolvedType0.isNullType());
      assertEquals(true, noResolvedType0.matchesNumberContext());
      assertEquals(false, noResolvedType0.isBooleanValueType());
      assertEquals(false, noResolvedType0.isCheckedUnknownType());
      assertEquals(false, noResolvedType0.hasCachedValues());
      assertEquals(false, noResolvedType0.isFunctionType());
      assertEquals(false, noResolvedType0.isNominalType());
      assertEquals(true, noResolvedType0.hasInstanceType());
      assertEquals(false, noResolvedType0.isNominalConstructor());
      assertEquals(true, noResolvedType0.canBeCalled());
      assertEquals(false, noResolvedType0.isEnumElementType());
      assertEquals(false, noResolvedType0.isInterface());
      assertEquals(2147483647, noResolvedType0.getMaxArguments());
      assertNotNull(functionType0);
  }

  @Test
  public void test33()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      boolean boolean0 = false;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0, boolean0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      String string0 = "]";
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, string0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, errorFunctionType0.isAllType());
      assertEquals(false, errorFunctionType0.isNoObjectType());
      assertEquals(false, errorFunctionType0.isNumberValueType());
      assertEquals(false, errorFunctionType0.isVoidType());
      assertEquals(false, errorFunctionType0.isStringValueType());
      assertEquals(true, errorFunctionType0.isConstructor());
      assertEquals(false, errorFunctionType0.isNoResolvedType());
      assertEquals(false, errorFunctionType0.isCheckedUnknownType());
      assertEquals(true, errorFunctionType0.isFunctionType());
      assertEquals(3, errorFunctionType0.getMaxArguments());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertEquals(false, errorFunctionType0.isUnionType());
      assertEquals(false, errorFunctionType0.isTemplateType());
      assertEquals(false, errorFunctionType0.hasCachedValues());
      assertEquals(false, errorFunctionType0.isNominalType());
      assertEquals(false, errorFunctionType0.isResolved());
      assertEquals(true, errorFunctionType0.canBeCalled());
      assertEquals(false, errorFunctionType0.isNullType());
      assertEquals(false, errorFunctionType0.isInterface());
      assertEquals(false, errorFunctionType0.isFunctionPrototypeType());
      assertEquals(false, errorFunctionType0.isRecordType());
      assertEquals(true, errorFunctionType0.isNominalConstructor());
      assertEquals(false, errorFunctionType0.isNoType());
      assertEquals(false, errorFunctionType0.isReturnTypeInferred());
      assertEquals(true, errorFunctionType0.hasInstanceType());
      assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      assertEquals(false, errorFunctionType0.isEnumType());
      assertEquals(false, errorFunctionType0.isBooleanValueType());
      assertEquals(false, errorFunctionType0.isEnumElementType());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, errorFunctionType0.isParameterizedType());
      assertNotNull(errorFunctionType0);
      
      int int0 = 7;
      FunctionType functionType0 = errorFunctionType0.getBindReturnType(int0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, functionType0.isEnumElementType());
      assertEquals(false, functionType0.isParameterizedType());
      assertEquals(true, functionType0.isFunctionType());
      assertEquals(false, functionType0.isNoObjectType());
      assertEquals(false, functionType0.isConstructor());
      assertEquals(false, functionType0.isNoResolvedType());
      assertEquals(false, functionType0.isNominalType());
      assertEquals(false, functionType0.isInterface());
      assertEquals(true, functionType0.isOrdinaryFunction());
      assertEquals(false, functionType0.hasCachedValues());
      assertEquals(false, functionType0.isEnumType());
      assertEquals(false, functionType0.isVoidType());
      assertEquals(false, functionType0.isUnionType());
      assertEquals(false, functionType0.isNominalConstructor());
      assertEquals(false, functionType0.isStringValueType());
      assertEquals(false, functionType0.isNumberValueType());
      assertEquals(false, functionType0.isFunctionPrototypeType());
      assertEquals(false, functionType0.isRecordType());
      assertEquals(false, functionType0.isReturnTypeInferred());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, functionType0.isCheckedUnknownType());
      assertEquals(false, functionType0.isNoType());
      assertEquals(false, functionType0.isResolved());
      assertEquals(true, functionType0.canBeCalled());
      assertEquals(false, functionType0.hasInstanceType());
      assertEquals(false, functionType0.isBooleanValueType());
      assertEquals(false, functionType0.isAllType());
      assertEquals(0, functionType0.getMaxArguments());
      assertEquals(false, functionType0.isTemplateType());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertEquals(false, functionType0.isNullType());
      assertEquals(false, errorFunctionType0.isAllType());
      assertEquals(false, errorFunctionType0.isNoObjectType());
      assertEquals(false, errorFunctionType0.isNumberValueType());
      assertEquals(false, errorFunctionType0.isVoidType());
      assertEquals(false, errorFunctionType0.isStringValueType());
      assertEquals(true, errorFunctionType0.isConstructor());
      assertEquals(false, errorFunctionType0.isNoResolvedType());
      assertEquals(false, errorFunctionType0.isCheckedUnknownType());
      assertEquals(true, errorFunctionType0.isFunctionType());
      assertEquals(3, errorFunctionType0.getMaxArguments());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertEquals(false, errorFunctionType0.isUnionType());
      assertEquals(false, errorFunctionType0.isTemplateType());
      assertEquals(false, errorFunctionType0.hasCachedValues());
      assertEquals(false, errorFunctionType0.isNominalType());
      assertEquals(false, errorFunctionType0.isResolved());
      assertEquals(true, errorFunctionType0.canBeCalled());
      assertEquals(false, errorFunctionType0.isNullType());
      assertEquals(false, errorFunctionType0.isInterface());
      assertEquals(false, errorFunctionType0.isFunctionPrototypeType());
      assertEquals(false, errorFunctionType0.isRecordType());
      assertEquals(true, errorFunctionType0.isNominalConstructor());
      assertEquals(false, errorFunctionType0.isNoType());
      assertEquals(false, errorFunctionType0.isReturnTypeInferred());
      assertEquals(true, errorFunctionType0.hasInstanceType());
      assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      assertEquals(false, errorFunctionType0.isEnumType());
      assertEquals(false, errorFunctionType0.isBooleanValueType());
      assertEquals(false, errorFunctionType0.isEnumElementType());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, errorFunctionType0.isParameterizedType());
      assertNotNull(functionType0);
      
      boolean boolean1 = functionType0.matchesUint32Context();
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, functionType0.isEnumElementType());
      assertEquals(false, functionType0.isParameterizedType());
      assertEquals(true, functionType0.isFunctionType());
      assertEquals(false, functionType0.isNoObjectType());
      assertEquals(false, functionType0.isConstructor());
      assertEquals(false, functionType0.isNoResolvedType());
      assertEquals(false, functionType0.isNominalType());
      assertEquals(false, functionType0.isInterface());
      assertEquals(true, functionType0.isOrdinaryFunction());
      assertEquals(false, functionType0.hasCachedValues());
      assertEquals(false, functionType0.isEnumType());
      assertEquals(false, functionType0.isVoidType());
      assertEquals(false, functionType0.isUnionType());
      assertEquals(false, functionType0.isNominalConstructor());
      assertEquals(false, functionType0.isStringValueType());
      assertEquals(false, functionType0.isNumberValueType());
      assertEquals(false, functionType0.isFunctionPrototypeType());
      assertEquals(false, functionType0.isRecordType());
      assertEquals(false, functionType0.isReturnTypeInferred());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, functionType0.isCheckedUnknownType());
      assertEquals(false, functionType0.isNoType());
      assertEquals(false, functionType0.isResolved());
      assertEquals(true, functionType0.canBeCalled());
      assertEquals(false, functionType0.hasInstanceType());
      assertEquals(false, functionType0.isBooleanValueType());
      assertEquals(false, functionType0.isAllType());
      assertEquals(0, functionType0.getMaxArguments());
      assertEquals(false, functionType0.isTemplateType());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertEquals(false, functionType0.isNullType());
      assertEquals(false, errorFunctionType0.isAllType());
      assertEquals(false, errorFunctionType0.isNoObjectType());
      assertEquals(false, errorFunctionType0.isNumberValueType());
      assertEquals(false, errorFunctionType0.isVoidType());
      assertEquals(false, errorFunctionType0.isStringValueType());
      assertEquals(true, errorFunctionType0.isConstructor());
      assertEquals(false, errorFunctionType0.isNoResolvedType());
      assertEquals(false, errorFunctionType0.isCheckedUnknownType());
      assertEquals(true, errorFunctionType0.isFunctionType());
      assertEquals(3, errorFunctionType0.getMaxArguments());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertEquals(false, errorFunctionType0.isUnionType());
      assertEquals(false, errorFunctionType0.isTemplateType());
      assertEquals(false, errorFunctionType0.hasCachedValues());
      assertEquals(false, errorFunctionType0.isNominalType());
      assertEquals(false, errorFunctionType0.isResolved());
      assertEquals(true, errorFunctionType0.canBeCalled());
      assertEquals(false, errorFunctionType0.isNullType());
      assertEquals(false, errorFunctionType0.isInterface());
      assertEquals(false, errorFunctionType0.isFunctionPrototypeType());
      assertEquals(false, errorFunctionType0.isRecordType());
      assertEquals(true, errorFunctionType0.isNominalConstructor());
      assertEquals(false, errorFunctionType0.isNoType());
      assertEquals(false, errorFunctionType0.isReturnTypeInferred());
      assertEquals(true, errorFunctionType0.hasInstanceType());
      assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      assertEquals(false, errorFunctionType0.isEnumType());
      assertEquals(false, errorFunctionType0.isBooleanValueType());
      assertEquals(false, errorFunctionType0.isEnumElementType());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, errorFunctionType0.isParameterizedType());
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean0 == boolean1);
  }

  @Test
  public void test34()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      boolean boolean0 = true;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0, boolean0);
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      String string0 = "NpaV?\\";
      NoType noType0 = new NoType(jSTypeRegistry0);
      assertEquals(true, noType0.matchesStringContext());
      assertEquals(false, noType0.isCheckedUnknownType());
      assertEquals(false, noType0.isFunctionPrototypeType());
      assertEquals(true, noType0.matchesNumberContext());
      assertEquals(false, noType0.hasCachedValues());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertEquals(true, noType0.canBeCalled());
      assertEquals(false, noType0.isRecordType());
      assertEquals(false, noType0.isInterface());
      assertEquals(false, noType0.isNominalType());
      assertEquals(true, noType0.isConstructor());
      assertEquals(false, noType0.isAllType());
      assertEquals(false, noType0.isNumberValueType());
      assertEquals(false, noType0.isNullType());
      assertEquals(true, noType0.matchesObjectContext());
      assertEquals(false, noType0.isParameterizedType());
      assertEquals(false, noType0.isOrdinaryFunction());
      assertEquals(true, noType0.isNoType());
      assertEquals(false, noType0.isNoObjectType());
      assertNull(noType0.getReferenceName());
      assertEquals(2147483647, noType0.getMaxArguments());
      assertEquals(false, noType0.isBooleanValueType());
      assertEquals(false, noType0.isReturnTypeInferred());
      assertEquals(false, noType0.isEnumType());
      assertEquals(true, noType0.isNullable());
      assertEquals(false, noType0.isEnumElementType());
      assertEquals(false, noType0.isUnionType());
      assertEquals(false, noType0.isNominalConstructor());
      assertEquals(false, noType0.isVoidType());
      assertEquals(false, noType0.isStringValueType());
      assertEquals(true, noType0.hasInstanceType());
      assertEquals(false, noType0.isTemplateType());
      assertEquals(false, noType0.isResolved());
      assertEquals(0, noType0.getExtendedInterfacesCount());
      assertEquals(2147483647, noType0.getPropertiesCount());
      assertEquals(false, noType0.isNoResolvedType());
      assertEquals(false, noType0.isFunctionType());
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(noType0);
      
      Node node0 = noType0.getRootNode();
      assertEquals(true, noType0.matchesStringContext());
      assertEquals(false, noType0.isCheckedUnknownType());
      assertEquals(false, noType0.isFunctionPrototypeType());
      assertEquals(true, noType0.matchesNumberContext());
      assertEquals(false, noType0.hasCachedValues());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertEquals(true, noType0.canBeCalled());
      assertEquals(false, noType0.isRecordType());
      assertEquals(false, noType0.isInterface());
      assertEquals(false, noType0.isNominalType());
      assertEquals(true, noType0.isConstructor());
      assertEquals(false, noType0.isAllType());
      assertEquals(false, noType0.isNumberValueType());
      assertEquals(false, noType0.isNullType());
      assertEquals(true, noType0.matchesObjectContext());
      assertEquals(false, noType0.isParameterizedType());
      assertEquals(false, noType0.isOrdinaryFunction());
      assertEquals(true, noType0.isNoType());
      assertEquals(false, noType0.isNoObjectType());
      assertNull(noType0.getReferenceName());
      assertEquals(2147483647, noType0.getMaxArguments());
      assertEquals(false, noType0.isBooleanValueType());
      assertEquals(false, noType0.isReturnTypeInferred());
      assertEquals(false, noType0.isEnumType());
      assertEquals(true, noType0.isNullable());
      assertEquals(false, noType0.isEnumElementType());
      assertEquals(false, noType0.isUnionType());
      assertEquals(false, noType0.isNominalConstructor());
      assertEquals(false, noType0.isVoidType());
      assertEquals(false, noType0.isStringValueType());
      assertEquals(true, noType0.hasInstanceType());
      assertEquals(false, noType0.isTemplateType());
      assertEquals(false, noType0.isResolved());
      assertEquals(0, noType0.getExtendedInterfacesCount());
      assertEquals(2147483647, noType0.getPropertiesCount());
      assertEquals(false, noType0.isNoResolvedType());
      assertEquals(false, noType0.isFunctionType());
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNull(node0);
      
      FunctionType functionType0 = FunctionType.forInterface(jSTypeRegistry0, string0, node0);
      assertEquals(true, noType0.matchesStringContext());
      assertEquals(false, noType0.isCheckedUnknownType());
      assertEquals(false, noType0.isFunctionPrototypeType());
      assertEquals(true, noType0.matchesNumberContext());
      assertEquals(false, noType0.hasCachedValues());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertEquals(true, noType0.canBeCalled());
      assertEquals(false, noType0.isRecordType());
      assertEquals(false, noType0.isInterface());
      assertEquals(false, noType0.isNominalType());
      assertEquals(true, noType0.isConstructor());
      assertEquals(false, noType0.isAllType());
      assertEquals(false, noType0.isNumberValueType());
      assertEquals(false, noType0.isNullType());
      assertEquals(true, noType0.matchesObjectContext());
      assertEquals(false, noType0.isParameterizedType());
      assertEquals(false, noType0.isOrdinaryFunction());
      assertEquals(true, noType0.isNoType());
      assertEquals(false, noType0.isNoObjectType());
      assertNull(noType0.getReferenceName());
      assertEquals(2147483647, noType0.getMaxArguments());
      assertEquals(false, noType0.isBooleanValueType());
      assertEquals(false, noType0.isReturnTypeInferred());
      assertEquals(false, noType0.isEnumType());
      assertEquals(true, noType0.isNullable());
      assertEquals(false, noType0.isEnumElementType());
      assertEquals(false, noType0.isUnionType());
      assertEquals(false, noType0.isNominalConstructor());
      assertEquals(false, noType0.isVoidType());
      assertEquals(false, noType0.isStringValueType());
      assertEquals(true, noType0.hasInstanceType());
      assertEquals(false, noType0.isTemplateType());
      assertEquals(false, noType0.isResolved());
      assertEquals(0, noType0.getExtendedInterfacesCount());
      assertEquals(2147483647, noType0.getPropertiesCount());
      assertEquals(false, noType0.isNoResolvedType());
      assertEquals(false, noType0.isFunctionType());
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, functionType0.isEnumElementType());
      assertEquals(0, functionType0.getMaxArguments());
      assertEquals(true, functionType0.isFunctionType());
      assertEquals(false, functionType0.isNumberValueType());
      assertEquals(false, functionType0.isTemplateType());
      assertEquals(false, functionType0.isUnionType());
      assertEquals(false, functionType0.isRecordType());
      assertEquals(true, functionType0.isInterface());
      assertEquals(false, functionType0.isNoType());
      assertEquals(false, functionType0.isNullType());
      assertEquals(false, functionType0.isAllType());
      assertEquals(false, functionType0.isBooleanValueType());
      assertEquals(false, functionType0.isCheckedUnknownType());
      assertEquals(true, functionType0.canBeCalled());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, functionType0.isFunctionPrototypeType());
      assertEquals(false, functionType0.isOrdinaryFunction());
      assertEquals(false, functionType0.isNominalType());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertEquals(false, functionType0.isResolved());
      assertEquals(false, functionType0.isParameterizedType());
      assertEquals(false, functionType0.isNoResolvedType());
      assertEquals(false, functionType0.isNominalConstructor());
      assertEquals(false, functionType0.hasCachedValues());
      assertEquals(false, functionType0.isEnumType());
      assertEquals(false, functionType0.isConstructor());
      assertEquals(false, functionType0.isVoidType());
      assertEquals(true, functionType0.hasInstanceType());
      assertEquals(false, functionType0.isStringValueType());
      assertEquals(false, functionType0.isReturnTypeInferred());
      assertEquals(false, functionType0.isNoObjectType());
      assertNotNull(functionType0);
      
      ArrayList<ObjectType> arrayList0 = new ArrayList<ObjectType>();
      assertEquals(0, arrayList0.size());
      assertEquals("[]", arrayList0.toString());
      assertEquals(true, arrayList0.isEmpty());
      assertNotNull(arrayList0);
      
      functionType0.setExtendedInterfaces((List<ObjectType>) arrayList0);
      assertEquals(true, noType0.matchesStringContext());
      assertEquals(false, noType0.isCheckedUnknownType());
      assertEquals(false, noType0.isFunctionPrototypeType());
      assertEquals(true, noType0.matchesNumberContext());
      assertEquals(false, noType0.hasCachedValues());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertEquals(true, noType0.canBeCalled());
      assertEquals(false, noType0.isRecordType());
      assertEquals(false, noType0.isInterface());
      assertEquals(false, noType0.isNominalType());
      assertEquals(true, noType0.isConstructor());
      assertEquals(false, noType0.isAllType());
      assertEquals(false, noType0.isNumberValueType());
      assertEquals(false, noType0.isNullType());
      assertEquals(true, noType0.matchesObjectContext());
      assertEquals(false, noType0.isParameterizedType());
      assertEquals(false, noType0.isOrdinaryFunction());
      assertEquals(true, noType0.isNoType());
      assertEquals(false, noType0.isNoObjectType());
      assertNull(noType0.getReferenceName());
      assertEquals(2147483647, noType0.getMaxArguments());
      assertEquals(false, noType0.isBooleanValueType());
      assertEquals(false, noType0.isReturnTypeInferred());
      assertEquals(false, noType0.isEnumType());
      assertEquals(true, noType0.isNullable());
      assertEquals(false, noType0.isEnumElementType());
      assertEquals(false, noType0.isUnionType());
      assertEquals(false, noType0.isNominalConstructor());
      assertEquals(false, noType0.isVoidType());
      assertEquals(false, noType0.isStringValueType());
      assertEquals(true, noType0.hasInstanceType());
      assertEquals(false, noType0.isTemplateType());
      assertEquals(false, noType0.isResolved());
      assertEquals(0, noType0.getExtendedInterfacesCount());
      assertEquals(2147483647, noType0.getPropertiesCount());
      assertEquals(false, noType0.isNoResolvedType());
      assertEquals(false, noType0.isFunctionType());
      assertEquals(0, arrayList0.size());
      assertEquals("[]", arrayList0.toString());
      assertEquals(true, arrayList0.isEmpty());
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, functionType0.isEnumElementType());
      assertEquals(0, functionType0.getMaxArguments());
      assertEquals(true, functionType0.isFunctionType());
      assertEquals(false, functionType0.isNumberValueType());
      assertEquals(false, functionType0.isTemplateType());
      assertEquals(false, functionType0.isUnionType());
      assertEquals(false, functionType0.isRecordType());
      assertEquals(true, functionType0.isInterface());
      assertEquals(false, functionType0.isNoType());
      assertEquals(false, functionType0.isNullType());
      assertEquals(false, functionType0.isAllType());
      assertEquals(false, functionType0.isBooleanValueType());
      assertEquals(false, functionType0.isCheckedUnknownType());
      assertEquals(true, functionType0.canBeCalled());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, functionType0.isFunctionPrototypeType());
      assertEquals(false, functionType0.isOrdinaryFunction());
      assertEquals(false, functionType0.isNominalType());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertEquals(false, functionType0.isResolved());
      assertEquals(false, functionType0.isParameterizedType());
      assertEquals(false, functionType0.isNoResolvedType());
      assertEquals(false, functionType0.isNominalConstructor());
      assertEquals(false, functionType0.hasCachedValues());
      assertEquals(false, functionType0.isEnumType());
      assertEquals(false, functionType0.isConstructor());
      assertEquals(false, functionType0.isVoidType());
      assertEquals(true, functionType0.hasInstanceType());
      assertEquals(false, functionType0.isStringValueType());
      assertEquals(false, functionType0.isReturnTypeInferred());
      assertEquals(false, functionType0.isNoObjectType());
  }

  @Test
  public void test35()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      boolean boolean0 = true;
      String string0 = "bind";
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0, boolean0);
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, string0);
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(true, errorFunctionType0.isFunctionType());
      assertEquals(false, errorFunctionType0.isNominalType());
      assertEquals(false, errorFunctionType0.isEnumType());
      assertEquals(false, errorFunctionType0.isResolved());
      assertEquals(false, errorFunctionType0.isEnumElementType());
      assertEquals(false, errorFunctionType0.isNoResolvedType());
      assertEquals(false, errorFunctionType0.isNoType());
      assertEquals(true, errorFunctionType0.canBeCalled());
      assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      assertEquals(false, errorFunctionType0.isUnionType());
      assertEquals(false, errorFunctionType0.isAllType());
      assertEquals(true, errorFunctionType0.isNominalConstructor());
      assertEquals(false, errorFunctionType0.isCheckedUnknownType());
      assertEquals(false, errorFunctionType0.isNumberValueType());
      assertEquals(false, errorFunctionType0.isNoObjectType());
      assertEquals(false, errorFunctionType0.isVoidType());
      assertEquals(true, errorFunctionType0.isConstructor());
      assertEquals(false, errorFunctionType0.isParameterizedType());
      assertEquals(false, errorFunctionType0.isTemplateType());
      assertEquals(3, errorFunctionType0.getMaxArguments());
      assertEquals(false, errorFunctionType0.hasCachedValues());
      assertEquals(true, errorFunctionType0.hasInstanceType());
      assertEquals(false, errorFunctionType0.isFunctionPrototypeType());
      assertEquals(false, errorFunctionType0.isInterface());
      assertEquals(false, errorFunctionType0.isBooleanValueType());
      assertEquals(false, errorFunctionType0.isStringValueType());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, errorFunctionType0.isRecordType());
      assertEquals(false, errorFunctionType0.isReturnTypeInferred());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertEquals(false, errorFunctionType0.isNullType());
      assertNotNull(errorFunctionType0);
      
      LinkedList<ObjectType> linkedList0 = new LinkedList<ObjectType>();
      assertEquals(0, linkedList0.size());
      assertEquals("[]", linkedList0.toString());
      assertNotNull(linkedList0);
      
      try {
        errorFunctionType0.setExtendedInterfaces((List<ObjectType>) linkedList0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test36()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      boolean boolean0 = false;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0, boolean0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      String string0 = ":yLTc+cK.&yC";
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, string0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, errorFunctionType0.isBooleanValueType());
      assertEquals(false, errorFunctionType0.hasCachedValues());
      assertEquals(false, errorFunctionType0.isInterface());
      assertEquals(false, errorFunctionType0.isCheckedUnknownType());
      assertEquals(false, errorFunctionType0.isVoidType());
      assertEquals(true, errorFunctionType0.isNominalConstructor());
      assertEquals(true, errorFunctionType0.isFunctionType());
      assertEquals(3, errorFunctionType0.getMaxArguments());
      assertEquals(false, errorFunctionType0.isReturnTypeInferred());
      assertEquals(false, errorFunctionType0.isTemplateType());
      assertEquals(false, errorFunctionType0.isStringValueType());
      assertEquals(false, errorFunctionType0.isNoType());
      assertEquals(false, errorFunctionType0.isEnumElementType());
      assertEquals(false, errorFunctionType0.isAllType());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertEquals(true, errorFunctionType0.canBeCalled());
      assertEquals(false, errorFunctionType0.isFunctionPrototypeType());
      assertEquals(false, errorFunctionType0.isNullType());
      assertEquals(true, errorFunctionType0.isConstructor());
      assertEquals(true, errorFunctionType0.hasInstanceType());
      assertEquals(false, errorFunctionType0.isNoResolvedType());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertEquals(false, errorFunctionType0.isResolved());
      assertEquals(false, errorFunctionType0.isEnumType());
      assertEquals(false, errorFunctionType0.isRecordType());
      assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      assertEquals(false, errorFunctionType0.isParameterizedType());
      assertEquals(false, errorFunctionType0.isNumberValueType());
      assertEquals(false, errorFunctionType0.isNoObjectType());
      assertEquals(false, errorFunctionType0.isNominalType());
      assertEquals(false, errorFunctionType0.isUnionType());
      assertNotNull(errorFunctionType0);
      
      Iterable<ObjectType> iterable0 = errorFunctionType0.getAllExtendedInterfaces();
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, errorFunctionType0.isBooleanValueType());
      assertEquals(false, errorFunctionType0.hasCachedValues());
      assertEquals(false, errorFunctionType0.isInterface());
      assertEquals(false, errorFunctionType0.isCheckedUnknownType());
      assertEquals(false, errorFunctionType0.isVoidType());
      assertEquals(true, errorFunctionType0.isNominalConstructor());
      assertEquals(true, errorFunctionType0.isFunctionType());
      assertEquals(3, errorFunctionType0.getMaxArguments());
      assertEquals(false, errorFunctionType0.isReturnTypeInferred());
      assertEquals(false, errorFunctionType0.isTemplateType());
      assertEquals(false, errorFunctionType0.isStringValueType());
      assertEquals(false, errorFunctionType0.isNoType());
      assertEquals(false, errorFunctionType0.isEnumElementType());
      assertEquals(false, errorFunctionType0.isAllType());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertEquals(true, errorFunctionType0.canBeCalled());
      assertEquals(false, errorFunctionType0.isFunctionPrototypeType());
      assertEquals(false, errorFunctionType0.isNullType());
      assertEquals(true, errorFunctionType0.isConstructor());
      assertEquals(true, errorFunctionType0.hasInstanceType());
      assertEquals(false, errorFunctionType0.isNoResolvedType());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertEquals(false, errorFunctionType0.isResolved());
      assertEquals(false, errorFunctionType0.isEnumType());
      assertEquals(false, errorFunctionType0.isRecordType());
      assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      assertEquals(false, errorFunctionType0.isParameterizedType());
      assertEquals(false, errorFunctionType0.isNumberValueType());
      assertEquals(false, errorFunctionType0.isNoObjectType());
      assertEquals(false, errorFunctionType0.isNominalType());
      assertEquals(false, errorFunctionType0.isUnionType());
      assertNotNull(iterable0);
  }

  @Test
  public void test37()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      boolean boolean0 = false;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0, boolean0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      assertEquals(false, noResolvedType0.isVoidType());
      assertEquals(true, noResolvedType0.canBeCalled());
      assertEquals(false, noResolvedType0.isFunctionType());
      assertEquals(false, noResolvedType0.isRecordType());
      assertEquals(false, noResolvedType0.isEnumElementType());
      assertEquals(true, noResolvedType0.isNullable());
      assertEquals(false, noResolvedType0.isParameterizedType());
      assertEquals(true, noResolvedType0.matchesObjectContext());
      assertEquals(false, noResolvedType0.isNullType());
      assertEquals(false, noResolvedType0.hasCachedValues());
      assertEquals(false, noResolvedType0.isNominalConstructor());
      assertEquals(false, noResolvedType0.isStringValueType());
      assertEquals(false, noResolvedType0.isFunctionPrototypeType());
      assertEquals(true, noResolvedType0.isConstructor());
      assertEquals(true, noResolvedType0.matchesStringContext());
      assertEquals(2147483647, noResolvedType0.getPropertiesCount());
      assertEquals(false, noResolvedType0.isTemplateType());
      assertEquals(false, noResolvedType0.isNumberValueType());
      assertEquals(false, noResolvedType0.isResolved());
      assertEquals(true, noResolvedType0.matchesNumberContext());
      assertEquals(false, noResolvedType0.isOrdinaryFunction());
      assertEquals(false, noResolvedType0.isReturnTypeInferred());
      assertEquals(false, noResolvedType0.isNominalType());
      assertEquals(false, noResolvedType0.isEnumType());
      assertEquals(true, noResolvedType0.hasInstanceType());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertEquals(false, noResolvedType0.isCheckedUnknownType());
      assertEquals(false, noResolvedType0.isAllType());
      assertEquals(2147483647, noResolvedType0.getMaxArguments());
      assertEquals(false, noResolvedType0.isInterface());
      assertEquals(false, noResolvedType0.isBooleanValueType());
      assertNull(noResolvedType0.getReferenceName());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noResolvedType0.isNoObjectType());
      assertEquals(false, noResolvedType0.isUnionType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(noResolvedType0);
      
      LinkedList<ObjectType> linkedList0 = new LinkedList<ObjectType>();
      assertEquals("[]", linkedList0.toString());
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      boolean boolean1 = linkedList0.add((ObjectType) noResolvedType0);
      assertEquals(false, noResolvedType0.isVoidType());
      assertEquals(true, noResolvedType0.canBeCalled());
      assertEquals(false, noResolvedType0.isFunctionType());
      assertEquals(false, noResolvedType0.isRecordType());
      assertEquals(false, noResolvedType0.isEnumElementType());
      assertEquals(true, noResolvedType0.isNullable());
      assertEquals(false, noResolvedType0.isParameterizedType());
      assertEquals(true, noResolvedType0.matchesObjectContext());
      assertEquals(false, noResolvedType0.isNullType());
      assertEquals(false, noResolvedType0.hasCachedValues());
      assertEquals(false, noResolvedType0.isNominalConstructor());
      assertEquals(false, noResolvedType0.isStringValueType());
      assertEquals(false, noResolvedType0.isFunctionPrototypeType());
      assertEquals(true, noResolvedType0.isConstructor());
      assertEquals(true, noResolvedType0.matchesStringContext());
      assertEquals(2147483647, noResolvedType0.getPropertiesCount());
      assertEquals(false, noResolvedType0.isTemplateType());
      assertEquals(false, noResolvedType0.isNumberValueType());
      assertEquals(false, noResolvedType0.isResolved());
      assertEquals(true, noResolvedType0.matchesNumberContext());
      assertEquals(false, noResolvedType0.isOrdinaryFunction());
      assertEquals(false, noResolvedType0.isReturnTypeInferred());
      assertEquals(false, noResolvedType0.isNominalType());
      assertEquals(false, noResolvedType0.isEnumType());
      assertEquals(true, noResolvedType0.hasInstanceType());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertEquals(false, noResolvedType0.isCheckedUnknownType());
      assertEquals(false, noResolvedType0.isAllType());
      assertEquals(2147483647, noResolvedType0.getMaxArguments());
      assertEquals(false, noResolvedType0.isInterface());
      assertEquals(false, noResolvedType0.isBooleanValueType());
      assertNull(noResolvedType0.getReferenceName());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noResolvedType0.isNoObjectType());
      assertEquals(false, noResolvedType0.isUnionType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals("[NoResolvedType]", linkedList0.toString());
      assertEquals(1, linkedList0.size());
      assertTrue(boolean1);
      assertFalse(boolean0 == boolean1);
      assertFalse(boolean1 == boolean0);
      
      noResolvedType0.setImplementedInterfaces((List<ObjectType>) linkedList0);
      assertEquals(false, noResolvedType0.isVoidType());
      assertEquals(true, noResolvedType0.canBeCalled());
      assertEquals(false, noResolvedType0.isFunctionType());
      assertEquals(false, noResolvedType0.isRecordType());
      assertEquals(false, noResolvedType0.isEnumElementType());
      assertEquals(true, noResolvedType0.isNullable());
      assertEquals(false, noResolvedType0.isParameterizedType());
      assertEquals(true, noResolvedType0.matchesObjectContext());
      assertEquals(false, noResolvedType0.isNullType());
      assertEquals(false, noResolvedType0.hasCachedValues());
      assertEquals(false, noResolvedType0.isNominalConstructor());
      assertEquals(false, noResolvedType0.isStringValueType());
      assertEquals(false, noResolvedType0.isFunctionPrototypeType());
      assertEquals(true, noResolvedType0.isConstructor());
      assertEquals(true, noResolvedType0.matchesStringContext());
      assertEquals(2147483647, noResolvedType0.getPropertiesCount());
      assertEquals(false, noResolvedType0.isTemplateType());
      assertEquals(false, noResolvedType0.isNumberValueType());
      assertEquals(false, noResolvedType0.isResolved());
      assertEquals(true, noResolvedType0.matchesNumberContext());
      assertEquals(false, noResolvedType0.isOrdinaryFunction());
      assertEquals(false, noResolvedType0.isReturnTypeInferred());
      assertEquals(false, noResolvedType0.isNominalType());
      assertEquals(false, noResolvedType0.isEnumType());
      assertEquals(true, noResolvedType0.hasInstanceType());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertEquals(false, noResolvedType0.isCheckedUnknownType());
      assertEquals(false, noResolvedType0.isAllType());
      assertEquals(2147483647, noResolvedType0.getMaxArguments());
      assertEquals(false, noResolvedType0.isInterface());
      assertEquals(false, noResolvedType0.isBooleanValueType());
      assertNull(noResolvedType0.getReferenceName());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noResolvedType0.isNoObjectType());
      assertEquals(false, noResolvedType0.isUnionType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals("[NoResolvedType]", linkedList0.toString());
      assertEquals(1, linkedList0.size());
      assertFalse(boolean0 == boolean1);
  }

  @Test
  public void test38()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      String string0 = "prototype";
      boolean boolean0 = true;
      UnknownType unknownType0 = new UnknownType(jSTypeRegistry0, boolean0);
      assertEquals(false, unknownType0.isEnumType());
      assertEquals(false, unknownType0.isStringValueType());
      assertEquals("??", unknownType0.getReferenceName());
      assertEquals(false, unknownType0.isFunctionType());
      assertEquals(false, unknownType0.isNominalType());
      assertEquals(true, unknownType0.matchesStringContext());
      assertEquals(true, unknownType0.matchesObjectContext());
      assertEquals(false, unknownType0.isNumberValueType());
      assertEquals(false, unknownType0.isFunctionPrototypeType());
      assertEquals(false, unknownType0.isNoType());
      assertEquals(false, unknownType0.isTemplateType());
      assertEquals(false, unknownType0.isUnionType());
      assertEquals(false, unknownType0.isInterface());
      assertEquals(true, unknownType0.hasDisplayName());
      assertEquals(false, unknownType0.isVoidType());
      assertEquals(2147483647, unknownType0.getPropertiesCount());
      assertEquals(false, unknownType0.isNoObjectType());
      assertEquals(true, unknownType0.matchesNumberContext());
      assertEquals(false, unknownType0.isResolved());
      assertEquals(false, unknownType0.isNullType());
      assertEquals(false, unknownType0.isNominalConstructor());
      assertEquals(true, unknownType0.isNullable());
      assertEquals(true, unknownType0.isUnknownType());
      assertEquals(false, unknownType0.isParameterizedType());
      assertEquals(false, unknownType0.isBooleanValueType());
      assertEquals(false, unknownType0.isRecordType());
      assertEquals(false, unknownType0.hasCachedValues());
      assertEquals(false, unknownType0.isConstructor());
      assertEquals(false, unknownType0.isOrdinaryFunction());
      assertEquals(false, unknownType0.isEnumElementType());
      assertEquals(BooleanLiteralSet.BOTH, unknownType0.getPossibleToBooleanOutcomes());
      assertEquals(false, unknownType0.isAllType());
      assertEquals("Unknown", unknownType0.getDisplayName());
      assertEquals(true, unknownType0.canBeCalled());
      assertEquals(false, unknownType0.isNoResolvedType());
      assertEquals(false, unknownType0.isNativeObjectType());
      assertEquals(false, unknownType0.hasReferenceName());
      assertEquals(true, unknownType0.isCheckedUnknownType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(unknownType0);
      
      Node node0 = unknownType0.getRootNode();
      assertEquals(false, unknownType0.isEnumType());
      assertEquals(false, unknownType0.isStringValueType());
      assertEquals("??", unknownType0.getReferenceName());
      assertEquals(false, unknownType0.isFunctionType());
      assertEquals(false, unknownType0.isNominalType());
      assertEquals(true, unknownType0.matchesStringContext());
      assertEquals(true, unknownType0.matchesObjectContext());
      assertEquals(false, unknownType0.isNumberValueType());
      assertEquals(false, unknownType0.isFunctionPrototypeType());
      assertEquals(false, unknownType0.isNoType());
      assertEquals(false, unknownType0.isTemplateType());
      assertEquals(false, unknownType0.isUnionType());
      assertEquals(false, unknownType0.isInterface());
      assertEquals(true, unknownType0.hasDisplayName());
      assertEquals(false, unknownType0.isVoidType());
      assertEquals(2147483647, unknownType0.getPropertiesCount());
      assertEquals(false, unknownType0.isNoObjectType());
      assertEquals(true, unknownType0.matchesNumberContext());
      assertEquals(false, unknownType0.isResolved());
      assertEquals(false, unknownType0.isNullType());
      assertEquals(false, unknownType0.isNominalConstructor());
      assertEquals(true, unknownType0.isNullable());
      assertEquals(true, unknownType0.isUnknownType());
      assertEquals(false, unknownType0.isParameterizedType());
      assertEquals(false, unknownType0.isBooleanValueType());
      assertEquals(false, unknownType0.isRecordType());
      assertEquals(false, unknownType0.hasCachedValues());
      assertEquals(false, unknownType0.isConstructor());
      assertEquals(false, unknownType0.isOrdinaryFunction());
      assertEquals(false, unknownType0.isEnumElementType());
      assertEquals(BooleanLiteralSet.BOTH, unknownType0.getPossibleToBooleanOutcomes());
      assertEquals(false, unknownType0.isAllType());
      assertEquals("Unknown", unknownType0.getDisplayName());
      assertEquals(true, unknownType0.canBeCalled());
      assertEquals(false, unknownType0.isNoResolvedType());
      assertEquals(false, unknownType0.isNativeObjectType());
      assertEquals(false, unknownType0.hasReferenceName());
      assertEquals(true, unknownType0.isCheckedUnknownType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNull(node0);
      
      FunctionType functionType0 = FunctionType.forInterface(jSTypeRegistry0, string0, node0);
      assertEquals(false, unknownType0.isEnumType());
      assertEquals(false, unknownType0.isStringValueType());
      assertEquals("??", unknownType0.getReferenceName());
      assertEquals(false, unknownType0.isFunctionType());
      assertEquals(false, unknownType0.isNominalType());
      assertEquals(true, unknownType0.matchesStringContext());
      assertEquals(true, unknownType0.matchesObjectContext());
      assertEquals(false, unknownType0.isNumberValueType());
      assertEquals(false, unknownType0.isFunctionPrototypeType());
      assertEquals(false, unknownType0.isNoType());
      assertEquals(false, unknownType0.isTemplateType());
      assertEquals(false, unknownType0.isUnionType());
      assertEquals(false, unknownType0.isInterface());
      assertEquals(true, unknownType0.hasDisplayName());
      assertEquals(false, unknownType0.isVoidType());
      assertEquals(2147483647, unknownType0.getPropertiesCount());
      assertEquals(false, unknownType0.isNoObjectType());
      assertEquals(true, unknownType0.matchesNumberContext());
      assertEquals(false, unknownType0.isResolved());
      assertEquals(false, unknownType0.isNullType());
      assertEquals(false, unknownType0.isNominalConstructor());
      assertEquals(true, unknownType0.isNullable());
      assertEquals(true, unknownType0.isUnknownType());
      assertEquals(false, unknownType0.isParameterizedType());
      assertEquals(false, unknownType0.isBooleanValueType());
      assertEquals(false, unknownType0.isRecordType());
      assertEquals(false, unknownType0.hasCachedValues());
      assertEquals(false, unknownType0.isConstructor());
      assertEquals(false, unknownType0.isOrdinaryFunction());
      assertEquals(false, unknownType0.isEnumElementType());
      assertEquals(BooleanLiteralSet.BOTH, unknownType0.getPossibleToBooleanOutcomes());
      assertEquals(false, unknownType0.isAllType());
      assertEquals("Unknown", unknownType0.getDisplayName());
      assertEquals(true, unknownType0.canBeCalled());
      assertEquals(false, unknownType0.isNoResolvedType());
      assertEquals(false, unknownType0.isNativeObjectType());
      assertEquals(false, unknownType0.hasReferenceName());
      assertEquals(true, unknownType0.isCheckedUnknownType());
      assertEquals(false, functionType0.isStringValueType());
      assertEquals(false, functionType0.isReturnTypeInferred());
      assertEquals(0, functionType0.getMaxArguments());
      assertEquals(false, functionType0.isNullType());
      assertEquals(true, functionType0.isInterface());
      assertEquals(true, functionType0.hasInstanceType());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertEquals(false, functionType0.isRecordType());
      assertEquals(false, functionType0.isNumberValueType());
      assertEquals(false, functionType0.hasCachedValues());
      assertEquals(false, functionType0.isNoObjectType());
      assertEquals(false, functionType0.isNominalConstructor());
      assertEquals(false, functionType0.isAllType());
      assertEquals(true, functionType0.canBeCalled());
      assertEquals(false, functionType0.isResolved());
      assertEquals(false, functionType0.isNoType());
      assertEquals(false, functionType0.isEnumElementType());
      assertEquals(false, functionType0.isNominalType());
      assertEquals(false, functionType0.isTemplateType());
      assertEquals(false, functionType0.isNoResolvedType());
      assertEquals(false, functionType0.isEnumType());
      assertEquals(false, functionType0.isBooleanValueType());
      assertEquals(false, functionType0.isVoidType());
      assertEquals(true, functionType0.isFunctionType());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, functionType0.isUnionType());
      assertEquals(false, functionType0.isFunctionPrototypeType());
      assertEquals(false, functionType0.isParameterizedType());
      assertEquals(false, functionType0.isCheckedUnknownType());
      assertEquals(false, functionType0.isConstructor());
      assertEquals(false, functionType0.isOrdinaryFunction());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(functionType0);
      
      Stack<ObjectType> stack0 = new Stack<ObjectType>();
      assertEquals(true, stack0.isEmpty());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertEquals(true, stack0.empty());
      assertNotNull(stack0);
      
      // Undeclared exception!
      try {
        functionType0.setImplementedInterfaces((List<ObjectType>) stack0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test39()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      boolean boolean0 = false;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0, boolean0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      String string0 = "protoyp";
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, string0);
      assertEquals(false, errorFunctionType0.isNoType());
      assertEquals(false, errorFunctionType0.isVoidType());
      assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      assertEquals(false, errorFunctionType0.isRecordType());
      assertEquals(true, errorFunctionType0.isConstructor());
      assertEquals(false, errorFunctionType0.isResolved());
      assertEquals(false, errorFunctionType0.isEnumElementType());
      assertEquals(false, errorFunctionType0.isNoResolvedType());
      assertEquals(3, errorFunctionType0.getMaxArguments());
      assertEquals(false, errorFunctionType0.isStringValueType());
      assertEquals(true, errorFunctionType0.hasInstanceType());
      assertEquals(false, errorFunctionType0.hasCachedValues());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertEquals(false, errorFunctionType0.isNumberValueType());
      assertEquals(false, errorFunctionType0.isInterface());
      assertEquals(false, errorFunctionType0.isUnionType());
      assertEquals(false, errorFunctionType0.isNoObjectType());
      assertEquals(false, errorFunctionType0.isParameterizedType());
      assertEquals(true, errorFunctionType0.isFunctionType());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertEquals(true, errorFunctionType0.canBeCalled());
      assertEquals(false, errorFunctionType0.isBooleanValueType());
      assertEquals(false, errorFunctionType0.isAllType());
      assertEquals(false, errorFunctionType0.isFunctionPrototypeType());
      assertEquals(false, errorFunctionType0.isNullType());
      assertEquals(false, errorFunctionType0.isNominalType());
      assertEquals(false, errorFunctionType0.isReturnTypeInferred());
      assertEquals(false, errorFunctionType0.isTemplateType());
      assertEquals(false, errorFunctionType0.isCheckedUnknownType());
      assertEquals(true, errorFunctionType0.isNominalConstructor());
      assertEquals(false, errorFunctionType0.isEnumType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(errorFunctionType0);
      
      int int0 = 1523;
      FunctionType functionType0 = errorFunctionType0.getBindReturnType(int0);
      assertEquals(false, errorFunctionType0.isNoType());
      assertEquals(false, errorFunctionType0.isVoidType());
      assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      assertEquals(false, errorFunctionType0.isRecordType());
      assertEquals(true, errorFunctionType0.isConstructor());
      assertEquals(false, errorFunctionType0.isResolved());
      assertEquals(false, errorFunctionType0.isEnumElementType());
      assertEquals(false, errorFunctionType0.isNoResolvedType());
      assertEquals(3, errorFunctionType0.getMaxArguments());
      assertEquals(false, errorFunctionType0.isStringValueType());
      assertEquals(true, errorFunctionType0.hasInstanceType());
      assertEquals(false, errorFunctionType0.hasCachedValues());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertEquals(false, errorFunctionType0.isNumberValueType());
      assertEquals(false, errorFunctionType0.isInterface());
      assertEquals(false, errorFunctionType0.isUnionType());
      assertEquals(false, errorFunctionType0.isNoObjectType());
      assertEquals(false, errorFunctionType0.isParameterizedType());
      assertEquals(true, errorFunctionType0.isFunctionType());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertEquals(true, errorFunctionType0.canBeCalled());
      assertEquals(false, errorFunctionType0.isBooleanValueType());
      assertEquals(false, errorFunctionType0.isAllType());
      assertEquals(false, errorFunctionType0.isFunctionPrototypeType());
      assertEquals(false, errorFunctionType0.isNullType());
      assertEquals(false, errorFunctionType0.isNominalType());
      assertEquals(false, errorFunctionType0.isReturnTypeInferred());
      assertEquals(false, errorFunctionType0.isTemplateType());
      assertEquals(false, errorFunctionType0.isCheckedUnknownType());
      assertEquals(true, errorFunctionType0.isNominalConstructor());
      assertEquals(false, errorFunctionType0.isEnumType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(0, functionType0.getMaxArguments());
      assertEquals(false, functionType0.isVoidType());
      assertEquals(false, functionType0.isParameterizedType());
      assertEquals(true, functionType0.isFunctionType());
      assertEquals(false, functionType0.isReturnTypeInferred());
      assertEquals(true, functionType0.canBeCalled());
      assertEquals(false, functionType0.isStringValueType());
      assertEquals(false, functionType0.isNoObjectType());
      assertEquals(false, functionType0.isNoResolvedType());
      assertEquals(false, functionType0.isNominalType());
      assertEquals(false, functionType0.hasInstanceType());
      assertEquals(false, functionType0.isNominalConstructor());
      assertEquals(true, functionType0.isOrdinaryFunction());
      assertEquals(false, functionType0.isFunctionPrototypeType());
      assertEquals(false, functionType0.isInterface());
      assertEquals(false, functionType0.isEnumElementType());
      assertEquals(false, functionType0.hasCachedValues());
      assertEquals(false, functionType0.isNumberValueType());
      assertEquals(false, functionType0.isTemplateType());
      assertEquals(false, functionType0.isNullType());
      assertEquals(false, functionType0.isUnionType());
      assertEquals(false, functionType0.isNoType());
      assertEquals(false, functionType0.isCheckedUnknownType());
      assertEquals(false, functionType0.isAllType());
      assertEquals(false, functionType0.isResolved());
      assertEquals(false, functionType0.isRecordType());
      assertEquals(false, functionType0.isEnumType());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertEquals(false, functionType0.isConstructor());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, functionType0.isBooleanValueType());
      assertNotNull(functionType0);
      
      Iterable<ObjectType> iterable0 = functionType0.getAllImplementedInterfaces();
      assertEquals(false, errorFunctionType0.isNoType());
      assertEquals(false, errorFunctionType0.isVoidType());
      assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      assertEquals(false, errorFunctionType0.isRecordType());
      assertEquals(true, errorFunctionType0.isConstructor());
      assertEquals(false, errorFunctionType0.isResolved());
      assertEquals(false, errorFunctionType0.isEnumElementType());
      assertEquals(false, errorFunctionType0.isNoResolvedType());
      assertEquals(3, errorFunctionType0.getMaxArguments());
      assertEquals(false, errorFunctionType0.isStringValueType());
      assertEquals(true, errorFunctionType0.hasInstanceType());
      assertEquals(false, errorFunctionType0.hasCachedValues());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertEquals(false, errorFunctionType0.isNumberValueType());
      assertEquals(false, errorFunctionType0.isInterface());
      assertEquals(false, errorFunctionType0.isUnionType());
      assertEquals(false, errorFunctionType0.isNoObjectType());
      assertEquals(false, errorFunctionType0.isParameterizedType());
      assertEquals(true, errorFunctionType0.isFunctionType());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertEquals(true, errorFunctionType0.canBeCalled());
      assertEquals(false, errorFunctionType0.isBooleanValueType());
      assertEquals(false, errorFunctionType0.isAllType());
      assertEquals(false, errorFunctionType0.isFunctionPrototypeType());
      assertEquals(false, errorFunctionType0.isNullType());
      assertEquals(false, errorFunctionType0.isNominalType());
      assertEquals(false, errorFunctionType0.isReturnTypeInferred());
      assertEquals(false, errorFunctionType0.isTemplateType());
      assertEquals(false, errorFunctionType0.isCheckedUnknownType());
      assertEquals(true, errorFunctionType0.isNominalConstructor());
      assertEquals(false, errorFunctionType0.isEnumType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(0, functionType0.getMaxArguments());
      assertEquals(false, functionType0.isVoidType());
      assertEquals(false, functionType0.isParameterizedType());
      assertEquals(true, functionType0.isFunctionType());
      assertEquals(false, functionType0.isReturnTypeInferred());
      assertEquals(true, functionType0.canBeCalled());
      assertEquals(false, functionType0.isStringValueType());
      assertEquals(false, functionType0.isNoObjectType());
      assertEquals(false, functionType0.isNoResolvedType());
      assertEquals(false, functionType0.isNominalType());
      assertEquals(false, functionType0.hasInstanceType());
      assertEquals(false, functionType0.isNominalConstructor());
      assertEquals(true, functionType0.isOrdinaryFunction());
      assertEquals(false, functionType0.isFunctionPrototypeType());
      assertEquals(false, functionType0.isInterface());
      assertEquals(false, functionType0.isEnumElementType());
      assertEquals(false, functionType0.hasCachedValues());
      assertEquals(false, functionType0.isNumberValueType());
      assertEquals(false, functionType0.isTemplateType());
      assertEquals(false, functionType0.isNullType());
      assertEquals(false, functionType0.isUnionType());
      assertEquals(false, functionType0.isNoType());
      assertEquals(false, functionType0.isCheckedUnknownType());
      assertEquals(false, functionType0.isAllType());
      assertEquals(false, functionType0.isResolved());
      assertEquals(false, functionType0.isRecordType());
      assertEquals(false, functionType0.isEnumType());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertEquals(false, functionType0.isConstructor());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, functionType0.isBooleanValueType());
      assertNotNull(iterable0);
  }

  @Test
  public void test40()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      boolean boolean0 = false;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0, boolean0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      String string0 = ":yLTc+cK.&y";
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, string0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(true, errorFunctionType0.isFunctionType());
      assertEquals(false, errorFunctionType0.isVoidType());
      assertEquals(false, errorFunctionType0.isStringValueType());
      assertEquals(false, errorFunctionType0.isNoObjectType());
      assertEquals(false, errorFunctionType0.isEnumElementType());
      assertEquals(false, errorFunctionType0.isInterface());
      assertEquals(3, errorFunctionType0.getMaxArguments());
      assertEquals(true, errorFunctionType0.isConstructor());
      assertEquals(false, errorFunctionType0.isBooleanValueType());
      assertEquals(false, errorFunctionType0.isNominalType());
      assertEquals(false, errorFunctionType0.isRecordType());
      assertEquals(false, errorFunctionType0.isNullType());
      assertEquals(false, errorFunctionType0.isEnumType());
      assertEquals(false, errorFunctionType0.isTemplateType());
      assertEquals(false, errorFunctionType0.isReturnTypeInferred());
      assertEquals(true, errorFunctionType0.hasInstanceType());
      assertEquals(false, errorFunctionType0.isCheckedUnknownType());
      assertEquals(false, errorFunctionType0.isResolved());
      assertEquals(true, errorFunctionType0.canBeCalled());
      assertEquals(false, errorFunctionType0.isNumberValueType());
      assertEquals(false, errorFunctionType0.isAllType());
      assertEquals(true, errorFunctionType0.isNominalConstructor());
      assertEquals(false, errorFunctionType0.isParameterizedType());
      assertEquals(false, errorFunctionType0.isUnionType());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertEquals(false, errorFunctionType0.hasCachedValues());
      assertEquals(false, errorFunctionType0.isNoType());
      assertEquals(false, errorFunctionType0.isFunctionPrototypeType());
      assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, errorFunctionType0.isNoResolvedType());
      assertNotNull(errorFunctionType0);
      
      Iterable<ObjectType> iterable0 = errorFunctionType0.getAllImplementedInterfaces();
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(true, errorFunctionType0.isFunctionType());
      assertEquals(false, errorFunctionType0.isVoidType());
      assertEquals(false, errorFunctionType0.isStringValueType());
      assertEquals(false, errorFunctionType0.isNoObjectType());
      assertEquals(false, errorFunctionType0.isEnumElementType());
      assertEquals(false, errorFunctionType0.isInterface());
      assertEquals(3, errorFunctionType0.getMaxArguments());
      assertEquals(true, errorFunctionType0.isConstructor());
      assertEquals(false, errorFunctionType0.isBooleanValueType());
      assertEquals(false, errorFunctionType0.isNominalType());
      assertEquals(false, errorFunctionType0.isRecordType());
      assertEquals(false, errorFunctionType0.isNullType());
      assertEquals(false, errorFunctionType0.isEnumType());
      assertEquals(false, errorFunctionType0.isTemplateType());
      assertEquals(false, errorFunctionType0.isReturnTypeInferred());
      assertEquals(true, errorFunctionType0.hasInstanceType());
      assertEquals(false, errorFunctionType0.isCheckedUnknownType());
      assertEquals(false, errorFunctionType0.isResolved());
      assertEquals(true, errorFunctionType0.canBeCalled());
      assertEquals(false, errorFunctionType0.isNumberValueType());
      assertEquals(false, errorFunctionType0.isAllType());
      assertEquals(true, errorFunctionType0.isNominalConstructor());
      assertEquals(false, errorFunctionType0.isParameterizedType());
      assertEquals(false, errorFunctionType0.isUnionType());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertEquals(true, errorFunctionType0.hasCachedValues());
      assertEquals(false, errorFunctionType0.isNoType());
      assertEquals(false, errorFunctionType0.isFunctionPrototypeType());
      assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, errorFunctionType0.isNoResolvedType());
      assertNotNull(iterable0);
  }

  @Test
  public void test41()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      //  // Unstable assertion: assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0);
      //  // Unstable assertion: assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      //  // Unstable assertion: assertNotNull(jSTypeRegistry0);
      
      String string0 = "prototype";
      boolean boolean0 = true;
      UnknownType unknownType0 = new UnknownType(jSTypeRegistry0, boolean0);
      //  // Unstable assertion: assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      //  // Unstable assertion: assertEquals("??", unknownType0.getReferenceName());
      //  // Unstable assertion: assertEquals(true, unknownType0.matchesStringContext());
      //  // Unstable assertion: assertEquals(false, unknownType0.isFunctionPrototypeType());
      //  // Unstable assertion: assertEquals(false, unknownType0.isStringValueType());
      //  // Unstable assertion: assertEquals(false, unknownType0.isNumberValueType());
      //  // Unstable assertion: assertEquals(true, unknownType0.isCheckedUnknownType());
      //  // Unstable assertion: assertEquals(false, unknownType0.isNoResolvedType());
      //  // Unstable assertion: assertEquals(false, unknownType0.isVoidType());
      //  // Unstable assertion: assertEquals(2147483647, unknownType0.getPropertiesCount());
      //  // Unstable assertion: assertEquals(true, unknownType0.matchesObjectContext());
      //  // Unstable assertion: assertEquals(false, unknownType0.isTemplateType());
      //  // Unstable assertion: assertEquals(true, unknownType0.canBeCalled());
      //  // Unstable assertion: assertEquals(false, unknownType0.isAllType());
      //  // Unstable assertion: assertEquals(false, unknownType0.isResolved());
      //  // Unstable assertion: assertEquals(false, unknownType0.isNoObjectType());
      //  // Unstable assertion: assertEquals(false, unknownType0.hasCachedValues());
      //  // Unstable assertion: assertEquals(false, unknownType0.hasReferenceName());
      //  // Unstable assertion: assertEquals(false, unknownType0.isNullType());
      //  // Unstable assertion: assertEquals(true, unknownType0.isNullable());
      //  // Unstable assertion: assertEquals(false, unknownType0.isEnumElementType());
      //  // Unstable assertion: assertEquals(false, unknownType0.isNominalType());
      //  // Unstable assertion: assertEquals(false, unknownType0.isOrdinaryFunction());
      //  // Unstable assertion: assertEquals(false, unknownType0.isNativeObjectType());
      //  // Unstable assertion: assertEquals(true, unknownType0.isUnknownType());
      //  // Unstable assertion: assertEquals(false, unknownType0.isNominalConstructor());
      //  // Unstable assertion: assertEquals("Unknown", unknownType0.getDisplayName());
      //  // Unstable assertion: assertEquals(false, unknownType0.isUnionType());
      //  // Unstable assertion: assertEquals(false, unknownType0.isEnumType());
      //  // Unstable assertion: assertEquals(false, unknownType0.isFunctionType());
      //  // Unstable assertion: assertEquals(true, unknownType0.hasDisplayName());
      //  // Unstable assertion: assertEquals(false, unknownType0.isInterface());
      //  // Unstable assertion: assertEquals(false, unknownType0.isBooleanValueType());
      //  // Unstable assertion: assertEquals(false, unknownType0.isParameterizedType());
      //  // Unstable assertion: assertEquals(false, unknownType0.isRecordType());
      //  // Unstable assertion: assertEquals(false, unknownType0.isConstructor());
      //  // Unstable assertion: assertEquals(false, unknownType0.isNoType());
      //  // Unstable assertion: assertEquals(true, unknownType0.matchesNumberContext());
      //  // Unstable assertion: assertEquals(BooleanLiteralSet.BOTH, unknownType0.getPossibleToBooleanOutcomes());
      //  // Unstable assertion: assertNotNull(unknownType0);
      
      Node node0 = unknownType0.getRootNode();
      //  // Unstable assertion: assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      //  // Unstable assertion: assertEquals("??", unknownType0.getReferenceName());
      //  // Unstable assertion: assertEquals(true, unknownType0.matchesStringContext());
      //  // Unstable assertion: assertEquals(false, unknownType0.isFunctionPrototypeType());
      //  // Unstable assertion: assertEquals(false, unknownType0.isStringValueType());
      //  // Unstable assertion: assertEquals(false, unknownType0.isNumberValueType());
      //  // Unstable assertion: assertEquals(true, unknownType0.isCheckedUnknownType());
      //  // Unstable assertion: assertEquals(false, unknownType0.isNoResolvedType());
      //  // Unstable assertion: assertEquals(false, unknownType0.isVoidType());
      //  // Unstable assertion: assertEquals(2147483647, unknownType0.getPropertiesCount());
      //  // Unstable assertion: assertEquals(true, unknownType0.matchesObjectContext());
      //  // Unstable assertion: assertEquals(false, unknownType0.isTemplateType());
      //  // Unstable assertion: assertEquals(true, unknownType0.canBeCalled());
      //  // Unstable assertion: assertEquals(false, unknownType0.isAllType());
      //  // Unstable assertion: assertEquals(false, unknownType0.isResolved());
      //  // Unstable assertion: assertEquals(false, unknownType0.isNoObjectType());
      //  // Unstable assertion: assertEquals(false, unknownType0.hasCachedValues());
      //  // Unstable assertion: assertEquals(false, unknownType0.hasReferenceName());
      //  // Unstable assertion: assertEquals(false, unknownType0.isNullType());
      //  // Unstable assertion: assertEquals(true, unknownType0.isNullable());
      //  // Unstable assertion: assertEquals(false, unknownType0.isEnumElementType());
      //  // Unstable assertion: assertEquals(false, unknownType0.isNominalType());
      //  // Unstable assertion: assertEquals(false, unknownType0.isOrdinaryFunction());
      //  // Unstable assertion: assertEquals(false, unknownType0.isNativeObjectType());
      //  // Unstable assertion: assertEquals(true, unknownType0.isUnknownType());
      //  // Unstable assertion: assertEquals(false, unknownType0.isNominalConstructor());
      //  // Unstable assertion: assertEquals("Unknown", unknownType0.getDisplayName());
      //  // Unstable assertion: assertEquals(false, unknownType0.isUnionType());
      //  // Unstable assertion: assertEquals(false, unknownType0.isEnumType());
      //  // Unstable assertion: assertEquals(false, unknownType0.isFunctionType());
      //  // Unstable assertion: assertEquals(true, unknownType0.hasDisplayName());
      //  // Unstable assertion: assertEquals(false, unknownType0.isInterface());
      //  // Unstable assertion: assertEquals(false, unknownType0.isBooleanValueType());
      //  // Unstable assertion: assertEquals(false, unknownType0.isParameterizedType());
      //  // Unstable assertion: assertEquals(false, unknownType0.isRecordType());
      //  // Unstable assertion: assertEquals(false, unknownType0.isConstructor());
      //  // Unstable assertion: assertEquals(false, unknownType0.isNoType());
      //  // Unstable assertion: assertEquals(true, unknownType0.matchesNumberContext());
      //  // Unstable assertion: assertEquals(BooleanLiteralSet.BOTH, unknownType0.getPossibleToBooleanOutcomes());
      //  // Unstable assertion: assertNull(node0);
      
      FunctionType functionType0 = FunctionType.forInterface(jSTypeRegistry0, string0, node0);
      //  // Unstable assertion: assertEquals(true, functionType0.isInterface());
      //  // Unstable assertion: assertEquals(false, functionType0.isNumberValueType());
      //  // Unstable assertion: assertEquals(false, functionType0.isTemplateType());
      //  // Unstable assertion: assertEquals(0, functionType0.getExtendedInterfacesCount());
      //  // Unstable assertion: assertEquals(false, functionType0.isNominalConstructor());
      //  // Unstable assertion: assertEquals(false, functionType0.isEnumElementType());
      //  // Unstable assertion: assertEquals(false, functionType0.isFunctionPrototypeType());
      //  // Unstable assertion: assertEquals(false, functionType0.isReturnTypeInferred());
      //  // Unstable assertion: assertEquals(false, functionType0.isNoResolvedType());
      //  // Unstable assertion: assertEquals(false, functionType0.isVoidType());
      //  // Unstable assertion: assertEquals(false, functionType0.isNominalType());
      //  // Unstable assertion: assertEquals(false, functionType0.hasCachedValues());
      //  // Unstable assertion: assertEquals(false, functionType0.isNoType());
      //  // Unstable assertion: assertEquals(false, functionType0.isNoObjectType());
      //  // Unstable assertion: assertEquals(false, functionType0.isAllType());
      //  // Unstable assertion: assertEquals(true, functionType0.hasInstanceType());
      //  // Unstable assertion: assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      //  // Unstable assertion: assertEquals(false, functionType0.isConstructor());
      //  // Unstable assertion: assertEquals(false, functionType0.isCheckedUnknownType());
      //  // Unstable assertion: assertEquals(true, functionType0.isFunctionType());
      //  // Unstable assertion: assertEquals(false, functionType0.isResolved());
      //  // Unstable assertion: assertEquals(false, functionType0.isUnionType());
      //  // Unstable assertion: assertEquals(0, functionType0.getMaxArguments());
      //  // Unstable assertion: assertEquals(false, functionType0.isParameterizedType());
      //  // Unstable assertion: assertEquals(false, functionType0.isNullType());
      //  // Unstable assertion: assertEquals(true, functionType0.canBeCalled());
      //  // Unstable assertion: assertEquals(false, functionType0.isStringValueType());
      //  // Unstable assertion: assertEquals(false, functionType0.isOrdinaryFunction());
      //  // Unstable assertion: assertEquals(false, functionType0.isEnumType());
      //  // Unstable assertion: assertEquals(false, functionType0.isRecordType());
      //  // Unstable assertion: assertEquals(false, functionType0.isBooleanValueType());
      //  // Unstable assertion: assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      //  // Unstable assertion: assertEquals("??", unknownType0.getReferenceName());
      //  // Unstable assertion: assertEquals(true, unknownType0.matchesStringContext());
      //  // Unstable assertion: assertEquals(false, unknownType0.isFunctionPrototypeType());
      //  // Unstable assertion: assertEquals(false, unknownType0.isStringValueType());
      //  // Unstable assertion: assertEquals(false, unknownType0.isNumberValueType());
      //  // Unstable assertion: assertEquals(true, unknownType0.isCheckedUnknownType());
      //  // Unstable assertion: assertEquals(false, unknownType0.isNoResolvedType());
      //  // Unstable assertion: assertEquals(false, unknownType0.isVoidType());
      //  // Unstable assertion: assertEquals(2147483647, unknownType0.getPropertiesCount());
      //  // Unstable assertion: assertEquals(true, unknownType0.matchesObjectContext());
      //  // Unstable assertion: assertEquals(false, unknownType0.isTemplateType());
      //  // Unstable assertion: assertEquals(true, unknownType0.canBeCalled());
      //  // Unstable assertion: assertEquals(false, unknownType0.isAllType());
      //  // Unstable assertion: assertEquals(false, unknownType0.isResolved());
      //  // Unstable assertion: assertEquals(false, unknownType0.isNoObjectType());
      //  // Unstable assertion: assertEquals(false, unknownType0.hasCachedValues());
      //  // Unstable assertion: assertEquals(false, unknownType0.hasReferenceName());
      //  // Unstable assertion: assertEquals(false, unknownType0.isNullType());
      //  // Unstable assertion: assertEquals(true, unknownType0.isNullable());
      //  // Unstable assertion: assertEquals(false, unknownType0.isEnumElementType());
      //  // Unstable assertion: assertEquals(false, unknownType0.isNominalType());
      //  // Unstable assertion: assertEquals(false, unknownType0.isOrdinaryFunction());
      //  // Unstable assertion: assertEquals(false, unknownType0.isNativeObjectType());
      //  // Unstable assertion: assertEquals(true, unknownType0.isUnknownType());
      //  // Unstable assertion: assertEquals(false, unknownType0.isNominalConstructor());
      //  // Unstable assertion: assertEquals("Unknown", unknownType0.getDisplayName());
      //  // Unstable assertion: assertEquals(false, unknownType0.isUnionType());
      //  // Unstable assertion: assertEquals(false, unknownType0.isEnumType());
      //  // Unstable assertion: assertEquals(false, unknownType0.isFunctionType());
      //  // Unstable assertion: assertEquals(true, unknownType0.hasDisplayName());
      //  // Unstable assertion: assertEquals(false, unknownType0.isInterface());
      //  // Unstable assertion: assertEquals(false, unknownType0.isBooleanValueType());
      //  // Unstable assertion: assertEquals(false, unknownType0.isParameterizedType());
      //  // Unstable assertion: assertEquals(false, unknownType0.isRecordType());
      //  // Unstable assertion: assertEquals(false, unknownType0.isConstructor());
      //  // Unstable assertion: assertEquals(false, unknownType0.isNoType());
      //  // Unstable assertion: assertEquals(true, unknownType0.matchesNumberContext());
      //  // Unstable assertion: assertEquals(BooleanLiteralSet.BOTH, unknownType0.getPossibleToBooleanOutcomes());
      //  // Unstable assertion: assertNotNull(functionType0);
      
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      //  // Unstable assertion: assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      //  // Unstable assertion: assertEquals(true, noResolvedType0.hasInstanceType());
      //  // Unstable assertion: assertEquals(false, noResolvedType0.isUnionType());
      //  // Unstable assertion: assertEquals(false, noResolvedType0.isCheckedUnknownType());
      //  // Unstable assertion: assertNull(noResolvedType0.getReferenceName());
      //  // Unstable assertion: assertEquals(false, noResolvedType0.isReturnTypeInferred());
      //  // Unstable assertion: assertEquals(false, noResolvedType0.isTemplateType());
      //  // Unstable assertion: assertEquals(false, noResolvedType0.isNumberValueType());
      //  // Unstable assertion: assertEquals(false, noResolvedType0.isFunctionType());
      //  // Unstable assertion: assertEquals(true, noResolvedType0.matchesObjectContext());
      //  // Unstable assertion: assertEquals(false, noResolvedType0.isInterface());
      //  // Unstable assertion: assertEquals(2147483647, noResolvedType0.getMaxArguments());
      //  // Unstable assertion: assertEquals(true, noResolvedType0.isNullable());
      //  // Unstable assertion: assertEquals(true, noResolvedType0.matchesNumberContext());
      //  // Unstable assertion: assertEquals(false, noResolvedType0.isFunctionPrototypeType());
      //  // Unstable assertion: assertEquals(false, noResolvedType0.isNominalType());
      //  // Unstable assertion: assertEquals(false, noResolvedType0.isParameterizedType());
      //  // Unstable assertion: assertEquals(false, noResolvedType0.isAllType());
      //  // Unstable assertion: assertEquals(true, noResolvedType0.canBeCalled());
      //  // Unstable assertion: assertEquals(2147483647, noResolvedType0.getPropertiesCount());
      //  // Unstable assertion: assertEquals(false, noResolvedType0.isEnumElementType());
      //  // Unstable assertion: assertEquals(false, noResolvedType0.isResolved());
      //  // Unstable assertion: assertEquals(false, noResolvedType0.isRecordType());
      //  // Unstable assertion: assertEquals(false, noResolvedType0.isVoidType());
      //  // Unstable assertion: assertEquals(false, noResolvedType0.isNominalConstructor());
      //  // Unstable assertion: assertEquals(true, noResolvedType0.matchesStringContext());
      //  // Unstable assertion: assertEquals(false, noResolvedType0.hasCachedValues());
      //  // Unstable assertion: assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      //  // Unstable assertion: assertEquals(false, noResolvedType0.isStringValueType());
      //  // Unstable assertion: assertEquals(false, noResolvedType0.isEnumType());
      //  // Unstable assertion: assertEquals(true, noResolvedType0.isConstructor());
      //  // Unstable assertion: assertEquals(false, noResolvedType0.isBooleanValueType());
      //  // Unstable assertion: assertEquals(false, noResolvedType0.isOrdinaryFunction());
      //  // Unstable assertion: assertEquals(false, noResolvedType0.isNoObjectType());
      //  // Unstable assertion: assertEquals(false, noResolvedType0.isNullType());
      //  // Unstable assertion: assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      //  // Unstable assertion: assertNotNull(noResolvedType0);
      
      int int0 = (-1);
      FunctionType functionType1 = noResolvedType0.getBindReturnType(int0);
      //  // Unstable assertion: assertNotSame(functionType1, functionType0);
      //  // Unstable assertion: assertEquals(false, functionType1.isRecordType());
      //  // Unstable assertion: assertEquals(false, functionType1.isTemplateType());
      //  // Unstable assertion: assertEquals(true, functionType1.hasCachedValues());
      //  // Unstable assertion: assertEquals(false, functionType1.isVoidType());
      //  // Unstable assertion: assertEquals(false, functionType1.isParameterizedType());
      //  // Unstable assertion: assertEquals(false, functionType1.isNominalType());
      //  // Unstable assertion: assertEquals(false, functionType1.isNominalConstructor());
      //  // Unstable assertion: assertEquals(false, functionType1.isNoObjectType());
      //  // Unstable assertion: assertEquals(false, functionType1.isUnionType());
      //  // Unstable assertion: assertEquals(false, functionType1.isResolved());
      //  // Unstable assertion: assertEquals(false, functionType1.isReturnTypeInferred());
      //  // Unstable assertion: assertEquals(false, functionType1.isAllType());
      //  // Unstable assertion: assertEquals(false, functionType1.isFunctionPrototypeType());
      //  // Unstable assertion: assertEquals(false, functionType1.isNullType());
      //  // Unstable assertion: assertEquals(true, functionType1.isFunctionType());
      //  // Unstable assertion: assertEquals(false, functionType1.hasInstanceType());
      //  // Unstable assertion: assertEquals(BooleanLiteralSet.TRUE, functionType1.getPossibleToBooleanOutcomes());
      //  // Unstable assertion: assertEquals(false, functionType1.isNoResolvedType());
      //  // Unstable assertion: assertEquals(false, functionType1.isEnumType());
      //  // Unstable assertion: assertEquals(2147483647, functionType1.getMaxArguments());
      //  // Unstable assertion: assertEquals(false, functionType1.isEnumElementType());
      //  // Unstable assertion: assertEquals(false, functionType1.isCheckedUnknownType());
      //  // Unstable assertion: assertEquals(false, functionType1.isInterface());
      //  // Unstable assertion: assertEquals(false, functionType1.isBooleanValueType());
      //  // Unstable assertion: assertEquals(false, functionType1.isNoType());
      //  // Unstable assertion: assertEquals(false, functionType1.isConstructor());
      //  // Unstable assertion: assertEquals(false, functionType1.isNumberValueType());
      //  // Unstable assertion: assertEquals(true, functionType1.isOrdinaryFunction());
      //  // Unstable assertion: assertEquals(true, functionType1.canBeCalled());
      //  // Unstable assertion: assertEquals(false, functionType1.isStringValueType());
      //  // Unstable assertion: assertEquals(0, functionType1.getExtendedInterfacesCount());
      //  // Unstable assertion: assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      //  // Unstable assertion: assertEquals(true, noResolvedType0.hasInstanceType());
      //  // Unstable assertion: assertEquals(false, noResolvedType0.isUnionType());
      //  // Unstable assertion: assertEquals(false, noResolvedType0.isCheckedUnknownType());
      //  // Unstable assertion: assertNull(noResolvedType0.getReferenceName());
      //  // Unstable assertion: assertEquals(false, noResolvedType0.isReturnTypeInferred());
      //  // Unstable assertion: assertEquals(false, noResolvedType0.isTemplateType());
      //  // Unstable assertion: assertEquals(false, noResolvedType0.isNumberValueType());
      //  // Unstable assertion: assertEquals(false, noResolvedType0.isFunctionType());
      //  // Unstable assertion: assertEquals(true, noResolvedType0.matchesObjectContext());
      //  // Unstable assertion: assertEquals(false, noResolvedType0.isInterface());
      //  // Unstable assertion: assertEquals(2147483647, noResolvedType0.getMaxArguments());
      //  // Unstable assertion: assertEquals(true, noResolvedType0.isNullable());
      //  // Unstable assertion: assertEquals(true, noResolvedType0.matchesNumberContext());
      //  // Unstable assertion: assertEquals(false, noResolvedType0.isFunctionPrototypeType());
      //  // Unstable assertion: assertEquals(false, noResolvedType0.isNominalType());
      //  // Unstable assertion: assertEquals(false, noResolvedType0.isParameterizedType());
      //  // Unstable assertion: assertEquals(false, noResolvedType0.isAllType());
      //  // Unstable assertion: assertEquals(true, noResolvedType0.canBeCalled());
      //  // Unstable assertion: assertEquals(2147483647, noResolvedType0.getPropertiesCount());
      //  // Unstable assertion: assertEquals(false, noResolvedType0.isEnumElementType());
      //  // Unstable assertion: assertEquals(false, noResolvedType0.isResolved());
      //  // Unstable assertion: assertEquals(false, noResolvedType0.isRecordType());
      //  // Unstable assertion: assertEquals(false, noResolvedType0.isVoidType());
      //  // Unstable assertion: assertEquals(false, noResolvedType0.isNominalConstructor());
      //  // Unstable assertion: assertEquals(true, noResolvedType0.matchesStringContext());
      //  // Unstable assertion: assertEquals(false, noResolvedType0.hasCachedValues());
      //  // Unstable assertion: assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      //  // Unstable assertion: assertEquals(false, noResolvedType0.isStringValueType());
      //  // Unstable assertion: assertEquals(false, noResolvedType0.isEnumType());
      //  // Unstable assertion: assertEquals(true, noResolvedType0.isConstructor());
      //  // Unstable assertion: assertEquals(false, noResolvedType0.isBooleanValueType());
      //  // Unstable assertion: assertEquals(false, noResolvedType0.isOrdinaryFunction());
      //  // Unstable assertion: assertEquals(false, noResolvedType0.isNoObjectType());
      //  // Unstable assertion: assertEquals(false, noResolvedType0.isNullType());
      //  // Unstable assertion: assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      //  // Unstable assertion: assertNotNull(functionType1);
      //  // Unstable assertion: assertFalse(functionType1.equals((Object)functionType0));
      
      boolean boolean1 = functionType1.defineSynthesizedProperty(string0, (JSType) functionType0, node0);
      //  // Unstable assertion: assertNotSame(functionType0, functionType1);
      //  // Unstable assertion: assertNotSame(functionType1, functionType0);
      //  // Unstable assertion: assertEquals(true, functionType0.isInterface());
      //  // Unstable assertion: assertEquals(false, functionType0.isNumberValueType());
      //  // Unstable assertion: assertEquals(false, functionType0.isTemplateType());
      //  // Unstable assertion: assertEquals(0, functionType0.getExtendedInterfacesCount());
      //  // Unstable assertion: assertEquals(false, functionType0.isNominalConstructor());
      //  // Unstable assertion: assertEquals(false, functionType0.isEnumElementType());
      //  // Unstable assertion: assertEquals(false, functionType0.isFunctionPrototypeType());
      //  // Unstable assertion: assertEquals(false, functionType0.isReturnTypeInferred());
      //  // Unstable assertion: assertEquals(false, functionType0.isNoResolvedType());
      //  // Unstable assertion: assertEquals(false, functionType0.isVoidType());
      //  // Unstable assertion: assertEquals(false, functionType0.isNominalType());
      //  // Unstable assertion: assertEquals(false, functionType0.isNoType());
      //  // Unstable assertion: assertEquals(false, functionType0.isNoObjectType());
      //  // Unstable assertion: assertEquals(false, functionType0.isAllType());
      //  // Unstable assertion: assertEquals(true, functionType0.hasInstanceType());
      //  // Unstable assertion: assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      //  // Unstable assertion: assertEquals(false, functionType0.isConstructor());
      //  // Unstable assertion: assertEquals(false, functionType0.isCheckedUnknownType());
      //  // Unstable assertion: assertEquals(true, functionType0.isFunctionType());
      //  // Unstable assertion: assertEquals(true, functionType0.hasCachedValues());
      //  // Unstable assertion: assertEquals(false, functionType0.isResolved());
      //  // Unstable assertion: assertEquals(false, functionType0.isUnionType());
      //  // Unstable assertion: assertEquals(0, functionType0.getMaxArguments());
      //  // Unstable assertion: assertEquals(false, functionType0.isParameterizedType());
      //  // Unstable assertion: assertEquals(false, functionType0.isNullType());
      //  // Unstable assertion: assertEquals(true, functionType0.canBeCalled());
      //  // Unstable assertion: assertEquals(false, functionType0.isStringValueType());
      //  // Unstable assertion: assertEquals(false, functionType0.isOrdinaryFunction());
      //  // Unstable assertion: assertEquals(false, functionType0.isEnumType());
      //  // Unstable assertion: assertEquals(false, functionType0.isRecordType());
      //  // Unstable assertion: assertEquals(false, functionType0.isBooleanValueType());
      //  // Unstable assertion: assertEquals(false, functionType1.isRecordType());
      //  // Unstable assertion: assertEquals(false, functionType1.isTemplateType());
      //  // Unstable assertion: assertEquals(true, functionType1.hasCachedValues());
      //  // Unstable assertion: assertEquals(false, functionType1.isVoidType());
      //  // Unstable assertion: assertEquals(false, functionType1.isParameterizedType());
      //  // Unstable assertion: assertEquals(false, functionType1.isNominalType());
      //  // Unstable assertion: assertEquals(false, functionType1.isNominalConstructor());
      //  // Unstable assertion: assertEquals(false, functionType1.isNoObjectType());
      //  // Unstable assertion: assertEquals(false, functionType1.isUnionType());
      //  // Unstable assertion: assertEquals(false, functionType1.isResolved());
      //  // Unstable assertion: assertEquals(false, functionType1.isReturnTypeInferred());
      //  // Unstable assertion: assertEquals(false, functionType1.isAllType());
      //  // Unstable assertion: assertEquals(false, functionType1.isFunctionPrototypeType());
      //  // Unstable assertion: assertEquals(false, functionType1.isNullType());
      //  // Unstable assertion: assertEquals(true, functionType1.isFunctionType());
      //  // Unstable assertion: assertEquals(false, functionType1.hasInstanceType());
      //  // Unstable assertion: assertEquals(BooleanLiteralSet.TRUE, functionType1.getPossibleToBooleanOutcomes());
      //  // Unstable assertion: assertEquals(false, functionType1.isNoResolvedType());
      //  // Unstable assertion: assertEquals(false, functionType1.isEnumType());
      //  // Unstable assertion: assertEquals(2147483647, functionType1.getMaxArguments());
      //  // Unstable assertion: assertEquals(false, functionType1.isEnumElementType());
      //  // Unstable assertion: assertEquals(false, functionType1.isCheckedUnknownType());
      //  // Unstable assertion: assertEquals(false, functionType1.isInterface());
      //  // Unstable assertion: assertEquals(false, functionType1.isBooleanValueType());
      //  // Unstable assertion: assertEquals(false, functionType1.isNoType());
      //  // Unstable assertion: assertEquals(false, functionType1.isConstructor());
      //  // Unstable assertion: assertEquals(false, functionType1.isNumberValueType());
      //  // Unstable assertion: assertEquals(true, functionType1.isOrdinaryFunction());
      //  // Unstable assertion: assertEquals(true, functionType1.canBeCalled());
      //  // Unstable assertion: assertEquals(false, functionType1.isStringValueType());
      //  // Unstable assertion: assertEquals(0, functionType1.getExtendedInterfacesCount());
      //  // Unstable assertion: assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      //  // Unstable assertion: assertEquals(true, noResolvedType0.hasInstanceType());
      //  // Unstable assertion: assertEquals(false, noResolvedType0.isUnionType());
      //  // Unstable assertion: assertEquals(false, noResolvedType0.isCheckedUnknownType());
      //  // Unstable assertion: assertNull(noResolvedType0.getReferenceName());
      //  // Unstable assertion: assertEquals(false, noResolvedType0.isReturnTypeInferred());
      //  // Unstable assertion: assertEquals(false, noResolvedType0.isTemplateType());
      //  // Unstable assertion: assertEquals(false, noResolvedType0.isNumberValueType());
      //  // Unstable assertion: assertEquals(false, noResolvedType0.isFunctionType());
      //  // Unstable assertion: assertEquals(true, noResolvedType0.matchesObjectContext());
      //  // Unstable assertion: assertEquals(false, noResolvedType0.isInterface());
      //  // Unstable assertion: assertEquals(2147483647, noResolvedType0.getMaxArguments());
      //  // Unstable assertion: assertEquals(true, noResolvedType0.isNullable());
      //  // Unstable assertion: assertEquals(true, noResolvedType0.matchesNumberContext());
      //  // Unstable assertion: assertEquals(false, noResolvedType0.isFunctionPrototypeType());
      //  // Unstable assertion: assertEquals(false, noResolvedType0.isNominalType());
      //  // Unstable assertion: assertEquals(false, noResolvedType0.isParameterizedType());
      //  // Unstable assertion: assertEquals(false, noResolvedType0.isAllType());
      //  // Unstable assertion: assertEquals(true, noResolvedType0.canBeCalled());
      //  // Unstable assertion: assertEquals(2147483647, noResolvedType0.getPropertiesCount());
      //  // Unstable assertion: assertEquals(false, noResolvedType0.isEnumElementType());
      //  // Unstable assertion: assertEquals(false, noResolvedType0.isResolved());
      //  // Unstable assertion: assertEquals(false, noResolvedType0.isRecordType());
      //  // Unstable assertion: assertEquals(false, noResolvedType0.isVoidType());
      //  // Unstable assertion: assertEquals(false, noResolvedType0.isNominalConstructor());
      //  // Unstable assertion: assertEquals(true, noResolvedType0.matchesStringContext());
      //  // Unstable assertion: assertEquals(false, noResolvedType0.hasCachedValues());
      //  // Unstable assertion: assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      //  // Unstable assertion: assertEquals(false, noResolvedType0.isStringValueType());
      //  // Unstable assertion: assertEquals(false, noResolvedType0.isEnumType());
      //  // Unstable assertion: assertEquals(true, noResolvedType0.isConstructor());
      //  // Unstable assertion: assertEquals(false, noResolvedType0.isBooleanValueType());
      //  // Unstable assertion: assertEquals(false, noResolvedType0.isOrdinaryFunction());
      //  // Unstable assertion: assertEquals(false, noResolvedType0.isNoObjectType());
      //  // Unstable assertion: assertEquals(false, noResolvedType0.isNullType());
      //  // Unstable assertion: assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      //  // Unstable assertion: assertEquals("??", unknownType0.getReferenceName());
      //  // Unstable assertion: assertEquals(true, unknownType0.matchesStringContext());
      //  // Unstable assertion: assertEquals(false, unknownType0.isFunctionPrototypeType());
      //  // Unstable assertion: assertEquals(false, unknownType0.isStringValueType());
      //  // Unstable assertion: assertEquals(false, unknownType0.isNumberValueType());
      //  // Unstable assertion: assertEquals(true, unknownType0.isCheckedUnknownType());
      //  // Unstable assertion: assertEquals(false, unknownType0.isNoResolvedType());
      //  // Unstable assertion: assertEquals(false, unknownType0.isVoidType());
      //  // Unstable assertion: assertEquals(2147483647, unknownType0.getPropertiesCount());
      //  // Unstable assertion: assertEquals(true, unknownType0.matchesObjectContext());
      //  // Unstable assertion: assertEquals(false, unknownType0.isTemplateType());
      //  // Unstable assertion: assertEquals(true, unknownType0.canBeCalled());
      //  // Unstable assertion: assertEquals(false, unknownType0.isAllType());
      //  // Unstable assertion: assertEquals(false, unknownType0.isResolved());
      //  // Unstable assertion: assertEquals(false, unknownType0.isNoObjectType());
      //  // Unstable assertion: assertEquals(false, unknownType0.hasCachedValues());
      //  // Unstable assertion: assertEquals(false, unknownType0.hasReferenceName());
      //  // Unstable assertion: assertEquals(false, unknownType0.isNullType());
      //  // Unstable assertion: assertEquals(true, unknownType0.isNullable());
      //  // Unstable assertion: assertEquals(false, unknownType0.isEnumElementType());
      //  // Unstable assertion: assertEquals(false, unknownType0.isNominalType());
      //  // Unstable assertion: assertEquals(false, unknownType0.isOrdinaryFunction());
      //  // Unstable assertion: assertEquals(false, unknownType0.isNativeObjectType());
      //  // Unstable assertion: assertEquals(true, unknownType0.isUnknownType());
      //  // Unstable assertion: assertEquals(false, unknownType0.isNominalConstructor());
      //  // Unstable assertion: assertEquals("Unknown", unknownType0.getDisplayName());
      //  // Unstable assertion: assertEquals(false, unknownType0.isUnionType());
      //  // Unstable assertion: assertEquals(false, unknownType0.isEnumType());
      //  // Unstable assertion: assertEquals(false, unknownType0.isFunctionType());
      //  // Unstable assertion: assertEquals(true, unknownType0.hasDisplayName());
      //  // Unstable assertion: assertEquals(false, unknownType0.isInterface());
      //  // Unstable assertion: assertEquals(false, unknownType0.isBooleanValueType());
      //  // Unstable assertion: assertEquals(false, unknownType0.isParameterizedType());
      //  // Unstable assertion: assertEquals(false, unknownType0.isRecordType());
      //  // Unstable assertion: assertEquals(false, unknownType0.isConstructor());
      //  // Unstable assertion: assertEquals(false, unknownType0.isNoType());
      //  // Unstable assertion: assertEquals(true, unknownType0.matchesNumberContext());
      //  // Unstable assertion: assertEquals(BooleanLiteralSet.BOTH, unknownType0.getPossibleToBooleanOutcomes());
      //  // Unstable assertion: assertTrue(boolean1);
      //  // Unstable assertion: assertFalse(functionType0.equals((Object)functionType1));
      //  // Unstable assertion: assertTrue(boolean1 == boolean0);
      //  // Unstable assertion: assertFalse(functionType1.equals((Object)functionType0));
      //  // Unstable assertion: assertTrue(boolean0 == boolean1);
  }

  @Test
  public void test42()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      boolean boolean0 = false;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0, boolean0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      String string0 = "]";
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, string0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, errorFunctionType0.isNoObjectType());
      assertEquals(false, errorFunctionType0.isVoidType());
      assertEquals(false, errorFunctionType0.isRecordType());
      assertEquals(false, errorFunctionType0.isTemplateType());
      assertEquals(false, errorFunctionType0.isEnumType());
      assertEquals(false, errorFunctionType0.isBooleanValueType());
      assertEquals(false, errorFunctionType0.isInterface());
      assertEquals(false, errorFunctionType0.isNominalType());
      assertEquals(true, errorFunctionType0.hasInstanceType());
      assertEquals(false, errorFunctionType0.isUnionType());
      assertEquals(false, errorFunctionType0.isFunctionPrototypeType());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertEquals(false, errorFunctionType0.hasCachedValues());
      assertEquals(false, errorFunctionType0.isResolved());
      assertEquals(false, errorFunctionType0.isNoType());
      assertEquals(true, errorFunctionType0.canBeCalled());
      assertEquals(false, errorFunctionType0.isNumberValueType());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, errorFunctionType0.isAllType());
      assertEquals(3, errorFunctionType0.getMaxArguments());
      assertEquals(false, errorFunctionType0.isNoResolvedType());
      assertEquals(false, errorFunctionType0.isNullType());
      assertEquals(false, errorFunctionType0.isCheckedUnknownType());
      assertEquals(false, errorFunctionType0.isParameterizedType());
      assertEquals(true, errorFunctionType0.isConstructor());
      assertEquals(true, errorFunctionType0.isNominalConstructor());
      assertEquals(false, errorFunctionType0.isReturnTypeInferred());
      assertEquals(true, errorFunctionType0.isFunctionType());
      assertEquals(false, errorFunctionType0.isStringValueType());
      assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      assertEquals(false, errorFunctionType0.isEnumElementType());
      assertNotNull(errorFunctionType0);
      
      Node node0 = Node.newString(string0);
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(40, node0.getType());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isFor());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isDelProp());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isStringKey());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isNumber());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isFalse());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isVarArgs());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isScript());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isDec());
      assertEquals(true, node0.isString());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isObjectLit());
      assertNotNull(node0);
      
      boolean boolean1 = errorFunctionType0.setPrototype(errorFunctionType0, node0);
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(40, node0.getType());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isFor());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isDelProp());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isStringKey());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isNumber());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isFalse());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isVarArgs());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isScript());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isDec());
      assertEquals(true, node0.isString());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, errorFunctionType0.isNoObjectType());
      assertEquals(false, errorFunctionType0.isVoidType());
      assertEquals(false, errorFunctionType0.isRecordType());
      assertEquals(false, errorFunctionType0.isTemplateType());
      assertEquals(false, errorFunctionType0.isEnumType());
      assertEquals(false, errorFunctionType0.isBooleanValueType());
      assertEquals(false, errorFunctionType0.isInterface());
      assertEquals(false, errorFunctionType0.isNominalType());
      assertEquals(true, errorFunctionType0.hasInstanceType());
      assertEquals(true, errorFunctionType0.hasCachedValues());
      assertEquals(false, errorFunctionType0.isUnionType());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertEquals(true, errorFunctionType0.isFunctionPrototypeType());
      assertEquals(false, errorFunctionType0.isResolved());
      assertEquals(false, errorFunctionType0.isNoType());
      assertEquals(true, errorFunctionType0.canBeCalled());
      assertEquals(false, errorFunctionType0.isNumberValueType());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, errorFunctionType0.isAllType());
      assertEquals(3, errorFunctionType0.getMaxArguments());
      assertEquals(false, errorFunctionType0.isNoResolvedType());
      assertEquals(false, errorFunctionType0.isNullType());
      assertEquals(false, errorFunctionType0.isCheckedUnknownType());
      assertEquals(false, errorFunctionType0.isParameterizedType());
      assertEquals(true, errorFunctionType0.isConstructor());
      assertEquals(true, errorFunctionType0.isNominalConstructor());
      assertEquals(false, errorFunctionType0.isReturnTypeInferred());
      assertEquals(true, errorFunctionType0.isFunctionType());
      assertEquals(false, errorFunctionType0.isStringValueType());
      assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      assertEquals(false, errorFunctionType0.isEnumElementType());
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean0 == boolean1);
  }

  @Test
  public void test43()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      StringType stringType0 = new StringType(jSTypeRegistry0);
      assertEquals(false, stringType0.isRecordType());
      assertEquals(false, stringType0.isCheckedUnknownType());
      assertEquals(false, stringType0.isUnionType());
      assertEquals(false, stringType0.isTemplateType());
      assertEquals(false, stringType0.isEnumType());
      assertEquals(true, stringType0.isStringValueType());
      assertEquals(false, stringType0.isResolved());
      assertEquals(false, stringType0.isInterface());
      assertEquals(true, stringType0.matchesObjectContext());
      assertEquals(true, stringType0.matchesStringContext());
      assertEquals(false, stringType0.isNumberValueType());
      assertEquals(false, stringType0.isAllType());
      assertEquals(false, stringType0.isNoResolvedType());
      assertEquals(false, stringType0.isNullType());
      assertEquals("string", stringType0.getDisplayName());
      assertEquals(false, stringType0.isVoidType());
      assertEquals(false, stringType0.isNoObjectType());
      assertEquals(false, stringType0.isNoType());
      assertEquals(false, stringType0.isParameterizedType());
      assertEquals(true, stringType0.matchesNumberContext());
      assertEquals(false, stringType0.isConstructor());
      assertEquals(false, stringType0.isBooleanValueType());
      assertEquals(false, stringType0.isNominalConstructor());
      assertEquals(BooleanLiteralSet.BOTH, stringType0.getPossibleToBooleanOutcomes());
      assertEquals(false, stringType0.isNominalType());
      assertEquals(false, stringType0.isFunctionPrototypeType());
      assertEquals(false, stringType0.isOrdinaryFunction());
      assertEquals(false, stringType0.isFunctionType());
      assertEquals(false, stringType0.isEnumElementType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(stringType0);
      
      Stack<JSType> stack0 = new Stack<JSType>();
      assertEquals(true, stack0.empty());
      assertEquals(true, stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertNotNull(stack0);
      
      FunctionType functionType0 = jSTypeRegistry0.createFunctionTypeWithVarArgs((JSType) stringType0, (List<JSType>) stack0);
      assertEquals(false, stringType0.isRecordType());
      assertEquals(false, stringType0.isCheckedUnknownType());
      assertEquals(false, stringType0.isUnionType());
      assertEquals(false, stringType0.isTemplateType());
      assertEquals(false, stringType0.isEnumType());
      assertEquals(true, stringType0.isStringValueType());
      assertEquals(false, stringType0.isResolved());
      assertEquals(false, stringType0.isInterface());
      assertEquals(true, stringType0.matchesObjectContext());
      assertEquals(true, stringType0.matchesStringContext());
      assertEquals(false, stringType0.isNumberValueType());
      assertEquals(false, stringType0.isAllType());
      assertEquals(false, stringType0.isNoResolvedType());
      assertEquals(false, stringType0.isNullType());
      assertEquals("string", stringType0.getDisplayName());
      assertEquals(false, stringType0.isVoidType());
      assertEquals(false, stringType0.isNoObjectType());
      assertEquals(false, stringType0.isNoType());
      assertEquals(false, stringType0.isParameterizedType());
      assertEquals(true, stringType0.matchesNumberContext());
      assertEquals(false, stringType0.isConstructor());
      assertEquals(false, stringType0.isBooleanValueType());
      assertEquals(false, stringType0.isNominalConstructor());
      assertEquals(BooleanLiteralSet.BOTH, stringType0.getPossibleToBooleanOutcomes());
      assertEquals(false, stringType0.isNominalType());
      assertEquals(false, stringType0.isFunctionPrototypeType());
      assertEquals(false, stringType0.isOrdinaryFunction());
      assertEquals(false, stringType0.isFunctionType());
      assertEquals(false, stringType0.isEnumElementType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, functionType0.isParameterizedType());
      assertEquals(false, functionType0.isResolved());
      assertEquals(false, functionType0.isFunctionPrototypeType());
      assertEquals(false, functionType0.isUnionType());
      assertEquals(false, functionType0.hasCachedValues());
      assertEquals(false, functionType0.isNoResolvedType());
      assertEquals(true, functionType0.canBeCalled());
      assertEquals(false, functionType0.isVoidType());
      assertEquals(false, functionType0.isRecordType());
      assertEquals(false, functionType0.hasInstanceType());
      assertEquals(false, functionType0.isEnumType());
      assertEquals(false, functionType0.isNoType());
      assertEquals(false, functionType0.isNoObjectType());
      assertEquals(true, functionType0.isFunctionType());
      assertEquals(false, functionType0.isNullType());
      assertEquals(false, functionType0.isNominalConstructor());
      assertEquals(false, functionType0.isNumberValueType());
      assertEquals(false, functionType0.isAllType());
      assertEquals(false, functionType0.isCheckedUnknownType());
      assertEquals(false, functionType0.isNominalType());
      assertEquals(false, functionType0.isInterface());
      assertEquals(false, functionType0.isBooleanValueType());
      assertEquals(true, functionType0.isOrdinaryFunction());
      assertEquals(0, functionType0.getMaxArguments());
      assertEquals(false, functionType0.isReturnTypeInferred());
      assertEquals(false, functionType0.isTemplateType());
      assertEquals(false, functionType0.isStringValueType());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertEquals(false, functionType0.isConstructor());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, functionType0.isEnumElementType());
      assertEquals(true, stack0.empty());
      assertEquals(true, stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertNotNull(functionType0);
      
      JSType[] jSTypeArray0 = new JSType[1];
      jSTypeArray0[0] = (JSType) functionType0;
      assertEquals(false, jSTypeArray0[0].isNumberValueType());
      assertEquals(false, jSTypeArray0[0].isUnionType());
      assertEquals(false, jSTypeArray0[0].isEnumType());
      assertEquals(false, jSTypeArray0[0].isBooleanValueType());
      assertEquals(false, jSTypeArray0[0].isNominalType());
      assertEquals(true, jSTypeArray0[0].isFunctionType());
      assertEquals(true, jSTypeArray0[0].isOrdinaryFunction());
      assertEquals(false, jSTypeArray0[0].isNoObjectType());
      assertEquals(false, jSTypeArray0[0].isStringValueType());
      assertEquals(false, jSTypeArray0[0].isCheckedUnknownType());
      assertEquals(false, jSTypeArray0[0].isTemplateType());
      assertEquals(false, jSTypeArray0[0].isNoType());
      assertEquals(false, jSTypeArray0[0].isAllType());
      assertEquals(false, jSTypeArray0[0].isNominalConstructor());
      assertEquals(false, jSTypeArray0[0].isResolved());
      assertEquals(false, jSTypeArray0[0].isParameterizedType());
      assertEquals(false, jSTypeArray0[0].isRecordType());
      assertEquals(false, jSTypeArray0[0].isEnumElementType());
      assertEquals(false, jSTypeArray0[0].isNoResolvedType());
      assertEquals(false, jSTypeArray0[0].isInterface());
      assertEquals(false, jSTypeArray0[0].isConstructor());
      assertEquals(false, jSTypeArray0[0].isVoidType());
      assertEquals(false, jSTypeArray0[0].isNullType());
      assertEquals(false, jSTypeArray0[0].isFunctionPrototypeType());
      assertEquals(false, stringType0.isRecordType());
      assertEquals(false, stringType0.isCheckedUnknownType());
      assertEquals(false, stringType0.isUnionType());
      assertEquals(false, stringType0.isTemplateType());
      assertEquals(false, stringType0.isEnumType());
      assertEquals(true, stringType0.isStringValueType());
      assertEquals(false, stringType0.isResolved());
      assertEquals(false, stringType0.isInterface());
      assertEquals(true, stringType0.matchesObjectContext());
      assertEquals(true, stringType0.matchesStringContext());
      assertEquals(false, stringType0.isNumberValueType());
      assertEquals(false, stringType0.isAllType());
      assertEquals(false, stringType0.isNoResolvedType());
      assertEquals(false, stringType0.isNullType());
      assertEquals("string", stringType0.getDisplayName());
      assertEquals(false, stringType0.isVoidType());
      assertEquals(false, stringType0.isNoObjectType());
      assertEquals(false, stringType0.isNoType());
      assertEquals(false, stringType0.isParameterizedType());
      assertEquals(true, stringType0.matchesNumberContext());
      assertEquals(false, stringType0.isConstructor());
      assertEquals(false, stringType0.isBooleanValueType());
      assertEquals(false, stringType0.isNominalConstructor());
      assertEquals(BooleanLiteralSet.BOTH, stringType0.getPossibleToBooleanOutcomes());
      assertEquals(false, stringType0.isNominalType());
      assertEquals(false, stringType0.isFunctionPrototypeType());
      assertEquals(false, stringType0.isOrdinaryFunction());
      assertEquals(false, stringType0.isFunctionType());
      assertEquals(false, stringType0.isEnumElementType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, functionType0.isParameterizedType());
      assertEquals(false, functionType0.isResolved());
      assertEquals(false, functionType0.isFunctionPrototypeType());
      assertEquals(false, functionType0.isUnionType());
      assertEquals(false, functionType0.hasCachedValues());
      assertEquals(false, functionType0.isNoResolvedType());
      assertEquals(true, functionType0.canBeCalled());
      assertEquals(false, functionType0.isVoidType());
      assertEquals(false, functionType0.isRecordType());
      assertEquals(false, functionType0.hasInstanceType());
      assertEquals(false, functionType0.isEnumType());
      assertEquals(false, functionType0.isNoType());
      assertEquals(false, functionType0.isNoObjectType());
      assertEquals(true, functionType0.isFunctionType());
      assertEquals(false, functionType0.isNullType());
      assertEquals(false, functionType0.isNominalConstructor());
      assertEquals(false, functionType0.isNumberValueType());
      assertEquals(false, functionType0.isAllType());
      assertEquals(false, functionType0.isCheckedUnknownType());
      assertEquals(false, functionType0.isNominalType());
      assertEquals(false, functionType0.isInterface());
      assertEquals(false, functionType0.isBooleanValueType());
      assertEquals(true, functionType0.isOrdinaryFunction());
      assertEquals(0, functionType0.getMaxArguments());
      assertEquals(false, functionType0.isReturnTypeInferred());
      assertEquals(false, functionType0.isTemplateType());
      assertEquals(false, functionType0.isStringValueType());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertEquals(false, functionType0.isConstructor());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, functionType0.isEnumElementType());
      assertEquals(true, stack0.empty());
      assertEquals(true, stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertNotNull(jSTypeArray0[0]);
      
      Node node0 = jSTypeRegistry0.createParametersWithVarArgs(jSTypeArray0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isFromExterns());
      assertEquals(true, node0.hasOneChild());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(83, node0.getType());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isFalse());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isCall());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isDebugger());
      assertEquals(true, node0.hasChildren());
      assertEquals(true, node0.isParamList());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isBreak());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isBlock());
      assertNull(node0.getSourceFileName());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isStringKey());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isString());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(1, node0.getChildCount());
      assertEquals(false, node0.isScript());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isTrue());
      assertNotNull(node0);
      
      ArrowType arrowType0 = new ArrowType(jSTypeRegistry0, node0, jSTypeArray0[0]);
      assertEquals(false, arrowType0.isNumberValueType());
      assertEquals(false, arrowType0.isNullType());
      assertEquals(false, arrowType0.isEnumElementType());
      assertEquals(false, arrowType0.isTemplateType());
      assertEquals(false, arrowType0.isConstructor());
      assertEquals(false, arrowType0.isInterface());
      assertEquals(false, arrowType0.isNoResolvedType());
      assertEquals(false, arrowType0.isParameterizedType());
      assertEquals(false, arrowType0.isNoObjectType());
      assertEquals(false, arrowType0.isStringValueType());
      assertEquals(false, arrowType0.isCheckedUnknownType());
      assertEquals(false, arrowType0.isOrdinaryFunction());
      assertEquals(false, arrowType0.isVoidType());
      assertEquals(false, arrowType0.isFunctionType());
      assertEquals(false, arrowType0.isNoType());
      assertEquals(false, arrowType0.isRecordType());
      assertEquals(false, arrowType0.isEnumType());
      assertEquals(false, arrowType0.isBooleanValueType());
      assertEquals(false, arrowType0.isUnionType());
      assertEquals(false, arrowType0.isNominalType());
      assertEquals(false, arrowType0.isAllType());
      assertEquals(false, arrowType0.isNominalConstructor());
      assertEquals(false, arrowType0.isFunctionPrototypeType());
      assertEquals(false, arrowType0.isResolved());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isFromExterns());
      assertEquals(true, node0.hasOneChild());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(83, node0.getType());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isFalse());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isCall());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isDebugger());
      assertEquals(true, node0.hasChildren());
      assertEquals(true, node0.isParamList());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isBreak());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isBlock());
      assertNull(node0.getSourceFileName());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isStringKey());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isString());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(1, node0.getChildCount());
      assertEquals(false, node0.isScript());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isTrue());
      assertNotNull(arrowType0);
      
      ObjectType objectType0 = arrowType0.toObjectType();
      assertEquals(false, arrowType0.isNumberValueType());
      assertEquals(false, arrowType0.isNullType());
      assertEquals(false, arrowType0.isEnumElementType());
      assertEquals(false, arrowType0.isTemplateType());
      assertEquals(false, arrowType0.isConstructor());
      assertEquals(false, arrowType0.isInterface());
      assertEquals(false, arrowType0.isNoResolvedType());
      assertEquals(false, arrowType0.isParameterizedType());
      assertEquals(false, arrowType0.isNoObjectType());
      assertEquals(false, arrowType0.isStringValueType());
      assertEquals(false, arrowType0.isCheckedUnknownType());
      assertEquals(false, arrowType0.isOrdinaryFunction());
      assertEquals(false, arrowType0.isVoidType());
      assertEquals(false, arrowType0.isFunctionType());
      assertEquals(false, arrowType0.isNoType());
      assertEquals(false, arrowType0.isRecordType());
      assertEquals(false, arrowType0.isEnumType());
      assertEquals(false, arrowType0.isBooleanValueType());
      assertEquals(false, arrowType0.isUnionType());
      assertEquals(false, arrowType0.isNominalType());
      assertEquals(false, arrowType0.isAllType());
      assertEquals(false, arrowType0.isNominalConstructor());
      assertEquals(false, arrowType0.isFunctionPrototypeType());
      assertEquals(false, arrowType0.isResolved());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isFromExterns());
      assertEquals(true, node0.hasOneChild());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(83, node0.getType());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isFalse());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isCall());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isDebugger());
      assertEquals(true, node0.hasChildren());
      assertEquals(true, node0.isParamList());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isBreak());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isBlock());
      assertNull(node0.getSourceFileName());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isStringKey());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isString());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(1, node0.getChildCount());
      assertEquals(false, node0.isScript());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isTrue());
      assertNull(objectType0);
      
      boolean boolean0 = functionType0.setPrototype(objectType0, node0);
      assertEquals(false, arrowType0.isNumberValueType());
      assertEquals(false, arrowType0.isNullType());
      assertEquals(false, arrowType0.isEnumElementType());
      assertEquals(false, arrowType0.isTemplateType());
      assertEquals(false, arrowType0.isConstructor());
      assertEquals(false, arrowType0.isInterface());
      assertEquals(false, arrowType0.isNoResolvedType());
      assertEquals(false, arrowType0.isParameterizedType());
      assertEquals(false, arrowType0.isNoObjectType());
      assertEquals(false, arrowType0.isStringValueType());
      assertEquals(false, arrowType0.isCheckedUnknownType());
      assertEquals(false, arrowType0.isOrdinaryFunction());
      assertEquals(false, arrowType0.isVoidType());
      assertEquals(false, arrowType0.isFunctionType());
      assertEquals(false, arrowType0.isNoType());
      assertEquals(false, arrowType0.isRecordType());
      assertEquals(false, arrowType0.isEnumType());
      assertEquals(false, arrowType0.isBooleanValueType());
      assertEquals(false, arrowType0.isUnionType());
      assertEquals(false, arrowType0.isNominalType());
      assertEquals(false, arrowType0.isAllType());
      assertEquals(false, arrowType0.isNominalConstructor());
      assertEquals(false, arrowType0.isFunctionPrototypeType());
      assertEquals(false, arrowType0.isResolved());
      assertEquals(false, stringType0.isRecordType());
      assertEquals(false, stringType0.isCheckedUnknownType());
      assertEquals(false, stringType0.isUnionType());
      assertEquals(false, stringType0.isTemplateType());
      assertEquals(false, stringType0.isEnumType());
      assertEquals(true, stringType0.isStringValueType());
      assertEquals(false, stringType0.isResolved());
      assertEquals(false, stringType0.isInterface());
      assertEquals(true, stringType0.matchesObjectContext());
      assertEquals(true, stringType0.matchesStringContext());
      assertEquals(false, stringType0.isNumberValueType());
      assertEquals(false, stringType0.isAllType());
      assertEquals(false, stringType0.isNoResolvedType());
      assertEquals(false, stringType0.isNullType());
      assertEquals("string", stringType0.getDisplayName());
      assertEquals(false, stringType0.isVoidType());
      assertEquals(false, stringType0.isNoObjectType());
      assertEquals(false, stringType0.isNoType());
      assertEquals(false, stringType0.isParameterizedType());
      assertEquals(true, stringType0.matchesNumberContext());
      assertEquals(false, stringType0.isConstructor());
      assertEquals(false, stringType0.isBooleanValueType());
      assertEquals(false, stringType0.isNominalConstructor());
      assertEquals(BooleanLiteralSet.BOTH, stringType0.getPossibleToBooleanOutcomes());
      assertEquals(false, stringType0.isNominalType());
      assertEquals(false, stringType0.isFunctionPrototypeType());
      assertEquals(false, stringType0.isOrdinaryFunction());
      assertEquals(false, stringType0.isFunctionType());
      assertEquals(false, stringType0.isEnumElementType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, functionType0.isParameterizedType());
      assertEquals(false, functionType0.isResolved());
      assertEquals(false, functionType0.isFunctionPrototypeType());
      assertEquals(false, functionType0.isUnionType());
      assertEquals(false, functionType0.isNoResolvedType());
      assertEquals(true, functionType0.canBeCalled());
      assertEquals(false, functionType0.isVoidType());
      assertEquals(false, functionType0.isRecordType());
      assertEquals(false, functionType0.hasInstanceType());
      assertEquals(false, functionType0.isEnumType());
      assertEquals(false, functionType0.isNoType());
      assertEquals(false, functionType0.isNoObjectType());
      assertEquals(true, functionType0.isFunctionType());
      assertEquals(false, functionType0.isNullType());
      assertEquals(false, functionType0.isNominalConstructor());
      assertEquals(false, functionType0.isNumberValueType());
      assertEquals(false, functionType0.isAllType());
      assertEquals(false, functionType0.isCheckedUnknownType());
      assertEquals(true, functionType0.hasCachedValues());
      assertEquals(false, functionType0.isNominalType());
      assertEquals(false, functionType0.isInterface());
      assertEquals(false, functionType0.isBooleanValueType());
      assertEquals(true, functionType0.isOrdinaryFunction());
      assertEquals(0, functionType0.getMaxArguments());
      assertEquals(false, functionType0.isReturnTypeInferred());
      assertEquals(false, functionType0.isTemplateType());
      assertEquals(false, functionType0.isStringValueType());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertEquals(false, functionType0.isConstructor());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, functionType0.isEnumElementType());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isFromExterns());
      assertEquals(true, node0.hasOneChild());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(83, node0.getType());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isFalse());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isCall());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isDebugger());
      assertEquals(true, node0.hasChildren());
      assertEquals(true, node0.isParamList());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isBreak());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isBlock());
      assertNull(node0.getSourceFileName());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isStringKey());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isString());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(1, node0.getChildCount());
      assertEquals(false, node0.isScript());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isTrue());
      assertEquals(true, stack0.empty());
      assertEquals(true, stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertFalse(boolean0);
  }

  @Test
  public void test44()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, noResolvedType0.isFunctionPrototypeType());
      assertEquals(true, noResolvedType0.matchesObjectContext());
      assertEquals(false, noResolvedType0.isBooleanValueType());
      assertEquals(false, noResolvedType0.isOrdinaryFunction());
      assertEquals(false, noResolvedType0.isNominalConstructor());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertNull(noResolvedType0.getReferenceName());
      assertEquals(false, noResolvedType0.isResolved());
      assertEquals(true, noResolvedType0.isConstructor());
      assertEquals(false, noResolvedType0.isAllType());
      assertEquals(true, noResolvedType0.hasInstanceType());
      assertEquals(false, noResolvedType0.isNullType());
      assertEquals(false, noResolvedType0.isParameterizedType());
      assertEquals(true, noResolvedType0.canBeCalled());
      assertEquals(false, noResolvedType0.isReturnTypeInferred());
      assertEquals(false, noResolvedType0.isInterface());
      assertEquals(false, noResolvedType0.isCheckedUnknownType());
      assertEquals(false, noResolvedType0.isVoidType());
      assertEquals(true, noResolvedType0.isNullable());
      assertEquals(false, noResolvedType0.isEnumType());
      assertEquals(false, noResolvedType0.isNoObjectType());
      assertEquals(true, noResolvedType0.matchesNumberContext());
      assertEquals(false, noResolvedType0.isEnumElementType());
      assertEquals(false, noResolvedType0.isTemplateType());
      assertEquals(2147483647, noResolvedType0.getPropertiesCount());
      assertEquals(false, noResolvedType0.isNominalType());
      assertEquals(false, noResolvedType0.isUnionType());
      assertEquals(false, noResolvedType0.isNumberValueType());
      assertEquals(false, noResolvedType0.isStringValueType());
      assertEquals(false, noResolvedType0.isRecordType());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noResolvedType0.hasCachedValues());
      assertEquals(true, noResolvedType0.matchesStringContext());
      assertEquals(false, noResolvedType0.isFunctionType());
      assertEquals(2147483647, noResolvedType0.getMaxArguments());
      assertNotNull(noResolvedType0);
      
      noResolvedType0.setPrototypeBasedOn((ObjectType) noResolvedType0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, noResolvedType0.isFunctionPrototypeType());
      assertEquals(true, noResolvedType0.matchesObjectContext());
      assertEquals(false, noResolvedType0.isBooleanValueType());
      assertEquals(false, noResolvedType0.isOrdinaryFunction());
      assertEquals(false, noResolvedType0.isNominalConstructor());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertNull(noResolvedType0.getReferenceName());
      assertEquals(false, noResolvedType0.isResolved());
      assertEquals(true, noResolvedType0.isConstructor());
      assertEquals(false, noResolvedType0.isAllType());
      assertEquals(true, noResolvedType0.hasInstanceType());
      assertEquals(false, noResolvedType0.isNullType());
      assertEquals(false, noResolvedType0.isParameterizedType());
      assertEquals(true, noResolvedType0.canBeCalled());
      assertEquals(false, noResolvedType0.isReturnTypeInferred());
      assertEquals(false, noResolvedType0.isInterface());
      assertEquals(false, noResolvedType0.isCheckedUnknownType());
      assertEquals(false, noResolvedType0.isVoidType());
      assertEquals(true, noResolvedType0.isNullable());
      assertEquals(false, noResolvedType0.isEnumType());
      assertEquals(false, noResolvedType0.isNoObjectType());
      assertEquals(true, noResolvedType0.matchesNumberContext());
      assertEquals(false, noResolvedType0.isEnumElementType());
      assertEquals(false, noResolvedType0.isTemplateType());
      assertEquals(2147483647, noResolvedType0.getPropertiesCount());
      assertEquals(false, noResolvedType0.isNominalType());
      assertEquals(false, noResolvedType0.isUnionType());
      assertEquals(false, noResolvedType0.isNumberValueType());
      assertEquals(false, noResolvedType0.isStringValueType());
      assertEquals(true, noResolvedType0.hasCachedValues());
      assertEquals(false, noResolvedType0.isRecordType());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertEquals(true, noResolvedType0.matchesStringContext());
      assertEquals(false, noResolvedType0.isFunctionType());
      assertEquals(2147483647, noResolvedType0.getMaxArguments());
  }

  @Test
  public void test45()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      boolean boolean0 = true;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0, boolean0);
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      String string0 = "NpaV?\\";
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, string0);
      assertEquals(false, errorFunctionType0.isEnumElementType());
      assertEquals(false, errorFunctionType0.isNoResolvedType());
      assertEquals(false, errorFunctionType0.isResolved());
      assertEquals(false, errorFunctionType0.isBooleanValueType());
      assertEquals(false, errorFunctionType0.isEnumType());
      assertEquals(false, errorFunctionType0.isNominalType());
      assertEquals(false, errorFunctionType0.isFunctionPrototypeType());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertEquals(true, errorFunctionType0.isNominalConstructor());
      assertEquals(false, errorFunctionType0.isNoType());
      assertEquals(false, errorFunctionType0.hasCachedValues());
      assertEquals(false, errorFunctionType0.isNumberValueType());
      assertEquals(true, errorFunctionType0.isConstructor());
      assertEquals(false, errorFunctionType0.isStringValueType());
      assertEquals(false, errorFunctionType0.isReturnTypeInferred());
      assertEquals(false, errorFunctionType0.isInterface());
      assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      assertEquals(true, errorFunctionType0.isFunctionType());
      assertEquals(false, errorFunctionType0.isAllType());
      assertEquals(true, errorFunctionType0.canBeCalled());
      assertEquals(3, errorFunctionType0.getMaxArguments());
      assertEquals(false, errorFunctionType0.isNullType());
      assertEquals(true, errorFunctionType0.hasInstanceType());
      assertEquals(false, errorFunctionType0.isRecordType());
      assertEquals(false, errorFunctionType0.isParameterizedType());
      assertEquals(false, errorFunctionType0.isNoObjectType());
      assertEquals(false, errorFunctionType0.isUnionType());
      assertEquals(false, errorFunctionType0.isCheckedUnknownType());
      assertEquals(false, errorFunctionType0.isTemplateType());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, errorFunctionType0.isVoidType());
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(errorFunctionType0);
      
      Set<String> set0 = errorFunctionType0.getOwnPropertyNames();
      assertEquals(0, set0.size());
      assertEquals(true, set0.isEmpty());
      assertEquals(false, errorFunctionType0.isEnumElementType());
      assertEquals(false, errorFunctionType0.isNoResolvedType());
      assertEquals(false, errorFunctionType0.isResolved());
      assertEquals(false, errorFunctionType0.isBooleanValueType());
      assertEquals(false, errorFunctionType0.isEnumType());
      assertEquals(false, errorFunctionType0.isNominalType());
      assertEquals(false, errorFunctionType0.isFunctionPrototypeType());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertEquals(true, errorFunctionType0.isNominalConstructor());
      assertEquals(false, errorFunctionType0.isNoType());
      assertEquals(false, errorFunctionType0.hasCachedValues());
      assertEquals(false, errorFunctionType0.isNumberValueType());
      assertEquals(true, errorFunctionType0.isConstructor());
      assertEquals(false, errorFunctionType0.isStringValueType());
      assertEquals(false, errorFunctionType0.isReturnTypeInferred());
      assertEquals(false, errorFunctionType0.isInterface());
      assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      assertEquals(true, errorFunctionType0.isFunctionType());
      assertEquals(false, errorFunctionType0.isAllType());
      assertEquals(true, errorFunctionType0.canBeCalled());
      assertEquals(3, errorFunctionType0.getMaxArguments());
      assertEquals(false, errorFunctionType0.isNullType());
      assertEquals(true, errorFunctionType0.hasInstanceType());
      assertEquals(false, errorFunctionType0.isRecordType());
      assertEquals(false, errorFunctionType0.isParameterizedType());
      assertEquals(false, errorFunctionType0.isNoObjectType());
      assertEquals(false, errorFunctionType0.isUnionType());
      assertEquals(false, errorFunctionType0.isCheckedUnknownType());
      assertEquals(false, errorFunctionType0.isTemplateType());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, errorFunctionType0.isVoidType());
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(set0);
  }

  @Test
  public void test46()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      //  // Unstable assertion: assertNotNull(simpleErrorReporter0);
      
      boolean boolean0 = false;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0, boolean0);
      //  // Unstable assertion: assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      //  // Unstable assertion: assertNotNull(jSTypeRegistry0);
      
      String string0 = "dy-LTc+cK.&yC";
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, string0);
      //  // Unstable assertion: assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      //  // Unstable assertion: assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.hasCachedValues());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isFunctionPrototypeType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isNoObjectType());
      //  // Unstable assertion: assertEquals(3, errorFunctionType0.getMaxArguments());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isRecordType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isTemplateType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isNoType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isCheckedUnknownType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isStringValueType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isBooleanValueType());
      //  // Unstable assertion: assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isNoResolvedType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isParameterizedType());
      //  // Unstable assertion: assertEquals(true, errorFunctionType0.hasInstanceType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isNominalType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isNumberValueType());
      //  // Unstable assertion: assertEquals(true, errorFunctionType0.isNominalConstructor());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isVoidType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isEnumElementType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isAllType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isInterface());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isUnionType());
      //  // Unstable assertion: assertEquals(true, errorFunctionType0.isConstructor());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isEnumType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isResolved());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isNullType());
      //  // Unstable assertion: assertEquals(true, errorFunctionType0.isFunctionType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isReturnTypeInferred());
      //  // Unstable assertion: assertEquals(true, errorFunctionType0.canBeCalled());
      //  // Unstable assertion: assertNotNull(errorFunctionType0);
      
      FunctionType functionType0 = errorFunctionType0.cloneWithoutArrowType();
      //  // Unstable assertion: assertEquals(false, functionType0.isAllType());
      //  // Unstable assertion: assertEquals(0, functionType0.getExtendedInterfacesCount());
      //  // Unstable assertion: assertEquals(true, functionType0.canBeCalled());
      //  // Unstable assertion: assertEquals(2147483647, functionType0.getMaxArguments());
      //  // Unstable assertion: assertEquals(false, functionType0.isResolved());
      //  // Unstable assertion: assertEquals(false, functionType0.isBooleanValueType());
      //  // Unstable assertion: assertEquals(false, functionType0.isNumberValueType());
      //  // Unstable assertion: assertEquals(false, functionType0.isNoObjectType());
      //  // Unstable assertion: assertEquals(false, functionType0.isParameterizedType());
      //  // Unstable assertion: assertEquals(false, functionType0.isEnumType());
      //  // Unstable assertion: assertEquals(false, functionType0.isStringValueType());
      //  // Unstable assertion: assertEquals(true, functionType0.isFunctionType());
      //  // Unstable assertion: assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      //  // Unstable assertion: assertEquals(true, functionType0.isConstructor());
      //  // Unstable assertion: assertEquals(false, functionType0.isFunctionPrototypeType());
      //  // Unstable assertion: assertEquals(true, functionType0.hasCachedValues());
      //  // Unstable assertion: assertEquals(false, functionType0.isNoType());
      //  // Unstable assertion: assertEquals(false, functionType0.isNoResolvedType());
      //  // Unstable assertion: assertEquals(false, functionType0.isNominalType());
      //  // Unstable assertion: assertEquals(false, functionType0.isRecordType());
      //  // Unstable assertion: assertEquals(false, functionType0.isNullType());
      //  // Unstable assertion: assertEquals(false, functionType0.isUnionType());
      //  // Unstable assertion: assertEquals(false, functionType0.isVoidType());
      //  // Unstable assertion: assertEquals(false, functionType0.isReturnTypeInferred());
      //  // Unstable assertion: assertEquals(false, functionType0.isCheckedUnknownType());
      //  // Unstable assertion: assertEquals(false, functionType0.isNominalConstructor());
      //  // Unstable assertion: assertEquals(false, functionType0.isOrdinaryFunction());
      //  // Unstable assertion: assertEquals(true, functionType0.hasInstanceType());
      //  // Unstable assertion: assertEquals(false, functionType0.isTemplateType());
      //  // Unstable assertion: assertEquals(false, functionType0.isInterface());
      //  // Unstable assertion: assertEquals(false, functionType0.isEnumElementType());
      //  // Unstable assertion: assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      //  // Unstable assertion: assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isFunctionPrototypeType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isNoObjectType());
      //  // Unstable assertion: assertEquals(3, errorFunctionType0.getMaxArguments());
      //  // Unstable assertion: assertEquals(true, errorFunctionType0.hasCachedValues());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isRecordType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isTemplateType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isNoType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isCheckedUnknownType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isStringValueType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isBooleanValueType());
      //  // Unstable assertion: assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isNoResolvedType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isParameterizedType());
      //  // Unstable assertion: assertEquals(true, errorFunctionType0.hasInstanceType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isNominalType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isNumberValueType());
      //  // Unstable assertion: assertEquals(true, errorFunctionType0.isNominalConstructor());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isVoidType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isEnumElementType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isAllType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isInterface());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isUnionType());
      //  // Unstable assertion: assertEquals(true, errorFunctionType0.isConstructor());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isEnumType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isResolved());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isNullType());
      //  // Unstable assertion: assertEquals(true, errorFunctionType0.isFunctionType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isReturnTypeInferred());
      //  // Unstable assertion: assertEquals(true, errorFunctionType0.canBeCalled());
      //  // Unstable assertion: assertNotNull(functionType0);
      
      Set<String> set0 = functionType0.getOwnPropertyNames();
      //  // Unstable assertion: assertEquals(false, set0.isEmpty());
      //  // Unstable assertion: assertEquals(1, set0.size());
      //  // Unstable assertion: assertEquals(false, functionType0.isAllType());
      //  // Unstable assertion: assertEquals(0, functionType0.getExtendedInterfacesCount());
      //  // Unstable assertion: assertEquals(true, functionType0.canBeCalled());
      //  // Unstable assertion: assertEquals(2147483647, functionType0.getMaxArguments());
      //  // Unstable assertion: assertEquals(false, functionType0.isResolved());
      //  // Unstable assertion: assertEquals(false, functionType0.isBooleanValueType());
      //  // Unstable assertion: assertEquals(false, functionType0.isNumberValueType());
      //  // Unstable assertion: assertEquals(false, functionType0.isNoObjectType());
      //  // Unstable assertion: assertEquals(false, functionType0.isParameterizedType());
      //  // Unstable assertion: assertEquals(false, functionType0.isEnumType());
      //  // Unstable assertion: assertEquals(false, functionType0.isStringValueType());
      //  // Unstable assertion: assertEquals(true, functionType0.isFunctionType());
      //  // Unstable assertion: assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      //  // Unstable assertion: assertEquals(true, functionType0.isConstructor());
      //  // Unstable assertion: assertEquals(false, functionType0.isFunctionPrototypeType());
      //  // Unstable assertion: assertEquals(true, functionType0.hasCachedValues());
      //  // Unstable assertion: assertEquals(false, functionType0.isNoType());
      //  // Unstable assertion: assertEquals(false, functionType0.isNoResolvedType());
      //  // Unstable assertion: assertEquals(false, functionType0.isNominalType());
      //  // Unstable assertion: assertEquals(false, functionType0.isRecordType());
      //  // Unstable assertion: assertEquals(false, functionType0.isNullType());
      //  // Unstable assertion: assertEquals(false, functionType0.isUnionType());
      //  // Unstable assertion: assertEquals(false, functionType0.isVoidType());
      //  // Unstable assertion: assertEquals(false, functionType0.isReturnTypeInferred());
      //  // Unstable assertion: assertEquals(false, functionType0.isCheckedUnknownType());
      //  // Unstable assertion: assertEquals(false, functionType0.isNominalConstructor());
      //  // Unstable assertion: assertEquals(false, functionType0.isOrdinaryFunction());
      //  // Unstable assertion: assertEquals(true, functionType0.hasInstanceType());
      //  // Unstable assertion: assertEquals(false, functionType0.isTemplateType());
      //  // Unstable assertion: assertEquals(false, functionType0.isInterface());
      //  // Unstable assertion: assertEquals(false, functionType0.isEnumElementType());
      //  // Unstable assertion: assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      //  // Unstable assertion: assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isFunctionPrototypeType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isNoObjectType());
      //  // Unstable assertion: assertEquals(3, errorFunctionType0.getMaxArguments());
      //  // Unstable assertion: assertEquals(true, errorFunctionType0.hasCachedValues());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isRecordType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isTemplateType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isNoType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isCheckedUnknownType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isStringValueType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isBooleanValueType());
      //  // Unstable assertion: assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isNoResolvedType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isParameterizedType());
      //  // Unstable assertion: assertEquals(true, errorFunctionType0.hasInstanceType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isNominalType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isNumberValueType());
      //  // Unstable assertion: assertEquals(true, errorFunctionType0.isNominalConstructor());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isVoidType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isEnumElementType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isAllType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isInterface());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isUnionType());
      //  // Unstable assertion: assertEquals(true, errorFunctionType0.isConstructor());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isEnumType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isResolved());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isNullType());
      //  // Unstable assertion: assertEquals(true, errorFunctionType0.isFunctionType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isReturnTypeInferred());
      //  // Unstable assertion: assertEquals(true, errorFunctionType0.canBeCalled());
      //  // Unstable assertion: assertNotNull(set0);
  }

  @Test
  public void test47()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      String string0 = "protoyp";
      boolean boolean0 = true;
      UnknownType unknownType0 = new UnknownType(jSTypeRegistry0, boolean0);
      assertEquals(true, unknownType0.matchesNumberContext());
      assertEquals(false, unknownType0.isEnumType());
      assertEquals(false, unknownType0.isNullType());
      assertEquals(false, unknownType0.isNoType());
      assertEquals(false, unknownType0.isNumberValueType());
      assertEquals(true, unknownType0.isUnknownType());
      assertEquals(false, unknownType0.isVoidType());
      assertEquals(true, unknownType0.isCheckedUnknownType());
      assertEquals(false, unknownType0.isParameterizedType());
      assertEquals(true, unknownType0.matchesObjectContext());
      assertEquals(false, unknownType0.isUnionType());
      assertEquals(false, unknownType0.isRecordType());
      assertEquals(false, unknownType0.isFunctionPrototypeType());
      assertEquals(false, unknownType0.isAllType());
      assertEquals(false, unknownType0.isBooleanValueType());
      assertEquals(true, unknownType0.isNullable());
      assertEquals(2147483647, unknownType0.getPropertiesCount());
      assertEquals(true, unknownType0.canBeCalled());
      assertEquals(false, unknownType0.isResolved());
      assertEquals(false, unknownType0.hasCachedValues());
      assertEquals(false, unknownType0.isConstructor());
      assertEquals("??", unknownType0.getReferenceName());
      assertEquals(false, unknownType0.isFunctionType());
      assertEquals(true, unknownType0.matchesStringContext());
      assertEquals(false, unknownType0.isNominalConstructor());
      assertEquals(false, unknownType0.isEnumElementType());
      assertEquals(BooleanLiteralSet.BOTH, unknownType0.getPossibleToBooleanOutcomes());
      assertEquals(false, unknownType0.isStringValueType());
      assertEquals(false, unknownType0.isOrdinaryFunction());
      assertEquals(false, unknownType0.isNoResolvedType());
      assertEquals(false, unknownType0.isInterface());
      assertEquals(false, unknownType0.isNoObjectType());
      assertEquals(false, unknownType0.isNominalType());
      assertEquals("Unknown", unknownType0.getDisplayName());
      assertEquals(false, unknownType0.hasReferenceName());
      assertEquals(true, unknownType0.hasDisplayName());
      assertEquals(false, unknownType0.isTemplateType());
      assertEquals(false, unknownType0.isNativeObjectType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(unknownType0);
      
      Node node0 = unknownType0.getRootNode();
      assertEquals(true, unknownType0.matchesNumberContext());
      assertEquals(false, unknownType0.isEnumType());
      assertEquals(false, unknownType0.isNullType());
      assertEquals(false, unknownType0.isNoType());
      assertEquals(false, unknownType0.isNumberValueType());
      assertEquals(true, unknownType0.isUnknownType());
      assertEquals(false, unknownType0.isVoidType());
      assertEquals(true, unknownType0.isCheckedUnknownType());
      assertEquals(false, unknownType0.isParameterizedType());
      assertEquals(true, unknownType0.matchesObjectContext());
      assertEquals(false, unknownType0.isUnionType());
      assertEquals(false, unknownType0.isRecordType());
      assertEquals(false, unknownType0.isFunctionPrototypeType());
      assertEquals(false, unknownType0.isAllType());
      assertEquals(false, unknownType0.isBooleanValueType());
      assertEquals(true, unknownType0.isNullable());
      assertEquals(2147483647, unknownType0.getPropertiesCount());
      assertEquals(true, unknownType0.canBeCalled());
      assertEquals(false, unknownType0.isResolved());
      assertEquals(false, unknownType0.hasCachedValues());
      assertEquals(false, unknownType0.isConstructor());
      assertEquals("??", unknownType0.getReferenceName());
      assertEquals(false, unknownType0.isFunctionType());
      assertEquals(true, unknownType0.matchesStringContext());
      assertEquals(false, unknownType0.isNominalConstructor());
      assertEquals(false, unknownType0.isEnumElementType());
      assertEquals(BooleanLiteralSet.BOTH, unknownType0.getPossibleToBooleanOutcomes());
      assertEquals(false, unknownType0.isStringValueType());
      assertEquals(false, unknownType0.isOrdinaryFunction());
      assertEquals(false, unknownType0.isNoResolvedType());
      assertEquals(false, unknownType0.isInterface());
      assertEquals(false, unknownType0.isNoObjectType());
      assertEquals(false, unknownType0.isNominalType());
      assertEquals("Unknown", unknownType0.getDisplayName());
      assertEquals(false, unknownType0.hasReferenceName());
      assertEquals(true, unknownType0.hasDisplayName());
      assertEquals(false, unknownType0.isTemplateType());
      assertEquals(false, unknownType0.isNativeObjectType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNull(node0);
      
      FunctionType functionType0 = FunctionType.forInterface(jSTypeRegistry0, string0, node0);
      assertEquals(true, unknownType0.matchesNumberContext());
      assertEquals(false, unknownType0.isEnumType());
      assertEquals(false, unknownType0.isNullType());
      assertEquals(false, unknownType0.isNoType());
      assertEquals(false, unknownType0.isNumberValueType());
      assertEquals(true, unknownType0.isUnknownType());
      assertEquals(false, unknownType0.isVoidType());
      assertEquals(true, unknownType0.isCheckedUnknownType());
      assertEquals(false, unknownType0.isParameterizedType());
      assertEquals(true, unknownType0.matchesObjectContext());
      assertEquals(false, unknownType0.isUnionType());
      assertEquals(false, unknownType0.isRecordType());
      assertEquals(false, unknownType0.isFunctionPrototypeType());
      assertEquals(false, unknownType0.isAllType());
      assertEquals(false, unknownType0.isBooleanValueType());
      assertEquals(true, unknownType0.isNullable());
      assertEquals(2147483647, unknownType0.getPropertiesCount());
      assertEquals(true, unknownType0.canBeCalled());
      assertEquals(false, unknownType0.isResolved());
      assertEquals(false, unknownType0.hasCachedValues());
      assertEquals(false, unknownType0.isConstructor());
      assertEquals("??", unknownType0.getReferenceName());
      assertEquals(false, unknownType0.isFunctionType());
      assertEquals(true, unknownType0.matchesStringContext());
      assertEquals(false, unknownType0.isNominalConstructor());
      assertEquals(false, unknownType0.isEnumElementType());
      assertEquals(BooleanLiteralSet.BOTH, unknownType0.getPossibleToBooleanOutcomes());
      assertEquals(false, unknownType0.isStringValueType());
      assertEquals(false, unknownType0.isOrdinaryFunction());
      assertEquals(false, unknownType0.isNoResolvedType());
      assertEquals(false, unknownType0.isInterface());
      assertEquals(false, unknownType0.isNoObjectType());
      assertEquals(false, unknownType0.isNominalType());
      assertEquals("Unknown", unknownType0.getDisplayName());
      assertEquals(false, unknownType0.hasReferenceName());
      assertEquals(true, unknownType0.hasDisplayName());
      assertEquals(false, unknownType0.isTemplateType());
      assertEquals(false, unknownType0.isNativeObjectType());
      assertEquals(false, functionType0.isCheckedUnknownType());
      assertEquals(false, functionType0.isOrdinaryFunction());
      assertEquals(false, functionType0.isConstructor());
      assertEquals(true, functionType0.canBeCalled());
      assertEquals(false, functionType0.isParameterizedType());
      assertEquals(false, functionType0.isRecordType());
      assertEquals(false, functionType0.isEnumType());
      assertEquals(false, functionType0.isNominalConstructor());
      assertEquals(false, functionType0.isBooleanValueType());
      assertEquals(false, functionType0.isReturnTypeInferred());
      assertEquals(false, functionType0.isNumberValueType());
      assertEquals(false, functionType0.isUnionType());
      assertEquals(true, functionType0.isFunctionType());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, functionType0.isTemplateType());
      assertEquals(false, functionType0.hasCachedValues());
      assertEquals(0, functionType0.getMaxArguments());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertEquals(false, functionType0.isFunctionPrototypeType());
      assertEquals(false, functionType0.isNullType());
      assertEquals(true, functionType0.hasInstanceType());
      assertEquals(false, functionType0.isNoResolvedType());
      assertEquals(false, functionType0.isStringValueType());
      assertEquals(false, functionType0.isNoObjectType());
      assertEquals(false, functionType0.isNoType());
      assertEquals(false, functionType0.isVoidType());
      assertEquals(true, functionType0.isInterface());
      assertEquals(false, functionType0.isNominalType());
      assertEquals(false, functionType0.isEnumElementType());
      assertEquals(false, functionType0.isResolved());
      assertEquals(false, functionType0.isAllType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(functionType0);
      
      ObjectType objectType0 = FunctionType.getTopDefiningInterface((ObjectType) functionType0, string0);
      assertEquals(true, unknownType0.matchesNumberContext());
      assertEquals(false, unknownType0.isEnumType());
      assertEquals(false, unknownType0.isNullType());
      assertEquals(false, unknownType0.isNoType());
      assertEquals(false, unknownType0.isNumberValueType());
      assertEquals(true, unknownType0.isUnknownType());
      assertEquals(false, unknownType0.isVoidType());
      assertEquals(true, unknownType0.isCheckedUnknownType());
      assertEquals(false, unknownType0.isParameterizedType());
      assertEquals(true, unknownType0.matchesObjectContext());
      assertEquals(false, unknownType0.isUnionType());
      assertEquals(false, unknownType0.isRecordType());
      assertEquals(false, unknownType0.isFunctionPrototypeType());
      assertEquals(false, unknownType0.isAllType());
      assertEquals(false, unknownType0.isBooleanValueType());
      assertEquals(true, unknownType0.isNullable());
      assertEquals(2147483647, unknownType0.getPropertiesCount());
      assertEquals(true, unknownType0.canBeCalled());
      assertEquals(false, unknownType0.isResolved());
      assertEquals(false, unknownType0.hasCachedValues());
      assertEquals(false, unknownType0.isConstructor());
      assertEquals("??", unknownType0.getReferenceName());
      assertEquals(false, unknownType0.isFunctionType());
      assertEquals(true, unknownType0.matchesStringContext());
      assertEquals(false, unknownType0.isNominalConstructor());
      assertEquals(false, unknownType0.isEnumElementType());
      assertEquals(BooleanLiteralSet.BOTH, unknownType0.getPossibleToBooleanOutcomes());
      assertEquals(false, unknownType0.isStringValueType());
      assertEquals(false, unknownType0.isOrdinaryFunction());
      assertEquals(false, unknownType0.isNoResolvedType());
      assertEquals(false, unknownType0.isInterface());
      assertEquals(false, unknownType0.isNoObjectType());
      assertEquals(false, unknownType0.isNominalType());
      assertEquals("Unknown", unknownType0.getDisplayName());
      assertEquals(false, unknownType0.hasReferenceName());
      assertEquals(true, unknownType0.hasDisplayName());
      assertEquals(false, unknownType0.isTemplateType());
      assertEquals(false, unknownType0.isNativeObjectType());
      assertEquals(false, functionType0.isCheckedUnknownType());
      assertEquals(false, functionType0.isOrdinaryFunction());
      assertEquals(false, functionType0.isConstructor());
      assertEquals(true, functionType0.canBeCalled());
      assertEquals(false, functionType0.isParameterizedType());
      assertEquals(false, functionType0.isRecordType());
      assertEquals(false, functionType0.isEnumType());
      assertEquals(false, functionType0.isNominalConstructor());
      assertEquals(false, functionType0.isBooleanValueType());
      assertEquals(false, functionType0.isReturnTypeInferred());
      assertEquals(false, functionType0.isNumberValueType());
      assertEquals(false, functionType0.isUnionType());
      assertEquals(true, functionType0.isFunctionType());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertEquals(true, functionType0.hasCachedValues());
      assertEquals(false, functionType0.isTemplateType());
      assertEquals(0, functionType0.getMaxArguments());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertEquals(false, functionType0.isFunctionPrototypeType());
      assertEquals(false, functionType0.isNullType());
      assertEquals(true, functionType0.hasInstanceType());
      assertEquals(false, functionType0.isNoResolvedType());
      assertEquals(false, functionType0.isStringValueType());
      assertEquals(false, functionType0.isNoObjectType());
      assertEquals(false, functionType0.isNoType());
      assertEquals(false, functionType0.isVoidType());
      assertEquals(true, functionType0.isInterface());
      assertEquals(false, functionType0.isNominalType());
      assertEquals(false, functionType0.isEnumElementType());
      assertEquals(false, functionType0.isResolved());
      assertEquals(false, functionType0.isAllType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNull(objectType0);
  }

  @Test
  public void test48()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      boolean boolean0 = true;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0, boolean0);
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      NoObjectType noObjectType0 = new NoObjectType(jSTypeRegistry0);
      assertEquals(BooleanLiteralSet.TRUE, noObjectType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noObjectType0.isUnionType());
      assertEquals(false, noObjectType0.isFunctionType());
      assertEquals(false, noObjectType0.isRecordType());
      assertEquals(true, noObjectType0.hasInstanceType());
      assertEquals(false, noObjectType0.hasCachedValues());
      assertEquals(false, noObjectType0.isNoResolvedType());
      assertEquals(2147483647, noObjectType0.getMaxArguments());
      assertEquals(false, noObjectType0.isNumberValueType());
      assertEquals(2147483647, noObjectType0.getPropertiesCount());
      assertEquals(false, noObjectType0.isResolved());
      assertNull(noObjectType0.getReferenceName());
      assertEquals(false, noObjectType0.isParameterizedType());
      assertEquals(true, noObjectType0.matchesStringContext());
      assertEquals(false, noObjectType0.isNoType());
      assertEquals(false, noObjectType0.isReturnTypeInferred());
      assertEquals(true, noObjectType0.matchesObjectContext());
      assertEquals(0, noObjectType0.getExtendedInterfacesCount());
      assertEquals(false, noObjectType0.isBooleanValueType());
      assertEquals(false, noObjectType0.isNominalType());
      assertEquals(true, noObjectType0.isNoObjectType());
      assertEquals(false, noObjectType0.isNominalConstructor());
      assertEquals(false, noObjectType0.isStringValueType());
      assertEquals(false, noObjectType0.isVoidType());
      assertEquals(false, noObjectType0.isFunctionPrototypeType());
      assertEquals(false, noObjectType0.isOrdinaryFunction());
      assertEquals(true, noObjectType0.isConstructor());
      assertEquals(true, noObjectType0.canBeCalled());
      assertEquals(false, noObjectType0.isTemplateType());
      assertEquals(false, noObjectType0.isAllType());
      assertEquals(false, noObjectType0.isCheckedUnknownType());
      assertEquals(false, noObjectType0.isInterface());
      assertEquals(false, noObjectType0.isEnumElementType());
      assertEquals(false, noObjectType0.isNullType());
      assertEquals(false, noObjectType0.isEnumType());
      assertEquals(true, noObjectType0.matchesNumberContext());
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(noObjectType0);
      
      int int0 = noObjectType0.getMaxArguments();
      assertEquals(BooleanLiteralSet.TRUE, noObjectType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noObjectType0.isUnionType());
      assertEquals(false, noObjectType0.isFunctionType());
      assertEquals(false, noObjectType0.isRecordType());
      assertEquals(true, noObjectType0.hasInstanceType());
      assertEquals(false, noObjectType0.hasCachedValues());
      assertEquals(false, noObjectType0.isNoResolvedType());
      assertEquals(2147483647, noObjectType0.getMaxArguments());
      assertEquals(false, noObjectType0.isNumberValueType());
      assertEquals(2147483647, noObjectType0.getPropertiesCount());
      assertEquals(false, noObjectType0.isResolved());
      assertNull(noObjectType0.getReferenceName());
      assertEquals(false, noObjectType0.isParameterizedType());
      assertEquals(true, noObjectType0.matchesStringContext());
      assertEquals(false, noObjectType0.isNoType());
      assertEquals(false, noObjectType0.isReturnTypeInferred());
      assertEquals(true, noObjectType0.matchesObjectContext());
      assertEquals(0, noObjectType0.getExtendedInterfacesCount());
      assertEquals(false, noObjectType0.isBooleanValueType());
      assertEquals(false, noObjectType0.isNominalType());
      assertEquals(true, noObjectType0.isNoObjectType());
      assertEquals(false, noObjectType0.isNominalConstructor());
      assertEquals(false, noObjectType0.isStringValueType());
      assertEquals(false, noObjectType0.isVoidType());
      assertEquals(false, noObjectType0.isFunctionPrototypeType());
      assertEquals(false, noObjectType0.isOrdinaryFunction());
      assertEquals(true, noObjectType0.isConstructor());
      assertEquals(true, noObjectType0.canBeCalled());
      assertEquals(false, noObjectType0.isTemplateType());
      assertEquals(false, noObjectType0.isAllType());
      assertEquals(false, noObjectType0.isCheckedUnknownType());
      assertEquals(false, noObjectType0.isInterface());
      assertEquals(false, noObjectType0.isEnumElementType());
      assertEquals(false, noObjectType0.isNullType());
      assertEquals(false, noObjectType0.isEnumType());
      assertEquals(true, noObjectType0.matchesNumberContext());
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(Integer.MAX_VALUE, int0);
  }

  @Test
  public void test49()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      StringType stringType0 = new StringType(jSTypeRegistry0);
      assertEquals(false, stringType0.isEnumType());
      assertEquals("string", stringType0.getDisplayName());
      assertEquals(BooleanLiteralSet.BOTH, stringType0.getPossibleToBooleanOutcomes());
      assertEquals(false, stringType0.isInterface());
      assertEquals(false, stringType0.isBooleanValueType());
      assertEquals(false, stringType0.isEnumElementType());
      assertEquals(false, stringType0.isNominalConstructor());
      assertEquals(false, stringType0.isFunctionPrototypeType());
      assertEquals(false, stringType0.isTemplateType());
      assertEquals(false, stringType0.isConstructor());
      assertEquals(false, stringType0.isRecordType());
      assertEquals(false, stringType0.isNoType());
      assertEquals(false, stringType0.isFunctionType());
      assertEquals(true, stringType0.isStringValueType());
      assertEquals(false, stringType0.isNoResolvedType());
      assertEquals(true, stringType0.matchesObjectContext());
      assertEquals(false, stringType0.isCheckedUnknownType());
      assertEquals(false, stringType0.isAllType());
      assertEquals(false, stringType0.isNumberValueType());
      assertEquals(false, stringType0.isNominalType());
      assertEquals(true, stringType0.matchesStringContext());
      assertEquals(false, stringType0.isResolved());
      assertEquals(false, stringType0.isNullType());
      assertEquals(true, stringType0.matchesNumberContext());
      assertEquals(false, stringType0.isVoidType());
      assertEquals(false, stringType0.isParameterizedType());
      assertEquals(false, stringType0.isNoObjectType());
      assertEquals(false, stringType0.isUnionType());
      assertEquals(false, stringType0.isOrdinaryFunction());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(stringType0);
      
      Stack<JSType> stack0 = new Stack<JSType>();
      assertEquals(true, stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertEquals(0, stack0.size());
      assertEquals(true, stack0.empty());
      assertNotNull(stack0);
      
      FunctionType functionType0 = jSTypeRegistry0.createFunctionTypeWithVarArgs((JSType) stringType0, (List<JSType>) stack0);
      assertEquals(true, stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertEquals(0, stack0.size());
      assertEquals(true, stack0.empty());
      assertEquals(false, functionType0.isNumberValueType());
      assertEquals(false, functionType0.hasInstanceType());
      assertEquals(true, functionType0.isOrdinaryFunction());
      assertEquals(false, functionType0.isNominalType());
      assertEquals(false, functionType0.hasCachedValues());
      assertEquals(false, functionType0.isNullType());
      assertEquals(false, functionType0.isAllType());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertEquals(false, functionType0.isVoidType());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, functionType0.isBooleanValueType());
      assertEquals(true, functionType0.isFunctionType());
      assertEquals(false, functionType0.isConstructor());
      assertEquals(false, functionType0.isInterface());
      assertEquals(false, functionType0.isNoObjectType());
      assertEquals(false, functionType0.isParameterizedType());
      assertEquals(true, functionType0.canBeCalled());
      assertEquals(false, functionType0.isEnumType());
      assertEquals(false, functionType0.isEnumElementType());
      assertEquals(false, functionType0.isCheckedUnknownType());
      assertEquals(false, functionType0.isReturnTypeInferred());
      assertEquals(false, functionType0.isNoType());
      assertEquals(false, functionType0.isNominalConstructor());
      assertEquals(0, functionType0.getMaxArguments());
      assertEquals(false, functionType0.isNoResolvedType());
      assertEquals(false, functionType0.isResolved());
      assertEquals(false, functionType0.isFunctionPrototypeType());
      assertEquals(false, functionType0.isTemplateType());
      assertEquals(false, functionType0.isUnionType());
      assertEquals(false, functionType0.isStringValueType());
      assertEquals(false, functionType0.isRecordType());
      assertEquals(false, stringType0.isEnumType());
      assertEquals("string", stringType0.getDisplayName());
      assertEquals(BooleanLiteralSet.BOTH, stringType0.getPossibleToBooleanOutcomes());
      assertEquals(false, stringType0.isInterface());
      assertEquals(false, stringType0.isBooleanValueType());
      assertEquals(false, stringType0.isEnumElementType());
      assertEquals(false, stringType0.isNominalConstructor());
      assertEquals(false, stringType0.isFunctionPrototypeType());
      assertEquals(false, stringType0.isTemplateType());
      assertEquals(false, stringType0.isConstructor());
      assertEquals(false, stringType0.isRecordType());
      assertEquals(false, stringType0.isNoType());
      assertEquals(false, stringType0.isFunctionType());
      assertEquals(true, stringType0.isStringValueType());
      assertEquals(false, stringType0.isNoResolvedType());
      assertEquals(true, stringType0.matchesObjectContext());
      assertEquals(false, stringType0.isCheckedUnknownType());
      assertEquals(false, stringType0.isAllType());
      assertEquals(false, stringType0.isNumberValueType());
      assertEquals(false, stringType0.isNominalType());
      assertEquals(true, stringType0.matchesStringContext());
      assertEquals(false, stringType0.isResolved());
      assertEquals(false, stringType0.isNullType());
      assertEquals(true, stringType0.matchesNumberContext());
      assertEquals(false, stringType0.isVoidType());
      assertEquals(false, stringType0.isParameterizedType());
      assertEquals(false, stringType0.isNoObjectType());
      assertEquals(false, stringType0.isUnionType());
      assertEquals(false, stringType0.isOrdinaryFunction());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(functionType0);
      
      int int0 = functionType0.getMaxArguments();
      assertEquals(true, stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertEquals(0, stack0.size());
      assertEquals(true, stack0.empty());
      assertEquals(false, functionType0.isNumberValueType());
      assertEquals(false, functionType0.hasInstanceType());
      assertEquals(true, functionType0.isOrdinaryFunction());
      assertEquals(false, functionType0.isNominalType());
      assertEquals(false, functionType0.hasCachedValues());
      assertEquals(false, functionType0.isNullType());
      assertEquals(false, functionType0.isAllType());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertEquals(false, functionType0.isVoidType());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, functionType0.isBooleanValueType());
      assertEquals(true, functionType0.isFunctionType());
      assertEquals(false, functionType0.isConstructor());
      assertEquals(false, functionType0.isInterface());
      assertEquals(false, functionType0.isNoObjectType());
      assertEquals(false, functionType0.isParameterizedType());
      assertEquals(true, functionType0.canBeCalled());
      assertEquals(false, functionType0.isEnumType());
      assertEquals(false, functionType0.isEnumElementType());
      assertEquals(false, functionType0.isCheckedUnknownType());
      assertEquals(false, functionType0.isReturnTypeInferred());
      assertEquals(false, functionType0.isNoType());
      assertEquals(false, functionType0.isNominalConstructor());
      assertEquals(0, functionType0.getMaxArguments());
      assertEquals(false, functionType0.isNoResolvedType());
      assertEquals(false, functionType0.isResolved());
      assertEquals(false, functionType0.isFunctionPrototypeType());
      assertEquals(false, functionType0.isTemplateType());
      assertEquals(false, functionType0.isUnionType());
      assertEquals(false, functionType0.isStringValueType());
      assertEquals(false, functionType0.isRecordType());
      assertEquals(false, stringType0.isEnumType());
      assertEquals("string", stringType0.getDisplayName());
      assertEquals(BooleanLiteralSet.BOTH, stringType0.getPossibleToBooleanOutcomes());
      assertEquals(false, stringType0.isInterface());
      assertEquals(false, stringType0.isBooleanValueType());
      assertEquals(false, stringType0.isEnumElementType());
      assertEquals(false, stringType0.isNominalConstructor());
      assertEquals(false, stringType0.isFunctionPrototypeType());
      assertEquals(false, stringType0.isTemplateType());
      assertEquals(false, stringType0.isConstructor());
      assertEquals(false, stringType0.isRecordType());
      assertEquals(false, stringType0.isNoType());
      assertEquals(false, stringType0.isFunctionType());
      assertEquals(true, stringType0.isStringValueType());
      assertEquals(false, stringType0.isNoResolvedType());
      assertEquals(true, stringType0.matchesObjectContext());
      assertEquals(false, stringType0.isCheckedUnknownType());
      assertEquals(false, stringType0.isAllType());
      assertEquals(false, stringType0.isNumberValueType());
      assertEquals(false, stringType0.isNominalType());
      assertEquals(true, stringType0.matchesStringContext());
      assertEquals(false, stringType0.isResolved());
      assertEquals(false, stringType0.isNullType());
      assertEquals(true, stringType0.matchesNumberContext());
      assertEquals(false, stringType0.isVoidType());
      assertEquals(false, stringType0.isParameterizedType());
      assertEquals(false, stringType0.isNoObjectType());
      assertEquals(false, stringType0.isUnionType());
      assertEquals(false, stringType0.isOrdinaryFunction());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(0, int0);
  }

  @Test
  public void test50()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      String string0 = "";
      boolean boolean0 = false;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0, boolean0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, string0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, errorFunctionType0.isVoidType());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertEquals(3, errorFunctionType0.getMaxArguments());
      assertEquals(false, errorFunctionType0.isTemplateType());
      assertEquals(false, errorFunctionType0.isNoType());
      assertEquals(true, errorFunctionType0.isNominalConstructor());
      assertEquals(false, errorFunctionType0.isParameterizedType());
      assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      assertEquals(false, errorFunctionType0.isEnumType());
      assertEquals(false, errorFunctionType0.isUnionType());
      assertEquals(false, errorFunctionType0.isCheckedUnknownType());
      assertEquals(true, errorFunctionType0.hasInstanceType());
      assertEquals(false, errorFunctionType0.isInterface());
      assertEquals(false, errorFunctionType0.isNoResolvedType());
      assertEquals(false, errorFunctionType0.isNominalType());
      assertEquals(false, errorFunctionType0.isEnumElementType());
      assertEquals(true, errorFunctionType0.canBeCalled());
      assertEquals(false, errorFunctionType0.isBooleanValueType());
      assertEquals(false, errorFunctionType0.isReturnTypeInferred());
      assertEquals(false, errorFunctionType0.isNoObjectType());
      assertEquals(false, errorFunctionType0.isStringValueType());
      assertEquals(false, errorFunctionType0.hasCachedValues());
      assertEquals(false, errorFunctionType0.isNumberValueType());
      assertEquals(false, errorFunctionType0.isFunctionPrototypeType());
      assertEquals(true, errorFunctionType0.isFunctionType());
      assertEquals(false, errorFunctionType0.isRecordType());
      assertEquals(false, errorFunctionType0.isResolved());
      assertEquals(false, errorFunctionType0.isAllType());
      assertEquals(true, errorFunctionType0.isConstructor());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, errorFunctionType0.isNullType());
      assertNotNull(errorFunctionType0);
      
      int int0 = errorFunctionType0.getMaxArguments();
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, errorFunctionType0.isVoidType());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertEquals(3, errorFunctionType0.getMaxArguments());
      assertEquals(false, errorFunctionType0.isTemplateType());
      assertEquals(false, errorFunctionType0.isNoType());
      assertEquals(true, errorFunctionType0.isNominalConstructor());
      assertEquals(false, errorFunctionType0.isParameterizedType());
      assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      assertEquals(false, errorFunctionType0.isEnumType());
      assertEquals(false, errorFunctionType0.isUnionType());
      assertEquals(false, errorFunctionType0.isCheckedUnknownType());
      assertEquals(true, errorFunctionType0.hasInstanceType());
      assertEquals(false, errorFunctionType0.isInterface());
      assertEquals(false, errorFunctionType0.isNoResolvedType());
      assertEquals(false, errorFunctionType0.isNominalType());
      assertEquals(false, errorFunctionType0.isEnumElementType());
      assertEquals(true, errorFunctionType0.canBeCalled());
      assertEquals(false, errorFunctionType0.isBooleanValueType());
      assertEquals(false, errorFunctionType0.isReturnTypeInferred());
      assertEquals(false, errorFunctionType0.isNoObjectType());
      assertEquals(false, errorFunctionType0.isStringValueType());
      assertEquals(false, errorFunctionType0.hasCachedValues());
      assertEquals(false, errorFunctionType0.isNumberValueType());
      assertEquals(false, errorFunctionType0.isFunctionPrototypeType());
      assertEquals(true, errorFunctionType0.isFunctionType());
      assertEquals(false, errorFunctionType0.isRecordType());
      assertEquals(false, errorFunctionType0.isResolved());
      assertEquals(false, errorFunctionType0.isAllType());
      assertEquals(true, errorFunctionType0.isConstructor());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, errorFunctionType0.isNullType());
      assertEquals(3, int0);
  }

  @Test
  public void test51()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      boolean boolean0 = false;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0, boolean0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(true, noResolvedType0.matchesObjectContext());
      assertEquals(false, noResolvedType0.isNoObjectType());
      assertEquals(false, noResolvedType0.isParameterizedType());
      assertEquals(true, noResolvedType0.hasInstanceType());
      assertEquals(false, noResolvedType0.isStringValueType());
      assertNull(noResolvedType0.getReferenceName());
      assertEquals(false, noResolvedType0.isOrdinaryFunction());
      assertEquals(true, noResolvedType0.isConstructor());
      assertEquals(true, noResolvedType0.canBeCalled());
      assertEquals(false, noResolvedType0.isFunctionPrototypeType());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noResolvedType0.isReturnTypeInferred());
      assertEquals(false, noResolvedType0.isVoidType());
      assertEquals(false, noResolvedType0.isCheckedUnknownType());
      assertEquals(false, noResolvedType0.isResolved());
      assertEquals(false, noResolvedType0.isNominalType());
      assertEquals(2147483647, noResolvedType0.getMaxArguments());
      assertEquals(false, noResolvedType0.isRecordType());
      assertEquals(true, noResolvedType0.isNullable());
      assertEquals(false, noResolvedType0.isUnionType());
      assertEquals(2147483647, noResolvedType0.getPropertiesCount());
      assertEquals(false, noResolvedType0.isEnumElementType());
      assertEquals(true, noResolvedType0.matchesStringContext());
      assertEquals(false, noResolvedType0.isFunctionType());
      assertEquals(false, noResolvedType0.isTemplateType());
      assertEquals(false, noResolvedType0.isNominalConstructor());
      assertEquals(false, noResolvedType0.isInterface());
      assertEquals(false, noResolvedType0.isEnumType());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertEquals(false, noResolvedType0.isBooleanValueType());
      assertEquals(false, noResolvedType0.hasCachedValues());
      assertEquals(false, noResolvedType0.isNumberValueType());
      assertEquals(true, noResolvedType0.matchesNumberContext());
      assertEquals(false, noResolvedType0.isAllType());
      assertEquals(false, noResolvedType0.isNullType());
      assertNotNull(noResolvedType0);
      
      String string0 = noResolvedType0.toAnnotationString();
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(true, noResolvedType0.matchesObjectContext());
      assertEquals(false, noResolvedType0.isNoObjectType());
      assertEquals(false, noResolvedType0.isParameterizedType());
      assertEquals(true, noResolvedType0.hasInstanceType());
      assertEquals(false, noResolvedType0.isStringValueType());
      assertNull(noResolvedType0.getReferenceName());
      assertEquals(false, noResolvedType0.isOrdinaryFunction());
      assertEquals(true, noResolvedType0.isConstructor());
      assertEquals(true, noResolvedType0.canBeCalled());
      assertEquals(false, noResolvedType0.isFunctionPrototypeType());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noResolvedType0.isReturnTypeInferred());
      assertEquals(false, noResolvedType0.isVoidType());
      assertEquals(false, noResolvedType0.isCheckedUnknownType());
      assertEquals(false, noResolvedType0.isResolved());
      assertEquals(false, noResolvedType0.isNominalType());
      assertEquals(2147483647, noResolvedType0.getMaxArguments());
      assertEquals(false, noResolvedType0.isRecordType());
      assertEquals(true, noResolvedType0.isNullable());
      assertEquals(false, noResolvedType0.isUnionType());
      assertEquals(2147483647, noResolvedType0.getPropertiesCount());
      assertEquals(false, noResolvedType0.isEnumElementType());
      assertEquals(true, noResolvedType0.matchesStringContext());
      assertEquals(false, noResolvedType0.isFunctionType());
      assertEquals(false, noResolvedType0.isTemplateType());
      assertEquals(false, noResolvedType0.isNominalConstructor());
      assertEquals(false, noResolvedType0.isInterface());
      assertEquals(false, noResolvedType0.isEnumType());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertEquals(false, noResolvedType0.isBooleanValueType());
      assertEquals(false, noResolvedType0.hasCachedValues());
      assertEquals(false, noResolvedType0.isNumberValueType());
      assertEquals(true, noResolvedType0.matchesNumberContext());
      assertEquals(false, noResolvedType0.isAllType());
      assertEquals(false, noResolvedType0.isNullType());
      assertNotNull(string0);
      assertEquals("?", string0);
      
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, string0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(true, noResolvedType0.matchesObjectContext());
      assertEquals(false, noResolvedType0.isNoObjectType());
      assertEquals(false, noResolvedType0.isParameterizedType());
      assertEquals(true, noResolvedType0.hasInstanceType());
      assertEquals(false, noResolvedType0.isStringValueType());
      assertNull(noResolvedType0.getReferenceName());
      assertEquals(false, noResolvedType0.isOrdinaryFunction());
      assertEquals(true, noResolvedType0.isConstructor());
      assertEquals(true, noResolvedType0.canBeCalled());
      assertEquals(false, noResolvedType0.isFunctionPrototypeType());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noResolvedType0.isReturnTypeInferred());
      assertEquals(false, noResolvedType0.isVoidType());
      assertEquals(false, noResolvedType0.isCheckedUnknownType());
      assertEquals(false, noResolvedType0.isResolved());
      assertEquals(false, noResolvedType0.isNominalType());
      assertEquals(2147483647, noResolvedType0.getMaxArguments());
      assertEquals(false, noResolvedType0.isRecordType());
      assertEquals(true, noResolvedType0.isNullable());
      assertEquals(false, noResolvedType0.isUnionType());
      assertEquals(2147483647, noResolvedType0.getPropertiesCount());
      assertEquals(false, noResolvedType0.isEnumElementType());
      assertEquals(true, noResolvedType0.matchesStringContext());
      assertEquals(false, noResolvedType0.isFunctionType());
      assertEquals(false, noResolvedType0.isTemplateType());
      assertEquals(false, noResolvedType0.isNominalConstructor());
      assertEquals(false, noResolvedType0.isInterface());
      assertEquals(false, noResolvedType0.isEnumType());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertEquals(false, noResolvedType0.isBooleanValueType());
      assertEquals(false, noResolvedType0.hasCachedValues());
      assertEquals(false, noResolvedType0.isNumberValueType());
      assertEquals(true, noResolvedType0.matchesNumberContext());
      assertEquals(false, noResolvedType0.isAllType());
      assertEquals(false, noResolvedType0.isNullType());
      assertEquals(true, errorFunctionType0.isNominalConstructor());
      assertEquals(3, errorFunctionType0.getMaxArguments());
      assertEquals(false, errorFunctionType0.isUnionType());
      assertEquals(false, errorFunctionType0.isReturnTypeInferred());
      assertEquals(false, errorFunctionType0.isFunctionPrototypeType());
      assertEquals(false, errorFunctionType0.isNullType());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, errorFunctionType0.isNominalType());
      assertEquals(false, errorFunctionType0.isNoObjectType());
      assertEquals(false, errorFunctionType0.isInterface());
      assertEquals(true, errorFunctionType0.isFunctionType());
      assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      assertEquals(false, errorFunctionType0.isNoResolvedType());
      assertEquals(false, errorFunctionType0.isNumberValueType());
      assertEquals(false, errorFunctionType0.isStringValueType());
      assertEquals(false, errorFunctionType0.hasCachedValues());
      assertEquals(true, errorFunctionType0.hasInstanceType());
      assertEquals(false, errorFunctionType0.isEnumType());
      assertEquals(false, errorFunctionType0.isRecordType());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertEquals(false, errorFunctionType0.isResolved());
      assertEquals(false, errorFunctionType0.isParameterizedType());
      assertEquals(false, errorFunctionType0.isEnumElementType());
      assertEquals(true, errorFunctionType0.isConstructor());
      assertEquals(true, errorFunctionType0.canBeCalled());
      assertEquals(false, errorFunctionType0.isNoType());
      assertEquals(false, errorFunctionType0.isVoidType());
      assertEquals(false, errorFunctionType0.isAllType());
      assertEquals(false, errorFunctionType0.isTemplateType());
      assertEquals(false, errorFunctionType0.isCheckedUnknownType());
      assertEquals(false, errorFunctionType0.isBooleanValueType());
      assertNotNull(errorFunctionType0);
      
      int int0 = errorFunctionType0.getMinArguments();
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(true, noResolvedType0.matchesObjectContext());
      assertEquals(false, noResolvedType0.isNoObjectType());
      assertEquals(false, noResolvedType0.isParameterizedType());
      assertEquals(true, noResolvedType0.hasInstanceType());
      assertEquals(false, noResolvedType0.isStringValueType());
      assertNull(noResolvedType0.getReferenceName());
      assertEquals(false, noResolvedType0.isOrdinaryFunction());
      assertEquals(true, noResolvedType0.isConstructor());
      assertEquals(true, noResolvedType0.canBeCalled());
      assertEquals(false, noResolvedType0.isFunctionPrototypeType());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noResolvedType0.isReturnTypeInferred());
      assertEquals(false, noResolvedType0.isVoidType());
      assertEquals(false, noResolvedType0.isCheckedUnknownType());
      assertEquals(false, noResolvedType0.isResolved());
      assertEquals(false, noResolvedType0.isNominalType());
      assertEquals(2147483647, noResolvedType0.getMaxArguments());
      assertEquals(false, noResolvedType0.isRecordType());
      assertEquals(true, noResolvedType0.isNullable());
      assertEquals(false, noResolvedType0.isUnionType());
      assertEquals(2147483647, noResolvedType0.getPropertiesCount());
      assertEquals(false, noResolvedType0.isEnumElementType());
      assertEquals(true, noResolvedType0.matchesStringContext());
      assertEquals(false, noResolvedType0.isFunctionType());
      assertEquals(false, noResolvedType0.isTemplateType());
      assertEquals(false, noResolvedType0.isNominalConstructor());
      assertEquals(false, noResolvedType0.isInterface());
      assertEquals(false, noResolvedType0.isEnumType());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertEquals(false, noResolvedType0.isBooleanValueType());
      assertEquals(false, noResolvedType0.hasCachedValues());
      assertEquals(false, noResolvedType0.isNumberValueType());
      assertEquals(true, noResolvedType0.matchesNumberContext());
      assertEquals(false, noResolvedType0.isAllType());
      assertEquals(false, noResolvedType0.isNullType());
      assertEquals(true, errorFunctionType0.isNominalConstructor());
      assertEquals(3, errorFunctionType0.getMaxArguments());
      assertEquals(false, errorFunctionType0.isUnionType());
      assertEquals(false, errorFunctionType0.isReturnTypeInferred());
      assertEquals(false, errorFunctionType0.isFunctionPrototypeType());
      assertEquals(false, errorFunctionType0.isNullType());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, errorFunctionType0.isNominalType());
      assertEquals(false, errorFunctionType0.isNoObjectType());
      assertEquals(false, errorFunctionType0.isInterface());
      assertEquals(true, errorFunctionType0.isFunctionType());
      assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      assertEquals(false, errorFunctionType0.isNoResolvedType());
      assertEquals(false, errorFunctionType0.isNumberValueType());
      assertEquals(false, errorFunctionType0.isStringValueType());
      assertEquals(false, errorFunctionType0.hasCachedValues());
      assertEquals(true, errorFunctionType0.hasInstanceType());
      assertEquals(false, errorFunctionType0.isEnumType());
      assertEquals(false, errorFunctionType0.isRecordType());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertEquals(false, errorFunctionType0.isResolved());
      assertEquals(false, errorFunctionType0.isParameterizedType());
      assertEquals(false, errorFunctionType0.isEnumElementType());
      assertEquals(true, errorFunctionType0.isConstructor());
      assertEquals(true, errorFunctionType0.canBeCalled());
      assertEquals(false, errorFunctionType0.isNoType());
      assertEquals(false, errorFunctionType0.isVoidType());
      assertEquals(false, errorFunctionType0.isAllType());
      assertEquals(false, errorFunctionType0.isTemplateType());
      assertEquals(false, errorFunctionType0.isCheckedUnknownType());
      assertEquals(false, errorFunctionType0.isBooleanValueType());
      assertEquals(0, int0);
  }

  @Test
  public void test52()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(true, noResolvedType0.matchesStringContext());
      assertEquals(false, noResolvedType0.isNumberValueType());
      assertEquals(false, noResolvedType0.isInterface());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertEquals(false, noResolvedType0.isResolved());
      assertEquals(false, noResolvedType0.isNullType());
      assertEquals(false, noResolvedType0.isFunctionPrototypeType());
      assertEquals(false, noResolvedType0.isRecordType());
      assertEquals(false, noResolvedType0.isAllType());
      assertEquals(false, noResolvedType0.isEnumType());
      assertEquals(false, noResolvedType0.isOrdinaryFunction());
      assertEquals(false, noResolvedType0.hasCachedValues());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noResolvedType0.isUnionType());
      assertEquals(false, noResolvedType0.isFunctionType());
      assertEquals(false, noResolvedType0.isVoidType());
      assertEquals(false, noResolvedType0.isNoObjectType());
      assertEquals(true, noResolvedType0.isConstructor());
      assertEquals(false, noResolvedType0.isCheckedUnknownType());
      assertEquals(2147483647, noResolvedType0.getPropertiesCount());
      assertEquals(true, noResolvedType0.matchesObjectContext());
      assertEquals(true, noResolvedType0.matchesNumberContext());
      assertEquals(true, noResolvedType0.isNullable());
      assertNull(noResolvedType0.getReferenceName());
      assertEquals(true, noResolvedType0.hasInstanceType());
      assertEquals(false, noResolvedType0.isNominalType());
      assertEquals(false, noResolvedType0.isReturnTypeInferred());
      assertEquals(true, noResolvedType0.canBeCalled());
      assertEquals(2147483647, noResolvedType0.getMaxArguments());
      assertEquals(false, noResolvedType0.isParameterizedType());
      assertEquals(false, noResolvedType0.isTemplateType());
      assertEquals(false, noResolvedType0.isBooleanValueType());
      assertEquals(false, noResolvedType0.isEnumElementType());
      assertEquals(false, noResolvedType0.isStringValueType());
      assertEquals(false, noResolvedType0.isNominalConstructor());
      assertNotNull(noResolvedType0);
      
      int int0 = noResolvedType0.getMinArguments();
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(true, noResolvedType0.matchesStringContext());
      assertEquals(false, noResolvedType0.isNumberValueType());
      assertEquals(false, noResolvedType0.isInterface());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertEquals(false, noResolvedType0.isResolved());
      assertEquals(false, noResolvedType0.isNullType());
      assertEquals(false, noResolvedType0.isFunctionPrototypeType());
      assertEquals(false, noResolvedType0.isRecordType());
      assertEquals(false, noResolvedType0.isAllType());
      assertEquals(false, noResolvedType0.isEnumType());
      assertEquals(false, noResolvedType0.isOrdinaryFunction());
      assertEquals(false, noResolvedType0.hasCachedValues());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noResolvedType0.isUnionType());
      assertEquals(false, noResolvedType0.isFunctionType());
      assertEquals(false, noResolvedType0.isVoidType());
      assertEquals(false, noResolvedType0.isNoObjectType());
      assertEquals(true, noResolvedType0.isConstructor());
      assertEquals(false, noResolvedType0.isCheckedUnknownType());
      assertEquals(2147483647, noResolvedType0.getPropertiesCount());
      assertEquals(true, noResolvedType0.matchesObjectContext());
      assertEquals(true, noResolvedType0.matchesNumberContext());
      assertEquals(true, noResolvedType0.isNullable());
      assertNull(noResolvedType0.getReferenceName());
      assertEquals(true, noResolvedType0.hasInstanceType());
      assertEquals(false, noResolvedType0.isNominalType());
      assertEquals(false, noResolvedType0.isReturnTypeInferred());
      assertEquals(true, noResolvedType0.canBeCalled());
      assertEquals(2147483647, noResolvedType0.getMaxArguments());
      assertEquals(false, noResolvedType0.isParameterizedType());
      assertEquals(false, noResolvedType0.isTemplateType());
      assertEquals(false, noResolvedType0.isBooleanValueType());
      assertEquals(false, noResolvedType0.isEnumElementType());
      assertEquals(false, noResolvedType0.isStringValueType());
      assertEquals(false, noResolvedType0.isNominalConstructor());
      assertEquals(0, int0);
  }

  @Test
  public void test53()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      boolean boolean0 = false;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0, boolean0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      String string0 = ":yLTc+cK.&yC";
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, string0);
      assertEquals(false, errorFunctionType0.isTemplateType());
      assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      assertEquals(3, errorFunctionType0.getMaxArguments());
      assertEquals(false, errorFunctionType0.isNoResolvedType());
      assertEquals(false, errorFunctionType0.hasCachedValues());
      assertEquals(false, errorFunctionType0.isNullType());
      assertEquals(false, errorFunctionType0.isParameterizedType());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertEquals(false, errorFunctionType0.isEnumElementType());
      assertEquals(false, errorFunctionType0.isInterface());
      assertEquals(false, errorFunctionType0.isStringValueType());
      assertEquals(false, errorFunctionType0.isNoObjectType());
      assertEquals(false, errorFunctionType0.isCheckedUnknownType());
      assertEquals(false, errorFunctionType0.isAllType());
      assertEquals(true, errorFunctionType0.isNominalConstructor());
      assertEquals(false, errorFunctionType0.isNominalType());
      assertEquals(false, errorFunctionType0.isNumberValueType());
      assertEquals(false, errorFunctionType0.isVoidType());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, errorFunctionType0.isReturnTypeInferred());
      assertEquals(false, errorFunctionType0.isUnionType());
      assertEquals(false, errorFunctionType0.isNoType());
      assertEquals(false, errorFunctionType0.isResolved());
      assertEquals(true, errorFunctionType0.isConstructor());
      assertEquals(true, errorFunctionType0.isFunctionType());
      assertEquals(true, errorFunctionType0.canBeCalled());
      assertEquals(false, errorFunctionType0.isBooleanValueType());
      assertEquals(false, errorFunctionType0.isRecordType());
      assertEquals(true, errorFunctionType0.hasInstanceType());
      assertEquals(false, errorFunctionType0.isFunctionPrototypeType());
      assertEquals(false, errorFunctionType0.isEnumType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(errorFunctionType0);
      
      boolean boolean1 = errorFunctionType0.hasImplementedInterfaces();
      assertEquals(false, errorFunctionType0.isTemplateType());
      assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      assertEquals(3, errorFunctionType0.getMaxArguments());
      assertEquals(false, errorFunctionType0.isNoResolvedType());
      assertEquals(false, errorFunctionType0.isNullType());
      assertEquals(false, errorFunctionType0.isParameterizedType());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertEquals(false, errorFunctionType0.isEnumElementType());
      assertEquals(false, errorFunctionType0.isInterface());
      assertEquals(false, errorFunctionType0.isStringValueType());
      assertEquals(true, errorFunctionType0.hasCachedValues());
      assertEquals(false, errorFunctionType0.isNoObjectType());
      assertEquals(false, errorFunctionType0.isCheckedUnknownType());
      assertEquals(false, errorFunctionType0.isAllType());
      assertEquals(true, errorFunctionType0.isNominalConstructor());
      assertEquals(false, errorFunctionType0.isNominalType());
      assertEquals(false, errorFunctionType0.isNumberValueType());
      assertEquals(false, errorFunctionType0.isVoidType());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, errorFunctionType0.isReturnTypeInferred());
      assertEquals(false, errorFunctionType0.isUnionType());
      assertEquals(false, errorFunctionType0.isNoType());
      assertEquals(false, errorFunctionType0.isResolved());
      assertEquals(true, errorFunctionType0.isConstructor());
      assertEquals(true, errorFunctionType0.isFunctionType());
      assertEquals(true, errorFunctionType0.canBeCalled());
      assertEquals(false, errorFunctionType0.isBooleanValueType());
      assertEquals(false, errorFunctionType0.isRecordType());
      assertEquals(true, errorFunctionType0.hasInstanceType());
      assertEquals(false, errorFunctionType0.isFunctionPrototypeType());
      assertEquals(false, errorFunctionType0.isEnumType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(boolean1);
      assertTrue(boolean0 == boolean1);
      assertTrue(boolean1 == boolean0);
  }

  @Test
  public void test54()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      String string0 = "prototype";
      boolean boolean0 = true;
      UnknownType unknownType0 = new UnknownType(jSTypeRegistry0, boolean0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, unknownType0.isInterface());
      assertEquals(false, unknownType0.isParameterizedType());
      assertEquals(false, unknownType0.isNominalType());
      assertEquals(false, unknownType0.isResolved());
      assertEquals("??", unknownType0.getReferenceName());
      assertEquals(true, unknownType0.isCheckedUnknownType());
      assertEquals("Unknown", unknownType0.getDisplayName());
      assertEquals(2147483647, unknownType0.getPropertiesCount());
      assertEquals(false, unknownType0.isNoResolvedType());
      assertEquals(false, unknownType0.isEnumType());
      assertEquals(false, unknownType0.isTemplateType());
      assertEquals(false, unknownType0.isConstructor());
      assertEquals(true, unknownType0.isUnknownType());
      assertEquals(true, unknownType0.matchesNumberContext());
      assertEquals(false, unknownType0.isNominalConstructor());
      assertEquals(false, unknownType0.isNativeObjectType());
      assertEquals(false, unknownType0.isFunctionType());
      assertEquals(false, unknownType0.isFunctionPrototypeType());
      assertEquals(false, unknownType0.isBooleanValueType());
      assertEquals(false, unknownType0.isNoObjectType());
      assertEquals(false, unknownType0.isOrdinaryFunction());
      assertEquals(false, unknownType0.isAllType());
      assertEquals(false, unknownType0.isNumberValueType());
      assertEquals(true, unknownType0.matchesStringContext());
      assertEquals(false, unknownType0.isRecordType());
      assertEquals(false, unknownType0.isVoidType());
      assertEquals(true, unknownType0.hasDisplayName());
      assertEquals(false, unknownType0.isStringValueType());
      assertEquals(false, unknownType0.isNullType());
      assertEquals(false, unknownType0.hasReferenceName());
      assertEquals(true, unknownType0.isNullable());
      assertEquals(false, unknownType0.isEnumElementType());
      assertEquals(true, unknownType0.matchesObjectContext());
      assertEquals(false, unknownType0.isUnionType());
      assertEquals(BooleanLiteralSet.BOTH, unknownType0.getPossibleToBooleanOutcomes());
      assertEquals(false, unknownType0.isNoType());
      assertEquals(false, unknownType0.hasCachedValues());
      assertEquals(true, unknownType0.canBeCalled());
      assertNotNull(unknownType0);
      
      Node node0 = unknownType0.getRootNode();
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, unknownType0.isInterface());
      assertEquals(false, unknownType0.isParameterizedType());
      assertEquals(false, unknownType0.isNominalType());
      assertEquals(false, unknownType0.isResolved());
      assertEquals("??", unknownType0.getReferenceName());
      assertEquals(true, unknownType0.isCheckedUnknownType());
      assertEquals("Unknown", unknownType0.getDisplayName());
      assertEquals(2147483647, unknownType0.getPropertiesCount());
      assertEquals(false, unknownType0.isNoResolvedType());
      assertEquals(false, unknownType0.isEnumType());
      assertEquals(false, unknownType0.isTemplateType());
      assertEquals(false, unknownType0.isConstructor());
      assertEquals(true, unknownType0.isUnknownType());
      assertEquals(true, unknownType0.matchesNumberContext());
      assertEquals(false, unknownType0.isNominalConstructor());
      assertEquals(false, unknownType0.isNativeObjectType());
      assertEquals(false, unknownType0.isFunctionType());
      assertEquals(false, unknownType0.isFunctionPrototypeType());
      assertEquals(false, unknownType0.isBooleanValueType());
      assertEquals(false, unknownType0.isNoObjectType());
      assertEquals(false, unknownType0.isOrdinaryFunction());
      assertEquals(false, unknownType0.isAllType());
      assertEquals(false, unknownType0.isNumberValueType());
      assertEquals(true, unknownType0.matchesStringContext());
      assertEquals(false, unknownType0.isRecordType());
      assertEquals(false, unknownType0.isVoidType());
      assertEquals(true, unknownType0.hasDisplayName());
      assertEquals(false, unknownType0.isStringValueType());
      assertEquals(false, unknownType0.isNullType());
      assertEquals(false, unknownType0.hasReferenceName());
      assertEquals(true, unknownType0.isNullable());
      assertEquals(false, unknownType0.isEnumElementType());
      assertEquals(true, unknownType0.matchesObjectContext());
      assertEquals(false, unknownType0.isUnionType());
      assertEquals(BooleanLiteralSet.BOTH, unknownType0.getPossibleToBooleanOutcomes());
      assertEquals(false, unknownType0.isNoType());
      assertEquals(false, unknownType0.hasCachedValues());
      assertEquals(true, unknownType0.canBeCalled());
      assertNull(node0);
      
      FunctionType functionType0 = FunctionType.forInterface(jSTypeRegistry0, string0, node0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, unknownType0.isInterface());
      assertEquals(false, unknownType0.isParameterizedType());
      assertEquals(false, unknownType0.isNominalType());
      assertEquals(false, unknownType0.isResolved());
      assertEquals("??", unknownType0.getReferenceName());
      assertEquals(true, unknownType0.isCheckedUnknownType());
      assertEquals("Unknown", unknownType0.getDisplayName());
      assertEquals(2147483647, unknownType0.getPropertiesCount());
      assertEquals(false, unknownType0.isNoResolvedType());
      assertEquals(false, unknownType0.isEnumType());
      assertEquals(false, unknownType0.isTemplateType());
      assertEquals(false, unknownType0.isConstructor());
      assertEquals(true, unknownType0.isUnknownType());
      assertEquals(true, unknownType0.matchesNumberContext());
      assertEquals(false, unknownType0.isNominalConstructor());
      assertEquals(false, unknownType0.isNativeObjectType());
      assertEquals(false, unknownType0.isFunctionType());
      assertEquals(false, unknownType0.isFunctionPrototypeType());
      assertEquals(false, unknownType0.isBooleanValueType());
      assertEquals(false, unknownType0.isNoObjectType());
      assertEquals(false, unknownType0.isOrdinaryFunction());
      assertEquals(false, unknownType0.isAllType());
      assertEquals(false, unknownType0.isNumberValueType());
      assertEquals(true, unknownType0.matchesStringContext());
      assertEquals(false, unknownType0.isRecordType());
      assertEquals(false, unknownType0.isVoidType());
      assertEquals(true, unknownType0.hasDisplayName());
      assertEquals(false, unknownType0.isStringValueType());
      assertEquals(false, unknownType0.isNullType());
      assertEquals(false, unknownType0.hasReferenceName());
      assertEquals(true, unknownType0.isNullable());
      assertEquals(false, unknownType0.isEnumElementType());
      assertEquals(true, unknownType0.matchesObjectContext());
      assertEquals(false, unknownType0.isUnionType());
      assertEquals(BooleanLiteralSet.BOTH, unknownType0.getPossibleToBooleanOutcomes());
      assertEquals(false, unknownType0.isNoType());
      assertEquals(false, unknownType0.hasCachedValues());
      assertEquals(true, unknownType0.canBeCalled());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, functionType0.isTemplateType());
      assertEquals(false, functionType0.isNoResolvedType());
      assertEquals(false, functionType0.hasCachedValues());
      assertEquals(true, functionType0.canBeCalled());
      assertEquals(false, functionType0.isResolved());
      assertEquals(true, functionType0.isFunctionType());
      assertEquals(false, functionType0.isConstructor());
      assertEquals(false, functionType0.isStringValueType());
      assertEquals(0, functionType0.getMaxArguments());
      assertEquals(false, functionType0.isReturnTypeInferred());
      assertEquals(false, functionType0.isNumberValueType());
      assertEquals(true, functionType0.isInterface());
      assertEquals(false, functionType0.isRecordType());
      assertEquals(false, functionType0.isEnumElementType());
      assertEquals(false, functionType0.isAllType());
      assertEquals(false, functionType0.isEnumType());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertEquals(false, functionType0.isNoObjectType());
      assertEquals(true, functionType0.hasInstanceType());
      assertEquals(false, functionType0.isCheckedUnknownType());
      assertEquals(false, functionType0.isUnionType());
      assertEquals(false, functionType0.isParameterizedType());
      assertEquals(false, functionType0.isBooleanValueType());
      assertEquals(false, functionType0.isVoidType());
      assertEquals(false, functionType0.isNullType());
      assertEquals(false, functionType0.isNominalConstructor());
      assertEquals(false, functionType0.isNoType());
      assertEquals(false, functionType0.isNominalType());
      assertEquals(false, functionType0.isOrdinaryFunction());
      assertEquals(false, functionType0.isFunctionPrototypeType());
      assertNotNull(functionType0);
      
      boolean boolean1 = functionType0.hasImplementedInterfaces();
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, unknownType0.isInterface());
      assertEquals(false, unknownType0.isParameterizedType());
      assertEquals(false, unknownType0.isNominalType());
      assertEquals(false, unknownType0.isResolved());
      assertEquals("??", unknownType0.getReferenceName());
      assertEquals(true, unknownType0.isCheckedUnknownType());
      assertEquals("Unknown", unknownType0.getDisplayName());
      assertEquals(2147483647, unknownType0.getPropertiesCount());
      assertEquals(false, unknownType0.isNoResolvedType());
      assertEquals(false, unknownType0.isEnumType());
      assertEquals(false, unknownType0.isTemplateType());
      assertEquals(false, unknownType0.isConstructor());
      assertEquals(true, unknownType0.isUnknownType());
      assertEquals(true, unknownType0.matchesNumberContext());
      assertEquals(false, unknownType0.isNominalConstructor());
      assertEquals(false, unknownType0.isNativeObjectType());
      assertEquals(false, unknownType0.isFunctionType());
      assertEquals(false, unknownType0.isFunctionPrototypeType());
      assertEquals(false, unknownType0.isBooleanValueType());
      assertEquals(false, unknownType0.isNoObjectType());
      assertEquals(false, unknownType0.isOrdinaryFunction());
      assertEquals(false, unknownType0.isAllType());
      assertEquals(false, unknownType0.isNumberValueType());
      assertEquals(true, unknownType0.matchesStringContext());
      assertEquals(false, unknownType0.isRecordType());
      assertEquals(false, unknownType0.isVoidType());
      assertEquals(true, unknownType0.hasDisplayName());
      assertEquals(false, unknownType0.isStringValueType());
      assertEquals(false, unknownType0.isNullType());
      assertEquals(false, unknownType0.hasReferenceName());
      assertEquals(true, unknownType0.isNullable());
      assertEquals(false, unknownType0.isEnumElementType());
      assertEquals(true, unknownType0.matchesObjectContext());
      assertEquals(false, unknownType0.isUnionType());
      assertEquals(BooleanLiteralSet.BOTH, unknownType0.getPossibleToBooleanOutcomes());
      assertEquals(false, unknownType0.isNoType());
      assertEquals(false, unknownType0.hasCachedValues());
      assertEquals(true, unknownType0.canBeCalled());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, functionType0.isTemplateType());
      assertEquals(false, functionType0.isNoResolvedType());
      assertEquals(false, functionType0.hasCachedValues());
      assertEquals(true, functionType0.canBeCalled());
      assertEquals(false, functionType0.isResolved());
      assertEquals(true, functionType0.isFunctionType());
      assertEquals(false, functionType0.isConstructor());
      assertEquals(false, functionType0.isStringValueType());
      assertEquals(0, functionType0.getMaxArguments());
      assertEquals(false, functionType0.isReturnTypeInferred());
      assertEquals(false, functionType0.isNumberValueType());
      assertEquals(true, functionType0.isInterface());
      assertEquals(false, functionType0.isRecordType());
      assertEquals(false, functionType0.isEnumElementType());
      assertEquals(false, functionType0.isAllType());
      assertEquals(false, functionType0.isEnumType());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertEquals(false, functionType0.isNoObjectType());
      assertEquals(true, functionType0.hasInstanceType());
      assertEquals(false, functionType0.isCheckedUnknownType());
      assertEquals(false, functionType0.isUnionType());
      assertEquals(false, functionType0.isParameterizedType());
      assertEquals(false, functionType0.isBooleanValueType());
      assertEquals(false, functionType0.isVoidType());
      assertEquals(false, functionType0.isNullType());
      assertEquals(false, functionType0.isNominalConstructor());
      assertEquals(false, functionType0.isNoType());
      assertEquals(false, functionType0.isNominalType());
      assertEquals(false, functionType0.isOrdinaryFunction());
      assertEquals(false, functionType0.isFunctionPrototypeType());
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean0 == boolean1);
  }

  @Test
  public void test55()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      StringType stringType0 = new StringType(jSTypeRegistry0);
      assertEquals(false, stringType0.isVoidType());
      assertEquals(false, stringType0.isNominalType());
      assertEquals(true, stringType0.matchesObjectContext());
      assertEquals(false, stringType0.isFunctionType());
      assertEquals(false, stringType0.isEnumType());
      assertEquals(false, stringType0.isNominalConstructor());
      assertEquals(true, stringType0.matchesNumberContext());
      assertEquals(false, stringType0.isBooleanValueType());
      assertEquals(false, stringType0.isNumberValueType());
      assertEquals(false, stringType0.isNullType());
      assertEquals(false, stringType0.isFunctionPrototypeType());
      assertEquals(false, stringType0.isInterface());
      assertEquals(false, stringType0.isNoType());
      assertEquals(false, stringType0.isOrdinaryFunction());
      assertEquals(false, stringType0.isCheckedUnknownType());
      assertEquals("string", stringType0.getDisplayName());
      assertEquals(false, stringType0.isUnionType());
      assertEquals(false, stringType0.isResolved());
      assertEquals(false, stringType0.isNoResolvedType());
      assertEquals(false, stringType0.isAllType());
      assertEquals(false, stringType0.isTemplateType());
      assertEquals(BooleanLiteralSet.BOTH, stringType0.getPossibleToBooleanOutcomes());
      assertEquals(true, stringType0.matchesStringContext());
      assertEquals(false, stringType0.isNoObjectType());
      assertEquals(false, stringType0.isConstructor());
      assertEquals(false, stringType0.isRecordType());
      assertEquals(true, stringType0.isStringValueType());
      assertEquals(false, stringType0.isEnumElementType());
      assertEquals(false, stringType0.isParameterizedType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(stringType0);
      
      Stack<JSType> stack0 = new Stack<JSType>();
      assertEquals(true, stack0.isEmpty());
      assertEquals(true, stack0.empty());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertNotNull(stack0);
      
      FunctionType functionType0 = jSTypeRegistry0.createFunctionTypeWithVarArgs((JSType) stringType0, (List<JSType>) stack0);
      assertEquals(true, functionType0.isOrdinaryFunction());
      assertEquals(true, functionType0.isFunctionType());
      assertEquals(false, functionType0.isNoObjectType());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, functionType0.isEnumElementType());
      assertEquals(false, functionType0.isNominalType());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertEquals(false, functionType0.isBooleanValueType());
      assertEquals(false, functionType0.isInterface());
      assertEquals(false, functionType0.isReturnTypeInferred());
      assertEquals(0, functionType0.getMaxArguments());
      assertEquals(false, functionType0.isCheckedUnknownType());
      assertEquals(false, functionType0.isConstructor());
      assertEquals(false, functionType0.isNoResolvedType());
      assertEquals(false, functionType0.isEnumType());
      assertEquals(false, functionType0.isVoidType());
      assertEquals(false, functionType0.isResolved());
      assertEquals(false, functionType0.hasCachedValues());
      assertEquals(false, functionType0.isTemplateType());
      assertEquals(false, functionType0.isRecordType());
      assertEquals(false, functionType0.isNoType());
      assertEquals(false, functionType0.isNullType());
      assertEquals(false, functionType0.isStringValueType());
      assertEquals(false, functionType0.isNumberValueType());
      assertEquals(false, functionType0.isUnionType());
      assertEquals(false, functionType0.isAllType());
      assertEquals(false, functionType0.isParameterizedType());
      assertEquals(true, functionType0.canBeCalled());
      assertEquals(false, functionType0.isFunctionPrototypeType());
      assertEquals(false, functionType0.hasInstanceType());
      assertEquals(false, functionType0.isNominalConstructor());
      assertEquals(true, stack0.isEmpty());
      assertEquals(true, stack0.empty());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertEquals(false, stringType0.isVoidType());
      assertEquals(false, stringType0.isNominalType());
      assertEquals(true, stringType0.matchesObjectContext());
      assertEquals(false, stringType0.isFunctionType());
      assertEquals(false, stringType0.isEnumType());
      assertEquals(false, stringType0.isNominalConstructor());
      assertEquals(true, stringType0.matchesNumberContext());
      assertEquals(false, stringType0.isBooleanValueType());
      assertEquals(false, stringType0.isNumberValueType());
      assertEquals(false, stringType0.isNullType());
      assertEquals(false, stringType0.isFunctionPrototypeType());
      assertEquals(false, stringType0.isInterface());
      assertEquals(false, stringType0.isNoType());
      assertEquals(false, stringType0.isOrdinaryFunction());
      assertEquals(false, stringType0.isCheckedUnknownType());
      assertEquals("string", stringType0.getDisplayName());
      assertEquals(false, stringType0.isUnionType());
      assertEquals(false, stringType0.isResolved());
      assertEquals(false, stringType0.isNoResolvedType());
      assertEquals(false, stringType0.isAllType());
      assertEquals(false, stringType0.isTemplateType());
      assertEquals(BooleanLiteralSet.BOTH, stringType0.getPossibleToBooleanOutcomes());
      assertEquals(true, stringType0.matchesStringContext());
      assertEquals(false, stringType0.isNoObjectType());
      assertEquals(false, stringType0.isConstructor());
      assertEquals(false, stringType0.isRecordType());
      assertEquals(true, stringType0.isStringValueType());
      assertEquals(false, stringType0.isEnumElementType());
      assertEquals(false, stringType0.isParameterizedType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(functionType0);
      
      boolean boolean0 = functionType0.makesDicts();
      assertEquals(true, functionType0.isOrdinaryFunction());
      assertEquals(true, functionType0.isFunctionType());
      assertEquals(false, functionType0.isNoObjectType());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, functionType0.isEnumElementType());
      assertEquals(false, functionType0.isNominalType());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertEquals(false, functionType0.isBooleanValueType());
      assertEquals(false, functionType0.isInterface());
      assertEquals(false, functionType0.isReturnTypeInferred());
      assertEquals(0, functionType0.getMaxArguments());
      assertEquals(false, functionType0.isCheckedUnknownType());
      assertEquals(false, functionType0.isConstructor());
      assertEquals(false, functionType0.isNoResolvedType());
      assertEquals(false, functionType0.isEnumType());
      assertEquals(false, functionType0.isVoidType());
      assertEquals(false, functionType0.isResolved());
      assertEquals(false, functionType0.hasCachedValues());
      assertEquals(false, functionType0.isTemplateType());
      assertEquals(false, functionType0.isRecordType());
      assertEquals(false, functionType0.isNoType());
      assertEquals(false, functionType0.isNullType());
      assertEquals(false, functionType0.isStringValueType());
      assertEquals(false, functionType0.isNumberValueType());
      assertEquals(false, functionType0.isUnionType());
      assertEquals(false, functionType0.isAllType());
      assertEquals(false, functionType0.isParameterizedType());
      assertEquals(true, functionType0.canBeCalled());
      assertEquals(false, functionType0.isFunctionPrototypeType());
      assertEquals(false, functionType0.hasInstanceType());
      assertEquals(false, functionType0.isNominalConstructor());
      assertEquals(true, stack0.isEmpty());
      assertEquals(true, stack0.empty());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertEquals(false, stringType0.isVoidType());
      assertEquals(false, stringType0.isNominalType());
      assertEquals(true, stringType0.matchesObjectContext());
      assertEquals(false, stringType0.isFunctionType());
      assertEquals(false, stringType0.isEnumType());
      assertEquals(false, stringType0.isNominalConstructor());
      assertEquals(true, stringType0.matchesNumberContext());
      assertEquals(false, stringType0.isBooleanValueType());
      assertEquals(false, stringType0.isNumberValueType());
      assertEquals(false, stringType0.isNullType());
      assertEquals(false, stringType0.isFunctionPrototypeType());
      assertEquals(false, stringType0.isInterface());
      assertEquals(false, stringType0.isNoType());
      assertEquals(false, stringType0.isOrdinaryFunction());
      assertEquals(false, stringType0.isCheckedUnknownType());
      assertEquals("string", stringType0.getDisplayName());
      assertEquals(false, stringType0.isUnionType());
      assertEquals(false, stringType0.isResolved());
      assertEquals(false, stringType0.isNoResolvedType());
      assertEquals(false, stringType0.isAllType());
      assertEquals(false, stringType0.isTemplateType());
      assertEquals(BooleanLiteralSet.BOTH, stringType0.getPossibleToBooleanOutcomes());
      assertEquals(true, stringType0.matchesStringContext());
      assertEquals(false, stringType0.isNoObjectType());
      assertEquals(false, stringType0.isConstructor());
      assertEquals(false, stringType0.isRecordType());
      assertEquals(true, stringType0.isStringValueType());
      assertEquals(false, stringType0.isEnumElementType());
      assertEquals(false, stringType0.isParameterizedType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(boolean0);
  }

  @Test
  public void test56()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      boolean boolean0 = false;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0, boolean0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      String string0 = ":yLTc+cK.&yC";
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, string0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertEquals(false, errorFunctionType0.isFunctionPrototypeType());
      assertEquals(true, errorFunctionType0.isNominalConstructor());
      assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      assertEquals(true, errorFunctionType0.isFunctionType());
      assertEquals(false, errorFunctionType0.isReturnTypeInferred());
      assertEquals(false, errorFunctionType0.isRecordType());
      assertEquals(true, errorFunctionType0.hasInstanceType());
      assertEquals(false, errorFunctionType0.isVoidType());
      assertEquals(3, errorFunctionType0.getMaxArguments());
      assertEquals(false, errorFunctionType0.isParameterizedType());
      assertEquals(true, errorFunctionType0.canBeCalled());
      assertEquals(false, errorFunctionType0.isNoResolvedType());
      assertEquals(true, errorFunctionType0.isConstructor());
      assertEquals(false, errorFunctionType0.isCheckedUnknownType());
      assertEquals(false, errorFunctionType0.isNumberValueType());
      assertEquals(false, errorFunctionType0.isUnionType());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, errorFunctionType0.isInterface());
      assertEquals(false, errorFunctionType0.hasCachedValues());
      assertEquals(false, errorFunctionType0.isEnumElementType());
      assertEquals(false, errorFunctionType0.isTemplateType());
      assertEquals(false, errorFunctionType0.isNominalType());
      assertEquals(false, errorFunctionType0.isStringValueType());
      assertEquals(false, errorFunctionType0.isBooleanValueType());
      assertEquals(false, errorFunctionType0.isNullType());
      assertEquals(false, errorFunctionType0.isAllType());
      assertEquals(false, errorFunctionType0.isNoObjectType());
      assertEquals(false, errorFunctionType0.isResolved());
      assertEquals(false, errorFunctionType0.isNoType());
      assertEquals(false, errorFunctionType0.isEnumType());
      assertNotNull(errorFunctionType0);
      
      boolean boolean1 = errorFunctionType0.isDict();
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertEquals(false, errorFunctionType0.isFunctionPrototypeType());
      assertEquals(true, errorFunctionType0.isNominalConstructor());
      assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      assertEquals(true, errorFunctionType0.isFunctionType());
      assertEquals(false, errorFunctionType0.isReturnTypeInferred());
      assertEquals(false, errorFunctionType0.isRecordType());
      assertEquals(true, errorFunctionType0.hasInstanceType());
      assertEquals(false, errorFunctionType0.isVoidType());
      assertEquals(3, errorFunctionType0.getMaxArguments());
      assertEquals(false, errorFunctionType0.isParameterizedType());
      assertEquals(true, errorFunctionType0.canBeCalled());
      assertEquals(false, errorFunctionType0.isNoResolvedType());
      assertEquals(true, errorFunctionType0.isConstructor());
      assertEquals(false, errorFunctionType0.isCheckedUnknownType());
      assertEquals(false, errorFunctionType0.isNumberValueType());
      assertEquals(false, errorFunctionType0.isUnionType());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, errorFunctionType0.isInterface());
      assertEquals(false, errorFunctionType0.hasCachedValues());
      assertEquals(false, errorFunctionType0.isEnumElementType());
      assertEquals(false, errorFunctionType0.isTemplateType());
      assertEquals(false, errorFunctionType0.isNominalType());
      assertEquals(false, errorFunctionType0.isStringValueType());
      assertEquals(false, errorFunctionType0.isBooleanValueType());
      assertEquals(false, errorFunctionType0.isNullType());
      assertEquals(false, errorFunctionType0.isAllType());
      assertEquals(false, errorFunctionType0.isNoObjectType());
      assertEquals(false, errorFunctionType0.isResolved());
      assertEquals(false, errorFunctionType0.isNoType());
      assertEquals(false, errorFunctionType0.isEnumType());
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean0 == boolean1);
  }

  @Test
  public void test57()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      boolean boolean0 = false;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0, boolean0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(true, noResolvedType0.isNullable());
      assertNull(noResolvedType0.getReferenceName());
      assertEquals(false, noResolvedType0.isReturnTypeInferred());
      assertEquals(false, noResolvedType0.isUnionType());
      assertEquals(true, noResolvedType0.isConstructor());
      assertEquals(2147483647, noResolvedType0.getPropertiesCount());
      assertEquals(true, noResolvedType0.matchesStringContext());
      assertEquals(false, noResolvedType0.isNominalType());
      assertEquals(false, noResolvedType0.isFunctionPrototypeType());
      assertEquals(true, noResolvedType0.canBeCalled());
      assertEquals(true, noResolvedType0.matchesObjectContext());
      assertEquals(false, noResolvedType0.isEnumElementType());
      assertEquals(true, noResolvedType0.hasInstanceType());
      assertEquals(2147483647, noResolvedType0.getMaxArguments());
      assertEquals(false, noResolvedType0.isRecordType());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noResolvedType0.isInterface());
      assertEquals(false, noResolvedType0.isEnumType());
      assertEquals(false, noResolvedType0.isBooleanValueType());
      assertEquals(false, noResolvedType0.hasCachedValues());
      assertEquals(false, noResolvedType0.isTemplateType());
      assertEquals(false, noResolvedType0.isFunctionType());
      assertEquals(false, noResolvedType0.isNumberValueType());
      assertEquals(false, noResolvedType0.isAllType());
      assertEquals(false, noResolvedType0.isParameterizedType());
      assertEquals(false, noResolvedType0.isStringValueType());
      assertEquals(false, noResolvedType0.isOrdinaryFunction());
      assertEquals(false, noResolvedType0.isNullType());
      assertEquals(false, noResolvedType0.isVoidType());
      assertEquals(false, noResolvedType0.isNoObjectType());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertEquals(false, noResolvedType0.isCheckedUnknownType());
      assertEquals(false, noResolvedType0.isNominalConstructor());
      assertEquals(true, noResolvedType0.matchesNumberContext());
      assertEquals(false, noResolvedType0.isResolved());
      assertNotNull(noResolvedType0);
      
      String string0 = noResolvedType0.toAnnotationString();
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(true, noResolvedType0.isNullable());
      assertNull(noResolvedType0.getReferenceName());
      assertEquals(false, noResolvedType0.isReturnTypeInferred());
      assertEquals(false, noResolvedType0.isUnionType());
      assertEquals(true, noResolvedType0.isConstructor());
      assertEquals(2147483647, noResolvedType0.getPropertiesCount());
      assertEquals(true, noResolvedType0.matchesStringContext());
      assertEquals(false, noResolvedType0.isNominalType());
      assertEquals(false, noResolvedType0.isFunctionPrototypeType());
      assertEquals(true, noResolvedType0.canBeCalled());
      assertEquals(true, noResolvedType0.matchesObjectContext());
      assertEquals(false, noResolvedType0.isEnumElementType());
      assertEquals(true, noResolvedType0.hasInstanceType());
      assertEquals(2147483647, noResolvedType0.getMaxArguments());
      assertEquals(false, noResolvedType0.isRecordType());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noResolvedType0.isInterface());
      assertEquals(false, noResolvedType0.isEnumType());
      assertEquals(false, noResolvedType0.isBooleanValueType());
      assertEquals(false, noResolvedType0.hasCachedValues());
      assertEquals(false, noResolvedType0.isTemplateType());
      assertEquals(false, noResolvedType0.isFunctionType());
      assertEquals(false, noResolvedType0.isNumberValueType());
      assertEquals(false, noResolvedType0.isAllType());
      assertEquals(false, noResolvedType0.isParameterizedType());
      assertEquals(false, noResolvedType0.isStringValueType());
      assertEquals(false, noResolvedType0.isOrdinaryFunction());
      assertEquals(false, noResolvedType0.isNullType());
      assertEquals(false, noResolvedType0.isVoidType());
      assertEquals(false, noResolvedType0.isNoObjectType());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertEquals(false, noResolvedType0.isCheckedUnknownType());
      assertEquals(false, noResolvedType0.isNominalConstructor());
      assertEquals(true, noResolvedType0.matchesNumberContext());
      assertEquals(false, noResolvedType0.isResolved());
      assertNotNull(string0);
      assertEquals("?", string0);
      
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, string0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, errorFunctionType0.isCheckedUnknownType());
      assertEquals(false, errorFunctionType0.isNoType());
      assertEquals(3, errorFunctionType0.getMaxArguments());
      assertEquals(false, errorFunctionType0.isStringValueType());
      assertEquals(false, errorFunctionType0.isTemplateType());
      assertEquals(true, errorFunctionType0.isConstructor());
      assertEquals(false, errorFunctionType0.isReturnTypeInferred());
      assertEquals(false, errorFunctionType0.isNullType());
      assertEquals(false, errorFunctionType0.isParameterizedType());
      assertEquals(false, errorFunctionType0.isNoResolvedType());
      assertEquals(false, errorFunctionType0.isEnumElementType());
      assertEquals(false, errorFunctionType0.isNumberValueType());
      assertEquals(false, errorFunctionType0.isUnionType());
      assertEquals(true, errorFunctionType0.isFunctionType());
      assertEquals(false, errorFunctionType0.isInterface());
      assertEquals(false, errorFunctionType0.isResolved());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertEquals(false, errorFunctionType0.isRecordType());
      assertEquals(true, errorFunctionType0.isNominalConstructor());
      assertEquals(false, errorFunctionType0.isBooleanValueType());
      assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      assertEquals(true, errorFunctionType0.canBeCalled());
      assertEquals(false, errorFunctionType0.isNoObjectType());
      assertEquals(false, errorFunctionType0.isVoidType());
      assertEquals(false, errorFunctionType0.isFunctionPrototypeType());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, errorFunctionType0.isEnumType());
      assertEquals(false, errorFunctionType0.hasCachedValues());
      assertEquals(true, errorFunctionType0.hasInstanceType());
      assertEquals(false, errorFunctionType0.isNominalType());
      assertEquals(false, errorFunctionType0.isAllType());
      assertEquals(true, noResolvedType0.isNullable());
      assertNull(noResolvedType0.getReferenceName());
      assertEquals(false, noResolvedType0.isReturnTypeInferred());
      assertEquals(false, noResolvedType0.isUnionType());
      assertEquals(true, noResolvedType0.isConstructor());
      assertEquals(2147483647, noResolvedType0.getPropertiesCount());
      assertEquals(true, noResolvedType0.matchesStringContext());
      assertEquals(false, noResolvedType0.isNominalType());
      assertEquals(false, noResolvedType0.isFunctionPrototypeType());
      assertEquals(true, noResolvedType0.canBeCalled());
      assertEquals(true, noResolvedType0.matchesObjectContext());
      assertEquals(false, noResolvedType0.isEnumElementType());
      assertEquals(true, noResolvedType0.hasInstanceType());
      assertEquals(2147483647, noResolvedType0.getMaxArguments());
      assertEquals(false, noResolvedType0.isRecordType());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noResolvedType0.isInterface());
      assertEquals(false, noResolvedType0.isEnumType());
      assertEquals(false, noResolvedType0.isBooleanValueType());
      assertEquals(false, noResolvedType0.hasCachedValues());
      assertEquals(false, noResolvedType0.isTemplateType());
      assertEquals(false, noResolvedType0.isFunctionType());
      assertEquals(false, noResolvedType0.isNumberValueType());
      assertEquals(false, noResolvedType0.isAllType());
      assertEquals(false, noResolvedType0.isParameterizedType());
      assertEquals(false, noResolvedType0.isStringValueType());
      assertEquals(false, noResolvedType0.isOrdinaryFunction());
      assertEquals(false, noResolvedType0.isNullType());
      assertEquals(false, noResolvedType0.isVoidType());
      assertEquals(false, noResolvedType0.isNoObjectType());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertEquals(false, noResolvedType0.isCheckedUnknownType());
      assertEquals(false, noResolvedType0.isNominalConstructor());
      assertEquals(true, noResolvedType0.matchesNumberContext());
      assertEquals(false, noResolvedType0.isResolved());
      assertNotNull(errorFunctionType0);
      
      int int0 = 0;
      FunctionType functionType0 = errorFunctionType0.getBindReturnType(int0);
      assertEquals(false, functionType0.isBooleanValueType());
      assertEquals(false, functionType0.isNoType());
      assertEquals(false, functionType0.isEnumElementType());
      assertEquals(true, functionType0.isFunctionType());
      assertEquals(false, functionType0.isNoResolvedType());
      assertEquals(false, functionType0.isConstructor());
      assertEquals(true, functionType0.canBeCalled());
      assertEquals(false, functionType0.isResolved());
      assertEquals(3, functionType0.getMaxArguments());
      assertEquals(false, functionType0.isParameterizedType());
      assertEquals(false, functionType0.hasCachedValues());
      assertEquals(false, functionType0.isInterface());
      assertEquals(false, functionType0.isEnumType());
      assertEquals(false, functionType0.isNominalType());
      assertEquals(false, functionType0.isNoObjectType());
      assertEquals(false, functionType0.isVoidType());
      assertEquals(false, functionType0.isNominalConstructor());
      assertEquals(false, functionType0.isNullType());
      assertEquals(false, functionType0.isTemplateType());
      assertEquals(true, functionType0.isOrdinaryFunction());
      assertEquals(false, functionType0.isCheckedUnknownType());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, functionType0.isFunctionPrototypeType());
      assertEquals(false, functionType0.hasInstanceType());
      assertEquals(false, functionType0.isUnionType());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertEquals(false, functionType0.isRecordType());
      assertEquals(false, functionType0.isAllType());
      assertEquals(false, functionType0.isReturnTypeInferred());
      assertEquals(false, functionType0.isNumberValueType());
      assertEquals(false, functionType0.isStringValueType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, errorFunctionType0.isCheckedUnknownType());
      assertEquals(false, errorFunctionType0.isNoType());
      assertEquals(3, errorFunctionType0.getMaxArguments());
      assertEquals(false, errorFunctionType0.isStringValueType());
      assertEquals(false, errorFunctionType0.isTemplateType());
      assertEquals(true, errorFunctionType0.isConstructor());
      assertEquals(false, errorFunctionType0.isReturnTypeInferred());
      assertEquals(false, errorFunctionType0.isNullType());
      assertEquals(false, errorFunctionType0.isParameterizedType());
      assertEquals(false, errorFunctionType0.isNoResolvedType());
      assertEquals(false, errorFunctionType0.isEnumElementType());
      assertEquals(false, errorFunctionType0.isNumberValueType());
      assertEquals(false, errorFunctionType0.isUnionType());
      assertEquals(true, errorFunctionType0.isFunctionType());
      assertEquals(false, errorFunctionType0.isInterface());
      assertEquals(false, errorFunctionType0.isResolved());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertEquals(false, errorFunctionType0.isRecordType());
      assertEquals(true, errorFunctionType0.isNominalConstructor());
      assertEquals(false, errorFunctionType0.isBooleanValueType());
      assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      assertEquals(true, errorFunctionType0.canBeCalled());
      assertEquals(false, errorFunctionType0.isNoObjectType());
      assertEquals(false, errorFunctionType0.isVoidType());
      assertEquals(false, errorFunctionType0.isFunctionPrototypeType());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, errorFunctionType0.isEnumType());
      assertEquals(false, errorFunctionType0.hasCachedValues());
      assertEquals(true, errorFunctionType0.hasInstanceType());
      assertEquals(false, errorFunctionType0.isNominalType());
      assertEquals(false, errorFunctionType0.isAllType());
      assertEquals(true, noResolvedType0.isNullable());
      assertNull(noResolvedType0.getReferenceName());
      assertEquals(false, noResolvedType0.isReturnTypeInferred());
      assertEquals(false, noResolvedType0.isUnionType());
      assertEquals(true, noResolvedType0.isConstructor());
      assertEquals(2147483647, noResolvedType0.getPropertiesCount());
      assertEquals(true, noResolvedType0.matchesStringContext());
      assertEquals(false, noResolvedType0.isNominalType());
      assertEquals(false, noResolvedType0.isFunctionPrototypeType());
      assertEquals(true, noResolvedType0.canBeCalled());
      assertEquals(true, noResolvedType0.matchesObjectContext());
      assertEquals(false, noResolvedType0.isEnumElementType());
      assertEquals(true, noResolvedType0.hasInstanceType());
      assertEquals(2147483647, noResolvedType0.getMaxArguments());
      assertEquals(false, noResolvedType0.isRecordType());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noResolvedType0.isInterface());
      assertEquals(false, noResolvedType0.isEnumType());
      assertEquals(false, noResolvedType0.isBooleanValueType());
      assertEquals(false, noResolvedType0.hasCachedValues());
      assertEquals(false, noResolvedType0.isTemplateType());
      assertEquals(false, noResolvedType0.isFunctionType());
      assertEquals(false, noResolvedType0.isNumberValueType());
      assertEquals(false, noResolvedType0.isAllType());
      assertEquals(false, noResolvedType0.isParameterizedType());
      assertEquals(false, noResolvedType0.isStringValueType());
      assertEquals(false, noResolvedType0.isOrdinaryFunction());
      assertEquals(false, noResolvedType0.isNullType());
      assertEquals(false, noResolvedType0.isVoidType());
      assertEquals(false, noResolvedType0.isNoObjectType());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertEquals(false, noResolvedType0.isCheckedUnknownType());
      assertEquals(false, noResolvedType0.isNominalConstructor());
      assertEquals(true, noResolvedType0.matchesNumberContext());
      assertEquals(false, noResolvedType0.isResolved());
      assertNotNull(functionType0);
      
      boolean boolean1 = functionType0.makesStructs();
      assertEquals(false, functionType0.isBooleanValueType());
      assertEquals(false, functionType0.isNoType());
      assertEquals(false, functionType0.isEnumElementType());
      assertEquals(true, functionType0.isFunctionType());
      assertEquals(false, functionType0.isNoResolvedType());
      assertEquals(false, functionType0.isConstructor());
      assertEquals(true, functionType0.canBeCalled());
      assertEquals(false, functionType0.isResolved());
      assertEquals(3, functionType0.getMaxArguments());
      assertEquals(false, functionType0.isParameterizedType());
      assertEquals(false, functionType0.hasCachedValues());
      assertEquals(false, functionType0.isInterface());
      assertEquals(false, functionType0.isEnumType());
      assertEquals(false, functionType0.isNominalType());
      assertEquals(false, functionType0.isNoObjectType());
      assertEquals(false, functionType0.isVoidType());
      assertEquals(false, functionType0.isNominalConstructor());
      assertEquals(false, functionType0.isNullType());
      assertEquals(false, functionType0.isTemplateType());
      assertEquals(true, functionType0.isOrdinaryFunction());
      assertEquals(false, functionType0.isCheckedUnknownType());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, functionType0.isFunctionPrototypeType());
      assertEquals(false, functionType0.hasInstanceType());
      assertEquals(false, functionType0.isUnionType());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertEquals(false, functionType0.isRecordType());
      assertEquals(false, functionType0.isAllType());
      assertEquals(false, functionType0.isReturnTypeInferred());
      assertEquals(false, functionType0.isNumberValueType());
      assertEquals(false, functionType0.isStringValueType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, errorFunctionType0.isCheckedUnknownType());
      assertEquals(false, errorFunctionType0.isNoType());
      assertEquals(3, errorFunctionType0.getMaxArguments());
      assertEquals(false, errorFunctionType0.isStringValueType());
      assertEquals(false, errorFunctionType0.isTemplateType());
      assertEquals(true, errorFunctionType0.isConstructor());
      assertEquals(false, errorFunctionType0.isReturnTypeInferred());
      assertEquals(false, errorFunctionType0.isNullType());
      assertEquals(false, errorFunctionType0.isParameterizedType());
      assertEquals(false, errorFunctionType0.isNoResolvedType());
      assertEquals(false, errorFunctionType0.isEnumElementType());
      assertEquals(false, errorFunctionType0.isNumberValueType());
      assertEquals(false, errorFunctionType0.isUnionType());
      assertEquals(true, errorFunctionType0.isFunctionType());
      assertEquals(false, errorFunctionType0.isInterface());
      assertEquals(false, errorFunctionType0.isResolved());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertEquals(false, errorFunctionType0.isRecordType());
      assertEquals(true, errorFunctionType0.isNominalConstructor());
      assertEquals(false, errorFunctionType0.isBooleanValueType());
      assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      assertEquals(true, errorFunctionType0.canBeCalled());
      assertEquals(false, errorFunctionType0.isNoObjectType());
      assertEquals(false, errorFunctionType0.isVoidType());
      assertEquals(false, errorFunctionType0.isFunctionPrototypeType());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, errorFunctionType0.isEnumType());
      assertEquals(false, errorFunctionType0.hasCachedValues());
      assertEquals(true, errorFunctionType0.hasInstanceType());
      assertEquals(false, errorFunctionType0.isNominalType());
      assertEquals(false, errorFunctionType0.isAllType());
      assertEquals(true, noResolvedType0.isNullable());
      assertNull(noResolvedType0.getReferenceName());
      assertEquals(false, noResolvedType0.isReturnTypeInferred());
      assertEquals(false, noResolvedType0.isUnionType());
      assertEquals(true, noResolvedType0.isConstructor());
      assertEquals(2147483647, noResolvedType0.getPropertiesCount());
      assertEquals(true, noResolvedType0.matchesStringContext());
      assertEquals(false, noResolvedType0.isNominalType());
      assertEquals(false, noResolvedType0.isFunctionPrototypeType());
      assertEquals(true, noResolvedType0.canBeCalled());
      assertEquals(true, noResolvedType0.matchesObjectContext());
      assertEquals(false, noResolvedType0.isEnumElementType());
      assertEquals(true, noResolvedType0.hasInstanceType());
      assertEquals(2147483647, noResolvedType0.getMaxArguments());
      assertEquals(false, noResolvedType0.isRecordType());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noResolvedType0.isInterface());
      assertEquals(false, noResolvedType0.isEnumType());
      assertEquals(false, noResolvedType0.isBooleanValueType());
      assertEquals(false, noResolvedType0.hasCachedValues());
      assertEquals(false, noResolvedType0.isTemplateType());
      assertEquals(false, noResolvedType0.isFunctionType());
      assertEquals(false, noResolvedType0.isNumberValueType());
      assertEquals(false, noResolvedType0.isAllType());
      assertEquals(false, noResolvedType0.isParameterizedType());
      assertEquals(false, noResolvedType0.isStringValueType());
      assertEquals(false, noResolvedType0.isOrdinaryFunction());
      assertEquals(false, noResolvedType0.isNullType());
      assertEquals(false, noResolvedType0.isVoidType());
      assertEquals(false, noResolvedType0.isNoObjectType());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertEquals(false, noResolvedType0.isCheckedUnknownType());
      assertEquals(false, noResolvedType0.isNominalConstructor());
      assertEquals(true, noResolvedType0.matchesNumberContext());
      assertEquals(false, noResolvedType0.isResolved());
      assertFalse(boolean1);
      assertTrue(boolean0 == boolean1);
      assertTrue(boolean1 == boolean0);
  }

  @Test
  public void test58()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      StringType stringType0 = new StringType(jSTypeRegistry0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(true, stringType0.matchesNumberContext());
      assertEquals(false, stringType0.isNullType());
      assertEquals("string", stringType0.getDisplayName());
      assertEquals(false, stringType0.isOrdinaryFunction());
      assertEquals(true, stringType0.matchesStringContext());
      assertEquals(false, stringType0.isNominalConstructor());
      assertEquals(false, stringType0.isNoType());
      assertEquals(false, stringType0.isEnumElementType());
      assertEquals(false, stringType0.isBooleanValueType());
      assertEquals(false, stringType0.isFunctionPrototypeType());
      assertEquals(false, stringType0.isConstructor());
      assertEquals(BooleanLiteralSet.BOTH, stringType0.getPossibleToBooleanOutcomes());
      assertEquals(false, stringType0.isAllType());
      assertEquals(false, stringType0.isVoidType());
      assertEquals(false, stringType0.isCheckedUnknownType());
      assertEquals(false, stringType0.isRecordType());
      assertEquals(false, stringType0.isNoObjectType());
      assertEquals(false, stringType0.isFunctionType());
      assertEquals(true, stringType0.matchesObjectContext());
      assertEquals(false, stringType0.isEnumType());
      assertEquals(false, stringType0.isNumberValueType());
      assertEquals(false, stringType0.isTemplateType());
      assertEquals(false, stringType0.isNominalType());
      assertEquals(false, stringType0.isInterface());
      assertEquals(true, stringType0.isStringValueType());
      assertEquals(false, stringType0.isNoResolvedType());
      assertEquals(false, stringType0.isParameterizedType());
      assertEquals(false, stringType0.isUnionType());
      assertEquals(false, stringType0.isResolved());
      assertNotNull(stringType0);
      
      Stack<JSType> stack0 = new Stack<JSType>();
      assertEquals(true, stack0.empty());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertEquals(true, stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertNotNull(stack0);
      
      FunctionType functionType0 = jSTypeRegistry0.createFunctionTypeWithVarArgs((JSType) stringType0, (List<JSType>) stack0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(true, stringType0.matchesNumberContext());
      assertEquals(false, stringType0.isNullType());
      assertEquals("string", stringType0.getDisplayName());
      assertEquals(false, stringType0.isOrdinaryFunction());
      assertEquals(true, stringType0.matchesStringContext());
      assertEquals(false, stringType0.isNominalConstructor());
      assertEquals(false, stringType0.isNoType());
      assertEquals(false, stringType0.isEnumElementType());
      assertEquals(false, stringType0.isBooleanValueType());
      assertEquals(false, stringType0.isFunctionPrototypeType());
      assertEquals(false, stringType0.isConstructor());
      assertEquals(BooleanLiteralSet.BOTH, stringType0.getPossibleToBooleanOutcomes());
      assertEquals(false, stringType0.isAllType());
      assertEquals(false, stringType0.isVoidType());
      assertEquals(false, stringType0.isCheckedUnknownType());
      assertEquals(false, stringType0.isRecordType());
      assertEquals(false, stringType0.isNoObjectType());
      assertEquals(false, stringType0.isFunctionType());
      assertEquals(true, stringType0.matchesObjectContext());
      assertEquals(false, stringType0.isEnumType());
      assertEquals(false, stringType0.isNumberValueType());
      assertEquals(false, stringType0.isTemplateType());
      assertEquals(false, stringType0.isNominalType());
      assertEquals(false, stringType0.isInterface());
      assertEquals(true, stringType0.isStringValueType());
      assertEquals(false, stringType0.isNoResolvedType());
      assertEquals(false, stringType0.isParameterizedType());
      assertEquals(false, stringType0.isUnionType());
      assertEquals(false, stringType0.isResolved());
      assertEquals(false, functionType0.isVoidType());
      assertEquals(false, functionType0.isInterface());
      assertEquals(false, functionType0.isConstructor());
      assertEquals(false, functionType0.isBooleanValueType());
      assertEquals(true, functionType0.isOrdinaryFunction());
      assertEquals(false, functionType0.isNoType());
      assertEquals(false, functionType0.isNumberValueType());
      assertEquals(0, functionType0.getMaxArguments());
      assertEquals(false, functionType0.isNoResolvedType());
      assertEquals(false, functionType0.isNullType());
      assertEquals(false, functionType0.isAllType());
      assertEquals(false, functionType0.isStringValueType());
      assertEquals(true, functionType0.isFunctionType());
      assertEquals(false, functionType0.isNominalType());
      assertEquals(false, functionType0.isNoObjectType());
      assertEquals(false, functionType0.isUnionType());
      assertEquals(false, functionType0.isEnumElementType());
      assertEquals(false, functionType0.isNominalConstructor());
      assertEquals(false, functionType0.isFunctionPrototypeType());
      assertEquals(false, functionType0.isRecordType());
      assertEquals(true, functionType0.canBeCalled());
      assertEquals(false, functionType0.isResolved());
      assertEquals(false, functionType0.isParameterizedType());
      assertEquals(false, functionType0.isCheckedUnknownType());
      assertEquals(false, functionType0.isEnumType());
      assertEquals(false, functionType0.isTemplateType());
      assertEquals(false, functionType0.hasInstanceType());
      assertEquals(false, functionType0.isReturnTypeInferred());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertEquals(false, functionType0.hasCachedValues());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertEquals(true, stack0.empty());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertEquals(true, stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertNotNull(functionType0);
      
      JSType[] jSTypeArray0 = new JSType[1];
      jSTypeArray0[0] = (JSType) functionType0;
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(true, stringType0.matchesNumberContext());
      assertEquals(false, stringType0.isNullType());
      assertEquals("string", stringType0.getDisplayName());
      assertEquals(false, stringType0.isOrdinaryFunction());
      assertEquals(true, stringType0.matchesStringContext());
      assertEquals(false, stringType0.isNominalConstructor());
      assertEquals(false, stringType0.isNoType());
      assertEquals(false, stringType0.isEnumElementType());
      assertEquals(false, stringType0.isBooleanValueType());
      assertEquals(false, stringType0.isFunctionPrototypeType());
      assertEquals(false, stringType0.isConstructor());
      assertEquals(BooleanLiteralSet.BOTH, stringType0.getPossibleToBooleanOutcomes());
      assertEquals(false, stringType0.isAllType());
      assertEquals(false, stringType0.isVoidType());
      assertEquals(false, stringType0.isCheckedUnknownType());
      assertEquals(false, stringType0.isRecordType());
      assertEquals(false, stringType0.isNoObjectType());
      assertEquals(false, stringType0.isFunctionType());
      assertEquals(true, stringType0.matchesObjectContext());
      assertEquals(false, stringType0.isEnumType());
      assertEquals(false, stringType0.isNumberValueType());
      assertEquals(false, stringType0.isTemplateType());
      assertEquals(false, stringType0.isNominalType());
      assertEquals(false, stringType0.isInterface());
      assertEquals(true, stringType0.isStringValueType());
      assertEquals(false, stringType0.isNoResolvedType());
      assertEquals(false, stringType0.isParameterizedType());
      assertEquals(false, stringType0.isUnionType());
      assertEquals(false, stringType0.isResolved());
      assertEquals(false, functionType0.isVoidType());
      assertEquals(false, functionType0.isInterface());
      assertEquals(false, functionType0.isConstructor());
      assertEquals(false, functionType0.isBooleanValueType());
      assertEquals(true, functionType0.isOrdinaryFunction());
      assertEquals(false, functionType0.isNoType());
      assertEquals(false, functionType0.isNumberValueType());
      assertEquals(0, functionType0.getMaxArguments());
      assertEquals(false, functionType0.isNoResolvedType());
      assertEquals(false, functionType0.isNullType());
      assertEquals(false, functionType0.isAllType());
      assertEquals(false, functionType0.isStringValueType());
      assertEquals(true, functionType0.isFunctionType());
      assertEquals(false, functionType0.isNominalType());
      assertEquals(false, functionType0.isNoObjectType());
      assertEquals(false, functionType0.isUnionType());
      assertEquals(false, functionType0.isEnumElementType());
      assertEquals(false, functionType0.isNominalConstructor());
      assertEquals(false, functionType0.isFunctionPrototypeType());
      assertEquals(false, functionType0.isRecordType());
      assertEquals(true, functionType0.canBeCalled());
      assertEquals(false, functionType0.isResolved());
      assertEquals(false, functionType0.isParameterizedType());
      assertEquals(false, functionType0.isCheckedUnknownType());
      assertEquals(false, functionType0.isEnumType());
      assertEquals(false, functionType0.isTemplateType());
      assertEquals(false, functionType0.hasInstanceType());
      assertEquals(false, functionType0.isReturnTypeInferred());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertEquals(false, functionType0.hasCachedValues());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertEquals(true, stack0.empty());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertEquals(true, stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertEquals(false, jSTypeArray0[0].isNominalType());
      assertEquals(false, jSTypeArray0[0].isTemplateType());
      assertEquals(false, jSTypeArray0[0].isNoType());
      assertEquals(false, jSTypeArray0[0].isParameterizedType());
      assertEquals(true, jSTypeArray0[0].isFunctionType());
      assertEquals(false, jSTypeArray0[0].isAllType());
      assertEquals(false, jSTypeArray0[0].isVoidType());
      assertEquals(false, jSTypeArray0[0].isBooleanValueType());
      assertEquals(false, jSTypeArray0[0].isRecordType());
      assertEquals(false, jSTypeArray0[0].isEnumElementType());
      assertEquals(false, jSTypeArray0[0].isInterface());
      assertEquals(false, jSTypeArray0[0].isNullType());
      assertEquals(false, jSTypeArray0[0].isNumberValueType());
      assertEquals(false, jSTypeArray0[0].isResolved());
      assertEquals(false, jSTypeArray0[0].isNoResolvedType());
      assertEquals(false, jSTypeArray0[0].isCheckedUnknownType());
      assertEquals(false, jSTypeArray0[0].isEnumType());
      assertEquals(false, jSTypeArray0[0].isNoObjectType());
      assertEquals(false, jSTypeArray0[0].isConstructor());
      assertEquals(false, jSTypeArray0[0].isFunctionPrototypeType());
      assertEquals(false, jSTypeArray0[0].isNominalConstructor());
      assertEquals(true, jSTypeArray0[0].isOrdinaryFunction());
      assertEquals(false, jSTypeArray0[0].isUnionType());
      assertEquals(false, jSTypeArray0[0].isStringValueType());
      assertNotNull(jSTypeArray0[0]);
      
      Node node0 = jSTypeRegistry0.createParametersWithVarArgs(jSTypeArray0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isGetElem());
      assertEquals(1, node0.getChildCount());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isCatch());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isNot());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isScript());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isRegExp());
      assertEquals(83, node0.getType());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isQuotedString());
      assertEquals(-1, node0.getCharno());
      assertEquals(true, node0.isParamList());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(true, node0.hasOneChild());
      assertEquals(true, node0.hasChildren());
      assertEquals(false, node0.isString());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isStringKey());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isCall());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isNE());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isLabelName());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isIn());
      assertNotNull(node0);
      
      String string0 = "prototype";
      boolean boolean0 = functionType0.defineDeclaredProperty(string0, (JSType) stringType0, node0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isGetElem());
      assertEquals(1, node0.getChildCount());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isCatch());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isNot());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isScript());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isRegExp());
      assertEquals(83, node0.getType());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isQuotedString());
      assertEquals(-1, node0.getCharno());
      assertEquals(true, node0.isParamList());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(true, node0.hasOneChild());
      assertEquals(true, node0.hasChildren());
      assertEquals(false, node0.isString());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isStringKey());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isCall());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isNE());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isLabelName());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isIn());
      assertEquals(true, stringType0.matchesNumberContext());
      assertEquals(false, stringType0.isNullType());
      assertEquals("string", stringType0.getDisplayName());
      assertEquals(false, stringType0.isOrdinaryFunction());
      assertEquals(true, stringType0.matchesStringContext());
      assertEquals(false, stringType0.isNominalConstructor());
      assertEquals(false, stringType0.isNoType());
      assertEquals(false, stringType0.isEnumElementType());
      assertEquals(false, stringType0.isBooleanValueType());
      assertEquals(false, stringType0.isFunctionPrototypeType());
      assertEquals(false, stringType0.isConstructor());
      assertEquals(BooleanLiteralSet.BOTH, stringType0.getPossibleToBooleanOutcomes());
      assertEquals(false, stringType0.isAllType());
      assertEquals(false, stringType0.isVoidType());
      assertEquals(false, stringType0.isCheckedUnknownType());
      assertEquals(false, stringType0.isRecordType());
      assertEquals(false, stringType0.isNoObjectType());
      assertEquals(false, stringType0.isFunctionType());
      assertEquals(true, stringType0.matchesObjectContext());
      assertEquals(false, stringType0.isEnumType());
      assertEquals(false, stringType0.isNumberValueType());
      assertEquals(false, stringType0.isTemplateType());
      assertEquals(false, stringType0.isNominalType());
      assertEquals(false, stringType0.isInterface());
      assertEquals(true, stringType0.isStringValueType());
      assertEquals(false, stringType0.isNoResolvedType());
      assertEquals(false, stringType0.isParameterizedType());
      assertEquals(false, stringType0.isUnionType());
      assertEquals(false, stringType0.isResolved());
      assertEquals(false, functionType0.isVoidType());
      assertEquals(false, functionType0.isInterface());
      assertEquals(false, functionType0.isConstructor());
      assertEquals(false, functionType0.isBooleanValueType());
      assertEquals(true, functionType0.isOrdinaryFunction());
      assertEquals(false, functionType0.isNoType());
      assertEquals(false, functionType0.isNumberValueType());
      assertEquals(0, functionType0.getMaxArguments());
      assertEquals(false, functionType0.isNoResolvedType());
      assertEquals(false, functionType0.isNullType());
      assertEquals(false, functionType0.isAllType());
      assertEquals(false, functionType0.isStringValueType());
      assertEquals(true, functionType0.isFunctionType());
      assertEquals(false, functionType0.isNominalType());
      assertEquals(false, functionType0.isNoObjectType());
      assertEquals(false, functionType0.isUnionType());
      assertEquals(false, functionType0.isEnumElementType());
      assertEquals(true, functionType0.hasCachedValues());
      assertEquals(false, functionType0.isNominalConstructor());
      assertEquals(false, functionType0.isFunctionPrototypeType());
      assertEquals(false, functionType0.isRecordType());
      assertEquals(true, functionType0.canBeCalled());
      assertEquals(false, functionType0.isResolved());
      assertEquals(false, functionType0.isParameterizedType());
      assertEquals(false, functionType0.isCheckedUnknownType());
      assertEquals(false, functionType0.isEnumType());
      assertEquals(false, functionType0.isTemplateType());
      assertEquals(false, functionType0.hasInstanceType());
      assertEquals(false, functionType0.isReturnTypeInferred());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertEquals(true, stack0.empty());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertEquals(true, stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertFalse(boolean0);
  }

  @Test
  public void test59()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      boolean boolean0 = false;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0, boolean0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, noResolvedType0.isCheckedUnknownType());
      assertEquals(false, noResolvedType0.isFunctionPrototypeType());
      assertEquals(2147483647, noResolvedType0.getMaxArguments());
      assertEquals(false, noResolvedType0.isRecordType());
      assertEquals(false, noResolvedType0.isUnionType());
      assertEquals(false, noResolvedType0.isEnumType());
      assertEquals(2147483647, noResolvedType0.getPropertiesCount());
      assertEquals(false, noResolvedType0.isReturnTypeInferred());
      assertEquals(false, noResolvedType0.isStringValueType());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertNull(noResolvedType0.getReferenceName());
      assertEquals(false, noResolvedType0.isNullType());
      assertEquals(false, noResolvedType0.isAllType());
      assertEquals(true, noResolvedType0.matchesObjectContext());
      assertEquals(false, noResolvedType0.isNominalConstructor());
      assertEquals(false, noResolvedType0.isVoidType());
      assertEquals(false, noResolvedType0.isNumberValueType());
      assertEquals(true, noResolvedType0.matchesNumberContext());
      assertEquals(true, noResolvedType0.hasInstanceType());
      assertEquals(true, noResolvedType0.isConstructor());
      assertEquals(false, noResolvedType0.isInterface());
      assertEquals(false, noResolvedType0.isNoObjectType());
      assertEquals(false, noResolvedType0.isResolved());
      assertEquals(false, noResolvedType0.hasCachedValues());
      assertEquals(true, noResolvedType0.isNullable());
      assertEquals(false, noResolvedType0.isNominalType());
      assertEquals(true, noResolvedType0.matchesStringContext());
      assertEquals(false, noResolvedType0.isTemplateType());
      assertEquals(false, noResolvedType0.isParameterizedType());
      assertEquals(false, noResolvedType0.isEnumElementType());
      assertEquals(false, noResolvedType0.isFunctionType());
      assertEquals(true, noResolvedType0.canBeCalled());
      assertEquals(false, noResolvedType0.isBooleanValueType());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noResolvedType0.isOrdinaryFunction());
      assertNotNull(noResolvedType0);
      
      FunctionType functionType0 = noResolvedType0.cloneWithoutArrowType();
      assertEquals(false, functionType0.isEnumType());
      assertEquals(false, functionType0.isNoResolvedType());
      assertEquals(true, functionType0.isFunctionType());
      assertEquals(false, functionType0.isCheckedUnknownType());
      assertEquals(false, functionType0.hasCachedValues());
      assertEquals(2147483647, functionType0.getMaxArguments());
      assertEquals(true, functionType0.canBeCalled());
      assertEquals(false, functionType0.isInterface());
      assertEquals(false, functionType0.isNullType());
      assertEquals(false, functionType0.isAllType());
      assertEquals(false, functionType0.isParameterizedType());
      assertEquals(false, functionType0.isEnumElementType());
      assertEquals(false, functionType0.isReturnTypeInferred());
      assertEquals(false, functionType0.isFunctionPrototypeType());
      assertEquals(false, functionType0.isBooleanValueType());
      assertEquals(false, functionType0.isRecordType());
      assertEquals(false, functionType0.isOrdinaryFunction());
      assertEquals(false, functionType0.isTemplateType());
      assertEquals(false, functionType0.isResolved());
      assertEquals(false, functionType0.isNominalType());
      assertEquals(false, functionType0.isNoObjectType());
      assertEquals(false, functionType0.isStringValueType());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertEquals(true, functionType0.hasInstanceType());
      assertEquals(false, functionType0.isNumberValueType());
      assertEquals(false, functionType0.isNominalConstructor());
      assertEquals(false, functionType0.isVoidType());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertEquals(false, functionType0.isNoType());
      assertEquals(true, functionType0.isConstructor());
      assertEquals(false, functionType0.isUnionType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, noResolvedType0.isCheckedUnknownType());
      assertEquals(false, noResolvedType0.isFunctionPrototypeType());
      assertEquals(2147483647, noResolvedType0.getMaxArguments());
      assertEquals(false, noResolvedType0.isRecordType());
      assertEquals(false, noResolvedType0.isUnionType());
      assertEquals(false, noResolvedType0.isEnumType());
      assertEquals(2147483647, noResolvedType0.getPropertiesCount());
      assertEquals(false, noResolvedType0.isReturnTypeInferred());
      assertEquals(false, noResolvedType0.isStringValueType());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertNull(noResolvedType0.getReferenceName());
      assertEquals(false, noResolvedType0.isNullType());
      assertEquals(false, noResolvedType0.isAllType());
      assertEquals(true, noResolvedType0.matchesObjectContext());
      assertEquals(false, noResolvedType0.isNominalConstructor());
      assertEquals(false, noResolvedType0.isVoidType());
      assertEquals(false, noResolvedType0.isNumberValueType());
      assertEquals(true, noResolvedType0.matchesNumberContext());
      assertEquals(true, noResolvedType0.hasInstanceType());
      assertEquals(true, noResolvedType0.isConstructor());
      assertEquals(false, noResolvedType0.isInterface());
      assertEquals(false, noResolvedType0.isNoObjectType());
      assertEquals(false, noResolvedType0.isResolved());
      assertEquals(false, noResolvedType0.hasCachedValues());
      assertEquals(true, noResolvedType0.isNullable());
      assertEquals(false, noResolvedType0.isNominalType());
      assertEquals(true, noResolvedType0.matchesStringContext());
      assertEquals(false, noResolvedType0.isTemplateType());
      assertEquals(false, noResolvedType0.isParameterizedType());
      assertEquals(false, noResolvedType0.isEnumElementType());
      assertEquals(false, noResolvedType0.isFunctionType());
      assertEquals(true, noResolvedType0.canBeCalled());
      assertEquals(false, noResolvedType0.isBooleanValueType());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noResolvedType0.isOrdinaryFunction());
      assertNotNull(functionType0);
      
      boolean boolean1 = true;
      FunctionType functionType1 = noResolvedType0.supAndInfHelper(functionType0, boolean1);
      assertNotSame(functionType1, functionType0);
      assertNotSame(functionType0, functionType1);
      assertEquals(false, functionType1.isInterface());
      assertEquals(false, functionType1.isNullType());
      assertEquals(2147483647, functionType1.getMaxArguments());
      assertEquals(false, functionType1.isResolved());
      assertEquals(0, functionType1.getExtendedInterfacesCount());
      assertEquals(true, functionType1.canBeCalled());
      assertEquals(false, functionType1.isNoObjectType());
      assertEquals(false, functionType1.isParameterizedType());
      assertEquals(false, functionType1.isTemplateType());
      assertEquals(false, functionType1.isStringValueType());
      assertEquals(false, functionType1.isCheckedUnknownType());
      assertEquals(true, functionType1.isFunctionType());
      assertEquals(false, functionType1.isRecordType());
      assertEquals(false, functionType1.isAllType());
      assertEquals(false, functionType1.isEnumType());
      assertEquals(false, functionType1.isNumberValueType());
      assertEquals(false, functionType1.isNominalType());
      assertEquals(false, functionType1.isOrdinaryFunction());
      assertEquals(false, functionType1.isFunctionPrototypeType());
      assertEquals(false, functionType1.isBooleanValueType());
      assertEquals(false, functionType1.isNoType());
      assertEquals(true, functionType1.hasCachedValues());
      assertEquals(true, functionType1.isConstructor());
      assertEquals(false, functionType1.isNoResolvedType());
      assertEquals(BooleanLiteralSet.TRUE, functionType1.getPossibleToBooleanOutcomes());
      assertEquals(true, functionType1.hasInstanceType());
      assertEquals(false, functionType1.isReturnTypeInferred());
      assertEquals(false, functionType1.isVoidType());
      assertEquals(false, functionType1.isEnumElementType());
      assertEquals(false, functionType1.isUnionType());
      assertEquals(true, functionType1.isNominalConstructor());
      assertEquals(false, functionType0.isEnumType());
      assertEquals(true, functionType0.hasCachedValues());
      assertEquals(false, functionType0.isNoResolvedType());
      assertEquals(true, functionType0.isFunctionType());
      assertEquals(false, functionType0.isCheckedUnknownType());
      assertEquals(2147483647, functionType0.getMaxArguments());
      assertEquals(true, functionType0.canBeCalled());
      assertEquals(false, functionType0.isInterface());
      assertEquals(false, functionType0.isNullType());
      assertEquals(false, functionType0.isAllType());
      assertEquals(false, functionType0.isParameterizedType());
      assertEquals(false, functionType0.isEnumElementType());
      assertEquals(false, functionType0.isReturnTypeInferred());
      assertEquals(false, functionType0.isFunctionPrototypeType());
      assertEquals(false, functionType0.isBooleanValueType());
      assertEquals(false, functionType0.isRecordType());
      assertEquals(false, functionType0.isOrdinaryFunction());
      assertEquals(false, functionType0.isTemplateType());
      assertEquals(false, functionType0.isResolved());
      assertEquals(false, functionType0.isNominalType());
      assertEquals(false, functionType0.isNoObjectType());
      assertEquals(false, functionType0.isStringValueType());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertEquals(true, functionType0.hasInstanceType());
      assertEquals(false, functionType0.isNumberValueType());
      assertEquals(false, functionType0.isNominalConstructor());
      assertEquals(false, functionType0.isVoidType());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertEquals(false, functionType0.isNoType());
      assertEquals(true, functionType0.isConstructor());
      assertEquals(false, functionType0.isUnionType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, noResolvedType0.isCheckedUnknownType());
      assertEquals(false, noResolvedType0.isFunctionPrototypeType());
      assertEquals(2147483647, noResolvedType0.getMaxArguments());
      assertEquals(true, noResolvedType0.hasCachedValues());
      assertEquals(false, noResolvedType0.isRecordType());
      assertEquals(false, noResolvedType0.isUnionType());
      assertEquals(false, noResolvedType0.isEnumType());
      assertEquals(2147483647, noResolvedType0.getPropertiesCount());
      assertEquals(false, noResolvedType0.isReturnTypeInferred());
      assertEquals(false, noResolvedType0.isStringValueType());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertNull(noResolvedType0.getReferenceName());
      assertEquals(false, noResolvedType0.isNullType());
      assertEquals(false, noResolvedType0.isAllType());
      assertEquals(true, noResolvedType0.matchesObjectContext());
      assertEquals(false, noResolvedType0.isNominalConstructor());
      assertEquals(false, noResolvedType0.isVoidType());
      assertEquals(false, noResolvedType0.isNumberValueType());
      assertEquals(true, noResolvedType0.matchesNumberContext());
      assertEquals(true, noResolvedType0.hasInstanceType());
      assertEquals(true, noResolvedType0.isConstructor());
      assertEquals(false, noResolvedType0.isInterface());
      assertEquals(false, noResolvedType0.isNoObjectType());
      assertEquals(false, noResolvedType0.isResolved());
      assertEquals(true, noResolvedType0.isNullable());
      assertEquals(false, noResolvedType0.isNominalType());
      assertEquals(true, noResolvedType0.matchesStringContext());
      assertEquals(false, noResolvedType0.isTemplateType());
      assertEquals(false, noResolvedType0.isParameterizedType());
      assertEquals(false, noResolvedType0.isEnumElementType());
      assertEquals(false, noResolvedType0.isFunctionType());
      assertEquals(true, noResolvedType0.canBeCalled());
      assertEquals(false, noResolvedType0.isBooleanValueType());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noResolvedType0.isOrdinaryFunction());
      assertNotNull(functionType1);
      assertFalse(functionType1.equals((Object)functionType0));
      assertFalse(boolean1 == boolean0);
      assertFalse(functionType0.equals((Object)functionType1));
      assertFalse(boolean0 == boolean1);
      
      boolean boolean2 = functionType1.isInstanceType();
      assertNotSame(functionType1, functionType0);
      assertNotSame(functionType0, functionType1);
      assertEquals(false, functionType1.isInterface());
      assertEquals(false, functionType1.isNullType());
      assertEquals(2147483647, functionType1.getMaxArguments());
      assertEquals(false, functionType1.isResolved());
      assertEquals(0, functionType1.getExtendedInterfacesCount());
      assertEquals(true, functionType1.canBeCalled());
      assertEquals(false, functionType1.isNoObjectType());
      assertEquals(false, functionType1.isParameterizedType());
      assertEquals(false, functionType1.isTemplateType());
      assertEquals(false, functionType1.isStringValueType());
      assertEquals(false, functionType1.isCheckedUnknownType());
      assertEquals(true, functionType1.isFunctionType());
      assertEquals(false, functionType1.isRecordType());
      assertEquals(false, functionType1.isAllType());
      assertEquals(false, functionType1.isEnumType());
      assertEquals(false, functionType1.isNumberValueType());
      assertEquals(false, functionType1.isNominalType());
      assertEquals(false, functionType1.isOrdinaryFunction());
      assertEquals(false, functionType1.isFunctionPrototypeType());
      assertEquals(false, functionType1.isBooleanValueType());
      assertEquals(false, functionType1.isNoType());
      assertEquals(true, functionType1.hasCachedValues());
      assertEquals(true, functionType1.isConstructor());
      assertEquals(false, functionType1.isNoResolvedType());
      assertEquals(BooleanLiteralSet.TRUE, functionType1.getPossibleToBooleanOutcomes());
      assertEquals(true, functionType1.hasInstanceType());
      assertEquals(false, functionType1.isReturnTypeInferred());
      assertEquals(false, functionType1.isVoidType());
      assertEquals(false, functionType1.isEnumElementType());
      assertEquals(false, functionType1.isUnionType());
      assertEquals(true, functionType1.isNominalConstructor());
      assertEquals(false, functionType0.isEnumType());
      assertEquals(true, functionType0.hasCachedValues());
      assertEquals(false, functionType0.isNoResolvedType());
      assertEquals(true, functionType0.isFunctionType());
      assertEquals(false, functionType0.isCheckedUnknownType());
      assertEquals(2147483647, functionType0.getMaxArguments());
      assertEquals(true, functionType0.canBeCalled());
      assertEquals(false, functionType0.isInterface());
      assertEquals(false, functionType0.isNullType());
      assertEquals(false, functionType0.isAllType());
      assertEquals(false, functionType0.isParameterizedType());
      assertEquals(false, functionType0.isEnumElementType());
      assertEquals(false, functionType0.isReturnTypeInferred());
      assertEquals(false, functionType0.isFunctionPrototypeType());
      assertEquals(false, functionType0.isBooleanValueType());
      assertEquals(false, functionType0.isRecordType());
      assertEquals(false, functionType0.isOrdinaryFunction());
      assertEquals(false, functionType0.isTemplateType());
      assertEquals(false, functionType0.isResolved());
      assertEquals(false, functionType0.isNominalType());
      assertEquals(false, functionType0.isNoObjectType());
      assertEquals(false, functionType0.isStringValueType());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertEquals(true, functionType0.hasInstanceType());
      assertEquals(false, functionType0.isNumberValueType());
      assertEquals(false, functionType0.isNominalConstructor());
      assertEquals(false, functionType0.isVoidType());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertEquals(false, functionType0.isNoType());
      assertEquals(true, functionType0.isConstructor());
      assertEquals(false, functionType0.isUnionType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, noResolvedType0.isCheckedUnknownType());
      assertEquals(false, noResolvedType0.isFunctionPrototypeType());
      assertEquals(2147483647, noResolvedType0.getMaxArguments());
      assertEquals(true, noResolvedType0.hasCachedValues());
      assertEquals(false, noResolvedType0.isRecordType());
      assertEquals(false, noResolvedType0.isUnionType());
      assertEquals(false, noResolvedType0.isEnumType());
      assertEquals(2147483647, noResolvedType0.getPropertiesCount());
      assertEquals(false, noResolvedType0.isReturnTypeInferred());
      assertEquals(false, noResolvedType0.isStringValueType());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertNull(noResolvedType0.getReferenceName());
      assertEquals(false, noResolvedType0.isNullType());
      assertEquals(false, noResolvedType0.isAllType());
      assertEquals(true, noResolvedType0.matchesObjectContext());
      assertEquals(false, noResolvedType0.isNominalConstructor());
      assertEquals(false, noResolvedType0.isVoidType());
      assertEquals(false, noResolvedType0.isNumberValueType());
      assertEquals(true, noResolvedType0.matchesNumberContext());
      assertEquals(true, noResolvedType0.hasInstanceType());
      assertEquals(true, noResolvedType0.isConstructor());
      assertEquals(false, noResolvedType0.isInterface());
      assertEquals(false, noResolvedType0.isNoObjectType());
      assertEquals(false, noResolvedType0.isResolved());
      assertEquals(true, noResolvedType0.isNullable());
      assertEquals(false, noResolvedType0.isNominalType());
      assertEquals(true, noResolvedType0.matchesStringContext());
      assertEquals(false, noResolvedType0.isTemplateType());
      assertEquals(false, noResolvedType0.isParameterizedType());
      assertEquals(false, noResolvedType0.isEnumElementType());
      assertEquals(false, noResolvedType0.isFunctionType());
      assertEquals(true, noResolvedType0.canBeCalled());
      assertEquals(false, noResolvedType0.isBooleanValueType());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noResolvedType0.isOrdinaryFunction());
      assertTrue(boolean2);
      assertFalse(functionType1.equals((Object)functionType0));
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1 == boolean2);
      assertFalse(functionType0.equals((Object)functionType1));
      assertFalse(boolean0 == boolean2);
      assertFalse(boolean0 == boolean1);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
  }

  @Test
  public void test60()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      //  // Unstable assertion: assertNotNull(simpleErrorReporter0);
      
      boolean boolean0 = false;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0, boolean0);
      //  // Unstable assertion: assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      //  // Unstable assertion: assertNotNull(jSTypeRegistry0);
      
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      //  // Unstable assertion: assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      //  // Unstable assertion: assertEquals(true, noResolvedType0.matchesStringContext());
      //  // Unstable assertion: assertEquals(false, noResolvedType0.isCheckedUnknownType());
      //  // Unstable assertion: assertEquals(false, noResolvedType0.isNominalConstructor());
      //  // Unstable assertion: assertEquals(false, noResolvedType0.isInterface());
      //  // Unstable assertion: assertEquals(false, noResolvedType0.isUnionType());
      //  // Unstable assertion: assertEquals(false, noResolvedType0.isNominalType());
      //  // Unstable assertion: assertEquals(true, noResolvedType0.hasInstanceType());
      //  // Unstable assertion: assertEquals(false, noResolvedType0.isEnumType());
      //  // Unstable assertion: assertEquals(false, noResolvedType0.isNoObjectType());
      //  // Unstable assertion: assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      //  // Unstable assertion: assertEquals(false, noResolvedType0.isRecordType());
      //  // Unstable assertion: assertEquals(true, noResolvedType0.matchesNumberContext());
      //  // Unstable assertion: assertEquals(false, noResolvedType0.isParameterizedType());
      //  // Unstable assertion: assertEquals(false, noResolvedType0.isFunctionType());
      //  // Unstable assertion: assertEquals(false, noResolvedType0.isEnumElementType());
      //  // Unstable assertion: assertEquals(false, noResolvedType0.hasCachedValues());
      //  // Unstable assertion: assertEquals(false, noResolvedType0.isFunctionPrototypeType());
      //  // Unstable assertion: assertEquals(true, noResolvedType0.canBeCalled());
      //  // Unstable assertion: assertEquals(false, noResolvedType0.isNumberValueType());
      //  // Unstable assertion: assertEquals(2147483647, noResolvedType0.getPropertiesCount());
      //  // Unstable assertion: assertEquals(false, noResolvedType0.isBooleanValueType());
      //  // Unstable assertion: assertEquals(true, noResolvedType0.matchesObjectContext());
      //  // Unstable assertion: assertEquals(false, noResolvedType0.isVoidType());
      //  // Unstable assertion: assertEquals(false, noResolvedType0.isTemplateType());
      //  // Unstable assertion: assertEquals(false, noResolvedType0.isResolved());
      //  // Unstable assertion: assertEquals(false, noResolvedType0.isReturnTypeInferred());
      //  // Unstable assertion: assertNull(noResolvedType0.getReferenceName());
      //  // Unstable assertion: assertEquals(false, noResolvedType0.isAllType());
      //  // Unstable assertion: assertEquals(false, noResolvedType0.isNullType());
      //  // Unstable assertion: assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      //  // Unstable assertion: assertEquals(true, noResolvedType0.isNullable());
      //  // Unstable assertion: assertEquals(2147483647, noResolvedType0.getMaxArguments());
      //  // Unstable assertion: assertEquals(false, noResolvedType0.isStringValueType());
      //  // Unstable assertion: assertEquals(true, noResolvedType0.isConstructor());
      //  // Unstable assertion: assertEquals(false, noResolvedType0.isOrdinaryFunction());
      //  // Unstable assertion: assertNotNull(noResolvedType0);
      
      String string0 = noResolvedType0.toAnnotationString();
      //  // Unstable assertion: assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      //  // Unstable assertion: assertEquals(true, noResolvedType0.matchesStringContext());
      //  // Unstable assertion: assertEquals(false, noResolvedType0.isCheckedUnknownType());
      //  // Unstable assertion: assertEquals(false, noResolvedType0.isNominalConstructor());
      //  // Unstable assertion: assertEquals(false, noResolvedType0.isInterface());
      //  // Unstable assertion: assertEquals(false, noResolvedType0.isUnionType());
      //  // Unstable assertion: assertEquals(false, noResolvedType0.isNominalType());
      //  // Unstable assertion: assertEquals(true, noResolvedType0.hasInstanceType());
      //  // Unstable assertion: assertEquals(false, noResolvedType0.isEnumType());
      //  // Unstable assertion: assertEquals(false, noResolvedType0.isNoObjectType());
      //  // Unstable assertion: assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      //  // Unstable assertion: assertEquals(false, noResolvedType0.isRecordType());
      //  // Unstable assertion: assertEquals(true, noResolvedType0.matchesNumberContext());
      //  // Unstable assertion: assertEquals(false, noResolvedType0.isParameterizedType());
      //  // Unstable assertion: assertEquals(false, noResolvedType0.isFunctionType());
      //  // Unstable assertion: assertEquals(false, noResolvedType0.isEnumElementType());
      //  // Unstable assertion: assertEquals(false, noResolvedType0.hasCachedValues());
      //  // Unstable assertion: assertEquals(false, noResolvedType0.isFunctionPrototypeType());
      //  // Unstable assertion: assertEquals(true, noResolvedType0.canBeCalled());
      //  // Unstable assertion: assertEquals(false, noResolvedType0.isNumberValueType());
      //  // Unstable assertion: assertEquals(2147483647, noResolvedType0.getPropertiesCount());
      //  // Unstable assertion: assertEquals(false, noResolvedType0.isBooleanValueType());
      //  // Unstable assertion: assertEquals(true, noResolvedType0.matchesObjectContext());
      //  // Unstable assertion: assertEquals(false, noResolvedType0.isVoidType());
      //  // Unstable assertion: assertEquals(false, noResolvedType0.isTemplateType());
      //  // Unstable assertion: assertEquals(false, noResolvedType0.isResolved());
      //  // Unstable assertion: assertEquals(false, noResolvedType0.isReturnTypeInferred());
      //  // Unstable assertion: assertNull(noResolvedType0.getReferenceName());
      //  // Unstable assertion: assertEquals(false, noResolvedType0.isAllType());
      //  // Unstable assertion: assertEquals(false, noResolvedType0.isNullType());
      //  // Unstable assertion: assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      //  // Unstable assertion: assertEquals(true, noResolvedType0.isNullable());
      //  // Unstable assertion: assertEquals(2147483647, noResolvedType0.getMaxArguments());
      //  // Unstable assertion: assertEquals(false, noResolvedType0.isStringValueType());
      //  // Unstable assertion: assertEquals(true, noResolvedType0.isConstructor());
      //  // Unstable assertion: assertEquals(false, noResolvedType0.isOrdinaryFunction());
      //  // Unstable assertion: assertNotNull(string0);
      //  // Unstable assertion: assertEquals("?", string0);
      
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, string0);
      //  // Unstable assertion: assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      //  // Unstable assertion: assertEquals(true, noResolvedType0.matchesStringContext());
      //  // Unstable assertion: assertEquals(false, noResolvedType0.isCheckedUnknownType());
      //  // Unstable assertion: assertEquals(false, noResolvedType0.isNominalConstructor());
      //  // Unstable assertion: assertEquals(false, noResolvedType0.isInterface());
      //  // Unstable assertion: assertEquals(false, noResolvedType0.isUnionType());
      //  // Unstable assertion: assertEquals(false, noResolvedType0.isNominalType());
      //  // Unstable assertion: assertEquals(true, noResolvedType0.hasInstanceType());
      //  // Unstable assertion: assertEquals(false, noResolvedType0.isEnumType());
      //  // Unstable assertion: assertEquals(false, noResolvedType0.isNoObjectType());
      //  // Unstable assertion: assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      //  // Unstable assertion: assertEquals(false, noResolvedType0.isRecordType());
      //  // Unstable assertion: assertEquals(true, noResolvedType0.matchesNumberContext());
      //  // Unstable assertion: assertEquals(false, noResolvedType0.isParameterizedType());
      //  // Unstable assertion: assertEquals(false, noResolvedType0.isFunctionType());
      //  // Unstable assertion: assertEquals(false, noResolvedType0.isEnumElementType());
      //  // Unstable assertion: assertEquals(false, noResolvedType0.hasCachedValues());
      //  // Unstable assertion: assertEquals(false, noResolvedType0.isFunctionPrototypeType());
      //  // Unstable assertion: assertEquals(true, noResolvedType0.canBeCalled());
      //  // Unstable assertion: assertEquals(false, noResolvedType0.isNumberValueType());
      //  // Unstable assertion: assertEquals(2147483647, noResolvedType0.getPropertiesCount());
      //  // Unstable assertion: assertEquals(false, noResolvedType0.isBooleanValueType());
      //  // Unstable assertion: assertEquals(true, noResolvedType0.matchesObjectContext());
      //  // Unstable assertion: assertEquals(false, noResolvedType0.isVoidType());
      //  // Unstable assertion: assertEquals(false, noResolvedType0.isTemplateType());
      //  // Unstable assertion: assertEquals(false, noResolvedType0.isResolved());
      //  // Unstable assertion: assertEquals(false, noResolvedType0.isReturnTypeInferred());
      //  // Unstable assertion: assertNull(noResolvedType0.getReferenceName());
      //  // Unstable assertion: assertEquals(false, noResolvedType0.isAllType());
      //  // Unstable assertion: assertEquals(false, noResolvedType0.isNullType());
      //  // Unstable assertion: assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      //  // Unstable assertion: assertEquals(true, noResolvedType0.isNullable());
      //  // Unstable assertion: assertEquals(2147483647, noResolvedType0.getMaxArguments());
      //  // Unstable assertion: assertEquals(false, noResolvedType0.isStringValueType());
      //  // Unstable assertion: assertEquals(true, noResolvedType0.isConstructor());
      //  // Unstable assertion: assertEquals(false, noResolvedType0.isOrdinaryFunction());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isCheckedUnknownType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isParameterizedType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isResolved());
      //  // Unstable assertion: assertEquals(true, errorFunctionType0.isConstructor());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isNoType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isInterface());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.hasCachedValues());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isBooleanValueType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isUnionType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isNominalType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isFunctionPrototypeType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isVoidType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isAllType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isStringValueType());
      //  // Unstable assertion: assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isRecordType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isEnumType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isEnumElementType());
      //  // Unstable assertion: assertEquals(true, errorFunctionType0.isFunctionType());
      //  // Unstable assertion: assertEquals(true, errorFunctionType0.canBeCalled());
      //  // Unstable assertion: assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isTemplateType());
      //  // Unstable assertion: assertEquals(3, errorFunctionType0.getMaxArguments());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isNoResolvedType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isNullType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isNoObjectType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isReturnTypeInferred());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isNumberValueType());
      //  // Unstable assertion: assertEquals(true, errorFunctionType0.hasInstanceType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      //  // Unstable assertion: assertEquals(true, errorFunctionType0.isNominalConstructor());
      //  // Unstable assertion: assertNotNull(errorFunctionType0);
      
      boolean boolean1 = errorFunctionType0.isInstanceType();
      //  // Unstable assertion: assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      //  // Unstable assertion: assertEquals(true, noResolvedType0.matchesStringContext());
      //  // Unstable assertion: assertEquals(false, noResolvedType0.isCheckedUnknownType());
      //  // Unstable assertion: assertEquals(false, noResolvedType0.isNominalConstructor());
      //  // Unstable assertion: assertEquals(false, noResolvedType0.isInterface());
      //  // Unstable assertion: assertEquals(false, noResolvedType0.isUnionType());
      //  // Unstable assertion: assertEquals(false, noResolvedType0.isNominalType());
      //  // Unstable assertion: assertEquals(true, noResolvedType0.hasInstanceType());
      //  // Unstable assertion: assertEquals(false, noResolvedType0.isEnumType());
      //  // Unstable assertion: assertEquals(false, noResolvedType0.isNoObjectType());
      //  // Unstable assertion: assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      //  // Unstable assertion: assertEquals(false, noResolvedType0.isRecordType());
      //  // Unstable assertion: assertEquals(true, noResolvedType0.matchesNumberContext());
      //  // Unstable assertion: assertEquals(false, noResolvedType0.isParameterizedType());
      //  // Unstable assertion: assertEquals(false, noResolvedType0.isFunctionType());
      //  // Unstable assertion: assertEquals(false, noResolvedType0.isEnumElementType());
      //  // Unstable assertion: assertEquals(false, noResolvedType0.hasCachedValues());
      //  // Unstable assertion: assertEquals(false, noResolvedType0.isFunctionPrototypeType());
      //  // Unstable assertion: assertEquals(true, noResolvedType0.canBeCalled());
      //  // Unstable assertion: assertEquals(false, noResolvedType0.isNumberValueType());
      //  // Unstable assertion: assertEquals(2147483647, noResolvedType0.getPropertiesCount());
      //  // Unstable assertion: assertEquals(false, noResolvedType0.isBooleanValueType());
      //  // Unstable assertion: assertEquals(true, noResolvedType0.matchesObjectContext());
      //  // Unstable assertion: assertEquals(false, noResolvedType0.isVoidType());
      //  // Unstable assertion: assertEquals(false, noResolvedType0.isTemplateType());
      //  // Unstable assertion: assertEquals(false, noResolvedType0.isResolved());
      //  // Unstable assertion: assertEquals(false, noResolvedType0.isReturnTypeInferred());
      //  // Unstable assertion: assertNull(noResolvedType0.getReferenceName());
      //  // Unstable assertion: assertEquals(false, noResolvedType0.isAllType());
      //  // Unstable assertion: assertEquals(false, noResolvedType0.isNullType());
      //  // Unstable assertion: assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      //  // Unstable assertion: assertEquals(true, noResolvedType0.isNullable());
      //  // Unstable assertion: assertEquals(2147483647, noResolvedType0.getMaxArguments());
      //  // Unstable assertion: assertEquals(false, noResolvedType0.isStringValueType());
      //  // Unstable assertion: assertEquals(true, noResolvedType0.isConstructor());
      //  // Unstable assertion: assertEquals(false, noResolvedType0.isOrdinaryFunction());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isCheckedUnknownType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isParameterizedType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isResolved());
      //  // Unstable assertion: assertEquals(true, errorFunctionType0.isConstructor());
      //  // Unstable assertion: assertEquals(true, errorFunctionType0.hasCachedValues());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isNoType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isInterface());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isBooleanValueType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isUnionType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isNominalType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isFunctionPrototypeType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isVoidType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isAllType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isStringValueType());
      //  // Unstable assertion: assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isRecordType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isEnumType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isEnumElementType());
      //  // Unstable assertion: assertEquals(true, errorFunctionType0.isFunctionType());
      //  // Unstable assertion: assertEquals(true, errorFunctionType0.canBeCalled());
      //  // Unstable assertion: assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isTemplateType());
      //  // Unstable assertion: assertEquals(3, errorFunctionType0.getMaxArguments());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isNoResolvedType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isNullType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isNoObjectType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isReturnTypeInferred());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isNumberValueType());
      //  // Unstable assertion: assertEquals(true, errorFunctionType0.hasInstanceType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      //  // Unstable assertion: assertEquals(true, errorFunctionType0.isNominalConstructor());
      //  // Unstable assertion: assertFalse(boolean1);
      //  // Unstable assertion: assertTrue(boolean0 == boolean1);
      //  // Unstable assertion: assertTrue(boolean1 == boolean0);
  }

  @Test
  public void test61()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      boolean boolean0 = true;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0, boolean0);
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      assertEquals(false, noResolvedType0.isRecordType());
      assertNull(noResolvedType0.getReferenceName());
      assertEquals(false, noResolvedType0.isNullType());
      assertEquals(false, noResolvedType0.isTemplateType());
      assertEquals(false, noResolvedType0.isCheckedUnknownType());
      assertEquals(false, noResolvedType0.hasCachedValues());
      assertEquals(2147483647, noResolvedType0.getPropertiesCount());
      assertEquals(false, noResolvedType0.isEnumType());
      assertEquals(true, noResolvedType0.matchesStringContext());
      assertEquals(false, noResolvedType0.isParameterizedType());
      assertEquals(false, noResolvedType0.isNominalConstructor());
      assertEquals(false, noResolvedType0.isAllType());
      assertEquals(false, noResolvedType0.isNumberValueType());
      assertEquals(true, noResolvedType0.matchesNumberContext());
      assertEquals(false, noResolvedType0.isFunctionType());
      assertEquals(false, noResolvedType0.isReturnTypeInferred());
      assertEquals(false, noResolvedType0.isInterface());
      assertEquals(true, noResolvedType0.canBeCalled());
      assertEquals(false, noResolvedType0.isNominalType());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noResolvedType0.isBooleanValueType());
      assertEquals(true, noResolvedType0.isNullable());
      assertEquals(false, noResolvedType0.isStringValueType());
      assertEquals(true, noResolvedType0.hasInstanceType());
      assertEquals(false, noResolvedType0.isResolved());
      assertEquals(2147483647, noResolvedType0.getMaxArguments());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertEquals(false, noResolvedType0.isNoObjectType());
      assertEquals(false, noResolvedType0.isEnumElementType());
      assertEquals(true, noResolvedType0.isConstructor());
      assertEquals(true, noResolvedType0.matchesObjectContext());
      assertEquals(false, noResolvedType0.isOrdinaryFunction());
      assertEquals(false, noResolvedType0.isFunctionPrototypeType());
      assertEquals(false, noResolvedType0.isUnionType());
      assertEquals(false, noResolvedType0.isVoidType());
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(noResolvedType0);
      
      String string0 = null;
      Node node0 = noResolvedType0.getSource();
      assertEquals(false, noResolvedType0.isRecordType());
      assertNull(noResolvedType0.getReferenceName());
      assertEquals(false, noResolvedType0.isNullType());
      assertEquals(false, noResolvedType0.isTemplateType());
      assertEquals(false, noResolvedType0.isCheckedUnknownType());
      assertEquals(false, noResolvedType0.hasCachedValues());
      assertEquals(2147483647, noResolvedType0.getPropertiesCount());
      assertEquals(false, noResolvedType0.isEnumType());
      assertEquals(true, noResolvedType0.matchesStringContext());
      assertEquals(false, noResolvedType0.isParameterizedType());
      assertEquals(false, noResolvedType0.isNominalConstructor());
      assertEquals(false, noResolvedType0.isAllType());
      assertEquals(false, noResolvedType0.isNumberValueType());
      assertEquals(true, noResolvedType0.matchesNumberContext());
      assertEquals(false, noResolvedType0.isFunctionType());
      assertEquals(false, noResolvedType0.isReturnTypeInferred());
      assertEquals(false, noResolvedType0.isInterface());
      assertEquals(true, noResolvedType0.canBeCalled());
      assertEquals(false, noResolvedType0.isNominalType());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noResolvedType0.isBooleanValueType());
      assertEquals(true, noResolvedType0.isNullable());
      assertEquals(false, noResolvedType0.isStringValueType());
      assertEquals(true, noResolvedType0.hasInstanceType());
      assertEquals(false, noResolvedType0.isResolved());
      assertEquals(2147483647, noResolvedType0.getMaxArguments());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertEquals(false, noResolvedType0.isNoObjectType());
      assertEquals(false, noResolvedType0.isEnumElementType());
      assertEquals(true, noResolvedType0.isConstructor());
      assertEquals(true, noResolvedType0.matchesObjectContext());
      assertEquals(false, noResolvedType0.isOrdinaryFunction());
      assertEquals(false, noResolvedType0.isFunctionPrototypeType());
      assertEquals(false, noResolvedType0.isUnionType());
      assertEquals(false, noResolvedType0.isVoidType());
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNull(node0);
      
      // Undeclared exception!
      try {
        FunctionType functionType0 = FunctionType.forInterface(jSTypeRegistry0, string0, node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test62()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      boolean boolean0 = true;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0, boolean0);
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      String string0 = null;
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, string0);
      assertEquals(true, errorFunctionType0.isConstructor());
      assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      assertEquals(false, errorFunctionType0.isVoidType());
      assertEquals(3, errorFunctionType0.getMaxArguments());
      assertEquals(false, errorFunctionType0.isReturnTypeInferred());
      assertEquals(false, errorFunctionType0.isResolved());
      assertEquals(false, errorFunctionType0.isRecordType());
      assertEquals(false, errorFunctionType0.isBooleanValueType());
      assertEquals(false, errorFunctionType0.isParameterizedType());
      assertEquals(false, errorFunctionType0.hasCachedValues());
      assertEquals(false, errorFunctionType0.isStringValueType());
      assertEquals(false, errorFunctionType0.isCheckedUnknownType());
      assertEquals(false, errorFunctionType0.isEnumElementType());
      assertEquals(true, errorFunctionType0.isFunctionType());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertEquals(false, errorFunctionType0.isTemplateType());
      assertEquals(false, errorFunctionType0.isUnionType());
      assertEquals(false, errorFunctionType0.isNominalType());
      assertEquals(false, errorFunctionType0.isNoResolvedType());
      assertEquals(true, errorFunctionType0.hasInstanceType());
      assertEquals(false, errorFunctionType0.isNumberValueType());
      assertEquals(false, errorFunctionType0.isNullType());
      assertEquals(false, errorFunctionType0.isEnumType());
      assertEquals(false, errorFunctionType0.isAllType());
      assertEquals(false, errorFunctionType0.isNoType());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, errorFunctionType0.isNoObjectType());
      assertEquals(false, errorFunctionType0.isInterface());
      assertEquals(false, errorFunctionType0.isFunctionPrototypeType());
      assertEquals(true, errorFunctionType0.canBeCalled());
      assertEquals(true, errorFunctionType0.isNominalConstructor());
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(errorFunctionType0);
      
      Node node0 = errorFunctionType0.getParametersNode();
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isLabel());
      assertEquals(3, node0.getChildCount());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isGetProp());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isDo());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(83, node0.getType());
      assertEquals(false, node0.isTry());
      assertEquals(true, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isString());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isSetterDef());
      assertEquals(true, node0.hasChildren());
      assertEquals(true, node0.isParamList());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isIn());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isStringKey());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isScript());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isSwitch());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isOr());
      assertEquals(true, errorFunctionType0.isConstructor());
      assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      assertEquals(false, errorFunctionType0.isVoidType());
      assertEquals(3, errorFunctionType0.getMaxArguments());
      assertEquals(false, errorFunctionType0.isReturnTypeInferred());
      assertEquals(false, errorFunctionType0.isResolved());
      assertEquals(false, errorFunctionType0.isRecordType());
      assertEquals(false, errorFunctionType0.isBooleanValueType());
      assertEquals(false, errorFunctionType0.isParameterizedType());
      assertEquals(false, errorFunctionType0.hasCachedValues());
      assertEquals(false, errorFunctionType0.isStringValueType());
      assertEquals(false, errorFunctionType0.isCheckedUnknownType());
      assertEquals(false, errorFunctionType0.isEnumElementType());
      assertEquals(true, errorFunctionType0.isFunctionType());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertEquals(false, errorFunctionType0.isTemplateType());
      assertEquals(false, errorFunctionType0.isUnionType());
      assertEquals(false, errorFunctionType0.isNominalType());
      assertEquals(false, errorFunctionType0.isNoResolvedType());
      assertEquals(true, errorFunctionType0.hasInstanceType());
      assertEquals(false, errorFunctionType0.isNumberValueType());
      assertEquals(false, errorFunctionType0.isNullType());
      assertEquals(false, errorFunctionType0.isEnumType());
      assertEquals(false, errorFunctionType0.isAllType());
      assertEquals(false, errorFunctionType0.isNoType());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, errorFunctionType0.isNoObjectType());
      assertEquals(false, errorFunctionType0.isInterface());
      assertEquals(false, errorFunctionType0.isFunctionPrototypeType());
      assertEquals(true, errorFunctionType0.canBeCalled());
      assertEquals(true, errorFunctionType0.isNominalConstructor());
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(node0);
      
      // Undeclared exception!
      try {
        FunctionType functionType0 = FunctionType.forInterface(jSTypeRegistry0, string0, node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test63()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      boolean boolean0 = true;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0, boolean0);
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      String string0 = null;
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, string0);
      assertEquals(false, errorFunctionType0.isVoidType());
      assertEquals(false, errorFunctionType0.hasCachedValues());
      assertEquals(false, errorFunctionType0.isStringValueType());
      assertEquals(false, errorFunctionType0.isNoObjectType());
      assertEquals(false, errorFunctionType0.isReturnTypeInferred());
      assertEquals(true, errorFunctionType0.isNominalConstructor());
      assertEquals(false, errorFunctionType0.isNoType());
      assertEquals(false, errorFunctionType0.isUnionType());
      assertEquals(false, errorFunctionType0.isNoResolvedType());
      assertEquals(true, errorFunctionType0.isConstructor());
      assertEquals(false, errorFunctionType0.isFunctionPrototypeType());
      assertEquals(false, errorFunctionType0.isEnumType());
      assertEquals(false, errorFunctionType0.isCheckedUnknownType());
      assertEquals(true, errorFunctionType0.hasInstanceType());
      assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, errorFunctionType0.isBooleanValueType());
      assertEquals(false, errorFunctionType0.isResolved());
      assertEquals(false, errorFunctionType0.isRecordType());
      assertEquals(false, errorFunctionType0.isNominalType());
      assertEquals(false, errorFunctionType0.isInterface());
      assertEquals(false, errorFunctionType0.isTemplateType());
      assertEquals(true, errorFunctionType0.canBeCalled());
      assertEquals(false, errorFunctionType0.isNullType());
      assertEquals(false, errorFunctionType0.isNumberValueType());
      assertEquals(false, errorFunctionType0.isParameterizedType());
      assertEquals(false, errorFunctionType0.isAllType());
      assertEquals(true, errorFunctionType0.isFunctionType());
      assertEquals(false, errorFunctionType0.isEnumElementType());
      assertEquals(3, errorFunctionType0.getMaxArguments());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(errorFunctionType0);
      
      ArrayList<JSType> arrayList0 = new ArrayList<JSType>();
      assertEquals("[]", arrayList0.toString());
      assertEquals(0, arrayList0.size());
      assertEquals(true, arrayList0.isEmpty());
      assertNotNull(arrayList0);
      
      FunctionType functionType0 = (FunctionType)jSTypeRegistry0.createFunctionTypeWithVarArgs((ObjectType) errorFunctionType0, (JSType) errorFunctionType0, (List<JSType>) arrayList0);
      assertEquals("[]", arrayList0.toString());
      assertEquals(0, arrayList0.size());
      assertEquals(true, arrayList0.isEmpty());
      assertEquals(false, functionType0.isAllType());
      assertEquals(false, functionType0.isEnumType());
      assertEquals(0, functionType0.getMaxArguments());
      assertEquals(false, functionType0.isRecordType());
      assertEquals(false, functionType0.isNoResolvedType());
      assertEquals(false, functionType0.isEnumElementType());
      assertEquals(false, functionType0.isReturnTypeInferred());
      assertEquals(false, functionType0.isTemplateType());
      assertEquals(false, functionType0.isInterface());
      assertEquals(false, functionType0.isUnionType());
      assertEquals(false, functionType0.isNoObjectType());
      assertEquals(false, functionType0.isResolved());
      assertEquals(false, functionType0.hasCachedValues());
      assertEquals(false, functionType0.isCheckedUnknownType());
      assertEquals(false, functionType0.isNoType());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertEquals(true, functionType0.isOrdinaryFunction());
      assertEquals(false, functionType0.hasInstanceType());
      assertEquals(false, functionType0.isParameterizedType());
      assertEquals(false, functionType0.isStringValueType());
      assertEquals(false, functionType0.isConstructor());
      assertEquals(true, functionType0.isFunctionType());
      assertEquals(true, functionType0.canBeCalled());
      assertEquals(false, functionType0.isFunctionPrototypeType());
      assertEquals(false, functionType0.isNominalConstructor());
      assertEquals(false, functionType0.isBooleanValueType());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, functionType0.isNullType());
      assertEquals(false, functionType0.isNumberValueType());
      assertEquals(false, functionType0.isVoidType());
      assertEquals(false, functionType0.isNominalType());
      assertEquals(false, errorFunctionType0.isVoidType());
      assertEquals(false, errorFunctionType0.hasCachedValues());
      assertEquals(false, errorFunctionType0.isStringValueType());
      assertEquals(false, errorFunctionType0.isNoObjectType());
      assertEquals(false, errorFunctionType0.isReturnTypeInferred());
      assertEquals(true, errorFunctionType0.isNominalConstructor());
      assertEquals(false, errorFunctionType0.isNoType());
      assertEquals(false, errorFunctionType0.isUnionType());
      assertEquals(false, errorFunctionType0.isNoResolvedType());
      assertEquals(true, errorFunctionType0.isConstructor());
      assertEquals(false, errorFunctionType0.isFunctionPrototypeType());
      assertEquals(false, errorFunctionType0.isEnumType());
      assertEquals(false, errorFunctionType0.isCheckedUnknownType());
      assertEquals(true, errorFunctionType0.hasInstanceType());
      assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, errorFunctionType0.isBooleanValueType());
      assertEquals(false, errorFunctionType0.isResolved());
      assertEquals(false, errorFunctionType0.isRecordType());
      assertEquals(false, errorFunctionType0.isNominalType());
      assertEquals(false, errorFunctionType0.isInterface());
      assertEquals(false, errorFunctionType0.isTemplateType());
      assertEquals(true, errorFunctionType0.canBeCalled());
      assertEquals(false, errorFunctionType0.isNullType());
      assertEquals(false, errorFunctionType0.isNumberValueType());
      assertEquals(false, errorFunctionType0.isParameterizedType());
      assertEquals(false, errorFunctionType0.isAllType());
      assertEquals(true, errorFunctionType0.isFunctionType());
      assertEquals(false, errorFunctionType0.isEnumElementType());
      assertEquals(3, errorFunctionType0.getMaxArguments());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(functionType0);
  }

  @Test
  public void test64()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      boolean boolean0 = true;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0, boolean0);
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      String string0 = "u?v4s";
      NoObjectType noObjectType0 = new NoObjectType(jSTypeRegistry0);
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, noObjectType0.isAllType());
      assertEquals(false, noObjectType0.isNullType());
      assertEquals(false, noObjectType0.isFunctionPrototypeType());
      assertEquals(false, noObjectType0.isBooleanValueType());
      assertEquals(true, noObjectType0.hasInstanceType());
      assertEquals(BooleanLiteralSet.TRUE, noObjectType0.getPossibleToBooleanOutcomes());
      assertEquals(0, noObjectType0.getExtendedInterfacesCount());
      assertEquals(true, noObjectType0.isConstructor());
      assertEquals(2147483647, noObjectType0.getMaxArguments());
      assertEquals(false, noObjectType0.isParameterizedType());
      assertEquals(true, noObjectType0.isNoObjectType());
      assertEquals(false, noObjectType0.isNominalType());
      assertEquals(false, noObjectType0.isNumberValueType());
      assertEquals(false, noObjectType0.isCheckedUnknownType());
      assertEquals(false, noObjectType0.isResolved());
      assertEquals(true, noObjectType0.matchesNumberContext());
      assertEquals(false, noObjectType0.isStringValueType());
      assertEquals(false, noObjectType0.isUnionType());
      assertEquals(false, noObjectType0.isNoResolvedType());
      assertEquals(false, noObjectType0.isNoType());
      assertEquals(false, noObjectType0.isVoidType());
      assertEquals(false, noObjectType0.isInterface());
      assertEquals(false, noObjectType0.isOrdinaryFunction());
      assertEquals(false, noObjectType0.isFunctionType());
      assertEquals(true, noObjectType0.matchesStringContext());
      assertEquals(true, noObjectType0.matchesObjectContext());
      assertEquals(false, noObjectType0.isEnumElementType());
      assertEquals(false, noObjectType0.hasCachedValues());
      assertEquals(2147483647, noObjectType0.getPropertiesCount());
      assertEquals(false, noObjectType0.isEnumType());
      assertEquals(false, noObjectType0.isNominalConstructor());
      assertEquals(true, noObjectType0.canBeCalled());
      assertEquals(false, noObjectType0.isTemplateType());
      assertEquals(false, noObjectType0.isRecordType());
      assertEquals(false, noObjectType0.isReturnTypeInferred());
      assertNull(noObjectType0.getReferenceName());
      assertNotNull(noObjectType0);
      
      Node node0 = noObjectType0.getParametersNode();
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, noObjectType0.isAllType());
      assertEquals(false, noObjectType0.isNullType());
      assertEquals(false, noObjectType0.isFunctionPrototypeType());
      assertEquals(false, noObjectType0.isBooleanValueType());
      assertEquals(true, noObjectType0.hasInstanceType());
      assertEquals(BooleanLiteralSet.TRUE, noObjectType0.getPossibleToBooleanOutcomes());
      assertEquals(0, noObjectType0.getExtendedInterfacesCount());
      assertEquals(true, noObjectType0.isConstructor());
      assertEquals(2147483647, noObjectType0.getMaxArguments());
      assertEquals(false, noObjectType0.isParameterizedType());
      assertEquals(true, noObjectType0.isNoObjectType());
      assertEquals(false, noObjectType0.isNominalType());
      assertEquals(false, noObjectType0.isNumberValueType());
      assertEquals(false, noObjectType0.isCheckedUnknownType());
      assertEquals(false, noObjectType0.isResolved());
      assertEquals(true, noObjectType0.matchesNumberContext());
      assertEquals(false, noObjectType0.isStringValueType());
      assertEquals(false, noObjectType0.isUnionType());
      assertEquals(false, noObjectType0.isNoResolvedType());
      assertEquals(false, noObjectType0.isNoType());
      assertEquals(false, noObjectType0.isVoidType());
      assertEquals(false, noObjectType0.isInterface());
      assertEquals(false, noObjectType0.isOrdinaryFunction());
      assertEquals(false, noObjectType0.isFunctionType());
      assertEquals(true, noObjectType0.matchesStringContext());
      assertEquals(true, noObjectType0.matchesObjectContext());
      assertEquals(false, noObjectType0.isEnumElementType());
      assertEquals(false, noObjectType0.hasCachedValues());
      assertEquals(2147483647, noObjectType0.getPropertiesCount());
      assertEquals(false, noObjectType0.isEnumType());
      assertEquals(false, noObjectType0.isNominalConstructor());
      assertEquals(true, noObjectType0.canBeCalled());
      assertEquals(false, noObjectType0.isTemplateType());
      assertEquals(false, noObjectType0.isRecordType());
      assertEquals(false, noObjectType0.isReturnTypeInferred());
      assertNull(noObjectType0.getReferenceName());
      assertEquals(false, node0.isString());
      assertEquals(false, node0.isVoid());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(true, node0.hasOneChild());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isWith());
      assertEquals(0, node0.getLength());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isComma());
      assertEquals(1, node0.getChildCount());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isAssign());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isIn());
      assertEquals(83, node0.getType());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isIf());
      assertEquals(true, node0.isParamList());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isScript());
      assertEquals(false, node0.isHook());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isLabel());
      assertEquals(true, node0.hasChildren());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isStringKey());
      assertEquals(false, node0.isOptionalArg());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isBreak());
      assertNotNull(node0);
      
      ImmutableList<String> immutableList0 = null;
      // Undeclared exception!
      try {
        FunctionType functionType0 = jSTypeRegistry0.createConstructorType(string0, node0, node0, (JSType) noObjectType0, immutableList0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test65()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      boolean boolean0 = false;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0, boolean0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      String string0 = "]";
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, string0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      assertEquals(false, errorFunctionType0.isBooleanValueType());
      assertEquals(false, errorFunctionType0.isParameterizedType());
      assertEquals(false, errorFunctionType0.isEnumElementType());
      assertEquals(false, errorFunctionType0.isNumberValueType());
      assertEquals(true, errorFunctionType0.isFunctionType());
      assertEquals(true, errorFunctionType0.isNominalConstructor());
      assertEquals(true, errorFunctionType0.hasInstanceType());
      assertEquals(false, errorFunctionType0.isResolved());
      assertEquals(true, errorFunctionType0.isConstructor());
      assertEquals(false, errorFunctionType0.isEnumType());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, errorFunctionType0.isNominalType());
      assertEquals(false, errorFunctionType0.isTemplateType());
      assertEquals(false, errorFunctionType0.isNoObjectType());
      assertEquals(false, errorFunctionType0.isCheckedUnknownType());
      assertEquals(false, errorFunctionType0.isNoResolvedType());
      assertEquals(false, errorFunctionType0.isNoType());
      assertEquals(false, errorFunctionType0.isVoidType());
      assertEquals(3, errorFunctionType0.getMaxArguments());
      assertEquals(true, errorFunctionType0.canBeCalled());
      assertEquals(false, errorFunctionType0.isUnionType());
      assertEquals(false, errorFunctionType0.isStringValueType());
      assertEquals(false, errorFunctionType0.isAllType());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertEquals(false, errorFunctionType0.isNullType());
      assertEquals(false, errorFunctionType0.isFunctionPrototypeType());
      assertEquals(false, errorFunctionType0.hasCachedValues());
      assertEquals(false, errorFunctionType0.isReturnTypeInferred());
      assertEquals(false, errorFunctionType0.isInterface());
      assertEquals(false, errorFunctionType0.isRecordType());
      assertNotNull(errorFunctionType0);
      
      Iterable<ObjectType> iterable0 = errorFunctionType0.getOwnImplementedInterfaces();
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      assertEquals(false, errorFunctionType0.isBooleanValueType());
      assertEquals(false, errorFunctionType0.isParameterizedType());
      assertEquals(false, errorFunctionType0.isEnumElementType());
      assertEquals(false, errorFunctionType0.isNumberValueType());
      assertEquals(true, errorFunctionType0.isFunctionType());
      assertEquals(true, errorFunctionType0.isNominalConstructor());
      assertEquals(true, errorFunctionType0.hasInstanceType());
      assertEquals(false, errorFunctionType0.isResolved());
      assertEquals(true, errorFunctionType0.isConstructor());
      assertEquals(false, errorFunctionType0.isEnumType());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, errorFunctionType0.isNominalType());
      assertEquals(false, errorFunctionType0.isTemplateType());
      assertEquals(false, errorFunctionType0.isNoObjectType());
      assertEquals(false, errorFunctionType0.isCheckedUnknownType());
      assertEquals(false, errorFunctionType0.isNoResolvedType());
      assertEquals(false, errorFunctionType0.isNoType());
      assertEquals(false, errorFunctionType0.isVoidType());
      assertEquals(3, errorFunctionType0.getMaxArguments());
      assertEquals(true, errorFunctionType0.canBeCalled());
      assertEquals(false, errorFunctionType0.isUnionType());
      assertEquals(false, errorFunctionType0.isStringValueType());
      assertEquals(false, errorFunctionType0.isAllType());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertEquals(false, errorFunctionType0.isNullType());
      assertEquals(false, errorFunctionType0.isFunctionPrototypeType());
      assertEquals(false, errorFunctionType0.hasCachedValues());
      assertEquals(false, errorFunctionType0.isReturnTypeInferred());
      assertEquals(false, errorFunctionType0.isInterface());
      assertEquals(false, errorFunctionType0.isRecordType());
      assertNotNull(iterable0);
  }

  @Test
  public void test66()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      boolean boolean0 = false;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0, boolean0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      String string0 = "protoyp";
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, string0);
      assertEquals(false, errorFunctionType0.isNullType());
      assertEquals(false, errorFunctionType0.isRecordType());
      assertEquals(false, errorFunctionType0.isEnumType());
      assertEquals(true, errorFunctionType0.hasInstanceType());
      assertEquals(false, errorFunctionType0.isNoType());
      assertEquals(false, errorFunctionType0.isTemplateType());
      assertEquals(false, errorFunctionType0.isResolved());
      assertEquals(false, errorFunctionType0.isAllType());
      assertEquals(false, errorFunctionType0.isInterface());
      assertEquals(true, errorFunctionType0.isFunctionType());
      assertEquals(false, errorFunctionType0.isNumberValueType());
      assertEquals(false, errorFunctionType0.isVoidType());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, errorFunctionType0.isCheckedUnknownType());
      assertEquals(false, errorFunctionType0.isStringValueType());
      assertEquals(true, errorFunctionType0.isNominalConstructor());
      assertEquals(false, errorFunctionType0.isUnionType());
      assertEquals(false, errorFunctionType0.isReturnTypeInferred());
      assertEquals(false, errorFunctionType0.isParameterizedType());
      assertEquals(false, errorFunctionType0.isNoResolvedType());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertEquals(false, errorFunctionType0.isNominalType());
      assertEquals(true, errorFunctionType0.isConstructor());
      assertEquals(false, errorFunctionType0.isBooleanValueType());
      assertEquals(false, errorFunctionType0.hasCachedValues());
      assertEquals(false, errorFunctionType0.isEnumElementType());
      assertEquals(3, errorFunctionType0.getMaxArguments());
      assertEquals(true, errorFunctionType0.canBeCalled());
      assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      assertEquals(false, errorFunctionType0.isFunctionPrototypeType());
      assertEquals(false, errorFunctionType0.isNoObjectType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(errorFunctionType0);
      
      errorFunctionType0.setDict();
      assertEquals(false, errorFunctionType0.isNullType());
      assertEquals(false, errorFunctionType0.isRecordType());
      assertEquals(false, errorFunctionType0.isEnumType());
      assertEquals(true, errorFunctionType0.hasInstanceType());
      assertEquals(false, errorFunctionType0.isNoType());
      assertEquals(false, errorFunctionType0.isTemplateType());
      assertEquals(false, errorFunctionType0.isResolved());
      assertEquals(false, errorFunctionType0.isAllType());
      assertEquals(false, errorFunctionType0.isInterface());
      assertEquals(true, errorFunctionType0.isFunctionType());
      assertEquals(false, errorFunctionType0.isNumberValueType());
      assertEquals(false, errorFunctionType0.isVoidType());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, errorFunctionType0.isCheckedUnknownType());
      assertEquals(false, errorFunctionType0.isStringValueType());
      assertEquals(true, errorFunctionType0.isNominalConstructor());
      assertEquals(false, errorFunctionType0.isUnionType());
      assertEquals(false, errorFunctionType0.isReturnTypeInferred());
      assertEquals(false, errorFunctionType0.isParameterizedType());
      assertEquals(false, errorFunctionType0.isNoResolvedType());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertEquals(false, errorFunctionType0.isNominalType());
      assertEquals(true, errorFunctionType0.isConstructor());
      assertEquals(false, errorFunctionType0.isBooleanValueType());
      assertEquals(false, errorFunctionType0.hasCachedValues());
      assertEquals(false, errorFunctionType0.isEnumElementType());
      assertEquals(3, errorFunctionType0.getMaxArguments());
      assertEquals(true, errorFunctionType0.canBeCalled());
      assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      assertEquals(false, errorFunctionType0.isFunctionPrototypeType());
      assertEquals(false, errorFunctionType0.isNoObjectType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
  }

  @Test
  public void test67()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      boolean boolean0 = true;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0, boolean0);
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      String string0 = ":\"LT c+cK.pyC";
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, string0);
      assertEquals(false, errorFunctionType0.isReturnTypeInferred());
      assertEquals(false, errorFunctionType0.isRecordType());
      assertEquals(3, errorFunctionType0.getMaxArguments());
      assertEquals(false, errorFunctionType0.isUnionType());
      assertEquals(true, errorFunctionType0.hasInstanceType());
      assertEquals(false, errorFunctionType0.isBooleanValueType());
      assertEquals(false, errorFunctionType0.isFunctionPrototypeType());
      assertEquals(false, errorFunctionType0.isNullType());
      assertEquals(false, errorFunctionType0.isEnumElementType());
      assertEquals(true, errorFunctionType0.isFunctionType());
      assertEquals(false, errorFunctionType0.isParameterizedType());
      assertEquals(false, errorFunctionType0.isNumberValueType());
      assertEquals(false, errorFunctionType0.isResolved());
      assertEquals(true, errorFunctionType0.canBeCalled());
      assertEquals(false, errorFunctionType0.isStringValueType());
      assertEquals(false, errorFunctionType0.isTemplateType());
      assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      assertEquals(false, errorFunctionType0.isVoidType());
      assertEquals(true, errorFunctionType0.isConstructor());
      assertEquals(false, errorFunctionType0.isInterface());
      assertEquals(false, errorFunctionType0.isNoType());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertEquals(true, errorFunctionType0.isNominalConstructor());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertEquals(false, errorFunctionType0.isNominalType());
      assertEquals(false, errorFunctionType0.isEnumType());
      assertEquals(false, errorFunctionType0.isNoResolvedType());
      assertEquals(false, errorFunctionType0.isAllType());
      assertEquals(false, errorFunctionType0.isCheckedUnknownType());
      assertEquals(false, errorFunctionType0.isNoObjectType());
      assertEquals(false, errorFunctionType0.hasCachedValues());
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(errorFunctionType0);
      
      NoObjectType noObjectType0 = new NoObjectType(jSTypeRegistry0);
      assertEquals(BooleanLiteralSet.TRUE, noObjectType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noObjectType0.isEnumElementType());
      assertEquals(true, noObjectType0.hasInstanceType());
      assertEquals(false, noObjectType0.isUnionType());
      assertEquals(true, noObjectType0.canBeCalled());
      assertEquals(0, noObjectType0.getExtendedInterfacesCount());
      assertEquals(false, noObjectType0.isStringValueType());
      assertEquals(false, noObjectType0.isVoidType());
      assertEquals(false, noObjectType0.isFunctionType());
      assertEquals(false, noObjectType0.isInterface());
      assertEquals(2147483647, noObjectType0.getPropertiesCount());
      assertEquals(2147483647, noObjectType0.getMaxArguments());
      assertEquals(false, noObjectType0.isTemplateType());
      assertEquals(false, noObjectType0.isRecordType());
      assertEquals(false, noObjectType0.isAllType());
      assertNull(noObjectType0.getReferenceName());
      assertEquals(false, noObjectType0.isNumberValueType());
      assertEquals(false, noObjectType0.isEnumType());
      assertEquals(false, noObjectType0.isNominalType());
      assertEquals(true, noObjectType0.isNoObjectType());
      assertEquals(false, noObjectType0.isNoResolvedType());
      assertEquals(false, noObjectType0.isResolved());
      assertEquals(true, noObjectType0.isConstructor());
      assertEquals(false, noObjectType0.isNullType());
      assertEquals(false, noObjectType0.isBooleanValueType());
      assertEquals(false, noObjectType0.isCheckedUnknownType());
      assertEquals(false, noObjectType0.isParameterizedType());
      assertEquals(false, noObjectType0.isNominalConstructor());
      assertEquals(false, noObjectType0.isNoType());
      assertEquals(false, noObjectType0.isFunctionPrototypeType());
      assertEquals(true, noObjectType0.matchesStringContext());
      assertEquals(false, noObjectType0.isReturnTypeInferred());
      assertEquals(true, noObjectType0.matchesNumberContext());
      assertEquals(false, noObjectType0.hasCachedValues());
      assertEquals(true, noObjectType0.matchesObjectContext());
      assertEquals(false, noObjectType0.isOrdinaryFunction());
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(noObjectType0);
      
      boolean boolean1 = errorFunctionType0.hasEqualCallType((FunctionType) noObjectType0);
      assertEquals(true, errorFunctionType0.hasCachedValues());
      assertEquals(false, errorFunctionType0.isReturnTypeInferred());
      assertEquals(false, errorFunctionType0.isRecordType());
      assertEquals(3, errorFunctionType0.getMaxArguments());
      assertEquals(false, errorFunctionType0.isUnionType());
      assertEquals(true, errorFunctionType0.hasInstanceType());
      assertEquals(false, errorFunctionType0.isBooleanValueType());
      assertEquals(false, errorFunctionType0.isFunctionPrototypeType());
      assertEquals(false, errorFunctionType0.isNullType());
      assertEquals(false, errorFunctionType0.isEnumElementType());
      assertEquals(true, errorFunctionType0.isFunctionType());
      assertEquals(false, errorFunctionType0.isParameterizedType());
      assertEquals(false, errorFunctionType0.isNumberValueType());
      assertEquals(false, errorFunctionType0.isResolved());
      assertEquals(true, errorFunctionType0.canBeCalled());
      assertEquals(false, errorFunctionType0.isStringValueType());
      assertEquals(false, errorFunctionType0.isTemplateType());
      assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      assertEquals(false, errorFunctionType0.isVoidType());
      assertEquals(true, errorFunctionType0.isConstructor());
      assertEquals(false, errorFunctionType0.isInterface());
      assertEquals(false, errorFunctionType0.isNoType());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertEquals(true, errorFunctionType0.isNominalConstructor());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertEquals(false, errorFunctionType0.isNominalType());
      assertEquals(false, errorFunctionType0.isEnumType());
      assertEquals(false, errorFunctionType0.isNoResolvedType());
      assertEquals(false, errorFunctionType0.isAllType());
      assertEquals(false, errorFunctionType0.isCheckedUnknownType());
      assertEquals(false, errorFunctionType0.isNoObjectType());
      assertEquals(BooleanLiteralSet.TRUE, noObjectType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noObjectType0.isEnumElementType());
      assertEquals(true, noObjectType0.hasInstanceType());
      assertEquals(false, noObjectType0.isUnionType());
      assertEquals(true, noObjectType0.canBeCalled());
      assertEquals(0, noObjectType0.getExtendedInterfacesCount());
      assertEquals(false, noObjectType0.isStringValueType());
      assertEquals(false, noObjectType0.isVoidType());
      assertEquals(false, noObjectType0.isFunctionType());
      assertEquals(false, noObjectType0.isInterface());
      assertEquals(2147483647, noObjectType0.getPropertiesCount());
      assertEquals(2147483647, noObjectType0.getMaxArguments());
      assertEquals(false, noObjectType0.isTemplateType());
      assertEquals(false, noObjectType0.isRecordType());
      assertEquals(false, noObjectType0.isAllType());
      assertNull(noObjectType0.getReferenceName());
      assertEquals(false, noObjectType0.isNumberValueType());
      assertEquals(false, noObjectType0.isEnumType());
      assertEquals(false, noObjectType0.isNominalType());
      assertEquals(true, noObjectType0.isNoObjectType());
      assertEquals(false, noObjectType0.isNoResolvedType());
      assertEquals(false, noObjectType0.isResolved());
      assertEquals(true, noObjectType0.isConstructor());
      assertEquals(false, noObjectType0.isNullType());
      assertEquals(false, noObjectType0.isBooleanValueType());
      assertEquals(false, noObjectType0.isCheckedUnknownType());
      assertEquals(false, noObjectType0.isParameterizedType());
      assertEquals(false, noObjectType0.isNominalConstructor());
      assertEquals(false, noObjectType0.isNoType());
      assertEquals(true, noObjectType0.hasCachedValues());
      assertEquals(false, noObjectType0.isFunctionPrototypeType());
      assertEquals(true, noObjectType0.matchesStringContext());
      assertEquals(false, noObjectType0.isReturnTypeInferred());
      assertEquals(true, noObjectType0.matchesNumberContext());
      assertEquals(true, noObjectType0.matchesObjectContext());
      assertEquals(false, noObjectType0.isOrdinaryFunction());
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean0 == boolean1);
  }

  @Test
  public void test68()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      StringType stringType0 = new StringType(jSTypeRegistry0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(true, stringType0.matchesNumberContext());
      assertEquals(false, stringType0.isNumberValueType());
      assertEquals(false, stringType0.isFunctionType());
      assertEquals(false, stringType0.isVoidType());
      assertEquals(false, stringType0.isEnumElementType());
      assertEquals(false, stringType0.isUnionType());
      assertEquals(false, stringType0.isParameterizedType());
      assertEquals(false, stringType0.isInterface());
      assertEquals(false, stringType0.isNominalConstructor());
      assertEquals(false, stringType0.isAllType());
      assertEquals(false, stringType0.isNominalType());
      assertEquals(false, stringType0.isNullType());
      assertEquals("string", stringType0.getDisplayName());
      assertEquals(false, stringType0.isCheckedUnknownType());
      assertEquals(false, stringType0.isNoType());
      assertEquals(false, stringType0.isOrdinaryFunction());
      assertEquals(true, stringType0.matchesObjectContext());
      assertEquals(false, stringType0.isConstructor());
      assertEquals(true, stringType0.matchesStringContext());
      assertEquals(false, stringType0.isNoResolvedType());
      assertEquals(false, stringType0.isTemplateType());
      assertEquals(BooleanLiteralSet.BOTH, stringType0.getPossibleToBooleanOutcomes());
      assertEquals(true, stringType0.isStringValueType());
      assertEquals(false, stringType0.isFunctionPrototypeType());
      assertEquals(false, stringType0.isEnumType());
      assertEquals(false, stringType0.isNoObjectType());
      assertEquals(false, stringType0.isRecordType());
      assertEquals(false, stringType0.isResolved());
      assertEquals(false, stringType0.isBooleanValueType());
      assertNotNull(stringType0);
      
      Stack<JSType> stack0 = new Stack<JSType>();
      assertEquals(true, stack0.empty());
      assertEquals(0, stack0.size());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertEquals(true, stack0.isEmpty());
      assertNotNull(stack0);
      
      FunctionType functionType0 = jSTypeRegistry0.createFunctionTypeWithVarArgs((JSType) stringType0, (List<JSType>) stack0);
      assertEquals(true, stack0.empty());
      assertEquals(0, stack0.size());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertEquals(true, stack0.isEmpty());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, functionType0.isTemplateType());
      assertEquals(false, functionType0.isUnionType());
      assertEquals(false, functionType0.hasCachedValues());
      assertEquals(false, functionType0.isNominalConstructor());
      assertEquals(false, functionType0.isParameterizedType());
      assertEquals(false, functionType0.isNoType());
      assertEquals(false, functionType0.isEnumType());
      assertEquals(false, functionType0.isRecordType());
      assertEquals(true, functionType0.canBeCalled());
      assertEquals(true, functionType0.isFunctionType());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertEquals(0, functionType0.getMaxArguments());
      assertEquals(true, functionType0.isOrdinaryFunction());
      assertEquals(false, functionType0.isResolved());
      assertEquals(false, functionType0.hasInstanceType());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertEquals(false, functionType0.isNoResolvedType());
      assertEquals(false, functionType0.isVoidType());
      assertEquals(false, functionType0.isReturnTypeInferred());
      assertEquals(false, functionType0.isNumberValueType());
      assertEquals(false, functionType0.isEnumElementType());
      assertEquals(false, functionType0.isNominalType());
      assertEquals(false, functionType0.isStringValueType());
      assertEquals(false, functionType0.isInterface());
      assertEquals(false, functionType0.isAllType());
      assertEquals(false, functionType0.isNoObjectType());
      assertEquals(false, functionType0.isNullType());
      assertEquals(false, functionType0.isCheckedUnknownType());
      assertEquals(false, functionType0.isBooleanValueType());
      assertEquals(false, functionType0.isConstructor());
      assertEquals(false, functionType0.isFunctionPrototypeType());
      assertEquals(true, stringType0.matchesNumberContext());
      assertEquals(false, stringType0.isNumberValueType());
      assertEquals(false, stringType0.isFunctionType());
      assertEquals(false, stringType0.isVoidType());
      assertEquals(false, stringType0.isEnumElementType());
      assertEquals(false, stringType0.isUnionType());
      assertEquals(false, stringType0.isParameterizedType());
      assertEquals(false, stringType0.isInterface());
      assertEquals(false, stringType0.isNominalConstructor());
      assertEquals(false, stringType0.isAllType());
      assertEquals(false, stringType0.isNominalType());
      assertEquals(false, stringType0.isNullType());
      assertEquals("string", stringType0.getDisplayName());
      assertEquals(false, stringType0.isCheckedUnknownType());
      assertEquals(false, stringType0.isNoType());
      assertEquals(false, stringType0.isOrdinaryFunction());
      assertEquals(true, stringType0.matchesObjectContext());
      assertEquals(false, stringType0.isConstructor());
      assertEquals(true, stringType0.matchesStringContext());
      assertEquals(false, stringType0.isNoResolvedType());
      assertEquals(false, stringType0.isTemplateType());
      assertEquals(BooleanLiteralSet.BOTH, stringType0.getPossibleToBooleanOutcomes());
      assertEquals(true, stringType0.isStringValueType());
      assertEquals(false, stringType0.isFunctionPrototypeType());
      assertEquals(false, stringType0.isEnumType());
      assertEquals(false, stringType0.isNoObjectType());
      assertEquals(false, stringType0.isRecordType());
      assertEquals(false, stringType0.isResolved());
      assertEquals(false, stringType0.isBooleanValueType());
      assertNotNull(functionType0);
      
      functionType0.setStruct();
      assertEquals(true, stack0.empty());
      assertEquals(0, stack0.size());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertEquals(true, stack0.isEmpty());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, functionType0.isTemplateType());
      assertEquals(false, functionType0.isUnionType());
      assertEquals(false, functionType0.hasCachedValues());
      assertEquals(false, functionType0.isNominalConstructor());
      assertEquals(false, functionType0.isParameterizedType());
      assertEquals(false, functionType0.isNoType());
      assertEquals(false, functionType0.isEnumType());
      assertEquals(false, functionType0.isRecordType());
      assertEquals(true, functionType0.canBeCalled());
      assertEquals(true, functionType0.isFunctionType());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertEquals(0, functionType0.getMaxArguments());
      assertEquals(true, functionType0.isOrdinaryFunction());
      assertEquals(false, functionType0.isResolved());
      assertEquals(false, functionType0.hasInstanceType());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertEquals(false, functionType0.isNoResolvedType());
      assertEquals(false, functionType0.isVoidType());
      assertEquals(false, functionType0.isReturnTypeInferred());
      assertEquals(false, functionType0.isNumberValueType());
      assertEquals(false, functionType0.isEnumElementType());
      assertEquals(false, functionType0.isNominalType());
      assertEquals(false, functionType0.isStringValueType());
      assertEquals(false, functionType0.isInterface());
      assertEquals(false, functionType0.isAllType());
      assertEquals(false, functionType0.isNoObjectType());
      assertEquals(false, functionType0.isNullType());
      assertEquals(false, functionType0.isCheckedUnknownType());
      assertEquals(false, functionType0.isBooleanValueType());
      assertEquals(false, functionType0.isConstructor());
      assertEquals(false, functionType0.isFunctionPrototypeType());
      assertEquals(true, stringType0.matchesNumberContext());
      assertEquals(false, stringType0.isNumberValueType());
      assertEquals(false, stringType0.isFunctionType());
      assertEquals(false, stringType0.isVoidType());
      assertEquals(false, stringType0.isEnumElementType());
      assertEquals(false, stringType0.isUnionType());
      assertEquals(false, stringType0.isParameterizedType());
      assertEquals(false, stringType0.isInterface());
      assertEquals(false, stringType0.isNominalConstructor());
      assertEquals(false, stringType0.isAllType());
      assertEquals(false, stringType0.isNominalType());
      assertEquals(false, stringType0.isNullType());
      assertEquals("string", stringType0.getDisplayName());
      assertEquals(false, stringType0.isCheckedUnknownType());
      assertEquals(false, stringType0.isNoType());
      assertEquals(false, stringType0.isOrdinaryFunction());
      assertEquals(true, stringType0.matchesObjectContext());
      assertEquals(false, stringType0.isConstructor());
      assertEquals(true, stringType0.matchesStringContext());
      assertEquals(false, stringType0.isNoResolvedType());
      assertEquals(false, stringType0.isTemplateType());
      assertEquals(BooleanLiteralSet.BOTH, stringType0.getPossibleToBooleanOutcomes());
      assertEquals(true, stringType0.isStringValueType());
      assertEquals(false, stringType0.isFunctionPrototypeType());
      assertEquals(false, stringType0.isEnumType());
      assertEquals(false, stringType0.isNoObjectType());
      assertEquals(false, stringType0.isRecordType());
      assertEquals(false, stringType0.isResolved());
      assertEquals(false, stringType0.isBooleanValueType());
  }

  @Test
  public void test69()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      String string0 = "";
      boolean boolean0 = false;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0, boolean0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, string0);
      assertEquals(false, errorFunctionType0.isNumberValueType());
      assertEquals(false, errorFunctionType0.isEnumType());
      assertEquals(true, errorFunctionType0.canBeCalled());
      assertEquals(false, errorFunctionType0.isRecordType());
      assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      assertEquals(false, errorFunctionType0.isResolved());
      assertEquals(false, errorFunctionType0.isAllType());
      assertEquals(false, errorFunctionType0.isNoObjectType());
      assertEquals(true, errorFunctionType0.hasInstanceType());
      assertEquals(false, errorFunctionType0.isNullType());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertEquals(false, errorFunctionType0.isVoidType());
      assertEquals(false, errorFunctionType0.isParameterizedType());
      assertEquals(false, errorFunctionType0.isFunctionPrototypeType());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, errorFunctionType0.hasCachedValues());
      assertEquals(true, errorFunctionType0.isConstructor());
      assertEquals(false, errorFunctionType0.isReturnTypeInferred());
      assertEquals(3, errorFunctionType0.getMaxArguments());
      assertEquals(false, errorFunctionType0.isBooleanValueType());
      assertEquals(false, errorFunctionType0.isStringValueType());
      assertEquals(true, errorFunctionType0.isNominalConstructor());
      assertEquals(false, errorFunctionType0.isInterface());
      assertEquals(false, errorFunctionType0.isNominalType());
      assertEquals(false, errorFunctionType0.isNoType());
      assertEquals(false, errorFunctionType0.isEnumElementType());
      assertEquals(true, errorFunctionType0.isFunctionType());
      assertEquals(false, errorFunctionType0.isUnionType());
      assertEquals(false, errorFunctionType0.isNoResolvedType());
      assertEquals(false, errorFunctionType0.isCheckedUnknownType());
      assertEquals(false, errorFunctionType0.isTemplateType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(errorFunctionType0);
      
      int int0 = errorFunctionType0.getExtendedInterfacesCount();
      assertEquals(false, errorFunctionType0.isNumberValueType());
      assertEquals(false, errorFunctionType0.isEnumType());
      assertEquals(true, errorFunctionType0.canBeCalled());
      assertEquals(false, errorFunctionType0.isRecordType());
      assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      assertEquals(false, errorFunctionType0.isResolved());
      assertEquals(false, errorFunctionType0.isAllType());
      assertEquals(false, errorFunctionType0.isNoObjectType());
      assertEquals(true, errorFunctionType0.hasInstanceType());
      assertEquals(false, errorFunctionType0.isNullType());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertEquals(false, errorFunctionType0.isVoidType());
      assertEquals(false, errorFunctionType0.isParameterizedType());
      assertEquals(false, errorFunctionType0.isFunctionPrototypeType());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, errorFunctionType0.hasCachedValues());
      assertEquals(true, errorFunctionType0.isConstructor());
      assertEquals(false, errorFunctionType0.isReturnTypeInferred());
      assertEquals(3, errorFunctionType0.getMaxArguments());
      assertEquals(false, errorFunctionType0.isBooleanValueType());
      assertEquals(false, errorFunctionType0.isStringValueType());
      assertEquals(true, errorFunctionType0.isNominalConstructor());
      assertEquals(false, errorFunctionType0.isInterface());
      assertEquals(false, errorFunctionType0.isNominalType());
      assertEquals(false, errorFunctionType0.isNoType());
      assertEquals(false, errorFunctionType0.isEnumElementType());
      assertEquals(true, errorFunctionType0.isFunctionType());
      assertEquals(false, errorFunctionType0.isUnionType());
      assertEquals(false, errorFunctionType0.isNoResolvedType());
      assertEquals(false, errorFunctionType0.isCheckedUnknownType());
      assertEquals(false, errorFunctionType0.isTemplateType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(0, int0);
  }

  @Test
  public void test70()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      boolean boolean0 = true;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0, boolean0);
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      NoObjectType noObjectType0 = new NoObjectType(jSTypeRegistry0);
      assertEquals(true, noObjectType0.canBeCalled());
      assertEquals(BooleanLiteralSet.TRUE, noObjectType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noObjectType0.isTemplateType());
      assertEquals(false, noObjectType0.isFunctionType());
      assertEquals(false, noObjectType0.isEnumElementType());
      assertEquals(false, noObjectType0.isReturnTypeInferred());
      assertEquals(true, noObjectType0.matchesObjectContext());
      assertNull(noObjectType0.getReferenceName());
      assertEquals(false, noObjectType0.isFunctionPrototypeType());
      assertEquals(false, noObjectType0.isStringValueType());
      assertEquals(0, noObjectType0.getExtendedInterfacesCount());
      assertEquals(true, noObjectType0.isNoObjectType());
      assertEquals(false, noObjectType0.isNominalConstructor());
      assertEquals(false, noObjectType0.isOrdinaryFunction());
      assertEquals(false, noObjectType0.hasCachedValues());
      assertEquals(false, noObjectType0.isNominalType());
      assertEquals(2147483647, noObjectType0.getMaxArguments());
      assertEquals(false, noObjectType0.isRecordType());
      assertEquals(false, noObjectType0.isBooleanValueType());
      assertEquals(false, noObjectType0.isParameterizedType());
      assertEquals(false, noObjectType0.isEnumType());
      assertEquals(true, noObjectType0.isConstructor());
      assertEquals(true, noObjectType0.matchesStringContext());
      assertEquals(false, noObjectType0.isAllType());
      assertEquals(false, noObjectType0.isInterface());
      assertEquals(2147483647, noObjectType0.getPropertiesCount());
      assertEquals(false, noObjectType0.isCheckedUnknownType());
      assertEquals(false, noObjectType0.isResolved());
      assertEquals(false, noObjectType0.isUnionType());
      assertEquals(false, noObjectType0.isNoResolvedType());
      assertEquals(true, noObjectType0.hasInstanceType());
      assertEquals(true, noObjectType0.matchesNumberContext());
      assertEquals(false, noObjectType0.isNumberValueType());
      assertEquals(false, noObjectType0.isNullType());
      assertEquals(false, noObjectType0.isNoType());
      assertEquals(false, noObjectType0.isVoidType());
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(noObjectType0);
      
      boolean boolean1 = noObjectType0.isReturnTypeInferred();
      assertEquals(true, noObjectType0.canBeCalled());
      assertEquals(BooleanLiteralSet.TRUE, noObjectType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noObjectType0.isTemplateType());
      assertEquals(false, noObjectType0.isFunctionType());
      assertEquals(false, noObjectType0.isEnumElementType());
      assertEquals(false, noObjectType0.isReturnTypeInferred());
      assertEquals(true, noObjectType0.matchesObjectContext());
      assertNull(noObjectType0.getReferenceName());
      assertEquals(false, noObjectType0.isFunctionPrototypeType());
      assertEquals(false, noObjectType0.isStringValueType());
      assertEquals(0, noObjectType0.getExtendedInterfacesCount());
      assertEquals(true, noObjectType0.isNoObjectType());
      assertEquals(false, noObjectType0.isNominalConstructor());
      assertEquals(false, noObjectType0.isOrdinaryFunction());
      assertEquals(false, noObjectType0.hasCachedValues());
      assertEquals(false, noObjectType0.isNominalType());
      assertEquals(2147483647, noObjectType0.getMaxArguments());
      assertEquals(false, noObjectType0.isRecordType());
      assertEquals(false, noObjectType0.isBooleanValueType());
      assertEquals(false, noObjectType0.isParameterizedType());
      assertEquals(false, noObjectType0.isEnumType());
      assertEquals(true, noObjectType0.isConstructor());
      assertEquals(true, noObjectType0.matchesStringContext());
      assertEquals(false, noObjectType0.isAllType());
      assertEquals(false, noObjectType0.isInterface());
      assertEquals(2147483647, noObjectType0.getPropertiesCount());
      assertEquals(false, noObjectType0.isCheckedUnknownType());
      assertEquals(false, noObjectType0.isResolved());
      assertEquals(false, noObjectType0.isUnionType());
      assertEquals(false, noObjectType0.isNoResolvedType());
      assertEquals(true, noObjectType0.hasInstanceType());
      assertEquals(true, noObjectType0.matchesNumberContext());
      assertEquals(false, noObjectType0.isNumberValueType());
      assertEquals(false, noObjectType0.isNullType());
      assertEquals(false, noObjectType0.isNoType());
      assertEquals(false, noObjectType0.isVoidType());
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(boolean1);
      assertFalse(boolean0 == boolean1);
      assertFalse(boolean1 == boolean0);
  }

  @Test
  public void test71()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      String string0 = "";
      boolean boolean0 = false;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0, boolean0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, string0);
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertEquals(false, errorFunctionType0.isNoType());
      assertEquals(true, errorFunctionType0.canBeCalled());
      assertEquals(false, errorFunctionType0.isInterface());
      assertEquals(false, errorFunctionType0.isAllType());
      assertEquals(true, errorFunctionType0.isConstructor());
      assertEquals(false, errorFunctionType0.isNumberValueType());
      assertEquals(3, errorFunctionType0.getMaxArguments());
      assertEquals(false, errorFunctionType0.isStringValueType());
      assertEquals(false, errorFunctionType0.isFunctionPrototypeType());
      assertEquals(false, errorFunctionType0.isNominalType());
      assertEquals(true, errorFunctionType0.hasInstanceType());
      assertEquals(false, errorFunctionType0.isCheckedUnknownType());
      assertEquals(false, errorFunctionType0.isParameterizedType());
      assertEquals(true, errorFunctionType0.isFunctionType());
      assertEquals(false, errorFunctionType0.isResolved());
      assertEquals(false, errorFunctionType0.isBooleanValueType());
      assertEquals(false, errorFunctionType0.isTemplateType());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, errorFunctionType0.isNoObjectType());
      assertEquals(false, errorFunctionType0.isVoidType());
      assertEquals(false, errorFunctionType0.isNoResolvedType());
      assertEquals(false, errorFunctionType0.isReturnTypeInferred());
      assertEquals(false, errorFunctionType0.isEnumElementType());
      assertEquals(false, errorFunctionType0.isEnumType());
      assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      assertEquals(true, errorFunctionType0.isNominalConstructor());
      assertEquals(false, errorFunctionType0.isUnionType());
      assertEquals(false, errorFunctionType0.hasCachedValues());
      assertEquals(false, errorFunctionType0.isRecordType());
      assertEquals(false, errorFunctionType0.isNullType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(errorFunctionType0);
      
      boolean boolean1 = errorFunctionType0.canBeCalled();
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertEquals(false, errorFunctionType0.isNoType());
      assertEquals(true, errorFunctionType0.canBeCalled());
      assertEquals(false, errorFunctionType0.isInterface());
      assertEquals(false, errorFunctionType0.isAllType());
      assertEquals(true, errorFunctionType0.isConstructor());
      assertEquals(false, errorFunctionType0.isNumberValueType());
      assertEquals(3, errorFunctionType0.getMaxArguments());
      assertEquals(false, errorFunctionType0.isStringValueType());
      assertEquals(false, errorFunctionType0.isFunctionPrototypeType());
      assertEquals(false, errorFunctionType0.isNominalType());
      assertEquals(true, errorFunctionType0.hasInstanceType());
      assertEquals(false, errorFunctionType0.isCheckedUnknownType());
      assertEquals(false, errorFunctionType0.isParameterizedType());
      assertEquals(true, errorFunctionType0.isFunctionType());
      assertEquals(false, errorFunctionType0.isResolved());
      assertEquals(false, errorFunctionType0.isBooleanValueType());
      assertEquals(false, errorFunctionType0.isTemplateType());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, errorFunctionType0.isNoObjectType());
      assertEquals(false, errorFunctionType0.isVoidType());
      assertEquals(false, errorFunctionType0.isNoResolvedType());
      assertEquals(false, errorFunctionType0.isReturnTypeInferred());
      assertEquals(false, errorFunctionType0.isEnumElementType());
      assertEquals(false, errorFunctionType0.isEnumType());
      assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      assertEquals(true, errorFunctionType0.isNominalConstructor());
      assertEquals(false, errorFunctionType0.isUnionType());
      assertEquals(false, errorFunctionType0.hasCachedValues());
      assertEquals(false, errorFunctionType0.isRecordType());
      assertEquals(false, errorFunctionType0.isNullType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertTrue(boolean1);
      assertFalse(boolean0 == boolean1);
      assertFalse(boolean1 == boolean0);
  }

  @Test
  public void test72()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      boolean boolean0 = false;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0, boolean0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      String string0 = ":yLTc+cK.&yC";
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, string0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, errorFunctionType0.isEnumType());
      assertEquals(3, errorFunctionType0.getMaxArguments());
      assertEquals(false, errorFunctionType0.isStringValueType());
      assertEquals(false, errorFunctionType0.isNominalType());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertEquals(false, errorFunctionType0.isNullType());
      assertEquals(false, errorFunctionType0.isResolved());
      assertEquals(false, errorFunctionType0.isEnumElementType());
      assertEquals(false, errorFunctionType0.isNoResolvedType());
      assertEquals(true, errorFunctionType0.isConstructor());
      assertEquals(false, errorFunctionType0.isNoType());
      assertEquals(false, errorFunctionType0.hasCachedValues());
      assertEquals(false, errorFunctionType0.isNoObjectType());
      assertEquals(false, errorFunctionType0.isParameterizedType());
      assertEquals(false, errorFunctionType0.isNumberValueType());
      assertEquals(true, errorFunctionType0.canBeCalled());
      assertEquals(true, errorFunctionType0.isNominalConstructor());
      assertEquals(false, errorFunctionType0.isVoidType());
      assertEquals(false, errorFunctionType0.isInterface());
      assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      assertEquals(false, errorFunctionType0.isFunctionPrototypeType());
      assertEquals(false, errorFunctionType0.isCheckedUnknownType());
      assertEquals(false, errorFunctionType0.isAllType());
      assertEquals(false, errorFunctionType0.isReturnTypeInferred());
      assertEquals(true, errorFunctionType0.isFunctionType());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertEquals(true, errorFunctionType0.hasInstanceType());
      assertEquals(false, errorFunctionType0.isRecordType());
      assertEquals(false, errorFunctionType0.isTemplateType());
      assertEquals(false, errorFunctionType0.isUnionType());
      assertEquals(false, errorFunctionType0.isBooleanValueType());
      assertNotNull(errorFunctionType0);
      
      FunctionType functionType0 = jSTypeRegistry0.createFunctionTypeWithNewThisType((FunctionType) errorFunctionType0, (ObjectType) errorFunctionType0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, functionType0.isRecordType());
      assertEquals(false, functionType0.isParameterizedType());
      assertEquals(true, functionType0.isNominalConstructor());
      assertEquals(false, functionType0.isNumberValueType());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertEquals(true, functionType0.hasInstanceType());
      assertEquals(false, functionType0.isOrdinaryFunction());
      assertEquals(false, functionType0.isResolved());
      assertEquals(false, functionType0.isCheckedUnknownType());
      assertEquals(false, functionType0.isInterface());
      assertEquals(true, functionType0.isConstructor());
      assertEquals(3, functionType0.getMaxArguments());
      assertEquals(false, functionType0.isUnionType());
      assertEquals(false, functionType0.isAllType());
      assertEquals(false, functionType0.isBooleanValueType());
      assertEquals(true, functionType0.canBeCalled());
      assertEquals(true, functionType0.isFunctionType());
      assertEquals(false, functionType0.isNoResolvedType());
      assertEquals(false, functionType0.isFunctionPrototypeType());
      assertEquals(false, functionType0.isEnumType());
      assertEquals(false, functionType0.isEnumElementType());
      assertEquals(false, functionType0.isReturnTypeInferred());
      assertEquals(false, functionType0.hasCachedValues());
      assertEquals(false, functionType0.isNominalType());
      assertEquals(false, functionType0.isNoObjectType());
      assertEquals(false, functionType0.isNullType());
      assertEquals(false, functionType0.isStringValueType());
      assertEquals(false, functionType0.isVoidType());
      assertEquals(false, functionType0.isNoType());
      assertEquals(false, functionType0.isTemplateType());
      assertEquals(false, errorFunctionType0.isEnumType());
      assertEquals(3, errorFunctionType0.getMaxArguments());
      assertEquals(false, errorFunctionType0.isStringValueType());
      assertEquals(false, errorFunctionType0.isNominalType());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertEquals(false, errorFunctionType0.isNullType());
      assertEquals(false, errorFunctionType0.isResolved());
      assertEquals(false, errorFunctionType0.isEnumElementType());
      assertEquals(false, errorFunctionType0.isNoResolvedType());
      assertEquals(true, errorFunctionType0.isConstructor());
      assertEquals(false, errorFunctionType0.isNoType());
      assertEquals(false, errorFunctionType0.hasCachedValues());
      assertEquals(false, errorFunctionType0.isNoObjectType());
      assertEquals(false, errorFunctionType0.isParameterizedType());
      assertEquals(false, errorFunctionType0.isNumberValueType());
      assertEquals(true, errorFunctionType0.canBeCalled());
      assertEquals(true, errorFunctionType0.isNominalConstructor());
      assertEquals(false, errorFunctionType0.isVoidType());
      assertEquals(false, errorFunctionType0.isInterface());
      assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      assertEquals(false, errorFunctionType0.isFunctionPrototypeType());
      assertEquals(false, errorFunctionType0.isCheckedUnknownType());
      assertEquals(false, errorFunctionType0.isAllType());
      assertEquals(false, errorFunctionType0.isReturnTypeInferred());
      assertEquals(true, errorFunctionType0.isFunctionType());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertEquals(true, errorFunctionType0.hasInstanceType());
      assertEquals(false, errorFunctionType0.isRecordType());
      assertEquals(false, errorFunctionType0.isTemplateType());
      assertEquals(false, errorFunctionType0.isUnionType());
      assertEquals(false, errorFunctionType0.isBooleanValueType());
      assertNotNull(functionType0);
  }

  @Test
  public void test73()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      String string0 = "";
      boolean boolean0 = false;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0, boolean0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, string0);
      assertEquals(false, errorFunctionType0.isStringValueType());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertEquals(false, errorFunctionType0.isReturnTypeInferred());
      assertEquals(true, errorFunctionType0.isFunctionType());
      assertEquals(true, errorFunctionType0.canBeCalled());
      assertEquals(false, errorFunctionType0.isBooleanValueType());
      assertEquals(false, errorFunctionType0.isCheckedUnknownType());
      assertEquals(false, errorFunctionType0.isEnumType());
      assertEquals(false, errorFunctionType0.isEnumElementType());
      assertEquals(false, errorFunctionType0.isRecordType());
      assertEquals(true, errorFunctionType0.hasInstanceType());
      assertEquals(false, errorFunctionType0.isNoResolvedType());
      assertEquals(true, errorFunctionType0.isConstructor());
      assertEquals(false, errorFunctionType0.isNoType());
      assertEquals(false, errorFunctionType0.isFunctionPrototypeType());
      assertEquals(false, errorFunctionType0.isNumberValueType());
      assertEquals(false, errorFunctionType0.isNominalType());
      assertEquals(false, errorFunctionType0.isUnionType());
      assertEquals(false, errorFunctionType0.isAllType());
      assertEquals(false, errorFunctionType0.isNullType());
      assertEquals(3, errorFunctionType0.getMaxArguments());
      assertEquals(false, errorFunctionType0.isTemplateType());
      assertEquals(false, errorFunctionType0.isVoidType());
      assertEquals(false, errorFunctionType0.isNoObjectType());
      assertEquals(false, errorFunctionType0.isResolved());
      assertEquals(false, errorFunctionType0.isInterface());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertEquals(true, errorFunctionType0.isNominalConstructor());
      assertEquals(false, errorFunctionType0.hasCachedValues());
      assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      assertEquals(false, errorFunctionType0.isParameterizedType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(errorFunctionType0);
      
      List<FunctionType> list0 = errorFunctionType0.getSubTypes();
      assertEquals(false, errorFunctionType0.isStringValueType());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertEquals(false, errorFunctionType0.isReturnTypeInferred());
      assertEquals(true, errorFunctionType0.isFunctionType());
      assertEquals(true, errorFunctionType0.canBeCalled());
      assertEquals(false, errorFunctionType0.isBooleanValueType());
      assertEquals(false, errorFunctionType0.isCheckedUnknownType());
      assertEquals(false, errorFunctionType0.isEnumType());
      assertEquals(false, errorFunctionType0.isEnumElementType());
      assertEquals(false, errorFunctionType0.isRecordType());
      assertEquals(true, errorFunctionType0.hasInstanceType());
      assertEquals(false, errorFunctionType0.isNoResolvedType());
      assertEquals(true, errorFunctionType0.isConstructor());
      assertEquals(false, errorFunctionType0.isNoType());
      assertEquals(false, errorFunctionType0.isFunctionPrototypeType());
      assertEquals(false, errorFunctionType0.isNumberValueType());
      assertEquals(false, errorFunctionType0.isNominalType());
      assertEquals(false, errorFunctionType0.isUnionType());
      assertEquals(false, errorFunctionType0.isAllType());
      assertEquals(false, errorFunctionType0.isNullType());
      assertEquals(3, errorFunctionType0.getMaxArguments());
      assertEquals(false, errorFunctionType0.isTemplateType());
      assertEquals(false, errorFunctionType0.isVoidType());
      assertEquals(false, errorFunctionType0.isNoObjectType());
      assertEquals(false, errorFunctionType0.isResolved());
      assertEquals(false, errorFunctionType0.isInterface());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertEquals(true, errorFunctionType0.isNominalConstructor());
      assertEquals(false, errorFunctionType0.hasCachedValues());
      assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      assertEquals(false, errorFunctionType0.isParameterizedType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNull(list0);
  }
}
