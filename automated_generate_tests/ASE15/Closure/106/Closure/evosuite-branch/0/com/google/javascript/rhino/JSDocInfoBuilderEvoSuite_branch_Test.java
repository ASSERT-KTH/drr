/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 19:13:33 GMT 2014
 */

package com.google.javascript.rhino;

import static org.junit.Assert.*;
import org.junit.Test;
import com.google.javascript.rhino.ErrorReporter;
import com.google.javascript.rhino.JSDocInfo;
import com.google.javascript.rhino.JSDocInfoBuilder;
import com.google.javascript.rhino.JSTypeExpression;
import com.google.javascript.rhino.Node;
import com.google.javascript.rhino.SimpleErrorReporter;
import com.google.javascript.rhino.jstype.JSTypeRegistry;
import java.util.Locale;
import java.util.Set;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;

import org.junit.runner.RunWith;


public class JSDocInfoBuilderEvoSuite_branch_Test  {

  @Test
  public void test00()  throws Throwable  {
      boolean boolean0 = true;
      JSDocInfoBuilder jSDocInfoBuilder0 = new JSDocInfoBuilder(boolean0);
      assertEquals(false, jSDocInfoBuilder0.isConstructorRecorded());
      assertEquals(false, jSDocInfoBuilder0.isInterfaceRecorded());
      assertEquals(false, jSDocInfoBuilder0.isDescriptionRecorded());
      assertEquals(false, jSDocInfoBuilder0.isPopulated());
      assertEquals(false, jSDocInfoBuilder0.isPopulatedWithFileOverview());
      assertNotNull(jSDocInfoBuilder0);
      
      String string0 = "";
      int int0 = (-5);
      Node node0 = new Node(int0, int0, int0);
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(-1, node0.getCharno());
      assertEquals(-5, node0.getType());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertNotNull(node0);
      
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      
      JSTypeExpression jSTypeExpression0 = new JSTypeExpression(node0, string0, jSTypeRegistry0);
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(-1, node0.getCharno());
      assertEquals(-5, node0.getType());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, jSTypeExpression0.isVarArgs());
      assertEquals(false, jSTypeExpression0.isOptionalArg());
      assertNotNull(jSTypeExpression0);
      
      boolean boolean1 = jSDocInfoBuilder0.recordEnumParameterType(jSTypeExpression0);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean0 == boolean1);
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(-1, node0.getCharno());
      assertEquals(-5, node0.getType());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, jSDocInfoBuilder0.isConstructorRecorded());
      assertEquals(false, jSDocInfoBuilder0.isInterfaceRecorded());
      assertEquals(false, jSDocInfoBuilder0.isDescriptionRecorded());
      assertEquals(true, jSDocInfoBuilder0.isPopulated());
      assertEquals(false, jSDocInfoBuilder0.isPopulatedWithFileOverview());
      assertEquals(false, jSTypeExpression0.isVarArgs());
      assertEquals(false, jSTypeExpression0.isOptionalArg());
      assertTrue(boolean1);
      
      boolean boolean2 = jSDocInfoBuilder0.recordEnumParameterType(jSTypeExpression0);
      assertFalse(boolean0 == boolean2);
      assertTrue(boolean0 == boolean1);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(-1, node0.getCharno());
      assertEquals(-5, node0.getType());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, jSDocInfoBuilder0.isConstructorRecorded());
      assertEquals(false, jSDocInfoBuilder0.isInterfaceRecorded());
      assertEquals(false, jSDocInfoBuilder0.isDescriptionRecorded());
      assertEquals(true, jSDocInfoBuilder0.isPopulated());
      assertEquals(false, jSDocInfoBuilder0.isPopulatedWithFileOverview());
      assertEquals(false, jSTypeExpression0.isVarArgs());
      assertEquals(false, jSTypeExpression0.isOptionalArg());
      assertFalse(boolean2);
  }

  @Test
  public void test01()  throws Throwable  {
      boolean boolean0 = true;
      JSDocInfoBuilder jSDocInfoBuilder0 = new JSDocInfoBuilder(boolean0);
      assertEquals(false, jSDocInfoBuilder0.isInterfaceRecorded());
      assertEquals(false, jSDocInfoBuilder0.isPopulatedWithFileOverview());
      assertEquals(false, jSDocInfoBuilder0.isConstructorRecorded());
      assertEquals(false, jSDocInfoBuilder0.isPopulated());
      assertEquals(false, jSDocInfoBuilder0.isDescriptionRecorded());
      assertNotNull(jSDocInfoBuilder0);
      
      String string0 = "3";
      int int0 = 2222;
      Node node0 = Node.newNumber((double) int0, int0, int0);
      assertEquals(false, node0.isVarArgs());
      assertEquals(2222, node0.getLineno());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(39, node0.getType());
      assertEquals(false, node0.isQuotedString());
      assertEquals(2222, node0.getCharno());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertNotNull(node0);
      
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      
      JSTypeExpression jSTypeExpression0 = new JSTypeExpression(node0, string0, jSTypeRegistry0);
      assertEquals(false, jSTypeExpression0.isOptionalArg());
      assertEquals(false, jSTypeExpression0.isVarArgs());
      assertEquals(false, node0.isVarArgs());
      assertEquals(2222, node0.getLineno());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(39, node0.getType());
      assertEquals(false, node0.isQuotedString());
      assertEquals(2222, node0.getCharno());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertNotNull(jSTypeExpression0);
      
      boolean boolean1 = jSDocInfoBuilder0.recordThisType(jSTypeExpression0);
      assertTrue(boolean0 == boolean1);
      assertTrue(boolean1 == boolean0);
      assertEquals(false, jSTypeExpression0.isOptionalArg());
      assertEquals(false, jSTypeExpression0.isVarArgs());
      assertEquals(false, jSDocInfoBuilder0.isInterfaceRecorded());
      assertEquals(false, jSDocInfoBuilder0.isPopulatedWithFileOverview());
      assertEquals(false, jSDocInfoBuilder0.isConstructorRecorded());
      assertEquals(false, jSDocInfoBuilder0.isDescriptionRecorded());
      assertEquals(true, jSDocInfoBuilder0.isPopulated());
      assertEquals(false, node0.isVarArgs());
      assertEquals(2222, node0.getLineno());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(39, node0.getType());
      assertEquals(false, node0.isQuotedString());
      assertEquals(2222, node0.getCharno());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertTrue(boolean1);
      
      boolean boolean2 = jSDocInfoBuilder0.recordDefineType(jSTypeExpression0);
      assertFalse(boolean0 == boolean2);
      assertTrue(boolean0 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertEquals(false, jSTypeExpression0.isOptionalArg());
      assertEquals(false, jSTypeExpression0.isVarArgs());
      assertEquals(false, jSDocInfoBuilder0.isInterfaceRecorded());
      assertEquals(false, jSDocInfoBuilder0.isPopulatedWithFileOverview());
      assertEquals(false, jSDocInfoBuilder0.isConstructorRecorded());
      assertEquals(false, jSDocInfoBuilder0.isDescriptionRecorded());
      assertEquals(true, jSDocInfoBuilder0.isPopulated());
      assertEquals(false, node0.isVarArgs());
      assertEquals(2222, node0.getLineno());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(39, node0.getType());
      assertEquals(false, node0.isQuotedString());
      assertEquals(2222, node0.getCharno());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertFalse(boolean2);
  }

  @Test
  public void test02()  throws Throwable  {
      boolean boolean0 = false;
      JSDocInfoBuilder jSDocInfoBuilder0 = new JSDocInfoBuilder(boolean0);
      assertEquals(false, jSDocInfoBuilder0.isDescriptionRecorded());
      assertEquals(false, jSDocInfoBuilder0.isInterfaceRecorded());
      assertEquals(false, jSDocInfoBuilder0.isConstructorRecorded());
      assertEquals(false, jSDocInfoBuilder0.isPopulated());
      assertEquals(false, jSDocInfoBuilder0.isPopulatedWithFileOverview());
      assertNotNull(jSDocInfoBuilder0);
      
      int int0 = (-228);
      String string0 = "s;(mC*";
      Node node0 = Node.newString(int0, string0, int0, int0);
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isQuotedString());
      assertEquals(-1, node0.getCharno());
      assertEquals(-228, node0.getType());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.hasOneChild());
      assertNotNull(node0);
      
      JSTypeRegistry jSTypeRegistry0 = null;
      JSTypeExpression jSTypeExpression0 = new JSTypeExpression(node0, string0, jSTypeRegistry0);
      assertEquals(false, jSTypeExpression0.isVarArgs());
      assertEquals(false, jSTypeExpression0.isOptionalArg());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isQuotedString());
      assertEquals(-1, node0.getCharno());
      assertEquals(-228, node0.getType());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.hasOneChild());
      assertNotNull(jSTypeExpression0);
      
      boolean boolean1 = jSDocInfoBuilder0.recordBaseType(jSTypeExpression0);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean0 == boolean1);
      assertEquals(false, jSTypeExpression0.isVarArgs());
      assertEquals(false, jSTypeExpression0.isOptionalArg());
      assertEquals(false, jSDocInfoBuilder0.isDescriptionRecorded());
      assertEquals(false, jSDocInfoBuilder0.isInterfaceRecorded());
      assertEquals(true, jSDocInfoBuilder0.isPopulated());
      assertEquals(false, jSDocInfoBuilder0.isConstructorRecorded());
      assertEquals(false, jSDocInfoBuilder0.isPopulatedWithFileOverview());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isQuotedString());
      assertEquals(-1, node0.getCharno());
      assertEquals(-228, node0.getType());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.hasOneChild());
      assertTrue(boolean1);
      
      boolean boolean2 = jSDocInfoBuilder0.recordDefineType(jSTypeExpression0);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean0 == boolean1);
      assertTrue(boolean0 == boolean2);
      assertEquals(false, jSTypeExpression0.isVarArgs());
      assertEquals(false, jSTypeExpression0.isOptionalArg());
      assertEquals(false, jSDocInfoBuilder0.isDescriptionRecorded());
      assertEquals(false, jSDocInfoBuilder0.isInterfaceRecorded());
      assertEquals(true, jSDocInfoBuilder0.isPopulated());
      assertEquals(false, jSDocInfoBuilder0.isConstructorRecorded());
      assertEquals(false, jSDocInfoBuilder0.isPopulatedWithFileOverview());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isQuotedString());
      assertEquals(-1, node0.getCharno());
      assertEquals(-228, node0.getType());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.hasOneChild());
      assertFalse(boolean2);
  }

  @Test
  public void test03()  throws Throwable  {
      boolean boolean0 = true;
      JSDocInfoBuilder jSDocInfoBuilder0 = new JSDocInfoBuilder(boolean0);
      assertEquals(false, jSDocInfoBuilder0.isPopulated());
      assertEquals(false, jSDocInfoBuilder0.isPopulatedWithFileOverview());
      assertEquals(false, jSDocInfoBuilder0.isConstructorRecorded());
      assertEquals(false, jSDocInfoBuilder0.isDescriptionRecorded());
      assertEquals(false, jSDocInfoBuilder0.isInterfaceRecorded());
      assertNotNull(jSDocInfoBuilder0);
      
      String string0 = "NUMBER_OBJECT_TYPE";
      Node node0 = null;
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      
      JSTypeExpression jSTypeExpression0 = new JSTypeExpression(node0, string0, jSTypeRegistry0);
      assertNotNull(jSTypeExpression0);
      
      boolean boolean1 = jSDocInfoBuilder0.recordReturnType(jSTypeExpression0);
      assertTrue(boolean0 == boolean1);
      assertTrue(boolean1 == boolean0);
      assertEquals(false, jSDocInfoBuilder0.isPopulatedWithFileOverview());
      assertEquals(false, jSDocInfoBuilder0.isConstructorRecorded());
      assertEquals(false, jSDocInfoBuilder0.isDescriptionRecorded());
      assertEquals(false, jSDocInfoBuilder0.isInterfaceRecorded());
      assertEquals(true, jSDocInfoBuilder0.isPopulated());
      assertTrue(boolean1);
      
      boolean boolean2 = jSDocInfoBuilder0.recordDefineType(jSTypeExpression0);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean0 == boolean2);
      assertTrue(boolean0 == boolean1);
      assertEquals(false, jSDocInfoBuilder0.isPopulatedWithFileOverview());
      assertEquals(false, jSDocInfoBuilder0.isConstructorRecorded());
      assertEquals(false, jSDocInfoBuilder0.isDescriptionRecorded());
      assertEquals(false, jSDocInfoBuilder0.isInterfaceRecorded());
      assertEquals(true, jSDocInfoBuilder0.isPopulated());
      assertFalse(boolean2);
  }

  @Test
  public void test04()  throws Throwable  {
      boolean boolean0 = true;
      JSDocInfoBuilder jSDocInfoBuilder0 = new JSDocInfoBuilder(boolean0);
      assertEquals(false, jSDocInfoBuilder0.isDescriptionRecorded());
      assertEquals(false, jSDocInfoBuilder0.isInterfaceRecorded());
      assertEquals(false, jSDocInfoBuilder0.isConstructorRecorded());
      assertEquals(false, jSDocInfoBuilder0.isPopulated());
      assertEquals(false, jSDocInfoBuilder0.isPopulatedWithFileOverview());
      assertNotNull(jSDocInfoBuilder0);
      
      String string0 = "NUMBER_OBJECT_TYPE";
      boolean boolean1 = jSDocInfoBuilder0.recordInterface();
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean0 == boolean1);
      assertEquals(true, jSDocInfoBuilder0.isPopulated());
      assertEquals(false, jSDocInfoBuilder0.isDescriptionRecorded());
      assertEquals(false, jSDocInfoBuilder0.isConstructorRecorded());
      assertEquals(true, jSDocInfoBuilder0.isInterfaceRecorded());
      assertEquals(false, jSDocInfoBuilder0.isPopulatedWithFileOverview());
      assertTrue(boolean1);
      
      Node node0 = null;
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      
      JSTypeExpression jSTypeExpression0 = new JSTypeExpression(node0, string0, jSTypeRegistry0);
      assertNotNull(jSTypeExpression0);
      
      boolean boolean2 = jSDocInfoBuilder0.recordEnumParameterType(jSTypeExpression0);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean0 == boolean2);
      assertTrue(boolean0 == boolean1);
      assertEquals(true, jSDocInfoBuilder0.isPopulated());
      assertEquals(false, jSDocInfoBuilder0.isDescriptionRecorded());
      assertEquals(false, jSDocInfoBuilder0.isConstructorRecorded());
      assertEquals(true, jSDocInfoBuilder0.isInterfaceRecorded());
      assertEquals(false, jSDocInfoBuilder0.isPopulatedWithFileOverview());
      assertFalse(boolean2);
  }

  @Test
  public void test05()  throws Throwable  {
      boolean boolean0 = false;
      JSDocInfoBuilder jSDocInfoBuilder0 = new JSDocInfoBuilder(boolean0);
      assertEquals(false, jSDocInfoBuilder0.isPopulatedWithFileOverview());
      assertEquals(false, jSDocInfoBuilder0.isConstructorRecorded());
      assertEquals(false, jSDocInfoBuilder0.isPopulated());
      assertEquals(false, jSDocInfoBuilder0.isInterfaceRecorded());
      assertEquals(false, jSDocInfoBuilder0.isDescriptionRecorded());
      assertNotNull(jSDocInfoBuilder0);
      
      JSTypeExpression jSTypeExpression0 = null;
      boolean boolean1 = jSDocInfoBuilder0.recordImplementedInterface(jSTypeExpression0);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean0 == boolean1);
      assertEquals(false, jSDocInfoBuilder0.isPopulatedWithFileOverview());
      assertEquals(false, jSDocInfoBuilder0.isConstructorRecorded());
      assertEquals(false, jSDocInfoBuilder0.isInterfaceRecorded());
      assertEquals(true, jSDocInfoBuilder0.isPopulated());
      assertEquals(false, jSDocInfoBuilder0.isDescriptionRecorded());
      assertTrue(boolean1);
      
      boolean boolean2 = jSDocInfoBuilder0.recordImplementedInterface(jSTypeExpression0);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean0 == boolean1);
      assertTrue(boolean0 == boolean2);
      assertEquals(false, jSDocInfoBuilder0.isPopulatedWithFileOverview());
      assertEquals(false, jSDocInfoBuilder0.isConstructorRecorded());
      assertEquals(false, jSDocInfoBuilder0.isInterfaceRecorded());
      assertEquals(true, jSDocInfoBuilder0.isPopulated());
      assertEquals(false, jSDocInfoBuilder0.isDescriptionRecorded());
      assertFalse(boolean2);
  }

  @Test
  public void test06()  throws Throwable  {
      boolean boolean0 = true;
      JSDocInfoBuilder jSDocInfoBuilder0 = new JSDocInfoBuilder(boolean0);
      assertEquals(false, jSDocInfoBuilder0.isDescriptionRecorded());
      assertEquals(false, jSDocInfoBuilder0.isPopulated());
      assertEquals(false, jSDocInfoBuilder0.isConstructorRecorded());
      assertEquals(false, jSDocInfoBuilder0.isInterfaceRecorded());
      assertEquals(false, jSDocInfoBuilder0.isPopulatedWithFileOverview());
      assertNotNull(jSDocInfoBuilder0);
      
      boolean boolean1 = jSDocInfoBuilder0.recordNoSideEffects();
      assertTrue(boolean0 == boolean1);
      assertTrue(boolean1 == boolean0);
      assertEquals(false, jSDocInfoBuilder0.isDescriptionRecorded());
      assertEquals(false, jSDocInfoBuilder0.isConstructorRecorded());
      assertEquals(true, jSDocInfoBuilder0.isPopulated());
      assertEquals(false, jSDocInfoBuilder0.isInterfaceRecorded());
      assertEquals(false, jSDocInfoBuilder0.isPopulatedWithFileOverview());
      assertTrue(boolean1);
      
      boolean boolean2 = jSDocInfoBuilder0.recordNoSideEffects();
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean0 == boolean1);
      assertFalse(boolean0 == boolean2);
      assertEquals(false, jSDocInfoBuilder0.isDescriptionRecorded());
      assertEquals(false, jSDocInfoBuilder0.isConstructorRecorded());
      assertEquals(true, jSDocInfoBuilder0.isPopulated());
      assertEquals(false, jSDocInfoBuilder0.isInterfaceRecorded());
      assertEquals(false, jSDocInfoBuilder0.isPopulatedWithFileOverview());
      assertFalse(boolean2);
  }

  @Test
  public void test07()  throws Throwable  {
      boolean boolean0 = true;
      JSDocInfoBuilder jSDocInfoBuilder0 = new JSDocInfoBuilder(boolean0);
      assertEquals(false, jSDocInfoBuilder0.isPopulatedWithFileOverview());
      assertEquals(false, jSDocInfoBuilder0.isPopulated());
      assertEquals(false, jSDocInfoBuilder0.isDescriptionRecorded());
      assertEquals(false, jSDocInfoBuilder0.isConstructorRecorded());
      assertEquals(false, jSDocInfoBuilder0.isInterfaceRecorded());
      assertNotNull(jSDocInfoBuilder0);
      
      boolean boolean1 = jSDocInfoBuilder0.recordImplicitCast();
      assertTrue(boolean0 == boolean1);
      assertTrue(boolean1 == boolean0);
      assertEquals(false, jSDocInfoBuilder0.isPopulatedWithFileOverview());
      assertEquals(true, jSDocInfoBuilder0.isPopulated());
      assertEquals(false, jSDocInfoBuilder0.isDescriptionRecorded());
      assertEquals(false, jSDocInfoBuilder0.isConstructorRecorded());
      assertEquals(false, jSDocInfoBuilder0.isInterfaceRecorded());
      assertTrue(boolean1);
      
      boolean boolean2 = jSDocInfoBuilder0.recordImplicitCast();
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean0 == boolean1);
      assertFalse(boolean0 == boolean2);
      assertEquals(false, jSDocInfoBuilder0.isPopulatedWithFileOverview());
      assertEquals(true, jSDocInfoBuilder0.isPopulated());
      assertEquals(false, jSDocInfoBuilder0.isDescriptionRecorded());
      assertEquals(false, jSDocInfoBuilder0.isConstructorRecorded());
      assertEquals(false, jSDocInfoBuilder0.isInterfaceRecorded());
      assertFalse(boolean2);
  }

  @Test
  public void test08()  throws Throwable  {
      boolean boolean0 = true;
      JSDocInfoBuilder jSDocInfoBuilder0 = new JSDocInfoBuilder(boolean0);
      assertEquals(false, jSDocInfoBuilder0.isPopulated());
      assertEquals(false, jSDocInfoBuilder0.isInterfaceRecorded());
      assertEquals(false, jSDocInfoBuilder0.isConstructorRecorded());
      assertEquals(false, jSDocInfoBuilder0.isDescriptionRecorded());
      assertEquals(false, jSDocInfoBuilder0.isPopulatedWithFileOverview());
      assertNotNull(jSDocInfoBuilder0);
      
      boolean boolean1 = jSDocInfoBuilder0.recordNoShadow();
      assertTrue(boolean0 == boolean1);
      assertTrue(boolean1 == boolean0);
      assertEquals(false, jSDocInfoBuilder0.isInterfaceRecorded());
      assertEquals(true, jSDocInfoBuilder0.isPopulated());
      assertEquals(false, jSDocInfoBuilder0.isConstructorRecorded());
      assertEquals(false, jSDocInfoBuilder0.isDescriptionRecorded());
      assertEquals(false, jSDocInfoBuilder0.isPopulatedWithFileOverview());
      assertTrue(boolean1);
      
      boolean boolean2 = jSDocInfoBuilder0.recordNoShadow();
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean0 == boolean1);
      assertFalse(boolean0 == boolean2);
      assertEquals(false, jSDocInfoBuilder0.isInterfaceRecorded());
      assertEquals(true, jSDocInfoBuilder0.isPopulated());
      assertEquals(false, jSDocInfoBuilder0.isConstructorRecorded());
      assertEquals(false, jSDocInfoBuilder0.isDescriptionRecorded());
      assertEquals(false, jSDocInfoBuilder0.isPopulatedWithFileOverview());
      assertFalse(boolean2);
  }

  @Test
  public void test09()  throws Throwable  {
      boolean boolean0 = false;
      JSDocInfoBuilder jSDocInfoBuilder0 = new JSDocInfoBuilder(boolean0);
      assertEquals(false, jSDocInfoBuilder0.isDescriptionRecorded());
      assertEquals(false, jSDocInfoBuilder0.isConstructorRecorded());
      assertEquals(false, jSDocInfoBuilder0.isInterfaceRecorded());
      assertEquals(false, jSDocInfoBuilder0.isPopulated());
      assertEquals(false, jSDocInfoBuilder0.isPopulatedWithFileOverview());
      assertNotNull(jSDocInfoBuilder0);
      
      boolean boolean1 = jSDocInfoBuilder0.recordExport();
      assertFalse(boolean0 == boolean1);
      assertFalse(boolean1 == boolean0);
      assertEquals(false, jSDocInfoBuilder0.isDescriptionRecorded());
      assertEquals(true, jSDocInfoBuilder0.isPopulated());
      assertEquals(false, jSDocInfoBuilder0.isConstructorRecorded());
      assertEquals(false, jSDocInfoBuilder0.isInterfaceRecorded());
      assertEquals(false, jSDocInfoBuilder0.isPopulatedWithFileOverview());
      assertTrue(boolean1);
      
      boolean boolean2 = jSDocInfoBuilder0.recordExport();
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean0 == boolean1);
      assertTrue(boolean0 == boolean2);
      assertEquals(false, jSDocInfoBuilder0.isDescriptionRecorded());
      assertEquals(true, jSDocInfoBuilder0.isPopulated());
      assertEquals(false, jSDocInfoBuilder0.isConstructorRecorded());
      assertEquals(false, jSDocInfoBuilder0.isInterfaceRecorded());
      assertEquals(false, jSDocInfoBuilder0.isPopulatedWithFileOverview());
      assertFalse(boolean2);
  }

  @Test
  public void test10()  throws Throwable  {
      boolean boolean0 = true;
      JSDocInfoBuilder jSDocInfoBuilder0 = new JSDocInfoBuilder(boolean0);
      assertEquals(false, jSDocInfoBuilder0.isPopulatedWithFileOverview());
      assertEquals(false, jSDocInfoBuilder0.isPopulated());
      assertEquals(false, jSDocInfoBuilder0.isConstructorRecorded());
      assertEquals(false, jSDocInfoBuilder0.isInterfaceRecorded());
      assertEquals(false, jSDocInfoBuilder0.isDescriptionRecorded());
      assertNotNull(jSDocInfoBuilder0);
      
      boolean boolean1 = jSDocInfoBuilder0.recordInterface();
      assertTrue(boolean0 == boolean1);
      assertTrue(boolean1 == boolean0);
      assertEquals(false, jSDocInfoBuilder0.isPopulatedWithFileOverview());
      assertEquals(true, jSDocInfoBuilder0.isInterfaceRecorded());
      assertEquals(false, jSDocInfoBuilder0.isConstructorRecorded());
      assertEquals(true, jSDocInfoBuilder0.isPopulated());
      assertEquals(false, jSDocInfoBuilder0.isDescriptionRecorded());
      assertTrue(boolean1);
      
      boolean boolean2 = jSDocInfoBuilder0.recordInterface();
      assertFalse(boolean0 == boolean2);
      assertTrue(boolean0 == boolean1);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertEquals(false, jSDocInfoBuilder0.isPopulatedWithFileOverview());
      assertEquals(true, jSDocInfoBuilder0.isInterfaceRecorded());
      assertEquals(false, jSDocInfoBuilder0.isConstructorRecorded());
      assertEquals(true, jSDocInfoBuilder0.isPopulated());
      assertEquals(false, jSDocInfoBuilder0.isDescriptionRecorded());
      assertFalse(boolean2);
  }

  @Test
  public void test11()  throws Throwable  {
      boolean boolean0 = true;
      JSDocInfoBuilder jSDocInfoBuilder0 = new JSDocInfoBuilder(boolean0);
      assertEquals(false, jSDocInfoBuilder0.isConstructorRecorded());
      assertEquals(false, jSDocInfoBuilder0.isInterfaceRecorded());
      assertEquals(false, jSDocInfoBuilder0.isDescriptionRecorded());
      assertEquals(false, jSDocInfoBuilder0.isPopulated());
      assertEquals(false, jSDocInfoBuilder0.isPopulatedWithFileOverview());
      assertNotNull(jSDocInfoBuilder0);
      
      boolean boolean1 = jSDocInfoBuilder0.recordConstructor();
      assertTrue(boolean0 == boolean1);
      assertTrue(boolean1 == boolean0);
      assertEquals(true, jSDocInfoBuilder0.isPopulated());
      assertEquals(false, jSDocInfoBuilder0.isInterfaceRecorded());
      assertEquals(true, jSDocInfoBuilder0.isConstructorRecorded());
      assertEquals(false, jSDocInfoBuilder0.isDescriptionRecorded());
      assertEquals(false, jSDocInfoBuilder0.isPopulatedWithFileOverview());
      assertTrue(boolean1);
      
      boolean boolean2 = jSDocInfoBuilder0.recordInterface();
      assertTrue(boolean0 == boolean1);
      assertFalse(boolean0 == boolean2);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertEquals(true, jSDocInfoBuilder0.isPopulated());
      assertEquals(false, jSDocInfoBuilder0.isInterfaceRecorded());
      assertEquals(true, jSDocInfoBuilder0.isConstructorRecorded());
      assertEquals(false, jSDocInfoBuilder0.isDescriptionRecorded());
      assertEquals(false, jSDocInfoBuilder0.isPopulatedWithFileOverview());
      assertFalse(boolean2);
  }

  @Test
  public void test12()  throws Throwable  {
      boolean boolean0 = true;
      JSDocInfoBuilder jSDocInfoBuilder0 = new JSDocInfoBuilder(boolean0);
      assertEquals(false, jSDocInfoBuilder0.isPopulated());
      assertEquals(false, jSDocInfoBuilder0.isConstructorRecorded());
      assertEquals(false, jSDocInfoBuilder0.isDescriptionRecorded());
      assertEquals(false, jSDocInfoBuilder0.isPopulatedWithFileOverview());
      assertEquals(false, jSDocInfoBuilder0.isInterfaceRecorded());
      assertNotNull(jSDocInfoBuilder0);
      
      String string0 = "";
      int int0 = (-5);
      Node node0 = new Node(int0, int0, int0);
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(-5, node0.getType());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.hasOneChild());
      assertNotNull(node0);
      
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      
      JSTypeExpression jSTypeExpression0 = new JSTypeExpression(node0, string0, jSTypeRegistry0);
      assertEquals(false, jSTypeExpression0.isVarArgs());
      assertEquals(false, jSTypeExpression0.isOptionalArg());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(-5, node0.getType());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.hasOneChild());
      assertNotNull(jSTypeExpression0);
      
      boolean boolean1 = jSDocInfoBuilder0.recordEnumParameterType(jSTypeExpression0);
      assertTrue(boolean0 == boolean1);
      assertTrue(boolean1 == boolean0);
      assertEquals(false, jSTypeExpression0.isVarArgs());
      assertEquals(false, jSTypeExpression0.isOptionalArg());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(-5, node0.getType());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, jSDocInfoBuilder0.isConstructorRecorded());
      assertEquals(false, jSDocInfoBuilder0.isDescriptionRecorded());
      assertEquals(true, jSDocInfoBuilder0.isPopulated());
      assertEquals(false, jSDocInfoBuilder0.isPopulatedWithFileOverview());
      assertEquals(false, jSDocInfoBuilder0.isInterfaceRecorded());
      assertTrue(boolean1);
      
      boolean boolean2 = jSDocInfoBuilder0.recordInterface();
      assertTrue(boolean0 == boolean1);
      assertFalse(boolean0 == boolean2);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertEquals(false, jSDocInfoBuilder0.isConstructorRecorded());
      assertEquals(false, jSDocInfoBuilder0.isDescriptionRecorded());
      assertEquals(true, jSDocInfoBuilder0.isPopulated());
      assertEquals(false, jSDocInfoBuilder0.isPopulatedWithFileOverview());
      assertEquals(false, jSDocInfoBuilder0.isInterfaceRecorded());
      assertFalse(boolean2);
  }

  @Test
  public void test13()  throws Throwable  {
      boolean boolean0 = false;
      JSDocInfoBuilder jSDocInfoBuilder0 = new JSDocInfoBuilder(boolean0);
      assertEquals(false, jSDocInfoBuilder0.isDescriptionRecorded());
      assertEquals(false, jSDocInfoBuilder0.isPopulatedWithFileOverview());
      assertEquals(false, jSDocInfoBuilder0.isConstructorRecorded());
      assertEquals(false, jSDocInfoBuilder0.isPopulated());
      assertEquals(false, jSDocInfoBuilder0.isInterfaceRecorded());
      assertNotNull(jSDocInfoBuilder0);
      
      boolean boolean1 = jSDocInfoBuilder0.recordDeprecated();
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean0 == boolean1);
      assertEquals(true, jSDocInfoBuilder0.isPopulated());
      assertEquals(false, jSDocInfoBuilder0.isDescriptionRecorded());
      assertEquals(false, jSDocInfoBuilder0.isPopulatedWithFileOverview());
      assertEquals(false, jSDocInfoBuilder0.isConstructorRecorded());
      assertEquals(false, jSDocInfoBuilder0.isInterfaceRecorded());
      assertTrue(boolean1);
      
      boolean boolean2 = jSDocInfoBuilder0.recordDeprecated();
      assertFalse(boolean0 == boolean1);
      assertTrue(boolean0 == boolean2);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertEquals(true, jSDocInfoBuilder0.isPopulated());
      assertEquals(false, jSDocInfoBuilder0.isDescriptionRecorded());
      assertEquals(false, jSDocInfoBuilder0.isPopulatedWithFileOverview());
      assertEquals(false, jSDocInfoBuilder0.isConstructorRecorded());
      assertEquals(false, jSDocInfoBuilder0.isInterfaceRecorded());
      assertFalse(boolean2);
  }

  @Test
  public void test14()  throws Throwable  {
      boolean boolean0 = true;
      JSDocInfoBuilder jSDocInfoBuilder0 = new JSDocInfoBuilder(boolean0);
      assertEquals(false, jSDocInfoBuilder0.isConstructorRecorded());
      assertEquals(false, jSDocInfoBuilder0.isPopulatedWithFileOverview());
      assertEquals(false, jSDocInfoBuilder0.isDescriptionRecorded());
      assertEquals(false, jSDocInfoBuilder0.isInterfaceRecorded());
      assertEquals(false, jSDocInfoBuilder0.isPopulated());
      assertNotNull(jSDocInfoBuilder0);
      
      boolean boolean1 = jSDocInfoBuilder0.recordNoAlias();
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean0 == boolean1);
      assertEquals(false, jSDocInfoBuilder0.isConstructorRecorded());
      assertEquals(false, jSDocInfoBuilder0.isPopulatedWithFileOverview());
      assertEquals(false, jSDocInfoBuilder0.isDescriptionRecorded());
      assertEquals(true, jSDocInfoBuilder0.isPopulated());
      assertEquals(false, jSDocInfoBuilder0.isInterfaceRecorded());
      assertTrue(boolean1);
      
      boolean boolean2 = jSDocInfoBuilder0.recordNoAlias();
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean0 == boolean2);
      assertTrue(boolean0 == boolean1);
      assertEquals(false, jSDocInfoBuilder0.isConstructorRecorded());
      assertEquals(false, jSDocInfoBuilder0.isPopulatedWithFileOverview());
      assertEquals(false, jSDocInfoBuilder0.isDescriptionRecorded());
      assertEquals(true, jSDocInfoBuilder0.isPopulated());
      assertEquals(false, jSDocInfoBuilder0.isInterfaceRecorded());
      assertFalse(boolean2);
  }

  @Test
  public void test15()  throws Throwable  {
      boolean boolean0 = true;
      JSDocInfoBuilder jSDocInfoBuilder0 = new JSDocInfoBuilder(boolean0);
      assertEquals(false, jSDocInfoBuilder0.isPopulated());
      assertEquals(false, jSDocInfoBuilder0.isDescriptionRecorded());
      assertEquals(false, jSDocInfoBuilder0.isPopulatedWithFileOverview());
      assertEquals(false, jSDocInfoBuilder0.isInterfaceRecorded());
      assertEquals(false, jSDocInfoBuilder0.isConstructorRecorded());
      assertNotNull(jSDocInfoBuilder0);
      
      boolean boolean1 = jSDocInfoBuilder0.recordOverride();
      assertTrue(boolean0 == boolean1);
      assertTrue(boolean1 == boolean0);
      assertEquals(false, jSDocInfoBuilder0.isDescriptionRecorded());
      assertEquals(true, jSDocInfoBuilder0.isPopulated());
      assertEquals(false, jSDocInfoBuilder0.isPopulatedWithFileOverview());
      assertEquals(false, jSDocInfoBuilder0.isInterfaceRecorded());
      assertEquals(false, jSDocInfoBuilder0.isConstructorRecorded());
      assertTrue(boolean1);
      
      boolean boolean2 = jSDocInfoBuilder0.recordOverride();
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean0 == boolean1);
      assertFalse(boolean0 == boolean2);
      assertEquals(false, jSDocInfoBuilder0.isDescriptionRecorded());
      assertEquals(true, jSDocInfoBuilder0.isPopulated());
      assertEquals(false, jSDocInfoBuilder0.isPopulatedWithFileOverview());
      assertEquals(false, jSDocInfoBuilder0.isInterfaceRecorded());
      assertEquals(false, jSDocInfoBuilder0.isConstructorRecorded());
      assertFalse(boolean2);
  }

  @Test
  public void test16()  throws Throwable  {
      boolean boolean0 = true;
      JSDocInfoBuilder jSDocInfoBuilder0 = new JSDocInfoBuilder(boolean0);
      assertEquals(false, jSDocInfoBuilder0.isDescriptionRecorded());
      assertEquals(false, jSDocInfoBuilder0.isPopulatedWithFileOverview());
      assertEquals(false, jSDocInfoBuilder0.isPopulated());
      assertEquals(false, jSDocInfoBuilder0.isInterfaceRecorded());
      assertEquals(false, jSDocInfoBuilder0.isConstructorRecorded());
      assertNotNull(jSDocInfoBuilder0);
      
      boolean boolean1 = jSDocInfoBuilder0.recordPreserveTry();
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean0 == boolean1);
      assertEquals(true, jSDocInfoBuilder0.isPopulated());
      assertEquals(false, jSDocInfoBuilder0.isDescriptionRecorded());
      assertEquals(false, jSDocInfoBuilder0.isPopulatedWithFileOverview());
      assertEquals(false, jSDocInfoBuilder0.isInterfaceRecorded());
      assertEquals(false, jSDocInfoBuilder0.isConstructorRecorded());
      assertTrue(boolean1);
      
      boolean boolean2 = jSDocInfoBuilder0.recordPreserveTry();
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean0 == boolean2);
      assertTrue(boolean0 == boolean1);
      assertEquals(true, jSDocInfoBuilder0.isPopulated());
      assertEquals(false, jSDocInfoBuilder0.isDescriptionRecorded());
      assertEquals(false, jSDocInfoBuilder0.isPopulatedWithFileOverview());
      assertEquals(false, jSDocInfoBuilder0.isInterfaceRecorded());
      assertEquals(false, jSDocInfoBuilder0.isConstructorRecorded());
      assertFalse(boolean2);
  }

  @Test
  public void test17()  throws Throwable  {
      boolean boolean0 = true;
      JSDocInfoBuilder jSDocInfoBuilder0 = new JSDocInfoBuilder(boolean0);
      assertEquals(false, jSDocInfoBuilder0.isInterfaceRecorded());
      assertEquals(false, jSDocInfoBuilder0.isConstructorRecorded());
      assertEquals(false, jSDocInfoBuilder0.isPopulated());
      assertEquals(false, jSDocInfoBuilder0.isPopulatedWithFileOverview());
      assertEquals(false, jSDocInfoBuilder0.isDescriptionRecorded());
      assertNotNull(jSDocInfoBuilder0);
      
      boolean boolean1 = jSDocInfoBuilder0.recordInterface();
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean0 == boolean1);
      assertEquals(true, jSDocInfoBuilder0.isInterfaceRecorded());
      assertEquals(false, jSDocInfoBuilder0.isConstructorRecorded());
      assertEquals(true, jSDocInfoBuilder0.isPopulated());
      assertEquals(false, jSDocInfoBuilder0.isPopulatedWithFileOverview());
      assertEquals(false, jSDocInfoBuilder0.isDescriptionRecorded());
      assertTrue(boolean1);
      
      boolean boolean2 = jSDocInfoBuilder0.recordConstructor();
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean0 == boolean2);
      assertTrue(boolean0 == boolean1);
      assertEquals(true, jSDocInfoBuilder0.isInterfaceRecorded());
      assertEquals(false, jSDocInfoBuilder0.isConstructorRecorded());
      assertEquals(true, jSDocInfoBuilder0.isPopulated());
      assertEquals(false, jSDocInfoBuilder0.isPopulatedWithFileOverview());
      assertEquals(false, jSDocInfoBuilder0.isDescriptionRecorded());
      assertFalse(boolean2);
  }

  @Test
  public void test18()  throws Throwable  {
      boolean boolean0 = true;
      JSDocInfoBuilder jSDocInfoBuilder0 = new JSDocInfoBuilder(boolean0);
      assertEquals(false, jSDocInfoBuilder0.isConstructorRecorded());
      assertEquals(false, jSDocInfoBuilder0.isPopulatedWithFileOverview());
      assertEquals(false, jSDocInfoBuilder0.isPopulated());
      assertEquals(false, jSDocInfoBuilder0.isInterfaceRecorded());
      assertEquals(false, jSDocInfoBuilder0.isDescriptionRecorded());
      assertNotNull(jSDocInfoBuilder0);
      
      boolean boolean1 = jSDocInfoBuilder0.recordConstructor();
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean0 == boolean1);
      assertEquals(false, jSDocInfoBuilder0.isPopulatedWithFileOverview());
      assertEquals(true, jSDocInfoBuilder0.isConstructorRecorded());
      assertEquals(false, jSDocInfoBuilder0.isInterfaceRecorded());
      assertEquals(true, jSDocInfoBuilder0.isPopulated());
      assertEquals(false, jSDocInfoBuilder0.isDescriptionRecorded());
      assertTrue(boolean1);
      
      boolean boolean2 = jSDocInfoBuilder0.recordConstructor();
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean0 == boolean2);
      assertTrue(boolean0 == boolean1);
      assertEquals(false, jSDocInfoBuilder0.isPopulatedWithFileOverview());
      assertEquals(true, jSDocInfoBuilder0.isConstructorRecorded());
      assertEquals(false, jSDocInfoBuilder0.isInterfaceRecorded());
      assertEquals(true, jSDocInfoBuilder0.isPopulated());
      assertEquals(false, jSDocInfoBuilder0.isDescriptionRecorded());
      assertFalse(boolean2);
  }

  @Test
  public void test19()  throws Throwable  {
      boolean boolean0 = true;
      JSDocInfoBuilder jSDocInfoBuilder0 = new JSDocInfoBuilder(boolean0);
      assertEquals(false, jSDocInfoBuilder0.isPopulatedWithFileOverview());
      assertEquals(false, jSDocInfoBuilder0.isConstructorRecorded());
      assertEquals(false, jSDocInfoBuilder0.isInterfaceRecorded());
      assertEquals(false, jSDocInfoBuilder0.isDescriptionRecorded());
      assertEquals(false, jSDocInfoBuilder0.isPopulated());
      assertNotNull(jSDocInfoBuilder0);
      
      String string0 = "";
      int int0 = (-5);
      Node node0 = new Node(int0, int0, int0);
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(-5, node0.getType());
      assertEquals(false, node0.hasOneChild());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isVarArgs());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isOptionalArg());
      assertNotNull(node0);
      
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      
      JSTypeExpression jSTypeExpression0 = new JSTypeExpression(node0, string0, jSTypeRegistry0);
      assertEquals(false, jSTypeExpression0.isOptionalArg());
      assertEquals(false, jSTypeExpression0.isVarArgs());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(-5, node0.getType());
      assertEquals(false, node0.hasOneChild());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isVarArgs());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isOptionalArg());
      assertNotNull(jSTypeExpression0);
      
      boolean boolean1 = jSDocInfoBuilder0.recordEnumParameterType(jSTypeExpression0);
      assertTrue(boolean0 == boolean1);
      assertTrue(boolean1 == boolean0);
      assertEquals(false, jSDocInfoBuilder0.isPopulatedWithFileOverview());
      assertEquals(false, jSDocInfoBuilder0.isConstructorRecorded());
      assertEquals(false, jSDocInfoBuilder0.isInterfaceRecorded());
      assertEquals(false, jSDocInfoBuilder0.isDescriptionRecorded());
      assertEquals(true, jSDocInfoBuilder0.isPopulated());
      assertEquals(false, jSTypeExpression0.isOptionalArg());
      assertEquals(false, jSTypeExpression0.isVarArgs());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(-5, node0.getType());
      assertEquals(false, node0.hasOneChild());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isVarArgs());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isOptionalArg());
      assertTrue(boolean1);
      
      boolean boolean2 = jSDocInfoBuilder0.recordConstructor();
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean0 == boolean1);
      assertFalse(boolean0 == boolean2);
      assertEquals(false, jSDocInfoBuilder0.isPopulatedWithFileOverview());
      assertEquals(false, jSDocInfoBuilder0.isConstructorRecorded());
      assertEquals(false, jSDocInfoBuilder0.isInterfaceRecorded());
      assertEquals(false, jSDocInfoBuilder0.isDescriptionRecorded());
      assertEquals(true, jSDocInfoBuilder0.isPopulated());
      assertFalse(boolean2);
  }

  @Test
  public void test20()  throws Throwable  {
      boolean boolean0 = true;
      JSDocInfoBuilder jSDocInfoBuilder0 = new JSDocInfoBuilder(boolean0);
      assertEquals(false, jSDocInfoBuilder0.isDescriptionRecorded());
      assertEquals(false, jSDocInfoBuilder0.isPopulated());
      assertEquals(false, jSDocInfoBuilder0.isInterfaceRecorded());
      assertEquals(false, jSDocInfoBuilder0.isConstructorRecorded());
      assertEquals(false, jSDocInfoBuilder0.isPopulatedWithFileOverview());
      assertNotNull(jSDocInfoBuilder0);
      
      boolean boolean1 = jSDocInfoBuilder0.recordNoTypeCheck();
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean0 == boolean1);
      assertEquals(false, jSDocInfoBuilder0.isDescriptionRecorded());
      assertEquals(true, jSDocInfoBuilder0.isPopulated());
      assertEquals(false, jSDocInfoBuilder0.isInterfaceRecorded());
      assertEquals(false, jSDocInfoBuilder0.isConstructorRecorded());
      assertEquals(false, jSDocInfoBuilder0.isPopulatedWithFileOverview());
      assertTrue(boolean1);
      
      boolean boolean2 = jSDocInfoBuilder0.recordNoTypeCheck();
      assertFalse(boolean0 == boolean2);
      assertTrue(boolean0 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertEquals(false, jSDocInfoBuilder0.isDescriptionRecorded());
      assertEquals(true, jSDocInfoBuilder0.isPopulated());
      assertEquals(false, jSDocInfoBuilder0.isInterfaceRecorded());
      assertEquals(false, jSDocInfoBuilder0.isConstructorRecorded());
      assertEquals(false, jSDocInfoBuilder0.isPopulatedWithFileOverview());
      assertFalse(boolean2);
  }

  @Test
  public void test21()  throws Throwable  {
      boolean boolean0 = false;
      JSDocInfoBuilder jSDocInfoBuilder0 = new JSDocInfoBuilder(boolean0);
      assertEquals(false, jSDocInfoBuilder0.isConstructorRecorded());
      assertEquals(false, jSDocInfoBuilder0.isPopulated());
      assertEquals(false, jSDocInfoBuilder0.isDescriptionRecorded());
      assertEquals(false, jSDocInfoBuilder0.isInterfaceRecorded());
      assertEquals(false, jSDocInfoBuilder0.isPopulatedWithFileOverview());
      assertNotNull(jSDocInfoBuilder0);
      
      boolean boolean1 = jSDocInfoBuilder0.recordHiddenness();
      assertFalse(boolean0 == boolean1);
      assertFalse(boolean1 == boolean0);
      assertEquals(false, jSDocInfoBuilder0.isConstructorRecorded());
      assertEquals(true, jSDocInfoBuilder0.isPopulated());
      assertEquals(false, jSDocInfoBuilder0.isDescriptionRecorded());
      assertEquals(false, jSDocInfoBuilder0.isInterfaceRecorded());
      assertEquals(false, jSDocInfoBuilder0.isPopulatedWithFileOverview());
      assertTrue(boolean1);
      
      boolean boolean2 = jSDocInfoBuilder0.recordHiddenness();
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean0 == boolean1);
      assertTrue(boolean0 == boolean2);
      assertEquals(false, jSDocInfoBuilder0.isConstructorRecorded());
      assertEquals(true, jSDocInfoBuilder0.isPopulated());
      assertEquals(false, jSDocInfoBuilder0.isDescriptionRecorded());
      assertEquals(false, jSDocInfoBuilder0.isInterfaceRecorded());
      assertEquals(false, jSDocInfoBuilder0.isPopulatedWithFileOverview());
      assertFalse(boolean2);
  }

  @Test
  public void test22()  throws Throwable  {
      boolean boolean0 = true;
      JSDocInfoBuilder jSDocInfoBuilder0 = new JSDocInfoBuilder(boolean0);
      assertEquals(false, jSDocInfoBuilder0.isDescriptionRecorded());
      assertEquals(false, jSDocInfoBuilder0.isInterfaceRecorded());
      assertEquals(false, jSDocInfoBuilder0.isPopulatedWithFileOverview());
      assertEquals(false, jSDocInfoBuilder0.isPopulated());
      assertEquals(false, jSDocInfoBuilder0.isConstructorRecorded());
      assertNotNull(jSDocInfoBuilder0);
      
      String string0 = "";
      boolean boolean1 = jSDocInfoBuilder0.recordFileOverview(string0);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean0 == boolean1);
      assertEquals(false, jSDocInfoBuilder0.isDescriptionRecorded());
      assertEquals(false, jSDocInfoBuilder0.isInterfaceRecorded());
      assertEquals(true, jSDocInfoBuilder0.isPopulatedWithFileOverview());
      assertEquals(true, jSDocInfoBuilder0.isPopulated());
      assertEquals(false, jSDocInfoBuilder0.isConstructorRecorded());
      assertTrue(boolean1);
      
      boolean boolean2 = jSDocInfoBuilder0.recordFileOverview(string0);
      assertFalse(boolean0 == boolean2);
      assertTrue(boolean0 == boolean1);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertEquals(false, jSDocInfoBuilder0.isDescriptionRecorded());
      assertEquals(false, jSDocInfoBuilder0.isInterfaceRecorded());
      assertEquals(true, jSDocInfoBuilder0.isPopulatedWithFileOverview());
      assertEquals(true, jSDocInfoBuilder0.isPopulated());
      assertEquals(false, jSDocInfoBuilder0.isConstructorRecorded());
      assertFalse(boolean2);
  }

  @Test
  public void test23()  throws Throwable  {
      JSDocInfo.TypePosition jSDocInfo_TypePosition0 = new JSDocInfo.TypePosition();
      assertFalse(jSDocInfo_TypePosition0.hasBrackets);
      assertEquals(0, jSDocInfo_TypePosition0.getEndLine());
      assertEquals(0, jSDocInfo_TypePosition0.getPositionOnEndLine());
      assertEquals(0, jSDocInfo_TypePosition0.getStartLine());
      assertEquals(0, jSDocInfo_TypePosition0.getPositionOnStartLine());
      assertNotNull(jSDocInfo_TypePosition0);
      
      JSDocInfoBuilder jSDocInfoBuilder0 = new JSDocInfoBuilder(jSDocInfo_TypePosition0.hasBrackets);
      assertFalse(jSDocInfo_TypePosition0.hasBrackets);
      assertEquals(false, jSDocInfoBuilder0.isPopulated());
      assertEquals(false, jSDocInfoBuilder0.isInterfaceRecorded());
      assertEquals(false, jSDocInfoBuilder0.isConstructorRecorded());
      assertEquals(false, jSDocInfoBuilder0.isPopulatedWithFileOverview());
      assertEquals(false, jSDocInfoBuilder0.isDescriptionRecorded());
      assertEquals(0, jSDocInfo_TypePosition0.getEndLine());
      assertEquals(0, jSDocInfo_TypePosition0.getPositionOnEndLine());
      assertEquals(0, jSDocInfo_TypePosition0.getStartLine());
      assertEquals(0, jSDocInfo_TypePosition0.getPositionOnStartLine());
      assertNotNull(jSDocInfoBuilder0);
      
      String string0 = ".}7i";
      boolean boolean0 = jSDocInfoBuilder0.recordDescription(string0);
      assertFalse(jSDocInfo_TypePosition0.hasBrackets);
      assertEquals(true, jSDocInfoBuilder0.isPopulated());
      assertEquals(false, jSDocInfoBuilder0.isInterfaceRecorded());
      assertEquals(false, jSDocInfoBuilder0.isConstructorRecorded());
      assertEquals(false, jSDocInfoBuilder0.isPopulatedWithFileOverview());
      assertEquals(true, jSDocInfoBuilder0.isDescriptionRecorded());
      assertEquals(0, jSDocInfo_TypePosition0.getEndLine());
      assertEquals(0, jSDocInfo_TypePosition0.getPositionOnEndLine());
      assertEquals(0, jSDocInfo_TypePosition0.getStartLine());
      assertEquals(0, jSDocInfo_TypePosition0.getPositionOnStartLine());
      assertTrue(boolean0);
      
      boolean boolean1 = jSDocInfoBuilder0.recordDescription(string0);
      assertFalse(boolean1 == boolean0);
      assertFalse(jSDocInfo_TypePosition0.hasBrackets);
      assertEquals(true, jSDocInfoBuilder0.isPopulated());
      assertEquals(false, jSDocInfoBuilder0.isInterfaceRecorded());
      assertEquals(false, jSDocInfoBuilder0.isConstructorRecorded());
      assertEquals(false, jSDocInfoBuilder0.isPopulatedWithFileOverview());
      assertEquals(true, jSDocInfoBuilder0.isDescriptionRecorded());
      assertEquals(0, jSDocInfo_TypePosition0.getEndLine());
      assertEquals(0, jSDocInfo_TypePosition0.getPositionOnEndLine());
      assertEquals(0, jSDocInfo_TypePosition0.getStartLine());
      assertEquals(0, jSDocInfo_TypePosition0.getPositionOnStartLine());
      assertFalse(boolean1);
  }

  @Test
  public void test24()  throws Throwable  {
      boolean boolean0 = true;
      JSDocInfoBuilder jSDocInfoBuilder0 = new JSDocInfoBuilder(boolean0);
      assertEquals(false, jSDocInfoBuilder0.isPopulated());
      assertEquals(false, jSDocInfoBuilder0.isDescriptionRecorded());
      assertEquals(false, jSDocInfoBuilder0.isConstructorRecorded());
      assertEquals(false, jSDocInfoBuilder0.isPopulatedWithFileOverview());
      assertEquals(false, jSDocInfoBuilder0.isInterfaceRecorded());
      assertNotNull(jSDocInfoBuilder0);
      
      String string0 = null;
      boolean boolean1 = jSDocInfoBuilder0.recordDescription(string0);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean0 == boolean1);
      assertEquals(false, jSDocInfoBuilder0.isPopulated());
      assertEquals(false, jSDocInfoBuilder0.isDescriptionRecorded());
      assertEquals(false, jSDocInfoBuilder0.isConstructorRecorded());
      assertEquals(false, jSDocInfoBuilder0.isPopulatedWithFileOverview());
      assertEquals(false, jSDocInfoBuilder0.isInterfaceRecorded());
      assertFalse(boolean1);
  }

  @Test
  public void test25()  throws Throwable  {
      boolean boolean0 = true;
      JSDocInfoBuilder jSDocInfoBuilder0 = new JSDocInfoBuilder(boolean0);
      assertEquals(false, jSDocInfoBuilder0.isDescriptionRecorded());
      assertEquals(false, jSDocInfoBuilder0.isPopulatedWithFileOverview());
      assertEquals(false, jSDocInfoBuilder0.isConstructorRecorded());
      assertEquals(false, jSDocInfoBuilder0.isPopulated());
      assertEquals(false, jSDocInfoBuilder0.isInterfaceRecorded());
      assertNotNull(jSDocInfoBuilder0);
      
      boolean boolean1 = jSDocInfoBuilder0.recordConstancy();
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean0 == boolean1);
      assertEquals(false, jSDocInfoBuilder0.isDescriptionRecorded());
      assertEquals(false, jSDocInfoBuilder0.isPopulatedWithFileOverview());
      assertEquals(true, jSDocInfoBuilder0.isPopulated());
      assertEquals(false, jSDocInfoBuilder0.isConstructorRecorded());
      assertEquals(false, jSDocInfoBuilder0.isInterfaceRecorded());
      assertTrue(boolean1);
      
      boolean boolean2 = jSDocInfoBuilder0.recordConstancy();
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean0 == boolean2);
      assertTrue(boolean0 == boolean1);
      assertEquals(false, jSDocInfoBuilder0.isDescriptionRecorded());
      assertEquals(false, jSDocInfoBuilder0.isPopulatedWithFileOverview());
      assertEquals(true, jSDocInfoBuilder0.isPopulated());
      assertEquals(false, jSDocInfoBuilder0.isConstructorRecorded());
      assertEquals(false, jSDocInfoBuilder0.isInterfaceRecorded());
      assertFalse(boolean2);
  }

  @Test
  public void test26()  throws Throwable  {
      boolean boolean0 = false;
      JSDocInfoBuilder jSDocInfoBuilder0 = new JSDocInfoBuilder(boolean0);
      assertEquals(false, jSDocInfoBuilder0.isInterfaceRecorded());
      assertEquals(false, jSDocInfoBuilder0.isPopulatedWithFileOverview());
      assertEquals(false, jSDocInfoBuilder0.isConstructorRecorded());
      assertEquals(false, jSDocInfoBuilder0.isDescriptionRecorded());
      assertEquals(false, jSDocInfoBuilder0.isPopulated());
      assertNotNull(jSDocInfoBuilder0);
      
      int int0 = (-228);
      String string0 = "s;(mC*";
      Node node0 = Node.newString(int0, string0, int0, int0);
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isVarArgs());
      assertEquals(-1, node0.getCharno());
      assertEquals(-1, node0.getLineno());
      assertEquals(-228, node0.getType());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.hasOneChild());
      assertNotNull(node0);
      
      JSTypeRegistry jSTypeRegistry0 = null;
      JSTypeExpression jSTypeExpression0 = new JSTypeExpression(node0, string0, jSTypeRegistry0);
      assertEquals(false, jSTypeExpression0.isVarArgs());
      assertEquals(false, jSTypeExpression0.isOptionalArg());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isVarArgs());
      assertEquals(-1, node0.getCharno());
      assertEquals(-1, node0.getLineno());
      assertEquals(-228, node0.getType());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.hasOneChild());
      assertNotNull(jSTypeExpression0);
      
      boolean boolean1 = jSDocInfoBuilder0.recordBaseType(jSTypeExpression0);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean0 == boolean1);
      assertEquals(false, jSTypeExpression0.isVarArgs());
      assertEquals(false, jSTypeExpression0.isOptionalArg());
      assertEquals(true, jSDocInfoBuilder0.isPopulated());
      assertEquals(false, jSDocInfoBuilder0.isInterfaceRecorded());
      assertEquals(false, jSDocInfoBuilder0.isPopulatedWithFileOverview());
      assertEquals(false, jSDocInfoBuilder0.isConstructorRecorded());
      assertEquals(false, jSDocInfoBuilder0.isDescriptionRecorded());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isVarArgs());
      assertEquals(-1, node0.getCharno());
      assertEquals(-1, node0.getLineno());
      assertEquals(-228, node0.getType());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.hasOneChild());
      assertTrue(boolean1);
      
      boolean boolean2 = jSDocInfoBuilder0.recordBaseType(jSTypeExpression0);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean0 == boolean1);
      assertTrue(boolean0 == boolean2);
      assertEquals(false, jSTypeExpression0.isVarArgs());
      assertEquals(false, jSTypeExpression0.isOptionalArg());
      assertEquals(true, jSDocInfoBuilder0.isPopulated());
      assertEquals(false, jSDocInfoBuilder0.isInterfaceRecorded());
      assertEquals(false, jSDocInfoBuilder0.isPopulatedWithFileOverview());
      assertEquals(false, jSDocInfoBuilder0.isConstructorRecorded());
      assertEquals(false, jSDocInfoBuilder0.isDescriptionRecorded());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isVarArgs());
      assertEquals(-1, node0.getCharno());
      assertEquals(-1, node0.getLineno());
      assertEquals(-228, node0.getType());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.hasOneChild());
      assertFalse(boolean2);
  }

  @Test
  public void test27()  throws Throwable  {
      boolean boolean0 = false;
      JSDocInfoBuilder jSDocInfoBuilder0 = new JSDocInfoBuilder(boolean0);
      assertEquals(false, jSDocInfoBuilder0.isDescriptionRecorded());
      assertEquals(false, jSDocInfoBuilder0.isInterfaceRecorded());
      assertEquals(false, jSDocInfoBuilder0.isPopulated());
      assertEquals(false, jSDocInfoBuilder0.isConstructorRecorded());
      assertEquals(false, jSDocInfoBuilder0.isPopulatedWithFileOverview());
      assertNotNull(jSDocInfoBuilder0);
      
      int int0 = (-3);
      String string0 = "fZ|.^a?b;@V_c\"";
      Node node0 = Node.newString(int0, string0, int0, int0);
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(-1, node0.getCharno());
      assertEquals(-3, node0.getType());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isVarArgs());
      assertNotNull(node0);
      
      JSTypeRegistry jSTypeRegistry0 = null;
      JSTypeExpression jSTypeExpression0 = new JSTypeExpression(node0, string0, jSTypeRegistry0);
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(-1, node0.getCharno());
      assertEquals(-3, node0.getType());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, jSTypeExpression0.isVarArgs());
      assertEquals(false, jSTypeExpression0.isOptionalArg());
      assertNotNull(jSTypeExpression0);
      
      boolean boolean1 = jSDocInfoBuilder0.recordDefineType(jSTypeExpression0);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean0 == boolean1);
      assertEquals(true, jSDocInfoBuilder0.isPopulated());
      assertEquals(false, jSDocInfoBuilder0.isDescriptionRecorded());
      assertEquals(false, jSDocInfoBuilder0.isInterfaceRecorded());
      assertEquals(false, jSDocInfoBuilder0.isConstructorRecorded());
      assertEquals(false, jSDocInfoBuilder0.isPopulatedWithFileOverview());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(-1, node0.getCharno());
      assertEquals(-3, node0.getType());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, jSTypeExpression0.isVarArgs());
      assertEquals(false, jSTypeExpression0.isOptionalArg());
      assertTrue(boolean1);
      
      boolean boolean2 = jSDocInfoBuilder0.recordBaseType(jSTypeExpression0);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean0 == boolean1);
      assertTrue(boolean0 == boolean2);
      assertEquals(true, jSDocInfoBuilder0.isPopulated());
      assertEquals(false, jSDocInfoBuilder0.isDescriptionRecorded());
      assertEquals(false, jSDocInfoBuilder0.isInterfaceRecorded());
      assertEquals(false, jSDocInfoBuilder0.isConstructorRecorded());
      assertEquals(false, jSDocInfoBuilder0.isPopulatedWithFileOverview());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(-1, node0.getCharno());
      assertEquals(-3, node0.getType());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, jSTypeExpression0.isVarArgs());
      assertEquals(false, jSTypeExpression0.isOptionalArg());
      assertFalse(boolean2);
  }

  @Test
  public void test28()  throws Throwable  {
      JSDocInfo.TypePosition jSDocInfo_TypePosition0 = new JSDocInfo.TypePosition();
      assertFalse(jSDocInfo_TypePosition0.hasBrackets);
      assertEquals(0, jSDocInfo_TypePosition0.getPositionOnEndLine());
      assertEquals(0, jSDocInfo_TypePosition0.getPositionOnStartLine());
      assertEquals(0, jSDocInfo_TypePosition0.getEndLine());
      assertEquals(0, jSDocInfo_TypePosition0.getStartLine());
      assertNotNull(jSDocInfo_TypePosition0);
      
      JSDocInfoBuilder jSDocInfoBuilder0 = new JSDocInfoBuilder(jSDocInfo_TypePosition0.hasBrackets);
      assertFalse(jSDocInfo_TypePosition0.hasBrackets);
      assertEquals(0, jSDocInfo_TypePosition0.getPositionOnEndLine());
      assertEquals(0, jSDocInfo_TypePosition0.getPositionOnStartLine());
      assertEquals(0, jSDocInfo_TypePosition0.getEndLine());
      assertEquals(0, jSDocInfo_TypePosition0.getStartLine());
      assertEquals(false, jSDocInfoBuilder0.isDescriptionRecorded());
      assertEquals(false, jSDocInfoBuilder0.isPopulatedWithFileOverview());
      assertEquals(false, jSDocInfoBuilder0.isConstructorRecorded());
      assertEquals(false, jSDocInfoBuilder0.isPopulated());
      assertEquals(false, jSDocInfoBuilder0.isInterfaceRecorded());
      assertNotNull(jSDocInfoBuilder0);
      
      JSTypeExpression jSTypeExpression0 = null;
      boolean boolean0 = jSDocInfoBuilder0.recordBaseType(jSTypeExpression0);
      assertFalse(jSDocInfo_TypePosition0.hasBrackets);
      assertEquals(0, jSDocInfo_TypePosition0.getPositionOnEndLine());
      assertEquals(0, jSDocInfo_TypePosition0.getPositionOnStartLine());
      assertEquals(0, jSDocInfo_TypePosition0.getEndLine());
      assertEquals(0, jSDocInfo_TypePosition0.getStartLine());
      assertEquals(false, jSDocInfoBuilder0.isDescriptionRecorded());
      assertEquals(false, jSDocInfoBuilder0.isPopulatedWithFileOverview());
      assertEquals(false, jSDocInfoBuilder0.isConstructorRecorded());
      assertEquals(false, jSDocInfoBuilder0.isPopulated());
      assertEquals(false, jSDocInfoBuilder0.isInterfaceRecorded());
      assertFalse(boolean0);
  }

  @Test
  public void test29()  throws Throwable  {
      boolean boolean0 = true;
      JSDocInfoBuilder jSDocInfoBuilder0 = new JSDocInfoBuilder(boolean0);
      assertEquals(false, jSDocInfoBuilder0.isConstructorRecorded());
      assertEquals(false, jSDocInfoBuilder0.isInterfaceRecorded());
      assertEquals(false, jSDocInfoBuilder0.isPopulatedWithFileOverview());
      assertEquals(false, jSDocInfoBuilder0.isDescriptionRecorded());
      assertEquals(false, jSDocInfoBuilder0.isPopulated());
      assertNotNull(jSDocInfoBuilder0);
      
      String string0 = "3";
      int int0 = 2222;
      Node node0 = Node.newNumber((double) int0, int0, int0);
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(2222, node0.getCharno());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.hasOneChild());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(39, node0.getType());
      assertEquals(2222, node0.getLineno());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.hasChildren());
      assertNotNull(node0);
      
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      
      JSTypeExpression jSTypeExpression0 = new JSTypeExpression(node0, string0, jSTypeRegistry0);
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(2222, node0.getCharno());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.hasOneChild());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(39, node0.getType());
      assertEquals(2222, node0.getLineno());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, jSTypeExpression0.isOptionalArg());
      assertEquals(false, jSTypeExpression0.isVarArgs());
      assertNotNull(jSTypeExpression0);
      
      boolean boolean1 = jSDocInfoBuilder0.recordThisType(jSTypeExpression0);
      assertTrue(boolean0 == boolean1);
      assertTrue(boolean1 == boolean0);
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(2222, node0.getCharno());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.hasOneChild());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(39, node0.getType());
      assertEquals(2222, node0.getLineno());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, jSDocInfoBuilder0.isConstructorRecorded());
      assertEquals(false, jSDocInfoBuilder0.isInterfaceRecorded());
      assertEquals(false, jSDocInfoBuilder0.isPopulatedWithFileOverview());
      assertEquals(false, jSDocInfoBuilder0.isDescriptionRecorded());
      assertEquals(true, jSDocInfoBuilder0.isPopulated());
      assertEquals(false, jSTypeExpression0.isOptionalArg());
      assertEquals(false, jSTypeExpression0.isVarArgs());
      assertTrue(boolean1);
      
      boolean boolean2 = jSDocInfoBuilder0.recordThisType(jSTypeExpression0);
      assertTrue(boolean0 == boolean1);
      assertFalse(boolean0 == boolean2);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(2222, node0.getCharno());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.hasOneChild());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(39, node0.getType());
      assertEquals(2222, node0.getLineno());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, jSDocInfoBuilder0.isConstructorRecorded());
      assertEquals(false, jSDocInfoBuilder0.isInterfaceRecorded());
      assertEquals(false, jSDocInfoBuilder0.isPopulatedWithFileOverview());
      assertEquals(false, jSDocInfoBuilder0.isDescriptionRecorded());
      assertEquals(true, jSDocInfoBuilder0.isPopulated());
      assertEquals(false, jSTypeExpression0.isOptionalArg());
      assertEquals(false, jSTypeExpression0.isVarArgs());
      assertFalse(boolean2);
  }

  @Test
  public void test30()  throws Throwable  {
      boolean boolean0 = true;
      JSDocInfoBuilder jSDocInfoBuilder0 = new JSDocInfoBuilder(boolean0);
      assertEquals(false, jSDocInfoBuilder0.isPopulatedWithFileOverview());
      assertEquals(false, jSDocInfoBuilder0.isDescriptionRecorded());
      assertEquals(false, jSDocInfoBuilder0.isConstructorRecorded());
      assertEquals(false, jSDocInfoBuilder0.isPopulated());
      assertEquals(false, jSDocInfoBuilder0.isInterfaceRecorded());
      assertNotNull(jSDocInfoBuilder0);
      
      String string0 = "";
      int int0 = (-5);
      Node node0 = new Node(int0, int0, int0);
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isVarArgs());
      assertEquals(-5, node0.getType());
      assertEquals(false, node0.hasChildren());
      assertNotNull(node0);
      
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      
      JSTypeExpression jSTypeExpression0 = new JSTypeExpression(node0, string0, jSTypeRegistry0);
      assertEquals(false, jSTypeExpression0.isVarArgs());
      assertEquals(false, jSTypeExpression0.isOptionalArg());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isVarArgs());
      assertEquals(-5, node0.getType());
      assertEquals(false, node0.hasChildren());
      assertNotNull(jSTypeExpression0);
      
      boolean boolean1 = jSDocInfoBuilder0.recordEnumParameterType(jSTypeExpression0);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean0 == boolean1);
      assertEquals(false, jSTypeExpression0.isVarArgs());
      assertEquals(false, jSTypeExpression0.isOptionalArg());
      assertEquals(false, jSDocInfoBuilder0.isPopulatedWithFileOverview());
      assertEquals(false, jSDocInfoBuilder0.isDescriptionRecorded());
      assertEquals(false, jSDocInfoBuilder0.isConstructorRecorded());
      assertEquals(false, jSDocInfoBuilder0.isInterfaceRecorded());
      assertEquals(true, jSDocInfoBuilder0.isPopulated());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isVarArgs());
      assertEquals(-5, node0.getType());
      assertEquals(false, node0.hasChildren());
      assertTrue(boolean1);
      
      boolean boolean2 = jSDocInfoBuilder0.recordThisType(jSTypeExpression0);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean0 == boolean1);
      assertFalse(boolean0 == boolean2);
      assertEquals(false, jSTypeExpression0.isVarArgs());
      assertEquals(false, jSTypeExpression0.isOptionalArg());
      assertEquals(false, jSDocInfoBuilder0.isPopulatedWithFileOverview());
      assertEquals(false, jSDocInfoBuilder0.isDescriptionRecorded());
      assertEquals(false, jSDocInfoBuilder0.isConstructorRecorded());
      assertEquals(false, jSDocInfoBuilder0.isInterfaceRecorded());
      assertEquals(true, jSDocInfoBuilder0.isPopulated());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isVarArgs());
      assertEquals(-5, node0.getType());
      assertEquals(false, node0.hasChildren());
      assertFalse(boolean2);
  }

  @Test
  public void test31()  throws Throwable  {
      boolean boolean0 = true;
      JSDocInfoBuilder jSDocInfoBuilder0 = new JSDocInfoBuilder(boolean0);
      assertEquals(false, jSDocInfoBuilder0.isInterfaceRecorded());
      assertEquals(false, jSDocInfoBuilder0.isPopulatedWithFileOverview());
      assertEquals(false, jSDocInfoBuilder0.isPopulated());
      assertEquals(false, jSDocInfoBuilder0.isConstructorRecorded());
      assertEquals(false, jSDocInfoBuilder0.isDescriptionRecorded());
      assertNotNull(jSDocInfoBuilder0);
      
      JSTypeExpression jSTypeExpression0 = null;
      boolean boolean1 = jSDocInfoBuilder0.recordThisType(jSTypeExpression0);
      assertFalse(boolean0 == boolean1);
      assertFalse(boolean1 == boolean0);
      assertEquals(false, jSDocInfoBuilder0.isInterfaceRecorded());
      assertEquals(false, jSDocInfoBuilder0.isPopulatedWithFileOverview());
      assertEquals(false, jSDocInfoBuilder0.isPopulated());
      assertEquals(false, jSDocInfoBuilder0.isConstructorRecorded());
      assertEquals(false, jSDocInfoBuilder0.isDescriptionRecorded());
      assertFalse(boolean1);
  }

  @Test
  public void test32()  throws Throwable  {
      boolean boolean0 = true;
      JSDocInfoBuilder jSDocInfoBuilder0 = new JSDocInfoBuilder(boolean0);
      assertEquals(false, jSDocInfoBuilder0.isConstructorRecorded());
      assertEquals(false, jSDocInfoBuilder0.isPopulated());
      assertEquals(false, jSDocInfoBuilder0.isInterfaceRecorded());
      assertEquals(false, jSDocInfoBuilder0.isDescriptionRecorded());
      assertEquals(false, jSDocInfoBuilder0.isPopulatedWithFileOverview());
      assertNotNull(jSDocInfoBuilder0);
      
      String string0 = "NUMBER_OBJECT_TYPE";
      boolean boolean1 = jSDocInfoBuilder0.recordConstructor();
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean0 == boolean1);
      assertEquals(true, jSDocInfoBuilder0.isPopulated());
      assertEquals(false, jSDocInfoBuilder0.isInterfaceRecorded());
      assertEquals(false, jSDocInfoBuilder0.isDescriptionRecorded());
      assertEquals(true, jSDocInfoBuilder0.isConstructorRecorded());
      assertEquals(false, jSDocInfoBuilder0.isPopulatedWithFileOverview());
      assertTrue(boolean1);
      
      Node node0 = null;
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      
      JSTypeExpression jSTypeExpression0 = new JSTypeExpression(node0, string0, jSTypeRegistry0);
      assertNotNull(jSTypeExpression0);
      
      boolean boolean2 = jSDocInfoBuilder0.recordEnumParameterType(jSTypeExpression0);
      assertTrue(boolean0 == boolean1);
      assertFalse(boolean0 == boolean2);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertEquals(true, jSDocInfoBuilder0.isPopulated());
      assertEquals(false, jSDocInfoBuilder0.isInterfaceRecorded());
      assertEquals(false, jSDocInfoBuilder0.isDescriptionRecorded());
      assertEquals(true, jSDocInfoBuilder0.isConstructorRecorded());
      assertEquals(false, jSDocInfoBuilder0.isPopulatedWithFileOverview());
      assertFalse(boolean2);
  }

  @Test
  public void test33()  throws Throwable  {
      boolean boolean0 = true;
      JSDocInfoBuilder jSDocInfoBuilder0 = new JSDocInfoBuilder(boolean0);
      assertEquals(false, jSDocInfoBuilder0.isPopulatedWithFileOverview());
      assertEquals(false, jSDocInfoBuilder0.isPopulated());
      assertEquals(false, jSDocInfoBuilder0.isDescriptionRecorded());
      assertEquals(false, jSDocInfoBuilder0.isConstructorRecorded());
      assertEquals(false, jSDocInfoBuilder0.isInterfaceRecorded());
      assertNotNull(jSDocInfoBuilder0);
      
      boolean boolean1 = jSDocInfoBuilder0.recordInterface();
      assertTrue(boolean0 == boolean1);
      assertTrue(boolean1 == boolean0);
      assertEquals(false, jSDocInfoBuilder0.isPopulatedWithFileOverview());
      assertEquals(true, jSDocInfoBuilder0.isInterfaceRecorded());
      assertEquals(true, jSDocInfoBuilder0.isPopulated());
      assertEquals(false, jSDocInfoBuilder0.isDescriptionRecorded());
      assertEquals(false, jSDocInfoBuilder0.isConstructorRecorded());
      assertTrue(boolean1);
      
      String string0 = null;
      JSDocInfo jSDocInfo0 = jSDocInfoBuilder0.build(string0);
      assertTrue(boolean0 == boolean1);
      assertNull(jSDocInfo0.getReturnDescription());
      assertEquals(false, jSDocInfo0.hasTypedefType());
      assertNull(jSDocInfo0.getLicense());
      assertEquals(false, jSDocInfo0.isNoTypeCheck());
      assertEquals(false, jSDocInfo0.hasThisType());
      assertNull(jSDocInfo0.getDescription());
      assertNull(jSDocInfo0.getFileOverview());
      assertEquals(false, jSDocInfo0.isNoSideEffects());
      assertNull(jSDocInfo0.getTemplateTypeName());
      assertEquals(false, jSDocInfo0.isConstant());
      assertEquals(false, jSDocInfo0.isExport());
      assertNull(jSDocInfo0.getBlockDescription());
      assertEquals(JSDocInfo.Visibility.INHERITED, jSDocInfo0.getVisibility());
      assertEquals("JSDocInfo", jSDocInfo0.toString());
      assertEquals(false, jSDocInfo0.hasFileOverview());
      assertEquals(false, jSDocInfo0.hasBaseType());
      assertEquals(false, jSDocInfo0.isHidden());
      assertEquals(false, jSDocInfo0.hasReturnType());
      assertNull(jSDocInfo0.getDeprecationReason());
      assertEquals(0, jSDocInfo0.getImplementedInterfaceCount());
      assertEquals(false, jSDocInfo0.isConstructor());
      assertNull(jSDocInfo0.getSourceName());
      assertNull(jSDocInfo0.getVersion());
      assertEquals(true, jSDocInfo0.isInterface());
      assertEquals(false, jSDocInfo0.isDeprecated());
      assertEquals(false, jSDocInfo0.isImplicitCast());
      assertEquals(false, jSDocInfo0.isNoAlias());
      assertEquals(false, jSDocInfo0.hasType());
      assertEquals(false, jSDocInfo0.isDefine());
      assertEquals(false, jSDocInfo0.isNoShadow());
      assertEquals(false, jSDocInfo0.hasEnumParameterType());
      assertEquals(false, jSDocInfo0.isOverride());
      assertEquals(0, jSDocInfo0.getParameterCount());
      assertEquals(false, jSDocInfo0.shouldPreserveTry());
      assertEquals(false, jSDocInfoBuilder0.isPopulatedWithFileOverview());
      assertEquals(false, jSDocInfoBuilder0.isPopulated());
      assertEquals(false, jSDocInfoBuilder0.isDescriptionRecorded());
      assertEquals(false, jSDocInfoBuilder0.isConstructorRecorded());
      assertEquals(false, jSDocInfoBuilder0.isInterfaceRecorded());
      assertNotNull(jSDocInfo0);
      
      JSTypeExpression jSTypeExpression0 = jSDocInfo0.getEnumParameterType();
      assertTrue(boolean0 == boolean1);
      assertNull(jSDocInfo0.getReturnDescription());
      assertEquals(false, jSDocInfo0.hasTypedefType());
      assertNull(jSDocInfo0.getLicense());
      assertEquals(false, jSDocInfo0.isNoTypeCheck());
      assertEquals(false, jSDocInfo0.hasThisType());
      assertNull(jSDocInfo0.getDescription());
      assertNull(jSDocInfo0.getFileOverview());
      assertEquals(false, jSDocInfo0.isNoSideEffects());
      assertNull(jSDocInfo0.getTemplateTypeName());
      assertEquals(false, jSDocInfo0.isConstant());
      assertEquals(false, jSDocInfo0.isExport());
      assertNull(jSDocInfo0.getBlockDescription());
      assertEquals(JSDocInfo.Visibility.INHERITED, jSDocInfo0.getVisibility());
      assertEquals("JSDocInfo", jSDocInfo0.toString());
      assertEquals(false, jSDocInfo0.hasFileOverview());
      assertEquals(false, jSDocInfo0.hasBaseType());
      assertEquals(false, jSDocInfo0.isHidden());
      assertEquals(false, jSDocInfo0.hasReturnType());
      assertNull(jSDocInfo0.getDeprecationReason());
      assertEquals(0, jSDocInfo0.getImplementedInterfaceCount());
      assertEquals(false, jSDocInfo0.isConstructor());
      assertNull(jSDocInfo0.getSourceName());
      assertNull(jSDocInfo0.getVersion());
      assertEquals(true, jSDocInfo0.isInterface());
      assertEquals(false, jSDocInfo0.isDeprecated());
      assertEquals(false, jSDocInfo0.isImplicitCast());
      assertEquals(false, jSDocInfo0.isNoAlias());
      assertEquals(false, jSDocInfo0.hasType());
      assertEquals(false, jSDocInfo0.isDefine());
      assertEquals(false, jSDocInfo0.isNoShadow());
      assertEquals(false, jSDocInfo0.hasEnumParameterType());
      assertEquals(false, jSDocInfo0.isOverride());
      assertEquals(0, jSDocInfo0.getParameterCount());
      assertEquals(false, jSDocInfo0.shouldPreserveTry());
      assertEquals(false, jSDocInfoBuilder0.isPopulatedWithFileOverview());
      assertEquals(false, jSDocInfoBuilder0.isPopulated());
      assertEquals(false, jSDocInfoBuilder0.isDescriptionRecorded());
      assertEquals(false, jSDocInfoBuilder0.isConstructorRecorded());
      assertEquals(false, jSDocInfoBuilder0.isInterfaceRecorded());
      assertNull(jSTypeExpression0);
      
      boolean boolean2 = jSDocInfoBuilder0.recordEnumParameterType(jSTypeExpression0);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean0 == boolean1);
      assertFalse(boolean0 == boolean2);
      assertNull(jSDocInfo0.getReturnDescription());
      assertEquals(false, jSDocInfo0.hasTypedefType());
      assertNull(jSDocInfo0.getLicense());
      assertEquals(false, jSDocInfo0.isNoTypeCheck());
      assertEquals(false, jSDocInfo0.hasThisType());
      assertNull(jSDocInfo0.getDescription());
      assertNull(jSDocInfo0.getFileOverview());
      assertEquals(false, jSDocInfo0.isNoSideEffects());
      assertNull(jSDocInfo0.getTemplateTypeName());
      assertEquals(false, jSDocInfo0.isConstant());
      assertEquals(false, jSDocInfo0.isExport());
      assertNull(jSDocInfo0.getBlockDescription());
      assertEquals(JSDocInfo.Visibility.INHERITED, jSDocInfo0.getVisibility());
      assertEquals("JSDocInfo", jSDocInfo0.toString());
      assertEquals(false, jSDocInfo0.hasFileOverview());
      assertEquals(false, jSDocInfo0.hasBaseType());
      assertEquals(false, jSDocInfo0.isHidden());
      assertEquals(false, jSDocInfo0.hasReturnType());
      assertNull(jSDocInfo0.getDeprecationReason());
      assertEquals(0, jSDocInfo0.getImplementedInterfaceCount());
      assertEquals(false, jSDocInfo0.isConstructor());
      assertNull(jSDocInfo0.getSourceName());
      assertNull(jSDocInfo0.getVersion());
      assertEquals(true, jSDocInfo0.isInterface());
      assertEquals(false, jSDocInfo0.isDeprecated());
      assertEquals(false, jSDocInfo0.isImplicitCast());
      assertEquals(false, jSDocInfo0.isNoAlias());
      assertEquals(false, jSDocInfo0.hasType());
      assertEquals(false, jSDocInfo0.isDefine());
      assertEquals(false, jSDocInfo0.isNoShadow());
      assertEquals(false, jSDocInfo0.hasEnumParameterType());
      assertEquals(false, jSDocInfo0.isOverride());
      assertEquals(0, jSDocInfo0.getParameterCount());
      assertEquals(false, jSDocInfo0.shouldPreserveTry());
      assertEquals(false, jSDocInfoBuilder0.isPopulatedWithFileOverview());
      assertEquals(false, jSDocInfoBuilder0.isPopulated());
      assertEquals(false, jSDocInfoBuilder0.isDescriptionRecorded());
      assertEquals(false, jSDocInfoBuilder0.isConstructorRecorded());
      assertEquals(false, jSDocInfoBuilder0.isInterfaceRecorded());
      assertFalse(boolean2);
  }

  @Test
  public void test34()  throws Throwable  {
      boolean boolean0 = false;
      JSDocInfoBuilder jSDocInfoBuilder0 = new JSDocInfoBuilder(boolean0);
      assertEquals(false, jSDocInfoBuilder0.isPopulatedWithFileOverview());
      assertEquals(false, jSDocInfoBuilder0.isInterfaceRecorded());
      assertEquals(false, jSDocInfoBuilder0.isPopulated());
      assertEquals(false, jSDocInfoBuilder0.isConstructorRecorded());
      assertEquals(false, jSDocInfoBuilder0.isDescriptionRecorded());
      assertNotNull(jSDocInfoBuilder0);
      
      int int0 = (-3);
      String string0 = "fZ|.^a?b;@V_c\"";
      Node node0 = Node.newString(int0, string0, int0, int0);
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(0, node0.getChildCount());
      assertEquals(-3, node0.getType());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(-1, node0.getLineno());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isSyntheticBlock());
      assertNotNull(node0);
      
      JSTypeRegistry jSTypeRegistry0 = null;
      JSTypeExpression jSTypeExpression0 = new JSTypeExpression(node0, string0, jSTypeRegistry0);
      assertEquals(false, jSTypeExpression0.isVarArgs());
      assertEquals(false, jSTypeExpression0.isOptionalArg());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(0, node0.getChildCount());
      assertEquals(-3, node0.getType());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(-1, node0.getLineno());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isSyntheticBlock());
      assertNotNull(jSTypeExpression0);
      
      boolean boolean1 = jSDocInfoBuilder0.recordDefineType(jSTypeExpression0);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean0 == boolean1);
      assertEquals(false, jSDocInfoBuilder0.isPopulatedWithFileOverview());
      assertEquals(false, jSDocInfoBuilder0.isInterfaceRecorded());
      assertEquals(true, jSDocInfoBuilder0.isPopulated());
      assertEquals(false, jSDocInfoBuilder0.isConstructorRecorded());
      assertEquals(false, jSDocInfoBuilder0.isDescriptionRecorded());
      assertEquals(false, jSTypeExpression0.isVarArgs());
      assertEquals(false, jSTypeExpression0.isOptionalArg());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(0, node0.getChildCount());
      assertEquals(-3, node0.getType());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(-1, node0.getLineno());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isSyntheticBlock());
      assertTrue(boolean1);
      
      boolean boolean2 = jSDocInfoBuilder0.recordDefineType(jSTypeExpression0);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean0 == boolean1);
      assertTrue(boolean0 == boolean2);
      assertEquals(false, jSDocInfoBuilder0.isPopulatedWithFileOverview());
      assertEquals(false, jSDocInfoBuilder0.isInterfaceRecorded());
      assertEquals(true, jSDocInfoBuilder0.isPopulated());
      assertEquals(false, jSDocInfoBuilder0.isConstructorRecorded());
      assertEquals(false, jSDocInfoBuilder0.isDescriptionRecorded());
      assertEquals(false, jSTypeExpression0.isVarArgs());
      assertEquals(false, jSTypeExpression0.isOptionalArg());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(0, node0.getChildCount());
      assertEquals(-3, node0.getType());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(-1, node0.getLineno());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isSyntheticBlock());
      assertFalse(boolean2);
  }

  @Test
  public void test35()  throws Throwable  {
      JSDocInfo.TypePosition jSDocInfo_TypePosition0 = new JSDocInfo.TypePosition();
      assertFalse(jSDocInfo_TypePosition0.hasBrackets);
      assertEquals(0, jSDocInfo_TypePosition0.getStartLine());
      assertEquals(0, jSDocInfo_TypePosition0.getPositionOnEndLine());
      assertEquals(0, jSDocInfo_TypePosition0.getEndLine());
      assertEquals(0, jSDocInfo_TypePosition0.getPositionOnStartLine());
      assertNotNull(jSDocInfo_TypePosition0);
      
      JSDocInfoBuilder jSDocInfoBuilder0 = new JSDocInfoBuilder(jSDocInfo_TypePosition0.hasBrackets);
      assertFalse(jSDocInfo_TypePosition0.hasBrackets);
      assertEquals(0, jSDocInfo_TypePosition0.getStartLine());
      assertEquals(0, jSDocInfo_TypePosition0.getPositionOnEndLine());
      assertEquals(0, jSDocInfo_TypePosition0.getEndLine());
      assertEquals(0, jSDocInfo_TypePosition0.getPositionOnStartLine());
      assertEquals(false, jSDocInfoBuilder0.isPopulated());
      assertEquals(false, jSDocInfoBuilder0.isPopulatedWithFileOverview());
      assertEquals(false, jSDocInfoBuilder0.isDescriptionRecorded());
      assertEquals(false, jSDocInfoBuilder0.isInterfaceRecorded());
      assertEquals(false, jSDocInfoBuilder0.isConstructorRecorded());
      assertNotNull(jSDocInfoBuilder0);
      
      JSTypeExpression jSTypeExpression0 = null;
      boolean boolean0 = jSDocInfoBuilder0.recordDefineType(jSTypeExpression0);
      assertFalse(jSDocInfo_TypePosition0.hasBrackets);
      assertEquals(0, jSDocInfo_TypePosition0.getStartLine());
      assertEquals(0, jSDocInfo_TypePosition0.getPositionOnEndLine());
      assertEquals(0, jSDocInfo_TypePosition0.getEndLine());
      assertEquals(0, jSDocInfo_TypePosition0.getPositionOnStartLine());
      assertEquals(false, jSDocInfoBuilder0.isPopulated());
      assertEquals(false, jSDocInfoBuilder0.isPopulatedWithFileOverview());
      assertEquals(false, jSDocInfoBuilder0.isDescriptionRecorded());
      assertEquals(false, jSDocInfoBuilder0.isInterfaceRecorded());
      assertEquals(false, jSDocInfoBuilder0.isConstructorRecorded());
      assertFalse(boolean0);
  }

  @Test
  public void test36()  throws Throwable  {
      boolean boolean0 = true;
      JSDocInfoBuilder jSDocInfoBuilder0 = new JSDocInfoBuilder(boolean0);
      assertEquals(false, jSDocInfoBuilder0.isInterfaceRecorded());
      assertEquals(false, jSDocInfoBuilder0.isPopulatedWithFileOverview());
      assertEquals(false, jSDocInfoBuilder0.isConstructorRecorded());
      assertEquals(false, jSDocInfoBuilder0.isDescriptionRecorded());
      assertEquals(false, jSDocInfoBuilder0.isPopulated());
      assertNotNull(jSDocInfoBuilder0);
      
      String string0 = "NUMBER_OBJECT_TYPE";
      boolean boolean1 = jSDocInfoBuilder0.recordReturnDescription(string0);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean0 == boolean1);
      assertEquals(false, jSDocInfoBuilder0.isInterfaceRecorded());
      assertEquals(false, jSDocInfoBuilder0.isPopulatedWithFileOverview());
      assertEquals(false, jSDocInfoBuilder0.isConstructorRecorded());
      assertEquals(false, jSDocInfoBuilder0.isDescriptionRecorded());
      assertEquals(true, jSDocInfoBuilder0.isPopulated());
      assertTrue(boolean1);
      
      boolean boolean2 = jSDocInfoBuilder0.recordReturnDescription(string0);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean0 == boolean1);
      assertFalse(boolean0 == boolean2);
      assertEquals(false, jSDocInfoBuilder0.isInterfaceRecorded());
      assertEquals(false, jSDocInfoBuilder0.isPopulatedWithFileOverview());
      assertEquals(false, jSDocInfoBuilder0.isConstructorRecorded());
      assertEquals(false, jSDocInfoBuilder0.isDescriptionRecorded());
      assertEquals(true, jSDocInfoBuilder0.isPopulated());
      assertFalse(boolean2);
  }

  @Test
  public void test37()  throws Throwable  {
      boolean boolean0 = true;
      JSDocInfoBuilder jSDocInfoBuilder0 = new JSDocInfoBuilder(boolean0);
      assertEquals(false, jSDocInfoBuilder0.isPopulated());
      assertEquals(false, jSDocInfoBuilder0.isPopulatedWithFileOverview());
      assertEquals(false, jSDocInfoBuilder0.isInterfaceRecorded());
      assertEquals(false, jSDocInfoBuilder0.isDescriptionRecorded());
      assertEquals(false, jSDocInfoBuilder0.isConstructorRecorded());
      assertNotNull(jSDocInfoBuilder0);
      
      String string0 = "";
      int int0 = (-5);
      Node node0 = new Node(int0, int0, int0);
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(-5, node0.getType());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(-1, node0.getLineno());
      assertEquals(-1, node0.getCharno());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertNotNull(node0);
      
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      
      JSTypeExpression jSTypeExpression0 = new JSTypeExpression(node0, string0, jSTypeRegistry0);
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(-5, node0.getType());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(-1, node0.getLineno());
      assertEquals(-1, node0.getCharno());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, jSTypeExpression0.isOptionalArg());
      assertEquals(false, jSTypeExpression0.isVarArgs());
      assertNotNull(jSTypeExpression0);
      
      boolean boolean1 = jSDocInfoBuilder0.recordEnumParameterType(jSTypeExpression0);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean0 == boolean1);
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(-5, node0.getType());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(-1, node0.getLineno());
      assertEquals(-1, node0.getCharno());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, jSDocInfoBuilder0.isPopulatedWithFileOverview());
      assertEquals(true, jSDocInfoBuilder0.isPopulated());
      assertEquals(false, jSDocInfoBuilder0.isInterfaceRecorded());
      assertEquals(false, jSDocInfoBuilder0.isDescriptionRecorded());
      assertEquals(false, jSDocInfoBuilder0.isConstructorRecorded());
      assertEquals(false, jSTypeExpression0.isOptionalArg());
      assertEquals(false, jSTypeExpression0.isVarArgs());
      assertTrue(boolean1);
      
      boolean boolean2 = jSDocInfoBuilder0.recordReturnType(jSTypeExpression0);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean0 == boolean1);
      assertFalse(boolean0 == boolean2);
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(-5, node0.getType());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(-1, node0.getLineno());
      assertEquals(-1, node0.getCharno());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, jSDocInfoBuilder0.isPopulatedWithFileOverview());
      assertEquals(true, jSDocInfoBuilder0.isPopulated());
      assertEquals(false, jSDocInfoBuilder0.isInterfaceRecorded());
      assertEquals(false, jSDocInfoBuilder0.isDescriptionRecorded());
      assertEquals(false, jSDocInfoBuilder0.isConstructorRecorded());
      assertEquals(false, jSTypeExpression0.isOptionalArg());
      assertEquals(false, jSTypeExpression0.isVarArgs());
      assertFalse(boolean2);
  }

  @Test
  public void test38()  throws Throwable  {
      boolean boolean0 = true;
      JSDocInfoBuilder jSDocInfoBuilder0 = new JSDocInfoBuilder(boolean0);
      assertEquals(false, jSDocInfoBuilder0.isInterfaceRecorded());
      assertEquals(false, jSDocInfoBuilder0.isConstructorRecorded());
      assertEquals(false, jSDocInfoBuilder0.isDescriptionRecorded());
      assertEquals(false, jSDocInfoBuilder0.isPopulated());
      assertEquals(false, jSDocInfoBuilder0.isPopulatedWithFileOverview());
      assertNotNull(jSDocInfoBuilder0);
      
      boolean boolean1 = jSDocInfoBuilder0.recordInterface();
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean0 == boolean1);
      assertEquals(false, jSDocInfoBuilder0.isConstructorRecorded());
      assertEquals(false, jSDocInfoBuilder0.isDescriptionRecorded());
      assertEquals(true, jSDocInfoBuilder0.isPopulated());
      assertEquals(false, jSDocInfoBuilder0.isPopulatedWithFileOverview());
      assertEquals(true, jSDocInfoBuilder0.isInterfaceRecorded());
      assertTrue(boolean1);
      
      String string0 = null;
      JSDocInfo jSDocInfo0 = jSDocInfoBuilder0.build(string0);
      assertTrue(boolean0 == boolean1);
      assertEquals(false, jSDocInfoBuilder0.isInterfaceRecorded());
      assertEquals(false, jSDocInfoBuilder0.isConstructorRecorded());
      assertEquals(false, jSDocInfoBuilder0.isDescriptionRecorded());
      assertEquals(false, jSDocInfoBuilder0.isPopulated());
      assertEquals(false, jSDocInfoBuilder0.isPopulatedWithFileOverview());
      assertEquals(0, jSDocInfo0.getImplementedInterfaceCount());
      assertEquals(false, jSDocInfo0.isDeprecated());
      assertEquals(false, jSDocInfo0.hasFileOverview());
      assertEquals(false, jSDocInfo0.isImplicitCast());
      assertEquals("JSDocInfo", jSDocInfo0.toString());
      assertNull(jSDocInfo0.getSourceName());
      assertEquals(false, jSDocInfo0.isNoShadow());
      assertEquals(false, jSDocInfo0.hasThisType());
      assertNull(jSDocInfo0.getVersion());
      assertNull(jSDocInfo0.getTemplateTypeName());
      assertEquals(false, jSDocInfo0.hasBaseType());
      assertEquals(false, jSDocInfo0.isOverride());
      assertEquals(false, jSDocInfo0.isNoSideEffects());
      assertEquals(false, jSDocInfo0.isExport());
      assertNull(jSDocInfo0.getFileOverview());
      assertNull(jSDocInfo0.getDeprecationReason());
      assertEquals(false, jSDocInfo0.hasType());
      assertEquals(JSDocInfo.Visibility.INHERITED, jSDocInfo0.getVisibility());
      assertEquals(false, jSDocInfo0.isConstructor());
      assertEquals(false, jSDocInfo0.isNoAlias());
      assertEquals(false, jSDocInfo0.hasEnumParameterType());
      assertNull(jSDocInfo0.getDescription());
      assertEquals(false, jSDocInfo0.hasTypedefType());
      assertNull(jSDocInfo0.getLicense());
      assertEquals(0, jSDocInfo0.getParameterCount());
      assertEquals(false, jSDocInfo0.hasReturnType());
      assertNull(jSDocInfo0.getBlockDescription());
      assertNull(jSDocInfo0.getReturnDescription());
      assertEquals(false, jSDocInfo0.shouldPreserveTry());
      assertEquals(false, jSDocInfo0.isConstant());
      assertEquals(true, jSDocInfo0.isInterface());
      assertEquals(false, jSDocInfo0.isHidden());
      assertEquals(false, jSDocInfo0.isNoTypeCheck());
      assertEquals(false, jSDocInfo0.isDefine());
      assertNotNull(jSDocInfo0);
      
      JSTypeExpression jSTypeExpression0 = jSDocInfo0.getEnumParameterType();
      assertTrue(boolean0 == boolean1);
      assertEquals(false, jSDocInfoBuilder0.isInterfaceRecorded());
      assertEquals(false, jSDocInfoBuilder0.isConstructorRecorded());
      assertEquals(false, jSDocInfoBuilder0.isDescriptionRecorded());
      assertEquals(false, jSDocInfoBuilder0.isPopulated());
      assertEquals(false, jSDocInfoBuilder0.isPopulatedWithFileOverview());
      assertEquals(0, jSDocInfo0.getImplementedInterfaceCount());
      assertEquals(false, jSDocInfo0.isDeprecated());
      assertEquals(false, jSDocInfo0.hasFileOverview());
      assertEquals(false, jSDocInfo0.isImplicitCast());
      assertEquals("JSDocInfo", jSDocInfo0.toString());
      assertNull(jSDocInfo0.getSourceName());
      assertEquals(false, jSDocInfo0.isNoShadow());
      assertEquals(false, jSDocInfo0.hasThisType());
      assertNull(jSDocInfo0.getVersion());
      assertNull(jSDocInfo0.getTemplateTypeName());
      assertEquals(false, jSDocInfo0.hasBaseType());
      assertEquals(false, jSDocInfo0.isOverride());
      assertEquals(false, jSDocInfo0.isNoSideEffects());
      assertEquals(false, jSDocInfo0.isExport());
      assertNull(jSDocInfo0.getFileOverview());
      assertNull(jSDocInfo0.getDeprecationReason());
      assertEquals(false, jSDocInfo0.hasType());
      assertEquals(JSDocInfo.Visibility.INHERITED, jSDocInfo0.getVisibility());
      assertEquals(false, jSDocInfo0.isConstructor());
      assertEquals(false, jSDocInfo0.isNoAlias());
      assertEquals(false, jSDocInfo0.hasEnumParameterType());
      assertNull(jSDocInfo0.getDescription());
      assertEquals(false, jSDocInfo0.hasTypedefType());
      assertNull(jSDocInfo0.getLicense());
      assertEquals(0, jSDocInfo0.getParameterCount());
      assertEquals(false, jSDocInfo0.hasReturnType());
      assertNull(jSDocInfo0.getBlockDescription());
      assertNull(jSDocInfo0.getReturnDescription());
      assertEquals(false, jSDocInfo0.shouldPreserveTry());
      assertEquals(false, jSDocInfo0.isConstant());
      assertEquals(true, jSDocInfo0.isInterface());
      assertEquals(false, jSDocInfo0.isHidden());
      assertEquals(false, jSDocInfo0.isNoTypeCheck());
      assertEquals(false, jSDocInfo0.isDefine());
      assertNull(jSTypeExpression0);
      
      boolean boolean2 = jSDocInfoBuilder0.recordReturnType(jSTypeExpression0);
      assertFalse(boolean0 == boolean2);
      assertTrue(boolean0 == boolean1);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertEquals(false, jSDocInfoBuilder0.isInterfaceRecorded());
      assertEquals(false, jSDocInfoBuilder0.isConstructorRecorded());
      assertEquals(false, jSDocInfoBuilder0.isDescriptionRecorded());
      assertEquals(false, jSDocInfoBuilder0.isPopulated());
      assertEquals(false, jSDocInfoBuilder0.isPopulatedWithFileOverview());
      assertEquals(0, jSDocInfo0.getImplementedInterfaceCount());
      assertEquals(false, jSDocInfo0.isDeprecated());
      assertEquals(false, jSDocInfo0.hasFileOverview());
      assertEquals(false, jSDocInfo0.isImplicitCast());
      assertEquals("JSDocInfo", jSDocInfo0.toString());
      assertNull(jSDocInfo0.getSourceName());
      assertEquals(false, jSDocInfo0.isNoShadow());
      assertEquals(false, jSDocInfo0.hasThisType());
      assertNull(jSDocInfo0.getVersion());
      assertNull(jSDocInfo0.getTemplateTypeName());
      assertEquals(false, jSDocInfo0.hasBaseType());
      assertEquals(false, jSDocInfo0.isOverride());
      assertEquals(false, jSDocInfo0.isNoSideEffects());
      assertEquals(false, jSDocInfo0.isExport());
      assertNull(jSDocInfo0.getFileOverview());
      assertNull(jSDocInfo0.getDeprecationReason());
      assertEquals(false, jSDocInfo0.hasType());
      assertEquals(JSDocInfo.Visibility.INHERITED, jSDocInfo0.getVisibility());
      assertEquals(false, jSDocInfo0.isConstructor());
      assertEquals(false, jSDocInfo0.isNoAlias());
      assertEquals(false, jSDocInfo0.hasEnumParameterType());
      assertNull(jSDocInfo0.getDescription());
      assertEquals(false, jSDocInfo0.hasTypedefType());
      assertNull(jSDocInfo0.getLicense());
      assertEquals(0, jSDocInfo0.getParameterCount());
      assertEquals(false, jSDocInfo0.hasReturnType());
      assertNull(jSDocInfo0.getBlockDescription());
      assertNull(jSDocInfo0.getReturnDescription());
      assertEquals(false, jSDocInfo0.shouldPreserveTry());
      assertEquals(false, jSDocInfo0.isConstant());
      assertEquals(true, jSDocInfo0.isInterface());
      assertEquals(false, jSDocInfo0.isHidden());
      assertEquals(false, jSDocInfo0.isNoTypeCheck());
      assertEquals(false, jSDocInfo0.isDefine());
      assertFalse(boolean2);
  }

  @Test
  public void test39()  throws Throwable  {
      String string0 = null;
      boolean boolean0 = false;
      JSDocInfoBuilder jSDocInfoBuilder0 = new JSDocInfoBuilder(boolean0);
      assertEquals(false, jSDocInfoBuilder0.isConstructorRecorded());
      assertEquals(false, jSDocInfoBuilder0.isPopulatedWithFileOverview());
      assertEquals(false, jSDocInfoBuilder0.isPopulated());
      assertEquals(false, jSDocInfoBuilder0.isInterfaceRecorded());
      assertEquals(false, jSDocInfoBuilder0.isDescriptionRecorded());
      assertNotNull(jSDocInfoBuilder0);
      
      double double0 = 125.98675924371794;
      int int0 = 0;
      boolean boolean1 = jSDocInfoBuilder0.recordConstructor();
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean0 == boolean1);
      assertEquals(true, jSDocInfoBuilder0.isPopulated());
      assertEquals(true, jSDocInfoBuilder0.isConstructorRecorded());
      assertEquals(false, jSDocInfoBuilder0.isPopulatedWithFileOverview());
      assertEquals(false, jSDocInfoBuilder0.isInterfaceRecorded());
      assertEquals(false, jSDocInfoBuilder0.isDescriptionRecorded());
      assertTrue(boolean1);
      
      Node node0 = Node.newNumber(double0, int0, int0);
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(0, node0.getLineno());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.hasChildren());
      assertEquals(0, node0.getChildCount());
      assertEquals(0, node0.getCharno());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(39, node0.getType());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertNotNull(node0);
      
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      
      JSTypeExpression jSTypeExpression0 = new JSTypeExpression(node0, string0, jSTypeRegistry0);
      assertEquals(false, jSTypeExpression0.isOptionalArg());
      assertEquals(false, jSTypeExpression0.isVarArgs());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(0, node0.getLineno());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.hasChildren());
      assertEquals(0, node0.getChildCount());
      assertEquals(0, node0.getCharno());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(39, node0.getType());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertNotNull(jSTypeExpression0);
      
      boolean boolean2 = jSDocInfoBuilder0.recordTypedef(jSTypeExpression0);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean0 == boolean2);
      assertFalse(boolean0 == boolean1);
      assertEquals(false, jSTypeExpression0.isOptionalArg());
      assertEquals(false, jSTypeExpression0.isVarArgs());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(0, node0.getLineno());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.hasChildren());
      assertEquals(0, node0.getChildCount());
      assertEquals(0, node0.getCharno());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(39, node0.getType());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(true, jSDocInfoBuilder0.isPopulated());
      assertEquals(true, jSDocInfoBuilder0.isConstructorRecorded());
      assertEquals(false, jSDocInfoBuilder0.isPopulatedWithFileOverview());
      assertEquals(false, jSDocInfoBuilder0.isInterfaceRecorded());
      assertEquals(false, jSDocInfoBuilder0.isDescriptionRecorded());
      assertFalse(boolean2);
  }

  @Test
  public void test40()  throws Throwable  {
      boolean boolean0 = false;
      JSDocInfoBuilder jSDocInfoBuilder0 = new JSDocInfoBuilder(boolean0);
      assertEquals(false, jSDocInfoBuilder0.isInterfaceRecorded());
      assertEquals(false, jSDocInfoBuilder0.isDescriptionRecorded());
      assertEquals(false, jSDocInfoBuilder0.isPopulatedWithFileOverview());
      assertEquals(false, jSDocInfoBuilder0.isConstructorRecorded());
      assertEquals(false, jSDocInfoBuilder0.isPopulated());
      assertNotNull(jSDocInfoBuilder0);
      
      JSTypeExpression jSTypeExpression0 = null;
      boolean boolean1 = jSDocInfoBuilder0.recordTypedef(jSTypeExpression0);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean0 == boolean1);
      assertEquals(false, jSDocInfoBuilder0.isInterfaceRecorded());
      assertEquals(false, jSDocInfoBuilder0.isDescriptionRecorded());
      assertEquals(false, jSDocInfoBuilder0.isPopulatedWithFileOverview());
      assertEquals(false, jSDocInfoBuilder0.isConstructorRecorded());
      assertEquals(false, jSDocInfoBuilder0.isPopulated());
      assertFalse(boolean1);
  }

  @Test
  public void test41()  throws Throwable  {
      boolean boolean0 = false;
      JSDocInfoBuilder jSDocInfoBuilder0 = new JSDocInfoBuilder(boolean0);
      assertEquals(false, jSDocInfoBuilder0.isPopulatedWithFileOverview());
      assertEquals(false, jSDocInfoBuilder0.isPopulated());
      assertEquals(false, jSDocInfoBuilder0.isInterfaceRecorded());
      assertEquals(false, jSDocInfoBuilder0.isDescriptionRecorded());
      assertEquals(false, jSDocInfoBuilder0.isConstructorRecorded());
      assertNotNull(jSDocInfoBuilder0);
      
      JSTypeExpression jSTypeExpression0 = null;
      boolean boolean1 = jSDocInfoBuilder0.recordType(jSTypeExpression0);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean0 == boolean1);
      assertEquals(false, jSDocInfoBuilder0.isPopulatedWithFileOverview());
      assertEquals(false, jSDocInfoBuilder0.isPopulated());
      assertEquals(false, jSDocInfoBuilder0.isInterfaceRecorded());
      assertEquals(false, jSDocInfoBuilder0.isDescriptionRecorded());
      assertEquals(false, jSDocInfoBuilder0.isConstructorRecorded());
      assertFalse(boolean1);
  }

  @Test
  public void test42()  throws Throwable  {
      boolean boolean0 = false;
      JSDocInfoBuilder jSDocInfoBuilder0 = new JSDocInfoBuilder(boolean0);
      assertEquals(false, jSDocInfoBuilder0.isDescriptionRecorded());
      assertEquals(false, jSDocInfoBuilder0.isInterfaceRecorded());
      assertEquals(false, jSDocInfoBuilder0.isConstructorRecorded());
      assertEquals(false, jSDocInfoBuilder0.isPopulatedWithFileOverview());
      assertEquals(false, jSDocInfoBuilder0.isPopulated());
      assertNotNull(jSDocInfoBuilder0);
      
      Locale locale0 = Locale.TAIWAN;
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertNotNull(locale0);
      
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals(0, set0.size());
      assertEquals(true, set0.isEmpty());
      assertNotNull(set0);
      
      boolean boolean1 = jSDocInfoBuilder0.recordSuppressions(set0);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean0 == boolean1);
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals(true, jSDocInfoBuilder0.isPopulated());
      assertEquals(false, jSDocInfoBuilder0.isDescriptionRecorded());
      assertEquals(false, jSDocInfoBuilder0.isInterfaceRecorded());
      assertEquals(false, jSDocInfoBuilder0.isConstructorRecorded());
      assertEquals(false, jSDocInfoBuilder0.isPopulatedWithFileOverview());
      assertEquals(0, set0.size());
      assertEquals(true, set0.isEmpty());
      assertTrue(boolean1);
      
      boolean boolean2 = jSDocInfoBuilder0.recordSuppressions(set0);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean0 == boolean1);
      assertTrue(boolean0 == boolean2);
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals(true, jSDocInfoBuilder0.isPopulated());
      assertEquals(false, jSDocInfoBuilder0.isDescriptionRecorded());
      assertEquals(false, jSDocInfoBuilder0.isInterfaceRecorded());
      assertEquals(false, jSDocInfoBuilder0.isConstructorRecorded());
      assertEquals(false, jSDocInfoBuilder0.isPopulatedWithFileOverview());
      assertEquals(0, set0.size());
      assertEquals(true, set0.isEmpty());
      assertFalse(boolean2);
  }

  @Test
  public void test43()  throws Throwable  {
      boolean boolean0 = true;
      JSDocInfoBuilder jSDocInfoBuilder0 = new JSDocInfoBuilder(boolean0);
      assertEquals(false, jSDocInfoBuilder0.isPopulated());
      assertEquals(false, jSDocInfoBuilder0.isDescriptionRecorded());
      assertEquals(false, jSDocInfoBuilder0.isConstructorRecorded());
      assertEquals(false, jSDocInfoBuilder0.isInterfaceRecorded());
      assertEquals(false, jSDocInfoBuilder0.isPopulatedWithFileOverview());
      assertNotNull(jSDocInfoBuilder0);
      
      String string0 = "";
      boolean boolean1 = jSDocInfoBuilder0.recordDeprecationReason(string0);
      assertTrue(boolean0 == boolean1);
      assertTrue(boolean1 == boolean0);
      assertEquals(false, jSDocInfoBuilder0.isDescriptionRecorded());
      assertEquals(false, jSDocInfoBuilder0.isConstructorRecorded());
      assertEquals(true, jSDocInfoBuilder0.isPopulated());
      assertEquals(false, jSDocInfoBuilder0.isInterfaceRecorded());
      assertEquals(false, jSDocInfoBuilder0.isPopulatedWithFileOverview());
      assertTrue(boolean1);
      
      boolean boolean2 = jSDocInfoBuilder0.recordDeprecationReason(string0);
      assertFalse(boolean0 == boolean2);
      assertTrue(boolean0 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertEquals(false, jSDocInfoBuilder0.isDescriptionRecorded());
      assertEquals(false, jSDocInfoBuilder0.isConstructorRecorded());
      assertEquals(true, jSDocInfoBuilder0.isPopulated());
      assertEquals(false, jSDocInfoBuilder0.isInterfaceRecorded());
      assertEquals(false, jSDocInfoBuilder0.isPopulatedWithFileOverview());
      assertFalse(boolean2);
  }

  @Test
  public void test44()  throws Throwable  {
      boolean boolean0 = true;
      String string0 = ".}7i";
      JSDocInfoBuilder jSDocInfoBuilder0 = new JSDocInfoBuilder(boolean0);
      assertEquals(false, jSDocInfoBuilder0.isPopulatedWithFileOverview());
      assertEquals(false, jSDocInfoBuilder0.isPopulated());
      assertEquals(false, jSDocInfoBuilder0.isDescriptionRecorded());
      assertEquals(false, jSDocInfoBuilder0.isInterfaceRecorded());
      assertEquals(false, jSDocInfoBuilder0.isConstructorRecorded());
      assertNotNull(jSDocInfoBuilder0);
      
      boolean boolean1 = jSDocInfoBuilder0.recordVersion(string0);
      assertTrue(boolean0 == boolean1);
      assertTrue(boolean1 == boolean0);
      assertEquals(false, jSDocInfoBuilder0.isPopulatedWithFileOverview());
      assertEquals(false, jSDocInfoBuilder0.isDescriptionRecorded());
      assertEquals(false, jSDocInfoBuilder0.isInterfaceRecorded());
      assertEquals(false, jSDocInfoBuilder0.isConstructorRecorded());
      assertEquals(true, jSDocInfoBuilder0.isPopulated());
      assertTrue(boolean1);
      
      boolean boolean2 = jSDocInfoBuilder0.recordVersion(string0);
      assertTrue(boolean0 == boolean1);
      assertFalse(boolean0 == boolean2);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertEquals(false, jSDocInfoBuilder0.isPopulatedWithFileOverview());
      assertEquals(false, jSDocInfoBuilder0.isDescriptionRecorded());
      assertEquals(false, jSDocInfoBuilder0.isInterfaceRecorded());
      assertEquals(false, jSDocInfoBuilder0.isConstructorRecorded());
      assertEquals(true, jSDocInfoBuilder0.isPopulated());
      assertFalse(boolean2);
  }

  @Test
  public void test45()  throws Throwable  {
      boolean boolean0 = true;
      JSDocInfoBuilder jSDocInfoBuilder0 = new JSDocInfoBuilder(boolean0);
      assertEquals(false, jSDocInfoBuilder0.isInterfaceRecorded());
      assertEquals(false, jSDocInfoBuilder0.isPopulatedWithFileOverview());
      assertEquals(false, jSDocInfoBuilder0.isConstructorRecorded());
      assertEquals(false, jSDocInfoBuilder0.isDescriptionRecorded());
      assertEquals(false, jSDocInfoBuilder0.isPopulated());
      assertNotNull(jSDocInfoBuilder0);
      
      String string0 = "NUMBER_OBJECT_TYPE";
      boolean boolean1 = jSDocInfoBuilder0.addReference(string0);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean0 == boolean1);
      assertEquals(false, jSDocInfoBuilder0.isInterfaceRecorded());
      assertEquals(false, jSDocInfoBuilder0.isPopulatedWithFileOverview());
      assertEquals(false, jSDocInfoBuilder0.isConstructorRecorded());
      assertEquals(true, jSDocInfoBuilder0.isPopulated());
      assertEquals(false, jSDocInfoBuilder0.isDescriptionRecorded());
      assertTrue(boolean1);
  }

  @Test
  public void test46()  throws Throwable  {
      boolean boolean0 = true;
      JSDocInfoBuilder jSDocInfoBuilder0 = new JSDocInfoBuilder(boolean0);
      assertEquals(false, jSDocInfoBuilder0.isPopulatedWithFileOverview());
      assertEquals(false, jSDocInfoBuilder0.isConstructorRecorded());
      assertEquals(false, jSDocInfoBuilder0.isPopulated());
      assertEquals(false, jSDocInfoBuilder0.isInterfaceRecorded());
      assertEquals(false, jSDocInfoBuilder0.isDescriptionRecorded());
      assertNotNull(jSDocInfoBuilder0);
      
      String string0 = "appendble";
      boolean boolean1 = jSDocInfoBuilder0.addAuthor(string0);
      assertTrue(boolean0 == boolean1);
      assertTrue(boolean1 == boolean0);
      assertEquals(false, jSDocInfoBuilder0.isPopulatedWithFileOverview());
      assertEquals(false, jSDocInfoBuilder0.isConstructorRecorded());
      assertEquals(true, jSDocInfoBuilder0.isPopulated());
      assertEquals(false, jSDocInfoBuilder0.isInterfaceRecorded());
      assertEquals(false, jSDocInfoBuilder0.isDescriptionRecorded());
      assertTrue(boolean1);
  }

  @Test
  public void test47()  throws Throwable  {
      boolean boolean0 = true;
      JSDocInfoBuilder jSDocInfoBuilder0 = new JSDocInfoBuilder(boolean0);
      assertEquals(false, jSDocInfoBuilder0.isDescriptionRecorded());
      assertEquals(false, jSDocInfoBuilder0.isPopulated());
      assertEquals(false, jSDocInfoBuilder0.isInterfaceRecorded());
      assertEquals(false, jSDocInfoBuilder0.isPopulatedWithFileOverview());
      assertEquals(false, jSDocInfoBuilder0.isConstructorRecorded());
      assertNotNull(jSDocInfoBuilder0);
      
      boolean boolean1 = jSDocInfoBuilder0.recordInterface();
      assertTrue(boolean0 == boolean1);
      assertTrue(boolean1 == boolean0);
      assertEquals(true, jSDocInfoBuilder0.isPopulated());
      assertEquals(false, jSDocInfoBuilder0.isDescriptionRecorded());
      assertEquals(true, jSDocInfoBuilder0.isInterfaceRecorded());
      assertEquals(false, jSDocInfoBuilder0.isPopulatedWithFileOverview());
      assertEquals(false, jSDocInfoBuilder0.isConstructorRecorded());
      assertTrue(boolean1);
      
      String string0 = null;
      JSDocInfo jSDocInfo0 = jSDocInfoBuilder0.build(string0);
      assertTrue(boolean0 == boolean1);
      assertEquals(false, jSDocInfoBuilder0.isDescriptionRecorded());
      assertEquals(false, jSDocInfoBuilder0.isPopulated());
      assertEquals(false, jSDocInfoBuilder0.isInterfaceRecorded());
      assertEquals(false, jSDocInfoBuilder0.isPopulatedWithFileOverview());
      assertEquals(false, jSDocInfoBuilder0.isConstructorRecorded());
      assertEquals(JSDocInfo.Visibility.INHERITED, jSDocInfo0.getVisibility());
      assertNull(jSDocInfo0.getLicense());
      assertEquals(false, jSDocInfo0.hasTypedefType());
      assertEquals(0, jSDocInfo0.getParameterCount());
      assertEquals(false, jSDocInfo0.isNoTypeCheck());
      assertEquals(false, jSDocInfo0.shouldPreserveTry());
      assertNull(jSDocInfo0.getDescription());
      assertNull(jSDocInfo0.getReturnDescription());
      assertEquals(false, jSDocInfo0.isNoShadow());
      assertEquals(false, jSDocInfo0.isDeprecated());
      assertNull(jSDocInfo0.getVersion());
      assertEquals(true, jSDocInfo0.isInterface());
      assertEquals(false, jSDocInfo0.hasFileOverview());
      assertEquals(false, jSDocInfo0.hasBaseType());
      assertNull(jSDocInfo0.getFileOverview());
      assertEquals(false, jSDocInfo0.hasEnumParameterType());
      assertNull(jSDocInfo0.getSourceName());
      assertEquals(false, jSDocInfo0.isConstant());
      assertEquals(false, jSDocInfo0.isOverride());
      assertEquals(false, jSDocInfo0.isExport());
      assertEquals("JSDocInfo", jSDocInfo0.toString());
      assertEquals(false, jSDocInfo0.hasReturnType());
      assertEquals(0, jSDocInfo0.getImplementedInterfaceCount());
      assertEquals(false, jSDocInfo0.isDefine());
      assertEquals(false, jSDocInfo0.hasType());
      assertEquals(false, jSDocInfo0.isConstructor());
      assertEquals(false, jSDocInfo0.isNoSideEffects());
      assertNull(jSDocInfo0.getDeprecationReason());
      assertNull(jSDocInfo0.getBlockDescription());
      assertEquals(false, jSDocInfo0.isImplicitCast());
      assertEquals(false, jSDocInfo0.isNoAlias());
      assertEquals(false, jSDocInfo0.isHidden());
      assertEquals(false, jSDocInfo0.hasThisType());
      assertNull(jSDocInfo0.getTemplateTypeName());
      assertNotNull(jSDocInfo0);
      
      JSTypeExpression jSTypeExpression0 = jSDocInfo0.getEnumParameterType();
      assertTrue(boolean0 == boolean1);
      assertEquals(false, jSDocInfoBuilder0.isDescriptionRecorded());
      assertEquals(false, jSDocInfoBuilder0.isPopulated());
      assertEquals(false, jSDocInfoBuilder0.isInterfaceRecorded());
      assertEquals(false, jSDocInfoBuilder0.isPopulatedWithFileOverview());
      assertEquals(false, jSDocInfoBuilder0.isConstructorRecorded());
      assertEquals(JSDocInfo.Visibility.INHERITED, jSDocInfo0.getVisibility());
      assertNull(jSDocInfo0.getLicense());
      assertEquals(false, jSDocInfo0.hasTypedefType());
      assertEquals(0, jSDocInfo0.getParameterCount());
      assertEquals(false, jSDocInfo0.isNoTypeCheck());
      assertEquals(false, jSDocInfo0.shouldPreserveTry());
      assertNull(jSDocInfo0.getDescription());
      assertNull(jSDocInfo0.getReturnDescription());
      assertEquals(false, jSDocInfo0.isNoShadow());
      assertEquals(false, jSDocInfo0.isDeprecated());
      assertNull(jSDocInfo0.getVersion());
      assertEquals(true, jSDocInfo0.isInterface());
      assertEquals(false, jSDocInfo0.hasFileOverview());
      assertEquals(false, jSDocInfo0.hasBaseType());
      assertNull(jSDocInfo0.getFileOverview());
      assertEquals(false, jSDocInfo0.hasEnumParameterType());
      assertNull(jSDocInfo0.getSourceName());
      assertEquals(false, jSDocInfo0.isConstant());
      assertEquals(false, jSDocInfo0.isOverride());
      assertEquals(false, jSDocInfo0.isExport());
      assertEquals("JSDocInfo", jSDocInfo0.toString());
      assertEquals(false, jSDocInfo0.hasReturnType());
      assertEquals(0, jSDocInfo0.getImplementedInterfaceCount());
      assertEquals(false, jSDocInfo0.isDefine());
      assertEquals(false, jSDocInfo0.hasType());
      assertEquals(false, jSDocInfo0.isConstructor());
      assertEquals(false, jSDocInfo0.isNoSideEffects());
      assertNull(jSDocInfo0.getDeprecationReason());
      assertNull(jSDocInfo0.getBlockDescription());
      assertEquals(false, jSDocInfo0.isImplicitCast());
      assertEquals(false, jSDocInfo0.isNoAlias());
      assertEquals(false, jSDocInfo0.isHidden());
      assertEquals(false, jSDocInfo0.hasThisType());
      assertNull(jSDocInfo0.getTemplateTypeName());
      assertNull(jSTypeExpression0);
      
      boolean boolean2 = jSDocInfoBuilder0.recordThrowDescription(jSTypeExpression0, string0);
      assertTrue(boolean0 == boolean2);
      assertTrue(boolean0 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertEquals(true, jSDocInfoBuilder0.isPopulated());
      assertEquals(false, jSDocInfoBuilder0.isDescriptionRecorded());
      assertEquals(false, jSDocInfoBuilder0.isInterfaceRecorded());
      assertEquals(false, jSDocInfoBuilder0.isPopulatedWithFileOverview());
      assertEquals(false, jSDocInfoBuilder0.isConstructorRecorded());
      assertEquals(JSDocInfo.Visibility.INHERITED, jSDocInfo0.getVisibility());
      assertNull(jSDocInfo0.getLicense());
      assertEquals(false, jSDocInfo0.hasTypedefType());
      assertEquals(0, jSDocInfo0.getParameterCount());
      assertEquals(false, jSDocInfo0.isNoTypeCheck());
      assertEquals(false, jSDocInfo0.shouldPreserveTry());
      assertNull(jSDocInfo0.getDescription());
      assertNull(jSDocInfo0.getReturnDescription());
      assertEquals(false, jSDocInfo0.isNoShadow());
      assertEquals(false, jSDocInfo0.isDeprecated());
      assertNull(jSDocInfo0.getVersion());
      assertEquals(true, jSDocInfo0.isInterface());
      assertEquals(false, jSDocInfo0.hasFileOverview());
      assertEquals(false, jSDocInfo0.hasBaseType());
      assertNull(jSDocInfo0.getFileOverview());
      assertEquals(false, jSDocInfo0.hasEnumParameterType());
      assertNull(jSDocInfo0.getSourceName());
      assertEquals(false, jSDocInfo0.isConstant());
      assertEquals(false, jSDocInfo0.isOverride());
      assertEquals(false, jSDocInfo0.isExport());
      assertEquals("JSDocInfo", jSDocInfo0.toString());
      assertEquals(false, jSDocInfo0.hasReturnType());
      assertEquals(0, jSDocInfo0.getImplementedInterfaceCount());
      assertEquals(false, jSDocInfo0.isDefine());
      assertEquals(false, jSDocInfo0.hasType());
      assertEquals(false, jSDocInfo0.isConstructor());
      assertEquals(false, jSDocInfo0.isNoSideEffects());
      assertNull(jSDocInfo0.getDeprecationReason());
      assertNull(jSDocInfo0.getBlockDescription());
      assertEquals(false, jSDocInfo0.isImplicitCast());
      assertEquals(false, jSDocInfo0.isNoAlias());
      assertEquals(false, jSDocInfo0.isHidden());
      assertEquals(false, jSDocInfo0.hasThisType());
      assertNull(jSDocInfo0.getTemplateTypeName());
      assertTrue(boolean2);
      
      boolean boolean3 = jSDocInfoBuilder0.recordThrowDescription(jSTypeExpression0, string0);
      assertFalse(boolean0 == boolean3);
      assertTrue(boolean0 == boolean2);
      assertTrue(boolean0 == boolean1);
      assertFalse(boolean3 == boolean2);
      assertFalse(boolean3 == boolean1);
      assertFalse(boolean3 == boolean0);
      assertEquals(true, jSDocInfoBuilder0.isPopulated());
      assertEquals(false, jSDocInfoBuilder0.isDescriptionRecorded());
      assertEquals(false, jSDocInfoBuilder0.isInterfaceRecorded());
      assertEquals(false, jSDocInfoBuilder0.isPopulatedWithFileOverview());
      assertEquals(false, jSDocInfoBuilder0.isConstructorRecorded());
      assertEquals(JSDocInfo.Visibility.INHERITED, jSDocInfo0.getVisibility());
      assertNull(jSDocInfo0.getLicense());
      assertEquals(false, jSDocInfo0.hasTypedefType());
      assertEquals(0, jSDocInfo0.getParameterCount());
      assertEquals(false, jSDocInfo0.isNoTypeCheck());
      assertEquals(false, jSDocInfo0.shouldPreserveTry());
      assertNull(jSDocInfo0.getDescription());
      assertNull(jSDocInfo0.getReturnDescription());
      assertEquals(false, jSDocInfo0.isNoShadow());
      assertEquals(false, jSDocInfo0.isDeprecated());
      assertNull(jSDocInfo0.getVersion());
      assertEquals(true, jSDocInfo0.isInterface());
      assertEquals(false, jSDocInfo0.hasFileOverview());
      assertEquals(false, jSDocInfo0.hasBaseType());
      assertNull(jSDocInfo0.getFileOverview());
      assertEquals(false, jSDocInfo0.hasEnumParameterType());
      assertNull(jSDocInfo0.getSourceName());
      assertEquals(false, jSDocInfo0.isConstant());
      assertEquals(false, jSDocInfo0.isOverride());
      assertEquals(false, jSDocInfo0.isExport());
      assertEquals("JSDocInfo", jSDocInfo0.toString());
      assertEquals(false, jSDocInfo0.hasReturnType());
      assertEquals(0, jSDocInfo0.getImplementedInterfaceCount());
      assertEquals(false, jSDocInfo0.isDefine());
      assertEquals(false, jSDocInfo0.hasType());
      assertEquals(false, jSDocInfo0.isConstructor());
      assertEquals(false, jSDocInfo0.isNoSideEffects());
      assertNull(jSDocInfo0.getDeprecationReason());
      assertNull(jSDocInfo0.getBlockDescription());
      assertEquals(false, jSDocInfo0.isImplicitCast());
      assertEquals(false, jSDocInfo0.isNoAlias());
      assertEquals(false, jSDocInfo0.isHidden());
      assertEquals(false, jSDocInfo0.hasThisType());
      assertNull(jSDocInfo0.getTemplateTypeName());
      assertFalse(boolean3);
  }

  @Test
  public void test48()  throws Throwable  {
      boolean boolean0 = true;
      JSDocInfoBuilder jSDocInfoBuilder0 = new JSDocInfoBuilder(boolean0);
      assertEquals(false, jSDocInfoBuilder0.isPopulated());
      assertEquals(false, jSDocInfoBuilder0.isInterfaceRecorded());
      assertEquals(false, jSDocInfoBuilder0.isPopulatedWithFileOverview());
      assertEquals(false, jSDocInfoBuilder0.isConstructorRecorded());
      assertEquals(false, jSDocInfoBuilder0.isDescriptionRecorded());
      assertNotNull(jSDocInfoBuilder0);
      
      boolean boolean1 = jSDocInfoBuilder0.recordInterface();
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean0 == boolean1);
      assertEquals(true, jSDocInfoBuilder0.isInterfaceRecorded());
      assertEquals(false, jSDocInfoBuilder0.isPopulatedWithFileOverview());
      assertEquals(true, jSDocInfoBuilder0.isPopulated());
      assertEquals(false, jSDocInfoBuilder0.isConstructorRecorded());
      assertEquals(false, jSDocInfoBuilder0.isDescriptionRecorded());
      assertTrue(boolean1);
      
      String string0 = null;
      JSDocInfo jSDocInfo0 = jSDocInfoBuilder0.build(string0);
      assertTrue(boolean0 == boolean1);
      assertNull(jSDocInfo0.getBlockDescription());
      assertNull(jSDocInfo0.getDescription());
      assertNull(jSDocInfo0.getLicense());
      assertEquals(false, jSDocInfo0.isNoAlias());
      assertNull(jSDocInfo0.getSourceName());
      assertEquals("JSDocInfo", jSDocInfo0.toString());
      assertEquals(0, jSDocInfo0.getImplementedInterfaceCount());
      assertEquals(false, jSDocInfo0.isNoSideEffects());
      assertEquals(false, jSDocInfo0.isConstructor());
      assertNull(jSDocInfo0.getDeprecationReason());
      assertNull(jSDocInfo0.getFileOverview());
      assertEquals(false, jSDocInfo0.hasThisType());
      assertEquals(false, jSDocInfo0.shouldPreserveTry());
      assertEquals(false, jSDocInfo0.hasTypedefType());
      assertEquals(false, jSDocInfo0.isNoShadow());
      assertEquals(false, jSDocInfo0.hasEnumParameterType());
      assertNull(jSDocInfo0.getTemplateTypeName());
      assertEquals(false, jSDocInfo0.isConstant());
      assertEquals(false, jSDocInfo0.hasType());
      assertEquals(JSDocInfo.Visibility.INHERITED, jSDocInfo0.getVisibility());
      assertEquals(false, jSDocInfo0.hasBaseType());
      assertEquals(true, jSDocInfo0.isInterface());
      assertEquals(false, jSDocInfo0.isOverride());
      assertNull(jSDocInfo0.getReturnDescription());
      assertEquals(false, jSDocInfo0.isExport());
      assertNull(jSDocInfo0.getVersion());
      assertEquals(false, jSDocInfo0.hasFileOverview());
      assertEquals(false, jSDocInfo0.isDefine());
      assertEquals(false, jSDocInfo0.hasReturnType());
      assertEquals(false, jSDocInfo0.isHidden());
      assertEquals(false, jSDocInfo0.isDeprecated());
      assertEquals(0, jSDocInfo0.getParameterCount());
      assertEquals(false, jSDocInfo0.isImplicitCast());
      assertEquals(false, jSDocInfo0.isNoTypeCheck());
      assertEquals(false, jSDocInfoBuilder0.isPopulated());
      assertEquals(false, jSDocInfoBuilder0.isInterfaceRecorded());
      assertEquals(false, jSDocInfoBuilder0.isPopulatedWithFileOverview());
      assertEquals(false, jSDocInfoBuilder0.isConstructorRecorded());
      assertEquals(false, jSDocInfoBuilder0.isDescriptionRecorded());
      assertNotNull(jSDocInfo0);
      
      JSTypeExpression jSTypeExpression0 = jSDocInfo0.getEnumParameterType();
      assertTrue(boolean0 == boolean1);
      assertNull(jSDocInfo0.getBlockDescription());
      assertNull(jSDocInfo0.getDescription());
      assertNull(jSDocInfo0.getLicense());
      assertEquals(false, jSDocInfo0.isNoAlias());
      assertNull(jSDocInfo0.getSourceName());
      assertEquals("JSDocInfo", jSDocInfo0.toString());
      assertEquals(0, jSDocInfo0.getImplementedInterfaceCount());
      assertEquals(false, jSDocInfo0.isNoSideEffects());
      assertEquals(false, jSDocInfo0.isConstructor());
      assertNull(jSDocInfo0.getDeprecationReason());
      assertNull(jSDocInfo0.getFileOverview());
      assertEquals(false, jSDocInfo0.hasThisType());
      assertEquals(false, jSDocInfo0.shouldPreserveTry());
      assertEquals(false, jSDocInfo0.hasTypedefType());
      assertEquals(false, jSDocInfo0.isNoShadow());
      assertEquals(false, jSDocInfo0.hasEnumParameterType());
      assertNull(jSDocInfo0.getTemplateTypeName());
      assertEquals(false, jSDocInfo0.isConstant());
      assertEquals(false, jSDocInfo0.hasType());
      assertEquals(JSDocInfo.Visibility.INHERITED, jSDocInfo0.getVisibility());
      assertEquals(false, jSDocInfo0.hasBaseType());
      assertEquals(true, jSDocInfo0.isInterface());
      assertEquals(false, jSDocInfo0.isOverride());
      assertNull(jSDocInfo0.getReturnDescription());
      assertEquals(false, jSDocInfo0.isExport());
      assertNull(jSDocInfo0.getVersion());
      assertEquals(false, jSDocInfo0.hasFileOverview());
      assertEquals(false, jSDocInfo0.isDefine());
      assertEquals(false, jSDocInfo0.hasReturnType());
      assertEquals(false, jSDocInfo0.isHidden());
      assertEquals(false, jSDocInfo0.isDeprecated());
      assertEquals(0, jSDocInfo0.getParameterCount());
      assertEquals(false, jSDocInfo0.isImplicitCast());
      assertEquals(false, jSDocInfo0.isNoTypeCheck());
      assertEquals(false, jSDocInfoBuilder0.isPopulated());
      assertEquals(false, jSDocInfoBuilder0.isInterfaceRecorded());
      assertEquals(false, jSDocInfoBuilder0.isPopulatedWithFileOverview());
      assertEquals(false, jSDocInfoBuilder0.isConstructorRecorded());
      assertEquals(false, jSDocInfoBuilder0.isDescriptionRecorded());
      assertNull(jSTypeExpression0);
      
      boolean boolean2 = jSDocInfoBuilder0.recordThrowType(jSTypeExpression0);
      assertTrue(boolean0 == boolean2);
      assertTrue(boolean0 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertNull(jSDocInfo0.getBlockDescription());
      assertNull(jSDocInfo0.getDescription());
      assertNull(jSDocInfo0.getLicense());
      assertEquals(false, jSDocInfo0.isNoAlias());
      assertNull(jSDocInfo0.getSourceName());
      assertEquals("JSDocInfo", jSDocInfo0.toString());
      assertEquals(0, jSDocInfo0.getImplementedInterfaceCount());
      assertEquals(false, jSDocInfo0.isNoSideEffects());
      assertEquals(false, jSDocInfo0.isConstructor());
      assertNull(jSDocInfo0.getDeprecationReason());
      assertNull(jSDocInfo0.getFileOverview());
      assertEquals(false, jSDocInfo0.hasThisType());
      assertEquals(false, jSDocInfo0.shouldPreserveTry());
      assertEquals(false, jSDocInfo0.hasTypedefType());
      assertEquals(false, jSDocInfo0.isNoShadow());
      assertEquals(false, jSDocInfo0.hasEnumParameterType());
      assertNull(jSDocInfo0.getTemplateTypeName());
      assertEquals(false, jSDocInfo0.isConstant());
      assertEquals(false, jSDocInfo0.hasType());
      assertEquals(JSDocInfo.Visibility.INHERITED, jSDocInfo0.getVisibility());
      assertEquals(false, jSDocInfo0.hasBaseType());
      assertEquals(true, jSDocInfo0.isInterface());
      assertEquals(false, jSDocInfo0.isOverride());
      assertNull(jSDocInfo0.getReturnDescription());
      assertEquals(false, jSDocInfo0.isExport());
      assertNull(jSDocInfo0.getVersion());
      assertEquals(false, jSDocInfo0.hasFileOverview());
      assertEquals(false, jSDocInfo0.isDefine());
      assertEquals(false, jSDocInfo0.hasReturnType());
      assertEquals(false, jSDocInfo0.isHidden());
      assertEquals(false, jSDocInfo0.isDeprecated());
      assertEquals(0, jSDocInfo0.getParameterCount());
      assertEquals(false, jSDocInfo0.isImplicitCast());
      assertEquals(false, jSDocInfo0.isNoTypeCheck());
      assertEquals(false, jSDocInfoBuilder0.isInterfaceRecorded());
      assertEquals(false, jSDocInfoBuilder0.isPopulatedWithFileOverview());
      assertEquals(true, jSDocInfoBuilder0.isPopulated());
      assertEquals(false, jSDocInfoBuilder0.isConstructorRecorded());
      assertEquals(false, jSDocInfoBuilder0.isDescriptionRecorded());
      assertTrue(boolean2);
  }

  @Test
  public void test49()  throws Throwable  {
      boolean boolean0 = false;
      JSDocInfoBuilder jSDocInfoBuilder0 = new JSDocInfoBuilder(boolean0);
      assertEquals(false, jSDocInfoBuilder0.isInterfaceRecorded());
      assertEquals(false, jSDocInfoBuilder0.isPopulatedWithFileOverview());
      assertEquals(false, jSDocInfoBuilder0.isDescriptionRecorded());
      assertEquals(false, jSDocInfoBuilder0.isPopulated());
      assertEquals(false, jSDocInfoBuilder0.isConstructorRecorded());
      assertNotNull(jSDocInfoBuilder0);
      
      int int0 = (-228);
      String string0 = "s;(mC*";
      Node node0 = Node.newString(int0, string0, int0, int0);
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(-228, node0.getType());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isQualifiedName());
      assertNotNull(node0);
      
      JSTypeRegistry jSTypeRegistry0 = null;
      JSTypeExpression jSTypeExpression0 = new JSTypeExpression(node0, string0, jSTypeRegistry0);
      assertEquals(false, jSTypeExpression0.isOptionalArg());
      assertEquals(false, jSTypeExpression0.isVarArgs());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(-228, node0.getType());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isQualifiedName());
      assertNotNull(jSTypeExpression0);
      
      boolean boolean1 = jSDocInfoBuilder0.recordBaseType(jSTypeExpression0);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean0 == boolean1);
      assertEquals(false, jSTypeExpression0.isOptionalArg());
      assertEquals(false, jSTypeExpression0.isVarArgs());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(-228, node0.getType());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, jSDocInfoBuilder0.isInterfaceRecorded());
      assertEquals(false, jSDocInfoBuilder0.isPopulatedWithFileOverview());
      assertEquals(false, jSDocInfoBuilder0.isDescriptionRecorded());
      assertEquals(true, jSDocInfoBuilder0.isPopulated());
      assertEquals(false, jSDocInfoBuilder0.isConstructorRecorded());
      assertTrue(boolean1);
      
      JSDocInfoBuilder jSDocInfoBuilder1 = new JSDocInfoBuilder(boolean1);
      assertFalse(boolean1 == boolean0);
      assertFalse(jSDocInfoBuilder1.equals((Object)jSDocInfoBuilder0));
      assertFalse(boolean0 == boolean1);
      assertFalse(jSDocInfoBuilder0.equals((Object)jSDocInfoBuilder1));
      assertNotSame(jSDocInfoBuilder1, jSDocInfoBuilder0);
      assertNotSame(jSDocInfoBuilder0, jSDocInfoBuilder1);
      assertEquals(false, jSTypeExpression0.isOptionalArg());
      assertEquals(false, jSTypeExpression0.isVarArgs());
      assertEquals(false, jSDocInfoBuilder1.isPopulatedWithFileOverview());
      assertEquals(false, jSDocInfoBuilder1.isPopulated());
      assertEquals(false, jSDocInfoBuilder1.isInterfaceRecorded());
      assertEquals(false, jSDocInfoBuilder1.isConstructorRecorded());
      assertEquals(false, jSDocInfoBuilder1.isDescriptionRecorded());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(-228, node0.getType());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, jSDocInfoBuilder0.isInterfaceRecorded());
      assertEquals(false, jSDocInfoBuilder0.isPopulatedWithFileOverview());
      assertEquals(false, jSDocInfoBuilder0.isDescriptionRecorded());
      assertEquals(true, jSDocInfoBuilder0.isPopulated());
      assertEquals(false, jSDocInfoBuilder0.isConstructorRecorded());
      assertNotNull(jSDocInfoBuilder1);
      
      boolean boolean2 = jSDocInfoBuilder1.recordTypedef(jSTypeExpression0);
      assertTrue(boolean1 == boolean2);
      assertFalse(boolean1 == boolean0);
      assertFalse(jSDocInfoBuilder1.equals((Object)jSDocInfoBuilder0));
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean0 == boolean1);
      assertFalse(boolean0 == boolean2);
      assertFalse(jSDocInfoBuilder0.equals((Object)jSDocInfoBuilder1));
      assertNotSame(jSDocInfoBuilder1, jSDocInfoBuilder0);
      assertNotSame(jSDocInfoBuilder0, jSDocInfoBuilder1);
      assertEquals(false, jSTypeExpression0.isOptionalArg());
      assertEquals(false, jSTypeExpression0.isVarArgs());
      assertEquals(false, jSDocInfoBuilder1.isPopulatedWithFileOverview());
      assertEquals(false, jSDocInfoBuilder1.isInterfaceRecorded());
      assertEquals(true, jSDocInfoBuilder1.isPopulated());
      assertEquals(false, jSDocInfoBuilder1.isConstructorRecorded());
      assertEquals(false, jSDocInfoBuilder1.isDescriptionRecorded());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(-228, node0.getType());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, jSDocInfoBuilder0.isInterfaceRecorded());
      assertEquals(false, jSDocInfoBuilder0.isPopulatedWithFileOverview());
      assertEquals(false, jSDocInfoBuilder0.isDescriptionRecorded());
      assertEquals(true, jSDocInfoBuilder0.isPopulated());
      assertEquals(false, jSDocInfoBuilder0.isConstructorRecorded());
      assertTrue(boolean2);
      
      boolean boolean3 = jSDocInfoBuilder1.recordThrowType(jSTypeExpression0);
      assertTrue(boolean1 == boolean2);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1 == boolean3);
      assertFalse(boolean3 == boolean1);
      assertTrue(boolean3 == boolean0);
      assertFalse(boolean3 == boolean2);
      assertFalse(jSDocInfoBuilder1.equals((Object)jSDocInfoBuilder0));
      assertFalse(boolean0 == boolean1);
      assertFalse(boolean0 == boolean2);
      assertTrue(boolean0 == boolean3);
      assertFalse(jSDocInfoBuilder0.equals((Object)jSDocInfoBuilder1));
      assertNotSame(jSDocInfoBuilder1, jSDocInfoBuilder0);
      assertNotSame(jSDocInfoBuilder0, jSDocInfoBuilder1);
      assertEquals(false, jSTypeExpression0.isOptionalArg());
      assertEquals(false, jSTypeExpression0.isVarArgs());
      assertEquals(false, jSDocInfoBuilder1.isPopulatedWithFileOverview());
      assertEquals(false, jSDocInfoBuilder1.isInterfaceRecorded());
      assertEquals(true, jSDocInfoBuilder1.isPopulated());
      assertEquals(false, jSDocInfoBuilder1.isConstructorRecorded());
      assertEquals(false, jSDocInfoBuilder1.isDescriptionRecorded());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(-228, node0.getType());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, jSDocInfoBuilder0.isInterfaceRecorded());
      assertEquals(false, jSDocInfoBuilder0.isPopulatedWithFileOverview());
      assertEquals(false, jSDocInfoBuilder0.isDescriptionRecorded());
      assertEquals(true, jSDocInfoBuilder0.isPopulated());
      assertEquals(false, jSDocInfoBuilder0.isConstructorRecorded());
      assertFalse(boolean3);
  }

  @Test
  public void test50()  throws Throwable  {
      boolean boolean0 = false;
      JSDocInfoBuilder jSDocInfoBuilder0 = new JSDocInfoBuilder(boolean0);
      assertEquals(false, jSDocInfoBuilder0.isInterfaceRecorded());
      assertEquals(false, jSDocInfoBuilder0.isPopulatedWithFileOverview());
      assertEquals(false, jSDocInfoBuilder0.isPopulated());
      assertEquals(false, jSDocInfoBuilder0.isConstructorRecorded());
      assertEquals(false, jSDocInfoBuilder0.isDescriptionRecorded());
      assertNotNull(jSDocInfoBuilder0);
      
      String string0 = "ASSIGN_LSH";
      boolean boolean1 = jSDocInfoBuilder0.recordTemplateTypeName(string0);
      assertFalse(boolean0 == boolean1);
      assertFalse(boolean1 == boolean0);
      assertEquals(true, jSDocInfoBuilder0.isPopulated());
      assertEquals(false, jSDocInfoBuilder0.isInterfaceRecorded());
      assertEquals(false, jSDocInfoBuilder0.isPopulatedWithFileOverview());
      assertEquals(false, jSDocInfoBuilder0.isConstructorRecorded());
      assertEquals(false, jSDocInfoBuilder0.isDescriptionRecorded());
      assertTrue(boolean1);
      
      boolean boolean2 = jSDocInfoBuilder0.recordTemplateTypeName(string0);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean0 == boolean2);
      assertFalse(boolean0 == boolean1);
      assertEquals(true, jSDocInfoBuilder0.isPopulated());
      assertEquals(false, jSDocInfoBuilder0.isInterfaceRecorded());
      assertEquals(false, jSDocInfoBuilder0.isPopulatedWithFileOverview());
      assertEquals(false, jSDocInfoBuilder0.isConstructorRecorded());
      assertEquals(false, jSDocInfoBuilder0.isDescriptionRecorded());
      assertFalse(boolean2);
  }

  @Test
  public void test51()  throws Throwable  {
      boolean boolean0 = true;
      JSDocInfoBuilder jSDocInfoBuilder0 = new JSDocInfoBuilder(boolean0);
      assertEquals(false, jSDocInfoBuilder0.isPopulated());
      assertEquals(false, jSDocInfoBuilder0.isInterfaceRecorded());
      assertEquals(false, jSDocInfoBuilder0.isConstructorRecorded());
      assertEquals(false, jSDocInfoBuilder0.isPopulatedWithFileOverview());
      assertEquals(false, jSDocInfoBuilder0.isDescriptionRecorded());
      assertNotNull(jSDocInfoBuilder0);
      
      String string0 = "3";
      boolean boolean1 = jSDocInfoBuilder0.recordParameterDescription(string0, string0);
      assertTrue(boolean0 == boolean1);
      assertTrue(boolean1 == boolean0);
      assertEquals(false, jSDocInfoBuilder0.isInterfaceRecorded());
      assertEquals(false, jSDocInfoBuilder0.isConstructorRecorded());
      assertEquals(false, jSDocInfoBuilder0.isPopulatedWithFileOverview());
      assertEquals(true, jSDocInfoBuilder0.isPopulated());
      assertEquals(false, jSDocInfoBuilder0.isDescriptionRecorded());
      assertTrue(boolean1);
      
      boolean boolean2 = jSDocInfoBuilder0.recordParameterDescription(string0, string0);
      assertFalse(boolean0 == boolean2);
      assertTrue(boolean0 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertEquals(false, jSDocInfoBuilder0.isInterfaceRecorded());
      assertEquals(false, jSDocInfoBuilder0.isConstructorRecorded());
      assertEquals(false, jSDocInfoBuilder0.isPopulatedWithFileOverview());
      assertEquals(true, jSDocInfoBuilder0.isPopulated());
      assertEquals(false, jSDocInfoBuilder0.isDescriptionRecorded());
      assertFalse(boolean2);
  }

  @Test
  public void test52()  throws Throwable  {
      boolean boolean0 = true;
      JSDocInfoBuilder jSDocInfoBuilder0 = new JSDocInfoBuilder(boolean0);
      assertEquals(false, jSDocInfoBuilder0.isConstructorRecorded());
      assertEquals(false, jSDocInfoBuilder0.isPopulated());
      assertEquals(false, jSDocInfoBuilder0.isPopulatedWithFileOverview());
      assertEquals(false, jSDocInfoBuilder0.isInterfaceRecorded());
      assertEquals(false, jSDocInfoBuilder0.isDescriptionRecorded());
      assertNotNull(jSDocInfoBuilder0);
      
      String string0 = "NUMBER_OBJECT_TYPE";
      JSTypeExpression jSTypeExpression0 = null;
      boolean boolean1 = jSDocInfoBuilder0.recordParameter(string0, jSTypeExpression0);
      assertTrue(boolean0 == boolean1);
      assertTrue(boolean1 == boolean0);
      assertEquals(false, jSDocInfoBuilder0.isConstructorRecorded());
      assertEquals(false, jSDocInfoBuilder0.isPopulatedWithFileOverview());
      assertEquals(true, jSDocInfoBuilder0.isPopulated());
      assertEquals(false, jSDocInfoBuilder0.isInterfaceRecorded());
      assertEquals(false, jSDocInfoBuilder0.isDescriptionRecorded());
      assertTrue(boolean1);
      
      Node node0 = null;
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      
      JSTypeExpression jSTypeExpression1 = new JSTypeExpression(node0, string0, jSTypeRegistry0);
      assertNotNull(jSTypeExpression1);
      
      boolean boolean2 = jSDocInfoBuilder0.recordParameter(string0, jSTypeExpression1);
      assertTrue(boolean0 == boolean1);
      assertFalse(boolean0 == boolean2);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertEquals(false, jSDocInfoBuilder0.isConstructorRecorded());
      assertEquals(false, jSDocInfoBuilder0.isPopulatedWithFileOverview());
      assertEquals(true, jSDocInfoBuilder0.isPopulated());
      assertEquals(false, jSDocInfoBuilder0.isInterfaceRecorded());
      assertEquals(false, jSDocInfoBuilder0.isDescriptionRecorded());
      assertFalse(boolean2);
  }

  @Test
  public void test53()  throws Throwable  {
      boolean boolean0 = false;
      JSDocInfoBuilder jSDocInfoBuilder0 = new JSDocInfoBuilder(boolean0);
      assertEquals(false, jSDocInfoBuilder0.isConstructorRecorded());
      assertEquals(false, jSDocInfoBuilder0.isInterfaceRecorded());
      assertEquals(false, jSDocInfoBuilder0.isDescriptionRecorded());
      assertEquals(false, jSDocInfoBuilder0.isPopulated());
      assertEquals(false, jSDocInfoBuilder0.isPopulatedWithFileOverview());
      assertNotNull(jSDocInfoBuilder0);
      
      int int0 = (-3);
      String string0 = "fZ|.^a?b;@V_c\"";
      Node node0 = Node.newString(int0, string0, int0, int0);
      assertEquals(-3, node0.getType());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.hasChildren());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(-1, node0.getLineno());
      assertNotNull(node0);
      
      JSTypeRegistry jSTypeRegistry0 = null;
      JSTypeExpression jSTypeExpression0 = new JSTypeExpression(node0, string0, jSTypeRegistry0);
      assertEquals(-3, node0.getType());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.hasChildren());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, jSTypeExpression0.isVarArgs());
      assertEquals(false, jSTypeExpression0.isOptionalArg());
      assertNotNull(jSTypeExpression0);
      
      boolean boolean1 = jSDocInfoBuilder0.recordDefineType(jSTypeExpression0);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean0 == boolean1);
      assertEquals(-3, node0.getType());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.hasChildren());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, jSDocInfoBuilder0.isConstructorRecorded());
      assertEquals(true, jSDocInfoBuilder0.isPopulated());
      assertEquals(false, jSDocInfoBuilder0.isInterfaceRecorded());
      assertEquals(false, jSDocInfoBuilder0.isDescriptionRecorded());
      assertEquals(false, jSDocInfoBuilder0.isPopulatedWithFileOverview());
      assertEquals(false, jSTypeExpression0.isVarArgs());
      assertEquals(false, jSTypeExpression0.isOptionalArg());
      assertTrue(boolean1);
      
      boolean boolean2 = jSDocInfoBuilder0.recordParameter(string0, jSTypeExpression0);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean0 == boolean1);
      assertTrue(boolean0 == boolean2);
      assertEquals(-3, node0.getType());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.hasChildren());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, jSDocInfoBuilder0.isConstructorRecorded());
      assertEquals(true, jSDocInfoBuilder0.isPopulated());
      assertEquals(false, jSDocInfoBuilder0.isInterfaceRecorded());
      assertEquals(false, jSDocInfoBuilder0.isDescriptionRecorded());
      assertEquals(false, jSDocInfoBuilder0.isPopulatedWithFileOverview());
      assertEquals(false, jSTypeExpression0.isVarArgs());
      assertEquals(false, jSTypeExpression0.isOptionalArg());
      assertFalse(boolean2);
  }

  @Test
  public void test54()  throws Throwable  {
      boolean boolean0 = true;
      JSDocInfoBuilder jSDocInfoBuilder0 = new JSDocInfoBuilder(boolean0);
      assertEquals(false, jSDocInfoBuilder0.isConstructorRecorded());
      assertEquals(false, jSDocInfoBuilder0.isInterfaceRecorded());
      assertEquals(false, jSDocInfoBuilder0.isDescriptionRecorded());
      assertEquals(false, jSDocInfoBuilder0.isPopulated());
      assertEquals(false, jSDocInfoBuilder0.isPopulatedWithFileOverview());
      assertNotNull(jSDocInfoBuilder0);
      
      JSDocInfo.Visibility jSDocInfo_Visibility0 = JSDocInfo.Visibility.PUBLIC;
      boolean boolean1 = jSDocInfoBuilder0.recordVisibility(jSDocInfo_Visibility0);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean0 == boolean1);
      assertEquals(false, jSDocInfoBuilder0.isConstructorRecorded());
      assertEquals(false, jSDocInfoBuilder0.isInterfaceRecorded());
      assertEquals(false, jSDocInfoBuilder0.isDescriptionRecorded());
      assertEquals(true, jSDocInfoBuilder0.isPopulated());
      assertEquals(false, jSDocInfoBuilder0.isPopulatedWithFileOverview());
      assertTrue(boolean1);
      
      boolean boolean2 = jSDocInfoBuilder0.recordVisibility(jSDocInfo_Visibility0);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean0 == boolean2);
      assertTrue(boolean0 == boolean1);
      assertEquals(false, jSDocInfoBuilder0.isConstructorRecorded());
      assertEquals(false, jSDocInfoBuilder0.isInterfaceRecorded());
      assertEquals(false, jSDocInfoBuilder0.isDescriptionRecorded());
      assertEquals(true, jSDocInfoBuilder0.isPopulated());
      assertEquals(false, jSDocInfoBuilder0.isPopulatedWithFileOverview());
      assertFalse(boolean2);
  }

  @Test
  public void test55()  throws Throwable  {
      boolean boolean0 = true;
      JSDocInfoBuilder jSDocInfoBuilder0 = new JSDocInfoBuilder(boolean0);
      assertEquals(false, jSDocInfoBuilder0.isPopulated());
      assertEquals(false, jSDocInfoBuilder0.isConstructorRecorded());
      assertEquals(false, jSDocInfoBuilder0.isPopulatedWithFileOverview());
      assertEquals(false, jSDocInfoBuilder0.isDescriptionRecorded());
      assertEquals(false, jSDocInfoBuilder0.isInterfaceRecorded());
      assertNotNull(jSDocInfoBuilder0);
      
      String string0 = "l|";
      int int0 = (-474);
      jSDocInfoBuilder0.markAnnotation(string0, int0, int0);
      assertEquals(false, jSDocInfoBuilder0.isPopulated());
      assertEquals(false, jSDocInfoBuilder0.isConstructorRecorded());
      assertEquals(false, jSDocInfoBuilder0.isPopulatedWithFileOverview());
      assertEquals(false, jSDocInfoBuilder0.isDescriptionRecorded());
      assertEquals(false, jSDocInfoBuilder0.isInterfaceRecorded());
      
      jSDocInfoBuilder0.markName(string0, int0, int0);
      assertEquals(false, jSDocInfoBuilder0.isPopulated());
      assertEquals(false, jSDocInfoBuilder0.isConstructorRecorded());
      assertEquals(false, jSDocInfoBuilder0.isPopulatedWithFileOverview());
      assertEquals(false, jSDocInfoBuilder0.isDescriptionRecorded());
      assertEquals(false, jSDocInfoBuilder0.isInterfaceRecorded());
  }

  @Test
  public void test56()  throws Throwable  {
      boolean boolean0 = false;
      JSDocInfoBuilder jSDocInfoBuilder0 = new JSDocInfoBuilder(boolean0);
      assertEquals(false, jSDocInfoBuilder0.isConstructorRecorded());
      assertEquals(false, jSDocInfoBuilder0.isPopulated());
      assertEquals(false, jSDocInfoBuilder0.isDescriptionRecorded());
      assertEquals(false, jSDocInfoBuilder0.isInterfaceRecorded());
      assertEquals(false, jSDocInfoBuilder0.isPopulatedWithFileOverview());
      assertNotNull(jSDocInfoBuilder0);
      
      JSDocInfo.Marker jSDocInfo_Marker0 = new JSDocInfo.Marker();
      assertNotNull(jSDocInfo_Marker0);
      
      JSDocInfo.StringPosition jSDocInfo_StringPosition0 = new JSDocInfo.StringPosition();
      assertEquals(0, jSDocInfo_StringPosition0.getEndLine());
      assertEquals(0, jSDocInfo_StringPosition0.getStartLine());
      assertEquals(0, jSDocInfo_StringPosition0.getPositionOnEndLine());
      assertEquals(0, jSDocInfo_StringPosition0.getPositionOnStartLine());
      assertNotNull(jSDocInfo_StringPosition0);
      
      jSDocInfo_Marker0.annotation = jSDocInfo_StringPosition0;
      assertEquals(0, jSDocInfo_Marker0.annotation.getPositionOnEndLine());
      assertEquals(0, jSDocInfo_Marker0.annotation.getEndLine());
      assertEquals(0, jSDocInfo_Marker0.annotation.getPositionOnStartLine());
      assertEquals(0, jSDocInfo_Marker0.annotation.getStartLine());
      assertEquals(0, jSDocInfo_StringPosition0.getEndLine());
      assertEquals(0, jSDocInfo_StringPosition0.getStartLine());
      assertEquals(0, jSDocInfo_StringPosition0.getPositionOnEndLine());
      assertEquals(0, jSDocInfo_StringPosition0.getPositionOnStartLine());
      assertNotNull(jSDocInfo_Marker0.annotation);
      
      String string0 = jSDocInfo_Marker0.annotation.getItem();
      assertNull(string0);
      
      int int0 = 59;
      jSDocInfoBuilder0.markName(string0, int0, int0);
      assertEquals(false, jSDocInfoBuilder0.isConstructorRecorded());
      assertEquals(false, jSDocInfoBuilder0.isPopulated());
      assertEquals(false, jSDocInfoBuilder0.isDescriptionRecorded());
      assertEquals(false, jSDocInfoBuilder0.isInterfaceRecorded());
      assertEquals(false, jSDocInfoBuilder0.isPopulatedWithFileOverview());
  }

  @Test
  public void test57()  throws Throwable  {
      boolean boolean0 = true;
      JSDocInfoBuilder jSDocInfoBuilder0 = new JSDocInfoBuilder(boolean0);
      assertEquals(false, jSDocInfoBuilder0.isInterfaceRecorded());
      assertEquals(false, jSDocInfoBuilder0.isPopulated());
      assertEquals(false, jSDocInfoBuilder0.isPopulatedWithFileOverview());
      assertEquals(false, jSDocInfoBuilder0.isConstructorRecorded());
      assertEquals(false, jSDocInfoBuilder0.isDescriptionRecorded());
      assertNotNull(jSDocInfoBuilder0);
      
      boolean boolean1 = jSDocInfoBuilder0.recordNoSideEffects();
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean0 == boolean1);
      assertEquals(false, jSDocInfoBuilder0.isInterfaceRecorded());
      assertEquals(true, jSDocInfoBuilder0.isPopulated());
      assertEquals(false, jSDocInfoBuilder0.isPopulatedWithFileOverview());
      assertEquals(false, jSDocInfoBuilder0.isConstructorRecorded());
      assertEquals(false, jSDocInfoBuilder0.isDescriptionRecorded());
      assertTrue(boolean1);
      
      String string0 = "";
      int int0 = (-5);
      jSDocInfoBuilder0.markAnnotation(string0, int0, int0);
      assertTrue(boolean0 == boolean1);
      assertEquals(false, jSDocInfoBuilder0.isInterfaceRecorded());
      assertEquals(true, jSDocInfoBuilder0.isPopulated());
      assertEquals(false, jSDocInfoBuilder0.isPopulatedWithFileOverview());
      assertEquals(false, jSDocInfoBuilder0.isConstructorRecorded());
      assertEquals(false, jSDocInfoBuilder0.isDescriptionRecorded());
      
      Node node0 = new Node(int0, int0, int0);
      assertEquals(-1, node0.getCharno());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(-5, node0.getType());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isSyntheticBlock());
      assertNotNull(node0);
      
      jSDocInfoBuilder0.markTypeNode(node0, int0, int0, int0, boolean1);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean0 == boolean1);
      assertEquals(-1, node0.getCharno());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(-5, node0.getType());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, jSDocInfoBuilder0.isInterfaceRecorded());
      assertEquals(true, jSDocInfoBuilder0.isPopulated());
      assertEquals(false, jSDocInfoBuilder0.isPopulatedWithFileOverview());
      assertEquals(false, jSDocInfoBuilder0.isConstructorRecorded());
      assertEquals(false, jSDocInfoBuilder0.isDescriptionRecorded());
  }

  @Test
  public void test58()  throws Throwable  {
      boolean boolean0 = false;
      JSDocInfoBuilder jSDocInfoBuilder0 = new JSDocInfoBuilder(boolean0);
      assertEquals(false, jSDocInfoBuilder0.isInterfaceRecorded());
      assertEquals(false, jSDocInfoBuilder0.isDescriptionRecorded());
      assertEquals(false, jSDocInfoBuilder0.isConstructorRecorded());
      assertEquals(false, jSDocInfoBuilder0.isPopulated());
      assertEquals(false, jSDocInfoBuilder0.isPopulatedWithFileOverview());
      assertNotNull(jSDocInfoBuilder0);
      
      int int0 = (-228);
      String string0 = "s;(mC*";
      Node node0 = Node.newString(int0, string0, int0, int0);
      assertEquals(false, node0.isOptionalArg());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(-1, node0.getCharno());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.hasChildren());
      assertEquals(-228, node0.getType());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertNotNull(node0);
      
      jSDocInfoBuilder0.markTypeNode(node0, int0, int0, int0, boolean0);
      assertEquals(false, jSDocInfoBuilder0.isInterfaceRecorded());
      assertEquals(false, jSDocInfoBuilder0.isDescriptionRecorded());
      assertEquals(false, jSDocInfoBuilder0.isConstructorRecorded());
      assertEquals(false, jSDocInfoBuilder0.isPopulated());
      assertEquals(false, jSDocInfoBuilder0.isPopulatedWithFileOverview());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(-1, node0.getCharno());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.hasChildren());
      assertEquals(-228, node0.getType());
      assertEquals(false, node0.hasMoreThanOneChild());
  }

  @Test
  public void test59()  throws Throwable  {
      boolean boolean0 = true;
      JSDocInfoBuilder jSDocInfoBuilder0 = new JSDocInfoBuilder(boolean0);
      assertEquals(false, jSDocInfoBuilder0.isPopulatedWithFileOverview());
      assertEquals(false, jSDocInfoBuilder0.isConstructorRecorded());
      assertEquals(false, jSDocInfoBuilder0.isPopulated());
      assertEquals(false, jSDocInfoBuilder0.isInterfaceRecorded());
      assertEquals(false, jSDocInfoBuilder0.isDescriptionRecorded());
      assertNotNull(jSDocInfoBuilder0);
      
      String string0 = null;
      int int0 = 28;
      String string1 = "";
      jSDocInfoBuilder0.markAnnotation(string1, int0, int0);
      assertEquals(false, jSDocInfoBuilder0.isPopulatedWithFileOverview());
      assertEquals(false, jSDocInfoBuilder0.isConstructorRecorded());
      assertEquals(false, jSDocInfoBuilder0.isPopulated());
      assertEquals(false, jSDocInfoBuilder0.isInterfaceRecorded());
      assertEquals(false, jSDocInfoBuilder0.isDescriptionRecorded());
      
      jSDocInfoBuilder0.markText(string0, int0, int0, int0, int0);
      assertEquals(false, jSDocInfoBuilder0.isPopulatedWithFileOverview());
      assertEquals(false, jSDocInfoBuilder0.isConstructorRecorded());
      assertEquals(false, jSDocInfoBuilder0.isPopulated());
      assertEquals(false, jSDocInfoBuilder0.isInterfaceRecorded());
      assertEquals(false, jSDocInfoBuilder0.isDescriptionRecorded());
  }

  @Test
  public void test60()  throws Throwable  {
      boolean boolean0 = false;
      JSDocInfoBuilder jSDocInfoBuilder0 = new JSDocInfoBuilder(boolean0);
      assertEquals(false, jSDocInfoBuilder0.isPopulated());
      assertEquals(false, jSDocInfoBuilder0.isConstructorRecorded());
      assertEquals(false, jSDocInfoBuilder0.isDescriptionRecorded());
      assertEquals(false, jSDocInfoBuilder0.isInterfaceRecorded());
      assertEquals(false, jSDocInfoBuilder0.isPopulatedWithFileOverview());
      assertNotNull(jSDocInfoBuilder0);
      
      int int0 = (-228);
      String string0 = "s;(mC*";
      jSDocInfoBuilder0.markText(string0, int0, int0, int0, int0);
      assertEquals(false, jSDocInfoBuilder0.isPopulated());
      assertEquals(false, jSDocInfoBuilder0.isConstructorRecorded());
      assertEquals(false, jSDocInfoBuilder0.isDescriptionRecorded());
      assertEquals(false, jSDocInfoBuilder0.isInterfaceRecorded());
      assertEquals(false, jSDocInfoBuilder0.isPopulatedWithFileOverview());
  }

  @Test
  public void test61()  throws Throwable  {
      boolean boolean0 = false;
      JSDocInfoBuilder jSDocInfoBuilder0 = new JSDocInfoBuilder(boolean0);
      assertEquals(false, jSDocInfoBuilder0.isPopulated());
      assertEquals(false, jSDocInfoBuilder0.isInterfaceRecorded());
      assertEquals(false, jSDocInfoBuilder0.isDescriptionRecorded());
      assertEquals(false, jSDocInfoBuilder0.isPopulatedWithFileOverview());
      assertEquals(false, jSDocInfoBuilder0.isConstructorRecorded());
      assertNotNull(jSDocInfoBuilder0);
      
      String string0 = "ASSIGN_LSH";
      int int0 = 59;
      jSDocInfoBuilder0.markAnnotation(string0, int0, int0);
      assertEquals(false, jSDocInfoBuilder0.isPopulated());
      assertEquals(false, jSDocInfoBuilder0.isInterfaceRecorded());
      assertEquals(false, jSDocInfoBuilder0.isDescriptionRecorded());
      assertEquals(false, jSDocInfoBuilder0.isPopulatedWithFileOverview());
      assertEquals(false, jSDocInfoBuilder0.isConstructorRecorded());
  }

  @Test
  public void test62()  throws Throwable  {
      boolean boolean0 = true;
      JSDocInfoBuilder jSDocInfoBuilder0 = new JSDocInfoBuilder(boolean0);
      assertEquals(false, jSDocInfoBuilder0.isPopulated());
      assertEquals(false, jSDocInfoBuilder0.isInterfaceRecorded());
      assertEquals(false, jSDocInfoBuilder0.isPopulatedWithFileOverview());
      assertEquals(false, jSDocInfoBuilder0.isDescriptionRecorded());
      assertEquals(false, jSDocInfoBuilder0.isConstructorRecorded());
      assertNotNull(jSDocInfoBuilder0);
      
      String string0 = null;
      JSDocInfo.Visibility jSDocInfo_Visibility0 = JSDocInfo.Visibility.INHERITED;
      boolean boolean1 = jSDocInfoBuilder0.recordVisibility(jSDocInfo_Visibility0);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean0 == boolean1);
      assertEquals(true, jSDocInfoBuilder0.isPopulated());
      assertEquals(false, jSDocInfoBuilder0.isInterfaceRecorded());
      assertEquals(false, jSDocInfoBuilder0.isPopulatedWithFileOverview());
      assertEquals(false, jSDocInfoBuilder0.isDescriptionRecorded());
      assertEquals(false, jSDocInfoBuilder0.isConstructorRecorded());
      assertTrue(boolean1);
      
      JSDocInfo jSDocInfo0 = jSDocInfoBuilder0.build(string0);
      assertTrue(boolean0 == boolean1);
      assertEquals(false, jSDocInfo0.isInterface());
      assertEquals(false, jSDocInfo0.hasBaseType());
      assertNull(jSDocInfo0.getSourceName());
      assertNull(jSDocInfo0.getBlockDescription());
      assertEquals(false, jSDocInfo0.hasThisType());
      assertEquals(false, jSDocInfo0.isDeprecated());
      assertEquals(false, jSDocInfo0.isNoSideEffects());
      assertNull(jSDocInfo0.getDescription());
      assertEquals(false, jSDocInfo0.isConstructor());
      assertEquals(0, jSDocInfo0.getImplementedInterfaceCount());
      assertEquals(0, jSDocInfo0.getParameterCount());
      assertNull(jSDocInfo0.getFileOverview());
      assertEquals(false, jSDocInfo0.isImplicitCast());
      assertEquals(JSDocInfo.Visibility.INHERITED, jSDocInfo0.getVisibility());
      assertNull(jSDocInfo0.getVersion());
      assertEquals(false, jSDocInfo0.isNoAlias());
      assertNull(jSDocInfo0.getLicense());
      assertEquals(false, jSDocInfo0.isOverride());
      assertEquals(false, jSDocInfo0.isExport());
      assertEquals("JSDocInfo", jSDocInfo0.toString());
      assertEquals(false, jSDocInfo0.isConstant());
      assertNull(jSDocInfo0.getReturnDescription());
      assertEquals(false, jSDocInfo0.isNoTypeCheck());
      assertEquals(false, jSDocInfo0.isNoShadow());
      assertNull(jSDocInfo0.getTemplateTypeName());
      assertEquals(false, jSDocInfo0.shouldPreserveTry());
      assertEquals(false, jSDocInfo0.isDefine());
      assertEquals(false, jSDocInfo0.hasTypedefType());
      assertNull(jSDocInfo0.getDeprecationReason());
      assertEquals(false, jSDocInfo0.hasEnumParameterType());
      assertEquals(false, jSDocInfo0.isHidden());
      assertEquals(false, jSDocInfo0.hasReturnType());
      assertEquals(false, jSDocInfo0.hasType());
      assertEquals(false, jSDocInfo0.hasFileOverview());
      assertEquals(false, jSDocInfoBuilder0.isPopulated());
      assertEquals(false, jSDocInfoBuilder0.isInterfaceRecorded());
      assertEquals(false, jSDocInfoBuilder0.isPopulatedWithFileOverview());
      assertEquals(false, jSDocInfoBuilder0.isDescriptionRecorded());
      assertEquals(false, jSDocInfoBuilder0.isConstructorRecorded());
      assertNotNull(jSDocInfo0);
  }

  @Test
  public void test63()  throws Throwable  {
      boolean boolean0 = true;
      JSDocInfoBuilder jSDocInfoBuilder0 = new JSDocInfoBuilder(boolean0);
      assertEquals(false, jSDocInfoBuilder0.isPopulated());
      assertEquals(false, jSDocInfoBuilder0.isInterfaceRecorded());
      assertEquals(false, jSDocInfoBuilder0.isConstructorRecorded());
      assertEquals(false, jSDocInfoBuilder0.isDescriptionRecorded());
      assertEquals(false, jSDocInfoBuilder0.isPopulatedWithFileOverview());
      assertNotNull(jSDocInfoBuilder0);
      
      String string0 = "kH?2";
      JSDocInfo jSDocInfo0 = jSDocInfoBuilder0.build(string0);
      assertEquals(false, jSDocInfoBuilder0.isPopulated());
      assertEquals(false, jSDocInfoBuilder0.isInterfaceRecorded());
      assertEquals(false, jSDocInfoBuilder0.isConstructorRecorded());
      assertEquals(false, jSDocInfoBuilder0.isDescriptionRecorded());
      assertEquals(false, jSDocInfoBuilder0.isPopulatedWithFileOverview());
      assertNull(jSDocInfo0);
  }

  @Test
  public void test64()  throws Throwable  {
      JSDocInfo.TypePosition jSDocInfo_TypePosition0 = new JSDocInfo.TypePosition();
      assertFalse(jSDocInfo_TypePosition0.hasBrackets);
      assertEquals(0, jSDocInfo_TypePosition0.getStartLine());
      assertEquals(0, jSDocInfo_TypePosition0.getPositionOnEndLine());
      assertEquals(0, jSDocInfo_TypePosition0.getEndLine());
      assertEquals(0, jSDocInfo_TypePosition0.getPositionOnStartLine());
      assertNotNull(jSDocInfo_TypePosition0);
      
      JSDocInfoBuilder jSDocInfoBuilder0 = new JSDocInfoBuilder(jSDocInfo_TypePosition0.hasBrackets);
      assertFalse(jSDocInfo_TypePosition0.hasBrackets);
      assertEquals(false, jSDocInfoBuilder0.isDescriptionRecorded());
      assertEquals(false, jSDocInfoBuilder0.isInterfaceRecorded());
      assertEquals(false, jSDocInfoBuilder0.isConstructorRecorded());
      assertEquals(false, jSDocInfoBuilder0.isPopulatedWithFileOverview());
      assertEquals(false, jSDocInfoBuilder0.isPopulated());
      assertEquals(0, jSDocInfo_TypePosition0.getStartLine());
      assertEquals(0, jSDocInfo_TypePosition0.getPositionOnEndLine());
      assertEquals(0, jSDocInfo_TypePosition0.getEndLine());
      assertEquals(0, jSDocInfo_TypePosition0.getPositionOnStartLine());
      assertNotNull(jSDocInfoBuilder0);
      
      String string0 = ".}7i";
      boolean boolean0 = jSDocInfoBuilder0.recordDescription(string0);
      assertFalse(jSDocInfo_TypePosition0.hasBrackets);
      assertEquals(true, jSDocInfoBuilder0.isPopulated());
      assertEquals(false, jSDocInfoBuilder0.isInterfaceRecorded());
      assertEquals(false, jSDocInfoBuilder0.isConstructorRecorded());
      assertEquals(false, jSDocInfoBuilder0.isPopulatedWithFileOverview());
      assertEquals(true, jSDocInfoBuilder0.isDescriptionRecorded());
      assertEquals(0, jSDocInfo_TypePosition0.getStartLine());
      assertEquals(0, jSDocInfo_TypePosition0.getPositionOnEndLine());
      assertEquals(0, jSDocInfo_TypePosition0.getEndLine());
      assertEquals(0, jSDocInfo_TypePosition0.getPositionOnStartLine());
      assertTrue(boolean0);
      
      boolean boolean1 = jSDocInfoBuilder0.isDescriptionRecorded();
      assertTrue(boolean1 == boolean0);
      assertFalse(jSDocInfo_TypePosition0.hasBrackets);
      assertEquals(true, jSDocInfoBuilder0.isPopulated());
      assertEquals(false, jSDocInfoBuilder0.isInterfaceRecorded());
      assertEquals(false, jSDocInfoBuilder0.isConstructorRecorded());
      assertEquals(false, jSDocInfoBuilder0.isPopulatedWithFileOverview());
      assertEquals(true, jSDocInfoBuilder0.isDescriptionRecorded());
      assertEquals(0, jSDocInfo_TypePosition0.getStartLine());
      assertEquals(0, jSDocInfo_TypePosition0.getPositionOnEndLine());
      assertEquals(0, jSDocInfo_TypePosition0.getEndLine());
      assertEquals(0, jSDocInfo_TypePosition0.getPositionOnStartLine());
      assertTrue(boolean1);
  }

  @Test
  public void test65()  throws Throwable  {
      boolean boolean0 = true;
      JSDocInfoBuilder jSDocInfoBuilder0 = new JSDocInfoBuilder(boolean0);
      assertEquals(false, jSDocInfoBuilder0.isPopulated());
      assertEquals(false, jSDocInfoBuilder0.isDescriptionRecorded());
      assertEquals(false, jSDocInfoBuilder0.isInterfaceRecorded());
      assertEquals(false, jSDocInfoBuilder0.isPopulatedWithFileOverview());
      assertEquals(false, jSDocInfoBuilder0.isConstructorRecorded());
      assertNotNull(jSDocInfoBuilder0);
      
      boolean boolean1 = jSDocInfoBuilder0.isDescriptionRecorded();
      assertFalse(boolean0 == boolean1);
      assertFalse(boolean1 == boolean0);
      assertEquals(false, jSDocInfoBuilder0.isPopulated());
      assertEquals(false, jSDocInfoBuilder0.isDescriptionRecorded());
      assertEquals(false, jSDocInfoBuilder0.isInterfaceRecorded());
      assertEquals(false, jSDocInfoBuilder0.isPopulatedWithFileOverview());
      assertEquals(false, jSDocInfoBuilder0.isConstructorRecorded());
      assertFalse(boolean1);
  }

  @Test
  public void test66()  throws Throwable  {
      boolean boolean0 = true;
      JSDocInfoBuilder jSDocInfoBuilder0 = new JSDocInfoBuilder(boolean0);
      assertEquals(false, jSDocInfoBuilder0.isInterfaceRecorded());
      assertEquals(false, jSDocInfoBuilder0.isConstructorRecorded());
      assertEquals(false, jSDocInfoBuilder0.isDescriptionRecorded());
      assertEquals(false, jSDocInfoBuilder0.isPopulatedWithFileOverview());
      assertEquals(false, jSDocInfoBuilder0.isPopulated());
      assertNotNull(jSDocInfoBuilder0);
      
      String string0 = null;
      boolean boolean1 = jSDocInfoBuilder0.recordDeprecationReason(string0);
      assertTrue(boolean0 == boolean1);
      assertTrue(boolean1 == boolean0);
      assertEquals(false, jSDocInfoBuilder0.isInterfaceRecorded());
      assertEquals(false, jSDocInfoBuilder0.isConstructorRecorded());
      assertEquals(false, jSDocInfoBuilder0.isDescriptionRecorded());
      assertEquals(true, jSDocInfoBuilder0.isPopulated());
      assertEquals(false, jSDocInfoBuilder0.isPopulatedWithFileOverview());
      assertTrue(boolean1);
      
      boolean boolean2 = jSDocInfoBuilder0.isPopulatedWithFileOverview();
      assertFalse(boolean0 == boolean2);
      assertTrue(boolean0 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertEquals(false, jSDocInfoBuilder0.isInterfaceRecorded());
      assertEquals(false, jSDocInfoBuilder0.isConstructorRecorded());
      assertEquals(false, jSDocInfoBuilder0.isDescriptionRecorded());
      assertEquals(true, jSDocInfoBuilder0.isPopulated());
      assertEquals(false, jSDocInfoBuilder0.isPopulatedWithFileOverview());
      assertFalse(boolean2);
  }

  @Test
  public void test67()  throws Throwable  {
      boolean boolean0 = true;
      JSDocInfoBuilder jSDocInfoBuilder0 = new JSDocInfoBuilder(boolean0);
      assertEquals(false, jSDocInfoBuilder0.isPopulated());
      assertEquals(false, jSDocInfoBuilder0.isInterfaceRecorded());
      assertEquals(false, jSDocInfoBuilder0.isPopulatedWithFileOverview());
      assertEquals(false, jSDocInfoBuilder0.isDescriptionRecorded());
      assertEquals(false, jSDocInfoBuilder0.isConstructorRecorded());
      assertNotNull(jSDocInfoBuilder0);
      
      String string0 = "appendble";
      boolean boolean1 = jSDocInfoBuilder0.recordFileOverview(string0);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean0 == boolean1);
      assertEquals(false, jSDocInfoBuilder0.isInterfaceRecorded());
      assertEquals(true, jSDocInfoBuilder0.isPopulated());
      assertEquals(true, jSDocInfoBuilder0.isPopulatedWithFileOverview());
      assertEquals(false, jSDocInfoBuilder0.isDescriptionRecorded());
      assertEquals(false, jSDocInfoBuilder0.isConstructorRecorded());
      assertTrue(boolean1);
      
      boolean boolean2 = jSDocInfoBuilder0.isPopulatedWithFileOverview();
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean0 == boolean1);
      assertTrue(boolean0 == boolean2);
      assertEquals(false, jSDocInfoBuilder0.isInterfaceRecorded());
      assertEquals(true, jSDocInfoBuilder0.isPopulated());
      assertEquals(true, jSDocInfoBuilder0.isPopulatedWithFileOverview());
      assertEquals(false, jSDocInfoBuilder0.isDescriptionRecorded());
      assertEquals(false, jSDocInfoBuilder0.isConstructorRecorded());
      assertTrue(boolean2);
  }

  @Test
  public void test68()  throws Throwable  {
      boolean boolean0 = false;
      JSDocInfoBuilder jSDocInfoBuilder0 = new JSDocInfoBuilder(boolean0);
      assertEquals(false, jSDocInfoBuilder0.isPopulatedWithFileOverview());
      assertEquals(false, jSDocInfoBuilder0.isConstructorRecorded());
      assertEquals(false, jSDocInfoBuilder0.isPopulated());
      assertEquals(false, jSDocInfoBuilder0.isDescriptionRecorded());
      assertEquals(false, jSDocInfoBuilder0.isInterfaceRecorded());
      assertNotNull(jSDocInfoBuilder0);
      
      String string0 = "ASSIGN_LSH";
      boolean boolean1 = jSDocInfoBuilder0.hasParameter(string0);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean0 == boolean1);
      assertEquals(false, jSDocInfoBuilder0.isPopulatedWithFileOverview());
      assertEquals(false, jSDocInfoBuilder0.isConstructorRecorded());
      assertEquals(false, jSDocInfoBuilder0.isPopulated());
      assertEquals(false, jSDocInfoBuilder0.isDescriptionRecorded());
      assertEquals(false, jSDocInfoBuilder0.isInterfaceRecorded());
      assertFalse(boolean1);
  }

  @Test
  public void test69()  throws Throwable  {
      boolean boolean0 = true;
      JSDocInfoBuilder jSDocInfoBuilder0 = new JSDocInfoBuilder(boolean0);
      assertEquals(false, jSDocInfoBuilder0.isDescriptionRecorded());
      assertEquals(false, jSDocInfoBuilder0.isConstructorRecorded());
      assertEquals(false, jSDocInfoBuilder0.isInterfaceRecorded());
      assertEquals(false, jSDocInfoBuilder0.isPopulated());
      assertEquals(false, jSDocInfoBuilder0.isPopulatedWithFileOverview());
      assertNotNull(jSDocInfoBuilder0);
      
      boolean boolean1 = jSDocInfoBuilder0.isConstructorRecorded();
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean0 == boolean1);
      assertEquals(false, jSDocInfoBuilder0.isDescriptionRecorded());
      assertEquals(false, jSDocInfoBuilder0.isConstructorRecorded());
      assertEquals(false, jSDocInfoBuilder0.isInterfaceRecorded());
      assertEquals(false, jSDocInfoBuilder0.isPopulated());
      assertEquals(false, jSDocInfoBuilder0.isPopulatedWithFileOverview());
      assertFalse(boolean1);
  }

  @Test
  public void test70()  throws Throwable  {
      boolean boolean0 = true;
      JSDocInfoBuilder jSDocInfoBuilder0 = new JSDocInfoBuilder(boolean0);
      assertEquals(false, jSDocInfoBuilder0.isConstructorRecorded());
      assertEquals(false, jSDocInfoBuilder0.isInterfaceRecorded());
      assertEquals(false, jSDocInfoBuilder0.isPopulatedWithFileOverview());
      assertEquals(false, jSDocInfoBuilder0.isPopulated());
      assertEquals(false, jSDocInfoBuilder0.isDescriptionRecorded());
      assertNotNull(jSDocInfoBuilder0);
      
      boolean boolean1 = jSDocInfoBuilder0.isPopulatedWithFileOverview();
      assertFalse(boolean0 == boolean1);
      assertFalse(boolean1 == boolean0);
      assertEquals(false, jSDocInfoBuilder0.isConstructorRecorded());
      assertEquals(false, jSDocInfoBuilder0.isInterfaceRecorded());
      assertEquals(false, jSDocInfoBuilder0.isPopulatedWithFileOverview());
      assertEquals(false, jSDocInfoBuilder0.isPopulated());
      assertEquals(false, jSDocInfoBuilder0.isDescriptionRecorded());
      assertFalse(boolean1);
  }

  @Test
  public void test71()  throws Throwable  {
      boolean boolean0 = true;
      JSDocInfoBuilder jSDocInfoBuilder0 = new JSDocInfoBuilder(boolean0);
      assertEquals(false, jSDocInfoBuilder0.isConstructorRecorded());
      assertEquals(false, jSDocInfoBuilder0.isPopulatedWithFileOverview());
      assertEquals(false, jSDocInfoBuilder0.isInterfaceRecorded());
      assertEquals(false, jSDocInfoBuilder0.isPopulated());
      assertEquals(false, jSDocInfoBuilder0.isDescriptionRecorded());
      assertNotNull(jSDocInfoBuilder0);
      
      String string0 = "";
      boolean boolean1 = jSDocInfoBuilder0.recordBlockDescription(string0);
      assertTrue(boolean0 == boolean1);
      assertTrue(boolean1 == boolean0);
      assertEquals(false, jSDocInfoBuilder0.isConstructorRecorded());
      assertEquals(true, jSDocInfoBuilder0.isPopulated());
      assertEquals(false, jSDocInfoBuilder0.isPopulatedWithFileOverview());
      assertEquals(false, jSDocInfoBuilder0.isInterfaceRecorded());
      assertEquals(false, jSDocInfoBuilder0.isDescriptionRecorded());
      assertTrue(boolean1);
  }

  @Test
  public void test72()  throws Throwable  {
      boolean boolean0 = true;
      JSDocInfoBuilder jSDocInfoBuilder0 = new JSDocInfoBuilder(boolean0);
      assertEquals(false, jSDocInfoBuilder0.isPopulated());
      assertEquals(false, jSDocInfoBuilder0.isInterfaceRecorded());
      assertEquals(false, jSDocInfoBuilder0.isPopulatedWithFileOverview());
      assertEquals(false, jSDocInfoBuilder0.isConstructorRecorded());
      assertEquals(false, jSDocInfoBuilder0.isDescriptionRecorded());
      assertNotNull(jSDocInfoBuilder0);
      
      boolean boolean1 = jSDocInfoBuilder0.isInterfaceRecorded();
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean0 == boolean1);
      assertEquals(false, jSDocInfoBuilder0.isPopulated());
      assertEquals(false, jSDocInfoBuilder0.isInterfaceRecorded());
      assertEquals(false, jSDocInfoBuilder0.isPopulatedWithFileOverview());
      assertEquals(false, jSDocInfoBuilder0.isConstructorRecorded());
      assertEquals(false, jSDocInfoBuilder0.isDescriptionRecorded());
      assertFalse(boolean1);
  }
}
