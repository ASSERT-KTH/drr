/*
 * This file was automatically generated by EvoSuite
 * Fri Dec 12 06:40:53 GMT 2014
 */

package com.google.javascript.jscomp;

import static org.junit.Assert.*; import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.junit.Test;
import com.google.javascript.jscomp.JSModule;
import com.google.javascript.jscomp.JSModuleGraph;
import com.google.javascript.jscomp.JSSourceFile;
import java.io.File;
import java.util.ArrayList;
import java.util.Collection;
import java.util.List;
import java.util.Set;
import java.util.Vector;



import org.evosuite.runtime.mock.java.io.MockFile;
import org.junit.runner.RunWith;


public class JSModuleGraphEvoSuite_branch_Test  {

  @Test
  public void test00()  throws Throwable  {
      String string0 = "";
      JSModule[] jSModuleArray0 = new JSModule[1];
      JSModule jSModule0 = new JSModule(string0);
      assertEquals("", jSModule0.toString());
      assertEquals("", jSModule0.getName());
      assertNotNull(jSModule0);
      
      MockFile mockFile0 = new MockFile(string0);
      assertNotNull(mockFile0);
      
      JSSourceFile jSSourceFile0 = JSSourceFile.fromFile((File) mockFile0);
      assertEquals("", jSSourceFile0.getOriginalPath());
      assertEquals("", jSSourceFile0.getName());
      assertNotNull(jSSourceFile0);
      
      jSModule0.addFirst(jSSourceFile0);
      assertEquals("", jSSourceFile0.getOriginalPath());
      assertEquals("", jSSourceFile0.getName());
      assertEquals("", jSModule0.toString());
      assertEquals("", jSModule0.getName());
      
      jSModuleArray0[0] = jSModule0;
      assertEquals("", jSModuleArray0[0].toString());
      assertEquals("", jSModuleArray0[0].getName());
      assertEquals("", jSModule0.toString());
      assertEquals("", jSModule0.getName());
      assertNotNull(jSModuleArray0[0]);
      
      JSModuleGraph jSModuleGraph0 = new JSModuleGraph(jSModuleArray0);
      assertNotNull(jSModuleGraph0);
      
      jSModuleGraph0.coalesceDuplicateFiles();
  }

  @Test
  public void test01()  throws Throwable  {
      ArrayList<JSModule> arrayList0 = new ArrayList<JSModule>();
      assertEquals(true, arrayList0.isEmpty());
      assertEquals("[]", arrayList0.toString());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      
      JSModuleGraph jSModuleGraph0 = new JSModuleGraph((List<JSModule>) arrayList0);
      assertEquals(true, arrayList0.isEmpty());
      assertEquals("[]", arrayList0.toString());
      assertEquals(0, arrayList0.size());
      assertNotNull(jSModuleGraph0);
      
      String string0 = ".=cs X.C]*LQ/t71v";
      JSModule jSModule0 = new JSModule(string0);
      assertEquals(".=cs X.C]*LQ/t71v", jSModule0.getName());
      assertEquals(".=cs X.C]*LQ/t71v", jSModule0.toString());
      assertNotNull(jSModule0);
      
      Set<JSModule> set0 = jSModuleGraph0.getTransitiveDepsDeepestFirst(jSModule0);
      assertEquals(true, arrayList0.isEmpty());
      assertEquals("[]", arrayList0.toString());
      assertEquals(0, arrayList0.size());
      assertEquals(".=cs X.C]*LQ/t71v", jSModule0.getName());
      assertEquals(".=cs X.C]*LQ/t71v", jSModule0.toString());
      assertEquals(0, set0.size());
      assertEquals(true, set0.isEmpty());
      assertNotNull(set0);
      
      Set<JSModule> set1 = jSModuleGraph0.getTransitiveDepsDeepestFirst(jSModule0);
      assertSame(set1, set0);
      assertEquals(0, set1.size());
      assertEquals(true, set1.isEmpty());
      assertEquals(true, arrayList0.isEmpty());
      assertEquals("[]", arrayList0.toString());
      assertEquals(0, arrayList0.size());
      assertEquals(".=cs X.C]*LQ/t71v", jSModule0.getName());
      assertEquals(".=cs X.C]*LQ/t71v", jSModule0.toString());
      assertNotNull(set1);
  }

  @Test
  public void test02()  throws Throwable  {
      String string0 = "X_?L";
      JSModule jSModule0 = new JSModule(string0);
      assertEquals("X_?L", jSModule0.toString());
      assertEquals("X_?L", jSModule0.getName());
      assertNotNull(jSModule0);
      
      Vector<JSModule> vector0 = new Vector<JSModule>();
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertEquals(true, vector0.isEmpty());
      assertEquals(0, vector0.size());
      assertNotNull(vector0);
      
      boolean boolean0 = vector0.add(jSModule0);
      assertEquals("X_?L", jSModule0.toString());
      assertEquals("X_?L", jSModule0.getName());
      assertEquals("[X_?L]", vector0.toString());
      assertEquals(1, vector0.size());
      assertEquals(false, vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertTrue(boolean0);
      
      JSModuleGraph jSModuleGraph0 = new JSModuleGraph((List<JSModule>) vector0);
      assertEquals("[X_?L]", vector0.toString());
      assertEquals(1, vector0.size());
      assertEquals(false, vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertNotNull(jSModuleGraph0);
      
      boolean boolean1 = vector0.add(jSModule0);
      assertEquals("X_?L", jSModule0.toString());
      assertEquals("X_?L", jSModule0.getName());
      assertEquals("[X_?L, X_?L]", vector0.toString());
      assertEquals(2, vector0.size());
      assertEquals(false, vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      JSModule jSModule1 = jSModuleGraph0.getDeepestCommonDependencyInclusive((Collection<JSModule>) vector0);
      assertSame(jSModule1, jSModule0);
      assertEquals("X_?L", jSModule1.toString());
      assertEquals("X_?L", jSModule1.getName());
      assertEquals("[X_?L, X_?L]", vector0.toString());
      assertEquals(2, vector0.size());
      assertEquals(false, vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertNotNull(jSModule1);
  }

  @Test
  public void test03()  throws Throwable  {
      String string0 = "X_DFL7";
      JSModule jSModule0 = new JSModule(string0);
      assertEquals("X_DFL7", jSModule0.toString());
      assertEquals("X_DFL7", jSModule0.getName());
      assertNotNull(jSModule0);
      
      JSModule jSModule1 = new JSModule(string0);
      assertNotSame(jSModule1, jSModule0);
      assertEquals("X_DFL7", jSModule1.getName());
      assertEquals("X_DFL7", jSModule1.toString());
      assertNotNull(jSModule1);
      assertFalse(jSModule1.equals((Object)jSModule0));
      
      Vector<JSModule> vector0 = new Vector<JSModule>();
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertEquals(true, vector0.isEmpty());
      assertEquals(0, vector0.size());
      assertNotNull(vector0);
      
      JSModuleGraph jSModuleGraph0 = new JSModuleGraph((List<JSModule>) vector0);
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertEquals(true, vector0.isEmpty());
      assertEquals(0, vector0.size());
      assertNotNull(jSModuleGraph0);
      
      // Undeclared exception!
      try {
        JSModule jSModule2 = jSModuleGraph0.getDeepestCommonDependencyInclusive(jSModule0, jSModule1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test04()  throws Throwable  {
      String string0 = "w\"LNK4;#uy.h'L";
      JSModule jSModule0 = new JSModule(string0);
      assertEquals("w\"LNK4;#uy.h'L", jSModule0.toString());
      assertEquals("w\"LNK4;#uy.h'L", jSModule0.getName());
      assertNotNull(jSModule0);
      
      JSModule jSModule1 = new JSModule(string0);
      assertNotSame(jSModule1, jSModule0);
      assertEquals("w\"LNK4;#uy.h'L", jSModule1.toString());
      assertEquals("w\"LNK4;#uy.h'L", jSModule1.getName());
      assertNotNull(jSModule1);
      assertFalse(jSModule1.equals((Object)jSModule0));
      
      Vector<JSModule> vector0 = new Vector<JSModule>();
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertEquals(true, vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertNotNull(vector0);
      
      jSModule1.addDependency(jSModule0);
      assertNotSame(jSModule0, jSModule1);
      assertNotSame(jSModule1, jSModule0);
      assertEquals("w\"LNK4;#uy.h'L", jSModule0.toString());
      assertEquals("w\"LNK4;#uy.h'L", jSModule0.getName());
      assertEquals("w\"LNK4;#uy.h'L", jSModule1.toString());
      assertEquals("w\"LNK4;#uy.h'L", jSModule1.getName());
      assertFalse(jSModule0.equals((Object)jSModule1));
      assertFalse(jSModule1.equals((Object)jSModule0));
      
      JSModuleGraph jSModuleGraph0 = new JSModuleGraph((List<JSModule>) vector0);
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertEquals(true, vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertNotNull(jSModuleGraph0);
      
      JSModule jSModule2 = jSModuleGraph0.getDeepestCommonDependencyInclusive(jSModule0, jSModule1);
      assertSame(jSModule2, jSModule0);
      assertNotSame(jSModule2, jSModule1);
      assertSame(jSModule0, jSModule2);
      assertNotSame(jSModule0, jSModule1);
      assertNotSame(jSModule1, jSModule0);
      assertNotSame(jSModule1, jSModule2);
      assertEquals("w\"LNK4;#uy.h'L", jSModule2.toString());
      assertEquals("w\"LNK4;#uy.h'L", jSModule2.getName());
      assertEquals("w\"LNK4;#uy.h'L", jSModule0.toString());
      assertEquals("w\"LNK4;#uy.h'L", jSModule0.getName());
      assertEquals("w\"LNK4;#uy.h'L", jSModule1.toString());
      assertEquals("w\"LNK4;#uy.h'L", jSModule1.getName());
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertEquals(true, vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertNotNull(jSModule2);
      assertFalse(jSModule2.equals((Object)jSModule1));
      assertFalse(jSModule0.equals((Object)jSModule1));
      assertFalse(jSModule1.equals((Object)jSModule0));
      assertFalse(jSModule1.equals((Object)jSModule2));
  }

  @Test
  public void test05()  throws Throwable  {
      JSModule[] jSModuleArray0 = new JSModule[5];
      String string0 = "zf(LD;NzW`Tn";
      JSModule jSModule0 = new JSModule(string0);
      assertEquals("zf(LD;NzW`Tn", jSModule0.getName());
      assertEquals("zf(LD;NzW`Tn", jSModule0.toString());
      assertNotNull(jSModule0);
      
      jSModuleArray0[0] = jSModule0;
      assertEquals("zf(LD;NzW`Tn", jSModule0.getName());
      assertEquals("zf(LD;NzW`Tn", jSModule0.toString());
      assertEquals("zf(LD;NzW`Tn", jSModuleArray0[0].toString());
      assertEquals("zf(LD;NzW`Tn", jSModuleArray0[0].getName());
      assertNotNull(jSModuleArray0[0]);
      
      jSModuleArray0[1] = jSModule0;
      assertEquals("zf(LD;NzW`Tn", jSModule0.getName());
      assertEquals("zf(LD;NzW`Tn", jSModule0.toString());
      assertEquals("zf(LD;NzW`Tn", jSModuleArray0[1].getName());
      assertEquals("zf(LD;NzW`Tn", jSModuleArray0[1].toString());
      assertNotNull(jSModuleArray0[1]);
      
      jSModuleArray0[2] = jSModuleArray0[0];
      assertEquals("zf(LD;NzW`Tn", jSModuleArray0[2].getName());
      assertEquals("zf(LD;NzW`Tn", jSModuleArray0[2].toString());
      assertNotNull(jSModuleArray0[2]);
      
      jSModuleArray0[3] = jSModuleArray0[2];
      assertEquals("zf(LD;NzW`Tn", jSModuleArray0[3].toString());
      assertEquals("zf(LD;NzW`Tn", jSModuleArray0[3].getName());
      assertNotNull(jSModuleArray0[3]);
      
      jSModuleArray0[4] = jSModuleArray0[0];
      assertEquals("zf(LD;NzW`Tn", jSModuleArray0[4].toString());
      assertEquals("zf(LD;NzW`Tn", jSModuleArray0[4].getName());
      assertNotNull(jSModuleArray0[4]);
      
      JSModuleGraph jSModuleGraph0 = new JSModuleGraph(jSModuleArray0);
      assertNotNull(jSModuleGraph0);
      
      JSModule jSModule1 = jSModuleGraph0.getDeepestCommonDependencyInclusive(jSModule0, jSModuleArray0[2]);
      assertSame(jSModule0, jSModule1);
      assertSame(jSModule1, jSModule0);
      assertEquals("zf(LD;NzW`Tn", jSModule0.getName());
      assertEquals("zf(LD;NzW`Tn", jSModule0.toString());
      assertEquals("zf(LD;NzW`Tn", jSModule1.getName());
      assertEquals("zf(LD;NzW`Tn", jSModule1.toString());
      assertNotNull(jSModule1);
  }

  @Test
  public void test06()  throws Throwable  {
      ArrayList<JSModule> arrayList0 = new ArrayList<JSModule>();
      assertEquals(true, arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertEquals("[]", arrayList0.toString());
      assertNotNull(arrayList0);
      
      JSModuleGraph jSModuleGraph0 = new JSModuleGraph((List<JSModule>) arrayList0);
      assertEquals(true, arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertEquals("[]", arrayList0.toString());
      assertNotNull(jSModuleGraph0);
      
      String string0 = ".=cs X.C]*LQ/t71v";
      JSModule jSModule0 = new JSModule(string0);
      assertEquals(".=cs X.C]*LQ/t71v", jSModule0.getName());
      assertEquals(".=cs X.C]*LQ/t71v", jSModule0.toString());
      assertNotNull(jSModule0);
      
      Set<JSModule> set0 = jSModuleGraph0.getTransitiveDepsDeepestFirst(jSModule0);
      assertEquals(true, arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertEquals("[]", arrayList0.toString());
      assertEquals(".=cs X.C]*LQ/t71v", jSModule0.getName());
      assertEquals(".=cs X.C]*LQ/t71v", jSModule0.toString());
      assertEquals(true, set0.isEmpty());
      assertEquals(0, set0.size());
      assertNotNull(set0);
      
      boolean boolean0 = jSModuleGraph0.dependsOn(jSModule0, jSModule0);
      assertEquals(true, arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertEquals("[]", arrayList0.toString());
      assertEquals(".=cs X.C]*LQ/t71v", jSModule0.getName());
      assertEquals(".=cs X.C]*LQ/t71v", jSModule0.toString());
      assertFalse(boolean0);
  }

  @Test
  public void test07()  throws Throwable  {
      String string0 = "w\"LNK4;#uy.h'L";
      JSModule jSModule0 = new JSModule(string0);
      assertEquals("w\"LNK4;#uy.h'L", jSModule0.getName());
      assertEquals("w\"LNK4;#uy.h'L", jSModule0.toString());
      assertNotNull(jSModule0);
      
      JSModule jSModule1 = new JSModule(string0);
      assertNotSame(jSModule1, jSModule0);
      assertEquals("w\"LNK4;#uy.h'L", jSModule1.getName());
      assertEquals("w\"LNK4;#uy.h'L", jSModule1.toString());
      assertNotNull(jSModule1);
      assertFalse(jSModule1.equals((Object)jSModule0));
      
      Vector<JSModule> vector0 = new Vector<JSModule>();
      assertEquals(true, vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertNotNull(vector0);
      
      jSModule1.addDependency(jSModule0);
      assertNotSame(jSModule1, jSModule0);
      assertNotSame(jSModule0, jSModule1);
      assertEquals("w\"LNK4;#uy.h'L", jSModule1.getName());
      assertEquals("w\"LNK4;#uy.h'L", jSModule1.toString());
      assertEquals("w\"LNK4;#uy.h'L", jSModule0.getName());
      assertEquals("w\"LNK4;#uy.h'L", jSModule0.toString());
      assertFalse(jSModule1.equals((Object)jSModule0));
      assertFalse(jSModule0.equals((Object)jSModule1));
      
      boolean boolean0 = vector0.add(jSModule1);
      assertNotSame(jSModule1, jSModule0);
      assertEquals(1, vector0.size());
      assertEquals("[w\"LNK4;#uy.h'L]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertEquals(false, vector0.isEmpty());
      assertEquals("w\"LNK4;#uy.h'L", jSModule1.getName());
      assertEquals("w\"LNK4;#uy.h'L", jSModule1.toString());
      assertTrue(boolean0);
      assertFalse(jSModule1.equals((Object)jSModule0));
      
      JSModuleGraph jSModuleGraph0 = null;
      try {
        jSModuleGraph0 = new JSModuleGraph((List<JSModule>) vector0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Modules not in dependency order: w\"LNK4;#uy.h'L preceded w\"LNK4;#uy.h'L
         //
      }
  }

  @Test
  public void test08()  throws Throwable  {
      JSModule[] jSModuleArray0 = new JSModule[5];
      String string0 = "zf(LD;NzW`Tn";
      JSModule jSModule0 = new JSModule(string0);
      assertEquals("zf(LD;NzW`Tn", jSModule0.toString());
      assertEquals("zf(LD;NzW`Tn", jSModule0.getName());
      assertNotNull(jSModule0);
      
      jSModuleArray0[0] = jSModule0;
      assertEquals("zf(LD;NzW`Tn", jSModule0.toString());
      assertEquals("zf(LD;NzW`Tn", jSModule0.getName());
      assertEquals("zf(LD;NzW`Tn", jSModuleArray0[0].getName());
      assertEquals("zf(LD;NzW`Tn", jSModuleArray0[0].toString());
      assertNotNull(jSModuleArray0[0]);
      
      jSModuleArray0[1] = jSModuleArray0[0];
      assertEquals("zf(LD;NzW`Tn", jSModuleArray0[1].toString());
      assertEquals("zf(LD;NzW`Tn", jSModuleArray0[1].getName());
      assertNotNull(jSModuleArray0[1]);
      
      jSModuleArray0[2] = jSModuleArray0[1];
      assertEquals("zf(LD;NzW`Tn", jSModuleArray0[2].toString());
      assertEquals("zf(LD;NzW`Tn", jSModuleArray0[2].getName());
      assertNotNull(jSModuleArray0[2]);
      
      JSModule jSModule1 = new JSModule(string0);
      assertNotSame(jSModule1, jSModule0);
      assertEquals("zf(LD;NzW`Tn", jSModule1.getName());
      assertEquals("zf(LD;NzW`Tn", jSModule1.toString());
      assertNotNull(jSModule1);
      assertFalse(jSModule1.equals((Object)jSModule0));
      
      jSModuleArray0[3] = jSModule1;
      assertEquals("zf(LD;NzW`Tn", jSModuleArray0[3].getName());
      assertEquals("zf(LD;NzW`Tn", jSModuleArray0[3].toString());
      assertEquals("zf(LD;NzW`Tn", jSModule1.getName());
      assertEquals("zf(LD;NzW`Tn", jSModule1.toString());
      assertNotNull(jSModuleArray0[3]);
      
      jSModuleArray0[3].addDependency(jSModule0);
      assertNotSame(jSModule0, jSModule1);
      assertEquals("zf(LD;NzW`Tn", jSModule0.toString());
      assertEquals("zf(LD;NzW`Tn", jSModule0.getName());
      assertFalse(jSModule0.equals((Object)jSModule1));
      
      JSModuleGraph jSModuleGraph0 = null;
      try {
        jSModuleGraph0 = new JSModuleGraph(jSModuleArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test09()  throws Throwable  {
      String string0 = "X_D'L";
      JSModule jSModule0 = new JSModule(string0);
      assertEquals("X_D'L", jSModule0.getName());
      assertEquals("X_D'L", jSModule0.toString());
      assertNotNull(jSModule0);
      
      JSModule jSModule1 = new JSModule(string0);
      assertNotSame(jSModule1, jSModule0);
      assertEquals("X_D'L", jSModule1.getName());
      assertEquals("X_D'L", jSModule1.toString());
      assertNotNull(jSModule1);
      assertFalse(jSModule1.equals((Object)jSModule0));
      
      jSModule0.addDependency(jSModule1);
      assertNotSame(jSModule0, jSModule1);
      assertNotSame(jSModule1, jSModule0);
      assertEquals("X_D'L", jSModule0.getName());
      assertEquals("X_D'L", jSModule0.toString());
      assertEquals("X_D'L", jSModule1.getName());
      assertEquals("X_D'L", jSModule1.toString());
      assertFalse(jSModule0.equals((Object)jSModule1));
      assertFalse(jSModule1.equals((Object)jSModule0));
      
      Vector<JSModule> vector0 = new Vector<JSModule>();
      assertEquals(0, vector0.size());
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertEquals(true, vector0.isEmpty());
      assertNotNull(vector0);
      
      JSModuleGraph jSModuleGraph0 = new JSModuleGraph((List<JSModule>) vector0);
      assertEquals(0, vector0.size());
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertEquals(true, vector0.isEmpty());
      assertNotNull(jSModuleGraph0);
      
      JSModule jSModule2 = jSModuleGraph0.getDeepestCommonDependencyInclusive(jSModule0, jSModule1);
      assertNotSame(jSModule2, jSModule0);
      assertSame(jSModule2, jSModule1);
      assertNotSame(jSModule0, jSModule1);
      assertNotSame(jSModule0, jSModule2);
      assertSame(jSModule1, jSModule2);
      assertNotSame(jSModule1, jSModule0);
      assertEquals("X_D'L", jSModule2.toString());
      assertEquals("X_D'L", jSModule2.getName());
      assertEquals("X_D'L", jSModule0.getName());
      assertEquals("X_D'L", jSModule0.toString());
      assertEquals(0, vector0.size());
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertEquals(true, vector0.isEmpty());
      assertEquals("X_D'L", jSModule1.getName());
      assertEquals("X_D'L", jSModule1.toString());
      assertNotNull(jSModule2);
      assertFalse(jSModule2.equals((Object)jSModule0));
      assertFalse(jSModule0.equals((Object)jSModule1));
      assertFalse(jSModule0.equals((Object)jSModule2));
      assertFalse(jSModule1.equals((Object)jSModule0));
  }

  @Test
  public void test10()  throws Throwable  {
      JSModule[] jSModuleArray0 = new JSModule[5];
      String string0 = "zf(LD;NzW`Tn";
      JSModule jSModule0 = new JSModule(string0);
      assertEquals("zf(LD;NzW`Tn", jSModule0.getName());
      assertEquals("zf(LD;NzW`Tn", jSModule0.toString());
      assertNotNull(jSModule0);
      
      JSModuleGraph.ModuleDependenceException jSModuleGraph_ModuleDependenceException0 = new JSModuleGraph.ModuleDependenceException(string0, jSModule0, jSModuleArray0[0]);
      assertEquals("zf(LD;NzW`Tn", jSModule0.getName());
      assertEquals("zf(LD;NzW`Tn", jSModule0.toString());
      assertNotNull(jSModuleGraph_ModuleDependenceException0);
      
      JSModule jSModule1 = jSModuleGraph_ModuleDependenceException0.getModule();
      assertSame(jSModule1, jSModule0);
      assertSame(jSModule0, jSModule1);
      assertEquals("zf(LD;NzW`Tn", jSModule1.getName());
      assertEquals("zf(LD;NzW`Tn", jSModule1.toString());
      assertEquals("zf(LD;NzW`Tn", jSModule0.getName());
      assertEquals("zf(LD;NzW`Tn", jSModule0.toString());
      assertNotNull(jSModule1);
  }

  @Test
  public void test11()  throws Throwable  {
      JSModule[] jSModuleArray0 = new JSModule[5];
      String string0 = "zf(LD;NzW`Tn";
      JSModule jSModule0 = new JSModule(string0);
      assertEquals("zf(LD;NzW`Tn", jSModule0.toString());
      assertEquals("zf(LD;NzW`Tn", jSModule0.getName());
      assertNotNull(jSModule0);
      
      JSModuleGraph.ModuleDependenceException jSModuleGraph_ModuleDependenceException0 = new JSModuleGraph.ModuleDependenceException(string0, jSModule0, jSModuleArray0[0]);
      assertEquals("zf(LD;NzW`Tn", jSModule0.toString());
      assertEquals("zf(LD;NzW`Tn", jSModule0.getName());
      assertNotNull(jSModuleGraph_ModuleDependenceException0);
      
      JSModule jSModule1 = jSModuleGraph_ModuleDependenceException0.getDependentModule();
      assertEquals("zf(LD;NzW`Tn", jSModule0.toString());
      assertEquals("zf(LD;NzW`Tn", jSModule0.getName());
      assertNull(jSModule1);
  }

  @Test
  public void test12()  throws Throwable  {
      JSModule[] jSModuleArray0 = new JSModule[1];
      String string0 = "7";
      JSModule jSModule0 = new JSModule(string0);
      assertEquals("7", jSModule0.getName());
      assertEquals("7", jSModule0.toString());
      assertNotNull(jSModule0);
      
      jSModuleArray0[0] = jSModule0;
      assertEquals("7", jSModule0.getName());
      assertEquals("7", jSModule0.toString());
      assertEquals("7", jSModuleArray0[0].toString());
      assertEquals("7", jSModuleArray0[0].getName());
      assertNotNull(jSModuleArray0[0]);
      
      JSModuleGraph jSModuleGraph0 = new JSModuleGraph(jSModuleArray0);
      assertNotNull(jSModuleGraph0);
      
      JSModule jSModule1 = jSModuleGraph0.getDeepestCommonDependency(jSModule0, jSModule0);
      assertEquals("7", jSModule0.getName());
      assertEquals("7", jSModule0.toString());
      assertNull(jSModule1);
  }

  @Test
  public void test13()  throws Throwable  {
      ArrayList<JSModule> arrayList0 = new ArrayList<JSModule>();
      assertEquals("[]", arrayList0.toString());
      assertEquals(0, arrayList0.size());
      assertEquals(true, arrayList0.isEmpty());
      assertNotNull(arrayList0);
      
      JSModuleGraph jSModuleGraph0 = new JSModuleGraph((List<JSModule>) arrayList0);
      assertEquals("[]", arrayList0.toString());
      assertEquals(0, arrayList0.size());
      assertEquals(true, arrayList0.isEmpty());
      assertNotNull(jSModuleGraph0);
      
      Iterable<JSModule> iterable0 = jSModuleGraph0.getAllModules();
      assertEquals("[]", arrayList0.toString());
      assertEquals(0, arrayList0.size());
      assertEquals(true, arrayList0.isEmpty());
      assertNotNull(iterable0);
  }

  @Test
  public void test14()  throws Throwable  {
      ArrayList<JSModule> arrayList0 = new ArrayList<JSModule>();
      assertEquals(0, arrayList0.size());
      assertEquals("[]", arrayList0.toString());
      assertEquals(true, arrayList0.isEmpty());
      assertNotNull(arrayList0);
      
      JSModuleGraph jSModuleGraph0 = new JSModuleGraph((List<JSModule>) arrayList0);
      assertEquals(0, arrayList0.size());
      assertEquals("[]", arrayList0.toString());
      assertEquals(true, arrayList0.isEmpty());
      assertNotNull(jSModuleGraph0);
      
      int int0 = jSModuleGraph0.getModuleCount();
      assertEquals(0, arrayList0.size());
      assertEquals("[]", arrayList0.toString());
      assertEquals(true, arrayList0.isEmpty());
      assertEquals(0, int0);
  }

  @Test
  public void test15()  throws Throwable  {
      Vector<JSModule> vector0 = new Vector<JSModule>();
      assertEquals(0, vector0.size());
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertEquals(true, vector0.isEmpty());
      assertNotNull(vector0);
      
      JSModuleGraph jSModuleGraph0 = new JSModuleGraph((List<JSModule>) vector0);
      assertEquals(0, vector0.size());
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertEquals(true, vector0.isEmpty());
      assertNotNull(jSModuleGraph0);
      
      // Undeclared exception!
      try {
        JSModule jSModule0 = jSModuleGraph0.getRootModule();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
      }
  }
}
