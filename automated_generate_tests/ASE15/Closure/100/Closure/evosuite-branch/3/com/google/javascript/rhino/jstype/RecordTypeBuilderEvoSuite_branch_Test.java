/*
 * This file was automatically generated by EvoSuite
 * Fri Dec 12 08:25:59 GMT 2014
 */

package com.google.javascript.rhino.jstype;

import static org.junit.Assert.*;
import org.junit.Test;
import com.google.javascript.rhino.ErrorReporter;
import com.google.javascript.rhino.jstype.BooleanLiteralSet;
import com.google.javascript.rhino.jstype.EnumElementType;
import com.google.javascript.rhino.jstype.JSType;
import com.google.javascript.rhino.jstype.JSTypeRegistry;
import com.google.javascript.rhino.jstype.NullType;
import com.google.javascript.rhino.jstype.RecordType;
import com.google.javascript.rhino.jstype.RecordTypeBuilder;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;

import org.junit.runner.RunWith;


public class RecordTypeBuilderEvoSuite_branch_Test  {

  @Test
  public void test0()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = null;
      RecordTypeBuilder recordTypeBuilder0 = new RecordTypeBuilder(jSTypeRegistry0);
      assertNotNull(recordTypeBuilder0);
      
      // Undeclared exception!
      try {
        JSType jSType0 = recordTypeBuilder0.build();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test1()  throws Throwable  {
      ErrorReporter errorReporter0 = null;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(errorReporter0);
      assertNotNull(jSTypeRegistry0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      NullType nullType0 = new NullType(jSTypeRegistry0);
      assertNotNull(nullType0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(BooleanLiteralSet.FALSE, nullType0.getPossibleToBooleanOutcomes());
      assertEquals(false, nullType0.isEmptyType());
      assertEquals(true, nullType0.isNullType());
      assertEquals(false, nullType0.isNoObjectType());
      assertEquals("null", nullType0.toString());
      assertEquals(false, nullType0.isNoType());
      assertEquals(false, nullType0.isVoidType());
      assertEquals(false, nullType0.isAllType());
      assertEquals(false, nullType0.matchesObjectContext());
      assertEquals(false, nullType0.isTemplateType());
      assertEquals(false, nullType0.isFunctionType());
      assertEquals(false, nullType0.isResolved());
      assertEquals(false, nullType0.isBooleanValueType());
      assertEquals(false, nullType0.isUnionType());
      assertEquals(true, nullType0.matchesStringContext());
      assertEquals(false, nullType0.isNumberValueType());
      assertEquals(true, nullType0.matchesNumberContext());
      assertEquals(false, nullType0.isStringValueType());
      assertEquals(true, nullType0.isNullable());
      assertEquals(false, nullType0.isRecordType());
      
      String string0 = null;
      EnumElementType enumElementType0 = new EnumElementType(jSTypeRegistry0, nullType0, string0);
      assertNotNull(enumElementType0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(true, enumElementType0.isEnumElementType());
      assertEquals(false, enumElementType0.isResolved());
      assertEquals(false, enumElementType0.isNoObjectType());
      assertEquals(false, enumElementType0.isNullType());
      assertEquals(false, enumElementType0.isEmptyType());
      assertEquals(false, enumElementType0.isNativeObjectType());
      assertEquals(false, enumElementType0.isStringValueType());
      assertEquals(false, enumElementType0.isNumberValueType());
      assertEquals(false, enumElementType0.hasCachedValues());
      assertNull(enumElementType0.getReferenceName());
      assertEquals(false, enumElementType0.isAllType());
      assertEquals(BooleanLiteralSet.TRUE, enumElementType0.getPossibleToBooleanOutcomes());
      assertEquals(false, enumElementType0.isRecordType());
      assertEquals(false, enumElementType0.isFunctionType());
      assertEquals(false, enumElementType0.isNoType());
      assertEquals(true, enumElementType0.isNominalType());
      assertEquals(true, enumElementType0.hasReferenceName());
      assertEquals(false, enumElementType0.isVoidType());
      assertEquals(false, enumElementType0.isTemplateType());
      assertEquals(false, enumElementType0.isUnionType());
      assertEquals(false, enumElementType0.isBooleanValueType());
      assertEquals(BooleanLiteralSet.FALSE, nullType0.getPossibleToBooleanOutcomes());
      assertEquals(false, nullType0.isEmptyType());
      assertEquals(true, nullType0.isNullType());
      assertEquals(false, nullType0.isNoObjectType());
      assertEquals("null", nullType0.toString());
      assertEquals(false, nullType0.isNoType());
      assertEquals(false, nullType0.isVoidType());
      assertEquals(false, nullType0.isAllType());
      assertEquals(false, nullType0.matchesObjectContext());
      assertEquals(false, nullType0.isTemplateType());
      assertEquals(false, nullType0.isFunctionType());
      assertEquals(false, nullType0.isResolved());
      assertEquals(false, nullType0.isBooleanValueType());
      assertEquals(false, nullType0.isUnionType());
      assertEquals(true, nullType0.matchesStringContext());
      assertEquals(false, nullType0.isNumberValueType());
      assertEquals(true, nullType0.matchesNumberContext());
      assertEquals(false, nullType0.isStringValueType());
      assertEquals(true, nullType0.isNullable());
      assertEquals(false, nullType0.isRecordType());
      
      RecordTypeBuilder recordTypeBuilder0 = new RecordTypeBuilder(jSTypeRegistry0);
      assertNotNull(recordTypeBuilder0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      String string1 = "URI_ERROR_TYPE";
      RecordTypeBuilder recordTypeBuilder1 = recordTypeBuilder0.addProperty(string1, (JSType) enumElementType0);
      assertNotNull(recordTypeBuilder1);
      assertSame(recordTypeBuilder1, recordTypeBuilder0);
      assertSame(recordTypeBuilder0, recordTypeBuilder1);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(true, enumElementType0.isEnumElementType());
      assertEquals(false, enumElementType0.isResolved());
      assertEquals(false, enumElementType0.isNoObjectType());
      assertEquals(false, enumElementType0.isNullType());
      assertEquals(false, enumElementType0.isEmptyType());
      assertEquals(false, enumElementType0.isNativeObjectType());
      assertEquals(false, enumElementType0.isStringValueType());
      assertEquals(false, enumElementType0.isNumberValueType());
      assertEquals(false, enumElementType0.hasCachedValues());
      assertNull(enumElementType0.getReferenceName());
      assertEquals(false, enumElementType0.isAllType());
      assertEquals(BooleanLiteralSet.TRUE, enumElementType0.getPossibleToBooleanOutcomes());
      assertEquals(false, enumElementType0.isRecordType());
      assertEquals(false, enumElementType0.isFunctionType());
      assertEquals(false, enumElementType0.isNoType());
      assertEquals(true, enumElementType0.isNominalType());
      assertEquals(true, enumElementType0.hasReferenceName());
      assertEquals(false, enumElementType0.isVoidType());
      assertEquals(false, enumElementType0.isTemplateType());
      assertEquals(false, enumElementType0.isUnionType());
      assertEquals(false, enumElementType0.isBooleanValueType());
      assertEquals(BooleanLiteralSet.FALSE, nullType0.getPossibleToBooleanOutcomes());
      assertEquals(false, nullType0.isEmptyType());
      assertEquals(true, nullType0.isNullType());
      assertEquals(false, nullType0.isNoObjectType());
      assertEquals("null", nullType0.toString());
      assertEquals(false, nullType0.isNoType());
      assertEquals(false, nullType0.isVoidType());
      assertEquals(false, nullType0.isAllType());
      assertEquals(false, nullType0.matchesObjectContext());
      assertEquals(false, nullType0.isTemplateType());
      assertEquals(false, nullType0.isFunctionType());
      assertEquals(false, nullType0.isResolved());
      assertEquals(false, nullType0.isBooleanValueType());
      assertEquals(false, nullType0.isUnionType());
      assertEquals(true, nullType0.matchesStringContext());
      assertEquals(false, nullType0.isNumberValueType());
      assertEquals(true, nullType0.matchesNumberContext());
      assertEquals(false, nullType0.isStringValueType());
      assertEquals(true, nullType0.isNullable());
      assertEquals(false, nullType0.isRecordType());
      
      RecordType recordType0 = (RecordType)recordTypeBuilder1.build();
      assertNotNull(recordType0);
      assertSame(recordTypeBuilder1, recordTypeBuilder0);
      assertSame(recordTypeBuilder0, recordTypeBuilder1);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(true, enumElementType0.isEnumElementType());
      assertEquals(false, enumElementType0.isResolved());
      assertEquals(false, enumElementType0.isNoObjectType());
      assertEquals(false, enumElementType0.isNullType());
      assertEquals(false, enumElementType0.isEmptyType());
      assertEquals(false, enumElementType0.isNativeObjectType());
      assertEquals(false, enumElementType0.isStringValueType());
      assertEquals(false, enumElementType0.isNumberValueType());
      assertEquals(false, enumElementType0.hasCachedValues());
      assertNull(enumElementType0.getReferenceName());
      assertEquals(false, enumElementType0.isAllType());
      assertEquals(BooleanLiteralSet.TRUE, enumElementType0.getPossibleToBooleanOutcomes());
      assertEquals(false, enumElementType0.isRecordType());
      assertEquals(false, enumElementType0.isFunctionType());
      assertEquals(false, enumElementType0.isNoType());
      assertEquals(true, enumElementType0.isNominalType());
      assertEquals(true, enumElementType0.hasReferenceName());
      assertEquals(false, enumElementType0.isVoidType());
      assertEquals(false, enumElementType0.isTemplateType());
      assertEquals(false, enumElementType0.isUnionType());
      assertEquals(false, enumElementType0.isBooleanValueType());
      assertEquals(false, recordType0.isNumberValueType());
      assertEquals(false, recordType0.isNoObjectType());
      assertEquals(BooleanLiteralSet.TRUE, recordType0.getPossibleToBooleanOutcomes());
      assertEquals(false, recordType0.isResolved());
      assertEquals(true, recordType0.isRecordType());
      assertEquals(false, recordType0.isUnionType());
      assertEquals(false, recordType0.isBooleanValueType());
      assertEquals(false, recordType0.isNullType());
      assertEquals(false, recordType0.isFunctionType());
      assertEquals(false, recordType0.isTemplateType());
      assertEquals(false, recordType0.isStringValueType());
      assertEquals(false, recordType0.isEmptyType());
      assertEquals(false, recordType0.isVoidType());
      assertEquals(false, recordType0.isAllType());
      assertEquals(false, recordType0.isNoType());
      assertEquals(BooleanLiteralSet.FALSE, nullType0.getPossibleToBooleanOutcomes());
      assertEquals(false, nullType0.isEmptyType());
      assertEquals(true, nullType0.isNullType());
      assertEquals(false, nullType0.isNoObjectType());
      assertEquals("null", nullType0.toString());
      assertEquals(false, nullType0.isNoType());
      assertEquals(false, nullType0.isVoidType());
      assertEquals(false, nullType0.isAllType());
      assertEquals(false, nullType0.matchesObjectContext());
      assertEquals(false, nullType0.isTemplateType());
      assertEquals(false, nullType0.isFunctionType());
      assertEquals(false, nullType0.isResolved());
      assertEquals(false, nullType0.isBooleanValueType());
      assertEquals(false, nullType0.isUnionType());
      assertEquals(true, nullType0.matchesStringContext());
      assertEquals(false, nullType0.isNumberValueType());
      assertEquals(true, nullType0.matchesNumberContext());
      assertEquals(false, nullType0.isStringValueType());
      assertEquals(true, nullType0.isNullable());
      assertEquals(false, nullType0.isRecordType());
  }
}
