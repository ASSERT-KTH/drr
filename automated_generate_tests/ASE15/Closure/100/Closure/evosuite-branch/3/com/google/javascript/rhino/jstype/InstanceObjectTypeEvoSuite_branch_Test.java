/*
 * This file was automatically generated by EvoSuite
 * Fri Dec 12 08:15:23 GMT 2014
 */

package com.google.javascript.rhino.jstype;

import static org.junit.Assert.*; import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.junit.Test;
import com.google.javascript.rhino.ErrorReporter;
import com.google.javascript.rhino.SimpleErrorReporter;
import com.google.javascript.rhino.jstype.BooleanLiteralSet;
import com.google.javascript.rhino.jstype.BooleanType;
import com.google.javascript.rhino.jstype.ErrorFunctionType;
import com.google.javascript.rhino.jstype.FunctionType;
import com.google.javascript.rhino.jstype.InstanceObjectType;
import com.google.javascript.rhino.jstype.JSType;
import com.google.javascript.rhino.jstype.JSTypeNative;
import com.google.javascript.rhino.jstype.JSTypeRegistry;
import com.google.javascript.rhino.jstype.NoObjectType;
import com.google.javascript.rhino.jstype.NoType;
import com.google.javascript.rhino.jstype.ObjectType;
import com.google.javascript.rhino.jstype.StringType;
import java.util.LinkedList;
import java.util.List;



import org.junit.runner.RunWith;


public class InstanceObjectTypeEvoSuite_branch_Test  {

  @Test
  public void test00()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      NoType noType0 = new NoType(jSTypeRegistry0);
      assertNotNull(noType0);
      assertEquals(false, noType0.isFunctionType());
      assertEquals(false, noType0.isNumberValueType());
      assertEquals(true, noType0.isEmptyType());
      assertEquals(false, noType0.isOrdinaryFunction());
      assertEquals(true, noType0.matchesNumberContext());
      assertEquals("None", noType0.toString());
      assertEquals(false, noType0.isInterface());
      assertEquals(false, noType0.isTemplateType());
      assertEquals(false, noType0.isNoObjectType());
      assertEquals(2147483647, noType0.getMaxArguments());
      assertEquals(false, noType0.isRecordType());
      assertEquals(true, noType0.canBeCalled());
      assertNull(noType0.getReferenceName());
      assertEquals(false, noType0.hasCachedValues());
      assertEquals(false, noType0.isAllType());
      assertEquals(false, noType0.isStringValueType());
      assertEquals(false, noType0.isVoidType());
      assertEquals(false, noType0.isResolved());
      assertEquals(false, noType0.isUnionType());
      assertEquals(false, noType0.isReturnTypeInferred());
      assertEquals(true, noType0.isNullable());
      assertEquals(true, noType0.isNoType());
      assertEquals(false, noType0.isBooleanValueType());
      assertNull(noType0.getTemplateTypeName());
      assertEquals(true, noType0.hasInstanceType());
      assertEquals(2147483647, noType0.getPropertiesCount());
      assertEquals(true, noType0.isConstructor());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertEquals(true, noType0.matchesStringContext());
      assertEquals(false, noType0.isNullType());
      assertEquals(true, noType0.matchesObjectContext());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      InstanceObjectType instanceObjectType0 = new InstanceObjectType(jSTypeRegistry0, noType0);
      assertNotNull(instanceObjectType0);
      assertEquals(false, noType0.isFunctionType());
      assertEquals(false, noType0.isNumberValueType());
      assertEquals(true, noType0.isEmptyType());
      assertEquals(false, noType0.isOrdinaryFunction());
      assertEquals(true, noType0.matchesNumberContext());
      assertEquals("None", noType0.toString());
      assertEquals(false, noType0.isInterface());
      assertEquals(false, noType0.isTemplateType());
      assertEquals(false, noType0.isNoObjectType());
      assertEquals(2147483647, noType0.getMaxArguments());
      assertEquals(false, noType0.isRecordType());
      assertEquals(true, noType0.canBeCalled());
      assertNull(noType0.getReferenceName());
      assertEquals(false, noType0.hasCachedValues());
      assertEquals(false, noType0.isAllType());
      assertEquals(false, noType0.isStringValueType());
      assertEquals(false, noType0.isVoidType());
      assertEquals(false, noType0.isResolved());
      assertEquals(false, noType0.isUnionType());
      assertEquals(false, noType0.isReturnTypeInferred());
      assertEquals(true, noType0.isNullable());
      assertEquals(true, noType0.isNoType());
      assertEquals(false, noType0.isBooleanValueType());
      assertNull(noType0.getTemplateTypeName());
      assertEquals(true, noType0.hasInstanceType());
      assertEquals(2147483647, noType0.getPropertiesCount());
      assertEquals(true, noType0.isConstructor());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertEquals(true, noType0.matchesStringContext());
      assertEquals(false, noType0.isNullType());
      assertEquals(true, noType0.matchesObjectContext());
      assertEquals(false, instanceObjectType0.isStringValueType());
      assertEquals(false, instanceObjectType0.isNominalType());
      assertEquals(false, instanceObjectType0.hasReferenceName());
      assertEquals(false, instanceObjectType0.isNumberValueType());
      assertEquals(false, instanceObjectType0.isAllType());
      assertEquals(false, instanceObjectType0.isVoidType());
      assertEquals(false, instanceObjectType0.isTemplateType());
      assertEquals(false, instanceObjectType0.isNullType());
      assertEquals(false, instanceObjectType0.isNoType());
      assertEquals(false, instanceObjectType0.isRecordType());
      assertEquals(BooleanLiteralSet.TRUE, instanceObjectType0.getPossibleToBooleanOutcomes());
      assertEquals(false, instanceObjectType0.isResolved());
      assertEquals(false, instanceObjectType0.isFunctionType());
      assertEquals(false, instanceObjectType0.isUnionType());
      assertEquals(false, instanceObjectType0.isEmptyType());
      assertEquals(true, instanceObjectType0.isInstanceType());
      assertEquals(false, instanceObjectType0.isNoObjectType());
      assertEquals(false, instanceObjectType0.isBooleanValueType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      String string0 = instanceObjectType0.toString();
      assertNotNull(string0);
      assertEquals(false, noType0.isFunctionType());
      assertEquals(false, noType0.isNumberValueType());
      assertEquals(true, noType0.isEmptyType());
      assertEquals(false, noType0.isOrdinaryFunction());
      assertEquals(true, noType0.matchesNumberContext());
      assertEquals("None", noType0.toString());
      assertEquals(false, noType0.isInterface());
      assertEquals(false, noType0.isTemplateType());
      assertEquals(false, noType0.isNoObjectType());
      assertEquals(2147483647, noType0.getMaxArguments());
      assertEquals(false, noType0.isRecordType());
      assertEquals(true, noType0.canBeCalled());
      assertNull(noType0.getReferenceName());
      assertEquals(false, noType0.hasCachedValues());
      assertEquals(false, noType0.isAllType());
      assertEquals(false, noType0.isStringValueType());
      assertEquals(false, noType0.isVoidType());
      assertEquals(false, noType0.isResolved());
      assertEquals(false, noType0.isUnionType());
      assertEquals(false, noType0.isReturnTypeInferred());
      assertEquals(true, noType0.isNullable());
      assertEquals(true, noType0.isNoType());
      assertEquals(false, noType0.isBooleanValueType());
      assertNull(noType0.getTemplateTypeName());
      assertEquals(true, noType0.hasInstanceType());
      assertEquals(2147483647, noType0.getPropertiesCount());
      assertEquals(true, noType0.isConstructor());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertEquals(true, noType0.matchesStringContext());
      assertEquals(false, noType0.isNullType());
      assertEquals(true, noType0.matchesObjectContext());
      assertEquals(false, instanceObjectType0.isStringValueType());
      assertEquals(false, instanceObjectType0.isNominalType());
      assertEquals(false, instanceObjectType0.hasReferenceName());
      assertEquals(false, instanceObjectType0.isNumberValueType());
      assertEquals(false, instanceObjectType0.isAllType());
      assertEquals(false, instanceObjectType0.isVoidType());
      assertEquals(false, instanceObjectType0.isTemplateType());
      assertEquals(false, instanceObjectType0.isNullType());
      assertEquals(false, instanceObjectType0.isNoType());
      assertEquals(false, instanceObjectType0.isRecordType());
      assertEquals(BooleanLiteralSet.TRUE, instanceObjectType0.getPossibleToBooleanOutcomes());
      assertEquals(false, instanceObjectType0.isResolved());
      assertEquals(false, instanceObjectType0.isFunctionType());
      assertEquals(false, instanceObjectType0.isUnionType());
      assertEquals(false, instanceObjectType0.isEmptyType());
      assertEquals(true, instanceObjectType0.isInstanceType());
      assertEquals(false, instanceObjectType0.isNoObjectType());
      assertEquals(false, instanceObjectType0.isBooleanValueType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals("{...}", string0);
      
      boolean boolean0 = instanceObjectType0.isArrayType();
      assertEquals(false, noType0.isFunctionType());
      assertEquals(false, noType0.isNumberValueType());
      assertEquals(true, noType0.isEmptyType());
      assertEquals(false, noType0.isOrdinaryFunction());
      assertEquals(true, noType0.matchesNumberContext());
      assertEquals("None", noType0.toString());
      assertEquals(false, noType0.isInterface());
      assertEquals(false, noType0.isTemplateType());
      assertEquals(false, noType0.isNoObjectType());
      assertEquals(2147483647, noType0.getMaxArguments());
      assertEquals(false, noType0.isRecordType());
      assertEquals(true, noType0.canBeCalled());
      assertNull(noType0.getReferenceName());
      assertEquals(false, noType0.hasCachedValues());
      assertEquals(false, noType0.isAllType());
      assertEquals(false, noType0.isStringValueType());
      assertEquals(false, noType0.isVoidType());
      assertEquals(false, noType0.isResolved());
      assertEquals(false, noType0.isUnionType());
      assertEquals(false, noType0.isReturnTypeInferred());
      assertEquals(true, noType0.isNullable());
      assertEquals(true, noType0.isNoType());
      assertEquals(false, noType0.isBooleanValueType());
      assertNull(noType0.getTemplateTypeName());
      assertEquals(true, noType0.hasInstanceType());
      assertEquals(2147483647, noType0.getPropertiesCount());
      assertEquals(true, noType0.isConstructor());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertEquals(true, noType0.matchesStringContext());
      assertEquals(false, noType0.isNullType());
      assertEquals(true, noType0.matchesObjectContext());
      assertEquals(false, instanceObjectType0.isStringValueType());
      assertEquals(false, instanceObjectType0.isNominalType());
      assertEquals(false, instanceObjectType0.hasReferenceName());
      assertEquals(false, instanceObjectType0.isNumberValueType());
      assertEquals(false, instanceObjectType0.isAllType());
      assertEquals(false, instanceObjectType0.isVoidType());
      assertEquals(false, instanceObjectType0.isTemplateType());
      assertEquals(false, instanceObjectType0.isNullType());
      assertEquals(false, instanceObjectType0.isNoType());
      assertEquals(false, instanceObjectType0.isRecordType());
      assertEquals(BooleanLiteralSet.TRUE, instanceObjectType0.getPossibleToBooleanOutcomes());
      assertEquals(false, instanceObjectType0.isResolved());
      assertEquals(false, instanceObjectType0.isFunctionType());
      assertEquals(false, instanceObjectType0.isUnionType());
      assertEquals(false, instanceObjectType0.isEmptyType());
      assertEquals(true, instanceObjectType0.isInstanceType());
      assertEquals(false, instanceObjectType0.isNoObjectType());
      assertEquals(false, instanceObjectType0.isBooleanValueType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(boolean0);
      
      boolean boolean1 = instanceObjectType0.defineInferredProperty(string0, (JSType) noType0, boolean0);
      assertEquals(false, noType0.isFunctionType());
      assertEquals(false, noType0.isNumberValueType());
      assertEquals(true, noType0.isEmptyType());
      assertEquals(false, noType0.isOrdinaryFunction());
      assertEquals(true, noType0.matchesNumberContext());
      assertEquals("None", noType0.toString());
      assertEquals(false, noType0.isInterface());
      assertEquals(false, noType0.isTemplateType());
      assertEquals(false, noType0.isNoObjectType());
      assertEquals(2147483647, noType0.getMaxArguments());
      assertEquals(true, noType0.hasCachedValues());
      assertEquals(false, noType0.isRecordType());
      assertEquals(true, noType0.canBeCalled());
      assertNull(noType0.getReferenceName());
      assertEquals(false, noType0.isAllType());
      assertEquals(false, noType0.isStringValueType());
      assertEquals(false, noType0.isVoidType());
      assertEquals(false, noType0.isResolved());
      assertEquals(false, noType0.isUnionType());
      assertEquals(false, noType0.isReturnTypeInferred());
      assertEquals(true, noType0.isNullable());
      assertEquals(true, noType0.isNoType());
      assertEquals(false, noType0.isBooleanValueType());
      assertNull(noType0.getTemplateTypeName());
      assertEquals(true, noType0.hasInstanceType());
      assertEquals(2147483647, noType0.getPropertiesCount());
      assertEquals(true, noType0.isConstructor());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertEquals(true, noType0.matchesStringContext());
      assertEquals(false, noType0.isNullType());
      assertEquals(true, noType0.matchesObjectContext());
      assertEquals(false, instanceObjectType0.isStringValueType());
      assertEquals(false, instanceObjectType0.isNominalType());
      assertEquals(false, instanceObjectType0.hasReferenceName());
      assertEquals(false, instanceObjectType0.isNumberValueType());
      assertEquals(false, instanceObjectType0.isAllType());
      assertEquals(false, instanceObjectType0.isVoidType());
      assertEquals(false, instanceObjectType0.isTemplateType());
      assertEquals(false, instanceObjectType0.isNullType());
      assertEquals(false, instanceObjectType0.isNoType());
      assertEquals(false, instanceObjectType0.isRecordType());
      assertEquals(BooleanLiteralSet.TRUE, instanceObjectType0.getPossibleToBooleanOutcomes());
      assertEquals(false, instanceObjectType0.isResolved());
      assertEquals(false, instanceObjectType0.isFunctionType());
      assertEquals(false, instanceObjectType0.isUnionType());
      assertEquals(false, instanceObjectType0.isEmptyType());
      assertEquals(true, instanceObjectType0.isInstanceType());
      assertEquals(false, instanceObjectType0.isNoObjectType());
      assertEquals(false, instanceObjectType0.isBooleanValueType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean0 == boolean1);
      assertTrue(boolean1);
  }

  @Test
  public void test01()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      NoType noType0 = new NoType(jSTypeRegistry0);
      assertNotNull(noType0);
      assertEquals(true, noType0.isEmptyType());
      assertEquals(false, noType0.isResolved());
      assertEquals(false, noType0.isRecordType());
      assertEquals(false, noType0.isFunctionType());
      assertEquals(true, noType0.hasInstanceType());
      assertEquals(false, noType0.isTemplateType());
      assertEquals(true, noType0.matchesObjectContext());
      assertEquals(false, noType0.hasCachedValues());
      assertEquals(false, noType0.isStringValueType());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertEquals(true, noType0.matchesNumberContext());
      assertEquals(false, noType0.isVoidType());
      assertEquals(false, noType0.isReturnTypeInferred());
      assertNull(noType0.getReferenceName());
      assertEquals(false, noType0.isInterface());
      assertEquals(false, noType0.isAllType());
      assertEquals(false, noType0.isUnionType());
      assertEquals(2147483647, noType0.getPropertiesCount());
      assertEquals(false, noType0.isNumberValueType());
      assertEquals(true, noType0.matchesStringContext());
      assertEquals(false, noType0.isBooleanValueType());
      assertEquals(true, noType0.isConstructor());
      assertEquals(false, noType0.isOrdinaryFunction());
      assertEquals(true, noType0.isNullable());
      assertEquals(false, noType0.isNullType());
      assertEquals(true, noType0.canBeCalled());
      assertEquals(2147483647, noType0.getMaxArguments());
      assertEquals("None", noType0.toString());
      assertEquals(false, noType0.isNoObjectType());
      assertNull(noType0.getTemplateTypeName());
      assertEquals(true, noType0.isNoType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      InstanceObjectType instanceObjectType0 = new InstanceObjectType(jSTypeRegistry0, noType0);
      assertNotNull(instanceObjectType0);
      assertEquals(true, noType0.isEmptyType());
      assertEquals(false, noType0.isResolved());
      assertEquals(false, noType0.isRecordType());
      assertEquals(false, noType0.isFunctionType());
      assertEquals(true, noType0.hasInstanceType());
      assertEquals(false, noType0.isTemplateType());
      assertEquals(true, noType0.matchesObjectContext());
      assertEquals(false, noType0.hasCachedValues());
      assertEquals(false, noType0.isStringValueType());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertEquals(true, noType0.matchesNumberContext());
      assertEquals(false, noType0.isVoidType());
      assertEquals(false, noType0.isReturnTypeInferred());
      assertNull(noType0.getReferenceName());
      assertEquals(false, noType0.isInterface());
      assertEquals(false, noType0.isAllType());
      assertEquals(false, noType0.isUnionType());
      assertEquals(2147483647, noType0.getPropertiesCount());
      assertEquals(false, noType0.isNumberValueType());
      assertEquals(true, noType0.matchesStringContext());
      assertEquals(false, noType0.isBooleanValueType());
      assertEquals(true, noType0.isConstructor());
      assertEquals(false, noType0.isOrdinaryFunction());
      assertEquals(true, noType0.isNullable());
      assertEquals(false, noType0.isNullType());
      assertEquals(true, noType0.canBeCalled());
      assertEquals(2147483647, noType0.getMaxArguments());
      assertEquals("None", noType0.toString());
      assertEquals(false, noType0.isNoObjectType());
      assertNull(noType0.getTemplateTypeName());
      assertEquals(true, noType0.isNoType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(true, instanceObjectType0.isInstanceType());
      assertEquals(false, instanceObjectType0.isStringValueType());
      assertEquals(false, instanceObjectType0.isNullType());
      assertEquals(false, instanceObjectType0.isResolved());
      assertEquals(false, instanceObjectType0.isNoType());
      assertEquals(false, instanceObjectType0.isRecordType());
      assertEquals(false, instanceObjectType0.isBooleanValueType());
      assertEquals(false, instanceObjectType0.isNominalType());
      assertEquals(false, instanceObjectType0.isNoObjectType());
      assertEquals(BooleanLiteralSet.TRUE, instanceObjectType0.getPossibleToBooleanOutcomes());
      assertEquals(false, instanceObjectType0.isVoidType());
      assertEquals(false, instanceObjectType0.isAllType());
      assertEquals(false, instanceObjectType0.isUnionType());
      assertEquals(false, instanceObjectType0.isNumberValueType());
      assertEquals(false, instanceObjectType0.isEmptyType());
      assertEquals(false, instanceObjectType0.hasReferenceName());
      assertEquals(false, instanceObjectType0.isTemplateType());
      assertEquals(false, instanceObjectType0.isFunctionType());
      
      boolean boolean0 = instanceObjectType0.canAssignTo((JSType) noType0);
      assertEquals(true, noType0.isEmptyType());
      assertEquals(false, noType0.isResolved());
      assertEquals(false, noType0.isRecordType());
      assertEquals(false, noType0.isFunctionType());
      assertEquals(true, noType0.hasInstanceType());
      assertEquals(false, noType0.isTemplateType());
      assertEquals(true, noType0.matchesObjectContext());
      assertEquals(false, noType0.isStringValueType());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertEquals(true, noType0.matchesNumberContext());
      assertEquals(false, noType0.isVoidType());
      assertEquals(false, noType0.isReturnTypeInferred());
      assertNull(noType0.getReferenceName());
      assertEquals(false, noType0.isInterface());
      assertEquals(false, noType0.isAllType());
      assertEquals(false, noType0.isUnionType());
      assertEquals(2147483647, noType0.getPropertiesCount());
      assertEquals(false, noType0.isNumberValueType());
      assertEquals(true, noType0.matchesStringContext());
      assertEquals(false, noType0.isBooleanValueType());
      assertEquals(true, noType0.isConstructor());
      assertEquals(false, noType0.isOrdinaryFunction());
      assertEquals(true, noType0.isNullable());
      assertEquals(true, noType0.hasCachedValues());
      assertEquals(false, noType0.isNullType());
      assertEquals(true, noType0.canBeCalled());
      assertEquals(2147483647, noType0.getMaxArguments());
      assertEquals("None", noType0.toString());
      assertEquals(false, noType0.isNoObjectType());
      assertNull(noType0.getTemplateTypeName());
      assertEquals(true, noType0.isNoType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(true, instanceObjectType0.isInstanceType());
      assertEquals(false, instanceObjectType0.isStringValueType());
      assertEquals(false, instanceObjectType0.isNullType());
      assertEquals(false, instanceObjectType0.isResolved());
      assertEquals(false, instanceObjectType0.isNoType());
      assertEquals(false, instanceObjectType0.isRecordType());
      assertEquals(false, instanceObjectType0.isBooleanValueType());
      assertEquals(false, instanceObjectType0.isNominalType());
      assertEquals(false, instanceObjectType0.isNoObjectType());
      assertEquals(BooleanLiteralSet.TRUE, instanceObjectType0.getPossibleToBooleanOutcomes());
      assertEquals(false, instanceObjectType0.isVoidType());
      assertEquals(false, instanceObjectType0.isAllType());
      assertEquals(false, instanceObjectType0.isUnionType());
      assertEquals(false, instanceObjectType0.isNumberValueType());
      assertEquals(false, instanceObjectType0.isEmptyType());
      assertEquals(false, instanceObjectType0.hasReferenceName());
      assertEquals(false, instanceObjectType0.isTemplateType());
      assertEquals(false, instanceObjectType0.isFunctionType());
      assertFalse(boolean0);
  }

  @Test
  public void test02()  throws Throwable  {
      ErrorReporter errorReporter0 = null;
      boolean boolean0 = false;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(errorReporter0, boolean0);
      assertNotNull(jSTypeRegistry0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
      assertNotNull(booleanType0);
      assertEquals(false, booleanType0.isResolved());
      assertEquals(false, booleanType0.isEmptyType());
      assertEquals(false, booleanType0.isVoidType());
      assertEquals(true, booleanType0.matchesObjectContext());
      assertEquals(false, booleanType0.isStringValueType());
      assertEquals(true, booleanType0.matchesStringContext());
      assertEquals(false, booleanType0.isUnionType());
      assertEquals(true, booleanType0.isBooleanValueType());
      assertEquals(false, booleanType0.isFunctionType());
      assertEquals(false, booleanType0.isAllType());
      assertEquals(BooleanLiteralSet.BOTH, booleanType0.getPossibleToBooleanOutcomes());
      assertEquals(false, booleanType0.isNoObjectType());
      assertEquals(false, booleanType0.isTemplateType());
      assertEquals(false, booleanType0.isNullable());
      assertEquals(true, booleanType0.matchesNumberContext());
      assertEquals(false, booleanType0.isNullType());
      assertEquals(false, booleanType0.isRecordType());
      assertEquals("boolean", booleanType0.toString());
      assertEquals(false, booleanType0.isNoType());
      assertEquals(false, booleanType0.isNumberValueType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      JSType[] jSTypeArray0 = new JSType[9];
      FunctionType functionType0 = jSTypeRegistry0.createConstructorType((JSType) booleanType0, jSTypeArray0);
      assertNotNull(functionType0);
      assertEquals(false, functionType0.isVoidType());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, functionType0.hasCachedValues());
      assertEquals(false, functionType0.isNullType());
      assertEquals(9, functionType0.getMaxArguments());
      assertEquals(true, functionType0.isConstructor());
      assertEquals(false, functionType0.isNoObjectType());
      assertEquals(false, functionType0.isReturnTypeInferred());
      assertEquals(false, functionType0.isNoType());
      assertEquals(false, functionType0.isAllType());
      assertEquals(false, functionType0.isNumberValueType());
      assertEquals(true, functionType0.isFunctionType());
      assertEquals(true, functionType0.hasInstanceType());
      assertEquals(true, functionType0.canBeCalled());
      assertEquals(false, functionType0.isInterface());
      assertEquals(false, functionType0.isResolved());
      assertEquals(false, functionType0.isOrdinaryFunction());
      assertEquals(false, functionType0.isBooleanValueType());
      assertEquals(false, functionType0.isTemplateType());
      assertEquals(false, functionType0.isUnionType());
      assertEquals(false, functionType0.isStringValueType());
      assertEquals(false, functionType0.isEmptyType());
      assertNull(functionType0.getTemplateTypeName());
      assertEquals(false, functionType0.isRecordType());
      assertEquals(false, booleanType0.isResolved());
      assertEquals(false, booleanType0.isEmptyType());
      assertEquals(false, booleanType0.isVoidType());
      assertEquals(true, booleanType0.matchesObjectContext());
      assertEquals(false, booleanType0.isStringValueType());
      assertEquals(true, booleanType0.matchesStringContext());
      assertEquals(false, booleanType0.isUnionType());
      assertEquals(true, booleanType0.isBooleanValueType());
      assertEquals(false, booleanType0.isFunctionType());
      assertEquals(false, booleanType0.isAllType());
      assertEquals(BooleanLiteralSet.BOTH, booleanType0.getPossibleToBooleanOutcomes());
      assertEquals(false, booleanType0.isNoObjectType());
      assertEquals(false, booleanType0.isTemplateType());
      assertEquals(false, booleanType0.isNullable());
      assertEquals(true, booleanType0.matchesNumberContext());
      assertEquals(false, booleanType0.isNullType());
      assertEquals(false, booleanType0.isRecordType());
      assertEquals("boolean", booleanType0.toString());
      assertEquals(false, booleanType0.isNoType());
      assertEquals(false, booleanType0.isNumberValueType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      InstanceObjectType instanceObjectType0 = new InstanceObjectType(jSTypeRegistry0, functionType0, boolean0);
      assertNotNull(instanceObjectType0);
      assertEquals(false, functionType0.isVoidType());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, functionType0.hasCachedValues());
      assertEquals(false, functionType0.isNullType());
      assertEquals(9, functionType0.getMaxArguments());
      assertEquals(true, functionType0.isConstructor());
      assertEquals(false, functionType0.isNoObjectType());
      assertEquals(false, functionType0.isReturnTypeInferred());
      assertEquals(false, functionType0.isNoType());
      assertEquals(false, functionType0.isAllType());
      assertEquals(false, functionType0.isNumberValueType());
      assertEquals(true, functionType0.isFunctionType());
      assertEquals(true, functionType0.hasInstanceType());
      assertEquals(true, functionType0.canBeCalled());
      assertEquals(false, functionType0.isInterface());
      assertEquals(false, functionType0.isResolved());
      assertEquals(false, functionType0.isOrdinaryFunction());
      assertEquals(false, functionType0.isBooleanValueType());
      assertEquals(false, functionType0.isTemplateType());
      assertEquals(false, functionType0.isUnionType());
      assertEquals(false, functionType0.isStringValueType());
      assertEquals(false, functionType0.isEmptyType());
      assertNull(functionType0.getTemplateTypeName());
      assertEquals(false, functionType0.isRecordType());
      assertEquals(false, booleanType0.isResolved());
      assertEquals(false, booleanType0.isEmptyType());
      assertEquals(false, booleanType0.isVoidType());
      assertEquals(true, booleanType0.matchesObjectContext());
      assertEquals(false, booleanType0.isStringValueType());
      assertEquals(true, booleanType0.matchesStringContext());
      assertEquals(false, booleanType0.isUnionType());
      assertEquals(true, booleanType0.isBooleanValueType());
      assertEquals(false, booleanType0.isFunctionType());
      assertEquals(false, booleanType0.isAllType());
      assertEquals(BooleanLiteralSet.BOTH, booleanType0.getPossibleToBooleanOutcomes());
      assertEquals(false, booleanType0.isNoObjectType());
      assertEquals(false, booleanType0.isTemplateType());
      assertEquals(false, booleanType0.isNullable());
      assertEquals(true, booleanType0.matchesNumberContext());
      assertEquals(false, booleanType0.isNullType());
      assertEquals(false, booleanType0.isRecordType());
      assertEquals("boolean", booleanType0.toString());
      assertEquals(false, booleanType0.isNoType());
      assertEquals(false, booleanType0.isNumberValueType());
      assertEquals(true, instanceObjectType0.isInstanceType());
      assertEquals(false, instanceObjectType0.isEmptyType());
      assertEquals(false, instanceObjectType0.isBooleanValueType());
      assertEquals(BooleanLiteralSet.TRUE, instanceObjectType0.getPossibleToBooleanOutcomes());
      assertEquals(false, instanceObjectType0.isNullType());
      assertEquals(false, instanceObjectType0.isResolved());
      assertEquals(false, instanceObjectType0.isTemplateType());
      assertEquals(false, instanceObjectType0.isAllType());
      assertEquals(false, instanceObjectType0.isUnionType());
      assertEquals(false, instanceObjectType0.isNoType());
      assertEquals(false, instanceObjectType0.isRecordType());
      assertEquals(false, instanceObjectType0.isStringValueType());
      assertEquals(false, instanceObjectType0.hasReferenceName());
      assertEquals(false, instanceObjectType0.isVoidType());
      assertEquals(false, instanceObjectType0.isNominalType());
      assertEquals(false, instanceObjectType0.isFunctionType());
      assertEquals(false, instanceObjectType0.isNumberValueType());
      assertEquals(false, instanceObjectType0.isNoObjectType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      boolean boolean1 = instanceObjectType0.isString();
      assertEquals(false, functionType0.isVoidType());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, functionType0.isNullType());
      assertEquals(9, functionType0.getMaxArguments());
      assertEquals(true, functionType0.isConstructor());
      assertEquals(false, functionType0.isNoObjectType());
      assertEquals(false, functionType0.isReturnTypeInferred());
      assertEquals(false, functionType0.isNoType());
      assertEquals(false, functionType0.isAllType());
      assertEquals(false, functionType0.isNumberValueType());
      assertEquals(true, functionType0.isFunctionType());
      assertEquals(true, functionType0.hasInstanceType());
      assertEquals(true, functionType0.canBeCalled());
      assertEquals(false, functionType0.isInterface());
      assertEquals(false, functionType0.isResolved());
      assertEquals(false, functionType0.isOrdinaryFunction());
      assertEquals(false, functionType0.isBooleanValueType());
      assertEquals(false, functionType0.isTemplateType());
      assertEquals(false, functionType0.isUnionType());
      assertEquals(false, functionType0.isStringValueType());
      assertEquals(true, functionType0.hasCachedValues());
      assertEquals(false, functionType0.isEmptyType());
      assertNull(functionType0.getTemplateTypeName());
      assertEquals(false, functionType0.isRecordType());
      assertEquals(false, booleanType0.isResolved());
      assertEquals(false, booleanType0.isEmptyType());
      assertEquals(false, booleanType0.isVoidType());
      assertEquals(true, booleanType0.matchesObjectContext());
      assertEquals(false, booleanType0.isStringValueType());
      assertEquals(true, booleanType0.matchesStringContext());
      assertEquals(false, booleanType0.isUnionType());
      assertEquals(true, booleanType0.isBooleanValueType());
      assertEquals(false, booleanType0.isFunctionType());
      assertEquals(false, booleanType0.isAllType());
      assertEquals(BooleanLiteralSet.BOTH, booleanType0.getPossibleToBooleanOutcomes());
      assertEquals(false, booleanType0.isNoObjectType());
      assertEquals(false, booleanType0.isTemplateType());
      assertEquals(false, booleanType0.isNullable());
      assertEquals(true, booleanType0.matchesNumberContext());
      assertEquals(false, booleanType0.isNullType());
      assertEquals(false, booleanType0.isRecordType());
      assertEquals("boolean", booleanType0.toString());
      assertEquals(false, booleanType0.isNoType());
      assertEquals(false, booleanType0.isNumberValueType());
      assertEquals(true, instanceObjectType0.isInstanceType());
      assertEquals(false, instanceObjectType0.isEmptyType());
      assertEquals(false, instanceObjectType0.isBooleanValueType());
      assertEquals(BooleanLiteralSet.TRUE, instanceObjectType0.getPossibleToBooleanOutcomes());
      assertEquals(false, instanceObjectType0.isNullType());
      assertEquals(false, instanceObjectType0.isResolved());
      assertEquals(false, instanceObjectType0.isTemplateType());
      assertEquals(false, instanceObjectType0.isAllType());
      assertEquals(false, instanceObjectType0.isUnionType());
      assertEquals(false, instanceObjectType0.isNoType());
      assertEquals(false, instanceObjectType0.isRecordType());
      assertEquals(false, instanceObjectType0.isStringValueType());
      assertEquals(false, instanceObjectType0.hasReferenceName());
      assertEquals(false, instanceObjectType0.isVoidType());
      assertEquals(false, instanceObjectType0.isNominalType());
      assertEquals(false, instanceObjectType0.isFunctionType());
      assertEquals(false, instanceObjectType0.isNumberValueType());
      assertEquals(false, instanceObjectType0.isNoObjectType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertTrue(boolean0 == boolean1);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test
  public void test03()  throws Throwable  {
      ErrorReporter errorReporter0 = null;
      boolean boolean0 = false;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(errorReporter0, boolean0);
      assertNotNull(jSTypeRegistry0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      String string0 = "r/XmRi6R8Go";
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, string0);
      assertNotNull(errorFunctionType0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, errorFunctionType0.isReturnTypeInferred());
      assertEquals(false, errorFunctionType0.isUnionType());
      assertNull(errorFunctionType0.getTemplateTypeName());
      assertEquals(false, errorFunctionType0.isResolved());
      assertEquals(false, errorFunctionType0.hasCachedValues());
      assertEquals(false, errorFunctionType0.isBooleanValueType());
      assertEquals(false, errorFunctionType0.isStringValueType());
      assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      assertEquals(true, errorFunctionType0.isFunctionType());
      assertEquals(3, errorFunctionType0.getMaxArguments());
      assertEquals(false, errorFunctionType0.isNoObjectType());
      assertEquals(false, errorFunctionType0.isNumberValueType());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, errorFunctionType0.isRecordType());
      assertEquals(false, errorFunctionType0.isInterface());
      assertEquals(false, errorFunctionType0.isTemplateType());
      assertEquals(false, errorFunctionType0.isNullType());
      assertEquals(false, errorFunctionType0.isVoidType());
      assertEquals(true, errorFunctionType0.isConstructor());
      assertEquals(false, errorFunctionType0.isAllType());
      assertEquals(false, errorFunctionType0.isEmptyType());
      assertEquals(false, errorFunctionType0.isNoType());
      assertEquals(true, errorFunctionType0.hasInstanceType());
      assertEquals(true, errorFunctionType0.canBeCalled());
      
      InstanceObjectType instanceObjectType0 = new InstanceObjectType(jSTypeRegistry0, errorFunctionType0, boolean0);
      assertNotNull(instanceObjectType0);
      assertEquals(false, instanceObjectType0.isEmptyType());
      assertEquals(false, instanceObjectType0.isTemplateType());
      assertEquals(false, instanceObjectType0.isRecordType());
      assertEquals(false, instanceObjectType0.isBooleanValueType());
      assertEquals(true, instanceObjectType0.isInstanceType());
      assertEquals(false, instanceObjectType0.isResolved());
      assertEquals(false, instanceObjectType0.isNumberValueType());
      assertEquals(true, instanceObjectType0.hasReferenceName());
      assertEquals(false, instanceObjectType0.isNoObjectType());
      assertEquals(true, instanceObjectType0.isNominalType());
      assertEquals(BooleanLiteralSet.TRUE, instanceObjectType0.getPossibleToBooleanOutcomes());
      assertEquals(false, instanceObjectType0.isVoidType());
      assertEquals(false, instanceObjectType0.isAllType());
      assertEquals(false, instanceObjectType0.isStringValueType());
      assertEquals(false, instanceObjectType0.isNullType());
      assertEquals(false, instanceObjectType0.isUnionType());
      assertEquals(false, instanceObjectType0.isNoType());
      assertEquals(false, instanceObjectType0.isFunctionType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, errorFunctionType0.isReturnTypeInferred());
      assertEquals(false, errorFunctionType0.isUnionType());
      assertNull(errorFunctionType0.getTemplateTypeName());
      assertEquals(false, errorFunctionType0.isResolved());
      assertEquals(false, errorFunctionType0.hasCachedValues());
      assertEquals(false, errorFunctionType0.isBooleanValueType());
      assertEquals(false, errorFunctionType0.isStringValueType());
      assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      assertEquals(true, errorFunctionType0.isFunctionType());
      assertEquals(3, errorFunctionType0.getMaxArguments());
      assertEquals(false, errorFunctionType0.isNoObjectType());
      assertEquals(false, errorFunctionType0.isNumberValueType());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, errorFunctionType0.isRecordType());
      assertEquals(false, errorFunctionType0.isInterface());
      assertEquals(false, errorFunctionType0.isTemplateType());
      assertEquals(false, errorFunctionType0.isNullType());
      assertEquals(false, errorFunctionType0.isVoidType());
      assertEquals(true, errorFunctionType0.isConstructor());
      assertEquals(false, errorFunctionType0.isAllType());
      assertEquals(false, errorFunctionType0.isEmptyType());
      assertEquals(false, errorFunctionType0.isNoType());
      assertEquals(true, errorFunctionType0.hasInstanceType());
      assertEquals(true, errorFunctionType0.canBeCalled());
      
      boolean boolean1 = instanceObjectType0.isEquivalentTo((JSType) instanceObjectType0);
      assertEquals(false, instanceObjectType0.isEmptyType());
      assertEquals(false, instanceObjectType0.isTemplateType());
      assertEquals(false, instanceObjectType0.isRecordType());
      assertEquals(false, instanceObjectType0.isBooleanValueType());
      assertEquals(true, instanceObjectType0.isInstanceType());
      assertEquals(false, instanceObjectType0.isResolved());
      assertEquals(false, instanceObjectType0.isNumberValueType());
      assertEquals(true, instanceObjectType0.hasReferenceName());
      assertEquals(false, instanceObjectType0.isNoObjectType());
      assertEquals(true, instanceObjectType0.isNominalType());
      assertEquals(BooleanLiteralSet.TRUE, instanceObjectType0.getPossibleToBooleanOutcomes());
      assertEquals(false, instanceObjectType0.isVoidType());
      assertEquals(false, instanceObjectType0.isAllType());
      assertEquals(false, instanceObjectType0.isStringValueType());
      assertEquals(false, instanceObjectType0.isNullType());
      assertEquals(false, instanceObjectType0.isUnionType());
      assertEquals(false, instanceObjectType0.isNoType());
      assertEquals(false, instanceObjectType0.isFunctionType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, errorFunctionType0.isReturnTypeInferred());
      assertEquals(false, errorFunctionType0.isUnionType());
      assertNull(errorFunctionType0.getTemplateTypeName());
      assertEquals(false, errorFunctionType0.isResolved());
      assertEquals(false, errorFunctionType0.hasCachedValues());
      assertEquals(false, errorFunctionType0.isBooleanValueType());
      assertEquals(false, errorFunctionType0.isStringValueType());
      assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      assertEquals(true, errorFunctionType0.isFunctionType());
      assertEquals(3, errorFunctionType0.getMaxArguments());
      assertEquals(false, errorFunctionType0.isNoObjectType());
      assertEquals(false, errorFunctionType0.isNumberValueType());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, errorFunctionType0.isRecordType());
      assertEquals(false, errorFunctionType0.isInterface());
      assertEquals(false, errorFunctionType0.isTemplateType());
      assertEquals(false, errorFunctionType0.isNullType());
      assertEquals(false, errorFunctionType0.isVoidType());
      assertEquals(true, errorFunctionType0.isConstructor());
      assertEquals(false, errorFunctionType0.isAllType());
      assertEquals(false, errorFunctionType0.isEmptyType());
      assertEquals(false, errorFunctionType0.isNoType());
      assertEquals(true, errorFunctionType0.hasInstanceType());
      assertEquals(true, errorFunctionType0.canBeCalled());
      assertFalse(boolean0 == boolean1);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test
  public void test04()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      JSTypeNative jSTypeNative0 = JSTypeNative.NO_OBJECT_TYPE;
      NoObjectType noObjectType0 = (NoObjectType)jSTypeRegistry0.getNativeFunctionType(jSTypeNative0);
      assertNotNull(noObjectType0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, noObjectType0.isResolved());
      assertEquals(false, noObjectType0.isBooleanValueType());
      assertNull(noObjectType0.getReferenceName());
      assertEquals(true, noObjectType0.hasInstanceType());
      assertEquals(false, noObjectType0.isAllType());
      assertEquals(2147483647, noObjectType0.getMaxArguments());
      assertEquals(2147483647, noObjectType0.getPropertiesCount());
      assertEquals(true, noObjectType0.matchesNumberContext());
      assertEquals(true, noObjectType0.matchesObjectContext());
      assertEquals("NoObject", noObjectType0.toString());
      assertEquals(false, noObjectType0.isNumberValueType());
      assertNull(noObjectType0.getTemplateTypeName());
      assertEquals(false, noObjectType0.isReturnTypeInferred());
      assertEquals(true, noObjectType0.isNoObjectType());
      assertEquals(false, noObjectType0.isNullType());
      assertEquals(BooleanLiteralSet.TRUE, noObjectType0.getPossibleToBooleanOutcomes());
      assertEquals(true, noObjectType0.canBeCalled());
      assertEquals(false, noObjectType0.isInterface());
      assertEquals(true, noObjectType0.matchesStringContext());
      assertEquals(true, noObjectType0.isEmptyType());
      assertEquals(false, noObjectType0.isNoType());
      assertEquals(false, noObjectType0.isOrdinaryFunction());
      assertEquals(true, noObjectType0.isConstructor());
      assertEquals(false, noObjectType0.isStringValueType());
      assertEquals(false, noObjectType0.isVoidType());
      assertEquals(false, noObjectType0.hasCachedValues());
      assertEquals(false, noObjectType0.isFunctionType());
      assertEquals(false, noObjectType0.isUnionType());
      assertEquals(false, noObjectType0.isTemplateType());
      assertEquals(false, noObjectType0.isRecordType());
      
      boolean boolean0 = true;
      InstanceObjectType instanceObjectType0 = new InstanceObjectType(jSTypeRegistry0, noObjectType0, boolean0);
      assertNotNull(instanceObjectType0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, instanceObjectType0.isResolved());
      assertEquals(false, instanceObjectType0.isNoObjectType());
      assertEquals(BooleanLiteralSet.TRUE, instanceObjectType0.getPossibleToBooleanOutcomes());
      assertEquals(true, instanceObjectType0.isInstanceType());
      assertEquals(false, instanceObjectType0.isStringValueType());
      assertEquals(false, instanceObjectType0.hasReferenceName());
      assertEquals(false, instanceObjectType0.isFunctionType());
      assertEquals(false, instanceObjectType0.isVoidType());
      assertEquals(false, instanceObjectType0.isNumberValueType());
      assertEquals(false, instanceObjectType0.isNoType());
      assertEquals(false, instanceObjectType0.isRecordType());
      assertEquals(false, instanceObjectType0.isNominalType());
      assertEquals(false, instanceObjectType0.isTemplateType());
      assertEquals(false, instanceObjectType0.isEmptyType());
      assertEquals(false, instanceObjectType0.isNullType());
      assertEquals(false, instanceObjectType0.isAllType());
      assertEquals(false, instanceObjectType0.isBooleanValueType());
      assertEquals(false, instanceObjectType0.isUnionType());
      assertEquals(false, noObjectType0.isResolved());
      assertEquals(false, noObjectType0.isBooleanValueType());
      assertNull(noObjectType0.getReferenceName());
      assertEquals(true, noObjectType0.hasInstanceType());
      assertEquals(false, noObjectType0.isAllType());
      assertEquals(2147483647, noObjectType0.getMaxArguments());
      assertEquals(2147483647, noObjectType0.getPropertiesCount());
      assertEquals(true, noObjectType0.matchesNumberContext());
      assertEquals(true, noObjectType0.matchesObjectContext());
      assertEquals("NoObject", noObjectType0.toString());
      assertEquals(false, noObjectType0.isNumberValueType());
      assertNull(noObjectType0.getTemplateTypeName());
      assertEquals(false, noObjectType0.isReturnTypeInferred());
      assertEquals(true, noObjectType0.isNoObjectType());
      assertEquals(false, noObjectType0.isNullType());
      assertEquals(BooleanLiteralSet.TRUE, noObjectType0.getPossibleToBooleanOutcomes());
      assertEquals(true, noObjectType0.canBeCalled());
      assertEquals(false, noObjectType0.isInterface());
      assertEquals(true, noObjectType0.matchesStringContext());
      assertEquals(true, noObjectType0.isEmptyType());
      assertEquals(false, noObjectType0.isNoType());
      assertEquals(false, noObjectType0.isOrdinaryFunction());
      assertEquals(true, noObjectType0.isConstructor());
      assertEquals(false, noObjectType0.isStringValueType());
      assertEquals(false, noObjectType0.isVoidType());
      assertEquals(false, noObjectType0.hasCachedValues());
      assertEquals(false, noObjectType0.isFunctionType());
      assertEquals(false, noObjectType0.isUnionType());
      assertEquals(false, noObjectType0.isTemplateType());
      assertEquals(false, noObjectType0.isRecordType());
      
      boolean boolean1 = instanceObjectType0.isRegexpType();
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, instanceObjectType0.isResolved());
      assertEquals(false, instanceObjectType0.isNoObjectType());
      assertEquals(BooleanLiteralSet.TRUE, instanceObjectType0.getPossibleToBooleanOutcomes());
      assertEquals(true, instanceObjectType0.isInstanceType());
      assertEquals(false, instanceObjectType0.isStringValueType());
      assertEquals(false, instanceObjectType0.hasReferenceName());
      assertEquals(false, instanceObjectType0.isFunctionType());
      assertEquals(false, instanceObjectType0.isVoidType());
      assertEquals(false, instanceObjectType0.isNumberValueType());
      assertEquals(false, instanceObjectType0.isNoType());
      assertEquals(false, instanceObjectType0.isRecordType());
      assertEquals(false, instanceObjectType0.isNominalType());
      assertEquals(false, instanceObjectType0.isTemplateType());
      assertEquals(false, instanceObjectType0.isEmptyType());
      assertEquals(false, instanceObjectType0.isNullType());
      assertEquals(false, instanceObjectType0.isAllType());
      assertEquals(false, instanceObjectType0.isBooleanValueType());
      assertEquals(false, instanceObjectType0.isUnionType());
      assertEquals(false, noObjectType0.isResolved());
      assertEquals(false, noObjectType0.isBooleanValueType());
      assertNull(noObjectType0.getReferenceName());
      assertEquals(true, noObjectType0.hasInstanceType());
      assertEquals(false, noObjectType0.isAllType());
      assertEquals(2147483647, noObjectType0.getMaxArguments());
      assertEquals(2147483647, noObjectType0.getPropertiesCount());
      assertEquals(true, noObjectType0.matchesNumberContext());
      assertEquals(true, noObjectType0.matchesObjectContext());
      assertEquals("NoObject", noObjectType0.toString());
      assertEquals(false, noObjectType0.isNumberValueType());
      assertNull(noObjectType0.getTemplateTypeName());
      assertEquals(false, noObjectType0.isReturnTypeInferred());
      assertEquals(true, noObjectType0.isNoObjectType());
      assertEquals(false, noObjectType0.isNullType());
      assertEquals(BooleanLiteralSet.TRUE, noObjectType0.getPossibleToBooleanOutcomes());
      assertEquals(true, noObjectType0.canBeCalled());
      assertEquals(false, noObjectType0.isInterface());
      assertEquals(true, noObjectType0.matchesStringContext());
      assertEquals(true, noObjectType0.isEmptyType());
      assertEquals(false, noObjectType0.isNoType());
      assertEquals(false, noObjectType0.isOrdinaryFunction());
      assertEquals(true, noObjectType0.isConstructor());
      assertEquals(false, noObjectType0.isStringValueType());
      assertEquals(false, noObjectType0.isVoidType());
      assertEquals(false, noObjectType0.hasCachedValues());
      assertEquals(false, noObjectType0.isFunctionType());
      assertEquals(false, noObjectType0.isUnionType());
      assertEquals(false, noObjectType0.isTemplateType());
      assertEquals(false, noObjectType0.isRecordType());
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean0 == boolean1);
      assertFalse(boolean1);
  }

  @Test
  public void test05()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      boolean boolean0 = true;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0, boolean0);
      assertNotNull(jSTypeRegistry0);
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      NoObjectType noObjectType0 = new NoObjectType(jSTypeRegistry0);
      assertNotNull(noObjectType0);
      assertEquals(false, noObjectType0.isUnionType());
      assertEquals(false, noObjectType0.isBooleanValueType());
      assertEquals(false, noObjectType0.isRecordType());
      assertEquals(false, noObjectType0.isAllType());
      assertEquals(false, noObjectType0.isResolved());
      assertEquals(true, noObjectType0.isEmptyType());
      assertEquals(true, noObjectType0.canBeCalled());
      assertEquals(true, noObjectType0.matchesNumberContext());
      assertEquals(false, noObjectType0.isFunctionType());
      assertEquals(true, noObjectType0.hasInstanceType());
      assertEquals("NoObject", noObjectType0.toString());
      assertNull(noObjectType0.getReferenceName());
      assertEquals(false, noObjectType0.isReturnTypeInferred());
      assertNull(noObjectType0.getTemplateTypeName());
      assertEquals(false, noObjectType0.isVoidType());
      assertEquals(false, noObjectType0.isStringValueType());
      assertEquals(false, noObjectType0.isNullType());
      assertEquals(2147483647, noObjectType0.getMaxArguments());
      assertEquals(true, noObjectType0.matchesStringContext());
      assertEquals(true, noObjectType0.isConstructor());
      assertEquals(false, noObjectType0.hasCachedValues());
      assertEquals(BooleanLiteralSet.TRUE, noObjectType0.getPossibleToBooleanOutcomes());
      assertEquals(true, noObjectType0.matchesObjectContext());
      assertEquals(false, noObjectType0.isNoType());
      assertEquals(false, noObjectType0.isInterface());
      assertEquals(false, noObjectType0.isOrdinaryFunction());
      assertEquals(2147483647, noObjectType0.getPropertiesCount());
      assertEquals(false, noObjectType0.isTemplateType());
      assertEquals(true, noObjectType0.isNoObjectType());
      assertEquals(false, noObjectType0.isNumberValueType());
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      JSType[] jSTypeArray0 = new JSType[4];
      jSTypeArray0[3] = (JSType) noObjectType0;
      assertNotNull(jSTypeArray0[3]);
      assertEquals(false, jSTypeArray0[3].isTemplateType());
      assertEquals(true, jSTypeArray0[3].isNoObjectType());
      assertEquals(false, jSTypeArray0[3].isStringValueType());
      assertEquals(false, jSTypeArray0[3].isNullType());
      assertEquals(false, jSTypeArray0[3].isRecordType());
      assertEquals(false, jSTypeArray0[3].isFunctionType());
      assertEquals(false, jSTypeArray0[3].isVoidType());
      assertEquals(false, jSTypeArray0[3].isNoType());
      assertEquals(true, jSTypeArray0[3].isEmptyType());
      assertEquals(false, jSTypeArray0[3].isAllType());
      assertEquals(false, jSTypeArray0[3].isUnionType());
      assertEquals(false, jSTypeArray0[3].isNumberValueType());
      assertEquals(false, jSTypeArray0[3].isResolved());
      assertEquals(false, jSTypeArray0[3].isBooleanValueType());
      assertEquals(false, noObjectType0.isUnionType());
      assertEquals(false, noObjectType0.isBooleanValueType());
      assertEquals(false, noObjectType0.isRecordType());
      assertEquals(false, noObjectType0.isAllType());
      assertEquals(false, noObjectType0.isResolved());
      assertEquals(true, noObjectType0.isEmptyType());
      assertEquals(true, noObjectType0.canBeCalled());
      assertEquals(true, noObjectType0.matchesNumberContext());
      assertEquals(false, noObjectType0.isFunctionType());
      assertEquals(true, noObjectType0.hasInstanceType());
      assertEquals("NoObject", noObjectType0.toString());
      assertNull(noObjectType0.getReferenceName());
      assertEquals(false, noObjectType0.isReturnTypeInferred());
      assertNull(noObjectType0.getTemplateTypeName());
      assertEquals(false, noObjectType0.isVoidType());
      assertEquals(false, noObjectType0.isStringValueType());
      assertEquals(false, noObjectType0.isNullType());
      assertEquals(2147483647, noObjectType0.getMaxArguments());
      assertEquals(true, noObjectType0.matchesStringContext());
      assertEquals(true, noObjectType0.isConstructor());
      assertEquals(false, noObjectType0.hasCachedValues());
      assertEquals(BooleanLiteralSet.TRUE, noObjectType0.getPossibleToBooleanOutcomes());
      assertEquals(true, noObjectType0.matchesObjectContext());
      assertEquals(false, noObjectType0.isNoType());
      assertEquals(false, noObjectType0.isInterface());
      assertEquals(false, noObjectType0.isOrdinaryFunction());
      assertEquals(2147483647, noObjectType0.getPropertiesCount());
      assertEquals(false, noObjectType0.isTemplateType());
      assertEquals(true, noObjectType0.isNoObjectType());
      assertEquals(false, noObjectType0.isNumberValueType());
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      FunctionType functionType0 = jSTypeRegistry0.createConstructorTypeWithVarArgs((JSType) noObjectType0, jSTypeArray0);
      assertNotNull(functionType0);
      assertEquals(false, functionType0.isVoidType());
      assertEquals(false, functionType0.isNoObjectType());
      assertEquals(false, functionType0.isNoType());
      assertEquals(false, functionType0.isRecordType());
      assertEquals(true, functionType0.hasInstanceType());
      assertNull(functionType0.getTemplateTypeName());
      assertEquals(false, functionType0.isUnionType());
      assertEquals(false, functionType0.isAllType());
      assertEquals(false, functionType0.isNumberValueType());
      assertEquals(false, functionType0.isTemplateType());
      assertEquals(false, functionType0.isResolved());
      assertEquals(false, functionType0.hasCachedValues());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, functionType0.isInterface());
      assertEquals(false, functionType0.isReturnTypeInferred());
      assertEquals(true, functionType0.isConstructor());
      assertEquals(false, functionType0.isBooleanValueType());
      assertEquals(true, functionType0.canBeCalled());
      assertEquals(false, functionType0.isEmptyType());
      assertEquals(false, functionType0.isStringValueType());
      assertEquals(false, functionType0.isNullType());
      assertEquals(true, functionType0.isFunctionType());
      assertEquals(2147483647, functionType0.getMaxArguments());
      assertEquals(false, functionType0.isOrdinaryFunction());
      assertEquals(false, noObjectType0.isUnionType());
      assertEquals(false, noObjectType0.isBooleanValueType());
      assertEquals(false, noObjectType0.isRecordType());
      assertEquals(false, noObjectType0.isAllType());
      assertEquals(false, noObjectType0.isResolved());
      assertEquals(true, noObjectType0.isEmptyType());
      assertEquals(true, noObjectType0.canBeCalled());
      assertEquals(true, noObjectType0.matchesNumberContext());
      assertEquals(false, noObjectType0.isFunctionType());
      assertEquals(true, noObjectType0.hasInstanceType());
      assertEquals("NoObject", noObjectType0.toString());
      assertNull(noObjectType0.getReferenceName());
      assertEquals(false, noObjectType0.isReturnTypeInferred());
      assertNull(noObjectType0.getTemplateTypeName());
      assertEquals(false, noObjectType0.isVoidType());
      assertEquals(false, noObjectType0.isStringValueType());
      assertEquals(false, noObjectType0.isNullType());
      assertEquals(2147483647, noObjectType0.getMaxArguments());
      assertEquals(true, noObjectType0.matchesStringContext());
      assertEquals(true, noObjectType0.isConstructor());
      assertEquals(false, noObjectType0.hasCachedValues());
      assertEquals(BooleanLiteralSet.TRUE, noObjectType0.getPossibleToBooleanOutcomes());
      assertEquals(true, noObjectType0.matchesObjectContext());
      assertEquals(false, noObjectType0.isNoType());
      assertEquals(false, noObjectType0.isInterface());
      assertEquals(false, noObjectType0.isOrdinaryFunction());
      assertEquals(2147483647, noObjectType0.getPropertiesCount());
      assertEquals(false, noObjectType0.isTemplateType());
      assertEquals(true, noObjectType0.isNoObjectType());
      assertEquals(false, noObjectType0.isNumberValueType());
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      InstanceObjectType instanceObjectType0 = new InstanceObjectType(jSTypeRegistry0, functionType0, boolean0);
      assertNotNull(instanceObjectType0);
      assertEquals(false, functionType0.isVoidType());
      assertEquals(false, functionType0.isNoObjectType());
      assertEquals(false, functionType0.isNoType());
      assertEquals(false, functionType0.isRecordType());
      assertEquals(true, functionType0.hasInstanceType());
      assertNull(functionType0.getTemplateTypeName());
      assertEquals(false, functionType0.isUnionType());
      assertEquals(false, functionType0.isAllType());
      assertEquals(false, functionType0.isNumberValueType());
      assertEquals(false, functionType0.isTemplateType());
      assertEquals(false, functionType0.isResolved());
      assertEquals(false, functionType0.hasCachedValues());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, functionType0.isInterface());
      assertEquals(false, functionType0.isReturnTypeInferred());
      assertEquals(true, functionType0.isConstructor());
      assertEquals(false, functionType0.isBooleanValueType());
      assertEquals(true, functionType0.canBeCalled());
      assertEquals(false, functionType0.isEmptyType());
      assertEquals(false, functionType0.isStringValueType());
      assertEquals(false, functionType0.isNullType());
      assertEquals(true, functionType0.isFunctionType());
      assertEquals(2147483647, functionType0.getMaxArguments());
      assertEquals(false, functionType0.isOrdinaryFunction());
      assertEquals(true, instanceObjectType0.isInstanceType());
      assertEquals(false, instanceObjectType0.isAllType());
      assertEquals(false, instanceObjectType0.isNominalType());
      assertEquals(false, instanceObjectType0.isFunctionType());
      assertEquals(BooleanLiteralSet.TRUE, instanceObjectType0.getPossibleToBooleanOutcomes());
      assertEquals(false, instanceObjectType0.isStringValueType());
      assertEquals(false, instanceObjectType0.hasReferenceName());
      assertEquals(false, instanceObjectType0.isTemplateType());
      assertEquals(false, instanceObjectType0.isResolved());
      assertEquals(false, instanceObjectType0.isNoObjectType());
      assertEquals(false, instanceObjectType0.isNoType());
      assertEquals(false, instanceObjectType0.isNumberValueType());
      assertEquals(false, instanceObjectType0.isVoidType());
      assertEquals(false, instanceObjectType0.isUnionType());
      assertEquals(false, instanceObjectType0.isEmptyType());
      assertEquals(false, instanceObjectType0.isNullType());
      assertEquals(false, instanceObjectType0.isBooleanValueType());
      assertEquals(false, instanceObjectType0.isRecordType());
      assertEquals(false, noObjectType0.isUnionType());
      assertEquals(false, noObjectType0.isBooleanValueType());
      assertEquals(false, noObjectType0.isRecordType());
      assertEquals(false, noObjectType0.isAllType());
      assertEquals(false, noObjectType0.isResolved());
      assertEquals(true, noObjectType0.isEmptyType());
      assertEquals(true, noObjectType0.canBeCalled());
      assertEquals(true, noObjectType0.matchesNumberContext());
      assertEquals(false, noObjectType0.isFunctionType());
      assertEquals(true, noObjectType0.hasInstanceType());
      assertEquals("NoObject", noObjectType0.toString());
      assertNull(noObjectType0.getReferenceName());
      assertEquals(false, noObjectType0.isReturnTypeInferred());
      assertNull(noObjectType0.getTemplateTypeName());
      assertEquals(false, noObjectType0.isVoidType());
      assertEquals(false, noObjectType0.isStringValueType());
      assertEquals(false, noObjectType0.isNullType());
      assertEquals(2147483647, noObjectType0.getMaxArguments());
      assertEquals(true, noObjectType0.matchesStringContext());
      assertEquals(true, noObjectType0.isConstructor());
      assertEquals(false, noObjectType0.hasCachedValues());
      assertEquals(BooleanLiteralSet.TRUE, noObjectType0.getPossibleToBooleanOutcomes());
      assertEquals(true, noObjectType0.matchesObjectContext());
      assertEquals(false, noObjectType0.isNoType());
      assertEquals(false, noObjectType0.isInterface());
      assertEquals(false, noObjectType0.isOrdinaryFunction());
      assertEquals(2147483647, noObjectType0.getPropertiesCount());
      assertEquals(false, noObjectType0.isTemplateType());
      assertEquals(true, noObjectType0.isNoObjectType());
      assertEquals(false, noObjectType0.isNumberValueType());
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      boolean boolean1 = instanceObjectType0.isRegexpType();
      assertEquals(false, functionType0.isVoidType());
      assertEquals(false, functionType0.isNoObjectType());
      assertEquals(false, functionType0.isNoType());
      assertEquals(false, functionType0.isRecordType());
      assertEquals(true, functionType0.hasInstanceType());
      assertNull(functionType0.getTemplateTypeName());
      assertEquals(false, functionType0.isUnionType());
      assertEquals(false, functionType0.isAllType());
      assertEquals(false, functionType0.isNumberValueType());
      assertEquals(false, functionType0.isTemplateType());
      assertEquals(false, functionType0.isResolved());
      assertEquals(false, functionType0.hasCachedValues());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, functionType0.isInterface());
      assertEquals(false, functionType0.isReturnTypeInferred());
      assertEquals(true, functionType0.isConstructor());
      assertEquals(false, functionType0.isBooleanValueType());
      assertEquals(true, functionType0.canBeCalled());
      assertEquals(false, functionType0.isEmptyType());
      assertEquals(false, functionType0.isStringValueType());
      assertEquals(false, functionType0.isNullType());
      assertEquals(true, functionType0.isFunctionType());
      assertEquals(2147483647, functionType0.getMaxArguments());
      assertEquals(false, functionType0.isOrdinaryFunction());
      assertEquals(true, instanceObjectType0.isInstanceType());
      assertEquals(false, instanceObjectType0.isAllType());
      assertEquals(false, instanceObjectType0.isNominalType());
      assertEquals(false, instanceObjectType0.isFunctionType());
      assertEquals(BooleanLiteralSet.TRUE, instanceObjectType0.getPossibleToBooleanOutcomes());
      assertEquals(false, instanceObjectType0.isStringValueType());
      assertEquals(false, instanceObjectType0.hasReferenceName());
      assertEquals(false, instanceObjectType0.isTemplateType());
      assertEquals(false, instanceObjectType0.isResolved());
      assertEquals(false, instanceObjectType0.isNoObjectType());
      assertEquals(false, instanceObjectType0.isNoType());
      assertEquals(false, instanceObjectType0.isNumberValueType());
      assertEquals(false, instanceObjectType0.isVoidType());
      assertEquals(false, instanceObjectType0.isUnionType());
      assertEquals(false, instanceObjectType0.isEmptyType());
      assertEquals(false, instanceObjectType0.isNullType());
      assertEquals(false, instanceObjectType0.isBooleanValueType());
      assertEquals(false, instanceObjectType0.isRecordType());
      assertEquals(false, noObjectType0.isUnionType());
      assertEquals(false, noObjectType0.isBooleanValueType());
      assertEquals(false, noObjectType0.isRecordType());
      assertEquals(false, noObjectType0.isAllType());
      assertEquals(false, noObjectType0.isResolved());
      assertEquals(true, noObjectType0.isEmptyType());
      assertEquals(true, noObjectType0.canBeCalled());
      assertEquals(true, noObjectType0.matchesNumberContext());
      assertEquals(false, noObjectType0.isFunctionType());
      assertEquals(true, noObjectType0.hasInstanceType());
      assertEquals("NoObject", noObjectType0.toString());
      assertNull(noObjectType0.getReferenceName());
      assertEquals(false, noObjectType0.isReturnTypeInferred());
      assertNull(noObjectType0.getTemplateTypeName());
      assertEquals(false, noObjectType0.isVoidType());
      assertEquals(false, noObjectType0.isStringValueType());
      assertEquals(false, noObjectType0.isNullType());
      assertEquals(2147483647, noObjectType0.getMaxArguments());
      assertEquals(true, noObjectType0.matchesStringContext());
      assertEquals(true, noObjectType0.isConstructor());
      assertEquals(false, noObjectType0.hasCachedValues());
      assertEquals(BooleanLiteralSet.TRUE, noObjectType0.getPossibleToBooleanOutcomes());
      assertEquals(true, noObjectType0.matchesObjectContext());
      assertEquals(false, noObjectType0.isNoType());
      assertEquals(false, noObjectType0.isInterface());
      assertEquals(false, noObjectType0.isOrdinaryFunction());
      assertEquals(2147483647, noObjectType0.getPropertiesCount());
      assertEquals(false, noObjectType0.isTemplateType());
      assertEquals(true, noObjectType0.isNoObjectType());
      assertEquals(false, noObjectType0.isNumberValueType());
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean0 == boolean1);
      assertFalse(boolean1);
  }

  @Test
  public void test06()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      String string0 = "Date";
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, string0);
      assertNotNull(errorFunctionType0);
      assertEquals(false, errorFunctionType0.isNumberValueType());
      assertEquals(false, errorFunctionType0.isResolved());
      assertEquals(false, errorFunctionType0.isTemplateType());
      assertEquals(false, errorFunctionType0.isNullType());
      assertEquals(false, errorFunctionType0.isBooleanValueType());
      assertEquals(3, errorFunctionType0.getMaxArguments());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, errorFunctionType0.isNoObjectType());
      assertEquals(false, errorFunctionType0.isRecordType());
      assertEquals(false, errorFunctionType0.isEmptyType());
      assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      assertEquals(false, errorFunctionType0.isUnionType());
      assertNull(errorFunctionType0.getTemplateTypeName());
      assertEquals(true, errorFunctionType0.isConstructor());
      assertEquals(false, errorFunctionType0.isStringValueType());
      assertEquals(true, errorFunctionType0.isFunctionType());
      assertEquals(true, errorFunctionType0.canBeCalled());
      assertEquals(true, errorFunctionType0.hasInstanceType());
      assertEquals(false, errorFunctionType0.isInterface());
      assertEquals(false, errorFunctionType0.isAllType());
      assertEquals(false, errorFunctionType0.isReturnTypeInferred());
      assertEquals(false, errorFunctionType0.isVoidType());
      assertEquals(false, errorFunctionType0.hasCachedValues());
      assertEquals(false, errorFunctionType0.isNoType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      InstanceObjectType instanceObjectType0 = new InstanceObjectType(jSTypeRegistry0, errorFunctionType0);
      assertNotNull(instanceObjectType0);
      assertEquals(false, errorFunctionType0.isNumberValueType());
      assertEquals(false, errorFunctionType0.isResolved());
      assertEquals(false, errorFunctionType0.isTemplateType());
      assertEquals(false, errorFunctionType0.isNullType());
      assertEquals(false, errorFunctionType0.isBooleanValueType());
      assertEquals(3, errorFunctionType0.getMaxArguments());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, errorFunctionType0.isNoObjectType());
      assertEquals(false, errorFunctionType0.isRecordType());
      assertEquals(false, errorFunctionType0.isEmptyType());
      assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      assertEquals(false, errorFunctionType0.isUnionType());
      assertNull(errorFunctionType0.getTemplateTypeName());
      assertEquals(true, errorFunctionType0.isConstructor());
      assertEquals(false, errorFunctionType0.isStringValueType());
      assertEquals(true, errorFunctionType0.isFunctionType());
      assertEquals(true, errorFunctionType0.canBeCalled());
      assertEquals(true, errorFunctionType0.hasInstanceType());
      assertEquals(false, errorFunctionType0.isInterface());
      assertEquals(false, errorFunctionType0.isAllType());
      assertEquals(false, errorFunctionType0.isReturnTypeInferred());
      assertEquals(false, errorFunctionType0.isVoidType());
      assertEquals(false, errorFunctionType0.hasCachedValues());
      assertEquals(false, errorFunctionType0.isNoType());
      assertEquals(false, instanceObjectType0.isBooleanValueType());
      assertEquals(false, instanceObjectType0.isResolved());
      assertEquals(false, instanceObjectType0.isTemplateType());
      assertEquals(false, instanceObjectType0.isStringValueType());
      assertEquals(false, instanceObjectType0.isNumberValueType());
      assertEquals(BooleanLiteralSet.TRUE, instanceObjectType0.getPossibleToBooleanOutcomes());
      assertEquals(false, instanceObjectType0.isVoidType());
      assertEquals(true, instanceObjectType0.hasReferenceName());
      assertEquals(false, instanceObjectType0.isNullType());
      assertEquals(false, instanceObjectType0.isNoObjectType());
      assertEquals(false, instanceObjectType0.isEmptyType());
      assertEquals(false, instanceObjectType0.isAllType());
      assertEquals(true, instanceObjectType0.isInstanceType());
      assertEquals(false, instanceObjectType0.isUnionType());
      assertEquals(true, instanceObjectType0.isNominalType());
      assertEquals(false, instanceObjectType0.isNoType());
      assertEquals(false, instanceObjectType0.isRecordType());
      assertEquals(false, instanceObjectType0.isFunctionType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      boolean boolean0 = instanceObjectType0.matchesUint32Context();
      assertEquals(false, errorFunctionType0.isNumberValueType());
      assertEquals(false, errorFunctionType0.isResolved());
      assertEquals(false, errorFunctionType0.isTemplateType());
      assertEquals(false, errorFunctionType0.isNullType());
      assertEquals(false, errorFunctionType0.isBooleanValueType());
      assertEquals(3, errorFunctionType0.getMaxArguments());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, errorFunctionType0.isNoObjectType());
      assertEquals(false, errorFunctionType0.isRecordType());
      assertEquals(false, errorFunctionType0.isEmptyType());
      assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      assertEquals(false, errorFunctionType0.isUnionType());
      assertNull(errorFunctionType0.getTemplateTypeName());
      assertEquals(true, errorFunctionType0.isConstructor());
      assertEquals(false, errorFunctionType0.isStringValueType());
      assertEquals(true, errorFunctionType0.isFunctionType());
      assertEquals(true, errorFunctionType0.canBeCalled());
      assertEquals(true, errorFunctionType0.hasInstanceType());
      assertEquals(false, errorFunctionType0.isInterface());
      assertEquals(false, errorFunctionType0.isAllType());
      assertEquals(false, errorFunctionType0.isReturnTypeInferred());
      assertEquals(false, errorFunctionType0.isVoidType());
      assertEquals(false, errorFunctionType0.hasCachedValues());
      assertEquals(false, errorFunctionType0.isNoType());
      assertEquals(false, instanceObjectType0.isBooleanValueType());
      assertEquals(false, instanceObjectType0.isResolved());
      assertEquals(false, instanceObjectType0.isTemplateType());
      assertEquals(false, instanceObjectType0.isStringValueType());
      assertEquals(false, instanceObjectType0.isNumberValueType());
      assertEquals(BooleanLiteralSet.TRUE, instanceObjectType0.getPossibleToBooleanOutcomes());
      assertEquals(false, instanceObjectType0.isVoidType());
      assertEquals(true, instanceObjectType0.hasReferenceName());
      assertEquals(false, instanceObjectType0.isNullType());
      assertEquals(false, instanceObjectType0.isNoObjectType());
      assertEquals(false, instanceObjectType0.isEmptyType());
      assertEquals(false, instanceObjectType0.isAllType());
      assertEquals(true, instanceObjectType0.isInstanceType());
      assertEquals(false, instanceObjectType0.isUnionType());
      assertEquals(true, instanceObjectType0.isNominalType());
      assertEquals(false, instanceObjectType0.isNoType());
      assertEquals(false, instanceObjectType0.isRecordType());
      assertEquals(false, instanceObjectType0.isFunctionType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertTrue(boolean0);
  }

  @Test
  public void test07()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      String string0 = "Number";
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, string0);
      assertNotNull(errorFunctionType0);
      assertEquals(false, errorFunctionType0.isUnionType());
      assertEquals(false, errorFunctionType0.isVoidType());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertEquals(true, errorFunctionType0.isConstructor());
      assertEquals(false, errorFunctionType0.isReturnTypeInferred());
      assertEquals(false, errorFunctionType0.hasCachedValues());
      assertEquals(false, errorFunctionType0.isEmptyType());
      assertEquals(true, errorFunctionType0.canBeCalled());
      assertEquals(false, errorFunctionType0.isTemplateType());
      assertEquals(false, errorFunctionType0.isNoObjectType());
      assertEquals(false, errorFunctionType0.isBooleanValueType());
      assertEquals(true, errorFunctionType0.hasInstanceType());
      assertEquals(false, errorFunctionType0.isRecordType());
      assertEquals(false, errorFunctionType0.isNoType());
      assertEquals(false, errorFunctionType0.isAllType());
      assertEquals(false, errorFunctionType0.isStringValueType());
      assertEquals(false, errorFunctionType0.isResolved());
      assertEquals(false, errorFunctionType0.isNullType());
      assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      assertNull(errorFunctionType0.getTemplateTypeName());
      assertEquals(false, errorFunctionType0.isInterface());
      assertEquals(true, errorFunctionType0.isFunctionType());
      assertEquals(false, errorFunctionType0.isNumberValueType());
      assertEquals(3, errorFunctionType0.getMaxArguments());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      InstanceObjectType instanceObjectType0 = new InstanceObjectType(jSTypeRegistry0, errorFunctionType0);
      assertNotNull(instanceObjectType0);
      assertEquals(false, errorFunctionType0.isUnionType());
      assertEquals(false, errorFunctionType0.isVoidType());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertEquals(true, errorFunctionType0.isConstructor());
      assertEquals(false, errorFunctionType0.isReturnTypeInferred());
      assertEquals(false, errorFunctionType0.hasCachedValues());
      assertEquals(false, errorFunctionType0.isEmptyType());
      assertEquals(true, errorFunctionType0.canBeCalled());
      assertEquals(false, errorFunctionType0.isTemplateType());
      assertEquals(false, errorFunctionType0.isNoObjectType());
      assertEquals(false, errorFunctionType0.isBooleanValueType());
      assertEquals(true, errorFunctionType0.hasInstanceType());
      assertEquals(false, errorFunctionType0.isRecordType());
      assertEquals(false, errorFunctionType0.isNoType());
      assertEquals(false, errorFunctionType0.isAllType());
      assertEquals(false, errorFunctionType0.isStringValueType());
      assertEquals(false, errorFunctionType0.isResolved());
      assertEquals(false, errorFunctionType0.isNullType());
      assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      assertNull(errorFunctionType0.getTemplateTypeName());
      assertEquals(false, errorFunctionType0.isInterface());
      assertEquals(true, errorFunctionType0.isFunctionType());
      assertEquals(false, errorFunctionType0.isNumberValueType());
      assertEquals(3, errorFunctionType0.getMaxArguments());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, instanceObjectType0.isBooleanValueType());
      assertEquals(false, instanceObjectType0.isNullType());
      assertEquals(BooleanLiteralSet.TRUE, instanceObjectType0.getPossibleToBooleanOutcomes());
      assertEquals(false, instanceObjectType0.isTemplateType());
      assertEquals(false, instanceObjectType0.isRecordType());
      assertEquals(true, instanceObjectType0.hasReferenceName());
      assertEquals(false, instanceObjectType0.isVoidType());
      assertEquals(true, instanceObjectType0.isInstanceType());
      assertEquals(false, instanceObjectType0.isAllType());
      assertEquals(false, instanceObjectType0.isUnionType());
      assertEquals(true, instanceObjectType0.isNominalType());
      assertEquals(false, instanceObjectType0.isNoType());
      assertEquals(false, instanceObjectType0.isNoObjectType());
      assertEquals(false, instanceObjectType0.isResolved());
      assertEquals(false, instanceObjectType0.isStringValueType());
      assertEquals(false, instanceObjectType0.isFunctionType());
      assertEquals(false, instanceObjectType0.isNumberValueType());
      assertEquals(false, instanceObjectType0.isEmptyType());
      
      boolean boolean0 = instanceObjectType0.matchesUint32Context();
      assertEquals(false, errorFunctionType0.isUnionType());
      assertEquals(false, errorFunctionType0.isVoidType());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertEquals(true, errorFunctionType0.isConstructor());
      assertEquals(false, errorFunctionType0.isReturnTypeInferred());
      assertEquals(false, errorFunctionType0.hasCachedValues());
      assertEquals(false, errorFunctionType0.isEmptyType());
      assertEquals(true, errorFunctionType0.canBeCalled());
      assertEquals(false, errorFunctionType0.isTemplateType());
      assertEquals(false, errorFunctionType0.isNoObjectType());
      assertEquals(false, errorFunctionType0.isBooleanValueType());
      assertEquals(true, errorFunctionType0.hasInstanceType());
      assertEquals(false, errorFunctionType0.isRecordType());
      assertEquals(false, errorFunctionType0.isNoType());
      assertEquals(false, errorFunctionType0.isAllType());
      assertEquals(false, errorFunctionType0.isStringValueType());
      assertEquals(false, errorFunctionType0.isResolved());
      assertEquals(false, errorFunctionType0.isNullType());
      assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      assertNull(errorFunctionType0.getTemplateTypeName());
      assertEquals(false, errorFunctionType0.isInterface());
      assertEquals(true, errorFunctionType0.isFunctionType());
      assertEquals(false, errorFunctionType0.isNumberValueType());
      assertEquals(3, errorFunctionType0.getMaxArguments());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, instanceObjectType0.isBooleanValueType());
      assertEquals(false, instanceObjectType0.isNullType());
      assertEquals(BooleanLiteralSet.TRUE, instanceObjectType0.getPossibleToBooleanOutcomes());
      assertEquals(false, instanceObjectType0.isTemplateType());
      assertEquals(false, instanceObjectType0.isRecordType());
      assertEquals(true, instanceObjectType0.hasReferenceName());
      assertEquals(false, instanceObjectType0.isVoidType());
      assertEquals(true, instanceObjectType0.isInstanceType());
      assertEquals(false, instanceObjectType0.isAllType());
      assertEquals(false, instanceObjectType0.isUnionType());
      assertEquals(true, instanceObjectType0.isNominalType());
      assertEquals(false, instanceObjectType0.isNoType());
      assertEquals(false, instanceObjectType0.isNoObjectType());
      assertEquals(false, instanceObjectType0.isResolved());
      assertEquals(false, instanceObjectType0.isStringValueType());
      assertEquals(false, instanceObjectType0.isFunctionType());
      assertEquals(false, instanceObjectType0.isNumberValueType());
      assertEquals(false, instanceObjectType0.isEmptyType());
      assertTrue(boolean0);
  }

  @Test
  public void test08()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      String string0 = "Boolean";
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, string0);
      assertNotNull(errorFunctionType0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      assertEquals(false, errorFunctionType0.isAllType());
      assertEquals(false, errorFunctionType0.isStringValueType());
      assertEquals(true, errorFunctionType0.isFunctionType());
      assertEquals(false, errorFunctionType0.isNoObjectType());
      assertEquals(false, errorFunctionType0.isNullType());
      assertEquals(false, errorFunctionType0.isVoidType());
      assertEquals(false, errorFunctionType0.isRecordType());
      assertEquals(false, errorFunctionType0.isUnionType());
      assertEquals(false, errorFunctionType0.isResolved());
      assertEquals(false, errorFunctionType0.isBooleanValueType());
      assertNull(errorFunctionType0.getTemplateTypeName());
      assertEquals(true, errorFunctionType0.canBeCalled());
      assertEquals(false, errorFunctionType0.hasCachedValues());
      assertEquals(3, errorFunctionType0.getMaxArguments());
      assertEquals(true, errorFunctionType0.isConstructor());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertEquals(true, errorFunctionType0.hasInstanceType());
      assertEquals(false, errorFunctionType0.isNumberValueType());
      assertEquals(false, errorFunctionType0.isInterface());
      assertEquals(false, errorFunctionType0.isTemplateType());
      assertEquals(false, errorFunctionType0.isReturnTypeInferred());
      assertEquals(false, errorFunctionType0.isNoType());
      assertEquals(false, errorFunctionType0.isEmptyType());
      
      InstanceObjectType instanceObjectType0 = new InstanceObjectType(jSTypeRegistry0, errorFunctionType0);
      assertNotNull(instanceObjectType0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, instanceObjectType0.isRecordType());
      assertEquals(false, instanceObjectType0.isTemplateType());
      assertEquals(false, instanceObjectType0.isAllType());
      assertEquals(false, instanceObjectType0.isResolved());
      assertEquals(false, instanceObjectType0.isUnionType());
      assertEquals(false, instanceObjectType0.isNoObjectType());
      assertEquals(false, instanceObjectType0.isEmptyType());
      assertEquals(false, instanceObjectType0.isNumberValueType());
      assertEquals(true, instanceObjectType0.isInstanceType());
      assertEquals(false, instanceObjectType0.isStringValueType());
      assertEquals(true, instanceObjectType0.isNominalType());
      assertEquals(BooleanLiteralSet.TRUE, instanceObjectType0.getPossibleToBooleanOutcomes());
      assertEquals(false, instanceObjectType0.isFunctionType());
      assertEquals(false, instanceObjectType0.isVoidType());
      assertEquals(false, instanceObjectType0.isBooleanValueType());
      assertEquals(true, instanceObjectType0.hasReferenceName());
      assertEquals(false, instanceObjectType0.isNullType());
      assertEquals(false, instanceObjectType0.isNoType());
      assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      assertEquals(false, errorFunctionType0.isAllType());
      assertEquals(false, errorFunctionType0.isStringValueType());
      assertEquals(true, errorFunctionType0.isFunctionType());
      assertEquals(false, errorFunctionType0.isNoObjectType());
      assertEquals(false, errorFunctionType0.isNullType());
      assertEquals(false, errorFunctionType0.isVoidType());
      assertEquals(false, errorFunctionType0.isRecordType());
      assertEquals(false, errorFunctionType0.isUnionType());
      assertEquals(false, errorFunctionType0.isResolved());
      assertEquals(false, errorFunctionType0.isBooleanValueType());
      assertNull(errorFunctionType0.getTemplateTypeName());
      assertEquals(true, errorFunctionType0.canBeCalled());
      assertEquals(false, errorFunctionType0.hasCachedValues());
      assertEquals(3, errorFunctionType0.getMaxArguments());
      assertEquals(true, errorFunctionType0.isConstructor());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertEquals(true, errorFunctionType0.hasInstanceType());
      assertEquals(false, errorFunctionType0.isNumberValueType());
      assertEquals(false, errorFunctionType0.isInterface());
      assertEquals(false, errorFunctionType0.isTemplateType());
      assertEquals(false, errorFunctionType0.isReturnTypeInferred());
      assertEquals(false, errorFunctionType0.isNoType());
      assertEquals(false, errorFunctionType0.isEmptyType());
      
      boolean boolean0 = instanceObjectType0.matchesUint32Context();
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, instanceObjectType0.isRecordType());
      assertEquals(false, instanceObjectType0.isTemplateType());
      assertEquals(false, instanceObjectType0.isAllType());
      assertEquals(false, instanceObjectType0.isResolved());
      assertEquals(false, instanceObjectType0.isUnionType());
      assertEquals(false, instanceObjectType0.isNoObjectType());
      assertEquals(false, instanceObjectType0.isEmptyType());
      assertEquals(false, instanceObjectType0.isNumberValueType());
      assertEquals(true, instanceObjectType0.isInstanceType());
      assertEquals(false, instanceObjectType0.isStringValueType());
      assertEquals(true, instanceObjectType0.isNominalType());
      assertEquals(BooleanLiteralSet.TRUE, instanceObjectType0.getPossibleToBooleanOutcomes());
      assertEquals(false, instanceObjectType0.isFunctionType());
      assertEquals(false, instanceObjectType0.isVoidType());
      assertEquals(false, instanceObjectType0.isBooleanValueType());
      assertEquals(true, instanceObjectType0.hasReferenceName());
      assertEquals(false, instanceObjectType0.isNullType());
      assertEquals(false, instanceObjectType0.isNoType());
      assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      assertEquals(false, errorFunctionType0.isAllType());
      assertEquals(false, errorFunctionType0.isStringValueType());
      assertEquals(true, errorFunctionType0.isFunctionType());
      assertEquals(false, errorFunctionType0.isNoObjectType());
      assertEquals(false, errorFunctionType0.isNullType());
      assertEquals(false, errorFunctionType0.isVoidType());
      assertEquals(false, errorFunctionType0.isRecordType());
      assertEquals(false, errorFunctionType0.isUnionType());
      assertEquals(false, errorFunctionType0.isResolved());
      assertEquals(false, errorFunctionType0.isBooleanValueType());
      assertNull(errorFunctionType0.getTemplateTypeName());
      assertEquals(true, errorFunctionType0.canBeCalled());
      assertEquals(false, errorFunctionType0.hasCachedValues());
      assertEquals(3, errorFunctionType0.getMaxArguments());
      assertEquals(true, errorFunctionType0.isConstructor());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertEquals(true, errorFunctionType0.hasInstanceType());
      assertEquals(false, errorFunctionType0.isNumberValueType());
      assertEquals(false, errorFunctionType0.isInterface());
      assertEquals(false, errorFunctionType0.isTemplateType());
      assertEquals(false, errorFunctionType0.isReturnTypeInferred());
      assertEquals(false, errorFunctionType0.isNoType());
      assertEquals(false, errorFunctionType0.isEmptyType());
      assertTrue(boolean0);
  }

  @Test
  public void test09()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      boolean boolean0 = true;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0, boolean0);
      assertNotNull(jSTypeRegistry0);
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      String string0 = "String";
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, string0);
      assertNotNull(errorFunctionType0);
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, errorFunctionType0.isResolved());
      assertEquals(false, errorFunctionType0.isInterface());
      assertEquals(false, errorFunctionType0.isTemplateType());
      assertEquals(false, errorFunctionType0.isReturnTypeInferred());
      assertEquals(true, errorFunctionType0.isConstructor());
      assertNull(errorFunctionType0.getTemplateTypeName());
      assertEquals(false, errorFunctionType0.hasCachedValues());
      assertEquals(false, errorFunctionType0.isVoidType());
      assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      assertEquals(false, errorFunctionType0.isNoType());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertEquals(true, errorFunctionType0.hasInstanceType());
      assertEquals(true, errorFunctionType0.isFunctionType());
      assertEquals(false, errorFunctionType0.isRecordType());
      assertEquals(false, errorFunctionType0.isUnionType());
      assertEquals(false, errorFunctionType0.isNoObjectType());
      assertEquals(false, errorFunctionType0.isBooleanValueType());
      assertEquals(false, errorFunctionType0.isNullType());
      assertEquals(false, errorFunctionType0.isEmptyType());
      assertEquals(false, errorFunctionType0.isAllType());
      assertEquals(3, errorFunctionType0.getMaxArguments());
      assertEquals(false, errorFunctionType0.isNumberValueType());
      assertEquals(false, errorFunctionType0.isStringValueType());
      assertEquals(true, errorFunctionType0.canBeCalled());
      
      InstanceObjectType instanceObjectType0 = new InstanceObjectType(jSTypeRegistry0, errorFunctionType0, boolean0);
      assertNotNull(instanceObjectType0);
      assertEquals(false, instanceObjectType0.isNoType());
      assertEquals(true, instanceObjectType0.isInstanceType());
      assertEquals(false, instanceObjectType0.isNoObjectType());
      assertEquals(BooleanLiteralSet.TRUE, instanceObjectType0.getPossibleToBooleanOutcomes());
      assertEquals(false, instanceObjectType0.isVoidType());
      assertEquals(true, instanceObjectType0.hasReferenceName());
      assertEquals(false, instanceObjectType0.isEmptyType());
      assertEquals(false, instanceObjectType0.isNullType());
      assertEquals(false, instanceObjectType0.isResolved());
      assertEquals(false, instanceObjectType0.isBooleanValueType());
      assertEquals(false, instanceObjectType0.isNumberValueType());
      assertEquals(false, instanceObjectType0.isAllType());
      assertEquals(false, instanceObjectType0.isUnionType());
      assertEquals(false, instanceObjectType0.isFunctionType());
      assertEquals(true, instanceObjectType0.isNominalType());
      assertEquals(false, instanceObjectType0.isStringValueType());
      assertEquals(false, instanceObjectType0.isRecordType());
      assertEquals(false, instanceObjectType0.isTemplateType());
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, errorFunctionType0.isResolved());
      assertEquals(false, errorFunctionType0.isInterface());
      assertEquals(false, errorFunctionType0.isTemplateType());
      assertEquals(false, errorFunctionType0.isReturnTypeInferred());
      assertEquals(true, errorFunctionType0.isConstructor());
      assertNull(errorFunctionType0.getTemplateTypeName());
      assertEquals(false, errorFunctionType0.hasCachedValues());
      assertEquals(false, errorFunctionType0.isVoidType());
      assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      assertEquals(false, errorFunctionType0.isNoType());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertEquals(true, errorFunctionType0.hasInstanceType());
      assertEquals(true, errorFunctionType0.isFunctionType());
      assertEquals(false, errorFunctionType0.isRecordType());
      assertEquals(false, errorFunctionType0.isUnionType());
      assertEquals(false, errorFunctionType0.isNoObjectType());
      assertEquals(false, errorFunctionType0.isBooleanValueType());
      assertEquals(false, errorFunctionType0.isNullType());
      assertEquals(false, errorFunctionType0.isEmptyType());
      assertEquals(false, errorFunctionType0.isAllType());
      assertEquals(3, errorFunctionType0.getMaxArguments());
      assertEquals(false, errorFunctionType0.isNumberValueType());
      assertEquals(false, errorFunctionType0.isStringValueType());
      assertEquals(true, errorFunctionType0.canBeCalled());
      
      boolean boolean1 = instanceObjectType0.isStringObjectType();
      assertEquals(false, instanceObjectType0.isNoType());
      assertEquals(true, instanceObjectType0.isInstanceType());
      assertEquals(false, instanceObjectType0.isNoObjectType());
      assertEquals(BooleanLiteralSet.TRUE, instanceObjectType0.getPossibleToBooleanOutcomes());
      assertEquals(false, instanceObjectType0.isVoidType());
      assertEquals(true, instanceObjectType0.hasReferenceName());
      assertEquals(false, instanceObjectType0.isEmptyType());
      assertEquals(false, instanceObjectType0.isNullType());
      assertEquals(false, instanceObjectType0.isResolved());
      assertEquals(false, instanceObjectType0.isBooleanValueType());
      assertEquals(false, instanceObjectType0.isNumberValueType());
      assertEquals(false, instanceObjectType0.isAllType());
      assertEquals(false, instanceObjectType0.isUnionType());
      assertEquals(false, instanceObjectType0.isFunctionType());
      assertEquals(true, instanceObjectType0.isNominalType());
      assertEquals(false, instanceObjectType0.isStringValueType());
      assertEquals(false, instanceObjectType0.isRecordType());
      assertEquals(false, instanceObjectType0.isTemplateType());
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, errorFunctionType0.isResolved());
      assertEquals(false, errorFunctionType0.isInterface());
      assertEquals(false, errorFunctionType0.isTemplateType());
      assertEquals(false, errorFunctionType0.isReturnTypeInferred());
      assertEquals(true, errorFunctionType0.isConstructor());
      assertNull(errorFunctionType0.getTemplateTypeName());
      assertEquals(false, errorFunctionType0.hasCachedValues());
      assertEquals(false, errorFunctionType0.isVoidType());
      assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      assertEquals(false, errorFunctionType0.isNoType());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertEquals(true, errorFunctionType0.hasInstanceType());
      assertEquals(true, errorFunctionType0.isFunctionType());
      assertEquals(false, errorFunctionType0.isRecordType());
      assertEquals(false, errorFunctionType0.isUnionType());
      assertEquals(false, errorFunctionType0.isNoObjectType());
      assertEquals(false, errorFunctionType0.isBooleanValueType());
      assertEquals(false, errorFunctionType0.isNullType());
      assertEquals(false, errorFunctionType0.isEmptyType());
      assertEquals(false, errorFunctionType0.isAllType());
      assertEquals(3, errorFunctionType0.getMaxArguments());
      assertEquals(false, errorFunctionType0.isNumberValueType());
      assertEquals(false, errorFunctionType0.isStringValueType());
      assertEquals(true, errorFunctionType0.canBeCalled());
      assertTrue(boolean0 == boolean1);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test
  public void test10()  throws Throwable  {
      ErrorReporter errorReporter0 = null;
      boolean boolean0 = true;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(errorReporter0, boolean0);
      assertNotNull(jSTypeRegistry0);
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      String string0 = "K";
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, string0);
      assertNotNull(errorFunctionType0);
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, errorFunctionType0.isReturnTypeInferred());
      assertEquals(false, errorFunctionType0.isStringValueType());
      assertEquals(false, errorFunctionType0.isUnionType());
      assertEquals(false, errorFunctionType0.isNullType());
      assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      assertEquals(true, errorFunctionType0.canBeCalled());
      assertEquals(true, errorFunctionType0.isFunctionType());
      assertEquals(false, errorFunctionType0.isResolved());
      assertEquals(false, errorFunctionType0.isNoType());
      assertEquals(false, errorFunctionType0.isAllType());
      assertEquals(false, errorFunctionType0.isBooleanValueType());
      assertEquals(false, errorFunctionType0.isNoObjectType());
      assertEquals(false, errorFunctionType0.isNumberValueType());
      assertEquals(false, errorFunctionType0.hasCachedValues());
      assertEquals(true, errorFunctionType0.hasInstanceType());
      assertEquals(true, errorFunctionType0.isConstructor());
      assertNull(errorFunctionType0.getTemplateTypeName());
      assertEquals(false, errorFunctionType0.isVoidType());
      assertEquals(false, errorFunctionType0.isInterface());
      assertEquals(false, errorFunctionType0.isEmptyType());
      assertEquals(3, errorFunctionType0.getMaxArguments());
      assertEquals(false, errorFunctionType0.isTemplateType());
      assertEquals(false, errorFunctionType0.isRecordType());
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      InstanceObjectType instanceObjectType0 = new InstanceObjectType(jSTypeRegistry0, errorFunctionType0, boolean0);
      assertNotNull(instanceObjectType0);
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, errorFunctionType0.isReturnTypeInferred());
      assertEquals(false, errorFunctionType0.isStringValueType());
      assertEquals(false, errorFunctionType0.isUnionType());
      assertEquals(false, errorFunctionType0.isNullType());
      assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      assertEquals(true, errorFunctionType0.canBeCalled());
      assertEquals(true, errorFunctionType0.isFunctionType());
      assertEquals(false, errorFunctionType0.isResolved());
      assertEquals(false, errorFunctionType0.isNoType());
      assertEquals(false, errorFunctionType0.isAllType());
      assertEquals(false, errorFunctionType0.isBooleanValueType());
      assertEquals(false, errorFunctionType0.isNoObjectType());
      assertEquals(false, errorFunctionType0.isNumberValueType());
      assertEquals(false, errorFunctionType0.hasCachedValues());
      assertEquals(true, errorFunctionType0.hasInstanceType());
      assertEquals(true, errorFunctionType0.isConstructor());
      assertNull(errorFunctionType0.getTemplateTypeName());
      assertEquals(false, errorFunctionType0.isVoidType());
      assertEquals(false, errorFunctionType0.isInterface());
      assertEquals(false, errorFunctionType0.isEmptyType());
      assertEquals(3, errorFunctionType0.getMaxArguments());
      assertEquals(false, errorFunctionType0.isTemplateType());
      assertEquals(false, errorFunctionType0.isRecordType());
      assertEquals(false, instanceObjectType0.isNoObjectType());
      assertEquals(true, instanceObjectType0.isInstanceType());
      assertEquals(false, instanceObjectType0.isEmptyType());
      assertEquals(false, instanceObjectType0.isTemplateType());
      assertEquals(BooleanLiteralSet.TRUE, instanceObjectType0.getPossibleToBooleanOutcomes());
      assertEquals(false, instanceObjectType0.isRecordType());
      assertEquals(false, instanceObjectType0.isNullType());
      assertEquals(false, instanceObjectType0.isAllType());
      assertEquals(false, instanceObjectType0.isResolved());
      assertEquals(true, instanceObjectType0.hasReferenceName());
      assertEquals(false, instanceObjectType0.isNumberValueType());
      assertEquals(false, instanceObjectType0.isStringValueType());
      assertEquals(false, instanceObjectType0.isNoType());
      assertEquals(false, instanceObjectType0.isBooleanValueType());
      assertEquals(false, instanceObjectType0.isFunctionType());
      assertEquals(false, instanceObjectType0.isUnionType());
      assertEquals(true, instanceObjectType0.isNominalType());
      assertEquals(false, instanceObjectType0.isVoidType());
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      boolean boolean1 = instanceObjectType0.matchesInt32Context();
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, errorFunctionType0.isReturnTypeInferred());
      assertEquals(false, errorFunctionType0.isStringValueType());
      assertEquals(false, errorFunctionType0.isUnionType());
      assertEquals(false, errorFunctionType0.isNullType());
      assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      assertEquals(true, errorFunctionType0.canBeCalled());
      assertEquals(true, errorFunctionType0.isFunctionType());
      assertEquals(false, errorFunctionType0.isResolved());
      assertEquals(false, errorFunctionType0.isNoType());
      assertEquals(false, errorFunctionType0.isAllType());
      assertEquals(false, errorFunctionType0.isBooleanValueType());
      assertEquals(false, errorFunctionType0.isNoObjectType());
      assertEquals(false, errorFunctionType0.isNumberValueType());
      assertEquals(false, errorFunctionType0.hasCachedValues());
      assertEquals(true, errorFunctionType0.hasInstanceType());
      assertEquals(true, errorFunctionType0.isConstructor());
      assertNull(errorFunctionType0.getTemplateTypeName());
      assertEquals(false, errorFunctionType0.isVoidType());
      assertEquals(false, errorFunctionType0.isInterface());
      assertEquals(false, errorFunctionType0.isEmptyType());
      assertEquals(3, errorFunctionType0.getMaxArguments());
      assertEquals(false, errorFunctionType0.isTemplateType());
      assertEquals(false, errorFunctionType0.isRecordType());
      assertEquals(false, instanceObjectType0.isNoObjectType());
      assertEquals(true, instanceObjectType0.isInstanceType());
      assertEquals(false, instanceObjectType0.isEmptyType());
      assertEquals(false, instanceObjectType0.isTemplateType());
      assertEquals(BooleanLiteralSet.TRUE, instanceObjectType0.getPossibleToBooleanOutcomes());
      assertEquals(false, instanceObjectType0.isRecordType());
      assertEquals(false, instanceObjectType0.isNullType());
      assertEquals(false, instanceObjectType0.isAllType());
      assertEquals(false, instanceObjectType0.isResolved());
      assertEquals(true, instanceObjectType0.hasReferenceName());
      assertEquals(false, instanceObjectType0.isNumberValueType());
      assertEquals(false, instanceObjectType0.isStringValueType());
      assertEquals(false, instanceObjectType0.isNoType());
      assertEquals(false, instanceObjectType0.isBooleanValueType());
      assertEquals(false, instanceObjectType0.isFunctionType());
      assertEquals(false, instanceObjectType0.isUnionType());
      assertEquals(true, instanceObjectType0.isNominalType());
      assertEquals(false, instanceObjectType0.isVoidType());
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(boolean0 == boolean1);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test
  public void test11()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      boolean boolean0 = false;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0, boolean0);
      assertNotNull(jSTypeRegistry0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      StringType stringType0 = new StringType(jSTypeRegistry0);
      assertNotNull(stringType0);
      assertEquals(true, stringType0.matchesObjectContext());
      assertEquals(false, stringType0.isVoidType());
      assertEquals(true, stringType0.isStringValueType());
      assertEquals(false, stringType0.isUnionType());
      assertEquals(true, stringType0.matchesStringContext());
      assertEquals(false, stringType0.isAllType());
      assertEquals(false, stringType0.isEmptyType());
      assertEquals(true, stringType0.matchesNumberContext());
      assertEquals(false, stringType0.isResolved());
      assertEquals(false, stringType0.isNumberValueType());
      assertEquals(false, stringType0.isNullType());
      assertEquals(false, stringType0.isTemplateType());
      assertEquals(BooleanLiteralSet.BOTH, stringType0.getPossibleToBooleanOutcomes());
      assertEquals("string", stringType0.toString());
      assertEquals(false, stringType0.isNoObjectType());
      assertEquals(false, stringType0.isFunctionType());
      assertEquals(false, stringType0.isRecordType());
      assertEquals(false, stringType0.isBooleanValueType());
      assertEquals(false, stringType0.isNoType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      assertNotNull(linkedList0);
      assertEquals("[]", linkedList0.toString());
      assertEquals(0, linkedList0.size());
      
      FunctionType functionType0 = jSTypeRegistry0.createFunctionTypeWithVarArgs((JSType) stringType0, (List<JSType>) linkedList0);
      assertNotNull(functionType0);
      assertEquals("[]", linkedList0.toString());
      assertEquals(0, linkedList0.size());
      assertEquals(true, stringType0.matchesObjectContext());
      assertEquals(false, stringType0.isVoidType());
      assertEquals(true, stringType0.isStringValueType());
      assertEquals(false, stringType0.isUnionType());
      assertEquals(true, stringType0.matchesStringContext());
      assertEquals(false, stringType0.isAllType());
      assertEquals(false, stringType0.isEmptyType());
      assertEquals(true, stringType0.matchesNumberContext());
      assertEquals(false, stringType0.isResolved());
      assertEquals(false, stringType0.isNumberValueType());
      assertEquals(false, stringType0.isNullType());
      assertEquals(false, stringType0.isTemplateType());
      assertEquals(BooleanLiteralSet.BOTH, stringType0.getPossibleToBooleanOutcomes());
      assertEquals("string", stringType0.toString());
      assertEquals(false, stringType0.isNoObjectType());
      assertEquals(false, stringType0.isFunctionType());
      assertEquals(false, stringType0.isRecordType());
      assertEquals(false, stringType0.isBooleanValueType());
      assertEquals(false, stringType0.isNoType());
      assertEquals(false, functionType0.isReturnTypeInferred());
      assertEquals(false, functionType0.isAllType());
      assertEquals(false, functionType0.isVoidType());
      assertEquals(true, functionType0.canBeCalled());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertEquals(true, functionType0.isFunctionType());
      assertEquals(false, functionType0.isEmptyType());
      assertEquals(false, functionType0.isBooleanValueType());
      assertEquals(true, functionType0.isOrdinaryFunction());
      assertEquals(false, functionType0.isNullType());
      assertEquals(false, functionType0.isUnionType());
      assertEquals(false, functionType0.isTemplateType());
      assertNull(functionType0.getTemplateTypeName());
      assertEquals(false, functionType0.isInterface());
      assertEquals(0, functionType0.getMaxArguments());
      assertEquals(false, functionType0.isNoObjectType());
      assertEquals(false, functionType0.isRecordType());
      assertEquals(false, functionType0.isConstructor());
      assertEquals(false, functionType0.hasCachedValues());
      assertEquals(false, functionType0.isStringValueType());
      assertEquals(false, functionType0.isResolved());
      assertEquals(false, functionType0.hasInstanceType());
      assertEquals(false, functionType0.isNoType());
      assertEquals(false, functionType0.isNumberValueType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      InstanceObjectType instanceObjectType0 = new InstanceObjectType(jSTypeRegistry0, functionType0);
      assertNotNull(instanceObjectType0);
      assertEquals("[]", linkedList0.toString());
      assertEquals(0, linkedList0.size());
      assertEquals(false, instanceObjectType0.isTemplateType());
      assertEquals(BooleanLiteralSet.TRUE, instanceObjectType0.getPossibleToBooleanOutcomes());
      assertEquals(false, instanceObjectType0.isRecordType());
      assertEquals(false, instanceObjectType0.isNumberValueType());
      assertEquals(true, instanceObjectType0.isInstanceType());
      assertEquals(false, instanceObjectType0.isNullType());
      assertEquals(false, instanceObjectType0.isNominalType());
      assertEquals(false, instanceObjectType0.isUnionType());
      assertEquals(false, instanceObjectType0.isResolved());
      assertEquals(false, instanceObjectType0.isStringValueType());
      assertEquals(false, instanceObjectType0.isNoObjectType());
      assertEquals(false, instanceObjectType0.isEmptyType());
      assertEquals(false, instanceObjectType0.hasReferenceName());
      assertEquals(false, instanceObjectType0.isFunctionType());
      assertEquals(false, instanceObjectType0.isAllType());
      assertEquals(false, instanceObjectType0.isVoidType());
      assertEquals(false, instanceObjectType0.isNoType());
      assertEquals(false, instanceObjectType0.isBooleanValueType());
      assertEquals(true, stringType0.matchesObjectContext());
      assertEquals(false, stringType0.isVoidType());
      assertEquals(true, stringType0.isStringValueType());
      assertEquals(false, stringType0.isUnionType());
      assertEquals(true, stringType0.matchesStringContext());
      assertEquals(false, stringType0.isAllType());
      assertEquals(false, stringType0.isEmptyType());
      assertEquals(true, stringType0.matchesNumberContext());
      assertEquals(false, stringType0.isResolved());
      assertEquals(false, stringType0.isNumberValueType());
      assertEquals(false, stringType0.isNullType());
      assertEquals(false, stringType0.isTemplateType());
      assertEquals(BooleanLiteralSet.BOTH, stringType0.getPossibleToBooleanOutcomes());
      assertEquals("string", stringType0.toString());
      assertEquals(false, stringType0.isNoObjectType());
      assertEquals(false, stringType0.isFunctionType());
      assertEquals(false, stringType0.isRecordType());
      assertEquals(false, stringType0.isBooleanValueType());
      assertEquals(false, stringType0.isNoType());
      assertEquals(false, functionType0.isReturnTypeInferred());
      assertEquals(false, functionType0.isAllType());
      assertEquals(false, functionType0.isVoidType());
      assertEquals(true, functionType0.canBeCalled());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertEquals(true, functionType0.isFunctionType());
      assertEquals(false, functionType0.isEmptyType());
      assertEquals(false, functionType0.isBooleanValueType());
      assertEquals(true, functionType0.isOrdinaryFunction());
      assertEquals(false, functionType0.isNullType());
      assertEquals(false, functionType0.isUnionType());
      assertEquals(false, functionType0.isTemplateType());
      assertNull(functionType0.getTemplateTypeName());
      assertEquals(false, functionType0.isInterface());
      assertEquals(0, functionType0.getMaxArguments());
      assertEquals(false, functionType0.isNoObjectType());
      assertEquals(false, functionType0.isRecordType());
      assertEquals(false, functionType0.isConstructor());
      assertEquals(false, functionType0.hasCachedValues());
      assertEquals(false, functionType0.isStringValueType());
      assertEquals(false, functionType0.isResolved());
      assertEquals(false, functionType0.hasInstanceType());
      assertEquals(false, functionType0.isNoType());
      assertEquals(false, functionType0.isNumberValueType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      boolean boolean1 = instanceObjectType0.matchesUint32Context();
      assertEquals("[]", linkedList0.toString());
      assertEquals(0, linkedList0.size());
      assertEquals(false, instanceObjectType0.isTemplateType());
      assertEquals(BooleanLiteralSet.TRUE, instanceObjectType0.getPossibleToBooleanOutcomes());
      assertEquals(false, instanceObjectType0.isRecordType());
      assertEquals(false, instanceObjectType0.isNumberValueType());
      assertEquals(true, instanceObjectType0.isInstanceType());
      assertEquals(false, instanceObjectType0.isNullType());
      assertEquals(false, instanceObjectType0.isNominalType());
      assertEquals(false, instanceObjectType0.isUnionType());
      assertEquals(false, instanceObjectType0.isResolved());
      assertEquals(false, instanceObjectType0.isStringValueType());
      assertEquals(false, instanceObjectType0.isNoObjectType());
      assertEquals(false, instanceObjectType0.isEmptyType());
      assertEquals(false, instanceObjectType0.hasReferenceName());
      assertEquals(false, instanceObjectType0.isFunctionType());
      assertEquals(false, instanceObjectType0.isAllType());
      assertEquals(false, instanceObjectType0.isVoidType());
      assertEquals(false, instanceObjectType0.isNoType());
      assertEquals(false, instanceObjectType0.isBooleanValueType());
      assertEquals(true, stringType0.matchesObjectContext());
      assertEquals(false, stringType0.isVoidType());
      assertEquals(true, stringType0.isStringValueType());
      assertEquals(false, stringType0.isUnionType());
      assertEquals(true, stringType0.matchesStringContext());
      assertEquals(false, stringType0.isAllType());
      assertEquals(false, stringType0.isEmptyType());
      assertEquals(true, stringType0.matchesNumberContext());
      assertEquals(false, stringType0.isResolved());
      assertEquals(false, stringType0.isNumberValueType());
      assertEquals(false, stringType0.isNullType());
      assertEquals(false, stringType0.isTemplateType());
      assertEquals(BooleanLiteralSet.BOTH, stringType0.getPossibleToBooleanOutcomes());
      assertEquals("string", stringType0.toString());
      assertEquals(false, stringType0.isNoObjectType());
      assertEquals(false, stringType0.isFunctionType());
      assertEquals(false, stringType0.isRecordType());
      assertEquals(false, stringType0.isBooleanValueType());
      assertEquals(false, stringType0.isNoType());
      assertEquals(false, functionType0.isReturnTypeInferred());
      assertEquals(false, functionType0.isAllType());
      assertEquals(false, functionType0.isVoidType());
      assertEquals(true, functionType0.canBeCalled());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertEquals(true, functionType0.isFunctionType());
      assertEquals(false, functionType0.isEmptyType());
      assertEquals(false, functionType0.isBooleanValueType());
      assertEquals(true, functionType0.isOrdinaryFunction());
      assertEquals(false, functionType0.isNullType());
      assertEquals(false, functionType0.isUnionType());
      assertEquals(true, functionType0.hasCachedValues());
      assertEquals(false, functionType0.isTemplateType());
      assertNull(functionType0.getTemplateTypeName());
      assertEquals(false, functionType0.isInterface());
      assertEquals(0, functionType0.getMaxArguments());
      assertEquals(false, functionType0.isNoObjectType());
      assertEquals(false, functionType0.isRecordType());
      assertEquals(false, functionType0.isConstructor());
      assertEquals(false, functionType0.isStringValueType());
      assertEquals(false, functionType0.isResolved());
      assertEquals(false, functionType0.hasInstanceType());
      assertEquals(false, functionType0.isNoType());
      assertEquals(false, functionType0.isNumberValueType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean0 == boolean1);
      assertFalse(boolean1);
  }

  @Test
  public void test12()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      JSTypeNative jSTypeNative0 = JSTypeNative.ARRAY_FUNCTION_TYPE;
      FunctionType functionType0 = jSTypeRegistry0.getNativeFunctionType(jSTypeNative0);
      assertNotNull(functionType0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(true, functionType0.hasInstanceType());
      assertEquals(false, functionType0.isStringValueType());
      assertEquals(true, functionType0.isFunctionType());
      assertEquals(false, functionType0.isNoObjectType());
      assertEquals(false, functionType0.isBooleanValueType());
      assertEquals(true, functionType0.isConstructor());
      assertEquals(false, functionType0.isNullType());
      assertEquals(true, functionType0.canBeCalled());
      assertEquals(false, functionType0.isReturnTypeInferred());
      assertEquals(false, functionType0.isEmptyType());
      assertEquals(false, functionType0.isOrdinaryFunction());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, functionType0.isInterface());
      assertEquals(false, functionType0.isAllType());
      assertEquals(false, functionType0.isNumberValueType());
      assertEquals(true, functionType0.hasCachedValues());
      assertEquals(false, functionType0.isRecordType());
      assertEquals(false, functionType0.isVoidType());
      assertEquals(false, functionType0.isResolved());
      assertEquals(false, functionType0.isNoType());
      assertEquals(2147483647, functionType0.getMaxArguments());
      assertEquals(false, functionType0.isTemplateType());
      assertNull(functionType0.getTemplateTypeName());
      assertEquals(false, functionType0.isUnionType());
      
      boolean boolean0 = false;
      InstanceObjectType instanceObjectType0 = new InstanceObjectType(jSTypeRegistry0, functionType0, boolean0);
      assertNotNull(instanceObjectType0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, instanceObjectType0.isNoType());
      assertEquals(false, instanceObjectType0.isResolved());
      assertEquals(false, instanceObjectType0.isNoObjectType());
      assertEquals(BooleanLiteralSet.TRUE, instanceObjectType0.getPossibleToBooleanOutcomes());
      assertEquals(false, instanceObjectType0.isFunctionType());
      assertEquals(false, instanceObjectType0.isTemplateType());
      assertEquals(true, instanceObjectType0.hasReferenceName());
      assertEquals(true, instanceObjectType0.isInstanceType());
      assertEquals(false, instanceObjectType0.isStringValueType());
      assertEquals(false, instanceObjectType0.isEmptyType());
      assertEquals(false, instanceObjectType0.isBooleanValueType());
      assertEquals(false, instanceObjectType0.isNumberValueType());
      assertEquals(false, instanceObjectType0.isAllType());
      assertEquals(false, instanceObjectType0.isVoidType());
      assertEquals(false, instanceObjectType0.isRecordType());
      assertEquals(false, instanceObjectType0.isNullType());
      assertEquals(false, instanceObjectType0.isUnionType());
      assertEquals(true, instanceObjectType0.isNominalType());
      assertEquals(true, functionType0.hasInstanceType());
      assertEquals(false, functionType0.isStringValueType());
      assertEquals(true, functionType0.isFunctionType());
      assertEquals(false, functionType0.isNoObjectType());
      assertEquals(false, functionType0.isBooleanValueType());
      assertEquals(true, functionType0.isConstructor());
      assertEquals(false, functionType0.isNullType());
      assertEquals(true, functionType0.canBeCalled());
      assertEquals(false, functionType0.isReturnTypeInferred());
      assertEquals(false, functionType0.isEmptyType());
      assertEquals(false, functionType0.isOrdinaryFunction());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, functionType0.isInterface());
      assertEquals(false, functionType0.isAllType());
      assertEquals(false, functionType0.isNumberValueType());
      assertEquals(true, functionType0.hasCachedValues());
      assertEquals(false, functionType0.isRecordType());
      assertEquals(false, functionType0.isVoidType());
      assertEquals(false, functionType0.isResolved());
      assertEquals(false, functionType0.isNoType());
      assertEquals(2147483647, functionType0.getMaxArguments());
      assertEquals(false, functionType0.isTemplateType());
      assertNull(functionType0.getTemplateTypeName());
      assertEquals(false, functionType0.isUnionType());
      
      boolean boolean1 = instanceObjectType0.isArrayType();
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, instanceObjectType0.isNoType());
      assertEquals(false, instanceObjectType0.isResolved());
      assertEquals(false, instanceObjectType0.isNoObjectType());
      assertEquals(BooleanLiteralSet.TRUE, instanceObjectType0.getPossibleToBooleanOutcomes());
      assertEquals(false, instanceObjectType0.isFunctionType());
      assertEquals(false, instanceObjectType0.isTemplateType());
      assertEquals(true, instanceObjectType0.hasReferenceName());
      assertEquals(true, instanceObjectType0.isInstanceType());
      assertEquals(false, instanceObjectType0.isStringValueType());
      assertEquals(false, instanceObjectType0.isEmptyType());
      assertEquals(false, instanceObjectType0.isBooleanValueType());
      assertEquals(false, instanceObjectType0.isNumberValueType());
      assertEquals(false, instanceObjectType0.isAllType());
      assertEquals(false, instanceObjectType0.isVoidType());
      assertEquals(false, instanceObjectType0.isRecordType());
      assertEquals(false, instanceObjectType0.isNullType());
      assertEquals(false, instanceObjectType0.isUnionType());
      assertEquals(true, instanceObjectType0.isNominalType());
      assertEquals(true, functionType0.hasInstanceType());
      assertEquals(false, functionType0.isStringValueType());
      assertEquals(true, functionType0.isFunctionType());
      assertEquals(false, functionType0.isNoObjectType());
      assertEquals(false, functionType0.isBooleanValueType());
      assertEquals(true, functionType0.isConstructor());
      assertEquals(false, functionType0.isNullType());
      assertEquals(true, functionType0.canBeCalled());
      assertEquals(false, functionType0.isReturnTypeInferred());
      assertEquals(false, functionType0.isEmptyType());
      assertEquals(false, functionType0.isOrdinaryFunction());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, functionType0.isInterface());
      assertEquals(false, functionType0.isAllType());
      assertEquals(false, functionType0.isNumberValueType());
      assertEquals(true, functionType0.hasCachedValues());
      assertEquals(false, functionType0.isRecordType());
      assertEquals(false, functionType0.isVoidType());
      assertEquals(false, functionType0.isResolved());
      assertEquals(false, functionType0.isNoType());
      assertEquals(2147483647, functionType0.getMaxArguments());
      assertEquals(false, functionType0.isTemplateType());
      assertNull(functionType0.getTemplateTypeName());
      assertEquals(false, functionType0.isUnionType());
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean0 == boolean1);
      assertTrue(boolean1);
  }

  @Test
  public void test13()  throws Throwable  {
      ErrorReporter errorReporter0 = null;
      boolean boolean0 = false;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(errorReporter0, boolean0);
      assertNotNull(jSTypeRegistry0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
      assertNotNull(booleanType0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(true, booleanType0.matchesObjectContext());
      assertEquals(BooleanLiteralSet.BOTH, booleanType0.getPossibleToBooleanOutcomes());
      assertEquals("boolean", booleanType0.toString());
      assertEquals(false, booleanType0.isUnionType());
      assertEquals(false, booleanType0.isVoidType());
      assertEquals(false, booleanType0.isNumberValueType());
      assertEquals(true, booleanType0.isBooleanValueType());
      assertEquals(false, booleanType0.isNoType());
      assertEquals(false, booleanType0.isFunctionType());
      assertEquals(false, booleanType0.isAllType());
      assertEquals(false, booleanType0.isNoObjectType());
      assertEquals(true, booleanType0.matchesStringContext());
      assertEquals(false, booleanType0.isResolved());
      assertEquals(false, booleanType0.isNullable());
      assertEquals(false, booleanType0.isTemplateType());
      assertEquals(true, booleanType0.matchesNumberContext());
      assertEquals(false, booleanType0.isStringValueType());
      assertEquals(false, booleanType0.isEmptyType());
      assertEquals(false, booleanType0.isRecordType());
      assertEquals(false, booleanType0.isNullType());
      
      JSType[] jSTypeArray0 = new JSType[9];
      FunctionType functionType0 = jSTypeRegistry0.createConstructorType((JSType) booleanType0, jSTypeArray0);
      assertNotNull(functionType0);
      assertEquals(false, functionType0.isNumberValueType());
      assertEquals(false, functionType0.isResolved());
      assertEquals(false, functionType0.isRecordType());
      assertEquals(false, functionType0.hasCachedValues());
      assertEquals(true, functionType0.canBeCalled());
      assertEquals(false, functionType0.isNoType());
      assertNull(functionType0.getTemplateTypeName());
      assertEquals(false, functionType0.isNullType());
      assertEquals(false, functionType0.isBooleanValueType());
      assertEquals(9, functionType0.getMaxArguments());
      assertEquals(false, functionType0.isOrdinaryFunction());
      assertEquals(false, functionType0.isNoObjectType());
      assertEquals(false, functionType0.isEmptyType());
      assertEquals(true, functionType0.isFunctionType());
      assertEquals(false, functionType0.isAllType());
      assertEquals(true, functionType0.hasInstanceType());
      assertEquals(false, functionType0.isTemplateType());
      assertEquals(false, functionType0.isReturnTypeInferred());
      assertEquals(false, functionType0.isStringValueType());
      assertEquals(true, functionType0.isConstructor());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, functionType0.isVoidType());
      assertEquals(false, functionType0.isUnionType());
      assertEquals(false, functionType0.isInterface());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(true, booleanType0.matchesObjectContext());
      assertEquals(BooleanLiteralSet.BOTH, booleanType0.getPossibleToBooleanOutcomes());
      assertEquals("boolean", booleanType0.toString());
      assertEquals(false, booleanType0.isUnionType());
      assertEquals(false, booleanType0.isVoidType());
      assertEquals(false, booleanType0.isNumberValueType());
      assertEquals(true, booleanType0.isBooleanValueType());
      assertEquals(false, booleanType0.isNoType());
      assertEquals(false, booleanType0.isFunctionType());
      assertEquals(false, booleanType0.isAllType());
      assertEquals(false, booleanType0.isNoObjectType());
      assertEquals(true, booleanType0.matchesStringContext());
      assertEquals(false, booleanType0.isResolved());
      assertEquals(false, booleanType0.isNullable());
      assertEquals(false, booleanType0.isTemplateType());
      assertEquals(true, booleanType0.matchesNumberContext());
      assertEquals(false, booleanType0.isStringValueType());
      assertEquals(false, booleanType0.isEmptyType());
      assertEquals(false, booleanType0.isRecordType());
      assertEquals(false, booleanType0.isNullType());
      
      InstanceObjectType instanceObjectType0 = new InstanceObjectType(jSTypeRegistry0, functionType0, boolean0);
      assertNotNull(instanceObjectType0);
      assertEquals(false, functionType0.isNumberValueType());
      assertEquals(false, functionType0.isResolved());
      assertEquals(false, functionType0.isRecordType());
      assertEquals(false, functionType0.hasCachedValues());
      assertEquals(true, functionType0.canBeCalled());
      assertEquals(false, functionType0.isNoType());
      assertNull(functionType0.getTemplateTypeName());
      assertEquals(false, functionType0.isNullType());
      assertEquals(false, functionType0.isBooleanValueType());
      assertEquals(9, functionType0.getMaxArguments());
      assertEquals(false, functionType0.isOrdinaryFunction());
      assertEquals(false, functionType0.isNoObjectType());
      assertEquals(false, functionType0.isEmptyType());
      assertEquals(true, functionType0.isFunctionType());
      assertEquals(false, functionType0.isAllType());
      assertEquals(true, functionType0.hasInstanceType());
      assertEquals(false, functionType0.isTemplateType());
      assertEquals(false, functionType0.isReturnTypeInferred());
      assertEquals(false, functionType0.isStringValueType());
      assertEquals(true, functionType0.isConstructor());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, functionType0.isVoidType());
      assertEquals(false, functionType0.isUnionType());
      assertEquals(false, functionType0.isInterface());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(true, booleanType0.matchesObjectContext());
      assertEquals(BooleanLiteralSet.BOTH, booleanType0.getPossibleToBooleanOutcomes());
      assertEquals("boolean", booleanType0.toString());
      assertEquals(false, booleanType0.isUnionType());
      assertEquals(false, booleanType0.isVoidType());
      assertEquals(false, booleanType0.isNumberValueType());
      assertEquals(true, booleanType0.isBooleanValueType());
      assertEquals(false, booleanType0.isNoType());
      assertEquals(false, booleanType0.isFunctionType());
      assertEquals(false, booleanType0.isAllType());
      assertEquals(false, booleanType0.isNoObjectType());
      assertEquals(true, booleanType0.matchesStringContext());
      assertEquals(false, booleanType0.isResolved());
      assertEquals(false, booleanType0.isNullable());
      assertEquals(false, booleanType0.isTemplateType());
      assertEquals(true, booleanType0.matchesNumberContext());
      assertEquals(false, booleanType0.isStringValueType());
      assertEquals(false, booleanType0.isEmptyType());
      assertEquals(false, booleanType0.isRecordType());
      assertEquals(false, booleanType0.isNullType());
      assertEquals(false, instanceObjectType0.isTemplateType());
      assertEquals(false, instanceObjectType0.isNoObjectType());
      assertEquals(false, instanceObjectType0.isUnionType());
      assertEquals(false, instanceObjectType0.isFunctionType());
      assertEquals(false, instanceObjectType0.isNoType());
      assertEquals(true, instanceObjectType0.isInstanceType());
      assertEquals(BooleanLiteralSet.TRUE, instanceObjectType0.getPossibleToBooleanOutcomes());
      assertEquals(false, instanceObjectType0.isAllType());
      assertEquals(false, instanceObjectType0.isVoidType());
      assertEquals(false, instanceObjectType0.isRecordType());
      assertEquals(false, instanceObjectType0.isEmptyType());
      assertEquals(false, instanceObjectType0.isNominalType());
      assertEquals(false, instanceObjectType0.isResolved());
      assertEquals(false, instanceObjectType0.hasReferenceName());
      assertEquals(false, instanceObjectType0.isNumberValueType());
      assertEquals(false, instanceObjectType0.isNullType());
      assertEquals(false, instanceObjectType0.isBooleanValueType());
      assertEquals(false, instanceObjectType0.isStringValueType());
      
      boolean boolean1 = instanceObjectType0.isArrayType();
      assertEquals(false, functionType0.isNumberValueType());
      assertEquals(false, functionType0.isResolved());
      assertEquals(false, functionType0.isRecordType());
      assertEquals(false, functionType0.hasCachedValues());
      assertEquals(true, functionType0.canBeCalled());
      assertEquals(false, functionType0.isNoType());
      assertNull(functionType0.getTemplateTypeName());
      assertEquals(false, functionType0.isNullType());
      assertEquals(false, functionType0.isBooleanValueType());
      assertEquals(9, functionType0.getMaxArguments());
      assertEquals(false, functionType0.isOrdinaryFunction());
      assertEquals(false, functionType0.isNoObjectType());
      assertEquals(false, functionType0.isEmptyType());
      assertEquals(true, functionType0.isFunctionType());
      assertEquals(false, functionType0.isAllType());
      assertEquals(true, functionType0.hasInstanceType());
      assertEquals(false, functionType0.isTemplateType());
      assertEquals(false, functionType0.isReturnTypeInferred());
      assertEquals(false, functionType0.isStringValueType());
      assertEquals(true, functionType0.isConstructor());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, functionType0.isVoidType());
      assertEquals(false, functionType0.isUnionType());
      assertEquals(false, functionType0.isInterface());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(true, booleanType0.matchesObjectContext());
      assertEquals(BooleanLiteralSet.BOTH, booleanType0.getPossibleToBooleanOutcomes());
      assertEquals("boolean", booleanType0.toString());
      assertEquals(false, booleanType0.isUnionType());
      assertEquals(false, booleanType0.isVoidType());
      assertEquals(false, booleanType0.isNumberValueType());
      assertEquals(true, booleanType0.isBooleanValueType());
      assertEquals(false, booleanType0.isNoType());
      assertEquals(false, booleanType0.isFunctionType());
      assertEquals(false, booleanType0.isAllType());
      assertEquals(false, booleanType0.isNoObjectType());
      assertEquals(true, booleanType0.matchesStringContext());
      assertEquals(false, booleanType0.isResolved());
      assertEquals(false, booleanType0.isNullable());
      assertEquals(false, booleanType0.isTemplateType());
      assertEquals(true, booleanType0.matchesNumberContext());
      assertEquals(false, booleanType0.isStringValueType());
      assertEquals(false, booleanType0.isEmptyType());
      assertEquals(false, booleanType0.isRecordType());
      assertEquals(false, booleanType0.isNullType());
      assertEquals(false, instanceObjectType0.isTemplateType());
      assertEquals(false, instanceObjectType0.isNoObjectType());
      assertEquals(false, instanceObjectType0.isUnionType());
      assertEquals(false, instanceObjectType0.isFunctionType());
      assertEquals(false, instanceObjectType0.isNoType());
      assertEquals(true, instanceObjectType0.isInstanceType());
      assertEquals(BooleanLiteralSet.TRUE, instanceObjectType0.getPossibleToBooleanOutcomes());
      assertEquals(false, instanceObjectType0.isAllType());
      assertEquals(false, instanceObjectType0.isVoidType());
      assertEquals(false, instanceObjectType0.isRecordType());
      assertEquals(false, instanceObjectType0.isEmptyType());
      assertEquals(false, instanceObjectType0.isNominalType());
      assertEquals(false, instanceObjectType0.isResolved());
      assertEquals(false, instanceObjectType0.hasReferenceName());
      assertEquals(false, instanceObjectType0.isNumberValueType());
      assertEquals(false, instanceObjectType0.isNullType());
      assertEquals(false, instanceObjectType0.isBooleanValueType());
      assertEquals(false, instanceObjectType0.isStringValueType());
      assertTrue(boolean0 == boolean1);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test
  public void test14()  throws Throwable  {
      ErrorReporter errorReporter0 = null;
      boolean boolean0 = false;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(errorReporter0, boolean0);
      assertNotNull(jSTypeRegistry0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      String string0 = "r/XmRi6R8Go";
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, string0);
      assertNotNull(errorFunctionType0);
      assertEquals(false, errorFunctionType0.hasCachedValues());
      assertEquals(true, errorFunctionType0.canBeCalled());
      assertNull(errorFunctionType0.getTemplateTypeName());
      assertEquals(true, errorFunctionType0.hasInstanceType());
      assertEquals(false, errorFunctionType0.isInterface());
      assertEquals(false, errorFunctionType0.isResolved());
      assertEquals(false, errorFunctionType0.isEmptyType());
      assertEquals(true, errorFunctionType0.isFunctionType());
      assertEquals(false, errorFunctionType0.isAllType());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      assertEquals(false, errorFunctionType0.isTemplateType());
      assertEquals(false, errorFunctionType0.isNoObjectType());
      assertEquals(false, errorFunctionType0.isBooleanValueType());
      assertEquals(false, errorFunctionType0.isVoidType());
      assertEquals(3, errorFunctionType0.getMaxArguments());
      assertEquals(false, errorFunctionType0.isReturnTypeInferred());
      assertEquals(false, errorFunctionType0.isNoType());
      assertEquals(false, errorFunctionType0.isUnionType());
      assertEquals(false, errorFunctionType0.isStringValueType());
      assertEquals(false, errorFunctionType0.isNullType());
      assertEquals(false, errorFunctionType0.isNumberValueType());
      assertEquals(true, errorFunctionType0.isConstructor());
      assertEquals(false, errorFunctionType0.isRecordType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      FunctionType functionType0 = errorFunctionType0.getSuperClassConstructor();
      assertNotNull(functionType0);
      assertEquals(false, functionType0.isTemplateType());
      assertEquals(false, functionType0.isInterface());
      assertEquals(false, functionType0.isNumberValueType());
      assertEquals(true, functionType0.isFunctionType());
      assertEquals(false, functionType0.isNoType());
      assertEquals(true, functionType0.hasCachedValues());
      assertEquals(false, functionType0.isNoObjectType());
      assertEquals(true, functionType0.hasInstanceType());
      assertEquals(false, functionType0.isNullType());
      assertEquals(false, functionType0.isOrdinaryFunction());
      assertNull(functionType0.getTemplateTypeName());
      assertEquals(1, functionType0.getMaxArguments());
      assertEquals(true, functionType0.isConstructor());
      assertEquals(false, functionType0.isUnionType());
      assertEquals(false, functionType0.isVoidType());
      assertEquals(false, functionType0.isEmptyType());
      assertEquals(false, functionType0.isRecordType());
      assertEquals(false, functionType0.isStringValueType());
      assertEquals(false, functionType0.isAllType());
      assertEquals(false, functionType0.isResolved());
      assertEquals(false, functionType0.isBooleanValueType());
      assertEquals(true, functionType0.canBeCalled());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, functionType0.isReturnTypeInferred());
      assertEquals(true, errorFunctionType0.canBeCalled());
      assertNull(errorFunctionType0.getTemplateTypeName());
      assertEquals(true, errorFunctionType0.hasInstanceType());
      assertEquals(false, errorFunctionType0.isInterface());
      assertEquals(false, errorFunctionType0.isResolved());
      assertEquals(false, errorFunctionType0.isEmptyType());
      assertEquals(true, errorFunctionType0.isFunctionType());
      assertEquals(false, errorFunctionType0.isAllType());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      assertEquals(false, errorFunctionType0.isTemplateType());
      assertEquals(false, errorFunctionType0.isNoObjectType());
      assertEquals(false, errorFunctionType0.isBooleanValueType());
      assertEquals(false, errorFunctionType0.isVoidType());
      assertEquals(3, errorFunctionType0.getMaxArguments());
      assertEquals(false, errorFunctionType0.isReturnTypeInferred());
      assertEquals(true, errorFunctionType0.hasCachedValues());
      assertEquals(false, errorFunctionType0.isNoType());
      assertEquals(false, errorFunctionType0.isUnionType());
      assertEquals(false, errorFunctionType0.isStringValueType());
      assertEquals(false, errorFunctionType0.isNullType());
      assertEquals(false, errorFunctionType0.isNumberValueType());
      assertEquals(true, errorFunctionType0.isConstructor());
      assertEquals(false, errorFunctionType0.isRecordType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      InstanceObjectType instanceObjectType0 = new InstanceObjectType(jSTypeRegistry0, functionType0, boolean0);
      assertNotNull(instanceObjectType0);
      assertEquals(false, functionType0.isTemplateType());
      assertEquals(false, functionType0.isInterface());
      assertEquals(false, functionType0.isNumberValueType());
      assertEquals(true, functionType0.isFunctionType());
      assertEquals(false, functionType0.isNoType());
      assertEquals(true, functionType0.hasCachedValues());
      assertEquals(false, functionType0.isNoObjectType());
      assertEquals(true, functionType0.hasInstanceType());
      assertEquals(false, functionType0.isNullType());
      assertEquals(false, functionType0.isOrdinaryFunction());
      assertNull(functionType0.getTemplateTypeName());
      assertEquals(1, functionType0.getMaxArguments());
      assertEquals(true, functionType0.isConstructor());
      assertEquals(false, functionType0.isUnionType());
      assertEquals(false, functionType0.isVoidType());
      assertEquals(false, functionType0.isEmptyType());
      assertEquals(false, functionType0.isRecordType());
      assertEquals(false, functionType0.isStringValueType());
      assertEquals(false, functionType0.isAllType());
      assertEquals(false, functionType0.isResolved());
      assertEquals(false, functionType0.isBooleanValueType());
      assertEquals(true, functionType0.canBeCalled());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, functionType0.isReturnTypeInferred());
      assertEquals(true, errorFunctionType0.canBeCalled());
      assertNull(errorFunctionType0.getTemplateTypeName());
      assertEquals(true, errorFunctionType0.hasInstanceType());
      assertEquals(false, errorFunctionType0.isInterface());
      assertEquals(false, errorFunctionType0.isResolved());
      assertEquals(false, errorFunctionType0.isEmptyType());
      assertEquals(true, errorFunctionType0.isFunctionType());
      assertEquals(false, errorFunctionType0.isAllType());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      assertEquals(false, errorFunctionType0.isTemplateType());
      assertEquals(false, errorFunctionType0.isNoObjectType());
      assertEquals(false, errorFunctionType0.isBooleanValueType());
      assertEquals(false, errorFunctionType0.isVoidType());
      assertEquals(3, errorFunctionType0.getMaxArguments());
      assertEquals(false, errorFunctionType0.isReturnTypeInferred());
      assertEquals(true, errorFunctionType0.hasCachedValues());
      assertEquals(false, errorFunctionType0.isNoType());
      assertEquals(false, errorFunctionType0.isUnionType());
      assertEquals(false, errorFunctionType0.isStringValueType());
      assertEquals(false, errorFunctionType0.isNullType());
      assertEquals(false, errorFunctionType0.isNumberValueType());
      assertEquals(true, errorFunctionType0.isConstructor());
      assertEquals(false, errorFunctionType0.isRecordType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, instanceObjectType0.isEmptyType());
      assertEquals(false, instanceObjectType0.isNullType());
      assertEquals(false, instanceObjectType0.isNoObjectType());
      assertEquals(false, instanceObjectType0.isVoidType());
      assertEquals(false, instanceObjectType0.isTemplateType());
      assertEquals(false, instanceObjectType0.isRecordType());
      assertEquals(false, instanceObjectType0.isNumberValueType());
      assertEquals(BooleanLiteralSet.TRUE, instanceObjectType0.getPossibleToBooleanOutcomes());
      assertEquals(false, instanceObjectType0.isUnionType());
      assertEquals(false, instanceObjectType0.isFunctionType());
      assertEquals(true, instanceObjectType0.isNominalType());
      assertEquals(true, instanceObjectType0.isInstanceType());
      assertEquals(false, instanceObjectType0.isNoType());
      assertEquals(true, instanceObjectType0.hasReferenceName());
      assertEquals(false, instanceObjectType0.isStringValueType());
      assertEquals(false, instanceObjectType0.isAllType());
      assertEquals(false, instanceObjectType0.isBooleanValueType());
      assertEquals(false, instanceObjectType0.isResolved());
      
      boolean boolean1 = instanceObjectType0.isTheObjectType();
      assertEquals(false, functionType0.isTemplateType());
      assertEquals(false, functionType0.isInterface());
      assertEquals(false, functionType0.isNumberValueType());
      assertEquals(true, functionType0.isFunctionType());
      assertEquals(false, functionType0.isNoType());
      assertEquals(true, functionType0.hasCachedValues());
      assertEquals(false, functionType0.isNoObjectType());
      assertEquals(true, functionType0.hasInstanceType());
      assertEquals(false, functionType0.isNullType());
      assertEquals(false, functionType0.isOrdinaryFunction());
      assertNull(functionType0.getTemplateTypeName());
      assertEquals(1, functionType0.getMaxArguments());
      assertEquals(true, functionType0.isConstructor());
      assertEquals(false, functionType0.isUnionType());
      assertEquals(false, functionType0.isVoidType());
      assertEquals(false, functionType0.isEmptyType());
      assertEquals(false, functionType0.isRecordType());
      assertEquals(false, functionType0.isStringValueType());
      assertEquals(false, functionType0.isAllType());
      assertEquals(false, functionType0.isResolved());
      assertEquals(false, functionType0.isBooleanValueType());
      assertEquals(true, functionType0.canBeCalled());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, functionType0.isReturnTypeInferred());
      assertEquals(true, errorFunctionType0.canBeCalled());
      assertNull(errorFunctionType0.getTemplateTypeName());
      assertEquals(true, errorFunctionType0.hasInstanceType());
      assertEquals(false, errorFunctionType0.isInterface());
      assertEquals(false, errorFunctionType0.isResolved());
      assertEquals(false, errorFunctionType0.isEmptyType());
      assertEquals(true, errorFunctionType0.isFunctionType());
      assertEquals(false, errorFunctionType0.isAllType());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      assertEquals(false, errorFunctionType0.isTemplateType());
      assertEquals(false, errorFunctionType0.isNoObjectType());
      assertEquals(false, errorFunctionType0.isBooleanValueType());
      assertEquals(false, errorFunctionType0.isVoidType());
      assertEquals(3, errorFunctionType0.getMaxArguments());
      assertEquals(false, errorFunctionType0.isReturnTypeInferred());
      assertEquals(true, errorFunctionType0.hasCachedValues());
      assertEquals(false, errorFunctionType0.isNoType());
      assertEquals(false, errorFunctionType0.isUnionType());
      assertEquals(false, errorFunctionType0.isStringValueType());
      assertEquals(false, errorFunctionType0.isNullType());
      assertEquals(false, errorFunctionType0.isNumberValueType());
      assertEquals(true, errorFunctionType0.isConstructor());
      assertEquals(false, errorFunctionType0.isRecordType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, instanceObjectType0.isEmptyType());
      assertEquals(false, instanceObjectType0.isNullType());
      assertEquals(false, instanceObjectType0.isNoObjectType());
      assertEquals(false, instanceObjectType0.isVoidType());
      assertEquals(false, instanceObjectType0.isTemplateType());
      assertEquals(false, instanceObjectType0.isRecordType());
      assertEquals(false, instanceObjectType0.isNumberValueType());
      assertEquals(BooleanLiteralSet.TRUE, instanceObjectType0.getPossibleToBooleanOutcomes());
      assertEquals(false, instanceObjectType0.isUnionType());
      assertEquals(false, instanceObjectType0.isFunctionType());
      assertEquals(true, instanceObjectType0.isNominalType());
      assertEquals(true, instanceObjectType0.isInstanceType());
      assertEquals(false, instanceObjectType0.isNoType());
      assertEquals(true, instanceObjectType0.hasReferenceName());
      assertEquals(false, instanceObjectType0.isStringValueType());
      assertEquals(false, instanceObjectType0.isAllType());
      assertEquals(false, instanceObjectType0.isBooleanValueType());
      assertEquals(false, instanceObjectType0.isResolved());
      assertFalse(boolean0 == boolean1);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test
  public void test15()  throws Throwable  {
      ErrorReporter errorReporter0 = null;
      boolean boolean0 = false;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(errorReporter0, boolean0);
      assertNotNull(jSTypeRegistry0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      String string0 = "r/XmRi6R8Go";
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, string0);
      assertNotNull(errorFunctionType0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, errorFunctionType0.isInterface());
      assertEquals(false, errorFunctionType0.isVoidType());
      assertEquals(false, errorFunctionType0.isAllType());
      assertEquals(false, errorFunctionType0.isRecordType());
      assertEquals(false, errorFunctionType0.isEmptyType());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      assertEquals(false, errorFunctionType0.isReturnTypeInferred());
      assertEquals(false, errorFunctionType0.isResolved());
      assertEquals(true, errorFunctionType0.isConstructor());
      assertEquals(true, errorFunctionType0.isFunctionType());
      assertEquals(false, errorFunctionType0.isUnionType());
      assertEquals(false, errorFunctionType0.isStringValueType());
      assertEquals(true, errorFunctionType0.hasInstanceType());
      assertEquals(true, errorFunctionType0.canBeCalled());
      assertEquals(false, errorFunctionType0.isNoObjectType());
      assertEquals(false, errorFunctionType0.isBooleanValueType());
      assertNull(errorFunctionType0.getTemplateTypeName());
      assertEquals(false, errorFunctionType0.hasCachedValues());
      assertEquals(false, errorFunctionType0.isNoType());
      assertEquals(false, errorFunctionType0.isTemplateType());
      assertEquals(false, errorFunctionType0.isNumberValueType());
      assertEquals(false, errorFunctionType0.isNullType());
      assertEquals(3, errorFunctionType0.getMaxArguments());
      
      InstanceObjectType instanceObjectType0 = new InstanceObjectType(jSTypeRegistry0, errorFunctionType0, boolean0);
      assertNotNull(instanceObjectType0);
      assertEquals(true, instanceObjectType0.isInstanceType());
      assertEquals(true, instanceObjectType0.isNominalType());
      assertEquals(false, instanceObjectType0.isNoType());
      assertEquals(false, instanceObjectType0.isNumberValueType());
      assertEquals(false, instanceObjectType0.isFunctionType());
      assertEquals(true, instanceObjectType0.hasReferenceName());
      assertEquals(false, instanceObjectType0.isStringValueType());
      assertEquals(false, instanceObjectType0.isAllType());
      assertEquals(false, instanceObjectType0.isRecordType());
      assertEquals(false, instanceObjectType0.isEmptyType());
      assertEquals(false, instanceObjectType0.isTemplateType());
      assertEquals(false, instanceObjectType0.isNullType());
      assertEquals(false, instanceObjectType0.isUnionType());
      assertEquals(false, instanceObjectType0.isNoObjectType());
      assertEquals(false, instanceObjectType0.isVoidType());
      assertEquals(false, instanceObjectType0.isResolved());
      assertEquals(false, instanceObjectType0.isBooleanValueType());
      assertEquals(BooleanLiteralSet.TRUE, instanceObjectType0.getPossibleToBooleanOutcomes());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, errorFunctionType0.isInterface());
      assertEquals(false, errorFunctionType0.isVoidType());
      assertEquals(false, errorFunctionType0.isAllType());
      assertEquals(false, errorFunctionType0.isRecordType());
      assertEquals(false, errorFunctionType0.isEmptyType());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      assertEquals(false, errorFunctionType0.isReturnTypeInferred());
      assertEquals(false, errorFunctionType0.isResolved());
      assertEquals(true, errorFunctionType0.isConstructor());
      assertEquals(true, errorFunctionType0.isFunctionType());
      assertEquals(false, errorFunctionType0.isUnionType());
      assertEquals(false, errorFunctionType0.isStringValueType());
      assertEquals(true, errorFunctionType0.hasInstanceType());
      assertEquals(true, errorFunctionType0.canBeCalled());
      assertEquals(false, errorFunctionType0.isNoObjectType());
      assertEquals(false, errorFunctionType0.isBooleanValueType());
      assertNull(errorFunctionType0.getTemplateTypeName());
      assertEquals(false, errorFunctionType0.hasCachedValues());
      assertEquals(false, errorFunctionType0.isNoType());
      assertEquals(false, errorFunctionType0.isTemplateType());
      assertEquals(false, errorFunctionType0.isNumberValueType());
      assertEquals(false, errorFunctionType0.isNullType());
      assertEquals(3, errorFunctionType0.getMaxArguments());
      
      boolean boolean1 = instanceObjectType0.isTheObjectType();
      assertEquals(true, instanceObjectType0.isInstanceType());
      assertEquals(true, instanceObjectType0.isNominalType());
      assertEquals(false, instanceObjectType0.isNoType());
      assertEquals(false, instanceObjectType0.isNumberValueType());
      assertEquals(false, instanceObjectType0.isFunctionType());
      assertEquals(true, instanceObjectType0.hasReferenceName());
      assertEquals(false, instanceObjectType0.isStringValueType());
      assertEquals(false, instanceObjectType0.isAllType());
      assertEquals(false, instanceObjectType0.isRecordType());
      assertEquals(false, instanceObjectType0.isEmptyType());
      assertEquals(false, instanceObjectType0.isTemplateType());
      assertEquals(false, instanceObjectType0.isNullType());
      assertEquals(false, instanceObjectType0.isUnionType());
      assertEquals(false, instanceObjectType0.isNoObjectType());
      assertEquals(false, instanceObjectType0.isVoidType());
      assertEquals(false, instanceObjectType0.isResolved());
      assertEquals(false, instanceObjectType0.isBooleanValueType());
      assertEquals(BooleanLiteralSet.TRUE, instanceObjectType0.getPossibleToBooleanOutcomes());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, errorFunctionType0.isInterface());
      assertEquals(false, errorFunctionType0.isVoidType());
      assertEquals(false, errorFunctionType0.isAllType());
      assertEquals(false, errorFunctionType0.isRecordType());
      assertEquals(false, errorFunctionType0.isEmptyType());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      assertEquals(false, errorFunctionType0.isReturnTypeInferred());
      assertEquals(false, errorFunctionType0.isResolved());
      assertEquals(true, errorFunctionType0.isConstructor());
      assertEquals(true, errorFunctionType0.isFunctionType());
      assertEquals(false, errorFunctionType0.isUnionType());
      assertEquals(false, errorFunctionType0.isStringValueType());
      assertEquals(true, errorFunctionType0.hasInstanceType());
      assertEquals(true, errorFunctionType0.canBeCalled());
      assertEquals(false, errorFunctionType0.isNoObjectType());
      assertEquals(false, errorFunctionType0.isBooleanValueType());
      assertNull(errorFunctionType0.getTemplateTypeName());
      assertEquals(false, errorFunctionType0.hasCachedValues());
      assertEquals(false, errorFunctionType0.isNoType());
      assertEquals(false, errorFunctionType0.isTemplateType());
      assertEquals(false, errorFunctionType0.isNumberValueType());
      assertEquals(false, errorFunctionType0.isNullType());
      assertEquals(3, errorFunctionType0.getMaxArguments());
      assertTrue(boolean0 == boolean1);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test
  public void test16()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      boolean boolean0 = false;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0, boolean0);
      assertNotNull(jSTypeRegistry0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      StringType stringType0 = new StringType(jSTypeRegistry0);
      assertNotNull(stringType0);
      assertEquals(false, stringType0.isFunctionType());
      assertEquals(false, stringType0.isNumberValueType());
      assertEquals(true, stringType0.matchesObjectContext());
      assertEquals(true, stringType0.matchesNumberContext());
      assertEquals("string", stringType0.toString());
      assertEquals(false, stringType0.isNoType());
      assertEquals(true, stringType0.matchesStringContext());
      assertEquals(false, stringType0.isVoidType());
      assertEquals(false, stringType0.isResolved());
      assertEquals(false, stringType0.isBooleanValueType());
      assertEquals(false, stringType0.isUnionType());
      assertEquals(false, stringType0.isTemplateType());
      assertEquals(false, stringType0.isNoObjectType());
      assertEquals(false, stringType0.isEmptyType());
      assertEquals(false, stringType0.isRecordType());
      assertEquals(false, stringType0.isAllType());
      assertEquals(true, stringType0.isStringValueType());
      assertEquals(BooleanLiteralSet.BOTH, stringType0.getPossibleToBooleanOutcomes());
      assertEquals(false, stringType0.isNullType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      assertNotNull(linkedList0);
      assertEquals("[]", linkedList0.toString());
      assertEquals(0, linkedList0.size());
      
      FunctionType functionType0 = jSTypeRegistry0.createFunctionTypeWithVarArgs((JSType) stringType0, (List<JSType>) linkedList0);
      assertNotNull(functionType0);
      assertEquals(false, stringType0.isFunctionType());
      assertEquals(false, stringType0.isNumberValueType());
      assertEquals(true, stringType0.matchesObjectContext());
      assertEquals(true, stringType0.matchesNumberContext());
      assertEquals("string", stringType0.toString());
      assertEquals(false, stringType0.isNoType());
      assertEquals(true, stringType0.matchesStringContext());
      assertEquals(false, stringType0.isVoidType());
      assertEquals(false, stringType0.isResolved());
      assertEquals(false, stringType0.isBooleanValueType());
      assertEquals(false, stringType0.isUnionType());
      assertEquals(false, stringType0.isTemplateType());
      assertEquals(false, stringType0.isNoObjectType());
      assertEquals(false, stringType0.isEmptyType());
      assertEquals(false, stringType0.isRecordType());
      assertEquals(false, stringType0.isAllType());
      assertEquals(true, stringType0.isStringValueType());
      assertEquals(BooleanLiteralSet.BOTH, stringType0.getPossibleToBooleanOutcomes());
      assertEquals(false, stringType0.isNullType());
      assertEquals(false, functionType0.isVoidType());
      assertNull(functionType0.getTemplateTypeName());
      assertEquals(false, functionType0.isStringValueType());
      assertEquals(false, functionType0.isReturnTypeInferred());
      assertEquals(false, functionType0.hasInstanceType());
      assertEquals(true, functionType0.isOrdinaryFunction());
      assertEquals(false, functionType0.isNumberValueType());
      assertEquals(false, functionType0.isEmptyType());
      assertEquals(0, functionType0.getMaxArguments());
      assertEquals(false, functionType0.isAllType());
      assertEquals(false, functionType0.isInterface());
      assertEquals(false, functionType0.isResolved());
      assertEquals(false, functionType0.isNoType());
      assertEquals(false, functionType0.isBooleanValueType());
      assertEquals(true, functionType0.canBeCalled());
      assertEquals(false, functionType0.hasCachedValues());
      assertEquals(false, functionType0.isTemplateType());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, functionType0.isUnionType());
      assertEquals(false, functionType0.isConstructor());
      assertEquals(false, functionType0.isNullType());
      assertEquals(true, functionType0.isFunctionType());
      assertEquals(false, functionType0.isNoObjectType());
      assertEquals(false, functionType0.isRecordType());
      assertEquals("[]", linkedList0.toString());
      assertEquals(0, linkedList0.size());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      InstanceObjectType instanceObjectType0 = new InstanceObjectType(jSTypeRegistry0, functionType0);
      assertNotNull(instanceObjectType0);
      assertEquals(false, stringType0.isFunctionType());
      assertEquals(false, stringType0.isNumberValueType());
      assertEquals(true, stringType0.matchesObjectContext());
      assertEquals(true, stringType0.matchesNumberContext());
      assertEquals("string", stringType0.toString());
      assertEquals(false, stringType0.isNoType());
      assertEquals(true, stringType0.matchesStringContext());
      assertEquals(false, stringType0.isVoidType());
      assertEquals(false, stringType0.isResolved());
      assertEquals(false, stringType0.isBooleanValueType());
      assertEquals(false, stringType0.isUnionType());
      assertEquals(false, stringType0.isTemplateType());
      assertEquals(false, stringType0.isNoObjectType());
      assertEquals(false, stringType0.isEmptyType());
      assertEquals(false, stringType0.isRecordType());
      assertEquals(false, stringType0.isAllType());
      assertEquals(true, stringType0.isStringValueType());
      assertEquals(BooleanLiteralSet.BOTH, stringType0.getPossibleToBooleanOutcomes());
      assertEquals(false, stringType0.isNullType());
      assertEquals(false, functionType0.isVoidType());
      assertNull(functionType0.getTemplateTypeName());
      assertEquals(false, functionType0.isStringValueType());
      assertEquals(false, functionType0.isReturnTypeInferred());
      assertEquals(false, functionType0.hasInstanceType());
      assertEquals(true, functionType0.isOrdinaryFunction());
      assertEquals(false, functionType0.isNumberValueType());
      assertEquals(false, functionType0.isEmptyType());
      assertEquals(0, functionType0.getMaxArguments());
      assertEquals(false, functionType0.isAllType());
      assertEquals(false, functionType0.isInterface());
      assertEquals(false, functionType0.isResolved());
      assertEquals(false, functionType0.isNoType());
      assertEquals(false, functionType0.isBooleanValueType());
      assertEquals(true, functionType0.canBeCalled());
      assertEquals(false, functionType0.hasCachedValues());
      assertEquals(false, functionType0.isTemplateType());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, functionType0.isUnionType());
      assertEquals(false, functionType0.isConstructor());
      assertEquals(false, functionType0.isNullType());
      assertEquals(true, functionType0.isFunctionType());
      assertEquals(false, functionType0.isNoObjectType());
      assertEquals(false, functionType0.isRecordType());
      assertEquals("[]", linkedList0.toString());
      assertEquals(0, linkedList0.size());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, instanceObjectType0.isEmptyType());
      assertEquals(false, instanceObjectType0.isNoObjectType());
      assertEquals(true, instanceObjectType0.isInstanceType());
      assertEquals(false, instanceObjectType0.isUnionType());
      assertEquals(BooleanLiteralSet.TRUE, instanceObjectType0.getPossibleToBooleanOutcomes());
      assertEquals(false, instanceObjectType0.hasReferenceName());
      assertEquals(false, instanceObjectType0.isNullType());
      assertEquals(false, instanceObjectType0.isRecordType());
      assertEquals(false, instanceObjectType0.isTemplateType());
      assertEquals(false, instanceObjectType0.isNoType());
      assertEquals(false, instanceObjectType0.isFunctionType());
      assertEquals(false, instanceObjectType0.isBooleanValueType());
      assertEquals(false, instanceObjectType0.isNumberValueType());
      assertEquals(false, instanceObjectType0.isVoidType());
      assertEquals(false, instanceObjectType0.isNominalType());
      assertEquals(false, instanceObjectType0.isAllType());
      assertEquals(false, instanceObjectType0.isStringValueType());
      assertEquals(false, instanceObjectType0.isResolved());
      
      boolean boolean1 = instanceObjectType0.isTheObjectType();
      assertEquals(false, stringType0.isFunctionType());
      assertEquals(false, stringType0.isNumberValueType());
      assertEquals(true, stringType0.matchesObjectContext());
      assertEquals(true, stringType0.matchesNumberContext());
      assertEquals("string", stringType0.toString());
      assertEquals(false, stringType0.isNoType());
      assertEquals(true, stringType0.matchesStringContext());
      assertEquals(false, stringType0.isVoidType());
      assertEquals(false, stringType0.isResolved());
      assertEquals(false, stringType0.isBooleanValueType());
      assertEquals(false, stringType0.isUnionType());
      assertEquals(false, stringType0.isTemplateType());
      assertEquals(false, stringType0.isNoObjectType());
      assertEquals(false, stringType0.isEmptyType());
      assertEquals(false, stringType0.isRecordType());
      assertEquals(false, stringType0.isAllType());
      assertEquals(true, stringType0.isStringValueType());
      assertEquals(BooleanLiteralSet.BOTH, stringType0.getPossibleToBooleanOutcomes());
      assertEquals(false, stringType0.isNullType());
      assertEquals(false, functionType0.isVoidType());
      assertNull(functionType0.getTemplateTypeName());
      assertEquals(false, functionType0.isStringValueType());
      assertEquals(false, functionType0.isReturnTypeInferred());
      assertEquals(false, functionType0.hasInstanceType());
      assertEquals(true, functionType0.isOrdinaryFunction());
      assertEquals(false, functionType0.isNumberValueType());
      assertEquals(false, functionType0.isEmptyType());
      assertEquals(0, functionType0.getMaxArguments());
      assertEquals(false, functionType0.isAllType());
      assertEquals(false, functionType0.isInterface());
      assertEquals(false, functionType0.isResolved());
      assertEquals(false, functionType0.isNoType());
      assertEquals(false, functionType0.isBooleanValueType());
      assertEquals(true, functionType0.canBeCalled());
      assertEquals(false, functionType0.hasCachedValues());
      assertEquals(false, functionType0.isTemplateType());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, functionType0.isUnionType());
      assertEquals(false, functionType0.isConstructor());
      assertEquals(false, functionType0.isNullType());
      assertEquals(true, functionType0.isFunctionType());
      assertEquals(false, functionType0.isNoObjectType());
      assertEquals(false, functionType0.isRecordType());
      assertEquals("[]", linkedList0.toString());
      assertEquals(0, linkedList0.size());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, instanceObjectType0.isEmptyType());
      assertEquals(false, instanceObjectType0.isNoObjectType());
      assertEquals(true, instanceObjectType0.isInstanceType());
      assertEquals(false, instanceObjectType0.isUnionType());
      assertEquals(BooleanLiteralSet.TRUE, instanceObjectType0.getPossibleToBooleanOutcomes());
      assertEquals(false, instanceObjectType0.hasReferenceName());
      assertEquals(false, instanceObjectType0.isNullType());
      assertEquals(false, instanceObjectType0.isRecordType());
      assertEquals(false, instanceObjectType0.isTemplateType());
      assertEquals(false, instanceObjectType0.isNoType());
      assertEquals(false, instanceObjectType0.isFunctionType());
      assertEquals(false, instanceObjectType0.isBooleanValueType());
      assertEquals(false, instanceObjectType0.isNumberValueType());
      assertEquals(false, instanceObjectType0.isVoidType());
      assertEquals(false, instanceObjectType0.isNominalType());
      assertEquals(false, instanceObjectType0.isAllType());
      assertEquals(false, instanceObjectType0.isStringValueType());
      assertEquals(false, instanceObjectType0.isResolved());
      assertTrue(boolean0 == boolean1);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test
  public void test17()  throws Throwable  {
      ErrorReporter errorReporter0 = null;
      boolean boolean0 = false;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(errorReporter0, boolean0);
      assertNotNull(jSTypeRegistry0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      String string0 = "r/XmRi6R8Go";
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, string0);
      assertNotNull(errorFunctionType0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, errorFunctionType0.isEmptyType());
      assertEquals(false, errorFunctionType0.isNoType());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertEquals(true, errorFunctionType0.isConstructor());
      assertEquals(3, errorFunctionType0.getMaxArguments());
      assertEquals(false, errorFunctionType0.isNoObjectType());
      assertEquals(false, errorFunctionType0.isUnionType());
      assertEquals(false, errorFunctionType0.isVoidType());
      assertEquals(false, errorFunctionType0.hasCachedValues());
      assertEquals(true, errorFunctionType0.isFunctionType());
      assertEquals(false, errorFunctionType0.isStringValueType());
      assertEquals(false, errorFunctionType0.isTemplateType());
      assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      assertEquals(false, errorFunctionType0.isReturnTypeInferred());
      assertEquals(false, errorFunctionType0.isInterface());
      assertEquals(false, errorFunctionType0.isBooleanValueType());
      assertEquals(false, errorFunctionType0.isRecordType());
      assertEquals(true, errorFunctionType0.hasInstanceType());
      assertEquals(false, errorFunctionType0.isResolved());
      assertEquals(true, errorFunctionType0.canBeCalled());
      assertEquals(false, errorFunctionType0.isNullType());
      assertNull(errorFunctionType0.getTemplateTypeName());
      assertEquals(false, errorFunctionType0.isNumberValueType());
      assertEquals(false, errorFunctionType0.isAllType());
      
      InstanceObjectType instanceObjectType0 = new InstanceObjectType(jSTypeRegistry0, errorFunctionType0, boolean0);
      assertNotNull(instanceObjectType0);
      assertEquals(false, instanceObjectType0.isResolved());
      assertEquals(false, instanceObjectType0.isTemplateType());
      assertEquals(false, instanceObjectType0.isVoidType());
      assertEquals(true, instanceObjectType0.isInstanceType());
      assertEquals(false, instanceObjectType0.isNoObjectType());
      assertEquals(true, instanceObjectType0.isNominalType());
      assertEquals(true, instanceObjectType0.hasReferenceName());
      assertEquals(false, instanceObjectType0.isNullType());
      assertEquals(false, instanceObjectType0.isBooleanValueType());
      assertEquals(false, instanceObjectType0.isStringValueType());
      assertEquals(false, instanceObjectType0.isUnionType());
      assertEquals(false, instanceObjectType0.isRecordType());
      assertEquals(false, instanceObjectType0.isNoType());
      assertEquals(false, instanceObjectType0.isNumberValueType());
      assertEquals(BooleanLiteralSet.TRUE, instanceObjectType0.getPossibleToBooleanOutcomes());
      assertEquals(false, instanceObjectType0.isEmptyType());
      assertEquals(false, instanceObjectType0.isFunctionType());
      assertEquals(false, instanceObjectType0.isAllType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, errorFunctionType0.isEmptyType());
      assertEquals(false, errorFunctionType0.isNoType());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertEquals(true, errorFunctionType0.isConstructor());
      assertEquals(3, errorFunctionType0.getMaxArguments());
      assertEquals(false, errorFunctionType0.isNoObjectType());
      assertEquals(false, errorFunctionType0.isUnionType());
      assertEquals(false, errorFunctionType0.isVoidType());
      assertEquals(false, errorFunctionType0.hasCachedValues());
      assertEquals(true, errorFunctionType0.isFunctionType());
      assertEquals(false, errorFunctionType0.isStringValueType());
      assertEquals(false, errorFunctionType0.isTemplateType());
      assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      assertEquals(false, errorFunctionType0.isReturnTypeInferred());
      assertEquals(false, errorFunctionType0.isInterface());
      assertEquals(false, errorFunctionType0.isBooleanValueType());
      assertEquals(false, errorFunctionType0.isRecordType());
      assertEquals(true, errorFunctionType0.hasInstanceType());
      assertEquals(false, errorFunctionType0.isResolved());
      assertEquals(true, errorFunctionType0.canBeCalled());
      assertEquals(false, errorFunctionType0.isNullType());
      assertNull(errorFunctionType0.getTemplateTypeName());
      assertEquals(false, errorFunctionType0.isNumberValueType());
      assertEquals(false, errorFunctionType0.isAllType());
      
      boolean boolean1 = instanceObjectType0.defineDeclaredProperty(string0, (JSType) errorFunctionType0, boolean0);
      assertEquals(false, instanceObjectType0.isResolved());
      assertEquals(false, instanceObjectType0.isTemplateType());
      assertEquals(false, instanceObjectType0.isVoidType());
      assertEquals(true, instanceObjectType0.isInstanceType());
      assertEquals(false, instanceObjectType0.isNoObjectType());
      assertEquals(true, instanceObjectType0.isNominalType());
      assertEquals(true, instanceObjectType0.hasReferenceName());
      assertEquals(false, instanceObjectType0.isNullType());
      assertEquals(false, instanceObjectType0.isBooleanValueType());
      assertEquals(false, instanceObjectType0.isStringValueType());
      assertEquals(false, instanceObjectType0.isUnionType());
      assertEquals(false, instanceObjectType0.isRecordType());
      assertEquals(false, instanceObjectType0.isNoType());
      assertEquals(false, instanceObjectType0.isNumberValueType());
      assertEquals(BooleanLiteralSet.TRUE, instanceObjectType0.getPossibleToBooleanOutcomes());
      assertEquals(false, instanceObjectType0.isEmptyType());
      assertEquals(false, instanceObjectType0.isFunctionType());
      assertEquals(false, instanceObjectType0.isAllType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, errorFunctionType0.isEmptyType());
      assertEquals(false, errorFunctionType0.isNoType());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertEquals(true, errorFunctionType0.isConstructor());
      assertEquals(3, errorFunctionType0.getMaxArguments());
      assertEquals(false, errorFunctionType0.isNoObjectType());
      assertEquals(false, errorFunctionType0.isUnionType());
      assertEquals(false, errorFunctionType0.isVoidType());
      assertEquals(true, errorFunctionType0.isFunctionType());
      assertEquals(false, errorFunctionType0.isStringValueType());
      assertEquals(false, errorFunctionType0.isTemplateType());
      assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      assertEquals(false, errorFunctionType0.isReturnTypeInferred());
      assertEquals(false, errorFunctionType0.isInterface());
      assertEquals(false, errorFunctionType0.isBooleanValueType());
      assertEquals(false, errorFunctionType0.isRecordType());
      assertEquals(true, errorFunctionType0.hasInstanceType());
      assertEquals(false, errorFunctionType0.isResolved());
      assertEquals(true, errorFunctionType0.canBeCalled());
      assertEquals(false, errorFunctionType0.isNullType());
      assertNull(errorFunctionType0.getTemplateTypeName());
      assertEquals(true, errorFunctionType0.hasCachedValues());
      assertEquals(false, errorFunctionType0.isNumberValueType());
      assertEquals(false, errorFunctionType0.isAllType());
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean0 == boolean1);
      assertTrue(boolean1);
  }

  @Test
  public void test18()  throws Throwable  {
      ErrorReporter errorReporter0 = null;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(errorReporter0);
      assertNotNull(jSTypeRegistry0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      JSTypeNative jSTypeNative0 = JSTypeNative.REGEXP_FUNCTION_TYPE;
      FunctionType functionType0 = jSTypeRegistry0.getNativeFunctionType(jSTypeNative0);
      assertNotNull(functionType0);
      assertEquals(false, functionType0.isInterface());
      assertEquals(true, functionType0.isConstructor());
      assertEquals(2, functionType0.getMaxArguments());
      assertEquals(false, functionType0.isOrdinaryFunction());
      assertEquals(false, functionType0.isTemplateType());
      assertEquals(false, functionType0.isAllType());
      assertEquals(false, functionType0.isEmptyType());
      assertNull(functionType0.getTemplateTypeName());
      assertEquals(true, functionType0.canBeCalled());
      assertEquals(false, functionType0.isResolved());
      assertEquals(false, functionType0.isNoObjectType());
      assertEquals(false, functionType0.isStringValueType());
      assertEquals(false, functionType0.isVoidType());
      assertEquals(false, functionType0.isReturnTypeInferred());
      assertEquals(false, functionType0.isNoType());
      assertEquals(false, functionType0.isNumberValueType());
      assertEquals(false, functionType0.isUnionType());
      assertEquals(false, functionType0.isNullType());
      assertEquals(true, functionType0.isFunctionType());
      assertEquals(false, functionType0.isBooleanValueType());
      assertEquals(false, functionType0.isRecordType());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertEquals(true, functionType0.hasCachedValues());
      assertEquals(true, functionType0.hasInstanceType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      boolean boolean0 = true;
      InstanceObjectType instanceObjectType0 = new InstanceObjectType(jSTypeRegistry0, functionType0, boolean0);
      assertNotNull(instanceObjectType0);
      assertEquals(false, functionType0.isInterface());
      assertEquals(true, functionType0.isConstructor());
      assertEquals(2, functionType0.getMaxArguments());
      assertEquals(false, functionType0.isOrdinaryFunction());
      assertEquals(false, functionType0.isTemplateType());
      assertEquals(false, functionType0.isAllType());
      assertEquals(false, functionType0.isEmptyType());
      assertNull(functionType0.getTemplateTypeName());
      assertEquals(true, functionType0.canBeCalled());
      assertEquals(false, functionType0.isResolved());
      assertEquals(false, functionType0.isNoObjectType());
      assertEquals(false, functionType0.isStringValueType());
      assertEquals(false, functionType0.isVoidType());
      assertEquals(false, functionType0.isReturnTypeInferred());
      assertEquals(false, functionType0.isNoType());
      assertEquals(false, functionType0.isNumberValueType());
      assertEquals(false, functionType0.isUnionType());
      assertEquals(false, functionType0.isNullType());
      assertEquals(true, functionType0.isFunctionType());
      assertEquals(false, functionType0.isBooleanValueType());
      assertEquals(false, functionType0.isRecordType());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertEquals(true, functionType0.hasCachedValues());
      assertEquals(true, functionType0.hasInstanceType());
      assertEquals(BooleanLiteralSet.TRUE, instanceObjectType0.getPossibleToBooleanOutcomes());
      assertEquals(false, instanceObjectType0.isNumberValueType());
      assertEquals(false, instanceObjectType0.isBooleanValueType());
      assertEquals(false, instanceObjectType0.isResolved());
      assertEquals(true, instanceObjectType0.isInstanceType());
      assertEquals(false, instanceObjectType0.isAllType());
      assertEquals(false, instanceObjectType0.isFunctionType());
      assertEquals(false, instanceObjectType0.isNoObjectType());
      assertEquals(false, instanceObjectType0.isStringValueType());
      assertEquals(false, instanceObjectType0.isNullType());
      assertEquals(false, instanceObjectType0.isVoidType());
      assertEquals(false, instanceObjectType0.isEmptyType());
      assertEquals(false, instanceObjectType0.isRecordType());
      assertEquals(true, instanceObjectType0.isNominalType());
      assertEquals(true, instanceObjectType0.hasReferenceName());
      assertEquals(false, instanceObjectType0.isNoType());
      assertEquals(false, instanceObjectType0.isTemplateType());
      assertEquals(false, instanceObjectType0.isUnionType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      boolean boolean1 = instanceObjectType0.isRegexpType();
      assertEquals(false, functionType0.isInterface());
      assertEquals(true, functionType0.isConstructor());
      assertEquals(2, functionType0.getMaxArguments());
      assertEquals(false, functionType0.isOrdinaryFunction());
      assertEquals(false, functionType0.isTemplateType());
      assertEquals(false, functionType0.isAllType());
      assertEquals(false, functionType0.isEmptyType());
      assertNull(functionType0.getTemplateTypeName());
      assertEquals(true, functionType0.canBeCalled());
      assertEquals(false, functionType0.isResolved());
      assertEquals(false, functionType0.isNoObjectType());
      assertEquals(false, functionType0.isStringValueType());
      assertEquals(false, functionType0.isVoidType());
      assertEquals(false, functionType0.isReturnTypeInferred());
      assertEquals(false, functionType0.isNoType());
      assertEquals(false, functionType0.isNumberValueType());
      assertEquals(false, functionType0.isUnionType());
      assertEquals(false, functionType0.isNullType());
      assertEquals(true, functionType0.isFunctionType());
      assertEquals(false, functionType0.isBooleanValueType());
      assertEquals(false, functionType0.isRecordType());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertEquals(true, functionType0.hasCachedValues());
      assertEquals(true, functionType0.hasInstanceType());
      assertEquals(BooleanLiteralSet.TRUE, instanceObjectType0.getPossibleToBooleanOutcomes());
      assertEquals(false, instanceObjectType0.isNumberValueType());
      assertEquals(false, instanceObjectType0.isBooleanValueType());
      assertEquals(false, instanceObjectType0.isResolved());
      assertEquals(true, instanceObjectType0.isInstanceType());
      assertEquals(false, instanceObjectType0.isAllType());
      assertEquals(false, instanceObjectType0.isFunctionType());
      assertEquals(false, instanceObjectType0.isNoObjectType());
      assertEquals(false, instanceObjectType0.isStringValueType());
      assertEquals(false, instanceObjectType0.isNullType());
      assertEquals(false, instanceObjectType0.isVoidType());
      assertEquals(false, instanceObjectType0.isEmptyType());
      assertEquals(false, instanceObjectType0.isRecordType());
      assertEquals(true, instanceObjectType0.isNominalType());
      assertEquals(true, instanceObjectType0.hasReferenceName());
      assertEquals(false, instanceObjectType0.isNoType());
      assertEquals(false, instanceObjectType0.isTemplateType());
      assertEquals(false, instanceObjectType0.isUnionType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertTrue(boolean0 == boolean1);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test
  public void test19()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      JSTypeNative jSTypeNative0 = JSTypeNative.ARRAY_FUNCTION_TYPE;
      FunctionType functionType0 = jSTypeRegistry0.getNativeFunctionType(jSTypeNative0);
      assertNotNull(functionType0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertEquals(true, functionType0.canBeCalled());
      assertEquals(true, functionType0.hasCachedValues());
      assertEquals(false, functionType0.isNumberValueType());
      assertEquals(true, functionType0.isFunctionType());
      assertEquals(false, functionType0.isNullType());
      assertEquals(false, functionType0.isAllType());
      assertNull(functionType0.getTemplateTypeName());
      assertEquals(false, functionType0.isBooleanValueType());
      assertEquals(2147483647, functionType0.getMaxArguments());
      assertEquals(false, functionType0.isTemplateType());
      assertEquals(false, functionType0.isInterface());
      assertEquals(false, functionType0.isNoObjectType());
      assertEquals(false, functionType0.isStringValueType());
      assertEquals(false, functionType0.isVoidType());
      assertEquals(true, functionType0.hasInstanceType());
      assertEquals(false, functionType0.isReturnTypeInferred());
      assertEquals(false, functionType0.isResolved());
      assertEquals(false, functionType0.isRecordType());
      assertEquals(false, functionType0.isNoType());
      assertEquals(true, functionType0.isConstructor());
      assertEquals(false, functionType0.isEmptyType());
      assertEquals(false, functionType0.isUnionType());
      assertEquals(false, functionType0.isOrdinaryFunction());
      
      boolean boolean0 = false;
      InstanceObjectType instanceObjectType0 = new InstanceObjectType(jSTypeRegistry0, functionType0, boolean0);
      assertNotNull(instanceObjectType0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, instanceObjectType0.isNullType());
      assertEquals(false, instanceObjectType0.isVoidType());
      assertEquals(false, instanceObjectType0.isBooleanValueType());
      assertEquals(false, instanceObjectType0.isTemplateType());
      assertEquals(false, instanceObjectType0.isUnionType());
      assertEquals(false, instanceObjectType0.isResolved());
      assertEquals(BooleanLiteralSet.TRUE, instanceObjectType0.getPossibleToBooleanOutcomes());
      assertEquals(false, instanceObjectType0.isRecordType());
      assertEquals(false, instanceObjectType0.isNoObjectType());
      assertEquals(true, instanceObjectType0.isNominalType());
      assertEquals(false, instanceObjectType0.isEmptyType());
      assertEquals(false, instanceObjectType0.isNoType());
      assertEquals(false, instanceObjectType0.isNumberValueType());
      assertEquals(true, instanceObjectType0.isInstanceType());
      assertEquals(false, instanceObjectType0.isAllType());
      assertEquals(true, instanceObjectType0.hasReferenceName());
      assertEquals(false, instanceObjectType0.isFunctionType());
      assertEquals(false, instanceObjectType0.isStringValueType());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertEquals(true, functionType0.canBeCalled());
      assertEquals(true, functionType0.hasCachedValues());
      assertEquals(false, functionType0.isNumberValueType());
      assertEquals(true, functionType0.isFunctionType());
      assertEquals(false, functionType0.isNullType());
      assertEquals(false, functionType0.isAllType());
      assertNull(functionType0.getTemplateTypeName());
      assertEquals(false, functionType0.isBooleanValueType());
      assertEquals(2147483647, functionType0.getMaxArguments());
      assertEquals(false, functionType0.isTemplateType());
      assertEquals(false, functionType0.isInterface());
      assertEquals(false, functionType0.isNoObjectType());
      assertEquals(false, functionType0.isStringValueType());
      assertEquals(false, functionType0.isVoidType());
      assertEquals(true, functionType0.hasInstanceType());
      assertEquals(false, functionType0.isReturnTypeInferred());
      assertEquals(false, functionType0.isResolved());
      assertEquals(false, functionType0.isRecordType());
      assertEquals(false, functionType0.isNoType());
      assertEquals(true, functionType0.isConstructor());
      assertEquals(false, functionType0.isEmptyType());
      assertEquals(false, functionType0.isUnionType());
      assertEquals(false, functionType0.isOrdinaryFunction());
      
      boolean boolean1 = instanceObjectType0.isInstanceType();
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, instanceObjectType0.isNullType());
      assertEquals(false, instanceObjectType0.isVoidType());
      assertEquals(false, instanceObjectType0.isBooleanValueType());
      assertEquals(false, instanceObjectType0.isTemplateType());
      assertEquals(false, instanceObjectType0.isUnionType());
      assertEquals(false, instanceObjectType0.isResolved());
      assertEquals(BooleanLiteralSet.TRUE, instanceObjectType0.getPossibleToBooleanOutcomes());
      assertEquals(false, instanceObjectType0.isRecordType());
      assertEquals(false, instanceObjectType0.isNoObjectType());
      assertEquals(true, instanceObjectType0.isNominalType());
      assertEquals(false, instanceObjectType0.isEmptyType());
      assertEquals(false, instanceObjectType0.isNoType());
      assertEquals(false, instanceObjectType0.isNumberValueType());
      assertEquals(true, instanceObjectType0.isInstanceType());
      assertEquals(false, instanceObjectType0.isAllType());
      assertEquals(true, instanceObjectType0.hasReferenceName());
      assertEquals(false, instanceObjectType0.isFunctionType());
      assertEquals(false, instanceObjectType0.isStringValueType());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertEquals(true, functionType0.canBeCalled());
      assertEquals(true, functionType0.hasCachedValues());
      assertEquals(false, functionType0.isNumberValueType());
      assertEquals(true, functionType0.isFunctionType());
      assertEquals(false, functionType0.isNullType());
      assertEquals(false, functionType0.isAllType());
      assertNull(functionType0.getTemplateTypeName());
      assertEquals(false, functionType0.isBooleanValueType());
      assertEquals(2147483647, functionType0.getMaxArguments());
      assertEquals(false, functionType0.isTemplateType());
      assertEquals(false, functionType0.isInterface());
      assertEquals(false, functionType0.isNoObjectType());
      assertEquals(false, functionType0.isStringValueType());
      assertEquals(false, functionType0.isVoidType());
      assertEquals(true, functionType0.hasInstanceType());
      assertEquals(false, functionType0.isReturnTypeInferred());
      assertEquals(false, functionType0.isResolved());
      assertEquals(false, functionType0.isRecordType());
      assertEquals(false, functionType0.isNoType());
      assertEquals(true, functionType0.isConstructor());
      assertEquals(false, functionType0.isEmptyType());
      assertEquals(false, functionType0.isUnionType());
      assertEquals(false, functionType0.isOrdinaryFunction());
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean0 == boolean1);
      assertTrue(boolean1);
  }

  @Test
  public void test20()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      NoType noType0 = new NoType(jSTypeRegistry0);
      assertNotNull(noType0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(true, noType0.isConstructor());
      assertEquals(true, noType0.isNullable());
      assertEquals(false, noType0.isStringValueType());
      assertEquals(false, noType0.isNumberValueType());
      assertEquals(false, noType0.isBooleanValueType());
      assertNull(noType0.getTemplateTypeName());
      assertEquals(true, noType0.isEmptyType());
      assertEquals(false, noType0.hasCachedValues());
      assertEquals(false, noType0.isResolved());
      assertEquals(true, noType0.hasInstanceType());
      assertEquals(false, noType0.isRecordType());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertEquals(true, noType0.isNoType());
      assertEquals(false, noType0.isNoObjectType());
      assertEquals(true, noType0.canBeCalled());
      assertEquals(false, noType0.isTemplateType());
      assertNull(noType0.getReferenceName());
      assertEquals(false, noType0.isNullType());
      assertEquals("None", noType0.toString());
      assertEquals(false, noType0.isReturnTypeInferred());
      assertEquals(false, noType0.isAllType());
      assertEquals(false, noType0.isVoidType());
      assertEquals(false, noType0.isInterface());
      assertEquals(false, noType0.isUnionType());
      assertEquals(false, noType0.isOrdinaryFunction());
      assertEquals(true, noType0.matchesObjectContext());
      assertEquals(false, noType0.isFunctionType());
      assertEquals(true, noType0.matchesStringContext());
      assertEquals(2147483647, noType0.getPropertiesCount());
      assertEquals(true, noType0.matchesNumberContext());
      assertEquals(2147483647, noType0.getMaxArguments());
      
      InstanceObjectType instanceObjectType0 = new InstanceObjectType(jSTypeRegistry0, noType0);
      assertNotNull(instanceObjectType0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, instanceObjectType0.isTemplateType());
      assertEquals(false, instanceObjectType0.isNullType());
      assertEquals(false, instanceObjectType0.isStringValueType());
      assertEquals(false, instanceObjectType0.isNumberValueType());
      assertEquals(false, instanceObjectType0.isResolved());
      assertEquals(BooleanLiteralSet.TRUE, instanceObjectType0.getPossibleToBooleanOutcomes());
      assertEquals(false, instanceObjectType0.isNoType());
      assertEquals(false, instanceObjectType0.isFunctionType());
      assertEquals(false, instanceObjectType0.isBooleanValueType());
      assertEquals(true, instanceObjectType0.isInstanceType());
      assertEquals(false, instanceObjectType0.isVoidType());
      assertEquals(false, instanceObjectType0.isRecordType());
      assertEquals(false, instanceObjectType0.isNoObjectType());
      assertEquals(false, instanceObjectType0.isNominalType());
      assertEquals(false, instanceObjectType0.isEmptyType());
      assertEquals(false, instanceObjectType0.isUnionType());
      assertEquals(false, instanceObjectType0.hasReferenceName());
      assertEquals(false, instanceObjectType0.isAllType());
      assertEquals(true, noType0.isConstructor());
      assertEquals(true, noType0.isNullable());
      assertEquals(false, noType0.isStringValueType());
      assertEquals(false, noType0.isNumberValueType());
      assertEquals(false, noType0.isBooleanValueType());
      assertNull(noType0.getTemplateTypeName());
      assertEquals(true, noType0.isEmptyType());
      assertEquals(false, noType0.hasCachedValues());
      assertEquals(false, noType0.isResolved());
      assertEquals(true, noType0.hasInstanceType());
      assertEquals(false, noType0.isRecordType());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertEquals(true, noType0.isNoType());
      assertEquals(false, noType0.isNoObjectType());
      assertEquals(true, noType0.canBeCalled());
      assertEquals(false, noType0.isTemplateType());
      assertNull(noType0.getReferenceName());
      assertEquals(false, noType0.isNullType());
      assertEquals("None", noType0.toString());
      assertEquals(false, noType0.isReturnTypeInferred());
      assertEquals(false, noType0.isAllType());
      assertEquals(false, noType0.isVoidType());
      assertEquals(false, noType0.isInterface());
      assertEquals(false, noType0.isUnionType());
      assertEquals(false, noType0.isOrdinaryFunction());
      assertEquals(true, noType0.matchesObjectContext());
      assertEquals(false, noType0.isFunctionType());
      assertEquals(true, noType0.matchesStringContext());
      assertEquals(2147483647, noType0.getPropertiesCount());
      assertEquals(true, noType0.matchesNumberContext());
      assertEquals(2147483647, noType0.getMaxArguments());
      
      Iterable<ObjectType> iterable0 = instanceObjectType0.getCtorImplementedInterfaces();
      assertNotNull(iterable0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, instanceObjectType0.isTemplateType());
      assertEquals(false, instanceObjectType0.isNullType());
      assertEquals(false, instanceObjectType0.isStringValueType());
      assertEquals(false, instanceObjectType0.isNumberValueType());
      assertEquals(false, instanceObjectType0.isResolved());
      assertEquals(BooleanLiteralSet.TRUE, instanceObjectType0.getPossibleToBooleanOutcomes());
      assertEquals(false, instanceObjectType0.isNoType());
      assertEquals(false, instanceObjectType0.isFunctionType());
      assertEquals(false, instanceObjectType0.isBooleanValueType());
      assertEquals(true, instanceObjectType0.isInstanceType());
      assertEquals(false, instanceObjectType0.isVoidType());
      assertEquals(false, instanceObjectType0.isRecordType());
      assertEquals(false, instanceObjectType0.isNoObjectType());
      assertEquals(false, instanceObjectType0.isNominalType());
      assertEquals(false, instanceObjectType0.isEmptyType());
      assertEquals(false, instanceObjectType0.isUnionType());
      assertEquals(false, instanceObjectType0.hasReferenceName());
      assertEquals(false, instanceObjectType0.isAllType());
      assertEquals(true, noType0.isConstructor());
      assertEquals(true, noType0.isNullable());
      assertEquals(false, noType0.isStringValueType());
      assertEquals(false, noType0.isNumberValueType());
      assertEquals(false, noType0.isBooleanValueType());
      assertNull(noType0.getTemplateTypeName());
      assertEquals(true, noType0.isEmptyType());
      assertEquals(false, noType0.isResolved());
      assertEquals(true, noType0.hasInstanceType());
      assertEquals(false, noType0.isRecordType());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertEquals(true, noType0.isNoType());
      assertEquals(false, noType0.isNoObjectType());
      assertEquals(true, noType0.canBeCalled());
      assertEquals(false, noType0.isTemplateType());
      assertNull(noType0.getReferenceName());
      assertEquals(false, noType0.isNullType());
      assertEquals("None", noType0.toString());
      assertEquals(false, noType0.isReturnTypeInferred());
      assertEquals(false, noType0.isAllType());
      assertEquals(false, noType0.isVoidType());
      assertEquals(false, noType0.isInterface());
      assertEquals(false, noType0.isUnionType());
      assertEquals(false, noType0.isOrdinaryFunction());
      assertEquals(true, noType0.matchesObjectContext());
      assertEquals(false, noType0.isFunctionType());
      assertEquals(true, noType0.matchesStringContext());
      assertEquals(2147483647, noType0.getPropertiesCount());
      assertEquals(true, noType0.matchesNumberContext());
      assertEquals(true, noType0.hasCachedValues());
      assertEquals(2147483647, noType0.getMaxArguments());
  }
}
