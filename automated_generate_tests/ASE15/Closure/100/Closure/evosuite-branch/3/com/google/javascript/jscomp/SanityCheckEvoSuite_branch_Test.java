/*
 * This file was automatically generated by EvoSuite
 * Fri Dec 12 06:51:07 GMT 2014
 */

package com.google.javascript.jscomp;

import static org.junit.Assert.*;
import org.junit.Test;
import com.google.javascript.jscomp.Compiler;
import com.google.javascript.jscomp.CompilerOptions;
import com.google.javascript.jscomp.JSModule;
import com.google.javascript.jscomp.JSSourceFile;
import com.google.javascript.jscomp.Result;
import com.google.javascript.jscomp.SanityCheck;
import com.google.javascript.rhino.Node;
import java.io.PrintStream;
import java.util.LinkedList;
import java.util.List;
import java.util.Stack;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;

import org.junit.runner.RunWith;


public class SanityCheckEvoSuite_branch_Test  {

  @Test
  public void test0() {}
//   @Test
//   public void test0()  throws Throwable  {
//       Compiler compiler0 = new Compiler();
//       assertNotNull(compiler0);
//       
//       CompilerOptions compilerOptions0 = new CompilerOptions();
//       assertFalse(compilerOptions0.removeConstantExpressions);
//       assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
//       assertFalse(compilerOptions0.aliasExternals);
//       assertFalse(compilerOptions0.checkControlStructures);
//       assertFalse(compilerOptions0.recordFunctionInformation);
//       assertFalse(compilerOptions0.crossModuleCodeMotion);
//       assertFalse(compilerOptions0.ambiguateProperties);
//       assertFalse(compilerOptions0.removeDeadCode);
//       assertFalse(compilerOptions0.tightenTypes);
//       assertFalse(compilerOptions0.aliasKeywords);
//       assertFalse(compilerOptions0.instrumentForCoverage);
//       assertFalse(compilerOptions0.printInputDelimiter);
//       assertFalse(compilerOptions0.prettyPrint);
//       assertFalse(compilerOptions0.devirtualizePrototypeMethods);
//       assertFalse(compilerOptions0.checkTypes);
//       assertFalse(compilerOptions0.optimizeParameters);
//       assertFalse(compilerOptions0.inlineLocalVariables);
//       assertFalse(compilerOptions0.lineBreak);
//       assertFalse(compilerOptions0.inlineAnonymousFunctionExpressions);
//       assertFalse(compilerOptions0.collapseAnonymousFunctions);
//       assertFalse(compilerOptions0.foldConstants);
//       assertFalse(compilerOptions0.optimizeArgumentsArray);
//       assertFalse(compilerOptions0.groupVariableDeclarations);
//       assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
//       assertFalse(compilerOptions0.rewriteFunctionExpressions);
//       assertFalse(compilerOptions0.collapseProperties);
//       assertFalse(compilerOptions0.aliasAllStrings);
//       assertFalse(compilerOptions0.reserveRawExports);
//       assertTrue(compilerOptions0.removeUnusedVarsInGlobalScope);
//       assertFalse(compilerOptions0.checkSuspiciousCode);
//       assertFalse(compilerOptions0.smartNameRemoval);
//       assertFalse(compilerOptions0.checkCaja);
//       assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
//       assertFalse(compilerOptions0.flowSensitiveInlineVariables);
//       assertFalse(compilerOptions0.labelRenaming);
//       assertFalse(compilerOptions0.removeUnusedVars);
//       assertFalse(compilerOptions0.crossModuleMethodMotion);
//       assertFalse(compilerOptions0.gatherCssNames);
//       assertFalse(compilerOptions0.inlineConstantVars);
//       assertFalse(compilerOptions0.removeTryCatchFinally);
//       assertFalse(compilerOptions0.removeEmptyFunctions);
//       assertFalse(compilerOptions0.checkDuplicateMessages);
//       assertFalse(compilerOptions0.allowLegacyJsMessages);
//       assertFalse(compilerOptions0.checkUnusedPropertiesEarly);
//       assertFalse(compilerOptions0.checkTypedPropertyCalls);
//       assertFalse(compilerOptions0.strictMessageReplacement);
//       assertFalse(compilerOptions0.disambiguateProperties);
//       assertFalse(compilerOptions0.inlineGetters);
//       assertFalse(compilerOptions0.inferTypesInGlobalScope);
//       assertFalse(compilerOptions0.inlineLocalFunctions);
//       assertFalse(compilerOptions0.convertToDottedProperties);
//       assertFalse(compilerOptions0.instrumentForCoverageOnly);
//       assertFalse(compilerOptions0.computeFunctionSideEffects);
//       assertFalse(compilerOptions0.generatePseudoNames);
//       assertFalse(compilerOptions0.inlineVariables);
//       assertFalse(compilerOptions0.checkEs5Strict);
//       assertFalse(compilerOptions0.decomposeExpressions);
//       assertFalse(compilerOptions0.moveFunctionDeclarations);
//       assertFalse(compilerOptions0.ideMode);
//       assertFalse(compilerOptions0.exportTestFunctions);
//       assertFalse(compilerOptions0.inlineFunctions);
//       assertFalse(compilerOptions0.markAsCompiled);
//       assertFalse(compilerOptions0.ignoreCajaProperties);
//       assertFalse(compilerOptions0.markNoSideEffectCalls);
//       assertFalse(compilerOptions0.coalesceVariableNames);
//       assertFalse(compilerOptions0.checkSymbols);
//       assertFalse(compilerOptions0.closurePass);
//       assertFalse(compilerOptions0.generateExports);
//       assertFalse(compilerOptions0.collapseVariableDeclarations);
//       assertFalse(compilerOptions0.deadAssignmentElimination);
//       assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
//       assertNotNull(compilerOptions0);
//       
//       SanityCheck sanityCheck0 = new SanityCheck(compiler0);
//       assertNotNull(sanityCheck0);
//       
//       int int0 = 1918;
//       Stack<JSSourceFile> stack0 = new Stack<JSSourceFile>();
//       assertEquals(true, stack0.isEmpty());
//       assertEquals(true, stack0.empty());
//       assertEquals(10, stack0.capacity());
//       assertEquals(0, stack0.size());
//       assertEquals("[]", stack0.toString());
//       assertNotNull(stack0);
//       
//       LinkedList<JSModule> linkedList0 = new LinkedList<JSModule>();
//       assertEquals("[]", linkedList0.toString());
//       assertEquals(0, linkedList0.size());
//       assertNotNull(linkedList0);
//       
//       Result result0 = compiler0.compileModules((List<JSSourceFile>) stack0, (List<JSModule>) linkedList0, compilerOptions0);
//       assertFalse(compilerOptions0.removeConstantExpressions);
//       assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
//       assertFalse(compilerOptions0.aliasExternals);
//       assertFalse(compilerOptions0.checkControlStructures);
//       assertFalse(compilerOptions0.recordFunctionInformation);
//       assertFalse(compilerOptions0.crossModuleCodeMotion);
//       assertFalse(compilerOptions0.ambiguateProperties);
//       assertFalse(compilerOptions0.removeDeadCode);
//       assertFalse(compilerOptions0.tightenTypes);
//       assertFalse(compilerOptions0.aliasKeywords);
//       assertFalse(compilerOptions0.instrumentForCoverage);
//       assertFalse(compilerOptions0.printInputDelimiter);
//       assertFalse(compilerOptions0.prettyPrint);
//       assertFalse(compilerOptions0.devirtualizePrototypeMethods);
//       assertFalse(compilerOptions0.checkTypes);
//       assertFalse(compilerOptions0.optimizeParameters);
//       assertFalse(compilerOptions0.inlineLocalVariables);
//       assertFalse(compilerOptions0.lineBreak);
//       assertFalse(compilerOptions0.inlineAnonymousFunctionExpressions);
//       assertFalse(compilerOptions0.collapseAnonymousFunctions);
//       assertFalse(compilerOptions0.foldConstants);
//       assertFalse(compilerOptions0.optimizeArgumentsArray);
//       assertFalse(compilerOptions0.groupVariableDeclarations);
//       assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
//       assertFalse(compilerOptions0.rewriteFunctionExpressions);
//       assertFalse(compilerOptions0.collapseProperties);
//       assertFalse(compilerOptions0.aliasAllStrings);
//       assertFalse(compilerOptions0.reserveRawExports);
//       assertTrue(compilerOptions0.removeUnusedVarsInGlobalScope);
//       assertFalse(compilerOptions0.checkSuspiciousCode);
//       assertFalse(compilerOptions0.smartNameRemoval);
//       assertFalse(compilerOptions0.checkCaja);
//       assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
//       assertFalse(compilerOptions0.flowSensitiveInlineVariables);
//       assertFalse(compilerOptions0.labelRenaming);
//       assertFalse(compilerOptions0.removeUnusedVars);
//       assertFalse(compilerOptions0.crossModuleMethodMotion);
//       assertFalse(compilerOptions0.gatherCssNames);
//       assertFalse(compilerOptions0.inlineConstantVars);
//       assertFalse(compilerOptions0.removeTryCatchFinally);
//       assertFalse(compilerOptions0.removeEmptyFunctions);
//       assertFalse(compilerOptions0.checkDuplicateMessages);
//       assertFalse(compilerOptions0.allowLegacyJsMessages);
//       assertFalse(compilerOptions0.checkUnusedPropertiesEarly);
//       assertFalse(compilerOptions0.checkTypedPropertyCalls);
//       assertFalse(compilerOptions0.strictMessageReplacement);
//       assertFalse(compilerOptions0.disambiguateProperties);
//       assertFalse(compilerOptions0.inlineGetters);
//       assertFalse(compilerOptions0.inferTypesInGlobalScope);
//       assertFalse(compilerOptions0.inlineLocalFunctions);
//       assertFalse(compilerOptions0.convertToDottedProperties);
//       assertFalse(compilerOptions0.instrumentForCoverageOnly);
//       assertFalse(compilerOptions0.computeFunctionSideEffects);
//       assertFalse(compilerOptions0.generatePseudoNames);
//       assertFalse(compilerOptions0.inlineVariables);
//       assertFalse(compilerOptions0.checkEs5Strict);
//       assertFalse(compilerOptions0.decomposeExpressions);
//       assertFalse(compilerOptions0.moveFunctionDeclarations);
//       assertFalse(compilerOptions0.ideMode);
//       assertFalse(compilerOptions0.exportTestFunctions);
//       assertFalse(compilerOptions0.inlineFunctions);
//       assertFalse(compilerOptions0.markAsCompiled);
//       assertFalse(compilerOptions0.ignoreCajaProperties);
//       assertFalse(compilerOptions0.markNoSideEffectCalls);
//       assertFalse(compilerOptions0.coalesceVariableNames);
//       assertFalse(compilerOptions0.checkSymbols);
//       assertFalse(compilerOptions0.closurePass);
//       assertFalse(compilerOptions0.generateExports);
//       assertFalse(compilerOptions0.collapseVariableDeclarations);
//       assertFalse(compilerOptions0.deadAssignmentElimination);
//       assertEquals(true, stack0.isEmpty());
//       assertEquals(true, stack0.empty());
//       assertEquals(10, stack0.capacity());
//       assertEquals(0, stack0.size());
//       assertEquals("[]", stack0.toString());
//       assertEquals(false, compiler0.isTypeCheckingEnabled());
//       assertEquals(0, compiler0.getWarningCount());
//       assertEquals(1, compiler0.getErrorCount());
//       assertEquals(true, compiler0.hasErrors());
//       assertEquals(false, compiler0.isIdeMode());
//       assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
//       assertEquals("[]", linkedList0.toString());
//       assertEquals(0, linkedList0.size());
//       assertNotNull(result0);
//       
//       Node node0 = new Node(int0, int0, int0);
//       assertEquals(1918, node0.getType());
//       assertEquals(1918, node0.getLineno());
//       assertEquals(false, node0.wasEmptyNode());
//       assertEquals(false, node0.hasChildren());
//       assertEquals(false, node0.isSyntheticBlock());
//       assertEquals(false, node0.isOptionalArg());
//       assertEquals(false, node0.isUnscopedQualifiedName());
//       assertEquals(false, node0.hasMoreThanOneChild());
//       assertEquals(false, node0.isQualifiedName());
//       assertEquals(false, node0.isVarArgs());
//       assertEquals(false, node0.isQuotedString());
//       assertEquals(false, node0.isNoSideEffectsCall());
//       assertEquals(1918, node0.getCharno());
//       assertEquals(false, node0.hasOneChild());
//       assertEquals(0, node0.getChildCount());
//       assertNotNull(node0);
//       
//       sanityCheck0.process(node0, node0);
//       assertEquals(1918, node0.getType());
//       assertEquals(1918, node0.getLineno());
//       assertEquals(false, node0.wasEmptyNode());
//       assertEquals(false, node0.hasChildren());
//       assertEquals(false, node0.isSyntheticBlock());
//       assertEquals(false, node0.isOptionalArg());
//       assertEquals(false, node0.isUnscopedQualifiedName());
//       assertEquals(false, node0.hasMoreThanOneChild());
//       assertEquals(false, node0.isQualifiedName());
//       assertEquals(false, node0.isVarArgs());
//       assertEquals(false, node0.isQuotedString());
//       assertEquals(false, node0.isNoSideEffectsCall());
//       assertEquals(1918, node0.getCharno());
//       assertEquals(false, node0.hasOneChild());
//       assertEquals(0, node0.getChildCount());
//       assertEquals(false, compiler0.isTypeCheckingEnabled());
//       assertEquals(0, compiler0.getWarningCount());
//       assertEquals(1, compiler0.getErrorCount());
//       assertEquals(true, compiler0.hasErrors());
//       assertEquals(false, compiler0.isIdeMode());
//   }

  @Test
  public void test1()  throws Throwable  {
      PrintStream printStream0 = null;
      Compiler compiler0 = new Compiler(printStream0);
      assertNotNull(compiler0);
      
      SanityCheck sanityCheck0 = new SanityCheck(compiler0);
      assertNotNull(sanityCheck0);
      
      int int0 = 8;
      LinkedList<JSSourceFile> linkedList0 = new LinkedList<JSSourceFile>();
      assertEquals("[]", linkedList0.toString());
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      CompilerOptions compilerOptions0 = new CompilerOptions();
      assertFalse(compilerOptions0.removeConstantExpressions);
      assertFalse(compilerOptions0.checkTypes);
      assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
      assertFalse(compilerOptions0.lineBreak);
      assertFalse(compilerOptions0.inlineConstantVars);
      assertFalse(compilerOptions0.gatherCssNames);
      assertFalse(compilerOptions0.moveFunctionDeclarations);
      assertFalse(compilerOptions0.checkUnusedPropertiesEarly);
      assertFalse(compilerOptions0.inlineLocalFunctions);
      assertFalse(compilerOptions0.removeTryCatchFinally);
      assertFalse(compilerOptions0.removeUnusedVars);
      assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
      assertFalse(compilerOptions0.aliasAllStrings);
      assertFalse(compilerOptions0.markAsCompiled);
      assertFalse(compilerOptions0.deadAssignmentElimination);
      assertFalse(compilerOptions0.generatePseudoNames);
      assertFalse(compilerOptions0.checkCaja);
      assertFalse(compilerOptions0.markNoSideEffectCalls);
      assertFalse(compilerOptions0.collapseProperties);
      assertFalse(compilerOptions0.smartNameRemoval);
      assertFalse(compilerOptions0.inlineVariables);
      assertFalse(compilerOptions0.rewriteFunctionExpressions);
      assertFalse(compilerOptions0.disambiguateProperties);
      assertFalse(compilerOptions0.checkDuplicateMessages);
      assertFalse(compilerOptions0.removeEmptyFunctions);
      assertFalse(compilerOptions0.checkTypedPropertyCalls);
      assertFalse(compilerOptions0.ambiguateProperties);
      assertFalse(compilerOptions0.inlineLocalVariables);
      assertFalse(compilerOptions0.inlineGetters);
      assertFalse(compilerOptions0.closurePass);
      assertFalse(compilerOptions0.coalesceVariableNames);
      assertFalse(compilerOptions0.decomposeExpressions);
      assertFalse(compilerOptions0.removeDeadCode);
      assertFalse(compilerOptions0.ignoreCajaProperties);
      assertFalse(compilerOptions0.recordFunctionInformation);
      assertFalse(compilerOptions0.printInputDelimiter);
      assertFalse(compilerOptions0.prettyPrint);
      assertFalse(compilerOptions0.crossModuleCodeMotion);
      assertFalse(compilerOptions0.inferTypesInGlobalScope);
      assertFalse(compilerOptions0.collapseAnonymousFunctions);
      assertFalse(compilerOptions0.exportTestFunctions);
      assertFalse(compilerOptions0.ideMode);
      assertFalse(compilerOptions0.inlineFunctions);
      assertFalse(compilerOptions0.computeFunctionSideEffects);
      assertFalse(compilerOptions0.reserveRawExports);
      assertFalse(compilerOptions0.crossModuleMethodMotion);
      assertFalse(compilerOptions0.devirtualizePrototypeMethods);
      assertFalse(compilerOptions0.foldConstants);
      assertFalse(compilerOptions0.tightenTypes);
      assertFalse(compilerOptions0.optimizeArgumentsArray);
      assertFalse(compilerOptions0.aliasKeywords);
      assertFalse(compilerOptions0.labelRenaming);
      assertFalse(compilerOptions0.aliasExternals);
      assertFalse(compilerOptions0.checkSymbols);
      assertFalse(compilerOptions0.checkControlStructures);
      assertFalse(compilerOptions0.collapseVariableDeclarations);
      assertFalse(compilerOptions0.strictMessageReplacement);
      assertFalse(compilerOptions0.flowSensitiveInlineVariables);
      assertFalse(compilerOptions0.checkEs5Strict);
      assertFalse(compilerOptions0.generateExports);
      assertFalse(compilerOptions0.allowLegacyJsMessages);
      assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
      assertFalse(compilerOptions0.groupVariableDeclarations);
      assertFalse(compilerOptions0.checkSuspiciousCode);
      assertFalse(compilerOptions0.convertToDottedProperties);
      assertFalse(compilerOptions0.optimizeParameters);
      assertFalse(compilerOptions0.instrumentForCoverage);
      assertFalse(compilerOptions0.inlineAnonymousFunctionExpressions);
      assertFalse(compilerOptions0.instrumentForCoverageOnly);
      assertTrue(compilerOptions0.removeUnusedVarsInGlobalScope);
      assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
      assertNotNull(compilerOptions0);
      
      Result result0 = compiler0.compile((List<JSSourceFile>) linkedList0, (List<JSSourceFile>) linkedList0, compilerOptions0);
      assertFalse(compilerOptions0.removeConstantExpressions);
      assertFalse(compilerOptions0.checkTypes);
      assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
      assertFalse(compilerOptions0.lineBreak);
      assertFalse(compilerOptions0.inlineConstantVars);
      assertFalse(compilerOptions0.gatherCssNames);
      assertFalse(compilerOptions0.moveFunctionDeclarations);
      assertFalse(compilerOptions0.checkUnusedPropertiesEarly);
      assertFalse(compilerOptions0.inlineLocalFunctions);
      assertFalse(compilerOptions0.removeTryCatchFinally);
      assertFalse(compilerOptions0.removeUnusedVars);
      assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
      assertFalse(compilerOptions0.aliasAllStrings);
      assertFalse(compilerOptions0.markAsCompiled);
      assertFalse(compilerOptions0.deadAssignmentElimination);
      assertFalse(compilerOptions0.generatePseudoNames);
      assertFalse(compilerOptions0.checkCaja);
      assertFalse(compilerOptions0.markNoSideEffectCalls);
      assertFalse(compilerOptions0.collapseProperties);
      assertFalse(compilerOptions0.smartNameRemoval);
      assertFalse(compilerOptions0.inlineVariables);
      assertFalse(compilerOptions0.rewriteFunctionExpressions);
      assertFalse(compilerOptions0.disambiguateProperties);
      assertFalse(compilerOptions0.checkDuplicateMessages);
      assertFalse(compilerOptions0.removeEmptyFunctions);
      assertFalse(compilerOptions0.checkTypedPropertyCalls);
      assertFalse(compilerOptions0.ambiguateProperties);
      assertFalse(compilerOptions0.inlineLocalVariables);
      assertFalse(compilerOptions0.inlineGetters);
      assertFalse(compilerOptions0.closurePass);
      assertFalse(compilerOptions0.coalesceVariableNames);
      assertFalse(compilerOptions0.decomposeExpressions);
      assertFalse(compilerOptions0.removeDeadCode);
      assertFalse(compilerOptions0.ignoreCajaProperties);
      assertFalse(compilerOptions0.recordFunctionInformation);
      assertFalse(compilerOptions0.printInputDelimiter);
      assertFalse(compilerOptions0.prettyPrint);
      assertFalse(compilerOptions0.crossModuleCodeMotion);
      assertFalse(compilerOptions0.inferTypesInGlobalScope);
      assertFalse(compilerOptions0.collapseAnonymousFunctions);
      assertFalse(compilerOptions0.exportTestFunctions);
      assertFalse(compilerOptions0.ideMode);
      assertFalse(compilerOptions0.inlineFunctions);
      assertFalse(compilerOptions0.computeFunctionSideEffects);
      assertFalse(compilerOptions0.reserveRawExports);
      assertFalse(compilerOptions0.crossModuleMethodMotion);
      assertFalse(compilerOptions0.devirtualizePrototypeMethods);
      assertFalse(compilerOptions0.foldConstants);
      assertFalse(compilerOptions0.tightenTypes);
      assertFalse(compilerOptions0.optimizeArgumentsArray);
      assertFalse(compilerOptions0.aliasKeywords);
      assertFalse(compilerOptions0.labelRenaming);
      assertFalse(compilerOptions0.aliasExternals);
      assertFalse(compilerOptions0.checkSymbols);
      assertFalse(compilerOptions0.checkControlStructures);
      assertFalse(compilerOptions0.collapseVariableDeclarations);
      assertFalse(compilerOptions0.strictMessageReplacement);
      assertFalse(compilerOptions0.flowSensitiveInlineVariables);
      assertFalse(compilerOptions0.checkEs5Strict);
      assertFalse(compilerOptions0.generateExports);
      assertFalse(compilerOptions0.allowLegacyJsMessages);
      assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
      assertFalse(compilerOptions0.groupVariableDeclarations);
      assertFalse(compilerOptions0.checkSuspiciousCode);
      assertFalse(compilerOptions0.convertToDottedProperties);
      assertFalse(compilerOptions0.optimizeParameters);
      assertFalse(compilerOptions0.instrumentForCoverage);
      assertFalse(compilerOptions0.inlineAnonymousFunctionExpressions);
      assertFalse(compilerOptions0.instrumentForCoverageOnly);
      assertTrue(compilerOptions0.removeUnusedVarsInGlobalScope);
      assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
      assertEquals("[]", linkedList0.toString());
      assertEquals(0, linkedList0.size());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(0, compiler0.getWarningCount());
      assertNotNull(result0);
      
      Node node0 = new Node(int0, int0, int0);
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.hasOneChild());
      assertEquals(8, node0.getCharno());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(8, node0.getLineno());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(8, node0.getType());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertNotNull(node0);
      
      sanityCheck0.process(node0, node0);
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.hasOneChild());
      assertEquals(8, node0.getCharno());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(8, node0.getLineno());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(8, node0.getType());
      assertEquals(false, node0.hasMoreThanOneChild());
  }
}
