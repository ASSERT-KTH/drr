/*
 * This file was automatically generated by EvoSuite
 * Fri Dec 12 07:23:00 GMT 2014
 */

package com.google.javascript.jscomp;

import static org.junit.Assert.*;
import org.junit.Test;
import com.google.javascript.jscomp.Compiler;
import com.google.javascript.jscomp.FlowScope;
import com.google.javascript.jscomp.LinkedFlowScope;
import com.google.javascript.jscomp.LoggerErrorManager;
import com.google.javascript.jscomp.Scope;
import com.google.javascript.jscomp.TypedScopeCreator;
import com.google.javascript.rhino.Node;
import com.google.javascript.rhino.jstype.JSType;
import com.google.javascript.rhino.jstype.StaticScope;
import com.google.javascript.rhino.jstype.StaticSlot;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;

import org.evosuite.runtime.mock.java.lang.MockIllegalStateException;
import org.junit.runner.RunWith;


public class LinkedFlowScopeEvoSuite_branch_Test  {

  @Test
  public void test00()  throws Throwable  {
      Scope scope0 = null;
      LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope0);
      assertNotNull(linkedFlowScope0);
      
      String string0 = "the \"eval\" object cannot be reassigned in ES5 strict mode";
      JSType jSType0 = null;
      linkedFlowScope0.inferSlotType(string0, jSType0);
      linkedFlowScope0.inferSlotType(string0, jSType0);
      LinkedFlowScope linkedFlowScope1 = LinkedFlowScope.createEntryLattice(scope0);
      assertNotSame(linkedFlowScope1, linkedFlowScope0);
      assertNotNull(linkedFlowScope1);
      assertTrue(linkedFlowScope1.equals((Object)linkedFlowScope0));
      
      boolean boolean0 = linkedFlowScope0.equals((Object) linkedFlowScope1);
      assertTrue(boolean0);
      assertNotSame(linkedFlowScope0, linkedFlowScope1);
      assertNotSame(linkedFlowScope1, linkedFlowScope0);
      assertTrue(linkedFlowScope0.equals((Object)linkedFlowScope1));
      assertTrue(linkedFlowScope1.equals((Object)linkedFlowScope0));
  }

  @Test
  public void test01()  throws Throwable  {
      Scope scope0 = null;
      LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope0);
      assertNotNull(linkedFlowScope0);
      
      String string0 = "the \"eval\" object cannot be reassigned in ES5 strict mode";
      JSType jSType0 = null;
      linkedFlowScope0.inferSlotType(string0, jSType0);
      LinkedFlowScope linkedFlowScope1 = LinkedFlowScope.createEntryLattice(scope0);
      assertNotSame(linkedFlowScope1, linkedFlowScope0);
      assertNotNull(linkedFlowScope1);
      assertTrue(linkedFlowScope1.equals((Object)linkedFlowScope0));
      
      linkedFlowScope1.inferSlotType(string0, jSType0);
      assertNotSame(linkedFlowScope1, linkedFlowScope0);
      assertTrue(linkedFlowScope1.equals((Object)linkedFlowScope0));
      
      boolean boolean0 = linkedFlowScope0.equals((Object) linkedFlowScope1);
      assertTrue(boolean0);
      assertNotSame(linkedFlowScope1, linkedFlowScope0);
      assertNotSame(linkedFlowScope0, linkedFlowScope1);
      assertTrue(linkedFlowScope1.equals((Object)linkedFlowScope0));
      assertTrue(linkedFlowScope0.equals((Object)linkedFlowScope1));
  }

  @Test
  public void test02()  throws Throwable  {
      Scope scope0 = null;
      LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope0);
      assertNotNull(linkedFlowScope0);
      
      String string0 = "the \"eval\" object cannot be reassigned in ES5 strict mode";
      JSType jSType0 = null;
      LinkedFlowScope linkedFlowScope1 = LinkedFlowScope.createEntryLattice(scope0);
      assertNotSame(linkedFlowScope1, linkedFlowScope0);
      assertNotNull(linkedFlowScope1);
      assertTrue(linkedFlowScope1.equals((Object)linkedFlowScope0));
      
      linkedFlowScope1.inferSlotType(string0, jSType0);
      assertNotSame(linkedFlowScope1, linkedFlowScope0);
      assertTrue(linkedFlowScope1.equals((Object)linkedFlowScope0));
      
      boolean boolean0 = linkedFlowScope0.equals((Object) linkedFlowScope1);
      assertTrue(boolean0);
      assertNotSame(linkedFlowScope1, linkedFlowScope0);
      assertNotSame(linkedFlowScope0, linkedFlowScope1);
      assertTrue(linkedFlowScope1.equals((Object)linkedFlowScope0));
      assertTrue(linkedFlowScope0.equals((Object)linkedFlowScope1));
  }

  @Test
  public void test03()  throws Throwable  {
      Scope scope0 = null;
      LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope0);
      assertNotNull(linkedFlowScope0);
      
      boolean boolean0 = linkedFlowScope0.equals((Object) scope0);
      assertFalse(boolean0);
  }

  @Test
  public void test04()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      assertNotNull(compiler0);
      
      LoggerErrorManager loggerErrorManager0 = (LoggerErrorManager)compiler0.getErrorManager();
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(0, loggerErrorManager0.getWarningCount());
      assertEquals(0.0, loggerErrorManager0.getTypedPercent(), 0.01D);
      assertEquals(0, loggerErrorManager0.getErrorCount());
      assertNotNull(loggerErrorManager0);
      
      TypedScopeCreator typedScopeCreator0 = new TypedScopeCreator(compiler0);
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(0, compiler0.getErrorCount());
      assertNotNull(typedScopeCreator0);
      
      int int0 = 389;
      String string0 = "B,4";
      Node node0 = Node.newString(int0, string0);
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.hasOneChild());
      assertEquals(389, node0.getType());
      assertEquals(-1, node0.getCharno());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isQuotedString());
      assertEquals(0, node0.getChildCount());
      assertNotNull(node0);
      
      Scope scope0 = typedScopeCreator0.createInitialScope(node0);
      assertEquals(33, scope0.getVarCount());
      assertEquals(false, scope0.isLocal());
      assertEquals(true, scope0.isGlobal());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.hasOneChild());
      assertEquals(389, node0.getType());
      assertEquals(-1, node0.getCharno());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isQuotedString());
      assertEquals(0, node0.getChildCount());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(0, compiler0.getErrorCount());
      assertNotNull(scope0);
      
      LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope0);
      assertEquals(33, scope0.getVarCount());
      assertEquals(false, scope0.isLocal());
      assertEquals(true, scope0.isGlobal());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.hasOneChild());
      assertEquals(389, node0.getType());
      assertEquals(-1, node0.getCharno());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isQuotedString());
      assertEquals(0, node0.getChildCount());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(0, compiler0.getErrorCount());
      assertNotNull(linkedFlowScope0);
      
      LinkedFlowScope linkedFlowScope1 = new LinkedFlowScope(linkedFlowScope0);
      assertEquals(33, scope0.getVarCount());
      assertEquals(false, scope0.isLocal());
      assertEquals(true, scope0.isGlobal());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.hasOneChild());
      assertEquals(389, node0.getType());
      assertEquals(-1, node0.getCharno());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isQuotedString());
      assertEquals(0, node0.getChildCount());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(0, compiler0.getErrorCount());
      assertNotSame(linkedFlowScope0, linkedFlowScope1);
      assertNotSame(linkedFlowScope1, linkedFlowScope0);
      assertNotNull(linkedFlowScope1);
      assertTrue(linkedFlowScope0.equals((Object)linkedFlowScope1));
      assertTrue(linkedFlowScope1.equals((Object)linkedFlowScope0));
      
      LinkedFlowScope linkedFlowScope2 = linkedFlowScope1.optimize();
      assertEquals(33, scope0.getVarCount());
      assertEquals(false, scope0.isLocal());
      assertEquals(true, scope0.isGlobal());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.hasOneChild());
      assertEquals(389, node0.getType());
      assertEquals(-1, node0.getCharno());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isQuotedString());
      assertEquals(0, node0.getChildCount());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(0, compiler0.getErrorCount());
      assertNotSame(linkedFlowScope2, linkedFlowScope1);
      assertSame(linkedFlowScope2, linkedFlowScope0);
      assertNotSame(linkedFlowScope0, linkedFlowScope1);
      assertSame(linkedFlowScope0, linkedFlowScope2);
      assertNotSame(linkedFlowScope1, linkedFlowScope2);
      assertNotSame(linkedFlowScope1, linkedFlowScope0);
      assertNotNull(linkedFlowScope2);
      assertTrue(linkedFlowScope2.equals((Object)linkedFlowScope1));
      assertTrue(linkedFlowScope0.equals((Object)linkedFlowScope1));
      assertTrue(linkedFlowScope1.equals((Object)linkedFlowScope0));
      assertTrue(linkedFlowScope1.equals((Object)linkedFlowScope2));
  }

  @Test
  public void test05()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      assertNotNull(compiler0);
      
      LoggerErrorManager loggerErrorManager0 = (LoggerErrorManager)compiler0.getErrorManager();
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(0.0, loggerErrorManager0.getTypedPercent(), 0.01D);
      assertEquals(0, loggerErrorManager0.getErrorCount());
      assertEquals(0, loggerErrorManager0.getWarningCount());
      assertNotNull(loggerErrorManager0);
      
      TypedScopeCreator typedScopeCreator0 = new TypedScopeCreator(compiler0);
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(false, compiler0.hasErrors());
      assertNotNull(typedScopeCreator0);
      
      int int0 = 389;
      String string0 = "B,4";
      Node node0 = Node.newString(int0, string0);
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(-1, node0.getLineno());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isVarArgs());
      assertEquals(389, node0.getType());
      assertEquals(0, node0.getChildCount());
      assertNotNull(node0);
      
      Scope scope0 = typedScopeCreator0.createInitialScope(node0);
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(-1, node0.getLineno());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isVarArgs());
      assertEquals(389, node0.getType());
      assertEquals(0, node0.getChildCount());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(33, scope0.getVarCount());
      assertEquals(true, scope0.isGlobal());
      assertEquals(false, scope0.isLocal());
      assertNotNull(scope0);
      
      LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope0);
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(-1, node0.getLineno());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isVarArgs());
      assertEquals(389, node0.getType());
      assertEquals(0, node0.getChildCount());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(33, scope0.getVarCount());
      assertEquals(true, scope0.isGlobal());
      assertEquals(false, scope0.isLocal());
      assertNotNull(linkedFlowScope0);
      
      linkedFlowScope0.completeScope(scope0);
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(-1, node0.getLineno());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isVarArgs());
      assertEquals(389, node0.getType());
      assertEquals(0, node0.getChildCount());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(33, scope0.getVarCount());
      assertEquals(true, scope0.isGlobal());
      assertEquals(false, scope0.isLocal());
  }

  @Test
  public void test06()  throws Throwable  {
      Scope scope0 = null;
      LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope0);
      assertNotNull(linkedFlowScope0);
      
      String string0 = "the \"eval\" object cannot be reassigned in ES5 strict mode";
      JSType jSType0 = null;
      String string1 = "qhDB#O:/yu)G6d2";
      assertNotSame(string1, string0);
      
      linkedFlowScope0.inferSlotType(string1, jSType0);
      assertNotSame(string1, string0);
      assertFalse(string1.equals((Object)string0));
      
      linkedFlowScope0.inferSlotType(string0, jSType0);
      assertNotSame(string0, string1);
      assertFalse(string0.equals((Object)string1));
      
      LinkedFlowScope linkedFlowScope1 = LinkedFlowScope.createEntryLattice(scope0);
      assertNotSame(linkedFlowScope1, linkedFlowScope0);
      assertNotNull(linkedFlowScope1);
      assertTrue(linkedFlowScope1.equals((Object)linkedFlowScope0));
      
      StaticSlot<JSType> staticSlot0 = linkedFlowScope0.findUniqueRefinedSlot((FlowScope) linkedFlowScope1);
      assertNotSame(linkedFlowScope0, linkedFlowScope1);
      assertNotSame(linkedFlowScope1, linkedFlowScope0);
      assertNull(staticSlot0);
      assertTrue(linkedFlowScope0.equals((Object)linkedFlowScope1));
      assertTrue(linkedFlowScope1.equals((Object)linkedFlowScope0));
  }

  @Test
  public void test07()  throws Throwable  {
      Scope scope0 = null;
      LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope0);
      assertNotNull(linkedFlowScope0);
      
      String string0 = "the \"eval\" object cannot be reassigned in ES5 strict mode";
      JSType jSType0 = null;
      linkedFlowScope0.inferSlotType(string0, jSType0);
      linkedFlowScope0.inferSlotType(string0, jSType0);
      LinkedFlowScope linkedFlowScope1 = LinkedFlowScope.createEntryLattice(scope0);
      assertNotSame(linkedFlowScope1, linkedFlowScope0);
      assertNotNull(linkedFlowScope1);
      assertTrue(linkedFlowScope1.equals((Object)linkedFlowScope0));
      
      // Undeclared exception!
      try {
        StaticSlot<JSType> staticSlot0 = linkedFlowScope0.findUniqueRefinedSlot((FlowScope) linkedFlowScope1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test08()  throws Throwable  {
      Scope scope0 = null;
      LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope0);
      assertNotNull(linkedFlowScope0);
      
      String string0 = "the \"eval\" object cannot be reassigned in ES5 strict mode";
      JSType jSType0 = null;
      String string1 = "qhDB#O:/yu)G6d2";
      assertNotSame(string1, string0);
      
      linkedFlowScope0.inferSlotType(string0, jSType0);
      assertNotSame(string0, string1);
      assertFalse(string0.equals((Object)string1));
      
      linkedFlowScope0.inferSlotType(string1, jSType0);
      assertNotSame(string1, string0);
      assertFalse(string1.equals((Object)string0));
      
      StaticSlot<JSType> staticSlot0 = linkedFlowScope0.getSlot(string0);
      assertEquals("the \"eval\" object cannot be reassigned in ES5 strict mode", staticSlot0.getName());
      assertEquals(true, staticSlot0.isTypeInferred());
      assertNotSame(string0, string1);
      assertNotNull(staticSlot0);
      assertFalse(string0.equals((Object)string1));
  }

  @Test
  public void test09()  throws Throwable  {
      Scope scope0 = null;
      LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope0);
      assertNotNull(linkedFlowScope0);
      
      String string0 = "n~t$*YM.l}-T]]n#'";
      // Undeclared exception!
      try {
        StaticSlot<JSType> staticSlot0 = linkedFlowScope0.getSlot(string0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test10()  throws Throwable  {
      Scope scope0 = null;
      LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope0);
      assertNotNull(linkedFlowScope0);
      
      String string0 = "the \"eval\" object cannot be reassigned in ES5 strict mode";
      LinkedFlowScope linkedFlowScope1 = (LinkedFlowScope)linkedFlowScope0.createChildFlowScope();
      assertNotSame(linkedFlowScope0, linkedFlowScope1);
      assertNotSame(linkedFlowScope1, linkedFlowScope0);
      assertNotNull(linkedFlowScope1);
      assertTrue(linkedFlowScope0.equals((Object)linkedFlowScope1));
      assertTrue(linkedFlowScope1.equals((Object)linkedFlowScope0));
      
      JSType jSType0 = null;
      // Undeclared exception!
      try {
        linkedFlowScope0.inferSlotType(string0, jSType0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test11()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      assertNotNull(compiler0);
      
      Scope scope0 = compiler0.getTopScope();
      assertNull(scope0);
      
      LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope0);
      assertNotNull(linkedFlowScope0);
      
      // Undeclared exception!
      try {
        StaticScope<JSType> staticScope0 = linkedFlowScope0.getParentScope();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test12()  throws Throwable  {
      Scope scope0 = null;
      LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope0);
      assertNotNull(linkedFlowScope0);
      
      // Undeclared exception!
      try {
        JSType jSType0 = linkedFlowScope0.getTypeOfThis();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test13()  throws Throwable  {
      LinkedFlowScope.FlowScopeJoinOp linkedFlowScope_FlowScopeJoinOp0 = new LinkedFlowScope.FlowScopeJoinOp();
      assertNotNull(linkedFlowScope_FlowScopeJoinOp0);
      
      Scope scope0 = null;
      LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope0);
      assertNotNull(linkedFlowScope0);
      
      LinkedFlowScope linkedFlowScope1 = LinkedFlowScope.createEntryLattice(scope0);
      assertNotSame(linkedFlowScope1, linkedFlowScope0);
      assertNotNull(linkedFlowScope1);
      assertTrue(linkedFlowScope1.equals((Object)linkedFlowScope0));
      
      // Undeclared exception!
      try {
        FlowScope flowScope0 = linkedFlowScope_FlowScopeJoinOp0.apply((FlowScope) linkedFlowScope0, (FlowScope) linkedFlowScope1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test14()  throws Throwable  {
      Scope scope0 = null;
      LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope0);
      assertNotNull(linkedFlowScope0);
      
      String string0 = "Cq ";
      // Undeclared exception!
      try {
        StaticSlot<JSType> staticSlot0 = linkedFlowScope0.getOwnSlot(string0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
}
