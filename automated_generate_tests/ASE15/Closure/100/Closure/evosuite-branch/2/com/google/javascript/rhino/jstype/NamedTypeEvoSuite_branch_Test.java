/*
 * This file was automatically generated by EvoSuite
 * Fri Dec 12 05:06:00 GMT 2014
 */

package com.google.javascript.rhino.jstype;

import static org.junit.Assert.*;
import org.junit.Test;
import com.google.javascript.rhino.ErrorReporter;
import com.google.javascript.rhino.SimpleErrorReporter;
import com.google.javascript.rhino.jstype.ArrowType;
import com.google.javascript.rhino.jstype.BooleanLiteralSet;
import com.google.javascript.rhino.jstype.EnumElementType;
import com.google.javascript.rhino.jstype.ErrorFunctionType;
import com.google.javascript.rhino.jstype.JSType;
import com.google.javascript.rhino.jstype.JSTypeRegistry;
import com.google.javascript.rhino.jstype.NamedType;
import com.google.javascript.rhino.jstype.SimpleSlot;
import com.google.javascript.rhino.jstype.StaticScope;
import com.google.javascript.rhino.jstype.TemplateType;
import com.google.javascript.rhino.jstype.UnknownType;
import com.google.javascript.rhino.jstype.VoidType;
import com.google.javascript.rhino.testing.EmptyScope;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;

import org.junit.runner.RunWith;


public class NamedTypeEvoSuite_branch_Test  {

  @Test
  public void test00()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      boolean boolean0 = true;
      int int0 = 1966;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0, boolean0);
      assertNotNull(jSTypeRegistry0);
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      String string0 = "/T";
      NamedType namedType0 = new NamedType(jSTypeRegistry0, string0, string0, int0, int0);
      assertNotNull(namedType0);
      assertEquals(false, namedType0.isTemplateType());
      assertEquals(false, namedType0.isRecordType());
      assertEquals(false, namedType0.isUnionType());
      assertEquals(false, namedType0.isNumberValueType());
      assertEquals(false, namedType0.isBooleanValueType());
      assertEquals(false, namedType0.isNativeObjectType());
      assertEquals(false, namedType0.hasCachedValues());
      assertEquals(false, namedType0.isResolved());
      assertEquals(false, namedType0.isFunctionType());
      assertEquals(false, namedType0.isEmptyType());
      assertEquals(BooleanLiteralSet.TRUE, namedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, namedType0.isVoidType());
      assertEquals(false, namedType0.isNoObjectType());
      assertEquals(false, namedType0.isNullType());
      assertEquals(false, namedType0.isNoType());
      assertEquals(false, namedType0.isAllType());
      assertEquals(false, namedType0.isStringValueType());
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      SimpleSlot simpleSlot0 = new SimpleSlot(string0, (JSType) namedType0, boolean0);
      assertNotNull(simpleSlot0);
      assertEquals(true, simpleSlot0.isTypeInferred());
      assertEquals("/T", simpleSlot0.getName());
      assertEquals(false, namedType0.isTemplateType());
      assertEquals(false, namedType0.isRecordType());
      assertEquals(false, namedType0.isUnionType());
      assertEquals(false, namedType0.isNumberValueType());
      assertEquals(false, namedType0.isBooleanValueType());
      assertEquals(false, namedType0.isNativeObjectType());
      assertEquals(false, namedType0.hasCachedValues());
      assertEquals(false, namedType0.isResolved());
      assertEquals(false, namedType0.isFunctionType());
      assertEquals(false, namedType0.isEmptyType());
      assertEquals(BooleanLiteralSet.TRUE, namedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, namedType0.isVoidType());
      assertEquals(false, namedType0.isNoObjectType());
      assertEquals(false, namedType0.isNullType());
      assertEquals(false, namedType0.isNoType());
      assertEquals(false, namedType0.isAllType());
      assertEquals(false, namedType0.isStringValueType());
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      NamedType namedType1 = (NamedType)namedType0.getTypedefType(simpleErrorReporter0, simpleSlot0, string0);
      assertNotNull(namedType1);
      assertEquals(false, namedType1.isUnionType());
      assertEquals(false, namedType1.isNativeObjectType());
      assertEquals(false, namedType1.isNoObjectType());
      assertEquals(false, namedType1.isTemplateType());
      assertEquals(false, namedType1.isEmptyType());
      assertEquals(false, namedType1.isBooleanValueType());
      assertEquals(false, namedType1.isVoidType());
      assertEquals(false, namedType1.isStringValueType());
      assertEquals(false, namedType1.isAllType());
      assertEquals(false, namedType1.isNumberValueType());
      assertEquals(false, namedType1.isNullType());
      assertEquals(false, namedType1.isNoType());
      assertEquals(false, namedType1.hasCachedValues());
      assertEquals(false, namedType1.isFunctionType());
      assertEquals(false, namedType1.isResolved());
      assertEquals(BooleanLiteralSet.TRUE, namedType1.getPossibleToBooleanOutcomes());
      assertEquals(false, namedType1.isRecordType());
      assertEquals(true, simpleSlot0.isTypeInferred());
      assertEquals("/T", simpleSlot0.getName());
      assertEquals(false, namedType0.isTemplateType());
      assertEquals(false, namedType0.isRecordType());
      assertEquals(false, namedType0.isUnionType());
      assertEquals(false, namedType0.isNumberValueType());
      assertEquals(false, namedType0.isBooleanValueType());
      assertEquals(false, namedType0.isNativeObjectType());
      assertEquals(false, namedType0.hasCachedValues());
      assertEquals(false, namedType0.isResolved());
      assertEquals(false, namedType0.isFunctionType());
      assertEquals(false, namedType0.isEmptyType());
      assertEquals(BooleanLiteralSet.TRUE, namedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, namedType0.isVoidType());
      assertEquals(false, namedType0.isNoObjectType());
      assertEquals(false, namedType0.isNullType());
      assertEquals(false, namedType0.isNoType());
      assertEquals(false, namedType0.isAllType());
      assertEquals(false, namedType0.isStringValueType());
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertSame(namedType1, namedType0);
      assertSame(namedType0, namedType1);
  }

  @Test
  public void test01()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      String string0 = "default";
      int int0 = (-21);
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      String string1 = "8J";
      assertNotSame(string1, string0);
      
      NamedType namedType0 = new NamedType(jSTypeRegistry0, string0, string0, int0, int0);
      assertNotNull(namedType0);
      assertEquals(false, namedType0.isNoType());
      assertEquals(false, namedType0.isNativeObjectType());
      assertEquals(false, namedType0.isResolved());
      assertEquals(false, namedType0.isBooleanValueType());
      assertEquals(false, namedType0.hasCachedValues());
      assertEquals(false, namedType0.isEmptyType());
      assertEquals(false, namedType0.isFunctionType());
      assertEquals(false, namedType0.isAllType());
      assertEquals(false, namedType0.isNumberValueType());
      assertEquals(BooleanLiteralSet.TRUE, namedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, namedType0.isStringValueType());
      assertEquals(false, namedType0.isVoidType());
      assertEquals(false, namedType0.isUnionType());
      assertEquals(false, namedType0.isTemplateType());
      assertEquals(false, namedType0.isRecordType());
      assertEquals(false, namedType0.isNoObjectType());
      assertEquals(false, namedType0.isNullType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(string0.equals((Object)string1));
      assertNotSame(string0, string1);
      
      NamedType namedType1 = new NamedType(jSTypeRegistry0, string1, string1, int0, int0);
      assertNotNull(namedType1);
      assertEquals(false, namedType1.isNullType());
      assertEquals(false, namedType1.hasCachedValues());
      assertEquals(false, namedType1.isVoidType());
      assertEquals(false, namedType1.isAllType());
      assertEquals(false, namedType1.isRecordType());
      assertEquals(false, namedType1.isNoType());
      assertEquals(false, namedType1.isResolved());
      assertEquals(false, namedType1.isNativeObjectType());
      assertEquals(false, namedType1.isStringValueType());
      assertEquals(false, namedType1.isFunctionType());
      assertEquals(false, namedType1.isUnionType());
      assertEquals(false, namedType1.isTemplateType());
      assertEquals(BooleanLiteralSet.TRUE, namedType1.getPossibleToBooleanOutcomes());
      assertEquals(false, namedType1.isBooleanValueType());
      assertEquals(false, namedType1.isNoObjectType());
      assertEquals(false, namedType1.isEmptyType());
      assertEquals(false, namedType1.isNumberValueType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(namedType1.equals((Object)namedType0));
      assertFalse(string1.equals((Object)string0));
      assertNotSame(namedType1, namedType0);
      assertNotSame(string1, string0);
      
      boolean boolean0 = namedType0.isEquivalentTo((JSType) namedType1);
      assertEquals(false, namedType0.isNoType());
      assertEquals(false, namedType0.isNativeObjectType());
      assertEquals(false, namedType0.isResolved());
      assertEquals(false, namedType0.isBooleanValueType());
      assertEquals(false, namedType0.hasCachedValues());
      assertEquals(false, namedType0.isEmptyType());
      assertEquals(false, namedType0.isFunctionType());
      assertEquals(false, namedType0.isAllType());
      assertEquals(false, namedType0.isNumberValueType());
      assertEquals(BooleanLiteralSet.TRUE, namedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, namedType0.isStringValueType());
      assertEquals(false, namedType0.isVoidType());
      assertEquals(false, namedType0.isUnionType());
      assertEquals(false, namedType0.isTemplateType());
      assertEquals(false, namedType0.isRecordType());
      assertEquals(false, namedType0.isNoObjectType());
      assertEquals(false, namedType0.isNullType());
      assertEquals(false, namedType1.isNullType());
      assertEquals(false, namedType1.hasCachedValues());
      assertEquals(false, namedType1.isVoidType());
      assertEquals(false, namedType1.isAllType());
      assertEquals(false, namedType1.isRecordType());
      assertEquals(false, namedType1.isNoType());
      assertEquals(false, namedType1.isResolved());
      assertEquals(false, namedType1.isNativeObjectType());
      assertEquals(false, namedType1.isStringValueType());
      assertEquals(false, namedType1.isFunctionType());
      assertEquals(false, namedType1.isUnionType());
      assertEquals(false, namedType1.isTemplateType());
      assertEquals(BooleanLiteralSet.TRUE, namedType1.getPossibleToBooleanOutcomes());
      assertEquals(false, namedType1.isBooleanValueType());
      assertEquals(false, namedType1.isNoObjectType());
      assertEquals(false, namedType1.isEmptyType());
      assertEquals(false, namedType1.isNumberValueType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(namedType0.equals((Object)namedType1));
      assertFalse(string0.equals((Object)string1));
      assertFalse(namedType1.equals((Object)namedType0));
      assertFalse(string1.equals((Object)string0));
      assertFalse(boolean0);
      assertNotSame(namedType0, namedType1);
      assertNotSame(string0, string1);
      assertNotSame(namedType1, namedType0);
      assertNotSame(string1, string0);
      
      jSTypeRegistry0.setLastGeneration(boolean0);
      assertEquals(false, namedType0.isNoType());
      assertEquals(false, namedType0.isNativeObjectType());
      assertEquals(false, namedType0.isResolved());
      assertEquals(false, namedType0.isBooleanValueType());
      assertEquals(false, namedType0.hasCachedValues());
      assertEquals(false, namedType0.isEmptyType());
      assertEquals(false, namedType0.isFunctionType());
      assertEquals(false, namedType0.isAllType());
      assertEquals(false, namedType0.isNumberValueType());
      assertEquals(BooleanLiteralSet.TRUE, namedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, namedType0.isStringValueType());
      assertEquals(false, namedType0.isVoidType());
      assertEquals(false, namedType0.isUnionType());
      assertEquals(false, namedType0.isTemplateType());
      assertEquals(false, namedType0.isRecordType());
      assertEquals(false, namedType0.isNoObjectType());
      assertEquals(false, namedType0.isNullType());
      assertEquals(false, namedType1.isNullType());
      assertEquals(false, namedType1.hasCachedValues());
      assertEquals(false, namedType1.isVoidType());
      assertEquals(false, namedType1.isAllType());
      assertEquals(false, namedType1.isRecordType());
      assertEquals(false, namedType1.isNoType());
      assertEquals(false, namedType1.isResolved());
      assertEquals(false, namedType1.isNativeObjectType());
      assertEquals(false, namedType1.isStringValueType());
      assertEquals(false, namedType1.isFunctionType());
      assertEquals(false, namedType1.isUnionType());
      assertEquals(false, namedType1.isTemplateType());
      assertEquals(BooleanLiteralSet.TRUE, namedType1.getPossibleToBooleanOutcomes());
      assertEquals(false, namedType1.isBooleanValueType());
      assertEquals(false, namedType1.isNoObjectType());
      assertEquals(false, namedType1.isEmptyType());
      assertEquals(false, namedType1.isNumberValueType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(namedType0.equals((Object)namedType1));
      assertFalse(string0.equals((Object)string1));
      assertFalse(namedType1.equals((Object)namedType0));
      assertFalse(string1.equals((Object)string0));
      assertNotSame(namedType0, namedType1);
      assertNotSame(string0, string1);
      assertNotSame(namedType1, namedType0);
      assertNotSame(string1, string0);
      
      JSType jSType0 = jSTypeRegistry0.getType(string1);
      assertNull(jSType0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(string1.equals((Object)string0));
      assertNotSame(string1, string0);
      
      SimpleSlot simpleSlot0 = new SimpleSlot(string1, jSType0, boolean0);
      assertNotNull(simpleSlot0);
      assertEquals(false, namedType0.isNoType());
      assertEquals(false, namedType0.isNativeObjectType());
      assertEquals(false, namedType0.isResolved());
      assertEquals(false, namedType0.isBooleanValueType());
      assertEquals(false, namedType0.hasCachedValues());
      assertEquals(false, namedType0.isEmptyType());
      assertEquals(false, namedType0.isFunctionType());
      assertEquals(false, namedType0.isAllType());
      assertEquals(false, namedType0.isNumberValueType());
      assertEquals(BooleanLiteralSet.TRUE, namedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, namedType0.isStringValueType());
      assertEquals(false, namedType0.isVoidType());
      assertEquals(false, namedType0.isUnionType());
      assertEquals(false, namedType0.isTemplateType());
      assertEquals(false, namedType0.isRecordType());
      assertEquals(false, namedType0.isNoObjectType());
      assertEquals(false, namedType0.isNullType());
      assertEquals("8J", simpleSlot0.getName());
      assertEquals(false, simpleSlot0.isTypeInferred());
      assertEquals(false, namedType1.isNullType());
      assertEquals(false, namedType1.hasCachedValues());
      assertEquals(false, namedType1.isVoidType());
      assertEquals(false, namedType1.isAllType());
      assertEquals(false, namedType1.isRecordType());
      assertEquals(false, namedType1.isNoType());
      assertEquals(false, namedType1.isResolved());
      assertEquals(false, namedType1.isNativeObjectType());
      assertEquals(false, namedType1.isStringValueType());
      assertEquals(false, namedType1.isFunctionType());
      assertEquals(false, namedType1.isUnionType());
      assertEquals(false, namedType1.isTemplateType());
      assertEquals(BooleanLiteralSet.TRUE, namedType1.getPossibleToBooleanOutcomes());
      assertEquals(false, namedType1.isBooleanValueType());
      assertEquals(false, namedType1.isNoObjectType());
      assertEquals(false, namedType1.isEmptyType());
      assertEquals(false, namedType1.isNumberValueType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(namedType0.equals((Object)namedType1));
      assertFalse(string0.equals((Object)string1));
      assertFalse(namedType1.equals((Object)namedType0));
      assertFalse(string1.equals((Object)string0));
      assertNotSame(namedType0, namedType1);
      assertNotSame(string0, string1);
      assertNotSame(namedType1, namedType0);
      assertNotSame(string1, string0);
      
      JSType jSType1 = namedType0.getTypedefType(simpleErrorReporter0, simpleSlot0, string0);
      assertNull(jSType1);
      assertEquals(false, namedType0.isNoType());
      assertEquals(false, namedType0.isNativeObjectType());
      assertEquals(false, namedType0.isBooleanValueType());
      assertEquals(false, namedType0.hasCachedValues());
      assertEquals(false, namedType0.isEmptyType());
      assertEquals(false, namedType0.isFunctionType());
      assertEquals(false, namedType0.isAllType());
      assertEquals(false, namedType0.isNumberValueType());
      assertEquals(BooleanLiteralSet.TRUE, namedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, namedType0.isStringValueType());
      assertEquals(false, namedType0.isVoidType());
      assertEquals(false, namedType0.isUnionType());
      assertEquals(false, namedType0.isTemplateType());
      assertEquals(false, namedType0.isRecordType());
      assertEquals(false, namedType0.isNoObjectType());
      assertEquals(false, namedType0.isNullType());
      assertEquals(true, namedType0.isResolved());
      assertEquals("8J", simpleSlot0.getName());
      assertEquals(false, simpleSlot0.isTypeInferred());
      assertEquals(false, namedType1.isNullType());
      assertEquals(false, namedType1.hasCachedValues());
      assertEquals(false, namedType1.isVoidType());
      assertEquals(false, namedType1.isAllType());
      assertEquals(false, namedType1.isRecordType());
      assertEquals(false, namedType1.isNoType());
      assertEquals(false, namedType1.isResolved());
      assertEquals(false, namedType1.isNativeObjectType());
      assertEquals(false, namedType1.isStringValueType());
      assertEquals(false, namedType1.isFunctionType());
      assertEquals(false, namedType1.isUnionType());
      assertEquals(false, namedType1.isTemplateType());
      assertEquals(BooleanLiteralSet.TRUE, namedType1.getPossibleToBooleanOutcomes());
      assertEquals(false, namedType1.isBooleanValueType());
      assertEquals(false, namedType1.isNoObjectType());
      assertEquals(false, namedType1.isEmptyType());
      assertEquals(false, namedType1.isNumberValueType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(namedType0.equals((Object)namedType1));
      assertFalse(string0.equals((Object)string1));
      assertFalse(namedType1.equals((Object)namedType0));
      assertFalse(string1.equals((Object)string0));
      assertNotSame(namedType0, namedType1);
      assertNotSame(string0, string1);
      assertNotSame(namedType1, namedType0);
      assertNotSame(string1, string0);
  }

  @Test
  public void test02()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      String string0 = "wmod";
      int int0 = (-40);
      NamedType namedType0 = new NamedType(jSTypeRegistry0, string0, string0, int0, int0);
      assertNotNull(namedType0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, namedType0.isUnionType());
      assertEquals(false, namedType0.isVoidType());
      assertEquals(false, namedType0.isResolved());
      assertEquals(false, namedType0.isNumberValueType());
      assertEquals(false, namedType0.isAllType());
      assertEquals(false, namedType0.isNullType());
      assertEquals(false, namedType0.isTemplateType());
      assertEquals(false, namedType0.hasCachedValues());
      assertEquals(false, namedType0.isFunctionType());
      assertEquals(false, namedType0.isRecordType());
      assertEquals(false, namedType0.isEmptyType());
      assertEquals(false, namedType0.isNativeObjectType());
      assertEquals(false, namedType0.isNoType());
      assertEquals(false, namedType0.isNoObjectType());
      assertEquals(false, namedType0.isBooleanValueType());
      assertEquals(false, namedType0.isStringValueType());
      assertEquals(BooleanLiteralSet.TRUE, namedType0.getPossibleToBooleanOutcomes());
      
      namedType0.forgiveUnknownNames();
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, namedType0.isUnionType());
      assertEquals(false, namedType0.isVoidType());
      assertEquals(false, namedType0.isResolved());
      assertEquals(false, namedType0.isNumberValueType());
      assertEquals(false, namedType0.isAllType());
      assertEquals(false, namedType0.isNullType());
      assertEquals(false, namedType0.isTemplateType());
      assertEquals(false, namedType0.hasCachedValues());
      assertEquals(false, namedType0.isFunctionType());
      assertEquals(false, namedType0.isRecordType());
      assertEquals(false, namedType0.isEmptyType());
      assertEquals(false, namedType0.isNativeObjectType());
      assertEquals(false, namedType0.isNoType());
      assertEquals(false, namedType0.isNoObjectType());
      assertEquals(false, namedType0.isBooleanValueType());
      assertEquals(false, namedType0.isStringValueType());
      assertEquals(BooleanLiteralSet.TRUE, namedType0.getPossibleToBooleanOutcomes());
      
      EmptyScope emptyScope0 = new EmptyScope();
      assertNotNull(emptyScope0);
      
      UnknownType unknownType0 = (UnknownType)namedType0.forceResolve((ErrorReporter) simpleErrorReporter0, (StaticScope<JSType>) emptyScope0);
      assertNotNull(unknownType0);
      assertEquals(true, unknownType0.matchesObjectContext());
      assertEquals(false, unknownType0.hasReferenceName());
      assertEquals(true, unknownType0.canBeCalled());
      assertEquals(true, unknownType0.matchesStringContext());
      assertEquals(false, unknownType0.isNativeObjectType());
      assertEquals(false, unknownType0.isVoidType());
      assertEquals(false, unknownType0.isNumberValueType());
      assertEquals(false, unknownType0.isNoType());
      assertEquals(true, unknownType0.isCheckedUnknownType());
      assertEquals(false, unknownType0.isEmptyType());
      assertEquals(false, unknownType0.isNullType());
      assertEquals(BooleanLiteralSet.BOTH, unknownType0.getPossibleToBooleanOutcomes());
      assertEquals("??", unknownType0.getReferenceName());
      assertEquals(true, unknownType0.matchesNumberContext());
      assertEquals(true, unknownType0.isResolved());
      assertEquals(false, unknownType0.isFunctionType());
      assertEquals("??", unknownType0.toString());
      assertEquals(true, unknownType0.isUnknownType());
      assertEquals(false, unknownType0.hasCachedValues());
      assertEquals(false, unknownType0.isRecordType());
      assertEquals(false, unknownType0.isAllType());
      assertEquals(2147483647, unknownType0.getPropertiesCount());
      assertEquals(false, unknownType0.isNoObjectType());
      assertEquals(false, unknownType0.isTemplateType());
      assertEquals(true, unknownType0.isNullable());
      assertEquals(false, unknownType0.isStringValueType());
      assertEquals(false, unknownType0.isBooleanValueType());
      assertEquals(false, unknownType0.isUnionType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, namedType0.isUnionType());
      assertEquals(false, namedType0.isVoidType());
      assertEquals(false, namedType0.isNumberValueType());
      assertEquals(false, namedType0.isAllType());
      assertEquals(false, namedType0.isNullType());
      assertEquals(false, namedType0.isTemplateType());
      assertEquals(false, namedType0.hasCachedValues());
      assertEquals(false, namedType0.isFunctionType());
      assertEquals(false, namedType0.isRecordType());
      assertEquals(false, namedType0.isEmptyType());
      assertEquals(false, namedType0.isNativeObjectType());
      assertEquals(false, namedType0.isNoType());
      assertEquals(false, namedType0.isNoObjectType());
      assertEquals(false, namedType0.isBooleanValueType());
      assertEquals(false, namedType0.isStringValueType());
      assertEquals(true, namedType0.isResolved());
      assertEquals(BooleanLiteralSet.TRUE, namedType0.getPossibleToBooleanOutcomes());
  }

  @Test
  public void test03()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      boolean boolean0 = true;
      int int0 = 1966;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0, boolean0);
      assertNotNull(jSTypeRegistry0);
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      String string0 = "/T";
      NamedType namedType0 = new NamedType(jSTypeRegistry0, string0, string0, int0, int0);
      assertNotNull(namedType0);
      assertEquals(false, namedType0.isNoType());
      assertEquals(BooleanLiteralSet.TRUE, namedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, namedType0.isResolved());
      assertEquals(false, namedType0.isVoidType());
      assertEquals(false, namedType0.isBooleanValueType());
      assertEquals(false, namedType0.isEmptyType());
      assertEquals(false, namedType0.isNullType());
      assertEquals(false, namedType0.isRecordType());
      assertEquals(false, namedType0.isTemplateType());
      assertEquals(false, namedType0.isNumberValueType());
      assertEquals(false, namedType0.isNativeObjectType());
      assertEquals(false, namedType0.isFunctionType());
      assertEquals(false, namedType0.isUnionType());
      assertEquals(false, namedType0.isAllType());
      assertEquals(false, namedType0.isStringValueType());
      assertEquals(false, namedType0.hasCachedValues());
      assertEquals(false, namedType0.isNoObjectType());
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      jSTypeRegistry0.setTemplateTypeName(string0);
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      EmptyScope emptyScope0 = new EmptyScope();
      assertNotNull(emptyScope0);
      
      TemplateType templateType0 = (TemplateType)namedType0.resolve((ErrorReporter) simpleErrorReporter0, (StaticScope<JSType>) emptyScope0);
      assertNotNull(templateType0);
      assertEquals(false, templateType0.isUnionType());
      assertEquals(false, templateType0.isNullType());
      assertEquals(false, templateType0.isNativeObjectType());
      assertEquals("/T", templateType0.toString());
      assertEquals(true, templateType0.isTemplateType());
      assertEquals(false, templateType0.isEmptyType());
      assertEquals(false, templateType0.isRecordType());
      assertEquals(false, templateType0.isFunctionType());
      assertEquals(false, templateType0.isVoidType());
      assertEquals(true, templateType0.isResolved());
      assertEquals(false, templateType0.isStringValueType());
      assertEquals(false, templateType0.hasCachedValues());
      assertEquals("/T", templateType0.getReferenceName());
      assertEquals(BooleanLiteralSet.TRUE, templateType0.getPossibleToBooleanOutcomes());
      assertEquals(false, templateType0.isNumberValueType());
      assertEquals(false, templateType0.isAllType());
      assertEquals(false, templateType0.isNoType());
      assertEquals(false, templateType0.isNoObjectType());
      assertEquals(false, templateType0.isBooleanValueType());
      assertEquals(false, namedType0.isNoType());
      assertEquals(BooleanLiteralSet.TRUE, namedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, namedType0.isVoidType());
      assertEquals(false, namedType0.isBooleanValueType());
      assertEquals(false, namedType0.isEmptyType());
      assertEquals(true, namedType0.isResolved());
      assertEquals(false, namedType0.isNullType());
      assertEquals(false, namedType0.isRecordType());
      assertEquals(false, namedType0.isTemplateType());
      assertEquals(false, namedType0.isNumberValueType());
      assertEquals(false, namedType0.isNativeObjectType());
      assertEquals(false, namedType0.isFunctionType());
      assertEquals(false, namedType0.isUnionType());
      assertEquals(false, namedType0.isAllType());
      assertEquals(false, namedType0.isStringValueType());
      assertEquals(false, namedType0.hasCachedValues());
      assertEquals(false, namedType0.isNoObjectType());
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
  }

  @Test
  public void test04()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      String string0 = "wmod";
      int int0 = (-25);
      NamedType namedType0 = new NamedType(jSTypeRegistry0, string0, string0, int0, int0);
      assertNotNull(namedType0);
      assertEquals(false, namedType0.isAllType());
      assertEquals(false, namedType0.isStringValueType());
      assertEquals(false, namedType0.isEmptyType());
      assertEquals(false, namedType0.isNoType());
      assertEquals(false, namedType0.hasCachedValues());
      assertEquals(false, namedType0.isUnionType());
      assertEquals(false, namedType0.isTemplateType());
      assertEquals(false, namedType0.isFunctionType());
      assertEquals(BooleanLiteralSet.TRUE, namedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, namedType0.isNativeObjectType());
      assertEquals(false, namedType0.isNoObjectType());
      assertEquals(false, namedType0.isRecordType());
      assertEquals(false, namedType0.isVoidType());
      assertEquals(false, namedType0.isBooleanValueType());
      assertEquals(false, namedType0.isNullType());
      assertEquals(false, namedType0.isNumberValueType());
      assertEquals(false, namedType0.isResolved());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      EmptyScope emptyScope0 = new EmptyScope();
      assertNotNull(emptyScope0);
      
      UnknownType unknownType0 = (UnknownType)namedType0.forceResolve((ErrorReporter) simpleErrorReporter0, (StaticScope<JSType>) emptyScope0);
      assertNotNull(unknownType0);
      assertEquals(false, namedType0.isAllType());
      assertEquals(false, namedType0.isStringValueType());
      assertEquals(false, namedType0.isEmptyType());
      assertEquals(false, namedType0.isNoType());
      assertEquals(false, namedType0.hasCachedValues());
      assertEquals(false, namedType0.isUnionType());
      assertEquals(false, namedType0.isTemplateType());
      assertEquals(false, namedType0.isFunctionType());
      assertEquals(BooleanLiteralSet.TRUE, namedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, namedType0.isNativeObjectType());
      assertEquals(false, namedType0.isNoObjectType());
      assertEquals(false, namedType0.isRecordType());
      assertEquals(false, namedType0.isVoidType());
      assertEquals(false, namedType0.isBooleanValueType());
      assertEquals(false, namedType0.isNullType());
      assertEquals(true, namedType0.isResolved());
      assertEquals(false, namedType0.isNumberValueType());
      assertEquals(false, unknownType0.isStringValueType());
      assertEquals(false, unknownType0.isFunctionType());
      assertEquals(true, unknownType0.canBeCalled());
      assertEquals(false, unknownType0.isVoidType());
      assertEquals(false, unknownType0.isNoType());
      assertEquals(false, unknownType0.isNumberValueType());
      assertEquals(true, unknownType0.matchesNumberContext());
      assertEquals(false, unknownType0.isNativeObjectType());
      assertEquals(2147483647, unknownType0.getPropertiesCount());
      assertEquals(false, unknownType0.isUnionType());
      assertEquals(false, unknownType0.isCheckedUnknownType());
      assertEquals(false, unknownType0.isNoObjectType());
      assertEquals(BooleanLiteralSet.BOTH, unknownType0.getPossibleToBooleanOutcomes());
      assertEquals(false, unknownType0.isBooleanValueType());
      assertEquals(false, unknownType0.hasReferenceName());
      assertEquals("?", unknownType0.getReferenceName());
      assertEquals(true, unknownType0.matchesObjectContext());
      assertEquals(true, unknownType0.isNullable());
      assertEquals(true, unknownType0.isResolved());
      assertEquals(false, unknownType0.isNullType());
      assertEquals(false, unknownType0.hasCachedValues());
      assertEquals(false, unknownType0.isTemplateType());
      assertEquals(false, unknownType0.isAllType());
      assertEquals(false, unknownType0.isRecordType());
      assertEquals(true, unknownType0.isUnknownType());
      assertEquals(true, unknownType0.matchesStringContext());
      assertEquals("?", unknownType0.toString());
      assertEquals(false, unknownType0.isEmptyType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
  }

  @Test
  public void test05()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      String string0 = "";
      int int0 = 4;
      NamedType namedType0 = new NamedType(jSTypeRegistry0, string0, string0, int0, int0);
      assertNotNull(namedType0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, namedType0.isEmptyType());
      assertEquals(false, namedType0.isBooleanValueType());
      assertEquals(false, namedType0.isNoObjectType());
      assertEquals(false, namedType0.isNumberValueType());
      assertEquals(false, namedType0.isFunctionType());
      assertEquals(false, namedType0.isAllType());
      assertEquals(false, namedType0.isRecordType());
      assertEquals(false, namedType0.isNoType());
      assertEquals(false, namedType0.hasCachedValues());
      assertEquals(false, namedType0.isVoidType());
      assertEquals(false, namedType0.isUnionType());
      assertEquals(false, namedType0.isTemplateType());
      assertEquals(false, namedType0.isResolved());
      assertEquals(false, namedType0.isNativeObjectType());
      assertEquals(false, namedType0.isStringValueType());
      assertEquals(false, namedType0.isNullType());
      assertEquals(BooleanLiteralSet.TRUE, namedType0.getPossibleToBooleanOutcomes());
      
      EmptyScope emptyScope0 = new EmptyScope();
      assertNotNull(emptyScope0);
      
      UnknownType unknownType0 = (UnknownType)namedType0.resolve((ErrorReporter) simpleErrorReporter0, (StaticScope<JSType>) emptyScope0);
      assertNotNull(unknownType0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, namedType0.isEmptyType());
      assertEquals(false, namedType0.isBooleanValueType());
      assertEquals(false, namedType0.isNoObjectType());
      assertEquals(false, namedType0.isNumberValueType());
      assertEquals(false, namedType0.isFunctionType());
      assertEquals(false, namedType0.isAllType());
      assertEquals(false, namedType0.isRecordType());
      assertEquals(true, namedType0.isResolved());
      assertEquals(false, namedType0.isNoType());
      assertEquals(false, namedType0.hasCachedValues());
      assertEquals(false, namedType0.isVoidType());
      assertEquals(false, namedType0.isUnionType());
      assertEquals(false, namedType0.isTemplateType());
      assertEquals(false, namedType0.isNativeObjectType());
      assertEquals(false, namedType0.isStringValueType());
      assertEquals(false, namedType0.isNullType());
      assertEquals(BooleanLiteralSet.TRUE, namedType0.getPossibleToBooleanOutcomes());
      assertEquals(BooleanLiteralSet.BOTH, unknownType0.getPossibleToBooleanOutcomes());
      assertEquals(true, unknownType0.canBeCalled());
      assertEquals(false, unknownType0.hasCachedValues());
      assertEquals(false, unknownType0.isVoidType());
      assertEquals(false, unknownType0.isNativeObjectType());
      assertEquals("?", unknownType0.toString());
      assertEquals(false, unknownType0.isTemplateType());
      assertEquals(false, unknownType0.isAllType());
      assertEquals(true, unknownType0.isNullable());
      assertEquals(false, unknownType0.isFunctionType());
      assertEquals(false, unknownType0.hasReferenceName());
      assertEquals(2147483647, unknownType0.getPropertiesCount());
      assertEquals(true, unknownType0.isUnknownType());
      assertEquals(false, unknownType0.isEmptyType());
      assertEquals(false, unknownType0.isNumberValueType());
      assertEquals(false, unknownType0.isCheckedUnknownType());
      assertEquals(false, unknownType0.isNoObjectType());
      assertEquals(false, unknownType0.isNoType());
      assertEquals(false, unknownType0.isRecordType());
      assertEquals(true, unknownType0.matchesStringContext());
      assertEquals(false, unknownType0.isNullType());
      assertEquals(false, unknownType0.isStringValueType());
      assertEquals("?", unknownType0.getReferenceName());
      assertEquals(true, unknownType0.isResolved());
      assertEquals(true, unknownType0.matchesObjectContext());
      assertEquals(false, unknownType0.isUnionType());
      assertEquals(true, unknownType0.matchesNumberContext());
      assertEquals(false, unknownType0.isBooleanValueType());
  }

  @Test
  public void test06()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      String string0 = "";
      int int0 = 926;
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, string0);
      assertNotNull(errorFunctionType0);
      assertEquals(true, errorFunctionType0.isConstructor());
      assertEquals(false, errorFunctionType0.isEmptyType());
      assertEquals(false, errorFunctionType0.isTemplateType());
      assertEquals(false, errorFunctionType0.isReturnTypeInferred());
      assertEquals(false, errorFunctionType0.isStringValueType());
      assertEquals(false, errorFunctionType0.isAllType());
      assertEquals(false, errorFunctionType0.isInterface());
      assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      assertEquals(true, errorFunctionType0.hasInstanceType());
      assertEquals(true, errorFunctionType0.isFunctionType());
      assertEquals(false, errorFunctionType0.isNoType());
      assertNull(errorFunctionType0.getTemplateTypeName());
      assertEquals(false, errorFunctionType0.isRecordType());
      assertEquals(false, errorFunctionType0.hasCachedValues());
      assertEquals(true, errorFunctionType0.canBeCalled());
      assertEquals(false, errorFunctionType0.isVoidType());
      assertEquals(false, errorFunctionType0.isResolved());
      assertEquals(false, errorFunctionType0.isBooleanValueType());
      assertEquals(false, errorFunctionType0.isNoObjectType());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, errorFunctionType0.isNullType());
      assertEquals(false, errorFunctionType0.isNumberValueType());
      assertEquals(3, errorFunctionType0.getMaxArguments());
      assertEquals(false, errorFunctionType0.isUnionType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      NamedType namedType0 = new NamedType(jSTypeRegistry0, string0, string0, int0, int0);
      assertNotNull(namedType0);
      assertEquals(false, namedType0.isStringValueType());
      assertEquals(false, namedType0.isAllType());
      assertEquals(false, namedType0.isFunctionType());
      assertEquals(false, namedType0.isVoidType());
      assertEquals(false, namedType0.isNullType());
      assertEquals(false, namedType0.isEmptyType());
      assertEquals(BooleanLiteralSet.TRUE, namedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, namedType0.isNoObjectType());
      assertEquals(false, namedType0.hasCachedValues());
      assertEquals(false, namedType0.isNumberValueType());
      assertEquals(false, namedType0.isUnionType());
      assertEquals(false, namedType0.isNativeObjectType());
      assertEquals(false, namedType0.isNoType());
      assertEquals(false, namedType0.isTemplateType());
      assertEquals(false, namedType0.isRecordType());
      assertEquals(false, namedType0.isResolved());
      assertEquals(false, namedType0.isBooleanValueType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      boolean boolean0 = namedType0.isEquivalentTo((JSType) errorFunctionType0);
      assertEquals(false, namedType0.isStringValueType());
      assertEquals(false, namedType0.isAllType());
      assertEquals(false, namedType0.isFunctionType());
      assertEquals(false, namedType0.isVoidType());
      assertEquals(false, namedType0.isNullType());
      assertEquals(false, namedType0.isEmptyType());
      assertEquals(BooleanLiteralSet.TRUE, namedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, namedType0.isNoObjectType());
      assertEquals(false, namedType0.hasCachedValues());
      assertEquals(false, namedType0.isNumberValueType());
      assertEquals(false, namedType0.isUnionType());
      assertEquals(false, namedType0.isNativeObjectType());
      assertEquals(false, namedType0.isNoType());
      assertEquals(false, namedType0.isTemplateType());
      assertEquals(false, namedType0.isRecordType());
      assertEquals(false, namedType0.isResolved());
      assertEquals(false, namedType0.isBooleanValueType());
      assertEquals(true, errorFunctionType0.isConstructor());
      assertEquals(false, errorFunctionType0.isEmptyType());
      assertEquals(false, errorFunctionType0.isTemplateType());
      assertEquals(false, errorFunctionType0.isReturnTypeInferred());
      assertEquals(false, errorFunctionType0.isStringValueType());
      assertEquals(false, errorFunctionType0.isAllType());
      assertEquals(false, errorFunctionType0.isInterface());
      assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      assertEquals(true, errorFunctionType0.hasInstanceType());
      assertEquals(true, errorFunctionType0.isFunctionType());
      assertEquals(false, errorFunctionType0.isNoType());
      assertNull(errorFunctionType0.getTemplateTypeName());
      assertEquals(false, errorFunctionType0.isRecordType());
      assertEquals(false, errorFunctionType0.hasCachedValues());
      assertEquals(true, errorFunctionType0.canBeCalled());
      assertEquals(false, errorFunctionType0.isVoidType());
      assertEquals(false, errorFunctionType0.isResolved());
      assertEquals(false, errorFunctionType0.isBooleanValueType());
      assertEquals(false, errorFunctionType0.isNoObjectType());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, errorFunctionType0.isNullType());
      assertEquals(false, errorFunctionType0.isNumberValueType());
      assertEquals(3, errorFunctionType0.getMaxArguments());
      assertEquals(false, errorFunctionType0.isUnionType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(boolean0);
  }

  @Test
  public void test07()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      String string0 = "";
      int int0 = 4;
      NamedType namedType0 = new NamedType(jSTypeRegistry0, string0, string0, int0, int0);
      assertNotNull(namedType0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, namedType0.isStringValueType());
      assertEquals(false, namedType0.isBooleanValueType());
      assertEquals(false, namedType0.isRecordType());
      assertEquals(false, namedType0.isTemplateType());
      assertEquals(false, namedType0.isEmptyType());
      assertEquals(false, namedType0.hasCachedValues());
      assertEquals(false, namedType0.isAllType());
      assertEquals(false, namedType0.isResolved());
      assertEquals(false, namedType0.isVoidType());
      assertEquals(false, namedType0.isFunctionType());
      assertEquals(false, namedType0.isNoObjectType());
      assertEquals(false, namedType0.isNullType());
      assertEquals(false, namedType0.isUnionType());
      assertEquals(false, namedType0.isNumberValueType());
      assertEquals(false, namedType0.isNativeObjectType());
      assertEquals(false, namedType0.isNoType());
      assertEquals(BooleanLiteralSet.TRUE, namedType0.getPossibleToBooleanOutcomes());
      
      VoidType voidType0 = new VoidType(jSTypeRegistry0);
      assertNotNull(voidType0);
      assertEquals(false, voidType0.isNumberValueType());
      assertEquals(false, voidType0.isFunctionType());
      assertEquals(false, voidType0.isNullType());
      assertEquals(false, voidType0.isUnionType());
      assertEquals(false, voidType0.isNoObjectType());
      assertEquals(false, voidType0.isNoType());
      assertEquals(false, voidType0.isRecordType());
      assertEquals(false, voidType0.isTemplateType());
      assertEquals(true, voidType0.isVoidType());
      assertEquals(false, voidType0.isStringValueType());
      assertEquals(BooleanLiteralSet.FALSE, voidType0.getPossibleToBooleanOutcomes());
      assertEquals("undefined", voidType0.toString());
      assertEquals(false, voidType0.isEmptyType());
      assertEquals(false, voidType0.isAllType());
      assertEquals(false, voidType0.matchesNumberContext());
      assertEquals(true, voidType0.matchesStringContext());
      assertEquals(false, voidType0.isBooleanValueType());
      assertEquals(false, voidType0.isResolved());
      assertEquals(false, voidType0.matchesObjectContext());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      boolean boolean0 = namedType0.equals((Object) voidType0);
      assertEquals(false, voidType0.isNumberValueType());
      assertEquals(false, voidType0.isFunctionType());
      assertEquals(false, voidType0.isNullType());
      assertEquals(false, voidType0.isUnionType());
      assertEquals(false, voidType0.isNoObjectType());
      assertEquals(false, voidType0.isNoType());
      assertEquals(false, voidType0.isRecordType());
      assertEquals(false, voidType0.isTemplateType());
      assertEquals(true, voidType0.isVoidType());
      assertEquals(false, voidType0.isStringValueType());
      assertEquals(BooleanLiteralSet.FALSE, voidType0.getPossibleToBooleanOutcomes());
      assertEquals("undefined", voidType0.toString());
      assertEquals(false, voidType0.isEmptyType());
      assertEquals(false, voidType0.isAllType());
      assertEquals(false, voidType0.matchesNumberContext());
      assertEquals(true, voidType0.matchesStringContext());
      assertEquals(false, voidType0.isBooleanValueType());
      assertEquals(false, voidType0.isResolved());
      assertEquals(false, voidType0.matchesObjectContext());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, namedType0.isStringValueType());
      assertEquals(false, namedType0.isBooleanValueType());
      assertEquals(false, namedType0.isRecordType());
      assertEquals(false, namedType0.isTemplateType());
      assertEquals(false, namedType0.isEmptyType());
      assertEquals(false, namedType0.hasCachedValues());
      assertEquals(false, namedType0.isAllType());
      assertEquals(false, namedType0.isResolved());
      assertEquals(false, namedType0.isVoidType());
      assertEquals(false, namedType0.isFunctionType());
      assertEquals(false, namedType0.isNoObjectType());
      assertEquals(false, namedType0.isNullType());
      assertEquals(false, namedType0.isUnionType());
      assertEquals(false, namedType0.isNumberValueType());
      assertEquals(false, namedType0.isNativeObjectType());
      assertEquals(false, namedType0.isNoType());
      assertEquals(BooleanLiteralSet.TRUE, namedType0.getPossibleToBooleanOutcomes());
      assertFalse(boolean0);
  }

  @Test
  public void test08()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      String string0 = "";
      int int0 = 926;
      NamedType namedType0 = new NamedType(jSTypeRegistry0, string0, string0, int0, int0);
      assertNotNull(namedType0);
      assertEquals(false, namedType0.isTemplateType());
      assertEquals(false, namedType0.isNativeObjectType());
      assertEquals(false, namedType0.isResolved());
      assertEquals(BooleanLiteralSet.TRUE, namedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, namedType0.isStringValueType());
      assertEquals(false, namedType0.isRecordType());
      assertEquals(false, namedType0.isBooleanValueType());
      assertEquals(false, namedType0.isEmptyType());
      assertEquals(false, namedType0.isNoType());
      assertEquals(false, namedType0.isVoidType());
      assertEquals(false, namedType0.isFunctionType());
      assertEquals(false, namedType0.isNullType());
      assertEquals(false, namedType0.hasCachedValues());
      assertEquals(false, namedType0.isNumberValueType());
      assertEquals(false, namedType0.isUnionType());
      assertEquals(false, namedType0.isAllType());
      assertEquals(false, namedType0.isNoObjectType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      UnknownType unknownType0 = (UnknownType)namedType0.getReferencedType();
      assertNotNull(unknownType0);
      assertEquals(false, namedType0.isTemplateType());
      assertEquals(false, namedType0.isNativeObjectType());
      assertEquals(false, namedType0.isResolved());
      assertEquals(BooleanLiteralSet.TRUE, namedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, namedType0.isStringValueType());
      assertEquals(false, namedType0.isRecordType());
      assertEquals(false, namedType0.isBooleanValueType());
      assertEquals(false, namedType0.isEmptyType());
      assertEquals(false, namedType0.isNoType());
      assertEquals(false, namedType0.isVoidType());
      assertEquals(false, namedType0.isFunctionType());
      assertEquals(false, namedType0.isNullType());
      assertEquals(false, namedType0.hasCachedValues());
      assertEquals(false, namedType0.isNumberValueType());
      assertEquals(false, namedType0.isUnionType());
      assertEquals(false, namedType0.isAllType());
      assertEquals(false, namedType0.isNoObjectType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(true, unknownType0.matchesNumberContext());
      assertEquals(false, unknownType0.isEmptyType());
      assertEquals(false, unknownType0.isBooleanValueType());
      assertEquals(true, unknownType0.isNullable());
      assertEquals(false, unknownType0.isStringValueType());
      assertEquals(false, unknownType0.isNullType());
      assertEquals(false, unknownType0.isNativeObjectType());
      assertEquals(false, unknownType0.isResolved());
      assertEquals("?", unknownType0.toString());
      assertEquals("?", unknownType0.getReferenceName());
      assertEquals(false, unknownType0.isAllType());
      assertEquals(false, unknownType0.isRecordType());
      assertEquals(false, unknownType0.isNoObjectType());
      assertEquals(false, unknownType0.hasReferenceName());
      assertEquals(true, unknownType0.canBeCalled());
      assertEquals(false, unknownType0.isUnionType());
      assertEquals(false, unknownType0.isTemplateType());
      assertEquals(false, unknownType0.isFunctionType());
      assertEquals(true, unknownType0.matchesObjectContext());
      assertEquals(BooleanLiteralSet.BOTH, unknownType0.getPossibleToBooleanOutcomes());
      assertEquals(false, unknownType0.isCheckedUnknownType());
      assertEquals(false, unknownType0.isNumberValueType());
      assertEquals(2147483647, unknownType0.getPropertiesCount());
      assertEquals(false, unknownType0.isVoidType());
      assertEquals(false, unknownType0.hasCachedValues());
      assertEquals(false, unknownType0.isNoType());
      assertEquals(true, unknownType0.matchesStringContext());
      assertEquals(true, unknownType0.isUnknownType());
  }

  @Test
  public void test09()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      String string0 = "";
      int int0 = 926;
      NamedType namedType0 = new NamedType(jSTypeRegistry0, string0, string0, int0, int0);
      assertNotNull(namedType0);
      assertEquals(false, namedType0.isRecordType());
      assertEquals(false, namedType0.isEmptyType());
      assertEquals(false, namedType0.isBooleanValueType());
      assertEquals(false, namedType0.isResolved());
      assertEquals(false, namedType0.isTemplateType());
      assertEquals(false, namedType0.isStringValueType());
      assertEquals(false, namedType0.isNativeObjectType());
      assertEquals(false, namedType0.hasCachedValues());
      assertEquals(false, namedType0.isVoidType());
      assertEquals(false, namedType0.isNumberValueType());
      assertEquals(false, namedType0.isNullType());
      assertEquals(false, namedType0.isNoObjectType());
      assertEquals(false, namedType0.isFunctionType());
      assertEquals(false, namedType0.isAllType());
      assertEquals(false, namedType0.isNoType());
      assertEquals(false, namedType0.isUnionType());
      assertEquals(BooleanLiteralSet.TRUE, namedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      String string1 = namedType0.toString();
      assertNotNull(string1);
      assertEquals(false, namedType0.isRecordType());
      assertEquals(false, namedType0.isEmptyType());
      assertEquals(false, namedType0.isBooleanValueType());
      assertEquals(false, namedType0.isResolved());
      assertEquals(false, namedType0.isTemplateType());
      assertEquals(false, namedType0.isStringValueType());
      assertEquals(false, namedType0.isNativeObjectType());
      assertEquals(false, namedType0.hasCachedValues());
      assertEquals(false, namedType0.isVoidType());
      assertEquals(false, namedType0.isNumberValueType());
      assertEquals(false, namedType0.isNullType());
      assertEquals(false, namedType0.isNoObjectType());
      assertEquals(false, namedType0.isFunctionType());
      assertEquals(false, namedType0.isAllType());
      assertEquals(false, namedType0.isNoType());
      assertEquals(false, namedType0.isUnionType());
      assertEquals(BooleanLiteralSet.TRUE, namedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals("", string1);
      assertSame(string0, string1);
      assertSame(string1, string0);
  }

  @Test
  public void test10()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      boolean boolean0 = false;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0, boolean0);
      assertNotNull(jSTypeRegistry0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      String string0 = "sp";
      int int0 = 128;
      NamedType namedType0 = new NamedType(jSTypeRegistry0, string0, string0, int0, int0);
      assertNotNull(namedType0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, namedType0.isNoType());
      assertEquals(false, namedType0.isResolved());
      assertEquals(false, namedType0.isRecordType());
      assertEquals(false, namedType0.isNullType());
      assertEquals(false, namedType0.isAllType());
      assertEquals(false, namedType0.isEmptyType());
      assertEquals(false, namedType0.isStringValueType());
      assertEquals(false, namedType0.isNumberValueType());
      assertEquals(BooleanLiteralSet.TRUE, namedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, namedType0.isUnionType());
      assertEquals(false, namedType0.isBooleanValueType());
      assertEquals(false, namedType0.isNativeObjectType());
      assertEquals(false, namedType0.hasCachedValues());
      assertEquals(false, namedType0.isTemplateType());
      assertEquals(false, namedType0.isVoidType());
      assertEquals(false, namedType0.isFunctionType());
      assertEquals(false, namedType0.isNoObjectType());
      
      boolean boolean1 = namedType0.hasReferenceName();
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, namedType0.isNoType());
      assertEquals(false, namedType0.isResolved());
      assertEquals(false, namedType0.isRecordType());
      assertEquals(false, namedType0.isNullType());
      assertEquals(false, namedType0.isAllType());
      assertEquals(false, namedType0.isEmptyType());
      assertEquals(false, namedType0.isStringValueType());
      assertEquals(false, namedType0.isNumberValueType());
      assertEquals(BooleanLiteralSet.TRUE, namedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, namedType0.isUnionType());
      assertEquals(false, namedType0.isBooleanValueType());
      assertEquals(false, namedType0.isNativeObjectType());
      assertEquals(false, namedType0.hasCachedValues());
      assertEquals(false, namedType0.isTemplateType());
      assertEquals(false, namedType0.isVoidType());
      assertEquals(false, namedType0.isFunctionType());
      assertEquals(false, namedType0.isNoObjectType());
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean0 == boolean1);
      assertTrue(boolean1);
  }

  @Test
  public void test11()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      String string0 = "";
      int int0 = 4;
      NamedType namedType0 = new NamedType(jSTypeRegistry0, string0, string0, int0, int0);
      assertNotNull(namedType0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, namedType0.isTemplateType());
      assertEquals(false, namedType0.isFunctionType());
      assertEquals(false, namedType0.isEmptyType());
      assertEquals(false, namedType0.isAllType());
      assertEquals(false, namedType0.isNativeObjectType());
      assertEquals(false, namedType0.isVoidType());
      assertEquals(false, namedType0.isNullType());
      assertEquals(false, namedType0.isUnionType());
      assertEquals(BooleanLiteralSet.TRUE, namedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, namedType0.isNoObjectType());
      assertEquals(false, namedType0.hasCachedValues());
      assertEquals(false, namedType0.isNoType());
      assertEquals(false, namedType0.isNumberValueType());
      assertEquals(false, namedType0.isStringValueType());
      assertEquals(false, namedType0.isRecordType());
      assertEquals(false, namedType0.isBooleanValueType());
      assertEquals(false, namedType0.isResolved());
      
      boolean boolean0 = namedType0.isNamedType();
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, namedType0.isTemplateType());
      assertEquals(false, namedType0.isFunctionType());
      assertEquals(false, namedType0.isEmptyType());
      assertEquals(false, namedType0.isAllType());
      assertEquals(false, namedType0.isNativeObjectType());
      assertEquals(false, namedType0.isVoidType());
      assertEquals(false, namedType0.isNullType());
      assertEquals(false, namedType0.isUnionType());
      assertEquals(BooleanLiteralSet.TRUE, namedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, namedType0.isNoObjectType());
      assertEquals(false, namedType0.hasCachedValues());
      assertEquals(false, namedType0.isNoType());
      assertEquals(false, namedType0.isNumberValueType());
      assertEquals(false, namedType0.isStringValueType());
      assertEquals(false, namedType0.isRecordType());
      assertEquals(false, namedType0.isBooleanValueType());
      assertEquals(false, namedType0.isResolved());
      assertTrue(boolean0);
      
      boolean boolean1 = namedType0.defineDeclaredProperty(string0, (JSType) namedType0, boolean0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, namedType0.isTemplateType());
      assertEquals(false, namedType0.isFunctionType());
      assertEquals(false, namedType0.isEmptyType());
      assertEquals(false, namedType0.isAllType());
      assertEquals(false, namedType0.isNativeObjectType());
      assertEquals(false, namedType0.isVoidType());
      assertEquals(false, namedType0.isNullType());
      assertEquals(false, namedType0.isUnionType());
      assertEquals(BooleanLiteralSet.TRUE, namedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, namedType0.isNoObjectType());
      assertEquals(false, namedType0.hasCachedValues());
      assertEquals(false, namedType0.isNoType());
      assertEquals(false, namedType0.isNumberValueType());
      assertEquals(false, namedType0.isStringValueType());
      assertEquals(false, namedType0.isRecordType());
      assertEquals(false, namedType0.isBooleanValueType());
      assertEquals(false, namedType0.isResolved());
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean0 == boolean1);
      assertTrue(boolean1);
  }

  @Test
  public void test12()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      String string0 = "";
      int int0 = 926;
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, string0);
      assertNotNull(errorFunctionType0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, errorFunctionType0.isNoObjectType());
      assertEquals(false, errorFunctionType0.isVoidType());
      assertEquals(true, errorFunctionType0.canBeCalled());
      assertEquals(false, errorFunctionType0.isTemplateType());
      assertEquals(false, errorFunctionType0.isInterface());
      assertEquals(false, errorFunctionType0.isEmptyType());
      assertEquals(true, errorFunctionType0.isConstructor());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertNull(errorFunctionType0.getTemplateTypeName());
      assertEquals(false, errorFunctionType0.isAllType());
      assertEquals(false, errorFunctionType0.isNoType());
      assertEquals(false, errorFunctionType0.isBooleanValueType());
      assertEquals(false, errorFunctionType0.isReturnTypeInferred());
      assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      assertEquals(false, errorFunctionType0.isResolved());
      assertEquals(true, errorFunctionType0.isFunctionType());
      assertEquals(false, errorFunctionType0.isNumberValueType());
      assertEquals(false, errorFunctionType0.hasCachedValues());
      assertEquals(3, errorFunctionType0.getMaxArguments());
      assertEquals(false, errorFunctionType0.isStringValueType());
      assertEquals(false, errorFunctionType0.isUnionType());
      assertEquals(false, errorFunctionType0.isNullType());
      assertEquals(false, errorFunctionType0.isRecordType());
      assertEquals(true, errorFunctionType0.hasInstanceType());
      
      ArrowType arrowType0 = errorFunctionType0.getInternalArrowType();
      assertNotNull(arrowType0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, errorFunctionType0.isNoObjectType());
      assertEquals(false, errorFunctionType0.isVoidType());
      assertEquals(true, errorFunctionType0.canBeCalled());
      assertEquals(false, errorFunctionType0.isTemplateType());
      assertEquals(false, errorFunctionType0.isInterface());
      assertEquals(false, errorFunctionType0.isEmptyType());
      assertEquals(true, errorFunctionType0.isConstructor());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertNull(errorFunctionType0.getTemplateTypeName());
      assertEquals(false, errorFunctionType0.isAllType());
      assertEquals(false, errorFunctionType0.isNoType());
      assertEquals(false, errorFunctionType0.isBooleanValueType());
      assertEquals(false, errorFunctionType0.isReturnTypeInferred());
      assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      assertEquals(false, errorFunctionType0.isResolved());
      assertEquals(true, errorFunctionType0.isFunctionType());
      assertEquals(false, errorFunctionType0.isNumberValueType());
      assertEquals(false, errorFunctionType0.hasCachedValues());
      assertEquals(3, errorFunctionType0.getMaxArguments());
      assertEquals(false, errorFunctionType0.isStringValueType());
      assertEquals(false, errorFunctionType0.isUnionType());
      assertEquals(false, errorFunctionType0.isNullType());
      assertEquals(false, errorFunctionType0.isRecordType());
      assertEquals(true, errorFunctionType0.hasInstanceType());
      assertEquals(false, arrowType0.isEmptyType());
      assertEquals(false, arrowType0.isStringValueType());
      assertEquals(false, arrowType0.isVoidType());
      assertEquals(false, arrowType0.isNumberValueType());
      assertEquals(false, arrowType0.isFunctionType());
      assertEquals(false, arrowType0.isAllType());
      assertEquals(false, arrowType0.isTemplateType());
      assertEquals(false, arrowType0.isBooleanValueType());
      assertEquals(false, arrowType0.isRecordType());
      assertEquals(false, arrowType0.isNoObjectType());
      assertEquals(false, arrowType0.isUnionType());
      assertEquals(false, arrowType0.isNullType());
      assertEquals(false, arrowType0.isResolved());
      assertEquals(false, arrowType0.isNoType());
      
      EnumElementType enumElementType0 = new EnumElementType(jSTypeRegistry0, arrowType0, string0);
      assertNotNull(enumElementType0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, enumElementType0.isBooleanValueType());
      assertEquals(false, enumElementType0.isNativeObjectType());
      assertEquals(false, enumElementType0.isNoType());
      assertEquals(false, enumElementType0.isFunctionType());
      assertEquals(false, enumElementType0.isUnionType());
      assertEquals(false, enumElementType0.isTemplateType());
      assertEquals(false, enumElementType0.isRecordType());
      assertEquals(false, enumElementType0.isEmptyType());
      assertEquals(true, enumElementType0.isEnumElementType());
      assertEquals(false, enumElementType0.hasCachedValues());
      assertEquals("", enumElementType0.getReferenceName());
      assertEquals(false, enumElementType0.isNullType());
      assertEquals(false, enumElementType0.isVoidType());
      assertEquals(true, enumElementType0.hasReferenceName());
      assertEquals(false, enumElementType0.isAllType());
      assertEquals(false, enumElementType0.isNumberValueType());
      assertEquals(false, enumElementType0.isResolved());
      assertEquals(true, enumElementType0.isNominalType());
      assertEquals(false, enumElementType0.isStringValueType());
      assertEquals(false, enumElementType0.isNoObjectType());
      assertEquals(BooleanLiteralSet.TRUE, enumElementType0.getPossibleToBooleanOutcomes());
      assertEquals(false, errorFunctionType0.isNoObjectType());
      assertEquals(false, errorFunctionType0.isVoidType());
      assertEquals(true, errorFunctionType0.canBeCalled());
      assertEquals(false, errorFunctionType0.isTemplateType());
      assertEquals(false, errorFunctionType0.isInterface());
      assertEquals(false, errorFunctionType0.isEmptyType());
      assertEquals(true, errorFunctionType0.isConstructor());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertNull(errorFunctionType0.getTemplateTypeName());
      assertEquals(false, errorFunctionType0.isAllType());
      assertEquals(false, errorFunctionType0.isNoType());
      assertEquals(false, errorFunctionType0.isBooleanValueType());
      assertEquals(false, errorFunctionType0.isReturnTypeInferred());
      assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      assertEquals(false, errorFunctionType0.isResolved());
      assertEquals(true, errorFunctionType0.isFunctionType());
      assertEquals(false, errorFunctionType0.isNumberValueType());
      assertEquals(false, errorFunctionType0.hasCachedValues());
      assertEquals(3, errorFunctionType0.getMaxArguments());
      assertEquals(false, errorFunctionType0.isStringValueType());
      assertEquals(false, errorFunctionType0.isUnionType());
      assertEquals(false, errorFunctionType0.isNullType());
      assertEquals(false, errorFunctionType0.isRecordType());
      assertEquals(true, errorFunctionType0.hasInstanceType());
      assertEquals(false, arrowType0.isEmptyType());
      assertEquals(false, arrowType0.isStringValueType());
      assertEquals(false, arrowType0.isVoidType());
      assertEquals(false, arrowType0.isNumberValueType());
      assertEquals(false, arrowType0.isFunctionType());
      assertEquals(false, arrowType0.isAllType());
      assertEquals(false, arrowType0.isTemplateType());
      assertEquals(false, arrowType0.isBooleanValueType());
      assertEquals(false, arrowType0.isRecordType());
      assertEquals(false, arrowType0.isNoObjectType());
      assertEquals(false, arrowType0.isUnionType());
      assertEquals(false, arrowType0.isNullType());
      assertEquals(false, arrowType0.isResolved());
      assertEquals(false, arrowType0.isNoType());
      
      boolean boolean0 = jSTypeRegistry0.declareType(string0, (JSType) enumElementType0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, enumElementType0.isBooleanValueType());
      assertEquals(false, enumElementType0.isNativeObjectType());
      assertEquals(false, enumElementType0.isNoType());
      assertEquals(false, enumElementType0.isFunctionType());
      assertEquals(false, enumElementType0.isUnionType());
      assertEquals(false, enumElementType0.isTemplateType());
      assertEquals(false, enumElementType0.isRecordType());
      assertEquals(false, enumElementType0.isEmptyType());
      assertEquals(true, enumElementType0.isEnumElementType());
      assertEquals(false, enumElementType0.hasCachedValues());
      assertEquals("", enumElementType0.getReferenceName());
      assertEquals(false, enumElementType0.isNullType());
      assertEquals(false, enumElementType0.isVoidType());
      assertEquals(true, enumElementType0.hasReferenceName());
      assertEquals(false, enumElementType0.isAllType());
      assertEquals(false, enumElementType0.isNumberValueType());
      assertEquals(false, enumElementType0.isResolved());
      assertEquals(true, enumElementType0.isNominalType());
      assertEquals(false, enumElementType0.isStringValueType());
      assertEquals(false, enumElementType0.isNoObjectType());
      assertEquals(BooleanLiteralSet.TRUE, enumElementType0.getPossibleToBooleanOutcomes());
      assertEquals(false, errorFunctionType0.isNoObjectType());
      assertEquals(false, errorFunctionType0.isVoidType());
      assertEquals(true, errorFunctionType0.canBeCalled());
      assertEquals(false, errorFunctionType0.isTemplateType());
      assertEquals(false, errorFunctionType0.isInterface());
      assertEquals(false, errorFunctionType0.isEmptyType());
      assertEquals(true, errorFunctionType0.isConstructor());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertNull(errorFunctionType0.getTemplateTypeName());
      assertEquals(false, errorFunctionType0.isAllType());
      assertEquals(false, errorFunctionType0.isNoType());
      assertEquals(false, errorFunctionType0.isBooleanValueType());
      assertEquals(false, errorFunctionType0.isReturnTypeInferred());
      assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      assertEquals(false, errorFunctionType0.isResolved());
      assertEquals(true, errorFunctionType0.isFunctionType());
      assertEquals(false, errorFunctionType0.isNumberValueType());
      assertEquals(false, errorFunctionType0.hasCachedValues());
      assertEquals(3, errorFunctionType0.getMaxArguments());
      assertEquals(false, errorFunctionType0.isStringValueType());
      assertEquals(false, errorFunctionType0.isUnionType());
      assertEquals(false, errorFunctionType0.isNullType());
      assertEquals(false, errorFunctionType0.isRecordType());
      assertEquals(true, errorFunctionType0.hasInstanceType());
      assertEquals(false, arrowType0.isEmptyType());
      assertEquals(false, arrowType0.isStringValueType());
      assertEquals(false, arrowType0.isVoidType());
      assertEquals(false, arrowType0.isNumberValueType());
      assertEquals(false, arrowType0.isFunctionType());
      assertEquals(false, arrowType0.isAllType());
      assertEquals(false, arrowType0.isTemplateType());
      assertEquals(false, arrowType0.isBooleanValueType());
      assertEquals(false, arrowType0.isRecordType());
      assertEquals(false, arrowType0.isNoObjectType());
      assertEquals(false, arrowType0.isUnionType());
      assertEquals(false, arrowType0.isNullType());
      assertEquals(false, arrowType0.isResolved());
      assertEquals(false, arrowType0.isNoType());
      assertTrue(boolean0);
      
      NamedType namedType0 = new NamedType(jSTypeRegistry0, string0, string0, int0, int0);
      assertNotNull(namedType0);
      assertEquals(BooleanLiteralSet.TRUE, namedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, namedType0.isVoidType());
      assertEquals(false, namedType0.isTemplateType());
      assertEquals(false, namedType0.isAllType());
      assertEquals(false, namedType0.isEmptyType());
      assertEquals(false, namedType0.isBooleanValueType());
      assertEquals(false, namedType0.isResolved());
      assertEquals(false, namedType0.isStringValueType());
      assertEquals(false, namedType0.isFunctionType());
      assertEquals(false, namedType0.isNoType());
      assertEquals(false, namedType0.isNativeObjectType());
      assertEquals(false, namedType0.isNoObjectType());
      assertEquals(false, namedType0.isUnionType());
      assertEquals(false, namedType0.isNumberValueType());
      assertEquals(false, namedType0.isNullType());
      assertEquals(false, namedType0.hasCachedValues());
      assertEquals(false, namedType0.isRecordType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      EmptyScope emptyScope0 = new EmptyScope();
      assertNotNull(emptyScope0);
      
      EnumElementType enumElementType1 = (EnumElementType)namedType0.forceResolve((ErrorReporter) simpleErrorReporter0, (StaticScope<JSType>) emptyScope0);
      assertNotNull(enumElementType1);
      assertEquals(BooleanLiteralSet.TRUE, namedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, namedType0.isVoidType());
      assertEquals(false, namedType0.isTemplateType());
      assertEquals(false, namedType0.isAllType());
      assertEquals(false, namedType0.isEmptyType());
      assertEquals(false, namedType0.isBooleanValueType());
      assertEquals(false, namedType0.isStringValueType());
      assertEquals(false, namedType0.isFunctionType());
      assertEquals(false, namedType0.isNoType());
      assertEquals(true, namedType0.isResolved());
      assertEquals(false, namedType0.isNativeObjectType());
      assertEquals(false, namedType0.isNoObjectType());
      assertEquals(false, namedType0.isUnionType());
      assertEquals(false, namedType0.isNumberValueType());
      assertEquals(false, namedType0.isNullType());
      assertEquals(false, namedType0.hasCachedValues());
      assertEquals(false, namedType0.isRecordType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(true, enumElementType1.hasReferenceName());
      assertEquals(false, enumElementType1.hasCachedValues());
      assertEquals(false, enumElementType1.isStringValueType());
      assertEquals(false, enumElementType1.isNoType());
      assertEquals(false, enumElementType1.isFunctionType());
      assertEquals(false, enumElementType1.isNullType());
      assertEquals(false, enumElementType1.isUnionType());
      assertEquals(false, enumElementType1.isNumberValueType());
      assertEquals(false, enumElementType1.isTemplateType());
      assertEquals(false, enumElementType1.isRecordType());
      assertEquals(true, enumElementType1.isResolved());
      assertEquals(false, enumElementType1.isNativeObjectType());
      assertEquals(true, enumElementType1.isEnumElementType());
      assertEquals(BooleanLiteralSet.TRUE, enumElementType1.getPossibleToBooleanOutcomes());
      assertEquals(false, enumElementType1.isVoidType());
      assertEquals(false, enumElementType1.isBooleanValueType());
      assertEquals(false, enumElementType1.isAllType());
      assertEquals("", enumElementType1.getReferenceName());
      assertEquals(false, enumElementType1.isNoObjectType());
      assertEquals(false, enumElementType1.isEmptyType());
      assertEquals(true, enumElementType1.isNominalType());
      assertSame(enumElementType1, enumElementType0);
  }

  @Test
  public void test13()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      String string0 = "";
      int int0 = 926;
      NamedType namedType0 = new NamedType(jSTypeRegistry0, string0, string0, int0, int0);
      assertNotNull(namedType0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, namedType0.isUnionType());
      assertEquals(false, namedType0.isVoidType());
      assertEquals(false, namedType0.isNoObjectType());
      assertEquals(BooleanLiteralSet.TRUE, namedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, namedType0.isNumberValueType());
      assertEquals(false, namedType0.isTemplateType());
      assertEquals(false, namedType0.hasCachedValues());
      assertEquals(false, namedType0.isFunctionType());
      assertEquals(false, namedType0.isRecordType());
      assertEquals(false, namedType0.isNoType());
      assertEquals(false, namedType0.isNullType());
      assertEquals(false, namedType0.isStringValueType());
      assertEquals(false, namedType0.isNativeObjectType());
      assertEquals(false, namedType0.isEmptyType());
      assertEquals(false, namedType0.isBooleanValueType());
      assertEquals(false, namedType0.isAllType());
      assertEquals(false, namedType0.isResolved());
      
      NamedType namedType1 = new NamedType(jSTypeRegistry0, string0, string0, int0, int0);
      assertNotNull(namedType1);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, namedType1.isUnionType());
      assertEquals(false, namedType1.isAllType());
      assertEquals(false, namedType1.hasCachedValues());
      assertEquals(false, namedType1.isTemplateType());
      assertEquals(false, namedType1.isResolved());
      assertEquals(false, namedType1.isVoidType());
      assertEquals(false, namedType1.isNullType());
      assertEquals(BooleanLiteralSet.TRUE, namedType1.getPossibleToBooleanOutcomes());
      assertEquals(false, namedType1.isNativeObjectType());
      assertEquals(false, namedType1.isNumberValueType());
      assertEquals(false, namedType1.isFunctionType());
      assertEquals(false, namedType1.isRecordType());
      assertEquals(false, namedType1.isStringValueType());
      assertEquals(false, namedType1.isNoType());
      assertEquals(false, namedType1.isNoObjectType());
      assertEquals(false, namedType1.isBooleanValueType());
      assertEquals(false, namedType1.isEmptyType());
      assertTrue(namedType1.equals((Object)namedType0));
      assertNotSame(namedType1, namedType0);
      
      boolean boolean0 = namedType0.isEquivalentTo((JSType) namedType1);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, namedType0.isUnionType());
      assertEquals(false, namedType0.isVoidType());
      assertEquals(false, namedType0.isNoObjectType());
      assertEquals(BooleanLiteralSet.TRUE, namedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, namedType0.isNumberValueType());
      assertEquals(false, namedType0.isTemplateType());
      assertEquals(false, namedType0.hasCachedValues());
      assertEquals(false, namedType0.isFunctionType());
      assertEquals(false, namedType0.isRecordType());
      assertEquals(false, namedType0.isNoType());
      assertEquals(false, namedType0.isNullType());
      assertEquals(false, namedType0.isStringValueType());
      assertEquals(false, namedType0.isNativeObjectType());
      assertEquals(false, namedType0.isEmptyType());
      assertEquals(false, namedType0.isBooleanValueType());
      assertEquals(false, namedType0.isAllType());
      assertEquals(false, namedType0.isResolved());
      assertEquals(false, namedType1.isUnionType());
      assertEquals(false, namedType1.isAllType());
      assertEquals(false, namedType1.hasCachedValues());
      assertEquals(false, namedType1.isTemplateType());
      assertEquals(false, namedType1.isResolved());
      assertEquals(false, namedType1.isVoidType());
      assertEquals(false, namedType1.isNullType());
      assertEquals(BooleanLiteralSet.TRUE, namedType1.getPossibleToBooleanOutcomes());
      assertEquals(false, namedType1.isNativeObjectType());
      assertEquals(false, namedType1.isNumberValueType());
      assertEquals(false, namedType1.isFunctionType());
      assertEquals(false, namedType1.isRecordType());
      assertEquals(false, namedType1.isStringValueType());
      assertEquals(false, namedType1.isNoType());
      assertEquals(false, namedType1.isNoObjectType());
      assertEquals(false, namedType1.isBooleanValueType());
      assertEquals(false, namedType1.isEmptyType());
      assertTrue(namedType0.equals((Object)namedType1));
      assertTrue(namedType1.equals((Object)namedType0));
      assertTrue(boolean0);
      assertNotSame(namedType0, namedType1);
      assertNotSame(namedType1, namedType0);
  }
}
