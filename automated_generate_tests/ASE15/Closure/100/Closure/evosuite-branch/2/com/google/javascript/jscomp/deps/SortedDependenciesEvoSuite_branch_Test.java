/*
 * This file was automatically generated by EvoSuite
 * Fri Dec 12 02:08:02 GMT 2014
 */

package com.google.javascript.jscomp.deps;

import static org.junit.Assert.*; import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.junit.Test;
import com.google.javascript.jscomp.deps.SimpleDependencyInfo;
import com.google.javascript.jscomp.deps.SortedDependencies;
import java.util.ArrayList;
import java.util.List;
import java.util.Vector;



import org.junit.runner.RunWith;


public class SortedDependenciesEvoSuite_branch_Test  {

  @Test
  public void test0()  throws Throwable  {
      ArrayList<SimpleDependencyInfo> arrayList0 = new ArrayList<SimpleDependencyInfo>();
      assertEquals(true, arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertEquals("[]", arrayList0.toString());
      assertNotNull(arrayList0);
      
      String string0 = "eI";
      Vector<String> vector0 = new Vector<String>();
      assertEquals(true, vector0.isEmpty());
      assertEquals(0, vector0.size());
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertNotNull(vector0);
      
      SimpleDependencyInfo simpleDependencyInfo0 = new SimpleDependencyInfo(string0, string0, (List<String>) vector0, (List<String>) vector0);
      assertEquals(true, vector0.isEmpty());
      assertEquals(0, vector0.size());
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertEquals("eI", simpleDependencyInfo0.getPathRelativeToClosureBase());
      assertEquals("eI", simpleDependencyInfo0.getName());
      assertNotNull(simpleDependencyInfo0);
      
      boolean boolean0 = arrayList0.add(simpleDependencyInfo0);
      assertEquals(false, arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertEquals("[DependencyInfo(relativePath='eI', path='eI', provides=[], requires=[])]", arrayList0.toString());
      assertEquals(true, vector0.isEmpty());
      assertEquals(0, vector0.size());
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertEquals("eI", simpleDependencyInfo0.getPathRelativeToClosureBase());
      assertEquals("eI", simpleDependencyInfo0.getName());
      assertTrue(boolean0);
      
      SortedDependencies<SimpleDependencyInfo> sortedDependencies0 = new SortedDependencies<SimpleDependencyInfo>((List<SimpleDependencyInfo>) arrayList0);
      assertEquals(false, arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertEquals("[DependencyInfo(relativePath='eI', path='eI', provides=[], requires=[])]", arrayList0.toString());
      assertNotNull(sortedDependencies0);
      
      ArrayList<SimpleDependencyInfo> arrayList1 = new ArrayList<SimpleDependencyInfo>();
      assertFalse(arrayList1.equals((Object)arrayList0));
      assertEquals(true, arrayList1.isEmpty());
      assertEquals("[]", arrayList1.toString());
      assertEquals(0, arrayList1.size());
      assertNotSame(arrayList1, arrayList0);
      assertNotNull(arrayList1);
      
      List<SimpleDependencyInfo> list0 = sortedDependencies0.getSortedDependenciesOf((List<SimpleDependencyInfo>) arrayList1);
      assertFalse(arrayList0.equals((Object)arrayList1));
      assertFalse(arrayList1.equals((Object)arrayList0));
      assertEquals(false, arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertEquals("[DependencyInfo(relativePath='eI', path='eI', provides=[], requires=[])]", arrayList0.toString());
      assertEquals(true, arrayList1.isEmpty());
      assertEquals("[]", arrayList1.toString());
      assertEquals(0, arrayList1.size());
      assertEquals(true, list0.isEmpty());
      assertEquals(0, list0.size());
      assertNotSame(arrayList0, arrayList1);
      assertNotSame(arrayList1, arrayList0);
      assertNotNull(list0);
  }

  @Test
  public void test1()  throws Throwable  {
      ArrayList<SimpleDependencyInfo> arrayList0 = new ArrayList<SimpleDependencyInfo>();
      assertEquals("[]", arrayList0.toString());
      assertEquals(true, arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      
      String string0 = "G-l/";
      Vector<String> vector0 = new Vector<String>();
      assertEquals(0, vector0.size());
      assertEquals("[]", vector0.toString());
      assertEquals(true, vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertNotNull(vector0);
      
      SimpleDependencyInfo simpleDependencyInfo0 = new SimpleDependencyInfo(string0, string0, (List<String>) vector0, (List<String>) vector0);
      assertEquals(0, vector0.size());
      assertEquals("[]", vector0.toString());
      assertEquals(true, vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertEquals("G-l/", simpleDependencyInfo0.getPathRelativeToClosureBase());
      assertEquals("G-l/", simpleDependencyInfo0.getName());
      assertNotNull(simpleDependencyInfo0);
      
      boolean boolean0 = arrayList0.add(simpleDependencyInfo0);
      assertEquals(0, vector0.size());
      assertEquals("[]", vector0.toString());
      assertEquals(true, vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertEquals("[DependencyInfo(relativePath='G-l/', path='G-l/', provides=[], requires=[])]", arrayList0.toString());
      assertEquals(false, arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertEquals("G-l/", simpleDependencyInfo0.getPathRelativeToClosureBase());
      assertEquals("G-l/", simpleDependencyInfo0.getName());
      assertTrue(boolean0);
      
      SortedDependencies<SimpleDependencyInfo> sortedDependencies0 = new SortedDependencies<SimpleDependencyInfo>((List<SimpleDependencyInfo>) arrayList0);
      assertEquals("[DependencyInfo(relativePath='G-l/', path='G-l/', provides=[], requires=[])]", arrayList0.toString());
      assertEquals(false, arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertNotNull(sortedDependencies0);
      
      boolean boolean1 = vector0.add(string0);
      assertTrue(boolean1 == boolean0);
      assertEquals(1, vector0.size());
      assertEquals("[G-l/]", vector0.toString());
      assertEquals(false, vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertTrue(boolean1);
      
      List<SimpleDependencyInfo> list0 = sortedDependencies0.getSortedDependenciesOf((List<SimpleDependencyInfo>) arrayList0);
      assertEquals(1, list0.size());
      assertEquals(false, list0.isEmpty());
      assertEquals("[DependencyInfo(relativePath='G-l/', path='G-l/', provides=[G-l/], requires=[G-l/])]", arrayList0.toString());
      assertEquals(false, arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertNotNull(list0);
  }

  @Test
  public void test2()  throws Throwable  {
      ArrayList<SimpleDependencyInfo> arrayList0 = new ArrayList<SimpleDependencyInfo>();
      assertEquals(true, arrayList0.isEmpty());
      assertEquals("[]", arrayList0.toString());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      
      String string0 = "eI";
      Vector<String> vector0 = new Vector<String>();
      assertEquals(0, vector0.size());
      assertEquals("[]", vector0.toString());
      assertEquals(true, vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertNotNull(vector0);
      
      SimpleDependencyInfo simpleDependencyInfo0 = new SimpleDependencyInfo(string0, string0, (List<String>) vector0, (List<String>) vector0);
      assertEquals(0, vector0.size());
      assertEquals("[]", vector0.toString());
      assertEquals(true, vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertEquals("eI", simpleDependencyInfo0.getPathRelativeToClosureBase());
      assertEquals("eI", simpleDependencyInfo0.getName());
      assertNotNull(simpleDependencyInfo0);
      
      boolean boolean0 = arrayList0.add(simpleDependencyInfo0);
      assertEquals(0, vector0.size());
      assertEquals("[]", vector0.toString());
      assertEquals(true, vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertEquals("eI", simpleDependencyInfo0.getPathRelativeToClosureBase());
      assertEquals("eI", simpleDependencyInfo0.getName());
      assertEquals("[DependencyInfo(relativePath='eI', path='eI', provides=[], requires=[])]", arrayList0.toString());
      assertEquals(false, arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertTrue(boolean0);
      
      boolean boolean1 = arrayList0.add(simpleDependencyInfo0);
      assertTrue(boolean1 == boolean0);
      assertEquals(0, vector0.size());
      assertEquals("[]", vector0.toString());
      assertEquals(true, vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertEquals("eI", simpleDependencyInfo0.getPathRelativeToClosureBase());
      assertEquals("eI", simpleDependencyInfo0.getName());
      assertEquals(false, arrayList0.isEmpty());
      assertEquals("[DependencyInfo(relativePath='eI', path='eI', provides=[], requires=[]), DependencyInfo(relativePath='eI', path='eI', provides=[], requires=[])]", arrayList0.toString());
      assertEquals(2, arrayList0.size());
      assertTrue(boolean1);
      
      SortedDependencies<SimpleDependencyInfo> sortedDependencies0 = new SortedDependencies<SimpleDependencyInfo>((List<SimpleDependencyInfo>) arrayList0);
      assertEquals(false, arrayList0.isEmpty());
      assertEquals("[DependencyInfo(relativePath='eI', path='eI', provides=[], requires=[]), DependencyInfo(relativePath='eI', path='eI', provides=[], requires=[])]", arrayList0.toString());
      assertEquals(2, arrayList0.size());
      assertNotNull(sortedDependencies0);
      
      List<SimpleDependencyInfo> list0 = sortedDependencies0.getSortedDependenciesOf((List<SimpleDependencyInfo>) arrayList0);
      assertEquals(2, list0.size());
      assertEquals(false, list0.isEmpty());
      assertEquals(false, arrayList0.isEmpty());
      assertEquals("[DependencyInfo(relativePath='eI', path='eI', provides=[], requires=[]), DependencyInfo(relativePath='eI', path='eI', provides=[], requires=[])]", arrayList0.toString());
      assertEquals(2, arrayList0.size());
      assertNotNull(list0);
  }

  @Test
  public void test3()  throws Throwable  {
      ArrayList<SimpleDependencyInfo> arrayList0 = new ArrayList<SimpleDependencyInfo>();
      assertEquals(0, arrayList0.size());
      assertEquals(true, arrayList0.isEmpty());
      assertEquals("[]", arrayList0.toString());
      assertNotNull(arrayList0);
      
      String string0 = "G-l/";
      Vector<String> vector0 = new Vector<String>();
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertEquals(true, vector0.isEmpty());
      assertEquals(0, vector0.size());
      assertNotNull(vector0);
      
      SimpleDependencyInfo simpleDependencyInfo0 = new SimpleDependencyInfo(string0, string0, (List<String>) vector0, (List<String>) vector0);
      assertEquals("G-l/", simpleDependencyInfo0.getName());
      assertEquals("G-l/", simpleDependencyInfo0.getPathRelativeToClosureBase());
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertEquals(true, vector0.isEmpty());
      assertEquals(0, vector0.size());
      assertNotNull(simpleDependencyInfo0);
      
      boolean boolean0 = arrayList0.add(simpleDependencyInfo0);
      assertEquals("G-l/", simpleDependencyInfo0.getName());
      assertEquals("G-l/", simpleDependencyInfo0.getPathRelativeToClosureBase());
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertEquals(true, vector0.isEmpty());
      assertEquals(0, vector0.size());
      assertEquals(false, arrayList0.isEmpty());
      assertEquals("[DependencyInfo(relativePath='G-l/', path='G-l/', provides=[], requires=[])]", arrayList0.toString());
      assertEquals(1, arrayList0.size());
      assertTrue(boolean0);
      
      SortedDependencies<SimpleDependencyInfo> sortedDependencies0 = new SortedDependencies<SimpleDependencyInfo>((List<SimpleDependencyInfo>) arrayList0);
      assertEquals(false, arrayList0.isEmpty());
      assertEquals("[DependencyInfo(relativePath='G-l/', path='G-l/', provides=[], requires=[])]", arrayList0.toString());
      assertEquals(1, arrayList0.size());
      assertNotNull(sortedDependencies0);
      
      List<SimpleDependencyInfo> list0 = sortedDependencies0.getSortedList();
      assertEquals(1, list0.size());
      assertEquals(false, list0.isEmpty());
      assertEquals(false, arrayList0.isEmpty());
      assertEquals("[DependencyInfo(relativePath='G-l/', path='G-l/', provides=[], requires=[])]", arrayList0.toString());
      assertEquals(1, arrayList0.size());
      assertNotNull(list0);
  }

  @Test
  public void test4()  throws Throwable  {
      ArrayList<SimpleDependencyInfo> arrayList0 = new ArrayList<SimpleDependencyInfo>();
      assertEquals("[]", arrayList0.toString());
      assertEquals(true, arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      
      String string0 = "eI";
      Vector<String> vector0 = new Vector<String>();
      assertEquals(true, vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertEquals("[]", vector0.toString());
      assertNotNull(vector0);
      
      SimpleDependencyInfo simpleDependencyInfo0 = new SimpleDependencyInfo(string0, string0, (List<String>) vector0, (List<String>) vector0);
      assertEquals("eI", simpleDependencyInfo0.getName());
      assertEquals("eI", simpleDependencyInfo0.getPathRelativeToClosureBase());
      assertEquals(true, vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertEquals("[]", vector0.toString());
      assertNotNull(simpleDependencyInfo0);
      
      boolean boolean0 = arrayList0.add(simpleDependencyInfo0);
      assertEquals("[DependencyInfo(relativePath='eI', path='eI', provides=[], requires=[])]", arrayList0.toString());
      assertEquals(false, arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertEquals("eI", simpleDependencyInfo0.getName());
      assertEquals("eI", simpleDependencyInfo0.getPathRelativeToClosureBase());
      assertEquals(true, vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertEquals("[]", vector0.toString());
      assertTrue(boolean0);
      
      SortedDependencies<SimpleDependencyInfo> sortedDependencies0 = new SortedDependencies<SimpleDependencyInfo>((List<SimpleDependencyInfo>) arrayList0);
      assertEquals("[DependencyInfo(relativePath='eI', path='eI', provides=[], requires=[])]", arrayList0.toString());
      assertEquals(false, arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertNotNull(sortedDependencies0);
      
      List<SimpleDependencyInfo> list0 = sortedDependencies0.getInputsWithoutProvides();
      assertEquals("[DependencyInfo(relativePath='eI', path='eI', provides=[], requires=[])]", arrayList0.toString());
      assertEquals(false, arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertEquals(false, list0.isEmpty());
      assertEquals(1, list0.size());
      assertNotNull(list0);
  }

  @Test
  public void test5()  throws Throwable  {
      ArrayList<SimpleDependencyInfo> arrayList0 = new ArrayList<SimpleDependencyInfo>();
      assertEquals(true, arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertEquals("[]", arrayList0.toString());
      assertNotNull(arrayList0);
      
      String string0 = " ->";
      Vector<String> vector0 = new Vector<String>();
      assertEquals(0, vector0.size());
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertEquals(true, vector0.isEmpty());
      assertNotNull(vector0);
      
      SimpleDependencyInfo simpleDependencyInfo0 = new SimpleDependencyInfo(string0, string0, (List<String>) vector0, (List<String>) vector0);
      assertEquals(0, vector0.size());
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertEquals(true, vector0.isEmpty());
      assertEquals(" ->", simpleDependencyInfo0.getPathRelativeToClosureBase());
      assertEquals(" ->", simpleDependencyInfo0.getName());
      assertNotNull(simpleDependencyInfo0);
      
      boolean boolean0 = vector0.add(string0);
      assertEquals(10, vector0.capacity());
      assertEquals("[ ->]", vector0.toString());
      assertEquals(1, vector0.size());
      assertEquals(false, vector0.isEmpty());
      assertTrue(boolean0);
      
      boolean boolean1 = arrayList0.add(simpleDependencyInfo0);
      assertTrue(boolean1 == boolean0);
      assertEquals(10, vector0.capacity());
      assertEquals("[ ->]", vector0.toString());
      assertEquals(1, vector0.size());
      assertEquals(false, vector0.isEmpty());
      assertEquals(false, arrayList0.isEmpty());
      assertEquals("[DependencyInfo(relativePath=' ->', path=' ->', provides=[ ->], requires=[ ->])]", arrayList0.toString());
      assertEquals(1, arrayList0.size());
      assertEquals(" ->", simpleDependencyInfo0.getPathRelativeToClosureBase());
      assertEquals(" ->", simpleDependencyInfo0.getName());
      assertTrue(boolean1);
      
      SortedDependencies<SimpleDependencyInfo> sortedDependencies0 = null;
      try {
        sortedDependencies0 = new SortedDependencies<SimpleDependencyInfo>((List<SimpleDependencyInfo>) arrayList0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         //  -> ->  ->
         //
      }
  }
}
