/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 20:58:14 GMT 2014
 */

package com.google.javascript.jscomp;

import static org.junit.Assert.*; import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.junit.Test;
import com.google.javascript.jscomp.CompilerInput;
import com.google.javascript.jscomp.FlowScope;
import com.google.javascript.jscomp.LinkedFlowScope;
import com.google.javascript.jscomp.Scope;
import com.google.javascript.rhino.Node;
import com.google.javascript.rhino.jstype.JSType;
import com.google.javascript.rhino.jstype.ObjectType;
import com.google.javascript.rhino.jstype.StaticScope;
import com.google.javascript.rhino.jstype.StaticSlot;



import org.evosuite.runtime.mock.java.lang.MockIllegalStateException;
import org.junit.runner.RunWith;


public class LinkedFlowScopeEvoSuite_branch_Test  {

  @Test
  public void test00()  throws Throwable  {
      Scope scope0 = null;
      LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope0);
      assertNotNull(linkedFlowScope0);
      
      LinkedFlowScope linkedFlowScope1 = new LinkedFlowScope(linkedFlowScope0);
      assertTrue(linkedFlowScope1.equals((Object)linkedFlowScope0));
      assertTrue(linkedFlowScope0.equals((Object)linkedFlowScope1));
      assertNotSame(linkedFlowScope1, linkedFlowScope0);
      assertNotSame(linkedFlowScope0, linkedFlowScope1);
      assertNotNull(linkedFlowScope1);
      
      String string0 = "\"^";
      JSType jSType0 = null;
      linkedFlowScope1.inferSlotType(string0, jSType0);
      linkedFlowScope0.inferSlotType(string0, jSType0);
      assertTrue(linkedFlowScope0.equals((Object)linkedFlowScope1));
      assertNotSame(linkedFlowScope0, linkedFlowScope1);
      
      boolean boolean0 = linkedFlowScope1.equals((Object) linkedFlowScope0);
      assertTrue(linkedFlowScope1.equals((Object)linkedFlowScope0));
      assertTrue(linkedFlowScope0.equals((Object)linkedFlowScope1));
      assertNotSame(linkedFlowScope1, linkedFlowScope0);
      assertNotSame(linkedFlowScope0, linkedFlowScope1);
      assertTrue(boolean0);
  }

  @Test
  public void test01()  throws Throwable  {
      Scope scope0 = null;
      LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope0);
      assertNotNull(linkedFlowScope0);
      
      LinkedFlowScope linkedFlowScope1 = LinkedFlowScope.createEntryLattice(scope0);
      assertTrue(linkedFlowScope1.equals((Object)linkedFlowScope0));
      assertNotSame(linkedFlowScope1, linkedFlowScope0);
      assertNotNull(linkedFlowScope1);
      
      boolean boolean0 = linkedFlowScope0.equals((Object) linkedFlowScope1);
      assertTrue(linkedFlowScope1.equals((Object)linkedFlowScope0));
      assertTrue(linkedFlowScope0.equals((Object)linkedFlowScope1));
      assertNotSame(linkedFlowScope1, linkedFlowScope0);
      assertNotSame(linkedFlowScope0, linkedFlowScope1);
      assertTrue(boolean0);
  }

  @Test
  public void test02()  throws Throwable  {
      Scope scope0 = null;
      LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope0);
      assertNotNull(linkedFlowScope0);
      
      boolean boolean0 = linkedFlowScope0.equals((Object) scope0);
      assertFalse(boolean0);
  }

  @Test
  public void test03()  throws Throwable  {
      Scope scope0 = null;
      LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope0);
      assertNotNull(linkedFlowScope0);
      
      LinkedFlowScope linkedFlowScope1 = new LinkedFlowScope(linkedFlowScope0);
      assertTrue(linkedFlowScope1.equals((Object)linkedFlowScope0));
      assertTrue(linkedFlowScope0.equals((Object)linkedFlowScope1));
      assertNotSame(linkedFlowScope1, linkedFlowScope0);
      assertNotSame(linkedFlowScope0, linkedFlowScope1);
      assertNotNull(linkedFlowScope1);
      
      boolean boolean0 = linkedFlowScope0.equals((Object) linkedFlowScope1);
      assertTrue(linkedFlowScope1.equals((Object)linkedFlowScope0));
      assertTrue(linkedFlowScope0.equals((Object)linkedFlowScope1));
      assertNotSame(linkedFlowScope1, linkedFlowScope0);
      assertNotSame(linkedFlowScope0, linkedFlowScope1);
      assertTrue(boolean0);
  }

  @Test
  public void test04()  throws Throwable  {
      Scope scope0 = null;
      LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope0);
      assertNotNull(linkedFlowScope0);
      
      LinkedFlowScope linkedFlowScope1 = LinkedFlowScope.createEntryLattice(scope0);
      assertTrue(linkedFlowScope1.equals((Object)linkedFlowScope0));
      assertNotSame(linkedFlowScope1, linkedFlowScope0);
      assertNotNull(linkedFlowScope1);
      
      String string0 = "";
      JSType jSType0 = null;
      String string1 = "o";
      assertNotSame(string1, string0);
      
      linkedFlowScope1.inferSlotType(string1, jSType0);
      assertFalse(string1.equals((Object)string0));
      assertTrue(linkedFlowScope1.equals((Object)linkedFlowScope0));
      assertNotSame(string1, string0);
      assertNotSame(linkedFlowScope1, linkedFlowScope0);
      
      linkedFlowScope1.inferSlotType(string0, jSType0);
      assertTrue(linkedFlowScope1.equals((Object)linkedFlowScope0));
      assertFalse(string0.equals((Object)string1));
      assertNotSame(linkedFlowScope1, linkedFlowScope0);
      assertNotSame(string0, string1);
      
      StaticSlot<JSType> staticSlot0 = linkedFlowScope1.findUniqueRefinedSlot((FlowScope) linkedFlowScope0);
      assertTrue(linkedFlowScope0.equals((Object)linkedFlowScope1));
      assertTrue(linkedFlowScope1.equals((Object)linkedFlowScope0));
      assertNotSame(linkedFlowScope0, linkedFlowScope1);
      assertNotSame(linkedFlowScope1, linkedFlowScope0);
      assertNull(staticSlot0);
  }

  @Test
  public void test05()  throws Throwable  {
      Scope scope0 = null;
      LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope0);
      assertNotNull(linkedFlowScope0);
      
      String string0 = "{";
      JSType jSType0 = null;
      linkedFlowScope0.inferSlotType(string0, jSType0);
      linkedFlowScope0.inferSlotType(string0, jSType0);
      LinkedFlowScope linkedFlowScope1 = (LinkedFlowScope)linkedFlowScope0.createChildFlowScope();
      assertTrue(linkedFlowScope1.equals((Object)linkedFlowScope0));
      assertTrue(linkedFlowScope0.equals((Object)linkedFlowScope1));
      assertNotSame(linkedFlowScope1, linkedFlowScope0);
      assertNotSame(linkedFlowScope0, linkedFlowScope1);
      assertNotNull(linkedFlowScope1);
      
      // Undeclared exception!
      try {
        StaticSlot<JSType> staticSlot0 = linkedFlowScope0.findUniqueRefinedSlot((FlowScope) linkedFlowScope1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test06()  throws Throwable  {
      Scope scope0 = null;
      LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope0);
      assertNotNull(linkedFlowScope0);
      
      LinkedFlowScope linkedFlowScope1 = new LinkedFlowScope(linkedFlowScope0);
      assertTrue(linkedFlowScope0.equals((Object)linkedFlowScope1));
      assertTrue(linkedFlowScope1.equals((Object)linkedFlowScope0));
      assertNotSame(linkedFlowScope0, linkedFlowScope1);
      assertNotSame(linkedFlowScope1, linkedFlowScope0);
      assertNotNull(linkedFlowScope1);
      
      String string0 = "\"^";
      JSType jSType0 = null;
      linkedFlowScope1.inferSlotType(string0, jSType0);
      StaticSlot<JSType> staticSlot0 = linkedFlowScope1.findUniqueRefinedSlot((FlowScope) linkedFlowScope0);
      assertEquals("\"^", staticSlot0.getName());
      assertEquals(true, staticSlot0.isTypeInferred());
      assertNotNull(staticSlot0);
  }

  @Test
  public void test07()  throws Throwable  {
      Scope scope0 = null;
      LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope0);
      assertNotNull(linkedFlowScope0);
      
      LinkedFlowScope.FlowScopeJoinOp linkedFlowScope_FlowScopeJoinOp0 = new LinkedFlowScope.FlowScopeJoinOp();
      assertNotNull(linkedFlowScope_FlowScopeJoinOp0);
      
      LinkedFlowScope linkedFlowScope1 = (LinkedFlowScope)linkedFlowScope_FlowScopeJoinOp0.apply((FlowScope) linkedFlowScope0, (FlowScope) linkedFlowScope0);
      assertTrue(linkedFlowScope1.equals((Object)linkedFlowScope0));
      assertTrue(linkedFlowScope0.equals((Object)linkedFlowScope1));
      assertNotSame(linkedFlowScope1, linkedFlowScope0);
      assertNotSame(linkedFlowScope0, linkedFlowScope1);
      assertNotNull(linkedFlowScope1);
      
      // Undeclared exception!
      try {
        StaticSlot<JSType> staticSlot0 = linkedFlowScope0.findUniqueRefinedSlot((FlowScope) linkedFlowScope1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test08()  throws Throwable  {
      Scope scope0 = null;
      LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope0);
      assertNotNull(linkedFlowScope0);
      
      LinkedFlowScope linkedFlowScope1 = new LinkedFlowScope(linkedFlowScope0);
      assertTrue(linkedFlowScope0.equals((Object)linkedFlowScope1));
      assertTrue(linkedFlowScope1.equals((Object)linkedFlowScope0));
      assertNotSame(linkedFlowScope0, linkedFlowScope1);
      assertNotSame(linkedFlowScope1, linkedFlowScope0);
      assertNotNull(linkedFlowScope1);
      
      String string0 = "com.google.j1vascript.jscomp.LinkdFloXScope";
      JSType jSType0 = null;
      String string1 = "com.google.javascript.jscomp.mozilla.rhino.DefaultErrorReporter";
      assertNotSame(string1, string0);
      
      linkedFlowScope1.inferSlotType(string1, jSType0);
      assertFalse(string1.equals((Object)string0));
      assertNotSame(string1, string0);
      
      linkedFlowScope1.inferSlotType(string0, jSType0);
      assertFalse(string0.equals((Object)string1));
      assertNotSame(string0, string1);
      
      // Undeclared exception!
      try {
        boolean boolean0 = linkedFlowScope1.equals((Object) linkedFlowScope0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test09()  throws Throwable  {
      Node node0 = null;
      ObjectType objectType0 = null;
      Scope scope0 = new Scope(node0, objectType0);
      assertEquals(0, scope0.getVarCount());
      assertEquals(true, scope0.isGlobal());
      assertEquals(false, scope0.isLocal());
      assertNotNull(scope0);
      
      String string0 = "org.w3c.dom.Node";
      CompilerInput compilerInput0 = null;
      boolean boolean0 = true;
      Scope.Var scope_Var0 = scope0.declare(string0, node0, objectType0, compilerInput0, boolean0);
      assertEquals(true, scope0.isGlobal());
      assertEquals(1, scope0.getVarCount());
      assertEquals(false, scope0.isLocal());
      assertNotNull(scope_Var0);
      
      LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope0);
      assertEquals(true, scope0.isGlobal());
      assertEquals(1, scope0.getVarCount());
      assertEquals(false, scope0.isLocal());
      assertNotNull(linkedFlowScope0);
      
      linkedFlowScope0.completeScope(scope0);
      assertEquals(true, scope0.isGlobal());
      assertEquals(1, scope0.getVarCount());
      assertEquals(false, scope0.isLocal());
  }

  @Test
  public void test10()  throws Throwable  {
      Node node0 = null;
      ObjectType objectType0 = null;
      Scope scope0 = new Scope(node0, objectType0);
      assertEquals(true, scope0.isGlobal());
      assertEquals(false, scope0.isLocal());
      assertEquals(0, scope0.getVarCount());
      assertNotNull(scope0);
      
      String string0 = "org.w3c.dom.Node";
      LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope0);
      assertEquals(true, scope0.isGlobal());
      assertEquals(false, scope0.isLocal());
      assertEquals(0, scope0.getVarCount());
      assertNotNull(linkedFlowScope0);
      
      linkedFlowScope0.inferQualifiedSlot(string0, (JSType) objectType0, (JSType) objectType0);
      assertEquals(true, scope0.isGlobal());
      assertEquals(false, scope0.isLocal());
      assertEquals(0, scope0.getVarCount());
  }

  @Test
  public void test11()  throws Throwable  {
      Scope scope0 = null;
      LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope0);
      assertNotNull(linkedFlowScope0);
      
      String string0 = "";
      JSType jSType0 = null;
      LinkedFlowScope linkedFlowScope1 = (LinkedFlowScope)linkedFlowScope0.createChildFlowScope();
      assertTrue(linkedFlowScope0.equals((Object)linkedFlowScope1));
      assertTrue(linkedFlowScope1.equals((Object)linkedFlowScope0));
      assertNotSame(linkedFlowScope0, linkedFlowScope1);
      assertNotSame(linkedFlowScope1, linkedFlowScope0);
      assertNotNull(linkedFlowScope1);
      
      // Undeclared exception!
      try {
        linkedFlowScope0.inferSlotType(string0, jSType0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test12()  throws Throwable  {
      Node node0 = null;
      ObjectType objectType0 = null;
      Scope scope0 = new Scope(node0, objectType0);
      assertEquals(0, scope0.getVarCount());
      assertEquals(true, scope0.isGlobal());
      assertEquals(false, scope0.isLocal());
      assertNotNull(scope0);
      
      LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope0);
      assertEquals(0, scope0.getVarCount());
      assertEquals(true, scope0.isGlobal());
      assertEquals(false, scope0.isLocal());
      assertNotNull(linkedFlowScope0);
      
      StaticScope<JSType> staticScope0 = linkedFlowScope0.getParentScope();
      assertEquals(0, scope0.getVarCount());
      assertEquals(true, scope0.isGlobal());
      assertEquals(false, scope0.isLocal());
      assertNull(staticScope0);
  }

  @Test
  public void test13()  throws Throwable  {
      Scope scope0 = null;
      LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope0);
      assertNotNull(linkedFlowScope0);
      
      // Undeclared exception!
      try {
        JSType jSType0 = linkedFlowScope0.getTypeOfThis();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test14()  throws Throwable  {
      Scope scope0 = null;
      LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope0);
      assertNotNull(linkedFlowScope0);
      
      LinkedFlowScope linkedFlowScope1 = LinkedFlowScope.createEntryLattice(scope0);
      assertTrue(linkedFlowScope1.equals((Object)linkedFlowScope0));
      assertNotSame(linkedFlowScope1, linkedFlowScope0);
      assertNotNull(linkedFlowScope1);
      
      LinkedFlowScope.FlowScopeJoinOp linkedFlowScope_FlowScopeJoinOp0 = new LinkedFlowScope.FlowScopeJoinOp();
      assertNotNull(linkedFlowScope_FlowScopeJoinOp0);
      
      // Undeclared exception!
      try {
        FlowScope flowScope0 = linkedFlowScope_FlowScopeJoinOp0.apply((FlowScope) linkedFlowScope0, (FlowScope) linkedFlowScope1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test15()  throws Throwable  {
      Scope scope0 = null;
      LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope0);
      assertNotNull(linkedFlowScope0);
      
      String string0 = "EXPORT";
      // Undeclared exception!
      try {
        StaticSlot<JSType> staticSlot0 = linkedFlowScope0.getOwnSlot(string0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
}
