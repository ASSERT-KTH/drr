/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 20:36:24 GMT 2014
 */

package com.google.javascript.jscomp.parsing;

import static org.junit.Assert.*;
import org.junit.Test;
import com.google.javascript.jscomp.mozilla.rhino.ErrorReporter;
import com.google.javascript.jscomp.mozilla.rhino.ast.ErrorCollector;
import com.google.javascript.jscomp.mozilla.rhino.tools.ToolErrorReporter;
import com.google.javascript.jscomp.parsing.Config;
import com.google.javascript.jscomp.parsing.ParserRunner;
import com.google.javascript.rhino.Node;
import java.util.Locale;
import java.util.Set;
import java.util.logging.Logger;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;

import org.junit.runner.RunWith;


public class ParserRunnerEvoSuite_branch_Test  {

  @Test
  public void test0()  throws Throwable  {
      String string0 = "$Yx-ud)%x~@H>z`iZ~:";
      boolean boolean0 = false;
      Config config0 = ParserRunner.createConfig(boolean0);
      assertNotNull(config0);
      
      String string1 = "";
      assertNotSame(string1, string0);
      
      ErrorCollector errorCollector0 = new ErrorCollector();
      assertNotNull(errorCollector0);
      
      Logger logger0 = Logger.global;
      assertEquals("global", logger0.getName());
      assertEquals(true, logger0.getUseParentHandlers());
      assertNull(logger0.getResourceBundleName());
      assertNotNull(logger0);
      
      Node node0 = ParserRunner.parse(string0, string1, config0, (ErrorReporter) errorCollector0, logger0);
      assertEquals(false, node0.isQuotedString());
      assertEquals(0, node0.getCharno());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(0, node0.getChildCount());
      assertEquals(1, node0.getLineno());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(132, node0.getType());
      assertEquals(true, node0.isSyntheticBlock());
      assertEquals(false, node0.hasOneChild());
      assertEquals("global", logger0.getName());
      assertEquals(true, logger0.getUseParentHandlers());
      assertNull(logger0.getResourceBundleName());
      assertNotNull(node0);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
  }

  @Test
  public void test1()  throws Throwable  {
      String string0 = "Error parsing ";
      Locale locale0 = new Locale(string0, string0, string0);
      assertEquals("error parsing ", locale0.getLanguage());
      assertEquals("ERROR PARSING ", locale0.getCountry());
      assertEquals("Error parsing ", locale0.getVariant());
      assertEquals("error parsing _ERROR PARSING _Error parsing ", locale0.toString());
      assertNotNull(locale0);
      
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      assertEquals(true, set0.isEmpty());
      assertEquals(0, set0.size());
      assertEquals("error parsing ", locale0.getLanguage());
      assertEquals("ERROR PARSING ", locale0.getCountry());
      assertEquals("Error parsing ", locale0.getVariant());
      assertEquals("error parsing _ERROR PARSING _Error parsing ", locale0.toString());
      assertNotNull(set0);
      
      boolean boolean0 = false;
      Config config0 = new Config(set0, set0, boolean0);
      assertEquals(true, set0.isEmpty());
      assertEquals(0, set0.size());
      assertEquals("error parsing ", locale0.getLanguage());
      assertEquals("ERROR PARSING ", locale0.getCountry());
      assertEquals("Error parsing ", locale0.getVariant());
      assertEquals("error parsing _ERROR PARSING _Error parsing ", locale0.toString());
      assertNotNull(config0);
      
      ToolErrorReporter toolErrorReporter0 = new ToolErrorReporter(boolean0);
      assertEquals(false, toolErrorReporter0.hasReportedError());
      assertEquals(false, toolErrorReporter0.isReportingWarnings());
      assertNotNull(toolErrorReporter0);
      
      Logger logger0 = Logger.getLogger(string0);
      assertNull(logger0.getResourceBundleName());
      assertEquals(true, logger0.getUseParentHandlers());
      assertEquals("Error parsing ", logger0.getName());
      assertNotNull(logger0);
      
      Node node0 = ParserRunner.parse(string0, string0, config0, (ErrorReporter) toolErrorReporter0, logger0);
      assertNull(logger0.getResourceBundleName());
      assertEquals(true, logger0.getUseParentHandlers());
      assertEquals("Error parsing ", logger0.getName());
      assertEquals(true, set0.isEmpty());
      assertEquals(0, set0.size());
      assertEquals("error parsing ", locale0.getLanguage());
      assertEquals("ERROR PARSING ", locale0.getCountry());
      assertEquals("Error parsing ", locale0.getVariant());
      assertEquals("error parsing _ERROR PARSING _Error parsing ", locale0.toString());
      assertEquals(true, toolErrorReporter0.hasReportedError());
      assertEquals(false, toolErrorReporter0.isReportingWarnings());
      assertNull(node0);
  }

  @Test
  public void test2()  throws Throwable  {
      String string0 = "$Yx-ud)%x~@H>z`iZ~:";
      boolean boolean0 = true;
      Config config0 = ParserRunner.createConfig(boolean0);
      assertNotNull(config0);
      
      ErrorCollector errorCollector0 = new ErrorCollector();
      assertNotNull(errorCollector0);
      
      Logger logger0 = Logger.global;
      assertEquals(true, logger0.getUseParentHandlers());
      assertNull(logger0.getResourceBundleName());
      assertEquals("global", logger0.getName());
      assertNotNull(logger0);
      
      // Undeclared exception!
      try {
        Node node0 = ParserRunner.parse(string0, string0, config0, (ErrorReporter) errorCollector0, logger0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test3()  throws Throwable  {
      boolean boolean0 = false;
      Config config0 = ParserRunner.createConfig(boolean0);
      assertNotNull(config0);
      
      Config config1 = ParserRunner.createConfig(boolean0);
      assertNotNull(config1);
      assertNotSame(config1, config0);
      assertFalse(config1.equals((Object)config0));
  }
}
