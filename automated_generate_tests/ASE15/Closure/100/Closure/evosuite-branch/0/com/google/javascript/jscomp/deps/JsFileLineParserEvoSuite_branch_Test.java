/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 21:53:24 GMT 2014
 */

package com.google.javascript.jscomp.deps;

import static org.junit.Assert.*;
import org.junit.Test;
import com.google.javascript.jscomp.ErrorManager;
import com.google.javascript.jscomp.LoggerErrorManager;
import com.google.javascript.jscomp.PrintStreamErrorManager;
import com.google.javascript.jscomp.deps.DependencyInfo;
import com.google.javascript.jscomp.deps.DepsFileParser;
import com.google.javascript.jscomp.deps.JsFileLineParser;
import com.google.javascript.jscomp.deps.JsFileParser;
import com.google.javascript.jscomp.deps.SimpleDependencyInfo;
import java.io.PrintStream;
import java.util.List;
import java.util.logging.Logger;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;

import org.junit.runner.RunWith;


public class JsFileLineParserEvoSuite_branch_Test  {

  @Test
  public void test0()  throws Throwable  {
      Logger logger0 = Logger.global;
      assertNotNull(logger0);
      assertEquals(true, logger0.getUseParentHandlers());
      assertNull(logger0.getResourceBundleName());
      assertEquals("global", logger0.getName());
      
      LoggerErrorManager loggerErrorManager0 = new LoggerErrorManager(logger0);
      assertNotNull(loggerErrorManager0);
      assertEquals(0, loggerErrorManager0.getWarningCount());
      assertEquals(0.0, loggerErrorManager0.getTypedPercent(), 0.01D);
      assertEquals(0, loggerErrorManager0.getErrorCount());
      assertEquals(true, logger0.getUseParentHandlers());
      assertNull(logger0.getResourceBundleName());
      assertEquals("global", logger0.getName());
      
      JsFileParser jsFileParser0 = new JsFileParser((ErrorManager) loggerErrorManager0);
      assertNotNull(jsFileParser0);
      assertEquals(0, loggerErrorManager0.getWarningCount());
      assertEquals(0.0, loggerErrorManager0.getTypedPercent(), 0.01D);
      assertEquals(0, loggerErrorManager0.getErrorCount());
      assertEquals(false, jsFileParser0.didParseSucceed());
      assertEquals(true, logger0.getUseParentHandlers());
      assertNull(logger0.getResourceBundleName());
      assertEquals("global", logger0.getName());
      
      String string0 = "\\s*(?:'((?:\\\\'|[^'])*?)'|\"((?:\\\\\"|[^\"])*?)\")\\s*";
      try {
        List<String> list0 = jsFileParser0.parseJsStringArray(string0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Syntax error in JS String literal
         //
      }
  }

  @Test
  public void test1()  throws Throwable  {
      Logger logger0 = Logger.getGlobal();
      assertNotNull(logger0);
      assertEquals(true, logger0.getUseParentHandlers());
      assertEquals("global", logger0.getName());
      assertNull(logger0.getResourceBundleName());
      
      LoggerErrorManager loggerErrorManager0 = new LoggerErrorManager(logger0);
      assertNotNull(loggerErrorManager0);
      assertEquals(0, loggerErrorManager0.getErrorCount());
      assertEquals(0, loggerErrorManager0.getWarningCount());
      assertEquals(0.0, loggerErrorManager0.getTypedPercent(), 0.01D);
      assertEquals(true, logger0.getUseParentHandlers());
      assertEquals("global", logger0.getName());
      assertNull(logger0.getResourceBundleName());
      
      DepsFileParser depsFileParser0 = new DepsFileParser((ErrorManager) loggerErrorManager0);
      assertNotNull(depsFileParser0);
      assertEquals(false, depsFileParser0.didParseSucceed());
      assertEquals(0, loggerErrorManager0.getErrorCount());
      assertEquals(0, loggerErrorManager0.getWarningCount());
      assertEquals(0.0, loggerErrorManager0.getTypedPercent(), 0.01D);
      assertEquals(true, logger0.getUseParentHandlers());
      assertEquals("global", logger0.getName());
      assertNull(logger0.getResourceBundleName());
      
      String string0 = "n[#HR$4dW;k?";
      try {
        List<String> list0 = depsFileParser0.parseJsStringArray(string0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Syntax error when parsing JS array
         //
      }
  }

  @Test
  public void test2()  throws Throwable  {
      PrintStream printStream0 = null;
      PrintStreamErrorManager printStreamErrorManager0 = new PrintStreamErrorManager(printStream0);
      assertNotNull(printStreamErrorManager0);
      assertEquals(0, printStreamErrorManager0.getErrorCount());
      assertEquals(0, printStreamErrorManager0.getWarningCount());
      assertEquals(0.0, printStreamErrorManager0.getTypedPercent(), 0.01D);
      
      JsFileParser jsFileParser0 = new JsFileParser((ErrorManager) printStreamErrorManager0);
      assertNotNull(jsFileParser0);
      assertEquals(false, jsFileParser0.didParseSucceed());
      assertEquals(0, printStreamErrorManager0.getErrorCount());
      assertEquals(0, printStreamErrorManager0.getWarningCount());
      assertEquals(0.0, printStreamErrorManager0.getTypedPercent(), 0.01D);
      
      String string0 = "_+:";
      try {
        List<String> list0 = jsFileParser0.parseJsStringArray(string0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Syntax error when parsing JS array
         //
      }
  }

  @Test
  public void test3()  throws Throwable  {
      PrintStream printStream0 = null;
      PrintStreamErrorManager printStreamErrorManager0 = new PrintStreamErrorManager(printStream0);
      assertNotNull(printStreamErrorManager0);
      assertEquals(0, printStreamErrorManager0.getErrorCount());
      assertEquals(0.0, printStreamErrorManager0.getTypedPercent(), 0.01D);
      assertEquals(0, printStreamErrorManager0.getWarningCount());
      
      JsFileParser jsFileParser0 = new JsFileParser((ErrorManager) printStreamErrorManager0);
      assertNotNull(jsFileParser0);
      assertEquals(0, printStreamErrorManager0.getErrorCount());
      assertEquals(0.0, printStreamErrorManager0.getTypedPercent(), 0.01D);
      assertEquals(0, printStreamErrorManager0.getWarningCount());
      assertEquals(false, jsFileParser0.didParseSucceed());
      
      boolean boolean0 = true;
      jsFileParser0.setShortcutMode(boolean0);
      assertEquals(0, printStreamErrorManager0.getErrorCount());
      assertEquals(0.0, printStreamErrorManager0.getTypedPercent(), 0.01D);
      assertEquals(0, printStreamErrorManager0.getWarningCount());
      assertEquals(false, jsFileParser0.didParseSucceed());
      
      String string0 = null;
      String string1 = "_+:";
      SimpleDependencyInfo simpleDependencyInfo0 = (SimpleDependencyInfo)jsFileParser0.parseFile(string0, string0, string1);
      assertNotNull(simpleDependencyInfo0);
      assertEquals(0, printStreamErrorManager0.getErrorCount());
      assertEquals(0.0, printStreamErrorManager0.getTypedPercent(), 0.01D);
      assertEquals(0, printStreamErrorManager0.getWarningCount());
      assertEquals(true, jsFileParser0.didParseSucceed());
      assertNull(simpleDependencyInfo0.getPathRelativeToClosureBase());
      assertNull(simpleDependencyInfo0.getName());
  }

  @Test
  public void test4()  throws Throwable  {
      String string0 = null;
      Logger logger0 = Logger.getAnonymousLogger();
      assertNotNull(logger0);
      assertNull(logger0.getName());
      assertEquals(true, logger0.getUseParentHandlers());
      assertNull(logger0.getResourceBundleName());
      
      LoggerErrorManager loggerErrorManager0 = new LoggerErrorManager(logger0);
      assertNotNull(loggerErrorManager0);
      assertNull(logger0.getName());
      assertEquals(true, logger0.getUseParentHandlers());
      assertNull(logger0.getResourceBundleName());
      assertEquals(0, loggerErrorManager0.getWarningCount());
      assertEquals(0, loggerErrorManager0.getErrorCount());
      assertEquals(0.0, loggerErrorManager0.getTypedPercent(), 0.01D);
      
      DepsFileParser depsFileParser0 = new DepsFileParser((ErrorManager) loggerErrorManager0);
      assertNotNull(depsFileParser0);
      assertNull(logger0.getName());
      assertEquals(true, logger0.getUseParentHandlers());
      assertNull(logger0.getResourceBundleName());
      assertEquals(false, depsFileParser0.didParseSucceed());
      assertEquals(0, loggerErrorManager0.getWarningCount());
      assertEquals(0, loggerErrorManager0.getErrorCount());
      assertEquals(0.0, loggerErrorManager0.getTypedPercent(), 0.01D);
      
      String string1 = "//";
      List<DependencyInfo> list0 = depsFileParser0.parseFile(string0, string1);
      assertNotNull(list0);
      assertNull(logger0.getName());
      assertEquals(true, logger0.getUseParentHandlers());
      assertNull(logger0.getResourceBundleName());
      assertEquals(true, depsFileParser0.didParseSucceed());
      assertEquals(0, loggerErrorManager0.getWarningCount());
      assertEquals(0, loggerErrorManager0.getErrorCount());
      assertEquals(0.0, loggerErrorManager0.getTypedPercent(), 0.01D);
      assertEquals(0, list0.size());
      assertEquals(true, list0.isEmpty());
  }

  @Test
  public void test5()  throws Throwable  {
      PrintStream printStream0 = null;
      PrintStreamErrorManager printStreamErrorManager0 = new PrintStreamErrorManager(printStream0);
      assertNotNull(printStreamErrorManager0);
      assertEquals(0.0, printStreamErrorManager0.getTypedPercent(), 0.01D);
      assertEquals(0, printStreamErrorManager0.getWarningCount());
      assertEquals(0, printStreamErrorManager0.getErrorCount());
      
      String string0 = null;
      DepsFileParser depsFileParser0 = new DepsFileParser((ErrorManager) printStreamErrorManager0);
      assertNotNull(depsFileParser0);
      assertEquals(0.0, printStreamErrorManager0.getTypedPercent(), 0.01D);
      assertEquals(0, printStreamErrorManager0.getWarningCount());
      assertEquals(0, printStreamErrorManager0.getErrorCount());
      assertEquals(false, depsFileParser0.didParseSucceed());
      
      String string1 = "Syntax error in JS String literal";
      List<DependencyInfo> list0 = depsFileParser0.parseFile(string0, string1);
      assertNotNull(list0);
      assertEquals(0.0, printStreamErrorManager0.getTypedPercent(), 0.01D);
      assertEquals(0, printStreamErrorManager0.getWarningCount());
      assertEquals(0, printStreamErrorManager0.getErrorCount());
      assertEquals(true, depsFileParser0.didParseSucceed());
      assertEquals(true, list0.isEmpty());
      assertEquals(0, list0.size());
  }

  @Test
  public void test6()  throws Throwable  {
      Logger logger0 = Logger.getAnonymousLogger();
      assertNotNull(logger0);
      assertEquals(true, logger0.getUseParentHandlers());
      assertNull(logger0.getResourceBundleName());
      assertNull(logger0.getName());
      
      LoggerErrorManager loggerErrorManager0 = new LoggerErrorManager(logger0);
      assertNotNull(loggerErrorManager0);
      assertEquals(0, loggerErrorManager0.getErrorCount());
      assertEquals(0, loggerErrorManager0.getWarningCount());
      assertEquals(0.0, loggerErrorManager0.getTypedPercent(), 0.01D);
      assertEquals(true, logger0.getUseParentHandlers());
      assertNull(logger0.getResourceBundleName());
      assertNull(logger0.getName());
      
      DepsFileParser depsFileParser0 = new DepsFileParser((ErrorManager) loggerErrorManager0);
      assertNotNull(depsFileParser0);
      assertEquals(false, depsFileParser0.didParseSucceed());
      assertEquals(0, loggerErrorManager0.getErrorCount());
      assertEquals(0, loggerErrorManager0.getWarningCount());
      assertEquals(0.0, loggerErrorManager0.getTypedPercent(), 0.01D);
      assertEquals(true, logger0.getUseParentHandlers());
      assertNull(logger0.getResourceBundleName());
      assertNull(logger0.getName());
      
      boolean boolean0 = depsFileParser0.didParseSucceed();
      assertFalse(boolean0);
      assertEquals(false, depsFileParser0.didParseSucceed());
      assertEquals(0, loggerErrorManager0.getErrorCount());
      assertEquals(0, loggerErrorManager0.getWarningCount());
      assertEquals(0.0, loggerErrorManager0.getTypedPercent(), 0.01D);
      assertEquals(true, logger0.getUseParentHandlers());
      assertNull(logger0.getResourceBundleName());
      assertNull(logger0.getName());
  }

  @Test
  public void test7()  throws Throwable  {
      String string0 = "Jz[^$vU48/!eh";
      boolean boolean0 = true;
      JsFileLineParser.ParseException jsFileLineParser_ParseException0 = new JsFileLineParser.ParseException(string0, boolean0);
      assertNotNull(jsFileLineParser_ParseException0);
      
      boolean boolean1 = jsFileLineParser_ParseException0.isFatal();
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean0 == boolean1);
  }

  @Test
  public void test8()  throws Throwable  {
      ErrorManager errorManager0 = null;
      JsFileParser jsFileParser0 = new JsFileParser(errorManager0);
      assertNotNull(jsFileParser0);
      assertEquals(false, jsFileParser0.didParseSucceed());
      
      String string0 = "]=IT0P!R>T5xBI<g3.Z";
      try {
        String string1 = jsFileParser0.parseJsString(string0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Syntax error in JS String literal
         //
      }
  }
}
