/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 21:53:51 GMT 2014
 */

package com.google.javascript.rhino.jstype;

import static org.junit.Assert.*; import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.junit.Test;
import com.google.javascript.rhino.ErrorReporter;
import com.google.javascript.rhino.jstype.BooleanLiteralSet;
import com.google.javascript.rhino.jstype.JSType;
import com.google.javascript.rhino.jstype.JSTypeRegistry;
import com.google.javascript.rhino.jstype.NumberType;
import com.google.javascript.rhino.jstype.RecordType;
import com.google.javascript.rhino.jstype.RecordTypeBuilder;



import org.junit.runner.RunWith;


public class RecordTypeBuilderEvoSuite_branch_Test  {

  @Test
  public void test0()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = null;
      RecordTypeBuilder recordTypeBuilder0 = new RecordTypeBuilder(jSTypeRegistry0);
      assertNotNull(recordTypeBuilder0);
      
      // Undeclared exception!
      try {
        JSType jSType0 = recordTypeBuilder0.build();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test1()  throws Throwable  {
      ErrorReporter errorReporter0 = null;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(errorReporter0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      NumberType numberType0 = new NumberType(jSTypeRegistry0);
      assertEquals("number", numberType0.toString());
      assertEquals(false, numberType0.isRecordType());
      assertEquals(true, numberType0.isNumberValueType());
      assertEquals(false, numberType0.isVoidType());
      assertEquals(false, numberType0.isFunctionType());
      assertEquals(false, numberType0.isBooleanValueType());
      assertEquals(false, numberType0.isNoObjectType());
      assertEquals(false, numberType0.isResolved());
      assertEquals(false, numberType0.isStringValueType());
      assertEquals(false, numberType0.isAllType());
      assertEquals(false, numberType0.isNullable());
      assertEquals(true, numberType0.matchesNumberContext());
      assertEquals(BooleanLiteralSet.BOTH, numberType0.getPossibleToBooleanOutcomes());
      assertEquals(true, numberType0.matchesStringContext());
      assertEquals(false, numberType0.isEmptyType());
      assertEquals(true, numberType0.matchesObjectContext());
      assertEquals(false, numberType0.isTemplateType());
      assertEquals(false, numberType0.isNullType());
      assertEquals(false, numberType0.isNoType());
      assertEquals(false, numberType0.isUnionType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(numberType0);
      
      RecordTypeBuilder recordTypeBuilder0 = new RecordTypeBuilder(jSTypeRegistry0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(recordTypeBuilder0);
      
      String string0 = "";
      RecordTypeBuilder recordTypeBuilder1 = recordTypeBuilder0.addProperty(string0, (JSType) numberType0);
      assertEquals("number", numberType0.toString());
      assertEquals(false, numberType0.isRecordType());
      assertEquals(true, numberType0.isNumberValueType());
      assertEquals(false, numberType0.isVoidType());
      assertEquals(false, numberType0.isFunctionType());
      assertEquals(false, numberType0.isBooleanValueType());
      assertEquals(false, numberType0.isNoObjectType());
      assertEquals(false, numberType0.isResolved());
      assertEquals(false, numberType0.isStringValueType());
      assertEquals(false, numberType0.isAllType());
      assertEquals(false, numberType0.isNullable());
      assertEquals(true, numberType0.matchesNumberContext());
      assertEquals(BooleanLiteralSet.BOTH, numberType0.getPossibleToBooleanOutcomes());
      assertEquals(true, numberType0.matchesStringContext());
      assertEquals(false, numberType0.isEmptyType());
      assertEquals(true, numberType0.matchesObjectContext());
      assertEquals(false, numberType0.isTemplateType());
      assertEquals(false, numberType0.isNullType());
      assertEquals(false, numberType0.isNoType());
      assertEquals(false, numberType0.isUnionType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertSame(recordTypeBuilder0, recordTypeBuilder1);
      assertSame(recordTypeBuilder1, recordTypeBuilder0);
      assertNotNull(recordTypeBuilder1);
      
      RecordType recordType0 = (RecordType)recordTypeBuilder0.build();
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, recordType0.isNullType());
      assertEquals(false, recordType0.isAllType());
      assertEquals(false, recordType0.isResolved());
      assertEquals(false, recordType0.isBooleanValueType());
      assertEquals(false, recordType0.isNoObjectType());
      assertEquals(true, recordType0.isRecordType());
      assertEquals(BooleanLiteralSet.TRUE, recordType0.getPossibleToBooleanOutcomes());
      assertEquals(false, recordType0.isUnionType());
      assertEquals(false, recordType0.isFunctionType());
      assertEquals(false, recordType0.isVoidType());
      assertEquals(false, recordType0.isStringValueType());
      assertEquals(false, recordType0.isEmptyType());
      assertEquals(false, recordType0.isNumberValueType());
      assertEquals(false, recordType0.isTemplateType());
      assertEquals(false, recordType0.isNoType());
      assertSame(recordTypeBuilder0, recordTypeBuilder1);
      assertNotNull(recordType0);
  }
}
