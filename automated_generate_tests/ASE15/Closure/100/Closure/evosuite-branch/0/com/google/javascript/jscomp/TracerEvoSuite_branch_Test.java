/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 22:25:43 GMT 2014
 */

package com.google.javascript.jscomp;

import static org.junit.Assert.*; import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.junit.Test;
import com.google.javascript.jscomp.Tracer;
import java.util.Map;



import org.junit.runner.RunWith;


public class TracerEvoSuite_branch_Test  {

  @Test
  public void test00()  throws Throwable  {
      Tracer.ThreadTrace tracer_ThreadTrace0 = new Tracer.ThreadTrace();
      assertNotNull(tracer_ThreadTrace0);
      
      String string0 = "";
      Tracer tracer0 = new Tracer(string0, string0);
      assertNotNull(tracer0);
      
      tracer_ThreadTrace0.startEvent(tracer0);
      tracer_ThreadTrace0.truncateEvents();
      boolean boolean0 = tracer_ThreadTrace0.isEmpty();
      assertFalse(boolean0);
  }

  @Test
  public void test01() {}
//   @Test
//   public void test01()  throws Throwable  {
//       Tracer.ThreadTrace tracer_ThreadTrace0 = Tracer.getThreadTrace();
//       assertNotNull(tracer_ThreadTrace0);
//       
//       int int0 = (-458);
//       String string0 = null;
//       Tracer tracer0 = Tracer.shortName(tracer_ThreadTrace0, string0);
//       assertNotNull(tracer0);
//       
//       tracer_ThreadTrace0.endEvent(tracer0, int0);
//   }

  @Test
  public void test02() {}
//   @Test
//   public void test02()  throws Throwable  {
//       Tracer.ThreadTrace tracer_ThreadTrace0 = Tracer.getThreadTrace();
//       assertNotNull(tracer_ThreadTrace0);
//       
//       Object object0 = null;
//       String string0 = "}jxd]T@";
//       Tracer tracer0 = Tracer.shortName(object0, string0);
//       assertNotNull(tracer0);
//       
//       int int0 = 0;
//       tracer_ThreadTrace0.endEvent(tracer0, int0);
//   }

  @Test
  public void test03()  throws Throwable  {
      Map<String, Long> map0 = Tracer.getTypeToTimeMap();
      assertNull(map0);
  }

  @Test
  public void test04()  throws Throwable  {
      Tracer.enableTypeMaps();
      Map<String, Long> map0 = Tracer.getTypeToCountMap();
      assertNotNull(map0);
      assertEquals(0, map0.size());
      assertEquals(true, map0.isEmpty());
  }

  @Test
  public void test05()  throws Throwable  {
      Map<String, Long> map0 = Tracer.getTypeToCountMap();
      assertNull(map0);
  }

  @Test
  public void test06()  throws Throwable  {
      Tracer.ThreadTrace tracer_ThreadTrace0 = new Tracer.ThreadTrace();
      assertNotNull(tracer_ThreadTrace0);
      
      String string0 = tracer_ThreadTrace0.toString();
      assertNotNull(string0);
      assertEquals("", string0);
      
      Tracer.logCurrentThreadTrace();
      Tracer.enableTypeMaps();
      int int0 = (-2968);
      Tracer tracer0 = new Tracer(string0);
      assertNotNull(tracer0);
      
      Tracer.clearThreadTrace();
      Tracer.logCurrentThreadTrace();
      long long0 = tracer0.stop();
      assertEquals(0L, long0);
      
      Tracer.clearCurrentThreadTrace();
      Tracer.initCurrentThreadTrace(int0);
      Tracer.clearThreadTrace();
      Map<String, Long> map0 = Tracer.getTypeToTimeMap();
      assertNotNull(map0);
      assertEquals(0, map0.size());
      assertEquals(true, map0.isEmpty());
  }

  @Test
  public void test07()  throws Throwable  {
      String string0 = "'\"p7";
      StringBuilder stringBuilder0 = new StringBuilder(string0);
      assertNotNull(stringBuilder0);
      assertEquals("'\"p7", stringBuilder0.toString());
      
      int int0 = 1743;
      Tracer.appendSpaces(stringBuilder0, int0);
      assertEquals("'\"p7                ", stringBuilder0.toString());
  }

  @Test
  public void test08()  throws Throwable  {
      Object object0 = null;
      String string0 = "}jxd]T@";
      Tracer tracer0 = Tracer.shortName(object0, string0);
      assertNotNull(tracer0);
  }

  @Test
  public void test09()  throws Throwable  {
      String string0 = Tracer.getCurrentThreadTraceReport();
      assertNotNull(string0);
      assertEquals("", string0);
      
      int int0 = 1525;
      Integer integer0 = new Integer(int0);
      assertTrue(integer0.equals((Object)int0));
      assertEquals(1525, (int)integer0);
      
      Tracer tracer0 = Tracer.shortName(integer0, string0);
      assertNotNull(tracer0);
      assertTrue(integer0.equals((Object)int0));
      
      long long0 = tracer0.stop();
      assertTrue(integer0.equals((Object)int0));
      assertEquals(0L, long0);
  }

  @Test
  public void test10()  throws Throwable  {
      String string0 = "";
      String string1 = "Tracer.appendSpaces called with large numSpaces";
      assertNotSame(string1, string0);
      
      Tracer tracer0 = new Tracer(string0, string1);
      assertNotNull(tracer0);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      
      Tracer.initCurrentThreadTrace();
  }

  @Test
  public void test11()  throws Throwable  {
      String string0 = "";
      Tracer.Stat tracer_Stat0 = Tracer.getStatsForType(string0);
      assertNotNull(tracer_Stat0);
      
      int int0 = tracer_Stat0.getCount();
      assertEquals(0, int0);
  }

  @Test
  public void test12()  throws Throwable  {
      String string0 = "";
      String string1 = "Tracer.appendSpaces called with large numSpaces";
      assertNotSame(string1, string0);
      
      Tracer tracer0 = new Tracer(string0, string1);
      assertNotNull(tracer0);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      
      int int0 = 2;
      Tracer.clearTracingStatisticsTestingOnly();
      Tracer.clearTracingStatisticsTestingOnly();
      String string2 = "";
      assertSame(string2, string0);
      assertNotSame(string2, string1);
      
      Tracer.ThreadTrace tracer_ThreadTrace0 = new Tracer.ThreadTrace();
      assertNotNull(tracer_ThreadTrace0);
      
      Tracer tracer1 = Tracer.shortName(string2, string2);
      assertNotNull(tracer1);
      assertFalse(tracer1.equals((Object)tracer0));
      assertFalse(string2.equals((Object)string1));
      assertNotSame(tracer1, tracer0);
      assertSame(string2, string0);
      assertNotSame(string2, string1);
      
      Tracer.AtomicTracerStatMap tracer_AtomicTracerStatMap0 = new Tracer.AtomicTracerStatMap();
      assertNotNull(tracer_AtomicTracerStatMap0);
      
      boolean boolean0 = tracer_ThreadTrace0.isOutstandingEventsTruncated;
      assertFalse(boolean0);
      
      Map<String, Long> map0 = Tracer.getTypeToSilentMap();
      assertNull(map0);
      
      tracer_ThreadTrace0.truncateOutstandingEvents();
      tracer_ThreadTrace0.startEvent(tracer1);
      assertFalse(tracer1.equals((Object)tracer0));
      assertFalse(string2.equals((Object)string1));
      assertNotSame(tracer1, tracer0);
      assertSame(string2, string0);
      assertNotSame(string2, string1);
      
      Tracer.Stat tracer_Stat0 = Tracer.getStatsForType(string2);
      assertNotNull(tracer_Stat0);
      assertFalse(string2.equals((Object)string1));
      assertSame(string2, string0);
      assertNotSame(string2, string1);
      
      long long0 = (-35L);
      Long long1 = new Long(long0);
      assertTrue(long1.equals((Object)long0));
      assertEquals((-35L), (long)long1);
      
      long long2 = tracer0.stop(int0);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      assertFalse(tracer0.equals((Object)tracer1));
      assertFalse(string0.equals((Object)string1));
      assertFalse(long2 == long0);
      assertEquals(0L, long2);
      assertNotSame(string1, string0);
      assertNotSame(string1, string2);
      assertNotSame(tracer0, tracer1);
      assertSame(string0, string2);
      assertNotSame(string0, string1);
  }

  @Test
  public void test13()  throws Throwable  {
      String string0 = "";
      Tracer.Stat tracer_Stat0 = Tracer.getStatsForType(string0);
      assertNotNull(tracer_Stat0);
      
      int int0 = tracer_Stat0.getTotalTime();
      assertEquals(0, int0);
  }
}
