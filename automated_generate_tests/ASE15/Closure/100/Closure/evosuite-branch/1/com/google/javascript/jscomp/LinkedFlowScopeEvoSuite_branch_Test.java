/*
 * This file was automatically generated by EvoSuite
 * Fri Dec 12 00:23:00 GMT 2014
 */

package com.google.javascript.jscomp;

import static org.junit.Assert.*;
import org.junit.Test;
import com.google.javascript.jscomp.CompilerInput;
import com.google.javascript.jscomp.FlowScope;
import com.google.javascript.jscomp.JSSourceFile;
import com.google.javascript.jscomp.LinkedFlowScope;
import com.google.javascript.jscomp.Scope;
import com.google.javascript.rhino.ErrorReporter;
import com.google.javascript.rhino.Node;
import com.google.javascript.rhino.SimpleErrorReporter;
import com.google.javascript.rhino.jstype.BooleanLiteralSet;
import com.google.javascript.rhino.jstype.FunctionType;
import com.google.javascript.rhino.jstype.InstanceObjectType;
import com.google.javascript.rhino.jstype.JSType;
import com.google.javascript.rhino.jstype.JSTypeNative;
import com.google.javascript.rhino.jstype.JSTypeRegistry;
import com.google.javascript.rhino.jstype.ObjectType;
import com.google.javascript.rhino.jstype.StaticScope;
import com.google.javascript.rhino.jstype.StaticSlot;
import java.util.List;
import java.util.Stack;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;

import org.evosuite.runtime.FileSystemHandling;
import org.junit.runner.RunWith;


public class LinkedFlowScopeEvoSuite_branch_Test  {

  @Test
  public void test00()  throws Throwable  {
      Scope scope0 = null;
      LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope0);
      assertNotNull(linkedFlowScope0);
      
      String string0 = "";
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      JSTypeNative jSTypeNative0 = JSTypeNative.DATE_FUNCTION_TYPE;
      FunctionType functionType0 = jSTypeRegistry0.getNativeFunctionType(jSTypeNative0);
      assertNotNull(functionType0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, functionType0.isEmptyType());
      assertEquals(false, functionType0.isTemplateType());
      assertEquals(false, functionType0.isInterface());
      assertEquals(false, functionType0.isVoidType());
      assertEquals(false, functionType0.isStringValueType());
      assertEquals(true, functionType0.hasCachedValues());
      assertEquals(false, functionType0.isNoObjectType());
      assertEquals(false, functionType0.isNoType());
      assertEquals(false, functionType0.isReturnTypeInferred());
      assertEquals(true, functionType0.hasInstanceType());
      assertEquals(true, functionType0.isFunctionType());
      assertEquals(false, functionType0.isResolved());
      assertEquals(false, functionType0.isOrdinaryFunction());
      assertEquals(true, functionType0.canBeCalled());
      assertEquals(false, functionType0.isAllType());
      assertNull(functionType0.getTemplateTypeName());
      assertEquals(false, functionType0.isNumberValueType());
      assertEquals(false, functionType0.isBooleanValueType());
      assertEquals(false, functionType0.isNullType());
      assertEquals(7, functionType0.getMaxArguments());
      assertEquals(true, functionType0.isConstructor());
      assertEquals(false, functionType0.isRecordType());
      assertEquals(false, functionType0.isUnionType());
      
      linkedFlowScope0.inferSlotType(string0, (JSType) functionType0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, functionType0.isEmptyType());
      assertEquals(false, functionType0.isTemplateType());
      assertEquals(false, functionType0.isInterface());
      assertEquals(false, functionType0.isVoidType());
      assertEquals(false, functionType0.isStringValueType());
      assertEquals(true, functionType0.hasCachedValues());
      assertEquals(false, functionType0.isNoObjectType());
      assertEquals(false, functionType0.isNoType());
      assertEquals(false, functionType0.isReturnTypeInferred());
      assertEquals(true, functionType0.hasInstanceType());
      assertEquals(true, functionType0.isFunctionType());
      assertEquals(false, functionType0.isResolved());
      assertEquals(false, functionType0.isOrdinaryFunction());
      assertEquals(true, functionType0.canBeCalled());
      assertEquals(false, functionType0.isAllType());
      assertNull(functionType0.getTemplateTypeName());
      assertEquals(false, functionType0.isNumberValueType());
      assertEquals(false, functionType0.isBooleanValueType());
      assertEquals(false, functionType0.isNullType());
      assertEquals(7, functionType0.getMaxArguments());
      assertEquals(true, functionType0.isConstructor());
      assertEquals(false, functionType0.isRecordType());
      assertEquals(false, functionType0.isUnionType());
      
      linkedFlowScope0.inferSlotType(string0, (JSType) functionType0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, functionType0.isEmptyType());
      assertEquals(false, functionType0.isTemplateType());
      assertEquals(false, functionType0.isInterface());
      assertEquals(false, functionType0.isVoidType());
      assertEquals(false, functionType0.isStringValueType());
      assertEquals(true, functionType0.hasCachedValues());
      assertEquals(false, functionType0.isNoObjectType());
      assertEquals(false, functionType0.isNoType());
      assertEquals(false, functionType0.isReturnTypeInferred());
      assertEquals(true, functionType0.hasInstanceType());
      assertEquals(true, functionType0.isFunctionType());
      assertEquals(false, functionType0.isResolved());
      assertEquals(false, functionType0.isOrdinaryFunction());
      assertEquals(true, functionType0.canBeCalled());
      assertEquals(false, functionType0.isAllType());
      assertNull(functionType0.getTemplateTypeName());
      assertEquals(false, functionType0.isNumberValueType());
      assertEquals(false, functionType0.isBooleanValueType());
      assertEquals(false, functionType0.isNullType());
      assertEquals(7, functionType0.getMaxArguments());
      assertEquals(true, functionType0.isConstructor());
      assertEquals(false, functionType0.isRecordType());
      assertEquals(false, functionType0.isUnionType());
      
      LinkedFlowScope linkedFlowScope1 = LinkedFlowScope.createEntryLattice(scope0);
      assertNotNull(linkedFlowScope1);
      assertFalse(linkedFlowScope1.equals((Object)linkedFlowScope0));
      assertNotSame(linkedFlowScope1, linkedFlowScope0);
      
      boolean boolean0 = linkedFlowScope0.equals((Object) linkedFlowScope1);
      assertFalse(boolean0);
      assertFalse(linkedFlowScope0.equals((Object)linkedFlowScope1));
      assertFalse(linkedFlowScope1.equals((Object)linkedFlowScope0));
      assertNotSame(linkedFlowScope0, linkedFlowScope1);
      assertNotSame(linkedFlowScope1, linkedFlowScope0);
  }

  @Test
  public void test01()  throws Throwable  {
      Scope scope0 = null;
      LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope0);
      assertNotNull(linkedFlowScope0);
      
      LinkedFlowScope linkedFlowScope1 = LinkedFlowScope.createEntryLattice(scope0);
      assertNotNull(linkedFlowScope1);
      assertTrue(linkedFlowScope1.equals((Object)linkedFlowScope0));
      assertNotSame(linkedFlowScope1, linkedFlowScope0);
      
      String string0 = "(";
      JSType jSType0 = null;
      linkedFlowScope1.inferSlotType(string0, jSType0);
      assertTrue(linkedFlowScope1.equals((Object)linkedFlowScope0));
      assertNotSame(linkedFlowScope1, linkedFlowScope0);
      
      boolean boolean0 = linkedFlowScope0.equals((Object) linkedFlowScope1);
      assertTrue(boolean0);
      assertTrue(linkedFlowScope1.equals((Object)linkedFlowScope0));
      assertTrue(linkedFlowScope0.equals((Object)linkedFlowScope1));
      assertNotSame(linkedFlowScope1, linkedFlowScope0);
      assertNotSame(linkedFlowScope0, linkedFlowScope1);
  }

  @Test
  public void test02()  throws Throwable  {
      Scope scope0 = null;
      LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope0);
      assertNotNull(linkedFlowScope0);
      
      boolean boolean0 = linkedFlowScope0.equals((Object) scope0);
      assertFalse(boolean0);
  }

  @Test
  public void test03()  throws Throwable  {
      Scope scope0 = null;
      LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope0);
      assertNotNull(linkedFlowScope0);
      
      String string0 = "";
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      JSTypeNative jSTypeNative0 = JSTypeNative.DATE_FUNCTION_TYPE;
      FunctionType functionType0 = jSTypeRegistry0.getNativeFunctionType(jSTypeNative0);
      assertNotNull(functionType0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(7, functionType0.getMaxArguments());
      assertEquals(false, functionType0.isReturnTypeInferred());
      assertEquals(false, functionType0.isNoObjectType());
      assertEquals(false, functionType0.isAllType());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, functionType0.isRecordType());
      assertEquals(false, functionType0.isInterface());
      assertEquals(false, functionType0.isNullType());
      assertEquals(false, functionType0.isTemplateType());
      assertEquals(false, functionType0.isStringValueType());
      assertEquals(true, functionType0.canBeCalled());
      assertEquals(false, functionType0.isOrdinaryFunction());
      assertNull(functionType0.getTemplateTypeName());
      assertEquals(false, functionType0.isNumberValueType());
      assertEquals(false, functionType0.isResolved());
      assertEquals(false, functionType0.isUnionType());
      assertEquals(false, functionType0.isBooleanValueType());
      assertEquals(false, functionType0.isVoidType());
      assertEquals(false, functionType0.isEmptyType());
      assertEquals(true, functionType0.hasInstanceType());
      assertEquals(true, functionType0.isConstructor());
      assertEquals(true, functionType0.hasCachedValues());
      assertEquals(true, functionType0.isFunctionType());
      assertEquals(false, functionType0.isNoType());
      
      linkedFlowScope0.inferSlotType(string0, (JSType) functionType0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(7, functionType0.getMaxArguments());
      assertEquals(false, functionType0.isReturnTypeInferred());
      assertEquals(false, functionType0.isNoObjectType());
      assertEquals(false, functionType0.isAllType());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, functionType0.isRecordType());
      assertEquals(false, functionType0.isInterface());
      assertEquals(false, functionType0.isNullType());
      assertEquals(false, functionType0.isTemplateType());
      assertEquals(false, functionType0.isStringValueType());
      assertEquals(true, functionType0.canBeCalled());
      assertEquals(false, functionType0.isOrdinaryFunction());
      assertNull(functionType0.getTemplateTypeName());
      assertEquals(false, functionType0.isNumberValueType());
      assertEquals(false, functionType0.isResolved());
      assertEquals(false, functionType0.isUnionType());
      assertEquals(false, functionType0.isBooleanValueType());
      assertEquals(false, functionType0.isVoidType());
      assertEquals(false, functionType0.isEmptyType());
      assertEquals(true, functionType0.hasInstanceType());
      assertEquals(true, functionType0.isConstructor());
      assertEquals(true, functionType0.hasCachedValues());
      assertEquals(true, functionType0.isFunctionType());
      assertEquals(false, functionType0.isNoType());
      
      LinkedFlowScope linkedFlowScope1 = LinkedFlowScope.createEntryLattice(scope0);
      assertNotNull(linkedFlowScope1);
      assertFalse(linkedFlowScope1.equals((Object)linkedFlowScope0));
      assertNotSame(linkedFlowScope1, linkedFlowScope0);
      
      LinkedFlowScope.FlowScopeJoinOp linkedFlowScope_FlowScopeJoinOp0 = new LinkedFlowScope.FlowScopeJoinOp();
      assertNotNull(linkedFlowScope_FlowScopeJoinOp0);
      
      // Undeclared exception!
      try {
        FlowScope flowScope0 = linkedFlowScope_FlowScopeJoinOp0.apply((FlowScope) linkedFlowScope0, (FlowScope) linkedFlowScope1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test04()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      LinkedFlowScope.FlowScopeJoinOp linkedFlowScope_FlowScopeJoinOp0 = new LinkedFlowScope.FlowScopeJoinOp();
      assertNotNull(linkedFlowScope_FlowScopeJoinOp0);
      
      boolean boolean0 = true;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0, boolean0);
      assertNotNull(jSTypeRegistry0);
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      Stack<JSType> stack0 = new Stack<JSType>();
      assertNotNull(stack0);
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertEquals(true, stack0.empty());
      assertEquals(true, stack0.isEmpty());
      
      Node node0 = jSTypeRegistry0.createParameters((List<JSType>) stack0);
      assertNotNull(node0);
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.hasOneChild());
      assertEquals(-1, node0.getCharno());
      assertEquals(0, node0.getChildCount());
      assertEquals(83, node0.getType());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertEquals(true, stack0.empty());
      assertEquals(true, stack0.isEmpty());
      
      JSTypeNative jSTypeNative0 = JSTypeNative.REFERENCE_ERROR_TYPE;
      InstanceObjectType instanceObjectType0 = (InstanceObjectType)jSTypeRegistry0.getNativeObjectType(jSTypeNative0);
      assertNotNull(instanceObjectType0);
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, instanceObjectType0.isVoidType());
      assertEquals(true, instanceObjectType0.hasReferenceName());
      assertEquals(false, instanceObjectType0.isResolved());
      assertEquals(false, instanceObjectType0.isNoObjectType());
      assertEquals(false, instanceObjectType0.isEmptyType());
      assertEquals(false, instanceObjectType0.isRecordType());
      assertEquals(false, instanceObjectType0.isStringValueType());
      assertEquals(true, instanceObjectType0.isNominalType());
      assertEquals(false, instanceObjectType0.isAllType());
      assertEquals(false, instanceObjectType0.isNullType());
      assertEquals(BooleanLiteralSet.TRUE, instanceObjectType0.getPossibleToBooleanOutcomes());
      assertEquals(false, instanceObjectType0.isBooleanValueType());
      assertEquals(true, instanceObjectType0.isInstanceType());
      assertEquals(false, instanceObjectType0.isFunctionType());
      assertEquals(false, instanceObjectType0.isUnionType());
      assertEquals(false, instanceObjectType0.isTemplateType());
      assertEquals(false, instanceObjectType0.isNumberValueType());
      assertEquals(false, instanceObjectType0.isNoType());
      
      Scope scope0 = new Scope(node0, instanceObjectType0);
      assertNotNull(scope0);
      assertEquals(true, scope0.isGlobal());
      assertEquals(0, scope0.getVarCount());
      assertEquals(false, scope0.isLocal());
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.hasOneChild());
      assertEquals(-1, node0.getCharno());
      assertEquals(0, node0.getChildCount());
      assertEquals(83, node0.getType());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, instanceObjectType0.isVoidType());
      assertEquals(true, instanceObjectType0.hasReferenceName());
      assertEquals(false, instanceObjectType0.isResolved());
      assertEquals(false, instanceObjectType0.isNoObjectType());
      assertEquals(false, instanceObjectType0.isEmptyType());
      assertEquals(false, instanceObjectType0.isRecordType());
      assertEquals(false, instanceObjectType0.isStringValueType());
      assertEquals(true, instanceObjectType0.isNominalType());
      assertEquals(false, instanceObjectType0.isAllType());
      assertEquals(false, instanceObjectType0.isNullType());
      assertEquals(BooleanLiteralSet.TRUE, instanceObjectType0.getPossibleToBooleanOutcomes());
      assertEquals(false, instanceObjectType0.isBooleanValueType());
      assertEquals(true, instanceObjectType0.isInstanceType());
      assertEquals(false, instanceObjectType0.isFunctionType());
      assertEquals(false, instanceObjectType0.isUnionType());
      assertEquals(false, instanceObjectType0.isTemplateType());
      assertEquals(false, instanceObjectType0.isNumberValueType());
      assertEquals(false, instanceObjectType0.isNoType());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertEquals(true, stack0.empty());
      assertEquals(true, stack0.isEmpty());
      
      LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope0);
      assertNotNull(linkedFlowScope0);
      assertEquals(true, scope0.isGlobal());
      assertEquals(0, scope0.getVarCount());
      assertEquals(false, scope0.isLocal());
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.hasOneChild());
      assertEquals(-1, node0.getCharno());
      assertEquals(0, node0.getChildCount());
      assertEquals(83, node0.getType());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, instanceObjectType0.isVoidType());
      assertEquals(true, instanceObjectType0.hasReferenceName());
      assertEquals(false, instanceObjectType0.isResolved());
      assertEquals(false, instanceObjectType0.isNoObjectType());
      assertEquals(false, instanceObjectType0.isEmptyType());
      assertEquals(false, instanceObjectType0.isRecordType());
      assertEquals(false, instanceObjectType0.isStringValueType());
      assertEquals(true, instanceObjectType0.isNominalType());
      assertEquals(false, instanceObjectType0.isAllType());
      assertEquals(false, instanceObjectType0.isNullType());
      assertEquals(BooleanLiteralSet.TRUE, instanceObjectType0.getPossibleToBooleanOutcomes());
      assertEquals(false, instanceObjectType0.isBooleanValueType());
      assertEquals(true, instanceObjectType0.isInstanceType());
      assertEquals(false, instanceObjectType0.isFunctionType());
      assertEquals(false, instanceObjectType0.isUnionType());
      assertEquals(false, instanceObjectType0.isTemplateType());
      assertEquals(false, instanceObjectType0.isNumberValueType());
      assertEquals(false, instanceObjectType0.isNoType());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertEquals(true, stack0.empty());
      assertEquals(true, stack0.isEmpty());
      
      LinkedFlowScope linkedFlowScope1 = new LinkedFlowScope(linkedFlowScope0);
      assertNotNull(linkedFlowScope1);
      assertEquals(true, scope0.isGlobal());
      assertEquals(0, scope0.getVarCount());
      assertEquals(false, scope0.isLocal());
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.hasOneChild());
      assertEquals(-1, node0.getCharno());
      assertEquals(0, node0.getChildCount());
      assertEquals(83, node0.getType());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, instanceObjectType0.isVoidType());
      assertEquals(true, instanceObjectType0.hasReferenceName());
      assertEquals(false, instanceObjectType0.isResolved());
      assertEquals(false, instanceObjectType0.isNoObjectType());
      assertEquals(false, instanceObjectType0.isEmptyType());
      assertEquals(false, instanceObjectType0.isRecordType());
      assertEquals(false, instanceObjectType0.isStringValueType());
      assertEquals(true, instanceObjectType0.isNominalType());
      assertEquals(false, instanceObjectType0.isAllType());
      assertEquals(false, instanceObjectType0.isNullType());
      assertEquals(BooleanLiteralSet.TRUE, instanceObjectType0.getPossibleToBooleanOutcomes());
      assertEquals(false, instanceObjectType0.isBooleanValueType());
      assertEquals(true, instanceObjectType0.isInstanceType());
      assertEquals(false, instanceObjectType0.isFunctionType());
      assertEquals(false, instanceObjectType0.isUnionType());
      assertEquals(false, instanceObjectType0.isTemplateType());
      assertEquals(false, instanceObjectType0.isNumberValueType());
      assertEquals(false, instanceObjectType0.isNoType());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertEquals(true, stack0.empty());
      assertEquals(true, stack0.isEmpty());
      assertTrue(linkedFlowScope0.equals((Object)linkedFlowScope1));
      assertTrue(linkedFlowScope1.equals((Object)linkedFlowScope0));
      assertNotSame(linkedFlowScope0, linkedFlowScope1);
      assertNotSame(linkedFlowScope1, linkedFlowScope0);
      
      LinkedFlowScope linkedFlowScope2 = (LinkedFlowScope)linkedFlowScope_FlowScopeJoinOp0.apply((FlowScope) linkedFlowScope1, (FlowScope) linkedFlowScope0);
      assertNotNull(linkedFlowScope2);
      assertEquals(true, scope0.isGlobal());
      assertEquals(0, scope0.getVarCount());
      assertEquals(false, scope0.isLocal());
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.hasOneChild());
      assertEquals(-1, node0.getCharno());
      assertEquals(0, node0.getChildCount());
      assertEquals(83, node0.getType());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, instanceObjectType0.isVoidType());
      assertEquals(true, instanceObjectType0.hasReferenceName());
      assertEquals(false, instanceObjectType0.isResolved());
      assertEquals(false, instanceObjectType0.isNoObjectType());
      assertEquals(false, instanceObjectType0.isEmptyType());
      assertEquals(false, instanceObjectType0.isRecordType());
      assertEquals(false, instanceObjectType0.isStringValueType());
      assertEquals(true, instanceObjectType0.isNominalType());
      assertEquals(false, instanceObjectType0.isAllType());
      assertEquals(false, instanceObjectType0.isNullType());
      assertEquals(BooleanLiteralSet.TRUE, instanceObjectType0.getPossibleToBooleanOutcomes());
      assertEquals(false, instanceObjectType0.isBooleanValueType());
      assertEquals(true, instanceObjectType0.isInstanceType());
      assertEquals(false, instanceObjectType0.isFunctionType());
      assertEquals(false, instanceObjectType0.isUnionType());
      assertEquals(false, instanceObjectType0.isTemplateType());
      assertEquals(false, instanceObjectType0.isNumberValueType());
      assertEquals(false, instanceObjectType0.isNoType());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertEquals(true, stack0.empty());
      assertEquals(true, stack0.isEmpty());
      assertTrue(linkedFlowScope0.equals((Object)linkedFlowScope1));
      assertTrue(linkedFlowScope0.equals((Object)linkedFlowScope2));
      assertTrue(linkedFlowScope1.equals((Object)linkedFlowScope0));
      assertTrue(linkedFlowScope1.equals((Object)linkedFlowScope2));
      assertTrue(linkedFlowScope2.equals((Object)linkedFlowScope0));
      assertTrue(linkedFlowScope2.equals((Object)linkedFlowScope1));
      assertNotSame(linkedFlowScope0, linkedFlowScope2);
      assertNotSame(linkedFlowScope0, linkedFlowScope1);
      assertNotSame(linkedFlowScope1, linkedFlowScope2);
      assertNotSame(linkedFlowScope1, linkedFlowScope0);
      assertNotSame(linkedFlowScope2, linkedFlowScope1);
      assertNotSame(linkedFlowScope2, linkedFlowScope0);
  }

  @Test
  public void test05()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      String string0 = "Circlar dependency detected:{0}";
      boolean boolean0 = FileSystemHandling.appendStringToFile(evoSuiteFile0, string0);
      assertFalse(boolean0);
      
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0, boolean0);
      assertNotNull(jSTypeRegistry0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      Stack<JSType> stack0 = new Stack<JSType>();
      assertNotNull(stack0);
      assertEquals(0, stack0.size());
      assertEquals(true, stack0.isEmpty());
      assertEquals(true, stack0.empty());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      
      Node node0 = jSTypeRegistry0.createParameters((List<JSType>) stack0);
      assertNotNull(node0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isQuotedString());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.hasChildren());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(83, node0.getType());
      assertEquals(0, node0.getChildCount());
      assertEquals(0, stack0.size());
      assertEquals(true, stack0.isEmpty());
      assertEquals(true, stack0.empty());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      
      JSTypeNative jSTypeNative0 = JSTypeNative.REFERENCE_ERROR_TYPE;
      InstanceObjectType instanceObjectType0 = (InstanceObjectType)jSTypeRegistry0.getNativeObjectType(jSTypeNative0);
      assertNotNull(instanceObjectType0);
      assertEquals(false, instanceObjectType0.isNullType());
      assertEquals(false, instanceObjectType0.isTemplateType());
      assertEquals(false, instanceObjectType0.isStringValueType());
      assertEquals(false, instanceObjectType0.isEmptyType());
      assertEquals(false, instanceObjectType0.isNoType());
      assertEquals(false, instanceObjectType0.isRecordType());
      assertEquals(true, instanceObjectType0.isInstanceType());
      assertEquals(false, instanceObjectType0.isNumberValueType());
      assertEquals(true, instanceObjectType0.isNominalType());
      assertEquals(true, instanceObjectType0.hasReferenceName());
      assertEquals(false, instanceObjectType0.isResolved());
      assertEquals(false, instanceObjectType0.isBooleanValueType());
      assertEquals(false, instanceObjectType0.isFunctionType());
      assertEquals(false, instanceObjectType0.isNoObjectType());
      assertEquals(false, instanceObjectType0.isUnionType());
      assertEquals(BooleanLiteralSet.TRUE, instanceObjectType0.getPossibleToBooleanOutcomes());
      assertEquals(false, instanceObjectType0.isAllType());
      assertEquals(false, instanceObjectType0.isVoidType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      Scope scope0 = new Scope(node0, instanceObjectType0);
      assertNotNull(scope0);
      assertEquals(false, instanceObjectType0.isNullType());
      assertEquals(false, instanceObjectType0.isTemplateType());
      assertEquals(false, instanceObjectType0.isStringValueType());
      assertEquals(false, instanceObjectType0.isEmptyType());
      assertEquals(false, instanceObjectType0.isNoType());
      assertEquals(false, instanceObjectType0.isRecordType());
      assertEquals(true, instanceObjectType0.isInstanceType());
      assertEquals(false, instanceObjectType0.isNumberValueType());
      assertEquals(true, instanceObjectType0.isNominalType());
      assertEquals(true, instanceObjectType0.hasReferenceName());
      assertEquals(false, instanceObjectType0.isResolved());
      assertEquals(false, instanceObjectType0.isBooleanValueType());
      assertEquals(false, instanceObjectType0.isFunctionType());
      assertEquals(false, instanceObjectType0.isNoObjectType());
      assertEquals(false, instanceObjectType0.isUnionType());
      assertEquals(BooleanLiteralSet.TRUE, instanceObjectType0.getPossibleToBooleanOutcomes());
      assertEquals(false, instanceObjectType0.isAllType());
      assertEquals(false, instanceObjectType0.isVoidType());
      assertEquals(0, scope0.getVarCount());
      assertEquals(true, scope0.isGlobal());
      assertEquals(false, scope0.isLocal());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isQuotedString());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.hasChildren());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(83, node0.getType());
      assertEquals(0, node0.getChildCount());
      assertEquals(0, stack0.size());
      assertEquals(true, stack0.isEmpty());
      assertEquals(true, stack0.empty());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      
      JSSourceFile jSSourceFile0 = JSSourceFile.fromFile(string0);
      assertNotNull(jSSourceFile0);
      assertEquals("Circlar dependency detected:{0}", jSSourceFile0.getOriginalPath());
      assertEquals("Circlar dependency detected:{0}", jSSourceFile0.getName());
      
      CompilerInput compilerInput0 = new CompilerInput(jSSourceFile0);
      assertNotNull(compilerInput0);
      assertEquals("Circlar dependency detected:{0}", jSSourceFile0.getOriginalPath());
      assertEquals("Circlar dependency detected:{0}", jSSourceFile0.getName());
      assertEquals("Circlar dependency detected:{0}", compilerInput0.getName());
      assertEquals(false, compilerInput0.isExtern());
      
      LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope0);
      assertNotNull(linkedFlowScope0);
      assertEquals(false, instanceObjectType0.isNullType());
      assertEquals(false, instanceObjectType0.isTemplateType());
      assertEquals(false, instanceObjectType0.isStringValueType());
      assertEquals(false, instanceObjectType0.isEmptyType());
      assertEquals(false, instanceObjectType0.isNoType());
      assertEquals(false, instanceObjectType0.isRecordType());
      assertEquals(true, instanceObjectType0.isInstanceType());
      assertEquals(false, instanceObjectType0.isNumberValueType());
      assertEquals(true, instanceObjectType0.isNominalType());
      assertEquals(true, instanceObjectType0.hasReferenceName());
      assertEquals(false, instanceObjectType0.isResolved());
      assertEquals(false, instanceObjectType0.isBooleanValueType());
      assertEquals(false, instanceObjectType0.isFunctionType());
      assertEquals(false, instanceObjectType0.isNoObjectType());
      assertEquals(false, instanceObjectType0.isUnionType());
      assertEquals(BooleanLiteralSet.TRUE, instanceObjectType0.getPossibleToBooleanOutcomes());
      assertEquals(false, instanceObjectType0.isAllType());
      assertEquals(false, instanceObjectType0.isVoidType());
      assertEquals(0, scope0.getVarCount());
      assertEquals(true, scope0.isGlobal());
      assertEquals(false, scope0.isLocal());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isQuotedString());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.hasChildren());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(83, node0.getType());
      assertEquals(0, node0.getChildCount());
      assertEquals(0, stack0.size());
      assertEquals(true, stack0.isEmpty());
      assertEquals(true, stack0.empty());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      
      Scope.Var scope_Var0 = scope0.declare(string0, node0, instanceObjectType0, compilerInput0);
      assertNotNull(scope_Var0);
      assertEquals("Circlar dependency detected:{0}", jSSourceFile0.getOriginalPath());
      assertEquals("Circlar dependency detected:{0}", jSSourceFile0.getName());
      assertEquals("Circlar dependency detected:{0}", compilerInput0.getName());
      assertEquals(false, compilerInput0.isExtern());
      assertEquals(false, instanceObjectType0.isNullType());
      assertEquals(false, instanceObjectType0.isTemplateType());
      assertEquals(false, instanceObjectType0.isStringValueType());
      assertEquals(false, instanceObjectType0.isEmptyType());
      assertEquals(false, instanceObjectType0.isNoType());
      assertEquals(false, instanceObjectType0.isRecordType());
      assertEquals(true, instanceObjectType0.isInstanceType());
      assertEquals(false, instanceObjectType0.isNumberValueType());
      assertEquals(true, instanceObjectType0.isNominalType());
      assertEquals(true, instanceObjectType0.hasReferenceName());
      assertEquals(false, instanceObjectType0.isResolved());
      assertEquals(false, instanceObjectType0.isBooleanValueType());
      assertEquals(false, instanceObjectType0.isFunctionType());
      assertEquals(false, instanceObjectType0.isNoObjectType());
      assertEquals(false, instanceObjectType0.isUnionType());
      assertEquals(BooleanLiteralSet.TRUE, instanceObjectType0.getPossibleToBooleanOutcomes());
      assertEquals(false, instanceObjectType0.isAllType());
      assertEquals(false, instanceObjectType0.isVoidType());
      assertEquals(1, scope0.getVarCount());
      assertEquals(true, scope0.isGlobal());
      assertEquals(false, scope0.isLocal());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isQuotedString());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.hasChildren());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(83, node0.getType());
      assertEquals(0, node0.getChildCount());
      assertEquals(0, stack0.size());
      assertEquals(true, stack0.isEmpty());
      assertEquals(true, stack0.empty());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      
      linkedFlowScope0.completeScope(scope0);
      assertEquals(false, instanceObjectType0.isNullType());
      assertEquals(false, instanceObjectType0.isTemplateType());
      assertEquals(false, instanceObjectType0.isStringValueType());
      assertEquals(false, instanceObjectType0.isEmptyType());
      assertEquals(false, instanceObjectType0.isNoType());
      assertEquals(false, instanceObjectType0.isRecordType());
      assertEquals(true, instanceObjectType0.isInstanceType());
      assertEquals(false, instanceObjectType0.isNumberValueType());
      assertEquals(true, instanceObjectType0.isNominalType());
      assertEquals(true, instanceObjectType0.hasReferenceName());
      assertEquals(false, instanceObjectType0.isResolved());
      assertEquals(false, instanceObjectType0.isBooleanValueType());
      assertEquals(false, instanceObjectType0.isFunctionType());
      assertEquals(false, instanceObjectType0.isNoObjectType());
      assertEquals(false, instanceObjectType0.isUnionType());
      assertEquals(BooleanLiteralSet.TRUE, instanceObjectType0.getPossibleToBooleanOutcomes());
      assertEquals(false, instanceObjectType0.isAllType());
      assertEquals(false, instanceObjectType0.isVoidType());
      assertEquals(1, scope0.getVarCount());
      assertEquals(true, scope0.isGlobal());
      assertEquals(false, scope0.isLocal());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isQuotedString());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.hasChildren());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(83, node0.getType());
      assertEquals(0, node0.getChildCount());
      assertEquals(0, stack0.size());
      assertEquals(true, stack0.isEmpty());
      assertEquals(true, stack0.empty());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
  }

  @Test
  public void test06()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      String string0 = "Circlar dependency detected:{0}";
      boolean boolean0 = FileSystemHandling.appendStringToFile(evoSuiteFile0, string0);
      assertFalse(boolean0);
      
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0, boolean0);
      assertNotNull(jSTypeRegistry0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      Stack<JSType> stack0 = new Stack<JSType>();
      assertNotNull(stack0);
      assertEquals("[]", stack0.toString());
      assertEquals(true, stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertEquals(true, stack0.empty());
      assertEquals(0, stack0.size());
      
      Node node0 = jSTypeRegistry0.createParameters((List<JSType>) stack0);
      assertNotNull(node0);
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.hasChildren());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isVarArgs());
      assertEquals(-1, node0.getCharno());
      assertEquals(83, node0.getType());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isOptionalArg());
      assertEquals("[]", stack0.toString());
      assertEquals(true, stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertEquals(true, stack0.empty());
      assertEquals(0, stack0.size());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      JSTypeNative jSTypeNative0 = JSTypeNative.REFERENCE_ERROR_TYPE;
      InstanceObjectType instanceObjectType0 = (InstanceObjectType)jSTypeRegistry0.getNativeObjectType(jSTypeNative0);
      assertNotNull(instanceObjectType0);
      assertEquals(false, instanceObjectType0.isAllType());
      assertEquals(false, instanceObjectType0.isFunctionType());
      assertEquals(false, instanceObjectType0.isStringValueType());
      assertEquals(true, instanceObjectType0.isNominalType());
      assertEquals(false, instanceObjectType0.isNumberValueType());
      assertEquals(false, instanceObjectType0.isNoObjectType());
      assertEquals(false, instanceObjectType0.isEmptyType());
      assertEquals(false, instanceObjectType0.isVoidType());
      assertEquals(false, instanceObjectType0.isNoType());
      assertEquals(false, instanceObjectType0.isRecordType());
      assertEquals(true, instanceObjectType0.hasReferenceName());
      assertEquals(BooleanLiteralSet.TRUE, instanceObjectType0.getPossibleToBooleanOutcomes());
      assertEquals(true, instanceObjectType0.isInstanceType());
      assertEquals(false, instanceObjectType0.isUnionType());
      assertEquals(false, instanceObjectType0.isResolved());
      assertEquals(false, instanceObjectType0.isBooleanValueType());
      assertEquals(false, instanceObjectType0.isTemplateType());
      assertEquals(false, instanceObjectType0.isNullType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      Scope scope0 = new Scope(node0, instanceObjectType0);
      assertNotNull(scope0);
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.hasChildren());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isVarArgs());
      assertEquals(-1, node0.getCharno());
      assertEquals(83, node0.getType());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, instanceObjectType0.isAllType());
      assertEquals(false, instanceObjectType0.isFunctionType());
      assertEquals(false, instanceObjectType0.isStringValueType());
      assertEquals(true, instanceObjectType0.isNominalType());
      assertEquals(false, instanceObjectType0.isNumberValueType());
      assertEquals(false, instanceObjectType0.isNoObjectType());
      assertEquals(false, instanceObjectType0.isEmptyType());
      assertEquals(false, instanceObjectType0.isVoidType());
      assertEquals(false, instanceObjectType0.isNoType());
      assertEquals(false, instanceObjectType0.isRecordType());
      assertEquals(true, instanceObjectType0.hasReferenceName());
      assertEquals(BooleanLiteralSet.TRUE, instanceObjectType0.getPossibleToBooleanOutcomes());
      assertEquals(true, instanceObjectType0.isInstanceType());
      assertEquals(false, instanceObjectType0.isUnionType());
      assertEquals(false, instanceObjectType0.isResolved());
      assertEquals(false, instanceObjectType0.isBooleanValueType());
      assertEquals(false, instanceObjectType0.isTemplateType());
      assertEquals(false, instanceObjectType0.isNullType());
      assertEquals("[]", stack0.toString());
      assertEquals(true, stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertEquals(true, stack0.empty());
      assertEquals(0, stack0.size());
      assertEquals(false, scope0.isLocal());
      assertEquals(0, scope0.getVarCount());
      assertEquals(true, scope0.isGlobal());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      JSSourceFile jSSourceFile0 = JSSourceFile.fromFile(string0);
      assertNotNull(jSSourceFile0);
      assertEquals("Circlar dependency detected:{0}", jSSourceFile0.getName());
      assertEquals("Circlar dependency detected:{0}", jSSourceFile0.getOriginalPath());
      
      CompilerInput compilerInput0 = new CompilerInput(jSSourceFile0);
      assertNotNull(compilerInput0);
      assertEquals("Circlar dependency detected:{0}", compilerInput0.getName());
      assertEquals(false, compilerInput0.isExtern());
      assertEquals("Circlar dependency detected:{0}", jSSourceFile0.getName());
      assertEquals("Circlar dependency detected:{0}", jSSourceFile0.getOriginalPath());
      
      Scope.Var scope_Var0 = scope0.declare(string0, node0, instanceObjectType0, compilerInput0, boolean0);
      assertNotNull(scope_Var0);
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.hasChildren());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isVarArgs());
      assertEquals(-1, node0.getCharno());
      assertEquals(83, node0.getType());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, instanceObjectType0.isAllType());
      assertEquals(false, instanceObjectType0.isFunctionType());
      assertEquals(false, instanceObjectType0.isStringValueType());
      assertEquals(true, instanceObjectType0.isNominalType());
      assertEquals(false, instanceObjectType0.isNumberValueType());
      assertEquals(false, instanceObjectType0.isNoObjectType());
      assertEquals(false, instanceObjectType0.isEmptyType());
      assertEquals(false, instanceObjectType0.isVoidType());
      assertEquals(false, instanceObjectType0.isNoType());
      assertEquals(false, instanceObjectType0.isRecordType());
      assertEquals(true, instanceObjectType0.hasReferenceName());
      assertEquals(BooleanLiteralSet.TRUE, instanceObjectType0.getPossibleToBooleanOutcomes());
      assertEquals(true, instanceObjectType0.isInstanceType());
      assertEquals(false, instanceObjectType0.isUnionType());
      assertEquals(false, instanceObjectType0.isResolved());
      assertEquals(false, instanceObjectType0.isBooleanValueType());
      assertEquals(false, instanceObjectType0.isTemplateType());
      assertEquals(false, instanceObjectType0.isNullType());
      assertEquals("[]", stack0.toString());
      assertEquals(true, stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertEquals(true, stack0.empty());
      assertEquals(0, stack0.size());
      assertEquals("Circlar dependency detected:{0}", compilerInput0.getName());
      assertEquals(false, compilerInput0.isExtern());
      assertEquals(false, scope0.isLocal());
      assertEquals(1, scope0.getVarCount());
      assertEquals(true, scope0.isGlobal());
      assertEquals("Circlar dependency detected:{0}", jSSourceFile0.getName());
      assertEquals("Circlar dependency detected:{0}", jSSourceFile0.getOriginalPath());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope0);
      assertNotNull(linkedFlowScope0);
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.hasChildren());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isVarArgs());
      assertEquals(-1, node0.getCharno());
      assertEquals(83, node0.getType());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, instanceObjectType0.isAllType());
      assertEquals(false, instanceObjectType0.isFunctionType());
      assertEquals(false, instanceObjectType0.isStringValueType());
      assertEquals(true, instanceObjectType0.isNominalType());
      assertEquals(false, instanceObjectType0.isNumberValueType());
      assertEquals(false, instanceObjectType0.isNoObjectType());
      assertEquals(false, instanceObjectType0.isEmptyType());
      assertEquals(false, instanceObjectType0.isVoidType());
      assertEquals(false, instanceObjectType0.isNoType());
      assertEquals(false, instanceObjectType0.isRecordType());
      assertEquals(true, instanceObjectType0.hasReferenceName());
      assertEquals(BooleanLiteralSet.TRUE, instanceObjectType0.getPossibleToBooleanOutcomes());
      assertEquals(true, instanceObjectType0.isInstanceType());
      assertEquals(false, instanceObjectType0.isUnionType());
      assertEquals(false, instanceObjectType0.isResolved());
      assertEquals(false, instanceObjectType0.isBooleanValueType());
      assertEquals(false, instanceObjectType0.isTemplateType());
      assertEquals(false, instanceObjectType0.isNullType());
      assertEquals("[]", stack0.toString());
      assertEquals(true, stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertEquals(true, stack0.empty());
      assertEquals(0, stack0.size());
      assertEquals(false, scope0.isLocal());
      assertEquals(1, scope0.getVarCount());
      assertEquals(true, scope0.isGlobal());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      linkedFlowScope0.completeScope(scope0);
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.hasChildren());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isVarArgs());
      assertEquals(-1, node0.getCharno());
      assertEquals(83, node0.getType());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, instanceObjectType0.isAllType());
      assertEquals(false, instanceObjectType0.isFunctionType());
      assertEquals(false, instanceObjectType0.isStringValueType());
      assertEquals(true, instanceObjectType0.isNominalType());
      assertEquals(false, instanceObjectType0.isNumberValueType());
      assertEquals(false, instanceObjectType0.isNoObjectType());
      assertEquals(false, instanceObjectType0.isEmptyType());
      assertEquals(false, instanceObjectType0.isVoidType());
      assertEquals(false, instanceObjectType0.isNoType());
      assertEquals(false, instanceObjectType0.isRecordType());
      assertEquals(true, instanceObjectType0.hasReferenceName());
      assertEquals(BooleanLiteralSet.TRUE, instanceObjectType0.getPossibleToBooleanOutcomes());
      assertEquals(true, instanceObjectType0.isInstanceType());
      assertEquals(false, instanceObjectType0.isUnionType());
      assertEquals(false, instanceObjectType0.isResolved());
      assertEquals(false, instanceObjectType0.isBooleanValueType());
      assertEquals(false, instanceObjectType0.isTemplateType());
      assertEquals(false, instanceObjectType0.isNullType());
      assertEquals("[]", stack0.toString());
      assertEquals(true, stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertEquals(true, stack0.empty());
      assertEquals(0, stack0.size());
      assertEquals(false, scope0.isLocal());
      assertEquals(1, scope0.getVarCount());
      assertEquals(true, scope0.isGlobal());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
  }

  @Test
  public void test07()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      String string0 = "Circlar dependency detected:{0}";
      boolean boolean0 = FileSystemHandling.appendStringToFile(evoSuiteFile0, string0);
      assertFalse(boolean0);
      
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0, boolean0);
      assertNotNull(jSTypeRegistry0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      Stack<JSType> stack0 = new Stack<JSType>();
      assertNotNull(stack0);
      assertEquals("[]", stack0.toString());
      assertEquals(0, stack0.size());
      assertEquals(true, stack0.empty());
      assertEquals(true, stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      
      Node node0 = jSTypeRegistry0.createParameters((List<JSType>) stack0);
      assertNotNull(node0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals("[]", stack0.toString());
      assertEquals(0, stack0.size());
      assertEquals(true, stack0.empty());
      assertEquals(true, stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.hasChildren());
      assertEquals(83, node0.getType());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isOptionalArg());
      
      JSTypeNative jSTypeNative0 = JSTypeNative.REFERENCE_ERROR_TYPE;
      InstanceObjectType instanceObjectType0 = (InstanceObjectType)jSTypeRegistry0.getNativeObjectType(jSTypeNative0);
      assertNotNull(instanceObjectType0);
      assertEquals(BooleanLiteralSet.TRUE, instanceObjectType0.getPossibleToBooleanOutcomes());
      assertEquals(false, instanceObjectType0.isNoType());
      assertEquals(true, instanceObjectType0.isInstanceType());
      assertEquals(false, instanceObjectType0.isUnionType());
      assertEquals(false, instanceObjectType0.isEmptyType());
      assertEquals(false, instanceObjectType0.isNullType());
      assertEquals(false, instanceObjectType0.isStringValueType());
      assertEquals(false, instanceObjectType0.isResolved());
      assertEquals(false, instanceObjectType0.isVoidType());
      assertEquals(true, instanceObjectType0.hasReferenceName());
      assertEquals(true, instanceObjectType0.isNominalType());
      assertEquals(false, instanceObjectType0.isTemplateType());
      assertEquals(false, instanceObjectType0.isBooleanValueType());
      assertEquals(false, instanceObjectType0.isAllType());
      assertEquals(false, instanceObjectType0.isNoObjectType());
      assertEquals(false, instanceObjectType0.isFunctionType());
      assertEquals(false, instanceObjectType0.isNumberValueType());
      assertEquals(false, instanceObjectType0.isRecordType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      Scope scope0 = new Scope(node0, instanceObjectType0);
      assertNotNull(scope0);
      assertEquals(BooleanLiteralSet.TRUE, instanceObjectType0.getPossibleToBooleanOutcomes());
      assertEquals(false, instanceObjectType0.isNoType());
      assertEquals(true, instanceObjectType0.isInstanceType());
      assertEquals(false, instanceObjectType0.isUnionType());
      assertEquals(false, instanceObjectType0.isEmptyType());
      assertEquals(false, instanceObjectType0.isNullType());
      assertEquals(false, instanceObjectType0.isStringValueType());
      assertEquals(false, instanceObjectType0.isResolved());
      assertEquals(false, instanceObjectType0.isVoidType());
      assertEquals(true, instanceObjectType0.hasReferenceName());
      assertEquals(true, instanceObjectType0.isNominalType());
      assertEquals(false, instanceObjectType0.isTemplateType());
      assertEquals(false, instanceObjectType0.isBooleanValueType());
      assertEquals(false, instanceObjectType0.isAllType());
      assertEquals(false, instanceObjectType0.isNoObjectType());
      assertEquals(false, instanceObjectType0.isFunctionType());
      assertEquals(false, instanceObjectType0.isNumberValueType());
      assertEquals(false, instanceObjectType0.isRecordType());
      assertEquals(true, scope0.isGlobal());
      assertEquals(false, scope0.isLocal());
      assertEquals(0, scope0.getVarCount());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals("[]", stack0.toString());
      assertEquals(0, stack0.size());
      assertEquals(true, stack0.empty());
      assertEquals(true, stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.hasChildren());
      assertEquals(83, node0.getType());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isOptionalArg());
      
      String string1 = "";
      assertNotSame(string1, string0);
      
      LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope0);
      assertNotNull(linkedFlowScope0);
      assertEquals(BooleanLiteralSet.TRUE, instanceObjectType0.getPossibleToBooleanOutcomes());
      assertEquals(false, instanceObjectType0.isNoType());
      assertEquals(true, instanceObjectType0.isInstanceType());
      assertEquals(false, instanceObjectType0.isUnionType());
      assertEquals(false, instanceObjectType0.isEmptyType());
      assertEquals(false, instanceObjectType0.isNullType());
      assertEquals(false, instanceObjectType0.isStringValueType());
      assertEquals(false, instanceObjectType0.isResolved());
      assertEquals(false, instanceObjectType0.isVoidType());
      assertEquals(true, instanceObjectType0.hasReferenceName());
      assertEquals(true, instanceObjectType0.isNominalType());
      assertEquals(false, instanceObjectType0.isTemplateType());
      assertEquals(false, instanceObjectType0.isBooleanValueType());
      assertEquals(false, instanceObjectType0.isAllType());
      assertEquals(false, instanceObjectType0.isNoObjectType());
      assertEquals(false, instanceObjectType0.isFunctionType());
      assertEquals(false, instanceObjectType0.isNumberValueType());
      assertEquals(false, instanceObjectType0.isRecordType());
      assertEquals(true, scope0.isGlobal());
      assertEquals(false, scope0.isLocal());
      assertEquals(0, scope0.getVarCount());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals("[]", stack0.toString());
      assertEquals(0, stack0.size());
      assertEquals(true, stack0.empty());
      assertEquals(true, stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.hasChildren());
      assertEquals(83, node0.getType());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isOptionalArg());
      assertFalse(string0.equals((Object)string1));
      assertNotSame(string0, string1);
      
      linkedFlowScope0.inferSlotType(string1, (JSType) instanceObjectType0);
      assertEquals(BooleanLiteralSet.TRUE, instanceObjectType0.getPossibleToBooleanOutcomes());
      assertEquals(false, instanceObjectType0.isNoType());
      assertEquals(true, instanceObjectType0.isInstanceType());
      assertEquals(false, instanceObjectType0.isUnionType());
      assertEquals(false, instanceObjectType0.isEmptyType());
      assertEquals(false, instanceObjectType0.isNullType());
      assertEquals(false, instanceObjectType0.isStringValueType());
      assertEquals(false, instanceObjectType0.isResolved());
      assertEquals(false, instanceObjectType0.isVoidType());
      assertEquals(true, instanceObjectType0.hasReferenceName());
      assertEquals(true, instanceObjectType0.isNominalType());
      assertEquals(false, instanceObjectType0.isTemplateType());
      assertEquals(false, instanceObjectType0.isBooleanValueType());
      assertEquals(false, instanceObjectType0.isAllType());
      assertEquals(false, instanceObjectType0.isNoObjectType());
      assertEquals(false, instanceObjectType0.isFunctionType());
      assertEquals(false, instanceObjectType0.isNumberValueType());
      assertEquals(false, instanceObjectType0.isRecordType());
      assertEquals(true, scope0.isGlobal());
      assertEquals(false, scope0.isLocal());
      assertEquals(0, scope0.getVarCount());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals("[]", stack0.toString());
      assertEquals(0, stack0.size());
      assertEquals(true, stack0.empty());
      assertEquals(true, stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.hasChildren());
      assertEquals(83, node0.getType());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isOptionalArg());
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      
      linkedFlowScope0.inferSlotType(string0, (JSType) instanceObjectType0);
      assertEquals(BooleanLiteralSet.TRUE, instanceObjectType0.getPossibleToBooleanOutcomes());
      assertEquals(false, instanceObjectType0.isNoType());
      assertEquals(true, instanceObjectType0.isInstanceType());
      assertEquals(false, instanceObjectType0.isUnionType());
      assertEquals(false, instanceObjectType0.isEmptyType());
      assertEquals(false, instanceObjectType0.isNullType());
      assertEquals(false, instanceObjectType0.isStringValueType());
      assertEquals(false, instanceObjectType0.isResolved());
      assertEquals(false, instanceObjectType0.isVoidType());
      assertEquals(true, instanceObjectType0.hasReferenceName());
      assertEquals(true, instanceObjectType0.isNominalType());
      assertEquals(false, instanceObjectType0.isTemplateType());
      assertEquals(false, instanceObjectType0.isBooleanValueType());
      assertEquals(false, instanceObjectType0.isAllType());
      assertEquals(false, instanceObjectType0.isNoObjectType());
      assertEquals(false, instanceObjectType0.isFunctionType());
      assertEquals(false, instanceObjectType0.isNumberValueType());
      assertEquals(false, instanceObjectType0.isRecordType());
      assertEquals(true, scope0.isGlobal());
      assertEquals(false, scope0.isLocal());
      assertEquals(0, scope0.getVarCount());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals("[]", stack0.toString());
      assertEquals(0, stack0.size());
      assertEquals(true, stack0.empty());
      assertEquals(true, stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.hasChildren());
      assertEquals(83, node0.getType());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isOptionalArg());
      assertFalse(string0.equals((Object)string1));
      assertNotSame(string0, string1);
      
      LinkedFlowScope linkedFlowScope1 = LinkedFlowScope.createEntryLattice(scope0);
      assertNotNull(linkedFlowScope1);
      assertEquals(BooleanLiteralSet.TRUE, instanceObjectType0.getPossibleToBooleanOutcomes());
      assertEquals(false, instanceObjectType0.isNoType());
      assertEquals(true, instanceObjectType0.isInstanceType());
      assertEquals(false, instanceObjectType0.isUnionType());
      assertEquals(false, instanceObjectType0.isEmptyType());
      assertEquals(false, instanceObjectType0.isNullType());
      assertEquals(false, instanceObjectType0.isStringValueType());
      assertEquals(false, instanceObjectType0.isResolved());
      assertEquals(false, instanceObjectType0.isVoidType());
      assertEquals(true, instanceObjectType0.hasReferenceName());
      assertEquals(true, instanceObjectType0.isNominalType());
      assertEquals(false, instanceObjectType0.isTemplateType());
      assertEquals(false, instanceObjectType0.isBooleanValueType());
      assertEquals(false, instanceObjectType0.isAllType());
      assertEquals(false, instanceObjectType0.isNoObjectType());
      assertEquals(false, instanceObjectType0.isFunctionType());
      assertEquals(false, instanceObjectType0.isNumberValueType());
      assertEquals(false, instanceObjectType0.isRecordType());
      assertEquals(true, scope0.isGlobal());
      assertEquals(false, scope0.isLocal());
      assertEquals(0, scope0.getVarCount());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals("[]", stack0.toString());
      assertEquals(0, stack0.size());
      assertEquals(true, stack0.empty());
      assertEquals(true, stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.hasChildren());
      assertEquals(83, node0.getType());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isOptionalArg());
      assertFalse(linkedFlowScope1.equals((Object)linkedFlowScope0));
      assertFalse(string0.equals((Object)string1));
      assertNotSame(linkedFlowScope1, linkedFlowScope0);
      assertNotSame(string0, string1);
      
      StaticSlot<JSType> staticSlot0 = linkedFlowScope0.findUniqueRefinedSlot((FlowScope) linkedFlowScope1);
      assertNull(staticSlot0);
      assertEquals(BooleanLiteralSet.TRUE, instanceObjectType0.getPossibleToBooleanOutcomes());
      assertEquals(false, instanceObjectType0.isNoType());
      assertEquals(true, instanceObjectType0.isInstanceType());
      assertEquals(false, instanceObjectType0.isUnionType());
      assertEquals(false, instanceObjectType0.isEmptyType());
      assertEquals(false, instanceObjectType0.isNullType());
      assertEquals(false, instanceObjectType0.isStringValueType());
      assertEquals(false, instanceObjectType0.isResolved());
      assertEquals(false, instanceObjectType0.isVoidType());
      assertEquals(true, instanceObjectType0.hasReferenceName());
      assertEquals(true, instanceObjectType0.isNominalType());
      assertEquals(false, instanceObjectType0.isTemplateType());
      assertEquals(false, instanceObjectType0.isBooleanValueType());
      assertEquals(false, instanceObjectType0.isAllType());
      assertEquals(false, instanceObjectType0.isNoObjectType());
      assertEquals(false, instanceObjectType0.isFunctionType());
      assertEquals(false, instanceObjectType0.isNumberValueType());
      assertEquals(false, instanceObjectType0.isRecordType());
      assertEquals(true, scope0.isGlobal());
      assertEquals(false, scope0.isLocal());
      assertEquals(0, scope0.getVarCount());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals("[]", stack0.toString());
      assertEquals(0, stack0.size());
      assertEquals(true, stack0.empty());
      assertEquals(true, stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.hasChildren());
      assertEquals(83, node0.getType());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isOptionalArg());
      assertFalse(linkedFlowScope1.equals((Object)linkedFlowScope0));
      assertFalse(linkedFlowScope0.equals((Object)linkedFlowScope1));
      assertFalse(string0.equals((Object)string1));
      assertNotSame(linkedFlowScope1, linkedFlowScope0);
      assertNotSame(linkedFlowScope0, linkedFlowScope1);
      assertNotSame(string0, string1);
  }

  @Test
  public void test08()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      String string0 = "Circlar dependency detected:{0}";
      boolean boolean0 = FileSystemHandling.appendStringToFile(evoSuiteFile0, string0);
      assertFalse(boolean0);
      
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0, boolean0);
      assertNotNull(jSTypeRegistry0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      Stack<JSType> stack0 = new Stack<JSType>();
      assertNotNull(stack0);
      assertEquals(true, stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertEquals(true, stack0.empty());
      assertEquals(0, stack0.size());
      
      Node node0 = jSTypeRegistry0.createParameters((List<JSType>) stack0);
      assertNotNull(node0);
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(-1, node0.getLineno());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.hasChildren());
      assertEquals(0, node0.getChildCount());
      assertEquals(83, node0.getType());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(true, stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertEquals(true, stack0.empty());
      assertEquals(0, stack0.size());
      
      JSTypeNative jSTypeNative0 = JSTypeNative.REFERENCE_ERROR_TYPE;
      InstanceObjectType instanceObjectType0 = (InstanceObjectType)jSTypeRegistry0.getNativeObjectType(jSTypeNative0);
      assertNotNull(instanceObjectType0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(BooleanLiteralSet.TRUE, instanceObjectType0.getPossibleToBooleanOutcomes());
      assertEquals(false, instanceObjectType0.isAllType());
      assertEquals(false, instanceObjectType0.isEmptyType());
      assertEquals(true, instanceObjectType0.isNominalType());
      assertEquals(true, instanceObjectType0.isInstanceType());
      assertEquals(false, instanceObjectType0.isNoType());
      assertEquals(false, instanceObjectType0.isNoObjectType());
      assertEquals(false, instanceObjectType0.isRecordType());
      assertEquals(false, instanceObjectType0.isBooleanValueType());
      assertEquals(false, instanceObjectType0.isFunctionType());
      assertEquals(true, instanceObjectType0.hasReferenceName());
      assertEquals(false, instanceObjectType0.isTemplateType());
      assertEquals(false, instanceObjectType0.isVoidType());
      assertEquals(false, instanceObjectType0.isNumberValueType());
      assertEquals(false, instanceObjectType0.isStringValueType());
      assertEquals(false, instanceObjectType0.isResolved());
      assertEquals(false, instanceObjectType0.isUnionType());
      assertEquals(false, instanceObjectType0.isNullType());
      
      Scope scope0 = new Scope(node0, instanceObjectType0);
      assertNotNull(scope0);
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(-1, node0.getLineno());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.hasChildren());
      assertEquals(0, node0.getChildCount());
      assertEquals(83, node0.getType());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(0, scope0.getVarCount());
      assertEquals(true, scope0.isGlobal());
      assertEquals(false, scope0.isLocal());
      assertEquals(BooleanLiteralSet.TRUE, instanceObjectType0.getPossibleToBooleanOutcomes());
      assertEquals(false, instanceObjectType0.isAllType());
      assertEquals(false, instanceObjectType0.isEmptyType());
      assertEquals(true, instanceObjectType0.isNominalType());
      assertEquals(true, instanceObjectType0.isInstanceType());
      assertEquals(false, instanceObjectType0.isNoType());
      assertEquals(false, instanceObjectType0.isNoObjectType());
      assertEquals(false, instanceObjectType0.isRecordType());
      assertEquals(false, instanceObjectType0.isBooleanValueType());
      assertEquals(false, instanceObjectType0.isFunctionType());
      assertEquals(true, instanceObjectType0.hasReferenceName());
      assertEquals(false, instanceObjectType0.isTemplateType());
      assertEquals(false, instanceObjectType0.isVoidType());
      assertEquals(false, instanceObjectType0.isNumberValueType());
      assertEquals(false, instanceObjectType0.isStringValueType());
      assertEquals(false, instanceObjectType0.isResolved());
      assertEquals(false, instanceObjectType0.isUnionType());
      assertEquals(false, instanceObjectType0.isNullType());
      assertEquals(true, stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertEquals(true, stack0.empty());
      assertEquals(0, stack0.size());
      
      LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope0);
      assertNotNull(linkedFlowScope0);
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(-1, node0.getLineno());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.hasChildren());
      assertEquals(0, node0.getChildCount());
      assertEquals(83, node0.getType());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(0, scope0.getVarCount());
      assertEquals(true, scope0.isGlobal());
      assertEquals(false, scope0.isLocal());
      assertEquals(BooleanLiteralSet.TRUE, instanceObjectType0.getPossibleToBooleanOutcomes());
      assertEquals(false, instanceObjectType0.isAllType());
      assertEquals(false, instanceObjectType0.isEmptyType());
      assertEquals(true, instanceObjectType0.isNominalType());
      assertEquals(true, instanceObjectType0.isInstanceType());
      assertEquals(false, instanceObjectType0.isNoType());
      assertEquals(false, instanceObjectType0.isNoObjectType());
      assertEquals(false, instanceObjectType0.isRecordType());
      assertEquals(false, instanceObjectType0.isBooleanValueType());
      assertEquals(false, instanceObjectType0.isFunctionType());
      assertEquals(true, instanceObjectType0.hasReferenceName());
      assertEquals(false, instanceObjectType0.isTemplateType());
      assertEquals(false, instanceObjectType0.isVoidType());
      assertEquals(false, instanceObjectType0.isNumberValueType());
      assertEquals(false, instanceObjectType0.isStringValueType());
      assertEquals(false, instanceObjectType0.isResolved());
      assertEquals(false, instanceObjectType0.isUnionType());
      assertEquals(false, instanceObjectType0.isNullType());
      assertEquals(true, stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertEquals(true, stack0.empty());
      assertEquals(0, stack0.size());
      
      linkedFlowScope0.inferSlotType(string0, (JSType) instanceObjectType0);
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(-1, node0.getLineno());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.hasChildren());
      assertEquals(0, node0.getChildCount());
      assertEquals(83, node0.getType());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(0, scope0.getVarCount());
      assertEquals(true, scope0.isGlobal());
      assertEquals(false, scope0.isLocal());
      assertEquals(BooleanLiteralSet.TRUE, instanceObjectType0.getPossibleToBooleanOutcomes());
      assertEquals(false, instanceObjectType0.isAllType());
      assertEquals(false, instanceObjectType0.isEmptyType());
      assertEquals(true, instanceObjectType0.isNominalType());
      assertEquals(true, instanceObjectType0.isInstanceType());
      assertEquals(false, instanceObjectType0.isNoType());
      assertEquals(false, instanceObjectType0.isNoObjectType());
      assertEquals(false, instanceObjectType0.isRecordType());
      assertEquals(false, instanceObjectType0.isBooleanValueType());
      assertEquals(false, instanceObjectType0.isFunctionType());
      assertEquals(true, instanceObjectType0.hasReferenceName());
      assertEquals(false, instanceObjectType0.isTemplateType());
      assertEquals(false, instanceObjectType0.isVoidType());
      assertEquals(false, instanceObjectType0.isNumberValueType());
      assertEquals(false, instanceObjectType0.isStringValueType());
      assertEquals(false, instanceObjectType0.isResolved());
      assertEquals(false, instanceObjectType0.isUnionType());
      assertEquals(false, instanceObjectType0.isNullType());
      assertEquals(true, stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertEquals(true, stack0.empty());
      assertEquals(0, stack0.size());
      
      linkedFlowScope0.inferSlotType(string0, (JSType) instanceObjectType0);
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(-1, node0.getLineno());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.hasChildren());
      assertEquals(0, node0.getChildCount());
      assertEquals(83, node0.getType());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(0, scope0.getVarCount());
      assertEquals(true, scope0.isGlobal());
      assertEquals(false, scope0.isLocal());
      assertEquals(BooleanLiteralSet.TRUE, instanceObjectType0.getPossibleToBooleanOutcomes());
      assertEquals(false, instanceObjectType0.isAllType());
      assertEquals(false, instanceObjectType0.isEmptyType());
      assertEquals(true, instanceObjectType0.isNominalType());
      assertEquals(true, instanceObjectType0.isInstanceType());
      assertEquals(false, instanceObjectType0.isNoType());
      assertEquals(false, instanceObjectType0.isNoObjectType());
      assertEquals(false, instanceObjectType0.isRecordType());
      assertEquals(false, instanceObjectType0.isBooleanValueType());
      assertEquals(false, instanceObjectType0.isFunctionType());
      assertEquals(true, instanceObjectType0.hasReferenceName());
      assertEquals(false, instanceObjectType0.isTemplateType());
      assertEquals(false, instanceObjectType0.isVoidType());
      assertEquals(false, instanceObjectType0.isNumberValueType());
      assertEquals(false, instanceObjectType0.isStringValueType());
      assertEquals(false, instanceObjectType0.isResolved());
      assertEquals(false, instanceObjectType0.isUnionType());
      assertEquals(false, instanceObjectType0.isNullType());
      assertEquals(true, stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertEquals(true, stack0.empty());
      assertEquals(0, stack0.size());
      
      LinkedFlowScope linkedFlowScope1 = LinkedFlowScope.createEntryLattice(scope0);
      assertNotNull(linkedFlowScope1);
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(-1, node0.getLineno());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.hasChildren());
      assertEquals(0, node0.getChildCount());
      assertEquals(83, node0.getType());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(0, scope0.getVarCount());
      assertEquals(true, scope0.isGlobal());
      assertEquals(false, scope0.isLocal());
      assertEquals(BooleanLiteralSet.TRUE, instanceObjectType0.getPossibleToBooleanOutcomes());
      assertEquals(false, instanceObjectType0.isAllType());
      assertEquals(false, instanceObjectType0.isEmptyType());
      assertEquals(true, instanceObjectType0.isNominalType());
      assertEquals(true, instanceObjectType0.isInstanceType());
      assertEquals(false, instanceObjectType0.isNoType());
      assertEquals(false, instanceObjectType0.isNoObjectType());
      assertEquals(false, instanceObjectType0.isRecordType());
      assertEquals(false, instanceObjectType0.isBooleanValueType());
      assertEquals(false, instanceObjectType0.isFunctionType());
      assertEquals(true, instanceObjectType0.hasReferenceName());
      assertEquals(false, instanceObjectType0.isTemplateType());
      assertEquals(false, instanceObjectType0.isVoidType());
      assertEquals(false, instanceObjectType0.isNumberValueType());
      assertEquals(false, instanceObjectType0.isStringValueType());
      assertEquals(false, instanceObjectType0.isResolved());
      assertEquals(false, instanceObjectType0.isUnionType());
      assertEquals(false, instanceObjectType0.isNullType());
      assertEquals(true, stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertEquals(true, stack0.empty());
      assertEquals(0, stack0.size());
      assertFalse(linkedFlowScope1.equals((Object)linkedFlowScope0));
      assertNotSame(linkedFlowScope1, linkedFlowScope0);
      
      // Undeclared exception!
      try {
        StaticSlot<JSType> staticSlot0 = linkedFlowScope0.findUniqueRefinedSlot((FlowScope) linkedFlowScope1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test09()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      String string0 = "Circlar dependency detected:{0}";
      boolean boolean0 = FileSystemHandling.appendStringToFile(evoSuiteFile0, string0);
      assertFalse(boolean0);
      
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0, boolean0);
      assertNotNull(jSTypeRegistry0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      Stack<JSType> stack0 = new Stack<JSType>();
      assertNotNull(stack0);
      assertEquals(true, stack0.empty());
      assertEquals("[]", stack0.toString());
      assertEquals(true, stack0.isEmpty());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      
      Node node0 = jSTypeRegistry0.createParameters((List<JSType>) stack0);
      assertNotNull(node0);
      assertEquals(true, stack0.empty());
      assertEquals("[]", stack0.toString());
      assertEquals(true, stack0.isEmpty());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(83, node0.getType());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isVarArgs());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isOptionalArg());
      
      JSTypeNative jSTypeNative0 = JSTypeNative.REFERENCE_ERROR_TYPE;
      InstanceObjectType instanceObjectType0 = (InstanceObjectType)jSTypeRegistry0.getNativeObjectType(jSTypeNative0);
      assertNotNull(instanceObjectType0);
      assertEquals(false, instanceObjectType0.isVoidType());
      assertEquals(false, instanceObjectType0.isNullType());
      assertEquals(false, instanceObjectType0.isNumberValueType());
      assertEquals(BooleanLiteralSet.TRUE, instanceObjectType0.getPossibleToBooleanOutcomes());
      assertEquals(false, instanceObjectType0.isRecordType());
      assertEquals(true, instanceObjectType0.isNominalType());
      assertEquals(false, instanceObjectType0.isUnionType());
      assertEquals(false, instanceObjectType0.isAllType());
      assertEquals(true, instanceObjectType0.hasReferenceName());
      assertEquals(false, instanceObjectType0.isFunctionType());
      assertEquals(false, instanceObjectType0.isResolved());
      assertEquals(false, instanceObjectType0.isNoType());
      assertEquals(false, instanceObjectType0.isEmptyType());
      assertEquals(false, instanceObjectType0.isTemplateType());
      assertEquals(false, instanceObjectType0.isStringValueType());
      assertEquals(false, instanceObjectType0.isNoObjectType());
      assertEquals(false, instanceObjectType0.isBooleanValueType());
      assertEquals(true, instanceObjectType0.isInstanceType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      Scope scope0 = new Scope(node0, instanceObjectType0);
      assertNotNull(scope0);
      assertEquals(false, instanceObjectType0.isVoidType());
      assertEquals(false, instanceObjectType0.isNullType());
      assertEquals(false, instanceObjectType0.isNumberValueType());
      assertEquals(BooleanLiteralSet.TRUE, instanceObjectType0.getPossibleToBooleanOutcomes());
      assertEquals(false, instanceObjectType0.isRecordType());
      assertEquals(true, instanceObjectType0.isNominalType());
      assertEquals(false, instanceObjectType0.isUnionType());
      assertEquals(false, instanceObjectType0.isAllType());
      assertEquals(true, instanceObjectType0.hasReferenceName());
      assertEquals(false, instanceObjectType0.isFunctionType());
      assertEquals(false, instanceObjectType0.isResolved());
      assertEquals(false, instanceObjectType0.isNoType());
      assertEquals(false, instanceObjectType0.isEmptyType());
      assertEquals(false, instanceObjectType0.isTemplateType());
      assertEquals(false, instanceObjectType0.isStringValueType());
      assertEquals(false, instanceObjectType0.isNoObjectType());
      assertEquals(false, instanceObjectType0.isBooleanValueType());
      assertEquals(true, instanceObjectType0.isInstanceType());
      assertEquals(true, stack0.empty());
      assertEquals("[]", stack0.toString());
      assertEquals(true, stack0.isEmpty());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(true, scope0.isGlobal());
      assertEquals(0, scope0.getVarCount());
      assertEquals(false, scope0.isLocal());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(83, node0.getType());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isVarArgs());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isOptionalArg());
      
      LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope0);
      assertNotNull(linkedFlowScope0);
      assertEquals(false, instanceObjectType0.isVoidType());
      assertEquals(false, instanceObjectType0.isNullType());
      assertEquals(false, instanceObjectType0.isNumberValueType());
      assertEquals(BooleanLiteralSet.TRUE, instanceObjectType0.getPossibleToBooleanOutcomes());
      assertEquals(false, instanceObjectType0.isRecordType());
      assertEquals(true, instanceObjectType0.isNominalType());
      assertEquals(false, instanceObjectType0.isUnionType());
      assertEquals(false, instanceObjectType0.isAllType());
      assertEquals(true, instanceObjectType0.hasReferenceName());
      assertEquals(false, instanceObjectType0.isFunctionType());
      assertEquals(false, instanceObjectType0.isResolved());
      assertEquals(false, instanceObjectType0.isNoType());
      assertEquals(false, instanceObjectType0.isEmptyType());
      assertEquals(false, instanceObjectType0.isTemplateType());
      assertEquals(false, instanceObjectType0.isStringValueType());
      assertEquals(false, instanceObjectType0.isNoObjectType());
      assertEquals(false, instanceObjectType0.isBooleanValueType());
      assertEquals(true, instanceObjectType0.isInstanceType());
      assertEquals(true, stack0.empty());
      assertEquals("[]", stack0.toString());
      assertEquals(true, stack0.isEmpty());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(true, scope0.isGlobal());
      assertEquals(0, scope0.getVarCount());
      assertEquals(false, scope0.isLocal());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(83, node0.getType());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isVarArgs());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isOptionalArg());
      
      LinkedFlowScope linkedFlowScope1 = LinkedFlowScope.createEntryLattice(scope0);
      assertNotNull(linkedFlowScope1);
      assertEquals(false, instanceObjectType0.isVoidType());
      assertEquals(false, instanceObjectType0.isNullType());
      assertEquals(false, instanceObjectType0.isNumberValueType());
      assertEquals(BooleanLiteralSet.TRUE, instanceObjectType0.getPossibleToBooleanOutcomes());
      assertEquals(false, instanceObjectType0.isRecordType());
      assertEquals(true, instanceObjectType0.isNominalType());
      assertEquals(false, instanceObjectType0.isUnionType());
      assertEquals(false, instanceObjectType0.isAllType());
      assertEquals(true, instanceObjectType0.hasReferenceName());
      assertEquals(false, instanceObjectType0.isFunctionType());
      assertEquals(false, instanceObjectType0.isResolved());
      assertEquals(false, instanceObjectType0.isNoType());
      assertEquals(false, instanceObjectType0.isEmptyType());
      assertEquals(false, instanceObjectType0.isTemplateType());
      assertEquals(false, instanceObjectType0.isStringValueType());
      assertEquals(false, instanceObjectType0.isNoObjectType());
      assertEquals(false, instanceObjectType0.isBooleanValueType());
      assertEquals(true, instanceObjectType0.isInstanceType());
      assertEquals(true, stack0.empty());
      assertEquals("[]", stack0.toString());
      assertEquals(true, stack0.isEmpty());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(true, scope0.isGlobal());
      assertEquals(0, scope0.getVarCount());
      assertEquals(false, scope0.isLocal());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(83, node0.getType());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isVarArgs());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isOptionalArg());
      assertTrue(linkedFlowScope1.equals((Object)linkedFlowScope0));
      assertNotSame(linkedFlowScope1, linkedFlowScope0);
      
      // Undeclared exception!
      try {
        StaticSlot<JSType> staticSlot0 = linkedFlowScope0.findUniqueRefinedSlot((FlowScope) linkedFlowScope1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test10()  throws Throwable  {
      Scope scope0 = null;
      LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope0);
      assertNotNull(linkedFlowScope0);
      
      String string0 = "";
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      JSTypeNative jSTypeNative0 = JSTypeNative.DATE_FUNCTION_TYPE;
      FunctionType functionType0 = jSTypeRegistry0.getNativeFunctionType(jSTypeNative0);
      assertNotNull(functionType0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, functionType0.isVoidType());
      assertEquals(true, functionType0.hasCachedValues());
      assertEquals(false, functionType0.isUnionType());
      assertNull(functionType0.getTemplateTypeName());
      assertEquals(false, functionType0.isOrdinaryFunction());
      assertEquals(false, functionType0.isAllType());
      assertEquals(false, functionType0.isNullType());
      assertEquals(false, functionType0.isEmptyType());
      assertEquals(false, functionType0.isTemplateType());
      assertEquals(false, functionType0.isNoType());
      assertEquals(true, functionType0.canBeCalled());
      assertEquals(false, functionType0.isStringValueType());
      assertEquals(true, functionType0.hasInstanceType());
      assertEquals(false, functionType0.isInterface());
      assertEquals(false, functionType0.isNoObjectType());
      assertEquals(false, functionType0.isResolved());
      assertEquals(false, functionType0.isRecordType());
      assertEquals(true, functionType0.isConstructor());
      assertEquals(false, functionType0.isBooleanValueType());
      assertEquals(false, functionType0.isNumberValueType());
      assertEquals(7, functionType0.getMaxArguments());
      assertEquals(true, functionType0.isFunctionType());
      assertEquals(false, functionType0.isReturnTypeInferred());
      
      linkedFlowScope0.inferSlotType(string0, (JSType) functionType0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, functionType0.isVoidType());
      assertEquals(true, functionType0.hasCachedValues());
      assertEquals(false, functionType0.isUnionType());
      assertNull(functionType0.getTemplateTypeName());
      assertEquals(false, functionType0.isOrdinaryFunction());
      assertEquals(false, functionType0.isAllType());
      assertEquals(false, functionType0.isNullType());
      assertEquals(false, functionType0.isEmptyType());
      assertEquals(false, functionType0.isTemplateType());
      assertEquals(false, functionType0.isNoType());
      assertEquals(true, functionType0.canBeCalled());
      assertEquals(false, functionType0.isStringValueType());
      assertEquals(true, functionType0.hasInstanceType());
      assertEquals(false, functionType0.isInterface());
      assertEquals(false, functionType0.isNoObjectType());
      assertEquals(false, functionType0.isResolved());
      assertEquals(false, functionType0.isRecordType());
      assertEquals(true, functionType0.isConstructor());
      assertEquals(false, functionType0.isBooleanValueType());
      assertEquals(false, functionType0.isNumberValueType());
      assertEquals(7, functionType0.getMaxArguments());
      assertEquals(true, functionType0.isFunctionType());
      assertEquals(false, functionType0.isReturnTypeInferred());
      
      String string1 = "CU3/UGYyfXsTtK&-](Q";
      assertNotSame(string1, string0);
      
      linkedFlowScope0.inferSlotType(string1, (JSType) functionType0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, functionType0.isVoidType());
      assertEquals(true, functionType0.hasCachedValues());
      assertEquals(false, functionType0.isUnionType());
      assertNull(functionType0.getTemplateTypeName());
      assertEquals(false, functionType0.isOrdinaryFunction());
      assertEquals(false, functionType0.isAllType());
      assertEquals(false, functionType0.isNullType());
      assertEquals(false, functionType0.isEmptyType());
      assertEquals(false, functionType0.isTemplateType());
      assertEquals(false, functionType0.isNoType());
      assertEquals(true, functionType0.canBeCalled());
      assertEquals(false, functionType0.isStringValueType());
      assertEquals(true, functionType0.hasInstanceType());
      assertEquals(false, functionType0.isInterface());
      assertEquals(false, functionType0.isNoObjectType());
      assertEquals(false, functionType0.isResolved());
      assertEquals(false, functionType0.isRecordType());
      assertEquals(true, functionType0.isConstructor());
      assertEquals(false, functionType0.isBooleanValueType());
      assertEquals(false, functionType0.isNumberValueType());
      assertEquals(7, functionType0.getMaxArguments());
      assertEquals(true, functionType0.isFunctionType());
      assertEquals(false, functionType0.isReturnTypeInferred());
      assertFalse(string1.equals((Object)string0));
      assertNotSame(string1, string0);
      
      StaticSlot<JSType> staticSlot0 = linkedFlowScope0.getSlot(string0);
      assertNotNull(staticSlot0);
      assertEquals("", staticSlot0.getName());
      assertEquals(true, staticSlot0.isTypeInferred());
      assertFalse(string0.equals((Object)string1));
      assertNotSame(string0, string1);
  }

  @Test
  public void test11()  throws Throwable  {
      Node node0 = null;
      JSType jSType0 = null;
      ObjectType objectType0 = ObjectType.cast(jSType0);
      assertNull(objectType0);
      
      Scope scope0 = new Scope(node0, objectType0);
      assertNotNull(scope0);
      assertEquals(0, scope0.getVarCount());
      assertEquals(true, scope0.isGlobal());
      assertEquals(false, scope0.isLocal());
      
      LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope0);
      assertNotNull(linkedFlowScope0);
      assertEquals(0, scope0.getVarCount());
      assertEquals(true, scope0.isGlobal());
      assertEquals(false, scope0.isLocal());
      
      String string0 = "com.google.javascript.jscomp.LinkedFlowScope";
      StaticSlot<JSType> staticSlot0 = linkedFlowScope0.getSlot(string0);
      assertNull(staticSlot0);
      assertEquals(0, scope0.getVarCount());
      assertEquals(true, scope0.isGlobal());
      assertEquals(false, scope0.isLocal());
  }

  @Test
  public void test12()  throws Throwable  {
      boolean boolean0 = false;
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0, boolean0);
      assertNotNull(jSTypeRegistry0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      Stack<JSType> stack0 = new Stack<JSType>();
      assertNotNull(stack0);
      assertEquals(true, stack0.isEmpty());
      assertEquals(0, stack0.size());
      assertEquals(true, stack0.empty());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      
      Node node0 = jSTypeRegistry0.createParameters((List<JSType>) stack0);
      assertNotNull(node0);
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.hasOneChild());
      assertEquals(83, node0.getType());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(-1, node0.getLineno());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(true, stack0.isEmpty());
      assertEquals(0, stack0.size());
      assertEquals(true, stack0.empty());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      JSTypeNative jSTypeNative0 = JSTypeNative.REFERENCE_ERROR_TYPE;
      InstanceObjectType instanceObjectType0 = (InstanceObjectType)jSTypeRegistry0.getNativeObjectType(jSTypeNative0);
      assertNotNull(instanceObjectType0);
      assertEquals(false, instanceObjectType0.isResolved());
      assertEquals(true, instanceObjectType0.isInstanceType());
      assertEquals(false, instanceObjectType0.isNullType());
      assertEquals(false, instanceObjectType0.isVoidType());
      assertEquals(true, instanceObjectType0.isNominalType());
      assertEquals(false, instanceObjectType0.isTemplateType());
      assertEquals(false, instanceObjectType0.isStringValueType());
      assertEquals(true, instanceObjectType0.hasReferenceName());
      assertEquals(BooleanLiteralSet.TRUE, instanceObjectType0.getPossibleToBooleanOutcomes());
      assertEquals(false, instanceObjectType0.isNoType());
      assertEquals(false, instanceObjectType0.isEmptyType());
      assertEquals(false, instanceObjectType0.isBooleanValueType());
      assertEquals(false, instanceObjectType0.isAllType());
      assertEquals(false, instanceObjectType0.isNoObjectType());
      assertEquals(false, instanceObjectType0.isUnionType());
      assertEquals(false, instanceObjectType0.isFunctionType());
      assertEquals(false, instanceObjectType0.isNumberValueType());
      assertEquals(false, instanceObjectType0.isRecordType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      Scope scope0 = new Scope(node0, instanceObjectType0);
      assertNotNull(scope0);
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.hasOneChild());
      assertEquals(83, node0.getType());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(-1, node0.getLineno());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(true, stack0.isEmpty());
      assertEquals(0, stack0.size());
      assertEquals(true, stack0.empty());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertEquals(false, instanceObjectType0.isResolved());
      assertEquals(true, instanceObjectType0.isInstanceType());
      assertEquals(false, instanceObjectType0.isNullType());
      assertEquals(false, instanceObjectType0.isVoidType());
      assertEquals(true, instanceObjectType0.isNominalType());
      assertEquals(false, instanceObjectType0.isTemplateType());
      assertEquals(false, instanceObjectType0.isStringValueType());
      assertEquals(true, instanceObjectType0.hasReferenceName());
      assertEquals(BooleanLiteralSet.TRUE, instanceObjectType0.getPossibleToBooleanOutcomes());
      assertEquals(false, instanceObjectType0.isNoType());
      assertEquals(false, instanceObjectType0.isEmptyType());
      assertEquals(false, instanceObjectType0.isBooleanValueType());
      assertEquals(false, instanceObjectType0.isAllType());
      assertEquals(false, instanceObjectType0.isNoObjectType());
      assertEquals(false, instanceObjectType0.isUnionType());
      assertEquals(false, instanceObjectType0.isFunctionType());
      assertEquals(false, instanceObjectType0.isNumberValueType());
      assertEquals(false, instanceObjectType0.isRecordType());
      assertEquals(false, scope0.isLocal());
      assertEquals(0, scope0.getVarCount());
      assertEquals(true, scope0.isGlobal());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope0);
      assertNotNull(linkedFlowScope0);
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.hasOneChild());
      assertEquals(83, node0.getType());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(-1, node0.getLineno());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(true, stack0.isEmpty());
      assertEquals(0, stack0.size());
      assertEquals(true, stack0.empty());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertEquals(false, instanceObjectType0.isResolved());
      assertEquals(true, instanceObjectType0.isInstanceType());
      assertEquals(false, instanceObjectType0.isNullType());
      assertEquals(false, instanceObjectType0.isVoidType());
      assertEquals(true, instanceObjectType0.isNominalType());
      assertEquals(false, instanceObjectType0.isTemplateType());
      assertEquals(false, instanceObjectType0.isStringValueType());
      assertEquals(true, instanceObjectType0.hasReferenceName());
      assertEquals(BooleanLiteralSet.TRUE, instanceObjectType0.getPossibleToBooleanOutcomes());
      assertEquals(false, instanceObjectType0.isNoType());
      assertEquals(false, instanceObjectType0.isEmptyType());
      assertEquals(false, instanceObjectType0.isBooleanValueType());
      assertEquals(false, instanceObjectType0.isAllType());
      assertEquals(false, instanceObjectType0.isNoObjectType());
      assertEquals(false, instanceObjectType0.isUnionType());
      assertEquals(false, instanceObjectType0.isFunctionType());
      assertEquals(false, instanceObjectType0.isNumberValueType());
      assertEquals(false, instanceObjectType0.isRecordType());
      assertEquals(false, scope0.isLocal());
      assertEquals(0, scope0.getVarCount());
      assertEquals(true, scope0.isGlobal());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      String string0 = "sFlw<=*Wax6d*p";
      linkedFlowScope0.inferQualifiedSlot(string0, (JSType) instanceObjectType0, (JSType) instanceObjectType0);
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.hasOneChild());
      assertEquals(83, node0.getType());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(-1, node0.getLineno());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(true, stack0.isEmpty());
      assertEquals(0, stack0.size());
      assertEquals(true, stack0.empty());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertEquals(false, instanceObjectType0.isResolved());
      assertEquals(true, instanceObjectType0.isInstanceType());
      assertEquals(false, instanceObjectType0.isNullType());
      assertEquals(false, instanceObjectType0.isVoidType());
      assertEquals(true, instanceObjectType0.isNominalType());
      assertEquals(false, instanceObjectType0.isTemplateType());
      assertEquals(false, instanceObjectType0.isStringValueType());
      assertEquals(true, instanceObjectType0.hasReferenceName());
      assertEquals(BooleanLiteralSet.TRUE, instanceObjectType0.getPossibleToBooleanOutcomes());
      assertEquals(false, instanceObjectType0.isNoType());
      assertEquals(false, instanceObjectType0.isEmptyType());
      assertEquals(false, instanceObjectType0.isBooleanValueType());
      assertEquals(false, instanceObjectType0.isAllType());
      assertEquals(false, instanceObjectType0.isNoObjectType());
      assertEquals(false, instanceObjectType0.isUnionType());
      assertEquals(false, instanceObjectType0.isFunctionType());
      assertEquals(false, instanceObjectType0.isNumberValueType());
      assertEquals(false, instanceObjectType0.isRecordType());
      assertEquals(false, scope0.isLocal());
      assertEquals(0, scope0.getVarCount());
      assertEquals(true, scope0.isGlobal());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
  }

  @Test
  public void test13()  throws Throwable  {
      Scope scope0 = null;
      LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope0);
      assertNotNull(linkedFlowScope0);
      
      // Undeclared exception!
      try {
        StaticScope<JSType> staticScope0 = linkedFlowScope0.getParentScope();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test14()  throws Throwable  {
      Scope scope0 = null;
      LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope0);
      assertNotNull(linkedFlowScope0);
      
      // Undeclared exception!
      try {
        JSType jSType0 = linkedFlowScope0.getTypeOfThis();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test15()  throws Throwable  {
      Scope scope0 = null;
      LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope0);
      assertNotNull(linkedFlowScope0);
      
      String string0 = null;
      // Undeclared exception!
      try {
        StaticSlot<JSType> staticSlot0 = linkedFlowScope0.getOwnSlot(string0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
}
