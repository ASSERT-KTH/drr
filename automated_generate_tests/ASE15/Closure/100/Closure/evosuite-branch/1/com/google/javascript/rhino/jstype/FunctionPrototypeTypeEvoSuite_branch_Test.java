/*
 * This file was automatically generated by EvoSuite
 * Fri Dec 12 00:12:32 GMT 2014
 */

package com.google.javascript.rhino.jstype;

import static org.junit.Assert.*;
import org.junit.Test;
import com.google.javascript.rhino.ErrorReporter;
import com.google.javascript.rhino.SimpleErrorReporter;
import com.google.javascript.rhino.jstype.BooleanLiteralSet;
import com.google.javascript.rhino.jstype.FunctionPrototypeType;
import com.google.javascript.rhino.jstype.FunctionType;
import com.google.javascript.rhino.jstype.JSTypeRegistry;
import com.google.javascript.rhino.jstype.NoObjectType;
import com.google.javascript.rhino.jstype.NoType;
import com.google.javascript.rhino.jstype.ObjectType;
import com.google.javascript.rhino.jstype.UnknownType;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;

import org.junit.runner.RunWith;


public class FunctionPrototypeTypeEvoSuite_branch_Test  {

  @Test
  public void test0()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      NoType noType0 = new NoType(jSTypeRegistry0);
      assertNotNull(noType0);
      assertEquals(false, noType0.isUnionType());
      assertEquals(true, noType0.hasInstanceType());
      assertEquals(false, noType0.isRecordType());
      assertEquals(false, noType0.isVoidType());
      assertEquals(2147483647, noType0.getPropertiesCount());
      assertEquals(false, noType0.isStringValueType());
      assertEquals(true, noType0.isNullable());
      assertNull(noType0.getReferenceName());
      assertNull(noType0.getTemplateTypeName());
      assertEquals(false, noType0.isNullType());
      assertEquals(true, noType0.matchesNumberContext());
      assertEquals(false, noType0.isReturnTypeInferred());
      assertEquals(false, noType0.isNoObjectType());
      assertEquals(true, noType0.isNoType());
      assertEquals(false, noType0.isFunctionType());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noType0.isResolved());
      assertEquals(false, noType0.isInterface());
      assertEquals(false, noType0.hasCachedValues());
      assertEquals(false, noType0.isOrdinaryFunction());
      assertEquals("None", noType0.toString());
      assertEquals(false, noType0.isAllType());
      assertEquals(2147483647, noType0.getMaxArguments());
      assertEquals(true, noType0.matchesStringContext());
      assertEquals(false, noType0.isNumberValueType());
      assertEquals(true, noType0.canBeCalled());
      assertEquals(false, noType0.isBooleanValueType());
      assertEquals(true, noType0.isEmptyType());
      assertEquals(false, noType0.isTemplateType());
      assertEquals(true, noType0.isConstructor());
      assertEquals(true, noType0.matchesObjectContext());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      FunctionType functionType0 = noType0.getSuperClassConstructor();
      assertNotNull(functionType0);
      assertEquals(true, functionType0.hasInstanceType());
      assertEquals(false, functionType0.isRecordType());
      assertEquals(false, functionType0.isVoidType());
      assertEquals(false, functionType0.isReturnTypeInferred());
      assertEquals(false, functionType0.isStringValueType());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, functionType0.isInterface());
      assertEquals(false, functionType0.isNullType());
      assertEquals(false, functionType0.isAllType());
      assertEquals(false, functionType0.isResolved());
      assertEquals(false, functionType0.isBooleanValueType());
      assertEquals(true, functionType0.canBeCalled());
      assertEquals(false, functionType0.isNoObjectType());
      assertEquals(false, functionType0.isNumberValueType());
      assertEquals(false, functionType0.isUnionType());
      assertEquals(true, functionType0.isConstructor());
      assertEquals(1, functionType0.getMaxArguments());
      assertEquals(false, functionType0.isEmptyType());
      assertEquals(false, functionType0.isNoType());
      assertEquals(false, functionType0.isTemplateType());
      assertEquals(false, functionType0.isOrdinaryFunction());
      assertNull(functionType0.getTemplateTypeName());
      assertEquals(true, functionType0.isFunctionType());
      assertEquals(true, functionType0.hasCachedValues());
      assertEquals(false, noType0.isUnionType());
      assertEquals(true, noType0.hasInstanceType());
      assertEquals(true, noType0.hasCachedValues());
      assertEquals(false, noType0.isRecordType());
      assertEquals(false, noType0.isVoidType());
      assertEquals(2147483647, noType0.getPropertiesCount());
      assertEquals(false, noType0.isStringValueType());
      assertEquals(true, noType0.isNullable());
      assertNull(noType0.getReferenceName());
      assertNull(noType0.getTemplateTypeName());
      assertEquals(false, noType0.isNullType());
      assertEquals(true, noType0.matchesNumberContext());
      assertEquals(false, noType0.isReturnTypeInferred());
      assertEquals(false, noType0.isNoObjectType());
      assertEquals(true, noType0.isNoType());
      assertEquals(false, noType0.isFunctionType());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noType0.isResolved());
      assertEquals(false, noType0.isInterface());
      assertEquals(false, noType0.isOrdinaryFunction());
      assertEquals("None", noType0.toString());
      assertEquals(false, noType0.isAllType());
      assertEquals(2147483647, noType0.getMaxArguments());
      assertEquals(true, noType0.matchesStringContext());
      assertEquals(false, noType0.isNumberValueType());
      assertEquals(true, noType0.canBeCalled());
      assertEquals(false, noType0.isBooleanValueType());
      assertEquals(true, noType0.isEmptyType());
      assertEquals(false, noType0.isTemplateType());
      assertEquals(true, noType0.isConstructor());
      assertEquals(true, noType0.matchesObjectContext());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      boolean boolean0 = true;
      FunctionPrototypeType functionPrototypeType0 = new FunctionPrototypeType(jSTypeRegistry0, functionType0, noType0, boolean0);
      assertNotNull(functionPrototypeType0);
      assertEquals(true, functionType0.hasInstanceType());
      assertEquals(false, functionType0.isRecordType());
      assertEquals(false, functionType0.isVoidType());
      assertEquals(false, functionType0.isReturnTypeInferred());
      assertEquals(false, functionType0.isStringValueType());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, functionType0.isInterface());
      assertEquals(false, functionType0.isNullType());
      assertEquals(false, functionType0.isAllType());
      assertEquals(false, functionType0.isResolved());
      assertEquals(false, functionType0.isBooleanValueType());
      assertEquals(true, functionType0.canBeCalled());
      assertEquals(false, functionType0.isNoObjectType());
      assertEquals(false, functionType0.isNumberValueType());
      assertEquals(false, functionType0.isUnionType());
      assertEquals(true, functionType0.isConstructor());
      assertEquals(1, functionType0.getMaxArguments());
      assertEquals(false, functionType0.isEmptyType());
      assertEquals(false, functionType0.isNoType());
      assertEquals(false, functionType0.isTemplateType());
      assertEquals(false, functionType0.isOrdinaryFunction());
      assertNull(functionType0.getTemplateTypeName());
      assertEquals(true, functionType0.isFunctionType());
      assertEquals(true, functionType0.hasCachedValues());
      assertEquals(false, noType0.isUnionType());
      assertEquals(true, noType0.hasInstanceType());
      assertEquals(true, noType0.hasCachedValues());
      assertEquals(false, noType0.isRecordType());
      assertEquals(false, noType0.isVoidType());
      assertEquals(2147483647, noType0.getPropertiesCount());
      assertEquals(false, noType0.isStringValueType());
      assertEquals(true, noType0.isNullable());
      assertNull(noType0.getReferenceName());
      assertNull(noType0.getTemplateTypeName());
      assertEquals(false, noType0.isNullType());
      assertEquals(true, noType0.matchesNumberContext());
      assertEquals(false, noType0.isReturnTypeInferred());
      assertEquals(false, noType0.isNoObjectType());
      assertEquals(true, noType0.isNoType());
      assertEquals(false, noType0.isFunctionType());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noType0.isResolved());
      assertEquals(false, noType0.isInterface());
      assertEquals(false, noType0.isOrdinaryFunction());
      assertEquals("None", noType0.toString());
      assertEquals(false, noType0.isAllType());
      assertEquals(2147483647, noType0.getMaxArguments());
      assertEquals(true, noType0.matchesStringContext());
      assertEquals(false, noType0.isNumberValueType());
      assertEquals(true, noType0.canBeCalled());
      assertEquals(false, noType0.isBooleanValueType());
      assertEquals(true, noType0.isEmptyType());
      assertEquals(false, noType0.isTemplateType());
      assertEquals(true, noType0.isConstructor());
      assertEquals(true, noType0.matchesObjectContext());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, functionPrototypeType0.isAllType());
      assertEquals(false, functionPrototypeType0.isVoidType());
      assertEquals(false, functionPrototypeType0.isTemplateType());
      assertEquals(true, functionPrototypeType0.isFunctionPrototypeType());
      assertEquals(false, functionPrototypeType0.isNumberValueType());
      assertEquals(false, functionPrototypeType0.isEmptyType());
      assertEquals(false, functionPrototypeType0.isFunctionType());
      assertEquals(false, functionPrototypeType0.isStringValueType());
      assertEquals(true, functionPrototypeType0.hasReferenceName());
      assertEquals(false, functionPrototypeType0.isBooleanValueType());
      assertEquals(false, functionPrototypeType0.isNoObjectType());
      assertEquals(false, functionPrototypeType0.isNoType());
      assertEquals(BooleanLiteralSet.TRUE, functionPrototypeType0.getPossibleToBooleanOutcomes());
      assertEquals(false, functionPrototypeType0.isUnionType());
      assertEquals(false, functionPrototypeType0.isNullType());
      assertEquals(false, functionPrototypeType0.isRecordType());
      assertEquals(false, functionPrototypeType0.isResolved());
      
      boolean boolean1 = functionPrototypeType0.hasReferenceName();
      assertTrue(boolean0 == boolean1);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      assertEquals(true, functionType0.hasInstanceType());
      assertEquals(false, functionType0.isRecordType());
      assertEquals(false, functionType0.isVoidType());
      assertEquals(false, functionType0.isReturnTypeInferred());
      assertEquals(false, functionType0.isStringValueType());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, functionType0.isInterface());
      assertEquals(false, functionType0.isNullType());
      assertEquals(false, functionType0.isAllType());
      assertEquals(false, functionType0.isResolved());
      assertEquals(false, functionType0.isBooleanValueType());
      assertEquals(true, functionType0.canBeCalled());
      assertEquals(false, functionType0.isNoObjectType());
      assertEquals(false, functionType0.isNumberValueType());
      assertEquals(false, functionType0.isUnionType());
      assertEquals(true, functionType0.isConstructor());
      assertEquals(1, functionType0.getMaxArguments());
      assertEquals(false, functionType0.isEmptyType());
      assertEquals(false, functionType0.isNoType());
      assertEquals(false, functionType0.isTemplateType());
      assertEquals(false, functionType0.isOrdinaryFunction());
      assertNull(functionType0.getTemplateTypeName());
      assertEquals(true, functionType0.isFunctionType());
      assertEquals(true, functionType0.hasCachedValues());
      assertEquals(false, noType0.isUnionType());
      assertEquals(true, noType0.hasInstanceType());
      assertEquals(true, noType0.hasCachedValues());
      assertEquals(false, noType0.isRecordType());
      assertEquals(false, noType0.isVoidType());
      assertEquals(2147483647, noType0.getPropertiesCount());
      assertEquals(false, noType0.isStringValueType());
      assertEquals(true, noType0.isNullable());
      assertNull(noType0.getReferenceName());
      assertNull(noType0.getTemplateTypeName());
      assertEquals(false, noType0.isNullType());
      assertEquals(true, noType0.matchesNumberContext());
      assertEquals(false, noType0.isReturnTypeInferred());
      assertEquals(false, noType0.isNoObjectType());
      assertEquals(true, noType0.isNoType());
      assertEquals(false, noType0.isFunctionType());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noType0.isResolved());
      assertEquals(false, noType0.isInterface());
      assertEquals(false, noType0.isOrdinaryFunction());
      assertEquals("None", noType0.toString());
      assertEquals(false, noType0.isAllType());
      assertEquals(2147483647, noType0.getMaxArguments());
      assertEquals(true, noType0.matchesStringContext());
      assertEquals(false, noType0.isNumberValueType());
      assertEquals(true, noType0.canBeCalled());
      assertEquals(false, noType0.isBooleanValueType());
      assertEquals(true, noType0.isEmptyType());
      assertEquals(false, noType0.isTemplateType());
      assertEquals(true, noType0.isConstructor());
      assertEquals(true, noType0.matchesObjectContext());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, functionPrototypeType0.isAllType());
      assertEquals(false, functionPrototypeType0.isVoidType());
      assertEquals(false, functionPrototypeType0.isTemplateType());
      assertEquals(true, functionPrototypeType0.isFunctionPrototypeType());
      assertEquals(false, functionPrototypeType0.isNumberValueType());
      assertEquals(false, functionPrototypeType0.isEmptyType());
      assertEquals(false, functionPrototypeType0.isFunctionType());
      assertEquals(false, functionPrototypeType0.isStringValueType());
      assertEquals(true, functionPrototypeType0.hasReferenceName());
      assertEquals(false, functionPrototypeType0.isBooleanValueType());
      assertEquals(false, functionPrototypeType0.isNoObjectType());
      assertEquals(false, functionPrototypeType0.isNoType());
      assertEquals(BooleanLiteralSet.TRUE, functionPrototypeType0.getPossibleToBooleanOutcomes());
      assertEquals(false, functionPrototypeType0.isUnionType());
      assertEquals(false, functionPrototypeType0.isNullType());
      assertEquals(false, functionPrototypeType0.isRecordType());
      assertEquals(false, functionPrototypeType0.isResolved());
  }

  @Test
  public void test1()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      NoType noType0 = new NoType(jSTypeRegistry0);
      assertNotNull(noType0);
      assertEquals(false, noType0.isReturnTypeInferred());
      assertEquals(true, noType0.isNullable());
      assertEquals(false, noType0.isVoidType());
      assertEquals(false, noType0.isUnionType());
      assertEquals(false, noType0.isOrdinaryFunction());
      assertEquals(true, noType0.matchesObjectContext());
      assertEquals(false, noType0.isNullType());
      assertEquals(false, noType0.isResolved());
      assertEquals(false, noType0.isTemplateType());
      assertEquals(true, noType0.matchesStringContext());
      assertEquals(true, noType0.isConstructor());
      assertEquals(true, noType0.canBeCalled());
      assertEquals(false, noType0.hasCachedValues());
      assertNull(noType0.getTemplateTypeName());
      assertEquals(false, noType0.isNoObjectType());
      assertEquals(false, noType0.isAllType());
      assertNull(noType0.getReferenceName());
      assertEquals("None", noType0.toString());
      assertEquals(2147483647, noType0.getMaxArguments());
      assertEquals(false, noType0.isInterface());
      assertEquals(true, noType0.isNoType());
      assertEquals(true, noType0.isEmptyType());
      assertEquals(false, noType0.isRecordType());
      assertEquals(true, noType0.matchesNumberContext());
      assertEquals(false, noType0.isNumberValueType());
      assertEquals(false, noType0.isStringValueType());
      assertEquals(false, noType0.isFunctionType());
      assertEquals(false, noType0.isBooleanValueType());
      assertEquals(true, noType0.hasInstanceType());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertEquals(2147483647, noType0.getPropertiesCount());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      boolean boolean0 = true;
      FunctionPrototypeType functionPrototypeType0 = new FunctionPrototypeType(jSTypeRegistry0, noType0, noType0, boolean0);
      assertNotNull(functionPrototypeType0);
      assertEquals(false, functionPrototypeType0.isTemplateType());
      assertEquals(true, functionPrototypeType0.isFunctionPrototypeType());
      assertEquals(false, functionPrototypeType0.isNoType());
      assertEquals(false, functionPrototypeType0.hasReferenceName());
      assertEquals(false, functionPrototypeType0.isNullType());
      assertEquals(false, functionPrototypeType0.isStringValueType());
      assertEquals(false, functionPrototypeType0.isBooleanValueType());
      assertEquals(false, functionPrototypeType0.isFunctionType());
      assertEquals(false, functionPrototypeType0.isResolved());
      assertEquals(false, functionPrototypeType0.isEmptyType());
      assertEquals(false, functionPrototypeType0.isVoidType());
      assertEquals(false, functionPrototypeType0.isAllType());
      assertEquals(false, functionPrototypeType0.isRecordType());
      assertEquals(false, functionPrototypeType0.isNoObjectType());
      assertEquals(false, functionPrototypeType0.isNumberValueType());
      assertEquals(BooleanLiteralSet.TRUE, functionPrototypeType0.getPossibleToBooleanOutcomes());
      assertEquals(false, functionPrototypeType0.isUnionType());
      assertEquals(false, noType0.isReturnTypeInferred());
      assertEquals(true, noType0.isNullable());
      assertEquals(false, noType0.isVoidType());
      assertEquals(false, noType0.isUnionType());
      assertEquals(false, noType0.isOrdinaryFunction());
      assertEquals(true, noType0.matchesObjectContext());
      assertEquals(false, noType0.isNullType());
      assertEquals(false, noType0.isResolved());
      assertEquals(false, noType0.isTemplateType());
      assertEquals(true, noType0.matchesStringContext());
      assertEquals(true, noType0.isConstructor());
      assertEquals(true, noType0.canBeCalled());
      assertEquals(false, noType0.hasCachedValues());
      assertNull(noType0.getTemplateTypeName());
      assertEquals(false, noType0.isNoObjectType());
      assertEquals(false, noType0.isAllType());
      assertNull(noType0.getReferenceName());
      assertEquals("None", noType0.toString());
      assertEquals(2147483647, noType0.getMaxArguments());
      assertEquals(false, noType0.isInterface());
      assertEquals(true, noType0.isNoType());
      assertEquals(true, noType0.isEmptyType());
      assertEquals(false, noType0.isRecordType());
      assertEquals(true, noType0.matchesNumberContext());
      assertEquals(false, noType0.isNumberValueType());
      assertEquals(false, noType0.isStringValueType());
      assertEquals(false, noType0.isFunctionType());
      assertEquals(false, noType0.isBooleanValueType());
      assertEquals(true, noType0.hasInstanceType());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertEquals(2147483647, noType0.getPropertiesCount());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      boolean boolean1 = functionPrototypeType0.hasReferenceName();
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean0 == boolean1);
      assertFalse(boolean1);
      assertEquals(false, functionPrototypeType0.isTemplateType());
      assertEquals(true, functionPrototypeType0.isFunctionPrototypeType());
      assertEquals(false, functionPrototypeType0.isNoType());
      assertEquals(false, functionPrototypeType0.hasReferenceName());
      assertEquals(false, functionPrototypeType0.isNullType());
      assertEquals(false, functionPrototypeType0.isStringValueType());
      assertEquals(false, functionPrototypeType0.isBooleanValueType());
      assertEquals(false, functionPrototypeType0.isFunctionType());
      assertEquals(false, functionPrototypeType0.isResolved());
      assertEquals(false, functionPrototypeType0.isEmptyType());
      assertEquals(false, functionPrototypeType0.isVoidType());
      assertEquals(false, functionPrototypeType0.isAllType());
      assertEquals(false, functionPrototypeType0.isRecordType());
      assertEquals(false, functionPrototypeType0.isNoObjectType());
      assertEquals(false, functionPrototypeType0.isNumberValueType());
      assertEquals(BooleanLiteralSet.TRUE, functionPrototypeType0.getPossibleToBooleanOutcomes());
      assertEquals(false, functionPrototypeType0.isUnionType());
      assertEquals(false, noType0.isReturnTypeInferred());
      assertEquals(true, noType0.isNullable());
      assertEquals(false, noType0.isVoidType());
      assertEquals(false, noType0.isUnionType());
      assertEquals(false, noType0.isOrdinaryFunction());
      assertEquals(true, noType0.matchesObjectContext());
      assertEquals(false, noType0.isNullType());
      assertEquals(false, noType0.isResolved());
      assertEquals(false, noType0.isTemplateType());
      assertEquals(true, noType0.matchesStringContext());
      assertEquals(true, noType0.isConstructor());
      assertEquals(true, noType0.canBeCalled());
      assertEquals(false, noType0.hasCachedValues());
      assertNull(noType0.getTemplateTypeName());
      assertEquals(false, noType0.isNoObjectType());
      assertEquals(false, noType0.isAllType());
      assertNull(noType0.getReferenceName());
      assertEquals("None", noType0.toString());
      assertEquals(2147483647, noType0.getMaxArguments());
      assertEquals(false, noType0.isInterface());
      assertEquals(true, noType0.isNoType());
      assertEquals(true, noType0.isEmptyType());
      assertEquals(false, noType0.isRecordType());
      assertEquals(true, noType0.matchesNumberContext());
      assertEquals(false, noType0.isNumberValueType());
      assertEquals(false, noType0.isStringValueType());
      assertEquals(false, noType0.isFunctionType());
      assertEquals(false, noType0.isBooleanValueType());
      assertEquals(true, noType0.hasInstanceType());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertEquals(2147483647, noType0.getPropertiesCount());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
  }

  @Test
  public void test2()  throws Throwable  {
      ErrorReporter errorReporter0 = null;
      boolean boolean0 = true;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(errorReporter0, boolean0);
      assertNotNull(jSTypeRegistry0);
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      UnknownType unknownType0 = new UnknownType(jSTypeRegistry0, boolean0);
      assertNotNull(unknownType0);
      assertEquals(false, unknownType0.isResolved());
      assertEquals(false, unknownType0.isBooleanValueType());
      assertEquals(false, unknownType0.hasCachedValues());
      assertEquals(true, unknownType0.isCheckedUnknownType());
      assertEquals(false, unknownType0.isTemplateType());
      assertEquals(true, unknownType0.isUnknownType());
      assertEquals(false, unknownType0.isNoType());
      assertEquals(true, unknownType0.matchesNumberContext());
      assertEquals(true, unknownType0.isNullable());
      assertEquals(true, unknownType0.matchesStringContext());
      assertEquals(false, unknownType0.isNoObjectType());
      assertEquals(true, unknownType0.canBeCalled());
      assertEquals(false, unknownType0.isEmptyType());
      assertEquals("??", unknownType0.getReferenceName());
      assertEquals(false, unknownType0.isNullType());
      assertEquals(false, unknownType0.isRecordType());
      assertEquals(false, unknownType0.isNativeObjectType());
      assertEquals(true, unknownType0.matchesObjectContext());
      assertEquals(false, unknownType0.isUnionType());
      assertEquals(BooleanLiteralSet.BOTH, unknownType0.getPossibleToBooleanOutcomes());
      assertEquals(2147483647, unknownType0.getPropertiesCount());
      assertEquals(false, unknownType0.isNumberValueType());
      assertEquals(false, unknownType0.isFunctionType());
      assertEquals(false, unknownType0.isVoidType());
      assertEquals("??", unknownType0.toString());
      assertEquals(false, unknownType0.isAllType());
      assertEquals(false, unknownType0.isStringValueType());
      assertEquals(false, unknownType0.hasReferenceName());
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      FunctionType functionType0 = unknownType0.getConstructor();
      assertNull(functionType0);
      assertEquals(false, unknownType0.isResolved());
      assertEquals(false, unknownType0.isBooleanValueType());
      assertEquals(false, unknownType0.hasCachedValues());
      assertEquals(true, unknownType0.isCheckedUnknownType());
      assertEquals(false, unknownType0.isTemplateType());
      assertEquals(true, unknownType0.isUnknownType());
      assertEquals(false, unknownType0.isNoType());
      assertEquals(true, unknownType0.matchesNumberContext());
      assertEquals(true, unknownType0.isNullable());
      assertEquals(true, unknownType0.matchesStringContext());
      assertEquals(false, unknownType0.isNoObjectType());
      assertEquals(true, unknownType0.canBeCalled());
      assertEquals(false, unknownType0.isEmptyType());
      assertEquals("??", unknownType0.getReferenceName());
      assertEquals(false, unknownType0.isNullType());
      assertEquals(false, unknownType0.isRecordType());
      assertEquals(false, unknownType0.isNativeObjectType());
      assertEquals(true, unknownType0.matchesObjectContext());
      assertEquals(false, unknownType0.isUnionType());
      assertEquals(BooleanLiteralSet.BOTH, unknownType0.getPossibleToBooleanOutcomes());
      assertEquals(2147483647, unknownType0.getPropertiesCount());
      assertEquals(false, unknownType0.isNumberValueType());
      assertEquals(false, unknownType0.isFunctionType());
      assertEquals(false, unknownType0.isVoidType());
      assertEquals("??", unknownType0.toString());
      assertEquals(false, unknownType0.isAllType());
      assertEquals(false, unknownType0.isStringValueType());
      assertEquals(false, unknownType0.hasReferenceName());
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      FunctionPrototypeType functionPrototypeType0 = new FunctionPrototypeType(jSTypeRegistry0, functionType0, functionType0, boolean0);
      assertNotNull(functionPrototypeType0);
      assertEquals(false, unknownType0.isResolved());
      assertEquals(false, unknownType0.isBooleanValueType());
      assertEquals(false, unknownType0.hasCachedValues());
      assertEquals(true, unknownType0.isCheckedUnknownType());
      assertEquals(false, unknownType0.isTemplateType());
      assertEquals(true, unknownType0.isUnknownType());
      assertEquals(false, unknownType0.isNoType());
      assertEquals(true, unknownType0.matchesNumberContext());
      assertEquals(true, unknownType0.isNullable());
      assertEquals(true, unknownType0.matchesStringContext());
      assertEquals(false, unknownType0.isNoObjectType());
      assertEquals(true, unknownType0.canBeCalled());
      assertEquals(false, unknownType0.isEmptyType());
      assertEquals("??", unknownType0.getReferenceName());
      assertEquals(false, unknownType0.isNullType());
      assertEquals(false, unknownType0.isRecordType());
      assertEquals(false, unknownType0.isNativeObjectType());
      assertEquals(true, unknownType0.matchesObjectContext());
      assertEquals(false, unknownType0.isUnionType());
      assertEquals(BooleanLiteralSet.BOTH, unknownType0.getPossibleToBooleanOutcomes());
      assertEquals(2147483647, unknownType0.getPropertiesCount());
      assertEquals(false, unknownType0.isNumberValueType());
      assertEquals(false, unknownType0.isFunctionType());
      assertEquals(false, unknownType0.isVoidType());
      assertEquals("??", unknownType0.toString());
      assertEquals(false, unknownType0.isAllType());
      assertEquals(false, unknownType0.isStringValueType());
      assertEquals(false, unknownType0.hasReferenceName());
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, functionPrototypeType0.isResolved());
      assertEquals(false, functionPrototypeType0.isNumberValueType());
      assertEquals(false, functionPrototypeType0.isRecordType());
      assertEquals(false, functionPrototypeType0.isTemplateType());
      assertEquals(false, functionPrototypeType0.isStringValueType());
      assertEquals(false, functionPrototypeType0.isVoidType());
      assertEquals(true, functionPrototypeType0.isFunctionPrototypeType());
      assertEquals(false, functionPrototypeType0.hasReferenceName());
      assertEquals(false, functionPrototypeType0.isNullType());
      assertEquals(false, functionPrototypeType0.isNoObjectType());
      assertEquals(false, functionPrototypeType0.isNoType());
      assertEquals(false, functionPrototypeType0.isAllType());
      assertEquals(false, functionPrototypeType0.isUnionType());
      assertEquals(false, functionPrototypeType0.isEmptyType());
      assertEquals(false, functionPrototypeType0.isFunctionType());
      assertEquals(BooleanLiteralSet.TRUE, functionPrototypeType0.getPossibleToBooleanOutcomes());
      assertEquals(false, functionPrototypeType0.isBooleanValueType());
      
      boolean boolean1 = functionPrototypeType0.hasReferenceName();
      assertFalse(boolean0 == boolean1);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      assertEquals(false, unknownType0.isResolved());
      assertEquals(false, unknownType0.isBooleanValueType());
      assertEquals(false, unknownType0.hasCachedValues());
      assertEquals(true, unknownType0.isCheckedUnknownType());
      assertEquals(false, unknownType0.isTemplateType());
      assertEquals(true, unknownType0.isUnknownType());
      assertEquals(false, unknownType0.isNoType());
      assertEquals(true, unknownType0.matchesNumberContext());
      assertEquals(true, unknownType0.isNullable());
      assertEquals(true, unknownType0.matchesStringContext());
      assertEquals(false, unknownType0.isNoObjectType());
      assertEquals(true, unknownType0.canBeCalled());
      assertEquals(false, unknownType0.isEmptyType());
      assertEquals("??", unknownType0.getReferenceName());
      assertEquals(false, unknownType0.isNullType());
      assertEquals(false, unknownType0.isRecordType());
      assertEquals(false, unknownType0.isNativeObjectType());
      assertEquals(true, unknownType0.matchesObjectContext());
      assertEquals(false, unknownType0.isUnionType());
      assertEquals(BooleanLiteralSet.BOTH, unknownType0.getPossibleToBooleanOutcomes());
      assertEquals(2147483647, unknownType0.getPropertiesCount());
      assertEquals(false, unknownType0.isNumberValueType());
      assertEquals(false, unknownType0.isFunctionType());
      assertEquals(false, unknownType0.isVoidType());
      assertEquals("??", unknownType0.toString());
      assertEquals(false, unknownType0.isAllType());
      assertEquals(false, unknownType0.isStringValueType());
      assertEquals(false, unknownType0.hasReferenceName());
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, functionPrototypeType0.isResolved());
      assertEquals(false, functionPrototypeType0.isNumberValueType());
      assertEquals(false, functionPrototypeType0.isRecordType());
      assertEquals(false, functionPrototypeType0.isTemplateType());
      assertEquals(false, functionPrototypeType0.isStringValueType());
      assertEquals(false, functionPrototypeType0.isVoidType());
      assertEquals(true, functionPrototypeType0.isFunctionPrototypeType());
      assertEquals(false, functionPrototypeType0.hasReferenceName());
      assertEquals(false, functionPrototypeType0.isNullType());
      assertEquals(false, functionPrototypeType0.isNoObjectType());
      assertEquals(false, functionPrototypeType0.isNoType());
      assertEquals(false, functionPrototypeType0.isAllType());
      assertEquals(false, functionPrototypeType0.isUnionType());
      assertEquals(false, functionPrototypeType0.isEmptyType());
      assertEquals(false, functionPrototypeType0.isFunctionType());
      assertEquals(BooleanLiteralSet.TRUE, functionPrototypeType0.getPossibleToBooleanOutcomes());
      assertEquals(false, functionPrototypeType0.isBooleanValueType());
  }

  @Test
  public void test3()  throws Throwable  {
      ErrorReporter errorReporter0 = null;
      boolean boolean0 = true;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(errorReporter0, boolean0);
      assertNotNull(jSTypeRegistry0);
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      UnknownType unknownType0 = new UnknownType(jSTypeRegistry0, boolean0);
      assertNotNull(unknownType0);
      assertEquals(false, unknownType0.isTemplateType());
      assertEquals(false, unknownType0.isRecordType());
      assertEquals(false, unknownType0.hasCachedValues());
      assertEquals(true, unknownType0.matchesObjectContext());
      assertEquals(false, unknownType0.isStringValueType());
      assertEquals(false, unknownType0.isNullType());
      assertEquals(false, unknownType0.isNoType());
      assertEquals("??", unknownType0.toString());
      assertEquals(BooleanLiteralSet.BOTH, unknownType0.getPossibleToBooleanOutcomes());
      assertEquals(true, unknownType0.matchesStringContext());
      assertEquals(true, unknownType0.canBeCalled());
      assertEquals(true, unknownType0.isUnknownType());
      assertEquals(true, unknownType0.isNullable());
      assertEquals(true, unknownType0.matchesNumberContext());
      assertEquals(false, unknownType0.isEmptyType());
      assertEquals(false, unknownType0.isResolved());
      assertEquals("??", unknownType0.getReferenceName());
      assertEquals(false, unknownType0.isNumberValueType());
      assertEquals(2147483647, unknownType0.getPropertiesCount());
      assertEquals(false, unknownType0.isFunctionType());
      assertEquals(false, unknownType0.isBooleanValueType());
      assertEquals(false, unknownType0.isAllType());
      assertEquals(false, unknownType0.isNoObjectType());
      assertEquals(true, unknownType0.isCheckedUnknownType());
      assertEquals(false, unknownType0.hasReferenceName());
      assertEquals(false, unknownType0.isVoidType());
      assertEquals(false, unknownType0.isNativeObjectType());
      assertEquals(false, unknownType0.isUnionType());
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      FunctionType functionType0 = unknownType0.getConstructor();
      assertNull(functionType0);
      assertEquals(false, unknownType0.isTemplateType());
      assertEquals(false, unknownType0.isRecordType());
      assertEquals(false, unknownType0.hasCachedValues());
      assertEquals(true, unknownType0.matchesObjectContext());
      assertEquals(false, unknownType0.isStringValueType());
      assertEquals(false, unknownType0.isNullType());
      assertEquals(false, unknownType0.isNoType());
      assertEquals("??", unknownType0.toString());
      assertEquals(BooleanLiteralSet.BOTH, unknownType0.getPossibleToBooleanOutcomes());
      assertEquals(true, unknownType0.matchesStringContext());
      assertEquals(true, unknownType0.canBeCalled());
      assertEquals(true, unknownType0.isUnknownType());
      assertEquals(true, unknownType0.isNullable());
      assertEquals(true, unknownType0.matchesNumberContext());
      assertEquals(false, unknownType0.isEmptyType());
      assertEquals(false, unknownType0.isResolved());
      assertEquals("??", unknownType0.getReferenceName());
      assertEquals(false, unknownType0.isNumberValueType());
      assertEquals(2147483647, unknownType0.getPropertiesCount());
      assertEquals(false, unknownType0.isFunctionType());
      assertEquals(false, unknownType0.isBooleanValueType());
      assertEquals(false, unknownType0.isAllType());
      assertEquals(false, unknownType0.isNoObjectType());
      assertEquals(true, unknownType0.isCheckedUnknownType());
      assertEquals(false, unknownType0.hasReferenceName());
      assertEquals(false, unknownType0.isVoidType());
      assertEquals(false, unknownType0.isNativeObjectType());
      assertEquals(false, unknownType0.isUnionType());
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      FunctionPrototypeType functionPrototypeType0 = new FunctionPrototypeType(jSTypeRegistry0, functionType0, functionType0, boolean0);
      assertNotNull(functionPrototypeType0);
      assertEquals(false, unknownType0.isTemplateType());
      assertEquals(false, unknownType0.isRecordType());
      assertEquals(false, unknownType0.hasCachedValues());
      assertEquals(true, unknownType0.matchesObjectContext());
      assertEquals(false, unknownType0.isStringValueType());
      assertEquals(false, unknownType0.isNullType());
      assertEquals(false, unknownType0.isNoType());
      assertEquals("??", unknownType0.toString());
      assertEquals(BooleanLiteralSet.BOTH, unknownType0.getPossibleToBooleanOutcomes());
      assertEquals(true, unknownType0.matchesStringContext());
      assertEquals(true, unknownType0.canBeCalled());
      assertEquals(true, unknownType0.isUnknownType());
      assertEquals(true, unknownType0.isNullable());
      assertEquals(true, unknownType0.matchesNumberContext());
      assertEquals(false, unknownType0.isEmptyType());
      assertEquals(false, unknownType0.isResolved());
      assertEquals("??", unknownType0.getReferenceName());
      assertEquals(false, unknownType0.isNumberValueType());
      assertEquals(2147483647, unknownType0.getPropertiesCount());
      assertEquals(false, unknownType0.isFunctionType());
      assertEquals(false, unknownType0.isBooleanValueType());
      assertEquals(false, unknownType0.isAllType());
      assertEquals(false, unknownType0.isNoObjectType());
      assertEquals(true, unknownType0.isCheckedUnknownType());
      assertEquals(false, unknownType0.hasReferenceName());
      assertEquals(false, unknownType0.isVoidType());
      assertEquals(false, unknownType0.isNativeObjectType());
      assertEquals(false, unknownType0.isUnionType());
      assertEquals(false, functionPrototypeType0.isNoObjectType());
      assertEquals(false, functionPrototypeType0.isAllType());
      assertEquals(false, functionPrototypeType0.isTemplateType());
      assertEquals(false, functionPrototypeType0.hasReferenceName());
      assertEquals(false, functionPrototypeType0.isEmptyType());
      assertEquals(false, functionPrototypeType0.isBooleanValueType());
      assertEquals(false, functionPrototypeType0.isVoidType());
      assertEquals(false, functionPrototypeType0.isUnionType());
      assertEquals(false, functionPrototypeType0.isFunctionType());
      assertEquals(false, functionPrototypeType0.isRecordType());
      assertEquals(true, functionPrototypeType0.isFunctionPrototypeType());
      assertEquals(false, functionPrototypeType0.isStringValueType());
      assertEquals(false, functionPrototypeType0.isResolved());
      assertEquals(false, functionPrototypeType0.isNumberValueType());
      assertEquals(false, functionPrototypeType0.isNoType());
      assertEquals(BooleanLiteralSet.TRUE, functionPrototypeType0.getPossibleToBooleanOutcomes());
      assertEquals(false, functionPrototypeType0.isNullType());
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      String string0 = functionPrototypeType0.getReferenceName();
      assertNotNull(string0);
      assertEquals("{...}.prototype", string0);
      assertEquals(false, unknownType0.isTemplateType());
      assertEquals(false, unknownType0.isRecordType());
      assertEquals(false, unknownType0.hasCachedValues());
      assertEquals(true, unknownType0.matchesObjectContext());
      assertEquals(false, unknownType0.isStringValueType());
      assertEquals(false, unknownType0.isNullType());
      assertEquals(false, unknownType0.isNoType());
      assertEquals("??", unknownType0.toString());
      assertEquals(BooleanLiteralSet.BOTH, unknownType0.getPossibleToBooleanOutcomes());
      assertEquals(true, unknownType0.matchesStringContext());
      assertEquals(true, unknownType0.canBeCalled());
      assertEquals(true, unknownType0.isUnknownType());
      assertEquals(true, unknownType0.isNullable());
      assertEquals(true, unknownType0.matchesNumberContext());
      assertEquals(false, unknownType0.isEmptyType());
      assertEquals(false, unknownType0.isResolved());
      assertEquals("??", unknownType0.getReferenceName());
      assertEquals(false, unknownType0.isNumberValueType());
      assertEquals(2147483647, unknownType0.getPropertiesCount());
      assertEquals(false, unknownType0.isFunctionType());
      assertEquals(false, unknownType0.isBooleanValueType());
      assertEquals(false, unknownType0.isAllType());
      assertEquals(false, unknownType0.isNoObjectType());
      assertEquals(true, unknownType0.isCheckedUnknownType());
      assertEquals(false, unknownType0.hasReferenceName());
      assertEquals(false, unknownType0.isVoidType());
      assertEquals(false, unknownType0.isNativeObjectType());
      assertEquals(false, unknownType0.isUnionType());
      assertEquals(false, functionPrototypeType0.isNoObjectType());
      assertEquals(false, functionPrototypeType0.isAllType());
      assertEquals(false, functionPrototypeType0.isTemplateType());
      assertEquals(false, functionPrototypeType0.hasReferenceName());
      assertEquals(false, functionPrototypeType0.isEmptyType());
      assertEquals(false, functionPrototypeType0.isBooleanValueType());
      assertEquals(false, functionPrototypeType0.isVoidType());
      assertEquals(false, functionPrototypeType0.isUnionType());
      assertEquals(false, functionPrototypeType0.isFunctionType());
      assertEquals(false, functionPrototypeType0.isRecordType());
      assertEquals(true, functionPrototypeType0.isFunctionPrototypeType());
      assertEquals(false, functionPrototypeType0.isStringValueType());
      assertEquals(false, functionPrototypeType0.isResolved());
      assertEquals(false, functionPrototypeType0.isNumberValueType());
      assertEquals(false, functionPrototypeType0.isNoType());
      assertEquals(BooleanLiteralSet.TRUE, functionPrototypeType0.getPossibleToBooleanOutcomes());
      assertEquals(false, functionPrototypeType0.isNullType());
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
  }

  @Test
  public void test4()  throws Throwable  {
      ErrorReporter errorReporter0 = null;
      boolean boolean0 = true;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(errorReporter0, boolean0);
      assertNotNull(jSTypeRegistry0);
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      NoObjectType noObjectType0 = new NoObjectType(jSTypeRegistry0);
      assertNotNull(noObjectType0);
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, noObjectType0.isInterface());
      assertEquals(2147483647, noObjectType0.getMaxArguments());
      assertEquals(true, noObjectType0.matchesObjectContext());
      assertEquals(true, noObjectType0.isConstructor());
      assertEquals(true, noObjectType0.canBeCalled());
      assertEquals(false, noObjectType0.isNumberValueType());
      assertEquals(false, noObjectType0.isResolved());
      assertEquals(false, noObjectType0.isFunctionType());
      assertEquals(false, noObjectType0.isVoidType());
      assertNull(noObjectType0.getReferenceName());
      assertEquals(false, noObjectType0.isOrdinaryFunction());
      assertEquals(false, noObjectType0.isReturnTypeInferred());
      assertEquals(false, noObjectType0.isUnionType());
      assertEquals(false, noObjectType0.isStringValueType());
      assertEquals(BooleanLiteralSet.TRUE, noObjectType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noObjectType0.isTemplateType());
      assertEquals(false, noObjectType0.hasCachedValues());
      assertEquals(2147483647, noObjectType0.getPropertiesCount());
      assertNull(noObjectType0.getTemplateTypeName());
      assertEquals(false, noObjectType0.isAllType());
      assertEquals("NoObject", noObjectType0.toString());
      assertEquals(true, noObjectType0.hasInstanceType());
      assertEquals(false, noObjectType0.isNoType());
      assertEquals(true, noObjectType0.matchesStringContext());
      assertEquals(true, noObjectType0.matchesNumberContext());
      assertEquals(false, noObjectType0.isRecordType());
      assertEquals(false, noObjectType0.isNullType());
      assertEquals(true, noObjectType0.isEmptyType());
      assertEquals(true, noObjectType0.isNoObjectType());
      assertEquals(false, noObjectType0.isBooleanValueType());
      
      FunctionPrototypeType functionPrototypeType0 = noObjectType0.getPrototype();
      assertNotNull(functionPrototypeType0);
      assertEquals(true, functionPrototypeType0.isFunctionPrototypeType());
      assertEquals(false, functionPrototypeType0.isAllType());
      assertEquals(false, functionPrototypeType0.isVoidType());
      assertEquals(false, functionPrototypeType0.isNoObjectType());
      assertEquals(false, functionPrototypeType0.isNullType());
      assertEquals(false, functionPrototypeType0.isNumberValueType());
      assertEquals(false, functionPrototypeType0.isEmptyType());
      assertEquals(false, functionPrototypeType0.isUnionType());
      assertEquals(false, functionPrototypeType0.isRecordType());
      assertEquals(false, functionPrototypeType0.isResolved());
      assertEquals(false, functionPrototypeType0.isFunctionType());
      assertEquals(false, functionPrototypeType0.isStringValueType());
      assertEquals(false, functionPrototypeType0.isNoType());
      assertEquals(false, functionPrototypeType0.hasReferenceName());
      assertEquals(BooleanLiteralSet.TRUE, functionPrototypeType0.getPossibleToBooleanOutcomes());
      assertEquals(false, functionPrototypeType0.isTemplateType());
      assertEquals(false, functionPrototypeType0.isBooleanValueType());
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, noObjectType0.isInterface());
      assertEquals(2147483647, noObjectType0.getMaxArguments());
      assertEquals(true, noObjectType0.matchesObjectContext());
      assertEquals(true, noObjectType0.isConstructor());
      assertEquals(true, noObjectType0.canBeCalled());
      assertEquals(false, noObjectType0.isNumberValueType());
      assertEquals(false, noObjectType0.isResolved());
      assertEquals(false, noObjectType0.isFunctionType());
      assertEquals(false, noObjectType0.isVoidType());
      assertEquals(true, noObjectType0.hasCachedValues());
      assertNull(noObjectType0.getReferenceName());
      assertEquals(false, noObjectType0.isOrdinaryFunction());
      assertEquals(false, noObjectType0.isReturnTypeInferred());
      assertEquals(false, noObjectType0.isUnionType());
      assertEquals(false, noObjectType0.isStringValueType());
      assertEquals(BooleanLiteralSet.TRUE, noObjectType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noObjectType0.isTemplateType());
      assertEquals(2147483647, noObjectType0.getPropertiesCount());
      assertNull(noObjectType0.getTemplateTypeName());
      assertEquals(false, noObjectType0.isAllType());
      assertEquals("NoObject", noObjectType0.toString());
      assertEquals(true, noObjectType0.hasInstanceType());
      assertEquals(false, noObjectType0.isNoType());
      assertEquals(true, noObjectType0.matchesStringContext());
      assertEquals(true, noObjectType0.matchesNumberContext());
      assertEquals(false, noObjectType0.isRecordType());
      assertEquals(false, noObjectType0.isNullType());
      assertEquals(true, noObjectType0.isEmptyType());
      assertEquals(true, noObjectType0.isNoObjectType());
      assertEquals(false, noObjectType0.isBooleanValueType());
      
      String string0 = functionPrototypeType0.getReferenceName();
      assertNotNull(string0);
      assertEquals("null.prototype", string0);
      assertEquals(true, functionPrototypeType0.isFunctionPrototypeType());
      assertEquals(false, functionPrototypeType0.isAllType());
      assertEquals(false, functionPrototypeType0.isVoidType());
      assertEquals(false, functionPrototypeType0.isNoObjectType());
      assertEquals(false, functionPrototypeType0.isNullType());
      assertEquals(false, functionPrototypeType0.isNumberValueType());
      assertEquals(false, functionPrototypeType0.isEmptyType());
      assertEquals(false, functionPrototypeType0.isUnionType());
      assertEquals(false, functionPrototypeType0.isRecordType());
      assertEquals(false, functionPrototypeType0.isResolved());
      assertEquals(false, functionPrototypeType0.isFunctionType());
      assertEquals(false, functionPrototypeType0.isStringValueType());
      assertEquals(false, functionPrototypeType0.isNoType());
      assertEquals(false, functionPrototypeType0.hasReferenceName());
      assertEquals(BooleanLiteralSet.TRUE, functionPrototypeType0.getPossibleToBooleanOutcomes());
      assertEquals(false, functionPrototypeType0.isTemplateType());
      assertEquals(false, functionPrototypeType0.isBooleanValueType());
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, noObjectType0.isInterface());
      assertEquals(2147483647, noObjectType0.getMaxArguments());
      assertEquals(true, noObjectType0.matchesObjectContext());
      assertEquals(true, noObjectType0.isConstructor());
      assertEquals(true, noObjectType0.canBeCalled());
      assertEquals(false, noObjectType0.isNumberValueType());
      assertEquals(false, noObjectType0.isResolved());
      assertEquals(false, noObjectType0.isFunctionType());
      assertEquals(false, noObjectType0.isVoidType());
      assertEquals(true, noObjectType0.hasCachedValues());
      assertNull(noObjectType0.getReferenceName());
      assertEquals(false, noObjectType0.isOrdinaryFunction());
      assertEquals(false, noObjectType0.isReturnTypeInferred());
      assertEquals(false, noObjectType0.isUnionType());
      assertEquals(false, noObjectType0.isStringValueType());
      assertEquals(BooleanLiteralSet.TRUE, noObjectType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noObjectType0.isTemplateType());
      assertEquals(2147483647, noObjectType0.getPropertiesCount());
      assertNull(noObjectType0.getTemplateTypeName());
      assertEquals(false, noObjectType0.isAllType());
      assertEquals("NoObject", noObjectType0.toString());
      assertEquals(true, noObjectType0.hasInstanceType());
      assertEquals(false, noObjectType0.isNoType());
      assertEquals(true, noObjectType0.matchesStringContext());
      assertEquals(true, noObjectType0.matchesNumberContext());
      assertEquals(false, noObjectType0.isRecordType());
      assertEquals(false, noObjectType0.isNullType());
      assertEquals(true, noObjectType0.isEmptyType());
      assertEquals(true, noObjectType0.isNoObjectType());
      assertEquals(false, noObjectType0.isBooleanValueType());
  }

  @Test
  public void test5()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      NoType noType0 = new NoType(jSTypeRegistry0);
      assertNotNull(noType0);
      assertEquals("None", noType0.toString());
      assertEquals(false, noType0.isFunctionType());
      assertEquals(2147483647, noType0.getMaxArguments());
      assertEquals(false, noType0.isReturnTypeInferred());
      assertEquals(true, noType0.matchesObjectContext());
      assertNull(noType0.getTemplateTypeName());
      assertEquals(false, noType0.isNullType());
      assertEquals(false, noType0.isRecordType());
      assertEquals(true, noType0.isNoType());
      assertEquals(false, noType0.isStringValueType());
      assertEquals(true, noType0.isNullable());
      assertEquals(2147483647, noType0.getPropertiesCount());
      assertEquals(false, noType0.isBooleanValueType());
      assertNull(noType0.getReferenceName());
      assertEquals(true, noType0.canBeCalled());
      assertEquals(false, noType0.isAllType());
      assertEquals(false, noType0.isTemplateType());
      assertEquals(false, noType0.isInterface());
      assertEquals(true, noType0.matchesNumberContext());
      assertEquals(true, noType0.isConstructor());
      assertEquals(false, noType0.isNoObjectType());
      assertEquals(false, noType0.hasCachedValues());
      assertEquals(false, noType0.isUnionType());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertEquals(true, noType0.matchesStringContext());
      assertEquals(false, noType0.isNumberValueType());
      assertEquals(false, noType0.isVoidType());
      assertEquals(false, noType0.isOrdinaryFunction());
      assertEquals(true, noType0.isEmptyType());
      assertEquals(false, noType0.isResolved());
      assertEquals(true, noType0.hasInstanceType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      boolean boolean0 = true;
      FunctionPrototypeType functionPrototypeType0 = new FunctionPrototypeType(jSTypeRegistry0, noType0, noType0, boolean0);
      assertNotNull(functionPrototypeType0);
      assertEquals("None", noType0.toString());
      assertEquals(false, noType0.isFunctionType());
      assertEquals(2147483647, noType0.getMaxArguments());
      assertEquals(false, noType0.isReturnTypeInferred());
      assertEquals(true, noType0.matchesObjectContext());
      assertNull(noType0.getTemplateTypeName());
      assertEquals(false, noType0.isNullType());
      assertEquals(false, noType0.isRecordType());
      assertEquals(true, noType0.isNoType());
      assertEquals(false, noType0.isStringValueType());
      assertEquals(true, noType0.isNullable());
      assertEquals(2147483647, noType0.getPropertiesCount());
      assertEquals(false, noType0.isBooleanValueType());
      assertNull(noType0.getReferenceName());
      assertEquals(true, noType0.canBeCalled());
      assertEquals(false, noType0.isAllType());
      assertEquals(false, noType0.isTemplateType());
      assertEquals(false, noType0.isInterface());
      assertEquals(true, noType0.matchesNumberContext());
      assertEquals(true, noType0.isConstructor());
      assertEquals(false, noType0.isNoObjectType());
      assertEquals(false, noType0.hasCachedValues());
      assertEquals(false, noType0.isUnionType());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertEquals(true, noType0.matchesStringContext());
      assertEquals(false, noType0.isNumberValueType());
      assertEquals(false, noType0.isVoidType());
      assertEquals(false, noType0.isOrdinaryFunction());
      assertEquals(true, noType0.isEmptyType());
      assertEquals(false, noType0.isResolved());
      assertEquals(true, noType0.hasInstanceType());
      assertEquals(false, functionPrototypeType0.isNumberValueType());
      assertEquals(false, functionPrototypeType0.isStringValueType());
      assertEquals(false, functionPrototypeType0.isRecordType());
      assertEquals(BooleanLiteralSet.TRUE, functionPrototypeType0.getPossibleToBooleanOutcomes());
      assertEquals(false, functionPrototypeType0.isBooleanValueType());
      assertEquals(false, functionPrototypeType0.isTemplateType());
      assertEquals(false, functionPrototypeType0.isUnionType());
      assertEquals(false, functionPrototypeType0.isNoType());
      assertEquals(false, functionPrototypeType0.isEmptyType());
      assertEquals(false, functionPrototypeType0.isAllType());
      assertEquals(false, functionPrototypeType0.isResolved());
      assertEquals(false, functionPrototypeType0.isVoidType());
      assertEquals(false, functionPrototypeType0.isNoObjectType());
      assertEquals(false, functionPrototypeType0.hasReferenceName());
      assertEquals(true, functionPrototypeType0.isFunctionPrototypeType());
      assertEquals(false, functionPrototypeType0.isNullType());
      assertEquals(false, functionPrototypeType0.isFunctionType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      boolean boolean1 = functionPrototypeType0.isFunctionPrototypeType();
      assertTrue(boolean0 == boolean1);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      assertEquals("None", noType0.toString());
      assertEquals(false, noType0.isFunctionType());
      assertEquals(2147483647, noType0.getMaxArguments());
      assertEquals(false, noType0.isReturnTypeInferred());
      assertEquals(true, noType0.matchesObjectContext());
      assertNull(noType0.getTemplateTypeName());
      assertEquals(false, noType0.isNullType());
      assertEquals(false, noType0.isRecordType());
      assertEquals(true, noType0.isNoType());
      assertEquals(false, noType0.isStringValueType());
      assertEquals(true, noType0.isNullable());
      assertEquals(2147483647, noType0.getPropertiesCount());
      assertEquals(false, noType0.isBooleanValueType());
      assertNull(noType0.getReferenceName());
      assertEquals(true, noType0.canBeCalled());
      assertEquals(false, noType0.isAllType());
      assertEquals(false, noType0.isTemplateType());
      assertEquals(false, noType0.isInterface());
      assertEquals(true, noType0.matchesNumberContext());
      assertEquals(true, noType0.isConstructor());
      assertEquals(false, noType0.isNoObjectType());
      assertEquals(false, noType0.hasCachedValues());
      assertEquals(false, noType0.isUnionType());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertEquals(true, noType0.matchesStringContext());
      assertEquals(false, noType0.isNumberValueType());
      assertEquals(false, noType0.isVoidType());
      assertEquals(false, noType0.isOrdinaryFunction());
      assertEquals(true, noType0.isEmptyType());
      assertEquals(false, noType0.isResolved());
      assertEquals(true, noType0.hasInstanceType());
      assertEquals(false, functionPrototypeType0.isNumberValueType());
      assertEquals(false, functionPrototypeType0.isStringValueType());
      assertEquals(false, functionPrototypeType0.isRecordType());
      assertEquals(BooleanLiteralSet.TRUE, functionPrototypeType0.getPossibleToBooleanOutcomes());
      assertEquals(false, functionPrototypeType0.isBooleanValueType());
      assertEquals(false, functionPrototypeType0.isTemplateType());
      assertEquals(false, functionPrototypeType0.isUnionType());
      assertEquals(false, functionPrototypeType0.isNoType());
      assertEquals(false, functionPrototypeType0.isEmptyType());
      assertEquals(false, functionPrototypeType0.isAllType());
      assertEquals(false, functionPrototypeType0.isResolved());
      assertEquals(false, functionPrototypeType0.isVoidType());
      assertEquals(false, functionPrototypeType0.isNoObjectType());
      assertEquals(false, functionPrototypeType0.hasReferenceName());
      assertEquals(true, functionPrototypeType0.isFunctionPrototypeType());
      assertEquals(false, functionPrototypeType0.isNullType());
      assertEquals(false, functionPrototypeType0.isFunctionType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
  }

  @Test
  public void test6()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      NoType noType0 = new NoType(jSTypeRegistry0);
      assertNotNull(noType0);
      assertEquals(false, noType0.isRecordType());
      assertEquals("None", noType0.toString());
      assertEquals(true, noType0.isEmptyType());
      assertEquals(true, noType0.matchesNumberContext());
      assertEquals(2147483647, noType0.getPropertiesCount());
      assertEquals(false, noType0.isVoidType());
      assertEquals(false, noType0.isResolved());
      assertEquals(true, noType0.matchesStringContext());
      assertEquals(true, noType0.isNullable());
      assertEquals(false, noType0.isStringValueType());
      assertNull(noType0.getTemplateTypeName());
      assertEquals(2147483647, noType0.getMaxArguments());
      assertEquals(false, noType0.isTemplateType());
      assertNull(noType0.getReferenceName());
      assertEquals(false, noType0.isNullType());
      assertEquals(false, noType0.isNoObjectType());
      assertEquals(true, noType0.isConstructor());
      assertEquals(false, noType0.isUnionType());
      assertEquals(false, noType0.isOrdinaryFunction());
      assertEquals(false, noType0.isNumberValueType());
      assertEquals(true, noType0.isNoType());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noType0.isFunctionType());
      assertEquals(false, noType0.isBooleanValueType());
      assertEquals(true, noType0.hasInstanceType());
      assertEquals(true, noType0.canBeCalled());
      assertEquals(false, noType0.isAllType());
      assertEquals(false, noType0.hasCachedValues());
      assertEquals(true, noType0.matchesObjectContext());
      assertEquals(false, noType0.isReturnTypeInferred());
      assertEquals(false, noType0.isInterface());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      boolean boolean0 = true;
      FunctionPrototypeType functionPrototypeType0 = new FunctionPrototypeType(jSTypeRegistry0, noType0, noType0, boolean0);
      assertNotNull(functionPrototypeType0);
      assertEquals(false, noType0.isRecordType());
      assertEquals("None", noType0.toString());
      assertEquals(true, noType0.isEmptyType());
      assertEquals(true, noType0.matchesNumberContext());
      assertEquals(2147483647, noType0.getPropertiesCount());
      assertEquals(false, noType0.isVoidType());
      assertEquals(false, noType0.isResolved());
      assertEquals(true, noType0.matchesStringContext());
      assertEquals(true, noType0.isNullable());
      assertEquals(false, noType0.isStringValueType());
      assertNull(noType0.getTemplateTypeName());
      assertEquals(2147483647, noType0.getMaxArguments());
      assertEquals(false, noType0.isTemplateType());
      assertNull(noType0.getReferenceName());
      assertEquals(false, noType0.isNullType());
      assertEquals(false, noType0.isNoObjectType());
      assertEquals(true, noType0.isConstructor());
      assertEquals(false, noType0.isUnionType());
      assertEquals(false, noType0.isOrdinaryFunction());
      assertEquals(false, noType0.isNumberValueType());
      assertEquals(true, noType0.isNoType());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noType0.isFunctionType());
      assertEquals(false, noType0.isBooleanValueType());
      assertEquals(true, noType0.hasInstanceType());
      assertEquals(true, noType0.canBeCalled());
      assertEquals(false, noType0.isAllType());
      assertEquals(false, noType0.hasCachedValues());
      assertEquals(true, noType0.matchesObjectContext());
      assertEquals(false, noType0.isReturnTypeInferred());
      assertEquals(false, noType0.isInterface());
      assertEquals(false, functionPrototypeType0.isAllType());
      assertEquals(BooleanLiteralSet.TRUE, functionPrototypeType0.getPossibleToBooleanOutcomes());
      assertEquals(false, functionPrototypeType0.isNumberValueType());
      assertEquals(false, functionPrototypeType0.isNoType());
      assertEquals(false, functionPrototypeType0.hasReferenceName());
      assertEquals(true, functionPrototypeType0.isFunctionPrototypeType());
      assertEquals(false, functionPrototypeType0.isFunctionType());
      assertEquals(false, functionPrototypeType0.isVoidType());
      assertEquals(false, functionPrototypeType0.isStringValueType());
      assertEquals(false, functionPrototypeType0.isNoObjectType());
      assertEquals(false, functionPrototypeType0.isTemplateType());
      assertEquals(false, functionPrototypeType0.isResolved());
      assertEquals(false, functionPrototypeType0.isBooleanValueType());
      assertEquals(false, functionPrototypeType0.isEmptyType());
      assertEquals(false, functionPrototypeType0.isRecordType());
      assertEquals(false, functionPrototypeType0.isUnionType());
      assertEquals(false, functionPrototypeType0.isNullType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      Iterable<ObjectType> iterable0 = functionPrototypeType0.getCtorImplementedInterfaces();
      assertNotNull(iterable0);
      assertEquals(false, noType0.isRecordType());
      assertEquals("None", noType0.toString());
      assertEquals(true, noType0.isEmptyType());
      assertEquals(true, noType0.matchesNumberContext());
      assertEquals(2147483647, noType0.getPropertiesCount());
      assertEquals(false, noType0.isVoidType());
      assertEquals(false, noType0.isResolved());
      assertEquals(true, noType0.matchesStringContext());
      assertEquals(true, noType0.isNullable());
      assertEquals(false, noType0.isStringValueType());
      assertNull(noType0.getTemplateTypeName());
      assertEquals(2147483647, noType0.getMaxArguments());
      assertEquals(false, noType0.isTemplateType());
      assertNull(noType0.getReferenceName());
      assertEquals(false, noType0.isNullType());
      assertEquals(false, noType0.isNoObjectType());
      assertEquals(true, noType0.isConstructor());
      assertEquals(false, noType0.isUnionType());
      assertEquals(false, noType0.isOrdinaryFunction());
      assertEquals(false, noType0.isNumberValueType());
      assertEquals(true, noType0.isNoType());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noType0.isFunctionType());
      assertEquals(false, noType0.isBooleanValueType());
      assertEquals(true, noType0.hasInstanceType());
      assertEquals(true, noType0.canBeCalled());
      assertEquals(false, noType0.isAllType());
      assertEquals(true, noType0.matchesObjectContext());
      assertEquals(true, noType0.hasCachedValues());
      assertEquals(false, noType0.isReturnTypeInferred());
      assertEquals(false, noType0.isInterface());
      assertEquals(false, functionPrototypeType0.isAllType());
      assertEquals(BooleanLiteralSet.TRUE, functionPrototypeType0.getPossibleToBooleanOutcomes());
      assertEquals(false, functionPrototypeType0.isNumberValueType());
      assertEquals(false, functionPrototypeType0.isNoType());
      assertEquals(false, functionPrototypeType0.hasReferenceName());
      assertEquals(true, functionPrototypeType0.isFunctionPrototypeType());
      assertEquals(false, functionPrototypeType0.isFunctionType());
      assertEquals(false, functionPrototypeType0.isVoidType());
      assertEquals(false, functionPrototypeType0.isStringValueType());
      assertEquals(false, functionPrototypeType0.isNoObjectType());
      assertEquals(false, functionPrototypeType0.isTemplateType());
      assertEquals(false, functionPrototypeType0.isResolved());
      assertEquals(false, functionPrototypeType0.isBooleanValueType());
      assertEquals(false, functionPrototypeType0.isEmptyType());
      assertEquals(false, functionPrototypeType0.isRecordType());
      assertEquals(false, functionPrototypeType0.isUnionType());
      assertEquals(false, functionPrototypeType0.isNullType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
  }
}
