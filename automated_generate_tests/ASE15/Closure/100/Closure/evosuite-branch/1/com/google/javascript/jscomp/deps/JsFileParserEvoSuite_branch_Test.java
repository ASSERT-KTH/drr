/*
 * This file was automatically generated by EvoSuite
 * Fri Dec 12 01:06:06 GMT 2014
 */

package com.google.javascript.jscomp.deps;

import static org.junit.Assert.*;
import org.junit.Test;
import com.google.javascript.jscomp.Compiler;
import com.google.javascript.jscomp.ErrorFormat;
import com.google.javascript.jscomp.ErrorManager;
import com.google.javascript.jscomp.LightweightMessageFormatter;
import com.google.javascript.jscomp.LoggerErrorManager;
import com.google.javascript.jscomp.MessageFormatter;
import com.google.javascript.jscomp.PrintStreamErrorManager;
import com.google.javascript.jscomp.SourceExcerptProvider;
import com.google.javascript.jscomp.deps.DependencyInfo;
import com.google.javascript.jscomp.deps.JsFileParser;
import com.google.javascript.jscomp.deps.SimpleDependencyInfo;
import java.io.FileNotFoundException;
import java.io.PrintStream;
import java.util.logging.Logger;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;

import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.junit.runner.RunWith;


public class JsFileParserEvoSuite_branch_Test  {

  @Test
  public void test0()  throws Throwable  {
      Logger logger0 = Logger.getGlobal();
      assertNotNull(logger0);
      assertEquals("global", logger0.getName());
      assertEquals(true, logger0.getUseParentHandlers());
      assertNull(logger0.getResourceBundleName());
      
      LoggerErrorManager loggerErrorManager0 = new LoggerErrorManager(logger0);
      assertNotNull(loggerErrorManager0);
      assertEquals("global", logger0.getName());
      assertEquals(true, logger0.getUseParentHandlers());
      assertNull(logger0.getResourceBundleName());
      assertEquals(0, loggerErrorManager0.getWarningCount());
      assertEquals(0, loggerErrorManager0.getErrorCount());
      assertEquals(0.0, loggerErrorManager0.getTypedPercent(), 0.01D);
      
      JsFileParser jsFileParser0 = new JsFileParser((ErrorManager) loggerErrorManager0);
      assertNotNull(jsFileParser0);
      assertEquals("global", logger0.getName());
      assertEquals(true, logger0.getUseParentHandlers());
      assertNull(logger0.getResourceBundleName());
      assertEquals(0, loggerErrorManager0.getWarningCount());
      assertEquals(0, loggerErrorManager0.getErrorCount());
      assertEquals(0.0, loggerErrorManager0.getTypedPercent(), 0.01D);
      assertEquals(false, jsFileParser0.didParseSucceed());
      
      boolean boolean0 = true;
      jsFileParser0.shortcutMode = boolean0;
      assertEquals("global", logger0.getName());
      assertEquals(true, logger0.getUseParentHandlers());
      assertNull(logger0.getResourceBundleName());
      assertEquals(0, loggerErrorManager0.getWarningCount());
      assertEquals(0, loggerErrorManager0.getErrorCount());
      assertEquals(0.0, loggerErrorManager0.getTypedPercent(), 0.01D);
      assertEquals(false, jsFileParser0.didParseSucceed());
      
      String string0 = "inlineGetters";
      boolean boolean1 = jsFileParser0.parseLine(string0);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      assertEquals("global", logger0.getName());
      assertEquals(true, logger0.getUseParentHandlers());
      assertNull(logger0.getResourceBundleName());
      assertEquals(0, loggerErrorManager0.getWarningCount());
      assertEquals(0, loggerErrorManager0.getErrorCount());
      assertEquals(0.0, loggerErrorManager0.getTypedPercent(), 0.01D);
      assertEquals(false, jsFileParser0.didParseSucceed());
  }

  @Test
  public void test1()  throws Throwable  {
      Logger logger0 = Logger.getGlobal();
      assertNotNull(logger0);
      assertEquals(true, logger0.getUseParentHandlers());
      assertNull(logger0.getResourceBundleName());
      assertEquals("global", logger0.getName());
      
      LoggerErrorManager loggerErrorManager0 = new LoggerErrorManager(logger0);
      assertNotNull(loggerErrorManager0);
      assertEquals(0, loggerErrorManager0.getErrorCount());
      assertEquals(0.0, loggerErrorManager0.getTypedPercent(), 0.01D);
      assertEquals(0, loggerErrorManager0.getWarningCount());
      assertEquals(true, logger0.getUseParentHandlers());
      assertNull(logger0.getResourceBundleName());
      assertEquals("global", logger0.getName());
      
      JsFileParser jsFileParser0 = new JsFileParser((ErrorManager) loggerErrorManager0);
      assertNotNull(jsFileParser0);
      assertEquals(0, loggerErrorManager0.getErrorCount());
      assertEquals(0.0, loggerErrorManager0.getTypedPercent(), 0.01D);
      assertEquals(0, loggerErrorManager0.getWarningCount());
      assertEquals(false, jsFileParser0.didParseSucceed());
      assertEquals(true, logger0.getUseParentHandlers());
      assertNull(logger0.getResourceBundleName());
      assertEquals("global", logger0.getName());
      
      boolean boolean0 = true;
      jsFileParser0.shortcutMode = boolean0;
      assertEquals(0, loggerErrorManager0.getErrorCount());
      assertEquals(0.0, loggerErrorManager0.getTypedPercent(), 0.01D);
      assertEquals(0, loggerErrorManager0.getWarningCount());
      assertEquals(false, jsFileParser0.didParseSucceed());
      assertEquals(true, logger0.getUseParentHandlers());
      assertNull(logger0.getResourceBundleName());
      assertEquals("global", logger0.getName());
      
      String string0 = "";
      boolean boolean1 = jsFileParser0.parseLine(string0);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      assertEquals(0, loggerErrorManager0.getErrorCount());
      assertEquals(0.0, loggerErrorManager0.getTypedPercent(), 0.01D);
      assertEquals(0, loggerErrorManager0.getWarningCount());
      assertEquals(false, jsFileParser0.didParseSucceed());
      assertEquals(true, logger0.getUseParentHandlers());
      assertNull(logger0.getResourceBundleName());
      assertEquals("global", logger0.getName());
  }

  @Test
  public void test2()  throws Throwable  {
      String string0 = "checkRegExpProxy";
      MockPrintStream mockPrintStream0 = new MockPrintStream(string0);
      assertNotNull(mockPrintStream0);
      
      PrintStreamErrorManager printStreamErrorManager0 = new PrintStreamErrorManager((PrintStream) mockPrintStream0);
      assertNotNull(printStreamErrorManager0);
      assertEquals(0, printStreamErrorManager0.getWarningCount());
      assertEquals(0, printStreamErrorManager0.getErrorCount());
      assertEquals(0.0, printStreamErrorManager0.getTypedPercent(), 0.01D);
      
      JsFileParser jsFileParser0 = new JsFileParser((ErrorManager) printStreamErrorManager0);
      assertNotNull(jsFileParser0);
      assertEquals(0, printStreamErrorManager0.getWarningCount());
      assertEquals(0, printStreamErrorManager0.getErrorCount());
      assertEquals(0.0, printStreamErrorManager0.getTypedPercent(), 0.01D);
      assertEquals(false, jsFileParser0.didParseSucceed());
      
      String string1 = "require";
      assertNotSame(string1, string0);
      
      SimpleDependencyInfo simpleDependencyInfo0 = (SimpleDependencyInfo)jsFileParser0.parseFile(string1, string0, string1);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertNotNull(simpleDependencyInfo0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertEquals(0, printStreamErrorManager0.getWarningCount());
      assertEquals(0, printStreamErrorManager0.getErrorCount());
      assertEquals(0.0, printStreamErrorManager0.getTypedPercent(), 0.01D);
      assertEquals("checkRegExpProxy", simpleDependencyInfo0.getPathRelativeToClosureBase());
      assertEquals("require", simpleDependencyInfo0.getName());
      assertEquals(true, jsFileParser0.didParseSucceed());
  }

  @Test
  public void test3()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      assertNotNull(compiler0);
      
      LoggerErrorManager loggerErrorManager0 = (LoggerErrorManager)compiler0.getErrorManager();
      assertNotNull(loggerErrorManager0);
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(0, loggerErrorManager0.getWarningCount());
      assertEquals(0, loggerErrorManager0.getErrorCount());
      assertEquals(0.0, loggerErrorManager0.getTypedPercent(), 0.01D);
      
      String string0 = "4_mOk_}3sMZm:";
      JsFileParser jsFileParser0 = new JsFileParser((ErrorManager) loggerErrorManager0);
      assertNotNull(jsFileParser0);
      assertEquals(false, jsFileParser0.didParseSucceed());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(0, loggerErrorManager0.getWarningCount());
      assertEquals(0, loggerErrorManager0.getErrorCount());
      assertEquals(0.0, loggerErrorManager0.getTypedPercent(), 0.01D);
      
      String string1 = "(?:^|;)\\s*goog\\.(provide|require)\\s*\\((.*?)\\)";
      assertNotSame(string1, string0);
      
      SimpleDependencyInfo simpleDependencyInfo0 = (SimpleDependencyInfo)jsFileParser0.parseFile(string0, string0, string1);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertNotNull(simpleDependencyInfo0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertEquals(true, jsFileParser0.didParseSucceed());
      assertEquals("4_mOk_}3sMZm:", simpleDependencyInfo0.getPathRelativeToClosureBase());
      assertEquals("4_mOk_}3sMZm:", simpleDependencyInfo0.getName());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(0, loggerErrorManager0.getWarningCount());
      assertEquals(0, loggerErrorManager0.getErrorCount());
      assertEquals(0.0, loggerErrorManager0.getTypedPercent(), 0.01D);
  }

  @Test
  public void test4()  throws Throwable  {
      ErrorFormat errorFormat0 = ErrorFormat.MULTILINE;
      Compiler compiler0 = new Compiler();
      assertNotNull(compiler0);
      
      boolean boolean0 = true;
      LightweightMessageFormatter lightweightMessageFormatter0 = (LightweightMessageFormatter)errorFormat0.toFormatter((SourceExcerptProvider) compiler0, boolean0);
      assertNotNull(lightweightMessageFormatter0);
      
      Logger logger0 = Logger.global;
      assertNotNull(logger0);
      assertEquals("global", logger0.getName());
      assertEquals(true, logger0.getUseParentHandlers());
      assertNull(logger0.getResourceBundleName());
      
      LoggerErrorManager loggerErrorManager0 = new LoggerErrorManager((MessageFormatter) lightweightMessageFormatter0, logger0);
      assertNotNull(loggerErrorManager0);
      assertEquals(0.0, loggerErrorManager0.getTypedPercent(), 0.01D);
      assertEquals(0, loggerErrorManager0.getWarningCount());
      assertEquals(0, loggerErrorManager0.getErrorCount());
      assertEquals("global", logger0.getName());
      assertEquals(true, logger0.getUseParentHandlers());
      assertNull(logger0.getResourceBundleName());
      
      JsFileParser jsFileParser0 = new JsFileParser((ErrorManager) loggerErrorManager0);
      assertNotNull(jsFileParser0);
      assertEquals(0.0, loggerErrorManager0.getTypedPercent(), 0.01D);
      assertEquals(0, loggerErrorManager0.getWarningCount());
      assertEquals(0, loggerErrorManager0.getErrorCount());
      assertEquals(false, jsFileParser0.didParseSucceed());
      assertEquals("global", logger0.getName());
      assertEquals(true, logger0.getUseParentHandlers());
      assertNull(logger0.getResourceBundleName());
      
      String string0 = ":lIqO`tj7}S IY;";
      try {
        DependencyInfo dependencyInfo0 = jsFileParser0.parseFile(string0, string0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
}
