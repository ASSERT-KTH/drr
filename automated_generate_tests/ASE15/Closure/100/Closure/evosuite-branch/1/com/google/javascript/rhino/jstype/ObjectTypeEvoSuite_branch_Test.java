/*
 * This file was automatically generated by EvoSuite
 * Fri Dec 12 00:01:04 GMT 2014
 */

package com.google.javascript.rhino.jstype;

import static org.junit.Assert.*;
import org.junit.Test;
import com.google.javascript.rhino.ErrorReporter;
import com.google.javascript.rhino.JSDocInfo;
import com.google.javascript.rhino.Node;
import com.google.javascript.rhino.SimpleErrorReporter;
import com.google.javascript.rhino.jstype.AllType;
import com.google.javascript.rhino.jstype.BooleanLiteralSet;
import com.google.javascript.rhino.jstype.BooleanType;
import com.google.javascript.rhino.jstype.EnumElementType;
import com.google.javascript.rhino.jstype.EnumType;
import com.google.javascript.rhino.jstype.ErrorFunctionType;
import com.google.javascript.rhino.jstype.FunctionPrototypeType;
import com.google.javascript.rhino.jstype.FunctionType;
import com.google.javascript.rhino.jstype.InstanceObjectType;
import com.google.javascript.rhino.jstype.JSType;
import com.google.javascript.rhino.jstype.JSTypeRegistry;
import com.google.javascript.rhino.jstype.NamedType;
import com.google.javascript.rhino.jstype.NoObjectType;
import com.google.javascript.rhino.jstype.NoType;
import com.google.javascript.rhino.jstype.ObjectType;
import com.google.javascript.rhino.jstype.ParameterizedType;
import com.google.javascript.rhino.jstype.RecordType;
import com.google.javascript.rhino.jstype.TemplateType;
import com.google.javascript.rhino.jstype.TernaryValue;
import com.google.javascript.rhino.jstype.UnknownType;
import com.google.javascript.rhino.jstype.UnresolvedTypeExpression;
import java.util.HashMap;
import java.util.Map;
import java.util.Set;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;

import org.junit.runner.RunWith;


public class ObjectTypeEvoSuite_branch_Test  {

  @Test
  public void test00()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      boolean boolean0 = false;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0, boolean0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      String string0 = "ELLIPSIS";
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, string0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, errorFunctionType0.isNullType());
      assertEquals(false, errorFunctionType0.isTemplateType());
      assertEquals(true, errorFunctionType0.canBeCalled());
      assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      assertEquals(true, errorFunctionType0.hasInstanceType());
      assertEquals(false, errorFunctionType0.isResolved());
      assertEquals(false, errorFunctionType0.isEmptyType());
      assertEquals(false, errorFunctionType0.isNoType());
      assertEquals(false, errorFunctionType0.isVoidType());
      assertEquals(false, errorFunctionType0.isStringValueType());
      assertEquals(false, errorFunctionType0.isNumberValueType());
      assertEquals(false, errorFunctionType0.isUnionType());
      assertNull(errorFunctionType0.getTemplateTypeName());
      assertEquals(3, errorFunctionType0.getMaxArguments());
      assertEquals(false, errorFunctionType0.isRecordType());
      assertEquals(false, errorFunctionType0.hasCachedValues());
      assertEquals(false, errorFunctionType0.isBooleanValueType());
      assertEquals(false, errorFunctionType0.isAllType());
      assertEquals(false, errorFunctionType0.isInterface());
      assertEquals(false, errorFunctionType0.isNoObjectType());
      assertEquals(true, errorFunctionType0.isFunctionType());
      assertEquals(false, errorFunctionType0.isReturnTypeInferred());
      assertEquals(true, errorFunctionType0.isConstructor());
      assertNotNull(errorFunctionType0);
      
      JSType[] jSTypeArray0 = new JSType[2];
      jSTypeArray0[1] = (JSType) errorFunctionType0;
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, errorFunctionType0.isNullType());
      assertEquals(false, errorFunctionType0.isTemplateType());
      assertEquals(true, errorFunctionType0.canBeCalled());
      assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      assertEquals(true, errorFunctionType0.hasInstanceType());
      assertEquals(false, errorFunctionType0.isResolved());
      assertEquals(false, errorFunctionType0.isEmptyType());
      assertEquals(false, errorFunctionType0.isNoType());
      assertEquals(false, errorFunctionType0.isVoidType());
      assertEquals(false, errorFunctionType0.isStringValueType());
      assertEquals(false, errorFunctionType0.isNumberValueType());
      assertEquals(false, errorFunctionType0.isUnionType());
      assertNull(errorFunctionType0.getTemplateTypeName());
      assertEquals(3, errorFunctionType0.getMaxArguments());
      assertEquals(false, errorFunctionType0.isRecordType());
      assertEquals(false, errorFunctionType0.hasCachedValues());
      assertEquals(false, errorFunctionType0.isBooleanValueType());
      assertEquals(false, errorFunctionType0.isAllType());
      assertEquals(false, errorFunctionType0.isInterface());
      assertEquals(false, errorFunctionType0.isNoObjectType());
      assertEquals(true, errorFunctionType0.isFunctionType());
      assertEquals(false, errorFunctionType0.isReturnTypeInferred());
      assertEquals(true, errorFunctionType0.isConstructor());
      assertEquals(false, jSTypeArray0[1].isVoidType());
      assertEquals(false, jSTypeArray0[1].isEmptyType());
      assertEquals(false, jSTypeArray0[1].isAllType());
      assertEquals(false, jSTypeArray0[1].isNumberValueType());
      assertEquals(false, jSTypeArray0[1].isResolved());
      assertEquals(false, jSTypeArray0[1].isRecordType());
      assertEquals(true, jSTypeArray0[1].isFunctionType());
      assertEquals(false, jSTypeArray0[1].isUnionType());
      assertEquals(false, jSTypeArray0[1].isNoType());
      assertEquals(false, jSTypeArray0[1].isStringValueType());
      assertEquals(false, jSTypeArray0[1].isBooleanValueType());
      assertEquals(false, jSTypeArray0[1].isNoObjectType());
      assertEquals(false, jSTypeArray0[1].isTemplateType());
      assertEquals(false, jSTypeArray0[1].isNullType());
      assertNotNull(jSTypeArray0[1]);
      
      Node node0 = jSTypeRegistry0.createParametersWithVarArgs(jSTypeArray0);
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(true, node0.hasChildren());
      assertEquals(83, node0.getType());
      assertEquals(-1, node0.getLineno());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.hasOneChild());
      assertEquals(true, node0.hasMoreThanOneChild());
      assertEquals(2, node0.getChildCount());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(node0);
      
      boolean boolean1 = errorFunctionType0.hasCachedValues();
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean0 == boolean1);
      assertTrue(boolean1);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, errorFunctionType0.isNullType());
      assertEquals(false, errorFunctionType0.isTemplateType());
      assertEquals(true, errorFunctionType0.canBeCalled());
      assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      assertEquals(true, errorFunctionType0.hasInstanceType());
      assertEquals(false, errorFunctionType0.isResolved());
      assertEquals(false, errorFunctionType0.isEmptyType());
      assertEquals(false, errorFunctionType0.isNoType());
      assertEquals(false, errorFunctionType0.isVoidType());
      assertEquals(false, errorFunctionType0.isStringValueType());
      assertEquals(false, errorFunctionType0.isNumberValueType());
      assertEquals(false, errorFunctionType0.isUnionType());
      assertEquals(true, errorFunctionType0.hasCachedValues());
      assertNull(errorFunctionType0.getTemplateTypeName());
      assertEquals(3, errorFunctionType0.getMaxArguments());
      assertEquals(false, errorFunctionType0.isRecordType());
      assertEquals(false, errorFunctionType0.isBooleanValueType());
      assertEquals(false, errorFunctionType0.isAllType());
      assertEquals(false, errorFunctionType0.isInterface());
      assertEquals(false, errorFunctionType0.isNoObjectType());
      assertEquals(true, errorFunctionType0.isFunctionType());
      assertEquals(false, errorFunctionType0.isReturnTypeInferred());
      assertEquals(true, errorFunctionType0.isConstructor());
  }

  @Test
  public void test01()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      boolean boolean0 = false;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0, boolean0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      String string0 = "ELLIPSIS";
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, string0);
      assertEquals(false, errorFunctionType0.isUnionType());
      assertEquals(false, errorFunctionType0.isRecordType());
      assertEquals(true, errorFunctionType0.isFunctionType());
      assertEquals(false, errorFunctionType0.isNoType());
      assertEquals(true, errorFunctionType0.hasInstanceType());
      assertEquals(false, errorFunctionType0.isTemplateType());
      assertEquals(false, errorFunctionType0.isReturnTypeInferred());
      assertEquals(false, errorFunctionType0.isNoObjectType());
      assertEquals(false, errorFunctionType0.isNumberValueType());
      assertEquals(false, errorFunctionType0.isResolved());
      assertEquals(false, errorFunctionType0.isBooleanValueType());
      assertEquals(3, errorFunctionType0.getMaxArguments());
      assertEquals(true, errorFunctionType0.canBeCalled());
      assertEquals(false, errorFunctionType0.isEmptyType());
      assertEquals(false, errorFunctionType0.isAllType());
      assertEquals(false, errorFunctionType0.isInterface());
      assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      assertEquals(false, errorFunctionType0.hasCachedValues());
      assertNull(errorFunctionType0.getTemplateTypeName());
      assertEquals(false, errorFunctionType0.isNullType());
      assertEquals(false, errorFunctionType0.isVoidType());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertEquals(true, errorFunctionType0.isConstructor());
      assertEquals(false, errorFunctionType0.isStringValueType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(errorFunctionType0);
      
      TemplateType templateType0 = new TemplateType(jSTypeRegistry0, string0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, templateType0.isNativeObjectType());
      assertEquals(false, templateType0.isBooleanValueType());
      assertEquals(false, templateType0.isStringValueType());
      assertEquals(false, templateType0.isNullType());
      assertEquals(false, templateType0.isNoObjectType());
      assertEquals(BooleanLiteralSet.TRUE, templateType0.getPossibleToBooleanOutcomes());
      assertEquals(false, templateType0.isEmptyType());
      assertEquals(false, templateType0.isVoidType());
      assertEquals(false, templateType0.isNumberValueType());
      assertEquals("ELLIPSIS", templateType0.getReferenceName());
      assertEquals(false, templateType0.isResolved());
      assertEquals(false, templateType0.isFunctionType());
      assertEquals(false, templateType0.isNoType());
      assertEquals(true, templateType0.isTemplateType());
      assertEquals(false, templateType0.isUnionType());
      assertEquals(false, templateType0.hasCachedValues());
      assertEquals(false, templateType0.isAllType());
      assertEquals("ELLIPSIS", templateType0.toString());
      assertEquals(false, templateType0.isRecordType());
      assertNotNull(templateType0);
      
      FunctionPrototypeType functionPrototypeType0 = new FunctionPrototypeType(jSTypeRegistry0, errorFunctionType0, templateType0);
      assertEquals(false, errorFunctionType0.isUnionType());
      assertEquals(false, errorFunctionType0.isRecordType());
      assertEquals(true, errorFunctionType0.isFunctionType());
      assertEquals(false, errorFunctionType0.isNoType());
      assertEquals(true, errorFunctionType0.hasInstanceType());
      assertEquals(false, errorFunctionType0.isTemplateType());
      assertEquals(false, errorFunctionType0.isReturnTypeInferred());
      assertEquals(false, errorFunctionType0.isNoObjectType());
      assertEquals(false, errorFunctionType0.isNumberValueType());
      assertEquals(false, errorFunctionType0.isResolved());
      assertEquals(false, errorFunctionType0.isBooleanValueType());
      assertEquals(3, errorFunctionType0.getMaxArguments());
      assertEquals(true, errorFunctionType0.canBeCalled());
      assertEquals(false, errorFunctionType0.isEmptyType());
      assertEquals(false, errorFunctionType0.isAllType());
      assertEquals(false, errorFunctionType0.isInterface());
      assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      assertEquals(false, errorFunctionType0.hasCachedValues());
      assertNull(errorFunctionType0.getTemplateTypeName());
      assertEquals(false, errorFunctionType0.isNullType());
      assertEquals(false, errorFunctionType0.isVoidType());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertEquals(true, errorFunctionType0.isConstructor());
      assertEquals(false, errorFunctionType0.isStringValueType());
      assertEquals(false, functionPrototypeType0.isTemplateType());
      assertEquals(false, functionPrototypeType0.isRecordType());
      assertEquals(false, functionPrototypeType0.isAllType());
      assertEquals(false, functionPrototypeType0.isUnionType());
      assertEquals(false, functionPrototypeType0.isNoObjectType());
      assertEquals(BooleanLiteralSet.TRUE, functionPrototypeType0.getPossibleToBooleanOutcomes());
      assertEquals(false, functionPrototypeType0.isBooleanValueType());
      assertEquals(false, functionPrototypeType0.isResolved());
      assertEquals(false, functionPrototypeType0.isNoType());
      assertEquals(true, functionPrototypeType0.hasReferenceName());
      assertEquals(false, functionPrototypeType0.isNumberValueType());
      assertEquals(false, functionPrototypeType0.isFunctionType());
      assertEquals(false, functionPrototypeType0.isVoidType());
      assertEquals(false, functionPrototypeType0.isEmptyType());
      assertEquals(false, functionPrototypeType0.isStringValueType());
      assertEquals(true, functionPrototypeType0.isFunctionPrototypeType());
      assertEquals(false, functionPrototypeType0.isNullType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, templateType0.isNativeObjectType());
      assertEquals(false, templateType0.isBooleanValueType());
      assertEquals(false, templateType0.isStringValueType());
      assertEquals(false, templateType0.isNullType());
      assertEquals(false, templateType0.isNoObjectType());
      assertEquals(BooleanLiteralSet.TRUE, templateType0.getPossibleToBooleanOutcomes());
      assertEquals(false, templateType0.isEmptyType());
      assertEquals(false, templateType0.isVoidType());
      assertEquals(false, templateType0.isNumberValueType());
      assertEquals("ELLIPSIS", templateType0.getReferenceName());
      assertEquals(false, templateType0.isResolved());
      assertEquals(false, templateType0.isFunctionType());
      assertEquals(false, templateType0.isNoType());
      assertEquals(true, templateType0.isTemplateType());
      assertEquals(false, templateType0.isUnionType());
      assertEquals(false, templateType0.hasCachedValues());
      assertEquals(false, templateType0.isAllType());
      assertEquals("ELLIPSIS", templateType0.toString());
      assertEquals(false, templateType0.isRecordType());
      assertNotNull(functionPrototypeType0);
      
      UnknownType unknownType0 = (UnknownType)functionPrototypeType0.findPropertyType(string0);
      assertEquals(false, errorFunctionType0.isUnionType());
      assertEquals(false, errorFunctionType0.isRecordType());
      assertEquals(true, errorFunctionType0.isFunctionType());
      assertEquals(false, errorFunctionType0.isNoType());
      assertEquals(true, errorFunctionType0.hasInstanceType());
      assertEquals(false, errorFunctionType0.isTemplateType());
      assertEquals(false, errorFunctionType0.isReturnTypeInferred());
      assertEquals(false, errorFunctionType0.isNoObjectType());
      assertEquals(false, errorFunctionType0.isNumberValueType());
      assertEquals(false, errorFunctionType0.isResolved());
      assertEquals(false, errorFunctionType0.isBooleanValueType());
      assertEquals(3, errorFunctionType0.getMaxArguments());
      assertEquals(true, errorFunctionType0.canBeCalled());
      assertEquals(false, errorFunctionType0.isEmptyType());
      assertEquals(false, errorFunctionType0.isAllType());
      assertEquals(false, errorFunctionType0.isInterface());
      assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      assertEquals(false, errorFunctionType0.hasCachedValues());
      assertNull(errorFunctionType0.getTemplateTypeName());
      assertEquals(false, errorFunctionType0.isNullType());
      assertEquals(false, errorFunctionType0.isVoidType());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertEquals(true, errorFunctionType0.isConstructor());
      assertEquals(false, errorFunctionType0.isStringValueType());
      assertEquals(false, unknownType0.isResolved());
      assertEquals(true, unknownType0.isUnknownType());
      assertEquals(false, unknownType0.isNoObjectType());
      assertEquals(true, unknownType0.matchesStringContext());
      assertEquals(true, unknownType0.matchesObjectContext());
      assertEquals(false, unknownType0.isFunctionType());
      assertEquals(false, unknownType0.isUnionType());
      assertEquals(true, unknownType0.isNullable());
      assertEquals(false, unknownType0.isNoType());
      assertEquals(false, unknownType0.isNullType());
      assertEquals(true, unknownType0.canBeCalled());
      assertEquals(false, unknownType0.isBooleanValueType());
      assertEquals(false, unknownType0.isNumberValueType());
      assertEquals(false, unknownType0.isEmptyType());
      assertEquals(2147483647, unknownType0.getPropertiesCount());
      assertEquals(BooleanLiteralSet.BOTH, unknownType0.getPossibleToBooleanOutcomes());
      assertEquals(false, unknownType0.hasCachedValues());
      assertEquals(false, unknownType0.isTemplateType());
      assertEquals(false, unknownType0.isAllType());
      assertEquals(false, unknownType0.isRecordType());
      assertEquals("?", unknownType0.toString());
      assertEquals(false, unknownType0.isStringValueType());
      assertEquals(false, unknownType0.isVoidType());
      assertEquals(true, unknownType0.matchesNumberContext());
      assertEquals("?", unknownType0.getReferenceName());
      assertEquals(false, unknownType0.isCheckedUnknownType());
      assertEquals(false, unknownType0.hasReferenceName());
      assertEquals(false, unknownType0.isNativeObjectType());
      assertEquals(false, functionPrototypeType0.isTemplateType());
      assertEquals(false, functionPrototypeType0.isRecordType());
      assertEquals(false, functionPrototypeType0.isAllType());
      assertEquals(false, functionPrototypeType0.isUnionType());
      assertEquals(false, functionPrototypeType0.isNoObjectType());
      assertEquals(BooleanLiteralSet.TRUE, functionPrototypeType0.getPossibleToBooleanOutcomes());
      assertEquals(false, functionPrototypeType0.isBooleanValueType());
      assertEquals(false, functionPrototypeType0.isResolved());
      assertEquals(false, functionPrototypeType0.isNoType());
      assertEquals(true, functionPrototypeType0.hasReferenceName());
      assertEquals(false, functionPrototypeType0.isNumberValueType());
      assertEquals(false, functionPrototypeType0.isFunctionType());
      assertEquals(false, functionPrototypeType0.isVoidType());
      assertEquals(false, functionPrototypeType0.isEmptyType());
      assertEquals(false, functionPrototypeType0.isStringValueType());
      assertEquals(true, functionPrototypeType0.isFunctionPrototypeType());
      assertEquals(false, functionPrototypeType0.isNullType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, templateType0.isNativeObjectType());
      assertEquals(false, templateType0.isBooleanValueType());
      assertEquals(false, templateType0.isStringValueType());
      assertEquals(false, templateType0.isNullType());
      assertEquals(false, templateType0.isNoObjectType());
      assertEquals(BooleanLiteralSet.TRUE, templateType0.getPossibleToBooleanOutcomes());
      assertEquals(false, templateType0.isEmptyType());
      assertEquals(false, templateType0.isVoidType());
      assertEquals(false, templateType0.isNumberValueType());
      assertEquals("ELLIPSIS", templateType0.getReferenceName());
      assertEquals(false, templateType0.isResolved());
      assertEquals(false, templateType0.isFunctionType());
      assertEquals(false, templateType0.isNoType());
      assertEquals(true, templateType0.isTemplateType());
      assertEquals(false, templateType0.isUnionType());
      assertEquals(false, templateType0.hasCachedValues());
      assertEquals(false, templateType0.isAllType());
      assertEquals("ELLIPSIS", templateType0.toString());
      assertEquals(false, templateType0.isRecordType());
      assertNotNull(unknownType0);
  }

  @Test
  public void test02()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      boolean boolean0 = false;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0, boolean0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      String string0 = "ELLIPSIS";
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, string0);
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, errorFunctionType0.isTemplateType());
      assertEquals(false, errorFunctionType0.isAllType());
      assertEquals(3, errorFunctionType0.getMaxArguments());
      assertEquals(true, errorFunctionType0.isConstructor());
      assertEquals(false, errorFunctionType0.isUnionType());
      assertEquals(true, errorFunctionType0.canBeCalled());
      assertEquals(false, errorFunctionType0.isNumberValueType());
      assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      assertEquals(false, errorFunctionType0.isInterface());
      assertEquals(false, errorFunctionType0.isBooleanValueType());
      assertEquals(false, errorFunctionType0.isStringValueType());
      assertEquals(false, errorFunctionType0.isEmptyType());
      assertEquals(true, errorFunctionType0.hasInstanceType());
      assertNull(errorFunctionType0.getTemplateTypeName());
      assertEquals(false, errorFunctionType0.isNoType());
      assertEquals(false, errorFunctionType0.hasCachedValues());
      assertEquals(false, errorFunctionType0.isRecordType());
      assertEquals(false, errorFunctionType0.isResolved());
      assertEquals(true, errorFunctionType0.isFunctionType());
      assertEquals(false, errorFunctionType0.isReturnTypeInferred());
      assertEquals(false, errorFunctionType0.isNullType());
      assertEquals(false, errorFunctionType0.isNoObjectType());
      assertEquals(false, errorFunctionType0.isVoidType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(errorFunctionType0);
      
      JSType jSType0 = errorFunctionType0.findPropertyType(string0);
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, errorFunctionType0.isTemplateType());
      assertEquals(false, errorFunctionType0.isAllType());
      assertEquals(3, errorFunctionType0.getMaxArguments());
      assertEquals(true, errorFunctionType0.isConstructor());
      assertEquals(false, errorFunctionType0.isUnionType());
      assertEquals(true, errorFunctionType0.canBeCalled());
      assertEquals(false, errorFunctionType0.isNumberValueType());
      assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      assertEquals(false, errorFunctionType0.isInterface());
      assertEquals(false, errorFunctionType0.isBooleanValueType());
      assertEquals(false, errorFunctionType0.isStringValueType());
      assertEquals(false, errorFunctionType0.isEmptyType());
      assertEquals(true, errorFunctionType0.hasInstanceType());
      assertNull(errorFunctionType0.getTemplateTypeName());
      assertEquals(false, errorFunctionType0.isNoType());
      assertEquals(false, errorFunctionType0.hasCachedValues());
      assertEquals(false, errorFunctionType0.isRecordType());
      assertEquals(false, errorFunctionType0.isResolved());
      assertEquals(true, errorFunctionType0.isFunctionType());
      assertEquals(false, errorFunctionType0.isReturnTypeInferred());
      assertEquals(false, errorFunctionType0.isNullType());
      assertEquals(false, errorFunctionType0.isNoObjectType());
      assertEquals(false, errorFunctionType0.isVoidType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNull(jSType0);
  }

  @Test
  public void test03()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      String string0 = "0N7:o#v=";
      TemplateType templateType0 = new TemplateType(jSTypeRegistry0, string0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals("0N7:o#v=", templateType0.getReferenceName());
      assertEquals(false, templateType0.isResolved());
      assertEquals(false, templateType0.isNullType());
      assertEquals(false, templateType0.isBooleanValueType());
      assertEquals(false, templateType0.isNativeObjectType());
      assertEquals(false, templateType0.isNoType());
      assertEquals(false, templateType0.isUnionType());
      assertEquals(BooleanLiteralSet.TRUE, templateType0.getPossibleToBooleanOutcomes());
      assertEquals(false, templateType0.isStringValueType());
      assertEquals(true, templateType0.isTemplateType());
      assertEquals(false, templateType0.hasCachedValues());
      assertEquals(false, templateType0.isAllType());
      assertEquals(false, templateType0.isNumberValueType());
      assertEquals(false, templateType0.isVoidType());
      assertEquals(false, templateType0.isRecordType());
      assertEquals(false, templateType0.isEmptyType());
      assertEquals(false, templateType0.isNoObjectType());
      assertEquals("0N7:o#v=", templateType0.toString());
      assertEquals(false, templateType0.isFunctionType());
      assertNotNull(templateType0);
      
      EnumType enumType0 = jSTypeRegistry0.createEnumType(string0, (JSType) templateType0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals("0N7:o#v=", templateType0.getReferenceName());
      assertEquals(false, templateType0.isResolved());
      assertEquals(false, templateType0.isNullType());
      assertEquals(false, templateType0.isBooleanValueType());
      assertEquals(false, templateType0.isNativeObjectType());
      assertEquals(false, templateType0.isNoType());
      assertEquals(false, templateType0.isUnionType());
      assertEquals(BooleanLiteralSet.TRUE, templateType0.getPossibleToBooleanOutcomes());
      assertEquals(false, templateType0.isStringValueType());
      assertEquals(true, templateType0.isTemplateType());
      assertEquals(false, templateType0.hasCachedValues());
      assertEquals(false, templateType0.isAllType());
      assertEquals(false, templateType0.isNumberValueType());
      assertEquals(false, templateType0.isVoidType());
      assertEquals(false, templateType0.isRecordType());
      assertEquals(false, templateType0.isEmptyType());
      assertEquals(false, templateType0.isNoObjectType());
      assertEquals("0N7:o#v=", templateType0.toString());
      assertEquals(false, templateType0.isFunctionType());
      assertEquals(false, enumType0.isFunctionType());
      assertEquals(false, enumType0.isTemplateType());
      assertEquals(false, enumType0.isNullType());
      assertEquals(false, enumType0.isNoObjectType());
      assertEquals(false, enumType0.isStringValueType());
      assertEquals(false, enumType0.isUnionType());
      assertEquals(BooleanLiteralSet.TRUE, enumType0.getPossibleToBooleanOutcomes());
      assertEquals(false, enumType0.isAllType());
      assertEquals(false, enumType0.isNumberValueType());
      assertEquals(false, enumType0.isVoidType());
      assertEquals(false, enumType0.isEmptyType());
      assertEquals(false, enumType0.matchesNumberContext());
      assertEquals(false, enumType0.isRecordType());
      assertEquals(true, enumType0.matchesStringContext());
      assertEquals(false, enumType0.isNoType());
      assertEquals(true, enumType0.matchesObjectContext());
      assertEquals(false, enumType0.isResolved());
      assertEquals(false, enumType0.isBooleanValueType());
      assertEquals(true, enumType0.isEnumType());
      assertNotNull(enumType0);
      
      EnumElementType enumElementType0 = enumType0.getElementsType();
      assertEquals(true, enumElementType0.isEnumElementType());
      assertEquals(false, enumElementType0.isResolved());
      assertEquals(false, enumElementType0.isNoType());
      assertEquals(false, enumElementType0.isTemplateType());
      assertEquals(false, enumElementType0.isUnionType());
      assertEquals(false, enumElementType0.isRecordType());
      assertEquals(false, enumElementType0.isEmptyType());
      assertEquals(true, enumElementType0.hasReferenceName());
      assertEquals(false, enumElementType0.isStringValueType());
      assertEquals(false, enumElementType0.isAllType());
      assertEquals(false, enumElementType0.isNullType());
      assertEquals(BooleanLiteralSet.TRUE, enumElementType0.getPossibleToBooleanOutcomes());
      assertEquals(true, enumElementType0.isNominalType());
      assertEquals(false, enumElementType0.isNumberValueType());
      assertEquals(false, enumElementType0.isBooleanValueType());
      assertEquals(false, enumElementType0.isNativeObjectType());
      assertEquals(false, enumElementType0.isVoidType());
      assertEquals(false, enumElementType0.isFunctionType());
      assertEquals(false, enumElementType0.hasCachedValues());
      assertEquals(false, enumElementType0.isNoObjectType());
      assertEquals("0N7:o#v=", enumElementType0.getReferenceName());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals("0N7:o#v=", templateType0.getReferenceName());
      assertEquals(false, templateType0.isResolved());
      assertEquals(false, templateType0.isNullType());
      assertEquals(false, templateType0.isBooleanValueType());
      assertEquals(false, templateType0.isNativeObjectType());
      assertEquals(false, templateType0.isNoType());
      assertEquals(false, templateType0.isUnionType());
      assertEquals(BooleanLiteralSet.TRUE, templateType0.getPossibleToBooleanOutcomes());
      assertEquals(false, templateType0.isStringValueType());
      assertEquals(true, templateType0.isTemplateType());
      assertEquals(false, templateType0.hasCachedValues());
      assertEquals(false, templateType0.isAllType());
      assertEquals(false, templateType0.isNumberValueType());
      assertEquals(false, templateType0.isVoidType());
      assertEquals(false, templateType0.isRecordType());
      assertEquals(false, templateType0.isEmptyType());
      assertEquals(false, templateType0.isNoObjectType());
      assertEquals("0N7:o#v=", templateType0.toString());
      assertEquals(false, templateType0.isFunctionType());
      assertEquals(false, enumType0.isFunctionType());
      assertEquals(false, enumType0.isTemplateType());
      assertEquals(false, enumType0.isNullType());
      assertEquals(false, enumType0.isNoObjectType());
      assertEquals(false, enumType0.isStringValueType());
      assertEquals(false, enumType0.isUnionType());
      assertEquals(BooleanLiteralSet.TRUE, enumType0.getPossibleToBooleanOutcomes());
      assertEquals(false, enumType0.isAllType());
      assertEquals(false, enumType0.isNumberValueType());
      assertEquals(false, enumType0.isVoidType());
      assertEquals(false, enumType0.isEmptyType());
      assertEquals(false, enumType0.matchesNumberContext());
      assertEquals(false, enumType0.isRecordType());
      assertEquals(true, enumType0.matchesStringContext());
      assertEquals(false, enumType0.isNoType());
      assertEquals(true, enumType0.matchesObjectContext());
      assertEquals(false, enumType0.isResolved());
      assertEquals(false, enumType0.isBooleanValueType());
      assertEquals(true, enumType0.isEnumType());
      assertNotNull(enumElementType0);
      
      boolean boolean0 = enumElementType0.hasOwnDeclaredProperty(string0);
      assertFalse(boolean0);
      assertEquals(true, enumElementType0.isEnumElementType());
      assertEquals(false, enumElementType0.isResolved());
      assertEquals(false, enumElementType0.isNoType());
      assertEquals(false, enumElementType0.isTemplateType());
      assertEquals(false, enumElementType0.isUnionType());
      assertEquals(false, enumElementType0.isRecordType());
      assertEquals(false, enumElementType0.isEmptyType());
      assertEquals(true, enumElementType0.hasReferenceName());
      assertEquals(false, enumElementType0.isStringValueType());
      assertEquals(false, enumElementType0.isAllType());
      assertEquals(false, enumElementType0.isNullType());
      assertEquals(BooleanLiteralSet.TRUE, enumElementType0.getPossibleToBooleanOutcomes());
      assertEquals(true, enumElementType0.isNominalType());
      assertEquals(false, enumElementType0.isNumberValueType());
      assertEquals(false, enumElementType0.isBooleanValueType());
      assertEquals(false, enumElementType0.isNativeObjectType());
      assertEquals(false, enumElementType0.isVoidType());
      assertEquals(false, enumElementType0.isFunctionType());
      assertEquals(false, enumElementType0.hasCachedValues());
      assertEquals(false, enumElementType0.isNoObjectType());
      assertEquals("0N7:o#v=", enumElementType0.getReferenceName());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals("0N7:o#v=", templateType0.getReferenceName());
      assertEquals(false, templateType0.isResolved());
      assertEquals(false, templateType0.isNullType());
      assertEquals(false, templateType0.isBooleanValueType());
      assertEquals(false, templateType0.isNativeObjectType());
      assertEquals(false, templateType0.isNoType());
      assertEquals(false, templateType0.isUnionType());
      assertEquals(BooleanLiteralSet.TRUE, templateType0.getPossibleToBooleanOutcomes());
      assertEquals(false, templateType0.isStringValueType());
      assertEquals(true, templateType0.isTemplateType());
      assertEquals(false, templateType0.hasCachedValues());
      assertEquals(false, templateType0.isAllType());
      assertEquals(false, templateType0.isNumberValueType());
      assertEquals(false, templateType0.isVoidType());
      assertEquals(false, templateType0.isRecordType());
      assertEquals(false, templateType0.isEmptyType());
      assertEquals(false, templateType0.isNoObjectType());
      assertEquals("0N7:o#v=", templateType0.toString());
      assertEquals(false, templateType0.isFunctionType());
      assertEquals(false, enumType0.isFunctionType());
      assertEquals(false, enumType0.isTemplateType());
      assertEquals(false, enumType0.isNullType());
      assertEquals(false, enumType0.isNoObjectType());
      assertEquals(false, enumType0.isStringValueType());
      assertEquals(false, enumType0.isUnionType());
      assertEquals(BooleanLiteralSet.TRUE, enumType0.getPossibleToBooleanOutcomes());
      assertEquals(false, enumType0.isAllType());
      assertEquals(false, enumType0.isNumberValueType());
      assertEquals(false, enumType0.isVoidType());
      assertEquals(false, enumType0.isEmptyType());
      assertEquals(false, enumType0.matchesNumberContext());
      assertEquals(false, enumType0.isRecordType());
      assertEquals(true, enumType0.matchesStringContext());
      assertEquals(false, enumType0.isNoType());
      assertEquals(true, enumType0.matchesObjectContext());
      assertEquals(false, enumType0.isResolved());
      assertEquals(false, enumType0.isBooleanValueType());
      assertEquals(true, enumType0.isEnumType());
      
      NoType noType0 = new NoType(jSTypeRegistry0);
      assertEquals(false, noType0.isInterface());
      assertEquals(false, noType0.isAllType());
      assertEquals(false, noType0.isStringValueType());
      assertEquals(true, noType0.matchesObjectContext());
      assertEquals(2147483647, noType0.getMaxArguments());
      assertEquals(true, noType0.matchesNumberContext());
      assertEquals(true, noType0.isEmptyType());
      assertEquals(true, noType0.hasInstanceType());
      assertEquals(false, noType0.isUnionType());
      assertEquals("None", noType0.toString());
      assertEquals(false, noType0.isVoidType());
      assertEquals(true, noType0.isNullable());
      assertEquals(2147483647, noType0.getPropertiesCount());
      assertEquals(true, noType0.matchesStringContext());
      assertEquals(false, noType0.isRecordType());
      assertEquals(true, noType0.isConstructor());
      assertEquals(false, noType0.isBooleanValueType());
      assertEquals(false, noType0.isOrdinaryFunction());
      assertEquals(false, noType0.isNoObjectType());
      assertEquals(false, noType0.isTemplateType());
      assertEquals(true, noType0.canBeCalled());
      assertEquals(false, noType0.isFunctionType());
      assertEquals(false, noType0.isResolved());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noType0.isNullType());
      assertEquals(false, noType0.hasCachedValues());
      assertNull(noType0.getTemplateTypeName());
      assertEquals(false, noType0.isReturnTypeInferred());
      assertEquals(false, noType0.isNumberValueType());
      assertEquals(true, noType0.isNoType());
      assertNull(noType0.getReferenceName());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(noType0);
      
      boolean boolean1 = noType0.defineInferredProperty(string0, (JSType) templateType0, boolean0);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean0 == boolean1);
      assertTrue(boolean1);
      assertEquals(true, enumElementType0.isEnumElementType());
      assertEquals(false, enumElementType0.isResolved());
      assertEquals(false, enumElementType0.isNoType());
      assertEquals(false, enumElementType0.isTemplateType());
      assertEquals(false, enumElementType0.isUnionType());
      assertEquals(false, enumElementType0.isRecordType());
      assertEquals(false, enumElementType0.isEmptyType());
      assertEquals(true, enumElementType0.hasReferenceName());
      assertEquals(false, enumElementType0.isStringValueType());
      assertEquals(false, enumElementType0.isAllType());
      assertEquals(false, enumElementType0.isNullType());
      assertEquals(BooleanLiteralSet.TRUE, enumElementType0.getPossibleToBooleanOutcomes());
      assertEquals(true, enumElementType0.isNominalType());
      assertEquals(false, enumElementType0.isNumberValueType());
      assertEquals(false, enumElementType0.isBooleanValueType());
      assertEquals(false, enumElementType0.isNativeObjectType());
      assertEquals(false, enumElementType0.isVoidType());
      assertEquals(false, enumElementType0.isFunctionType());
      assertEquals(false, enumElementType0.hasCachedValues());
      assertEquals(false, enumElementType0.isNoObjectType());
      assertEquals("0N7:o#v=", enumElementType0.getReferenceName());
      assertEquals(false, noType0.isInterface());
      assertEquals(false, noType0.isAllType());
      assertEquals(false, noType0.isStringValueType());
      assertEquals(true, noType0.matchesObjectContext());
      assertEquals(2147483647, noType0.getMaxArguments());
      assertEquals(true, noType0.matchesNumberContext());
      assertEquals(true, noType0.isEmptyType());
      assertEquals(true, noType0.hasInstanceType());
      assertEquals(false, noType0.isUnionType());
      assertEquals("None", noType0.toString());
      assertEquals(false, noType0.isVoidType());
      assertEquals(true, noType0.isNullable());
      assertEquals(2147483647, noType0.getPropertiesCount());
      assertEquals(true, noType0.matchesStringContext());
      assertEquals(false, noType0.isRecordType());
      assertEquals(true, noType0.isConstructor());
      assertEquals(false, noType0.isBooleanValueType());
      assertEquals(false, noType0.isOrdinaryFunction());
      assertEquals(false, noType0.isNoObjectType());
      assertEquals(false, noType0.isTemplateType());
      assertEquals(true, noType0.canBeCalled());
      assertEquals(false, noType0.isFunctionType());
      assertEquals(false, noType0.isResolved());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noType0.isNullType());
      assertEquals(false, noType0.hasCachedValues());
      assertNull(noType0.getTemplateTypeName());
      assertEquals(false, noType0.isReturnTypeInferred());
      assertEquals(false, noType0.isNumberValueType());
      assertEquals(true, noType0.isNoType());
      assertNull(noType0.getReferenceName());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals("0N7:o#v=", templateType0.getReferenceName());
      assertEquals(false, templateType0.isResolved());
      assertEquals(false, templateType0.isNullType());
      assertEquals(false, templateType0.isBooleanValueType());
      assertEquals(false, templateType0.isNativeObjectType());
      assertEquals(false, templateType0.isNoType());
      assertEquals(false, templateType0.isUnionType());
      assertEquals(BooleanLiteralSet.TRUE, templateType0.getPossibleToBooleanOutcomes());
      assertEquals(false, templateType0.isStringValueType());
      assertEquals(true, templateType0.isTemplateType());
      assertEquals(false, templateType0.hasCachedValues());
      assertEquals(false, templateType0.isAllType());
      assertEquals(false, templateType0.isNumberValueType());
      assertEquals(false, templateType0.isVoidType());
      assertEquals(false, templateType0.isRecordType());
      assertEquals(false, templateType0.isEmptyType());
      assertEquals(false, templateType0.isNoObjectType());
      assertEquals("0N7:o#v=", templateType0.toString());
      assertEquals(false, templateType0.isFunctionType());
      assertEquals(false, enumType0.isFunctionType());
      assertEquals(false, enumType0.isTemplateType());
      assertEquals(false, enumType0.isNullType());
      assertEquals(false, enumType0.isNoObjectType());
      assertEquals(false, enumType0.isStringValueType());
      assertEquals(false, enumType0.isUnionType());
      assertEquals(BooleanLiteralSet.TRUE, enumType0.getPossibleToBooleanOutcomes());
      assertEquals(false, enumType0.isAllType());
      assertEquals(false, enumType0.isNumberValueType());
      assertEquals(false, enumType0.isVoidType());
      assertEquals(false, enumType0.isEmptyType());
      assertEquals(false, enumType0.matchesNumberContext());
      assertEquals(false, enumType0.isRecordType());
      assertEquals(true, enumType0.matchesStringContext());
      assertEquals(false, enumType0.isNoType());
      assertEquals(true, enumType0.matchesObjectContext());
      assertEquals(false, enumType0.isResolved());
      assertEquals(false, enumType0.isBooleanValueType());
      assertEquals(true, enumType0.isEnumType());
  }

  @Test
  public void test04()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      boolean boolean0 = true;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0, boolean0);
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      String string0 = "(1{A~Iy!0^ea2i";
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, string0);
      assertEquals(false, errorFunctionType0.isRecordType());
      assertEquals(false, errorFunctionType0.isInterface());
      assertEquals(true, errorFunctionType0.canBeCalled());
      assertEquals(false, errorFunctionType0.isUnionType());
      assertEquals(false, errorFunctionType0.isNoType());
      assertEquals(false, errorFunctionType0.isNumberValueType());
      assertEquals(true, errorFunctionType0.hasInstanceType());
      assertEquals(false, errorFunctionType0.isBooleanValueType());
      assertEquals(false, errorFunctionType0.hasCachedValues());
      assertEquals(false, errorFunctionType0.isResolved());
      assertEquals(3, errorFunctionType0.getMaxArguments());
      assertEquals(false, errorFunctionType0.isEmptyType());
      assertEquals(false, errorFunctionType0.isVoidType());
      assertEquals(false, errorFunctionType0.isAllType());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      assertEquals(true, errorFunctionType0.isFunctionType());
      assertNull(errorFunctionType0.getTemplateTypeName());
      assertEquals(false, errorFunctionType0.isTemplateType());
      assertEquals(true, errorFunctionType0.isConstructor());
      assertEquals(false, errorFunctionType0.isReturnTypeInferred());
      assertEquals(false, errorFunctionType0.isStringValueType());
      assertEquals(false, errorFunctionType0.isNullType());
      assertEquals(false, errorFunctionType0.isNoObjectType());
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(errorFunctionType0);
      
      EnumType enumType0 = new EnumType(jSTypeRegistry0, string0, errorFunctionType0);
      assertEquals(false, errorFunctionType0.isRecordType());
      assertEquals(false, errorFunctionType0.isInterface());
      assertEquals(true, errorFunctionType0.canBeCalled());
      assertEquals(false, errorFunctionType0.isUnionType());
      assertEquals(false, errorFunctionType0.isNoType());
      assertEquals(false, errorFunctionType0.isNumberValueType());
      assertEquals(true, errorFunctionType0.hasInstanceType());
      assertEquals(false, errorFunctionType0.isBooleanValueType());
      assertEquals(false, errorFunctionType0.hasCachedValues());
      assertEquals(false, errorFunctionType0.isResolved());
      assertEquals(3, errorFunctionType0.getMaxArguments());
      assertEquals(false, errorFunctionType0.isEmptyType());
      assertEquals(false, errorFunctionType0.isVoidType());
      assertEquals(false, errorFunctionType0.isAllType());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      assertEquals(true, errorFunctionType0.isFunctionType());
      assertNull(errorFunctionType0.getTemplateTypeName());
      assertEquals(false, errorFunctionType0.isTemplateType());
      assertEquals(true, errorFunctionType0.isConstructor());
      assertEquals(false, errorFunctionType0.isReturnTypeInferred());
      assertEquals(false, errorFunctionType0.isStringValueType());
      assertEquals(false, errorFunctionType0.isNullType());
      assertEquals(false, errorFunctionType0.isNoObjectType());
      assertEquals(false, enumType0.isStringValueType());
      assertEquals(false, enumType0.isFunctionType());
      assertEquals(BooleanLiteralSet.TRUE, enumType0.getPossibleToBooleanOutcomes());
      assertEquals(false, enumType0.isRecordType());
      assertEquals(false, enumType0.isNumberValueType());
      assertEquals(false, enumType0.isTemplateType());
      assertEquals(true, enumType0.matchesStringContext());
      assertEquals(false, enumType0.matchesNumberContext());
      assertEquals(false, enumType0.isNoType());
      assertEquals(false, enumType0.isNoObjectType());
      assertEquals(true, enumType0.matchesObjectContext());
      assertEquals(false, enumType0.isVoidType());
      assertEquals(true, enumType0.isEnumType());
      assertEquals(false, enumType0.isBooleanValueType());
      assertEquals(false, enumType0.isResolved());
      assertEquals(false, enumType0.isEmptyType());
      assertEquals(false, enumType0.isAllType());
      assertEquals(false, enumType0.isNullType());
      assertEquals(false, enumType0.isUnionType());
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(enumType0);
      
      EnumElementType enumElementType0 = new EnumElementType(jSTypeRegistry0, errorFunctionType0, string0);
      assertEquals(false, errorFunctionType0.isRecordType());
      assertEquals(false, errorFunctionType0.isInterface());
      assertEquals(true, errorFunctionType0.canBeCalled());
      assertEquals(false, errorFunctionType0.isUnionType());
      assertEquals(false, errorFunctionType0.isNoType());
      assertEquals(false, errorFunctionType0.isNumberValueType());
      assertEquals(true, errorFunctionType0.hasInstanceType());
      assertEquals(false, errorFunctionType0.isBooleanValueType());
      assertEquals(false, errorFunctionType0.hasCachedValues());
      assertEquals(false, errorFunctionType0.isResolved());
      assertEquals(3, errorFunctionType0.getMaxArguments());
      assertEquals(false, errorFunctionType0.isEmptyType());
      assertEquals(false, errorFunctionType0.isVoidType());
      assertEquals(false, errorFunctionType0.isAllType());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      assertEquals(true, errorFunctionType0.isFunctionType());
      assertNull(errorFunctionType0.getTemplateTypeName());
      assertEquals(false, errorFunctionType0.isTemplateType());
      assertEquals(true, errorFunctionType0.isConstructor());
      assertEquals(false, errorFunctionType0.isReturnTypeInferred());
      assertEquals(false, errorFunctionType0.isStringValueType());
      assertEquals(false, errorFunctionType0.isNullType());
      assertEquals(false, errorFunctionType0.isNoObjectType());
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, enumElementType0.isEmptyType());
      assertEquals(true, enumElementType0.isNominalType());
      assertEquals(false, enumElementType0.isBooleanValueType());
      assertEquals(false, enumElementType0.isAllType());
      assertEquals("(1{A~Iy!0^ea2i", enumElementType0.getReferenceName());
      assertEquals(BooleanLiteralSet.TRUE, enumElementType0.getPossibleToBooleanOutcomes());
      assertEquals(false, enumElementType0.isNoObjectType());
      assertEquals(false, enumElementType0.isNoType());
      assertEquals(false, enumElementType0.isNumberValueType());
      assertEquals(false, enumElementType0.isVoidType());
      assertEquals(false, enumElementType0.isNullType());
      assertEquals(false, enumElementType0.hasCachedValues());
      assertEquals(false, enumElementType0.isUnionType());
      assertEquals(false, enumElementType0.isFunctionType());
      assertEquals(false, enumElementType0.isRecordType());
      assertEquals(false, enumElementType0.isResolved());
      assertEquals(false, enumElementType0.isStringValueType());
      assertEquals(true, enumElementType0.isEnumElementType());
      assertEquals(true, enumElementType0.hasReferenceName());
      assertEquals(false, enumElementType0.isTemplateType());
      assertEquals(false, enumElementType0.isNativeObjectType());
      assertNotNull(enumElementType0);
      
      boolean boolean1 = enumType0.defineInferredProperty(string0, (JSType) enumElementType0, boolean0);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean0 == boolean1);
      assertTrue(boolean1);
      assertEquals(false, errorFunctionType0.isRecordType());
      assertEquals(false, errorFunctionType0.isInterface());
      assertEquals(true, errorFunctionType0.canBeCalled());
      assertEquals(false, errorFunctionType0.isUnionType());
      assertEquals(false, errorFunctionType0.isNoType());
      assertEquals(false, errorFunctionType0.isNumberValueType());
      assertEquals(true, errorFunctionType0.hasInstanceType());
      assertEquals(false, errorFunctionType0.isBooleanValueType());
      assertEquals(false, errorFunctionType0.hasCachedValues());
      assertEquals(false, errorFunctionType0.isResolved());
      assertEquals(3, errorFunctionType0.getMaxArguments());
      assertEquals(false, errorFunctionType0.isEmptyType());
      assertEquals(false, errorFunctionType0.isVoidType());
      assertEquals(false, errorFunctionType0.isAllType());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      assertEquals(true, errorFunctionType0.isFunctionType());
      assertNull(errorFunctionType0.getTemplateTypeName());
      assertEquals(false, errorFunctionType0.isTemplateType());
      assertEquals(true, errorFunctionType0.isConstructor());
      assertEquals(false, errorFunctionType0.isReturnTypeInferred());
      assertEquals(false, errorFunctionType0.isStringValueType());
      assertEquals(false, errorFunctionType0.isNullType());
      assertEquals(false, errorFunctionType0.isNoObjectType());
      assertEquals(false, enumType0.isStringValueType());
      assertEquals(false, enumType0.isFunctionType());
      assertEquals(BooleanLiteralSet.TRUE, enumType0.getPossibleToBooleanOutcomes());
      assertEquals(false, enumType0.isRecordType());
      assertEquals(false, enumType0.isNumberValueType());
      assertEquals(false, enumType0.isTemplateType());
      assertEquals(true, enumType0.matchesStringContext());
      assertEquals(false, enumType0.matchesNumberContext());
      assertEquals(false, enumType0.isNoType());
      assertEquals(false, enumType0.isNoObjectType());
      assertEquals(true, enumType0.matchesObjectContext());
      assertEquals(false, enumType0.isVoidType());
      assertEquals(true, enumType0.isEnumType());
      assertEquals(false, enumType0.isBooleanValueType());
      assertEquals(false, enumType0.isResolved());
      assertEquals(false, enumType0.isEmptyType());
      assertEquals(false, enumType0.isAllType());
      assertEquals(false, enumType0.isNullType());
      assertEquals(false, enumType0.isUnionType());
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, enumElementType0.isEmptyType());
      assertEquals(true, enumElementType0.isNominalType());
      assertEquals(false, enumElementType0.isBooleanValueType());
      assertEquals(false, enumElementType0.isAllType());
      assertEquals("(1{A~Iy!0^ea2i", enumElementType0.getReferenceName());
      assertEquals(BooleanLiteralSet.TRUE, enumElementType0.getPossibleToBooleanOutcomes());
      assertEquals(false, enumElementType0.isNoObjectType());
      assertEquals(false, enumElementType0.isNoType());
      assertEquals(false, enumElementType0.isNumberValueType());
      assertEquals(false, enumElementType0.isVoidType());
      assertEquals(false, enumElementType0.isNullType());
      assertEquals(false, enumElementType0.hasCachedValues());
      assertEquals(false, enumElementType0.isUnionType());
      assertEquals(false, enumElementType0.isFunctionType());
      assertEquals(false, enumElementType0.isRecordType());
      assertEquals(false, enumElementType0.isResolved());
      assertEquals(false, enumElementType0.isStringValueType());
      assertEquals(true, enumElementType0.isEnumElementType());
      assertEquals(true, enumElementType0.hasReferenceName());
      assertEquals(false, enumElementType0.isTemplateType());
      assertEquals(false, enumElementType0.isNativeObjectType());
  }

  @Test
  public void test05()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      String string0 = null;
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, string0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNull(errorFunctionType0.getTemplateTypeName());
      assertEquals(false, errorFunctionType0.isUnionType());
      assertEquals(false, errorFunctionType0.isNoObjectType());
      assertEquals(false, errorFunctionType0.isEmptyType());
      assertEquals(false, errorFunctionType0.isStringValueType());
      assertEquals(false, errorFunctionType0.isReturnTypeInferred());
      assertEquals(false, errorFunctionType0.isNoType());
      assertEquals(false, errorFunctionType0.isInterface());
      assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      assertEquals(false, errorFunctionType0.hasCachedValues());
      assertEquals(false, errorFunctionType0.isBooleanValueType());
      assertEquals(true, errorFunctionType0.isFunctionType());
      assertEquals(false, errorFunctionType0.isRecordType());
      assertEquals(true, errorFunctionType0.isConstructor());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, errorFunctionType0.isResolved());
      assertEquals(false, errorFunctionType0.isNumberValueType());
      assertEquals(false, errorFunctionType0.isNullType());
      assertEquals(true, errorFunctionType0.hasInstanceType());
      assertEquals(false, errorFunctionType0.isTemplateType());
      assertEquals(false, errorFunctionType0.isAllType());
      assertEquals(false, errorFunctionType0.isVoidType());
      assertEquals(3, errorFunctionType0.getMaxArguments());
      assertEquals(true, errorFunctionType0.canBeCalled());
      assertNotNull(errorFunctionType0);
      
      boolean boolean0 = errorFunctionType0.canTestForEqualityWith((JSType) errorFunctionType0);
      assertTrue(boolean0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNull(errorFunctionType0.getTemplateTypeName());
      assertEquals(false, errorFunctionType0.isUnionType());
      assertEquals(false, errorFunctionType0.isNoObjectType());
      assertEquals(false, errorFunctionType0.isEmptyType());
      assertEquals(false, errorFunctionType0.isStringValueType());
      assertEquals(false, errorFunctionType0.isReturnTypeInferred());
      assertEquals(false, errorFunctionType0.isNoType());
      assertEquals(false, errorFunctionType0.isInterface());
      assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      assertEquals(false, errorFunctionType0.isBooleanValueType());
      assertEquals(true, errorFunctionType0.isFunctionType());
      assertEquals(false, errorFunctionType0.isRecordType());
      assertEquals(true, errorFunctionType0.isConstructor());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, errorFunctionType0.isResolved());
      assertEquals(false, errorFunctionType0.isNumberValueType());
      assertEquals(true, errorFunctionType0.hasCachedValues());
      assertEquals(false, errorFunctionType0.isNullType());
      assertEquals(true, errorFunctionType0.hasInstanceType());
      assertEquals(false, errorFunctionType0.isTemplateType());
      assertEquals(false, errorFunctionType0.isAllType());
      assertEquals(false, errorFunctionType0.isVoidType());
      assertEquals(3, errorFunctionType0.getMaxArguments());
      assertEquals(true, errorFunctionType0.canBeCalled());
  }

  @Test
  public void test06()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      String string0 = "kx";
      int int0 = 1780;
      NamedType namedType0 = new NamedType(jSTypeRegistry0, string0, string0, int0, int0);
      assertEquals(BooleanLiteralSet.TRUE, namedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, namedType0.isTemplateType());
      assertEquals(false, namedType0.isUnionType());
      assertEquals(false, namedType0.isEmptyType());
      assertEquals(false, namedType0.isStringValueType());
      assertEquals(false, namedType0.isRecordType());
      assertEquals(false, namedType0.isResolved());
      assertEquals(false, namedType0.isBooleanValueType());
      assertEquals(false, namedType0.isNullType());
      assertEquals(false, namedType0.isNoObjectType());
      assertEquals(false, namedType0.isFunctionType());
      assertEquals(false, namedType0.isVoidType());
      assertEquals(false, namedType0.isNumberValueType());
      assertEquals(false, namedType0.isNoType());
      assertEquals(false, namedType0.hasCachedValues());
      assertEquals(false, namedType0.isNativeObjectType());
      assertEquals(false, namedType0.isAllType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(namedType0);
      
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, string0);
      assertEquals(false, errorFunctionType0.isResolved());
      assertEquals(true, errorFunctionType0.isFunctionType());
      assertEquals(false, errorFunctionType0.isNoObjectType());
      assertEquals(true, errorFunctionType0.canBeCalled());
      assertEquals(3, errorFunctionType0.getMaxArguments());
      assertEquals(false, errorFunctionType0.isUnionType());
      assertEquals(false, errorFunctionType0.isInterface());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, errorFunctionType0.isAllType());
      assertEquals(true, errorFunctionType0.isConstructor());
      assertEquals(false, errorFunctionType0.isNumberValueType());
      assertEquals(false, errorFunctionType0.isTemplateType());
      assertEquals(false, errorFunctionType0.isVoidType());
      assertEquals(true, errorFunctionType0.hasInstanceType());
      assertEquals(false, errorFunctionType0.isNullType());
      assertEquals(false, errorFunctionType0.isEmptyType());
      assertEquals(false, errorFunctionType0.isNoType());
      assertEquals(false, errorFunctionType0.hasCachedValues());
      assertEquals(false, errorFunctionType0.isStringValueType());
      assertEquals(false, errorFunctionType0.isBooleanValueType());
      assertNull(errorFunctionType0.getTemplateTypeName());
      assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      assertEquals(false, errorFunctionType0.isReturnTypeInferred());
      assertEquals(false, errorFunctionType0.isRecordType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(errorFunctionType0);
      
      FunctionPrototypeType functionPrototypeType0 = errorFunctionType0.getPrototype();
      assertEquals(false, errorFunctionType0.isResolved());
      assertEquals(true, errorFunctionType0.isFunctionType());
      assertEquals(true, errorFunctionType0.hasCachedValues());
      assertEquals(false, errorFunctionType0.isNoObjectType());
      assertEquals(true, errorFunctionType0.canBeCalled());
      assertEquals(3, errorFunctionType0.getMaxArguments());
      assertEquals(false, errorFunctionType0.isUnionType());
      assertEquals(false, errorFunctionType0.isInterface());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, errorFunctionType0.isAllType());
      assertEquals(true, errorFunctionType0.isConstructor());
      assertEquals(false, errorFunctionType0.isNumberValueType());
      assertEquals(false, errorFunctionType0.isTemplateType());
      assertEquals(false, errorFunctionType0.isVoidType());
      assertEquals(true, errorFunctionType0.hasInstanceType());
      assertEquals(false, errorFunctionType0.isNullType());
      assertEquals(false, errorFunctionType0.isEmptyType());
      assertEquals(false, errorFunctionType0.isNoType());
      assertEquals(false, errorFunctionType0.isStringValueType());
      assertEquals(false, errorFunctionType0.isBooleanValueType());
      assertNull(errorFunctionType0.getTemplateTypeName());
      assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      assertEquals(false, errorFunctionType0.isReturnTypeInferred());
      assertEquals(false, errorFunctionType0.isRecordType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, functionPrototypeType0.isVoidType());
      assertEquals(false, functionPrototypeType0.isNoObjectType());
      assertEquals(BooleanLiteralSet.TRUE, functionPrototypeType0.getPossibleToBooleanOutcomes());
      assertEquals(false, functionPrototypeType0.isResolved());
      assertEquals(false, functionPrototypeType0.isBooleanValueType());
      assertEquals(false, functionPrototypeType0.isRecordType());
      assertEquals(false, functionPrototypeType0.isAllType());
      assertEquals(false, functionPrototypeType0.isNoType());
      assertEquals(true, functionPrototypeType0.isFunctionPrototypeType());
      assertEquals(false, functionPrototypeType0.isEmptyType());
      assertEquals(false, functionPrototypeType0.isUnionType());
      assertEquals(false, functionPrototypeType0.isStringValueType());
      assertEquals(true, functionPrototypeType0.hasReferenceName());
      assertEquals(false, functionPrototypeType0.isFunctionType());
      assertEquals(false, functionPrototypeType0.isNumberValueType());
      assertEquals(false, functionPrototypeType0.isNullType());
      assertEquals(false, functionPrototypeType0.isTemplateType());
      assertNotNull(functionPrototypeType0);
      
      boolean boolean0 = functionPrototypeType0.canTestForEqualityWith((JSType) namedType0);
      assertTrue(boolean0);
      assertEquals(BooleanLiteralSet.TRUE, namedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, namedType0.isTemplateType());
      assertEquals(false, namedType0.isUnionType());
      assertEquals(false, namedType0.isEmptyType());
      assertEquals(false, namedType0.isStringValueType());
      assertEquals(false, namedType0.isRecordType());
      assertEquals(false, namedType0.isResolved());
      assertEquals(false, namedType0.isBooleanValueType());
      assertEquals(false, namedType0.isNullType());
      assertEquals(false, namedType0.isNoObjectType());
      assertEquals(false, namedType0.isFunctionType());
      assertEquals(false, namedType0.isVoidType());
      assertEquals(false, namedType0.isNumberValueType());
      assertEquals(false, namedType0.isNoType());
      assertEquals(false, namedType0.hasCachedValues());
      assertEquals(false, namedType0.isNativeObjectType());
      assertEquals(false, namedType0.isAllType());
      assertEquals(false, errorFunctionType0.isResolved());
      assertEquals(true, errorFunctionType0.isFunctionType());
      assertEquals(true, errorFunctionType0.hasCachedValues());
      assertEquals(false, errorFunctionType0.isNoObjectType());
      assertEquals(true, errorFunctionType0.canBeCalled());
      assertEquals(3, errorFunctionType0.getMaxArguments());
      assertEquals(false, errorFunctionType0.isUnionType());
      assertEquals(false, errorFunctionType0.isInterface());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, errorFunctionType0.isAllType());
      assertEquals(true, errorFunctionType0.isConstructor());
      assertEquals(false, errorFunctionType0.isNumberValueType());
      assertEquals(false, errorFunctionType0.isTemplateType());
      assertEquals(false, errorFunctionType0.isVoidType());
      assertEquals(true, errorFunctionType0.hasInstanceType());
      assertEquals(false, errorFunctionType0.isNullType());
      assertEquals(false, errorFunctionType0.isEmptyType());
      assertEquals(false, errorFunctionType0.isNoType());
      assertEquals(false, errorFunctionType0.isStringValueType());
      assertEquals(false, errorFunctionType0.isBooleanValueType());
      assertNull(errorFunctionType0.getTemplateTypeName());
      assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      assertEquals(false, errorFunctionType0.isReturnTypeInferred());
      assertEquals(false, errorFunctionType0.isRecordType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, functionPrototypeType0.isVoidType());
      assertEquals(false, functionPrototypeType0.isNoObjectType());
      assertEquals(BooleanLiteralSet.TRUE, functionPrototypeType0.getPossibleToBooleanOutcomes());
      assertEquals(false, functionPrototypeType0.isResolved());
      assertEquals(false, functionPrototypeType0.isBooleanValueType());
      assertEquals(false, functionPrototypeType0.isRecordType());
      assertEquals(false, functionPrototypeType0.isAllType());
      assertEquals(false, functionPrototypeType0.isNoType());
      assertEquals(true, functionPrototypeType0.isFunctionPrototypeType());
      assertEquals(false, functionPrototypeType0.isEmptyType());
      assertEquals(false, functionPrototypeType0.isUnionType());
      assertEquals(false, functionPrototypeType0.isStringValueType());
      assertEquals(true, functionPrototypeType0.hasReferenceName());
      assertEquals(false, functionPrototypeType0.isFunctionType());
      assertEquals(false, functionPrototypeType0.isNumberValueType());
      assertEquals(false, functionPrototypeType0.isNullType());
      assertEquals(false, functionPrototypeType0.isTemplateType());
  }

  @Test
  public void test07()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
      assertEquals(true, booleanType0.isBooleanValueType());
      assertEquals(true, booleanType0.matchesObjectContext());
      assertEquals(false, booleanType0.isTemplateType());
      assertEquals(true, booleanType0.matchesNumberContext());
      assertEquals(false, booleanType0.isNumberValueType());
      assertEquals(false, booleanType0.isEmptyType());
      assertEquals(false, booleanType0.isStringValueType());
      assertEquals(false, booleanType0.isRecordType());
      assertEquals(false, booleanType0.isNoObjectType());
      assertEquals(false, booleanType0.isVoidType());
      assertEquals(false, booleanType0.isAllType());
      assertEquals(false, booleanType0.isFunctionType());
      assertEquals(false, booleanType0.isUnionType());
      assertEquals(false, booleanType0.isNullType());
      assertEquals(false, booleanType0.isResolved());
      assertEquals("boolean", booleanType0.toString());
      assertEquals(false, booleanType0.isNullable());
      assertEquals(BooleanLiteralSet.BOTH, booleanType0.getPossibleToBooleanOutcomes());
      assertEquals(true, booleanType0.matchesStringContext());
      assertEquals(false, booleanType0.isNoType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(booleanType0);
      
      HashMap<String, JSType> hashMap0 = new HashMap<String, JSType>();
      assertEquals(true, hashMap0.isEmpty());
      assertEquals("{}", hashMap0.toString());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      RecordType recordType0 = jSTypeRegistry0.createRecordType((Map<String, JSType>) hashMap0);
      assertEquals(true, hashMap0.isEmpty());
      assertEquals("{}", hashMap0.toString());
      assertEquals(0, hashMap0.size());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, recordType0.isNullType());
      assertEquals(false, recordType0.isTemplateType());
      assertEquals(BooleanLiteralSet.TRUE, recordType0.getPossibleToBooleanOutcomes());
      assertEquals(false, recordType0.isNoObjectType());
      assertEquals(false, recordType0.isBooleanValueType());
      assertEquals(false, recordType0.isEmptyType());
      assertEquals(false, recordType0.isStringValueType());
      assertEquals(false, recordType0.isNumberValueType());
      assertEquals(false, recordType0.isResolved());
      assertEquals(false, recordType0.isAllType());
      assertEquals(false, recordType0.isVoidType());
      assertEquals(true, recordType0.isRecordType());
      assertEquals(false, recordType0.isUnionType());
      assertEquals(false, recordType0.isNoType());
      assertEquals(false, recordType0.isFunctionType());
      assertNotNull(recordType0);
      
      TernaryValue ternaryValue0 = recordType0.testForEquality((JSType) booleanType0);
      assertEquals(true, hashMap0.isEmpty());
      assertEquals("{}", hashMap0.toString());
      assertEquals(0, hashMap0.size());
      assertEquals(true, booleanType0.isBooleanValueType());
      assertEquals(true, booleanType0.matchesObjectContext());
      assertEquals(false, booleanType0.isTemplateType());
      assertEquals(true, booleanType0.matchesNumberContext());
      assertEquals(false, booleanType0.isNumberValueType());
      assertEquals(false, booleanType0.isEmptyType());
      assertEquals(false, booleanType0.isStringValueType());
      assertEquals(false, booleanType0.isRecordType());
      assertEquals(false, booleanType0.isNoObjectType());
      assertEquals(false, booleanType0.isVoidType());
      assertEquals(false, booleanType0.isAllType());
      assertEquals(false, booleanType0.isFunctionType());
      assertEquals(false, booleanType0.isUnionType());
      assertEquals(false, booleanType0.isNullType());
      assertEquals(false, booleanType0.isResolved());
      assertEquals("boolean", booleanType0.toString());
      assertEquals(false, booleanType0.isNullable());
      assertEquals(BooleanLiteralSet.BOTH, booleanType0.getPossibleToBooleanOutcomes());
      assertEquals(true, booleanType0.matchesStringContext());
      assertEquals(false, booleanType0.isNoType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, recordType0.isNullType());
      assertEquals(false, recordType0.isTemplateType());
      assertEquals(BooleanLiteralSet.TRUE, recordType0.getPossibleToBooleanOutcomes());
      assertEquals(false, recordType0.isNoObjectType());
      assertEquals(false, recordType0.isBooleanValueType());
      assertEquals(false, recordType0.isEmptyType());
      assertEquals(false, recordType0.isStringValueType());
      assertEquals(false, recordType0.isNumberValueType());
      assertEquals(false, recordType0.isResolved());
      assertEquals(false, recordType0.isAllType());
      assertEquals(false, recordType0.isVoidType());
      assertEquals(true, recordType0.isRecordType());
      assertEquals(false, recordType0.isUnionType());
      assertEquals(false, recordType0.isNoType());
      assertEquals(false, recordType0.isFunctionType());
      assertEquals(0, ternaryValue0.ordinal());
      assertEquals("FALSE", ternaryValue0.name());
      assertEquals(TernaryValue.TRUE, ternaryValue0.not());
      assertEquals("false", ternaryValue0.toString());
  }

  @Test
  public void test08()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      String string0 = null;
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, string0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, errorFunctionType0.isBooleanValueType());
      assertEquals(false, errorFunctionType0.isNumberValueType());
      assertEquals(false, errorFunctionType0.isNullType());
      assertEquals(true, errorFunctionType0.canBeCalled());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, errorFunctionType0.isReturnTypeInferred());
      assertEquals(false, errorFunctionType0.isEmptyType());
      assertEquals(false, errorFunctionType0.isNoType());
      assertEquals(false, errorFunctionType0.isTemplateType());
      assertEquals(false, errorFunctionType0.isUnionType());
      assertEquals(false, errorFunctionType0.isInterface());
      assertNull(errorFunctionType0.getTemplateTypeName());
      assertEquals(false, errorFunctionType0.hasCachedValues());
      assertEquals(true, errorFunctionType0.isConstructor());
      assertEquals(false, errorFunctionType0.isStringValueType());
      assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      assertEquals(false, errorFunctionType0.isNoObjectType());
      assertEquals(false, errorFunctionType0.isAllType());
      assertEquals(false, errorFunctionType0.isRecordType());
      assertEquals(true, errorFunctionType0.hasInstanceType());
      assertEquals(false, errorFunctionType0.isVoidType());
      assertEquals(3, errorFunctionType0.getMaxArguments());
      assertEquals(true, errorFunctionType0.isFunctionType());
      assertEquals(false, errorFunctionType0.isResolved());
      assertNotNull(errorFunctionType0);
      
      boolean boolean0 = errorFunctionType0.detectImplicitPrototypeCycle();
      assertFalse(boolean0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, errorFunctionType0.isBooleanValueType());
      assertEquals(false, errorFunctionType0.isNumberValueType());
      assertEquals(false, errorFunctionType0.isNullType());
      assertEquals(true, errorFunctionType0.canBeCalled());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, errorFunctionType0.isReturnTypeInferred());
      assertEquals(false, errorFunctionType0.isEmptyType());
      assertEquals(false, errorFunctionType0.isNoType());
      assertEquals(false, errorFunctionType0.isTemplateType());
      assertEquals(false, errorFunctionType0.isUnionType());
      assertEquals(false, errorFunctionType0.isInterface());
      assertNull(errorFunctionType0.getTemplateTypeName());
      assertEquals(false, errorFunctionType0.hasCachedValues());
      assertEquals(true, errorFunctionType0.isConstructor());
      assertEquals(false, errorFunctionType0.isStringValueType());
      assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      assertEquals(false, errorFunctionType0.isNoObjectType());
      assertEquals(false, errorFunctionType0.isAllType());
      assertEquals(false, errorFunctionType0.isRecordType());
      assertEquals(true, errorFunctionType0.hasInstanceType());
      assertEquals(false, errorFunctionType0.isVoidType());
      assertEquals(3, errorFunctionType0.getMaxArguments());
      assertEquals(true, errorFunctionType0.isFunctionType());
      assertEquals(false, errorFunctionType0.isResolved());
  }

  @Test
  public void test09()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      NoType noType0 = new NoType(jSTypeRegistry0);
      assertEquals(true, noType0.isNoType());
      assertEquals(true, noType0.matchesStringContext());
      assertEquals(false, noType0.isResolved());
      assertEquals(false, noType0.isNoObjectType());
      assertEquals(true, noType0.isConstructor());
      assertEquals(false, noType0.isAllType());
      assertEquals(false, noType0.isUnionType());
      assertEquals(true, noType0.isEmptyType());
      assertEquals(true, noType0.canBeCalled());
      assertEquals(true, noType0.hasInstanceType());
      assertEquals(false, noType0.isRecordType());
      assertEquals(true, noType0.matchesObjectContext());
      assertEquals(2147483647, noType0.getMaxArguments());
      assertEquals(false, noType0.isTemplateType());
      assertEquals(false, noType0.isInterface());
      assertEquals(false, noType0.isNumberValueType());
      assertEquals(false, noType0.isReturnTypeInferred());
      assertEquals(true, noType0.isNullable());
      assertEquals(false, noType0.isVoidType());
      assertEquals(false, noType0.isNullType());
      assertEquals("None", noType0.toString());
      assertEquals(false, noType0.hasCachedValues());
      assertEquals(2147483647, noType0.getPropertiesCount());
      assertEquals(false, noType0.isOrdinaryFunction());
      assertNull(noType0.getReferenceName());
      assertEquals(false, noType0.isStringValueType());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noType0.isBooleanValueType());
      assertEquals(true, noType0.matchesNumberContext());
      assertEquals(false, noType0.isFunctionType());
      assertNull(noType0.getTemplateTypeName());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(noType0);
      
      InstanceObjectType instanceObjectType0 = new InstanceObjectType(jSTypeRegistry0, noType0);
      assertEquals(true, noType0.isNoType());
      assertEquals(true, noType0.matchesStringContext());
      assertEquals(false, noType0.isResolved());
      assertEquals(false, noType0.isNoObjectType());
      assertEquals(true, noType0.isConstructor());
      assertEquals(false, noType0.isAllType());
      assertEquals(false, noType0.isUnionType());
      assertEquals(true, noType0.isEmptyType());
      assertEquals(true, noType0.canBeCalled());
      assertEquals(true, noType0.hasInstanceType());
      assertEquals(false, noType0.isRecordType());
      assertEquals(true, noType0.matchesObjectContext());
      assertEquals(2147483647, noType0.getMaxArguments());
      assertEquals(false, noType0.isTemplateType());
      assertEquals(false, noType0.isInterface());
      assertEquals(false, noType0.isNumberValueType());
      assertEquals(false, noType0.isReturnTypeInferred());
      assertEquals(true, noType0.isNullable());
      assertEquals(false, noType0.isVoidType());
      assertEquals(false, noType0.isNullType());
      assertEquals("None", noType0.toString());
      assertEquals(false, noType0.hasCachedValues());
      assertEquals(2147483647, noType0.getPropertiesCount());
      assertEquals(false, noType0.isOrdinaryFunction());
      assertNull(noType0.getReferenceName());
      assertEquals(false, noType0.isStringValueType());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noType0.isBooleanValueType());
      assertEquals(true, noType0.matchesNumberContext());
      assertEquals(false, noType0.isFunctionType());
      assertNull(noType0.getTemplateTypeName());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, instanceObjectType0.isNoObjectType());
      assertEquals(false, instanceObjectType0.isNullType());
      assertEquals(BooleanLiteralSet.TRUE, instanceObjectType0.getPossibleToBooleanOutcomes());
      assertEquals(false, instanceObjectType0.isEmptyType());
      assertEquals(false, instanceObjectType0.isFunctionType());
      assertEquals(false, instanceObjectType0.isNumberValueType());
      assertEquals(false, instanceObjectType0.isNominalType());
      assertEquals(false, instanceObjectType0.isVoidType());
      assertEquals(false, instanceObjectType0.isNoType());
      assertEquals(false, instanceObjectType0.hasReferenceName());
      assertEquals(false, instanceObjectType0.isAllType());
      assertEquals(false, instanceObjectType0.isStringValueType());
      assertEquals(false, instanceObjectType0.isUnionType());
      assertEquals(false, instanceObjectType0.isBooleanValueType());
      assertEquals(false, instanceObjectType0.isRecordType());
      assertEquals(true, instanceObjectType0.isInstanceType());
      assertEquals(false, instanceObjectType0.isTemplateType());
      assertEquals(false, instanceObjectType0.isResolved());
      assertNotNull(instanceObjectType0);
      
      JSDocInfo jSDocInfo0 = instanceObjectType0.getJSDocInfo();
      assertEquals(true, noType0.isNoType());
      assertEquals(true, noType0.matchesStringContext());
      assertEquals(false, noType0.isResolved());
      assertEquals(false, noType0.isNoObjectType());
      assertEquals(true, noType0.isConstructor());
      assertEquals(false, noType0.isAllType());
      assertEquals(false, noType0.isUnionType());
      assertEquals(true, noType0.isEmptyType());
      assertEquals(true, noType0.canBeCalled());
      assertEquals(true, noType0.hasInstanceType());
      assertEquals(false, noType0.isRecordType());
      assertEquals(true, noType0.matchesObjectContext());
      assertEquals(2147483647, noType0.getMaxArguments());
      assertEquals(false, noType0.isTemplateType());
      assertEquals(true, noType0.hasCachedValues());
      assertEquals(false, noType0.isInterface());
      assertEquals(false, noType0.isNumberValueType());
      assertEquals(false, noType0.isReturnTypeInferred());
      assertEquals(true, noType0.isNullable());
      assertEquals(false, noType0.isVoidType());
      assertEquals(false, noType0.isNullType());
      assertEquals("None", noType0.toString());
      assertEquals(2147483647, noType0.getPropertiesCount());
      assertEquals(false, noType0.isOrdinaryFunction());
      assertNull(noType0.getReferenceName());
      assertEquals(false, noType0.isStringValueType());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noType0.isBooleanValueType());
      assertEquals(true, noType0.matchesNumberContext());
      assertEquals(false, noType0.isFunctionType());
      assertNull(noType0.getTemplateTypeName());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, instanceObjectType0.isNoObjectType());
      assertEquals(false, instanceObjectType0.isNullType());
      assertEquals(BooleanLiteralSet.TRUE, instanceObjectType0.getPossibleToBooleanOutcomes());
      assertEquals(false, instanceObjectType0.isEmptyType());
      assertEquals(false, instanceObjectType0.isFunctionType());
      assertEquals(false, instanceObjectType0.isNumberValueType());
      assertEquals(false, instanceObjectType0.isNominalType());
      assertEquals(false, instanceObjectType0.isVoidType());
      assertEquals(false, instanceObjectType0.isNoType());
      assertEquals(false, instanceObjectType0.hasReferenceName());
      assertEquals(false, instanceObjectType0.isAllType());
      assertEquals(false, instanceObjectType0.isStringValueType());
      assertEquals(false, instanceObjectType0.isUnionType());
      assertEquals(false, instanceObjectType0.isBooleanValueType());
      assertEquals(false, instanceObjectType0.isRecordType());
      assertEquals(true, instanceObjectType0.isInstanceType());
      assertEquals(false, instanceObjectType0.isTemplateType());
      assertEquals(false, instanceObjectType0.isResolved());
      assertNull(jSDocInfo0);
  }

  @Test
  public void test10()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      boolean boolean0 = false;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0, boolean0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      String string0 = "ELLIPSIS";
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, string0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(true, errorFunctionType0.canBeCalled());
      assertNull(errorFunctionType0.getTemplateTypeName());
      assertEquals(false, errorFunctionType0.isNoObjectType());
      assertEquals(false, errorFunctionType0.isResolved());
      assertEquals(false, errorFunctionType0.isEmptyType());
      assertEquals(false, errorFunctionType0.isVoidType());
      assertEquals(true, errorFunctionType0.isConstructor());
      assertEquals(false, errorFunctionType0.hasCachedValues());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, errorFunctionType0.isTemplateType());
      assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      assertEquals(true, errorFunctionType0.hasInstanceType());
      assertEquals(true, errorFunctionType0.isFunctionType());
      assertEquals(false, errorFunctionType0.isStringValueType());
      assertEquals(false, errorFunctionType0.isBooleanValueType());
      assertEquals(false, errorFunctionType0.isNoType());
      assertEquals(3, errorFunctionType0.getMaxArguments());
      assertEquals(false, errorFunctionType0.isNumberValueType());
      assertEquals(false, errorFunctionType0.isAllType());
      assertEquals(false, errorFunctionType0.isRecordType());
      assertEquals(false, errorFunctionType0.isUnionType());
      assertEquals(false, errorFunctionType0.isInterface());
      assertEquals(false, errorFunctionType0.isReturnTypeInferred());
      assertEquals(false, errorFunctionType0.isNullType());
      assertNotNull(errorFunctionType0);
      
      Set<String> set0 = errorFunctionType0.getPropertyNames();
      assertEquals(0, set0.size());
      assertEquals(true, set0.isEmpty());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(true, errorFunctionType0.canBeCalled());
      assertNull(errorFunctionType0.getTemplateTypeName());
      assertEquals(false, errorFunctionType0.isNoObjectType());
      assertEquals(false, errorFunctionType0.isResolved());
      assertEquals(false, errorFunctionType0.isEmptyType());
      assertEquals(false, errorFunctionType0.isVoidType());
      assertEquals(true, errorFunctionType0.isConstructor());
      assertEquals(false, errorFunctionType0.hasCachedValues());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, errorFunctionType0.isTemplateType());
      assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      assertEquals(true, errorFunctionType0.hasInstanceType());
      assertEquals(true, errorFunctionType0.isFunctionType());
      assertEquals(false, errorFunctionType0.isStringValueType());
      assertEquals(false, errorFunctionType0.isBooleanValueType());
      assertEquals(false, errorFunctionType0.isNoType());
      assertEquals(3, errorFunctionType0.getMaxArguments());
      assertEquals(false, errorFunctionType0.isNumberValueType());
      assertEquals(false, errorFunctionType0.isAllType());
      assertEquals(false, errorFunctionType0.isRecordType());
      assertEquals(false, errorFunctionType0.isUnionType());
      assertEquals(false, errorFunctionType0.isInterface());
      assertEquals(false, errorFunctionType0.isReturnTypeInferred());
      assertEquals(false, errorFunctionType0.isNullType());
      assertNotNull(set0);
  }

  @Test
  public void test11()  throws Throwable  {
      ErrorReporter errorReporter0 = null;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(errorReporter0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      NoObjectType noObjectType0 = new NoObjectType(jSTypeRegistry0);
      assertEquals(false, noObjectType0.isReturnTypeInferred());
      assertEquals("NoObject", noObjectType0.toString());
      assertEquals(true, noObjectType0.canBeCalled());
      assertEquals(false, noObjectType0.isVoidType());
      assertEquals(false, noObjectType0.isUnionType());
      assertEquals(true, noObjectType0.matchesNumberContext());
      assertEquals(false, noObjectType0.isInterface());
      assertEquals(BooleanLiteralSet.TRUE, noObjectType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noObjectType0.isBooleanValueType());
      assertEquals(false, noObjectType0.isNoType());
      assertEquals(true, noObjectType0.isConstructor());
      assertEquals(false, noObjectType0.isTemplateType());
      assertEquals(false, noObjectType0.isOrdinaryFunction());
      assertNull(noObjectType0.getReferenceName());
      assertEquals(false, noObjectType0.isAllType());
      assertEquals(false, noObjectType0.hasCachedValues());
      assertEquals(false, noObjectType0.isNullType());
      assertEquals(true, noObjectType0.matchesObjectContext());
      assertEquals(false, noObjectType0.isResolved());
      assertEquals(false, noObjectType0.isFunctionType());
      assertEquals(true, noObjectType0.matchesStringContext());
      assertEquals(false, noObjectType0.isStringValueType());
      assertEquals(true, noObjectType0.isNoObjectType());
      assertEquals(2147483647, noObjectType0.getMaxArguments());
      assertEquals(2147483647, noObjectType0.getPropertiesCount());
      assertEquals(true, noObjectType0.isEmptyType());
      assertEquals(false, noObjectType0.isRecordType());
      assertEquals(false, noObjectType0.isNumberValueType());
      assertNull(noObjectType0.getTemplateTypeName());
      assertEquals(true, noObjectType0.hasInstanceType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(noObjectType0);
      
      FunctionPrototypeType functionPrototypeType0 = noObjectType0.getPrototype();
      assertEquals(false, noObjectType0.isReturnTypeInferred());
      assertEquals("NoObject", noObjectType0.toString());
      assertEquals(true, noObjectType0.canBeCalled());
      assertEquals(true, noObjectType0.hasCachedValues());
      assertEquals(false, noObjectType0.isVoidType());
      assertEquals(false, noObjectType0.isUnionType());
      assertEquals(true, noObjectType0.matchesNumberContext());
      assertEquals(false, noObjectType0.isInterface());
      assertEquals(BooleanLiteralSet.TRUE, noObjectType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noObjectType0.isBooleanValueType());
      assertEquals(false, noObjectType0.isNoType());
      assertEquals(true, noObjectType0.isConstructor());
      assertEquals(false, noObjectType0.isTemplateType());
      assertEquals(false, noObjectType0.isOrdinaryFunction());
      assertNull(noObjectType0.getReferenceName());
      assertEquals(false, noObjectType0.isAllType());
      assertEquals(false, noObjectType0.isNullType());
      assertEquals(true, noObjectType0.matchesObjectContext());
      assertEquals(false, noObjectType0.isResolved());
      assertEquals(false, noObjectType0.isFunctionType());
      assertEquals(true, noObjectType0.matchesStringContext());
      assertEquals(false, noObjectType0.isStringValueType());
      assertEquals(true, noObjectType0.isNoObjectType());
      assertEquals(2147483647, noObjectType0.getMaxArguments());
      assertEquals(2147483647, noObjectType0.getPropertiesCount());
      assertEquals(true, noObjectType0.isEmptyType());
      assertEquals(false, noObjectType0.isRecordType());
      assertEquals(false, noObjectType0.isNumberValueType());
      assertNull(noObjectType0.getTemplateTypeName());
      assertEquals(true, noObjectType0.hasInstanceType());
      assertEquals(false, functionPrototypeType0.isVoidType());
      assertEquals(false, functionPrototypeType0.isRecordType());
      assertEquals(false, functionPrototypeType0.isResolved());
      assertEquals(false, functionPrototypeType0.isEmptyType());
      assertEquals(false, functionPrototypeType0.isAllType());
      assertEquals(BooleanLiteralSet.TRUE, functionPrototypeType0.getPossibleToBooleanOutcomes());
      assertEquals(false, functionPrototypeType0.isFunctionType());
      assertEquals(false, functionPrototypeType0.isTemplateType());
      assertEquals(false, functionPrototypeType0.isBooleanValueType());
      assertEquals(false, functionPrototypeType0.isNullType());
      assertEquals(true, functionPrototypeType0.isFunctionPrototypeType());
      assertEquals(false, functionPrototypeType0.isNoObjectType());
      assertEquals(false, functionPrototypeType0.isNumberValueType());
      assertEquals(false, functionPrototypeType0.hasReferenceName());
      assertEquals(false, functionPrototypeType0.isNoType());
      assertEquals(false, functionPrototypeType0.isStringValueType());
      assertEquals(false, functionPrototypeType0.isUnionType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(functionPrototypeType0);
      
      FunctionPrototypeType functionPrototypeType1 = (FunctionPrototypeType)noObjectType0.getLeastSupertype((JSType) functionPrototypeType0);
      assertEquals(false, noObjectType0.isReturnTypeInferred());
      assertEquals("NoObject", noObjectType0.toString());
      assertEquals(true, noObjectType0.canBeCalled());
      assertEquals(true, noObjectType0.hasCachedValues());
      assertEquals(false, noObjectType0.isVoidType());
      assertEquals(false, noObjectType0.isUnionType());
      assertEquals(true, noObjectType0.matchesNumberContext());
      assertEquals(false, noObjectType0.isInterface());
      assertEquals(BooleanLiteralSet.TRUE, noObjectType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noObjectType0.isBooleanValueType());
      assertEquals(false, noObjectType0.isNoType());
      assertEquals(true, noObjectType0.isConstructor());
      assertEquals(false, noObjectType0.isTemplateType());
      assertEquals(false, noObjectType0.isOrdinaryFunction());
      assertNull(noObjectType0.getReferenceName());
      assertEquals(false, noObjectType0.isAllType());
      assertEquals(false, noObjectType0.isNullType());
      assertEquals(true, noObjectType0.matchesObjectContext());
      assertEquals(false, noObjectType0.isResolved());
      assertEquals(false, noObjectType0.isFunctionType());
      assertEquals(true, noObjectType0.matchesStringContext());
      assertEquals(false, noObjectType0.isStringValueType());
      assertEquals(true, noObjectType0.isNoObjectType());
      assertEquals(2147483647, noObjectType0.getMaxArguments());
      assertEquals(2147483647, noObjectType0.getPropertiesCount());
      assertEquals(true, noObjectType0.isEmptyType());
      assertEquals(false, noObjectType0.isRecordType());
      assertEquals(false, noObjectType0.isNumberValueType());
      assertNull(noObjectType0.getTemplateTypeName());
      assertEquals(true, noObjectType0.hasInstanceType());
      assertEquals(false, functionPrototypeType1.isNullType());
      assertEquals(false, functionPrototypeType1.isStringValueType());
      assertEquals(false, functionPrototypeType1.hasReferenceName());
      assertEquals(true, functionPrototypeType1.isFunctionPrototypeType());
      assertEquals(false, functionPrototypeType1.isNumberValueType());
      assertEquals(false, functionPrototypeType1.isEmptyType());
      assertEquals(false, functionPrototypeType1.isAllType());
      assertEquals(false, functionPrototypeType1.isUnionType());
      assertEquals(false, functionPrototypeType1.isFunctionType());
      assertEquals(false, functionPrototypeType1.isBooleanValueType());
      assertEquals(false, functionPrototypeType1.isNoType());
      assertEquals(false, functionPrototypeType1.isNoObjectType());
      assertEquals(false, functionPrototypeType1.isRecordType());
      assertEquals(false, functionPrototypeType1.isTemplateType());
      assertEquals(false, functionPrototypeType1.isVoidType());
      assertEquals(false, functionPrototypeType1.isResolved());
      assertEquals(BooleanLiteralSet.TRUE, functionPrototypeType1.getPossibleToBooleanOutcomes());
      assertEquals(false, functionPrototypeType0.isVoidType());
      assertEquals(false, functionPrototypeType0.isRecordType());
      assertEquals(false, functionPrototypeType0.isResolved());
      assertEquals(false, functionPrototypeType0.isEmptyType());
      assertEquals(false, functionPrototypeType0.isAllType());
      assertEquals(BooleanLiteralSet.TRUE, functionPrototypeType0.getPossibleToBooleanOutcomes());
      assertEquals(false, functionPrototypeType0.isFunctionType());
      assertEquals(false, functionPrototypeType0.isTemplateType());
      assertEquals(false, functionPrototypeType0.isBooleanValueType());
      assertEquals(false, functionPrototypeType0.isNullType());
      assertEquals(true, functionPrototypeType0.isFunctionPrototypeType());
      assertEquals(false, functionPrototypeType0.isNoObjectType());
      assertEquals(false, functionPrototypeType0.isNumberValueType());
      assertEquals(false, functionPrototypeType0.hasReferenceName());
      assertEquals(false, functionPrototypeType0.isNoType());
      assertEquals(false, functionPrototypeType0.isStringValueType());
      assertEquals(false, functionPrototypeType0.isUnionType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(functionPrototypeType1);
      assertSame(functionPrototypeType1, functionPrototypeType0);
      assertSame(functionPrototypeType0, functionPrototypeType1);
  }

  @Test
  public void test12()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      boolean boolean0 = true;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0, boolean0);
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      String string0 = "(1{A~Iy!0^ea2i";
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, string0);
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, errorFunctionType0.isNullType());
      assertEquals(false, errorFunctionType0.isInterface());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertEquals(3, errorFunctionType0.getMaxArguments());
      assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      assertEquals(false, errorFunctionType0.isNumberValueType());
      assertEquals(true, errorFunctionType0.canBeCalled());
      assertEquals(false, errorFunctionType0.isAllType());
      assertEquals(true, errorFunctionType0.hasInstanceType());
      assertEquals(true, errorFunctionType0.isConstructor());
      assertEquals(false, errorFunctionType0.isRecordType());
      assertEquals(true, errorFunctionType0.isFunctionType());
      assertEquals(false, errorFunctionType0.isReturnTypeInferred());
      assertEquals(false, errorFunctionType0.isUnionType());
      assertEquals(false, errorFunctionType0.isNoType());
      assertEquals(false, errorFunctionType0.isVoidType());
      assertEquals(false, errorFunctionType0.isResolved());
      assertEquals(false, errorFunctionType0.isEmptyType());
      assertEquals(false, errorFunctionType0.isTemplateType());
      assertEquals(false, errorFunctionType0.hasCachedValues());
      assertNull(errorFunctionType0.getTemplateTypeName());
      assertEquals(false, errorFunctionType0.isNoObjectType());
      assertEquals(false, errorFunctionType0.isBooleanValueType());
      assertEquals(false, errorFunctionType0.isStringValueType());
      assertNotNull(errorFunctionType0);
      
      EnumType enumType0 = new EnumType(jSTypeRegistry0, string0, errorFunctionType0);
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, errorFunctionType0.isNullType());
      assertEquals(false, errorFunctionType0.isInterface());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertEquals(3, errorFunctionType0.getMaxArguments());
      assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      assertEquals(false, errorFunctionType0.isNumberValueType());
      assertEquals(true, errorFunctionType0.canBeCalled());
      assertEquals(false, errorFunctionType0.isAllType());
      assertEquals(true, errorFunctionType0.hasInstanceType());
      assertEquals(true, errorFunctionType0.isConstructor());
      assertEquals(false, errorFunctionType0.isRecordType());
      assertEquals(true, errorFunctionType0.isFunctionType());
      assertEquals(false, errorFunctionType0.isReturnTypeInferred());
      assertEquals(false, errorFunctionType0.isUnionType());
      assertEquals(false, errorFunctionType0.isNoType());
      assertEquals(false, errorFunctionType0.isVoidType());
      assertEquals(false, errorFunctionType0.isResolved());
      assertEquals(false, errorFunctionType0.isEmptyType());
      assertEquals(false, errorFunctionType0.isTemplateType());
      assertEquals(false, errorFunctionType0.hasCachedValues());
      assertNull(errorFunctionType0.getTemplateTypeName());
      assertEquals(false, errorFunctionType0.isNoObjectType());
      assertEquals(false, errorFunctionType0.isBooleanValueType());
      assertEquals(false, errorFunctionType0.isStringValueType());
      assertEquals(false, enumType0.isBooleanValueType());
      assertEquals(false, enumType0.isVoidType());
      assertEquals(false, enumType0.isNullType());
      assertEquals(false, enumType0.isResolved());
      assertEquals(false, enumType0.isTemplateType());
      assertEquals(false, enumType0.isEmptyType());
      assertEquals(true, enumType0.matchesObjectContext());
      assertEquals(false, enumType0.isAllType());
      assertEquals(true, enumType0.isEnumType());
      assertEquals(false, enumType0.isRecordType());
      assertEquals(false, enumType0.isNoType());
      assertEquals(false, enumType0.isUnionType());
      assertEquals(false, enumType0.isNoObjectType());
      assertEquals(false, enumType0.isFunctionType());
      assertEquals(true, enumType0.matchesStringContext());
      assertEquals(false, enumType0.isStringValueType());
      assertEquals(false, enumType0.matchesNumberContext());
      assertEquals(false, enumType0.isNumberValueType());
      assertEquals(BooleanLiteralSet.TRUE, enumType0.getPossibleToBooleanOutcomes());
      assertNotNull(enumType0);
      
      BooleanLiteralSet booleanLiteralSet0 = enumType0.getPossibleToBooleanOutcomes();
      assertEquals(BooleanLiteralSet.TRUE, booleanLiteralSet0);
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(1, booleanLiteralSet0.ordinal());
      assertEquals("TRUE", booleanLiteralSet0.toString());
      assertEquals("TRUE", booleanLiteralSet0.name());
      assertEquals(false, errorFunctionType0.isNullType());
      assertEquals(false, errorFunctionType0.isInterface());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertEquals(3, errorFunctionType0.getMaxArguments());
      assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      assertEquals(false, errorFunctionType0.isNumberValueType());
      assertEquals(true, errorFunctionType0.canBeCalled());
      assertEquals(false, errorFunctionType0.isAllType());
      assertEquals(true, errorFunctionType0.hasInstanceType());
      assertEquals(true, errorFunctionType0.isConstructor());
      assertEquals(false, errorFunctionType0.isRecordType());
      assertEquals(true, errorFunctionType0.isFunctionType());
      assertEquals(false, errorFunctionType0.isReturnTypeInferred());
      assertEquals(false, errorFunctionType0.isUnionType());
      assertEquals(false, errorFunctionType0.isNoType());
      assertEquals(false, errorFunctionType0.isVoidType());
      assertEquals(false, errorFunctionType0.isResolved());
      assertEquals(false, errorFunctionType0.isEmptyType());
      assertEquals(false, errorFunctionType0.isTemplateType());
      assertEquals(false, errorFunctionType0.hasCachedValues());
      assertNull(errorFunctionType0.getTemplateTypeName());
      assertEquals(false, errorFunctionType0.isNoObjectType());
      assertEquals(false, errorFunctionType0.isBooleanValueType());
      assertEquals(false, errorFunctionType0.isStringValueType());
      assertEquals(false, enumType0.isBooleanValueType());
      assertEquals(false, enumType0.isVoidType());
      assertEquals(false, enumType0.isNullType());
      assertEquals(false, enumType0.isResolved());
      assertEquals(false, enumType0.isTemplateType());
      assertEquals(false, enumType0.isEmptyType());
      assertEquals(true, enumType0.matchesObjectContext());
      assertEquals(false, enumType0.isAllType());
      assertEquals(true, enumType0.isEnumType());
      assertEquals(false, enumType0.isRecordType());
      assertEquals(false, enumType0.isNoType());
      assertEquals(false, enumType0.isUnionType());
      assertEquals(false, enumType0.isNoObjectType());
      assertEquals(false, enumType0.isFunctionType());
      assertEquals(true, enumType0.matchesStringContext());
      assertEquals(false, enumType0.isStringValueType());
      assertEquals(false, enumType0.matchesNumberContext());
      assertEquals(false, enumType0.isNumberValueType());
      assertEquals(BooleanLiteralSet.TRUE, enumType0.getPossibleToBooleanOutcomes());
  }

  @Test
  public void test13()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      NoType noType0 = new NoType(jSTypeRegistry0);
      assertEquals(false, noType0.isBooleanValueType());
      assertEquals(true, noType0.canBeCalled());
      assertEquals(true, noType0.matchesStringContext());
      assertNull(noType0.getReferenceName());
      assertEquals(false, noType0.hasCachedValues());
      assertEquals(true, noType0.isNoType());
      assertEquals(false, noType0.isInterface());
      assertEquals(2147483647, noType0.getPropertiesCount());
      assertEquals(true, noType0.matchesNumberContext());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertEquals("None", noType0.toString());
      assertEquals(false, noType0.isNumberValueType());
      assertNull(noType0.getTemplateTypeName());
      assertEquals(false, noType0.isStringValueType());
      assertEquals(false, noType0.isUnionType());
      assertEquals(2147483647, noType0.getMaxArguments());
      assertEquals(true, noType0.isConstructor());
      assertEquals(true, noType0.hasInstanceType());
      assertEquals(true, noType0.isNullable());
      assertEquals(false, noType0.isNoObjectType());
      assertEquals(true, noType0.isEmptyType());
      assertEquals(false, noType0.isReturnTypeInferred());
      assertEquals(false, noType0.isAllType());
      assertEquals(false, noType0.isTemplateType());
      assertEquals(true, noType0.matchesObjectContext());
      assertEquals(false, noType0.isVoidType());
      assertEquals(false, noType0.isFunctionType());
      assertEquals(false, noType0.isResolved());
      assertEquals(false, noType0.isNullType());
      assertEquals(false, noType0.isRecordType());
      assertEquals(false, noType0.isOrdinaryFunction());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(noType0);
      
      JSType jSType0 = noType0.getParameterType();
      assertEquals(false, noType0.isBooleanValueType());
      assertEquals(true, noType0.canBeCalled());
      assertEquals(true, noType0.matchesStringContext());
      assertNull(noType0.getReferenceName());
      assertEquals(false, noType0.hasCachedValues());
      assertEquals(true, noType0.isNoType());
      assertEquals(false, noType0.isInterface());
      assertEquals(2147483647, noType0.getPropertiesCount());
      assertEquals(true, noType0.matchesNumberContext());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertEquals("None", noType0.toString());
      assertEquals(false, noType0.isNumberValueType());
      assertNull(noType0.getTemplateTypeName());
      assertEquals(false, noType0.isStringValueType());
      assertEquals(false, noType0.isUnionType());
      assertEquals(2147483647, noType0.getMaxArguments());
      assertEquals(true, noType0.isConstructor());
      assertEquals(true, noType0.hasInstanceType());
      assertEquals(true, noType0.isNullable());
      assertEquals(false, noType0.isNoObjectType());
      assertEquals(true, noType0.isEmptyType());
      assertEquals(false, noType0.isReturnTypeInferred());
      assertEquals(false, noType0.isAllType());
      assertEquals(false, noType0.isTemplateType());
      assertEquals(true, noType0.matchesObjectContext());
      assertEquals(false, noType0.isVoidType());
      assertEquals(false, noType0.isFunctionType());
      assertEquals(false, noType0.isResolved());
      assertEquals(false, noType0.isNullType());
      assertEquals(false, noType0.isRecordType());
      assertEquals(false, noType0.isOrdinaryFunction());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNull(jSType0);
  }

  @Test
  public void test14()  throws Throwable  {
      String string0 = "E";
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      TemplateType templateType0 = new TemplateType(jSTypeRegistry0, string0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, templateType0.isNumberValueType());
      assertEquals(false, templateType0.isEmptyType());
      assertEquals(BooleanLiteralSet.TRUE, templateType0.getPossibleToBooleanOutcomes());
      assertEquals("E", templateType0.toString());
      assertEquals(false, templateType0.isStringValueType());
      assertEquals(false, templateType0.isUnionType());
      assertEquals(false, templateType0.isNullType());
      assertEquals(false, templateType0.isNoType());
      assertEquals(false, templateType0.isNoObjectType());
      assertEquals(false, templateType0.isResolved());
      assertEquals(false, templateType0.hasCachedValues());
      assertEquals(false, templateType0.isRecordType());
      assertEquals(false, templateType0.isBooleanValueType());
      assertEquals(false, templateType0.isVoidType());
      assertEquals("E", templateType0.getReferenceName());
      assertEquals(false, templateType0.isAllType());
      assertEquals(false, templateType0.isNativeObjectType());
      assertEquals(true, templateType0.isTemplateType());
      assertEquals(false, templateType0.isFunctionType());
      assertNotNull(templateType0);
      
      EnumType enumType0 = jSTypeRegistry0.createEnumType(string0, (JSType) templateType0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(BooleanLiteralSet.TRUE, enumType0.getPossibleToBooleanOutcomes());
      assertEquals(true, enumType0.matchesStringContext());
      assertEquals(false, enumType0.isRecordType());
      assertEquals(false, enumType0.isEmptyType());
      assertEquals(false, enumType0.isNullType());
      assertEquals(false, enumType0.matchesNumberContext());
      assertEquals(false, enumType0.isBooleanValueType());
      assertEquals(false, enumType0.isNumberValueType());
      assertEquals(false, enumType0.isStringValueType());
      assertEquals(false, enumType0.isFunctionType());
      assertEquals(true, enumType0.matchesObjectContext());
      assertEquals(false, enumType0.isNoObjectType());
      assertEquals(true, enumType0.isEnumType());
      assertEquals(false, enumType0.isNoType());
      assertEquals(false, enumType0.isVoidType());
      assertEquals(false, enumType0.isUnionType());
      assertEquals(false, enumType0.isResolved());
      assertEquals(false, enumType0.isTemplateType());
      assertEquals(false, enumType0.isAllType());
      assertEquals(false, templateType0.isNumberValueType());
      assertEquals(false, templateType0.isEmptyType());
      assertEquals(BooleanLiteralSet.TRUE, templateType0.getPossibleToBooleanOutcomes());
      assertEquals("E", templateType0.toString());
      assertEquals(false, templateType0.isStringValueType());
      assertEquals(false, templateType0.isUnionType());
      assertEquals(false, templateType0.isNullType());
      assertEquals(false, templateType0.isNoType());
      assertEquals(false, templateType0.isNoObjectType());
      assertEquals(false, templateType0.isResolved());
      assertEquals(false, templateType0.hasCachedValues());
      assertEquals(false, templateType0.isRecordType());
      assertEquals(false, templateType0.isBooleanValueType());
      assertEquals(false, templateType0.isVoidType());
      assertEquals("E", templateType0.getReferenceName());
      assertEquals(false, templateType0.isAllType());
      assertEquals(false, templateType0.isNativeObjectType());
      assertEquals(true, templateType0.isTemplateType());
      assertEquals(false, templateType0.isFunctionType());
      assertNotNull(enumType0);
      
      EnumElementType enumElementType0 = enumType0.getElementsType();
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(BooleanLiteralSet.TRUE, enumType0.getPossibleToBooleanOutcomes());
      assertEquals(true, enumType0.matchesStringContext());
      assertEquals(false, enumType0.isRecordType());
      assertEquals(false, enumType0.isEmptyType());
      assertEquals(false, enumType0.isNullType());
      assertEquals(false, enumType0.matchesNumberContext());
      assertEquals(false, enumType0.isBooleanValueType());
      assertEquals(false, enumType0.isNumberValueType());
      assertEquals(false, enumType0.isStringValueType());
      assertEquals(false, enumType0.isFunctionType());
      assertEquals(true, enumType0.matchesObjectContext());
      assertEquals(false, enumType0.isNoObjectType());
      assertEquals(true, enumType0.isEnumType());
      assertEquals(false, enumType0.isNoType());
      assertEquals(false, enumType0.isVoidType());
      assertEquals(false, enumType0.isUnionType());
      assertEquals(false, enumType0.isResolved());
      assertEquals(false, enumType0.isTemplateType());
      assertEquals(false, enumType0.isAllType());
      assertEquals(false, enumElementType0.isResolved());
      assertEquals(false, enumElementType0.isNumberValueType());
      assertEquals(false, enumElementType0.isFunctionType());
      assertEquals(false, enumElementType0.isVoidType());
      assertEquals(false, enumElementType0.isNullType());
      assertEquals(false, enumElementType0.isTemplateType());
      assertEquals(true, enumElementType0.isNominalType());
      assertEquals(true, enumElementType0.hasReferenceName());
      assertEquals(false, enumElementType0.isNoObjectType());
      assertEquals(false, enumElementType0.isRecordType());
      assertEquals(false, enumElementType0.isNoType());
      assertEquals(false, enumElementType0.isNativeObjectType());
      assertEquals(true, enumElementType0.isEnumElementType());
      assertEquals("E", enumElementType0.getReferenceName());
      assertEquals(false, enumElementType0.isAllType());
      assertEquals(false, enumElementType0.hasCachedValues());
      assertEquals(false, enumElementType0.isBooleanValueType());
      assertEquals(false, enumElementType0.isEmptyType());
      assertEquals(false, enumElementType0.isStringValueType());
      assertEquals(BooleanLiteralSet.TRUE, enumElementType0.getPossibleToBooleanOutcomes());
      assertEquals(false, enumElementType0.isUnionType());
      assertEquals(false, templateType0.isNumberValueType());
      assertEquals(false, templateType0.isEmptyType());
      assertEquals(BooleanLiteralSet.TRUE, templateType0.getPossibleToBooleanOutcomes());
      assertEquals("E", templateType0.toString());
      assertEquals(false, templateType0.isStringValueType());
      assertEquals(false, templateType0.isUnionType());
      assertEquals(false, templateType0.isNullType());
      assertEquals(false, templateType0.isNoType());
      assertEquals(false, templateType0.isNoObjectType());
      assertEquals(false, templateType0.isResolved());
      assertEquals(false, templateType0.hasCachedValues());
      assertEquals(false, templateType0.isRecordType());
      assertEquals(false, templateType0.isBooleanValueType());
      assertEquals(false, templateType0.isVoidType());
      assertEquals("E", templateType0.getReferenceName());
      assertEquals(false, templateType0.isAllType());
      assertEquals(false, templateType0.isNativeObjectType());
      assertEquals(true, templateType0.isTemplateType());
      assertEquals(false, templateType0.isFunctionType());
      assertNotNull(enumElementType0);
      
      JSDocInfo jSDocInfo0 = enumElementType0.getOwnPropertyJSDocInfo(string0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(BooleanLiteralSet.TRUE, enumType0.getPossibleToBooleanOutcomes());
      assertEquals(true, enumType0.matchesStringContext());
      assertEquals(false, enumType0.isRecordType());
      assertEquals(false, enumType0.isEmptyType());
      assertEquals(false, enumType0.isNullType());
      assertEquals(false, enumType0.matchesNumberContext());
      assertEquals(false, enumType0.isBooleanValueType());
      assertEquals(false, enumType0.isNumberValueType());
      assertEquals(false, enumType0.isStringValueType());
      assertEquals(false, enumType0.isFunctionType());
      assertEquals(true, enumType0.matchesObjectContext());
      assertEquals(false, enumType0.isNoObjectType());
      assertEquals(true, enumType0.isEnumType());
      assertEquals(false, enumType0.isNoType());
      assertEquals(false, enumType0.isVoidType());
      assertEquals(false, enumType0.isUnionType());
      assertEquals(false, enumType0.isResolved());
      assertEquals(false, enumType0.isTemplateType());
      assertEquals(false, enumType0.isAllType());
      assertEquals(false, enumElementType0.isResolved());
      assertEquals(false, enumElementType0.isNumberValueType());
      assertEquals(false, enumElementType0.isFunctionType());
      assertEquals(false, enumElementType0.isVoidType());
      assertEquals(false, enumElementType0.isNullType());
      assertEquals(false, enumElementType0.isTemplateType());
      assertEquals(true, enumElementType0.isNominalType());
      assertEquals(true, enumElementType0.hasReferenceName());
      assertEquals(false, enumElementType0.isNoObjectType());
      assertEquals(false, enumElementType0.isRecordType());
      assertEquals(false, enumElementType0.isNoType());
      assertEquals(false, enumElementType0.isNativeObjectType());
      assertEquals(true, enumElementType0.isEnumElementType());
      assertEquals("E", enumElementType0.getReferenceName());
      assertEquals(false, enumElementType0.isAllType());
      assertEquals(false, enumElementType0.hasCachedValues());
      assertEquals(false, enumElementType0.isBooleanValueType());
      assertEquals(false, enumElementType0.isEmptyType());
      assertEquals(false, enumElementType0.isStringValueType());
      assertEquals(BooleanLiteralSet.TRUE, enumElementType0.getPossibleToBooleanOutcomes());
      assertEquals(false, enumElementType0.isUnionType());
      assertEquals(false, templateType0.isNumberValueType());
      assertEquals(false, templateType0.isEmptyType());
      assertEquals(BooleanLiteralSet.TRUE, templateType0.getPossibleToBooleanOutcomes());
      assertEquals("E", templateType0.toString());
      assertEquals(false, templateType0.isStringValueType());
      assertEquals(false, templateType0.isUnionType());
      assertEquals(false, templateType0.isNullType());
      assertEquals(false, templateType0.isNoType());
      assertEquals(false, templateType0.isNoObjectType());
      assertEquals(false, templateType0.isResolved());
      assertEquals(false, templateType0.hasCachedValues());
      assertEquals(false, templateType0.isRecordType());
      assertEquals(false, templateType0.isBooleanValueType());
      assertEquals(false, templateType0.isVoidType());
      assertEquals("E", templateType0.getReferenceName());
      assertEquals(false, templateType0.isAllType());
      assertEquals(false, templateType0.isNativeObjectType());
      assertEquals(true, templateType0.isTemplateType());
      assertEquals(false, templateType0.isFunctionType());
      assertNull(jSDocInfo0);
  }

  @Test
  public void test15()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      NoType noType0 = new NoType(jSTypeRegistry0);
      assertEquals(false, noType0.isVoidType());
      assertEquals("None", noType0.toString());
      assertEquals(false, noType0.isReturnTypeInferred());
      assertEquals(false, noType0.isResolved());
      assertEquals(true, noType0.isEmptyType());
      assertEquals(true, noType0.hasInstanceType());
      assertEquals(false, noType0.isStringValueType());
      assertEquals(false, noType0.isFunctionType());
      assertEquals(false, noType0.isNoObjectType());
      assertEquals(false, noType0.hasCachedValues());
      assertEquals(false, noType0.isInterface());
      assertEquals(true, noType0.canBeCalled());
      assertEquals(false, noType0.isBooleanValueType());
      assertEquals(true, noType0.matchesObjectContext());
      assertNull(noType0.getTemplateTypeName());
      assertNull(noType0.getReferenceName());
      assertEquals(false, noType0.isAllType());
      assertEquals(true, noType0.matchesNumberContext());
      assertEquals(false, noType0.isNumberValueType());
      assertEquals(2147483647, noType0.getPropertiesCount());
      assertEquals(false, noType0.isOrdinaryFunction());
      assertEquals(false, noType0.isRecordType());
      assertEquals(true, noType0.isConstructor());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertEquals(true, noType0.isNullable());
      assertEquals(false, noType0.isTemplateType());
      assertEquals(true, noType0.isNoType());
      assertEquals(2147483647, noType0.getMaxArguments());
      assertEquals(false, noType0.isNullType());
      assertEquals(false, noType0.isUnionType());
      assertEquals(true, noType0.matchesStringContext());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(noType0);
      
      Iterable<ObjectType> iterable0 = noType0.getCtorImplementedInterfaces();
      assertEquals(false, noType0.isVoidType());
      assertEquals("None", noType0.toString());
      assertEquals(false, noType0.isReturnTypeInferred());
      assertEquals(false, noType0.isResolved());
      assertEquals(true, noType0.isEmptyType());
      assertEquals(true, noType0.hasInstanceType());
      assertEquals(false, noType0.isStringValueType());
      assertEquals(false, noType0.isFunctionType());
      assertEquals(false, noType0.isNoObjectType());
      assertEquals(false, noType0.hasCachedValues());
      assertEquals(false, noType0.isInterface());
      assertEquals(true, noType0.canBeCalled());
      assertEquals(false, noType0.isBooleanValueType());
      assertEquals(true, noType0.matchesObjectContext());
      assertNull(noType0.getTemplateTypeName());
      assertNull(noType0.getReferenceName());
      assertEquals(false, noType0.isAllType());
      assertEquals(true, noType0.matchesNumberContext());
      assertEquals(false, noType0.isNumberValueType());
      assertEquals(2147483647, noType0.getPropertiesCount());
      assertEquals(false, noType0.isOrdinaryFunction());
      assertEquals(false, noType0.isRecordType());
      assertEquals(true, noType0.isConstructor());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertEquals(true, noType0.isNullable());
      assertEquals(false, noType0.isTemplateType());
      assertEquals(true, noType0.isNoType());
      assertEquals(2147483647, noType0.getMaxArguments());
      assertEquals(false, noType0.isNullType());
      assertEquals(false, noType0.isUnionType());
      assertEquals(true, noType0.matchesStringContext());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(iterable0);
  }

  @Test
  public void test16()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      boolean boolean0 = true;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0, boolean0);
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      NoType noType0 = new NoType(jSTypeRegistry0);
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(2147483647, noType0.getPropertiesCount());
      assertEquals(false, noType0.isNoObjectType());
      assertEquals(false, noType0.isVoidType());
      assertEquals(false, noType0.isOrdinaryFunction());
      assertEquals(false, noType0.isBooleanValueType());
      assertNull(noType0.getTemplateTypeName());
      assertEquals(true, noType0.canBeCalled());
      assertEquals(true, noType0.matchesObjectContext());
      assertEquals(true, noType0.hasInstanceType());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noType0.isFunctionType());
      assertEquals(true, noType0.isConstructor());
      assertEquals(false, noType0.isAllType());
      assertEquals(true, noType0.isNoType());
      assertEquals(true, noType0.matchesNumberContext());
      assertEquals(false, noType0.isUnionType());
      assertEquals(2147483647, noType0.getMaxArguments());
      assertNull(noType0.getReferenceName());
      assertEquals(false, noType0.isResolved());
      assertEquals(false, noType0.isStringValueType());
      assertEquals(true, noType0.isNullable());
      assertEquals(false, noType0.hasCachedValues());
      assertEquals("None", noType0.toString());
      assertEquals(false, noType0.isReturnTypeInferred());
      assertEquals(false, noType0.isNullType());
      assertEquals(false, noType0.isNumberValueType());
      assertEquals(false, noType0.isRecordType());
      assertEquals(true, noType0.matchesStringContext());
      assertEquals(true, noType0.isEmptyType());
      assertEquals(false, noType0.isTemplateType());
      assertEquals(false, noType0.isInterface());
      assertNotNull(noType0);
      
      String string0 = "%";
      EnumType enumType0 = jSTypeRegistry0.createEnumType(string0, (JSType) noType0);
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, enumType0.isStringValueType());
      assertEquals(false, enumType0.isUnionType());
      assertEquals(false, enumType0.matchesNumberContext());
      assertEquals(false, enumType0.isNoType());
      assertEquals(false, enumType0.isVoidType());
      assertEquals(false, enumType0.isNoObjectType());
      assertEquals(false, enumType0.isResolved());
      assertEquals(false, enumType0.isBooleanValueType());
      assertEquals(true, enumType0.isEnumType());
      assertEquals(BooleanLiteralSet.TRUE, enumType0.getPossibleToBooleanOutcomes());
      assertEquals(false, enumType0.isFunctionType());
      assertEquals(true, enumType0.matchesStringContext());
      assertEquals(false, enumType0.isNumberValueType());
      assertEquals(true, enumType0.matchesObjectContext());
      assertEquals(false, enumType0.isRecordType());
      assertEquals(false, enumType0.isEmptyType());
      assertEquals(false, enumType0.isAllType());
      assertEquals(false, enumType0.isNullType());
      assertEquals(false, enumType0.isTemplateType());
      assertEquals(2147483647, noType0.getPropertiesCount());
      assertEquals(false, noType0.isNoObjectType());
      assertEquals(false, noType0.isVoidType());
      assertEquals(false, noType0.isOrdinaryFunction());
      assertEquals(false, noType0.isBooleanValueType());
      assertNull(noType0.getTemplateTypeName());
      assertEquals(true, noType0.canBeCalled());
      assertEquals(true, noType0.matchesObjectContext());
      assertEquals(true, noType0.hasInstanceType());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noType0.isFunctionType());
      assertEquals(true, noType0.isConstructor());
      assertEquals(false, noType0.isAllType());
      assertEquals(true, noType0.isNoType());
      assertEquals(true, noType0.matchesNumberContext());
      assertEquals(false, noType0.isUnionType());
      assertEquals(2147483647, noType0.getMaxArguments());
      assertNull(noType0.getReferenceName());
      assertEquals(false, noType0.isResolved());
      assertEquals(false, noType0.isStringValueType());
      assertEquals(true, noType0.isNullable());
      assertEquals(false, noType0.hasCachedValues());
      assertEquals("None", noType0.toString());
      assertEquals(false, noType0.isReturnTypeInferred());
      assertEquals(false, noType0.isNullType());
      assertEquals(false, noType0.isNumberValueType());
      assertEquals(false, noType0.isRecordType());
      assertEquals(true, noType0.matchesStringContext());
      assertEquals(true, noType0.isEmptyType());
      assertEquals(false, noType0.isTemplateType());
      assertEquals(false, noType0.isInterface());
      assertNotNull(enumType0);
      
      AllType allType0 = new AllType(jSTypeRegistry0);
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, allType0.isNumberValueType());
      assertEquals(false, allType0.isRecordType());
      assertEquals(false, allType0.isStringValueType());
      assertEquals(false, allType0.isUnionType());
      assertEquals(false, allType0.isEmptyType());
      assertEquals(false, allType0.isBooleanValueType());
      assertEquals(false, allType0.isFunctionType());
      assertEquals(false, allType0.isResolved());
      assertEquals(false, allType0.isNullType());
      assertEquals(false, allType0.canBeCalled());
      assertEquals(BooleanLiteralSet.BOTH, allType0.getPossibleToBooleanOutcomes());
      assertEquals(true, allType0.matchesObjectContext());
      assertEquals(true, allType0.matchesStringContext());
      assertEquals(false, allType0.isTemplateType());
      assertEquals(true, allType0.isAllType());
      assertEquals(false, allType0.isNoType());
      assertEquals(false, allType0.isNoObjectType());
      assertEquals("*", allType0.toString());
      assertEquals(false, allType0.isVoidType());
      assertNotNull(allType0);
      
      JSDocInfo jSDocInfo0 = allType0.getJSDocInfo();
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, allType0.isNumberValueType());
      assertEquals(false, allType0.isRecordType());
      assertEquals(false, allType0.isStringValueType());
      assertEquals(false, allType0.isUnionType());
      assertEquals(false, allType0.isEmptyType());
      assertEquals(false, allType0.isBooleanValueType());
      assertEquals(false, allType0.isFunctionType());
      assertEquals(false, allType0.isResolved());
      assertEquals(false, allType0.isNullType());
      assertEquals(false, allType0.canBeCalled());
      assertEquals(BooleanLiteralSet.BOTH, allType0.getPossibleToBooleanOutcomes());
      assertEquals(true, allType0.matchesObjectContext());
      assertEquals(true, allType0.matchesStringContext());
      assertEquals(false, allType0.isTemplateType());
      assertEquals(true, allType0.isAllType());
      assertEquals(false, allType0.isNoType());
      assertEquals(false, allType0.isNoObjectType());
      assertEquals("*", allType0.toString());
      assertEquals(false, allType0.isVoidType());
      assertNull(jSDocInfo0);
      
      enumType0.setJSDocInfo(jSDocInfo0);
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, allType0.isNumberValueType());
      assertEquals(false, allType0.isRecordType());
      assertEquals(false, allType0.isStringValueType());
      assertEquals(false, allType0.isUnionType());
      assertEquals(false, allType0.isEmptyType());
      assertEquals(false, allType0.isBooleanValueType());
      assertEquals(false, allType0.isFunctionType());
      assertEquals(false, allType0.isResolved());
      assertEquals(false, allType0.isNullType());
      assertEquals(false, allType0.canBeCalled());
      assertEquals(BooleanLiteralSet.BOTH, allType0.getPossibleToBooleanOutcomes());
      assertEquals(true, allType0.matchesObjectContext());
      assertEquals(true, allType0.matchesStringContext());
      assertEquals(false, allType0.isTemplateType());
      assertEquals(true, allType0.isAllType());
      assertEquals(false, allType0.isNoType());
      assertEquals(false, allType0.isNoObjectType());
      assertEquals("*", allType0.toString());
      assertEquals(false, allType0.isVoidType());
      assertEquals(false, enumType0.isStringValueType());
      assertEquals(false, enumType0.isUnionType());
      assertEquals(false, enumType0.matchesNumberContext());
      assertEquals(false, enumType0.isNoType());
      assertEquals(false, enumType0.isVoidType());
      assertEquals(false, enumType0.isNoObjectType());
      assertEquals(false, enumType0.isResolved());
      assertEquals(false, enumType0.isBooleanValueType());
      assertEquals(true, enumType0.isEnumType());
      assertEquals(BooleanLiteralSet.TRUE, enumType0.getPossibleToBooleanOutcomes());
      assertEquals(false, enumType0.isFunctionType());
      assertEquals(true, enumType0.matchesStringContext());
      assertEquals(false, enumType0.isNumberValueType());
      assertEquals(true, enumType0.matchesObjectContext());
      assertEquals(false, enumType0.isRecordType());
      assertEquals(false, enumType0.isEmptyType());
      assertEquals(false, enumType0.isAllType());
      assertEquals(false, enumType0.isNullType());
      assertEquals(false, enumType0.isTemplateType());
      assertEquals(2147483647, noType0.getPropertiesCount());
      assertEquals(false, noType0.isNoObjectType());
      assertEquals(false, noType0.isVoidType());
      assertEquals(false, noType0.isOrdinaryFunction());
      assertEquals(false, noType0.isBooleanValueType());
      assertNull(noType0.getTemplateTypeName());
      assertEquals(true, noType0.canBeCalled());
      assertEquals(true, noType0.matchesObjectContext());
      assertEquals(true, noType0.hasInstanceType());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noType0.isFunctionType());
      assertEquals(true, noType0.isConstructor());
      assertEquals(false, noType0.isAllType());
      assertEquals(true, noType0.isNoType());
      assertEquals(true, noType0.matchesNumberContext());
      assertEquals(false, noType0.isUnionType());
      assertEquals(2147483647, noType0.getMaxArguments());
      assertNull(noType0.getReferenceName());
      assertEquals(false, noType0.isResolved());
      assertEquals(false, noType0.isStringValueType());
      assertEquals(true, noType0.isNullable());
      assertEquals(false, noType0.hasCachedValues());
      assertEquals("None", noType0.toString());
      assertEquals(false, noType0.isReturnTypeInferred());
      assertEquals(false, noType0.isNullType());
      assertEquals(false, noType0.isNumberValueType());
      assertEquals(false, noType0.isRecordType());
      assertEquals(true, noType0.matchesStringContext());
      assertEquals(true, noType0.isEmptyType());
      assertEquals(false, noType0.isTemplateType());
      assertEquals(false, noType0.isInterface());
  }

  @Test
  public void test17()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = null;
      String string0 = "";
      int int0 = (-2315);
      Node node0 = Node.newString(string0, int0, int0);
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isVarArgs());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.hasChildren());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(40, node0.getType());
      assertEquals(false, node0.isQuotedString());
      assertNotNull(node0);
      
      boolean boolean0 = false;
      UnresolvedTypeExpression unresolvedTypeExpression0 = new UnresolvedTypeExpression(jSTypeRegistry0, node0, string0, boolean0);
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isVarArgs());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.hasChildren());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(40, node0.getType());
      assertEquals(false, node0.isQuotedString());
      assertEquals(true, unresolvedTypeExpression0.isUnknownType());
      assertEquals(true, unresolvedTypeExpression0.matchesStringContext());
      assertEquals(false, unresolvedTypeExpression0.isNumberValueType());
      assertEquals(false, unresolvedTypeExpression0.isCheckedUnknownType());
      assertEquals(false, unresolvedTypeExpression0.isFunctionType());
      assertEquals(2147483647, unresolvedTypeExpression0.getPropertiesCount());
      assertEquals(false, unresolvedTypeExpression0.hasReferenceName());
      assertEquals(true, unresolvedTypeExpression0.matchesObjectContext());
      assertEquals(false, unresolvedTypeExpression0.hasCachedValues());
      assertEquals(true, unresolvedTypeExpression0.isNullable());
      assertEquals(false, unresolvedTypeExpression0.isNullType());
      assertEquals(false, unresolvedTypeExpression0.isEmptyType());
      assertEquals(false, unresolvedTypeExpression0.isTemplateType());
      assertEquals(false, unresolvedTypeExpression0.isNoObjectType());
      assertEquals(false, unresolvedTypeExpression0.isVoidType());
      assertEquals(false, unresolvedTypeExpression0.isUnionType());
      assertEquals(BooleanLiteralSet.BOTH, unresolvedTypeExpression0.getPossibleToBooleanOutcomes());
      assertEquals(false, unresolvedTypeExpression0.isResolved());
      assertEquals(false, unresolvedTypeExpression0.isBooleanValueType());
      assertEquals(false, unresolvedTypeExpression0.isStringValueType());
      assertEquals("?", unresolvedTypeExpression0.getReferenceName());
      assertEquals("?", unresolvedTypeExpression0.toString());
      assertEquals(false, unresolvedTypeExpression0.isRecordType());
      assertEquals(true, unresolvedTypeExpression0.canBeCalled());
      assertEquals(false, unresolvedTypeExpression0.isNativeObjectType());
      assertEquals(false, unresolvedTypeExpression0.isNoType());
      assertEquals(false, unresolvedTypeExpression0.isAllType());
      assertEquals(true, unresolvedTypeExpression0.matchesNumberContext());
      assertNotNull(unresolvedTypeExpression0);
      
      boolean boolean1 = unresolvedTypeExpression0.isPropertyInExterns(string0);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean0 == boolean1);
      assertFalse(boolean1);
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isVarArgs());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.hasChildren());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(40, node0.getType());
      assertEquals(false, node0.isQuotedString());
      assertEquals(true, unresolvedTypeExpression0.isUnknownType());
      assertEquals(true, unresolvedTypeExpression0.matchesStringContext());
      assertEquals(false, unresolvedTypeExpression0.isNumberValueType());
      assertEquals(false, unresolvedTypeExpression0.isCheckedUnknownType());
      assertEquals(false, unresolvedTypeExpression0.isFunctionType());
      assertEquals(2147483647, unresolvedTypeExpression0.getPropertiesCount());
      assertEquals(false, unresolvedTypeExpression0.hasReferenceName());
      assertEquals(true, unresolvedTypeExpression0.matchesObjectContext());
      assertEquals(false, unresolvedTypeExpression0.hasCachedValues());
      assertEquals(true, unresolvedTypeExpression0.isNullable());
      assertEquals(false, unresolvedTypeExpression0.isNullType());
      assertEquals(false, unresolvedTypeExpression0.isEmptyType());
      assertEquals(false, unresolvedTypeExpression0.isTemplateType());
      assertEquals(false, unresolvedTypeExpression0.isNoObjectType());
      assertEquals(false, unresolvedTypeExpression0.isVoidType());
      assertEquals(false, unresolvedTypeExpression0.isUnionType());
      assertEquals(BooleanLiteralSet.BOTH, unresolvedTypeExpression0.getPossibleToBooleanOutcomes());
      assertEquals(false, unresolvedTypeExpression0.isResolved());
      assertEquals(false, unresolvedTypeExpression0.isBooleanValueType());
      assertEquals(false, unresolvedTypeExpression0.isStringValueType());
      assertEquals("?", unresolvedTypeExpression0.getReferenceName());
      assertEquals("?", unresolvedTypeExpression0.toString());
      assertEquals(false, unresolvedTypeExpression0.isRecordType());
      assertEquals(true, unresolvedTypeExpression0.canBeCalled());
      assertEquals(false, unresolvedTypeExpression0.isNativeObjectType());
      assertEquals(false, unresolvedTypeExpression0.isNoType());
      assertEquals(false, unresolvedTypeExpression0.isAllType());
      assertEquals(true, unresolvedTypeExpression0.matchesNumberContext());
  }

  @Test
  public void test18()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      boolean boolean0 = true;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0, boolean0);
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      UnknownType unknownType0 = new UnknownType(jSTypeRegistry0, boolean0);
      assertEquals(false, unknownType0.isNativeObjectType());
      assertEquals(false, unknownType0.isFunctionType());
      assertEquals(false, unknownType0.hasReferenceName());
      assertEquals(true, unknownType0.matchesObjectContext());
      assertEquals(false, unknownType0.isNoObjectType());
      assertEquals("??", unknownType0.toString());
      assertEquals(true, unknownType0.isUnknownType());
      assertEquals(false, unknownType0.isStringValueType());
      assertEquals(false, unknownType0.isNullType());
      assertEquals(false, unknownType0.isBooleanValueType());
      assertEquals(2147483647, unknownType0.getPropertiesCount());
      assertEquals(true, unknownType0.matchesNumberContext());
      assertEquals(false, unknownType0.isEmptyType());
      assertEquals(false, unknownType0.isNoType());
      assertEquals(true, unknownType0.isNullable());
      assertEquals(BooleanLiteralSet.BOTH, unknownType0.getPossibleToBooleanOutcomes());
      assertEquals(false, unknownType0.hasCachedValues());
      assertEquals(false, unknownType0.isAllType());
      assertEquals(false, unknownType0.isRecordType());
      assertEquals(true, unknownType0.canBeCalled());
      assertEquals(false, unknownType0.isVoidType());
      assertEquals("??", unknownType0.getReferenceName());
      assertEquals(false, unknownType0.isTemplateType());
      assertEquals(false, unknownType0.isResolved());
      assertEquals(false, unknownType0.isUnionType());
      assertEquals(false, unknownType0.isNumberValueType());
      assertEquals(true, unknownType0.isCheckedUnknownType());
      assertEquals(true, unknownType0.matchesStringContext());
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(unknownType0);
      
      ParameterizedType parameterizedType0 = new ParameterizedType(jSTypeRegistry0, unknownType0, unknownType0);
      assertEquals(false, unknownType0.isNativeObjectType());
      assertEquals(false, unknownType0.isFunctionType());
      assertEquals(false, unknownType0.hasReferenceName());
      assertEquals(true, unknownType0.matchesObjectContext());
      assertEquals(false, unknownType0.isNoObjectType());
      assertEquals("??", unknownType0.toString());
      assertEquals(true, unknownType0.isUnknownType());
      assertEquals(false, unknownType0.isStringValueType());
      assertEquals(false, unknownType0.isNullType());
      assertEquals(false, unknownType0.isBooleanValueType());
      assertEquals(2147483647, unknownType0.getPropertiesCount());
      assertEquals(true, unknownType0.matchesNumberContext());
      assertEquals(false, unknownType0.isEmptyType());
      assertEquals(false, unknownType0.isNoType());
      assertEquals(true, unknownType0.isNullable());
      assertEquals(BooleanLiteralSet.BOTH, unknownType0.getPossibleToBooleanOutcomes());
      assertEquals(false, unknownType0.hasCachedValues());
      assertEquals(false, unknownType0.isAllType());
      assertEquals(false, unknownType0.isRecordType());
      assertEquals(true, unknownType0.canBeCalled());
      assertEquals(false, unknownType0.isVoidType());
      assertEquals("??", unknownType0.getReferenceName());
      assertEquals(false, unknownType0.isTemplateType());
      assertEquals(false, unknownType0.isResolved());
      assertEquals(false, unknownType0.isUnionType());
      assertEquals(false, unknownType0.isNumberValueType());
      assertEquals(true, unknownType0.isCheckedUnknownType());
      assertEquals(true, unknownType0.matchesStringContext());
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, parameterizedType0.isEmptyType());
      assertEquals(false, parameterizedType0.isNativeObjectType());
      assertEquals(false, parameterizedType0.isNumberValueType());
      assertEquals(BooleanLiteralSet.TRUE, parameterizedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, parameterizedType0.isTemplateType());
      assertEquals(false, parameterizedType0.isStringValueType());
      assertEquals(false, parameterizedType0.isRecordType());
      assertEquals(false, parameterizedType0.hasCachedValues());
      assertEquals(false, parameterizedType0.isNoObjectType());
      assertEquals(false, parameterizedType0.isFunctionType());
      assertEquals(false, parameterizedType0.isVoidType());
      assertEquals(false, parameterizedType0.isNoType());
      assertEquals(false, parameterizedType0.isUnionType());
      assertEquals(false, parameterizedType0.isNullType());
      assertEquals(false, parameterizedType0.isAllType());
      assertEquals(false, parameterizedType0.isResolved());
      assertEquals(false, parameterizedType0.isBooleanValueType());
      assertNotNull(parameterizedType0);
      
      boolean boolean1 = parameterizedType0.hasReferenceName();
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean0 == boolean1);
      assertFalse(boolean1);
      assertEquals(false, unknownType0.isNativeObjectType());
      assertEquals(false, unknownType0.isFunctionType());
      assertEquals(false, unknownType0.hasReferenceName());
      assertEquals(true, unknownType0.matchesObjectContext());
      assertEquals(false, unknownType0.isNoObjectType());
      assertEquals("??", unknownType0.toString());
      assertEquals(true, unknownType0.isUnknownType());
      assertEquals(false, unknownType0.isStringValueType());
      assertEquals(false, unknownType0.isNullType());
      assertEquals(false, unknownType0.isBooleanValueType());
      assertEquals(2147483647, unknownType0.getPropertiesCount());
      assertEquals(true, unknownType0.matchesNumberContext());
      assertEquals(false, unknownType0.isEmptyType());
      assertEquals(false, unknownType0.isNoType());
      assertEquals(true, unknownType0.isNullable());
      assertEquals(BooleanLiteralSet.BOTH, unknownType0.getPossibleToBooleanOutcomes());
      assertEquals(false, unknownType0.hasCachedValues());
      assertEquals(false, unknownType0.isAllType());
      assertEquals(false, unknownType0.isRecordType());
      assertEquals(true, unknownType0.canBeCalled());
      assertEquals(false, unknownType0.isVoidType());
      assertEquals("??", unknownType0.getReferenceName());
      assertEquals(false, unknownType0.isTemplateType());
      assertEquals(false, unknownType0.isResolved());
      assertEquals(false, unknownType0.isUnionType());
      assertEquals(false, unknownType0.isNumberValueType());
      assertEquals(true, unknownType0.isCheckedUnknownType());
      assertEquals(true, unknownType0.matchesStringContext());
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, parameterizedType0.isEmptyType());
      assertEquals(false, parameterizedType0.isNativeObjectType());
      assertEquals(false, parameterizedType0.isNumberValueType());
      assertEquals(BooleanLiteralSet.TRUE, parameterizedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, parameterizedType0.isTemplateType());
      assertEquals(false, parameterizedType0.isStringValueType());
      assertEquals(false, parameterizedType0.isRecordType());
      assertEquals(false, parameterizedType0.hasCachedValues());
      assertEquals(false, parameterizedType0.isNoObjectType());
      assertEquals(false, parameterizedType0.isFunctionType());
      assertEquals(false, parameterizedType0.isVoidType());
      assertEquals(false, parameterizedType0.isNoType());
      assertEquals(false, parameterizedType0.isUnionType());
      assertEquals(false, parameterizedType0.isNullType());
      assertEquals(false, parameterizedType0.isAllType());
      assertEquals(false, parameterizedType0.isResolved());
      assertEquals(false, parameterizedType0.isBooleanValueType());
  }

  @Test
  public void test19()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      String string0 = "";
      int int0 = 1792;
      NamedType namedType0 = new NamedType(jSTypeRegistry0, string0, string0, int0, int0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, namedType0.isNumberValueType());
      assertEquals(BooleanLiteralSet.TRUE, namedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, namedType0.isTemplateType());
      assertEquals(false, namedType0.isVoidType());
      assertEquals(false, namedType0.isNoObjectType());
      assertEquals(false, namedType0.isRecordType());
      assertEquals(false, namedType0.isNoType());
      assertEquals(false, namedType0.isStringValueType());
      assertEquals(false, namedType0.isFunctionType());
      assertEquals(false, namedType0.isResolved());
      assertEquals(false, namedType0.isNativeObjectType());
      assertEquals(false, namedType0.isEmptyType());
      assertEquals(false, namedType0.isBooleanValueType());
      assertEquals(false, namedType0.hasCachedValues());
      assertEquals(false, namedType0.isUnionType());
      assertEquals(false, namedType0.isAllType());
      assertEquals(false, namedType0.isNullType());
      assertNotNull(namedType0);
      
      EnumType enumType0 = jSTypeRegistry0.createEnumType(string0, (JSType) namedType0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, enumType0.isStringValueType());
      assertEquals(false, enumType0.isUnionType());
      assertEquals(false, enumType0.isResolved());
      assertEquals(true, enumType0.isEnumType());
      assertEquals(false, enumType0.isAllType());
      assertEquals(true, enumType0.matchesStringContext());
      assertEquals(false, enumType0.isNoType());
      assertEquals(false, enumType0.isVoidType());
      assertEquals(true, enumType0.matchesObjectContext());
      assertEquals(false, enumType0.isRecordType());
      assertEquals(false, enumType0.matchesNumberContext());
      assertEquals(BooleanLiteralSet.TRUE, enumType0.getPossibleToBooleanOutcomes());
      assertEquals(false, enumType0.isBooleanValueType());
      assertEquals(false, enumType0.isTemplateType());
      assertEquals(false, enumType0.isEmptyType());
      assertEquals(false, enumType0.isNoObjectType());
      assertEquals(false, enumType0.isNullType());
      assertEquals(false, enumType0.isFunctionType());
      assertEquals(false, enumType0.isNumberValueType());
      assertEquals(false, namedType0.isNumberValueType());
      assertEquals(BooleanLiteralSet.TRUE, namedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, namedType0.isTemplateType());
      assertEquals(false, namedType0.isVoidType());
      assertEquals(false, namedType0.isNoObjectType());
      assertEquals(false, namedType0.isRecordType());
      assertEquals(false, namedType0.isNoType());
      assertEquals(false, namedType0.isStringValueType());
      assertEquals(false, namedType0.isFunctionType());
      assertEquals(false, namedType0.isResolved());
      assertEquals(false, namedType0.isNativeObjectType());
      assertEquals(false, namedType0.isEmptyType());
      assertEquals(false, namedType0.isBooleanValueType());
      assertEquals(false, namedType0.hasCachedValues());
      assertEquals(false, namedType0.isUnionType());
      assertEquals(false, namedType0.isAllType());
      assertEquals(false, namedType0.isNullType());
      assertNotNull(enumType0);
      
      JSType[] jSTypeArray0 = new JSType[5];
      FunctionType functionType0 = jSTypeRegistry0.createConstructorType((JSType) enumType0, jSTypeArray0);
      assertEquals(true, functionType0.isFunctionType());
      assertEquals(false, functionType0.isEmptyType());
      assertEquals(false, functionType0.isInterface());
      assertNull(functionType0.getTemplateTypeName());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, functionType0.isRecordType());
      assertEquals(false, functionType0.isStringValueType());
      assertEquals(false, functionType0.isOrdinaryFunction());
      assertEquals(false, functionType0.isNumberValueType());
      assertEquals(true, functionType0.hasInstanceType());
      assertEquals(false, functionType0.isUnionType());
      assertEquals(5, functionType0.getMaxArguments());
      assertEquals(true, functionType0.isConstructor());
      assertEquals(false, functionType0.isTemplateType());
      assertEquals(false, functionType0.isNoObjectType());
      assertEquals(false, functionType0.isResolved());
      assertEquals(false, functionType0.isReturnTypeInferred());
      assertEquals(false, functionType0.hasCachedValues());
      assertEquals(false, functionType0.isBooleanValueType());
      assertEquals(true, functionType0.canBeCalled());
      assertEquals(false, functionType0.isNoType());
      assertEquals(false, functionType0.isNullType());
      assertEquals(false, functionType0.isVoidType());
      assertEquals(false, functionType0.isAllType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, enumType0.isStringValueType());
      assertEquals(false, enumType0.isUnionType());
      assertEquals(false, enumType0.isResolved());
      assertEquals(true, enumType0.isEnumType());
      assertEquals(false, enumType0.isAllType());
      assertEquals(true, enumType0.matchesStringContext());
      assertEquals(false, enumType0.isNoType());
      assertEquals(false, enumType0.isVoidType());
      assertEquals(true, enumType0.matchesObjectContext());
      assertEquals(false, enumType0.isRecordType());
      assertEquals(false, enumType0.matchesNumberContext());
      assertEquals(BooleanLiteralSet.TRUE, enumType0.getPossibleToBooleanOutcomes());
      assertEquals(false, enumType0.isBooleanValueType());
      assertEquals(false, enumType0.isTemplateType());
      assertEquals(false, enumType0.isEmptyType());
      assertEquals(false, enumType0.isNoObjectType());
      assertEquals(false, enumType0.isNullType());
      assertEquals(false, enumType0.isFunctionType());
      assertEquals(false, enumType0.isNumberValueType());
      assertEquals(false, namedType0.isNumberValueType());
      assertEquals(BooleanLiteralSet.TRUE, namedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, namedType0.isTemplateType());
      assertEquals(false, namedType0.isVoidType());
      assertEquals(false, namedType0.isNoObjectType());
      assertEquals(false, namedType0.isRecordType());
      assertEquals(false, namedType0.isNoType());
      assertEquals(false, namedType0.isStringValueType());
      assertEquals(false, namedType0.isFunctionType());
      assertEquals(false, namedType0.isResolved());
      assertEquals(false, namedType0.isNativeObjectType());
      assertEquals(false, namedType0.isEmptyType());
      assertEquals(false, namedType0.isBooleanValueType());
      assertEquals(false, namedType0.hasCachedValues());
      assertEquals(false, namedType0.isUnionType());
      assertEquals(false, namedType0.isAllType());
      assertEquals(false, namedType0.isNullType());
      assertNotNull(functionType0);
      
      boolean boolean0 = functionType0.isObject();
      assertTrue(boolean0);
      assertEquals(true, functionType0.isFunctionType());
      assertEquals(false, functionType0.isEmptyType());
      assertEquals(false, functionType0.isInterface());
      assertNull(functionType0.getTemplateTypeName());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, functionType0.isRecordType());
      assertEquals(false, functionType0.isStringValueType());
      assertEquals(false, functionType0.isOrdinaryFunction());
      assertEquals(false, functionType0.isNumberValueType());
      assertEquals(true, functionType0.hasInstanceType());
      assertEquals(false, functionType0.isUnionType());
      assertEquals(5, functionType0.getMaxArguments());
      assertEquals(true, functionType0.isConstructor());
      assertEquals(false, functionType0.isTemplateType());
      assertEquals(false, functionType0.isNoObjectType());
      assertEquals(false, functionType0.isResolved());
      assertEquals(false, functionType0.isReturnTypeInferred());
      assertEquals(false, functionType0.hasCachedValues());
      assertEquals(false, functionType0.isBooleanValueType());
      assertEquals(true, functionType0.canBeCalled());
      assertEquals(false, functionType0.isNoType());
      assertEquals(false, functionType0.isNullType());
      assertEquals(false, functionType0.isVoidType());
      assertEquals(false, functionType0.isAllType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, enumType0.isStringValueType());
      assertEquals(false, enumType0.isUnionType());
      assertEquals(false, enumType0.isResolved());
      assertEquals(true, enumType0.isEnumType());
      assertEquals(false, enumType0.isAllType());
      assertEquals(true, enumType0.matchesStringContext());
      assertEquals(false, enumType0.isNoType());
      assertEquals(false, enumType0.isVoidType());
      assertEquals(true, enumType0.matchesObjectContext());
      assertEquals(false, enumType0.isRecordType());
      assertEquals(false, enumType0.matchesNumberContext());
      assertEquals(BooleanLiteralSet.TRUE, enumType0.getPossibleToBooleanOutcomes());
      assertEquals(false, enumType0.isBooleanValueType());
      assertEquals(false, enumType0.isTemplateType());
      assertEquals(false, enumType0.isEmptyType());
      assertEquals(false, enumType0.isNoObjectType());
      assertEquals(false, enumType0.isNullType());
      assertEquals(false, enumType0.isFunctionType());
      assertEquals(false, enumType0.isNumberValueType());
      assertEquals(false, namedType0.isNumberValueType());
      assertEquals(BooleanLiteralSet.TRUE, namedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, namedType0.isTemplateType());
      assertEquals(false, namedType0.isVoidType());
      assertEquals(false, namedType0.isNoObjectType());
      assertEquals(false, namedType0.isRecordType());
      assertEquals(false, namedType0.isNoType());
      assertEquals(false, namedType0.isStringValueType());
      assertEquals(false, namedType0.isFunctionType());
      assertEquals(false, namedType0.isResolved());
      assertEquals(false, namedType0.isNativeObjectType());
      assertEquals(false, namedType0.isEmptyType());
      assertEquals(false, namedType0.isBooleanValueType());
      assertEquals(false, namedType0.hasCachedValues());
      assertEquals(false, namedType0.isUnionType());
      assertEquals(false, namedType0.isAllType());
      assertEquals(false, namedType0.isNullType());
  }

  @Test
  public void test20()  throws Throwable  {
      ErrorReporter errorReporter0 = null;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(errorReporter0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      String string0 = "-tCc`";
      NoObjectType noObjectType0 = new NoObjectType(jSTypeRegistry0);
      assertEquals(false, noObjectType0.isInterface());
      assertEquals(false, noObjectType0.isNoType());
      assertEquals(false, noObjectType0.isResolved());
      assertNull(noObjectType0.getReferenceName());
      assertEquals(false, noObjectType0.isNumberValueType());
      assertEquals(false, noObjectType0.isNullType());
      assertEquals(false, noObjectType0.isAllType());
      assertEquals(false, noObjectType0.isFunctionType());
      assertEquals(false, noObjectType0.isTemplateType());
      assertEquals(true, noObjectType0.isConstructor());
      assertEquals(2147483647, noObjectType0.getPropertiesCount());
      assertEquals(true, noObjectType0.matchesNumberContext());
      assertNull(noObjectType0.getTemplateTypeName());
      assertEquals(false, noObjectType0.isUnionType());
      assertEquals("NoObject", noObjectType0.toString());
      assertEquals(false, noObjectType0.hasCachedValues());
      assertEquals(false, noObjectType0.isOrdinaryFunction());
      assertEquals(true, noObjectType0.isNoObjectType());
      assertEquals(false, noObjectType0.isStringValueType());
      assertEquals(BooleanLiteralSet.TRUE, noObjectType0.getPossibleToBooleanOutcomes());
      assertEquals(2147483647, noObjectType0.getMaxArguments());
      assertEquals(false, noObjectType0.isBooleanValueType());
      assertEquals(true, noObjectType0.hasInstanceType());
      assertEquals(true, noObjectType0.matchesObjectContext());
      assertEquals(true, noObjectType0.matchesStringContext());
      assertEquals(false, noObjectType0.isReturnTypeInferred());
      assertEquals(false, noObjectType0.isRecordType());
      assertEquals(true, noObjectType0.canBeCalled());
      assertEquals(false, noObjectType0.isVoidType());
      assertEquals(true, noObjectType0.isEmptyType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(noObjectType0);
      
      EnumElementType enumElementType0 = new EnumElementType(jSTypeRegistry0, noObjectType0, string0);
      assertEquals(false, noObjectType0.isInterface());
      assertEquals(false, noObjectType0.isNoType());
      assertEquals(false, noObjectType0.isResolved());
      assertNull(noObjectType0.getReferenceName());
      assertEquals(false, noObjectType0.isNumberValueType());
      assertEquals(false, noObjectType0.isNullType());
      assertEquals(false, noObjectType0.isAllType());
      assertEquals(false, noObjectType0.isFunctionType());
      assertEquals(false, noObjectType0.isTemplateType());
      assertEquals(true, noObjectType0.isConstructor());
      assertEquals(2147483647, noObjectType0.getPropertiesCount());
      assertEquals(true, noObjectType0.matchesNumberContext());
      assertNull(noObjectType0.getTemplateTypeName());
      assertEquals(false, noObjectType0.isUnionType());
      assertEquals("NoObject", noObjectType0.toString());
      assertEquals(false, noObjectType0.hasCachedValues());
      assertEquals(false, noObjectType0.isOrdinaryFunction());
      assertEquals(true, noObjectType0.isNoObjectType());
      assertEquals(false, noObjectType0.isStringValueType());
      assertEquals(BooleanLiteralSet.TRUE, noObjectType0.getPossibleToBooleanOutcomes());
      assertEquals(2147483647, noObjectType0.getMaxArguments());
      assertEquals(false, noObjectType0.isBooleanValueType());
      assertEquals(true, noObjectType0.hasInstanceType());
      assertEquals(true, noObjectType0.matchesObjectContext());
      assertEquals(true, noObjectType0.matchesStringContext());
      assertEquals(false, noObjectType0.isReturnTypeInferred());
      assertEquals(false, noObjectType0.isRecordType());
      assertEquals(true, noObjectType0.canBeCalled());
      assertEquals(false, noObjectType0.isVoidType());
      assertEquals(true, noObjectType0.isEmptyType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, enumElementType0.isUnionType());
      assertEquals(true, enumElementType0.isEnumElementType());
      assertEquals(false, enumElementType0.isNoObjectType());
      assertEquals(false, enumElementType0.isEmptyType());
      assertEquals(false, enumElementType0.isTemplateType());
      assertEquals(false, enumElementType0.isRecordType());
      assertEquals(false, enumElementType0.isFunctionType());
      assertEquals(false, enumElementType0.isAllType());
      assertEquals(false, enumElementType0.isVoidType());
      assertEquals(BooleanLiteralSet.TRUE, enumElementType0.getPossibleToBooleanOutcomes());
      assertEquals(false, enumElementType0.hasCachedValues());
      assertEquals(false, enumElementType0.isNumberValueType());
      assertEquals("-tCc`", enumElementType0.getReferenceName());
      assertEquals(false, enumElementType0.isNullType());
      assertEquals(false, enumElementType0.isBooleanValueType());
      assertEquals(false, enumElementType0.isNoType());
      assertEquals(false, enumElementType0.isNativeObjectType());
      assertEquals(false, enumElementType0.isStringValueType());
      assertEquals(true, enumElementType0.hasReferenceName());
      assertEquals(false, enumElementType0.isResolved());
      assertEquals(true, enumElementType0.isNominalType());
      assertNotNull(enumElementType0);
      
      Set<String> set0 = enumElementType0.getOwnPropertyNames();
      assertEquals(false, noObjectType0.isInterface());
      assertEquals(false, noObjectType0.isNoType());
      assertEquals(false, noObjectType0.isResolved());
      assertNull(noObjectType0.getReferenceName());
      assertEquals(false, noObjectType0.isNumberValueType());
      assertEquals(false, noObjectType0.isNullType());
      assertEquals(false, noObjectType0.isAllType());
      assertEquals(false, noObjectType0.isFunctionType());
      assertEquals(false, noObjectType0.isTemplateType());
      assertEquals(true, noObjectType0.isConstructor());
      assertEquals(2147483647, noObjectType0.getPropertiesCount());
      assertEquals(true, noObjectType0.matchesNumberContext());
      assertNull(noObjectType0.getTemplateTypeName());
      assertEquals(false, noObjectType0.isUnionType());
      assertEquals("NoObject", noObjectType0.toString());
      assertEquals(false, noObjectType0.hasCachedValues());
      assertEquals(false, noObjectType0.isOrdinaryFunction());
      assertEquals(true, noObjectType0.isNoObjectType());
      assertEquals(false, noObjectType0.isStringValueType());
      assertEquals(BooleanLiteralSet.TRUE, noObjectType0.getPossibleToBooleanOutcomes());
      assertEquals(2147483647, noObjectType0.getMaxArguments());
      assertEquals(false, noObjectType0.isBooleanValueType());
      assertEquals(true, noObjectType0.hasInstanceType());
      assertEquals(true, noObjectType0.matchesObjectContext());
      assertEquals(true, noObjectType0.matchesStringContext());
      assertEquals(false, noObjectType0.isReturnTypeInferred());
      assertEquals(false, noObjectType0.isRecordType());
      assertEquals(true, noObjectType0.canBeCalled());
      assertEquals(false, noObjectType0.isVoidType());
      assertEquals(true, noObjectType0.isEmptyType());
      assertEquals(0, set0.size());
      assertEquals(true, set0.isEmpty());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, enumElementType0.isUnionType());
      assertEquals(true, enumElementType0.isEnumElementType());
      assertEquals(false, enumElementType0.isNoObjectType());
      assertEquals(false, enumElementType0.isEmptyType());
      assertEquals(false, enumElementType0.isTemplateType());
      assertEquals(false, enumElementType0.isRecordType());
      assertEquals(false, enumElementType0.isFunctionType());
      assertEquals(false, enumElementType0.isAllType());
      assertEquals(false, enumElementType0.isVoidType());
      assertEquals(BooleanLiteralSet.TRUE, enumElementType0.getPossibleToBooleanOutcomes());
      assertEquals(false, enumElementType0.hasCachedValues());
      assertEquals(false, enumElementType0.isNumberValueType());
      assertEquals("-tCc`", enumElementType0.getReferenceName());
      assertEquals(false, enumElementType0.isNullType());
      assertEquals(false, enumElementType0.isBooleanValueType());
      assertEquals(false, enumElementType0.isNoType());
      assertEquals(false, enumElementType0.isNativeObjectType());
      assertEquals(false, enumElementType0.isStringValueType());
      assertEquals(true, enumElementType0.hasReferenceName());
      assertEquals(false, enumElementType0.isResolved());
      assertEquals(true, enumElementType0.isNominalType());
      assertNotNull(set0);
  }

  @Test
  public void test21()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      boolean boolean0 = true;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0, boolean0);
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      String string0 = "%";
      TemplateType templateType0 = new TemplateType(jSTypeRegistry0, string0);
      assertEquals(false, templateType0.isNoObjectType());
      assertEquals(false, templateType0.isNullType());
      assertEquals(false, templateType0.isStringValueType());
      assertEquals(false, templateType0.isNativeObjectType());
      assertEquals(false, templateType0.isResolved());
      assertEquals(false, templateType0.isAllType());
      assertEquals(false, templateType0.isNoType());
      assertEquals(false, templateType0.isBooleanValueType());
      assertEquals(true, templateType0.isTemplateType());
      assertEquals(false, templateType0.isUnionType());
      assertEquals(false, templateType0.isNumberValueType());
      assertEquals(false, templateType0.isRecordType());
      assertEquals("%", templateType0.getReferenceName());
      assertEquals(false, templateType0.isVoidType());
      assertEquals(false, templateType0.isEmptyType());
      assertEquals(BooleanLiteralSet.TRUE, templateType0.getPossibleToBooleanOutcomes());
      assertEquals(false, templateType0.isFunctionType());
      assertEquals(false, templateType0.hasCachedValues());
      assertEquals("%", templateType0.toString());
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(templateType0);
      
      AllType allType0 = new AllType(jSTypeRegistry0);
      assertEquals("*", allType0.toString());
      assertEquals(false, allType0.isRecordType());
      assertEquals(false, allType0.isNumberValueType());
      assertEquals(BooleanLiteralSet.BOTH, allType0.getPossibleToBooleanOutcomes());
      assertEquals(true, allType0.matchesStringContext());
      assertEquals(false, allType0.isEmptyType());
      assertEquals(true, allType0.matchesObjectContext());
      assertEquals(false, allType0.isResolved());
      assertEquals(false, allType0.isNoType());
      assertEquals(false, allType0.isVoidType());
      assertEquals(false, allType0.isStringValueType());
      assertEquals(false, allType0.isBooleanValueType());
      assertEquals(true, allType0.isAllType());
      assertEquals(false, allType0.isTemplateType());
      assertEquals(false, allType0.isNoObjectType());
      assertEquals(false, allType0.isNullType());
      assertEquals(false, allType0.isFunctionType());
      assertEquals(false, allType0.isUnionType());
      assertEquals(false, allType0.canBeCalled());
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(allType0);
      
      JSDocInfo jSDocInfo0 = allType0.getJSDocInfo();
      assertEquals("*", allType0.toString());
      assertEquals(false, allType0.isRecordType());
      assertEquals(false, allType0.isNumberValueType());
      assertEquals(BooleanLiteralSet.BOTH, allType0.getPossibleToBooleanOutcomes());
      assertEquals(true, allType0.matchesStringContext());
      assertEquals(false, allType0.isEmptyType());
      assertEquals(true, allType0.matchesObjectContext());
      assertEquals(false, allType0.isResolved());
      assertEquals(false, allType0.isNoType());
      assertEquals(false, allType0.isVoidType());
      assertEquals(false, allType0.isStringValueType());
      assertEquals(false, allType0.isBooleanValueType());
      assertEquals(true, allType0.isAllType());
      assertEquals(false, allType0.isTemplateType());
      assertEquals(false, allType0.isNoObjectType());
      assertEquals(false, allType0.isNullType());
      assertEquals(false, allType0.isFunctionType());
      assertEquals(false, allType0.isUnionType());
      assertEquals(false, allType0.canBeCalled());
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNull(jSDocInfo0);
      
      templateType0.setPropertyJSDocInfo(string0, jSDocInfo0, boolean0);
      assertEquals(false, templateType0.isNoObjectType());
      assertEquals(false, templateType0.isNullType());
      assertEquals(false, templateType0.isStringValueType());
      assertEquals(false, templateType0.isNativeObjectType());
      assertEquals(false, templateType0.isResolved());
      assertEquals(false, templateType0.isAllType());
      assertEquals(false, templateType0.isNoType());
      assertEquals(false, templateType0.isBooleanValueType());
      assertEquals(true, templateType0.isTemplateType());
      assertEquals(false, templateType0.isUnionType());
      assertEquals(false, templateType0.isNumberValueType());
      assertEquals(false, templateType0.isRecordType());
      assertEquals("%", templateType0.getReferenceName());
      assertEquals(false, templateType0.isVoidType());
      assertEquals(false, templateType0.isEmptyType());
      assertEquals(BooleanLiteralSet.TRUE, templateType0.getPossibleToBooleanOutcomes());
      assertEquals(false, templateType0.isFunctionType());
      assertEquals(false, templateType0.hasCachedValues());
      assertEquals("%", templateType0.toString());
      assertEquals("*", allType0.toString());
      assertEquals(false, allType0.isRecordType());
      assertEquals(false, allType0.isNumberValueType());
      assertEquals(BooleanLiteralSet.BOTH, allType0.getPossibleToBooleanOutcomes());
      assertEquals(true, allType0.matchesStringContext());
      assertEquals(false, allType0.isEmptyType());
      assertEquals(true, allType0.matchesObjectContext());
      assertEquals(false, allType0.isResolved());
      assertEquals(false, allType0.isNoType());
      assertEquals(false, allType0.isVoidType());
      assertEquals(false, allType0.isStringValueType());
      assertEquals(false, allType0.isBooleanValueType());
      assertEquals(true, allType0.isAllType());
      assertEquals(false, allType0.isTemplateType());
      assertEquals(false, allType0.isNoObjectType());
      assertEquals(false, allType0.isNullType());
      assertEquals(false, allType0.isFunctionType());
      assertEquals(false, allType0.isUnionType());
      assertEquals(false, allType0.canBeCalled());
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
  }

  @Test
  public void test22()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      boolean boolean0 = false;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0, boolean0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      String string0 = "ELLIPSIS";
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, string0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, errorFunctionType0.isTemplateType());
      assertEquals(true, errorFunctionType0.canBeCalled());
      assertEquals(true, errorFunctionType0.isFunctionType());
      assertEquals(true, errorFunctionType0.isConstructor());
      assertEquals(false, errorFunctionType0.isNullType());
      assertEquals(false, errorFunctionType0.isVoidType());
      assertEquals(false, errorFunctionType0.isRecordType());
      assertEquals(false, errorFunctionType0.isEmptyType());
      assertEquals(false, errorFunctionType0.isNumberValueType());
      assertEquals(false, errorFunctionType0.isUnionType());
      assertEquals(false, errorFunctionType0.isResolved());
      assertEquals(false, errorFunctionType0.isStringValueType());
      assertEquals(false, errorFunctionType0.isInterface());
      assertEquals(false, errorFunctionType0.isAllType());
      assertEquals(false, errorFunctionType0.isReturnTypeInferred());
      assertEquals(true, errorFunctionType0.hasInstanceType());
      assertEquals(false, errorFunctionType0.isBooleanValueType());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      assertEquals(false, errorFunctionType0.isNoType());
      assertEquals(false, errorFunctionType0.isNoObjectType());
      assertEquals(3, errorFunctionType0.getMaxArguments());
      assertNull(errorFunctionType0.getTemplateTypeName());
      assertEquals(false, errorFunctionType0.hasCachedValues());
      assertNotNull(errorFunctionType0);
      
      TemplateType templateType0 = new TemplateType(jSTypeRegistry0, string0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, templateType0.isNoType());
      assertEquals(false, templateType0.isNumberValueType());
      assertEquals(false, templateType0.isVoidType());
      assertEquals("ELLIPSIS", templateType0.getReferenceName());
      assertEquals("ELLIPSIS", templateType0.toString());
      assertEquals(false, templateType0.isUnionType());
      assertEquals(BooleanLiteralSet.TRUE, templateType0.getPossibleToBooleanOutcomes());
      assertEquals(false, templateType0.isAllType());
      assertEquals(false, templateType0.isStringValueType());
      assertEquals(true, templateType0.isTemplateType());
      assertEquals(false, templateType0.isRecordType());
      assertEquals(false, templateType0.isNativeObjectType());
      assertEquals(false, templateType0.isResolved());
      assertEquals(false, templateType0.isEmptyType());
      assertEquals(false, templateType0.hasCachedValues());
      assertEquals(false, templateType0.isBooleanValueType());
      assertEquals(false, templateType0.isFunctionType());
      assertEquals(false, templateType0.isNoObjectType());
      assertEquals(false, templateType0.isNullType());
      assertNotNull(templateType0);
      
      FunctionPrototypeType functionPrototypeType0 = new FunctionPrototypeType(jSTypeRegistry0, errorFunctionType0, templateType0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, templateType0.isNoType());
      assertEquals(false, templateType0.isNumberValueType());
      assertEquals(false, templateType0.isVoidType());
      assertEquals("ELLIPSIS", templateType0.getReferenceName());
      assertEquals("ELLIPSIS", templateType0.toString());
      assertEquals(false, templateType0.isUnionType());
      assertEquals(BooleanLiteralSet.TRUE, templateType0.getPossibleToBooleanOutcomes());
      assertEquals(false, templateType0.isAllType());
      assertEquals(false, templateType0.isStringValueType());
      assertEquals(true, templateType0.isTemplateType());
      assertEquals(false, templateType0.isRecordType());
      assertEquals(false, templateType0.isNativeObjectType());
      assertEquals(false, templateType0.isResolved());
      assertEquals(false, templateType0.isEmptyType());
      assertEquals(false, templateType0.hasCachedValues());
      assertEquals(false, templateType0.isBooleanValueType());
      assertEquals(false, templateType0.isFunctionType());
      assertEquals(false, templateType0.isNoObjectType());
      assertEquals(false, templateType0.isNullType());
      assertEquals(false, functionPrototypeType0.isNumberValueType());
      assertEquals(false, functionPrototypeType0.isVoidType());
      assertEquals(false, functionPrototypeType0.isResolved());
      assertEquals(false, functionPrototypeType0.isNoType());
      assertEquals(false, functionPrototypeType0.isUnionType());
      assertEquals(false, functionPrototypeType0.isFunctionType());
      assertEquals(false, functionPrototypeType0.isEmptyType());
      assertEquals(false, functionPrototypeType0.isBooleanValueType());
      assertEquals(false, functionPrototypeType0.isTemplateType());
      assertEquals(false, functionPrototypeType0.isNoObjectType());
      assertEquals(true, functionPrototypeType0.isFunctionPrototypeType());
      assertEquals(false, functionPrototypeType0.isStringValueType());
      assertEquals(false, functionPrototypeType0.isNullType());
      assertEquals(BooleanLiteralSet.TRUE, functionPrototypeType0.getPossibleToBooleanOutcomes());
      assertEquals(true, functionPrototypeType0.hasReferenceName());
      assertEquals(false, functionPrototypeType0.isRecordType());
      assertEquals(false, functionPrototypeType0.isAllType());
      assertEquals(false, errorFunctionType0.isTemplateType());
      assertEquals(true, errorFunctionType0.canBeCalled());
      assertEquals(true, errorFunctionType0.isFunctionType());
      assertEquals(true, errorFunctionType0.isConstructor());
      assertEquals(false, errorFunctionType0.isNullType());
      assertEquals(false, errorFunctionType0.isVoidType());
      assertEquals(false, errorFunctionType0.isRecordType());
      assertEquals(false, errorFunctionType0.isEmptyType());
      assertEquals(false, errorFunctionType0.isNumberValueType());
      assertEquals(false, errorFunctionType0.isUnionType());
      assertEquals(false, errorFunctionType0.isResolved());
      assertEquals(false, errorFunctionType0.isStringValueType());
      assertEquals(false, errorFunctionType0.isInterface());
      assertEquals(false, errorFunctionType0.isAllType());
      assertEquals(false, errorFunctionType0.isReturnTypeInferred());
      assertEquals(true, errorFunctionType0.hasInstanceType());
      assertEquals(false, errorFunctionType0.isBooleanValueType());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      assertEquals(false, errorFunctionType0.isNoType());
      assertEquals(false, errorFunctionType0.isNoObjectType());
      assertEquals(3, errorFunctionType0.getMaxArguments());
      assertNull(errorFunctionType0.getTemplateTypeName());
      assertEquals(false, errorFunctionType0.hasCachedValues());
      assertNotNull(functionPrototypeType0);
      
      UnknownType unknownType0 = (UnknownType)functionPrototypeType0.getGreatestSubtype((JSType) templateType0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, templateType0.isNoType());
      assertEquals(false, templateType0.isNumberValueType());
      assertEquals(false, templateType0.isVoidType());
      assertEquals("ELLIPSIS", templateType0.getReferenceName());
      assertEquals("ELLIPSIS", templateType0.toString());
      assertEquals(false, templateType0.isUnionType());
      assertEquals(BooleanLiteralSet.TRUE, templateType0.getPossibleToBooleanOutcomes());
      assertEquals(false, templateType0.isAllType());
      assertEquals(false, templateType0.isStringValueType());
      assertEquals(true, templateType0.isTemplateType());
      assertEquals(false, templateType0.isRecordType());
      assertEquals(false, templateType0.isNativeObjectType());
      assertEquals(false, templateType0.isResolved());
      assertEquals(false, templateType0.isEmptyType());
      assertEquals(false, templateType0.hasCachedValues());
      assertEquals(false, templateType0.isBooleanValueType());
      assertEquals(false, templateType0.isFunctionType());
      assertEquals(false, templateType0.isNoObjectType());
      assertEquals(false, templateType0.isNullType());
      assertEquals(false, unknownType0.isAllType());
      assertEquals(false, unknownType0.isNativeObjectType());
      assertEquals(false, unknownType0.isTemplateType());
      assertEquals(false, unknownType0.isResolved());
      assertEquals(true, unknownType0.isNullable());
      assertEquals(false, unknownType0.hasCachedValues());
      assertEquals(false, unknownType0.isNoType());
      assertEquals(false, unknownType0.isEmptyType());
      assertEquals(false, unknownType0.hasReferenceName());
      assertEquals(false, unknownType0.isNullType());
      assertEquals(true, unknownType0.matchesNumberContext());
      assertEquals(false, unknownType0.isCheckedUnknownType());
      assertEquals(false, unknownType0.isVoidType());
      assertEquals(false, unknownType0.isNumberValueType());
      assertEquals(true, unknownType0.canBeCalled());
      assertEquals(2147483647, unknownType0.getPropertiesCount());
      assertEquals(false, unknownType0.isUnionType());
      assertEquals(false, unknownType0.isFunctionType());
      assertEquals("?", unknownType0.getReferenceName());
      assertEquals(false, unknownType0.isStringValueType());
      assertEquals(true, unknownType0.matchesStringContext());
      assertEquals(false, unknownType0.isRecordType());
      assertEquals(true, unknownType0.matchesObjectContext());
      assertEquals("?", unknownType0.toString());
      assertEquals(true, unknownType0.isUnknownType());
      assertEquals(false, unknownType0.isBooleanValueType());
      assertEquals(false, unknownType0.isNoObjectType());
      assertEquals(BooleanLiteralSet.BOTH, unknownType0.getPossibleToBooleanOutcomes());
      assertEquals(false, functionPrototypeType0.isNumberValueType());
      assertEquals(false, functionPrototypeType0.isVoidType());
      assertEquals(false, functionPrototypeType0.isResolved());
      assertEquals(false, functionPrototypeType0.isNoType());
      assertEquals(false, functionPrototypeType0.isUnionType());
      assertEquals(false, functionPrototypeType0.isFunctionType());
      assertEquals(false, functionPrototypeType0.isEmptyType());
      assertEquals(false, functionPrototypeType0.isBooleanValueType());
      assertEquals(false, functionPrototypeType0.isTemplateType());
      assertEquals(false, functionPrototypeType0.isNoObjectType());
      assertEquals(true, functionPrototypeType0.isFunctionPrototypeType());
      assertEquals(false, functionPrototypeType0.isStringValueType());
      assertEquals(false, functionPrototypeType0.isNullType());
      assertEquals(BooleanLiteralSet.TRUE, functionPrototypeType0.getPossibleToBooleanOutcomes());
      assertEquals(true, functionPrototypeType0.hasReferenceName());
      assertEquals(false, functionPrototypeType0.isRecordType());
      assertEquals(false, functionPrototypeType0.isAllType());
      assertEquals(false, errorFunctionType0.isTemplateType());
      assertEquals(true, errorFunctionType0.canBeCalled());
      assertEquals(true, errorFunctionType0.isFunctionType());
      assertEquals(true, errorFunctionType0.isConstructor());
      assertEquals(false, errorFunctionType0.isNullType());
      assertEquals(false, errorFunctionType0.isVoidType());
      assertEquals(false, errorFunctionType0.isRecordType());
      assertEquals(false, errorFunctionType0.isEmptyType());
      assertEquals(false, errorFunctionType0.isNumberValueType());
      assertEquals(false, errorFunctionType0.isUnionType());
      assertEquals(false, errorFunctionType0.isResolved());
      assertEquals(false, errorFunctionType0.isStringValueType());
      assertEquals(false, errorFunctionType0.isInterface());
      assertEquals(false, errorFunctionType0.isAllType());
      assertEquals(false, errorFunctionType0.isReturnTypeInferred());
      assertEquals(true, errorFunctionType0.hasInstanceType());
      assertEquals(false, errorFunctionType0.isBooleanValueType());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      assertEquals(false, errorFunctionType0.isNoType());
      assertEquals(false, errorFunctionType0.isNoObjectType());
      assertEquals(3, errorFunctionType0.getMaxArguments());
      assertNull(errorFunctionType0.getTemplateTypeName());
      assertEquals(false, errorFunctionType0.hasCachedValues());
      assertNotNull(unknownType0);
  }

  @Test
  public void test23()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      boolean boolean0 = true;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0, boolean0);
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      String string0 = "(1{A~Iy!0^ea2i";
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, string0);
      assertEquals(false, errorFunctionType0.isStringValueType());
      assertNull(errorFunctionType0.getTemplateTypeName());
      assertEquals(false, errorFunctionType0.isBooleanValueType());
      assertEquals(true, errorFunctionType0.isConstructor());
      assertEquals(false, errorFunctionType0.isNoType());
      assertEquals(false, errorFunctionType0.isNullType());
      assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      assertEquals(false, errorFunctionType0.isNoObjectType());
      assertEquals(false, errorFunctionType0.isRecordType());
      assertEquals(true, errorFunctionType0.canBeCalled());
      assertEquals(true, errorFunctionType0.isFunctionType());
      assertEquals(false, errorFunctionType0.isTemplateType());
      assertEquals(true, errorFunctionType0.hasInstanceType());
      assertEquals(false, errorFunctionType0.isResolved());
      assertEquals(false, errorFunctionType0.isInterface());
      assertEquals(false, errorFunctionType0.isVoidType());
      assertEquals(false, errorFunctionType0.isReturnTypeInferred());
      assertEquals(false, errorFunctionType0.isNumberValueType());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, errorFunctionType0.isEmptyType());
      assertEquals(3, errorFunctionType0.getMaxArguments());
      assertEquals(false, errorFunctionType0.isAllType());
      assertEquals(false, errorFunctionType0.hasCachedValues());
      assertEquals(false, errorFunctionType0.isUnionType());
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(errorFunctionType0);
      
      EnumType enumType0 = new EnumType(jSTypeRegistry0, string0, errorFunctionType0);
      assertEquals(false, errorFunctionType0.isStringValueType());
      assertNull(errorFunctionType0.getTemplateTypeName());
      assertEquals(false, errorFunctionType0.isBooleanValueType());
      assertEquals(true, errorFunctionType0.isConstructor());
      assertEquals(false, errorFunctionType0.isNoType());
      assertEquals(false, errorFunctionType0.isNullType());
      assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      assertEquals(false, errorFunctionType0.isNoObjectType());
      assertEquals(false, errorFunctionType0.isRecordType());
      assertEquals(true, errorFunctionType0.canBeCalled());
      assertEquals(true, errorFunctionType0.isFunctionType());
      assertEquals(false, errorFunctionType0.isTemplateType());
      assertEquals(true, errorFunctionType0.hasInstanceType());
      assertEquals(false, errorFunctionType0.isResolved());
      assertEquals(false, errorFunctionType0.isInterface());
      assertEquals(false, errorFunctionType0.isVoidType());
      assertEquals(false, errorFunctionType0.isReturnTypeInferred());
      assertEquals(false, errorFunctionType0.isNumberValueType());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, errorFunctionType0.isEmptyType());
      assertEquals(3, errorFunctionType0.getMaxArguments());
      assertEquals(false, errorFunctionType0.isAllType());
      assertEquals(false, errorFunctionType0.hasCachedValues());
      assertEquals(false, errorFunctionType0.isUnionType());
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, enumType0.isEmptyType());
      assertEquals(false, enumType0.isNullType());
      assertEquals(false, enumType0.isTemplateType());
      assertEquals(false, enumType0.isResolved());
      assertEquals(false, enumType0.matchesNumberContext());
      assertEquals(true, enumType0.matchesObjectContext());
      assertEquals(false, enumType0.isBooleanValueType());
      assertEquals(false, enumType0.isAllType());
      assertEquals(BooleanLiteralSet.TRUE, enumType0.getPossibleToBooleanOutcomes());
      assertEquals(false, enumType0.isRecordType());
      assertEquals(false, enumType0.isUnionType());
      assertEquals(true, enumType0.isEnumType());
      assertEquals(false, enumType0.isVoidType());
      assertEquals(true, enumType0.matchesStringContext());
      assertEquals(false, enumType0.isNumberValueType());
      assertEquals(false, enumType0.isStringValueType());
      assertEquals(false, enumType0.isNoObjectType());
      assertEquals(false, enumType0.isFunctionType());
      assertEquals(false, enumType0.isNoType());
      assertNotNull(enumType0);
      
      JSType jSType0 = enumType0.getIndexType();
      assertEquals(false, errorFunctionType0.isStringValueType());
      assertNull(errorFunctionType0.getTemplateTypeName());
      assertEquals(false, errorFunctionType0.isBooleanValueType());
      assertEquals(true, errorFunctionType0.isConstructor());
      assertEquals(false, errorFunctionType0.isNoType());
      assertEquals(false, errorFunctionType0.isNullType());
      assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      assertEquals(false, errorFunctionType0.isNoObjectType());
      assertEquals(false, errorFunctionType0.isRecordType());
      assertEquals(true, errorFunctionType0.canBeCalled());
      assertEquals(true, errorFunctionType0.isFunctionType());
      assertEquals(false, errorFunctionType0.isTemplateType());
      assertEquals(true, errorFunctionType0.hasInstanceType());
      assertEquals(false, errorFunctionType0.isResolved());
      assertEquals(false, errorFunctionType0.isInterface());
      assertEquals(false, errorFunctionType0.isVoidType());
      assertEquals(false, errorFunctionType0.isReturnTypeInferred());
      assertEquals(false, errorFunctionType0.isNumberValueType());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, errorFunctionType0.isEmptyType());
      assertEquals(3, errorFunctionType0.getMaxArguments());
      assertEquals(false, errorFunctionType0.isAllType());
      assertEquals(false, errorFunctionType0.hasCachedValues());
      assertEquals(false, errorFunctionType0.isUnionType());
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, enumType0.isEmptyType());
      assertEquals(false, enumType0.isNullType());
      assertEquals(false, enumType0.isTemplateType());
      assertEquals(false, enumType0.isResolved());
      assertEquals(false, enumType0.matchesNumberContext());
      assertEquals(true, enumType0.matchesObjectContext());
      assertEquals(false, enumType0.isBooleanValueType());
      assertEquals(false, enumType0.isAllType());
      assertEquals(BooleanLiteralSet.TRUE, enumType0.getPossibleToBooleanOutcomes());
      assertEquals(false, enumType0.isRecordType());
      assertEquals(false, enumType0.isUnionType());
      assertEquals(true, enumType0.isEnumType());
      assertEquals(false, enumType0.isVoidType());
      assertEquals(true, enumType0.matchesStringContext());
      assertEquals(false, enumType0.isNumberValueType());
      assertEquals(false, enumType0.isStringValueType());
      assertEquals(false, enumType0.isNoObjectType());
      assertEquals(false, enumType0.isFunctionType());
      assertEquals(false, enumType0.isNoType());
      assertNull(jSType0);
  }
}
