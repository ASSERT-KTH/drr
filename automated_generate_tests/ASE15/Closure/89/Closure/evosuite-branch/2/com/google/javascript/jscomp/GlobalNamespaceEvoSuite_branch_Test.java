/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 23:18:48 GMT 2014
 */

package com.google.javascript.jscomp;

import static org.junit.Assert.*; import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.junit.Test;
import com.google.javascript.jscomp.AbstractCompiler;
import com.google.javascript.jscomp.Compiler;
import com.google.javascript.jscomp.CompilerOptions;
import com.google.javascript.jscomp.DefaultPassConfig;
import com.google.javascript.jscomp.ErrorManager;
import com.google.javascript.jscomp.GlobalNamespace;
import com.google.javascript.jscomp.LoggerErrorManager;
import com.google.javascript.jscomp.NodeTraversal;
import com.google.javascript.jscomp.PassConfig;
import com.google.javascript.jscomp.Scope;
import com.google.javascript.jscomp.ScopeCreator;
import com.google.javascript.jscomp.SimpleFunctionAliasAnalysis;
import com.google.javascript.jscomp.SpecializeModule;
import com.google.javascript.jscomp.SyntacticScopeCreator;
import com.google.javascript.rhino.Node;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.logging.Logger;




import org.evosuite.runtime.mock.java.lang.MockRuntimeException;
import org.junit.runner.RunWith;


public class GlobalNamespaceEvoSuite_branch_Test  {

  @Test
  public void test00()  throws Throwable  {
      GlobalNamespace.Ref.Type globalNamespace_Ref_Type0 = GlobalNamespace.Ref.Type.SET_FROM_LOCAL;
      GlobalNamespace.Ref globalNamespace_Ref0 = GlobalNamespace.Ref.createRefForTesting(globalNamespace_Ref_Type0);
      assertNotNull(globalNamespace_Ref0);
      
      // Undeclared exception!
      try {
        GlobalNamespace.Ref.markTwins(globalNamespace_Ref0, globalNamespace_Ref0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test01()  throws Throwable  {
      GlobalNamespace.Ref.Type globalNamespace_Ref_Type0 = GlobalNamespace.Ref.Type.ALIASING_GET;
      GlobalNamespace.Ref.Type globalNamespace_Ref_Type1 = GlobalNamespace.Ref.Type.SET_FROM_LOCAL;
      assertNotSame(globalNamespace_Ref_Type1, globalNamespace_Ref_Type0);
      
      GlobalNamespace.Ref globalNamespace_Ref0 = GlobalNamespace.Ref.createRefForTesting(globalNamespace_Ref_Type0);
      assertNotNull(globalNamespace_Ref0);
      assertFalse(globalNamespace_Ref_Type0.equals((Object)globalNamespace_Ref_Type1));
      assertNotSame(globalNamespace_Ref_Type0, globalNamespace_Ref_Type1);
      
      GlobalNamespace.Ref globalNamespace_Ref1 = GlobalNamespace.Ref.createRefForTesting(globalNamespace_Ref_Type1);
      assertNotNull(globalNamespace_Ref1);
      assertFalse(globalNamespace_Ref_Type1.equals((Object)globalNamespace_Ref_Type0));
      assertFalse(globalNamespace_Ref1.equals((Object)globalNamespace_Ref0));
      assertNotSame(globalNamespace_Ref_Type1, globalNamespace_Ref_Type0);
      assertNotSame(globalNamespace_Ref1, globalNamespace_Ref0);
      
      GlobalNamespace.Ref.markTwins(globalNamespace_Ref1, globalNamespace_Ref0);
      assertFalse(globalNamespace_Ref_Type1.equals((Object)globalNamespace_Ref_Type0));
      assertFalse(globalNamespace_Ref0.equals((Object)globalNamespace_Ref1));
      assertFalse(globalNamespace_Ref_Type0.equals((Object)globalNamespace_Ref_Type1));
      assertFalse(globalNamespace_Ref1.equals((Object)globalNamespace_Ref0));
      assertNotSame(globalNamespace_Ref_Type1, globalNamespace_Ref_Type0);
      assertNotSame(globalNamespace_Ref0, globalNamespace_Ref1);
      assertNotSame(globalNamespace_Ref_Type0, globalNamespace_Ref_Type1);
      assertNotSame(globalNamespace_Ref1, globalNamespace_Ref0);
  }

  @Test
  public void test02()  throws Throwable  {
      GlobalNamespace.Ref.Type globalNamespace_Ref_Type0 = GlobalNamespace.Ref.Type.ALIASING_GET;
      GlobalNamespace.Ref globalNamespace_Ref0 = GlobalNamespace.Ref.createRefForTesting(globalNamespace_Ref_Type0);
      assertNotNull(globalNamespace_Ref0);
      
      // Undeclared exception!
      try {
        GlobalNamespace.Ref.markTwins(globalNamespace_Ref0, globalNamespace_Ref0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test03()  throws Throwable  {
      GlobalNamespace.Ref.Type globalNamespace_Ref_Type0 = GlobalNamespace.Ref.Type.SET_FROM_LOCAL;
      GlobalNamespace.Ref globalNamespace_Ref0 = GlobalNamespace.Ref.createRefForTesting(globalNamespace_Ref_Type0);
      assertNotNull(globalNamespace_Ref0);
      
      boolean boolean0 = globalNamespace_Ref0.isSet();
      assertTrue(boolean0);
  }

  @Test
  public void test04()  throws Throwable  {
      GlobalNamespace.Ref.Type globalNamespace_Ref_Type0 = GlobalNamespace.Ref.Type.ALIASING_GET;
      GlobalNamespace.Ref globalNamespace_Ref0 = GlobalNamespace.Ref.createRefForTesting(globalNamespace_Ref_Type0);
      assertNotNull(globalNamespace_Ref0);
      
      boolean boolean0 = globalNamespace_Ref0.isSet();
      assertFalse(boolean0);
  }

  @Test
  public void test05()  throws Throwable  {
      GlobalNamespace.Ref.Type globalNamespace_Ref_Type0 = GlobalNamespace.Ref.Type.SET_FROM_GLOBAL;
      GlobalNamespace.Ref globalNamespace_Ref0 = GlobalNamespace.Ref.createRefForTesting(globalNamespace_Ref_Type0);
      assertNotNull(globalNamespace_Ref0);
      
      boolean boolean0 = globalNamespace_Ref0.isSet();
      assertTrue(boolean0);
  }

  @Test
  public void test06()  throws Throwable  {
      String string0 = "constru0ctor";
      GlobalNamespace.Name globalNamespace_Name0 = null;
      boolean boolean0 = false;
      GlobalNamespace.Name globalNamespace_Name1 = new GlobalNamespace.Name(string0, globalNamespace_Name0, boolean0);
      assertNotNull(globalNamespace_Name1);
      
      GlobalNamespace.Name globalNamespace_Name2 = globalNamespace_Name1.addProperty(string0, boolean0);
      assertNotNull(globalNamespace_Name2);
      assertFalse(globalNamespace_Name2.equals((Object)globalNamespace_Name1));
      assertFalse(globalNamespace_Name1.equals((Object)globalNamespace_Name2));
      assertNotSame(globalNamespace_Name2, globalNamespace_Name1);
      assertNotSame(globalNamespace_Name1, globalNamespace_Name2);
      
      String string1 = globalNamespace_Name2.toString();
      assertEquals("constru0ctor.constru0ctor (OTHER): globalSets=0, localSets=0, totalGets=0, aliasingGets=0, callGets=0", string1);
      assertNotNull(string1);
      assertFalse(globalNamespace_Name2.equals((Object)globalNamespace_Name1));
      assertFalse(globalNamespace_Name1.equals((Object)globalNamespace_Name2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertNotSame(globalNamespace_Name2, globalNamespace_Name1);
      assertNotSame(globalNamespace_Name1, globalNamespace_Name2);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
  }

  @Test
  public void test07()  throws Throwable  {
      String string0 = null;
      GlobalNamespace.Name globalNamespace_Name0 = null;
      boolean boolean0 = false;
      GlobalNamespace.Name globalNamespace_Name1 = new GlobalNamespace.Name(string0, globalNamespace_Name0, boolean0);
      assertNotNull(globalNamespace_Name1);
      
      boolean boolean1 = globalNamespace_Name1.isSimpleName();
      assertTrue(boolean1);
      assertFalse(boolean0 == boolean1);
      assertFalse(boolean1 == boolean0);
  }

  @Test
  public void test08()  throws Throwable  {
      String string0 = "consructor";
      GlobalNamespace.Name globalNamespace_Name0 = null;
      boolean boolean0 = true;
      GlobalNamespace.Name globalNamespace_Name1 = new GlobalNamespace.Name(string0, globalNamespace_Name0, boolean0);
      assertNotNull(globalNamespace_Name1);
      
      GlobalNamespace.Name globalNamespace_Name2 = globalNamespace_Name1.addProperty(string0, boolean0);
      assertNotNull(globalNamespace_Name2);
      assertFalse(globalNamespace_Name2.equals((Object)globalNamespace_Name1));
      assertFalse(globalNamespace_Name1.equals((Object)globalNamespace_Name2));
      assertNotSame(globalNamespace_Name2, globalNamespace_Name1);
      assertNotSame(globalNamespace_Name1, globalNamespace_Name2);
      
      boolean boolean1 = globalNamespace_Name2.isSimpleName();
      assertFalse(boolean1);
      assertFalse(globalNamespace_Name2.equals((Object)globalNamespace_Name1));
      assertFalse(globalNamespace_Name1.equals((Object)globalNamespace_Name2));
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean0 == boolean1);
      assertNotSame(globalNamespace_Name2, globalNamespace_Name1);
      assertNotSame(globalNamespace_Name1, globalNamespace_Name2);
  }

  @Test
  public void test09()  throws Throwable  {
      String string0 = "consructor";
      GlobalNamespace.Name globalNamespace_Name0 = null;
      boolean boolean0 = true;
      GlobalNamespace.Name globalNamespace_Name1 = new GlobalNamespace.Name(string0, globalNamespace_Name0, boolean0);
      assertNotNull(globalNamespace_Name1);
      
      GlobalNamespace.Name globalNamespace_Name2 = globalNamespace_Name1.addProperty(string0, boolean0);
      assertNotNull(globalNamespace_Name2);
      assertFalse(globalNamespace_Name2.equals((Object)globalNamespace_Name1));
      assertFalse(globalNamespace_Name1.equals((Object)globalNamespace_Name2));
      assertNotSame(globalNamespace_Name2, globalNamespace_Name1);
      assertNotSame(globalNamespace_Name1, globalNamespace_Name2);
      
      globalNamespace_Name2.setIsClassOrEnum();
      assertFalse(globalNamespace_Name2.equals((Object)globalNamespace_Name1));
      assertFalse(globalNamespace_Name1.equals((Object)globalNamespace_Name2));
      assertNotSame(globalNamespace_Name2, globalNamespace_Name1);
      assertNotSame(globalNamespace_Name1, globalNamespace_Name2);
      
      boolean boolean1 = globalNamespace_Name1.isNamespace();
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean0 == boolean1);
      assertFalse(globalNamespace_Name1.equals((Object)globalNamespace_Name2));
      assertNotSame(globalNamespace_Name1, globalNamespace_Name2);
  }

  @Test
  public void test10()  throws Throwable  {
      String string0 = "";
      boolean boolean0 = true;
      GlobalNamespace.Name globalNamespace_Name0 = null;
      GlobalNamespace.Name globalNamespace_Name1 = new GlobalNamespace.Name(string0, globalNamespace_Name0, boolean0);
      assertNotNull(globalNamespace_Name1);
      
      boolean boolean1 = globalNamespace_Name1.needsToBeStubbed();
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean0 == boolean1);
  }

  @Test
  public void test11()  throws Throwable  {
      String string0 = "";
      boolean boolean0 = false;
      GlobalNamespace.Name globalNamespace_Name0 = null;
      GlobalNamespace.Name globalNamespace_Name1 = new GlobalNamespace.Name(string0, globalNamespace_Name0, boolean0);
      assertNotNull(globalNamespace_Name1);
      
      GlobalNamespace.Ref.Type globalNamespace_Ref_Type0 = GlobalNamespace.Ref.Type.SET_FROM_GLOBAL;
      GlobalNamespace.Ref globalNamespace_Ref0 = GlobalNamespace.Ref.createRefForTesting(globalNamespace_Ref_Type0);
      assertNotNull(globalNamespace_Ref0);
      
      globalNamespace_Name1.addRef(globalNamespace_Ref0);
      boolean boolean1 = globalNamespace_Name1.needsToBeStubbed();
      assertFalse(boolean1);
      assertTrue(boolean0 == boolean1);
      assertTrue(boolean1 == boolean0);
  }

  @Test
  public void test12()  throws Throwable  {
      String string0 = "consructor";
      GlobalNamespace.Name globalNamespace_Name0 = null;
      boolean boolean0 = true;
      GlobalNamespace.Name globalNamespace_Name1 = new GlobalNamespace.Name(string0, globalNamespace_Name0, boolean0);
      assertNotNull(globalNamespace_Name1);
      
      boolean boolean1 = globalNamespace_Name1.shouldKeepKeys();
      assertFalse(boolean1);
      assertFalse(boolean0 == boolean1);
      assertFalse(boolean1 == boolean0);
  }

  @Test
  public void test13()  throws Throwable  {
      String string0 = "";
      boolean boolean0 = false;
      GlobalNamespace.Name globalNamespace_Name0 = null;
      GlobalNamespace.Name globalNamespace_Name1 = new GlobalNamespace.Name(string0, globalNamespace_Name0, boolean0);
      assertNotNull(globalNamespace_Name1);
      
      globalNamespace_Name1.setIsClassOrEnum();
      GlobalNamespace.Ref.Type globalNamespace_Ref_Type0 = GlobalNamespace.Ref.Type.SET_FROM_GLOBAL;
      GlobalNamespace.Ref globalNamespace_Ref0 = GlobalNamespace.Ref.createRefForTesting(globalNamespace_Ref_Type0);
      assertNotNull(globalNamespace_Ref0);
      
      globalNamespace_Name1.addRef(globalNamespace_Ref0);
      GlobalNamespace.Name.Type globalNamespace_Name_Type0 = GlobalNamespace.Name.Type.OBJECTLIT;
      globalNamespace_Name1.type = globalNamespace_Name_Type0;
      assertEquals("OBJECTLIT", globalNamespace_Name1.type.name());
      assertEquals(0, globalNamespace_Name1.type.ordinal());
      assertEquals("OBJECTLIT", globalNamespace_Name1.type.toString());
      
      boolean boolean1 = globalNamespace_Name1.canEliminate();
      assertTrue(boolean1);
      assertFalse(boolean0 == boolean1);
      assertFalse(boolean1 == boolean0);
  }

  @Test
  public void test14()  throws Throwable  {
      String string0 = "";
      int int0 = 2382;
      GlobalNamespace.Name globalNamespace_Name0 = null;
      boolean boolean0 = false;
      GlobalNamespace.Name globalNamespace_Name1 = new GlobalNamespace.Name(string0, globalNamespace_Name0, boolean0);
      assertNotNull(globalNamespace_Name1);
      
      globalNamespace_Name1.localSets = int0;
      boolean boolean1 = globalNamespace_Name1.canCollapse();
      assertTrue(boolean1);
      assertFalse(boolean0 == boolean1);
      assertFalse(boolean1 == boolean0);
  }

  @Test
  public void test15()  throws Throwable  {
      boolean boolean0 = false;
      String string0 = "CKJy=N_W=Qc2o9";
      GlobalNamespace.Name globalNamespace_Name0 = null;
      GlobalNamespace.Name globalNamespace_Name1 = new GlobalNamespace.Name(string0, globalNamespace_Name0, boolean0);
      assertNotNull(globalNamespace_Name1);
      
      GlobalNamespace.Name globalNamespace_Name2 = globalNamespace_Name1.addProperty(string0, boolean0);
      assertNotNull(globalNamespace_Name2);
      assertFalse(globalNamespace_Name2.equals((Object)globalNamespace_Name1));
      assertFalse(globalNamespace_Name1.equals((Object)globalNamespace_Name2));
      assertNotSame(globalNamespace_Name2, globalNamespace_Name1);
      assertNotSame(globalNamespace_Name1, globalNamespace_Name2);
      
      boolean boolean1 = globalNamespace_Name2.canCollapse();
      assertFalse(boolean1);
      assertFalse(globalNamespace_Name2.equals((Object)globalNamespace_Name1));
      assertTrue(boolean0 == boolean1);
      assertTrue(boolean1 == boolean0);
      assertFalse(globalNamespace_Name1.equals((Object)globalNamespace_Name2));
      assertNotSame(globalNamespace_Name2, globalNamespace_Name1);
      assertNotSame(globalNamespace_Name1, globalNamespace_Name2);
  }

  @Test
  public void test16()  throws Throwable  {
      String string0 = "";
      GlobalNamespace.Name globalNamespace_Name0 = null;
      boolean boolean0 = false;
      GlobalNamespace.Name globalNamespace_Name1 = new GlobalNamespace.Name(string0, globalNamespace_Name0, boolean0);
      assertNotNull(globalNamespace_Name1);
      
      boolean boolean1 = globalNamespace_Name1.canCollapse();
      assertFalse(boolean1);
      assertTrue(boolean0 == boolean1);
      assertTrue(boolean1 == boolean0);
  }

  @Test
  public void test17()  throws Throwable  {
      String string0 = "constructor";
      GlobalNamespace.Name globalNamespace_Name0 = null;
      boolean boolean0 = true;
      GlobalNamespace.Name globalNamespace_Name1 = new GlobalNamespace.Name(string0, globalNamespace_Name0, boolean0);
      assertNotNull(globalNamespace_Name1);
      
      boolean boolean1 = false;
      GlobalNamespace.Name globalNamespace_Name2 = globalNamespace_Name1.addProperty(string0, boolean1);
      assertNotNull(globalNamespace_Name2);
      assertFalse(boolean1 == boolean0);
      assertFalse(globalNamespace_Name1.equals((Object)globalNamespace_Name2));
      assertFalse(boolean0 == boolean1);
      assertFalse(globalNamespace_Name2.equals((Object)globalNamespace_Name1));
      assertNotSame(globalNamespace_Name1, globalNamespace_Name2);
      assertNotSame(globalNamespace_Name2, globalNamespace_Name1);
      
      globalNamespace_Name2.setIsClassOrEnum();
      assertFalse(boolean1 == boolean0);
      assertFalse(globalNamespace_Name1.equals((Object)globalNamespace_Name2));
      assertFalse(boolean0 == boolean1);
      assertFalse(globalNamespace_Name2.equals((Object)globalNamespace_Name1));
      assertNotSame(globalNamespace_Name1, globalNamespace_Name2);
      assertNotSame(globalNamespace_Name2, globalNamespace_Name1);
      
      boolean boolean2 = globalNamespace_Name2.canCollapse();
      assertTrue(boolean2);
      assertFalse(boolean1 == boolean2);
      assertFalse(boolean1 == boolean0);
      assertFalse(globalNamespace_Name1.equals((Object)globalNamespace_Name2));
      assertFalse(boolean0 == boolean1);
      assertTrue(boolean0 == boolean2);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertFalse(globalNamespace_Name2.equals((Object)globalNamespace_Name1));
      assertNotSame(globalNamespace_Name1, globalNamespace_Name2);
      assertNotSame(globalNamespace_Name2, globalNamespace_Name1);
  }

  @Test
  public void test18()  throws Throwable  {
      GlobalNamespace.Name globalNamespace_Name0 = null;
      String string0 = "Z\"3}V>iO>Q;lBWd";
      boolean boolean0 = true;
      GlobalNamespace.Name globalNamespace_Name1 = new GlobalNamespace.Name(string0, globalNamespace_Name0, boolean0);
      assertNotNull(globalNamespace_Name1);
      
      boolean boolean1 = globalNamespace_Name1.canCollapse();
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean0 == boolean1);
  }

  @Test
  public void test19()  throws Throwable  {
      String string0 = "";
      GlobalNamespace.Name globalNamespace_Name0 = null;
      boolean boolean0 = true;
      GlobalNamespace.Name globalNamespace_Name1 = new GlobalNamespace.Name(string0, globalNamespace_Name0, boolean0);
      assertNotNull(globalNamespace_Name1);
      
      boolean boolean1 = globalNamespace_Name1.isNamespace();
      assertFalse(boolean1);
      assertFalse(boolean0 == boolean1);
      assertFalse(boolean1 == boolean0);
      
      GlobalNamespace.Ref.Type globalNamespace_Ref_Type0 = GlobalNamespace.Ref.Type.SET_FROM_GLOBAL;
      GlobalNamespace.Ref globalNamespace_Ref0 = GlobalNamespace.Ref.createRefForTesting(globalNamespace_Ref_Type0);
      assertNotNull(globalNamespace_Ref0);
      
      GlobalNamespace.Name globalNamespace_Name2 = globalNamespace_Name1.addProperty(string0, boolean1);
      assertNotNull(globalNamespace_Name2);
      assertFalse(boolean0 == boolean1);
      assertFalse(boolean1 == boolean0);
      assertFalse(globalNamespace_Name1.equals((Object)globalNamespace_Name2));
      assertFalse(globalNamespace_Name2.equals((Object)globalNamespace_Name1));
      assertNotSame(globalNamespace_Name1, globalNamespace_Name2);
      assertNotSame(globalNamespace_Name2, globalNamespace_Name1);
      
      globalNamespace_Name1.addRef(globalNamespace_Ref0);
      assertFalse(boolean0 == boolean1);
      assertFalse(globalNamespace_Name1.equals((Object)globalNamespace_Name2));
      assertNotSame(globalNamespace_Name1, globalNamespace_Name2);
      
      GlobalNamespace.Name.Type globalNamespace_Name_Type0 = GlobalNamespace.Name.Type.OBJECTLIT;
      globalNamespace_Name1.type = globalNamespace_Name_Type0;
      assertEquals("OBJECTLIT", globalNamespace_Name1.type.name());
      assertEquals("OBJECTLIT", globalNamespace_Name1.type.toString());
      assertEquals(0, globalNamespace_Name1.type.ordinal());
      
      boolean boolean2 = globalNamespace_Name1.canEliminate();
      assertFalse(boolean2);
      assertFalse(boolean0 == boolean2);
      assertFalse(boolean0 == boolean1);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertFalse(globalNamespace_Name1.equals((Object)globalNamespace_Name2));
      assertNotSame(globalNamespace_Name1, globalNamespace_Name2);
  }

  @Test
  public void test20()  throws Throwable  {
      GlobalNamespace.Name globalNamespace_Name0 = null;
      String string0 = "Z\"3}V>iO>Q;lBWd";
      boolean boolean0 = true;
      GlobalNamespace.Name globalNamespace_Name1 = new GlobalNamespace.Name(string0, globalNamespace_Name0, boolean0);
      assertNotNull(globalNamespace_Name1);
      
      boolean boolean1 = globalNamespace_Name1.canEliminate();
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean0 == boolean1);
  }

  @Test
  public void test21()  throws Throwable  {
      String string0 = "constructor";
      GlobalNamespace.Name globalNamespace_Name0 = null;
      boolean boolean0 = true;
      GlobalNamespace.Name globalNamespace_Name1 = new GlobalNamespace.Name(string0, globalNamespace_Name0, boolean0);
      assertNotNull(globalNamespace_Name1);
      
      GlobalNamespace.Ref.Type globalNamespace_Ref_Type0 = GlobalNamespace.Ref.Type.SET_FROM_LOCAL;
      GlobalNamespace.Ref globalNamespace_Ref0 = GlobalNamespace.Ref.createRefForTesting(globalNamespace_Ref_Type0);
      assertNotNull(globalNamespace_Ref0);
      
      globalNamespace_Name1.addRefInternal(globalNamespace_Ref0);
      globalNamespace_Name1.addRef(globalNamespace_Ref0);
  }

  @Test
  public void test22()  throws Throwable  {
      String string0 = "";
      GlobalNamespace.Name globalNamespace_Name0 = null;
      boolean boolean0 = true;
      GlobalNamespace.Name globalNamespace_Name1 = new GlobalNamespace.Name(string0, globalNamespace_Name0, boolean0);
      assertNotNull(globalNamespace_Name1);
      
      GlobalNamespace.Ref.Type globalNamespace_Ref_Type0 = GlobalNamespace.Ref.Type.SET_FROM_GLOBAL;
      GlobalNamespace.Ref globalNamespace_Ref0 = GlobalNamespace.Ref.createRefForTesting(globalNamespace_Ref_Type0);
      assertNotNull(globalNamespace_Ref0);
      
      GlobalNamespace.Ref.Type globalNamespace_Ref_Type1 = GlobalNamespace.Ref.Type.DIRECT_GET;
      assertNotSame(globalNamespace_Ref_Type1, globalNamespace_Ref_Type0);
      
      GlobalNamespace.Ref globalNamespace_Ref1 = globalNamespace_Ref0.cloneAndReclassify(globalNamespace_Ref_Type1);
      assertNotNull(globalNamespace_Ref1);
      assertFalse(globalNamespace_Ref0.equals((Object)globalNamespace_Ref1));
      assertFalse(globalNamespace_Ref1.equals((Object)globalNamespace_Ref0));
      assertFalse(globalNamespace_Ref_Type1.equals((Object)globalNamespace_Ref_Type0));
      assertFalse(globalNamespace_Ref_Type0.equals((Object)globalNamespace_Ref_Type1));
      assertNotSame(globalNamespace_Ref0, globalNamespace_Ref1);
      assertNotSame(globalNamespace_Ref1, globalNamespace_Ref0);
      assertNotSame(globalNamespace_Ref_Type1, globalNamespace_Ref_Type0);
      assertNotSame(globalNamespace_Ref_Type0, globalNamespace_Ref_Type1);
      
      globalNamespace_Name1.addRefInternal(globalNamespace_Ref1);
      assertFalse(globalNamespace_Ref0.equals((Object)globalNamespace_Ref1));
      assertFalse(globalNamespace_Ref1.equals((Object)globalNamespace_Ref0));
      assertFalse(globalNamespace_Ref_Type1.equals((Object)globalNamespace_Ref_Type0));
      assertFalse(globalNamespace_Ref_Type0.equals((Object)globalNamespace_Ref_Type1));
      assertNotSame(globalNamespace_Ref0, globalNamespace_Ref1);
      assertNotSame(globalNamespace_Ref1, globalNamespace_Ref0);
      assertNotSame(globalNamespace_Ref_Type1, globalNamespace_Ref_Type0);
      assertNotSame(globalNamespace_Ref_Type0, globalNamespace_Ref_Type1);
      
      globalNamespace_Name1.removeRef(globalNamespace_Ref1);
      assertFalse(globalNamespace_Ref0.equals((Object)globalNamespace_Ref1));
      assertFalse(globalNamespace_Ref1.equals((Object)globalNamespace_Ref0));
      assertFalse(globalNamespace_Ref_Type1.equals((Object)globalNamespace_Ref_Type0));
      assertFalse(globalNamespace_Ref_Type0.equals((Object)globalNamespace_Ref_Type1));
      assertNotSame(globalNamespace_Ref0, globalNamespace_Ref1);
      assertNotSame(globalNamespace_Ref1, globalNamespace_Ref0);
      assertNotSame(globalNamespace_Ref_Type1, globalNamespace_Ref_Type0);
      assertNotSame(globalNamespace_Ref_Type0, globalNamespace_Ref_Type1);
  }

  @Test
  public void test23()  throws Throwable  {
      String string0 = "consructor";
      GlobalNamespace.Name globalNamespace_Name0 = null;
      boolean boolean0 = true;
      GlobalNamespace.Name globalNamespace_Name1 = new GlobalNamespace.Name(string0, globalNamespace_Name0, boolean0);
      assertNotNull(globalNamespace_Name1);
      
      GlobalNamespace.Ref.Type globalNamespace_Ref_Type0 = GlobalNamespace.Ref.Type.SET_FROM_LOCAL;
      GlobalNamespace.Ref globalNamespace_Ref0 = GlobalNamespace.Ref.createRefForTesting(globalNamespace_Ref_Type0);
      assertNotNull(globalNamespace_Ref0);
      
      globalNamespace_Name1.addRef(globalNamespace_Ref0);
      globalNamespace_Name1.removeRef(globalNamespace_Ref0);
  }

  @Test
  public void test24()  throws Throwable  {
      String string0 = "";
      boolean boolean0 = true;
      GlobalNamespace.Name globalNamespace_Name0 = null;
      GlobalNamespace.Name globalNamespace_Name1 = new GlobalNamespace.Name(string0, globalNamespace_Name0, boolean0);
      assertNotNull(globalNamespace_Name1);
      
      GlobalNamespace.Ref.Type globalNamespace_Ref_Type0 = GlobalNamespace.Ref.Type.PROTOTYPE_GET;
      GlobalNamespace.Ref globalNamespace_Ref0 = GlobalNamespace.Ref.createRefForTesting(globalNamespace_Ref_Type0);
      assertNotNull(globalNamespace_Ref0);
      
      GlobalNamespace.Ref.Type globalNamespace_Ref_Type1 = GlobalNamespace.Ref.Type.SET_FROM_GLOBAL;
      assertNotSame(globalNamespace_Ref_Type1, globalNamespace_Ref_Type0);
      
      GlobalNamespace.Ref globalNamespace_Ref1 = globalNamespace_Ref0.cloneAndReclassify(globalNamespace_Ref_Type1);
      assertNotNull(globalNamespace_Ref1);
      assertFalse(globalNamespace_Ref1.equals((Object)globalNamespace_Ref0));
      assertFalse(globalNamespace_Ref_Type0.equals((Object)globalNamespace_Ref_Type1));
      assertFalse(globalNamespace_Ref0.equals((Object)globalNamespace_Ref1));
      assertFalse(globalNamespace_Ref_Type1.equals((Object)globalNamespace_Ref_Type0));
      assertNotSame(globalNamespace_Ref1, globalNamespace_Ref0);
      assertNotSame(globalNamespace_Ref_Type0, globalNamespace_Ref_Type1);
      assertNotSame(globalNamespace_Ref0, globalNamespace_Ref1);
      assertNotSame(globalNamespace_Ref_Type1, globalNamespace_Ref_Type0);
      
      globalNamespace_Name1.addRefInternal(globalNamespace_Ref1);
      assertFalse(globalNamespace_Ref1.equals((Object)globalNamespace_Ref0));
      assertFalse(globalNamespace_Ref_Type0.equals((Object)globalNamespace_Ref_Type1));
      assertFalse(globalNamespace_Ref0.equals((Object)globalNamespace_Ref1));
      assertFalse(globalNamespace_Ref_Type1.equals((Object)globalNamespace_Ref_Type0));
      assertNotSame(globalNamespace_Ref1, globalNamespace_Ref0);
      assertNotSame(globalNamespace_Ref_Type0, globalNamespace_Ref_Type1);
      assertNotSame(globalNamespace_Ref0, globalNamespace_Ref1);
      assertNotSame(globalNamespace_Ref_Type1, globalNamespace_Ref_Type0);
      
      GlobalNamespace.Ref globalNamespace_Ref2 = null;
      // Undeclared exception!
      try {
        globalNamespace_Name1.removeRef(globalNamespace_Ref2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test25()  throws Throwable  {
      String string0 = "s?o%W{&eD(fo+";
      GlobalNamespace.Name globalNamespace_Name0 = null;
      boolean boolean0 = true;
      GlobalNamespace.Name globalNamespace_Name1 = new GlobalNamespace.Name(string0, globalNamespace_Name0, boolean0);
      assertNotNull(globalNamespace_Name1);
      
      GlobalNamespace.Ref.Type globalNamespace_Ref_Type0 = GlobalNamespace.Ref.Type.DIRECT_GET;
      GlobalNamespace.Ref globalNamespace_Ref0 = GlobalNamespace.Ref.createRefForTesting(globalNamespace_Ref_Type0);
      assertNotNull(globalNamespace_Ref0);
      
      globalNamespace_Name1.addRef(globalNamespace_Ref0);
      GlobalNamespace.Ref globalNamespace_Ref1 = null;
      // Undeclared exception!
      try {
        globalNamespace_Name1.removeRef(globalNamespace_Ref1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test26()  throws Throwable  {
      GlobalNamespace.Ref.Type globalNamespace_Ref_Type0 = GlobalNamespace.Ref.Type.CALL_GET;
      GlobalNamespace.Ref globalNamespace_Ref0 = GlobalNamespace.Ref.createRefForTesting(globalNamespace_Ref_Type0);
      assertNotNull(globalNamespace_Ref0);
      
      String string0 = null;
      GlobalNamespace.Name globalNamespace_Name0 = null;
      boolean boolean0 = false;
      GlobalNamespace.Name globalNamespace_Name1 = new GlobalNamespace.Name(string0, globalNamespace_Name0, boolean0);
      assertNotNull(globalNamespace_Name1);
      
      globalNamespace_Name1.addRef(globalNamespace_Ref0);
      GlobalNamespace.Ref globalNamespace_Ref1 = globalNamespace_Ref0.cloneAndReclassify(globalNamespace_Ref_Type0);
      assertNotNull(globalNamespace_Ref1);
      assertFalse(globalNamespace_Ref0.equals((Object)globalNamespace_Ref1));
      assertFalse(globalNamespace_Ref1.equals((Object)globalNamespace_Ref0));
      assertNotSame(globalNamespace_Ref0, globalNamespace_Ref1);
      assertNotSame(globalNamespace_Ref1, globalNamespace_Ref0);
      
      globalNamespace_Name1.removeRef(globalNamespace_Ref1);
      assertFalse(globalNamespace_Ref0.equals((Object)globalNamespace_Ref1));
      assertFalse(globalNamespace_Ref1.equals((Object)globalNamespace_Ref0));
      assertNotSame(globalNamespace_Ref0, globalNamespace_Ref1);
      assertNotSame(globalNamespace_Ref1, globalNamespace_Ref0);
  }

  @Test
  public void test27()  throws Throwable  {
      GlobalNamespace.Ref.Type globalNamespace_Ref_Type0 = GlobalNamespace.Ref.Type.CALL_GET;
      GlobalNamespace.Ref globalNamespace_Ref0 = GlobalNamespace.Ref.createRefForTesting(globalNamespace_Ref_Type0);
      assertNotNull(globalNamespace_Ref0);
      
      String string0 = null;
      GlobalNamespace.Name globalNamespace_Name0 = null;
      boolean boolean0 = false;
      GlobalNamespace.Name globalNamespace_Name1 = new GlobalNamespace.Name(string0, globalNamespace_Name0, boolean0);
      assertNotNull(globalNamespace_Name1);
      
      globalNamespace_Name1.addRef(globalNamespace_Ref0);
      globalNamespace_Name1.removeRef(globalNamespace_Ref0);
  }

  @Test
  public void test28()  throws Throwable  {
      GlobalNamespace.Name globalNamespace_Name0 = null;
      GlobalNamespace.Ref.Type globalNamespace_Ref_Type0 = GlobalNamespace.Ref.Type.SET_FROM_GLOBAL;
      GlobalNamespace.Ref globalNamespace_Ref0 = GlobalNamespace.Ref.createRefForTesting(globalNamespace_Ref_Type0);
      assertNotNull(globalNamespace_Ref0);
      
      String string0 = "Z\"3}V>iO>Q;lBWd";
      boolean boolean0 = true;
      GlobalNamespace.Name globalNamespace_Name1 = new GlobalNamespace.Name(string0, globalNamespace_Name0, boolean0);
      assertNotNull(globalNamespace_Name1);
      
      globalNamespace_Name1.removeRef(globalNamespace_Ref0);
  }

  @Test
  public void test29()  throws Throwable  {
      String string0 = "constru0ctor";
      GlobalNamespace.Name globalNamespace_Name0 = null;
      boolean boolean0 = false;
      GlobalNamespace.Name globalNamespace_Name1 = new GlobalNamespace.Name(string0, globalNamespace_Name0, boolean0);
      assertNotNull(globalNamespace_Name1);
      
      GlobalNamespace.Ref.Type globalNamespace_Ref_Type0 = GlobalNamespace.Ref.Type.SET_FROM_GLOBAL;
      GlobalNamespace.Ref globalNamespace_Ref0 = GlobalNamespace.Ref.createRefForTesting(globalNamespace_Ref_Type0);
      assertNotNull(globalNamespace_Ref0);
      
      globalNamespace_Name1.addRef(globalNamespace_Ref0);
      globalNamespace_Name1.removeRef(globalNamespace_Ref0);
  }

  @Test
  public void test30()  throws Throwable  {
      String string0 = "consructor";
      GlobalNamespace.Name globalNamespace_Name0 = null;
      boolean boolean0 = true;
      GlobalNamespace.Name globalNamespace_Name1 = new GlobalNamespace.Name(string0, globalNamespace_Name0, boolean0);
      assertNotNull(globalNamespace_Name1);
      
      GlobalNamespace.Name globalNamespace_Name2 = globalNamespace_Name1.addProperty(string0, boolean0);
      assertNotNull(globalNamespace_Name2);
      assertFalse(globalNamespace_Name1.equals((Object)globalNamespace_Name2));
      assertFalse(globalNamespace_Name2.equals((Object)globalNamespace_Name1));
      assertNotSame(globalNamespace_Name1, globalNamespace_Name2);
      assertNotSame(globalNamespace_Name2, globalNamespace_Name1);
      
      GlobalNamespace.Name globalNamespace_Name3 = globalNamespace_Name1.addProperty(string0, boolean0);
      assertNotNull(globalNamespace_Name3);
      assertFalse(globalNamespace_Name1.equals((Object)globalNamespace_Name2));
      assertFalse(globalNamespace_Name1.equals((Object)globalNamespace_Name3));
      assertFalse(globalNamespace_Name3.equals((Object)globalNamespace_Name2));
      assertFalse(globalNamespace_Name3.equals((Object)globalNamespace_Name1));
      assertNotSame(globalNamespace_Name1, globalNamespace_Name2);
      assertNotSame(globalNamespace_Name1, globalNamespace_Name3);
      assertNotSame(globalNamespace_Name3, globalNamespace_Name2);
      assertNotSame(globalNamespace_Name3, globalNamespace_Name1);
  }

  @Test
  public void test31()  throws Throwable  {
      String string0 = null;
      Logger logger0 = Logger.getAnonymousLogger(string0);
      assertNotNull(logger0);
      assertEquals(true, logger0.getUseParentHandlers());
      assertNull(logger0.getResourceBundleName());
      assertNull(logger0.getName());
      
      LoggerErrorManager loggerErrorManager0 = new LoggerErrorManager(logger0);
      assertNotNull(loggerErrorManager0);
      assertEquals(true, logger0.getUseParentHandlers());
      assertNull(logger0.getResourceBundleName());
      assertNull(logger0.getName());
      assertEquals(0, loggerErrorManager0.getErrorCount());
      assertEquals(0.0, loggerErrorManager0.getTypedPercent(), 0.01D);
      assertEquals(0, loggerErrorManager0.getWarningCount());
      
      Compiler compiler0 = new Compiler((ErrorManager) loggerErrorManager0);
      assertNotNull(compiler0);
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(true, logger0.getUseParentHandlers());
      assertNull(logger0.getResourceBundleName());
      assertNull(logger0.getName());
      assertEquals(0, loggerErrorManager0.getErrorCount());
      assertEquals(0.0, loggerErrorManager0.getTypedPercent(), 0.01D);
      assertEquals(0, loggerErrorManager0.getWarningCount());
      
      int int0 = (-1513);
      String string1 = "K";
      Node node0 = Node.newString(int0, string1, int0, int0);
      assertNotNull(node0);
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(0, node0.getChildCount());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.hasChildren());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(-1513, node0.getType());
      assertEquals(false, node0.isOptionalArg());
      
      Node node1 = new Node(int0, node0, node0);
      assertNotNull(node1);
      assertEquals(false, node1.hasMoreThanOneChild());
      assertEquals(false, node1.isQualifiedName());
      assertEquals(-1, node1.getCharno());
      assertEquals(false, node1.isQuotedString());
      assertEquals(false, node1.isNoSideEffectsCall());
      assertEquals(false, node1.isSyntheticBlock());
      assertEquals(false, node1.isVarArgs());
      assertEquals(1, node1.getChildCount());
      assertEquals(0, node1.getSideEffectFlags());
      assertEquals(false, node1.isLocalResultCall());
      assertEquals(-1513, node1.getType());
      assertEquals(true, node1.hasChildren());
      assertEquals(true, node1.hasOneChild());
      assertEquals(false, node1.isUnscopedQualifiedName());
      assertEquals(false, node1.isOnlyModifiesThisCall());
      assertEquals(-1, node1.getLineno());
      assertEquals(false, node1.wasEmptyNode());
      assertEquals(false, node1.isOptionalArg());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(0, node0.getChildCount());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.hasChildren());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(-1513, node0.getType());
      assertEquals(false, node0.isOptionalArg());
      assertFalse(node1.equals((Object)node0));
      assertFalse(node0.equals((Object)node1));
      assertNotSame(node1, node0);
      assertNotSame(node0, node1);
      
      GlobalNamespace globalNamespace0 = new GlobalNamespace(compiler0, node1, node0);
      assertNotNull(globalNamespace0);
      assertEquals(false, node1.hasMoreThanOneChild());
      assertEquals(false, node1.isQualifiedName());
      assertEquals(-1, node1.getCharno());
      assertEquals(false, node1.isQuotedString());
      assertEquals(false, node1.isNoSideEffectsCall());
      assertEquals(false, node1.isSyntheticBlock());
      assertEquals(false, node1.isVarArgs());
      assertEquals(1, node1.getChildCount());
      assertEquals(0, node1.getSideEffectFlags());
      assertEquals(false, node1.isLocalResultCall());
      assertEquals(-1513, node1.getType());
      assertEquals(true, node1.hasChildren());
      assertEquals(true, node1.hasOneChild());
      assertEquals(false, node1.isUnscopedQualifiedName());
      assertEquals(false, node1.isOnlyModifiesThisCall());
      assertEquals(-1, node1.getLineno());
      assertEquals(false, node1.wasEmptyNode());
      assertEquals(false, node1.isOptionalArg());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(true, logger0.getUseParentHandlers());
      assertNull(logger0.getResourceBundleName());
      assertNull(logger0.getName());
      assertEquals(0, loggerErrorManager0.getErrorCount());
      assertEquals(0.0, loggerErrorManager0.getTypedPercent(), 0.01D);
      assertEquals(0, loggerErrorManager0.getWarningCount());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(0, node0.getChildCount());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.hasChildren());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(-1513, node0.getType());
      assertEquals(false, node0.isOptionalArg());
      assertFalse(node1.equals((Object)node0));
      assertFalse(node0.equals((Object)node1));
      assertNotSame(node1, node0);
      assertNotSame(node0, node1);
      
      // Undeclared exception!
      try {
        Map<String, GlobalNamespace.Name> map0 = globalNamespace0.getNameIndex();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // INTERNAL COMPILER ERROR.
         // Please report this problem.
         // null
         //
      }
  }

  @Test
  public void test32()  throws Throwable  {
      AbstractCompiler abstractCompiler0 = null;
      double double0 = 2.147483647E9;
      int int0 = 0;
      Node node0 = Node.newNumber(double0, int0, int0);
      assertNotNull(node0);
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(0, node0.getLineno());
      assertEquals(false, node0.isQuotedString());
      assertEquals(39, node0.getType());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(0, node0.getChildCount());
      assertEquals(0, node0.getCharno());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.hasMoreThanOneChild());
      
      GlobalNamespace globalNamespace0 = new GlobalNamespace(abstractCompiler0, node0);
      assertNotNull(globalNamespace0);
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(0, node0.getLineno());
      assertEquals(false, node0.isQuotedString());
      assertEquals(39, node0.getType());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(0, node0.getChildCount());
      assertEquals(0, node0.getCharno());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.hasMoreThanOneChild());
      
      Map<String, GlobalNamespace.Name> map0 = globalNamespace0.getNameIndex();
      assertNotNull(map0);
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(0, node0.getLineno());
      assertEquals(false, node0.isQuotedString());
      assertEquals(39, node0.getType());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(0, node0.getChildCount());
      assertEquals(0, node0.getCharno());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(0, map0.size());
      assertEquals(true, map0.isEmpty());
      
      Map<String, GlobalNamespace.Name> map1 = globalNamespace0.getNameIndex();
      assertNotNull(map1);
      assertEquals(true, map1.isEmpty());
      assertEquals(0, map1.size());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(0, node0.getLineno());
      assertEquals(false, node0.isQuotedString());
      assertEquals(39, node0.getType());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(0, node0.getChildCount());
      assertEquals(0, node0.getCharno());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertSame(map1, map0);
  }

  @Test
  public void test33()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      assertNotNull(compiler0);
      
      String string0 = "";
      int int0 = (-20);
      Node node0 = Node.newString(string0, int0, int0);
      assertNotNull(node0);
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(-1, node0.getLineno());
      assertEquals(40, node0.getType());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.hasChildren());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(0, node0.getChildCount());
      
      GlobalNamespace globalNamespace0 = new GlobalNamespace(compiler0, node0);
      assertNotNull(globalNamespace0);
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(-1, node0.getLineno());
      assertEquals(40, node0.getType());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.hasChildren());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(0, node0.getChildCount());
      
      List<GlobalNamespace.Name> list0 = globalNamespace0.getNameForest();
      assertNotNull(list0);
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(-1, node0.getLineno());
      assertEquals(40, node0.getType());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.hasChildren());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(0, node0.getChildCount());
      assertEquals(0, list0.size());
      assertEquals(true, list0.isEmpty());
      
      List<GlobalNamespace.Name> list1 = globalNamespace0.getNameForest();
      assertNotNull(list1);
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(-1, node0.getLineno());
      assertEquals(40, node0.getType());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.hasChildren());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(0, node0.getChildCount());
      assertEquals(0, list1.size());
      assertEquals(true, list1.isEmpty());
      assertSame(list1, list0);
  }

  @Test
  public void test34()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      assertNotNull(compiler0);
      
      NodeTraversal.Callback nodeTraversal_Callback0 = null;
      SyntacticScopeCreator syntacticScopeCreator0 = new SyntacticScopeCreator(compiler0);
      assertNotNull(syntacticScopeCreator0);
      
      NodeTraversal nodeTraversal0 = new NodeTraversal((AbstractCompiler) compiler0, nodeTraversal_Callback0, (ScopeCreator) syntacticScopeCreator0);
      assertNotNull(nodeTraversal0);
      assertEquals(0, nodeTraversal0.getLineNumber());
      assertEquals("", nodeTraversal0.getSourceName());
      
      Node node0 = null;
      GlobalNamespace.Ref.Type globalNamespace_Ref_Type0 = GlobalNamespace.Ref.Type.CALL_GET;
      GlobalNamespace.Ref globalNamespace_Ref0 = null;
      try {
        globalNamespace_Ref0 = new GlobalNamespace.Ref(nodeTraversal0, node0, globalNamespace_Ref_Type0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test35()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      assertNotNull(compiler0);
      
      Node node0 = null;
      GlobalNamespace globalNamespace0 = new GlobalNamespace(compiler0, node0);
      assertNotNull(globalNamespace0);
      
      CompilerOptions compilerOptions0 = new CompilerOptions();
      assertFalse(compilerOptions0.smartNameRemoval);
      assertFalse(compilerOptions0.markAsCompiled);
      assertFalse(compilerOptions0.crossModuleCodeMotion);
      assertFalse(compilerOptions0.groupVariableDeclarations);
      assertFalse(compilerOptions0.collapseAnonymousFunctions);
      assertFalse(compilerOptions0.decomposeExpressions);
      assertFalse(compilerOptions0.removeUnusedLocalVars);
      assertFalse(compilerOptions0.checkSymbols);
      assertFalse(compilerOptions0.convertToDottedProperties);
      assertFalse(compilerOptions0.gatherCssNames);
      assertFalse(compilerOptions0.strictMessageReplacement);
      assertFalse(compilerOptions0.optimizeArgumentsArray);
      assertFalse(compilerOptions0.removeUnusedVars);
      assertFalse(compilerOptions0.foldConstants);
      assertFalse(compilerOptions0.optimizeReturns);
      assertFalse(compilerOptions0.reserveRawExports);
      assertFalse(compilerOptions0.moveFunctionDeclarations);
      assertFalse(compilerOptions0.collapseProperties);
      assertFalse(compilerOptions0.flowSensitiveInlineVariables);
      assertFalse(compilerOptions0.checkEs5Strict);
      assertFalse(compilerOptions0.ambiguateProperties);
      assertFalse(compilerOptions0.inlineLocalVariables);
      assertFalse(compilerOptions0.ideMode);
      assertFalse(compilerOptions0.coalesceVariableNames);
      assertFalse(compilerOptions0.generatePseudoNames);
      assertFalse(compilerOptions0.removeDeadCode);
      assertFalse(compilerOptions0.tightenTypes);
      assertFalse(compilerOptions0.inlineVariables);
      assertFalse(compilerOptions0.checkTypes);
      assertFalse(compilerOptions0.collapseVariableDeclarations);
      assertFalse(compilerOptions0.removeTryCatchFinally);
      assertFalse(compilerOptions0.removeEmptyFunctions);
      assertFalse(compilerOptions0.checkTypedPropertyCalls);
      assertFalse(compilerOptions0.printInputDelimiter);
      assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
      assertFalse(compilerOptions0.exportTestFunctions);
      assertFalse(compilerOptions0.inlineFunctions);
      assertFalse(compilerOptions0.generateExports);
      assertFalse(compilerOptions0.recordFunctionInformation);
      assertFalse(compilerOptions0.checkDuplicateMessages);
      assertFalse(compilerOptions0.devirtualizePrototypeMethods);
      assertFalse(compilerOptions0.labelRenaming);
      assertFalse(compilerOptions0.computeFunctionSideEffects);
      assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
      assertFalse(compilerOptions0.inlineGetters);
      assertFalse(compilerOptions0.inferTypesInGlobalScope);
      assertFalse(compilerOptions0.checkControlStructures);
      assertFalse(compilerOptions0.aliasAllStrings);
      assertFalse(compilerOptions0.inlineConstantVars);
      assertFalse(compilerOptions0.prettyPrint);
      assertFalse(compilerOptions0.specializeInitialModule);
      assertFalse(compilerOptions0.ignoreCajaProperties);
      assertFalse(compilerOptions0.checkUnusedPropertiesEarly);
      assertFalse(compilerOptions0.disambiguateProperties);
      assertFalse(compilerOptions0.optimizeParameters);
      assertFalse(compilerOptions0.instrumentForCoverage);
      assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
      assertFalse(compilerOptions0.instrumentForCoverageOnly);
      assertFalse(compilerOptions0.closurePass);
      assertFalse(compilerOptions0.inlineLocalFunctions);
      assertFalse(compilerOptions0.rewriteFunctionExpressions);
      assertFalse(compilerOptions0.aliasKeywords);
      assertFalse(compilerOptions0.lineBreak);
      assertFalse(compilerOptions0.allowLegacyJsMessages);
      assertFalse(compilerOptions0.checkCaja);
      assertFalse(compilerOptions0.markNoSideEffectCalls);
      assertFalse(compilerOptions0.inlineAnonymousFunctionExpressions);
      assertFalse(compilerOptions0.deadAssignmentElimination);
      assertFalse(compilerOptions0.aliasExternals);
      assertFalse(compilerOptions0.crossModuleMethodMotion);
      assertFalse(compilerOptions0.checkSuspiciousCode);
      assertNotNull(compilerOptions0);
      assertEquals(false, compilerOptions0.isExternExportsEnabled());
      assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
      
      DefaultPassConfig defaultPassConfig0 = new DefaultPassConfig(compilerOptions0);
      assertFalse(compilerOptions0.smartNameRemoval);
      assertFalse(compilerOptions0.markAsCompiled);
      assertFalse(compilerOptions0.crossModuleCodeMotion);
      assertFalse(compilerOptions0.groupVariableDeclarations);
      assertFalse(compilerOptions0.collapseAnonymousFunctions);
      assertFalse(compilerOptions0.decomposeExpressions);
      assertFalse(compilerOptions0.removeUnusedLocalVars);
      assertFalse(compilerOptions0.checkSymbols);
      assertFalse(compilerOptions0.convertToDottedProperties);
      assertFalse(compilerOptions0.gatherCssNames);
      assertFalse(compilerOptions0.strictMessageReplacement);
      assertFalse(compilerOptions0.optimizeArgumentsArray);
      assertFalse(compilerOptions0.removeUnusedVars);
      assertFalse(compilerOptions0.foldConstants);
      assertFalse(compilerOptions0.optimizeReturns);
      assertFalse(compilerOptions0.reserveRawExports);
      assertFalse(compilerOptions0.moveFunctionDeclarations);
      assertFalse(compilerOptions0.collapseProperties);
      assertFalse(compilerOptions0.flowSensitiveInlineVariables);
      assertFalse(compilerOptions0.checkEs5Strict);
      assertFalse(compilerOptions0.ambiguateProperties);
      assertFalse(compilerOptions0.inlineLocalVariables);
      assertFalse(compilerOptions0.ideMode);
      assertFalse(compilerOptions0.coalesceVariableNames);
      assertFalse(compilerOptions0.generatePseudoNames);
      assertFalse(compilerOptions0.removeDeadCode);
      assertFalse(compilerOptions0.tightenTypes);
      assertFalse(compilerOptions0.inlineVariables);
      assertFalse(compilerOptions0.checkTypes);
      assertFalse(compilerOptions0.collapseVariableDeclarations);
      assertFalse(compilerOptions0.removeTryCatchFinally);
      assertFalse(compilerOptions0.removeEmptyFunctions);
      assertFalse(compilerOptions0.checkTypedPropertyCalls);
      assertFalse(compilerOptions0.printInputDelimiter);
      assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
      assertFalse(compilerOptions0.exportTestFunctions);
      assertFalse(compilerOptions0.inlineFunctions);
      assertFalse(compilerOptions0.generateExports);
      assertFalse(compilerOptions0.recordFunctionInformation);
      assertFalse(compilerOptions0.checkDuplicateMessages);
      assertFalse(compilerOptions0.devirtualizePrototypeMethods);
      assertFalse(compilerOptions0.labelRenaming);
      assertFalse(compilerOptions0.computeFunctionSideEffects);
      assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
      assertFalse(compilerOptions0.inlineGetters);
      assertFalse(compilerOptions0.inferTypesInGlobalScope);
      assertFalse(compilerOptions0.checkControlStructures);
      assertFalse(compilerOptions0.aliasAllStrings);
      assertFalse(compilerOptions0.inlineConstantVars);
      assertFalse(compilerOptions0.prettyPrint);
      assertFalse(compilerOptions0.specializeInitialModule);
      assertFalse(compilerOptions0.ignoreCajaProperties);
      assertFalse(compilerOptions0.checkUnusedPropertiesEarly);
      assertFalse(compilerOptions0.disambiguateProperties);
      assertFalse(compilerOptions0.optimizeParameters);
      assertFalse(compilerOptions0.instrumentForCoverage);
      assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
      assertFalse(compilerOptions0.instrumentForCoverageOnly);
      assertFalse(compilerOptions0.closurePass);
      assertFalse(compilerOptions0.inlineLocalFunctions);
      assertFalse(compilerOptions0.rewriteFunctionExpressions);
      assertFalse(compilerOptions0.aliasKeywords);
      assertFalse(compilerOptions0.lineBreak);
      assertFalse(compilerOptions0.allowLegacyJsMessages);
      assertFalse(compilerOptions0.checkCaja);
      assertFalse(compilerOptions0.markNoSideEffectCalls);
      assertFalse(compilerOptions0.inlineAnonymousFunctionExpressions);
      assertFalse(compilerOptions0.deadAssignmentElimination);
      assertFalse(compilerOptions0.aliasExternals);
      assertFalse(compilerOptions0.crossModuleMethodMotion);
      assertFalse(compilerOptions0.checkSuspiciousCode);
      assertNotNull(defaultPassConfig0);
      assertEquals(false, compilerOptions0.isExternExportsEnabled());
      assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
      
      PassConfig.PassConfigDelegate passConfig_PassConfigDelegate0 = new PassConfig.PassConfigDelegate(defaultPassConfig0);
      assertFalse(compilerOptions0.smartNameRemoval);
      assertFalse(compilerOptions0.markAsCompiled);
      assertFalse(compilerOptions0.crossModuleCodeMotion);
      assertFalse(compilerOptions0.groupVariableDeclarations);
      assertFalse(compilerOptions0.collapseAnonymousFunctions);
      assertFalse(compilerOptions0.decomposeExpressions);
      assertFalse(compilerOptions0.removeUnusedLocalVars);
      assertFalse(compilerOptions0.checkSymbols);
      assertFalse(compilerOptions0.convertToDottedProperties);
      assertFalse(compilerOptions0.gatherCssNames);
      assertFalse(compilerOptions0.strictMessageReplacement);
      assertFalse(compilerOptions0.optimizeArgumentsArray);
      assertFalse(compilerOptions0.removeUnusedVars);
      assertFalse(compilerOptions0.foldConstants);
      assertFalse(compilerOptions0.optimizeReturns);
      assertFalse(compilerOptions0.reserveRawExports);
      assertFalse(compilerOptions0.moveFunctionDeclarations);
      assertFalse(compilerOptions0.collapseProperties);
      assertFalse(compilerOptions0.flowSensitiveInlineVariables);
      assertFalse(compilerOptions0.checkEs5Strict);
      assertFalse(compilerOptions0.ambiguateProperties);
      assertFalse(compilerOptions0.inlineLocalVariables);
      assertFalse(compilerOptions0.ideMode);
      assertFalse(compilerOptions0.coalesceVariableNames);
      assertFalse(compilerOptions0.generatePseudoNames);
      assertFalse(compilerOptions0.removeDeadCode);
      assertFalse(compilerOptions0.tightenTypes);
      assertFalse(compilerOptions0.inlineVariables);
      assertFalse(compilerOptions0.checkTypes);
      assertFalse(compilerOptions0.collapseVariableDeclarations);
      assertFalse(compilerOptions0.removeTryCatchFinally);
      assertFalse(compilerOptions0.removeEmptyFunctions);
      assertFalse(compilerOptions0.checkTypedPropertyCalls);
      assertFalse(compilerOptions0.printInputDelimiter);
      assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
      assertFalse(compilerOptions0.exportTestFunctions);
      assertFalse(compilerOptions0.inlineFunctions);
      assertFalse(compilerOptions0.generateExports);
      assertFalse(compilerOptions0.recordFunctionInformation);
      assertFalse(compilerOptions0.checkDuplicateMessages);
      assertFalse(compilerOptions0.devirtualizePrototypeMethods);
      assertFalse(compilerOptions0.labelRenaming);
      assertFalse(compilerOptions0.computeFunctionSideEffects);
      assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
      assertFalse(compilerOptions0.inlineGetters);
      assertFalse(compilerOptions0.inferTypesInGlobalScope);
      assertFalse(compilerOptions0.checkControlStructures);
      assertFalse(compilerOptions0.aliasAllStrings);
      assertFalse(compilerOptions0.inlineConstantVars);
      assertFalse(compilerOptions0.prettyPrint);
      assertFalse(compilerOptions0.specializeInitialModule);
      assertFalse(compilerOptions0.ignoreCajaProperties);
      assertFalse(compilerOptions0.checkUnusedPropertiesEarly);
      assertFalse(compilerOptions0.disambiguateProperties);
      assertFalse(compilerOptions0.optimizeParameters);
      assertFalse(compilerOptions0.instrumentForCoverage);
      assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
      assertFalse(compilerOptions0.instrumentForCoverageOnly);
      assertFalse(compilerOptions0.closurePass);
      assertFalse(compilerOptions0.inlineLocalFunctions);
      assertFalse(compilerOptions0.rewriteFunctionExpressions);
      assertFalse(compilerOptions0.aliasKeywords);
      assertFalse(compilerOptions0.lineBreak);
      assertFalse(compilerOptions0.allowLegacyJsMessages);
      assertFalse(compilerOptions0.checkCaja);
      assertFalse(compilerOptions0.markNoSideEffectCalls);
      assertFalse(compilerOptions0.inlineAnonymousFunctionExpressions);
      assertFalse(compilerOptions0.deadAssignmentElimination);
      assertFalse(compilerOptions0.aliasExternals);
      assertFalse(compilerOptions0.crossModuleMethodMotion);
      assertFalse(compilerOptions0.checkSuspiciousCode);
      assertNotNull(passConfig_PassConfigDelegate0);
      assertEquals(false, compilerOptions0.isExternExportsEnabled());
      assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
      
      Scope scope0 = passConfig_PassConfigDelegate0.getTopScope();
      assertFalse(compilerOptions0.smartNameRemoval);
      assertFalse(compilerOptions0.markAsCompiled);
      assertFalse(compilerOptions0.crossModuleCodeMotion);
      assertFalse(compilerOptions0.groupVariableDeclarations);
      assertFalse(compilerOptions0.collapseAnonymousFunctions);
      assertFalse(compilerOptions0.decomposeExpressions);
      assertFalse(compilerOptions0.removeUnusedLocalVars);
      assertFalse(compilerOptions0.checkSymbols);
      assertFalse(compilerOptions0.convertToDottedProperties);
      assertFalse(compilerOptions0.gatherCssNames);
      assertFalse(compilerOptions0.strictMessageReplacement);
      assertFalse(compilerOptions0.optimizeArgumentsArray);
      assertFalse(compilerOptions0.removeUnusedVars);
      assertFalse(compilerOptions0.foldConstants);
      assertFalse(compilerOptions0.optimizeReturns);
      assertFalse(compilerOptions0.reserveRawExports);
      assertFalse(compilerOptions0.moveFunctionDeclarations);
      assertFalse(compilerOptions0.collapseProperties);
      assertFalse(compilerOptions0.flowSensitiveInlineVariables);
      assertFalse(compilerOptions0.checkEs5Strict);
      assertFalse(compilerOptions0.ambiguateProperties);
      assertFalse(compilerOptions0.inlineLocalVariables);
      assertFalse(compilerOptions0.ideMode);
      assertFalse(compilerOptions0.coalesceVariableNames);
      assertFalse(compilerOptions0.generatePseudoNames);
      assertFalse(compilerOptions0.removeDeadCode);
      assertFalse(compilerOptions0.tightenTypes);
      assertFalse(compilerOptions0.inlineVariables);
      assertFalse(compilerOptions0.checkTypes);
      assertFalse(compilerOptions0.collapseVariableDeclarations);
      assertFalse(compilerOptions0.removeTryCatchFinally);
      assertFalse(compilerOptions0.removeEmptyFunctions);
      assertFalse(compilerOptions0.checkTypedPropertyCalls);
      assertFalse(compilerOptions0.printInputDelimiter);
      assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
      assertFalse(compilerOptions0.exportTestFunctions);
      assertFalse(compilerOptions0.inlineFunctions);
      assertFalse(compilerOptions0.generateExports);
      assertFalse(compilerOptions0.recordFunctionInformation);
      assertFalse(compilerOptions0.checkDuplicateMessages);
      assertFalse(compilerOptions0.devirtualizePrototypeMethods);
      assertFalse(compilerOptions0.labelRenaming);
      assertFalse(compilerOptions0.computeFunctionSideEffects);
      assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
      assertFalse(compilerOptions0.inlineGetters);
      assertFalse(compilerOptions0.inferTypesInGlobalScope);
      assertFalse(compilerOptions0.checkControlStructures);
      assertFalse(compilerOptions0.aliasAllStrings);
      assertFalse(compilerOptions0.inlineConstantVars);
      assertFalse(compilerOptions0.prettyPrint);
      assertFalse(compilerOptions0.specializeInitialModule);
      assertFalse(compilerOptions0.ignoreCajaProperties);
      assertFalse(compilerOptions0.checkUnusedPropertiesEarly);
      assertFalse(compilerOptions0.disambiguateProperties);
      assertFalse(compilerOptions0.optimizeParameters);
      assertFalse(compilerOptions0.instrumentForCoverage);
      assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
      assertFalse(compilerOptions0.instrumentForCoverageOnly);
      assertFalse(compilerOptions0.closurePass);
      assertFalse(compilerOptions0.inlineLocalFunctions);
      assertFalse(compilerOptions0.rewriteFunctionExpressions);
      assertFalse(compilerOptions0.aliasKeywords);
      assertFalse(compilerOptions0.lineBreak);
      assertFalse(compilerOptions0.allowLegacyJsMessages);
      assertFalse(compilerOptions0.checkCaja);
      assertFalse(compilerOptions0.markNoSideEffectCalls);
      assertFalse(compilerOptions0.inlineAnonymousFunctionExpressions);
      assertFalse(compilerOptions0.deadAssignmentElimination);
      assertFalse(compilerOptions0.aliasExternals);
      assertFalse(compilerOptions0.crossModuleMethodMotion);
      assertFalse(compilerOptions0.checkSuspiciousCode);
      assertNull(scope0);
      assertEquals(false, compilerOptions0.isExternExportsEnabled());
      assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
      
      SimpleFunctionAliasAnalysis simpleFunctionAliasAnalysis0 = new SimpleFunctionAliasAnalysis();
      assertNotNull(simpleFunctionAliasAnalysis0);
      
      SpecializeModule.SpecializationState specializeModule_SpecializationState0 = new SpecializeModule.SpecializationState(simpleFunctionAliasAnalysis0);
      assertNotNull(specializeModule_SpecializationState0);
      
      Set<Node> set0 = specializeModule_SpecializationState0.getRemovedFunctions();
      assertNotNull(set0);
      assertEquals(0, set0.size());
      assertEquals(true, set0.isEmpty());
      
      // Undeclared exception!
      try {
        globalNamespace0.scanNewNodes(scope0, set0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
}
