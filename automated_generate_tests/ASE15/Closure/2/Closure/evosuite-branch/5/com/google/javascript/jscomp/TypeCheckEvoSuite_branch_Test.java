/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 21:44:32 GMT 2014
 */

package com.google.javascript.jscomp;

import static org.junit.Assert.*;
import org.junit.Test;
import com.google.javascript.jscomp.AbstractCompiler;
import com.google.javascript.jscomp.Compiler;
import com.google.javascript.jscomp.CompilerOptions;
import com.google.javascript.jscomp.DefaultPassConfig;
import com.google.javascript.jscomp.ErrorManager;
import com.google.javascript.jscomp.LoggerErrorManager;
import com.google.javascript.jscomp.NodeTraversal;
import com.google.javascript.jscomp.PassConfig;
import com.google.javascript.jscomp.Scope;
import com.google.javascript.jscomp.ScopeCreator;
import com.google.javascript.jscomp.TypeCheck;
import com.google.javascript.jscomp.TypedScopeCreator;
import com.google.javascript.rhino.Node;
import java.util.logging.Logger;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;

import org.evosuite.runtime.mock.java.lang.MockIllegalStateException;
import org.junit.runner.RunWith;


public class TypeCheckEvoSuite_branch_Test  {

  @Test
  public void test0() {}
//   @Test
//   public void test0()  throws Throwable  {
//       Logger logger0 = Logger.getGlobal();
//       assertNull(logger0.getResourceBundleName());
//       assertEquals("global", logger0.getName());
//       assertEquals(false, logger0.getUseParentHandlers());
//       assertNotNull(logger0);
//       
//       LoggerErrorManager loggerErrorManager0 = new LoggerErrorManager(logger0);
//       assertNull(logger0.getResourceBundleName());
//       assertEquals("global", logger0.getName());
//       assertEquals(false, logger0.getUseParentHandlers());
//       assertEquals(0, loggerErrorManager0.getWarningCount());
//       assertEquals(0, loggerErrorManager0.getErrorCount());
//       assertEquals(0.0, loggerErrorManager0.getTypedPercent(), 0.01D);
//       assertNotNull(loggerErrorManager0);
//       
//       Compiler compiler0 = new Compiler((ErrorManager) loggerErrorManager0);
//       assertNull(logger0.getResourceBundleName());
//       assertEquals("global", logger0.getName());
//       assertEquals(false, logger0.getUseParentHandlers());
//       assertEquals(0, compiler0.getWarningCount());
//       assertEquals(0.0, compiler0.getProgress(), 0.01D);
//       assertEquals(0, compiler0.getErrorCount());
//       assertEquals(0, loggerErrorManager0.getWarningCount());
//       assertEquals(0, loggerErrorManager0.getErrorCount());
//       assertEquals(0.0, loggerErrorManager0.getTypedPercent(), 0.01D);
//       assertNotNull(compiler0);
//       
//       CompilerOptions compilerOptions0 = new CompilerOptions();
//       assertFalse(compilerOptions0.markNoSideEffectCalls);
//       assertFalse(compilerOptions0.removeUnusedLocalVars);
//       assertFalse(compilerOptions0.checkSuspiciousCode);
//       assertFalse(compilerOptions0.collapseProperties);
//       assertFalse(compilerOptions0.devirtualizePrototypeMethods);
//       assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
//       assertFalse(compilerOptions0.labelRenaming);
//       assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
//       assertFalse(compilerOptions0.moveFunctionDeclarations);
//       assertFalse(compilerOptions0.inlineConstantVars);
//       assertFalse(compilerOptions0.aliasAllStrings);
//       assertFalse(compilerOptions0.coalesceVariableNames);
//       assertFalse(compilerOptions0.ambiguateProperties);
//       assertFalse(compilerOptions0.deadAssignmentElimination);
//       assertFalse(compilerOptions0.printInputDelimiter);
//       assertFalse(compilerOptions0.crossModuleMethodMotion);
//       assertFalse(compilerOptions0.recordFunctionInformation);
//       assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
//       assertFalse(compilerOptions0.preferLineBreakAtEndOfFile);
//       assertFalse(compilerOptions0.inlineGetters);
//       assertFalse(compilerOptions0.jqueryPass);
//       assertFalse(compilerOptions0.aliasExternals);
//       assertFalse(compilerOptions0.removeDeadCode);
//       assertFalse(compilerOptions0.inlineLocalFunctions);
//       assertFalse(compilerOptions0.prettyPrint);
//       assertFalse(compilerOptions0.ideMode);
//       assertFalse(compilerOptions0.aliasKeywords);
//       assertFalse(compilerOptions0.generateExports);
//       assertFalse(compilerOptions0.optimizeReturns);
//       assertFalse(compilerOptions0.exportTestFunctions);
//       assertFalse(compilerOptions0.inlineVariables);
//       assertFalse(compilerOptions0.smartNameRemoval);
//       assertFalse(compilerOptions0.optimizeArgumentsArray);
//       assertFalse(compilerOptions0.rewriteFunctionExpressions);
//       assertFalse(compilerOptions0.removeTryCatchFinally);
//       assertFalse(compilerOptions0.checkSymbols);
//       assertFalse(compilerOptions0.closurePass);
//       assertFalse(compilerOptions0.checkControlStructures);
//       assertFalse(compilerOptions0.computeFunctionSideEffects);
//       assertFalse(compilerOptions0.collapseVariableDeclarations);
//       assertFalse(compilerOptions0.inlineFunctions);
//       assertFalse(compilerOptions0.removeUnusedClassProperties);
//       assertFalse(compilerOptions0.collapseAnonymousFunctions);
//       assertFalse(compilerOptions0.optimizeCalls);
//       assertFalse(compilerOptions0.reserveRawExports);
//       assertFalse(compilerOptions0.checkTypes);
//       assertFalse(compilerOptions0.gatherCssNames);
//       assertFalse(compilerOptions0.disambiguateProperties);
//       assertFalse(compilerOptions0.optimizeParameters);
//       assertFalse(compilerOptions0.generatePseudoNames);
//       assertFalse(compilerOptions0.convertToDottedProperties);
//       assertFalse(compilerOptions0.flowSensitiveInlineVariables);
//       assertFalse(compilerOptions0.markAsCompiled);
//       assertFalse(compilerOptions0.foldConstants);
//       assertFalse(compilerOptions0.crossModuleCodeMotion);
//       assertFalse(compilerOptions0.lineBreak);
//       assertFalse(compilerOptions0.removeUnusedVars);
//       assertNull(compilerOptions0.getLanguageOut());
//       assertEquals(false, compilerOptions0.getInferTypes());
//       assertEquals(false, compilerOptions0.isRemoveUnusedClassProperties());
//       assertEquals(CompilerOptions.TweakProcessing.OFF, compilerOptions0.getTweakProcessing());
//       assertEquals(false, compilerOptions0.assumeStrictThis());
//       assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
//       assertEquals(false, compilerOptions0.isExternExportsEnabled());
//       assertEquals(CompilerOptions.TracerMode.OFF, compilerOptions0.getTracerMode());
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compilerOptions0.getLanguageIn());
//       assertNotNull(compilerOptions0);
//       
//       compiler0.options = compilerOptions0;
//       assertFalse(compiler0.options.optimizeReturns);
//       assertFalse(compiler0.options.flowSensitiveInlineVariables);
//       assertFalse(compiler0.options.recordFunctionInformation);
//       assertFalse(compiler0.options.jqueryPass);
//       assertFalse(compiler0.options.crossModuleCodeMotion);
//       assertFalse(compiler0.options.removeUnusedPrototypeProperties);
//       assertFalse(compiler0.options.labelRenaming);
//       assertFalse(compiler0.options.inlineConstantVars);
//       assertFalse(compiler0.options.inlineLocalFunctions);
//       assertFalse(compiler0.options.checkSymbols);
//       assertFalse(compiler0.options.inlineVariables);
//       assertFalse(compiler0.options.rewriteFunctionExpressions);
//       assertFalse(compiler0.options.foldConstants);
//       assertFalse(compiler0.options.ideMode);
//       assertFalse(compiler0.options.moveFunctionDeclarations);
//       assertFalse(compiler0.options.aliasExternals);
//       assertFalse(compiler0.options.removeDeadCode);
//       assertFalse(compiler0.options.prettyPrint);
//       assertFalse(compiler0.options.markAsCompiled);
//       assertFalse(compiler0.options.extractPrototypeMemberDeclarations);
//       assertFalse(compiler0.options.gatherCssNames);
//       assertFalse(compiler0.options.removeTryCatchFinally);
//       assertFalse(compiler0.options.computeFunctionSideEffects);
//       assertFalse(compiler0.options.devirtualizePrototypeMethods);
//       assertFalse(compiler0.options.checkControlStructures);
//       assertFalse(compiler0.options.removeUnusedPrototypePropertiesInExterns);
//       assertFalse(compiler0.options.reserveRawExports);
//       assertFalse(compiler0.options.removeUnusedLocalVars);
//       assertFalse(compiler0.options.printInputDelimiter);
//       assertFalse(compiler0.options.aliasAllStrings);
//       assertFalse(compiler0.options.preferLineBreakAtEndOfFile);
//       assertFalse(compiler0.options.smartNameRemoval);
//       assertFalse(compiler0.options.optimizeCalls);
//       assertFalse(compiler0.options.lineBreak);
//       assertFalse(compiler0.options.removeUnusedClassProperties);
//       assertFalse(compiler0.options.inlineGetters);
//       assertFalse(compiler0.options.exportTestFunctions);
//       assertFalse(compiler0.options.markNoSideEffectCalls);
//       assertFalse(compiler0.options.closurePass);
//       assertFalse(compiler0.options.disambiguateProperties);
//       assertFalse(compiler0.options.crossModuleMethodMotion);
//       assertFalse(compiler0.options.convertToDottedProperties);
//       assertFalse(compiler0.options.checkSuspiciousCode);
//       assertFalse(compiler0.options.collapseProperties);
//       assertFalse(compiler0.options.generatePseudoNames);
//       assertFalse(compiler0.options.generateExports);
//       assertFalse(compiler0.options.optimizeArgumentsArray);
//       assertFalse(compiler0.options.collapseAnonymousFunctions);
//       assertFalse(compiler0.options.ambiguateProperties);
//       assertFalse(compiler0.options.aliasKeywords);
//       assertFalse(compiler0.options.optimizeParameters);
//       assertFalse(compiler0.options.coalesceVariableNames);
//       assertFalse(compiler0.options.deadAssignmentElimination);
//       assertFalse(compiler0.options.inlineFunctions);
//       assertFalse(compiler0.options.removeUnusedVars);
//       assertFalse(compiler0.options.checkTypes);
//       assertFalse(compiler0.options.collapseVariableDeclarations);
//       assertFalse(compilerOptions0.markNoSideEffectCalls);
//       assertFalse(compilerOptions0.removeUnusedLocalVars);
//       assertFalse(compilerOptions0.checkSuspiciousCode);
//       assertFalse(compilerOptions0.collapseProperties);
//       assertFalse(compilerOptions0.devirtualizePrototypeMethods);
//       assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
//       assertFalse(compilerOptions0.labelRenaming);
//       assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
//       assertFalse(compilerOptions0.moveFunctionDeclarations);
//       assertFalse(compilerOptions0.inlineConstantVars);
//       assertFalse(compilerOptions0.aliasAllStrings);
//       assertFalse(compilerOptions0.coalesceVariableNames);
//       assertFalse(compilerOptions0.ambiguateProperties);
//       assertFalse(compilerOptions0.deadAssignmentElimination);
//       assertFalse(compilerOptions0.printInputDelimiter);
//       assertFalse(compilerOptions0.crossModuleMethodMotion);
//       assertFalse(compilerOptions0.recordFunctionInformation);
//       assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
//       assertFalse(compilerOptions0.preferLineBreakAtEndOfFile);
//       assertFalse(compilerOptions0.inlineGetters);
//       assertFalse(compilerOptions0.jqueryPass);
//       assertFalse(compilerOptions0.aliasExternals);
//       assertFalse(compilerOptions0.removeDeadCode);
//       assertFalse(compilerOptions0.inlineLocalFunctions);
//       assertFalse(compilerOptions0.prettyPrint);
//       assertFalse(compilerOptions0.ideMode);
//       assertFalse(compilerOptions0.aliasKeywords);
//       assertFalse(compilerOptions0.generateExports);
//       assertFalse(compilerOptions0.optimizeReturns);
//       assertFalse(compilerOptions0.exportTestFunctions);
//       assertFalse(compilerOptions0.inlineVariables);
//       assertFalse(compilerOptions0.smartNameRemoval);
//       assertFalse(compilerOptions0.optimizeArgumentsArray);
//       assertFalse(compilerOptions0.rewriteFunctionExpressions);
//       assertFalse(compilerOptions0.removeTryCatchFinally);
//       assertFalse(compilerOptions0.checkSymbols);
//       assertFalse(compilerOptions0.closurePass);
//       assertFalse(compilerOptions0.checkControlStructures);
//       assertFalse(compilerOptions0.computeFunctionSideEffects);
//       assertFalse(compilerOptions0.collapseVariableDeclarations);
//       assertFalse(compilerOptions0.inlineFunctions);
//       assertFalse(compilerOptions0.removeUnusedClassProperties);
//       assertFalse(compilerOptions0.collapseAnonymousFunctions);
//       assertFalse(compilerOptions0.optimizeCalls);
//       assertFalse(compilerOptions0.reserveRawExports);
//       assertFalse(compilerOptions0.checkTypes);
//       assertFalse(compilerOptions0.gatherCssNames);
//       assertFalse(compilerOptions0.disambiguateProperties);
//       assertFalse(compilerOptions0.optimizeParameters);
//       assertFalse(compilerOptions0.generatePseudoNames);
//       assertFalse(compilerOptions0.convertToDottedProperties);
//       assertFalse(compilerOptions0.flowSensitiveInlineVariables);
//       assertFalse(compilerOptions0.markAsCompiled);
//       assertFalse(compilerOptions0.foldConstants);
//       assertFalse(compilerOptions0.crossModuleCodeMotion);
//       assertFalse(compilerOptions0.lineBreak);
//       assertFalse(compilerOptions0.removeUnusedVars);
//       assertNull(logger0.getResourceBundleName());
//       assertEquals("global", logger0.getName());
//       assertEquals(false, logger0.getUseParentHandlers());
//       assertEquals(0, compiler0.getWarningCount());
//       assertEquals(false, compiler0.hasErrors());
//       assertEquals(0.0, compiler0.getProgress(), 0.01D);
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
//       assertEquals(0, compiler0.getErrorCount());
//       assertEquals(false, compiler0.isTypeCheckingEnabled());
//       assertEquals(false, compiler0.acceptConstKeyword());
//       assertEquals(false, compiler0.isIdeMode());
//       assertEquals(0, loggerErrorManager0.getWarningCount());
//       assertEquals(0, loggerErrorManager0.getErrorCount());
//       assertEquals(0.0, loggerErrorManager0.getTypedPercent(), 0.01D);
//       assertEquals(false, compiler0.options.assumeStrictThis());
//       assertEquals(false, compiler0.options.shouldColorizeErrorOutput());
//       assertEquals(false, compiler0.options.isRemoveUnusedClassProperties());
//       assertEquals(false, compiler0.options.getInferTypes());
//       assertNull(compiler0.options.getLanguageOut());
//       assertEquals(CompilerOptions.TweakProcessing.OFF, compiler0.options.getTweakProcessing());
//       assertEquals(false, compiler0.options.isExternExportsEnabled());
//       assertEquals(CompilerOptions.TracerMode.OFF, compiler0.options.getTracerMode());
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.options.getLanguageIn());
//       assertNull(compilerOptions0.getLanguageOut());
//       assertEquals(false, compilerOptions0.getInferTypes());
//       assertEquals(false, compilerOptions0.isRemoveUnusedClassProperties());
//       assertEquals(CompilerOptions.TweakProcessing.OFF, compilerOptions0.getTweakProcessing());
//       assertEquals(false, compilerOptions0.assumeStrictThis());
//       assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
//       assertEquals(false, compilerOptions0.isExternExportsEnabled());
//       assertEquals(CompilerOptions.TracerMode.OFF, compilerOptions0.getTracerMode());
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compilerOptions0.getLanguageIn());
//       assertNotNull(compiler0.options);
//       
//       DefaultPassConfig defaultPassConfig0 = compiler0.ensureDefaultPassConfig();
//       assertNull(logger0.getResourceBundleName());
//       assertEquals("global", logger0.getName());
//       assertEquals(false, logger0.getUseParentHandlers());
//       assertEquals(0, compiler0.getWarningCount());
//       assertEquals(false, compiler0.hasErrors());
//       assertEquals(0.0, compiler0.getProgress(), 0.01D);
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
//       assertEquals(0, compiler0.getErrorCount());
//       assertEquals(false, compiler0.isTypeCheckingEnabled());
//       assertEquals(false, compiler0.acceptConstKeyword());
//       assertEquals(false, compiler0.isIdeMode());
//       assertEquals(0, loggerErrorManager0.getWarningCount());
//       assertEquals(0, loggerErrorManager0.getErrorCount());
//       assertEquals(0.0, loggerErrorManager0.getTypedPercent(), 0.01D);
//       assertNotNull(defaultPassConfig0);
//       
//       TypeCheck typeCheck0 = defaultPassConfig0.makeTypeCheck(compiler0);
//       assertNull(logger0.getResourceBundleName());
//       assertEquals("global", logger0.getName());
//       assertEquals(false, logger0.getUseParentHandlers());
//       assertEquals(0, compiler0.getWarningCount());
//       assertEquals(false, compiler0.hasErrors());
//       assertEquals(0.0, compiler0.getProgress(), 0.01D);
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
//       assertEquals(0, compiler0.getErrorCount());
//       assertEquals(false, compiler0.isTypeCheckingEnabled());
//       assertEquals(false, compiler0.acceptConstKeyword());
//       assertEquals(false, compiler0.isIdeMode());
//       assertEquals(0, loggerErrorManager0.getWarningCount());
//       assertEquals(0, loggerErrorManager0.getErrorCount());
//       assertEquals(0.0, loggerErrorManager0.getTypedPercent(), 0.01D);
//       assertNotNull(typeCheck0);
//       
//       double double0 = typeCheck0.getTypedPercent();
//       assertEquals(0.0, double0, 0.01D);
//       assertNull(logger0.getResourceBundleName());
//       assertEquals("global", logger0.getName());
//       assertEquals(false, logger0.getUseParentHandlers());
//       assertEquals(0, compiler0.getWarningCount());
//       assertEquals(false, compiler0.hasErrors());
//       assertEquals(0.0, compiler0.getProgress(), 0.01D);
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
//       assertEquals(0, compiler0.getErrorCount());
//       assertEquals(false, compiler0.isTypeCheckingEnabled());
//       assertEquals(false, compiler0.acceptConstKeyword());
//       assertEquals(false, compiler0.isIdeMode());
//       assertEquals(0, loggerErrorManager0.getWarningCount());
//       assertEquals(0, loggerErrorManager0.getErrorCount());
//       assertEquals(0.0, loggerErrorManager0.getTypedPercent(), 0.01D);
//   }

  @Test
  public void test1() {}
//   @Test
//   public void test1()  throws Throwable  {
//       Logger logger0 = Logger.getGlobal();
//       assertEquals(false, logger0.getUseParentHandlers());
//       assertNull(logger0.getResourceBundleName());
//       assertEquals("global", logger0.getName());
//       assertNotNull(logger0);
//       
//       LoggerErrorManager loggerErrorManager0 = new LoggerErrorManager(logger0);
//       assertEquals(0, loggerErrorManager0.getErrorCount());
//       assertEquals(0, loggerErrorManager0.getWarningCount());
//       assertEquals(0.0, loggerErrorManager0.getTypedPercent(), 0.01D);
//       assertEquals(false, logger0.getUseParentHandlers());
//       assertNull(logger0.getResourceBundleName());
//       assertEquals("global", logger0.getName());
//       assertNotNull(loggerErrorManager0);
//       
//       Compiler compiler0 = new Compiler((ErrorManager) loggerErrorManager0);
//       assertEquals(0, compiler0.getWarningCount());
//       assertEquals(0, compiler0.getErrorCount());
//       assertEquals(0.0, compiler0.getProgress(), 0.01D);
//       assertEquals(0, loggerErrorManager0.getErrorCount());
//       assertEquals(0, loggerErrorManager0.getWarningCount());
//       assertEquals(0.0, loggerErrorManager0.getTypedPercent(), 0.01D);
//       assertEquals(false, logger0.getUseParentHandlers());
//       assertNull(logger0.getResourceBundleName());
//       assertEquals("global", logger0.getName());
//       assertNotNull(compiler0);
//       
//       CompilerOptions compilerOptions0 = new CompilerOptions();
//       assertFalse(compilerOptions0.convertToDottedProperties);
//       assertFalse(compilerOptions0.exportTestFunctions);
//       assertFalse(compilerOptions0.ambiguateProperties);
//       assertFalse(compilerOptions0.inlineConstantVars);
//       assertFalse(compilerOptions0.generateExports);
//       assertFalse(compilerOptions0.aliasAllStrings);
//       assertFalse(compilerOptions0.generatePseudoNames);
//       assertFalse(compilerOptions0.deadAssignmentElimination);
//       assertFalse(compilerOptions0.checkTypes);
//       assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
//       assertFalse(compilerOptions0.recordFunctionInformation);
//       assertFalse(compilerOptions0.gatherCssNames);
//       assertFalse(compilerOptions0.collapseVariableDeclarations);
//       assertFalse(compilerOptions0.optimizeArgumentsArray);
//       assertFalse(compilerOptions0.markNoSideEffectCalls);
//       assertFalse(compilerOptions0.collapseProperties);
//       assertFalse(compilerOptions0.moveFunctionDeclarations);
//       assertFalse(compilerOptions0.aliasExternals);
//       assertFalse(compilerOptions0.coalesceVariableNames);
//       assertFalse(compilerOptions0.computeFunctionSideEffects);
//       assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
//       assertFalse(compilerOptions0.ideMode);
//       assertFalse(compilerOptions0.optimizeParameters);
//       assertFalse(compilerOptions0.checkSymbols);
//       assertFalse(compilerOptions0.smartNameRemoval);
//       assertFalse(compilerOptions0.removeUnusedLocalVars);
//       assertFalse(compilerOptions0.labelRenaming);
//       assertFalse(compilerOptions0.reserveRawExports);
//       assertFalse(compilerOptions0.flowSensitiveInlineVariables);
//       assertFalse(compilerOptions0.inlineFunctions);
//       assertFalse(compilerOptions0.preferLineBreakAtEndOfFile);
//       assertFalse(compilerOptions0.disambiguateProperties);
//       assertFalse(compilerOptions0.removeUnusedVars);
//       assertFalse(compilerOptions0.optimizeReturns);
//       assertFalse(compilerOptions0.jqueryPass);
//       assertFalse(compilerOptions0.checkSuspiciousCode);
//       assertFalse(compilerOptions0.removeUnusedClassProperties);
//       assertFalse(compilerOptions0.inlineVariables);
//       assertFalse(compilerOptions0.lineBreak);
//       assertFalse(compilerOptions0.removeDeadCode);
//       assertFalse(compilerOptions0.inlineGetters);
//       assertFalse(compilerOptions0.crossModuleCodeMotion);
//       assertFalse(compilerOptions0.removeTryCatchFinally);
//       assertFalse(compilerOptions0.foldConstants);
//       assertFalse(compilerOptions0.checkControlStructures);
//       assertFalse(compilerOptions0.crossModuleMethodMotion);
//       assertFalse(compilerOptions0.closurePass);
//       assertFalse(compilerOptions0.prettyPrint);
//       assertFalse(compilerOptions0.optimizeCalls);
//       assertFalse(compilerOptions0.rewriteFunctionExpressions);
//       assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
//       assertFalse(compilerOptions0.aliasKeywords);
//       assertFalse(compilerOptions0.collapseAnonymousFunctions);
//       assertFalse(compilerOptions0.devirtualizePrototypeMethods);
//       assertFalse(compilerOptions0.printInputDelimiter);
//       assertFalse(compilerOptions0.inlineLocalFunctions);
//       assertFalse(compilerOptions0.markAsCompiled);
//       assertEquals(false, compilerOptions0.assumeStrictThis());
//       assertEquals(CompilerOptions.TweakProcessing.OFF, compilerOptions0.getTweakProcessing());
//       assertEquals(false, compilerOptions0.isRemoveUnusedClassProperties());
//       assertEquals(false, compilerOptions0.isExternExportsEnabled());
//       assertEquals(false, compilerOptions0.getInferTypes());
//       assertNull(compilerOptions0.getLanguageOut());
//       assertEquals(CompilerOptions.TracerMode.OFF, compilerOptions0.getTracerMode());
//       assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compilerOptions0.getLanguageIn());
//       assertNotNull(compilerOptions0);
//       
//       compiler0.options = compilerOptions0;
//       assertFalse(compilerOptions0.convertToDottedProperties);
//       assertFalse(compilerOptions0.exportTestFunctions);
//       assertFalse(compilerOptions0.ambiguateProperties);
//       assertFalse(compilerOptions0.inlineConstantVars);
//       assertFalse(compilerOptions0.generateExports);
//       assertFalse(compilerOptions0.aliasAllStrings);
//       assertFalse(compilerOptions0.generatePseudoNames);
//       assertFalse(compilerOptions0.deadAssignmentElimination);
//       assertFalse(compilerOptions0.checkTypes);
//       assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
//       assertFalse(compilerOptions0.recordFunctionInformation);
//       assertFalse(compilerOptions0.gatherCssNames);
//       assertFalse(compilerOptions0.collapseVariableDeclarations);
//       assertFalse(compilerOptions0.optimizeArgumentsArray);
//       assertFalse(compilerOptions0.markNoSideEffectCalls);
//       assertFalse(compilerOptions0.collapseProperties);
//       assertFalse(compilerOptions0.moveFunctionDeclarations);
//       assertFalse(compilerOptions0.aliasExternals);
//       assertFalse(compilerOptions0.coalesceVariableNames);
//       assertFalse(compilerOptions0.computeFunctionSideEffects);
//       assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
//       assertFalse(compilerOptions0.ideMode);
//       assertFalse(compilerOptions0.optimizeParameters);
//       assertFalse(compilerOptions0.checkSymbols);
//       assertFalse(compilerOptions0.smartNameRemoval);
//       assertFalse(compilerOptions0.removeUnusedLocalVars);
//       assertFalse(compilerOptions0.labelRenaming);
//       assertFalse(compilerOptions0.reserveRawExports);
//       assertFalse(compilerOptions0.flowSensitiveInlineVariables);
//       assertFalse(compilerOptions0.inlineFunctions);
//       assertFalse(compilerOptions0.preferLineBreakAtEndOfFile);
//       assertFalse(compilerOptions0.disambiguateProperties);
//       assertFalse(compilerOptions0.removeUnusedVars);
//       assertFalse(compilerOptions0.optimizeReturns);
//       assertFalse(compilerOptions0.jqueryPass);
//       assertFalse(compilerOptions0.checkSuspiciousCode);
//       assertFalse(compilerOptions0.removeUnusedClassProperties);
//       assertFalse(compilerOptions0.inlineVariables);
//       assertFalse(compilerOptions0.lineBreak);
//       assertFalse(compilerOptions0.removeDeadCode);
//       assertFalse(compilerOptions0.inlineGetters);
//       assertFalse(compilerOptions0.crossModuleCodeMotion);
//       assertFalse(compilerOptions0.removeTryCatchFinally);
//       assertFalse(compilerOptions0.foldConstants);
//       assertFalse(compilerOptions0.checkControlStructures);
//       assertFalse(compilerOptions0.crossModuleMethodMotion);
//       assertFalse(compilerOptions0.closurePass);
//       assertFalse(compilerOptions0.prettyPrint);
//       assertFalse(compilerOptions0.optimizeCalls);
//       assertFalse(compilerOptions0.rewriteFunctionExpressions);
//       assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
//       assertFalse(compilerOptions0.aliasKeywords);
//       assertFalse(compilerOptions0.collapseAnonymousFunctions);
//       assertFalse(compilerOptions0.devirtualizePrototypeMethods);
//       assertFalse(compilerOptions0.printInputDelimiter);
//       assertFalse(compilerOptions0.inlineLocalFunctions);
//       assertFalse(compilerOptions0.markAsCompiled);
//       assertFalse(compiler0.options.ideMode);
//       assertFalse(compiler0.options.optimizeCalls);
//       assertFalse(compiler0.options.collapseProperties);
//       assertFalse(compiler0.options.checkSuspiciousCode);
//       assertFalse(compiler0.options.checkSymbols);
//       assertFalse(compiler0.options.optimizeArgumentsArray);
//       assertFalse(compiler0.options.devirtualizePrototypeMethods);
//       assertFalse(compiler0.options.generateExports);
//       assertFalse(compiler0.options.flowSensitiveInlineVariables);
//       assertFalse(compiler0.options.crossModuleCodeMotion);
//       assertFalse(compiler0.options.removeUnusedPrototypeProperties);
//       assertFalse(compiler0.options.foldConstants);
//       assertFalse(compiler0.options.checkTypes);
//       assertFalse(compiler0.options.extractPrototypeMemberDeclarations);
//       assertFalse(compiler0.options.optimizeParameters);
//       assertFalse(compiler0.options.removeTryCatchFinally);
//       assertFalse(compiler0.options.removeUnusedVars);
//       assertFalse(compiler0.options.inlineConstantVars);
//       assertFalse(compiler0.options.rewriteFunctionExpressions);
//       assertFalse(compiler0.options.markAsCompiled);
//       assertFalse(compiler0.options.lineBreak);
//       assertFalse(compiler0.options.ambiguateProperties);
//       assertFalse(compiler0.options.removeUnusedLocalVars);
//       assertFalse(compiler0.options.preferLineBreakAtEndOfFile);
//       assertFalse(compiler0.options.inlineGetters);
//       assertFalse(compiler0.options.prettyPrint);
//       assertFalse(compiler0.options.moveFunctionDeclarations);
//       assertFalse(compiler0.options.recordFunctionInformation);
//       assertFalse(compiler0.options.aliasKeywords);
//       assertFalse(compiler0.options.aliasExternals);
//       assertFalse(compiler0.options.jqueryPass);
//       assertFalse(compiler0.options.deadAssignmentElimination);
//       assertFalse(compiler0.options.collapseVariableDeclarations);
//       assertFalse(compiler0.options.printInputDelimiter);
//       assertFalse(compiler0.options.reserveRawExports);
//       assertFalse(compiler0.options.checkControlStructures);
//       assertFalse(compiler0.options.collapseAnonymousFunctions);
//       assertFalse(compiler0.options.inlineFunctions);
//       assertFalse(compiler0.options.inlineLocalFunctions);
//       assertFalse(compiler0.options.generatePseudoNames);
//       assertFalse(compiler0.options.optimizeReturns);
//       assertFalse(compiler0.options.removeDeadCode);
//       assertFalse(compiler0.options.aliasAllStrings);
//       assertFalse(compiler0.options.removeUnusedPrototypePropertiesInExterns);
//       assertFalse(compiler0.options.disambiguateProperties);
//       assertFalse(compiler0.options.labelRenaming);
//       assertFalse(compiler0.options.inlineVariables);
//       assertFalse(compiler0.options.smartNameRemoval);
//       assertFalse(compiler0.options.computeFunctionSideEffects);
//       assertFalse(compiler0.options.crossModuleMethodMotion);
//       assertFalse(compiler0.options.convertToDottedProperties);
//       assertFalse(compiler0.options.markNoSideEffectCalls);
//       assertFalse(compiler0.options.closurePass);
//       assertFalse(compiler0.options.exportTestFunctions);
//       assertFalse(compiler0.options.coalesceVariableNames);
//       assertFalse(compiler0.options.removeUnusedClassProperties);
//       assertFalse(compiler0.options.gatherCssNames);
//       assertEquals(false, compilerOptions0.assumeStrictThis());
//       assertEquals(CompilerOptions.TweakProcessing.OFF, compilerOptions0.getTweakProcessing());
//       assertEquals(false, compilerOptions0.isRemoveUnusedClassProperties());
//       assertEquals(false, compilerOptions0.isExternExportsEnabled());
//       assertEquals(false, compilerOptions0.getInferTypes());
//       assertNull(compilerOptions0.getLanguageOut());
//       assertEquals(CompilerOptions.TracerMode.OFF, compilerOptions0.getTracerMode());
//       assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compilerOptions0.getLanguageIn());
//       assertEquals(false, compiler0.isIdeMode());
//       assertEquals(false, compiler0.hasErrors());
//       assertEquals(0, compiler0.getWarningCount());
//       assertEquals(false, compiler0.isTypeCheckingEnabled());
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
//       assertEquals(0, compiler0.getErrorCount());
//       assertEquals(false, compiler0.acceptConstKeyword());
//       assertEquals(0.0, compiler0.getProgress(), 0.01D);
//       assertNull(compiler0.options.getLanguageOut());
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.options.getLanguageIn());
//       assertEquals(CompilerOptions.TweakProcessing.OFF, compiler0.options.getTweakProcessing());
//       assertEquals(false, compiler0.options.shouldColorizeErrorOutput());
//       assertEquals(CompilerOptions.TracerMode.OFF, compiler0.options.getTracerMode());
//       assertEquals(false, compiler0.options.assumeStrictThis());
//       assertEquals(false, compiler0.options.isRemoveUnusedClassProperties());
//       assertEquals(false, compiler0.options.getInferTypes());
//       assertEquals(false, compiler0.options.isExternExportsEnabled());
//       assertEquals(0, loggerErrorManager0.getErrorCount());
//       assertEquals(0, loggerErrorManager0.getWarningCount());
//       assertEquals(0.0, loggerErrorManager0.getTypedPercent(), 0.01D);
//       assertEquals(false, logger0.getUseParentHandlers());
//       assertNull(logger0.getResourceBundleName());
//       assertEquals("global", logger0.getName());
//       assertNotNull(compiler0.options);
//       
//       DefaultPassConfig defaultPassConfig0 = compiler0.ensureDefaultPassConfig();
//       assertEquals(false, compiler0.isIdeMode());
//       assertEquals(false, compiler0.hasErrors());
//       assertEquals(0, compiler0.getWarningCount());
//       assertEquals(false, compiler0.isTypeCheckingEnabled());
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
//       assertEquals(0, compiler0.getErrorCount());
//       assertEquals(false, compiler0.acceptConstKeyword());
//       assertEquals(0.0, compiler0.getProgress(), 0.01D);
//       assertEquals(0, loggerErrorManager0.getErrorCount());
//       assertEquals(0, loggerErrorManager0.getWarningCount());
//       assertEquals(0.0, loggerErrorManager0.getTypedPercent(), 0.01D);
//       assertEquals(false, logger0.getUseParentHandlers());
//       assertNull(logger0.getResourceBundleName());
//       assertEquals("global", logger0.getName());
//       assertNotNull(defaultPassConfig0);
//       
//       TypeCheck typeCheck0 = defaultPassConfig0.makeTypeCheck(compiler0);
//       assertEquals(false, compiler0.isIdeMode());
//       assertEquals(false, compiler0.hasErrors());
//       assertEquals(0, compiler0.getWarningCount());
//       assertEquals(false, compiler0.isTypeCheckingEnabled());
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
//       assertEquals(0, compiler0.getErrorCount());
//       assertEquals(false, compiler0.acceptConstKeyword());
//       assertEquals(0.0, compiler0.getProgress(), 0.01D);
//       assertEquals(0, loggerErrorManager0.getErrorCount());
//       assertEquals(0, loggerErrorManager0.getWarningCount());
//       assertEquals(0.0, loggerErrorManager0.getTypedPercent(), 0.01D);
//       assertEquals(false, logger0.getUseParentHandlers());
//       assertNull(logger0.getResourceBundleName());
//       assertEquals("global", logger0.getName());
//       assertNotNull(typeCheck0);
//       
//       NodeTraversal nodeTraversal0 = new NodeTraversal((AbstractCompiler) compiler0, (NodeTraversal.Callback) typeCheck0);
//       assertEquals("", nodeTraversal0.getSourceName());
//       assertEquals(0, nodeTraversal0.getLineNumber());
//       assertEquals(false, compiler0.isIdeMode());
//       assertEquals(false, compiler0.hasErrors());
//       assertEquals(0, compiler0.getWarningCount());
//       assertEquals(false, compiler0.isTypeCheckingEnabled());
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
//       assertEquals(0, compiler0.getErrorCount());
//       assertEquals(false, compiler0.acceptConstKeyword());
//       assertEquals(0.0, compiler0.getProgress(), 0.01D);
//       assertEquals(0, loggerErrorManager0.getErrorCount());
//       assertEquals(0, loggerErrorManager0.getWarningCount());
//       assertEquals(0.0, loggerErrorManager0.getTypedPercent(), 0.01D);
//       assertEquals(false, logger0.getUseParentHandlers());
//       assertNull(logger0.getResourceBundleName());
//       assertEquals("global", logger0.getName());
//       assertNotNull(nodeTraversal0);
//       
//       int int0 = 101;
//       Node node0 = new Node(int0);
//       assertEquals(false, node0.isFunction());
//       assertEquals(false, node0.isNumber());
//       assertEquals(false, node0.isWith());
//       assertEquals(false, node0.hasOneChild());
//       assertEquals(false, node0.isNot());
//       assertEquals(false, node0.isParamList());
//       assertEquals(false, node0.isInc());
//       assertEquals(false, node0.isNull());
//       assertEquals(false, node0.isReturn());
//       assertEquals(false, node0.isVoid());
//       assertEquals(false, node0.isCall());
//       assertEquals(false, node0.isNE());
//       assertEquals(false, node0.isRegExp());
//       assertEquals(false, node0.isDec());
//       assertEquals(false, node0.isGetProp());
//       assertEquals(false, node0.isAssign());
//       assertEquals(0, node0.getSideEffectFlags());
//       assertEquals(false, node0.isComma());
//       assertEquals(false, node0.isEmpty());
//       assertEquals(false, node0.isGetElem());
//       assertEquals(false, node0.isIn());
//       assertEquals(101, node0.getType());
//       assertEquals(-1, node0.getCharno());
//       assertEquals(false, node0.isGetterDef());
//       assertEquals(true, node0.isAnd());
//       assertEquals(0, node0.getLength());
//       assertEquals(0, node0.getChildCount());
//       assertEquals(false, node0.isArrayLit());
//       assertEquals(false, node0.isHook());
//       assertNull(node0.getSourceFileName());
//       assertEquals(false, node0.isString());
//       assertEquals(false, node0.wasEmptyNode());
//       assertEquals(false, node0.isStringKey());
//       assertEquals(false, node0.isCast());
//       assertEquals(false, node0.isInstanceOf());
//       assertEquals(false, node0.isLabelName());
//       assertEquals(false, node0.isSyntheticBlock());
//       assertEquals(false, node0.isOr());
//       assertEquals(false, node0.isAssignAdd());
//       assertEquals(false, node0.isThis());
//       assertEquals(false, node0.isDebugger());
//       assertEquals(false, node0.isBlock());
//       assertEquals(false, node0.isOptionalArg());
//       assertEquals(false, node0.isTrue());
//       assertEquals(false, node0.isIf());
//       assertEquals(false, node0.hasChildren());
//       assertEquals(false, node0.isName());
//       assertEquals(false, node0.isLabel());
//       assertEquals(false, node0.isCase());
//       assertEquals(false, node0.isObjectLit());
//       assertEquals(false, node0.isScript());
//       assertEquals(false, node0.isQuotedString());
//       assertEquals(false, node0.isExprResult());
//       assertEquals(false, node0.isThrow());
//       assertEquals(false, node0.isWhile());
//       assertEquals(false, node0.isVar());
//       assertEquals(false, node0.isLocalResultCall());
//       assertEquals(false, node0.isContinue());
//       assertEquals(false, node0.isDefaultCase());
//       assertEquals(false, node0.isAdd());
//       assertEquals(false, node0.isNew());
//       assertEquals(false, node0.hasMoreThanOneChild());
//       assertEquals(false, node0.isSwitch());
//       assertEquals(false, node0.isDo());
//       assertEquals(false, node0.isTry());
//       assertEquals(false, node0.isVarArgs());
//       assertEquals(false, node0.isOnlyModifiesThisCall());
//       assertEquals(-1, node0.getSourcePosition());
//       assertEquals(false, node0.isSetterDef());
//       assertEquals(false, node0.isNoSideEffectsCall());
//       assertEquals(false, node0.isFalse());
//       assertEquals(false, node0.isFor());
//       assertEquals(false, node0.isTypeOf());
//       assertEquals(false, node0.isDelProp());
//       assertEquals(false, node0.isBreak());
//       assertEquals(-1, node0.getLineno());
//       assertEquals(false, node0.isFromExterns());
//       assertEquals(false, node0.isCatch());
//       assertNotNull(node0);
//       
//       typeCheck0.visit(nodeTraversal0, node0, node0);
//       assertEquals("", nodeTraversal0.getSourceName());
//       assertEquals(0, nodeTraversal0.getLineNumber());
//       assertEquals(false, node0.isFunction());
//       assertEquals(false, node0.isNumber());
//       assertEquals(false, node0.isWith());
//       assertEquals(false, node0.hasOneChild());
//       assertEquals(false, node0.isNot());
//       assertEquals(false, node0.isParamList());
//       assertEquals(false, node0.isInc());
//       assertEquals(false, node0.isNull());
//       assertEquals(false, node0.isReturn());
//       assertEquals(false, node0.isVoid());
//       assertEquals(false, node0.isCall());
//       assertEquals(false, node0.isNE());
//       assertEquals(false, node0.isRegExp());
//       assertEquals(false, node0.isDec());
//       assertEquals(false, node0.isGetProp());
//       assertEquals(false, node0.isAssign());
//       assertEquals(0, node0.getSideEffectFlags());
//       assertEquals(false, node0.isComma());
//       assertEquals(false, node0.isEmpty());
//       assertEquals(false, node0.isGetElem());
//       assertEquals(false, node0.isIn());
//       assertEquals(101, node0.getType());
//       assertEquals(-1, node0.getCharno());
//       assertEquals(false, node0.isGetterDef());
//       assertEquals(true, node0.isAnd());
//       assertEquals(0, node0.getLength());
//       assertEquals(0, node0.getChildCount());
//       assertEquals(false, node0.isArrayLit());
//       assertEquals(false, node0.isHook());
//       assertNull(node0.getSourceFileName());
//       assertEquals(false, node0.isString());
//       assertEquals(false, node0.wasEmptyNode());
//       assertEquals(false, node0.isStringKey());
//       assertEquals(false, node0.isCast());
//       assertEquals(false, node0.isInstanceOf());
//       assertEquals(false, node0.isLabelName());
//       assertEquals(false, node0.isSyntheticBlock());
//       assertEquals(false, node0.isOr());
//       assertEquals(false, node0.isAssignAdd());
//       assertEquals(false, node0.isThis());
//       assertEquals(false, node0.isDebugger());
//       assertEquals(false, node0.isBlock());
//       assertEquals(false, node0.isOptionalArg());
//       assertEquals(false, node0.isTrue());
//       assertEquals(false, node0.isIf());
//       assertEquals(false, node0.hasChildren());
//       assertEquals(false, node0.isName());
//       assertEquals(false, node0.isLabel());
//       assertEquals(false, node0.isCase());
//       assertEquals(false, node0.isObjectLit());
//       assertEquals(false, node0.isScript());
//       assertEquals(false, node0.isQuotedString());
//       assertEquals(false, node0.isExprResult());
//       assertEquals(false, node0.isThrow());
//       assertEquals(false, node0.isWhile());
//       assertEquals(false, node0.isVar());
//       assertEquals(false, node0.isLocalResultCall());
//       assertEquals(false, node0.isContinue());
//       assertEquals(false, node0.isDefaultCase());
//       assertEquals(false, node0.isAdd());
//       assertEquals(false, node0.isNew());
//       assertEquals(false, node0.hasMoreThanOneChild());
//       assertEquals(false, node0.isSwitch());
//       assertEquals(false, node0.isDo());
//       assertEquals(false, node0.isTry());
//       assertEquals(false, node0.isVarArgs());
//       assertEquals(false, node0.isOnlyModifiesThisCall());
//       assertEquals(-1, node0.getSourcePosition());
//       assertEquals(false, node0.isSetterDef());
//       assertEquals(false, node0.isNoSideEffectsCall());
//       assertEquals(false, node0.isFalse());
//       assertEquals(false, node0.isFor());
//       assertEquals(false, node0.isTypeOf());
//       assertEquals(false, node0.isDelProp());
//       assertEquals(false, node0.isBreak());
//       assertEquals(-1, node0.getLineno());
//       assertEquals(false, node0.isFromExterns());
//       assertEquals(false, node0.isCatch());
//       assertEquals(false, compiler0.isIdeMode());
//       assertEquals(false, compiler0.hasErrors());
//       assertEquals(0, compiler0.getWarningCount());
//       assertEquals(false, compiler0.isTypeCheckingEnabled());
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
//       assertEquals(0, compiler0.getErrorCount());
//       assertEquals(false, compiler0.acceptConstKeyword());
//       assertEquals(0.0, compiler0.getProgress(), 0.01D);
//       assertEquals(0, loggerErrorManager0.getErrorCount());
//       assertEquals(0, loggerErrorManager0.getWarningCount());
//       assertEquals(0.0, loggerErrorManager0.getTypedPercent(), 0.01D);
//       assertEquals(false, logger0.getUseParentHandlers());
//       assertNull(logger0.getResourceBundleName());
//       assertEquals("global", logger0.getName());
//       
//       double double0 = typeCheck0.getTypedPercent();
//       assertEquals(0.0, double0, 0.01D);
//       assertEquals(false, compiler0.isIdeMode());
//       assertEquals(false, compiler0.hasErrors());
//       assertEquals(0, compiler0.getWarningCount());
//       assertEquals(false, compiler0.isTypeCheckingEnabled());
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
//       assertEquals(0, compiler0.getErrorCount());
//       assertEquals(false, compiler0.acceptConstKeyword());
//       assertEquals(0.0, compiler0.getProgress(), 0.01D);
//       assertEquals(0, loggerErrorManager0.getErrorCount());
//       assertEquals(0, loggerErrorManager0.getWarningCount());
//       assertEquals(0.0, loggerErrorManager0.getTypedPercent(), 0.01D);
//       assertEquals(false, logger0.getUseParentHandlers());
//       assertNull(logger0.getResourceBundleName());
//       assertEquals("global", logger0.getName());
//   }

  @Test
  public void test2() {}
//   @Test
//   public void test2()  throws Throwable  {
//       Logger logger0 = Logger.getGlobal();
//       assertEquals(false, logger0.getUseParentHandlers());
//       assertEquals("global", logger0.getName());
//       assertNull(logger0.getResourceBundleName());
//       assertNotNull(logger0);
//       
//       LoggerErrorManager loggerErrorManager0 = new LoggerErrorManager(logger0);
//       assertEquals(false, logger0.getUseParentHandlers());
//       assertEquals("global", logger0.getName());
//       assertNull(logger0.getResourceBundleName());
//       assertEquals(0.0, loggerErrorManager0.getTypedPercent(), 0.01D);
//       assertEquals(0, loggerErrorManager0.getWarningCount());
//       assertEquals(0, loggerErrorManager0.getErrorCount());
//       assertNotNull(loggerErrorManager0);
//       
//       Compiler compiler0 = new Compiler((ErrorManager) loggerErrorManager0);
//       assertEquals(0, compiler0.getWarningCount());
//       assertEquals(0, compiler0.getErrorCount());
//       assertEquals(0.0, compiler0.getProgress(), 0.01D);
//       assertEquals(false, logger0.getUseParentHandlers());
//       assertEquals("global", logger0.getName());
//       assertNull(logger0.getResourceBundleName());
//       assertEquals(0.0, loggerErrorManager0.getTypedPercent(), 0.01D);
//       assertEquals(0, loggerErrorManager0.getWarningCount());
//       assertEquals(0, loggerErrorManager0.getErrorCount());
//       assertNotNull(compiler0);
//       
//       CompilerOptions compilerOptions0 = new CompilerOptions();
//       assertFalse(compilerOptions0.removeUnusedLocalVars);
//       assertFalse(compilerOptions0.rewriteFunctionExpressions);
//       assertFalse(compilerOptions0.coalesceVariableNames);
//       assertFalse(compilerOptions0.exportTestFunctions);
//       assertFalse(compilerOptions0.disambiguateProperties);
//       assertFalse(compilerOptions0.gatherCssNames);
//       assertFalse(compilerOptions0.labelRenaming);
//       assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
//       assertFalse(compilerOptions0.flowSensitiveInlineVariables);
//       assertFalse(compilerOptions0.convertToDottedProperties);
//       assertFalse(compilerOptions0.aliasKeywords);
//       assertFalse(compilerOptions0.ambiguateProperties);
//       assertFalse(compilerOptions0.deadAssignmentElimination);
//       assertFalse(compilerOptions0.optimizeReturns);
//       assertFalse(compilerOptions0.prettyPrint);
//       assertFalse(compilerOptions0.optimizeCalls);
//       assertFalse(compilerOptions0.generatePseudoNames);
//       assertFalse(compilerOptions0.checkSuspiciousCode);
//       assertFalse(compilerOptions0.collapseAnonymousFunctions);
//       assertFalse(compilerOptions0.checkSymbols);
//       assertFalse(compilerOptions0.inlineConstantVars);
//       assertFalse(compilerOptions0.lineBreak);
//       assertFalse(compilerOptions0.recordFunctionInformation);
//       assertFalse(compilerOptions0.inlineLocalFunctions);
//       assertFalse(compilerOptions0.aliasExternals);
//       assertFalse(compilerOptions0.ideMode);
//       assertFalse(compilerOptions0.jqueryPass);
//       assertFalse(compilerOptions0.crossModuleCodeMotion);
//       assertFalse(compilerOptions0.closurePass);
//       assertFalse(compilerOptions0.checkTypes);
//       assertFalse(compilerOptions0.devirtualizePrototypeMethods);
//       assertFalse(compilerOptions0.crossModuleMethodMotion);
//       assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
//       assertFalse(compilerOptions0.optimizeArgumentsArray);
//       assertFalse(compilerOptions0.moveFunctionDeclarations);
//       assertFalse(compilerOptions0.preferLineBreakAtEndOfFile);
//       assertFalse(compilerOptions0.inlineGetters);
//       assertFalse(compilerOptions0.foldConstants);
//       assertFalse(compilerOptions0.markAsCompiled);
//       assertFalse(compilerOptions0.markNoSideEffectCalls);
//       assertFalse(compilerOptions0.optimizeParameters);
//       assertFalse(compilerOptions0.computeFunctionSideEffects);
//       assertFalse(compilerOptions0.removeTryCatchFinally);
//       assertFalse(compilerOptions0.reserveRawExports);
//       assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
//       assertFalse(compilerOptions0.removeUnusedVars);
//       assertFalse(compilerOptions0.checkControlStructures);
//       assertFalse(compilerOptions0.smartNameRemoval);
//       assertFalse(compilerOptions0.inlineFunctions);
//       assertFalse(compilerOptions0.collapseProperties);
//       assertFalse(compilerOptions0.inlineVariables);
//       assertFalse(compilerOptions0.removeDeadCode);
//       assertFalse(compilerOptions0.aliasAllStrings);
//       assertFalse(compilerOptions0.printInputDelimiter);
//       assertFalse(compilerOptions0.generateExports);
//       assertFalse(compilerOptions0.removeUnusedClassProperties);
//       assertFalse(compilerOptions0.collapseVariableDeclarations);
//       assertEquals(false, compilerOptions0.isExternExportsEnabled());
//       assertEquals(CompilerOptions.TracerMode.OFF, compilerOptions0.getTracerMode());
//       assertEquals(false, compilerOptions0.isRemoveUnusedClassProperties());
//       assertEquals(false, compilerOptions0.assumeStrictThis());
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compilerOptions0.getLanguageIn());
//       assertEquals(CompilerOptions.TweakProcessing.OFF, compilerOptions0.getTweakProcessing());
//       assertNull(compilerOptions0.getLanguageOut());
//       assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
//       assertEquals(false, compilerOptions0.getInferTypes());
//       assertNotNull(compilerOptions0);
//       
//       compiler0.options = compilerOptions0;
//       assertFalse(compiler0.options.closurePass);
//       assertFalse(compiler0.options.generateExports);
//       assertFalse(compiler0.options.generatePseudoNames);
//       assertFalse(compiler0.options.inlineLocalFunctions);
//       assertFalse(compiler0.options.removeUnusedClassProperties);
//       assertFalse(compiler0.options.ideMode);
//       assertFalse(compiler0.options.removeTryCatchFinally);
//       assertFalse(compiler0.options.coalesceVariableNames);
//       assertFalse(compiler0.options.ambiguateProperties);
//       assertFalse(compiler0.options.extractPrototypeMemberDeclarations);
//       assertFalse(compiler0.options.moveFunctionDeclarations);
//       assertFalse(compiler0.options.disambiguateProperties);
//       assertFalse(compiler0.options.checkSuspiciousCode);
//       assertFalse(compiler0.options.printInputDelimiter);
//       assertFalse(compiler0.options.jqueryPass);
//       assertFalse(compiler0.options.lineBreak);
//       assertFalse(compiler0.options.markAsCompiled);
//       assertFalse(compiler0.options.gatherCssNames);
//       assertFalse(compiler0.options.recordFunctionInformation);
//       assertFalse(compiler0.options.reserveRawExports);
//       assertFalse(compiler0.options.flowSensitiveInlineVariables);
//       assertFalse(compiler0.options.markNoSideEffectCalls);
//       assertFalse(compiler0.options.aliasExternals);
//       assertFalse(compiler0.options.foldConstants);
//       assertFalse(compiler0.options.optimizeParameters);
//       assertFalse(compiler0.options.removeUnusedPrototypeProperties);
//       assertFalse(compiler0.options.checkControlStructures);
//       assertFalse(compiler0.options.removeDeadCode);
//       assertFalse(compiler0.options.optimizeArgumentsArray);
//       assertFalse(compiler0.options.prettyPrint);
//       assertFalse(compiler0.options.exportTestFunctions);
//       assertFalse(compiler0.options.preferLineBreakAtEndOfFile);
//       assertFalse(compiler0.options.smartNameRemoval);
//       assertFalse(compiler0.options.inlineConstantVars);
//       assertFalse(compiler0.options.collapseAnonymousFunctions);
//       assertFalse(compiler0.options.inlineFunctions);
//       assertFalse(compiler0.options.removeUnusedVars);
//       assertFalse(compiler0.options.convertToDottedProperties);
//       assertFalse(compiler0.options.aliasKeywords);
//       assertFalse(compiler0.options.crossModuleMethodMotion);
//       assertFalse(compiler0.options.computeFunctionSideEffects);
//       assertFalse(compiler0.options.removeUnusedPrototypePropertiesInExterns);
//       assertFalse(compiler0.options.aliasAllStrings);
//       assertFalse(compiler0.options.inlineVariables);
//       assertFalse(compiler0.options.devirtualizePrototypeMethods);
//       assertFalse(compiler0.options.rewriteFunctionExpressions);
//       assertFalse(compiler0.options.collapseProperties);
//       assertFalse(compiler0.options.collapseVariableDeclarations);
//       assertFalse(compiler0.options.crossModuleCodeMotion);
//       assertFalse(compiler0.options.removeUnusedLocalVars);
//       assertFalse(compiler0.options.deadAssignmentElimination);
//       assertFalse(compiler0.options.labelRenaming);
//       assertFalse(compiler0.options.inlineGetters);
//       assertFalse(compiler0.options.optimizeReturns);
//       assertFalse(compiler0.options.checkTypes);
//       assertFalse(compiler0.options.checkSymbols);
//       assertFalse(compiler0.options.optimizeCalls);
//       assertFalse(compilerOptions0.removeUnusedLocalVars);
//       assertFalse(compilerOptions0.rewriteFunctionExpressions);
//       assertFalse(compilerOptions0.coalesceVariableNames);
//       assertFalse(compilerOptions0.exportTestFunctions);
//       assertFalse(compilerOptions0.disambiguateProperties);
//       assertFalse(compilerOptions0.gatherCssNames);
//       assertFalse(compilerOptions0.labelRenaming);
//       assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
//       assertFalse(compilerOptions0.flowSensitiveInlineVariables);
//       assertFalse(compilerOptions0.convertToDottedProperties);
//       assertFalse(compilerOptions0.aliasKeywords);
//       assertFalse(compilerOptions0.ambiguateProperties);
//       assertFalse(compilerOptions0.deadAssignmentElimination);
//       assertFalse(compilerOptions0.optimizeReturns);
//       assertFalse(compilerOptions0.prettyPrint);
//       assertFalse(compilerOptions0.optimizeCalls);
//       assertFalse(compilerOptions0.generatePseudoNames);
//       assertFalse(compilerOptions0.checkSuspiciousCode);
//       assertFalse(compilerOptions0.collapseAnonymousFunctions);
//       assertFalse(compilerOptions0.checkSymbols);
//       assertFalse(compilerOptions0.inlineConstantVars);
//       assertFalse(compilerOptions0.lineBreak);
//       assertFalse(compilerOptions0.recordFunctionInformation);
//       assertFalse(compilerOptions0.inlineLocalFunctions);
//       assertFalse(compilerOptions0.aliasExternals);
//       assertFalse(compilerOptions0.ideMode);
//       assertFalse(compilerOptions0.jqueryPass);
//       assertFalse(compilerOptions0.crossModuleCodeMotion);
//       assertFalse(compilerOptions0.closurePass);
//       assertFalse(compilerOptions0.checkTypes);
//       assertFalse(compilerOptions0.devirtualizePrototypeMethods);
//       assertFalse(compilerOptions0.crossModuleMethodMotion);
//       assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
//       assertFalse(compilerOptions0.optimizeArgumentsArray);
//       assertFalse(compilerOptions0.moveFunctionDeclarations);
//       assertFalse(compilerOptions0.preferLineBreakAtEndOfFile);
//       assertFalse(compilerOptions0.inlineGetters);
//       assertFalse(compilerOptions0.foldConstants);
//       assertFalse(compilerOptions0.markAsCompiled);
//       assertFalse(compilerOptions0.markNoSideEffectCalls);
//       assertFalse(compilerOptions0.optimizeParameters);
//       assertFalse(compilerOptions0.computeFunctionSideEffects);
//       assertFalse(compilerOptions0.removeTryCatchFinally);
//       assertFalse(compilerOptions0.reserveRawExports);
//       assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
//       assertFalse(compilerOptions0.removeUnusedVars);
//       assertFalse(compilerOptions0.checkControlStructures);
//       assertFalse(compilerOptions0.smartNameRemoval);
//       assertFalse(compilerOptions0.inlineFunctions);
//       assertFalse(compilerOptions0.collapseProperties);
//       assertFalse(compilerOptions0.inlineVariables);
//       assertFalse(compilerOptions0.removeDeadCode);
//       assertFalse(compilerOptions0.aliasAllStrings);
//       assertFalse(compilerOptions0.printInputDelimiter);
//       assertFalse(compilerOptions0.generateExports);
//       assertFalse(compilerOptions0.removeUnusedClassProperties);
//       assertFalse(compilerOptions0.collapseVariableDeclarations);
//       assertEquals(false, compiler0.options.isExternExportsEnabled());
//       assertEquals(CompilerOptions.TracerMode.OFF, compiler0.options.getTracerMode());
//       assertEquals(CompilerOptions.TweakProcessing.OFF, compiler0.options.getTweakProcessing());
//       assertEquals(false, compiler0.options.assumeStrictThis());
//       assertEquals(false, compiler0.options.shouldColorizeErrorOutput());
//       assertEquals(false, compiler0.options.getInferTypes());
//       assertNull(compiler0.options.getLanguageOut());
//       assertEquals(false, compiler0.options.isRemoveUnusedClassProperties());
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.options.getLanguageIn());
//       assertEquals(false, compiler0.isTypeCheckingEnabled());
//       assertEquals(false, compiler0.acceptConstKeyword());
//       assertEquals(0, compiler0.getWarningCount());
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
//       assertEquals(false, compiler0.isIdeMode());
//       assertEquals(false, compiler0.hasErrors());
//       assertEquals(0, compiler0.getErrorCount());
//       assertEquals(0.0, compiler0.getProgress(), 0.01D);
//       assertEquals(false, logger0.getUseParentHandlers());
//       assertEquals("global", logger0.getName());
//       assertNull(logger0.getResourceBundleName());
//       assertEquals(false, compilerOptions0.isExternExportsEnabled());
//       assertEquals(CompilerOptions.TracerMode.OFF, compilerOptions0.getTracerMode());
//       assertEquals(false, compilerOptions0.isRemoveUnusedClassProperties());
//       assertEquals(false, compilerOptions0.assumeStrictThis());
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compilerOptions0.getLanguageIn());
//       assertEquals(CompilerOptions.TweakProcessing.OFF, compilerOptions0.getTweakProcessing());
//       assertNull(compilerOptions0.getLanguageOut());
//       assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
//       assertEquals(false, compilerOptions0.getInferTypes());
//       assertEquals(0.0, loggerErrorManager0.getTypedPercent(), 0.01D);
//       assertEquals(0, loggerErrorManager0.getWarningCount());
//       assertEquals(0, loggerErrorManager0.getErrorCount());
//       assertNotNull(compiler0.options);
//       
//       DefaultPassConfig defaultPassConfig0 = compiler0.ensureDefaultPassConfig();
//       assertEquals(false, compiler0.isTypeCheckingEnabled());
//       assertEquals(false, compiler0.acceptConstKeyword());
//       assertEquals(0, compiler0.getWarningCount());
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
//       assertEquals(false, compiler0.isIdeMode());
//       assertEquals(false, compiler0.hasErrors());
//       assertEquals(0, compiler0.getErrorCount());
//       assertEquals(0.0, compiler0.getProgress(), 0.01D);
//       assertEquals(false, logger0.getUseParentHandlers());
//       assertEquals("global", logger0.getName());
//       assertNull(logger0.getResourceBundleName());
//       assertEquals(0.0, loggerErrorManager0.getTypedPercent(), 0.01D);
//       assertEquals(0, loggerErrorManager0.getWarningCount());
//       assertEquals(0, loggerErrorManager0.getErrorCount());
//       assertNotNull(defaultPassConfig0);
//       
//       TypeCheck typeCheck0 = defaultPassConfig0.makeTypeCheck(compiler0);
//       assertEquals(false, compiler0.isTypeCheckingEnabled());
//       assertEquals(false, compiler0.acceptConstKeyword());
//       assertEquals(0, compiler0.getWarningCount());
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
//       assertEquals(false, compiler0.isIdeMode());
//       assertEquals(false, compiler0.hasErrors());
//       assertEquals(0, compiler0.getErrorCount());
//       assertEquals(0.0, compiler0.getProgress(), 0.01D);
//       assertEquals(false, logger0.getUseParentHandlers());
//       assertEquals("global", logger0.getName());
//       assertNull(logger0.getResourceBundleName());
//       assertEquals(0.0, loggerErrorManager0.getTypedPercent(), 0.01D);
//       assertEquals(0, loggerErrorManager0.getWarningCount());
//       assertEquals(0, loggerErrorManager0.getErrorCount());
//       assertNotNull(typeCheck0);
//       
//       NodeTraversal nodeTraversal0 = new NodeTraversal((AbstractCompiler) compiler0, (NodeTraversal.Callback) typeCheck0);
//       assertEquals(false, compiler0.isTypeCheckingEnabled());
//       assertEquals(false, compiler0.acceptConstKeyword());
//       assertEquals(0, compiler0.getWarningCount());
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
//       assertEquals(false, compiler0.isIdeMode());
//       assertEquals(false, compiler0.hasErrors());
//       assertEquals(0, compiler0.getErrorCount());
//       assertEquals(0.0, compiler0.getProgress(), 0.01D);
//       assertEquals(false, logger0.getUseParentHandlers());
//       assertEquals("global", logger0.getName());
//       assertNull(logger0.getResourceBundleName());
//       assertEquals(0.0, loggerErrorManager0.getTypedPercent(), 0.01D);
//       assertEquals(0, loggerErrorManager0.getWarningCount());
//       assertEquals(0, loggerErrorManager0.getErrorCount());
//       assertEquals("", nodeTraversal0.getSourceName());
//       assertEquals(0, nodeTraversal0.getLineNumber());
//       assertNotNull(nodeTraversal0);
//       
//       int int0 = 101;
//       Node node0 = new Node(int0);
//       assertEquals(false, node0.isGetterDef());
//       assertEquals(0, node0.getSideEffectFlags());
//       assertEquals(false, node0.hasChildren());
//       assertEquals(false, node0.isDo());
//       assertEquals(false, node0.isWith());
//       assertEquals(-1, node0.getSourcePosition());
//       assertEquals(false, node0.isLabel());
//       assertEquals(false, node0.isWhile());
//       assertEquals(false, node0.isOnlyModifiesThisCall());
//       assertEquals(false, node0.wasEmptyNode());
//       assertEquals(false, node0.isInstanceOf());
//       assertEquals(false, node0.isLabelName());
//       assertEquals(false, node0.isSwitch());
//       assertEquals(false, node0.isNE());
//       assertEquals(false, node0.isName());
//       assertEquals(false, node0.isFor());
//       assertEquals(false, node0.isQuotedString());
//       assertEquals(false, node0.isVar());
//       assertEquals(false, node0.hasOneChild());
//       assertEquals(false, node0.isCall());
//       assertEquals(false, node0.isFunction());
//       assertEquals(false, node0.isCatch());
//       assertEquals(false, node0.isTrue());
//       assertEquals(-1, node0.getCharno());
//       assertEquals(false, node0.isEmpty());
//       assertEquals(false, node0.isNoSideEffectsCall());
//       assertEquals(false, node0.isScript());
//       assertEquals(false, node0.isDebugger());
//       assertEquals(false, node0.isAdd());
//       assertEquals(false, node0.isContinue());
//       assertEquals(false, node0.isBreak());
//       assertEquals(false, node0.isRegExp());
//       assertEquals(false, node0.isExprResult());
//       assertEquals(false, node0.isAssign());
//       assertEquals(false, node0.isOptionalArg());
//       assertEquals(101, node0.getType());
//       assertEquals(true, node0.isAnd());
//       assertEquals(false, node0.isIn());
//       assertEquals(false, node0.isNumber());
//       assertEquals(false, node0.isCase());
//       assertEquals(false, node0.isObjectLit());
//       assertEquals(false, node0.isInc());
//       assertEquals(false, node0.isHook());
//       assertEquals(false, node0.isTypeOf());
//       assertEquals(false, node0.isFromExterns());
//       assertEquals(false, node0.isParamList());
//       assertNull(node0.getSourceFileName());
//       assertEquals(false, node0.isOr());
//       assertEquals(false, node0.isDefaultCase());
//       assertEquals(false, node0.isDec());
//       assertEquals(false, node0.hasMoreThanOneChild());
//       assertEquals(false, node0.isThrow());
//       assertEquals(false, node0.isNew());
//       assertEquals(false, node0.isFalse());
//       assertEquals(false, node0.isIf());
//       assertEquals(false, node0.isBlock());
//       assertEquals(false, node0.isSyntheticBlock());
//       assertEquals(false, node0.isDelProp());
//       assertEquals(0, node0.getLength());
//       assertEquals(false, node0.isComma());
//       assertEquals(false, node0.isNot());
//       assertEquals(false, node0.isGetProp());
//       assertEquals(false, node0.isTry());
//       assertEquals(false, node0.isAssignAdd());
//       assertEquals(false, node0.isStringKey());
//       assertEquals(false, node0.isLocalResultCall());
//       assertEquals(false, node0.isGetElem());
//       assertEquals(0, node0.getChildCount());
//       assertEquals(false, node0.isVarArgs());
//       assertEquals(false, node0.isNull());
//       assertEquals(false, node0.isCast());
//       assertEquals(false, node0.isReturn());
//       assertEquals(false, node0.isArrayLit());
//       assertEquals(false, node0.isSetterDef());
//       assertEquals(-1, node0.getLineno());
//       assertEquals(false, node0.isThis());
//       assertEquals(false, node0.isVoid());
//       assertEquals(false, node0.isString());
//       assertNotNull(node0);
//       
//       typeCheck0.visit(nodeTraversal0, node0, node0);
//       assertEquals(false, compiler0.isTypeCheckingEnabled());
//       assertEquals(false, compiler0.acceptConstKeyword());
//       assertEquals(0, compiler0.getWarningCount());
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
//       assertEquals(false, compiler0.isIdeMode());
//       assertEquals(false, compiler0.hasErrors());
//       assertEquals(0, compiler0.getErrorCount());
//       assertEquals(0.0, compiler0.getProgress(), 0.01D);
//       assertEquals(false, logger0.getUseParentHandlers());
//       assertEquals("global", logger0.getName());
//       assertNull(logger0.getResourceBundleName());
//       assertEquals(false, node0.isGetterDef());
//       assertEquals(0, node0.getSideEffectFlags());
//       assertEquals(false, node0.hasChildren());
//       assertEquals(false, node0.isDo());
//       assertEquals(false, node0.isWith());
//       assertEquals(-1, node0.getSourcePosition());
//       assertEquals(false, node0.isLabel());
//       assertEquals(false, node0.isWhile());
//       assertEquals(false, node0.isOnlyModifiesThisCall());
//       assertEquals(false, node0.wasEmptyNode());
//       assertEquals(false, node0.isInstanceOf());
//       assertEquals(false, node0.isLabelName());
//       assertEquals(false, node0.isSwitch());
//       assertEquals(false, node0.isNE());
//       assertEquals(false, node0.isName());
//       assertEquals(false, node0.isFor());
//       assertEquals(false, node0.isQuotedString());
//       assertEquals(false, node0.isVar());
//       assertEquals(false, node0.hasOneChild());
//       assertEquals(false, node0.isCall());
//       assertEquals(false, node0.isFunction());
//       assertEquals(false, node0.isCatch());
//       assertEquals(false, node0.isTrue());
//       assertEquals(-1, node0.getCharno());
//       assertEquals(false, node0.isEmpty());
//       assertEquals(false, node0.isNoSideEffectsCall());
//       assertEquals(false, node0.isScript());
//       assertEquals(false, node0.isDebugger());
//       assertEquals(false, node0.isAdd());
//       assertEquals(false, node0.isContinue());
//       assertEquals(false, node0.isBreak());
//       assertEquals(false, node0.isRegExp());
//       assertEquals(false, node0.isExprResult());
//       assertEquals(false, node0.isAssign());
//       assertEquals(false, node0.isOptionalArg());
//       assertEquals(101, node0.getType());
//       assertEquals(true, node0.isAnd());
//       assertEquals(false, node0.isIn());
//       assertEquals(false, node0.isNumber());
//       assertEquals(false, node0.isCase());
//       assertEquals(false, node0.isObjectLit());
//       assertEquals(false, node0.isInc());
//       assertEquals(false, node0.isHook());
//       assertEquals(false, node0.isTypeOf());
//       assertEquals(false, node0.isFromExterns());
//       assertEquals(false, node0.isParamList());
//       assertNull(node0.getSourceFileName());
//       assertEquals(false, node0.isOr());
//       assertEquals(false, node0.isDefaultCase());
//       assertEquals(false, node0.isDec());
//       assertEquals(false, node0.hasMoreThanOneChild());
//       assertEquals(false, node0.isThrow());
//       assertEquals(false, node0.isNew());
//       assertEquals(false, node0.isFalse());
//       assertEquals(false, node0.isIf());
//       assertEquals(false, node0.isBlock());
//       assertEquals(false, node0.isSyntheticBlock());
//       assertEquals(false, node0.isDelProp());
//       assertEquals(0, node0.getLength());
//       assertEquals(false, node0.isComma());
//       assertEquals(false, node0.isNot());
//       assertEquals(false, node0.isGetProp());
//       assertEquals(false, node0.isTry());
//       assertEquals(false, node0.isAssignAdd());
//       assertEquals(false, node0.isStringKey());
//       assertEquals(false, node0.isLocalResultCall());
//       assertEquals(false, node0.isGetElem());
//       assertEquals(0, node0.getChildCount());
//       assertEquals(false, node0.isVarArgs());
//       assertEquals(false, node0.isNull());
//       assertEquals(false, node0.isCast());
//       assertEquals(false, node0.isReturn());
//       assertEquals(false, node0.isArrayLit());
//       assertEquals(false, node0.isSetterDef());
//       assertEquals(-1, node0.getLineno());
//       assertEquals(false, node0.isThis());
//       assertEquals(false, node0.isVoid());
//       assertEquals(false, node0.isString());
//       assertEquals(0.0, loggerErrorManager0.getTypedPercent(), 0.01D);
//       assertEquals(0, loggerErrorManager0.getWarningCount());
//       assertEquals(0, loggerErrorManager0.getErrorCount());
//       assertEquals("", nodeTraversal0.getSourceName());
//       assertEquals(0, nodeTraversal0.getLineNumber());
//       
//       boolean boolean0 = typeCheck0.visitName(nodeTraversal0, node0, node0);
//       assertTrue(boolean0);
//       assertEquals(false, compiler0.isTypeCheckingEnabled());
//       assertEquals(false, compiler0.acceptConstKeyword());
//       assertEquals(0, compiler0.getWarningCount());
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
//       assertEquals(false, compiler0.isIdeMode());
//       assertEquals(false, compiler0.hasErrors());
//       assertEquals(0, compiler0.getErrorCount());
//       assertEquals(0.0, compiler0.getProgress(), 0.01D);
//       assertEquals(false, logger0.getUseParentHandlers());
//       assertEquals("global", logger0.getName());
//       assertNull(logger0.getResourceBundleName());
//       assertEquals(false, node0.isGetterDef());
//       assertEquals(0, node0.getSideEffectFlags());
//       assertEquals(false, node0.hasChildren());
//       assertEquals(false, node0.isDo());
//       assertEquals(false, node0.isWith());
//       assertEquals(-1, node0.getSourcePosition());
//       assertEquals(false, node0.isLabel());
//       assertEquals(false, node0.isWhile());
//       assertEquals(false, node0.isOnlyModifiesThisCall());
//       assertEquals(false, node0.wasEmptyNode());
//       assertEquals(false, node0.isInstanceOf());
//       assertEquals(false, node0.isLabelName());
//       assertEquals(false, node0.isSwitch());
//       assertEquals(false, node0.isNE());
//       assertEquals(false, node0.isName());
//       assertEquals(false, node0.isFor());
//       assertEquals(false, node0.isQuotedString());
//       assertEquals(false, node0.isVar());
//       assertEquals(false, node0.hasOneChild());
//       assertEquals(false, node0.isCall());
//       assertEquals(false, node0.isFunction());
//       assertEquals(false, node0.isCatch());
//       assertEquals(false, node0.isTrue());
//       assertEquals(-1, node0.getCharno());
//       assertEquals(false, node0.isEmpty());
//       assertEquals(false, node0.isNoSideEffectsCall());
//       assertEquals(false, node0.isScript());
//       assertEquals(false, node0.isDebugger());
//       assertEquals(false, node0.isAdd());
//       assertEquals(false, node0.isContinue());
//       assertEquals(false, node0.isBreak());
//       assertEquals(false, node0.isRegExp());
//       assertEquals(false, node0.isExprResult());
//       assertEquals(false, node0.isAssign());
//       assertEquals(false, node0.isOptionalArg());
//       assertEquals(101, node0.getType());
//       assertEquals(true, node0.isAnd());
//       assertEquals(false, node0.isIn());
//       assertEquals(false, node0.isNumber());
//       assertEquals(false, node0.isCase());
//       assertEquals(false, node0.isObjectLit());
//       assertEquals(false, node0.isInc());
//       assertEquals(false, node0.isHook());
//       assertEquals(false, node0.isTypeOf());
//       assertEquals(false, node0.isFromExterns());
//       assertEquals(false, node0.isParamList());
//       assertNull(node0.getSourceFileName());
//       assertEquals(false, node0.isOr());
//       assertEquals(false, node0.isDefaultCase());
//       assertEquals(false, node0.isDec());
//       assertEquals(false, node0.hasMoreThanOneChild());
//       assertEquals(false, node0.isThrow());
//       assertEquals(false, node0.isNew());
//       assertEquals(false, node0.isFalse());
//       assertEquals(false, node0.isIf());
//       assertEquals(false, node0.isBlock());
//       assertEquals(false, node0.isSyntheticBlock());
//       assertEquals(false, node0.isDelProp());
//       assertEquals(0, node0.getLength());
//       assertEquals(false, node0.isComma());
//       assertEquals(false, node0.isNot());
//       assertEquals(false, node0.isGetProp());
//       assertEquals(false, node0.isTry());
//       assertEquals(false, node0.isAssignAdd());
//       assertEquals(false, node0.isStringKey());
//       assertEquals(false, node0.isLocalResultCall());
//       assertEquals(false, node0.isGetElem());
//       assertEquals(0, node0.getChildCount());
//       assertEquals(false, node0.isVarArgs());
//       assertEquals(false, node0.isNull());
//       assertEquals(false, node0.isCast());
//       assertEquals(false, node0.isReturn());
//       assertEquals(false, node0.isArrayLit());
//       assertEquals(false, node0.isSetterDef());
//       assertEquals(-1, node0.getLineno());
//       assertEquals(false, node0.isThis());
//       assertEquals(false, node0.isVoid());
//       assertEquals(false, node0.isString());
//       assertEquals(0.0, loggerErrorManager0.getTypedPercent(), 0.01D);
//       assertEquals(0, loggerErrorManager0.getWarningCount());
//       assertEquals(0, loggerErrorManager0.getErrorCount());
//       assertEquals("", nodeTraversal0.getSourceName());
//       assertEquals(0, nodeTraversal0.getLineNumber());
//   }

  @Test
  public void test3() {}
//   @Test
//   public void test3()  throws Throwable  {
//       Logger logger0 = Logger.getGlobal();
//       assertEquals("global", logger0.getName());
//       assertEquals(false, logger0.getUseParentHandlers());
//       assertNull(logger0.getResourceBundleName());
//       assertNotNull(logger0);
//       
//       LoggerErrorManager loggerErrorManager0 = new LoggerErrorManager(logger0);
//       assertEquals("global", logger0.getName());
//       assertEquals(false, logger0.getUseParentHandlers());
//       assertNull(logger0.getResourceBundleName());
//       assertEquals(0.0, loggerErrorManager0.getTypedPercent(), 0.01D);
//       assertEquals(0, loggerErrorManager0.getErrorCount());
//       assertEquals(0, loggerErrorManager0.getWarningCount());
//       assertNotNull(loggerErrorManager0);
//       
//       Compiler compiler0 = new Compiler((ErrorManager) loggerErrorManager0);
//       assertEquals("global", logger0.getName());
//       assertEquals(false, logger0.getUseParentHandlers());
//       assertNull(logger0.getResourceBundleName());
//       assertEquals(0.0, loggerErrorManager0.getTypedPercent(), 0.01D);
//       assertEquals(0, loggerErrorManager0.getErrorCount());
//       assertEquals(0, loggerErrorManager0.getWarningCount());
//       assertEquals(0.0, compiler0.getProgress(), 0.01D);
//       assertEquals(0, compiler0.getWarningCount());
//       assertEquals(0, compiler0.getErrorCount());
//       assertNotNull(compiler0);
//       
//       CompilerOptions compilerOptions0 = new CompilerOptions();
//       assertFalse(compilerOptions0.collapseAnonymousFunctions);
//       assertFalse(compilerOptions0.markAsCompiled);
//       assertFalse(compilerOptions0.inlineGetters);
//       assertFalse(compilerOptions0.optimizeReturns);
//       assertFalse(compilerOptions0.deadAssignmentElimination);
//       assertFalse(compilerOptions0.flowSensitiveInlineVariables);
//       assertFalse(compilerOptions0.aliasKeywords);
//       assertFalse(compilerOptions0.jqueryPass);
//       assertFalse(compilerOptions0.removeTryCatchFinally);
//       assertFalse(compilerOptions0.devirtualizePrototypeMethods);
//       assertFalse(compilerOptions0.checkSymbols);
//       assertFalse(compilerOptions0.checkTypes);
//       assertFalse(compilerOptions0.recordFunctionInformation);
//       assertFalse(compilerOptions0.crossModuleMethodMotion);
//       assertFalse(compilerOptions0.disambiguateProperties);
//       assertFalse(compilerOptions0.closurePass);
//       assertFalse(compilerOptions0.removeUnusedLocalVars);
//       assertFalse(compilerOptions0.aliasExternals);
//       assertFalse(compilerOptions0.inlineLocalFunctions);
//       assertFalse(compilerOptions0.ambiguateProperties);
//       assertFalse(compilerOptions0.exportTestFunctions);
//       assertFalse(compilerOptions0.markNoSideEffectCalls);
//       assertFalse(compilerOptions0.inlineVariables);
//       assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
//       assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
//       assertFalse(compilerOptions0.removeUnusedClassProperties);
//       assertFalse(compilerOptions0.removeUnusedVars);
//       assertFalse(compilerOptions0.printInputDelimiter);
//       assertFalse(compilerOptions0.moveFunctionDeclarations);
//       assertFalse(compilerOptions0.convertToDottedProperties);
//       assertFalse(compilerOptions0.ideMode);
//       assertFalse(compilerOptions0.optimizeCalls);
//       assertFalse(compilerOptions0.optimizeArgumentsArray);
//       assertFalse(compilerOptions0.smartNameRemoval);
//       assertFalse(compilerOptions0.optimizeParameters);
//       assertFalse(compilerOptions0.prettyPrint);
//       assertFalse(compilerOptions0.checkSuspiciousCode);
//       assertFalse(compilerOptions0.aliasAllStrings);
//       assertFalse(compilerOptions0.generatePseudoNames);
//       assertFalse(compilerOptions0.gatherCssNames);
//       assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
//       assertFalse(compilerOptions0.inlineFunctions);
//       assertFalse(compilerOptions0.reserveRawExports);
//       assertFalse(compilerOptions0.labelRenaming);
//       assertFalse(compilerOptions0.preferLineBreakAtEndOfFile);
//       assertFalse(compilerOptions0.removeDeadCode);
//       assertFalse(compilerOptions0.lineBreak);
//       assertFalse(compilerOptions0.computeFunctionSideEffects);
//       assertFalse(compilerOptions0.rewriteFunctionExpressions);
//       assertFalse(compilerOptions0.checkControlStructures);
//       assertFalse(compilerOptions0.generateExports);
//       assertFalse(compilerOptions0.foldConstants);
//       assertFalse(compilerOptions0.collapseProperties);
//       assertFalse(compilerOptions0.collapseVariableDeclarations);
//       assertFalse(compilerOptions0.crossModuleCodeMotion);
//       assertFalse(compilerOptions0.inlineConstantVars);
//       assertFalse(compilerOptions0.coalesceVariableNames);
//       assertEquals(false, compilerOptions0.getInferTypes());
//       assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
//       assertEquals(false, compilerOptions0.isRemoveUnusedClassProperties());
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compilerOptions0.getLanguageIn());
//       assertEquals(false, compilerOptions0.assumeStrictThis());
//       assertEquals(false, compilerOptions0.isExternExportsEnabled());
//       assertNull(compilerOptions0.getLanguageOut());
//       assertEquals(CompilerOptions.TweakProcessing.OFF, compilerOptions0.getTweakProcessing());
//       assertEquals(CompilerOptions.TracerMode.OFF, compilerOptions0.getTracerMode());
//       assertNotNull(compilerOptions0);
//       
//       compiler0.options = compilerOptions0;
//       assertFalse(compiler0.options.aliasExternals);
//       assertFalse(compiler0.options.exportTestFunctions);
//       assertFalse(compiler0.options.removeTryCatchFinally);
//       assertFalse(compiler0.options.closurePass);
//       assertFalse(compiler0.options.inlineVariables);
//       assertFalse(compiler0.options.extractPrototypeMemberDeclarations);
//       assertFalse(compiler0.options.prettyPrint);
//       assertFalse(compiler0.options.devirtualizePrototypeMethods);
//       assertFalse(compiler0.options.removeUnusedLocalVars);
//       assertFalse(compiler0.options.coalesceVariableNames);
//       assertFalse(compiler0.options.removeDeadCode);
//       assertFalse(compiler0.options.computeFunctionSideEffects);
//       assertFalse(compiler0.options.checkControlStructures);
//       assertFalse(compiler0.options.optimizeParameters);
//       assertFalse(compiler0.options.lineBreak);
//       assertFalse(compiler0.options.optimizeArgumentsArray);
//       assertFalse(compiler0.options.flowSensitiveInlineVariables);
//       assertFalse(compiler0.options.optimizeReturns);
//       assertFalse(compiler0.options.inlineConstantVars);
//       assertFalse(compiler0.options.foldConstants);
//       assertFalse(compiler0.options.removeUnusedClassProperties);
//       assertFalse(compiler0.options.smartNameRemoval);
//       assertFalse(compiler0.options.gatherCssNames);
//       assertFalse(compiler0.options.inlineFunctions);
//       assertFalse(compiler0.options.checkSuspiciousCode);
//       assertFalse(compiler0.options.generatePseudoNames);
//       assertFalse(compiler0.options.recordFunctionInformation);
//       assertFalse(compiler0.options.crossModuleMethodMotion);
//       assertFalse(compiler0.options.inlineGetters);
//       assertFalse(compiler0.options.deadAssignmentElimination);
//       assertFalse(compiler0.options.ideMode);
//       assertFalse(compiler0.options.crossModuleCodeMotion);
//       assertFalse(compiler0.options.disambiguateProperties);
//       assertFalse(compiler0.options.checkSymbols);
//       assertFalse(compiler0.options.removeUnusedPrototypeProperties);
//       assertFalse(compiler0.options.preferLineBreakAtEndOfFile);
//       assertFalse(compiler0.options.rewriteFunctionExpressions);
//       assertFalse(compiler0.options.reserveRawExports);
//       assertFalse(compiler0.options.collapseAnonymousFunctions);
//       assertFalse(compiler0.options.checkTypes);
//       assertFalse(compiler0.options.removeUnusedPrototypePropertiesInExterns);
//       assertFalse(compiler0.options.removeUnusedVars);
//       assertFalse(compiler0.options.markNoSideEffectCalls);
//       assertFalse(compiler0.options.jqueryPass);
//       assertFalse(compiler0.options.collapseProperties);
//       assertFalse(compiler0.options.markAsCompiled);
//       assertFalse(compiler0.options.inlineLocalFunctions);
//       assertFalse(compiler0.options.collapseVariableDeclarations);
//       assertFalse(compiler0.options.convertToDottedProperties);
//       assertFalse(compiler0.options.labelRenaming);
//       assertFalse(compiler0.options.ambiguateProperties);
//       assertFalse(compiler0.options.aliasAllStrings);
//       assertFalse(compiler0.options.generateExports);
//       assertFalse(compiler0.options.aliasKeywords);
//       assertFalse(compiler0.options.optimizeCalls);
//       assertFalse(compiler0.options.printInputDelimiter);
//       assertFalse(compiler0.options.moveFunctionDeclarations);
//       assertFalse(compilerOptions0.collapseAnonymousFunctions);
//       assertFalse(compilerOptions0.markAsCompiled);
//       assertFalse(compilerOptions0.inlineGetters);
//       assertFalse(compilerOptions0.optimizeReturns);
//       assertFalse(compilerOptions0.deadAssignmentElimination);
//       assertFalse(compilerOptions0.flowSensitiveInlineVariables);
//       assertFalse(compilerOptions0.aliasKeywords);
//       assertFalse(compilerOptions0.jqueryPass);
//       assertFalse(compilerOptions0.removeTryCatchFinally);
//       assertFalse(compilerOptions0.devirtualizePrototypeMethods);
//       assertFalse(compilerOptions0.checkSymbols);
//       assertFalse(compilerOptions0.checkTypes);
//       assertFalse(compilerOptions0.recordFunctionInformation);
//       assertFalse(compilerOptions0.crossModuleMethodMotion);
//       assertFalse(compilerOptions0.disambiguateProperties);
//       assertFalse(compilerOptions0.closurePass);
//       assertFalse(compilerOptions0.removeUnusedLocalVars);
//       assertFalse(compilerOptions0.aliasExternals);
//       assertFalse(compilerOptions0.inlineLocalFunctions);
//       assertFalse(compilerOptions0.ambiguateProperties);
//       assertFalse(compilerOptions0.exportTestFunctions);
//       assertFalse(compilerOptions0.markNoSideEffectCalls);
//       assertFalse(compilerOptions0.inlineVariables);
//       assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
//       assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
//       assertFalse(compilerOptions0.removeUnusedClassProperties);
//       assertFalse(compilerOptions0.removeUnusedVars);
//       assertFalse(compilerOptions0.printInputDelimiter);
//       assertFalse(compilerOptions0.moveFunctionDeclarations);
//       assertFalse(compilerOptions0.convertToDottedProperties);
//       assertFalse(compilerOptions0.ideMode);
//       assertFalse(compilerOptions0.optimizeCalls);
//       assertFalse(compilerOptions0.optimizeArgumentsArray);
//       assertFalse(compilerOptions0.smartNameRemoval);
//       assertFalse(compilerOptions0.optimizeParameters);
//       assertFalse(compilerOptions0.prettyPrint);
//       assertFalse(compilerOptions0.checkSuspiciousCode);
//       assertFalse(compilerOptions0.aliasAllStrings);
//       assertFalse(compilerOptions0.generatePseudoNames);
//       assertFalse(compilerOptions0.gatherCssNames);
//       assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
//       assertFalse(compilerOptions0.inlineFunctions);
//       assertFalse(compilerOptions0.reserveRawExports);
//       assertFalse(compilerOptions0.labelRenaming);
//       assertFalse(compilerOptions0.preferLineBreakAtEndOfFile);
//       assertFalse(compilerOptions0.removeDeadCode);
//       assertFalse(compilerOptions0.lineBreak);
//       assertFalse(compilerOptions0.computeFunctionSideEffects);
//       assertFalse(compilerOptions0.rewriteFunctionExpressions);
//       assertFalse(compilerOptions0.checkControlStructures);
//       assertFalse(compilerOptions0.generateExports);
//       assertFalse(compilerOptions0.foldConstants);
//       assertFalse(compilerOptions0.collapseProperties);
//       assertFalse(compilerOptions0.collapseVariableDeclarations);
//       assertFalse(compilerOptions0.crossModuleCodeMotion);
//       assertFalse(compilerOptions0.inlineConstantVars);
//       assertFalse(compilerOptions0.coalesceVariableNames);
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.options.getLanguageIn());
//       assertEquals(false, compiler0.options.isExternExportsEnabled());
//       assertEquals(false, compiler0.options.shouldColorizeErrorOutput());
//       assertEquals(false, compiler0.options.assumeStrictThis());
//       assertNull(compiler0.options.getLanguageOut());
//       assertEquals(false, compiler0.options.isRemoveUnusedClassProperties());
//       assertEquals(CompilerOptions.TweakProcessing.OFF, compiler0.options.getTweakProcessing());
//       assertEquals(CompilerOptions.TracerMode.OFF, compiler0.options.getTracerMode());
//       assertEquals(false, compiler0.options.getInferTypes());
//       assertEquals("global", logger0.getName());
//       assertEquals(false, logger0.getUseParentHandlers());
//       assertNull(logger0.getResourceBundleName());
//       assertEquals(0.0, loggerErrorManager0.getTypedPercent(), 0.01D);
//       assertEquals(0, loggerErrorManager0.getErrorCount());
//       assertEquals(0, loggerErrorManager0.getWarningCount());
//       assertEquals(false, compilerOptions0.getInferTypes());
//       assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
//       assertEquals(false, compilerOptions0.isRemoveUnusedClassProperties());
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compilerOptions0.getLanguageIn());
//       assertEquals(false, compilerOptions0.assumeStrictThis());
//       assertEquals(false, compilerOptions0.isExternExportsEnabled());
//       assertNull(compilerOptions0.getLanguageOut());
//       assertEquals(CompilerOptions.TweakProcessing.OFF, compilerOptions0.getTweakProcessing());
//       assertEquals(CompilerOptions.TracerMode.OFF, compilerOptions0.getTracerMode());
//       assertEquals(false, compiler0.acceptConstKeyword());
//       assertEquals(0.0, compiler0.getProgress(), 0.01D);
//       assertEquals(false, compiler0.isTypeCheckingEnabled());
//       assertEquals(false, compiler0.hasErrors());
//       assertEquals(0, compiler0.getWarningCount());
//       assertEquals(0, compiler0.getErrorCount());
//       assertEquals(false, compiler0.isIdeMode());
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
//       assertNotNull(compiler0.options);
//       
//       DefaultPassConfig defaultPassConfig0 = compiler0.ensureDefaultPassConfig();
//       assertEquals("global", logger0.getName());
//       assertEquals(false, logger0.getUseParentHandlers());
//       assertNull(logger0.getResourceBundleName());
//       assertEquals(0.0, loggerErrorManager0.getTypedPercent(), 0.01D);
//       assertEquals(0, loggerErrorManager0.getErrorCount());
//       assertEquals(0, loggerErrorManager0.getWarningCount());
//       assertEquals(false, compiler0.acceptConstKeyword());
//       assertEquals(0.0, compiler0.getProgress(), 0.01D);
//       assertEquals(false, compiler0.isTypeCheckingEnabled());
//       assertEquals(false, compiler0.hasErrors());
//       assertEquals(0, compiler0.getWarningCount());
//       assertEquals(0, compiler0.getErrorCount());
//       assertEquals(false, compiler0.isIdeMode());
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
//       assertNotNull(defaultPassConfig0);
//       
//       TypeCheck typeCheck0 = defaultPassConfig0.makeTypeCheck(compiler0);
//       assertEquals("global", logger0.getName());
//       assertEquals(false, logger0.getUseParentHandlers());
//       assertNull(logger0.getResourceBundleName());
//       assertEquals(0.0, loggerErrorManager0.getTypedPercent(), 0.01D);
//       assertEquals(0, loggerErrorManager0.getErrorCount());
//       assertEquals(0, loggerErrorManager0.getWarningCount());
//       assertEquals(false, compiler0.acceptConstKeyword());
//       assertEquals(0.0, compiler0.getProgress(), 0.01D);
//       assertEquals(false, compiler0.isTypeCheckingEnabled());
//       assertEquals(false, compiler0.hasErrors());
//       assertEquals(0, compiler0.getWarningCount());
//       assertEquals(0, compiler0.getErrorCount());
//       assertEquals(false, compiler0.isIdeMode());
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
//       assertNotNull(typeCheck0);
//       
//       NodeTraversal nodeTraversal0 = new NodeTraversal((AbstractCompiler) compiler0, (NodeTraversal.Callback) typeCheck0);
//       assertEquals("global", logger0.getName());
//       assertEquals(false, logger0.getUseParentHandlers());
//       assertNull(logger0.getResourceBundleName());
//       assertEquals(0.0, loggerErrorManager0.getTypedPercent(), 0.01D);
//       assertEquals(0, loggerErrorManager0.getErrorCount());
//       assertEquals(0, loggerErrorManager0.getWarningCount());
//       assertEquals(false, compiler0.acceptConstKeyword());
//       assertEquals(0.0, compiler0.getProgress(), 0.01D);
//       assertEquals(false, compiler0.isTypeCheckingEnabled());
//       assertEquals(false, compiler0.hasErrors());
//       assertEquals(0, compiler0.getWarningCount());
//       assertEquals(0, compiler0.getErrorCount());
//       assertEquals(false, compiler0.isIdeMode());
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
//       assertEquals(0, nodeTraversal0.getLineNumber());
//       assertEquals("", nodeTraversal0.getSourceName());
//       assertNotNull(nodeTraversal0);
//       
//       int int0 = 101;
//       Node node0 = new Node(int0);
//       assertEquals(false, node0.isExprResult());
//       assertEquals(false, node0.isCatch());
//       assertEquals(false, node0.isContinue());
//       assertEquals(false, node0.isFor());
//       assertEquals(false, node0.isDefaultCase());
//       assertEquals(false, node0.isNot());
//       assertEquals(0, node0.getSideEffectFlags());
//       assertEquals(-1, node0.getLineno());
//       assertEquals(false, node0.isNull());
//       assertEquals(false, node0.isScript());
//       assertEquals(false, node0.isWith());
//       assertEquals(101, node0.getType());
//       assertEquals(false, node0.isDebugger());
//       assertEquals(false, node0.isComma());
//       assertEquals(false, node0.isWhile());
//       assertEquals(false, node0.isFalse());
//       assertEquals(false, node0.hasMoreThanOneChild());
//       assertEquals(false, node0.isOptionalArg());
//       assertEquals(false, node0.isLocalResultCall());
//       assertEquals(false, node0.isHook());
//       assertEquals(false, node0.isCase());
//       assertEquals(false, node0.isLabel());
//       assertEquals(false, node0.isDo());
//       assertEquals(false, node0.isObjectLit());
//       assertEquals(false, node0.isNumber());
//       assertEquals(false, node0.isInstanceOf());
//       assertEquals(0, node0.getLength());
//       assertEquals(false, node0.hasChildren());
//       assertEquals(false, node0.isBreak());
//       assertEquals(false, node0.isReturn());
//       assertEquals(false, node0.wasEmptyNode());
//       assertEquals(false, node0.isOr());
//       assertEquals(false, node0.isTry());
//       assertEquals(false, node0.isTypeOf());
//       assertEquals(-1, node0.getCharno());
//       assertEquals(false, node0.isAdd());
//       assertEquals(false, node0.isThrow());
//       assertEquals(false, node0.isDec());
//       assertEquals(false, node0.hasOneChild());
//       assertEquals(-1, node0.getSourcePosition());
//       assertEquals(false, node0.isAssign());
//       assertEquals(false, node0.isEmpty());
//       assertEquals(false, node0.isGetterDef());
//       assertEquals(false, node0.isStringKey());
//       assertEquals(false, node0.isArrayLit());
//       assertEquals(false, node0.isCast());
//       assertEquals(false, node0.isGetElem());
//       assertEquals(false, node0.isNew());
//       assertEquals(false, node0.isRegExp());
//       assertEquals(false, node0.isNoSideEffectsCall());
//       assertEquals(false, node0.isFunction());
//       assertEquals(true, node0.isAnd());
//       assertEquals(false, node0.isSwitch());
//       assertEquals(false, node0.isString());
//       assertEquals(false, node0.isNE());
//       assertEquals(0, node0.getChildCount());
//       assertEquals(false, node0.isInc());
//       assertEquals(false, node0.isSetterDef());
//       assertEquals(false, node0.isName());
//       assertEquals(false, node0.isCall());
//       assertNull(node0.getSourceFileName());
//       assertEquals(false, node0.isTrue());
//       assertEquals(false, node0.isFromExterns());
//       assertEquals(false, node0.isIf());
//       assertEquals(false, node0.isQuotedString());
//       assertEquals(false, node0.isGetProp());
//       assertEquals(false, node0.isLabelName());
//       assertEquals(false, node0.isAssignAdd());
//       assertEquals(false, node0.isThis());
//       assertEquals(false, node0.isIn());
//       assertEquals(false, node0.isVarArgs());
//       assertEquals(false, node0.isBlock());
//       assertEquals(false, node0.isOnlyModifiesThisCall());
//       assertEquals(false, node0.isDelProp());
//       assertEquals(false, node0.isVoid());
//       assertEquals(false, node0.isVar());
//       assertEquals(false, node0.isParamList());
//       assertEquals(false, node0.isSyntheticBlock());
//       assertNotNull(node0);
//       
//       // Undeclared exception!
//       try {
//         boolean boolean0 = typeCheck0.visitName(nodeTraversal0, node0, node0);
//         fail("Expecting exception: UnsupportedOperationException");
//       
//       } catch(UnsupportedOperationException e) {
//          //
//          // AND is not a string node
//          //
//       }
//   }

  @Test
  public void test4() {}
//   @Test
//   public void test4()  throws Throwable  {
//       Logger logger0 = Logger.getGlobal();
//       assertNull(logger0.getResourceBundleName());
//       assertEquals(false, logger0.getUseParentHandlers());
//       assertEquals("global", logger0.getName());
//       assertNotNull(logger0);
//       
//       LoggerErrorManager loggerErrorManager0 = new LoggerErrorManager(logger0);
//       assertEquals(0, loggerErrorManager0.getErrorCount());
//       assertEquals(0, loggerErrorManager0.getWarningCount());
//       assertEquals(0.0, loggerErrorManager0.getTypedPercent(), 0.01D);
//       assertNull(logger0.getResourceBundleName());
//       assertEquals(false, logger0.getUseParentHandlers());
//       assertEquals("global", logger0.getName());
//       assertNotNull(loggerErrorManager0);
//       
//       Compiler compiler0 = new Compiler((ErrorManager) loggerErrorManager0);
//       assertEquals(0.0, compiler0.getProgress(), 0.01D);
//       assertEquals(0, compiler0.getErrorCount());
//       assertEquals(0, compiler0.getWarningCount());
//       assertEquals(0, loggerErrorManager0.getErrorCount());
//       assertEquals(0, loggerErrorManager0.getWarningCount());
//       assertEquals(0.0, loggerErrorManager0.getTypedPercent(), 0.01D);
//       assertNull(logger0.getResourceBundleName());
//       assertEquals(false, logger0.getUseParentHandlers());
//       assertEquals("global", logger0.getName());
//       assertNotNull(compiler0);
//       
//       CompilerOptions compilerOptions0 = new CompilerOptions();
//       assertFalse(compilerOptions0.convertToDottedProperties);
//       assertFalse(compilerOptions0.crossModuleCodeMotion);
//       assertFalse(compilerOptions0.aliasAllStrings);
//       assertFalse(compilerOptions0.preferLineBreakAtEndOfFile);
//       assertFalse(compilerOptions0.inlineVariables);
//       assertFalse(compilerOptions0.labelRenaming);
//       assertFalse(compilerOptions0.markAsCompiled);
//       assertFalse(compilerOptions0.gatherCssNames);
//       assertFalse(compilerOptions0.inlineGetters);
//       assertFalse(compilerOptions0.exportTestFunctions);
//       assertFalse(compilerOptions0.optimizeReturns);
//       assertFalse(compilerOptions0.disambiguateProperties);
//       assertFalse(compilerOptions0.removeUnusedVars);
//       assertFalse(compilerOptions0.removeTryCatchFinally);
//       assertFalse(compilerOptions0.foldConstants);
//       assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
//       assertFalse(compilerOptions0.aliasKeywords);
//       assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
//       assertFalse(compilerOptions0.closurePass);
//       assertFalse(compilerOptions0.aliasExternals);
//       assertFalse(compilerOptions0.computeFunctionSideEffects);
//       assertFalse(compilerOptions0.ambiguateProperties);
//       assertFalse(compilerOptions0.ideMode);
//       assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
//       assertFalse(compilerOptions0.inlineLocalFunctions);
//       assertFalse(compilerOptions0.checkSuspiciousCode);
//       assertFalse(compilerOptions0.generatePseudoNames);
//       assertFalse(compilerOptions0.deadAssignmentElimination);
//       assertFalse(compilerOptions0.collapseAnonymousFunctions);
//       assertFalse(compilerOptions0.markNoSideEffectCalls);
//       assertFalse(compilerOptions0.inlineFunctions);
//       assertFalse(compilerOptions0.checkControlStructures);
//       assertFalse(compilerOptions0.checkSymbols);
//       assertFalse(compilerOptions0.printInputDelimiter);
//       assertFalse(compilerOptions0.moveFunctionDeclarations);
//       assertFalse(compilerOptions0.collapseVariableDeclarations);
//       assertFalse(compilerOptions0.devirtualizePrototypeMethods);
//       assertFalse(compilerOptions0.removeUnusedLocalVars);
//       assertFalse(compilerOptions0.crossModuleMethodMotion);
//       assertFalse(compilerOptions0.removeDeadCode);
//       assertFalse(compilerOptions0.flowSensitiveInlineVariables);
//       assertFalse(compilerOptions0.optimizeCalls);
//       assertFalse(compilerOptions0.collapseProperties);
//       assertFalse(compilerOptions0.recordFunctionInformation);
//       assertFalse(compilerOptions0.optimizeArgumentsArray);
//       assertFalse(compilerOptions0.reserveRawExports);
//       assertFalse(compilerOptions0.generateExports);
//       assertFalse(compilerOptions0.rewriteFunctionExpressions);
//       assertFalse(compilerOptions0.lineBreak);
//       assertFalse(compilerOptions0.coalesceVariableNames);
//       assertFalse(compilerOptions0.prettyPrint);
//       assertFalse(compilerOptions0.inlineConstantVars);
//       assertFalse(compilerOptions0.jqueryPass);
//       assertFalse(compilerOptions0.removeUnusedClassProperties);
//       assertFalse(compilerOptions0.optimizeParameters);
//       assertFalse(compilerOptions0.checkTypes);
//       assertFalse(compilerOptions0.smartNameRemoval);
//       assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
//       assertEquals(false, compilerOptions0.assumeStrictThis());
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compilerOptions0.getLanguageIn());
//       assertEquals(false, compilerOptions0.getInferTypes());
//       assertEquals(CompilerOptions.TweakProcessing.OFF, compilerOptions0.getTweakProcessing());
//       assertEquals(false, compilerOptions0.isRemoveUnusedClassProperties());
//       assertEquals(false, compilerOptions0.isExternExportsEnabled());
//       assertEquals(CompilerOptions.TracerMode.OFF, compilerOptions0.getTracerMode());
//       assertNull(compilerOptions0.getLanguageOut());
//       assertNotNull(compilerOptions0);
//       
//       compiler0.options = compilerOptions0;
//       assertFalse(compiler0.options.aliasKeywords);
//       assertFalse(compiler0.options.inlineConstantVars);
//       assertFalse(compiler0.options.removeUnusedClassProperties);
//       assertFalse(compiler0.options.rewriteFunctionExpressions);
//       assertFalse(compiler0.options.checkTypes);
//       assertFalse(compiler0.options.checkSymbols);
//       assertFalse(compiler0.options.convertToDottedProperties);
//       assertFalse(compiler0.options.exportTestFunctions);
//       assertFalse(compiler0.options.jqueryPass);
//       assertFalse(compiler0.options.inlineVariables);
//       assertFalse(compiler0.options.closurePass);
//       assertFalse(compiler0.options.optimizeCalls);
//       assertFalse(compiler0.options.generatePseudoNames);
//       assertFalse(compiler0.options.removeUnusedPrototypePropertiesInExterns);
//       assertFalse(compiler0.options.optimizeParameters);
//       assertFalse(compiler0.options.removeTryCatchFinally);
//       assertFalse(compiler0.options.removeDeadCode);
//       assertFalse(compiler0.options.devirtualizePrototypeMethods);
//       assertFalse(compiler0.options.gatherCssNames);
//       assertFalse(compiler0.options.inlineLocalFunctions);
//       assertFalse(compiler0.options.reserveRawExports);
//       assertFalse(compiler0.options.recordFunctionInformation);
//       assertFalse(compiler0.options.checkControlStructures);
//       assertFalse(compiler0.options.collapseVariableDeclarations);
//       assertFalse(compiler0.options.disambiguateProperties);
//       assertFalse(compiler0.options.preferLineBreakAtEndOfFile);
//       assertFalse(compiler0.options.extractPrototypeMemberDeclarations);
//       assertFalse(compiler0.options.lineBreak);
//       assertFalse(compiler0.options.markAsCompiled);
//       assertFalse(compiler0.options.inlineFunctions);
//       assertFalse(compiler0.options.coalesceVariableNames);
//       assertFalse(compiler0.options.moveFunctionDeclarations);
//       assertFalse(compiler0.options.optimizeArgumentsArray);
//       assertFalse(compiler0.options.ideMode);
//       assertFalse(compiler0.options.crossModuleMethodMotion);
//       assertFalse(compiler0.options.collapseProperties);
//       assertFalse(compiler0.options.computeFunctionSideEffects);
//       assertFalse(compiler0.options.printInputDelimiter);
//       assertFalse(compiler0.options.removeUnusedVars);
//       assertFalse(compiler0.options.aliasAllStrings);
//       assertFalse(compiler0.options.labelRenaming);
//       assertFalse(compiler0.options.optimizeReturns);
//       assertFalse(compiler0.options.generateExports);
//       assertFalse(compiler0.options.checkSuspiciousCode);
//       assertFalse(compiler0.options.flowSensitiveInlineVariables);
//       assertFalse(compiler0.options.inlineGetters);
//       assertFalse(compiler0.options.foldConstants);
//       assertFalse(compiler0.options.collapseAnonymousFunctions);
//       assertFalse(compiler0.options.aliasExternals);
//       assertFalse(compiler0.options.crossModuleCodeMotion);
//       assertFalse(compiler0.options.ambiguateProperties);
//       assertFalse(compiler0.options.markNoSideEffectCalls);
//       assertFalse(compiler0.options.smartNameRemoval);
//       assertFalse(compiler0.options.deadAssignmentElimination);
//       assertFalse(compiler0.options.prettyPrint);
//       assertFalse(compiler0.options.removeUnusedLocalVars);
//       assertFalse(compiler0.options.removeUnusedPrototypeProperties);
//       assertFalse(compilerOptions0.convertToDottedProperties);
//       assertFalse(compilerOptions0.crossModuleCodeMotion);
//       assertFalse(compilerOptions0.aliasAllStrings);
//       assertFalse(compilerOptions0.preferLineBreakAtEndOfFile);
//       assertFalse(compilerOptions0.inlineVariables);
//       assertFalse(compilerOptions0.labelRenaming);
//       assertFalse(compilerOptions0.markAsCompiled);
//       assertFalse(compilerOptions0.gatherCssNames);
//       assertFalse(compilerOptions0.inlineGetters);
//       assertFalse(compilerOptions0.exportTestFunctions);
//       assertFalse(compilerOptions0.optimizeReturns);
//       assertFalse(compilerOptions0.disambiguateProperties);
//       assertFalse(compilerOptions0.removeUnusedVars);
//       assertFalse(compilerOptions0.removeTryCatchFinally);
//       assertFalse(compilerOptions0.foldConstants);
//       assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
//       assertFalse(compilerOptions0.aliasKeywords);
//       assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
//       assertFalse(compilerOptions0.closurePass);
//       assertFalse(compilerOptions0.aliasExternals);
//       assertFalse(compilerOptions0.computeFunctionSideEffects);
//       assertFalse(compilerOptions0.ambiguateProperties);
//       assertFalse(compilerOptions0.ideMode);
//       assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
//       assertFalse(compilerOptions0.inlineLocalFunctions);
//       assertFalse(compilerOptions0.checkSuspiciousCode);
//       assertFalse(compilerOptions0.generatePseudoNames);
//       assertFalse(compilerOptions0.deadAssignmentElimination);
//       assertFalse(compilerOptions0.collapseAnonymousFunctions);
//       assertFalse(compilerOptions0.markNoSideEffectCalls);
//       assertFalse(compilerOptions0.inlineFunctions);
//       assertFalse(compilerOptions0.checkControlStructures);
//       assertFalse(compilerOptions0.checkSymbols);
//       assertFalse(compilerOptions0.printInputDelimiter);
//       assertFalse(compilerOptions0.moveFunctionDeclarations);
//       assertFalse(compilerOptions0.collapseVariableDeclarations);
//       assertFalse(compilerOptions0.devirtualizePrototypeMethods);
//       assertFalse(compilerOptions0.removeUnusedLocalVars);
//       assertFalse(compilerOptions0.crossModuleMethodMotion);
//       assertFalse(compilerOptions0.removeDeadCode);
//       assertFalse(compilerOptions0.flowSensitiveInlineVariables);
//       assertFalse(compilerOptions0.optimizeCalls);
//       assertFalse(compilerOptions0.collapseProperties);
//       assertFalse(compilerOptions0.recordFunctionInformation);
//       assertFalse(compilerOptions0.optimizeArgumentsArray);
//       assertFalse(compilerOptions0.reserveRawExports);
//       assertFalse(compilerOptions0.generateExports);
//       assertFalse(compilerOptions0.rewriteFunctionExpressions);
//       assertFalse(compilerOptions0.lineBreak);
//       assertFalse(compilerOptions0.coalesceVariableNames);
//       assertFalse(compilerOptions0.prettyPrint);
//       assertFalse(compilerOptions0.inlineConstantVars);
//       assertFalse(compilerOptions0.jqueryPass);
//       assertFalse(compilerOptions0.removeUnusedClassProperties);
//       assertFalse(compilerOptions0.optimizeParameters);
//       assertFalse(compilerOptions0.checkTypes);
//       assertFalse(compilerOptions0.smartNameRemoval);
//       assertEquals(false, compiler0.isTypeCheckingEnabled());
//       assertEquals(0.0, compiler0.getProgress(), 0.01D);
//       assertEquals(false, compiler0.isIdeMode());
//       assertEquals(false, compiler0.acceptConstKeyword());
//       assertEquals(0, compiler0.getErrorCount());
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
//       assertEquals(false, compiler0.hasErrors());
//       assertEquals(0, compiler0.getWarningCount());
//       assertEquals(0, loggerErrorManager0.getErrorCount());
//       assertEquals(0, loggerErrorManager0.getWarningCount());
//       assertEquals(0.0, loggerErrorManager0.getTypedPercent(), 0.01D);
//       assertEquals(false, compiler0.options.getInferTypes());
//       assertEquals(false, compiler0.options.assumeStrictThis());
//       assertEquals(false, compiler0.options.shouldColorizeErrorOutput());
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.options.getLanguageIn());
//       assertNull(compiler0.options.getLanguageOut());
//       assertEquals(false, compiler0.options.isRemoveUnusedClassProperties());
//       assertEquals(CompilerOptions.TweakProcessing.OFF, compiler0.options.getTweakProcessing());
//       assertEquals(false, compiler0.options.isExternExportsEnabled());
//       assertEquals(CompilerOptions.TracerMode.OFF, compiler0.options.getTracerMode());
//       assertNull(logger0.getResourceBundleName());
//       assertEquals(false, logger0.getUseParentHandlers());
//       assertEquals("global", logger0.getName());
//       assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
//       assertEquals(false, compilerOptions0.assumeStrictThis());
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compilerOptions0.getLanguageIn());
//       assertEquals(false, compilerOptions0.getInferTypes());
//       assertEquals(CompilerOptions.TweakProcessing.OFF, compilerOptions0.getTweakProcessing());
//       assertEquals(false, compilerOptions0.isRemoveUnusedClassProperties());
//       assertEquals(false, compilerOptions0.isExternExportsEnabled());
//       assertEquals(CompilerOptions.TracerMode.OFF, compilerOptions0.getTracerMode());
//       assertNull(compilerOptions0.getLanguageOut());
//       assertNotNull(compiler0.options);
//       
//       DefaultPassConfig defaultPassConfig0 = compiler0.ensureDefaultPassConfig();
//       assertEquals(false, compiler0.isTypeCheckingEnabled());
//       assertEquals(0.0, compiler0.getProgress(), 0.01D);
//       assertEquals(false, compiler0.isIdeMode());
//       assertEquals(false, compiler0.acceptConstKeyword());
//       assertEquals(0, compiler0.getErrorCount());
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
//       assertEquals(false, compiler0.hasErrors());
//       assertEquals(0, compiler0.getWarningCount());
//       assertEquals(0, loggerErrorManager0.getErrorCount());
//       assertEquals(0, loggerErrorManager0.getWarningCount());
//       assertEquals(0.0, loggerErrorManager0.getTypedPercent(), 0.01D);
//       assertNull(logger0.getResourceBundleName());
//       assertEquals(false, logger0.getUseParentHandlers());
//       assertEquals("global", logger0.getName());
//       assertNotNull(defaultPassConfig0);
//       
//       TypeCheck typeCheck0 = defaultPassConfig0.makeTypeCheck(compiler0);
//       assertEquals(false, compiler0.isTypeCheckingEnabled());
//       assertEquals(0.0, compiler0.getProgress(), 0.01D);
//       assertEquals(false, compiler0.isIdeMode());
//       assertEquals(false, compiler0.acceptConstKeyword());
//       assertEquals(0, compiler0.getErrorCount());
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
//       assertEquals(false, compiler0.hasErrors());
//       assertEquals(0, compiler0.getWarningCount());
//       assertEquals(0, loggerErrorManager0.getErrorCount());
//       assertEquals(0, loggerErrorManager0.getWarningCount());
//       assertEquals(0.0, loggerErrorManager0.getTypedPercent(), 0.01D);
//       assertNull(logger0.getResourceBundleName());
//       assertEquals(false, logger0.getUseParentHandlers());
//       assertEquals("global", logger0.getName());
//       assertNotNull(typeCheck0);
//       
//       NodeTraversal nodeTraversal0 = new NodeTraversal((AbstractCompiler) compiler0, (NodeTraversal.Callback) typeCheck0);
//       assertEquals(false, compiler0.isTypeCheckingEnabled());
//       assertEquals(0.0, compiler0.getProgress(), 0.01D);
//       assertEquals(false, compiler0.isIdeMode());
//       assertEquals(false, compiler0.acceptConstKeyword());
//       assertEquals(0, compiler0.getErrorCount());
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
//       assertEquals(false, compiler0.hasErrors());
//       assertEquals(0, compiler0.getWarningCount());
//       assertEquals(0, loggerErrorManager0.getErrorCount());
//       assertEquals(0, loggerErrorManager0.getWarningCount());
//       assertEquals(0.0, loggerErrorManager0.getTypedPercent(), 0.01D);
//       assertEquals("", nodeTraversal0.getSourceName());
//       assertEquals(0, nodeTraversal0.getLineNumber());
//       assertNull(logger0.getResourceBundleName());
//       assertEquals(false, logger0.getUseParentHandlers());
//       assertEquals("global", logger0.getName());
//       assertNotNull(nodeTraversal0);
//       
//       int int0 = 101;
//       Node node0 = new Node(int0);
//       assertEquals(false, node0.isAssignAdd());
//       assertEquals(false, node0.isScript());
//       assertEquals(false, node0.isString());
//       assertEquals(false, node0.isTry());
//       assertEquals(false, node0.isLabelName());
//       assertEquals(false, node0.isVoid());
//       assertEquals(false, node0.isGetterDef());
//       assertEquals(false, node0.isExprResult());
//       assertEquals(false, node0.isNot());
//       assertEquals(false, node0.isFor());
//       assertEquals(false, node0.isSyntheticBlock());
//       assertEquals(false, node0.isName());
//       assertEquals(false, node0.isSetterDef());
//       assertEquals(false, node0.isDec());
//       assertEquals(false, node0.wasEmptyNode());
//       assertEquals(false, node0.isWith());
//       assertEquals(-1, node0.getLineno());
//       assertEquals(false, node0.isThrow());
//       assertEquals(false, node0.isReturn());
//       assertEquals(false, node0.hasMoreThanOneChild());
//       assertEquals(false, node0.isCase());
//       assertEquals(-1, node0.getCharno());
//       assertEquals(false, node0.isNew());
//       assertEquals(false, node0.isInc());
//       assertEquals(false, node0.isIn());
//       assertEquals(false, node0.isTypeOf());
//       assertEquals(false, node0.isRegExp());
//       assertEquals(false, node0.isDelProp());
//       assertEquals(false, node0.isContinue());
//       assertEquals(false, node0.isNumber());
//       assertEquals(false, node0.isComma());
//       assertEquals(false, node0.isIf());
//       assertEquals(false, node0.isVar());
//       assertEquals(false, node0.isFalse());
//       assertEquals(false, node0.isArrayLit());
//       assertEquals(false, node0.isGetProp());
//       assertEquals(false, node0.isCatch());
//       assertEquals(false, node0.isAssign());
//       assertEquals(false, node0.isNE());
//       assertEquals(false, node0.isNoSideEffectsCall());
//       assertEquals(false, node0.isDo());
//       assertEquals(false, node0.isGetElem());
//       assertEquals(0, node0.getLength());
//       assertEquals(false, node0.isFromExterns());
//       assertEquals(false, node0.isStringKey());
//       assertEquals(false, node0.isLocalResultCall());
//       assertEquals(false, node0.isEmpty());
//       assertEquals(false, node0.isCast());
//       assertEquals(false, node0.isBreak());
//       assertEquals(0, node0.getChildCount());
//       assertEquals(false, node0.isThis());
//       assertEquals(false, node0.isQuotedString());
//       assertEquals(false, node0.isWhile());
//       assertEquals(false, node0.isLabel());
//       assertEquals(false, node0.isDefaultCase());
//       assertEquals(false, node0.isTrue());
//       assertEquals(false, node0.isOptionalArg());
//       assertEquals(false, node0.isVarArgs());
//       assertEquals(-1, node0.getSourcePosition());
//       assertEquals(false, node0.isInstanceOf());
//       assertEquals(false, node0.isFunction());
//       assertEquals(false, node0.isBlock());
//       assertEquals(false, node0.isObjectLit());
//       assertEquals(0, node0.getSideEffectFlags());
//       assertEquals(false, node0.isOnlyModifiesThisCall());
//       assertEquals(false, node0.isAdd());
//       assertEquals(false, node0.isHook());
//       assertEquals(false, node0.isSwitch());
//       assertEquals(false, node0.hasChildren());
//       assertEquals(false, node0.isCall());
//       assertNull(node0.getSourceFileName());
//       assertEquals(false, node0.hasOneChild());
//       assertEquals(false, node0.isNull());
//       assertEquals(false, node0.isParamList());
//       assertEquals(false, node0.isDebugger());
//       assertEquals(false, node0.isOr());
//       assertEquals(101, node0.getType());
//       assertEquals(true, node0.isAnd());
//       assertNotNull(node0);
//       
//       typeCheck0.visit(nodeTraversal0, node0, node0);
//       assertEquals(false, node0.isAssignAdd());
//       assertEquals(false, node0.isScript());
//       assertEquals(false, node0.isString());
//       assertEquals(false, node0.isTry());
//       assertEquals(false, node0.isLabelName());
//       assertEquals(false, node0.isVoid());
//       assertEquals(false, node0.isGetterDef());
//       assertEquals(false, node0.isExprResult());
//       assertEquals(false, node0.isNot());
//       assertEquals(false, node0.isFor());
//       assertEquals(false, node0.isSyntheticBlock());
//       assertEquals(false, node0.isName());
//       assertEquals(false, node0.isSetterDef());
//       assertEquals(false, node0.isDec());
//       assertEquals(false, node0.wasEmptyNode());
//       assertEquals(false, node0.isWith());
//       assertEquals(-1, node0.getLineno());
//       assertEquals(false, node0.isThrow());
//       assertEquals(false, node0.isReturn());
//       assertEquals(false, node0.hasMoreThanOneChild());
//       assertEquals(false, node0.isCase());
//       assertEquals(-1, node0.getCharno());
//       assertEquals(false, node0.isNew());
//       assertEquals(false, node0.isInc());
//       assertEquals(false, node0.isIn());
//       assertEquals(false, node0.isTypeOf());
//       assertEquals(false, node0.isRegExp());
//       assertEquals(false, node0.isDelProp());
//       assertEquals(false, node0.isContinue());
//       assertEquals(false, node0.isNumber());
//       assertEquals(false, node0.isComma());
//       assertEquals(false, node0.isIf());
//       assertEquals(false, node0.isVar());
//       assertEquals(false, node0.isFalse());
//       assertEquals(false, node0.isArrayLit());
//       assertEquals(false, node0.isGetProp());
//       assertEquals(false, node0.isCatch());
//       assertEquals(false, node0.isAssign());
//       assertEquals(false, node0.isNE());
//       assertEquals(false, node0.isNoSideEffectsCall());
//       assertEquals(false, node0.isDo());
//       assertEquals(false, node0.isGetElem());
//       assertEquals(0, node0.getLength());
//       assertEquals(false, node0.isFromExterns());
//       assertEquals(false, node0.isStringKey());
//       assertEquals(false, node0.isLocalResultCall());
//       assertEquals(false, node0.isEmpty());
//       assertEquals(false, node0.isCast());
//       assertEquals(false, node0.isBreak());
//       assertEquals(0, node0.getChildCount());
//       assertEquals(false, node0.isThis());
//       assertEquals(false, node0.isQuotedString());
//       assertEquals(false, node0.isWhile());
//       assertEquals(false, node0.isLabel());
//       assertEquals(false, node0.isDefaultCase());
//       assertEquals(false, node0.isTrue());
//       assertEquals(false, node0.isOptionalArg());
//       assertEquals(false, node0.isVarArgs());
//       assertEquals(-1, node0.getSourcePosition());
//       assertEquals(false, node0.isInstanceOf());
//       assertEquals(false, node0.isFunction());
//       assertEquals(false, node0.isBlock());
//       assertEquals(false, node0.isObjectLit());
//       assertEquals(0, node0.getSideEffectFlags());
//       assertEquals(false, node0.isOnlyModifiesThisCall());
//       assertEquals(false, node0.isAdd());
//       assertEquals(false, node0.isHook());
//       assertEquals(false, node0.isSwitch());
//       assertEquals(false, node0.hasChildren());
//       assertEquals(false, node0.isCall());
//       assertNull(node0.getSourceFileName());
//       assertEquals(false, node0.hasOneChild());
//       assertEquals(false, node0.isNull());
//       assertEquals(false, node0.isParamList());
//       assertEquals(false, node0.isDebugger());
//       assertEquals(false, node0.isOr());
//       assertEquals(101, node0.getType());
//       assertEquals(true, node0.isAnd());
//       assertEquals(false, compiler0.isTypeCheckingEnabled());
//       assertEquals(0.0, compiler0.getProgress(), 0.01D);
//       assertEquals(false, compiler0.isIdeMode());
//       assertEquals(false, compiler0.acceptConstKeyword());
//       assertEquals(0, compiler0.getErrorCount());
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
//       assertEquals(false, compiler0.hasErrors());
//       assertEquals(0, compiler0.getWarningCount());
//       assertEquals(0, loggerErrorManager0.getErrorCount());
//       assertEquals(0, loggerErrorManager0.getWarningCount());
//       assertEquals(0.0, loggerErrorManager0.getTypedPercent(), 0.01D);
//       assertEquals("", nodeTraversal0.getSourceName());
//       assertEquals(0, nodeTraversal0.getLineNumber());
//       assertNull(logger0.getResourceBundleName());
//       assertEquals(false, logger0.getUseParentHandlers());
//       assertEquals("global", logger0.getName());
//       
//       typeCheck0.visit(nodeTraversal0, node0, node0);
//       assertEquals(false, node0.isAssignAdd());
//       assertEquals(false, node0.isScript());
//       assertEquals(false, node0.isString());
//       assertEquals(false, node0.isTry());
//       assertEquals(false, node0.isLabelName());
//       assertEquals(false, node0.isVoid());
//       assertEquals(false, node0.isGetterDef());
//       assertEquals(false, node0.isExprResult());
//       assertEquals(false, node0.isNot());
//       assertEquals(false, node0.isFor());
//       assertEquals(false, node0.isSyntheticBlock());
//       assertEquals(false, node0.isName());
//       assertEquals(false, node0.isSetterDef());
//       assertEquals(false, node0.isDec());
//       assertEquals(false, node0.wasEmptyNode());
//       assertEquals(false, node0.isWith());
//       assertEquals(-1, node0.getLineno());
//       assertEquals(false, node0.isThrow());
//       assertEquals(false, node0.isReturn());
//       assertEquals(false, node0.hasMoreThanOneChild());
//       assertEquals(false, node0.isCase());
//       assertEquals(-1, node0.getCharno());
//       assertEquals(false, node0.isNew());
//       assertEquals(false, node0.isInc());
//       assertEquals(false, node0.isIn());
//       assertEquals(false, node0.isTypeOf());
//       assertEquals(false, node0.isRegExp());
//       assertEquals(false, node0.isDelProp());
//       assertEquals(false, node0.isContinue());
//       assertEquals(false, node0.isNumber());
//       assertEquals(false, node0.isComma());
//       assertEquals(false, node0.isIf());
//       assertEquals(false, node0.isVar());
//       assertEquals(false, node0.isFalse());
//       assertEquals(false, node0.isArrayLit());
//       assertEquals(false, node0.isGetProp());
//       assertEquals(false, node0.isCatch());
//       assertEquals(false, node0.isAssign());
//       assertEquals(false, node0.isNE());
//       assertEquals(false, node0.isNoSideEffectsCall());
//       assertEquals(false, node0.isDo());
//       assertEquals(false, node0.isGetElem());
//       assertEquals(0, node0.getLength());
//       assertEquals(false, node0.isFromExterns());
//       assertEquals(false, node0.isStringKey());
//       assertEquals(false, node0.isLocalResultCall());
//       assertEquals(false, node0.isEmpty());
//       assertEquals(false, node0.isCast());
//       assertEquals(false, node0.isBreak());
//       assertEquals(0, node0.getChildCount());
//       assertEquals(false, node0.isThis());
//       assertEquals(false, node0.isQuotedString());
//       assertEquals(false, node0.isWhile());
//       assertEquals(false, node0.isLabel());
//       assertEquals(false, node0.isDefaultCase());
//       assertEquals(false, node0.isTrue());
//       assertEquals(false, node0.isOptionalArg());
//       assertEquals(false, node0.isVarArgs());
//       assertEquals(-1, node0.getSourcePosition());
//       assertEquals(false, node0.isInstanceOf());
//       assertEquals(false, node0.isFunction());
//       assertEquals(false, node0.isBlock());
//       assertEquals(false, node0.isObjectLit());
//       assertEquals(0, node0.getSideEffectFlags());
//       assertEquals(false, node0.isOnlyModifiesThisCall());
//       assertEquals(false, node0.isAdd());
//       assertEquals(false, node0.isHook());
//       assertEquals(false, node0.isSwitch());
//       assertEquals(false, node0.hasChildren());
//       assertEquals(false, node0.isCall());
//       assertNull(node0.getSourceFileName());
//       assertEquals(false, node0.hasOneChild());
//       assertEquals(false, node0.isNull());
//       assertEquals(false, node0.isParamList());
//       assertEquals(false, node0.isDebugger());
//       assertEquals(false, node0.isOr());
//       assertEquals(101, node0.getType());
//       assertEquals(true, node0.isAnd());
//       assertEquals(false, compiler0.isTypeCheckingEnabled());
//       assertEquals(0.0, compiler0.getProgress(), 0.01D);
//       assertEquals(false, compiler0.isIdeMode());
//       assertEquals(false, compiler0.acceptConstKeyword());
//       assertEquals(0, compiler0.getErrorCount());
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
//       assertEquals(false, compiler0.hasErrors());
//       assertEquals(0, compiler0.getWarningCount());
//       assertEquals(0, loggerErrorManager0.getErrorCount());
//       assertEquals(0, loggerErrorManager0.getWarningCount());
//       assertEquals(0.0, loggerErrorManager0.getTypedPercent(), 0.01D);
//       assertEquals("", nodeTraversal0.getSourceName());
//       assertEquals(0, nodeTraversal0.getLineNumber());
//       assertNull(logger0.getResourceBundleName());
//       assertEquals(false, logger0.getUseParentHandlers());
//       assertEquals("global", logger0.getName());
//   }

  @Test
  public void test5()  throws Throwable  {
      String string0 = "";
      Compiler compiler0 = new Compiler();
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertNotNull(compiler0);
      
      Node node0 = compiler0.parseTestCode(string0);
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isString());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isTry());
      assertEquals(132, node0.getType());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isBlock());
      assertEquals(0, node0.getCharno());
      assertEquals("[testcode]", node0.getSourceFileName());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isSwitch());
      assertEquals(true, node0.isScript());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(true, node0.isSyntheticBlock());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(1, node0.getLineno());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isCast());
      assertEquals(0, node0.getChildCount());
      assertEquals(4096, node0.getSourcePosition());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isStringKey());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isIn());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertNotNull(node0);
      
      DefaultPassConfig defaultPassConfig0 = compiler0.ensureDefaultPassConfig();
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertNotNull(defaultPassConfig0);
      
      PassConfig.PassConfigDelegate passConfig_PassConfigDelegate0 = new PassConfig.PassConfigDelegate(defaultPassConfig0);
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertNotNull(passConfig_PassConfigDelegate0);
      
      TypeCheck typeCheck0 = passConfig_PassConfigDelegate0.makeTypeCheck(compiler0);
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertNotNull(typeCheck0);
      
      TypedScopeCreator typedScopeCreator0 = new TypedScopeCreator(compiler0);
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertNotNull(typedScopeCreator0);
      
      NodeTraversal nodeTraversal0 = new NodeTraversal((AbstractCompiler) compiler0, (NodeTraversal.Callback) typeCheck0, (ScopeCreator) typedScopeCreator0);
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(0, nodeTraversal0.getLineNumber());
      assertEquals("", nodeTraversal0.getSourceName());
      assertNotNull(nodeTraversal0);
      
      boolean boolean0 = typeCheck0.shouldTraverse(nodeTraversal0, node0, node0);
      assertTrue(boolean0);
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isString());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isTry());
      assertEquals(132, node0.getType());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isBlock());
      assertEquals(0, node0.getCharno());
      assertEquals("[testcode]", node0.getSourceFileName());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isSwitch());
      assertEquals(true, node0.isScript());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(true, node0.isSyntheticBlock());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(1, node0.getLineno());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isCast());
      assertEquals(0, node0.getChildCount());
      assertEquals(4096, node0.getSourcePosition());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isStringKey());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isIn());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(0, nodeTraversal0.getLineNumber());
      assertEquals("", nodeTraversal0.getSourceName());
  }

  @Test
  public void test6()  throws Throwable  {
      String string0 = "";
      Compiler compiler0 = new Compiler();
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertNotNull(compiler0);
      
      Node node0 = compiler0.parseTestCode(string0);
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isExprResult());
      assertEquals(true, node0.isSyntheticBlock());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isVarArgs());
      assertEquals(true, node0.isScript());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isOr());
      assertEquals(132, node0.getType());
      assertEquals(false, node0.isNot());
      assertEquals(0, node0.getCharno());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(4096, node0.getSourcePosition());
      assertEquals(1, node0.getLineno());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isLabel());
      assertEquals("[testcode]", node0.getSourceFileName());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isCast());
      assertEquals(false, node0.isString());
      assertEquals(false, node0.isStringKey());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isCatch());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertNotNull(node0);
      
      node0.addSuppression(string0);
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isExprResult());
      assertEquals(true, node0.isSyntheticBlock());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isVarArgs());
      assertEquals(true, node0.isScript());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isOr());
      assertEquals(132, node0.getType());
      assertEquals(false, node0.isNot());
      assertEquals(0, node0.getCharno());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(4096, node0.getSourcePosition());
      assertEquals(1, node0.getLineno());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isLabel());
      assertEquals("[testcode]", node0.getSourceFileName());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isCast());
      assertEquals(false, node0.isString());
      assertEquals(false, node0.isStringKey());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isCatch());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      
      DefaultPassConfig defaultPassConfig0 = compiler0.ensureDefaultPassConfig();
      assertEquals(false, compiler0.hasErrors());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertNotNull(defaultPassConfig0);
      
      PassConfig.PassConfigDelegate passConfig_PassConfigDelegate0 = new PassConfig.PassConfigDelegate(defaultPassConfig0);
      assertEquals(false, compiler0.hasErrors());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertNotNull(passConfig_PassConfigDelegate0);
      
      TypeCheck typeCheck0 = passConfig_PassConfigDelegate0.makeTypeCheck(compiler0);
      assertEquals(false, compiler0.hasErrors());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertNotNull(typeCheck0);
      
      TypedScopeCreator typedScopeCreator0 = new TypedScopeCreator(compiler0);
      assertEquals(false, compiler0.hasErrors());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertNotNull(typedScopeCreator0);
      
      NodeTraversal nodeTraversal0 = new NodeTraversal((AbstractCompiler) compiler0, (NodeTraversal.Callback) typeCheck0, (ScopeCreator) typedScopeCreator0);
      assertEquals(false, compiler0.hasErrors());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(0, nodeTraversal0.getLineNumber());
      assertEquals("", nodeTraversal0.getSourceName());
      assertNotNull(nodeTraversal0);
      
      typeCheck0.visit(nodeTraversal0, node0, node0);
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isExprResult());
      assertEquals(true, node0.isSyntheticBlock());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isVarArgs());
      assertEquals(true, node0.isScript());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isOr());
      assertEquals(132, node0.getType());
      assertEquals(false, node0.isNot());
      assertEquals(0, node0.getCharno());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(4096, node0.getSourcePosition());
      assertEquals(1, node0.getLineno());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isLabel());
      assertEquals("[testcode]", node0.getSourceFileName());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isCast());
      assertEquals(false, node0.isString());
      assertEquals(false, node0.isStringKey());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isCatch());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(0, nodeTraversal0.getLineNumber());
      assertEquals("", nodeTraversal0.getSourceName());
  }

  @Test
  public void test7()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertNotNull(compiler0);
      
      String string0 = "{}9bH>fFik";
      Node node0 = compiler0.parseTestCode(string0);
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(true, compiler0.hasErrors());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(1, compiler0.getErrorCount());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isFromExterns());
      assertEquals("[testcode]", node0.getSourceFileName());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isString());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isStringKey());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isCast());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isAdd());
      assertEquals(132, node0.getType());
      assertEquals(true, node0.isScript());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isContinue());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isNew());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isAnd());
      assertNotNull(node0);
      
      DefaultPassConfig defaultPassConfig0 = compiler0.ensureDefaultPassConfig();
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(true, compiler0.hasErrors());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(1, compiler0.getErrorCount());
      assertNotNull(defaultPassConfig0);
      
      PassConfig.PassConfigDelegate passConfig_PassConfigDelegate0 = new PassConfig.PassConfigDelegate(defaultPassConfig0);
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(true, compiler0.hasErrors());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(1, compiler0.getErrorCount());
      assertNotNull(passConfig_PassConfigDelegate0);
      
      TypeCheck typeCheck0 = passConfig_PassConfigDelegate0.makeTypeCheck(compiler0);
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(true, compiler0.hasErrors());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(1, compiler0.getErrorCount());
      assertNotNull(typeCheck0);
      
      // Undeclared exception!
      try {
        Scope scope0 = typeCheck0.processForTesting(node0, node0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
}
