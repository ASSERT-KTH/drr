/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 20:55:50 GMT 2014
 */

package com.google.javascript.jscomp;

import static org.junit.Assert.*;
import org.junit.Test;
import com.google.javascript.jscomp.AbstractCompiler;
import com.google.javascript.jscomp.Compiler;
import com.google.javascript.jscomp.CompilerOptions;
import com.google.javascript.jscomp.JSSourceFile;
import com.google.javascript.jscomp.RemoveUnusedVars;
import com.google.javascript.jscomp.Result;
import com.google.javascript.jscomp.RuntimeTypeCheck;
import com.google.javascript.jscomp.SimpleDefinitionFinder;
import com.google.javascript.rhino.Node;
import java.util.LinkedList;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;

import org.evosuite.runtime.mock.java.lang.MockRuntimeException;
import org.junit.runner.RunWith;


public class RemoveUnusedVarsEvoSuite_branch_Test  {

  @Test
  public void test0() {}
//   @Test
//   public void test0()  throws Throwable  {
//       Compiler compiler0 = new Compiler();
//       assertNotNull(compiler0);
//       
//       LinkedList<JSSourceFile> linkedList0 = new LinkedList<JSSourceFile>();
//       assertNotNull(linkedList0);
//       assertEquals(0, linkedList0.size());
//       assertEquals("[]", linkedList0.toString());
//       
//       CompilerOptions compilerOptions0 = compiler0.newCompilerOptions();
//       assertNotNull(compilerOptions0);
//       assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
//       assertNull(compilerOptions0.getLanguageOut());
//       assertEquals(false, compilerOptions0.getInferTypes());
//       assertEquals(CompilerOptions.TweakProcessing.OFF, compilerOptions0.getTweakProcessing());
//       assertEquals(false, compilerOptions0.assumeStrictThis());
//       assertEquals(false, compilerOptions0.assumeClosuresOnlyCaptureReferences());
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compilerOptions0.getLanguageIn());
//       assertEquals(false, compilerOptions0.isExternExportsEnabled());
//       assertFalse(compilerOptions0.printInputDelimiter);
//       assertFalse(compilerOptions0.removeEmptyFunctions);
//       assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
//       assertFalse(compilerOptions0.removeTryCatchFinally);
//       assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
//       assertFalse(compilerOptions0.ideMode);
//       assertFalse(compilerOptions0.recordFunctionInformation);
//       assertFalse(compilerOptions0.gatherCssNames);
//       assertFalse(compilerOptions0.generateExports);
//       assertFalse(compilerOptions0.rewriteFunctionExpressions);
//       assertFalse(compilerOptions0.computeFunctionSideEffects);
//       assertFalse(compilerOptions0.coalesceVariableNames);
//       assertFalse(compilerOptions0.foldConstants);
//       assertFalse(compilerOptions0.markNoSideEffectCalls);
//       assertFalse(compilerOptions0.checkTypes);
//       assertFalse(compilerOptions0.disambiguateProperties);
//       assertFalse(compilerOptions0.closurePass);
//       assertFalse(compilerOptions0.optimizeCalls);
//       assertFalse(compilerOptions0.crossModuleMethodMotion);
//       assertFalse(compilerOptions0.markAsCompiled);
//       assertFalse(compilerOptions0.optimizeReturns);
//       assertFalse(compilerOptions0.flowSensitiveInlineVariables);
//       assertFalse(compilerOptions0.aliasKeywords);
//       assertFalse(compilerOptions0.removeUnusedVars);
//       assertFalse(compilerOptions0.checkSuspiciousCode);
//       assertFalse(compilerOptions0.removeDeadCode);
//       assertFalse(compilerOptions0.generatePseudoNames);
//       assertFalse(compilerOptions0.ambiguateProperties);
//       assertFalse(compilerOptions0.devirtualizePrototypeMethods);
//       assertFalse(compilerOptions0.deadAssignmentElimination);
//       assertFalse(compilerOptions0.collapseAnonymousFunctions);
//       assertFalse(compilerOptions0.labelRenaming);
//       assertFalse(compilerOptions0.inlineFunctions);
//       assertFalse(compilerOptions0.smartNameRemoval);
//       assertFalse(compilerOptions0.exportTestFunctions);
//       assertFalse(compilerOptions0.collapseProperties);
//       assertFalse(compilerOptions0.inlineLocalFunctions);
//       assertFalse(compilerOptions0.moveFunctionDeclarations);
//       assertFalse(compilerOptions0.jqueryPass);
//       assertFalse(compilerOptions0.collapseVariableDeclarations);
//       assertFalse(compilerOptions0.prettyPrint);
//       assertFalse(compilerOptions0.removeUnusedLocalVars);
//       assertFalse(compilerOptions0.crossModuleCodeMotion);
//       assertFalse(compilerOptions0.checkControlStructures);
//       assertFalse(compilerOptions0.reserveRawExports);
//       assertFalse(compilerOptions0.inlineGetters);
//       assertFalse(compilerOptions0.convertToDottedProperties);
//       assertFalse(compilerOptions0.lineBreak);
//       assertFalse(compilerOptions0.aliasExternals);
//       assertFalse(compilerOptions0.optimizeParameters);
//       assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
//       assertFalse(compilerOptions0.optimizeArgumentsArray);
//       assertFalse(compilerOptions0.checkSymbols);
//       assertFalse(compilerOptions0.aliasAllStrings);
//       assertFalse(compilerOptions0.inlineVariables);
//       assertFalse(compilerOptions0.inlineConstantVars);
//       
//       Result result0 = compiler0.compile((List<JSSourceFile>) linkedList0, (List<JSSourceFile>) linkedList0, compilerOptions0);
//       assertNotNull(result0);
//       assertEquals(false, compiler0.isTypeCheckingEnabled());
//       assertEquals(false, compiler0.hasErrors());
//       assertEquals(0, compiler0.getWarningCount());
//       assertEquals(false, compiler0.acceptConstKeyword());
//       assertEquals(0, compiler0.getErrorCount());
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
//       assertEquals(false, compiler0.isIdeMode());
//       assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
//       assertNull(compilerOptions0.getLanguageOut());
//       assertEquals(false, compilerOptions0.getInferTypes());
//       assertEquals(CompilerOptions.TweakProcessing.OFF, compilerOptions0.getTweakProcessing());
//       assertEquals(false, compilerOptions0.assumeStrictThis());
//       assertEquals(false, compilerOptions0.assumeClosuresOnlyCaptureReferences());
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compilerOptions0.getLanguageIn());
//       assertEquals(false, compilerOptions0.isExternExportsEnabled());
//       assertEquals(0, linkedList0.size());
//       assertEquals("[]", linkedList0.toString());
//       assertFalse(compilerOptions0.printInputDelimiter);
//       assertFalse(compilerOptions0.removeEmptyFunctions);
//       assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
//       assertFalse(compilerOptions0.removeTryCatchFinally);
//       assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
//       assertFalse(compilerOptions0.ideMode);
//       assertFalse(compilerOptions0.recordFunctionInformation);
//       assertFalse(compilerOptions0.gatherCssNames);
//       assertFalse(compilerOptions0.generateExports);
//       assertFalse(compilerOptions0.rewriteFunctionExpressions);
//       assertFalse(compilerOptions0.computeFunctionSideEffects);
//       assertFalse(compilerOptions0.coalesceVariableNames);
//       assertFalse(compilerOptions0.foldConstants);
//       assertFalse(compilerOptions0.markNoSideEffectCalls);
//       assertFalse(compilerOptions0.checkTypes);
//       assertFalse(compilerOptions0.disambiguateProperties);
//       assertFalse(compilerOptions0.closurePass);
//       assertFalse(compilerOptions0.optimizeCalls);
//       assertFalse(compilerOptions0.crossModuleMethodMotion);
//       assertFalse(compilerOptions0.markAsCompiled);
//       assertFalse(compilerOptions0.optimizeReturns);
//       assertFalse(compilerOptions0.flowSensitiveInlineVariables);
//       assertFalse(compilerOptions0.aliasKeywords);
//       assertFalse(compilerOptions0.removeUnusedVars);
//       assertFalse(compilerOptions0.checkSuspiciousCode);
//       assertFalse(compilerOptions0.removeDeadCode);
//       assertFalse(compilerOptions0.generatePseudoNames);
//       assertFalse(compilerOptions0.ambiguateProperties);
//       assertFalse(compilerOptions0.devirtualizePrototypeMethods);
//       assertFalse(compilerOptions0.deadAssignmentElimination);
//       assertFalse(compilerOptions0.collapseAnonymousFunctions);
//       assertFalse(compilerOptions0.labelRenaming);
//       assertFalse(compilerOptions0.inlineFunctions);
//       assertFalse(compilerOptions0.smartNameRemoval);
//       assertFalse(compilerOptions0.exportTestFunctions);
//       assertFalse(compilerOptions0.collapseProperties);
//       assertFalse(compilerOptions0.inlineLocalFunctions);
//       assertFalse(compilerOptions0.moveFunctionDeclarations);
//       assertFalse(compilerOptions0.jqueryPass);
//       assertFalse(compilerOptions0.collapseVariableDeclarations);
//       assertFalse(compilerOptions0.prettyPrint);
//       assertFalse(compilerOptions0.removeUnusedLocalVars);
//       assertFalse(compilerOptions0.crossModuleCodeMotion);
//       assertFalse(compilerOptions0.checkControlStructures);
//       assertFalse(compilerOptions0.reserveRawExports);
//       assertFalse(compilerOptions0.inlineGetters);
//       assertFalse(compilerOptions0.convertToDottedProperties);
//       assertFalse(compilerOptions0.lineBreak);
//       assertFalse(compilerOptions0.aliasExternals);
//       assertFalse(compilerOptions0.optimizeParameters);
//       assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
//       assertFalse(compilerOptions0.optimizeArgumentsArray);
//       assertFalse(compilerOptions0.checkSymbols);
//       assertFalse(compilerOptions0.aliasAllStrings);
//       assertFalse(compilerOptions0.inlineVariables);
//       assertFalse(compilerOptions0.inlineConstantVars);
//       
//       AbstractCompiler.LifeCycleStage abstractCompiler_LifeCycleStage0 = AbstractCompiler.LifeCycleStage.NORMALIZED_OBFUSCATED;
//       compiler0.setLifeCycleStage(abstractCompiler_LifeCycleStage0);
//       assertEquals(false, compiler0.isTypeCheckingEnabled());
//       assertEquals(false, compiler0.hasErrors());
//       assertEquals(0, compiler0.getWarningCount());
//       assertEquals(false, compiler0.acceptConstKeyword());
//       assertEquals(0, compiler0.getErrorCount());
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
//       assertEquals(false, compiler0.isIdeMode());
//       
//       boolean boolean0 = true;
//       RemoveUnusedVars removeUnusedVars0 = new RemoveUnusedVars(compiler0, boolean0, compilerOptions0.ambiguateProperties, boolean0);
//       assertNotNull(removeUnusedVars0);
//       assertEquals(false, compiler0.isTypeCheckingEnabled());
//       assertEquals(false, compiler0.hasErrors());
//       assertEquals(0, compiler0.getWarningCount());
//       assertEquals(false, compiler0.acceptConstKeyword());
//       assertEquals(0, compiler0.getErrorCount());
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
//       assertEquals(false, compiler0.isIdeMode());
//       assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
//       assertNull(compilerOptions0.getLanguageOut());
//       assertEquals(false, compilerOptions0.getInferTypes());
//       assertEquals(CompilerOptions.TweakProcessing.OFF, compilerOptions0.getTweakProcessing());
//       assertEquals(false, compilerOptions0.assumeStrictThis());
//       assertEquals(false, compilerOptions0.assumeClosuresOnlyCaptureReferences());
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compilerOptions0.getLanguageIn());
//       assertEquals(false, compilerOptions0.isExternExportsEnabled());
//       assertFalse(compilerOptions0.printInputDelimiter);
//       assertFalse(compilerOptions0.removeEmptyFunctions);
//       assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
//       assertFalse(compilerOptions0.removeTryCatchFinally);
//       assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
//       assertFalse(compilerOptions0.ideMode);
//       assertFalse(compilerOptions0.recordFunctionInformation);
//       assertFalse(compilerOptions0.gatherCssNames);
//       assertFalse(compilerOptions0.generateExports);
//       assertFalse(compilerOptions0.rewriteFunctionExpressions);
//       assertFalse(compilerOptions0.computeFunctionSideEffects);
//       assertFalse(compilerOptions0.coalesceVariableNames);
//       assertFalse(compilerOptions0.foldConstants);
//       assertFalse(compilerOptions0.markNoSideEffectCalls);
//       assertFalse(compilerOptions0.checkTypes);
//       assertFalse(compilerOptions0.disambiguateProperties);
//       assertFalse(compilerOptions0.closurePass);
//       assertFalse(compilerOptions0.optimizeCalls);
//       assertFalse(compilerOptions0.crossModuleMethodMotion);
//       assertFalse(compilerOptions0.markAsCompiled);
//       assertFalse(compilerOptions0.optimizeReturns);
//       assertFalse(compilerOptions0.flowSensitiveInlineVariables);
//       assertFalse(compilerOptions0.aliasKeywords);
//       assertFalse(compilerOptions0.removeUnusedVars);
//       assertFalse(compilerOptions0.checkSuspiciousCode);
//       assertFalse(compilerOptions0.removeDeadCode);
//       assertFalse(compilerOptions0.generatePseudoNames);
//       assertFalse(compilerOptions0.ambiguateProperties);
//       assertFalse(compilerOptions0.devirtualizePrototypeMethods);
//       assertFalse(compilerOptions0.deadAssignmentElimination);
//       assertFalse(compilerOptions0.collapseAnonymousFunctions);
//       assertFalse(compilerOptions0.labelRenaming);
//       assertFalse(compilerOptions0.inlineFunctions);
//       assertFalse(compilerOptions0.smartNameRemoval);
//       assertFalse(compilerOptions0.exportTestFunctions);
//       assertFalse(compilerOptions0.collapseProperties);
//       assertFalse(compilerOptions0.inlineLocalFunctions);
//       assertFalse(compilerOptions0.moveFunctionDeclarations);
//       assertFalse(compilerOptions0.jqueryPass);
//       assertFalse(compilerOptions0.collapseVariableDeclarations);
//       assertFalse(compilerOptions0.prettyPrint);
//       assertFalse(compilerOptions0.removeUnusedLocalVars);
//       assertFalse(compilerOptions0.crossModuleCodeMotion);
//       assertFalse(compilerOptions0.checkControlStructures);
//       assertFalse(compilerOptions0.reserveRawExports);
//       assertFalse(compilerOptions0.inlineGetters);
//       assertFalse(compilerOptions0.convertToDottedProperties);
//       assertFalse(compilerOptions0.lineBreak);
//       assertFalse(compilerOptions0.aliasExternals);
//       assertFalse(compilerOptions0.optimizeParameters);
//       assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
//       assertFalse(compilerOptions0.optimizeArgumentsArray);
//       assertFalse(compilerOptions0.checkSymbols);
//       assertFalse(compilerOptions0.aliasAllStrings);
//       assertFalse(compilerOptions0.inlineVariables);
//       assertFalse(compilerOptions0.inlineConstantVars);
//       
//       Node node0 = RuntimeTypeCheck.getBoilerplateCode(compiler0, compilerOptions0.checkMissingGetCssNameBlacklist);
//       assertNotNull(node0);
//       assertEquals(68, compiler0.getWarningCount());
//       assertEquals(false, compiler0.isTypeCheckingEnabled());
//       assertEquals(false, compiler0.hasErrors());
//       assertEquals(false, compiler0.acceptConstKeyword());
//       assertEquals(0, compiler0.getErrorCount());
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
//       assertEquals(false, compiler0.isIdeMode());
//       assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
//       assertNull(compilerOptions0.getLanguageOut());
//       assertEquals(false, compilerOptions0.getInferTypes());
//       assertEquals(CompilerOptions.TweakProcessing.OFF, compilerOptions0.getTweakProcessing());
//       assertEquals(false, compilerOptions0.assumeStrictThis());
//       assertEquals(false, compilerOptions0.assumeClosuresOnlyCaptureReferences());
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compilerOptions0.getLanguageIn());
//       assertEquals(false, compilerOptions0.isExternExportsEnabled());
//       assertEquals(false, node0.isOptionalArg());
//       assertEquals(false, node0.isGetterDef());
//       assertEquals(false, node0.isIf());
//       assertEquals(false, node0.isFromExterns());
//       assertEquals(false, node0.isDefaultCase());
//       assertEquals(false, node0.isCall());
//       assertEquals(false, node0.isIn());
//       assertEquals(false, node0.isDelProp());
//       assertEquals(false, node0.isHook());
//       assertEquals(1, node0.getLineno());
//       assertEquals(false, node0.isAdd());
//       assertEquals(false, node0.isReturn());
//       assertEquals(false, node0.isNot());
//       assertEquals(132, node0.getType());
//       assertEquals(true, node0.hasChildren());
//       assertEquals(false, node0.hasOneChild());
//       assertEquals(false, node0.isRegExp());
//       assertEquals(0, node0.getSideEffectFlags());
//       assertEquals(false, node0.isOnlyModifiesThisCall());
//       assertEquals(false, node0.isComma());
//       assertEquals(false, node0.isDebugger());
//       assertEquals(false, node0.isAssignAdd());
//       assertEquals(false, node0.isAnd());
//       assertEquals(false, node0.isTypeOf());
//       assertEquals(false, node0.isFor());
//       assertEquals(false, node0.isBreak());
//       assertEquals(false, node0.isNull());
//       assertEquals(false, node0.isObjectLit());
//       assertEquals(false, node0.isBlock());
//       assertEquals(false, node0.isLabelName());
//       assertEquals(false, node0.isOr());
//       assertEquals(false, node0.isEmpty());
//       assertEquals(false, node0.wasEmptyNode());
//       assertEquals(false, node0.isUnscopedQualifiedName());
//       assertEquals(false, node0.isSwitch());
//       assertEquals(false, node0.isFalse());
//       assertEquals(false, node0.isTry());
//       assertEquals(false, node0.isNumber());
//       assertEquals(35, node0.getChildCount());
//       assertEquals(false, node0.isInc());
//       assertEquals(false, node0.isCase());
//       assertEquals(false, node0.isVar());
//       assertEquals(false, node0.isInstanceOf());
//       assertEquals(false, node0.isExprResult());
//       assertEquals(false, node0.isLocalResultCall());
//       assertEquals(true, node0.isScript());
//       assertEquals(false, node0.isArrayLit());
//       assertEquals(false, node0.isSetterDef());
//       assertEquals(false, node0.isThrow());
//       assertEquals(false, node0.isCatch());
//       assertEquals(false, node0.isQuotedString());
//       assertEquals(true, node0.hasMoreThanOneChild());
//       assertEquals(0, node0.getLength());
//       assertEquals(false, node0.isGetElem());
//       assertEquals(false, node0.isGetProp());
//       assertEquals(4096, node0.getSourcePosition());
//       assertEquals(false, node0.isContinue());
//       assertEquals(false, node0.isVoid());
//       assertEquals(false, node0.isFunction());
//       assertEquals(false, node0.isDo());
//       assertEquals(false, node0.isThis());
//       assertEquals(false, node0.isWith());
//       assertEquals(false, node0.isQualifiedName());
//       assertEquals(false, node0.isParamList());
//       assertEquals(false, node0.isAssign());
//       assertEquals(false, node0.isString());
//       assertEquals(true, node0.isSyntheticBlock());
//       assertEquals(false, node0.isTrue());
//       assertEquals(0, node0.getCharno());
//       assertEquals(false, node0.isNew());
//       assertEquals(false, node0.isNE());
//       assertEquals(" [synthetic:1] ", node0.getSourceFileName());
//       assertEquals(false, node0.isNoSideEffectsCall());
//       assertEquals(false, node0.isWhile());
//       assertEquals(false, node0.isLabel());
//       assertEquals(false, node0.isVarArgs());
//       assertEquals(false, node0.isName());
//       assertEquals(false, node0.isDec());
//       assertFalse(compilerOptions0.printInputDelimiter);
//       assertFalse(compilerOptions0.removeEmptyFunctions);
//       assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
//       assertFalse(compilerOptions0.removeTryCatchFinally);
//       assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
//       assertFalse(compilerOptions0.ideMode);
//       assertFalse(compilerOptions0.recordFunctionInformation);
//       assertFalse(compilerOptions0.gatherCssNames);
//       assertFalse(compilerOptions0.generateExports);
//       assertFalse(compilerOptions0.rewriteFunctionExpressions);
//       assertFalse(compilerOptions0.computeFunctionSideEffects);
//       assertFalse(compilerOptions0.coalesceVariableNames);
//       assertFalse(compilerOptions0.foldConstants);
//       assertFalse(compilerOptions0.markNoSideEffectCalls);
//       assertFalse(compilerOptions0.checkTypes);
//       assertFalse(compilerOptions0.disambiguateProperties);
//       assertFalse(compilerOptions0.closurePass);
//       assertFalse(compilerOptions0.optimizeCalls);
//       assertFalse(compilerOptions0.crossModuleMethodMotion);
//       assertFalse(compilerOptions0.markAsCompiled);
//       assertFalse(compilerOptions0.optimizeReturns);
//       assertFalse(compilerOptions0.flowSensitiveInlineVariables);
//       assertFalse(compilerOptions0.aliasKeywords);
//       assertFalse(compilerOptions0.removeUnusedVars);
//       assertFalse(compilerOptions0.checkSuspiciousCode);
//       assertFalse(compilerOptions0.removeDeadCode);
//       assertFalse(compilerOptions0.generatePseudoNames);
//       assertFalse(compilerOptions0.ambiguateProperties);
//       assertFalse(compilerOptions0.devirtualizePrototypeMethods);
//       assertFalse(compilerOptions0.deadAssignmentElimination);
//       assertFalse(compilerOptions0.collapseAnonymousFunctions);
//       assertFalse(compilerOptions0.labelRenaming);
//       assertFalse(compilerOptions0.inlineFunctions);
//       assertFalse(compilerOptions0.smartNameRemoval);
//       assertFalse(compilerOptions0.exportTestFunctions);
//       assertFalse(compilerOptions0.collapseProperties);
//       assertFalse(compilerOptions0.inlineLocalFunctions);
//       assertFalse(compilerOptions0.moveFunctionDeclarations);
//       assertFalse(compilerOptions0.jqueryPass);
//       assertFalse(compilerOptions0.collapseVariableDeclarations);
//       assertFalse(compilerOptions0.prettyPrint);
//       assertFalse(compilerOptions0.removeUnusedLocalVars);
//       assertFalse(compilerOptions0.crossModuleCodeMotion);
//       assertFalse(compilerOptions0.checkControlStructures);
//       assertFalse(compilerOptions0.reserveRawExports);
//       assertFalse(compilerOptions0.inlineGetters);
//       assertFalse(compilerOptions0.convertToDottedProperties);
//       assertFalse(compilerOptions0.lineBreak);
//       assertFalse(compilerOptions0.aliasExternals);
//       assertFalse(compilerOptions0.optimizeParameters);
//       assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
//       assertFalse(compilerOptions0.optimizeArgumentsArray);
//       assertFalse(compilerOptions0.checkSymbols);
//       assertFalse(compilerOptions0.aliasAllStrings);
//       assertFalse(compilerOptions0.inlineVariables);
//       assertFalse(compilerOptions0.inlineConstantVars);
//       
//       // Undeclared exception!
//       try {
//         removeUnusedVars0.process(node0, node0);
//         fail("Expecting exception: RuntimeException");
//       
//       } catch(RuntimeException e) {
//          //
//          // INTERNAL COMPILER ERROR.
//          // Please report this problem.
//          // Unexpected lValue type NAME
//          //   Node(NAME jscomp):  [synthetic:1] :23:4
//          // var jscomp = jscomp || {};
//          //   Parent(VAR):  [synthetic:1] :23:0
//          // var jscomp = jscomp || {};
//          //
//       }
//   }

  @Test
  public void test1() {}
//   @Test
//   public void test1()  throws Throwable  {
//       Compiler compiler0 = new Compiler();
//       assertNotNull(compiler0);
//       
//       LinkedList<JSSourceFile> linkedList0 = new LinkedList<JSSourceFile>();
//       assertNotNull(linkedList0);
//       assertEquals("[]", linkedList0.toString());
//       assertEquals(0, linkedList0.size());
//       
//       CompilerOptions compilerOptions0 = compiler0.newCompilerOptions();
//       assertNotNull(compilerOptions0);
//       assertEquals(false, compilerOptions0.isExternExportsEnabled());
//       assertNull(compilerOptions0.getLanguageOut());
//       assertEquals(CompilerOptions.TweakProcessing.OFF, compilerOptions0.getTweakProcessing());
//       assertEquals(false, compilerOptions0.getInferTypes());
//       assertEquals(false, compilerOptions0.assumeClosuresOnlyCaptureReferences());
//       assertEquals(false, compilerOptions0.assumeStrictThis());
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compilerOptions0.getLanguageIn());
//       assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
//       assertFalse(compilerOptions0.optimizeReturns);
//       assertFalse(compilerOptions0.inlineConstantVars);
//       assertFalse(compilerOptions0.prettyPrint);
//       assertFalse(compilerOptions0.checkControlStructures);
//       assertFalse(compilerOptions0.removeTryCatchFinally);
//       assertFalse(compilerOptions0.recordFunctionInformation);
//       assertFalse(compilerOptions0.aliasKeywords);
//       assertFalse(compilerOptions0.removeUnusedVars);
//       assertFalse(compilerOptions0.removeEmptyFunctions);
//       assertFalse(compilerOptions0.collapseAnonymousFunctions);
//       assertFalse(compilerOptions0.optimizeCalls);
//       assertFalse(compilerOptions0.convertToDottedProperties);
//       assertFalse(compilerOptions0.crossModuleMethodMotion);
//       assertFalse(compilerOptions0.aliasAllStrings);
//       assertFalse(compilerOptions0.collapseVariableDeclarations);
//       assertFalse(compilerOptions0.inlineGetters);
//       assertFalse(compilerOptions0.aliasExternals);
//       assertFalse(compilerOptions0.checkSuspiciousCode);
//       assertFalse(compilerOptions0.inlineVariables);
//       assertFalse(compilerOptions0.moveFunctionDeclarations);
//       assertFalse(compilerOptions0.deadAssignmentElimination);
//       assertFalse(compilerOptions0.disambiguateProperties);
//       assertFalse(compilerOptions0.markAsCompiled);
//       assertFalse(compilerOptions0.optimizeParameters);
//       assertFalse(compilerOptions0.labelRenaming);
//       assertFalse(compilerOptions0.markNoSideEffectCalls);
//       assertFalse(compilerOptions0.collapseProperties);
//       assertFalse(compilerOptions0.ideMode);
//       assertFalse(compilerOptions0.lineBreak);
//       assertFalse(compilerOptions0.exportTestFunctions);
//       assertFalse(compilerOptions0.checkSymbols);
//       assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
//       assertFalse(compilerOptions0.generateExports);
//       assertFalse(compilerOptions0.inlineFunctions);
//       assertFalse(compilerOptions0.reserveRawExports);
//       assertFalse(compilerOptions0.removeDeadCode);
//       assertFalse(compilerOptions0.rewriteFunctionExpressions);
//       assertFalse(compilerOptions0.closurePass);
//       assertFalse(compilerOptions0.generatePseudoNames);
//       assertFalse(compilerOptions0.removeUnusedLocalVars);
//       assertFalse(compilerOptions0.gatherCssNames);
//       assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
//       assertFalse(compilerOptions0.jqueryPass);
//       assertFalse(compilerOptions0.coalesceVariableNames);
//       assertFalse(compilerOptions0.crossModuleCodeMotion);
//       assertFalse(compilerOptions0.ambiguateProperties);
//       assertFalse(compilerOptions0.foldConstants);
//       assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
//       assertFalse(compilerOptions0.flowSensitiveInlineVariables);
//       assertFalse(compilerOptions0.checkTypes);
//       assertFalse(compilerOptions0.devirtualizePrototypeMethods);
//       assertFalse(compilerOptions0.smartNameRemoval);
//       assertFalse(compilerOptions0.optimizeArgumentsArray);
//       assertFalse(compilerOptions0.printInputDelimiter);
//       assertFalse(compilerOptions0.inlineLocalFunctions);
//       assertFalse(compilerOptions0.computeFunctionSideEffects);
//       
//       Result result0 = compiler0.compile((List<JSSourceFile>) linkedList0, (List<JSSourceFile>) linkedList0, compilerOptions0);
//       assertNotNull(result0);
//       assertEquals(false, compiler0.hasErrors());
//       assertEquals(false, compiler0.isTypeCheckingEnabled());
//       assertEquals(false, compiler0.acceptConstKeyword());
//       assertEquals(false, compiler0.isIdeMode());
//       assertEquals(0, compiler0.getErrorCount());
//       assertEquals(0, compiler0.getWarningCount());
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
//       assertEquals("[]", linkedList0.toString());
//       assertEquals(0, linkedList0.size());
//       assertEquals(false, compilerOptions0.isExternExportsEnabled());
//       assertNull(compilerOptions0.getLanguageOut());
//       assertEquals(CompilerOptions.TweakProcessing.OFF, compilerOptions0.getTweakProcessing());
//       assertEquals(false, compilerOptions0.getInferTypes());
//       assertEquals(false, compilerOptions0.assumeClosuresOnlyCaptureReferences());
//       assertEquals(false, compilerOptions0.assumeStrictThis());
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compilerOptions0.getLanguageIn());
//       assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
//       assertFalse(compilerOptions0.optimizeReturns);
//       assertFalse(compilerOptions0.inlineConstantVars);
//       assertFalse(compilerOptions0.prettyPrint);
//       assertFalse(compilerOptions0.checkControlStructures);
//       assertFalse(compilerOptions0.removeTryCatchFinally);
//       assertFalse(compilerOptions0.recordFunctionInformation);
//       assertFalse(compilerOptions0.aliasKeywords);
//       assertFalse(compilerOptions0.removeUnusedVars);
//       assertFalse(compilerOptions0.removeEmptyFunctions);
//       assertFalse(compilerOptions0.collapseAnonymousFunctions);
//       assertFalse(compilerOptions0.optimizeCalls);
//       assertFalse(compilerOptions0.convertToDottedProperties);
//       assertFalse(compilerOptions0.crossModuleMethodMotion);
//       assertFalse(compilerOptions0.aliasAllStrings);
//       assertFalse(compilerOptions0.collapseVariableDeclarations);
//       assertFalse(compilerOptions0.inlineGetters);
//       assertFalse(compilerOptions0.aliasExternals);
//       assertFalse(compilerOptions0.checkSuspiciousCode);
//       assertFalse(compilerOptions0.inlineVariables);
//       assertFalse(compilerOptions0.moveFunctionDeclarations);
//       assertFalse(compilerOptions0.deadAssignmentElimination);
//       assertFalse(compilerOptions0.disambiguateProperties);
//       assertFalse(compilerOptions0.markAsCompiled);
//       assertFalse(compilerOptions0.optimizeParameters);
//       assertFalse(compilerOptions0.labelRenaming);
//       assertFalse(compilerOptions0.markNoSideEffectCalls);
//       assertFalse(compilerOptions0.collapseProperties);
//       assertFalse(compilerOptions0.ideMode);
//       assertFalse(compilerOptions0.lineBreak);
//       assertFalse(compilerOptions0.exportTestFunctions);
//       assertFalse(compilerOptions0.checkSymbols);
//       assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
//       assertFalse(compilerOptions0.generateExports);
//       assertFalse(compilerOptions0.inlineFunctions);
//       assertFalse(compilerOptions0.reserveRawExports);
//       assertFalse(compilerOptions0.removeDeadCode);
//       assertFalse(compilerOptions0.rewriteFunctionExpressions);
//       assertFalse(compilerOptions0.closurePass);
//       assertFalse(compilerOptions0.generatePseudoNames);
//       assertFalse(compilerOptions0.removeUnusedLocalVars);
//       assertFalse(compilerOptions0.gatherCssNames);
//       assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
//       assertFalse(compilerOptions0.jqueryPass);
//       assertFalse(compilerOptions0.coalesceVariableNames);
//       assertFalse(compilerOptions0.crossModuleCodeMotion);
//       assertFalse(compilerOptions0.ambiguateProperties);
//       assertFalse(compilerOptions0.foldConstants);
//       assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
//       assertFalse(compilerOptions0.flowSensitiveInlineVariables);
//       assertFalse(compilerOptions0.checkTypes);
//       assertFalse(compilerOptions0.devirtualizePrototypeMethods);
//       assertFalse(compilerOptions0.smartNameRemoval);
//       assertFalse(compilerOptions0.optimizeArgumentsArray);
//       assertFalse(compilerOptions0.printInputDelimiter);
//       assertFalse(compilerOptions0.inlineLocalFunctions);
//       assertFalse(compilerOptions0.computeFunctionSideEffects);
//       
//       boolean boolean0 = true;
//       RemoveUnusedVars removeUnusedVars0 = new RemoveUnusedVars(compiler0, boolean0, compilerOptions0.ambiguateProperties, boolean0);
//       assertNotNull(removeUnusedVars0);
//       assertEquals(false, compiler0.hasErrors());
//       assertEquals(false, compiler0.isTypeCheckingEnabled());
//       assertEquals(false, compiler0.acceptConstKeyword());
//       assertEquals(false, compiler0.isIdeMode());
//       assertEquals(0, compiler0.getErrorCount());
//       assertEquals(0, compiler0.getWarningCount());
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
//       assertEquals(false, compilerOptions0.isExternExportsEnabled());
//       assertNull(compilerOptions0.getLanguageOut());
//       assertEquals(CompilerOptions.TweakProcessing.OFF, compilerOptions0.getTweakProcessing());
//       assertEquals(false, compilerOptions0.getInferTypes());
//       assertEquals(false, compilerOptions0.assumeClosuresOnlyCaptureReferences());
//       assertEquals(false, compilerOptions0.assumeStrictThis());
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compilerOptions0.getLanguageIn());
//       assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
//       assertFalse(compilerOptions0.optimizeReturns);
//       assertFalse(compilerOptions0.inlineConstantVars);
//       assertFalse(compilerOptions0.prettyPrint);
//       assertFalse(compilerOptions0.checkControlStructures);
//       assertFalse(compilerOptions0.removeTryCatchFinally);
//       assertFalse(compilerOptions0.recordFunctionInformation);
//       assertFalse(compilerOptions0.aliasKeywords);
//       assertFalse(compilerOptions0.removeUnusedVars);
//       assertFalse(compilerOptions0.removeEmptyFunctions);
//       assertFalse(compilerOptions0.collapseAnonymousFunctions);
//       assertFalse(compilerOptions0.optimizeCalls);
//       assertFalse(compilerOptions0.convertToDottedProperties);
//       assertFalse(compilerOptions0.crossModuleMethodMotion);
//       assertFalse(compilerOptions0.aliasAllStrings);
//       assertFalse(compilerOptions0.collapseVariableDeclarations);
//       assertFalse(compilerOptions0.inlineGetters);
//       assertFalse(compilerOptions0.aliasExternals);
//       assertFalse(compilerOptions0.checkSuspiciousCode);
//       assertFalse(compilerOptions0.inlineVariables);
//       assertFalse(compilerOptions0.moveFunctionDeclarations);
//       assertFalse(compilerOptions0.deadAssignmentElimination);
//       assertFalse(compilerOptions0.disambiguateProperties);
//       assertFalse(compilerOptions0.markAsCompiled);
//       assertFalse(compilerOptions0.optimizeParameters);
//       assertFalse(compilerOptions0.labelRenaming);
//       assertFalse(compilerOptions0.markNoSideEffectCalls);
//       assertFalse(compilerOptions0.collapseProperties);
//       assertFalse(compilerOptions0.ideMode);
//       assertFalse(compilerOptions0.lineBreak);
//       assertFalse(compilerOptions0.exportTestFunctions);
//       assertFalse(compilerOptions0.checkSymbols);
//       assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
//       assertFalse(compilerOptions0.generateExports);
//       assertFalse(compilerOptions0.inlineFunctions);
//       assertFalse(compilerOptions0.reserveRawExports);
//       assertFalse(compilerOptions0.removeDeadCode);
//       assertFalse(compilerOptions0.rewriteFunctionExpressions);
//       assertFalse(compilerOptions0.closurePass);
//       assertFalse(compilerOptions0.generatePseudoNames);
//       assertFalse(compilerOptions0.removeUnusedLocalVars);
//       assertFalse(compilerOptions0.gatherCssNames);
//       assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
//       assertFalse(compilerOptions0.jqueryPass);
//       assertFalse(compilerOptions0.coalesceVariableNames);
//       assertFalse(compilerOptions0.crossModuleCodeMotion);
//       assertFalse(compilerOptions0.ambiguateProperties);
//       assertFalse(compilerOptions0.foldConstants);
//       assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
//       assertFalse(compilerOptions0.flowSensitiveInlineVariables);
//       assertFalse(compilerOptions0.checkTypes);
//       assertFalse(compilerOptions0.devirtualizePrototypeMethods);
//       assertFalse(compilerOptions0.smartNameRemoval);
//       assertFalse(compilerOptions0.optimizeArgumentsArray);
//       assertFalse(compilerOptions0.printInputDelimiter);
//       assertFalse(compilerOptions0.inlineLocalFunctions);
//       assertFalse(compilerOptions0.computeFunctionSideEffects);
//       
//       Node node0 = RuntimeTypeCheck.getBoilerplateCode(compiler0, compilerOptions0.checkMissingGetCssNameBlacklist);
//       assertNotNull(node0);
//       assertEquals(false, node0.isString());
//       assertEquals(false, node0.isNew());
//       assertEquals(false, node0.isFunction());
//       assertEquals(false, node0.isCall());
//       assertEquals(false, node0.isSwitch());
//       assertEquals(1, node0.getLineno());
//       assertEquals(false, node0.isOptionalArg());
//       assertEquals(false, node0.isNE());
//       assertEquals(false, node0.isDec());
//       assertEquals(false, node0.isNull());
//       assertEquals(false, node0.isIf());
//       assertEquals(false, node0.isParamList());
//       assertEquals(4096, node0.getSourcePosition());
//       assertEquals(false, node0.isReturn());
//       assertEquals(false, node0.isGetProp());
//       assertEquals(false, node0.isNumber());
//       assertEquals(false, node0.isIn());
//       assertEquals(false, node0.isVar());
//       assertEquals(false, node0.isInstanceOf());
//       assertEquals(false, node0.isName());
//       assertEquals(0, node0.getLength());
//       assertEquals(false, node0.isGetterDef());
//       assertEquals(false, node0.isTrue());
//       assertEquals(false, node0.isGetElem());
//       assertEquals(false, node0.isContinue());
//       assertEquals(false, node0.isFalse());
//       assertEquals(false, node0.isSetterDef());
//       assertEquals(false, node0.isQuotedString());
//       assertEquals(false, node0.wasEmptyNode());
//       assertEquals(false, node0.isAdd());
//       assertEquals(false, node0.isFor());
//       assertEquals(true, node0.isSyntheticBlock());
//       assertEquals(false, node0.isExprResult());
//       assertEquals(false, node0.isThis());
//       assertEquals(" [synthetic:1] ", node0.getSourceFileName());
//       assertEquals(false, node0.isCase());
//       assertEquals(false, node0.isAssignAdd());
//       assertEquals(true, node0.isScript());
//       assertEquals(false, node0.isNoSideEffectsCall());
//       assertEquals(false, node0.isAnd());
//       assertEquals(false, node0.isHook());
//       assertEquals(false, node0.isLabelName());
//       assertEquals(false, node0.isDebugger());
//       assertEquals(35, node0.getChildCount());
//       assertEquals(false, node0.isDo());
//       assertEquals(false, node0.isTypeOf());
//       assertEquals(false, node0.isNot());
//       assertEquals(false, node0.isLocalResultCall());
//       assertEquals(false, node0.isWhile());
//       assertEquals(false, node0.isLabel());
//       assertEquals(0, node0.getCharno());
//       assertEquals(false, node0.isComma());
//       assertEquals(false, node0.isBlock());
//       assertEquals(false, node0.isFromExterns());
//       assertEquals(false, node0.isDelProp());
//       assertEquals(false, node0.isTry());
//       assertEquals(false, node0.isObjectLit());
//       assertEquals(false, node0.isDefaultCase());
//       assertEquals(false, node0.hasOneChild());
//       assertEquals(true, node0.hasMoreThanOneChild());
//       assertEquals(0, node0.getSideEffectFlags());
//       assertEquals(false, node0.isEmpty());
//       assertEquals(false, node0.isRegExp());
//       assertEquals(false, node0.isVarArgs());
//       assertEquals(false, node0.isVoid());
//       assertEquals(132, node0.getType());
//       assertEquals(false, node0.isArrayLit());
//       assertEquals(false, node0.isWith());
//       assertEquals(true, node0.hasChildren());
//       assertEquals(false, node0.isInc());
//       assertEquals(false, node0.isUnscopedQualifiedName());
//       assertEquals(false, node0.isOnlyModifiesThisCall());
//       assertEquals(false, node0.isThrow());
//       assertEquals(false, node0.isQualifiedName());
//       assertEquals(false, node0.isCatch());
//       assertEquals(false, node0.isOr());
//       assertEquals(false, node0.isBreak());
//       assertEquals(false, node0.isAssign());
//       assertEquals(false, compiler0.hasErrors());
//       assertEquals(false, compiler0.isTypeCheckingEnabled());
//       assertEquals(false, compiler0.acceptConstKeyword());
//       assertEquals(false, compiler0.isIdeMode());
//       assertEquals(68, compiler0.getWarningCount());
//       assertEquals(0, compiler0.getErrorCount());
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
//       assertEquals(false, compilerOptions0.isExternExportsEnabled());
//       assertNull(compilerOptions0.getLanguageOut());
//       assertEquals(CompilerOptions.TweakProcessing.OFF, compilerOptions0.getTweakProcessing());
//       assertEquals(false, compilerOptions0.getInferTypes());
//       assertEquals(false, compilerOptions0.assumeClosuresOnlyCaptureReferences());
//       assertEquals(false, compilerOptions0.assumeStrictThis());
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compilerOptions0.getLanguageIn());
//       assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
//       assertFalse(compilerOptions0.optimizeReturns);
//       assertFalse(compilerOptions0.inlineConstantVars);
//       assertFalse(compilerOptions0.prettyPrint);
//       assertFalse(compilerOptions0.checkControlStructures);
//       assertFalse(compilerOptions0.removeTryCatchFinally);
//       assertFalse(compilerOptions0.recordFunctionInformation);
//       assertFalse(compilerOptions0.aliasKeywords);
//       assertFalse(compilerOptions0.removeUnusedVars);
//       assertFalse(compilerOptions0.removeEmptyFunctions);
//       assertFalse(compilerOptions0.collapseAnonymousFunctions);
//       assertFalse(compilerOptions0.optimizeCalls);
//       assertFalse(compilerOptions0.convertToDottedProperties);
//       assertFalse(compilerOptions0.crossModuleMethodMotion);
//       assertFalse(compilerOptions0.aliasAllStrings);
//       assertFalse(compilerOptions0.collapseVariableDeclarations);
//       assertFalse(compilerOptions0.inlineGetters);
//       assertFalse(compilerOptions0.aliasExternals);
//       assertFalse(compilerOptions0.checkSuspiciousCode);
//       assertFalse(compilerOptions0.inlineVariables);
//       assertFalse(compilerOptions0.moveFunctionDeclarations);
//       assertFalse(compilerOptions0.deadAssignmentElimination);
//       assertFalse(compilerOptions0.disambiguateProperties);
//       assertFalse(compilerOptions0.markAsCompiled);
//       assertFalse(compilerOptions0.optimizeParameters);
//       assertFalse(compilerOptions0.labelRenaming);
//       assertFalse(compilerOptions0.markNoSideEffectCalls);
//       assertFalse(compilerOptions0.collapseProperties);
//       assertFalse(compilerOptions0.ideMode);
//       assertFalse(compilerOptions0.lineBreak);
//       assertFalse(compilerOptions0.exportTestFunctions);
//       assertFalse(compilerOptions0.checkSymbols);
//       assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
//       assertFalse(compilerOptions0.generateExports);
//       assertFalse(compilerOptions0.inlineFunctions);
//       assertFalse(compilerOptions0.reserveRawExports);
//       assertFalse(compilerOptions0.removeDeadCode);
//       assertFalse(compilerOptions0.rewriteFunctionExpressions);
//       assertFalse(compilerOptions0.closurePass);
//       assertFalse(compilerOptions0.generatePseudoNames);
//       assertFalse(compilerOptions0.removeUnusedLocalVars);
//       assertFalse(compilerOptions0.gatherCssNames);
//       assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
//       assertFalse(compilerOptions0.jqueryPass);
//       assertFalse(compilerOptions0.coalesceVariableNames);
//       assertFalse(compilerOptions0.crossModuleCodeMotion);
//       assertFalse(compilerOptions0.ambiguateProperties);
//       assertFalse(compilerOptions0.foldConstants);
//       assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
//       assertFalse(compilerOptions0.flowSensitiveInlineVariables);
//       assertFalse(compilerOptions0.checkTypes);
//       assertFalse(compilerOptions0.devirtualizePrototypeMethods);
//       assertFalse(compilerOptions0.smartNameRemoval);
//       assertFalse(compilerOptions0.optimizeArgumentsArray);
//       assertFalse(compilerOptions0.printInputDelimiter);
//       assertFalse(compilerOptions0.inlineLocalFunctions);
//       assertFalse(compilerOptions0.computeFunctionSideEffects);
//       
//       SimpleDefinitionFinder simpleDefinitionFinder0 = new SimpleDefinitionFinder((AbstractCompiler) compiler0);
//       assertNotNull(simpleDefinitionFinder0);
//       assertEquals(false, compiler0.hasErrors());
//       assertEquals(false, compiler0.isTypeCheckingEnabled());
//       assertEquals(false, compiler0.acceptConstKeyword());
//       assertEquals(false, compiler0.isIdeMode());
//       assertEquals(68, compiler0.getWarningCount());
//       assertEquals(0, compiler0.getErrorCount());
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
//       
//       removeUnusedVars0.process(node0, node0, simpleDefinitionFinder0);
//       assertEquals(false, node0.isString());
//       assertEquals(false, node0.isNew());
//       assertEquals(false, node0.isFunction());
//       assertEquals(false, node0.isCall());
//       assertEquals(false, node0.isSwitch());
//       assertEquals(1, node0.getLineno());
//       assertEquals(false, node0.isOptionalArg());
//       assertEquals(false, node0.isNE());
//       assertEquals(false, node0.isDec());
//       assertEquals(false, node0.isNull());
//       assertEquals(false, node0.isIf());
//       assertEquals(false, node0.isParamList());
//       assertEquals(4096, node0.getSourcePosition());
//       assertEquals(false, node0.isReturn());
//       assertEquals(false, node0.isGetProp());
//       assertEquals(false, node0.isNumber());
//       assertEquals(false, node0.isIn());
//       assertEquals(false, node0.isVar());
//       assertEquals(false, node0.isInstanceOf());
//       assertEquals(false, node0.isName());
//       assertEquals(0, node0.getLength());
//       assertEquals(false, node0.isGetterDef());
//       assertEquals(false, node0.isTrue());
//       assertEquals(false, node0.isGetElem());
//       assertEquals(false, node0.isContinue());
//       assertEquals(false, node0.isFalse());
//       assertEquals(false, node0.isSetterDef());
//       assertEquals(false, node0.isQuotedString());
//       assertEquals(false, node0.wasEmptyNode());
//       assertEquals(false, node0.isAdd());
//       assertEquals(false, node0.isFor());
//       assertEquals(true, node0.isSyntheticBlock());
//       assertEquals(false, node0.isExprResult());
//       assertEquals(false, node0.isThis());
//       assertEquals(" [synthetic:1] ", node0.getSourceFileName());
//       assertEquals(false, node0.isCase());
//       assertEquals(false, node0.isAssignAdd());
//       assertEquals(true, node0.isScript());
//       assertEquals(false, node0.isNoSideEffectsCall());
//       assertEquals(false, node0.isAnd());
//       assertEquals(false, node0.isHook());
//       assertEquals(false, node0.isLabelName());
//       assertEquals(false, node0.isDebugger());
//       assertEquals(35, node0.getChildCount());
//       assertEquals(false, node0.isDo());
//       assertEquals(false, node0.isTypeOf());
//       assertEquals(false, node0.isNot());
//       assertEquals(false, node0.isLocalResultCall());
//       assertEquals(false, node0.isWhile());
//       assertEquals(false, node0.isLabel());
//       assertEquals(0, node0.getCharno());
//       assertEquals(false, node0.isComma());
//       assertEquals(false, node0.isBlock());
//       assertEquals(false, node0.isFromExterns());
//       assertEquals(false, node0.isDelProp());
//       assertEquals(false, node0.isTry());
//       assertEquals(false, node0.isObjectLit());
//       assertEquals(false, node0.isDefaultCase());
//       assertEquals(false, node0.hasOneChild());
//       assertEquals(true, node0.hasMoreThanOneChild());
//       assertEquals(0, node0.getSideEffectFlags());
//       assertEquals(false, node0.isEmpty());
//       assertEquals(false, node0.isRegExp());
//       assertEquals(false, node0.isVarArgs());
//       assertEquals(false, node0.isVoid());
//       assertEquals(132, node0.getType());
//       assertEquals(false, node0.isArrayLit());
//       assertEquals(false, node0.isWith());
//       assertEquals(true, node0.hasChildren());
//       assertEquals(false, node0.isInc());
//       assertEquals(false, node0.isUnscopedQualifiedName());
//       assertEquals(false, node0.isOnlyModifiesThisCall());
//       assertEquals(false, node0.isThrow());
//       assertEquals(false, node0.isQualifiedName());
//       assertEquals(false, node0.isCatch());
//       assertEquals(false, node0.isOr());
//       assertEquals(false, node0.isBreak());
//       assertEquals(false, node0.isAssign());
//       assertEquals(false, compiler0.hasErrors());
//       assertEquals(false, compiler0.isTypeCheckingEnabled());
//       assertEquals(false, compiler0.acceptConstKeyword());
//       assertEquals(false, compiler0.isIdeMode());
//       assertEquals(68, compiler0.getWarningCount());
//       assertEquals(0, compiler0.getErrorCount());
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
//       assertEquals(false, compilerOptions0.isExternExportsEnabled());
//       assertNull(compilerOptions0.getLanguageOut());
//       assertEquals(CompilerOptions.TweakProcessing.OFF, compilerOptions0.getTweakProcessing());
//       assertEquals(false, compilerOptions0.getInferTypes());
//       assertEquals(false, compilerOptions0.assumeClosuresOnlyCaptureReferences());
//       assertEquals(false, compilerOptions0.assumeStrictThis());
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compilerOptions0.getLanguageIn());
//       assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
//       assertFalse(compilerOptions0.optimizeReturns);
//       assertFalse(compilerOptions0.inlineConstantVars);
//       assertFalse(compilerOptions0.prettyPrint);
//       assertFalse(compilerOptions0.checkControlStructures);
//       assertFalse(compilerOptions0.removeTryCatchFinally);
//       assertFalse(compilerOptions0.recordFunctionInformation);
//       assertFalse(compilerOptions0.aliasKeywords);
//       assertFalse(compilerOptions0.removeUnusedVars);
//       assertFalse(compilerOptions0.removeEmptyFunctions);
//       assertFalse(compilerOptions0.collapseAnonymousFunctions);
//       assertFalse(compilerOptions0.optimizeCalls);
//       assertFalse(compilerOptions0.convertToDottedProperties);
//       assertFalse(compilerOptions0.crossModuleMethodMotion);
//       assertFalse(compilerOptions0.aliasAllStrings);
//       assertFalse(compilerOptions0.collapseVariableDeclarations);
//       assertFalse(compilerOptions0.inlineGetters);
//       assertFalse(compilerOptions0.aliasExternals);
//       assertFalse(compilerOptions0.checkSuspiciousCode);
//       assertFalse(compilerOptions0.inlineVariables);
//       assertFalse(compilerOptions0.moveFunctionDeclarations);
//       assertFalse(compilerOptions0.deadAssignmentElimination);
//       assertFalse(compilerOptions0.disambiguateProperties);
//       assertFalse(compilerOptions0.markAsCompiled);
//       assertFalse(compilerOptions0.optimizeParameters);
//       assertFalse(compilerOptions0.labelRenaming);
//       assertFalse(compilerOptions0.markNoSideEffectCalls);
//       assertFalse(compilerOptions0.collapseProperties);
//       assertFalse(compilerOptions0.ideMode);
//       assertFalse(compilerOptions0.lineBreak);
//       assertFalse(compilerOptions0.exportTestFunctions);
//       assertFalse(compilerOptions0.checkSymbols);
//       assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
//       assertFalse(compilerOptions0.generateExports);
//       assertFalse(compilerOptions0.inlineFunctions);
//       assertFalse(compilerOptions0.reserveRawExports);
//       assertFalse(compilerOptions0.removeDeadCode);
//       assertFalse(compilerOptions0.rewriteFunctionExpressions);
//       assertFalse(compilerOptions0.closurePass);
//       assertFalse(compilerOptions0.generatePseudoNames);
//       assertFalse(compilerOptions0.removeUnusedLocalVars);
//       assertFalse(compilerOptions0.gatherCssNames);
//       assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
//       assertFalse(compilerOptions0.jqueryPass);
//       assertFalse(compilerOptions0.coalesceVariableNames);
//       assertFalse(compilerOptions0.crossModuleCodeMotion);
//       assertFalse(compilerOptions0.ambiguateProperties);
//       assertFalse(compilerOptions0.foldConstants);
//       assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
//       assertFalse(compilerOptions0.flowSensitiveInlineVariables);
//       assertFalse(compilerOptions0.checkTypes);
//       assertFalse(compilerOptions0.devirtualizePrototypeMethods);
//       assertFalse(compilerOptions0.smartNameRemoval);
//       assertFalse(compilerOptions0.optimizeArgumentsArray);
//       assertFalse(compilerOptions0.printInputDelimiter);
//       assertFalse(compilerOptions0.inlineLocalFunctions);
//       assertFalse(compilerOptions0.computeFunctionSideEffects);
//   }

  @Test
  public void test2() {}
//   @Test
//   public void test2()  throws Throwable  {
//       Compiler compiler0 = new Compiler();
//       assertNotNull(compiler0);
//       
//       LinkedList<JSSourceFile> linkedList0 = new LinkedList<JSSourceFile>();
//       assertNotNull(linkedList0);
//       assertEquals(0, linkedList0.size());
//       assertEquals("[]", linkedList0.toString());
//       
//       CompilerOptions compilerOptions0 = compiler0.newCompilerOptions();
//       assertNotNull(compilerOptions0);
//       assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
//       assertEquals(false, compilerOptions0.assumeStrictThis());
//       assertEquals(false, compilerOptions0.getInferTypes());
//       assertNull(compilerOptions0.getLanguageOut());
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compilerOptions0.getLanguageIn());
//       assertEquals(false, compilerOptions0.assumeClosuresOnlyCaptureReferences());
//       assertEquals(false, compilerOptions0.isExternExportsEnabled());
//       assertEquals(CompilerOptions.TweakProcessing.OFF, compilerOptions0.getTweakProcessing());
//       assertFalse(compilerOptions0.removeUnusedVars);
//       assertFalse(compilerOptions0.closurePass);
//       assertFalse(compilerOptions0.removeDeadCode);
//       assertFalse(compilerOptions0.reserveRawExports);
//       assertFalse(compilerOptions0.aliasKeywords);
//       assertFalse(compilerOptions0.flowSensitiveInlineVariables);
//       assertFalse(compilerOptions0.markAsCompiled);
//       assertFalse(compilerOptions0.optimizeCalls);
//       assertFalse(compilerOptions0.checkControlStructures);
//       assertFalse(compilerOptions0.lineBreak);
//       assertFalse(compilerOptions0.markNoSideEffectCalls);
//       assertFalse(compilerOptions0.collapseVariableDeclarations);
//       assertFalse(compilerOptions0.devirtualizePrototypeMethods);
//       assertFalse(compilerOptions0.ideMode);
//       assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
//       assertFalse(compilerOptions0.inlineFunctions);
//       assertFalse(compilerOptions0.inlineConstantVars);
//       assertFalse(compilerOptions0.checkSuspiciousCode);
//       assertFalse(compilerOptions0.removeTryCatchFinally);
//       assertFalse(compilerOptions0.printInputDelimiter);
//       assertFalse(compilerOptions0.optimizeReturns);
//       assertFalse(compilerOptions0.inlineGetters);
//       assertFalse(compilerOptions0.crossModuleCodeMotion);
//       assertFalse(compilerOptions0.inlineLocalFunctions);
//       assertFalse(compilerOptions0.foldConstants);
//       assertFalse(compilerOptions0.computeFunctionSideEffects);
//       assertFalse(compilerOptions0.generateExports);
//       assertFalse(compilerOptions0.collapseAnonymousFunctions);
//       assertFalse(compilerOptions0.disambiguateProperties);
//       assertFalse(compilerOptions0.jqueryPass);
//       assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
//       assertFalse(compilerOptions0.collapseProperties);
//       assertFalse(compilerOptions0.ambiguateProperties);
//       assertFalse(compilerOptions0.moveFunctionDeclarations);
//       assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
//       assertFalse(compilerOptions0.generatePseudoNames);
//       assertFalse(compilerOptions0.labelRenaming);
//       assertFalse(compilerOptions0.deadAssignmentElimination);
//       assertFalse(compilerOptions0.gatherCssNames);
//       assertFalse(compilerOptions0.inlineVariables);
//       assertFalse(compilerOptions0.checkSymbols);
//       assertFalse(compilerOptions0.rewriteFunctionExpressions);
//       assertFalse(compilerOptions0.removeEmptyFunctions);
//       assertFalse(compilerOptions0.optimizeParameters);
//       assertFalse(compilerOptions0.exportTestFunctions);
//       assertFalse(compilerOptions0.smartNameRemoval);
//       assertFalse(compilerOptions0.convertToDottedProperties);
//       assertFalse(compilerOptions0.crossModuleMethodMotion);
//       assertFalse(compilerOptions0.coalesceVariableNames);
//       assertFalse(compilerOptions0.prettyPrint);
//       assertFalse(compilerOptions0.optimizeArgumentsArray);
//       assertFalse(compilerOptions0.aliasExternals);
//       assertFalse(compilerOptions0.aliasAllStrings);
//       assertFalse(compilerOptions0.checkTypes);
//       assertFalse(compilerOptions0.recordFunctionInformation);
//       assertFalse(compilerOptions0.removeUnusedLocalVars);
//       
//       Result result0 = compiler0.compile((List<JSSourceFile>) linkedList0, (List<JSSourceFile>) linkedList0, compilerOptions0);
//       assertNotNull(result0);
//       assertEquals(false, compiler0.isTypeCheckingEnabled());
//       assertEquals(false, compiler0.hasErrors());
//       assertEquals(false, compiler0.acceptConstKeyword());
//       assertEquals(0, compiler0.getErrorCount());
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
//       assertEquals(0, compiler0.getWarningCount());
//       assertEquals(false, compiler0.isIdeMode());
//       assertEquals(0, linkedList0.size());
//       assertEquals("[]", linkedList0.toString());
//       assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
//       assertEquals(false, compilerOptions0.assumeStrictThis());
//       assertEquals(false, compilerOptions0.getInferTypes());
//       assertNull(compilerOptions0.getLanguageOut());
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compilerOptions0.getLanguageIn());
//       assertEquals(false, compilerOptions0.assumeClosuresOnlyCaptureReferences());
//       assertEquals(false, compilerOptions0.isExternExportsEnabled());
//       assertEquals(CompilerOptions.TweakProcessing.OFF, compilerOptions0.getTweakProcessing());
//       assertFalse(compilerOptions0.removeUnusedVars);
//       assertFalse(compilerOptions0.closurePass);
//       assertFalse(compilerOptions0.removeDeadCode);
//       assertFalse(compilerOptions0.reserveRawExports);
//       assertFalse(compilerOptions0.aliasKeywords);
//       assertFalse(compilerOptions0.flowSensitiveInlineVariables);
//       assertFalse(compilerOptions0.markAsCompiled);
//       assertFalse(compilerOptions0.optimizeCalls);
//       assertFalse(compilerOptions0.checkControlStructures);
//       assertFalse(compilerOptions0.lineBreak);
//       assertFalse(compilerOptions0.markNoSideEffectCalls);
//       assertFalse(compilerOptions0.collapseVariableDeclarations);
//       assertFalse(compilerOptions0.devirtualizePrototypeMethods);
//       assertFalse(compilerOptions0.ideMode);
//       assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
//       assertFalse(compilerOptions0.inlineFunctions);
//       assertFalse(compilerOptions0.inlineConstantVars);
//       assertFalse(compilerOptions0.checkSuspiciousCode);
//       assertFalse(compilerOptions0.removeTryCatchFinally);
//       assertFalse(compilerOptions0.printInputDelimiter);
//       assertFalse(compilerOptions0.optimizeReturns);
//       assertFalse(compilerOptions0.inlineGetters);
//       assertFalse(compilerOptions0.crossModuleCodeMotion);
//       assertFalse(compilerOptions0.inlineLocalFunctions);
//       assertFalse(compilerOptions0.foldConstants);
//       assertFalse(compilerOptions0.computeFunctionSideEffects);
//       assertFalse(compilerOptions0.generateExports);
//       assertFalse(compilerOptions0.collapseAnonymousFunctions);
//       assertFalse(compilerOptions0.disambiguateProperties);
//       assertFalse(compilerOptions0.jqueryPass);
//       assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
//       assertFalse(compilerOptions0.collapseProperties);
//       assertFalse(compilerOptions0.ambiguateProperties);
//       assertFalse(compilerOptions0.moveFunctionDeclarations);
//       assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
//       assertFalse(compilerOptions0.generatePseudoNames);
//       assertFalse(compilerOptions0.labelRenaming);
//       assertFalse(compilerOptions0.deadAssignmentElimination);
//       assertFalse(compilerOptions0.gatherCssNames);
//       assertFalse(compilerOptions0.inlineVariables);
//       assertFalse(compilerOptions0.checkSymbols);
//       assertFalse(compilerOptions0.rewriteFunctionExpressions);
//       assertFalse(compilerOptions0.removeEmptyFunctions);
//       assertFalse(compilerOptions0.optimizeParameters);
//       assertFalse(compilerOptions0.exportTestFunctions);
//       assertFalse(compilerOptions0.smartNameRemoval);
//       assertFalse(compilerOptions0.convertToDottedProperties);
//       assertFalse(compilerOptions0.crossModuleMethodMotion);
//       assertFalse(compilerOptions0.coalesceVariableNames);
//       assertFalse(compilerOptions0.prettyPrint);
//       assertFalse(compilerOptions0.optimizeArgumentsArray);
//       assertFalse(compilerOptions0.aliasExternals);
//       assertFalse(compilerOptions0.aliasAllStrings);
//       assertFalse(compilerOptions0.checkTypes);
//       assertFalse(compilerOptions0.recordFunctionInformation);
//       assertFalse(compilerOptions0.removeUnusedLocalVars);
//       
//       RemoveUnusedVars removeUnusedVars0 = new RemoveUnusedVars(compiler0, compilerOptions0.optimizeCalls, compilerOptions0.ambiguateProperties, compilerOptions0.optimizeCalls);
//       assertNotNull(removeUnusedVars0);
//       assertEquals(false, compiler0.isTypeCheckingEnabled());
//       assertEquals(false, compiler0.hasErrors());
//       assertEquals(false, compiler0.acceptConstKeyword());
//       assertEquals(0, compiler0.getErrorCount());
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
//       assertEquals(0, compiler0.getWarningCount());
//       assertEquals(false, compiler0.isIdeMode());
//       assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
//       assertEquals(false, compilerOptions0.assumeStrictThis());
//       assertEquals(false, compilerOptions0.getInferTypes());
//       assertNull(compilerOptions0.getLanguageOut());
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compilerOptions0.getLanguageIn());
//       assertEquals(false, compilerOptions0.assumeClosuresOnlyCaptureReferences());
//       assertEquals(false, compilerOptions0.isExternExportsEnabled());
//       assertEquals(CompilerOptions.TweakProcessing.OFF, compilerOptions0.getTweakProcessing());
//       assertFalse(compilerOptions0.removeUnusedVars);
//       assertFalse(compilerOptions0.closurePass);
//       assertFalse(compilerOptions0.removeDeadCode);
//       assertFalse(compilerOptions0.reserveRawExports);
//       assertFalse(compilerOptions0.aliasKeywords);
//       assertFalse(compilerOptions0.flowSensitiveInlineVariables);
//       assertFalse(compilerOptions0.markAsCompiled);
//       assertFalse(compilerOptions0.optimizeCalls);
//       assertFalse(compilerOptions0.checkControlStructures);
//       assertFalse(compilerOptions0.lineBreak);
//       assertFalse(compilerOptions0.markNoSideEffectCalls);
//       assertFalse(compilerOptions0.collapseVariableDeclarations);
//       assertFalse(compilerOptions0.devirtualizePrototypeMethods);
//       assertFalse(compilerOptions0.ideMode);
//       assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
//       assertFalse(compilerOptions0.inlineFunctions);
//       assertFalse(compilerOptions0.inlineConstantVars);
//       assertFalse(compilerOptions0.checkSuspiciousCode);
//       assertFalse(compilerOptions0.removeTryCatchFinally);
//       assertFalse(compilerOptions0.printInputDelimiter);
//       assertFalse(compilerOptions0.optimizeReturns);
//       assertFalse(compilerOptions0.inlineGetters);
//       assertFalse(compilerOptions0.crossModuleCodeMotion);
//       assertFalse(compilerOptions0.inlineLocalFunctions);
//       assertFalse(compilerOptions0.foldConstants);
//       assertFalse(compilerOptions0.computeFunctionSideEffects);
//       assertFalse(compilerOptions0.generateExports);
//       assertFalse(compilerOptions0.collapseAnonymousFunctions);
//       assertFalse(compilerOptions0.disambiguateProperties);
//       assertFalse(compilerOptions0.jqueryPass);
//       assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
//       assertFalse(compilerOptions0.collapseProperties);
//       assertFalse(compilerOptions0.ambiguateProperties);
//       assertFalse(compilerOptions0.moveFunctionDeclarations);
//       assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
//       assertFalse(compilerOptions0.generatePseudoNames);
//       assertFalse(compilerOptions0.labelRenaming);
//       assertFalse(compilerOptions0.deadAssignmentElimination);
//       assertFalse(compilerOptions0.gatherCssNames);
//       assertFalse(compilerOptions0.inlineVariables);
//       assertFalse(compilerOptions0.checkSymbols);
//       assertFalse(compilerOptions0.rewriteFunctionExpressions);
//       assertFalse(compilerOptions0.removeEmptyFunctions);
//       assertFalse(compilerOptions0.optimizeParameters);
//       assertFalse(compilerOptions0.exportTestFunctions);
//       assertFalse(compilerOptions0.smartNameRemoval);
//       assertFalse(compilerOptions0.convertToDottedProperties);
//       assertFalse(compilerOptions0.crossModuleMethodMotion);
//       assertFalse(compilerOptions0.coalesceVariableNames);
//       assertFalse(compilerOptions0.prettyPrint);
//       assertFalse(compilerOptions0.optimizeArgumentsArray);
//       assertFalse(compilerOptions0.aliasExternals);
//       assertFalse(compilerOptions0.aliasAllStrings);
//       assertFalse(compilerOptions0.checkTypes);
//       assertFalse(compilerOptions0.recordFunctionInformation);
//       assertFalse(compilerOptions0.removeUnusedLocalVars);
//       
//       Node node0 = RuntimeTypeCheck.getBoilerplateCode(compiler0, compilerOptions0.checkMissingGetCssNameBlacklist);
//       assertNotNull(node0);
//       assertEquals(false, node0.isWith());
//       assertEquals(true, node0.isScript());
//       assertEquals(false, node0.isContinue());
//       assertEquals(false, node0.isEmpty());
//       assertEquals(false, node0.hasOneChild());
//       assertEquals(false, node0.isQualifiedName());
//       assertEquals(false, node0.isInstanceOf());
//       assertEquals(false, node0.isTypeOf());
//       assertEquals(0, node0.getCharno());
//       assertEquals(false, node0.isNull());
//       assertEquals(false, node0.isDelProp());
//       assertEquals(false, node0.isThrow());
//       assertEquals(false, node0.isBreak());
//       assertEquals(false, node0.wasEmptyNode());
//       assertEquals(false, node0.isInc());
//       assertEquals(false, node0.isFalse());
//       assertEquals(false, node0.isLabelName());
//       assertEquals(false, node0.isNew());
//       assertEquals(false, node0.isCall());
//       assertEquals(false, node0.isQuotedString());
//       assertEquals(false, node0.isName());
//       assertEquals(false, node0.isRegExp());
//       assertEquals(false, node0.isDebugger());
//       assertEquals(false, node0.isExprResult());
//       assertEquals(false, node0.isAdd());
//       assertEquals(false, node0.isVoid());
//       assertEquals(false, node0.isNot());
//       assertEquals(false, node0.isReturn());
//       assertEquals(false, node0.isOr());
//       assertEquals(false, node0.isVar());
//       assertEquals(false, node0.isAssignAdd());
//       assertEquals(0, node0.getSideEffectFlags());
//       assertEquals(132, node0.getType());
//       assertEquals(false, node0.isTrue());
//       assertEquals(false, node0.isVarArgs());
//       assertEquals(false, node0.isFunction());
//       assertEquals(false, node0.isLabel());
//       assertEquals(false, node0.isWhile());
//       assertEquals(false, node0.isUnscopedQualifiedName());
//       assertEquals(false, node0.isNoSideEffectsCall());
//       assertEquals(false, node0.isDefaultCase());
//       assertEquals(false, node0.isTry());
//       assertEquals(false, node0.isArrayLit());
//       assertEquals(" [synthetic:1] ", node0.getSourceFileName());
//       assertEquals(false, node0.isCatch());
//       assertEquals(false, node0.isGetProp());
//       assertEquals(false, node0.isIn());
//       assertEquals(false, node0.isNumber());
//       assertEquals(true, node0.isSyntheticBlock());
//       assertEquals(false, node0.isCase());
//       assertEquals(false, node0.isIf());
//       assertEquals(false, node0.isHook());
//       assertEquals(4096, node0.getSourcePosition());
//       assertEquals(0, node0.getLength());
//       assertEquals(1, node0.getLineno());
//       assertEquals(true, node0.hasChildren());
//       assertEquals(false, node0.isFor());
//       assertEquals(false, node0.isDo());
//       assertEquals(false, node0.isDec());
//       assertEquals(false, node0.isOnlyModifiesThisCall());
//       assertEquals(false, node0.isThis());
//       assertEquals(35, node0.getChildCount());
//       assertEquals(false, node0.isBlock());
//       assertEquals(false, node0.isAnd());
//       assertEquals(false, node0.isSetterDef());
//       assertEquals(false, node0.isOptionalArg());
//       assertEquals(false, node0.isSwitch());
//       assertEquals(false, node0.isObjectLit());
//       assertEquals(false, node0.isAssign());
//       assertEquals(false, node0.isGetterDef());
//       assertEquals(false, node0.isComma());
//       assertEquals(false, node0.isParamList());
//       assertEquals(false, node0.isGetElem());
//       assertEquals(false, node0.isFromExterns());
//       assertEquals(false, node0.isString());
//       assertEquals(false, node0.isLocalResultCall());
//       assertEquals(true, node0.hasMoreThanOneChild());
//       assertEquals(false, node0.isNE());
//       assertEquals(false, compiler0.isTypeCheckingEnabled());
//       assertEquals(false, compiler0.hasErrors());
//       assertEquals(false, compiler0.acceptConstKeyword());
//       assertEquals(0, compiler0.getErrorCount());
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
//       assertEquals(false, compiler0.isIdeMode());
//       assertEquals(68, compiler0.getWarningCount());
//       assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
//       assertEquals(false, compilerOptions0.assumeStrictThis());
//       assertEquals(false, compilerOptions0.getInferTypes());
//       assertNull(compilerOptions0.getLanguageOut());
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compilerOptions0.getLanguageIn());
//       assertEquals(false, compilerOptions0.assumeClosuresOnlyCaptureReferences());
//       assertEquals(false, compilerOptions0.isExternExportsEnabled());
//       assertEquals(CompilerOptions.TweakProcessing.OFF, compilerOptions0.getTweakProcessing());
//       assertFalse(compilerOptions0.removeUnusedVars);
//       assertFalse(compilerOptions0.closurePass);
//       assertFalse(compilerOptions0.removeDeadCode);
//       assertFalse(compilerOptions0.reserveRawExports);
//       assertFalse(compilerOptions0.aliasKeywords);
//       assertFalse(compilerOptions0.flowSensitiveInlineVariables);
//       assertFalse(compilerOptions0.markAsCompiled);
//       assertFalse(compilerOptions0.optimizeCalls);
//       assertFalse(compilerOptions0.checkControlStructures);
//       assertFalse(compilerOptions0.lineBreak);
//       assertFalse(compilerOptions0.markNoSideEffectCalls);
//       assertFalse(compilerOptions0.collapseVariableDeclarations);
//       assertFalse(compilerOptions0.devirtualizePrototypeMethods);
//       assertFalse(compilerOptions0.ideMode);
//       assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
//       assertFalse(compilerOptions0.inlineFunctions);
//       assertFalse(compilerOptions0.inlineConstantVars);
//       assertFalse(compilerOptions0.checkSuspiciousCode);
//       assertFalse(compilerOptions0.removeTryCatchFinally);
//       assertFalse(compilerOptions0.printInputDelimiter);
//       assertFalse(compilerOptions0.optimizeReturns);
//       assertFalse(compilerOptions0.inlineGetters);
//       assertFalse(compilerOptions0.crossModuleCodeMotion);
//       assertFalse(compilerOptions0.inlineLocalFunctions);
//       assertFalse(compilerOptions0.foldConstants);
//       assertFalse(compilerOptions0.computeFunctionSideEffects);
//       assertFalse(compilerOptions0.generateExports);
//       assertFalse(compilerOptions0.collapseAnonymousFunctions);
//       assertFalse(compilerOptions0.disambiguateProperties);
//       assertFalse(compilerOptions0.jqueryPass);
//       assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
//       assertFalse(compilerOptions0.collapseProperties);
//       assertFalse(compilerOptions0.ambiguateProperties);
//       assertFalse(compilerOptions0.moveFunctionDeclarations);
//       assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
//       assertFalse(compilerOptions0.generatePseudoNames);
//       assertFalse(compilerOptions0.labelRenaming);
//       assertFalse(compilerOptions0.deadAssignmentElimination);
//       assertFalse(compilerOptions0.gatherCssNames);
//       assertFalse(compilerOptions0.inlineVariables);
//       assertFalse(compilerOptions0.checkSymbols);
//       assertFalse(compilerOptions0.rewriteFunctionExpressions);
//       assertFalse(compilerOptions0.removeEmptyFunctions);
//       assertFalse(compilerOptions0.optimizeParameters);
//       assertFalse(compilerOptions0.exportTestFunctions);
//       assertFalse(compilerOptions0.smartNameRemoval);
//       assertFalse(compilerOptions0.convertToDottedProperties);
//       assertFalse(compilerOptions0.crossModuleMethodMotion);
//       assertFalse(compilerOptions0.coalesceVariableNames);
//       assertFalse(compilerOptions0.prettyPrint);
//       assertFalse(compilerOptions0.optimizeArgumentsArray);
//       assertFalse(compilerOptions0.aliasExternals);
//       assertFalse(compilerOptions0.aliasAllStrings);
//       assertFalse(compilerOptions0.checkTypes);
//       assertFalse(compilerOptions0.recordFunctionInformation);
//       assertFalse(compilerOptions0.removeUnusedLocalVars);
//       
//       SimpleDefinitionFinder simpleDefinitionFinder0 = new SimpleDefinitionFinder((AbstractCompiler) compiler0);
//       assertNotNull(simpleDefinitionFinder0);
//       assertEquals(false, compiler0.isTypeCheckingEnabled());
//       assertEquals(false, compiler0.hasErrors());
//       assertEquals(false, compiler0.acceptConstKeyword());
//       assertEquals(0, compiler0.getErrorCount());
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
//       assertEquals(false, compiler0.isIdeMode());
//       assertEquals(68, compiler0.getWarningCount());
//       
//       removeUnusedVars0.process(node0, node0, simpleDefinitionFinder0);
//       assertEquals(false, node0.isWith());
//       assertEquals(true, node0.isScript());
//       assertEquals(false, node0.isContinue());
//       assertEquals(false, node0.isEmpty());
//       assertEquals(false, node0.hasOneChild());
//       assertEquals(false, node0.isQualifiedName());
//       assertEquals(false, node0.isInstanceOf());
//       assertEquals(false, node0.isTypeOf());
//       assertEquals(0, node0.getCharno());
//       assertEquals(false, node0.isNull());
//       assertEquals(false, node0.isDelProp());
//       assertEquals(false, node0.isThrow());
//       assertEquals(false, node0.isBreak());
//       assertEquals(false, node0.wasEmptyNode());
//       assertEquals(false, node0.isInc());
//       assertEquals(false, node0.isFalse());
//       assertEquals(false, node0.isLabelName());
//       assertEquals(false, node0.isNew());
//       assertEquals(false, node0.isCall());
//       assertEquals(false, node0.isQuotedString());
//       assertEquals(false, node0.isName());
//       assertEquals(false, node0.isRegExp());
//       assertEquals(false, node0.isDebugger());
//       assertEquals(false, node0.isExprResult());
//       assertEquals(false, node0.isAdd());
//       assertEquals(false, node0.isVoid());
//       assertEquals(false, node0.isNot());
//       assertEquals(false, node0.isReturn());
//       assertEquals(false, node0.isOr());
//       assertEquals(false, node0.isVar());
//       assertEquals(false, node0.isAssignAdd());
//       assertEquals(0, node0.getSideEffectFlags());
//       assertEquals(132, node0.getType());
//       assertEquals(false, node0.isTrue());
//       assertEquals(false, node0.isVarArgs());
//       assertEquals(false, node0.isFunction());
//       assertEquals(false, node0.isLabel());
//       assertEquals(false, node0.isWhile());
//       assertEquals(false, node0.isUnscopedQualifiedName());
//       assertEquals(false, node0.isNoSideEffectsCall());
//       assertEquals(false, node0.isDefaultCase());
//       assertEquals(false, node0.isTry());
//       assertEquals(false, node0.isArrayLit());
//       assertEquals(" [synthetic:1] ", node0.getSourceFileName());
//       assertEquals(false, node0.isCatch());
//       assertEquals(false, node0.isGetProp());
//       assertEquals(false, node0.isIn());
//       assertEquals(false, node0.isNumber());
//       assertEquals(true, node0.isSyntheticBlock());
//       assertEquals(false, node0.isCase());
//       assertEquals(false, node0.isIf());
//       assertEquals(false, node0.isHook());
//       assertEquals(4096, node0.getSourcePosition());
//       assertEquals(0, node0.getLength());
//       assertEquals(1, node0.getLineno());
//       assertEquals(true, node0.hasChildren());
//       assertEquals(false, node0.isFor());
//       assertEquals(false, node0.isDo());
//       assertEquals(false, node0.isDec());
//       assertEquals(false, node0.isOnlyModifiesThisCall());
//       assertEquals(false, node0.isThis());
//       assertEquals(35, node0.getChildCount());
//       assertEquals(false, node0.isBlock());
//       assertEquals(false, node0.isAnd());
//       assertEquals(false, node0.isSetterDef());
//       assertEquals(false, node0.isOptionalArg());
//       assertEquals(false, node0.isSwitch());
//       assertEquals(false, node0.isObjectLit());
//       assertEquals(false, node0.isAssign());
//       assertEquals(false, node0.isGetterDef());
//       assertEquals(false, node0.isComma());
//       assertEquals(false, node0.isParamList());
//       assertEquals(false, node0.isGetElem());
//       assertEquals(false, node0.isFromExterns());
//       assertEquals(false, node0.isString());
//       assertEquals(false, node0.isLocalResultCall());
//       assertEquals(true, node0.hasMoreThanOneChild());
//       assertEquals(false, node0.isNE());
//       assertEquals(false, compiler0.isTypeCheckingEnabled());
//       assertEquals(false, compiler0.hasErrors());
//       assertEquals(false, compiler0.acceptConstKeyword());
//       assertEquals(0, compiler0.getErrorCount());
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
//       assertEquals(false, compiler0.isIdeMode());
//       assertEquals(68, compiler0.getWarningCount());
//       assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
//       assertEquals(false, compilerOptions0.assumeStrictThis());
//       assertEquals(false, compilerOptions0.getInferTypes());
//       assertNull(compilerOptions0.getLanguageOut());
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compilerOptions0.getLanguageIn());
//       assertEquals(false, compilerOptions0.assumeClosuresOnlyCaptureReferences());
//       assertEquals(false, compilerOptions0.isExternExportsEnabled());
//       assertEquals(CompilerOptions.TweakProcessing.OFF, compilerOptions0.getTweakProcessing());
//       assertFalse(compilerOptions0.removeUnusedVars);
//       assertFalse(compilerOptions0.closurePass);
//       assertFalse(compilerOptions0.removeDeadCode);
//       assertFalse(compilerOptions0.reserveRawExports);
//       assertFalse(compilerOptions0.aliasKeywords);
//       assertFalse(compilerOptions0.flowSensitiveInlineVariables);
//       assertFalse(compilerOptions0.markAsCompiled);
//       assertFalse(compilerOptions0.optimizeCalls);
//       assertFalse(compilerOptions0.checkControlStructures);
//       assertFalse(compilerOptions0.lineBreak);
//       assertFalse(compilerOptions0.markNoSideEffectCalls);
//       assertFalse(compilerOptions0.collapseVariableDeclarations);
//       assertFalse(compilerOptions0.devirtualizePrototypeMethods);
//       assertFalse(compilerOptions0.ideMode);
//       assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
//       assertFalse(compilerOptions0.inlineFunctions);
//       assertFalse(compilerOptions0.inlineConstantVars);
//       assertFalse(compilerOptions0.checkSuspiciousCode);
//       assertFalse(compilerOptions0.removeTryCatchFinally);
//       assertFalse(compilerOptions0.printInputDelimiter);
//       assertFalse(compilerOptions0.optimizeReturns);
//       assertFalse(compilerOptions0.inlineGetters);
//       assertFalse(compilerOptions0.crossModuleCodeMotion);
//       assertFalse(compilerOptions0.inlineLocalFunctions);
//       assertFalse(compilerOptions0.foldConstants);
//       assertFalse(compilerOptions0.computeFunctionSideEffects);
//       assertFalse(compilerOptions0.generateExports);
//       assertFalse(compilerOptions0.collapseAnonymousFunctions);
//       assertFalse(compilerOptions0.disambiguateProperties);
//       assertFalse(compilerOptions0.jqueryPass);
//       assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
//       assertFalse(compilerOptions0.collapseProperties);
//       assertFalse(compilerOptions0.ambiguateProperties);
//       assertFalse(compilerOptions0.moveFunctionDeclarations);
//       assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
//       assertFalse(compilerOptions0.generatePseudoNames);
//       assertFalse(compilerOptions0.labelRenaming);
//       assertFalse(compilerOptions0.deadAssignmentElimination);
//       assertFalse(compilerOptions0.gatherCssNames);
//       assertFalse(compilerOptions0.inlineVariables);
//       assertFalse(compilerOptions0.checkSymbols);
//       assertFalse(compilerOptions0.rewriteFunctionExpressions);
//       assertFalse(compilerOptions0.removeEmptyFunctions);
//       assertFalse(compilerOptions0.optimizeParameters);
//       assertFalse(compilerOptions0.exportTestFunctions);
//       assertFalse(compilerOptions0.smartNameRemoval);
//       assertFalse(compilerOptions0.convertToDottedProperties);
//       assertFalse(compilerOptions0.crossModuleMethodMotion);
//       assertFalse(compilerOptions0.coalesceVariableNames);
//       assertFalse(compilerOptions0.prettyPrint);
//       assertFalse(compilerOptions0.optimizeArgumentsArray);
//       assertFalse(compilerOptions0.aliasExternals);
//       assertFalse(compilerOptions0.aliasAllStrings);
//       assertFalse(compilerOptions0.checkTypes);
//       assertFalse(compilerOptions0.recordFunctionInformation);
//       assertFalse(compilerOptions0.removeUnusedLocalVars);
//   }
}
