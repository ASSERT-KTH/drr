/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 21:06:33 GMT 2014
 */

package com.google.javascript.jscomp;

import static org.junit.Assert.*;
import org.junit.Test;
import com.google.javascript.jscomp.AbstractCompiler;
import com.google.javascript.jscomp.Compiler;
import com.google.javascript.jscomp.CompilerOptions;
import com.google.javascript.jscomp.RemoveUnusedVars;
import com.google.javascript.jscomp.SimpleDefinitionFinder;
import com.google.javascript.rhino.Node;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;

import org.junit.runner.RunWith;


public class RemoveUnusedVarsEvoSuite_branch_Test  {

  @Test
  public void test0()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      assertNotNull(compiler0);
      
      String string0 = "sg.yie=d.closing";
      AbstractCompiler.LifeCycleStage abstractCompiler_LifeCycleStage0 = AbstractCompiler.LifeCycleStage.NORMALIZED;
      compiler0.setLifeCycleStage(abstractCompiler_LifeCycleStage0);
      Node node0 = compiler0.parseTestCode(string0);
      assertNotNull(node0);
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(true, node0.hasChildren());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isIf());
      assertEquals(1, node0.getLineno());
      assertEquals(false, node0.isBlock());
      assertEquals(0, node0.getLength());
      assertEquals(4096, node0.getSourcePosition());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isDelProp());
      assertEquals(" [testcode] ", node0.getSourceFileName());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isDebugger());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(true, node0.isSyntheticBlock());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(true, node0.hasOneChild());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isString());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(132, node0.getType());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isTry());
      assertEquals(0, node0.getCharno());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isDo());
      assertEquals(1, node0.getChildCount());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isTypeOf());
      assertEquals(true, node0.isScript());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isEmpty());
      
      boolean boolean0 = false;
      int int0 = 37;
      node0.setType(int0);
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(true, node0.hasChildren());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isIf());
      assertEquals(1, node0.getLineno());
      assertEquals(false, node0.isBlock());
      assertEquals(37, node0.getType());
      assertEquals(0, node0.getLength());
      assertEquals(4096, node0.getSourcePosition());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isDelProp());
      assertEquals(" [testcode] ", node0.getSourceFileName());
      assertEquals(false, node0.isScript());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isDebugger());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(true, node0.isCall());
      assertEquals(true, node0.isSyntheticBlock());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(true, node0.hasOneChild());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isString());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isTry());
      assertEquals(0, node0.getCharno());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isDo());
      assertEquals(1, node0.getChildCount());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isEmpty());
      
      RemoveUnusedVars removeUnusedVars0 = new RemoveUnusedVars(compiler0, boolean0, boolean0, boolean0);
      assertNotNull(removeUnusedVars0);
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(false, compiler0.acceptConstKeyword());
      
      removeUnusedVars0.process(node0, node0);
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(true, node0.hasChildren());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isIf());
      assertEquals(1, node0.getLineno());
      assertEquals(false, node0.isBlock());
      assertEquals(37, node0.getType());
      assertEquals(0, node0.getLength());
      assertEquals(4096, node0.getSourcePosition());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isDelProp());
      assertEquals(" [testcode] ", node0.getSourceFileName());
      assertEquals(false, node0.isScript());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isDebugger());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(true, node0.isCall());
      assertEquals(true, node0.isSyntheticBlock());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(true, node0.hasOneChild());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isString());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isTry());
      assertEquals(0, node0.getCharno());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isDo());
      assertEquals(1, node0.getChildCount());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isEmpty());
  }

  @Test
  public void test1() {}
//   @Test
//   public void test1()  throws Throwable  {
//       Compiler compiler0 = new Compiler();
//       assertNotNull(compiler0);
//       
//       String string0 = "arguments";
//       Node node0 = compiler0.parseTestCode(string0);
//       assertNotNull(node0);
//       assertEquals(false, compiler0.isTypeCheckingEnabled());
//       assertEquals(false, compiler0.isIdeMode());
//       assertEquals(0, compiler0.getErrorCount());
//       assertEquals(false, compiler0.acceptConstKeyword());
//       assertEquals(false, compiler0.hasErrors());
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
//       assertEquals(0, compiler0.getWarningCount());
//       assertEquals(false, node0.isThrow());
//       assertEquals(false, node0.isContinue());
//       assertEquals(false, node0.isUnscopedQualifiedName());
//       assertEquals(false, node0.isTrue());
//       assertEquals(" [testcode] ", node0.getSourceFileName());
//       assertEquals(false, node0.isFor());
//       assertEquals(false, node0.isNull());
//       assertEquals(false, node0.isLocalResultCall());
//       assertEquals(false, node0.isDelProp());
//       assertEquals(false, node0.isCase());
//       assertEquals(false, node0.isVar());
//       assertEquals(false, node0.isDefaultCase());
//       assertEquals(false, node0.isIf());
//       assertEquals(false, node0.isWith());
//       assertEquals(false, node0.isTry());
//       assertEquals(false, node0.isQualifiedName());
//       assertEquals(false, node0.isIn());
//       assertEquals(false, node0.isGetProp());
//       assertEquals(false, node0.isRegExp());
//       assertEquals(false, node0.isQuotedString());
//       assertEquals(false, node0.isAnd());
//       assertEquals(false, node0.isAssignAdd());
//       assertEquals(false, node0.isDo());
//       assertEquals(false, node0.isAdd());
//       assertEquals(false, node0.isNE());
//       assertEquals(false, node0.isObjectLit());
//       assertEquals(false, node0.isNot());
//       assertEquals(false, node0.isBlock());
//       assertEquals(true, node0.hasChildren());
//       assertEquals(false, node0.isArrayLit());
//       assertEquals(false, node0.isCall());
//       assertEquals(false, node0.isOnlyModifiesThisCall());
//       assertEquals(false, node0.isInc());
//       assertEquals(false, node0.isDec());
//       assertEquals(1, node0.getChildCount());
//       assertEquals(false, node0.isLabel());
//       assertEquals(false, node0.hasMoreThanOneChild());
//       assertEquals(false, node0.isString());
//       assertEquals(false, node0.isAssign());
//       assertEquals(0, node0.getSideEffectFlags());
//       assertEquals(false, node0.isFunction());
//       assertEquals(false, node0.isNew());
//       assertEquals(132, node0.getType());
//       assertEquals(false, node0.isName());
//       assertEquals(false, node0.isNoSideEffectsCall());
//       assertEquals(4096, node0.getSourcePosition());
//       assertEquals(false, node0.isBreak());
//       assertEquals(false, node0.isExprResult());
//       assertEquals(false, node0.isSwitch());
//       assertEquals(false, node0.isParamList());
//       assertEquals(false, node0.isSetterDef());
//       assertEquals(false, node0.isHook());
//       assertEquals(false, node0.isNumber());
//       assertEquals(0, node0.getLength());
//       assertEquals(false, node0.isComma());
//       assertEquals(false, node0.isEmpty());
//       assertEquals(true, node0.hasOneChild());
//       assertEquals(true, node0.isSyntheticBlock());
//       assertEquals(false, node0.isThis());
//       assertEquals(false, node0.isGetterDef());
//       assertEquals(false, node0.isOptionalArg());
//       assertEquals(false, node0.isLabelName());
//       assertEquals(false, node0.isFalse());
//       assertEquals(false, node0.isFromExterns());
//       assertEquals(false, node0.isInstanceOf());
//       assertEquals(false, node0.isDebugger());
//       assertEquals(0, node0.getCharno());
//       assertEquals(true, node0.isScript());
//       assertEquals(false, node0.isCatch());
//       assertEquals(false, node0.isWhile());
//       assertEquals(false, node0.isTypeOf());
//       assertEquals(false, node0.isOr());
//       assertEquals(false, node0.isGetElem());
//       assertEquals(false, node0.isReturn());
//       assertEquals(1, node0.getLineno());
//       assertEquals(false, node0.isVarArgs());
//       assertEquals(false, node0.isVoid());
//       assertEquals(false, node0.wasEmptyNode());
//       
//       boolean boolean0 = true;
//       boolean boolean1 = false;
//       RemoveUnusedVars removeUnusedVars0 = new RemoveUnusedVars(compiler0, boolean0, boolean0, boolean1);
//       assertNotNull(removeUnusedVars0);
//       assertFalse(boolean0 == boolean1);
//       assertFalse(boolean1 == boolean0);
//       assertEquals(false, compiler0.isTypeCheckingEnabled());
//       assertEquals(false, compiler0.isIdeMode());
//       assertEquals(0, compiler0.getErrorCount());
//       assertEquals(false, compiler0.acceptConstKeyword());
//       assertEquals(false, compiler0.hasErrors());
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
//       assertEquals(0, compiler0.getWarningCount());
//       
//       SimpleDefinitionFinder simpleDefinitionFinder0 = new SimpleDefinitionFinder((AbstractCompiler) compiler0);
//       assertNotNull(simpleDefinitionFinder0);
//       assertEquals(false, compiler0.isTypeCheckingEnabled());
//       assertEquals(false, compiler0.isIdeMode());
//       assertEquals(0, compiler0.getErrorCount());
//       assertEquals(false, compiler0.acceptConstKeyword());
//       assertEquals(false, compiler0.hasErrors());
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
//       assertEquals(0, compiler0.getWarningCount());
//       
//       removeUnusedVars0.process(node0, node0, simpleDefinitionFinder0);
//       assertFalse(boolean0 == boolean1);
//       assertFalse(boolean1 == boolean0);
//       assertEquals(false, compiler0.isTypeCheckingEnabled());
//       assertEquals(false, compiler0.isIdeMode());
//       assertEquals(0, compiler0.getErrorCount());
//       assertEquals(false, compiler0.acceptConstKeyword());
//       assertEquals(false, compiler0.hasErrors());
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
//       assertEquals(0, compiler0.getWarningCount());
//       assertEquals(false, node0.isThrow());
//       assertEquals(false, node0.isContinue());
//       assertEquals(false, node0.isUnscopedQualifiedName());
//       assertEquals(false, node0.isTrue());
//       assertEquals(" [testcode] ", node0.getSourceFileName());
//       assertEquals(false, node0.isFor());
//       assertEquals(false, node0.isNull());
//       assertEquals(false, node0.isLocalResultCall());
//       assertEquals(false, node0.isDelProp());
//       assertEquals(false, node0.isCase());
//       assertEquals(false, node0.isVar());
//       assertEquals(false, node0.isDefaultCase());
//       assertEquals(false, node0.isIf());
//       assertEquals(false, node0.isWith());
//       assertEquals(false, node0.isTry());
//       assertEquals(false, node0.isQualifiedName());
//       assertEquals(false, node0.isIn());
//       assertEquals(false, node0.isGetProp());
//       assertEquals(false, node0.isRegExp());
//       assertEquals(false, node0.isQuotedString());
//       assertEquals(false, node0.isAnd());
//       assertEquals(false, node0.isAssignAdd());
//       assertEquals(false, node0.isDo());
//       assertEquals(false, node0.isAdd());
//       assertEquals(false, node0.isNE());
//       assertEquals(false, node0.isObjectLit());
//       assertEquals(false, node0.isNot());
//       assertEquals(false, node0.isBlock());
//       assertEquals(true, node0.hasChildren());
//       assertEquals(false, node0.isArrayLit());
//       assertEquals(false, node0.isCall());
//       assertEquals(false, node0.isOnlyModifiesThisCall());
//       assertEquals(false, node0.isInc());
//       assertEquals(false, node0.isDec());
//       assertEquals(1, node0.getChildCount());
//       assertEquals(false, node0.isLabel());
//       assertEquals(false, node0.hasMoreThanOneChild());
//       assertEquals(false, node0.isString());
//       assertEquals(false, node0.isAssign());
//       assertEquals(0, node0.getSideEffectFlags());
//       assertEquals(false, node0.isFunction());
//       assertEquals(false, node0.isNew());
//       assertEquals(132, node0.getType());
//       assertEquals(false, node0.isName());
//       assertEquals(false, node0.isNoSideEffectsCall());
//       assertEquals(4096, node0.getSourcePosition());
//       assertEquals(false, node0.isBreak());
//       assertEquals(false, node0.isExprResult());
//       assertEquals(false, node0.isSwitch());
//       assertEquals(false, node0.isParamList());
//       assertEquals(false, node0.isSetterDef());
//       assertEquals(false, node0.isHook());
//       assertEquals(false, node0.isNumber());
//       assertEquals(0, node0.getLength());
//       assertEquals(false, node0.isComma());
//       assertEquals(false, node0.isEmpty());
//       assertEquals(true, node0.hasOneChild());
//       assertEquals(true, node0.isSyntheticBlock());
//       assertEquals(false, node0.isThis());
//       assertEquals(false, node0.isGetterDef());
//       assertEquals(false, node0.isOptionalArg());
//       assertEquals(false, node0.isLabelName());
//       assertEquals(false, node0.isFalse());
//       assertEquals(false, node0.isFromExterns());
//       assertEquals(false, node0.isInstanceOf());
//       assertEquals(false, node0.isDebugger());
//       assertEquals(0, node0.getCharno());
//       assertEquals(true, node0.isScript());
//       assertEquals(false, node0.isCatch());
//       assertEquals(false, node0.isWhile());
//       assertEquals(false, node0.isTypeOf());
//       assertEquals(false, node0.isOr());
//       assertEquals(false, node0.isGetElem());
//       assertEquals(false, node0.isReturn());
//       assertEquals(1, node0.getLineno());
//       assertEquals(false, node0.isVarArgs());
//       assertEquals(false, node0.isVoid());
//       assertEquals(false, node0.wasEmptyNode());
//   }
}
