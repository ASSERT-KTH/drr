/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 21:27:53 GMT 2014
 */

package com.google.javascript.jscomp;

import static org.junit.Assert.*;
import org.junit.Test;
import com.google.javascript.jscomp.AbstractCompiler;
import com.google.javascript.jscomp.Compiler;
import com.google.javascript.jscomp.CompilerOptions;
import com.google.javascript.jscomp.LoggerErrorManager;
import com.google.javascript.jscomp.Normalize;
import com.google.javascript.jscomp.RemoveUnusedVars;
import com.google.javascript.jscomp.RuntimeTypeCheck;
import com.google.javascript.jscomp.SimpleDefinitionFinder;
import com.google.javascript.rhino.Node;
import com.google.javascript.rhino.jstype.JSType;
import com.google.javascript.rhino.jstype.JSTypeRegistry;
import java.util.ArrayList;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;

import org.evosuite.runtime.FileSystemHandling;
import org.junit.runner.RunWith;


public class RemoveUnusedVarsEvoSuite_branch_Test  {

  @Test
  public void test0() {}
//   @Test
//   public void test0() {}
//   @Test
//   public void test0()  throws Throwable  {
//       Compiler compiler0 = new Compiler();
//       assertNotNull(compiler0);
//       
//       LoggerErrorManager loggerErrorManager0 = (LoggerErrorManager)compiler0.getErrorManager();
//       assertEquals(0.0, loggerErrorManager0.getTypedPercent(), 0.01D);
//       assertEquals(0, loggerErrorManager0.getWarningCount());
//       assertEquals(0, loggerErrorManager0.getErrorCount());
//       assertEquals(0, compiler0.getErrorCount());
//       assertEquals(0, compiler0.getWarningCount());
//       assertEquals(false, compiler0.isTypeCheckingEnabled());
//       assertEquals(false, compiler0.acceptConstKeyword());
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
//       assertEquals(false, compiler0.isIdeMode());
//       assertEquals(false, compiler0.hasErrors());
//       assertNotNull(loggerErrorManager0);
//       
//       EvoSuiteFile evoSuiteFile0 = null;
//       boolean boolean0 = FileSystemHandling.createFolder(evoSuiteFile0);
//       assertFalse(boolean0);
//       
//       RemoveUnusedVars removeUnusedVars0 = new RemoveUnusedVars(compiler0, boolean0, boolean0, boolean0);
//       assertEquals(0, compiler0.getErrorCount());
//       assertEquals(0, compiler0.getWarningCount());
//       assertEquals(false, compiler0.isTypeCheckingEnabled());
//       assertEquals(false, compiler0.acceptConstKeyword());
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
//       assertEquals(false, compiler0.isIdeMode());
//       assertEquals(false, compiler0.hasErrors());
//       assertNotNull(removeUnusedVars0);
//       
//       String string0 = "arguments";
//       Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, string0, string0);
//       assertEquals(0, compiler0.getErrorCount());
//       assertEquals(0, compiler0.getWarningCount());
//       assertEquals(false, compiler0.isTypeCheckingEnabled());
//       assertEquals(false, compiler0.acceptConstKeyword());
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
//       assertEquals(false, compiler0.isIdeMode());
//       assertEquals(false, compiler0.hasErrors());
//       assertEquals(false, node0.isOr());
//       assertEquals(false, node0.isVoid());
//       assertEquals(false, node0.isGetterDef());
//       assertEquals(false, node0.isDefaultCase());
//       assertEquals(false, node0.isQualifiedName());
//       assertEquals(false, node0.isCall());
//       assertEquals(0, node0.getLength());
//       assertEquals(false, node0.isName());
//       assertEquals(4096, node0.getSourcePosition());
//       assertEquals(false, node0.isOptionalArg());
//       assertEquals(false, node0.isTry());
//       assertEquals(false, node0.hasMoreThanOneChild());
//       assertEquals(false, node0.isEmpty());
//       assertEquals(false, node0.isAdd());
//       assertEquals(false, node0.isAssign());
//       assertEquals(false, node0.isTypeOf());
//       assertEquals(false, node0.isNull());
//       assertEquals(" [testcode] ", node0.getSourceFileName());
//       assertEquals(false, node0.isComma());
//       assertEquals(false, node0.isGetElem());
//       assertEquals(false, node0.isOnlyModifiesThisCall());
//       assertEquals(0, node0.getSideEffectFlags());
//       assertEquals(false, node0.isNot());
//       assertEquals(false, node0.isSwitch());
//       assertEquals(false, node0.isFunction());
//       assertEquals(false, node0.isBreak());
//       assertEquals(true, node0.hasOneChild());
//       assertEquals(true, node0.hasChildren());
//       assertEquals(false, node0.isWith());
//       assertEquals(false, node0.isIn());
//       assertEquals(false, node0.isExprResult());
//       assertEquals(false, node0.isContinue());
//       assertEquals(false, node0.isLocalResultCall());
//       assertEquals(false, node0.isIf());
//       assertEquals(true, node0.isSyntheticBlock());
//       assertEquals(false, node0.isNoSideEffectsCall());
//       assertEquals(false, node0.isNE());
//       assertEquals(1, node0.getChildCount());
//       assertEquals(false, node0.isLabel());
//       assertEquals(true, node0.isScript());
//       assertEquals(false, node0.isVar());
//       assertEquals(false, node0.isDo());
//       assertEquals(false, node0.isAssignAdd());
//       assertEquals(false, node0.isWhile());
//       assertEquals(false, node0.isQuotedString());
//       assertEquals(false, node0.isLabelName());
//       assertEquals(false, node0.isObjectLit());
//       assertEquals(false, node0.isThis());
//       assertEquals(false, node0.isNew());
//       assertEquals(false, node0.isThrow());
//       assertEquals(false, node0.isBlock());
//       assertEquals(false, node0.isFalse());
//       assertEquals(false, node0.isUnscopedQualifiedName());
//       assertEquals(false, node0.isDelProp());
//       assertEquals(false, node0.isString());
//       assertEquals(false, node0.wasEmptyNode());
//       assertEquals(1, node0.getLineno());
//       assertEquals(false, node0.isCatch());
//       assertEquals(false, node0.isAnd());
//       assertEquals(false, node0.isFor());
//       assertEquals(false, node0.isReturn());
//       assertEquals(0, node0.getCharno());
//       assertEquals(false, node0.isDebugger());
//       assertEquals(false, node0.isRegExp());
//       assertEquals(false, node0.isInc());
//       assertEquals(132, node0.getType());
//       assertEquals(false, node0.isFromExterns());
//       assertEquals(false, node0.isCase());
//       assertEquals(false, node0.isInstanceOf());
//       assertEquals(false, node0.isParamList());
//       assertEquals(false, node0.isArrayLit());
//       assertEquals(false, node0.isTrue());
//       assertEquals(false, node0.isNumber());
//       assertEquals(false, node0.isGetProp());
//       assertEquals(false, node0.isSetterDef());
//       assertEquals(false, node0.isVarArgs());
//       assertEquals(false, node0.isHook());
//       assertEquals(false, node0.isDec());
//       assertNotNull(node0);
//       
//       SimpleDefinitionFinder simpleDefinitionFinder0 = new SimpleDefinitionFinder((AbstractCompiler) compiler0);
//       assertEquals(0, compiler0.getErrorCount());
//       assertEquals(0, compiler0.getWarningCount());
//       assertEquals(false, compiler0.isTypeCheckingEnabled());
//       assertEquals(false, compiler0.acceptConstKeyword());
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
//       assertEquals(false, compiler0.isIdeMode());
//       assertEquals(false, compiler0.hasErrors());
//       assertNotNull(simpleDefinitionFinder0);
//       
//       removeUnusedVars0.process(node0, node0, simpleDefinitionFinder0);
//       assertEquals(0, compiler0.getErrorCount());
//       assertEquals(0, compiler0.getWarningCount());
//       assertEquals(false, compiler0.isTypeCheckingEnabled());
//       assertEquals(false, compiler0.acceptConstKeyword());
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
//       assertEquals(false, compiler0.isIdeMode());
//       assertEquals(false, compiler0.hasErrors());
//       assertEquals(false, node0.isOr());
//       assertEquals(false, node0.isVoid());
//       assertEquals(false, node0.isGetterDef());
//       assertEquals(false, node0.isDefaultCase());
//       assertEquals(false, node0.isQualifiedName());
//       assertEquals(false, node0.isCall());
//       assertEquals(0, node0.getLength());
//       assertEquals(false, node0.isName());
//       assertEquals(4096, node0.getSourcePosition());
//       assertEquals(false, node0.isOptionalArg());
//       assertEquals(false, node0.isTry());
//       assertEquals(false, node0.hasMoreThanOneChild());
//       assertEquals(false, node0.isEmpty());
//       assertEquals(false, node0.isAdd());
//       assertEquals(false, node0.isAssign());
//       assertEquals(false, node0.isTypeOf());
//       assertEquals(false, node0.isNull());
//       assertEquals(" [testcode] ", node0.getSourceFileName());
//       assertEquals(false, node0.isComma());
//       assertEquals(false, node0.isGetElem());
//       assertEquals(false, node0.isOnlyModifiesThisCall());
//       assertEquals(0, node0.getSideEffectFlags());
//       assertEquals(false, node0.isNot());
//       assertEquals(false, node0.isSwitch());
//       assertEquals(false, node0.isFunction());
//       assertEquals(false, node0.isBreak());
//       assertEquals(true, node0.hasOneChild());
//       assertEquals(true, node0.hasChildren());
//       assertEquals(false, node0.isWith());
//       assertEquals(false, node0.isIn());
//       assertEquals(false, node0.isExprResult());
//       assertEquals(false, node0.isContinue());
//       assertEquals(false, node0.isLocalResultCall());
//       assertEquals(false, node0.isIf());
//       assertEquals(true, node0.isSyntheticBlock());
//       assertEquals(false, node0.isNoSideEffectsCall());
//       assertEquals(false, node0.isNE());
//       assertEquals(1, node0.getChildCount());
//       assertEquals(false, node0.isLabel());
//       assertEquals(true, node0.isScript());
//       assertEquals(false, node0.isVar());
//       assertEquals(false, node0.isDo());
//       assertEquals(false, node0.isAssignAdd());
//       assertEquals(false, node0.isWhile());
//       assertEquals(false, node0.isQuotedString());
//       assertEquals(false, node0.isLabelName());
//       assertEquals(false, node0.isObjectLit());
//       assertEquals(false, node0.isThis());
//       assertEquals(false, node0.isNew());
//       assertEquals(false, node0.isThrow());
//       assertEquals(false, node0.isBlock());
//       assertEquals(false, node0.isFalse());
//       assertEquals(false, node0.isUnscopedQualifiedName());
//       assertEquals(false, node0.isDelProp());
//       assertEquals(false, node0.isString());
//       assertEquals(false, node0.wasEmptyNode());
//       assertEquals(1, node0.getLineno());
//       assertEquals(false, node0.isCatch());
//       assertEquals(false, node0.isAnd());
//       assertEquals(false, node0.isFor());
//       assertEquals(false, node0.isReturn());
//       assertEquals(0, node0.getCharno());
//       assertEquals(false, node0.isDebugger());
//       assertEquals(false, node0.isRegExp());
//       assertEquals(false, node0.isInc());
//       assertEquals(132, node0.getType());
//       assertEquals(false, node0.isFromExterns());
//       assertEquals(false, node0.isCase());
//       assertEquals(false, node0.isInstanceOf());
//       assertEquals(false, node0.isParamList());
//       assertEquals(false, node0.isArrayLit());
//       assertEquals(false, node0.isTrue());
//       assertEquals(false, node0.isNumber());
//       assertEquals(false, node0.isGetProp());
//       assertEquals(false, node0.isSetterDef());
//       assertEquals(false, node0.isVarArgs());
//       assertEquals(false, node0.isHook());
//       assertEquals(false, node0.isDec());
//   }

  @Test
  public void test1() {}
//   @Test
//   public void test1() {}
//   @Test
//   public void test1()  throws Throwable  {
//       Compiler compiler0 = new Compiler();
//       assertNotNull(compiler0);
//       
//       LoggerErrorManager loggerErrorManager0 = (LoggerErrorManager)compiler0.getErrorManager();
//       assertEquals(0, loggerErrorManager0.getWarningCount());
//       assertEquals(0.0, loggerErrorManager0.getTypedPercent(), 0.01D);
//       assertEquals(0, loggerErrorManager0.getErrorCount());
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
//       assertEquals(0, compiler0.getErrorCount());
//       assertEquals(false, compiler0.isTypeCheckingEnabled());
//       assertEquals(0, compiler0.getWarningCount());
//       assertEquals(false, compiler0.hasErrors());
//       assertEquals(false, compiler0.acceptConstKeyword());
//       assertEquals(false, compiler0.isIdeMode());
//       assertNotNull(loggerErrorManager0);
//       
//       EvoSuiteFile evoSuiteFile0 = null;
//       boolean boolean0 = FileSystemHandling.createFolder(evoSuiteFile0);
//       assertFalse(boolean0);
//       
//       AbstractCompiler.LifeCycleStage abstractCompiler_LifeCycleStage0 = AbstractCompiler.LifeCycleStage.NORMALIZED_OBFUSCATED;
//       compiler0.setLifeCycleStage(abstractCompiler_LifeCycleStage0);
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
//       assertEquals(0, compiler0.getErrorCount());
//       assertEquals(false, compiler0.isTypeCheckingEnabled());
//       assertEquals(0, compiler0.getWarningCount());
//       assertEquals(false, compiler0.hasErrors());
//       assertEquals(false, compiler0.acceptConstKeyword());
//       assertEquals(false, compiler0.isIdeMode());
//       
//       RemoveUnusedVars removeUnusedVars0 = new RemoveUnusedVars(compiler0, boolean0, boolean0, boolean0);
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
//       assertEquals(0, compiler0.getErrorCount());
//       assertEquals(false, compiler0.isTypeCheckingEnabled());
//       assertEquals(0, compiler0.getWarningCount());
//       assertEquals(false, compiler0.hasErrors());
//       assertEquals(false, compiler0.acceptConstKeyword());
//       assertEquals(false, compiler0.isIdeMode());
//       assertNotNull(removeUnusedVars0);
//       
//       JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
//       assertEquals(0, compiler0.getErrorCount());
//       assertEquals(false, compiler0.isTypeCheckingEnabled());
//       assertEquals(0, compiler0.getWarningCount());
//       assertEquals(false, compiler0.hasErrors());
//       assertEquals(false, compiler0.acceptConstKeyword());
//       assertEquals(false, compiler0.isIdeMode());
//       assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
//       assertNotNull(jSTypeRegistry0);
//       
//       ArrayList<JSType> arrayList0 = new ArrayList<JSType>();
//       assertEquals(true, arrayList0.isEmpty());
//       assertEquals(0, arrayList0.size());
//       assertEquals("[]", arrayList0.toString());
//       assertNotNull(arrayList0);
//       
//       Node node0 = jSTypeRegistry0.createParameters((List<JSType>) arrayList0);
//       assertEquals(false, node0.isNE());
//       assertEquals(false, node0.isQualifiedName());
//       assertEquals(false, node0.isGetterDef());
//       assertEquals(false, node0.isOnlyModifiesThisCall());
//       assertEquals(83, node0.getType());
//       assertEquals(false, node0.isThrow());
//       assertNull(node0.getSourceFileName());
//       assertEquals(false, node0.isOptionalArg());
//       assertEquals(false, node0.isSyntheticBlock());
//       assertEquals(false, node0.isHook());
//       assertEquals(false, node0.isDelProp());
//       assertEquals(false, node0.isCatch());
//       assertEquals(false, node0.isInstanceOf());
//       assertEquals(false, node0.isCall());
//       assertEquals(false, node0.isArrayLit());
//       assertEquals(false, node0.isBreak());
//       assertEquals(false, node0.isName());
//       assertEquals(-1, node0.getSourcePosition());
//       assertEquals(-1, node0.getCharno());
//       assertEquals(false, node0.isNot());
//       assertEquals(false, node0.isDec());
//       assertEquals(false, node0.isContinue());
//       assertEquals(false, node0.isBlock());
//       assertEquals(false, node0.isWith());
//       assertEquals(false, node0.isDebugger());
//       assertEquals(false, node0.isNoSideEffectsCall());
//       assertEquals(false, node0.isWhile());
//       assertEquals(false, node0.isAnd());
//       assertEquals(false, node0.isThis());
//       assertEquals(false, node0.isObjectLit());
//       assertEquals(false, node0.isGetProp());
//       assertEquals(false, node0.isUnscopedQualifiedName());
//       assertEquals(false, node0.isExprResult());
//       assertEquals(false, node0.isFromExterns());
//       assertEquals(false, node0.isComma());
//       assertEquals(false, node0.isInc());
//       assertEquals(false, node0.isReturn());
//       assertEquals(false, node0.isAdd());
//       assertEquals(false, node0.isFalse());
//       assertEquals(false, node0.isFunction());
//       assertEquals(false, node0.isDo());
//       assertEquals(false, node0.isTrue());
//       assertEquals(false, node0.isCase());
//       assertEquals(false, node0.isOr());
//       assertEquals(false, node0.isLabelName());
//       assertEquals(false, node0.isNew());
//       assertEquals(false, node0.isNumber());
//       assertEquals(false, node0.wasEmptyNode());
//       assertEquals(false, node0.isRegExp());
//       assertEquals(false, node0.isEmpty());
//       assertEquals(false, node0.hasOneChild());
//       assertEquals(false, node0.isQuotedString());
//       assertEquals(false, node0.isVarArgs());
//       assertEquals(0, node0.getSideEffectFlags());
//       assertEquals(false, node0.isGetElem());
//       assertEquals(false, node0.isDefaultCase());
//       assertEquals(false, node0.isLabel());
//       assertEquals(false, node0.isTry());
//       assertEquals(false, node0.isIn());
//       assertEquals(false, node0.isVoid());
//       assertEquals(false, node0.isNull());
//       assertEquals(0, node0.getChildCount());
//       assertEquals(false, node0.isAssignAdd());
//       assertEquals(false, node0.isVar());
//       assertEquals(false, node0.isAssign());
//       assertEquals(0, node0.getLength());
//       assertEquals(true, node0.isParamList());
//       assertEquals(false, node0.isFor());
//       assertEquals(false, node0.hasMoreThanOneChild());
//       assertEquals(false, node0.isString());
//       assertEquals(false, node0.isSetterDef());
//       assertEquals(false, node0.isLocalResultCall());
//       assertEquals(false, node0.isIf());
//       assertEquals(false, node0.isTypeOf());
//       assertEquals(false, node0.hasChildren());
//       assertEquals(false, node0.isSwitch());
//       assertEquals(-1, node0.getLineno());
//       assertEquals(false, node0.isScript());
//       assertEquals(true, arrayList0.isEmpty());
//       assertEquals(0, arrayList0.size());
//       assertEquals("[]", arrayList0.toString());
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
//       assertEquals(0, compiler0.getErrorCount());
//       assertEquals(false, compiler0.isTypeCheckingEnabled());
//       assertEquals(0, compiler0.getWarningCount());
//       assertEquals(false, compiler0.hasErrors());
//       assertEquals(false, compiler0.acceptConstKeyword());
//       assertEquals(false, compiler0.isIdeMode());
//       assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
//       assertNotNull(node0);
//       
//       removeUnusedVars0.process(node0, node0);
//       assertEquals(false, node0.isNE());
//       assertEquals(false, node0.isQualifiedName());
//       assertEquals(false, node0.isGetterDef());
//       assertEquals(false, node0.isOnlyModifiesThisCall());
//       assertEquals(83, node0.getType());
//       assertEquals(false, node0.isThrow());
//       assertNull(node0.getSourceFileName());
//       assertEquals(false, node0.isOptionalArg());
//       assertEquals(false, node0.isSyntheticBlock());
//       assertEquals(false, node0.isHook());
//       assertEquals(false, node0.isDelProp());
//       assertEquals(false, node0.isCatch());
//       assertEquals(false, node0.isInstanceOf());
//       assertEquals(false, node0.isCall());
//       assertEquals(false, node0.isArrayLit());
//       assertEquals(false, node0.isBreak());
//       assertEquals(false, node0.isName());
//       assertEquals(-1, node0.getSourcePosition());
//       assertEquals(-1, node0.getCharno());
//       assertEquals(false, node0.isNot());
//       assertEquals(false, node0.isDec());
//       assertEquals(false, node0.isContinue());
//       assertEquals(false, node0.isBlock());
//       assertEquals(false, node0.isWith());
//       assertEquals(false, node0.isDebugger());
//       assertEquals(false, node0.isNoSideEffectsCall());
//       assertEquals(false, node0.isWhile());
//       assertEquals(false, node0.isAnd());
//       assertEquals(false, node0.isThis());
//       assertEquals(false, node0.isObjectLit());
//       assertEquals(false, node0.isGetProp());
//       assertEquals(false, node0.isUnscopedQualifiedName());
//       assertEquals(false, node0.isExprResult());
//       assertEquals(false, node0.isFromExterns());
//       assertEquals(false, node0.isComma());
//       assertEquals(false, node0.isInc());
//       assertEquals(false, node0.isReturn());
//       assertEquals(false, node0.isAdd());
//       assertEquals(false, node0.isFalse());
//       assertEquals(false, node0.isFunction());
//       assertEquals(false, node0.isDo());
//       assertEquals(false, node0.isTrue());
//       assertEquals(false, node0.isCase());
//       assertEquals(false, node0.isOr());
//       assertEquals(false, node0.isLabelName());
//       assertEquals(false, node0.isNew());
//       assertEquals(false, node0.isNumber());
//       assertEquals(false, node0.wasEmptyNode());
//       assertEquals(false, node0.isRegExp());
//       assertEquals(false, node0.isEmpty());
//       assertEquals(false, node0.hasOneChild());
//       assertEquals(false, node0.isQuotedString());
//       assertEquals(false, node0.isVarArgs());
//       assertEquals(0, node0.getSideEffectFlags());
//       assertEquals(false, node0.isGetElem());
//       assertEquals(false, node0.isDefaultCase());
//       assertEquals(false, node0.isLabel());
//       assertEquals(false, node0.isTry());
//       assertEquals(false, node0.isIn());
//       assertEquals(false, node0.isVoid());
//       assertEquals(false, node0.isNull());
//       assertEquals(0, node0.getChildCount());
//       assertEquals(false, node0.isAssignAdd());
//       assertEquals(false, node0.isVar());
//       assertEquals(false, node0.isAssign());
//       assertEquals(0, node0.getLength());
//       assertEquals(true, node0.isParamList());
//       assertEquals(false, node0.isFor());
//       assertEquals(false, node0.hasMoreThanOneChild());
//       assertEquals(false, node0.isString());
//       assertEquals(false, node0.isSetterDef());
//       assertEquals(false, node0.isLocalResultCall());
//       assertEquals(false, node0.isIf());
//       assertEquals(false, node0.isTypeOf());
//       assertEquals(false, node0.hasChildren());
//       assertEquals(false, node0.isSwitch());
//       assertEquals(-1, node0.getLineno());
//       assertEquals(false, node0.isScript());
//       assertEquals(true, arrayList0.isEmpty());
//       assertEquals(0, arrayList0.size());
//       assertEquals("[]", arrayList0.toString());
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
//       assertEquals(0, compiler0.getErrorCount());
//       assertEquals(false, compiler0.isTypeCheckingEnabled());
//       assertEquals(0, compiler0.getWarningCount());
//       assertEquals(false, compiler0.hasErrors());
//       assertEquals(false, compiler0.acceptConstKeyword());
//       assertEquals(false, compiler0.isIdeMode());
//       assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
//   }

  @Test
  public void test2() {}
//   @Test
//   public void test2() {}
//   @Test
//   public void test2()  throws Throwable  {
//       Compiler compiler0 = new Compiler();
//       assertNotNull(compiler0);
//       
//       LoggerErrorManager loggerErrorManager0 = (LoggerErrorManager)compiler0.getErrorManager();
//       assertEquals(0, loggerErrorManager0.getWarningCount());
//       assertEquals(0, loggerErrorManager0.getErrorCount());
//       assertEquals(0.0, loggerErrorManager0.getTypedPercent(), 0.01D);
//       assertEquals(false, compiler0.acceptConstKeyword());
//       assertEquals(0, compiler0.getErrorCount());
//       assertEquals(false, compiler0.hasErrors());
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
//       assertEquals(false, compiler0.isTypeCheckingEnabled());
//       assertEquals(false, compiler0.isIdeMode());
//       assertEquals(0, compiler0.getWarningCount());
//       assertNotNull(loggerErrorManager0);
//       
//       EvoSuiteFile evoSuiteFile0 = null;
//       boolean boolean0 = FileSystemHandling.createFolder(evoSuiteFile0);
//       assertFalse(boolean0);
//       
//       boolean boolean1 = true;
//       assertFalse(boolean1 == boolean0);
//       
//       AbstractCompiler.LifeCycleStage abstractCompiler_LifeCycleStage0 = AbstractCompiler.LifeCycleStage.NORMALIZED_OBFUSCATED;
//       compiler0.setLifeCycleStage(abstractCompiler_LifeCycleStage0);
//       assertEquals(false, compiler0.acceptConstKeyword());
//       assertEquals(0, compiler0.getErrorCount());
//       assertEquals(false, compiler0.hasErrors());
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
//       assertEquals(false, compiler0.isTypeCheckingEnabled());
//       assertEquals(false, compiler0.isIdeMode());
//       assertEquals(0, compiler0.getWarningCount());
//       
//       RemoveUnusedVars removeUnusedVars0 = new RemoveUnusedVars(compiler0, boolean1, boolean0, boolean1);
//       assertEquals(false, compiler0.acceptConstKeyword());
//       assertEquals(0, compiler0.getErrorCount());
//       assertEquals(false, compiler0.hasErrors());
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
//       assertEquals(false, compiler0.isTypeCheckingEnabled());
//       assertEquals(false, compiler0.isIdeMode());
//       assertEquals(0, compiler0.getWarningCount());
//       assertFalse(boolean1 == boolean0);
//       assertFalse(boolean0 == boolean1);
//       assertNotNull(removeUnusedVars0);
//       
//       JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
//       assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
//       assertEquals(false, compiler0.acceptConstKeyword());
//       assertEquals(0, compiler0.getErrorCount());
//       assertEquals(false, compiler0.hasErrors());
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
//       assertEquals(false, compiler0.isTypeCheckingEnabled());
//       assertEquals(false, compiler0.isIdeMode());
//       assertEquals(0, compiler0.getWarningCount());
//       assertNotNull(jSTypeRegistry0);
//       
//       ArrayList<JSType> arrayList0 = new ArrayList<JSType>();
//       assertEquals(true, arrayList0.isEmpty());
//       assertEquals(0, arrayList0.size());
//       assertEquals("[]", arrayList0.toString());
//       assertNotNull(arrayList0);
//       
//       Node node0 = jSTypeRegistry0.createParameters((List<JSType>) arrayList0);
//       assertEquals(false, node0.isQuotedString());
//       assertEquals(false, node0.hasOneChild());
//       assertEquals(0, node0.getLength());
//       assertEquals(false, node0.isLabelName());
//       assertEquals(false, node0.isDefaultCase());
//       assertEquals(false, node0.isBlock());
//       assertEquals(false, node0.isNew());
//       assertEquals(false, node0.isNoSideEffectsCall());
//       assertEquals(false, node0.isNumber());
//       assertEquals(false, node0.isFalse());
//       assertEquals(false, node0.isOnlyModifiesThisCall());
//       assertEquals(false, node0.isComma());
//       assertEquals(false, node0.isDec());
//       assertEquals(false, node0.isIn());
//       assertEquals(false, node0.isFunction());
//       assertEquals(false, node0.hasMoreThanOneChild());
//       assertEquals(false, node0.isScript());
//       assertEquals(false, node0.isGetElem());
//       assertEquals(-1, node0.getSourcePosition());
//       assertEquals(false, node0.isUnscopedQualifiedName());
//       assertEquals(false, node0.isGetterDef());
//       assertEquals(0, node0.getSideEffectFlags());
//       assertEquals(false, node0.isThis());
//       assertEquals(false, node0.isObjectLit());
//       assertEquals(false, node0.wasEmptyNode());
//       assertEquals(false, node0.isInc());
//       assertEquals(false, node0.isHook());
//       assertEquals(false, node0.isOptionalArg());
//       assertEquals(false, node0.isTrue());
//       assertEquals(false, node0.isReturn());
//       assertEquals(false, node0.isQualifiedName());
//       assertEquals(83, node0.getType());
//       assertEquals(false, node0.isDebugger());
//       assertEquals(false, node0.isContinue());
//       assertEquals(false, node0.isDelProp());
//       assertEquals(false, node0.isAdd());
//       assertEquals(-1, node0.getCharno());
//       assertEquals(false, node0.hasChildren());
//       assertEquals(0, node0.getChildCount());
//       assertEquals(false, node0.isCatch());
//       assertEquals(false, node0.isVar());
//       assertEquals(false, node0.isCase());
//       assertEquals(false, node0.isExprResult());
//       assertEquals(false, node0.isGetProp());
//       assertEquals(false, node0.isFromExterns());
//       assertEquals(true, node0.isParamList());
//       assertEquals(false, node0.isFor());
//       assertEquals(false, node0.isTypeOf());
//       assertEquals(false, node0.isAssign());
//       assertEquals(false, node0.isWhile());
//       assertEquals(false, node0.isOr());
//       assertEquals(false, node0.isRegExp());
//       assertEquals(false, node0.isTry());
//       assertEquals(false, node0.isInstanceOf());
//       assertEquals(false, node0.isLocalResultCall());
//       assertEquals(false, node0.isIf());
//       assertEquals(false, node0.isBreak());
//       assertEquals(false, node0.isAnd());
//       assertEquals(false, node0.isString());
//       assertEquals(false, node0.isNull());
//       assertEquals(false, node0.isLabel());
//       assertEquals(false, node0.isVarArgs());
//       assertEquals(false, node0.isSyntheticBlock());
//       assertEquals(false, node0.isThrow());
//       assertEquals(false, node0.isDo());
//       assertNull(node0.getSourceFileName());
//       assertEquals(false, node0.isVoid());
//       assertEquals(false, node0.isWith());
//       assertEquals(false, node0.isSwitch());
//       assertEquals(false, node0.isAssignAdd());
//       assertEquals(false, node0.isName());
//       assertEquals(false, node0.isArrayLit());
//       assertEquals(false, node0.isEmpty());
//       assertEquals(false, node0.isCall());
//       assertEquals(false, node0.isNE());
//       assertEquals(false, node0.isSetterDef());
//       assertEquals(-1, node0.getLineno());
//       assertEquals(false, node0.isNot());
//       assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
//       assertEquals(true, arrayList0.isEmpty());
//       assertEquals(0, arrayList0.size());
//       assertEquals("[]", arrayList0.toString());
//       assertEquals(false, compiler0.acceptConstKeyword());
//       assertEquals(0, compiler0.getErrorCount());
//       assertEquals(false, compiler0.hasErrors());
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
//       assertEquals(false, compiler0.isTypeCheckingEnabled());
//       assertEquals(false, compiler0.isIdeMode());
//       assertEquals(0, compiler0.getWarningCount());
//       assertNotNull(node0);
//       
//       removeUnusedVars0.process(node0, node0);
//       assertEquals(false, node0.isQuotedString());
//       assertEquals(false, node0.hasOneChild());
//       assertEquals(0, node0.getLength());
//       assertEquals(false, node0.isLabelName());
//       assertEquals(false, node0.isDefaultCase());
//       assertEquals(false, node0.isBlock());
//       assertEquals(false, node0.isNew());
//       assertEquals(false, node0.isNoSideEffectsCall());
//       assertEquals(false, node0.isNumber());
//       assertEquals(false, node0.isFalse());
//       assertEquals(false, node0.isOnlyModifiesThisCall());
//       assertEquals(false, node0.isComma());
//       assertEquals(false, node0.isDec());
//       assertEquals(false, node0.isIn());
//       assertEquals(false, node0.isFunction());
//       assertEquals(false, node0.hasMoreThanOneChild());
//       assertEquals(false, node0.isScript());
//       assertEquals(false, node0.isGetElem());
//       assertEquals(-1, node0.getSourcePosition());
//       assertEquals(false, node0.isUnscopedQualifiedName());
//       assertEquals(false, node0.isGetterDef());
//       assertEquals(0, node0.getSideEffectFlags());
//       assertEquals(false, node0.isThis());
//       assertEquals(false, node0.isObjectLit());
//       assertEquals(false, node0.wasEmptyNode());
//       assertEquals(false, node0.isInc());
//       assertEquals(false, node0.isHook());
//       assertEquals(false, node0.isOptionalArg());
//       assertEquals(false, node0.isTrue());
//       assertEquals(false, node0.isReturn());
//       assertEquals(false, node0.isQualifiedName());
//       assertEquals(83, node0.getType());
//       assertEquals(false, node0.isDebugger());
//       assertEquals(false, node0.isContinue());
//       assertEquals(false, node0.isDelProp());
//       assertEquals(false, node0.isAdd());
//       assertEquals(-1, node0.getCharno());
//       assertEquals(false, node0.hasChildren());
//       assertEquals(0, node0.getChildCount());
//       assertEquals(false, node0.isCatch());
//       assertEquals(false, node0.isVar());
//       assertEquals(false, node0.isCase());
//       assertEquals(false, node0.isExprResult());
//       assertEquals(false, node0.isGetProp());
//       assertEquals(false, node0.isFromExterns());
//       assertEquals(true, node0.isParamList());
//       assertEquals(false, node0.isFor());
//       assertEquals(false, node0.isTypeOf());
//       assertEquals(false, node0.isAssign());
//       assertEquals(false, node0.isWhile());
//       assertEquals(false, node0.isOr());
//       assertEquals(false, node0.isRegExp());
//       assertEquals(false, node0.isTry());
//       assertEquals(false, node0.isInstanceOf());
//       assertEquals(false, node0.isLocalResultCall());
//       assertEquals(false, node0.isIf());
//       assertEquals(false, node0.isBreak());
//       assertEquals(false, node0.isAnd());
//       assertEquals(false, node0.isString());
//       assertEquals(false, node0.isNull());
//       assertEquals(false, node0.isLabel());
//       assertEquals(false, node0.isVarArgs());
//       assertEquals(false, node0.isSyntheticBlock());
//       assertEquals(false, node0.isThrow());
//       assertEquals(false, node0.isDo());
//       assertNull(node0.getSourceFileName());
//       assertEquals(false, node0.isVoid());
//       assertEquals(false, node0.isWith());
//       assertEquals(false, node0.isSwitch());
//       assertEquals(false, node0.isAssignAdd());
//       assertEquals(false, node0.isName());
//       assertEquals(false, node0.isArrayLit());
//       assertEquals(false, node0.isEmpty());
//       assertEquals(false, node0.isCall());
//       assertEquals(false, node0.isNE());
//       assertEquals(false, node0.isSetterDef());
//       assertEquals(-1, node0.getLineno());
//       assertEquals(false, node0.isNot());
//       assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
//       assertEquals(true, arrayList0.isEmpty());
//       assertEquals(0, arrayList0.size());
//       assertEquals("[]", arrayList0.toString());
//       assertEquals(false, compiler0.acceptConstKeyword());
//       assertEquals(0, compiler0.getErrorCount());
//       assertEquals(false, compiler0.hasErrors());
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
//       assertEquals(false, compiler0.isTypeCheckingEnabled());
//       assertEquals(false, compiler0.isIdeMode());
//       assertEquals(0, compiler0.getWarningCount());
//       assertFalse(boolean1 == boolean0);
//       assertFalse(boolean0 == boolean1);
//   }

  @Test
  public void test3() {}
//   @Test
//   public void test3() {}
//   @Test
//   public void test3()  throws Throwable  {
//       Compiler compiler0 = new Compiler();
//       //  // Unstable assertion: assertNotNull(compiler0);
//       
//       String string0 = "rgu=UnrWs";
//       Node node0 = compiler0.parseTestCode(string0);
//       //  // Unstable assertion: assertEquals(false, node0.isOr());
//       //  // Unstable assertion: assertEquals(false, node0.isDo());
//       //  // Unstable assertion: assertEquals(false, node0.isOptionalArg());
//       //  // Unstable assertion: assertEquals(false, node0.isOnlyModifiesThisCall());
//       //  // Unstable assertion: assertEquals(false, node0.isDebugger());
//       //  // Unstable assertion: assertEquals(false, node0.isQuotedString());
//       //  // Unstable assertion: assertEquals(false, node0.isQualifiedName());
//       //  // Unstable assertion: assertEquals(false, node0.isTypeOf());
//       //  // Unstable assertion: assertEquals(false, node0.isComma());
//       //  // Unstable assertion: assertEquals(false, node0.isWith());
//       //  // Unstable assertion: assertEquals(false, node0.isNoSideEffectsCall());
//       //  // Unstable assertion: assertEquals(false, node0.isNumber());
//       //  // Unstable assertion: assertEquals(false, node0.isVar());
//       //  // Unstable assertion: assertEquals(false, node0.isArrayLit());
//       //  // Unstable assertion: assertEquals(false, node0.isAssign());
//       //  // Unstable assertion: assertEquals(false, node0.isHook());
//       //  // Unstable assertion: assertEquals(0, node0.getLength());
//       //  // Unstable assertion: assertEquals(true, node0.hasChildren());
//       //  // Unstable assertion: assertEquals(false, node0.isFalse());
//       //  // Unstable assertion: assertEquals(false, node0.isExprResult());
//       //  // Unstable assertion: assertEquals(false, node0.isInc());
//       //  // Unstable assertion: assertEquals(false, node0.isVoid());
//       //  // Unstable assertion: assertEquals(false, node0.isLocalResultCall());
//       //  // Unstable assertion: assertEquals(false, node0.isAssignAdd());
//       //  // Unstable assertion: assertEquals(false, node0.isCatch());
//       //  // Unstable assertion: assertEquals(false, node0.isNot());
//       //  // Unstable assertion: assertEquals(false, node0.isIn());
//       //  // Unstable assertion: assertEquals(" [testcode] ", node0.getSourceFileName());
//       //  // Unstable assertion: assertEquals(false, node0.isLabelName());
//       //  // Unstable assertion: assertEquals(false, node0.isBreak());
//       //  // Unstable assertion: assertEquals(false, node0.isParamList());
//       //  // Unstable assertion: assertEquals(0, node0.getSideEffectFlags());
//       //  // Unstable assertion: assertEquals(false, node0.isSwitch());
//       //  // Unstable assertion: assertEquals(false, node0.isIf());
//       //  // Unstable assertion: assertEquals(false, node0.isEmpty());
//       //  // Unstable assertion: assertEquals(false, node0.isThrow());
//       //  // Unstable assertion: assertEquals(false, node0.isCall());
//       //  // Unstable assertion: assertEquals(false, node0.isAdd());
//       //  // Unstable assertion: assertEquals(false, node0.isDec());
//       //  // Unstable assertion: assertEquals(false, node0.isThis());
//       //  // Unstable assertion: assertEquals(false, node0.isFunction());
//       //  // Unstable assertion: assertEquals(false, node0.isVarArgs());
//       //  // Unstable assertion: assertEquals(false, node0.isRegExp());
//       //  // Unstable assertion: assertEquals(false, node0.isName());
//       //  // Unstable assertion: assertEquals(false, node0.isNull());
//       //  // Unstable assertion: assertEquals(false, node0.hasMoreThanOneChild());
//       //  // Unstable assertion: assertEquals(1, node0.getLineno());
//       //  // Unstable assertion: assertEquals(4096, node0.getSourcePosition());
//       //  // Unstable assertion: assertEquals(false, node0.isReturn());
//       //  // Unstable assertion: assertEquals(false, node0.isNE());
//       //  // Unstable assertion: assertEquals(false, node0.isNew());
//       //  // Unstable assertion: assertEquals(false, node0.isTrue());
//       //  // Unstable assertion: assertEquals(false, node0.isTry());
//       //  // Unstable assertion: assertEquals(false, node0.isInstanceOf());
//       //  // Unstable assertion: assertEquals(false, node0.isSetterDef());
//       //  // Unstable assertion: assertEquals(false, node0.isLabel());
//       //  // Unstable assertion: assertEquals(false, node0.isGetElem());
//       //  // Unstable assertion: assertEquals(false, node0.isBlock());
//       //  // Unstable assertion: assertEquals(false, node0.isUnscopedQualifiedName());
//       //  // Unstable assertion: assertEquals(false, node0.isAnd());
//       //  // Unstable assertion: assertEquals(true, node0.isScript());
//       //  // Unstable assertion: assertEquals(false, node0.isDelProp());
//       //  // Unstable assertion: assertEquals(false, node0.isContinue());
//       //  // Unstable assertion: assertEquals(true, node0.hasOneChild());
//       //  // Unstable assertion: assertEquals(false, node0.isString());
//       //  // Unstable assertion: assertEquals(false, node0.isGetProp());
//       //  // Unstable assertion: assertEquals(false, node0.isWhile());
//       //  // Unstable assertion: assertEquals(132, node0.getType());
//       //  // Unstable assertion: assertEquals(false, node0.isCase());
//       //  // Unstable assertion: assertEquals(false, node0.isFor());
//       //  // Unstable assertion: assertEquals(false, node0.isDefaultCase());
//       //  // Unstable assertion: assertEquals(false, node0.isObjectLit());
//       //  // Unstable assertion: assertEquals(0, node0.getCharno());
//       //  // Unstable assertion: assertEquals(false, node0.wasEmptyNode());
//       //  // Unstable assertion: assertEquals(false, node0.isGetterDef());
//       //  // Unstable assertion: assertEquals(1, node0.getChildCount());
//       //  // Unstable assertion: assertEquals(true, node0.isSyntheticBlock());
//       //  // Unstable assertion: assertEquals(false, node0.isFromExterns());
//       //  // Unstable assertion: assertEquals(0, compiler0.getErrorCount());
//       //  // Unstable assertion: assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
//       //  // Unstable assertion: assertEquals(false, compiler0.acceptConstKeyword());
//       //  // Unstable assertion: assertEquals(false, compiler0.hasErrors());
//       //  // Unstable assertion: assertEquals(false, compiler0.isIdeMode());
//       //  // Unstable assertion: assertEquals(0, compiler0.getWarningCount());
//       //  // Unstable assertion: assertEquals(false, compiler0.isTypeCheckingEnabled());
//       //  // Unstable assertion: assertNotNull(node0);
//       
//       EvoSuiteFile evoSuiteFile0 = null;
//       boolean boolean0 = FileSystemHandling.createFolder(evoSuiteFile0);
//       //  // Unstable assertion: assertFalse(boolean0);
//       
//       RemoveUnusedVars removeUnusedVars0 = new RemoveUnusedVars(compiler0, boolean0, boolean0, boolean0);
//       //  // Unstable assertion: assertEquals(0, compiler0.getErrorCount());
//       //  // Unstable assertion: assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
//       //  // Unstable assertion: assertEquals(false, compiler0.acceptConstKeyword());
//       //  // Unstable assertion: assertEquals(false, compiler0.hasErrors());
//       //  // Unstable assertion: assertEquals(false, compiler0.isIdeMode());
//       //  // Unstable assertion: assertEquals(0, compiler0.getWarningCount());
//       //  // Unstable assertion: assertEquals(false, compiler0.isTypeCheckingEnabled());
//       //  // Unstable assertion: assertNotNull(removeUnusedVars0);
//       
//       SimpleDefinitionFinder simpleDefinitionFinder0 = new SimpleDefinitionFinder((AbstractCompiler) compiler0);
//       //  // Unstable assertion: assertEquals(0, compiler0.getErrorCount());
//       //  // Unstable assertion: assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
//       //  // Unstable assertion: assertEquals(false, compiler0.acceptConstKeyword());
//       //  // Unstable assertion: assertEquals(false, compiler0.hasErrors());
//       //  // Unstable assertion: assertEquals(false, compiler0.isIdeMode());
//       //  // Unstable assertion: assertEquals(0, compiler0.getWarningCount());
//       //  // Unstable assertion: assertEquals(false, compiler0.isTypeCheckingEnabled());
//       //  // Unstable assertion: assertNotNull(simpleDefinitionFinder0);
//       
//       Node node1 = RuntimeTypeCheck.getBoilerplateCode(compiler0, string0);
//       //  // Unstable assertion: assertNotSame(node1, node0);
//       //  // Unstable assertion: assertEquals(0, compiler0.getErrorCount());
//       //  // Unstable assertion: assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
//       //  // Unstable assertion: assertEquals(false, compiler0.acceptConstKeyword());
//       //  // Unstable assertion: assertEquals(false, compiler0.hasErrors());
//       //  // Unstable assertion: assertEquals(67, compiler0.getWarningCount());
//       //  // Unstable assertion: assertEquals(false, compiler0.isIdeMode());
//       //  // Unstable assertion: assertEquals(false, compiler0.isTypeCheckingEnabled());
//       //  // Unstable assertion: assertEquals(false, node1.isHook());
//       //  // Unstable assertion: assertEquals(false, node1.isNot());
//       //  // Unstable assertion: assertEquals(false, node1.isNE());
//       //  // Unstable assertion: assertEquals(true, node1.hasMoreThanOneChild());
//       //  // Unstable assertion: assertEquals(false, node1.isCall());
//       //  // Unstable assertion: assertEquals(false, node1.hasOneChild());
//       //  // Unstable assertion: assertEquals(false, node1.isReturn());
//       //  // Unstable assertion: assertEquals(false, node1.isBlock());
//       //  // Unstable assertion: assertEquals(false, node1.isIf());
//       //  // Unstable assertion: assertEquals(false, node1.isCatch());
//       //  // Unstable assertion: assertEquals(false, node1.isSetterDef());
//       //  // Unstable assertion: assertEquals(false, node1.isDefaultCase());
//       //  // Unstable assertion: assertEquals(false, node1.isIn());
//       //  // Unstable assertion: assertEquals(false, node1.isSwitch());
//       //  // Unstable assertion: assertEquals(false, node1.isWhile());
//       //  // Unstable assertion: assertEquals(false, node1.isObjectLit());
//       //  // Unstable assertion: assertEquals(0, node1.getCharno());
//       //  // Unstable assertion: assertEquals(false, node1.isDec());
//       //  // Unstable assertion: assertEquals(false, node1.isAnd());
//       //  // Unstable assertion: assertEquals(0, node1.getLength());
//       //  // Unstable assertion: assertEquals(4096, node1.getSourcePosition());
//       //  // Unstable assertion: assertEquals(false, node1.isGetProp());
//       //  // Unstable assertion: assertEquals(false, node1.isArrayLit());
//       //  // Unstable assertion: assertEquals(0, node1.getSideEffectFlags());
//       //  // Unstable assertion: assertEquals(false, node1.isVarArgs());
//       //  // Unstable assertion: assertEquals(false, node1.isQualifiedName());
//       //  // Unstable assertion: assertEquals(false, node1.isOr());
//       //  // Unstable assertion: assertEquals(false, node1.isWith());
//       //  // Unstable assertion: assertEquals(false, node1.isFalse());
//       //  // Unstable assertion: assertEquals(false, node1.isNoSideEffectsCall());
//       //  // Unstable assertion: assertEquals(false, node1.isFromExterns());
//       //  // Unstable assertion: assertEquals(1, node1.getLineno());
//       //  // Unstable assertion: assertEquals(false, node1.isInstanceOf());
//       //  // Unstable assertion: assertEquals(false, node1.isLabel());
//       //  // Unstable assertion: assertEquals(false, node1.isDebugger());
//       //  // Unstable assertion: assertEquals(false, node1.isQuotedString());
//       //  // Unstable assertion: assertEquals(false, node1.isFunction());
//       //  // Unstable assertion: assertEquals(false, node1.isName());
//       //  // Unstable assertion: assertEquals(132, node1.getType());
//       //  // Unstable assertion: assertEquals(false, node1.isAssignAdd());
//       //  // Unstable assertion: assertEquals(false, node1.isString());
//       //  // Unstable assertion: assertEquals(false, node1.isOptionalArg());
//       //  // Unstable assertion: assertEquals(false, node1.isAdd());
//       //  // Unstable assertion: assertEquals(false, node1.isBreak());
//       //  // Unstable assertion: assertEquals(false, node1.isDelProp());
//       //  // Unstable assertion: assertEquals(false, node1.isInc());
//       //  // Unstable assertion: assertEquals(false, node1.isRegExp());
//       //  // Unstable assertion: assertEquals(false, node1.isUnscopedQualifiedName());
//       //  // Unstable assertion: assertEquals(false, node1.isLabelName());
//       //  // Unstable assertion: assertEquals(true, node1.isSyntheticBlock());
//       //  // Unstable assertion: assertEquals(false, node1.isDo());
//       //  // Unstable assertion: assertEquals(false, node1.isParamList());
//       //  // Unstable assertion: assertEquals(false, node1.isCase());
//       //  // Unstable assertion: assertEquals(false, node1.wasEmptyNode());
//       //  // Unstable assertion: assertEquals(false, node1.isNew());
//       //  // Unstable assertion: assertEquals(false, node1.isGetElem());
//       //  // Unstable assertion: assertEquals(true, node1.isScript());
//       //  // Unstable assertion: assertEquals(false, node1.isTrue());
//       //  // Unstable assertion: assertEquals(true, node1.hasChildren());
//       //  // Unstable assertion: assertEquals(false, node1.isThrow());
//       //  // Unstable assertion: assertEquals(false, node1.isContinue());
//       //  // Unstable assertion: assertEquals(false, node1.isOnlyModifiesThisCall());
//       //  // Unstable assertion: assertEquals(false, node1.isNumber());
//       //  // Unstable assertion: assertEquals(false, node1.isVar());
//       //  // Unstable assertion: assertEquals(false, node1.isVoid());
//       //  // Unstable assertion: assertEquals(false, node1.isTypeOf());
//       //  // Unstable assertion: assertEquals(" [synthetic:1] ", node1.getSourceFileName());
//       //  // Unstable assertion: assertEquals(false, node1.isComma());
//       //  // Unstable assertion: assertEquals(false, node1.isLocalResultCall());
//       //  // Unstable assertion: assertEquals(false, node1.isGetterDef());
//       //  // Unstable assertion: assertEquals(false, node1.isEmpty());
//       //  // Unstable assertion: assertEquals(false, node1.isFor());
//       //  // Unstable assertion: assertEquals(false, node1.isNull());
//       //  // Unstable assertion: assertEquals(false, node1.isExprResult());
//       //  // Unstable assertion: assertEquals(35, node1.getChildCount());
//       //  // Unstable assertion: assertEquals(false, node1.isAssign());
//       //  // Unstable assertion: assertEquals(false, node1.isTry());
//       //  // Unstable assertion: assertEquals(false, node1.isThis());
//       //  // Unstable assertion: assertFalse(node1.equals((Object)node0));
//       //  // Unstable assertion: assertNotNull(node1);
//       
//       removeUnusedVars0.process(node0, node1, simpleDefinitionFinder0);
//       //  // Unstable assertion: assertNotSame(node0, node1);
//       //  // Unstable assertion: assertNotSame(node1, node0);
//       //  // Unstable assertion: assertEquals(false, node0.isOr());
//       //  // Unstable assertion: assertEquals(false, node0.isDo());
//       //  // Unstable assertion: assertEquals(false, node0.isOptionalArg());
//       //  // Unstable assertion: assertEquals(false, node0.isOnlyModifiesThisCall());
//       //  // Unstable assertion: assertEquals(false, node0.isDebugger());
//       //  // Unstable assertion: assertEquals(false, node0.isQuotedString());
//       //  // Unstable assertion: assertEquals(false, node0.isQualifiedName());
//       //  // Unstable assertion: assertEquals(false, node0.isTypeOf());
//       //  // Unstable assertion: assertEquals(false, node0.isComma());
//       //  // Unstable assertion: assertEquals(false, node0.isWith());
//       //  // Unstable assertion: assertEquals(false, node0.isNoSideEffectsCall());
//       //  // Unstable assertion: assertEquals(false, node0.isNumber());
//       //  // Unstable assertion: assertEquals(false, node0.isVar());
//       //  // Unstable assertion: assertEquals(false, node0.isArrayLit());
//       //  // Unstable assertion: assertEquals(false, node0.isAssign());
//       //  // Unstable assertion: assertEquals(false, node0.isHook());
//       //  // Unstable assertion: assertEquals(0, node0.getLength());
//       //  // Unstable assertion: assertEquals(true, node0.hasChildren());
//       //  // Unstable assertion: assertEquals(false, node0.isFalse());
//       //  // Unstable assertion: assertEquals(false, node0.isExprResult());
//       //  // Unstable assertion: assertEquals(false, node0.isInc());
//       //  // Unstable assertion: assertEquals(false, node0.isVoid());
//       //  // Unstable assertion: assertEquals(false, node0.isLocalResultCall());
//       //  // Unstable assertion: assertEquals(false, node0.isAssignAdd());
//       //  // Unstable assertion: assertEquals(false, node0.isCatch());
//       //  // Unstable assertion: assertEquals(false, node0.isNot());
//       //  // Unstable assertion: assertEquals(false, node0.isIn());
//       //  // Unstable assertion: assertEquals(" [testcode] ", node0.getSourceFileName());
//       //  // Unstable assertion: assertEquals(false, node0.isLabelName());
//       //  // Unstable assertion: assertEquals(false, node0.isBreak());
//       //  // Unstable assertion: assertEquals(false, node0.isParamList());
//       //  // Unstable assertion: assertEquals(0, node0.getSideEffectFlags());
//       //  // Unstable assertion: assertEquals(false, node0.isSwitch());
//       //  // Unstable assertion: assertEquals(false, node0.isIf());
//       //  // Unstable assertion: assertEquals(false, node0.isEmpty());
//       //  // Unstable assertion: assertEquals(false, node0.isThrow());
//       //  // Unstable assertion: assertEquals(false, node0.isCall());
//       //  // Unstable assertion: assertEquals(false, node0.isAdd());
//       //  // Unstable assertion: assertEquals(false, node0.isDec());
//       //  // Unstable assertion: assertEquals(false, node0.isThis());
//       //  // Unstable assertion: assertEquals(false, node0.isFunction());
//       //  // Unstable assertion: assertEquals(false, node0.isVarArgs());
//       //  // Unstable assertion: assertEquals(false, node0.isRegExp());
//       //  // Unstable assertion: assertEquals(false, node0.isName());
//       //  // Unstable assertion: assertEquals(false, node0.isNull());
//       //  // Unstable assertion: assertEquals(false, node0.hasMoreThanOneChild());
//       //  // Unstable assertion: assertEquals(1, node0.getLineno());
//       //  // Unstable assertion: assertEquals(4096, node0.getSourcePosition());
//       //  // Unstable assertion: assertEquals(false, node0.isReturn());
//       //  // Unstable assertion: assertEquals(false, node0.isNE());
//       //  // Unstable assertion: assertEquals(false, node0.isNew());
//       //  // Unstable assertion: assertEquals(false, node0.isTrue());
//       //  // Unstable assertion: assertEquals(false, node0.isTry());
//       //  // Unstable assertion: assertEquals(false, node0.isInstanceOf());
//       //  // Unstable assertion: assertEquals(false, node0.isSetterDef());
//       //  // Unstable assertion: assertEquals(false, node0.isLabel());
//       //  // Unstable assertion: assertEquals(false, node0.isGetElem());
//       //  // Unstable assertion: assertEquals(false, node0.isBlock());
//       //  // Unstable assertion: assertEquals(false, node0.isUnscopedQualifiedName());
//       //  // Unstable assertion: assertEquals(false, node0.isAnd());
//       //  // Unstable assertion: assertEquals(true, node0.isScript());
//       //  // Unstable assertion: assertEquals(false, node0.isDelProp());
//       //  // Unstable assertion: assertEquals(false, node0.isContinue());
//       //  // Unstable assertion: assertEquals(true, node0.hasOneChild());
//       //  // Unstable assertion: assertEquals(false, node0.isString());
//       //  // Unstable assertion: assertEquals(false, node0.isGetProp());
//       //  // Unstable assertion: assertEquals(false, node0.isWhile());
//       //  // Unstable assertion: assertEquals(132, node0.getType());
//       //  // Unstable assertion: assertEquals(false, node0.isCase());
//       //  // Unstable assertion: assertEquals(false, node0.isFor());
//       //  // Unstable assertion: assertEquals(false, node0.isDefaultCase());
//       //  // Unstable assertion: assertEquals(false, node0.isObjectLit());
//       //  // Unstable assertion: assertEquals(0, node0.getCharno());
//       //  // Unstable assertion: assertEquals(false, node0.wasEmptyNode());
//       //  // Unstable assertion: assertEquals(false, node0.isGetterDef());
//       //  // Unstable assertion: assertEquals(1, node0.getChildCount());
//       //  // Unstable assertion: assertEquals(true, node0.isSyntheticBlock());
//       //  // Unstable assertion: assertEquals(false, node0.isFromExterns());
//       //  // Unstable assertion: assertEquals(0, compiler0.getErrorCount());
//       //  // Unstable assertion: assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
//       //  // Unstable assertion: assertEquals(false, compiler0.acceptConstKeyword());
//       //  // Unstable assertion: assertEquals(false, compiler0.hasErrors());
//       //  // Unstable assertion: assertEquals(67, compiler0.getWarningCount());
//       //  // Unstable assertion: assertEquals(false, compiler0.isIdeMode());
//       //  // Unstable assertion: assertEquals(false, compiler0.isTypeCheckingEnabled());
//       //  // Unstable assertion: assertEquals(false, node1.isHook());
//       //  // Unstable assertion: assertEquals(false, node1.isNot());
//       //  // Unstable assertion: assertEquals(false, node1.isNE());
//       //  // Unstable assertion: assertEquals(true, node1.hasMoreThanOneChild());
//       //  // Unstable assertion: assertEquals(false, node1.isCall());
//       //  // Unstable assertion: assertEquals(false, node1.hasOneChild());
//       //  // Unstable assertion: assertEquals(false, node1.isReturn());
//       //  // Unstable assertion: assertEquals(false, node1.isBlock());
//       //  // Unstable assertion: assertEquals(false, node1.isIf());
//       //  // Unstable assertion: assertEquals(false, node1.isCatch());
//       //  // Unstable assertion: assertEquals(false, node1.isSetterDef());
//       //  // Unstable assertion: assertEquals(false, node1.isDefaultCase());
//       //  // Unstable assertion: assertEquals(false, node1.isIn());
//       //  // Unstable assertion: assertEquals(false, node1.isSwitch());
//       //  // Unstable assertion: assertEquals(false, node1.isWhile());
//       //  // Unstable assertion: assertEquals(false, node1.isObjectLit());
//       //  // Unstable assertion: assertEquals(0, node1.getCharno());
//       //  // Unstable assertion: assertEquals(false, node1.isDec());
//       //  // Unstable assertion: assertEquals(false, node1.isAnd());
//       //  // Unstable assertion: assertEquals(0, node1.getLength());
//       //  // Unstable assertion: assertEquals(4096, node1.getSourcePosition());
//       //  // Unstable assertion: assertEquals(false, node1.isGetProp());
//       //  // Unstable assertion: assertEquals(false, node1.isArrayLit());
//       //  // Unstable assertion: assertEquals(0, node1.getSideEffectFlags());
//       //  // Unstable assertion: assertEquals(false, node1.isVarArgs());
//       //  // Unstable assertion: assertEquals(false, node1.isQualifiedName());
//       //  // Unstable assertion: assertEquals(false, node1.isOr());
//       //  // Unstable assertion: assertEquals(false, node1.isWith());
//       //  // Unstable assertion: assertEquals(false, node1.isFalse());
//       //  // Unstable assertion: assertEquals(false, node1.isNoSideEffectsCall());
//       //  // Unstable assertion: assertEquals(false, node1.isFromExterns());
//       //  // Unstable assertion: assertEquals(1, node1.getLineno());
//       //  // Unstable assertion: assertEquals(false, node1.isInstanceOf());
//       //  // Unstable assertion: assertEquals(false, node1.isLabel());
//       //  // Unstable assertion: assertEquals(false, node1.isDebugger());
//       //  // Unstable assertion: assertEquals(false, node1.isQuotedString());
//       //  // Unstable assertion: assertEquals(false, node1.isFunction());
//       //  // Unstable assertion: assertEquals(false, node1.isName());
//       //  // Unstable assertion: assertEquals(132, node1.getType());
//       //  // Unstable assertion: assertEquals(false, node1.isAssignAdd());
//       //  // Unstable assertion: assertEquals(false, node1.isString());
//       //  // Unstable assertion: assertEquals(false, node1.isOptionalArg());
//       //  // Unstable assertion: assertEquals(false, node1.isAdd());
//       //  // Unstable assertion: assertEquals(false, node1.isBreak());
//       //  // Unstable assertion: assertEquals(false, node1.isDelProp());
//       //  // Unstable assertion: assertEquals(false, node1.isInc());
//       //  // Unstable assertion: assertEquals(false, node1.isRegExp());
//       //  // Unstable assertion: assertEquals(false, node1.isUnscopedQualifiedName());
//       //  // Unstable assertion: assertEquals(false, node1.isLabelName());
//       //  // Unstable assertion: assertEquals(true, node1.isSyntheticBlock());
//       //  // Unstable assertion: assertEquals(false, node1.isDo());
//       //  // Unstable assertion: assertEquals(false, node1.isParamList());
//       //  // Unstable assertion: assertEquals(false, node1.isCase());
//       //  // Unstable assertion: assertEquals(false, node1.wasEmptyNode());
//       //  // Unstable assertion: assertEquals(false, node1.isNew());
//       //  // Unstable assertion: assertEquals(false, node1.isGetElem());
//       //  // Unstable assertion: assertEquals(true, node1.isScript());
//       //  // Unstable assertion: assertEquals(false, node1.isTrue());
//       //  // Unstable assertion: assertEquals(true, node1.hasChildren());
//       //  // Unstable assertion: assertEquals(false, node1.isThrow());
//       //  // Unstable assertion: assertEquals(false, node1.isContinue());
//       //  // Unstable assertion: assertEquals(false, node1.isOnlyModifiesThisCall());
//       //  // Unstable assertion: assertEquals(false, node1.isNumber());
//       //  // Unstable assertion: assertEquals(false, node1.isVar());
//       //  // Unstable assertion: assertEquals(false, node1.isVoid());
//       //  // Unstable assertion: assertEquals(false, node1.isTypeOf());
//       //  // Unstable assertion: assertEquals(" [synthetic:1] ", node1.getSourceFileName());
//       //  // Unstable assertion: assertEquals(false, node1.isComma());
//       //  // Unstable assertion: assertEquals(false, node1.isLocalResultCall());
//       //  // Unstable assertion: assertEquals(false, node1.isGetterDef());
//       //  // Unstable assertion: assertEquals(false, node1.isEmpty());
//       //  // Unstable assertion: assertEquals(false, node1.isFor());
//       //  // Unstable assertion: assertEquals(false, node1.isNull());
//       //  // Unstable assertion: assertEquals(false, node1.isExprResult());
//       //  // Unstable assertion: assertEquals(35, node1.getChildCount());
//       //  // Unstable assertion: assertEquals(false, node1.isAssign());
//       //  // Unstable assertion: assertEquals(false, node1.isTry());
//       //  // Unstable assertion: assertEquals(false, node1.isThis());
//       //  // Unstable assertion: assertFalse(node0.equals((Object)node1));
//       //  // Unstable assertion: assertFalse(node1.equals((Object)node0));
//   }
}
