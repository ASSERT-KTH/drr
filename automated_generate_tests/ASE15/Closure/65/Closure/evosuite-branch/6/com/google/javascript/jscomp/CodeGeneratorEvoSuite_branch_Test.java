/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 22:18:14 GMT 2014
 */

package com.google.javascript.jscomp;

import static org.junit.Assert.*; import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.junit.Test;
import com.google.javascript.jscomp.CodeGenerator;
import java.nio.charset.Charset;
import java.nio.charset.CharsetEncoder;



import org.junit.runner.RunWith;


public class CodeGeneratorEvoSuite_branch_Test  {

  @Test
  public void test00()  throws Throwable  {
      String string0 = "\tn\f\r +\u0085\"\u2028b\u2029G\u205Ft\u00A0<v\u202F";
      String string1 = CodeGenerator.identifierEscape(string0);
      assertNotNull(string1);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertEquals("\\u0009n\\u000c\\u000d +\\u0085\"\\u2028b\\u2029G\\u205ft\\u00a0<v\\u202f", string1);
  }

  @Test
  public void test01()  throws Throwable  {
      String string0 = "1<694n3RGe]>V{";
      String string1 = CodeGenerator.escapeToDoubleQuotedJsString(string0);
      assertNotNull(string1);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertEquals("\"1<694n3RGe]>V{\"", string1);
  }

  @Test
  public void test02()  throws Throwable  {
      String string0 = "1 Ns],9sG]]>v";
      String string1 = CodeGenerator.escapeToDoubleQuotedJsString(string0);
      assertNotNull(string1);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertEquals("\"1 Ns],9sG]]\\>v\"", string1);
  }

  @Test
  public void test03()  throws Throwable  {
      String string0 = "^(twh%";
      Charset charset0 = Charset.defaultCharset();
      assertNotNull(charset0);
      assertEquals("UTF-8", charset0.displayName());
      assertEquals(true, charset0.canEncode());
      assertEquals(true, charset0.isRegistered());
      assertEquals("UTF-8", charset0.name());
      assertEquals("UTF-8", charset0.toString());
      
      String string1 = ">qXDOC>`yBaVYI";
      assertNotSame(string1, string0);
      
      char char0 = 'p';
      CharsetEncoder charsetEncoder0 = charset0.newEncoder();
      assertNotNull(charsetEncoder0);
      assertEquals(1.1F, charsetEncoder0.averageBytesPerChar(), 0.01F);
      assertEquals(3.0F, charsetEncoder0.maxBytesPerChar(), 0.01F);
      assertEquals("UTF-8", charset0.displayName());
      assertEquals(true, charset0.canEncode());
      assertEquals(true, charset0.isRegistered());
      assertEquals("UTF-8", charset0.name());
      assertEquals("UTF-8", charset0.toString());
      
      String string2 = CodeGenerator.strEscape(string1, char0, string0, string0, string0, charsetEncoder0);
      assertNotNull(string2);
      assertEquals(1.1F, charsetEncoder0.averageBytesPerChar(), 0.01F);
      assertEquals(3.0F, charsetEncoder0.maxBytesPerChar(), 0.01F);
      assertEquals("UTF-8", charset0.displayName());
      assertEquals(true, charset0.canEncode());
      assertEquals(true, charset0.isRegistered());
      assertEquals("UTF-8", charset0.name());
      assertEquals("UTF-8", charset0.toString());
      assertNotSame(string1, string0);
      assertNotSame(string1, string2);
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("p>qXDOC>`yBaVYIp", string2);
  }

  @Test
  public void test04()  throws Throwable  {
      String string0 = "\\G;:'fUKA)%12vV";
      String string1 = CodeGenerator.escapeToDoubleQuotedJsString(string0);
      assertNotNull(string1);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertEquals("\"\\\\G;:'fUKA)%12vV\"", string1);
  }

  @Test
  public void test05()  throws Throwable  {
      String string0 = "on\u0018\u00E7\u0007 \u0003(\u000B2$.google.protobuf.UninterretedOption\":\n\fOptimizeMode\u0012\tQ\u0005SPEED\u0010\u0001\u0012\r\n\tCODE_SIZE\u0010\u0002\u0012\u0010\n\fLITE_RUNTIM\u0010\u0003*\t\b\u00E8\u0007\u0010\u0080\u0080\u0080\u0080\u0002\"\u00B8\u0001\n\u000EMessageOptions\u0012&\u0017message_set_wire_format\u0018\u0001 \u0001(\b:\u0005false\u0012.\n\u001Fno_standard_descriptor_accesso\u0018\u0002 \u0001(\b:\u0005false\u0012C\n\u0014uninterpreted_option\u0018\u00E7\u0007 \u0003(\u000B2$.google.protobuf.UninterpretedOption*\t\b\u00E8\u0007\u0010\u0080\u0080\u0080\u0080\u0002\"\u0094\u0002\n\fFieldOptions\u0012:\n\u0005ctype\u0018\u0001 \u0001(\u000E2#.google.protobuf.FieldOptions.CTypU:\u0006STRING\u0012\u000E\n\u0006packed\u0018\u0002 \u0001(\b\u0012\u0019";
      String string1 = CodeGenerator.regexpEscape(string0);
      assertNotNull(string1);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertEquals("/on\\u0018\\u00e7\\u0007 \\u0003(\\u000b2$.google.protobuf.UninterretedOption\":\\n\\u000cOptimizeMode\\u0012\\tQ\\u0005SPEED\\u0010\\u0001\\u0012\\r\\n\\tCODE_SIZE\\u0010\\u0002\\u0012\\u0010\\n\\u000cLITE_RUNTIM\\u0010\\u0003*\\t\\u0008\\u00e8\\u0007\\u0010\\u0080\\u0080\\u0080\\u0080\\u0002\"\\u00b8\\u0001\\n\\u000eMessageOptions\\u0012&\\u0017message_set_wire_format\\u0018\\u0001 \\u0001(\\u0008:\\u0005false\\u0012.\\n\\u001fno_standard_descriptor_accesso\\u0018\\u0002 \\u0001(\\u0008:\\u0005false\\u0012C\\n\\u0014uninterpreted_option\\u0018\\u00e7\\u0007 \\u0003(\\u000b2$.google.protobuf.UninterpretedOption*\\t\\u0008\\u00e8\\u0007\\u0010\\u0080\\u0080\\u0080\\u0080\\u0002\"\\u0094\\u0002\\n\\u000cFieldOptions\\u0012:\\n\\u0005ctype\\u0018\\u0001 \\u0001(\\u000e2#.google.protobuf.FieldOptions.CTypU:\\u0006STRING\\u0012\\u000e\\n\\u0006packed\\u0018\\u0002 \\u0001(\\u0008\\u0012\\u0019/", string1);
  }

  @Test
  public void test06()  throws Throwable  {
      String string0 = "\n\ndeprecated\u0018\u0003 \u0001(\b:\u0005false\u0012\u001C\n\u0014experimental_map_key\u0018\t \u0001(\t\u0012C\n\u0014uninterpreted_option\u0018\u00E7\u0007 \u0003(\u000B2$.google.protobuf.UninterpretedOption\"/\n\u0005CType\u0012\n\n\u0006STRING\u0010\u0000\u0012\b\n\u0004CORD\u0010\u0001\u0012\u0010\n\fSTRING_PIECE\u0010\u0002*\t\b\u00E8\u0007\u0010\u0080\u0080\u0080\u0080\u0002\"]\n\u000BEnumOptions\u0012C\n\u0014uninterpreted_option\u0018\u00E7\u0007 \u0003(\u000B2$.google.protobuf.UninterpretedOption*\t\b\u00E8\u0007\u0010\u0080\u0080\u0080\u0080\u0002\"b\n\u0010EnumValueOptions\u0012C\n\u0014uninterpreted_option\u0018\u00E7\u0007 \u0003(\u000B2$.google.protobuf.UninterpretedOption*\t\b\u00E8\u0007\u0010\u0080\u0080\u0080\u0080\u0002\"`\n\u000EServiceOptions\u0012C\n";
      String string1 = CodeGenerator.regexpEscape(string0);
      assertNotNull(string1);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertEquals("/\\n\\ndeprecated\\u0018\\u0003 \\u0001(\\u0008:\\u0005false\\u0012\\u001c\\n\\u0014experimental_map_key\\u0018\\t \\u0001(\\t\\u0012C\\n\\u0014uninterpreted_option\\u0018\\u00e7\\u0007 \\u0003(\\u000b2$.google.protobuf.UninterpretedOption\"/\\n\\u0005CType\\u0012\\n\\n\\u0006STRING\\u0010\\000\\u0012\\u0008\\n\\u0004CORD\\u0010\\u0001\\u0012\\u0010\\n\\u000cSTRING_PIECE\\u0010\\u0002*\\t\\u0008\\u00e8\\u0007\\u0010\\u0080\\u0080\\u0080\\u0080\\u0002\"]\\n\\u000bEnumOptions\\u0012C\\n\\u0014uninterpreted_option\\u0018\\u00e7\\u0007 \\u0003(\\u000b2$.google.protobuf.UninterpretedOption*\\t\\u0008\\u00e8\\u0007\\u0010\\u0080\\u0080\\u0080\\u0080\\u0002\"b\\n\\u0010EnumValueOptions\\u0012C\\n\\u0014uninterpreted_option\\u0018\\u00e7\\u0007 \\u0003(\\u000b2$.google.protobuf.UninterpretedOption*\\t\\u0008\\u00e8\\u0007\\u0010\\u0080\\u0080\\u0080\\u0080\\u0002\"`\\n\\u000eServiceOptions\\u0012C\\n/", string1);
  }

  @Test
  public void test07()  throws Throwable  {
      String string0 = "5";
      double double0 = CodeGenerator.getSimpleNumber(string0);
      assertEquals(5.0, double0, 0.01D);
  }

  @Test
  public void test08()  throws Throwable  {
      String string0 = "\\G;:'fUKA)%12vV";
      boolean boolean0 = CodeGenerator.isSimpleNumber(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test09()  throws Throwable  {
      String string0 = "+(nf</script4nl4";
      String string1 = CodeGenerator.escapeToDoubleQuotedJsString(string0);
      assertNotNull(string1);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertEquals("\"+(nf<\\/script4nl4\"", string1);
      
      double double0 = CodeGenerator.getSimpleNumber(string1);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertEquals(Double.NaN, double0, 0.01D);
  }

  @Test
  public void test10()  throws Throwable  {
      String string0 = "";
      boolean boolean0 = CodeGenerator.isSimpleNumber(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test11()  throws Throwable  {
      String string0 = ")aV->|\\Da63g>&t";
      String string1 = CodeGenerator.regexpEscape(string0);
      assertNotNull(string1);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertEquals("/)aV->|\\Da63g>&t/", string1);
  }

  @Test
  public void test12()  throws Throwable  {
      String string0 = "+f<!-->S:4q4";
      String string1 = CodeGenerator.escapeToDoubleQuotedJsString(string0);
      assertNotNull(string1);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertEquals("\"+f<\\!--\\>\\u007fS:4q4\"", string1);
  }
}
