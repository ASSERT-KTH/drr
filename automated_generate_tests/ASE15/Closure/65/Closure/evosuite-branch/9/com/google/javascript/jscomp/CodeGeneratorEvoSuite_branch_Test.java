/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 22:50:05 GMT 2014
 */

package com.google.javascript.jscomp;

import static org.junit.Assert.*;
import org.junit.Test;
import com.google.javascript.jscomp.CodeGenerator;
import com.google.javascript.jscomp.SourceFile;
import java.nio.charset.Charset;
import java.nio.charset.CharsetEncoder;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;

import org.evosuite.runtime.mock.java.io.MockFile;
import org.junit.runner.RunWith;


public class CodeGeneratorEvoSuite_branch_Test  {

  @Test
  public void test00()  throws Throwable  {
      String string0 = "\t\n\u000B\fQ?\r \u0085\u2029\u205F\u30000\u00A0+%\u202F";
      String string1 = CodeGenerator.identifierEscape(string0);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertNotNull(string1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertEquals("\\u0009\\u000a\\u000b\\u000cQ?\\u000d \\u0085\\u2029\\u205f\\u30000\\u00a0+%\\u202f", string1);
  }

  @Test
  public void test01()  throws Throwable  {
      String string0 = "wo]`t[t0m</script6";
      String string1 = CodeGenerator.identifierEscape(string0);
      assertSame(string0, string1);
      assertSame(string1, string0);
      assertNotNull(string1);
      assertEquals("wo]`t[t0m</script6", string1);
      
      String string2 = CodeGenerator.regexpEscape(string1);
      assertNotSame(string0, string2);
      assertSame(string0, string1);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertNotSame(string1, string2);
      assertSame(string1, string0);
      assertNotNull(string2);
      assertFalse(string0.equals((Object)string2));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      assertEquals("/wo]`t[t0m<\\/script6/", string2);
  }

  @Test
  public void test02()  throws Throwable  {
      String string0 = "wZ mZ![e+sGZ]]>l";
      String string1 = CodeGenerator.escapeToDoubleQuotedJsString(string0);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertNotNull(string1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertEquals("\"wZ mZ![e+sGZ]]\\>l\"", string1);
  }

  @Test
  public void test03()  throws Throwable  {
      String string0 = "Unexpected token type.QShould be LABEL_NAME.";
      MockFile mockFile0 = new MockFile(string0, string0);
      assertNotNull(mockFile0);
      
      SourceFile.OnDisk sourceFile_OnDisk0 = new SourceFile.OnDisk(mockFile0);
      assertNotNull(sourceFile_OnDisk0);
      assertEquals("Unexpected token type.QShould be LABEL_NAME./Unexpected token type.QShould be LABEL_NAME.", sourceFile_OnDisk0.toString());
      assertEquals("Unexpected token type.QShould be LABEL_NAME./Unexpected token type.QShould be LABEL_NAME.", sourceFile_OnDisk0.getOriginalPath());
      assertEquals("Unexpected token type.QShould be LABEL_NAME./Unexpected token type.QShould be LABEL_NAME.", sourceFile_OnDisk0.getName());
      
      String string1 = "N@<!-->";
      assertNotSame(string1, string0);
      
      char char0 = 'H';
      Charset charset0 = sourceFile_OnDisk0.getCharset();
      assertNotSame(string0, string1);
      assertNotNull(charset0);
      assertEquals("Unexpected token type.QShould be LABEL_NAME./Unexpected token type.QShould be LABEL_NAME.", sourceFile_OnDisk0.toString());
      assertEquals("Unexpected token type.QShould be LABEL_NAME./Unexpected token type.QShould be LABEL_NAME.", sourceFile_OnDisk0.getOriginalPath());
      assertEquals("Unexpected token type.QShould be LABEL_NAME./Unexpected token type.QShould be LABEL_NAME.", sourceFile_OnDisk0.getName());
      assertEquals("UTF-8", charset0.toString());
      assertEquals(true, charset0.isRegistered());
      assertEquals("UTF-8", charset0.displayName());
      assertEquals("UTF-8", charset0.name());
      assertEquals(true, charset0.canEncode());
      assertFalse(string0.equals((Object)string1));
      
      CharsetEncoder charsetEncoder0 = charset0.newEncoder();
      assertNotSame(string0, string1);
      assertNotNull(charsetEncoder0);
      assertEquals("Unexpected token type.QShould be LABEL_NAME./Unexpected token type.QShould be LABEL_NAME.", sourceFile_OnDisk0.toString());
      assertEquals("Unexpected token type.QShould be LABEL_NAME./Unexpected token type.QShould be LABEL_NAME.", sourceFile_OnDisk0.getOriginalPath());
      assertEquals("Unexpected token type.QShould be LABEL_NAME./Unexpected token type.QShould be LABEL_NAME.", sourceFile_OnDisk0.getName());
      assertEquals("UTF-8", charset0.toString());
      assertEquals(true, charset0.isRegistered());
      assertEquals("UTF-8", charset0.displayName());
      assertEquals("UTF-8", charset0.name());
      assertEquals(true, charset0.canEncode());
      assertEquals(3.0F, charsetEncoder0.maxBytesPerChar(), 0.01F);
      assertEquals(1.1F, charsetEncoder0.averageBytesPerChar(), 0.01F);
      assertFalse(string0.equals((Object)string1));
      
      String string2 = CodeGenerator.strEscape(string1, char0, string1, string1, string0, charsetEncoder0);
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertNotSame(string1, string0);
      assertNotSame(string1, string2);
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertNotNull(string2);
      assertEquals("Unexpected token type.QShould be LABEL_NAME./Unexpected token type.QShould be LABEL_NAME.", sourceFile_OnDisk0.toString());
      assertEquals("Unexpected token type.QShould be LABEL_NAME./Unexpected token type.QShould be LABEL_NAME.", sourceFile_OnDisk0.getOriginalPath());
      assertEquals("Unexpected token type.QShould be LABEL_NAME./Unexpected token type.QShould be LABEL_NAME.", sourceFile_OnDisk0.getName());
      assertEquals("UTF-8", charset0.toString());
      assertEquals(true, charset0.isRegistered());
      assertEquals("UTF-8", charset0.displayName());
      assertEquals("UTF-8", charset0.name());
      assertEquals(true, charset0.canEncode());
      assertEquals(3.0F, charsetEncoder0.maxBytesPerChar(), 0.01F);
      assertEquals(1.1F, charsetEncoder0.averageBytesPerChar(), 0.01F);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertEquals("HN@<\\!--\\>H", string2);
  }

  @Test
  public void test04()  throws Throwable  {
      String string0 = "w {d7lu){=\"h]>l";
      String string1 = CodeGenerator.escapeToDoubleQuotedJsString(string0);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertEquals("\"w {d7lu){=\\\"h]>l\"", string1);
  }

  @Test
  public void test05()  throws Throwable  {
      String string0 = " 0;-> ";
      String string1 = CodeGenerator.escapeToDoubleQuotedJsString(string0);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertNotNull(string1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertEquals("\" 0;-> \"", string1);
  }

  @Test
  public void test06()  throws Throwable  {
      String string0 = "u>g'mzl\"I/d$ouP&";
      String string1 = CodeGenerator.escapeToDoubleQuotedJsString(string0);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertEquals("\"u>g'mzl\\\"I/d$ouP&\"", string1);
  }

  @Test
  public void test07()  throws Throwable  {
      String string0 = "\t\n\u000B\fQ?\r \u0085\u2029\u205F\u30000\u00A0+%\u202F";
      String string1 = CodeGenerator.escapeToDoubleQuotedJsString(string0);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertEquals("\"\\t\\n\\u000b\\u000cQ?\\r \\u0085\\u2029\\u205f\\u30000\\u00a0+%\\u202f\"", string1);
  }

  @Test
  public void test08()  throws Throwable  {
      String string0 = "Unexpected token type.QShould be LABEL_NAME.";
      double double0 = CodeGenerator.getSimpleNumber(string0);
      assertEquals(Double.NaN, double0, 0.01D);
  }

  @Test
  public void test09()  throws Throwable  {
      String string0 = "5";
      double double0 = CodeGenerator.getSimpleNumber(string0);
      assertEquals(5.0, double0, 0.01D);
  }

  @Test
  public void test10()  throws Throwable  {
      String string0 = " 0;-> ";
      boolean boolean0 = CodeGenerator.isSimpleNumber(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test11()  throws Throwable  {
      String string0 = "";
      boolean boolean0 = CodeGenerator.isSimpleNumber(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test12()  throws Throwable  {
      String string0 = "iL<P.[+S`\\#k\\";
      String string1 = CodeGenerator.identifierEscape(string0);
      assertSame(string1, string0);
      assertSame(string0, string1);
      assertNotNull(string1);
      assertEquals("iL<P.[+S`\\#k\\", string1);
      
      String string2 = CodeGenerator.regexpEscape(string1);
      assertNotSame(string1, string2);
      assertSame(string1, string0);
      assertSame(string0, string1);
      assertNotSame(string0, string2);
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertNotNull(string2);
      assertFalse(string1.equals((Object)string2));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("/iL<P.[+S`\\#k\\/", string2);
  }

  @Test
  public void test13()  throws Throwable  {
      String string0 = "\n\nd,pOecated\u0018\u0003 \u0001(\b:\u0005fase\u0012\u001C\n\u0014experimental_map_key\u0018\t \u0001(\t\u0012C\n\u0014uninterBreted_opton\u0018\u00E7\u0007 \u0003(\u000B2$.google.protobuf.UninteqpretedOOtion\"/\n\u0005CType\u0012\n\nMSTRING\u0010\u0000Y\b\n\u0004CRD\u0010\u0001\u0012\u0010\n\fTRING_IECE\u0010\u0002*\t\b\u0007\u0010\u0080\u0080\u0080\u0080\u0002\"]\n\u000BEnumOptins\u0012C\n\u0014uninterpreted_option\u0018\u00E7\u0007 \u0003(C2$.google.protobufUninterpretedOption*\t\b\u00E8\u0007\u0010\u0080\u0080\u0080\u0080\u0002b\n\u0010EnumValueOptions\u0012C\n\u0014unint;rpreted_option\u0018\u00E7\u0007 \u0003(\u000B2$.&oogleprotobuf.UninterpretedOption*\t\b\u00E8\u0007\u0010\u0080\u0080\u0080\u0080\u0002\"`\n\u000EServiceOptions\u0012C";
      String string1 = CodeGenerator.escapeToDoubleQuotedJsString(string0);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertEquals("\"\\n\\nd,pOecated\\u0018\\u0003 \\u0001(\\u0008:\\u0005fase\\u0012\\u001c\\n\\u0014experimental_map_key\\u0018\\t \\u0001(\\t\\u0012C\\n\\u0014uninterBreted_opton\\u0018\\u00e7\\u0007 \\u0003(\\u000b2$.google.protobuf.UninteqpretedOOtion\\\"/\\n\\u0005CType\\u0012\\n\\nMSTRING\\u0010\\000Y\\u0008\\n\\u0004CRD\\u0010\\u0001\\u0012\\u0010\\n\\u000cTRING_IECE\\u0010\\u0002*\\t\\u0008\\u0007\\u0010\\u0080\\u0080\\u0080\\u0080\\u0002\\\"]\\n\\u000bEnumOptins\\u0012C\\n\\u0014uninterpreted_option\\u0018\\u00e7\\u0007 \\u0003(C2$.google.protobufUninterpretedOption*\\t\\u0008\\u00e8\\u0007\\u0010\\u0080\\u0080\\u0080\\u0080\\u0002\\u007fb\\n\\u0010EnumValueOptions\\u0012C\\n\\u0014unint;rpreted_option\\u0018\\u00e7\\u0007 \\u0003(\\u000b2$.&oogleprotobuf.UninterpretedOption*\\t\\u0008\\u00e8\\u0007\\u0010\\u0080\\u0080\\u0080\\u0080\\u0002\\\"`\\n\\u000eServiceOptions\\u0012C\"", string1);
  }
}
