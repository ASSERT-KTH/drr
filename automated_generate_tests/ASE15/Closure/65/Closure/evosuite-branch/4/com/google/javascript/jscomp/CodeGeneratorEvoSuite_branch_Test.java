/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 21:56:59 GMT 2014
 */

package com.google.javascript.jscomp;

import static org.junit.Assert.*;
import org.junit.Test;
import com.google.javascript.jscomp.CodeGenerator;
import java.nio.charset.Charset;
import java.nio.charset.CharsetEncoder;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;

import org.junit.runner.RunWith;


public class CodeGeneratorEvoSuite_branch_Test  {

  @Test
  public void test00()  throws Throwable  {
      String string0 = "vq$igb>+f{ce</script";
      String string1 = CodeGenerator.escapeToDoubleQuotedJsString(string0);
      assertNotNull(string1);
      assertEquals("\"vq$igb>+f{ce<\\/script\"", string1);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      
      String string2 = CodeGenerator.identifierEscape(string1);
      assertNotNull(string2);
      assertEquals("\"vq$igb>+f{ce<\\/script\"", string2);
      assertNotSame(string2, string0);
      assertSame(string2, string1);
      assertNotSame(string1, string0);
      assertSame(string1, string2);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
  }

  @Test
  public void test01()  throws Throwable  {
      String string0 = "]]>*cPLUl_my";
      String string1 = CodeGenerator.regexpEscape(string0);
      assertNotNull(string1);
      assertEquals("/]]\\>*cPLUl_my/", string1);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
  }

  @Test
  public void test02()  throws Throwable  {
      String string0 = ">i->b";
      Charset charset0 = Charset.defaultCharset();
      assertNotNull(charset0);
      assertEquals(true, charset0.canEncode());
      assertEquals("UTF-8", charset0.name());
      assertEquals(true, charset0.isRegistered());
      assertEquals("UTF-8", charset0.displayName());
      assertEquals("UTF-8", charset0.toString());
      
      CharsetEncoder charsetEncoder0 = charset0.newEncoder();
      assertNotNull(charsetEncoder0);
      assertEquals(true, charset0.canEncode());
      assertEquals("UTF-8", charset0.name());
      assertEquals(true, charset0.isRegistered());
      assertEquals("UTF-8", charset0.displayName());
      assertEquals("UTF-8", charset0.toString());
      assertEquals(3.0F, charsetEncoder0.maxBytesPerChar(), 0.01F);
      assertEquals(1.1F, charsetEncoder0.averageBytesPerChar(), 0.01F);
      
      String string1 = CodeGenerator.regexpEscape(string0, charsetEncoder0);
      assertNotNull(string1);
      assertEquals("/>i->b/", string1);
      assertEquals(true, charset0.canEncode());
      assertEquals("UTF-8", charset0.name());
      assertEquals(true, charset0.isRegistered());
      assertEquals("UTF-8", charset0.displayName());
      assertEquals("UTF-8", charset0.toString());
      assertEquals(3.0F, charsetEncoder0.maxBytesPerChar(), 0.01F);
      assertEquals(1.1F, charsetEncoder0.averageBytesPerChar(), 0.01F);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
  }

  @Test
  public void test03()  throws Throwable  {
      String string0 = "a\\]>cSbmy";
      String string1 = CodeGenerator.regexpEscape(string0);
      assertNotNull(string1);
      assertEquals("/a\\]>cSbmy/", string1);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
  }

  @Test
  public void test04()  throws Throwable  {
      String string0 = "\u0014uninterpreted_option\u0018\u00E7\u0007 ^(\u000B2$.google.protobuf.UninterpretedOption*\t\b\u00E8\u0007\u0010\u0080\u0080\u0080\u0080\u0002\"_\n\rMethodOptionsC\n\u0014u{iterpreted_option\u0018\u00E7\u0007 \u0003(\u000B2$.gooDl9.pr[tobuf.UninterpretedOption*\t\b\u00E8\u0007\u0010\u0080\u0080\u0080e\u0002\"\u0085\u0002\n\u0013UninterpretedOptio\u0012;\n\u0004name\u0018\u0002 \u0003(\u000B2-.google.proobuf.UninWerpretedOption.NamePart\u0012\u0018\n\u0010<dentifier_value\u0018\u0003 \u0001(\ts\u001A\n\u0012positiveintvalue\u0018\u0004 \u0001(\u0004\u0012\u001A\n\u0012negative_int_value\u0018\u0005 \u0001(j\u0012\u0014\n\fdouble_value\u0018\u0006 \u0001(q\u0012\u0014\n\fstring_nalu\u0018\u0007 \u0001(\f\u001A3\n\bNamePart\u0012\u0011\n";
      String string1 = CodeGenerator.regexpEscape(string0);
      assertNotNull(string1);
      assertEquals("/\\u0014uninterpreted_option\\u0018\\u00e7\\u0007 ^(\\u000b2$.google.protobuf.UninterpretedOption*\\t\\u0008\\u00e8\\u0007\\u0010\\u0080\\u0080\\u0080\\u0080\\u0002\"_\\n\\rMethodOptionsC\\n\\u0014u{iterpreted_option\\u0018\\u00e7\\u0007 \\u0003(\\u000b2$.gooDl9.pr[tobuf.UninterpretedOption*\\t\\u0008\\u00e8\\u0007\\u0010\\u0080\\u0080\\u0080e\\u0002\"\\u0085\\u0002\\n\\u0013UninterpretedOptio\\u0012;\\n\\u0004name\\u0018\\u0002 \\u0003(\\u000b2-.google.proobuf.UninWerpretedOption.NamePart\\u0012\\u0018\\n\\u0010<dentifier_value\\u0018\\u0003 \\u0001(\\ts\\u001a\\n\\u0012positiveintvalue\\u0018\\u0004 \\u0001(\\u0004\\u0012\\u001a\\n\\u0012negative_int_value\\u0018\\u0005 \\u0001(j\\u0012\\u0014\\n\\u000cdouble_value\\u0018\\u0006 \\u0001(q\\u0012\\u0014\\n\\u000cstring_nalu\\u0018\\u0007 \\u0001(\\u000c\\u001a3\\n\\u0008NamePart\\u0012\\u0011\\n/", string1);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
  }

  @Test
  public void test05()  throws Throwable  {
      String string0 = "";
      double double0 = CodeGenerator.getSimpleNumber(string0);
      assertEquals(Double.NaN, double0, 0.01D);
  }

  @Test
  public void test06()  throws Throwable  {
      String string0 = "=Hi~YRt>$<t'";
      double double0 = CodeGenerator.getSimpleNumber(string0);
      assertEquals(Double.NaN, double0, 0.01D);
  }

  @Test
  public void test07()  throws Throwable  {
      String string0 = "vq$igb>+f{ce</script";
      String string1 = CodeGenerator.escapeToDoubleQuotedJsString(string0);
      assertNotNull(string1);
      assertEquals("\"vq$igb>+f{ce<\\/script\"", string1);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      
      double double0 = CodeGenerator.getSimpleNumber(string1);
      assertEquals(Double.NaN, double0, 0.01D);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
  }

  @Test
  public void test08()  throws Throwable  {
      String string0 = "2";
      double double0 = CodeGenerator.getSimpleNumber(string0);
      assertEquals(2.0, double0, 0.01D);
  }

  @Test
  public void test09()  throws Throwable  {
      String string0 = "=Hi~YRt>$<t'";
      String string1 = CodeGenerator.escapeToDoubleQuotedJsString(string0);
      assertNotNull(string1);
      assertEquals("\"=Hi~YRt>$<t'\"", string1);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
  }

  @Test
  public void test10()  throws Throwable  {
      String string0 = ")Xj{<!-->";
      String string1 = CodeGenerator.regexpEscape(string0);
      assertNotNull(string1);
      assertEquals("/)Xj{<\\!--\\>/", string1);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
  }

  @Test
  public void test11()  throws Throwable  {
      String string0 = "\u0014uninterpreted_option\u0018\u00E7\u0007 \u0003(\u000B2$.gogle.protobuf.Unin<!--reteOption*\t\b\u00E8\u0007\u0010\u0080\u0080\u0080\u0080\u0002\"_\n\rMethodOption\"C\n\u0014uniterpreted_option\u0018\u00E7\u0007 \u0003(\u000B2$.gooDle.protobuf.UninterpretedOption*\t\b\u00E8\u0007\u0010\u0080\u0080\u0080\u0002\"\u0085\u0002\n\u0013UninterpretedOption\u0012;\n\u0004name\u0018\u0002 \u0003(\u000B2-Egoogle.protobuf.UninWerpretedOption.NamePart\u0012\u0018\n\u0010identifier_value\u0018\u0003 \u0001(\t\u0012\u001A\n\u0012positiveint_value\u0018\u0004 \u0001(\u0004\u0012\u001A\n\u0012negative_int_value/\u0005 \u0001(j\u0012\u0014\n\fdouble_value\u0018\u0006 \u0001(\u0001\u0012\u0014\n\fstring_nalue\u0018\u0007 \u0001(\f\u001A3\n\bNamePart\u0012\u0011\n";
      String string1 = CodeGenerator.identifierEscape(string0);
      assertNotNull(string1);
      assertEquals("\\u0014uninterpreted_option\\u0018\\u00e7\\u0007 \\u0003(\\u000b2$.gogle.protobuf.Unin<!--reteOption*\\u0009\\u0008\\u00e8\\u0007\\u0010\\u0080\\u0080\\u0080\\u0080\\u0002\"_\\u000a\\u000dMethodOption\"C\\u000a\\u0014uniterpreted_option\\u0018\\u00e7\\u0007 \\u0003(\\u000b2$.gooDle.protobuf.UninterpretedOption*\\u0009\\u0008\\u00e8\\u0007\\u0010\\u0080\\u0080\\u0080\\u0002\"\\u0085\\u0002\\u000a\\u0013UninterpretedOption\\u0012;\\u000a\\u0004name\\u0018\\u0002 \\u0003(\\u000b2-Egoogle.protobuf.UninWerpretedOption.NamePart\\u0012\\u0018\\u000a\\u0010identifier_value\\u0018\\u0003 \\u0001(\\u0009\\u0012\\u001a\\u000a\\u0012positiveint_value\\u0018\\u0004 \\u0001(\\u0004\\u0012\\u001a\\u000a\\u0012negative_int_value/\\u0005 \\u0001(j\\u0012\\u0014\\u000a\\u000cdouble_value\\u0018\\u0006 \\u0001(\\u0001\\u0012\\u0014\\u000a\\u000cstring_nalue\\u0018\\u0007 \\u0001(\\u000c\\u001a3\\u000a\\u0008NamePart\\u0012\\u0011\\u000a", string1);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
  }
}
