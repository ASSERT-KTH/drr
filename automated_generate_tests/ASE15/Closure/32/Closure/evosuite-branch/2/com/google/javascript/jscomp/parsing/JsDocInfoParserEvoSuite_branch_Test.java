/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 21:12:23 GMT 2014
 */

package com.google.javascript.jscomp.parsing;

import static org.junit.Assert.*;
import org.junit.Test;
import com.google.javascript.jscomp.parsing.Config;
import com.google.javascript.jscomp.parsing.JsDocInfoParser;
import com.google.javascript.jscomp.parsing.JsDocTokenStream;
import com.google.javascript.rhino.JSDocInfo;
import com.google.javascript.rhino.Node;
import com.google.javascript.rhino.head.Context;
import com.google.javascript.rhino.head.ErrorReporter;
import com.google.javascript.rhino.head.ast.Comment;
import com.google.javascript.rhino.head.ast.DoLoop;
import com.google.javascript.rhino.head.ast.ElementGet;
import com.google.javascript.rhino.head.ast.ErrorCollector;
import com.google.javascript.rhino.head.ast.ObjectProperty;
import com.google.javascript.rhino.head.ast.SwitchStatement;
import com.google.javascript.rhino.head.ast.ThrowStatement;
import com.google.javascript.rhino.head.ast.TryStatement;
import com.google.javascript.rhino.head.ast.VariableInitializer;
import com.google.javascript.rhino.head.ast.XmlLiteral;
import com.google.javascript.rhino.head.tools.ToolErrorReporter;
import java.nio.charset.Charset;
import java.util.Locale;
import java.util.Set;
import java.util.TreeSet;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;

import org.junit.runner.RunWith;


public class JsDocInfoParserEvoSuite_branch_Test  {

  @Test
  public void test00()  throws Throwable  {
      int int0 = (-3427);
      String string0 = "() {\n\t[native code]\n}\n";
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream(string0, int0, int0);
      assertNotNull(jsDocTokenStream0);
      
      TryStatement tryStatement0 = new TryStatement();
      assertNotNull(tryStatement0);
      assertEquals(-1, tryStatement0.getAbsolutePosition());
      assertEquals(-1, tryStatement0.getPosition());
      assertEquals(-1, tryStatement0.getLineno());
      assertEquals(-1, tryStatement0.getFinallyPosition());
      assertEquals(false, tryStatement0.hasChildren());
      assertEquals(1, tryStatement0.getLength());
      assertEquals(0, tryStatement0.depth());
      assertEquals(81, tryStatement0.getType());
      assertEquals("81", tryStatement0.toString());
      assertNull(tryStatement0.getJsDoc());
      
      String string1 = jsDocTokenStream0.getRemainingJSDocLine();
      assertNotNull(string1);
      assertEquals("() {", string1);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      
      Comment comment0 = tryStatement0.getJsDocNode();
      assertNull(comment0);
      assertEquals(-1, tryStatement0.getAbsolutePosition());
      assertEquals(-1, tryStatement0.getPosition());
      assertEquals(-1, tryStatement0.getLineno());
      assertEquals(-1, tryStatement0.getFinallyPosition());
      assertEquals(false, tryStatement0.hasChildren());
      assertEquals(1, tryStatement0.getLength());
      assertEquals(0, tryStatement0.depth());
      assertEquals(81, tryStatement0.getType());
      assertEquals("81", tryStatement0.toString());
      assertNull(tryStatement0.getJsDoc());
      
      Node node0 = Node.newString(int0, string0, int0, int0);
      assertNotNull(node0);
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isAdd());
      assertNull(node0.getSourceFileName());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isDo());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isRegExp());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isScript());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isNot());
      assertEquals(-3427, node0.getType());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isVoid());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isWhile());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isLabel());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isString());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isTypeOf());
      assertNotSame(string0, string1);
      assertFalse(string0.equals((Object)string1));
      
      Locale locale0 = Locale.UK;
      assertNotNull(locale0);
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("GB", locale0.getCountry());
      assertEquals("GBR", locale0.getISO3Country());
      assertEquals("en_GB", locale0.toString());
      
      boolean boolean0 = node0.isBlock();
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isAdd());
      assertNull(node0.getSourceFileName());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isDo());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isRegExp());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isScript());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isNot());
      assertEquals(-3427, node0.getType());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isVoid());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isWhile());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isLabel());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isString());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isTypeOf());
      assertFalse(boolean0);
      assertNotSame(string0, string1);
      assertFalse(string0.equals((Object)string1));
      
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      assertNotNull(set0);
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("GB", locale0.getCountry());
      assertEquals("GBR", locale0.getISO3Country());
      assertEquals("en_GB", locale0.toString());
      assertEquals(0, set0.size());
      assertEquals(true, set0.isEmpty());
      
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT3;
      Config config0 = new Config(set0, set0, boolean0, config_LanguageMode0, boolean0);
      assertNotNull(config0);
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("GB", locale0.getCountry());
      assertEquals("GBR", locale0.getISO3Country());
      assertEquals("en_GB", locale0.toString());
      assertEquals(0, set0.size());
      assertEquals(true, set0.isEmpty());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isAdd());
      assertNull(node0.getSourceFileName());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isDo());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isRegExp());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isScript());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isNot());
      assertEquals(-3427, node0.getType());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isVoid());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isWhile());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isLabel());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isString());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isTypeOf());
      assertNotSame(string0, string1);
      assertFalse(string0.equals((Object)string1));
      
      ErrorReporter errorReporter0 = null;
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, comment0, node0, config0, errorReporter0);
      assertNotNull(jsDocInfoParser0);
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("GB", locale0.getCountry());
      assertEquals("GBR", locale0.getISO3Country());
      assertEquals("en_GB", locale0.toString());
      assertEquals(0, set0.size());
      assertEquals(true, set0.isEmpty());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isAdd());
      assertNull(node0.getSourceFileName());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isDo());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isRegExp());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isScript());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isNot());
      assertEquals(-3427, node0.getType());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isVoid());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isWhile());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isLabel());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isString());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isTypeOf());
      assertEquals(-1, tryStatement0.getAbsolutePosition());
      assertEquals(-1, tryStatement0.getPosition());
      assertEquals(-1, tryStatement0.getLineno());
      assertEquals(-1, tryStatement0.getFinallyPosition());
      assertEquals(false, tryStatement0.hasChildren());
      assertEquals(1, tryStatement0.getLength());
      assertEquals(0, tryStatement0.depth());
      assertEquals(81, tryStatement0.getType());
      assertEquals("81", tryStatement0.toString());
      assertNull(tryStatement0.getJsDoc());
      assertNotSame(string0, string1);
      assertFalse(string0.equals((Object)string1));
      
      // Undeclared exception!
      try {
        boolean boolean1 = jsDocInfoParser0.parse();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test01()  throws Throwable  {
      String string0 = "{<p:+zz-^";
      Node node0 = JsDocInfoParser.parseTypeString(string0);
      assertNull(node0);
  }

  @Test
  public void test02()  throws Throwable  {
      String string0 = "{<p+zWN}-u";
      Node node0 = JsDocInfoParser.parseTypeString(string0);
      assertNotNull(node0);
      assertEquals(false, node0.isAssign());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isWith());
      assertEquals(0, node0.getLineno());
      assertEquals(1, node0.getSourcePosition());
      assertEquals(1, node0.getChildCount());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isScript());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isThrow());
      assertEquals(1, node0.getCharno());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isBlock());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isString());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isLabel());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isInc());
      assertEquals(true, node0.hasOneChild());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isTypeOf());
      assertEquals(true, node0.hasChildren());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isNot());
      assertEquals(309, node0.getType());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isCatch());
  }

  @Test
  public void test03()  throws Throwable  {
      String string0 = "v5+1|K9A~|[[r/:";
      Node node0 = JsDocInfoParser.parseTypeString(string0);
      assertNull(node0);
  }

  @Test
  public void test04()  throws Throwable  {
      String string0 = "3\n";
      Node node0 = JsDocInfoParser.parseTypeString(string0);
      assertNotNull(node0);
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isFor());
      assertEquals(0, node0.getCharno());
      assertEquals(1, node0.getLength());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isScript());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isIf());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isGetterDef());
      assertEquals(0, node0.getSourcePosition());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.hasChildren());
      assertEquals(40, node0.getType());
      assertEquals(0, node0.getLineno());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isSetterDef());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isExprResult());
      assertEquals(true, node0.isString());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isInstanceOf());
  }

  @Test
  public void test05()  throws Throwable  {
      String string0 = "undefined";
      Node node0 = JsDocInfoParser.parseTypeString(string0);
      assertNotNull(node0);
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isQuotedString());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isContinue());
      assertEquals(0, node0.getLineno());
      assertEquals(false, node0.isScript());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isGetElem());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isEmpty());
      assertEquals(40, node0.getType());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isThrow());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isBreak());
      assertEquals(0, node0.getSourcePosition());
      assertEquals(false, node0.isVar());
      assertEquals(9, node0.getLength());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isArrayLit());
      assertEquals(0, node0.getCharno());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isSetterDef());
      assertEquals(true, node0.isString());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.hasChildren());
  }

  @Test
  public void test06()  throws Throwable  {
      String string0 = "{";
      Node node0 = JsDocInfoParser.parseTypeString(string0);
      assertNull(node0);
  }

  @Test
  public void test07()  throws Throwable  {
      String string0 = "*NsSV.#+!_J";
      Node node0 = JsDocInfoParser.parseTypeString(string0);
      assertNotNull(node0);
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isName());
      assertEquals(302, node0.getType());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isQuotedString());
      assertEquals(0, node0.getLineno());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isString());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(0, node0.getCharno());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isScript());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isEmpty());
      assertEquals(0, node0.getSourcePosition());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isAnd());
  }

  @Test
  public void test08()  throws Throwable  {
      String string0 = "(uf?W";
      Node node0 = JsDocInfoParser.parseTypeString(string0);
      assertNull(node0);
  }

  @Test
  public void test09()  throws Throwable  {
      String string0 = "?#ngf\\5U/jQ%8o";
      Node node0 = JsDocInfoParser.parseTypeString(string0);
      assertNotNull(node0);
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isTrue());
      assertEquals(14, node0.getSourcePosition());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isScript());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isLabel());
      assertNull(node0.getSourceFileName());
      assertEquals(14, node0.getCharno());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isOr());
      assertEquals(true, node0.hasChildren());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isString());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(0, node0.getLineno());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isDelProp());
      assertEquals(1, node0.getChildCount());
      assertEquals(304, node0.getType());
      assertEquals(false, node0.isGetterDef());
      assertEquals(true, node0.hasOneChild());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isSyntheticBlock());
  }

  @Test
  public void test10()  throws Throwable  {
      String string0 = "?,6O";
      Node node0 = JsDocInfoParser.parseTypeString(string0);
      assertNotNull(node0);
      assertEquals(false, node0.isTry());
      assertEquals(1, node0.getCharno());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isScript());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(1, node0.getSourcePosition());
      assertEquals(false, node0.isFalse());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isObjectLit());
      assertEquals(304, node0.getType());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isLabel());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isVoid());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isString());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isNew());
      assertEquals(0, node0.getLineno());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isRegExp());
  }

  @Test
  public void test11()  throws Throwable  {
      String string0 = "pog.<:+z`Eu";
      Node node0 = JsDocInfoParser.parseTypeString(string0);
      assertNotNull(node0);
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isBreak());
      assertEquals(0, node0.getSourcePosition());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isAssign());
      assertEquals(3, node0.getLength());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isSetterDef());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isDo());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(true, node0.isString());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isIn());
      assertEquals(40, node0.getType());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isGetProp());
      assertEquals(0, node0.getCharno());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isScript());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isGetterDef());
      assertNull(node0.getSourceFileName());
      assertEquals(0, node0.getLineno());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isNot());
  }

  @Test
  public void test12()  throws Throwable  {
      String string0 = "po.<pz`E+v9^u";
      Node node0 = JsDocInfoParser.parseTypeString(string0);
      assertNull(node0);
  }

  @Test
  public void test13()  throws Throwable  {
      String string0 = "?|#<3I0r!,MgPZO";
      Node node0 = JsDocInfoParser.parseTypeString(string0);
      assertNotNull(node0);
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isString());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isFor());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(0, node0.getLineno());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(3, node0.getChildCount());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isVar());
      assertEquals(301, node0.getType());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isAnd());
      assertEquals(true, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isBreak());
      assertEquals(true, node0.hasChildren());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isScript());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.hasOneChild());
      assertNull(node0.getSourceFileName());
      assertEquals(2, node0.getSourcePosition());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isExprResult());
      assertEquals(2, node0.getCharno());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isQuotedString());
  }

  @Test
  public void test14()  throws Throwable  {
      String string0 = "}";
      int int0 = (-561);
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream(string0, int0, int0);
      assertNotNull(jsDocTokenStream0);
      
      ThrowStatement throwStatement0 = new ThrowStatement(int0);
      assertNotNull(throwStatement0);
      assertEquals("50", throwStatement0.toString());
      assertEquals(1, throwStatement0.getLength());
      assertEquals(false, throwStatement0.hasChildren());
      assertEquals(0, throwStatement0.depth());
      assertEquals(-1, throwStatement0.getLineno());
      assertEquals(-561, throwStatement0.getPosition());
      assertEquals(50, throwStatement0.getType());
      assertEquals(-561, throwStatement0.getAbsolutePosition());
      assertNull(throwStatement0.getJsDoc());
      
      Comment comment0 = throwStatement0.getJsDocNode();
      assertNull(comment0);
      assertEquals("50", throwStatement0.toString());
      assertEquals(1, throwStatement0.getLength());
      assertEquals(false, throwStatement0.hasChildren());
      assertEquals(0, throwStatement0.depth());
      assertEquals(-1, throwStatement0.getLineno());
      assertEquals(-561, throwStatement0.getPosition());
      assertEquals(50, throwStatement0.getType());
      assertEquals(-561, throwStatement0.getAbsolutePosition());
      assertNull(throwStatement0.getJsDoc());
      
      Node node0 = Node.newString(string0, int0, int0);
      assertNotNull(node0);
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isScript());
      assertEquals(-1, node0.getLineno());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isNew());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isExprResult());
      assertEquals(40, node0.getType());
      assertEquals(false, node0.hasOneChild());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isComma());
      assertEquals(true, node0.isString());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isWith());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isArrayLit());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isSwitch());
      
      TreeSet<String> treeSet0 = new TreeSet<String>();
      assertNotNull(treeSet0);
      assertEquals("[]", treeSet0.toString());
      
      boolean boolean0 = true;
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5_STRICT;
      Config config0 = new Config(treeSet0, treeSet0, boolean0, config_LanguageMode0, boolean0);
      assertNotNull(config0);
      assertEquals("[]", treeSet0.toString());
      
      ErrorCollector errorCollector0 = new ErrorCollector();
      assertNotNull(errorCollector0);
      
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, comment0, node0, config0, errorCollector0);
      assertNotNull(jsDocInfoParser0);
      assertEquals("[]", treeSet0.toString());
      assertEquals("50", throwStatement0.toString());
      assertEquals(1, throwStatement0.getLength());
      assertEquals(false, throwStatement0.hasChildren());
      assertEquals(0, throwStatement0.depth());
      assertEquals(-1, throwStatement0.getLineno());
      assertEquals(-561, throwStatement0.getPosition());
      assertEquals(50, throwStatement0.getType());
      assertEquals(-561, throwStatement0.getAbsolutePosition());
      assertNull(throwStatement0.getJsDoc());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isScript());
      assertEquals(-1, node0.getLineno());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isNew());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isExprResult());
      assertEquals(40, node0.getType());
      assertEquals(false, node0.hasOneChild());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isComma());
      assertEquals(true, node0.isString());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isWith());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isArrayLit());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isSwitch());
      
      // Undeclared exception!
      try {
        boolean boolean1 = jsDocInfoParser0.parse();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test15()  throws Throwable  {
      String string0 = "[dsQeOD";
      Node node0 = JsDocInfoParser.parseTypeString(string0);
      assertNull(node0);
      
      int int0 = (-26);
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream(string0, int0, int0);
      assertNotNull(jsDocTokenStream0);
      
      XmlLiteral xmlLiteral0 = new XmlLiteral(int0);
      assertNotNull(xmlLiteral0);
      assertEquals(-26, xmlLiteral0.getPosition());
      assertEquals(0, xmlLiteral0.depth());
      assertEquals(-1, xmlLiteral0.getLineno());
      assertEquals("145", xmlLiteral0.toString());
      assertEquals(145, xmlLiteral0.getType());
      assertNull(xmlLiteral0.getJsDoc());
      assertEquals(false, xmlLiteral0.hasChildren());
      assertEquals(-26, xmlLiteral0.getAbsolutePosition());
      assertEquals(1, xmlLiteral0.getLength());
      
      Comment comment0 = xmlLiteral0.getJsDocNode();
      assertNull(comment0);
      assertEquals(-26, xmlLiteral0.getPosition());
      assertEquals(0, xmlLiteral0.depth());
      assertEquals(-1, xmlLiteral0.getLineno());
      assertEquals("145", xmlLiteral0.toString());
      assertEquals(145, xmlLiteral0.getType());
      assertNull(xmlLiteral0.getJsDoc());
      assertEquals(false, xmlLiteral0.hasChildren());
      assertEquals(-26, xmlLiteral0.getAbsolutePosition());
      assertEquals(1, xmlLiteral0.getLength());
      
      Locale locale0 = Locale.forLanguageTag(string0);
      assertNotNull(locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      assertNotNull(set0);
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals(true, set0.isEmpty());
      assertEquals(0, set0.size());
      
      boolean boolean0 = true;
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5_STRICT;
      Config config0 = new Config(set0, set0, boolean0, config_LanguageMode0, boolean0);
      assertNotNull(config0);
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals(true, set0.isEmpty());
      assertEquals(0, set0.size());
      
      ToolErrorReporter toolErrorReporter0 = new ToolErrorReporter(boolean0);
      assertNotNull(toolErrorReporter0);
      assertEquals(false, toolErrorReporter0.hasReportedError());
      assertEquals(true, toolErrorReporter0.isReportingWarnings());
      
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, comment0, node0, config0, toolErrorReporter0);
      assertNotNull(jsDocInfoParser0);
      assertEquals(false, toolErrorReporter0.hasReportedError());
      assertEquals(true, toolErrorReporter0.isReportingWarnings());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals(-26, xmlLiteral0.getPosition());
      assertEquals(0, xmlLiteral0.depth());
      assertEquals(-1, xmlLiteral0.getLineno());
      assertEquals("145", xmlLiteral0.toString());
      assertEquals(145, xmlLiteral0.getType());
      assertNull(xmlLiteral0.getJsDoc());
      assertEquals(false, xmlLiteral0.hasChildren());
      assertEquals(-26, xmlLiteral0.getAbsolutePosition());
      assertEquals(1, xmlLiteral0.getLength());
      assertEquals(true, set0.isEmpty());
      assertEquals(0, set0.size());
      
      boolean boolean1 = jsDocInfoParser0.parse();
      assertEquals(false, toolErrorReporter0.hasReportedError());
      assertEquals(true, toolErrorReporter0.isReportingWarnings());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals(-26, xmlLiteral0.getPosition());
      assertEquals(0, xmlLiteral0.depth());
      assertEquals(-1, xmlLiteral0.getLineno());
      assertEquals("145", xmlLiteral0.toString());
      assertEquals(145, xmlLiteral0.getType());
      assertNull(xmlLiteral0.getJsDoc());
      assertEquals(false, xmlLiteral0.hasChildren());
      assertEquals(-26, xmlLiteral0.getAbsolutePosition());
      assertEquals(1, xmlLiteral0.getLength());
      assertEquals(true, set0.isEmpty());
      assertEquals(0, set0.size());
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean0 == boolean1);
  }

  @Test
  public void test16()  throws Throwable  {
      String string0 = "!a";
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream(string0);
      assertNotNull(jsDocTokenStream0);
      
      int int0 = (-503);
      VariableInitializer variableInitializer0 = new VariableInitializer(int0);
      assertNotNull(variableInitializer0);
      assertEquals(true, variableInitializer0.isDestructuring());
      assertEquals(false, variableInitializer0.hasChildren());
      assertEquals(0, variableInitializer0.depth());
      assertEquals(-503, variableInitializer0.getAbsolutePosition());
      assertEquals(1, variableInitializer0.getLength());
      assertEquals(122, variableInitializer0.getType());
      assertNull(variableInitializer0.getJsDoc());
      assertEquals(-503, variableInitializer0.getPosition());
      assertEquals(-1, variableInitializer0.getLineno());
      assertEquals("122", variableInitializer0.toString());
      
      Comment comment0 = variableInitializer0.getJsDocNode();
      assertNull(comment0);
      assertEquals(true, variableInitializer0.isDestructuring());
      assertEquals(false, variableInitializer0.hasChildren());
      assertEquals(0, variableInitializer0.depth());
      assertEquals(-503, variableInitializer0.getAbsolutePosition());
      assertEquals(1, variableInitializer0.getLength());
      assertEquals(122, variableInitializer0.getType());
      assertNull(variableInitializer0.getJsDoc());
      assertEquals(-503, variableInitializer0.getPosition());
      assertEquals(-1, variableInitializer0.getLineno());
      assertEquals("122", variableInitializer0.toString());
      
      Node node0 = Node.newNumber((double) int0, int0, int0);
      assertNotNull(node0);
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isNE());
      assertEquals(true, node0.isNumber());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(false, node0.isLabelName());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isNew());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isEmpty());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isScript());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isOr());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isString());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isObjectLit());
      assertEquals(39, node0.getType());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isRegExp());
      
      TreeSet<String> treeSet0 = new TreeSet<String>();
      assertNotNull(treeSet0);
      assertEquals("[]", treeSet0.toString());
      
      boolean boolean0 = true;
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5_STRICT;
      Config config0 = new Config(treeSet0, treeSet0, boolean0, config_LanguageMode0, boolean0);
      assertNotNull(config0);
      assertEquals("[]", treeSet0.toString());
      
      ToolErrorReporter toolErrorReporter0 = new ToolErrorReporter(boolean0);
      assertNotNull(toolErrorReporter0);
      assertEquals(true, toolErrorReporter0.isReportingWarnings());
      assertEquals(false, toolErrorReporter0.hasReportedError());
      
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, comment0, node0, config0, toolErrorReporter0);
      assertNotNull(jsDocInfoParser0);
      assertEquals(true, variableInitializer0.isDestructuring());
      assertEquals(false, variableInitializer0.hasChildren());
      assertEquals(0, variableInitializer0.depth());
      assertEquals(-503, variableInitializer0.getAbsolutePosition());
      assertEquals(1, variableInitializer0.getLength());
      assertEquals(122, variableInitializer0.getType());
      assertNull(variableInitializer0.getJsDoc());
      assertEquals(-503, variableInitializer0.getPosition());
      assertEquals(-1, variableInitializer0.getLineno());
      assertEquals("122", variableInitializer0.toString());
      assertEquals(true, toolErrorReporter0.isReportingWarnings());
      assertEquals(false, toolErrorReporter0.hasReportedError());
      assertEquals("[]", treeSet0.toString());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isNE());
      assertEquals(true, node0.isNumber());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(false, node0.isLabelName());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isNew());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isEmpty());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isScript());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isOr());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isString());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isObjectLit());
      assertEquals(39, node0.getType());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isRegExp());
      
      boolean boolean1 = jsDocInfoParser0.parse();
      assertEquals(true, variableInitializer0.isDestructuring());
      assertEquals(false, variableInitializer0.hasChildren());
      assertEquals(0, variableInitializer0.depth());
      assertEquals(-503, variableInitializer0.getAbsolutePosition());
      assertEquals(1, variableInitializer0.getLength());
      assertEquals(122, variableInitializer0.getType());
      assertNull(variableInitializer0.getJsDoc());
      assertEquals(-503, variableInitializer0.getPosition());
      assertEquals(-1, variableInitializer0.getLineno());
      assertEquals("122", variableInitializer0.toString());
      assertEquals(true, toolErrorReporter0.isReportingWarnings());
      assertEquals(false, toolErrorReporter0.hasReportedError());
      assertEquals("[]", treeSet0.toString());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isNE());
      assertEquals(true, node0.isNumber());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(false, node0.isLabelName());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isNew());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isEmpty());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isScript());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isOr());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isString());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isObjectLit());
      assertEquals(39, node0.getType());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isRegExp());
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean0 == boolean1);
  }

  @Test
  public void test17() {}
//   @Test
//   public void test17()  throws Throwable  {
//       String string0 = "@";
//       int int0 = 0;
//       JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream(string0, int0);
//       //  // Unstable assertion: assertNotNull(jsDocTokenStream0);
//       
//       Comment comment0 = null;
//       Node node0 = null;
//       Context context0 = Context.getCurrentContext();
//       //  // Unstable assertion: assertNotNull(context0);
//       //  // Unstable assertion: assertEquals(0, context0.getOptimizationLevel());
//       //  // Unstable assertion: assertEquals(0, context0.getInstructionObserverThreshold());
//       //  // Unstable assertion: assertEquals(false, context0.isGeneratingSource());
//       //  // Unstable assertion: assertEquals(true, context0.isGeneratingDebug());
//       //  // Unstable assertion: assertEquals(true, context0.isSealed());
//       //  // Unstable assertion: assertEquals(2147483647, context0.getMaximumInterpreterStackDepth());
//       //  // Unstable assertion: assertEquals(0, context0.getLanguageVersion());
//       //  // Unstable assertion: assertEquals(true, context0.isGeneratingDebugChanged());
//       //  // Unstable assertion: assertTrue(context0.generateObserverCount);
//       
//       Locale locale0 = Locale.KOREAN;
//       //  // Unstable assertion: assertNotNull(locale0);
//       //  // Unstable assertion: assertEquals("ko", locale0.toString());
//       //  // Unstable assertion: assertEquals("", locale0.getVariant());
//       //  // Unstable assertion: assertEquals("", locale0.getCountry());
//       //  // Unstable assertion: assertEquals("", locale0.getISO3Country());
//       //  // Unstable assertion: assertEquals("ko", locale0.getLanguage());
//       //  // Unstable assertion: assertEquals("kor", locale0.getISO3Language());
//       
//       Set<String> set0 = locale0.getUnicodeLocaleAttributes();
//       //  // Unstable assertion: assertNotNull(set0);
//       //  // Unstable assertion: assertEquals(true, set0.isEmpty());
//       //  // Unstable assertion: assertEquals(0, set0.size());
//       //  // Unstable assertion: assertEquals("ko", locale0.toString());
//       //  // Unstable assertion: assertEquals("", locale0.getVariant());
//       //  // Unstable assertion: assertEquals("", locale0.getCountry());
//       //  // Unstable assertion: assertEquals("", locale0.getISO3Country());
//       //  // Unstable assertion: assertEquals("ko", locale0.getLanguage());
//       //  // Unstable assertion: assertEquals("kor", locale0.getISO3Language());
//       
//       TreeSet<String> treeSet0 = new TreeSet<String>();
//       //  // Unstable assertion: assertNotNull(treeSet0);
//       //  // Unstable assertion: assertEquals("[]", treeSet0.toString());
//       
//       boolean boolean0 = false;
//       Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5_STRICT;
//       Config config0 = new Config(set0, treeSet0, boolean0, config_LanguageMode0, context0.generateObserverCount);
//       //  // Unstable assertion: assertNotNull(config0);
//       //  // Unstable assertion: assertEquals(true, set0.isEmpty());
//       //  // Unstable assertion: assertEquals(0, set0.size());
//       //  // Unstable assertion: assertEquals("ko", locale0.toString());
//       //  // Unstable assertion: assertEquals("", locale0.getVariant());
//       //  // Unstable assertion: assertEquals("", locale0.getCountry());
//       //  // Unstable assertion: assertEquals("", locale0.getISO3Country());
//       //  // Unstable assertion: assertEquals("ko", locale0.getLanguage());
//       //  // Unstable assertion: assertEquals("kor", locale0.getISO3Language());
//       //  // Unstable assertion: assertEquals("[]", treeSet0.toString());
//       //  // Unstable assertion: assertEquals(0, context0.getOptimizationLevel());
//       //  // Unstable assertion: assertEquals(0, context0.getInstructionObserverThreshold());
//       //  // Unstable assertion: assertEquals(false, context0.isGeneratingSource());
//       //  // Unstable assertion: assertEquals(true, context0.isGeneratingDebug());
//       //  // Unstable assertion: assertEquals(true, context0.isSealed());
//       //  // Unstable assertion: assertEquals(2147483647, context0.getMaximumInterpreterStackDepth());
//       //  // Unstable assertion: assertEquals(0, context0.getLanguageVersion());
//       //  // Unstable assertion: assertEquals(true, context0.isGeneratingDebugChanged());
//       //  // Unstable assertion: assertTrue(context0.generateObserverCount);
//       
//       ToolErrorReporter toolErrorReporter0 = new ToolErrorReporter(context0.generateObserverCount);
//       //  // Unstable assertion: assertNotNull(toolErrorReporter0);
//       //  // Unstable assertion: assertEquals(true, toolErrorReporter0.isReportingWarnings());
//       //  // Unstable assertion: assertEquals(false, toolErrorReporter0.hasReportedError());
//       //  // Unstable assertion: assertEquals(0, context0.getOptimizationLevel());
//       //  // Unstable assertion: assertEquals(0, context0.getInstructionObserverThreshold());
//       //  // Unstable assertion: assertEquals(false, context0.isGeneratingSource());
//       //  // Unstable assertion: assertEquals(true, context0.isGeneratingDebug());
//       //  // Unstable assertion: assertEquals(true, context0.isSealed());
//       //  // Unstable assertion: assertEquals(2147483647, context0.getMaximumInterpreterStackDepth());
//       //  // Unstable assertion: assertEquals(0, context0.getLanguageVersion());
//       //  // Unstable assertion: assertEquals(true, context0.isGeneratingDebugChanged());
//       //  // Unstable assertion: assertTrue(context0.generateObserverCount);
//       
//       JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, comment0, node0, config0, toolErrorReporter0);
//       //  // Unstable assertion: assertNotNull(jsDocInfoParser0);
//       //  // Unstable assertion: assertEquals(true, toolErrorReporter0.isReportingWarnings());
//       //  // Unstable assertion: assertEquals(false, toolErrorReporter0.hasReportedError());
//       //  // Unstable assertion: assertEquals(true, set0.isEmpty());
//       //  // Unstable assertion: assertEquals(0, set0.size());
//       //  // Unstable assertion: assertEquals("ko", locale0.toString());
//       //  // Unstable assertion: assertEquals("", locale0.getVariant());
//       //  // Unstable assertion: assertEquals("", locale0.getCountry());
//       //  // Unstable assertion: assertEquals("", locale0.getISO3Country());
//       //  // Unstable assertion: assertEquals("ko", locale0.getLanguage());
//       //  // Unstable assertion: assertEquals("kor", locale0.getISO3Language());
//       //  // Unstable assertion: assertEquals("[]", treeSet0.toString());
//       //  // Unstable assertion: assertEquals(0, context0.getOptimizationLevel());
//       //  // Unstable assertion: assertEquals(0, context0.getInstructionObserverThreshold());
//       //  // Unstable assertion: assertEquals(false, context0.isGeneratingSource());
//       //  // Unstable assertion: assertEquals(true, context0.isGeneratingDebug());
//       //  // Unstable assertion: assertEquals(true, context0.isSealed());
//       //  // Unstable assertion: assertEquals(2147483647, context0.getMaximumInterpreterStackDepth());
//       //  // Unstable assertion: assertEquals(0, context0.getLanguageVersion());
//       //  // Unstable assertion: assertEquals(true, context0.isGeneratingDebugChanged());
//       //  // Unstable assertion: assertTrue(context0.generateObserverCount);
//       
//       boolean boolean1 = jsDocInfoParser0.parse();
//       //  // Unstable assertion: assertEquals(true, toolErrorReporter0.isReportingWarnings());
//       //  // Unstable assertion: assertEquals(false, toolErrorReporter0.hasReportedError());
//       //  // Unstable assertion: assertEquals(true, set0.isEmpty());
//       //  // Unstable assertion: assertEquals(0, set0.size());
//       //  // Unstable assertion: assertEquals("ko", locale0.toString());
//       //  // Unstable assertion: assertEquals("", locale0.getVariant());
//       //  // Unstable assertion: assertEquals("", locale0.getCountry());
//       //  // Unstable assertion: assertEquals("", locale0.getISO3Country());
//       //  // Unstable assertion: assertEquals("ko", locale0.getLanguage());
//       //  // Unstable assertion: assertEquals("kor", locale0.getISO3Language());
//       //  // Unstable assertion: assertEquals("[]", treeSet0.toString());
//       //  // Unstable assertion: assertEquals(0, context0.getOptimizationLevel());
//       //  // Unstable assertion: assertEquals(0, context0.getInstructionObserverThreshold());
//       //  // Unstable assertion: assertEquals(false, context0.isGeneratingSource());
//       //  // Unstable assertion: assertEquals(true, context0.isGeneratingDebug());
//       //  // Unstable assertion: assertEquals(true, context0.isSealed());
//       //  // Unstable assertion: assertEquals(2147483647, context0.getMaximumInterpreterStackDepth());
//       //  // Unstable assertion: assertEquals(0, context0.getLanguageVersion());
//       //  // Unstable assertion: assertEquals(true, context0.isGeneratingDebugChanged());
//       //  // Unstable assertion: assertFalse(boolean1);
//       //  // Unstable assertion: assertTrue(boolean0 == boolean1);
//       //  // Unstable assertion: assertTrue(boolean1 == boolean0);
//       //  // Unstable assertion: assertTrue(context0.generateObserverCount);
//   }

  @Test
  public void test18()  throws Throwable  {
      int int0 = (-3427);
      String string0 = "() {\n\t[native code]\n}\n";
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream(string0, int0, int0);
      assertNotNull(jsDocTokenStream0);
      
      TryStatement tryStatement0 = new TryStatement();
      assertNotNull(tryStatement0);
      assertEquals(-1, tryStatement0.getFinallyPosition());
      assertEquals(-1, tryStatement0.getLineno());
      assertEquals(false, tryStatement0.hasChildren());
      assertEquals(1, tryStatement0.getLength());
      assertEquals("81", tryStatement0.toString());
      assertEquals(0, tryStatement0.depth());
      assertNull(tryStatement0.getJsDoc());
      assertEquals(-1, tryStatement0.getAbsolutePosition());
      assertEquals(-1, tryStatement0.getPosition());
      assertEquals(81, tryStatement0.getType());
      
      Comment comment0 = tryStatement0.getJsDocNode();
      assertNull(comment0);
      assertEquals(-1, tryStatement0.getFinallyPosition());
      assertEquals(-1, tryStatement0.getLineno());
      assertEquals(false, tryStatement0.hasChildren());
      assertEquals(1, tryStatement0.getLength());
      assertEquals("81", tryStatement0.toString());
      assertEquals(0, tryStatement0.depth());
      assertNull(tryStatement0.getJsDoc());
      assertEquals(-1, tryStatement0.getAbsolutePosition());
      assertEquals(-1, tryStatement0.getPosition());
      assertEquals(81, tryStatement0.getType());
      
      Node node0 = Node.newString(int0, string0, int0, int0);
      assertNotNull(node0);
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isNew());
      assertEquals(0, node0.getLength());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isScript());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isCase());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isString());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isFalse());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isDebugger());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isGetterDef());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isCatch());
      assertEquals(-3427, node0.getType());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isQualifiedName());
      
      Locale locale0 = Locale.UK;
      assertNotNull(locale0);
      assertEquals("GBR", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en_GB", locale0.toString());
      assertEquals("GB", locale0.getCountry());
      assertEquals("en", locale0.getLanguage());
      
      boolean boolean0 = node0.isBlock();
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isNew());
      assertEquals(0, node0.getLength());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isScript());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isCase());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isString());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isFalse());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isDebugger());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isGetterDef());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isCatch());
      assertEquals(-3427, node0.getType());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isQualifiedName());
      assertFalse(boolean0);
      
      node0.setSourceFileForTesting(string0);
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isNew());
      assertEquals(0, node0.getLength());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isScript());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isCase());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isString());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isFalse());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isDo());
      assertEquals("() {\n\t[native code]\n}\n", node0.getSourceFileName());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isDebugger());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isCatch());
      assertEquals(-3427, node0.getType());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isQualifiedName());
      
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      assertNotNull(set0);
      assertEquals(0, set0.size());
      assertEquals(true, set0.isEmpty());
      assertEquals("GBR", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en_GB", locale0.toString());
      assertEquals("GB", locale0.getCountry());
      assertEquals("en", locale0.getLanguage());
      
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT3;
      Config config0 = new Config(set0, set0, boolean0, config_LanguageMode0, boolean0);
      assertNotNull(config0);
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isNew());
      assertEquals(0, node0.getLength());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isScript());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isCase());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isString());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isFalse());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isDo());
      assertEquals("() {\n\t[native code]\n}\n", node0.getSourceFileName());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isDebugger());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isCatch());
      assertEquals(-3427, node0.getType());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(0, set0.size());
      assertEquals(true, set0.isEmpty());
      assertEquals("GBR", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en_GB", locale0.toString());
      assertEquals("GB", locale0.getCountry());
      assertEquals("en", locale0.getLanguage());
      
      ErrorReporter errorReporter0 = null;
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, comment0, node0, config0, errorReporter0);
      assertNotNull(jsDocInfoParser0);
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isNew());
      assertEquals(0, node0.getLength());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isScript());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isCase());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isString());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isFalse());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isDo());
      assertEquals("() {\n\t[native code]\n}\n", node0.getSourceFileName());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isDebugger());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isCatch());
      assertEquals(-3427, node0.getType());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(0, set0.size());
      assertEquals(true, set0.isEmpty());
      assertEquals("GBR", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en_GB", locale0.toString());
      assertEquals("GB", locale0.getCountry());
      assertEquals("en", locale0.getLanguage());
      assertEquals(-1, tryStatement0.getFinallyPosition());
      assertEquals(-1, tryStatement0.getLineno());
      assertEquals(false, tryStatement0.hasChildren());
      assertEquals(1, tryStatement0.getLength());
      assertEquals("81", tryStatement0.toString());
      assertEquals(0, tryStatement0.depth());
      assertNull(tryStatement0.getJsDoc());
      assertEquals(-1, tryStatement0.getAbsolutePosition());
      assertEquals(-1, tryStatement0.getPosition());
      assertEquals(81, tryStatement0.getType());
      
      // Undeclared exception!
      try {
        boolean boolean1 = jsDocInfoParser0.parse();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test19()  throws Throwable  {
      String string0 = "%89\"";
      int int0 = (-1237);
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream(string0, int0);
      assertNotNull(jsDocTokenStream0);
      
      SwitchStatement switchStatement0 = new SwitchStatement(int0, int0);
      assertNotNull(switchStatement0);
      assertEquals("114", switchStatement0.toString());
      assertEquals(-1, switchStatement0.getLp());
      assertEquals(0, switchStatement0.depth());
      assertNull(switchStatement0.getJsDoc());
      assertEquals(114, switchStatement0.getType());
      assertEquals(-1237, switchStatement0.getAbsolutePosition());
      assertEquals(-1237, switchStatement0.getLength());
      assertEquals(false, switchStatement0.hasChildren());
      assertEquals(-1237, switchStatement0.getPosition());
      assertEquals(-1, switchStatement0.getLineno());
      assertEquals(-1, switchStatement0.getRp());
      
      Comment comment0 = switchStatement0.getJsDocNode();
      assertNull(comment0);
      assertEquals("114", switchStatement0.toString());
      assertEquals(-1, switchStatement0.getLp());
      assertEquals(0, switchStatement0.depth());
      assertNull(switchStatement0.getJsDoc());
      assertEquals(114, switchStatement0.getType());
      assertEquals(-1237, switchStatement0.getAbsolutePosition());
      assertEquals(-1237, switchStatement0.getLength());
      assertEquals(false, switchStatement0.hasChildren());
      assertEquals(-1237, switchStatement0.getPosition());
      assertEquals(-1, switchStatement0.getLineno());
      assertEquals(-1, switchStatement0.getRp());
      
      Node node0 = Node.newString(string0, int0, int0);
      assertNotNull(node0);
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isVoid());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isTypeOf());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isScript());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isNew());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isInc());
      assertEquals(40, node0.getType());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isArrayLit());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isTry());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isCatch());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isCall());
      assertEquals(true, node0.isString());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isComma());
      
      Charset charset0 = Charset.defaultCharset();
      assertNotNull(charset0);
      assertEquals("UTF-8", charset0.name());
      assertEquals(true, charset0.canEncode());
      assertEquals("UTF-8", charset0.toString());
      assertEquals(true, charset0.isRegistered());
      assertEquals("UTF-8", charset0.displayName());
      
      Set<String> set0 = charset0.aliases();
      assertNotNull(set0);
      assertEquals("UTF-8", charset0.name());
      assertEquals(true, charset0.canEncode());
      assertEquals("UTF-8", charset0.toString());
      assertEquals(true, charset0.isRegistered());
      assertEquals("UTF-8", charset0.displayName());
      assertEquals(false, set0.isEmpty());
      assertEquals(2, set0.size());
      
      boolean boolean0 = false;
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5_STRICT;
      Config config0 = new Config(set0, set0, boolean0, config_LanguageMode0, boolean0);
      assertNotNull(config0);
      assertEquals("UTF-8", charset0.name());
      assertEquals(true, charset0.canEncode());
      assertEquals("UTF-8", charset0.toString());
      assertEquals(true, charset0.isRegistered());
      assertEquals("UTF-8", charset0.displayName());
      assertEquals(false, set0.isEmpty());
      assertEquals(2, set0.size());
      
      ToolErrorReporter toolErrorReporter0 = new ToolErrorReporter(boolean0);
      assertNotNull(toolErrorReporter0);
      assertEquals(false, toolErrorReporter0.hasReportedError());
      assertEquals(false, toolErrorReporter0.isReportingWarnings());
      
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, comment0, node0, config0, toolErrorReporter0);
      assertNotNull(jsDocInfoParser0);
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isVoid());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isTypeOf());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isScript());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isNew());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isInc());
      assertEquals(40, node0.getType());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isArrayLit());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isTry());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isCatch());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isCall());
      assertEquals(true, node0.isString());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isComma());
      assertEquals(false, toolErrorReporter0.hasReportedError());
      assertEquals(false, toolErrorReporter0.isReportingWarnings());
      assertEquals("UTF-8", charset0.name());
      assertEquals(true, charset0.canEncode());
      assertEquals("UTF-8", charset0.toString());
      assertEquals(true, charset0.isRegistered());
      assertEquals("UTF-8", charset0.displayName());
      assertEquals(false, set0.isEmpty());
      assertEquals(2, set0.size());
      assertEquals("114", switchStatement0.toString());
      assertEquals(-1, switchStatement0.getLp());
      assertEquals(0, switchStatement0.depth());
      assertNull(switchStatement0.getJsDoc());
      assertEquals(114, switchStatement0.getType());
      assertEquals(-1237, switchStatement0.getAbsolutePosition());
      assertEquals(-1237, switchStatement0.getLength());
      assertEquals(false, switchStatement0.hasChildren());
      assertEquals(-1237, switchStatement0.getPosition());
      assertEquals(-1, switchStatement0.getLineno());
      assertEquals(-1, switchStatement0.getRp());
      
      JSDocInfo jSDocInfo0 = jsDocInfoParser0.getFileOverviewJSDocInfo();
      assertNull(jSDocInfo0);
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isVoid());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isTypeOf());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isScript());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isNew());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isInc());
      assertEquals(40, node0.getType());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isArrayLit());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isTry());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isCatch());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isCall());
      assertEquals(true, node0.isString());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isComma());
      assertEquals(false, toolErrorReporter0.hasReportedError());
      assertEquals(false, toolErrorReporter0.isReportingWarnings());
      assertEquals("UTF-8", charset0.name());
      assertEquals(true, charset0.canEncode());
      assertEquals("UTF-8", charset0.toString());
      assertEquals(true, charset0.isRegistered());
      assertEquals("UTF-8", charset0.displayName());
      assertEquals(false, set0.isEmpty());
      assertEquals(2, set0.size());
      assertEquals("114", switchStatement0.toString());
      assertEquals(-1, switchStatement0.getLp());
      assertEquals(0, switchStatement0.depth());
      assertNull(switchStatement0.getJsDoc());
      assertEquals(114, switchStatement0.getType());
      assertEquals(-1237, switchStatement0.getAbsolutePosition());
      assertEquals(-1237, switchStatement0.getLength());
      assertEquals(false, switchStatement0.hasChildren());
      assertEquals(-1237, switchStatement0.getPosition());
      assertEquals(-1, switchStatement0.getLineno());
      assertEquals(-1, switchStatement0.getRp());
      
      jsDocInfoParser0.setFileOverviewJSDocInfo(jSDocInfo0);
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isVoid());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isTypeOf());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isScript());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isNew());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isInc());
      assertEquals(40, node0.getType());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isArrayLit());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isTry());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isCatch());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isCall());
      assertEquals(true, node0.isString());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isComma());
      assertEquals(false, toolErrorReporter0.hasReportedError());
      assertEquals(false, toolErrorReporter0.isReportingWarnings());
      assertEquals("UTF-8", charset0.name());
      assertEquals(true, charset0.canEncode());
      assertEquals("UTF-8", charset0.toString());
      assertEquals(true, charset0.isRegistered());
      assertEquals("UTF-8", charset0.displayName());
      assertEquals(false, set0.isEmpty());
      assertEquals(2, set0.size());
      assertEquals("114", switchStatement0.toString());
      assertEquals(-1, switchStatement0.getLp());
      assertEquals(0, switchStatement0.depth());
      assertNull(switchStatement0.getJsDoc());
      assertEquals(114, switchStatement0.getType());
      assertEquals(-1237, switchStatement0.getAbsolutePosition());
      assertEquals(-1237, switchStatement0.getLength());
      assertEquals(false, switchStatement0.hasChildren());
      assertEquals(-1237, switchStatement0.getPosition());
      assertEquals(-1, switchStatement0.getLineno());
      assertEquals(-1, switchStatement0.getRp());
  }

  @Test
  public void test20()  throws Throwable  {
      String string0 = "(C)Ljava/lang/String;";
      Node node0 = JsDocInfoParser.parseTypeString(string0);
      assertNotNull(node0);
      assertEquals(false, node0.isAnd());
      assertEquals(301, node0.getType());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isString());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isBlock());
      assertEquals(true, node0.hasChildren());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isObjectLit());
      assertEquals(1, node0.getSourcePosition());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isNull());
      assertEquals(true, node0.hasOneChild());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isInstanceOf());
      assertNull(node0.getSourceFileName());
      assertEquals(1, node0.getCharno());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isDelProp());
      assertEquals(0, node0.getLineno());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isParamList());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isScript());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isCall());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(1, node0.getChildCount());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isVoid());
  }

  @Test
  public void test21()  throws Throwable  {
      String string0 = "!>P<-;_9rD6";
      Node node0 = JsDocInfoParser.parseTypeString(string0);
      assertNull(node0);
  }

  @Test
  public void test22()  throws Throwable  {
      String string0 = "null value";
      Node node0 = JsDocInfoParser.parseTypeString(string0);
      assertNotNull(node0);
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(0, node0.getSourcePosition());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isCall());
      assertEquals(4, node0.getLength());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isDebugger());
      assertEquals(0, node0.getLineno());
      assertEquals(false, node0.isCatch());
      assertEquals(true, node0.isString());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isLabel());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isThrow());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isExprResult());
      assertEquals(40, node0.getType());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isScript());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isWith());
      assertEquals(0, node0.getCharno());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isThis());
  }

  @Test
  public void test23()  throws Throwable  {
      String string0 = "pAgFu=VI9";
      int int0 = 8188;
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream(string0, int0);
      assertNotNull(jsDocTokenStream0);
      
      ElementGet elementGet0 = new ElementGet();
      assertNotNull(elementGet0);
      assertEquals(-1, elementGet0.getLb());
      assertEquals(-1, elementGet0.getPosition());
      assertEquals(36, elementGet0.getType());
      assertEquals(-1, elementGet0.getLineno());
      assertEquals("36", elementGet0.toString());
      assertEquals(-1, elementGet0.getAbsolutePosition());
      assertNull(elementGet0.getJsDoc());
      assertEquals(-1, elementGet0.getRb());
      assertEquals(false, elementGet0.hasChildren());
      assertEquals(1, elementGet0.getLength());
      assertEquals(0, elementGet0.depth());
      
      Comment comment0 = elementGet0.getJsDocNode();
      assertNull(comment0);
      assertEquals(-1, elementGet0.getLb());
      assertEquals(-1, elementGet0.getPosition());
      assertEquals(36, elementGet0.getType());
      assertEquals(-1, elementGet0.getLineno());
      assertEquals("36", elementGet0.toString());
      assertEquals(-1, elementGet0.getAbsolutePosition());
      assertNull(elementGet0.getJsDoc());
      assertEquals(-1, elementGet0.getRb());
      assertEquals(false, elementGet0.hasChildren());
      assertEquals(1, elementGet0.getLength());
      assertEquals(0, elementGet0.depth());
      
      Node node0 = null;
      TreeSet<String> treeSet0 = new TreeSet<String>();
      assertNotNull(treeSet0);
      assertEquals("[]", treeSet0.toString());
      
      boolean boolean0 = true;
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5_STRICT;
      Config config0 = new Config(treeSet0, treeSet0, boolean0, config_LanguageMode0, boolean0);
      assertNotNull(config0);
      assertEquals("[]", treeSet0.toString());
      
      ToolErrorReporter toolErrorReporter0 = new ToolErrorReporter(boolean0);
      assertNotNull(toolErrorReporter0);
      assertEquals(false, toolErrorReporter0.hasReportedError());
      assertEquals(true, toolErrorReporter0.isReportingWarnings());
      
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, comment0, node0, config0, toolErrorReporter0);
      assertNotNull(jsDocInfoParser0);
      assertEquals(-1, elementGet0.getLb());
      assertEquals(-1, elementGet0.getPosition());
      assertEquals(36, elementGet0.getType());
      assertEquals(-1, elementGet0.getLineno());
      assertEquals("36", elementGet0.toString());
      assertEquals(-1, elementGet0.getAbsolutePosition());
      assertNull(elementGet0.getJsDoc());
      assertEquals(-1, elementGet0.getRb());
      assertEquals(false, elementGet0.hasChildren());
      assertEquals(1, elementGet0.getLength());
      assertEquals(0, elementGet0.depth());
      assertEquals("[]", treeSet0.toString());
      assertEquals(false, toolErrorReporter0.hasReportedError());
      assertEquals(true, toolErrorReporter0.isReportingWarnings());
      
      JSDocInfo jSDocInfo0 = jsDocInfoParser0.retrieveAndResetParsedJSDocInfo();
      assertNull(jSDocInfo0);
      assertEquals(-1, elementGet0.getLb());
      assertEquals(-1, elementGet0.getPosition());
      assertEquals(36, elementGet0.getType());
      assertEquals(-1, elementGet0.getLineno());
      assertEquals("36", elementGet0.toString());
      assertEquals(-1, elementGet0.getAbsolutePosition());
      assertNull(elementGet0.getJsDoc());
      assertEquals(-1, elementGet0.getRb());
      assertEquals(false, elementGet0.hasChildren());
      assertEquals(1, elementGet0.getLength());
      assertEquals(0, elementGet0.depth());
      assertEquals("[]", treeSet0.toString());
      assertEquals(false, toolErrorReporter0.hasReportedError());
      assertEquals(true, toolErrorReporter0.isReportingWarnings());
  }

  @Test
  public void test24()  throws Throwable  {
      String string0 = "function";
      Node node0 = JsDocInfoParser.parseTypeString(string0);
      assertNull(node0);
  }

  @Test
  public void test25()  throws Throwable  {
      String string0 = "vEH:\\hr|l";
      int int0 = 11;
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream(string0, int0, int0);
      assertNotNull(jsDocTokenStream0);
      
      ObjectProperty objectProperty0 = new ObjectProperty(int0);
      assertNotNull(objectProperty0);
      assertEquals(-1, objectProperty0.getLineno());
      assertEquals(false, objectProperty0.hasChildren());
      assertEquals(false, objectProperty0.isSetter());
      assertEquals(11, objectProperty0.getPosition());
      assertEquals(103, objectProperty0.getType());
      assertEquals(1, objectProperty0.getLength());
      assertEquals(false, objectProperty0.isGetter());
      assertEquals("103", objectProperty0.toString());
      assertEquals(0, objectProperty0.depth());
      assertNull(objectProperty0.getJsDoc());
      assertEquals(-1, objectProperty0.getOperatorPosition());
      assertEquals(11, objectProperty0.getAbsolutePosition());
      
      Comment comment0 = objectProperty0.getJsDocNode();
      assertNull(comment0);
      assertEquals(-1, objectProperty0.getLineno());
      assertEquals(false, objectProperty0.hasChildren());
      assertEquals(false, objectProperty0.isSetter());
      assertEquals(11, objectProperty0.getPosition());
      assertEquals(103, objectProperty0.getType());
      assertEquals(1, objectProperty0.getLength());
      assertEquals(false, objectProperty0.isGetter());
      assertEquals("103", objectProperty0.toString());
      assertEquals(0, objectProperty0.depth());
      assertNull(objectProperty0.getJsDoc());
      assertEquals(-1, objectProperty0.getOperatorPosition());
      assertEquals(11, objectProperty0.getAbsolutePosition());
      
      Node node0 = new Node(int0);
      assertNotNull(node0);
      assertEquals(false, node0.isName());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isLabel());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isOr());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isString());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isScript());
      assertEquals(false, node0.isCase());
      assertEquals(11, node0.getType());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isAssign());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertNull(node0.getSourceFileName());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isDo());
      assertEquals(0, node0.getLength());
      
      TreeSet<String> treeSet0 = new TreeSet<String>();
      assertNotNull(treeSet0);
      assertEquals("[]", treeSet0.toString());
      
      boolean boolean0 = false;
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5_STRICT;
      Config config0 = new Config(treeSet0, treeSet0, boolean0, config_LanguageMode0, boolean0);
      assertNotNull(config0);
      assertEquals("[]", treeSet0.toString());
      
      ToolErrorReporter toolErrorReporter0 = new ToolErrorReporter(boolean0);
      assertNotNull(toolErrorReporter0);
      assertEquals(false, toolErrorReporter0.hasReportedError());
      assertEquals(false, toolErrorReporter0.isReportingWarnings());
      
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, comment0, node0, config0, toolErrorReporter0);
      assertNotNull(jsDocInfoParser0);
      assertEquals(false, node0.isName());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isLabel());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isOr());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isString());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isScript());
      assertEquals(false, node0.isCase());
      assertEquals(11, node0.getType());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isAssign());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertNull(node0.getSourceFileName());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isDo());
      assertEquals(0, node0.getLength());
      assertEquals(-1, objectProperty0.getLineno());
      assertEquals(false, objectProperty0.hasChildren());
      assertEquals(false, objectProperty0.isSetter());
      assertEquals(11, objectProperty0.getPosition());
      assertEquals(103, objectProperty0.getType());
      assertEquals(1, objectProperty0.getLength());
      assertEquals(false, objectProperty0.isGetter());
      assertEquals("103", objectProperty0.toString());
      assertEquals(0, objectProperty0.depth());
      assertNull(objectProperty0.getJsDoc());
      assertEquals(-1, objectProperty0.getOperatorPosition());
      assertEquals(11, objectProperty0.getAbsolutePosition());
      assertEquals("[]", treeSet0.toString());
      assertEquals(false, toolErrorReporter0.hasReportedError());
      assertEquals(false, toolErrorReporter0.isReportingWarnings());
      
      Node.FileLevelJsDocBuilder node_FileLevelJsDocBuilder0 = node0.getJsDocBuilderForNode();
      assertNotNull(node_FileLevelJsDocBuilder0);
      assertEquals(false, node0.isName());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isLabel());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isOr());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isString());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isScript());
      assertEquals(false, node0.isCase());
      assertEquals(11, node0.getType());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isAssign());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertNull(node0.getSourceFileName());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isDo());
      assertEquals(0, node0.getLength());
      
      jsDocInfoParser0.setFileLevelJsDocBuilder(node_FileLevelJsDocBuilder0);
      assertEquals(false, node0.isName());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isLabel());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isOr());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isString());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isScript());
      assertEquals(false, node0.isCase());
      assertEquals(11, node0.getType());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isAssign());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertNull(node0.getSourceFileName());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isDo());
      assertEquals(0, node0.getLength());
      assertEquals(-1, objectProperty0.getLineno());
      assertEquals(false, objectProperty0.hasChildren());
      assertEquals(false, objectProperty0.isSetter());
      assertEquals(11, objectProperty0.getPosition());
      assertEquals(103, objectProperty0.getType());
      assertEquals(1, objectProperty0.getLength());
      assertEquals(false, objectProperty0.isGetter());
      assertEquals("103", objectProperty0.toString());
      assertEquals(0, objectProperty0.depth());
      assertNull(objectProperty0.getJsDoc());
      assertEquals(-1, objectProperty0.getOperatorPosition());
      assertEquals(11, objectProperty0.getAbsolutePosition());
      assertEquals("[]", treeSet0.toString());
      assertEquals(false, toolErrorReporter0.hasReportedError());
      assertEquals(false, toolErrorReporter0.isReportingWarnings());
  }

  @Test
  public void test26()  throws Throwable  {
      String string0 = "pAgFu=VI9";
      int int0 = 8188;
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream(string0, int0);
      assertNotNull(jsDocTokenStream0);
      
      ElementGet elementGet0 = new ElementGet();
      assertNotNull(elementGet0);
      assertEquals(1, elementGet0.getLength());
      assertEquals(false, elementGet0.hasChildren());
      assertEquals(36, elementGet0.getType());
      assertEquals(-1, elementGet0.getAbsolutePosition());
      assertEquals(-1, elementGet0.getLineno());
      assertEquals(-1, elementGet0.getLb());
      assertEquals(-1, elementGet0.getPosition());
      assertNull(elementGet0.getJsDoc());
      assertEquals("36", elementGet0.toString());
      assertEquals(-1, elementGet0.getRb());
      assertEquals(0, elementGet0.depth());
      
      Comment comment0 = elementGet0.getJsDocNode();
      assertNull(comment0);
      assertEquals(1, elementGet0.getLength());
      assertEquals(false, elementGet0.hasChildren());
      assertEquals(36, elementGet0.getType());
      assertEquals(-1, elementGet0.getAbsolutePosition());
      assertEquals(-1, elementGet0.getLineno());
      assertEquals(-1, elementGet0.getLb());
      assertEquals(-1, elementGet0.getPosition());
      assertNull(elementGet0.getJsDoc());
      assertEquals("36", elementGet0.toString());
      assertEquals(-1, elementGet0.getRb());
      assertEquals(0, elementGet0.depth());
      
      Node node0 = null;
      TreeSet<String> treeSet0 = new TreeSet<String>();
      assertNotNull(treeSet0);
      assertEquals("[]", treeSet0.toString());
      
      boolean boolean0 = true;
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5_STRICT;
      Config config0 = new Config(treeSet0, treeSet0, boolean0, config_LanguageMode0, boolean0);
      assertNotNull(config0);
      assertEquals("[]", treeSet0.toString());
      
      ToolErrorReporter toolErrorReporter0 = new ToolErrorReporter(boolean0);
      assertNotNull(toolErrorReporter0);
      assertEquals(true, toolErrorReporter0.isReportingWarnings());
      assertEquals(false, toolErrorReporter0.hasReportedError());
      
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, comment0, node0, config0, toolErrorReporter0);
      assertNotNull(jsDocInfoParser0);
      assertEquals("[]", treeSet0.toString());
      assertEquals(1, elementGet0.getLength());
      assertEquals(false, elementGet0.hasChildren());
      assertEquals(36, elementGet0.getType());
      assertEquals(-1, elementGet0.getAbsolutePosition());
      assertEquals(-1, elementGet0.getLineno());
      assertEquals(-1, elementGet0.getLb());
      assertEquals(-1, elementGet0.getPosition());
      assertNull(elementGet0.getJsDoc());
      assertEquals("36", elementGet0.toString());
      assertEquals(-1, elementGet0.getRb());
      assertEquals(0, elementGet0.depth());
      assertEquals(true, toolErrorReporter0.isReportingWarnings());
      assertEquals(false, toolErrorReporter0.hasReportedError());
      
      boolean boolean1 = jsDocInfoParser0.hasParsedJSDocInfo();
      assertEquals("[]", treeSet0.toString());
      assertEquals(1, elementGet0.getLength());
      assertEquals(false, elementGet0.hasChildren());
      assertEquals(36, elementGet0.getType());
      assertEquals(-1, elementGet0.getAbsolutePosition());
      assertEquals(-1, elementGet0.getLineno());
      assertEquals(-1, elementGet0.getLb());
      assertEquals(-1, elementGet0.getPosition());
      assertNull(elementGet0.getJsDoc());
      assertEquals("36", elementGet0.toString());
      assertEquals(-1, elementGet0.getRb());
      assertEquals(0, elementGet0.depth());
      assertEquals(true, toolErrorReporter0.isReportingWarnings());
      assertEquals(false, toolErrorReporter0.hasReportedError());
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean0 == boolean1);
  }

  @Test
  public void test27() {}
//   @Test
//   public void test27()  throws Throwable  {
//       String string0 = "@";
//       int int0 = 0;
//       JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream(string0, int0);
//       //  // Unstable assertion: assertNotNull(jsDocTokenStream0);
//       
//       Comment comment0 = null;
//       Node node0 = null;
//       Context context0 = Context.getCurrentContext();
//       //  // Unstable assertion: assertNotNull(context0);
//       //  // Unstable assertion: assertEquals(true, context0.isSealed());
//       //  // Unstable assertion: assertEquals(0, context0.getOptimizationLevel());
//       //  // Unstable assertion: assertEquals(0, context0.getLanguageVersion());
//       //  // Unstable assertion: assertEquals(0, context0.getInstructionObserverThreshold());
//       //  // Unstable assertion: assertEquals(true, context0.isGeneratingDebug());
//       //  // Unstable assertion: assertEquals(true, context0.isGeneratingDebugChanged());
//       //  // Unstable assertion: assertEquals(false, context0.isGeneratingSource());
//       //  // Unstable assertion: assertEquals(2147483647, context0.getMaximumInterpreterStackDepth());
//       //  // Unstable assertion: assertTrue(context0.generateObserverCount);
//       
//       Locale locale0 = Locale.KOREAN;
//       //  // Unstable assertion: assertNotNull(locale0);
//       //  // Unstable assertion: assertEquals("kor", locale0.getISO3Language());
//       //  // Unstable assertion: assertEquals("", locale0.getCountry());
//       //  // Unstable assertion: assertEquals("ko", locale0.getLanguage());
//       //  // Unstable assertion: assertEquals("", locale0.getVariant());
//       //  // Unstable assertion: assertEquals("ko", locale0.toString());
//       //  // Unstable assertion: assertEquals("", locale0.getISO3Country());
//       
//       Set<String> set0 = locale0.getUnicodeLocaleAttributes();
//       //  // Unstable assertion: assertNotNull(set0);
//       //  // Unstable assertion: assertEquals(true, set0.isEmpty());
//       //  // Unstable assertion: assertEquals(0, set0.size());
//       //  // Unstable assertion: assertEquals("kor", locale0.getISO3Language());
//       //  // Unstable assertion: assertEquals("", locale0.getCountry());
//       //  // Unstable assertion: assertEquals("ko", locale0.getLanguage());
//       //  // Unstable assertion: assertEquals("", locale0.getVariant());
//       //  // Unstable assertion: assertEquals("ko", locale0.toString());
//       //  // Unstable assertion: assertEquals("", locale0.getISO3Country());
//       
//       TreeSet<String> treeSet0 = new TreeSet<String>();
//       //  // Unstable assertion: assertNotNull(treeSet0);
//       //  // Unstable assertion: assertEquals("[]", treeSet0.toString());
//       
//       Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5_STRICT;
//       Config config0 = new Config(set0, treeSet0, context0.generateObserverCount, config_LanguageMode0, context0.generateObserverCount);
//       //  // Unstable assertion: assertNotNull(config0);
//       //  // Unstable assertion: assertEquals("[]", treeSet0.toString());
//       //  // Unstable assertion: assertEquals(true, set0.isEmpty());
//       //  // Unstable assertion: assertEquals(0, set0.size());
//       //  // Unstable assertion: assertEquals("kor", locale0.getISO3Language());
//       //  // Unstable assertion: assertEquals("", locale0.getCountry());
//       //  // Unstable assertion: assertEquals("ko", locale0.getLanguage());
//       //  // Unstable assertion: assertEquals("", locale0.getVariant());
//       //  // Unstable assertion: assertEquals("ko", locale0.toString());
//       //  // Unstable assertion: assertEquals("", locale0.getISO3Country());
//       //  // Unstable assertion: assertEquals(true, context0.isSealed());
//       //  // Unstable assertion: assertEquals(0, context0.getOptimizationLevel());
//       //  // Unstable assertion: assertEquals(0, context0.getLanguageVersion());
//       //  // Unstable assertion: assertEquals(0, context0.getInstructionObserverThreshold());
//       //  // Unstable assertion: assertEquals(true, context0.isGeneratingDebug());
//       //  // Unstable assertion: assertEquals(true, context0.isGeneratingDebugChanged());
//       //  // Unstable assertion: assertEquals(false, context0.isGeneratingSource());
//       //  // Unstable assertion: assertEquals(2147483647, context0.getMaximumInterpreterStackDepth());
//       //  // Unstable assertion: assertTrue(context0.generateObserverCount);
//       
//       ToolErrorReporter toolErrorReporter0 = new ToolErrorReporter(context0.generateObserverCount);
//       //  // Unstable assertion: assertNotNull(toolErrorReporter0);
//       //  // Unstable assertion: assertEquals(false, toolErrorReporter0.hasReportedError());
//       //  // Unstable assertion: assertEquals(true, toolErrorReporter0.isReportingWarnings());
//       //  // Unstable assertion: assertEquals(true, context0.isSealed());
//       //  // Unstable assertion: assertEquals(0, context0.getOptimizationLevel());
//       //  // Unstable assertion: assertEquals(0, context0.getLanguageVersion());
//       //  // Unstable assertion: assertEquals(0, context0.getInstructionObserverThreshold());
//       //  // Unstable assertion: assertEquals(true, context0.isGeneratingDebug());
//       //  // Unstable assertion: assertEquals(true, context0.isGeneratingDebugChanged());
//       //  // Unstable assertion: assertEquals(false, context0.isGeneratingSource());
//       //  // Unstable assertion: assertEquals(2147483647, context0.getMaximumInterpreterStackDepth());
//       //  // Unstable assertion: assertTrue(context0.generateObserverCount);
//       
//       JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, comment0, node0, config0, toolErrorReporter0);
//       //  // Unstable assertion: assertNotNull(jsDocInfoParser0);
//       //  // Unstable assertion: assertEquals("[]", treeSet0.toString());
//       //  // Unstable assertion: assertEquals(false, toolErrorReporter0.hasReportedError());
//       //  // Unstable assertion: assertEquals(true, toolErrorReporter0.isReportingWarnings());
//       //  // Unstable assertion: assertEquals(true, set0.isEmpty());
//       //  // Unstable assertion: assertEquals(0, set0.size());
//       //  // Unstable assertion: assertEquals("kor", locale0.getISO3Language());
//       //  // Unstable assertion: assertEquals("", locale0.getCountry());
//       //  // Unstable assertion: assertEquals("ko", locale0.getLanguage());
//       //  // Unstable assertion: assertEquals("", locale0.getVariant());
//       //  // Unstable assertion: assertEquals("ko", locale0.toString());
//       //  // Unstable assertion: assertEquals("", locale0.getISO3Country());
//       //  // Unstable assertion: assertEquals(true, context0.isSealed());
//       //  // Unstable assertion: assertEquals(0, context0.getOptimizationLevel());
//       //  // Unstable assertion: assertEquals(0, context0.getLanguageVersion());
//       //  // Unstable assertion: assertEquals(0, context0.getInstructionObserverThreshold());
//       //  // Unstable assertion: assertEquals(true, context0.isGeneratingDebug());
//       //  // Unstable assertion: assertEquals(true, context0.isGeneratingDebugChanged());
//       //  // Unstable assertion: assertEquals(false, context0.isGeneratingSource());
//       //  // Unstable assertion: assertEquals(2147483647, context0.getMaximumInterpreterStackDepth());
//       //  // Unstable assertion: assertTrue(context0.generateObserverCount);
//       
//       boolean boolean0 = jsDocInfoParser0.parse();
//       //  // Unstable assertion: assertEquals("[]", treeSet0.toString());
//       //  // Unstable assertion: assertEquals(false, toolErrorReporter0.hasReportedError());
//       //  // Unstable assertion: assertEquals(true, toolErrorReporter0.isReportingWarnings());
//       //  // Unstable assertion: assertEquals(true, set0.isEmpty());
//       //  // Unstable assertion: assertEquals(0, set0.size());
//       //  // Unstable assertion: assertEquals("kor", locale0.getISO3Language());
//       //  // Unstable assertion: assertEquals("", locale0.getCountry());
//       //  // Unstable assertion: assertEquals("ko", locale0.getLanguage());
//       //  // Unstable assertion: assertEquals("", locale0.getVariant());
//       //  // Unstable assertion: assertEquals("ko", locale0.toString());
//       //  // Unstable assertion: assertEquals("", locale0.getISO3Country());
//       //  // Unstable assertion: assertEquals(true, context0.isSealed());
//       //  // Unstable assertion: assertEquals(0, context0.getOptimizationLevel());
//       //  // Unstable assertion: assertEquals(0, context0.getLanguageVersion());
//       //  // Unstable assertion: assertEquals(0, context0.getInstructionObserverThreshold());
//       //  // Unstable assertion: assertEquals(true, context0.isGeneratingDebug());
//       //  // Unstable assertion: assertEquals(true, context0.isGeneratingDebugChanged());
//       //  // Unstable assertion: assertEquals(false, context0.isGeneratingSource());
//       //  // Unstable assertion: assertEquals(2147483647, context0.getMaximumInterpreterStackDepth());
//       //  // Unstable assertion: assertFalse(boolean0);
//       //  // Unstable assertion: assertTrue(context0.generateObserverCount);
//   }

  @Test
  public void test28() {}
//   @Test
//   public void test28()  throws Throwable  {
//       String string0 = " *%VC.t2";
//       int int0 = 55;
//       JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream(string0, int0);
//       //  // Unstable assertion: assertNotNull(jsDocTokenStream0);
//       
//       DoLoop doLoop0 = new DoLoop();
//       //  // Unstable assertion: assertNotNull(doLoop0);
//       //  // Unstable assertion: assertEquals(-1, doLoop0.getPosition());
//       //  // Unstable assertion: assertEquals(-1, doLoop0.getLp());
//       //  // Unstable assertion: assertEquals(-1, doLoop0.getRp());
//       //  // Unstable assertion: assertEquals(-1, doLoop0.getAbsolutePosition());
//       //  // Unstable assertion: assertNull(doLoop0.getJsDoc());
//       //  // Unstable assertion: assertEquals(-1, doLoop0.getWhilePosition());
//       //  // Unstable assertion: assertEquals(1, doLoop0.getLength());
//       //  // Unstable assertion: assertEquals(118, doLoop0.getType());
//       //  // Unstable assertion: assertEquals("118", doLoop0.toString());
//       //  // Unstable assertion: assertEquals(0, doLoop0.depth());
//       //  // Unstable assertion: assertEquals(-1, doLoop0.getLineno());
//       //  // Unstable assertion: assertEquals(false, doLoop0.hasChildren());
//       
//       Comment comment0 = doLoop0.getJsDocNode();
//       //  // Unstable assertion: assertNull(comment0);
//       //  // Unstable assertion: assertEquals(-1, doLoop0.getPosition());
//       //  // Unstable assertion: assertEquals(-1, doLoop0.getLp());
//       //  // Unstable assertion: assertEquals(-1, doLoop0.getRp());
//       //  // Unstable assertion: assertEquals(-1, doLoop0.getAbsolutePosition());
//       //  // Unstable assertion: assertNull(doLoop0.getJsDoc());
//       //  // Unstable assertion: assertEquals(-1, doLoop0.getWhilePosition());
//       //  // Unstable assertion: assertEquals(1, doLoop0.getLength());
//       //  // Unstable assertion: assertEquals(118, doLoop0.getType());
//       //  // Unstable assertion: assertEquals("118", doLoop0.toString());
//       //  // Unstable assertion: assertEquals(0, doLoop0.depth());
//       //  // Unstable assertion: assertEquals(-1, doLoop0.getLineno());
//       //  // Unstable assertion: assertEquals(false, doLoop0.hasChildren());
//       
//       Node node0 = null;
//       Locale locale0 = Locale.CANADA_FRENCH;
//       //  // Unstable assertion: assertNotNull(locale0);
//       //  // Unstable assertion: assertEquals("CA", locale0.getCountry());
//       //  // Unstable assertion: assertEquals("fra", locale0.getISO3Language());
//       //  // Unstable assertion: assertEquals("fr_CA", locale0.toString());
//       //  // Unstable assertion: assertEquals("CAN", locale0.getISO3Country());
//       //  // Unstable assertion: assertEquals("fr", locale0.getLanguage());
//       //  // Unstable assertion: assertEquals("", locale0.getVariant());
//       
//       Set<String> set0 = locale0.getUnicodeLocaleAttributes();
//       //  // Unstable assertion: assertNotNull(set0);
//       //  // Unstable assertion: assertEquals("CA", locale0.getCountry());
//       //  // Unstable assertion: assertEquals("fra", locale0.getISO3Language());
//       //  // Unstable assertion: assertEquals("fr_CA", locale0.toString());
//       //  // Unstable assertion: assertEquals("CAN", locale0.getISO3Country());
//       //  // Unstable assertion: assertEquals("fr", locale0.getLanguage());
//       //  // Unstable assertion: assertEquals("", locale0.getVariant());
//       //  // Unstable assertion: assertEquals(0, set0.size());
//       //  // Unstable assertion: assertEquals(true, set0.isEmpty());
//       
//       boolean boolean0 = false;
//       Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5;
//       Config config0 = new Config(set0, set0, boolean0, config_LanguageMode0, boolean0);
//       //  // Unstable assertion: assertNotNull(config0);
//       //  // Unstable assertion: assertEquals("CA", locale0.getCountry());
//       //  // Unstable assertion: assertEquals("fra", locale0.getISO3Language());
//       //  // Unstable assertion: assertEquals("fr_CA", locale0.toString());
//       //  // Unstable assertion: assertEquals("CAN", locale0.getISO3Country());
//       //  // Unstable assertion: assertEquals("fr", locale0.getLanguage());
//       //  // Unstable assertion: assertEquals("", locale0.getVariant());
//       //  // Unstable assertion: assertEquals(0, set0.size());
//       //  // Unstable assertion: assertEquals(true, set0.isEmpty());
//       
//       Context context0 = Context.getCurrentContext();
//       //  // Unstable assertion: assertNotNull(context0);
//       //  // Unstable assertion: assertEquals(false, context0.isGeneratingSource());
//       //  // Unstable assertion: assertEquals(0, context0.getOptimizationLevel());
//       //  // Unstable assertion: assertEquals(0, context0.getLanguageVersion());
//       //  // Unstable assertion: assertEquals(0, context0.getInstructionObserverThreshold());
//       //  // Unstable assertion: assertEquals(true, context0.isSealed());
//       //  // Unstable assertion: assertEquals(2147483647, context0.getMaximumInterpreterStackDepth());
//       //  // Unstable assertion: assertEquals(true, context0.isGeneratingDebugChanged());
//       //  // Unstable assertion: assertEquals(true, context0.isGeneratingDebug());
//       //  // Unstable assertion: assertTrue(context0.generateObserverCount);
//       
//       ToolErrorReporter toolErrorReporter0 = (ToolErrorReporter)context0.getErrorReporter();
//       //  // Unstable assertion: assertNotNull(toolErrorReporter0);
//       //  // Unstable assertion: assertEquals(false, context0.isGeneratingSource());
//       //  // Unstable assertion: assertEquals(0, context0.getOptimizationLevel());
//       //  // Unstable assertion: assertEquals(0, context0.getLanguageVersion());
//       //  // Unstable assertion: assertEquals(0, context0.getInstructionObserverThreshold());
//       //  // Unstable assertion: assertEquals(true, context0.isSealed());
//       //  // Unstable assertion: assertEquals(2147483647, context0.getMaximumInterpreterStackDepth());
//       //  // Unstable assertion: assertEquals(true, context0.isGeneratingDebugChanged());
//       //  // Unstable assertion: assertEquals(true, context0.isGeneratingDebug());
//       //  // Unstable assertion: assertEquals(true, toolErrorReporter0.isReportingWarnings());
//       //  // Unstable assertion: assertEquals(true, toolErrorReporter0.hasReportedError());
//       //  // Unstable assertion: assertTrue(context0.generateObserverCount);
//       
//       JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, comment0, node0, config0, toolErrorReporter0);
//       //  // Unstable assertion: assertNotNull(jsDocInfoParser0);
//       //  // Unstable assertion: assertEquals(-1, doLoop0.getPosition());
//       //  // Unstable assertion: assertEquals(-1, doLoop0.getLp());
//       //  // Unstable assertion: assertEquals(-1, doLoop0.getRp());
//       //  // Unstable assertion: assertEquals(-1, doLoop0.getAbsolutePosition());
//       //  // Unstable assertion: assertNull(doLoop0.getJsDoc());
//       //  // Unstable assertion: assertEquals(-1, doLoop0.getWhilePosition());
//       //  // Unstable assertion: assertEquals(1, doLoop0.getLength());
//       //  // Unstable assertion: assertEquals(118, doLoop0.getType());
//       //  // Unstable assertion: assertEquals("118", doLoop0.toString());
//       //  // Unstable assertion: assertEquals(0, doLoop0.depth());
//       //  // Unstable assertion: assertEquals(-1, doLoop0.getLineno());
//       //  // Unstable assertion: assertEquals(false, doLoop0.hasChildren());
//       //  // Unstable assertion: assertEquals("CA", locale0.getCountry());
//       //  // Unstable assertion: assertEquals("fra", locale0.getISO3Language());
//       //  // Unstable assertion: assertEquals("fr_CA", locale0.toString());
//       //  // Unstable assertion: assertEquals("CAN", locale0.getISO3Country());
//       //  // Unstable assertion: assertEquals("fr", locale0.getLanguage());
//       //  // Unstable assertion: assertEquals("", locale0.getVariant());
//       //  // Unstable assertion: assertEquals(false, context0.isGeneratingSource());
//       //  // Unstable assertion: assertEquals(0, context0.getOptimizationLevel());
//       //  // Unstable assertion: assertEquals(0, context0.getLanguageVersion());
//       //  // Unstable assertion: assertEquals(0, context0.getInstructionObserverThreshold());
//       //  // Unstable assertion: assertEquals(true, context0.isSealed());
//       //  // Unstable assertion: assertEquals(2147483647, context0.getMaximumInterpreterStackDepth());
//       //  // Unstable assertion: assertEquals(true, context0.isGeneratingDebugChanged());
//       //  // Unstable assertion: assertEquals(true, context0.isGeneratingDebug());
//       //  // Unstable assertion: assertEquals(0, set0.size());
//       //  // Unstable assertion: assertEquals(true, set0.isEmpty());
//       //  // Unstable assertion: assertEquals(true, toolErrorReporter0.isReportingWarnings());
//       //  // Unstable assertion: assertEquals(true, toolErrorReporter0.hasReportedError());
//       //  // Unstable assertion: assertTrue(context0.generateObserverCount);
//       
//       boolean boolean1 = jsDocInfoParser0.parse();
//       //  // Unstable assertion: assertEquals(-1, doLoop0.getPosition());
//       //  // Unstable assertion: assertEquals(-1, doLoop0.getLp());
//       //  // Unstable assertion: assertEquals(-1, doLoop0.getRp());
//       //  // Unstable assertion: assertEquals(-1, doLoop0.getAbsolutePosition());
//       //  // Unstable assertion: assertNull(doLoop0.getJsDoc());
//       //  // Unstable assertion: assertEquals(-1, doLoop0.getWhilePosition());
//       //  // Unstable assertion: assertEquals(1, doLoop0.getLength());
//       //  // Unstable assertion: assertEquals(118, doLoop0.getType());
//       //  // Unstable assertion: assertEquals("118", doLoop0.toString());
//       //  // Unstable assertion: assertEquals(0, doLoop0.depth());
//       //  // Unstable assertion: assertEquals(-1, doLoop0.getLineno());
//       //  // Unstable assertion: assertEquals(false, doLoop0.hasChildren());
//       //  // Unstable assertion: assertEquals("CA", locale0.getCountry());
//       //  // Unstable assertion: assertEquals("fra", locale0.getISO3Language());
//       //  // Unstable assertion: assertEquals("fr_CA", locale0.toString());
//       //  // Unstable assertion: assertEquals("CAN", locale0.getISO3Country());
//       //  // Unstable assertion: assertEquals("fr", locale0.getLanguage());
//       //  // Unstable assertion: assertEquals("", locale0.getVariant());
//       //  // Unstable assertion: assertEquals(false, context0.isGeneratingSource());
//       //  // Unstable assertion: assertEquals(0, context0.getOptimizationLevel());
//       //  // Unstable assertion: assertEquals(0, context0.getLanguageVersion());
//       //  // Unstable assertion: assertEquals(0, context0.getInstructionObserverThreshold());
//       //  // Unstable assertion: assertEquals(true, context0.isSealed());
//       //  // Unstable assertion: assertEquals(2147483647, context0.getMaximumInterpreterStackDepth());
//       //  // Unstable assertion: assertEquals(true, context0.isGeneratingDebugChanged());
//       //  // Unstable assertion: assertEquals(true, context0.isGeneratingDebug());
//       //  // Unstable assertion: assertEquals(0, set0.size());
//       //  // Unstable assertion: assertEquals(true, set0.isEmpty());
//       //  // Unstable assertion: assertEquals(true, toolErrorReporter0.isReportingWarnings());
//       //  // Unstable assertion: assertEquals(true, toolErrorReporter0.hasReportedError());
//       //  // Unstable assertion: assertFalse(boolean1);
//       //  // Unstable assertion: assertTrue(boolean1 == boolean0);
//       //  // Unstable assertion: assertTrue(boolean0 == boolean1);
//       //  // Unstable assertion: assertTrue(context0.generateObserverCount);
//   }
}
