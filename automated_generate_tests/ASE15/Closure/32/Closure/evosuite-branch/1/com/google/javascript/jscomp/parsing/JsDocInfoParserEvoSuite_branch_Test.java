/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 21:01:28 GMT 2014
 */

package com.google.javascript.jscomp.parsing;

import static org.junit.Assert.*; import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.junit.Test;
import com.google.javascript.jscomp.parsing.Config;
import com.google.javascript.jscomp.parsing.JsDocInfoParser;
import com.google.javascript.jscomp.parsing.JsDocTokenStream;
import com.google.javascript.rhino.JSDocInfo;
import com.google.javascript.rhino.Node;
import com.google.javascript.rhino.head.Context;
import com.google.javascript.rhino.head.ErrorReporter;
import com.google.javascript.rhino.head.Token;
import com.google.javascript.rhino.head.ast.ArrayComprehensionLoop;
import com.google.javascript.rhino.head.ast.AstNode;
import com.google.javascript.rhino.head.ast.BreakStatement;
import com.google.javascript.rhino.head.ast.Comment;
import com.google.javascript.rhino.head.ast.ContinueStatement;
import com.google.javascript.rhino.head.ast.ErrorCollector;
import com.google.javascript.rhino.head.ast.ExpressionStatement;
import com.google.javascript.rhino.head.ast.ForInLoop;
import com.google.javascript.rhino.head.tools.ToolErrorReporter;
import java.util.LinkedHashSet;
import java.util.Locale;
import java.util.Set;
import java.util.TreeSet;



import org.evosuite.runtime.testdata.FileSystemHandling;;
import org.junit.runner.RunWith;


public class JsDocInfoParserEvoSuite_branch_Test  {

  @Test
  public void test00()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      String string0 = "*/\n";
      Node node0 = JsDocInfoParser.parseTypeString(string0);
      assertNull(node0);
      
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream(string0);
      assertNotNull(jsDocTokenStream0);
      
      ForInLoop forInLoop0 = new ForInLoop();
      assertNotNull(forInLoop0);
      assertEquals(0, forInLoop0.depth());
      assertEquals(-1, forInLoop0.getPosition());
      assertEquals(1, forInLoop0.getLength());
      assertEquals(-1, forInLoop0.getEachPosition());
      assertEquals(119, forInLoop0.getType());
      assertEquals(-1, forInLoop0.getInPosition());
      assertEquals(false, forInLoop0.hasChildren());
      assertEquals(false, forInLoop0.isForEach());
      assertEquals(-1, forInLoop0.getRp());
      assertNull(forInLoop0.getJsDoc());
      assertEquals(-1, forInLoop0.getLineno());
      assertEquals("119", forInLoop0.toString());
      assertEquals(-1, forInLoop0.getLp());
      assertEquals(-1, forInLoop0.getAbsolutePosition());
      
      ExpressionStatement expressionStatement0 = new ExpressionStatement((AstNode) forInLoop0);
      assertNotNull(expressionStatement0);
      assertEquals(133, expressionStatement0.getType());
      assertEquals("133", expressionStatement0.toString());
      assertEquals(-1, expressionStatement0.getLineno());
      assertEquals(1, expressionStatement0.getLength());
      assertEquals(false, expressionStatement0.hasChildren());
      assertEquals(0, expressionStatement0.depth());
      assertNull(expressionStatement0.getJsDoc());
      assertEquals(-1, expressionStatement0.getAbsolutePosition());
      assertEquals(-1, expressionStatement0.getPosition());
      assertEquals(1, forInLoop0.getLength());
      assertEquals(1, forInLoop0.depth());
      assertEquals(0, forInLoop0.getPosition());
      assertEquals(-1, forInLoop0.getEachPosition());
      assertEquals(119, forInLoop0.getType());
      assertEquals(-1, forInLoop0.getInPosition());
      assertEquals(false, forInLoop0.hasChildren());
      assertEquals(false, forInLoop0.isForEach());
      assertEquals(-1, forInLoop0.getRp());
      assertNull(forInLoop0.getJsDoc());
      assertEquals(-1, forInLoop0.getLineno());
      assertEquals("119", forInLoop0.toString());
      assertEquals(-1, forInLoop0.getLp());
      assertEquals(-1, forInLoop0.getAbsolutePosition());
      
      Comment comment0 = expressionStatement0.getJsDocNode();
      assertNull(comment0);
      assertEquals(133, expressionStatement0.getType());
      assertEquals("133", expressionStatement0.toString());
      assertEquals(-1, expressionStatement0.getLineno());
      assertEquals(1, expressionStatement0.getLength());
      assertEquals(false, expressionStatement0.hasChildren());
      assertEquals(0, expressionStatement0.depth());
      assertNull(expressionStatement0.getJsDoc());
      assertEquals(-1, expressionStatement0.getAbsolutePosition());
      assertEquals(-1, expressionStatement0.getPosition());
      assertEquals(1, forInLoop0.getLength());
      assertEquals(1, forInLoop0.depth());
      assertEquals(0, forInLoop0.getPosition());
      assertEquals(-1, forInLoop0.getEachPosition());
      assertEquals(119, forInLoop0.getType());
      assertEquals(-1, forInLoop0.getInPosition());
      assertEquals(false, forInLoop0.hasChildren());
      assertEquals(false, forInLoop0.isForEach());
      assertEquals(-1, forInLoop0.getRp());
      assertNull(forInLoop0.getJsDoc());
      assertEquals(-1, forInLoop0.getLineno());
      assertEquals("119", forInLoop0.toString());
      assertEquals(-1, forInLoop0.getLp());
      assertEquals(-1, forInLoop0.getAbsolutePosition());
      
      Locale locale0 = Locale.ENGLISH;
      assertNotNull(locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.getLanguage());
      assertEquals("en", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      assertNotNull(set0);
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.getLanguage());
      assertEquals("en", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals(0, set0.size());
      assertEquals(true, set0.isEmpty());
      
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5;
      Config config0 = new Config(set0, set0, boolean0, config_LanguageMode0, boolean0);
      assertNotNull(config0);
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.getLanguage());
      assertEquals("en", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals(0, set0.size());
      assertEquals(true, set0.isEmpty());
      
      ErrorReporter errorReporter0 = null;
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, comment0, node0, config0, errorReporter0);
      assertNotNull(jsDocInfoParser0);
      assertEquals(133, expressionStatement0.getType());
      assertEquals("133", expressionStatement0.toString());
      assertEquals(-1, expressionStatement0.getLineno());
      assertEquals(1, expressionStatement0.getLength());
      assertEquals(false, expressionStatement0.hasChildren());
      assertEquals(0, expressionStatement0.depth());
      assertNull(expressionStatement0.getJsDoc());
      assertEquals(-1, expressionStatement0.getAbsolutePosition());
      assertEquals(-1, expressionStatement0.getPosition());
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.getLanguage());
      assertEquals("en", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals(0, set0.size());
      assertEquals(true, set0.isEmpty());
      assertEquals(1, forInLoop0.getLength());
      assertEquals(1, forInLoop0.depth());
      assertEquals(0, forInLoop0.getPosition());
      assertEquals(-1, forInLoop0.getEachPosition());
      assertEquals(119, forInLoop0.getType());
      assertEquals(-1, forInLoop0.getInPosition());
      assertEquals(false, forInLoop0.hasChildren());
      assertEquals(false, forInLoop0.isForEach());
      assertEquals(-1, forInLoop0.getRp());
      assertNull(forInLoop0.getJsDoc());
      assertEquals(-1, forInLoop0.getLineno());
      assertEquals("119", forInLoop0.toString());
      assertEquals(-1, forInLoop0.getLp());
      assertEquals(-1, forInLoop0.getAbsolutePosition());
      
      boolean boolean1 = jsDocInfoParser0.parse();
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean0 == boolean1);
      assertTrue(boolean1);
      assertEquals(133, expressionStatement0.getType());
      assertEquals("133", expressionStatement0.toString());
      assertEquals(-1, expressionStatement0.getLineno());
      assertEquals(1, expressionStatement0.getLength());
      assertEquals(false, expressionStatement0.hasChildren());
      assertEquals(0, expressionStatement0.depth());
      assertNull(expressionStatement0.getJsDoc());
      assertEquals(-1, expressionStatement0.getAbsolutePosition());
      assertEquals(-1, expressionStatement0.getPosition());
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.getLanguage());
      assertEquals("en", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals(0, set0.size());
      assertEquals(true, set0.isEmpty());
      assertEquals(1, forInLoop0.getLength());
      assertEquals(1, forInLoop0.depth());
      assertEquals(0, forInLoop0.getPosition());
      assertEquals(-1, forInLoop0.getEachPosition());
      assertEquals(119, forInLoop0.getType());
      assertEquals(-1, forInLoop0.getInPosition());
      assertEquals(false, forInLoop0.hasChildren());
      assertEquals(false, forInLoop0.isForEach());
      assertEquals(-1, forInLoop0.getRp());
      assertNull(forInLoop0.getJsDoc());
      assertEquals(-1, forInLoop0.getLineno());
      assertEquals("119", forInLoop0.toString());
      assertEquals(-1, forInLoop0.getLp());
      assertEquals(-1, forInLoop0.getAbsolutePosition());
      
      // Undeclared exception!
      try {
        boolean boolean2 = jsDocInfoParser0.parse();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test01()  throws Throwable  {
      String string0 = "{proxy:";
      Node node0 = JsDocInfoParser.parseTypeString(string0);
      assertNull(node0);
  }

  @Test
  public void test02()  throws Throwable  {
      String string0 = "{Jr\"V0 ?zJMqm%@S";
      Node node0 = JsDocInfoParser.parseTypeString(string0);
      assertNull(node0);
  }

  @Test
  public void test03()  throws Throwable  {
      String string0 = "{";
      Node node0 = JsDocInfoParser.parseTypeString(string0);
      assertNull(node0);
  }

  @Test
  public void test04()  throws Throwable  {
      String string0 = "[`gNINK#sN,\"0c]3";
      Node node0 = JsDocInfoParser.parseTypeString(string0);
      assertNotNull(node0);
      assertEquals(false, node0.isQuotedString());
      assertEquals(1, node0.getCharno());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(true, node0.hasChildren());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isScript());
      assertEquals(false, node0.isExprResult());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isCase());
      assertEquals(308, node0.getType());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isNull());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(true, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isDebugger());
      assertEquals(0, node0.getLineno());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isBreak());
      assertEquals(2, node0.getChildCount());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isString());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isContinue());
      assertEquals(1, node0.getSourcePosition());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isDelProp());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isOptionalArg());
  }

  @Test
  public void test05()  throws Throwable  {
      String string0 = "'+ZBB|(RN&vNh";
      Node node0 = JsDocInfoParser.parseTypeString(string0);
      assertNull(node0);
  }

  @Test
  public void test06()  throws Throwable  {
      String string0 = "(\\)dMA/XkSrBbWlfJA";
      Node node0 = JsDocInfoParser.parseTypeString(string0);
      assertNotNull(node0);
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isIn());
      assertNull(node0.getSourceFileName());
      assertEquals(301, node0.getType());
      assertEquals(0, node0.getLineno());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isString());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isBreak());
      assertEquals(1, node0.getCharno());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(true, node0.hasOneChild());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isScript());
      assertEquals(false, node0.isVoid());
      assertEquals(1, node0.getSourcePosition());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(true, node0.hasChildren());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isFor());
      assertEquals(1, node0.getChildCount());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isOnlyModifiesThisCall());
  }

  @Test
  public void test07()  throws Throwable  {
      String string0 = "function";
      Node node0 = JsDocInfoParser.parseTypeString(string0);
      assertNull(node0);
  }

  @Test
  public void test08()  throws Throwable  {
      String string0 = "8y/\n";
      Node node0 = JsDocInfoParser.parseTypeString(string0);
      assertNotNull(node0);
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isScript());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(40, node0.getType());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isTrue());
      assertEquals(3, node0.getLength());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isExprResult());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isParamList());
      assertEquals(0, node0.getSourcePosition());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isNull());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(true, node0.isString());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isCatch());
      assertEquals(0, node0.getLineno());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(0, node0.getCharno());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isSwitch());
      assertEquals(0, node0.getChildCount());
  }

  @Test
  public void test09()  throws Throwable  {
      String string0 = "undefined";
      Node node0 = JsDocInfoParser.parseTypeString(string0);
      assertNotNull(node0);
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isScript());
      assertEquals(false, node0.isGetElem());
      assertEquals(40, node0.getType());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isNE());
      assertEquals(0, node0.getSourcePosition());
      assertEquals(false, node0.isIn());
      assertEquals(true, node0.isString());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isQuotedString());
      assertNull(node0.getSourceFileName());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isVarArgs());
      assertEquals(0, node0.getLineno());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isThis());
      assertEquals(9, node0.getLength());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.isName());
      assertEquals(0, node0.getCharno());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isContinue());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isUnscopedQualifiedName());
  }

  @Test
  public void test10()  throws Throwable  {
      String string0 = "null";
      Node node0 = JsDocInfoParser.parseTypeString(string0);
      assertNotNull(node0);
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isLabelName());
      assertEquals(0, node0.getCharno());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isTry());
      assertEquals(4, node0.getLength());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isScript());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isDebugger());
      assertEquals(40, node0.getType());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isName());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isNE());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isFalse());
      assertEquals(0, node0.getLineno());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isContinue());
      assertEquals(0, node0.getSourcePosition());
      assertEquals(false, node0.isObjectLit());
      assertEquals(true, node0.isString());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isReturn());
  }

  @Test
  public void test11()  throws Throwable  {
      String string0 = "function (";
      Node node0 = JsDocInfoParser.parseTypeString(string0);
      assertNull(node0);
  }

  @Test
  public void test12()  throws Throwable  {
      String string0 = "d\\<'!_]mQ[H*#N.";
      Node node0 = JsDocInfoParser.parseTypeString(string0);
      assertNotNull(node0);
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isNumber());
      assertEquals(4, node0.getSourcePosition());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isInc());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isVarArgs());
      assertEquals(1, node0.getChildCount());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isDelProp());
      assertEquals(true, node0.hasChildren());
      assertEquals(false, node0.isHook());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(4, node0.getCharno());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isArrayLit());
      assertEquals(0, node0.getLineno());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isString());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isWhile());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isQuotedString());
      assertEquals(true, node0.hasOneChild());
      assertEquals(306, node0.getType());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isScript());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isNot());
  }

  @Test
  public void test13()  throws Throwable  {
      String string0 = "b?wY";
      Node node0 = JsDocInfoParser.parseTypeString(string0);
      assertNotNull(node0);
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isNE());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isVar());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isBlock());
      assertEquals(0, node0.getLineno());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(1, node0.getChildCount());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isNew());
      assertEquals(true, node0.hasOneChild());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isCatch());
      assertEquals(304, node0.getType());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isIf());
      assertEquals(1, node0.getCharno());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isString());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isFor());
      assertEquals(1, node0.getSourcePosition());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isSetterDef());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isComma());
      assertEquals(true, node0.hasChildren());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isScript());
      assertEquals(false, node0.isVarArgs());
  }

  @Test
  public void test14()  throws Throwable  {
      String string0 = "!";
      Node node0 = JsDocInfoParser.parseTypeString(string0);
      assertNull(node0);
  }

  @Test
  public void test15()  throws Throwable  {
      String string0 = "?]YO10,D1!fI4";
      Node node0 = JsDocInfoParser.parseTypeString(string0);
      assertNotNull(node0);
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isBlock());
      assertEquals(1, node0.getCharno());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isArrayLit());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isWith());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isScript());
      assertEquals(304, node0.getType());
      assertEquals(false, node0.isFromExterns());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isString());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(1, node0.getSourcePosition());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isLabelName());
      assertEquals(0, node0.getLineno());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isThis());
  }

  @Test
  public void test16()  throws Throwable  {
      String string0 = "G.<Z+mG";
      Node node0 = JsDocInfoParser.parseTypeString(string0);
      assertNull(node0);
  }

  @Test
  public void test17()  throws Throwable  {
      byte byte0 = (byte) (-66);
      String string0 = ")gE1";
      Node node0 = JsDocInfoParser.parseTypeString(string0);
      assertNull(node0);
      
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream(string0);
      assertNotNull(jsDocTokenStream0);
      
      ContinueStatement continueStatement0 = new ContinueStatement((int) byte0, (int) byte0);
      assertNotNull(continueStatement0);
      assertEquals(-66, continueStatement0.getPosition());
      assertEquals(-66, continueStatement0.getLength());
      assertEquals(-1, continueStatement0.getLineno());
      assertNull(continueStatement0.getJsDoc());
      assertEquals("121", continueStatement0.toString());
      assertEquals(false, continueStatement0.hasChildren());
      assertEquals(121, continueStatement0.getType());
      assertEquals(0, continueStatement0.depth());
      assertEquals(-66, continueStatement0.getAbsolutePosition());
      
      Comment comment0 = continueStatement0.getJsDocNode();
      assertNull(comment0);
      assertEquals(-66, continueStatement0.getPosition());
      assertEquals(-66, continueStatement0.getLength());
      assertEquals(-1, continueStatement0.getLineno());
      assertNull(continueStatement0.getJsDoc());
      assertEquals("121", continueStatement0.toString());
      assertEquals(false, continueStatement0.hasChildren());
      assertEquals(121, continueStatement0.getType());
      assertEquals(0, continueStatement0.depth());
      assertEquals(-66, continueStatement0.getAbsolutePosition());
      
      Locale locale0 = Locale.ROOT;
      assertNotNull(locale0);
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.toString());
      
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      assertNotNull(set0);
      assertEquals(0, set0.size());
      assertEquals(true, set0.isEmpty());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.toString());
      
      boolean boolean0 = true;
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5;
      Config config0 = new Config(set0, set0, boolean0, config_LanguageMode0, boolean0);
      assertNotNull(config0);
      assertEquals(0, set0.size());
      assertEquals(true, set0.isEmpty());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.toString());
      
      ErrorReporter errorReporter0 = null;
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, comment0, node0, config0, errorReporter0);
      assertNotNull(jsDocInfoParser0);
      assertEquals(0, set0.size());
      assertEquals(true, set0.isEmpty());
      assertEquals(-66, continueStatement0.getPosition());
      assertEquals(-66, continueStatement0.getLength());
      assertEquals(-1, continueStatement0.getLineno());
      assertNull(continueStatement0.getJsDoc());
      assertEquals("121", continueStatement0.toString());
      assertEquals(false, continueStatement0.hasChildren());
      assertEquals(121, continueStatement0.getType());
      assertEquals(0, continueStatement0.depth());
      assertEquals(-66, continueStatement0.getAbsolutePosition());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.toString());
      
      // Undeclared exception!
      try {
        boolean boolean1 = jsDocInfoParser0.parse();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test18()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      String string0 = "?5[wZa5$}]MBhQ5Ql6~";
      Node node0 = JsDocInfoParser.parseTypeString(string0);
      assertNotNull(node0);
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isScript());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isDelProp());
      assertEquals(2, node0.getSourcePosition());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isFromExterns());
      assertEquals(0, node0.getLineno());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(0, node0.getLength());
      assertEquals(2, node0.getCharno());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isHook());
      assertEquals(304, node0.getType());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isString());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.isThis());
      assertEquals(true, node0.hasOneChild());
      assertNull(node0.getSourceFileName());
      assertEquals(1, node0.getChildCount());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isIf());
      assertEquals(true, node0.hasChildren());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isVoid());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isExprResult());
      
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream(string0);
      assertNotNull(jsDocTokenStream0);
      
      ForInLoop forInLoop0 = new ForInLoop();
      assertNotNull(forInLoop0);
      assertEquals(119, forInLoop0.getType());
      assertEquals(0, forInLoop0.depth());
      assertEquals(-1, forInLoop0.getRp());
      assertEquals(-1, forInLoop0.getPosition());
      assertEquals(false, forInLoop0.hasChildren());
      assertEquals(-1, forInLoop0.getLp());
      assertEquals(1, forInLoop0.getLength());
      assertEquals("119", forInLoop0.toString());
      assertEquals(false, forInLoop0.isForEach());
      assertEquals(-1, forInLoop0.getInPosition());
      assertEquals(-1, forInLoop0.getLineno());
      assertEquals(-1, forInLoop0.getEachPosition());
      assertEquals(-1, forInLoop0.getAbsolutePosition());
      assertNull(forInLoop0.getJsDoc());
      
      ExpressionStatement expressionStatement0 = new ExpressionStatement((AstNode) forInLoop0);
      assertNotNull(expressionStatement0);
      assertEquals(-1, expressionStatement0.getPosition());
      assertNull(expressionStatement0.getJsDoc());
      assertEquals(133, expressionStatement0.getType());
      assertEquals(1, expressionStatement0.getLength());
      assertEquals(-1, expressionStatement0.getAbsolutePosition());
      assertEquals("133", expressionStatement0.toString());
      assertEquals(-1, expressionStatement0.getLineno());
      assertEquals(false, expressionStatement0.hasChildren());
      assertEquals(0, expressionStatement0.depth());
      assertEquals(119, forInLoop0.getType());
      assertEquals(0, forInLoop0.getPosition());
      assertEquals(1, forInLoop0.depth());
      assertEquals(-1, forInLoop0.getRp());
      assertEquals(false, forInLoop0.hasChildren());
      assertEquals(-1, forInLoop0.getLp());
      assertEquals(1, forInLoop0.getLength());
      assertEquals("119", forInLoop0.toString());
      assertEquals(false, forInLoop0.isForEach());
      assertEquals(-1, forInLoop0.getInPosition());
      assertEquals(-1, forInLoop0.getLineno());
      assertEquals(-1, forInLoop0.getEachPosition());
      assertEquals(-1, forInLoop0.getAbsolutePosition());
      assertNull(forInLoop0.getJsDoc());
      
      Comment comment0 = expressionStatement0.getJsDocNode();
      assertNull(comment0);
      assertEquals(-1, expressionStatement0.getPosition());
      assertNull(expressionStatement0.getJsDoc());
      assertEquals(133, expressionStatement0.getType());
      assertEquals(1, expressionStatement0.getLength());
      assertEquals(-1, expressionStatement0.getAbsolutePosition());
      assertEquals("133", expressionStatement0.toString());
      assertEquals(-1, expressionStatement0.getLineno());
      assertEquals(false, expressionStatement0.hasChildren());
      assertEquals(0, expressionStatement0.depth());
      assertEquals(119, forInLoop0.getType());
      assertEquals(0, forInLoop0.getPosition());
      assertEquals(1, forInLoop0.depth());
      assertEquals(-1, forInLoop0.getRp());
      assertEquals(false, forInLoop0.hasChildren());
      assertEquals(-1, forInLoop0.getLp());
      assertEquals(1, forInLoop0.getLength());
      assertEquals("119", forInLoop0.toString());
      assertEquals(false, forInLoop0.isForEach());
      assertEquals(-1, forInLoop0.getInPosition());
      assertEquals(-1, forInLoop0.getLineno());
      assertEquals(-1, forInLoop0.getEachPosition());
      assertEquals(-1, forInLoop0.getAbsolutePosition());
      assertNull(forInLoop0.getJsDoc());
      
      Locale locale0 = Locale.ENGLISH;
      assertNotNull(locale0);
      assertEquals("en", locale0.toString());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      assertNotNull(set0);
      assertEquals(0, set0.size());
      assertEquals(true, set0.isEmpty());
      assertEquals("en", locale0.toString());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5;
      Config config0 = new Config(set0, set0, boolean0, config_LanguageMode0, boolean0);
      assertNotNull(config0);
      assertEquals(0, set0.size());
      assertEquals(true, set0.isEmpty());
      assertEquals("en", locale0.toString());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      
      ErrorReporter errorReporter0 = null;
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, comment0, node0, config0, errorReporter0);
      assertNotNull(jsDocInfoParser0);
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isScript());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isDelProp());
      assertEquals(2, node0.getSourcePosition());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isFromExterns());
      assertEquals(0, node0.getLineno());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(0, node0.getLength());
      assertEquals(2, node0.getCharno());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isHook());
      assertEquals(304, node0.getType());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isString());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.isThis());
      assertEquals(true, node0.hasOneChild());
      assertNull(node0.getSourceFileName());
      assertEquals(1, node0.getChildCount());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isIf());
      assertEquals(true, node0.hasChildren());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isVoid());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isExprResult());
      assertEquals(0, set0.size());
      assertEquals(true, set0.isEmpty());
      assertEquals("en", locale0.toString());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals(-1, expressionStatement0.getPosition());
      assertNull(expressionStatement0.getJsDoc());
      assertEquals(133, expressionStatement0.getType());
      assertEquals(1, expressionStatement0.getLength());
      assertEquals(-1, expressionStatement0.getAbsolutePosition());
      assertEquals("133", expressionStatement0.toString());
      assertEquals(-1, expressionStatement0.getLineno());
      assertEquals(false, expressionStatement0.hasChildren());
      assertEquals(0, expressionStatement0.depth());
      assertEquals(119, forInLoop0.getType());
      assertEquals(0, forInLoop0.getPosition());
      assertEquals(1, forInLoop0.depth());
      assertEquals(-1, forInLoop0.getRp());
      assertEquals(false, forInLoop0.hasChildren());
      assertEquals(-1, forInLoop0.getLp());
      assertEquals(1, forInLoop0.getLength());
      assertEquals("119", forInLoop0.toString());
      assertEquals(false, forInLoop0.isForEach());
      assertEquals(-1, forInLoop0.getInPosition());
      assertEquals(-1, forInLoop0.getLineno());
      assertEquals(-1, forInLoop0.getEachPosition());
      assertEquals(-1, forInLoop0.getAbsolutePosition());
      assertNull(forInLoop0.getJsDoc());
      
      // Undeclared exception!
      try {
        boolean boolean1 = jsDocInfoParser0.parse();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test19()  throws Throwable  {
      String string0 = "(K";
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream(string0);
      assertNotNull(jsDocTokenStream0);
      
      int int0 = 1970;
      BreakStatement breakStatement0 = new BreakStatement(int0, int0);
      assertNotNull(breakStatement0);
      assertEquals(false, breakStatement0.hasChildren());
      assertEquals("120", breakStatement0.toString());
      assertEquals(1970, breakStatement0.getLength());
      assertEquals(1970, breakStatement0.getAbsolutePosition());
      assertEquals(120, breakStatement0.getType());
      assertEquals(0, breakStatement0.depth());
      assertEquals(-1, breakStatement0.getLineno());
      assertNull(breakStatement0.getJsDoc());
      assertEquals(1970, breakStatement0.getPosition());
      
      Comment comment0 = breakStatement0.getJsDocNode();
      assertNull(comment0);
      assertEquals(false, breakStatement0.hasChildren());
      assertEquals("120", breakStatement0.toString());
      assertEquals(1970, breakStatement0.getLength());
      assertEquals(1970, breakStatement0.getAbsolutePosition());
      assertEquals(120, breakStatement0.getType());
      assertEquals(0, breakStatement0.depth());
      assertEquals(-1, breakStatement0.getLineno());
      assertNull(breakStatement0.getJsDoc());
      assertEquals(1970, breakStatement0.getPosition());
      
      Node node0 = Node.newString(int0, string0);
      assertNotNull(node0);
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isDec());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isQuotedString());
      assertEquals(1970, node0.getType());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isString());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isIf());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isSyntheticBlock());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isDebugger());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isThis());
      assertEquals(0, node0.getLength());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isLabelName());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isScript());
      
      Locale locale0 = Locale.CANADA_FRENCH;
      assertNotNull(locale0);
      assertEquals("CA", locale0.getCountry());
      assertEquals("fr_CA", locale0.toString());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      assertNotNull(set0);
      assertEquals(0, set0.size());
      assertEquals(true, set0.isEmpty());
      assertEquals("CA", locale0.getCountry());
      assertEquals("fr_CA", locale0.toString());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      
      boolean boolean0 = true;
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5_STRICT;
      Config config0 = new Config(set0, set0, boolean0, config_LanguageMode0, boolean0);
      assertNotNull(config0);
      assertEquals(0, set0.size());
      assertEquals(true, set0.isEmpty());
      assertEquals("CA", locale0.getCountry());
      assertEquals("fr_CA", locale0.toString());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      
      ToolErrorReporter toolErrorReporter0 = new ToolErrorReporter(boolean0);
      assertNotNull(toolErrorReporter0);
      assertEquals(false, toolErrorReporter0.hasReportedError());
      assertEquals(true, toolErrorReporter0.isReportingWarnings());
      
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, comment0, node0, config0, toolErrorReporter0);
      assertNotNull(jsDocInfoParser0);
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isDec());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isQuotedString());
      assertEquals(1970, node0.getType());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isString());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isIf());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isSyntheticBlock());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isDebugger());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isThis());
      assertEquals(0, node0.getLength());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isLabelName());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isScript());
      assertEquals(0, set0.size());
      assertEquals(true, set0.isEmpty());
      assertEquals("CA", locale0.getCountry());
      assertEquals("fr_CA", locale0.toString());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals(false, breakStatement0.hasChildren());
      assertEquals("120", breakStatement0.toString());
      assertEquals(1970, breakStatement0.getLength());
      assertEquals(1970, breakStatement0.getAbsolutePosition());
      assertEquals(120, breakStatement0.getType());
      assertEquals(0, breakStatement0.depth());
      assertEquals(-1, breakStatement0.getLineno());
      assertNull(breakStatement0.getJsDoc());
      assertEquals(1970, breakStatement0.getPosition());
      assertEquals(false, toolErrorReporter0.hasReportedError());
      assertEquals(true, toolErrorReporter0.isReportingWarnings());
      
      boolean boolean1 = jsDocInfoParser0.parse();
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean0 == boolean1);
      assertFalse(boolean1);
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isDec());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isQuotedString());
      assertEquals(1970, node0.getType());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isString());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isIf());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isSyntheticBlock());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isDebugger());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isThis());
      assertEquals(0, node0.getLength());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isLabelName());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isScript());
      assertEquals(0, set0.size());
      assertEquals(true, set0.isEmpty());
      assertEquals("CA", locale0.getCountry());
      assertEquals("fr_CA", locale0.toString());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals(false, breakStatement0.hasChildren());
      assertEquals("120", breakStatement0.toString());
      assertEquals(1970, breakStatement0.getLength());
      assertEquals(1970, breakStatement0.getAbsolutePosition());
      assertEquals(120, breakStatement0.getType());
      assertEquals(0, breakStatement0.depth());
      assertEquals(-1, breakStatement0.getLineno());
      assertNull(breakStatement0.getJsDoc());
      assertEquals(1970, breakStatement0.getPosition());
      assertEquals(false, toolErrorReporter0.hasReportedError());
      assertEquals(true, toolErrorReporter0.isReportingWarnings());
  }

  @Test
  public void test20()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string0 = "*/\n";
      Node node0 = JsDocInfoParser.parseTypeString(string0);
      assertNull(node0);
      
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream(string0);
      assertNotNull(jsDocTokenStream0);
      
      ForInLoop forInLoop0 = new ForInLoop();
      assertNotNull(forInLoop0);
      assertEquals(-1, forInLoop0.getLineno());
      assertEquals(-1, forInLoop0.getAbsolutePosition());
      assertEquals(false, forInLoop0.hasChildren());
      assertEquals(-1, forInLoop0.getPosition());
      assertEquals(false, forInLoop0.isForEach());
      assertNull(forInLoop0.getJsDoc());
      assertEquals(119, forInLoop0.getType());
      assertEquals("119", forInLoop0.toString());
      assertEquals(1, forInLoop0.getLength());
      assertEquals(-1, forInLoop0.getRp());
      assertEquals(-1, forInLoop0.getEachPosition());
      assertEquals(-1, forInLoop0.getInPosition());
      assertEquals(0, forInLoop0.depth());
      assertEquals(-1, forInLoop0.getLp());
      
      ExpressionStatement expressionStatement0 = new ExpressionStatement((AstNode) forInLoop0);
      assertNotNull(expressionStatement0);
      assertEquals(-1, expressionStatement0.getAbsolutePosition());
      assertEquals(-1, expressionStatement0.getLineno());
      assertEquals(0, expressionStatement0.depth());
      assertEquals(false, expressionStatement0.hasChildren());
      assertEquals(1, expressionStatement0.getLength());
      assertNull(expressionStatement0.getJsDoc());
      assertEquals(133, expressionStatement0.getType());
      assertEquals(-1, expressionStatement0.getPosition());
      assertEquals("133", expressionStatement0.toString());
      assertEquals(-1, forInLoop0.getLineno());
      assertEquals(-1, forInLoop0.getAbsolutePosition());
      assertEquals(0, forInLoop0.getPosition());
      assertEquals(false, forInLoop0.hasChildren());
      assertEquals(false, forInLoop0.isForEach());
      assertNull(forInLoop0.getJsDoc());
      assertEquals(119, forInLoop0.getType());
      assertEquals("119", forInLoop0.toString());
      assertEquals(1, forInLoop0.getLength());
      assertEquals(-1, forInLoop0.getRp());
      assertEquals(-1, forInLoop0.getEachPosition());
      assertEquals(-1, forInLoop0.getInPosition());
      assertEquals(1, forInLoop0.depth());
      assertEquals(-1, forInLoop0.getLp());
      
      Comment comment0 = expressionStatement0.getJsDocNode();
      assertNull(comment0);
      assertEquals(-1, expressionStatement0.getAbsolutePosition());
      assertEquals(-1, expressionStatement0.getLineno());
      assertEquals(0, expressionStatement0.depth());
      assertEquals(false, expressionStatement0.hasChildren());
      assertEquals(1, expressionStatement0.getLength());
      assertNull(expressionStatement0.getJsDoc());
      assertEquals(133, expressionStatement0.getType());
      assertEquals(-1, expressionStatement0.getPosition());
      assertEquals("133", expressionStatement0.toString());
      assertEquals(-1, forInLoop0.getLineno());
      assertEquals(-1, forInLoop0.getAbsolutePosition());
      assertEquals(0, forInLoop0.getPosition());
      assertEquals(false, forInLoop0.hasChildren());
      assertEquals(false, forInLoop0.isForEach());
      assertNull(forInLoop0.getJsDoc());
      assertEquals(119, forInLoop0.getType());
      assertEquals("119", forInLoop0.toString());
      assertEquals(1, forInLoop0.getLength());
      assertEquals(-1, forInLoop0.getRp());
      assertEquals(-1, forInLoop0.getEachPosition());
      assertEquals(-1, forInLoop0.getInPosition());
      assertEquals(1, forInLoop0.depth());
      assertEquals(-1, forInLoop0.getLp());
      
      Locale locale0 = Locale.ENGLISH;
      assertNotNull(locale0);
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("en", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      assertNotNull(set0);
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("en", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals(true, set0.isEmpty());
      assertEquals(0, set0.size());
      
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5;
      Config config0 = new Config(set0, set0, boolean1, config_LanguageMode0, boolean1);
      assertFalse(boolean1 == boolean0);
      assertNotNull(config0);
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("en", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals(true, set0.isEmpty());
      assertEquals(0, set0.size());
      
      ErrorReporter errorReporter0 = null;
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, comment0, node0, config0, errorReporter0);
      assertFalse(boolean1 == boolean0);
      assertNotNull(jsDocInfoParser0);
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("en", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals(-1, expressionStatement0.getAbsolutePosition());
      assertEquals(-1, expressionStatement0.getLineno());
      assertEquals(0, expressionStatement0.depth());
      assertEquals(false, expressionStatement0.hasChildren());
      assertEquals(1, expressionStatement0.getLength());
      assertNull(expressionStatement0.getJsDoc());
      assertEquals(133, expressionStatement0.getType());
      assertEquals(-1, expressionStatement0.getPosition());
      assertEquals("133", expressionStatement0.toString());
      assertEquals(-1, forInLoop0.getLineno());
      assertEquals(-1, forInLoop0.getAbsolutePosition());
      assertEquals(0, forInLoop0.getPosition());
      assertEquals(false, forInLoop0.hasChildren());
      assertEquals(false, forInLoop0.isForEach());
      assertNull(forInLoop0.getJsDoc());
      assertEquals(119, forInLoop0.getType());
      assertEquals("119", forInLoop0.toString());
      assertEquals(1, forInLoop0.getLength());
      assertEquals(-1, forInLoop0.getRp());
      assertEquals(-1, forInLoop0.getEachPosition());
      assertEquals(-1, forInLoop0.getInPosition());
      assertEquals(1, forInLoop0.depth());
      assertEquals(-1, forInLoop0.getLp());
      assertEquals(true, set0.isEmpty());
      assertEquals(0, set0.size());
      
      boolean boolean2 = jsDocInfoParser0.parse();
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean1 == boolean2);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean2);
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("en", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals(-1, expressionStatement0.getAbsolutePosition());
      assertEquals(-1, expressionStatement0.getLineno());
      assertEquals(0, expressionStatement0.depth());
      assertEquals(false, expressionStatement0.hasChildren());
      assertEquals(1, expressionStatement0.getLength());
      assertNull(expressionStatement0.getJsDoc());
      assertEquals(133, expressionStatement0.getType());
      assertEquals(-1, expressionStatement0.getPosition());
      assertEquals("133", expressionStatement0.toString());
      assertEquals(-1, forInLoop0.getLineno());
      assertEquals(-1, forInLoop0.getAbsolutePosition());
      assertEquals(0, forInLoop0.getPosition());
      assertEquals(false, forInLoop0.hasChildren());
      assertEquals(false, forInLoop0.isForEach());
      assertNull(forInLoop0.getJsDoc());
      assertEquals(119, forInLoop0.getType());
      assertEquals("119", forInLoop0.toString());
      assertEquals(1, forInLoop0.getLength());
      assertEquals(-1, forInLoop0.getRp());
      assertEquals(-1, forInLoop0.getEachPosition());
      assertEquals(-1, forInLoop0.getInPosition());
      assertEquals(1, forInLoop0.depth());
      assertEquals(-1, forInLoop0.getLp());
      assertEquals(true, set0.isEmpty());
      assertEquals(0, set0.size());
  }

  @Test
  public void test21()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string0 = "@\n";
      Node node0 = JsDocInfoParser.parseTypeString(string0);
      assertNull(node0);
      
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream(string0);
      assertNotNull(jsDocTokenStream0);
      
      ForInLoop forInLoop0 = new ForInLoop();
      assertNotNull(forInLoop0);
      assertEquals(1, forInLoop0.getLength());
      assertEquals("119", forInLoop0.toString());
      assertEquals(0, forInLoop0.depth());
      assertEquals(-1, forInLoop0.getPosition());
      assertNull(forInLoop0.getJsDoc());
      assertEquals(-1, forInLoop0.getEachPosition());
      assertEquals(false, forInLoop0.hasChildren());
      assertEquals(-1, forInLoop0.getInPosition());
      assertEquals(-1, forInLoop0.getLineno());
      assertEquals(-1, forInLoop0.getAbsolutePosition());
      assertEquals(-1, forInLoop0.getLp());
      assertEquals(-1, forInLoop0.getRp());
      assertEquals(119, forInLoop0.getType());
      assertEquals(false, forInLoop0.isForEach());
      
      ExpressionStatement expressionStatement0 = new ExpressionStatement((AstNode) forInLoop0);
      assertNotNull(expressionStatement0);
      assertEquals(1, expressionStatement0.getLength());
      assertEquals(false, expressionStatement0.hasChildren());
      assertEquals(133, expressionStatement0.getType());
      assertNull(expressionStatement0.getJsDoc());
      assertEquals("133", expressionStatement0.toString());
      assertEquals(-1, expressionStatement0.getLineno());
      assertEquals(-1, expressionStatement0.getAbsolutePosition());
      assertEquals(0, expressionStatement0.depth());
      assertEquals(-1, expressionStatement0.getPosition());
      assertEquals(1, forInLoop0.getLength());
      assertEquals("119", forInLoop0.toString());
      assertEquals(1, forInLoop0.depth());
      assertNull(forInLoop0.getJsDoc());
      assertEquals(-1, forInLoop0.getEachPosition());
      assertEquals(false, forInLoop0.hasChildren());
      assertEquals(-1, forInLoop0.getInPosition());
      assertEquals(-1, forInLoop0.getLineno());
      assertEquals(-1, forInLoop0.getAbsolutePosition());
      assertEquals(-1, forInLoop0.getLp());
      assertEquals(-1, forInLoop0.getRp());
      assertEquals(0, forInLoop0.getPosition());
      assertEquals(119, forInLoop0.getType());
      assertEquals(false, forInLoop0.isForEach());
      
      Comment comment0 = expressionStatement0.getJsDocNode();
      assertNull(comment0);
      assertEquals(1, expressionStatement0.getLength());
      assertEquals(false, expressionStatement0.hasChildren());
      assertEquals(133, expressionStatement0.getType());
      assertNull(expressionStatement0.getJsDoc());
      assertEquals("133", expressionStatement0.toString());
      assertEquals(-1, expressionStatement0.getLineno());
      assertEquals(-1, expressionStatement0.getAbsolutePosition());
      assertEquals(0, expressionStatement0.depth());
      assertEquals(-1, expressionStatement0.getPosition());
      assertEquals(1, forInLoop0.getLength());
      assertEquals("119", forInLoop0.toString());
      assertEquals(1, forInLoop0.depth());
      assertNull(forInLoop0.getJsDoc());
      assertEquals(-1, forInLoop0.getEachPosition());
      assertEquals(false, forInLoop0.hasChildren());
      assertEquals(-1, forInLoop0.getInPosition());
      assertEquals(-1, forInLoop0.getLineno());
      assertEquals(-1, forInLoop0.getAbsolutePosition());
      assertEquals(-1, forInLoop0.getLp());
      assertEquals(-1, forInLoop0.getRp());
      assertEquals(0, forInLoop0.getPosition());
      assertEquals(119, forInLoop0.getType());
      assertEquals(false, forInLoop0.isForEach());
      
      Locale locale0 = Locale.ENGLISH;
      assertNotNull(locale0);
      assertEquals("en", locale0.toString());
      assertEquals("en", locale0.getLanguage());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      assertNotNull(set0);
      assertEquals("en", locale0.toString());
      assertEquals("en", locale0.getLanguage());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertEquals(0, set0.size());
      assertEquals(true, set0.isEmpty());
      
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5_STRICT;
      Config config0 = new Config(set0, set0, boolean1, config_LanguageMode0, boolean1);
      assertFalse(boolean1 == boolean0);
      assertNotNull(config0);
      assertEquals("en", locale0.toString());
      assertEquals("en", locale0.getLanguage());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertEquals(0, set0.size());
      assertEquals(true, set0.isEmpty());
      
      ErrorReporter errorReporter0 = null;
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, comment0, node0, config0, errorReporter0);
      assertFalse(boolean1 == boolean0);
      assertNotNull(jsDocInfoParser0);
      assertEquals(1, expressionStatement0.getLength());
      assertEquals(false, expressionStatement0.hasChildren());
      assertEquals(133, expressionStatement0.getType());
      assertNull(expressionStatement0.getJsDoc());
      assertEquals("133", expressionStatement0.toString());
      assertEquals(-1, expressionStatement0.getLineno());
      assertEquals(-1, expressionStatement0.getAbsolutePosition());
      assertEquals(0, expressionStatement0.depth());
      assertEquals(-1, expressionStatement0.getPosition());
      assertEquals(1, forInLoop0.getLength());
      assertEquals("119", forInLoop0.toString());
      assertEquals(1, forInLoop0.depth());
      assertNull(forInLoop0.getJsDoc());
      assertEquals(-1, forInLoop0.getEachPosition());
      assertEquals(false, forInLoop0.hasChildren());
      assertEquals(-1, forInLoop0.getInPosition());
      assertEquals(-1, forInLoop0.getLineno());
      assertEquals(-1, forInLoop0.getAbsolutePosition());
      assertEquals(-1, forInLoop0.getLp());
      assertEquals(-1, forInLoop0.getRp());
      assertEquals(0, forInLoop0.getPosition());
      assertEquals(119, forInLoop0.getType());
      assertEquals(false, forInLoop0.isForEach());
      assertEquals("en", locale0.toString());
      assertEquals("en", locale0.getLanguage());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertEquals(0, set0.size());
      assertEquals(true, set0.isEmpty());
      
      // Undeclared exception!
      try {
        boolean boolean2 = jsDocInfoParser0.parse();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test22()  throws Throwable  {
      String string0 = "[<p ";
      int int0 = 0;
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream(string0, int0, int0);
      assertNotNull(jsDocTokenStream0);
      
      Comment comment0 = null;
      Node node0 = Node.newNumber((double) int0);
      assertNotNull(node0);
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(true, node0.isNumber());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.hasChildren());
      assertEquals(39, node0.getType());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isScript());
      assertEquals(false, node0.isGetElem());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isSetterDef());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isString());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isEmpty());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isInstanceOf());
      
      TreeSet<String> treeSet0 = new TreeSet<String>();
      assertNotNull(treeSet0);
      assertEquals("[]", treeSet0.toString());
      
      boolean boolean0 = true;
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5_STRICT;
      Config config0 = new Config(treeSet0, treeSet0, boolean0, config_LanguageMode0, boolean0);
      assertNotNull(config0);
      assertEquals("[]", treeSet0.toString());
      
      ToolErrorReporter toolErrorReporter0 = new ToolErrorReporter(boolean0);
      assertNotNull(toolErrorReporter0);
      assertEquals(true, toolErrorReporter0.isReportingWarnings());
      assertEquals(false, toolErrorReporter0.hasReportedError());
      
      node0.setSourceFileForTesting(string0);
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(true, node0.isNumber());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.hasChildren());
      assertEquals(39, node0.getType());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isScript());
      assertEquals(false, node0.isGetElem());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isString());
      assertEquals(false, node0.isIf());
      assertEquals("[<p ", node0.getSourceFileName());
      assertEquals(false, node0.isEmpty());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isInstanceOf());
      
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, comment0, node0, config0, toolErrorReporter0);
      assertNotNull(jsDocInfoParser0);
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(true, node0.isNumber());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.hasChildren());
      assertEquals(39, node0.getType());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isScript());
      assertEquals(false, node0.isGetElem());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isString());
      assertEquals(false, node0.isIf());
      assertEquals("[<p ", node0.getSourceFileName());
      assertEquals(false, node0.isEmpty());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(true, toolErrorReporter0.isReportingWarnings());
      assertEquals(false, toolErrorReporter0.hasReportedError());
      assertEquals("[]", treeSet0.toString());
      
      boolean boolean1 = jsDocInfoParser0.parse();
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean0 == boolean1);
      assertFalse(boolean1);
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(true, node0.isNumber());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.hasChildren());
      assertEquals(39, node0.getType());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isScript());
      assertEquals(false, node0.isGetElem());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isString());
      assertEquals(false, node0.isIf());
      assertEquals("[<p ", node0.getSourceFileName());
      assertEquals(false, node0.isEmpty());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(true, toolErrorReporter0.isReportingWarnings());
      assertEquals(false, toolErrorReporter0.hasReportedError());
      assertEquals("[]", treeSet0.toString());
  }

  @Test
  public void test23() {}
//   @Test
//   public void test23()  throws Throwable  {
//       String string0 = "lU";
//       Node node0 = JsDocInfoParser.parseTypeString(string0);
//       //  // Unstable assertion: assertNotNull(node0);
//       //  // Unstable assertion: assertEquals(false, node0.isDelProp());
//       //  // Unstable assertion: assertEquals(false, node0.isAdd());
//       //  // Unstable assertion: assertEquals(false, node0.isWhile());
//       //  // Unstable assertion: assertEquals(false, node0.isLabel());
//       //  // Unstable assertion: assertEquals(false, node0.isFalse());
//       //  // Unstable assertion: assertEquals(false, node0.hasChildren());
//       //  // Unstable assertion: assertEquals(false, node0.isExprResult());
//       //  // Unstable assertion: assertEquals(false, node0.isOr());
//       //  // Unstable assertion: assertEquals(false, node0.isDebugger());
//       //  // Unstable assertion: assertEquals(2, node0.getLength());
//       //  // Unstable assertion: assertEquals(40, node0.getType());
//       //  // Unstable assertion: assertEquals(false, node0.isWith());
//       //  // Unstable assertion: assertEquals(false, node0.isVoid());
//       //  // Unstable assertion: assertEquals(false, node0.isBlock());
//       //  // Unstable assertion: assertEquals(false, node0.isComma());
//       //  // Unstable assertion: assertEquals(false, node0.isOptionalArg());
//       //  // Unstable assertion: assertEquals(false, node0.isFunction());
//       //  // Unstable assertion: assertEquals(0, node0.getChildCount());
//       //  // Unstable assertion: assertEquals(false, node0.isBreak());
//       //  // Unstable assertion: assertEquals(false, node0.isNoSideEffectsCall());
//       //  // Unstable assertion: assertEquals(false, node0.isLabelName());
//       //  // Unstable assertion: assertEquals(false, node0.isDefaultCase());
//       //  // Unstable assertion: assertEquals(false, node0.isCase());
//       //  // Unstable assertion: assertEquals(0, node0.getSideEffectFlags());
//       //  // Unstable assertion: assertEquals(false, node0.isNumber());
//       //  // Unstable assertion: assertEquals(0, node0.getLineno());
//       //  // Unstable assertion: assertEquals(0, node0.getSourcePosition());
//       //  // Unstable assertion: assertEquals(false, node0.isSwitch());
//       //  // Unstable assertion: assertEquals(false, node0.hasOneChild());
//       //  // Unstable assertion: assertEquals(false, node0.isGetterDef());
//       //  // Unstable assertion: assertEquals(false, node0.isAssign());
//       //  // Unstable assertion: assertEquals(false, node0.isNot());
//       //  // Unstable assertion: assertEquals(false, node0.isAnd());
//       //  // Unstable assertion: assertEquals(false, node0.isTypeOf());
//       //  // Unstable assertion: assertEquals(false, node0.isIf());
//       //  // Unstable assertion: assertEquals(false, node0.isDec());
//       //  // Unstable assertion: assertEquals(false, node0.isIn());
//       //  // Unstable assertion: assertEquals(false, node0.isTry());
//       //  // Unstable assertion: assertEquals(false, node0.isGetProp());
//       //  // Unstable assertion: assertEquals(true, node0.isString());
//       //  // Unstable assertion: assertNull(node0.getSourceFileName());
//       //  // Unstable assertion: assertEquals(false, node0.isInstanceOf());
//       //  // Unstable assertion: assertEquals(false, node0.isEmpty());
//       //  // Unstable assertion: assertEquals(false, node0.isHook());
//       //  // Unstable assertion: assertEquals(false, node0.isSyntheticBlock());
//       //  // Unstable assertion: assertEquals(false, node0.isName());
//       //  // Unstable assertion: assertEquals(false, node0.isParamList());
//       //  // Unstable assertion: assertEquals(false, node0.isObjectLit());
//       //  // Unstable assertion: assertEquals(false, node0.isFromExterns());
//       //  // Unstable assertion: assertEquals(false, node0.isRegExp());
//       //  // Unstable assertion: assertEquals(false, node0.isFor());
//       //  // Unstable assertion: assertEquals(false, node0.isArrayLit());
//       //  // Unstable assertion: assertEquals(false, node0.isCall());
//       //  // Unstable assertion: assertEquals(false, node0.isNE());
//       //  // Unstable assertion: assertEquals(false, node0.isVarArgs());
//       //  // Unstable assertion: assertEquals(false, node0.isTrue());
//       //  // Unstable assertion: assertEquals(false, node0.wasEmptyNode());
//       //  // Unstable assertion: assertEquals(false, node0.isGetElem());
//       //  // Unstable assertion: assertEquals(false, node0.isAssignAdd());
//       //  // Unstable assertion: assertEquals(false, node0.isNew());
//       //  // Unstable assertion: assertEquals(false, node0.isOnlyModifiesThisCall());
//       //  // Unstable assertion: assertEquals(false, node0.hasMoreThanOneChild());
//       //  // Unstable assertion: assertEquals(false, node0.isQualifiedName());
//       //  // Unstable assertion: assertEquals(false, node0.isUnscopedQualifiedName());
//       //  // Unstable assertion: assertEquals(false, node0.isContinue());
//       //  // Unstable assertion: assertEquals(false, node0.isThis());
//       //  // Unstable assertion: assertEquals(false, node0.isQuotedString());
//       //  // Unstable assertion: assertEquals(false, node0.isInc());
//       //  // Unstable assertion: assertEquals(false, node0.isDo());
//       //  // Unstable assertion: assertEquals(false, node0.isVar());
//       //  // Unstable assertion: assertEquals(false, node0.isLocalResultCall());
//       //  // Unstable assertion: assertEquals(false, node0.isNull());
//       //  // Unstable assertion: assertEquals(0, node0.getCharno());
//       //  // Unstable assertion: assertEquals(false, node0.isScript());
//       //  // Unstable assertion: assertEquals(false, node0.isSetterDef());
//       //  // Unstable assertion: assertEquals(false, node0.isThrow());
//       //  // Unstable assertion: assertEquals(false, node0.isReturn());
//       //  // Unstable assertion: assertEquals(false, node0.isCatch());
//       
//       JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream(string0);
//       //  // Unstable assertion: assertNotNull(jsDocTokenStream0);
//       
//       int int0 = 900;
//       Token.CommentType token_CommentType0 = Token.CommentType.JSDOC;
//       Comment comment0 = new Comment(int0, int0, token_CommentType0, string0);
//       //  // Unstable assertion: assertNotNull(comment0);
//       //  // Unstable assertion: assertEquals(900, comment0.getLength());
//       //  // Unstable assertion: assertNull(comment0.getJsDoc());
//       //  // Unstable assertion: assertEquals(900, comment0.getPosition());
//       //  // Unstable assertion: assertEquals(false, comment0.hasChildren());
//       //  // Unstable assertion: assertEquals("161", comment0.toString());
//       //  // Unstable assertion: assertEquals("lU", comment0.getValue());
//       //  // Unstable assertion: assertEquals(-1, comment0.getLineno());
//       //  // Unstable assertion: assertEquals(161, comment0.getType());
//       //  // Unstable assertion: assertEquals(Token.CommentType.JSDOC, comment0.getCommentType());
//       //  // Unstable assertion: assertEquals(900, comment0.getAbsolutePosition());
//       //  // Unstable assertion: assertEquals(0, comment0.depth());
//       
//       Locale locale0 = Locale.GERMAN;
//       //  // Unstable assertion: assertNotNull(locale0);
//       //  // Unstable assertion: assertEquals("", locale0.getVariant());
//       //  // Unstable assertion: assertEquals("de", locale0.getLanguage());
//       //  // Unstable assertion: assertEquals("de", locale0.toString());
//       //  // Unstable assertion: assertEquals("deu", locale0.getISO3Language());
//       //  // Unstable assertion: assertEquals("", locale0.getCountry());
//       //  // Unstable assertion: assertEquals("", locale0.getISO3Country());
//       
//       Set<String> set0 = locale0.getUnicodeLocaleAttributes();
//       //  // Unstable assertion: assertNotNull(set0);
//       //  // Unstable assertion: assertEquals("", locale0.getVariant());
//       //  // Unstable assertion: assertEquals("de", locale0.getLanguage());
//       //  // Unstable assertion: assertEquals("de", locale0.toString());
//       //  // Unstable assertion: assertEquals("deu", locale0.getISO3Language());
//       //  // Unstable assertion: assertEquals("", locale0.getCountry());
//       //  // Unstable assertion: assertEquals("", locale0.getISO3Country());
//       //  // Unstable assertion: assertEquals(0, set0.size());
//       //  // Unstable assertion: assertEquals(true, set0.isEmpty());
//       
//       TreeSet<String> treeSet0 = new TreeSet<String>();
//       //  // Unstable assertion: assertNotNull(treeSet0);
//       //  // Unstable assertion: assertEquals("[]", treeSet0.toString());
//       
//       boolean boolean0 = true;
//       Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT3;
//       Config config0 = new Config(set0, treeSet0, boolean0, config_LanguageMode0, boolean0);
//       //  // Unstable assertion: assertNotNull(config0);
//       //  // Unstable assertion: assertEquals("[]", treeSet0.toString());
//       //  // Unstable assertion: assertEquals("", locale0.getVariant());
//       //  // Unstable assertion: assertEquals("de", locale0.getLanguage());
//       //  // Unstable assertion: assertEquals("de", locale0.toString());
//       //  // Unstable assertion: assertEquals("deu", locale0.getISO3Language());
//       //  // Unstable assertion: assertEquals("", locale0.getCountry());
//       //  // Unstable assertion: assertEquals("", locale0.getISO3Country());
//       //  // Unstable assertion: assertEquals(0, set0.size());
//       //  // Unstable assertion: assertEquals(true, set0.isEmpty());
//       
//       Context context0 = Context.enter();
//       //  // Unstable assertion: assertFalse(context0.generateObserverCount);
//       //  // Unstable assertion: assertNotNull(context0);
//       //  // Unstable assertion: assertEquals(0, context0.getInstructionObserverThreshold());
//       //  // Unstable assertion: assertEquals(true, context0.isGeneratingSource());
//       //  // Unstable assertion: assertEquals(true, context0.isSealed());
//       //  // Unstable assertion: assertEquals(2147483647, context0.getMaximumInterpreterStackDepth());
//       //  // Unstable assertion: assertEquals(false, context0.isGeneratingDebug());
//       //  // Unstable assertion: assertEquals(0, context0.getOptimizationLevel());
//       //  // Unstable assertion: assertEquals(false, context0.isGeneratingDebugChanged());
//       //  // Unstable assertion: assertEquals(0, context0.getLanguageVersion());
//       
//       ToolErrorReporter toolErrorReporter0 = (ToolErrorReporter)context0.getErrorReporter();
//       //  // Unstable assertion: assertFalse(context0.generateObserverCount);
//       //  // Unstable assertion: assertNotNull(toolErrorReporter0);
//       //  // Unstable assertion: assertEquals(false, toolErrorReporter0.isReportingWarnings());
//       //  // Unstable assertion: assertEquals(true, toolErrorReporter0.hasReportedError());
//       //  // Unstable assertion: assertEquals(0, context0.getInstructionObserverThreshold());
//       //  // Unstable assertion: assertEquals(true, context0.isGeneratingSource());
//       //  // Unstable assertion: assertEquals(true, context0.isSealed());
//       //  // Unstable assertion: assertEquals(2147483647, context0.getMaximumInterpreterStackDepth());
//       //  // Unstable assertion: assertEquals(false, context0.isGeneratingDebug());
//       //  // Unstable assertion: assertEquals(0, context0.getOptimizationLevel());
//       //  // Unstable assertion: assertEquals(false, context0.isGeneratingDebugChanged());
//       //  // Unstable assertion: assertEquals(0, context0.getLanguageVersion());
//       
//       JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, comment0, node0, config0, toolErrorReporter0);
//       //  // Unstable assertion: assertFalse(context0.generateObserverCount);
//       //  // Unstable assertion: assertNotNull(jsDocInfoParser0);
//       //  // Unstable assertion: assertEquals("[]", treeSet0.toString());
//       //  // Unstable assertion: assertEquals("", locale0.getVariant());
//       //  // Unstable assertion: assertEquals("de", locale0.getLanguage());
//       //  // Unstable assertion: assertEquals("de", locale0.toString());
//       //  // Unstable assertion: assertEquals("deu", locale0.getISO3Language());
//       //  // Unstable assertion: assertEquals("", locale0.getCountry());
//       //  // Unstable assertion: assertEquals("", locale0.getISO3Country());
//       //  // Unstable assertion: assertEquals(900, comment0.getLength());
//       //  // Unstable assertion: assertNull(comment0.getJsDoc());
//       //  // Unstable assertion: assertEquals(900, comment0.getPosition());
//       //  // Unstable assertion: assertEquals(false, comment0.hasChildren());
//       //  // Unstable assertion: assertEquals("161", comment0.toString());
//       //  // Unstable assertion: assertEquals("lU", comment0.getValue());
//       //  // Unstable assertion: assertEquals(-1, comment0.getLineno());
//       //  // Unstable assertion: assertEquals(161, comment0.getType());
//       //  // Unstable assertion: assertEquals(Token.CommentType.JSDOC, comment0.getCommentType());
//       //  // Unstable assertion: assertEquals(900, comment0.getAbsolutePosition());
//       //  // Unstable assertion: assertEquals(0, comment0.depth());
//       //  // Unstable assertion: assertEquals(false, toolErrorReporter0.isReportingWarnings());
//       //  // Unstable assertion: assertEquals(true, toolErrorReporter0.hasReportedError());
//       //  // Unstable assertion: assertEquals(0, context0.getInstructionObserverThreshold());
//       //  // Unstable assertion: assertEquals(true, context0.isGeneratingSource());
//       //  // Unstable assertion: assertEquals(true, context0.isSealed());
//       //  // Unstable assertion: assertEquals(2147483647, context0.getMaximumInterpreterStackDepth());
//       //  // Unstable assertion: assertEquals(false, context0.isGeneratingDebug());
//       //  // Unstable assertion: assertEquals(0, context0.getOptimizationLevel());
//       //  // Unstable assertion: assertEquals(false, context0.isGeneratingDebugChanged());
//       //  // Unstable assertion: assertEquals(0, context0.getLanguageVersion());
//       //  // Unstable assertion: assertEquals(0, set0.size());
//       //  // Unstable assertion: assertEquals(true, set0.isEmpty());
//       //  // Unstable assertion: assertEquals(false, node0.isDelProp());
//       //  // Unstable assertion: assertEquals(false, node0.isAdd());
//       //  // Unstable assertion: assertEquals(false, node0.isWhile());
//       //  // Unstable assertion: assertEquals(false, node0.isLabel());
//       //  // Unstable assertion: assertEquals(false, node0.isFalse());
//       //  // Unstable assertion: assertEquals(false, node0.hasChildren());
//       //  // Unstable assertion: assertEquals(false, node0.isExprResult());
//       //  // Unstable assertion: assertEquals(false, node0.isOr());
//       //  // Unstable assertion: assertEquals(false, node0.isDebugger());
//       //  // Unstable assertion: assertEquals(2, node0.getLength());
//       //  // Unstable assertion: assertEquals(40, node0.getType());
//       //  // Unstable assertion: assertEquals(false, node0.isWith());
//       //  // Unstable assertion: assertEquals(false, node0.isVoid());
//       //  // Unstable assertion: assertEquals(false, node0.isBlock());
//       //  // Unstable assertion: assertEquals(false, node0.isComma());
//       //  // Unstable assertion: assertEquals(false, node0.isOptionalArg());
//       //  // Unstable assertion: assertEquals(false, node0.isFunction());
//       //  // Unstable assertion: assertEquals(0, node0.getChildCount());
//       //  // Unstable assertion: assertEquals(false, node0.isBreak());
//       //  // Unstable assertion: assertEquals(false, node0.isNoSideEffectsCall());
//       //  // Unstable assertion: assertEquals(false, node0.isLabelName());
//       //  // Unstable assertion: assertEquals(false, node0.isDefaultCase());
//       //  // Unstable assertion: assertEquals(false, node0.isCase());
//       //  // Unstable assertion: assertEquals(0, node0.getSideEffectFlags());
//       //  // Unstable assertion: assertEquals(false, node0.isNumber());
//       //  // Unstable assertion: assertEquals(0, node0.getLineno());
//       //  // Unstable assertion: assertEquals(0, node0.getSourcePosition());
//       //  // Unstable assertion: assertEquals(false, node0.isSwitch());
//       //  // Unstable assertion: assertEquals(false, node0.hasOneChild());
//       //  // Unstable assertion: assertEquals(false, node0.isGetterDef());
//       //  // Unstable assertion: assertEquals(false, node0.isAssign());
//       //  // Unstable assertion: assertEquals(false, node0.isNot());
//       //  // Unstable assertion: assertEquals(false, node0.isAnd());
//       //  // Unstable assertion: assertEquals(false, node0.isTypeOf());
//       //  // Unstable assertion: assertEquals(false, node0.isIf());
//       //  // Unstable assertion: assertEquals(false, node0.isDec());
//       //  // Unstable assertion: assertEquals(false, node0.isIn());
//       //  // Unstable assertion: assertEquals(false, node0.isTry());
//       //  // Unstable assertion: assertEquals(false, node0.isGetProp());
//       //  // Unstable assertion: assertEquals(true, node0.isString());
//       //  // Unstable assertion: assertNull(node0.getSourceFileName());
//       //  // Unstable assertion: assertEquals(false, node0.isInstanceOf());
//       //  // Unstable assertion: assertEquals(false, node0.isEmpty());
//       //  // Unstable assertion: assertEquals(false, node0.isHook());
//       //  // Unstable assertion: assertEquals(false, node0.isSyntheticBlock());
//       //  // Unstable assertion: assertEquals(false, node0.isName());
//       //  // Unstable assertion: assertEquals(false, node0.isParamList());
//       //  // Unstable assertion: assertEquals(false, node0.isObjectLit());
//       //  // Unstable assertion: assertEquals(false, node0.isFromExterns());
//       //  // Unstable assertion: assertEquals(false, node0.isRegExp());
//       //  // Unstable assertion: assertEquals(false, node0.isFor());
//       //  // Unstable assertion: assertEquals(false, node0.isArrayLit());
//       //  // Unstable assertion: assertEquals(false, node0.isCall());
//       //  // Unstable assertion: assertEquals(false, node0.isNE());
//       //  // Unstable assertion: assertEquals(false, node0.isVarArgs());
//       //  // Unstable assertion: assertEquals(false, node0.isTrue());
//       //  // Unstable assertion: assertEquals(false, node0.wasEmptyNode());
//       //  // Unstable assertion: assertEquals(false, node0.isGetElem());
//       //  // Unstable assertion: assertEquals(false, node0.isAssignAdd());
//       //  // Unstable assertion: assertEquals(false, node0.isNew());
//       //  // Unstable assertion: assertEquals(false, node0.isOnlyModifiesThisCall());
//       //  // Unstable assertion: assertEquals(false, node0.hasMoreThanOneChild());
//       //  // Unstable assertion: assertEquals(false, node0.isQualifiedName());
//       //  // Unstable assertion: assertEquals(false, node0.isUnscopedQualifiedName());
//       //  // Unstable assertion: assertEquals(false, node0.isContinue());
//       //  // Unstable assertion: assertEquals(false, node0.isThis());
//       //  // Unstable assertion: assertEquals(false, node0.isQuotedString());
//       //  // Unstable assertion: assertEquals(false, node0.isInc());
//       //  // Unstable assertion: assertEquals(false, node0.isDo());
//       //  // Unstable assertion: assertEquals(false, node0.isVar());
//       //  // Unstable assertion: assertEquals(false, node0.isLocalResultCall());
//       //  // Unstable assertion: assertEquals(false, node0.isNull());
//       //  // Unstable assertion: assertEquals(0, node0.getCharno());
//       //  // Unstable assertion: assertEquals(false, node0.isScript());
//       //  // Unstable assertion: assertEquals(false, node0.isSetterDef());
//       //  // Unstable assertion: assertEquals(false, node0.isThrow());
//       //  // Unstable assertion: assertEquals(false, node0.isReturn());
//       //  // Unstable assertion: assertEquals(false, node0.isCatch());
//   }

  @Test
  public void test24()  throws Throwable  {
      String string0 = "[{1:GE";
      Node node0 = JsDocInfoParser.parseTypeString(string0);
      assertNull(node0);
  }

  @Test
  public void test25()  throws Throwable  {
      byte byte0 = (byte) (-66);
      String string0 = ")gE1";
      Node node0 = JsDocInfoParser.parseTypeString(string0);
      assertNull(node0);
      
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream(string0);
      assertNotNull(jsDocTokenStream0);
      
      ContinueStatement continueStatement0 = new ContinueStatement((int) byte0, (int) byte0);
      assertNotNull(continueStatement0);
      assertEquals(-66, continueStatement0.getAbsolutePosition());
      assertEquals(false, continueStatement0.hasChildren());
      assertEquals(0, continueStatement0.depth());
      assertEquals(121, continueStatement0.getType());
      assertEquals("121", continueStatement0.toString());
      assertEquals(-66, continueStatement0.getLength());
      assertEquals(-66, continueStatement0.getPosition());
      assertNull(continueStatement0.getJsDoc());
      assertEquals(-1, continueStatement0.getLineno());
      
      Comment comment0 = continueStatement0.getJsDocNode();
      assertNull(comment0);
      assertEquals(-66, continueStatement0.getAbsolutePosition());
      assertEquals(false, continueStatement0.hasChildren());
      assertEquals(0, continueStatement0.depth());
      assertEquals(121, continueStatement0.getType());
      assertEquals("121", continueStatement0.toString());
      assertEquals(-66, continueStatement0.getLength());
      assertEquals(-66, continueStatement0.getPosition());
      assertNull(continueStatement0.getJsDoc());
      assertEquals(-1, continueStatement0.getLineno());
      
      Locale locale0 = Locale.ROOT;
      assertNotNull(locale0);
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      assertNotNull(set0);
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals(true, set0.isEmpty());
      assertEquals(0, set0.size());
      
      boolean boolean0 = true;
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5;
      Config config0 = new Config(set0, set0, boolean0, config_LanguageMode0, boolean0);
      assertNotNull(config0);
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals(true, set0.isEmpty());
      assertEquals(0, set0.size());
      
      ErrorReporter errorReporter0 = null;
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, comment0, node0, config0, errorReporter0);
      assertNotNull(jsDocInfoParser0);
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals(true, set0.isEmpty());
      assertEquals(0, set0.size());
      assertEquals(-66, continueStatement0.getAbsolutePosition());
      assertEquals(false, continueStatement0.hasChildren());
      assertEquals(0, continueStatement0.depth());
      assertEquals(121, continueStatement0.getType());
      assertEquals("121", continueStatement0.toString());
      assertEquals(-66, continueStatement0.getLength());
      assertEquals(-66, continueStatement0.getPosition());
      assertNull(continueStatement0.getJsDoc());
      assertEquals(-1, continueStatement0.getLineno());
      
      JSDocInfo jSDocInfo0 = jsDocInfoParser0.retrieveAndResetParsedJSDocInfo();
      assertNull(jSDocInfo0);
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals(true, set0.isEmpty());
      assertEquals(0, set0.size());
      assertEquals(-66, continueStatement0.getAbsolutePosition());
      assertEquals(false, continueStatement0.hasChildren());
      assertEquals(0, continueStatement0.depth());
      assertEquals(121, continueStatement0.getType());
      assertEquals("121", continueStatement0.toString());
      assertEquals(-66, continueStatement0.getLength());
      assertEquals(-66, continueStatement0.getPosition());
      assertNull(continueStatement0.getJsDoc());
      assertEquals(-1, continueStatement0.getLineno());
  }

  @Test
  public void test26() {}
//   @Test
//   public void test26()  throws Throwable  {
//       String string0 = "Tw*Wz2HX23E9UNy";
//       JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream(string0);
//       //  // Unstable assertion: assertNotNull(jsDocTokenStream0);
//       
//       int int0 = (-2012);
//       BreakStatement breakStatement0 = new BreakStatement(int0);
//       //  // Unstable assertion: assertNotNull(breakStatement0);
//       //  // Unstable assertion: assertEquals(0, breakStatement0.depth());
//       //  // Unstable assertion: assertEquals("120", breakStatement0.toString());
//       //  // Unstable assertion: assertEquals(-1, breakStatement0.getLineno());
//       //  // Unstable assertion: assertEquals(120, breakStatement0.getType());
//       //  // Unstable assertion: assertNull(breakStatement0.getJsDoc());
//       //  // Unstable assertion: assertEquals(-2012, breakStatement0.getPosition());
//       //  // Unstable assertion: assertEquals(-2012, breakStatement0.getAbsolutePosition());
//       //  // Unstable assertion: assertEquals(1, breakStatement0.getLength());
//       //  // Unstable assertion: assertEquals(false, breakStatement0.hasChildren());
//       
//       Comment comment0 = breakStatement0.getJsDocNode();
//       //  // Unstable assertion: assertNull(comment0);
//       //  // Unstable assertion: assertEquals(0, breakStatement0.depth());
//       //  // Unstable assertion: assertEquals("120", breakStatement0.toString());
//       //  // Unstable assertion: assertEquals(-1, breakStatement0.getLineno());
//       //  // Unstable assertion: assertEquals(120, breakStatement0.getType());
//       //  // Unstable assertion: assertNull(breakStatement0.getJsDoc());
//       //  // Unstable assertion: assertEquals(-2012, breakStatement0.getPosition());
//       //  // Unstable assertion: assertEquals(-2012, breakStatement0.getAbsolutePosition());
//       //  // Unstable assertion: assertEquals(1, breakStatement0.getLength());
//       //  // Unstable assertion: assertEquals(false, breakStatement0.hasChildren());
//       
//       Node node0 = JsDocInfoParser.parseTypeString(string0);
//       //  // Unstable assertion: assertNotNull(node0);
//       //  // Unstable assertion: assertEquals(false, node0.isCatch());
//       //  // Unstable assertion: assertEquals(false, node0.isVar());
//       //  // Unstable assertion: assertEquals(0, node0.getChildCount());
//       //  // Unstable assertion: assertEquals(false, node0.hasChildren());
//       //  // Unstable assertion: assertEquals(false, node0.isDefaultCase());
//       //  // Unstable assertion: assertEquals(false, node0.isHook());
//       //  // Unstable assertion: assertEquals(false, node0.isNE());
//       //  // Unstable assertion: assertEquals(false, node0.hasOneChild());
//       //  // Unstable assertion: assertEquals(false, node0.isIn());
//       //  // Unstable assertion: assertEquals(false, node0.isWith());
//       //  // Unstable assertion: assertEquals(false, node0.isUnscopedQualifiedName());
//       //  // Unstable assertion: assertEquals(false, node0.isBlock());
//       //  // Unstable assertion: assertEquals(false, node0.isCall());
//       //  // Unstable assertion: assertEquals(false, node0.isExprResult());
//       //  // Unstable assertion: assertEquals(false, node0.isContinue());
//       //  // Unstable assertion: assertEquals(0, node0.getLineno());
//       //  // Unstable assertion: assertEquals(false, node0.isVarArgs());
//       //  // Unstable assertion: assertEquals(false, node0.isVoid());
//       //  // Unstable assertion: assertEquals(false, node0.isTry());
//       //  // Unstable assertion: assertEquals(false, node0.isNot());
//       //  // Unstable assertion: assertEquals(false, node0.isFromExterns());
//       //  // Unstable assertion: assertEquals(false, node0.isAssignAdd());
//       //  // Unstable assertion: assertEquals(false, node0.isInstanceOf());
//       //  // Unstable assertion: assertEquals(false, node0.isReturn());
//       //  // Unstable assertion: assertEquals(false, node0.isAnd());
//       //  // Unstable assertion: assertEquals(false, node0.isSwitch());
//       //  // Unstable assertion: assertEquals(false, node0.isBreak());
//       //  // Unstable assertion: assertEquals(false, node0.isOnlyModifiesThisCall());
//       //  // Unstable assertion: assertEquals(false, node0.isNull());
//       //  // Unstable assertion: assertEquals(false, node0.isNew());
//       //  // Unstable assertion: assertEquals(false, node0.isLocalResultCall());
//       //  // Unstable assertion: assertEquals(false, node0.isSyntheticBlock());
//       //  // Unstable assertion: assertEquals(0, node0.getSideEffectFlags());
//       //  // Unstable assertion: assertEquals(false, node0.isOr());
//       //  // Unstable assertion: assertEquals(false, node0.isAdd());
//       //  // Unstable assertion: assertEquals(false, node0.isArrayLit());
//       //  // Unstable assertion: assertEquals(false, node0.isDelProp());
//       //  // Unstable assertion: assertEquals(false, node0.isFunction());
//       //  // Unstable assertion: assertEquals(false, node0.isCase());
//       //  // Unstable assertion: assertEquals(false, node0.isQualifiedName());
//       //  // Unstable assertion: assertEquals(false, node0.isFor());
//       //  // Unstable assertion: assertEquals(2, node0.getLength());
//       //  // Unstable assertion: assertEquals(false, node0.wasEmptyNode());
//       //  // Unstable assertion: assertEquals(false, node0.isName());
//       //  // Unstable assertion: assertEquals(false, node0.isGetProp());
//       //  // Unstable assertion: assertEquals(false, node0.isThrow());
//       //  // Unstable assertion: assertEquals(false, node0.isGetElem());
//       //  // Unstable assertion: assertEquals(false, node0.isSetterDef());
//       //  // Unstable assertion: assertEquals(false, node0.isEmpty());
//       //  // Unstable assertion: assertEquals(false, node0.isTrue());
//       //  // Unstable assertion: assertEquals(false, node0.isRegExp());
//       //  // Unstable assertion: assertEquals(false, node0.isFalse());
//       //  // Unstable assertion: assertEquals(false, node0.isParamList());
//       //  // Unstable assertion: assertEquals(false, node0.isTypeOf());
//       //  // Unstable assertion: assertEquals(false, node0.isQuotedString());
//       //  // Unstable assertion: assertEquals(false, node0.isThis());
//       //  // Unstable assertion: assertEquals(false, node0.isDo());
//       //  // Unstable assertion: assertEquals(0, node0.getSourcePosition());
//       //  // Unstable assertion: assertEquals(false, node0.isDec());
//       //  // Unstable assertion: assertEquals(false, node0.isObjectLit());
//       //  // Unstable assertion: assertEquals(false, node0.hasMoreThanOneChild());
//       //  // Unstable assertion: assertEquals(false, node0.isLabelName());
//       //  // Unstable assertion: assertEquals(false, node0.isLabel());
//       //  // Unstable assertion: assertEquals(false, node0.isInc());
//       //  // Unstable assertion: assertEquals(false, node0.isWhile());
//       //  // Unstable assertion: assertEquals(false, node0.isNoSideEffectsCall());
//       //  // Unstable assertion: assertEquals(false, node0.isGetterDef());
//       //  // Unstable assertion: assertEquals(false, node0.isNumber());
//       //  // Unstable assertion: assertEquals(40, node0.getType());
//       //  // Unstable assertion: assertEquals(false, node0.isOptionalArg());
//       //  // Unstable assertion: assertEquals(false, node0.isDebugger());
//       //  // Unstable assertion: assertEquals(false, node0.isComma());
//       //  // Unstable assertion: assertEquals(false, node0.isIf());
//       //  // Unstable assertion: assertEquals(true, node0.isString());
//       //  // Unstable assertion: assertEquals(false, node0.isAssign());
//       //  // Unstable assertion: assertNull(node0.getSourceFileName());
//       //  // Unstable assertion: assertEquals(false, node0.isScript());
//       //  // Unstable assertion: assertEquals(0, node0.getCharno());
//       
//       Locale locale0 = Locale.KOREA;
//       //  // Unstable assertion: assertNotNull(locale0);
//       //  // Unstable assertion: assertEquals("ko_KR", locale0.toString());
//       //  // Unstable assertion: assertEquals("KR", locale0.getCountry());
//       //  // Unstable assertion: assertEquals("", locale0.getVariant());
//       //  // Unstable assertion: assertEquals("KOR", locale0.getISO3Country());
//       //  // Unstable assertion: assertEquals("kor", locale0.getISO3Language());
//       //  // Unstable assertion: assertEquals("ko", locale0.getLanguage());
//       
//       Set<String> set0 = locale0.getUnicodeLocaleKeys();
//       //  // Unstable assertion: assertNotNull(set0);
//       //  // Unstable assertion: assertEquals(0, set0.size());
//       //  // Unstable assertion: assertEquals(true, set0.isEmpty());
//       //  // Unstable assertion: assertEquals("ko_KR", locale0.toString());
//       //  // Unstable assertion: assertEquals("KR", locale0.getCountry());
//       //  // Unstable assertion: assertEquals("", locale0.getVariant());
//       //  // Unstable assertion: assertEquals("KOR", locale0.getISO3Country());
//       //  // Unstable assertion: assertEquals("kor", locale0.getISO3Language());
//       //  // Unstable assertion: assertEquals("ko", locale0.getLanguage());
//       
//       boolean boolean0 = true;
//       Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5;
//       Config config0 = new Config(set0, set0, boolean0, config_LanguageMode0, boolean0);
//       //  // Unstable assertion: assertNotNull(config0);
//       //  // Unstable assertion: assertEquals(0, set0.size());
//       //  // Unstable assertion: assertEquals(true, set0.isEmpty());
//       //  // Unstable assertion: assertEquals("ko_KR", locale0.toString());
//       //  // Unstable assertion: assertEquals("KR", locale0.getCountry());
//       //  // Unstable assertion: assertEquals("", locale0.getVariant());
//       //  // Unstable assertion: assertEquals("KOR", locale0.getISO3Country());
//       //  // Unstable assertion: assertEquals("kor", locale0.getISO3Language());
//       //  // Unstable assertion: assertEquals("ko", locale0.getLanguage());
//       
//       Context context0 = Context.enter();
//       //  // Unstable assertion: assertFalse(context0.generateObserverCount);
//       //  // Unstable assertion: assertNotNull(context0);
//       //  // Unstable assertion: assertEquals(true, context0.isGeneratingSource());
//       //  // Unstable assertion: assertEquals(false, context0.isGeneratingDebug());
//       //  // Unstable assertion: assertEquals(0, context0.getLanguageVersion());
//       //  // Unstable assertion: assertEquals(0, context0.getInstructionObserverThreshold());
//       //  // Unstable assertion: assertEquals(false, context0.isGeneratingDebugChanged());
//       //  // Unstable assertion: assertEquals(2147483647, context0.getMaximumInterpreterStackDepth());
//       //  // Unstable assertion: assertEquals(0, context0.getOptimizationLevel());
//       //  // Unstable assertion: assertEquals(true, context0.isSealed());
//       
//       ToolErrorReporter toolErrorReporter0 = (ToolErrorReporter)context0.getErrorReporter();
//       //  // Unstable assertion: assertFalse(context0.generateObserverCount);
//       //  // Unstable assertion: assertNotNull(toolErrorReporter0);
//       //  // Unstable assertion: assertEquals(false, toolErrorReporter0.isReportingWarnings());
//       //  // Unstable assertion: assertEquals(true, toolErrorReporter0.hasReportedError());
//       //  // Unstable assertion: assertEquals(true, context0.isGeneratingSource());
//       //  // Unstable assertion: assertEquals(false, context0.isGeneratingDebug());
//       //  // Unstable assertion: assertEquals(0, context0.getLanguageVersion());
//       //  // Unstable assertion: assertEquals(0, context0.getInstructionObserverThreshold());
//       //  // Unstable assertion: assertEquals(false, context0.isGeneratingDebugChanged());
//       //  // Unstable assertion: assertEquals(2147483647, context0.getMaximumInterpreterStackDepth());
//       //  // Unstable assertion: assertEquals(0, context0.getOptimizationLevel());
//       //  // Unstable assertion: assertEquals(true, context0.isSealed());
//       
//       JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, comment0, node0, config0, toolErrorReporter0);
//       //  // Unstable assertion: assertFalse(context0.generateObserverCount);
//       //  // Unstable assertion: assertNotNull(jsDocInfoParser0);
//       //  // Unstable assertion: assertEquals(false, toolErrorReporter0.isReportingWarnings());
//       //  // Unstable assertion: assertEquals(true, toolErrorReporter0.hasReportedError());
//       //  // Unstable assertion: assertEquals(true, context0.isGeneratingSource());
//       //  // Unstable assertion: assertEquals(false, context0.isGeneratingDebug());
//       //  // Unstable assertion: assertEquals(0, context0.getLanguageVersion());
//       //  // Unstable assertion: assertEquals(0, context0.getInstructionObserverThreshold());
//       //  // Unstable assertion: assertEquals(false, context0.isGeneratingDebugChanged());
//       //  // Unstable assertion: assertEquals(2147483647, context0.getMaximumInterpreterStackDepth());
//       //  // Unstable assertion: assertEquals(0, context0.getOptimizationLevel());
//       //  // Unstable assertion: assertEquals(true, context0.isSealed());
//       //  // Unstable assertion: assertEquals(0, set0.size());
//       //  // Unstable assertion: assertEquals(true, set0.isEmpty());
//       //  // Unstable assertion: assertEquals("ko_KR", locale0.toString());
//       //  // Unstable assertion: assertEquals("KR", locale0.getCountry());
//       //  // Unstable assertion: assertEquals("", locale0.getVariant());
//       //  // Unstable assertion: assertEquals("KOR", locale0.getISO3Country());
//       //  // Unstable assertion: assertEquals("kor", locale0.getISO3Language());
//       //  // Unstable assertion: assertEquals("ko", locale0.getLanguage());
//       //  // Unstable assertion: assertEquals(0, breakStatement0.depth());
//       //  // Unstable assertion: assertEquals("120", breakStatement0.toString());
//       //  // Unstable assertion: assertEquals(-1, breakStatement0.getLineno());
//       //  // Unstable assertion: assertEquals(120, breakStatement0.getType());
//       //  // Unstable assertion: assertNull(breakStatement0.getJsDoc());
//       //  // Unstable assertion: assertEquals(-2012, breakStatement0.getPosition());
//       //  // Unstable assertion: assertEquals(-2012, breakStatement0.getAbsolutePosition());
//       //  // Unstable assertion: assertEquals(1, breakStatement0.getLength());
//       //  // Unstable assertion: assertEquals(false, breakStatement0.hasChildren());
//       //  // Unstable assertion: assertEquals(false, node0.isCatch());
//       //  // Unstable assertion: assertEquals(false, node0.isVar());
//       //  // Unstable assertion: assertEquals(0, node0.getChildCount());
//       //  // Unstable assertion: assertEquals(false, node0.hasChildren());
//       //  // Unstable assertion: assertEquals(false, node0.isDefaultCase());
//       //  // Unstable assertion: assertEquals(false, node0.isHook());
//       //  // Unstable assertion: assertEquals(false, node0.isNE());
//       //  // Unstable assertion: assertEquals(false, node0.hasOneChild());
//       //  // Unstable assertion: assertEquals(false, node0.isIn());
//       //  // Unstable assertion: assertEquals(false, node0.isWith());
//       //  // Unstable assertion: assertEquals(false, node0.isUnscopedQualifiedName());
//       //  // Unstable assertion: assertEquals(false, node0.isBlock());
//       //  // Unstable assertion: assertEquals(false, node0.isCall());
//       //  // Unstable assertion: assertEquals(false, node0.isExprResult());
//       //  // Unstable assertion: assertEquals(false, node0.isContinue());
//       //  // Unstable assertion: assertEquals(0, node0.getLineno());
//       //  // Unstable assertion: assertEquals(false, node0.isVarArgs());
//       //  // Unstable assertion: assertEquals(false, node0.isVoid());
//       //  // Unstable assertion: assertEquals(false, node0.isTry());
//       //  // Unstable assertion: assertEquals(false, node0.isNot());
//       //  // Unstable assertion: assertEquals(false, node0.isFromExterns());
//       //  // Unstable assertion: assertEquals(false, node0.isAssignAdd());
//       //  // Unstable assertion: assertEquals(false, node0.isInstanceOf());
//       //  // Unstable assertion: assertEquals(false, node0.isReturn());
//       //  // Unstable assertion: assertEquals(false, node0.isAnd());
//       //  // Unstable assertion: assertEquals(false, node0.isSwitch());
//       //  // Unstable assertion: assertEquals(false, node0.isBreak());
//       //  // Unstable assertion: assertEquals(false, node0.isOnlyModifiesThisCall());
//       //  // Unstable assertion: assertEquals(false, node0.isNull());
//       //  // Unstable assertion: assertEquals(false, node0.isNew());
//       //  // Unstable assertion: assertEquals(false, node0.isLocalResultCall());
//       //  // Unstable assertion: assertEquals(false, node0.isSyntheticBlock());
//       //  // Unstable assertion: assertEquals(0, node0.getSideEffectFlags());
//       //  // Unstable assertion: assertEquals(false, node0.isOr());
//       //  // Unstable assertion: assertEquals(false, node0.isAdd());
//       //  // Unstable assertion: assertEquals(false, node0.isArrayLit());
//       //  // Unstable assertion: assertEquals(false, node0.isDelProp());
//       //  // Unstable assertion: assertEquals(false, node0.isFunction());
//       //  // Unstable assertion: assertEquals(false, node0.isCase());
//       //  // Unstable assertion: assertEquals(false, node0.isQualifiedName());
//       //  // Unstable assertion: assertEquals(false, node0.isFor());
//       //  // Unstable assertion: assertEquals(2, node0.getLength());
//       //  // Unstable assertion: assertEquals(false, node0.wasEmptyNode());
//       //  // Unstable assertion: assertEquals(false, node0.isName());
//       //  // Unstable assertion: assertEquals(false, node0.isGetProp());
//       //  // Unstable assertion: assertEquals(false, node0.isThrow());
//       //  // Unstable assertion: assertEquals(false, node0.isGetElem());
//       //  // Unstable assertion: assertEquals(false, node0.isSetterDef());
//       //  // Unstable assertion: assertEquals(false, node0.isEmpty());
//       //  // Unstable assertion: assertEquals(false, node0.isTrue());
//       //  // Unstable assertion: assertEquals(false, node0.isRegExp());
//       //  // Unstable assertion: assertEquals(false, node0.isFalse());
//       //  // Unstable assertion: assertEquals(false, node0.isParamList());
//       //  // Unstable assertion: assertEquals(false, node0.isTypeOf());
//       //  // Unstable assertion: assertEquals(false, node0.isQuotedString());
//       //  // Unstable assertion: assertEquals(false, node0.isThis());
//       //  // Unstable assertion: assertEquals(false, node0.isDo());
//       //  // Unstable assertion: assertEquals(0, node0.getSourcePosition());
//       //  // Unstable assertion: assertEquals(false, node0.isDec());
//       //  // Unstable assertion: assertEquals(false, node0.isObjectLit());
//       //  // Unstable assertion: assertEquals(false, node0.hasMoreThanOneChild());
//       //  // Unstable assertion: assertEquals(false, node0.isLabelName());
//       //  // Unstable assertion: assertEquals(false, node0.isLabel());
//       //  // Unstable assertion: assertEquals(false, node0.isInc());
//       //  // Unstable assertion: assertEquals(false, node0.isWhile());
//       //  // Unstable assertion: assertEquals(false, node0.isNoSideEffectsCall());
//       //  // Unstable assertion: assertEquals(false, node0.isGetterDef());
//       //  // Unstable assertion: assertEquals(false, node0.isNumber());
//       //  // Unstable assertion: assertEquals(40, node0.getType());
//       //  // Unstable assertion: assertEquals(false, node0.isOptionalArg());
//       //  // Unstable assertion: assertEquals(false, node0.isDebugger());
//       //  // Unstable assertion: assertEquals(false, node0.isComma());
//       //  // Unstable assertion: assertEquals(false, node0.isIf());
//       //  // Unstable assertion: assertEquals(true, node0.isString());
//       //  // Unstable assertion: assertEquals(false, node0.isAssign());
//       //  // Unstable assertion: assertNull(node0.getSourceFileName());
//       //  // Unstable assertion: assertEquals(false, node0.isScript());
//       //  // Unstable assertion: assertEquals(0, node0.getCharno());
//       
//       Node.FileLevelJsDocBuilder node_FileLevelJsDocBuilder0 = node0.getJsDocBuilderForNode();
//       //  // Unstable assertion: assertNotNull(node_FileLevelJsDocBuilder0);
//       //  // Unstable assertion: assertEquals(false, node0.isCatch());
//       //  // Unstable assertion: assertEquals(false, node0.isVar());
//       //  // Unstable assertion: assertEquals(0, node0.getChildCount());
//       //  // Unstable assertion: assertEquals(false, node0.hasChildren());
//       //  // Unstable assertion: assertEquals(false, node0.isDefaultCase());
//       //  // Unstable assertion: assertEquals(false, node0.isHook());
//       //  // Unstable assertion: assertEquals(false, node0.isNE());
//       //  // Unstable assertion: assertEquals(false, node0.hasOneChild());
//       //  // Unstable assertion: assertEquals(false, node0.isIn());
//       //  // Unstable assertion: assertEquals(false, node0.isWith());
//       //  // Unstable assertion: assertEquals(false, node0.isUnscopedQualifiedName());
//       //  // Unstable assertion: assertEquals(false, node0.isBlock());
//       //  // Unstable assertion: assertEquals(false, node0.isCall());
//       //  // Unstable assertion: assertEquals(false, node0.isExprResult());
//       //  // Unstable assertion: assertEquals(false, node0.isContinue());
//       //  // Unstable assertion: assertEquals(0, node0.getLineno());
//       //  // Unstable assertion: assertEquals(false, node0.isVarArgs());
//       //  // Unstable assertion: assertEquals(false, node0.isVoid());
//       //  // Unstable assertion: assertEquals(false, node0.isTry());
//       //  // Unstable assertion: assertEquals(false, node0.isNot());
//       //  // Unstable assertion: assertEquals(false, node0.isFromExterns());
//       //  // Unstable assertion: assertEquals(false, node0.isAssignAdd());
//       //  // Unstable assertion: assertEquals(false, node0.isInstanceOf());
//       //  // Unstable assertion: assertEquals(false, node0.isReturn());
//       //  // Unstable assertion: assertEquals(false, node0.isAnd());
//       //  // Unstable assertion: assertEquals(false, node0.isSwitch());
//       //  // Unstable assertion: assertEquals(false, node0.isBreak());
//       //  // Unstable assertion: assertEquals(false, node0.isOnlyModifiesThisCall());
//       //  // Unstable assertion: assertEquals(false, node0.isNull());
//       //  // Unstable assertion: assertEquals(false, node0.isNew());
//       //  // Unstable assertion: assertEquals(false, node0.isLocalResultCall());
//       //  // Unstable assertion: assertEquals(false, node0.isSyntheticBlock());
//       //  // Unstable assertion: assertEquals(0, node0.getSideEffectFlags());
//       //  // Unstable assertion: assertEquals(false, node0.isOr());
//       //  // Unstable assertion: assertEquals(false, node0.isAdd());
//       //  // Unstable assertion: assertEquals(false, node0.isArrayLit());
//       //  // Unstable assertion: assertEquals(false, node0.isDelProp());
//       //  // Unstable assertion: assertEquals(false, node0.isFunction());
//       //  // Unstable assertion: assertEquals(false, node0.isCase());
//       //  // Unstable assertion: assertEquals(false, node0.isQualifiedName());
//       //  // Unstable assertion: assertEquals(false, node0.isFor());
//       //  // Unstable assertion: assertEquals(2, node0.getLength());
//       //  // Unstable assertion: assertEquals(false, node0.wasEmptyNode());
//       //  // Unstable assertion: assertEquals(false, node0.isName());
//       //  // Unstable assertion: assertEquals(false, node0.isGetProp());
//       //  // Unstable assertion: assertEquals(false, node0.isThrow());
//       //  // Unstable assertion: assertEquals(false, node0.isGetElem());
//       //  // Unstable assertion: assertEquals(false, node0.isSetterDef());
//       //  // Unstable assertion: assertEquals(false, node0.isEmpty());
//       //  // Unstable assertion: assertEquals(false, node0.isTrue());
//       //  // Unstable assertion: assertEquals(false, node0.isRegExp());
//       //  // Unstable assertion: assertEquals(false, node0.isFalse());
//       //  // Unstable assertion: assertEquals(false, node0.isParamList());
//       //  // Unstable assertion: assertEquals(false, node0.isTypeOf());
//       //  // Unstable assertion: assertEquals(false, node0.isQuotedString());
//       //  // Unstable assertion: assertEquals(false, node0.isThis());
//       //  // Unstable assertion: assertEquals(false, node0.isDo());
//       //  // Unstable assertion: assertEquals(0, node0.getSourcePosition());
//       //  // Unstable assertion: assertEquals(false, node0.isDec());
//       //  // Unstable assertion: assertEquals(false, node0.isObjectLit());
//       //  // Unstable assertion: assertEquals(false, node0.hasMoreThanOneChild());
//       //  // Unstable assertion: assertEquals(false, node0.isLabelName());
//       //  // Unstable assertion: assertEquals(false, node0.isLabel());
//       //  // Unstable assertion: assertEquals(false, node0.isInc());
//       //  // Unstable assertion: assertEquals(false, node0.isWhile());
//       //  // Unstable assertion: assertEquals(false, node0.isNoSideEffectsCall());
//       //  // Unstable assertion: assertEquals(false, node0.isGetterDef());
//       //  // Unstable assertion: assertEquals(false, node0.isNumber());
//       //  // Unstable assertion: assertEquals(40, node0.getType());
//       //  // Unstable assertion: assertEquals(false, node0.isOptionalArg());
//       //  // Unstable assertion: assertEquals(false, node0.isDebugger());
//       //  // Unstable assertion: assertEquals(false, node0.isComma());
//       //  // Unstable assertion: assertEquals(false, node0.isIf());
//       //  // Unstable assertion: assertEquals(true, node0.isString());
//       //  // Unstable assertion: assertEquals(false, node0.isAssign());
//       //  // Unstable assertion: assertNull(node0.getSourceFileName());
//       //  // Unstable assertion: assertEquals(false, node0.isScript());
//       //  // Unstable assertion: assertEquals(0, node0.getCharno());
//       
//       jsDocInfoParser0.setFileLevelJsDocBuilder(node_FileLevelJsDocBuilder0);
//       //  // Unstable assertion: assertFalse(context0.generateObserverCount);
//       //  // Unstable assertion: assertEquals(false, toolErrorReporter0.isReportingWarnings());
//       //  // Unstable assertion: assertEquals(true, toolErrorReporter0.hasReportedError());
//       //  // Unstable assertion: assertEquals(true, context0.isGeneratingSource());
//       //  // Unstable assertion: assertEquals(false, context0.isGeneratingDebug());
//       //  // Unstable assertion: assertEquals(0, context0.getLanguageVersion());
//       //  // Unstable assertion: assertEquals(0, context0.getInstructionObserverThreshold());
//       //  // Unstable assertion: assertEquals(false, context0.isGeneratingDebugChanged());
//       //  // Unstable assertion: assertEquals(2147483647, context0.getMaximumInterpreterStackDepth());
//       //  // Unstable assertion: assertEquals(0, context0.getOptimizationLevel());
//       //  // Unstable assertion: assertEquals(true, context0.isSealed());
//       //  // Unstable assertion: assertEquals(0, set0.size());
//       //  // Unstable assertion: assertEquals(true, set0.isEmpty());
//       //  // Unstable assertion: assertEquals("ko_KR", locale0.toString());
//       //  // Unstable assertion: assertEquals("KR", locale0.getCountry());
//       //  // Unstable assertion: assertEquals("", locale0.getVariant());
//       //  // Unstable assertion: assertEquals("KOR", locale0.getISO3Country());
//       //  // Unstable assertion: assertEquals("kor", locale0.getISO3Language());
//       //  // Unstable assertion: assertEquals("ko", locale0.getLanguage());
//       //  // Unstable assertion: assertEquals(0, breakStatement0.depth());
//       //  // Unstable assertion: assertEquals("120", breakStatement0.toString());
//       //  // Unstable assertion: assertEquals(-1, breakStatement0.getLineno());
//       //  // Unstable assertion: assertEquals(120, breakStatement0.getType());
//       //  // Unstable assertion: assertNull(breakStatement0.getJsDoc());
//       //  // Unstable assertion: assertEquals(-2012, breakStatement0.getPosition());
//       //  // Unstable assertion: assertEquals(-2012, breakStatement0.getAbsolutePosition());
//       //  // Unstable assertion: assertEquals(1, breakStatement0.getLength());
//       //  // Unstable assertion: assertEquals(false, breakStatement0.hasChildren());
//       //  // Unstable assertion: assertEquals(false, node0.isCatch());
//       //  // Unstable assertion: assertEquals(false, node0.isVar());
//       //  // Unstable assertion: assertEquals(0, node0.getChildCount());
//       //  // Unstable assertion: assertEquals(false, node0.hasChildren());
//       //  // Unstable assertion: assertEquals(false, node0.isDefaultCase());
//       //  // Unstable assertion: assertEquals(false, node0.isHook());
//       //  // Unstable assertion: assertEquals(false, node0.isNE());
//       //  // Unstable assertion: assertEquals(false, node0.hasOneChild());
//       //  // Unstable assertion: assertEquals(false, node0.isIn());
//       //  // Unstable assertion: assertEquals(false, node0.isWith());
//       //  // Unstable assertion: assertEquals(false, node0.isUnscopedQualifiedName());
//       //  // Unstable assertion: assertEquals(false, node0.isBlock());
//       //  // Unstable assertion: assertEquals(false, node0.isCall());
//       //  // Unstable assertion: assertEquals(false, node0.isExprResult());
//       //  // Unstable assertion: assertEquals(false, node0.isContinue());
//       //  // Unstable assertion: assertEquals(0, node0.getLineno());
//       //  // Unstable assertion: assertEquals(false, node0.isVarArgs());
//       //  // Unstable assertion: assertEquals(false, node0.isVoid());
//       //  // Unstable assertion: assertEquals(false, node0.isTry());
//       //  // Unstable assertion: assertEquals(false, node0.isNot());
//       //  // Unstable assertion: assertEquals(false, node0.isFromExterns());
//       //  // Unstable assertion: assertEquals(false, node0.isAssignAdd());
//       //  // Unstable assertion: assertEquals(false, node0.isInstanceOf());
//       //  // Unstable assertion: assertEquals(false, node0.isReturn());
//       //  // Unstable assertion: assertEquals(false, node0.isAnd());
//       //  // Unstable assertion: assertEquals(false, node0.isSwitch());
//       //  // Unstable assertion: assertEquals(false, node0.isBreak());
//       //  // Unstable assertion: assertEquals(false, node0.isOnlyModifiesThisCall());
//       //  // Unstable assertion: assertEquals(false, node0.isNull());
//       //  // Unstable assertion: assertEquals(false, node0.isNew());
//       //  // Unstable assertion: assertEquals(false, node0.isLocalResultCall());
//       //  // Unstable assertion: assertEquals(false, node0.isSyntheticBlock());
//       //  // Unstable assertion: assertEquals(0, node0.getSideEffectFlags());
//       //  // Unstable assertion: assertEquals(false, node0.isOr());
//       //  // Unstable assertion: assertEquals(false, node0.isAdd());
//       //  // Unstable assertion: assertEquals(false, node0.isArrayLit());
//       //  // Unstable assertion: assertEquals(false, node0.isDelProp());
//       //  // Unstable assertion: assertEquals(false, node0.isFunction());
//       //  // Unstable assertion: assertEquals(false, node0.isCase());
//       //  // Unstable assertion: assertEquals(false, node0.isQualifiedName());
//       //  // Unstable assertion: assertEquals(false, node0.isFor());
//       //  // Unstable assertion: assertEquals(2, node0.getLength());
//       //  // Unstable assertion: assertEquals(false, node0.wasEmptyNode());
//       //  // Unstable assertion: assertEquals(false, node0.isName());
//       //  // Unstable assertion: assertEquals(false, node0.isGetProp());
//       //  // Unstable assertion: assertEquals(false, node0.isThrow());
//       //  // Unstable assertion: assertEquals(false, node0.isGetElem());
//       //  // Unstable assertion: assertEquals(false, node0.isSetterDef());
//       //  // Unstable assertion: assertEquals(false, node0.isEmpty());
//       //  // Unstable assertion: assertEquals(false, node0.isTrue());
//       //  // Unstable assertion: assertEquals(false, node0.isRegExp());
//       //  // Unstable assertion: assertEquals(false, node0.isFalse());
//       //  // Unstable assertion: assertEquals(false, node0.isParamList());
//       //  // Unstable assertion: assertEquals(false, node0.isTypeOf());
//       //  // Unstable assertion: assertEquals(false, node0.isQuotedString());
//       //  // Unstable assertion: assertEquals(false, node0.isThis());
//       //  // Unstable assertion: assertEquals(false, node0.isDo());
//       //  // Unstable assertion: assertEquals(0, node0.getSourcePosition());
//       //  // Unstable assertion: assertEquals(false, node0.isDec());
//       //  // Unstable assertion: assertEquals(false, node0.isObjectLit());
//       //  // Unstable assertion: assertEquals(false, node0.hasMoreThanOneChild());
//       //  // Unstable assertion: assertEquals(false, node0.isLabelName());
//       //  // Unstable assertion: assertEquals(false, node0.isLabel());
//       //  // Unstable assertion: assertEquals(false, node0.isInc());
//       //  // Unstable assertion: assertEquals(false, node0.isWhile());
//       //  // Unstable assertion: assertEquals(false, node0.isNoSideEffectsCall());
//       //  // Unstable assertion: assertEquals(false, node0.isGetterDef());
//       //  // Unstable assertion: assertEquals(false, node0.isNumber());
//       //  // Unstable assertion: assertEquals(40, node0.getType());
//       //  // Unstable assertion: assertEquals(false, node0.isOptionalArg());
//       //  // Unstable assertion: assertEquals(false, node0.isDebugger());
//       //  // Unstable assertion: assertEquals(false, node0.isComma());
//       //  // Unstable assertion: assertEquals(false, node0.isIf());
//       //  // Unstable assertion: assertEquals(true, node0.isString());
//       //  // Unstable assertion: assertEquals(false, node0.isAssign());
//       //  // Unstable assertion: assertNull(node0.getSourceFileName());
//       //  // Unstable assertion: assertEquals(false, node0.isScript());
//       //  // Unstable assertion: assertEquals(0, node0.getCharno());
//   }

  @Test
  public void test27()  throws Throwable  {
      String string0 = "[<p ";
      int int0 = 0;
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream(string0, int0, int0);
      assertNotNull(jsDocTokenStream0);
      
      Comment comment0 = null;
      Node node0 = Node.newNumber((double) int0);
      assertNotNull(node0);
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isName());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isString());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isFunction());
      assertEquals(true, node0.isNumber());
      assertEquals(false, node0.isScript());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isSetterDef());
      assertEquals(39, node0.getType());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isVar());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isLabel());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isNew());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isAssign());
      assertEquals(-1, node0.getCharno());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isWhile());
      
      TreeSet<String> treeSet0 = new TreeSet<String>();
      assertNotNull(treeSet0);
      assertEquals("[]", treeSet0.toString());
      
      boolean boolean0 = true;
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5_STRICT;
      Config config0 = new Config(treeSet0, treeSet0, boolean0, config_LanguageMode0, boolean0);
      assertNotNull(config0);
      assertEquals("[]", treeSet0.toString());
      
      ToolErrorReporter toolErrorReporter0 = new ToolErrorReporter(boolean0);
      assertNotNull(toolErrorReporter0);
      assertEquals(false, toolErrorReporter0.hasReportedError());
      assertEquals(true, toolErrorReporter0.isReportingWarnings());
      
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, comment0, node0, config0, toolErrorReporter0);
      assertNotNull(jsDocInfoParser0);
      assertEquals("[]", treeSet0.toString());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isName());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isString());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isFunction());
      assertEquals(true, node0.isNumber());
      assertEquals(false, node0.isScript());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isSetterDef());
      assertEquals(39, node0.getType());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isVar());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isLabel());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isNew());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isAssign());
      assertEquals(-1, node0.getCharno());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isWhile());
      assertEquals(false, toolErrorReporter0.hasReportedError());
      assertEquals(true, toolErrorReporter0.isReportingWarnings());
      
      boolean boolean1 = jsDocInfoParser0.hasParsedJSDocInfo();
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean0 == boolean1);
      assertFalse(boolean1);
      assertEquals("[]", treeSet0.toString());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isName());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isString());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isFunction());
      assertEquals(true, node0.isNumber());
      assertEquals(false, node0.isScript());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isSetterDef());
      assertEquals(39, node0.getType());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isVar());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isLabel());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isNew());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isAssign());
      assertEquals(-1, node0.getCharno());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isWhile());
      assertEquals(false, toolErrorReporter0.hasReportedError());
      assertEquals(true, toolErrorReporter0.isReportingWarnings());
  }

  @Test
  public void test28()  throws Throwable  {
      String string0 = "[<p ";
      Node node0 = JsDocInfoParser.parseTypeString(string0);
      assertNull(node0);
  }

  @Test
  public void test29()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      String string0 = "S0{(_j xXZ3W";
      boolean boolean0 = FileSystemHandling.appendStringToFile(evoSuiteFile0, string0);
      assertFalse(boolean0);
      
      int int0 = (-3);
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream(string0, int0);
      assertNotNull(jsDocTokenStream0);
      
      ArrayComprehensionLoop arrayComprehensionLoop0 = new ArrayComprehensionLoop(int0);
      assertNotNull(arrayComprehensionLoop0);
      assertNull(arrayComprehensionLoop0.getJsDoc());
      assertEquals(-3, arrayComprehensionLoop0.getPosition());
      assertEquals(-1, arrayComprehensionLoop0.getRp());
      assertEquals(-1, arrayComprehensionLoop0.getInPosition());
      assertEquals(-1, arrayComprehensionLoop0.getEachPosition());
      assertEquals(false, arrayComprehensionLoop0.isForEach());
      assertEquals(119, arrayComprehensionLoop0.getType());
      assertEquals(0, arrayComprehensionLoop0.depth());
      assertEquals(-1, arrayComprehensionLoop0.getLineno());
      assertEquals(false, arrayComprehensionLoop0.hasChildren());
      assertEquals("119", arrayComprehensionLoop0.toString());
      assertEquals(-3, arrayComprehensionLoop0.getAbsolutePosition());
      assertEquals(1, arrayComprehensionLoop0.getLength());
      assertEquals(-1, arrayComprehensionLoop0.getLp());
      
      Comment comment0 = arrayComprehensionLoop0.getJsDocNode();
      assertNull(comment0);
      assertNull(arrayComprehensionLoop0.getJsDoc());
      assertEquals(-3, arrayComprehensionLoop0.getPosition());
      assertEquals(-1, arrayComprehensionLoop0.getRp());
      assertEquals(-1, arrayComprehensionLoop0.getInPosition());
      assertEquals(-1, arrayComprehensionLoop0.getEachPosition());
      assertEquals(false, arrayComprehensionLoop0.isForEach());
      assertEquals(119, arrayComprehensionLoop0.getType());
      assertEquals(0, arrayComprehensionLoop0.depth());
      assertEquals(-1, arrayComprehensionLoop0.getLineno());
      assertEquals(false, arrayComprehensionLoop0.hasChildren());
      assertEquals("119", arrayComprehensionLoop0.toString());
      assertEquals(-3, arrayComprehensionLoop0.getAbsolutePosition());
      assertEquals(1, arrayComprehensionLoop0.getLength());
      assertEquals(-1, arrayComprehensionLoop0.getLp());
      
      Node node0 = Node.newString(int0, string0);
      assertNotNull(node0);
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isLabelName());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isHook());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isAnd());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isScript());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isComma());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isNew());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isThrow());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isName());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isString());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isWhile());
      assertEquals(-3, node0.getType());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isBlock());
      
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      assertNotNull(linkedHashSet0);
      assertEquals(0, linkedHashSet0.size());
      assertEquals("[]", linkedHashSet0.toString());
      assertEquals(true, linkedHashSet0.isEmpty());
      
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5_STRICT;
      Config config0 = new Config(linkedHashSet0, linkedHashSet0, boolean0, config_LanguageMode0, boolean0);
      assertNotNull(config0);
      assertEquals(0, linkedHashSet0.size());
      assertEquals("[]", linkedHashSet0.toString());
      assertEquals(true, linkedHashSet0.isEmpty());
      
      ErrorCollector errorCollector0 = new ErrorCollector();
      assertNotNull(errorCollector0);
      
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, comment0, node0, config0, errorCollector0);
      assertNotNull(jsDocInfoParser0);
      assertNull(arrayComprehensionLoop0.getJsDoc());
      assertEquals(-3, arrayComprehensionLoop0.getPosition());
      assertEquals(-1, arrayComprehensionLoop0.getRp());
      assertEquals(-1, arrayComprehensionLoop0.getInPosition());
      assertEquals(-1, arrayComprehensionLoop0.getEachPosition());
      assertEquals(false, arrayComprehensionLoop0.isForEach());
      assertEquals(119, arrayComprehensionLoop0.getType());
      assertEquals(0, arrayComprehensionLoop0.depth());
      assertEquals(-1, arrayComprehensionLoop0.getLineno());
      assertEquals(false, arrayComprehensionLoop0.hasChildren());
      assertEquals("119", arrayComprehensionLoop0.toString());
      assertEquals(-3, arrayComprehensionLoop0.getAbsolutePosition());
      assertEquals(1, arrayComprehensionLoop0.getLength());
      assertEquals(-1, arrayComprehensionLoop0.getLp());
      assertEquals(0, linkedHashSet0.size());
      assertEquals("[]", linkedHashSet0.toString());
      assertEquals(true, linkedHashSet0.isEmpty());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isLabelName());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isHook());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isAnd());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isScript());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isComma());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isNew());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isThrow());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isName());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isString());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isWhile());
      assertEquals(-3, node0.getType());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isBlock());
      
      // Undeclared exception!
      try {
        boolean boolean1 = jsDocInfoParser0.parse();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
}
